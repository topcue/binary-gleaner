{
  "sha": "5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWU4NGI3ZWVmYmE1YjQyOTliMGNhODBhZWNjNWQ0ZTk5YzE5NWMxZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T17:59:01Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T18:00:08Z"
    },
    "message": "gdb: remove add_alias_cmd overload that accepts a string\n\nSame idea as previous patch, but for add_alias_cmd.  Remove the overload\nthat accepts the target command as a string (the target command name),\nleaving only the one that takes the cmd_list_element.\n\ngdb/ChangeLog:\n\n\t* command.h (add_alias_cmd): Accept target as\n\tcmd_list_element.  Update callers.\n\nChange-Id: I546311f411e9e7da9302322d6ffad4e6c56df266",
    "tree": {
      "sha": "65d675353e6cb9f90711947244a8f78d156f7021",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/65d675353e6cb9f90711947244a8f78d156f7021"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e0f25bd9717c7973197095523db7c1cdc956cea2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0f25bd9717c7973197095523db7c1cdc956cea2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e0f25bd9717c7973197095523db7c1cdc956cea2"
    }
  ],
  "stats": {
    "total": 474,
    "additions": 260,
    "deletions": 214
  },
  "files": [
    {
      "sha": "b52d06012f2c31271c11ccd4c5552880d269cbff",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* command.h (add_alias_cmd): Accept target as\n+\tcmd_list_element.  Update callers.\n+\n 2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* command.h (add_info_alias): Accept target as"
    },
    {
      "sha": "c75a79757ea24ff852231c3d381ebae39766e83d",
      "filename": "gdb/arch-utils.c",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/arch-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/arch-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -757,13 +757,15 @@ initialize_current_architecture (void)\n     arches = XRESIZEVEC (const char *, arches, nr + 2);\n     arches[nr + 0] = \"auto\";\n     arches[nr + 1] = NULL;\n-    add_setshow_enum_cmd (\"architecture\", class_support,\n-\t\t\t  arches, &set_architecture_string, \n-\t\t\t  _(\"Set architecture of target.\"),\n-\t\t\t  _(\"Show architecture of target.\"), NULL,\n-\t\t\t  set_architecture, show_architecture,\n-\t\t\t  &setlist, &showlist);\n-    add_alias_cmd (\"processor\", \"architecture\", class_support, 1, &setlist);\n+    set_show_commands architecture_cmds\n+      = add_setshow_enum_cmd (\"architecture\", class_support,\n+\t\t\t      arches, &set_architecture_string,\n+\t\t\t      _(\"Set architecture of target.\"),\n+\t\t\t      _(\"Show architecture of target.\"), NULL,\n+\t\t\t      set_architecture, show_architecture,\n+\t\t\t      &setlist, &showlist);\n+    add_alias_cmd (\"processor\", architecture_cmds.set, class_support, 1,\n+\t\t   &setlist);\n   }\n }\n "
    },
    {
      "sha": "dc00b4c735924920b07d436316cb6db56fd0613d",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -16062,12 +16062,13 @@ last tracepoint set.\"));\n \n   add_info_alias (\"tp\", info_tracepoints_cmd, 1);\n \n-  add_cmd (\"tracepoints\", class_trace, delete_trace_command, _(\"\\\n+  cmd_list_element *delete_tracepoints_cmd\n+    = add_cmd (\"tracepoints\", class_trace, delete_trace_command, _(\"\\\n Delete specified tracepoints.\\n\\\n Arguments are tracepoint numbers, separated by spaces.\\n\\\n No argument means delete all tracepoints.\"),\n \t   &deletelist);\n-  add_alias_cmd (\"tr\", \"tracepoints\", class_trace, 1, &deletelist);\n+  add_alias_cmd (\"tr\", delete_tracepoints_cmd, class_trace, 1, &deletelist);\n \n   c = add_cmd (\"tracepoints\", class_trace, disable_trace_command, _(\"\\\n Disable specified tracepoints.\\n\\"
    },
    {
      "sha": "56ae12a0c19d6c75a40b605de92380c933035908",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -1908,8 +1908,7 @@ alias_command (const char *args, int from_tty)\n \n       /* add_cmd requires *we* allocate space for name, hence the xstrdup.  */\n       alias_cmd = add_alias_cmd (xstrdup (alias_argv[alias_argc - 1]),\n-\t\t\t\t command_argv[command_argc - 1],\n-\t\t\t\t class_alias, a_opts.abbrev_flag,\n+\t\t\t\t target_cmd, class_alias, a_opts.abbrev_flag,\n \t\t\t\t c_command->subcommands);\n     }\n "
    },
    {
      "sha": "009986c9cb1056287177a4c225213fcadb6748ac",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 0,
      "deletions": 12,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -333,18 +333,6 @@ add_alias_cmd (const char *name, cmd_list_element *target,\n   return c;\n }\n \n-struct cmd_list_element *\n-add_alias_cmd (const char *name, const char *target_name,\n-\t       enum command_class theclass, int abbrev_flag,\n-\t       struct cmd_list_element **list)\n-{\n-  const char *tmp = target_name;\n-  cmd_list_element *target = lookup_cmd (&tmp, *list, \"\", NULL, 1, 1);\n-\n-  return add_alias_cmd (name, target, theclass, abbrev_flag, list);\n-}\n-\n-\n /* Update the prefix field of all sub-commands of the prefix command C.\n    We must do this when a prefix command is defined as the GDB init sequence\n    does not guarantee that a prefix command is created before its sub-commands."
    },
    {
      "sha": "f8988e4149438486df70763d47b6e3faba58f348",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -174,10 +174,6 @@ extern struct cmd_list_element *add_cmd_suppress_notification\n \t\t\t struct cmd_list_element **list,\n \t\t\t int *suppress_notification);\n \n-extern struct cmd_list_element *add_alias_cmd (const char *, const char *,\n-\t\t\t\t\t       enum command_class, int,\n-\t\t\t\t\t       struct cmd_list_element **);\n-\n extern struct cmd_list_element *add_alias_cmd (const char *,\n \t\t\t\t\t       cmd_list_element *,\n \t\t\t\t\t       enum command_class, int,"
    },
    {
      "sha": "ff2494738b0d29713a78eebb933ff437ff59e4df",
      "filename": "gdb/corefile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/corefile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/corefile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corefile.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -478,7 +478,7 @@ Use `set gnutarget auto' to specify automatic detection.\"),\n \t\t\t\t       &setlist, &showlist);\n   set_cmd_completer (set_show_gnutarget.set, complete_set_gnutarget);\n \n-  add_alias_cmd (\"g\", \"gnutarget\", class_files, 1, &setlist);\n+  add_alias_cmd (\"g\", set_show_gnutarget.set, class_files, 1, &setlist);\n \n   if (getenv (\"GNUTARGET\"))\n     set_gnutarget (getenv (\"GNUTARGET\"));"
    },
    {
      "sha": "5bd8fd4e9408afe7c6c6c0d47b1c5d865cbec3d7",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -2209,12 +2209,12 @@ void _initialize_cp_support ();\n void\n _initialize_cp_support ()\n {\n-  add_basic_prefix_cmd (\"cplus\", class_maintenance,\n-\t\t\t_(\"C++ maintenance commands.\"),\n-\t\t\t&maint_cplus_cmd_list,\n-\t\t\t0, &maintenancelist);\n-  add_alias_cmd (\"cp\", \"cplus\",\n-\t\t class_maintenance, 1,\n+  cmd_list_element *maintenance_cplus\n+    = add_basic_prefix_cmd (\"cplus\", class_maintenance,\n+\t\t\t    _(\"C++ maintenance commands.\"),\n+\t\t\t    &maint_cplus_cmd_list,\n+\t\t\t    0, &maintenancelist);\n+  add_alias_cmd (\"cp\", maintenance_cplus, class_maintenance, 1,\n \t\t &maintenancelist);\n \n   add_cmd (\"first_component\","
    },
    {
      "sha": "67ce00e9c302e9b9ee6017315f6ce9dfdfdf4eb6",
      "filename": "gdb/gnu-nat.c",
      "status": "modified",
      "additions": 32,
      "deletions": 22,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/gnu-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/gnu-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-nat.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -3197,25 +3197,31 @@ Show whether new threads are allowed to run (once gdb has noticed them).\"),\n \t   _(\"Show the default detach-suspend-count value for new threads.\"),\n \t   &show_thread_default_cmd_list);\n \n-  add_cmd (\"signals\", class_run, set_signals_cmd, _(\"\\\n+  cmd_list_element *set_signals_cmd\n+    = add_cmd (\"signals\", class_run, set_signals_cmd, _(\"\\\n Set whether the inferior process's signals will be intercepted.\\n\\\n Mach exceptions (such as breakpoint traps) are not affected.\"),\n-\t   &setlist);\n-  add_alias_cmd (\"sigs\", \"signals\", class_run, 1, &setlist);\n-  add_cmd (\"signals\", no_class, show_signals_cmd, _(\"\\\n+\t       &setlist);\n+  add_alias_cmd (\"sigs\", set_signals_cmd, class_run, 1, &setlist);\n+\n+  cmd_list_element *show_signals_cmd\n+    = add_cmd (\"signals\", no_class, show_signals_cmd, _(\"\\\n Show whether the inferior process's signals will be intercepted.\"),\n-\t   &showlist);\n-  add_alias_cmd (\"sigs\", \"signals\", no_class, 1, &showlist);\n+\t       &showlist);\n+  add_alias_cmd (\"sigs\", show_signals_cmd, no_class, 1, &showlist);\n \n-  add_cmd (\"signal-thread\", class_run, set_sig_thread_cmd, _(\"\\\n+  cmd_list_element *set_signal_thread_cmd\n+    = add_cmd (\"signal-thread\", class_run, set_sig_thread_cmd, _(\"\\\n Set the thread that gdb thinks is the libc signal thread.\\n\\\n This thread is run when delivering a signal to a non-stopped process.\"),\n-\t   &setlist);\n-  add_alias_cmd (\"sigthread\", \"signal-thread\", class_run, 1, &setlist);\n-  add_cmd (\"signal-thread\", no_class, show_sig_thread_cmd, _(\"\\\n+\t       &setlist);\n+  add_alias_cmd (\"sigthread\", set_signal_thread_cmd, class_run, 1, &setlist);\n+\n+  cmd_list_element *show_signal_thread_cmd\n+    = add_cmd (\"signal-thread\", no_class, show_sig_thread_cmd, _(\"\\\n Set the thread that gdb thinks is the libc signal thread.\"),\n-\t   &showlist);\n-  add_alias_cmd (\"sigthread\", \"signal-thread\", no_class, 1, &showlist);\n+\t       &showlist);\n+  add_alias_cmd (\"sigthread\", show_signal_thread_cmd, no_class, 1, &showlist);\n \n   add_cmd (\"stopped\", class_run, set_stopped_cmd, _(\"\\\n Set whether gdb thinks the inferior process is stopped as with SIGSTOP.\\n\\\n@@ -3225,13 +3231,14 @@ Stopped process will be continued by sending them a signal.\"),\n Show whether gdb thinks the inferior process is stopped as with SIGSTOP.\"),\n \t   &showlist);\n \n-  add_cmd (\"exceptions\", class_run, set_exceptions_cmd, _(\"\\\n+  cmd_list_element *set_exceptions_cmd\n+    = add_cmd (\"exceptions\", class_run, set_exceptions_cmd, _(\"\\\n Set whether exceptions in the inferior process will be trapped.\\n\\\n When exceptions are turned off, neither breakpoints nor single-stepping\\n\\\n-will work.\"),\n-\t   &setlist);\n+will work.\"), &setlist);\n   /* Allow `set exc' despite conflict with `set exception-port'.  */\n-  add_alias_cmd (\"exc\", \"exceptions\", class_run, 1, &setlist);\n+  add_alias_cmd (\"exc\", set_exceptions_cmd, class_run, 1, &setlist);\n+\n   add_cmd (\"exceptions\", no_class, show_exceptions_cmd, _(\"\\\n Show whether exceptions in the inferior process will be trapped.\"),\n \t   &showlist);\n@@ -3262,12 +3269,14 @@ used to pause individual threads by default instead.\"),\n \t     \"on the thread when detaching.\"),\n \t   &show_task_cmd_list);\n \n-  add_cmd (\"exception-port\", no_class, set_task_exc_port_cmd, _(\"\\\n+  cmd_list_element *set_task_exception_port_cmd\n+    = add_cmd (\"exception-port\", no_class, set_task_exc_port_cmd, _(\"\\\n Set the task exception port to which we forward exceptions.\\n\\\n The argument should be the value of the send right in the task.\"),\n-\t   &set_task_cmd_list);\n-  add_alias_cmd (\"excp\", \"exception-port\", no_class, 1, &set_task_cmd_list);\n-  add_alias_cmd (\"exc-port\", \"exception-port\", no_class, 1,\n+\t       &set_task_cmd_list);\n+  add_alias_cmd (\"excp\", set_task_exception_port_cmd, no_class, 1,\n+\t\t &set_task_cmd_list);\n+  add_alias_cmd (\"exc-port\", set_task_exception_port_cmd, no_class, 1,\n \t\t &set_task_cmd_list);\n \n   /* A convenient way of turning on all options require to noninvasively\n@@ -3458,8 +3467,9 @@ Set the thread exception port to which we forward exceptions.\\n\\\n This overrides the task exception port.\\n\\\n The argument should be the value of the send right in the task.\"),\n \t   &set_thread_cmd_list);\n-  add_alias_cmd (\"excp\", \"exception-port\", no_class, 1, &set_thread_cmd_list);\n-  add_alias_cmd (\"exc-port\", \"exception-port\", no_class, 1,\n+  add_alias_cmd (\"excp\", set_thread_exception_port_cmd, no_class, 1,\n+\t\t &set_thread_cmd_list);\n+  add_alias_cmd (\"exc-port\", set_thread_exception_port_cmd, no_class, 1,\n \t\t &set_thread_cmd_list);\n \n   add_cmd (\"takeover-suspend-count\", no_class, thread_takeover_sc_cmd, _(\"\\"
    },
    {
      "sha": "a28dee37ed875cb9ad839094a22e6dede42b5b88",
      "filename": "gdb/guile/guile.c",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/guile/guile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/guile/guile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/guile.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -780,15 +780,17 @@ This command is only a placeholder.\")\n \t   );\n   add_com_alias (\"gu\", guile_cmd_element, class_obscure, 1);\n \n-  add_basic_prefix_cmd (\"guile\", class_obscure,\n-\t\t\t_(\"Prefix command for Guile preference settings.\"),\n-\t\t\t&set_guile_list, 0, &setlist);\n-  add_alias_cmd (\"gu\", \"guile\", class_obscure, 1, &setlist);\n-\n-  add_show_prefix_cmd (\"guile\", class_obscure,\n-\t\t       _(\"Prefix command for Guile preference settings.\"),\n-\t\t       &show_guile_list, 0, &showlist);\n-  add_alias_cmd (\"gu\", \"guile\", class_obscure, 1, &showlist);\n+  cmd_list_element *set_guile_cmd\n+    = add_basic_prefix_cmd (\"guile\", class_obscure,\n+\t\t\t    _(\"Prefix command for Guile preference settings.\"),\n+\t\t\t    &set_guile_list, 0, &setlist);\n+  add_alias_cmd (\"gu\", set_guile_cmd, class_obscure, 1, &setlist);\n+\n+  cmd_list_element *show_guile_cmd\n+    = add_show_prefix_cmd (\"guile\", class_obscure,\n+\t\t\t   _(\"Prefix command for Guile preference settings.\"),\n+\t\t\t   &show_guile_list, 0, &showlist);\n+  add_alias_cmd (\"gu\", show_guile_cmd, class_obscure, 1, &showlist);\n \n   cmd_list_element *info_guile_cmd\n     = add_basic_prefix_cmd (\"guile\", class_obscure,"
    },
    {
      "sha": "0d1e3848de858c0113e8f608768155a86f602fd4",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -1164,17 +1164,19 @@ _initialize_language ()\n \n   /* GDB commands for language specific stuff.  */\n \n-  add_basic_prefix_cmd (\"check\", no_class,\n-\t\t\t_(\"Set the status of the type/range checker.\"),\n-\t\t\t&setchecklist, 0, &setlist);\n-  add_alias_cmd (\"c\", \"check\", no_class, 1, &setlist);\n-  add_alias_cmd (\"ch\", \"check\", no_class, 1, &setlist);\n-\n-  add_show_prefix_cmd (\"check\", no_class,\n-\t\t       _(\"Show the status of the type/range checker.\"),\n-\t\t       &showchecklist, 0, &showlist);\n-  add_alias_cmd (\"c\", \"check\", no_class, 1, &showlist);\n-  add_alias_cmd (\"ch\", \"check\", no_class, 1, &showlist);\n+  cmd_list_element *set_check_cmd\n+    = add_basic_prefix_cmd (\"check\", no_class,\n+\t\t\t    _(\"Set the status of the type/range checker.\"),\n+\t\t\t    &setchecklist, 0, &setlist);\n+  add_alias_cmd (\"c\", set_check_cmd, no_class, 1, &setlist);\n+  add_alias_cmd (\"ch\", set_check_cmd, no_class, 1, &setlist);\n+\n+  cmd_list_element *show_check_cmd\n+    = add_show_prefix_cmd (\"check\", no_class,\n+\t\t\t _(\"Show the status of the type/range checker.\"),\n+\t\t\t &showchecklist, 0, &showlist);\n+  add_alias_cmd (\"c\", show_check_cmd, no_class, 1, &showlist);\n+  add_alias_cmd (\"ch\", show_check_cmd, no_class, 1, &showlist);\n \n   add_setshow_enum_cmd (\"range\", class_support, type_or_range_names,\n \t\t\t&range,"
    },
    {
      "sha": "28a57f7bac95ed5f9e9cf85199130d123f10902a",
      "filename": "gdb/macrocmd.c",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/macrocmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/macrocmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macrocmd.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -457,12 +457,15 @@ _initialize_macrocmd ()\n \t\t\t_(\"Prefix for commands dealing with C preprocessor macros.\"),\n \t\t\t&macrolist, 0, &cmdlist);\n \n-  add_cmd (\"expand\", no_class, macro_expand_command, _(\"\\\n+  cmd_list_element *macro_expand_cmd\n+    = add_cmd (\"expand\", no_class, macro_expand_command, _(\"\\\n Fully expand any C/C++ preprocessor macro invocations in EXPRESSION.\\n\\\n Show the expanded expression.\"),\n-\t   &macrolist);\n-  add_alias_cmd (\"exp\", \"expand\", no_class, 1, &macrolist);\n-  add_cmd (\"expand-once\", no_class, macro_expand_once_command, _(\"\\\n+\t       &macrolist);\n+  add_alias_cmd (\"exp\", macro_expand_cmd, no_class, 1, &macrolist);\n+\n+  cmd_list_element *macro_expand_once_cmd\n+    = add_cmd (\"expand-once\", no_class, macro_expand_once_command, _(\"\\\n Expand C/C++ preprocessor macro invocations appearing directly in EXPRESSION.\\n\\\n Show the expanded expression.\\n\\\n \\n\\\n@@ -473,8 +476,8 @@ introduces further macro invocations, those are left unexpanded.\\n\\\n `macro expand-once' helps you see how a particular macro expands,\\n\\\n whereas `macro expand' shows you how all the macros involved in an\\n\\\n expression work together to yield a pre-processed expression.\"),\n-\t   &macrolist);\n-  add_alias_cmd (\"exp1\", \"expand-once\", no_class, 1, &macrolist);\n+\t       &macrolist);\n+  add_alias_cmd (\"exp1\", macro_expand_once_cmd, no_class, 1, &macrolist);\n \n   add_info (\"macro\", info_macro_command,\n \t    _(\"Show the definition of MACRO, and it's source location.\\n\\"
    },
    {
      "sha": "26bacbfeb76897f682d18dedb8f3a6e37c4514b4",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -1143,11 +1143,13 @@ a human readable form, to cause GDB to deliberately dump core, etc.\"),\n \n   add_com_alias (\"mt\", maintenance_cmd, class_maintenance, 1);\n \n-  add_basic_prefix_cmd (\"info\", class_maintenance, _(\"\\\n+  cmd_list_element *maintenance_info_cmd\n+    = add_basic_prefix_cmd (\"info\", class_maintenance, _(\"\\\n Commands for showing internal info about the program being debugged.\"),\n-\t\t\t&maintenanceinfolist, 0,\n-\t\t\t&maintenancelist);\n-  add_alias_cmd (\"i\", \"info\", class_maintenance, 1, &maintenancelist);\n+\t\t\t    &maintenanceinfolist, 0,\n+\t\t\t    &maintenancelist);\n+  add_alias_cmd (\"i\", maintenance_info_cmd, class_maintenance, 1,\n+\t\t &maintenancelist);\n \n   const auto opts = make_maint_info_sections_options_def_group (nullptr);\n   static std::string maint_info_sections_command_help"
    },
    {
      "sha": "31cac9384e9ee4121aad3d03438717fa20ea9d58",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 14,
      "deletions": 11,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -8994,17 +8994,20 @@ and is updated automatically from ELF file flags if available.\"),\n   add_cmd (\"single\", class_support, set_mipsfpu_single_command,\n \t   _(\"Select single-precision MIPS floating-point coprocessor.\"),\n \t   &mipsfpulist);\n-  add_cmd (\"double\", class_support, set_mipsfpu_double_command,\n-\t   _(\"Select double-precision MIPS floating-point coprocessor.\"),\n-\t   &mipsfpulist);\n-  add_alias_cmd (\"on\", \"double\", class_support, 1, &mipsfpulist);\n-  add_alias_cmd (\"yes\", \"double\", class_support, 1, &mipsfpulist);\n-  add_alias_cmd (\"1\", \"double\", class_support, 1, &mipsfpulist);\n-  add_cmd (\"none\", class_support, set_mipsfpu_none_command,\n-\t   _(\"Select no MIPS floating-point coprocessor.\"), &mipsfpulist);\n-  add_alias_cmd (\"off\", \"none\", class_support, 1, &mipsfpulist);\n-  add_alias_cmd (\"no\", \"none\", class_support, 1, &mipsfpulist);\n-  add_alias_cmd (\"0\", \"none\", class_support, 1, &mipsfpulist);\n+  cmd_list_element *set_mipsfpu_double_cmd\n+    = add_cmd (\"double\", class_support, set_mipsfpu_double_command,\n+\t       _(\"Select double-precision MIPS floating-point coprocessor.\"),\n+\t       &mipsfpulist);\n+  add_alias_cmd (\"on\", set_mipsfpu_double_cmd, class_support, 1, &mipsfpulist);\n+  add_alias_cmd (\"yes\", set_mipsfpu_double_cmd, class_support, 1, &mipsfpulist);\n+  add_alias_cmd (\"1\", set_mipsfpu_double_cmd, class_support, 1, &mipsfpulist);\n+\n+  cmd_list_element *set_mipsfpu_none_cmd\n+    = add_cmd (\"none\", class_support, set_mipsfpu_none_command,\n+\t       _(\"Select no MIPS floating-point coprocessor.\"), &mipsfpulist);\n+  add_alias_cmd (\"off\", set_mipsfpu_none_cmd, class_support, 1, &mipsfpulist);\n+  add_alias_cmd (\"no\", set_mipsfpu_none_cmd, class_support, 1, &mipsfpulist);\n+  add_alias_cmd (\"0\", set_mipsfpu_none_cmd, class_support, 1, &mipsfpulist);\n   add_cmd (\"auto\", class_support, set_mipsfpu_auto_command,\n \t   _(\"Select MIPS floating-point coprocessor automatically.\"),\n \t   &mipsfpulist);"
    },
    {
      "sha": "7eba2993fb2e4a187e95c23e075b6783eb2e3850",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -3304,7 +3304,8 @@ current working language.  The result is printed and saved in the value\\n\\\n history, if it is not void.\"));\n   set_cmd_completer_handle_brkchars (c, print_command_completer);\n \n-  add_cmd (\"variable\", class_vars, set_command, _(\"\\\n+  cmd_list_element *set_variable_cmd\n+    = add_cmd (\"variable\", class_vars, set_command, _(\"\\\n Evaluate expression EXP and assign result to variable VAR.\\n\\\n Usage: set variable VAR = EXP\\n\\\n This uses assignment syntax appropriate for the current language\\n\\\n@@ -3313,8 +3314,8 @@ VAR may be a debugger \\\"convenience\\\" variable (names starting\\n\\\n with $), a register (a few standard names starting with $), or an actual\\n\\\n variable in the program being debugged.  EXP is any valid expression.\\n\\\n This may usually be abbreviated to simply \\\"set\\\".\"),\n-\t   &setlist);\n-  add_alias_cmd (\"var\", \"variable\", class_vars, 0, &setlist);\n+\t       &setlist);\n+  add_alias_cmd (\"var\", set_variable_cmd, class_vars, 0, &setlist);\n \n   const auto print_opts = make_value_print_options_def_group (nullptr);\n "
    },
    {
      "sha": "00affb85d22ea680b738a25f66b0ef8b2b5d8b99",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 17,
      "deletions": 13,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -3109,25 +3109,29 @@ void _initialize_record_btrace ();\n void\n _initialize_record_btrace ()\n {\n-  add_prefix_cmd (\"btrace\", class_obscure, cmd_record_btrace_start,\n-\t\t  _(\"Start branch trace recording.\"), &record_btrace_cmdlist,\n-\t\t  0, &record_cmdlist);\n-  add_alias_cmd (\"b\", \"btrace\", class_obscure, 1, &record_cmdlist);\n-\n-  add_cmd (\"bts\", class_obscure, cmd_record_btrace_bts_start,\n-\t   _(\"\\\n+  cmd_list_element *record_btrace_cmd\n+    = add_prefix_cmd (\"btrace\", class_obscure, cmd_record_btrace_start,\n+\t\t      _(\"Start branch trace recording.\"),\n+\t\t      &record_btrace_cmdlist, 0, &record_cmdlist);\n+  add_alias_cmd (\"b\", record_btrace_cmd, class_obscure, 1, &record_cmdlist);\n+\n+  cmd_list_element *record_btrace_bts_cmd\n+    = add_cmd (\"bts\", class_obscure, cmd_record_btrace_bts_start,\n+\t       _(\"\\\n Start branch trace recording in Branch Trace Store (BTS) format.\\n\\n\\\n The processor stores a from/to record for each branch into a cyclic buffer.\\n\\\n This format may not be available on all processors.\"),\n-\t   &record_btrace_cmdlist);\n-  add_alias_cmd (\"bts\", \"btrace bts\", class_obscure, 1, &record_cmdlist);\n+\t     &record_btrace_cmdlist);\n+  add_alias_cmd (\"bts\", record_btrace_bts_cmd, class_obscure, 1,\n+\t\t &record_cmdlist);\n \n-  add_cmd (\"pt\", class_obscure, cmd_record_btrace_pt_start,\n-\t   _(\"\\\n+  cmd_list_element *record_btrace_pt_cmd\n+    = add_cmd (\"pt\", class_obscure, cmd_record_btrace_pt_start,\n+\t       _(\"\\\n Start branch trace recording in Intel Processor Trace format.\\n\\n\\\n This format may not be available on all processors.\"),\n-\t   &record_btrace_cmdlist);\n-  add_alias_cmd (\"pt\", \"btrace pt\", class_obscure, 1, &record_cmdlist);\n+\t     &record_btrace_cmdlist);\n+  add_alias_cmd (\"pt\", record_btrace_pt_cmd, class_obscure, 1, &record_cmdlist);\n \n   add_basic_prefix_cmd (\"btrace\", class_support,\n \t\t\t_(\"Set record options.\"), &set_record_btrace_cmdlist,"
    },
    {
      "sha": "03e39eeaf3a2fedca358c64cd22c142d8a706190",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 38,
      "deletions": 31,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -2796,14 +2796,15 @@ _initialize_record_full ()\n \t\t  _(\"Start full execution recording.\"), &record_full_cmdlist,\n \t\t  0, &record_cmdlist);\n \n-  c = add_cmd (\"restore\", class_obscure, cmd_record_full_restore,\n+  cmd_list_element *record_full_restore_cmd\n+    = add_cmd (\"restore\", class_obscure, cmd_record_full_restore,\n \t       _(\"Restore the execution log from a file.\\n\\\n Argument is filename.  File must be created with 'record save'.\"),\n \t       &record_full_cmdlist);\n-  set_cmd_completer (c, filename_completer);\n+  set_cmd_completer (record_full_restore_cmd, filename_completer);\n \n   /* Deprecate the old version without \"full\" prefix.  */\n-  c = add_alias_cmd (\"restore\", \"full restore\", class_obscure, 1,\n+  c = add_alias_cmd (\"restore\", record_full_restore_cmd, class_obscure, 1,\n \t\t     &record_cmdlist);\n   set_cmd_completer (c, filename_completer);\n   deprecate_cmd (c, \"record full restore\");\n@@ -2817,61 +2818,67 @@ Argument is filename.  File must be created with 'record save'.\"),\n \t\t       0, &show_record_cmdlist);\n \n   /* Record instructions number limit command.  */\n-  add_setshow_boolean_cmd (\"stop-at-limit\", no_class,\n-\t\t\t   &record_full_stop_at_limit, _(\"\\\n+  set_show_commands set_record_full_stop_at_limit_cmds\n+    = add_setshow_boolean_cmd (\"stop-at-limit\", no_class,\n+\t\t\t       &record_full_stop_at_limit, _(\"\\\n Set whether record/replay stops when record/replay buffer becomes full.\"), _(\"\\\n Show whether record/replay stops when record/replay buffer becomes full.\"),\n \t\t\t   _(\"Default is ON.\\n\\\n When ON, if the record/replay buffer becomes full, ask user what to do.\\n\\\n When OFF, if the record/replay buffer becomes full,\\n\\\n delete the oldest recorded instruction to make room for each new one.\"),\n-\t\t\t   NULL, NULL,\n-\t\t\t   &set_record_full_cmdlist, &show_record_full_cmdlist);\n+\t\t\t       NULL, NULL,\n+\t\t\t       &set_record_full_cmdlist,\n+\t\t\t       &show_record_full_cmdlist);\n \n-  c = add_alias_cmd (\"stop-at-limit\", \"full stop-at-limit\", no_class, 1,\n+  c = add_alias_cmd (\"stop-at-limit\",\n+\t\t     set_record_full_stop_at_limit_cmds.set, no_class, 1,\n \t\t     &set_record_cmdlist);\n   deprecate_cmd (c, \"set record full stop-at-limit\");\n \n-  c = add_alias_cmd (\"stop-at-limit\", \"full stop-at-limit\", no_class, 1,\n+  c = add_alias_cmd (\"stop-at-limit\",\n+\t\t     set_record_full_stop_at_limit_cmds.show, no_class, 1,\n \t\t     &show_record_cmdlist);\n   deprecate_cmd (c, \"show record full stop-at-limit\");\n \n-  add_setshow_uinteger_cmd (\"insn-number-max\", no_class,\n-\t\t\t    &record_full_insn_max_num,\n-\t\t\t    _(\"Set record/replay buffer limit.\"),\n-\t\t\t    _(\"Show record/replay buffer limit.\"), _(\"\\\n+  set_show_commands record_full_insn_number_max_cmds\n+    = add_setshow_uinteger_cmd (\"insn-number-max\", no_class,\n+\t\t\t\t&record_full_insn_max_num,\n+\t\t\t\t_(\"Set record/replay buffer limit.\"),\n+\t\t\t\t_(\"Show record/replay buffer limit.\"), _(\"\\\n Set the maximum number of instructions to be stored in the\\n\\\n record/replay buffer.  A value of either \\\"unlimited\\\" or zero means no\\n\\\n limit.  Default is 200000.\"),\n-\t\t\t    set_record_full_insn_max_num,\n-\t\t\t    NULL, &set_record_full_cmdlist,\n-\t\t\t    &show_record_full_cmdlist);\n+\t\t\t\tset_record_full_insn_max_num,\n+\t\t\t\tNULL, &set_record_full_cmdlist,\n+\t\t\t\t&show_record_full_cmdlist);\n \n-  c = add_alias_cmd (\"insn-number-max\", \"full insn-number-max\", no_class, 1,\n-\t\t     &set_record_cmdlist);\n+  c = add_alias_cmd (\"insn-number-max\", record_full_insn_number_max_cmds.set,\n+\t\t     no_class, 1, &set_record_cmdlist);\n   deprecate_cmd (c, \"set record full insn-number-max\");\n \n-  c = add_alias_cmd (\"insn-number-max\", \"full insn-number-max\", no_class, 1,\n-\t\t     &show_record_cmdlist);\n+  c = add_alias_cmd (\"insn-number-max\", record_full_insn_number_max_cmds.show,\n+\t\t     no_class, 1, &show_record_cmdlist);\n   deprecate_cmd (c, \"show record full insn-number-max\");\n \n-  add_setshow_boolean_cmd (\"memory-query\", no_class,\n-\t\t\t   &record_full_memory_query, _(\"\\\n+  set_show_commands record_full_memory_query_cmds\n+    = add_setshow_boolean_cmd (\"memory-query\", no_class,\n+\t\t\t       &record_full_memory_query, _(\"\\\n Set whether query if PREC cannot record memory change of next instruction.\"),\n-\t\t\t   _(\"\\\n+\t\t\t       _(\"\\\n Show whether query if PREC cannot record memory change of next instruction.\"),\n-\t\t\t   _(\"\\\n+\t\t\t       _(\"\\\n Default is OFF.\\n\\\n When ON, query if PREC cannot record memory change of next instruction.\"),\n-\t\t\t   NULL, NULL,\n-\t\t\t   &set_record_full_cmdlist,\n-\t\t\t   &show_record_full_cmdlist);\n+\t\t\t       NULL, NULL,\n+\t\t\t       &set_record_full_cmdlist,\n+\t\t\t       &show_record_full_cmdlist);\n \n-  c = add_alias_cmd (\"memory-query\", \"full memory-query\", no_class, 1,\n-\t\t     &set_record_cmdlist);\n+  c = add_alias_cmd (\"memory-query\", record_full_memory_query_cmds.set,\n+\t\t     no_class, 1, &set_record_cmdlist);\n   deprecate_cmd (c, \"set record full memory-query\");\n \n-  c = add_alias_cmd (\"memory-query\", \"full memory-query\", no_class, 1,\n-\t\t     &show_record_cmdlist);\n+  c = add_alias_cmd (\"memory-query\", record_full_memory_query_cmds.show,\n+\t\t     no_class, 1,&show_record_cmdlist);\n   deprecate_cmd (c, \"show record full memory-query\");\n }"
    },
    {
      "sha": "6968c30d930dbc0f029b10755dd7a79efc248152",
      "filename": "gdb/record.c",
      "status": "modified",
      "additions": 37,
      "deletions": 26,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/record.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/record.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -792,18 +792,24 @@ A size of \\\"unlimited\\\" means unlimited lines.  The default is 10.\"),\n   set_cmd_completer (record_cmd, filename_completer);\n \n   add_com_alias (\"rec\", record_cmd, class_obscure, 1);\n-  add_basic_prefix_cmd (\"record\", class_support,\n-\t\t\t_(\"Set record options.\"), &set_record_cmdlist,\n-\t\t\t0, &setlist);\n-  add_alias_cmd (\"rec\", \"record\", class_obscure, 1, &setlist);\n-  add_show_prefix_cmd (\"record\", class_support,\n-\t\t       _(\"Show record options.\"), &show_record_cmdlist,\n-\t\t       0, &showlist);\n-  add_alias_cmd (\"rec\", \"record\", class_obscure, 1, &showlist);\n-  add_prefix_cmd (\"record\", class_support, info_record_command,\n-\t\t  _(\"Info record options.\"), &info_record_cmdlist,\n-\t\t  0, &infolist);\n-  add_alias_cmd (\"rec\", \"record\", class_obscure, 1, &infolist);\n+\n+  cmd_list_element *set_record_cmd\n+    = add_basic_prefix_cmd (\"record\", class_support,\n+\t\t\t    _(\"Set record options.\"), &set_record_cmdlist,\n+\t\t\t    0, &setlist);\n+  add_alias_cmd (\"rec\", set_record_cmd, class_obscure, 1, &setlist);\n+\n+  cmd_list_element *show_record_cmd\n+    = add_show_prefix_cmd (\"record\", class_support,\n+\t\t\t   _(\"Show record options.\"), &show_record_cmdlist,\n+\t\t\t   0, &showlist);\n+  add_alias_cmd (\"rec\", show_record_cmd, class_obscure, 1, &showlist);\n+\n+  cmd_list_element *info_record_cmd\n+    = add_prefix_cmd (\"record\", class_support, info_record_command,\n+\t\t      _(\"Info record options.\"), &info_record_cmdlist,\n+\t\t      0, &infolist);\n+  add_alias_cmd (\"rec\", info_record_cmd, class_obscure, 1, &infolist);\n \n   c = add_cmd (\"save\", class_obscure, cmd_record_save,\n \t       _(\"Save the execution log to a file.\\n\\\n@@ -812,26 +818,31 @@ Default filename is 'gdb_record.PROCESS_ID'.\"),\n \t       &record_cmdlist);\n   set_cmd_completer (c, filename_completer);\n \n-  add_cmd (\"delete\", class_obscure, cmd_record_delete,\n-\t   _(\"Delete the rest of execution log and start recording it anew.\"),\n-\t   &record_cmdlist);\n-  add_alias_cmd (\"d\", \"delete\", class_obscure, 1, &record_cmdlist);\n-  add_alias_cmd (\"del\", \"delete\", class_obscure, 1, &record_cmdlist);\n-\n-  add_cmd (\"stop\", class_obscure, cmd_record_stop,\n-\t   _(\"Stop the record/replay target.\"),\n-\t   &record_cmdlist);\n-  add_alias_cmd (\"s\", \"stop\", class_obscure, 1, &record_cmdlist);\n+  cmd_list_element *record_delete_cmd\n+    =  add_cmd (\"delete\", class_obscure, cmd_record_delete,\n+\t\t_(\"Delete the rest of execution log and start recording it \\\n+anew.\"),\n+\t    &record_cmdlist);\n+  add_alias_cmd (\"d\", record_delete_cmd, class_obscure, 1, &record_cmdlist);\n+  add_alias_cmd (\"del\", record_delete_cmd, class_obscure, 1, &record_cmdlist);\n+\n+  cmd_list_element *record_stop_cmd\n+    = add_cmd (\"stop\", class_obscure, cmd_record_stop,\n+\t       _(\"Stop the record/replay target.\"),\n+\t       &record_cmdlist);\n+  add_alias_cmd (\"s\", record_stop_cmd, class_obscure, 1, &record_cmdlist);\n \n   add_prefix_cmd (\"goto\", class_obscure, cmd_record_goto, _(\"\\\n Restore the program to its state at instruction number N.\\n\\\n Argument is instruction number, as shown by 'info record'.\"),\n \t\t  &record_goto_cmdlist, 1, &record_cmdlist);\n \n-  add_cmd (\"begin\", class_obscure, cmd_record_goto_begin,\n-\t   _(\"Go to the beginning of the execution log.\"),\n-\t   &record_goto_cmdlist);\n-  add_alias_cmd (\"start\", \"begin\", class_obscure, 1, &record_goto_cmdlist);\n+  cmd_list_element *record_goto_begin_cmd\n+    = add_cmd (\"begin\", class_obscure, cmd_record_goto_begin,\n+\t       _(\"Go to the beginning of the execution log.\"),\n+\t       &record_goto_cmdlist);\n+  add_alias_cmd (\"start\", record_goto_begin_cmd, class_obscure, 1,\n+\t\t &record_goto_cmdlist);\n \n   add_cmd (\"end\", class_obscure, cmd_record_goto_end,\n \t   _(\"Go to the end of the execution log.\"),"
    },
    {
      "sha": "8379f514738a3e8f3908e5964116d8550c635193",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -1928,24 +1928,27 @@ add_packet_config_cmd (struct packet_config *config, const char *name,\n \t\t\t name, title);\n   /* set/show TITLE-packet {auto,on,off} */\n   cmd_name = xstrprintf (\"%s-packet\", title);\n-  add_setshow_auto_boolean_cmd (cmd_name, class_obscure,\n-\t\t\t\t&config->detect, set_doc,\n-\t\t\t\tshow_doc, NULL, /* help_doc */\n-\t\t\t\tNULL,\n-\t\t\t\tshow_remote_protocol_packet_cmd,\n-\t\t\t\t&remote_set_cmdlist, &remote_show_cmdlist);\n+  set_show_commands cmds\n+    = add_setshow_auto_boolean_cmd (cmd_name, class_obscure,\n+\t\t\t\t    &config->detect, set_doc,\n+\t\t\t\t    show_doc, NULL, /* help_doc */\n+\t\t\t\t    NULL,\n+\t\t\t\t    show_remote_protocol_packet_cmd,\n+\t\t\t\t    &remote_set_cmdlist, &remote_show_cmdlist);\n+\n   /* The command code copies the documentation strings.  */\n   xfree (set_doc);\n   xfree (show_doc);\n+\n   /* set/show remote NAME-packet {auto,on,off} -- legacy.  */\n   if (legacy)\n     {\n       char *legacy_name;\n \n       legacy_name = xstrprintf (\"%s-packet\", name);\n-      add_alias_cmd (legacy_name, cmd_name, class_obscure, 0,\n+      add_alias_cmd (legacy_name, cmds.set, class_obscure, 0,\n \t\t     &remote_set_cmdlist);\n-      add_alias_cmd (legacy_name, cmd_name, class_obscure, 0,\n+      add_alias_cmd (legacy_name, cmds.show, class_obscure, 0,\n \t\t     &remote_show_cmdlist);\n     }\n }"
    },
    {
      "sha": "2df521181438257a4a3c930b5377e355c62afd33",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -1585,20 +1585,21 @@ inferior.  Otherwise, symbols must be loaded manually, using \\\n \t\t\t   show_auto_solib_add,\n \t\t\t   &setlist, &showlist);\n \n-  add_setshow_optional_filename_cmd (\"sysroot\", class_support,\n-\t\t\t\t     &gdb_sysroot, _(\"\\\n+  set_show_commands sysroot_cmds\n+    = add_setshow_optional_filename_cmd (\"sysroot\", class_support,\n+\t\t\t\t\t &gdb_sysroot, _(\"\\\n Set an alternate system root.\"), _(\"\\\n Show the current system root.\"), _(\"\\\n The system root is used to load absolute shared library symbol files.\\n\\\n For other (relative) files, you can add directories using\\n\\\n `set solib-search-path'.\"),\n-\t\t\t\t     gdb_sysroot_changed,\n-\t\t\t\t     NULL,\n-\t\t\t\t     &setlist, &showlist);\n+\t\t\t\t\t gdb_sysroot_changed,\n+\t\t\t\t\t NULL,\n+\t\t\t\t\t &setlist, &showlist);\n \n-  add_alias_cmd (\"solib-absolute-prefix\", \"sysroot\", class_support, 0,\n+  add_alias_cmd (\"solib-absolute-prefix\", sysroot_cmds.set, class_support, 0,\n \t\t &setlist);\n-  add_alias_cmd (\"solib-absolute-prefix\", \"sysroot\", class_support, 0,\n+  add_alias_cmd (\"solib-absolute-prefix\", sysroot_cmds.show, class_support, 0,\n \t\t &showlist);\n \n   add_setshow_optional_filename_cmd (\"solib-search-path\", class_support,"
    },
    {
      "sha": "4157594d1533b20c5bd945c66d37286d6a2b778b",
      "filename": "gdb/sparc64-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/sparc64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/sparc64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-tdep.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -535,9 +535,10 @@ _initialize_sparc64_adi_tdep ()\n   add_basic_prefix_cmd (\"adi\", class_support,\n \t\t\t_(\"ADI version related commands.\"),\n \t\t\t&sparc64adilist, 0, &cmdlist);\n-  add_cmd (\"examine\", class_support, adi_examine_command,\n-\t   _(\"Examine ADI versions.\"), &sparc64adilist);\n-  add_alias_cmd (\"x\", \"examine\", no_class, 1, &sparc64adilist);\n+  cmd_list_element *adi_examine_cmd\n+    = add_cmd (\"examine\", class_support, adi_examine_command,\n+\t       _(\"Examine ADI versions.\"), &sparc64adilist);\n+  add_alias_cmd (\"x\", adi_examine_cmd, no_class, 1, &sparc64adilist);\n   add_cmd (\"assign\", class_support, adi_assign_command,\n \t   _(\"Assign ADI versions.\"), &sparc64adilist);\n "
    },
    {
      "sha": "655b3dabf62d1c3cff64aac5e98dab4c96af3bb9",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -6897,11 +6897,12 @@ If zero then the symbol cache is disabled.\"),\n \t   _(\"Print symbol cache statistics for each program space.\"),\n \t   &maintenanceprintlist);\n \n-  add_cmd (\"symbol-cache\", class_maintenance,\n-\t   maintenance_flush_symbol_cache,\n-\t   _(\"Flush the symbol cache for each program space.\"),\n-\t   &maintenanceflushlist);\n-  c = add_alias_cmd (\"flush-symbol-cache\", \"flush symbol-cache\",\n+  cmd_list_element *maintenance_flush_symbol_cache_cmd\n+    = add_cmd (\"symbol-cache\", class_maintenance,\n+\t       maintenance_flush_symbol_cache,\n+\t       _(\"Flush the symbol cache for each program space.\"),\n+\t       &maintenanceflushlist);\n+  c = add_alias_cmd (\"flush-symbol-cache\", maintenance_flush_symbol_cache_cmd,\n \t\t     class_maintenance, 0, &maintenancelist);\n   deprecate_cmd (c, \"maintenancelist flush symbol-cache\");\n "
    },
    {
      "sha": "eca1a9d385cba91580b2b8dc5c6dcdb49f2eb875",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -4075,11 +4075,11 @@ Select a trace frame by PC.\\n\\\n Default is the current PC, or the PC of the current trace frame.\"),\n \t   &tfindlist);\n \n-  add_cmd (\"end\", class_trace, tfind_end_command, _(\"\\\n-De-select any trace frame and resume 'live' debugging.\"),\n-\t   &tfindlist);\n+  cmd_list_element *tfind_end_cmd\n+    = add_cmd (\"end\", class_trace, tfind_end_command, _(\"\\\n+De-select any trace frame and resume 'live' debugging.\"), &tfindlist);\n \n-  add_alias_cmd (\"none\", \"end\", class_trace, 0, &tfindlist);\n+  add_alias_cmd (\"none\", tfind_end_cmd, class_trace, 0, &tfindlist);\n \n   add_cmd (\"start\", class_trace, tfind_start_command,\n \t   _(\"Select the first trace frame in the trace buffer.\"),"
    },
    {
      "sha": "fa2b64ef10ac3ff905e0162925603763edc66f8d",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -3143,18 +3143,20 @@ _initialize_valprint ()\n {\n   cmd_list_element *cmd;\n \n-  add_basic_prefix_cmd (\"print\", no_class,\n-\t\t\t_(\"Generic command for setting how things print.\"),\n-\t\t\t&setprintlist, 0, &setlist);\n-  add_alias_cmd (\"p\", \"print\", no_class, 1, &setlist);\n+  cmd_list_element *set_print_cmd\n+    = add_basic_prefix_cmd (\"print\", no_class,\n+\t\t\t    _(\"Generic command for setting how things print.\"),\n+\t\t\t    &setprintlist, 0, &setlist);\n+  add_alias_cmd (\"p\", set_print_cmd, no_class, 1, &setlist);\n   /* Prefer set print to set prompt.  */\n-  add_alias_cmd (\"pr\", \"print\", no_class, 1, &setlist);\n-\n-  add_show_prefix_cmd (\"print\", no_class,\n-\t\t       _(\"Generic command for showing print settings.\"),\n-\t\t       &showprintlist, 0, &showlist);\n-  add_alias_cmd (\"p\", \"print\", no_class, 1, &showlist);\n-  add_alias_cmd (\"pr\", \"print\", no_class, 1, &showlist);\n+  add_alias_cmd (\"pr\", set_print_cmd, no_class, 1, &setlist);\n+\n+  cmd_list_element *show_print_cmd\n+    = add_show_prefix_cmd (\"print\", no_class,\n+\t\t\t   _(\"Generic command for showing print settings.\"),\n+\t\t\t   &showprintlist, 0, &showlist);\n+  add_alias_cmd (\"p\", show_print_cmd, no_class, 1, &showlist);\n+  add_alias_cmd (\"pr\", show_print_cmd, no_class, 1, &showlist);\n \n   cmd = add_basic_prefix_cmd (\"raw\", no_class,\n \t\t\t      _(\"\\"
    },
    {
      "sha": "9df035a50b3ba286adc805079d80c4af09833b6d",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -4231,7 +4231,8 @@ void _initialize_values ();\n void\n _initialize_values ()\n {\n-  add_cmd (\"convenience\", no_class, show_convenience, _(\"\\\n+  cmd_list_element *show_convenience_cmd\n+    = add_cmd (\"convenience\", no_class, show_convenience, _(\"\\\n Debugger convenience (\\\"$foo\\\") variables and functions.\\n\\\n Convenience variables are created when you assign them values;\\n\\\n thus, \\\"set $foo=1\\\" gives \\\"$foo\\\" the value 1.  Values may be any type.\\n\\\n@@ -4244,7 +4245,7 @@ A few convenience variables are given values automatically:\\n\\\n Convenience functions are defined via the Python API.\"\n #endif\n \t   ), &showlist);\n-  add_alias_cmd (\"conv\", \"convenience\", no_class, 1, &showlist);\n+  add_alias_cmd (\"conv\", show_convenience_cmd, no_class, 1, &showlist);\n \n   add_cmd (\"values\", no_set_class, show_values, _(\"\\\n Elements of value history around item number IDX (or last ten).\"),"
    },
    {
      "sha": "88601e106f57617cc6aad2cd7c9298ee85ad8f5b",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=5e84b7eefba5b4299b0ca80aecc5d4e99c195c1e",
      "patch": "@@ -1212,10 +1212,11 @@ _initialize_windows_tdep ()\n     = gdbarch_data_register_post_init (init_windows_gdbarch_data);\n \n   init_w32_command_list ();\n-  add_cmd (\"thread-information-block\", class_info, display_tib,\n-\t   _(\"Display thread information block.\"),\n-\t   &info_w32_cmdlist);\n-  add_alias_cmd (\"tib\", \"thread-information-block\", class_info, 1,\n+  cmd_list_element *info_w32_thread_information_block_cmd\n+    = add_cmd (\"thread-information-block\", class_info, display_tib,\n+\t       _(\"Display thread information block.\"),\n+\t       &info_w32_cmdlist);\n+  add_alias_cmd (\"tib\", info_w32_thread_information_block_cmd, class_info, 1,\n \t\t &info_w32_cmdlist);\n \n   add_setshow_boolean_cmd (\"show-all-tib\", class_maintenance,"
    }
  ]
}