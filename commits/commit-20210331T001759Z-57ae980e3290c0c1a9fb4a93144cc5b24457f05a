{
  "sha": "57ae980e3290c0c1a9fb4a93144cc5b24457f05a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTdhZTk4MGUzMjkwYzBjMWE5ZmI0YTkzMTQ0Y2M1YjI0NDU3ZjA1YQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-30T23:32:08Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-31T00:17:59Z"
    },
    "message": "Include string.h in bfd.h and delete LITMEMCPY, LITSTRCPY\n\nThis fixes the issue that startswith depends on strncpy being\ndeclared, and not all projects using bfd.h include string.h before\nbfd.h.  I've also deleted some macros that don't find much use\nanywhere.\n\nbfd/\n\t* bfd-in.h: Include string.h.\n\t(LITMEMCPY, LITSTRCPY): Delete.\n\t* bfd-in2.h: Regenerate.\nbinutils/\n\t* prdbg.c (pr_function_type): Replace LITSTTCPY with strcpy.",
    "tree": {
      "sha": "b639bd1f64e84addc898ae6a29c97ffbe7c757ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b639bd1f64e84addc898ae6a29c97ffbe7c757ad"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/57ae980e3290c0c1a9fb4a93144cc5b24457f05a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57ae980e3290c0c1a9fb4a93144cc5b24457f05a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/57ae980e3290c0c1a9fb4a93144cc5b24457f05a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57ae980e3290c0c1a9fb4a93144cc5b24457f05a/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "edf71419e06105a73c59a95d3e74557a6c6f313b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edf71419e06105a73c59a95d3e74557a6c6f313b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/edf71419e06105a73c59a95d3e74557a6c6f313b"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 13,
    "deletions": 15
  },
  "files": [
    {
      "sha": "59362799c97aee1f1352b8e41ecee3f1f2a4f408",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/57ae980e3290c0c1a9fb4a93144cc5b24457f05a/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/57ae980e3290c0c1a9fb4a93144cc5b24457f05a/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=57ae980e3290c0c1a9fb4a93144cc5b24457f05a",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-31  Alan Modra  <amodra@gmail.com>\n+\n+\t* bfd-in.h: Include string.h.\n+\t(LITMEMCPY, LITSTRCPY): Delete.\n+\t* bfd-in2.h: Regenerate.\n+\n 2021-03-30  Alan Modra  <amodra@gmail.com>\n \n \t* elflink.c (elf_link_add_object_symbols): Don't set h->indx"
    },
    {
      "sha": "f90f71809116fa21d3df95222cc1a7536152dda1",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/57ae980e3290c0c1a9fb4a93144cc5b24457f05a/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/57ae980e3290c0c1a9fb4a93144cc5b24457f05a/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=57ae980e3290c0c1a9fb4a93144cc5b24457f05a",
      "patch": "@@ -37,6 +37,7 @@ extern \"C\" {\n #include \"bfd_stdint.h\"\n #include \"diagnostics.h\"\n #include <stdarg.h>\n+#include <string.h>\n #include <sys/stat.h>\n \n #if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)\n@@ -57,13 +58,6 @@ extern \"C\" {\n    is error prone, so using this macro is safer.  */\n #define STRING_COMMA_LEN(STR) (STR), (sizeof (STR) - 1)\n \n-  /* strcpy() can have a similar problem, but since we know we are\n-     copying a constant string, we can use memcpy which will be faster\n-     since there is no need to check for a NUL byte inside STR.  We\n-     can also save time if we do not need to copy the terminating NUL.  */\n-#define LITMEMCPY(DEST,STR2) memcpy ((DEST), (STR2), sizeof (STR2) - 1)\n-#define LITSTRCPY(DEST,STR2) memcpy ((DEST), (STR2), sizeof (STR2))\n-\n #define BFD_SUPPORTS_PLUGINS @supports_plugins@\n \n /* The word size used by BFD on the host.  This may be 64 with a 32"
    },
    {
      "sha": "426ab86da7ad9214fb9e0abbe5a1ed9564ccd0a2",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/57ae980e3290c0c1a9fb4a93144cc5b24457f05a/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/57ae980e3290c0c1a9fb4a93144cc5b24457f05a/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=57ae980e3290c0c1a9fb4a93144cc5b24457f05a",
      "patch": "@@ -44,6 +44,7 @@ extern \"C\" {\n #include \"bfd_stdint.h\"\n #include \"diagnostics.h\"\n #include <stdarg.h>\n+#include <string.h>\n #include <sys/stat.h>\n \n #if defined (__STDC__) || defined (ALMOST_STDC) || defined (HAVE_STRINGIZE)\n@@ -64,13 +65,6 @@ extern \"C\" {\n    is error prone, so using this macro is safer.  */\n #define STRING_COMMA_LEN(STR) (STR), (sizeof (STR) - 1)\n \n-  /* strcpy() can have a similar problem, but since we know we are\n-     copying a constant string, we can use memcpy which will be faster\n-     since there is no need to check for a NUL byte inside STR.  We\n-     can also save time if we do not need to copy the terminating NUL.  */\n-#define LITMEMCPY(DEST,STR2) memcpy ((DEST), (STR2), sizeof (STR2) - 1)\n-#define LITSTRCPY(DEST,STR2) memcpy ((DEST), (STR2), sizeof (STR2))\n-\n #define BFD_SUPPORTS_PLUGINS @supports_plugins@\n \n /* The word size used by BFD on the host.  This may be 64 with a 32"
    },
    {
      "sha": "b62f115443f4c14f4d2e4bbb99d5810e4747a3a5",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/57ae980e3290c0c1a9fb4a93144cc5b24457f05a/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/57ae980e3290c0c1a9fb4a93144cc5b24457f05a/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=57ae980e3290c0c1a9fb4a93144cc5b24457f05a",
      "patch": "@@ -1,3 +1,7 @@\n+2021-03-31  Alan Modra  <amodra@gmail.com>\n+\n+\t* prdbg.c (pr_function_type): Replace LITSTTCPY with strcpy.\n+\n 2021-03-29  Alan Modra  <amodra@gmail.com>\n \n \t* dlltool.c (main): Don't use \"boolean_condition ? TRUE : FALSE\"."
    },
    {
      "sha": "521dfa008074fd910c8e4c36a46a90a610a4181f",
      "filename": "binutils/prdbg.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/57ae980e3290c0c1a9fb4a93144cc5b24457f05a/binutils/prdbg.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/57ae980e3290c0c1a9fb4a93144cc5b24457f05a/binutils/prdbg.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/prdbg.c?ref=57ae980e3290c0c1a9fb4a93144cc5b24457f05a",
      "patch": "@@ -752,7 +752,7 @@ pr_function_type (void *p, int argcount, bfd_boolean varargs)\n   /* Now the return type is on the top of the stack.  */\n \n   s = (char *) xmalloc (len);\n-  LITSTRCPY (s, \"(|) (\");\n+  strcpy (s, \"(|) (\");\n \n   if (argcount < 0)\n     strcat (s, \"/* unknown */\");"
    }
  ]
}