{
  "sha": "0af5e1061d7e7bff9270d30635ac4409888c9b73",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGFmNWUxMDYxZDdlN2JmZjkyNzBkMzA2MzVhYzQ0MDk4ODhjOWI3Mw==",
  "commit": {
    "author": {
      "name": "Samuel Thibault",
      "email": "samuel.thibault@ens-lyon.org",
      "date": "2020-05-30T18:45:30Z"
    },
    "committer": {
      "name": "Samuel Thibault",
      "email": "samuel.thibault@ens-lyon.org",
      "date": "2020-05-30T18:45:45Z"
    },
    "message": "hurd: unwinding support over signal trampolines\n\nThis allows to get full backtrace from signal handlers, otherwise the\nbacktrace stops at the trampoline that calls the handler.\n\nThis needs special knowledge how the trampoline records register context\nfor the sigreturn call after signal handling.\n\ngdb/ChangeLog:\n\n\t* i386-gnu-tdep.c: Include \"gdbcore.h\"\n\t(gnu_sigtramp_code, i386_gnu_sc_reg_offset): New arrays.\n        (GNU_SIGTRAMP_LEN, GNU_SIGTRAMP_TAIL,\n        I386_GNU_SIGCONTEXT_THREAD_STATE_OFFSET): New macros\n        (i386_gnu_sigtramp_start, i386_gnu_sigtramp_p,\n        i386_gnu_sigcontext_addr): New functions\n        (i386gnu_init_abi): Register i386_gnu_sigtramp_p,\n        i386_gnu_sigcontext_addr, and i386_gnu_sc_reg_offset in the gdbarch\n        tdep.",
    "tree": {
      "sha": "3686c69c7c72e2610abe31bdfa5c57d18dda35ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3686c69c7c72e2610abe31bdfa5c57d18dda35ba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0af5e1061d7e7bff9270d30635ac4409888c9b73",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0af5e1061d7e7bff9270d30635ac4409888c9b73",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0af5e1061d7e7bff9270d30635ac4409888c9b73",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0af5e1061d7e7bff9270d30635ac4409888c9b73/comments",
  "author": {
    "login": "sthibaul",
    "id": 5405051,
    "node_id": "MDQ6VXNlcjU0MDUwNTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5405051?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sthibaul",
    "html_url": "https://github.com/sthibaul",
    "followers_url": "https://api.github.com/users/sthibaul/followers",
    "following_url": "https://api.github.com/users/sthibaul/following{/other_user}",
    "gists_url": "https://api.github.com/users/sthibaul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sthibaul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sthibaul/subscriptions",
    "organizations_url": "https://api.github.com/users/sthibaul/orgs",
    "repos_url": "https://api.github.com/users/sthibaul/repos",
    "events_url": "https://api.github.com/users/sthibaul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sthibaul/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "sthibaul",
    "id": 5405051,
    "node_id": "MDQ6VXNlcjU0MDUwNTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5405051?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sthibaul",
    "html_url": "https://github.com/sthibaul",
    "followers_url": "https://api.github.com/users/sthibaul/followers",
    "following_url": "https://api.github.com/users/sthibaul/following{/other_user}",
    "gists_url": "https://api.github.com/users/sthibaul/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sthibaul/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sthibaul/subscriptions",
    "organizations_url": "https://api.github.com/users/sthibaul/orgs",
    "repos_url": "https://api.github.com/users/sthibaul/repos",
    "events_url": "https://api.github.com/users/sthibaul/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sthibaul/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "078f2fc9c153e6efd1c88b0a34eccc1164f9ae2f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/078f2fc9c153e6efd1c88b0a34eccc1164f9ae2f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/078f2fc9c153e6efd1c88b0a34eccc1164f9ae2f"
    }
  ],
  "stats": {
    "total": 144,
    "additions": 144,
    "deletions": 0
  },
  "files": [
    {
      "sha": "b2ddb1bef78d4cb43a1e5d147346f7ec11a1b37e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0af5e1061d7e7bff9270d30635ac4409888c9b73/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0af5e1061d7e7bff9270d30635ac4409888c9b73/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0af5e1061d7e7bff9270d30635ac4409888c9b73",
      "patch": "@@ -1,3 +1,15 @@\n+2020-05-30  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n+\n+\t* i386-gnu-tdep.c: Include \"gdbcore.h\"\n+\t(gnu_sigtramp_code, i386_gnu_sc_reg_offset): New arrays.\n+\t(GNU_SIGTRAMP_LEN, GNU_SIGTRAMP_TAIL,\n+\tI386_GNU_SIGCONTEXT_THREAD_STATE_OFFSET): New macros\n+\t(i386_gnu_sigtramp_start, i386_gnu_sigtramp_p,\n+\ti386_gnu_sigcontext_addr): New functions\n+\t(i386gnu_init_abi): Register i386_gnu_sigtramp_p,\n+\ti386_gnu_sigcontext_addr, and i386_gnu_sc_reg_offset in the gdbarch\n+\ttdep.\n+\n 2020-05-30  Samuel Thibault  <samuel.thibault@ens-lyon.org>\n \n \t* gnu-nat.c (gnu_nat_target::create_inferior): Move push_target call"
    },
    {
      "sha": "b52a333ac162dcd90f0d7849734ceedef188391b",
      "filename": "gdb/i386-gnu-tdep.c",
      "status": "modified",
      "additions": 132,
      "deletions": 0,
      "changes": 132,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0af5e1061d7e7bff9270d30635ac4409888c9b73/gdb/i386-gnu-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0af5e1061d7e7bff9270d30635ac4409888c9b73/gdb/i386-gnu-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-gnu-tdep.c?ref=0af5e1061d7e7bff9270d30635ac4409888c9b73",
      "patch": "@@ -17,11 +17,138 @@\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include \"defs.h\"\n+#include \"gdbcore.h\"\n #include \"osabi.h\"\n #include \"solib-svr4.h\"\n \n #include \"i386-tdep.h\"\n \n+/* Recognizing signal handler frames.  */\n+\n+/* When the GNU/Hurd libc calls a signal handler, the return address points\n+   inside the trampoline assembly snippet.\n+\n+   If the trampoline function name can not be identified, we resort to reading\n+   memory from the process in order to identify it.  */\n+\n+static const gdb_byte gnu_sigtramp_code[] =\n+{\n+/* rpc_wait_trampoline: */\n+  0xb8, 0xe7, 0xff, 0xff, 0xff,\t\t\t/* mov    $-25,%eax */\n+  0x9a, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,\t/* lcall  $7,$0 */\n+  0x89, 0x01,\t\t\t\t\t/* movl   %eax, (%ecx) */\n+  0x89, 0xdc,\t\t\t\t\t/* movl   %ebx, %esp */\n+\n+/* trampoline: */\n+  0xff, 0xd2,\t\t\t\t\t/* call   *%edx */\n+/* RA HERE */\n+  0x83, 0xc4, 0x0c,\t\t\t\t/* addl   $12, %esp */\n+  0xc3,\t\t\t\t\t\t/* ret */\n+\n+/* firewall: */\n+  0xf4,\t\t\t\t\t\t/* hlt */\n+};\n+\n+#define GNU_SIGTRAMP_LEN (sizeof gnu_sigtramp_code)\n+#define GNU_SIGTRAMP_TAIL 5\t\t\t/* length of tail after RA */\n+\n+/* If THIS_FRAME is a sigtramp routine, return the address of the\n+   start of the routine.  Otherwise, return 0.  */\n+\n+static CORE_ADDR\n+i386_gnu_sigtramp_start (struct frame_info *this_frame)\n+{\n+  CORE_ADDR pc = get_frame_pc (this_frame);\n+  gdb_byte buf[GNU_SIGTRAMP_LEN];\n+\n+  if (!safe_frame_unwind_memory (this_frame,\n+\t\t\t\t pc + GNU_SIGTRAMP_TAIL - GNU_SIGTRAMP_LEN,\n+\t\t\t\t buf, GNU_SIGTRAMP_LEN))\n+    return 0;\n+\n+  if (memcmp (buf, gnu_sigtramp_code, GNU_SIGTRAMP_LEN) != 0)\n+    return 0;\n+\n+  return pc;\n+}\n+\n+/* Return whether THIS_FRAME corresponds to a GNU/Linux sigtramp\n+   routine.  */\n+\n+static int\n+i386_gnu_sigtramp_p (struct frame_info *this_frame)\n+{\n+  CORE_ADDR pc = get_frame_pc (this_frame);\n+  const char *name;\n+\n+  find_pc_partial_function (pc, &name, NULL, NULL);\n+\n+  /* If we have a NAME, we can check for the trampoline function */\n+  if (name != NULL && strcmp (name, \"trampoline\") == 0)\n+    return 1;\n+\n+  return i386_gnu_sigtramp_start (this_frame) != 0;\n+}\n+\n+/* Offset to sc_i386_thread_state in sigcontext, from <bits/sigcontext.h>.  */\n+#define I386_GNU_SIGCONTEXT_THREAD_STATE_OFFSET 20\n+\n+/* Assuming THIS_FRAME is a GNU/Linux sigtramp routine, return the\n+   address of the associated sigcontext structure.  */\n+\n+static CORE_ADDR\n+i386_gnu_sigcontext_addr (struct frame_info *this_frame)\n+{\n+  struct gdbarch *gdbarch = get_frame_arch (this_frame);\n+  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n+  CORE_ADDR pc;\n+  CORE_ADDR sp;\n+  gdb_byte buf[4];\n+\n+  get_frame_register (this_frame, I386_ESP_REGNUM, buf);\n+  sp = extract_unsigned_integer (buf, 4, byte_order);\n+\n+  pc = i386_gnu_sigtramp_start (this_frame);\n+  if (pc)\n+    {\n+      CORE_ADDR sigcontext_addr;\n+\n+      /* The sigcontext structure address is passed as the third argument to\n+\t the signal handler. */\n+      read_memory (sp + 8, buf, 4);\n+      sigcontext_addr = extract_unsigned_integer (buf, 4, byte_order);\n+      return sigcontext_addr + I386_GNU_SIGCONTEXT_THREAD_STATE_OFFSET;\n+    }\n+\n+  error (_(\"Couldn't recognize signal trampoline.\"));\n+  return 0;\n+}\n+\n+/* Mapping between the general-purpose registers in `struct\n+   sigcontext' format (starting at sc_i386_thread_state)\n+   and GDB's register cache layout.  */\n+\n+/* From <bits/sigcontext.h>.  */\n+static int i386_gnu_sc_reg_offset[] =\n+{\n+  11 * 4,\t\t\t/* %eax */\n+  10 * 4,\t\t\t/* %ecx */\n+  9 * 4,\t\t\t/* %edx */\n+  8 * 4,\t\t\t/* %ebx */\n+  7 * 4,\t\t\t/* %esp */\n+  6 * 4,\t\t\t/* %ebp */\n+  5 * 4,\t\t\t/* %esi */\n+  4 * 4,\t\t\t/* %edi */\n+  12 * 4,\t\t\t/* %eip */\n+  14 * 4,\t\t\t/* %eflags */\n+  13 * 4,\t\t\t/* %cs */\n+  16 * 4,\t\t\t/* %ss */\n+  3 * 4,\t\t\t/* %ds */\n+  2 * 4,\t\t\t/* %es */\n+  1 * 4,\t\t\t/* %fs */\n+  0 * 4\t\t\t\t/* %gs */\n+};\n+\n /* From <sys/ucontext.h>.  */\n static int i386gnu_gregset_reg_offset[] =\n {\n@@ -59,6 +186,11 @@ i386gnu_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   tdep->sizeof_gregset = 19 * 4;\n \n   tdep->jb_pc_offset = 20;\t/* From <bits/setjmp.h>.  */\n+\n+  tdep->sigtramp_p = i386_gnu_sigtramp_p;\n+  tdep->sigcontext_addr = i386_gnu_sigcontext_addr;\n+  tdep->sc_reg_offset = i386_gnu_sc_reg_offset;\n+  tdep->sc_num_regs = ARRAY_SIZE (i386_gnu_sc_reg_offset);\n }\n \n void _initialize_i386gnu_tdep ();"
    }
  ]
}