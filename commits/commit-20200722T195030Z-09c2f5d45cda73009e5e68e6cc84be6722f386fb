{
  "sha": "09c2f5d45cda73009e5e68e6cc84be6722f386fb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDljMmY1ZDQ1Y2RhNzMwMDllNWU2OGU2Y2M4NGJlNjcyMmYzODZmYg==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-04T04:55:51Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-22T19:50:30Z"
    },
    "message": "Add new command \"maint print core-file-backed-mappings\"\n\nI wrote a read_core_file_mappings method for FreeBSD and then registered\nthis gdbarch method.  I saw some strange behavior while testing it and\nwanted a way to make sure that mappings were being correctly loaded\ninto corelow.c, so I wrote the new command which is the topic of this\ncommit.  I think it might be occasionally useful for debugging strange\ncorefile behavior.\n\nWith regard to FreeBSD, my work isn't ready yet.  Unlike Linux,\nFreeBSD puts all mappings into its core file note.  And, unlike Linux,\nit doesn't dump load segments which occupy no space in the file.  So\nmy (perhaps naive) implementation of a FreeBSD read_core_file_mappings\ndidn't work all that well:  I saw more failures in the corefile2.exp\ntests than without it.  I think it should be possible to make FreeBSD\nwork as well as Linux, but it will require doing something with all of\nthe mappings, not just the file based mappings that I was considering.\n\nIn the v4 series, Pedro asked the following:\n\n    I don't understand what this command provides that \"info proc\n    mappings\" doesn't?  Can you give an example of when you'd use this\n    command over \"info proc mappings\" ?\n\nOn Linux, \"info proc mappings\" and \"maint print core-file-backed-mappings\"\nwill produce similar, possibly identical, output.  This need not be\nthe case for other OSes.  E.g. on FreeBSD, had I finished the\nimplementation, the output from these commands would have been very\ndifferent.  The FreeBSD \"info proc mappings\" command would show\nadditional (non-file-backed) mappings in addition to at least one\nadditional field (memory permissions) for each mapping.\n\nAs noted earlier, I was seeing some unexpected behavior while working\non the FreeBSD implementation and wanted to be certain that the\nmappings were being correctly loaded by corelow.c.  \"info proc\nmappings\" prints the core file mappings, but doesn't tell us anything\nabout whether they've been loaded by corelow.c This new maintenance\ncommand directly interrogates the data structures and prints the\nvalues found there.\n\ngdb/ChangeLog:\n\n\t* corelow.c (gdbcmd.h): Include.\n\t(core_target::info_proc_mappings): New method.\n\t(get_current_core_target): New function.\n\t(maintenance_print_core_file_backed_mappings): New function.\n\t(_initialize_corelow): Add core-file-backed-mappings to\n\t\"maint print\" commands.",
    "tree": {
      "sha": "ae7be890b182451292b01ff98106ae64c4d23a67",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ae7be890b182451292b01ff98106ae64c4d23a67"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/09c2f5d45cda73009e5e68e6cc84be6722f386fb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/09c2f5d45cda73009e5e68e6cc84be6722f386fb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/09c2f5d45cda73009e5e68e6cc84be6722f386fb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/09c2f5d45cda73009e5e68e6cc84be6722f386fb/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9c5ec5c2dab18154b44a7bbb430cc7d393424116",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c5ec5c2dab18154b44a7bbb430cc7d393424116",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9c5ec5c2dab18154b44a7bbb430cc7d393424116"
    }
  ],
  "stats": {
    "total": 96,
    "additions": 96,
    "deletions": 0
  },
  "files": [
    {
      "sha": "2a7ffde1f76c9c77de29b17d48bb98061ec862c4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09c2f5d45cda73009e5e68e6cc84be6722f386fb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09c2f5d45cda73009e5e68e6cc84be6722f386fb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=09c2f5d45cda73009e5e68e6cc84be6722f386fb",
      "patch": "@@ -1,3 +1,12 @@\n+2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* corelow.c (gdbcmd.h): Include.\n+\t(core_target::info_proc_mappings): New method.\n+\t(get_current_core_target): New function.\n+\t(maintenance_print_core_file_backed_mappings): New function.\n+\t(_initialize_corelow): Add core-file-backed-mappings to\n+\t\"maint print\" commands.\n+\n 2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n     \n \t* linux-tdep.c (dump_note_entry_p): New function."
    },
    {
      "sha": "2add78349a5b95d07f02c9f93601bcf1eda0d2ea",
      "filename": "gdb/corelow.c",
      "status": "modified",
      "additions": 87,
      "deletions": 0,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09c2f5d45cda73009e5e68e6cc84be6722f386fb/gdb/corelow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09c2f5d45cda73009e5e68e6cc84be6722f386fb/gdb/corelow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corelow.c?ref=09c2f5d45cda73009e5e68e6cc84be6722f386fb",
      "patch": "@@ -47,6 +47,7 @@\n #include \"build-id.h\"\n #include \"gdbsupport/pathstuff.h\"\n #include <unordered_map>\n+#include \"gdbcmd.h\"\n \n #ifndef O_LARGEFILE\n #define O_LARGEFILE 0\n@@ -113,6 +114,9 @@ class core_target final : public process_stratum_target\n \t\t\t\t  const char *human_name,\n \t\t\t\t  bool required);\n \n+  /* See definition.  */\n+  void info_proc_mappings (struct gdbarch *gdbarch);\n+\n private: /* per-core data */\n \n   /* The core's section table.  Note that these target sections are\n@@ -1029,9 +1033,92 @@ core_target::info_proc (const char *args, enum info_proc_what request)\n   return true;\n }\n \n+/* Get a pointer to the current core target.  If not connected to a\n+   core target, return NULL.  */\n+\n+static core_target *\n+get_current_core_target ()\n+{\n+  target_ops *proc_target = current_inferior ()->process_target ();\n+  return dynamic_cast<core_target *> (proc_target);\n+}\n+\n+/* Display file backed mappings from core file.  */\n+\n+void\n+core_target::info_proc_mappings (struct gdbarch *gdbarch)\n+{\n+  if (m_core_file_mappings.sections != m_core_file_mappings.sections_end)\n+    {\n+      printf_filtered (_(\"Mapped address spaces:\\n\\n\"));\n+      if (gdbarch_addr_bit (gdbarch) == 32)\n+\t{\n+\t  printf_filtered (\"\\t%10s %10s %10s %10s %s\\n\",\n+\t\t\t   \"Start Addr\",\n+\t\t\t   \"  End Addr\",\n+\t\t\t   \"      Size\", \"    Offset\", \"objfile\");\n+\t}\n+      else\n+\t{\n+\t  printf_filtered (\"  %18s %18s %10s %10s %s\\n\",\n+\t\t\t   \"Start Addr\",\n+\t\t\t   \"  End Addr\",\n+\t\t\t   \"      Size\", \"    Offset\", \"objfile\");\n+\t}\n+    }\n+\n+  for (const struct target_section *tsp = m_core_file_mappings.sections;\n+       tsp < m_core_file_mappings.sections_end;\n+       tsp++)\n+    {\n+      ULONGEST start = tsp->addr;\n+      ULONGEST end = tsp->endaddr;\n+      ULONGEST file_ofs = tsp->the_bfd_section->filepos;\n+      const char *filename = bfd_get_filename (tsp->the_bfd_section->owner);\n+\n+      if (gdbarch_addr_bit (gdbarch) == 32)\n+\tprintf_filtered (\"\\t%10s %10s %10s %10s %s\\n\",\n+\t\t\t paddress (gdbarch, start),\n+\t\t\t paddress (gdbarch, end),\n+\t\t\t hex_string (end - start),\n+\t\t\t hex_string (file_ofs),\n+\t\t\t filename);\n+      else\n+\tprintf_filtered (\"  %18s %18s %10s %10s %s\\n\",\n+\t\t\t paddress (gdbarch, start),\n+\t\t\t paddress (gdbarch, end),\n+\t\t\t hex_string (end - start),\n+\t\t\t hex_string (file_ofs),\n+\t\t\t filename);\n+    }\n+}\n+\n+/* Implement \"maintenance print core-file-backed-mappings\" command.  \n+\n+   If mappings are loaded, the results should be similar to the\n+   mappings shown by \"info proc mappings\".  This command is mainly a\n+   debugging tool for GDB developers to make sure that the expected\n+   mappings are present after loading a core file.  For Linux, the\n+   output provided by this command will be very similar (if not\n+   identical) to that provided by \"info proc mappings\".  This is not\n+   necessarily the case for other OSes which might provide\n+   more/different information in the \"info proc mappings\" output.  */\n+\n+static void\n+maintenance_print_core_file_backed_mappings (const char *args, int from_tty)\n+{\n+  core_target *targ = get_current_core_target ();\n+  if (targ != nullptr)\n+    targ->info_proc_mappings (targ->core_gdbarch ());\n+}\n+\n void _initialize_corelow ();\n void\n _initialize_corelow ()\n {\n   add_target (core_target_info, core_target_open, filename_completer);\n+  add_cmd (\"core-file-backed-mappings\", class_maintenance,\n+           maintenance_print_core_file_backed_mappings,\n+\t   _(\"Print core file's file-backed mappings\"),\n+\t   &maintenanceprintlist);\n }"
    }
  ]
}