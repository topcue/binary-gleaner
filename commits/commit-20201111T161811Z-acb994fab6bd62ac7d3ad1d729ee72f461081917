{
  "sha": "acb994fab6bd62ac7d3ad1d729ee72f461081917",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWNiOTk0ZmFiNmJkNjJhYzdkM2FkMWQ3MjllZTcyZjQ2MTA4MTkxNw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-11-11T16:18:10Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-11-11T16:18:11Z"
    },
    "message": "gdb/testsuite: add \"breakpoint always-inserted\" axis in gdb.base/continue-after-aborted-step-over.exp\n\nThe test gdb.base/continue-after-aborted-step-over.exp fails on ROCm GDB\n[1] when using the unix board (when debugging a standard x86-64/Linux\nprogram), with:\n\n    (gdb) b *0^M\n    Breakpoint 2 at 0x0^M\n    Warning:^M\n    Cannot insert breakpoint 2.^M\n    Cannot access memory at address 0x0^M\n    ^M\n    (gdb) FAIL: gdb.base/continue-after-aborted-step-over.exp: displaced-stepping=off: b *0\n\nThis happens because that build of GDB defaults to \"set breakpoint\nalways-inserted on\", for reasons that are unrelevant to explain here.\nAs soon as the breakpoint is created, GDB tries to insert it and\n(expectedly) fails.  This causes more text to be output than what the\npattern expects.\n\nIt is actually be relevant to run the test with both \"set breakpoint\nalways-inserted\" on and off.  With it on, it mimics what happens when\nrunning in non-stop mode, with other threads running.  This is relevant\nfor upstream even outside of the ROCm port, so here's a patch for it.\n\nAdd this other axis and adjust the \"b *0\" test to handle the extra\noutput when it is on.\n\n[1] https://github.com/ROCm-Developer-Tools/ROCgdb\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/continue-after-aborted-step-over.exp: Add \"breakpoint\n\talways-inserted\" axis.\n\t(do_test): Add breakpoint_always_inserted parameter.\n\nChange-Id: I95126cae563a0b9a72f4a99627809fc34340cd5e",
    "tree": {
      "sha": "e211e20fc7c35a90c664dca85f2eb3e41177d977",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e211e20fc7c35a90c664dca85f2eb3e41177d977"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/acb994fab6bd62ac7d3ad1d729ee72f461081917",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/acb994fab6bd62ac7d3ad1d729ee72f461081917",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/acb994fab6bd62ac7d3ad1d729ee72f461081917",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/acb994fab6bd62ac7d3ad1d729ee72f461081917/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f27c0b449face6052e3b2fa92d77acc17522cb8e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f27c0b449face6052e3b2fa92d77acc17522cb8e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f27c0b449face6052e3b2fa92d77acc17522cb8e"
    }
  ],
  "stats": {
    "total": 19,
    "additions": 16,
    "deletions": 3
  },
  "files": [
    {
      "sha": "855ceaaa3dbbdb46dc9dcdb272da41b67b2efc22",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/acb994fab6bd62ac7d3ad1d729ee72f461081917/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/acb994fab6bd62ac7d3ad1d729ee72f461081917/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=acb994fab6bd62ac7d3ad1d729ee72f461081917",
      "patch": "@@ -1,3 +1,9 @@\n+2020-11-11  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.base/continue-after-aborted-step-over.exp: Add \"breakpoint\n+\talways-inserted\" axis.\n+\t(do_test): Add breakpoint_always_inserted parameter.\n+\n 2020-11-10  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/bias.exp: Update."
    },
    {
      "sha": "558f5fb9d101c2a48df6bf01fc08f1411d071acd",
      "filename": "gdb/testsuite/gdb.base/continue-after-aborted-step-over.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/acb994fab6bd62ac7d3ad1d729ee72f461081917/gdb/testsuite/gdb.base/continue-after-aborted-step-over.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/acb994fab6bd62ac7d3ad1d729ee72f461081917/gdb/testsuite/gdb.base/continue-after-aborted-step-over.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/continue-after-aborted-step-over.exp?ref=acb994fab6bd62ac7d3ad1d729ee72f461081917",
      "patch": "@@ -41,13 +41,14 @@ if {[build_executable \"failed to prepare\" $testfile $srcfile debug]} {\n }\n \n # DISPLACED indicates whether to use displaced-stepping.\n-proc do_test {displaced} {\n+proc do_test {displaced breakpoint_always_inserted} {\n     global gdb_prompt decimal\n     global srcfile binfile\n \n     clean_restart $binfile\n \n     gdb_test_no_output \"set displaced-stepping $displaced\"\n+    gdb_test_no_output \"set breakpoint always-inserted $breakpoint_always_inserted\"\n \n     if ![runto_main] {\n \tfail \"run to main\"\n@@ -64,7 +65,11 @@ proc do_test {displaced} {\n     }\n \n     # Set a breakpoint that fails to insert.\n-    gdb_test \"b *0\" \"Breakpoint $decimal at 0x0\"\n+    if { $breakpoint_always_inserted == \"on\" } {\n+\tgdb_test \"b *0\" \"Breakpoint $decimal at 0x0.*\"\n+    } else {\n+\tgdb_test \"b *0\" \"Breakpoint $decimal at 0x0\"\n+    }\n \n     gdb_test \"continue\" \\\n \t\"Command aborted\\\\.\" \\\n@@ -83,5 +88,7 @@ proc do_test {displaced} {\n # machinery.  So make sure this runs with displaced stepping disabled,\n # and for good measure, also try with displaced stepping enabled.\n foreach_with_prefix displaced-stepping {\"off\" \"on\"} {\n-    do_test ${displaced-stepping}\n+    foreach_with_prefix breakpoint-always-inserted {\"off\" \"on\"} {\n+\tdo_test ${displaced-stepping} ${breakpoint-always-inserted}\n+    }\n }"
    }
  ]
}