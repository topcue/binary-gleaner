{
  "sha": "5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWQ3ZTZlZDBiZDBlYzBkNDY2M2U1NWIyOGU2ZmJkY2EyY2I3OThlMQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-13T15:25:19Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-13T15:25:19Z"
    },
    "message": "[gdb/testsuite] Avoid gnatbind/gnatlink in gdb.ada/catch_ex_std.exp\n\nThere's a single test-case in the testsuite that explicitly calls gnatbind and\ngnatlink: gdb.ada/catch_ex_std.exp.\n\nInstead, use gnatmake and pass specific gnatbind and gnatlink options using\ngnatmake passthrough options -bargs and -largs.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2020-12-13  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.ada/catch_ex_std.exp: Use gnatmake -bargs and -largs instead of\n\tcalling gnatbind and gnatlink.",
    "tree": {
      "sha": "243d5e525fda8bba96602d7e184c22c59541d7d4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/243d5e525fda8bba96602d7e184c22c59541d7d4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ee9812a00153ad788319dae1cde901cf216f9fba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee9812a00153ad788319dae1cde901cf216f9fba",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ee9812a00153ad788319dae1cde901cf216f9fba"
    }
  ],
  "stats": {
    "total": 76,
    "additions": 28,
    "deletions": 48
  },
  "files": [
    {
      "sha": "b7cc9e97ca086466945bfd209b395aedef5daa96",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-13  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.ada/catch_ex_std.exp: Use gnatmake -bargs and -largs instead of\n+\tcalling gnatbind and gnatlink.\n+\n 2020-12-13  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.base/dcache-flush.c: New file."
    },
    {
      "sha": "d91f88312bd9032e4b3da9acde9ababa41d0cdcf",
      "filename": "gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "status": "modified",
      "additions": 23,
      "deletions": 48,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1/gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1/gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/catch_ex_std.exp?ref=5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1",
      "patch": "@@ -23,8 +23,6 @@ if { [skip_ada_tests] } { return -1 }\n \n standard_ada_testfile foo\n \n-set ofile ${binfile}.o\n-\n set srcfile2 [file join [file dirname $srcfile] some_package.adb]\n set ofile2 [standard_output_file some_package.o]\n set sofile [standard_output_file libsome_package.so]\n@@ -51,56 +49,33 @@ if {[gdb_compile_shlib $ofile2 $sofile \\\n     return -1\n }\n \n-# Now we can compile the main program to an object file; but again, we\n-# can't compile directly using gnatmake.\n-if {[target_compile_ada_from_dir $outdir $srcfile $ofile object debug] != \"\"} {\n-    return -1\n+# Set linkarg such that the executable can find the shared library.\n+if {[istarget \"*-*-mingw*\"]\n+    || [istarget *-*-cygwin*]\n+    || [istarget *-*-pe*]\n+    || [istarget arm*-*-symbianelf*]} {\n+    # Do not need anything.\n+    set linkarg \"\"\n+} elseif {[istarget *-*-freebsd*] || [istarget *-*-openbsd*]} {\n+    set linkarg \"-Wl,-rpath,$outdir\"\n+} else {\n+    set linkarg \"-Wl,-rpath,\\\\\\$ORIGIN\"\n }\n \n-set gnatbind [find_ada_tool gnatbind]\n-set gnatlink [find_ada_tool gnatlink]\n+# Make sure we link against the shared GNAT run time.\n+set gnatbind_options [list -bargs -shared -margs]\n \n-with_cwd $outdir {\n-    # Test if gnatbind is supported\n-    set status [remote_exec host \"$gnatbind --version\"]\n-    if {[lindex $status 0] == -1} {\n-\tunsupported \"gnatbind foo\"\n-\treturn -1\n-    }\n-    # Bind.\n-    set status [remote_exec host \"$gnatbind -shared foo\"]\n-    if {[lindex $status 0] == 0} {\n-\tpass \"gnatbind foo\"\n-    } else {\n-\tfail \"gnatbind foo\"\n-\treturn -1\n-    }\n+# Link against the shared library.\n+set gnatlink_options [list -largs $linkarg -Wl,-lsome_package -margs]\n \n-    # Test if gnatlink is supported\n-    set status [remote_exec host \"$gnatlink --version\"]\n-    if {[lindex $status 0] == -1} {\n-\tunsupported \"gnatlink foo\"\n-\treturn -1\n-    }\n-    # Finally, link.\n-    if {[istarget \"*-*-mingw*\"]\n-\t|| [istarget *-*-cygwin*]\n-\t|| [istarget *-*-pe*]\n-\t|| [istarget arm*-*-symbianelf*]} {\n-\t# Do not need anything.\n-\tset linkarg \"\"\n-    } elseif {[istarget *-*-freebsd*] || [istarget *-*-openbsd*]} {\n-\tset linkarg \"-Wl,-rpath,$outdir\"\n-    } else {\n-\tset linkarg \"-Wl,-rpath,\\\\\\$ORIGIN\"\n-    }\n-    set status [remote_exec host \"$gnatlink foo $linkarg -Wl,-lsome_package\"]\n-    if {[lindex $status 0] == 0} {\n-\tpass \"gnatlink foo\"\n-    } else {\n-\tfail \"gnatlink foo\"\n-\treturn -1\n-    }\n+set options [list debug]\n+foreach option [concat $gnatbind_options $gnatlink_options] {\n+    lappend options [concat \"additional_flags=\" $option]\n+}\n+\n+# Create executable.\n+if {[gdb_compile_ada $srcfile $binfile executable $options] != \"\"} {\n+    return -1\n }\n \n clean_restart ${testfile}"
    }
  ]
}