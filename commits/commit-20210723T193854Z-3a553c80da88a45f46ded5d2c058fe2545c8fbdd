{
  "sha": "3a553c80da88a45f46ded5d2c058fe2545c8fbdd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2E1NTNjODBkYTg4YTQ1ZjQ2ZGVkNWQyYzA1OGZlMjU0NWM4ZmJkZA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-30T01:47:23Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-23T19:38:54Z"
    },
    "message": "gdb: rename cfunc to simple_func\n\nAfter browsing the CLI code for quite a while and trying really hard, I\nreached the conclusion that I can't give a meaningful explanation of\nwhat \"sfunc\" and \"cfunc\" functions are, in cmd_list_element.  I don't\nsee a logic at all.  That makes it very difficult to do any kind of\nchange.  Unless somebody can make sense out of all that, I'd like to try\nto retro-fit some logic in the cmd_list_element callback function code\nso that we can understand what is going on, do some cleanups and add new\nfeatures.\n\nThe first change is about \"cfunc\".  I can't figure out what the \"c\" in\ncfunc means.  It's not const, because there's already \"const\" in\n\"cmd_const_cfunc_ftype\", and the previous \"cmd_cfunc_ftype\" had nothing\nconst..  It's not \"cmd\" or \"command\", because there's already \"cmd\" in\n\"cmd_const_cfunc_ftype\".\n\nThe \"main\" command callback, cmd_list_element::func, has three\nparameters, whereas cfunc has two.  It is missing the cmd_list_element\nparameter.  So the only reason I see for cfunc to exist is to be a shim\nbetween the three and two parameter versions.  Most commands don't need\nto receive the cmd_list_element object, so adding it everywhere would be\nlong and would just add more unnecessary boilerplate.  So since this is\nthe \"simple\" version of the callback, compared to the \"full\", I suggest\nrenaming cmd_const_cfunc_ftype into cmd_simple_func_ftype, as well as\neverything (like the utility functions) that goes with it.\n\nChange-Id: I4e46cacfd77a66bc1cbf683f6a362072504b7868",
    "tree": {
      "sha": "c927f52a37c4fa46edc564927c032e8ee39b1357",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c927f52a37c4fa46edc564927c032e8ee39b1357"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3a553c80da88a45f46ded5d2c058fe2545c8fbdd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a553c80da88a45f46ded5d2c058fe2545c8fbdd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3a553c80da88a45f46ded5d2c058fe2545c8fbdd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a553c80da88a45f46ded5d2c058fe2545c8fbdd/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4e93ea6e67fd7260ef842b9eeb20f071648c056e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e93ea6e67fd7260ef842b9eeb20f071648c056e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4e93ea6e67fd7260ef842b9eeb20f071648c056e"
    }
  ],
  "stats": {
    "total": 97,
    "additions": 53,
    "deletions": 44
  },
  "files": [
    {
      "sha": "5ff0b77eb68fb52e84cf84f9618851091bbc2f9a",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a553c80da88a45f46ded5d2c058fe2545c8fbdd/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a553c80da88a45f46ded5d2c058fe2545c8fbdd/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=3a553c80da88a45f46ded5d2c058fe2545c8fbdd",
      "patch": "@@ -443,7 +443,7 @@ complete_command (const char *arg, int from_tty)\n int\n is_complete_command (struct cmd_list_element *c)\n {\n-  return cmd_cfunc_eq (c, complete_command);\n+  return cmd_simple_func_eq (c, complete_command);\n }\n \n static void"
    },
    {
      "sha": "3c39e47ac69b305650d67aca75c2a383460456f9",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 23,
      "deletions": 21,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a553c80da88a45f46ded5d2c058fe2545c8fbdd/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a553c80da88a45f46ded5d2c058fe2545c8fbdd/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=3a553c80da88a45f46ded5d2c058fe2545c8fbdd",
      "patch": "@@ -94,22 +94,23 @@ print_help_for_command (struct cmd_list_element *c,\n \f\n /* Set the callback function for the specified command.  For each both\n    the commands callback and func() are set.  The latter set to a\n-   bounce function (unless cfunc / sfunc is NULL that is).  */\n+   bounce function (unless simple_func / sfunc is NULL that is).  */\n \n static void\n-do_const_cfunc (struct cmd_list_element *c, const char *args, int from_tty)\n+do_simple_func (struct cmd_list_element *c, const char *args, int from_tty)\n {\n-  c->function.const_cfunc (args, from_tty);\n+  c->function.simple_func (args, from_tty);\n }\n \n static void\n-set_cmd_cfunc (struct cmd_list_element *cmd, cmd_const_cfunc_ftype *cfunc)\n+set_cmd_simple_func (struct cmd_list_element *cmd, cmd_simple_func_ftype *simple_func)\n {\n-  if (cfunc == NULL)\n+  if (simple_func == NULL)\n     cmd->func = NULL;\n   else\n-    cmd->func = do_const_cfunc;\n-  cmd->function.const_cfunc = cfunc;\n+    cmd->func = do_simple_func;\n+\n+  cmd->function.simple_func = simple_func;\n }\n \n static void\n@@ -129,9 +130,10 @@ set_cmd_sfunc (struct cmd_list_element *cmd, cmd_const_sfunc_ftype *sfunc)\n }\n \n int\n-cmd_cfunc_eq (struct cmd_list_element *cmd, cmd_const_cfunc_ftype *cfunc)\n+cmd_simple_func_eq (struct cmd_list_element *cmd, cmd_simple_func_ftype *simple_func)\n {\n-  return cmd->func == do_const_cfunc && cmd->function.const_cfunc == cfunc;\n+  return (cmd->func == do_simple_func\n+\t  && cmd->function.simple_func == simple_func);\n }\n \n void\n@@ -238,25 +240,25 @@ add_cmd (const char *name, enum command_class theclass,\n {\n   cmd_list_element *result = do_add_cmd (name, theclass, doc, list);\n   result->func = NULL;\n-  result->function.const_cfunc = NULL;\n+  result->function.simple_func = NULL;\n   return result;\n }\n \n struct cmd_list_element *\n add_cmd (const char *name, enum command_class theclass,\n-\t cmd_const_cfunc_ftype *fun,\n+\t cmd_simple_func_ftype *fun,\n \t const char *doc, struct cmd_list_element **list)\n {\n   cmd_list_element *result = do_add_cmd (name, theclass, doc, list);\n-  set_cmd_cfunc (result, fun);\n+  set_cmd_simple_func (result, fun);\n   return result;\n }\n \n /* Add an element with a suppress notification to the LIST of commands.  */\n \n struct cmd_list_element *\n add_cmd_suppress_notification (const char *name, enum command_class theclass,\n-\t\t\t       cmd_const_cfunc_ftype *fun, const char *doc,\n+\t\t\t       cmd_simple_func_ftype *fun, const char *doc,\n \t\t\t       struct cmd_list_element **list,\n \t\t\t       int *suppress_notification)\n {\n@@ -359,7 +361,7 @@ update_prefix_field_of_prefixed_commands (struct cmd_list_element *c)\n \n struct cmd_list_element *\n add_prefix_cmd (const char *name, enum command_class theclass,\n-\t\tcmd_const_cfunc_ftype *fun,\n+\t\tcmd_simple_func_ftype *fun,\n \t\tconst char *doc, struct cmd_list_element **subcommands,\n \t\tint allow_unknown, struct cmd_list_element **list)\n {\n@@ -432,7 +434,7 @@ add_show_prefix_cmd (const char *name, enum command_class theclass,\n struct cmd_list_element *\n add_prefix_cmd_suppress_notification\n \t       (const char *name, enum command_class theclass,\n-\t\tcmd_const_cfunc_ftype *fun,\n+\t\tcmd_simple_func_ftype *fun,\n \t\tconst char *doc, struct cmd_list_element **subcommands,\n \t\tint allow_unknown, struct cmd_list_element **list,\n \t\tint *suppress_notification)\n@@ -448,7 +450,7 @@ add_prefix_cmd_suppress_notification\n \n struct cmd_list_element *\n add_abbrev_prefix_cmd (const char *name, enum command_class theclass,\n-\t\t       cmd_const_cfunc_ftype *fun, const char *doc,\n+\t\t       cmd_simple_func_ftype *fun, const char *doc,\n \t\t       struct cmd_list_element **subcommands,\n \t\t       int allow_unknown, struct cmd_list_element **list)\n {\n@@ -460,7 +462,7 @@ add_abbrev_prefix_cmd (const char *name, enum command_class theclass,\n   return c;\n }\n \n-/* This is an empty \"cfunc\".  */\n+/* This is an empty \"simple func\".  */\n void\n not_just_help_class_command (const char *args, int from_tty)\n {\n@@ -951,7 +953,7 @@ delete_cmd (const char *name, struct cmd_list_element **list,\n /* Add an element to the list of info subcommands.  */\n \n struct cmd_list_element *\n-add_info (const char *name, cmd_const_cfunc_ftype *fun, const char *doc)\n+add_info (const char *name, cmd_simple_func_ftype *fun, const char *doc)\n {\n   return add_cmd (name, class_info, fun, doc, &infolist);\n }\n@@ -968,7 +970,7 @@ add_info_alias (const char *name, cmd_list_element *target, int abbrev_flag)\n \n struct cmd_list_element *\n add_com (const char *name, enum command_class theclass,\n-\t cmd_const_cfunc_ftype *fun,\n+\t cmd_simple_func_ftype *fun,\n \t const char *doc)\n {\n   return add_cmd (name, theclass, fun, doc, &cmdlist);\n@@ -990,7 +992,7 @@ add_com_alias (const char *name, cmd_list_element *target,\n \n struct cmd_list_element *\n add_com_suppress_notification (const char *name, enum command_class theclass,\n-\t\t\t       cmd_const_cfunc_ftype *fun, const char *doc,\n+\t\t\t       cmd_simple_func_ftype *fun, const char *doc,\n \t\t\t       int *suppress_notification)\n {\n   return add_cmd_suppress_notification (name, theclass, fun, doc,\n@@ -2167,5 +2169,5 @@ int\n cli_user_command_p (struct cmd_list_element *cmd)\n {\n   return (cmd->theclass == class_user\n-\t  && (cmd->func == do_const_cfunc || cmd->func == do_sfunc));\n+\t  && (cmd->func == do_simple_func || cmd->func == do_sfunc));\n }"
    },
    {
      "sha": "4cbdf7ff6d1790f169d6480a357aed6872dd6a46",
      "filename": "gdb/cli/cli-decode.h",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a553c80da88a45f46ded5d2c058fe2545c8fbdd/gdb/cli/cli-decode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a553c80da88a45f46ded5d2c058fe2545c8fbdd/gdb/cli/cli-decode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.h?ref=3a553c80da88a45f46ded5d2c058fe2545c8fbdd",
      "patch": "@@ -174,8 +174,12 @@ struct cmd_list_element\n      to one of the below.  */\n   union\n     {\n-      /* If type is not_set_cmd, call it like this: */\n-      cmd_const_cfunc_ftype *const_cfunc;\n+      /* Most commands don't need the cmd_list_element parameter passed to FUNC.\n+\t They therefore register a command of this type, which doesn't have the\n+\t cmd_list_element parameter.  do_simple_func is installed as FUNC, and\n+\t acts as a shim between the two.  */\n+      cmd_simple_func_ftype *simple_func;\n+\n       /* If type is set_cmd or show_cmd, first set the variables,\n \t and then call this: */\n       cmd_const_sfunc_ftype *sfunc;"
    },
    {
      "sha": "1bda67c937af9311f988c459ec7fefe1b080aa55",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 14,
      "deletions": 11,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a553c80da88a45f46ded5d2c058fe2545c8fbdd/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a553c80da88a45f46ded5d2c058fe2545c8fbdd/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=3a553c80da88a45f46ded5d2c058fe2545c8fbdd",
      "patch": "@@ -128,7 +128,10 @@ var_types;\n /* This structure records one command'd definition.  */\n struct cmd_list_element;\n \n-typedef void cmd_const_cfunc_ftype (const char *args, int from_tty);\n+/* The \"simple\" signature of command callbacks, which doesn't include a\n+   cmd_list_element parameter.  */\n+\n+typedef void cmd_simple_func_ftype (const char *args, int from_tty);\n \n /* This structure specifies notifications to be suppressed by a cli\n    command interpreter.  */\n@@ -158,7 +161,7 @@ extern bool valid_cmd_char_p (int c);\n /* Const-correct variant of the above.  */\n \n extern struct cmd_list_element *add_cmd (const char *, enum command_class,\n-\t\t\t\t\t cmd_const_cfunc_ftype *fun,\n+\t\t\t\t\t cmd_simple_func_ftype *fun,\n \t\t\t\t\t const char *,\n \t\t\t\t\t struct cmd_list_element **);\n \n@@ -170,7 +173,7 @@ extern struct cmd_list_element *add_cmd (const char *, enum command_class,\n \n extern struct cmd_list_element *add_cmd_suppress_notification\n \t\t\t(const char *name, enum command_class theclass,\n-\t\t\t cmd_const_cfunc_ftype *fun, const char *doc,\n+\t\t\t cmd_simple_func_ftype *fun, const char *doc,\n \t\t\t struct cmd_list_element **list,\n \t\t\t int *suppress_notification);\n \n@@ -181,7 +184,7 @@ extern struct cmd_list_element *add_alias_cmd (const char *,\n \n \n extern struct cmd_list_element *add_prefix_cmd (const char *, enum command_class,\n-\t\t\t\t\t\tcmd_const_cfunc_ftype *fun,\n+\t\t\t\t\t\tcmd_simple_func_ftype *fun,\n \t\t\t\t\t\tconst char *,\n \t\t\t\t\t\tstruct cmd_list_element **,\n \t\t\t\t\t\tint,\n@@ -203,15 +206,15 @@ extern struct cmd_list_element *add_show_prefix_cmd\n \n extern struct cmd_list_element *add_prefix_cmd_suppress_notification\n \t\t\t(const char *name, enum command_class theclass,\n-\t\t\t cmd_const_cfunc_ftype *fun,\n+\t\t\t cmd_simple_func_ftype *fun,\n \t\t\t const char *doc, struct cmd_list_element **subcommands,\n \t\t\t int allow_unknown,\n \t\t\t struct cmd_list_element **list,\n \t\t\t int *suppress_notification);\n \n extern struct cmd_list_element *add_abbrev_prefix_cmd (const char *,\n \t\t\t\t\t\t       enum command_class,\n-\t\t\t\t\t\t       cmd_const_cfunc_ftype *fun,\n+\t\t\t\t\t\t       cmd_simple_func_ftype *fun,\n \t\t\t\t\t\t       const char *,\n \t\t\t\t\t\t       struct cmd_list_element\n \t\t\t\t\t\t       **, int,\n@@ -250,8 +253,8 @@ extern void set_cmd_completer_handle_brkchars (struct cmd_list_element *,\n \n /* HACK: cagney/2002-02-23: Code, mostly in tracepoints.c, grubs\n    around in cmd objects to test the value of the commands sfunc().  */\n-extern int cmd_cfunc_eq (struct cmd_list_element *cmd,\n-\t\t\t cmd_const_cfunc_ftype *cfun);\n+extern int cmd_simple_func_eq (struct cmd_list_element *cmd,\n+\t\t\t cmd_simple_func_ftype *cfun);\n \n /* Execute CMD's pre/post hook.  Throw an error if the command fails.\n    If already executing this pre/post hook, or there is no pre/post\n@@ -346,7 +349,7 @@ extern int lookup_cmd_composition (const char *text,\n \t\t\t\t   struct cmd_list_element **cmd);\n \n extern struct cmd_list_element *add_com (const char *, enum command_class,\n-\t\t\t\t\t cmd_const_cfunc_ftype *fun,\n+\t\t\t\t\t cmd_simple_func_ftype *fun,\n \t\t\t\t\t const char *);\n \n extern cmd_list_element *add_com_alias (const char *name,\n@@ -356,11 +359,11 @@ extern cmd_list_element *add_com_alias (const char *name,\n \n extern struct cmd_list_element *add_com_suppress_notification\n \t\t       (const char *name, enum command_class theclass,\n-\t\t\tcmd_const_cfunc_ftype *fun, const char *doc,\n+\t\t\tcmd_simple_func_ftype *fun, const char *doc,\n \t\t\tint *supress_notification);\n \n extern struct cmd_list_element *add_info (const char *,\n-\t\t\t\t\t  cmd_const_cfunc_ftype *fun,\n+\t\t\t\t\t  cmd_simple_func_ftype *fun,\n \t\t\t\t\t  const char *);\n \n extern cmd_list_element *add_info_alias (const char *name,"
    },
    {
      "sha": "06cf9cad29adeaa201929513e7378fd81e7e3f6d",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a553c80da88a45f46ded5d2c058fe2545c8fbdd/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a553c80da88a45f46ded5d2c058fe2545c8fbdd/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=3a553c80da88a45f46ded5d2c058fe2545c8fbdd",
      "patch": "@@ -655,7 +655,7 @@ validate_actionline (const char *line, struct breakpoint *b)\n   if (c == 0)\n     error (_(\"`%s' is not a tracepoint action, or is ambiguous.\"), p);\n \n-  if (cmd_cfunc_eq (c, collect_pseudocommand))\n+  if (cmd_simple_func_eq (c, collect_pseudocommand))\n     {\n       int trace_string = 0;\n \n@@ -723,7 +723,7 @@ validate_actionline (const char *line, struct breakpoint *b)\n       while (p && *p++ == ',');\n     }\n \n-  else if (cmd_cfunc_eq (c, teval_pseudocommand))\n+  else if (cmd_simple_func_eq (c, teval_pseudocommand))\n     {\n       do\n \t{\t\t\t/* Repeat over a comma-separated list.  */\n@@ -750,7 +750,7 @@ validate_actionline (const char *line, struct breakpoint *b)\n       while (p && *p++ == ',');\n     }\n \n-  else if (cmd_cfunc_eq (c, while_stepping_pseudocommand))\n+  else if (cmd_simple_func_eq (c, while_stepping_pseudocommand))\n     {\n       char *endp;\n \n@@ -761,7 +761,7 @@ validate_actionline (const char *line, struct breakpoint *b)\n       p = endp;\n     }\n \n-  else if (cmd_cfunc_eq (c, end_actions_pseudocommand))\n+  else if (cmd_simple_func_eq (c, end_actions_pseudocommand))\n     ;\n \n   else\n@@ -1308,7 +1308,7 @@ encode_actions_1 (struct command_line *action,\n       if (cmd == 0)\n \terror (_(\"Bad action list item: %s\"), action_exp);\n \n-      if (cmd_cfunc_eq (cmd, collect_pseudocommand))\n+      if (cmd_simple_func_eq (cmd, collect_pseudocommand))\n \t{\n \t  int trace_string = 0;\n \n@@ -1464,7 +1464,7 @@ encode_actions_1 (struct command_line *action,\n \t    }\n \t  while (action_exp && *action_exp++ == ',');\n \t}\t\t\t/* if */\n-      else if (cmd_cfunc_eq (cmd, teval_pseudocommand))\n+      else if (cmd_simple_func_eq (cmd, teval_pseudocommand))\n \t{\n \t  do\n \t    {\t\t\t/* Repeat over a comma-separated list.  */\n@@ -1488,7 +1488,7 @@ encode_actions_1 (struct command_line *action,\n \t    }\n \t  while (action_exp && *action_exp++ == ',');\n \t}\t\t\t/* if */\n-      else if (cmd_cfunc_eq (cmd, while_stepping_pseudocommand))\n+      else if (cmd_simple_func_eq (cmd, while_stepping_pseudocommand))\n \t{\n \t  /* We check against nested while-stepping when setting\n \t     breakpoint action, so no way to run into nested\n@@ -2690,13 +2690,13 @@ trace_dump_actions (struct command_line *action,\n       if (cmd == 0)\n \terror (_(\"Bad action list item: %s\"), action_exp);\n \n-      if (cmd_cfunc_eq (cmd, while_stepping_pseudocommand))\n+      if (cmd_simple_func_eq (cmd, while_stepping_pseudocommand))\n \t{\n \t  gdb_assert (action->body_list_1 == nullptr);\n \t  trace_dump_actions (action->body_list_0.get (),\n \t\t\t      1, stepping_frame, from_tty);\n \t}\n-      else if (cmd_cfunc_eq (cmd, collect_pseudocommand))\n+      else if (cmd_simple_func_eq (cmd, collect_pseudocommand))\n \t{\n \t  /* Display the collected data.\n \t     For the trap frame, display only what was collected at"
    }
  ]
}