{
  "sha": "2f4fcf00399bc0ad5a4fed6b530128e8be4f40da",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmY0ZmNmMDAzOTliYzBhZDVhNGZlZDZiNTMwMTI4ZThiZTRmNDBkYQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:06:14Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:06:14Z"
    },
    "message": "Require always-non-stop for multi-target resumptions\n\nCurrently, we can only support resuming multiple targets at the same\ntime if all targets are in non-stop mode (or user-visible all-stop\nmode with target backend in non-stop mode).\n\nThis patch makes GDB error out if the user tries to resume more than\none target at the same time and one of the resumed targets isn't in\nnon-stop mode:\n\n (gdb) info inferiors\n   Num  Description       Connection                Executable\n   1    process 15303     1 (native)                a.out\n * 2    process 15286     2 (extended-remote :9999) a.out\n (gdb) set schedule-multiple on\n (gdb) c\n Continuing.\n Connection 2 (extended-remote :9999) does not support multi-target resumption.\n\nThis is here later in the series instead of in the main multi-target\npatch because it depends the previous patch, which added\nprocess_stratum_target::connection_string().\n\ngdb/ChangeLog:\n2020-01-10  Pedro Alves  <palves@redhat.com>\n\n\t* infrun.c: Include \"target-connection.h\".\n\t(check_multi_target_resumption): New.\n\t(proceed): Call it.\n\t* target-connection.c (make_target_connection_string): Make\n\textern.\n\t* target-connection.h (make_target_connection_string): Declare.",
    "tree": {
      "sha": "2808b2e8b1b5992b8ece704ca03bb0b874653c24",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2808b2e8b1b5992b8ece704ca03bb0b874653c24"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "121b3efd49f98e4049281b3ba7a258e650e40b38",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/121b3efd49f98e4049281b3ba7a258e650e40b38",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/121b3efd49f98e4049281b3ba7a258e650e40b38"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 77,
    "deletions": 5
  },
  "files": [
    {
      "sha": "63c32a0e456162e88a0bed71fcba36a35e1feb98",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2f4fcf00399bc0ad5a4fed6b530128e8be4f40da",
      "patch": "@@ -1,3 +1,12 @@\n+2020-01-10  Pedro Alves  <palves@redhat.com>\n+\n+\t* infrun.c: Include \"target-connection.h\".\n+\t(check_multi_target_resumption): New.\n+\t(proceed): Call it.\n+\t* target-connection.c (make_target_connection_string): Make\n+\textern.\n+\t* target-connection.h (make_target_connection_string): Declare.\n+\n 2020-01-10  Pedro Alves  <palves@redhat.com>\n \n \t* Makefile.in (COMMON_SFILES): Add target-connection.c."
    },
    {
      "sha": "a0583a8e65868ecdcc63d324908ea2c4df339a50",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=2f4fcf00399bc0ad5a4fed6b530128e8be4f40da",
      "patch": "@@ -28,6 +28,7 @@\n #include \"gdbcore.h\"\n #include \"gdbcmd.h\"\n #include \"target.h\"\n+#include \"target-connection.h\"\n #include \"gdbthread.h\"\n #include \"annotate.h\"\n #include \"symfile.h\"\n@@ -2881,6 +2882,61 @@ commit_resume_all_targets ()\n     }\n }\n \n+/* Check that all the targets we're about to resume are in non-stop\n+   mode.  Ideally, we'd only care whether all targets support\n+   target-async, but we're not there yet.  E.g., stop_all_threads\n+   doesn't know how to handle all-stop targets.  Also, the remote\n+   protocol in all-stop mode is synchronous, irrespective of\n+   target-async, which means that things like a breakpoint re-set\n+   triggered by one target would try to read memory from all targets\n+   and fail.  */\n+\n+static void\n+check_multi_target_resumption (process_stratum_target *resume_target)\n+{\n+  if (!non_stop && resume_target == nullptr)\n+    {\n+      scoped_restore_current_thread restore_thread;\n+\n+      /* This is used to track whether we're resuming more than one\n+\t target.  */\n+      process_stratum_target *first_connection = nullptr;\n+\n+      /* The first inferior we see with a target that does not work in\n+\t always-non-stop mode.  */\n+      inferior *first_not_non_stop = nullptr;\n+\n+      for (inferior *inf : all_non_exited_inferiors (resume_target))\n+\t{\n+\t  switch_to_inferior_no_thread (inf);\n+\n+\t  if (!target_has_execution)\n+\t    continue;\n+\n+\t  process_stratum_target *proc_target\n+\t    = current_inferior ()->process_target();\n+\n+\t  if (!target_is_non_stop_p ())\n+\t    first_not_non_stop = inf;\n+\n+\t  if (first_connection == nullptr)\n+\t    first_connection = proc_target;\n+\t  else if (first_connection != proc_target\n+\t\t   && first_not_non_stop != nullptr)\n+\t    {\n+\t      switch_to_inferior_no_thread (first_not_non_stop);\n+\n+\t      proc_target = current_inferior ()->process_target();\n+\n+\t      error (_(\"Connection %d (%s) does not support \"\n+\t\t       \"multi-target resumption.\"),\n+\t\t     proc_target->connection_number,\n+\t\t     make_target_connection_string (proc_target).c_str ());\n+\t    }\n+\t}\n+    }\n+}\n+\n /* Basic routine for continuing the program in various fashions.\n \n    ADDR is the address to resume at, or -1 for resume where stopped.\n@@ -2931,6 +2987,8 @@ proceed (CORE_ADDR addr, enum gdb_signal siggnal)\n   process_stratum_target *resume_target\n     = user_visible_resume_target (resume_ptid);\n \n+  check_multi_target_resumption (resume_target);\n+\n   if (addr == (CORE_ADDR) -1)\n     {\n       if (pc == cur_thr->suspend.stop_pc"
    },
    {
      "sha": "c8c63ab375e26dae85449f932e5f8952df3574e7",
      "filename": "gdb/target-connection.c",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da/gdb/target-connection.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da/gdb/target-connection.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-connection.c?ref=2f4fcf00399bc0ad5a4fed6b530128e8be4f40da",
      "patch": "@@ -53,12 +53,9 @@ connection_list_remove (process_stratum_target *t)\n   t->connection_number = 0;\n }\n \n-/* Make a target connection string for T.  This is usually T's\n-   shortname, but it includes the result of\n-   process_stratum_target::connection_string() too if T supports\n-   it.  */\n+/* See target-connection.h.  */\n \n-static std::string\n+std::string\n make_target_connection_string (process_stratum_target *t)\n {\n   if (t->connection_string () != NULL)"
    },
    {
      "sha": "f97e4761495d19b7c7cdf6c1244dfeee85cca57c",
      "filename": "gdb/target-connection.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da/gdb/target-connection.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f4fcf00399bc0ad5a4fed6b530128e8be4f40da/gdb/target-connection.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-connection.h?ref=2f4fcf00399bc0ad5a4fed6b530128e8be4f40da",
      "patch": "@@ -20,6 +20,8 @@\n #ifndef TARGET_CONNECTION_H\n #define TARGET_CONNECTION_H\n \n+#include <string>\n+\n struct process_stratum_target;\n \n /* Add a process target to the connection list, if not already\n@@ -29,4 +31,10 @@ void connection_list_add (process_stratum_target *t);\n /* Remove a process target from the connection list.  */\n void connection_list_remove (process_stratum_target *t);\n \n+/* Make a target connection string for T.  This is usually T's\n+   shortname, but it includes the result of\n+   process_stratum_target::connection_string() too if T supports\n+   it.  */\n+std::string make_target_connection_string (process_stratum_target *t);\n+\n #endif /* TARGET_CONNECTION_H */"
    }
  ]
}