{
  "sha": "8e61ebec34674445bd5ea8df627f5ba2afb57d79",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGU2MWViZWMzNDY3NDQ0NWJkNWVhOGRmNjI3ZjViYTJhZmI1N2Q3OQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:58Z"
    },
    "message": "Change type of argument to windows-nat.c:thread_rec\n\nwindows-nat.c:thread_rec accepts an integer parameter whose\ninterpretation depends on whether it is less than, equal to, or\ngreater than zero.  I found this confusing at times, so this patch\nreplaces it with an enum instead.\n\ngdb/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (enum thread_disposition_type): New.\n\t(thread_rec): Replace \"get_context\" parameter with \"disposition\";\n\tchange type.\n\t(windows_add_thread, windows_nat_target::fetch_registers)\n\t(windows_nat_target::store_registers, handle_exception)\n\t(windows_nat_target::resume, get_windows_debug_event)\n\t(windows_nat_target::get_tib_address)\n\t(windows_nat_target::thread_name)\n\t(windows_nat_target::thread_alive): Update.",
    "tree": {
      "sha": "093649d7179e55c07aa25bd26704d1d34466a926",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/093649d7179e55c07aa25bd26704d1d34466a926"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8e61ebec34674445bd5ea8df627f5ba2afb57d79",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e61ebec34674445bd5ea8df627f5ba2afb57d79",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8e61ebec34674445bd5ea8df627f5ba2afb57d79",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e61ebec34674445bd5ea8df627f5ba2afb57d79/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "98a032873232f9685dc7a5d632481c1488b9f1c5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/98a032873232f9685dc7a5d632481c1488b9f1c5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/98a032873232f9685dc7a5d632481c1488b9f1c5"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 55,
    "deletions": 20
  },
  "files": [
    {
      "sha": "071dce59caf4d89a056da8307008800b3cad5867",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e61ebec34674445bd5ea8df627f5ba2afb57d79/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e61ebec34674445bd5ea8df627f5ba2afb57d79/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8e61ebec34674445bd5ea8df627f5ba2afb57d79",
      "patch": "@@ -1,3 +1,15 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (enum thread_disposition_type): New.\n+\t(thread_rec): Replace \"get_context\" parameter with \"disposition\";\n+\tchange type.\n+\t(windows_add_thread, windows_nat_target::fetch_registers)\n+\t(windows_nat_target::store_registers, handle_exception)\n+\t(windows_nat_target::resume, get_windows_debug_event)\n+\t(windows_nat_target::get_tib_address)\n+\t(windows_nat_target::thread_name)\n+\t(windows_nat_target::thread_alive): Update.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* windows-nat.c (thread_rec): Use windows_thread_info::suspend."
    },
    {
      "sha": "24841fd1f27d54d48fe72301b056b65209a8674d",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 43,
      "deletions": 20,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e61ebec34674445bd5ea8df627f5ba2afb57d79/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e61ebec34674445bd5ea8df627f5ba2afb57d79/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=8e61ebec34674445bd5ea8df627f5ba2afb57d79",
      "patch": "@@ -404,22 +404,44 @@ check (BOOL ok, const char *file, int line)\n \t\t     (unsigned) GetLastError ());\n }\n \n-/* Find a thread record given a thread id.  If GET_CONTEXT is not 0,\n-   then also retrieve the context for this thread.  If GET_CONTEXT is\n-   negative, then don't suspend the thread.  */\n+/* Possible values to pass to 'thread_rec'.  */\n+enum thread_disposition_type\n+{\n+  /* Do not invalidate the thread's context, and do not suspend the\n+     thread.  */\n+  DONT_INVALIDATE_CONTEXT,\n+  /* Invalidate the context, but do not suspend the thread.  */\n+  DONT_SUSPEND,\n+  /* Invalidate the context and suspend the thread.  */\n+  INVALIDATE_CONTEXT\n+};\n+\n+/* Find a thread record given a thread id.  THREAD_DISPOSITION\n+   controls whether the thread is suspended, and whether the context\n+   is invalidated.  */\n static windows_thread_info *\n-thread_rec (DWORD id, int get_context)\n+thread_rec (DWORD id, enum thread_disposition_type disposition)\n {\n   for (windows_thread_info *th : thread_list)\n     if (th->tid == id)\n       {\n-\tif (!th->suspended && get_context)\n+\tif (!th->suspended)\n \t  {\n-\t    if (get_context > 0 && id != current_event.dwThreadId)\n-\t      th->suspend ();\n-\t    else if (get_context < 0)\n-\t      th->suspended = -1;\n-\t    th->reload_context = true;\n+\t    switch (disposition)\n+\t      {\n+\t      case DONT_INVALIDATE_CONTEXT:\n+\t\t/* Nothing.  */\n+\t\tbreak;\n+\t      case INVALIDATE_CONTEXT:\n+\t\tif (id != current_event.dwThreadId)\n+\t\t  th->suspend ();\n+\t\tth->reload_context = true;\n+\t\tbreak;\n+\t      case DONT_SUSPEND:\n+\t\tth->reload_context = true;\n+\t\tth->suspended = -1;\n+\t\tbreak;\n+\t      }\n \t  }\n \treturn th;\n       }\n@@ -445,7 +467,7 @@ windows_add_thread (ptid_t ptid, HANDLE h, void *tlb, bool main_thread_p)\n \n   id = ptid.lwp ();\n \n-  if ((th = thread_rec (id, FALSE)))\n+  if ((th = thread_rec (id, DONT_INVALIDATE_CONTEXT)))\n     return th;\n \n   CORE_ADDR base = (CORE_ADDR) (uintptr_t) tlb;\n@@ -617,7 +639,7 @@ void\n windows_nat_target::fetch_registers (struct regcache *regcache, int r)\n {\n   DWORD tid = regcache->ptid ().lwp ();\n-  windows_thread_info *th = thread_rec (tid, TRUE);\n+  windows_thread_info *th = thread_rec (tid, INVALIDATE_CONTEXT);\n \n   /* Check if TH exists.  Windows sometimes uses a non-existent\n      thread id in its events.  */\n@@ -713,7 +735,7 @@ void\n windows_nat_target::store_registers (struct regcache *regcache, int r)\n {\n   DWORD tid = regcache->ptid ().lwp ();\n-  windows_thread_info *th = thread_rec (tid, TRUE);\n+  windows_thread_info *th = thread_rec (tid, INVALIDATE_CONTEXT);\n \n   /* Check if TH exists.  Windows sometimes uses a non-existent\n      thread id in its events.  */\n@@ -1253,7 +1275,7 @@ handle_exception (struct target_waitstatus *ourstatus)\n   ourstatus->kind = TARGET_WAITKIND_STOPPED;\n \n   /* Record the context of the current thread.  */\n-  thread_rec (current_event.dwThreadId, -1);\n+  thread_rec (current_event.dwThreadId, DONT_SUSPEND);\n \n   switch (code)\n     {\n@@ -1383,7 +1405,7 @@ handle_exception (struct target_waitstatus *ourstatus)\n \t  if (named_thread_id == (DWORD) -1)\n \t    named_thread_id = current_event.dwThreadId;\n \n-\t  named_thread = thread_rec (named_thread_id, 0);\n+\t  named_thread = thread_rec (named_thread_id, DONT_INVALIDATE_CONTEXT);\n \t  if (named_thread != NULL)\n \t    {\n \t      int thread_name_len;\n@@ -1588,7 +1610,7 @@ windows_nat_target::resume (ptid_t ptid, int step, enum gdb_signal sig)\n \t       ptid.pid (), (unsigned) ptid.lwp (), step, sig));\n \n   /* Get context for currently selected thread.  */\n-  th = thread_rec (inferior_ptid.lwp (), FALSE);\n+  th = thread_rec (inferior_ptid.lwp (), DONT_INVALIDATE_CONTEXT);\n   if (th)\n     {\n #ifdef __x86_64__\n@@ -1888,7 +1910,7 @@ windows_nat_target::get_windows_debug_event (int pid,\n       inferior_ptid = ptid_t (current_event.dwProcessId, thread_id, 0);\n       current_thread = th;\n       if (!current_thread)\n-\tcurrent_thread = thread_rec (thread_id, TRUE);\n+\tcurrent_thread = thread_rec (thread_id, INVALIDATE_CONTEXT);\n     }\n \n out:\n@@ -3350,7 +3372,7 @@ windows_nat_target::get_tib_address (ptid_t ptid, CORE_ADDR *addr)\n {\n   windows_thread_info *th;\n \n-  th = thread_rec (ptid.lwp (), 0);\n+  th = thread_rec (ptid.lwp (), DONT_INVALIDATE_CONTEXT);\n   if (th == NULL)\n     return false;\n \n@@ -3371,7 +3393,7 @@ windows_nat_target::get_ada_task_ptid (long lwp, long thread)\n const char *\n windows_nat_target::thread_name (struct thread_info *thr)\n {\n-  return thread_rec (thr->ptid.lwp (), 0)->name.get ();\n+  return thread_rec (thr->ptid.lwp (), DONT_INVALIDATE_CONTEXT)->name.get ();\n }\n \n \n@@ -3535,7 +3557,8 @@ windows_nat_target::thread_alive (ptid_t ptid)\n   gdb_assert (ptid.lwp () != 0);\n   tid = ptid.lwp ();\n \n-  return WaitForSingleObject (thread_rec (tid, FALSE)->h, 0) != WAIT_OBJECT_0;\n+  return (WaitForSingleObject (thread_rec (tid, DONT_INVALIDATE_CONTEXT)->h, 0)\n+\t  != WAIT_OBJECT_0);\n }\n \n void _initialize_check_for_gdb_ini ();"
    }
  ]
}