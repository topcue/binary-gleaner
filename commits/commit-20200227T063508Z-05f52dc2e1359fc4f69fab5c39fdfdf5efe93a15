{
  "sha": "05f52dc2e1359fc4f69fab5c39fdfdf5efe93a15",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDVmNTJkYzJlMTM1OWZjNGY2OWZhYjVjMzlmZGZkZjVlZmU5M2ExNQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-27T03:41:35Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-02-27T06:35:08Z"
    },
    "message": "_bfd_xcoff_read_ar_hdr tidy\n\n\t* coff-rs6000.c (_bfd_xcoff_read_ar_hdr): Put all data in one\n\tmalloc'd block.",
    "tree": {
      "sha": "50c9779e73202841b6ecd33b3bd50949ac06b2fa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/50c9779e73202841b6ecd33b3bd50949ac06b2fa"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/05f52dc2e1359fc4f69fab5c39fdfdf5efe93a15",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05f52dc2e1359fc4f69fab5c39fdfdf5efe93a15",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/05f52dc2e1359fc4f69fab5c39fdfdf5efe93a15",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05f52dc2e1359fc4f69fab5c39fdfdf5efe93a15/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ff69a8949bb65c9eb64ea03ee1492902c2620c8c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ff69a8949bb65c9eb64ea03ee1492902c2620c8c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ff69a8949bb65c9eb64ea03ee1492902c2620c8c"
    }
  ],
  "stats": {
    "total": 53,
    "additions": 22,
    "deletions": 31
  },
  "files": [
    {
      "sha": "e5cf5e125e25d13a3925b0f80da785c48c9294b7",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05f52dc2e1359fc4f69fab5c39fdfdf5efe93a15/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05f52dc2e1359fc4f69fab5c39fdfdf5efe93a15/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=05f52dc2e1359fc4f69fab5c39fdfdf5efe93a15",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-27  Alan Modra  <amodra@gmail.com>\n+\n+\t* coff-rs6000.c (_bfd_xcoff_read_ar_hdr): Put all data in one\n+\tmalloc'd block.\n+\n 2020-02-27  Alan Modra  <amodra@gmail.com>\n \n \t* bfd.c (bfd_stat_arch_elt): Use vector of containing archive,"
    },
    {
      "sha": "1cc708ce1b34071a0dbbff02331cad2c43f4929d",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 17,
      "deletions": 31,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05f52dc2e1359fc4f69fab5c39fdfdf5efe93a15/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05f52dc2e1359fc4f69fab5c39fdfdf5efe93a15/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=05f52dc2e1359fc4f69fab5c39fdfdf5efe93a15",
      "patch": "@@ -1491,32 +1491,23 @@ _bfd_xcoff_read_ar_hdr (bfd *abfd)\n {\n   bfd_size_type namlen;\n   struct areltdata *ret;\n-  bfd_size_type amt = sizeof (struct areltdata);\n-\n-  ret = (struct areltdata *) bfd_zmalloc (amt);\n-  if (ret == NULL)\n-    return NULL;\n+  bfd_size_type amt;\n \n   if (! xcoff_big_format_p (abfd))\n     {\n       struct xcoff_ar_hdr hdr;\n       struct xcoff_ar_hdr *hdrp;\n \n-      if (bfd_bread (&hdr, (bfd_size_type) SIZEOF_AR_HDR, abfd)\n-\t  != SIZEOF_AR_HDR)\n-\t{\n-\t  free (ret);\n-\t  return NULL;\n-\t}\n+      if (bfd_bread (&hdr, SIZEOF_AR_HDR, abfd) != SIZEOF_AR_HDR)\n+\treturn NULL;\n \n       GET_VALUE_IN_FIELD (namlen, hdr.namlen, 10);\n-      amt = SIZEOF_AR_HDR + namlen + 1;\n-      hdrp = (struct xcoff_ar_hdr *) bfd_alloc (abfd, amt);\n-      if (hdrp == NULL)\n-\t{\n-\t  free (ret);\n-\t  return NULL;\n-\t}\n+      amt = sizeof (struct areltdata) + SIZEOF_AR_HDR + namlen + 1;\n+      ret = (struct areltdata *) bfd_malloc (amt);\n+      if (ret == NULL)\n+\treturn ret;\n+\n+      hdrp = (struct xcoff_ar_hdr *) (ret + 1);\n       memcpy (hdrp, &hdr, SIZEOF_AR_HDR);\n       if (bfd_bread ((char *) hdrp + SIZEOF_AR_HDR, namlen, abfd) != namlen)\n \t{\n@@ -1534,21 +1525,16 @@ _bfd_xcoff_read_ar_hdr (bfd *abfd)\n       struct xcoff_ar_hdr_big hdr;\n       struct xcoff_ar_hdr_big *hdrp;\n \n-      if (bfd_bread (&hdr, (bfd_size_type) SIZEOF_AR_HDR_BIG, abfd)\n-\t  != SIZEOF_AR_HDR_BIG)\n-\t{\n-\t  free (ret);\n-\t  return NULL;\n-\t}\n+      if (bfd_bread (&hdr, SIZEOF_AR_HDR_BIG, abfd) != SIZEOF_AR_HDR_BIG)\n+\treturn NULL;\n \n       GET_VALUE_IN_FIELD (namlen, hdr.namlen, 10);\n-      amt = SIZEOF_AR_HDR_BIG + namlen + 1;\n-      hdrp = (struct xcoff_ar_hdr_big *) bfd_alloc (abfd, amt);\n-      if (hdrp == NULL)\n-\t{\n-\t  free (ret);\n-\t  return NULL;\n-\t}\n+      amt = sizeof (struct areltdata) + SIZEOF_AR_HDR_BIG + namlen + 1;\n+      ret = (struct areltdata *) bfd_malloc (amt);\n+      if (ret == NULL)\n+\treturn ret;\n+\n+      hdrp = (struct xcoff_ar_hdr_big *) (ret + 1);\n       memcpy (hdrp, &hdr, SIZEOF_AR_HDR_BIG);\n       if (bfd_bread ((char *) hdrp + SIZEOF_AR_HDR_BIG, namlen, abfd) != namlen)\n \t{"
    }
  ]
}