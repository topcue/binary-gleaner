{
  "sha": "0570503dd31bc20294e228339fcbdd39b19608cc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDU3MDUwM2RkMzFiYzIwMjk0ZTIyODMzOWZjYmRkMzliMTk2MDhjYw==",
  "commit": {
    "author": {
      "name": "Pedro Franco de Carvalho",
      "email": "pedromfc@linux.ibm.com",
      "date": "2019-04-05T17:19:08Z"
    },
    "committer": {
      "name": "Pedro Franco de Carvalho",
      "email": "pedromfc@linux.ibm.com",
      "date": "2019-04-05T17:19:08Z"
    },
    "message": "Use linux_get_auxv to get AT_PHDR in the PPC stub\n\nThis patch fixes a build error due to a call to ppc_get_auxv that was\nleft over after linux_get_hwcap and linux_get_hwcap2 were introduced\nin:\n\n974c89e0882ddb03e294eca76a9e3d3bef90eacf gdbserver: Add\nlinux_get_hwcap\n\nBecause the missing call fetched AT_PHDR and not AT_HWCAP,\nlinux_get_auxv is now visible.\n\nThis use also required ppc_get_auxv to return a status variable\nindicating that the AT_PHDR entry was not found separately from the\nactual value of of the auxv entry.  Therefore, the new linux_get_auxv\nfunction is changed to return a status variable and write the entry\nvalue to a pointer passed as an argument.\n\nNote that linux_get_hwcap and linux_get_hwcap2 still use the return\nvalue as both an indicator of that the entry wasn't found and as the\nactual value of the entry.\n\ngdb/gdbserver/ChangeLog:\n2019-04-05  Pedro Franco de Carvalho  <pedromfc@linux.ibm.com>\n\n\t* linux-low.c (linux_get_auxv): Remove static.  Return auxv entry\n\tvalue in argument pointer, return 1 if the entry is found and 0\n\totherwise.  Move comment.\n\t(linux_get_hwcap, linux_get_hwcap2): Use modified linux_get_auxv.\n\t* linux-low.h (linux_get_auxv): Declare.\n\t* linux-ppc-low.c (is_elfv2_inferior): Use linux_get_auxv.",
    "tree": {
      "sha": "bf66af4f818390674ca761e0bbf376d59abfb092",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bf66af4f818390674ca761e0bbf376d59abfb092"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0570503dd31bc20294e228339fcbdd39b19608cc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0570503dd31bc20294e228339fcbdd39b19608cc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0570503dd31bc20294e228339fcbdd39b19608cc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0570503dd31bc20294e228339fcbdd39b19608cc/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "227a9e65b91958cb414ade82c614717579d8849e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/227a9e65b91958cb414ade82c614717579d8849e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/227a9e65b91958cb414ade82c614717579d8849e"
    }
  ],
  "stats": {
    "total": 53,
    "additions": 41,
    "deletions": 12
  },
  "files": [
    {
      "sha": "3871ca098ae27e3e4b2275f75a18529ebca3e979",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0570503dd31bc20294e228339fcbdd39b19608cc/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0570503dd31bc20294e228339fcbdd39b19608cc/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=0570503dd31bc20294e228339fcbdd39b19608cc",
      "patch": "@@ -1,3 +1,12 @@\n+2019-04-05  Pedro Franco de Carvalho  <pedromfc@linux.ibm.com>\n+\n+\t* linux-low.c (linux_get_auxv): Remove static.  Return auxv entry\n+\tvalue in argument pointer, return 1 if the entry is found and 0\n+\totherwise.  Move comment.\n+\t(linux_get_hwcap, linux_get_hwcap2): Use modified linux_get_auxv.\n+\t* linux-low.h (linux_get_auxv): Declare.\n+\t* linux-ppc-low.c (is_elfv2_inferior): Use linux_get_auxv.\n+\n 2019-04-05  Tom Tromey  <tromey@adacore.com>\n \n \t* server.c (gdbserver_usage): Use upper-case for metasyntactic"
    },
    {
      "sha": "65919c326256230a01082e3acf1a10c0b16cd2bf",
      "filename": "gdb/gdbserver/linux-low.c",
      "status": "modified",
      "additions": 19,
      "deletions": 10,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0570503dd31bc20294e228339fcbdd39b19608cc/gdb/gdbserver/linux-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0570503dd31bc20294e228339fcbdd39b19608cc/gdb/gdbserver/linux-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-low.c?ref=0570503dd31bc20294e228339fcbdd39b19608cc",
      "patch": "@@ -7427,11 +7427,10 @@ linux_get_pc_64bit (struct regcache *regcache)\n   return pc;\n }\n \n-/* Fetch the entry MATCH from the auxv vector, where entries are length\n-   WORDSIZE.  If no entry was found, return zero.  */\n+/* See linux-low.h.  */\n \n-static CORE_ADDR\n-linux_get_auxv (int wordsize, CORE_ADDR match)\n+int\n+linux_get_auxv (int wordsize, CORE_ADDR match, CORE_ADDR *valp)\n {\n   gdb_byte *data = (gdb_byte *) alloca (2 * wordsize);\n   int offset = 0;\n@@ -7442,15 +7441,21 @@ linux_get_auxv (int wordsize, CORE_ADDR match)\n     {\n       if (wordsize == 4)\n \t{\n-\t  uint32_t *data_p = (uint32_t *)data;\n+\t  uint32_t *data_p = (uint32_t *) data;\n \t  if (data_p[0] == match)\n-\t    return data_p[1];\n+\t    {\n+\t      *valp = data_p[1];\n+\t      return 1;\n+\t    }\n \t}\n       else\n \t{\n-\t  uint64_t *data_p = (uint64_t *)data;\n+\t  uint64_t *data_p = (uint64_t *) data;\n \t  if (data_p[0] == match)\n-\t    return data_p[1];\n+\t    {\n+\t      *valp = data_p[1];\n+\t      return 1;\n+\t    }\n \t}\n \n       offset += 2 * wordsize;\n@@ -7464,15 +7469,19 @@ linux_get_auxv (int wordsize, CORE_ADDR match)\n CORE_ADDR\n linux_get_hwcap (int wordsize)\n {\n-  return linux_get_auxv (wordsize, AT_HWCAP);\n+  CORE_ADDR hwcap = 0;\n+  linux_get_auxv (wordsize, AT_HWCAP, &hwcap);\n+  return hwcap;\n }\n \n /* See linux-low.h.  */\n \n CORE_ADDR\n linux_get_hwcap2 (int wordsize)\n {\n-  return linux_get_auxv (wordsize, AT_HWCAP2);\n+  CORE_ADDR hwcap2 = 0;\n+  linux_get_auxv (wordsize, AT_HWCAP2, &hwcap2);\n+  return hwcap2;\n }\n \n static struct target_ops linux_target_ops = {"
    },
    {
      "sha": "d5d074efc509981919e05724888cac71263855a2",
      "filename": "gdb/gdbserver/linux-low.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0570503dd31bc20294e228339fcbdd39b19608cc/gdb/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0570503dd31bc20294e228339fcbdd39b19608cc/gdb/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-low.h?ref=0570503dd31bc20294e228339fcbdd39b19608cc",
      "patch": "@@ -435,6 +435,14 @@ bool thread_db_thread_handle (ptid_t ptid, gdb_byte **handle, int *handle_len);\n \n extern int have_ptrace_getregset;\n \n+/* Search for the value with type MATCH in the auxv vector with\n+   entries of length WORDSIZE bytes.  If found, store the value in\n+   *VALP and return 1.  If not found or if there is an error, return\n+   0.  */\n+\n+int linux_get_auxv (int wordsize, CORE_ADDR match,\n+\t\t    CORE_ADDR *valp);\n+\n /* Fetch the AT_HWCAP entry from the auxv vector, where entries are length\n    WORDSIZE.  If no entry was found, return zero.  */\n "
    },
    {
      "sha": "f17f05a0a327e19f5eddfd930b51884a6693397b",
      "filename": "gdb/gdbserver/linux-ppc-low.c",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0570503dd31bc20294e228339fcbdd39b19608cc/gdb/gdbserver/linux-ppc-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0570503dd31bc20294e228339fcbdd39b19608cc/gdb/gdbserver/linux-ppc-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-ppc-low.c?ref=0570503dd31bc20294e228339fcbdd39b19608cc",
      "patch": "@@ -1107,10 +1107,13 @@ is_elfv2_inferior (void)\n #else\n   const int def_res = 0;\n #endif\n-  unsigned long phdr;\n+  CORE_ADDR phdr;\n   Elf64_Ehdr ehdr;\n \n-  if (!ppc_get_auxv (AT_PHDR, &phdr))\n+  const struct target_desc *tdesc = current_process ()->tdesc;\n+  int wordsize = register_size (tdesc, 0);\n+\n+  if (!linux_get_auxv (wordsize, AT_PHDR, &phdr))\n     return def_res;\n \n   /* Assume ELF header is at the beginning of the page where program headers"
    }
  ]
}