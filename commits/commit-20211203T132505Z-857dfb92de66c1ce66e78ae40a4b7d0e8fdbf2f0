{
  "sha": "857dfb92de66c1ce66e78ae40a4b7d0e8fdbf2f0",
  "node_id": "C_kwDOANOeidoAKDg1N2RmYjkyZGU2NmMxY2U2NmU3OGFlNDBhNGI3ZDBlOGZkYmYyZjA",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-12-02T01:40:01Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-12-03T13:25:05Z"
    },
    "message": "gdb: return *this in target_waitstatus setters\n\nWhile playing with some code creating target_waitstatus objects, I was\nmildly annoyed by the fact that we can't just return a new\ntarget_waitstatus object.  We have to do:\n\n    target_waitstatus ws;\n    ws.set_exited (123);\n    return ws;\n\nMake the setters return the \"this\" object as a reference, such that it's\npossible to do:\n\n    return target_waitstatus ().set_exited (123);\n\nI initially thought of adding static creation functions, which you would\nuse like:\n\n    return target_waitstatus::make_exited (123);\n\nHowever, making the setters return a reference to the object achieves\npretty much the same thing, with less new code.\n\nChange-Id: I45159b7f9fcd9db5b20603480e323020b14ed147",
    "tree": {
      "sha": "d8d1508737a094e8519732a7a3faed3370520ed9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d8d1508737a094e8519732a7a3faed3370520ed9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/857dfb92de66c1ce66e78ae40a4b7d0e8fdbf2f0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/857dfb92de66c1ce66e78ae40a4b7d0e8fdbf2f0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/857dfb92de66c1ce66e78ae40a4b7d0e8fdbf2f0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/857dfb92de66c1ce66e78ae40a4b7d0e8fdbf2f0/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ce1a6f421d29aad57f5f25fe2b8a929523c3de27",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce1a6f421d29aad57f5f25fe2b8a929523c3de27",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ce1a6f421d29aad57f5f25fe2b8a929523c3de27"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 32,
    "deletions": 16
  },
  "files": [
    {
      "sha": "72fa5fb4f7724d7dc95052ae6a637295a9916950",
      "filename": "gdb/target/waitstatus.h",
      "status": "modified",
      "additions": 32,
      "deletions": 16,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/857dfb92de66c1ce66e78ae40a4b7d0e8fdbf2f0/gdb/target/waitstatus.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/857dfb92de66c1ce66e78ae40a4b7d0e8fdbf2f0/gdb/target/waitstatus.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target/waitstatus.h?ref=857dfb92de66c1ce66e78ae40a4b7d0e8fdbf2f0",
      "patch": "@@ -219,109 +219,125 @@ struct target_waitstatus\n \n   /* Setters: set the wait status kind plus any associated data.  */\n \n-  void set_exited (int exit_status)\n+  target_waitstatus &set_exited (int exit_status)\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_EXITED;\n     m_value.exit_status = exit_status;\n+    return *this;\n   }\n \n-  void set_stopped (gdb_signal sig)\n+  target_waitstatus &set_stopped (gdb_signal sig)\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_STOPPED;\n     m_value.sig = sig;\n+    return *this;\n   }\n \n-  void set_signalled (gdb_signal sig)\n+  target_waitstatus &set_signalled (gdb_signal sig)\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_SIGNALLED;\n     m_value.sig = sig;\n+    return *this;\n   }\n \n-  void set_loaded ()\n+  target_waitstatus &set_loaded ()\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_LOADED;\n+    return *this;\n   }\n \n-  void set_forked (ptid_t child_ptid)\n+  target_waitstatus &set_forked (ptid_t child_ptid)\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_FORKED;\n     m_value.child_ptid = child_ptid;\n+    return *this;\n   }\n \n-  void set_vforked (ptid_t child_ptid)\n+  target_waitstatus &set_vforked (ptid_t child_ptid)\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_VFORKED;\n     m_value.child_ptid = child_ptid;\n+    return *this;\n   }\n \n-  void set_execd (gdb::unique_xmalloc_ptr<char> execd_pathname)\n+  target_waitstatus &set_execd (gdb::unique_xmalloc_ptr<char> execd_pathname)\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_EXECD;\n     m_value.execd_pathname = execd_pathname.release ();\n+    return *this;\n   }\n \n-  void set_vfork_done ()\n+  target_waitstatus &set_vfork_done ()\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_VFORK_DONE;\n+    return *this;\n   }\n \n-  void set_syscall_entry (int syscall_number)\n+  target_waitstatus &set_syscall_entry (int syscall_number)\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_SYSCALL_ENTRY;\n     m_value.syscall_number = syscall_number;\n+    return *this;\n   }\n \n-  void set_syscall_return (int syscall_number)\n+  target_waitstatus &set_syscall_return (int syscall_number)\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_SYSCALL_RETURN;\n     m_value.syscall_number = syscall_number;\n+    return *this;\n   }\n \n-  void set_spurious ()\n+  target_waitstatus &set_spurious ()\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_SPURIOUS;\n+    return *this;\n   }\n \n-  void set_ignore ()\n+  target_waitstatus &set_ignore ()\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_IGNORE;\n+    return *this;\n   }\n \n-  void set_no_history ()\n+  target_waitstatus &set_no_history ()\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_NO_HISTORY;\n+    return *this;\n   }\n \n-  void set_no_resumed ()\n+  target_waitstatus &set_no_resumed ()\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_NO_RESUMED;\n+    return *this;\n   }\n \n-  void set_thread_created ()\n+  target_waitstatus &set_thread_created ()\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_THREAD_CREATED;\n+    return *this;\n   }\n \n-  void set_thread_exited (int exit_status)\n+  target_waitstatus &set_thread_exited (int exit_status)\n   {\n     this->reset ();\n     m_kind = TARGET_WAITKIND_THREAD_EXITED;\n     m_value.exit_status = exit_status;\n+    return *this;\n   }\n \n   /* Get the kind of this wait status.  */"
    }
  ]
}