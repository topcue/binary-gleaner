{
  "sha": "f3fb2519e629bf8533108c2b7b108e6db98c02f2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjNmYjI1MTllNjI5YmY4NTMzMTA4YzJiN2IxMDhlNmRiOThjMDJmMg==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-04-28T12:40:50Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-10-31T22:35:17Z"
    },
    "message": "Test the convenience functions $_gdb_setting and $_gdb_setting_str.\n\ngdb/testsuite/ChangeLog\n2019-10-31  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* gdb.base/setshow.exp: Test $_gdb_setting and $_gdb_setting_str.\n\t* gdb.base/settings.exp: Test all settings types using\n\t$_gdb_maint_setting and $_gdb_maint_setting_str in proc_show_setting,\n\tthat now verifies that the value of \"maint show\" is the same as\n\treturned by the settings functions.  Test the type of the\n\tmaintenance settings.\n\t* gdb.base/default.exp: Update show_conv_list.",
    "tree": {
      "sha": "2c93b45562b3df31304309ecd25923e96d949ed5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2c93b45562b3df31304309ecd25923e96d949ed5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f3fb2519e629bf8533108c2b7b108e6db98c02f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f3fb2519e629bf8533108c2b7b108e6db98c02f2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f3fb2519e629bf8533108c2b7b108e6db98c02f2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f3fb2519e629bf8533108c2b7b108e6db98c02f2/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "9ad9b77d64920d3113a9e7ab9f022eb5a45cd49e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9ad9b77d64920d3113a9e7ab9f022eb5a45cd49e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9ad9b77d64920d3113a9e7ab9f022eb5a45cd49e"
    }
  ],
  "stats": {
    "total": 189,
    "additions": 179,
    "deletions": 10
  },
  "files": [
    {
      "sha": "510a1e01385ac34decaed01602afda8a224fa9b1",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3fb2519e629bf8533108c2b7b108e6db98c02f2/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3fb2519e629bf8533108c2b7b108e6db98c02f2/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f3fb2519e629bf8533108c2b7b108e6db98c02f2",
      "patch": "@@ -1,3 +1,13 @@\n+2019-10-31  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* gdb.base/setshow.exp: Test $_gdb_setting and $_gdb_setting_str.\n+\t* gdb.base/settings.exp: Test all settings types using\n+\t$_gdb_maint_setting and $_gdb_maint_setting_str in proc_show_setting,\n+\tthat now verifies that the value of \"maint show\" is the same as\n+\treturned by the settings functions.  Test the type of the\n+\tmaintenance settings.\n+\t* gdb.base/default.exp: Update show_conv_list.\n+\n 2019-10-31  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.arch/amd64-disp-step-avx.exp: Drop superfluous 3rd argument to"
    },
    {
      "sha": "82ed4be17ca9082536bfde0c722d666403ef6834",
      "filename": "gdb/testsuite/gdb.base/default.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3fb2519e629bf8533108c2b7b108e6db98c02f2/gdb/testsuite/gdb.base/default.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3fb2519e629bf8533108c2b7b108e6db98c02f2/gdb/testsuite/gdb.base/default.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/default.exp?ref=f3fb2519e629bf8533108c2b7b108e6db98c02f2",
      "patch": "@@ -604,6 +604,10 @@ set show_conv_list \\\n \t{$_cimag = <internal function _cimag>} \\\n \t{$_creal = <internal function _creal>} \\\n \t{$_isvoid = <internal function _isvoid>} \\\n+\t{$_gdb_maint_setting_str = <internal function _gdb_maint_setting_str>} \\\n+\t{$_gdb_maint_setting = <internal function _gdb_maint_setting>} \\\n+\t{$_gdb_setting_str = <internal function _gdb_setting_str>} \\\n+\t{$_gdb_setting = <internal function _gdb_setting>} \\\n \t{$_gdb_major = 9} \\\n \t{$_gdb_minor = 1} \\\n \t{$_shell_exitsignal = void} \\"
    },
    {
      "sha": "5316b48509353dacd5def28095a705306cc110fb",
      "filename": "gdb/testsuite/gdb.base/setshow.exp",
      "status": "modified",
      "additions": 71,
      "deletions": 3,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3fb2519e629bf8533108c2b7b108e6db98c02f2/gdb/testsuite/gdb.base/setshow.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3fb2519e629bf8533108c2b7b108e6db98c02f2/gdb/testsuite/gdb.base/setshow.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/setshow.exp?ref=f3fb2519e629bf8533108c2b7b108e6db98c02f2",
      "patch": "@@ -84,13 +84,19 @@ gdb_test \"show annotate\" \"Annotation_level is 0..*\"  \"show annotate (0)\"\n #test annotation_level 0\n gdb_test \"info line 1\" \"Line 1 of .* is at address .* but contains no code.*\"  \"annotation_level 0\" \n \n+gdb_test \"show args\" \"Argument list to give program being debugged when it is started is \\\"\\\"\\.\"\n+gdb_test \"p \\$_gdb_setting_str(\\\"args\\\")\" \" = \\\"\\\"\"\n+\n gdb_test_no_output \"set args ~\"\n gdb_test \"show args\" \"Argument list to give program being debugged when it is started is \\\"~\\\"..*\" \\\n     \"show args ~\"\n #test set args\n gdb_test_no_output \"set args foo bar blup baz bubble\" \"set args\" \n #test show args\n gdb_test \"show args\" \"Argument list to give program being debugged when it is started is \\\"foo bar blup baz bubble\\\"..*\" \"show args\"\n+gdb_test \"p \\$_gdb_setting(\\\"args\\\")\" \" = \\\"foo bar blup baz bubble\\\"\" \\\n+    \"_gdb_setting args\"\n+\n \n # Don't test if we can't pass args or if we're using a stub.\n if { !$use_gdb_stub && ![target_info exists noargs] } {\n@@ -100,32 +106,80 @@ if { !$use_gdb_stub && ![target_info exists noargs] } {\n     gdb_test \"run\" \"Starting program:.*foo bar blup baz bubble.*\" \"passing args\"\n }\n #test set check range on\n-gdb_test \"set check range on\" \".*\" \"set check range on\" \n+# Note: the below might produce a warning, so match anything. \n+gdb_test \"set check range on\" \"\"\n+\n+gdb_test \"p \\$_gdb_setting(\\\"check range\\\")\" \" = \\\"on\\\"\" \\\n+    \"_gdb_setting check range on\"\n #test show check range on\n gdb_test \"show check range\" \"Range checking is \\\"on\\\"\\..*\" \"show check range (on)\" \n #test set check range off with trailing space\n gdb_test_no_output \"set check range off \" \"set check range off\" \n #test show check range off\n gdb_test \"show check range\" \"Range checking is \\\"off\\\"\\..*\" \"show check range (off)\" \n+gdb_test \"p \\$_gdb_setting(\\\"check range\\\")\" \" = \\\"off\\\"\" \\\n+    \"_gdb_setting check range off\"\n #test set check range auto\n gdb_test_no_output \"set check range auto\" \"set check range auto\" \n #test show check range auto\n gdb_test \"show check range\" \"Range checking is \\\"auto; currently .*\" \"show check range (auto)\"\n+gdb_test \"p \\$_gdb_setting(\\\"check range\\\")\" \" = \\\"auto\\\"\" \\\n+    \"_gdb_setting check range auto\"\n \n # Test set check type on\n-gdb_test \"set check type on\" \".*\" \"set check type on\"\n+gdb_test_no_output \"set check type on\"\n \n # Test show check type on\n gdb_test \"show check type\" \"Strict type checking is on\\..*\" \\\n     \"show check type (on)\"\n+gdb_test \"p \\$_gdb_setting_str(\\\"check type\\\")\" \" = \\\"on\\\"\" \\\n+    \"_gdb_setting_str check type on\"\n+gdb_test \"p \\$_gdb_setting(\\\"check type\\\")\" \" = 1\" \\\n+    \"_gdb_setting check type on 1\"\n \n # Test set check type off with trailing space\n gdb_test_no_output \"set check type off \" \"set check type off\"\n+gdb_test \"p \\$_gdb_setting_str(\\\"check type\\\")\" \" = \\\"off\\\"\" \\\n+    \"_gdb_setting_str check type off\"\n+gdb_test \"p \\$_gdb_setting(\\\"check type\\\")\" \" = 0\" \\\n+    \"_gdb_setting check type off 0\"\n \n # Test show check type off\n gdb_test \"show check type\" \"Strict type checking is off\\..*\" \\\n     \"show check type (off)\"\n \n+#test set breakpoint pending\n+\n+#test set breakpoint pending on\n+gdb_test_no_output \"set breakpoint pending on\"\n+gdb_test \"p \\$_gdb_setting_str(\\\"breakpoint pending\\\")\" \" = \\\"on\\\"\" \\\n+    \"_gdb_setting_str breakpoint pending on\"\n+gdb_test \"p \\$_gdb_setting(\\\"breakpoint pending\\\")\" \" = 1\" \\\n+    \"_gdb_setting breakpoint pending 1\"\n+\n+#test show breakpoint pending on\n+gdb_test \"show breakpoint pending\" \" is on\\..*\" \"show breakpoint pending on\"\n+\n+#test show breakpoint pending off\n+gdb_test_no_output \"set breakpoint pending off\"\n+gdb_test \"show breakpoint pending\" \" is off\\..*\" \"show breakpoint pending off\"\n+gdb_test \"p \\$_gdb_setting_str(\\\"breakpoint pending\\\")\" \" = \\\"off\\\"\" \\\n+    \"_gdb_setting_str breakpoint pending off\"\n+gdb_test \"p \\$_gdb_setting(\\\"breakpoint pending\\\")\" \" = 0\" \\\n+    \"_gdb_setting breakpoint pending 0\"\n+\n+#test set breakpoint pending auto\n+gdb_test_no_output \"set breakpoint pending auto\"\n+\n+#test show breakpoint pending auto\n+gdb_test \"show breakpoint pending\" \" is auto.*\" \"show breakpoint pending auto\"\n+gdb_test \"p \\$_gdb_setting_str(\\\"breakpoint pending\\\")\" \" = \\\"auto\\\"\" \\\n+    \"_gdb_setting_str breakpoint pending auto\"\n+gdb_test \"p \\$_gdb_setting(\\\"breakpoint pending\\\")\" \" = -1\" \\\n+    \"_gdb_setting breakpoint pending -1\"\n+\n+\n+\n #test set complaints 100\n gdb_test_no_output \"set complaints 100\" \"set complaints 100\" \n #test show complaints 100\n@@ -159,9 +213,17 @@ gdb_test \"show environment FOOBARBAZ\" \"FOOBARBAZ = grbxgrbxgrbx.*\"  \"show enviro\n gdb_test_no_output \"set height 100\" \"set height 100\" \n #test show height 100\n gdb_test \"show height\" \"Number of lines gdb thinks are in a page is 100..*\" \"show height\" \n+gdb_test \"p \\$_gdb_setting_str(\\\"height\\\")\" \" = \\\"100\\\"\" \\\n+    \"_gdb_setting_str height 100\"\n+gdb_test \"p \\$_gdb_setting(\\\"height\\\")\" \" = 100\" \\\n+    \"_gdb_setting height 100\"\n # Back to infinite height to avoid pagers.  While at it, check that\n # literal \"unlimited\" works just as well as 0.\n gdb_test_no_output \"set height unlimited\"\n+gdb_test \"p \\$_gdb_setting_str(\\\"height\\\")\" \" = \\\"unlimited\\\"\" \\\n+    \"_gdb_setting_str height unlimited\"\n+gdb_test \"p \\$_gdb_setting(\\\"height\\\")\" \" = 0\" \\\n+    \"_gdb_setting height unlimited\"\n #test set history expansion on\n gdb_test_no_output \"set history expansion on\" \"set history expansion on\" \n #test show history expansion on\n@@ -182,6 +244,12 @@ gdb_test_no_output \"set history filename ~/foobar.baz\" \\\n gdb_test \"show history filename\" \\\n     \"The filename in which to record the command history is \\\"[string_to_regexp $HOME]/foobar.baz\\\"..*\" \\\n     \"show history filename (~/foobar.baz)\"\n+gdb_test \"p \\$_gdb_setting(\\\"history filename\\\")\" \\\n+    \" = \\\"[string_to_regexp $HOME]/foobar.baz\\\"..*\" \\\n+    \"_gdb_setting history filename\"\n+gdb_test \"p \\$_gdb_setting_str(\\\"history filename\\\")\" \\\n+    \" = \\\"[string_to_regexp $HOME]/foobar.baz\\\"..*\" \\\n+    \"_gdb_setting_str history filename\"\n #get current working directory\n set PWD \"\"\n set test \"show working directory\"\n@@ -209,7 +277,7 @@ gdb_test_no_output \"set history size 100\" \"set history size 100\"\n #test show history size 100\n gdb_test \"show history size\" \"The size of the command history is 100..*\" \"show history size (100)\" \n #test set language asm\n-gdb_test \"set language asm\" \".*\" \"set language asm\" \n+gdb_test_no_output \"set language asm\"\n #test show language asm\n gdb_test \"show language\" \"The current source language is \\\"asm\\\"..*\" \"show language (asm)\" \n #test set language rust, with a trailing space"
    },
    {
      "sha": "40a30387c35acf59a8898bfb55bdc9a1ea746efd",
      "filename": "gdb/testsuite/gdb.base/settings.exp",
      "status": "modified",
      "additions": 94,
      "deletions": 7,
      "changes": 101,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3fb2519e629bf8533108c2b7b108e6db98c02f2/gdb/testsuite/gdb.base/settings.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3fb2519e629bf8533108c2b7b108e6db98c02f2/gdb/testsuite/gdb.base/settings.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/settings.exp?ref=f3fb2519e629bf8533108c2b7b108e6db98c02f2",
      "patch": "@@ -35,11 +35,87 @@ if { ![readline_is_used] } {\n }\n \n # Test the show command SHOW_CMD.  EXPECTED_RE is the expected output.\n-# This procedure exists in order to make it easier to make the test\n+# Also verifies that $_gdb_maint_setting_str produces an equivalent output,\n+# matching it with EXPECTED_RE.  EXPECTED_RE double quotes are escaped\n+# unless EXPECTED_RE_ESCAPED is true, indicating the quotes in EXPECTED_RE\n+# are already escaped.\n+# The value for the setting corresponding to SHOW_CMD is then reset\n+# to RESET_VALUE, then set again to the value given by $_gdb_maint_setting_str\n+# and $_gdb_maint_setting.  The default value of RESET_VALUE (0) should work for\n+# most settings.  Note that we do not check that RESET_VALUE differs from\n+# the expected value, as we assume different values will be verified.\n+# The setting value must still be the one in force before calling show_setting.\n+# In other words, this verifies that\n+#   maint set test-settings <some_setting> $_gdb_maint_setting_str(<some_setting>)\n+#   maint set test-settings <some_setting> $_gdb_maint_setting(<some_setting>)\n+# do not change the setting value.\n+# This procedure makes it easier to make the test\n # name/message unique, since we test the \"show\" commands many times.\n # EXPECTED_RE is made part of the test name.\n-proc show_setting {show_cmd expected_re} {\n-    gdb_test \"$show_cmd\" $expected_re \"$show_cmd: $expected_re\"\n+proc show_setting {show_cmd expected_re {expected_re_escaped 0} {reset_value 0}} {\n+    global gdb_prompt\n+\n+    with_test_prefix \"$show_cmd $expected_re\" {\n+\tgdb_test \"$show_cmd\" $expected_re \"show\"\n+\n+\t# Remove the first two words (such as \"maint show\") to have the\n+\t# setting name to use for $_gdb_maint_setting_str.\n+\tregsub \"\\[^ \\]+ +\\[^ \\]+ +\\(.*\\)\" $show_cmd \"\\\\1\" maint_setting\n+\tif {$expected_re_escaped} {\n+\t    set escaped_expected_re $expected_re\n+\t} else {\n+\t    regsub -all \"\\\"\" $expected_re \"\\\\\\\\\\\\\\\"\" escaped_expected_re\n+\t}\n+\tset test \"print \\$_gdb_maint_setting_str\"\n+\tset setting_str_value \"xxxYYYxxx\"\n+\tgdb_test_multiple \"print \\$_gdb_maint_setting_str(\\\"$maint_setting\\\")\" $test {\n+\t    -re \" = \\\"\\($escaped_expected_re\\)\\\".*$gdb_prompt $\" {\n+\t\tset setting_str_value $expect_out(1,string)\n+\t\tregsub -all \"\\\\\\\\\" $expect_out(1,string) \"\" setting_str_value\n+\t\tpass $test\n+\t    }\n+\t}\n+\n+\t# Change the setting value to RESET_VALUE, set it back to setting_str_value\n+\t# and check we still have the original value.\n+\tgdb_test_no_output \"maintenance set $maint_setting $reset_value\" \"str reset $reset_value\"\n+\tgdb_test_no_output \"maintenance set $maint_setting $setting_str_value\" \"str set again\"\n+\tgdb_test \"$show_cmd\" $expected_re \"str show after reset+set again\"\n+\n+\t# Same test, but with value captured from $_gdb_maint_setting.\n+\tset test \"print \\$_gdb_maint_setting\"\n+\tset setting_value \"xxxYYYxxx\"\n+\tgdb_test_multiple \"print \\$_gdb_maint_setting(\\\"$maint_setting\\\")\" $test {\n+\t    -re \" = \\\"\\(.*\\)\\\".*$gdb_prompt $\" {\n+\t\tset setting_value $expect_out(1,string)\n+\t\tregsub -all \"\\\\\\\\\" $expect_out(1,string) \"\" setting_value\n+\t\tpass $test\n+\t    }\n+\t    -re \" = \\(.*\\)\\r\\n$gdb_prompt $\" {\n+\t\tset setting_value $expect_out(1,string)\n+\t\tpass $test\n+\t    }\n+\t}\n+\n+\tgdb_test_no_output \"maintenance set $maint_setting $reset_value\" \"reset $reset_value\"\n+\tgdb_test_no_output \"maintenance set $maint_setting $setting_value\" \"set again\"\n+\tgdb_test \"$show_cmd\" $expected_re \"show after reset+set again\"\n+    }\n+}\n+\n+# Verifies that $_gdb_setting (SETTING) gives a value whose ptype matches EXPECTED.\n+proc check_type {setting expected} {\n+    with_test_prefix \"check_type $setting $expected\" {\n+\tgdb_test \"print \\$_gdb_maint_setting(\\\"$setting\\\")\"\n+\tgdb_test \"ptype $\" \"$expected\"\n+\n+\t# Currently, GDB ptype <internal function> always tells it is type int.\n+\t# ptype should better report an error such as:\n+\t#   \"No type information for GDB functions\"\n+\t# Test 'type int', so as to make it fail if ptype is changed.\n+\tgdb_test \"ptype \\$_gdb_maint_setting(\\\"$setting\\\")\" \\\n+            \"type = int\"\n+    }\n }\n \n # var_Xinteger tests.  VARIANT determines which command/variant to\n@@ -68,16 +144,19 @@ proc test-integer {variant} {\n \t# -1 means unlimited.  Other negative values are rejected.  -1\n \t# -is tested further below, along the \"unlimited\" tests.\n \tgdb_test \"$set_cmd -2\" \"only -1 is allowed to set as unlimited\"\n+\tcheck_type \"test-settings $variant\" \"type = int\"\n     } elseif {$variant == \"uinteger\" || $variant == \"zuinteger\"} {\n \t# Negative values are not accepted.\n \tgdb_test \"$set_cmd -1\" \"integer -1 out of range\"\n \tgdb_test \"$set_cmd -2\" \"integer -2 out of range\"\n+\tcheck_type \"test-settings $variant\" \"type = unsigned int\"\n     } else {\n \t# Negative values are not accepted.\n \tgdb_test_no_output \"$set_cmd -1\"\n \tshow_setting \"$show_cmd\" \"-1\"\n \tgdb_test_no_output \"$set_cmd -2\"\n \tshow_setting \"$show_cmd\" \"-2\"\n+\tcheck_type \"test-settings $variant\" \"type = int\"\n     }\n \n     # Regular integer is accepted.\n@@ -234,6 +313,8 @@ proc_with_prefix test-boolean {} {\n \tshow_setting \"$show_cmd\" \"on\"\n     }\n \n+    check_type \"test-settings boolean\" \"type = int\"\n+\n     foreach_with_prefix value {\n \t\"of\"\n \t\"off\"\n@@ -354,6 +435,8 @@ proc_with_prefix test-auto-boolean {} {\n \tshow_setting \"$show_cmd\" \"auto\"\n     }\n \n+    check_type \"test-settings auto-boolean\" \"type = int\"\n+\n     # \"-\" is not accepted as abbreviation of \"-1\".\n     gdb_test \"$set_cmd -\" \\\n \t\"\\\"on\\\", \\\"off\\\" or \\\"auto\\\" expected\\\\.\"\n@@ -409,11 +492,13 @@ proc_with_prefix test-enum {} {\n     # Various valid values.  Test both full value names and\n     # abbreviations.\n     gdb_test_no_output \"$set_cmd x\"\n-    show_setting \"$show_cmd\" \"xxx\"\n+    show_setting \"$show_cmd\" \"xxx\" 0 \"zzz\"\n     gdb_test_no_output \"$set_cmd yy\"\n-    show_setting \"$show_cmd\" \"yyy\"\n+    show_setting \"$show_cmd\" \"yyy\" 0 \"zzz\"\n     gdb_test_no_output \"$set_cmd zzz\"\n-    show_setting \"$show_cmd\" \"zzz\"\n+    show_setting \"$show_cmd\" \"zzz\" 0 \"yyy\"\n+\n+    check_type \"test-settings enum\" \"type = char \\\\\\[3\\\\\\]\"\n \n     test_gdb_complete_multiple \"$set_cmd \" \"\" \"\" {\n \t\"xxx\"\n@@ -458,10 +543,12 @@ proc test-string {variant} {\n     gdb_test_no_output \"$set_cmd hello world\"\n     show_setting \"$show_cmd\" \"hello world\"\n \n+    check_type \"test-settings $variant\" \"type = char \\\\\\[\\[1-9\\]\\[0-9\\]*\\\\\\]\"\n+\n     # A quoted string value.\n     if {$variant == \"string\"} {\n \tgdb_test_no_output \"$set_cmd \\\"hello world\\\"\"\n-\tshow_setting \"$show_cmd\" \"\\\\\\\\\\\"hello world\\\\\\\\\\\"\"\n+\tshow_setting \"$show_cmd\" \"\\\\\\\\\\\"hello world\\\\\\\\\\\"\" 1\n     } else {\n \tgdb_test_no_output \"$set_cmd \\\"hello world\\\"\"\n \tshow_setting \"$show_cmd\" \"\\\"hello world\\\"\""
    }
  ]
}