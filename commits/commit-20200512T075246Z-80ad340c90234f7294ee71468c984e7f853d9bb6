{
  "sha": "80ad340c90234f7294ee71468c984e7f853d9bb6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODBhZDM0MGM5MDIzNGY3Mjk0ZWU3MTQ2OGM5ODRlN2Y4NTNkOWJiNg==",
  "commit": {
    "author": {
      "name": "Mihails Strasuns",
      "email": "mihails.strasuns@intel.com",
      "date": "2020-02-17T10:36:47Z"
    },
    "committer": {
      "name": "Mihails Strasuns",
      "email": "mihails.strasuns@intel.com",
      "date": "2020-05-12T07:52:46Z"
    },
    "message": "[gdb/testsuite] use -Ttext-segment for jit-elf tests\n\nRemoves the need to manually relocate loaded ELF binary by using a fixed\nconstant as both mmap base address and as a requested first segment\naddress supplied to the linker.\n\nIn future will enable JIT tests with a valid DWARF debug info.  Current\ntests still need to compile without a debug info though, because they do\na function name modification.\n\ngdb/testsuite/ChangeLog:\n\n2020-02-18  Mihails Strasuns  <mihails.strasuns@intel.com>\n\n\t* lib/jit-elf-helpers.exp: Supply -Ttext-segment linker flag and\n\t  define LOAD_ADDRESS/LOAD_INCREMENT macros for the compiled binaries.\n\t* gdb.base/jit-elf-main.c: Use LOAD_ADDRESS/LOAD_INCREMENT to\n\t  calculate the mmap address.",
    "tree": {
      "sha": "a3c2677b51aa3c0eaa7eddc6e082e7f65e3833da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a3c2677b51aa3c0eaa7eddc6e082e7f65e3833da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/80ad340c90234f7294ee71468c984e7f853d9bb6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80ad340c90234f7294ee71468c984e7f853d9bb6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/80ad340c90234f7294ee71468c984e7f853d9bb6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80ad340c90234f7294ee71468c984e7f853d9bb6/comments",
  "author": {
    "login": "mihails-strasuns-intel",
    "id": 55576710,
    "node_id": "MDQ6VXNlcjU1NTc2NzEw",
    "avatar_url": "https://avatars.githubusercontent.com/u/55576710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mihails-strasuns-intel",
    "html_url": "https://github.com/mihails-strasuns-intel",
    "followers_url": "https://api.github.com/users/mihails-strasuns-intel/followers",
    "following_url": "https://api.github.com/users/mihails-strasuns-intel/following{/other_user}",
    "gists_url": "https://api.github.com/users/mihails-strasuns-intel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mihails-strasuns-intel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mihails-strasuns-intel/subscriptions",
    "organizations_url": "https://api.github.com/users/mihails-strasuns-intel/orgs",
    "repos_url": "https://api.github.com/users/mihails-strasuns-intel/repos",
    "events_url": "https://api.github.com/users/mihails-strasuns-intel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mihails-strasuns-intel/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mihails-strasuns-intel",
    "id": 55576710,
    "node_id": "MDQ6VXNlcjU1NTc2NzEw",
    "avatar_url": "https://avatars.githubusercontent.com/u/55576710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mihails-strasuns-intel",
    "html_url": "https://github.com/mihails-strasuns-intel",
    "followers_url": "https://api.github.com/users/mihails-strasuns-intel/followers",
    "following_url": "https://api.github.com/users/mihails-strasuns-intel/following{/other_user}",
    "gists_url": "https://api.github.com/users/mihails-strasuns-intel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mihails-strasuns-intel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mihails-strasuns-intel/subscriptions",
    "organizations_url": "https://api.github.com/users/mihails-strasuns-intel/orgs",
    "repos_url": "https://api.github.com/users/mihails-strasuns-intel/repos",
    "events_url": "https://api.github.com/users/mihails-strasuns-intel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mihails-strasuns-intel/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f80120719777e671e871434d727716355d6ab57d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f80120719777e671e871434d727716355d6ab57d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f80120719777e671e871434d727716355d6ab57d"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 46,
    "deletions": 15
  },
  "files": [
    {
      "sha": "be7185ef1a11033c47b12ccd3a842ab0fac38eac",
      "filename": "gdb/testsuite/gdb.base/jit-elf-main.c",
      "status": "modified",
      "additions": 15,
      "deletions": 12,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80ad340c90234f7294ee71468c984e7f853d9bb6/gdb/testsuite/gdb.base/jit-elf-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80ad340c90234f7294ee71468c984e7f853d9bb6/gdb/testsuite/gdb.base/jit-elf-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jit-elf-main.c?ref=80ad340c90234f7294ee71468c984e7f853d9bb6",
      "patch": "@@ -51,20 +51,16 @@ usage (void)\n   exit (1);\n }\n \n-/* Update .p_vaddr and .sh_addr as if the code was JITted to ADDR.  */\n+/* Rename jit_function_XXXX to match idx  */\n \n static void\n-update_locations (const void *const addr, int idx)\n+update_name (const void *const addr, int idx)\n {\n   const ElfW (Ehdr) *const ehdr = (ElfW (Ehdr) *)addr;\n   ElfW (Shdr) *const shdr = (ElfW (Shdr) *)((char *)addr + ehdr->e_shoff);\n   ElfW (Phdr) *const phdr = (ElfW (Phdr) *)((char *)addr + ehdr->e_phoff);\n   int i;\n \n-  for (i = 0; i < ehdr->e_phnum; ++i)\n-    if (phdr[i].p_type == PT_LOAD)\n-      phdr[i].p_vaddr += (ElfW (Addr))addr;\n-\n   for (i = 0; i < ehdr->e_shnum; ++i)\n     {\n       if (shdr[i].sh_type == SHT_STRTAB)\n@@ -81,9 +77,6 @@ update_locations (const void *const addr, int idx)\n             if (strcmp (p, \"jit_function_XXXX\") == 0)\n               sprintf (p, \"jit_function_%04d\", idx);\n         }\n-\n-      if (shdr[i].sh_flags & SHF_ALLOC)\n-        shdr[i].sh_addr += (ElfW (Addr))addr;\n     }\n }\n \n@@ -96,6 +89,15 @@ update_locations (const void *const addr, int idx)\n #define MAIN main\n #endif\n \n+/* Must be defined by .exp file when compiling to know\n+   what address to map the ELF binary to.  */\n+#ifndef LOAD_ADDRESS\n+#error \"Must define LOAD_ADDRESS\"\n+#endif\n+#ifndef LOAD_INCREMENT\n+#error \"Must define LOAD_INCREMENT\"\n+#endif\n+\n /* Used to spin waiting for GDB.  */\n volatile int wait_for_gdb = ATTACH;\n #define WAIT_FOR_GDB do {} while (wait_for_gdb)\n@@ -139,8 +141,9 @@ MAIN (int argc, char *argv[])\n \t  exit (1);\n \t}\n \n-      const void *const addr = mmap (0, st.st_size, PROT_READ|PROT_WRITE,\n-\t\t\t\t     MAP_PRIVATE, fd, 0);\n+      void *load_addr = (void *) (size_t) (LOAD_ADDRESS + (i - 1) * LOAD_INCREMENT);\n+      const void *const addr = mmap (load_addr, st.st_size, PROT_READ|PROT_WRITE,\n+\t\t\t\t     MAP_PRIVATE | MAP_FIXED, fd, 0);\n       struct jit_code_entry *const entry = calloc (1, sizeof (*entry));\n \n       if (addr == MAP_FAILED)\n@@ -149,7 +152,7 @@ MAIN (int argc, char *argv[])\n \t  exit (1);\n \t}\n \n-      update_locations (addr, i);\n+      update_name (addr, i);\n \n       /* Link entry at the end of the list.  */\n       entry->symfile_addr = (const char *)addr;"
    },
    {
      "sha": "032417b373d79105563e947df71dcd1a13fce046",
      "filename": "gdb/testsuite/lib/jit-elf-helpers.exp",
      "status": "modified",
      "additions": 31,
      "deletions": 3,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80ad340c90234f7294ee71468c984e7f853d9bb6/gdb/testsuite/lib/jit-elf-helpers.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80ad340c90234f7294ee71468c984e7f853d9bb6/gdb/testsuite/lib/jit-elf-helpers.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/jit-elf-helpers.exp?ref=80ad340c90234f7294ee71468c984e7f853d9bb6",
      "patch": "@@ -13,6 +13,13 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n+# Magic constants used to calculate a starting address when linking\n+# \"jit\" shared libraries.  When loaded, will be mapped by jit-elf-main\n+# to the same address.\n+\n+set jit_load_address   0x7000000\n+set jit_load_increment 0x1000000\n+\n # Compile jit-elf-main.c as an executable.\n #\n # BINSUFFIX is appended to the binary name.\n@@ -21,7 +28,13 @@\n # On success, return 0.\n # On failure, return -1.\n proc compile_jit_main {main_srcfile main_binfile options} {\n-    set options [concat $options debug]\n+    global jit_load_address jit_load_increment\n+\n+    set options [concat \\\n+\t$options \\\n+\tadditional_flags=-DLOAD_ADDRESS=$jit_load_address \\\n+\tadditional_flags=-DLOAD_INCREMENT=$jit_load_increment \\\n+\tdebug]\n \n     if { [gdb_compile ${main_srcfile} ${main_binfile} \\\n \t  executable $options] != \"\" } {\n@@ -39,7 +52,13 @@ proc compile_jit_main {main_srcfile main_binfile options} {\n # On success, return 0.\n # On failure, return -1.\n proc compile_jit_elf_main_as_so {main_solib_srcfile main_solib_binfile options} {\n-    set options [concat $options debug]\n+    global jit_load_address jit_load_increment\n+\n+    set options [list \\\n+\tadditional_flags=\"-DMAIN=jit_dl_main\" \\\n+\tadditional_flags=-DLOAD_ADDRESS=$jit_load_address \\\n+\tadditional_flags=-DLOAD_INCREMENT=$jit_load_increment \\\n+\tdebug]\n \n     if { [gdb_compile_shlib ${main_solib_srcfile} ${main_solib_binfile} \\\n \t    $options] != \"\" } {\n@@ -56,6 +75,7 @@ proc compile_jit_elf_main_as_so {main_solib_srcfile main_solib_binfile options}\n # On success, return a list of target path to the shared libraries.\n # On failure, return -1.\n proc compile_and_download_n_jit_so {jit_solib_basename jit_solib_srcfile count} {\n+    global jit_load_address jit_load_increment\n     set binfiles_target {}\n \n     for {set i 1} {$i <= $count} {incr i} {\n@@ -65,7 +85,15 @@ proc compile_and_download_n_jit_so {jit_solib_basename jit_solib_srcfile count}\n \t# do symbol renaming by munging on ELF symbol table, and that\n \t# wouldn't work for .debug sections.  Also, output for \"info\n \t# function\" changes when debug info is present.\n-\tif { [gdb_compile_shlib ${jit_solib_srcfile} ${binfile} {}] != \"\" } {\n+\tset addr [format 0x%x [expr $jit_load_address + $jit_load_increment * [expr $i-1]]]\n+\t# Using -Ttext-segment flag to ask linked to relocate everything\n+\t# in the compiled shared library against a fixed base address.  Combined\n+\t# with mapping the resulting binary to the same fixed base it allows\n+\t# to dynamically execute functions from it without any further adjustments.\n+\tset options [list \\\n+\t    additional_flags=-Xlinker \\\n+\t    additional_flags=-Ttext-segment=$addr]\n+\tif { [gdb_compile_shlib ${jit_solib_srcfile} ${binfile} $options] != \"\" } {\n \t    untested \"failed to compile ${jit_solib_basename}.c as a shared library\"\n \t    return -1\n \t}"
    }
  ]
}