{
  "sha": "1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
  "node_id": "C_kwDOANOeidoAKDFjYWQ5MzhkZTU3YTE1NzdlNWZlNGI0YWZjYWJlODg5YThiOWI5ZDc",
  "commit": {
    "author": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T19:56:09Z"
    },
    "committer": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T19:56:42Z"
    },
    "message": "aarch64: [SME] Add ZERO instruction\n\nThis patch is adding ZERO (a list of 64-bit element ZA tiles)\ninstruction.\n\ngas/ChangeLog:\n\n\t* config/tc-aarch64.c (parse_sme_list_of_64bit_tiles):\n\tNew parser.\n\t(parse_operands): Handle OPND_SME_list_of_64bit_tiles.\n\t* testsuite/gas/aarch64/sme-4-illegal.d: New test.\n\t* testsuite/gas/aarch64/sme-4-illegal.l: New test.\n\t* testsuite/gas/aarch64/sme-4-illegal.s: New test.\n\t* testsuite/gas/aarch64/sme-4.d: New test.\n\t* testsuite/gas/aarch64/sme-4.s: New test.\n\ninclude/ChangeLog:\n\n\t* opcode/aarch64.h (enum aarch64_opnd): New operand\n\tAARCH64_OPND_SME_list_of_64bit_tiles.\n\nopcodes/ChangeLog:\n\n\t* aarch64-opc.c (print_sme_za_list): New printing function.\n\t(aarch64_print_operand): Handle OPND_SME_list_of_64bit_tiles.\n\t* aarch64-opc.h (enum aarch64_field_kind): New bitfield\n\tFLD_SME_zero_mask.\n\t* aarch64-tbl.h (struct aarch64_opcode): New ZERO instruction.\n\taarch64-asm-2.c: Regenerate.\n\taarch64-dis-2.c: Regenerate.\n\taarch64-opc-2.c: Regenerate.",
    "tree": {
      "sha": "0a83cfe3b99989bb705595bb9bf0855553e25e15",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0a83cfe3b99989bb705595bb9bf0855553e25e15"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/comments",
  "author": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7bb5f07c8aa5168009f1e7b6857a30f0ee5ad16a"
    }
  ],
  "stats": {
    "total": 679,
    "additions": 539,
    "deletions": 140
  },
  "files": [
    {
      "sha": "15bfe8ec9fc7cb6b8dd63528f3e1c4456a3437f7",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 104,
      "deletions": 0,
      "changes": 104,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -4460,6 +4460,103 @@ parse_sme_za_hv_tiles_operand (char **str,\n   return regno;\n }\n \n+/* Parse list of up to eight 64-bit element tile names separated by commas in\n+   SME's ZERO instruction:\n+\n+     ZERO { <mask> }\n+\n+   Function returns <mask>:\n+\n+     an 8-bit list of 64-bit element tiles named ZA0.D to ZA7.D.\n+*/\n+static int\n+parse_sme_zero_mask(char **str)\n+{\n+  char *q;\n+  int mask;\n+  aarch64_opnd_qualifier_t qualifier;\n+\n+  mask = 0x00;\n+  q = *str;\n+  do\n+    {\n+      const reg_entry *reg = parse_reg_with_qual (&q, REG_TYPE_ZA, &qualifier);\n+      if (reg)\n+        {\n+          int regno = reg->number;\n+          if (qualifier == AARCH64_OPND_QLF_S_B && regno == 0)\n+            {\n+              /* { ZA0.B } is assembled as all-ones immediate.  */\n+              mask = 0xff;\n+            }\n+          else if (qualifier == AARCH64_OPND_QLF_S_H && regno < 2)\n+            mask |= 0x55 << regno;\n+          else if (qualifier == AARCH64_OPND_QLF_S_S && regno < 4)\n+            mask |= 0x11 << regno;\n+          else if (qualifier == AARCH64_OPND_QLF_S_D && regno < 8)\n+            mask |= 0x01 << regno;\n+          else\n+            {\n+              set_syntax_error (_(\"wrong ZA tile element format\"));\n+              return PARSE_FAIL;\n+            }\n+          continue;\n+        }\n+      else if (strncasecmp (q, \"za\", 2) == 0\n+               && !ISALNUM (q[2]))\n+        {\n+          /* { ZA } is assembled as all-ones immediate.  */\n+          mask = 0xff;\n+          q += 2;\n+          continue;\n+        }\n+      else\n+        {\n+          set_syntax_error (_(\"wrong ZA tile element format\"));\n+          return PARSE_FAIL;\n+        }\n+    }\n+  while (skip_past_char (&q, ','));\n+\n+  *str = q;\n+  return mask;\n+}\n+\n+/* Wraps in curly braces <mask> operand ZERO instruction:\n+\n+   ZERO { <mask> }\n+\n+   Function returns value of <mask> bit-field.\n+*/\n+static int\n+parse_sme_list_of_64bit_tiles (char **str)\n+{\n+  int regno;\n+\n+  if (!skip_past_char (str, '{'))\n+    {\n+      set_syntax_error (_(\"expected '{'\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  /* Empty <mask> list is an all-zeros immediate.  */\n+  if (!skip_past_char (str, '}'))\n+    {\n+      regno = parse_sme_zero_mask (str);\n+      if (regno == PARSE_FAIL)\n+         return PARSE_FAIL;\n+\n+      if (!skip_past_char (str, '}'))\n+        {\n+          set_syntax_error (_(\"expected '}'\"));\n+          return PARSE_FAIL;\n+        }\n+    }\n+  else\n+    regno = 0x00;\n+\n+  return regno;\n+}\n \n /* Parse a system register or a PSTATE field name for an MSR/MRS instruction.\n    Returns the encoding for the option, or PARSE_FAIL.\n@@ -7194,6 +7291,13 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t    break;\n \t  }\n \n+\t  case AARCH64_OPND_SME_list_of_64bit_tiles:\n+\t    val = parse_sme_list_of_64bit_tiles (&str);\n+\t    if (val == PARSE_FAIL)\n+\t      goto failure;\n+\t    info->imm.value = val;\n+\t    break;\n+\n \tdefault:\n \t  as_fatal (_(\"unhandled operand code %d\"), operands[i]);\n \t}"
    },
    {
      "sha": "b5d0543b0d44bd4a074b9186f215117607fb211b",
      "filename": "gas/testsuite/gas/aarch64/sme-4-illegal.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/testsuite/gas/aarch64/sme-4-illegal.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/testsuite/gas/aarch64/sme-4-illegal.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-4-illegal.d?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=armv8-a+sme\n+#source: sme-4-illegal.s\n+#error_output: sme-4-illegal.l"
    },
    {
      "sha": "ae7d6543410ed81f64c8ad0a95f4201c59d6dfaf",
      "filename": "gas/testsuite/gas/aarch64/sme-4-illegal.l",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/testsuite/gas/aarch64/sme-4-illegal.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/testsuite/gas/aarch64/sme-4-illegal.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-4-illegal.l?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -0,0 +1,29 @@\n+[^:]*: Assembler messages:\n+[^:]*:[0-9]+: Error: expected '{' at operand 1 -- `zero za'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za8\\.d}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za0\\.d,za8.d}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za2\\.h}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za4\\.s}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za1\\.s,za4.s}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za0\\.d,za3.s,za2.h}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za1.b}'\n+[^:]*:[0-9]+: Error: unexpected comma after the mnemonic name `zero' -- `zero ,'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {,'\n+[^:]*:[0-9]+: Error: expected '{' at operand 1 -- `zero }'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {,}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {,,}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za0}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {,za0.d}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za0.d,}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za0.d,za1.d,}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za,}'\n+[^:]*:[0-9]+: Error: expected '}' at operand 1 -- `zero {za.}'\n+[^:]*:[0-9]+: Error: expected '}' at operand 1 -- `zero {za-}'\n+[^:]*:[0-9]+: Error: expected '}' at operand 1 -- `zero {za_}'\n+[^:]*:[0-9]+: Error: expected '}' at operand 1 -- `zero {za#}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {zaX}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {za0}'\n+[^:]*:[0-9]+: Error: wrong ZA tile element format at operand 1 -- `zero {zax}'\n+[^:]*:[0-9]+: Error: expected '}' at operand 1 -- `zero {za{}'\n+[^:]*:[0-9]+: Error: unexpected characters following instruction at operand 1 -- `zero {za}}'"
    },
    {
      "sha": "db0fbf6c7c0ce4c98b293dd819062b28bdf9ec1f",
      "filename": "gas/testsuite/gas/aarch64/sme-4-illegal.s",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/testsuite/gas/aarch64/sme-4-illegal.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/testsuite/gas/aarch64/sme-4-illegal.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-4-illegal.s?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -0,0 +1,32 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+zero za\n+zero { za8.d }\n+zero { za0.d, za8.d }\n+zero { za2.h }\n+zero { za4.s }\n+zero { za1.s, za4.s }\n+zero { za0.d, za3.s, za2.h }\n+zero { za1.b }\n+\n+/* Parser checks.  */\n+zero ,\n+zero {\n+zero { ,\n+zero }\n+zero { , }\n+zero { , , }\n+zero { za0 }\n+zero { , za0.d }\n+zero { za0.d , }\n+zero { za0.d , za1.d , }\n+zero { za, }\n+zero { za. }\n+zero { za- }\n+zero { za_ }\n+zero { za# }\n+zero { zaX }\n+zero { za0 }\n+zero { zax }\n+zero { za{ }\n+zero { za} }"
    },
    {
      "sha": "7e498e763905a5505eb46fb02781c58cad58c611",
      "filename": "gas/testsuite/gas/aarch64/sme-4.d",
      "status": "added",
      "additions": 71,
      "deletions": 0,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/testsuite/gas/aarch64/sme-4.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/testsuite/gas/aarch64/sme-4.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-4.d?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -0,0 +1,71 @@\n+#name: SME extension (ZERO)\n+#as: -march=armv8-a+sme\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\tc0080000 \tzero\t{}\n+   4:\tc00800ff \tzero\t{za}\n+   8:\tc00800ff \tzero\t{za}\n+   c:\tc00800ff \tzero\t{za}\n+  10:\tc00800ff \tzero\t{za}\n+  14:\tc00800ff \tzero\t{za}\n+  18:\tc0080001 \tzero\t{za0\\.d}\n+  1c:\tc0080002 \tzero\t{za1\\.d}\n+  20:\tc0080004 \tzero\t{za2\\.d}\n+  24:\tc0080008 \tzero\t{za3\\.d}\n+  28:\tc0080010 \tzero\t{za4\\.d}\n+  2c:\tc0080020 \tzero\t{za5\\.d}\n+  30:\tc0080040 \tzero\t{za6\\.d}\n+  34:\tc0080080 \tzero\t{za7\\.d}\n+  38:\tc0080001 \tzero\t{za0\\.d}\n+  3c:\tc0080003 \tzero\t{za0\\.d, za1\\.d}\n+  40:\tc0080007 \tzero\t{za0\\.d, za1\\.d, za2\\.d}\n+  44:\tc008000f \tzero\t{za0\\.d, za1\\.d, za2\\.d, za3\\.d}\n+  48:\tc008001f \tzero\t{za0\\.s, za1\\.d, za2\\.d, za3\\.d}\n+  4c:\tc008003f \tzero\t{za0\\.s, za1\\.s, za2\\.d, za3\\.d}\n+  50:\tc008007f \tzero\t{za0\\.h, za1\\.s, za3\\.d}\n+  54:\tc00800ff \tzero\t{za}\n+  58:\tc0080080 \tzero\t{za7\\.d}\n+  5c:\tc00800c0 \tzero\t{za6\\.d, za7\\.d}\n+  60:\tc00800e0 \tzero\t{za5\\.d, za6\\.d, za7\\.d}\n+  64:\tc00800f0 \tzero\t{za4\\.d, za5\\.d, za6\\.d, za7\\.d}\n+  68:\tc00800f8 \tzero\t{za3\\.s, za4\\.d, za5\\.d, za6\\.d}\n+  6c:\tc00800fc \tzero\t{za2\\.s, za3\\.s, za4\\.d, za5\\.d}\n+  70:\tc00800fe \tzero\t{za1\\.h, za2\\.s, za4\\.d}\n+  74:\tc00800ff \tzero\t{za}\n+  78:\tc00800fe \tzero\t{za1\\.h, za2\\.s, za4\\.d}\n+  7c:\tc00800fd \tzero\t{za0\\.h, za3\\.s, za5\\.d}\n+  80:\tc00800fb \tzero\t{za1\\.h, za0\\.s, za6\\.d}\n+  84:\tc00800f7 \tzero\t{za0\\.h, za1\\.s, za7\\.d}\n+  88:\tc00800ef \tzero\t{za1\\.h, za2\\.s, za0\\.d}\n+  8c:\tc00800df \tzero\t{za0\\.h, za3\\.s, za1\\.d}\n+  90:\tc00800bf \tzero\t{za1\\.h, za0\\.s, za2\\.d}\n+  94:\tc008007f \tzero\t{za0\\.h, za1\\.s, za3\\.d}\n+  98:\tc0080055 \tzero\t{za0\\.h}\n+  9c:\tc00800aa \tzero\t{za1\\.h}\n+  a0:\tc0080011 \tzero\t{za0\\.s}\n+  a4:\tc0080022 \tzero\t{za1\\.s}\n+  a8:\tc0080044 \tzero\t{za2\\.s}\n+  ac:\tc0080088 \tzero\t{za3\\.s}\n+  b0:\tc0080055 \tzero\t{za0\\.h}\n+  b4:\tc0080055 \tzero\t{za0\\.h}\n+  b8:\tc0080055 \tzero\t{za0\\.h}\n+  bc:\tc00800aa \tzero\t{za1\\.h}\n+  c0:\tc00800aa \tzero\t{za1\\.h}\n+  c4:\tc00800aa \tzero\t{za1\\.h}\n+  c8:\tc0080011 \tzero\t{za0\\.s}\n+  cc:\tc0080022 \tzero\t{za1\\.s}\n+  d0:\tc0080044 \tzero\t{za2\\.s}\n+  d4:\tc0080088 \tzero\t{za3\\.s}\n+  d8:\tc00800d5 \tzero\t{za0.h, za7.d}\n+  dc:\tc00800ab \tzero\t{za1.h, za0.d}\n+  e0:\tc0080015 \tzero\t{za0.s, za2.d}\n+  e4:\tc008002a \tzero\t{za1.s, za3.d}\n+  e8:\tc0080054 \tzero\t{za2.s, za4.d}\n+  ec:\tc00800a8 \tzero\t{za3.s, za5.d}\n+  f0:\tc00800d5 \tzero\t{za0.h, za7.d}\n+  f4:\tc0080015 \tzero\t{za0.s, za2.d}"
    },
    {
      "sha": "1fcd3787513f4ce5aae6a451479dc9ea44192787",
      "filename": "gas/testsuite/gas/aarch64/sme-4.s",
      "status": "added",
      "additions": 95,
      "deletions": 0,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/testsuite/gas/aarch64/sme-4.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/gas/testsuite/gas/aarch64/sme-4.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-4.s?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -0,0 +1,95 @@\n+/* SME Extension (ZERO).  */\n+\n+/* An all-zeros immediate is disassembled as an empty list { }.  */\n+zero { }\n+\n+/* An all-ones immediate is disassembled as {ZA}.  */\n+zero { za }\n+zero { za0.b }\n+zero { za0.h, za1.h }\n+zero { za0.d, za1.d, za2.d, za3.d, za4.d, za5.d, za6.d, za7.d }\n+zero { za7.d, za6.d, za5.d, za4.d, za3.d, za2.d, za1.d, za0.d }\n+\n+/* Set each bit individually.  */\n+zero { za0.d }\n+zero { za1.d }\n+zero { za2.d }\n+zero { za3.d }\n+zero { za4.d }\n+zero { za5.d }\n+zero { za6.d }\n+zero { za7.d }\n+\n+/* Random bits.  */\n+zero { za0.d }\n+zero { za0.d, za1.d }\n+zero { za0.d, za1.d, za2.d }\n+zero { za0.d, za1.d, za2.d, za3.d }\n+zero { za0.d, za1.d, za2.d, za3.d, za4.d }\n+zero { za0.d, za1.d, za2.d, za3.d, za4.d, za5.d }\n+zero { za0.d, za1.d, za2.d, za3.d, za4.d, za5.d, za6.d }\n+zero { za0.d, za1.d, za2.d, za3.d, za4.d, za5.d, za6.d, za7.d }\n+\n+zero { za7.d }\n+zero { za7.d, za6.d }\n+zero { za7.d, za6.d, za5.d }\n+zero { za7.d, za6.d, za5.d, za4.d }\n+zero { za7.d, za6.d, za5.d, za4.d, za3.d }\n+zero { za7.d, za6.d, za5.d, za4.d, za3.d, za2.d }\n+zero { za7.d, za6.d, za5.d, za4.d, za3.d, za2.d, za1.d }\n+zero { za7.d, za6.d, za5.d, za4.d, za3.d, za2.d, za1.d, za0.d }\n+\n+zero { za1.d, za2.d, za3.d, za4.d, za5.d, za6.d, za7.d }\n+zero { za0.d, za2.d, za3.d, za4.d, za5.d, za6.d, za7.d }\n+zero { za0.d, za1.d, za3.d, za4.d, za5.d, za6.d, za7.d }\n+zero { za0.d, za1.d, za2.d, za4.d, za5.d, za6.d, za7.d }\n+zero { za0.d, za1.d, za2.d, za3.d, za5.d, za6.d, za7.d }\n+zero { za0.d, za1.d, za2.d, za3.d, za4.d, za6.d, za7.d }\n+zero { za0.d, za1.d, za2.d, za3.d, za4.d, za5.d, za7.d }\n+zero { za0.d, za1.d, za2.d, za3.d, za4.d, za5.d, za6.d }\n+\n+/* For programmer convenience an assembler must also accept the names of\n+   32-bit, 16-bit and 8-bit element tiles.\n+*/\n+zero { za0.h }\n+zero { za1.h }\n+zero { za0.s }\n+zero { za1.s }\n+zero { za2.s }\n+zero { za3.s }\n+\n+/* The preferred disassembly of this instruction uses the shortest list of tile\n+   names that represent the encoded immediate mask.\n+*/\n+\n+/* To za0.h  */\n+zero { za0.d, za2.d, za4.d, za6.d }\n+zero { za0.s, za2.s }\n+zero { za0.h }\n+\n+/* To za1.h  */\n+zero { za1.d, za3.d, za5.d, za7.d }\n+zero { za1.s, za3.s }\n+zero { za1.h }\n+\n+/* To za[0-3].s  */\n+zero { za0.d, za4.d }\n+zero { za1.d, za5.d }\n+zero { za2.d, za6.d }\n+zero { za3.d, za7.d }\n+\n+/* Mix of suffixed.  */\n+zero { za0.h, za7.d }\n+zero { za1.h, za0.d }\n+zero { za0.s, za2.d }\n+zero { za1.s, za3.d }\n+zero { za2.s, za4.d }\n+zero { za3.s, za5.d }\n+\n+/* Register aliases.  */\n+foo .req za0\n+bar .req za2\n+baz .req za7\n+\n+zero { foo.h, baz.d }\n+zero { za0.s, bar.d }"
    },
    {
      "sha": "a224b8ad85ace5e03ff97fff155dc56be7611ecf",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -450,6 +450,7 @@ enum aarch64_opnd\n   AARCH64_OPND_SME_ZA_HV_idx_src,\t/* SME source ZA tile vector.  */\n   AARCH64_OPND_SME_ZA_HV_idx_dest,\t/* SME destination ZA tile vector.  */\n   AARCH64_OPND_SME_Pm,\t\t/* SME scalable predicate register, bits [15:13].  */\n+  AARCH64_OPND_SME_list_of_64bit_tiles, /* SME list of ZA tiles.  */\n   AARCH64_OPND_TME_UIMM16,\t/* TME unsigned 16-bit immediate.  */\n   AARCH64_OPND_SM3_IMM2,\t/* SM3 encodes lane in bits [13, 14].  */\n };"
    },
    {
      "sha": "0e0484242575c35f156bf597e1592c0e71c40553",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -675,7 +675,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 33:\n     case 34:\n     case 35:\n-    case 215:\n+    case 216:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 36:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -721,6 +721,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 188:\n     case 189:\n     case 214:\n+    case 215:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 44:\n     case 45:"
    },
    {
      "sha": "9dd9402a97c30a4834aef8fa7adf811ac63c3035",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 151,
      "deletions": 139,
      "changes": 290,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -96,55 +96,66 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                 {\n                                   if (((word >> 17) & 0x1) == 0)\n                                     {\n-                                      if (((word >> 20) & 0x1) == 0)\n-                                        {\n-                                          /* 33222222222211111111110000000000\n-                                             10987654321098765432109876543210\n-                                             x1000000xx00xx0xxxxxxxxxxxxxxxxx\n-                                             mov.  */\n-                                          return 2377;\n-                                        }\n-                                      else\n+                                      if (((word >> 19) & 0x1) == 0)\n                                         {\n-                                          if (((word >> 16) & 0x1) == 0)\n+                                          if (((word >> 20) & 0x1) == 0)\n                                             {\n-                                              if (((word >> 22) & 0x1) == 0)\n-                                                {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x1000000x001xx00xxxxxxxxxxxxxxxx\n-                                                     addha.  */\n-                                                  return 2348;\n-                                                }\n-                                              else\n-                                                {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x1000000x101xx00xxxxxxxxxxxxxxxx\n-                                                     addha.  */\n-                                                  return 2349;\n-                                                }\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 x1000000xx000x0xxxxxxxxxxxxxxxxx\n+                                                 mov.  */\n+                                              return 2377;\n                                             }\n                                           else\n                                             {\n-                                              if (((word >> 22) & 0x1) == 0)\n+                                              if (((word >> 16) & 0x1) == 0)\n                                                 {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x1000000x001xx01xxxxxxxxxxxxxxxx\n-                                                     addva.  */\n-                                                  return 2350;\n+                                                  if (((word >> 22) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         x1000000x0010x00xxxxxxxxxxxxxxxx\n+                                                         addha.  */\n+                                                      return 2348;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         x1000000x1010x00xxxxxxxxxxxxxxxx\n+                                                         addha.  */\n+                                                      return 2349;\n+                                                    }\n                                                 }\n                                               else\n                                                 {\n-                                                  /* 33222222222211111111110000000000\n-                                                     10987654321098765432109876543210\n-                                                     x1000000x101xx01xxxxxxxxxxxxxxxx\n-                                                     addva.  */\n-                                                  return 2351;\n+                                                  if (((word >> 22) & 0x1) == 0)\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         x1000000x0010x01xxxxxxxxxxxxxxxx\n+                                                         addva.  */\n+                                                      return 2350;\n+                                                    }\n+                                                  else\n+                                                    {\n+                                                      /* 33222222222211111111110000000000\n+                                                         10987654321098765432109876543210\n+                                                         x1000000x1010x01xxxxxxxxxxxxxxxx\n+                                                         addva.  */\n+                                                      return 2351;\n+                                                    }\n                                                 }\n                                             }\n                                         }\n+                                      else\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             x1000000xx0x1x0xxxxxxxxxxxxxxxxx\n+                                             zero.  */\n+                                          return 2380;\n+                                        }\n                                     }\n                                   else\n                                     {\n@@ -2753,15 +2764,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlurb.  */\n-                                                      return 2420;\n+                                                      return 2421;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlur.  */\n-                                                      return 2428;\n+                                                      return 2429;\n                                                     }\n                                                 }\n                                               else\n@@ -2772,15 +2783,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          01011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlurh.  */\n-                                                      return 2424;\n+                                                      return 2425;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          11011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlur.  */\n-                                                      return 2431;\n+                                                      return 2432;\n                                                     }\n                                                 }\n                                             }\n@@ -2860,15 +2871,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapurb.  */\n-                                                      return 2421;\n+                                                      return 2422;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapur.  */\n-                                                      return 2429;\n+                                                      return 2430;\n                                                     }\n                                                 }\n                                               else\n@@ -2879,15 +2890,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          01011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapurh.  */\n-                                                      return 2425;\n+                                                      return 2426;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          11011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapur.  */\n-                                                      return 2432;\n+                                                      return 2433;\n                                                     }\n                                                 }\n                                             }\n@@ -2970,15 +2981,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001100xxxxxxxxx00xxxxxxxxxx\n                                                          ldapursb.  */\n-                                                      return 2423;\n+                                                      return 2424;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001100xxxxxxxxx00xxxxxxxxxx\n                                                          ldapursw.  */\n-                                                      return 2430;\n+                                                      return 2431;\n                                                     }\n                                                 }\n                                               else\n@@ -2987,7 +2998,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x1011001100xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursh.  */\n-                                                  return 2427;\n+                                                  return 2428;\n                                                 }\n                                             }\n                                           else\n@@ -2998,15 +3009,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0011001110xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursb.  */\n-                                                  return 2422;\n+                                                  return 2423;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1011001110xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursh.  */\n-                                                  return 2426;\n+                                                  return 2427;\n                                                 }\n                                             }\n                                         }\n@@ -3492,15 +3503,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              xxx11010x00xxxxxx0xx10xxxxxxxxxx\n                                              setf8.  */\n-                                          return 2418;\n+                                          return 2419;\n                                         }\n                                       else\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n                                              xxx11010x00xxxxxx1xx10xxxxxxxxxx\n                                              setf16.  */\n-                                          return 2419;\n+                                          return 2420;\n                                         }\n                                     }\n                                   else\n@@ -3646,7 +3657,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              xxx11010000xxxxxxxxx01xxxxxxxxxx\n                                              rmif.  */\n-                                          return 2417;\n+                                          return 2418;\n                                         }\n                                       else\n                                         {\n@@ -4695,7 +4706,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x01x1xxxxx000110xxxxxxxxxx\n                                                                  usdot.  */\n-                                                              return 2437;\n+                                                              return 2438;\n                                                             }\n                                                         }\n                                                     }\n@@ -4769,7 +4780,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x01x1xxxxx000111xxxxxxxxxx\n                                                                  sudot.  */\n-                                                              return 2438;\n+                                                              return 2439;\n                                                             }\n                                                         }\n                                                     }\n@@ -7388,7 +7399,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              010001x0xx0xxxxx011110xxxxxxxxxx\n                                                              usdot.  */\n-                                                          return 2436;\n+                                                          return 2437;\n                                                         }\n                                                     }\n                                                 }\n@@ -9092,7 +9103,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  011001x0100xxx10101xxxxxxxxxxxxx\n                                                                  bfcvtnt.  */\n-                                                              return 2465;\n+                                                              return 2466;\n                                                             }\n                                                         }\n                                                       else\n@@ -9335,15 +9346,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  101001x00x1xxxxxx00xxxxxxxxxxxxx\n                                                  ld1rob.  */\n-                                              return 2441;\n+                                              return 2442;\n                                             }\n                                           else\n                                             {\n                                               /* 33222222222211111111110000000000\n                                                  10987654321098765432109876543210\n                                                  101001x01x1xxxxxx00xxxxxxxxxxxxx\n                                                  ld1roh.  */\n-                                              return 2442;\n+                                              return 2443;\n                                             }\n                                         }\n                                       else\n@@ -9575,7 +9586,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0011xxxxx010xxxxxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2462;\n+                                                      return 2463;\n                                                     }\n                                                   else\n                                                     {\n@@ -9596,15 +9607,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              011001x0111xxxxx010xx0xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2469;\n+                                                          return 2470;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              011001x0111xxxxx010xx1xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2468;\n+                                                          return 2469;\n                                                         }\n                                                     }\n                                                   else\n@@ -9659,7 +9670,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  x11001x0011xxxxx1x0xxxxxxxxxxxxx\n                                                  bfdot.  */\n-                                              return 2461;\n+                                              return 2462;\n                                             }\n                                           else\n                                             {\n@@ -9671,15 +9682,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx1x0xx0xxxxxxxxxx\n                                                          bfmlalb.  */\n-                                                      return 2467;\n+                                                      return 2468;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx1x0xx1xxxxxxxxxx\n                                                          bfmlalt.  */\n-                                                      return 2466;\n+                                                      return 2467;\n                                                     }\n                                                 }\n                                               else\n@@ -9730,15 +9741,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x00x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1rob.  */\n-                                                  return 2445;\n+                                                  return 2446;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x01x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1roh.  */\n-                                                  return 2446;\n+                                                  return 2447;\n                                                 }\n                                             }\n                                           else\n@@ -10097,7 +10108,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0101xxxxx111xxxxxxxxxxxxx\n                                                          fmmla.  */\n-                                                      return 2439;\n+                                                      return 2440;\n                                                     }\n                                                   else\n                                                     {\n@@ -10130,7 +10141,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0011xxxxx111xxxxxxxxxxxxx\n                                                          bfmmla.  */\n-                                                      return 2463;\n+                                                      return 2464;\n                                                     }\n                                                   else\n                                                     {\n@@ -10160,7 +10171,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx111xxxxxxxxxxxxx\n                                                          fmmla.  */\n-                                                      return 2440;\n+                                                      return 2441;\n                                                     }\n                                                   else\n                                                     {\n@@ -10289,7 +10300,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  000001x1101xxxxx000x00xxxxxxxxxx\n                                                                  zip1.  */\n-                                                              return 2449;\n+                                                              return 2450;\n                                                             }\n                                                           else\n                                                             {\n@@ -10299,15 +10310,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000010xxxxxxxxxx\n                                                                      uzp1.  */\n-                                                                  return 2451;\n+                                                                  return 2452;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000110xxxxxxxxxx\n                                                                      trn1.  */\n-                                                                  return 2453;\n+                                                                  return 2454;\n                                                                 }\n                                                             }\n                                                         }\n@@ -10319,7 +10330,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  000001x1101xxxxx000x01xxxxxxxxxx\n                                                                  zip2.  */\n-                                                              return 2450;\n+                                                              return 2451;\n                                                             }\n                                                           else\n                                                             {\n@@ -10329,15 +10340,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000011xxxxxxxxxx\n                                                                      uzp2.  */\n-                                                                  return 2452;\n+                                                                  return 2453;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000111xxxxxxxxxx\n                                                                      trn2.  */\n-                                                                  return 2454;\n+                                                                  return 2455;\n                                                                 }\n                                                             }\n                                                         }\n@@ -11385,15 +11396,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      010001x1000xxxxx100110xxxxxxxxxx\n                                                                      smmla.  */\n-                                                                  return 2433;\n+                                                                  return 2434;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      010001x1100xxxxx100110xxxxxxxxxx\n                                                                      usmmla.  */\n-                                                                  return 2435;\n+                                                                  return 2436;\n                                                                 }\n                                                             }\n                                                           else\n@@ -11402,7 +11413,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x1x10xxxxx100110xxxxxxxxxx\n                                                                  ummla.  */\n-                                                              return 2434;\n+                                                              return 2435;\n                                                             }\n                                                         }\n                                                     }\n@@ -12898,15 +12909,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x10x1xxxxx000xxxxxxxxxxxxx\n                                                      ld1row.  */\n-                                                  return 2443;\n+                                                  return 2444;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x11x1xxxxx000xxxxxxxxxxxxx\n                                                      ld1rod.  */\n-                                                  return 2444;\n+                                                  return 2445;\n                                                 }\n                                             }\n                                         }\n@@ -13280,15 +13291,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x10x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1row.  */\n-                                                  return 2447;\n+                                                  return 2448;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x11x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1rod.  */\n-                                                  return 2448;\n+                                                  return 2449;\n                                                 }\n                                             }\n                                         }\n@@ -14722,7 +14733,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                          10987654321098765432109876543210\n                                                                          011001x110001x10101xxxxxxxxxxxxx\n                                                                          bfcvt.  */\n-                                                                      return 2464;\n+                                                                      return 2465;\n                                                                     }\n                                                                 }\n                                                               else\n@@ -16791,7 +16802,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x1001xxxxxxxxxx\n                                                          smmla.  */\n-                                                      return 2455;\n+                                                      return 2456;\n                                                     }\n                                                 }\n                                             }\n@@ -16824,7 +16835,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x0101xxxxxxxxxx\n                                                          sdot.  */\n-                                                      return 2381;\n+                                                      return 2382;\n                                                     }\n                                                 }\n                                               else\n@@ -16898,7 +16909,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x1011xxxxxxxxxx\n                                                          usmmla.  */\n-                                                      return 2457;\n+                                                      return 2458;\n                                                     }\n                                                 }\n                                             }\n@@ -16931,7 +16942,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x0111xxxxxxxxxx\n                                                          usdot.  */\n-                                                      return 2458;\n+                                                      return 2459;\n                                                     }\n                                                 }\n                                               else\n@@ -16978,15 +16989,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              1x001110000xxxxxxxxxxxxxxxxxxxxx\n                                              eor3.  */\n-                                          return 2388;\n+                                          return 2389;\n                                         }\n                                       else\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n                                              1x001110100xxxxxxxxxxxxxxxxxxxxx\n                                              xar.  */\n-                                          return 2390;\n+                                          return 2391;\n                                         }\n                                     }\n                                   else\n@@ -16997,7 +17008,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              1x001110x10xxxxx0xxxxxxxxxxxxxxx\n                                              sm3ss1.  */\n-                                          return 2392;\n+                                          return 2393;\n                                         }\n                                       else\n                                         {\n@@ -17011,15 +17022,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          1x001110010xxxxx1xxx00xxxxxxxxxx\n                                                          sm3tt1a.  */\n-                                                      return 2393;\n+                                                      return 2394;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          1x001110110xxxxx1xxx00xxxxxxxxxx\n                                                          sha512su0.  */\n-                                                      return 2386;\n+                                                      return 2387;\n                                                     }\n                                                 }\n                                               else\n@@ -17028,7 +17039,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      1x001110x10xxxxx1xxx10xxxxxxxxxx\n                                                      sm3tt2a.  */\n-                                                  return 2395;\n+                                                  return 2396;\n                                                 }\n                                             }\n                                           else\n@@ -17041,15 +17052,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          1x001110010xxxxx1xxx01xxxxxxxxxx\n                                                          sm3tt1b.  */\n-                                                      return 2394;\n+                                                      return 2395;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          1x001110110xxxxx1xxx01xxxxxxxxxx\n                                                          sm4e.  */\n-                                                      return 2399;\n+                                                      return 2400;\n                                                     }\n                                                 }\n                                               else\n@@ -17058,7 +17069,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      1x001110x10xxxxx1xxx11xxxxxxxxxx\n                                                      sm3tt2b.  */\n-                                                  return 2396;\n+                                                  return 2397;\n                                                 }\n                                             }\n                                         }\n@@ -17239,7 +17250,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx101110xx0xxxxx100101xxxxxxxxxx\n                                                          udot.  */\n-                                                      return 2380;\n+                                                      return 2381;\n                                                     }\n                                                 }\n                                               else\n@@ -17270,7 +17281,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      xx101110xx0xxxxx101x01xxxxxxxxxx\n                                                      ummla.  */\n-                                                  return 2456;\n+                                                  return 2457;\n                                                 }\n                                               else\n                                                 {\n@@ -17289,7 +17300,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      xx101110xx0xxxxx1x1011xxxxxxxxxx\n                                                      bfmmla.  */\n-                                                  return 2472;\n+                                                  return 2473;\n                                                 }\n                                               else\n                                                 {\n@@ -17299,7 +17310,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx1011100x0xxxxx1x1111xxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2470;\n+                                                      return 2471;\n                                                     }\n                                                   else\n                                                     {\n@@ -17309,15 +17320,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              x01011101x0xxxxx1x1111xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2477;\n+                                                          return 2478;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              x11011101x0xxxxx1x1111xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2476;\n+                                                          return 2477;\n                                                         }\n                                                     }\n                                                 }\n@@ -17901,15 +17912,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                          10987654321098765432109876543210\n                                                                          000011101x1xxxx1011010xxxxxxxxxx\n                                                                          bfcvtn.  */\n-                                                                      return 2473;\n+                                                                      return 2474;\n                                                                     }\n                                                                   else\n                                                                     {\n                                                                       /* 33222222222211111111110000000000\n                                                                          10987654321098765432109876543210\n                                                                          010011101x1xxxx1011010xxxxxxxxxx\n                                                                          bfcvtn2.  */\n-                                                                      return 2474;\n+                                                                      return 2475;\n                                                                     }\n                                                                 }\n                                                             }\n@@ -18227,7 +18238,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                          10987654321098765432109876543210\n                                          1x001110xx1xxxxx0xxxxxxxxxxxxxxx\n                                          bcax.  */\n-                                      return 2391;\n+                                      return 2392;\n                                     }\n                                 }\n                               else\n@@ -18838,7 +18849,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  11001110xx1xxxxx100000xxxxxxxxxx\n                                                                  sha512h.  */\n-                                                              return 2384;\n+                                                              return 2385;\n                                                             }\n                                                         }\n                                                     }\n@@ -18890,7 +18901,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  11001110xx1xxxxx110000xxxxxxxxxx\n                                                                  sm3partw1.  */\n-                                                              return 2397;\n+                                                              return 2398;\n                                                             }\n                                                         }\n                                                     }\n@@ -19133,7 +19144,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100010xxxxxxxxxx\n                                                              sha512su1.  */\n-                                                          return 2387;\n+                                                          return 2388;\n                                                         }\n                                                     }\n                                                   else\n@@ -19209,7 +19220,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  1x0011100x1xxxxx110010xxxxxxxxxx\n                                                                  sm4ekey.  */\n-                                                              return 2400;\n+                                                              return 2401;\n                                                             }\n                                                         }\n                                                       else\n@@ -20035,7 +20046,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100001xxxxxxxxxx\n                                                              sha512h2.  */\n-                                                          return 2385;\n+                                                          return 2386;\n                                                         }\n                                                     }\n                                                   else\n@@ -20067,7 +20078,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  1x0011100x1xxxxx110001xxxxxxxxxx\n                                                                  sm3partw2.  */\n-                                                              return 2398;\n+                                                              return 2399;\n                                                             }\n                                                         }\n                                                       else\n@@ -20307,7 +20318,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100011xxxxxxxxxx\n                                                              rax1.  */\n-                                                          return 2389;\n+                                                          return 2390;\n                                                         }\n                                                     }\n                                                   else\n@@ -20339,15 +20350,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x01011100x1xxxxx110011xxxxxxxxxx\n                                                                  fmlal2.  */\n-                                                              return 2403;\n+                                                              return 2404;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x11011100x1xxxxx110011xxxxxxxxxx\n                                                                  fmlal2.  */\n-                                                              return 2407;\n+                                                              return 2408;\n                                                             }\n                                                         }\n                                                     }\n@@ -20369,15 +20380,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x01011101x1xxxxx110011xxxxxxxxxx\n                                                                  fmlsl2.  */\n-                                                              return 2404;\n+                                                              return 2405;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x11011101x1xxxxx110011xxxxxxxxxx\n                                                                  fmlsl2.  */\n-                                                              return 2408;\n+                                                              return 2409;\n                                                             }\n                                                         }\n                                                     }\n@@ -20416,15 +20427,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x00011100x1xxxxx111011xxxxxxxxxx\n                                                                  fmlal.  */\n-                                                              return 2401;\n+                                                              return 2402;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x10011100x1xxxxx111011xxxxxxxxxx\n                                                                  fmlal.  */\n-                                                              return 2405;\n+                                                              return 2406;\n                                                             }\n                                                         }\n                                                       else\n@@ -20446,15 +20457,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x00011101x1xxxxx111011xxxxxxxxxx\n                                                                  fmlsl.  */\n-                                                              return 2402;\n+                                                              return 2403;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x10011101x1xxxxx111011xxxxxxxxxx\n                                                                  fmlsl.  */\n-                                                              return 2406;\n+                                                              return 2407;\n                                                             }\n                                                         }\n                                                       else\n@@ -22262,15 +22273,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0001111xxxxxxxx0000x0xxxxxxxxxx\n                                                      fmlal.  */\n-                                                  return 2409;\n+                                                  return 2410;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1001111xxxxxxxx0000x0xxxxxxxxxx\n                                                      fmlal.  */\n-                                                  return 2413;\n+                                                  return 2414;\n                                                 }\n                                             }\n                                           else\n@@ -22292,15 +22303,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0001111xxxxxxxx0100x0xxxxxxxxxx\n                                                      fmlsl.  */\n-                                                  return 2410;\n+                                                  return 2411;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1001111xxxxxxxx0100x0xxxxxxxxxx\n                                                      fmlsl.  */\n-                                                  return 2414;\n+                                                  return 2415;\n                                                 }\n                                             }\n                                           else\n@@ -22806,15 +22817,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0101111xxxxxxxx1000x0xxxxxxxxxx\n                                                      fmlal2.  */\n-                                                  return 2411;\n+                                                  return 2412;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1101111xxxxxxxx1000x0xxxxxxxxxx\n                                                      fmlal2.  */\n-                                                  return 2415;\n+                                                  return 2416;\n                                                 }\n                                             }\n                                         }\n@@ -22836,15 +22847,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0101111xxxxxxxx1100x0xxxxxxxxxx\n                                                      fmlsl2.  */\n-                                                  return 2412;\n+                                                  return 2413;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1101111xxxxxxxx1100x0xxxxxxxxxx\n                                                      fmlsl2.  */\n-                                                  return 2416;\n+                                                  return 2417;\n                                                 }\n                                             }\n                                         }\n@@ -22900,15 +22911,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  xx001111xxxxxxxx1110x0xxxxxxxxxx\n                                                  sdot.  */\n-                                              return 2383;\n+                                              return 2384;\n                                             }\n                                           else\n                                             {\n                                               /* 33222222222211111111110000000000\n                                                  10987654321098765432109876543210\n                                                  xx101111xxxxxxxx1110x0xxxxxxxxxx\n                                                  udot.  */\n-                                              return 2382;\n+                                              return 2383;\n                                             }\n                                         }\n                                     }\n@@ -23011,15 +23022,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx00111100xxxxxx1111x0xxxxxxxxxx\n                                                          sudot.  */\n-                                                      return 2460;\n+                                                      return 2461;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          xx00111110xxxxxx1111x0xxxxxxxxxx\n                                                          usdot.  */\n-                                                      return 2459;\n+                                                      return 2460;\n                                                     }\n                                                 }\n                                               else\n@@ -23030,7 +23041,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx00111101xxxxxx1111x0xxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2471;\n+                                                      return 2472;\n                                                     }\n                                                   else\n                                                     {\n@@ -23040,15 +23051,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              x000111111xxxxxx1111x0xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2479;\n+                                                          return 2480;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              x100111111xxxxxx1111x0xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2478;\n+                                                          return 2479;\n                                                         }\n                                                     }\n                                                 }\n@@ -23686,8 +23697,8 @@ aarch64_find_next_opcode (const aarch64_opcode *opcode)\n     case 824: return NULL;\t\t/* fsqrt --> NULL.  */\n     case 832: value = 833; break;\t/* frintz --> frintz.  */\n     case 833: return NULL;\t\t/* frintz --> NULL.  */\n-    case 825: value = 2475; break;\t/* fcvt --> bfcvt.  */\n-    case 2475: return NULL;\t\t/* bfcvt --> NULL.  */\n+    case 825: value = 2476; break;\t/* fcvt --> bfcvt.  */\n+    case 2476: return NULL;\t\t/* bfcvt --> NULL.  */\n     case 834: value = 835; break;\t/* frinta --> frinta.  */\n     case 835: return NULL;\t\t/* frinta --> NULL.  */\n     case 836: value = 837; break;\t/* frintx --> frintx.  */\n@@ -24206,7 +24217,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 33:\n     case 34:\n     case 35:\n-    case 215:\n+    case 216:\n       return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 36:\n       return aarch64_ext_reglist (self, info, code, inst, errors);\n@@ -24253,6 +24264,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 188:\n     case 189:\n     case 214:\n+    case 215:\n       return aarch64_ext_imm (self, info, code, inst, errors);\n     case 44:\n     case 45:"
    },
    {
      "sha": "10880a0be962ec5f4dffac63290b240f2ce21ece",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -238,6 +238,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZA_HV_idx_src\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_size_10,FLD_SME_Q,FLD_SME_V,FLD_SME_Rv,FLD_imm4_5}, \"an SME horizontal or vertical vector access register\"},\n   {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZA_HV_idx_dest\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_size_10,FLD_SME_Q,FLD_SME_V,FLD_SME_Rv,FLD_imm4_2}, \"an SME horizontal or vertical vector access register\"},\n   {AARCH64_OPND_CLASS_PRED_REG, \"SME_Pm\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_Pm}, \"an SVE predicate register\"},\n+  {AARCH64_OPND_CLASS_SVE_REG, \"SME_list_of_64bit_tiles\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_zero_mask}, \"list of 64-bit ZA element tiles\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"TME_UIMM16\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm16}, \"a 16-bit unsigned immediate for TME tcancel\"},\n   {AARCH64_OPND_CLASS_SIMD_ELEMENT, \"SM3_IMM2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SM3_imm2}, \"an indexed SM3 vector immediate\"},\n   {AARCH64_OPND_CLASS_NIL, \"\", 0, {0}, \"DUMMY\"},"
    },
    {
      "sha": "9f32eb554f5c316d5259a554f7dfed5b0fb1d370",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -329,6 +329,7 @@ const aarch64_field fields[] =\n     { 15,  1 }, /* SME_V: (horizontal / vertical tiles), bit 15.  */\n     { 13,  2 }, /* SME_Rv: vector select register W12-W15, bits [14:13].  */\n     { 13,  3 }, /* SME Pm second source scalable predicate register P0-P7.  */\n+    { 0,   8 }, /* SME_zero_mask: list of up to 8 tile names separated by commas [7:0].  */\n     { 11,  2 }, /* rotate1: FCMLA immediate rotate.  */\n     { 13,  2 }, /* rotate2: Indexed element FCMLA immediate rotate.  */\n     { 12,  1 }, /* rotate3: FCADD immediate rotate.  */\n@@ -3139,6 +3140,46 @@ print_register_offset_address (char *buf, size_t size,\n   snprintf (buf, size, \"[%s, %s%s]\", base, offset, tb);\n }\n \n+/* Print ZA tiles from imm8 in ZERO instruction.\n+\n+   The preferred disassembly of this instruction uses the shortest list of tile\n+   names that represent the encoded immediate mask.\n+\n+   For example:\n+    * An all-ones immediate is disassembled as {ZA}.\n+    * An all-zeros immediate is disassembled as an empty list { }.\n+*/\n+static void\n+print_sme_za_list(char *buf, size_t size, int mask)\n+{\n+  const char* zan[] = { \"za\",    \"za0.h\", \"za1.h\", \"za0.s\",\n+                        \"za1.s\", \"za2.s\", \"za3.s\", \"za0.d\",\n+                        \"za1.d\", \"za2.d\", \"za3.d\", \"za4.d\",\n+                        \"za5.d\", \"za6.d\", \"za7.d\", \" \" };\n+  const int zan_v[] = { 0xff, 0x55, 0xaa, 0x11,\n+                        0x22, 0x44, 0x88, 0x01,\n+                        0x02, 0x04, 0x08, 0x10,\n+                        0x20, 0x40, 0x80, 0x00 };\n+  int i, k;\n+  const int ZAN_SIZE = sizeof(zan) / sizeof(zan[0]);\n+\n+  k = snprintf (buf, size, \"{\");\n+  for (i = 0; i < ZAN_SIZE; i++)\n+    {\n+      if ((mask & zan_v[i]) == zan_v[i])\n+        {\n+          mask &= ~zan_v[i];\n+          if (k > 1)\n+            k += snprintf (buf + k, size - k, \", %s\", zan[i]);\n+          else\n+            k += snprintf (buf + k, size - k, \"%s\", zan[i]);\n+        }\n+      if (mask == 0)\n+        break;\n+    }\n+  snprintf (buf + k, size - k, \"}\");\n+}\n+\n /* Generate the string representation of the operand OPNDS[IDX] for OPCODE\n    in *BUF.  The caller should pass in the maximum size of *BUF in SIZE.\n    PC, PCREL_P and ADDRESS are used to pass in and return information about\n@@ -3370,6 +3411,10 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n                 opnd->za_tile_vector.index.imm);\n       break;\n \n+    case AARCH64_OPND_SME_list_of_64bit_tiles:\n+      print_sme_za_list (buf, size, opnd->reg.regno);\n+      break;\n+\n     case AARCH64_OPND_CRn:\n     case AARCH64_OPND_CRm:\n       snprintf (buf, size, \"C%\" PRIi64, opnd->imm.value);"
    },
    {
      "sha": "62aad8bf39274b09f425268e0d54cb2a768613ba",
      "filename": "opcodes/aarch64-opc.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.h?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -158,6 +158,7 @@ enum aarch64_field_kind\n   FLD_SME_V,\n   FLD_SME_Rv,\n   FLD_SME_Pm,\n+  FLD_SME_zero_mask,\n   FLD_rotate1,\n   FLD_rotate2,\n   FLD_rotate3,"
    },
    {
      "sha": "93132206240c3bf0eabedd8ca8450af9dd488b3f",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "patch": "@@ -5136,6 +5136,8 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n   SME_INSN (\"mova\", 0xc0020000, 0xff3e0200, sme_misc, 0, OP3 (SVE_Zd, SVE_Pg3, SME_ZA_HV_idx_src), OP_SME_BHSDQ_PM_BHSDQ, 0, 0),\n   SME_INSN (\"mova\", 0xc0000000, 0xff3e0010, sme_misc, 0, OP3 (SME_ZA_HV_idx_dest, SVE_Pg3, SVE_Zn), OP_SME_BHSDQ_PM_BHSDQ, 0, 0),\n \n+  SME_INSN (\"zero\", 0xc0080000, 0xffffff00, sme_misc, 0, OP1 (SME_list_of_64bit_tiles), {}, 0, 0),\n+\n   /* SIMD Dot Product (optional in v8.2-A).  */\n   DOT_INSN (\"udot\", 0x2e009400, 0xbf20fc00, dotproduct, OP3 (Vd, Vn, Vm), QL_V3DOT, F_SIZEQ),\n   DOT_INSN (\"sdot\", 0xe009400,  0xbf20fc00, dotproduct, OP3 (Vd, Vn, Vm), QL_V3DOT, F_SIZEQ),\n@@ -5715,6 +5717,8 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n       \"an SME horizontal or vertical vector access register\")\t\\\n     Y(PRED_REG, regno, \"SME_Pm\", 0, F(FLD_SME_Pm),\t\t\t\\\n       \"an SVE predicate register\")\t\t\t\t\t\\\n+    Y(SVE_REG, imm, \"SME_list_of_64bit_tiles\", 0,\t\\\n+      F(FLD_SME_zero_mask), \"list of 64-bit ZA element tiles\")\t\t\t\t\t\\\n     Y(IMMEDIATE, imm, \"TME_UIMM16\", 0, F(FLD_imm16),\t\t\t\\\n       \"a 16-bit unsigned immediate for TME tcancel\")\t\t\t\\\n     Y(SIMD_ELEMENT, reglane, \"SM3_IMM2\", 0, F(FLD_SM3_imm2),\t\t\\"
    }
  ]
}