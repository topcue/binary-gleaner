{
  "sha": "91f94053dd72ea88a4d282f94836bc4c0d6c0785",
  "node_id": "C_kwDOANOeidoAKDkxZjk0MDUzZGQ3MmVhODhhNGQyODJmOTQ4MzZiYzRjMGQ2YzA3ODU",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2022-01-17T02:16:02Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2022-01-18T18:44:38Z"
    },
    "message": "gdbserver: introduce remote_debug_printf\n\nAdd remote_debug_printf, and use it for all debug messages controlled by\nremote_debug.\n\nChange remote_debug to be a bool, which is trivial in this case.\n\nChange-Id: I90de13cb892faec3830047b571661822b126d6e8",
    "tree": {
      "sha": "e2dbe3514f069073026ff19152446e6763296d55",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e2dbe3514f069073026ff19152446e6763296d55"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/91f94053dd72ea88a4d282f94836bc4c0d6c0785",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91f94053dd72ea88a4d282f94836bc4c0d6c0785",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/91f94053dd72ea88a4d282f94836bc4c0d6c0785",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91f94053dd72ea88a4d282f94836bc4c0d6c0785/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c058728c31684d08da396f1bf50fabaa196dc9d9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c058728c31684d08da396f1bf50fabaa196dc9d9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c058728c31684d08da396f1bf50fabaa196dc9d9"
    }
  ],
  "stats": {
    "total": 145,
    "additions": 48,
    "deletions": 97
  },
  "files": [
    {
      "sha": "195c7e9a683870ed04b84787ab7e405dc3c100fb",
      "filename": "gdbserver/debug.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91f94053dd72ea88a4d282f94836bc4c0d6c0785/gdbserver/debug.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91f94053dd72ea88a4d282f94836bc4c0d6c0785/gdbserver/debug.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/debug.cc?ref=91f94053dd72ea88a4d282f94836bc4c0d6c0785",
      "patch": "@@ -20,7 +20,7 @@\n #include <chrono>\n \n #if !defined (IN_PROCESS_AGENT)\n-int remote_debug = 0;\n+bool remote_debug = false;\n #endif\n \n /* Output file for debugging.  Default to standard error.  */"
    },
    {
      "sha": "d924275210996e5e9b82ef895e359f4d9dc06e67",
      "filename": "gdbserver/debug.h",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91f94053dd72ea88a4d282f94836bc4c0d6c0785/gdbserver/debug.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91f94053dd72ea88a4d282f94836bc4c0d6c0785/gdbserver/debug.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/debug.h?ref=91f94053dd72ea88a4d282f94836bc4c0d6c0785",
      "patch": "@@ -20,7 +20,13 @@\n #define GDBSERVER_DEBUG_H\n \n #if !defined (IN_PROCESS_AGENT)\n-extern int remote_debug;\n+extern bool remote_debug;\n+\n+/* Print a \"remote\" debug statement.  */\n+\n+#define remote_debug_printf(fmt, ...) \\\n+  debug_prefixed_printf_cond (remote_debug, \\\n+\t\t\t      \"remote\", fmt, ##__VA_ARGS__)\n \n /* Switch all debug output to DEBUG_FILE.  If DEBUG_FILE is nullptr or an\n    empty string, or if the file cannot be opened, then debug output is sent to"
    },
    {
      "sha": "3be733f76f93e94f6e28d57718720e378c00b489",
      "filename": "gdbserver/notif.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91f94053dd72ea88a4d282f94836bc4c0d6c0785/gdbserver/notif.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91f94053dd72ea88a4d282f94836bc4c0d6c0785/gdbserver/notif.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/notif.cc?ref=91f94053dd72ea88a4d282f94836bc4c0d6c0785",
      "patch": "@@ -102,9 +102,8 @@ handle_notif_ack (char *own_buf, int packet_len)\n       struct notif_event *head = np->queue.front ();\n       np->queue.pop_front ();\n \n-      if (remote_debug)\n-\tdebug_printf (\"%s: acking %d\\n\", np->ack_name,\n-\t\t      (int) np->queue.size ());\n+      remote_debug_printf (\"%s: acking %d\", np->ack_name,\n+\t\t\t   (int) np->queue.size ());\n \n       delete head;\n     }\n@@ -122,9 +121,8 @@ notif_event_enque (struct notif_server *notif,\n {\n   notif->queue.push_back (event);\n \n-  if (remote_debug)\n-    debug_printf (\"pending events: %s %d\\n\", notif->notif_name,\n-\t\t  (int) notif->queue.size ());\n+  remote_debug_printf (\"pending events: %s %d\", notif->notif_name,\n+\t\t       (int) notif->queue.size ());\n \n }\n "
    },
    {
      "sha": "3004130fb25b9435707956419375370f424fccc1",
      "filename": "gdbserver/remote-utils.cc",
      "status": "modified",
      "additions": 13,
      "deletions": 42,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91f94053dd72ea88a4d282f94836bc4c0d6c0785/gdbserver/remote-utils.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91f94053dd72ea88a4d282f94836bc4c0d6c0785/gdbserver/remote-utils.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/remote-utils.cc?ref=91f94053dd72ea88a4d282f94836bc4c0d6c0785",
      "patch": "@@ -670,22 +670,15 @@ putpkt_binary_1 (char *buf, int cnt, int is_notif)\n       if (cs.noack_mode || is_notif)\n \t{\n \t  /* Don't expect an ack then.  */\n-\t  if (remote_debug)\n-\t    {\n-\t      if (is_notif)\n-\t\tdebug_printf (\"putpkt (\\\"%s\\\"); [notif]\\n\", buf2);\n-\t      else\n-\t\tdebug_printf (\"putpkt (\\\"%s\\\"); [noack mode]\\n\", buf2);\n-\t      debug_flush ();\n-\t    }\n+\t  if (is_notif)\n+\t    remote_debug_printf (\"putpkt (\\\"%s\\\"); [notif]\", buf2);\n+\t  else\n+\t    remote_debug_printf (\"putpkt (\\\"%s\\\"); [noack mode]\", buf2);\n+\n \t  break;\n \t}\n \n-      if (remote_debug)\n-\t{\n-\t  debug_printf (\"putpkt (\\\"%s\\\"); [looking for ack]\\n\", buf2);\n-\t  debug_flush ();\n-\t}\n+      remote_debug_printf (\"putpkt (\\\"%s\\\"); [looking for ack]\", buf2);\n \n       cc = readchar ();\n \n@@ -695,11 +688,7 @@ putpkt_binary_1 (char *buf, int cnt, int is_notif)\n \t  return -1;\n \t}\n \n-      if (remote_debug)\n-\t{\n-\t  debug_printf (\"[received '%c' (0x%x)]\\n\", cc, cc);\n-\t  debug_flush ();\n-\t}\n+      remote_debug_printf (\"[received '%c' (0x%x)]\", cc, cc);\n \n       /* Check for an input interrupt while we're here.  */\n       if (cc == '\\003' && current_thread != NULL)\n@@ -868,8 +857,7 @@ readchar (void)\n \t{\n \t  if (readchar_bufcnt == 0)\n \t    {\n-\t      if (remote_debug)\n-\t\tdebug_printf (\"readchar: Got EOF\\n\");\n+\t      remote_debug_printf (\"readchar: Got EOF\");\n \t    }\n \t  else\n \t    perror (\"readchar\");\n@@ -950,11 +938,8 @@ getpkt (char *buf)\n \n \t  if (c == '$')\n \t    break;\n-\t  if (remote_debug)\n-\t    {\n-\t      debug_printf (\"[getpkt: discarding char '%c']\\n\", c);\n-\t      debug_flush ();\n-\t    }\n+\n+\t  remote_debug_printf (\"[getpkt: discarding char '%c']\", c);\n \n \t  if (c < 0)\n \t    return -1;\n@@ -997,29 +982,15 @@ getpkt (char *buf)\n \n   if (!cs.noack_mode)\n     {\n-      if (remote_debug)\n-\t{\n-\t  debug_printf (\"getpkt (\\\"%s\\\");  [sending ack] \\n\", buf);\n-\t  debug_flush ();\n-\t}\n+      remote_debug_printf (\"getpkt (\\\"%s\\\");  [sending ack]\", buf);\n \n       if (write_prim (\"+\", 1) != 1)\n \treturn -1;\n \n-      if (remote_debug)\n-\t{\n-\t  debug_printf (\"[sent ack]\\n\");\n-\t  debug_flush ();\n-\t}\n+      remote_debug_printf (\"[sent ack]\");\n     }\n   else\n-    {\n-      if (remote_debug)\n-\t{\n-\t  debug_printf (\"getpkt (\\\"%s\\\");  [no ack sent] \\n\", buf);\n-\t  debug_flush ();\n-\t}\n-    }\n+    remote_debug_printf (\"getpkt (\\\"%s\\\");  [no ack sent]\", buf);\n \n   /* The readchar above may have already read a '\\003' out of the socket\n      and moved it to the local buffer.  For example, when GDB sends"
    },
    {
      "sha": "4177239f4a62d7ff8956c430df41be7f5cdbd67f",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 23,
      "deletions": 47,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91f94053dd72ea88a4d282f94836bc4c0d6c0785/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91f94053dd72ea88a4d282f94836bc4c0d6c0785/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=91f94053dd72ea88a4d282f94836bc4c0d6c0785",
      "patch": "@@ -736,13 +736,9 @@ handle_general_set (char *own_buf)\n       std::string final_var = hex2str (p);\n       std::string var_name, var_value;\n \n-      if (remote_debug)\n-\t{\n-\t  debug_printf (_(\"[QEnvironmentHexEncoded received '%s']\\n\"), p);\n-\t  debug_printf (_(\"[Environment variable to be set: '%s']\\n\"),\n-\t\t\tfinal_var.c_str ());\n-\t  debug_flush ();\n-\t}\n+      remote_debug_printf (\"[QEnvironmentHexEncoded received '%s']\", p);\n+      remote_debug_printf (\"[Environment variable to be set: '%s']\",\n+\t\t\t   final_var.c_str ());\n \n       size_t pos = final_var.find ('=');\n       if (pos == std::string::npos)\n@@ -767,13 +763,9 @@ handle_general_set (char *own_buf)\n       const char *p = own_buf + sizeof (\"QEnvironmentUnset:\") - 1;\n       std::string varname = hex2str (p);\n \n-      if (remote_debug)\n-\t{\n-\t  debug_printf (_(\"[QEnvironmentUnset received '%s']\\n\"), p);\n-\t  debug_printf (_(\"[Environment variable to be unset: '%s']\\n\"),\n-\t\t\tvarname.c_str ());\n-\t  debug_flush ();\n-\t}\n+      remote_debug_printf (\"[QEnvironmentUnset received '%s']\", p);\n+      remote_debug_printf (\"[Environment variable to be unset: '%s']\",\n+\t\t\t   varname.c_str ());\n \n       our_environ.unset (varname.c_str ());\n \n@@ -783,11 +775,7 @@ handle_general_set (char *own_buf)\n \n   if (strcmp (own_buf, \"QStartNoAckMode\") == 0)\n     {\n-      if (remote_debug)\n-\t{\n-\t  debug_printf (\"[noack mode enabled]\\n\");\n-\t  debug_flush ();\n-\t}\n+      remote_debug_printf (\"[noack mode enabled]\");\n \n       cs.noack_mode = 1;\n       write_ok (own_buf);\n@@ -824,8 +812,7 @@ handle_general_set (char *own_buf)\n \n       non_stop = (req != 0);\n \n-      if (remote_debug)\n-\tdebug_printf (\"[%s mode enabled]\\n\", req_str);\n+      remote_debug_printf (\"[%s mode enabled]\", req_str);\n \n       write_ok (own_buf);\n       return;\n@@ -839,12 +826,9 @@ handle_general_set (char *own_buf)\n       unpack_varlen_hex (packet, &setting);\n       cs.disable_randomization = setting;\n \n-      if (remote_debug)\n-\t{\n-\t  debug_printf (cs.disable_randomization\n-\t\t\t? \"[address space randomization disabled]\\n\"\n-\t\t\t: \"[address space randomization enabled]\\n\");\n-\t}\n+      remote_debug_printf (cs.disable_randomization\n+\t\t\t   ? \"[address space randomization disabled]\"\n+\t\t\t       : \"[address space randomization enabled]\");\n \n       write_ok (own_buf);\n       return;\n@@ -872,8 +856,7 @@ handle_general_set (char *own_buf)\n \n       /* Update the flag.  */\n       use_agent = req;\n-      if (remote_debug)\n-\tdebug_printf (\"[%s agent]\\n\", req ? \"Enable\" : \"Disable\");\n+      remote_debug_printf (\"[%s agent]\", req ? \"Enable\" : \"Disable\");\n       write_ok (own_buf);\n       return;\n     }\n@@ -905,12 +888,8 @@ handle_general_set (char *own_buf)\n \n       cs.report_thread_events = (req == TRIBOOL_TRUE);\n \n-      if (remote_debug)\n-\t{\n-\t  const char *req_str = cs.report_thread_events ? \"enabled\" : \"disabled\";\n-\n-\t  debug_printf (\"[thread events are now %s]\\n\", req_str);\n-\t}\n+      remote_debug_printf (\"[thread events are now %s]\\n\",\n+\t\t\t   cs.report_thread_events ? \"enabled\" : \"disabled\");\n \n       write_ok (own_buf);\n       return;\n@@ -933,9 +912,8 @@ handle_general_set (char *own_buf)\n \t  return;\n \t}\n \n-      if (remote_debug)\n-\tdebug_printf (_(\"[Inferior will %s started with shell]\"),\n-\t\t      startup_with_shell ? \"be\" : \"not be\");\n+      remote_debug_printf (\"[Inferior will %s started with shell]\",\n+\t\t\t   startup_with_shell ? \"be\" : \"not be\");\n \n       write_ok (own_buf);\n       return;\n@@ -949,9 +927,8 @@ handle_general_set (char *own_buf)\n \t{\n \t  std::string path = hex2str (p);\n \n-\t  if (remote_debug)\n-\t    debug_printf (_(\"[Set the inferior's current directory to %s]\\n\"),\n-\t\t\t  path.c_str ());\n+\t  remote_debug_printf (\"[Set the inferior's current directory to %s]\",\n+\t\t\t       path.c_str ());\n \n \t  set_inferior_cwd (std::move (path));\n \t}\n@@ -961,9 +938,8 @@ handle_general_set (char *own_buf)\n \t     previously set cwd for the inferior.  */\n \t  set_inferior_cwd (\"\");\n \n-\t  if (remote_debug)\n-\t    debug_printf (_(\"\\\n-[Unset the inferior's current directory; will use gdbserver's cwd]\\n\"));\n+\t  remote_debug_printf (\"[Unset the inferior's current directory; will \"\n+\t\t\t       \"use gdbserver's cwd]\");\n \t}\n       write_ok (own_buf);\n \n@@ -1399,12 +1375,12 @@ handle_monitor_command (char *mon, char *own_buf)\n     }\n   else if (strcmp (mon, \"set remote-debug 1\") == 0)\n     {\n-      remote_debug = 1;\n+      remote_debug = true;\n       monitor_output (\"Protocol debug output enabled.\\n\");\n     }\n   else if (strcmp (mon, \"set remote-debug 0\") == 0)\n     {\n-      remote_debug = 0;\n+      remote_debug = false;\n       monitor_output (\"Protocol debug output disabled.\\n\");\n     }\n   else if (strcmp (mon, \"set event-loop-debug 1\") == 0)\n@@ -3827,7 +3803,7 @@ captured_main (int argc, char *argv[])\n \t    }\n \t}\n       else if (strcmp (*next_arg, \"--remote-debug\") == 0)\n-\tremote_debug = 1;\n+\tremote_debug = true;\n       else if (strcmp (*next_arg, \"--event-loop-debug\") == 0)\n \tdebug_event_loop = debug_event_loop_kind::ALL;\n       else if (startswith (*next_arg, \"--debug-file=\"))"
    }
  ]
}