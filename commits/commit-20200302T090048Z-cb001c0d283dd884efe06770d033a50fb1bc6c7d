{
  "sha": "cb001c0d283dd884efe06770d033a50fb1bc6c7d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2IwMDFjMGQyODNkZDg4NGVmZTA2NzcwZDAzM2E1MGZiMWJjNmM3ZA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-02T04:51:09Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-02T09:00:48Z"
    },
    "message": "bfd_cleanup for object_p\n\nThe object_p (and archive_p, core_file_p) functions are not supposed\nto have any target specific malloc'd memory attached to the bfd on\ntheir return.  This should be obvious on a failure return, but it's\nalso true for a successful return.  The reason is that even though the\nobject_p recognises the file, that particular target may not be used\nand thus the bfd won't be closed calling close_and_cleanup for the\ntarget that allocated the memory.\n\nIt turns out that the object_p bfd_target* return value isn't needed.\nIn all cases except ld/plugin.c the target is abfd->xvec and with\nld/plugin.c the target isn't used.  So this patch returns a cleanup\nfunction from object_p instead, called in bfd_check_format_matches to\ntidy the bfd before trying a different target match.  The only cleanup\nthat does anything at this stage is the alpha-vms one.\n\nbfd/\n\t* targets.c (bfd_cleanup): New typedef.\n\t(struct bfd <_bfd_check_format>): Return a bfd_cleanup.\n\t* libbfd-in.h (_bfd_no_cleanup): Define.\n\t* format.c (bfd_reinit): Add cleanup parameter, call it.\n\t(bfd_check_format_matches): Set cleanup from _bfd_check_format\n\tcall and pass to bfd_reinit.  Delete temp, use abfd->xvec instead.\n\t* aout-target.h (callback, object_p): Return bfd_cleanup.\n\t* aout-tic30.c (tic30_aout_callback, tic30_aout_object_p): Likewise.\n\t* archive.c (bfd_generic_archive_p): Likewise.\n\t* binary.c (binary_object_p): Likewise.\n\t* coff-alpha.c (alpha_ecoff_object_p): Likewise.\n\t* coff-ia64.c (ia64coff_object_p): Likewise.\n\t* coff-rs6000.c (_bfd_xcoff_archive_p, rs6000coff_core_p): Likewise.\n\t* coff-sh.c (coff_small_object_p): Likewise.\n\t* coff-stgo32.c (go32_check_format): Likewise.\n\t* coff64-rs6000.c (xcoff64_archive_p, rs6000coff_core_p),\n\t(xcoff64_core_p): Likewise.\n\t* coffgen.c (coff_real_object_p, coff_object_p): Likewise.\n\t* elf-bfd.h (bfd_elf32_object_p, bfd_elf32_core_file_p),\n\t(bfd_elf64_object_p, bfd_elf64_core_file_p): Likewise.\n\t* elfcode.h (elf_object_p): Likewise.\n\t* elfcore.h (elf_core_file_p): Likewise.\n\t* i386msdos.c (msdos_object_p): Likewise.\n\t* ihex.c (ihex_object_p): Likewise.\n\t* libaout.h (some_aout_object_p): Likewise.\n\t* libbfd-in.h (bfd_generic_archive_p, _bfd_dummy_target),\n\t(_bfd_vms_lib_alpha_archive_p, _bfd_vms_lib_ia64_archive_p): Likewise.\n\t* libbfd.c (_bfd_dummy_target): Likewise.\n\t* libcoff-in.h (coff_object_p): Likewise.\n\t* mach-o-aarch64.c (bfd_mach_o_arm64_object_p),\n\t(bfd_mach_o_arm64_core_p): Likewise.\n\t* mach-o-arm.c (bfd_mach_o_arm_object_p),\n\t(bfd_mach_o_arm_core_p): Likewise.\n\t* mach-o-i386.c (bfd_mach_o_i386_object_p),\n\t(bfd_mach_o_i386_core_p): Likewise.\n\t* mach-o-x86-64.c (bfd_mach_o_x86_64_object_p),\n\t(bfd_mach_o_x86_64_core_p): Likewise.\n\t* mach-o.c (bfd_mach_o_header_p, bfd_mach_o_gen_object_p),\n\t(bfd_mach_o_gen_core_p, bfd_mach_o_fat_archive_p): Likewise.\n\t* mach-o.h (bfd_mach_o_object_p, bfd_mach_o_core_p),\n\t(bfd_mach_o_fat_archive_p, bfd_mach_o_header_p): Likewise.\n\t* mmo.c (mmo_object_p): Likewise.\n\t* pef.c (bfd_pef_object_p, bfd_pef_xlib_object_p): Likewise.\n\t* peicode.h (coff_real_object_p, pe_ILF_object_p),\n\t(pe_bfd_object_p): Likewise.\n\t* plugin.c (ld_plugin_object_p, bfd_plugin_object_p): Likewise.\n\t* ppcboot.c (ppcboot_object_p): Likewise.\n\t* rs6000-core.c (rs6000coff_core_p): Likewise.\n\t* som.c (som_object_setup, som_object_p): Likewise.\n\t* srec.c (srec_object_p, symbolsrec_object_p): Likewise.\n\t* tekhex.c (tekhex_object_p): Likewise.\n\t* vms-alpha.c (alpha_vms_object_p): Likewise.\n\t* vms-lib.c (_bfd_vms_lib_archive_p, _bfd_vms_lib_alpha_archive_p),\n\t(_bfd_vms_lib_ia64_archive_p, _bfd_vms_lib_txt_archive_p): Likewise.\n\t* wasm-module.c (wasm_object_p): Likewise.\n\t* xsym.c (bfd_sym_object_p): Likewise.\n\t* xsym.h (bfd_sym_object_p): Likewise.\n\t* aoutx.h (some_aout_object_p): Likewise, and callback parameter\n\treturn type.\n\t* pdp11.c (some_aout_object_p): Likewise.\n\t* plugin.c (register_ld_plugin_object_p): Update object_p\n\tparameter type.\n\t* plugin.h (register_ld_plugin_object_p): Likewise.\n\t* bfd-in2.h: Regenerate.\n\t* libbfd.h: Regenerate.\n\t* libcoff.h: Regenerate.\nld/\n\t* plugin.c (plugin_object_p): Return a bfd_cleanup.\n\t(plugin_cleanup): New function.",
    "tree": {
      "sha": "77155357075b8f3b0f45446b16af3ab4216dde0d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/77155357075b8f3b0f45446b16af3ab4216dde0d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cb001c0d283dd884efe06770d033a50fb1bc6c7d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb001c0d283dd884efe06770d033a50fb1bc6c7d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cb001c0d283dd884efe06770d033a50fb1bc6c7d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb001c0d283dd884efe06770d033a50fb1bc6c7d/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2aa90762b71af7f04032d2bebed6470070d3d801",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2aa90762b71af7f04032d2bebed6470070d3d801",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2aa90762b71af7f04032d2bebed6470070d3d801"
    }
  ],
  "stats": {
    "total": 407,
    "additions": 247,
    "deletions": 160
  },
  "files": [
    {
      "sha": "a917631b3884ea5bfccc777373809d65fb519320",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 69,
      "deletions": 0,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -1,3 +1,72 @@\n+2020-03-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* targets.c (bfd_cleanup): New typedef.\n+\t(struct bfd <_bfd_check_format>): Return a bfd_cleanup.\n+\t* libbfd-in.h (_bfd_no_cleanup): Define.\n+\t* format.c (bfd_reinit): Add cleanup parameter, call it.\n+\t(bfd_check_format_matches): Set cleanup from _bfd_check_format\n+\tcall and pass to bfd_reinit.  Delete temp, use abfd->xvec instead.\n+\t* aout-target.h (callback, object_p): Return bfd_cleanup.\n+\t* aout-tic30.c (tic30_aout_callback, tic30_aout_object_p): Likewise.\n+\t* archive.c (bfd_generic_archive_p): Likewise.\n+\t* binary.c (binary_object_p): Likewise.\n+\t* coff-alpha.c (alpha_ecoff_object_p): Likewise.\n+\t* coff-ia64.c (ia64coff_object_p): Likewise.\n+\t* coff-rs6000.c (_bfd_xcoff_archive_p, rs6000coff_core_p): Likewise.\n+\t* coff-sh.c (coff_small_object_p): Likewise.\n+\t* coff-stgo32.c (go32_check_format): Likewise.\n+\t* coff64-rs6000.c (xcoff64_archive_p, rs6000coff_core_p),\n+\t(xcoff64_core_p): Likewise.\n+\t* coffgen.c (coff_real_object_p, coff_object_p): Likewise.\n+\t* elf-bfd.h (bfd_elf32_object_p, bfd_elf32_core_file_p),\n+\t(bfd_elf64_object_p, bfd_elf64_core_file_p): Likewise.\n+\t* elfcode.h (elf_object_p): Likewise.\n+\t* elfcore.h (elf_core_file_p): Likewise.\n+\t* i386msdos.c (msdos_object_p): Likewise.\n+\t* ihex.c (ihex_object_p): Likewise.\n+\t* libaout.h (some_aout_object_p): Likewise.\n+\t* libbfd-in.h (bfd_generic_archive_p, _bfd_dummy_target),\n+\t(_bfd_vms_lib_alpha_archive_p, _bfd_vms_lib_ia64_archive_p): Likewise.\n+\t* libbfd.c (_bfd_dummy_target): Likewise.\n+\t* libcoff-in.h (coff_object_p): Likewise.\n+\t* mach-o-aarch64.c (bfd_mach_o_arm64_object_p),\n+\t(bfd_mach_o_arm64_core_p): Likewise.\n+\t* mach-o-arm.c (bfd_mach_o_arm_object_p),\n+\t(bfd_mach_o_arm_core_p): Likewise.\n+\t* mach-o-i386.c (bfd_mach_o_i386_object_p),\n+\t(bfd_mach_o_i386_core_p): Likewise.\n+\t* mach-o-x86-64.c (bfd_mach_o_x86_64_object_p),\n+\t(bfd_mach_o_x86_64_core_p): Likewise.\n+\t* mach-o.c (bfd_mach_o_header_p, bfd_mach_o_gen_object_p),\n+\t(bfd_mach_o_gen_core_p, bfd_mach_o_fat_archive_p): Likewise.\n+\t* mach-o.h (bfd_mach_o_object_p, bfd_mach_o_core_p),\n+\t(bfd_mach_o_fat_archive_p, bfd_mach_o_header_p): Likewise.\n+\t* mmo.c (mmo_object_p): Likewise.\n+\t* pef.c (bfd_pef_object_p, bfd_pef_xlib_object_p): Likewise.\n+\t* peicode.h (coff_real_object_p, pe_ILF_object_p),\n+\t(pe_bfd_object_p): Likewise.\n+\t* plugin.c (ld_plugin_object_p, bfd_plugin_object_p): Likewise.\n+\t* ppcboot.c (ppcboot_object_p): Likewise.\n+\t* rs6000-core.c (rs6000coff_core_p): Likewise.\n+\t* som.c (som_object_setup, som_object_p): Likewise.\n+\t* srec.c (srec_object_p, symbolsrec_object_p): Likewise.\n+\t* tekhex.c (tekhex_object_p): Likewise.\n+\t* vms-alpha.c (alpha_vms_object_p): Likewise.\n+\t* vms-lib.c (_bfd_vms_lib_archive_p, _bfd_vms_lib_alpha_archive_p),\n+\t(_bfd_vms_lib_ia64_archive_p, _bfd_vms_lib_txt_archive_p): Likewise.\n+\t* wasm-module.c (wasm_object_p): Likewise.\n+\t* xsym.c (bfd_sym_object_p): Likewise.\n+\t* xsym.h (bfd_sym_object_p): Likewise.\n+\t* aoutx.h (some_aout_object_p): Likewise, and callback parameter\n+\treturn type.\n+\t* pdp11.c (some_aout_object_p): Likewise.\n+\t* plugin.c (register_ld_plugin_object_p): Update object_p\n+\tparameter type.\n+\t* plugin.h (register_ld_plugin_object_p): Likewise.\n+\t* bfd-in2.h: Regenerate.\n+\t* libbfd.h: Regenerate.\n+\t* libcoff.h: Regenerate.\n+\n 2020-03-02  Alan Modra  <amodra@gmail.com>\n \n \t* coff-alpha.c (alpha_ecoff_le_vec): Add SEC_SMALL_DATA to"
    },
    {
      "sha": "365202e0ce3364d22a1ef647c413d94921af54f8",
      "filename": "bfd/aout-target.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/aout-target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/aout-target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aout-target.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -34,7 +34,7 @@ extern reloc_howto_type * NAME (aout, reloc_name_lookup) (bfd *, const char *);\n    This routine is called from some_aout_object_p just before it returns.  */\n #ifndef MY_callback\n \n-static const bfd_target *\n+static bfd_cleanup\n MY (callback) (bfd *abfd)\n {\n   struct internal_exec *execp = exec_hdr (abfd);\n@@ -121,19 +121,19 @@ MY (callback) (bfd *abfd)\n   /* Don't set sizes now -- can't be sure until we know arch & mach.\n      Sizes get set in set_sizes callback, later.  */\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n #endif\n \n #ifndef MY_object_p\n /* Finish up the reading of an a.out file header.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n MY (object_p) (bfd *abfd)\n {\n   struct external_exec exec_bytes;\t/* Raw exec header from file.  */\n   struct internal_exec exec;\t\t/* Cleaned-up exec header.  */\n-  const bfd_target *target;\n+  bfd_cleanup cleanup;\n   size_t amt = EXEC_BYTES_SIZE;\n \n   if (bfd_bread ((void *) &exec_bytes, amt, abfd) != amt)\n@@ -164,7 +164,7 @@ MY (object_p) (bfd *abfd)\n   exec.a_info = SWAP_MAGIC (exec_bytes.e_info);\n #endif\n \n-  target = NAME (aout, some_aout_object_p) (abfd, &exec, MY (callback));\n+  cleanup = NAME (aout, some_aout_object_p) (abfd, &exec, MY (callback));\n \n #ifdef ENTRY_CAN_BE_ZERO\n   /* The NEWSOS3 entry-point is/was 0, which (amongst other lossage)\n@@ -185,7 +185,7 @@ MY (object_p) (bfd *abfd)\n     }\n #endif /* ENTRY_CAN_BE_ZERO */\n \n-  return target;\n+  return cleanup;\n }\n #define MY_object_p MY (object_p)\n #endif"
    },
    {
      "sha": "222d1f0e30d74c57bcc081cfc9170d4610d0fd8a",
      "filename": "bfd/aout-tic30.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/aout-tic30.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/aout-tic30.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aout-tic30.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -331,7 +331,7 @@ tic30_aout_reloc_howto (bfd *abfd,\n /* Set parameters about this a.out file that are machine-dependent.\n    This routine is called from some_aout_object_p just before it returns.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n tic30_aout_callback (bfd *abfd)\n {\n   struct internal_exec *execp = exec_hdr (abfd);\n@@ -388,7 +388,7 @@ tic30_aout_callback (bfd *abfd)\n       obj_datasec (abfd)->alignment_power = arch_align_power;\n       obj_bsssec (abfd)->alignment_power = arch_align_power;\n     }\n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n static bfd_reloc_status_type\n@@ -547,12 +547,12 @@ tic30_aout_final_link_relocate (reloc_howto_type *howto,\n \n /* Finish up the reading of an a.out file header.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n tic30_aout_object_p (bfd *abfd)\n {\n   struct external_exec exec_bytes;\t/* Raw exec header from file.  */\n   struct internal_exec exec;\t\t/* Cleaned-up exec header.  */\n-  const bfd_target *target;\n+  bfd_cleanup cleanup;\n   size_t amt = EXEC_BYTES_SIZE;\n \n   if (bfd_bread (& exec_bytes, amt, abfd) != amt)\n@@ -582,7 +582,7 @@ tic30_aout_object_p (bfd *abfd)\n   exec.a_info = SWAP_MAGIC (exec_bytes.e_info);\n #endif\n \n-  target = NAME (aout, some_aout_object_p) (abfd, &exec, tic30_aout_callback);\n+  cleanup = NAME (aout, some_aout_object_p) (abfd, &exec, tic30_aout_callback);\n \n #ifdef ENTRY_CAN_BE_ZERO\n   /* The NEWSOS3 entry-point is/was 0, which (amongst other lossage)\n@@ -603,7 +603,7 @@ tic30_aout_object_p (bfd *abfd)\n     }\n #endif\n \n-  return target;\n+  return cleanup;\n }\n \n /* Copy private section data.  This actually does nothing with the"
    },
    {
      "sha": "41ced3dc72aadd100996cd43aa4ff385172094ef",
      "filename": "bfd/aoutx.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/aoutx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/aoutx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aoutx.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -452,13 +452,13 @@ DESCRIPTION\n \thandle any last-minute setup.\n */\n \n-const bfd_target *\n+bfd_cleanup\n NAME (aout, some_aout_object_p) (bfd *abfd,\n \t\t\t\t struct internal_exec *execp,\n-\t\t\t\t const bfd_target *(*callback_to_real_object_p) (bfd *))\n+\t\t\t\t bfd_cleanup (*callback_to_real_object_p) (bfd *))\n {\n   struct aout_data_struct *rawptr, *oldrawptr;\n-  const bfd_target *result;\n+  bfd_cleanup result;\n   size_t amt = sizeof (* rawptr);\n \n   rawptr = (struct aout_data_struct *) bfd_zalloc (abfd, amt);\n@@ -591,7 +591,7 @@ NAME (aout, some_aout_object_p) (bfd *abfd,\n   adata (abfd)->segment_size = SEGMENT_SIZE;\n   adata (abfd)->exec_bytes_size = EXEC_BYTES_SIZE;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup\n \n   /* The architecture is encoded in various ways in various a.out variants,\n      or is not encoded at all in some of them.  The relocation size depends"
    },
    {
      "sha": "0c009f10de876b8374141d84b6540252b1f93e3c",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -842,7 +842,7 @@ _bfd_noarchive_openr_next_archived_file (bfd *archive,\n   return (bfd *) _bfd_ptr_bfd_null_error (archive);\n }\n \n-const bfd_target *\n+bfd_cleanup\n bfd_generic_archive_p (bfd *abfd)\n {\n   struct artdata *tdata_hold;\n@@ -924,7 +924,7 @@ bfd_generic_archive_p (bfd *abfd)\n \t}\n     }\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n /* Some constants for a 32 bit BSD archive structure.  We do not"
    },
    {
      "sha": "37114607b51521d51aecf36101e1b8e12efd027e",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -7295,6 +7295,8 @@ typedef struct bfd_link_info _bfd_link_info;\n /* Forward declaration.  */\n typedef struct flag_info flag_info;\n \n+typedef void (*bfd_cleanup) (bfd *);\n+\n typedef struct bfd_target\n {\n   /* Identifies the kind of target, e.g., SunOS4, Ultrix, etc.  */\n@@ -7359,9 +7361,9 @@ typedef struct bfd_target\n   /* Format dependent routines: these are vectors of entry points\n      within the target vector structure, one for each format to check.  */\n \n-  /* Check the format of a file being read.  Return a <<bfd_target *>> or zero.  */\n-  const struct bfd_target *\n-              (*_bfd_check_format[bfd_type_end]) (bfd *);\n+  /* Check the format of a file being read.  Return a <<bfd_cleanup>> on\n+     success or zero on failure.  */\n+  bfd_cleanup (*_bfd_check_format[bfd_type_end]) (bfd *);\n \n   /* Set the format of a file being written.  */\n   bfd_boolean (*_bfd_set_format[bfd_type_end]) (bfd *);"
    },
    {
      "sha": "999de0d8c41a4e7d8e5072de86983c1717ab900d",
      "filename": "bfd/binary.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/binary.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/binary.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/binary.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -53,7 +53,7 @@ binary_mkobject (bfd *abfd ATTRIBUTE_UNUSED)\n    was not defaulted.  That is, it must be explicitly specified as\n    being binary.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n binary_object_p (bfd *abfd)\n {\n   struct stat statbuf;\n@@ -86,7 +86,7 @@ binary_object_p (bfd *abfd)\n \n   abfd->tdata.any = (void *) sec;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n #define binary_close_and_cleanup     _bfd_generic_close_and_cleanup"
    },
    {
      "sha": "b86a8a259b584dd30481389b398fa4f6851ca932",
      "filename": "bfd/coff-alpha.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-alpha.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -398,10 +398,10 @@ static reloc_howto_type alpha_howto_table[] =\n \f\n /* Recognize an Alpha ECOFF file.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n alpha_ecoff_object_p (bfd *abfd)\n {\n-  static const bfd_target *ret;\n+  bfd_cleanup ret;\n \n   ret = coff_object_p (abfd);\n "
    },
    {
      "sha": "07e54037f9cd0777edbb4933cec2c0fbd404c8fc",
      "filename": "bfd/coff-ia64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-ia64.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -67,7 +67,7 @@ in_reloc_p (bfd * abfd ATTRIBUTE_UNUSED,\n \n #include \"coffcode.h\"\n \n-static const bfd_target *\n+static bfd_cleanup\n ia64coff_object_p (bfd *abfd)\n {\n #ifdef COFF_IMAGE_WITH_PE"
    },
    {
      "sha": "2dd68e08c3b8a3c0832798f9e56ab827740fd1a0",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -38,7 +38,7 @@ extern bfd_boolean _bfd_xcoff_is_local_label_name (bfd *, const char *);\n extern reloc_howto_type *_bfd_xcoff_reloc_type_lookup\n   (bfd *, bfd_reloc_code_real_type);\n extern bfd_boolean _bfd_xcoff_slurp_armap (bfd *);\n-extern const bfd_target *_bfd_xcoff_archive_p (bfd *);\n+extern bfd_cleanup _bfd_xcoff_archive_p (bfd *);\n extern void * _bfd_xcoff_read_ar_hdr (bfd *);\n extern bfd *_bfd_xcoff_openr_next_archived_file (bfd *, bfd *);\n extern int _bfd_xcoff_stat_arch_elt (bfd *, struct stat *);\n@@ -77,7 +77,7 @@ void xcoff_rtype2howto (arelent *, struct internal_reloc *);\n #define coff_mkobject _bfd_xcoff_mkobject\n #define coff_bfd_is_local_label_name _bfd_xcoff_is_local_label_name\n #ifdef AIX_CORE\n-extern const bfd_target * rs6000coff_core_p (bfd *abfd);\n+extern bfd_cleanup rs6000coff_core_p (bfd *abfd);\n extern bfd_boolean rs6000coff_core_file_matches_executable_p\n   (bfd *cbfd, bfd *ebfd);\n extern char *rs6000coff_core_file_failing_command (bfd *abfd);\n@@ -1380,7 +1380,7 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n \n /* See if this is an XCOFF archive.  */\n \n-const bfd_target *\n+bfd_cleanup\n _bfd_xcoff_archive_p (bfd *abfd)\n {\n   struct artdata *tdata_hold;\n@@ -1481,7 +1481,7 @@ _bfd_xcoff_archive_p (bfd *abfd)\n       return NULL;\n     }\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n /* Read the archive header in an XCOFF archive.  */"
    },
    {
      "sha": "b46a5e34f39f7f9d7d1de5011b188d270dc2a482",
      "filename": "bfd/coff-sh.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-sh.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -3044,7 +3044,7 @@ CREATE_LITTLE_COFF_TARGET_VEC (TARGET_SYM, TARGET_SHL_NAME, BFD_IS_RELAXABLE,\n /* Only recognize the small versions if the target was not defaulted.\n    Otherwise we won't recognize the non default endianness.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n coff_small_object_p (bfd *abfd)\n {\n   if (abfd->target_defaulted)"
    },
    {
      "sha": "676022872aea4f58899da7ab73ad2294d74b2fe8",
      "filename": "bfd/coff-stgo32.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff-stgo32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff-stgo32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-stgo32.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -93,7 +93,7 @@ create_go32_stub (bfd *);\n #define COFF_ADJUST_AUX_OUT_PRE adjust_aux_out_pre\n #define COFF_ADJUST_AUX_OUT_POST adjust_aux_out_post\n \n-static const bfd_target *go32_check_format (bfd *);\n+static bfd_cleanup go32_check_format (bfd *);\n \n #define COFF_CHECK_FORMAT go32_check_format\n \n@@ -406,7 +406,7 @@ go32_stubbed_coff_bfd_copy_private_bfd_data (bfd *ibfd, bfd *obfd)\n /* coff_object_p only checks 2 bytes F_MAGIC at GO32_STUBSIZE inside the file\n    which is too fragile.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n go32_check_format (bfd *abfd)\n {\n   char mz[2];"
    },
    {
      "sha": "cca876eb4e083335bbc78d5ab68f98785200f1db",
      "filename": "bfd/coff64-rs6000.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff64-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coff64-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff64-rs6000.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -155,7 +155,7 @@ static bfd_boolean xcoff64_ppc_relocate_section\n    asection **);\n static bfd_boolean xcoff64_slurp_armap\n   (bfd *);\n-static const bfd_target *xcoff64_archive_p\n+static bfd_cleanup xcoff64_archive_p\n   (bfd *);\n static bfd *xcoff64_openr_next_archived_file\n   (bfd *, bfd *);\n@@ -238,7 +238,7 @@ bfd_boolean (*xcoff64_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION])\n #define coff_bfd_reloc_type_lookup xcoff64_reloc_type_lookup\n #define coff_bfd_reloc_name_lookup xcoff64_reloc_name_lookup\n #ifdef AIX_CORE\n-extern const bfd_target * rs6000coff_core_p\n+extern bfd_cleanup rs6000coff_core_p\n   (bfd *abfd);\n extern bfd_boolean rs6000coff_core_file_matches_executable_p\n   (bfd *cbfd, bfd *ebfd);\n@@ -1991,7 +1991,7 @@ xcoff64_slurp_armap (bfd *abfd)\n \n /* See if this is an NEW XCOFF archive.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n xcoff64_archive_p (bfd *abfd)\n {\n   struct artdata *tdata_hold;\n@@ -2058,7 +2058,7 @@ xcoff64_archive_p (bfd *abfd)\n       return NULL;\n     }\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n \n@@ -2805,7 +2805,7 @@ const bfd_target rs6000_xcoff64_vec =\n     &bfd_xcoff_backend_data,\n   };\n \n-extern const bfd_target *xcoff64_core_p\n+extern bfd_cleanup xcoff64_core_p\n   (bfd *);\n extern bfd_boolean xcoff64_core_file_matches_executable_p\n   (bfd *, bfd *);"
    },
    {
      "sha": "6d84d512844411ac1ee7d46e00885aa92ee2bd9b",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -225,12 +225,12 @@ make_a_section_from_file (bfd *abfd,\n \n /* Read in a COFF object and make it into a BFD.  This is used by\n    ECOFF as well.  */\n-const bfd_target *\n+bfd_cleanup\n coff_real_object_p (bfd *,\n \t\t    unsigned,\n \t\t    struct internal_filehdr *,\n \t\t    struct internal_aouthdr *);\n-const bfd_target *\n+bfd_cleanup\n coff_real_object_p (bfd *abfd,\n \t\t    unsigned nscns,\n \t\t    struct internal_filehdr *internal_f,\n@@ -300,7 +300,7 @@ coff_real_object_p (bfd *abfd,\n     }\n \n   _bfd_coff_free_symbols (abfd);\n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n \n  fail:\n   _bfd_coff_free_symbols (abfd);\n@@ -309,13 +309,13 @@ coff_real_object_p (bfd *abfd,\n   abfd->tdata.any = tdata_save;\n   abfd->flags = oflags;\n   abfd->start_address = ostart;\n-  return (const bfd_target *) NULL;\n+  return NULL;\n }\n \n /* Turn a COFF file into a BFD, but fail with bfd_error_wrong_format if it is\n    not a COFF file.  This is also used by ECOFF.  */\n \n-const bfd_target *\n+bfd_cleanup\n coff_object_p (bfd *abfd)\n {\n   bfd_size_type filhsz;"
    },
    {
      "sha": "38a9aa060192818dc9f09da0c95051840361ae9f",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -2400,9 +2400,9 @@ extern bfd_boolean _bfd_elf_init_file_header (bfd *, struct bfd_link_info *);\n \n extern bfd_boolean _bfd_elf_final_write_processing (bfd *);\n \n-extern const bfd_target *bfd_elf32_object_p\n+extern bfd_cleanup bfd_elf32_object_p\n   (bfd *);\n-extern const bfd_target *bfd_elf32_core_file_p\n+extern bfd_cleanup bfd_elf32_core_file_p\n   (bfd *);\n extern char *bfd_elf32_core_file_failing_command\n   (bfd *);\n@@ -2448,9 +2448,9 @@ extern void bfd_elf32_write_relocs\n extern bfd_boolean bfd_elf32_slurp_reloc_table\n   (bfd *, asection *, asymbol **, bfd_boolean);\n \n-extern const bfd_target *bfd_elf64_object_p\n+extern bfd_cleanup bfd_elf64_object_p\n   (bfd *);\n-extern const bfd_target *bfd_elf64_core_file_p\n+extern bfd_cleanup bfd_elf64_core_file_p\n   (bfd *);\n extern char *bfd_elf64_core_file_failing_command\n   (bfd *);"
    },
    {
      "sha": "600abfe836e4bafed2a4d66777835da7257277ba",
      "filename": "bfd/elfcode.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/elfcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/elfcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcode.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -497,7 +497,7 @@ elf_file_p (Elf_External_Ehdr *x_ehdrp)\n    any side effects in ABFD, or any data it points to (like tdata), if the\n    file does not match the target vector.  */\n \n-const bfd_target *\n+bfd_cleanup\n elf_object_p (bfd *abfd)\n {\n   Elf_External_Ehdr x_ehdr;\t/* Elf file header, external form */\n@@ -853,7 +853,7 @@ elf_object_p (bfd *abfd)\n \t    s->flags |= SEC_DEBUGGING;\n \t}\n     }\n-  return target;\n+  return _bfd_no_cleanup;\n \n  got_wrong_format_error:\n   bfd_set_error (bfd_error_wrong_format);"
    },
    {
      "sha": "44707ebb60fbd7659693fcffd06ef0064c4cc42f",
      "filename": "bfd/elfcore.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/elfcore.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/elfcore.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcore.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -83,7 +83,7 @@ elf_core_file_matches_executable_p (bfd *core_bfd, bfd *exec_bfd)\n     that allow standard bfd access to the general registers (.reg) and the\n     floating point registers (.reg2).  */\n \n-const bfd_target *\n+bfd_cleanup\n elf_core_file_p (bfd *abfd)\n {\n   Elf_External_Ehdr x_ehdr;\t/* Elf file header, external form.  */\n@@ -314,7 +314,7 @@ elf_core_file_p (bfd *abfd)\n \n   /* Save the entry point from the ELF header.  */\n   abfd->start_address = i_ehdrp->e_entry;\n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n \n  wrong:\n   bfd_set_error (bfd_error_wrong_format);"
    },
    {
      "sha": "b181742f3b1699660b4e493f60f81bc6dc7ca757",
      "filename": "bfd/format.c",
      "status": "modified",
      "additions": 18,
      "deletions": 16,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/format.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/format.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/format.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -140,13 +140,15 @@ bfd_preserve_save (bfd *abfd, struct bfd_preserve *preserve)\n /* Clear out a subset of BFD state.  */\n \n static void\n-bfd_reinit (bfd *abfd, unsigned int section_id)\n+bfd_reinit (bfd *abfd, unsigned int section_id, bfd_cleanup cleanup)\n {\n+  _bfd_section_id = section_id;\n+  if (cleanup)\n+    cleanup (abfd);\n   abfd->tdata.any = NULL;\n   abfd->arch_info = &bfd_default_arch_struct;\n   abfd->flags &= BFD_FLAGS_SAVED;\n   bfd_section_list_clear (abfd);\n-  _bfd_section_id = section_id;\n }\n \n /* Restores bfd state saved by bfd_preserve_save.  */\n@@ -220,6 +222,7 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n   int ar_match_index;\n   unsigned int initial_section_id = _bfd_section_id;\n   struct bfd_preserve preserve, preserve_match;\n+  bfd_cleanup cleanup = NULL;\n \n   if (matching != NULL)\n     *matching = NULL;\n@@ -258,9 +261,9 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n       if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET) != 0)\t/* rewind! */\n \tgoto err_ret;\n \n-      right_targ = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));\n+      cleanup = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));\n \n-      if (right_targ)\n+      if (cleanup)\n \tgoto ok_ret;\n \n       /* For a long time the code has dropped through to check all\n@@ -291,7 +294,6 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n \n   for (target = bfd_target_vector; *target != NULL; target++)\n     {\n-      const bfd_target *temp;\n       void **high_water;\n \n       /* The binary target matches anything, so don't return it when\n@@ -309,7 +311,7 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n       /* If we already tried a match, the bfd is modified and may\n \t have sections attached, which will confuse the next\n \t _bfd_check_format call.  */\n-      bfd_reinit (abfd, initial_section_id);\n+      bfd_reinit (abfd, initial_section_id, cleanup);\n       /* Free bfd_alloc memory too.  If we have matched and preserved\n \t a target then the high water mark is that much higher.  */\n       if (preserve_match.marker)\n@@ -325,10 +327,10 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n       if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET) != 0)\n \tgoto err_ret;\n \n-      temp = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));\n-      if (temp)\n+      cleanup = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));\n+      if (cleanup)\n \t{\n-\t  int match_priority = temp->match_priority;\n+\t  int match_priority = abfd->xvec->match_priority;\n #if BFD_SUPPORTS_PLUGINS\n \t  /* If this object can be handled by a plugin, give that the\n \t     lowest priority; objects both handled by a plugin and\n@@ -345,11 +347,11 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n \t      /* If this is the default target, accept it, even if\n \t\t other targets might match.  People who want those\n \t\t other targets have to set the GNUTARGET variable.  */\n-\t      if (temp == bfd_default_vector[0])\n+\t      if (abfd->xvec == bfd_default_vector[0])\n \t\tgoto ok_ret;\n \n \t      if (matching_vector)\n-\t\tmatching_vector[match_count] = temp;\n+\t\tmatching_vector[match_count] = abfd->xvec;\n \t      match_count++;\n \n \t      if (match_priority < best_match)\n@@ -360,7 +362,7 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n \t      if (match_priority <= best_match)\n \t\t{\n \t\t  /* This format checks out as ok!  */\n-\t\t  right_targ = temp;\n+\t\t  right_targ = abfd->xvec;\n \t\t  best_count++;\n \t\t}\n \t    }\n@@ -378,7 +380,7 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n \n \t  if (preserve_match.marker == NULL)\n \t    {\n-\t      match_targ = temp;\n+\t      match_targ = abfd->xvec;\n \t      if (!bfd_preserve_save (abfd, &preserve_match))\n \t\tgoto err_ret;\n \t    }\n@@ -467,12 +469,12 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n \t RIGHT_TARG again.  */\n       if (match_targ != right_targ)\n \t{\n-\t  bfd_reinit (abfd, initial_section_id);\n+\t  bfd_reinit (abfd, initial_section_id, cleanup);\n \t  bfd_release (abfd, preserve.marker);\n \t  if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET) != 0)\n \t    goto err_ret;\n-\t  match_targ = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));\n-\t  BFD_ASSERT (match_targ != NULL);\n+\t  cleanup = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));\n+\t  BFD_ASSERT (cleanup != NULL);\n \t}\n \n     ok_ret:"
    },
    {
      "sha": "5b56751cd30bd59f36337ab13548d8085cc894ad",
      "filename": "bfd/i386msdos.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/i386msdos.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/i386msdos.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/i386msdos.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -41,7 +41,7 @@ msdos_mkobject (bfd *abfd)\n   return aout_32_mkobject (abfd);\n }\n \n-static const bfd_target *\n+static bfd_cleanup\n msdos_object_p (bfd *abfd)\n {\n   struct external_DOS_hdr hdr;\n@@ -112,7 +112,7 @@ msdos_object_p (bfd *abfd)\n   bfd_set_section_size (section, size);\n   section->alignment_power = 4;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n static int"
    },
    {
      "sha": "68671cc6239357ec76088eccf87cb11f6e5227ff",
      "filename": "bfd/ihex.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/ihex.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/ihex.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ihex.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -487,7 +487,7 @@ ihex_scan (bfd *abfd)\n \n /* Try to recognize an Intel Hex file.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n ihex_object_p (bfd *abfd)\n {\n   void * tdata_save;\n@@ -538,7 +538,7 @@ ihex_object_p (bfd *abfd)\n       return NULL;\n     }\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n /* Read the contents of a section in an Intel Hex file.  */"
    },
    {
      "sha": "bdf917e5561536e1e811b01cd88a42f170dbf33f",
      "filename": "bfd/libaout.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libaout.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libaout.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libaout.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -475,8 +475,8 @@ extern bfd_boolean NAME (aout, squirt_out_relocs)\n extern bfd_boolean NAME (aout, make_sections)\n   (bfd *);\n \n-extern const bfd_target * NAME (aout, some_aout_object_p)\n-  (bfd *, struct internal_exec *, const bfd_target *(*) (bfd *));\n+extern bfd_cleanup NAME (aout, some_aout_object_p)\n+  (bfd *, struct internal_exec *, bfd_cleanup (*) (bfd *));\n \n extern bfd_boolean NAME (aout, mkobject)\n   (bfd *);"
    },
    {
      "sha": "c8cf079a919f14157d88c90059212619cc69385f",
      "filename": "bfd/libbfd-in.h",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libbfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libbfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd-in.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -141,7 +141,7 @@ extern bfd_boolean _bfd_generic_mkarchive\n   (bfd *) ATTRIBUTE_HIDDEN;\n extern char *_bfd_append_relative_path\n   (bfd *, char *) ATTRIBUTE_HIDDEN;\n-extern const bfd_target *bfd_generic_archive_p\n+extern bfd_cleanup bfd_generic_archive_p\n   (bfd *) ATTRIBUTE_HIDDEN;\n extern bfd_boolean bfd_slurp_armap\n   (bfd *) ATTRIBUTE_HIDDEN;\n@@ -227,8 +227,9 @@ extern void _bfd_void_bfd_asection\n \n extern bfd *_bfd_new_bfd_contained_in\n   (bfd *) ATTRIBUTE_HIDDEN;\n-extern const bfd_target *_bfd_dummy_target\n+extern bfd_cleanup _bfd_dummy_target\n   (bfd *) ATTRIBUTE_HIDDEN;\n+#define _bfd_no_cleanup _bfd_void_bfd\n \n extern void bfd_dont_truncate_arname\n   (bfd *, const char *, char *) ATTRIBUTE_HIDDEN;\n@@ -425,9 +426,9 @@ extern symindex _bfd_vms_lib_find_symbol\n   (bfd *, const char *) ATTRIBUTE_HIDDEN;\n extern bfd *_bfd_vms_lib_get_imagelib_file\n   (bfd *) ATTRIBUTE_HIDDEN;\n-extern const bfd_target *_bfd_vms_lib_alpha_archive_p\n+extern bfd_cleanup _bfd_vms_lib_alpha_archive_p\n   (bfd *) ATTRIBUTE_HIDDEN;\n-extern const bfd_target *_bfd_vms_lib_ia64_archive_p\n+extern bfd_cleanup _bfd_vms_lib_ia64_archive_p\n   (bfd *) ATTRIBUTE_HIDDEN;\n extern bfd_boolean _bfd_vms_lib_alpha_mkarchive\n   (bfd *) ATTRIBUTE_HIDDEN;"
    },
    {
      "sha": "3579ddb855a643da28c0edf59b43399da324f894",
      "filename": "bfd/libbfd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libbfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libbfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -245,7 +245,7 @@ _bfd_nocore_core_file_pid (bfd *ignore_abfd ATTRIBUTE_UNUSED)\n   return 0;\n }\n \n-const bfd_target *\n+bfd_cleanup\n _bfd_dummy_target (bfd *ignore_abfd ATTRIBUTE_UNUSED)\n {\n   bfd_set_error (bfd_error_wrong_format);"
    },
    {
      "sha": "3c184fcadadf82cb093753f2d10ddeb6b0af9dd7",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -146,7 +146,7 @@ extern bfd_boolean _bfd_generic_mkarchive\n   (bfd *) ATTRIBUTE_HIDDEN;\n extern char *_bfd_append_relative_path\n   (bfd *, char *) ATTRIBUTE_HIDDEN;\n-extern const bfd_target *bfd_generic_archive_p\n+extern bfd_cleanup bfd_generic_archive_p\n   (bfd *) ATTRIBUTE_HIDDEN;\n extern bfd_boolean bfd_slurp_armap\n   (bfd *) ATTRIBUTE_HIDDEN;\n@@ -232,8 +232,9 @@ extern void _bfd_void_bfd_asection\n \n extern bfd *_bfd_new_bfd_contained_in\n   (bfd *) ATTRIBUTE_HIDDEN;\n-extern const bfd_target *_bfd_dummy_target\n+extern bfd_cleanup _bfd_dummy_target\n   (bfd *) ATTRIBUTE_HIDDEN;\n+#define _bfd_no_cleanup _bfd_void_bfd\n \n extern void bfd_dont_truncate_arname\n   (bfd *, const char *, char *) ATTRIBUTE_HIDDEN;\n@@ -430,9 +431,9 @@ extern symindex _bfd_vms_lib_find_symbol\n   (bfd *, const char *) ATTRIBUTE_HIDDEN;\n extern bfd *_bfd_vms_lib_get_imagelib_file\n   (bfd *) ATTRIBUTE_HIDDEN;\n-extern const bfd_target *_bfd_vms_lib_alpha_archive_p\n+extern bfd_cleanup _bfd_vms_lib_alpha_archive_p\n   (bfd *) ATTRIBUTE_HIDDEN;\n-extern const bfd_target *_bfd_vms_lib_ia64_archive_p\n+extern bfd_cleanup _bfd_vms_lib_ia64_archive_p\n   (bfd *) ATTRIBUTE_HIDDEN;\n extern bfd_boolean _bfd_vms_lib_alpha_mkarchive\n   (bfd *) ATTRIBUTE_HIDDEN;"
    },
    {
      "sha": "3030a65fa77128920d94fab9b301a3d7ca6559de",
      "filename": "bfd/libcoff-in.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libcoff-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libcoff-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libcoff-in.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -299,7 +299,7 @@ struct coff_reloc_cookie\n #define coff_hash_table(p) ((struct coff_link_hash_table *) ((p)->hash))\n \n /* Functions in coffgen.c.  */\n-extern const bfd_target *coff_object_p\n+extern bfd_cleanup coff_object_p\n   (bfd *);\n extern struct bfd_section *coff_section_from_bfd_index\n   (bfd *, int);"
    },
    {
      "sha": "4c7be6e935a8755c0ba810f6d2c7a0b976d18bf3",
      "filename": "bfd/libcoff.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libcoff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/libcoff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libcoff.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -303,7 +303,7 @@ struct coff_reloc_cookie\n #define coff_hash_table(p) ((struct coff_link_hash_table *) ((p)->hash))\n \n /* Functions in coffgen.c.  */\n-extern const bfd_target *coff_object_p\n+extern bfd_cleanup coff_object_p\n   (bfd *);\n extern struct bfd_section *coff_section_from_bfd_index\n   (bfd *, int);"
    },
    {
      "sha": "c71b92e47cad0bbcabc06fe8c7a92c2940bc6dea",
      "filename": "bfd/mach-o-aarch64.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o-aarch64.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -40,13 +40,13 @@\n #define bfd_mach_o_tgt_seg_table NULL\n #define bfd_mach_o_section_type_valid_for_tgt NULL\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_mach_o_arm64_object_p (bfd *abfd)\n {\n   return bfd_mach_o_header_p (abfd, 0, 0, BFD_MACH_O_CPU_TYPE_ARM64);\n }\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_mach_o_arm64_core_p (bfd *abfd)\n {\n   return bfd_mach_o_header_p (abfd, 0,"
    },
    {
      "sha": "f4afce71c86a40594261799e967f0173ed22420b",
      "filename": "bfd/mach-o-arm.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o-arm.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -38,13 +38,13 @@\n #define bfd_mach_o_tgt_seg_table NULL\n #define bfd_mach_o_section_type_valid_for_tgt NULL\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_mach_o_arm_object_p (bfd *abfd)\n {\n   return bfd_mach_o_header_p (abfd, 0, 0, BFD_MACH_O_CPU_TYPE_ARM);\n }\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_mach_o_arm_core_p (bfd *abfd)\n {\n   return bfd_mach_o_header_p (abfd, 0,"
    },
    {
      "sha": "6ef27d1cd131794b311601eca25689300f6f7c71",
      "filename": "bfd/mach-o-i386.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o-i386.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -29,13 +29,13 @@\n #define bfd_mach_o_core_p bfd_mach_o_i386_core_p\n #define bfd_mach_o_mkobject bfd_mach_o_i386_mkobject\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_mach_o_i386_object_p (bfd *abfd)\n {\n   return bfd_mach_o_header_p (abfd, 0, 0, BFD_MACH_O_CPU_TYPE_I386);\n }\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_mach_o_i386_core_p (bfd *abfd)\n {\n   return bfd_mach_o_header_p (abfd, 0,"
    },
    {
      "sha": "9a6b58bc271f6139ab12c95acc9e4a36aafd79bc",
      "filename": "bfd/mach-o-x86-64.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o-x86-64.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -29,13 +29,13 @@\n #define bfd_mach_o_core_p bfd_mach_o_x86_64_core_p\n #define bfd_mach_o_mkobject bfd_mach_o_x86_64_mkobject\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_mach_o_x86_64_object_p (bfd *abfd)\n {\n   return bfd_mach_o_header_p (abfd, 0, 0, BFD_MACH_O_CPU_TYPE_X86_64);\n }\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_mach_o_x86_64_core_p (bfd *abfd)\n {\n   return bfd_mach_o_header_p (abfd, 0,"
    },
    {
      "sha": "ee58a7adfae1375468c9dee6beb0ef450ab0922f",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -5365,7 +5365,7 @@ bfd_mach_o_gen_mkobject (bfd *abfd)\n   return TRUE;\n }\n \n-const bfd_target *\n+bfd_cleanup\n bfd_mach_o_header_p (bfd *abfd,\n \t\t     file_ptr hdr_off,\n \t\t     bfd_mach_o_filetype file_type,\n@@ -5436,7 +5436,7 @@ bfd_mach_o_header_p (bfd *abfd,\n   if (!bfd_mach_o_scan (abfd, &header, mdata))\n     goto wrong;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n \n  wrong:\n   bfd_set_error (bfd_error_wrong_format);\n@@ -5445,13 +5445,13 @@ bfd_mach_o_header_p (bfd *abfd,\n   return NULL;\n }\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_mach_o_gen_object_p (bfd *abfd)\n {\n   return bfd_mach_o_header_p (abfd, 0, 0, 0);\n }\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_mach_o_gen_core_p (bfd *abfd)\n {\n   return bfd_mach_o_header_p (abfd, 0, BFD_MACH_O_MH_CORE, 0);\n@@ -5501,7 +5501,7 @@ typedef struct mach_o_fat_data_struct\n   mach_o_fat_archentry *archentries;\n } mach_o_fat_data_struct;\n \n-const bfd_target *\n+bfd_cleanup\n bfd_mach_o_fat_archive_p (bfd *abfd)\n {\n   mach_o_fat_data_struct *adata = NULL;\n@@ -5551,7 +5551,7 @@ bfd_mach_o_fat_archive_p (bfd *abfd)\n \n   abfd->tdata.mach_o_fat_data = adata;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n \n  error:\n   if (adata != NULL)"
    },
    {
      "sha": "278bdd531545a8668ff63e95945c42a56308dbb4",
      "filename": "bfd/mach-o.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mach-o.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -679,9 +679,9 @@ bfd_mach_o_xlat_name;\n \n bfd_boolean bfd_mach_o_valid (bfd *);\n bfd_boolean bfd_mach_o_mkobject_init (bfd *);\n-const bfd_target *bfd_mach_o_object_p (bfd *);\n-const bfd_target *bfd_mach_o_core_p (bfd *);\n-const bfd_target *bfd_mach_o_fat_archive_p (bfd *);\n+bfd_cleanup bfd_mach_o_object_p (bfd *);\n+bfd_cleanup bfd_mach_o_core_p (bfd *);\n+bfd_cleanup bfd_mach_o_fat_archive_p (bfd *);\n bfd *bfd_mach_o_fat_openr_next_archived_file (bfd *, bfd *);\n bfd_boolean bfd_mach_o_set_arch_mach (bfd *, enum bfd_architecture,\n \t\t\t\t      unsigned long);\n@@ -713,8 +713,8 @@ char *bfd_mach_o_core_file_failing_command (bfd *);\n int bfd_mach_o_core_file_failing_signal (bfd *);\n bfd_boolean bfd_mach_o_core_file_matches_executable_p (bfd *, bfd *);\n bfd *bfd_mach_o_fat_extract (bfd *, bfd_format , const bfd_arch_info_type *);\n-const bfd_target *bfd_mach_o_header_p (bfd *, file_ptr, bfd_mach_o_filetype,\n-\t\t\t\t       bfd_mach_o_cpu_type);\n+bfd_cleanup bfd_mach_o_header_p (bfd *, file_ptr, bfd_mach_o_filetype,\n+\t\t\t\t bfd_mach_o_cpu_type);\n bfd_boolean bfd_mach_o_build_commands (bfd *);\n bfd_boolean bfd_mach_o_set_section_contents (bfd *, asection *, const void *,\n \t\t\t\t\t     file_ptr, bfd_size_type);"
    },
    {
      "sha": "3b7e5c0c33fcb72a33bd111046a655c94ff16ec0",
      "filename": "bfd/mmo.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mmo.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/mmo.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mmo.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -386,7 +386,7 @@ static INLINE bfd_byte *mmo_get_loc (asection *, bfd_vma, int);\n static void mmo_xore_64 (asection *, bfd_vma vma, bfd_vma value);\n static void mmo_xore_32 (asection *, bfd_vma vma, unsigned int);\n static void mmo_xore_16 (asection *, bfd_vma vma, unsigned int);\n-static const bfd_target *mmo_object_p (bfd *);\n+static bfd_cleanup mmo_object_p (bfd *);\n static void mmo_map_set_sizes (bfd *, asection *, void *);\n static bfd_boolean mmo_get_symbols (bfd *);\n static bfd_boolean mmo_create_symbol (bfd *, const char *, bfd_vma,\n@@ -500,7 +500,7 @@ mmo_init (void)\n \n /* Check whether an existing file is an mmo file.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n mmo_object_p (bfd *abfd)\n {\n   struct stat statbuf;\n@@ -556,7 +556,7 @@ mmo_object_p (bfd *abfd)\n   if (! bfd_default_set_arch_mach (abfd, bfd_arch_mmix, 0))\n     goto bad_format_free;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n \n  bad_format_free:\n   free (abfd->tdata.mmo_data->lop_stab_symbol);"
    },
    {
      "sha": "c13e742c0da2a2d55a5979f820d7695a901eb81a",
      "filename": "bfd/pdp11.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/pdp11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/pdp11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pdp11.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -452,13 +452,13 @@ NAME (aout, make_sections) (bfd *abfd)\n    environment's \"finish up\" function just before returning, to\n    handle any last-minute setup.  */\n \n-const bfd_target *\n+bfd_cleanup\n NAME (aout, some_aout_object_p) (bfd *abfd,\n \t\t\t\t struct internal_exec *execp,\n-\t\t\t\t const bfd_target *(*callback_to_real_object_p) (bfd *))\n+\t\t\t\t bfd_cleanup (*callback_to_real_object_p) (bfd *))\n {\n   struct aout_data_struct *rawptr, *oldrawptr;\n-  const bfd_target *result;\n+  bfd_cleanup cleanup;\n   size_t amt = sizeof (struct aout_data_struct);\n \n   rawptr = bfd_zalloc (abfd, amt);\n@@ -580,7 +580,7 @@ NAME (aout, some_aout_object_p) (bfd *abfd,\n   adata(abfd)->segment_size = SEGMENT_SIZE;\n   adata(abfd)->exec_bytes_size = EXEC_BYTES_SIZE;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n \n   /* The architecture is encoded in various ways in various a.out variants,\n      or is not encoded at all in some of them.  The relocation size depends\n@@ -592,7 +592,7 @@ NAME (aout, some_aout_object_p) (bfd *abfd,\n      header, should cope with them in this callback as well.  */\n #endif\t/* DOCUMENTATION */\n \n-  result = (*callback_to_real_object_p)(abfd);\n+  cleanup = (*callback_to_real_object_p)(abfd);\n \n   /* Now that the segment addresses have been worked out, take a better\n      guess at whether the file is executable.  If the entry point\n@@ -633,12 +633,12 @@ NAME (aout, some_aout_object_p) (bfd *abfd,\n     }\n #endif /* STAT_FOR_EXEC */\n \n-  if (!result)\n+  if (!cleanup)\n     {\n       free (rawptr);\n       abfd->tdata.aout_data = oldrawptr;\n     }\n-  return result;\n+  return cleanup;\n }\n \n /* Initialize ABFD for use with a.out files.  */"
    },
    {
      "sha": "4e749e1949789946e540420920be43a940d5118d",
      "filename": "bfd/pef.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/pef.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/pef.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pef.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -589,7 +589,7 @@ bfd_pef_read_header (bfd *abfd, bfd_pef_header *header)\n   return 0;\n }\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_pef_object_p (bfd *abfd)\n {\n   bfd_pef_header header;\n@@ -608,7 +608,7 @@ bfd_pef_object_p (bfd *abfd)\n   if (bfd_pef_scan (abfd, &header, mdata))\n     goto wrong;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n \n  wrong:\n   bfd_set_error (bfd_error_wrong_format);\n@@ -1126,7 +1126,7 @@ bfd_pef_xlib_scan (bfd *abfd, bfd_pef_xlib_header *header)\n   return 0;\n }\n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_pef_xlib_object_p (bfd *abfd)\n {\n   bfd_pef_xlib_header header;\n@@ -1151,7 +1151,7 @@ bfd_pef_xlib_object_p (bfd *abfd)\n       return NULL;\n     }\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n const bfd_target pef_xlib_vec ="
    },
    {
      "sha": "c5a92afefc4604b29c92a2ac0f56dbc4a4546df9",
      "filename": "bfd/peicode.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/peicode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/peicode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peicode.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -122,7 +122,7 @@ typedef struct\n pe_ILF_vars;\n #endif /* COFF_IMAGE_WITH_PE */\n \n-const bfd_target *coff_real_object_p\n+bfd_cleanup coff_real_object_p\n   (bfd *, unsigned, struct internal_filehdr *, struct internal_aouthdr *);\n \f\n #ifndef NO_COFF_RELOCS\n@@ -1142,7 +1142,7 @@ pe_ILF_build_a_bfd (bfd *\t    abfd,\n /* We have detected a Image Library Format archive element.\n    Decode the element and return the appropriate target.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n pe_ILF_object_p (bfd * abfd)\n {\n   bfd_byte\t  buffer[14];\n@@ -1300,7 +1300,7 @@ pe_ILF_object_p (bfd * abfd)\n       return NULL;\n     }\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n static void\n@@ -1394,7 +1394,7 @@ pe_bfd_read_buildid (bfd *abfd)\n   free (data);\n }\n \n-static const bfd_target *\n+static bfd_cleanup\n pe_bfd_object_p (bfd * abfd)\n {\n   bfd_byte buffer[6];\n@@ -1404,7 +1404,7 @@ pe_bfd_object_p (bfd * abfd)\n   struct internal_aouthdr internal_a;\n   bfd_size_type opt_hdr_size;\n   file_ptr offset;\n-  const bfd_target *result;\n+  bfd_cleanup result;\n \n   /* Detect if this a Microsoft Import Library Format element.  */\n   /* First read the beginning of the header.  */"
    },
    {
      "sha": "a0f172d363793753601db6afa892c97f79da0aab",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -733,7 +733,7 @@ try_load_plugin (const char *pname,\n /* There may be plugin libraries in lib/bfd-plugins.  */\n static int has_plugin_list = -1;\n \n-static const bfd_target *(*ld_plugin_object_p) (bfd *);\n+static bfd_cleanup (*ld_plugin_object_p) (bfd *);\n \n static const char *plugin_name;\n \n@@ -774,7 +774,7 @@ bfd_plugin_target_p (const bfd_target *target)\n /* Register OBJECT_P to be used by bfd_plugin_object_p.  */\n \n void\n-register_ld_plugin_object_p (const bfd_target *(*object_p) (bfd *))\n+register_ld_plugin_object_p (bfd_cleanup (*object_p) (bfd *))\n {\n   ld_plugin_object_p = object_p;\n }\n@@ -862,7 +862,7 @@ load_plugin (bfd *abfd)\n }\n \n \n-static const bfd_target *\n+static bfd_cleanup\n bfd_plugin_object_p (bfd *abfd)\n {\n   if (ld_plugin_object_p)\n@@ -871,7 +871,7 @@ bfd_plugin_object_p (bfd *abfd)\n   if (abfd->plugin_format == bfd_plugin_unknown && !load_plugin (abfd))\n     return NULL;\n \n-  return abfd->plugin_format == bfd_plugin_yes ? abfd->xvec : NULL;\n+  return abfd->plugin_format == bfd_plugin_yes ? _bfd_no_cleanup : NULL;\n }\n \n /* Copy any private info we understand from the input bfd"
    },
    {
      "sha": "af5d1f4cfa9d395878b6331c4f94dcc205756d9f",
      "filename": "bfd/plugin.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/plugin.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/plugin.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -27,7 +27,7 @@ void bfd_plugin_set_plugin (const char *);\n bfd_boolean bfd_plugin_target_p (const bfd_target *);\n bfd_boolean bfd_plugin_specified_p (void);\n bfd_boolean bfd_link_plugin_object_p (bfd *);\n-void register_ld_plugin_object_p (const bfd_target *(*object_p) (bfd *));\n+void register_ld_plugin_object_p (bfd_cleanup (*object_p) (bfd *));\n \n typedef struct plugin_data_struct\n {"
    },
    {
      "sha": "9d9d187613a1cd85ef406dce89ffe63c24343931",
      "filename": "bfd/ppcboot.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/ppcboot.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/ppcboot.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ppcboot.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -130,7 +130,7 @@ ppcboot_set_arch_mach (bfd *abfd,\n    was not defaulted.  That is, it must be explicitly specified as\n    being ppcboot.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n ppcboot_object_p (bfd *abfd)\n {\n   struct stat statbuf;\n@@ -207,7 +207,7 @@ ppcboot_object_p (bfd *abfd)\n   memcpy (&tdata->header, &hdr, sizeof (ppcboot_hdr_t));\n \n   ppcboot_set_arch_mach (abfd, bfd_arch_powerpc, 0L);\n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n #define ppcboot_close_and_cleanup _bfd_generic_close_and_cleanup"
    },
    {
      "sha": "8e2dd06b464c9b199971bf75ee7d71b6a4042d1c",
      "filename": "bfd/rs6000-core.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/rs6000-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/rs6000-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/rs6000-core.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -277,7 +277,7 @@ typedef union\n /* Define prototypes for certain functions, to avoid a compiler warning\n    saying that they are missing.  */\n \n-const bfd_target * rs6000coff_core_p (bfd *abfd);\n+const bfd_cleanup rs6000coff_core_p (bfd *abfd);\n bfd_boolean rs6000coff_core_file_matches_executable_p (bfd *core_bfd,\n \t\t\t\t\t\t       bfd *exec_bfd);\n char * rs6000coff_core_file_failing_command (bfd *abfd);\n@@ -332,7 +332,7 @@ make_bfd_asection (bfd *abfd, const char *name, flagword flags,\n /* Decide if a given bfd represents a `core' file or not. There really is no\n    magic number or anything like, in rs6000coff.  */\n \n-const bfd_target *\n+bfd_cleanup\n rs6000coff_core_p (bfd *abfd)\n {\n   CoreHdr core;\n@@ -686,7 +686,7 @@ rs6000coff_core_p (bfd *abfd)\n   }\n #endif\n \n-  return abfd->xvec;\t\t/* This is garbage for now.  */\n+  return _bfd_no_cleanup;\n \n  fail:\n   bfd_release (abfd, abfd->tdata.any);"
    },
    {
      "sha": "3aa3d60b02bcd61372a61695f77fe01b27d85969",
      "filename": "bfd/som.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/som.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/som.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/som.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -1945,7 +1945,7 @@ som_swap_lst_header_in (struct som_external_lst_header *src,\n /* Perform some initialization for an object.  Save results of this\n    initialization in the BFD.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n som_object_setup (bfd *abfd,\n \t\t  struct som_header *file_hdrp,\n \t\t  struct som_exec_auxhdr *aux_hdrp,\n@@ -2060,7 +2060,7 @@ som_object_setup (bfd *abfd,\n \t\t\t\t  + current_offset);\n   obj_som_exec_data (abfd)->system_id = file_hdrp->system_id;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n /* Convert all of the space and subspace info into BFD sections.  Each space\n@@ -2386,7 +2386,7 @@ setup_sections (bfd *abfd,\n \n /* Read in a SOM object and make it into a BFD.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n som_object_p (bfd *abfd)\n {\n   struct som_external_header ext_file_hdr;"
    },
    {
      "sha": "5ca4f36ae5944ae34cb7c9d7146f03e626efc453",
      "filename": "bfd/srec.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/srec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/srec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/srec.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -646,7 +646,7 @@ srec_scan (bfd *abfd)\n \n /* Check whether an existing file is an S-record file.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n srec_object_p (bfd *abfd)\n {\n   void * tdata_save;\n@@ -676,12 +676,12 @@ srec_object_p (bfd *abfd)\n   if (abfd->symcount > 0)\n     abfd->flags |= HAS_SYMS;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n /* Check whether an existing file is an S-record file with symbols.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n symbolsrec_object_p (bfd *abfd)\n {\n   void * tdata_save;\n@@ -711,7 +711,7 @@ symbolsrec_object_p (bfd *abfd)\n   if (abfd->symcount > 0)\n     abfd->flags |= HAS_SYMS;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n /* Read in the contents of a section in an S-record file.  */"
    },
    {
      "sha": "39683e83d414f6689710491901e382d68bd47520",
      "filename": "bfd/targets.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/targets.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/targets.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/targets.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -176,6 +176,8 @@ DESCRIPTION\n .{* Forward declaration.  *}\n .typedef struct flag_info flag_info;\n .\n+.typedef void (*bfd_cleanup) (bfd *);\n+.\n .typedef struct bfd_target\n .{\n .  {* Identifies the kind of target, e.g., SunOS4, Ultrix, etc.  *}\n@@ -240,9 +242,9 @@ DESCRIPTION\n .  {* Format dependent routines: these are vectors of entry points\n .     within the target vector structure, one for each format to check.  *}\n .\n-.  {* Check the format of a file being read.  Return a <<bfd_target *>> or zero.  *}\n-.  const struct bfd_target *\n-.\t       (*_bfd_check_format[bfd_type_end]) (bfd *);\n+.  {* Check the format of a file being read.  Return a <<bfd_cleanup>> on\n+.     success or zero on failure.  *}\n+.  bfd_cleanup (*_bfd_check_format[bfd_type_end]) (bfd *);\n .\n .  {* Set the format of a file being written.  *}\n .  bfd_boolean (*_bfd_set_format[bfd_type_end]) (bfd *);"
    },
    {
      "sha": "c2834b32d0cdbcd4062e20e1ff32711b4ab63726",
      "filename": "bfd/tekhex.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/tekhex.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/tekhex.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/tekhex.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -600,7 +600,7 @@ tekhex_mkobject (bfd *abfd)\n /* Return TRUE if the file looks like it's in TekHex format. Just look\n    for a percent sign and some hex digits.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n tekhex_object_p (bfd *abfd)\n {\n   char b[4];\n@@ -619,7 +619,7 @@ tekhex_object_p (bfd *abfd)\n   if (!pass_over (abfd, first_phase))\n     return NULL;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n static void"
    },
    {
      "sha": "241dab340d7c723f902c3337e79c6f68ca3b39bc",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -2707,7 +2707,7 @@ alpha_vms_free_private (bfd *abfd)\n /* Check the format for a file being read.\n    Return a (bfd_target *) if it's an object file or zero if not.  */\n \n-static const struct bfd_target *\n+static bfd_cleanup\n alpha_vms_object_p (bfd *abfd)\n {\n   void *tdata_save = abfd->tdata.any;\n@@ -2826,7 +2826,7 @@ alpha_vms_object_p (bfd *abfd)\n   if (! bfd_default_set_arch_mach (abfd, bfd_arch_alpha, 0))\n     goto err_wrong_format;\n \n-  return abfd->xvec;\n+  return alpha_vms_free_private;\n \n  err_wrong_format:\n   bfd_set_error (bfd_error_wrong_format);"
    },
    {
      "sha": "a6335218fa491671c167c2854ff3ac0c06b968d4",
      "filename": "bfd/vms-lib.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/vms-lib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/vms-lib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-lib.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -489,7 +489,7 @@ vms_lib_read_index (bfd *abfd, int idx, unsigned int *nbrel)\n \n /* Standard function.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n _bfd_vms_lib_archive_p (bfd *abfd, enum vms_lib_kind kind)\n {\n   struct vms_lhd lhd;\n@@ -693,7 +693,7 @@ _bfd_vms_lib_archive_p (bfd *abfd, enum vms_lib_kind kind)\n   if (tdata->type == LBR__C_TYP_ESHSTB || tdata->type == LBR__C_TYP_ISHSTB)\n     abfd->is_thin_archive = TRUE;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n \n  err:\n   bfd_release (abfd, tdata);\n@@ -703,23 +703,23 @@ _bfd_vms_lib_archive_p (bfd *abfd, enum vms_lib_kind kind)\n \n /* Standard function for alpha libraries.  */\n \n-const bfd_target *\n+bfd_cleanup\n _bfd_vms_lib_alpha_archive_p (bfd *abfd)\n {\n   return _bfd_vms_lib_archive_p (abfd, vms_lib_alpha);\n }\n \n /* Standard function for ia64 libraries.  */\n \n-const bfd_target *\n+bfd_cleanup\n _bfd_vms_lib_ia64_archive_p (bfd *abfd)\n {\n   return _bfd_vms_lib_archive_p (abfd, vms_lib_ia64);\n }\n \n /* Standard function for text libraries.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n _bfd_vms_lib_txt_archive_p (bfd *abfd)\n {\n   return _bfd_vms_lib_archive_p (abfd, vms_lib_txt);"
    },
    {
      "sha": "ac78692816e9c9a1c05f3d14ea511437e0b78a79",
      "filename": "bfd/wasm-module.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/wasm-module.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/wasm-module.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/wasm-module.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -731,7 +731,7 @@ wasm_get_symbol_info (bfd *abfd ATTRIBUTE_UNUSED,\n \n /* Check whether ABFD is a WebAssembly module; if so, scan it.  */\n \n-static const bfd_target *\n+static bfd_cleanup\n wasm_object_p (bfd *abfd)\n {\n   bfd_boolean error;\n@@ -761,7 +761,7 @@ wasm_object_p (bfd *abfd)\n   if (s != NULL && wasm_scan_name_function_section (abfd, s))\n     abfd->flags |= HAS_SYMS;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n }\n \n /* BFD_JUMP_TABLE_WRITE */"
    },
    {
      "sha": "525d6d98abc1bc385acce6593fb57aca8ae7bde9",
      "filename": "bfd/xsym.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/xsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/xsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xsym.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -2230,7 +2230,7 @@ bfd_sym_scan (bfd *abfd, bfd_sym_version version, bfd_sym_data_struct *mdata)\n   return 0;\n }\n \n-const bfd_target *\n+bfd_cleanup\n bfd_sym_object_p (bfd *abfd)\n {\n   bfd_sym_version version = -1;\n@@ -2247,7 +2247,7 @@ bfd_sym_object_p (bfd *abfd)\n   if (bfd_sym_scan (abfd, version, mdata) != 0)\n     goto wrong;\n \n-  return abfd->xvec;\n+  return _bfd_no_cleanup;\n \n  wrong:\n   bfd_set_error (bfd_error_wrong_format);"
    },
    {
      "sha": "393b72b5e0a1de30229a35a001cb2e0db251519e",
      "filename": "bfd/xsym.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/xsym.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/bfd/xsym.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xsym.h?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -686,7 +686,7 @@ extern void bfd_sym_display_type_information_table\n   (bfd *, FILE *);\n extern int bfd_sym_scan\n   (bfd *, bfd_sym_version, bfd_sym_data_struct *);\n-extern const bfd_target * bfd_sym_object_p\n+extern bfd_cleanup bfd_sym_object_p\n   (bfd *);\n extern void bfd_sym_get_symbol_info\n   (bfd *, asymbol *, symbol_info *);"
    },
    {
      "sha": "14a917b25bf9e0700fbe65e9a996196c5ef2ad14",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* plugin.c (plugin_object_p): Return a bfd_cleanup.\n+\t(plugin_cleanup): New function.\n+\n 2020-03-01  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/25618"
    },
    {
      "sha": "4ef4a236650ce97b51ed6bd7edd5369a035f18f6",
      "filename": "ld/plugin.c",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb001c0d283dd884efe06770d033a50fb1bc6c7d/ld/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb001c0d283dd884efe06770d033a50fb1bc6c7d/ld/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/plugin.c?ref=cb001c0d283dd884efe06770d033a50fb1bc6c7d",
      "patch": "@@ -175,7 +175,7 @@ static bfd_boolean plugin_notice (struct bfd_link_info *,\n \t\t\t\t  struct bfd_link_hash_entry *,\n \t\t\t\t  bfd *, asection *, bfd_vma, flagword);\n \n-static const bfd_target * plugin_object_p (bfd *);\n+static bfd_cleanup plugin_object_p (bfd *);\n \n #if !defined (HAVE_DLFCN_H) && defined (HAVE_WINDOWS_H)\n \n@@ -1164,7 +1164,12 @@ plugin_strdup (bfd *abfd, const char *str)\n   return copy;\n }\n \n-static const bfd_target *\n+static void\n+plugin_cleanup (bfd *abfd ATTRIBUTE_UNUSED)\n+{\n+}\n+\n+static bfd_cleanup\n plugin_object_p (bfd *ibfd)\n {\n   int claimed;\n@@ -1179,7 +1184,7 @@ plugin_object_p (bfd *ibfd)\n   if (ibfd->plugin_format != bfd_plugin_unknown)\n     {\n       if (ibfd->plugin_format == bfd_plugin_yes)\n-\treturn ibfd->plugin_dummy_bfd->xvec;\n+\treturn plugin_cleanup;\n       else\n \treturn NULL;\n     }\n@@ -1240,7 +1245,7 @@ plugin_object_p (bfd *ibfd)\n       ibfd->plugin_dummy_bfd = abfd;\n       bfd_make_readable (abfd);\n       abfd->no_export = ibfd->no_export;\n-      return abfd->xvec;\n+      return plugin_cleanup;\n     }\n   else\n     {"
    }
  ]
}