{
  "sha": "6d7aa59270373b6b1de6ac28e40ebf972028ee3e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmQ3YWE1OTI3MDM3M2I2YjFkZTZhYzI4ZTQwZWJmOTcyMDI4ZWUzZQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-07-08T14:43:02Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-07-10T22:53:34Z"
    },
    "message": "Fix crash if connection drops in scoped_restore_current_thread's ctor, part 1\n\nRunning the testsuite against an Asan-enabled build of GDB makes\ngdb.base/multi-target.exp expose this bug.\n\nscoped_restore_current_thread's ctor calls get_frame_id to record the\nselected frame's ID to restore later.  If the frame ID hasn't been\ncomputed yet, it will be computed on the spot, and that will usually\nrequire accessing the target's memory and registers, which requires\nremote accesses.  If the remote connection closes while we're\ncomputing the frame ID, the remote target exits its inferiors,\nunpushes itself, and throws a TARGET_CLOSE_ERROR error.\n\nIf that happens, GDB can currently crash, here:\n\n> ==18555==ERROR: AddressSanitizer: heap-use-after-free on address 0x621004670aa8 at pc 0x0000007ab125 bp 0x7ffdecaecd20 sp 0x7ffdecaecd10\n> READ of size 4 at 0x621004670aa8 thread T0\n>     #0 0x7ab124 in dwarf2_frame_this_id src/binutils-gdb/gdb/dwarf2/frame.c:1228\n>     #1 0x983ec5 in compute_frame_id src/binutils-gdb/gdb/frame.c:550\n>     #2 0x9841ee in get_frame_id(frame_info*) src/binutils-gdb/gdb/frame.c:582\n>     #3 0x1093faa in scoped_restore_current_thread::scoped_restore_current_thread() src/binutils-gdb/gdb/thread.c:1462\n>     #4 0xaee5ba in fetch_inferior_event(void*) src/binutils-gdb/gdb/infrun.c:3968\n>     #5 0xaa990b in inferior_event_handler(inferior_event_type, void*) src/binutils-gdb/gdb/inf-loop.c:43\n>     #6 0xea61b6 in remote_async_serial_handler src/binutils-gdb/gdb/remote.c:14161\n>     #7 0xefca8a in run_async_handler_and_reschedule src/binutils-gdb/gdb/ser-base.c:137\n>     #8 0xefcd23 in fd_event src/binutils-gdb/gdb/ser-base.c:188\n>     #9 0x15a7416 in handle_file_event src/binutils-gdb/gdbsupport/event-loop.cc:548\n>     #10 0x15a7c36 in gdb_wait_for_event src/binutils-gdb/gdbsupport/event-loop.cc:673\n>     #11 0x15a5dbb in gdb_do_one_event() src/binutils-gdb/gdbsupport/event-loop.cc:215\n>     #12 0xbfe62d in start_event_loop src/binutils-gdb/gdb/main.c:356\n>     #13 0xbfe935 in captured_command_loop src/binutils-gdb/gdb/main.c:416\n>     #14 0xc01d39 in captured_main src/binutils-gdb/gdb/main.c:1253\n>     #15 0xc01dc9 in gdb_main(captured_main_args*) src/binutils-gdb/gdb/main.c:1268\n>     #16 0x414ddd in main src/binutils-gdb/gdb/gdb.c:32\n>     #17 0x7f590110b82f in __libc_start_main ../csu/libc-start.c:291\n>     #18 0x414bd8 in _start (build/binutils-gdb/gdb/gdb+0x414bd8)\n\nWhat happens is that above, we're in dwarf2_frame_this_id, just after\nthe dwarf2_frame_cache call.  The \"cache\" variable that the\ndwarf2_frame_cache function returned is already stale.  It's been\nreleased here, from within the dwarf2_frame_cache:\n\n(top-gdb) bt\n#0  reinit_frame_cache () at src/gdb/frame.c:1855\n#1  0x00000000014ff7b0 in switch_to_no_thread () at src/gdb/thread.c:1301\n#2  0x0000000000f66d3e in switch_to_inferior_no_thread (inf=0x615000338180) at src/gdb/inferior.c:626\n#3  0x00000000012f3826 in remote_unpush_target (target=0x6170000c5900) at src/gdb/remote.c:5521\n#4  0x00000000013097e0 in remote_target::readchar (this=0x6170000c5900, timeout=2) at src/gdb/remote.c:9137\n#5  0x000000000130be4d in remote_target::getpkt_or_notif_sane_1 (this=0x6170000c5900, buf=0x6170000c5918, forever=0, expecting_notif=0, is_notif=0x0) at src/gdb/remote.c:9683\n#6  0x000000000130c8ab in remote_target::getpkt_sane (this=0x6170000c5900, buf=0x6170000c5918, forever=0) at src/gdb/remote.c:9790\n#7  0x000000000130bc0d in remote_target::getpkt (this=0x6170000c5900, buf=0x6170000c5918, forever=0) at src/gdb/remote.c:9623\n#8  0x000000000130838e in remote_target::remote_read_bytes_1 (this=0x6170000c5900, memaddr=0x7fffffffcdc0, myaddr=0x6080000ad3bc \"\", len_units=64, unit_size=1, xfered_len_units=0x7fff6a29b9a0) at src/gdb/remote.c:8860\n#9  0x0000000001308bd2 in remote_target::remote_read_bytes (this=0x6170000c5900, memaddr=0x7fffffffcdc0, myaddr=0x6080000ad3bc \"\", len=64, unit_size=1, xfered_len=0x7fff6a29b9a0) at src/gdb/remote.c:8987\n#10 0x0000000001311ed1 in remote_target::xfer_partial (this=0x6170000c5900, object=TARGET_OBJECT_MEMORY, annex=0x0, readbuf=0x6080000ad3bc \"\", writebuf=0x0, offset=140737488342464, len=64, xfered_len=0x7fff6a29b9a0) at src/gdb/remote.c:10988\n#11 0x00000000014ba969 in raw_memory_xfer_partial (ops=0x6170000c5900, readbuf=0x6080000ad3bc \"\", writebuf=0x0, memaddr=140737488342464, len=64, xfered_len=0x7fff6a29b9a0) at src/gdb/target.c:918\n#12 0x00000000014bb720 in target_xfer_partial (ops=0x6170000c5900, object=TARGET_OBJECT_RAW_MEMORY, annex=0x0, readbuf=0x6080000ad3bc \"\", writebuf=0x0, offset=140737488342464, len=64, xfered_len=0x7fff6a29b9a0) at src/gdb/target.c:1148\n#13 0x00000000014bc3b5 in target_read_partial (ops=0x6170000c5900, object=TARGET_OBJECT_RAW_MEMORY, annex=0x0, buf=0x6080000ad3bc \"\", offset=140737488342464, len=64, xfered_len=0x7fff6a29b9a0) at src/gdb/target.c:1380\n#14 0x00000000014bc593 in target_read (ops=0x6170000c5900, object=TARGET_OBJECT_RAW_MEMORY, annex=0x0, buf=0x6080000ad3bc \"\", offset=140737488342464, len=64) at src/gdb/target.c:1419\n#15 0x00000000014bbd4d in target_read_raw_memory (memaddr=0x7fffffffcdc0, myaddr=0x6080000ad3bc \"\", len=64) at src/gdb/target.c:1252\n#16 0x0000000000bf27df in dcache_read_line (dcache=0x6060001eddc0, db=0x6080000ad3a0) at src/gdb/dcache.c:336\n#17 0x0000000000bf2b72 in dcache_peek_byte (dcache=0x6060001eddc0, addr=0x7fffffffcdd8, ptr=0x6020001231b0 \"\") at src/gdb/dcache.c:403\n#18 0x0000000000bf3103 in dcache_read_memory_partial (ops=0x6170000c5900, dcache=0x6060001eddc0, memaddr=0x7fffffffcdd8, myaddr=0x6020001231b0 \"\", len=8, xfered_len=0x7fff6a29bf20) at src/gdb/dcache.c:484\n#19 0x00000000014bafe9 in memory_xfer_partial_1 (ops=0x6170000c5900, object=TARGET_OBJECT_STACK_MEMORY, readbuf=0x6020001231b0 \"\", writebuf=0x0, memaddr=140737488342488, len=8, xfered_len=0x7fff6a29bf20) at src/gdb/target.c:1034\n#20 0x00000000014bb212 in memory_xfer_partial (ops=0x6170000c5900, object=TARGET_OBJECT_STACK_MEMORY, readbuf=0x6020001231b0 \"\", writebuf=0x0, memaddr=140737488342488, len=8, xfered_len=0x7fff6a29bf20) at src/gdb/target.c:1076\n#21 0x00000000014bb6b3 in target_xfer_partial (ops=0x6170000c5900, object=TARGET_OBJECT_STACK_MEMORY, annex=0x0, readbuf=0x6020001231b0 \"\", writebuf=0x0, offset=140737488342488, len=8, xfered_len=0x7fff6a29bf20) at src/gdb/target.c:1133\n#22 0x000000000164564d in read_value_memory (val=0x60f000029440, bit_offset=0, stack=1, memaddr=0x7fffffffcdd8, buffer=0x6020001231b0 \"\", length=8) at src/gdb/valops.c:956\n#23 0x0000000001680fff in value_fetch_lazy_memory (val=0x60f000029440) at src/gdb/value.c:3764\n#24 0x0000000001681efd in value_fetch_lazy (val=0x60f000029440) at src/gdb/value.c:3910\n#25 0x0000000001676143 in value_optimized_out (value=0x60f000029440) at src/gdb/value.c:1411\n#26 0x0000000000e0fcb8 in frame_register_unwind (next_frame=0x6210066bfde0, regnum=16, optimizedp=0x7fff6a29c200, unavailablep=0x7fff6a29c240, lvalp=0x7fff6a29c2c0, addrp=0x7fff6a29c300, realnump=0x7fff6a29c280, bufferp=0x7fff6a29c3a0 \"@\\304)j\\377\\177\") at src/gdb/frame.c:1144\n#27 0x0000000000e10418 in frame_unwind_register (next_frame=0x6210066bfde0, regnum=16, buf=0x7fff6a29c3a0 \"@\\304)j\\377\\177\") at src/gdb/frame.c:1196\n#28 0x0000000000f00431 in i386_unwind_pc (gdbarch=0x6210043d0110, next_frame=0x6210066bfde0) at src/gdb/i386-tdep.c:1969\n#29 0x0000000000e39724 in gdbarch_unwind_pc (gdbarch=0x6210043d0110, next_frame=0x6210066bfde0) at src/gdb/gdbarch.c:3056\n#30 0x0000000000c2ea90 in dwarf2_tailcall_sniffer_first (this_frame=0x6210066bfde0, tailcall_cachep=0x6210066bfee0, entry_cfa_sp_offsetp=0x0) at src/gdb/dwarf2/frame-tailcall.c:423\n#31 0x0000000000c36bdb in dwarf2_frame_cache (this_frame=0x6210066bfde0, this_cache=0x6210066bfdf8) at src/gdb/dwarf2/frame.c:1198\n#32 0x0000000000c36eb3 in dwarf2_frame_this_id (this_frame=0x6210066bfde0, this_cache=0x6210066bfdf8, this_id=0x6210066bfe40) at src/gdb/dwarf2/frame.c:1226\n\nNote that remote_target::readchar in frame #4 throws\nTARGET_CLOSE_ERROR after the remote_unpush_target in frame #3 returns.\n\nThe problem is that the TARGET_CLOSE_ERROR is swallowed by\nvalue_optimized_out in frame #25.\n\nIf we fix that one, then we run into dwarf2_tailcall_sniffer_first\nswallowing the exception in frame #30 too.\n\nThe attached patch fixes it by making those spots swallow fewer kinds\nof errors.\n\ngdb/ChangeLog:\n\n\t* frame-tailcall.c (dwarf2_tailcall_sniffer_first): Only swallow\n\tNO_ENTRY_VALUE_ERROR / MEMORY_ERROR / OPTIMIZED_OUT_ERROR /\n\tNOT_AVAILABLE_ERROR.\n\t* value.c (value_optimized_out): Only swallow MEMORY_ERROR /\n\tOPTIMIZED_OUT_ERROR / NOT_AVAILABLE_ERROR.",
    "tree": {
      "sha": "b8f675cde577de217b1e866c8fc5359b04f43592",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b8f675cde577de217b1e866c8fc5359b04f43592"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6d7aa59270373b6b1de6ac28e40ebf972028ee3e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d7aa59270373b6b1de6ac28e40ebf972028ee3e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6d7aa59270373b6b1de6ac28e40ebf972028ee3e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d7aa59270373b6b1de6ac28e40ebf972028ee3e/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b3e3a4c11496dca710c62e32db80e27dd7301223",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3e3a4c11496dca710c62e32db80e27dd7301223",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b3e3a4c11496dca710c62e32db80e27dd7301223"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 36,
    "deletions": 3
  },
  "files": [
    {
      "sha": "3cf2cf10bf93778d09f124ad966a958094366222",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d7aa59270373b6b1de6ac28e40ebf972028ee3e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d7aa59270373b6b1de6ac28e40ebf972028ee3e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6d7aa59270373b6b1de6ac28e40ebf972028ee3e",
      "patch": "@@ -1,3 +1,11 @@\n+2020-07-10  Pedro Alves  <pedro@palves.net>\n+\n+\t* frame-tailcall.c (dwarf2_tailcall_sniffer_first): Only swallow\n+\tNO_ENTRY_VALUE_ERROR / MEMORY_ERROR / OPTIMIZED_OUT_ERROR /\n+\tNOT_AVAILABLE_ERROR.\n+\t* value.c (value_optimized_out): Only swallow MEMORY_ERROR /\n+\tOPTIMIZED_OUT_ERROR / NOT_AVAILABLE_ERROR.\n+\n 2020-07-10  Simon Marchi  <simon.marchi@polymtl.ca>\n \t    Pedro Alves  <pedro@palves.net>\n "
    },
    {
      "sha": "7ea6daca25b6e9896d7896ba526e98dda4473007",
      "filename": "gdb/dwarf2/frame-tailcall.c",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d7aa59270373b6b1de6ac28e40ebf972028ee3e/gdb/dwarf2/frame-tailcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d7aa59270373b6b1de6ac28e40ebf972028ee3e/gdb/dwarf2/frame-tailcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame-tailcall.c?ref=6d7aa59270373b6b1de6ac28e40ebf972028ee3e",
      "patch": "@@ -377,7 +377,6 @@ dwarf2_tailcall_sniffer_first (struct frame_info *this_frame,\n      get_frame_address_in_block will decrease it by 1 in such case.  */\n   this_pc = get_frame_address_in_block (this_frame);\n \n-  /* Catch any unwinding errors.  */\n   try\n     {\n       int sp_regnum;\n@@ -404,7 +403,22 @@ dwarf2_tailcall_sniffer_first (struct frame_info *this_frame,\n     {\n       if (entry_values_debug)\n \texception_print (gdb_stdout, except);\n-      return;\n+\n+      switch (except.error)\n+\t{\n+\tcase NO_ENTRY_VALUE_ERROR:\n+\t  /* Thrown by call_site_find_chain.  */\n+\tcase MEMORY_ERROR:\n+\tcase OPTIMIZED_OUT_ERROR:\n+\tcase NOT_AVAILABLE_ERROR:\n+\t  /* These can normally happen when we try to access an\n+\t     optimized out or unavailable register, either in a\n+\t     physical register or spilled to memory.  */\n+\t  return;\n+\t}\n+\n+      /* Let unexpected errors propagate.  */\n+      throw;\n     }\n \n   /* Ambiguous unwind or unambiguous unwind verified as matching.  */"
    },
    {
      "sha": "00d8ded2ae0f1c3557ad5c6c39d5656f040a20b6",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d7aa59270373b6b1de6ac28e40ebf972028ee3e/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d7aa59270373b6b1de6ac28e40ebf972028ee3e/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=6d7aa59270373b6b1de6ac28e40ebf972028ee3e",
      "patch": "@@ -1412,7 +1412,18 @@ value_optimized_out (struct value *value)\n \t}\n       catch (const gdb_exception_error &ex)\n \t{\n-\t  /* Fall back to checking value->optimized_out.  */\n+\t  switch (ex.error)\n+\t    {\n+\t    case MEMORY_ERROR:\n+\t    case OPTIMIZED_OUT_ERROR:\n+\t    case NOT_AVAILABLE_ERROR:\n+\t      /* These can normally happen when we try to access an\n+\t\t optimized out or unavailable register, either in a\n+\t\t physical register or spilled to memory.  */\n+\t      break;\n+\t    default:\n+\t      throw;\n+\t    }\n \t}\n     }\n "
    }
  ]
}