{
  "sha": "616ce08e1cc98c28c42bc2afed6b92df449c7b00",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjE2Y2UwOGUxY2M5OGMyOGM0MmJjMmFmZWQ2YjkyZGY0NDljN2IwMA==",
  "commit": {
    "author": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T17:20:08Z"
    },
    "committer": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T17:20:08Z"
    },
    "message": "[Patch][binutils][arm]  Armv8.6-A Matrix Multiply extension [9/10]\n\nHi,\n\nThis patch is part of a series that adds support for Armv8.6-A\n(Matrix Multiply and BFloat16 extensions) to binutils.\n\nThis patch introduces the Matrix Multiply (Int8, F32, F64) extensions\nto the arm backend.\n\nThe following Matrix Multiply instructions are added: vummla, vsmmla,\nvusmmla, vusdot, vsudot[1].\n\n[1]https://developer.arm.com/docs/ddi0597/latest/simd-and-floating-point-instructions-alphabetic-order\n\nCommitted on behalf of Mihail Ionescu.\n\ngas/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/tc-arm.c (arm_ext_i8mm): New feature set.\n\t(do_vusdot): New.\n\t(do_vsudot): New.\n\t(do_vsmmla): New.\n\t(do_vummla): New.\n\t(insns): Add vsmmla, vummla, vusmmla, vusdot, vsudot mnemonics.\n\t(armv86a_ext_table): Add i8mm extension.\n\t(arm_extensions): Move bf16 extension to context sensitive table.\n\t(armv82a_ext_table, armv84a_ext_table, armv85a_ext_table):\n\tMove bf16 extension to context sensitive table.\n\t(armv86a_ext_table): Add i8mm extension.\n\t* doc/c-arm.texi: Document i8mm extension.\n\t* testsuite/gas/arm/i8mm.s: New test.\n\t* testsuite/gas/arm/i8mm.d: New test.\n\t* testsuite/gas/arm/bfloat17-cmdline-bad-3.d: Update test.\n\ninclude/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* opcode/arm.h (ARM_EXT2_I8MM): New feature macro.\n\nopcodes/ChangeLog:\n\n2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* arm-dis.c (neon_opcodes): Add i8mm SIMD instructions.\n\nRegression tested on arm-none-eabi.\nIs this ok for trunk?\n\nRegards,\nMihail",
    "tree": {
      "sha": "cbc0e78a74f954d5a40177b1887de248fa0d400f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cbc0e78a74f954d5a40177b1887de248fa0d400f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/616ce08e1cc98c28c42bc2afed6b92df449c7b00",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/616ce08e1cc98c28c42bc2afed6b92df449c7b00",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/616ce08e1cc98c28c42bc2afed6b92df449c7b00",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/616ce08e1cc98c28c42bc2afed6b92df449c7b00/comments",
  "author": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8382113fdb028386a335e8dee9ac04ebc8cf04a1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8382113fdb028386a335e8dee9ac04ebc8cf04a1"
    }
  ],
  "stats": {
    "total": 200,
    "additions": 195,
    "deletions": 5
  },
  "files": [
    {
      "sha": "2af2901604d03aa4c85fa41f675c375ff5b5153f",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=616ce08e1cc98c28c42bc2afed6b92df449c7b00",
      "patch": "@@ -1,3 +1,21 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/tc-arm.c (arm_ext_i8mm): New feature set.\n+\t(do_vusdot): New.\n+\t(do_vsudot): New.\n+\t(do_vsmmla): New.\n+\t(do_vummla): New.\n+\t(insns): Add vsmmla, vummla, vusmmla, vusdot, vsudot mnemonics.\n+\t(armv86a_ext_table): Add i8mm extension.\n+\t(arm_extensions): Move bf16 extension to context sensitive table.\n+\t(armv82a_ext_table, armv84a_ext_table, armv85a_ext_table):\n+\tMove bf16 extension to context sensitive table.\n+\t(armv86a_ext_table): Add i8mm extension.\n+\t* doc/c-arm.texi: Document i8mm extension.\n+\t* testsuite/gas/arm/i8mm.s: New test.\n+\t* testsuite/gas/arm/i8mm.d: New test.\n+\t* testsuite/gas/arm/bfloat17-cmdline-bad-3.d: Update test.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n \n \t* config/tc-aarch64.c: Add new arch fetures to suppport the mm extension."
    },
    {
      "sha": "2a884b13dcdeb11066ebc23d73b08ca48fa68929",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 83,
      "deletions": 4,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=616ce08e1cc98c28c42bc2afed6b92df449c7b00",
      "patch": "@@ -277,6 +277,8 @@ static const arm_feature_set arm_ext_predres =\n   ARM_FEATURE_CORE_HIGH (ARM_EXT2_PREDRES);\n static const arm_feature_set arm_ext_bf16 =\n   ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16);\n+static const arm_feature_set arm_ext_i8mm =\n+  ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM);\n \n static const arm_feature_set arm_arch_any = ARM_ANY;\n #ifdef OBJ_ELF\n@@ -21483,6 +21485,79 @@ do_neon_dotproduct_u (void)\n   return do_neon_dotproduct (1);\n }\n \n+static void\n+do_vusdot (void)\n+{\n+  enum neon_shape rs;\n+  set_pred_insn_type (OUTSIDE_PRED_INSN);\n+  if (inst.operands[2].isscalar)\n+    {\n+      rs = neon_select_shape (NS_DDS, NS_QQS, NS_NULL);\n+      neon_check_type (3, rs, N_EQK, N_EQK, N_S8 | N_KEY);\n+\n+      inst.instruction |= (1 << 25);\n+      int index = inst.operands[2].reg & 0xf;\n+      constraint ((index != 1 && index != 0), _(\"index must be 0 or 1\"));\n+      inst.operands[2].reg >>= 4;\n+      constraint (!(inst.operands[2].reg < 16),\n+\t\t  _(\"indexed register must be less than 16\"));\n+      neon_three_args (rs == NS_QQS);\n+      inst.instruction |= (index << 5);\n+    }\n+  else\n+    {\n+      inst.instruction |= (1 << 21);\n+      rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n+      neon_check_type (3, rs, N_EQK, N_EQK, N_S8 | N_KEY);\n+      neon_three_args (rs == NS_QQQ);\n+    }\n+}\n+\n+static void\n+do_vsudot (void)\n+{\n+  enum neon_shape rs;\n+  set_pred_insn_type (OUTSIDE_PRED_INSN);\n+  if (inst.operands[2].isscalar)\n+    {\n+      rs = neon_select_shape (NS_DDS, NS_QQS, NS_NULL);\n+      neon_check_type (3, rs, N_EQK, N_EQK, N_U8 | N_KEY);\n+\n+      inst.instruction |= (1 << 25);\n+      int index = inst.operands[2].reg & 0xf;\n+      constraint ((index != 1 && index != 0), _(\"index must be 0 or 1\"));\n+      inst.operands[2].reg >>= 4;\n+      constraint (!(inst.operands[2].reg < 16),\n+\t\t  _(\"indexed register must be less than 16\"));\n+      neon_three_args (rs == NS_QQS);\n+      inst.instruction |= (index << 5);\n+    }\n+}\n+\n+static void\n+do_vsmmla (void)\n+{\n+  enum neon_shape rs = neon_select_shape (NS_QQQ, NS_NULL);\n+  neon_check_type (3, rs, N_EQK, N_EQK, N_S8 | N_KEY);\n+\n+  set_pred_insn_type (OUTSIDE_PRED_INSN);\n+\n+  neon_three_args (1);\n+\n+}\n+\n+static void\n+do_vummla (void)\n+{\n+  enum neon_shape rs = neon_select_shape (NS_QQQ, NS_NULL);\n+  neon_check_type (3, rs, N_EQK, N_EQK, N_U8 | N_KEY);\n+\n+  set_pred_insn_type (OUTSIDE_PRED_INSN);\n+\n+  neon_three_args (1);\n+\n+}\n+\n /* Crypto v1 instructions.  */\n static void\n do_crypto_2op_1 (unsigned elttype, int op)\n@@ -26000,7 +26075,7 @@ static const struct asm_opcode insns[] =\n #define\tTHUMB_VARIANT &arm_ext_i8mm\n  TUF (\"vsmmla\", c200c40, fc200c40, 3, (RNQ, RNQ, RNQ), vsmmla, vsmmla),\n  TUF (\"vummla\", c200c50, fc200c50, 3, (RNQ, RNQ, RNQ), vummla, vummla),\n- TUF (\"vusmmla\", ca00c40, fca00c40, 3, (RNQ, RNQ, RNQ), vummla, vummla),\n+ TUF (\"vusmmla\", ca00c40, fca00c40, 3, (RNQ, RNQ, RNQ), vsmmla, vsmmla),\n  TUF (\"vusdot\", c800d00, fc800d00, 3, (RNDQ, RNDQ, RNDQ_RNSC), vusdot, vusdot),\n  TUF (\"vsudot\", c800d10, fc800d10, 3, (RNDQ, RNDQ, RNSC), vsudot, vsudot),\n };\n@@ -31127,6 +31202,8 @@ static const struct arm_ext_table armv82a_ext_table[] =\n   ARM_ADD (\"simd\", FPU_ARCH_NEON_VFP_ARMV8_1),\n   ARM_ADD (\"fp16\", FPU_ARCH_NEON_VFP_ARMV8_2_FP16),\n   ARM_ADD (\"fp16fml\", FPU_ARCH_NEON_VFP_ARMV8_2_FP16FML),\n+  ARM_ADD (\"bf16\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16)),\n+  ARM_ADD (\"i8mm\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM)),\n   ARM_EXT (\"crypto\", FPU_ARCH_CRYPTO_NEON_VFP_ARMV8_1,\n \t   ARM_FEATURE_COPROC (FPU_CRYPTO_ARMV8)),\n   ARM_ADD (\"dotprod\", FPU_ARCH_DOTPROD_NEON_VFP_ARMV8),\n@@ -31143,6 +31220,8 @@ static const struct arm_ext_table armv84a_ext_table[] =\n {\n   ARM_ADD (\"simd\", FPU_ARCH_DOTPROD_NEON_VFP_ARMV8),\n   ARM_ADD (\"fp16\", FPU_ARCH_NEON_VFP_ARMV8_4_FP16FML),\n+  ARM_ADD (\"bf16\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16)),\n+  ARM_ADD (\"i8mm\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM)),\n   ARM_EXT (\"crypto\", FPU_ARCH_CRYPTO_NEON_VFP_ARMV8_4,\n \t   ARM_FEATURE_COPROC (FPU_CRYPTO_ARMV8)),\n \n@@ -31158,6 +31237,8 @@ static const struct arm_ext_table armv85a_ext_table[] =\n {\n   ARM_ADD (\"simd\", FPU_ARCH_DOTPROD_NEON_VFP_ARMV8),\n   ARM_ADD (\"fp16\", FPU_ARCH_NEON_VFP_ARMV8_4_FP16FML),\n+  ARM_ADD (\"bf16\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16)),\n+  ARM_ADD (\"i8mm\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM)),\n   ARM_EXT (\"crypto\", FPU_ARCH_CRYPTO_NEON_VFP_ARMV8_4,\n \t   ARM_FEATURE_COPROC (FPU_CRYPTO_ARMV8)),\n \n@@ -31169,6 +31250,7 @@ static const struct arm_ext_table armv85a_ext_table[] =\n \n static const struct arm_ext_table armv86a_ext_table[] =\n {\n+  ARM_ADD (\"i8mm\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM)),\n   { NULL, 0, ARM_ARCH_NONE, ARM_ARCH_NONE }\n };\n \n@@ -31308,9 +31390,6 @@ struct arm_option_extension_value_table\n    use the context sensitive approach using arm_ext_table's.  */\n static const struct arm_option_extension_value_table arm_extensions[] =\n {\n-  ARM_EXT_OPT (\"bf16\",  ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n-\t\t\tARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n-\t\t\tARM_ARCH_V8_2A),\n   ARM_EXT_OPT (\"crc\",  ARCH_CRC_ARMV8, ARM_FEATURE_COPROC (CRC_EXT_ARMV8),\n \t\t\t ARM_FEATURE_CORE_LOW (ARM_EXT_V8)),\n   ARM_EXT_OPT (\"crypto\", FPU_ARCH_CRYPTO_NEON_VFP_ARMV8,"
    },
    {
      "sha": "a67bb59899abfe6638977234a1c43e196d8e395c",
      "filename": "gas/doc/c-arm.texi",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/doc/c-arm.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/doc/c-arm.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-arm.texi?ref=616ce08e1cc98c28c42bc2afed6b92df449c7b00",
      "patch": "@@ -181,6 +181,7 @@ been added, again in ascending alphabetical order.  For example,\n \n The following extensions are currently supported:\n @code{bf16} (BFloat16 extensions for v8.6-A architecture),\n+@code{i8mm} (Int8 Matrix Multiply extensions for v8.6-A architecture),\n @code{crc}\n @code{crypto} (Cryptography Extensions for v8-A architecture, implies @code{fp+simd}),\n @code{dotprod} (Dot Product Extensions for v8.2-A architecture, implies @code{fp+simd}),"
    },
    {
      "sha": "ad99cda5dc4bc158b70c5a678e432c2ad64fd7d3",
      "filename": "gas/testsuite/gas/arm/bfloat16-cmdline-bad-3.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/testsuite/gas/arm/bfloat16-cmdline-bad-3.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/testsuite/gas/arm/bfloat16-cmdline-bad-3.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/bfloat16-cmdline-bad-3.d?ref=616ce08e1cc98c28c42bc2afed6b92df449c7b00",
      "patch": "@@ -1,4 +1,4 @@\n #name: Bfloat 16 bad extension\n #source: bfloat16-non-neon.s\n #as: -mno-warn-deprecated -march=armv8.1-a+bf16\n-#error: .*Error: extension does not apply to the base architecture.*\n+#error: .*Error: unknown architectural extension `bf16'*"
    },
    {
      "sha": "6d7f1d74e443a047cc71ec3e2e2b515431eecceb",
      "filename": "gas/testsuite/gas/arm/i8mm.d",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/testsuite/gas/arm/i8mm.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/testsuite/gas/arm/i8mm.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/i8mm.d?ref=616ce08e1cc98c28c42bc2afed6b92df449c7b00",
      "patch": "@@ -0,0 +1,36 @@\n+#name: Int8 Matrix Multiply extension\n+#source: i8mm.s\n+#as: -mno-warn-deprecated -march=armv8.6-a+i8mm+simd -I$srcdir/$subdir\n+#objdump: -dr --show-raw-insn\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section \\.text:\n+\n+00000000 <\\.text>:\n+ *[0-9a-f]+:\tfcea4c40 \tvusmmla\\.s8\tq10, q5, q0\n+ *[0-9a-f]+:\tfc6a4c50 \tvummla\\.u8\tq10, q5, q0\n+ *[0-9a-f]+:\tfc6a4c40 \tvsmmla\\.s8\tq10, q5, q0\n+ *[0-9a-f]+:\tfcea4d40 \tvusdot\\.s8\tq10, q5, q0\n+ *[0-9a-f]+:\tfeca4d50 \tvsudot\\.u8\tq10, q5, d0\\[0\\]\n+ *[0-9a-f]+:\tfeca4d70 \tvsudot\\.u8\tq10, q5, d0\\[1\\]\n+ *[0-9a-f]+:\tfeca4d40 \tvusdot\\.s8\tq10, q5, d0\\[0\\]\n+ *[0-9a-f]+:\tfeca4d60 \tvusdot\\.s8\tq10, q5, d0\\[1\\]\n+ *[0-9a-f]+:\tfca5ad00 \tvusdot\\.s8\td10, d5, d0\n+ *[0-9a-f]+:\tfe85ad00 \tvusdot\\.s8\td10, d5, d0\\[0\\]\n+ *[0-9a-f]+:\tfe85ad20 \tvusdot\\.s8\td10, d5, d0\\[1\\]\n+ *[0-9a-f]+:\tfe85ad10 \tvsudot\\.u8\td10, d5, d0\\[0\\]\n+ *[0-9a-f]+:\tfe85ad30 \tvsudot\\.u8\td10, d5, d0\\[1\\]\n+ *[0-9a-f]+:\tfcea4c40 \tvusmmla\\.s8\tq10, q5, q0\n+ *[0-9a-f]+:\tfc6a4c50 \tvummla\\.u8\tq10, q5, q0\n+ *[0-9a-f]+:\tfc6a4c40 \tvsmmla\\.s8\tq10, q5, q0\n+ *[0-9a-f]+:\tfcea4d40 \tvusdot\\.s8\tq10, q5, q0\n+ *[0-9a-f]+:\tfeca4d50 \tvsudot\\.u8\tq10, q5, d0\\[0\\]\n+ *[0-9a-f]+:\tfeca4d70 \tvsudot\\.u8\tq10, q5, d0\\[1\\]\n+ *[0-9a-f]+:\tfeca4d40 \tvusdot\\.s8\tq10, q5, d0\\[0\\]\n+ *[0-9a-f]+:\tfeca4d60 \tvusdot\\.s8\tq10, q5, d0\\[1\\]\n+ *[0-9a-f]+:\tfca5ad00 \tvusdot\\.s8\td10, d5, d0\n+ *[0-9a-f]+:\tfe85ad00 \tvusdot\\.s8\td10, d5, d0\\[0\\]\n+ *[0-9a-f]+:\tfe85ad20 \tvusdot\\.s8\td10, d5, d0\\[1\\]\n+ *[0-9a-f]+:\tfe85ad10 \tvsudot\\.u8\td10, d5, d0\\[0\\]\n+ *[0-9a-f]+:\tfe85ad30 \tvsudot\\.u8\td10, d5, d0\\[1\\]"
    },
    {
      "sha": "20d04309ce009a6c56f50f4080756a913a92177e",
      "filename": "gas/testsuite/gas/arm/i8mm.s",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/testsuite/gas/arm/i8mm.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/616ce08e1cc98c28c42bc2afed6b92df449c7b00/gas/testsuite/gas/arm/i8mm.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/i8mm.s?ref=616ce08e1cc98c28c42bc2afed6b92df449c7b00",
      "patch": "@@ -0,0 +1,32 @@\n+vusmmla.s8 q10, q5, q0\n+vummla.u8 q10, q5, q0\n+vsmmla.s8 q10, q5, q0\n+\n+vusdot.s8 q10, q5, q0\n+vsudot.u8 q10, q5, d0[0]\n+vsudot.u8 q10, q5, d0[1]\n+vusdot.s8 q10, q5, d0[0]\n+vusdot.s8 q10, q5, d0[1]\n+\n+vusdot.s8 d10, d5, d0\n+vusdot.s8 d10, d5, d0[0]\n+vusdot.s8 d10, d5, d0[1]\n+vsudot.u8 d10, d5, d0[0]\n+vsudot.u8 d10, d5, d0[1]\n+\n+\n+vusmmla q10.s8, q5.s8, q0.s8\n+vummla q10.u8, q5.u8, q0.u8\n+vsmmla q10.s8, q5.s8, q0.s8\n+\n+vusdot q10.s8, q5.s8, q0.s8\n+vsudot q10.u8, q5.u8, d0.u8[0]\n+vsudot q10.u8, q5.u8, d0.u8[1]\n+vusdot q10.s8, q5.s8, d0.s8[0]\n+vusdot q10.s8, q5.s8, d0.s8[1]\n+\n+vusdot d10.s8, d5.s8, d0.s8\n+vusdot d10.s8, d5.s8, d0.s8[0]\n+vusdot d10.s8, d5.s8, d0.s8[1]\n+vsudot d10.u8, d5.u8, d0.u8[0]\n+vsudot d10.u8, d5.u8, d0.u8[1]"
    },
    {
      "sha": "591ae4e773b6b857fd5c06e0a6f0a5c6ab7a08f6",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/616ce08e1cc98c28c42bc2afed6b92df449c7b00/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/616ce08e1cc98c28c42bc2afed6b92df449c7b00/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=616ce08e1cc98c28c42bc2afed6b92df449c7b00",
      "patch": "@@ -1,3 +1,7 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* opcode/arm.h (ARM_EXT2_I8MM): New feature macro.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n \n \t* opcode/aarch64.h (AARCH64_FEATURE_I8MM): New."
    },
    {
      "sha": "982da5abbdefb7ca6f76287dae9281e2615d4312",
      "filename": "include/opcode/arm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/616ce08e1cc98c28c42bc2afed6b92df449c7b00/include/opcode/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/616ce08e1cc98c28c42bc2afed6b92df449c7b00/include/opcode/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/arm.h?ref=616ce08e1cc98c28c42bc2afed6b92df449c7b00",
      "patch": "@@ -75,6 +75,7 @@\n #define ARM_EXT2_V8_1M_MAIN  0x00008000 /* ARMv8.1-M Mainline.\t\t     */\n #define ARM_EXT2_V8_6A\t     0x00010000\t/* ARM V8.6A.\t\t\t     */\n #define ARM_EXT2_BF16\t     0x00020000 /* ARMv8 bfloat16.\t\t     */\n+#define ARM_EXT2_I8MM\t     0x00040000 /* ARMv8.6A i8mm.\t\t     */\n \n /* Co-processor space extensions.  */\n #define ARM_CEXT_XSCALE\t     0x00000001\t/* Allow MIA etc.\t \t   */"
    },
    {
      "sha": "b51d4065114297800dad8b9e0281f1f0fd9dcf3e",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/616ce08e1cc98c28c42bc2afed6b92df449c7b00/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/616ce08e1cc98c28c42bc2afed6b92df449c7b00/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=616ce08e1cc98c28c42bc2afed6b92df449c7b00",
      "patch": "@@ -1,3 +1,8 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* arm-dis.c (neon_opcodes): Add i8mm SIMD instructions.\n+\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n \n \t* aarch64-tbl.h (aarch64_feature_i8mm_sve, aarch64_feature_f32mm_sve,"
    },
    {
      "sha": "8f82cb24e46defbfe5963237a6b5a2cc94adb258",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/616ce08e1cc98c28c42bc2afed6b92df449c7b00/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/616ce08e1cc98c28c42bc2afed6b92df449c7b00/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=616ce08e1cc98c28c42bc2afed6b92df449c7b00",
      "patch": "@@ -1471,6 +1471,20 @@ static const struct opcode32 neon_opcodes[] =\n   {ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16),\n     0xfe300810, 0xffb00f10, \"vfma%6?tb.bf16\\t%12-15,22Q, %16-19,7Q, %0-2D[%3,5d]\"},\n \n+  /* Matrix Multiply instructions.  */\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM),\n+    0xfc200c40, 0xffb00f50, \"vsmmla.s8\\t%12-15,22R, %16-19,7R, %0-3,5R\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM),\n+    0xfc200c50, 0xffb00f50, \"vummla.u8\\t%12-15,22R, %16-19,7R, %0-3,5R\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM),\n+    0xfca00c40, 0xffb00f50, \"vusmmla.s8\\t%12-15,22R, %16-19,7R, %0-3,5R\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM),\n+    0xfca00d00, 0xffb00f10, \"vusdot.s8\\t%12-15,22R, %16-19,7R, %0-3,5R\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM),\n+    0xfe800d00, 0xffb00f10, \"vusdot.s8\\t%12-15,22R, %16-19,7R, d%0-3d[%5d]\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM),\n+    0xfe800d10, 0xffb00f10, \"vsudot.u8\\t%12-15,22R, %16-19,7R, d%0-3d[%5d]\"},\n+\n   /* Two registers, miscellaneous.  */\n   {ARM_FEATURE_COPROC (FPU_NEON_EXT_ARMV8),\n     0xf3ba0400, 0xffbf0c10, \"vrint%7-9?p?m?zaxn%u.f32\\t%12-15,22R, %0-3,5R\"},"
    }
  ]
}