{
  "sha": "5d7f11f0e76ca290e3745c8836b92a5266cb84e2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWQ3ZjExZjBlNzZjYTI5MGUzNzQ1Yzg4MzZiOTJhNTI2NmNiODRlMg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-25T05:36:49Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-25T07:17:16Z"
    },
    "message": "[GOLD] PR27815, gold fails to build with latest GCC\n\nDon't use nullptr, it requires -std=c++11 on versions of gcc prior to\n6.1.  It would be possible to arrange to pass -std=c++11 automatically\nwhen required (top level configure does that for gcc builds) but that\nseems overkill and since we're not up-to-date on the top level config\nfiles would mean someone would need to sync those over.\n\n\tPR gold/27815\n\t* gc.h (gc_process_relocs): Use cast in Section_id constructor.",
    "tree": {
      "sha": "0631d08811a995a8bcc058ff8e88b07afb18b66a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0631d08811a995a8bcc058ff8e88b07afb18b66a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5d7f11f0e76ca290e3745c8836b92a5266cb84e2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d7f11f0e76ca290e3745c8836b92a5266cb84e2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5d7f11f0e76ca290e3745c8836b92a5266cb84e2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d7f11f0e76ca290e3745c8836b92a5266cb84e2/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4be1e8dbb3f8da8058ed93dfc222ee6dffb02e60",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4be1e8dbb3f8da8058ed93dfc222ee6dffb02e60",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4be1e8dbb3f8da8058ed93dfc222ee6dffb02e60"
    }
  ],
  "stats": {
    "total": 9,
    "additions": 7,
    "deletions": 2
  },
  "files": [
    {
      "sha": "84df32ac3a038dc96bf7cd1b76ba253c1222a9c9",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d7f11f0e76ca290e3745c8836b92a5266cb84e2/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d7f11f0e76ca290e3745c8836b92a5266cb84e2/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=5d7f11f0e76ca290e3745c8836b92a5266cb84e2",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-25  Alan Modra  <amodra@gmail.com>\n+\n+\tPR gold/27815\n+\t* gc.h (gc_process_relocs): Use cast in Section_id constructor.\n+\n 2021-05-22  Alan Modra  <amodra@gmail.com>\n \n \tPR gold/27815"
    },
    {
      "sha": "6ebd81f3fd0eebfd3459c96fa5c0dbd0451c2e46",
      "filename": "gold/gc.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5d7f11f0e76ca290e3745c8836b92a5266cb84e2/gold/gc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5d7f11f0e76ca290e3745c8836b92a5266cb84e2/gold/gc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/gc.h?ref=5d7f11f0e76ca290e3745c8836b92a5266cb84e2",
      "patch": "@@ -247,7 +247,7 @@ gc_process_relocs(\n \t      if (is_ordinary) \n \t\t(*secvec).push_back(Section_id(src_obj, dst_indx));\n \t      else\n-\t\t(*secvec).push_back(Section_id(nullptr, 0));\n+\t\t(*secvec).push_back(Section_id(reinterpret_cast<Relobj*>(NULL), 0));\n               // If the target of the relocation is an STT_SECTION symbol,\n               // make a note of that by storing -1 in the symbol vector.\n               if (lsym.get_st_type() == elfcpp::STT_SECTION)\n@@ -329,7 +329,7 @@ gc_process_relocs(\n               if (is_ordinary && dst_obj != NULL)\n \t\t(*secvec).push_back(Section_id(dst_obj, dst_indx));\n \t      else\n-\t\t(*secvec).push_back(Section_id(nullptr, 0));\n+\t\t(*secvec).push_back(Section_id(reinterpret_cast<Relobj*>(NULL), 0));\n               (*symvec).push_back(gsym);\n \t      (*addendvec).push_back(std::make_pair(\n \t\t\t\t\tstatic_cast<long long>(symvalue),"
    }
  ]
}