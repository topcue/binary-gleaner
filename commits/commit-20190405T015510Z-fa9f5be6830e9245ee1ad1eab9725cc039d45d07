{
  "sha": "fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmE5ZjViZTY4MzBlOTI0NWVlMWFkMWVhYjk3MjVjYzAzOWQ0NWQwNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-24T14:56:33Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-05T01:55:10Z"
    },
    "message": "Turn parse_gdbarch into a method\n\nThis changes parse_gdbarch into a method of parser_state.  This patch\nwas written by a script.\n\ngdb/ChangeLog\n2019-04-04  Tom Tromey  <tom@tromey.com>\n\n\t* rust-exp.y: Replace \"parse_gdbarch\" with method call.\n\t* parse.c (write_dollar_variable, insert_type_address_space):\n\tReplace \"parse_gdbarch\" with method call.\n\t* p-exp.y (parse_type, yylex): Replace \"parse_gdbarch\" with method\n\tcall.\n\t* objc-lang.c (end_msglist): Replace \"parse_gdbarch\" with method\n\tcall.\n\t* m2-exp.y (parse_type, parse_m2_type, yylex): Replace\n\t\"parse_gdbarch\" with method call.\n\t* go-exp.y (parse_type, classify_name): Replace \"parse_gdbarch\"\n\twith method call.\n\t* f-exp.y (parse_type, parse_f_type, yylex): Replace\n\t\"parse_gdbarch\" with method call.\n\t* d-exp.y (parse_type, parse_d_type, lex_one_token): Replace\n\t\"parse_gdbarch\" with method call.\n\t* c-exp.y (parse_type, parse_number, classify_name): Replace\n\t\"parse_gdbarch\" with method call.\n\t* ada-lex.l: Replace \"parse_gdbarch\" with method call.\n\t* ada-exp.y (parse_type, find_primitive_type, type_char)\n\t(type_system_address): Replace \"parse_gdbarch\" with method call.",
    "tree": {
      "sha": "f3c07a37248af8681ed56a14a6c030878855c4d1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f3c07a37248af8681ed56a14a6c030878855c4d1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1201a264c8fd227737342345ab54e938295188b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1201a264c8fd227737342345ab54e938295188b6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1201a264c8fd227737342345ab54e938295188b6"
    }
  ],
  "stats": {
    "total": 219,
    "additions": 124,
    "deletions": 95
  },
  "files": [
    {
      "sha": "7495f6152d388ccd6dcb622706659d452666a758",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -1,3 +1,26 @@\n+2019-04-04  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-exp.y: Replace \"parse_gdbarch\" with method call.\n+\t* parse.c (write_dollar_variable, insert_type_address_space):\n+\tReplace \"parse_gdbarch\" with method call.\n+\t* p-exp.y (parse_type, yylex): Replace \"parse_gdbarch\" with method\n+\tcall.\n+\t* objc-lang.c (end_msglist): Replace \"parse_gdbarch\" with method\n+\tcall.\n+\t* m2-exp.y (parse_type, parse_m2_type, yylex): Replace\n+\t\"parse_gdbarch\" with method call.\n+\t* go-exp.y (parse_type, classify_name): Replace \"parse_gdbarch\"\n+\twith method call.\n+\t* f-exp.y (parse_type, parse_f_type, yylex): Replace\n+\t\"parse_gdbarch\" with method call.\n+\t* d-exp.y (parse_type, parse_d_type, lex_one_token): Replace\n+\t\"parse_gdbarch\" with method call.\n+\t* c-exp.y (parse_type, parse_number, classify_name): Replace\n+\t\"parse_gdbarch\" with method call.\n+\t* ada-lex.l: Replace \"parse_gdbarch\" with method call.\n+\t* ada-exp.y (parse_type, find_primitive_type, type_char)\n+\t(type_system_address): Replace \"parse_gdbarch\" with method call.\n+\n 2019-04-04  Tom Tromey  <tom@tromey.com>\n \n \t* dtrace-probe.c (dtrace_probe::build_arg_exprs): Update."
    },
    {
      "sha": "74dab760cf874efdd5a8ebec1ee5570f405da64a",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -48,7 +48,7 @@\n #include \"frame.h\"\n #include \"block.h\"\n \n-#define parse_type(ps) builtin_type (parse_gdbarch (ps))\n+#define parse_type(ps) builtin_type (ps->gdbarch ())\n \n /* Remap normal yacc parser interface names (yyparse, yylex, yyerror,\n    etc).  */\n@@ -1028,7 +1028,7 @@ find_primitive_type (struct parser_state *par_state, char *name)\n {\n   struct type *type;\n   type = language_lookup_primitive_type (parse_language (par_state),\n-\t\t\t\t\t parse_gdbarch (par_state),\n+\t\t\t\t\t par_state->gdbarch (),\n \t\t\t\t\t name);\n   if (type == NULL && strcmp (\"system__address\", name) == 0)\n     type = type_system_address (par_state);\n@@ -1443,7 +1443,7 @@ static struct type *\n type_char (struct parser_state *par_state)\n {\n   return language_string_char_type (parse_language (par_state),\n-\t\t\t\t    parse_gdbarch (par_state));\n+\t\t\t\t    par_state->gdbarch ());\n }\n \n static struct type *\n@@ -1457,7 +1457,7 @@ type_system_address (struct parser_state *par_state)\n {\n   struct type *type \n     = language_lookup_primitive_type (parse_language (par_state),\n-\t\t\t\t      parse_gdbarch (par_state),\n+\t\t\t\t      par_state->gdbarch (),\n \t\t\t\t      \"system__address\");\n   return  type != NULL ? type : parse_type (par_state)->builtin_data_ptr;\n }"
    },
    {
      "sha": "17ac7e5d3d5d099b73904216089406b481a320d7",
      "filename": "gdb/ada-lex.l",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/ada-lex.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/ada-lex.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lex.l?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -370,11 +370,11 @@ processInt (struct parser_state *par_state, const char *base0,\n       exp -= 1;\n     }\n \n-  if ((result >> (gdbarch_int_bit (parse_gdbarch (par_state))-1)) == 0)\n+  if ((result >> (gdbarch_int_bit (par_state->gdbarch ())-1)) == 0)\n     yylval.typed_val.type = type_int (par_state);\n-  else if ((result >> (gdbarch_long_bit (parse_gdbarch (par_state))-1)) == 0)\n+  else if ((result >> (gdbarch_long_bit (par_state->gdbarch ())-1)) == 0)\n     yylval.typed_val.type = type_long (par_state);\n-  else if (((result >> (gdbarch_long_bit (parse_gdbarch (par_state))-1)) >> 1) == 0)\n+  else if (((result >> (gdbarch_long_bit (par_state->gdbarch ())-1)) >> 1) == 0)\n     {\n       /* We have a number representable as an unsigned integer quantity.\n          For consistency with the C treatment, we will treat it as an\n@@ -384,7 +384,7 @@ processInt (struct parser_state *par_state, const char *base0,\n          assignment does the trick (no, it doesn't; read the reference manual).\n        */\n       yylval.typed_val.type\n-\t= builtin_type (parse_gdbarch (par_state))->builtin_unsigned_long;\n+\t= builtin_type (par_state->gdbarch ())->builtin_unsigned_long;\n       if (result & LONGEST_SIGN)\n \tyylval.typed_val.val =\n \t  (LONGEST) (result & ~LONGEST_SIGN)"
    },
    {
      "sha": "b78851972d16c8807e9eb096f996b9532dcf30df",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 45,
      "deletions": 45,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -54,7 +54,7 @@\n #include \"typeprint.h\"\n #include \"cp-abi.h\"\n \n-#define parse_type(ps) builtin_type (parse_gdbarch (ps))\n+#define parse_type(ps) builtin_type (ps->gdbarch ())\n \n /* Remap normal yacc parser interface names (yyparse, yylex, yyerror,\n    etc).  */\n@@ -470,7 +470,7 @@ exp\t: \tOBJC_LBRAC TYPENAME\n \t\t\t{\n \t\t\t  CORE_ADDR theclass;\n \n-\t\t\t  theclass = lookup_objc_class (parse_gdbarch (pstate),\n+\t\t\t  theclass = lookup_objc_class (pstate->gdbarch (),\n \t\t\t\t\t\t     copy_name ($2.stoken));\n \t\t\t  if (theclass == 0)\n \t\t\t    error (_(\"%s is not an ObjC Class\"),\n@@ -816,7 +816,7 @@ exp\t:\tSIZEOF '(' type ')'\t%prec UNARY\n \t\t\t  write_exp_elt_opcode (pstate, OP_LONG);\n \t\t\t  write_exp_elt_type (pstate, lookup_signed_typename\n \t\t\t\t\t      (parse_language (pstate),\n-\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t       \"int\"));\n \t\t\t  type = check_typedef (type);\n \n@@ -1285,117 +1285,117 @@ typebase\n \t\t\t{ $$ = $1.type; }\n \t|\tINT_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"int\"); }\n \t|\tLONG\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long\"); }\n \t|\tSHORT\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"short\"); }\n \t|\tLONG INT_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long\"); }\n \t|\tLONG SIGNED_KEYWORD INT_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long\"); }\n \t|\tLONG SIGNED_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long\"); }\n \t|\tSIGNED_KEYWORD LONG INT_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long\"); }\n \t|\tUNSIGNED LONG INT_KEYWORD\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long\"); }\n \t|\tLONG UNSIGNED INT_KEYWORD\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long\"); }\n \t|\tLONG UNSIGNED\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long\"); }\n \t|\tLONG LONG\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tLONG LONG INT_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tLONG LONG SIGNED_KEYWORD INT_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tLONG LONG SIGNED_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tSIGNED_KEYWORD LONG LONG\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tSIGNED_KEYWORD LONG LONG INT_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tUNSIGNED LONG LONG\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long long\"); }\n \t|\tUNSIGNED LONG LONG INT_KEYWORD\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long long\"); }\n \t|\tLONG LONG UNSIGNED\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long long\"); }\n \t|\tLONG LONG UNSIGNED INT_KEYWORD\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long long\"); }\n \t|\tSHORT INT_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"short\"); }\n \t|\tSHORT SIGNED_KEYWORD INT_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"short\"); }\n \t|\tSHORT SIGNED_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"short\"); }\n \t|\tUNSIGNED SHORT INT_KEYWORD\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"short\"); }\n \t|\tSHORT UNSIGNED\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"short\"); }\n \t|\tSHORT UNSIGNED INT_KEYWORD\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"short\"); }\n \t|\tDOUBLE_KEYWORD\n \t\t\t{ $$ = lookup_typename (parse_language (pstate),\n-\t\t\t\t\t\tparse_gdbarch (pstate),\n+\t\t\t\t\t\tpstate->gdbarch (),\n \t\t\t\t\t\t\"double\",\n \t\t\t\t\t\tNULL,\n \t\t\t\t\t\t0); }\n \t|\tLONG DOUBLE_KEYWORD\n \t\t\t{ $$ = lookup_typename (parse_language (pstate),\n-\t\t\t\t\t\tparse_gdbarch (pstate),\n+\t\t\t\t\t\tpstate->gdbarch (),\n \t\t\t\t\t\t\"long double\",\n \t\t\t\t\t\tNULL,\n \t\t\t\t\t\t0); }\n@@ -1457,19 +1457,19 @@ typebase\n \t\t\t}\n \t|\tUNSIGNED type_name\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t TYPE_NAME($2.type)); }\n \t|\tUNSIGNED\n \t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n-\t\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"int\"); }\n \t|\tSIGNED_KEYWORD type_name\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       TYPE_NAME($2.type)); }\n \t|\tSIGNED_KEYWORD\n \t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t       parse_gdbarch (pstate),\n+\t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"int\"); }\n                 /* It appears that this rule for templates is never\n                    reduced; template recognition happens by lookahead\n@@ -1490,23 +1490,23 @@ type_name:\tTYPENAME\n \t\t  $$.stoken.ptr = \"int\";\n \t\t  $$.stoken.length = 3;\n \t\t  $$.type = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t    parse_gdbarch (pstate),\n+\t\t\t\t\t\t    pstate->gdbarch (),\n \t\t\t\t\t\t    \"int\");\n \t\t}\n \t|\tLONG\n \t\t{\n \t\t  $$.stoken.ptr = \"long\";\n \t\t  $$.stoken.length = 4;\n \t\t  $$.type = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t    parse_gdbarch (pstate),\n+\t\t\t\t\t\t    pstate->gdbarch (),\n \t\t\t\t\t\t    \"long\");\n \t\t}\n \t|\tSHORT\n \t\t{\n \t\t  $$.stoken.ptr = \"short\";\n \t\t  $$.stoken.length = 5;\n \t\t  $$.type = lookup_signed_typename (parse_language (pstate),\n-\t\t\t\t\t\t    parse_gdbarch (pstate),\n+\t\t\t\t\t\t    pstate->gdbarch (),\n \t\t\t\t\t\t    \"short\");\n \t\t}\n \t;\n@@ -2021,10 +2021,10 @@ parse_number (struct parser_state *par_state,\n \n   un = n >> 2;\n   if (long_p == 0\n-      && (un >> (gdbarch_int_bit (parse_gdbarch (par_state)) - 2)) == 0)\n+      && (un >> (gdbarch_int_bit (par_state->gdbarch ()) - 2)) == 0)\n     {\n       high_bit\n-\t= ((ULONGEST)1) << (gdbarch_int_bit (parse_gdbarch (par_state)) - 1);\n+\t= ((ULONGEST)1) << (gdbarch_int_bit (par_state->gdbarch ()) - 1);\n \n       /* A large decimal (not hex or octal) constant (between INT_MAX\n \t and UINT_MAX) is a long or unsigned long, according to ANSI,\n@@ -2036,22 +2036,22 @@ parse_number (struct parser_state *par_state,\n       signed_type = parse_type (par_state)->builtin_int;\n     }\n   else if (long_p <= 1\n-\t   && (un >> (gdbarch_long_bit (parse_gdbarch (par_state)) - 2)) == 0)\n+\t   && (un >> (gdbarch_long_bit (par_state->gdbarch ()) - 2)) == 0)\n     {\n       high_bit\n-\t= ((ULONGEST)1) << (gdbarch_long_bit (parse_gdbarch (par_state)) - 1);\n+\t= ((ULONGEST)1) << (gdbarch_long_bit (par_state->gdbarch ()) - 1);\n       unsigned_type = parse_type (par_state)->builtin_unsigned_long;\n       signed_type = parse_type (par_state)->builtin_long;\n     }\n   else\n     {\n       int shift;\n       if (sizeof (ULONGEST) * HOST_CHAR_BIT\n-\t  < gdbarch_long_long_bit (parse_gdbarch (par_state)))\n+\t  < gdbarch_long_long_bit (par_state->gdbarch ()))\n \t/* A long long does not fit in a LONGEST.  */\n \tshift = (sizeof (ULONGEST) * HOST_CHAR_BIT - 1);\n       else\n-\tshift = (gdbarch_long_long_bit (parse_gdbarch (par_state)) - 1);\n+\tshift = (gdbarch_long_long_bit (par_state->gdbarch ()) - 1);\n       high_bit = (ULONGEST) 1 << shift;\n       unsigned_type = parse_type (par_state)->builtin_unsigned_long_long;\n       signed_type = parse_type (par_state)->builtin_long_long;\n@@ -3001,7 +3001,7 @@ classify_name (struct parser_state *par_state, const struct block *block,\n   /* See if it's an ObjC classname.  */\n   if (parse_language (par_state)->la_language == language_objc && !bsym.symbol)\n     {\n-      CORE_ADDR Class = lookup_objc_class (parse_gdbarch (par_state), copy);\n+      CORE_ADDR Class = lookup_objc_class (par_state->gdbarch (), copy);\n       if (Class)\n \t{\n \t  struct symbol *sym;"
    },
    {
      "sha": "73d5cfc368ad8e63a719fefc6ee00c771a1c5e79",
      "filename": "gdb/d-exp.y",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/d-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/d-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-exp.y?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -52,8 +52,8 @@\n #include \"charset.h\"\n #include \"block.h\"\n \n-#define parse_type(ps) builtin_type (parse_gdbarch (ps))\n-#define parse_d_type(ps) builtin_d_type (parse_gdbarch (ps))\n+#define parse_type(ps) builtin_type (ps->gdbarch ())\n+#define parse_d_type(ps) builtin_d_type (ps->gdbarch ())\n \n /* Remap normal yacc parser interface names (yyparse, yylex, yyerror,\n    etc).  */\n@@ -1289,7 +1289,7 @@ lex_one_token (struct parser_state *par_state)\n \n   yylval.tsym.type\n     = language_lookup_primitive_type (parse_language (par_state),\n-\t\t\t\t      parse_gdbarch (par_state), copy);\n+\t\t\t\t      par_state->gdbarch (), copy);\n   if (yylval.tsym.type != NULL)\n     return TYPENAME;\n "
    },
    {
      "sha": "499de419222241ba013662e74564ac8927eb75ed",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -55,8 +55,8 @@\n #include <ctype.h>\n #include <algorithm>\n \n-#define parse_type(ps) builtin_type (parse_gdbarch (ps))\n-#define parse_f_type(ps) builtin_f_type (parse_gdbarch (ps))\n+#define parse_type(ps) builtin_type (ps->gdbarch ())\n+#define parse_f_type(ps) builtin_f_type (ps->gdbarch ())\n \n /* Remap normal yacc parser interface names (yyparse, yylex, yyerror,\n    etc).  */\n@@ -763,22 +763,22 @@ parse_number (struct parser_state *par_state,\n      are the same size.  So we shift it twice, with fewer bits\n      each time, for the same result.  */\n   \n-  if ((gdbarch_int_bit (parse_gdbarch (par_state))\n-       != gdbarch_long_bit (parse_gdbarch (par_state))\n+  if ((gdbarch_int_bit (par_state->gdbarch ())\n+       != gdbarch_long_bit (par_state->gdbarch ())\n        && ((n >> 2)\n-\t   >> (gdbarch_int_bit (parse_gdbarch (par_state))-2))) /* Avoid\n+\t   >> (gdbarch_int_bit (par_state->gdbarch ())-2))) /* Avoid\n \t\t\t\t\t\t\t    shift warning */\n       || long_p)\n     {\n       high_bit = ((ULONGEST)1)\n-      << (gdbarch_long_bit (parse_gdbarch (par_state))-1);\n+      << (gdbarch_long_bit (par_state->gdbarch ())-1);\n       unsigned_type = parse_type (par_state)->builtin_unsigned_long;\n       signed_type = parse_type (par_state)->builtin_long;\n     }\n   else \n     {\n       high_bit =\n-\t((ULONGEST)1) << (gdbarch_int_bit (parse_gdbarch (par_state)) - 1);\n+\t((ULONGEST)1) << (gdbarch_int_bit (par_state->gdbarch ()) - 1);\n       unsigned_type = parse_type (par_state)->builtin_unsigned_int;\n       signed_type = parse_type (par_state)->builtin_int;\n     }    \n@@ -1291,7 +1291,7 @@ yylex (void)\n \n     yylval.tsym.type\n       = language_lookup_primitive_type (parse_language (pstate),\n-\t\t\t\t\tparse_gdbarch (pstate), tmp);\n+\t\t\t\t\tpstate->gdbarch (), tmp);\n     if (yylval.tsym.type != NULL)\n       return TYPENAME;\n     "
    },
    {
      "sha": "35f480abe814baacdf4791e9cd9213bf57721a8a",
      "filename": "gdb/go-exp.y",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/go-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/go-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-exp.y?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -65,7 +65,7 @@\n #include \"charset.h\"\n #include \"block.h\"\n \n-#define parse_type(ps) builtin_type (parse_gdbarch (ps))\n+#define parse_type(ps) builtin_type (ps->gdbarch ())\n \n /* Remap normal yacc parser interface names (yyparse, yylex, yyerror,\n    etc).  */\n@@ -603,7 +603,7 @@ type  /* Implements (approximately): [*] type-specifier */\n \t\t\t\t\t      expression_context_block); }\n */\n \t|\tBYTE_KEYWORD\n-\t\t\t{ $$ = builtin_go_type (parse_gdbarch (pstate))\n+\t\t\t{ $$ = builtin_go_type (pstate->gdbarch ())\n \t\t\t    ->builtin_uint8; }\n \t;\n \n@@ -664,7 +664,7 @@ parse_number (struct parser_state *par_state,\n   if (parsed_float)\n     {\n       const struct builtin_go_type *builtin_go_types\n-\t= builtin_go_type (parse_gdbarch (par_state));\n+\t= builtin_go_type (par_state->gdbarch ());\n \n       /* Handle suffixes: 'f' for float32, 'l' for long double.\n \t FIXME: This appears to be an extension -- do we want this?  */\n@@ -803,10 +803,10 @@ parse_number (struct parser_state *par_state,\n \n   un = (ULONGEST)n >> 2;\n   if (long_p == 0\n-      && (un >> (gdbarch_int_bit (parse_gdbarch (par_state)) - 2)) == 0)\n+      && (un >> (gdbarch_int_bit (par_state->gdbarch ()) - 2)) == 0)\n     {\n       high_bit\n-        = ((ULONGEST)1) << (gdbarch_int_bit (parse_gdbarch (par_state)) - 1);\n+        = ((ULONGEST)1) << (gdbarch_int_bit (par_state->gdbarch ()) - 1);\n \n       /* A large decimal (not hex or octal) constant (between INT_MAX\n \t and UINT_MAX) is a long or unsigned long, according to ANSI,\n@@ -818,22 +818,22 @@ parse_number (struct parser_state *par_state,\n       signed_type = parse_type (par_state)->builtin_int;\n     }\n   else if (long_p <= 1\n-\t   && (un >> (gdbarch_long_bit (parse_gdbarch (par_state)) - 2)) == 0)\n+\t   && (un >> (gdbarch_long_bit (par_state->gdbarch ()) - 2)) == 0)\n     {\n       high_bit\n-\t= ((ULONGEST)1) << (gdbarch_long_bit (parse_gdbarch (par_state)) - 1);\n+\t= ((ULONGEST)1) << (gdbarch_long_bit (par_state->gdbarch ()) - 1);\n       unsigned_type = parse_type (par_state)->builtin_unsigned_long;\n       signed_type = parse_type (par_state)->builtin_long;\n     }\n   else\n     {\n       int shift;\n       if (sizeof (ULONGEST) * HOST_CHAR_BIT\n-\t  < gdbarch_long_long_bit (parse_gdbarch (par_state)))\n+\t  < gdbarch_long_long_bit (par_state->gdbarch ()))\n \t/* A long long does not fit in a LONGEST.  */\n \tshift = (sizeof (ULONGEST) * HOST_CHAR_BIT - 1);\n       else\n-\tshift = (gdbarch_long_long_bit (parse_gdbarch (par_state)) - 1);\n+\tshift = (gdbarch_long_long_bit (par_state->gdbarch ()) - 1);\n       high_bit = (ULONGEST) 1 << shift;\n       unsigned_type = parse_type (par_state)->builtin_unsigned_long_long;\n       signed_type = parse_type (par_state)->builtin_long_long;\n@@ -1401,7 +1401,7 @@ classify_name (struct parser_state *par_state, const struct block *block)\n \n   /* Try primitive types first so they win over bad/weird debug info.  */\n   type = language_lookup_primitive_type (parse_language (par_state),\n-\t\t\t\t\t parse_gdbarch (par_state),\n+\t\t\t\t\t par_state->gdbarch (),\n \t\t\t\t\t copy);\n   if (type != NULL)\n     {"
    },
    {
      "sha": "c78e03fab95e2be407b5d198461a9b3e8ca0360c",
      "filename": "gdb/m2-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/m2-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/m2-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-exp.y?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -48,8 +48,8 @@\n #include \"objfiles.h\" /* For have_full_symbols and have_partial_symbols */\n #include \"block.h\"\n \n-#define parse_type(ps) builtin_type (parse_gdbarch (ps))\n-#define parse_m2_type(ps) builtin_m2_type (parse_gdbarch (ps))\n+#define parse_type(ps) builtin_type (ps->gdbarch ())\n+#define parse_m2_type(ps) builtin_m2_type (ps->gdbarch ())\n \n /* Remap normal yacc parser interface names (yyparse, yylex, yyerror,\n    etc).  */\n@@ -597,7 +597,7 @@ variable:\tNAME\n type\n \t:\tTYPENAME\n \t\t\t{ $$ = lookup_typename (parse_language (pstate),\n-\t\t\t\t\t\tparse_gdbarch (pstate),\n+\t\t\t\t\t\tpstate->gdbarch (),\n \t\t\t\t\t\tcopy_name ($1),\n \t\t\t\t\t\texpression_context_block, 0); }\n \n@@ -968,7 +968,7 @@ yylex (void)\n     sym = lookup_symbol (tmp, expression_context_block, VAR_DOMAIN, 0).symbol;\n     if (sym && SYMBOL_CLASS (sym) == LOC_BLOCK)\n       return BLOCKNAME;\n-    if (lookup_typename (parse_language (pstate), parse_gdbarch (pstate),\n+    if (lookup_typename (parse_language (pstate), pstate->gdbarch (),\n \t\t\t copy_name (yylval.sval),\n \t\t\t expression_context_block, 1))\n       return TYPENAME;"
    },
    {
      "sha": "83d2c056d6a9d7c2e1db44062524d8995abc9b23",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -491,7 +491,7 @@ end_msglist (struct parser_state *ps)\n   selname_chain = sel->next;\n   msglist_len = sel->msglist_len;\n   msglist_sel = sel->msglist_sel;\n-  selid = lookup_child_selector (parse_gdbarch (ps), p);\n+  selid = lookup_child_selector (ps->gdbarch (), p);\n   if (!selid)\n     error (_(\"Can't find selector \\\"%s\\\"\"), p);\n   write_exp_elt_longcst (ps, selid);"
    },
    {
      "sha": "d4b315061b03105e7f550a8208ad9a8d65e6d5e3",
      "filename": "gdb/p-exp.y",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/p-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/p-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-exp.y?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -56,7 +56,7 @@\n #include \"block.h\"\n #include \"completer.h\"\n \n-#define parse_type(ps) builtin_type (parse_gdbarch (ps))\n+#define parse_type(ps) builtin_type (ps->gdbarch ())\n \n /* Remap normal yacc parser interface names (yyparse, yylex, yyerror,\n    etc).  */\n@@ -528,7 +528,7 @@ exp\t:\tDOLLAR_VARIABLE\n  \t\t\t     struct value * val, * mark;\n \n \t\t\t     mark = value_mark ();\n- \t\t\t     val = value_of_internalvar (parse_gdbarch (pstate),\n+ \t\t\t     val = value_of_internalvar (pstate->gdbarch (),\n  \t\t\t\t\t\t\t intvar);\n  \t\t\t     current_type = value_type (val);\n \t\t\t     value_release_to_mark (mark);\n@@ -973,10 +973,10 @@ parse_number (struct parser_state *par_state,\n \n   un = (ULONGEST)n >> 2;\n   if (long_p == 0\n-      && (un >> (gdbarch_int_bit (parse_gdbarch (par_state)) - 2)) == 0)\n+      && (un >> (gdbarch_int_bit (par_state->gdbarch ()) - 2)) == 0)\n     {\n       high_bit\n-\t= ((ULONGEST)1) << (gdbarch_int_bit (parse_gdbarch (par_state)) - 1);\n+\t= ((ULONGEST)1) << (gdbarch_int_bit (par_state->gdbarch ()) - 1);\n \n       /* A large decimal (not hex or octal) constant (between INT_MAX\n \t and UINT_MAX) is a long or unsigned long, according to ANSI,\n@@ -988,22 +988,22 @@ parse_number (struct parser_state *par_state,\n       signed_type = parse_type (par_state)->builtin_int;\n     }\n   else if (long_p <= 1\n-\t   && (un >> (gdbarch_long_bit (parse_gdbarch (par_state)) - 2)) == 0)\n+\t   && (un >> (gdbarch_long_bit (par_state->gdbarch ()) - 2)) == 0)\n     {\n       high_bit\n-\t= ((ULONGEST)1) << (gdbarch_long_bit (parse_gdbarch (par_state)) - 1);\n+\t= ((ULONGEST)1) << (gdbarch_long_bit (par_state->gdbarch ()) - 1);\n       unsigned_type = parse_type (par_state)->builtin_unsigned_long;\n       signed_type = parse_type (par_state)->builtin_long;\n     }\n   else\n     {\n       int shift;\n       if (sizeof (ULONGEST) * HOST_CHAR_BIT\n-\t  < gdbarch_long_long_bit (parse_gdbarch (par_state)))\n+\t  < gdbarch_long_long_bit (par_state->gdbarch ()))\n \t/* A long long does not fit in a LONGEST.  */\n \tshift = (sizeof (ULONGEST) * HOST_CHAR_BIT - 1);\n       else\n-\tshift = (gdbarch_long_long_bit (parse_gdbarch (par_state)) - 1);\n+\tshift = (gdbarch_long_long_bit (par_state->gdbarch ()) - 1);\n       high_bit = (ULONGEST) 1 << shift;\n       unsigned_type = parse_type (par_state)->builtin_unsigned_long_long;\n       signed_type = parse_type (par_state)->builtin_long_long;\n@@ -1173,7 +1173,7 @@ yylex (void)\n       lexptr++;\n       c = *lexptr++;\n       if (c == '\\\\')\n-\tc = parse_escape (parse_gdbarch (pstate), &lexptr);\n+\tc = parse_escape (pstate->gdbarch (), &lexptr);\n       else if (c == '\\'')\n \terror (_(\"Empty character constant.\"));\n \n@@ -1343,7 +1343,7 @@ yylex (void)\n \t    break;\n \t  case '\\\\':\n \t    ++tokptr;\n-\t    c = parse_escape (parse_gdbarch (pstate), &tokptr);\n+\t    c = parse_escape (pstate->gdbarch (), &tokptr);\n \t    if (c == -1)\n \t      {\n \t\tcontinue;\n@@ -1676,7 +1676,7 @@ yylex (void)\n         }\n     yylval.tsym.type\n       = language_lookup_primitive_type (parse_language (pstate),\n-\t\t\t\t\tparse_gdbarch (pstate), tmp);\n+\t\t\t\t\tpstate->gdbarch (), tmp);\n     if (yylval.tsym.type != NULL)\n       {\n \tfree (uptokstart);"
    },
    {
      "sha": "e2d01e9dd9771f51e5b71774924a6fa94d26d5d2",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -631,7 +631,7 @@ write_dollar_variable (struct parser_state *ps, struct stoken str)\n \n   /* Handle tokens that refer to machine registers:\n      $ followed by a register name.  */\n-  i = user_reg_map_name_to_regnum (parse_gdbarch (ps),\n+  i = user_reg_map_name_to_regnum (ps->gdbarch (),\n \t\t\t\t   str.ptr + 1, str.length - 1);\n   if (i >= 0)\n     goto handle_register;\n@@ -1420,7 +1420,7 @@ insert_type_address_space (struct parser_state *pstate, char *string)\n \n   element.piece = tp_space_identifier;\n   insert_into_type_stack (slot, element);\n-  element.int_val = address_space_name_to_int (parse_gdbarch (pstate),\n+  element.int_val = address_space_name_to_int (pstate->gdbarch (),\n \t\t\t\t\t       string);\n   insert_into_type_stack (slot, element);\n }"
    },
    {
      "sha": "1aa5f1ff2e37bca79402dae164a8134944904421",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -32,7 +32,6 @@ struct internalvar;\n \n extern int parser_debug;\n \n-#define parse_gdbarch(ps) ((ps)->expout->gdbarch)\n #define parse_language(ps) ((ps)->expout->language_defn)\n \n struct parser_state\n@@ -49,6 +48,13 @@ struct parser_state\n      it as an expression_up -- passing ownership to the caller.  */\n   ATTRIBUTE_UNUSED_RESULT expression_up release ();\n \n+  /* Return the gdbarch that was passed to the constructor.  */\n+\n+  struct gdbarch *gdbarch ()\n+  {\n+    return expout->gdbarch;\n+  }\n+\n   /* The size of the expression above.  */\n \n   size_t expout_size;"
    },
    {
      "sha": "60eb6172f0365f4807f2e7acc8d1469e97706382",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9f5be6830e9245ee1ad1eab9725cc039d45d07/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "patch": "@@ -211,7 +211,7 @@ struct rust_parser\n   /* Return the parser's gdbarch.  */\n   struct gdbarch *arch () const\n   {\n-    return parse_gdbarch (pstate);\n+    return pstate->gdbarch ();\n   }\n \n   /* A helper to look up a Rust type, or fail.  This only works for\n@@ -2281,7 +2281,7 @@ rust_parser::convert_ast_to_expression (const struct rust_op *operation,\n \t  struct type *type;\n \n \t  type = language_lookup_primitive_type (parse_language (pstate),\n-\t\t\t\t\t\t parse_gdbarch (pstate),\n+\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t \"()\");\n \n \t  write_exp_elt_opcode (pstate, OP_LONG);"
    }
  ]
}