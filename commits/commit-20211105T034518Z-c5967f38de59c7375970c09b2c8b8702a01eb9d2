{
  "sha": "c5967f38de59c7375970c09b2c8b8702a01eb9d2",
  "node_id": "C_kwDOANOeidoAKGM1OTY3ZjM4ZGU1OWM3Mzc1OTcwYzA5YjJjOGI4NzAyYTAxZWI5ZDI",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-11-05T03:37:56Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-11-05T03:45:18Z"
    },
    "message": "PR28530, Hang in objdump on machine with 196GB RAM\n\nInvestigating the PR28530 testcase, which has a fuzzed compression\nheader with an enormous size, I noticed that decompress_contents is\nbroken when the size doesn't fit in strm.avail_out.  It wouldn't be\ntoo hard to support larger sizes (patches welcome!) but for now just\nstop decompress_contents from returning rubbish.\n\n\tPR 28530\n\t* compress.c (decompress_contents): Fail when uncompressed_size\n\tis too big.\n\t(bfd_init_section_decompress_status): Likewise.",
    "tree": {
      "sha": "21419b8ba4297ff9b92edb3a47dbedc953b278ea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/21419b8ba4297ff9b92edb3a47dbedc953b278ea"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c5967f38de59c7375970c09b2c8b8702a01eb9d2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5967f38de59c7375970c09b2c8b8702a01eb9d2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c5967f38de59c7375970c09b2c8b8702a01eb9d2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5967f38de59c7375970c09b2c8b8702a01eb9d2/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a3c0896d80d21545bd8036deb5e1ad4027db5677",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a3c0896d80d21545bd8036deb5e1ad4027db5677",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a3c0896d80d21545bd8036deb5e1ad4027db5677"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 15,
    "deletions": 0
  },
  "files": [
    {
      "sha": "70daf4ed3a533c3fdb9110a2ca4a56289d2e7e8d",
      "filename": "bfd/compress.c",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5967f38de59c7375970c09b2c8b8702a01eb9d2/bfd/compress.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5967f38de59c7375970c09b2c8b8702a01eb9d2/bfd/compress.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/compress.c?ref=c5967f38de59c7375970c09b2c8b8702a01eb9d2",
      "patch": "@@ -46,6 +46,11 @@ decompress_contents (bfd_byte *compressed_buffer,\n   strm.avail_in = compressed_size;\n   strm.next_in = (Bytef*) compressed_buffer;\n   strm.avail_out = uncompressed_size;\n+  /* FIXME: strm.avail_in and strm.avail_out are typically unsigned\n+     int.  Supporting sizes that don't fit in an unsigned int is\n+     possible but will require some rewriting of this function.  */\n+  if (strm.avail_in != compressed_size || strm.avail_out != uncompressed_size)\n+    return false;\n \n   BFD_ASSERT (Z_OK == 0);\n   rc = inflateInit (&strm);\n@@ -516,6 +521,7 @@ bfd_init_section_decompress_status (bfd *abfd, sec_ptr sec)\n   int header_size;\n   bfd_size_type uncompressed_size;\n   unsigned int uncompressed_alignment_power = 0;\n+  z_stream strm;\n \n   compression_header_size = bfd_get_compression_header_size (abfd, sec);\n   if (compression_header_size > MAX_COMPRESSION_HEADER_SIZE)\n@@ -551,6 +557,15 @@ bfd_init_section_decompress_status (bfd *abfd, sec_ptr sec)\n       return false;\n     }\n \n+  /* PR28530, reject sizes unsupported by decompress_contents.  */\n+  strm.avail_in = sec->size;\n+  strm.avail_out = uncompressed_size;\n+  if (strm.avail_in != sec->size || strm.avail_out != uncompressed_size)\n+    {\n+      bfd_set_error (bfd_error_nonrepresentable_section);\n+      return false;\n+    }\n+\n   sec->compressed_size = sec->size;\n   sec->size = uncompressed_size;\n   bfd_set_section_alignment (sec, uncompressed_alignment_power);"
    }
  ]
}