{
  "sha": "7cf47dc46635d8ec14c315e1f17480b56f4808b8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2NmNDdkYzQ2NjM1ZDhlYzE0YzMxNWUxZjE3NDgwYjU2ZjQ4MDhiOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-10T17:50:43Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-10T23:01:02Z"
    },
    "message": "Replace inf_threads_iterator with next_iterator\n\nThis changes inf_threads_iterator and some range adapters in\nthread-iter.h to use next_iterator and next_adapter instead.\n\ngdb/ChangeLog\n2019-01-10  Tom Tromey  <tom@tromey.com>\n\n\t* thread-iter.h (inf_threads_iterator): Use next_iterator.\n\t(basic_inf_threads_range): Remove.\n\t(inf_threads_range, inf_non_exited_threads_range)\n\t(safe_inf_threads_range): Use next_adapter.",
    "tree": {
      "sha": "747cb275d9019d0e1938b8ec230b15442ba916c8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/747cb275d9019d0e1938b8ec230b15442ba916c8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7cf47dc46635d8ec14c315e1f17480b56f4808b8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7cf47dc46635d8ec14c315e1f17480b56f4808b8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7cf47dc46635d8ec14c315e1f17480b56f4808b8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7cf47dc46635d8ec14c315e1f17480b56f4808b8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b56f80d8b27dffd0f8c02b8b11068b71b9fec375",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b56f80d8b27dffd0f8c02b8b11068b71b9fec375",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b56f80d8b27dffd0f8c02b8b11068b71b9fec375"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 12,
    "deletions": 60
  },
  "files": [
    {
      "sha": "7fd2051cb0d620cd414f9022e66afd291edf822c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7cf47dc46635d8ec14c315e1f17480b56f4808b8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7cf47dc46635d8ec14c315e1f17480b56f4808b8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7cf47dc46635d8ec14c315e1f17480b56f4808b8",
      "patch": "@@ -1,3 +1,10 @@\n+2019-01-10  Tom Tromey  <tom@tromey.com>\n+\n+\t* thread-iter.h (inf_threads_iterator): Use next_iterator.\n+\t(basic_inf_threads_range): Remove.\n+\t(inf_threads_range, inf_non_exited_threads_range)\n+\t(safe_inf_threads_range): Use next_adapter.\n+\n 2019-01-10  Keith Seitz  <keiths@redhat.com>\n \n \tPR gdb/23712"
    },
    {
      "sha": "be6ab73c6863a092c06d6ecb727d7c6d15442545",
      "filename": "gdb/thread-iter.h",
      "status": "modified",
      "additions": 5,
      "deletions": 60,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7cf47dc46635d8ec14c315e1f17480b56f4808b8/gdb/thread-iter.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7cf47dc46635d8ec14c315e1f17480b56f4808b8/gdb/thread-iter.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread-iter.h?ref=7cf47dc46635d8ec14c315e1f17480b56f4808b8",
      "patch": "@@ -20,68 +20,13 @@\n #define THREAD_ITER_H\n \n #include \"common/filtered-iterator.h\"\n+#include \"common/next-iterator.h\"\n #include \"common/safe-iterator.h\"\n \n /* A forward iterator that iterates over a given inferior's\n    threads.  */\n \n-class inf_threads_iterator\n-{\n-public:\n-  typedef inf_threads_iterator self_type;\n-  typedef struct thread_info *value_type;\n-  typedef struct thread_info *&reference;\n-  typedef struct thread_info **pointer;\n-  typedef std::forward_iterator_tag iterator_category;\n-  typedef int difference_type;\n-\n-  /* Create an iterator pointing at HEAD.  This takes a thread pointer\n-     instead of an inferior pointer to avoid circular dependencies\n-     between the thread and inferior header files.  */\n-  explicit inf_threads_iterator (struct thread_info *head)\n-    : m_thr (head)\n-  {}\n-\n-  /* Create a one-past-end iterator.  */\n-  inf_threads_iterator ()\n-    : m_thr (nullptr)\n-  {}\n-\n-  inf_threads_iterator& operator++ ()\n-  {\n-    m_thr = m_thr->next;\n-    return *this;\n-  }\n-\n-  thread_info *operator* () const { return m_thr; }\n-\n-  bool operator!= (const inf_threads_iterator &other) const\n-  { return m_thr != other.m_thr; }\n-\n-private:\n-  /* The currently-iterated thread.  NULL if we reached the end of the\n-     list.  */\n-  thread_info *m_thr;\n-};\n-\n-/* A range adapter that makes it possible to iterate over an\n-   inferior's thread list with range-for.  */\n-template<typename Iterator>\n-struct basic_inf_threads_range\n-{\n-  friend struct inferior;\n-private:\n-  explicit basic_inf_threads_range (struct thread_info *head)\n-    : m_head (head)\n-  {}\n-\n-public:\n-  Iterator begin () const { return Iterator (m_head); }\n-  Iterator end () const { return Iterator (); }\n-\n-private:\n-  thread_info *m_head;\n-};\n+using inf_threads_iterator = next_iterator<thread_info>;\n \n /* A forward iterator that iterates over all threads of all\n    inferiors.  */\n@@ -223,19 +168,19 @@ using safe_inf_threads_iterator\n    of an inferior with range-for.  */\n \n using inf_threads_range\n-  = basic_inf_threads_range<inf_threads_iterator>;\n+  = next_adapter<thread_info, inf_threads_iterator>;\n \n /* A range adapter that makes it possible to iterate over all\n    non-exited threads of an inferior with range-for.  */\n \n using inf_non_exited_threads_range\n-  = basic_inf_threads_range<inf_non_exited_threads_iterator>;\n+  = next_adapter<thread_info, inf_non_exited_threads_iterator>;\n \n /* A range adapter that makes it possible to iterate over all threads\n    of an inferior with range-for, safely.  */\n \n using safe_inf_threads_range\n-  = basic_inf_threads_range<safe_inf_threads_iterator>;\n+  = next_adapter<thread_info, safe_inf_threads_iterator>;\n \n /* A range adapter that makes it possible to iterate over all threads\n    of all inferiors with range-for.  */"
    }
  ]
}