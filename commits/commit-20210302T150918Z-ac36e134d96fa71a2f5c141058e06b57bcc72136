{
  "sha": "ac36e134d96fa71a2f5c141058e06b57bcc72136",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWMzNmUxMzRkOTZmYTcxYTJmNWMxNDEwNThlMDZiNTdiY2M3MjEzNg==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-02-18T17:03:28Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-03-02T15:09:18Z"
    },
    "message": "libctf: reimplement many _iter iterators in terms of _next\n\nEver since the generator-style _next iterators were introduced, there\nhave been separate implementations of the functional-style _iter\niterators that do the same thing as _next.\n\nThis is annoying and adds more dependencies on the internal guts of the\nfile format.  Rip them all out and replace them with the corresponding\n_next iterators.  Only ctf_archive_raw_iter and ctf_label_iter survive,\nthe former because there is no access to the raw binary data of archives\nvia any _next iterator, and the latter because ctf_label_next hasn't\nbeen implemented (because labels are currently not used for anything).\n\nTested by reverting the change (already applied) that reimplemented\nctf_member_iter in terms of ctf_member_next, then verifying that the\n_iter and _next iterators produced the same results for every iterable\nentity within a large type archive.\n\nlibctf/ChangeLog\n2021-03-02  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-types.c (ctf_member_iter): Move 'rc' to an inner scope.\n\t(ctf_enum_iter): Reimplement in terms of ctf_enum_next.\n\t(ctf_type_iter): Reimplement in terms of ctf_type_next.\n\t(ctf_type_iter_all): Likewise.\n\t(ctf_variable_iter): Reimplement in terms of ctf_variable_next.\n\t* ctf-archive.c (ctf_archive_iter_internal): Remove.\n\t(ctf_archive_iter): Reimplement in terms of ctf_archive_next.",
    "tree": {
      "sha": "e6647d27d24de83a812c7960384abec8a9dcec41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e6647d27d24de83a812c7960384abec8a9dcec41"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ac36e134d96fa71a2f5c141058e06b57bcc72136",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ac36e134d96fa71a2f5c141058e06b57bcc72136",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ac36e134d96fa71a2f5c141058e06b57bcc72136",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ac36e134d96fa71a2f5c141058e06b57bcc72136/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eaa2913a7acead8654e7e79ba13c0d22fd70a452",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eaa2913a7acead8654e7e79ba13c0d22fd70a452",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/eaa2913a7acead8654e7e79ba13c0d22fd70a452"
    }
  ],
  "stats": {
    "total": 193,
    "additions": 69,
    "deletions": 124
  },
  "files": [
    {
      "sha": "c639fdd5628950eea2de3e03a9279a6e93a23fec",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac36e134d96fa71a2f5c141058e06b57bcc72136/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac36e134d96fa71a2f5c141058e06b57bcc72136/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=ac36e134d96fa71a2f5c141058e06b57bcc72136",
      "patch": "@@ -1,3 +1,13 @@\n+2021-03-02  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-types.c (ctf_member_iter): Move 'rc' to an inner scope.\n+\t(ctf_enum_iter): Reimplement in terms of ctf_enum_next.\n+\t(ctf_type_iter): Reimplement in terms of ctf_type_next.\n+\t(ctf_type_iter_all): Likewise.\n+\t(ctf_variable_iter): Reimplement in terms of ctf_variable_next.\n+\t* ctf-archive.c (ctf_archive_iter_internal): Remove.\n+\t(ctf_archive_iter): Reimplement in terms of ctf_archive_next.\n+\n 2021-03-02  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-archive.c (ctf_archive_next): Set the name of parents in"
    },
    {
      "sha": "8b8e170241f59c4d87a1a7acd8703ab60ac5b72e",
      "filename": "libctf/ctf-archive.c",
      "status": "modified",
      "additions": 15,
      "deletions": 53,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac36e134d96fa71a2f5c141058e06b57bcc72136/libctf/ctf-archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac36e134d96fa71a2f5c141058e06b57bcc72136/libctf/ctf-archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-archive.c?ref=ac36e134d96fa71a2f5c141058e06b57bcc72136",
      "patch": "@@ -1043,70 +1043,32 @@ ctf_archive_raw_iter (const ctf_archive_t *arc,\n   return -EINVAL;\t\t\t /* Not supported. */\n }\n \n-/* Iterate over all CTF files in an archive.  We pass all CTF files in turn to\n-   the specified callback function.  */\n-static int\n-ctf_archive_iter_internal (const ctf_archive_t *wrapper,\n-\t\t\t   const struct ctf_archive *arc,\n-\t\t\t   const ctf_sect_t *symsect,\n-\t\t\t   const ctf_sect_t *strsect,\n-\t\t\t   ctf_archive_member_f *func, void *data)\n+/* Iterate over all CTF files in an archive: public entry point.  We pass all\n+   CTF files in turn to the specified callback function.  */\n+int\n+ctf_archive_iter (const ctf_archive_t *arc, ctf_archive_member_f *func,\n+\t\t  void *data)\n {\n-  int rc;\n-  size_t i;\n-  ctf_dict_t *f;\n-  struct ctf_archive_modent *modent;\n-  const char *nametbl;\n-\n-  modent = (ctf_archive_modent_t *) ((char *) arc\n-\t\t\t\t     + sizeof (struct ctf_archive));\n-  nametbl = (((const char *) arc) + le64toh (arc->ctfa_names));\n+  ctf_next_t *i = NULL;\n+  ctf_dict_t *fp;\n+  const char *name;\n+  int err;\n \n-  for (i = 0; i < le64toh (arc->ctfa_ndicts); i++)\n+  while ((fp = ctf_archive_next (arc, &i, &name, 0, &err)) != NULL)\n     {\n-      const char *name;\n+      int rc;\n \n-      name = &nametbl[le64toh (modent[i].name_offset)];\n-      if ((f = ctf_dict_open_internal (arc, symsect, strsect,\n-\t\t\t\t       name,\n-\t\t\t\t       wrapper->ctfi_symsect_little_endian,\n-\t\t\t\t       &rc)) == NULL)\n-\treturn rc;\n-\n-      f->ctf_archive = (ctf_archive_t *) wrapper;\n-      ctf_arc_import_parent (wrapper, f);\n-      if ((rc = func (f, name, data)) != 0)\n+      if ((rc = func (fp, name, data)) != 0)\n \t{\n-\t  ctf_dict_close (f);\n+\t  ctf_dict_close (fp);\n+\t  ctf_next_destroy (i);\n \t  return rc;\n \t}\n-\n-      ctf_dict_close (f);\n+      ctf_dict_close (fp);\n     }\n   return 0;\n }\n \n-/* Iterate over all CTF files in an archive: public entry point.  We pass all\n-   CTF files in turn to the specified callback function.  */\n-int\n-ctf_archive_iter (const ctf_archive_t *arc, ctf_archive_member_f *func,\n-\t\t  void *data)\n-{\n-  const ctf_sect_t *symsect = &arc->ctfi_symsect;\n-  const ctf_sect_t *strsect = &arc->ctfi_strsect;\n-\n-  if (symsect->cts_name == NULL)\n-    symsect = NULL;\n-  if (strsect->cts_name == NULL)\n-    strsect = NULL;\n-\n-  if (arc->ctfi_is_archive)\n-    return ctf_archive_iter_internal (arc, arc->ctfi_archive, symsect, strsect,\n-\t\t\t\t      func, data);\n-\n-  return func (arc->ctfi_dict, _CTF_SECTION, data);\n-}\n-\n /* Iterate over all CTF files in an archive, returning each dict in turn as a\n    ctf_dict_t, and NULL on error or end of iteration.  It is the caller's\n    responsibility to close it.  Parent dicts may be skipped."
    },
    {
      "sha": "28c5c7aa1e144d3791c47772b2cf67da7fd20f85",
      "filename": "libctf/ctf-types.c",
      "status": "modified",
      "additions": 44,
      "deletions": 71,
      "changes": 115,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac36e134d96fa71a2f5c141058e06b57bcc72136/libctf/ctf-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac36e134d96fa71a2f5c141058e06b57bcc72136/libctf/ctf-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-types.c?ref=ac36e134d96fa71a2f5c141058e06b57bcc72136",
      "patch": "@@ -45,10 +45,10 @@ ctf_member_iter (ctf_dict_t *fp, ctf_id_t type, ctf_member_f *func, void *arg)\n   ssize_t offset;\n   const char *name;\n   ctf_id_t membtype;\n-  int rc;\n \n   while ((offset = ctf_member_next (fp, type, &i, &name, &membtype, 0)) >= 0)\n     {\n+      int rc;\n       if ((rc = func (name, membtype, offset, arg)) != 0)\n \t{\n \t  ctf_next_destroy (i);\n@@ -255,47 +255,21 @@ ctf_member_next (ctf_dict_t *fp, ctf_id_t type, ctf_next_t **it,\n int\n ctf_enum_iter (ctf_dict_t *fp, ctf_id_t type, ctf_enum_f *func, void *arg)\n {\n-  ctf_dict_t *ofp = fp;\n-  const ctf_type_t *tp;\n-  const ctf_enum_t *ep;\n-  ctf_dtdef_t *dtd;\n-  ssize_t increment;\n-  uint32_t n;\n-  int rc;\n-\n-  if ((type = ctf_type_resolve_unsliced (fp, type)) == CTF_ERR)\n-    return -1;\t\t\t/* errno is set for us.  */\n-\n-  if ((tp = ctf_lookup_by_id (&fp, type)) == NULL)\n-    return -1;\t\t\t/* errno is set for us.  */\n-\n-  if (LCTF_INFO_KIND (fp, tp->ctt_info) != CTF_K_ENUM)\n-    return (ctf_set_errno (ofp, ECTF_NOTENUM));\n-\n-  (void) ctf_get_ctt_size (fp, tp, NULL, &increment);\n+  ctf_next_t *i = NULL;\n+  const char *name;\n+  int val;\n \n-  if ((dtd = ctf_dynamic_type (ofp, type)) == NULL)\n+  while ((name = ctf_enum_next (fp, type, &i, &val)) != NULL)\n     {\n-      ep = (const ctf_enum_t *) ((uintptr_t) tp + increment);\n-\n-      for (n = LCTF_INFO_VLEN (fp, tp->ctt_info); n != 0; n--, ep++)\n+      int rc;\n+      if ((rc = func (name, val, arg)) != 0)\n \t{\n-\t  const char *name = ctf_strptr (fp, ep->cte_name);\n-\t  if ((rc = func (name, ep->cte_value, arg)) != 0)\n-\t    return rc;\n-\t}\n-    }\n-  else\n-    {\n-      ctf_dmdef_t *dmd;\n-\n-      for (dmd = ctf_list_next (&dtd->dtd_u.dtu_members);\n-\t   dmd != NULL; dmd = ctf_list_next (dmd))\n-\t{\n-\t  if ((rc = func (dmd->dmd_name, dmd->dmd_value, arg)) != 0)\n-\t    return rc;\n+\t  ctf_next_destroy (i);\n+\t  return rc;\n \t}\n     }\n+  if (ctf_errno (fp) != ECTF_NEXT_END)\n+    return -1;\t\t\t\t\t/* errno is set for us.  */\n \n   return 0;\n }\n@@ -424,16 +398,20 @@ ctf_enum_next (ctf_dict_t *fp, ctf_id_t type, ctf_next_t **it,\n int\n ctf_type_iter (ctf_dict_t *fp, ctf_type_f *func, void *arg)\n {\n-  ctf_id_t id, max = fp->ctf_typemax;\n-  int rc, child = (fp->ctf_flags & LCTF_CHILD);\n+  ctf_next_t *i = NULL;\n+  ctf_id_t type;\n \n-  for (id = 1; id <= max; id++)\n+  while ((type = ctf_type_next (fp, &i, NULL, 0)) != CTF_ERR)\n     {\n-      const ctf_type_t *tp = LCTF_INDEX_TO_TYPEPTR (fp, id);\n-      if (LCTF_INFO_ISROOT (fp, tp->ctt_info)\n-\t  && (rc = func (LCTF_INDEX_TO_TYPE (fp, id, child), arg)) != 0)\n-\treturn rc;\n+      int rc;\n+      if ((rc = func (type, arg)) != 0)\n+\t{\n+\t  ctf_next_destroy (i);\n+\t  return rc;\n+\t}\n     }\n+  if (ctf_errno (fp) != ECTF_NEXT_END)\n+    return -1;\t\t\t\t\t/* errno is set for us.  */\n \n   return 0;\n }\n@@ -448,17 +426,21 @@ ctf_type_iter (ctf_dict_t *fp, ctf_type_f *func, void *arg)\n int\n ctf_type_iter_all (ctf_dict_t *fp, ctf_type_all_f *func, void *arg)\n {\n-  ctf_id_t id, max = fp->ctf_typemax;\n-  int rc, child = (fp->ctf_flags & LCTF_CHILD);\n+  ctf_next_t *i = NULL;\n+  ctf_id_t type;\n+  int flag;\n \n-  for (id = 1; id <= max; id++)\n+  while ((type = ctf_type_next (fp, &i, &flag, 1)) != CTF_ERR)\n     {\n-      const ctf_type_t *tp = LCTF_INDEX_TO_TYPEPTR (fp, id);\n-      if ((rc = func (LCTF_INDEX_TO_TYPE (fp, id, child),\n-\t\t      LCTF_INFO_ISROOT(fp, tp->ctt_info)\n-\t\t      ? CTF_ADD_ROOT : CTF_ADD_NONROOT, arg) != 0))\n-\treturn rc;\n+      int rc;\n+      if ((rc = func (type, flag, arg)) != 0)\n+\t{\n+\t  ctf_next_destroy (i);\n+\t  return rc;\n+\t}\n     }\n+  if (ctf_errno (fp) != ECTF_NEXT_END)\n+    return -1;\t\t\t\t\t/* errno is set for us.  */\n \n   return 0;\n }\n@@ -518,30 +500,21 @@ ctf_type_next (ctf_dict_t *fp, ctf_next_t **it, int *flag, int want_hidden)\n int\n ctf_variable_iter (ctf_dict_t *fp, ctf_variable_f *func, void *arg)\n {\n-  int rc;\n-\n-  if ((fp->ctf_flags & LCTF_CHILD) && (fp->ctf_parent == NULL))\n-    return (ctf_set_errno (fp, ECTF_NOPARENT));\n+  ctf_next_t *i = NULL;\n+  ctf_id_t type;\n+  const char *name;\n \n-  if (!(fp->ctf_flags & LCTF_RDWR))\n+  while ((type = ctf_variable_next (fp, &i, &name)) != CTF_ERR)\n     {\n-      unsigned long i;\n-      for (i = 0; i < fp->ctf_nvars; i++)\n-\tif ((rc = func (ctf_strptr (fp, fp->ctf_vars[i].ctv_name),\n-\t\t\tfp->ctf_vars[i].ctv_type, arg)) != 0)\n-\t  return rc;\n-    }\n-  else\n-    {\n-      ctf_dvdef_t *dvd;\n-\n-      for (dvd = ctf_list_next (&fp->ctf_dvdefs); dvd != NULL;\n-\t   dvd = ctf_list_next (dvd))\n+      int rc;\n+      if ((rc = func (name, type, arg)) != 0)\n \t{\n-\t  if ((rc = func (dvd->dvd_name, dvd->dvd_type, arg)) != 0)\n-\t    return rc;\n+\t  ctf_next_destroy (i);\n+\t  return rc;\n \t}\n     }\n+  if (ctf_errno (fp) != ECTF_NEXT_END)\n+    return -1;\t\t\t\t\t/* errno is set for us.  */\n \n   return 0;\n }"
    }
  ]
}