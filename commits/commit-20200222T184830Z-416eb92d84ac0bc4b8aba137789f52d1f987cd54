{
  "sha": "416eb92d84ac0bc4b8aba137789f52d1f987cd54",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDE2ZWI5MmQ4NGFjMGJjNGI4YWJhMTM3Nzg5ZjUyZDFmOTg3Y2Q1NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:30Z"
    },
    "message": "Remove hard-coded TUI layouts\n\nThis changes the TUI so that the available layouts are no longer\ncompletely hard-coded.  \"enum tui_layout_type\" is removed, and then\nall the fallout from this is fixed up.\n\nThis patch also reimplements the \"layout\" command to be a prefix\ncommand.  The concrete layouts are simply sub-commands now.  This\nprovides completion and correct abbreviation behavior for free.\n\nFinally, this also changes the name of the locator window to \"status\".\nThis matches the documentation and will be exposed to the user in a\nsubsequent patch.\n\ngdb/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui.c (tui_enable): Call tui_set_initial_layout.\n\t* tui/tui-win.c (window_name_completer): Update comment.\n\t* tui/tui-layout.h (class tui_layout_base) <replace_window>:\n\tDeclare method.\n\t(class tui_layout_window) <replace_window>: Likewise.\n\t(class tui_layout_split) <replace_window>: Likewise.\n\t(tui_set_layout): Don't declare.\n\t(tui_set_initial_layout): Declare function.\n\t* tui/tui-layout.c (layouts, applied_skeleton, src_regs_layout)\n\t(asm_regs_layout): New globals.\n\t(tui_current_layout, show_layout): Remove.\n\t(tui_set_layout, tui_add_win_to_layout): Rewrite.\n\t(find_layout, tui_apply_layout): New function.\n\t(layout_completer): Remove.\n\t(tui_next_layout): Reimplement.\n\t(tui_next_layout_command): New function.\n\t(tui_set_initial_layout, tui_prev_layout_command): New functions.\n\t(tui_regs_layout): Reimplement.\n\t(tui_regs_layout_command): New function.\n\t(extract_display_start_addr): Rewrite.\n\t(next_layout, prev_layout): Remove.\n\t(tui_layout_window::replace_window): New method.\n\t(tui_layout_split::replace_window): New method.\n\t(destroy_layout): New function.\n\t(layout_list): New global.\n\t(add_layout_command): New function.\n\t(initialize_layouts): Update.\n\t(tui_layout_command): New function.\n\t(_initialize_tui_layout): Install \"layout\" commands.\n\t* tui/tui-data.h (enum tui_layout_type): Remove.\n\t(tui_current_layout): Don't declare.\n\nChange-Id: I9b5f7ab3ce838d6b340b8c373ef649a8e0a74b73",
    "tree": {
      "sha": "d340076992433388780995dd406fbcc065346151",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d340076992433388780995dd406fbcc065346151"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/416eb92d84ac0bc4b8aba137789f52d1f987cd54",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/416eb92d84ac0bc4b8aba137789f52d1f987cd54",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/416eb92d84ac0bc4b8aba137789f52d1f987cd54",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/416eb92d84ac0bc4b8aba137789f52d1f987cd54/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0dbc2fc759fc8b5eaa69d7b3b7d0c4cf4afb19be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0dbc2fc759fc8b5eaa69d7b3b7d0c4cf4afb19be",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0dbc2fc759fc8b5eaa69d7b3b7d0c4cf4afb19be"
    }
  ],
  "stats": {
    "total": 560,
    "additions": 268,
    "deletions": 292
  },
  "files": [
    {
      "sha": "a7e565abcce15c09e0215f95c8be81c7630d4966",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=416eb92d84ac0bc4b8aba137789f52d1f987cd54",
      "patch": "@@ -1,3 +1,37 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui.c (tui_enable): Call tui_set_initial_layout.\n+\t* tui/tui-win.c (window_name_completer): Update comment.\n+\t* tui/tui-layout.h (class tui_layout_base) <replace_window>:\n+\tDeclare method.\n+\t(class tui_layout_window) <replace_window>: Likewise.\n+\t(class tui_layout_split) <replace_window>: Likewise.\n+\t(tui_set_layout): Don't declare.\n+\t(tui_set_initial_layout): Declare function.\n+\t* tui/tui-layout.c (layouts, applied_skeleton, src_regs_layout)\n+\t(asm_regs_layout): New globals.\n+\t(tui_current_layout, show_layout): Remove.\n+\t(tui_set_layout, tui_add_win_to_layout): Rewrite.\n+\t(find_layout, tui_apply_layout): New function.\n+\t(layout_completer): Remove.\n+\t(tui_next_layout): Reimplement.\n+\t(tui_next_layout_command): New function.\n+\t(tui_set_initial_layout, tui_prev_layout_command): New functions.\n+\t(tui_regs_layout): Reimplement.\n+\t(tui_regs_layout_command): New function.\n+\t(extract_display_start_addr): Rewrite.\n+\t(next_layout, prev_layout): Remove.\n+\t(tui_layout_window::replace_window): New method.\n+\t(tui_layout_split::replace_window): New method.\n+\t(destroy_layout): New function.\n+\t(layout_list): New global.\n+\t(add_layout_command): New function.\n+\t(initialize_layouts): Update.\n+\t(tui_layout_command): New function.\n+\t(_initialize_tui_layout): Install \"layout\" commands.\n+\t* tui/tui-data.h (enum tui_layout_type): Remove.\n+\t(tui_current_layout): Don't declare.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-regs.c (tui_reg_layout): Remove."
    },
    {
      "sha": "2badcd4f1a65486cc5c1fb0168f18c98ea10d360",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 0,
      "deletions": 12,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=416eb92d84ac0bc4b8aba137789f52d1f987cd54",
      "patch": "@@ -131,17 +131,6 @@ struct tui_gen_win_info\n /* Strings to display in the TUI status line.  */\n #define SINGLE_KEY              \"(SingleKey)\"\n \n-/* The kinds of layouts available.  */\n-enum tui_layout_type\n-{\n-  SRC_COMMAND,\n-  DISASSEM_COMMAND,\n-  SRC_DISASSEM_COMMAND,\n-  SRC_DATA_COMMAND,\n-  DISASSEM_DATA_COMMAND,\n-  UNDEFINED_LAYOUT\n-};\n-\n enum tui_line_or_address_kind\n {\n   LOA_LINE,\n@@ -310,7 +299,6 @@ struct all_tui_windows\n \n \n /* Data Manipulation Functions.  */\n-extern enum tui_layout_type tui_current_layout (void);\n extern int tui_term_height (void);\n extern void tui_set_term_height_to (int);\n extern int tui_term_width (void);"
    },
    {
      "sha": "e2ddbfb0d2cc3c5735801ae2c5b7d7c85e1c067b",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 222,
      "deletions": 277,
      "changes": 499,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=416eb92d84ac0bc4b8aba137789f52d1f987cd54",
      "patch": "@@ -25,6 +25,8 @@\n #include \"symtab.h\"\n #include \"frame.h\"\n #include \"source.h\"\n+#include \"cli/cli-cmds.h\"\n+#include \"cli/cli-decode.h\"\n #include <ctype.h>\n \n #include \"tui/tui.h\"\n@@ -40,27 +42,22 @@\n #include \"tui/tui-source.h\"\n #include \"gdb_curses.h\"\n \n-static void show_layout (enum tui_layout_type);\n-static enum tui_layout_type next_layout (void);\n-static enum tui_layout_type prev_layout (void);\n static void tui_layout_command (const char *, int);\n static void extract_display_start_addr (struct gdbarch **, CORE_ADDR *);\n \n-\n-/* The pre-defined layouts.  */\n-static tui_layout_split *standard_layouts[UNDEFINED_LAYOUT];\n+/* The layouts.  */\n+static std::vector<std::unique_ptr<tui_layout_split>> layouts;\n \n /* The layout that is currently applied.  */\n static std::unique_ptr<tui_layout_base> applied_layout;\n \n-static enum tui_layout_type current_layout = UNDEFINED_LAYOUT;\n+/* The \"skeleton\" version of the layout that is currently applied.  */\n+static tui_layout_split *applied_skeleton;\n \n-/* Accessor for the current layout.  */\n-enum tui_layout_type\n-tui_current_layout (void)\n-{\n-  return current_layout;\n-}\n+/* The two special \"regs\" layouts.  Note that these aren't registered\n+   as commands and so can never be deleted.  */\n+static tui_layout_split *src_regs_layout;\n+static tui_layout_split *asm_regs_layout;\n \n /* See tui-layout.h.  */\n \n@@ -78,113 +75,24 @@ tui_adjust_window_height (struct tui_win_info *win, int new_height)\n   applied_layout->adjust_size (win->name (), new_height);\n }\n \n-/* Show the screen layout defined.  */\n-static void\n-show_layout (enum tui_layout_type layout)\n-{\n-  enum tui_layout_type cur_layout = tui_current_layout ();\n-\n-  if (layout != cur_layout)\n-    {\n-      tui_make_all_invisible ();\n-      applied_layout = standard_layouts[layout]->clone ();\n-      tui_apply_current_layout ();\n-      current_layout = layout;\n-      tui_delete_invisible_windows ();\n-    }\n-}\n-\n+/* Set the current layout to LAYOUT.  */\n \n-/* Function to set the layout to SRC_COMMAND, DISASSEM_COMMAND,\n-   SRC_DISASSEM_COMMAND, SRC_DATA_COMMAND, or DISASSEM_DATA_COMMAND.  */\n-void\n-tui_set_layout (enum tui_layout_type layout_type)\n+static void\n+tui_set_layout (tui_layout_split *layout)\n {\n-  gdb_assert (layout_type != UNDEFINED_LAYOUT);\n-\n-  enum tui_layout_type cur_layout = tui_current_layout ();\n   struct gdbarch *gdbarch;\n   CORE_ADDR addr;\n-  struct tui_win_info *win_with_focus = tui_win_with_focus ();\n \n   extract_display_start_addr (&gdbarch, &addr);\n+  tui_make_all_invisible ();\n+  applied_skeleton = layout;\n+  applied_layout = layout->clone ();\n+  tui_apply_current_layout ();\n+  tui_delete_invisible_windows ();\n \n-  enum tui_layout_type new_layout = layout_type;\n-\n-  if (new_layout != cur_layout)\n-    {\n-      tui_suppress_output suppress;\n-\n-      show_layout (new_layout);\n-\n-      /* Now determine where focus should be.  */\n-      if (win_with_focus != TUI_CMD_WIN)\n-\t{\n-\t  switch (new_layout)\n-\t    {\n-\t    case SRC_COMMAND:\n-\t      tui_set_win_focus_to (TUI_SRC_WIN);\n-\t      break;\n-\t    case DISASSEM_COMMAND:\n-\t      /* The previous layout was not showing code.\n-\t\t This can happen if there is no source\n-\t\t available:\n-\n-\t\t 1. if the source file is in another dir OR\n-\t\t 2. if target was compiled without -g\n-\t\t We still want to show the assembly though!  */\n-\n-\t      tui_get_begin_asm_address (&gdbarch, &addr);\n-\t      tui_set_win_focus_to (TUI_DISASM_WIN);\n-\t      break;\n-\t    case SRC_DISASSEM_COMMAND:\n-\t      /* The previous layout was not showing code.\n-\t\t This can happen if there is no source\n-\t\t available:\n-\n-\t\t 1. if the source file is in another dir OR\n-\t\t 2. if target was compiled without -g\n-\t\t We still want to show the assembly though!  */\n-\n-\t      tui_get_begin_asm_address (&gdbarch, &addr);\n-\t      if (win_with_focus == TUI_SRC_WIN)\n-\t\ttui_set_win_focus_to (TUI_SRC_WIN);\n-\t      else\n-\t\ttui_set_win_focus_to (TUI_DISASM_WIN);\n-\t      break;\n-\t    case SRC_DATA_COMMAND:\n-\t      if (win_with_focus != TUI_DATA_WIN)\n-\t\ttui_set_win_focus_to (TUI_SRC_WIN);\n-\t      else\n-\t\ttui_set_win_focus_to (TUI_DATA_WIN);\n-\t      break;\n-\t    case DISASSEM_DATA_COMMAND:\n-\t      /* The previous layout was not showing code.\n-\t\t This can happen if there is no source\n-\t\t available:\n-\n-\t\t 1. if the source file is in another dir OR\n-\t\t 2. if target was compiled without -g\n-\t\t We still want to show the assembly though!  */\n-\n-\t      tui_get_begin_asm_address (&gdbarch, &addr);\n-\t      if (win_with_focus != TUI_DATA_WIN)\n-\t\ttui_set_win_focus_to (TUI_DISASM_WIN);\n-\t      else\n-\t\ttui_set_win_focus_to (TUI_DATA_WIN);\n-\t      break;\n-\t    default:\n-\t      break;\n-\t    }\n-\t}\n-      /*\n-       * Now update the window content.\n-       */\n-      tui_update_source_windows_with_addr (gdbarch, addr);\n-      if (new_layout == SRC_DATA_COMMAND\n-\t  || new_layout == DISASSEM_DATA_COMMAND)\n-\tTUI_DATA_WIN->show_registers (TUI_DATA_WIN->get_current_group ());\n-    }\n+  if (gdbarch == nullptr && TUI_DISASM_WIN != nullptr)\n+    tui_get_begin_asm_address (&gdbarch, &addr);\n+  tui_update_source_windows_with_addr (gdbarch, addr);\n }\n \n /* See tui-layout.h.  */\n@@ -194,104 +102,113 @@ tui_add_win_to_layout (enum tui_win_type type)\n {\n   gdb_assert (type == SRC_WIN || type == DISASSEM_WIN);\n \n-  enum tui_layout_type cur_layout = tui_current_layout ();\n+  /* If the window already exists, no need to add it.  */\n+  if (tui_win_list[type] != nullptr)\n+    return;\n+\n+  /* If the window we are trying to replace doesn't exist, we're\n+     done.  */\n+  enum tui_win_type other = type == SRC_WIN ? DISASSEM_WIN : SRC_WIN;\n+  if (tui_win_list[other] == nullptr)\n+    return;\n+\n+  const char *name = type == SRC_WIN ? SRC_NAME : DISASSEM_NAME;\n+  applied_layout->replace_window (tui_win_list[other]->name (), name);\n+  tui_apply_current_layout ();\n+  tui_delete_invisible_windows ();\n+}\n+\n+/* Find LAYOUT in the \"layouts\" global and return its index.  */\n \n-  switch (type)\n+static size_t\n+find_layout (tui_layout_split *layout)\n+{\n+  for (size_t i = 0; i < layouts.size (); ++i)\n     {\n-    case SRC_WIN:\n-      if (cur_layout != SRC_COMMAND\n-\t  && cur_layout != SRC_DISASSEM_COMMAND\n-\t  && cur_layout != SRC_DATA_COMMAND)\n-\t{\n-\t  if (cur_layout == DISASSEM_DATA_COMMAND)\n-\t    tui_set_layout (SRC_DATA_COMMAND);\n-\t  else\n-\t    tui_set_layout (SRC_COMMAND);\n-\t}\n-      break;\n-    case DISASSEM_WIN:\n-      if (cur_layout != DISASSEM_COMMAND\n-\t  && cur_layout != SRC_DISASSEM_COMMAND\n-\t  && cur_layout != DISASSEM_DATA_COMMAND)\n-\t{\n-\t  if (cur_layout == SRC_DATA_COMMAND)\n-\t    tui_set_layout (DISASSEM_DATA_COMMAND);\n-\t  else\n-\t    tui_set_layout (DISASSEM_COMMAND);\n-\t}\n-      break;\n+      if (layout == layouts[i].get ())\n+\treturn i;\n     }\n+  gdb_assert_not_reached (_(\"layout not found!?\"));\n }\n \n-/* Complete possible layout names.  TEXT is the complete text entered so\n-   far, WORD is the word currently being completed.  */\n+/* Function to set the layout. */\n \n static void\n-layout_completer (struct cmd_list_element *ignore,\n-\t\t  completion_tracker &tracker,\n-\t\t  const char *text, const char *word)\n+tui_apply_layout (struct cmd_list_element *command,\n+\t\t  const char *args, int from_tty)\n {\n-  static const char *layout_names [] =\n-    { \"src\", \"asm\", \"split\", \"regs\", \"next\", \"prev\", NULL };\n+  tui_layout_split *layout\n+    = (tui_layout_split *) get_cmd_context (command);\n \n-  complete_on_enum (tracker, layout_names, text, word);\n+  /* Make sure the curses mode is enabled.  */\n+  tui_enable ();\n+  tui_set_layout (layout);\n }\n \n-/* Function to set the layout to SRC, ASM, SPLIT, NEXT, PREV, DATA, or\n-   REGS. */\n-static void\n-tui_layout_command (const char *layout_name, int from_tty)\n-{\n-  enum tui_layout_type new_layout = UNDEFINED_LAYOUT;\n-  enum tui_layout_type cur_layout = tui_current_layout ();\n-\n-  if (layout_name == NULL || *layout_name == '\\0')\n-    error (_(\"Usage: layout prev | next | LAYOUT-NAME\"));\n+/* See tui-layout.h.  */\n \n-  /* First check for ambiguous input.  */\n-  if (strcmp (layout_name, \"s\") == 0)\n-    error (_(\"Ambiguous command input.\"));\n+void\n+tui_next_layout ()\n+{\n+  size_t index = find_layout (applied_skeleton);\n+  ++index;\n+  if (index == layouts.size ())\n+    index = 0;\n+  tui_set_layout (layouts[index].get ());\n+}\n \n-  if (subset_compare (layout_name, \"src\"))\n-    new_layout = SRC_COMMAND;\n-  else if (subset_compare (layout_name, \"asm\"))\n-    new_layout = DISASSEM_COMMAND;\n-  else if (subset_compare (layout_name, \"split\"))\n-    new_layout = SRC_DISASSEM_COMMAND;\n-  else if (subset_compare (layout_name, \"regs\"))\n-    {\n-      if (cur_layout == SRC_COMMAND\n-\t  || cur_layout == SRC_DATA_COMMAND)\n-\tnew_layout = SRC_DATA_COMMAND;\n-      else\n-\tnew_layout = DISASSEM_DATA_COMMAND;\n-    }\n-  else if (subset_compare (layout_name, \"next\"))\n-    new_layout = next_layout ();\n-  else if (subset_compare (layout_name, \"prev\"))\n-    new_layout = prev_layout ();\n-  else\n-    error (_(\"Unrecognized layout: %s\"), layout_name);\n+/* Implement the \"layout next\" command.  */\n \n-  /* Make sure the curses mode is enabled.  */\n+static void\n+tui_next_layout_command (const char *arg, int from_tty)\n+{\n   tui_enable ();\n-  tui_set_layout (new_layout);\n+  tui_next_layout ();\n }\n \n /* See tui-layout.h.  */\n \n void\n-tui_next_layout ()\n+tui_set_initial_layout ()\n+{\n+  tui_set_layout (layouts[0].get ());\n+}\n+\n+/* Implement the \"layout prev\" command.  */\n+\n+static void\n+tui_prev_layout_command (const char *arg, int from_tty)\n {\n-  tui_layout_command (\"next\", 0);\n+  tui_enable ();\n+  size_t index = find_layout (applied_skeleton);\n+  if (index == 0)\n+    index = layouts.size ();\n+  --index;\n+  tui_set_layout (layouts[index].get ());\n }\n \n+\n /* See tui-layout.h.  */\n \n void\n tui_regs_layout ()\n {\n-  tui_layout_command (\"regs\", 0);\n+  /* If there's already a register window, we're done.  */\n+  if (TUI_DATA_WIN != nullptr)\n+    return;\n+\n+  tui_set_layout (TUI_DISASM_WIN != nullptr\n+\t\t  ? asm_regs_layout\n+\t\t  : src_regs_layout);\n+}\n+\n+/* Implement the \"layout regs\" command.  */\n+\n+static void\n+tui_regs_layout_command (const char *arg, int from_tty)\n+{\n+  tui_enable ();\n+  tui_regs_layout ();\n }\n \n /* See tui-layout.h.  */\n@@ -319,77 +236,29 @@ tui_remove_some_windows ()\n static void\n extract_display_start_addr (struct gdbarch **gdbarch_p, CORE_ADDR *addr_p)\n {\n-  enum tui_layout_type cur_layout = tui_current_layout ();\n-  struct gdbarch *gdbarch = get_current_arch ();\n-  CORE_ADDR addr;\n+  struct gdbarch *gdbarch = nullptr;\n+  CORE_ADDR addr = 0;\n   CORE_ADDR pc;\n   struct symtab_and_line cursal = get_current_source_symtab_and_line ();\n \n-  switch (cur_layout)\n+  if (TUI_SRC_WIN != nullptr)\n     {\n-    case SRC_COMMAND:\n-    case SRC_DATA_COMMAND:\n       gdbarch = TUI_SRC_WIN->gdbarch;\n       find_line_pc (cursal.symtab,\n \t\t    TUI_SRC_WIN->start_line_or_addr.u.line_no,\n \t\t    &pc);\n       addr = pc;\n-      break;\n-    case DISASSEM_COMMAND:\n-    case SRC_DISASSEM_COMMAND:\n-    case DISASSEM_DATA_COMMAND:\n+    }\n+  else if (TUI_DISASM_WIN != nullptr)\n+    {\n       gdbarch = TUI_DISASM_WIN->gdbarch;\n       addr = TUI_DISASM_WIN->start_line_or_addr.u.addr;\n-      break;\n-    default:\n-      addr = 0;\n-      break;\n     }\n \n   *gdbarch_p = gdbarch;\n   *addr_p = addr;\n }\n \n-\n-/* Answer the previous layout to cycle to.  */\n-static enum tui_layout_type\n-next_layout (void)\n-{\n-  int new_layout;\n-\n-  new_layout = tui_current_layout ();\n-  if (new_layout == UNDEFINED_LAYOUT)\n-    new_layout = SRC_COMMAND;\n-  else\n-    {\n-      new_layout++;\n-      if (new_layout == UNDEFINED_LAYOUT)\n-\tnew_layout = SRC_COMMAND;\n-    }\n-\n-  return (enum tui_layout_type) new_layout;\n-}\n-\n-\n-/* Answer the next layout to cycle to.  */\n-static enum tui_layout_type\n-prev_layout (void)\n-{\n-  int new_layout;\n-\n-  new_layout = tui_current_layout ();\n-  if (new_layout == SRC_COMMAND)\n-    new_layout = DISASSEM_DATA_COMMAND;\n-  else\n-    {\n-      new_layout--;\n-      if (new_layout == UNDEFINED_LAYOUT)\n-\tnew_layout = DISASSEM_DATA_COMMAND;\n-    }\n-\n-  return (enum tui_layout_type) new_layout;\n-}\n-\n void\n tui_gen_win_info::resize (int height_, int width_,\n \t\t\t  int origin_x_, int origin_y_)\n@@ -454,7 +323,7 @@ tui_get_window_by_name (const std::string &name)\n     }\n   else\n     {\n-      gdb_assert (name == \"locator\");\n+      gdb_assert (name == \"status\");\n       return tui_locator_win_info_ptr ();\n     }\n }\n@@ -512,6 +381,22 @@ tui_layout_window::bottom_boxed_p () const\n \n /* See tui-layout.h.  */\n \n+void\n+tui_layout_window::replace_window (const char *name, const char *new_window)\n+{\n+  if (m_contents == name)\n+    {\n+      m_contents = new_window;\n+      if (m_window != nullptr)\n+\t{\n+\t  m_window->make_visible (false);\n+\t  m_window = tui_get_window_by_name (m_contents);\n+\t}\n+    }\n+}\n+\n+/* See tui-layout.h.  */\n+\n tui_layout_split *\n tui_layout_split::add_split (int weight)\n {\n@@ -804,63 +689,123 @@ tui_layout_split::remove_windows (const char *name)\n     }\n }\n \n+/* See tui-layout.h.  */\n+\n+void\n+tui_layout_split::replace_window (const char *name, const char *new_window)\n+{\n+  for (auto &item : m_splits)\n+    item.layout->replace_window (name, new_window);\n+}\n+\n+/* Destroy the layout associated with SELF.  */\n+\n static void\n-initialize_layouts ()\n+destroy_layout (struct cmd_list_element *self, void *context)\n+{\n+  tui_layout_split *layout = (tui_layout_split *) context;\n+  size_t index = find_layout (layout);\n+  layouts.erase (layouts.begin () + index);\n+}\n+\n+/* List holding the sub-commands of \"layout\".  */\n+\n+static struct cmd_list_element *layout_list;\n+\n+/* Add a \"layout\" command with name NAME that switches to LAYOUT.  */\n+\n+static void\n+add_layout_command (const char *name, tui_layout_split *layout)\n {\n-  standard_layouts[SRC_COMMAND] = new tui_layout_split ();\n-  standard_layouts[SRC_COMMAND]->add_window (\"src\", 2);\n-  standard_layouts[SRC_COMMAND]->add_window (\"locator\", 0);\n-  standard_layouts[SRC_COMMAND]->add_window (\"cmd\", 1);\n+  struct cmd_list_element *cmd;\n \n-  standard_layouts[DISASSEM_COMMAND] = new tui_layout_split ();\n-  standard_layouts[DISASSEM_COMMAND]->add_window (\"asm\", 2);\n-  standard_layouts[DISASSEM_COMMAND]->add_window (\"locator\", 0);\n-  standard_layouts[DISASSEM_COMMAND]->add_window (\"cmd\", 1);\n+  gdb::unique_xmalloc_ptr<char> doc (xstrprintf (_(\"Apply the \\\"%s\\\" layout\"),\n+\t\t\t\t\t\t name));\n \n-  standard_layouts[SRC_DATA_COMMAND] = new tui_layout_split ();\n-  standard_layouts[SRC_DATA_COMMAND]->add_window (\"regs\", 1);\n-  standard_layouts[SRC_DATA_COMMAND]->add_window (\"src\", 1);\n-  standard_layouts[SRC_DATA_COMMAND]->add_window (\"locator\", 0);\n-  standard_layouts[SRC_DATA_COMMAND]->add_window (\"cmd\", 1);\n+  cmd = add_cmd (name, class_tui, nullptr, doc.get (), &layout_list);\n+  set_cmd_context (cmd, layout);\n+  /* There is no API to set this.  */\n+  cmd->func = tui_apply_layout;\n+  cmd->destroyer = destroy_layout;\n+  cmd->doc_allocated = 1;\n+  doc.release ();\n+  layouts.emplace_back (layout);\n+}\n \n-  standard_layouts[DISASSEM_DATA_COMMAND] = new tui_layout_split ();\n-  standard_layouts[DISASSEM_DATA_COMMAND]->add_window (\"regs\", 1);\n-  standard_layouts[DISASSEM_DATA_COMMAND]->add_window (\"asm\", 1);\n-  standard_layouts[DISASSEM_DATA_COMMAND]->add_window (\"locator\", 0);\n-  standard_layouts[DISASSEM_DATA_COMMAND]->add_window (\"cmd\", 1);\n+/* Initialize the standard layouts.  */\n \n-  standard_layouts[SRC_DISASSEM_COMMAND] = new tui_layout_split ();\n-  standard_layouts[SRC_DISASSEM_COMMAND]->add_window (\"src\", 1);\n-  standard_layouts[SRC_DISASSEM_COMMAND]->add_window (\"asm\", 1);\n-  standard_layouts[SRC_DISASSEM_COMMAND]->add_window (\"locator\", 0);\n-  standard_layouts[SRC_DISASSEM_COMMAND]->add_window (\"cmd\", 1);\n+static void\n+initialize_layouts ()\n+{\n+  tui_layout_split *layout;\n+\n+  layout = new tui_layout_split ();\n+  layout->add_window (\"src\", 2);\n+  layout->add_window (\"status\", 0);\n+  layout->add_window (\"cmd\", 1);\n+  add_layout_command (\"src\", layout);\n+\n+  layout = new tui_layout_split ();\n+  layout->add_window (\"asm\", 2);\n+  layout->add_window (\"status\", 0);\n+  layout->add_window (\"cmd\", 1);\n+  add_layout_command (\"asm\", layout);\n+\n+  layout = new tui_layout_split ();\n+  layout->add_window (\"src\", 1);\n+  layout->add_window (\"asm\", 1);\n+  layout->add_window (\"status\", 0);\n+  layout->add_window (\"cmd\", 1);\n+  add_layout_command (\"split\", layout);\n+\n+  layout = new tui_layout_split ();\n+  layout->add_window (\"regs\", 1);\n+  layout->add_window (\"src\", 1);\n+  layout->add_window (\"status\", 0);\n+  layout->add_window (\"cmd\", 1);\n+  layouts.emplace_back (layout);\n+  src_regs_layout = layout;\n+\n+  layout = new tui_layout_split ();\n+  layout->add_window (\"regs\", 1);\n+  layout->add_window (\"asm\", 1);\n+  layout->add_window (\"status\", 0);\n+  layout->add_window (\"cmd\", 1);\n+  layouts.emplace_back (layout);\n+  asm_regs_layout = layout;\n }\n \n \f\n \n+/* Base command for \"layout\".  */\n+\n+static void\n+tui_layout_command (const char *layout_name, int from_tty)\n+{\n+  help_list (layout_list, \"layout \", all_commands, gdb_stdout);\n+}\n+\n /* Function to initialize gdb commands, for tui window layout\n    manipulation.  */\n \n void _initialize_tui_layout ();\n void\n _initialize_tui_layout ()\n {\n-  struct cmd_list_element *cmd;\n-\n-  cmd = add_com (\"layout\", class_tui, tui_layout_command, _(\"\\\n+  add_prefix_cmd (\"layout\", class_tui, tui_layout_command, _(\"\\\n Change the layout of windows.\\n\\\n-Usage: layout prev | next | LAYOUT-NAME\\n\\\n-Layout names are:\\n\\\n-   src   : Displays source and command windows.\\n\\\n-   asm   : Displays disassembly and command windows.\\n\\\n-   split : Displays source, disassembly and command windows.\\n\\\n-   regs  : Displays register window. If existing layout\\n\\\n-           is source/command or assembly/command, the \\n\\\n-           register window is displayed. If the\\n\\\n-           source/assembly/command (split) is displayed, \\n\\\n-           the register window is displayed with \\n\\\n-           the window that has current logical focus.\"));\n-  set_cmd_completer (cmd, layout_completer);\n+Usage: layout prev | next | LAYOUT-NAME\"),\n+\t\t  &layout_list, \"layout \", 0, &cmdlist);\n+\n+  add_cmd (\"next\", class_tui, tui_next_layout_command,\n+\t   _(\"Apply the next TUI layout\"),\n+\t   &layout_list);\n+  add_cmd (\"prev\", class_tui, tui_prev_layout_command,\n+\t   _(\"Apply the previous TUI layout\"),\n+\t   &layout_list);\n+  add_cmd (\"regs\", class_tui, tui_regs_layout_command,\n+\t   _(\"Apply the TUI register layout\"),\n+\t   &layout_list);\n \n   initialize_layouts ();\n }"
    },
    {
      "sha": "98bd548aaee9d3db1db57b262eef828bb8d78a96",
      "filename": "gdb/tui/tui-layout.h",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/tui/tui-layout.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/tui/tui-layout.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.h?ref=416eb92d84ac0bc4b8aba137789f52d1f987cd54",
      "patch": "@@ -68,6 +68,10 @@ class tui_layout_base\n      and the window being passed in here.  */\n   virtual void remove_windows (const char *name) = 0;\n \n+  /* Replace the window named NAME in the layout with the window named\n+     NEW_WINDOW.  */\n+  virtual void replace_window (const char *name, const char *new_window) = 0;\n+\n   /* The most recent space allocation.  */\n   int x = 0;\n   int y = 0;\n@@ -114,6 +118,8 @@ class tui_layout_window : public tui_layout_base\n   {\n   }\n \n+  void replace_window (const char *name, const char *new_window) override;\n+\n protected:\n \n   void get_sizes (int *min_height, int *max_height) override;\n@@ -159,6 +165,8 @@ class tui_layout_split : public tui_layout_base\n \n   void remove_windows (const char *name) override;\n \n+  void replace_window (const char *name, const char *new_window) override;\n+\n protected:\n \n   void get_sizes (int *min_height, int *max_height) override;\n@@ -189,7 +197,8 @@ class tui_layout_split : public tui_layout_base\n    way.  */\n extern void tui_add_win_to_layout (enum tui_win_type);\n \n-extern void tui_set_layout (enum tui_layout_type);\n+/* Set the initial layout.  */\n+extern void tui_set_initial_layout ();\n \n /* Switch to the next layout.  */\n extern void tui_next_layout ();"
    },
    {
      "sha": "8cc002169e883a04dce308c52133a2dbe2330869",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=416eb92d84ac0bc4b8aba137789f52d1f987cd54",
      "patch": "@@ -385,7 +385,7 @@ window_name_completer (completion_tracker &tracker,\n   /* If no windows are considered visible then the TUI has not yet been\n      initialized.  But still \"focus src\" and \"focus cmd\" will work because\n      invoking the focus command will entail initializing the TUI which sets the\n-     default layout to SRC_COMMAND.  */\n+     default layout to \"src\".  */\n   if (completion_name_vec.empty ())\n     {\n       completion_name_vec.push_back (SRC_NAME);"
    },
    {
      "sha": "77d7c9068373a6fc7c58b8376e03e80a0e22334f",
      "filename": "gdb/tui/tui.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/tui/tui.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/416eb92d84ac0bc4b8aba137789f52d1f987cd54/gdb/tui/tui.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui.c?ref=416eb92d84ac0bc4b8aba137789f52d1f987cd54",
      "patch": "@@ -422,7 +422,7 @@ tui_enable (void)\n       def_prog_mode ();\n \n       tui_show_frame_info (0);\n-      tui_set_layout (SRC_COMMAND);\n+      tui_set_initial_layout ();\n       tui_set_win_focus_to (TUI_SRC_WIN);\n       keypad (TUI_CMD_WIN->handle.get (), TRUE);\n       wrefresh (TUI_CMD_WIN->handle.get ());"
    }
  ]
}