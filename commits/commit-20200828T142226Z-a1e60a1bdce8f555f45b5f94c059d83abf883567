{
  "sha": "a1e60a1bdce8f555f45b5f94c059d83abf883567",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTFlNjBhMWJkY2U4ZjU1NWY0NWI1Zjk0YzA1OWQ4M2FiZjg4MzU2Nw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-28T14:13:16Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-28T14:22:26Z"
    },
    "message": "PR26449, PR26450 UBSAN: frv-ibld.c:135 left shift\n\nEh well, I guess the code didn't quite live up to the comment.\n\n\tPR 26449\n\tPR 26450\n\t* cgen-ibld.in (insert_1): Use 1UL in forming mask.\n\t(extract_normal): Likewise.\n\t(insert_normal): Likewise, and move past zero length test.\n\t(put_insn_int_value): Handle mask for zero length, use 1UL.\n\t* bpf-ibld.c, * epiphany-ibld.c, * fr30-ibld.c, * frv-ibld.c,\n\t* ip2k-ibld.c, * iq2000-ibld.c, * lm32-ibld.c, * m32c-ibld.c,\n\t* m32r-ibld.c, * mep-ibld.c, * mt-ibld.c, * or1k-ibld.c,\n\t* xc16x-ibld.c, * xstormy16-ibld.c: Regenerate.",
    "tree": {
      "sha": "5537dd112ecf11c9b73f5e87023915a73846177a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5537dd112ecf11c9b73f5e87023915a73846177a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a1e60a1bdce8f555f45b5f94c059d83abf883567",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1e60a1bdce8f555f45b5f94c059d83abf883567",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a1e60a1bdce8f555f45b5f94c059d83abf883567",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1e60a1bdce8f555f45b5f94c059d83abf883567/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ed2ed4dcf4ae20b9a7c38ffdf379fef383c6b8f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed2ed4dcf4ae20b9a7c38ffdf379fef383c6b8f9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ed2ed4dcf4ae20b9a7c38ffdf379fef383c6b8f9"
    }
  ],
  "stats": {
    "total": 223,
    "additions": 133,
    "deletions": 90
  },
  "files": [
    {
      "sha": "6e7b8f4c3e130c3d2417ee3cea0593457d2f62e9",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -1,3 +1,16 @@\n+2020-08-28  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26449\n+\tPR 26450\n+\t* cgen-ibld.in (insert_1): Use 1UL in forming mask.\n+\t(extract_normal): Likewise.\n+\t(insert_normal): Likewise, and move past zero length test.\n+\t(put_insn_int_value): Handle mask for zero length, use 1UL.\n+\t* bpf-ibld.c, * epiphany-ibld.c, * fr30-ibld.c, * frv-ibld.c,\n+\t* ip2k-ibld.c, * iq2000-ibld.c, * lm32-ibld.c, * m32c-ibld.c,\n+\t* m32r-ibld.c, * mep-ibld.c, * mt-ibld.c, * or1k-ibld.c,\n+\t* xc16x-ibld.c, * xstormy16-ibld.c: Regenerate.\n+\n 2020-08-28  Cooper Qu  <cooper.qu@linux.alibaba.com>\n \n \t* csky-dis.c (CSKY_DEFAULT_ISA): Define."
    },
    {
      "sha": "0070e4108693765419e38e3b3ef3ee416fdc0cb7",
      "filename": "opcodes/bpf-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/bpf-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/bpf-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "7829822b2cac62abab69a771dfa3c46a339b7bb6",
      "filename": "opcodes/cgen-ibld.in",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/cgen-ibld.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/cgen-ibld.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/cgen-ibld.in?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -84,13 +84,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -130,13 +130,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -313,7 +315,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -490,7 +492,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "27f0fabd2ae5278b01cf282ea564b6adccfbc0b5",
      "filename": "opcodes/epiphany-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/epiphany-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/epiphany-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/epiphany-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "8cc70209d4f08a9e05c1ea1b132d905eaf3150f6",
      "filename": "opcodes/fr30-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/fr30-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/fr30-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/fr30-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "2a7fcb876c38b72db13ae7f908d4646cc81d2317",
      "filename": "opcodes/frv-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/frv-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/frv-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/frv-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "18c2fed67a0c7628595ced48c4de02cbec8e34d3",
      "filename": "opcodes/ip2k-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/ip2k-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/ip2k-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ip2k-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "cad26e226e3e78d63710e1effd6826f5613e513f",
      "filename": "opcodes/iq2000-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/iq2000-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/iq2000-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/iq2000-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "48e894a9ee1297d0fc0e0281d6feb5d143717220",
      "filename": "opcodes/lm32-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/lm32-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/lm32-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/lm32-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "67bfb48c0a25d36d0b278a9403d7dd8cf762c225",
      "filename": "opcodes/m32c-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/m32c-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/m32c-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/m32c-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "8e1a7de81410003b568d93702b37e2d3b254211f",
      "filename": "opcodes/m32r-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/m32r-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/m32r-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/m32r-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "3de7adea2cc37ec7d3ebf62fc05e0ae42ca9fbd6",
      "filename": "opcodes/mep-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/mep-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/mep-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/mep-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "924fc90cf77c2d4bd4e15d81c8a990792c20bec4",
      "filename": "opcodes/mt-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/mt-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/mt-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/mt-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "576a13918b6c37605f43076ae5739908edfcb286",
      "filename": "opcodes/or1k-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/or1k-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/or1k-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/or1k-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "ed51a1b4fecdc3728b071963d2e5cbb883f329e2",
      "filename": "opcodes/xc16x-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/xc16x-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/xc16x-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/xc16x-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    },
    {
      "sha": "06f036fd12e2a81e96ae4ab4c377a8ac730394f0",
      "filename": "opcodes/xstormy16-ibld.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/xstormy16-ibld.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1e60a1bdce8f555f45b5f94c059d83abf883567/opcodes/xstormy16-ibld.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/xstormy16-ibld.c?ref=a1e60a1bdce8f555f45b5f94c059d83abf883567",
      "patch": "@@ -85,13 +85,13 @@ insert_1 (CGEN_CPU_DESC cd,\n \t  int word_length,\n \t  unsigned char *bufp)\n {\n-  unsigned long x,mask;\n+  unsigned long x, mask;\n   int shift;\n \n   x = cgen_get_insn_value (cd, bufp, word_length, cd->endian);\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n   if (CGEN_INSN_LSB0_P)\n     shift = (start + 1) - length;\n   else\n@@ -131,13 +131,15 @@ insert_normal (CGEN_CPU_DESC cd,\n \t       CGEN_INSN_BYTES_PTR buffer)\n {\n   static char errbuf[100];\n-  /* Written this way to avoid undefined behaviour.  */\n-  unsigned long mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  unsigned long mask;\n \n   /* If LENGTH is zero, this operand doesn't contribute to the value.  */\n   if (length == 0)\n     return NULL;\n \n+  /* Written this way to avoid undefined behaviour.  */\n+  mask = (1UL << (length - 1) << 1) - 1;\n+\n   if (word_length > 8 * sizeof (CGEN_INSN_INT))\n     abort ();\n \n@@ -314,7 +316,7 @@ put_insn_int_value (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n     {\n       int shift = insn_length - length;\n       /* Written this way to avoid undefined behaviour.  */\n-      CGEN_INSN_INT mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+      CGEN_INSN_INT mask = length == 0 ? 0 : (1UL << (length - 1) << 1) - 1;\n \n       *buf = (*buf & ~(mask << shift)) | ((value & mask) << shift);\n     }\n@@ -491,7 +493,7 @@ extract_normal (CGEN_CPU_DESC cd,\n #endif /* ! CGEN_INT_INSN_P */\n \n   /* Written this way to avoid undefined behaviour.  */\n-  mask = (((1L << (length - 1)) - 1) << 1) | 1;\n+  mask = (1UL << (length - 1) << 1) - 1;\n \n   value &= mask;\n   /* sign extend? */"
    }
  ]
}