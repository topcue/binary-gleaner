{
  "sha": "85102364b2d1845fe9ae7d70096671a3ea4bccf3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODUxMDIzNjRiMmQxODQ1ZmU5YWU3ZDcwMDk2NjcxYTNlYTRiY2NmMw==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-10-18T00:48:08Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-10-18T00:48:08Z"
    },
    "message": "[gdb] Fix more typos in comments\n\nFix typos in comments.  NFC.\n\nTested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2019-10-18  Tom de Vries  <tdevries@suse.de>\n\n\t* aarch64-tdep.c: Fix typos in comments.\n\t* ada-lang.c: Same.\n\t* ada-tasks.c: Same.\n\t* alpha-tdep.c: Same.\n\t* alpha-tdep.h: Same.\n\t* amd64-nat.c: Same.\n\t* amd64-windows-tdep.c: Same.\n\t* arc-tdep.c: Same.\n\t* arc-tdep.h: Same.\n\t* arch-utils.c: Same.\n\t* arm-nbsd-tdep.c: Same.\n\t* arm-tdep.c: Same.\n\t* ax-gdb.c: Same.\n\t* blockframe.c: Same.\n\t* btrace.c: Same.\n\t* c-varobj.c: Same.\n\t* coff-pe-read.c: Same.\n\t* coffread.c: Same.\n\t* cris-tdep.c: Same.\n\t* darwin-nat.c: Same.\n\t* dbxread.c: Same.\n\t* dcache.c: Same.\n\t* disasm.c: Same.\n\t* dtrace-probe.c: Same.\n\t* dwarf-index-write.c: Same.\n\t* dwarf2-frame-tailcall.c: Same.\n\t* dwarf2-frame.c: Same.\n\t* dwarf2read.c: Same.\n\t* eval.c: Same.\n\t* exceptions.c: Same.\n\t* fbsd-tdep.c: Same.\n\t* findvar.c: Same.\n\t* frame.c: Same.\n\t* frv-tdep.c: Same.\n\t* gnu-v3-abi.c: Same.\n\t* go32-nat.c: Same.\n\t* h8300-tdep.c: Same.\n\t* hppa-tdep.c: Same.\n\t* i386-linux-tdep.c: Same.\n\t* i386-tdep.c: Same.\n\t* ia64-libunwind-tdep.c: Same.\n\t* ia64-tdep.c: Same.\n\t* infcmd.c: Same.\n\t* infrun.c: Same.\n\t* linespec.c: Same.\n\t* linux-nat.c: Same.\n\t* linux-thread-db.c: Same.\n\t* machoread.c: Same.\n\t* mdebugread.c: Same.\n\t* mep-tdep.c: Same.\n\t* mn10300-tdep.c: Same.\n\t* namespace.c: Same.\n\t* objfiles.c: Same.\n\t* opencl-lang.c: Same.\n\t* or1k-tdep.c: Same.\n\t* osabi.c: Same.\n\t* ppc-linux-nat.c: Same.\n\t* ppc-linux-tdep.c: Same.\n\t* ppc-sysv-tdep.c: Same.\n\t* printcmd.c: Same.\n\t* procfs.c: Same.\n\t* record-btrace.c: Same.\n\t* record-full.c: Same.\n\t* remote-fileio.c: Same.\n\t* remote.c: Same.\n\t* rs6000-tdep.c: Same.\n\t* s12z-tdep.c: Same.\n\t* score-tdep.c: Same.\n\t* ser-base.c: Same.\n\t* ser-go32.c: Same.\n\t* skip.c: Same.\n\t* sol-thread.c: Same.\n\t* solib-svr4.c: Same.\n\t* solib.c: Same.\n\t* source.c: Same.\n\t* sparc-nat.c: Same.\n\t* sparc-sol2-tdep.c: Same.\n\t* sparc-tdep.c: Same.\n\t* sparc64-tdep.c: Same.\n\t* stabsread.c: Same.\n\t* stack.c: Same.\n\t* symfile.c: Same.\n\t* symtab.c: Same.\n\t* target-descriptions.c: Same.\n\t* target-float.c: Same.\n\t* thread.c: Same.\n\t* utils.c: Same.\n\t* valops.c: Same.\n\t* valprint.c: Same.\n\t* value.c: Same.\n\t* varobj.c: Same.\n\t* windows-nat.c: Same.\n\t* xcoffread.c: Same.\n\t* xstormy16-tdep.c: Same.\n\t* xtensa-tdep.c: Same.\n\nChange-Id: I5175f1b107bfa4e1cdd4a3361ccb4739e53c75c4",
    "tree": {
      "sha": "131dd3a2a2dcbec325716193b2fa0c496d6701b7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/131dd3a2a2dcbec325716193b2fa0c496d6701b7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/85102364b2d1845fe9ae7d70096671a3ea4bccf3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85102364b2d1845fe9ae7d70096671a3ea4bccf3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/85102364b2d1845fe9ae7d70096671a3ea4bccf3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85102364b2d1845fe9ae7d70096671a3ea4bccf3/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39849b0503152de7447b3da67ed9fa45fa9ba5fd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39849b0503152de7447b3da67ed9fa45fa9ba5fd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/39849b0503152de7447b3da67ed9fa45fa9ba5fd"
    }
  ],
  "stats": {
    "total": 412,
    "additions": 255,
    "deletions": 157
  },
  "files": [
    {
      "sha": "ea87d009510ee097af348e5e834817654f8a6d3c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 98,
      "deletions": 0,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1,3 +1,101 @@\n+2019-10-18  Tom de Vries  <tdevries@suse.de>\n+\n+\t* aarch64-tdep.c: Fix typos in comments.\n+\t* ada-lang.c: Same.\n+\t* ada-tasks.c: Same.\n+\t* alpha-tdep.c: Same.\n+\t* alpha-tdep.h: Same.\n+\t* amd64-nat.c: Same.\n+\t* amd64-windows-tdep.c: Same.\n+\t* arc-tdep.c: Same.\n+\t* arc-tdep.h: Same.\n+\t* arch-utils.c: Same.\n+\t* arm-nbsd-tdep.c: Same.\n+\t* arm-tdep.c: Same.\n+\t* ax-gdb.c: Same.\n+\t* blockframe.c: Same.\n+\t* btrace.c: Same.\n+\t* c-varobj.c: Same.\n+\t* coff-pe-read.c: Same.\n+\t* coffread.c: Same.\n+\t* cris-tdep.c: Same.\n+\t* darwin-nat.c: Same.\n+\t* dbxread.c: Same.\n+\t* dcache.c: Same.\n+\t* disasm.c: Same.\n+\t* dtrace-probe.c: Same.\n+\t* dwarf-index-write.c: Same.\n+\t* dwarf2-frame-tailcall.c: Same.\n+\t* dwarf2-frame.c: Same.\n+\t* dwarf2read.c: Same.\n+\t* eval.c: Same.\n+\t* exceptions.c: Same.\n+\t* fbsd-tdep.c: Same.\n+\t* findvar.c: Same.\n+\t* frame.c: Same.\n+\t* frv-tdep.c: Same.\n+\t* gnu-v3-abi.c: Same.\n+\t* go32-nat.c: Same.\n+\t* h8300-tdep.c: Same.\n+\t* hppa-tdep.c: Same.\n+\t* i386-linux-tdep.c: Same.\n+\t* i386-tdep.c: Same.\n+\t* ia64-libunwind-tdep.c: Same.\n+\t* ia64-tdep.c: Same.\n+\t* infcmd.c: Same.\n+\t* infrun.c: Same.\n+\t* linespec.c: Same.\n+\t* linux-nat.c: Same.\n+\t* linux-thread-db.c: Same.\n+\t* machoread.c: Same.\n+\t* mdebugread.c: Same.\n+\t* mep-tdep.c: Same.\n+\t* mn10300-tdep.c: Same.\n+\t* namespace.c: Same.\n+\t* objfiles.c: Same.\n+\t* opencl-lang.c: Same.\n+\t* or1k-tdep.c: Same.\n+\t* osabi.c: Same.\n+\t* ppc-linux-nat.c: Same.\n+\t* ppc-linux-tdep.c: Same.\n+\t* ppc-sysv-tdep.c: Same.\n+\t* printcmd.c: Same.\n+\t* procfs.c: Same.\n+\t* record-btrace.c: Same.\n+\t* record-full.c: Same.\n+\t* remote-fileio.c: Same.\n+\t* remote.c: Same.\n+\t* rs6000-tdep.c: Same.\n+\t* s12z-tdep.c: Same.\n+\t* score-tdep.c: Same.\n+\t* ser-base.c: Same.\n+\t* ser-go32.c: Same.\n+\t* skip.c: Same.\n+\t* sol-thread.c: Same.\n+\t* solib-svr4.c: Same.\n+\t* solib.c: Same.\n+\t* source.c: Same.\n+\t* sparc-nat.c: Same.\n+\t* sparc-sol2-tdep.c: Same.\n+\t* sparc-tdep.c: Same.\n+\t* sparc64-tdep.c: Same.\n+\t* stabsread.c: Same.\n+\t* stack.c: Same.\n+\t* symfile.c: Same.\n+\t* symtab.c: Same.\n+\t* target-descriptions.c: Same.\n+\t* target-float.c: Same.\n+\t* thread.c: Same.\n+\t* utils.c: Same.\n+\t* valops.c: Same.\n+\t* valprint.c: Same.\n+\t* value.c: Same.\n+\t* varobj.c: Same.\n+\t* windows-nat.c: Same.\n+\t* xcoffread.c: Same.\n+\t* xstormy16-tdep.c: Same.\n+\t* xtensa-tdep.c: Same.\n+\n 2019-10-17  Tom Tromey  <tromey@adacore.com>\n \n \t* configure: Rebuild."
    },
    {
      "sha": "2e428ca492476191747f63ba9c51fd2a678eb670",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -3550,7 +3550,7 @@ aarch64_record_data_proc_reg (insn_decode_record *aarch64_insn_r)\n \t    }\n \t  else if (insn_bits21_23 == 0x04 || insn_bits21_23 == 0x06)\n \t    {\n-\t      /* CConditional select.  */\n+\t      /* Conditional select.  */\n \t      /* Data-processing (2 source).  */\n \t      /* Data-processing (1 source).  */\n \t      record_buf[0] = reg_rd;"
    },
    {
      "sha": "6175219b4b364c7c91588fa24483adc78748299a",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -825,7 +825,7 @@ get_base_type (struct type *type)\n \n /* Return a decoded version of the given VALUE.  This means returning\n    a value whose type is obtained by applying all the GNAT-specific\n-   encondings, making the resulting type a static but standard description\n+   encodings, making the resulting type a static but standard description\n    of the initial type.  */\n \n struct value *\n@@ -1459,7 +1459,7 @@ ada_sniff_from_mangled_name (const char *mangled, char **out)\n    Otherwise, do nothing.  This function also does nothing if\n    INDEX_DESC_TYPE is NULL.\n \n-   The GNAT encoding used to describle the array index type evolved a bit.\n+   The GNAT encoding used to describe the array index type evolved a bit.\n    Initially, the information would be provided through the name of each\n    field of the structure type only, while the type of these fields was\n    described as unspecified and irrelevant.  The debugger was then expected\n@@ -8968,7 +8968,7 @@ ada_to_fixed_type (struct type *type, const gdb_byte *valaddr,\n       brobecker/2010-11-19: It seems to me that the only case where it is\n       useful to preserve the typedef layer is when dealing with fat pointers.\n       Perhaps, we could add a check for that and preserve the typedef layer\n-      only in that situation.  But this seems unecessary so far, probably\n+      only in that situation.  But this seems unnecessary so far, probably\n       because we call check_typedef/ada_check_typedef pretty much everywhere.\n       */\n   if (TYPE_CODE (type) == TYPE_CODE_TYPEDEF\n@@ -9320,7 +9320,7 @@ ada_get_base_type (struct type *raw_type)\n   if (TYPE_CODE (TYPE_FIELD_TYPE (real_type_namer, 0)) != TYPE_CODE_REF)\n     {\n       /* This is an older encoding form where the base type needs to be\n-\t looked up by name.  We prefer the newer enconding because it is\n+\t looked up by name.  We prefer the newer encoding because it is\n \t more efficient.  */\n       raw_real_type = ada_find_any_type (TYPE_FIELD_NAME (real_type_namer, 0));\n       if (raw_real_type == NULL)\n@@ -12046,7 +12046,7 @@ is_known_support_routine (struct frame_info *frame)\n   if (access (fullname, R_OK) != 0)\n     return 1;\n \n-  /* Check the unit filename againt the Ada runtime file naming.\n+  /* Check the unit filename against the Ada runtime file naming.\n      We also check the name of the objfile against the name of some\n      known system libraries that sometimes come with debugging info\n      too.  */\n@@ -12899,7 +12899,7 @@ ada_exception_catchpoint_cond_string (const char *excep_string,\n      exception constraint_error\" is rewritten into \"catch exception\n      standard.constraint_error\".\n \n-     If an exception named contraint_error is defined in another package of\n+     If an exception named constraint_error is defined in another package of\n      the inferior program, then the only way to specify this exception as a\n      breakpoint condition is to use its fully-qualified named:\n      e.g. my_package.constraint_error.  */"
    },
    {
      "sha": "e5504e9bd3dfcb049ef254ee32e108a29113a513",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -604,7 +604,7 @@ ptid_from_atcb_common (struct value *common_value)\n }\n \n /* Read the ATCB data of a given task given its TASK_ID (which is in practice\n-   the address of its assocated ATCB record), and store the result inside\n+   the address of its associated ATCB record), and store the result inside\n    TASK_INFO.  */\n \n static void\n@@ -744,7 +744,7 @@ read_atcb (CORE_ADDR task_id, struct ada_task_info *task_info)\n                                        called_task_fieldno));\n     }\n \n-  /* If the ATCB cotnains some information about RV callers, then\n+  /* If the ATCB contains some information about RV callers, then\n      compute the \"caller_task\".  Otherwise, leave it as zero.  */\n \n   if (pspace_data->atcb_fieldno.call >= 0)"
    },
    {
      "sha": "795f0367525a8febd7263eb5caa99d9c27faa81a",
      "filename": "gdb/alpha-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/alpha-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/alpha-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/alpha-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -994,11 +994,11 @@ alpha_sigtramp_frame_sniffer (const struct frame_unwind *self,\n   const char *name;\n \n   /* NOTE: cagney/2004-04-30: Do not copy/clone this code.  Instead\n-     look at tramp-frame.h and other simplier per-architecture\n+     look at tramp-frame.h and other simpler per-architecture\n      sigtramp unwinders.  */\n \n   /* We shouldn't even bother to try if the OSABI didn't register a\n-     sigcontext_addr handler or pc_in_sigtramp hander.  */\n+     sigcontext_addr handler or pc_in_sigtramp handler.  */\n   if (gdbarch_tdep (gdbarch)->sigcontext_addr == NULL)\n     return 0;\n   if (gdbarch_tdep (gdbarch)->pc_in_sigtramp == NULL)"
    },
    {
      "sha": "894d7d3dd768a4190715431c5f8dfe28957628d1",
      "filename": "gdb/alpha-tdep.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/alpha-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/alpha-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/alpha-tdep.h?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -83,7 +83,7 @@ struct gdbarch_tdep\n \n   /* Does the PC fall in a signal trampoline.  */\n   /* NOTE: cagney/2004-04-30: Do not copy/clone this code.  Instead\n-     look at tramp-frame.h and other simplier per-architecture\n+     look at tramp-frame.h and other simpler per-architecture\n      sigtramp unwinders.  */\n   int (*pc_in_sigtramp) (struct gdbarch *gdbarch, CORE_ADDR pc,\n \t\t\t const char *name);"
    },
    {
      "sha": "a65edc267ad89af9977536d40f3174164cf41665",
      "filename": "gdb/amd64-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/amd64-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/amd64-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-nat.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -30,7 +30,7 @@\n    the register number as used by GDB and the register set used by the\n    host to represent the general-purpose registers; one for 32-bit\n    code and one for 64-bit code.  The mappings are specified by the\n-   follwing variables and consist of an array of offsets within the\n+   following variables and consist of an array of offsets within the\n    register set indexed by register number, and the number of\n    registers supported by the mapping.  We don't need mappings for the\n    floating-point and SSE registers, since the difference between"
    },
    {
      "sha": "61ac2a5c3ef104c75bacad3e31aa7a6a6587c056",
      "filename": "gdb/amd64-windows-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/amd64-windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/amd64-windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-windows-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1214,7 +1214,7 @@ amd64_windows_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n   /* The dwarf2 unwinder (appended very early by i386_gdbarch_init) is\n      preferred over the SEH one.  The reasons are:\n-     - binaries without SEH but with dwarf2 debug info are correcly handled\n+     - binaries without SEH but with dwarf2 debug info are correctly handled\n        (although they aren't ABI compliant, gcc before 4.7 didn't emit SEH\n        info).\n      - dwarf3 DW_OP_call_frame_cfa is correctly handled (it can only be"
    },
    {
      "sha": "7f44702d6b18204fd1bef2fe793bfb70bf957b5a",
      "filename": "gdb/arc-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/arc-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/arc-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1,4 +1,4 @@\n-/* Target dependent code for ARC arhitecture, for GDB.\n+/* Target dependent code for ARC architecture, for GDB.\n \n    Copyright 2005-2019 Free Software Foundation, Inc.\n    Contributed by Synopsys Inc.\n@@ -1203,7 +1203,7 @@ arc_disassemble_info (struct gdbarch *gdbarch)\n    If CACHE is not NULL, then it will be filled with information about saved\n    registers.\n \n-   There are several variations of prologue which GDB may encouter.  \"Full\"\n+   There are several variations of prologue which GDB may encounter.  \"Full\"\n    prologue looks like this:\n \n \tsub\tsp,sp,<imm>   ; Space for variadic arguments.\n@@ -1224,7 +1224,7 @@ arc_disassemble_info (struct gdbarch *gdbarch)\n     store, that doesn't update SP.  Like this:\n \n \n-\tsub\tsp,sp,8\t\t; Create space for calee-saved registers.\n+\tsub\tsp,sp,8\t\t; Create space for callee-saved registers.\n \tst\tr13,[sp,4]      ; Store callee saved registers (up to R26/GP).\n \tst\tr14,[sp,0]\n \n@@ -1391,7 +1391,7 @@ arc_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n int\n arc_delayed_print_insn (bfd_vma addr, struct disassemble_info *info)\n {\n-  /* Standard BFD \"machine number\" field allows libocodes disassembler to\n+  /* Standard BFD \"machine number\" field allows libopcodes disassembler to\n      distinguish ARC 600, 700 and v2 cores, however v2 encompasses both ARC EM\n      and HS, which have some difference between.  There are two ways to specify\n      what is the target core:"
    },
    {
      "sha": "02f34dc1e6d0bbb21b260bdcb68f1c6b9d7b5945",
      "filename": "gdb/arc-tdep.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/arc-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/arc-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.h?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1,4 +1,4 @@\n-/* Target dependent code for ARC arhitecture, for GDB.\n+/* Target dependent code for ARC architecture, for GDB.\n \n    Copyright 2005-2019 Free Software Foundation, Inc.\n    Contributed by Synopsys Inc."
    },
    {
      "sha": "2129c3b2c388670b6f52e85ba62a1370b9a1dad0",
      "filename": "gdb/arch-utils.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/arch-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/arch-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -69,7 +69,7 @@ legacy_register_sim_regno (struct gdbarch *gdbarch, int regnum)\n   gdb_assert (regnum >= 0 && regnum < gdbarch_num_regs (gdbarch));\n   /* NOTE: cagney/2002-05-13: The old code did it this way and it is\n      suspected that some GDB/SIM combinations may rely on this\n-     behavour.  The default should be one2one_register_sim_regno\n+     behaviour.  The default should be one2one_register_sim_regno\n      (below).  */\n   if (gdbarch_register_name (gdbarch, regnum) != NULL\n       && gdbarch_register_name (gdbarch, regnum)[0] != '\\0')\n@@ -373,7 +373,7 @@ set_endian (const char *ignore_args, int from_tty, struct cmd_list_element *c)\n \n    SELECTED may be NULL, in which case we return the architecture\n    associated with TARGET_DESC.  If SELECTED specifies a variant\n-   of the architecture associtated with TARGET_DESC, return the\n+   of the architecture associated with TARGET_DESC, return the\n    more specific of the two.\n \n    If SELECTED is a different architecture, but it is accepted as"
    },
    {
      "sha": "f9ea084d1c8ac471b4bbfaaa30b4985ea715f310",
      "filename": "gdb/arm-nbsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/arm-nbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/arm-nbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-nbsd-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -28,7 +28,7 @@\n #define ARM_NBSD_JB_PC 24\n #define ARM_NBSD_JB_ELEMENT_SIZE ARM_INT_REGISTER_SIZE\n \n-/* For compatibility with previous implemenations of GDB on arm/NetBSD,\n+/* For compatibility with previous implementations of GDB on arm/NetBSD,\n    override the default little-endian breakpoint.  */\n static const gdb_byte arm_nbsd_arm_le_breakpoint[] = {0x11, 0x00, 0x00, 0xe6};\n static const gdb_byte arm_nbsd_arm_be_breakpoint[] = {0xe6, 0x00, 0x00, 0x11};"
    },
    {
      "sha": "86946189fb105cc9a7566d062535cdf24ae1a013",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -3737,7 +3737,7 @@ arm_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n \t    }\n \t}\n \n-      /* Push stack padding for dowubleword alignment.  */\n+      /* Push stack padding for doubleword alignment.  */\n       if (nstack & (align - 1))\n \t{\n \t  si = push_stack_item (si, val, ARM_INT_REGISTER_SIZE);\n@@ -4828,7 +4828,7 @@ cleanup_branch (struct gdbarch *gdbarch, struct regcache *regs,\n   if (dsc->u.branch.link)\n     {\n       /* The value of LR should be the next insn of current one.  In order\n-       not to confuse logic hanlding later insn `bx lr', if current insn mode\n+       not to confuse logic handling later insn `bx lr', if current insn mode\n        is Thumb, the bit 0 of LR value should be set to 1.  */\n       ULONGEST next_insn_addr = dsc->insn_addr + dsc->insn_size;\n \n@@ -5519,7 +5519,7 @@ install_load_store (struct gdbarch *gdbarch, struct regcache *regs,\n \n      Before this sequence of instructions:\n      r0 is the PC value got from displaced_read_reg, so r0 = from + 8;\n-     r2 is the Rn value got from dispalced_read_reg.\n+     r2 is the Rn value got from displaced_read_reg.\n \n      Insn1: push {pc} Write address of STR instruction + offset on stack\n      Insn2: pop  {r4} Read it back from stack, r4 = addr(Insn1) + offset\n@@ -6196,7 +6196,7 @@ cleanup_svc (struct gdbarch *gdbarch, struct regcache *regs,\n }\n \n \n-/* Common copy routine for svc instruciton.  */\n+/* Common copy routine for svc instruction.  */\n \n static int\n install_svc (struct gdbarch *gdbarch, struct regcache *regs,\n@@ -9445,7 +9445,7 @@ arm_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n     }\n \n   /* Add standard register aliases.  We add aliases even for those\n-     nanes which are used by the current architecture - it's simpler,\n+     names which are used by the current architecture - it's simpler,\n      and does no harm, since nothing ever lists user registers.  */\n   for (i = 0; i < ARRAY_SIZE (arm_register_aliases); i++)\n     user_reg_add (gdbarch, arm_register_aliases[i].name,\n@@ -10687,7 +10687,7 @@ arm_record_ld_st_reg_offset (insn_decode_record *arm_insn_r)\n     {\n       reg_dest = bits (arm_insn_r->arm_insn, 12, 15);\n       /* LDR insn has a capability to do branching, if\n-         MOV LR, PC is precedded by LDR insn having Rn as R15\n+         MOV LR, PC is preceded by LDR insn having Rn as R15\n          in that case, it emulates branch and link insn, and hence we\n          need to save CSPR and PC as well.  */\n       if (15 != reg_dest)\n@@ -13006,7 +13006,7 @@ class instruction_reader : public abstract_memory_reader\n } // namespace\n \n /* Extracts arm/thumb/thumb2 insn depending on the size, and returns 0 on success \n-and positive val on fauilure.  */\n+and positive val on failure.  */\n \n static int\n extract_arm_insn (abstract_memory_reader& reader,"
    },
    {
      "sha": "ecbb2fe17a1a5094cf87aee506075c6bfc3604bb",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1911,7 +1911,7 @@ gen_expr (struct expression *exp, union exp_element **pc,\n       gen_expr (exp, pc, ax, &value3);\n       gen_usual_unary (ax, &value3);\n       ax_label (ax, end, ax->len);\n-      /* This is arbitary - what if B and C are incompatible types? */\n+      /* This is arbitrary - what if B and C are incompatible types? */\n       value->type = value2.type;\n       value->kind = value2.kind;\n       break;"
    },
    {
      "sha": "4306b5409ad1d7da64dbae86540392cdf5525420",
      "filename": "gdb/blockframe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/blockframe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/blockframe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/blockframe.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -219,7 +219,7 @@ find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n   struct compunit_symtab *compunit_symtab = NULL;\n   CORE_ADDR mapped_pc;\n \n-  /* To ensure that the symbol returned belongs to the correct setion\n+  /* To ensure that the symbol returned belongs to the correct section\n      (and that the last [random] symbol from the previous section\n      isn't returned) try to find the section containing PC.  First try\n      the overlay code (which by default returns NULL); and second try"
    },
    {
      "sha": "cf0a4e747fd3d8bb1ef4a3969039f93e861bc516",
      "filename": "gdb/btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/btrace.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -926,7 +926,7 @@ ftrace_bridge_gap (struct btrace_thread_info *btinfo,\n   best_r = NULL;\n \n   /* We search the back traces of LHS and RHS for valid connections and connect\n-     the two functon segments that give the longest combined back trace.  */\n+     the two function segments that give the longest combined back trace.  */\n \n   for (cand_l = lhs; cand_l != NULL;\n        cand_l = ftrace_get_caller (btinfo, cand_l))"
    },
    {
      "sha": "50ce202bb8f97e947a15858055418fdf4e14ef95",
      "filename": "gdb/c-varobj.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/c-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/c-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-varobj.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -28,7 +28,7 @@ static void cplus_class_num_children (struct type *type, int children[3]);\n #define ANONYMOUS_UNION_NAME _(\"<anonymous union>\")\n \n /* Does CHILD represent a child with no name?  This happens when\n-   the child is an anonmous struct or union and it has no field name\n+   the child is an anonymous struct or union and it has no field name\n    in its parent variable.\n \n    This has already been determined by *_describe_child. The easiest"
    },
    {
      "sha": "11ce46d9920f545491d84eb6b22984270a77f35a",
      "filename": "gdb/coff-pe-read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/coff-pe-read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/coff-pe-read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coff-pe-read.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -541,7 +541,7 @@ read_pe_exported_syms (minimal_symbol_reader &reader,\n \n \n       /* Pointer to the function address vector.  */\n-      /* This is relatived to ordinal value. */\n+      /* This is relative to ordinal value. */\n       unsigned long func_rva = pe_as32 (erva + exp_funcbase +\n                                         ordinal * 4);\n "
    },
    {
      "sha": "e582d8f6fbb0873515ba0bdcdefab3281563d81a",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -417,7 +417,7 @@ static int\n is_import_fixup_symbol (struct coff_symbol *cs,\n \t\t\tenum minimal_symbol_type type)\n {\n-  /* The following is a bit of a heuristic using the characterictics\n+  /* The following is a bit of a heuristic using the characteristics\n      of these fixup symbols, but should work well in practice...  */\n   int i;\n "
    },
    {
      "sha": "cb99b9288cd7e0da48ababd6da7593ad5164118e",
      "filename": "gdb/cris-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/cris-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/cris-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cris-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -3056,7 +3056,7 @@ move_reg_to_mem_movem_op (unsigned short inst, inst_env_type *inst_env)\n   inst_env->disable_interrupt = 0;\n }\n \n-/* Handles the intructions that's not yet implemented, by setting \n+/* Handles the instructions that's not yet implemented, by setting\n    inst_env->invalid to true.  */\n \n static void "
    },
    {
      "sha": "123d2c0b698e06891615767d729b78cfb8d339bf",
      "filename": "gdb/darwin-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/darwin-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/darwin-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -2145,7 +2145,7 @@ darwin_nat_target::thread_alive (ptid_t ptid)\n    copy it to RDADDR in gdb's address space.\n    If WRADDR is not NULL, write gdb's LEN bytes from WRADDR and copy it\n    to ADDR in inferior task's address space.\n-   Return 0 on failure; number of bytes read / writen otherwise.  */\n+   Return 0 on failure; number of bytes read / written otherwise.  */\n \n static int\n darwin_read_write_inferior (task_t task, CORE_ADDR addr,"
    },
    {
      "sha": "bbef372670036119d24e80382b6924f04d322155",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -2298,7 +2298,7 @@ read_ofile_symtab (struct objfile *objfile, struct partial_symtab *pst)\n       else if (type & N_EXT || type == (unsigned char) N_TEXT\n \t       || type == (unsigned char) N_NBTEXT)\n \t{\n-\t  /* Global symbol: see if we came across a dbx defintion for\n+\t  /* Global symbol: see if we came across a dbx definition for\n \t     a corresponding symbol.  If so, store the value.  Remove\n \t     syms from the chain when their values are stored, but\n \t     search the whole chain, as there may be several syms from\n@@ -2628,7 +2628,7 @@ process_one_symbol (int type, int desc, CORE_ADDR valu, const char *name,\n          function-relative symbols.  */\n       valu += function_start_offset;\n \n-      /* GCC 2.95.3 emits the first N_SLINE stab somwehere in the\n+      /* GCC 2.95.3 emits the first N_SLINE stab somewhere in the\n \t middle of the prologue instead of right at the start of the\n \t function.  To deal with this we record the address for the\n \t first N_SLINE stab to be the start of the function instead of"
    },
    {
      "sha": "fd64af96db32fc7584e2b4bf2d880bb1e7507da2",
      "filename": "gdb/dcache.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dcache.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -66,7 +66,7 @@ static struct cmd_list_element *dcache_show_list = NULL;\n    is set, etc., then the chunk is skipped.  Those chunks are handled\n    in target_xfer_memory() (or target_xfer_memory_partial()).\n \n-   This doesn't occur very often.  The most common occurance is when\n+   This doesn't occur very often.  The most common occurrence is when\n    the last bit of the .text segment and the first bit of the .data\n    segment fall within the same dcache page with a ro/cacheable memory\n    region defined for the .text segment and a rw/non-cacheable memory"
    },
    {
      "sha": "b9a883958051cea90e45da5bfb9a8b854d2aecc9",
      "filename": "gdb/disasm.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -764,12 +764,12 @@ gdb_disassembler::gdb_disassembler (struct gdbarch *gdbarch,\n   m_di.memory_error_func = dis_asm_memory_error;\n   m_di.print_address_func = dis_asm_print_address;\n   /* NOTE: cagney/2003-04-28: The original code, from the old Insight\n-     disassembler had a local optomization here.  By default it would\n+     disassembler had a local optimization here.  By default it would\n      access the executable file, instead of the target memory (there\n      was a growing list of exceptions though).  Unfortunately, the\n      heuristic was flawed.  Commands like \"disassemble &variable\"\n      didn't work as they relied on the access going to the target.\n-     Further, it has been supperseeded by trust-read-only-sections\n+     Further, it has been superseeded by trust-read-only-sections\n      (although that should be superseeded by target_trust..._p()).  */\n   m_di.read_memory_func = read_memory_func;\n   m_di.arch = gdbarch_bfd_arch_info (gdbarch)->arch;"
    },
    {
      "sha": "528378231cd6cdb67b8022debafb5e17a3bc6df9",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -151,7 +151,7 @@ class dtrace_probe : public probe\n   struct dtrace_probe_arg *get_arg_by_number (unsigned n,\n \t\t\t\t\t      struct gdbarch *gdbarch);\n \n-  /* Build the GDB internal expressiosn that, once evaluated, will\n+  /* Build the GDB internal expression that, once evaluated, will\n      calculate the values of the arguments of the probe.  */\n   void build_arg_exprs (struct gdbarch *gdbarch);\n "
    },
    {
      "sha": "420c53f397406c7c9eef70825d8216a6231df8c9",
      "filename": "gdb/dwarf-index-write.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dwarf-index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dwarf-index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf-index-write.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -57,7 +57,7 @@\n     GDB_INDEX_SYMBOL_KIND_SET_VALUE((cu_index), (value)); \\\n   } while (0)\n \n-/* Ensure we don't use more than the alloted nuber of bits for the CU.  */\n+/* Ensure we don't use more than the allotted number of bits for the CU.  */\n #define DW2_GDB_INDEX_CU_SET_VALUE(cu_index, value) \\\n   do { \\\n     gdb_assert (((value) & ~GDB_INDEX_CU_MASK) == 0); \\\n@@ -257,7 +257,7 @@ add_index_entry (struct mapped_symtab *symtab, const char *name,\n      (which would allow us to avoid the duplication by only having to check\n      the last entry pushed), but a symbol could have multiple kinds in one CU.\n      To keep things simple we don't worry about the duplication here and\n-     sort and uniqufy the list after we've processed all symbols.  */\n+     sort and uniquify the list after we've processed all symbols.  */\n   slot.cu_indices.push_back (cu_index_and_attrs);\n }\n "
    },
    {
      "sha": "1b614ad8f1a8d8bc989bd85601d2480b5417af79",
      "filename": "gdb/dwarf2-frame-tailcall.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dwarf2-frame-tailcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dwarf2-frame-tailcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame-tailcall.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -45,7 +45,7 @@ struct tailcall_cache\n      tailcall_cache.  */\n   int refc;\n \n-  /* Associated found virtual taill call frames chain, it is never NULL.  */\n+  /* Associated found virtual tail call frames chain, it is never NULL.  */\n   struct call_site_chain *chain;\n \n   /* Cached pretended_chain_levels result.  */"
    },
    {
      "sha": "3c8f0a101840573549b0f3605b167d7c47328ff0",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1704,7 +1704,7 @@ bsearch_fde_cmp (const void *key, const void *element)\n }\n \n /* Find the FDE for *PC.  Return a pointer to the FDE, and store the\n-   inital location associated with it into *PC.  */\n+   initial location associated with it into *PC.  */\n \n static struct dwarf2_fde *\n dwarf2_frame_find_fde (CORE_ADDR *pc, CORE_ADDR *out_offset)"
    },
    {
      "sha": "3a88c45af0c0a9c41e12bb6ea41a23113739e27d",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1375,7 +1375,7 @@ struct field_info\n     /* Number of fields (including baseclasses).  */\n     int nfields = 0;\n \n-    /* Set if the accesibility of one of the fields is not public.  */\n+    /* Set if the accessibility of one of the fields is not public.  */\n     int non_public_fields = 0;\n \n     /* Member function fieldlist array, contains name of possibly overloaded\n@@ -16751,7 +16751,7 @@ mark_common_block_symbol_computed (struct symbol *sym,\n /* Create appropriate locally-scoped variables for all the\n    DW_TAG_common_block entries.  Also create a struct common_block\n    listing all such variables for `info common'.  COMMON_BLOCK_DOMAIN\n-   is used to sepate the common blocks name namespace from regular\n+   is used to separate the common blocks name namespace from regular\n    variable names.  */\n \n static void\n@@ -17309,7 +17309,7 @@ prototyped_function_p (struct die_info *die, struct dwarf2_cu *cu)\n     return 1;\n \n   /* The DWARF standard implies that the DW_AT_prototyped attribute\n-     is only meaninful for C, but the concept also extends to other\n+     is only meaningful for C, but the concept also extends to other\n      languages that allow unprototyped functions (Eg: Objective C).\n      For all other languages, assume that functions are always\n      prototyped.  */\n@@ -18039,7 +18039,7 @@ read_unspecified_type (struct die_info *die, struct dwarf2_cu *cu)\n   TYPE_NAME (type) = dwarf2_name (die, cu);\n \n   /* In Ada, an unspecified type is typically used when the description\n-     of the type is defered to a different unit.  When encountering\n+     of the type is deferred to a different unit.  When encountering\n      such a type, we treat it as a stub, and try to resolve it later on,\n      when needed.  */\n   if (cu->language == language_ada)\n@@ -20199,7 +20199,7 @@ dwarf2_string_attr (struct die_info *die, unsigned int name, struct dwarf2_cu *c\n }\n \n /* Return the dwo name or NULL if not present. If present, it is in either\n-   DW_AT_GNU_dwo_name or DW_AT_dwo_name atrribute.  */\n+   DW_AT_GNU_dwo_name or DW_AT_dwo_name attribute.  */\n static const char *\n dwarf2_dwo_name (struct die_info *die, struct dwarf2_cu *cu)\n {\n@@ -25622,7 +25622,7 @@ per_cu_offset_and_type_eq (const void *item_lhs, const void *item_rhs)\n    table if necessary.  For convenience, return TYPE.\n \n    The DIEs reading must have careful ordering to:\n-    * Not cause infite loops trying to read in DIEs as a prerequisite for\n+    * Not cause infinite loops trying to read in DIEs as a prerequisite for\n       reading current DIE.\n     * Not trying to dereference contents of still incompletely read in types\n       while reading in other DIEs."
    },
    {
      "sha": "75d090fe9a5cd14d7b0cff12f62fd85662444ec8",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -418,7 +418,7 @@ unop_promote (const struct language_defn *language, struct gdbarch *gdbarch,\n \t{\n \tdefault:\n \t  /* Perform integral promotion for ANSI C/C++.\n-\t     If not appropropriate for any particular language\n+\t     If not appropriate for any particular language\n \t     it needs to modify this function.  */\n \t  {\n \t    struct type *builtin_int = builtin_type (gdbarch)->builtin_int;\n@@ -3219,7 +3219,7 @@ evaluate_subexp_for_sizeof (struct expression *exp, int *pos,\n \n       /* Deal with the special case if NOSIDE is EVAL_NORMAL and the resulting\n \t type of the subscript is a variable length array type. In this case we\n-\t must re-evaluate the right hand side of the subcription to allow\n+\t must re-evaluate the right hand side of the subscription to allow\n \t side-effects. */\n     case BINOP_SUBSCRIPT:\n       if (noside == EVAL_NORMAL)"
    },
    {
      "sha": "1ab290c9903659e32c4affed192d797c554ea6e2",
      "filename": "gdb/exceptions.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exceptions.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -76,7 +76,7 @@ print_flush (void)\n static void\n print_exception (struct ui_file *file, const struct gdb_exception &e)\n {\n-  /* KLUGE: cagney/2005-01-13: Write the string out one line at a time\n+  /* KLUDGE: cagney/2005-01-13: Write the string out one line at a time\n      as that way the MI's behavior is preserved.  */\n   const char *start;\n   const char *end;"
    },
    {
      "sha": "1d097470fe4698ddb104af4dcf5941ae08572cbe",
      "filename": "gdb/fbsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -101,7 +101,7 @@ enum\n    all architectures.\n \n    Note that FreeBSD 7.0 used an older version of this structure\n-   (struct kinfo_ovmentry), but the NT_FREEBSD_PROCSTAT_VMMAP core\n+   (struct kinfo_vmentry), but the NT_FREEBSD_PROCSTAT_VMMAP core\n    dump note wasn't introduced until FreeBSD 9.2.  As a result, the\n    core dump note has always used the 7.1 and later structure\n    format.  */"
    },
    {
      "sha": "bbfd68995d367ef52cfff76ce3933dbbdafb1497",
      "filename": "gdb/findvar.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/findvar.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/findvar.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/findvar.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -446,7 +446,7 @@ follow_static_link (struct frame_info *frame,\n       QUIT;\n \n       /* If we don't know how to compute FRAME's base address, don't give up:\n-\t maybe the frame we are looking for is upper in the stace frame.  */\n+\t maybe the frame we are looking for is upper in the stack frame.  */\n       if (framefunc != NULL\n \t  && SYMBOL_BLOCK_OPS (framefunc) != NULL\n \t  && SYMBOL_BLOCK_OPS (framefunc)->get_frame_base != NULL"
    },
    {
      "sha": "3ebdc99e9ff7459e6544ee1db9509685e4c0633a",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -746,7 +746,7 @@ frame_id_eq (struct frame_id l, struct frame_id r)\n        if special addresses are different, the frames are different.  */\n     eq = 0;\n   else if (l.artificial_depth != r.artificial_depth)\n-    /* If artifical depths are different, the frames must be different.  */\n+    /* If artificial depths are different, the frames must be different.  */\n     eq = 0;\n   else\n     /* Frames are equal.  */"
    },
    {
      "sha": "866b9e9b6ce2a79ade7a58342e0edb0f57c1e3d6",
      "filename": "gdb/frv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/frv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/frv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frv-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -524,7 +524,7 @@ frv_analyze_prologue (struct gdbarch *gdbarch, CORE_ADDR pc,\n      J - The register number of GRj in the instruction description.\n      K - The register number of GRk in the instruction description.\n      I - The register number of GRi.\n-     S - a signed imediate offset.\n+     S - a signed immediate offset.\n      U - an unsigned immediate offset.\n \n      The dots below the numbers indicate where hex digit boundaries"
    },
    {
      "sha": "2533a948649eb00584659f109a45c60890abc301",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -393,7 +393,7 @@ gnuv3_get_virtual_fn (struct gdbarch *gdbarch, struct value *container,\n   /* If this architecture uses function descriptors directly in the vtable,\n      then the address of the vtable entry is actually a \"function pointer\"\n      (i.e. points to the descriptor).  We don't need to scale the index\n-     by the size of a function descriptor; GCC does that before outputing\n+     by the size of a function descriptor; GCC does that before outputting\n      debug information.  */\n   if (gdbarch_vtable_function_descriptors (gdbarch))\n     vfn = value_addr (vfn);"
    },
    {
      "sha": "8c71bd7650fc01322d0d86fb49fa7c411ddca2a6",
      "filename": "gdb/go32-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/go32-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/go32-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go32-nat.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1877,13 +1877,13 @@ get_cr3 (void)\n   cr3 = _farnspeekl (taskbase + 0x1c) & ~0xfff;\n   if (cr3 > 0xfffff)\n     {\n-#if 0  /* Not fullly supported yet.  */\n+#if 0  /* Not fully supported yet.  */\n       /* The Page Directory is in UMBs.  In that case, CWSDPMI puts\n \t the first Page Table right below the Page Directory.  Thus,\n \t the first Page Table's entry for its own address and the Page\n \t Directory entry for that Page Table will hold the same\n \t physical address.  The loop below searches the entire UMB\n-\t range of addresses for such an occurence.  */\n+\t range of addresses for such an occurrence.  */\n       unsigned long addr, pte_idx;\n \n       for (addr = 0xb0000, pte_idx = 0xb0;"
    },
    {
      "sha": "d8801197c3ca1ae554a7c16a90e6aa7a86291a3c",
      "filename": "gdb/h8300-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/h8300-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/h8300-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/h8300-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1343,7 +1343,7 @@ h8300_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   frame_base_set_default (gdbarch, &h8300_frame_base);\n \n   /* \n-   * Miscelany\n+   * Miscellany\n    */\n   /* Stack grows up.  */\n   set_gdbarch_inner_than (gdbarch, core_addr_lessthan);"
    },
    {
      "sha": "ae1554af0a97c753c8098bdf23370984b17f9b57",
      "filename": "gdb/hppa-tdep.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/hppa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/hppa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -367,7 +367,7 @@ read_unwind_info (struct objfile *objfile)\n \n   /* For reasons unknown the HP PA64 tools generate multiple unwinder\n      sections in a single executable.  So we just iterate over every\n-     section in the BFD looking for unwinder sections intead of trying\n+     section in the BFD looking for unwinder sections instead of trying\n      to do a lookup with bfd_get_section_by_name.\n \n      First determine the total size of the unwind tables so that we\n@@ -1182,7 +1182,7 @@ hppa64_return_value (struct gdbarch *gdbarch, struct value *function,\n \n   if (len > 16)\n     {\n-      /* All return values larget than 128 bits must be aggregate\n+      /* All return values larger than 128 bits must be aggregate\n          return values.  */\n       gdb_assert (!hppa64_integral_or_pointer_p (type));\n       gdb_assert (!hppa64_floating_p (type));\n@@ -1431,7 +1431,7 @@ is_branch (unsigned long inst)\n     - stw: 0x1a, store a word from a general register.\n \n     - stwm: 0x1b, store a word from a general register and perform base\n-      register modification (2.0 will still treate it as stw).\n+      register modification (2.0 will still treat it as stw).\n \n     - std: 0x1c, store a doubleword from a general register (2.0 only).\n \n@@ -1592,7 +1592,7 @@ skip_prologue_hard_way (struct gdbarch *gdbarch, CORE_ADDR pc,\n      For unoptimized GCC code and for any HP CC code this will never ever\n      examine any user instructions.\n \n-     For optimzied GCC code we're faced with problems.  GCC will schedule\n+     For optimized GCC code we're faced with problems.  GCC will schedule\n      its prologue and make prologue instructions available for delay slot\n      filling.  The end result is user code gets mixed in with the prologue\n      and a prologue instruction may be in the delay slot of the first branch\n@@ -1759,7 +1759,7 @@ skip_prologue_hard_way (struct gdbarch *gdbarch, CORE_ADDR pc,\n \tfinal_iteration = 1;\n     }\n \n-  /* We've got a tenative location for the end of the prologue.  However\n+  /* We've got a tentative location for the end of the prologue.  However\n      because of limitations in the unwind descriptor mechanism we may\n      have went too far into user code looking for the save of a register\n      that does not exist.  So, if there registers we expected to be saved\n@@ -2869,7 +2869,7 @@ hppa_match_insns (struct gdbarch *gdbarch, CORE_ADDR pc,\n   return 1;\n }\n \n-/* This relaxed version of the insstruction matcher allows us to match\n+/* This relaxed version of the instruction matcher allows us to match\n    from somewhere inside the pattern, by looking backwards in the\n    instruction scheme.  */\n "
    },
    {
      "sha": "0f10686bc0145804cc470fc6aa6b074c9a2d42b7",
      "filename": "gdb/i386-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/i386-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/i386-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-linux-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1035,7 +1035,7 @@ i386_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   tdep->i386_sysenter_record = i386_linux_intx80_sysenter_syscall_record;\n   tdep->i386_syscall_record = i386_linux_intx80_sysenter_syscall_record;\n \n-  /* N_FUN symbols in shared libaries have 0 for their values and need\n+  /* N_FUN symbols in shared libraries have 0 for their values and need\n      to be relocated.  */\n   set_gdbarch_sofun_address_maybe_missing (gdbarch, 1);\n "
    },
    {
      "sha": "ef2a9a7986e6e394bce99a1f7096c67dcceabb04",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1505,7 +1505,7 @@ struct i386_insn i386_frame_setup_skip_insns[] =\n   /* Check for `mov imm32, r32'.  Note that there is an alternative\n      encoding for `mov m32, %eax'.\n \n-     ??? Should we handle SIB adressing here?\n+     ??? Should we handle SIB addressing here?\n      ??? Should we handle 16-bit operand-sizes here?  */\n \n   /* `movl m32, %eax' */"
    },
    {
      "sha": "9efe637c37a8b0925ca7412fa24444f5447b393e",
      "filename": "gdb/ia64-libunwind-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ia64-libunwind-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ia64-libunwind-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-libunwind-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -197,7 +197,7 @@ libunwind_frame_cache (struct frame_info *this_frame, void **this_cache)\n        The best we can do, in that case, is use the frame PC as the function\n        address.  We don't need to give up since we still have the unwind\n        record to help us perform the unwinding.  There is also another\n-       compelling to continue, because abandonning now means stopping\n+       compelling to continue, because abandoning now means stopping\n        the backtrace, which can never be helpful for the user.  */\n     cache->func_addr = get_frame_pc (this_frame);\n "
    },
    {
      "sha": "ceaf69eae563373c39e5b21ba352faafb0bc8398",
      "filename": "gdb/ia64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ia64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ia64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -707,7 +707,7 @@ ia64_memory_insert_breakpoint (struct gdbarch *gdbarch,\n   if (val != 0)\n     return val;\n \n-  /* Breakpoints already present in the code will get deteacted and not get\n+  /* Breakpoints already present in the code will get detected and not get\n      reinserted by bp_loc_is_permanent.  Multiple breakpoints at the same\n      location cannot induce the internal error as they are optimized into\n      a single instance by update_global_location_list.  */"
    },
    {
      "sha": "465d3a10e5952be82b5776e13615c38679a8eebb",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -2079,7 +2079,7 @@ set_environment_command (const char *arg, int from_tty)\n   if (arg == 0)\n     error_no_arg (_(\"environment variable and value\"));\n \n-  /* Find seperation between variable name and value.  */\n+  /* Find separation between variable name and value.  */\n   p = (char *) strchr (arg, '=');\n   val = (char *) strchr (arg, ' ');\n \n@@ -3026,7 +3026,7 @@ info_proc_cmd_1 (const char *args, enum info_proc_what what, int from_tty)\n     }\n }\n \n-/* Implement `info proc' when given without any futher parameters.  */\n+/* Implement `info proc' when given without any further parameters.  */\n \n static void\n info_proc_cmd (const char *args, int from_tty)"
    },
    {
      "sha": "66a066f91d69dc3889d3f6183e6b8a2c938edcd4",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1104,7 +1104,7 @@ follow_exec (ptid_t ptid, const char *exec_file_target)\n \n      And, we DON'T want to call delete_breakpoints() here, since\n      that may write the bp's \"shadow contents\" (the instruction\n-     value that was overwritten witha TRAP instruction).  Since\n+     value that was overwritten with a TRAP instruction).  Since\n      we now have a new a.out, those shadow contents aren't valid.  */\n \n   mark_breakpoints_out ();\n@@ -1429,7 +1429,7 @@ step_over_info_valid_p (void)\n      register contents, and memory.  We use this in step n1.\n \n    - gdbarch_displaced_step_fixup adjusts registers and memory after\n-     we have successfuly single-stepped the instruction, to yield the\n+     we have successfully single-stepped the instruction, to yield the\n      same effect the instruction would have had if we had executed it\n      at its original address.  We use this in step n3.\n \n@@ -5922,7 +5922,7 @@ handle_signal_stop (struct execution_control_state *ecs)\n \t  return;\n \t}\n \n-      /* Note: step_resume_breakpoint may be non-NULL.  This occures\n+      /* Note: step_resume_breakpoint may be non-NULL.  This occurs\n \t when either there's a nested signal, or when there's a\n \t pending signal enabled just as the signal handler returns\n \t (leaving the inferior at the step-resume-breakpoint without"
    },
    {
      "sha": "fdbb670ed79b116a52423cbed587cb4b77414844",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -3331,7 +3331,7 @@ decode_line_with_last_displayed (const char *string, int flags)\n \n \f\n \n-/* First, some functions to initialize stuff at the beggining of the\n+/* First, some functions to initialize stuff at the beginning of the\n    function.  */\n \n static void"
    },
    {
      "sha": "22e830391be3690fbea24d25e499835d6b53444a",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -3306,7 +3306,7 @@ linux_nat_wait_1 (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t - If the thread group leader exits while other threads in the\n \t   thread group still exist, waitpid(TGID, ...) hangs.  That\n \t   waitpid won't return an exit status until the other threads\n-\t   in the group are reapped.\n+\t   in the group are reaped.\n \n \t - When a non-leader thread execs, that thread just vanishes\n \t   without reporting an exit (so we'd hang if we waited for it"
    },
    {
      "sha": "9b1a3a5c24566ec3196753d90dedd78245400158",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -116,7 +116,7 @@ static char *libthread_db_search_path;\n static bool auto_load_thread_db = true;\n \n /* Set to true if load-time libthread_db tests have been enabled\n-   by the \"maintenence set check-libthread-db\" command.  */\n+   by the \"maintenance set check-libthread-db\" command.  */\n static bool check_thread_db_on_load = false;\n \n /* \"show\" command for the auto_load_thread_db configuration variable.  */"
    },
    {
      "sha": "26eac27a049c035b524d200a45d2cc66235887cd",
      "filename": "gdb/machoread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/machoread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/machoread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/machoread.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -588,7 +588,7 @@ macho_add_oso_symfile (oso_el *oso, const gdb_bfd_ref_ptr &abfd,\n \n   bfd_hash_table_free (&table);\n \n-  /* We need to clear SYMFILE_MAINLINE to avoid interractive question\n+  /* We need to clear SYMFILE_MAINLINE to avoid interactive question\n      from symfile.c:symbol_file_add_with_addrs_or_offsets.  */\n   symbol_file_add_from_bfd\n     (abfd.get (), name, symfile_flags & ~(SYMFILE_MAINLINE | SYMFILE_VERBOSE),"
    },
    {
      "sha": "557d0e4817a0cb39ce0cd0ca20135bfc0930360c",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1993,7 +1993,7 @@ parse_procedure (PDR *pr, struct compunit_symtab *search_symtab,\n       s = new_symbol (sh_name);\n       SYMBOL_DOMAIN (s) = VAR_DOMAIN;\n       SYMBOL_CLASS (s) = LOC_BLOCK;\n-      /* Donno its type, hope int is ok.  */\n+      /* Don't know its type, hope int is ok.  */\n       SYMBOL_TYPE (s)\n \t= lookup_function_type (objfile_type (pst->objfile)->builtin_int);\n       add_symbol (s, top_stack->cur_st, top_stack->cur_block);\n@@ -2442,7 +2442,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n      (inefficient; \n      assumes no side-effects result from ignoring ECOFF symbol)\n      3) create it, but lookup ELF's minimal symbol and use it's section\n-     during relocation, then modify \"uniqify\" phase to merge and \n+     during relocation, then modify \"uniquify\" phase to merge and\n      eliminate the duplicate symbol\n      (highly inefficient)\n \n@@ -3442,7 +3442,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \n \t\t  /* Usually there is a local and a global stProc symbol\n \t\t     for a function.  This means that the function name\n-\t\t     has already been entered into the mimimal symbol table\n+\t\t     has already been entered into the minimal symbol table\n \t\t     while processing the global symbols in pass 2 above.\n \t\t     One notable exception is the PROGRAM name from\n \t\t     f77 compiled executables, it is only put out as\n@@ -3861,7 +3861,7 @@ psymtab_to_symtab_1 (struct objfile *objfile,\n     return;\n   pst->readin = 1;\n \n-  /* Read in all partial symbtabs on which this one is dependent.\n+  /* Read in all partial symtabs on which this one is dependent.\n      NOTE that we do have circular dependencies, sigh.  We solved\n      that by setting pst->readin before this point.  */\n "
    },
    {
      "sha": "056b61a3b34a95a759c166ca94b1378d4a676677",
      "filename": "gdb/mep-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/mep-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/mep-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mep-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -284,7 +284,7 @@ me_module_register_set (CONFIG_ATTR me_module,\n \n /* Given a hardware table entry HW representing a register set, return\n    a pointer to the keyword table with all the register names.  If HW\n-   is NULL, return NULL, to propage the \"no such register set\" info\n+   is NULL, return NULL, to propagate the \"no such register set\" info\n    along.  */\n static CGEN_KEYWORD *\n register_set_keyword_table (const CGEN_HW_ENTRY *hw)"
    },
    {
      "sha": "bcb5b27e12f15cbcd98bac523b1768d3cf262f55",
      "filename": "gdb/mn10300-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/mn10300-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/mn10300-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mn10300-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -117,7 +117,7 @@ mn10300_type_align (struct type *type)\n \n     case TYPE_CODE_ARRAY:\n       /* HACK!  Structures containing arrays, even small ones, are not\n-\t elligible for returning in registers.  */\n+\t eligible for returning in registers.  */\n       return 256;\n \n     case TYPE_CODE_TYPEDEF:"
    },
    {
      "sha": "2ec5d5d1e95fc9066c7468f915a567c7d1ce5832",
      "filename": "gdb/namespace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/namespace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/namespace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/namespace.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -26,7 +26,7 @@\n    into the scope DEST.  ALIAS is the name of the imported namespace\n    in the current scope.  If ALIAS is NULL then the namespace is known\n    by its original name.  DECLARATION is the name if the imported\n-   varable if this is a declaration import (Eg. using A::x), otherwise\n+   variable if this is a declaration import (Eg. using A::x), otherwise\n    it is NULL.  EXCLUDES is a list of names not to import from an\n    imported module or NULL.  If COPY_NAMES is non-zero, then the\n    arguments are copied into newly allocated memory so they can be"
    },
    {
      "sha": "bae556a1ff0b56eca5ef1799da0f7365e34ee7cb",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1437,7 +1437,7 @@ shared_objfile_contains_address_p (struct program_space *pspace,\n    searching the objfiles in the order they are stored internally,\n    ignoring CURRENT_OBJFILE.\n \n-   On most platorms, it should be close enough to doing the best\n+   On most platforms, it should be close enough to doing the best\n    we can without some knowledge specific to the architecture.  */\n \n void"
    },
    {
      "sha": "80d7ec96bc2bbba906f9ae12cf9a7ccc4d59fddf",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -820,7 +820,7 @@ evaluate_subexp_opencl (struct type *expect_type, struct expression *exp,\n       else\n \t{\n \t  /* For scalar operations we need to avoid evaluating operands\n-\t     unecessarily.  However, for vector operations we always need to\n+\t     unnecessarily.  However, for vector operations we always need to\n \t     evaluate both operands.  Unfortunately we only know which of the\n \t     two cases apply after we know the type of the second operand.\n \t     Therefore we evaluate it once using EVAL_AVOID_SIDE_EFFECTS.  */"
    },
    {
      "sha": "fdeab815a10c0ee83e54e610bcae28cbc2e7c13a",
      "filename": "gdb/or1k-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/or1k-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/or1k-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/or1k-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -824,7 +824,7 @@ or1k_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n \n    l.sw    lr_loc(r1),r9        # Link (return) address\n \n-   The link register is usally saved at fp_loc - 4.  It may not be saved at\n+   The link register is usually saved at fp_loc - 4.  It may not be saved at\n    all in a leaf function.\n \n    l.sw    reg_loc(r1),ry       # Save any callee saved regs"
    },
    {
      "sha": "05bf4cbfb20a3f085a1d76648bcf041b2af01859",
      "filename": "gdb/osabi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/osabi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/osabi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/osabi.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -346,7 +346,7 @@ gdbarch_init_osabi (struct gdbarch_info info, struct gdbarch *gdbarch)\n \tcontinue;\n \n       /* If the architecture described by ARCH_INFO can run code for\n-\t the architcture we registered the handler for, then the\n+\t the architecture we registered the handler for, then the\n \t handler is applicable.  Note, though, that if the handler is\n \t for an architecture that is a superset of ARCH_INFO, we can't\n \t use that --- it would be perfectly correct for it to install"
    },
    {
      "sha": "532813d136f89ad5b3d271e09afeb90d1c8f67ce",
      "filename": "gdb/ppc-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ppc-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ppc-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-nat.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1085,7 +1085,7 @@ store_altivec_registers (const struct regcache *regcache, int tid,\n     perror_with_name (_(\"Unable to store AltiVec registers\"));\n }\n \n-/* Assuming TID referrs to an SPE process, set the top halves of TID's\n+/* Assuming TID refers to an SPE process, set the top halves of TID's\n    general-purpose registers and its SPE-specific registers to the\n    values in EVRREGSET.  If we don't support PTRACE_SETEVRREGS, do\n    nothing."
    },
    {
      "sha": "5a70852fa4a4392f11c98e41fbaad8368ddd2eb4",
      "filename": "gdb/ppc-linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ppc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ppc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1367,7 +1367,7 @@ static struct linux_record_tdep ppc64_linux_record_tdep;\n    syscall ids into a canonical set of syscall ids used by process\n    record.  (See arch/powerpc/include/uapi/asm/unistd.h in kernel tree.)\n    Return -1 if this system call is not supported by process record.\n-   Otherwise, return the syscall number for preocess reocrd of given\n+   Otherwise, return the syscall number for process record of given\n    SYSCALL.  */\n \n static enum gdb_syscall\n@@ -2159,7 +2159,7 @@ ppc_linux_init_abi (struct gdbarch_info info,\n void\n _initialize_ppc_linux_tdep (void)\n {\n-  /* Register for all sub-familes of the POWER/PowerPC: 32-bit and\n+  /* Register for all sub-families of the POWER/PowerPC: 32-bit and\n      64-bit PowerPC, and the older rs6k.  */\n   gdbarch_register_osabi (bfd_arch_powerpc, bfd_mach_ppc, GDB_OSABI_LINUX,\n                          ppc_linux_init_abi);"
    },
    {
      "sha": "2a732d09259242d469c09953be81763cb5b424db",
      "filename": "gdb/ppc-sysv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ppc-sysv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ppc-sysv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-sysv-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -55,7 +55,7 @@ ppc_sysv_use_opencl_abi (struct type *ftype)\n    are passed in user stack.\n \n    If the function is returning a structure, then the return address is passed\n-   in r3, then the first 7 words of the parametes can be passed in registers,\n+   in r3, then the first 7 words of the parameters can be passed in registers,\n    starting from r4.  */\n \n CORE_ADDR"
    },
    {
      "sha": "27aaf7a076a1e3c62b5aa095ffc662e755604ec9",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -2126,7 +2126,7 @@ do_enable_disable_display (struct display *d, void *data)\n   d->enabled_p = *(int *) data;\n }\n \n-/* Implamentation of both the \"disable display\" and \"enable display\"\n+/* Implementation of both the \"disable display\" and \"enable display\"\n    commands.  ENABLE decides what to do.  */\n \n static void"
    },
    {
      "sha": "57d4b8f0bfbbdeb3ee3f8593f8e83114011f8a70",
      "filename": "gdb/procfs.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/procfs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/procfs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/procfs.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -385,7 +385,7 @@ open_procinfo_files (procinfo *pi, int which)\n      several.  Here is some rationale:\n \n      There are several file descriptors that may need to be open\n-       for any given process or LWP.  The ones we're intereted in are:\n+       for any given process or LWP.  The ones we're interested in are:\n \t - control\t (ctl)\t  write-only\tchange the state\n \t - status\t (status) read-only\tquery the state\n \t - address space (as)\t  read/write\taccess memory\n@@ -838,7 +838,7 @@ proc_unset_run_on_last_close (procinfo *pi)\n }\n \n /* Reset inherit_on_fork flag.  If the process forks a child while we\n-   are registered for events in the parent, then we will NOT recieve\n+   are registered for events in the parent, then we will NOT receive\n    events from the child.  Returns non-zero for success, zero for\n    failure.  */\n \n@@ -2591,7 +2591,7 @@ procfs_xfer_memory (gdb_byte *readbuf, const gdb_byte *writebuf,\n    File descriptors are also cached.  As they are a limited resource,\n    we cannot hold onto them indefinitely.  However, as they are\n    expensive to open, we don't want to throw them away\n-   indescriminately either.  As a compromise, we will keep the file\n+   indiscriminately either.  As a compromise, we will keep the file\n    descriptors for the parent process, but discard any file\n    descriptors we may have accumulated for the threads.\n "
    },
    {
      "sha": "1171fa9ca509c5868367c075955518c6fa9cb475",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1972,7 +1972,7 @@ get_thread_current_frame_id (struct thread_info *tp)\n      For the latter, EXECUTING is false and this has no effect.\n      For the former, EXECUTING is true and we're in wait, about to\n      move the thread.  Since we need to recompute the stack, we temporarily\n-     set EXECUTING to flase.  */\n+     set EXECUTING to false.  */\n   executing = tp->executing;\n   set_executing (inferior_ptid, false);\n "
    },
    {
      "sha": "a940274f28e9e72c13413b3d041f8eec94422801",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1359,7 +1359,7 @@ record_full_wait_1 (struct target_ops *ops,\n \t\t  if (first_record_full_end\n \t\t      && execution_direction == EXEC_REVERSE)\n \t\t    {\n-\t\t      /* When reverse excute, the first\n+\t\t      /* When reverse execute, the first\n \t\t\t record_full_end is the part of current\n \t\t\t instruction.  */\n \t\t      first_record_full_end = 0;"
    },
    {
      "sha": "bc7c71ffdd47134c0441eee22d556883c9c0b5db",
      "filename": "gdb/remote-fileio.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/remote-fileio.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/remote-fileio.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-fileio.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1076,7 +1076,7 @@ remote_fileio_func_system (remote_target *remote, char *buf)\n \t}\n     }\n   \n-  /* Check if system(3) has been explicitely allowed using the\n+  /* Check if system(3) has been explicitly allowed using the\n      `set remote system-call-allowed 1' command.  If length is 0,\n      indicating a NULL parameter to the system call, return zero to\n      indicate a shell is not available.  Otherwise fail with EPERM.  */"
    },
    {
      "sha": "5e1745db44e2b45d24b0fa136c798763945d211d",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1523,7 +1523,7 @@ show_remotebreak (struct ui_file *file, int from_tty,\n    memory packets to ``host::sizeof long'' bytes - (typically 32\n    bits).  Consequently, for 64 bit targets, the upper 32 bits of an\n    address was never sent.  Since fixing this bug may cause a break in\n-   some remote targets this variable is principly provided to\n+   some remote targets this variable is principally provided to\n    facilitate backward compatibility.  */\n \n static unsigned int remote_address_size;\n@@ -1864,7 +1864,7 @@ packet_check_result (const char *buf)\n       if (buf[0] == 'E'\n \t  && isxdigit (buf[1]) && isxdigit (buf[2])\n \t  && buf[3] == '\\0')\n-\t/* \"Enn\"  - definitly an error.  */\n+\t/* \"Enn\"  - definitely an error.  */\n \treturn PACKET_ERROR;\n \n       /* Always treat \"E.\" as an error.  This will be used for\n@@ -7536,7 +7536,7 @@ Packet: '%s'\\n\"),\n       <GDB marks the REMOTE_ASYNC_GET_PENDING_EVENTS_TOKEN>\n     2.5) <-- (registers reply to step #2.3)\n \n-   Eventualy after step #2.5, we return to the event loop, which\n+   Eventually after step #2.5, we return to the event loop, which\n    notices there's an event on the\n    REMOTE_ASYNC_GET_PENDING_EVENTS_TOKEN event and calls the\n    associated callback --- the function below.  At this point, we're"
    },
    {
      "sha": "33cdc788117468cb03980502f035839d029388de",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1234,7 +1234,7 @@ store_insn_p (unsigned long op, unsigned long rs,\n    this masking operation is equal to BL_INSTRUCTION, then the opcode in\n    question is a ``bl'' instruction.\n    \n-   BL_DISPLACMENT_MASK is anded with the opcode in order to extract\n+   BL_DISPLACEMENT_MASK is anded with the opcode in order to extract\n    the branch displacement.  */\n \n #define BL_MASK 0xfc000001"
    },
    {
      "sha": "1f3a9e2053f5b550c52d21645101679e03eb6e34",
      "filename": "gdb/s12z-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/s12z-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/s12z-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s12z-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -170,7 +170,7 @@ struct mem_read_abstraction\n {\n   struct mem_read_abstraction_base base; /* The parent struct.  */\n   bfd_vma memaddr;                  /* Where to read from.  */\n-  struct disassemble_info* info;  /* The disassember  to use for reading.  */\n+  struct disassemble_info* info;  /* The disassembler  to use for reading.  */\n };\n \n /* Advance the reader by one byte.  */\n@@ -676,7 +676,7 @@ s12z_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   set_gdbarch_register_type (gdbarch, s12z_register_type);\n \n   frame_unwind_append_unwinder (gdbarch, &s12z_frame_unwind);\n-  /* Currently, the only known producer for this archtecture, produces buggy\n+  /* Currently, the only known producer for this architecture, produces buggy\n      dwarf CFI.   So don't append a dwarf unwinder until the situation is\n      better understood.  */\n "
    },
    {
      "sha": "5ca763c40f42735bbe402c57c76f7744e09ce2ec",
      "filename": "gdb/score-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/score-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/score-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/score-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -870,7 +870,7 @@ score7_analyze_prologue (CORE_ADDR startaddr, CORE_ADDR pc,\n       inst_t *inst = NULL;\n       if (memblock != NULL)\n         {\n-          /* Reading memory block from target succefully and got all\n+          /* Reading memory block from target successfully and got all\n              the instructions(from STARTADDR to PC) needed.  */\n           score7_adjust_memblock_ptr (&memblock, prev_pc, cur_pc);\n           inst = score7_fetch_inst (gdbarch, cur_pc, memblock);"
    },
    {
      "sha": "f7e76ce575096b1d0864f55c92db83e5f455a1b6",
      "filename": "gdb/ser-base.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ser-base.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ser-base.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ser-base.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -46,7 +46,7 @@ enum {\n   /* >= 0 (TIMER_SCHEDULED) */\n   /* The ID of the currently scheduled timer event.  This state is\n      rarely encountered.  Timer events are one-off so as soon as the\n-     event is delivered the state is shanged to NOTHING_SCHEDULED.  */\n+     event is delivered the state is changed to NOTHING_SCHEDULED.  */\n   FD_SCHEDULED = -1,\n   /* The fd_event() handler is scheduled.  It is called when ever the\n      file descriptor becomes ready.  */\n@@ -191,7 +191,7 @@ fd_event (int error, void *context)\n /* PUSH_EVENT: The input FIFO is non-empty (or there is a pending\n    error).  Nag the client until all the data has been read.  In the\n    case of errors, the client will need to close or de-async the\n-   device before naging stops.  */\n+   device before nagging stops.  */\n \n static void\n push_event (void *context)"
    },
    {
      "sha": "27d7c08575df4913f0ab8054af1b4f71b7ff0383",
      "filename": "gdb/ser-go32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ser-go32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/ser-go32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ser-go32.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -655,7 +655,7 @@ dos_get_tty_state (struct serial *scb)\n       /* We've never heard about this port.  We should fail this call,\n \t unless they are asking about one of the 3 standard handles,\n \t in which case we pretend the handle was open by us if it is\n-\t connected to a terminal device.  This is beacuse Unix\n+\t connected to a terminal device.  This is because Unix\n \t terminals use the serial interface, so GDB expects the\n \t standard handles to go through here.  */\n       if (scb->fd >= 3 || !isatty (scb->fd))"
    },
    {
      "sha": "a869aaafcd32df682146532e2abbc69f2fcfb194",
      "filename": "gdb/skip.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/skip.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/skip.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/skip.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -179,7 +179,7 @@ skip_file_command (const char *arg, int from_tty)\n       if (symtab == NULL)\n \terror (_(\"No default file now.\"));\n \n-      /* It is not a typo, symtab_to_filename_for_display woule be needlessly\n+      /* It is not a typo, symtab_to_filename_for_display would be needlessly\n \t ambiguous.  */\n       filename = symtab_to_fullname (symtab);\n     }"
    },
    {
      "sha": "f723bd5443433b316159c5eb79f30800975217ab",
      "filename": "gdb/sol-thread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/sol-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/sol-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sol-thread.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -391,7 +391,7 @@ sol_thread_target::detach (inferior *inf, int from_tty)\n   beneath->detach (inf, from_tty);\n }\n \n-/* Resume execution of process PTID.  If STEP is nozero, then just\n+/* Resume execution of process PTID.  If STEP is nonzero, then just\n    single step it.  If SIGNAL is nonzero, restart it with that signal\n    activated.  We may have to convert PTID from a thread ID to an LWP\n    ID for procfs.  */"
    },
    {
      "sha": "27299ffca05d347076884d14e7ee2a410334c5ef",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -2515,7 +2515,7 @@ read_program_headers_from_bfd (bfd *abfd)\n      ...  Though the system chooses virtual addresses for\n      individual processes, it maintains the segments' relative\n      positions.  Because position-independent code uses relative\n-     addressesing between segments, the difference between\n+     addressing between segments, the difference between\n      virtual addresses in memory must match the difference\n      between virtual addresses in the file.  The difference\n      between the virtual address of any segment in memory and\n@@ -3139,7 +3139,7 @@ svr4_have_link_map_offsets (void)\n \n /* Most OS'es that have SVR4-style ELF dynamic libraries define a\n    `struct r_debug' and a `struct link_map' that are binary compatible\n-   with the origional SVR4 implementation.  */\n+   with the original SVR4 implementation.  */\n \n /* Fetch (and possibly build) an appropriate `struct link_map_offsets'\n    for an ILP32 SVR4 system.  */"
    },
    {
      "sha": "17d0c4cea21139be9bc3d158a606bcd398a7e44a",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -144,7 +144,7 @@ show_solib_search_path (struct ui_file *file, int from_tty,\n    *   If IS_SOLIB is non-zero:\n    *     Look in inferior's $LD_LIBRARY_PATH.\n    *\n-   * The last check avoids doing this search when targetting remote\n+   * The last check avoids doing this search when targeting remote\n    * machines since a sysroot will almost always be set.\n */\n "
    },
    {
      "sha": "9f53d654f36f1abd9fc00d2348ba1c671ad7c9c7",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1115,7 +1115,7 @@ find_and_open_source (const char *filename,\n /* Open a source file given a symtab S.  Returns a file descriptor or\n    negative number for error.  \n    \n-   This function is a convience function to find_and_open_source.  */\n+   This function is a convenience function to find_and_open_source.  */\n \n scoped_fd\n open_source_file (struct symtab *s)"
    },
    {
      "sha": "0905c57438aaf8254c03ad029d1e6971253a5f39",
      "filename": "gdb/sparc-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/sparc-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/sparc-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-nat.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -149,7 +149,7 @@ sparc_fetch_inferior_registers (struct regcache *regcache, int regnum)\n      belong to the selected thread (the LWP could be in the middle of\n      executing the thread switch code).\n \n-     These functions should instead be paramaterized with an explicit\n+     These functions should instead be parameterized with an explicit\n      object (struct regcache, struct thread_info?) into which the LWPs\n      registers can be written.  */\n   pid = get_ptrace_pid (regcache->ptid ());"
    },
    {
      "sha": "89755a19c9222142a436c285e5cd455d0a1617c3",
      "filename": "gdb/sparc-sol2-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/sparc-sol2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/sparc-sol2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-sol2-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -234,7 +234,7 @@ sparc_sol2_static_transform_name (const char *name)\n      globalization prefix is followed by the function name (nested\n      static variables within a function are supposed to generate a\n      warning message, and are left alone).  The procedure is\n-     documented in the Stabs Interface Manual, which is distrubuted\n+     documented in the Stabs Interface Manual, which is distributed\n      with the compilers, although version 4.0 of the manual seems to\n      be incorrect in some places, at least for SPARC.  The\n      globalization prefix is encoded into an N_OPT stab, with the form"
    },
    {
      "sha": "0a816e413de5dfd50199d71d278c3cbbd093676e",
      "filename": "gdb/sparc-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/sparc-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/sparc-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1687,7 +1687,7 @@ sparc_analyze_control_transfer (struct regcache *regcache,\n       if (fused_p)\n \t{\n \t  /* Fused compare-and-branch instructions are non-delayed,\n-\t     and do not have an annuling capability.  So we need to\n+\t     and do not have an annulling capability.  So we need to\n \t     always set a breakpoint on both the NPC and the branch\n \t     target address.  */\n \t  gdb_assert (offset != 0);"
    },
    {
      "sha": "fa55fcb818c39f827357d89e6f01cc9de9406c8b",
      "filename": "gdb/sparc64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/sparc64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/sparc64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1463,7 +1463,7 @@ sparc64_store_arguments (struct regcache *regcache, int nargs,\n   /* The psABI says that \"Every stack frame must be 16-byte aligned.\"  */\n   sp &= ~0xf;\n \n-  /* Now we store the arguments in to the \"paramater array\".  Some\n+  /* Now we store the arguments in to the \"parameter array\".  Some\n      Integer or Pointer arguments and Structure or Union arguments\n      will be passed in %o registers.  Some Floating arguments and\n      floating members of structures are passed in floating-point"
    },
    {
      "sha": "2896d98f40d0251cca90af7b2d5ab1b93294996a",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -3890,7 +3890,7 @@ read_huge_number (const char **pp, int end, int *bits,\n \t      && len == twos_complement_bits / 3))\n \t{\n \t  /* Ok, we have enough characters for a signed value, check\n-\t     for signness by testing if the sign bit is set.  */\n+\t     for signedness by testing if the sign bit is set.  */\n \t  sign_bit = (twos_complement_bits % 3 + 2) % 3;\n \t  c = *p - '0';\n \t  if (c & (1 << sign_bit))"
    },
    {
      "sha": "fa057db6e356b7281be4cf60449855120986e110",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -297,7 +297,7 @@ print_stack_frame (struct frame_info *frame, int print_level,\n \t\t   int set_current_sal)\n {\n \n-  /* For mi, alway print location and address.  */\n+  /* For mi, always print location and address.  */\n   if (current_uiout->is_mi_like_p ())\n     print_what = LOC_AND_ADDRESS;\n \n@@ -349,7 +349,7 @@ print_frame_nameless_args (struct frame_info *frame, long start, int num,\n    read in.\n \n    Errors are printed as if they would be the parameter value.  Use zeroed ARG\n-   iff it should not be printed accoring to user settings.  */\n+   iff it should not be printed according to user settings.  */\n \n static void\n print_frame_arg (const frame_print_options &fp_opts,"
    },
    {
      "sha": "82081b162968a1acd657eaf38dff990cdfc22655",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -499,7 +499,7 @@ addr_info_make_relative (section_addr_info *addrs, bfd *abfd)\n   int i;\n \n   /* Find lowest loadable section to be used as starting point for\n-     continguous sections.  */\n+     contiguous sections.  */\n   lower_sect = NULL;\n   bfd_map_over_sections (abfd, find_lowest_section, &lower_sect);\n   if (lower_sect == NULL)\n@@ -905,7 +905,7 @@ init_entry_point_info (struct objfile *objfile)\n    into a format-specific offset table --- a `struct section_offsets'.\n    The sectindex field is used to control the ordering of sections\n    with the same name.  Upon return, it is updated to contain the\n-   correspondig BFD section index, or -1 if the section was not found.\n+   corresponding BFD section index, or -1 if the section was not found.\n \n    ADD_FLAGS encodes verbosity level, whether this is main symbol or\n    an extra symbol file such as dynamically loaded code, and wether\n@@ -1444,7 +1444,7 @@ find_separate_debug_file (const char *dir,\n \n     https://sourceware.org/ml/gdb-patches/2019-04/msg00605.html\n \n-    If some of those scenarions need to be supported, we will need to\n+    If some of those scenarios need to be supported, we will need to\n     use a different condition for HAS_DRIVE_SPEC and a different macro\n     instead of STRIP_DRIVE_SPEC, which work on Posix systems as well.  */\n   std::string drive;"
    },
    {
      "sha": "fc736fd2b77513b2b9dad1edb830b3bbdd335d59",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -4026,7 +4026,7 @@ operator_chars (const char *p, const char **end)\n \t  }\n \telse\n \t  {\n-\t    /* Gratuitous qoute: skip it and move on.  */\n+\t    /* Gratuitous quote: skip it and move on.  */\n \t    p++;\n \t    continue;\n \t  }"
    },
    {
      "sha": "f83c2f963adb6635027424a51e3aa471e49b768f",
      "filename": "gdb/target-descriptions.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/target-descriptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/target-descriptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-descriptions.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1758,7 +1758,7 @@ record_xml_tdesc (const char *xml_file, const struct target_desc *tdesc)\n \n }\n \n-/* Test the convesion process of a target description to/from xml: Take a target\n+/* Test the conversion process of a target description to/from xml: Take a target\n    description TDESC, convert to xml, back to a description, and confirm the new\n    tdesc is identical to the original.  */\n static bool"
    },
    {
      "sha": "4ef3505b067233485ccc8e53c904670e1ba354fc",
      "filename": "gdb/target-float.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/target-float.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/target-float.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-float.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -2262,7 +2262,7 @@ get_target_float_ops (enum target_float_ops_kind kind)\n \n       /* For binary floating-point formats that do not match any host format,\n          use mpfr_t as intermediate format to provide precise target-floating\n-         point emulation.  However, if the MPFR library is not availabe,\n+         point emulation.  However, if the MPFR library is not available,\n          use the largest host floating-point type as intermediate format.  */\n       case target_float_ops_kind::binary:\n         {"
    },
    {
      "sha": "7c8426d6257f4da41cc5ad4465bd7216b34455ee",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -444,7 +444,7 @@ thread_step_over_chain_remove (struct thread_info *tp)\n   step_over_chain_remove (&step_over_queue_head, tp);\n }\n \n-/* Delete the thread referenced by THR.  If SILENT, don't notifyi\n+/* Delete the thread referenced by THR.  If SILENT, don't notify\n    the observer of this exit.\n    \n    THR must not be NULL or a failed assertion will be raised.  */\n@@ -709,7 +709,7 @@ delete_exited_threads (void)\n       delete_thread (tp);\n }\n \n-/* Return true value if stack temporaies are enabled for the thread\n+/* Return true value if stack temporaries are enabled for the thread\n    TP.  */\n \n bool"
    },
    {
      "sha": "18d81903d195174b2128a1dcc215423c75d54143",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1338,7 +1338,7 @@ set_screen_size (void)\n      commands and either:\n \n      - the user specified \"unlimited\", which maps to UINT_MAX, or\n-     - the user spedified some number between INT_MAX and UINT_MAX.\n+     - the user specified some number between INT_MAX and UINT_MAX.\n \n      Cap \"infinity\" to approximately sqrt(INT_MAX) so that we don't\n      overflow in rl_set_screen_size, which multiplies rows and columns\n@@ -2034,7 +2034,7 @@ puts_debug (char *prefix, char *string, char *suffix)\n /* Print a variable number of ARGS using format FORMAT.  If this\n    information is going to put the amount written (since the last call\n    to REINITIALIZE_MORE_FILTER or the last page break) over the page size,\n-   call prompt_for_continue to get the users permision to continue.\n+   call prompt_for_continue to get the users permission to continue.\n \n    Unlike fprintf, this function does not return a value.\n "
    },
    {
      "sha": "e197cefd1947dba9b60b5cc65c1401e5fea9ee81",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -907,7 +907,7 @@ get_value_at (struct type *type, CORE_ADDR addr, int lazy)\n /* Return a value with type TYPE located at ADDR.\n \n    Call value_at only if the data needs to be fetched immediately;\n-   if we can be 'lazy' and defer the fetch, perhaps indefinately, call\n+   if we can be 'lazy' and defer the fetch, perhaps indefinitely, call\n    value_at_lazy instead.  value_at_lazy simply records the address of\n    the data and sets the lazy-evaluation-required flag.  The lazy flag\n    is tested in the value_contents macro, which is used if and when\n@@ -3850,7 +3850,7 @@ value_slice (struct value *array, int lowbound, int length)\n /* Create a value for a FORTRAN complex number.  Currently most of the\n    time values are coerced to COMPLEX*16 (i.e. a complex number\n    composed of 2 doubles.  This really should be a smarter routine\n-   that figures out precision inteligently as opposed to assuming\n+   that figures out precision intelligently as opposed to assuming\n    doubles.  FIXME: fmb  */\n \n struct value *"
    },
    {
      "sha": "5616db12ef044385e2c423a138a348683857ddd5",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1329,7 +1329,7 @@ val_print_scalar_formatted (struct type *type,\n    (leading 0 or 0x). \n    \n    Hilfinger/2004-09-09: USE_C_FORMAT was originally called USE_LOCAL\n-   and was intended to request formating according to the current\n+   and was intended to request formatting according to the current\n    language and would be used for most integers that GDB prints.  The\n    exceptional cases were things like protocols where the format of\n    the integer is a protocol thing, not a user-visible thing).  The\n@@ -2664,7 +2664,7 @@ print_converted_chars_to_obstack (struct obstack *obstack,\n \t\t       obstack, 0, &need_escape);\n \t  obstack_grow_wstr (obstack, LCST (\">\"));\n \n-\t  /* We do not attempt to outupt anything after this.  */\n+\t  /* We do not attempt to output anything after this.  */\n \t  state = FINISH;\n \t  break;\n \n@@ -3120,7 +3120,7 @@ using uinteger_option_def\n using zuinteger_unlimited_option_def\n   = gdb::option::zuinteger_unlimited_option_def<value_print_options>;\n \n-/* Definions of options for the \"print\" and \"compile print\"\n+/* Definitions of options for the \"print\" and \"compile print\"\n    commands.  */\n static const gdb::option::option_def value_print_option_defs[] = {\n "
    },
    {
      "sha": "cbdb5f71f565c9d95c0f2ee1b8e9e1a93916eb70",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1978,7 +1978,7 @@ init_if_undefined_command (const char* args, int from_tty)\n   intvar = expr->elts[2].internalvar;\n \n   /* Only evaluate the expression if the lvalue is void.\n-     This may still fail if the expresssion is invalid.  */\n+     This may still fail if the expression is invalid.  */\n   if (intvar->kind == INTERNALVAR_VOID)\n     evaluate_expression (expr.get ());\n }"
    },
    {
      "sha": "10d5a67e154c5e9ce2d2f5c5e0a4c34ee7d946ad",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1998,7 +1998,7 @@ varobj::~varobj ()\n    value were accessible.\n \n    This differs from VAR->type in that VAR->type is always\n-   the true type of the expession in the source language.\n+   the true type of the expression in the source language.\n    The return value of this function is the type we're\n    actually storing in varobj, and using for displaying\n    the values and for comparing previous and new values."
    },
    {
      "sha": "5901f63b28a29341569054abee88db6fee4aa016",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -147,7 +147,7 @@ static GetConsoleFontSize_ftype *GetConsoleFontSize;\n static int have_saved_context;\t/* True if we've saved context from a\n \t\t\t\t   cygwin signal.  */\n #ifdef __CYGWIN__\n-static CONTEXT saved_context;\t/* Containes the saved context from a\n+static CONTEXT saved_context;\t/* Contains the saved context from a\n \t\t\t\t   cygwin signal.  */\n #endif\n \n@@ -518,7 +518,7 @@ windows_delete_thread (ptid_t ptid, DWORD exit_code, bool main_thread_p)\n \n      Note that no notification was printed when the main thread\n      was created, and thus, unless in verbose mode, we should be\n-     symetrical, and avoid that notification for the main thread\n+     symmetrical, and avoid that notification for the main thread\n      here as well.  */\n \n   if (info_verbose)"
    },
    {
      "sha": "93784141fefe09a7232650a81c3c865bd1035a42",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -1166,7 +1166,7 @@ read_xcoff_symtab (struct objfile *objfile, struct partial_symtab *pst)\n \t     c_type value of main symbol table will be set only in case of\n \t     C_EXT/C_HIDEEXT/C_WEAKEXT storage class symbols.\n \t     Bit 10 of type is set if symbol is a function, ie the value is set\n-\t     to 32(0x20). So we need to read the first function auxiliay entry\n+\t     to 32(0x20). So we need to read the first function auxiliary entry\n \t     which contains the size. */\n \t  if (cs->c_naux > 1 && ISFCN (cs->c_type))\n \t  {\n@@ -1184,7 +1184,7 @@ read_xcoff_symtab (struct objfile *objfile, struct partial_symtab *pst)\n \t    continue;\n \t  }\n \t  /* Read the csect auxiliary header, which is always the last by\n-\t     onvention. */\n+\t     convention. */\n \t  bfd_coff_swap_aux_in (abfd,\n \t\t\t       raw_auxptr\n \t\t\t       + ((coff_data (abfd)->local_symesz)"
    },
    {
      "sha": "9b8b7e2864fa1fa527fe3316ef8375389b6caf7a",
      "filename": "gdb/xstormy16-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/xstormy16-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/xstormy16-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xstormy16-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -43,7 +43,7 @@ enum gdb_regnum\n      to the function in r2.  Further arguments are beginning in r3 then.\n      R13 is used as frame pointer when GCC compiles w/o optimization\n      R14 is used as \"PSW\", displaying the CPU status.\n-     R15 is used implicitely as stack pointer.  */\n+     R15 is used implicitly as stack pointer.  */\n   E_R0_REGNUM,\n   E_R1_REGNUM,\n   E_R2_REGNUM, E_1ST_ARG_REGNUM = E_R2_REGNUM, E_PTR_RET_REGNUM = E_R2_REGNUM,"
    },
    {
      "sha": "4af2ccd4d9e274c5dc3042db3c7ccd3973db3cda",
      "filename": "gdb/xtensa-tdep.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/xtensa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85102364b2d1845fe9ae7d70096671a3ea4bccf3/gdb/xtensa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xtensa-tdep.c?ref=85102364b2d1845fe9ae7d70096671a3ea4bccf3",
      "patch": "@@ -931,7 +931,7 @@ typedef struct xtensa_windowed_frame_cache\n /* Each element of xtensa_call0_frame_cache.c0_rt[] describes for each\n    A-register where the current content of the reg came from (in terms\n    of an original reg and a constant).  Negative values of c0_rt[n].fp_reg\n-   mean that the orignal content of the register was saved to the stack.\n+   mean that the original content of the register was saved to the stack.\n    c0_rt[n].fr.ofs is NOT the offset from the frame base because we don't \n    know where SP will end up until the entire prologue has been analyzed.  */\n \n@@ -957,7 +957,7 @@ typedef struct xtensa_call0_frame_cache\n   int c0_hasfp;\t\t\t   /* Current frame uses frame pointer.  */\n   int fp_regnum;\t\t   /* A-register used as FP.  */\n   int c0_fp;\t\t\t   /* Actual value of frame pointer.  */\n-  int c0_fpalign;\t\t   /* Dinamic adjustment for the stack\n+  int c0_fpalign;\t\t   /* Dynamic adjustment for the stack\n \t\t\t\t      pointer. It's an AND mask. Zero,\n \t\t\t\t      if alignment was not adjusted.  */\n   int c0_old_sp;\t\t   /* In case of dynamic adjustment, it is\n@@ -1349,7 +1349,7 @@ xtensa_frame_cache (struct frame_info *this_frame, void **this_cache)\n \t  if ((cache->wd.ws & (1 << cache->wd.wb)) == 0)\n \t    {\n \t      /* Register window overflow already happened.\n-\t\t We can read caller's SP from the proper spill loction.  */\n+\t\t We can read caller's SP from the proper spill location.  */\n \t      sp = get_frame_register_unsigned\n \t\t(this_frame, gdbarch_tdep (gdbarch)->a0_base + 1);\n \t      cache->prev_sp = read_memory_integer (sp - 12, 4, byte_order);\n@@ -1387,7 +1387,7 @@ xtensa_frame_cache (struct frame_info *this_frame, void **this_cache)\n static int xtensa_session_once_reported = 1;\n \n /* Report a problem with prologue analysis while doing backtracing.\n-   But, do it only once to avoid annoyng repeated messages.  */\n+   But, do it only once to avoid annoying repeated messages.  */\n \n static void\n warning_once (void)\n@@ -1893,7 +1893,7 @@ xtensa_push_dummy_call (struct gdbarch *gdbarch,\n \n   /* Set the return address of dummy frame to the dummy address.\n      The return address for the current function (in A0) is\n-     saved in the dummy frame, so we can savely overwrite A0 here.  */\n+     saved in the dummy frame, so we can safely overwrite A0 here.  */\n \n   if (gdbarch_tdep (gdbarch)->call_abi != CallAbiCall0Only)\n     {\n@@ -2172,7 +2172,7 @@ call0_classify_opcode (xtensa_isa isa, xtensa_opcode opc)\n    be within a bundle.  Updates the destination register tracking info\n    accordingly.  The pc is needed only for pc-relative load instructions\n    (eg. l32r).  The SP register number is needed to identify stores to\n-   the stack frame.  Returns 0, if analysis was succesfull, non-zero\n+   the stack frame.  Returns 0, if analysis was successful, non-zero\n    otherwise.  */\n \n static int\n@@ -2388,7 +2388,7 @@ call0_analyze_prologue (struct gdbarch *gdbarch,\n     body_pc = prologue_sal.end;\n \n   /* If we are going to analyze the prologue in general without knowing about\n-     the current PC, make the best assumtion for the end of the prologue.  */\n+     the current PC, make the best assumption for the end of the prologue.  */\n   if (pc == 0)\n     {\n       find_pc_partial_function (start, 0, NULL, &end_pc);"
    }
  ]
}