{
  "sha": "dac2fef7cfaf007123b521a70864d4dde3d09410",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGFjMmZlZjdjZmFmMDA3MTIzYjUyMWE3MDg2NGQ0ZGRlM2QwOTQxMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T19:40:31Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T19:40:33Z"
    },
    "message": "Update test cases that work with minimal encodings\n\nSome test cases already work fine with minimal encodings (in some\ncases perhaps due to the variant parts series) This patch updates\nthese tests as appropriate.\n\ngdb/testsuite/ChangeLog\n2020-04-24  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/frame_arg_lang.exp: Run with multiple -fgnat-encodings\n\tvalues.\n\t* gdb.ada/funcall_ref.exp: Run with multiple -fgnat-encodings\n\tvalues.  Update test for minimal encodings.\n\t* gdb.ada/lang_switch.exp: Update test for minimal encodings.\n\t* gdb.ada/var_rec_arr.exp: Run with multiple -fgnat-encodings\n\tvalues.  Update test for minimal encodings.",
    "tree": {
      "sha": "993e6edf230c96f3c75af52ad663038ff88ec648",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/993e6edf230c96f3c75af52ad663038ff88ec648"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dac2fef7cfaf007123b521a70864d4dde3d09410",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dac2fef7cfaf007123b521a70864d4dde3d09410",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dac2fef7cfaf007123b521a70864d4dde3d09410",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dac2fef7cfaf007123b521a70864d4dde3d09410/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1acda8039ba681e88416a7da6a6e3abdcae6b86b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1acda8039ba681e88416a7da6a6e3abdcae6b86b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1acda8039ba681e88416a7da6a6e3abdcae6b86b"
    }
  ],
  "stats": {
    "total": 325,
    "additions": 221,
    "deletions": 104
  },
  "files": [
    {
      "sha": "3458a54c5358de8ff28cee6ce1557c1a5ff6089f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=dac2fef7cfaf007123b521a70864d4dde3d09410",
      "patch": "@@ -1,3 +1,13 @@\n+2020-04-24  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/frame_arg_lang.exp: Run with multiple -fgnat-encodings\n+\tvalues.\n+\t* gdb.ada/funcall_ref.exp: Run with multiple -fgnat-encodings\n+\tvalues.  Update test for minimal encodings.\n+\t* gdb.ada/lang_switch.exp: Update test for minimal encodings.\n+\t* gdb.ada/var_rec_arr.exp: Run with multiple -fgnat-encodings\n+\tvalues.  Update test for minimal encodings.\n+\n 2020-04-24  Tom Tromey  <tromey@adacore.com>\n \n \tPR python/23662:"
    },
    {
      "sha": "dc08d261334efae38a3096418ebd4de4d4fd1bea",
      "filename": "gdb/testsuite/gdb.ada/frame_arg_lang.exp",
      "status": "modified",
      "additions": 55,
      "deletions": 38,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/gdb.ada/frame_arg_lang.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/gdb.ada/frame_arg_lang.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/frame_arg_lang.exp?ref=dac2fef7cfaf007123b521a70864d4dde3d09410",
      "patch": "@@ -21,53 +21,70 @@ set csrcfile ${srcdir}/${subdir}/${testdir}/${cfile}.c\n set cobject [standard_output_file ${cfile}.o]\n \n gdb_compile \"${csrcfile}\" \"${cobject}\" object [list debug]\n-if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable [list debug additional_flags=-largs additional_flags=${cobject} additional_flags=-margs]] != \"\" } {\n-  return -1\n-}\n \n-clean_restart ${testfile}\n+# Note we don't test the \"none\" (no -fgnat-encodings option) scenario\n+# here, because \"all\" and \"minimal\" cover the cases, and this way we\n+# don't have to update the test when gnat changes its default.\n+foreach_with_prefix scenario {all minimal} {\n+    set flags [list debug additional_flags=-largs \\\n+\t\t   additional_flags=${cobject} \\\n+\t\t   additional_flags=-margs \\\n+\t\t   additional_flags=-fgnat-encodings=$scenario]\n+\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\"} {\n+\treturn -1\n+    }\n \n-set bp_location [gdb_get_line_number \"STOP\" ${testdir}/foo.c]\n-runto \"foo.c:$bp_location\"\n+    clean_restart ${testfile}\n \n-gdb_test_no_output \"set print frame-arguments all\"\n+    set bp_location [gdb_get_line_number \"STOP\" ${testdir}/foo.c]\n+    runto \"foo.c:$bp_location\"\n \n-# Here is the scenario:\n-#  - Once stopped in a C function, with language_mode set to auto, print\n-#    backtrace, we should see the Ada frame arguments printed using Ada\n-#    syntax.\n-#  - Set language to C, then check that printing backtrace shows the Ada\n-#    frame arguments using C syntax.\n-#  - Set language back to auto, check language mode value, then print\n-#    backtrace, we should see Ada frame arguments printed using Ada C\n-#    syntax.\n+    gdb_test_no_output \"set print frame-arguments all\"\n \n-gdb_test \"show lang\" \\\n-         \"The current source language is \\\"auto; currently c\\\".\" \\\n-         \"show language when set to 'auto; c'\"\n+    # Here is the scenario:\n+    #  - Once stopped in a C function, with language_mode set to auto, print\n+    #    backtrace, we should see the Ada frame arguments printed using Ada\n+    #    syntax.\n+    #  - Set language to C, then check that printing backtrace shows the Ada\n+    #    frame arguments using C syntax.\n+    #  - Set language back to auto, check language mode value, then print\n+    #    backtrace, we should see Ada frame arguments printed using Ada C\n+    #    syntax.\n \n-gdb_test \"bt\" \\\n-         \"#1  $hex in pck\\\\.call_me \\\\(s=\\\"test\\\"\\\\).*\" \\\n-         \"backtrace with auto: c\"\n+    gdb_test \"show lang\" \\\n+\t\"The current source language is \\\"auto; currently c\\\".\" \\\n+\t\"show language when set to 'auto; c'\"\n \n-gdb_test_no_output \"set language c\" \\\n-                   \"Set current source language to \\\"manual; currently c\\\".\"\n+    gdb_test \"bt\" \\\n+\t\"#1  $hex in pck\\\\.call_me \\\\(s=\\\"test\\\"\\\\).*\" \\\n+\t\"backtrace with auto: c\"\n \n-gdb_test \"show lang\" \\\n-         \"The current source language is \\\"c\\\".\" \\\n-         \"show language when set to 'c'\"\n+    gdb_test_no_output \"set language c\" \\\n+\t\"Set current source language to \\\"manual; currently c\\\".\"\n \n-gdb_test \"bt\" \\\n-         \"#1  $hex in pck\\\\.call_me \\\\(s={P_ARRAY = $hex, P_BOUNDS = $hex}\\\\).*\" \\\n-         \"backtrace with language forced to 'c'\"\n+    gdb_test \"show lang\" \\\n+\t\"The current source language is \\\"c\\\".\" \\\n+\t\"show language when set to 'c'\"\n \n-gdb_test_no_output \"set language auto\" \\\n-                   \"Set current source language to \\\"auto; currently c\\\".\"\n+    # With -fgnat-encodings=minimal, this works properly in C as well.\n+    if {$scenario == \"minimal\"} {\n+\tset expected \"\\\"test\\\"\"\n+    } else {\n+\tset expected \"{P_ARRAY = $hex, P_BOUNDS = $hex}\"\n+    }\n+    gdb_test \"bt\" \\\n+\t\"#1  $hex in pck\\\\.call_me \\\\(s=$expected\\\\).*\" \\\n+\t\"backtrace with language forced to 'c'\"\n \n-gdb_test \"show lang\" \\\n-         \"The current source language is \\\"auto; currently c\\\".\" \\\n-         \"show language when set back to 'auto; c'\"\n+    gdb_test_no_output \"set language auto\" \\\n+\t\"Set current source language to \\\"auto; currently c\\\".\"\n \n-gdb_test \"bt\" \\\n-         \"#1  $hex in pck\\\\.call_me \\\\(s=\\\"test\\\"\\\\).*\" \\\n-         \"backtrace with language back to 'auto; c'\"\n+    gdb_test \"show lang\" \\\n+\t\"The current source language is \\\"auto; currently c\\\".\" \\\n+\t\"show language when set back to 'auto; c'\"\n+\n+    gdb_test \"bt\" \\\n+\t\"#1  $hex in pck\\\\.call_me \\\\(s=\\\"test\\\"\\\\).*\" \\\n+\t\"backtrace with language back to 'auto; c'\"\n+}"
    },
    {
      "sha": "e260e9086432439883df099b67fa056871c4efb2",
      "filename": "gdb/testsuite/gdb.ada/funcall_ref.exp",
      "status": "modified",
      "additions": 63,
      "deletions": 35,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/gdb.ada/funcall_ref.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/gdb.ada/funcall_ref.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/funcall_ref.exp?ref=dac2fef7cfaf007123b521a70864d4dde3d09410",
      "patch": "@@ -17,43 +17,71 @@ load_lib \"ada.exp\"\n \n standard_ada_testfile foo\n \n-if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable \\\n-                     [list debug]] != \"\" } {\n-  return -1\n-}\n+# Note we don't test the \"none\" (no -fgnat-encodings option) scenario\n+# here, because \"all\" and \"minimal\" cover the cases, and this way we\n+# don't have to update the test when gnat changes its default.\n+foreach_with_prefix scenario {all minimal} {\n+    set flags [list debug additional_flags=-fgnat-encodings=$scenario]\n \n-clean_restart ${testfile}\n-\n-set bp_location [gdb_get_line_number \"STOP\" ${testdir}/foo.adb]\n-runto \"foo.adb:$bp_location\"\n-\n-# Test printing and type-printing of a discriminated record that a function\n-# returns by reference.\n-\n-# Currently, GCC describes such functions as returning pointers (instead of\n-# references).\n-set pass_re [multi_line \"type = <ref> record\" \\\n-\t\t \"    n: natural;\" \\\n-\t\t \"    s: access array \\\\(1 \\\\.\\\\. n\\\\) of character;\" \\\n-\t\t \"end record\"]\n-set unsupported_re [multi_line \"type = access record\" \\\n-\t\t \"    n: natural;\" \\\n-\t\t \"    s: access array \\\\(1 \\\\.\\\\. n\\\\) of character;\" \\\n-\t\t \"end record\"]\n-set supported 1\n-gdb_test_multiple \"ptype get (\\\"Hello world!\\\")\" \"\" {\n-    -re -wrap $pass_re {\n-\tpass $gdb_test_name\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\"} {\n+\treturn -1\n     }\n-    -re -wrap $unsupported_re {\n-\tunsupported $gdb_test_name\n-\tset supported 0\n+\n+    clean_restart ${testfile}\n+\n+    set bp_location [gdb_get_line_number \"STOP\" ${testdir}/foo.adb]\n+    runto \"foo.adb:$bp_location\"\n+\n+    # Test printing and type-printing of a discriminated record that a function\n+    # returns by reference.\n+\n+    # Currently, GCC describes such functions as returning pointers (instead of\n+    # references).\n+    set pass_re [multi_line \"type = <ref> record\" \\\n+\t\t     \"    n: natural;\" \\\n+\t\t     \"    s: access array \\\\(1 \\\\.\\\\. n\\\\) of character;\" \\\n+\t\t     \"end record\"]\n+    # With DWARF we get debuginfo that could in theory show \"1..n\" for\n+    # the range:\n+    #     <3><1230>: Abbrev Number: 15 (DW_TAG_member)\n+    #     <1231>   DW_AT_name        : n\n+    # ...\n+    #  <4><1257>: Abbrev Number: 18 (DW_TAG_subrange_type)\n+    #     <1258>   DW_AT_type        : <0x126e>\n+    #     <125c>   DW_AT_upper_bound : <0x1230>\n+    # However, we don't currently record the needed information in the\n+    # location batons.  In the meantime, we accept and kfail the\n+    # compromise output.\n+    set dwarf_kfail_re [multi_line \"type = <ref> record\" \\\n+\t\t\t    \"    n: natural;\" \\\n+\t\t\t    \"    s: array \\\\(<>\\\\) of character;\" \\\n+\t\t\t    \"end record\"]\n+    set unsupported_re [multi_line \"type = access record\" \\\n+\t\t\t    \"    n: natural;\" \\\n+\t\t\t    \"    s: access array \\\\(1 \\\\.\\\\. n\\\\) of character;\" \\\n+\t\t\t    \"end record\"]\n+    set supported 1\n+    gdb_test_multiple \"ptype get (\\\"Hello world!\\\")\" \"\" {\n+\t-re -wrap $pass_re {\n+\t    pass $gdb_test_name\n+\t}\n+\t-re -wrap $dwarf_kfail_re {\n+\t    if {$scenario == \"minimal\"} {\n+\t\tsetup_kfail \"symbolic names in location batons\" *-*-*\n+\t    }\n+\t    fail $gdb_test_name\n+\t    set supported 0\n+\t}\n+\t-re -wrap $unsupported_re {\n+\t    unsupported $gdb_test_name\n+\t    set supported 0\n+\t}\n     }\n-}\n \n-if { $supported == 0 } {\n-    return 0\n-}\n+    if { $supported == 0 } {\n+\treturn 0\n+    }\n \n-gdb_test \"p get (\\\"Hello world!\\\")\" \\\n-    \"= \\\\(n => 12, s => \\\"Hello world!\\\"\\\\)\"\n+    gdb_test \"p get (\\\"Hello world!\\\")\" \\\n+\t\"= \\\\(n => 12, s => \\\"Hello world!\\\"\\\\)\"\n+}"
    },
    {
      "sha": "7d9bd61750410964ed0fd05c4b80bd5cfa453bd4",
      "filename": "gdb/testsuite/gdb.ada/lang_switch.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/gdb.ada/lang_switch.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/gdb.ada/lang_switch.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/lang_switch.exp?ref=dac2fef7cfaf007123b521a70864d4dde3d09410",
      "patch": "@@ -41,6 +41,9 @@ gdb_test \"bt\" \\\n # Now, make sure that the language doesn't get automatically switched\n # if the current language is not \"auto\".\n gdb_test \"set lang c\"\n+# This gives different output with -fgnat-encodings=minimal and\n+# -fgnat-encodings=all, but since we don't care so much about the\n+# precise details here, we just accept anything.\n gdb_test \"bt\" \\\n-         \".*#1.*lang_switch\\\\.ada_procedure\\\\s*\\\\(msg=(@$hex: +)?{.*\\\\).*\" \\\n+         \".*#1.*lang_switch\\\\.ada_procedure\\\\s*\\\\(msg=(@$hex: +)?.*\\\\).*\" \\\n          \"backtrace with lang set to C\""
    },
    {
      "sha": "d6ee8454c5a9ccb69f42e513a9f220977daf0be4",
      "filename": "gdb/testsuite/gdb.ada/packed_tagged.exp",
      "status": "modified",
      "additions": 43,
      "deletions": 3,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/gdb.ada/packed_tagged.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/gdb.ada/packed_tagged.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/packed_tagged.exp?ref=dac2fef7cfaf007123b521a70864d4dde3d09410",
      "patch": "@@ -17,7 +17,10 @@ load_lib \"ada.exp\"\n \n standard_ada_testfile comp_bug\n \n-foreach_with_prefix scenario {none all minimal} {\n+# Note we don't test the \"none\" (no -fgnat-encodings option) scenario\n+# here, because \"all\" and \"minimal\" cover the cases, and this way we\n+# don't have to update the test when gnat changes its default.\n+foreach_with_prefix scenario {all minimal} {\n     set flags {debug}\n     if {$scenario != \"none\"} {\n \tlappend flags additional_flags=-fgnat-encodings=$scenario\n@@ -32,10 +35,25 @@ foreach_with_prefix scenario {none all minimal} {\n     set bp_location [gdb_get_line_number \"STOP\" ${testdir}/comp_bug.adb]\n     runto \"comp_bug.adb:$bp_location\"\n \n-    gdb_test \"print x\" \\\n+    set pass_re \\\n \t\"= \\\\(exists => true, value => 10\\\\)\"\n+    # There is a compiler bug that causes this output.\n+    set kfail_re \\\n+\t\"= \\\\(exists => true\\\\)\"\n \n-    gdb_test \"ptype x\" \\\n+    gdb_test_multiple \"print x\" \"\" {\n+\t-re -wrap $pass_re {\n+\t    pass $gdb_test_name\n+\t}\n+\t-re -wrap $kfail_re {\n+\t    if {$scenario == \"minimal\"} {\n+\t\tsetup_kfail \"gnat compiler bug\" *-*-*\n+\t    }\n+\t    fail $gdb_test_name\n+\t}\n+    }\n+\n+    set pass_re \\\n \t[multi_line \"type = record\" \\\n \t     \"    exists: (boolean|range false \\\\.\\\\. true);\" \\\n \t     \"    case exists is\" \\\n@@ -44,4 +62,26 @@ foreach_with_prefix scenario {none all minimal} {\n \t     \"        when others => null;\" \\\n \t     \"    end case;\" \\\n \t     \"end record\" ]\n+    # There is a compiler bug that causes this output.\n+    set kfail_re \\\n+\t[multi_line \"type = record\" \\\n+\t     \"    exists: (boolean|range false \\\\.\\\\. true);\" \\\n+\t     \"    case \\\\? is\" \\\n+\t     \"        when others =>\" \\\n+\t     \"            value: range 0 \\\\.\\\\. 255;\" \\\n+\t     \"        when others => null;\" \\\n+\t     \"    end case;\" \\\n+\t     \"end record\" ]\n+\n+    gdb_test_multiple \"ptype x\" \"\" {\n+\t-re -wrap $pass_re {\n+\t    pass $gdb_test_name\n+\t}\n+\t-re -wrap $kfail_re {\n+\t    if {$scenario == \"minimal\"} {\n+\t\tsetup_kfail \"gnat compiler bug\" *-*-*\n+\t    }\n+\t    fail $gdb_test_name\n+\t}\n+    }\n }"
    },
    {
      "sha": "80ec32616a975c5ae7888bb1f9048402c65ba0a7",
      "filename": "gdb/testsuite/gdb.ada/var_rec_arr.exp",
      "status": "modified",
      "additions": 46,
      "deletions": 27,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/gdb.ada/var_rec_arr.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dac2fef7cfaf007123b521a70864d4dde3d09410/gdb/testsuite/gdb.ada/var_rec_arr.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/var_rec_arr.exp?ref=dac2fef7cfaf007123b521a70864d4dde3d09410",
      "patch": "@@ -17,41 +17,60 @@ load_lib \"ada.exp\"\n \n standard_ada_testfile foo_na09_042\n \n-if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable [list debug]] != \"\" } {\n-  return -1\n-}\n+# Note we don't test the \"none\" (no -fgnat-encodings option) scenario\n+# here, because \"all\" and \"minimal\" cover the cases, and this way we\n+# don't have to update the test when gnat changes its default.\n+foreach_with_prefix scenario {all minimal} {\n+    set flags [list debug additional_flags=-fgnat-encodings=$scenario]\n+\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\"} {\n+\treturn -1\n+    }\n \n-clean_restart ${testfile}\n+    clean_restart ${testfile}\n \n-set bp_location [gdb_get_line_number \"STOP\" ${testdir}/foo_na09_042.adb]\n-runto \"foo_na09_042.adb:$bp_location\"\n+    set bp_location [gdb_get_line_number \"STOP\" ${testdir}/foo_na09_042.adb]\n+    runto \"foo_na09_042.adb:$bp_location\"\n \n-gdb_test \"print a1\" \\\n-         \" = \\\\(\\\\(i => 0, s => \\\"\\\"\\\\), \\\\(i => 1, s => \\\"A\\\"\\\\), \\\\(i => 2, s => \\\"AB\\\"\\\\)\\\\)\"\n+    gdb_test \"print a1\" \\\n+\t\" = \\\\(\\\\(i => 0, s => \\\"\\\"\\\\), \\\\(i => 1, s => \\\"A\\\"\\\\), \\\\(i => 2, s => \\\"AB\\\"\\\\)\\\\)\"\n \n-gdb_test \"print a1(1)\" \\\n-         \" = \\\\(i => 0, s => \\\"\\\"\\\\)\"\n+    gdb_test \"print a1(1)\" \\\n+\t\" = \\\\(i => 0, s => \\\"\\\"\\\\)\"\n \n-gdb_test \"print a1(2)\" \\\n-         \" = \\\\(i => 1, s => \\\"A\\\"\\\\)\"\n+    gdb_test \"print a1(2)\" \\\n+\t\" = \\\\(i => 1, s => \\\"A\\\"\\\\)\"\n \n-gdb_test \"print a1(3)\" \\\n-         \" = \\\\(i => 2, s => \\\"AB\\\"\\\\)\"\n+    gdb_test \"print a1(3)\" \\\n+\t\" = \\\\(i => 2, s => \\\"AB\\\"\\\\)\"\n \n-gdb_test \"print a2\" \\\n-         \" = \\\\(\\\\(i => 2, s => \\\"AB\\\"\\\\), \\\\(i => 1, s => \\\"A\\\"\\\\), \\\\(i => 0, s => \\\"\\\"\\\\)\\\\)\"\n+    gdb_test \"print a2\" \\\n+\t\" = \\\\(\\\\(i => 2, s => \\\"AB\\\"\\\\), \\\\(i => 1, s => \\\"A\\\"\\\\), \\\\(i => 0, s => \\\"\\\"\\\\)\\\\)\"\n \n-gdb_test \"print a2(1)\" \\\n-         \" = \\\\(i => 2, s => \\\"AB\\\"\\\\)\"\n+    gdb_test \"print a2(1)\" \\\n+\t\" = \\\\(i => 2, s => \\\"AB\\\"\\\\)\"\n \n-gdb_test \"print a2(2)\" \\\n-         \" = \\\\(i => 1, s => \\\"A\\\"\\\\)\"\n+    gdb_test \"print a2(2)\" \\\n+\t\" = \\\\(i => 1, s => \\\"A\\\"\\\\)\"\n \n-gdb_test \"print a2(3)\" \\\n-         \" = \\\\(i => 0, s => \\\"\\\"\\\\)\"\n+    gdb_test \"print a2(3)\" \\\n+\t\" = \\\\(i => 0, s => \\\"\\\"\\\\)\"\n \n-gdb_test \"ptype a1(1)\" \\\n-         [multi_line \"type = record\" \\\n-                     \"    i: pck\\\\.small_type;\" \\\n-                     \"    s: access array \\\\((<>|1 \\\\.\\\\. i)\\\\) of character;\" \\\n-                     \"end record\"]\n+    # Note that the \"access\" is only printed when the gnat encodings\n+    # are used.  This is due to how the encodings work -- the type\n+    # doesn't actually have the \"access\", and so here the DWARF\n+    # encoding is more correct.\n+    if {$scenario == \"all\"} {\n+\tset ex [multi_line \"type = record\" \\\n+\t\t    \"    i: pck\\\\.small_type;\" \\\n+\t\t    \"    s: access array \\\\((<>|1 \\\\.\\\\. i)\\\\) of character;\" \\\n+\t\t    \"end record\"]\n+    } else {\n+\tset ex [multi_line \"type = record\" \\\n+\t\t    \"    i: pck\\\\.small_type;\" \\\n+\t\t    \"    s: array \\\\((<>|1 \\\\.\\\\. i)\\\\) of character;\" \\\n+\t\t    \"end record\"]\n+    }\n+\n+    gdb_test \"ptype a1(1)\" $ex\n+}"
    }
  ]
}