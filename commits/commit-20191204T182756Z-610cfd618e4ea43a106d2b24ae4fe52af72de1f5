{
  "sha": "610cfd618e4ea43a106d2b24ae4fe52af72de1f5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjEwY2ZkNjE4ZTRlYTQzYTEwNmQyYjI0YWU0ZmU1MmFmNzJkZTFmNQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-12-04T18:27:21Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-12-04T18:27:56Z"
    },
    "message": "Compare iterators, not values, in filtered_iterator::operator{==,!=}\n\nThe == and != operators on filtered_iterator are not doing the\nright thing, they compare values pointed by the wrapped iterators\ninstead of comparing the iterators themselves.\n\nAs a result, operator== will return true if the two iterators point to\ntwo equal values at different positions.  operator!= will fail\nsimilarly.\n\nAlso, this causes it to deference past-the-end iterators when doing.\nFor example, in\n\n  for (iter = ...; iter != end_iter; ++iter)\n\nthe != comparison dereferences end_iter.  I don't think this should\nhappen.\n\nI don't think it's a problem today, given that we only use\nfiltered_iterator to wrap linked lists of threads and inferiors.\nDereferencing past-the-end iterators of these types is not fatal, it\njust returns NULL, which is not a value we otherwise find in the lists.\nBut in other contexts, it could become problematic.\n\nI have added a simple self test that fails without the fix applied.\n\ngdb/ChangeLog:\n\n\t* filtered-iterator.h (filtered_iterator) <operator==,\n\toperator!=>: Compare wrapped iterators, not wrapped pointers.\n\t* Makefile.in (SUBDIR_UNITTESTS_SRCS): Add\n\tunittests/filtered_iterator-selftests.c.\n\t* unittests/filtered_iterator-selftests.c: New file.",
    "tree": {
      "sha": "fb08ac03e354e45224e97542cf1693c030baef3e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fb08ac03e354e45224e97542cf1693c030baef3e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/610cfd618e4ea43a106d2b24ae4fe52af72de1f5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/610cfd618e4ea43a106d2b24ae4fe52af72de1f5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/610cfd618e4ea43a106d2b24ae4fe52af72de1f5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/610cfd618e4ea43a106d2b24ae4fe52af72de1f5/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f47674be8e90a84edae49ec2b781201ea2f050bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f47674be8e90a84edae49ec2b781201ea2f050bd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f47674be8e90a84edae49ec2b781201ea2f050bd"
    }
  ],
  "stats": {
    "total": 178,
    "additions": 176,
    "deletions": 2
  },
  "files": [
    {
      "sha": "e861d5dac66fe5110e3c7810bbd21194698b44a9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/610cfd618e4ea43a106d2b24ae4fe52af72de1f5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/610cfd618e4ea43a106d2b24ae4fe52af72de1f5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=610cfd618e4ea43a106d2b24ae4fe52af72de1f5",
      "patch": "@@ -1,3 +1,11 @@\n+2019-12-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* filtered-iterator.h (filtered_iterator) <operator==,\n+\toperator!=>: Compare wrapped iterators, not wrapped pointers.\n+\t* Makefile.in (SUBDIR_UNITTESTS_SRCS): Add\n+\tunittests/filtered_iterator-selftests.c.\n+\t* unittests/filtered_iterator-selftests.c: New file.\n+\n 2019-12-04  Tom Tromey  <tromey@adacore.com>\n \n \t* gdbtypes.c (create_range_type): Inherit endianity"
    },
    {
      "sha": "67fa1dfa90abee6c4c47a3398bc050a525c52612",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/610cfd618e4ea43a106d2b24ae4fe52af72de1f5/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/610cfd618e4ea43a106d2b24ae4fe52af72de1f5/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=610cfd618e4ea43a106d2b24ae4fe52af72de1f5",
      "patch": "@@ -422,6 +422,7 @@ SUBDIR_UNITTESTS_SRCS = \\\n \tunittests/common-utils-selftests.c \\\n \tunittests/copy_bitwise-selftests.c \\\n \tunittests/environ-selftests.c \\\n+\tunittests/filtered_iterator-selftests.c \\\n \tunittests/format_pieces-selftests.c \\\n \tunittests/function-view-selftests.c \\\n \tunittests/help-doc-selftests.c \\"
    },
    {
      "sha": "c3e8f38257b0773a45346f349dc522bf87afac0b",
      "filename": "gdb/gdbsupport/filtered-iterator.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/610cfd618e4ea43a106d2b24ae4fe52af72de1f5/gdb/gdbsupport/filtered-iterator.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/610cfd618e4ea43a106d2b24ae4fe52af72de1f5/gdb/gdbsupport/filtered-iterator.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/filtered-iterator.h?ref=610cfd618e4ea43a106d2b24ae4fe52af72de1f5",
      "patch": "@@ -64,10 +64,10 @@ class filtered_iterator\n   }\n \n   bool operator== (const self_type &other) const\n-  { return *m_it == *other.m_it; }\n+  { return m_it == other.m_it; }\n \n   bool operator!= (const self_type &other) const\n-  { return *m_it != *other.m_it; }\n+  { return m_it != other.m_it; }\n \n private:\n "
    },
    {
      "sha": "1905bd74a4c660cb85b55c177a0ea267fd7a0d28",
      "filename": "gdb/unittests/filtered_iterator-selftests.c",
      "status": "added",
      "additions": 165,
      "deletions": 0,
      "changes": 165,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/610cfd618e4ea43a106d2b24ae4fe52af72de1f5/gdb/unittests/filtered_iterator-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/610cfd618e4ea43a106d2b24ae4fe52af72de1f5/gdb/unittests/filtered_iterator-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/filtered_iterator-selftests.c?ref=610cfd618e4ea43a106d2b24ae4fe52af72de1f5",
      "patch": "@@ -0,0 +1,165 @@\n+/* Self tests for the filtered_iterator class.\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"gdbsupport/common-defs.h\"\n+#include \"gdbsupport/selftest.h\"\n+#include \"gdbsupport/filtered-iterator.h\"\n+\n+#include <iterator>\n+\n+namespace selftests {\n+\n+/* An iterator class that iterates on integer arrays.  */\n+\n+struct int_array_iterator\n+{\n+  using value_type = int;\n+  using reference = int &;\n+  using pointer = int *;\n+  using iterator_category = std::forward_iterator_tag;\n+  using difference_type = int;\n+\n+  /* Create an iterator that points at the first element of an integer\n+     array at ARRAY of size SIZE.  */\n+  int_array_iterator (int *array, size_t size)\n+    : m_array (array), m_size (size)\n+  {}\n+\n+  /* Create a past-the-end iterator.  */\n+  int_array_iterator ()\n+    : m_array (nullptr), m_size (0)\n+  {}\n+\n+  bool operator== (const int_array_iterator &other) const\n+  {\n+    /* If both are past-the-end, they are equal.  */\n+    if (m_array == nullptr && other.m_array == nullptr)\n+      return true;\n+\n+    /* If just one of them is past-the-end, they are not equal.  */\n+    if (m_array == nullptr || other.m_array == nullptr)\n+      return false;\n+\n+    /* If they are both not past-the-end, make sure they iterate on the\n+       same array (we shouldn't compare iterators that iterate on different\n+       things).  */\n+    gdb_assert (m_array == other.m_array);\n+\n+    /* They are equal if they have the same current index.  */\n+    return m_cur_idx == other.m_cur_idx;\n+  }\n+\n+  bool operator!= (const int_array_iterator &other) const\n+  {\n+    return !(*this == other);\n+  }\n+\n+  void operator++ ()\n+  {\n+    /* Make sure nothing tries to increment a past the end iterator. */\n+    gdb_assert (m_cur_idx < m_size);\n+\n+    m_cur_idx++;\n+\n+    /* Mark the iterator as \"past-the-end\" if we have reached the end.  */\n+    if (m_cur_idx == m_size)\n+      m_array = nullptr;\n+  }\n+\n+  int operator* () const\n+  {\n+    /* Make sure nothing tries to dereference a past the end iterator.  */\n+    gdb_assert (m_cur_idx < m_size);\n+\n+    return m_array[m_cur_idx];\n+  }\n+\n+private:\n+  /* A nullptr value in M_ARRAY indicates a past-the-end iterator.  */\n+  int *m_array;\n+  size_t m_size;\n+  size_t m_cur_idx = 0;\n+};\n+\n+/* Filter to only keep the even numbers.  */\n+\n+struct even_numbers_only\n+{\n+  bool operator() (int n)\n+  {\n+    return n % 2 == 0;\n+  }\n+};\n+\n+/* Test typical usage.  */\n+\n+static void\n+test_filtered_iterator ()\n+{\n+  int array[] = { 4, 4, 5, 6, 7, 8, 9 };\n+  std::vector<int> even_ints;\n+  const std::vector<int> expected_even_ints { 4, 4, 6, 8 };\n+\n+  filtered_iterator<int_array_iterator, even_numbers_only>\n+    iter (array, ARRAY_SIZE (array));\n+  filtered_iterator<int_array_iterator, even_numbers_only> end;\n+\n+  for (; iter != end; ++iter)\n+    even_ints.push_back (*iter);\n+\n+  gdb_assert (even_ints == expected_even_ints);\n+}\n+\n+/* Test operator== and operator!=. */\n+\n+static void\n+test_filtered_iterator_eq ()\n+{\n+  int array[] = { 4, 4, 5, 6, 7, 8, 9 };\n+\n+  filtered_iterator<int_array_iterator, even_numbers_only>\n+    iter1(array, ARRAY_SIZE (array));\n+  filtered_iterator<int_array_iterator, even_numbers_only>\n+    iter2(array, ARRAY_SIZE (array));\n+\n+  /* They start equal.  */\n+  gdb_assert (iter1 == iter2);\n+  gdb_assert (!(iter1 != iter2));\n+\n+  /* Advance 1, now they aren't equal (despite pointing to equal values).  */\n+  ++iter1;\n+  gdb_assert (!(iter1 == iter2));\n+  gdb_assert (iter1 != iter2);\n+\n+  /* Advance 2, now they are equal again.  */\n+  ++iter2;\n+  gdb_assert (iter1 == iter2);\n+  gdb_assert (!(iter1 != iter2));\n+}\n+\n+} /* namespace selftests */\n+\n+void\n+_initialize_filtered_iterator_selftests ()\n+{\n+  selftests::register_test (\"filtered_iterator\",\n+\t\t\t    selftests::test_filtered_iterator);\n+  selftests::register_test (\"filtered_iterator_eq\",\n+\t\t\t    selftests::test_filtered_iterator_eq);\n+}"
    }
  ]
}