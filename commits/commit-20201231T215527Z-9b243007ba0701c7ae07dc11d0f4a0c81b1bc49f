{
  "sha": "9b243007ba0701c7ae07dc11d0f4a0c81b1bc49f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWIyNDMwMDdiYTA3MDFjN2FlMDdkYzExZDBmNGEwYzgxYjFiYzQ5Zg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-31T21:55:27Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-31T21:55:27Z"
    },
    "message": "Update gdb.rust tests for Rust 1.49\n\nRust 1.49 was released today, and it includes some library changes\nwhich caused some gdb.rust tests to fail.  This patch adapts the test\nsuite to the new output.  I also verified that this continues to work\nwith Rust 1.48.\n\ngdb/testsuite/ChangeLog\n2020-12-31  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.rust/simple.exp: Update output for Rust 1.49.",
    "tree": {
      "sha": "372e91bf24554745f2e413298ea2e95de399b88a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/372e91bf24554745f2e413298ea2e95de399b88a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9b243007ba0701c7ae07dc11d0f4a0c81b1bc49f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b243007ba0701c7ae07dc11d0f4a0c81b1bc49f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9b243007ba0701c7ae07dc11d0f4a0c81b1bc49f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b243007ba0701c7ae07dc11d0f4a0c81b1bc49f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cab3f4da68672647cde72bc0c06ec08977819817",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cab3f4da68672647cde72bc0c06ec08977819817",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cab3f4da68672647cde72bc0c06ec08977819817"
    }
  ],
  "stats": {
    "total": 18,
    "additions": 14,
    "deletions": 4
  },
  "files": [
    {
      "sha": "d184b782049a4c0ac4714c1b7e2d7bacd3ea9203",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b243007ba0701c7ae07dc11d0f4a0c81b1bc49f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b243007ba0701c7ae07dc11d0f4a0c81b1bc49f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=9b243007ba0701c7ae07dc11d0f4a0c81b1bc49f",
      "patch": "@@ -1,3 +1,7 @@\n+2020-12-31  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.rust/simple.exp: Update output for Rust 1.49.\n+\n 2020-12-31  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gdb.cp/step-and-next-inline.exp: Fix test case."
    },
    {
      "sha": "00f4547a00b28b398cfb480dd8cfb0dae4c6d6b9",
      "filename": "gdb/testsuite/gdb.rust/simple.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b243007ba0701c7ae07dc11d0f4a0c81b1bc49f/gdb/testsuite/gdb.rust/simple.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b243007ba0701c7ae07dc11d0f4a0c81b1bc49f/gdb/testsuite/gdb.rust/simple.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/simple.exp?ref=9b243007ba0701c7ae07dc11d0f4a0c81b1bc49f",
      "patch": "@@ -262,8 +262,14 @@ gdb_test_multiple \"print str_none\" \"\" {\n \n gdb_test \"print int_some\" \" = core::option::Option<u8>::Some\\\\(1\\\\)\"\n gdb_test \"print int_none\" \" = core::option::Option<u8>::None\"\n-gdb_test \"print box_some\" \" = core::option::Option<\\[a-z:\\]*Box<u8>>::Some\\\\(.*\\\\)\"\n-gdb_test \"print box_none\" \" = core::option::Option<\\[a-z:\\]*Box<u8>>::None\"\n+# The result expressions are a bit lax here, to handle the fact that\n+# the output varies between Rust versions.  Mostly we just want to\n+# check for the presence \"Option\", \"Box\", \"u8\", and either \"Some\" or\n+# \"None\".\n+gdb_test \"print box_some\" \\\n+    \" = core::option::Option<\\[a-z:\\]*Box<u8.*>>::Some\\\\(.*\\\\)\"\n+gdb_test \"print box_none\" \\\n+    \" = core::option::Option<\\[a-z:\\]*Box<u8.*>>::None\"\n \n set pass_pattern \\\n     \" = simple::NonZeroOptimized::Value\\\\(\\[a-z\\]+::string::String .*\"\n@@ -332,11 +338,11 @@ gdb_test \"print (1)\" \" = 1\"\n gdb_test \"print 23..97.0\" \"Range expression with different types\"\n \n gdb_test \"print (*parametrized.next.val)\" \\\n-    \" = simple::ParametrizedStruct<i32> {next: simple::ParametrizedEnum<\\[a-z:\\]*Box<simple::ParametrizedStruct<i32>>>::Empty, value: 1}\"\n+    \" = simple::ParametrizedStruct<i32> {next: simple::ParametrizedEnum<\\[a-z:\\]*Box<simple::ParametrizedStruct<i32>.*>>::Empty, value: 1}\"\n gdb_test \"print parametrized.next.val\" \\\n     \" = \\\\(\\\\*mut simple::ParametrizedStruct<i32>\\\\) $hex\"\n gdb_test \"print parametrized\" \\\n-    \" = simple::ParametrizedStruct<i32> \\\\{next: simple::ParametrizedEnum<\\[a-z:\\]*Box<simple::ParametrizedStruct<i32>>>::Val\\\\{val: $hex\\\\}, value: 0\\\\}\"\n+    \" = simple::ParametrizedStruct<i32> \\\\{next: simple::ParametrizedEnum<\\[a-z:\\]*Box<simple::ParametrizedStruct<i32>.*>>::Val\\\\{val: $hex\\\\}, value: 0\\\\}\"\n \n gdb_test_sequence \"ptype/o SimpleLayout\" \"\" {\n     \"/\\\\* offset    |  size \\\\*/  type = struct simple::SimpleLayout {\""
    }
  ]
}