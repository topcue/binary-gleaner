{
  "sha": "50a82723c446c556287dcabe22183bc5cedab566",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTBhODI3MjNjNDQ2YzU1NjI4N2RjYWJlMjIxODNiYzVjZWRhYjU2Ng==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-02-27T22:06:28Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-04-09T03:14:26Z"
    },
    "message": "Support buffer objects as handles in Inferior.thread_from_thread_handle()\n\nInferiorThread.handle() returns a python bytes object.  We'd like to\nbe able to pass the output of this function, a thread handle, to\nInferior.thread_from_thread_handle().  Up to now,\nthread_from_thread_handle() expects to receive a gdb.Value input.\nThis commit adds support to also allow a python buffer object to be\npassed as the handle.\n\ninfpy_thread_from_thread_handle() calls find_thread_by_handle() which\nhas the obvious functionality.  It used to pass the thread handle via\na struct value pointer.  I've revised this interface to instead pass a\ngdb::array_view<const gdb_byte> object.  (Thanks to Tom Tromey for\nsuggesting this data structure over an earlier version which passed a\ngdb_byte pointer and length.)\n\ngdb/ChangeLog:\n\n\t* gdbthread.h (find_thread_by_handle): Revise declaration.\n\t* thread.c (find_thread_by_handle): Likewise.  Adjust\n\timplementation too.\n\t* python/py-inferior.c (infpy_thread_from_thread_handle): Add\n\tsupport for buffer objects as handles.",
    "tree": {
      "sha": "b7845795032a6ce525e9f5c30a61d5edb6017b70",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b7845795032a6ce525e9f5c30a61d5edb6017b70"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/50a82723c446c556287dcabe22183bc5cedab566",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/50a82723c446c556287dcabe22183bc5cedab566",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/50a82723c446c556287dcabe22183bc5cedab566",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/50a82723c446c556287dcabe22183bc5cedab566/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cf63b0162b6cbf74bdb056609d1ad777c6d48954",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf63b0162b6cbf74bdb056609d1ad777c6d48954",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cf63b0162b6cbf74bdb056609d1ad777c6d48954"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 37,
    "deletions": 10
  },
  "files": [
    {
      "sha": "65be34163b87d6b679b6c4718db02080caa1f15f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50a82723c446c556287dcabe22183bc5cedab566/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50a82723c446c556287dcabe22183bc5cedab566/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=50a82723c446c556287dcabe22183bc5cedab566",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-08  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* gdbthread.h (find_thread_by_handle): Revise declaration.\n+\t* thread.c (find_thread_by_handle): Likewise.  Adjust\n+\timplementation too.\n+\t* python/py-inferior.c (infpy_thread_from_thread_handle): Add\n+\tsupport for buffer objects as handles.\n+\n 2019-04-08  Kevin Buettner  <kevinb@redhat.com>\n \n \t* python/py-infthread.c (thpy_thread_handle): New function."
    },
    {
      "sha": "b9d8d7fdb181f8ad2d8ddd0f878160291d7201b5",
      "filename": "gdb/gdbthread.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50a82723c446c556287dcabe22183bc5cedab566/gdb/gdbthread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50a82723c446c556287dcabe22183bc5cedab566/gdb/gdbthread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbthread.h?ref=50a82723c446c556287dcabe22183bc5cedab566",
      "patch": "@@ -486,8 +486,8 @@ extern struct thread_info *find_thread_ptid (inferior *inf, ptid_t ptid);\n struct thread_info *find_thread_global_id (int global_id);\n \n /* Find thread by thread library specific handle in inferior INF.  */\n-struct thread_info *find_thread_by_handle (struct value *thread_handle,\n-\t\t\t\t\t   struct inferior *inf);\n+struct thread_info *find_thread_by_handle\n+  (gdb::array_view<const gdb_byte> handle, struct inferior *inf);\n \n /* Finds the first thread of the specified inferior.  */\n extern struct thread_info *first_thread_of_inferior (inferior *inf);"
    },
    {
      "sha": "9109874690ac952be263a9fbfdaf1e82aeed0e46",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 22,
      "deletions": 3,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50a82723c446c556287dcabe22183bc5cedab566/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50a82723c446c556287dcabe22183bc5cedab566/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=50a82723c446c556287dcabe22183bc5cedab566",
      "patch": "@@ -770,7 +770,25 @@ infpy_thread_from_thread_handle (PyObject *self, PyObject *args, PyObject *kw)\n   if (! gdb_PyArg_ParseTupleAndKeywords (args, kw, \"O\", keywords, &handle_obj))\n     return NULL;\n \n-  if (!gdbpy_is_value_object (handle_obj))\n+  const gdb_byte *bytes;\n+  size_t bytes_len;\n+  Py_buffer_up buffer_up;\n+  Py_buffer py_buf;\n+\n+  if (PyObject_CheckBuffer (handle_obj)\n+      && PyObject_GetBuffer (handle_obj, &py_buf, PyBUF_SIMPLE) == 0)\n+    {\n+      buffer_up.reset (&py_buf);\n+      bytes = (const gdb_byte *) py_buf.buf;\n+      bytes_len = py_buf.len;\n+    }\n+  else if (gdbpy_is_value_object (handle_obj))\n+    {\n+      struct value *val = value_object_to_value (handle_obj);\n+      bytes = value_contents_all (val);\n+      bytes_len = TYPE_LENGTH (value_type (val));\n+    }\n+  else\n     {\n       PyErr_SetString (PyExc_TypeError,\n \t\t       _(\"Argument 'handle_obj' must be a thread handle object.\"));\n@@ -781,9 +799,10 @@ infpy_thread_from_thread_handle (PyObject *self, PyObject *args, PyObject *kw)\n   try\n     {\n       struct thread_info *thread_info;\n-      struct value *val = value_object_to_value (handle_obj);\n \n-      thread_info = find_thread_by_handle (val, inf_obj->inferior);\n+      thread_info = find_thread_by_handle\n+        (gdb::array_view<const gdb_byte> (bytes, bytes_len),\n+\t inf_obj->inferior);\n       if (thread_info != NULL)\n \treturn thread_to_thread_object (thread_info).release ();\n     }"
    },
    {
      "sha": "dbcf8be0e1efa4bce00fa6baf6860251cfe115cd",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50a82723c446c556287dcabe22183bc5cedab566/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50a82723c446c556287dcabe22183bc5cedab566/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=50a82723c446c556287dcabe22183bc5cedab566",
      "patch": "@@ -540,12 +540,12 @@ find_thread_ptid (inferior *inf, ptid_t ptid)\n /* See gdbthread.h.  */\n \n struct thread_info *\n-find_thread_by_handle (struct value *thread_handle, struct inferior *inf)\n+find_thread_by_handle (gdb::array_view<const gdb_byte> handle,\n+\t\t       struct inferior *inf)\n {\n-  return target_thread_handle_to_thread_info\n-\t   (value_contents_all (thread_handle),\n-\t    TYPE_LENGTH (value_type (thread_handle)),\n-\t    inf);\n+  return target_thread_handle_to_thread_info (handle.data (),\n+\t\t\t\t\t      handle.size (),\n+\t\t\t\t\t      inf);\n }\n \n /*"
    }
  ]
}