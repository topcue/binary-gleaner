{
  "sha": "42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDIzMzFhMWVhMmExM2NlMTVlYzIwMmM1ZjBmYmVmM2U1MTcxMjUzYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:42Z"
    },
    "message": "Change extension language pretty-printers to use value API\n\nThis changes the extension language pretty-printers to use the value\nAPI.\n\nNote that new functions were needed, for both Guile and Python.\nCurrently both languages always wrap values by removing the values\nfrom the value chain.  This makes sense to avoid strange behavior with\nwatchpoints, and to avoid excessive memory use.  However, when\nprinting, it's important to leave the passed-in value untouched, in\ncase pretty-printing does nothing -- that way the caller can still\naccess it.\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* valprint.c (do_val_print): Update.\n\t* python/python-internal.h (gdbpy_apply_val_pretty_printer): Take\n\ta struct value.\n\t(value_to_value_object_no_release): Declare.\n\t* python/py-value.c (value_to_value_object_no_release): New\n\tfunction.\n\t* python/py-prettyprint.c (gdbpy_apply_val_pretty_printer): Take a\n\tstruct value.\n\t* guile/scm-value.c (vlscm_scm_from_value_no_release): New\n\tfunction.\n\t* guile/scm-pretty-print.c (gdbscm_apply_val_pretty_printer): Take\n\ta struct value.\n\t* guile/guile-internal.h (vlscm_scm_from_value_no_release):\n\tDeclare.\n\t(gdbscm_apply_val_pretty_printer): Take a struct value.\n\t* extension.h (apply_ext_lang_val_pretty_printer): Take a struct\n\tvalue.\n\t* extension.c (apply_ext_lang_val_pretty_printer): Take a struct\n\tvalue.\n\t* extension-priv.h (struct extension_language_ops)\n\t<apply_val_pretty_printer>: Take a struct value.\n\t* cp-valprint.c (cp_print_value): Create a struct value.\n\t(cp_print_value): Update.",
    "tree": {
      "sha": "69cd05a4b2d8de096c8ee3f0b5a87c219f855ee1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/69cd05a4b2d8de096c8ee3f0b5a87c219f855ee1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3a916a975745f386cabbaba64531ed9b5f8be509",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a916a975745f386cabbaba64531ed9b5f8be509",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3a916a975745f386cabbaba64531ed9b5f8be509"
    }
  ],
  "stats": {
    "total": 195,
    "additions": 119,
    "deletions": 76
  },
  "files": [
    {
      "sha": "ac1a4f867ef5396da8c337ad1019c27262fc0a8c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -1,3 +1,29 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* valprint.c (do_val_print): Update.\n+\t* python/python-internal.h (gdbpy_apply_val_pretty_printer): Take\n+\ta struct value.\n+\t(value_to_value_object_no_release): Declare.\n+\t* python/py-value.c (value_to_value_object_no_release): New\n+\tfunction.\n+\t* python/py-prettyprint.c (gdbpy_apply_val_pretty_printer): Take a\n+\tstruct value.\n+\t* guile/scm-value.c (vlscm_scm_from_value_no_release): New\n+\tfunction.\n+\t* guile/scm-pretty-print.c (gdbscm_apply_val_pretty_printer): Take\n+\ta struct value.\n+\t* guile/guile-internal.h (vlscm_scm_from_value_no_release):\n+\tDeclare.\n+\t(gdbscm_apply_val_pretty_printer): Take a struct value.\n+\t* extension.h (apply_ext_lang_val_pretty_printer): Take a struct\n+\tvalue.\n+\t* extension.c (apply_ext_lang_val_pretty_printer): Take a struct\n+\tvalue.\n+\t* extension-priv.h (struct extension_language_ops)\n+\t<apply_val_pretty_printer>: Take a struct value.\n+\t* cp-valprint.c (cp_print_value): Create a struct value.\n+\t(cp_print_value): Update.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* ada-valprint.c (print_field_values): Call common_val_print."
    },
    {
      "sha": "5e4cb3cad643ace548acec4097d933c6dde29be1",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -848,13 +848,15 @@ cp_print_value (struct type *type, struct type *real_type,\n \t      /* Attempt to run an extension language pretty-printer on the\n \t\t baseclass if possible.  */\n \t      if (!options->raw)\n-\t\tresult\n-\t\t  = apply_ext_lang_val_pretty_printer (baseclass,\n-\t\t\t\t\t\t       thisoffset + boffset,\n-\t\t\t\t\t\t       value_address (base_val),\n-\t\t\t\t\t\t       stream, recurse,\n-\t\t\t\t\t\t       base_val, options,\n-\t\t\t\t\t\t       current_language);\n+\t\t{\n+\t\t  struct value *v\n+\t\t    = value_from_component (base_val, baseclass,\n+\t\t\t\t\t    thisoffset + boffset);\n+\t\t  result\n+\t\t    = apply_ext_lang_val_pretty_printer (v, stream, recurse,\n+\t\t\t\t\t\t\t options,\n+\t\t\t\t\t\t\t current_language);\n+\t\t}\n \n \t      if (!result)\n \t\tcp_print_value_fields (baseclass, thistype,\n@@ -1006,19 +1008,19 @@ cp_print_value (struct value *val, struct ui_file *stream,\n \t    }\n \t  else\n \t    {\n+\t      struct value *baseclass_val = value_primitive_field (val, 0,\n+\t\t\t\t\t\t\t\t   i, type);\n+\n \t      /* Attempt to run an extension language pretty-printer on the\n \t\t baseclass if possible.  */\n \t      if (!options->raw)\n \t\tresult\n-\t\t  = apply_ext_lang_val_pretty_printer (baseclass, boffset,\n-\t\t\t\t\t\t       value_address (base_val),\n-\t\t\t\t\t\t       stream, recurse,\n-\t\t\t\t\t\t       base_val, options,\n+\t\t  = apply_ext_lang_val_pretty_printer (baseclass_val, stream,\n+\t\t\t\t\t\t       recurse, options,\n \t\t\t\t\t\t       current_language);\n \n \t      if (!result)\n-\t\tcp_print_value_fields (value_primitive_field (val, 0, i, type),\n-\t\t\t\t       stream, recurse, options,\n+\t\tcp_print_value_fields (baseclass_val, stream, recurse, options,\n \t\t\t\t       ((struct type **)\n \t\t\t\t\tobstack_base (&dont_print_vb_obstack)),\n \t\t\t\t       0);"
    },
    {
      "sha": "8596e0a95f5216366547874edf4f6a7a33f9d9de",
      "filename": "gdb/extension-priv.h",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/extension-priv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/extension-priv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension-priv.h?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -152,19 +152,14 @@ struct extension_language_ops\n   void (*free_type_printers) (const struct extension_language_defn *,\n \t\t\t      struct ext_lang_type_printers *);\n \n-  /* Try to pretty-print a value of type TYPE located at VAL's contents\n-     buffer + EMBEDDED_OFFSET, which came from the inferior at address\n-     ADDRESS + EMBEDDED_OFFSET, onto stdio stream STREAM according to\n-     OPTIONS.\n-     VAL is the whole object that came from ADDRESS.\n-     Returns EXT_LANG_RC_OK upon success, EXT_LANG_RC_NOP if the value\n-     is not recognized, and EXT_LANG_RC_ERROR if an error was encountered.  */\n+  /* Try to pretty-print a value, onto stdio stream STREAM according\n+     to OPTIONS.  VAL is the object to print.  Returns EXT_LANG_RC_OK\n+     upon success, EXT_LANG_RC_NOP if the value is not recognized, and\n+     EXT_LANG_RC_ERROR if an error was encountered.  */\n   enum ext_lang_rc (*apply_val_pretty_printer)\n     (const struct extension_language_defn *,\n-     struct type *type,\n-     LONGEST embedded_offset, CORE_ADDR address,\n-     struct ui_file *stream, int recurse,\n-     struct value *val, const struct value_print_options *options,\n+     struct value *val, struct ui_file *stream, int recurse,\n+     const struct value_print_options *options,\n      const struct language_defn *language);\n \n   /* GDB access to the \"frame filter\" feature."
    },
    {
      "sha": "09aa7d91c315e54aedcb027add6f61e1af806ead",
      "filename": "gdb/extension.c",
      "status": "modified",
      "additions": 6,
      "deletions": 13,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/extension.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/extension.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.c?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -470,12 +470,9 @@ ext_lang_type_printers::~ext_lang_type_printers ()\n     }\n }\n \f\n-/* Try to pretty-print a value of type TYPE located at VAL's contents\n-   buffer + EMBEDDED_OFFSET, which came from the inferior at address\n-   ADDRESS + EMBEDDED_OFFSET, onto stdio stream STREAM according to\n-   OPTIONS.\n-   VAL is the whole object that came from ADDRESS.\n-   Returns non-zero if the value was successfully pretty-printed.\n+/* Try to pretty-print a value onto stdio stream STREAM according to\n+   OPTIONS.  VAL is the object to print.  Returns non-zero if the\n+   value was successfully pretty-printed.\n \n    Extension languages are tried in the order specified by\n    extension_languages.  The first one to provide a pretty-printed\n@@ -488,10 +485,8 @@ ext_lang_type_printers::~ext_lang_type_printers ()\n    errors that trigger an exception in the extension language.  */\n \n int\n-apply_ext_lang_val_pretty_printer (struct type *type,\n-\t\t\t\t   LONGEST embedded_offset, CORE_ADDR address,\n+apply_ext_lang_val_pretty_printer (struct value *val,\n \t\t\t\t   struct ui_file *stream, int recurse,\n-\t\t\t\t   struct value *val,\n \t\t\t\t   const struct value_print_options *options,\n \t\t\t\t   const struct language_defn *language)\n {\n@@ -504,10 +499,8 @@ apply_ext_lang_val_pretty_printer (struct type *type,\n \n       if (extlang->ops->apply_val_pretty_printer == NULL)\n \tcontinue;\n-      rc = extlang->ops->apply_val_pretty_printer (extlang, type,\n-\t\t\t\t\t\t   embedded_offset, address,\n-\t\t\t\t\t\t   stream, recurse, val,\n-\t\t\t\t\t\t   options, language);\n+      rc = extlang->ops->apply_val_pretty_printer (extlang, val, stream,\n+\t\t\t\t\t\t   recurse, options, language);\n       switch (rc)\n \t{\n \tcase EXT_LANG_RC_OK:"
    },
    {
      "sha": "c840dbc70436321599220f69783e9e81155a8e27",
      "filename": "gdb/extension.h",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/extension.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/extension.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.h?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -283,10 +283,8 @@ extern char *apply_ext_lang_type_printers (struct ext_lang_type_printers *,\n \t\t\t\t\t   struct type *);\n \n extern int apply_ext_lang_val_pretty_printer\n-  (struct type *type,\n-   LONGEST embedded_offset, CORE_ADDR address,\n-   struct ui_file *stream, int recurse,\n-   struct value *val, const struct value_print_options *options,\n+  (struct value *value, struct ui_file *stream, int recurse,\n+   const struct value_print_options *options,\n    const struct language_defn *language);\n \n extern enum ext_lang_bt_status apply_ext_lang_frame_filter"
    },
    {
      "sha": "c501e2bc4a54923ee334ae8342f7c900beda9e66",
      "filename": "gdb/guile/guile-internal.h",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/guile/guile-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/guile/guile-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/guile-internal.h?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -579,6 +579,7 @@ extern struct value *vlscm_scm_to_value (SCM scm);\n extern int vlscm_is_value (SCM scm);\n \n extern SCM vlscm_scm_from_value (struct value *value);\n+extern SCM vlscm_scm_from_value_no_release (struct value *value);\n \n extern struct value *vlscm_convert_typed_value_from_scheme\n   (const char *func_name, int obj_arg_pos, SCM obj,\n@@ -602,10 +603,8 @@ extern void gdbscm_preserve_values\n \n extern enum ext_lang_rc gdbscm_apply_val_pretty_printer\n   (const struct extension_language_defn *,\n-   struct type *type,\n-   LONGEST embedded_offset, CORE_ADDR address,\n-   struct ui_file *stream, int recurse,\n    struct value *val,\n+   struct ui_file *stream, int recurse,\n    const struct value_print_options *options,\n    const struct language_defn *language);\n "
    },
    {
      "sha": "ccc616445138be550d2ee7d738a420cb2f4f61ac",
      "filename": "gdb/guile/scm-pretty-print.c",
      "status": "modified",
      "additions": 6,
      "deletions": 10,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/guile/scm-pretty-print.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/guile/scm-pretty-print.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-pretty-print.c?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -943,36 +943,32 @@ ppscm_print_children (SCM printer, enum display_hint hint,\n \n enum ext_lang_rc\n gdbscm_apply_val_pretty_printer (const struct extension_language_defn *extlang,\n-\t\t\t\t struct type *type,\n-\t\t\t\t LONGEST embedded_offset, CORE_ADDR address,\n+\t\t\t\t struct value *value,\n \t\t\t\t struct ui_file *stream, int recurse,\n-\t\t\t\t struct value *val,\n \t\t\t\t const struct value_print_options *options,\n \t\t\t\t const struct language_defn *language)\n {\n+  struct type *type = value_type (value);\n   struct gdbarch *gdbarch = get_type_arch (type);\n   SCM exception = SCM_BOOL_F;\n   SCM printer = SCM_BOOL_F;\n   SCM val_obj = SCM_BOOL_F;\n-  struct value *value;\n   enum display_hint hint;\n   enum ext_lang_rc result = EXT_LANG_RC_NOP;\n   enum string_repr_result print_result;\n \n-  if (value_lazy (val))\n-    value_fetch_lazy (val);\n+  if (value_lazy (value))\n+    value_fetch_lazy (value);\n \n   /* No pretty-printer support for unavailable values.  */\n-  if (!value_bytes_available (val, embedded_offset, TYPE_LENGTH (type)))\n+  if (!value_bytes_available (value, 0, TYPE_LENGTH (type)))\n     return EXT_LANG_RC_NOP;\n \n   if (!gdb_scheme_initialized)\n     return EXT_LANG_RC_NOP;\n \n   /* Instantiate the printer.  */\n-  value = value_from_component (val, type, embedded_offset);\n-\n-  val_obj = vlscm_scm_from_value (value);\n+  val_obj = vlscm_scm_from_value_no_release (value);\n   if (gdbscm_is_exception (val_obj))\n     {\n       exception = val_obj;"
    },
    {
      "sha": "53b373e19deb2c0fcc57c65c4cde4c802c94d7c2",
      "filename": "gdb/guile/scm-value.c",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/guile/scm-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/guile/scm-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-value.c?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -261,6 +261,24 @@ vlscm_scm_from_value (struct value *value)\n   return v_scm;\n }\n \n+/* Create a new <gdb:value> object that encapsulates VALUE.\n+   The value is not released from the all_values chain.  */\n+\n+SCM\n+vlscm_scm_from_value_no_release (struct value *value)\n+{\n+  /* N.B. It's important to not cause any side-effects until we know the\n+     conversion worked.  */\n+  SCM v_scm = vlscm_make_value_smob ();\n+  value_smob *v_smob = (value_smob *) SCM_SMOB_DATA (v_scm);\n+\n+  value_incref (value);\n+  v_smob->value = value;\n+  vlscm_remember_scheme_value (v_smob);\n+\n+  return v_scm;\n+}\n+\n /* Returns the <gdb:value> object in SELF.\n    Throws an exception if SELF is not a <gdb:value> object.  */\n "
    },
    {
      "sha": "7cb20df7f26729b137d1499f9c8ce1ff61cf728a",
      "filename": "gdb/python/py-prettyprint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/python/py-prettyprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/python/py-prettyprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-prettyprint.c?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -558,33 +558,28 @@ print_children (PyObject *printer, const char *hint,\n \n enum ext_lang_rc\n gdbpy_apply_val_pretty_printer (const struct extension_language_defn *extlang,\n-\t\t\t\tstruct type *type,\n-\t\t\t\tLONGEST embedded_offset, CORE_ADDR address,\n+\t\t\t\tstruct value *value,\n \t\t\t\tstruct ui_file *stream, int recurse,\n-\t\t\t\tstruct value *val,\n \t\t\t\tconst struct value_print_options *options,\n \t\t\t\tconst struct language_defn *language)\n {\n+  struct type *type = value_type (value);\n   struct gdbarch *gdbarch = get_type_arch (type);\n-  struct value *value;\n   enum string_repr_result print_result;\n \n-  if (value_lazy (val))\n-    value_fetch_lazy (val);\n+  if (value_lazy (value))\n+    value_fetch_lazy (value);\n \n   /* No pretty-printer support for unavailable values.  */\n-  if (!value_bytes_available (val, embedded_offset, TYPE_LENGTH (type)))\n+  if (!value_bytes_available (value, 0, TYPE_LENGTH (type)))\n     return EXT_LANG_RC_NOP;\n \n   if (!gdb_python_initialized)\n     return EXT_LANG_RC_NOP;\n \n   gdbpy_enter enter_py (gdbarch, language);\n \n-  /* Instantiate the printer.  */\n-  value = value_from_component (val, type, embedded_offset);\n-\n-  gdbpy_ref<> val_obj (value_to_value_object (value));\n+  gdbpy_ref<> val_obj (value_to_value_object_no_release (value));\n   if (val_obj == NULL)\n     {\n       print_stack_unless_memory_error (stream);"
    },
    {
      "sha": "bc75a68326e620b0f357216cc5c1a3dfc6d47713",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -1788,6 +1788,27 @@ value_to_value_object (struct value *val)\n   return (PyObject *) val_obj;\n }\n \n+/* Returns an object for a value, but without releasing it from the\n+   all_values chain.  */\n+PyObject *\n+value_to_value_object_no_release (struct value *val)\n+{\n+  value_object *val_obj;\n+\n+  val_obj = PyObject_New (value_object, &value_object_type);\n+  if (val_obj != NULL)\n+    {\n+      value_incref (val);\n+      val_obj->value = val;\n+      val_obj->address = NULL;\n+      val_obj->type = NULL;\n+      val_obj->dynamic_type = NULL;\n+      note_value (val_obj);\n+    }\n+\n+  return (PyObject *) val_obj;\n+}\n+\n /* Returns a borrowed reference to the struct value corresponding to\n    the given value object.  */\n struct value *"
    },
    {
      "sha": "e352b30382804cfc293f065c5c5a70de4cb25268",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -391,10 +391,8 @@ extern int gdbpy_auto_load_enabled (const struct extension_language_defn *);\n \n extern enum ext_lang_rc gdbpy_apply_val_pretty_printer\n   (const struct extension_language_defn *,\n-   struct type *type,\n-   LONGEST embedded_offset, CORE_ADDR address,\n+   struct value *value,\n    struct ui_file *stream, int recurse,\n-   struct value *val,\n    const struct value_print_options *options,\n    const struct language_defn *language);\n extern enum ext_lang_bt_status gdbpy_apply_frame_filter\n@@ -456,6 +454,7 @@ PyObject *symbol_to_symbol_object (struct symbol *sym);\n PyObject *block_to_block_object (const struct block *block,\n \t\t\t\t struct objfile *objfile);\n PyObject *value_to_value_object (struct value *v);\n+PyObject *value_to_value_object_no_release (struct value *v);\n PyObject *type_to_type_object (struct type *);\n PyObject *frame_info_to_frame_object (struct frame_info *frame);\n PyObject *symtab_to_linetable_object (PyObject *symtab);"
    },
    {
      "sha": "07f5c5775304cfbef8bce65f740bff66e01a6bfd",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42331a1ea2a13ce15ec202c5f0fbef3e5171253c/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=42331a1ea2a13ce15ec202c5f0fbef3e5171253c",
      "patch": "@@ -1279,9 +1279,13 @@ do_val_print (struct value *full_value,\n \n   if (!options->raw)\n     {\n-      ret = apply_ext_lang_val_pretty_printer (type, embedded_offset,\n-\t\t\t\t\t       address, stream, recurse,\n-\t\t\t\t\t       val, options, language);\n+      struct value *v = full_value;\n+\n+      if (v == nullptr)\n+\tv = value_from_component (val, type, embedded_offset);\n+\n+      ret = apply_ext_lang_val_pretty_printer (v, stream, recurse, options,\n+\t\t\t\t\t       language);\n       if (ret)\n \treturn;\n     }\n@@ -1477,11 +1481,8 @@ value_print (struct value *val, struct ui_file *stream,\n   if (!options->raw)\n     {\n       int r\n-\t= apply_ext_lang_val_pretty_printer (value_type (val),\n-\t\t\t\t\t     value_embedded_offset (val),\n-\t\t\t\t\t     value_address (val),\n-\t\t\t\t\t     stream, 0,\n-\t\t\t\t\t     val, options, current_language);\n+\t= apply_ext_lang_val_pretty_printer (val, stream, 0, options,\n+\t\t\t\t\t     current_language);\n \n       if (r)\n \treturn;"
    }
  ]
}