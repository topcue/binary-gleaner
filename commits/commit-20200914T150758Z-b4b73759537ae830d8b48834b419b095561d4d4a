{
  "sha": "b4b73759537ae830d8b48834b419b095561d4d4a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjRiNzM3NTk1MzdhZTgzMGQ4YjQ4ODM0YjQxOWIwOTU1NjFkNGQ0YQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:58Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:58Z"
    },
    "message": "gdb: add type::is_stub / type::set_is_stub\n\nAdd the `is_stub` and `set_is_stub` methods on `struct type`, in order\nto remove the `TYPE_STUB` macro.  In this patch, the macro is changed to\nuse the getter, so all the call sites of the macro that are used as a\nsetter are changed to use the setter method directly.  The next patch\nwill remove the macro completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <is_stub, set_is_stub>: New methods.\n\t(TYPE_STUB): Use type::is_stub, change all write call sites to\n\tuse type::set_is_stub.\n\nChange-Id: Ie935e8fe72c908afd8718411e83f4ff00c386bf3",
    "tree": {
      "sha": "75c131b31fe269d8878e8fba12d2b58bfd668ac5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/75c131b31fe269d8878e8fba12d2b58bfd668ac5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b4b73759537ae830d8b48834b419b095561d4d4a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4b73759537ae830d8b48834b419b095561d4d4a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b4b73759537ae830d8b48834b419b095561d4d4a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4b73759537ae830d8b48834b419b095561d4d4a/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "20ce41238d912c3ced2870501f0c45cf7a03de92",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/20ce41238d912c3ced2870501f0c45cf7a03de92",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/20ce41238d912c3ced2870501f0c45cf7a03de92"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 31,
    "deletions": 15
  },
  "files": [
    {
      "sha": "1b58171e0f6c9f8168e5e6d3c6dd80a61029fda7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b4b73759537ae830d8b48834b419b095561d4d4a",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <is_stub, set_is_stub>: New methods.\n+\t(TYPE_STUB): Use type::is_stub, change all write call sites to\n+\tuse type::set_is_stub.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_NOSIGN): Remove, replace all uses with"
    },
    {
      "sha": "c126f98ed1d58c9c7207f5c5b2c9c10412039cdc",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=b4b73759537ae830d8b48834b419b095561d4d4a",
      "patch": "@@ -8604,7 +8604,7 @@ ada_to_fixed_type_1 (struct type *type, const gdb_byte *valaddr,\n                    Consider the case of an array, for instance, where the size\n                    of the array is computed from the number of elements in\n                    our array multiplied by the size of its element.  */\n-                TYPE_STUB (fixed_record_type) = 0;\n+\t\tfixed_record_type->set_is_stub (false);\n               }\n           }\n         return fixed_record_type;"
    },
    {
      "sha": "f17401e922a71f079ecc71c4d6d6a863492cf1df",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=b4b73759537ae830d8b48834b419b095561d4d4a",
      "patch": "@@ -16081,18 +16081,18 @@ read_structure_type (struct die_info *die, struct dwarf2_cu *cu)\n     {\n       /* ICC<14 does not output the required DW_AT_declaration on\n \t incomplete types, but gives them a size of zero.  */\n-      TYPE_STUB (type) = 1;\n+      type->set_is_stub (true);\n     }\n   else\n     TYPE_STUB_SUPPORTED (type) = 1;\n \n   if (die_is_declaration (die, cu))\n-    TYPE_STUB (type) = 1;\n+    type->set_is_stub (true);\n   else if (attr == NULL && die->child == NULL\n \t   && producer_is_realview (cu->producer))\n     /* RealView does not output the required DW_AT_declaration\n        on incomplete types.  */\n-    TYPE_STUB (type) = 1;\n+    type->set_is_stub (true);\n \n   /* We need to add the type field to the die immediately so we don't\n      infinitely recurse when dealing with pointers to the structure\n@@ -16631,7 +16631,7 @@ read_enumeration_type (struct die_info *die, struct dwarf2_cu *cu)\n      Types.  When another package uses such a type, an incomplete DIE\n      may be generated by the compiler.  */\n   if (die_is_declaration (die, cu))\n-    TYPE_STUB (type) = 1;\n+    type->set_is_stub (true);\n \n   /* If this type has an underlying type that is not a stub, then we\n      may use its attributes.  We always use the \"unsigned\" attribute\n@@ -18444,7 +18444,7 @@ read_unspecified_type (struct die_info *die, struct dwarf2_cu *cu)\n      such a type, we treat it as a stub, and try to resolve it later on,\n      when needed.  */\n   if (cu->language == language_ada)\n-    TYPE_STUB (type) = 1;\n+    type->set_is_stub (true);\n \n   return set_die_type (die, type, cu);\n }"
    },
    {
      "sha": "687cfe096b76b33e0458ff01fbb398383940db5a",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=b4b73759537ae830d8b48834b419b095561d4d4a",
      "patch": "@@ -867,7 +867,7 @@ allocate_stub_method (struct type *type)\n   mtype = alloc_type_copy (type);\n   mtype->set_code (TYPE_CODE_METHOD);\n   TYPE_LENGTH (mtype) = 1;\n-  TYPE_STUB (mtype) = 1;\n+  mtype->set_is_stub (true);\n   TYPE_TARGET_TYPE (mtype) = type;\n   /* TYPE_SELF_TYPE (mtype) = unknown yet */\n   return mtype;\n@@ -3033,7 +3033,7 @@ check_stub_method (struct type *type, int method_id, int signature_id)\n      We want a method (TYPE_CODE_METHOD).  */\n   smash_to_method_type (mtype, type, TYPE_TARGET_TYPE (mtype),\n \t\t\targtypes, argcount, p[-2] == '.');\n-  TYPE_STUB (mtype) = 0;\n+  mtype->set_is_stub (false);\n   TYPE_FN_FIELD_STUB (f, signature_id) = 0;\n \n   xfree (demangled_name);"
    },
    {
      "sha": "7739757d442cf05e717c9335ccba69ae456519d7",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=b4b73759537ae830d8b48834b419b095561d4d4a",
      "patch": "@@ -220,7 +220,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    if someone referenced a type that wasn't defined in a source file\n    via (struct sir_not_appearing_in_this_film *)).  */\n \n-#define TYPE_STUB(t)\t\t(TYPE_MAIN_TYPE (t)->flag_stub)\n+#define TYPE_STUB(t)\t\t((t)->is_stub ())\n \n /* * The target type of this type is a stub type, and this type needs\n    to be updated if it gets un-stubbed in check_typedef.  Used for\n@@ -846,7 +846,7 @@ struct main_type\n \n   unsigned int m_flag_unsigned : 1;\n   unsigned int m_flag_nosign : 1;\n-  unsigned int flag_stub : 1;\n+  unsigned int m_flag_stub : 1;\n   unsigned int flag_target_stub : 1;\n   unsigned int flag_prototyped : 1;\n   unsigned int flag_varargs : 1;\n@@ -1084,6 +1084,16 @@ struct type\n     this->main_type->m_flag_nosign = has_no_signedness;\n   }\n \n+  bool is_stub () const\n+  {\n+    return this->main_type->m_flag_stub;\n+  }\n+\n+  void set_is_stub (bool is_stub)\n+  {\n+    this->main_type->m_flag_stub = is_stub;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;"
    },
    {
      "sha": "735f00864d9d2db921f3ba5fb4496c4458f96b5c",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=b4b73759537ae830d8b48834b419b095561d4d4a",
      "patch": "@@ -1086,7 +1086,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t   do not create a symbol for it either.  */\n \tif (t->num_fields () == 0)\n \t  {\n-\t    TYPE_STUB (t) = 1;\n+\t    t->set_is_stub (true);\n \t    break;\n \t  }\n \n@@ -4274,7 +4274,7 @@ cross_ref (int fd, union aux_ext *ax, struct type **tpp,\n     {\n       *pname = \"<undefined>\";\n       *tpp = init_type (mdebugread_objfile, type_code, 0, NULL);\n-      TYPE_STUB (*tpp) = 1;\n+      (*tpp)->set_is_stub (true);\n       return result;\n     }\n "
    },
    {
      "sha": "ce4c6f1be3182ef842803250c9fc912abf657801",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4b73759537ae830d8b48834b419b095561d4d4a/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=b4b73759537ae830d8b48834b419b095561d4d4a",
      "patch": "@@ -1650,7 +1650,7 @@ read_type (const char **pp, struct objfile *objfile)\n \ttype->set_code (code);\n \ttype->set_name (type_name);\n \tINIT_CPLUS_SPECIFIC (type);\n-\tTYPE_STUB (type) = 1;\n+\ttype->set_is_stub (true);\n \n \tadd_undefined_type (type, typenums);\n \treturn type;\n@@ -3439,7 +3439,7 @@ read_struct_type (const char **pp, struct type *type, enum type_code type_code,\n \n   INIT_CPLUS_SPECIFIC (type);\n   type->set_code (type_code);\n-  TYPE_STUB (type) = 0;\n+  type->set_is_stub (false);\n \n   /* First comes the total size in bytes.  */\n \n@@ -3614,7 +3614,7 @@ read_enum_type (const char **pp, struct type *type,\n   TYPE_LENGTH (type) = gdbarch_int_bit (gdbarch) / HOST_CHAR_BIT;\n   set_length_in_type_chain (type);\n   type->set_code (TYPE_CODE_ENUM);\n-  TYPE_STUB (type) = 0;\n+  type->set_is_stub (false);\n   if (unsigned_enum)\n     type->set_is_unsigned (true);\n   type->set_num_fields (nsyms);"
    }
  ]
}