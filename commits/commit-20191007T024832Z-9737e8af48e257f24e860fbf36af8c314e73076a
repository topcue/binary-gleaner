{
  "sha": "9737e8af48e257f24e860fbf36af8c314e73076a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTczN2U4YWY0OGUyNTdmMjRlODYwZmJmMzZhZjhjMzE0ZTczMDc2YQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-07T02:47:59Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-07T02:48:32Z"
    },
    "message": "PowerPC section flag tidy\n\nhas_tls_get_addr_call is no longer named correctly as the flag is\nonly set on finding a __tls_get_addr call without tlsld/tlsgd marker\nrelocations.\n\n\t* elf32-ppc.c (nomark_tls_get_addr): Rename from has_tls_get_addr_call\n\tthroughout.\n\t* elf64-ppc.c (nomark_tls_get_addr): Likewise.",
    "tree": {
      "sha": "c4ab7e3d4cd15c0fab8990699a8061d0b653d9df",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c4ab7e3d4cd15c0fab8990699a8061d0b653d9df"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9737e8af48e257f24e860fbf36af8c314e73076a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9737e8af48e257f24e860fbf36af8c314e73076a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9737e8af48e257f24e860fbf36af8c314e73076a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9737e8af48e257f24e860fbf36af8c314e73076a/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8154f49cf4e608a54ea83e16739c9c5b584628e7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8154f49cf4e608a54ea83e16739c9c5b584628e7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8154f49cf4e608a54ea83e16739c9c5b584628e7"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 22,
    "deletions": 14
  },
  "files": [
    {
      "sha": "9f3489920b68bccee621f2c4c5a44e4a5e2cc2ab",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9737e8af48e257f24e860fbf36af8c314e73076a/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9737e8af48e257f24e860fbf36af8c314e73076a/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=9737e8af48e257f24e860fbf36af8c314e73076a",
      "patch": "@@ -1,3 +1,9 @@\n+2019-10-07  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf32-ppc.c (nomark_tls_get_addr): Rename from has_tls_get_addr_call\n+\tthroughout.\n+\t* elf64-ppc.c (nomark_tls_get_addr): Likewise.\n+\n 2019-10-04  Alan Modra  <amodra@gmail.com>\n \n \t* elf64-ppc.c (ppc64_elf_check_relocs): Move initialisation of vars."
    },
    {
      "sha": "d5c3ae9d0b78d53dc5e3239f13bfca0838a0ed0c",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9737e8af48e257f24e860fbf36af8c314e73076a/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9737e8af48e257f24e860fbf36af8c314e73076a/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=9737e8af48e257f24e860fbf36af8c314e73076a",
      "patch": "@@ -2222,8 +2222,9 @@ struct ppc_elf_link_hash_table\n /* Nonzero if this section has TLS related relocations.  */\n #define has_tls_reloc sec_flg0\n \n-/* Nonzero if this section has a call to __tls_get_addr.  */\n-#define has_tls_get_addr_call sec_flg1\n+/* Nonzero if this section has a call to __tls_get_addr lacking marker\n+   relocs.  */\n+#define nomark_tls_get_addr sec_flg1\n \n   /* Flag set when PLTCALL relocs are detected.  */\n #define has_pltcall sec_flg2\n@@ -3010,7 +3011,7 @@ ppc_elf_check_relocs (bfd *abfd,\n \t    ;\n \t  else\n \t    /* Mark this section as having an old-style call.  */\n-\t    sec->has_tls_get_addr_call = 1;\n+\t    sec->nomark_tls_get_addr = 1;\n \t}\n \n       switch (r_type)\n@@ -4464,7 +4465,7 @@ ppc_elf_tls_optimize (bfd *obfd ATTRIBUTE_UNUSED,\n \t\t     setup insn.  If we don't find matching arg setup\n \t\t     relocs, don't do any tls optimization.  */\n \t\t  if (pass == 0\n-\t\t      && sec->has_tls_get_addr_call\n+\t\t      && sec->nomark_tls_get_addr\n \t\t      && h != NULL\n \t\t      && h == htab->tls_get_addr\n \t\t      && !expecting_tls_get_addr\n@@ -4577,7 +4578,7 @@ ppc_elf_tls_optimize (bfd *obfd ATTRIBUTE_UNUSED,\n \t\t  if (pass == 0)\n \t\t    {\n \t\t      if (!expecting_tls_get_addr\n-\t\t\t  || !sec->has_tls_get_addr_call)\n+\t\t\t  || !sec->nomark_tls_get_addr)\n \t\t\tcontinue;\n \n \t\t      if (rel + 1 < relend\n@@ -4627,7 +4628,7 @@ ppc_elf_tls_optimize (bfd *obfd ATTRIBUTE_UNUSED,\n \t\t     indirect call to __tls_get_addr without a marker.\n \t\t     Disable optimization in this case.  */\n \t\t  if ((tls_clear & (TLS_GD | TLS_LD)) != 0\n-\t\t      && !sec->has_tls_get_addr_call\n+\t\t      && !sec->nomark_tls_get_addr\n \t\t      && ((*tls_mask & (TLS_TLS | TLS_MARK))\n \t\t\t  != (TLS_TLS | TLS_MARK)))\n \t\t    continue;\n@@ -7224,7 +7225,7 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \t\t stays with its arg setup insns, ie. that the next\n \t\t reloc is the __tls_get_addr call associated with\n \t\t the current reloc.  Edit both insns.  */\n-\t      if (input_section->has_tls_get_addr_call\n+\t      if (input_section->nomark_tls_get_addr\n \t\t  && rel + 1 < relend\n \t\t  && branch_reloc_hash_match (input_bfd, rel + 1,\n \t\t\t\t\t      htab->tls_get_addr))"
    },
    {
      "sha": "31c86b40278cbc9219ed923e9679e176438c140a",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9737e8af48e257f24e860fbf36af8c314e73076a/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9737e8af48e257f24e860fbf36af8c314e73076a/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=9737e8af48e257f24e860fbf36af8c314e73076a",
      "patch": "@@ -3218,8 +3218,9 @@ struct ppc_link_hash_table\n /* Nonzero if this section has TLS related relocations.  */\n #define has_tls_reloc sec_flg0\n \n-/* Nonzero if this section has an old-style call to __tls_get_addr.  */\n-#define has_tls_get_addr_call sec_flg1\n+/* Nonzero if this section has a call to __tls_get_addr lacking marker\n+   relocations.  */\n+#define nomark_tls_get_addr sec_flg1\n \n /* Nonzero if this section has any toc or got relocs.  */\n #define has_toc_reloc sec_flg2\n@@ -4925,7 +4926,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t    ;\n \t\t  else\n \t\t    /* Mark this section as having an old-style call.  */\n-\t\t    sec->has_tls_get_addr_call = 1;\n+\t\t    sec->nomark_tls_get_addr = 1;\n \t\t}\n \t      plt_list = &h->plt.plist;\n \t    }\n@@ -7833,7 +7834,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t     setup insn.  If we don't find matching arg setup\n \t\t     relocs, don't do any tls optimization.  */\n \t\t  if (pass == 0\n-\t\t      && sec->has_tls_get_addr_call\n+\t\t      && sec->nomark_tls_get_addr\n \t\t      && h != NULL\n \t\t      && (h == &htab->tls_get_addr->elf\n \t\t\t  || h == &htab->tls_get_addr_fd->elf)\n@@ -8034,7 +8035,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t  if (pass == 0)\n \t\t    {\n \t\t      if (!expecting_tls_get_addr\n-\t\t\t  || !sec->has_tls_get_addr_call)\n+\t\t\t  || !sec->nomark_tls_get_addr)\n \t\t\tcontinue;\n \n \t\t      if (rel + 1 < relend\n@@ -8086,7 +8087,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t     Disable optimization in this case.  */\n \t\t  if ((tls_clear & (TLS_GD | TLS_LD)) != 0\n \t\t      && (tls_set & TLS_EXPLICIT) == 0\n-\t\t      && !sec->has_tls_get_addr_call\n+\t\t      && !sec->nomark_tls_get_addr\n \t\t      && ((*tls_mask & (TLS_TLS | TLS_MARK))\n \t\t\t  != (TLS_TLS | TLS_MARK)))\n \t\t    continue;\n@@ -14726,7 +14727,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t stays with its arg setup insns, ie. that the next\n \t\t reloc is the __tls_get_addr call associated with\n \t\t the current reloc.  Edit both insns.  */\n-\t      if (input_section->has_tls_get_addr_call\n+\t      if (input_section->nomark_tls_get_addr\n \t\t  && rel + 1 < relend\n \t\t  && branch_reloc_hash_match (input_bfd, rel + 1,\n \t\t\t\t\t      htab->tls_get_addr,"
    }
  ]
}