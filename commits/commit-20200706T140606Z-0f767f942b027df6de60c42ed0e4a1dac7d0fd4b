{
  "sha": "0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGY3NjdmOTQyYjAyN2RmNmRlNjBjNDJlZDBlNGExZGFjN2QwZmQ0Yg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-05T16:52:10Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-06T14:06:06Z"
    },
    "message": "gdb/python: Add gdb.Architecture.registers method\n\nThis commit adds a new method gdb.Architecture.registers that returns\nan object of the new type gdb.RegisterDescriptorIterator.  This\niterator returns objects of the new type gdb.RegisterDescriptor.\n\nA RegisterDescriptor is not a way to read the value of a register,\nthis is already covered by Frame.read_register, a RegisterDescriptor\nis simply a way to discover from Python, which registers are\navailable for a given architecture.\n\nI did consider just returning a string, the name of each register,\ninstead of a RegisterDescriptor, however, I'm aware that it we don't\nwant to break the existing Python API in any way, so if I return just\na string now, but in the future we want more information about a\nregister then we would have to add a second API to get that\ninformation.  By going straight to a descriptor object now, it is easy\nto add additional properties in the future should we wish to.\n\nRight now the only property of a register that a user can access is\nthe name of the register.\n\nIn future we might want to be able to ask the register about is\nregister groups, or its type.\n\ngdb/ChangeLog:\n\n\t* Makefile.in (SUBDIR_PYTHON_SRCS): Add py-registers.c\n\t* python/py-arch.c (archpy_registers): New function.\n\t(arch_object_methods): Add 'registers' method.\n\t* python/py-registers.c: New file.\n\t* python/python-internal.h\n\t(gdbpy_new_register_descriptor_iterator): Declare.\n\t(gdbpy_initialize_registers): Declare.\n\t* python/python.c (do_start_initialization): Call\n\tgdbpy_initialize_registers.\n\t* NEWS: Mention additions to the Python API.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-arch-reg-names.exp: New file.\n\ngdb/doc/ChangeLog:\n\n\t* python.texi (Python API): Add new section the menu.\n\t(Frames In Python): Add new @anchor.\n\t(Architectures In Python): Document new registers method.\n\t(Registers In Python): New section.",
    "tree": {
      "sha": "8622c96b1d3daffec478f33519bf2011c87e63ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8622c96b1d3daffec478f33519bf2011c87e63ac"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/87dbc77459930f8f65a6d7d1e1db498da4aa74d6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/87dbc77459930f8f65a6d7d1e1db498da4aa74d6"
    }
  ],
  "stats": {
    "total": 452,
    "additions": 452,
    "deletions": 0
  },
  "files": [
    {
      "sha": "e3abc3d651f75f82ca2ea0f8bbc967f93e6f26bb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "patch": "@@ -1,3 +1,16 @@\n+2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* Makefile.in (SUBDIR_PYTHON_SRCS): Add py-registers.c\n+\t* python/py-arch.c (archpy_registers): New function.\n+\t(arch_object_methods): Add 'registers' method.\n+\t* python/py-registers.c: New file.\n+\t* python/python-internal.h\n+\t(gdbpy_new_register_descriptor_iterator): Declare.\n+\t(gdbpy_initialize_registers): Declare.\n+\t* python/python.c (do_start_initialization): Call\n+\tgdbpy_initialize_registers.\n+\t* NEWS: Mention additions to the Python API.\n+\n 2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* NEWS: Mention new Python API method."
    },
    {
      "sha": "9d4844573974c653b94713cc8f4a445202524b17",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "patch": "@@ -401,6 +401,7 @@ SUBDIR_PYTHON_SRCS = \\\n \tpython/py-record.c \\\n \tpython/py-record-btrace.c \\\n \tpython/py-record-full.c \\\n+\tpython/py-registers.c \\\n \tpython/py-signalevent.c \\\n \tpython/py-stopevent.c \\\n \tpython/py-symbol.c \\"
    },
    {
      "sha": "84019a6036e443f55de9e900fbc6093ccb698b95",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "patch": "@@ -120,6 +120,11 @@ GNU/Linux/RISC-V (gdbserver)\triscv*-*-linux*\n   ** New method gdb.PendingFrame.architecture () to retrieve the\n      architecture of the pending frame.\n \n+  ** New gdb.Architecture.registers method that returns a\n+     gdb.RegisterDescriptorIterator object, an iterator that returns\n+     gdb.RegisterDescriptor objects.  The new RegisterDescriptor is a\n+     way to query the registers available for an architecture.\n+\n *** Changes in GDB 9\n \n * 'thread-exited' event is now available in the annotations interface."
    },
    {
      "sha": "d513d7486a5b83024ff8deb2e4c9c8274d1a3ebd",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python.texi (Python API): Add new section to the menu.\n+\t(Frames In Python): Add new @anchor.\n+\t(Architectures In Python): Document new registers method.\n+\t(Registers In Python): New section.\n+\n 2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python.texi (Unwinding Frames in Python): Document"
    },
    {
      "sha": "0ed2764b102bf6f2c1dc4bb7edd049bb7f834bb1",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "patch": "@@ -163,6 +163,7 @@ optional arguments while skipping others.  Example:\n                                 using Python.\n * Lazy Strings In Python::      Python representation of lazy strings.\n * Architectures In Python::     Python representation of architectures.\n+* Registers In Python::         Python representation of registers.\n * TUI Windows In Python::       Implementing new TUI windows.\n @end menu\n \n@@ -4684,6 +4685,7 @@ Return the frame's symtab and line object.\n @xref{Symbol Tables In Python}.\n @end defun\n \n+@anchor{gdbpy_frame_read_register}\n @defun Frame.read_register (register)\n Return the value of @var{register} in this frame.  The @var{register}\n argument must be a string (e.g., @code{'sp'} or @code{'rax'}).\n@@ -5715,6 +5717,37 @@ instruction in bytes.\n @end table\n @end defun\n \n+@anchor{gdbpy_architecture_registers}\n+@defun Architecture.registers (@r{[} @var{reggroup} @r{]})\n+Return a @code{gdb.RegisterDescriptorIterator} (@pxref{Registers In\n+Python}) for all of the registers in @var{reggroup}, a string that is\n+the name of a register group.  If @var{reggroup} is omitted, or is the\n+empty string, then the register group @samp{all} is assumed.\n+@end defun\n+\n+@node Registers In Python\n+@subsubsection Registers In Python\n+@cindex Registers In Python\n+\n+Python code can request from a @code{gdb.Architecture} information\n+about the set of registers available\n+(@pxref{gdbpy_architecture_registers,,@code{Architecture.registers}}).\n+The register information is returned as a\n+@code{gdb.RegisterDescriptorIterator}, which is an iterator that in\n+turn returns @code{gdb.RegisterDescriptor} objects.\n+\n+A @code{gdb.RegisterDescriptor} does not provide the value of a\n+register (@pxref{gdbpy_frame_read_register,,@code{Frame.read_register}}\n+for reading a register's value), instead the @code{RegisterDescriptor}\n+is a way to discover which registers are available for a particular\n+architecture.\n+\n+A @code{gdb.RegisterDescriptor} has the following read-only properties:\n+\n+@defvar RegisterDescriptor.name\n+The name of this register.\n+@end defvar\n+\n @node TUI Windows In Python\n @subsubsection Implementing new TUI windows\n @cindex Python TUI Windows"
    },
    {
      "sha": "15f9f50d7d7e2f25c790c5ed6aefe10360160d3b",
      "filename": "gdb/python/py-arch.c",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/python/py-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/python/py-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-arch.c?ref=0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "patch": "@@ -226,6 +226,28 @@ archpy_disassemble (PyObject *self, PyObject *args, PyObject *kw)\n   return result_list.release ();\n }\n \n+/* Implementation of gdb.Architecture.registers (self, reggroup) -> Iterator.\n+   Returns an iterator over register descriptors for registers in GROUP\n+   within the architecture SELF.  */\n+\n+static PyObject *\n+archpy_registers (PyObject *self, PyObject *args, PyObject *kw)\n+{\n+  static const char *keywords[] = { \"reggroup\", NULL };\n+  struct gdbarch *gdbarch = NULL;\n+  const char *group_name = NULL;\n+\n+  /* Parse method arguments.  */\n+  if (!gdb_PyArg_ParseTupleAndKeywords (args, kw, \"|s\", keywords,\n+\t\t\t\t\t&group_name))\n+    return NULL;\n+\n+  /* Extract the gdbarch from the self object.  */\n+  ARCHPY_REQUIRE_VALID (self, gdbarch);\n+\n+  return gdbpy_new_register_descriptor_iterator (gdbarch, group_name);\n+}\n+\n /* Initializes the Architecture class in the gdb module.  */\n \n int\n@@ -249,6 +271,11 @@ Return the name of the architecture as a string value.\" },\n     \"disassemble (start_pc [, end_pc [, count]]) -> List.\\n\\\n Return a list of at most COUNT disassembled instructions from START_PC to\\n\\\n END_PC.\" },\n+  { \"registers\", (PyCFunction) archpy_registers,\n+    METH_VARARGS | METH_KEYWORDS,\n+    \"registers ([ group-name ]) -> Iterator.\\n\\\n+Return an iterator of register descriptors for the registers in register\\n\\\n+group GROUP-NAME.\" },\n   {NULL}  /* Sentinel */\n };\n "
    },
    {
      "sha": "6ccd17ef8600e043b10a68255f376685b9d1f2c6",
      "filename": "gdb/python/py-registers.c",
      "status": "added",
      "additions": 269,
      "deletions": 0,
      "changes": 269,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/python/py-registers.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/python/py-registers.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-registers.c?ref=0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "patch": "@@ -0,0 +1,269 @@\n+/* Python interface to register, and register group information.\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"gdbarch.h\"\n+#include \"arch-utils.h\"\n+#include \"disasm.h\"\n+#include \"reggroups.h\"\n+#include \"python-internal.h\"\n+\n+/* Structure for iterator over register descriptors.  */\n+typedef struct {\n+  PyObject_HEAD\n+\n+  /* The register group that the user is iterating over.  This will never\n+     be NULL.  */\n+  struct reggroup *reggroup;\n+\n+  /* The next register number to lookup.  Starts at 0 and counts up.  */\n+  int regnum;\n+\n+  /* Pointer back to the architecture we're finding registers for.  */\n+  struct gdbarch *gdbarch;\n+} register_descriptor_iterator_object;\n+\n+extern PyTypeObject register_descriptor_iterator_object_type\n+    CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"register_descriptor_iterator_object\");\n+\n+/* A register descriptor.  */\n+typedef struct {\n+  PyObject_HEAD\n+\n+  /* The register this is a descriptor for.  */\n+  int regnum;\n+\n+  /* The architecture this is a register for.  */\n+  struct gdbarch *gdbarch;\n+} register_descriptor_object;\n+\n+extern PyTypeObject register_descriptor_object_type\n+    CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"register_descriptor_object\");\n+\n+/* Create an return a new gdb.RegisterDescriptor object.  */\n+static PyObject *\n+gdbpy_new_register_descriptor (struct gdbarch *gdbarch,\n+\t\t\t       int regnum)\n+{\n+  /* Create a new object and fill in its details.  */\n+  register_descriptor_object *reg\n+    = PyObject_New (register_descriptor_object,\n+\t\t    &register_descriptor_object_type);\n+  if (reg == NULL)\n+    return NULL;\n+  reg->regnum = regnum;\n+  reg->gdbarch = gdbarch;\n+  return (PyObject *) reg;\n+}\n+\n+/* Convert the register descriptor to a string.  */\n+\n+static PyObject *\n+gdbpy_register_descriptor_to_string (PyObject *self)\n+{\n+  register_descriptor_object *reg\n+    = (register_descriptor_object *) self;\n+  struct gdbarch *gdbarch = reg->gdbarch;\n+  int regnum = reg->regnum;\n+\n+  const char *name = gdbarch_register_name (gdbarch, regnum);\n+  return PyString_FromString (name);\n+}\n+\n+/* Implement gdb.RegisterDescriptor.name attribute get function.  Return a\n+   string that is the name of this register.  Due to checking when register\n+   descriptors are created the name will never by the empty string.  */\n+\n+static PyObject *\n+gdbpy_register_descriptor_name (PyObject *self, void *closure)\n+{\n+  return gdbpy_register_descriptor_to_string (self);\n+}\n+\n+/* Create and return a new gdb.RegisterDescriptorIterator object which\n+   will iterate over all registers in GROUP_NAME for GDBARCH.  If\n+   GROUP_NAME is either NULL or the empty string then the ALL_REGGROUP is\n+   used, otherwise lookup the register group matching GROUP_NAME and use\n+   that.\n+\n+   This function can return NULL if GROUP_NAME isn't found.  */\n+\n+PyObject *\n+gdbpy_new_register_descriptor_iterator (struct gdbarch *gdbarch,\n+\t\t\t\t\tconst char *group_name)\n+{\n+  struct reggroup *grp = NULL;\n+\n+  /* Lookup the requested register group, or find the default.  */\n+  if (group_name == NULL || *group_name == '\\0')\n+    grp = all_reggroup;\n+  else\n+    {\n+      grp = reggroup_find (gdbarch, group_name);\n+      if (grp == NULL)\n+\t{\n+\t  PyErr_SetString (PyExc_ValueError,\n+\t\t\t   _(\"Unknown register group name.\"));\n+\t  return NULL;\n+\t}\n+    }\n+  /* Create a new iterator object initialised for this architecture and\n+     fill in all of the details.  */\n+  register_descriptor_iterator_object *iter\n+    = PyObject_New (register_descriptor_iterator_object,\n+\t\t    &register_descriptor_iterator_object_type);\n+  if (iter == NULL)\n+    return NULL;\n+  iter->regnum = 0;\n+  iter->gdbarch = gdbarch;\n+  gdb_assert (grp != NULL);\n+  iter->reggroup = grp;\n+\n+  return (PyObject *) iter;\n+}\n+\n+/* Return a reference to the gdb.RegisterDescriptorIterator object.  */\n+\n+static PyObject *\n+gdbpy_register_descriptor_iter (PyObject *self)\n+{\n+  Py_INCREF (self);\n+  return self;\n+}\n+\n+/* Return the next register name.  */\n+\n+static PyObject *\n+gdbpy_register_descriptor_iter_next (PyObject *self)\n+{\n+  register_descriptor_iterator_object *iter_obj\n+    = (register_descriptor_iterator_object *) self;\n+  struct gdbarch *gdbarch = iter_obj->gdbarch;\n+\n+  do\n+    {\n+      if (iter_obj->regnum >= gdbarch_num_cooked_regs (gdbarch))\n+\t{\n+\t  PyErr_SetString (PyExc_StopIteration, _(\"No more registers\"));\n+\t  return NULL;\n+\t}\n+\n+      const char *name = nullptr;\n+      int regnum = iter_obj->regnum;\n+      if (gdbarch_register_reggroup_p (gdbarch, regnum,\n+\t\t\t\t       iter_obj->reggroup))\n+\tname = gdbarch_register_name (gdbarch, regnum);\n+      iter_obj->regnum++;\n+\n+      if (name != nullptr && *name != '\\0')\n+\treturn gdbpy_new_register_descriptor (gdbarch, regnum);\n+    }\n+  while (true);\n+}\n+\n+/* Initializes the new Python classes from this file in the gdb module.  */\n+\n+int\n+gdbpy_initialize_registers ()\n+{\n+  register_descriptor_object_type.tp_new = PyType_GenericNew;\n+  if (PyType_Ready (&register_descriptor_object_type) < 0)\n+    return -1;\n+  if (gdb_pymodule_addobject\n+      (gdb_module, \"RegisterDescriptor\",\n+       (PyObject *) &register_descriptor_object_type) < 0)\n+    return -1;\n+\n+  register_descriptor_iterator_object_type.tp_new = PyType_GenericNew;\n+  if (PyType_Ready (&register_descriptor_iterator_object_type) < 0)\n+    return -1;\n+  return (gdb_pymodule_addobject\n+\t  (gdb_module, \"RegisterDescriptorIterator\",\n+\t   (PyObject *) &register_descriptor_iterator_object_type));\n+}\n+\n+PyTypeObject register_descriptor_iterator_object_type = {\n+  PyVarObject_HEAD_INIT (NULL, 0)\n+  \"gdb.RegisterDescriptorIterator\",\t  \t/*tp_name*/\n+  sizeof (register_descriptor_iterator_object),\t/*tp_basicsize*/\n+  0,\t\t\t\t  /*tp_itemsize*/\n+  0,\t\t\t\t  /*tp_dealloc*/\n+  0,\t\t\t\t  /*tp_print*/\n+  0,\t\t\t\t  /*tp_getattr*/\n+  0,\t\t\t\t  /*tp_setattr*/\n+  0,\t\t\t\t  /*tp_compare*/\n+  0,\t\t\t\t  /*tp_repr*/\n+  0,\t\t\t\t  /*tp_as_number*/\n+  0,\t\t\t\t  /*tp_as_sequence*/\n+  0,\t\t\t\t  /*tp_as_mapping*/\n+  0,\t\t\t\t  /*tp_hash */\n+  0,\t\t\t\t  /*tp_call*/\n+  0,\t\t\t\t  /*tp_str*/\n+  0,\t\t\t\t  /*tp_getattro*/\n+  0,\t\t\t\t  /*tp_setattro*/\n+  0,\t\t\t\t  /*tp_as_buffer*/\n+  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_ITER,\t\t\t/*tp_flags*/\n+  \"GDB architecture register descriptor iterator object\",\t/*tp_doc */\n+  0,\t\t\t\t  /*tp_traverse */\n+  0,\t\t\t\t  /*tp_clear */\n+  0,\t\t\t\t  /*tp_richcompare */\n+  0,\t\t\t\t  /*tp_weaklistoffset */\n+  gdbpy_register_descriptor_iter,\t  /*tp_iter */\n+  gdbpy_register_descriptor_iter_next,  /*tp_iternext */\n+  0\t\t\t\t  /*tp_methods */\n+};\n+\n+static gdb_PyGetSetDef gdbpy_register_descriptor_getset[] = {\n+  { \"name\", gdbpy_register_descriptor_name, NULL,\n+    \"The name of this register.\", NULL },\n+  { NULL }  /* Sentinel */\n+};\n+\n+PyTypeObject register_descriptor_object_type = {\n+  PyVarObject_HEAD_INIT (NULL, 0)\n+  \"gdb.RegisterDescriptor\",\t  /*tp_name*/\n+  sizeof (register_descriptor_object),\t/*tp_basicsize*/\n+  0,\t\t\t\t  /*tp_itemsize*/\n+  0,\t\t\t\t  /*tp_dealloc*/\n+  0,\t\t\t\t  /*tp_print*/\n+  0,\t\t\t\t  /*tp_getattr*/\n+  0,\t\t\t\t  /*tp_setattr*/\n+  0,\t\t\t\t  /*tp_compare*/\n+  0,\t\t\t\t  /*tp_repr*/\n+  0,\t\t\t\t  /*tp_as_number*/\n+  0,\t\t\t\t  /*tp_as_sequence*/\n+  0,\t\t\t\t  /*tp_as_mapping*/\n+  0,\t\t\t\t  /*tp_hash */\n+  0,\t\t\t\t  /*tp_call*/\n+  gdbpy_register_descriptor_to_string,\t\t\t/*tp_str*/\n+  0,\t\t\t\t  /*tp_getattro*/\n+  0,\t\t\t\t  /*tp_setattro*/\n+  0,\t\t\t\t  /*tp_as_buffer*/\n+  Py_TPFLAGS_DEFAULT,\t\t  /*tp_flags*/\n+  \"GDB architecture register descriptor object\",\t/*tp_doc */\n+  0,\t\t\t\t  /*tp_traverse */\n+  0,\t\t\t\t  /*tp_clear */\n+  0,\t\t\t\t  /*tp_richcompare */\n+  0,\t\t\t\t  /*tp_weaklistoffset */\n+  0,\t\t\t\t  /*tp_iter */\n+  0,\t\t\t\t  /*tp_iternext */\n+  0,\t\t\t\t  /*tp_methods */\n+  0,\t\t\t\t  /*tp_members */\n+  gdbpy_register_descriptor_getset\t\t\t/*tp_getset */\n+};"
    },
    {
      "sha": "758dc553ce118de6dd69be340bb92d537ed3b9d0",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "patch": "@@ -473,6 +473,9 @@ PyObject *gdbpy_lookup_objfile (PyObject *self, PyObject *args, PyObject *kw);\n \n PyObject *gdbarch_to_arch_object (struct gdbarch *gdbarch);\n \n+PyObject *gdbpy_new_register_descriptor_iterator (struct gdbarch *gdbarch,\n+\t\t\t\t\t\t  const char *group_name);\n+\n gdbpy_ref<thread_object> create_thread_object (struct thread_info *tp);\n gdbpy_ref<> thread_to_thread_object (thread_info *thr);;\n gdbpy_ref<inferior_object> inferior_to_inferior_object (inferior *inf);\n@@ -540,6 +543,8 @@ int gdbpy_initialize_py_events (void)\n   CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n int gdbpy_initialize_arch (void)\n   CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n+int gdbpy_initialize_registers ()\n+  CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n int gdbpy_initialize_xmethods (void)\n   CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n int gdbpy_initialize_unwind (void)"
    },
    {
      "sha": "7787dce4b4cc7d04fb84920c697ab0d8c665b33e",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "patch": "@@ -1759,6 +1759,7 @@ do_start_initialization ()\n       || gdbpy_initialize_py_events () < 0\n       || gdbpy_initialize_event () < 0\n       || gdbpy_initialize_arch () < 0\n+      || gdbpy_initialize_registers () < 0\n       || gdbpy_initialize_xmethods () < 0\n       || gdbpy_initialize_unwind () < 0\n       || gdbpy_initialize_tui () < 0)"
    },
    {
      "sha": "9562c2cffaaf40aecd83c0fd2654d491377c0fa8",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "patch": "@@ -1,3 +1,7 @@\n+2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-arch-reg-names.exp: New file.\n+\n 2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-unwind.py (TestUnwinder::__call__): Add test for"
    },
    {
      "sha": "14bc0a822a42449bc1e2f12097d5b05346506220",
      "filename": "gdb/testsuite/gdb.python/py-arch-reg-names.exp",
      "status": "added",
      "additions": 87,
      "deletions": 0,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/testsuite/gdb.python/py-arch-reg-names.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f767f942b027df6de60c42ed0e4a1dac7d0fd4b/gdb/testsuite/gdb.python/py-arch-reg-names.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-arch-reg-names.exp?ref=0f767f942b027df6de60c42ed0e4a1dac7d0fd4b",
      "patch": "@@ -0,0 +1,87 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Check the gdb.Architecture.registers functionality.\n+\n+load_lib gdb-python.exp\n+standard_testfile py-arch.c\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] } {\n+    return -1\n+}\n+\n+# Skip all tests if Python scripting is not enabled.\n+if { [skip_python_tests] } { continue }\n+\n+if ![runto_main] {\n+   return -1\n+}\n+\n+# First, use 'info registers' to get a list of register names.\n+set regs {}\n+gdb_test_multiple \"info registers general\" \"info registers general\" {\n+    -re \"^info registers general\\r\\n\" {\n+\texp_continue\n+    }\n+    -re \"^(\\[^ \\t\\]+)\\[ \\t\\]+\\[^\\r\\n\\]+\\r\\n\" {\n+\tset reg $expect_out(1,string)\n+\tlappend regs $reg\n+\texp_continue\n+    }\n+    -re \"^$gdb_prompt \" {\n+    }\n+}\n+gdb_assert {[llength $regs] > 0} \\\n+    \"Found at least one register\"\n+\n+# Now get the same register names using Python API.\n+gdb_py_test_silent_cmd \\\n+    \"python frame = gdb.selected_frame()\" \"get frame\" 0\n+gdb_py_test_silent_cmd \\\n+    \"python arch = frame.architecture()\" \"get arch\" 0\n+gdb_py_test_silent_cmd \\\n+    \"python regs = list (arch.registers (\\\"general\\\"))\" \\\n+    \"get general registers\" 0\n+gdb_py_test_silent_cmd \\\n+    \"python regs = map (lambda r : r.name, regs)\" \\\n+    \"get names of general registers\" 0\n+\n+set py_regs {}\n+gdb_test_multiple \"python print (\\\"\\\\n\\\".join (regs))\" \\\n+    \"general register from python\" {\n+\t-re \"^python print \\[^\\r\\n\\]+\\r\\n\" {\n+\t    exp_continue\n+\t}\n+\t-re \"^(\\[^\\r\\n\\]+)\\r\\n\" {\n+\t    set reg $expect_out(1,string)\n+\t    lappend py_regs $reg\n+\t    exp_continue\n+\t}\n+\t-re \"^$gdb_prompt \" {\n+\t}\n+    }\n+\n+gdb_assert {[llength $py_regs] > 0} \\\n+    \"Found at least one register from python\"\n+gdb_assert {[llength $py_regs] == [llength $regs]} \\\n+    \"Same numnber of registers found\"\n+\n+set found_non_match 0\n+for { set i 0 } { $i < [llength $regs] } { incr i } {\n+    if {[lindex $regs $i] != [lindex $py_regs $i]} {\n+\tset found_non_match 1\n+    }\n+}\n+gdb_assert { $found_non_match == 0 } \"all registers match\""
    }
  ]
}