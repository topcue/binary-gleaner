{
  "sha": "1f1f5b92e811e9c7485129c065a9ff2c409303a4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWYxZjViOTJlODExZTljNzQ4NTEyOWMwNjVhOWZmMmM0MDkzMDNhNA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-13T01:39:41Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-13T03:13:42Z"
    },
    "message": "Always add input_statement to statement_list\n\nI think this is safer than leaving an input_statement added during\nopen_input_bfds off the list.  There are a number of places that\nfiddle with various lists and might be confused by an off-list\nstatement, eg. orphan handling.\n\n\t* ldlang.c (new_afile): Remove add_to_list parameter.\n\t(lang_add_input_file): Update new_afile calls.\n\t(lookup_name): Splice input_statement added by new_afile into\n\tstatement_list after current input_file_chain entry.\n\t(lang_process): Update comment.",
    "tree": {
      "sha": "4e74326d61d5579cc6e04e4c614bb48f83b015bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4e74326d61d5579cc6e04e4c614bb48f83b015bd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1f1f5b92e811e9c7485129c065a9ff2c409303a4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f1f5b92e811e9c7485129c065a9ff2c409303a4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1f1f5b92e811e9c7485129c065a9ff2c409303a4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f1f5b92e811e9c7485129c065a9ff2c409303a4/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ec6c8338a89b0ec022b66ed3efdd1577e6449d6d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec6c8338a89b0ec022b66ed3efdd1577e6449d6d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ec6c8338a89b0ec022b66ed3efdd1577e6449d6d"
    }
  ],
  "stats": {
    "total": 49,
    "additions": 32,
    "deletions": 17
  },
  "files": [
    {
      "sha": "b2d41517169227754af54241483a2e566e97a1d4",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1f1f5b92e811e9c7485129c065a9ff2c409303a4/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1f1f5b92e811e9c7485129c065a9ff2c409303a4/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=1f1f5b92e811e9c7485129c065a9ff2c409303a4",
      "patch": "@@ -1,3 +1,11 @@\n+2019-09-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* ldlang.c (new_afile): Remove add_to_list parameter.\n+\t(lang_add_input_file): Update new_afile calls.\n+\t(lookup_name): Splice input_statement added by new_afile into\n+\tstatement_list after current input_file_chain entry.\n+\t(lang_process): Update comment.\n+\n 2019-09-12  Alan Modra  <amodra@gmail.com>\n \n \t* ldlang.c (print_input_statement): Do not exclude linker created"
    },
    {
      "sha": "8beccd373636df55cf8774e05562108b7ca70773",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 24,
      "deletions": 17,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1f1f5b92e811e9c7485129c065a9ff2c409303a4/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1f1f5b92e811e9c7485129c065a9ff2c409303a4/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=1f1f5b92e811e9c7485129c065a9ff2c409303a4",
      "patch": "@@ -1080,22 +1080,13 @@ new_statement (enum statement_enum type,\n static lang_input_statement_type *\n new_afile (const char *name,\n \t   lang_input_file_enum_type file_type,\n-\t   const char *target,\n-\t   bfd_boolean add_to_list)\n+\t   const char *target)\n {\n   lang_input_statement_type *p;\n \n   lang_has_input_file = TRUE;\n \n-  if (add_to_list)\n-    p = new_stat (lang_input_statement, stat_ptr);\n-  else\n-    {\n-      p = stat_alloc (sizeof (lang_input_statement_type));\n-      p->header.type = lang_input_statement_enum;\n-      p->header.next = NULL;\n-    }\n-\n+  p = new_stat (lang_input_statement, stat_ptr);\n   memset (&p->the_bfd, 0,\n \t  sizeof (*p) - offsetof (lang_input_statement_type, the_bfd));\n   p->target = target;\n@@ -1177,12 +1168,12 @@ lang_add_input_file (const char *name,\n \t within the sysroot subdirectory.)  */\n       unsigned int outer_sysrooted = input_flags.sysrooted;\n       input_flags.sysrooted = 0;\n-      ret = new_afile (sysrooted_name, file_type, target, TRUE);\n+      ret = new_afile (sysrooted_name, file_type, target);\n       input_flags.sysrooted = outer_sysrooted;\n       return ret;\n     }\n \n-  return new_afile (name, file_type, target, TRUE);\n+  return new_afile (name, file_type, target);\n }\n \n struct out_section_hash_entry\n@@ -2861,8 +2852,25 @@ lookup_name (const char *name)\n     }\n \n   if (search == NULL)\n-    search = new_afile (name, lang_input_file_is_search_file_enum,\n-\t\t\tdefault_target, FALSE);\n+    {\n+      /* Arrange to splice the input statement added by new_afile into\n+\t statement_list after the current input_file_chain tail.\n+\t We know input_file_chain is not an empty list, and that\n+\t lookup_name was called via open_input_bfds.  Later calls to\n+\t lookup_name should always match an existing input_statement.  */\n+      lang_statement_union_type **tail = stat_ptr->tail;\n+      lang_statement_union_type **after\n+\t= (void *) ((char *) input_file_chain.tail\n+\t\t    - offsetof (lang_input_statement_type, next_real_file)\n+\t\t    + offsetof (lang_input_statement_type, header.next));\n+      lang_statement_union_type *rest = *after;\n+      stat_ptr->tail = after;\n+      search = new_afile (name, lang_input_file_is_search_file_enum,\n+\t\t\t  default_target);\n+      *stat_ptr->tail = rest;\n+      if (*tail == NULL)\n+\tstat_ptr->tail = tail;\n+    }\n \n   /* If we have already added this file, or this file is not real\n      don't add this file.  */\n@@ -7501,8 +7509,7 @@ lang_process (void)\n \t      if (*prev != (void *) plugin_insert->next_real_file)\n \t\t{\n \t\t  /* We didn't find the expected input statement.\n-\t\t     This can happen due to lookup_name creating input\n-\t\t     statements not linked into the statement list.  */\n+\t\t     Fall back to adding after plugin_insert.  */\n \t\t  prev = &plugin_insert->header.next;\n \t\t}\n \t    }"
    }
  ]
}