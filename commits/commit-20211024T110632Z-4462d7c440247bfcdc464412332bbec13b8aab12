{
  "sha": "4462d7c440247bfcdc464412332bbec13b8aab12",
  "node_id": "C_kwDOANOeidoAKDQ0NjJkN2M0NDAyNDdiZmNkYzQ2NDQxMjMzMmJiZWMxM2I4YWFiMTI",
  "commit": {
    "author": {
      "name": "liuzhensong",
      "email": "liuzhensong@loongson.cn",
      "date": "2021-10-22T08:42:06Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-24T11:06:32Z"
    },
    "message": "LoongArch gas support\n\n2021-10-22  Chenghua Xu  <xuchenghua@loongson.cn>\n            Zhensong Liu  <liuzhensong@loongson.cn>\n            Weinan Liu  <liuweinan@loongson.cn>\n\t    Xiaolin Tang  <tangxiaolin@loongson.cn>\n\ngas/\n\t* Makefile.am: Add LoongArch.\n\t* NEWS: Mention LoongArch support.\n\t* config/loongarch-lex-wrapper.c: New.\n\t* config/loongarch-lex.h: New.\n\t* config/loongarch-lex.l: New.\n\t* config/loongarch-parse.y: New.\n\t* config/tc-loongarch.c: New.\n\t* config/tc-loongarch.h: New.\n\t* configure.ac: Add LoongArch.\n\t* configure.tgt: Likewise.\n\t* doc/as.texi: Likewise.\n\t* doc/c-loongarch.texi: Likewise.\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\t* po/POTFILES.in: Regenerate.\ngas/testsuite/\n\t* gas/all/gas.exp: Add LoongArch.\n\t* gas/elf/elf.exp: Likewise.\n\t* gas/loongarch/4opt_op.d: New.\n\t* gas/loongarch/4opt_op.s: Likewise.\n\t* gas/loongarch/fix_op.d: Likewise.\n\t* gas/loongarch/fix_op.s: Likewise.\n\t* gas/loongarch/float_op.d: Likewise.\n\t* gas/loongarch/float_op.s: Likewise.\n\t* gas/loongarch/imm_op.d: Likewise.\n\t* gas/loongarch/imm_op.s: Likewise.\n\t* gas/loongarch/jmp_op.d: Likewise.\n\t* gas/loongarch/jmp_op.s: Likewise.\n\t* gas/loongarch/load_store_op.d: Likewise.\n\t* gas/loongarch/load_store_op.s: Likewise.\n\t* gas/loongarch/loongarch.exp: Likewise.\n\t* gas/loongarch/macro_op.d: Likewise.\n\t* gas/loongarch/macro_op.s: Likewise.\n\t* gas/loongarch/nop.d: Likewise.\n\t* gas/loongarch/nop.s: Likewise.\n\t* gas/loongarch/privilege_op.d: Likewise.\n\t* gas/loongarch/privilege_op.s: Likewise.\n\t* gas/loongarch/syscall.d: Likewise.\n\t* gas/loongarch/syscall.s: Likewise.\n\t* lib/gas-defs.exp: Add LoongArch.",
    "tree": {
      "sha": "7559eea153d11930124e45d3fa6ead17ceefde8e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7559eea153d11930124e45d3fa6ead17ceefde8e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4462d7c440247bfcdc464412332bbec13b8aab12",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4462d7c440247bfcdc464412332bbec13b8aab12",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4462d7c440247bfcdc464412332bbec13b8aab12",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4462d7c440247bfcdc464412332bbec13b8aab12/comments",
  "author": null,
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e9a0721f8274daeffaedbc3cabc12c52d43a38a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e9a0721f8274daeffaedbc3cabc12c52d43a38a7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e9a0721f8274daeffaedbc3cabc12c52d43a38a7"
    }
  ],
  "stats": {
    "total": 4157,
    "additions": 4152,
    "deletions": 5
  },
  "files": [
    {
      "sha": "7678ee61144e6f8436d954d5f76be47f78af0c06",
      "filename": "gas/Makefile.am",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/Makefile.am?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -154,6 +154,7 @@ TARGET_CPU_CFILES = \\\n \tconfig/tc-ip2k.c \\\n \tconfig/tc-iq2000.c \\\n \tconfig/tc-lm32.c \\\n+\tconfig/tc-loongarch.c \\\n \tconfig/tc-m32c.c \\\n \tconfig/tc-m32r.c \\\n \tconfig/tc-m68hc11.c \\\n@@ -374,7 +375,8 @@ EXTRA_SCRIPTS = .gdbinit\n EXTRA_DIST = config/m68k-parse.c itbl-parse.c itbl-parse.h itbl-lex.c \\\n \tconfig/bfin-parse.c config/bfin-parse.h config/bfin-lex.c \\\n \tconfig/rl78-parse.c config/rl78-parse.h \\\n-\tconfig/rx-parse.c config/rx-parse.h\n+\tconfig/rx-parse.c config/rx-parse.h \\\n+\tconfig/loongarch-parse.c config/loongarch-parse.h config/loongarch-lex.c\n \n diststuff: $(EXTRA_DIST) info\n \n@@ -471,6 +473,19 @@ config/rx-parse.c: $(srcdir)/config/rx-parse.y\n config/rx-parse.h: config/rx-parse.c\n \t@true\n \n+# The LoongArch lexical analyzer and parser.\n+EXTRA_as_new_SOURCES += config/loongarch-parse.y\n+config/loongarch-parse.c: $(srcdir)/config/loongarch-parse.y\n+\t$(SHELL) $(YLWRAP) $(srcdir)/config/loongarch-parse.y y.tab.c $@ y.tab.h config/loongarch-parse.h -- $(YACCCOMPILE) -d ;\n+config/loongarch-parse.h: config/loongarch-parse.c\n+\t@true\n+\n+EXTRA_as_new_SOURCES += config/loongarch-lex.l\n+config/loongarch-lex.c: $(srcdir)/config/loongarch-lex.l\n+\t$(SHELL) $(YLWRAP) $(srcdir)/config/loongarch-lex.l lex.yy.c $@ -- $(LEXCOMPILE)\n+\n+config/loongarch-lex-wrapper.@OBJEXT@: config/loongarch-lex.c config/loongarch-parse.h\n+\n # The mips instruction table specification lexical analyzer and parser.\n \n itbl-lex-wrapper.@OBJEXT@: itbl-lex.c itbl-parse.h"
    },
    {
      "sha": "ff11adb0f7057d4a7900fe56957673bcb9ca4dfa",
      "filename": "gas/Makefile.in",
      "status": "modified",
      "additions": 26,
      "deletions": 2,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/Makefile.in?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -544,6 +544,7 @@ TARGET_CPU_CFILES = \\\n \tconfig/tc-ip2k.c \\\n \tconfig/tc-iq2000.c \\\n \tconfig/tc-lm32.c \\\n+\tconfig/tc-loongarch.c \\\n \tconfig/tc-m32c.c \\\n \tconfig/tc-m32r.c \\\n \tconfig/tc-m68hc11.c \\\n@@ -757,7 +758,8 @@ EXTRA_SCRIPTS = .gdbinit\n EXTRA_DIST = config/m68k-parse.c itbl-parse.c itbl-parse.h itbl-lex.c \\\n \tconfig/bfin-parse.c config/bfin-parse.h config/bfin-lex.c \\\n \tconfig/rl78-parse.c config/rl78-parse.h \\\n-\tconfig/rx-parse.c config/rx-parse.h\n+\tconfig/rx-parse.c config/rx-parse.h \\\n+\tconfig/loongarch-parse.c config/loongarch-parse.h config/loongarch-lex.c\n \n DISTCLEANFILES = targ-cpu.h obj-format.h targ-env.h itbl-cpu.h cgen-desc.h\n \n@@ -789,12 +791,15 @@ as_new_LDADD = $(TARG_CPU_O) $(OBJ_FORMAT_O) $(ATOF_TARG_O) \\\n as_new_DEPENDENCIES = $(TARG_CPU_O) $(OBJ_FORMAT_O) $(ATOF_TARG_O) \\\n \t$(extra_objects) $(GASLIBS) $(LIBINTL_DEP)\n \n+\n+# The LoongArch lexical analyzer and parser.\n EXTRA_as_new_SOURCES = $(CFILES) $(HFILES) $(TARGET_CPU_CFILES) \\\n \t$(TARGET_CPU_HFILES) $(TARGET_EXTRA_FILES) $(TARG_ENV_CFILES) \\\n \t$(OBJ_FORMAT_CFILES) $(OBJ_FORMAT_HFILES) \\\n \t$(CONFIG_ATOF_CFILES) $(MULTI_CFILES) config/m68k-parse.y \\\n \tconfig/bfin-parse.y config/bfin-lex.l config/rl78-parse.y \\\n-\tconfig/rx-parse.y\n+\tconfig/rx-parse.y config/loongarch-parse.y \\\n+\tconfig/loongarch-lex.l\n EXPECT = expect\n RUNTEST = runtest\n RUNTESTFLAGS = \n@@ -939,6 +944,8 @@ config/tc-iq2000.$(OBJEXT): config/$(am__dirstamp) \\\n \tconfig/$(DEPDIR)/$(am__dirstamp)\n config/tc-lm32.$(OBJEXT): config/$(am__dirstamp) \\\n \tconfig/$(DEPDIR)/$(am__dirstamp)\n+config/tc-loongarch.$(OBJEXT): config/$(am__dirstamp) \\\n+\tconfig/$(DEPDIR)/$(am__dirstamp)\n config/tc-m32c.$(OBJEXT): config/$(am__dirstamp) \\\n \tconfig/$(DEPDIR)/$(am__dirstamp)\n config/tc-m32r.$(OBJEXT): config/$(am__dirstamp) \\\n@@ -1085,6 +1092,10 @@ config/rl78-parse.$(OBJEXT): config/$(am__dirstamp) \\\n \tconfig/$(DEPDIR)/$(am__dirstamp)\n config/rx-parse.$(OBJEXT): config/$(am__dirstamp) \\\n \tconfig/$(DEPDIR)/$(am__dirstamp)\n+config/loongarch-parse.$(OBJEXT): config/$(am__dirstamp) \\\n+\tconfig/$(DEPDIR)/$(am__dirstamp)\n+config/loongarch-lex.$(OBJEXT): config/$(am__dirstamp) \\\n+\tconfig/$(DEPDIR)/$(am__dirstamp)\n \n as-new$(EXEEXT): $(as_new_OBJECTS) $(as_new_DEPENDENCIES) $(EXTRA_as_new_DEPENDENCIES) \n \t@rm -f as-new$(EXEEXT)\n@@ -1146,6 +1157,8 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/e-i386coff.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/e-i386elf.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/e-mipself.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/loongarch-lex.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/loongarch-parse.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/m68k-parse.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/obj-aout.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/obj-coff.Po@am__quote@\n@@ -1183,6 +1196,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/tc-ip2k.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/tc-iq2000.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/tc-lm32.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/tc-loongarch.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/tc-m32c.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/tc-m32r.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@config/$(DEPDIR)/tc-m68hc11.Po@am__quote@\n@@ -1452,6 +1466,8 @@ maintainer-clean-generic:\n \t@echo \"it deletes files that may require special tools to rebuild.\"\n \t-rm -f config/bfin-lex.c\n \t-rm -f config/bfin-parse.c\n+\t-rm -f config/loongarch-lex.c\n+\t-rm -f config/loongarch-parse.c\n \t-rm -f config/m68k-parse.c\n \t-rm -f config/rl78-parse.c\n \t-rm -f config/rx-parse.c\n@@ -1601,6 +1617,14 @@ config/rx-parse.c: $(srcdir)/config/rx-parse.y\n \t$(SHELL) $(YLWRAP) $(srcdir)/config/rx-parse.y y.tab.c $@ y.tab.h config/rx-parse.h -- $(YACCCOMPILE) -d ;\n config/rx-parse.h: config/rx-parse.c\n \t@true\n+config/loongarch-parse.c: $(srcdir)/config/loongarch-parse.y\n+\t$(SHELL) $(YLWRAP) $(srcdir)/config/loongarch-parse.y y.tab.c $@ y.tab.h config/loongarch-parse.h -- $(YACCCOMPILE) -d ;\n+config/loongarch-parse.h: config/loongarch-parse.c\n+\t@true\n+config/loongarch-lex.c: $(srcdir)/config/loongarch-lex.l\n+\t$(SHELL) $(YLWRAP) $(srcdir)/config/loongarch-lex.l lex.yy.c $@ -- $(LEXCOMPILE)\n+\n+config/loongarch-lex-wrapper.@OBJEXT@: config/loongarch-lex.c config/loongarch-parse.h\n \n # The mips instruction table specification lexical analyzer and parser.\n "
    },
    {
      "sha": "09fade54087b80b671df4e7b5bcc25ba25a7af0e",
      "filename": "gas/NEWS",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/NEWS?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -1,5 +1,7 @@\n -*- text -*-\n \n+* Add support for the LoongArch instruction set.\n+\n * Add a command-line option, -muse-unaligned-vector-move, for x86 target\n   to encode aligned vector move as unaligned vector move.\n "
    },
    {
      "sha": "b3d290dc9feb59f54f8c3e384224a1035745b243",
      "filename": "gas/config/loongarch-lex-wrapper.c",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/loongarch-lex-wrapper.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/loongarch-lex-wrapper.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/loongarch-lex-wrapper.c?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,20 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GAS, the GNU Assembler.\n+\n+   GAS is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GAS is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"sysdep.h\"\n+#include \"config/loongarch-lex.c\""
    },
    {
      "sha": "e2b3a4e5560374f1c33b7896bfc226a82150f836",
      "filename": "gas/config/loongarch-lex.h",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/loongarch-lex.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/loongarch-lex.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/loongarch-lex.h?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,34 @@\n+/*\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GAS, the GNU Assembler.\n+\n+   GAS is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GAS is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+\n+struct yy_buffer_state;\n+\n+\n+struct yy_buffer_state *yy_scan_string (const char *);\n+void yy_delete_buffer (struct yy_buffer_state *b);\n+void get_internal_label (expressionS *label_expr,\n+\t\t\tunsigned long label,\n+\t\t\tint augend);\n+int\n+loongarch_parse_expr (const char *expr,\n+\t\t      struct reloc_info *reloc_stack_top,\n+\t\t      size_t max_reloc_num,\n+\t\t      size_t *reloc_num,\n+\t\t      offsetT *imm);"
    },
    {
      "sha": "8ced60a43aeeb961a223a8a1e45f776cfea4a704",
      "filename": "gas/config/loongarch-lex.l",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/loongarch-lex.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/loongarch-lex.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/loongarch-lex.l?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,61 @@\n+%option noyywrap\n+/*\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GAS, the GNU Assembler.\n+\n+   GAS is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GAS is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+%{\n+#include \"as.h\"\n+#include \"loongarch-parse.h\"\n+\n+/* Flex generates static functions \"input\" & \"unput\" which are not used.  */\n+#define YY_NO_INPUT\n+#define YY_NO_UNPUT\n+%}\n+\n+D\t[0-9]\n+/* We consider anything greater than \\x7f to be a \"letter\" for UTF-8\n+   support.  See the lex_type array in ../read.c.  */\n+L\t[a-zA-Z_\\.\\$\\x80-\\xff]\n+H\t[0-9A-Fa-f]\n+\n+hex\t0[xX]{H}+\n+oct\t0[0-7]+\n+bin\t0[bB][01]+\n+dec\t([1-9]{D}*)|0\n+id\t({D}+[fb])|({L}({D}|{L})*)|(:{dec}[bf])\n+ws\t[ \\t\\v\\f]+\n+\n+%%\n+\n+{dec}\t{ yylval.imm = strtoull (yytext, 0, 0); return INTEGER; }\n+{hex}\t{ yylval.imm = strtoull (yytext + 2, 0, 16); return INTEGER; }\n+{bin}\t{ yylval.imm = strtoull (yytext + 2, 0, 2); return INTEGER; }\n+{oct}\t{ yylval.imm = strtoull (yytext + 1, 0, 8); return INTEGER; }\n+{id}\t{ yylval.c_str = strdup (yytext);return IDENTIFIER; }\n+{ws}\t{ }\n+\n+\">>\"\t{ return RIGHT_OP; }\n+\"<<\"\t{ return LEFT_OP; }\n+\"&&\"\t{ return AND_OP; }\n+\"||\"\t{ return OR_OP; }\n+\"<=\"\t{ return LE_OP; }\n+\">=\"\t{ return GE_OP; }\n+\"==\"\t{ return EQ_OP; }\n+\"!=\"\t{ return NE_OP; }\n+.\t{ return yytext[0];}\n+\n+%%"
    },
    {
      "sha": "a7477fbb66a628b50a5e2dd9264f277a994ebf2c",
      "filename": "gas/config/loongarch-parse.y",
      "status": "added",
      "additions": 441,
      "deletions": 0,
      "changes": 441,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/loongarch-parse.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/loongarch-parse.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/loongarch-parse.y?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,441 @@\n+/*\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GAS, the GNU Assembler.\n+\n+   GAS is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   GAS is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+%{\n+#include \"as.h\"\n+#include \"loongarch-lex.h\"\n+#include \"loongarch-parse.h\"\n+static void yyerror (const char *s ATTRIBUTE_UNUSED)\n+{\n+};\n+int yylex (void);\n+\n+\n+static struct reloc_info *top, *end;\n+\n+static expressionS const_0 =\n+{\n+  .X_op = O_constant,\n+  .X_add_number = 0\n+};\n+\n+static int\n+is_const (struct reloc_info *info)\n+{\n+  return (info->type == BFD_RELOC_LARCH_SOP_PUSH_ABSOLUTE\n+\t  && info->value.X_op == O_constant);\n+}\n+\n+int\n+loongarch_parse_expr (const char *expr,\n+\t\t      struct reloc_info *reloc_stack_top,\n+\t\t      size_t max_reloc_num,\n+\t\t      size_t *reloc_num,\n+\t\t      offsetT *imm)\n+{\n+  int ret;\n+  struct yy_buffer_state *buffstate;\n+  top = reloc_stack_top;\n+  end = top + max_reloc_num;\n+  buffstate = yy_scan_string (expr);\n+  ret = yyparse ();\n+\n+  if (ret == 0)\n+    {\n+      if (is_const (top - 1))\n+\t*imm = (--top)->value.X_add_number;\n+      else\n+\t*imm = 0;\n+      *reloc_num = top - reloc_stack_top;\n+    }\n+  yy_delete_buffer (buffstate);\n+\n+  return ret;\n+}\n+\n+static void\n+emit_const (offsetT imm)\n+{\n+  if (end <= top)\n+    as_fatal (_(\"expr too huge\"));\n+  top->type = BFD_RELOC_LARCH_SOP_PUSH_ABSOLUTE;\n+  top->value.X_op = O_constant;\n+  top->value.X_add_number = imm;\n+  top++;\n+}\n+\n+static const char *\n+my_getExpression (expressionS *ep, const char *str)\n+{\n+  char *save_in, *ret;\n+  if (*str == ':')\n+    {\n+      unsigned long j;\n+      char *str_1 = (char *) str;\n+      str_1++;\n+      j = strtol (str_1, &str_1, 10);\n+      get_internal_label (ep, j, *str_1 == 'f');\n+      return NULL;\n+    }\n+  save_in = input_line_pointer;\n+  input_line_pointer = (char *)str;\n+  expression (ep);\n+  ret = input_line_pointer;\n+  input_line_pointer = save_in;\n+  return ret;\n+}\n+\n+static void\n+reloc (const char *op_c_str, const char *id_c_str, offsetT addend)\n+{\n+  expressionS id_sym_expr;\n+\n+  if (end <= top)\n+    as_fatal (_(\"expr too huge\"));\n+\n+  if (id_c_str)\n+    {\n+      my_getExpression (&id_sym_expr, id_c_str);\n+      id_sym_expr.X_add_number += addend;\n+    }\n+  else\n+    {\n+      id_sym_expr.X_op = O_constant;\n+      id_sym_expr.X_add_number = addend;\n+    }\n+\n+  if (strcmp (op_c_str, \"abs\") == 0)\n+    {\n+      top->value = id_sym_expr;\n+      top->type = BFD_RELOC_LARCH_SOP_PUSH_ABSOLUTE;\n+      top++;\n+    }\n+  else if (strcmp (op_c_str, \"pcrel\") == 0)\n+    {\n+      top->value = id_sym_expr;\n+      top->type = BFD_RELOC_LARCH_SOP_PUSH_PCREL;\n+      top++;\n+    }\n+  else if (strcmp (op_c_str, \"gprel\") == 0)\n+    {\n+      top->value = id_sym_expr;\n+      top->type = BFD_RELOC_LARCH_SOP_PUSH_GPREL;\n+      top++;\n+    }\n+  else if (strcmp (op_c_str, \"tprel\") == 0)\n+    {\n+      top->value = id_sym_expr;\n+      top->type = BFD_RELOC_LARCH_SOP_PUSH_TLS_TPREL;\n+      top++;\n+    }\n+  else if (strcmp (op_c_str, \"tlsgot\") == 0)\n+    {\n+      top->value = id_sym_expr;\n+      top->type = BFD_RELOC_LARCH_SOP_PUSH_TLS_GOT;\n+      top++;\n+    }\n+  else if (strcmp (op_c_str, \"tlsgd\") == 0)\n+    {\n+      top->value = id_sym_expr;\n+      top->type = BFD_RELOC_LARCH_SOP_PUSH_TLS_GD;\n+      top++;\n+    }\n+  else if (strcmp (op_c_str, \"plt\") == 0)\n+    {\n+      top->value = id_sym_expr;\n+      top->type = BFD_RELOC_LARCH_SOP_PUSH_PLT_PCREL;\n+      top++;\n+    }\n+  else\n+    as_fatal (_(\"unknown reloc hint: %s\"), op_c_str);\n+}\n+\n+static void\n+emit_unary (char op)\n+{\n+  struct reloc_info *s_top = top - 1;\n+  if (is_const (s_top))\n+    {\n+      offsetT opr = s_top->value.X_add_number;\n+      switch (op)\n+\t{\n+\tcase '+':\n+\t  break;\n+\tcase '-':\n+\t  opr = -opr;\n+\t  break;\n+\tcase '~':\n+\t  opr = ~opr;\n+\t  break;\n+\tcase '!':\n+\t  opr = !opr;\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+      s_top->value.X_add_number = opr;\n+    }\n+  else\n+    {\n+      if (end <= top)\n+\tas_fatal (_(\"expr too huge\"));\n+      switch (op)\n+\t{\n+\tcase '!':\n+\t  top->type = BFD_RELOC_LARCH_SOP_NOT;\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+      top->value = const_0;\n+      top++;\n+    }\n+}\n+\n+static void\n+emit_bin (int op)\n+{\n+  struct reloc_info *last_1st = top - 1, *last_2nd = top - 2;\n+  if (is_const (last_1st) && is_const (last_2nd))\n+    {\n+      offsetT opr1 = last_2nd->value.X_add_number;\n+      offsetT opr2 = last_1st->value.X_add_number;\n+      switch (op)\n+\t{\n+\tcase '*':\n+\t  opr1 = opr1 * opr2;\n+\t  break;\n+\tcase '/':\n+\t  opr1 = opr1 / opr2;\n+\t  break;\n+\tcase '%':\n+\t  opr1 = opr1 % opr2;\n+\t  break;\n+\tcase '+':\n+\t  opr1 = opr1 + opr2;\n+\t  break;\n+\tcase '-':\n+\t  opr1 = opr1 - opr2;\n+\t  break;\n+\tcase LEFT_OP:\n+\t  opr1 = opr1 << opr2;\n+\t  break;\n+\tcase RIGHT_OP:\n+\t  /* Algorithm right shift.  */\n+\t  opr1 = (offsetT)opr1 >> (offsetT)opr2;\n+\t  break;\n+\tcase '<':\n+\t  opr1 = opr1 < opr2;\n+\t  break;\n+\tcase '>':\n+\t  opr1 = opr1 > opr2;\n+\t  break;\n+\tcase LE_OP:\n+\t  opr1 = opr1 <= opr2;\n+\t  break;\n+\tcase GE_OP:\n+\t  opr1 = opr1 >= opr2;\n+\t  break;\n+\tcase EQ_OP:\n+\t  opr1 = opr1 == opr2;\n+\t  break;\n+\tcase NE_OP:\n+\t  opr1 = opr1 != opr2;\n+\t  break;\n+\tcase '&':\n+\t  opr1 = opr1 & opr2;\n+\t  break;\n+\tcase '^':\n+\t  opr1 = opr1 ^ opr2;\n+\t  break;\n+\tcase '|':\n+\t  opr1 = opr1 | opr2;\n+\t  break;\n+\tcase AND_OP:\n+\t  opr1 = opr1 && opr2;\n+\t  break;\n+\tcase OR_OP:\n+\t  opr1 = opr1 || opr2;\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+      last_2nd->value.X_add_number = opr1;\n+      last_1st->type = 0;\n+      top--;\n+    }\n+  else\n+    {\n+      if (end <= top)\n+\tas_fatal (_(\"expr too huge\"));\n+      switch (op)\n+\t{\n+\tcase '+':\n+\t  top->type = BFD_RELOC_LARCH_SOP_ADD;\n+\t  break;\n+\tcase '-':\n+\t  top->type = BFD_RELOC_LARCH_SOP_SUB;\n+\t  break;\n+\tcase LEFT_OP:\n+\t  top->type = BFD_RELOC_LARCH_SOP_SL;\n+\t  break;\n+\tcase RIGHT_OP:\n+\t  top->type = BFD_RELOC_LARCH_SOP_SR;\n+\t  break;\n+\tcase '&':\n+\t  top->type = BFD_RELOC_LARCH_SOP_AND;\n+\t  break;\n+\tdefault:\n+\t  abort ();\n+\t}\n+      top->value = const_0;\n+      top++;\n+    }\n+}\n+\n+static void\n+emit_if_else (void)\n+{\n+  struct reloc_info *last_1st = top - 1;\n+  struct reloc_info *last_2nd = top - 2;\n+  struct reloc_info *last_3rd = top - 3;\n+  if (is_const (last_1st) && is_const (last_2nd) && is_const (last_3rd))\n+    {\n+      offsetT opr1 = last_3rd->value.X_add_number;\n+      offsetT opr2 = last_2nd->value.X_add_number;\n+      offsetT opr3 = last_1st->value.X_add_number;\n+      opr1 = opr1 ? opr2 : opr3;\n+      last_3rd->value.X_add_number = opr1;\n+      last_2nd->type = 0;\n+      last_1st->type = 0;\n+      top -= 2;\n+    }\n+  else\n+    {\n+      if (end <= top)\n+\tas_fatal (_(\"expr too huge\"));\n+      top->type = BFD_RELOC_LARCH_SOP_IF_ELSE;\n+      top->value = const_0;\n+      top++;\n+    }\n+}\n+\n+%}\n+\n+%union {\n+char *c_str;\n+offsetT imm;\n+}\n+\n+%token <imm> INTEGER\n+%token <c_str> IDENTIFIER\n+%type <imm> addend\n+\n+%token LEFT_OP RIGHT_OP LE_OP GE_OP EQ_OP NE_OP AND_OP OR_OP\n+%start expression\n+%%\n+\n+primary_expression\n+\t: INTEGER {emit_const ($1);}\n+\t| '(' expression ')'\n+\t| '%' IDENTIFIER '(' IDENTIFIER addend ')' {reloc ($2, $4, $5); free ($2); free ($4);}\n+\t| '%' IDENTIFIER '(' INTEGER addend ')' {reloc ($2, NULL, $4 + $5); free ($2);}\n+\t;\n+\n+addend\n+\t: addend '-' INTEGER {$$ -= $3;}\n+\t| addend '+' INTEGER {$$ += $3;}\n+\t| {$$ = 0;}\n+\t;\n+\n+unary_expression\n+\t: primary_expression\n+\t| '+' unary_expression {emit_unary ('+');}\n+\t| '-' unary_expression {emit_unary ('-');}\n+\t| '~' unary_expression {emit_unary ('~');}\n+\t| '!' unary_expression {emit_unary ('!');}\n+\t;\n+\n+multiplicative_expression\n+\t: unary_expression\n+\t| multiplicative_expression '*' unary_expression {emit_bin ('*');}\n+\t| multiplicative_expression '/' unary_expression {emit_bin ('/');}\n+\t| multiplicative_expression '%' unary_expression {emit_bin ('%');}\n+\t;\n+\n+additive_expression\n+\t: multiplicative_expression\n+\t| additive_expression '+' multiplicative_expression {emit_bin ('+');}\n+\t| additive_expression '-' multiplicative_expression {emit_bin ('-');}\n+\t;\n+\n+shift_expression\n+\t: additive_expression\n+\t| shift_expression LEFT_OP additive_expression {emit_bin (LEFT_OP);}\n+\t| shift_expression RIGHT_OP additive_expression {emit_bin (RIGHT_OP);}\n+\t;\n+\n+relational_expression\n+\t: shift_expression\n+\t| relational_expression '<' shift_expression {emit_bin ('<');}\n+\t| relational_expression '>' shift_expression {emit_bin ('>');}\n+\t| relational_expression LE_OP shift_expression {emit_bin (LE_OP);}\n+\t| relational_expression GE_OP shift_expression {emit_bin (GE_OP);}\n+\t;\n+\n+equality_expression\n+\t: relational_expression\n+\t| equality_expression EQ_OP relational_expression {emit_bin (EQ_OP);}\n+\t| equality_expression NE_OP relational_expression {emit_bin (NE_OP);}\n+\t;\n+\n+and_expression\n+\t: equality_expression\n+\t| and_expression '&' equality_expression {emit_bin ('&');}\n+\t;\n+\n+exclusive_or_expression\n+\t: and_expression\n+\t| exclusive_or_expression '^' and_expression {emit_bin ('^');}\n+\t;\n+\n+inclusive_or_expression\n+\t: exclusive_or_expression\n+\t| inclusive_or_expression '|' exclusive_or_expression {emit_bin ('|');}\n+\t;\n+\n+logical_and_expression\n+\t: inclusive_or_expression\n+\t| logical_and_expression AND_OP inclusive_or_expression {emit_bin (AND_OP);}\n+\t;\n+\n+logical_or_expression\n+\t: logical_and_expression\n+\t| logical_or_expression OR_OP logical_and_expression {emit_bin (OR_OP);}\n+\t;\n+\n+conditional_expression\n+\t: logical_or_expression\n+\t| logical_or_expression '?' expression ':' conditional_expression {emit_if_else ();}\n+\t;\n+\n+expression\n+\t: conditional_expression\n+\t;\n+%%\n+"
    },
    {
      "sha": "f7235a18864fa06d979068fa3b612c8e55f06a2f",
      "filename": "gas/config/tc-loongarch.c",
      "status": "added",
      "additions": 1382,
      "deletions": 0,
      "changes": 1382,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/tc-loongarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/tc-loongarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-loongarch.c?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,1382 @@\n+/* tc-loongarch.c -- Assemble for the LoongArch ISA\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+   This file is part of GAS.\n+\n+   GAS is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the license, or\n+   (at your option) any later version.\n+\n+   GAS is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"as.h\"\n+#include \"dw2gencfi.h\"\n+#include \"loongarch-lex.h\"\n+#include \"elf/loongarch.h\"\n+#include \"opcode/loongarch.h\"\n+#include \"obj-elf.h\"\n+#include <stdlib.h>\n+#include <string.h>\n+#include <stdio.h>\n+#include <assert.h>\n+\n+/* All information about an instruction during assemble.  */\n+struct loongarch_cl_insn\n+{\n+  /* First split string.  */\n+  const char *name;\n+  const char *arg_strs[MAX_ARG_NUM_PLUS_2];\n+  size_t arg_num;\n+\n+  /* Second analyze name_str and each actual args string to match the insn\n+     in 'loongarch-opc.c'. And actual args may need be relocated.\n+     We get length of insn.  If 'insn_length == 0 && insn_mo->macro != NULL',\n+     it's a macro insntruction and we call 'md_assemble' recursively\n+     after expanding it.  */\n+  int match_now;\n+  int all_match;\n+\n+  const struct loongarch_opcode *insn;\n+  size_t insn_length;\n+\n+  offsetT args[MAX_ARG_NUM_PLUS_2];\n+  struct reloc_info reloc_info[MAX_RELOC_NUMBER_A_INSN];\n+  size_t reloc_num;\n+\n+  /* For relax reserved.  We not support relax now.\n+     'insn_length < relax_max_length' means need to relax.\n+     And 'insn_length == relax_max_length' means no need to relax.  */\n+  size_t relax_max_length;\n+  relax_substateT subtype;\n+\n+  /* Then we get the binary representation of insn\n+     and write it in to section.  */\n+  insn_t insn_bin;\n+\n+  /* The frag that contains the instruction.  */\n+  struct frag *frag;\n+  /* The offset into FRAG of the first instruction byte.  */\n+  long where;\n+  /* The relocs associated with the instruction, if any.  */\n+  fixS *fixp[MAX_RELOC_NUMBER_A_INSN];\n+};\n+\n+#ifndef DEFAULT_ARCH\n+#define DEFAULT_ARCH \"loongarch64\"\n+#endif\n+\n+/* This array holds the chars that always start a comment.  If the\n+   pre-processor is disabled, these aren't very useful.  */\n+const char comment_chars[] = \"#\";\n+\n+/* This array holds the chars that only start a comment at the beginning of\n+   a line.  If the line seems to have the form '# 123 filename'\n+   .line and .file directives will appear in the pre-processed output.  */\n+/* Note that input_file.c hand checks for '#' at the beginning of the\n+   first line of the input file.  This is because the compiler outputs\n+   #NO_APP at the beginning of its output.  */\n+/* Also note that C style comments are always supported.  */\n+const char line_comment_chars[] = \"#\";\n+\n+/* This array holds machine specific line separator characters.  */\n+const char line_separator_chars[] = \";\";\n+\n+/* Chars that can be used to separate mant from exp in floating point nums.  */\n+const char EXP_CHARS[] = \"eE\";\n+\n+/* Chars that mean this number is a floating point constant.  */\n+/* As in 0f12.456.  */\n+/* or    0d1.2345e12.  */\n+const char FLT_CHARS[] = \"rRsSfFdDxXpP\";\n+\n+const char *md_shortopts = \"O::g::G:\";\n+\n+static const char default_arch[] = DEFAULT_ARCH;\n+\n+enum options\n+{\n+  OPTION_IGNORE = OPTION_MD_BASE,\n+\n+  OPTION_ABI,\n+  OPTION_FLOAT_ABI,\n+\n+  OPTION_FLOAT_ISA,\n+\n+  OPTION_LA_LOCAL_WITH_ABS,\n+  OPTION_LA_GLOBAL_WITH_PCREL,\n+  OPTION_LA_GLOBAL_WITH_ABS,\n+\n+  OPTION_END_OF_ENUM,\n+};\n+\n+struct option md_longopts[] =\n+{\n+  { \"mabi\", required_argument, NULL, OPTION_ABI },\n+  { \"mfloat-abi\", required_argument, NULL, OPTION_FLOAT_ABI },\n+\n+  { \"mfpu\", required_argument, NULL, OPTION_FLOAT_ISA },\n+\n+  { \"mla-local-with-abs\", no_argument, NULL, OPTION_LA_LOCAL_WITH_ABS },\n+  { \"mla-global-with-pcrel\", no_argument, NULL, OPTION_LA_GLOBAL_WITH_PCREL },\n+  { \"mla-global-with-abs\", no_argument, NULL, OPTION_LA_GLOBAL_WITH_ABS },\n+\n+  { NULL, no_argument, NULL, 0 }\n+};\n+\n+size_t md_longopts_size = sizeof (md_longopts);\n+\n+int\n+md_parse_option (int c, const char *arg)\n+{\n+  int ret = 1;\n+  switch (c)\n+    {\n+    case OPTION_ABI:\n+      if (strcasecmp (arg, \"lp64\") == 0)\n+\t{\n+\t  LARCH_opts.ase_abi |= EF_LOONGARCH_ABI_LP64;\n+\t  LARCH_opts.ase_ilp32 = 1;\n+\t  LARCH_opts.ase_lp64 = 1;\n+\t}\n+      else if (strcasecmp (arg, \"ilp32\") == 0)\n+\t{\n+\t  LARCH_opts.ase_abi |= EF_LOONGARCH_ABI_ILP32;\n+\t  LARCH_opts.ase_ilp32 = 1;\n+\t}\n+      else\n+\tret = 0;\n+      break;\n+\n+    case OPTION_FLOAT_ABI:\n+      if (strcasecmp (arg, \"soft\") == 0)\n+\tLARCH_opts.ase_abi |= EF_LOONGARCH_FLOAT_ABI_SOFT;\n+      else if (strcasecmp (arg, \"single\") == 0)\n+\tLARCH_opts.ase_abi |= EF_LOONGARCH_FLOAT_ABI_SINGLE;\n+      else if (strcasecmp (arg, \"double\") == 0)\n+\tLARCH_opts.ase_abi |= EF_LOONGARCH_FLOAT_ABI_DOUBLE;\n+      else\n+\tret = 0;\n+      break;\n+\n+    case OPTION_FLOAT_ISA:\n+      if (strcasecmp (arg, \"soft\") == 0)\n+\tLARCH_opts.ase_nf = 1;\n+      else if (strcasecmp (arg, \"single\") == 0)\n+\tLARCH_opts.ase_sf = 1;\n+      else if (strcasecmp (arg, \"double\") == 0)\n+\t{\n+\t  LARCH_opts.ase_sf = 1;\n+\t  LARCH_opts.ase_df = 1;\n+\t}\n+      else\n+\tret = 0;\n+      break;\n+\n+    case OPTION_LA_LOCAL_WITH_ABS:\n+      LARCH_opts.ase_labs = 1;\n+      break;\n+\n+    case OPTION_LA_GLOBAL_WITH_PCREL:\n+      LARCH_opts.ase_gpcr = 1;\n+      break;\n+\n+    case OPTION_LA_GLOBAL_WITH_ABS:\n+      LARCH_opts.ase_gabs = 1;\n+      break;\n+\n+    case OPTION_IGNORE:\n+      break;\n+\n+    default:\n+      ret = 0;\n+      break;\n+    }\n+  return ret;\n+}\n+\n+static struct htab *r_htab = NULL;\n+static struct htab *f_htab = NULL;\n+static struct htab *c_htab = NULL;\n+static struct htab *cr_htab = NULL;\n+static struct htab *v_htab = NULL;\n+static struct htab *x_htab = NULL;\n+\n+void\n+loongarch_after_parse_args ()\n+{\n+  /* Set default ABI/ISA LP64.  */\n+  if (!EF_LOONGARCH_IS_LP64(LARCH_opts.ase_abi)\n+      && !EF_LOONGARCH_IS_ILP32(LARCH_opts.ase_abi))\n+    {\n+      if (strcmp (default_arch, \"loongarch64\") == 0)\n+\t{\n+\t  LARCH_opts.ase_abi |= EF_LOONGARCH_ABI_LP64;\n+\t  LARCH_opts.ase_ilp32 = 1;\n+\t  LARCH_opts.ase_lp64 = 1;\n+\t}\n+      else if (strcmp (default_arch, \"loongarch32\") == 0)\n+\t{\n+\t  LARCH_opts.ase_abi |= EF_LOONGARCH_ABI_ILP32;\n+\t  LARCH_opts.ase_ilp32 = 1;\n+\t}\n+      else\n+\tas_bad (\"unknown default architecture `%s'\", default_arch);\n+    }\n+\n+  /* Set default ABI double-float.  */\n+  if (!EF_LOONGARCH_IS_SOFT_FLOAT(LARCH_opts.ase_abi)\n+      && !EF_LOONGARCH_IS_SINGLE_FLOAT(LARCH_opts.ase_abi)\n+      && !EF_LOONGARCH_IS_DOUBLE_FLOAT(LARCH_opts.ase_abi))\n+    LARCH_opts.ase_abi |= EF_LOONGARCH_FLOAT_ABI_DOUBLE;\n+\n+  /* Set default ISA double-float.  */\n+  if (!LARCH_opts.ase_nf\n+      && !LARCH_opts.ase_sf\n+      && !LARCH_opts.ase_df)\n+    {\n+      LARCH_opts.ase_sf = 1;\n+      LARCH_opts.ase_df = 1;\n+    }\n+\n+  size_t i;\n+\n+  assert(LARCH_opts.ase_ilp32);\n+\n+  /* Init ilp32/lp64 registers names.  */\n+  if (!r_htab)\n+    r_htab = str_htab_create (), str_hash_insert (r_htab, \"\", 0, 0);\n+\n+  for (i = 0; i < ARRAY_SIZE (loongarch_r_normal_name); i++)\n+    str_hash_insert (r_htab, loongarch_r_normal_name[i], (void *) (i + 1), 0);\n+\n+  if (!cr_htab)\n+    cr_htab = str_htab_create (), str_hash_insert (cr_htab, \"\", 0, 0);\n+\n+  for (i = 0; i < ARRAY_SIZE (loongarch_cr_normal_name); i++)\n+    str_hash_insert (cr_htab, loongarch_cr_normal_name[i], (void *) (i + 1), 0);\n+\n+  /* Init single/double float registers names.  */\n+  if (LARCH_opts.ase_sf || LARCH_opts.ase_df)\n+    {\n+      if (!f_htab)\n+\tf_htab = str_htab_create (), str_hash_insert (f_htab, \"\", 0, 0);\n+\n+      for (i = 0; i < ARRAY_SIZE (loongarch_f_normal_name); i++)\n+\tstr_hash_insert (f_htab, loongarch_f_normal_name[i], (void *) (i + 1),\n+\t\t\t 0);\n+\n+      if (!c_htab)\n+\tc_htab = str_htab_create (), str_hash_insert (c_htab, \"\", 0, 0);\n+\n+      for (i = 0; i < ARRAY_SIZE (loongarch_c_normal_name); i++)\n+\tstr_hash_insert (c_htab, loongarch_c_normal_name[i], (void *) (i + 1),\n+\t\t\t 0);\n+\n+    }\n+\n+  /* Init lsx registers names.  */\n+  if (LARCH_opts.ase_lsx)\n+    {\n+      if (!v_htab)\n+\tv_htab = str_htab_create (), str_hash_insert (v_htab, \"\", 0, 0);\n+      for (i = 0; i < ARRAY_SIZE (loongarch_v_normal_name); i++)\n+\tstr_hash_insert (v_htab, loongarch_v_normal_name[i], (void *) (i + 1),\n+\t\t\t 0);\n+    }\n+\n+  /* Init lasx registers names.  */\n+  if (LARCH_opts.ase_lasx)\n+    {\n+      if (!x_htab)\n+\tx_htab = str_htab_create (), str_hash_insert (x_htab, \"\", 0, 0);\n+      for (i = 0; i < ARRAY_SIZE (loongarch_x_normal_name); i++)\n+\tstr_hash_insert (x_htab, loongarch_x_normal_name[i], (void *) (i + 1),\n+\t\t\t 0);\n+    }\n+\n+  /* Init lp64 registers alias.  */\n+  if (LARCH_opts.ase_lp64)\n+    {\n+      for (i = 0; i < ARRAY_SIZE (loongarch_r_lp64_name); i++)\n+\tstr_hash_insert (r_htab, loongarch_r_lp64_name[i], (void *) (i + 1),\n+\t\t\t 0);\n+      for (i = 0; i < ARRAY_SIZE (loongarch_r_lp64_name1); i++)\n+\tstr_hash_insert (r_htab, loongarch_r_lp64_name1[i], (void *) (i + 1),\n+\t\t\t 0);\n+    }\n+\n+  /* Init float-lp64 registers alias */\n+  if ((LARCH_opts.ase_sf || LARCH_opts.ase_df) && LARCH_opts.ase_lp64)\n+    {\n+      for (i = 0; i < ARRAY_SIZE (loongarch_f_lp64_name); i++)\n+\tstr_hash_insert (f_htab, loongarch_f_lp64_name[i],\n+\t\t\t (void *) (i + 1), 0);\n+      for (i = 0; i < ARRAY_SIZE (loongarch_f_lp64_name1); i++)\n+\tstr_hash_insert (f_htab, loongarch_f_lp64_name1[i],\n+\t\t\t (void *) (i + 1), 0);\n+    }\n+}\n+\n+const char *\n+loongarch_target_format ()\n+{\n+  return LARCH_opts.ase_lp64 ? \"elf64-loongarch\" : \"elf32-loongarch\";\n+}\n+\n+void\n+md_begin ()\n+{\n+  const struct loongarch_opcode *it;\n+  struct loongarch_ase *ase;\n+  for (ase = loongarch_ASEs; ase->enabled; ase++)\n+    for (it = ase->opcodes; it->name; it++)\n+      {\n+\tif (loongarch_check_format (it->format) != 0)\n+\t  as_fatal (_(\"insn name: %s\\tformat: %s\\tsyntax error\"),\n+\t\t    it->name, it->format);\n+\tif (it->mask == 0 && it->macro == 0)\n+\t  as_fatal (_(\"insn name: %s\\nformat: %s\\nwe want macro but \"\n+\t\t      \"macro is NULL\"),\n+\t\t    it->name, it->format);\n+\tif (it->macro\n+\t    && loongarch_check_macro (it->format, it->macro) != 0)\n+\t  as_fatal (_(\"insn name: %s\\nformat: %s\\nmacro: %s\\tsyntax error\"),\n+\t\t    it->name, it->format, it->macro);\n+      }\n+\n+  /* FIXME: expressionS use 'offsetT' as constant,\n+   * we want this is 64-bit type.  */\n+  assert (8 <= sizeof (offsetT));\n+}\n+\n+static const expressionS const_0 = { .X_op = O_constant, .X_add_number = 0 };\n+\n+static const char *\n+my_getExpression (expressionS *ep, const char *str)\n+{\n+  char *save_in, *ret;\n+  save_in = input_line_pointer;\n+  input_line_pointer = (char *) str;\n+  expression (ep);\n+  ret = input_line_pointer;\n+  input_line_pointer = save_in;\n+  return ret;\n+}\n+\n+static void\n+s_loongarch_align (int arg)\n+{\n+  const char *t = input_line_pointer;\n+  while (!is_end_of_line[(unsigned char) *t] && *t != ',')\n+    ++t;\n+  if (*t == ',')\n+    s_align_ptwo (arg);\n+  else\n+    s_align_ptwo (0);\n+}\n+\n+/* Handle the .dtprelword and .dtpreldword pseudo-ops.  They generate\n+   a 32-bit or 64-bit DTP-relative relocation (BYTES says which) for\n+   use in DWARF debug information.  */\n+\n+static void\n+s_dtprel (int bytes)\n+{\n+  expressionS ex;\n+  char *p;\n+\n+  expression (&ex);\n+\n+  if (ex.X_op != O_symbol)\n+    {\n+      as_bad (_(\"Unsupported use of %s\"),\n+\t      (bytes == 8 ? \".dtpreldword\" : \".dtprelword\"));\n+      ignore_rest_of_line ();\n+    }\n+\n+  p = frag_more (bytes);\n+  md_number_to_chars (p, 0, bytes);\n+  fix_new_exp (frag_now, p - frag_now->fr_literal, bytes, &ex, FALSE,\n+\t       (bytes == 8\n+\t\t? BFD_RELOC_LARCH_TLS_DTPREL64\n+\t\t: BFD_RELOC_LARCH_TLS_DTPREL32));\n+\n+  demand_empty_rest_of_line ();\n+}\n+\n+static const pseudo_typeS loongarch_pseudo_table[] =\n+{\n+  { \"align\", s_loongarch_align, -4 },\n+  { \"dword\", cons, 8 },\n+  { \"word\", cons, 4 },\n+  { \"half\", cons, 2 },\n+  { \"dtprelword\", s_dtprel, 4 },\n+  { \"dtpreldword\", s_dtprel, 8 },\n+  { NULL, NULL, 0 },\n+};\n+\n+void\n+loongarch_pop_insert (void)\n+{\n+  pop_insert (loongarch_pseudo_table);\n+}\n+\n+#define INTERNAL_LABEL_SPECIAL 10\n+static unsigned long internal_label_count[INTERNAL_LABEL_SPECIAL] = { 0 };\n+\n+static const char *\n+loongarch_internal_label_name (unsigned long label, int augend)\n+{\n+  static char symbol_name_build[24];\n+  unsigned long want_label;\n+  char *p;\n+\n+  want_label = internal_label_count[label] + augend;\n+\n+  p = symbol_name_build;\n+#ifdef LOCAL_LABEL_PREFIX\n+  *p++ = LOCAL_LABEL_PREFIX;\n+#endif\n+  *p++ = 'L';\n+  for (; label; label /= 10)\n+    *p++ = label % 10 + '0';\n+  /* Make sure internal label never belong to normal label namespace.  */\n+  *p++ = ':';\n+  for (; want_label; want_label /= 10)\n+    *p++ = want_label % 10 + '0';\n+  *p++ = '\\0';\n+  return symbol_name_build;\n+}\n+\n+static void\n+setup_internal_label_here (unsigned long label)\n+{\n+  assert (label < INTERNAL_LABEL_SPECIAL);\n+  internal_label_count[label]++;\n+  colon (loongarch_internal_label_name (label, 0));\n+}\n+\n+void\n+get_internal_label (expressionS *label_expr, unsigned long label,\n+\t\t    int augend /* 0 for previous, 1 for next.  */)\n+{\n+  assert (label < INTERNAL_LABEL_SPECIAL);\n+  if (augend == 0 && internal_label_count[label] == 0)\n+    as_fatal (_(\"internal error: we have no internal label yet\"));\n+  label_expr->X_op = O_symbol;\n+  label_expr->X_add_symbol =\n+    symbol_find_or_make (loongarch_internal_label_name (label, augend));\n+  label_expr->X_add_number = 0;\n+}\n+\n+extern int loongarch_parse_expr (const char *expr,\n+\t\t\t\t struct reloc_info *reloc_stack_top,\n+\t\t\t\t size_t max_reloc_num, size_t *reloc_num,\n+\t\t\t\t offsetT *imm_if_no_reloc);\n+\n+static int\n+is_internal_label (const char *c_str)\n+{\n+  do\n+    {\n+      if (*c_str != ':')\n+\tbreak;\n+      c_str++;\n+      if (!('0' <= *c_str && *c_str <= '9'))\n+\tbreak;\n+      while ('0' <= *c_str && *c_str <= '9')\n+\tc_str++;\n+      if (*c_str != 'b' && *c_str != 'f')\n+\tbreak;\n+      c_str++;\n+      return *c_str == '\\0';\n+    }\n+  while (0);\n+  return 0;\n+}\n+\n+static int\n+is_label (const char *c_str)\n+{\n+  if (is_internal_label (c_str))\n+    return 1;\n+  else if ('0' <= *c_str && *c_str <= '9')\n+    {\n+      /* [0-9]+[bf]  */\n+      while ('0' <= *c_str && *c_str <= '9')\n+\tc_str++;\n+      return *c_str == 'b' || *c_str == 'f';\n+    }\n+  else if (is_name_beginner (*c_str))\n+    {\n+      /* [a-zA-Z\\._\\$][0-9a-zA-Z\\._\\$]*  */\n+      c_str++;\n+      while (is_part_of_name (*c_str))\n+\tc_str++;\n+      return *c_str == '\\0';\n+    }\n+  else\n+    return 0;\n+}\n+\n+static int\n+is_label_with_addend (const char *c_str)\n+{\n+  if (is_internal_label (c_str))\n+    return 1;\n+  else if ('0' <= *c_str && *c_str <= '9')\n+    {\n+      /* [0-9]+[bf]  */\n+      while ('0' <= *c_str && *c_str <= '9')\n+\tc_str++;\n+      if (*c_str == 'b' || *c_str == 'f')\n+\tc_str++;\n+      else\n+\treturn 0;\n+      return *c_str == '\\0'\n+\t\t       || ((*c_str == '-' || *c_str == '+')\n+\t\t\t   && is_unsigned (c_str + 1));\n+    }\n+  else if (is_name_beginner (*c_str))\n+    {\n+      /* [a-zA-Z\\._\\$][0-9a-zA-Z\\._\\$]*  */\n+      c_str++;\n+      while (is_part_of_name (*c_str))\n+\tc_str++;\n+      return *c_str == '\\0'\n+\t\t       || ((*c_str == '-' || *c_str == '+')\n+\t\t\t   && is_unsigned (c_str + 1));\n+    }\n+  else\n+    return 0;\n+}\n+\n+static int32_t\n+loongarch_args_parser_can_match_arg_helper (char esc_ch1, char esc_ch2,\n+\t\t\t\t\t    const char *bit_field,\n+\t\t\t\t\t    const char *arg, void *context)\n+{\n+  struct loongarch_cl_insn *ip = context;\n+  offsetT imm, ret = 0;\n+  size_t reloc_num_we_have = MAX_RELOC_NUMBER_A_INSN - ip->reloc_num;\n+  size_t reloc_num = 0;\n+\n+  if (!ip->match_now)\n+    return 0;\n+\n+  switch (esc_ch1)\n+    {\n+    case 'l':\n+      switch (esc_ch2)\n+\t{\n+\tdefault:\n+\t  ip->match_now = is_label (arg);\n+\t  if (!ip->match_now && is_label_with_addend (arg))\n+\t    as_fatal (_(\"This label shouldn't be with addend.\"));\n+\t  break;\n+\tcase 'a':\n+\t  ip->match_now = is_label_with_addend (arg);\n+\t  break;\n+\t}\n+      break;\n+    case 's':\n+    case 'u':\n+      ip->match_now =\n+\tloongarch_parse_expr (arg, ip->reloc_info + ip->reloc_num,\n+\t\t\t      reloc_num_we_have, &reloc_num, &imm) == 0;\n+\n+      if (!ip->match_now)\n+\tbreak;\n+\n+      if (esc_ch1 == 's')\n+\tswitch (esc_ch2)\n+\t  {\n+\t  case 'c':\n+\t    ip->match_now = reloc_num == 0;\n+\t    break;\n+\t  }\n+      else\n+\tswitch (esc_ch2)\n+\t  {\n+\t  case 'c':\n+\t    ip->match_now = reloc_num == 0 && 0 <= imm;\n+\t    break;\n+\t  }\n+\n+      if (!ip->match_now)\n+\tbreak;\n+\n+      ret = imm;\n+      if (reloc_num)\n+\t{\n+\t  bfd_reloc_code_real_type reloc_type = BFD_RELOC_NONE;\n+\t  reloc_num_we_have -= reloc_num;\n+\t  if (reloc_num_we_have == 0)\n+\t    as_fatal (_(\"expr too huge\") /* Want one more reloc.  */);\n+\t  if (esc_ch1 == 'u')\n+\t    {\n+\t      if (strncmp (bit_field, \"10:12\", strlen (\"10:12\")) == 0)\n+\t\treloc_type = BFD_RELOC_LARCH_SOP_POP_32_U_10_12;\n+\t    }\n+\t  else if (esc_ch1 == 's')\n+\t    {\n+\t      if (strncmp (bit_field, \"10:16<<2\", strlen (\"10:16<<2\")) == 0)\n+\t\treloc_type = BFD_RELOC_LARCH_SOP_POP_32_S_10_16_S2;\n+\t      else if (strncmp (bit_field, \"0:5|10:16<<2\",\n+\t\t\t\tstrlen (\"0:5|10:16<<2\")) == 0)\n+\t\treloc_type = BFD_RELOC_LARCH_SOP_POP_32_S_0_5_10_16_S2;\n+\t      else if (strncmp (bit_field, \"0:10|10:16<<2\",\n+\t\t\t\tstrlen (\"0:10|10:16<<2\")) == 0)\n+\t\treloc_type = BFD_RELOC_LARCH_SOP_POP_32_S_0_10_10_16_S2;\n+\t      else if (strncmp (bit_field, \"10:12\", strlen (\"10:12\")) == 0)\n+\t\treloc_type = BFD_RELOC_LARCH_SOP_POP_32_S_10_12;\n+\t      else if (strncmp (bit_field, \"5:20\", strlen (\"5:20\")) == 0)\n+\t\treloc_type = BFD_RELOC_LARCH_SOP_POP_32_S_5_20;\n+\t      else if (strncmp (bit_field, \"10:16\", strlen (\"10:16\")) == 0)\n+\t\treloc_type = BFD_RELOC_LARCH_SOP_POP_32_S_10_16;\n+\t      else if (strncmp (bit_field, \"10:5\", strlen (\"10:5\")) == 0)\n+\t\treloc_type = BFD_RELOC_LARCH_SOP_POP_32_S_10_5;\n+\t    }\n+\t  if (reloc_type == BFD_RELOC_NONE)\n+\t    as_fatal (\n+\t\t      _(\"not support reloc bit-field\\nfmt: %c%c %s\\nargs: %s\"),\n+\t\t      esc_ch1, esc_ch2, bit_field, arg);\n+\t  reloc_num++;\n+\t  ip->reloc_num += reloc_num;\n+\t  ip->reloc_info[ip->reloc_num - 1].type = reloc_type;\n+\t  ip->reloc_info[ip->reloc_num - 1].value = const_0;\n+\t}\n+      break;\n+    case 'r':\n+      imm = (offsetT) str_hash_find (r_htab, arg);\n+      ip->match_now = 0 < imm;\n+      ret = imm - 1;\n+      break;\n+    case 'f':\n+      imm = (offsetT) str_hash_find (f_htab, arg);\n+      ip->match_now = 0 < imm;\n+      ret = imm - 1;\n+      break;\n+    case 'c':\n+      switch (esc_ch2)\n+\t{\n+\tcase 'r':\n+\t  imm = (offsetT) str_hash_find (cr_htab, arg);\n+\t  break;\n+\tdefault:\n+\t  imm = (offsetT) str_hash_find (c_htab, arg);\n+\t}\n+      ip->match_now = 0 < imm;\n+      ret = imm - 1;\n+      break;\n+    case 'v':\n+      imm = (offsetT) str_hash_find (v_htab, arg);\n+      ip->match_now = 0 < imm;\n+      ret = imm - 1;\n+      break;\n+    case 'x':\n+      imm = (offsetT) str_hash_find (x_htab, arg);\n+      ip->match_now = 0 < imm;\n+      ret = imm - 1;\n+      break;\n+    case '\\0':\n+      ip->all_match = ip->match_now;\n+      ip->insn_length =\n+\tip->insn->mask ? loongarch_insn_length (ip->insn->match) : 0;\n+      /* FIXME: now we have no relax insn.  */\n+      ip->relax_max_length = ip->insn_length;\n+      break;\n+    default:\n+      as_fatal (_(\"unknown escape\"));\n+    }\n+\n+  do\n+    {\n+      /* Check imm overflow.  */\n+      int bit_width, bits_needed_s, bits_needed_u;\n+      char *t;\n+\n+      if (!ip->match_now)\n+\tbreak;\n+\n+      if (0 < reloc_num)\n+\tbreak;\n+\n+      bit_width = loongarch_get_bit_field_width (bit_field, &t);\n+\n+      if (bit_width == -1)\n+\t/* No specify bit width.  */\n+\tbreak;\n+\n+      imm = ret;\n+      if (t[0] == '<' && t[1] == '<')\n+\t{\n+\t  int i = strtol (t += 2, &t, 10), j;\n+\t  for (j = i; 0 < j; j--, imm >>= 1)\n+\t    if (imm & 1)\n+\t      as_fatal (_(\"require imm low %d bit is 0.\"), i);\n+\t}\n+\n+      if (*t == '+')\n+\timm -= strtol (t, &t, 10);\n+\n+      bits_needed_s = loongarch_bits_imm_needed (imm, 1);\n+      bits_needed_u = loongarch_bits_imm_needed (imm, 0);\n+\n+      if ((esc_ch1 == 's' && bit_width < bits_needed_s)\n+\t  || (esc_ch1 != 's' && bit_width < bits_needed_u))\n+\t/* How to do after we detect overflow.  */\n+\tas_fatal (_(\"Immediate overflow.\\n\"\n+\t\t    \"format: %c%c%s\\n\"\n+\t\t    \"arg: %s\"),\n+\t\t  esc_ch1, esc_ch2, bit_field, arg);\n+    }\n+  while (0);\n+\n+  if (esc_ch1 != '\\0')\n+    {\n+      ip->args[ip->arg_num] = ret;\n+      ip->arg_num++;\n+    }\n+  return ret;\n+}\n+\n+static void\n+get_loongarch_opcode (struct loongarch_cl_insn *insn)\n+{\n+  const struct loongarch_opcode *it;\n+  struct loongarch_ase *ase;\n+  for (ase = loongarch_ASEs; ase->enabled; ase++)\n+    {\n+      if (!*ase->enabled || (ase->include && !*ase->include)\n+\t  || (ase->exclude && *ase->exclude))\n+\tcontinue;\n+\n+      if (!ase->name_hash_entry)\n+\t{\n+\t  ase->name_hash_entry = str_htab_create ();\n+\t  for (it = ase->opcodes; it->name; it++)\n+\t    str_hash_insert (ase->name_hash_entry, it->name, (void *) it, 0);\n+\t}\n+\n+      if ((it = str_hash_find (ase->name_hash_entry, insn->name)) == NULL)\n+\tcontinue;\n+\n+      do\n+\t{\n+\t  insn->insn = it;\n+\t  insn->match_now = 1;\n+\t  insn->all_match = 0;\n+\t  insn->arg_num = 0;\n+\t  insn->reloc_num = 0;\n+\t  insn->insn_bin = (loongarch_foreach_args\n+\t\t\t    (it->format, insn->arg_strs,\n+\t\t\t     loongarch_args_parser_can_match_arg_helper,\n+\t\t\t     insn));\n+\t  if (insn->all_match && !(it->include && !*it->include)\n+\t      && !(it->exclude && *it->exclude))\n+\t    {\n+\t      insn->insn_bin |= it->match;\n+\t      return;\n+\t    }\n+\t  it++;\n+\t}\n+      while (it->name && strcasecmp (it->name, insn->name) == 0);\n+    }\n+}\n+\n+static int\n+check_this_insn_before_appending (struct loongarch_cl_insn *ip)\n+{\n+  int ret = 0;\n+  if (strcmp (ip->name, \"la.abs\") == 0)\n+    {\n+      ip->reloc_info[ip->reloc_num].type = BFD_RELOC_LARCH_MARK_LA;\n+      my_getExpression (&ip->reloc_info[ip->reloc_num].value, ip->arg_strs[1]);\n+      ip->reloc_num++;\n+    }\n+  else if (ip->insn->mask == 0xffff8000\n+\t   /* amswap.w  rd, rk, rj  */\n+\t   && ((ip->insn_bin & 0xfff00000) == 0x38600000\n+\t       /* ammax_db.wu  rd, rk, rj  */\n+\t       || (ip->insn_bin & 0xffff0000) == 0x38700000\n+\t       /* ammin_db.wu  rd, rk, rj  */\n+\t       || (ip->insn_bin & 0xffff0000) == 0x38710000))\n+    {\n+      /* For AMO insn amswap.[wd], amadd.[wd], etc.  */\n+      if (ip->args[0] != 0\n+\t  && (ip->args[0] == ip->args[1] || ip->args[0] == ip->args[2]))\n+\tas_fatal (_(\"AMO insns require rd != base && rd != rt\"\n+\t\t    \" when rd isn't $r0\"));\n+    }\n+  else if ((ip->insn->mask == 0xffe08000\n+\t    /* bstrins.w  rd, rj, msbw, lsbw  */\n+\t    && (ip->insn_bin & 0xffe00000) == 0x00600000)\n+\t   || (ip->insn->mask == 0xffc00000\n+\t       /* bstrins.d  rd, rj, msbd, lsbd  */\n+\t       && (ip->insn_bin & 0xff800000) == 0x00800000))\n+    {\n+      /* For bstr(ins|pick).[wd].  */\n+      if (ip->args[2] < ip->args[3])\n+\tas_fatal (_(\"bstr(ins|pick).[wd] require msbd >= lsbd\"));\n+    }\n+  else if (ip->insn->mask != 0 && (ip->insn_bin & 0xfe0003c0) == 0x04000000\n+\t   /* csrxchg  rd, rj, csr_num  */\n+\t   && (strcmp (\"csrxchg\", ip->name) == 0))\n+    as_fatal (_(\"csrxchg require rj != $r0 && rj != $r1\"));\n+\n+  return ret;\n+}\n+\n+static void\n+install_insn (const struct loongarch_cl_insn *insn)\n+{\n+  char *f = insn->frag->fr_literal + insn->where;\n+  if (0 < insn->insn_length)\n+    md_number_to_chars (f, insn->insn_bin, insn->insn_length);\n+}\n+\n+static void\n+move_insn (struct loongarch_cl_insn *insn, fragS *frag, long where)\n+{\n+  size_t i;\n+  insn->frag = frag;\n+  insn->where = where;\n+  for (i = 0; i < insn->reloc_num; i++)\n+    {\n+      insn->fixp[i]->fx_frag = frag;\n+      insn->fixp[i]->fx_where = where;\n+    }\n+  install_insn (insn);\n+}\n+\n+/* Add INSN to the end of the output.  */\n+static void\n+append_fixed_insn (struct loongarch_cl_insn *insn)\n+{\n+  char *f = frag_more (insn->insn_length);\n+  move_insn (insn, frag_now, f - frag_now->fr_literal);\n+}\n+\n+static void\n+append_fixp_and_insn (struct loongarch_cl_insn *ip)\n+{\n+  reloc_howto_type *howto;\n+  bfd_reloc_code_real_type reloc_type;\n+  struct reloc_info *reloc_info = ip->reloc_info;\n+  size_t i;\n+  for (i = 0; i < ip->reloc_num; i++)\n+    {\n+      reloc_type = reloc_info[i].type;\n+      howto = bfd_reloc_type_lookup (stdoutput, reloc_type);\n+      if (howto == NULL)\n+\tas_fatal (_(\"no HOWTO loong relocation number %d\"), reloc_type);\n+\n+      ip->fixp[i] =\n+\tfix_new_exp (ip->frag, ip->where, bfd_get_reloc_size (howto),\n+\t\t     &reloc_info[i].value, FALSE, reloc_type);\n+    }\n+\n+  if (ip->insn_length < ip->relax_max_length)\n+    as_fatal (_(\"Internal error: not support relax now\"));\n+  else\n+    append_fixed_insn (ip);\n+  dwarf2_emit_insn (0);\n+}\n+\n+/* Ask helper for returning a malloced c_str or NULL.  */\n+static char *\n+assember_macro_helper (const char *const args[], void *context_ptr)\n+{\n+  struct loongarch_cl_insn *insn = context_ptr;\n+  char *ret = NULL;\n+  if ( strcmp (insn->name, \"li.w\") == 0 || strcmp (insn->name, \"li.d\") == 0)\n+    {\n+      char args_buf[50], insns_buf[200];\n+      const char *arg_strs[6];\n+      uint32_t hi32, lo32;\n+\n+      /* We pay attention to sign extend beacause it is chance of reduce insn.\n+\t The exception is 12-bit and hi-12-bit unsigned,\n+\t we need a 'ori' or a 'lu52i.d' accordingly.  */\n+      char all0_bit_vec, sign_bit_vec, allf_bit_vec, paritial_is_sext_of_prev;\n+\n+      lo32 = insn->args[1] & 0xffffffff;\n+      hi32 = insn->args[1] >> 32;\n+\n+      if (strcmp (insn->name, \"li.w\") == 0)\n+\t{\n+\t  if (hi32 != 0 && hi32 != 0xffffffff)\n+\t    as_fatal (_(\"li overflow: hi32:0x%x lo32:0x%x\"), hi32, lo32);\n+\t  hi32 = lo32 & 0x80000000 ? 0xffffffff : 0;\n+\t}\n+\n+      if (strcmp (insn->name, \"li.d\") == 0 && !LARCH_opts.ase_lp64)\n+\tas_fatal (_(\"we can't li.d on 32bit-arch\"));\n+\n+      snprintf (args_buf, sizeof (args_buf), \"0x%x,0x%x,0x%x,0x%x,%s\",\n+\t\t(hi32 >> 20) & 0xfff, hi32 & 0xfffff, (lo32 >> 12) & 0xfffff,\n+\t\tlo32 & 0xfff, args[0]);\n+      loongarch_split_args_by_comma (args_buf, arg_strs);\n+\n+      all0_bit_vec =\n+\t((((hi32 & 0xfff00000) == 0) << 3) | (((hi32 & 0x000fffff) == 0) << 2)\n+\t | (((lo32 & 0xfffff000) == 0) << 1) | ((lo32 & 0x00000fff) == 0));\n+      sign_bit_vec =\n+\t((((hi32 & 0x80000000) != 0) << 3) | (((hi32 & 0x00080000) != 0) << 2)\n+\t | (((lo32 & 0x80000000) != 0) << 1) | ((lo32 & 0x00000800) != 0));\n+      allf_bit_vec =\n+\t((((hi32 & 0xfff00000) == 0xfff00000) << 3)\n+\t | (((hi32 & 0x000fffff) == 0x000fffff) << 2)\n+\t | (((lo32 & 0xfffff000) == 0xfffff000) << 1)\n+\t | ((lo32 & 0x00000fff) == 0x00000fff));\n+      paritial_is_sext_of_prev =\n+\t(all0_bit_vec ^ allf_bit_vec) & (all0_bit_vec ^ (sign_bit_vec << 1));\n+\n+      static const char *const li_32bit[] =\n+\t{\n+\t  \"lu12i.w %5,%3&0x80000?%3-0x100000:%3;ori %5,%5,%4;\",\n+\t  \"lu12i.w %5,%3&0x80000?%3-0x100000:%3;\",\n+\t  \"addi.w %5,$r0,%4&0x800?%4-0x1000:%4;\",\n+\t  \"or %5,$r0,$r0;\",\n+\t};\n+      static const char *const li_hi_32bit[] =\n+\t{\n+\t  \"lu32i.d %5,%2&0x80000?%2-0x100000:%2;\"\n+\t  \"lu52i.d %5,%5,%1&0x800?%1-0x1000:%1;\",\n+\t  \"lu52i.d %5,%5,%1&0x800?%1-0x1000:%1;\",\n+\t  \"lu32i.d %5,%2&0x80000?%2-0x100000:%2;\",\n+\t  \"\",\n+\t};\n+      do\n+\t{\n+\t  insns_buf[0] = '\\0';\n+\t  if (paritial_is_sext_of_prev == 0x7)\n+\t    {\n+\t      strcat (insns_buf, \"lu52i.d %5,$r0,%1&0x800?%1-0x1000:%1;\");\n+\t      break;\n+\t    }\n+\t  if ((all0_bit_vec & 0x3) == 0x2)\n+\t    strcat (insns_buf, \"ori %5,$r0,%4;\");\n+\t  else\n+\t    strcat (insns_buf, li_32bit[paritial_is_sext_of_prev & 0x3]);\n+\t  strcat (insns_buf, li_hi_32bit[paritial_is_sext_of_prev >> 2]);\n+\t}\n+      while (0);\n+\n+      ret = loongarch_expand_macro (insns_buf, arg_strs, NULL, NULL);\n+    }\n+  return ret;\n+}\n+\n+/* Accept instructions separated by ';'\n+ * assuming 'not starting with space and not ending with space' or pass in\n+ * empty c_str.  */\n+static void\n+loongarch_assemble_INSNs (char *str)\n+{\n+  char *rest;\n+\n+  for (rest = str; *rest != ';' && *rest != '\\0'; rest++);\n+  if (*rest == ';')\n+    *rest++ = '\\0';\n+\n+  if (*str == ':')\n+    {\n+      str++;\n+      setup_internal_label_here (strtol (str, &str, 10));\n+      str++;\n+    }\n+\n+  do\n+    {\n+      if (*str == '\\0')\n+\tbreak;\n+\n+      struct loongarch_cl_insn the_one = { 0 };\n+      the_one.name = str;\n+\n+      for (; *str && *str != ' '; str++)\n+\t;\n+      if (*str == ' ')\n+\t*str++ = '\\0';\n+\n+      loongarch_split_args_by_comma (str, the_one.arg_strs);\n+      get_loongarch_opcode (&the_one);\n+\n+      if (!the_one.all_match)\n+\t{\n+\t  char *ss = loongarch_cat_splited_strs (the_one.arg_strs);\n+\t  as_bad (_(\"no match insn: %s\\t%s\"), the_one.name, ss ? ss : \"\");\n+\t  free(ss);\n+\t  return;\n+\t}\n+\n+      if (check_this_insn_before_appending (&the_one) != 0)\n+\tbreak;\n+\n+      append_fixp_and_insn (&the_one);\n+      if (the_one.insn_length == 0 && the_one.insn->macro)\n+\t{\n+\t  char *c_str = loongarch_expand_macro (the_one.insn->macro,\n+\t\t\t\t\t\tthe_one.arg_strs,\n+\t\t\t\t\t\tassember_macro_helper,\n+\t\t\t\t\t\t&the_one);\n+\t  loongarch_assemble_INSNs (c_str);\n+\t  free (c_str);\n+\t}\n+    }\n+  while (0);\n+\n+  if (*rest != '\\0')\n+    loongarch_assemble_INSNs (rest);\n+}\n+\n+void\n+md_assemble (char *str)\n+{\n+  loongarch_assemble_INSNs (str);\n+}\n+\n+const char *\n+md_atof (int type, char *litP, int *sizeP)\n+{\n+  return ieee_md_atof (type, litP, sizeP, FALSE);\n+}\n+\n+void\n+md_number_to_chars (char *buf, valueT val, int n)\n+{\n+  number_to_chars_littleendian (buf, val, n);\n+}\n+\n+/* The location from which a PC relative jump should be calculated,\n+   given a PC relative reloc.  */\n+long\n+md_pcrel_from (fixS *fixP ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+void\n+md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n+{\n+  static int64_t stack_top;\n+  static int last_reloc_is_sop_push_pcrel_1 = 0;\n+  int last_reloc_is_sop_push_pcrel = last_reloc_is_sop_push_pcrel_1;\n+  insn_t insn;\n+  last_reloc_is_sop_push_pcrel_1 = 0;\n+\n+  char *buf = fixP->fx_frag->fr_literal + fixP->fx_where;\n+  switch (fixP->fx_r_type)\n+    {\n+    case BFD_RELOC_LARCH_SOP_PUSH_TLS_TPREL:\n+    case BFD_RELOC_LARCH_SOP_PUSH_TLS_GD:\n+    case BFD_RELOC_LARCH_SOP_PUSH_TLS_GOT:\n+      if (fixP->fx_addsy)\n+\tS_SET_THREAD_LOCAL (fixP->fx_addsy);\n+      else\n+\tas_bad_where (fixP->fx_file, fixP->fx_line,\n+\t\t      _(\"Relocation against a constant\"));\n+      break;\n+    case BFD_RELOC_LARCH_SOP_PUSH_PCREL:\n+    case BFD_RELOC_LARCH_SOP_PUSH_PLT_PCREL:\n+      if (fixP->fx_addsy == NULL)\n+\tas_bad_where (fixP->fx_file, fixP->fx_line,\n+\t\t      _(\"Relocation against a constant\"));\n+      if (fixP->fx_r_type == BFD_RELOC_LARCH_SOP_PUSH_PCREL)\n+\t{\n+\t  last_reloc_is_sop_push_pcrel_1 = 1;\n+\t  if (S_GET_SEGMENT (fixP->fx_addsy) == seg)\n+\t    stack_top = (S_GET_VALUE (fixP->fx_addsy) + fixP->fx_offset\n+\t\t\t - (fixP->fx_where + fixP->fx_frag->fr_address));\n+\t  else\n+\t    stack_top = 0;\n+\t}\n+      break;\n+\n+    case BFD_RELOC_LARCH_SOP_POP_32_S_10_5:\n+      if (!last_reloc_is_sop_push_pcrel)\n+\tbreak;\n+      if ((stack_top & ~(uint64_t) 0xf) != 0x0\n+\t  && (stack_top & ~(uint64_t) 0xf) != ~(uint64_t) 0xf)\n+\tas_warn_where (fixP->fx_file, fixP->fx_line, \"Reloc overflow\");\n+      insn = bfd_getl32 (buf);\n+      insn = (insn & (~(uint32_t) 0x7c00)) | ((stack_top & 0x1f) << 10);\n+      bfd_putl32 (insn, buf);\n+      break;\n+\n+    case BFD_RELOC_LARCH_SOP_POP_32_U_10_12:\n+      if (!last_reloc_is_sop_push_pcrel)\n+\tbreak;\n+      if (stack_top & ~(uint64_t) 0xfff)\n+\tas_warn_where (fixP->fx_file, fixP->fx_line, \"Reloc overflow\");\n+      insn = bfd_getl32 (buf);\n+      insn = (insn & (~(uint32_t) 0x3ffc00)) | ((stack_top & 0xfff) << 10);\n+      bfd_putl32 (insn, buf);\n+      break;\n+\n+    case BFD_RELOC_LARCH_SOP_POP_32_S_10_12:\n+      if (!last_reloc_is_sop_push_pcrel)\n+\tbreak;\n+      if ((stack_top & ~(uint64_t) 0x7ff) != 0x0\n+\t  && (stack_top & ~(uint64_t) 0x7ff) != ~(uint64_t) 0x7ff)\n+\tas_warn_where (fixP->fx_file, fixP->fx_line, \"Reloc overflow\");\n+      insn = bfd_getl32 (buf);\n+      insn = (insn & (~(uint32_t) 0x3ffc00)) | ((stack_top & 0xfff) << 10);\n+      bfd_putl32 (insn, buf);\n+      break;\n+\n+    case BFD_RELOC_LARCH_SOP_POP_32_S_10_16:\n+      if (!last_reloc_is_sop_push_pcrel)\n+\tbreak;\n+      if ((stack_top & ~(uint64_t) 0x7fff) != 0x0\n+\t  && (stack_top & ~(uint64_t) 0x7fff) != ~(uint64_t) 0x7fff)\n+\tas_warn_where (fixP->fx_file, fixP->fx_line, \"Reloc overflow\");\n+      insn = bfd_getl32 (buf);\n+      insn = (insn & 0xfc0003ff) | ((stack_top & 0xffff) << 10);\n+      bfd_putl32 (insn, buf);\n+      break;\n+\n+    case BFD_RELOC_LARCH_SOP_POP_32_S_10_16_S2:\n+      if (!last_reloc_is_sop_push_pcrel)\n+\tbreak;\n+      if ((stack_top & 0x3) != 0)\n+\tas_warn_where (fixP->fx_file, fixP->fx_line, \"Reloc overflow\");\n+      stack_top >>= 2;\n+      if ((stack_top & ~(uint64_t) 0x7fff) != 0x0\n+\t  && (stack_top & ~(uint64_t) 0x7fff) != ~(uint64_t) 0x7fff)\n+\tas_warn_where (fixP->fx_file, fixP->fx_line, \"Reloc overflow\");\n+      insn = bfd_getl32 (buf);\n+      insn = (insn & 0xfc0003ff) | ((stack_top & 0xffff) << 10);\n+      bfd_putl32 (insn, buf);\n+      break;\n+\n+    case BFD_RELOC_LARCH_SOP_POP_32_S_0_5_10_16_S2:\n+      if (!last_reloc_is_sop_push_pcrel)\n+\tbreak;\n+      if ((stack_top & 0x3) != 0)\n+\tbreak;\n+      stack_top >>= 2;\n+      if ((stack_top & ~(uint64_t) 0xfffff) != 0x0\n+\t  && (stack_top & ~(uint64_t) 0xfffff) != ~(uint64_t) 0xfffff)\n+\tas_warn_where (fixP->fx_file, fixP->fx_line, \"Reloc overflow\");\n+      insn = bfd_getl32 (buf);\n+      insn = ((insn & 0xfc0003e0)\n+\t      | ((stack_top & 0xffff) << 10)\n+\t      | ((stack_top & 0x1f0000) >> 16));\n+      bfd_putl32 (insn, buf);\n+      break;\n+\n+    case BFD_RELOC_LARCH_SOP_POP_32_S_5_20:\n+      if (!last_reloc_is_sop_push_pcrel)\n+\tbreak;\n+      if ((stack_top & ~(uint64_t) 0x7ffff) != 0x0\n+\t  && (stack_top & ~(uint64_t) 0x7ffff) != ~(uint64_t) 0x7ffff)\n+\tas_warn_where (fixP->fx_file, fixP->fx_line, \"Reloc overflow\");\n+      insn = bfd_getl32 (buf);\n+      insn = (insn & (~(uint32_t) 0x1ffffe0)) | ((stack_top & 0xfffff) << 5);\n+      bfd_putl32 (insn, buf);\n+      break;\n+\n+    case BFD_RELOC_LARCH_SOP_POP_32_S_0_10_10_16_S2:\n+      if (!last_reloc_is_sop_push_pcrel)\n+\tbreak;\n+      if ((stack_top & 0x3) != 0)\n+\tas_warn_where (fixP->fx_file, fixP->fx_line, \"Reloc overflow\");\n+      stack_top >>= 2;\n+      if ((stack_top & ~(uint64_t) 0x1ffffff) != 0x0\n+\t  && (stack_top & ~(uint64_t) 0x1ffffff) != ~(uint64_t) 0x1ffffff)\n+\tas_warn_where (fixP->fx_file, fixP->fx_line, \"Reloc overflow\");\n+      insn = bfd_getl32 (buf);\n+      insn = ((insn & 0xfc000000)\n+\t      | ((stack_top & 0xffff) << 10)\n+\t      | ((stack_top & 0x3ff0000) >> 16));\n+      bfd_putl32 (insn, buf);\n+      break;\n+\n+    case BFD_RELOC_LARCH_SOP_POP_32_U:\n+      if (!last_reloc_is_sop_push_pcrel)\n+\tbreak;\n+      if (stack_top & ~(uint64_t) 0xffffffff)\n+\tas_warn_where (fixP->fx_file, fixP->fx_line, \"Reloc overflow\");\n+      bfd_putl32 (stack_top, buf);\n+      break;\n+\n+    case BFD_RELOC_64:\n+    case BFD_RELOC_32:\n+      if (fixP->fx_subsy)\n+\t{\n+\tcase BFD_RELOC_24:\n+\tcase BFD_RELOC_16:\n+\tcase BFD_RELOC_8:\n+\t  fixP->fx_next = xmemdup (fixP, sizeof (*fixP), sizeof (*fixP));\n+\t  fixP->fx_next->fx_addsy = fixP->fx_subsy;\n+\t  fixP->fx_next->fx_subsy = NULL;\n+\t  fixP->fx_next->fx_offset = 0;\n+\t  fixP->fx_subsy = NULL;\n+\n+\t  switch (fixP->fx_r_type)\n+\t    {\n+\t    case BFD_RELOC_64:\n+\t      fixP->fx_r_type = BFD_RELOC_LARCH_ADD64;\n+\t      fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB64;\n+\t      break;\n+\t    case BFD_RELOC_32:\n+\t      fixP->fx_r_type = BFD_RELOC_LARCH_ADD32;\n+\t      fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB32;\n+\t      break;\n+\t    case BFD_RELOC_24:\n+\t      fixP->fx_r_type = BFD_RELOC_LARCH_ADD24;\n+\t      fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB24;\n+\t      break;\n+\t    case BFD_RELOC_16:\n+\t      fixP->fx_r_type = BFD_RELOC_LARCH_ADD16;\n+\t      fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB16;\n+\t      break;\n+\t    case BFD_RELOC_8:\n+\t      fixP->fx_r_type = BFD_RELOC_LARCH_ADD8;\n+\t      fixP->fx_next->fx_r_type = BFD_RELOC_LARCH_SUB8;\n+\t      break;\n+\t    default:\n+\t      break;\n+\t    }\n+\t  md_number_to_chars (buf, 0, fixP->fx_size);\n+\t  if (fixP->fx_next->fx_addsy == NULL)\n+\t    fixP->fx_next->fx_done = 1;\n+\t}\n+      if (fixP->fx_addsy == NULL)\n+\t{\n+\t  fixP->fx_done = 1;\n+\t  md_number_to_chars (buf, *valP, fixP->fx_size);\n+\t}\n+      break;\n+\n+    default:\n+      break;\n+    }\n+}\n+\n+int\n+loongarch_relax_frag (asection *sec ATTRIBUTE_UNUSED,\n+\t\t      fragS *fragp ATTRIBUTE_UNUSED,\n+\t\t      long stretch ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+int\n+md_estimate_size_before_relax (fragS *fragp ATTRIBUTE_UNUSED,\n+\t\t\t       asection *segtype ATTRIBUTE_UNUSED)\n+{\n+  return 0;\n+}\n+\n+/* Translate internal representation of relocation info to BFD target\n+   format.  */\n+arelent *\n+tc_gen_reloc (asection *section ATTRIBUTE_UNUSED, fixS *fixp)\n+{\n+  arelent *reloc = (arelent *) xmalloc (sizeof (arelent));\n+\n+  reloc->sym_ptr_ptr = (asymbol **) xmalloc (sizeof (asymbol *));\n+  *reloc->sym_ptr_ptr = symbol_get_bfdsym (fixp->fx_addsy);\n+  reloc->address = fixp->fx_frag->fr_address + fixp->fx_where;\n+  reloc->addend = fixp->fx_offset;\n+\n+  reloc->howto = bfd_reloc_type_lookup (stdoutput, fixp->fx_r_type);\n+  if (reloc->howto == NULL)\n+    {\n+      as_bad_where (fixp->fx_file, fixp->fx_line,\n+\t\t    _(\"cannot represent %s relocation in object file\"),\n+\t\t    bfd_get_reloc_code_name (fixp->fx_r_type));\n+      return NULL;\n+    }\n+\n+  return reloc;\n+}\n+\n+/* Convert a machine dependent frag.  */\n+void\n+md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED, segT asec ATTRIBUTE_UNUSED,\n+\t\t fragS *fragp ATTRIBUTE_UNUSED)\n+{\n+  /* fragp->fr_fix += 8; */\n+}\n+\n+/* Standard calling conventions leave the CFA at SP on entry.  */\n+void\n+loongarch_cfi_frame_initial_instructions (void)\n+{\n+  cfi_add_CFA_def_cfa_register (3 /* $sp */);\n+}\n+\n+int\n+loongarch_dwarf2_addr_size (void)\n+{\n+  return LARCH_opts.ase_lp64 ? 8 : 4;\n+}\n+\n+void\n+tc_loongarch_parse_to_dw2regnum (expressionS *exp)\n+{\n+  expression_and_evaluate (exp);\n+}\n+\n+void\n+md_show_usage (FILE *stream)\n+{\n+  fprintf (stream, _(\"LARCH options:\\n\"));\n+  /* FIXME */\n+}\n+\n+/* Fill in an rs_align_code fragment.  We want to fill 'andi $r0,$r0,0'.  */\n+void\n+loongarch_handle_align (fragS *fragp)\n+{\n+  /* char nop_opcode; */\n+  char *p;\n+  int bytes, size, excess;\n+  valueT opcode;\n+\n+  if (fragp->fr_type != rs_align_code)\n+    return;\n+\n+  struct loongarch_cl_insn nop =\n+    { .name = \"andi\", .arg_strs = { \"$r0\", \"$r0\", \"0\", NULL } };\n+\n+  get_loongarch_opcode (&nop);\n+  gas_assert (nop.all_match);\n+\n+  p = fragp->fr_literal + fragp->fr_fix;\n+  opcode = nop.insn_bin;\n+  size = 4;\n+\n+  bytes = fragp->fr_next->fr_address - fragp->fr_address - fragp->fr_fix;\n+  excess = bytes % size;\n+\n+  gas_assert (excess < 4);\n+  fragp->fr_fix += excess;\n+\n+  while (excess-- != 0)\n+    *p++ = 0;\n+\n+  md_number_to_chars (p, opcode, size);\n+  fragp->fr_var = size;\n+}\n+\n+void\n+loongarch_elf_final_processing (void)\n+{\n+  elf_elfheader (stdoutput)->e_flags |= LARCH_opts.ase_abi;\n+}"
    },
    {
      "sha": "6a076160729159730d56deaf2419033f7c7e9d53",
      "filename": "gas/config/tc-loongarch.h",
      "status": "added",
      "additions": 91,
      "deletions": 0,
      "changes": 91,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/tc-loongarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/config/tc-loongarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-loongarch.h?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,91 @@\n+/* tc-loongarch.h -- Header file for tc-loongarch.c.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+   This file is part of GAS.\n+\n+   GAS is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the license, or\n+   (at your option) any later version.\n+\n+   GAS is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef TC_LOONGARCH\n+#define TC_LOONGARCH\n+\n+#define TARGET_BYTES_BIG_ENDIAN 0\n+#define TARGET_ARCH bfd_arch_loongarch\n+\n+#define WORKING_DOT_WORD 1\n+#define REPEAT_CONS_EXPRESSIONS\n+\n+/* Early than md_begin.  */\n+#define md_after_parse_args loongarch_after_parse_args\n+extern void loongarch_after_parse_args (void);\n+\n+extern void loongarch_pop_insert (void);\n+#define md_pop_insert() loongarch_pop_insert ()\n+\n+#define TARGET_FORMAT loongarch_target_format ()\n+extern const char *loongarch_target_format (void);\n+\n+#define md_relax_frag(segment, fragp, stretch)\t\\\n+  loongarch_relax_frag (segment, fragp, stretch)\n+extern int loongarch_relax_frag (asection *, struct frag *, long);\n+#define md_section_align(seg, size) (size)\n+#define md_undefined_symbol(name) (0)\n+#define md_operand(x)\n+\n+/* This is called to see whether a reloc against a defined symbol\n+   should be converted into a reloc against a section.  */\n+#define tc_fix_adjustable(fixp) 0\n+\n+/* Values passed to md_apply_fix don't include symbol values.  */\n+#define TC_FORCE_RELOCATION_SUB_LOCAL(FIX, SEG) 1\n+#define TC_VALIDATE_FIX_SUB(FIX, SEG) 1\n+#define DIFF_EXPR_OK 1\n+\n+#define TARGET_USE_CFIPOP 1\n+#define DWARF2_DEFAULT_RETURN_COLUMN 1 /* $ra.  */\n+#define DWARF2_CIE_DATA_ALIGNMENT -4\n+extern int loongarch_dwarf2_addr_size (void);\n+#define DWARF2_FDE_RELOC_SIZE loongarch_dwarf2_addr_size ()\n+#define DWARF2_ADDR_SIZE(bfd) loongarch_dwarf2_addr_size ()\n+#define CFI_DIFF_EXPR_OK 0\n+\n+#define tc_cfi_frame_initial_instructions\t\\\n+  loongarch_cfi_frame_initial_instructions\n+extern void loongarch_cfi_frame_initial_instructions (void);\n+\n+#define tc_parse_to_dw2regnum tc_loongarch_parse_to_dw2regnum\n+extern void tc_loongarch_parse_to_dw2regnum (expressionS *);\n+\n+/* A enumerated values to specific how to deal with align in '.text'.\n+   Now we want to fill 'andi $r0,$r0,0x0'.\n+   Here is the type 0, will fill andi insn later.  */\n+#define NOP_OPCODE (0x00)\n+\n+#define HANDLE_ALIGN(fragp) loongarch_handle_align (fragp)\n+extern void loongarch_handle_align (struct frag *);\n+#define MAX_MEM_FOR_RS_ALIGN_CODE (3 + 4)\n+\n+#define elf_tc_final_processing loongarch_elf_final_processing\n+extern void loongarch_elf_final_processing (void);\n+\n+#define MAX_RELOC_NUMBER_A_INSN 20\n+\n+struct reloc_info\n+{\n+  bfd_reloc_code_real_type type;\n+  expressionS value;\n+};\n+\n+#endif"
    },
    {
      "sha": "a3d3a7ae255fd39cad6e54fb79a2ae5e3757d191",
      "filename": "gas/configure",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/configure?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -12207,6 +12207,23 @@ _ACEOF\n \tusing_cgen=yes\n \t;;\n \n+      loongarch)\n+\tfor f in config/loongarch-parse.o config/loongarch-lex-wrapper.o; do\n+\t  case \" $extra_objects \" in\n+\t    *\" $f \"*) ;;\n+\t    *) extra_objects=\"$extra_objects $f\" ;;\n+\t  esac\n+\tdone\n+        # --target=loongarch[32|64]-*-*.  */\n+        if test $this_target = $target ; then\n+\n+cat >>confdefs.h <<_ACEOF\n+#define DEFAULT_ARCH \"${arch}\"\n+_ACEOF\n+\n+        fi\n+\t;;\n+\n       m32c)\n \tusing_cgen=yes\n \t;;"
    },
    {
      "sha": "127f758cb9cdbbec67273a18461604ee55561962",
      "filename": "gas/configure.ac",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/configure.ac?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -446,6 +446,19 @@ changequote([,])dnl\n \tusing_cgen=yes\n \t;;\n \n+      loongarch)\n+\tfor f in config/loongarch-parse.o config/loongarch-lex-wrapper.o; do\n+\t  case \" $extra_objects \" in\n+\t    *\" $f \"*) ;;\n+\t    *) extra_objects=\"$extra_objects $f\" ;;\n+\t  esac\n+\tdone\n+        # --target=loongarch[32|64]-*-*.  */\n+        if test $this_target = $target ; then\n+          AC_DEFINE_UNQUOTED(DEFAULT_ARCH, \"${arch}\", [Default architecture.])\n+        fi\n+\t;;\n+\n       m32c)\n \tusing_cgen=yes\n \t;;"
    },
    {
      "sha": "d3db3aa9e88c2b74223c406e49e7e8520619336a",
      "filename": "gas/configure.tgt",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/configure.tgt?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -67,6 +67,8 @@ case ${cpu} in\n   ip2k)\t\t\tcpu_type=ip2k endian=big ;;\n   iq2000)\t\tcpu_type=iq2000 endian=big ;;\n   lm32)\t\t\tcpu_type=lm32 ;;\n+  loongarch32)\t\tcpu_type=loongarch arch=loongarch32;;\n+  loongarch64)\t\tcpu_type=loongarch arch=loongarch64;;\n   m32c)\t\t\tcpu_type=m32c endian=little ;;\n   m32r)\t\t\tcpu_type=m32r endian=big ;;\n   m32rle)\t\tcpu_type=m32r endian=little ;;\n@@ -277,6 +279,8 @@ case ${generic_target} in\n \n   lm32-*-*)\t\t\t\tfmt=elf ;;\n \n+  loongarch*)\t\t\t\tfmt=elf ;;\n+\n   m32c-*-elf)\t\t\t\tfmt=elf ;;\n \n   m32r-*-elf*)\t\t\t\tfmt=elf ;;\n@@ -443,7 +447,7 @@ esac\n \n case ${cpu_type} in\n   aarch64 | alpha | arm | csky | i386 | ia64 | microblaze | mips | ns32k | \\\n-  or1k | or1knd | pdp11 | ppc | riscv | sh | sparc | z80 | z8k)\n+  or1k | or1knd | pdp11 | ppc | riscv | sh | sparc | z80 | z8k | loongarch)\n     bfd_gas=yes\n     ;;\n esac"
    },
    {
      "sha": "0cc7455d3ae4077fab73674b6996df1fe4849222",
      "filename": "gas/doc/as.texi",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/doc/as.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/doc/as.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/as.texi?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -379,6 +379,11 @@ gcc(1), ld(1), and the Info entries for @file{binutils} and @file{ld}.\n @emph{Target IP2K options:}\n    [@b{-mip2022}|@b{-mip2022ext}]\n @end ifset\n+@ifset LOONGARCH\n+\n+@emph{Target LOONGARCH options:}\n+   [@b{-fpic}|@b{-fPIC}|@b{-fno-pic}]\n+@end ifset\n @ifset M32C\n \n @emph{Target M32C options:}\n@@ -1756,6 +1761,25 @@ Assemble for a little endian target.\n @end ifset\n @c man end\n \n+@ifset LOONGARCH\n+\n+@ifclear man\n+@xref{LoongArch-Options}, for the options available when @value{AS} is configured\n+for a LoongArch processor.\n+@end ifclear\n+\n+@ifset man\n+@c man begin OPTIONS\n+The following options are available when @value{AS} is configured for a\n+LoongArch processor.\n+@c man end\n+@c man begin INCLUDE\n+@include c-loongarch.texi\n+@c ended inside the included file\n+@end ifset\n+\n+@end ifset\n+\n @ifset METAG\n \n @ifclear man\n@@ -7837,6 +7861,9 @@ subject, see the hardware manufacturer's manual.\n @ifset IP2K\n * IP2K-Dependent::              IP2K Dependent Features\n @end ifset\n+@ifset LOONGARCH\n+* LoongArch-Dependent::         LoongArch Dependent Features\n+@end ifset\n @ifset LM32\n * LM32-Dependent::              LM32 Dependent Features\n @end ifset\n@@ -8061,6 +8088,10 @@ family.\n @include c-lm32.texi\n @end ifset\n \n+@ifset LOONGARCH\n+@include c-loongarch.texi\n+@end ifset\n+\n @ifset M32C\n @include c-m32c.texi\n @end ifset"
    },
    {
      "sha": "2a139484577bc0cdbdcbc6e9ff3eda4373618d40",
      "filename": "gas/doc/c-loongarch.texi",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/doc/c-loongarch.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/doc/c-loongarch.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-loongarch.texi?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,39 @@\n+@c Copyright (C) 2021 Free Software Foundation, Inc.\n+@c This is part of the GAS anual.\n+@c For copying conditions, see the file as.texinfo\n+@c man end\n+\n+@ifset GENERIC\n+@page\n+@node LoongArch-Dependent\n+@chapter LoongArch Dependent Features\n+@end ifset\n+@ifclear GENERIC\n+@node Machine Dependencies\n+@chapter LoongArch Dependent Features\n+@end ifclear\n+\n+@cindex LoongArch support\n+@menu\n+* LoongArch-Options::        LoongArch Options\n+@end menu\n+\n+@node LoongArch-Options\n+@section LoongArch Options\n+\n+The following table lists all available LoongArch specific options.\n+\n+@c man begin OPTIONS\n+@table @gcctabopt\n+\n+@cindex @samp{-fpic} option, LoongArch\n+@item -fpic\n+@itemx -fPIC\n+Generate position-independent code\n+\n+@cindex @samp{-fno-pic} option, LoongArch\n+@item -fno-pic\n+Don't generate position-independent code (default)\n+\n+@end table\n+@c man end"
    },
    {
      "sha": "c25d4f5023f17053f41285126e5b5f9699c0fa54",
      "filename": "gas/po/POTFILES.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/po/POTFILES.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/po/POTFILES.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/po/POTFILES.in?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -87,6 +87,7 @@ config/tc-iq2000.c\n config/tc-iq2000.h\n config/tc-lm32.c\n config/tc-lm32.h\n+config/tc-loongarch.c\n config/tc-m32c.c\n config/tc-m32c.h\n config/tc-m32r.c"
    },
    {
      "sha": "2c812b1fd79a72272a3d43b4d0175ffe5ae40573",
      "filename": "gas/testsuite/gas/all/gas.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/all/gas.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/all/gas.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/gas.exp?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -73,7 +73,8 @@ if {    ![istarget alpha*-*-*vms*]\n      && ![istarget riscv*-*-*]\n      && ![istarget rl78-*-*]\n      && ![istarget rs6000*-*-aix*]\n-     && ![istarget rx-*-*] } then {\n+     && ![istarget rx-*-*]\n+     && ![istarget loongarch*-*-*] } then {\n     gas_test_error \"diff1.s\" \"\" \"difference of two undefined symbols\"\n }\n \n@@ -165,9 +166,11 @@ switch -glob $target_triplet {\n \t# symbols on relocs.\n \tsetup_xfail \"m68hc1*-*-*\" \"m6811-*-*\" \"m6812-*-*\" \"rl78-*-*\"\n \tsetup_xfail \"riscv*-*-*\" \"rx-*-*\" \"vax*-*-*\" \"xgate*-*-*\" \"z8k-*-*\"\n+\tsetup_xfail \"loongarch*-*-*\"\n \trun_dump_test redef2\n \tsetup_xfail \"m68hc1*-*-*\" \"m6811-*-*\" \"m6812-*-*\" \"rl78-*-*\"\n \tsetup_xfail \"riscv*-*-*\" \"rx-*-*\" \"vax*-*-*\" \"xgate*-*-*\" \"z8k-*-*\"\n+\tsetup_xfail \"loongarch*-*-*\"\n \t# rs6000-aix disallows redefinition via .comm.\n \tif [is_xcoff_format] {\n \t    setup_xfail *-*-*"
    },
    {
      "sha": "16b9b56561436bb99049ca52a8fdac26aed53b43",
      "filename": "gas/testsuite/gas/elf/elf.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/elf/elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/elf/elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/elf.exp?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -178,6 +178,7 @@ if { [is_elf_format] } then {\n \trl78-*-* { }\n \triscv*-*-* { }\n \trx-*-* { }\n+\tloongarch*-*-* { }\n \tdefault {\n \t    # The next test can fail if the target does not convert fixups\n \t    # against ordinary symbols into relocations against section symbols."
    },
    {
      "sha": "4e8e2cf023c843de5a7d8c17101b6c1b8ebe55e7",
      "filename": "gas/testsuite/gas/loongarch/4opt_op.d",
      "status": "added",
      "additions": 70,
      "deletions": 0,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/4opt_op.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/4opt_op.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/4opt_op.d?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,70 @@\n+#as-new:\n+#objdump: -dr\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+00000000.* <.text>:\n+[ \t]+0:[ \t]+08118820 [ \t]+fmadd.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2, \\$fa3\n+[ \t]+4:[ \t]+08218820 [ \t]+fmadd.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2, \\$fa3\n+[ \t]+8:[ \t]+08518820 [ \t]+fmsub.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2, \\$fa3\n+[ \t]+c:[ \t]+08618820 [ \t]+fmsub.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2, \\$fa3\n+[ \t]+10:[ \t]+08918820 [ \t]+fnmadd.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2, \\$fa3\n+[ \t]+14:[ \t]+08a18820 [ \t]+fnmadd.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2, \\$fa3\n+[ \t]+18:[ \t]+08d18820 [ \t]+fnmsub.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2, \\$fa3\n+[ \t]+1c:[ \t]+08e18820 [ \t]+fnmsub.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2, \\$fa3\n+[ \t]+20:[ \t]+0c100820 [ \t]+fcmp.caf.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+24:[ \t]+0c108820 [ \t]+fcmp.saf.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+28:[ \t]+0c110820 [ \t]+fcmp.clt.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+2c:[ \t]+0c118820 [ \t]+fcmp.slt.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+30:[ \t]+0c118820 [ \t]+fcmp.slt.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+34:[ \t]+0c120820 [ \t]+fcmp.ceq.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+38:[ \t]+0c128820 [ \t]+fcmp.seq.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+3c:[ \t]+0c130820 [ \t]+fcmp.cle.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+40:[ \t]+0c138820 [ \t]+fcmp.sle.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+44:[ \t]+0c138820 [ \t]+fcmp.sle.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+48:[ \t]+0c140820 [ \t]+fcmp.cun.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+4c:[ \t]+0c148820 [ \t]+fcmp.sun.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+50:[ \t]+0c150820 [ \t]+fcmp.cult.s [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+54:[ \t]+0c150820 [ \t]+fcmp.cult.s [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+58:[ \t]+0c158820 [ \t]+fcmp.sult.s [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+5c:[ \t]+0c160820 [ \t]+fcmp.cueq.s [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+60:[ \t]+0c168820 [ \t]+fcmp.sueq.s [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+64:[ \t]+0c170820 [ \t]+fcmp.cule.s [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+68:[ \t]+0c170820 [ \t]+fcmp.cule.s [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+6c:[ \t]+0c178820 [ \t]+fcmp.sule.s [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+70:[ \t]+0c180820 [ \t]+fcmp.cne.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+74:[ \t]+0c188820 [ \t]+fcmp.sne.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+78:[ \t]+0c1a0820 [ \t]+fcmp.cor.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+7c:[ \t]+0c1a8820 [ \t]+fcmp.sor.s[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+80:[ \t]+0c1c0820 [ \t]+fcmp.cune.s [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+84:[ \t]+0c1c8820 [ \t]+fcmp.sune.s [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+88:[ \t]+0c200820 [ \t]+fcmp.caf.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+8c:[ \t]+0c208820 [ \t]+fcmp.saf.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+90:[ \t]+0c210820 [ \t]+fcmp.clt.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+94:[ \t]+0c218820 [ \t]+fcmp.slt.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+98:[ \t]+0c218820 [ \t]+fcmp.slt.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+9c:[ \t]+0c220820 [ \t]+fcmp.ceq.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+a0:[ \t]+0c228820 [ \t]+fcmp.seq.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+a4:[ \t]+0c230820 [ \t]+fcmp.cle.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+a8:[ \t]+0c238820 [ \t]+fcmp.sle.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+ac:[ \t]+0c238820 [ \t]+fcmp.sle.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+b0:[ \t]+0c240820 [ \t]+fcmp.cun.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+b4:[ \t]+0c248820 [ \t]+fcmp.sun.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+b8:[ \t]+0c250820 [ \t]+fcmp.cult.d [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+bc:[ \t]+0c250820 [ \t]+fcmp.cult.d [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+c0:[ \t]+0c258820 [ \t]+fcmp.sult.d [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+c4:[ \t]+0c260820 [ \t]+fcmp.cueq.d [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+c8:[ \t]+0c268820 [ \t]+fcmp.sueq.d [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+cc:[ \t]+0c270820 [ \t]+fcmp.cule.d [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+d0:[ \t]+0c270820 [ \t]+fcmp.cule.d [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+d4:[ \t]+0c278820 [ \t]+fcmp.sule.d [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+d8:[ \t]+0c280820 [ \t]+fcmp.cne.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+dc:[ \t]+0c288820 [ \t]+fcmp.sne.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+e0:[ \t]+0c2a0820 [ \t]+fcmp.cor.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+e4:[ \t]+0c2a8820 [ \t]+fcmp.sor.d[ \t]+[ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+e8:[ \t]+0c2c0820 [ \t]+fcmp.cune.d [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+ec:[ \t]+0c2c8820 [ \t]+fcmp.sune.d [ \t]+\\$fcc0, \\$fa1, \\$fa2\n+[ \t]+f0:[ \t]+0d000820 [ \t]+fsel[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2, \\$fcc0"
    },
    {
      "sha": "f14fbd6bad80ae6dbed72dc627fcc0f96d49f06a",
      "filename": "gas/testsuite/gas/loongarch/4opt_op.s",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/4opt_op.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/4opt_op.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/4opt_op.s?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,61 @@\n+fmadd.s  $f0,$f1,$f2,$f3\n+fmadd.d  $f0,$f1,$f2,$f3\n+fmsub.s  $f0,$f1,$f2,$f3\n+fmsub.d  $f0,$f1,$f2,$f3\n+fnmadd.s  $f0,$f1,$f2,$f3\n+fnmadd.d  $f0,$f1,$f2,$f3\n+fnmsub.s  $f0,$f1,$f2,$f3\n+fnmsub.d  $f0,$f1,$f2,$f3\n+fcmp.caf.s  $fcc0,$f1,$f2\n+fcmp.saf.s  $fcc0,$f1,$f2\n+fcmp.clt.s  $fcc0,$f1,$f2\n+fcmp.slt.s  $fcc0,$f1,$f2\n+fcmp.sgt.s  $fcc0,$f2,$f1\n+fcmp.ceq.s  $fcc0,$f1,$f2\n+fcmp.seq.s  $fcc0,$f1,$f2\n+fcmp.cle.s  $fcc0,$f1,$f2\n+fcmp.sle.s  $fcc0,$f1,$f2\n+fcmp.sge.s  $fcc0,$f2,$f1\n+fcmp.cun.s  $fcc0,$f1,$f2\n+fcmp.sun.s  $fcc0,$f1,$f2\n+fcmp.cult.s  $fcc0,$f1,$f2\n+fcmp.cugt.s  $fcc0,$f2,$f1\n+fcmp.sult.s  $fcc0,$f1,$f2\n+fcmp.cueq.s  $fcc0,$f1,$f2\n+fcmp.sueq.s  $fcc0,$f1,$f2\n+fcmp.cule.s  $fcc0,$f1,$f2\n+fcmp.cuge.s  $fcc0,$f2,$f1\n+fcmp.sule.s  $fcc0,$f1,$f2\n+fcmp.cne.s  $fcc0,$f1,$f2\n+fcmp.sne.s  $fcc0,$f1,$f2\n+fcmp.cor.s  $fcc0,$f1,$f2\n+fcmp.sor.s  $fcc0,$f1,$f2\n+fcmp.cune.s  $fcc0,$f1,$f2\n+fcmp.sune.s  $fcc0,$f1,$f2\n+fcmp.caf.d  $fcc0,$f1,$f2\n+fcmp.saf.d  $fcc0,$f1,$f2\n+fcmp.clt.d  $fcc0,$f1,$f2\n+fcmp.slt.d  $fcc0,$f1,$f2\n+fcmp.sgt.d  $fcc0,$f2,$f1\n+fcmp.ceq.d  $fcc0,$f1,$f2\n+fcmp.seq.d  $fcc0,$f1,$f2\n+fcmp.cle.d  $fcc0,$f1,$f2\n+fcmp.sle.d  $fcc0,$f1,$f2\n+fcmp.sge.d  $fcc0,$f2,$f1\n+fcmp.cun.d  $fcc0,$f1,$f2\n+fcmp.sun.d  $fcc0,$f1,$f2\n+fcmp.cult.d  $fcc0,$f1,$f2\n+fcmp.cugt.d  $fcc0,$f2,$f1\n+fcmp.sult.d  $fcc0,$f1,$f2\n+fcmp.cueq.d  $fcc0,$f1,$f2\n+fcmp.sueq.d  $fcc0,$f1,$f2\n+fcmp.cule.d  $fcc0,$f1,$f2\n+fcmp.cuge.d  $fcc0,$f2,$f1\n+fcmp.sule.d  $fcc0,$f1,$f2\n+fcmp.cne.d  $fcc0,$f1,$f2\n+fcmp.sne.d  $fcc0,$f1,$f2\n+fcmp.cor.d  $fcc0,$f1,$f2\n+fcmp.sor.d  $fcc0,$f1,$f2\n+fcmp.cune.d  $fcc0,$f1,$f2\n+fcmp.sune.d  $fcc0,$f1,$f2\n+fsel  $f0,$f1,$f2,$fcc0"
    },
    {
      "sha": "7125f2e3309e9577540aff1c1b4446dde3f13081",
      "filename": "gas/testsuite/gas/loongarch/fix_op.d",
      "status": "added",
      "additions": 134,
      "deletions": 0,
      "changes": 134,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/fix_op.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/fix_op.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/fix_op.d?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,134 @@\n+#as:\n+#objdump: -dr\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+00000000.* <.text>:\n+[ \t]+0:[ \t]+000010a4 [ \t]+clo.w[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+4:[ \t]+000014a4 [ \t]+clz.w[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+8:[ \t]+000018a4 [ \t]+cto.w[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+c:[ \t]+00001ca4 [ \t]+ctz.w[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+10:[ \t]+000020a4 [ \t]+clo.d[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+14:[ \t]+000024a4 [ \t]+clz.d[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+18:[ \t]+000028a4 [ \t]+cto.d[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+1c:[ \t]+00002ca4 [ \t]+ctz.d[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+20:[ \t]+000030a4 [ \t]+revb.2h[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+24:[ \t]+000034a4 [ \t]+revb.4h[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+28:[ \t]+000038a4 [ \t]+revb.2w[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+2c:[ \t]+00003ca4 [ \t]+revb.d[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+30:[ \t]+000040a4 [ \t]+revh.2w[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+34:[ \t]+000044a4 [ \t]+revh.d[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+38:[ \t]+000048a4 [ \t]+bitrev.4b[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+3c:[ \t]+00004ca4 [ \t]+bitrev.8b[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+40:[ \t]+000050a4 [ \t]+bitrev.w[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+44:[ \t]+000054a4 [ \t]+bitrev.d[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+48:[ \t]+000058a4 [ \t]+ext.w.h[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+4c:[ \t]+00005ca4 [ \t]+ext.w.b[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+50:[ \t]+001500a4 [ \t]+move[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+54:[ \t]+000060a4 [ \t]+rdtimel.w[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+58:[ \t]+000064a4 [ \t]+rdtimeh.w[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+5c:[ \t]+000068a4 [ \t]+rdtime.d[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+60:[ \t]+00006ca4 [ \t]+cpucfg[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+64:[ \t]+000118a0 [ \t]+asrtle.d[ \t]+[ \t]+\\$a1, \\$a2\n+[ \t]+68:[ \t]+000198a0 [ \t]+asrtgt.d[ \t]+[ \t]+\\$a1, \\$a2\n+[ \t]+6c:[ \t]+000418a4 [ \t]+alsl.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2, 0x1\n+[ \t]+70:[ \t]+000598a4 [ \t]+alsl.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2, 0x4\n+[ \t]+74:[ \t]+000618a4 [ \t]+alsl.wu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2, 0x1\n+[ \t]+78:[ \t]+000798a4 [ \t]+alsl.wu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2, 0x4\n+[ \t]+7c:[ \t]+000818a4 [ \t]+bytepick.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2, 0x0\n+[ \t]+80:[ \t]+000998a4 [ \t]+bytepick.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2, 0x3\n+[ \t]+84:[ \t]+000c18a4 [ \t]+bytepick.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2, 0x0\n+[ \t]+88:[ \t]+000f98a4 [ \t]+bytepick.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2, 0x7\n+[ \t]+8c:[ \t]+001018a4 [ \t]+add.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+90:[ \t]+001098a4 [ \t]+add.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+94:[ \t]+001118a4 [ \t]+sub.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+98:[ \t]+001198a4 [ \t]+sub.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+9c:[ \t]+001218a4 [ \t]+slt[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+a0:[ \t]+001298a4 [ \t]+sltu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+a4:[ \t]+001318a4 [ \t]+maskeqz[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+a8:[ \t]+001398a4 [ \t]+masknez[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+ac:[ \t]+001418a4 [ \t]+nor[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+b0:[ \t]+001498a4 [ \t]+and[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+b4:[ \t]+001518a4 [ \t]+or[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+b8:[ \t]+001598a4 [ \t]+xor[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+bc:[ \t]+001618a4 [ \t]+orn[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+c0:[ \t]+001698a4 [ \t]+andn[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+c4:[ \t]+001718a4 [ \t]+sll.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+c8:[ \t]+001798a4 [ \t]+srl.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+cc:[ \t]+001818a4 [ \t]+sra.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+d0:[ \t]+001898a4 [ \t]+sll.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+d4:[ \t]+001918a4 [ \t]+srl.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+d8:[ \t]+001998a4 [ \t]+sra.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+dc:[ \t]+001b18a4 [ \t]+rotr.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+e0:[ \t]+001b98a4 [ \t]+rotr.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+e4:[ \t]+001c18a4 [ \t]+mul.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+e8:[ \t]+001c98a4 [ \t]+mulh.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+ec:[ \t]+001d18a4 [ \t]+mulh.wu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+f0:[ \t]+001d98a4 [ \t]+mul.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+f4:[ \t]+001e18a4 [ \t]+mulh.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+f8:[ \t]+001e98a4 [ \t]+mulh.du[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+fc:[ \t]+001f18a4 [ \t]+mulw.d.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+100:[ \t]+001f98a4 [ \t]+mulw.d.wu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+104:[ \t]+002018a4 [ \t]+div.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+108:[ \t]+002098a4 [ \t]+mod.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+10c:[ \t]+002118a4 [ \t]+div.wu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+110:[ \t]+002198a4 [ \t]+mod.wu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+114:[ \t]+002218a4 [ \t]+div.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+118:[ \t]+002298a4 [ \t]+mod.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+11c:[ \t]+002318a4 [ \t]+div.du[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+120:[ \t]+002398a4 [ \t]+mod.du[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+124:[ \t]+002418a4 [ \t]+crc.w.b.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+128:[ \t]+002498a4 [ \t]+crc.w.h.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+12c:[ \t]+002518a4 [ \t]+crc.w.w.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+130:[ \t]+002598a4 [ \t]+crc.w.d.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+134:[ \t]+002618a4 [ \t]+crcc.w.b.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+138:[ \t]+002698a4 [ \t]+crcc.w.h.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+13c:[ \t]+002718a4 [ \t]+crcc.w.w.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+140:[ \t]+002798a4 [ \t]+crcc.w.d.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+[ \t]+144:[ \t]+002a0000 [ \t]+break[ \t]+[ \t]+0x0\n+[ \t]+148:[ \t]+002a7fff [ \t]+break[ \t]+[ \t]+0x7fff\n+[ \t]+14c:[ \t]+002a8000 [ \t]+dbcl[ \t]+[ \t]+0x0\n+[ \t]+150:[ \t]+002affff [ \t]+dbcl[ \t]+[ \t]+0x7fff\n+[ \t]+154:[ \t]+002c18a4 [ \t]+alsl.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2, 0x1\n+[ \t]+158:[ \t]+002d98a4 [ \t]+alsl.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2, 0x4\n+[ \t]+15c:[ \t]+004080a4 [ \t]+slli.w[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+160:[ \t]+004084a4 [ \t]+slli.w[ \t]+[ \t]+\\$a0, \\$a1, 0x1\n+[ \t]+164:[ \t]+0040fca4 [ \t]+slli.w[ \t]+[ \t]+\\$a0, \\$a1, 0x1f\n+[ \t]+168:[ \t]+004100a4 [ \t]+slli.d[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+16c:[ \t]+004104a4 [ \t]+slli.d[ \t]+[ \t]+\\$a0, \\$a1, 0x1\n+[ \t]+170:[ \t]+0041fca4 [ \t]+slli.d[ \t]+[ \t]+\\$a0, \\$a1, 0x3f\n+[ \t]+174:[ \t]+004480a4 [ \t]+srli.w[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+178:[ \t]+004484a4 [ \t]+srli.w[ \t]+[ \t]+\\$a0, \\$a1, 0x1\n+[ \t]+17c:[ \t]+0044fca4 [ \t]+srli.w[ \t]+[ \t]+\\$a0, \\$a1, 0x1f\n+[ \t]+180:[ \t]+004500a4 [ \t]+srli.d[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+184:[ \t]+004504a4 [ \t]+srli.d[ \t]+[ \t]+\\$a0, \\$a1, 0x1\n+[ \t]+188:[ \t]+0045fca4 [ \t]+srli.d[ \t]+[ \t]+\\$a0, \\$a1, 0x3f\n+[ \t]+18c:[ \t]+004880a4 [ \t]+srai.w[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+190:[ \t]+004884a4 [ \t]+srai.w[ \t]+[ \t]+\\$a0, \\$a1, 0x1\n+[ \t]+194:[ \t]+0048fca4 [ \t]+srai.w[ \t]+[ \t]+\\$a0, \\$a1, 0x1f\n+[ \t]+198:[ \t]+004900a4 [ \t]+srai.d[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+19c:[ \t]+004904a4 [ \t]+srai.d[ \t]+[ \t]+\\$a0, \\$a1, 0x1\n+[ \t]+1a0:[ \t]+0049fca4 [ \t]+srai.d[ \t]+[ \t]+\\$a0, \\$a1, 0x3f\n+[ \t]+1a4:[ \t]+004c80a4 [ \t]+rotri.w[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+1a8:[ \t]+004c84a4 [ \t]+rotri.w[ \t]+[ \t]+\\$a0, \\$a1, 0x1\n+[ \t]+1ac:[ \t]+004cfca4 [ \t]+rotri.w[ \t]+[ \t]+\\$a0, \\$a1, 0x1f\n+[ \t]+1b0:[ \t]+004d00a4 [ \t]+rotri.d[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+1b4:[ \t]+004d04a4 [ \t]+rotri.d[ \t]+[ \t]+\\$a0, \\$a1, 0x1\n+[ \t]+1b8:[ \t]+004dfca4 [ \t]+rotri.d[ \t]+[ \t]+\\$a0, \\$a1, 0x3f\n+[ \t]+1bc:[ \t]+006000a4 [ \t]+bstrins.w[ \t]+[ \t]+\\$a0, \\$a1, 0x0, 0x0\n+[ \t]+1c0:[ \t]+006204a4 [ \t]+bstrins.w[ \t]+[ \t]+\\$a0, \\$a1, 0x2, 0x1\n+[ \t]+1c4:[ \t]+007f00a4 [ \t]+bstrins.w[ \t]+[ \t]+\\$a0, \\$a1, 0x1f, 0x0\n+[ \t]+1c8:[ \t]+006080a4 [ \t]+bstrpick.w[ \t]+[ \t]+\\$a0, \\$a1, 0x0, 0x0\n+[ \t]+1cc:[ \t]+006284a4 [ \t]+bstrpick.w[ \t]+[ \t]+\\$a0, \\$a1, 0x2, 0x1\n+[ \t]+1d0:[ \t]+007f80a4 [ \t]+bstrpick.w[ \t]+[ \t]+\\$a0, \\$a1, 0x1f, 0x0\n+[ \t]+1d4:[ \t]+008000a4 [ \t]+bstrins.d[ \t]+[ \t]+\\$a0, \\$a1, 0x0, 0x0\n+[ \t]+1d8:[ \t]+009f04a4 [ \t]+bstrins.d[ \t]+[ \t]+\\$a0, \\$a1, 0x1f, 0x1\n+[ \t]+1dc:[ \t]+00a000a4 [ \t]+bstrins.d[ \t]+[ \t]+\\$a0, \\$a1, 0x20, 0x0\n+[ \t]+1e0:[ \t]+00bf00a4 [ \t]+bstrins.d[ \t]+[ \t]+\\$a0, \\$a1, 0x3f, 0x0\n+[ \t]+1e4:[ \t]+00c000a4 [ \t]+bstrpick.d[ \t]+[ \t]+\\$a0, \\$a1, 0x0, 0x0\n+[ \t]+1e8:[ \t]+00df04a4 [ \t]+bstrpick.d[ \t]+[ \t]+\\$a0, \\$a1, 0x1f, 0x1\n+[ \t]+1ec:[ \t]+00e000a4 [ \t]+bstrpick.d[ \t]+[ \t]+\\$a0, \\$a1, 0x20, 0x0\n+[ \t]+1f0:[ \t]+00ff00a4 [ \t]+bstrpick.d[ \t]+[ \t]+\\$a0, \\$a1, 0x3f, 0x0"
    },
    {
      "sha": "d0523f959fb808e26d3d233d72fcaa82665c4e00",
      "filename": "gas/testsuite/gas/loongarch/fix_op.s",
      "status": "added",
      "additions": 125,
      "deletions": 0,
      "changes": 125,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/fix_op.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/fix_op.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/fix_op.s?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,125 @@\n+clo.w  $r4,$r5\n+clz.w  $r4,$r5\n+cto.w  $r4,$r5\n+ctz.w  $r4,$r5\n+clo.d  $r4,$r5\n+clz.d  $r4,$r5\n+cto.d  $r4,$r5\n+ctz.d  $r4,$r5\n+revb.2h  $r4,$r5\n+revb.4h  $r4,$r5\n+revb.2w  $r4,$r5\n+revb.d  $r4,$r5\n+revh.2w  $r4,$r5\n+revh.d  $r4,$r5\n+bitrev.4b  $r4,$r5\n+bitrev.8b  $r4,$r5\n+bitrev.w  $r4,$r5\n+bitrev.d  $r4,$r5\n+ext.w.h  $r4,$r5\n+ext.w.b  $r4,$r5\n+move  $r4,$r5\n+rdtimel.w  $r4,$r5\n+rdtimeh.w  $r4,$r5\n+rdtime.d  $r4,$r5\n+cpucfg  $r4,$r5\n+asrtle.d  $r5,$r6\n+asrtgt.d  $r5,$r6\n+alsl.w  $r4,$r5,$r6,1\n+alsl.w  $r4,$r5,$r6,4\n+alsl.wu  $r4,$r5,$r6,1\n+alsl.wu  $r4,$r5,$r6,4\n+bytepick.w  $r4,$r5,$r6,0\n+bytepick.w  $r4,$r5,$r6,3\n+bytepick.d  $r4,$r5,$r6,0\n+bytepick.d  $r4,$r5,$r6,7\n+add.w  $r4,$r5,$r6\n+add.d  $r4,$r5,$r6\n+sub.w  $r4,$r5,$r6\n+sub.d  $r4,$r5,$r6\n+slt  $r4,$r5,$r6\n+sltu  $r4,$r5,$r6\n+maskeqz  $r4,$r5,$r6\n+masknez  $r4,$r5,$r6\n+nor  $r4,$r5,$r6\n+and  $r4,$r5,$r6\n+or  $r4,$r5,$r6\n+xor  $r4,$r5,$r6\n+orn  $r4,$r5,$r6\n+andn  $r4,$r5,$r6\n+sll.w  $r4,$r5,$r6\n+srl.w  $r4,$r5,$r6\n+sra.w  $r4,$r5,$r6\n+sll.d  $r4,$r5,$r6\n+srl.d  $r4,$r5,$r6\n+sra.d  $r4,$r5,$r6\n+rotr.w  $r4,$r5,$r6\n+rotr.d  $r4,$r5,$r6\n+mul.w  $r4,$r5,$r6\n+mulh.w  $r4,$r5,$r6\n+mulh.wu  $r4,$r5,$r6\n+mul.d  $r4,$r5,$r6\n+mulh.d  $r4,$r5,$r6\n+mulh.du  $r4,$r5,$r6\n+mulw.d.w  $r4,$r5,$r6\n+mulw.d.wu  $r4,$r5,$r6\n+div.w  $r4,$r5,$r6\n+mod.w  $r4,$r5,$r6\n+div.wu  $r4,$r5,$r6\n+mod.wu  $r4,$r5,$r6\n+div.d  $r4,$r5,$r6\n+mod.d  $r4,$r5,$r6\n+div.du  $r4,$r5,$r6\n+mod.du  $r4,$r5,$r6\n+crc.w.b.w  $r4,$r5,$r6\n+crc.w.h.w  $r4,$r5,$r6\n+crc.w.w.w  $r4,$r5,$r6\n+crc.w.d.w  $r4,$r5,$r6\n+crcc.w.b.w  $r4,$r5,$r6\n+crcc.w.h.w  $r4,$r5,$r6\n+crcc.w.w.w  $r4,$r5,$r6\n+crcc.w.d.w  $r4,$r5,$r6\n+break  0\n+break  0x7fff\n+dbcl   0\n+dbcl   0x7fff\n+alsl.d  $r4,$r5,$r6,1\n+alsl.d  $r4,$r5,$r6,4\n+slli.w  $r4,$r5,0\n+slli.w  $r4,$r5,1\n+slli.w  $r4,$r5,0x1f\n+slli.d  $r4,$r5,0\n+slli.d  $r4,$r5,1\n+slli.d  $r4,$r5,0x3f\n+srli.w  $r4,$r5,0\n+srli.w  $r4,$r5,1\n+srli.w  $r4,$r5,0x1f\n+srli.d  $r4,$r5,0\n+srli.d  $r4,$r5,1\n+srli.d  $r4,$r5,0x3f\n+srai.w  $r4,$r5,0\n+srai.w  $r4,$r5,1\n+srai.w  $r4,$r5,0x1f\n+srai.d  $r4,$r5,0\n+srai.d  $r4,$r5,1\n+srai.d  $r4,$r5,0x3f\n+rotri.w  $r4,$r5,0\n+rotri.w  $r4,$r5,1\n+rotri.w  $r4,$r5,0x1f\n+rotri.d  $r4,$r5,0\n+rotri.d  $r4,$r5,1\n+rotri.d  $r4,$r5,0x3f\n+bstrins.w  $r4,$r5,0,0\n+bstrins.w  $r4,$r5,2,1\n+bstrins.w  $r4,$r5,31,0\n+bstrpick.w  $r4,$r5,0,0\n+bstrpick.w  $r4,$r5,2,1\n+bstrpick.w  $r4,$r5,31,0\n+bstrins.d  $r4,$r5,0,0\n+bstrins.d  $r4,$r5,31,1\n+bstrins.d  $r4,$r5,32,0\n+bstrins.d  $r4,$r5,63,0\n+bstrpick.d  $r4,$r5,0,0\n+bstrpick.d  $r4,$r5,31,1\n+bstrpick.d  $r4,$r5,32,0\n+bstrpick.d  $r4,$r5,63,0"
    },
    {
      "sha": "cdc41d4db8b25365198898ea20649cafb12e9860",
      "filename": "gas/testsuite/gas/loongarch/float_op.d",
      "status": "added",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/float_op.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/float_op.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/float_op.d?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,85 @@\n+#as:\n+#objdump: -dr\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <.text>:\n+[ \t]+0:[ \t]+01008820 [ \t]+fadd.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+4:[ \t]+01010820 [ \t]+fadd.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+8:[ \t]+01028820 [ \t]+fsub.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+c:[ \t]+01030820 [ \t]+fsub.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+10:[ \t]+01048820 [ \t]+fmul.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+14:[ \t]+01050820 [ \t]+fmul.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+18:[ \t]+01068820 [ \t]+fdiv.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+1c:[ \t]+01070820 [ \t]+fdiv.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+20:[ \t]+01088820 [ \t]+fmax.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+24:[ \t]+01090820 [ \t]+fmax.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+28:[ \t]+010a8820 [ \t]+fmin.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+2c:[ \t]+010b0820 [ \t]+fmin.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+30:[ \t]+010c8820 [ \t]+fmaxa.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+34:[ \t]+010d0820 [ \t]+fmaxa.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+38:[ \t]+010e8820 [ \t]+fmina.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+3c:[ \t]+010f0820 [ \t]+fmina.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+40:[ \t]+01108820 [ \t]+fscaleb.s[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+44:[ \t]+01110820 [ \t]+fscaleb.d[ \t]+[ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+48:[ \t]+01128820 [ \t]+fcopysign.s [ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+4c:[ \t]+01130820 [ \t]+fcopysign.d [ \t]+\\$fa0, \\$fa1, \\$fa2\n+[ \t]+50:[ \t]+01140420 [ \t]+fabs.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+54:[ \t]+01140820 [ \t]+fabs.d[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+58:[ \t]+01141420 [ \t]+fneg.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+5c:[ \t]+01141820 [ \t]+fneg.d[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+60:[ \t]+01142420 [ \t]+flogb.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+64:[ \t]+01142820 [ \t]+flogb.d[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+68:[ \t]+01143420 [ \t]+fclass.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+6c:[ \t]+01143820 [ \t]+fclass.d[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+70:[ \t]+01144420 [ \t]+fsqrt.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+74:[ \t]+01144820 [ \t]+fsqrt.d[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+78:[ \t]+01145420 [ \t]+frecip.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+7c:[ \t]+01145820 [ \t]+frecip.d[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+80:[ \t]+01146420 [ \t]+frsqrt.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+84:[ \t]+01146820 [ \t]+frsqrt.d[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+88:[ \t]+01149420 [ \t]+fmov.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+8c:[ \t]+01149820 [ \t]+fmov.d[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+90:[ \t]+0114a4a0 [ \t]+movgr2fr.w[ \t]+[ \t]+\\$fa0, \\$a1\n+[ \t]+94:[ \t]+0114a8a0 [ \t]+movgr2fr.d[ \t]+[ \t]+\\$fa0, \\$a1\n+[ \t]+98:[ \t]+0114aca0 [ \t]+movgr2frh.w [ \t]+\\$fa0, \\$a1\n+[ \t]+9c:[ \t]+0114b424 [ \t]+movfr2gr.s[ \t]+[ \t]+\\$a0, \\$fa1\n+[ \t]+a0:[ \t]+0114b824 [ \t]+movfr2gr.d[ \t]+[ \t]+\\$a0, \\$fa1\n+[ \t]+a4:[ \t]+0114bc24 [ \t]+movfrh2gr.s [ \t]+\\$a0, \\$fa1\n+[ \t]+a8:[ \t]+0114c0a4 [ \t]+movgr2fcsr[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+ac:[ \t]+0114c8a4 [ \t]+movfcsr2gr[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+b0:[ \t]+0114d020 [ \t]+movfr2cf[ \t]+[ \t]+\\$fcc0, \\$fa1\n+[ \t]+b4:[ \t]+0114d4a0 [ \t]+movcf2fr[ \t]+[ \t]+\\$fa0, \\$fcc5\n+[ \t]+b8:[ \t]+0114d8a0 [ \t]+movgr2cf[ \t]+[ \t]+\\$fcc0, \\$a1\n+[ \t]+bc:[ \t]+0114dca4 [ \t]+movcf2gr[ \t]+[ \t]+\\$a0, \\$fcc5\n+[ \t]+c0:[ \t]+01191820 [ \t]+fcvt.s.d[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+c4:[ \t]+01192420 [ \t]+fcvt.d.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+c8:[ \t]+011a0420 [ \t]+ftintrm.w.s [ \t]+\\$fa0, \\$fa1\n+[ \t]+cc:[ \t]+011a0820 [ \t]+ftintrm.w.d [ \t]+\\$fa0, \\$fa1\n+[ \t]+d0:[ \t]+011a2420 [ \t]+ftintrm.l.s [ \t]+\\$fa0, \\$fa1\n+[ \t]+d4:[ \t]+011a2820 [ \t]+ftintrm.l.d [ \t]+\\$fa0, \\$fa1\n+[ \t]+d8:[ \t]+011a4420 [ \t]+ftintrp.w.s [ \t]+\\$fa0, \\$fa1\n+[ \t]+dc:[ \t]+011a4820 [ \t]+ftintrp.w.d [ \t]+\\$fa0, \\$fa1\n+[ \t]+e0:[ \t]+011a6420 [ \t]+ftintrp.l.s [ \t]+\\$fa0, \\$fa1\n+[ \t]+e4:[ \t]+011a6820 [ \t]+ftintrp.l.d [ \t]+\\$fa0, \\$fa1\n+[ \t]+e8:[ \t]+011a8420 [ \t]+ftintrz.w.s [ \t]+\\$fa0, \\$fa1\n+[ \t]+ec:[ \t]+011a8820 [ \t]+ftintrz.w.d [ \t]+\\$fa0, \\$fa1\n+[ \t]+f0:[ \t]+011aa420 [ \t]+ftintrz.l.s [ \t]+\\$fa0, \\$fa1\n+[ \t]+f4:[ \t]+011aa820 [ \t]+ftintrz.l.d [ \t]+\\$fa0, \\$fa1\n+[ \t]+f8:[ \t]+011ac420 [ \t]+ftintrne.w.s[ \t]+\\$fa0, \\$fa1\n+[ \t]+fc:[ \t]+011ac820 [ \t]+ftintrne.w.d[ \t]+\\$fa0, \\$fa1\n+[ \t]+100:[ \t]+011ae420 [ \t]+ftintrne.l.s[ \t]+\\$fa0, \\$fa1\n+[ \t]+104:[ \t]+011ae820 [ \t]+ftintrne.l.d[ \t]+\\$fa0, \\$fa1\n+[ \t]+108:[ \t]+011b0420 [ \t]+ftint.w.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+10c:[ \t]+011b0820 [ \t]+ftint.w.d[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+110:[ \t]+011b2420 [ \t]+ftint.l.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+114:[ \t]+011b2820 [ \t]+ftint.l.d[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+118:[ \t]+011d1020 [ \t]+ffint.s.w[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+11c:[ \t]+011d1820 [ \t]+ffint.s.l[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+120:[ \t]+011d2020 [ \t]+ffint.d.w[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+124:[ \t]+011d2820 [ \t]+ffint.d.l[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+128:[ \t]+011e4420 [ \t]+frint.s[ \t]+[ \t]+\\$fa0, \\$fa1\n+[ \t]+12c:[ \t]+011e4820 [ \t]+frint.d[ \t]+[ \t]+\\$fa0, \\$fa1"
    },
    {
      "sha": "da1a198edee7f091b3a046fc0a5ff7d3651d725c",
      "filename": "gas/testsuite/gas/loongarch/float_op.s",
      "status": "added",
      "additions": 76,
      "deletions": 0,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/float_op.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/float_op.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/float_op.s?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,76 @@\n+fadd.s  $f0,$f1,$f2\n+fadd.d  $f0,$f1,$f2\n+fsub.s  $f0,$f1,$f2\n+fsub.d  $f0,$f1,$f2\n+fmul.s  $f0,$f1,$f2\n+fmul.d  $f0,$f1,$f2\n+fdiv.s  $f0,$f1,$f2\n+fdiv.d  $f0,$f1,$f2\n+fmax.s  $f0,$f1,$f2\n+fmax.d  $f0,$f1,$f2\n+fmin.s  $f0,$f1,$f2\n+fmin.d  $f0,$f1,$f2\n+fmaxa.s  $f0,$f1,$f2\n+fmaxa.d  $f0,$f1,$f2\n+fmina.s  $f0,$f1,$f2\n+fmina.d  $f0,$f1,$f2\n+fscaleb.s  $f0,$f1,$f2\n+fscaleb.d  $f0,$f1,$f2\n+fcopysign.s  $f0,$f1,$f2\n+fcopysign.d  $f0,$f1,$f2\n+fabs.s  $f0,$f1\n+fabs.d  $f0,$f1\n+fneg.s  $f0,$f1\n+fneg.d  $f0,$f1\n+flogb.s  $f0,$f1\n+flogb.d  $f0,$f1\n+fclass.s  $f0,$f1\n+fclass.d  $f0,$f1\n+fsqrt.s  $f0,$f1\n+fsqrt.d  $f0,$f1\n+frecip.s  $f0,$f1\n+frecip.d  $f0,$f1\n+frsqrt.s  $f0,$f1\n+frsqrt.d  $f0,$f1\n+fmov.s  $f0,$f1\n+fmov.d  $f0,$f1\n+movgr2fr.w  $f0,$r5\n+movgr2fr.d  $f0,$r5\n+movgr2frh.w  $f0,$r5\n+movfr2gr.s  $r4,$f1\n+movfr2gr.d  $r4,$f1\n+movfrh2gr.s  $r4,$f1\n+movgr2fcsr  $r4,$r5\n+movfcsr2gr  $r4,$r5\n+movfr2cf  $fcc0,$f1\n+movcf2fr  $f0,$fcc5\n+movgr2cf  $fcc0,$r5\n+movcf2gr  $r4,$fcc5\n+fcvt.s.d  $f0,$f1\n+fcvt.d.s  $f0,$f1\n+ftintrm.w.s  $f0,$f1\n+ftintrm.w.d  $f0,$f1\n+ftintrm.l.s  $f0,$f1\n+ftintrm.l.d  $f0,$f1\n+ftintrp.w.s  $f0,$f1\n+ftintrp.w.d  $f0,$f1\n+ftintrp.l.s  $f0,$f1\n+ftintrp.l.d  $f0,$f1\n+ftintrz.w.s  $f0,$f1\n+ftintrz.w.d  $f0,$f1\n+ftintrz.l.s  $f0,$f1\n+ftintrz.l.d  $f0,$f1\n+ftintrne.w.s  $f0,$f1\n+ftintrne.w.d  $f0,$f1\n+ftintrne.l.s  $f0,$f1\n+ftintrne.l.d  $f0,$f1\n+ftint.w.s  $f0,$f1\n+ftint.w.d  $f0,$f1\n+ftint.l.s  $f0,$f1\n+ftint.l.d  $f0,$f1\n+ffint.s.w  $f0,$f1\n+ffint.s.l  $f0,$f1\n+ffint.d.w  $f0,$f1\n+ffint.d.l  $f0,$f1\n+frint.s  $f0,$f1\n+frint.d  $f0,$f1"
    },
    {
      "sha": "a017aaf5bf73c296241eadd13590ca3d76d51ff5",
      "filename": "gas/testsuite/gas/loongarch/imm_op.d",
      "status": "added",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/imm_op.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/imm_op.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/imm_op.d?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,48 @@\n+#as:\n+#objdump: -dr\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+00000000.* <.text>:\n+[ \t]+0:[ \t]+020000a4 [ \t]+slti[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+4:[ \t]+021ffca4 [ \t]+slti[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+8:[ \t]+022004a4 [ \t]+slti[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+c:[ \t]+024000a4 [ \t]+sltui[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+10:[ \t]+025ffca4 [ \t]+sltui[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+14:[ \t]+026004a4 [ \t]+sltui[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+18:[ \t]+028000a4 [ \t]+addi.w[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+1c:[ \t]+029ffca4 [ \t]+addi.w[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+20:[ \t]+02a004a4 [ \t]+addi.w[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+24:[ \t]+02c000a4 [ \t]+addi.d[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+28:[ \t]+02dffca4 [ \t]+addi.d[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+2c:[ \t]+02e004a4 [ \t]+addi.d[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+30:[ \t]+030000a4 [ \t]+lu52i.d[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+34:[ \t]+031ffca4 [ \t]+lu52i.d[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+38:[ \t]+032004a4 [ \t]+lu52i.d[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+3c:[ \t]+034000a4 [ \t]+andi[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+40:[ \t]+035ffca4 [ \t]+andi[ \t]+[ \t]+\\$a0, \\$a1, 0x7ff\n+[ \t]+44:[ \t]+038000a4 [ \t]+ori[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+48:[ \t]+039ffca4 [ \t]+ori[ \t]+[ \t]+\\$a0, \\$a1, 0x7ff\n+[ \t]+4c:[ \t]+03c000a4 [ \t]+xori[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+50:[ \t]+03dffca4 [ \t]+xori[ \t]+[ \t]+\\$a0, \\$a1, 0x7ff\n+[ \t]+54:[ \t]+100000a4 [ \t]+addu16i.d[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+58:[ \t]+11fffca4 [ \t]+addu16i.d[ \t]+[ \t]+\\$a0, \\$a1, 32767\\(0x7fff\\)\n+[ \t]+5c:[ \t]+120004a4 [ \t]+addu16i.d[ \t]+[ \t]+\\$a0, \\$a1, -32767\\(0x8001\\)\n+[ \t]+60:[ \t]+14000004 [ \t]+lu12i.w[ \t]+[ \t]+\\$a0, 0\n+[ \t]+64:[ \t]+14ffffe4 [ \t]+lu12i.w[ \t]+[ \t]+\\$a0, 524287\\(0x7ffff\\)\n+[ \t]+68:[ \t]+17000024 [ \t]+lu32i.d[ \t]+[ \t]+\\$a0, -524287\\(0x80001\\)\n+[ \t]+6c:[ \t]+18000004 [ \t]+pcaddi[ \t]+[ \t]+\\$a0, 0\n+[ \t]+70:[ \t]+18ffffe4 [ \t]+pcaddi[ \t]+[ \t]+\\$a0, 524287\\(0x7ffff\\)\n+[ \t]+74:[ \t]+19000024 [ \t]+pcaddi[ \t]+[ \t]+\\$a0, -524287\\(0x80001\\)\n+[ \t]+78:[ \t]+1a000004 [ \t]+pcalau12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+7c:[ \t]+1affffe4 [ \t]+pcalau12i[ \t]+[ \t]+\\$a0, 524287\\(0x7ffff\\)\n+[ \t]+80:[ \t]+1b000024 [ \t]+pcalau12i[ \t]+[ \t]+\\$a0, -524287\\(0x80001\\)\n+[ \t]+84:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+88:[ \t]+1cffffe4 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 524287\\(0x7ffff\\)\n+[ \t]+8c:[ \t]+1d000024 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, -524287\\(0x80001\\)\n+[ \t]+90:[ \t]+1e000004 [ \t]+pcaddu18i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+94:[ \t]+1effffe4 [ \t]+pcaddu18i[ \t]+[ \t]+\\$a0, 524287\\(0x7ffff\\)\n+[ \t]+98:[ \t]+1f000024 [ \t]+pcaddu18i[ \t]+[ \t]+\\$a0, -524287\\(0x80001\\)"
    },
    {
      "sha": "7e1c5518cbaba226fab30b841d155bada2eb6d30",
      "filename": "gas/testsuite/gas/loongarch/imm_op.s",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/imm_op.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/imm_op.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/imm_op.s?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,39 @@\n+slti  $r4,$r5,0\n+slti  $r4,$r5,0x7ff\n+slti  $r4,$r5,-0x7ff\n+sltui  $r4,$r5,0\n+sltui  $r4,$r5,0x7ff\n+sltui  $r4,$r5,-0x7ff\n+addi.w  $r4,$r5,0\n+addi.w  $r4,$r5,0x7ff\n+addi.w  $r4,$r5,-0x7ff\n+addi.d  $r4,$r5,0\n+addi.d  $r4,$r5,0x7ff\n+addi.d  $r4,$r5,-0x7ff\n+lu52i.d  $r4,$r5,0\n+lu52i.d  $r4,$r5,0x7ff\n+lu52i.d  $r4,$r5,-0x7ff\n+andi  $r4,$r5,0\n+andi  $r4,$r5,0x7ff\n+ori  $r4,$r5,0\n+ori  $r4,$r5,0x7ff\n+xori  $r4,$r5,0\n+xori  $r4,$r5,0x7ff\n+addu16i.d  $r4,$r5,0\n+addu16i.d  $r4,$r5,0x7fff\n+addu16i.d  $r4,$r5,-0x7fff\n+lu12i.w  $r4,0\n+lu12i.w  $r4,0x7ffff\n+lu32i.d  $r4,-0x7ffff\n+pcaddi  $r4,0\n+pcaddi  $r4,0x7ffff\n+pcaddi  $r4,-0x7ffff\n+pcalau12i  $r4,0\n+pcalau12i  $r4,0x7ffff\n+pcalau12i  $r4,-0x7ffff\n+pcaddu12i  $r4,0\n+pcaddu12i  $r4,0x7ffff\n+pcaddu12i  $r4,-0x7ffff\n+pcaddu18i  $r4,0\n+pcaddu18i  $r4,0x7ffff\n+pcaddu18i  $r4,-0x7ffff"
    },
    {
      "sha": "caa61951b4b97c90929f975c24ba2e4658b5a6cc",
      "filename": "gas/testsuite/gas/loongarch/jmp_op.d",
      "status": "added",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/jmp_op.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/jmp_op.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/jmp_op.d?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,68 @@\n+#as:\n+#objdump: -dr\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+00000000.* <.text>:\n+[ \t]+0:[ \t]+03400000 [ \t]+andi[ \t]+[ \t]+\\$zero, \\$zero, 0x0\n+[ \t]+4:[ \t]+60000004 [ \t]+bgtz[ \t]+[ \t]+\\$a0, 0[ \t]+# 0x4\n+[ \t]+[ \t]+[ \t]+4: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+4: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+8:[ \t]+64000080 [ \t]+bgez[ \t]+[ \t]+\\$a0, 0[ \t]+# 0x8\n+[ \t]+[ \t]+[ \t]+8: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+8: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+c:[ \t]+64000004 [ \t]+blez[ \t]+[ \t]+\\$a0, 0[ \t]+# 0xc\n+[ \t]+[ \t]+[ \t]+c: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+c: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+10:[ \t]+40000080 [ \t]+beqz[ \t]+[ \t]+\\$a0, 0[ \t]+# 0x10\n+[ \t]+[ \t]+[ \t]+10: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+10: R_LARCH_SOP_POP_32_S_0_5_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+14:[ \t]+44000080 [ \t]+bnez[ \t]+[ \t]+\\$a0, 0[ \t]+# 0x14\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_POP_32_S_0_5_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+18:[ \t]+48000000 [ \t]+bceqz[ \t]+[ \t]+\\$fcc0, 0[ \t]+# 0x18\n+[ \t]+[ \t]+[ \t]+18: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+18: R_LARCH_SOP_POP_32_S_0_5_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+1c:[ \t]+48000100 [ \t]+bcnez[ \t]+[ \t]+\\$fcc0, 0[ \t]+# 0x1c\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_POP_32_S_0_5_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+20:[ \t]+4c000080 [ \t]+jirl[ \t]+[ \t]+\\$zero, \\$a0, 0\n+[ \t]+24:[ \t]+50000000 [ \t]+b[ \t]+[ \t]+0[ \t]+# 0x24\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_POP_32_S_0_10_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+28:[ \t]+54000000 [ \t]+bl[ \t]+[ \t]+0[ \t]+# 0x28\n+[ \t]+[ \t]+[ \t]+28: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+28: R_LARCH_SOP_POP_32_S_0_10_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+2c:[ \t]+58000085 [ \t]+beq[ \t]+[ \t]+\\$a0, \\$a1, 0[ \t]+# 0x2c\n+[ \t]+[ \t]+[ \t]+2c: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+2c: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+30:[ \t]+5c000085 [ \t]+bne[ \t]+[ \t]+\\$a0, \\$a1, 0[ \t]+# 0x30\n+[ \t]+[ \t]+[ \t]+30: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+30: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+34:[ \t]+60000085 [ \t]+blt[ \t]+[ \t]+\\$a0, \\$a1, 0[ \t]+# 0x34\n+[ \t]+[ \t]+[ \t]+34: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+34: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+38:[ \t]+600000a4 [ \t]+blt[ \t]+[ \t]+\\$a1, \\$a0, 0[ \t]+# 0x38\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+3c:[ \t]+64000085 [ \t]+bge[ \t]+[ \t]+\\$a0, \\$a1, 0[ \t]+# 0x3c\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+40:[ \t]+640000a4 [ \t]+bge[ \t]+[ \t]+\\$a1, \\$a0, 0[ \t]+# 0x40\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+44:[ \t]+68000085 [ \t]+bltu[ \t]+[ \t]+\\$a0, \\$a1, 0[ \t]+# 0x44\n+[ \t]+[ \t]+[ \t]+44: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+44: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+48:[ \t]+680000a4 [ \t]+bltu[ \t]+[ \t]+\\$a1, \\$a0, 0[ \t]+# 0x48\n+[ \t]+[ \t]+[ \t]+48: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+48: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+4c:[ \t]+6c000085 [ \t]+bgeu[ \t]+[ \t]+\\$a0, \\$a1, 0[ \t]+# 0x4c\n+[ \t]+[ \t]+[ \t]+4c: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+4c: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*\n+[ \t]+50:[ \t]+6c0000a4 [ \t]+bgeu[ \t]+[ \t]+\\$a1, \\$a0, 0[ \t]+# 0x50\n+[ \t]+[ \t]+[ \t]+50: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+50: R_LARCH_SOP_POP_32_S_10_16_S2[ \t]+\\*ABS\\*"
    },
    {
      "sha": "2ec20ed828a7546d46564f0afedcb3696e173101",
      "filename": "gas/testsuite/gas/loongarch/jmp_op.s",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/jmp_op.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/jmp_op.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/jmp_op.s?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,22 @@\n+.L1:\n+nop\n+bgtz  $r4,L1\n+bgez  $r4,L1\n+blez  $r4,L1\n+beqz  $r4,L1\n+bnez  $r4,L1\n+bceqz  $fcc0,L1\n+bcnez  $fcc0,L1\n+jr  $r4\n+b  L1\n+bl  L1\n+beq  $r4,$r5,L1\n+bne  $r4,$r5,L1\n+blt  $r4,$r5,L1\n+bgt  $r4,$r5,L1\n+bge  $r4,$r5,L1\n+ble  $r4,$r5,L1\n+bltu  $r4,$r5,L1\n+bgtu  $r4,$r5,L1\n+bgeu  $r4,$r5,L1\n+bleu  $r4,$r5,L1"
    },
    {
      "sha": "fc15773c1f4bdcffb483107fd489c9f11cca2014",
      "filename": "gas/testsuite/gas/loongarch/load_store_op.d",
      "status": "added",
      "additions": 178,
      "deletions": 0,
      "changes": 178,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/load_store_op.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/load_store_op.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/load_store_op.d?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,178 @@\n+#as:\n+#objdump: -dr\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+00000000.* <.text>:\n+[ \t]+0:[ \t]+200000a4 [ \t]+ll.w[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+4:[ \t]+203ffca4 [ \t]+ll.w[ \t]+[ \t]+\\$a0, \\$a1, 16380\\(0x3ffc\\)\n+[ \t]+8:[ \t]+210000a4 [ \t]+sc.w[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+c:[ \t]+213ffca4 [ \t]+sc.w[ \t]+[ \t]+\\$a0, \\$a1, 16380\\(0x3ffc\\)\n+[ \t]+10:[ \t]+220000a4 [ \t]+ll.d[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+14:[ \t]+223ffca4 [ \t]+ll.d[ \t]+[ \t]+\\$a0, \\$a1, 16380\\(0x3ffc\\)\n+[ \t]+18:[ \t]+230000a4 [ \t]+sc.d[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+1c:[ \t]+233ffca4 [ \t]+sc.d[ \t]+[ \t]+\\$a0, \\$a1, 16380\\(0x3ffc\\)\n+[ \t]+20:[ \t]+240000a4 [ \t]+ldptr.w[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+24:[ \t]+243ffca4 [ \t]+ldptr.w[ \t]+[ \t]+\\$a0, \\$a1, 16380\\(0x3ffc\\)\n+[ \t]+28:[ \t]+250000a4 [ \t]+stptr.w[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+2c:[ \t]+253ffca4 [ \t]+stptr.w[ \t]+[ \t]+\\$a0, \\$a1, 16380\\(0x3ffc\\)\n+[ \t]+30:[ \t]+260000a4 [ \t]+ldptr.d[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+34:[ \t]+263ffca4 [ \t]+ldptr.d[ \t]+[ \t]+\\$a0, \\$a1, 16380\\(0x3ffc\\)\n+[ \t]+38:[ \t]+270000a4 [ \t]+stptr.d[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+3c:[ \t]+273ffca4 [ \t]+stptr.d[ \t]+[ \t]+\\$a0, \\$a1, 16380\\(0x3ffc\\)\n+[ \t]+40:[ \t]+280000a4 [ \t]+ld.b[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+44:[ \t]+281ffca4 [ \t]+ld.b[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+48:[ \t]+282004a4 [ \t]+ld.b[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+4c:[ \t]+284000a4 [ \t]+ld.h[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+50:[ \t]+285ffca4 [ \t]+ld.h[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+54:[ \t]+286004a4 [ \t]+ld.h[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+58:[ \t]+288000a4 [ \t]+ld.w[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+5c:[ \t]+289ffca4 [ \t]+ld.w[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+60:[ \t]+28a004a4 [ \t]+ld.w[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+64:[ \t]+28c000a4 [ \t]+ld.d[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+68:[ \t]+28dffca4 [ \t]+ld.d[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+6c:[ \t]+28e004a4 [ \t]+ld.d[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+70:[ \t]+290000a4 [ \t]+st.b[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+74:[ \t]+291ffca4 [ \t]+st.b[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+78:[ \t]+292004a4 [ \t]+st.b[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+7c:[ \t]+294000a4 [ \t]+st.h[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+80:[ \t]+295ffca4 [ \t]+st.h[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+84:[ \t]+296004a4 [ \t]+st.h[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+88:[ \t]+298000a4 [ \t]+st.w[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+8c:[ \t]+299ffca4 [ \t]+st.w[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+90:[ \t]+29a004a4 [ \t]+st.w[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+94:[ \t]+29c000a4 [ \t]+st.d[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+98:[ \t]+29dffca4 [ \t]+st.d[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+9c:[ \t]+29e004a4 [ \t]+st.d[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+a0:[ \t]+2a0000a4 [ \t]+ld.bu[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+a4:[ \t]+2a1ffca4 [ \t]+ld.bu[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+a8:[ \t]+2a2004a4 [ \t]+ld.bu[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+ac:[ \t]+2a4000a4 [ \t]+ld.hu[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+b0:[ \t]+2a5ffca4 [ \t]+ld.hu[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+b4:[ \t]+2a6004a4 [ \t]+ld.hu[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+b8:[ \t]+2a8000a4 [ \t]+ld.wu[ \t]+[ \t]+\\$a0, \\$a1, 0\n+[ \t]+bc:[ \t]+2a9ffca4 [ \t]+ld.wu[ \t]+[ \t]+\\$a0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+c0:[ \t]+2aa004a4 [ \t]+ld.wu[ \t]+[ \t]+\\$a0, \\$a1, -2047\\(0x801\\)\n+[ \t]+c4:[ \t]+2ac000a0 [ \t]+preld[ \t]+[ \t]+0x0, \\$a1, 0\n+[ \t]+c8:[ \t]+2adffcbf [ \t]+preld[ \t]+[ \t]+0x1f, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+cc:[ \t]+2ae004bf [ \t]+preld[ \t]+[ \t]+0x1f, \\$a1, -2047\\(0x801\\)\n+[ \t]+d0:[ \t]+2b0000a0 [ \t]+fld.s[ \t]+[ \t]+\\$fa0, \\$a1, 0\n+[ \t]+d4:[ \t]+2b1ffca0 [ \t]+fld.s[ \t]+[ \t]+\\$fa0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+d8:[ \t]+2b2004a0 [ \t]+fld.s[ \t]+[ \t]+\\$fa0, \\$a1, -2047\\(0x801\\)\n+[ \t]+dc:[ \t]+2b4000a0 [ \t]+fst.s[ \t]+[ \t]+\\$fa0, \\$a1, 0\n+[ \t]+e0:[ \t]+2b5ffca0 [ \t]+fst.s[ \t]+[ \t]+\\$fa0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+e4:[ \t]+2b6004a0 [ \t]+fst.s[ \t]+[ \t]+\\$fa0, \\$a1, -2047\\(0x801\\)\n+[ \t]+e8:[ \t]+2b8000a0 [ \t]+fld.d[ \t]+[ \t]+\\$fa0, \\$a1, 0\n+[ \t]+ec:[ \t]+2b9ffca0 [ \t]+fld.d[ \t]+[ \t]+\\$fa0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+f0:[ \t]+2ba004a0 [ \t]+fld.d[ \t]+[ \t]+\\$fa0, \\$a1, -2047\\(0x801\\)\n+[ \t]+f4:[ \t]+2bc000a0 [ \t]+fst.d[ \t]+[ \t]+\\$fa0, \\$a1, 0\n+[ \t]+f8:[ \t]+2bdffca0 [ \t]+fst.d[ \t]+[ \t]+\\$fa0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+fc:[ \t]+2be004a0 [ \t]+fst.d[ \t]+[ \t]+\\$fa0, \\$a1, -2047\\(0x801\\)\n+ 100:[ \t]+380018a4 [ \t]+ldx.b[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 104:[ \t]+380418a4 [ \t]+ldx.h[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 108:[ \t]+380818a4 [ \t]+ldx.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 10c:[ \t]+380c18a4 [ \t]+ldx.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 110:[ \t]+381018a4 [ \t]+stx.b[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 114:[ \t]+381418a4 [ \t]+stx.h[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 118:[ \t]+381818a4 [ \t]+stx.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 11c:[ \t]+381c18a4 [ \t]+stx.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 120:[ \t]+382018a4 [ \t]+ldx.bu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 124:[ \t]+382418a4 [ \t]+ldx.hu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 128:[ \t]+382818a4 [ \t]+ldx.wu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 12c:[ \t]+382c18a0 [ \t]+preldx[ \t]+[ \t]+0x0, \\$a1, \\$a2\n+ 130:[ \t]+382c18bf [ \t]+preldx[ \t]+[ \t]+0x1f, \\$a1, \\$a2\n+ 134:[ \t]+38720000 [ \t]+dbar[ \t]+[ \t]+0x0\n+ 138:[ \t]+38727fff [ \t]+dbar[ \t]+[ \t]+0x7fff\n+ 13c:[ \t]+38728000 [ \t]+ibar[ \t]+[ \t]+0x0\n+ 140:[ \t]+3872ffff [ \t]+ibar[ \t]+[ \t]+0x7fff\n+ 144:[ \t]+386014c4 [ \t]+amswap.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 148:[ \t]+386018a4 [ \t]+amswap.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 14c:[ \t]+386094c4 [ \t]+amswap.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 150:[ \t]+386098a4 [ \t]+amswap.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 154:[ \t]+386114c4 [ \t]+amadd.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 158:[ \t]+386118a4 [ \t]+amadd.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 15c:[ \t]+386194c4 [ \t]+amadd.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 160:[ \t]+386198a4 [ \t]+amadd.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 164:[ \t]+386214c4 [ \t]+amand.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 168:[ \t]+386218a4 [ \t]+amand.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 16c:[ \t]+386294c4 [ \t]+amand.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 170:[ \t]+386298a4 [ \t]+amand.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 174:[ \t]+386314c4 [ \t]+amor.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 178:[ \t]+386318a4 [ \t]+amor.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 17c:[ \t]+386394c4 [ \t]+amor.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 180:[ \t]+386398a4 [ \t]+amor.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 184:[ \t]+386414c4 [ \t]+amxor.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 188:[ \t]+386418a4 [ \t]+amxor.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 18c:[ \t]+386494c4 [ \t]+amxor.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 190:[ \t]+386498a4 [ \t]+amxor.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 194:[ \t]+386514c4 [ \t]+ammax.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 198:[ \t]+386518a4 [ \t]+ammax.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 19c:[ \t]+386594c4 [ \t]+ammax.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 1a0:[ \t]+386598a4 [ \t]+ammax.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 1a4:[ \t]+386614c4 [ \t]+ammin.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 1a8:[ \t]+386618a4 [ \t]+ammin.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 1ac:[ \t]+386694c4 [ \t]+ammin.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 1b0:[ \t]+386698a4 [ \t]+ammin.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 1b4:[ \t]+386714c4 [ \t]+ammax.wu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 1b8:[ \t]+386718a4 [ \t]+ammax.wu[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 1bc:[ \t]+386794c4 [ \t]+ammax.du[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 1c0:[ \t]+386798a4 [ \t]+ammax.du[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 1c4:[ \t]+386814c4 [ \t]+ammin.wu[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 1c8:[ \t]+386818a4 [ \t]+ammin.wu[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 1cc:[ \t]+386894c4 [ \t]+ammin.du[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 1d0:[ \t]+386898a4 [ \t]+ammin.du[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 1d4:[ \t]+386914c4 [ \t]+amswap_db.w [ \t]+\\$a0, \\$a1, \\$a2\n+ 1d8:[ \t]+386918a4 [ \t]+amswap_db.w [ \t]+\\$a0, \\$a2, \\$a1\n+ 1dc:[ \t]+386994c4 [ \t]+amswap_db.d [ \t]+\\$a0, \\$a1, \\$a2\n+ 1e0:[ \t]+386998a4 [ \t]+amswap_db.d [ \t]+\\$a0, \\$a2, \\$a1\n+ 1e4:[ \t]+386a14c4 [ \t]+amadd_db.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 1e8:[ \t]+386a18a4 [ \t]+amadd_db.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 1ec:[ \t]+386a94c4 [ \t]+amadd_db.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 1f0:[ \t]+386a98a4 [ \t]+amadd_db.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 1f4:[ \t]+386b14c4 [ \t]+amand_db.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 1f8:[ \t]+386b18a4 [ \t]+amand_db.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 1fc:[ \t]+386b94c4 [ \t]+amand_db.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 200:[ \t]+386b98a4 [ \t]+amand_db.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 204:[ \t]+386c14c4 [ \t]+amor_db.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 208:[ \t]+386c18a4 [ \t]+amor_db.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 20c:[ \t]+386c94c4 [ \t]+amor_db.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 210:[ \t]+386c98a4 [ \t]+amor_db.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 214:[ \t]+386d14c4 [ \t]+amxor_db.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 218:[ \t]+386d18a4 [ \t]+amxor_db.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 21c:[ \t]+386d94c4 [ \t]+amxor_db.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 220:[ \t]+386d98a4 [ \t]+amxor_db.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 224:[ \t]+386e14c4 [ \t]+ammax_db.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 228:[ \t]+386e18a4 [ \t]+ammax_db.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 22c:[ \t]+386e94c4 [ \t]+ammax_db.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 230:[ \t]+386e98a4 [ \t]+ammax_db.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 234:[ \t]+386f14c4 [ \t]+ammin_db.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 238:[ \t]+386f18a4 [ \t]+ammin_db.w[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 23c:[ \t]+386f94c4 [ \t]+ammin_db.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 240:[ \t]+386f98a4 [ \t]+ammin_db.d[ \t]+[ \t]+\\$a0, \\$a2, \\$a1\n+ 244:[ \t]+387014c4 [ \t]+ammax_db.wu [ \t]+\\$a0, \\$a1, \\$a2\n+ 248:[ \t]+387018a4 [ \t]+ammax_db.wu [ \t]+\\$a0, \\$a2, \\$a1\n+ 24c:[ \t]+387094c4 [ \t]+ammax_db.du [ \t]+\\$a0, \\$a1, \\$a2\n+ 250:[ \t]+387098a4 [ \t]+ammax_db.du [ \t]+\\$a0, \\$a2, \\$a1\n+ 254:[ \t]+387114c4 [ \t]+ammin_db.wu [ \t]+\\$a0, \\$a1, \\$a2\n+ 258:[ \t]+387118a4 [ \t]+ammin_db.wu [ \t]+\\$a0, \\$a2, \\$a1\n+ 25c:[ \t]+387194c4 [ \t]+ammin_db.du [ \t]+\\$a0, \\$a1, \\$a2\n+ 260:[ \t]+387198a4 [ \t]+ammin_db.du [ \t]+\\$a0, \\$a2, \\$a1\n+ 264:[ \t]+387818a4 [ \t]+ldgt.b[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 268:[ \t]+387898a4 [ \t]+ldgt.h[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 26c:[ \t]+387918a4 [ \t]+ldgt.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 270:[ \t]+387998a4 [ \t]+ldgt.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 274:[ \t]+387a18a4 [ \t]+ldle.b[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 278:[ \t]+387a98a4 [ \t]+ldle.h[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 27c:[ \t]+387b18a4 [ \t]+ldle.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 280:[ \t]+387b98a4 [ \t]+ldle.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 284:[ \t]+387c18a4 [ \t]+stgt.b[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 288:[ \t]+387c98a4 [ \t]+stgt.h[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 28c:[ \t]+387d18a4 [ \t]+stgt.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 290:[ \t]+387d98a4 [ \t]+stgt.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 294:[ \t]+387e18a4 [ \t]+stle.b[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 298:[ \t]+387e98a4 [ \t]+stle.h[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 29c:[ \t]+387f18a4 [ \t]+stle.w[ \t]+[ \t]+\\$a0, \\$a1, \\$a2\n+ 2a0:[ \t]+387f98a4 [ \t]+stle.d[ \t]+[ \t]+\\$a0, \\$a1, \\$a2"
    },
    {
      "sha": "efbd124a29cec92a846f7542885aeaca338e773e",
      "filename": "gas/testsuite/gas/loongarch/load_store_op.s",
      "status": "added",
      "additions": 169,
      "deletions": 0,
      "changes": 169,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/load_store_op.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/load_store_op.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/load_store_op.s?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,169 @@\n+ll.w  $r4,$r5,0\n+ll.w  $r4,$r5,0x3ffc\n+sc.w  $r4,$r5,0\n+sc.w  $r4,$r5,0x3ffc\n+ll.d  $r4,$r5,0\n+ll.d  $r4,$r5,0x3ffc\n+sc.d  $r4,$r5,0\n+sc.d  $r4,$r5,0x3ffc\n+ldptr.w  $r4,$r5,0\n+ldptr.w  $r4,$r5,0x3ffc\n+stptr.w  $r4,$r5,0\n+stptr.w  $r4,$r5,0x3ffc\n+ldptr.d  $r4,$r5,0\n+ldptr.d  $r4,$r5,0x3ffc\n+stptr.d  $r4,$r5,0\n+stptr.d  $r4,$r5,0x3ffc\n+ld.b  $r4,$r5,0\n+ld.b  $r4,$r5,0x7ff\n+ld.b  $r4,$r5,-0x7ff\n+ld.h  $r4,$r5,0\n+ld.h  $r4,$r5,0x7ff\n+ld.h  $r4,$r5,-0x7ff\n+ld.w  $r4,$r5,0\n+ld.w  $r4,$r5,0x7ff\n+ld.w  $r4,$r5,-0x7ff\n+ld.d  $r4,$r5,0\n+ld.d  $r4,$r5,0x7ff\n+ld.d  $r4,$r5,-0x7ff\n+st.b  $r4,$r5,0\n+st.b  $r4,$r5,0x7ff\n+st.b  $r4,$r5,-0x7ff\n+st.h  $r4,$r5,0\n+st.h  $r4,$r5,0x7ff\n+st.h  $r4,$r5,-0x7ff\n+st.w  $r4,$r5,0\n+st.w  $r4,$r5,0x7ff\n+st.w  $r4,$r5,-0x7ff\n+st.d  $r4,$r5,0\n+st.d  $r4,$r5,0x7ff\n+st.d  $r4,$r5,-0x7ff\n+ld.bu  $r4,$r5,0\n+ld.bu  $r4,$r5,0x7ff\n+ld.bu  $r4,$r5,-0x7ff\n+ld.hu  $r4,$r5,0\n+ld.hu  $r4,$r5,0x7ff\n+ld.hu  $r4,$r5,-0x7ff\n+ld.wu  $r4,$r5,0\n+ld.wu  $r4,$r5,0x7ff\n+ld.wu  $r4,$r5,-0x7ff\n+preld  0,$r5,0\n+preld  31,$r5,0x7ff\n+preld  31,$r5,-0x7ff\n+fld.s  $f0,$r5,0\n+fld.s  $f0,$r5,0x7ff\n+fld.s  $f0,$r5,-0x7ff\n+fst.s  $f0,$r5,0\n+fst.s  $f0,$r5,0x7ff\n+fst.s  $f0,$r5,-0x7ff\n+fld.d  $f0,$r5,0\n+fld.d  $f0,$r5,0x7ff\n+fld.d  $f0,$r5,-0x7ff\n+fst.d  $f0,$r5,0\n+fst.d  $f0,$r5,0x7ff\n+fst.d  $f0,$r5,-0x7ff\n+ldx.b  $r4,$r5,$r6\n+ldx.h  $r4,$r5,$r6\n+ldx.w  $r4,$r5,$r6\n+ldx.d  $r4,$r5,$r6\n+stx.b  $r4,$r5,$r6\n+stx.h  $r4,$r5,$r6\n+stx.w  $r4,$r5,$r6\n+stx.d  $r4,$r5,$r6\n+ldx.bu  $r4,$r5,$r6\n+ldx.hu  $r4,$r5,$r6\n+ldx.wu  $r4,$r5,$r6\n+preldx  0,$r5,$r6\n+preldx  31,$r5,$r6\n+dbar  0\n+dbar  0x7fff\n+ibar  0 \n+ibar  0x7fff\n+amswap.w  $r4,$r5,$r6,0\n+amswap.w  $r4,$r6,$r5\n+amswap.d  $r4,$r5,$r6,0\n+amswap.d  $r4,$r6,$r5\n+amadd.w  $r4,$r5,$r6,0\n+amadd.w  $r4,$r6,$r5\n+amadd.d  $r4,$r5,$r6,0\n+amadd.d  $r4,$r6,$r5\n+amand.w  $r4,$r5,$r6,0\n+amand.w  $r4,$r6,$r5\n+amand.d  $r4,$r5,$r6,0\n+amand.d  $r4,$r6,$r5\n+amor.w  $r4,$r5,$r6,0\n+amor.w  $r4,$r6,$r5\n+amor.d  $r4,$r5,$r6,0\n+amor.d  $r4,$r6,$r5\n+amxor.w  $r4,$r5,$r6,0\n+amxor.w  $r4,$r6,$r5\n+amxor.d  $r4,$r5,$r6,0\n+amxor.d  $r4,$r6,$r5\n+ammax.w  $r4,$r5,$r6,0\n+ammax.w  $r4,$r6,$r5\n+ammax.d  $r4,$r5,$r6,0\n+ammax.d  $r4,$r6,$r5\n+ammin.w  $r4,$r5,$r6,0\n+ammin.w  $r4,$r6,$r5\n+ammin.d  $r4,$r5,$r6,0\n+ammin.d  $r4,$r6,$r5\n+ammax.wu  $r4,$r5,$r6,0\n+ammax.wu  $r4,$r6,$r5\n+ammax.du  $r4,$r5,$r6,0\n+ammax.du  $r4,$r6,$r5\n+ammin.wu  $r4,$r5,$r6,0\n+ammin.wu  $r4,$r6,$r5\n+ammin.du  $r4,$r5,$r6,0\n+ammin.du  $r4,$r6,$r5\n+amswap_db.w  $r4,$r5,$r6,0\n+amswap_db.w  $r4,$r6,$r5\n+amswap_db.d  $r4,$r5,$r6,0\n+amswap_db.d  $r4,$r6,$r5\n+amadd_db.w  $r4,$r5,$r6,0\n+amadd_db.w  $r4,$r6,$r5\n+amadd_db.d  $r4,$r5,$r6,0\n+amadd_db.d  $r4,$r6,$r5\n+amand_db.w  $r4,$r5,$r6,0\n+amand_db.w  $r4,$r6,$r5\n+amand_db.d  $r4,$r5,$r6,0\n+amand_db.d  $r4,$r6,$r5\n+amor_db.w  $r4,$r5,$r6,0\n+amor_db.w  $r4,$r6,$r5\n+amor_db.d  $r4,$r5,$r6,0\n+amor_db.d  $r4,$r6,$r5\n+amxor_db.w  $r4,$r5,$r6,0\n+amxor_db.w  $r4,$r6,$r5\n+amxor_db.d  $r4,$r5,$r6,0\n+amxor_db.d  $r4,$r6,$r5\n+ammax_db.w  $r4,$r5,$r6,0\n+ammax_db.w  $r4,$r6,$r5\n+ammax_db.d  $r4,$r5,$r6,0\n+ammax_db.d  $r4,$r6,$r5\n+ammin_db.w  $r4,$r5,$r6,0\n+ammin_db.w  $r4,$r6,$r5\n+ammin_db.d  $r4,$r5,$r6,0\n+ammin_db.d  $r4,$r6,$r5\n+ammax_db.wu  $r4,$r5,$r6,0\n+ammax_db.wu  $r4,$r6,$r5\n+ammax_db.du  $r4,$r5,$r6,0\n+ammax_db.du  $r4,$r6,$r5\n+ammin_db.wu  $r4,$r5,$r6,0\n+ammin_db.wu  $r4,$r6,$r5\n+ammin_db.du  $r4,$r5,$r6,0\n+ammin_db.du  $r4,$r6,$r5\n+ldgt.b  $r4,$r5,$r6\n+ldgt.h  $r4,$r5,$r6\n+ldgt.w  $r4,$r5,$r6\n+ldgt.d  $r4,$r5,$r6\n+ldle.b  $r4,$r5,$r6\n+ldle.h  $r4,$r5,$r6\n+ldle.w  $r4,$r5,$r6\n+ldle.d  $r4,$r5,$r6\n+stgt.b  $r4,$r5,$r6\n+stgt.h  $r4,$r5,$r6\n+stgt.w  $r4,$r5,$r6\n+stgt.d  $r4,$r5,$r6\n+stle.b  $r4,$r5,$r6\n+stle.h  $r4,$r5,$r6\n+stle.w  $r4,$r5,$r6\n+stle.d  $r4,$r5,$r6"
    },
    {
      "sha": "c186b67315fef426d0836ace952b65e876d2d590",
      "filename": "gas/testsuite/gas/loongarch/loongarch.exp",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/loongarch.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/loongarch.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/loongarch.exp?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,23 @@\n+# Expect script for LoongArch assembler tests.\n+#   Copyright (C) 2021 Free Software Foundation, Inc.\n+#\n+# This file is part of the GNU Binutils.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n+# MA 02110-1301, USA.\n+\n+if [istarget loongarch*-*-*] {\n+    run_dump_tests [lsort [glob -nocomplain $srcdir/$subdir/*.d]]\n+}"
    },
    {
      "sha": "fabd006b8c13d159f0d9930993432e620a60d307",
      "filename": "gas/testsuite/gas/loongarch/macro_op.d",
      "status": "added",
      "additions": 733,
      "deletions": 0,
      "changes": 733,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/macro_op.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/macro_op.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/macro_op.d?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,733 @@\n+#as:\n+#objdump: -dr\n+#skip: loongarch32*-*-*\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0000000000000000 <.text>:\n+[ \t]+0:[ \t]+00150004 [ \t]+move[ \t]+[ \t]+\\$a0, \\$zero\n+[ \t]+4:[ \t]+02bffc04 [ \t]+addi.w[ \t]+[ \t]+\\$a0, \\$zero, -1\\(0xfff\\)\n+[ \t]+8:[ \t]+00150004 [ \t]+move[ \t]+[ \t]+\\$a0, \\$zero\n+[ \t]+c:[ \t]+02bffc04 [ \t]+addi.w[ \t]+[ \t]+\\$a0, \\$zero, -1\\(0xfff\\)\n+[ \t]+10:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+10: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x800\n+[ \t]+[ \t]+[ \t]+10: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+10: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+10: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+10: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+10: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+14:[ \t]+28c00084 [ \t]+ld.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x804\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+14: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+18:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+18: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x800\n+[ \t]+[ \t]+[ \t]+18: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+18: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+18: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+18: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+18: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+1c:[ \t]+28c00084 [ \t]+ld.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x804\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+1c: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+20:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000000\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+20: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+24:[ \t]+03800005 [ \t]+ori[ \t]+[ \t]+\\$a1, \\$zero, 0x0\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000004\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+24: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+28:[ \t]+16000005 [ \t]+lu32i.d[ \t]+[ \t]+\\$a1, 0\n+[ \t]+[ \t]+[ \t]+28: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000008\n+[ \t]+[ \t]+[ \t]+28: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+28: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+28: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+28: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+28: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+28: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+28: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+2c:[ \t]+030000a5 [ \t]+lu52i.d[ \t]+[ \t]+\\$a1, \\$a1, 0\n+[ \t]+[ \t]+[ \t]+2c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x8000000c\n+[ \t]+[ \t]+[ \t]+2c: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+2c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+2c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+2c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+2c: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+30:[ \t]+380c1484 [ \t]+ldx.d[ \t]+[ \t]+\\$a0, \\$a0, \\$a1\n+[ \t]+34:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+34: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x800\n+[ \t]+[ \t]+[ \t]+34: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+34: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+34: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+34: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+34: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+38:[ \t]+28c00084 [ \t]+ld.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x804\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+38: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+3c:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000000\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+3c: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+40:[ \t]+03800005 [ \t]+ori[ \t]+[ \t]+\\$a1, \\$zero, 0x0\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000004\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+40: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+44:[ \t]+16000005 [ \t]+lu32i.d[ \t]+[ \t]+\\$a1, 0\n+[ \t]+[ \t]+[ \t]+44: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000008\n+[ \t]+[ \t]+[ \t]+44: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+44: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+44: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+44: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+44: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+44: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+44: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+48:[ \t]+030000a5 [ \t]+lu52i.d[ \t]+[ \t]+\\$a1, \\$a1, 0\n+[ \t]+[ \t]+[ \t]+48: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x8000000c\n+[ \t]+[ \t]+[ \t]+48: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+48: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+48: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+48: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+48: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+4c:[ \t]+380c1484 [ \t]+ldx.d[ \t]+[ \t]+\\$a0, \\$a0, \\$a1\n+[ \t]+50:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+50: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x800\n+[ \t]+[ \t]+[ \t]+50: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+50: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+50: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+50: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+50: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+54:[ \t]+28c00084 [ \t]+ld.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x804\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+54: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+58:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000000\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+58: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+5c:[ \t]+03800005 [ \t]+ori[ \t]+[ \t]+\\$a1, \\$zero, 0x0\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000004\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+5c: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+60:[ \t]+16000005 [ \t]+lu32i.d[ \t]+[ \t]+\\$a1, 0\n+[ \t]+[ \t]+[ \t]+60: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000008\n+[ \t]+[ \t]+[ \t]+60: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+60: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+60: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+60: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+60: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+60: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+60: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+64:[ \t]+030000a5 [ \t]+lu52i.d[ \t]+[ \t]+\\$a1, \\$a1, 0\n+[ \t]+[ \t]+[ \t]+64: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x8000000c\n+[ \t]+[ \t]+[ \t]+64: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+64: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+64: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+64: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+64: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+68:[ \t]+380c1484 [ \t]+ldx.d[ \t]+[ \t]+\\$a0, \\$a0, \\$a1\n+[ \t]+6c:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+6c: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x800\n+[ \t]+[ \t]+[ \t]+6c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+6c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+6c: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+70:[ \t]+02c00084 [ \t]+addi.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+70: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x4\n+[ \t]+[ \t]+[ \t]+70: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x804\n+[ \t]+[ \t]+[ \t]+70: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+70: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+70: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+70: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+70: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+70: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+74:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x80000000\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+74: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+78:[ \t]+03800005 [ \t]+ori[ \t]+[ \t]+\\$a1, \\$zero, 0x0\n+[ \t]+[ \t]+[ \t]+78: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x4\n+[ \t]+[ \t]+[ \t]+78: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x80000004\n+[ \t]+[ \t]+[ \t]+78: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+78: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+78: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+78: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+78: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+78: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+78: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+78: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+7c:[ \t]+16000005 [ \t]+lu32i.d[ \t]+[ \t]+\\$a1, 0\n+[ \t]+[ \t]+[ \t]+7c: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x80000008\n+[ \t]+[ \t]+[ \t]+7c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+7c: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+7c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+7c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+7c: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+80:[ \t]+030000a5 [ \t]+lu52i.d[ \t]+[ \t]+\\$a1, \\$a1, 0\n+[ \t]+[ \t]+[ \t]+80: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x8000000c\n+[ \t]+[ \t]+[ \t]+80: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+80: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+80: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+84:[ \t]+00109484 [ \t]+add.d[ \t]+[ \t]+\\$a0, \\$a0, \\$a1\n+[ \t]+88:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+88: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x800\n+[ \t]+[ \t]+[ \t]+88: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+88: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+88: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+8c:[ \t]+02c00084 [ \t]+addi.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+8c: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x4\n+[ \t]+[ \t]+[ \t]+8c: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x804\n+[ \t]+[ \t]+[ \t]+8c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+8c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+8c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+8c: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+8c: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+8c: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+90:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x80000000\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+90: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+94:[ \t]+03800005 [ \t]+ori[ \t]+[ \t]+\\$a1, \\$zero, 0x0\n+[ \t]+[ \t]+[ \t]+94: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x4\n+[ \t]+[ \t]+[ \t]+94: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x80000004\n+[ \t]+[ \t]+[ \t]+94: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+94: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+94: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+94: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+94: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+94: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+94: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+94: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+98:[ \t]+16000005 [ \t]+lu32i.d[ \t]+[ \t]+\\$a1, 0\n+[ \t]+[ \t]+[ \t]+98: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x80000008\n+[ \t]+[ \t]+[ \t]+98: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+98: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+98: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+98: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+98: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+9c:[ \t]+030000a5 [ \t]+lu52i.d[ \t]+[ \t]+\\$a1, \\$a1, 0\n+[ \t]+[ \t]+[ \t]+9c: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x8000000c\n+[ \t]+[ \t]+[ \t]+9c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+9c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+9c: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+a0:[ \t]+00109484 [ \t]+add.d[ \t]+[ \t]+\\$a0, \\$a0, \\$a1\n+[ \t]+a4:[ \t]+14000004 [ \t]+lu12i.w[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+a4: R_LARCH_MARK_LA[ \t]+L1\n+[ \t]+[ \t]+[ \t]+a4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+L1\n+[ \t]+[ \t]+[ \t]+a4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+a4: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+a4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+a4: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+a4: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+a8:[ \t]+03800084 [ \t]+ori[ \t]+[ \t]+\\$a0, \\$a0, 0x0\n+[ \t]+[ \t]+[ \t]+a8: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+L1\n+[ \t]+[ \t]+[ \t]+a8: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+a8: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+a8: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+ac:[ \t]+16000004 [ \t]+lu32i.d[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+ac: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+L1\n+[ \t]+[ \t]+[ \t]+ac: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+ac: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+ac: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+ac: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+ac: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+b0:[ \t]+03000084 [ \t]+lu52i.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+b0: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+L1\n+[ \t]+[ \t]+[ \t]+b0: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+b0: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+b0: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+b4:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+b4: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x800\n+[ \t]+[ \t]+[ \t]+b4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+b4: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+b4: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+b8:[ \t]+02c00084 [ \t]+addi.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+b8: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x4\n+[ \t]+[ \t]+[ \t]+b8: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x804\n+[ \t]+[ \t]+[ \t]+b8: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+b8: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+b8: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+b8: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+b8: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+b8: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+bc:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+bc: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x800\n+[ \t]+[ \t]+[ \t]+bc: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+bc: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+bc: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+c0:[ \t]+02c00084 [ \t]+addi.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+c0: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x4\n+[ \t]+[ \t]+[ \t]+c0: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x804\n+[ \t]+[ \t]+[ \t]+c0: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+c0: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c0: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+c0: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c0: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c0: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+c4:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x80000000\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c4: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+c8:[ \t]+03800005 [ \t]+ori[ \t]+[ \t]+\\$a1, \\$zero, 0x0\n+[ \t]+[ \t]+[ \t]+c8: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x4\n+[ \t]+[ \t]+[ \t]+c8: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x80000004\n+[ \t]+[ \t]+[ \t]+c8: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+c8: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c8: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+c8: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c8: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c8: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+c8: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+c8: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+cc:[ \t]+16000005 [ \t]+lu32i.d[ \t]+[ \t]+\\$a1, 0\n+[ \t]+[ \t]+[ \t]+cc: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x80000008\n+[ \t]+[ \t]+[ \t]+cc: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+cc: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+cc: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+cc: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+cc: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+d0:[ \t]+030000a5 [ \t]+lu52i.d[ \t]+[ \t]+\\$a1, \\$a1, 0\n+[ \t]+[ \t]+[ \t]+d0: R_LARCH_SOP_PUSH_PCREL[ \t]+L1\\+0x8000000c\n+[ \t]+[ \t]+[ \t]+d0: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+d0: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+d0: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+d4:[ \t]+00109484 [ \t]+add.d[ \t]+[ \t]+\\$a0, \\$a0, \\$a1\n+[ \t]+d8:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+d8: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x800\n+[ \t]+[ \t]+[ \t]+d8: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+d8: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+d8: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+d8: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+d8: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+dc:[ \t]+28c00084 [ \t]+ld.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x804\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+dc: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+e0:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000000\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e0: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+e4:[ \t]+03800005 [ \t]+ori[ \t]+[ \t]+\\$a1, \\$zero, 0x0\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000004\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e4: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+e8:[ \t]+16000005 [ \t]+lu32i.d[ \t]+[ \t]+\\$a1, 0\n+[ \t]+[ \t]+[ \t]+e8: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000008\n+[ \t]+[ \t]+[ \t]+e8: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+e8: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e8: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+e8: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e8: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+e8: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+e8: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+ec:[ \t]+030000a5 [ \t]+lu52i.d[ \t]+[ \t]+\\$a1, \\$a1, 0\n+[ \t]+[ \t]+[ \t]+ec: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x8000000c\n+[ \t]+[ \t]+[ \t]+ec: R_LARCH_SOP_PUSH_GPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+ec: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+ec: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+ec: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+ec: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+f0:[ \t]+380c1484 [ \t]+ldx.d[ \t]+[ \t]+\\$a0, \\$a0, \\$a1\n+[ \t]+f4:[ \t]+14000004 [ \t]+lu12i.w[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+f4: R_LARCH_SOP_PUSH_TLS_TPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+f4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+f4: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+f4: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+f4: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+f4: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+f8:[ \t]+03800084 [ \t]+ori[ \t]+[ \t]+\\$a0, \\$a0, 0x0\n+[ \t]+[ \t]+[ \t]+f8: R_LARCH_SOP_PUSH_TLS_TPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+f8: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+f8: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+f8: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+fc:[ \t]+16000004 [ \t]+lu32i.d[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+fc: R_LARCH_SOP_PUSH_TLS_TPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+fc: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+fc: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+fc: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+fc: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+fc: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+100:[ \t]+03000084 [ \t]+lu52i.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+100: R_LARCH_SOP_PUSH_TLS_TPREL[ \t]+L1\n+[ \t]+[ \t]+[ \t]+100: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+100: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+100: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+104:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+104: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x800\n+[ \t]+[ \t]+[ \t]+104: R_LARCH_SOP_PUSH_TLS_GOT[ \t]+L1\n+[ \t]+[ \t]+[ \t]+104: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+104: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+104: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+104: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+108:[ \t]+28c00084 [ \t]+ld.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_PUSH_TLS_GOT[ \t]+L1\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x804\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_PUSH_TLS_GOT[ \t]+L1\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+108: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+10c:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_PUSH_TLS_GOT[ \t]+L1\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000000\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_PUSH_TLS_GOT[ \t]+L1\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+10c: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+110:[ \t]+03800005 [ \t]+ori[ \t]+[ \t]+\\$a1, \\$zero, 0x0\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_PUSH_TLS_GOT[ \t]+L1\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000004\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_PUSH_TLS_GOT[ \t]+L1\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+110: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+114:[ \t]+16000005 [ \t]+lu32i.d[ \t]+[ \t]+\\$a1, 0\n+[ \t]+[ \t]+[ \t]+114: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000008\n+[ \t]+[ \t]+[ \t]+114: R_LARCH_SOP_PUSH_TLS_GOT[ \t]+L1\n+[ \t]+[ \t]+[ \t]+114: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+114: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+114: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+114: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+114: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+114: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+118:[ \t]+030000a5 [ \t]+lu52i.d[ \t]+[ \t]+\\$a1, \\$a1, 0\n+[ \t]+[ \t]+[ \t]+118: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x8000000c\n+[ \t]+[ \t]+[ \t]+118: R_LARCH_SOP_PUSH_TLS_GOT[ \t]+L1\n+[ \t]+[ \t]+[ \t]+118: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+118: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+118: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+118: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+11c:[ \t]+380c1484 [ \t]+ldx.d[ \t]+[ \t]+\\$a0, \\$a0, \\$a1\n+[ \t]+120:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+120: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x800\n+[ \t]+[ \t]+[ \t]+120: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+120: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+120: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+120: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+120: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+124:[ \t]+02c00084 [ \t]+addi.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x804\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+124: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+128:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000000\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+128: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+12c:[ \t]+03800005 [ \t]+ori[ \t]+[ \t]+\\$a1, \\$zero, 0x0\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000004\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+12c: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+130:[ \t]+16000005 [ \t]+lu32i.d[ \t]+[ \t]+\\$a1, 0\n+[ \t]+[ \t]+[ \t]+130: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000008\n+[ \t]+[ \t]+[ \t]+130: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+130: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+130: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+130: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+130: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+130: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+130: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+134:[ \t]+030000a5 [ \t]+lu52i.d[ \t]+[ \t]+\\$a1, \\$a1, 0\n+[ \t]+[ \t]+[ \t]+134: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x8000000c\n+[ \t]+[ \t]+[ \t]+134: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+134: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+134: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+134: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+134: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+138:[ \t]+00109484 [ \t]+add.d[ \t]+[ \t]+\\$a0, \\$a0, \\$a1\n+[ \t]+13c:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+13c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x800\n+[ \t]+[ \t]+[ \t]+13c: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+13c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+13c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+13c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+13c: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+140:[ \t]+02c00084 [ \t]+addi.d[ \t]+[ \t]+\\$a0, \\$a0, 0\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x804\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+140: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+144:[ \t]+1c000004 [ \t]+pcaddu12i[ \t]+[ \t]+\\$a0, 0\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000000\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+144: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+148:[ \t]+03800005 [ \t]+ori[ \t]+[ \t]+\\$a1, \\$zero, 0x0\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x4\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000004\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x20\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_SUB[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xfff\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_AND[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+148: R_LARCH_SOP_POP_32_U_10_12[ \t]+\\*ABS\\*\n+[ \t]+14c:[ \t]+16000005 [ \t]+lu32i.d[ \t]+[ \t]+\\$a1, 0\n+[ \t]+[ \t]+[ \t]+14c: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x80000008\n+[ \t]+[ \t]+[ \t]+14c: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+14c: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+14c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0xc\n+[ \t]+[ \t]+[ \t]+14c: R_LARCH_SOP_SL[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+14c: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x2c\n+[ \t]+[ \t]+[ \t]+14c: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+14c: R_LARCH_SOP_POP_32_S_5_20[ \t]+\\*ABS\\*\n+[ \t]+150:[ \t]+030000a5 [ \t]+lu52i.d[ \t]+[ \t]+\\$a1, \\$a1, 0\n+[ \t]+[ \t]+[ \t]+150: R_LARCH_SOP_PUSH_PCREL[ \t]+_GLOBAL_OFFSET_TABLE_\\+0x8000000c\n+[ \t]+[ \t]+[ \t]+150: R_LARCH_SOP_PUSH_TLS_GD[ \t]+L1\n+[ \t]+[ \t]+[ \t]+150: R_LARCH_SOP_ADD[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+150: R_LARCH_SOP_PUSH_ABSOLUTE[ \t]+\\*ABS\\*\\+0x34\n+[ \t]+[ \t]+[ \t]+150: R_LARCH_SOP_SR[ \t]+\\*ABS\\*\n+[ \t]+[ \t]+[ \t]+150: R_LARCH_SOP_POP_32_S_10_12[ \t]+\\*ABS\\*\n+[ \t]+154:[ \t]+00109484 [ \t]+add.d[ \t]+[ \t]+\\$a0, \\$a0, \\$a1"
    },
    {
      "sha": "d83261f55f06405dc824ed933cc77adf2226823b",
      "filename": "gas/testsuite/gas/loongarch/macro_op.s",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/macro_op.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/macro_op.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/macro_op.s?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,29 @@\n+.L1:\n+li.w  $r4,0\n+li.w  $r4,0xffffffff\n+li.d  $r4,0\n+li.d  $r4,0xffffffffffffffff\n+la  $r4,L1\n+la.global  $r4,L1\n+la.global  $r4,$r5,L1\n+la.global  $r4,L1\n+la.global  $r4,$r5,L1\n+la.global  $r4,L1\n+la.global  $r4,$r5,L1\n+la.local  $r4,L1\n+la.local  $r4,$r5,L1\n+la.local  $r4,L1\n+la.local  $r4,$r5,L1\n+la.abs  $r4,L1\n+la.pcrel  $r4,L1\n+la.pcrel  $r4,L1\n+la.pcrel  $r4,$r5,L1\n+la.got  $r4,L1\n+la.got  $r4,$r5,L1\n+la.tls.le  $r4,L1\n+la.tls.ie  $r4,L1\n+la.tls.ie  $r4,$r5,L1\n+la.tls.ld  $r4,L1\n+la.tls.ld  $r4,$r5,L1\n+la.tls.gd  $r4,L1\n+la.tls.gd  $r4,$r5,L1"
    },
    {
      "sha": "4cdcc5ce0d226ede5f3027beda3a3b70b0ea1919",
      "filename": "gas/testsuite/gas/loongarch/nop.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/nop.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/nop.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/nop.d?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,10 @@\n+#as:\n+#objdump: -dr\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <target>:\n+[ \t]+0:[ \t]+03400000[ \t]+andi[ \t]+\\$zero, \\$zero, 0x0"
    },
    {
      "sha": "99456883315ed914786d18cfc2623aa6fa99cc84",
      "filename": "gas/testsuite/gas/loongarch/nop.s",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/nop.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/nop.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/nop.s?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,2 @@\n+target:\n+\tnop"
    },
    {
      "sha": "12d4790a027415ebef4bf8b58f0910e06f1a947e",
      "filename": "gas/testsuite/gas/loongarch/privilege_op.d",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/privilege_op.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/privilege_op.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/privilege_op.d?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,44 @@\n+#as:\n+#objdump: -dr\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+00000000.* <.text>:\n+[ \t]+0:[ \t]+04000004 [ \t]+csrrd[ \t]+[ \t]+\\$a0, 0x0\n+[ \t]+4:[ \t]+04fffc04 [ \t]+csrrd[ \t]+[ \t]+\\$a0, 0x3fff\n+[ \t]+8:[ \t]+04000024 [ \t]+csrwr[ \t]+[ \t]+\\$a0, 0x0\n+[ \t]+c:[ \t]+04fffc24 [ \t]+csrwr[ \t]+[ \t]+\\$a0, 0x3fff\n+[ \t]+10:[ \t]+040000a4 [ \t]+csrxchg[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+14:[ \t]+04fffca4 [ \t]+csrxchg[ \t]+[ \t]+\\$a0, \\$a1, 0x3fff\n+[ \t]+18:[ \t]+060000a0 [ \t]+cacop[ \t]+[ \t]+0x0, \\$a1, 0\n+[ \t]+1c:[ \t]+060000bf [ \t]+cacop[ \t]+[ \t]+0x1f, \\$a1, 0\n+[ \t]+20:[ \t]+061ffca0 [ \t]+cacop[ \t]+[ \t]+0x0, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+24:[ \t]+061ffcbf [ \t]+cacop[ \t]+[ \t]+0x1f, \\$a1, 2047\\(0x7ff\\)\n+[ \t]+28:[ \t]+062004a0 [ \t]+cacop[ \t]+[ \t]+0x0, \\$a1, -2047\\(0x801\\)\n+[ \t]+2c:[ \t]+062004bf [ \t]+cacop[ \t]+[ \t]+0x1f, \\$a1, -2047\\(0x801\\)\n+[ \t]+30:[ \t]+064000a4 [ \t]+lddir[ \t]+[ \t]+\\$a0, \\$a1, 0x0\n+[ \t]+34:[ \t]+0643fca4 [ \t]+lddir[ \t]+[ \t]+\\$a0, \\$a1, 0xff\n+[ \t]+38:[ \t]+064400a0 [ \t]+ldpte[ \t]+[ \t]+\\$a1, 0x0\n+[ \t]+3c:[ \t]+0647fca0 [ \t]+ldpte[ \t]+[ \t]+\\$a1, 0xff\n+[ \t]+40:[ \t]+064800a4 [ \t]+iocsrrd.b[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+44:[ \t]+064804a4 [ \t]+iocsrrd.h[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+48:[ \t]+064808a4 [ \t]+iocsrrd.w[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+4c:[ \t]+06480ca4 [ \t]+iocsrrd.d[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+50:[ \t]+064810a4 [ \t]+iocsrwr.b[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+54:[ \t]+064814a4 [ \t]+iocsrwr.h[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+58:[ \t]+064818a4 [ \t]+iocsrwr.w[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+5c:[ \t]+06481ca4 [ \t]+iocsrwr.d[ \t]+[ \t]+\\$a0, \\$a1\n+[ \t]+60:[ \t]+06482000 [ \t]+tlbclr[ \t]+\n+[ \t]+64:[ \t]+06482400 [ \t]+tlbflush[ \t]+\n+[ \t]+68:[ \t]+06482800 [ \t]+tlbsrch[ \t]+\n+[ \t]+6c:[ \t]+06482c00 [ \t]+tlbrd[ \t]+\n+[ \t]+70:[ \t]+06483000 [ \t]+tlbwr[ \t]+\n+[ \t]+74:[ \t]+06483400 [ \t]+tlbfill[ \t]+\n+[ \t]+78:[ \t]+06483800 [ \t]+ertn[ \t]+\n+[ \t]+7c:[ \t]+06488000 [ \t]+idle[ \t]+[ \t]+0x0\n+[ \t]+80:[ \t]+0648ffff [ \t]+idle[ \t]+[ \t]+0x7fff\n+[ \t]+84:[ \t]+064998a0 [ \t]+invtlb[ \t]+[ \t]+0x0, \\$a1, \\$a2\n+[ \t]+88:[ \t]+064998bf [ \t]+invtlb[ \t]+[ \t]+0x1f, \\$a1, \\$a2"
    },
    {
      "sha": "cdc357324f190db2bde1a85944e04a2a73926675",
      "filename": "gas/testsuite/gas/loongarch/privilege_op.s",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/privilege_op.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/privilege_op.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/privilege_op.s?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,35 @@\n+csrrd  $r4,0\n+csrrd  $r4,0x3fff\n+csrwr  $r4,0\n+csrwr  $r4,0x3fff\n+csrxchg  $r4,$r5,0\n+csrxchg  $r4,$r5,0x3fff\n+cacop  0,$r5,0\n+cacop  0x1f,$r5,0\n+cacop  0,$r5,0x7ff\n+cacop  0x1f,$r5,0x7ff\n+cacop  0,$r5,-0x7ff\n+cacop  0x1f,$r5,-0x7ff\n+lddir  $r4,$r5,0\n+lddir  $r4,$r5,0xff\n+ldpte  $r5,0\n+ldpte  $r5,0xff\n+iocsrrd.b  $r4,$r5\n+iocsrrd.h  $r4,$r5\n+iocsrrd.w  $r4,$r5\n+iocsrrd.d  $r4,$r5\n+iocsrwr.b  $r4,$r5\n+iocsrwr.h  $r4,$r5\n+iocsrwr.w  $r4,$r5\n+iocsrwr.d  $r4,$r5\n+tlbclr\n+tlbflush\n+tlbsrch\n+tlbrd\n+tlbwr\n+tlbfill\n+ertn\n+idle  0\n+idle  0x7fff\n+invtlb  0,$r5,$r6\n+invtlb  0x1f,$r5,$r6"
    },
    {
      "sha": "1625664f57bbe423783aff346ec69688ff7426d3",
      "filename": "gas/testsuite/gas/loongarch/syscall.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/syscall.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/syscall.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/syscall.d?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,11 @@\n+#as:\n+#objdump: -dr\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+00000000.* <.text>:\n+[ \t]+0:[ \t]+002b0000 [ \t]+syscall[ \t]+[ \t]+0x0\n+[ \t]+4:[ \t]+002b7fff [ \t]+syscall[ \t]+[ \t]+0x7fff"
    },
    {
      "sha": "168b713f20ce70cfe78e70f008fe5bb23b04ccdc",
      "filename": "gas/testsuite/gas/loongarch/syscall.s",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/syscall.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/gas/loongarch/syscall.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/loongarch/syscall.s?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -0,0 +1,2 @@\n+syscall  0\n+syscall  0x7fff"
    },
    {
      "sha": "6074c2ee2824cf49d92394315c7adcd085e03d60",
      "filename": "gas/testsuite/lib/gas-defs.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/lib/gas-defs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4462d7c440247bfcdc464412332bbec13b8aab12/gas/testsuite/lib/gas-defs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/lib/gas-defs.exp?ref=4462d7c440247bfcdc464412332bbec13b8aab12",
      "patch": "@@ -360,6 +360,10 @@ proc verbose_eval { expr { level 1 } } {\n # This definition is taken from an unreleased version of DejaGnu.  Once\n # that version gets released, and has been out in the world for a few\n # months at least, it may be safe to delete this copy.\n+\n+if { [istarget loongarch*-*-*] } {\n+    rename prune_warnings prune_warnings_other\n+}\n if ![string length [info proc prune_warnings]] {\n     #\n     # prune_warnings -- delete various system verbosities from TEXT."
    }
  ]
}