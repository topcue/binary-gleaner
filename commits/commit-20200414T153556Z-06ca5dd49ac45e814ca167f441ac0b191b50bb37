{
  "sha": "06ca5dd49ac45e814ca167f441ac0b191b50bb37",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDZjYTVkZDQ5YWM0NWU4MTRjYTE2N2Y0NDFhYzBiMTkxYjUwYmIzNw==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-04-13T11:05:59Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-04-14T15:35:56Z"
    },
    "message": "Implement IP_STAT+IP_STATUS (aliases of the same format) on NetBSD\n\nOutput based on FreeBSD with the following changes:\n - \"utime+stime, children\" merged from \"utime, children\" and\n   \"stime, children\".\n - \"Minor faults, children\", \"Major faults, children\",\n   \"Virtual memory size\" removed as not available in a direct\n   equivalent.\n\nNo new values missing or skipped in FreeBSD are printed, although\nthere is a long list of potential candiates.\n\ngdb/ChangeLog:\n\n        * nbsd-nat.c (nbsd_pid_to_kinfo_proc2): New.\n        (nbsd_nat_target::info_proc): Add do_status.",
    "tree": {
      "sha": "8a32d10951c5c5c2f79b83fc1d5e80002035d1e8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8a32d10951c5c5c2f79b83fc1d5e80002035d1e8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/06ca5dd49ac45e814ca167f441ac0b191b50bb37",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06ca5dd49ac45e814ca167f441ac0b191b50bb37",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/06ca5dd49ac45e814ca167f441ac0b191b50bb37",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06ca5dd49ac45e814ca167f441ac0b191b50bb37/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "34ca55313b8e6c0f6354f2dc5a3a35e38c32ae82",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/34ca55313b8e6c0f6354f2dc5a3a35e38c32ae82",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/34ca55313b8e6c0f6354f2dc5a3a35e38c32ae82"
    }
  ],
  "stats": {
    "total": 108,
    "additions": 108,
    "deletions": 0
  },
  "files": [
    {
      "sha": "8998636a1d7840dd277b2d37a72f40a08c89a0ff",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06ca5dd49ac45e814ca167f441ac0b191b50bb37/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06ca5dd49ac45e814ca167f441ac0b191b50bb37/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=06ca5dd49ac45e814ca167f441ac0b191b50bb37",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-14  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* nbsd-nat.c (nbsd_pid_to_kinfo_proc2): New.\n+\t(nbsd_nat_target::info_proc): Add do_status.\n+\n 2020-04-14  Simon Marchi  <simon.marchi@polymtl.ca>\n \t    Tom de Vries  <tdevries@suse.de>\n "
    },
    {
      "sha": "d41cfc815d3778e8b240f11dc1b942eda464b566",
      "filename": "gdb/nbsd-nat.c",
      "status": "modified",
      "additions": 103,
      "deletions": 0,
      "changes": 103,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06ca5dd49ac45e814ca167f441ac0b191b50bb37/gdb/nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06ca5dd49ac45e814ca167f441ac0b191b50bb37/gdb/nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.c?ref=06ca5dd49ac45e814ca167f441ac0b191b50bb37",
      "patch": "@@ -58,6 +58,19 @@ nbsd_pid_to_cwd (int pid)\n   return buf;\n }\n \n+/* Return the kinfo_proc2 structure for the process identified by PID.  */\n+\n+static bool\n+nbsd_pid_to_kinfo_proc2 (pid_t pid, struct kinfo_proc2 *kp)\n+{\n+  gdb_assert (kp != nullptr);\n+\n+  size_t size = sizeof (*kp);\n+  int mib[6] = {CTL_KERN, KERN_PROC2, KERN_PROC_PID, pid,\n+\t\tstatic_cast<int> (size), 1};\n+  return !sysctl (mib, ARRAY_SIZE (mib), kp, &size, NULL, 0);\n+}\n+\n /* Return the command line for the process identified by PID.  */\n \n static gdb::unique_xmalloc_ptr<char[]>\n@@ -344,6 +357,7 @@ nbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n   bool do_cwd = false;\n   bool do_exe = false;\n   bool do_mappings = false;\n+  bool do_status = false;\n \n   switch (what)\n     {\n@@ -352,6 +366,10 @@ nbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n       do_cwd = true;\n       do_exe = true;\n       break;\n+    case IP_STAT:\n+    case IP_STATUS:\n+      do_status = true;\n+      break;\n     case IP_MAPPINGS:\n       do_mappings = true;\n       break;\n@@ -369,6 +387,7 @@ nbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n       do_cwd = true;\n       do_exe = true;\n       do_mappings = true;\n+      do_status = true;\n       break;\n     default:\n       error (_(\"Not supported on this target.\"));\n@@ -433,6 +452,90 @@ nbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n       else\n \twarning (_(\"unable to fetch virtual memory map\"));\n     }\n+  if (do_status)\n+    {\n+      struct kinfo_proc2 kp;\n+      if (!nbsd_pid_to_kinfo_proc2 (pid, &kp))\n+\twarning (_(\"Failed to fetch process information\"));\n+      else\n+\t{\n+\t  auto process_status\n+\t    = [] (int8_t stat)\n+\t      {\n+\t\tswitch (stat)\n+\t\t  {\n+\t\t  case SIDL:\n+\t\t    return \"IDL\";\n+\t\t  case SACTIVE:\n+\t\t    return \"ACTIVE\";\n+\t\t  case SDYING:\n+\t\t    return \"DYING\";\n+\t\t  case SSTOP:\n+\t\t    return \"STOP\";\n+\t\t  case SZOMB:\n+\t\t    return \"ZOMB\";\n+\t\t  case SDEAD:\n+\t\t    return \"DEAD\";\n+\t\t  default:\n+\t\t    return \"? (unknown)\";\n+\t\t  }\n+\t      };\n+\n+\t  printf_filtered (\"Name: %s\\n\", kp.p_comm);\n+\t  printf_filtered (\"State: %s\\n\", process_status(kp.p_realstat));\n+\t  printf_filtered (\"Parent process: %\" PRId32 \"\\n\", kp.p_ppid);\n+\t  printf_filtered (\"Process group: %\" PRId32 \"\\n\", kp.p__pgid);\n+\t  printf_filtered (\"Session id: %\" PRId32 \"\\n\", kp.p_sid);\n+\t  printf_filtered (\"TTY: %\" PRId32 \"\\n\", kp.p_tdev);\n+\t  printf_filtered (\"TTY owner process group: %\" PRId32 \"\\n\", kp.p_tpgid);\n+\t  printf_filtered (\"User IDs (real, effective, saved): \"\n+\t\t\t   \"%\" PRIu32 \" %\" PRIu32 \" %\" PRIu32 \"\\n\",\n+\t\t\t   kp.p_ruid, kp.p_uid, kp.p_svuid);\n+\t  printf_filtered (\"Group IDs (real, effective, saved): \"\n+\t\t\t   \"%\" PRIu32 \" %\" PRIu32 \" %\" PRIu32 \"\\n\",\n+\t\t\t   kp.p_rgid, kp.p_gid, kp.p_svgid);\n+\n+\t  printf_filtered (\"Groups:\");\n+\t  for (int i = 0; i < kp.p_ngroups; i++)\n+\t    printf_filtered (\" %\" PRIu32, kp.p_groups[i]);\n+\t  printf_filtered (\"\\n\");\n+\t  printf_filtered (\"Minor faults (no memory page): %\" PRIu64 \"\\n\",\n+\t\t\t   kp.p_uru_minflt);\n+\t  printf_filtered (\"Major faults (memory page faults): %\" PRIu64 \"\\n\",\n+\t\t\t   kp.p_uru_majflt);\n+\t  printf_filtered (\"utime: %\" PRIu32 \".%06\" PRIu32 \"\\n\",\n+\t\t\t   kp.p_uutime_sec, kp.p_uutime_usec);\n+\t  printf_filtered (\"stime: %\" PRIu32 \".%06\" PRIu32 \"\\n\",\n+\t\t\t   kp.p_ustime_sec, kp.p_ustime_usec);\n+\t  printf_filtered (\"utime+stime, children: %\" PRIu32 \".%06\" PRIu32 \"\\n\",\n+\t\t\t   kp.p_uctime_sec, kp.p_uctime_usec);\n+\t  printf_filtered (\"'nice' value: %\" PRIu8 \"\\n\", kp.p_nice);\n+\t  printf_filtered (\"Start time: %\" PRIu32 \".%06\" PRIu32 \"\\n\",\n+\t\t\t   kp.p_ustart_sec, kp.p_ustart_usec);\n+\t  int pgtok = getpagesize () / 1024;\n+\t  printf_filtered (\"Data size: %\" PRIuMAX \" kB\\n\",\n+\t\t\t   (uintmax_t) kp.p_vm_dsize * pgtok);\n+\t  printf_filtered (\"Stack size: %\" PRIuMAX \" kB\\n\",\n+\t\t\t   (uintmax_t) kp.p_vm_ssize * pgtok);\n+\t  printf_filtered (\"Text size: %\" PRIuMAX \" kB\\n\",\n+\t\t\t   (uintmax_t) kp.p_vm_tsize * pgtok);\n+\t  printf_filtered (\"Resident set size: %\" PRIuMAX \" kB\\n\",\n+\t\t\t   (uintmax_t) kp.p_vm_rssize * pgtok);\n+\t  printf_filtered (\"Maximum RSS: %\" PRIu64 \" kB\\n\", kp.p_uru_maxrss);\n+\t  printf_filtered (\"Pending Signals:\");\n+\t  for (size_t i = 0; i < ARRAY_SIZE (kp.p_siglist.__bits); i++)\n+\t    printf_filtered (\" %08\" PRIx32, kp.p_siglist.__bits[i]);\n+\t  printf_filtered (\"\\n\");\n+\t  printf_filtered (\"Ignored Signals:\");\n+\t  for (size_t i = 0; i < ARRAY_SIZE (kp.p_sigignore.__bits); i++)\n+\t    printf_filtered (\" %08\" PRIx32, kp.p_sigignore.__bits[i]);\n+\t  printf_filtered (\"\\n\");\n+\t  printf_filtered (\"Caught Signals:\");\n+\t  for (size_t i = 0; i < ARRAY_SIZE (kp.p_sigcatch.__bits); i++)\n+\t    printf_filtered (\" %08\" PRIx32, kp.p_sigcatch.__bits[i]);\n+\t  printf_filtered (\"\\n\");\n+\t}\n+    }\n \n   return true;\n }"
    }
  ]
}