{
  "sha": "652afeef247770b22c44ca292d1f4c65be40a696",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjUyYWZlZWYyNDc3NzBiMjJjNDRjYTI5MmQxZjRjNjViZTQwYTY5Ng==",
  "commit": {
    "author": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-08-22T10:35:35Z"
    },
    "committer": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-08-22T10:43:15Z"
    },
    "message": "AArch64: Fix LD crash on weak and undefined TLS symbols. (PR/24602).\n\nThis patch fixes a few linker crashes due to TLS code reaching an assert when it\nshouldn't.\n\nThe first scenario is with weak TLS symbols that remain weak during linking.  In\nthis case the mid-end would not have seen a TLS symbol and so wouldn't have\nallocated the TLS section.  We currently assert here and the linker crashes with\na not very useful message.\n\nThis patch changes this to return the value 0 for the TLS symbol in question\nemulating what lld and gold and other BFD targets do.  However because weak TLS\nis implementation defined and we don't define any behavior for it I also emit a\nwarning to the user to inform them of such.\n\nSecondly when a strong TLS reference is undefined. The linker crashes even after\nit correctly reported that there is an undefined reference.  This changes it so\nthat it gracefully exits and reports a useful error.\n\nbfd/ChangeLog:\n\n\tPR ld/24601\n\t* elfnn-aarch64.c (aarch64_relocate): Handle weak TLS and undefined TLS.\n\tAlso Pass input_bfd to _bfd_aarch64_elf_resolve_relocation.\n\t* elfxx-aarch64.c (_bfd_aarch64_elf_resolve_relocation): Use it.\n\t* elfxx-aarch64.h (_bfd_aarch64_elf_resolve_relocation): Emit warning\n\tfor weak TLS.\n\nld/ChangeLog:\n\n\tPR ld/24601\n\t* testsuite/ld-aarch64/aarch64-elf.exp (undef-tls, weak-tls): New.\n\t* testsuite/ld-aarch64/undef-tls.d: New test.\n\t* testsuite/ld-aarch64/undef-tls.s: New test.\n\t* testsuite/ld-aarch64/weak-tls.d: New test.\n\t* testsuite/ld-aarch64/weak-tls.s: New test.",
    "tree": {
      "sha": "67dbfe62d2b3c87351b844f745f4363b1b0bb512",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/67dbfe62d2b3c87351b844f745f4363b1b0bb512"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/652afeef247770b22c44ca292d1f4c65be40a696",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/652afeef247770b22c44ca292d1f4c65be40a696",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/652afeef247770b22c44ca292d1f4c65be40a696",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/652afeef247770b22c44ca292d1f4c65be40a696/comments",
  "author": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b20d385926d84f7daa8cd7c54f748f3d6a81bfc6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b20d385926d84f7daa8cd7c54f748f3d6a81bfc6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b20d385926d84f7daa8cd7c54f748f3d6a81bfc6"
    }
  ],
  "stats": {
    "total": 176,
    "additions": 153,
    "deletions": 23
  },
  "files": [
    {
      "sha": "ef9eee4716e3eb97089af47af379934016401175",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/652afeef247770b22c44ca292d1f4c65be40a696/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/652afeef247770b22c44ca292d1f4c65be40a696/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=652afeef247770b22c44ca292d1f4c65be40a696",
      "patch": "@@ -1,3 +1,12 @@\n+2019-08-22  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR ld/24601\n+\t* elfnn-aarch64.c (aarch64_relocate): Handle weak TLS and undefined TLS.\n+\tAlso Pass input_bfd to _bfd_aarch64_elf_resolve_relocation.\n+\t* elfxx-aarch64.c (_bfd_aarch64_elf_resolve_relocation): Use it.\n+\t* elfxx-aarch64.h (_bfd_aarch64_elf_resolve_relocation): Emit warning\n+\tfor weak TLS.\n+\n 2019-08-22  Alan Modra  <amodra@gmail.com>\n \n \t* elf32-arm.c (cmse_scan): Don't use ARM_GET_SYM_CMSE_SPCL,"
    },
    {
      "sha": "fd44505da4a0ae43537a5bf2a5aaa4522f860687",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 63,
      "deletions": 20,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/652afeef247770b22c44ca292d1f4c65be40a696/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/652afeef247770b22c44ca292d1f4c65be40a696/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=652afeef247770b22c44ca292d1f4c65be40a696",
      "patch": "@@ -3004,7 +3004,8 @@ aarch64_relocate (unsigned int r_type, bfd *input_bfd, asection *input_section,\n \t   + offset);\n \n   r_type = elfNN_aarch64_bfd_reloc_from_type (input_bfd, r_type);\n-  value = _bfd_aarch64_elf_resolve_relocation (r_type, place, value, 0, FALSE);\n+  value = _bfd_aarch64_elf_resolve_relocation (input_bfd, r_type, place,\n+\t\t\t\t\t       value, 0, FALSE);\n   return _bfd_aarch64_elf_put_addend (input_bfd,\n \t\t\t\t      input_section->contents + offset, r_type,\n \t\t\t\t      howto, value) == bfd_reloc_ok;\n@@ -5585,7 +5586,8 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n \t  /* FALLTHROUGH */\n \tcase BFD_RELOC_AARCH64_CALL26:\n \tcase BFD_RELOC_AARCH64_JUMP26:\n-\t  value = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n+\t  value = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t       place, value,\n \t\t\t\t\t\t       signed_addend,\n \t\t\t\t\t\t       weak_undef_p);\n \t  return _bfd_aarch64_elf_put_addend (input_bfd, hit_data, bfd_r_type,\n@@ -5662,7 +5664,8 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n \t    addend = (globals->root.sgot->output_section->vma\n \t\t      + globals->root.sgot->output_offset);\n \n-\t  value = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n+\t  value = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t       place, value,\n \t\t\t\t\t\t       addend, weak_undef_p);\n \t  return _bfd_aarch64_elf_put_addend (input_bfd, hit_data, bfd_r_type, howto, value);\n \tcase BFD_RELOC_AARCH64_ADD_LO12:\n@@ -5840,7 +5843,8 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n \t    signed_addend = 0;\n \t  }\n       }\n-      value = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n+      value = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t   place, value,\n \t\t\t\t\t\t   signed_addend, weak_undef_p);\n       *unresolved_reloc_p = FALSE;\n       break;\n@@ -5900,7 +5904,8 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n     case BFD_RELOC_AARCH64_MOVW_G2_S:\n     case BFD_RELOC_AARCH64_MOVW_G3:\n     case BFD_RELOC_AARCH64_TSTBR14:\n-      value = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n+      value = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t   place, value,\n \t\t\t\t\t\t   signed_addend, weak_undef_p);\n       break;\n \n@@ -5945,7 +5950,8 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n \t  if (aarch64_relocation_aginst_gp_p (bfd_r_type))\n \t    addend = (globals->root.sgot->output_section->vma\n \t\t      + globals->root.sgot->output_offset);\n-\t  value = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n+\t  value = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t       place, value,\n \t\t\t\t\t\t       addend, weak_undef_p);\n \t}\n       else\n@@ -5992,7 +5998,8 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n \tif (aarch64_relocation_aginst_gp_p (bfd_r_type))\n \t  addend = base_got->output_section->vma + base_got->output_offset;\n \n-\tvalue = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n+\tvalue = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t     place, value,\n \t\t\t\t\t\t     addend, weak_undef_p);\n       }\n \n@@ -6029,7 +6036,8 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n \t       + globals->root.sgot->output_section->vma\n \t       + globals->root.sgot->output_offset);\n \n-      value = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n+      value = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t   place, value,\n \t\t\t\t\t\t   0, weak_undef_p);\n       *unresolved_reloc_p = FALSE;\n       break;\n@@ -6042,7 +6050,8 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n \treturn bfd_reloc_notsupported;\n \n       value = symbol_got_offset (input_bfd, h, r_symndx);\n-      value = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n+      value = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t   place, value,\n \t\t\t\t\t\t   0, weak_undef_p);\n       *unresolved_reloc_p = FALSE;\n       break;\n@@ -6063,10 +6072,26 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n     case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1:\n     case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G1_NC:\n     case BFD_RELOC_AARCH64_TLSLD_MOVW_DTPREL_G2:\n-      value = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n-\t\t\t\t\t\t   signed_addend - dtpoff_base (info),\n-\t\t\t\t\t\t   weak_undef_p);\n-      break;\n+      {\n+\tif (!(weak_undef_p || elf_hash_table (info)->tls_sec))\n+\t  {\n+\t    int howto_index = bfd_r_type - BFD_RELOC_AARCH64_RELOC_START;\n+\t    _bfd_error_handler\n+\t      /* xgettext:c-format */\n+\t      (_(\"%pB: TLS relocation %s against undefined symbol `%s'\"),\n+\t\t input_bfd, elfNN_aarch64_howto_table[howto_index].name,\n+\t\t h->root.root.string);\n+\t    bfd_set_error (bfd_error_bad_value);\n+\t    return bfd_reloc_notsupported;\n+\t  }\n+\n+\tbfd_vma def_value\n+\t  = weak_undef_p ? 0 : signed_addend - dtpoff_base (info);\n+\tvalue = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t     place, value,\n+\t\t\t\t\t\t     def_value, weak_undef_p);\n+\tbreak;\n+      }\n \n     case BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_HI12:\n     case BFD_RELOC_AARCH64_TLSLE_ADD_TPREL_LO12:\n@@ -6084,11 +6109,27 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n     case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1:\n     case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G1_NC:\n     case BFD_RELOC_AARCH64_TLSLE_MOVW_TPREL_G2:\n-      value = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n-\t\t\t\t\t\t   signed_addend - tpoff_base (info),\n-\t\t\t\t\t\t   weak_undef_p);\n-      *unresolved_reloc_p = FALSE;\n-      break;\n+      {\n+\tif (!(weak_undef_p || elf_hash_table (info)->tls_sec))\n+\t  {\n+\t    int howto_index = bfd_r_type - BFD_RELOC_AARCH64_RELOC_START;\n+\t    _bfd_error_handler\n+\t      /* xgettext:c-format */\n+\t      (_(\"%pB: TLS relocation %s against undefined symbol `%s'\"),\n+\t\t input_bfd, elfNN_aarch64_howto_table[howto_index].name,\n+\t\t h->root.root.string);\n+\t    bfd_set_error (bfd_error_bad_value);\n+\t    return bfd_reloc_notsupported;\n+\t  }\n+\n+\tbfd_vma def_value\n+\t  = weak_undef_p ? 0 : signed_addend - tpoff_base (info);\n+\tvalue = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t     place, value,\n+\t\t\t\t\t\t     def_value, weak_undef_p);\n+        *unresolved_reloc_p = FALSE;\n+\tbreak;\n+      }\n \n     case BFD_RELOC_AARCH64_TLSDESC_ADD_LO12:\n     case BFD_RELOC_AARCH64_TLSDESC_ADR_PAGE21:\n@@ -6103,7 +6144,8 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n \t       + globals->root.sgotplt->output_offset\n \t       + globals->sgotplt_jump_table_size);\n \n-      value = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n+      value = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t   place, value,\n \t\t\t\t\t\t   0, weak_undef_p);\n       *unresolved_reloc_p = FALSE;\n       break;\n@@ -6121,7 +6163,8 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n       value -= (globals->root.sgot->output_section->vma\n \t\t+ globals->root.sgot->output_offset);\n \n-      value = _bfd_aarch64_elf_resolve_relocation (bfd_r_type, place, value,\n+      value = _bfd_aarch64_elf_resolve_relocation (input_bfd, bfd_r_type,\n+\t\t\t\t\t\t   place, value,\n \t\t\t\t\t\t   0, weak_undef_p);\n       *unresolved_reloc_p = FALSE;\n       break;"
    },
    {
      "sha": "1f6928071313d91479055e45aac4199590404bba",
      "filename": "bfd/elfxx-aarch64.c",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/652afeef247770b22c44ca292d1f4c65be40a696/bfd/elfxx-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/652afeef247770b22c44ca292d1f4c65be40a696/bfd/elfxx-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-aarch64.c?ref=652afeef247770b22c44ca292d1f4c65be40a696",
      "patch": "@@ -395,10 +395,12 @@ _bfd_aarch64_elf_put_addend (bfd *abfd,\n }\n \n bfd_vma\n-_bfd_aarch64_elf_resolve_relocation (bfd_reloc_code_real_type r_type,\n+_bfd_aarch64_elf_resolve_relocation (bfd *input_bfd,\n+\t\t\t\t     bfd_reloc_code_real_type r_type,\n \t\t\t\t     bfd_vma place, bfd_vma value,\n \t\t\t\t     bfd_vma addend, bfd_boolean weak_undef_p)\n {\n+  bfd_boolean tls_reloc = TRUE;\n   switch (r_type)\n     {\n     case BFD_RELOC_AARCH64_NONE:\n@@ -446,6 +448,8 @@ _bfd_aarch64_elf_resolve_relocation (bfd_reloc_code_real_type r_type,\n     case BFD_RELOC_AARCH64_MOVW_G2_NC:\n     case BFD_RELOC_AARCH64_MOVW_G2_S:\n     case BFD_RELOC_AARCH64_MOVW_G3:\n+      tls_reloc = FALSE;\n+      /* fall-through.  */\n     case BFD_RELOC_AARCH64_TLSDESC_OFF_G0_NC:\n     case BFD_RELOC_AARCH64_TLSDESC_OFF_G1:\n     case BFD_RELOC_AARCH64_TLSGD_MOVW_G0_NC:\n@@ -466,6 +470,15 @@ _bfd_aarch64_elf_resolve_relocation (bfd_reloc_code_real_type r_type,\n     case BFD_RELOC_AARCH64_TLSLE_LDST32_TPREL_LO12:\n     case BFD_RELOC_AARCH64_TLSLE_LDST64_TPREL_LO12:\n     case BFD_RELOC_AARCH64_TLSLE_LDST8_TPREL_LO12:\n+      /* Weak Symbols and TLS relocations are implementation defined.  For this\n+\t case we choose to emit 0.  */\n+      if (weak_undef_p && tls_reloc)\n+\t{\n+\t  _bfd_error_handler (_(\"%pB: warning: Weak TLS is implementation \"\n+\t\t\t\t\"defined and may not work as expected\"),\n+\t\t\t\tinput_bfd);\n+\t  value = place;\n+\t}\n       value = value + addend;\n       break;\n "
    },
    {
      "sha": "f5988529d7aaaa886f89ba3a61e632e1216bd75d",
      "filename": "bfd/elfxx-aarch64.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/652afeef247770b22c44ca292d1f4c65be40a696/bfd/elfxx-aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/652afeef247770b22c44ca292d1f4c65be40a696/bfd/elfxx-aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-aarch64.h?ref=652afeef247770b22c44ca292d1f4c65be40a696",
      "patch": "@@ -40,8 +40,8 @@ _bfd_aarch64_elf_put_addend (bfd *, bfd_byte *, bfd_reloc_code_real_type,\n \t\t\t     reloc_howto_type *, bfd_signed_vma);\n \n extern bfd_vma\n-_bfd_aarch64_elf_resolve_relocation (bfd_reloc_code_real_type, bfd_vma, bfd_vma,\n-\t\t\t\t     bfd_vma, bfd_boolean);\n+_bfd_aarch64_elf_resolve_relocation (bfd *, bfd_reloc_code_real_type, bfd_vma,\n+\t\t\t\t     bfd_vma, bfd_vma, bfd_boolean);\n \n extern bfd_boolean\n _bfd_aarch64_elf_grok_prstatus (bfd *, Elf_Internal_Note *);"
    },
    {
      "sha": "ed646acffaefb8aa8a48c733c320ddc2e4a7a698",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/652afeef247770b22c44ca292d1f4c65be40a696/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/652afeef247770b22c44ca292d1f4c65be40a696/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=652afeef247770b22c44ca292d1f4c65be40a696",
      "patch": "@@ -1,3 +1,12 @@\n+2019-08-22  Tamar Christina  <tamar.christina@arm.com>\n+\n+\tPR ld/24601\n+\t* testsuite/ld-aarch64/aarch64-elf.exp (undef-tls, weak-tls): New.\n+\t* testsuite/ld-aarch64/undef-tls.d: New test.\n+\t* testsuite/ld-aarch64/undef-tls.s: New test.\n+\t* testsuite/ld-aarch64/weak-tls.d: New test.\n+\t* testsuite/ld-aarch64/weak-tls.s: New test.\n+\n 2019-08-20  Tamar Christina  <tamar.christina@arm.com>\n \n \t* testsuite/ld-arm/cortex-a8-fix-b-plt.d: Update Testcase."
    },
    {
      "sha": "631fde0f31079cad8d7258fd39005bc881954280",
      "filename": "ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/652afeef247770b22c44ca292d1f4c65be40a696/ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/652afeef247770b22c44ca292d1f4c65be40a696/ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/aarch64-elf.exp?ref=652afeef247770b22c44ca292d1f4c65be40a696",
      "patch": "@@ -424,3 +424,5 @@ run_dump_test \"bti-pac-plt-1\"\n run_dump_test \"bti-pac-plt-2\"\n \n run_dump_test \"bti-warn\"\n+run_dump_test \"weak-tls\"\n+run_dump_test \"undef-tls\""
    },
    {
      "sha": "8b43ca4c1de6858faa40f0d6530b448403c1fafa",
      "filename": "ld/testsuite/ld-aarch64/undef-tls.d",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/652afeef247770b22c44ca292d1f4c65be40a696/ld/testsuite/ld-aarch64/undef-tls.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/652afeef247770b22c44ca292d1f4c65be40a696/ld/testsuite/ld-aarch64/undef-tls.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/undef-tls.d?ref=652afeef247770b22c44ca292d1f4c65be40a696",
      "patch": "@@ -0,0 +1,17 @@\n+#source: undef-tls.s\n+#ld: -e0 --emit-relocs\n+#objdump: -dr\n+#...\n+#error:.*: in function `get':.*\n+#error:.*: undefined reference to `tls'.*\n+#error:.*: TLS relocation R_AARCH64_TLSLE_ADD_TPREL_HI12 against undefined symbol `tls'.*\n+#error:.*: dangerous relocation: unsupported relocation.*\n+#error:.*: undefined reference to `tls'.*\n+#error:.*: TLS relocation R_AARCH64_TLSLE_ADD_TPREL_LO12_NC against undefined symbol `tls'.*\n+#error:.*: dangerous relocation: unsupported relocation.*\n+#error:.*: undefined reference to `dtl'.*\n+#error:.*: TLS relocation R_AARCH64_TLSLD_ADD_DTPREL_HI12 against undefined symbol `dtl'.*\n+#error:.*: dangerous relocation: unsupported relocation.*\n+#error:.*: undefined reference to `dtl'.*\n+#error:.*: TLS relocation R_AARCH64_TLSLD_ADD_DTPREL_LO12 against undefined symbol `dtl'.*\n+#error:.*: dangerous relocation: unsupported relocation.*"
    },
    {
      "sha": "6d57afbb540e4aa6ab0762a5949124fa55ecbd29",
      "filename": "ld/testsuite/ld-aarch64/undef-tls.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/652afeef247770b22c44ca292d1f4c65be40a696/ld/testsuite/ld-aarch64/undef-tls.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/652afeef247770b22c44ca292d1f4c65be40a696/ld/testsuite/ld-aarch64/undef-tls.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/undef-tls.s?ref=652afeef247770b22c44ca292d1f4c65be40a696",
      "patch": "@@ -0,0 +1,13 @@\n+        .global get\n+        .type   get, %function\n+get:\n+.LFB0:\n+        mrs     x0, tpidr_el0\n+        add     x0, x0, #:tprel_hi12:tls, lsl #12\n+        add     x0, x0, #:tprel_lo12_nc:tls\n+\tadd\tx0, x0, #:dtprel_hi12:dtl\n+\tadd\tx0, x0, #:dtprel_lo12:dtl\n+        ret\n+.LFE0:\n+        .size   get, .-get\n+"
    },
    {
      "sha": "a8269406892fc7e9d94a528a799398171ff53a85",
      "filename": "ld/testsuite/ld-aarch64/weak-tls.d",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/652afeef247770b22c44ca292d1f4c65be40a696/ld/testsuite/ld-aarch64/weak-tls.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/652afeef247770b22c44ca292d1f4c65be40a696/ld/testsuite/ld-aarch64/weak-tls.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/weak-tls.d?ref=652afeef247770b22c44ca292d1f4c65be40a696",
      "patch": "@@ -0,0 +1,8 @@\n+#source: weak-tls.s\n+#ld: -e0 --emit-relocs\n+#objdump: -dr\n+#...\n+#error:.*: warning: Weak TLS is implementation defined and may not work as expected.*\n+#error:.*: warning: Weak TLS is implementation defined and may not work as expected.*\n+#error:.*: in function `get':.*\n+#error:.*: relocation truncated to fit: R_AARCH64_TLSLD_ADD_DTPREL_LO12 against undefined symbol `dtl'.*"
    },
    {
      "sha": "3520a85589c786566c7da7d321f6077ac3d8f2c4",
      "filename": "ld/testsuite/ld-aarch64/weak-tls.s",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/652afeef247770b22c44ca292d1f4c65be40a696/ld/testsuite/ld-aarch64/weak-tls.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/652afeef247770b22c44ca292d1f4c65be40a696/ld/testsuite/ld-aarch64/weak-tls.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/weak-tls.s?ref=652afeef247770b22c44ca292d1f4c65be40a696",
      "patch": "@@ -0,0 +1,16 @@\n+        .global get\n+        .type   get, %function\n+\t.global dtl\n+\t.weak dtl\n+get:\n+.LFB0:\n+        mrs     x0, tpidr_el0\n+        add     x0, x0, #:tprel_hi12:tls, lsl #12\n+        add     x0, x0, #:tprel_lo12_nc:tls\n+\tadd\tx0, x0, #:dtprel_hi12:dtl\n+\tadd\tx0, x0, #:dtprel_lo12:dtl\n+        ret\n+.LFE0:\n+        .size   get, .-get\n+        .weak   tls\n+"
    }
  ]
}