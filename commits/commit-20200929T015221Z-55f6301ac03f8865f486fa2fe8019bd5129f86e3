{
  "sha": "55f6301ac03f8865f486fa2fe8019bd5129f86e3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTVmNjMwMWFjMDNmODg2NWY0ODZmYTJmZTgwMTliZDUxMjlmODZlMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-29T01:38:25Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-29T01:52:21Z"
    },
    "message": "Remove target_has_execution macro\n\nThis removes the object-like macro target_has_execution, replacing it\nwith a function call.  target_has_execution_current is also now\nhandled by this function.\n\ngdb/ChangeLog\n2020-09-28  Tom Tromey  <tom@tromey.com>\n\n\t* inferior.h (class inferior) <has_execution>: Update.\n\t* windows-tdep.c (windows_solib_create_inferior_hook): Update.\n\t* valops.c (find_function_in_inferior)\n\t(value_allocate_space_in_inferior): Update.\n\t* top.c (kill_or_detach): Update.\n\t* target.c (target_preopen, set_target_permissions): Update.\n\t(target_has_execution_current): Remove.\n\t* sparc64-tdep.c (adi_examine_command, adi_assign_command):\n\tUpdate.\n\t* solib.c (update_solib_list, reload_shared_libraries): Update.\n\t* solib-svr4.c (svr4_solib_create_inferior_hook): Update.\n\t* solib-dsbt.c (enable_break): Update.\n\t* score-tdep.c (score7_fetch_inst): Update.\n\t* rs6000-nat.c (rs6000_nat_target::xfer_shared_libraries):\n\tUpdate.\n\t* remote.c (remote_target::start_remote)\n\t(remote_target::remote_check_symbols, remote_target::open_1)\n\t(remote_target::remote_detach_1, remote_target::verify_memory)\n\t(remote_target::xfer_partial, remote_target::read_description)\n\t(remote_target::get_min_fast_tracepoint_insn_len): Update.\n\t* record-full.c (record_full_open_1): Update.\n\t* record-btrace.c (record_btrace_target_open): Update.\n\t* objc-lang.c (lookup_objc_class, lookup_child_selector)\n\t(value_nsstring): Update.\n\t* linux-thread-db.c (add_thread_db_info)\n\t(thread_db_find_new_threads_silently, check_thread_db_callback)\n\t(try_thread_db_load_1, record_thread): Update.\n\t* linux-tdep.c (linux_info_proc, linux_vsyscall_range_raw):\n\tUpdate.\n\t* linux-fork.c (checkpoint_command): Update.\n\t* infrun.c (set_non_stop, set_observer_mode)\n\t(check_multi_target_resumption, for_each_just_stopped_thread)\n\t(maybe_remove_breakpoints, normal_stop)\n\t(class infcall_suspend_state): Update.\n\t* infcmd.c (ERROR_NO_INFERIOR, kill_if_already_running)\n\t(info_program_command, attach_command): Update.\n\t* infcall.c (call_function_by_hand_dummy): Update.\n\t* inf-loop.c (inferior_event_handler): Update.\n\t* gcore.c (gcore_command, derive_heap_segment): Update.\n\t* exec.c (exec_file_command): Update.\n\t* eval.c (evaluate_subexp): Update.\n\t* compile/compile.c (compile_to_object): Update.\n\t* cli/cli-dump.c (restore_command): Update.\n\t* breakpoint.c (update_watchpoint)\n\t(update_inserted_breakpoint_locations)\n\t(insert_breakpoint_locations, get_bpstat_thread): Update.\n\t* target.h (target_has_execution): Remove macro.\n\t(target_has_execution_current): Don't declare.\n\t(target_has_execution): Rename from target_has_execution_1.  Add\n\targument default.",
    "tree": {
      "sha": "9d0673715cc0dfe18728c937ff30a32e1398a31b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9d0673715cc0dfe18728c937ff30a32e1398a31b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/55f6301ac03f8865f486fa2fe8019bd5129f86e3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55f6301ac03f8865f486fa2fe8019bd5129f86e3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/55f6301ac03f8865f486fa2fe8019bd5129f86e3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55f6301ac03f8865f486fa2fe8019bd5129f86e3/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "05374cfd90b59c62f9230baa19e71a3d9ed27269",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05374cfd90b59c62f9230baa19e71a3d9ed27269",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/05374cfd90b59c62f9230baa19e71a3d9ed27269"
    }
  ],
  "stats": {
    "total": 203,
    "additions": 124,
    "deletions": 79
  },
  "files": [
    {
      "sha": "2c29fff35ed3a3e58299a3dc9611014b3116247e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 53,
      "deletions": 0,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -1,3 +1,56 @@\n+2020-09-28  Tom Tromey  <tom@tromey.com>\n+\n+\t* inferior.h (class inferior) <has_execution>: Update.\n+\t* windows-tdep.c (windows_solib_create_inferior_hook): Update.\n+\t* valops.c (find_function_in_inferior)\n+\t(value_allocate_space_in_inferior): Update.\n+\t* top.c (kill_or_detach): Update.\n+\t* target.c (target_preopen, set_target_permissions): Update.\n+\t(target_has_execution_current): Remove.\n+\t* sparc64-tdep.c (adi_examine_command, adi_assign_command):\n+\tUpdate.\n+\t* solib.c (update_solib_list, reload_shared_libraries): Update.\n+\t* solib-svr4.c (svr4_solib_create_inferior_hook): Update.\n+\t* solib-dsbt.c (enable_break): Update.\n+\t* score-tdep.c (score7_fetch_inst): Update.\n+\t* rs6000-nat.c (rs6000_nat_target::xfer_shared_libraries):\n+\tUpdate.\n+\t* remote.c (remote_target::start_remote)\n+\t(remote_target::remote_check_symbols, remote_target::open_1)\n+\t(remote_target::remote_detach_1, remote_target::verify_memory)\n+\t(remote_target::xfer_partial, remote_target::read_description)\n+\t(remote_target::get_min_fast_tracepoint_insn_len): Update.\n+\t* record-full.c (record_full_open_1): Update.\n+\t* record-btrace.c (record_btrace_target_open): Update.\n+\t* objc-lang.c (lookup_objc_class, lookup_child_selector)\n+\t(value_nsstring): Update.\n+\t* linux-thread-db.c (add_thread_db_info)\n+\t(thread_db_find_new_threads_silently, check_thread_db_callback)\n+\t(try_thread_db_load_1, record_thread): Update.\n+\t* linux-tdep.c (linux_info_proc, linux_vsyscall_range_raw):\n+\tUpdate.\n+\t* linux-fork.c (checkpoint_command): Update.\n+\t* infrun.c (set_non_stop, set_observer_mode)\n+\t(check_multi_target_resumption, for_each_just_stopped_thread)\n+\t(maybe_remove_breakpoints, normal_stop)\n+\t(class infcall_suspend_state): Update.\n+\t* infcmd.c (ERROR_NO_INFERIOR, kill_if_already_running)\n+\t(info_program_command, attach_command): Update.\n+\t* infcall.c (call_function_by_hand_dummy): Update.\n+\t* inf-loop.c (inferior_event_handler): Update.\n+\t* gcore.c (gcore_command, derive_heap_segment): Update.\n+\t* exec.c (exec_file_command): Update.\n+\t* eval.c (evaluate_subexp): Update.\n+\t* compile/compile.c (compile_to_object): Update.\n+\t* cli/cli-dump.c (restore_command): Update.\n+\t* breakpoint.c (update_watchpoint)\n+\t(update_inserted_breakpoint_locations)\n+\t(insert_breakpoint_locations, get_bpstat_thread): Update.\n+\t* target.h (target_has_execution): Remove macro.\n+\t(target_has_execution_current): Don't declare.\n+\t(target_has_execution): Rename from target_has_execution_1.  Add\n+\targument default.\n+\n 2020-09-28  Tom Tromey  <tom@tromey.com>\n \n \t* mi/mi-main.c (exec_reverse_continue)"
    },
    {
      "sha": "296b08c0afc7ec4554812696f74031e2d845770b",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -1768,7 +1768,7 @@ update_watchpoint (struct watchpoint *b, int reparse)\n      don't try to insert watchpoint.  We don't automatically delete\n      such watchpoint, though, since failure to parse expression\n      is different from out-of-scope watchpoint.  */\n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     {\n       /* Without execution, memory can't change.  No use to try and\n \t set watchpoint locations.  The watchpoint will be reset when\n@@ -2878,7 +2878,7 @@ update_inserted_breakpoint_locations (void)\n \t if we aren't attached to any process yet, we should still\n \t insert breakpoints.  */\n       if (!gdbarch_has_global_breakpoints (target_gdbarch ())\n-\t  && (inferior_ptid == null_ptid || !target_has_execution))\n+\t  && (inferior_ptid == null_ptid || !target_has_execution ()))\n \tcontinue;\n \n       val = insert_bp_location (bl, &tmp_error_stream, &disabled_breaks,\n@@ -2934,7 +2934,7 @@ insert_breakpoint_locations (void)\n \t if we aren't attached to any process yet, we should still\n \t insert breakpoints.  */\n       if (!gdbarch_has_global_breakpoints (target_gdbarch ())\n-\t  && (inferior_ptid == null_ptid || !target_has_execution))\n+\t  && (inferior_ptid == null_ptid || !target_has_execution ()))\n \tcontinue;\n \n       val = insert_bp_location (bl, &tmp_error_stream, &disabled_breaks,\n@@ -4410,7 +4410,7 @@ bpstat_do_actions_1 (bpstat *bsp)\n static thread_info *\n get_bpstat_thread ()\n {\n-  if (inferior_ptid == null_ptid || !target_has_execution)\n+  if (inferior_ptid == null_ptid || !target_has_execution ())\n     return NULL;\n \n   thread_info *tp = inferior_thread ();"
    },
    {
      "sha": "428e644ba990e9da6d6e14259638be96e1b62836",
      "filename": "gdb/cli/cli-dump.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/cli/cli-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/cli/cli-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-dump.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -497,7 +497,7 @@ restore_command (const char *args, int from_tty)\n {\n   int binary_flag = 0;\n \n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     noprocess ();\n \n   CORE_ADDR load_offset = 0;"
    },
    {
      "sha": "3e45e762624f577ac404a7f41adbac4700f97493",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -641,7 +641,7 @@ compile_to_object (struct command_line *cmd, const char *cmd_string,\n   struct gdbarch *gdbarch = get_current_arch ();\n   std::string triplet_rx;\n \n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     error (_(\"The program must be running for the compile command to \"\\\n \t     \"work.\"));\n "
    },
    {
      "sha": "e0cfb79368f6d1d63e8d58d3c5605cf4e309c4cd",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -68,7 +68,7 @@ evaluate_subexp (struct type *expect_type, struct expression *exp,\n   struct value *retval;\n \n   gdb::optional<enable_thread_stack_temporaries> stack_temporaries;\n-  if (*pos == 0 && target_has_execution\n+  if (*pos == 0 && target_has_execution ()\n       && exp->language_defn->la_language == language_cplus\n       && !thread_stack_temporaries_enabled_p (inferior_thread ()))\n     stack_temporaries.emplace (inferior_thread ());"
    },
    {
      "sha": "251e24dd26b667f6b43297695451dd02c5329923",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -545,7 +545,7 @@ exec_file_attach (const char *filename, int from_tty)\n static void\n exec_file_command (const char *args, int from_tty)\n {\n-  if (from_tty && target_has_execution\n+  if (from_tty && target_has_execution ()\n       && !query (_(\"A program is being debugged already.\\n\"\n \t\t   \"Are you sure you want to change the file? \")))\n     error (_(\"File not changed.\"));"
    },
    {
      "sha": "db82eaac3dd8b3c06bc1a3770f65f5ddbc590ff5",
      "filename": "gdb/gcore.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/gcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/gcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gcore.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -129,7 +129,7 @@ gcore_command (const char *args, int from_tty)\n   gdb::unique_xmalloc_ptr<char> corefilename;\n \n   /* No use generating a corefile without a target process.  */\n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     noprocess ();\n \n   if (args && *args)\n@@ -321,7 +321,7 @@ derive_heap_segment (bfd *abfd, bfd_vma *bottom, bfd_vma *top)\n \n   /* This function depends on being able to call a function in the\n      inferior.  */\n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     return 0;\n \n   /* The following code assumes that the link map is arranged as"
    },
    {
      "sha": "68c94d9e942c22a7ccf72135231d2906e1ad70cd",
      "filename": "gdb/inf-loop.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/inf-loop.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/inf-loop.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-loop.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -48,7 +48,7 @@ inferior_event_handler (enum inferior_event_type event_type)\n \t  /* Unregister the inferior from the event loop.  This is done\n \t     so that when the inferior is not running we don't get\n \t     distracted by spurious inferior output.  */\n-\t  if (target_has_execution && target_can_async_p ())\n+\t  if (target_has_execution () && target_can_async_p ())\n \t    target_async (0);\n \t}\n "
    },
    {
      "sha": "399b1724ea22ddd23b1ccabc51dd58870dbea5c8",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -786,7 +786,7 @@ call_function_by_hand_dummy (struct value *function,\n     error (_(\"Cannot call functions in the program: \"\n \t     \"may-call-functions is off.\"));\n \n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     noprocess ();\n \n   if (get_traceframe_number () >= 0)\n@@ -1353,7 +1353,7 @@ When the function is done executing, GDB will silently stop.\"),\n   /* If the program has exited, or we stopped at a different thread,\n      exit and inform the user.  */\n \n-  if (! target_has_execution)\n+  if (! target_has_execution ())\n     {\n       const char *name = get_function_name (funaddr,\n \t\t\t\t\t    name_buf, sizeof (name_buf));"
    },
    {
      "sha": "81ce36dafe2690fae1d299d1cba821c147f4e014",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -64,7 +64,7 @@ static void until_next_command (int);\n static void step_1 (int, int, const char *);\n \n #define ERROR_NO_INFERIOR \\\n-   if (!target_has_execution) error (_(\"The program is not being run.\"));\n+   if (!target_has_execution ()) error (_(\"The program is not being run.\"));\n \n /* Scratch area where string containing arguments to give to the\n    program will be stored by 'set args'.  As soon as anything is\n@@ -358,7 +358,7 @@ post_create_inferior (struct target_ops *target, int from_tty)\n static void\n kill_if_already_running (int from_tty)\n {\n-  if (inferior_ptid != null_ptid && target_has_execution)\n+  if (inferior_ptid != null_ptid && target_has_execution ())\n     {\n       /* Bail out before killing the program if we will not be able to\n \t restart it.  */\n@@ -1861,7 +1861,7 @@ info_program_command (const char *args, int from_tty)\n   ptid_t ptid;\n   process_stratum_target *proc_target;\n \n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     {\n       printf_filtered (_(\"The program being debugged is not being run.\\n\"));\n       return;\n@@ -2569,7 +2569,7 @@ attach_command (const char *args, int from_tty)\n     /* Don't complain if all processes share the same symbol\n        space.  */\n     ;\n-  else if (target_has_execution)\n+  else if (target_has_execution ())\n     {\n       if (query (_(\"A program is being debugged already.  Kill it? \")))\n \ttarget_kill ();"
    },
    {
      "sha": "70edf21b34bc859f123b6546ce602daa8f856a05",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -377,7 +377,7 @@ class inferior : public refcounted_object\n   { return m_target_stack.at (stratum); }\n \n   bool has_execution ()\n-  { return target_has_execution_1 (this); }\n+  { return target_has_execution (this); }\n \n   /* Pointer to next inferior in singly-linked list of inferiors.  */\n   struct inferior *next = NULL;"
    },
    {
      "sha": "6ff362cb6dfefb535994909bc9042e36bd1bdcaa",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -218,7 +218,7 @@ static void\n set_non_stop (const char *args, int from_tty,\n \t      struct cmd_list_element *c)\n {\n-  if (target_has_execution)\n+  if (target_has_execution ())\n     {\n       non_stop_1 = non_stop;\n       error (_(\"Cannot change this setting while the inferior is running.\"));\n@@ -247,7 +247,7 @@ static void\n set_observer_mode (const char *args, int from_tty,\n \t\t   struct cmd_list_element *c)\n {\n-  if (target_has_execution)\n+  if (target_has_execution ())\n     {\n       observer_mode_1 = observer_mode;\n       error (_(\"Cannot change this setting while the inferior is running.\"));\n@@ -2884,7 +2884,7 @@ check_multi_target_resumption (process_stratum_target *resume_target)\n \t{\n \t  switch_to_inferior_no_thread (inf);\n \n-\t  if (!target_has_execution)\n+\t  if (!target_has_execution ())\n \t    continue;\n \n \t  process_stratum_target *proc_target\n@@ -3308,7 +3308,7 @@ typedef void (*for_each_just_stopped_thread_callback_func)\n static void\n for_each_just_stopped_thread (for_each_just_stopped_thread_callback_func func)\n {\n-  if (!target_has_execution || inferior_ptid == null_ptid)\n+  if (!target_has_execution () || inferior_ptid == null_ptid)\n     return;\n \n   if (target_is_non_stop_p ())\n@@ -8146,7 +8146,7 @@ print_stop_event (struct ui_out *uiout, bool displays)\n void\n maybe_remove_breakpoints (void)\n {\n-  if (!breakpoints_should_be_inserted_now () && target_has_execution)\n+  if (!breakpoints_should_be_inserted_now () && target_has_execution ())\n     {\n       if (remove_breakpoints ())\n \t{\n@@ -8302,7 +8302,7 @@ normal_stop (void)\n      informing of a stop.  */\n   if (!non_stop\n       && previous_inferior_ptid != inferior_ptid\n-      && target_has_execution\n+      && target_has_execution ()\n       && last.kind != TARGET_WAITKIND_SIGNALLED\n       && last.kind != TARGET_WAITKIND_EXITED\n       && last.kind != TARGET_WAITKIND_NO_RESUMED)\n@@ -8407,7 +8407,7 @@ normal_stop (void)\n \n   annotate_stopped ();\n \n-  if (target_has_execution)\n+  if (target_has_execution ())\n     {\n       if (last.kind != TARGET_WAITKIND_SIGNALLED\n \t  && last.kind != TARGET_WAITKIND_EXITED\n@@ -8923,7 +8923,7 @@ class infcall_suspend_state\n \n     /* The inferior can be gone if the user types \"print exit(0)\"\n        (and perhaps other times).  */\n-    if (target_has_execution)\n+    if (target_has_execution ())\n       /* NB: The register write goes through to the target.  */\n       regcache->restore (registers ());\n   }"
    },
    {
      "sha": "b3d8fc1a1746e5fc7ea3a3ff7ee177f3b1b0c3c3",
      "filename": "gdb/linux-fork.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/linux-fork.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/linux-fork.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-fork.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -645,7 +645,7 @@ checkpoint_command (const char *args, int from_tty)\n   struct fork_info *fp;\n   pid_t retpid;\n \n-  if (!target_has_execution) \n+  if (!target_has_execution ()) \n     error (_(\"The program is not being run.\"));\n \n   /* Ensure that the inferior is not multithreaded.  */"
    },
    {
      "sha": "439f583a8027ce6c28568196da47a6963042e4e6",
      "filename": "gdb/linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -772,7 +772,7 @@ linux_info_proc (struct gdbarch *gdbarch, const char *args,\n     }\n   else\n     {\n-      if (!target_has_execution)\n+      if (!target_has_execution ())\n \terror (_(\"No current process: you must name one.\"));\n       if (current_inferior ()->fake_pid_p)\n \terror (_(\"Can't determine the current process's PID: you must name one.\"));\n@@ -2317,7 +2317,7 @@ linux_vsyscall_range_raw (struct gdbarch *gdbarch, struct mem_range *range)\n   /* It doesn't make sense to access the host's /proc when debugging a\n      core file.  Instead, look for the PT_LOAD segment that matches\n      the vDSO.  */\n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     {\n       long phdrs_size;\n       int num_phdrs, i;"
    },
    {
      "sha": "878e7bd183f600c4e5235f1efae6a24e08b8165f",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -237,7 +237,7 @@ add_thread_db_info (void *handle)\n \n   /* The workaround works by reading from /proc/pid/status, so it is\n      disabled for core files.  */\n-  if (target_has_execution)\n+  if (target_has_execution ())\n     info->need_stale_parent_threads_check = 1;\n \n   info->next = thread_db_list;\n@@ -531,7 +531,7 @@ thread_db_find_new_threads_silently (thread_info *stopped)\n \t corrupted.  For core files it does not apply, no 'later enumeration'\n \t is possible.  */\n \n-      if (!target_has_execution || !inferior_has_bug (\"nptl_version\", 2, 7))\n+      if (!target_has_execution () || !inferior_has_bug (\"nptl_version\", 2, 7))\n \t{\n \t  exception_fprintf (gdb_stderr, except,\n \t\t\t     _(\"Warning: couldn't activate thread debugging \"\n@@ -658,7 +658,7 @@ check_thread_db_callback (const td_thrhandle_t *th, void *arg)\n   memset (&th2, 23, sizeof (td_thrhandle_t));\n   CALL_UNCHECKED (td_ta_map_lwp2thr, th->th_ta_p, ti.ti_lid, &th2);\n \n-  if (tdb_testinfo->last_result == TD_ERR && !target_has_execution)\n+  if (tdb_testinfo->last_result == TD_ERR && !target_has_execution ())\n     {\n       /* Some platforms require execution for td_ta_map_lwp2thr.  */\n       LOG (_(\"; can't map_lwp2thr\"));\n@@ -884,7 +884,7 @@ try_thread_db_load_1 (struct thread_db_info *info)\n \n      td_ta_map_lwp2thr uses ps_get_thread_area, but we can't use that\n      currently on core targets, as it uses ptrace directly.  */\n-  if (target_has_execution\n+  if (target_has_execution ()\n       && linux_proc_task_list_dir_exists (inferior_ptid.pid ()))\n     info->td_ta_thr_iter_p = NULL;\n   else\n@@ -1358,7 +1358,7 @@ record_thread (struct thread_db_info *info,\n   else\n     tp->priv.reset (priv);\n \n-  if (target_has_execution)\n+  if (target_has_execution ())\n     check_thread_signals ();\n \n   return tp;"
    },
    {
      "sha": "009b7a7331eebdce5fa27d002fad80277af0654c",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -33,7 +33,7 @@\n #include \"value.h\"\n #include \"symfile.h\"\n #include \"objfiles.h\"\n-#include \"target.h\"\t\t/* for target_has_execution */\n+#include \"target.h\"\n #include \"gdbcore.h\"\n #include \"gdbcmd.h\"\n #include \"frame.h\"\n@@ -112,7 +112,7 @@ lookup_objc_class (struct gdbarch *gdbarch, const char *classname)\n   struct type *char_type = builtin_type (gdbarch)->builtin_char;\n   struct value * function, *classval;\n \n-  if (! target_has_execution)\n+  if (! target_has_execution ())\n     {\n       /* Can't call into inferior to lookup class.  */\n       return 0;\n@@ -141,7 +141,7 @@ lookup_child_selector (struct gdbarch *gdbarch, const char *selname)\n   struct type *char_type = builtin_type (gdbarch)->builtin_char;\n   struct value * function, *selstring;\n \n-  if (! target_has_execution)\n+  if (! target_has_execution ())\n     {\n       /* Can't call into inferior to lookup selector.  */\n       return 0;\n@@ -172,7 +172,7 @@ value_nsstring (struct gdbarch *gdbarch, char *ptr, int len)\n   struct symbol *sym;\n   struct type *type;\n \n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     return 0;\t\t/* Can't call into inferior to create NSString.  */\n \n   stringValue[2] = value_string(ptr, len, char_type);"
    },
    {
      "sha": "678984baeb6a8bc68a3dfa1e2a6d3df21fbae2ac",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -390,7 +390,7 @@ record_btrace_target_open (const char *args, int from_tty)\n \n   record_preopen ();\n \n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     error (_(\"The program is not being run.\"));\n \n   for (thread_info *tp : current_inferior ()->non_exited_threads ())"
    },
    {
      "sha": "c0fedfc32e158fd4397111323001f66cefe3d657",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -947,7 +947,7 @@ record_full_open_1 (const char *name, int from_tty)\n     fprintf_unfiltered (gdb_stdlog, \"Process record: record_full_open_1\\n\");\n \n   /* check exec */\n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     error (_(\"Process record: the program is not being run.\"));\n   if (non_stop)\n     error (_(\"Process record target can't debug inferior in non-stop mode \""
    },
    {
      "sha": "1ef9b44f731e42b96e45f829d7ca0d13abad223b",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -4843,7 +4843,7 @@ remote_target::start_remote (int from_tty, int extended_p)\n     }\n \n   /* If we connected to a live target, do some additional setup.  */\n-  if (target_has_execution)\n+  if (target_has_execution ())\n     {\n       if (symfile_objfile) \t/* No use without a symbol-file.  */\n \tremote_check_symbols ();\n@@ -4946,7 +4946,7 @@ remote_target::remote_check_symbols ()\n      but our current inferior is not running, we should not invite the\n      remote target to request symbol lookups related to its\n      (unrelated) current process.  */\n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     return;\n \n   if (packet_support (PACKET_qSymbol) == PACKET_DISABLE)\n@@ -5544,7 +5544,7 @@ remote_target::open_1 (const char *name, int from_tty, int extended_p)\n   /* If we're connected to a running target, target_preopen will kill it.\n      Ask this question first, before target_preopen has a chance to kill\n      anything.  */\n-  if (curr_remote != NULL && !target_has_execution)\n+  if (curr_remote != NULL && !target_has_execution ())\n     {\n       if (from_tty\n \t  && !query (_(\"Already connected to a remote target.  Disconnect? \")))\n@@ -5727,7 +5727,7 @@ remote_target::remote_detach_1 (inferior *inf, int from_tty)\n   struct remote_state *rs = get_remote_state ();\n   int is_fork_parent;\n \n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     error (_(\"No process to detach from.\"));\n \n   target_announce_detach (from_tty);\n@@ -10718,7 +10718,8 @@ remote_target::verify_memory (const gdb_byte *data, CORE_ADDR lma, ULONGEST size\n \n   /* It doesn't make sense to use qCRC if the remote target is\n      connected but not running.  */\n-  if (target_has_execution && packet_support (PACKET_qCRC) != PACKET_DISABLE)\n+  if (target_has_execution ()\n+      && packet_support (PACKET_qCRC) != PACKET_DISABLE)\n     {\n       enum packet_result result;\n \n@@ -10980,7 +10981,7 @@ remote_target::xfer_partial (enum target_object object,\n       /* If the remote target is connected but not running, we should\n \t pass this request down to a lower stratum (e.g. the executable\n \t file).  */\n-      if (!target_has_execution)\n+      if (!target_has_execution ())\n \treturn TARGET_XFER_EOF;\n \n       if (writebuf != NULL)\n@@ -11720,7 +11721,7 @@ remote_target::read_description ()\n \n   /* Do not try this during initial connection, when we do not know\n      whether there is a running but stopped thread.  */\n-  if (!target_has_execution || inferior_ptid == null_ptid)\n+  if (!target_has_execution () || inferior_ptid == null_ptid)\n     return beneath ()->read_description ();\n \n   if (!data->guesses.empty ())\n@@ -13584,7 +13585,7 @@ remote_target::get_min_fast_tracepoint_insn_len ()\n \n   /* If we're not debugging a process yet, the IPA can't be\n      loaded.  */\n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     return 0;\n \n   /* Make sure the remote is pointing at the right process.  */"
    },
    {
      "sha": "c49e64b5a62330f50fb527cb55da556109b16519",
      "filename": "gdb/rs6000-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/rs6000-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/rs6000-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-nat.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -650,7 +650,7 @@ rs6000_nat_target::xfer_shared_libraries\n \n   /* This function assumes that it is being run with a live process.\n      Core files are handled via gdbarch.  */\n-  gdb_assert (target_has_execution);\n+  gdb_assert (target_has_execution ());\n \n   if (writebuf)\n     return TARGET_XFER_E_IO;"
    },
    {
      "sha": "72cba90a27ca986e59d7fdcd78a79ef12e0d66d6",
      "filename": "gdb/score-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/score-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/score-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/score-tdep.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -123,7 +123,7 @@ score7_fetch_inst (struct gdbarch *gdbarch, CORE_ADDR addr, gdb_byte *memblock)\n   int big;\n   int ret;\n \n-  if (target_has_execution && memblock != NULL)\n+  if (target_has_execution () && memblock != NULL)\n     {\n       /* Fetch instruction from local MEMBLOCK.  */\n       memcpy (buf, memblock, SCORE_INSTLEN);"
    },
    {
      "sha": "0f146725dba328e7ec7a3093e282a5648482b677",
      "filename": "gdb/solib-dsbt.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/solib-dsbt.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/solib-dsbt.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-dsbt.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -781,7 +781,7 @@ enable_break (void)\n   if (exec_bfd == NULL)\n     return 0;\n \n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     return 0;\n \n   info = get_dsbt_info ();"
    },
    {
      "sha": "4ae21d190bf29ff9cd08b556ed3256ec81bc9a5c",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -3014,7 +3014,7 @@ svr4_solib_create_inferior_hook (int from_tty)\n \n   /* No point setting a breakpoint in the dynamic linker if we can't\n      hit it (e.g., a core file, or a trace file).  */\n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     return;\n \n   if (!svr4_have_link_map_offsets ())"
    },
    {
      "sha": "cf5d05e83b2cd43a7bf8dcf68547cd54618f72f9",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -729,7 +729,7 @@ update_solib_list (int from_tty)\n \n   /* We can reach here due to changing solib-search-path or the\n      sysroot, before having any inferior.  */\n-  if (target_has_execution && inferior_ptid != null_ptid)\n+  if (target_has_execution () && inferior_ptid != null_ptid)\n     {\n       struct inferior *inf = current_inferior ();\n \n@@ -1351,7 +1351,7 @@ reload_shared_libraries (const char *ignored, int from_tty,\n      Absent this call, if we've just connected to a target and set \n      solib-absolute-prefix or solib-search-path, we'll lose all information\n      about ld.so.  */\n-  if (target_has_execution)\n+  if (target_has_execution ())\n     {\n       /* Reset or free private data structures not associated with\n \t so_list entries.  */"
    },
    {
      "sha": "a6e46570437c369c33a75f54e6da072922363100",
      "filename": "gdb/sparc64-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/sparc64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/sparc64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-tdep.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -448,7 +448,7 @@ static void\n adi_examine_command (const char *args, int from_tty)\n {\n   /* make sure program is active and adi is available */\n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     error (_(\"ADI command requires a live process/thread\"));\n \n   if (!adi_available ())\n@@ -484,7 +484,7 @@ adi_assign_command (const char *args, int from_tty)\n     = N_(\"Usage: adi assign|a[/COUNT] ADDR = VERSION\");\n \n   /* make sure program is active and adi is available */\n-  if (!target_has_execution)\n+  if (!target_has_execution ())\n     error (_(\"ADI command requires a live process/thread\"));\n \n   if (!adi_available ())"
    },
    {
      "sha": "dd78a848caec3fa316cc81d31cbfea0c676421a6",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -200,8 +200,11 @@ target_has_registers ()\n }\n \n bool\n-target_has_execution_1 (inferior *inf)\n+target_has_execution (inferior *inf)\n {\n+  if (inf == nullptr)\n+    inf = current_inferior ();\n+\n   for (target_ops *t = inf->top_target ();\n        t != nullptr;\n        t = inf->find_target_beneath (t))\n@@ -211,12 +214,6 @@ target_has_execution_1 (inferior *inf)\n   return false;\n }\n \n-int\n-target_has_execution_current (void)\n-{\n-  return target_has_execution_1 (current_inferior ());\n-}\n-\n /* This is used to implement the various target commands.  */\n \n static void\n@@ -1914,12 +1911,12 @@ target_preopen (int from_tty)\n   if (current_inferior ()->pid != 0)\n     {\n       if (!from_tty\n-\t  || !target_has_execution\n+\t  || !target_has_execution ()\n \t  || query (_(\"A program is being debugged already.  Kill it? \")))\n \t{\n \t  /* Core inferiors actually should be detached, not\n \t     killed.  */\n-\t  if (target_has_execution)\n+\t  if (target_has_execution ())\n \t    target_kill ();\n \t  else\n \t    target_detach (current_inferior (), 0);\n@@ -3932,7 +3929,7 @@ static void\n set_target_permissions (const char *args, int from_tty,\n \t\t\tstruct cmd_list_element *c)\n {\n-  if (target_has_execution)\n+  if (target_has_execution ())\n     {\n       update_target_permissions ();\n       error (_(\"Cannot change this setting while the inferior is running.\"));"
    },
    {
      "sha": "20e7ae36ace776e5334075ba4475db371fe10395",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 3,
      "deletions": 9,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -1829,16 +1829,10 @@ extern int target_has_registers ();\n    whether or not the target is capable of execution, but there are\n    also targets which can be current while not executing.  In that\n    case this will become true after to_create_inferior or\n-   to_attach.  */\n+   to_attach.  INF is the inferior to use; nullptr means to use the\n+   current inferior.  */\n \n-extern bool target_has_execution_1 (inferior *inf);\n-\n-/* Like target_has_execution_1, but always passes\n-   current_inferior().  */\n-\n-extern int target_has_execution_current (void);\n-\n-#define target_has_execution target_has_execution_current ()\n+extern bool target_has_execution (inferior *inf = nullptr);\n \n /* Can the target support the debugger control of thread execution?\n    Can it lock the thread scheduler?  */"
    },
    {
      "sha": "c50fb4dc7d4c1772ebf330b6b379bc80c3ae3dee",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -1677,7 +1677,7 @@ kill_or_detach (inferior *inf, int from_tty)\n       switch_to_thread (thread);\n \n       /* Leave core files alone.  */\n-      if (target_has_execution)\n+      if (target_has_execution ())\n \t{\n \t  if (inf->attach_flag)\n \t    target_detach (inf, from_tty);"
    },
    {
      "sha": "4906b3b53bd6892331eded7e5d45f0241bb43bdc",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -155,7 +155,7 @@ find_function_in_inferior (const char *name, struct objfile **objf_p)\n \t}\n       else\n \t{\n-\t  if (!target_has_execution)\n+\t  if (!target_has_execution ())\n \t    error (_(\"evaluation of this expression \"\n \t\t     \"requires the target program to be active\"));\n \t  else\n@@ -182,7 +182,7 @@ value_allocate_space_in_inferior (int len)\n   val = call_function_by_hand (val, NULL, blocklen);\n   if (value_logical_not (val))\n     {\n-      if (!target_has_execution)\n+      if (!target_has_execution ())\n \terror (_(\"No memory available to program now: \"\n \t\t \"you need to start the target first\"));\n       else"
    },
    {
      "sha": "984f13941ce4796ebb3987dd7e20a6e515268656",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55f6301ac03f8865f486fa2fe8019bd5129f86e3/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=55f6301ac03f8865f486fa2fe8019bd5129f86e3",
      "patch": "@@ -902,7 +902,7 @@ windows_solib_create_inferior_hook (int from_tty)\n     }\n   CORE_ADDR tlb;\n   gdb_byte buf[8];\n-  if (target_has_execution\n+  if (target_has_execution ()\n       && target_get_tib_address (inferior_ptid, &tlb)\n       && !target_read_memory (tlb + peb_offset, buf, ptr_bytes))\n     {"
    }
  ]
}