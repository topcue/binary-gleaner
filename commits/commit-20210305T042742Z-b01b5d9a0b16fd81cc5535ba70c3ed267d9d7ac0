{
  "sha": "b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjAxYjVkOWEwYjE2ZmQ4MWNjNTUzNWJhNzBjM2VkMjY3ZDlkN2FjMA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-04T12:28:54Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-05T04:27:42Z"
    },
    "message": "Move x86_64 PE changes out of bfd_perform_relocation\n\nbfd_perform_relocation should not have special case target code.  This\npatch moves the code that was there for x86_64 PE linking to ELF\noutput into the x86_64 PE howto special function, correcting that\nfunction for linking to targets other than ELF too.  The fixes in\nbfd_perform_relocation were over-complicated due to needing to\ncompensate for things that had already gone wrong in coff_amd64_reloc.\nIn particular, an adjustment for pc-relative relocs was done in a way\nthat meant adjustment for things related to symbol offsets was lost.\nI think those two things are orthogonal, but who knows with COFF where\naddends and symbol values are found randomly in the section contents.\n\nNote that linking natively to an x86_64 PE output relocates by\ncoff_pe_amd64_relocate_section, which does not use arelent relocs or\nbfd_perform_relocation, but be aware of coff_amd64_rtype_to_howto\nhacking addends for relocations.  The adjustments for a particular\nrelocation type there and in coff_amd64_reloc ought to match after\ntaking into consideration CALC_ADDEND.  They don't.  For example,\nthe pc-relative adjustment for R_PCRWORD is 2 bytes in\ncoff_amd64_reloc and 4 bytes in coff_amd64_rtype_to_howto.\n\n\t* reloc.c (bfd_perform_relocation): Revert 2021-01-12 and\n\t2020-09-16 changes.\n\t* coff-x86_64.c (coff_amd64_reloc): Do more or less the same\n\tadjustments here instead.  Separate pc-relative adjustments\n\tfrom symbol related adjustments.  Tidy comments and formatting.",
    "tree": {
      "sha": "cd3d250769b4e3e0341c9d6a71b0a0a6aa7c4022",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cd3d250769b4e3e0341c9d6a71b0a0a6aa7c4022"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7a39bd53dcc1753d69d3c1216883e59dce366176",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a39bd53dcc1753d69d3c1216883e59dce366176",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7a39bd53dcc1753d69d3c1216883e59dce366176"
    }
  ],
  "stats": {
    "total": 66,
    "additions": 25,
    "deletions": 41
  },
  "files": [
    {
      "sha": "bc1a530a9dbcf0fbfb9abf1c72f1b3589b568fff",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0",
      "patch": "@@ -1,3 +1,11 @@\n+2021-03-05  Alan Modra  <amodra@gmail.com>\n+\n+\t* reloc.c (bfd_perform_relocation): Revert 2021-01-12 and\n+\t2020-09-16 changes.\n+\t* coff-x86_64.c (coff_amd64_reloc): Do more or less the same\n+\tadjustments here instead.  Separate pc-relative adjustments\n+\tfrom symbol related adjustments.  Tidy comments and formatting.\n+\n 2021-03-04  Jan Beulich  <jbeulich@suse.com>\n \n \t* coffcode.h (sec_to_styp_flags): Don't set IMAGE_SCN_LNK_* in"
    },
    {
      "sha": "5b09023f3c229c497a2828db44d937955dbeb14a",
      "filename": "bfd/coff-x86_64.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0/bfd/coff-x86_64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0/bfd/coff-x86_64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-x86_64.c?ref=b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0",
      "patch": "@@ -75,14 +75,14 @@ coff_amd64_reloc (bfd *abfd,\n {\n   symvalue diff;\n \n-#if !defined(COFF_WITH_PE)\n+#if !defined (COFF_WITH_PE)\n   if (output_bfd == NULL)\n     return bfd_reloc_continue;\n #endif\n \n   if (bfd_is_com_section (symbol->section))\n     {\n-#if !defined(COFF_WITH_PE)\n+#if !defined (COFF_WITH_PE)\n       /* We are relocating a common symbol.  The current value in the\n \t object file is ORIG + OFFSET, where ORIG is the value of the\n \t common symbol as seen by the object file when it was compiled\n@@ -106,21 +106,10 @@ coff_amd64_reloc (bfd *abfd,\n \t ignores the addend for a COFF target when producing\n \t relocatable output.  This seems to be always wrong for 386\n \t COFF, so we handle the addend here instead.  */\n-#if defined(COFF_WITH_PE)\n+#if defined (COFF_WITH_PE)\n       if (output_bfd == NULL)\n \t{\n-\t  reloc_howto_type *howto = reloc_entry->howto;\n-\n-\t  /* Although PC relative relocations are very similar between\n-\t     PE and non-PE formats, but they are off by 1 << howto->size\n-\t     bytes. For the external relocation, PE is very different\n-\t     from others. See md_apply_fix3 () in gas/config/tc-amd64.c.\n-\t     When we link PE and non-PE object files together to\n-\t     generate a non-PE executable, we have to compensate it\n-\t     here.  */\n-\t  if(howto->pc_relative && howto->pcrel_offset)\n-\t    diff = -(1 << howto->size);\n-\t  else if(symbol->flags & BSF_WEAK)\n+\t  if (symbol->flags & BSF_WEAK)\n \t    diff = reloc_entry->addend - symbol->value;\n \t  else\n \t    diff = -reloc_entry->addend;\n@@ -130,7 +119,18 @@ coff_amd64_reloc (bfd *abfd,\n \tdiff = reloc_entry->addend;\n     }\n \n-#if defined(COFF_WITH_PE)\n+#if defined (COFF_WITH_PE)\n+  if (output_bfd == NULL)\n+    {\n+      /* PC relative relocations are off by their size.  */\n+      if (reloc_entry->howto->pc_relative)\n+\tdiff -= bfd_get_reloc_size (reloc_entry->howto);\n+\n+      if (reloc_entry->howto->type >= R_AMD64_PCRLONG_1\n+\t  && reloc_entry->howto->type <= R_AMD64_PCRLONG_5)\n+\tdiff -= reloc_entry->howto->type - R_AMD64_PCRLONG;\n+    }\n+\n   /* FIXME: How should this case be handled?  */\n   if (reloc_entry->howto->type == R_AMD64_IMAGEBASE\n       && output_bfd != NULL"
    },
    {
      "sha": "5ed7bb8e5960d3a8ee3c974a57ba928a41bb1d45",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 25,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=b01b5d9a0b16fd81cc5535ba70c3ed267d9d7ac0",
      "patch": "@@ -51,7 +51,7 @@ SECTION\n #include \"bfdlink.h\"\n #include \"libbfd.h\"\n #include \"bfdver.h\"\n-#include \"coff/x86_64.h\"\n+\n /*\n DOCDD\n INODE\n@@ -905,30 +905,6 @@ space consuming.  For each target:\n \t    }\n \t}\n     }\n-  else if (abfd->xvec->flavour == bfd_target_coff_flavour\n-\t   && (input_section->output_section->owner->xvec->flavour\n-\t       == bfd_target_elf_flavour)\n-\t   && strcmp (abfd->xvec->name, \"pe-x86-64\") == 0\n-\t   && strcmp (input_section->output_section->owner->xvec->name,\n-\t\t      \"elf64-x86-64\") == 0)\n-    {\n-      /* NB: bfd_perform_relocation isn't called to generate PE binary.\n-\t _bfd_relocate_contents is called instead.  When linking PE\n-\t object files to generate ELF output, _bfd_relocate_contents\n-\t isn't called and bfd_perform_relocation is used.  We need to\n-\t adjust relocation here.  */\n-      relocation -= reloc_entry->addend;\n-      if (howto->type >= R_AMD64_PCRLONG_1\n-\t  && howto->type <= R_AMD64_PCRLONG_5)\n-\trelocation -= (bfd_vma)(howto->type - R_AMD64_PCRLONG);\n-      else if (howto->type == R_AMD64_DIR64\n-\t       || howto->type == R_AMD64_DIR32)\n-\t{\n-\t  bfd_vma val = read_reloc (abfd, (bfd_byte *) data + octets,\n-\t\t\t\t    howto);\n-\t  relocation -= val & howto->src_mask;\n-\t}\n-    }\n \n   /* FIXME: This overflow checking is incomplete, because the value\n      might have overflowed before we get here.  For a correct check we"
    }
  ]
}