{
  "sha": "d20eb46617fc6170e144f80dcbaffbc3f4ff6090",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDIwZWI0NjYxN2ZjNjE3MGUxNDRmODBkY2JhZmZiYzNmNGZmNjA5MA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-04-13T23:53:12Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-04-14T00:07:41Z"
    },
    "message": "Re: PR27723, Internal error in select_cie_for_fde\n\nLet's make sure what we allow in the CIE initial instructions and what\nselect_cie_for_fde compares for a match is always in sync.  Also\ncorrect the previous patch that allowed DW_CFA_GNU_window_save to be\npart of the CIE initial instructions, which was likely a mistake.\n\n\tPR 27723\n\t* dw2gencfi.c (initial_cie_insn): New function, extracted from..\n\t(select_cie_for_fde): ..here.  Simplify.",
    "tree": {
      "sha": "42547a6eaa39f4ddfb90bbd2b84a80ada9e36537",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/42547a6eaa39f4ddfb90bbd2b84a80ada9e36537"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d20eb46617fc6170e144f80dcbaffbc3f4ff6090",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d20eb46617fc6170e144f80dcbaffbc3f4ff6090",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d20eb46617fc6170e144f80dcbaffbc3f4ff6090",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d20eb46617fc6170e144f80dcbaffbc3f4ff6090/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c48a248e3358ea11e9d1946c50b4bd548cccf939",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c48a248e3358ea11e9d1946c50b4bd548cccf939",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c48a248e3358ea11e9d1946c50b4bd548cccf939"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 67,
    "deletions": 68
  },
  "files": [
    {
      "sha": "10127ccb03b331c103fb6f3280f86431d5ccffba",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d20eb46617fc6170e144f80dcbaffbc3f4ff6090/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d20eb46617fc6170e144f80dcbaffbc3f4ff6090/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=d20eb46617fc6170e144f80dcbaffbc3f4ff6090",
      "patch": "@@ -1,3 +1,9 @@\n+2021-04-14  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 27723\n+\t* dw2gencfi.c (initial_cie_insn): New function, extracted from..\n+\t(select_cie_for_fde): ..here.  Simplify.\n+\n 2021-04-14  Alan Modra  <amodra@gmail.com>\n \n \tPR 27723"
    },
    {
      "sha": "c06561460326fbe39cfcc3087dd90e17c33031ad",
      "filename": "gas/dw2gencfi.c",
      "status": "modified",
      "additions": 61,
      "deletions": 68,
      "changes": 129,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d20eb46617fc6170e144f80dcbaffbc3f4ff6090/gas/dw2gencfi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d20eb46617fc6170e144f80dcbaffbc3f4ff6090/gas/dw2gencfi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/dw2gencfi.c?ref=d20eb46617fc6170e144f80dcbaffbc3f4ff6090",
      "patch": "@@ -2043,6 +2043,63 @@ output_fde (struct fde_entry *fde, struct cie_entry *cie,\n   symbol_set_value_now (end_address);\n }\n \n+/* Allow these insns to be put in the initial sequence of a CIE.\n+   If J is non-NULL, then compare I and J insns for a match.  */\n+\n+static inline bool\n+initial_cie_insn (const struct cfi_insn_data *i, const struct cfi_insn_data *j)\n+{\n+  if (j && i->insn != j->insn)\n+    return false;\n+  switch (i->insn)\n+    {\n+    case DW_CFA_offset:\n+    case DW_CFA_def_cfa:\n+    case DW_CFA_val_offset:\n+      if (j)\n+\t{\n+\t  if (i->u.ri.reg != j->u.ri.reg)\n+\t    return false;\n+\t  if (i->u.ri.offset != j->u.ri.offset)\n+\t    return false;\n+\t}\n+      break;\n+\n+    case DW_CFA_register:\n+      if (j)\n+\t{\n+\t  if (i->u.rr.reg1 != j->u.rr.reg1)\n+\t    return false;\n+\t  if (i->u.rr.reg2 != j->u.rr.reg2)\n+\t    return false;\n+\t}\n+      break;\n+\n+    case DW_CFA_def_cfa_register:\n+    case DW_CFA_restore:\n+    case DW_CFA_undefined:\n+    case DW_CFA_same_value:\n+      if (j)\n+\t{\n+\t  if (i->u.r != j->u.r)\n+\t    return false;\n+\t}\n+      break;\n+\n+    case DW_CFA_def_cfa_offset:\n+      if (j)\n+\t{\n+\t  if (i->u.i != j->u.i)\n+\t    return false;\n+\t}\n+      break;\n+\n+    default:\n+      return false;\n+    }\n+  return true;\n+}\n+\n static struct cie_entry *\n select_cie_for_fde (struct fde_entry *fde, bool eh_frame,\n \t\t    struct cfi_insn_data **pfirst, int align)\n@@ -2088,75 +2145,15 @@ select_cie_for_fde (struct fde_entry *fde, bool eh_frame,\n \t   i != cie->last && j != NULL;\n \t   i = i->next, j = j->next)\n \t{\n-\t  if (i->insn != j->insn)\n-\t    goto fail;\n-\t  switch (i->insn)\n-\t    {\n-\t    case DW_CFA_advance_loc:\n-\t    case DW_CFA_remember_state:\n-\t      /* We reached the first advance/remember in the FDE,\n-\t\t but did not reach the end of the CIE list.  */\n-\t      goto fail;\n-\n-\t    case DW_CFA_offset:\n-\t    case DW_CFA_def_cfa:\n-\t    case DW_CFA_val_offset:\n-\t      if (i->u.ri.reg != j->u.ri.reg)\n-\t\tgoto fail;\n-\t      if (i->u.ri.offset != j->u.ri.offset)\n-\t\tgoto fail;\n-\t      break;\n-\n-\t    case DW_CFA_register:\n-\t      if (i->u.rr.reg1 != j->u.rr.reg1)\n-\t\tgoto fail;\n-\t      if (i->u.rr.reg2 != j->u.rr.reg2)\n-\t\tgoto fail;\n-\t      break;\n-\n-\t    case DW_CFA_def_cfa_register:\n-\t    case DW_CFA_restore:\n-\t    case DW_CFA_undefined:\n-\t    case DW_CFA_same_value:\n-\t      if (i->u.r != j->u.r)\n-\t\tgoto fail;\n-\t      break;\n-\n-\t    case DW_CFA_def_cfa_offset:\n-\t      if (i->u.i != j->u.i)\n-\t\tgoto fail;\n-\t      break;\n-\n-\t    case CFI_escape:\n-\t    case CFI_val_encoded_addr:\n-\t    case CFI_label:\n-\t    case DW_CFA_restore_state:\n-\t    case DW_CFA_GNU_window_save:\n-\t      /* Don't bother matching these for now.  */\n-\t      goto fail;\n-\n-\t    default:\n-\t      abort ();\n-\t    }\n+\t  if (!initial_cie_insn (i, j))\n+\t    break;\n \t}\n \n-      /* Success if we reached the end of the CIE list, and we've either\n-\t run out of FDE entries or we've encountered an advance,\n-\t remember, or escape.  */\n-      if (i == cie->last\n-\t  && (!j\n-\t      || j->insn == DW_CFA_advance_loc\n-\t      || j->insn == DW_CFA_remember_state\n-\t      || j->insn == DW_CFA_GNU_window_save\n-\t      || j->insn == CFI_escape\n-\t      || j->insn == CFI_val_encoded_addr\n-\t      || j->insn == CFI_label))\n+      if (i == cie->last)\n \t{\n \t  *pfirst = j;\n \t  return cie;\n \t}\n-\n-    fail:;\n     }\n \n   cie = XNEW (struct cie_entry);\n@@ -2174,11 +2171,7 @@ select_cie_for_fde (struct fde_entry *fde, bool eh_frame,\n #endif\n \n   for (i = cie->first; i ; i = i->next)\n-    if (i->insn == DW_CFA_advance_loc\n-\t|| i->insn == DW_CFA_remember_state\n-\t|| i->insn == CFI_escape\n-\t|| i->insn == CFI_val_encoded_addr\n-\t|| i->insn == CFI_label)\n+    if (!initial_cie_insn (i, NULL))\n       break;\n \n   cie->last = i;"
    }
  ]
}