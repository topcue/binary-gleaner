{
  "sha": "83cf0d04dcdc9a4e7f105a517390e4c1af444340",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODNjZjBkMDRkY2RjOWE0ZTdmMTA1YTUxNzM5MGU0YzFhZjQ0NDM0MA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-28T07:04:34Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-28T22:20:40Z"
    },
    "message": "PR24891, objdump memory leaks when parsing malformed archive\n\nBFD was leaking memory in bfd_check_format_matches.  As part of\ndeciding the proper format of an archive, BFD looks at the format of\nthe first file stored.  That file's bfd was left open for reasons\ngiven in a comment removed in git commit 0e71e4955cd1 that said:\n             /* We ought to close `first' here, but we can't, because\n                we have no way to remove it from the archive cache.\n                It's close to impossible to figure out when we can\n                release bfd_ardata.  FIXME.  */\nWell, things have changed since that comment was true and we now can\nremove files from the archive cache.  Closing the first file is good\nand cures some of the leaks.  Other leaks are caused by\nbfd_check_format_matches throwing away bfd tdata before trying a new\nmatch.  That lost the element cache set up when format checking the\nfirst element in the archive.  The easiest and cleanest fix is to\nsimply disable the caching when checking the first element.\n\n\tPR 24891\n\t* bfd.c (struct bfd): Add no_element_cache.\n\t* archive.c (_bfd_get_elt_at_filepos): Don't add element to\n\tarchive cache when no_element_cache.\n\t(bfd_generic_archive_p): Set no_element_cache when opening first\n\telement to check format.  Close first element too.\n\t(do_slurp_bsd_armap): Don't zero ardata->cache here.\n\t* bfd-in2.h: Regenerate.",
    "tree": {
      "sha": "2dbbfe642b2a4a93041cd660ffe00e3703781d55",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2dbbfe642b2a4a93041cd660ffe00e3703781d55"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/83cf0d04dcdc9a4e7f105a517390e4c1af444340",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/83cf0d04dcdc9a4e7f105a517390e4c1af444340",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/83cf0d04dcdc9a4e7f105a517390e4c1af444340",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/83cf0d04dcdc9a4e7f105a517390e4c1af444340/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "48352473b1d2c213749a324f392cf8ec53d273a6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48352473b1d2c213749a324f392cf8ec53d273a6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/48352473b1d2c213749a324f392cf8ec53d273a6"
    }
  ],
  "stats": {
    "total": 27,
    "additions": 24,
    "deletions": 3
  },
  "files": [
    {
      "sha": "fe7f8eee6a88ff58eca32dc9b0a3302387f91058",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83cf0d04dcdc9a4e7f105a517390e4c1af444340/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83cf0d04dcdc9a4e7f105a517390e4c1af444340/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=83cf0d04dcdc9a4e7f105a517390e4c1af444340",
      "patch": "@@ -1,3 +1,14 @@\n+2019-08-29  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24891\n+\t* bfd.c (struct bfd): Add no_element_cache.\n+\t* archive.c (_bfd_get_elt_at_filepos): Don't add element to\n+\tarchive cache when no_element_cache.\n+\t(bfd_generic_archive_p): Set no_element_cache when opening first\n+\telement to check format.  Close first element too.\n+\t(do_slurp_bsd_armap): Don't zero ardata->cache here.\n+\t* bfd-in2.h: Regenerate.\n+\n 2019-08-24  Alan Modra  <amodra@gmail.com>\n \n \t* elf64-ppc.c (ppc64_elf_edit_toc): Exclude undefined weak"
    },
    {
      "sha": "3baf83d40ca18689283b4132468d72c1835aa7f4",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83cf0d04dcdc9a4e7f105a517390e4c1af444340/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83cf0d04dcdc9a4e7f105a517390e4c1af444340/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=83cf0d04dcdc9a4e7f105a517390e4c1af444340",
      "patch": "@@ -734,7 +734,8 @@ _bfd_get_elt_at_filepos (bfd *archive, file_ptr filepos)\n   /* Copy is_linker_input.  */\n   n_bfd->is_linker_input = archive->is_linker_input;\n \n-  if (_bfd_add_bfd_to_archive_cache (archive, filepos, n_bfd))\n+  if (archive->no_element_cache\n+      || _bfd_add_bfd_to_archive_cache (archive, filepos, n_bfd))\n     return n_bfd;\n \n   free (new_areldata);\n@@ -885,6 +886,7 @@ bfd_generic_archive_p (bfd *abfd)\n   if (abfd->target_defaulted && bfd_has_map (abfd))\n     {\n       bfd *first;\n+      unsigned int save;\n \n       /* This archive has a map, so we may presume that the contents\n \t are object files.  Make sure that if the first file in the\n@@ -897,14 +899,17 @@ bfd_generic_archive_p (bfd *abfd)\n \t normal archive, regardless of the format of the object files.\n \t We do accept an empty archive.  */\n \n+      save = abfd->no_element_cache;\n+      abfd->no_element_cache = 1;\n       first = bfd_openr_next_archived_file (abfd, NULL);\n+      abfd->no_element_cache = save;\n       if (first != NULL)\n \t{\n \t  first->target_defaulted = FALSE;\n \t  if (bfd_check_format (first, bfd_object)\n \t      && first->xvec != abfd->xvec)\n \t    bfd_set_error (bfd_error_wrong_object_format);\n-\t  /* And we ought to close `first' here too.  */\n+\t  bfd_close (first);\n \t}\n     }\n \n@@ -974,7 +979,6 @@ do_slurp_bsd_armap (bfd *abfd)\n       goto byebye;\n     }\n \n-  ardata->cache = 0;\n   rbase = raw_armap + BSD_SYMDEF_COUNT_SIZE;\n   stringbase = ((char *) rbase\n \t\t+ ardata->symdef_count * BSD_SYMDEF_SIZE"
    },
    {
      "sha": "63b4792818ce9c9ee0b17607df1ec60e06aa22a7",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83cf0d04dcdc9a4e7f105a517390e4c1af444340/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83cf0d04dcdc9a4e7f105a517390e4c1af444340/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=83cf0d04dcdc9a4e7f105a517390e4c1af444340",
      "patch": "@@ -7180,6 +7180,9 @@ struct bfd\n   /* Set if this is a thin archive.  */\n   unsigned int is_thin_archive : 1;\n \n+  /* Set if this archive should not cache element positions.  */\n+  unsigned int no_element_cache : 1;\n+\n   /* Set if only required symbols should be added in the link hash table for\n      this object.  Used by VMS linkers.  */\n   unsigned int selective_search : 1;"
    },
    {
      "sha": "f56a8d342fba07d3f8e992f06361c6f221dc0338",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83cf0d04dcdc9a4e7f105a517390e4c1af444340/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83cf0d04dcdc9a4e7f105a517390e4c1af444340/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=83cf0d04dcdc9a4e7f105a517390e4c1af444340",
      "patch": "@@ -220,6 +220,9 @@ CODE_FRAGMENT\n .  {* Set if this is a thin archive.  *}\n .  unsigned int is_thin_archive : 1;\n .\n+.  {* Set if this archive should not cache element positions.  *}\n+.  unsigned int no_element_cache : 1;\n+.\n .  {* Set if only required symbols should be added in the link hash table for\n .     this object.  Used by VMS linkers.  *}\n .  unsigned int selective_search : 1;"
    }
  ]
}