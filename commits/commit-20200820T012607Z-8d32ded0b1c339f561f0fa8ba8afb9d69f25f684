{
  "sha": "8d32ded0b1c339f561f0fa8ba8afb9d69f25f684",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGQzMmRlZDBiMWMzMzlmNTYxZjBmYThiYThhZmI5ZDY5ZjI1ZjY4NA==",
  "commit": {
    "author": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2020-08-18T08:49:16Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-20T01:26:07Z"
    },
    "message": "Add new string hash table based on htab_t.\n\n\t* hash.h (struct string_tuple): New.\n\t(hash_string_tuple): Likewise.\n\t(eq_string_tuple): Likewise.\n\t(string_tuple_alloc): Likewise.\n\t(str_hash_find): Likewise.\n\t(str_hash_find_n): Likewise.\n\t(str_hash_delete): Likewise.\n\t(str_hash_insert): Likewise.\n\t(str_htab_create): Likewise.",
    "tree": {
      "sha": "0563d1a1f73132d5a18955d1f59b3e3e93b94836",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0563d1a1f73132d5a18955d1f59b3e3e93b94836"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8d32ded0b1c339f561f0fa8ba8afb9d69f25f684",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d32ded0b1c339f561f0fa8ba8afb9d69f25f684",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8d32ded0b1c339f561f0fa8ba8afb9d69f25f684",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d32ded0b1c339f561f0fa8ba8afb9d69f25f684/comments",
  "author": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d3b740ca99953440d0868b6741d7ea1c7cc03300",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3b740ca99953440d0868b6741d7ea1c7cc03300",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d3b740ca99953440d0868b6741d7ea1c7cc03300"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 91,
    "deletions": 0
  },
  "files": [
    {
      "sha": "78d34e1572f8cc05178cf80d3433b4f10d63ed03",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d32ded0b1c339f561f0fa8ba8afb9d69f25f684/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d32ded0b1c339f561f0fa8ba8afb9d69f25f684/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=8d32ded0b1c339f561f0fa8ba8afb9d69f25f684",
      "patch": "@@ -1,3 +1,15 @@\n+2020-08-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* hash.h (struct string_tuple): New.\n+\t(hash_string_tuple): Likewise.\n+\t(eq_string_tuple): Likewise.\n+\t(string_tuple_alloc): Likewise.\n+\t(str_hash_find): Likewise.\n+\t(str_hash_find_n): Likewise.\n+\t(str_hash_delete): Likewise.\n+\t(str_hash_insert): Likewise.\n+\t(str_htab_create): Likewise.\n+\n 2020-08-20  Martin Liska  <mliska@suse.cz>\n \n \t* symbols.c (struct symbol_entry): New."
    },
    {
      "sha": "3bdd322092351b6930b2c098c1479312353c1c40",
      "filename": "gas/hash.h",
      "status": "modified",
      "additions": 79,
      "deletions": 0,
      "changes": 79,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d32ded0b1c339f561f0fa8ba8afb9d69f25f684/gas/hash.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d32ded0b1c339f561f0fa8ba8afb9d69f25f684/gas/hash.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/hash.h?ref=8d32ded0b1c339f561f0fa8ba8afb9d69f25f684",
      "patch": "@@ -93,4 +93,83 @@ extern void htab_insert (htab_t, void *);\n \n extern void htab_print_statistics (FILE *f, const char *name, htab_t table);\n \n+/* String hash table functions.  */\n+\n+struct string_tuple\n+{\n+  const char *key;\n+  char *value;\n+};\n+\n+typedef struct string_tuple string_tuple_t;\n+\n+/* Hash function for a string_tuple.  */\n+\n+static hashval_t\n+hash_string_tuple (const void *e)\n+{\n+  string_tuple_t *tuple = (string_tuple_t *) e;\n+  return htab_hash_string (tuple->key);\n+}\n+\n+/* Equality function for a string_tuple.  */\n+\n+static int\n+eq_string_tuple (const void *a, const void *b)\n+{\n+  const string_tuple_t *ea = (const string_tuple_t *) a;\n+  const string_tuple_t *eb = (const string_tuple_t *) b;\n+\n+  return strcmp (ea->key, eb->key) == 0;\n+}\n+\n+static inline string_tuple_t *\n+string_tuple_alloc (const char *key, char *value)\n+{\n+  string_tuple_t *tuple = XNEW (string_tuple_t);\n+  tuple->key = key;\n+  tuple->value = value;\n+  return tuple;\n+}\n+\n+static inline void *\n+str_hash_find (htab_t table, const char *key)\n+{\n+  string_tuple_t needle = { key, NULL };\n+  string_tuple_t *tuple = htab_find (table, &needle);\n+  return tuple != NULL ? tuple->value : NULL;\n+}\n+\n+static inline void *\n+str_hash_find_n (htab_t table, const char *key, size_t n)\n+{\n+  char *tmp = XNEWVEC (char, n + 1);\n+  memcpy (tmp, key, n);\n+  tmp[n] = '\\0';\n+  string_tuple_t needle = { tmp, NULL };\n+  string_tuple_t *tuple = htab_find (table, &needle);\n+  free (tmp);\n+  return tuple != NULL ? tuple->value : NULL;\n+}\n+\n+static inline void\n+str_hash_delete (htab_t table, const char *key)\n+{\n+  string_tuple_t needle = { key, NULL };\n+  htab_remove_elt (table, &needle);\n+}\n+\n+static inline void\n+str_hash_insert (htab_t table, const char *key, void *value)\n+{\n+  htab_insert (table, string_tuple_alloc (key, value));\n+}\n+\n+static inline htab_t\n+str_htab_create (void)\n+{\n+  return htab_create_alloc (16, hash_string_tuple, eq_string_tuple,\n+\t\t\t    NULL, xcalloc, free);\n+}\n+\n #endif /* HASH_H */"
    }
  ]
}