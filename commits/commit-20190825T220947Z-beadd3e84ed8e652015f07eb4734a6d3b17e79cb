{
  "sha": "beadd3e84ed8e652015f07eb4734a6d3b17e79cb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmVhZGQzZTg0ZWQ4ZTY1MjAxNWYwN2ViNDczNGE2ZDNiMTdlNzljYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-08-25T22:09:47Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-08-25T22:09:47Z"
    },
    "message": "dwarf2read: replace gdb::optional<bool> with enum\n\ngdb::optional<bool> is dangerous, because it's easy to do:\n\n  if (opt_bool)\n\nwhen you actually meant\n\n  if (*opt_bool)\n\nor vice-versa.  The first checks if the optional is set, the second\nchecks if the wrapped bool is true.\n\nReplace it with an enum that explicitly defines the three possible\nstates.\n\ngdb/ChangeLog:\n\n\t* dwarf2read.c (dw2_debug_names_iterator::next): Use enum to\n\trepresent whether the symbol is static, dynamic, or we don't\n\tknow.",
    "tree": {
      "sha": "760d19a2058f7b19ef9d792d0bb44fd984110325",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/760d19a2058f7b19ef9d792d0bb44fd984110325"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/beadd3e84ed8e652015f07eb4734a6d3b17e79cb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/beadd3e84ed8e652015f07eb4734a6d3b17e79cb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/beadd3e84ed8e652015f07eb4734a6d3b17e79cb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/beadd3e84ed8e652015f07eb4734a6d3b17e79cb/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e3ec872f8012377e50f0c9c888d2bc3163a356b2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e3ec872f8012377e50f0c9c888d2bc3163a356b2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e3ec872f8012377e50f0c9c888d2bc3163a356b2"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 16,
    "deletions": 5
  },
  "files": [
    {
      "sha": "5f64ca6d4a94d3b47ddb99ee7a1ffd6e947a78e0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/beadd3e84ed8e652015f07eb4734a6d3b17e79cb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/beadd3e84ed8e652015f07eb4734a6d3b17e79cb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=beadd3e84ed8e652015f07eb4734a6d3b17e79cb",
      "patch": "@@ -1,3 +1,9 @@\n+2019-08-25  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2read.c (dw2_debug_names_iterator::next): Use enum to\n+\trepresent whether the symbol is static, dynamic, or we don't\n+\tknow.\n+\n 2019-08-25  Yoshinori Sato <ysato@users.sourceforge.jp>\n \n         * gdb/rx-tdep.c (rx_register_names): New."
    },
    {
      "sha": "a0b989fd0c2e5d508399eee4c808404638f3d3c2",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/beadd3e84ed8e652015f07eb4734a6d3b17e79cb/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/beadd3e84ed8e652015f07eb4734a6d3b17e79cb/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=beadd3e84ed8e652015f07eb4734a6d3b17e79cb",
      "patch": "@@ -5843,7 +5843,11 @@ dw2_debug_names_iterator::next ()\n       return NULL;\n     }\n   const mapped_debug_names::index_val &indexval = indexval_it->second;\n-  gdb::optional<bool> is_static;\n+  enum class symbol_linkage {\n+    unknown,\n+    static_,\n+    extern_,\n+  } symbol_linkage = symbol_linkage::unknown;\n   dwarf2_per_cu_data *per_cu = NULL;\n   for (const mapped_debug_names::index_val::attr &attr : indexval.attr_vec)\n     {\n@@ -5895,12 +5899,12 @@ dw2_debug_names_iterator::next ()\n \tcase DW_IDX_GNU_internal:\n \t  if (!m_map.augmentation_is_gdb)\n \t    break;\n-\t  is_static = true;\n+\t  symbol_linkage = symbol_linkage::static_;\n \t  break;\n \tcase DW_IDX_GNU_external:\n \t  if (!m_map.augmentation_is_gdb)\n \t    break;\n-\t  is_static = false;\n+\t  symbol_linkage = symbol_linkage::extern_;\n \t  break;\n \t}\n     }\n@@ -5910,10 +5914,11 @@ dw2_debug_names_iterator::next ()\n     goto again;\n \n   /* Check static vs global.  */\n-  if (is_static.has_value () && m_block_index.has_value ())\n+  if (symbol_linkage != symbol_linkage::unknown && m_block_index.has_value ())\n     {\n \tconst bool want_static = *m_block_index == STATIC_BLOCK;\n-\tif (want_static != *is_static)\n+\tconst bool symbol_is_static = symbol_linkage == symbol_linkage::static_;\n+\tif (want_static != symbol_is_static)\n \t  goto again;\n     }\n "
    }
  ]
}