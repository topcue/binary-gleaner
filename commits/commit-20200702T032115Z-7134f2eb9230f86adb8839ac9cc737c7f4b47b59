{
  "sha": "7134f2eb9230f86adb8839ac9cc737c7f4b47b59",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzEzNGYyZWI5MjMwZjg2YWRiODgzOWFjOWNjNzM3YzdmNGI0N2I1OQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-07-02T03:21:12Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-07-02T03:21:15Z"
    },
    "message": "Don't derive tui_data_item_window from tui_gen_win_info\n\nThere's no deep reason that tui_data_item_window should derive from\ntui_gen_win_info -- it currently uses a curses window to render, but\nthat isn't truly needed, and it adds some hacks to other parts of the\nTUI.\n\nThis patch changes tui_data_item_window so that it doesn't have a base\nclass, and updates the register window.  This simplifies the code and\nenables a subsequent cleanup.\n\ngdb/ChangeLog\n2020-07-01  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-regs.c (tui_data_window::display_registers_from)\n\t(tui_data_window::display_registers_from)\n\t(tui_data_window::first_data_item_displayed)\n\t(tui_data_window::delete_data_content_windows): Update.\n\t(tui_data_window::refresh_window, tui_data_window::no_refresh):\n\tRemove.\n\t(tui_data_window::check_register_values): Update.\n\t(tui_data_item_window::rerender): Add parameters.  Update.\n\t(tui_data_item_window::refresh_window): Remove.\n\t* tui/tui-data.h (struct tui_gen_win_info) <no_refresh>: No longer\n\tvirtual.\n\t* tui/tui-regs.h (struct tui_data_item_window): Don't derive from\n\ttui_gen_win_info.\n\t<refresh_window, max_height, min_height>: Remove.\n\t<rerender>: Add parameters.\n\t<x, y, visible>: New members.\n\t(struct tui_data_window) <refresh_window, no_refresh>: Remove.\n\t<m_item_width>: New member.",
    "tree": {
      "sha": "5beb2778dee4f284d05d5a6988b96e745031ecf2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5beb2778dee4f284d05d5a6988b96e745031ecf2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7134f2eb9230f86adb8839ac9cc737c7f4b47b59",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7134f2eb9230f86adb8839ac9cc737c7f4b47b59",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7134f2eb9230f86adb8839ac9cc737c7f4b47b59",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7134f2eb9230f86adb8839ac9cc737c7f4b47b59/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "22b7b0412bceb80ecd5de39a8e05742eb3cbb324",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22b7b0412bceb80ecd5de39a8e05742eb3cbb324",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/22b7b0412bceb80ecd5de39a8e05742eb3cbb324"
    }
  ],
  "stats": {
    "total": 129,
    "additions": 51,
    "deletions": 78
  },
  "files": [
    {
      "sha": "37484e402ff68e4faf9421b916285827315d7321",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7134f2eb9230f86adb8839ac9cc737c7f4b47b59/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7134f2eb9230f86adb8839ac9cc737c7f4b47b59/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7134f2eb9230f86adb8839ac9cc737c7f4b47b59",
      "patch": "@@ -1,3 +1,24 @@\n+2020-07-01  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-regs.c (tui_data_window::display_registers_from)\n+\t(tui_data_window::display_registers_from)\n+\t(tui_data_window::first_data_item_displayed)\n+\t(tui_data_window::delete_data_content_windows): Update.\n+\t(tui_data_window::refresh_window, tui_data_window::no_refresh):\n+\tRemove.\n+\t(tui_data_window::check_register_values): Update.\n+\t(tui_data_item_window::rerender): Add parameters.  Update.\n+\t(tui_data_item_window::refresh_window): Remove.\n+\t* tui/tui-data.h (struct tui_gen_win_info) <no_refresh>: No longer\n+\tvirtual.\n+\t* tui/tui-regs.h (struct tui_data_item_window): Don't derive from\n+\ttui_gen_win_info.\n+\t<refresh_window, max_height, min_height>: Remove.\n+\t<rerender>: Add parameters.\n+\t<x, y, visible>: New members.\n+\t(struct tui_data_window) <refresh_window, no_refresh>: Remove.\n+\t<m_item_width>: New member.\n+\n 2020-07-01  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-regs.c (tui_data_window::show_register_group)"
    },
    {
      "sha": "10dd0aedcff861c7539798164ed351489a619d37",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7134f2eb9230f86adb8839ac9cc737c7f4b47b59/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7134f2eb9230f86adb8839ac9cc737c7f4b47b59/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=7134f2eb9230f86adb8839ac9cc737c7f4b47b59",
      "patch": "@@ -102,7 +102,7 @@ struct tui_gen_win_info\n   }\n \n   /* Disable output until the next call to doupdate.  */\n-  virtual void no_refresh ()\n+  void no_refresh ()\n   {\n     if (handle != nullptr)\n       wnoutrefresh (handle.get ());"
    },
    {
      "sha": "04d7469de5ab2f18a8d0d39316d057db106c2203",
      "filename": "gdb/tui/tui-regs.c",
      "status": "modified",
      "additions": 20,
      "deletions": 59,
      "changes": 79,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7134f2eb9230f86adb8839ac9cc737c7f4b47b59/gdb/tui/tui-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7134f2eb9230f86adb8839ac9cc737c7f4b47b59/gdb/tui/tui-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.c?ref=7134f2eb9230f86adb8839ac9cc737c7f4b47b59",
      "patch": "@@ -272,8 +272,6 @@ tui_data_window::show_register_group (struct reggroup *group,\n void\n tui_data_window::display_registers_from (int start_element_no)\n {\n-  int j, item_win_width, cur_y;\n-\n   int max_len = 0;\n   for (auto &&data_item_win : m_regs_content)\n     {\n@@ -282,26 +280,28 @@ tui_data_window::display_registers_from (int start_element_no)\n       if (len > max_len)\n \tmax_len = len;\n     }\n-  item_win_width = max_len + 1;\n+  m_item_width = max_len + 1;\n   int i = start_element_no;\n \n-  m_regs_column_count = (width - 2) / item_win_width;\n+  m_regs_column_count = (width - 2) / m_item_width;\n   if (m_regs_column_count == 0)\n     m_regs_column_count = 1;\n-  item_win_width = (width - 2) / m_regs_column_count;\n+  m_item_width = (width - 2) / m_regs_column_count;\n \n   /* Now create each data \"sub\" window, and write the display into\n      it.  */\n-  cur_y = 1;\n+  int cur_y = 1;\n   while (i < m_regs_content.size () && cur_y <= height - 2)\n     {\n-      for (j = 0;\n+      for (int j = 0;\n \t   j < m_regs_column_count && i < m_regs_content.size ();\n \t   j++)\n \t{\n \t  /* Create the window if necessary.  */\n-\t  m_regs_content[i].resize (1, item_win_width,\n-\t\t\t\t    x + (item_win_width * j) + 1, y + cur_y);\n+\t  m_regs_content[i].x = (m_item_width * j) + 1;\n+\t  m_regs_content[i].y = cur_y;\n+\t  m_regs_content[i].visible = true;\n+\t  m_regs_content[i].rerender (handle.get (), m_item_width);\n \t  i++;\t\t/* Next register.  */\n \t}\n       cur_y++;\t\t/* Next row.  */\n@@ -372,10 +372,7 @@ tui_data_window::first_data_item_displayed ()\n {\n   for (int i = 0; i < m_regs_content.size (); i++)\n     {\n-      struct tui_gen_win_info *data_item_win;\n-\n-      data_item_win = &m_regs_content[i];\n-      if (data_item_win->is_visible ())\n+      if (m_regs_content[i].visible)\n \treturn i;\n     }\n \n@@ -387,8 +384,8 @@ tui_data_window::first_data_item_displayed ()\n void\n tui_data_window::delete_data_content_windows ()\n {\n-  for (auto &&win : m_regs_content)\n-    win.handle.reset (nullptr);\n+  for (auto &win : m_regs_content)\n+    win.visible = false;\n }\n \n \n@@ -451,24 +448,6 @@ tui_data_window::do_scroll_vertical (int num_to_scroll)\n     }\n }\n \n-/* See tui-regs.h.  */\n-\n-void\n-tui_data_window::refresh_window ()\n-{\n-  tui_gen_win_info::refresh_window ();\n-  for (auto &&win : m_regs_content)\n-    win.refresh_window ();\n-}\n-\n-void\n-tui_data_window::no_refresh ()\n-{\n-  tui_gen_win_info::no_refresh ();\n-  for (auto &&win : m_regs_content)\n-    win.no_refresh ();\n-}\n-\n /* This function check all displayed registers for changes in values,\n    given a particular frame.  If the values have changed, they are\n    updated with the new value and highlighted.  */\n@@ -490,54 +469,36 @@ tui_data_window::check_register_values (struct frame_info *frame)\n \t\t\t    &data_item_win.highlight);\n \n \t  if (data_item_win.highlight || was_hilighted)\n-\t    data_item_win.rerender ();\n+\t    data_item_win.rerender (handle.get (), m_item_width);\n \t}\n     }\n+\n+  tui_wrefresh (handle.get ());\n }\n \n /* Display a register in a window.  If hilite is TRUE, then the value\n    will be displayed in reverse video.  */\n void\n-tui_data_item_window::rerender ()\n+tui_data_item_window::rerender (WINDOW *handle, int field_width)\n {\n-  int i;\n-\n-  scrollok (handle.get (), FALSE);\n   if (highlight)\n     /* We ignore the return value, casting it to void in order to avoid\n        a compiler warning.  The warning itself was introduced by a patch\n        to ncurses 5.7 dated 2009-08-29, changing this macro to expand\n        to code that causes the compiler to generate an unused-value\n        warning.  */\n-    (void) wstandout (handle.get ());\n+    (void) wstandout (handle);\n       \n-  wmove (handle.get (), 0, 0);\n-  for (i = 1; i < width; i++)\n-    waddch (handle.get (), ' ');\n-  wmove (handle.get (), 0, 0);\n-  waddstr (handle.get (), content.c_str ());\n+  mvwaddnstr (handle, y, x, content.c_str (), field_width - 1);\n+  waddstr (handle, n_spaces (field_width - content.size ()));\n \n   if (highlight)\n     /* We ignore the return value, casting it to void in order to avoid\n        a compiler warning.  The warning itself was introduced by a patch\n        to ncurses 5.7 dated 2009-08-29, changing this macro to expand\n        to code that causes the compiler to generate an unused-value\n        warning.  */\n-    (void) wstandend (handle.get ());\n-  refresh_window ();\n-}\n-\n-void\n-tui_data_item_window::refresh_window ()\n-{\n-  if (handle != nullptr)\n-    {\n-      /* This seems to be needed because the data items are nested\n-\t windows, which according to the ncurses man pages aren't well\n-\t supported.  */\n-      touchwin (handle.get ());\n-      tui_wrefresh (handle.get ());\n-    }\n+    (void) wstandend (handle);\n }\n \n /* Helper for \"tui reg next\", wraps a call to REGGROUP_NEXT, but adds wrap"
    },
    {
      "sha": "29b54a53ef324d77c68fd0c267d500a546395804",
      "filename": "gdb/tui/tui-regs.h",
      "status": "modified",
      "additions": 9,
      "deletions": 18,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7134f2eb9230f86adb8839ac9cc737c7f4b47b59/gdb/tui/tui-regs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7134f2eb9230f86adb8839ac9cc737c7f4b47b59/gdb/tui/tui-regs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.h?ref=7134f2eb9230f86adb8839ac9cc737c7f4b47b59",
      "patch": "@@ -26,31 +26,23 @@\n \n /* A data item window.  */\n \n-struct tui_data_item_window : public tui_gen_win_info\n+struct tui_data_item_window\n {\n   tui_data_item_window () = default;\n \n   DISABLE_COPY_AND_ASSIGN (tui_data_item_window);\n \n   tui_data_item_window (tui_data_item_window &&) = default;\n \n-  void rerender () override;\n-\n-  void refresh_window () override;\n-\n-  int max_height () const override\n-  {\n-    return 1;\n-  }\n-\n-  int min_height () const override\n-  {\n-    return 1;\n-  }\n+  void rerender (WINDOW *handle, int field_width);\n \n+  /* Location.  */\n+  int x = 0;\n+  int y = 0;\n   /* The register number.  */\n   int regno = -1;\n   bool highlight = false;\n+  bool visible = false;\n   std::string content;\n };\n \n@@ -61,10 +53,6 @@ struct tui_data_window : public tui_win_info\n \n   DISABLE_COPY_AND_ASSIGN (tui_data_window);\n \n-  void refresh_window () override;\n-\n-  void no_refresh () override;\n-\n   const char *name () const override\n   {\n     return DATA_NAME;\n@@ -138,6 +126,9 @@ struct tui_data_window : public tui_win_info\n   std::vector<tui_data_item_window> m_regs_content;\n   int m_regs_column_count = 0;\n   struct reggroup *m_current_group = nullptr;\n+\n+  /* Width of each register's display area.  */\n+  int m_item_width = 0;\n };\n \n #endif /* TUI_TUI_REGS_H */"
    }
  ]
}