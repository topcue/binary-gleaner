{
  "sha": "462f72c552226823829e7d370572b7e0852d9c02",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDYyZjcyYzU1MjIyNjgyMzgyOWU3ZDM3MDU3MmI3ZTA4NTJkOWMwMg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-25T15:55:21Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-25T15:55:21Z"
    },
    "message": "gdb/testsuite: add simavr.exp board\n\nThis patch adds a board file for against a simavr target (so, for the\nAVR architecture).\n\nsimavr, when started with option -g, runs a GDB stub on port 1234.  In\nthe current latest release (1.6), the port is hardcoded to 1234.  But in\nmaster, there is the option to choose another port.  So while the board\nfile hardcodes the port today, in the future it should be possible to\nlet the user choose a port, or automatically select a free port.\n\nIt is easy enough to run, make sure you have avr-gcc/avr-g++ and simavr\ninstalled, and as usual just run:\n\n    make check RUNTESTFLAGS=\"--target_board=simavr\"\n\nThe following environment variables influence the behavior of the board\nfile:\n\n  - SIMAVR_MCU: type of chip to simulate\n  - SIMAVR_PATH: path to simavr binary (useful if you build your own\n    simavr or for some reason it is not simply called `simavr`.\n\nAs expected, there are a lot of failures.  Many tests use some features\nnot supported by such a target, and I suppose there are real GDB bugs\ntoo.  But a lot also passes (including tests that actually run stuff),\nso this board file should still help to validate changes to the AVR\narchitecture support.\n\nThese are the results I got of running tests gdb.base/*.exp:\n\n    # of expected passes            20926\n    # of unexpected failures        2257\n    # of expected failures          14\n    # of unknown successes          1\n    # of known failures             13\n    # of unresolved testcases       592\n    # of untested testcases         156\n    # of unsupported tests          30\n    # of paths in test names        3\n    # of duplicate test names       56\n\ngdb/testsuite/ChangeLog:\n\n\t* boards/simavr.exp: New file.\n\nChange-Id: Ib7fa8c4e2e90b08b104bb9b552df37779de3bc21",
    "tree": {
      "sha": "9e67e5fe8da6ed2c0ea310f5ea096fb3561e9f63",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9e67e5fe8da6ed2c0ea310f5ea096fb3561e9f63"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/462f72c552226823829e7d370572b7e0852d9c02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/462f72c552226823829e7d370572b7e0852d9c02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/462f72c552226823829e7d370572b7e0852d9c02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/462f72c552226823829e7d370572b7e0852d9c02/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6cf66e763aec5b2c3d99063d9cc6f7b96b4b9dc9"
    }
  ],
  "stats": {
    "total": 99,
    "additions": 99,
    "deletions": 0
  },
  "files": [
    {
      "sha": "4242b98702c9bcb4bfce3f6e78e89911e367ec26",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/462f72c552226823829e7d370572b7e0852d9c02/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/462f72c552226823829e7d370572b7e0852d9c02/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=462f72c552226823829e7d370572b7e0852d9c02",
      "patch": "@@ -1,3 +1,7 @@\n+2020-05-25  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* boards/simavr.exp: New file.\n+\n 2020-05-25  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* lib/gdb.exp (gdb_run_cmd): Return success or failure."
    },
    {
      "sha": "386febfbfd8d91a9f7eeab16bb339a866c89f4f9",
      "filename": "gdb/testsuite/boards/simavr.exp",
      "status": "added",
      "additions": 95,
      "deletions": 0,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/462f72c552226823829e7d370572b7e0852d9c02/gdb/testsuite/boards/simavr.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/462f72c552226823829e7d370572b7e0852d9c02/gdb/testsuite/boards/simavr.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/boards/simavr.exp?ref=462f72c552226823829e7d370572b7e0852d9c02",
      "patch": "@@ -0,0 +1,95 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Let the user override the path to the simavr binary with the SIMAVR_PATH\n+# environment variable.\n+\n+if { [info exists ::env(SIMAVR_PATH)] } {\n+    set simavr_path $::env(SIMAVR_PATH)\n+} else {\n+    set simavr_path simavr\n+}\n+\n+# Let the user override the simulated AVR chip with the SIMAVR_PATH environment\n+# variable.\n+#\n+# The value passed here must be supported by avr-gcc (see the -mmcu flag in the\n+# `AVR Options` section of the gcc(1) man page) and by simavr (see output of\n+# `simavr --list-cores`).\n+\n+if { [info exists ::env(SIMAVR_MCU)] } {\n+    set simavr_mcu $::env(SIMAVR_MCU)\n+} else {\n+    set simavr_mcu atmega2560\n+}\n+\n+set simavr_last_load_file \"\"\n+set simavr_spawn_id \"\"\n+\n+set_board_info compiler avr-gcc\n+set_board_info c++compiler avr-g++\n+\n+set_board_info cflags \"-mmcu=${simavr_mcu}\"\n+set_board_info ldflags \"-mmcu=${simavr_mcu}\"\n+\n+set_board_info use_gdb_stub 1\n+set_board_info gdb_protocol \"remote\"\n+set_board_info gdb,do_reload_on_run 1\n+set_board_info noargs 1\n+set_board_info gdb,noinferiorio 1\n+set_board_info gdb,nofileio 1\n+set_board_info gdb,noresults 1\n+set_board_info gdb,nosignals 1\n+\n+proc gdb_load { file } {\n+    global simavr_last_load_file\n+    global simavr_spawn_id\n+    global simavr_mcu\n+    global simavr_path\n+    global gdb_prompt\n+\n+    if { $file == \"\" } {\n+\tset file $simavr_last_load_file\n+    } else {\n+\tset simavr_last_load_file $file\n+    }\n+\n+    gdb_file_cmd $file\n+\n+    # Close any previous simavr instance.\n+    if { $simavr_spawn_id != \"\" } {\n+\tclose -i $simavr_spawn_id\n+\tset simavr_spawn_id \"\"\n+    }\n+\n+    # Run simavr.\n+    set cmd \"spawn -noecho ${simavr_path} --mcu ${simavr_mcu} -g $file\"\n+    verbose -log \"Spawning simavr: $cmd\"\n+    eval $cmd\n+    set simavr_spawn_id $spawn_id\n+    gdb_expect {\n+\t-i $simavr_spawn_id -re \".*avr_gdb_init listening on port 1234\" {}\n+\ttimeout { error \"unable to start simavr\" }\n+    }\n+\n+    # Connect to simavr.\n+    send_gdb \"target remote :1234\\n\"\n+    gdb_expect {\n+\t-re \".*Remote debugging using :1234.*\\[\\r\\n\\]+$gdb_prompt $\" {}\n+\ttimeout { error \"unable to connect to simavr stub\" }\n+    }\n+\n+    return 0\n+}"
    }
  ]
}