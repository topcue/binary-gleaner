{
  "sha": "abf874aafe3d717573e4a48bf0e3c6334e666a55",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWJmODc0YWFmZTNkNzE3NTczZTRhNDhiZjBlM2M2MzM0ZTY2NmE1NQ==",
  "commit": {
    "author": {
      "name": "Christophe Lyon",
      "email": "christophe.lyon@linaro.org",
      "date": "2019-11-25T08:55:37Z"
    },
    "committer": {
      "name": "Christophe Lyon",
      "email": "christophe.lyon@linaro.org",
      "date": "2020-03-13T14:44:45Z"
    },
    "message": "Add support for non-contiguous memory regions\n\n2020-01-06  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tbfd/\n\t* bfd-in2.h: Regenerate.\n\t* section.c (asection): Add already_assigned field.\n\t(BFD_FAKE_SECTION): Add default initializer for it.\n\t* ecoff.c (bfd_debug_section): Initialize already_assigned field.\n\t* elf32-arm.c (arm_build_one_stub): Add support for\n\tnon_contiguous_regions.\n\t* elf32-csky.c (csky_build_one_stub): Likewise.\n\t* elf32-hppa.c (hppa_build_one_stub): Likewise.\n\t* elf32-m68hc11.c (m68hc11_elf_build_one_stub): Likewise.\n\t* elf32-m68hc12.c (m68hc12_elf_build_one_stub): Likewise.\n\t* elf32-metag.c (metag_build_one_stub): Likewise.\n\t* elf32-nios2.c (nios2_build_one_stub): Likewise.\n\t* elf64-ppc.c (ppc_build_one_stub): Likewise.\n\t(ppc_size_one_stub): Likewise.\n\t* elfnn-aarch64.c (aarch64_build_one_stub): Likewise.\n\t* elflink.c (elf_link_input_bfd): Likewise.\n\n\tinclude/\n\t* bfdlink.h (bfd_link_info): Add non_contiguous_regions and\n\tnon_contiguous_regions_warnings fields.\n\n\tld/\n\t* ldlang.c (lang_add_section): Add support for\n\tnon_contiguous_regions.\n\t(size_input_section): Likewise.\n\t(lang_size_sections_1): Likewise.\n\t(process_insert_statements): Likewise.\n\t* ldlex.h (option_values): Add OPTION_NON_CONTIGUOUS_REGIONS and\n\tOPTION_NON_CONTIGUOUS_REGIONS_WARNINGS.\n\t* lexsup.c (ld_options): Add entries for\n\t--enable-non-contiguous-regions and\n\t--enable-non-contiguous-regions-warnings.\n\t(parse_args): Handle it.\n\t* NEWS: Add --enable-non-contiguous-regions and\n\t--enable-non-contiguous-regions-warnings.\n\t* ld.texi: Add --enable-non-contiguous-regions and\n\t--enable-non-contiguous-regions-warnings documentation.\n\t* emultempl/armelf.em (elf32_arm_add_stub_section): Add\n\tSEC_LINKER_CREATED flag.\n\t* emultempl/xtensaelf.em (ld_build_required_section_dependence):\n\tEmit an error when --enable-non-contiguous-regions is used.\n\t* testsuite/ld-elf/non-contiguous.d: New.\n\t* testsuite/ld-elf/non-contiguous.ld: New.\n\t* testsuite/ld-elf/non-contiguous.s: New.\n\t* testsuite/ld-arm/arm-elf.exp: Run the new tests.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm.s: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm.d: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm.ld: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm2.d: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm3.ld: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm3.d: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm3.ld: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm4.d: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm4.ld: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm5.d: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm5.ld: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm6.d: New.\n\t* testsuite/ld-arm/arm-elf/non-contiguous-arm6.ld: New.\n\t* testsuite/ld-powerpc/powerpc.exp: Run new tests.\n\t* testsuite/ld-powerpc/non-contiguous-powerpc.d: New.\n\t* testsuite/ld-powerpc/non-contiguous-powerpc.ld: New.\n\t* testsuite/ld-powerpc/non-contiguous-powerpc.sd: New.\n\t* testsuite/ld-powerpc/non-contiguous-powerpc64.d: New.",
    "tree": {
      "sha": "48877a5c76632d003c4a64bea1b3a9eea74d4f96",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/48877a5c76632d003c4a64bea1b3a9eea74d4f96"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/abf874aafe3d717573e4a48bf0e3c6334e666a55",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/abf874aafe3d717573e4a48bf0e3c6334e666a55",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/abf874aafe3d717573e4a48bf0e3c6334e666a55",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/abf874aafe3d717573e4a48bf0e3c6334e666a55/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "74e10d1742f1b8312359c59a2af06c9e661252b3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/74e10d1742f1b8312359c59a2af06c9e661252b3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/74e10d1742f1b8312359c59a2af06c9e661252b3"
    }
  ],
  "stats": {
    "total": 1197,
    "additions": 1186,
    "deletions": 11
  },
  "files": [
    {
      "sha": "84bc1e116ba74d2f76fb16329a8a072a67007532",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -1,3 +1,22 @@\n+2020-03-13  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* bfd-in2.h: Regenerate.\n+\t* section.c (asection): Add already_assigned field.\n+\t(BFD_FAKE_SECTION): Add default initializer for it.\n+\t* ecoff.c (bfd_debug_section): Initialize already_assigned field.\n+\t* elf32-arm.c (arm_build_one_stub): Add support for\n+\tnon_contiguous_regions.\n+\t* elf32-csky.c (csky_build_one_stub): Likewise.\n+\t* elf32-hppa.c (hppa_build_one_stub): Likewise.\n+\t* elf32-m68hc11.c (m68hc11_elf_build_one_stub): Likewise.\n+\t* elf32-m68hc12.c (m68hc12_elf_build_one_stub): Likewise.\n+\t* elf32-metag.c (metag_build_one_stub): Likewise.\n+\t* elf32-nios2.c (nios2_build_one_stub): Likewise.\n+\t* elf64-ppc.c (ppc_build_one_stub): Likewise.\n+\t(ppc_size_one_stub): Likewise.\n+\t* elfnn-aarch64.c (aarch64_build_one_stub): Likewise.\n+\t* elflink.c (elf_link_input_bfd): Likewise.\n+\n 2020-03-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/24920"
    },
    {
      "sha": "9859e514c19c402e9af3677911675e8739464bb6",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -1192,6 +1192,10 @@ typedef struct bfd_section\n     struct bfd_section *s;\n     const char *linked_to_symbol_name;\n   } map_head, map_tail;\n+ /* Points to the output section this section is already assigned to, if any.\n+    This is used when support for non-contiguous memory regions is enabled.  */\n+ struct bfd_section *already_assigned;\n+\n } asection;\n \n /* Relax table contains information about instructions which can\n@@ -1373,7 +1377,10 @@ discarded_section (const asection *sec)\n      (struct bfd_symbol *) SYM, &SEC.symbol,                           \\\n                                                                        \\\n   /* map_head, map_tail                                            */  \\\n-     { NULL }, { NULL }                                                \\\n+     { NULL }, { NULL },                                               \\\n+                                                                       \\\n+  /* already_assigned                                              */  \\\n+     NULL                                                              \\\n     }\n \n /* We use a macro to initialize the static asymbol structures because"
    },
    {
      "sha": "ce8eb89a57a0c4bd4d05599e0dc649e81f6daa30",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -78,8 +78,10 @@ static asection bfd_debug_section =\n      NULL,\n   /* symbol_ptr_ptr,\t\t\t\t\t\t   */\n      NULL,\n-  /* map_head, map_tail\t\t\t\t\t\t   */\n-     { NULL }, { NULL }\n+  /* map_head, map_tail,\t\t\t\t\t   */\n+     { NULL }, { NULL },\n+  /* already_assigned \t\t\t\t\t\t   */\n+     NULL,\n };\n \n /* Create an ECOFF object.  */"
    },
    {
      "sha": "e8b2ac4702ad6eec2271316461fa3d943866c088",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -5064,6 +5064,17 @@ arm_build_one_stub (struct bfd_hash_entry *gen_entry,\n   stub_entry = (struct elf32_arm_stub_hash_entry *) gen_entry;\n   info = (struct bfd_link_info *) in_arg;\n \n+  /* Fail if the target section could not be assigned to an output\n+     section.  The user should fix his linker script.  */\n+  if (stub_entry->target_section->output_section == NULL\n+      && info->non_contiguous_regions)\n+    {\n+      _bfd_error_handler (_(\"Could not assign '%pA' to an output section. \"\n+\t\t\t    \"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t  stub_entry->target_section);\n+      abort();\n+    }\n+\n   globals = elf32_arm_hash_table (info);\n   if (globals == NULL)\n     return FALSE;"
    },
    {
      "sha": "8415f7c5ec875a50501eac78b52de6cd1feff6f5",
      "filename": "bfd/elf32-csky.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-csky.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -3621,6 +3621,17 @@ csky_build_one_stub (struct bfd_hash_entry *gen_entry,\n   stub_entry = (struct elf32_csky_stub_hash_entry *)gen_entry;\n   info = (struct bfd_link_info *) in_arg;\n \n+  /* Fail if the target section could not be assigned to an output\n+     section.  The user should fix his linker script.  */\n+  if (stub_entry->target_section->output_section == NULL\n+      && info->non_contiguous_regions)\n+    {\n+      _bfd_error_handler (_(\"Could not assign '%pA' to an output section. \"\n+\t\t\t    \"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t  stub_entry->target_section);\n+      abort();\n+    }\n+\n   globals = csky_elf_hash_table (info);\n   if (globals == NULL)\n     return FALSE;"
    },
    {
      "sha": "9760b751612b6dde409316e53b9d257f1e6622bd",
      "filename": "bfd/elf32-hppa.c",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-hppa.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -731,6 +731,17 @@ hppa_build_one_stub (struct bfd_hash_entry *bh, void *in_arg)\n   switch (hsh->stub_type)\n     {\n     case hppa_stub_long_branch:\n+      /* Fail if the target section could not be assigned to an output\n+\t section.  The user should fix his linker script.  */\n+      if (hsh->target_section->output_section == NULL\n+\t  && info->non_contiguous_regions)\n+\t{\n+\t  _bfd_error_handler (_(\"Could not assign '%pA' to an output section. \"\n+\t\t\t\t\"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t      hsh->target_section);\n+\t  abort();\n+    }\n+\n       /* Create the long branch.  A long branch is formed with \"ldil\"\n \t loading the upper bits of the target address into a register,\n \t then branching with \"be\" which adds in the lower bits.\n@@ -751,6 +762,16 @@ hppa_build_one_stub (struct bfd_hash_entry *bh, void *in_arg)\n       break;\n \n     case hppa_stub_long_branch_shared:\n+      /* Fail if the target section could not be assigned to an output\n+\t section.  The user should fix his linker script.  */\n+      if (hsh->target_section->output_section == NULL\n+\t  && info->non_contiguous_regions)\n+\t{\n+\t  _bfd_error_handler (_(\"Could not assign %pA to an output section. \"\n+\t\t\t\t\"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t      hsh->target_section);\n+\t  abort();\n+    }\n       /* Branches are relative.  This is where we are going to.  */\n       sym_value = (hsh->target_value\n \t\t   + hsh->target_section->output_offset\n@@ -823,6 +844,16 @@ hppa_build_one_stub (struct bfd_hash_entry *bh, void *in_arg)\n       break;\n \n     case hppa_stub_export:\n+      /* Fail if the target section could not be assigned to an output\n+\t section.  The user should fix his linker script.  */\n+      if (hsh->target_section->output_section == NULL\n+\t  && info->non_contiguous_regions)\n+\t{\n+\t  _bfd_error_handler (_(\"Could not assign %pA to an output section. \"\n+\t\t\t\t\"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t      hsh->target_section);\n+\t  abort();\n+    }\n       /* Branches are relative.  This is where we are going to.  */\n       sym_value = (hsh->target_value\n \t\t   + hsh->target_section->output_offset"
    },
    {
      "sha": "3e12ae5e44031fd65399873574f0a406a6b4f08f",
      "filename": "bfd/elf32-m68hc11.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-m68hc11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-m68hc11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68hc11.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -415,6 +415,17 @@ m68hc11_elf_build_one_stub (struct bfd_hash_entry *gen_entry, void *in_arg)\n   stub_entry = (struct elf32_m68hc11_stub_hash_entry *) gen_entry;\n   info = (struct bfd_link_info *) in_arg;\n \n+  /* Fail if the target section could not be assigned to an output\n+     section.  The user should fix his linker script.  */\n+  if (stub_entry->target_section->output_section == NULL\n+      && info->non_contiguous_regions)\n+    {\n+      _bfd_error_handler (_(\"Could not assign '%pA' to an output section. \"\n+\t\t\t    \"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t  stub_entry->target_section);\n+      abort();\n+    }\n+\n   htab = m68hc11_elf_hash_table (info);\n   if (htab == NULL)\n     return FALSE;"
    },
    {
      "sha": "a04efd84e0bd04cc861df1a85d92e4e11e0c5510",
      "filename": "bfd/elf32-m68hc12.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-m68hc12.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-m68hc12.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68hc12.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -535,6 +535,17 @@ m68hc12_elf_build_one_stub (struct bfd_hash_entry *gen_entry, void *in_arg)\n   stub_entry = (struct elf32_m68hc11_stub_hash_entry *) gen_entry;\n   info = (struct bfd_link_info *) in_arg;\n \n+  /* Fail if the target section could not be assigned to an output\n+     section.  The user should fix his linker script.  */\n+  if (stub_entry->target_section->output_section == NULL\n+      && info->non_contiguous_regions)\n+    {\n+      _bfd_error_handler (_(\"Could not assign '%pA' to an output section. \"\n+\t\t\t    \"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t  stub_entry->target_section);\n+      abort();\n+    }\n+\n   htab = m68hc11_elf_hash_table (info);\n \n   stub_sec = stub_entry->stub_sec;"
    },
    {
      "sha": "3f30d6dadd9e9afdef5a5b3fc55ef122384d712a",
      "filename": "bfd/elf32-metag.c",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-metag.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-metag.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-metag.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -3459,17 +3459,30 @@ metag_type_of_stub (asection *input_sec,\n #define MOV_PC_A0_3\t0xa3180ca0\n \n static bfd_boolean\n-metag_build_one_stub (struct bfd_hash_entry *gen_entry, void *in_arg ATTRIBUTE_UNUSED)\n+metag_build_one_stub (struct bfd_hash_entry *gen_entry, void *in_arg)\n {\n   struct elf_metag_stub_hash_entry *hsh;\n   asection *stub_sec;\n   bfd *stub_bfd;\n   bfd_byte *loc;\n   bfd_vma sym_value;\n   int size;\n+  struct bfd_link_info *info;\n \n   /* Massage our args to the form they really have.  */\n   hsh = (struct elf_metag_stub_hash_entry *) gen_entry;\n+  info = (struct bfd_link_info *) in_arg;\n+\n+  /* Fail if the target section could not be assigned to an output\n+     section.  The user should fix his linker script.  */\n+  if (hsh->target_section->output_section == NULL\n+      && info->non_contiguous_regions)\n+    {\n+      _bfd_error_handler (_(\"Could not assign '%pA' to an output section. \"\n+\t\t\t    \"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t  hsh->target_section);\n+      abort();\n+    }\n \n   stub_sec = hsh->stub_sec;\n "
    },
    {
      "sha": "8c8bc0c8f8017d369c5c238bc69cd46230c0af67",
      "filename": "bfd/elf32-nios2.c",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf32-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nios2.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -2490,7 +2490,20 @@ nios2_build_one_stub (struct bfd_hash_entry *gen_entry, void *in_arg ATTRIBUTE_U\n     = (struct elf32_nios2_stub_hash_entry *) gen_entry;\n   asection *stub_sec = hsh->stub_sec;\n   bfd_vma sym_value;\n+  struct bfd_link_info *info;\n+\n+  info = (struct bfd_link_info *) in_arg;\n \n+  /* Fail if the target section could not be assigned to an output\n+     section.  The user should fix his linker script.  */\n+  if (hsh->target_section->output_section == NULL\n+      && info->non_contiguous_regions)\n+    {\n+      _bfd_error_handler (_(\"Could not assign '%pA' to an output section. \"\n+\t\t\t    \"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t  hsh->target_section);\n+      abort();\n+    }\n   /* Make a note of the offset within the stubs for this entry.  */\n   hsh->stub_offset = stub_sec->size;\n "
    },
    {
      "sha": "83eaadfb0d9559284d5842dcbb39357fe25f240b",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -11362,6 +11362,31 @@ ppc_build_one_stub (struct bfd_hash_entry *gen_entry, void *in_arg)\n   stub_entry = (struct ppc_stub_hash_entry *) gen_entry;\n   info = in_arg;\n \n+  /* Fail if the target section could not be assigned to an output\n+     section.  The user should fix his linker script.  */\n+  if (stub_entry->target_section != NULL\n+      && stub_entry->target_section->output_section == NULL\n+      && info->non_contiguous_regions)\n+    {\n+      _bfd_error_handler (_(\"Could not assign '%pA' to an output section. \"\n+\t\t\t    \"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t  stub_entry->target_section);\n+      abort();\n+    }\n+\n+  /* Same for the group.  */\n+  if (stub_entry->group->stub_sec != NULL\n+      && stub_entry->group->stub_sec->output_section == NULL\n+      && info->non_contiguous_regions)\n+    {\n+      _bfd_error_handler (_(\"Could not assign group %pA target %pA to an \"\n+\t\t\t    \"output section. Retry without \"\n+\t\t\t    \"--enable-non-contiguous-regions.\\n\"),\n+\t\t\t  stub_entry->group->stub_sec,\n+\t\t\t  stub_entry->target_section);\n+      abort();\n+    }\n+\n   htab = ppc_hash_table (info);\n   if (htab == NULL)\n     return FALSE;\n@@ -11887,6 +11912,31 @@ ppc_size_one_stub (struct bfd_hash_entry *gen_entry, void *in_arg)\n   if (htab == NULL)\n     return FALSE;\n \n+  /* Fail if the target section could not be assigned to an output\n+     section.  The user should fix his linker script.  */\n+  if (stub_entry->target_section != NULL\n+      && stub_entry->target_section->output_section == NULL\n+      && info->non_contiguous_regions)\n+    {\n+      _bfd_error_handler (_(\"Could not assign %pA to an output section. \"\n+\t\t\t    \"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t  stub_entry->target_section);\n+      abort();\n+    }\n+\n+  /* Same for the group.  */\n+  if (stub_entry->group->stub_sec != NULL\n+      && stub_entry->group->stub_sec->output_section == NULL\n+      && info->non_contiguous_regions)\n+    {\n+      _bfd_error_handler (_(\"Could not assign group %pA target %pA to an \"\n+\t\t\t    \"output section. Retry without \"\n+\t\t\t    \"--enable-non-contiguous-regions.\\n\"),\n+\t\t\t  stub_entry->group->stub_sec,\n+\t\t\t  stub_entry->target_section);\n+      abort();\n+    }\n+\n   /* Make a note of the offset within the stubs for this entry.  */\n   stub_entry->stub_offset = stub_entry->group->stub_sec->size;\n "
    },
    {
      "sha": "589550e11d288dd983d8b2db3cae5bbc6a57b72a",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -10567,6 +10567,18 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n \n       /* If this symbol is defined in a section which we are\n \t discarding, we don't need to keep it.  */\n+      if (isym->st_shndx != SHN_UNDEF\n+\t  && isym->st_shndx < SHN_LORESERVE\n+\t  && isec->output_section == NULL\n+\t  && flinfo->info->non_contiguous_regions\n+\t  && flinfo->info->non_contiguous_regions_warnings)\n+\t{\n+\t  _bfd_error_handler (_(\"warning: --enable-non-contiguous-regions \"\n+\t\t\t\t\"discards section `%s' from '%s'\\n\"),\n+\t\t\t      isec->name, isec->owner->filename);\n+\t  continue;\n+\t}\n+\n       if (isym->st_shndx != SHN_UNDEF\n \t  && isym->st_shndx < SHN_LORESERVE\n \t  && bfd_section_removed_from_list (output_bfd,"
    },
    {
      "sha": "b00b6c4818f9b2620849f5f91d2b7052bd1788b9",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -3278,7 +3278,7 @@ _bfd_aarch64_add_stub_entry_after (const char *stub_name,\n \n static bfd_boolean\n aarch64_build_one_stub (struct bfd_hash_entry *gen_entry,\n-\t\t\tvoid *in_arg ATTRIBUTE_UNUSED)\n+\t\t\tvoid *in_arg)\n {\n   struct elf_aarch64_stub_hash_entry *stub_entry;\n   asection *stub_sec;\n@@ -3291,10 +3291,24 @@ aarch64_build_one_stub (struct bfd_hash_entry *gen_entry,\n   unsigned int template_size;\n   const uint32_t *template;\n   unsigned int i;\n+  struct bfd_link_info *info;\n \n   /* Massage our args to the form they really have.  */\n   stub_entry = (struct elf_aarch64_stub_hash_entry *) gen_entry;\n \n+  info = (struct bfd_link_info *) in_arg;\n+\n+  /* Fail if the target section could not be assigned to an output\n+     section.  The user should fix his linker script.  */\n+  if (stub_entry->target_section->output_section == NULL\n+      && info->non_contiguous_regions)\n+    {\n+      _bfd_error_handler (_(\"Could not assign '%pA' to an output section. \"\n+\t\t\t    \"Retry without --enable-non-contiguous-regions.\\n\"),\n+\t\t\t  stub_entry->target_section);\n+      abort();\n+    }\n+\n   stub_sec = stub_entry->stub_sec;\n \n   /* Make a note of the offset within the stubs for this entry.  */"
    },
    {
      "sha": "eef118f3c3fd0e9e81e547d242c50b76f4428b05",
      "filename": "bfd/section.c",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/section.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/bfd/section.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/section.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -551,6 +551,10 @@ CODE_FRAGMENT\n .    struct bfd_section *s;\n .    const char *linked_to_symbol_name;\n .  } map_head, map_tail;\n+. {* Points to the output section this section is already assigned to, if any.\n+.    This is used when support for non-contiguous memory regions is enabled.  *}\n+. struct bfd_section *already_assigned;\n+.\n .} asection;\n .\n .{* Relax table contains information about instructions which can\n@@ -732,7 +736,10 @@ CODE_FRAGMENT\n .     (struct bfd_symbol *) SYM, &SEC.symbol,\t\t\t\t\\\n .\t\t\t\t\t\t\t\t\t\\\n .  {* map_head, map_tail                                            *}\t\\\n-.     { NULL }, { NULL }\t\t\t\t\t\t\\\n+.     { NULL }, { NULL },\t\t\t\t\t\t\\\n+.\t\t\t\t\t\t\t\t\t\\\n+.  {* already_assigned                                             *}\t\\\n+.     NULL\t\t\t\t\t\t\t\t\\\n .    }\n .\n .{* We use a macro to initialize the static asymbol structures because"
    },
    {
      "sha": "45fedc40bbc0c8afb8ce7df405b7368a81aa8ef0",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-13  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* bfdlink.h (bfd_link_info): Add non_contiguous_regions and\n+\tnon_contiguous_regions_warnings fields.\n+\n 2020-03-13  Christian Eggers  <ceggers@gmx.de>\n \n \t* bfdlink.h (struct bfd_link_order): Add unit (bytes/octets) to"
    },
    {
      "sha": "84b9dd7a0a0edf35c7d8bc9cfebe7a2802ae32ce",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -501,6 +501,14 @@ struct bfd_link_info\n   /* TRUE if \"-Map map\" is passed to linker.  */\n   unsigned int has_map_file : 1;\n \n+  /* TRUE if \"--enable-non-contiguous-regions\" is passed to the\n+     linker.  */\n+  unsigned int non_contiguous_regions : 1;\n+\n+  /* TRUE if \"--enable-non-contiguous-regions-warnings\" is passed to\n+     the linker.  */\n+  unsigned int non_contiguous_regions_warnings : 1;\n+\n   /* Char that may appear as the first char of a symbol, but should be\n      skipped (like symbol_leading_char) when looking up symbols in\n      wrap_hash.  Used by PowerPC Linux for 'dot' symbols.  */"
    },
    {
      "sha": "e7b434623fb9a883c5c6418c084341d6f59ef244",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -1,3 +1,47 @@\n+2020-03-13  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* ldlang.c (lang_add_section): Add support for\n+\tnon_contiguous_regions.\n+\t(size_input_section): Likewise.\n+\t(lang_size_sections_1): Likewise.\n+\t(process_insert_statements): Likewise.\n+\t* ldlex.h (option_values): Add OPTION_NON_CONTIGUOUS_REGIONS and\n+\tOPTION_NON_CONTIGUOUS_REGIONS_WARNINGS.\n+\t* lexsup.c (ld_options): Add entries for\n+\t--enable-non-contiguous-regions and\n+\t--enable-non-contiguous-regions-warnings.\n+\t(parse_args): Handle it.\n+\t* NEWS: Add --enable-non-contiguous-regions and\n+\t--enable-non-contiguous-regions-warnings.\n+\t* ld.texi: Add --enable-non-contiguous-regions and\n+\t--enable-non-contiguous-regions-warnings documentation.\n+\t* emultempl/armelf.em (elf32_arm_add_stub_section): Add\n+\tSEC_LINKER_CREATED flag.\n+\t* emultempl/xtensaelf.em (ld_build_required_section_dependence):\n+\tEmit an error when --enable-non-contiguous-regions is used.\n+\t* testsuite/ld-elf/non-contiguous.d: New.\n+\t* testsuite/ld-elf/non-contiguous.ld: New.\n+\t* testsuite/ld-elf/non-contiguous.s: New.\n+\t* testsuite/ld-arm/arm-elf.exp: Run the new tests.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm.s: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm.d: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm.ld: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm2.d: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm3.ld: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm3.d: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm3.ld: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm4.d: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm4.ld: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm5.d: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm5.ld: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm6.d: New.\n+\t* testsuite/ld-arm/arm-elf/non-contiguous-arm6.ld: New.\n+\t* testsuite/ld-powerpc/powerpc.exp: Run new tests.\n+\t* testsuite/ld-powerpc/non-contiguous-powerpc.d: New.\n+\t* testsuite/ld-powerpc/non-contiguous-powerpc.ld: New.\n+\t* testsuite/ld-powerpc/non-contiguous-powerpc.sd: New.\n+\t* testsuite/ld-powerpc/non-contiguous-powerpc64.d: New.\n+\n 2020-03-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/24920"
    },
    {
      "sha": "563af67a344480499797f49e43218c1cde88a868",
      "filename": "ld/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/NEWS?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -1,5 +1,8 @@\n -*- text -*-\n \n+* Add command-line options --enable-non-contiguous-regions and\n+  --enable-non-contiguous-regions-warnings.\n+\n Changes in 2.34:\n \n * The ld check for \"PHDR segment not covered by LOAD segment\" is more"
    },
    {
      "sha": "fb5bbf85f6f8f308b2fab645074dfff5c156877e",
      "filename": "ld/emultempl/armelf.em",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/emultempl/armelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/emultempl/armelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/armelf.em?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -227,7 +227,8 @@ elf32_arm_add_stub_section (const char * stub_sec_name,\n   struct hook_stub_info info;\n \n   flags = (SEC_ALLOC | SEC_LOAD | SEC_READONLY | SEC_CODE\n-\t   | SEC_HAS_CONTENTS | SEC_RELOC | SEC_IN_MEMORY | SEC_KEEP);\n+\t   | SEC_HAS_CONTENTS | SEC_RELOC | SEC_IN_MEMORY | SEC_KEEP\n+\t   | SEC_LINKER_CREATED);\n   stub_sec = bfd_make_section_anyway_with_flags (stub_file->the_bfd,\n \t\t\t\t\t\t stub_sec_name, flags);\n   if (stub_sec == NULL)"
    },
    {
      "sha": "74bd11c6b00092ce08e0f626b358c5928bf60c7d",
      "filename": "ld/emultempl/xtensaelf.em",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/emultempl/xtensaelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/emultempl/xtensaelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/xtensaelf.em?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -1224,6 +1224,12 @@ ld_build_required_section_dependence (lang_statement_union_type *s)\n     {\n       lang_statement_union_type *l = iter_stack_current (&stack);\n \n+      if (l == NULL && link_info.non_contiguous_regions)\n+\t{\n+\t  einfo (_(\"Relaxation not supported with --enable-non-contiguous-regions.\\n\"));\n+\t  abort();\n+\t}\n+\n       if (l->header.type == lang_input_section_enum)\n \t{\n \t  lang_input_section_type *input;"
    },
    {
      "sha": "9f562935bed06d67708e2cd72d276de5ec694f71",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -459,6 +459,48 @@ will contain a colon separated list of audit interfaces to use.  This\n option is only meaningful on ELF platforms supporting the rtld-audit interface.\n The -P option is provided for Solaris compatibility.\n \n+@kindex --enable-non-contiguous-regions\n+@item --enable-non-contiguous-regions\n+This option avoids generating an error if an input section does not\n+fit a matching output section. The linker tries to allocate the input\n+section to subseque nt matching output sections, and generates an\n+error only if no output section is large enough.  This is useful when\n+several non-contiguous memory regions are available and the input\n+section does not require a particular one.  The order in which input\n+sections are evaluated does not change, for instance:\n+\n+@smallexample\n+  MEMORY @{\n+    MEM1 (rwx) : ORIGIN : 0x1000, LENGTH = 0x14\n+    MEM2 (rwx) : ORIGIN : 0x1000, LENGTH = 0x40\n+    MEM3 (rwx) : ORIGIN : 0x2000, LENGTH = 0x40\n+  @}\n+  SECTIONS @{\n+    mem1 : @{ *(.data.*); @} > MEM1\n+    mem2 : @{ *(.data.*); @} > MEM2\n+    mem3 : @{ *(.data.*); @} > MEM2\n+  @}\n+\n+  with input sections:\n+  .data.1: size 8\n+  .data.2: size 0x10\n+  .data.3: size 4\n+\n+  results in .data.1 affected to mem1, and .data.2 and .data.3\n+  affected to mem2, even though .data.3 would fit in mem3.\n+@end smallexample\n+\n+This option is incompatible with INSERT statements because it changes\n+the way input sections are mapped to output sections.\n+\n+@kindex --enable-non-contiguous-regions-warnings\n+@item --enable-non-contiguous-regions-warnings\n+This option enables warnings when\n+@code{--enable-non-contiguous-regions} allows possibly unexpected\n+matches in sections mapping, potentially leading to silently\n+discarding a section instead of failing because it does not fit any\n+output region.\n+\n @cindex entry point, from command line\n @kindex -e @var{entry}\n @kindex --entry=@var{entry}"
    },
    {
      "sha": "8e56e8678fb16f0c87ac8062d3635ca92fb9a6f6",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 141,
      "deletions": 4,
      "changes": 145,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -2540,6 +2540,11 @@ lang_add_section (lang_statement_list_type *ptr,\n \t  /* This prevents future calls from assigning this section.  */\n \t  section->output_section = bfd_abs_section_ptr;\n \t}\n+      else if (link_info.non_contiguous_regions_warnings)\n+\teinfo (_(\"%P:%pS: warning: --enable-non-contiguous-regions makes \"\n+\t\t \"section `%pA' from '%pB' match /DISCARD/ clause.\\n\"),\n+\t       NULL, section, section->owner);\n+\n       return;\n     }\n \n@@ -2553,7 +2558,33 @@ lang_add_section (lang_statement_list_type *ptr,\n     }\n \n   if (section->output_section != NULL)\n-    return;\n+    {\n+      if (!link_info.non_contiguous_regions)\n+\treturn;\n+\n+      /* SECTION has already been handled in a special way\n+\t (eg. LINK_ONCE): skip it.  */\n+      if (bfd_is_abs_section (section->output_section))\n+\treturn;\n+\n+      /* Already assigned to the same output section, do not process\n+\t it again, to avoid creating loops between duplicate sections\n+\t later.  */\n+      if (section->output_section == output->bfd_section)\n+\treturn;\n+\n+      if (link_info.non_contiguous_regions_warnings && output->bfd_section)\n+\teinfo (_(\"%P:%pS: warning: --enable-non-contiguous-regions may \"\n+\t\t \"change behaviour for section `%pA' from '%pB' (assigned to \"\n+\t\t \"%pA, but additional match: %pA)\\n\"),\n+\t       NULL, section, section->owner, section->output_section,\n+\t       output->bfd_section);\n+\n+      /* SECTION has already been assigned to an output section, but\n+\t the user allows it to be mapped to another one in case it\n+\t overflows. We'll later update the actual output section in\n+\t size_input_section as appropriate.  */\n+    }\n \n   /* We don't copy the SEC_NEVER_LOAD flag from an input section\n      to an output section, because we want to be able to include a\n@@ -4197,6 +4228,12 @@ process_insert_statements (lang_statement_union_type **start)\n \t  lang_statement_union_type **ptr;\n \t  lang_statement_union_type *first;\n \n+\t  if (link_info.non_contiguous_regions)\n+\t    {\n+\t      einfo (_(\"warning: INSERT statement in linker script is \"\n+\t\t       \"incompatible with --enable-non-contiguous-regions.\\n\"));\n+\t    }\n+\n \t  where = lang_output_section_find (i->where);\n \t  if (where != NULL && i->is_before)\n \t    {\n@@ -5119,11 +5156,27 @@ size_input_section\n   (lang_statement_union_type **this_ptr,\n    lang_output_section_statement_type *output_section_statement,\n    fill_type *fill,\n+   bfd_boolean *removed,\n    bfd_vma dot)\n {\n   lang_input_section_type *is = &((*this_ptr)->input_section);\n   asection *i = is->section;\n   asection *o = output_section_statement->bfd_section;\n+  *removed = 0;\n+\n+  if (link_info.non_contiguous_regions)\n+    {\n+      /* If the input section I has already been successfully assigned\n+\t to an output section other than O, don't bother with it and\n+\t let the caller remove it from the list.  Keep processing in\n+\t case we have already handled O, because the repeated passes\n+\t have reinitialized its size.  */\n+      if (i->already_assigned && i->already_assigned != o)\n+\t{\n+\t  *removed = 1;\n+\t  return dot;\n+\t}\n+    }\n \n   if (i->sec_info_type == SEC_INFO_TYPE_JUST_SYMS)\n     i->output_offset = i->vma - o->vma;\n@@ -5155,13 +5208,57 @@ size_input_section\n \t  dot += alignment_needed;\n \t}\n \n+      if (link_info.non_contiguous_regions)\n+\t{\n+\t  /* If I would overflow O, let the caller remove I from the\n+\t     list.  */\n+\t  if (output_section_statement->region)\n+\t    {\n+\t      bfd_vma end = output_section_statement->region->origin\n+\t\t+ output_section_statement->region->length;\n+\n+\t      if (dot + TO_ADDR (i->size) > end)\n+\t\t{\n+\t\t  if (i->flags & SEC_LINKER_CREATED)\n+\t\t    {\n+\t\t      einfo (_(\"Output section '%s' not large enough for the \"\n+\t\t\t       \"linker-created stubs section '%s'.\\n\"),\n+\t\t\t     i->output_section->name, i->name);\n+\t\t      abort();\n+\t\t    }\n+\n+\t\t  if (i->rawsize && i->rawsize != i->size)\n+\t\t    {\n+\t\t      einfo (_(\"Relaxation not supported with \"\n+\t\t\t       \"--enable-non-contiguous-regions (section '%s' \"\n+\t\t\t       \"would overflow '%s' after it changed size).\\n\"),\n+\t\t\t     i->name, i->output_section->name);\n+\t\t      abort();\n+\t\t    }\n+\n+\t\t  *removed = 1;\n+\t\t  dot = end;\n+\t\t  i->output_section = NULL;\n+\t\t  return dot;\n+\t\t}\n+\t    }\n+\t}\n+\n       /* Remember where in the output section this input section goes.  */\n       i->output_offset = dot - o->vma;\n \n       /* Mark how big the output section must be to contain this now.  */\n       dot += TO_ADDR (i->size);\n       if (!(o->flags & SEC_FIXED_SIZE))\n \to->size = TO_SIZE (dot - o->vma);\n+\n+      if (link_info.non_contiguous_regions)\n+\t{\n+\t  /* Record that I was successfully assigned to O, and update\n+\t     its actual output section too.  */\n+\t  i->already_assigned = o;\n+\t  i->output_section = o;\n+\t}\n     }\n \n   return dot;\n@@ -5448,10 +5545,14 @@ lang_size_sections_1\n    bfd_boolean check_regions)\n {\n   lang_statement_union_type *s;\n+  lang_statement_union_type *prev_s = NULL;\n+  bfd_boolean removed_prev_s = FALSE;\n \n   /* Size up the sections from their constituent parts.  */\n-  for (s = *prev; s != NULL; s = s->header.next)\n+  for (s = *prev; s != NULL; prev_s = s, s = s->header.next)\n     {\n+      bfd_boolean removed=FALSE;\n+\n       switch (s->header.type)\n \t{\n \tcase lang_output_section_statement_enum:\n@@ -5885,7 +5986,7 @@ lang_size_sections_1\n \t\t  *relax = TRUE;\n \t      }\n \t    dot = size_input_section (prev, output_section_statement,\n-\t\t\t\t      fill, dot);\n+\t\t\t\t      fill, &removed, dot);\n \t  }\n \t  break;\n \n@@ -5990,7 +6091,43 @@ lang_size_sections_1\n \t  FAIL ();\n \t  break;\n \t}\n-      prev = &s->header.next;\n+\n+      /* If an input section doesn't fit in the current output\n+\t section, remove it from the list.  Handle the case where we\n+\t have to remove an input_section statement here: there is a\n+\t special case to remove the first element of the list.  */\n+      if (link_info.non_contiguous_regions && removed)\n+\t{\n+\t  /* If we removed the first element during the previous\n+\t     iteration, override the loop assignment of prev_s.  */\n+\t  if (removed_prev_s)\n+\t      prev_s = NULL;\n+\n+\t  if (prev_s)\n+\t    {\n+\t      /* If there was a real previous input section, just skip\n+\t\t the current one.  */\n+\t      prev_s->header.next=s->header.next;\n+\t      s = prev_s;\n+\t      removed_prev_s = FALSE;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Remove the first input section of the list.  */\n+\t      *prev = s->header.next;\n+\t      removed_prev_s = TRUE;\n+\t    }\n+\n+\t  /* Move to next element, unless we removed the head of the\n+\t     list.  */\n+\t  if (!removed_prev_s)\n+\t    prev = &s->header.next;\n+\t}\n+      else\n+\t{\n+\t  prev = &s->header.next;\n+\t  removed_prev_s = FALSE;\n+\t}\n     }\n   return dot;\n }"
    },
    {
      "sha": "22b928d2d9049dbcd558eba94544fdf3e719e3b2",
      "filename": "ld/ldlex.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/ldlex.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/ldlex.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlex.h?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -150,6 +150,8 @@ enum option_values\n   OPTION_FORCE_GROUP_ALLOCATION,\n   OPTION_PRINT_MAP_DISCARDED,\n   OPTION_NO_PRINT_MAP_DISCARDED,\n+  OPTION_NON_CONTIGUOUS_REGIONS,\n+  OPTION_NON_CONTIGUOUS_REGIONS_WARNINGS,\n };\n \n /* The initial parser states.  */"
    },
    {
      "sha": "2597e2d6304a3414f63c8d87d152976eeb3f635e",
      "filename": "ld/lexsup.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/lexsup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/lexsup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/lexsup.c?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -122,6 +122,10 @@ static const struct ld_option ld_options[] =\n     'E', NULL, N_(\"Export all dynamic symbols\"), TWO_DASHES },\n   { {\"no-export-dynamic\", no_argument, NULL, OPTION_NO_EXPORT_DYNAMIC},\n     '\\0', NULL, N_(\"Undo the effect of --export-dynamic\"), TWO_DASHES },\n+  { {\"enable-non-contiguous-regions\", no_argument, NULL, OPTION_NON_CONTIGUOUS_REGIONS},\n+    '\\0', NULL, N_(\"Enable support of non-contiguous memory regions\"), TWO_DASHES },\n+  { {\"enable-non-contiguous-regions-warnings\", no_argument, NULL, OPTION_NON_CONTIGUOUS_REGIONS_WARNINGS},\n+    '\\0', NULL, N_(\"Enable warnings when --enable-non-contiguous-regions may cause unexpected behaviour\"), TWO_DASHES },\n   { {\"EB\", no_argument, NULL, OPTION_EB},\n     '\\0', NULL, N_(\"Link big-endian objects\"), ONE_DASH },\n   { {\"EL\", no_argument, NULL, OPTION_EL},\n@@ -845,6 +849,12 @@ parse_args (unsigned argc, char **argv)\n \tcase OPTION_NO_EXPORT_DYNAMIC:\n \t  link_info.export_dynamic = FALSE;\n \t  break;\n+\tcase OPTION_NON_CONTIGUOUS_REGIONS:\n+\t  link_info.non_contiguous_regions = TRUE;\n+\t  break;\n+\tcase OPTION_NON_CONTIGUOUS_REGIONS_WARNINGS:\n+\t  link_info.non_contiguous_regions_warnings = TRUE;\n+\t  break;\n \tcase 'e':\n \t  lang_add_entry (optarg, TRUE);\n \t  break;"
    },
    {
      "sha": "18177d19224f7d40c3c8832206615e758cb979af",
      "filename": "ld/testsuite/ld-arm/arm-elf.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/arm-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/arm-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/arm-elf.exp?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -1261,3 +1261,10 @@ set arm_unwind_tests {\n      \"unwind-mix\"}\n }\n run_ld_link_tests $arm_unwind_tests\n+\n+run_dump_test \"non-contiguous-arm\"\n+run_dump_test \"non-contiguous-arm2\"\n+run_dump_test \"non-contiguous-arm3\"\n+run_dump_test \"non-contiguous-arm4\"\n+run_dump_test \"non-contiguous-arm5\"\n+run_dump_test \"non-contiguous-arm6\""
    },
    {
      "sha": "d0e5fabeb56fda78dd2c25518176b69c8e27263b",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm.d?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,4 @@\n+#name: non-contiguous-arm\n+#source: non-contiguous-arm.s\n+#ld: --enable-non-contiguous-regions -T non-contiguous-arm.ld\n+# error: \\A.*Could not assign '.code.4' to an output section. Retry without --enable-non-contiguous-regions.*\\Z"
    },
    {
      "sha": "a50621b0f4d9a05d7cc3a4434568a7293bf484a1",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm.ld",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm.ld?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,34 @@\n+/*\n+ sections .code.1 and .code.2 fit in .raml\n+ section .code.3 fits in .ramu\n+ section .code.4 too large to fit\n+ expect an error about .code.4\n+*/\n+MEMORY\n+{\n+  RAML (rwx) : ORIGIN = 0x1FFF0000, LENGTH = 0x0001c\n+  RAMU (rwx) : ORIGIN = 0x20000000, LENGTH = 0x00040\n+  RAMZ (rwx) : ORIGIN = 0x20040000, LENGTH = 0x00040\n+}\n+\n+SECTIONS\n+{\n+   .raml :\n+   {  _raml_start = . ;\n+      *(.boot) ;\n+      *(.code) *(.code.*) ;\n+      _raml_end = . ;\n+   } > RAML\n+\n+   .ramu : AT ( ADDR (.raml) + SIZEOF (.raml) )\n+   {  _ramu_start = . ;\n+      *(.code) *(.code.*) ;\n+      _ramu_end = . ;\n+   } > RAMU\n+\n+   .ramz : AT ( ADDR (.ramu) + SIZEOF (.ramu) )\n+   {  _ramz_start = . ;\n+      *(.code) *(.code.*) ;\n+     _ramz_end = . ;\n+   } > RAMZ\n+}"
    },
    {
      "sha": "cdc8b0098e0342ebbfecd9560bc4b111ff42d358",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm.s",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm.s?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,35 @@\n+\t.syntax unified\n+\t.section .code.1, \"ax\", %progbits\n+\t.arm\n+\t# Fit in RAML\n+\t.global code1\n+\t.type code1, %function\n+code1:\n+\tnop\n+\tnop\n+\tbl code2\n+\n+\t.section .code.2, \"ax\", %progbits\n+\t# Fit in RAML\n+\t.global code2\n+\t.type code2, %function\n+code2:\n+\tnop\n+\tnop\n+\tbl code3\n+\n+\t.section .code.3, \"ax\", %progbits\n+\t# Fit in RAMU\n+\t.global code3\n+\t.type code3, %function\n+code3:\n+\tnop\n+\tbl code4\n+\n+\t.section .code.4, \"ax\", %progbits\n+\t# Fit in RAMZ\n+\t.global code4\n+\t.type code4, %function\n+code4:\n+$a:\n+\t.fill 20, 4, 0xe1a00000"
    },
    {
      "sha": "af40e840e05cc6c739e0ec3dcbfa20b51d3fff44",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm2.d",
      "status": "added",
      "additions": 77,
      "deletions": 0,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm2.d?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,77 @@\n+#name: non-contiguous-arm2\n+#source: non-contiguous-arm.s\n+#ld: --enable-non-contiguous-regions -T non-contiguous-arm2.ld\n+#objdump: -rdth\n+#xfail: [is_generic]\n+\n+.*:     file format elf32-(little|big)arm.*\n+\n+Sections:\n+Idx Name          Size      VMA       LMA       File off  Algn\n+  0 \\.raml         00000018  1fff0000  1fff0000  00010000  2\\*\\*2\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n+  1 \\.ramu         00000008  20000000  1fff0018  00020000  2\\*\\*2\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n+  2 \\.ramz         00000050  20040000  20000008  00030000  2\\*\\*2\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n+  3 .ARM.attributes 00000012  00000000  00000000  .*  2\\*\\*0\n+                  CONTENTS, READONLY\n+SYMBOL TABLE:\n+1fff0000 l    d  .raml\t00000000 .raml\n+20000000 l    d  .ramu\t00000000 .ramu\n+20040000 l    d  .ramz\t00000000 .ramz\n+00000000 l    d  .ARM.attributes\t00000000 .ARM.attributes\n+00000000 l    df \\*ABS\\*\t00000000 .*/non-contiguous-arm.o\n+1fff0018 g       .raml\t00000000 _raml_end\n+20000000 g       .ramu\t00000000 _ramu_start\n+1fff000c g     F .raml\t00000000 code2\n+20040000 g       .ramz\t00000000 _ramz_start\n+1fff0000 g       .raml\t00000000 _raml_start\n+20000000 g     F .ramu\t00000000 code3\n+1fff0000 g     F .raml\t00000000 code1\n+20040050 g       .ramz\t00000000 _ramz_end\n+20040000 g     F .ramz\t00000000 code4\n+20000008 g       .ramu\t00000000 _ramu_end\n+\n+\n+Disassembly of section .raml:\n+\n+1fff0000 \\<code1\\>:\n+1fff0000:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0004:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0008:\tebffffff \tbl\t1fff000c \\<code2\\>\n+\n+1fff000c \\<code2\\>:\n+1fff000c:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0010:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0014:\teb003ff9 \tbl\t20000000 \\<code3\\>\n+\n+Disassembly of section .ramu:\n+\n+20000000 \\<code3\\>:\n+20000000:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+20000004:\teb00fffd \tbl\t20040000 \\<code4\\>\n+\n+Disassembly of section .ramz:\n+\n+20040000 \\<code4\\>:\n+20040000:\te1a00000 \t.word\t0xe1a00000\n+20040004:\te1a00000 \t.word\t0xe1a00000\n+20040008:\te1a00000 \t.word\t0xe1a00000\n+2004000c:\te1a00000 \t.word\t0xe1a00000\n+20040010:\te1a00000 \t.word\t0xe1a00000\n+20040014:\te1a00000 \t.word\t0xe1a00000\n+20040018:\te1a00000 \t.word\t0xe1a00000\n+2004001c:\te1a00000 \t.word\t0xe1a00000\n+20040020:\te1a00000 \t.word\t0xe1a00000\n+20040024:\te1a00000 \t.word\t0xe1a00000\n+20040028:\te1a00000 \t.word\t0xe1a00000\n+2004002c:\te1a00000 \t.word\t0xe1a00000\n+20040030:\te1a00000 \t.word\t0xe1a00000\n+20040034:\te1a00000 \t.word\t0xe1a00000\n+20040038:\te1a00000 \t.word\t0xe1a00000\n+2004003c:\te1a00000 \t.word\t0xe1a00000\n+20040040:\te1a00000 \t.word\t0xe1a00000\n+20040044:\te1a00000 \t.word\t0xe1a00000\n+20040048:\te1a00000 \t.word\t0xe1a00000\n+2004004c:\te1a00000 \t.word\t0xe1a00000"
    },
    {
      "sha": "f13567e944df209c0a9ab9f7d1ed8622ae8554e2",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm2.ld",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm2.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm2.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm2.ld?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,33 @@\n+/*\n+ sections .code.1 and .code.2 fit in .raml\n+ section .code.3 fits in .ramu and does not need a farcall stub to jump to code4\n+ section .code.4 fits in .ramz\n+*/\n+MEMORY\n+{\n+  RAML (rwx) : ORIGIN = 0x1FFF0000, LENGTH = 0x0001c\n+  RAMU (rwx) : ORIGIN = 0x20000000, LENGTH = 0x00008\n+  RAMZ (rwx) : ORIGIN = 0x20040000, LENGTH = 0x00400\n+}\n+\n+SECTIONS\n+{\n+   .raml :\n+   {  _raml_start = . ;\n+      *(.boot) ;\n+      *(.code) *(.code.*) ;\n+      _raml_end = . ;\n+   } > RAML\n+\n+   .ramu : AT ( ADDR (.raml) + SIZEOF (.raml) )\n+   {  _ramu_start = . ;\n+      *(.code) *(.code.*) ;\n+      _ramu_end = . ;\n+   } > RAMU\n+\n+   .ramz : AT ( ADDR (.ramu) + SIZEOF (.ramu) )\n+   {  _ramz_start = . ;\n+      *(.code) *(.code.*) ;\n+     _ramz_end = . ;\n+   } > RAMZ\n+}"
    },
    {
      "sha": "6373922ea1f4d43a4f54928219b5984682125fd2",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm3.d",
      "status": "added",
      "additions": 83,
      "deletions": 0,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm3.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm3.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm3.d?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,83 @@\n+#name: non-contiguous-arm3\n+#source: non-contiguous-arm.s\n+#ld: --enable-non-contiguous-regions -T non-contiguous-arm3.ld\n+#objdump: -rdth\n+#xfail: [is_generic]\n+#skip: arm*nacl\n+\n+.*:     file format elf32-(little|big)arm\n+\n+Sections:\n+Idx Name          Size      VMA       LMA       File off  Algn\n+  0 \\.raml         00000018  1fff0000  1fff0000  00010000  2\\*\\*2\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n+  1 \\.ramu         00000010  20000000  1fff0018  00020000  2\\*\\*3\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n+  2 \\.ramz         00000050  30040000  20000010  00030000  2\\*\\*2\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n+  3 .ARM.attributes 00000012  00000000  00000000  00030050  2\\*\\*0\n+                  CONTENTS, READONLY\n+SYMBOL TABLE:\n+1fff0000 l    d  .raml\t00000000 .raml\n+20000000 l    d  .ramu\t00000000 .ramu\n+30040000 l    d  .ramz\t00000000 .ramz\n+00000000 l    d  .ARM.attributes\t00000000 .ARM.attributes\n+00000000 l    df \\*ABS\\*\t00000000 .*/non-contiguous-arm.o\n+20000008 l     F .ramu\t00000008 __code4_veneer\n+1fff0018 g       .raml\t00000000 _raml_end\n+20000000 g       .ramu\t00000000 _ramu_start\n+1fff000c g     F .raml\t00000000 code2\n+30040000 g       .ramz\t00000000 _ramz_start\n+1fff0000 g       .raml\t00000000 _raml_start\n+20000000 g     F .ramu\t00000000 code3\n+1fff0000 g     F .raml\t00000000 code1\n+30040050 g       .ramz\t00000000 _ramz_end\n+30040000 g     F .ramz\t00000000 code4\n+20000010 g       .ramu\t00000000 _ramu_end\n+\n+\n+Disassembly of section .raml:\n+\n+1fff0000 \\<code1\\>:\n+1fff0000:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0004:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0008:\tebffffff \tbl\t1fff000c \\<code2\\>\n+\n+1fff000c \\<code2\\>:\n+1fff000c:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0010:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0014:\teb003ff9 \tbl\t20000000 \\<code3\\>\n+\n+Disassembly of section .ramu:\n+\n+20000000 \\<code3\\>:\n+20000000:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+20000004:\tebffffff \tbl\t20000008 \\<__code4_veneer\\>\n+\n+20000008 \\<__code4_veneer\\>:\n+20000008:\te51ff004 \tldr\tpc, \\[pc, #-4\\]\t; 2000000c \\<__code4_veneer\\+0x4\\>\n+2000000c:\t30040000 \t.word\t0x30040000\n+\n+Disassembly of section .ramz:\n+\n+30040000 \\<code4\\>:\n+30040000:\te1a00000 \t.word\t0xe1a00000\n+30040004:\te1a00000 \t.word\t0xe1a00000\n+30040008:\te1a00000 \t.word\t0xe1a00000\n+3004000c:\te1a00000 \t.word\t0xe1a00000\n+30040010:\te1a00000 \t.word\t0xe1a00000\n+30040014:\te1a00000 \t.word\t0xe1a00000\n+30040018:\te1a00000 \t.word\t0xe1a00000\n+3004001c:\te1a00000 \t.word\t0xe1a00000\n+30040020:\te1a00000 \t.word\t0xe1a00000\n+30040024:\te1a00000 \t.word\t0xe1a00000\n+30040028:\te1a00000 \t.word\t0xe1a00000\n+3004002c:\te1a00000 \t.word\t0xe1a00000\n+30040030:\te1a00000 \t.word\t0xe1a00000\n+30040034:\te1a00000 \t.word\t0xe1a00000\n+30040038:\te1a00000 \t.word\t0xe1a00000\n+3004003c:\te1a00000 \t.word\t0xe1a00000\n+30040040:\te1a00000 \t.word\t0xe1a00000\n+30040044:\te1a00000 \t.word\t0xe1a00000\n+30040048:\te1a00000 \t.word\t0xe1a00000\n+3004004c:\te1a00000 \t.word\t0xe1a00000"
    },
    {
      "sha": "81bb695a07fc40e7e30fb1efbc13ae2ddcedb637",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm3.ld",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm3.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm3.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm3.ld?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,33 @@\n+/*\n+ sections .code.1 and .code.2 fit in .raml\n+ section .code.3 fits in .ramu even with a farcall stub to jump to code4\n+ section .code.4 fits in .ramz\n+*/\n+MEMORY\n+{\n+  RAML (rwx) : ORIGIN = 0x1FFF0000, LENGTH = 0x0001c\n+  RAMU (rwx) : ORIGIN = 0x20000000, LENGTH = 0x00010\n+  RAMZ (rwx) : ORIGIN = 0x30040000, LENGTH = 0x00400\n+}\n+\n+SECTIONS\n+{\n+   .raml :\n+   {  _raml_start = . ;\n+      *(.boot) ;\n+      *(.code) *(.code.*) ;\n+      _raml_end = . ;\n+   } > RAML\n+\n+   .ramu : AT ( ADDR (.raml) + SIZEOF (.raml) )\n+   {  _ramu_start = . ;\n+      *(.code) *(.code.*) ;\n+      _ramu_end = . ;\n+   } > RAMU\n+\n+   .ramz : AT ( ADDR (.ramu) + SIZEOF (.ramu) )\n+   {  _ramz_start = . ;\n+      *(.code) *(.code.*) ;\n+     _ramz_end = . ;\n+   } > RAMZ\n+}"
    },
    {
      "sha": "28417c0df4a7b692d1689a33a7a35a0b3262d00b",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm4.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm4.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm4.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm4.d?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,4 @@\n+#name: non-contiguous-arm4\n+#source: non-contiguous-arm.s\n+#ld: --enable-non-contiguous-regions -T non-contiguous-arm4.ld\n+# error: \\AOutput section '.ramu' not large enough for the linker-created stubs section '.code.3.__stub'.*\\Z"
    },
    {
      "sha": "1e0c376fc7a9d536db38c6ce69cc8cdd2f859f19",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm4.ld",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm4.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm4.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm4.ld?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,34 @@\n+/*\n+ sections .code.1 and .code.2 fit in .raml\n+ section .code.3 fits in .ramu but not its farcall stub to jump to code4\n+ section .code.4 fits in .ramz\n+ expect an error about .code.3\n+*/\n+MEMORY\n+{\n+  RAML (rwx) : ORIGIN = 0x1FFF0000, LENGTH = 0x0001c\n+  RAMU (rwx) : ORIGIN = 0x20000000, LENGTH = 0x00008\n+  RAMZ (rwx) : ORIGIN = 0x30040000, LENGTH = 0x00400\n+}\n+\n+SECTIONS\n+{\n+   .raml :\n+   {  _raml_start = . ;\n+      *(.boot) ;\n+      *(.code) *(.code.*) ;\n+      _raml_end = . ;\n+   } > RAML\n+\n+   .ramu : AT ( ADDR (.raml) + SIZEOF (.raml) )\n+   {  _ramu_start = . ;\n+      *(.code) *(.code.*) ;\n+      _ramu_end = . ;\n+   } > RAMU\n+\n+   .ramz : AT ( ADDR (.ramu) + SIZEOF (.ramu) )\n+   {  _ramz_start = . ;\n+      *(.code) *(.code.*) ;\n+     _ramz_end = . ;\n+   } > RAMZ\n+}"
    },
    {
      "sha": "dc85d1eaba9d5af1f20d61b010207af6d5cf3ba1",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm5.d",
      "status": "added",
      "additions": 77,
      "deletions": 0,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm5.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm5.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm5.d?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,77 @@\n+#name: non-contiguous-arm5\n+#source: non-contiguous-arm.s\n+#ld: --enable-non-contiguous-regions -T non-contiguous-arm5.ld\n+#objdump: -rdth\n+#xfail: [is_generic]\n+\n+.*:     file format elf32-(little|big)arm.*\n+\n+Sections:\n+Idx Name          Size      VMA       LMA       File off  Algn\n+  0 \\.raml         0000000c  1fff0000  1fff0000  00010000  2\\*\\*2\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n+  1 \\.ramu         00000014  20000000  1fff000c  00020000  2\\*\\*2\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n+  2 \\.ramz         00000050  20040000  20000014  00030000  2\\*\\*2\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n+  3 .ARM.attributes 00000012  00000000  00000000  .*  2\\*\\*0\n+                  CONTENTS, READONLY\n+SYMBOL TABLE:\n+1fff0000 l    d  .raml\t00000000 .raml\n+20000000 l    d  .ramu\t00000000 .ramu\n+20040000 l    d  .ramz\t00000000 .ramz\n+00000000 l    d  .ARM.attributes\t00000000 .ARM.attributes\n+00000000 l    df \\*ABS\\*\t00000000 .*/non-contiguous-arm.o\n+1fff000c g       .raml\t00000000 _raml_end\n+20000000 g       .ramu\t00000000 _ramu_start\n+20000000 g     F .ramu\t00000000 code2\n+20040000 g       .ramz\t00000000 _ramz_start\n+1fff0000 g       .raml\t00000000 _raml_start\n+2000000c g     F .ramu\t00000000 code3\n+1fff0000 g     F .raml\t00000000 code1\n+20040050 g       .ramz\t00000000 _ramz_end\n+20040000 g     F .ramz\t00000000 code4\n+20000014 g       .ramu\t00000000 _ramu_end\n+\n+\n+Disassembly of section .raml:\n+\n+1fff0000 \\<code1\\>:\n+1fff0000:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0004:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0008:\teb003ffc \tbl\t20000000 \\<code2\\>\n+\n+Disassembly of section .ramu:\n+\n+20000000 \\<code2\\>:\n+20000000:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+20000004:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+20000008:\tebffffff \tbl\t2000000c \\<code3\\>\n+\n+2000000c \\<code3\\>:\n+2000000c:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+20000010:\teb00fffa \tbl\t20040000 \\<code4\\>\n+\n+Disassembly of section .ramz:\n+\n+20040000 \\<code4\\>:\n+20040000:\te1a00000 \t.word\t0xe1a00000\n+20040004:\te1a00000 \t.word\t0xe1a00000\n+20040008:\te1a00000 \t.word\t0xe1a00000\n+2004000c:\te1a00000 \t.word\t0xe1a00000\n+20040010:\te1a00000 \t.word\t0xe1a00000\n+20040014:\te1a00000 \t.word\t0xe1a00000\n+20040018:\te1a00000 \t.word\t0xe1a00000\n+2004001c:\te1a00000 \t.word\t0xe1a00000\n+20040020:\te1a00000 \t.word\t0xe1a00000\n+20040024:\te1a00000 \t.word\t0xe1a00000\n+20040028:\te1a00000 \t.word\t0xe1a00000\n+2004002c:\te1a00000 \t.word\t0xe1a00000\n+20040030:\te1a00000 \t.word\t0xe1a00000\n+20040034:\te1a00000 \t.word\t0xe1a00000\n+20040038:\te1a00000 \t.word\t0xe1a00000\n+2004003c:\te1a00000 \t.word\t0xe1a00000\n+20040040:\te1a00000 \t.word\t0xe1a00000\n+20040044:\te1a00000 \t.word\t0xe1a00000\n+20040048:\te1a00000 \t.word\t0xe1a00000\n+2004004c:\te1a00000 \t.word\t0xe1a00000"
    },
    {
      "sha": "99c02343e0991765954341e7853e6c103dedaa6c",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm5.ld",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm5.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm5.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm5.ld?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,34 @@\n+/*\n+ section .code.1 fits in .raml\n+ section .code.2 does not fit in .raml and goes to .ramu\n+ section .code.3 would fit in .raml, but goes to .ramu:  Check that .code.2 and .code.3 are not swapped\n+ section .code.4 fits in .ramz\n+*/\n+MEMORY\n+{\n+  RAML (rwx) : ORIGIN = 0x1FFF0000, LENGTH = 0x00014\n+  RAMU (rwx) : ORIGIN = 0x20000000, LENGTH = 0x00020\n+  RAMZ (rwx) : ORIGIN = 0x20040000, LENGTH = 0x00400\n+}\n+\n+SECTIONS\n+{\n+   .raml :\n+   {  _raml_start = . ;\n+      *(.boot) ;\n+      *(.code) *(.code.*) ;\n+      _raml_end = . ;\n+   } > RAML\n+\n+   .ramu : AT ( ADDR (.raml) + SIZEOF (.raml) )\n+   {  _ramu_start = . ;\n+      *(.code) *(.code.*) ;\n+      _ramu_end = . ;\n+   } > RAMU\n+\n+   .ramz : AT ( ADDR (.ramu) + SIZEOF (.ramu) )\n+   {  _ramz_start = . ;\n+      *(.code) *(.code.*) ;\n+     _ramz_end = . ;\n+   } > RAMZ\n+}"
    },
    {
      "sha": "605d846cfa02351f385a1bef70ebc821cf5bebed",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm6.d",
      "status": "added",
      "additions": 77,
      "deletions": 0,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm6.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm6.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm6.d?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,77 @@\n+#name: non-contiguous-arm6\n+#source: non-contiguous-arm.s\n+#ld: --enable-non-contiguous-regions -T non-contiguous-arm6.ld\n+#objdump: -rdth\n+#xfail: [is_generic]\n+#skip: arm*nacl\n+\n+.*:     file format elf32-(little|big)arm\n+\n+Sections:\n+Idx Name          Size      VMA       LMA       File off  Algn\n+  0 \\.raml         00000028  1fff0000  1fff0000  00010000  2\\*\\*3\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n+  1 \\.ramz         00000050  40040000  30000000  00020000  2\\*\\*2\n+                  CONTENTS, ALLOC, LOAD, READONLY, CODE\n+  2 .ARM.attributes 00000012  00000000  00000000  00020050  2\\*\\*0\n+                  CONTENTS, READONLY\n+SYMBOL TABLE:\n+1fff0000 l    d  .raml\t00000000 .raml\n+40040000 l    d  .ramz\t00000000 .ramz\n+00000000 l    d  .ARM.attributes\t00000000 .ARM.attributes\n+00000000 l    df \\*ABS\\*\t00000000 .*/non-contiguous-arm.o\n+1fff0020 l     F .raml\t00000008 __code4_veneer\n+1fff0028 g       .raml\t00000000 _raml_end\n+30000000 g       .raml\t00000000 _ramu_start\n+1fff000c g     F .raml\t00000000 code2\n+40040000 g       .ramz\t00000000 _ramz_start\n+1fff0000 g       .raml\t00000000 _raml_start\n+1fff0018 g     F .raml\t00000000 code3\n+1fff0000 g     F .raml\t00000000 code1\n+40040050 g       .ramz\t00000000 _ramz_end\n+40040000 g     F .ramz\t00000000 code4\n+30000000 g       .raml\t00000000 _ramu_end\n+\n+Disassembly of section .raml:\n+\n+1fff0000 \\<code1\\>:\n+1fff0000:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0004:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0008:\tebffffff \tbl\t1fff000c \\<code2\\>\n+\n+1fff000c \\<code2\\>:\n+1fff000c:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0010:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff0014:\tebffffff \tbl\t1fff0018 \\<code3\\>\n+\n+1fff0018 \\<code3\\>:\n+1fff0018:\te1a00000 \tnop\t\t\t; \\(mov r0, r0\\)\n+1fff001c:\tebffffff \tbl\t1fff0020 \\<__code4_veneer\\>\n+\n+1fff0020 \\<__code4_veneer\\>:\n+1fff0020:\te51ff004 \tldr\tpc, \\[pc, #-4\\]\t; 1fff0024 \\<__code4_veneer\\+0x4\\>\n+1fff0024:\t40040000 \t.word\t0x40040000\n+\n+Disassembly of section .ramz:\n+\n+40040000 \\<code4\\>:\n+40040000:\te1a00000 \t.word\t0xe1a00000\n+40040004:\te1a00000 \t.word\t0xe1a00000\n+40040008:\te1a00000 \t.word\t0xe1a00000\n+4004000c:\te1a00000 \t.word\t0xe1a00000\n+40040010:\te1a00000 \t.word\t0xe1a00000\n+40040014:\te1a00000 \t.word\t0xe1a00000\n+40040018:\te1a00000 \t.word\t0xe1a00000\n+4004001c:\te1a00000 \t.word\t0xe1a00000\n+40040020:\te1a00000 \t.word\t0xe1a00000\n+40040024:\te1a00000 \t.word\t0xe1a00000\n+40040028:\te1a00000 \t.word\t0xe1a00000\n+4004002c:\te1a00000 \t.word\t0xe1a00000\n+40040030:\te1a00000 \t.word\t0xe1a00000\n+40040034:\te1a00000 \t.word\t0xe1a00000\n+40040038:\te1a00000 \t.word\t0xe1a00000\n+4004003c:\te1a00000 \t.word\t0xe1a00000\n+40040040:\te1a00000 \t.word\t0xe1a00000\n+40040044:\te1a00000 \t.word\t0xe1a00000\n+40040048:\te1a00000 \t.word\t0xe1a00000\n+4004004c:\te1a00000 \t.word\t0xe1a00000"
    },
    {
      "sha": "6d6d6fe214a7c0261fbd400ee33832631cfdd012",
      "filename": "ld/testsuite/ld-arm/non-contiguous-arm6.ld",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm6.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-arm/non-contiguous-arm6.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/non-contiguous-arm6.ld?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,33 @@\n+/*\n+ sections .code.1, .code.2 and .code.3 (+ farcall stub) fit in .raml\n+ section .code.4 fits in .ramz\n+ nothing fits in .ramu\n+*/\n+MEMORY\n+{\n+  RAML (rwx) : ORIGIN = 0x1FFF0000, LENGTH = 0x00030\n+  RAMU (rwx) : ORIGIN = 0x30000000, LENGTH = 0x00010\n+  RAMZ (rwx) : ORIGIN = 0x40040000, LENGTH = 0x00400\n+}\n+\n+SECTIONS\n+{\n+   .raml :\n+   {  _raml_start = . ;\n+      *(.boot) ;\n+      *(.code) *(.code.*) ;\n+      _raml_end = . ;\n+   } > RAML\n+\n+   .ramu : AT ( ADDR (.raml) + SIZEOF (.raml) )\n+   {  _ramu_start = . ;\n+      *(.code) *(.code.*) ;\n+      _ramu_end = . ;\n+   } > RAMU\n+\n+   .ramz : AT ( ADDR (.ramu) + SIZEOF (.ramu) )\n+   {  _ramz_start = . ;\n+      *(.code) *(.code.*) ;\n+     _ramz_end = . ;\n+   } > RAMZ\n+}"
    },
    {
      "sha": "9694bcf9333f18bac3071a0bdf648bdc77bcd581",
      "filename": "ld/testsuite/ld-elf/non-contiguous.d",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-elf/non-contiguous.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-elf/non-contiguous.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/non-contiguous.d?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,29 @@\n+#name: non-contiguous\n+#source: non-contiguous.s\n+#ld: --enable-non-contiguous-regions -T non-contiguous.ld\n+#objdump: -rdsh\n+#xfail: [is_generic]\n+#skip: xtensa*\n+\n+.*:     file format .*\n+\n+Sections:\n+Idx Name          Size      VMA  *     LMA  *     File off  Algn\n+  0 \\.raml         0000000c  0*1fff0000  0*1fff0000  .*  2\\*\\*.\n+                  CONTENTS, ALLOC, LOAD, DATA\n+  1 \\.ramu         00000014  0*20000000  0*1fff000c  .*  2\\*\\*.\n+                  CONTENTS, ALLOC, LOAD, DATA\n+  2 \\.ramz         0000003c  0*20040000  0*20000014  .*  2\\*\\*.\n+                  CONTENTS, ALLOC, LOAD, DATA\n+\n+\n+Contents of section .raml:\n+ 1fff0000 (010+ 020+ 030+|0+01 0+02 0+03)           ............    \n+Contents of section .ramu:\n+ 20000000 (040+ 050+ 060+ 070+|0+04 0+05 0+06 0+07)  ................\n+ 20000010 (080+|0+08)                             ....            \n+Contents of section .ramz:\n+ 20040000 09090909 09090909 09090909 09090909  ................\n+ 20040010 09090909 09090909 09090909 09090909  ................\n+ 20040020 09090909 09090909 09090909 09090909  ................\n+ 20040030 09090909 09090909 09090909           ............    "
    },
    {
      "sha": "fc72253bfaa47d21b393641280d40b9bd3854ccc",
      "filename": "ld/testsuite/ld-elf/non-contiguous.ld",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-elf/non-contiguous.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-elf/non-contiguous.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/non-contiguous.ld?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,47 @@\n+/*\n+ section .data.1 fits in .raml\n+ sections .data.2 .data.3 fit in .ramu\n+ section .data.4 fits in .ramz\n+*/\n+MEMORY\n+{\n+  RAML (rwx) : ORIGIN = 0x1FFF0000, LENGTH = 0x00014\n+  RAMU (rwx) : ORIGIN = 0x20000000, LENGTH = 0x00040\n+  RAMZ (rwx) : ORIGIN = 0x20040000, LENGTH = 0x00040\n+}\n+\n+SECTIONS\n+{\n+   /* Ignore this target specific info in output comparison.  */\n+   /DISCARD/ : {\n+             *(.ARM.attributes)\n+\t     *(.ARC.attributes)\n+\t     *(.riscv.attributes)\n+\t     *(.c6xabi.attributes)\n+\t     *(.trampolines)\n+\t     *(.reginfo)\n+\t     *(.note.renesas)\n+\t     *(.MIPS.abiflags)\n+\t     *(.MSP430.attributes)\n+\t     *(.gnu.attributes)\n+   }\n+\n+   .raml : /*AT ( ADDR (.text) + SIZEOF (.text) )*/\n+   {  _raml_start = . ;\n+      *(.boot) ;\n+      *(.data) *(.data.*) ;\n+      _raml_end = . ;\n+   } > RAML\n+\n+   .ramu : AT ( ADDR (.raml) + SIZEOF (.raml) )\n+   {  _ramu_start = . ;\n+      *(.data) *(.data.*) ;\n+      _ramu_end = . ;\n+   } > RAMU\n+\n+   .ramz : AT ( ADDR (.ramu) + SIZEOF (.ramu) )\n+   {  _ramz_start = . ;\n+      *(.data) *(.data.*) ;\n+     _ramz_end = . ;\n+   } > RAMZ\n+}"
    },
    {
      "sha": "19bc2b14d451e1d4c162a9eda68321e375f50482",
      "filename": "ld/testsuite/ld-elf/non-contiguous.s",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-elf/non-contiguous.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-elf/non-contiguous.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/non-contiguous.s?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,21 @@\n+\t.section .data.1, \"a\", %progbits\n+\t# Fit in RAML\n+\t.4byte 1\n+\t.4byte 2\n+\t.4byte 3\n+\n+\t.section .data.2, \"a\", %progbits\n+\t# Fit in RAMU\n+\t.4byte 4\n+\t.4byte 5\n+\t.4byte 6\n+\n+\t.section .data.3, \"a\", %progbits\n+\t# Fit in RAMU\n+\t.4byte 7\n+\t.4byte 8\n+\n+\t.section .data.4, \"a\", %progbits\n+\t# Fit in RAMZ\n+\t.fill 0x3c, 1, 9\n+"
    },
    {
      "sha": "858e353b5d3e2ccd4c9f3e38b66145764c816541",
      "filename": "ld/testsuite/ld-powerpc/non-contiguous-powerpc.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-powerpc/non-contiguous-powerpc.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-powerpc/non-contiguous-powerpc.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/non-contiguous-powerpc.d?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,5 @@\n+#name: non-contiguous-powerpc\n+#source: non-contiguous-powerpc.s\n+#ld: --enable-non-contiguous-regions -T non-contiguous-powerpc.ld\n+#error: \\ARelaxation not supported with --enable-non-contiguous-regions.*\n+#skip: powerpc64*-*"
    },
    {
      "sha": "744d2463df28b182f0753247313206b696e79669",
      "filename": "ld/testsuite/ld-powerpc/non-contiguous-powerpc.ld",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-powerpc/non-contiguous-powerpc.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-powerpc/non-contiguous-powerpc.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/non-contiguous-powerpc.ld?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,22 @@\n+/* Distance between 'one' and 'two' means that relaxation implies that\n+   .text.one's size increases. Even though the result would fit in\n+   'oneandhalf', this is not supported by\n+   --enable-non-contiguous-regions.  */\n+\n+MEMORY {\n+       one (RXAI) : ORIGIN = 0x00000000, LENGTH = 0x00000010\n+       oneandhalf (RXAI) : ORIGIN = 0x00001000, LENGTH = 0x00001010\n+       two (RXAI) : ORIGIN = 0x20000000, LENGTH = 0x10000000\n+}\n+\n+SECTIONS {\n+      one : {\n+         *(.text.one)\n+      } > one\n+      oneandhalf : {\n+         *(.text.one)\n+      } > oneandhalf\n+      two : {\n+      *(.text.two)\n+      } > two\n+}"
    },
    {
      "sha": "e02b322d2d870ce7edef14473d6219f85fd42db1",
      "filename": "ld/testsuite/ld-powerpc/non-contiguous-powerpc.s",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-powerpc/non-contiguous-powerpc.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-powerpc/non-contiguous-powerpc.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/non-contiguous-powerpc.s?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,8 @@\n+\t.machine \"ppc\"\n+\n+\t.section .text.one\n+\tb\t2f\n+\n+\t.section .text.two\n+2:\n+\tnop"
    },
    {
      "sha": "ff0e3fc3f8b5938eb9a10e15bba1fc2cccbf2f1c",
      "filename": "ld/testsuite/ld-powerpc/non-contiguous-powerpc64.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-powerpc/non-contiguous-powerpc64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-powerpc/non-contiguous-powerpc64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/non-contiguous-powerpc64.d?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -0,0 +1,5 @@\n+#name: non-contiguous-powerpc64\n+#source: non-contiguous-powerpc.s\n+#as: -a64\n+#ld: -melf64ppc --enable-non-contiguous-regions -T non-contiguous-powerpc.ld\n+#error: .*Could not assign group.*"
    },
    {
      "sha": "84d7c9c42e3973b25a13da7f6f9d5b67867ef03c",
      "filename": "ld/testsuite/ld-powerpc/powerpc.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-powerpc/powerpc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abf874aafe3d717573e4a48bf0e3c6334e666a55/ld/testsuite/ld-powerpc/powerpc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/powerpc.exp?ref=abf874aafe3d717573e4a48bf0e3c6334e666a55",
      "patch": "@@ -405,6 +405,7 @@ if [ supports_ppc64 ] then {\n     run_dump_test \"tlsgd\"\n     run_dump_test \"tlsld\"\n     run_dump_test \"tlsie\"\n+    run_dump_test \"non-contiguous-powerpc64\"\n }\n \n run_dump_test \"localgot\"\n@@ -443,3 +444,5 @@ run_dump_test \"vle-multiseg-6\"\n \n run_dump_test \"ppc476-shared\"\n run_dump_test \"ppc476-shared2\"\n+\n+run_dump_test \"non-contiguous-powerpc\""
    }
  ]
}