{
  "sha": "6a89db5c9513d5e00e02b01095bf0c18e496dcc8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmE4OWRiNWM5NTEzZDVlMDBlMDJiMDEwOTViZjBjMThlNDk2ZGNjOA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-30T01:18:20Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-30T02:59:24Z"
    },
    "message": "archive.c bfd_zalloc\n\nQuite a few bfd_zalloc calls are wasting time clearing memory, and\nshould be bfd_alloc instead.\n\n\t* archive.c (do_slurp_bsd_armap): Use bfd_alloc rather than\n\tbfd_zalloc when memory is all written after the call.\n\t(do_slurp_coff_armap): Likewise.  Set bfd_error on ridiculously\n\tlarge allocations that overflow bfd_size_type.  Use just one\n\tbfd_release on error exit.\n\t(_bfd_slurp_extended_name_table): Use bfd_alloc for extended_names,\n\tclear last byte rather than the entire array.  Use bfd_alloc for\n\tstring table.  Rearrange and simplify code copying file names.",
    "tree": {
      "sha": "31cd8716958eb7acd9d9f07b43e0fb31f4ef0929",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/31cd8716958eb7acd9d9f07b43e0fb31f4ef0929"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6a89db5c9513d5e00e02b01095bf0c18e496dcc8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a89db5c9513d5e00e02b01095bf0c18e496dcc8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6a89db5c9513d5e00e02b01095bf0c18e496dcc8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a89db5c9513d5e00e02b01095bf0c18e496dcc8/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "61b3df8f5b7c75e51a4fe45bc7e479b4b482a1cd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61b3df8f5b7c75e51a4fe45bc7e479b4b482a1cd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/61b3df8f5b7c75e51a4fe45bc7e479b4b482a1cd"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 32,
    "deletions": 25
  },
  "files": [
    {
      "sha": "186346e9c159c5e165ab1871d71f43a3ba35fbc3",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a89db5c9513d5e00e02b01095bf0c18e496dcc8/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a89db5c9513d5e00e02b01095bf0c18e496dcc8/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=6a89db5c9513d5e00e02b01095bf0c18e496dcc8",
      "patch": "@@ -1,3 +1,14 @@\n+2019-12-30  Alan Modra  <amodra@gmail.com>\n+\n+\t* archive.c (do_slurp_bsd_armap): Use bfd_alloc rather than\n+\tbfd_zalloc when memory is all written after the call.\n+\t(do_slurp_coff_armap): Likewise.  Set bfd_error on ridiculously\n+\tlarge allocations that overflow bfd_size_type.  Use just one\n+\tbfd_release on error exit.\n+\t(_bfd_slurp_extended_name_table): Use bfd_alloc for extended_names,\n+\tclear last byte rather than the entire array.  Use bfd_alloc for\n+\tstring table.  Rearrange and simplify code copying file names.\n+\n 2019-12-29  Alan Modra  <amodra@gmail.com>\n \n \t* vms-alpha.c (_bfd_vms_slurp_egsd): Make base_addr a bfd_vma."
    },
    {
      "sha": "578df092d4fb976bb609d0a783bf2f76df768664",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 21,
      "deletions": 25,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a89db5c9513d5e00e02b01095bf0c18e496dcc8/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a89db5c9513d5e00e02b01095bf0c18e496dcc8/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=6a89db5c9513d5e00e02b01095bf0c18e496dcc8",
      "patch": "@@ -968,7 +968,7 @@ do_slurp_bsd_armap (bfd *abfd)\n   if (parsed_size < 4)\n     return FALSE;\n \n-  raw_armap = (bfd_byte *) bfd_zalloc (abfd, parsed_size);\n+  raw_armap = (bfd_byte *) bfd_alloc (abfd, parsed_size);\n   if (raw_armap == NULL)\n     return FALSE;\n \n@@ -1059,16 +1059,22 @@ do_slurp_coff_armap (bfd *abfd)\n      bsd-style one in core all at once, for simplicity.  */\n \n   if (nsymz > ~ (bfd_size_type) 0 / sizeof (carsym))\n-    return FALSE;\n+    {\n+      bfd_set_error (bfd_error_no_memory);\n+      return FALSE;\n+    }\n \n   carsym_size = (nsymz * sizeof (carsym));\n   ptrsize = (4 * nsymz);\n \n   if (carsym_size + stringsize + 1 <= carsym_size)\n-    return FALSE;\n+    {\n+      bfd_set_error (bfd_error_no_memory);\n+      return FALSE;\n+    }\n \n-  ardata->symdefs = (struct carsym *) bfd_zalloc (abfd,\n-\t\t\t\t\t\t  carsym_size + stringsize + 1);\n+  ardata->symdefs = (struct carsym *) bfd_alloc (abfd,\n+\t\t\t\t\t\t carsym_size + stringsize + 1);\n   if (ardata->symdefs == NULL)\n     return FALSE;\n   carsyms = ardata->symdefs;\n@@ -1083,7 +1089,7 @@ do_slurp_coff_armap (bfd *abfd)\n     {\n       if (bfd_get_error () != bfd_error_system_call)\n \tbfd_set_error (bfd_error_malformed_archive);\n-      goto release_raw_armap;\n+      goto release_symdefs;\n     }\n \n   /* OK, build the carsyms.  */\n@@ -1128,8 +1134,6 @@ do_slurp_coff_armap (bfd *abfd)\n \n   return TRUE;\n \n-release_raw_armap:\n-  bfd_release (abfd, raw_armap);\n release_symdefs:\n   bfd_release (abfd, (ardata)->symdefs);\n   return FALSE;\n@@ -1238,7 +1242,7 @@ _bfd_slurp_extended_name_table (bfd *abfd)\n \tgoto byebye;\n \n       bfd_ardata (abfd)->extended_names_size = amt;\n-      bfd_ardata (abfd)->extended_names = (char *) bfd_zalloc (abfd, amt + 1);\n+      bfd_ardata (abfd)->extended_names = (char *) bfd_alloc (abfd, amt + 1);\n       if (bfd_ardata (abfd)->extended_names == NULL)\n \t{\n \tbyebye:\n@@ -1256,6 +1260,7 @@ _bfd_slurp_extended_name_table (bfd *abfd)\n \t  bfd_ardata (abfd)->extended_names = NULL;\n \t  goto byebye;\n \t}\n+      bfd_ardata (abfd)->extended_names[amt] = 0;\n \n       /* Since the archive is supposed to be printable if it contains\n \t text, the entries in the list are newline-padded, not null\n@@ -1607,7 +1612,7 @@ _bfd_construct_extended_name_table (bfd *abfd,\n   if (total_namelen == 0)\n     return TRUE;\n \n-  *tabloc = (char *) bfd_zalloc (abfd, total_namelen);\n+  *tabloc = (char *) bfd_alloc (abfd, total_namelen);\n   if (*tabloc == NULL)\n     return FALSE;\n \n@@ -1664,16 +1669,14 @@ _bfd_construct_extended_name_table (bfd *abfd,\n \t    stroff = last_stroff;\n \t  else\n \t    {\n-\t      strcpy (strptr, normal);\n-\t      if (! trailing_slash)\n-\t\tstrptr[thislen] = ARFMAG[1];\n-\t      else\n-\t\t{\n-\t\t  strptr[thislen] = '/';\n-\t\t  strptr[thislen + 1] = ARFMAG[1];\n-\t\t}\n+\t      last_filename = filename;\n \t      stroff = strptr - *tabloc;\n \t      last_stroff = stroff;\n+\t      memcpy (strptr, normal, thislen);\n+\t      strptr += thislen;\n+\t      if (trailing_slash)\n+\t\t*strptr++ = '/';\n+\t      *strptr++ = ARFMAG[1];\n \t    }\n \t  hdr->ar_name[0] = ar_padchar (current);\n \t  if (bfd_is_thin_archive (abfd) && current->origin > 0)\n@@ -1686,13 +1689,6 @@ _bfd_construct_extended_name_table (bfd *abfd,\n \t    }\n \t  else\n \t    _bfd_ar_spacepad (hdr->ar_name + 1, maxname - 1, \"%-ld\", stroff);\n-\t  if (normal != last_filename)\n-\t    {\n-\t      strptr += thislen + 1;\n-\t      if (trailing_slash)\n-\t\t++strptr;\n-\t      last_filename = filename;\n-\t    }\n \t}\n     }\n "
    }
  ]
}