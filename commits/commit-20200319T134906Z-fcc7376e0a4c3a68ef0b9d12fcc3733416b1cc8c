{
  "sha": "fcc7376e0a4c3a68ef0b9d12fcc3733416b1cc8c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmNjNzM3NmUwYTRjM2E2OGVmMGI5ZDEyZmNjMzczMzQxNmIxY2M4Yw==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-19T13:01:36Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-19T13:49:06Z"
    },
    "message": "Avoid get_ptrace_pid() usage on NetBSD in x86-bsd-nat.c\n\nAdd gdb_ptrace() that wraps the ptrace(2) API and correctly passes\nthe pid,lwp pair to the calls on NetBSD; and the result of\nget_ptrace_pid() on other BSD Operating Systems.\n\ngdb/ChangeLog:\n\n\t* x86-bsd-nat.c (gdb_ptrace): New.\n\t* (x86bsd_dr_set): Add new argument `ptid'.\n\t* (x86bsd_dr_get, x86bsd_dr_set, x86bsd_dr_set_control,\n\tx86bsd_dr_set_addr): Update.",
    "tree": {
      "sha": "72c3bf069f89cbca5e81e39ad3efcfdc56c11505",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/72c3bf069f89cbca5e81e39ad3efcfdc56c11505"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fcc7376e0a4c3a68ef0b9d12fcc3733416b1cc8c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fcc7376e0a4c3a68ef0b9d12fcc3733416b1cc8c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fcc7376e0a4c3a68ef0b9d12fcc3733416b1cc8c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fcc7376e0a4c3a68ef0b9d12fcc3733416b1cc8c/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ef3df11042c3dbaf695c1260b42364688cafa8ea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef3df11042c3dbaf695c1260b42364688cafa8ea",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ef3df11042c3dbaf695c1260b42364688cafa8ea"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 27,
    "deletions": 23
  },
  "files": [
    {
      "sha": "0955d648e79b41ab50c3da3a4ec254efb4779350",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fcc7376e0a4c3a68ef0b9d12fcc3733416b1cc8c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fcc7376e0a4c3a68ef0b9d12fcc3733416b1cc8c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fcc7376e0a4c3a68ef0b9d12fcc3733416b1cc8c",
      "patch": "@@ -1,3 +1,10 @@\n+2020-03-19  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* x86-bsd-nat.c (gdb_ptrace): New.\n+\t* (x86bsd_dr_set): Add new argument `ptid'.\n+\t* (x86bsd_dr_get, x86bsd_dr_set, x86bsd_dr_set_control,\n+\tx86bsd_dr_set_addr): Update.\n+\n 2020-03-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* remote.c (remote_target::process_stop_reply): Handle events for"
    },
    {
      "sha": "9e2bea1e0208638b3453e1191bb1f540bb075114",
      "filename": "gdb/x86-bsd-nat.c",
      "status": "modified",
      "additions": 20,
      "deletions": 23,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fcc7376e0a4c3a68ef0b9d12fcc3733416b1cc8c/gdb/x86-bsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fcc7376e0a4c3a68ef0b9d12fcc3733416b1cc8c/gdb/x86-bsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/x86-bsd-nat.c?ref=fcc7376e0a4c3a68ef0b9d12fcc3733416b1cc8c",
      "patch": "@@ -33,6 +33,19 @@\n #include \"inf-ptrace.h\"\n \f\n \n+static int\n+gdb_ptrace (PTRACE_TYPE_ARG1 request, ptid_t ptid, PTRACE_TYPE_ARG3 addr)\n+{\n+#ifdef __NetBSD__\n+  /* Support for NetBSD threads: unlike other ptrace implementations in this\n+     file, NetBSD requires that we pass both the pid and lwp.  */\n+  return ptrace (request, ptid.pid (), addr, ptid.lwp ());\n+#else\n+  pid_t pid = get_ptrace_pid (ptid);\n+  return ptrace (request, pid, addr, 0);\n+#endif\n+}\n+\n #ifdef PT_GETXSTATE_INFO\n size_t x86bsd_xsave_len;\n #endif\n@@ -56,31 +69,19 @@ static unsigned long\n x86bsd_dr_get (ptid_t ptid, int regnum)\n {\n   struct dbreg dbregs;\n-#ifdef __NetBSD__\n-  int lwp = inferior_ptid.lwp ();\n-#else\n-  int lwp = 0;\n-#endif\n \n-  if (ptrace (PT_GETDBREGS, get_ptrace_pid (inferior_ptid),\n-\t      (PTRACE_TYPE_ARG3) &dbregs, lwp) == -1)\n+  if (gdb_ptrace (PT_GETDBREGS, ptid, (PTRACE_TYPE_ARG3) &dbregs) == -1)\n     perror_with_name (_(\"Couldn't read debug registers\"));\n \n   return DBREG_DRX ((&dbregs), regnum);\n }\n \n static void\n-x86bsd_dr_set (int regnum, unsigned long value)\n+x86bsd_dr_set (ptid_t ptid, int regnum, unsigned long value)\n {\n   struct dbreg dbregs;\n-#ifdef __NetBSD__\n-  int lwp = inferior_ptid.lwp ();\n-#else\n-  int lwp = 0;\n-#endif\n \n-  if (ptrace (PT_GETDBREGS, get_ptrace_pid (inferior_ptid),\n-              (PTRACE_TYPE_ARG3) &dbregs, lwp) == -1)\n+  if (gdb_ptrace (PT_GETDBREGS, ptid, (PTRACE_TYPE_ARG3) &dbregs) == -1)\n     perror_with_name (_(\"Couldn't get debug registers\"));\n \n   /* For some mysterious reason, some of the reserved bits in the\n@@ -92,28 +93,24 @@ x86bsd_dr_set (int regnum, unsigned long value)\n \n   for (thread_info *thread : current_inferior ()->non_exited_threads ())\n     {\n-#ifdef __NetBSD__\n-      lwp = thread->ptid.lwp ();\n-#endif\n-\n-      if (ptrace (PT_SETDBREGS, get_ptrace_pid (thread->ptid),\n-\t\t  (PTRACE_TYPE_ARG3) &dbregs, lwp) == -1)\n+      if (gdb_ptrace (PT_SETDBREGS, thread->ptid,\n+\t\t      (PTRACE_TYPE_ARG3) &dbregs) == -1)\n \tperror_with_name (_(\"Couldn't write debug registers\"));\n     }\n }\n \n static void\n x86bsd_dr_set_control (unsigned long control)\n {\n-  x86bsd_dr_set (7, control);\n+  x86bsd_dr_set (inferior_ptid, 7, control);\n }\n \n static void\n x86bsd_dr_set_addr (int regnum, CORE_ADDR addr)\n {\n   gdb_assert (regnum >= 0 && regnum <= 4);\n \n-  x86bsd_dr_set (regnum, addr);\n+  x86bsd_dr_set (inferior_ptid, regnum, addr);\n }\n \n static CORE_ADDR"
    }
  ]
}