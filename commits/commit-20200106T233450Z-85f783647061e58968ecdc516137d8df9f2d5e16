{
  "sha": "85f783647061e58968ecdc516137d8df9f2d5e16",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODVmNzgzNjQ3MDYxZTU4OTY4ZWNkYzUxNjEzN2Q4ZGY5ZjJkNWUxNg==",
  "commit": {
    "author": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2020-01-06T23:34:50Z"
    },
    "committer": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2020-01-06T23:34:50Z"
    },
    "message": "RISC-V: Fix weak function call reloc overflow on llvm build.\n\n\tbfd/\n\tPR 25205\n\t* elfnn-riscv.c (riscv_elf_relocate_section) <R_RISCV_CALL>: Add\n\tcheck for !bfd_link_pic (info).\n\t<R_RISCV_CALL_PLT>: Move next to R_RISCV_CALL.\n\t<R_RISCV_JAL>: Add comment.\n\t(_bfd_riscv_relax_section): For plt.offset check, add check for\n\tbfd_link_pic (info).  Add comment.\n\nChange-Id: Ie769bc3d5adf096a51df5cc12efe3d50e80acb8f",
    "tree": {
      "sha": "f746bf0ec31629fbd171c10bc960c27d0571f530",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f746bf0ec31629fbd171c10bc960c27d0571f530"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/85f783647061e58968ecdc516137d8df9f2d5e16",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85f783647061e58968ecdc516137d8df9f2d5e16",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/85f783647061e58968ecdc516137d8df9f2d5e16",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85f783647061e58968ecdc516137d8df9f2d5e16/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "85e290dc1252d77e726c0892b197be449b34bd16",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85e290dc1252d77e726c0892b197be449b34bd16",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/85e290dc1252d77e726c0892b197be449b34bd16"
    }
  ],
  "stats": {
    "total": 19,
    "additions": 16,
    "deletions": 3
  },
  "files": [
    {
      "sha": "da9260b10539a39c0ce3009270a814bed1cec426",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85f783647061e58968ecdc516137d8df9f2d5e16/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85f783647061e58968ecdc516137d8df9f2d5e16/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=85f783647061e58968ecdc516137d8df9f2d5e16",
      "patch": "@@ -1,3 +1,13 @@\n+2020-01-06  Jim Wilson  <jimw@sifive.com>\n+\n+\tPR 25205\n+\t* elfnn-riscv.c (riscv_elf_relocate_section) <R_RISCV_CALL>: Add\n+\tcheck for !bfd_link_pic (info).\n+\t<R_RISCV_CALL_PLT>: Move next to R_RISCV_CALL.\n+\t<R_RISCV_JAL>: Add comment.\n+\t(_bfd_riscv_relax_section): For plt.offset check, add check for\n+\tbfd_link_pic (info).  Add comment.\n+\n 2020-01-06  Alan Modra  <amodra@gmail.com>\n \n \t* format.c (bfd_check_format_matches): Ignore bfd_error on target"
    },
    {
      "sha": "46f0100ace3da966ee94932df17cfc1721266451",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85f783647061e58968ecdc516137d8df9f2d5e16/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85f783647061e58968ecdc516137d8df9f2d5e16/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=85f783647061e58968ecdc516137d8df9f2d5e16",
      "patch": "@@ -1987,10 +1987,11 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t  break;\n \n \tcase R_RISCV_CALL:\n+\tcase R_RISCV_CALL_PLT:\n \t  /* Handle a call to an undefined weak function.  This won't be\n \t     relaxed, so we have to handle it here.  */\n \t  if (h != NULL && h->root.type == bfd_link_hash_undefweak\n-\t      && h->plt.offset == MINUS_ONE)\n+\t      && (!bfd_link_pic (info) || h->plt.offset == MINUS_ONE))\n \t    {\n \t      /* We can use x0 as the base register.  */\n \t      bfd_vma insn = bfd_get_32 (input_bfd,\n@@ -2003,9 +2004,9 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t    }\n \t  /* Fall through.  */\n \n-\tcase R_RISCV_CALL_PLT:\n \tcase R_RISCV_JAL:\n \tcase R_RISCV_RVC_JUMP:\n+\t  /* This line has to match the check in _bfd_riscv_relax_section.  */\n \t  if (bfd_link_pic (info) && h != NULL && h->plt.offset != MINUS_ONE)\n \t    {\n \t      /* Refer to the PLT entry.  */\n@@ -4128,7 +4129,9 @@ _bfd_riscv_relax_section (bfd *abfd, asection *sec,\n \t      undefined_weak = TRUE;\n \t    }\n \n-\t  if (h->plt.offset != MINUS_ONE)\n+\t  /* This line has to match the check in riscv_elf_relocate_section\n+\t     in the R_RISCV_CALL[_PLT] case.  */\n+\t  if (bfd_link_pic (info) && h->plt.offset != MINUS_ONE)\n \t    {\n \t      sym_sec = htab->elf.splt;\n \t      symval = h->plt.offset;"
    }
  ]
}