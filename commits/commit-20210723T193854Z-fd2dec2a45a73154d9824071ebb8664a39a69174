{
  "sha": "fd2dec2a45a73154d9824071ebb8664a39a69174",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmQyZGVjMmE0NWE3MzE1NGQ5ODI0MDcxZWJiODY2NGEzOWE2OTE3NA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-25T21:54:55Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-23T19:38:54Z"
    },
    "message": "gdb: make inferior::m_args an std::string\n\nWith the current code, both a NULL pointer and an empty string can mean\n\"no arguments\".  We don't need this distinction.  Changing to a string\nhas the advantage that there is now a single state for that (an empty\nstring), which makes the code a bit simpler in my opinion.\n\nChange-Id: Icdc622820f7869478791dbaa84b4a1c7fec21ced",
    "tree": {
      "sha": "2297cdb9fa147b25a87d354a0f7e1452f71a64d3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2297cdb9fa147b25a87d354a0f7e1452f71a64d3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fd2dec2a45a73154d9824071ebb8664a39a69174",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd2dec2a45a73154d9824071ebb8664a39a69174",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fd2dec2a45a73154d9824071ebb8664a39a69174",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd2dec2a45a73154d9824071ebb8664a39a69174/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "90cc31c9e59a75122c2371fdf43f53d91e6ad5d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6"
    }
  ],
  "stats": {
    "total": 58,
    "additions": 23,
    "deletions": 35
  },
  "files": [
    {
      "sha": "1802ffb1ac097d5eea9877897fd90c5ebf308347",
      "filename": "gdb/elf-none-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/elf-none-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/elf-none-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elf-none-tdep.c?ref=fd2dec2a45a73154d9824071ebb8664a39a69174",
      "patch": "@@ -49,9 +49,9 @@ elf_none_make_corefile_notes (struct gdbarch *gdbarch, bfd *obfd,\n       fname = lbasename (exe);\n       psargs = std::string (exe);\n \n-      const char *infargs = current_inferior ()->args ();\n-      if (infargs != nullptr)\n-\tpsargs += \" \" + std::string (infargs);\n+      const std::string &infargs = current_inferior ()->args ();\n+      if (!infargs.empty ())\n+\tpsargs += ' ' + infargs;\n \n       /* All existing targets that handle writing out prpsinfo expect the\n \t fname and psargs strings to be at least 16 and 80 characters long"
    },
    {
      "sha": "07cd844c818faf9407062232f2b2f23131f3fc5d",
      "filename": "gdb/fbsd-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-tdep.c?ref=fd2dec2a45a73154d9824071ebb8664a39a69174",
      "patch": "@@ -684,9 +684,9 @@ fbsd_make_corefile_notes (struct gdbarch *gdbarch, bfd *obfd, int *note_size)\n       const char *fname = lbasename (get_exec_file (0));\n       std::string psargs = fname;\n \n-      const char *infargs = current_inferior ()->args ();\n-      if (infargs != NULL)\n-\tpsargs = psargs + \" \" + infargs;\n+      const std::string &infargs = current_inferior ()->args ();\n+      if (!infargs.empty ())\n+\tpsargs += ' ' + infargs;\n \n       note_data.reset (elfcore_write_prpsinfo (obfd, note_data.release (),\n \t\t\t\t\t       note_size, fname,"
    },
    {
      "sha": "2d0d6cc3e9655b88594277e570e1ca4d4cbeb96f",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=fd2dec2a45a73154d9824071ebb8664a39a69174",
      "patch": "@@ -129,7 +129,7 @@ set_inferior_args_vector (int argc, char **argv)\n {\n   gdb::array_view<char * const> args (argv, argc);\n   std::string n = construct_inferior_arguments (args);\n-  current_inferior ()->set_args (n.c_str ());\n+  current_inferior ()->set_args (std::move (n));\n }\n \n /* Notice when `set args' is run.  */\n@@ -151,7 +151,7 @@ show_args_command (struct ui_file *file, int from_tty,\n   /* Note that we ignore the passed-in value in favor of computing it\n      directly.  */\n   deprecated_show_value_hack (file, from_tty, c,\n-\t\t\t      current_inferior ()->args ());\n+\t\t\t      current_inferior ()->args ().c_str ());\n }\n \n /* See gdbsupport/common-inferior.h.  */"
    },
    {
      "sha": "72f2c29af7e08a952783709e8dd50ca2a4affceb",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 8,
      "deletions": 18,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=fd2dec2a45a73154d9824071ebb8664a39a69174",
      "patch": "@@ -444,26 +444,18 @@ class inferior : public refcounted_object,\n \n   /* Set the argument string to use when running this inferior.\n \n-     Either nullptr or an empty string can be used to represent \"no\n-     arguments\".  */\n-  void set_args (const char *args)\n+     An empty string can be used to represent \"no arguments\".  */\n+  void set_args (std::string args)\n   {\n-    if (args != nullptr && args[0] != '\\0')\n-      m_args = make_unique_xstrdup (args);\n-    else\n-      m_args.reset ();\n+    m_args = std::move (args);\n   };\n \n   /* Get the argument string to use when running this inferior.\n \n-     The return value is always non-nullptr.  No arguments is represented by\n-     an empty string.  */\n-  const char *args () const\n+     No arguments is represented by an empty string.  */\n+  const std::string &args () const\n   {\n-    if (m_args == nullptr)\n-      return \"\";\n-\n-    return m_args.get ();\n+    return m_args;\n   }\n \n   /* Set the inferior current working directory.\n@@ -602,10 +594,8 @@ class inferior : public refcounted_object,\n   /* The list of continuations.  */\n   std::list<std::function<void ()>> m_continuations;\n \n-  /* The arguments string to use when running.\n-\n-     This is nullptr when there are not args.  */\n-  gdb::unique_xmalloc_ptr<char> m_args;\n+  /* The arguments string to use when running.  */\n+  std::string m_args;\n \n   /* The current working directory that will be used when starting\n      this inferior.  */"
    },
    {
      "sha": "637d3d36a0bedd74980f3df8f0138c4dd5d19961",
      "filename": "gdb/linux-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.c?ref=fd2dec2a45a73154d9824071ebb8664a39a69174",
      "patch": "@@ -1847,12 +1847,12 @@ linux_fill_prpsinfo (struct elf_internal_linux_prpsinfo *p)\n   strncpy (p->pr_fname, basename, sizeof (p->pr_fname) - 1);\n   p->pr_fname[sizeof (p->pr_fname) - 1] = '\\0';\n \n-  const char *infargs = current_inferior ()->args ();\n+  const std::string &infargs = current_inferior ()->args ();\n \n   /* The arguments of the program.  */\n   std::string psargs = fname.get ();\n-  if (infargs != NULL)\n-    psargs = psargs + \" \" + infargs;\n+  if (!infargs.empty ())\n+    psargs += ' ' + infargs;\n \n   strncpy (p->pr_psargs, psargs.c_str (), sizeof (p->pr_psargs) - 1);\n   p->pr_psargs[sizeof (p->pr_psargs) - 1] = '\\0';"
    },
    {
      "sha": "a8ee9334a3ce362924c68be4d35bc351ee8d1b6e",
      "filename": "gdb/procfs.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/procfs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd2dec2a45a73154d9824071ebb8664a39a69174/gdb/procfs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/procfs.c?ref=fd2dec2a45a73154d9824071ebb8664a39a69174",
      "patch": "@@ -3603,7 +3603,6 @@ procfs_target::make_corefile_notes (bfd *obfd, int *note_size)\n   char psargs[80] = {'\\0'};\n   procinfo *pi = find_procinfo_or_die (inferior_ptid.pid (), 0);\n   gdb::unique_xmalloc_ptr<char> note_data;\n-  const char *inf_args;\n   enum gdb_signal stop_signal;\n \n   if (get_exec_file (0))\n@@ -3613,14 +3612,13 @@ procfs_target::make_corefile_notes (bfd *obfd, int *note_size)\n       strncpy (psargs, get_exec_file (0), sizeof (psargs));\n       psargs[sizeof (psargs) - 1] = 0;\n \n-      inf_args = current_inferior ()->args ();\n-      if (inf_args && *inf_args\n-\t  && (strlen (inf_args)\n-\t      < ((int) sizeof (psargs) - (int) strlen (psargs))))\n+      const std::string &inf_args = current_inferior ()->args ();\n+      if (!inf_args.empty () &&\n+\t  inf_args.length () < ((int) sizeof (psargs) - (int) strlen (psargs)))\n \t{\n \t  strncat (psargs, \" \",\n \t\t   sizeof (psargs) - strlen (psargs));\n-\t  strncat (psargs, inf_args,\n+\t  strncat (psargs, inf_args.c_str (),\n \t\t   sizeof (psargs) - strlen (psargs));\n \t}\n     }"
    }
  ]
}