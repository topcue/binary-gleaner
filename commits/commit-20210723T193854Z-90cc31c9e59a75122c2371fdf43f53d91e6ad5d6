{
  "sha": "90cc31c9e59a75122c2371fdf43f53d91e6ad5d6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTBjYzMxYzllNTlhNzUxMjJjMjM3MWZkZjQzZjUzZDkxZTZhZDVkNg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-26T01:57:56Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-23T19:38:54Z"
    },
    "message": "gdb: add setter/getter for inferior cwd\n\nAdd cwd/set_cwd to the inferior class, remove set_inferior_args.\nKeep get_inferior_args, because it is used from fork_inferior, in shared\ncode.  The cwd could eventually be passed as a parameter eventually,\nthough, I think that would be cleaner.\n\nChange-Id: Ifb72ea865d7e6f9a491308f0d5c1595579d8427e",
    "tree": {
      "sha": "e8cd9164ce1dd466ab94de2040f5d8172c3b84bc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e8cd9164ce1dd466ab94de2040f5d8172c3b84bc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 29,
    "deletions": 26
  },
  "files": [
    {
      "sha": "be6031d29364291e81dbbe2c6dfb67eceb988054",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 4,
      "deletions": 20,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=90cc31c9e59a75122c2371fdf43f53d91e6ad5d6",
      "patch": "@@ -154,28 +154,12 @@ show_args_command (struct ui_file *file, int from_tty,\n \t\t\t      current_inferior ()->args ());\n }\n \n-/* Set the inferior current working directory.  If CWD is NULL, unset\n-   the directory.  */\n-\n-static void\n-set_inferior_cwd (const char *cwd)\n-{\n-  struct inferior *inf = current_inferior ();\n-\n-  gdb_assert (inf != NULL);\n-\n-  if (cwd == NULL)\n-    inf->cwd.reset ();\n-  else\n-    inf->cwd.reset (xstrdup (cwd));\n-}\n-\n /* See gdbsupport/common-inferior.h.  */\n \n const char *\n get_inferior_cwd ()\n {\n-  return current_inferior ()->cwd.get ();\n+  return current_inferior ()->cwd ();\n }\n \n /* Handle the 'set cwd' command.  */\n@@ -184,9 +168,9 @@ static void\n set_cwd_command (const char *args, int from_tty, struct cmd_list_element *c)\n {\n   if (*inferior_cwd_scratch == '\\0')\n-    set_inferior_cwd (NULL);\n+    current_inferior ()->set_cwd (nullptr);\n   else\n-    set_inferior_cwd (inferior_cwd_scratch);\n+    current_inferior ()->set_cwd (inferior_cwd_scratch);\n }\n \n /* Handle the 'show cwd' command.  */\n@@ -195,7 +179,7 @@ static void\n show_cwd_command (struct ui_file *file, int from_tty,\n \t\t  struct cmd_list_element *c, const char *value)\n {\n-  const char *cwd = get_inferior_cwd ();\n+  const char *cwd = current_inferior ()->cwd ();\n \n   if (cwd == NULL)\n     fprintf_filtered (gdb_stdout,"
    },
    {
      "sha": "fb57df7aec44443636635051cfaef05c934947a9",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 23,
      "deletions": 4,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=90cc31c9e59a75122c2371fdf43f53d91e6ad5d6",
      "patch": "@@ -466,6 +466,25 @@ class inferior : public refcounted_object,\n     return m_args.get ();\n   }\n \n+  /* Set the inferior current working directory.\n+\n+     If CWD is NULL, unset the directory.  */\n+  void set_cwd (const char *cwd)\n+  {\n+    if (cwd == NULL)\n+      m_cwd.reset ();\n+    else\n+      m_cwd.reset (xstrdup (cwd));\n+  }\n+\n+  /* Get the inferior current working directory.\n+\n+     Return nullptr if the current working directory is not specified.  */\n+  const char *cwd () const\n+  {\n+    return m_cwd.get ();\n+  }\n+\n   /* Convenient handle (GDB inferior id).  Unique across all\n      inferiors.  */\n   int num = 0;\n@@ -495,10 +514,6 @@ class inferior : public refcounted_object,\n   /* The program space bound to this inferior.  */\n   struct program_space *pspace = NULL;\n \n-  /* The current working directory that will be used when starting\n-     this inferior.  */\n-  gdb::unique_xmalloc_ptr<char> cwd;\n-\n   /* The terminal state as set by the last target_terminal::terminal_*\n      call.  */\n   target_terminal_state terminal_state = target_terminal_state::is_ours;\n@@ -591,6 +606,10 @@ class inferior : public refcounted_object,\n \n      This is nullptr when there are not args.  */\n   gdb::unique_xmalloc_ptr<char> m_args;\n+\n+  /* The current working directory that will be used when starting\n+     this inferior.  */\n+  gdb::unique_xmalloc_ptr<char> m_cwd;\n };\n \n /* Keep a registry of per-inferior data-pointers required by other GDB"
    },
    {
      "sha": "dc3948ba67ebf29581b3f325c7de4d150c933281",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=90cc31c9e59a75122c2371fdf43f53d91e6ad5d6",
      "patch": "@@ -10391,7 +10391,7 @@ remote_target::extended_remote_set_inferior_cwd ()\n {\n   if (packet_support (PACKET_QSetWorkingDir) != PACKET_DISABLE)\n     {\n-      const char *inferior_cwd = get_inferior_cwd ();\n+      const char *inferior_cwd = current_inferior ()->cwd ();\n       remote_state *rs = get_remote_state ();\n \n       if (inferior_cwd != NULL)"
    },
    {
      "sha": "9526149311b1c7f8348764d563af85b51a9610bd",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90cc31c9e59a75122c2371fdf43f53d91e6ad5d6/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=90cc31c9e59a75122c2371fdf43f53d91e6ad5d6",
      "patch": "@@ -2558,7 +2558,7 @@ windows_nat_target::create_inferior (const char *exec_file,\n   if (!exec_file)\n     error (_(\"No executable specified, use `target exec'.\"));\n \n-  const char *inferior_cwd = get_inferior_cwd ();\n+  const char *inferior_cwd = current_inferior ()->cwd ();\n   std::string expanded_infcwd;\n   if (inferior_cwd != NULL)\n     {"
    }
  ]
}