{
  "sha": "96df3e28b835ccb5804bcca96f417761e5e8be67",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTZkZjNlMjhiODM1Y2NiNTgwNGJjY2E5NmY0MTc3NjFlNWU4YmU2Nw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-11T13:34:06Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-12T09:22:17Z"
    },
    "message": "gdb/fortran: support ALLOCATED builtin\n\nAdd support for the ALLOCATED keyword to the Fortran expression\nparser.\n\ngdb/ChangeLog:\n\n\t* f-exp.y (f77_keywords): Add allocated.\n\t* f-lang.c (evaluate_subexp_f): Handle UNOP_FORTRAN_ALLOCATED.\n\t(operator_length_f): Likewise.\n\t(print_subexp_f): Likewise.\n\t(dump_subexp_body_f): Likewise.\n\t(operator_check_f): Likewise.\n\t* std-operator.def (UNOP_FORTRAN_ALLOCATED): New operator.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/allocated.exp: New file.\n\t* gdb.fortran/allocated.f90: New file.",
    "tree": {
      "sha": "6b09c8d9cb20a88b9cf4081f1814cfafaa86de62",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6b09c8d9cb20a88b9cf4081f1814cfafaa86de62"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/96df3e28b835ccb5804bcca96f417761e5e8be67",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96df3e28b835ccb5804bcca96f417761e5e8be67",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/96df3e28b835ccb5804bcca96f417761e5e8be67",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96df3e28b835ccb5804bcca96f417761e5e8be67/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "17e04eff810ecf1f8392a995876a98361c565ec7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17e04eff810ecf1f8392a995876a98361c565ec7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/17e04eff810ecf1f8392a995876a98361c565ec7"
    }
  ],
  "stats": {
    "total": 136,
    "additions": 136,
    "deletions": 0
  },
  "files": [
    {
      "sha": "c71d779ced88b0c4d6c14f69f4fbc75679d955a3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=96df3e28b835ccb5804bcca96f417761e5e8be67",
      "patch": "@@ -1,3 +1,13 @@\n+2021-02-12  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* f-exp.y (f77_keywords): Add allocated.\n+\t* f-lang.c (evaluate_subexp_f): Handle UNOP_FORTRAN_ALLOCATED.\n+\t(operator_length_f): Likewise.\n+\t(print_subexp_f): Likewise.\n+\t(dump_subexp_body_f): Likewise.\n+\t(operator_check_f): Likewise.\n+\t* std-operator.def (UNOP_FORTRAN_ALLOCATED): New operator.\n+\n 2021-02-11  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/27353"
    },
    {
      "sha": "e95a2c974ca9168952bbc229469f094e8f8f893b",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=96df3e28b835ccb5804bcca96f417761e5e8be67",
      "patch": "@@ -1046,6 +1046,7 @@ static const struct token f77_keywords[] =\n   { \"cmplx\", BINOP_INTRINSIC, BINOP_FORTRAN_CMPLX, false },\n   { \"lbound\", UNOP_OR_BINOP_INTRINSIC, FORTRAN_LBOUND, false },\n   { \"ubound\", UNOP_OR_BINOP_INTRINSIC, FORTRAN_UBOUND, false },\n+  { \"allocated\", UNOP_INTRINSIC, UNOP_FORTRAN_ALLOCATED, false },\n };\n \n /* Implementation of a dynamically expandable buffer for processing input"
    },
    {
      "sha": "08ed56a746984641def91ae7729c678980504ab5",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=96df3e28b835ccb5804bcca96f417761e5e8be67",
      "patch": "@@ -906,6 +906,20 @@ evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n \treturn value_from_host_double (type, val);\n       }\n \n+    case UNOP_FORTRAN_ALLOCATED:\n+      {\n+\targ1 = evaluate_subexp (nullptr, exp, pos, noside);\n+\tif (noside == EVAL_SKIP)\n+\t  return eval_skip_value (exp);\n+\ttype = check_typedef (value_type (arg1));\n+\tif (type->code () != TYPE_CODE_ARRAY)\n+\t  error (_(\"ALLOCATED can only be applied to arrays\"));\n+\tstruct type *result_type\n+\t  = builtin_f_type (exp->gdbarch)->builtin_logical;\n+\tLONGEST result_value = type_not_allocated (type) ? 0 : 1;\n+\treturn value_from_longest (result_type, result_value);\n+      }\n+\n     case BINOP_FORTRAN_MODULO:\n       {\n \targ1 = evaluate_subexp (nullptr, exp, pos, noside);\n@@ -1118,6 +1132,7 @@ operator_length_f (const struct expression *exp, int pc, int *oplenp,\n     case UNOP_FORTRAN_KIND:\n     case UNOP_FORTRAN_FLOOR:\n     case UNOP_FORTRAN_CEILING:\n+    case UNOP_FORTRAN_ALLOCATED:\n       oplen = 1;\n       args = 1;\n       break;\n@@ -1203,6 +1218,10 @@ print_subexp_f (struct expression *exp, int *pos,\n       print_unop_subexp_f (exp, pos, stream, prec, \"CEILING\");\n       return;\n \n+    case UNOP_FORTRAN_ALLOCATED:\n+      print_unop_subexp_f (exp, pos, stream, prec, \"ALLOCATED\");\n+      return;\n+\n     case BINOP_FORTRAN_CMPLX:\n       print_binop_subexp_f (exp, pos, stream, prec, \"CMPLX\");\n       return;\n@@ -1252,6 +1271,7 @@ dump_subexp_body_f (struct expression *exp,\n     case UNOP_FORTRAN_KIND:\n     case UNOP_FORTRAN_FLOOR:\n     case UNOP_FORTRAN_CEILING:\n+    case UNOP_FORTRAN_ALLOCATED:\n     case BINOP_FORTRAN_CMPLX:\n     case BINOP_FORTRAN_MODULO:\n       operator_length_f (exp, (elt + 1), &oplen, &nargs);\n@@ -1288,6 +1308,7 @@ operator_check_f (struct expression *exp, int pos,\n     case UNOP_FORTRAN_KIND:\n     case UNOP_FORTRAN_FLOOR:\n     case UNOP_FORTRAN_CEILING:\n+    case UNOP_FORTRAN_ALLOCATED:\n     case BINOP_FORTRAN_CMPLX:\n     case BINOP_FORTRAN_MODULO:\n     case FORTRAN_LBOUND:"
    },
    {
      "sha": "f3533aa39083ea42af3e0166e09e74436f6437a1",
      "filename": "gdb/std-operator.def",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/std-operator.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/std-operator.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/std-operator.def?ref=96df3e28b835ccb5804bcca96f417761e5e8be67",
      "patch": "@@ -438,6 +438,7 @@ OP (OP_F77_UNDETERMINED_ARGLIST)\n OP (UNOP_FORTRAN_KIND)\n OP (UNOP_FORTRAN_FLOOR)\n OP (UNOP_FORTRAN_CEILING)\n+OP (UNOP_FORTRAN_ALLOCATED)\n \n /* Two operand builtins.  */\n OP (BINOP_FORTRAN_CMPLX)"
    },
    {
      "sha": "52b0752276bb500b995d9459429e2f36d60d2251",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=96df3e28b835ccb5804bcca96f417761e5e8be67",
      "patch": "@@ -1,3 +1,8 @@\n+2021-02-12  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/allocated.exp: New file.\n+\t* gdb.fortran/allocated.f90: New file.\n+\n 2021-02-11  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.fortran/lbound-ubound.exp: Remove old comment."
    },
    {
      "sha": "4391c5eec97a4a99083d396254ea64a32fce2c7b",
      "filename": "gdb/testsuite/gdb.fortran/allocated.exp",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/testsuite/gdb.fortran/allocated.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/testsuite/gdb.fortran/allocated.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/allocated.exp?ref=96df3e28b835ccb5804bcca96f417761e5e8be67",
      "patch": "@@ -0,0 +1,49 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/> .\n+\n+# Testing GDB's implementation of ALLOCATED keyword.\n+\n+if {[skip_fortran_tests]} { return -1 }\n+\n+standard_testfile \".f90\"\n+load_lib fortran.exp\n+\n+if {[prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} \\\n+\t {debug f90}]} {\n+    return -1\n+}\n+\n+if ![fortran_runto_main] {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+# Set all the breakpoints.\n+for { set i 1 } { $i < 6 } { incr i } {\n+    gdb_breakpoint [gdb_get_line_number \"Breakpoint $i\"]\n+}\n+\n+# Run to each test and check GDB calculates the ALLOCATED value of the\n+# array variable correctly.  We compare to a value calculated within\n+# the test program itself.\n+for { set i 1 } { $i < 6 } { incr i } {\n+    with_test_prefix \"Breakpoint $i\" {\n+\tgdb_continue_to_breakpoint \"found it\"\n+\tset expected [get_valueof \"\" \"is_allocated\" \"*unknown*\"]\n+\tset calculated [get_valueof \"\" \"allocated (array)\" \"*missing*\"]\n+\tgdb_assert { [string eq ${expected} ${calculated}] } \\\n+\t    \"expected and calculated results match\"\n+    }\n+}"
    },
    {
      "sha": "cfca2c809aac2a473db2ff5cc548341cc9549d80",
      "filename": "gdb/testsuite/gdb.fortran/allocated.f90",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/testsuite/gdb.fortran/allocated.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96df3e28b835ccb5804bcca96f417761e5e8be67/gdb/testsuite/gdb.fortran/allocated.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/allocated.f90?ref=96df3e28b835ccb5804bcca96f417761e5e8be67",
      "patch": "@@ -0,0 +1,49 @@\n+! Copyright 2021 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 3 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+!\n+! Start of test program.\n+!\n+program test\n+\n+  integer, allocatable :: array (:, :)\n+  logical is_allocated\n+\n+  is_allocated = allocated (array)\n+  print *, is_allocated ! Breakpoint 1\n+\n+  ! Allocate or associate any variables as needed.\n+  allocate (array (-5:4, -2:7))\n+\n+  is_allocated = allocated (array)\n+  print *, is_allocated ! Breakpoint 2\n+\n+  deallocate (array)\n+\n+  is_allocated = allocated (array)\n+  print *, is_allocated ! Breakpoint 3\n+\n+  allocate (array (3:8, 2:7))\n+\n+  is_allocated = allocated (array)\n+  print *, is_allocated ! Breakpoint 4\n+\n+  ! All done.  Deallocate.\n+  deallocate (array)\n+\n+  is_allocated = allocated (array)\n+  print *, is_allocated ! Breakpoint 5\n+\n+end program test"
    }
  ]
}