{
  "sha": "57a63d27dcc8c7620f2168b370b649c7458c687e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTdhNjNkMjdkY2M4Yzc2MjBmMjE2OGIzNzBiNjQ5Yzc0NThjNjg3ZQ==",
  "commit": {
    "author": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2019-06-13T12:27:10Z"
    },
    "committer": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2019-06-13T12:27:10Z"
    },
    "message": "sim/testsuite/or1k: Add tests for unordered compares\n\nAdd tests for 32-bit and 64-bit unordered compare instructions.\n\nsim/testsuite/sim/or1k/ChangeLog:\n\nyyyy-mm-dd  Stafford Horne  <shorne@gmail.com>\n\n\t* fpu-unordered.S: New file.\n\t* fpu64a32-unordered.S: New file.",
    "tree": {
      "sha": "a61ee20f68c1b59f2fadb3d6ecc946163eb5d1a4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a61ee20f68c1b59f2fadb3d6ecc946163eb5d1a4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/57a63d27dcc8c7620f2168b370b649c7458c687e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57a63d27dcc8c7620f2168b370b649c7458c687e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/57a63d27dcc8c7620f2168b370b649c7458c687e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57a63d27dcc8c7620f2168b370b649c7458c687e/comments",
  "author": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3c83b496d4ee7d732b6844c585c3ea9d83ca0f4c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3c83b496d4ee7d732b6844c585c3ea9d83ca0f4c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3c83b496d4ee7d732b6844c585c3ea9d83ca0f4c"
    }
  ],
  "stats": {
    "total": 202,
    "additions": 202,
    "deletions": 0
  },
  "files": [
    {
      "sha": "f5623809b9dc226777e93cf192a7ad3106f8cf98",
      "filename": "sim/testsuite/sim/or1k/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/57a63d27dcc8c7620f2168b370b649c7458c687e/sim/testsuite/sim/or1k/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/57a63d27dcc8c7620f2168b370b649c7458c687e/sim/testsuite/sim/or1k/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/or1k/ChangeLog?ref=57a63d27dcc8c7620f2168b370b649c7458c687e",
      "patch": "@@ -1,3 +1,8 @@\n+2019-06-13  Stafford Horne  <shorne@gmail.com>\n+\n+\t* fpu-unordered.S: New file.\n+\t* fpu64a32-unordered.S: New file.\n+\n 2019-06-13  Stafford Horne  <shorne@gmail.com>\n \n \t* adrp.S: New file."
    },
    {
      "sha": "5a0e884f0c2a68da7464ddcb6eb69b9b6db379ed",
      "filename": "sim/testsuite/sim/or1k/fpu-unordered.S",
      "status": "added",
      "additions": 97,
      "deletions": 0,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/57a63d27dcc8c7620f2168b370b649c7458c687e/sim/testsuite/sim/or1k/fpu-unordered.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/57a63d27dcc8c7620f2168b370b649c7458c687e/sim/testsuite/sim/or1k/fpu-unordered.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/or1k/fpu-unordered.S?ref=57a63d27dcc8c7620f2168b370b649c7458c687e",
      "patch": "@@ -0,0 +1,97 @@\n+/* Tests some basic unordered fpu compare instructions.\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+# mach: or1k\n+# output: report(0x40490fd0);\\n\n+# output: report(0x402df84d);\\n\n+# output: report(0x7fc00000);\\n\n+# output: \\n\n+# output: report(0x00000001);\\n\n+# output: \\n\n+# output: report(0x00000000);\\n\n+# output: \\n\n+# output: report(0x00000001);\\n\n+# output: \\n\n+# output: report(0x00000001);\\n\n+# output: \\n\n+# output: exit(0)\\n\n+\n+#include \"or1k-asm-test-helpers.h\"\n+\n+\tSTANDARD_TEST_ENVIRONMENT\n+\n+\t.section .data\n+\t.align 4\n+\t.type   pi, @object\n+\t.size   pi, 4\n+anchor:\n+pi:\n+\t.float  3.14159\n+\n+\t.type   e, @object\n+\t.size   e, 4\n+e:\n+\t.float  2.71828\n+\n+\t.section .text\n+start_tests:\n+\tPUSH LINK_REGISTER_R9\n+\n+\t/* Test unordered float comparisons.  Setting up:\n+\t *  r11      pointer to data\n+\t *  r12  pi  as float\n+\t *  r13  e   as float\n+\t *  r16  nan as float\n+\t */\n+\tl.ori\tr11, r0, ha(anchor)\n+\tl.addi\tr11, r11, lo(anchor)\n+\tl.lwz\tr12, 0(r11)\n+\n+\tl.lwz\tr13, 4(r11)\n+\n+\t/* Make a NaN.  */\n+\tlf.sub.s r16, r13, r13\n+\tlf.div.s r16, r16, r16\n+\n+\t/* Output to ensure we loaded it correctly.  */\n+\tREPORT_REG_TO_CONSOLE r12\n+\tREPORT_REG_TO_CONSOLE r13\n+\tREPORT_REG_TO_CONSOLE r16\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\tlf.sfuge.s r12, r13\n+\tMOVE_FROM_SPR r2, SPR_SR\n+\tREPORT_BIT_TO_CONSOLE r2, SPR_SR_F\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\tlf.sfun.s r12, r13\n+\tMOVE_FROM_SPR r2, SPR_SR\n+\tREPORT_BIT_TO_CONSOLE r2, SPR_SR_F\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\tlf.sfun.s r12, r16\n+\tMOVE_FROM_SPR r2, SPR_SR\n+\tREPORT_BIT_TO_CONSOLE r2, SPR_SR_F\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\tlf.sfueq.s r12, r12\n+\tMOVE_FROM_SPR r2, SPR_SR\n+\tREPORT_BIT_TO_CONSOLE r2, SPR_SR_F\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\tPOP LINK_REGISTER_R9\n+\tRETURN_TO_LINK_REGISTER_R9"
    },
    {
      "sha": "fe70dc6d77d2c681613b2ec853e0e84c89c0073a",
      "filename": "sim/testsuite/sim/or1k/fpu64a32-unordered.S",
      "status": "added",
      "additions": 100,
      "deletions": 0,
      "changes": 100,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/57a63d27dcc8c7620f2168b370b649c7458c687e/sim/testsuite/sim/or1k/fpu64a32-unordered.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/57a63d27dcc8c7620f2168b370b649c7458c687e/sim/testsuite/sim/or1k/fpu64a32-unordered.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/or1k/fpu64a32-unordered.S?ref=57a63d27dcc8c7620f2168b370b649c7458c687e",
      "patch": "@@ -0,0 +1,100 @@\n+/* Tests some basic unordered fpu compare instructions.\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+# mach: or1k\n+# output: report(0x400921f9);\\n\n+# output: report(0xf01b866e);\\n\n+# output: report(0x4005bf09);\\n\n+# output: report(0x95aaf790);\\n\n+# output: report(0x7ff80000);\\n\n+# output: report(0x00000000);\\n\n+# output: \\n\n+# output: report(0x00000001);\\n\n+# output: \\n\n+# output: report(0x00000000);\\n\n+# output: \\n\n+# output: report(0x00000001);\\n\n+# output: \\n\n+# output: exit(0)\\n\n+\n+#include \"or1k-asm-test-helpers.h\"\n+\n+\tSTANDARD_TEST_ENVIRONMENT\n+\n+\t.section .data\n+\t.align 4\n+\t.type   pi, @object\n+\t.size   pi, 8\n+anchor:\n+pi:\n+\t.double  3.14159\n+\n+\t.type   e, @object\n+\t.size   e, 8\n+e:\n+\t.double  2.71828\n+\n+\t.section .text\n+start_tests:\n+\tPUSH LINK_REGISTER_R9\n+\n+\t/* Test unordered double comparisons.  Setting up:\n+\t *  r11      pointer to data\n+\t *  r12,r13  pi  as double\n+\t *  r14,r15  e   as double\n+\t *  r16,r17  nan as double\n+\t */\n+\tl.ori\tr11, r0, ha(anchor)\n+\tl.addi\tr11, r11, lo(anchor)\n+\tl.lwz\tr12, 0(r11)\n+\tl.lwz\tr13, 4(r11)\n+\n+\tl.lwz\tr14, 8(r11)\n+\tl.lwz\tr15, 12(r11)\n+\n+\t/* Make a NaN.  */\n+\tlf.sub.d r16,r18, r12,r13, r12,r13\n+\tlf.div.d r16,r18, r16,r18, r16,r18\n+\n+\t/* Output to ensure we loaded it correctly.  */\n+\tREPORT_REG_TO_CONSOLE r12\n+\tREPORT_REG_TO_CONSOLE r13\n+\n+\tREPORT_REG_TO_CONSOLE r14\n+\tREPORT_REG_TO_CONSOLE r15\n+\n+\tREPORT_REG_TO_CONSOLE r16\n+\tREPORT_REG_TO_CONSOLE r18\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\tlf.sfuge.d r12,r13, r14,r15\n+\tMOVE_FROM_SPR r2, SPR_SR\n+\tREPORT_BIT_TO_CONSOLE r2, SPR_SR_F\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\tlf.sfun.d r12,r13, r14,r15\n+\tMOVE_FROM_SPR r2, SPR_SR\n+\tREPORT_BIT_TO_CONSOLE r2, SPR_SR_F\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\tlf.sfun.d r12,r13, r16,r18\n+\tMOVE_FROM_SPR r2, SPR_SR\n+\tREPORT_BIT_TO_CONSOLE r2, SPR_SR_F\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\tPOP LINK_REGISTER_R9\n+\tRETURN_TO_LINK_REGISTER_R9"
    }
  ]
}