{
  "sha": "c0aba012edb6068e2433cbac855715a349a8555f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzBhYmEwMTJlZGI2MDY4ZTI0MzNjYmFjODU1NzE1YTM0OWE4NTU1Zg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-12-04T21:43:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:43:52Z"
    },
    "message": "gdb: restore displaced step buffer bytes when another thread forks\n\nIn handle_inferior_event, where we handle forks, we make sure to restore\nthe bytes of the displaced stepping buffer in the child's address\nspace.  However, we only do it when the forking thread was the one\ndoing a displaced step.  It could happen that a thread forks while\nanother one is doing a displaced step.  In this case, we also need to\nrestore the bytes in the child.\n\nMove the byte-restoring code outside of the condition that checks\nwhether the event thread was displaced stepping.\n\ngdb/ChangeLog:\n\n\t* infrun.c (handle_inferior_event): Restore displaced step\n\tbuffer bytes in child process when handling fork, even if fork\n\thappened in another thread than the displaced-stepping one.\n\nChange-Id: Ibb0daaeb123aba03f4fb4b4d820754eb2436bc69",
    "tree": {
      "sha": "fedba3cb6c177579da48a67e672024247be123a6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fedba3cb6c177579da48a67e672024247be123a6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c0aba012edb6068e2433cbac855715a349a8555f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0aba012edb6068e2433cbac855715a349a8555f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c0aba012edb6068e2433cbac855715a349a8555f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0aba012edb6068e2433cbac855715a349a8555f/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3b7a962dec0d5d852ad5f1338add07781adef7b4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b7a962dec0d5d852ad5f1338add07781adef7b4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3b7a962dec0d5d852ad5f1338add07781adef7b4"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 21,
    "deletions": 13
  },
  "files": [
    {
      "sha": "f977321f15e5ec29103988d69e2cdba99c3941d7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0aba012edb6068e2433cbac855715a349a8555f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0aba012edb6068e2433cbac855715a349a8555f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c0aba012edb6068e2433cbac855715a349a8555f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-12-04  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* infrun.c (handle_inferior_event): Restore displaced step\n+\tbuffer bytes in child process when handling fork, even if fork\n+\thappened in another thread than the displaced-stepping one.\n+\n 2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* infrun.c (infrun_inferior_execd): New function."
    },
    {
      "sha": "5c383b4d8a12da81fbcddc57003a92dd30db7886",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0aba012edb6068e2433cbac855715a349a8555f/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0aba012edb6068e2433cbac855715a349a8555f/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=c0aba012edb6068e2433cbac855715a349a8555f",
      "patch": "@@ -5302,25 +5302,27 @@ handle_inferior_event (struct execution_control_state *ecs)\n       {\n \tstruct regcache *regcache = get_thread_regcache (ecs->event_thread);\n \tstruct gdbarch *gdbarch = regcache->arch ();\n+\tinferior *parent_inf = find_inferior_ptid (ecs->target, ecs->ptid);\n \n-\t/* If checking displaced stepping is supported, and thread\n-\t   ecs->ptid is displaced stepping.  */\n+\t/* If this is a fork (child gets its own address space copy) and the\n+\t   displaced step buffer was in use at the time of the fork, restore\n+\t   displaced step buffer bytes in the child process.  */\n+\tif (ecs->ws.kind == TARGET_WAITKIND_FORKED)\n+\t  {\n+\t    displaced_step_inferior_state *displaced\n+\t      = get_displaced_stepping_state (parent_inf);\n+\n+\t    if (displaced->step_thread != nullptr)\n+\t      displaced_step_restore (displaced, ecs->ws.value.related_pid);\n+\t  }\n+\n+\t/* If displaced stepping is supported, and thread ecs->ptid is\n+\t   displaced stepping.  */\n \tif (displaced_step_in_progress_thread (ecs->event_thread))\n \t  {\n-\t    struct inferior *parent_inf\n-\t      = find_inferior_ptid (ecs->target, ecs->ptid);\n \t    struct regcache *child_regcache;\n \t    CORE_ADDR parent_pc;\n \n-\t    if (ecs->ws.kind == TARGET_WAITKIND_FORKED)\n-\t      {\n-\t\tstruct displaced_step_inferior_state *displaced\n-\t\t  = get_displaced_stepping_state (parent_inf);\n-\n-\t\t/* Restore scratch pad for child process.  */\n-\t\tdisplaced_step_restore (displaced, ecs->ws.value.related_pid);\n-\t      }\n-\n \t    /* GDB has got TARGET_WAITKIND_FORKED or TARGET_WAITKIND_VFORKED,\n \t       indicating that the displaced stepping of syscall instruction\n \t       has been done.  Perform cleanup for parent process here.  Note"
    }
  ]
}