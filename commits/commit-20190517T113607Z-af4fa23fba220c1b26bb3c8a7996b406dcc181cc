{
  "sha": "af4fa23fba220c1b26bb3c8a7996b406dcc181cc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWY0ZmEyM2ZiYTIyMGMxYjI2YmIzYzhhNzk5NmI0MDZkY2MxODFjYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-17T09:39:42Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-17T11:36:07Z"
    },
    "message": "PR24567, assertion failure in ldlang.c:6868 when compiling with -flto\n\nAs the existing comment said: \"a common ought to be overridden by a\ndef in a -flto object\".  This patch makes the code actually do that,\nrather than allowing a normal object file common to override a -flto\ndefined symbol.\n\n\tPR 24567\n\t* plugin.c (plugin_notice): Do not let a common symbol override\n\ta non-common definition in IR.",
    "tree": {
      "sha": "502c2670681abe2aef1f70b768431ebfa201cb5b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/502c2670681abe2aef1f70b768431ebfa201cb5b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/af4fa23fba220c1b26bb3c8a7996b406dcc181cc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af4fa23fba220c1b26bb3c8a7996b406dcc181cc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/af4fa23fba220c1b26bb3c8a7996b406dcc181cc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af4fa23fba220c1b26bb3c8a7996b406dcc181cc/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "26648588294d039fcf1efbf512d785753cb6286d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26648588294d039fcf1efbf512d785753cb6286d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/26648588294d039fcf1efbf512d785753cb6286d"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 30,
    "deletions": 18
  },
  "files": [
    {
      "sha": "90216dae56d64801b8d783bcaa2188a29c20bd47",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af4fa23fba220c1b26bb3c8a7996b406dcc181cc/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af4fa23fba220c1b26bb3c8a7996b406dcc181cc/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=af4fa23fba220c1b26bb3c8a7996b406dcc181cc",
      "patch": "@@ -1,3 +1,9 @@\n+2019-05-17  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24567\n+\t* plugin.c (plugin_notice): Do not let a common symbol override\n+\ta non-common definition in IR.\n+\n 2019-05-09  Dimitar Dimitrov  <dimitar@dinux.eu>\n \n \t* scripttempl/pru.sc (__init_array_begin, __init_array_begin):"
    },
    {
      "sha": "fcd864a117ca576efbf6b8562f9266c620391579",
      "filename": "ld/plugin.c",
      "status": "modified",
      "additions": 24,
      "deletions": 18,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af4fa23fba220c1b26bb3c8a7996b406dcc181cc/ld/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af4fa23fba220c1b26bb3c8a7996b406dcc181cc/ld/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/plugin.c?ref=af4fa23fba220c1b26bb3c8a7996b406dcc181cc",
      "patch": "@@ -1406,30 +1406,36 @@ plugin_notice (struct bfd_link_info *info,\n \t  ref = TRUE;\n \t}\n \n-      /* Otherwise, it must be a new def.  */\n-      else\n+\n+      /* A common symbol should be merged with other commons or\n+\t defs with the same name.  In particular, a common ought\n+\t to be overridden by a def in a -flto object.  In that\n+\t sense a common is also a ref.  */\n+      else if (bfd_is_com_section (section))\n \t{\n-\t  /* Ensure any symbol defined in an IR dummy BFD takes on a\n-\t     new value from a real BFD.  Weak symbols are not normally\n-\t     overridden by a new weak definition, and strong symbols\n-\t     will normally cause multiple definition errors.  Avoid\n-\t     this by making the symbol appear to be undefined.  */\n-\t  if (((h->type == bfd_link_hash_defweak\n-\t\t|| h->type == bfd_link_hash_defined)\n-\t       && is_ir_dummy_bfd (sym_bfd = h->u.def.section->owner))\n-\t      || (h->type == bfd_link_hash_common\n-\t\t  && is_ir_dummy_bfd (sym_bfd = h->u.c.p->section->owner)))\n+\t  if (h->type == bfd_link_hash_common\n+\t      && is_ir_dummy_bfd (sym_bfd = h->u.c.p->section->owner))\n \t    {\n \t      h->type = bfd_link_hash_undefweak;\n \t      h->u.undef.abfd = sym_bfd;\n \t    }\n+\t  ref = TRUE;\n+\t}\n \n-\t  /* A common symbol should be merged with other commons or\n-\t     defs with the same name.  In particular, a common ought\n-\t     to be overridden by a def in a -flto object.  In that\n-\t     sense a common is also a ref.  */\n-\t  if (bfd_is_com_section (section))\n-\t    ref = TRUE;\n+      /* Otherwise, it must be a new def.\n+\t Ensure any symbol defined in an IR dummy BFD takes on a\n+\t new value from a real BFD.  Weak symbols are not normally\n+\t overridden by a new weak definition, and strong symbols\n+\t will normally cause multiple definition errors.  Avoid\n+\t this by making the symbol appear to be undefined.  */\n+      else if (((h->type == bfd_link_hash_defweak\n+\t\t || h->type == bfd_link_hash_defined)\n+\t\t&& is_ir_dummy_bfd (sym_bfd = h->u.def.section->owner))\n+\t       || (h->type == bfd_link_hash_common\n+\t\t   && is_ir_dummy_bfd (sym_bfd = h->u.c.p->section->owner)))\n+\t{\n+\t  h->type = bfd_link_hash_undefweak;\n+\t  h->u.undef.abfd = sym_bfd;\n \t}\n \n       if (ref)"
    }
  ]
}