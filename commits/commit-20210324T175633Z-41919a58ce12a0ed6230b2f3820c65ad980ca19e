{
  "sha": "41919a58ce12a0ed6230b2f3820c65ad980ca19e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDE5MTlhNThjZTEyYTBlZDYyMzBiMmYzODIwYzY1YWQ5ODBjYTE5ZQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-06-15T18:38:43Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-24T17:56:33Z"
    },
    "message": "AArch64: Add gdbserver MTE support\n\nAdds the AArch64-specific memory tagging support (MTE) by implementing the\nrequired hooks and checks for GDBserver.\n\ngdbserver/ChangeLog:\n\n2021-03-24  Luis Machado  <luis.machado@linaro.org>\n\n\t* Makefile.in (SFILES): Add /../gdb/nat/aarch64-mte-linux-ptrace.c.\n\t* configure.srv (aarch64*-*-linux*): Add arch/aarch64-mte-linux.o and\n\tnat/aarch64-mte-linux-ptrace.o.\n\t* linux-aarch64-low.cc: Include nat/aarch64-mte-linux-ptrace.h.\n\t(class aarch64_target) <supports_memory_tagging>\n\t<fetch_memtags, store_memtags>: New method overrides.\n\t(aarch64_target::supports_memory_tagging)\n\t(aarch64_target::fetch_memtags)\n\t(aarch64_target::store_memtags): New methods.",
    "tree": {
      "sha": "31091439ea9dc033e6e520c5f8fd0160e50b63f4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/31091439ea9dc033e6e520c5f8fd0160e50b63f4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/41919a58ce12a0ed6230b2f3820c65ad980ca19e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41919a58ce12a0ed6230b2f3820c65ad980ca19e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/41919a58ce12a0ed6230b2f3820c65ad980ca19e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41919a58ce12a0ed6230b2f3820c65ad980ca19e/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cf44c9fa1b94837b093752854370b9c2db531264",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf44c9fa1b94837b093752854370b9c2db531264",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cf44c9fa1b94837b093752854370b9c2db531264"
    }
  ],
  "stats": {
    "total": 76,
    "additions": 76,
    "deletions": 0
  },
  "files": [
    {
      "sha": "edce56b0eb9d2c1cce33ca5ed659eb860a176184",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41919a58ce12a0ed6230b2f3820c65ad980ca19e/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41919a58ce12a0ed6230b2f3820c65ad980ca19e/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=41919a58ce12a0ed6230b2f3820c65ad980ca19e",
      "patch": "@@ -1,3 +1,15 @@\n+2021-03-24  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* Makefile.in (SFILES): Add /../gdb/nat/aarch64-mte-linux-ptrace.c.\n+\t* configure.srv (aarch64*-*-linux*): Add arch/aarch64-mte-linux.o and\n+\tnat/aarch64-mte-linux-ptrace.o.\n+\t* linux-aarch64-low.cc: Include nat/aarch64-mte-linux-ptrace.h.\n+\t(class aarch64_target) <supports_memory_tagging>\n+\t<fetch_memtags, store_memtags>: New method overrides.\n+\t(aarch64_target::supports_memory_tagging)\n+\t(aarch64_target::fetch_memtags)\n+\t(aarch64_target::store_memtags): New methods.\n+\n 2021-03-24  Luis Machado  <luis.machado@linaro.org>\n \n \t* linux-aarch64-low.cc (aarch64_fill_mteregset): New function."
    },
    {
      "sha": "a05cd1a57ade5d32dcc01e20fca2bdfa3a58feb3",
      "filename": "gdbserver/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41919a58ce12a0ed6230b2f3820c65ad980ca19e/gdbserver/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41919a58ce12a0ed6230b2f3820c65ad980ca19e/gdbserver/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/Makefile.in?ref=41919a58ce12a0ed6230b2f3820c65ad980ca19e",
      "patch": "@@ -229,6 +229,7 @@ SFILES = \\\n \t$(srcdir)/../gdb/arch/arm-linux.c \\\n \t$(srcdir)/../gdb/arch/ppc-linux-common.c \\\n \t$(srcdir)/../gdb/arch/riscv.c \\\n+\t$(srcdir)/../gdb/nat/aarch64-mte-linux-ptrace.c \\\n \t$(srcdir)/../gdb/nat/aarch64-sve-linux-ptrace.c \\\n \t$(srcdir)/../gdb/nat/linux-btrace.c \\\n \t$(srcdir)/../gdb/nat/linux-namespaces.c \\"
    },
    {
      "sha": "2dd8f75a4e064cc20bd4bbc0d12edd6d5ad45fe6",
      "filename": "gdbserver/configure.srv",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41919a58ce12a0ed6230b2f3820c65ad980ca19e/gdbserver/configure.srv",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41919a58ce12a0ed6230b2f3820c65ad980ca19e/gdbserver/configure.srv",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/configure.srv?ref=41919a58ce12a0ed6230b2f3820c65ad980ca19e",
      "patch": "@@ -52,7 +52,9 @@ case \"${gdbserver_host}\" in\n \t\t\tsrv_tgtobj=\"$srv_tgtobj nat/aarch64-linux.o\"\n \t\t\tsrv_tgtobj=\"$srv_tgtobj arch/aarch64-insn.o\"\n \t\t\tsrv_tgtobj=\"$srv_tgtobj arch/aarch64.o\"\n+\t\t\tsrv_tgtobj=\"$srv_tgtobj arch/aarch64-mte-linux.o\"\n \t\t\tsrv_tgtobj=\"$srv_tgtobj linux-aarch64-tdesc.o\"\n+\t\t\tsrv_tgtobj=\"$srv_tgtobj nat/aarch64-mte-linux-ptrace.o\"\n \t\t\tsrv_tgtobj=\"$srv_tgtobj nat/aarch64-sve-linux-ptrace.o\"\n \t\t\tsrv_tgtobj=\"${srv_tgtobj} $srv_linux_obj\"\n \t\t\tsrv_linux_regsets=yes"
    },
    {
      "sha": "daccfef746e3174b4e75eb7d725655e2aa824ed7",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41919a58ce12a0ed6230b2f3820c65ad980ca19e/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41919a58ce12a0ed6230b2f3820c65ad980ca19e/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=41919a58ce12a0ed6230b2f3820c65ad980ca19e",
      "patch": "@@ -43,13 +43,18 @@\n #include \"arch/aarch64-mte-linux.h\"\n #include \"linux-aarch32-tdesc.h\"\n #include \"linux-aarch64-tdesc.h\"\n+#include \"nat/aarch64-mte-linux-ptrace.h\"\n #include \"nat/aarch64-sve-linux-ptrace.h\"\n #include \"tdesc.h\"\n \n #ifdef HAVE_SYS_REG_H\n #include <sys/reg.h>\n #endif\n \n+#ifdef HAVE_GETAUXVAL\n+#include <sys/auxv.h>\n+#endif\n+\n /* Linux target op definitions for the AArch64 architecture.  */\n \n class aarch64_target : public linux_process_target\n@@ -82,6 +87,14 @@ class aarch64_target : public linux_process_target\n \n   struct emit_ops *emit_ops () override;\n \n+  bool supports_memory_tagging () override;\n+\n+  bool fetch_memtags (CORE_ADDR address, size_t len,\n+\t\t      gdb::byte_vector &tags, int type) override;\n+\n+  bool store_memtags (CORE_ADDR address, size_t len,\n+\t\t      const gdb::byte_vector &tags, int type) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -3223,6 +3236,54 @@ aarch64_target::breakpoint_kind_from_current_state (CORE_ADDR *pcptr)\n     return arm_breakpoint_kind_from_current_state (pcptr);\n }\n \n+/* Returns true if memory tagging is supported.  */\n+bool\n+aarch64_target::supports_memory_tagging ()\n+{\n+  if (current_thread == NULL)\n+    {\n+      /* We don't have any processes running, so don't attempt to\n+\t use linux_get_hwcap2 as it will try to fetch the current\n+\t thread id.  Instead, just fetch the auxv from the self\n+\t PID.  */\n+#ifdef HAVE_GETAUXVAL\n+      return (getauxval (AT_HWCAP2) & HWCAP2_MTE) != 0;\n+#else\n+      return true;\n+#endif\n+    }\n+\n+  return (linux_get_hwcap2 (8) & HWCAP2_MTE) != 0;\n+}\n+\n+bool\n+aarch64_target::fetch_memtags (CORE_ADDR address, size_t len,\n+\t\t\t       gdb::byte_vector &tags, int type)\n+{\n+  /* Allocation tags are per-process, so any tid is fine.  */\n+  int tid = lwpid_of (current_thread);\n+\n+  /* Allocation tag?  */\n+  if (type == static_cast <int> (aarch64_memtag_type::mte_allocation))\n+    return aarch64_mte_fetch_memtags (tid, address, len, tags);\n+\n+  return false;\n+}\n+\n+bool\n+aarch64_target::store_memtags (CORE_ADDR address, size_t len,\n+\t\t\t       const gdb::byte_vector &tags, int type)\n+{\n+  /* Allocation tags are per-process, so any tid is fine.  */\n+  int tid = lwpid_of (current_thread);\n+\n+  /* Allocation tag?  */\n+  if (type == static_cast <int> (aarch64_memtag_type::mte_allocation))\n+    return aarch64_mte_store_memtags (tid, address, len, tags);\n+\n+  return false;\n+}\n+\n /* The linux target ops object.  */\n \n linux_process_target *the_linux_target = &the_aarch64_target;"
    }
  ]
}