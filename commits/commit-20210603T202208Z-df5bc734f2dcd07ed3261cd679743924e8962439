{
  "sha": "df5bc734f2dcd07ed3261cd679743924e8962439",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGY1YmM3MzRmMmRjZDA3ZWQzMjYxY2Q2Nzk3NDM5MjRlODk2MjQzOQ==",
  "commit": {
    "author": {
      "name": "Magne Hov",
      "email": "mhov@undo.io",
      "date": "2021-06-03T20:20:30Z"
    },
    "committer": {
      "name": "Magne Hov",
      "email": "mhov@undo.io",
      "date": "2021-06-03T20:22:08Z"
    },
    "message": "gdb: fix eval.c assert during inferior exit event\n\nEvaluating expressions from within an inferior exit event handler can\ncause a crash:\n\n    echo \"int main() { return 0; }\" > repro.c\n    gcc -g repro.c -o repro\n    ./gdb -q --ex \"set language c++\" --ex \"python gdb.events.exited.connect(lambda _: gdb.execute('set \\$_a=0'))\" --ex \"run\" repro\n\n    Reading symbols from repro...\n    Starting program: /home/mhov/repos/binutils-gdb-master/install-bad/bin/repro\n    [Inferior 1 (process 1974779) exited normally]\n    ../../gdb/thread.c:72: internal-error: thread_info* inferior_thread(): Assertion `current_thread_ != nullptr' failed.\n    A problem internal to GDB has been detected,\n    further debugging may prove unreliable.\n    Quit this debugging session? (y or n) [answered Y; input not from terminal]\n\n    This is a bug, please report it.  For instructions, see:\n    <https://www.gnu.org/software/gdb/bugs/>.\n\nBacktrace\n    0  in internal_error of ../../gdbsupport/errors.cc:51\n    1  in inferior_thread of ../../gdb/thread.c:72\n    2  in expression::evaluate of ../../gdb/eval.c:98\n    3  in evaluate_expression of ../../gdb/eval.c:115\n    4  in set_command of ../../gdb/printcmd.c:1502\n    5  in do_const_cfunc of ../../gdb/cli/cli-decode.c:101\n    6  in cmd_func of ../../gdb/cli/cli-decode.c:2181\n    7  in execute_command of ../../gdb/top.c:670\n    ...\n    22 in python_inferior_exit of ../../gdb/python/py-inferior.c:182\n\nIn `expression::evaluate (...)' there is a call to `inferior_thread\n()' that is guarded by `target_has_execution ()':\n\n    struct value *\n    expression::evaluate (struct type *expect_type, enum noside noside)\n    {\n      gdb::optional<enable_thread_stack_temporaries> stack_temporaries;\n      if (target_has_execution ()\n          && language_defn->la_language == language_cplus\n          && !thread_stack_temporaries_enabled_p (inferior_thread ()))\n        stack_temporaries.emplace (inferior_thread ());\n\nThe `target_has_execution ()' guard maps onto `inf->pid' and the\n`inferior_thread ()' call assumes that `current_thread_' is set to\nsomething meaningful:\n\n    struct thread_info*\n    inferior_thread (void)\n    {\n      gdb_assert (current_thread_ != nullptr);\n      return current_thread_;\n    }\n\nIn other words, it is assumed that if `inf->pid' is set then\n`current_thread_' must also be set. This does not hold at the point\nwhere inferior exit observers are notified:\n- `generic_mourn_inferior (...)'\n  - `switch_to_no_thread ()'\n    - `current_thread_ = nullptr;'\n  - `exit_inferior (...)'\n    - `gdb::observers::inferior_exit.notify (...)'\n    - `inf->pid = 0'\n\nThe inferior exit notification means that a Python handler can get a\nchance to run while `current_thread' has been cleared and the\n`inf->pid' has not been cleared. Since the Python handler can call any\nGDB command with `gdb.execute(...)' (in my case `gdb.execute(\"set\n$_a=0\")' we can end up evaluating expressions and asserting in\n`evaluate_subexp (...)'.\n\nThis patch adds a test in `evaluate_subexp (...)' to check the global\n`inferior_ptid' which is reset at the same time as `current_thread_'.\nChecking `inferior_ptid' at the same time as `target_has_execution ()'\nseems to be a common pattern:\n\n    $ git grep -n -e inferior_ptid --and -e target_has_execution\n    gdb/breakpoint.c:2998:    && (inferior_ptid == null_ptid || !target_has_execution ()))\n    gdb/breakpoint.c:3054:    && (inferior_ptid == null_ptid || !target_has_execution ()))\n    gdb/breakpoint.c:4587:  if (inferior_ptid == null_ptid || !target_has_execution ())\n    gdb/infcmd.c:360:  if (inferior_ptid != null_ptid && target_has_execution ())\n    gdb/infcmd.c:2380:  /* FIXME:  This should not really be inferior_ptid (or target_has_execution).\n    gdb/infrun.c:3438:  if (!target_has_execution () || inferior_ptid == null_ptid)\n    gdb/remote.c:11961:  if (!target_has_execution () || inferior_ptid == null_ptid)\n    gdb/solib.c:725:  if (target_has_execution () && inferior_ptid != null_ptid)\n\nThe testsuite has been run on 5.4.0-59-generic x86_64 GNU/Linux:\n- Ubuntu 20.04.1 LTS\n- gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\n- DejaGnu version 1.6.2\n  - Expect version 5.45.4\n  - Tcl version 8.6\n- Native configuration: x86_64-pc-linux-gnu\n- Target: unix\n\nResults show a few XFAIL in\ngdb.threads/attach-many-short-lived-threads.exp. The existing\npy-events.exp tests are skipped for native-gdbserver and fail for\nnative-extended-gdbserver, but the new tests pass with\nnative-extended-gdbserver when run without the existing tests.\n\ngdb/ChangeLog:\n\n2021-06-03  Magne Hov  <mhov@undo.io>\n\n\tPR python/27841\n\t* eval.c (expression::evaluate): Check inferior_ptid.\n\ngdb/testsuite/ChangeLog:\n\n2021-06-03  Magne Hov  <mhov@undo.io>\n\n\tPR python/27841\n\t* gdb.python/py-events.exp: Extend inferior exit tests.\n\t* gdb.python/py-events.py: Print inferior exit PID.",
    "tree": {
      "sha": "0c3b5b7edff73fe5a41a28df057f07c31fda7ed5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0c3b5b7edff73fe5a41a28df057f07c31fda7ed5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/df5bc734f2dcd07ed3261cd679743924e8962439",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df5bc734f2dcd07ed3261cd679743924e8962439",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/df5bc734f2dcd07ed3261cd679743924e8962439",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df5bc734f2dcd07ed3261cd679743924e8962439/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "415c8100a28d56628c01730ef279c61f99578518",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/415c8100a28d56628c01730ef279c61f99578518",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/415c8100a28d56628c01730ef279c61f99578518"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 54,
    "deletions": 1
  },
  "files": [
    {
      "sha": "1dd4d3e76f12bd5c6934b96985dce2d54ed53367",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df5bc734f2dcd07ed3261cd679743924e8962439/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df5bc734f2dcd07ed3261cd679743924e8962439/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=df5bc734f2dcd07ed3261cd679743924e8962439",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-03  Magne Hov  <mhov@undo.io>\n+\n+\tPR python/27841\n+\t* eval.c (expression::evaluate): Check inferior_ptid.\n+\n 2021-06-03  Pedro Alves  <pedro@palves.net>\n \n \t* MAINTAINERS (The Official FSF-appointed GDB Maintainers): Remove"
    },
    {
      "sha": "659493c8237ce4509e45bf031de624552edf4074",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df5bc734f2dcd07ed3261cd679743924e8962439/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df5bc734f2dcd07ed3261cd679743924e8962439/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=df5bc734f2dcd07ed3261cd679743924e8962439",
      "patch": "@@ -93,7 +93,7 @@ struct value *\n expression::evaluate (struct type *expect_type, enum noside noside)\n {\n   gdb::optional<enable_thread_stack_temporaries> stack_temporaries;\n-  if (target_has_execution ()\n+  if (target_has_execution () && inferior_ptid != null_ptid\n       && language_defn->la_language == language_cplus\n       && !thread_stack_temporaries_enabled_p (inferior_thread ()))\n     stack_temporaries.emplace (inferior_thread ());"
    },
    {
      "sha": "afa9ebf9f036993c1cba52088f2c9fc20c7bb77f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df5bc734f2dcd07ed3261cd679743924e8962439/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df5bc734f2dcd07ed3261cd679743924e8962439/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=df5bc734f2dcd07ed3261cd679743924e8962439",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-03  Magne Hov  <mhov@undo.io>\n+\n+\tPR python/27841\n+\t* gdb.python/py-events.exp: Extend inferior exit tests.\n+\t* gdb.python/py-events.py: Print inferior exit PID.\n+\n 2021-06-03  Hannes Domani  <ssbssa@yahoo.de>\n \n \t* gdb.python/py-symbol.exp: Test symbol constants."
    },
    {
      "sha": "753709361f54189c2eab89c1b6aa441465b5e372",
      "filename": "gdb/testsuite/gdb.python/py-events.exp",
      "status": "modified",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df5bc734f2dcd07ed3261cd679743924e8962439/gdb/testsuite/gdb.python/py-events.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df5bc734f2dcd07ed3261cd679743924e8962439/gdb/testsuite/gdb.python/py-events.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-events.exp?ref=df5bc734f2dcd07ed3261cd679743924e8962439",
      "patch": "@@ -197,18 +197,33 @@ gdb_test_multiple \"continue\" $test {\n gdb_test_no_output \"delete $second_breakpoint\"\n \n #test exited event.\n+proc get_process_id {test} {\n+    global gdb_prompt\n+    gdb_test_multiple \"info proc\" $test {\n+\t-re \"process (\\\\d+).*$gdb_prompt $\" {\n+\t    set process_id $expect_out(1,string)\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+    return ${process_id}\n+}\n+\n+set process_id [get_process_id \"get inferior 1 process id\"]\n gdb_test \"continue\" \".*event type: continue.*\n .*clear_objfiles\\[\\r\\n\\]*progspace: .*py-events.*\n .*event type: exit.*\n .*exit code: 12.*\n .*exit inf: 1.*\n+.*exit pid: $process_id.*\n dir ok: True.*\" \"Inferior 1 terminated.\"\n \n gdb_test \"inferior 2\" \".*Switching to inferior 2.*\"\n+set process_id [get_process_id \"get inferior 2 process id\"]\n gdb_test \"continue\" \".*event type: continue.*\n .*event type: exit.*\n .*exit code: 12.*\n .*exit inf: 2.*\n+.*exit pid: $process_id.*\n dir ok: True.*\" \"Inferior 2 terminated.\"\n \n \n@@ -235,3 +250,29 @@ gdb_test \"python print(count)\" 2 \"check for before_prompt event\"\n \n gdb_test_no_output \"xxz\" \"run a canned sequence\"\n gdb_test \"python print(count)\" 4 \"check for before_prompt event again\"\n+\n+# Test evaluating expressions from within an inferior exit event handler.  This\n+# used to cause a crash when expression were evaluated as C++.\n+gdb_test_no_output \"set language c++\"\n+\n+gdb_test_multiline \"add exited listener\" \\\n+    \"python\" \"\" \\\n+    \"def increment_foo(_):\" \"\" \\\n+    \"  gdb.execute('set \\$_foo=\\$_foo+1')\" \"\" \\\n+    \"gdb.events.exited.connect(increment_foo)\" \"\" \\\n+    \"end\" \"\"\n+gdb_test \"set \\$_foo=0\" \"\" \"initialize foo variable\"\n+gdb_test \"print \\$_foo\" \"= 0\" \"check foo initialized\"\n+\n+with_test_prefix \"inferior run exit\" {\n+    gdb_run_cmd\n+    gdb_test \"\" \"exited with code.*\" \"run to exit\"\n+    gdb_test \"print \\$_foo\" \"= 1\" \"check foo after run\"\n+}\n+\n+with_test_prefix \"inferior continue exit\" {\n+    gdb_start_cmd\n+    gdb_test \"\" \"Temporary breakpoint .* main .*\" \"stop on a frame\"\n+    gdb_test \"continue\" \"exited with code.*\" \"continue to exit\"\n+    gdb_test \"print \\$_foo\" \"= 2\" \"check foo after start continue\"\n+}"
    },
    {
      "sha": "1524267117db3cfcf192a121e4658269983f9211",
      "filename": "gdb/testsuite/gdb.python/py-events.py",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df5bc734f2dcd07ed3261cd679743924e8962439/gdb/testsuite/gdb.python/py-events.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df5bc734f2dcd07ed3261cd679743924e8962439/gdb/testsuite/gdb.python/py-events.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-events.py?ref=df5bc734f2dcd07ed3261cd679743924e8962439",
      "patch": "@@ -47,6 +47,7 @@ def exit_handler(event):\n     print(\"event type: exit\")\n     print(\"exit code: %d\" % (event.exit_code))\n     print(\"exit inf: %d\" % (event.inferior.num))\n+    print(\"exit pid: %d\" % (event.inferior.pid))\n     print(\"dir ok: %s\" % str(\"exit_code\" in dir(event)))\n \n "
    }
  ]
}