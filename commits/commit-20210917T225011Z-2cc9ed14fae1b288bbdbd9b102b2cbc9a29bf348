{
  "sha": "2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmNjOWVkMTRmYWUxYjI4OGJiZGJkOWIxMDJiMmNiYzlhMjliZjM0OA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-08-25T10:54:18Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-17T22:50:11Z"
    },
    "message": "[GOLD] Output_data_got create entry method addends\n\nThis patch makes all the Output_data_got methods that create new\nentries accept an optional addend.\n\n\tPR 28192\n\t* output.h (Output_data_got::add_global): Add optional addend\n\tparameter.  Update comment.  Delete overload without addend.\n\t(Output_data_got::add_global_plt): Likewise.\n\t(Output_data_got::add_global_tls): Likewise.\n\t(Output_data_got::add_global_with_rel): Likewise.\n\t(Output_data_got::add_global_pair_with_rel): Likewise.\n\t(Output_data_got::add_local_plt): Likewise.\n\t(Output_data_got::add_local_tls): Likewise.\n\t(Output_data_got::add_local_tls_pair): Likewise.\n\t(Output_data_got::reserve_local): Likewise.\n\t(Output_data_got::reserve_global): Likewise.\n\t(Output_data_got::Got_entry): Include addend in global sym\n\tconstructor.  Delete local sym constructor without addend.\n\t* output.cc (Output_data_got::add_global): Add addend param,\n\tpass to got handling methods.\n\t(Output_data_got::add_global_plt): Likewise.\n\t(Output_data_got::add_global_with_rel): Likewise.\n\t(Output_data_got::add_global_pair_with_rel): Likewise.\n\t(Output_data_got::add_local_plt): Likewise.\n\t(Output_data_got::add_local_tls_pair): Likewise.\n\t(Output_data_got::reserve_local): Likewise.\n\t(Output_data_got::reserve_global): Likewise.",
    "tree": {
      "sha": "ecfc23a51fb6bdf6f6e894f391b4f6d26a3a03e9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ecfc23a51fb6bdf6f6e894f391b4f6d26a3a03e9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "54721a930e80a635d3cb47c0ad3899ed9680bd78",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54721a930e80a635d3cb47c0ad3899ed9680bd78",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/54721a930e80a635d3cb47c0ad3899ed9680bd78"
    }
  ],
  "stats": {
    "total": 154,
    "additions": 79,
    "deletions": 75
  },
  "files": [
    {
      "sha": "c5f7eef0fbb8bf667c272e3d6a18633d687dd922",
      "filename": "gold/output.cc",
      "status": "modified",
      "additions": 43,
      "deletions": 34,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348/gold/output.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348/gold/output.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/output.cc?ref=2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348",
      "patch": "@@ -1461,15 +1461,15 @@ Output_data_got<got_size, big_endian>::Got_entry::write(\n \n template<int got_size, bool big_endian>\n bool\n-Output_data_got<got_size, big_endian>::add_global(\n-    Symbol* gsym,\n-    unsigned int got_type)\n+Output_data_got<got_size, big_endian>::add_global(Symbol* gsym,\n+\t\t\t\t\t\t  unsigned int got_type,\n+\t\t\t\t\t\t  uint64_t addend)\n {\n-  if (gsym->has_got_offset(got_type))\n+  if (gsym->has_got_offset(got_type, addend))\n     return false;\n \n-  unsigned int got_offset = this->add_got_entry(Got_entry(gsym, false));\n-  gsym->set_got_offset(got_type, got_offset);\n+  unsigned int got_offset = this->add_got_entry(Got_entry(gsym, false, addend));\n+  gsym->set_got_offset(got_type, got_offset, addend);\n   return true;\n }\n \n@@ -1478,13 +1478,14 @@ Output_data_got<got_size, big_endian>::add_global(\n template<int got_size, bool big_endian>\n bool\n Output_data_got<got_size, big_endian>::add_global_plt(Symbol* gsym,\n-\t\t\t\t\t\t      unsigned int got_type)\n+\t\t\t\t\t\t      unsigned int got_type,\n+\t\t\t\t\t\t      uint64_t addend)\n {\n-  if (gsym->has_got_offset(got_type))\n+  if (gsym->has_got_offset(got_type, addend))\n     return false;\n \n-  unsigned int got_offset = this->add_got_entry(Got_entry(gsym, true));\n-  gsym->set_got_offset(got_type, got_offset);\n+  unsigned int got_offset = this->add_got_entry(Got_entry(gsym, true, addend));\n+  gsym->set_got_offset(got_type, got_offset, addend);\n   return true;\n }\n \n@@ -1497,14 +1498,15 @@ Output_data_got<got_size, big_endian>::add_global_with_rel(\n     Symbol* gsym,\n     unsigned int got_type,\n     Output_data_reloc_generic* rel_dyn,\n-    unsigned int r_type)\n+    unsigned int r_type,\n+    uint64_t addend)\n {\n-  if (gsym->has_got_offset(got_type))\n+  if (gsym->has_got_offset(got_type, addend))\n     return;\n \n   unsigned int got_offset = this->add_got_entry(Got_entry());\n-  gsym->set_got_offset(got_type, got_offset);\n-  rel_dyn->add_global_generic(gsym, r_type, this, got_offset, 0);\n+  gsym->set_got_offset(got_type, got_offset, addend);\n+  rel_dyn->add_global_generic(gsym, r_type, this, got_offset, addend);\n }\n \n // Add a pair of entries for a global symbol to the GOT, and add\n@@ -1517,18 +1519,19 @@ Output_data_got<got_size, big_endian>::add_global_pair_with_rel(\n     unsigned int got_type,\n     Output_data_reloc_generic* rel_dyn,\n     unsigned int r_type_1,\n-    unsigned int r_type_2)\n+    unsigned int r_type_2,\n+    uint64_t addend)\n {\n-  if (gsym->has_got_offset(got_type))\n+  if (gsym->has_got_offset(got_type, addend))\n     return;\n \n   unsigned int got_offset = this->add_got_entry_pair(Got_entry(), Got_entry());\n-  gsym->set_got_offset(got_type, got_offset);\n-  rel_dyn->add_global_generic(gsym, r_type_1, this, got_offset, 0);\n+  gsym->set_got_offset(got_type, got_offset, addend);\n+  rel_dyn->add_global_generic(gsym, r_type_1, this, got_offset, addend);\n \n   if (r_type_2 != 0)\n     rel_dyn->add_global_generic(gsym, r_type_2, this,\n-\t\t\t\tgot_offset + got_size / 8, 0);\n+\t\t\t\tgot_offset + got_size / 8, addend);\n }\n \n // Add an entry for a local symbol plus ADDEND to the GOT.  This returns\n@@ -1559,14 +1562,15 @@ bool\n Output_data_got<got_size, big_endian>::add_local_plt(\n     Relobj* object,\n     unsigned int symndx,\n-    unsigned int got_type)\n+    unsigned int got_type,\n+    uint64_t addend)\n {\n-  if (object->local_has_got_offset(symndx, got_type))\n+  if (object->local_has_got_offset(symndx, got_type, addend))\n     return false;\n \n   unsigned int got_offset = this->add_got_entry(Got_entry(object, symndx,\n-\t\t\t\t\t\t\t  true));\n-  object->set_local_got_offset(symndx, got_type, got_offset);\n+\t\t\t\t\t\t\t  true, addend));\n+  object->set_local_got_offset(symndx, got_type, got_offset, addend);\n   return true;\n }\n \n@@ -1580,7 +1584,8 @@ Output_data_got<got_size, big_endian>::add_local_with_rel(\n     unsigned int symndx,\n     unsigned int got_type,\n     Output_data_reloc_generic* rel_dyn,\n-    unsigned int r_type, uint64_t addend)\n+    unsigned int r_type,\n+    uint64_t addend)\n {\n   if (object->local_has_got_offset(symndx, got_type, addend))\n     return;\n@@ -1604,7 +1609,8 @@ Output_data_got<got_size, big_endian>::add_local_pair_with_rel(\n     unsigned int shndx,\n     unsigned int got_type,\n     Output_data_reloc_generic* rel_dyn,\n-    unsigned int r_type, uint64_t addend)\n+    unsigned int r_type,\n+    uint64_t addend)\n {\n   if (object->local_has_got_offset(symndx, got_type, addend))\n     return;\n@@ -1628,16 +1634,17 @@ Output_data_got<got_size, big_endian>::add_local_tls_pair(\n     unsigned int symndx,\n     unsigned int got_type,\n     Output_data_reloc_generic* rel_dyn,\n-    unsigned int r_type)\n+    unsigned int r_type,\n+    uint64_t addend)\n {\n-  if (object->local_has_got_offset(symndx, got_type))\n+  if (object->local_has_got_offset(symndx, got_type, addend))\n     return;\n \n   unsigned int got_offset\n     = this->add_got_entry_pair(Got_entry(),\n-\t\t\t       Got_entry(object, symndx, true));\n-  object->set_local_got_offset(symndx, got_type, got_offset);\n-  rel_dyn->add_local_generic(object, 0, r_type, this, got_offset, 0);\n+\t\t\t       Got_entry(object, symndx, true, addend));\n+  object->set_local_got_offset(symndx, got_type, got_offset, addend);\n+  rel_dyn->add_local_generic(object, 0, r_type, this, got_offset, addend);\n }\n \n // Reserve a slot in the GOT for a local symbol or the second slot of a pair.\n@@ -1648,10 +1655,11 @@ Output_data_got<got_size, big_endian>::reserve_local(\n     unsigned int i,\n     Relobj* object,\n     unsigned int sym_index,\n-    unsigned int got_type)\n+    unsigned int got_type,\n+    uint64_t addend)\n {\n   this->do_reserve_slot(i);\n-  object->set_local_got_offset(sym_index, got_type, this->got_offset(i));\n+  object->set_local_got_offset(sym_index, got_type, this->got_offset(i), addend);\n }\n \n // Reserve a slot in the GOT for a global symbol.\n@@ -1661,10 +1669,11 @@ void\n Output_data_got<got_size, big_endian>::reserve_global(\n     unsigned int i,\n     Symbol* gsym,\n-    unsigned int got_type)\n+    unsigned int got_type,\n+    uint64_t addend)\n {\n   this->do_reserve_slot(i);\n-  gsym->set_got_offset(got_type, this->got_offset(i));\n+  gsym->set_got_offset(got_type, this->got_offset(i), addend);\n }\n \n // Write out the GOT."
    },
    {
      "sha": "bf4b54eb8bc2dcb6f8e415299e5e3c3313e87a69",
      "filename": "gold/output.h",
      "status": "modified",
      "additions": 36,
      "deletions": 41,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348/gold/output.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348/gold/output.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/output.h?ref=2cc9ed14fae1b288bbdbd9b102b2cbc9a29bf348",
      "patch": "@@ -2459,34 +2459,38 @@ class Output_data_got : public Output_data_got_base\n     this->free_list_.init(data_size, false);\n   }\n \n-  // Add an entry for a global symbol to the GOT.  Return true if this\n-  // is a new GOT entry, false if the symbol was already in the GOT.\n+  // Add an entry for a global symbol GSYM plus ADDEND to the GOT.\n+  // Return true if this is a new GOT entry, false if the symbol plus\n+  // addend was already in the GOT.\n   bool\n-  add_global(Symbol* gsym, unsigned int got_type);\n+  add_global(Symbol* gsym, unsigned int got_type, uint64_t addend = 0);\n \n   // Like add_global, but use the PLT offset of the global symbol if\n   // it has one.\n   bool\n-  add_global_plt(Symbol* gsym, unsigned int got_type);\n+  add_global_plt(Symbol* gsym, unsigned int got_type, uint64_t addend = 0);\n \n   // Like add_global, but for a TLS symbol where the value will be\n   // offset using Target::tls_offset_for_global.\n   bool\n-  add_global_tls(Symbol* gsym, unsigned int got_type)\n-  { return add_global_plt(gsym, got_type); }\n+  add_global_tls(Symbol* gsym, unsigned int got_type, uint64_t addend = 0)\n+  { return this->add_global_plt(gsym, got_type, addend); }\n \n-  // Add an entry for a global symbol to the GOT, and add a dynamic\n-  // relocation of type R_TYPE for the GOT entry.\n+  // Add an entry for a global symbol GSYM plus ADDEND to the GOT, and\n+  // add a dynamic relocation of type R_TYPE for the GOT entry.\n   void\n   add_global_with_rel(Symbol* gsym, unsigned int got_type,\n-\t\t      Output_data_reloc_generic* rel_dyn, unsigned int r_type);\n+\t\t      Output_data_reloc_generic* rel_dyn, unsigned int r_type,\n+\t\t      uint64_t addend = 0);\n \n-  // Add a pair of entries for a global symbol to the GOT, and add\n-  // dynamic relocations of type R_TYPE_1 and R_TYPE_2, respectively.\n+  // Add a pair of entries for a global symbol GSYM plus ADDEND to the\n+  // GOT, and add dynamic relocations of type R_TYPE_1 and R_TYPE_2,\n+  // respectively.\n   void\n   add_global_pair_with_rel(Symbol* gsym, unsigned int got_type,\n \t\t\t   Output_data_reloc_generic* rel_dyn,\n-\t\t\t   unsigned int r_type_1, unsigned int r_type_2);\n+\t\t\t   unsigned int r_type_1, unsigned int r_type_2,\n+\t\t\t   uint64_t addend = 0);\n \n   // Add an entry for a local symbol plus ADDEND to the GOT.  This returns\n   // true if this is a new GOT entry, false if the symbol already has a GOT\n@@ -2498,13 +2502,15 @@ class Output_data_got : public Output_data_got_base\n   // Like add_local, but use the PLT offset of the local symbol if it\n   // has one.\n   bool\n-  add_local_plt(Relobj* object, unsigned int sym_index, unsigned int got_type);\n+  add_local_plt(Relobj* object, unsigned int sym_index, unsigned int got_type,\n+\t\tuint64_t addend = 0);\n \n   // Like add_local, but for a TLS symbol where the value will be\n   // offset using Target::tls_offset_for_local.\n   bool\n-  add_local_tls(Relobj* object, unsigned int sym_index, unsigned int got_type)\n-  { return add_local_plt(object, sym_index, got_type); }\n+  add_local_tls(Relobj* object, unsigned int sym_index, unsigned int got_type,\n+\t\tuint64_t addend = 0)\n+  { return this->add_local_plt(object, sym_index, got_type, addend); }\n \n   // Add an entry for a local symbol plus ADDEND to the GOT, and add a dynamic\n   // relocation of type R_TYPE for the GOT entry.\n@@ -2524,15 +2530,16 @@ class Output_data_got : public Output_data_got_base\n \t\t\t  Output_data_reloc_generic* rel_dyn,\n \t\t\t  unsigned int r_type, uint64_t addend = 0);\n \n-  // Add a pair of entries for a local symbol to the GOT, and add\n-  // a dynamic relocation of type R_TYPE using STN_UNDEF on the first.\n-  // The first got entry will have a value of zero, the second the\n-  // value of the local symbol offset by Target::tls_offset_for_local.\n+  // Add a pair of entries for a local symbol plus ADDEND to the GOT,\n+  // and add a dynamic relocation of type R_TYPE using STN_UNDEF on\n+  // the first.  The first got entry will have a value of zero, the\n+  // second the value of the local symbol plus ADDEND offset by\n+  // Target::tls_offset_for_local.\n   void\n   add_local_tls_pair(Relobj* object, unsigned int sym_index,\n \t\t     unsigned int got_type,\n \t\t     Output_data_reloc_generic* rel_dyn,\n-\t\t     unsigned int r_type);\n+\t\t     unsigned int r_type, uint64_t addend = 0);\n \n   // Add a constant to the GOT.  This returns the offset of the new\n   // entry from the start of the GOT.\n@@ -2553,14 +2560,15 @@ class Output_data_got : public Output_data_got_base\n     this->replace_got_entry(i, Got_entry(constant));\n   }\n \n-  // Reserve a slot in the GOT for a local symbol.\n+  // Reserve a slot in the GOT for a local symbol plus ADDEND.\n   void\n   reserve_local(unsigned int i, Relobj* object, unsigned int sym_index,\n-\t\tunsigned int got_type);\n+\t\tunsigned int got_type, uint64_t addend = 0);\n \n-  // Reserve a slot in the GOT for a global symbol.\n+  // Reserve a slot in the GOT for a global symbol plus ADDEND.\n   void\n-  reserve_global(unsigned int i, Symbol* gsym, unsigned int got_type);\n+  reserve_global(unsigned int i, Symbol* gsym, unsigned int got_type,\n+\t\t uint64_t addend = 0);\n \n  protected:\n   // Write out the GOT table.\n@@ -2599,16 +2607,16 @@ class Output_data_got : public Output_data_got_base\n     { this->u_.constant = 0; }\n \n     // Create a global symbol entry.\n-    Got_entry(Symbol* gsym, bool use_plt_or_tls_offset)\n+    Got_entry(Symbol* gsym, bool use_plt_or_tls_offset, uint64_t addend)\n       : local_sym_index_(GSYM_CODE),\n-\tuse_plt_or_tls_offset_(use_plt_or_tls_offset), addend_(0)\n+\tuse_plt_or_tls_offset_(use_plt_or_tls_offset), addend_(addend)\n     { this->u_.gsym = gsym; }\n \n     // Create a local symbol entry.\n     Got_entry(Relobj* object, unsigned int local_sym_index,\n-\t      bool use_plt_or_tls_offset)\n+\t      bool use_plt_or_tls_offset, uint64_t addend)\n       : local_sym_index_(local_sym_index),\n-\tuse_plt_or_tls_offset_(use_plt_or_tls_offset), addend_(0)\n+\tuse_plt_or_tls_offset_(use_plt_or_tls_offset), addend_(addend)\n     {\n       gold_assert(local_sym_index != GSYM_CODE\n \t\t  && local_sym_index != CONSTANT_CODE\n@@ -2617,19 +2625,6 @@ class Output_data_got : public Output_data_got_base\n       this->u_.object = object;\n     }\n \n-    // Create a local symbol entry plus addend.\n-    Got_entry(Relobj* object, unsigned int local_sym_index,\n-\tbool use_plt_or_tls_offset, uint64_t addend)\n-      : local_sym_index_(local_sym_index),\n-\tuse_plt_or_tls_offset_(use_plt_or_tls_offset), addend_(addend)\n-    {\n-      gold_assert(local_sym_index != GSYM_CODE\n-      && local_sym_index != CONSTANT_CODE\n-      && local_sym_index != RESERVED_CODE\n-      && local_sym_index == this->local_sym_index_);\n-      this->u_.object = object;\n-    }\n-\n     // Create a constant entry.  The constant is a host value--it will\n     // be swapped, if necessary, when it is written out.\n     explicit Got_entry(Valtype constant)"
    }
  ]
}