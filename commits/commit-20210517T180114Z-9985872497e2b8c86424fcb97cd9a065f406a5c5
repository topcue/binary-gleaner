{
  "sha": "9985872497e2b8c86424fcb97cd9a065f406a5c5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTk4NTg3MjQ5N2UyYjhjODY0MjRmY2I5N2NkOWEwNjVmNDA2YTVjNQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-17T18:01:14Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-17T18:01:14Z"
    },
    "message": "gdb: rename cmd_list_element::cmd_pointer to target\n\ncmd_pointer is another field whose name I found really not clear.  Yes,\nit's a pointer to a command, the type tells me that.  But what's the\nrelationship of that command to the current command?  This field\ncontains, for an alias, the command that it aliases.  So I think that\nthe name \"alias_target\" would be more appropriate.\n\nAlso, rename \"old\" parameters to \"target\" in the functions that add\naliases.\n\ngdb/ChangeLog:\n\n\t* cli/cli-decode.h (cmd_list_element) <cmd_pointer>: Rename\n\tto...\n\t<alias_target>: ... this.\n\t(add_alias_cmd): Rename old to target.\n\t(add_info_alias): Rename old_name to target_name.\n\t(add_com_alias): Likewise.\n\nChange-Id: I8db36c6dd799fae155f7acd3805f6d62d98befa9",
    "tree": {
      "sha": "a293dbd7159ddf4295a39381da29a33ab9a5b8da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a293dbd7159ddf4295a39381da29a33ab9a5b8da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9985872497e2b8c86424fcb97cd9a065f406a5c5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9985872497e2b8c86424fcb97cd9a065f406a5c5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9985872497e2b8c86424fcb97cd9a065f406a5c5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9985872497e2b8c86424fcb97cd9a065f406a5c5/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "14b42fc4a0edc412e02a6c9cfe7eb48e67da3145",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14b42fc4a0edc412e02a6c9cfe7eb48e67da3145",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/14b42fc4a0edc412e02a6c9cfe7eb48e67da3145"
    }
  ],
  "stats": {
    "total": 94,
    "additions": 50,
    "deletions": 44
  },
  "files": [
    {
      "sha": "e430506373323f3602de25be9cb522d4961fc9c8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9985872497e2b8c86424fcb97cd9a065f406a5c5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9985872497e2b8c86424fcb97cd9a065f406a5c5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9985872497e2b8c86424fcb97cd9a065f406a5c5",
      "patch": "@@ -1,3 +1,12 @@\n+2021-05-17  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* cli/cli-decode.h (cmd_list_element) <cmd_pointer>: Rename\n+\tto...\n+\t<alias_target>: ... this.\n+\t(add_alias_cmd): Rename old to target.\n+\t(add_info_alias): Rename old_name to target_name.\n+\t(add_com_alias): Likewise.\n+\n 2021-05-17  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* Rename \"prefixlist\" parameters to \"subcommands\" throughout."
    },
    {
      "sha": "ec579ff196175f86ec3dfd58d5896a044629ee41",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 37,
      "deletions": 40,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9985872497e2b8c86424fcb97cd9a065f406a5c5/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9985872497e2b8c86424fcb97cd9a065f406a5c5/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=9985872497e2b8c86424fcb97cd9a065f406a5c5",
      "patch": "@@ -75,7 +75,7 @@ lookup_cmd_with_subcommands (cmd_list_element **subcommands,\n \t{\n \t  /* If we found an alias, we must return the aliased\n \t     command.  */\n-\t  return p->cmd_pointer ? p->cmd_pointer : p;\n+\t  return p->alias_target ? p->alias_target : p;\n \t}\n \n       q = lookup_cmd_with_subcommands (subcommands, *(p->subcommands));\n@@ -208,7 +208,7 @@ do_add_cmd (const char *name, enum command_class theclass,\n   c->aliases = delete_cmd (name, list, &c->hook_pre, &c->hookee_pre,\n \t\t\t   &c->hook_post, &c->hookee_post);\n   for (iter = c->aliases; iter; iter = iter->alias_chain)\n-    iter->cmd_pointer = c;\n+    iter->alias_target = c;\n   if (c->hook_pre)\n     c->hook_pre->hookee_pre = c;\n   if (c->hookee_pre)\n@@ -305,45 +305,42 @@ deprecate_cmd (struct cmd_list_element *cmd, const char *replacement)\n }\n \n struct cmd_list_element *\n-add_alias_cmd (const char *name, cmd_list_element *old,\n+add_alias_cmd (const char *name, cmd_list_element *target,\n \t       enum command_class theclass, int abbrev_flag,\n \t       struct cmd_list_element **list)\n {\n-  gdb_assert (old != nullptr);\n+  gdb_assert (target != nullptr);\n \n-  struct cmd_list_element *c = add_cmd (name, theclass, old->doc, list);\n+  struct cmd_list_element *c = add_cmd (name, theclass, target->doc, list);\n \n-  /* If OLD->DOC can be freed, we should make another copy.  */\n-  if (old->doc_allocated)\n+  /* If TARGET->DOC can be freed, we should make another copy.  */\n+  if (target->doc_allocated)\n     {\n-      c->doc = xstrdup (old->doc);\n+      c->doc = xstrdup (target->doc);\n       c->doc_allocated = 1;\n     }\n   /* NOTE: Both FUNC and all the FUNCTIONs need to be copied.  */\n-  c->func = old->func;\n-  c->function = old->function;\n-  c->subcommands = old->subcommands;\n-  c->allow_unknown = old->allow_unknown;\n+  c->func = target->func;\n+  c->function = target->function;\n+  c->subcommands = target->subcommands;\n+  c->allow_unknown = target->allow_unknown;\n   c->abbrev_flag = abbrev_flag;\n-  c->cmd_pointer = old;\n-  c->alias_chain = old->aliases;\n-  old->aliases = c;\n+  c->alias_target = target;\n+  c->alias_chain = target->aliases;\n+  target->aliases = c;\n \n   return c;\n }\n \n struct cmd_list_element *\n-add_alias_cmd (const char *name, const char *oldname,\n+add_alias_cmd (const char *name, const char *target_name,\n \t       enum command_class theclass, int abbrev_flag,\n \t       struct cmd_list_element **list)\n {\n-  const char *tmp;\n-  struct cmd_list_element *old;\n+  const char *tmp = target_name;\n+  cmd_list_element *target = lookup_cmd (&tmp, *list, \"\", NULL, 1, 1);\n \n-  tmp = oldname;\n-  old = lookup_cmd (&tmp, *list, \"\", NULL, 1, 1);\n-\n-  return add_alias_cmd (name, old, theclass, abbrev_flag, list);\n+  return add_alias_cmd (name, target, theclass, abbrev_flag, list);\n }\n \n \n@@ -408,8 +405,8 @@ static void\n do_prefix_cmd (const char *args, int from_tty, struct cmd_list_element *c)\n {\n   /* Look past all aliases.  */\n-  while (c->cmd_pointer != nullptr)\n-    c = c->cmd_pointer;\n+  while (c->alias_target != nullptr)\n+    c = c->alias_target;\n \n   help_list (*c->subcommands, c->prefixname ().c_str (),\n \t     all_commands, gdb_stdout);\n@@ -951,9 +948,9 @@ delete_cmd (const char *name, struct cmd_list_element **list,\n \n \t  /* If this command was an alias, remove it from the list of\n \t     aliases.  */\n-\t  if (iter->cmd_pointer)\n+\t  if (iter->alias_target)\n \t    {\n-\t      struct cmd_list_element **prevp = &iter->cmd_pointer->aliases;\n+\t      struct cmd_list_element **prevp = &iter->alias_target->aliases;\n \t      struct cmd_list_element *a = *prevp;\n \n \t      while (a != iter)\n@@ -989,9 +986,9 @@ add_info (const char *name, cmd_const_cfunc_ftype *fun, const char *doc)\n /* Add an alias to the list of info subcommands.  */\n \n struct cmd_list_element *\n-add_info_alias (const char *name, const char *oldname, int abbrev_flag)\n+add_info_alias (const char *name, const char *target_name, int abbrev_flag)\n {\n-  return add_alias_cmd (name, oldname, class_run, abbrev_flag, &infolist);\n+  return add_alias_cmd (name, target_name, class_run, abbrev_flag, &infolist);\n }\n \n /* Add an element to the list of commands.  */\n@@ -1010,10 +1007,10 @@ add_com (const char *name, enum command_class theclass,\n    user defined aliases.  */\n \n struct cmd_list_element *\n-add_com_alias (const char *name, const char *oldname, enum command_class theclass,\n-\t       int abbrev_flag)\n+add_com_alias (const char *name, const char *target_name,\n+\t       command_class theclass, int abbrev_flag)\n {\n-  return add_alias_cmd (name, oldname, theclass, abbrev_flag, &cmdlist);\n+  return add_alias_cmd (name, target_name, theclass, abbrev_flag, &cmdlist);\n }\n \n /* Add an element with a suppress notification to the list of commands.  */\n@@ -1046,11 +1043,11 @@ static void\n fput_alias_definition_styled (struct cmd_list_element *c,\n \t\t\t      struct ui_file *stream)\n {\n-  gdb_assert (c->cmd_pointer != nullptr);\n+  gdb_assert (c->alias_target != nullptr);\n   fputs_filtered (\"  alias \", stream);\n   fput_command_name_styled (c, stream);\n   fprintf_filtered (stream, \" = \");\n-  fput_command_name_styled (c->cmd_pointer, stream);\n+  fput_command_name_styled (c->alias_target, stream);\n   fprintf_filtered (stream, \" %s\\n\", c->default_args.c_str ());\n }\n \n@@ -1149,7 +1146,7 @@ apropos_cmd (struct ui_file *stream,\n   /* Walk through the commands.  */\n   for (c=commandlist;c;c=c->next)\n     {\n-      if (c->cmd_pointer != nullptr)\n+      if (c->alias_target != nullptr)\n \t{\n \t  /* Command aliases/abbreviations are skipped to ensure we print the\n \t     doc of a command only once, when encountering the aliased\n@@ -1490,7 +1487,7 @@ help_cmd_list (struct cmd_list_element *list, enum command_class theclass,\n \t  continue;\n \t}\n \n-      if (c->cmd_pointer != nullptr && theclass != class_alias)\n+      if (c->alias_target != nullptr && theclass != class_alias)\n \t{\n \t  /* Do not show an alias, unless specifically showing the\n \t     list of aliases:  for all other classes, an alias is\n@@ -1512,7 +1509,7 @@ help_cmd_list (struct cmd_list_element *list, enum command_class theclass,\n \t     list of sub-commands of the aliased command.  */\n \t  print_help_for_command\n \t    (c,\n-\t     recurse && (theclass != class_alias || c->cmd_pointer == nullptr),\n+\t     recurse && (theclass != class_alias || c->alias_target == nullptr),\n \t     stream);\n \t  continue;\n \t}\n@@ -1675,7 +1672,7 @@ lookup_cmd_1 (const char **text, struct cmd_list_element *clist,\n \n   *text += len;\n \n-  if (found->cmd_pointer)\n+  if (found->alias_target)\n     {\n       /* We drop the alias (abbreviation) in favor of the command it\n        is pointing to.  If the alias is deprecated, though, we need to\n@@ -1692,7 +1689,7 @@ lookup_cmd_1 (const char **text, struct cmd_list_element *clist,\n \t of the command it is pointing to.  */\n       if (default_args != nullptr)\n \t*default_args = found->default_args;\n-      found = found->cmd_pointer;\n+      found = found->alias_target;\n       found_alias = true;\n     }\n   /* If we found a prefix command, keep looking.  */\n@@ -2047,12 +2044,12 @@ lookup_cmd_composition_1 (const char *text,\n \treturn 0;\n       else\n \t{\n-\t  if ((*cmd)->cmd_pointer)\n+\t  if ((*cmd)->alias_target)\n \t    {\n \t      /* If the command was actually an alias, we note that an\n \t\t alias was used (by assigning *ALIAS) and we set *CMD.  */\n \t      *alias = *cmd;\n-\t      *cmd = (*cmd)->cmd_pointer;\n+\t      *cmd = (*cmd)->alias_target;\n \t    }\n \t}\n "
    },
    {
      "sha": "68a9b8586b4019f71c6b424b8ebab5cf200f5378",
      "filename": "gdb/cli/cli-decode.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9985872497e2b8c86424fcb97cd9a065f406a5c5/gdb/cli/cli-decode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9985872497e2b8c86424fcb97cd9a065f406a5c5/gdb/cli/cli-decode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.h?ref=9985872497e2b8c86424fcb97cd9a065f406a5c5",
      "patch": "@@ -229,7 +229,7 @@ struct cmd_list_element\n \n   /* Pointer to command that is aliased by this one, so the\n      aliased command can be located in case it has been hooked.  */\n-  struct cmd_list_element *cmd_pointer = nullptr;\n+  struct cmd_list_element *alias_target = nullptr;\n \n   /* Start of a linked list of all aliases of this command.  */\n   struct cmd_list_element *aliases = nullptr;"
    },
    {
      "sha": "cb821c5b3c03fddf1c0ed05566a69a62630058ae",
      "filename": "gdb/cli/cli-setshow.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9985872497e2b8c86424fcb97cd9a065f406a5c5/gdb/cli/cli-setshow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9985872497e2b8c86424fcb97cd9a065f406a5c5/gdb/cli/cli-setshow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-setshow.c?ref=9985872497e2b8c86424fcb97cd9a065f406a5c5",
      "patch": "@@ -740,7 +740,7 @@ cmd_show_list (struct cmd_list_element *list, int from_tty)\n \n       /* If we find a prefix, run its list, prefixing our output by its\n \t prefix (with \"show \" skipped).  */\n-      if (list->subcommands && list->cmd_pointer == nullptr)\n+      if (list->subcommands && list->alias_target == nullptr)\n \t{\n \t  ui_out_emit_tuple optionlist_emitter (uiout, \"optionlist\");\n \t  std::string prefixname = list->prefixname ();\n@@ -750,7 +750,7 @@ cmd_show_list (struct cmd_list_element *list, int from_tty)\n \t    uiout->field_string (\"prefix\", new_prefix);\n \t  cmd_show_list (*list->subcommands, from_tty);\n \t}\n-      else if (list->theclass != no_set_class && list->cmd_pointer == nullptr)\n+      else if (list->theclass != no_set_class && list->alias_target == nullptr)\n \t{\n \t  ui_out_emit_tuple option_emitter (uiout, \"option\");\n "
    },
    {
      "sha": "123667d33699a0d95d401529f9577c783b0f9422",
      "filename": "gdb/unittests/command-def-selftests.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9985872497e2b8c86424fcb97cd9a065f406a5c5/gdb/unittests/command-def-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9985872497e2b8c86424fcb97cd9a065f406a5c5/gdb/unittests/command-def-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/command-def-selftests.c?ref=9985872497e2b8c86424fcb97cd9a065f406a5c5",
      "patch": "@@ -155,7 +155,7 @@ traverse_command_structure (struct cmd_list_element **list,\n     {\n       /* If this command has subcommands and is not an alias,\n \t traverse the subcommands.  */\n-      if (c->subcommands != NULL && c->cmd_pointer == nullptr)\n+      if (c->subcommands != NULL && c->alias_target == nullptr)\n \t{\n \t  /* Recursively call ourselves on the subcommand list,\n \t     passing the right prefix in.  */"
    }
  ]
}