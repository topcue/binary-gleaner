{
  "sha": "c0ad05d567796104f55d388b5d5b21da8fa47de2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzBhZDA1ZDU2Nzc5NjEwNGY1NWQzODhiNWQ1YjIxZGE4ZmE0N2RlMg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-11-20T16:17:33Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-11-20T16:19:38Z"
    },
    "message": "gdb: fix unittests/gmp-utils-selftests.c build on solaris\n\nWhen building on solaris (gcc farm machine gcc211), I get:\n\n      CXX    unittests/gmp-utils-selftests.o\n    /export/home/simark/src/binutils-gdb/gdb/unittests/gmp-utils-selftests.c: In function 'void selftests::gdb_mpz_read_all_from_small()'  :\n    /export/home/simark/src/binutils-gdb/gdb/unittests/gmp-utils-selftests.c:128:43: error: call of overloaded 'pow(int, int)'   is ambiguous\n       LONGEST l_min = -pow (2, buf_len * 8 - 1);\n                                               ^\n    In file included from /opt/csw/lib/gcc/sparc-sun-solaris2.10/5.5.0/include-fixed/math.h:22:0,\n                     from ../gnulib/import/math.h:27,\n                     from /export/home/simark/src/binutils-gdb/gdb/unittests/gmp-utils-selftests.c:23:\n    /opt/csw/lib/gcc/sparc-sun-solaris2.10/5.5.0/include-fixed/iso/math_iso.h:210:21: note: candidate: long double std::pow(long double, long double)\n      inline long double pow(long double __X, long double __Y) { return\n                         ^\n    /opt/csw/lib/gcc/sparc-sun-solaris2.10/5.5.0/include-fixed/iso/math_iso.h:170:15: note: candidate: float std::pow(float, float)\n      inline float pow(float __X, float __Y) { return __powf(__X, __Y); }\n                   ^\n    /opt/csw/lib/gcc/sparc-sun-solaris2.10/5.5.0/include-fixed/iso/math_iso.h:71:15: note: candidate: double std::pow(double, double)\n     extern double pow __P((double, double));\n                   ^\n\nThe \"pow\" function overloads only exist for float-like types, and the\ncompiler doesn't know which one we want.  Change \"2\" for \"2.0\", which\nmakes the compiler choose one alternative (the double one, I believe).\n\ngdb/ChangeLog:\n\n\t* unittests/gmp-utils-selftests.c (gdb_mpz_read_all_from_small):\n\tPass 2.0 to pow.\n\t(gdb_mpz_write_all_from_small): Likewise.\n\nChange-Id: Ied2ae0f01494430244a7c94f8a38b07d819f4213",
    "tree": {
      "sha": "9a550b42f18a09fb75d8e7ae28ecd1e2c20183a9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9a550b42f18a09fb75d8e7ae28ecd1e2c20183a9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c0ad05d567796104f55d388b5d5b21da8fa47de2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0ad05d567796104f55d388b5d5b21da8fa47de2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c0ad05d567796104f55d388b5d5b21da8fa47de2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0ad05d567796104f55d388b5d5b21da8fa47de2/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a43b29c90d8efa1013cb4b6bc49bb78de5e79784",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a43b29c90d8efa1013cb4b6bc49bb78de5e79784",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a43b29c90d8efa1013cb4b6bc49bb78de5e79784"
    }
  ],
  "stats": {
    "total": 18,
    "additions": 12,
    "deletions": 6
  },
  "files": [
    {
      "sha": "4663f56217940d32fa476f1584bd0cd2d01e1de6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0ad05d567796104f55d388b5d5b21da8fa47de2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0ad05d567796104f55d388b5d5b21da8fa47de2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c0ad05d567796104f55d388b5d5b21da8fa47de2",
      "patch": "@@ -1,3 +1,9 @@\n+2020-11-20  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* unittests/gmp-utils-selftests.c (gdb_mpz_read_all_from_small):\n+\tPass 2.0 to pow.\n+\t(gdb_mpz_write_all_from_small): Likewise.\n+\n 2020-11-20  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* dwarf2/read.c (finish_fixed_point_type): Use std::abs instead"
    },
    {
      "sha": "af5bc65d2f94e5078c383bf206dfbbe389dc0dc5",
      "filename": "gdb/unittests/gmp-utils-selftests.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0ad05d567796104f55d388b5d5b21da8fa47de2/gdb/unittests/gmp-utils-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0ad05d567796104f55d388b5d5b21da8fa47de2/gdb/unittests/gmp-utils-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/gmp-utils-selftests.c?ref=c0ad05d567796104f55d388b5d5b21da8fa47de2",
      "patch": "@@ -125,8 +125,8 @@ gdb_mpz_read_all_from_small ()\n      to check the complete range.  */\n \n   int buf_len = 1;\n-  LONGEST l_min = -pow (2, buf_len * 8 - 1);\n-  LONGEST l_max = pow (2, buf_len * 8 - 1) - 1;\n+  LONGEST l_min = -pow (2.0, buf_len * 8 - 1);\n+  LONGEST l_max = pow (2.0, buf_len * 8 - 1) - 1;\n \n   for (LONGEST l = l_min; l <= l_max; l++)\n     {\n@@ -141,7 +141,7 @@ gdb_mpz_read_all_from_small ()\n \n   /* Do the same as above, but with an unsigned type.  */\n   ULONGEST ul_min = 0;\n-  ULONGEST ul_max = pow (2, buf_len * 8) - 1;\n+  ULONGEST ul_max = pow (2.0, buf_len * 8) - 1;\n \n   for (ULONGEST ul = ul_min; ul <= ul_max; ul++)\n     {\n@@ -248,8 +248,8 @@ static void\n gdb_mpz_write_all_from_small ()\n {\n   int buf_len = 1;\n-  LONGEST l_min = -pow (2, buf_len * 8 - 1);\n-  LONGEST l_max = pow (2, buf_len * 8 - 1) - 1;\n+  LONGEST l_min = -pow (2.0, buf_len * 8 - 1);\n+  LONGEST l_max = pow (2.0, buf_len * 8 - 1) - 1;\n \n   for (LONGEST l = l_min; l <= l_max; l++)\n     {\n@@ -259,7 +259,7 @@ gdb_mpz_write_all_from_small ()\n \n     /* Do the same as above, but with an unsigned type.  */\n   ULONGEST ul_min = 0;\n-  ULONGEST ul_max = pow (2, buf_len * 8) - 1;\n+  ULONGEST ul_max = pow (2.0, buf_len * 8) - 1;\n \n   for (ULONGEST ul = ul_min; ul <= ul_max; ul++)\n     {"
    }
  ]
}