{
  "sha": "f8676776828c6c0c26da31de0de68c0f4162a8e9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Zjg2NzY3NzY4MjhjNmMwYzI2ZGEzMWRlMGRlNjhjMGY0MTYyYThlOQ==",
  "commit": {
    "author": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2020-12-24T16:01:21Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-12-24T16:02:55Z"
    },
    "message": "gdb/gdbtypes.h: Fix comparison of uninitialized values\n\nWhen called with an array type of unknown dimensions,\nis_scalar_type_recursive ended up comparing uninitialized values.\n\nThis was picked up by the following compiler warning:\n\n  CXX    gdbtypes.o\n/binutils-gdb/gdb/gdbtypes.c: In function int is_scalar_type_recursive(type*):\n/binutils-gdb/gdb/gdbtypes.c:3670:38: warning: high_bound may be used uninitialized in this function [-Wmaybe-uninitialized]\n 3670 |       return high_bound == low_bound && is_scalar_type_recursive (elt_type);\n      | ~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/binutils-gdb/gdb/gdbtypes.c:3670:38: warning: low_bound may be used uninitialized in this function [-Wmaybe-uninitialized]\n\nThis patch makes sure that when dealing with an array of unknown size\n(or an array of more than 1 element), is_scalar_type_recursive returns\nfalse.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.c (is_scalar_type_recursive): Prevent comparison\n\tbetween uninitialized values.\n\nChange-Id: Ifc005ced166aa7a065fef3e652977bae67625bf4",
    "tree": {
      "sha": "af0220f4d16694ca6f0220e3ea33227a92958d34",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/af0220f4d16694ca6f0220e3ea33227a92958d34"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f8676776828c6c0c26da31de0de68c0f4162a8e9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8676776828c6c0c26da31de0de68c0f4162a8e9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f8676776828c6c0c26da31de0de68c0f4162a8e9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8676776828c6c0c26da31de0de68c0f4162a8e9/comments",
  "author": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "99d8bab0c125618005b96cbca9bae94919ae93b7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/99d8bab0c125618005b96cbca9bae94919ae93b7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/99d8bab0c125618005b96cbca9bae94919ae93b7"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 10,
    "deletions": 3
  },
  "files": [
    {
      "sha": "ac4caf0532512b394b65826b8baadf83e4b7f7a7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8676776828c6c0c26da31de0de68c0f4162a8e9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8676776828c6c0c26da31de0de68c0f4162a8e9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f8676776828c6c0c26da31de0de68c0f4162a8e9",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-24  Lancelot SIX  <lsix@lancelotsix.com>\n+\n+\t* gdbtypes.c (is_scalar_type_recursive): Prevent comparison\n+\tbetween uninitialized values.\n+\n 2020-12-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* expprint.c (print_subexp_standard): Replace uses of"
    },
    {
      "sha": "a6589c4914f7f17cf2e592c80ae3c146edf2fb91",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8676776828c6c0c26da31de0de68c0f4162a8e9/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8676776828c6c0c26da31de0de68c0f4162a8e9/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=f8676776828c6c0c26da31de0de68c0f4162a8e9",
      "patch": "@@ -3665,9 +3665,11 @@ is_scalar_type_recursive (struct type *t)\n       LONGEST low_bound, high_bound;\n       struct type *elt_type = check_typedef (TYPE_TARGET_TYPE (t));\n \n-      get_discrete_bounds (t->index_type (), &low_bound, &high_bound);\n-\n-      return high_bound == low_bound && is_scalar_type_recursive (elt_type);\n+      if (get_discrete_bounds (t->index_type (), &low_bound, &high_bound))\n+\treturn (high_bound == low_bound\n+\t\t&& is_scalar_type_recursive (elt_type));\n+      else\n+\treturn 0;\n     }\n   /* Are we dealing with a struct with one element?  */\n   else if (t->code () == TYPE_CODE_STRUCT && t->num_fields () == 1)"
    }
  ]
}