{
  "sha": "40786782896deaf8f97f8dc62b85d9facb30fc8a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDA3ODY3ODI4OTZkZWFmOGY5N2Y4ZGM2MmI4NWQ5ZmFjYjMwZmM4YQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:23Z"
    },
    "message": "Introduce assign_operation\n\nThis adds class assign_operation, which implements BINOP_ASSIGN.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class assign_operation): New.\n\t* ax-gdb.c (assign_operation::do_generate_ax): New method.",
    "tree": {
      "sha": "48e89cc17999476dc3b3864afcf76ef7715dd608",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/48e89cc17999476dc3b3864afcf76ef7715dd608"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/40786782896deaf8f97f8dc62b85d9facb30fc8a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40786782896deaf8f97f8dc62b85d9facb30fc8a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/40786782896deaf8f97f8dc62b85d9facb30fc8a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40786782896deaf8f97f8dc62b85d9facb30fc8a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "44b675c89b9d4e22ab60f51416b47634df2a3774",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/44b675c89b9d4e22ab60f51416b47634df2a3774",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/44b675c89b9d4e22ab60f51416b47634df2a3774"
    }
  ],
  "stats": {
    "total": 78,
    "additions": 78,
    "deletions": 0
  },
  "files": [
    {
      "sha": "6bf3cbf4594297c153f2e0785400d43af099ebdb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/40786782896deaf8f97f8dc62b85d9facb30fc8a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/40786782896deaf8f97f8dc62b85d9facb30fc8a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=40786782896deaf8f97f8dc62b85d9facb30fc8a",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class assign_operation): New.\n+\t* ax-gdb.c (assign_operation::do_generate_ax): New method.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class type_instance_operation): New."
    },
    {
      "sha": "d8b5ed78a407a9755e40292bed85194257e76d08",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/40786782896deaf8f97f8dc62b85d9facb30fc8a/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/40786782896deaf8f97f8dc62b85d9facb30fc8a/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=40786782896deaf8f97f8dc62b85d9facb30fc8a",
      "patch": "@@ -2579,6 +2579,36 @@ op_this_operation::do_generate_ax (struct expression *exp,\n \t   sym->print_name ());\n }\n \n+void\n+assign_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t  struct agent_expr *ax,\n+\t\t\t\t  struct axs_value *value,\n+\t\t\t\t  struct type *cast_type)\n+{\n+  operation *subop = std::get<0> (m_storage).get ();\n+  if (subop->opcode () != OP_INTERNALVAR)\n+    error (_(\"May only assign to trace state variables\"));\n+\n+  internalvar_operation *ivarop\n+    = dynamic_cast<internalvar_operation *> (subop);\n+  gdb_assert (ivarop != nullptr);\n+\n+  const char *name = internalvar_name (ivarop->get_internalvar ());\n+  struct trace_state_variable *tsv;\n+\n+  std::get<1> (m_storage)->generate_ax (exp, ax, value);\n+  tsv = find_trace_state_variable (name);\n+  if (tsv)\n+    {\n+      ax_tsv (ax, aop_setv, tsv->number);\n+      if (ax->tracing)\n+\tax_tsv (ax, aop_tracev, tsv->number);\n+    }\n+  else\n+    error (_(\"$%s is not a trace state variable, \"\n+\t     \"may not assign to it\"), name);\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "0f223654052e651602e57836814760d7e4e575d7",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/40786782896deaf8f97f8dc62b85d9facb30fc8a/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/40786782896deaf8f97f8dc62b85d9facb30fc8a/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=40786782896deaf8f97f8dc62b85d9facb30fc8a",
      "patch": "@@ -1757,6 +1757,49 @@ class type_instance_operation\n   { return TYPE_INSTANCE; }\n };\n \n+/* The assignment operator.  */\n+class assign_operation\n+  : public tuple_holding_operation<operation_up, operation_up>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *lhs = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+    /* Special-case assignments where the left-hand-side is a\n+       convenience variable -- in these, don't bother setting an\n+       expected type.  This avoids a weird case where re-assigning a\n+       string or array to an internal variable could error with \"Too\n+       many array elements\".  */\n+    struct type *xtype = (VALUE_LVAL (lhs) == lval_internalvar\n+\t\t\t  ? nullptr\n+\t\t\t  : value_type (lhs));\n+    value *rhs = std::get<1> (m_storage)->evaluate (xtype, exp, noside);\n+\n+    if (noside == EVAL_SKIP || noside == EVAL_AVOID_SIDE_EFFECTS)\n+      return lhs;\n+    if (binop_user_defined_p (BINOP_ASSIGN, lhs, rhs))\n+      return value_x_binop (lhs, rhs, BINOP_ASSIGN, OP_NULL, noside);\n+    else\n+      return value_assign (lhs, rhs);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return BINOP_ASSIGN; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}