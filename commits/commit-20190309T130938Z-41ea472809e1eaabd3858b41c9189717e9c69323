{
  "sha": "41ea472809e1eaabd3858b41c9189717e9c69323",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDFlYTQ3MjgwOWUxZWFhYmQzODU4YjQxYzkxODk3MTdlOWM2OTMyMw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-03-08T15:15:09Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-03-09T13:09:38Z"
    },
    "message": "Split rank_one_type_parm_char from rank_one_type\n\ngdb/ChangeLog:\n\n\t* gdbtypes.c (rank_one_type_parm_char): New function extracted\n\tfrom...\n\t(rank_one_type): ... this.",
    "tree": {
      "sha": "be2da935acb61d85ceeb0705eec2296285674633",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/be2da935acb61d85ceeb0705eec2296285674633"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/41ea472809e1eaabd3858b41c9189717e9c69323",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41ea472809e1eaabd3858b41c9189717e9c69323",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/41ea472809e1eaabd3858b41c9189717e9c69323",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/41ea472809e1eaabd3858b41c9189717e9c69323/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "793cd1d2a12e9741e01f5df702e493f5e9ba0dea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/793cd1d2a12e9741e01f5df702e493f5e9ba0dea",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/793cd1d2a12e9741e01f5df702e493f5e9ba0dea"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 54,
    "deletions": 41
  },
  "files": [
    {
      "sha": "7bc3ebe7b845400f624628d647bd40c9ed97e5f5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41ea472809e1eaabd3858b41c9189717e9c69323/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41ea472809e1eaabd3858b41c9189717e9c69323/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=41ea472809e1eaabd3858b41c9189717e9c69323",
      "patch": "@@ -1,3 +1,9 @@\n+2019-03-08  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.c (rank_one_type_parm_char): New function extracted\n+\tfrom...\n+\t(rank_one_type): ... this.\n+\n 2019-03-08  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.c (rank_one_type_parm_enum): New function extracted"
    },
    {
      "sha": "7acaf9da2301cf7b4565cd07e821047641607813",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 48,
      "deletions": 41,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/41ea472809e1eaabd3858b41c9189717e9c69323/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/41ea472809e1eaabd3858b41c9189717e9c69323/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=41ea472809e1eaabd3858b41c9189717e9c69323",
      "patch": "@@ -3998,6 +3998,53 @@ rank_one_type_parm_enum (struct type *parm, struct type *arg, struct value *valu\n     }\n }\n \n+/* rank_one_type helper for when PARM's type code is TYPE_CODE_CHAR.  */\n+\n+static struct rank\n+rank_one_type_parm_char (struct type *parm, struct type *arg, struct value *value)\n+{\n+  switch (TYPE_CODE (arg))\n+    {\n+    case TYPE_CODE_RANGE:\n+    case TYPE_CODE_BOOL:\n+    case TYPE_CODE_ENUM:\n+      if (TYPE_DECLARED_CLASS (arg))\n+\treturn INCOMPATIBLE_TYPE_BADNESS;\n+      return INTEGER_CONVERSION_BADNESS;\n+    case TYPE_CODE_FLT:\n+      return INT_FLOAT_CONVERSION_BADNESS;\n+    case TYPE_CODE_INT:\n+      if (TYPE_LENGTH (arg) > TYPE_LENGTH (parm))\n+\treturn INTEGER_CONVERSION_BADNESS;\n+      else if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))\n+\treturn INTEGER_PROMOTION_BADNESS;\n+      /* fall through */\n+    case TYPE_CODE_CHAR:\n+      /* Deal with signed, unsigned, and plain chars for C++ and\n+\t with int cases falling through from previous case.  */\n+      if (TYPE_NOSIGN (parm))\n+\t{\n+\t  if (TYPE_NOSIGN (arg))\n+\t    return EXACT_MATCH_BADNESS;\n+\t  else\n+\t    return INTEGER_CONVERSION_BADNESS;\n+\t}\n+      else if (TYPE_UNSIGNED (parm))\n+\t{\n+\t  if (TYPE_UNSIGNED (arg))\n+\t    return EXACT_MATCH_BADNESS;\n+\t  else\n+\t    return INTEGER_PROMOTION_BADNESS;\n+\t}\n+      else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))\n+\treturn EXACT_MATCH_BADNESS;\n+      else\n+\treturn INTEGER_CONVERSION_BADNESS;\n+    default:\n+      return INCOMPATIBLE_TYPE_BADNESS;\n+    }\n+}\n+\n /* Compare one type (PARM) for compatibility with another (ARG).\n  * PARM is intended to be the parameter type of a function; and\n  * ARG is the supplied argument's type.  This function tests if\n@@ -4098,47 +4145,7 @@ rank_one_type (struct type *parm, struct type *arg, struct value *value)\n     case TYPE_CODE_ENUM:\n       return rank_one_type_parm_enum (parm, arg, value);\n     case TYPE_CODE_CHAR:\n-      switch (TYPE_CODE (arg))\n-\t{\n-\tcase TYPE_CODE_RANGE:\n-\tcase TYPE_CODE_BOOL:\n-\tcase TYPE_CODE_ENUM:\n-\t  if (TYPE_DECLARED_CLASS (arg))\n-\t    return INCOMPATIBLE_TYPE_BADNESS;\n-\t  return INTEGER_CONVERSION_BADNESS;\n-\tcase TYPE_CODE_FLT:\n-\t  return INT_FLOAT_CONVERSION_BADNESS;\n-\tcase TYPE_CODE_INT:\n-\t  if (TYPE_LENGTH (arg) > TYPE_LENGTH (parm))\n-\t    return INTEGER_CONVERSION_BADNESS;\n-\t  else if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))\n-\t    return INTEGER_PROMOTION_BADNESS;\n-\t  /* fall through */\n-\tcase TYPE_CODE_CHAR:\n-\t  /* Deal with signed, unsigned, and plain chars for C++ and\n-\t     with int cases falling through from previous case.  */\n-\t  if (TYPE_NOSIGN (parm))\n-\t    {\n-\t      if (TYPE_NOSIGN (arg))\n-\t\treturn EXACT_MATCH_BADNESS;\n-\t      else\n-\t\treturn INTEGER_CONVERSION_BADNESS;\n-\t    }\n-\t  else if (TYPE_UNSIGNED (parm))\n-\t    {\n-\t      if (TYPE_UNSIGNED (arg))\n-\t\treturn EXACT_MATCH_BADNESS;\n-\t      else\n-\t\treturn INTEGER_PROMOTION_BADNESS;\n-\t    }\n-\t  else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))\n-\t    return EXACT_MATCH_BADNESS;\n-\t  else\n-\t    return INTEGER_CONVERSION_BADNESS;\n-\tdefault:\n-\t  return INCOMPATIBLE_TYPE_BADNESS;\n-\t}\n-      break;\n+      return rank_one_type_parm_char (parm, arg, value);\n     case TYPE_CODE_RANGE:\n       switch (TYPE_CODE (arg))\n \t{"
    }
  ]
}