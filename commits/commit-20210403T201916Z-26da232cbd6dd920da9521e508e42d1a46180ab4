{
  "sha": "26da232cbd6dd920da9521e508e42d1a46180ab4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjZkYTIzMmNiZDZkZDkyMGRhOTUyMWU1MDhlNDJkMWE0NjE4MGFiNA==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2020-12-10T03:26:30Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-04-03T20:19:16Z"
    },
    "message": "sim: example-synacor: a simple implementation for reference\n\nProvide a simple example simulator for people porting to new targets\nto use as a reference.  This one has the advantage of being used by\npeople and having a fun program available for it.\n\nIt doesn't require a special target -- the example simulators can be\nbuilt for any existing port.",
    "tree": {
      "sha": "76451bdc21196c61c8c36787c74239660437b777",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/76451bdc21196c61c8c36787c74239660437b777"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/26da232cbd6dd920da9521e508e42d1a46180ab4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26da232cbd6dd920da9521e508e42d1a46180ab4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/26da232cbd6dd920da9521e508e42d1a46180ab4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26da232cbd6dd920da9521e508e42d1a46180ab4/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a389375f5b5fb67acdda6be028526ac44df2fbff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a389375f5b5fb67acdda6be028526ac44df2fbff",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a389375f5b5fb67acdda6be028526ac44df2fbff"
    }
  ],
  "stats": {
    "total": 16038,
    "additions": 16037,
    "deletions": 1
  },
  "files": [
    {
      "sha": "f25e8347ff82d0c747743ea187ebdc386cb083a4",
      "filename": "sim/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ChangeLog?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-03  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* configure.ac: Add --example-sims option.\n+\t* configure: Regenerate.\n+\n 2021-04-03  Mike Frysinger  <vapier@gentoo.org>\n \n \t* Makefile.am (check_PROGRAMS, CLEANFILES, DISTCLEANFILES): Define."
    },
    {
      "sha": "e90133a2ceaa84bd6b31b333d96d1b7e9dc36e8b",
      "filename": "sim/configure",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/configure?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -744,6 +744,7 @@ enable_maintainer_mode\n enable_dependency_tracking\n enable_silent_rules\n enable_sim\n+enable_example_sims\n enable_targets\n '\n       ac_precious_vars='build_alias\n@@ -785,7 +786,8 @@ sh\n erc32\n ppc\n ft32\n-v850'\n+v850\n+example-synacor'\n \n # Initialize some variables set by options.\n ac_init_help=\n@@ -1414,6 +1416,7 @@ Optional Features:\n   --enable-silent-rules   less verbose build output (undo: \"make V=1\")\n   --disable-silent-rules  verbose build output (undo: \"make V=0\")\n   --enable-sim            Enable the GNU simulator\n+  --enable-example-sims   enable example GNU simulators\n   --enable-targets        alternative target configurations\n \n Some influential environment variables:\n@@ -4832,6 +4835,12 @@ esac\n fi\n \n \n+# Check whether --enable-example-sims was given.\n+if test \"${enable_example_sims+set}\" = set; then :\n+  enableval=$enable_example_sims;\n+fi\n+\n+\n # Check whether --enable-targets was given.\n if test \"${enable_targets+set}\" = set; then :\n   enableval=$enable_targets; case \"${enableval}\" in\n@@ -5227,6 +5236,11 @@ subdirs=\"$subdirs aarch64\"\n   esac\n \n   done\n+\n+  if test \"x${enable_example_sims}\" = xyes; then\n+    subdirs=\"$subdirs example-synacor\"\n+\n+  fi\n fi\n  if test \"$sim_igen\" = \"yes\"; then\n   SIM_ENABLE_IGEN_TRUE="
    },
    {
      "sha": "8faef9dcb83b798a83841de7da9d86d2b7f466b3",
      "filename": "sim/configure.ac",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/configure.ac?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -19,6 +19,10 @@ yes | no) ;;\n *)\tAC_MSG_ERROR(bad value ${enableval} given for --enable-sim option) ;;\n esac])\n \n+AC_ARG_ENABLE([example-sims],\n+\t      [AC_HELP_STRING([--enable-example-sims],\n+\t\t\t      [enable example GNU simulators])])\n+\n AC_ARG_ENABLE(targets,\n [  --enable-targets        alternative target configurations],\n [case \"${enableval}\" in\n@@ -85,6 +89,10 @@ if test \"${enable_sim}\" != no; then\n     SIM_TARGET([ft32-*-*], [ft32])\n     SIM_TARGET([v850*-*-*], [v850], [sim_igen=yes])\n   done\n+\n+  if test \"x${enable_example_sims}\" = xyes; then\n+    AC_CONFIG_SUBDIRS(example-synacor)\n+  fi\n fi\n AM_CONDITIONAL([SIM_ENABLE_IGEN], [test \"$sim_igen\" = \"yes\"])\n "
    },
    {
      "sha": "801175b888e96aa15419bbee19ad5a811513e5f9",
      "filename": "sim/example-synacor/ChangeLog",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/ChangeLog?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,5 @@\n+2021-04-03  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* configure.ac, interp.c, Makefile.in, README, README.arch-spec,\n+\tsim-main.c, sim-main.h: New files for example simulator.\n+\t* aclocal.m4, config.in, configure: Regenerated."
    },
    {
      "sha": "edd77ac801e8931130e650a4db7ac10527c0fdb6",
      "filename": "sim/example-synacor/Makefile.in",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/Makefile.in?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,26 @@\n+#    Makefile template for Configure for the example synacor simulator.\n+#    Copyright (C) 2005-2021 Free Software Foundation, Inc.\n+#    Written by Mike Frysinger <vapier@gentoo.org>\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+## COMMON_PRE_CONFIG_FRAG\n+\n+SIM_OBJS = \\\n+\t$(SIM_NEW_COMMON_OBJS) \\\n+\tsim-resume.o \\\n+\tinterp.o \\\n+\tsim-main.o\n+\n+## COMMON_POST_CONFIG_FRAG"
    },
    {
      "sha": "93ffd53d5a498121adfa89bf35e0e18ce5b4377b",
      "filename": "sim/example-synacor/README",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/README",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/README",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/README?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,15 @@\n+= OVERVIEW =\n+\n+The Synacor Challenge is a fun programming exercise with a number of puzzles\n+built into it.  You can find more details about it here:\n+https://challenge.synacor.com/\n+\n+The first puzzle is writing an interpreter for their custom ISA.  This is a\n+simulator for that custom CPU.  The CPU is quite basic: it's 16-bit with only\n+8 registers and a limited set of instructions.  This means the port will never\n+grow new features.  See README.arch-spec for more details.\n+\n+Implementing it here ends up being quite useful: it acts as a simple constrained\n+\"real world\" example for people who want to implement a new simulator for their\n+own architecture.  We demonstrate all the basic fundamentals (registers, memory,\n+branches, and tracing) that all ports should have."
    },
    {
      "sha": "da2d9d003670cc15e8288206601ae17e0fe2b18d",
      "filename": "sim/example-synacor/README.arch-spec",
      "status": "added",
      "additions": 73,
      "deletions": 0,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/README.arch-spec",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/README.arch-spec",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/README.arch-spec?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,73 @@\n+== architecture ==\n+- three storage regions\n+  - memory with 15-bit address space storing 16-bit values\n+  - eight registers\n+  - an unbounded stack which holds individual 16-bit values\n+- all numbers are unsigned integers 0..32767 (15-bit)\n+- all math is modulo 32768; 32758 + 15 => 5\n+\n+== binary format ==\n+- each number is stored as a 16-bit little-endian pair (low byte, high byte)\n+- numbers 0..32767 mean a literal value\n+- numbers 32768..32775 instead mean registers 0..7\n+- numbers 32776..65535 are invalid\n+- programs are loaded into memory starting at address 0\n+- address 0 is the first 16-bit value, address 1 is the second 16-bit value, etc\n+\n+== execution ==\n+- After an operation is executed, the next instruction to read is immediately after the last argument of the current operation.\n+  If a jump was performed, the next operation is instead the exact destination of the jump.\n+- Encountering a register as an operation argument should be taken as reading from the register or setting into the register as appropriate.\n+\n+== hints ==\n+- Start with operations 0, 19, and 21.\n+- Here's a code for the challenge website: jTTockJlJiOC\n+- The program \"9,32768,32769,4,19,32768\" occupies six memory addresses and should:\n+  - Store into register 0 the sum of 4 and the value contained in register 1.\n+  - Output to the terminal the character with the ascii code contained in register 0.\n+\n+== opcode listing ==\n+halt: 0\n+  stop execution and terminate the program\n+set: 1 a b\n+  set register <a> to the value of <b>\n+push: 2 a\n+  push <a> onto the stack\n+pop: 3 a\n+  remove the top element from the stack and write it into <a>; empty stack = error\n+eq: 4 a b c\n+  set <a> to 1 if <b> is equal to <c>; set it to 0 otherwise\n+gt: 5 a b c\n+  set <a> to 1 if <b> is greater than <c>; set it to 0 otherwise\n+jmp: 6 a\n+  jump to <a>\n+jt: 7 a b\n+  if <a> is nonzero, jump to <b>\n+jf: 8 a b\n+  if <a> is zero, jump to <b>\n+add: 9 a b c\n+  assign into <a> the sum of <b> and <c> (modulo 32768)\n+mult: 10 a b c\n+  store into <a> the product of <b> and <c> (modulo 32768)\n+mod: 11 a b c\n+  store into <a> the remainder of <b> divided by <c>\n+and: 12 a b c\n+  stores into <a> the bitwise and of <b> and <c>\n+or: 13 a b c\n+  stores into <a> the bitwise or of <b> and <c>\n+not: 14 a b\n+  stores 15-bit bitwise inverse of <b> in <a>\n+rmem: 15 a b\n+  read memory at address <b> and write it to <a>\n+wmem: 16 a b\n+  write the value from <b> into memory at address <a>\n+call: 17 a\n+  write the address of the next instruction to the stack and jump to <a>\n+ret: 18\n+  remove the top element from the stack and jump to it; empty stack = halt\n+out: 19 a\n+  write the character represented by ascii code <a> to the terminal\n+in: 20 a\n+  read a character from the terminal and write its ascii code to <a>; it can be assumed that once input starts, it will continue until a newline is encountered; this means that you can safely read whole lines from the keyboard and trust that they will be fully read\n+noop: 21\n+  no operation"
    },
    {
      "sha": "78a048914e5a110e9f21b53b533def667a8a08e6",
      "filename": "sim/example-synacor/aclocal.m4",
      "status": "added",
      "additions": 121,
      "deletions": 0,
      "changes": 121,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/aclocal.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/aclocal.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/aclocal.m4?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,121 @@\n+# generated automatically by aclocal 1.15.1 -*- Autoconf -*-\n+\n+# Copyright (C) 1996-2017 Free Software Foundation, Inc.\n+\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n+# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+# PARTICULAR PURPOSE.\n+\n+m4_ifndef([AC_CONFIG_MACRO_DIRS], [m4_defun([_AM_CONFIG_MACRO_DIRS], [])m4_defun([AC_CONFIG_MACRO_DIRS], [_AM_CONFIG_MACRO_DIRS($@)])])\n+# AM_CONDITIONAL                                            -*- Autoconf -*-\n+\n+# Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# AM_CONDITIONAL(NAME, SHELL-CONDITION)\n+# -------------------------------------\n+# Define a conditional.\n+AC_DEFUN([AM_CONDITIONAL],\n+[AC_PREREQ([2.52])dnl\n+ m4_if([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],\n+       [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl\n+AC_SUBST([$1_TRUE])dnl\n+AC_SUBST([$1_FALSE])dnl\n+_AM_SUBST_NOTMAKE([$1_TRUE])dnl\n+_AM_SUBST_NOTMAKE([$1_FALSE])dnl\n+m4_define([_AM_COND_VALUE_$1], [$2])dnl\n+if $2; then\n+  $1_TRUE=\n+  $1_FALSE='#'\n+else\n+  $1_TRUE='#'\n+  $1_FALSE=\n+fi\n+AC_CONFIG_COMMANDS_PRE(\n+[if test -z \"${$1_TRUE}\" && test -z \"${$1_FALSE}\"; then\n+  AC_MSG_ERROR([[conditional \"$1\" was never defined.\n+Usually this means the macro was only invoked conditionally.]])\n+fi])])\n+\n+# Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-\n+# From Jim Meyering\n+\n+# Copyright (C) 1996-2017 Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# AM_MAINTAINER_MODE([DEFAULT-MODE])\n+# ----------------------------------\n+# Control maintainer-specific portions of Makefiles.\n+# Default is to disable them, unless 'enable' is passed literally.\n+# For symmetry, 'disable' may be passed as well.  Anyway, the user\n+# can override the default with the --enable/--disable switch.\n+AC_DEFUN([AM_MAINTAINER_MODE],\n+[m4_case(m4_default([$1], [disable]),\n+       [enable], [m4_define([am_maintainer_other], [disable])],\n+       [disable], [m4_define([am_maintainer_other], [enable])],\n+       [m4_define([am_maintainer_other], [enable])\n+        m4_warn([syntax], [unexpected argument to AM@&t@_MAINTAINER_MODE: $1])])\n+AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n+  dnl maintainer-mode's default is 'disable' unless 'enable' is passed\n+  AC_ARG_ENABLE([maintainer-mode],\n+    [AS_HELP_STRING([--]am_maintainer_other[-maintainer-mode],\n+      am_maintainer_other[ make rules and dependencies not useful\n+      (and sometimes confusing) to the casual installer])],\n+    [USE_MAINTAINER_MODE=$enableval],\n+    [USE_MAINTAINER_MODE=]m4_if(am_maintainer_other, [enable], [no], [yes]))\n+  AC_MSG_RESULT([$USE_MAINTAINER_MODE])\n+  AM_CONDITIONAL([MAINTAINER_MODE], [test $USE_MAINTAINER_MODE = yes])\n+  MAINT=$MAINTAINER_MODE_TRUE\n+  AC_SUBST([MAINT])dnl\n+]\n+)\n+\n+# Copyright (C) 2006-2017 Free Software Foundation, Inc.\n+#\n+# This file is free software; the Free Software Foundation\n+# gives unlimited permission to copy and/or distribute it,\n+# with or without modifications, as long as this notice is preserved.\n+\n+# _AM_SUBST_NOTMAKE(VARIABLE)\n+# ---------------------------\n+# Prevent Automake from outputting VARIABLE = @VARIABLE@ in Makefile.in.\n+# This macro is traced by Automake.\n+AC_DEFUN([_AM_SUBST_NOTMAKE])\n+\n+# AM_SUBST_NOTMAKE(VARIABLE)\n+# --------------------------\n+# Public sister of _AM_SUBST_NOTMAKE.\n+AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])\n+\n+m4_include([../m4/sim_ac_common.m4])\n+m4_include([../m4/sim_ac_option_alignment.m4])\n+m4_include([../m4/sim_ac_option_assert.m4])\n+m4_include([../m4/sim_ac_option_endian.m4])\n+m4_include([../m4/sim_ac_option_environment.m4])\n+m4_include([../m4/sim_ac_option_inline.m4])\n+m4_include([../m4/sim_ac_option_warnings.m4])\n+m4_include([../m4/sim_ac_output.m4])\n+m4_include([../m4/sim_ac_toolchain.m4])\n+m4_include([../../config/acx.m4])\n+m4_include([../../config/depstand.m4])\n+m4_include([../../config/gettext-sister.m4])\n+m4_include([../../config/lead-dot.m4])\n+m4_include([../../config/override.m4])\n+m4_include([../../config/plugins.m4])\n+m4_include([../../config/zlib.m4])\n+m4_include([../../libtool.m4])\n+m4_include([../../ltoptions.m4])\n+m4_include([../../ltsugar.m4])\n+m4_include([../../ltversion.m4])\n+m4_include([../../lt~obsolete.m4])"
    },
    {
      "sha": "cb5ea1b01c95768650c6885bdacf41f90c81f8a9",
      "filename": "sim/example-synacor/config.in",
      "status": "added",
      "additions": 242,
      "deletions": 0,
      "changes": 242,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/config.in?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,242 @@\n+/* config.in.  Generated from configure.ac by autoheader.  */\n+\n+/* Define if building universal (internal helper macro) */\n+#undef AC_APPLE_UNIVERSAL_BUILD\n+\n+/* Sim debug setting */\n+#undef DEBUG\n+\n+/* Define to 1 if translation of program messages to the user's native\n+   language is requested. */\n+#undef ENABLE_NLS\n+\n+/* Define to 1 if you have the <dlfcn.h> header file. */\n+#undef HAVE_DLFCN_H\n+\n+/* Define to 1 if you have the <fcntl.h> header file. */\n+#undef HAVE_FCNTL_H\n+\n+/* Define to 1 if you have the <fpu_control.h> header file. */\n+#undef HAVE_FPU_CONTROL_H\n+\n+/* Define to 1 if you have the `ftruncate' function. */\n+#undef HAVE_FTRUNCATE\n+\n+/* Define to 1 if you have the `getrusage' function. */\n+#undef HAVE_GETRUSAGE\n+\n+/* Define to 1 if you have the <inttypes.h> header file. */\n+#undef HAVE_INTTYPES_H\n+\n+/* Define to 1 if you have the `nsl' library (-lnsl). */\n+#undef HAVE_LIBNSL\n+\n+/* Define to 1 if you have the `socket' library (-lsocket). */\n+#undef HAVE_LIBSOCKET\n+\n+/* Define to 1 if you have the `lstat' function. */\n+#undef HAVE_LSTAT\n+\n+/* Define to 1 if you have the <memory.h> header file. */\n+#undef HAVE_MEMORY_H\n+\n+/* Define to 1 if you have the `mmap' function. */\n+#undef HAVE_MMAP\n+\n+/* Define to 1 if you have the `munmap' function. */\n+#undef HAVE_MUNMAP\n+\n+/* Define to 1 if you have the `posix_fallocate' function. */\n+#undef HAVE_POSIX_FALLOCATE\n+\n+/* Define to 1 if you have the `sigaction' function. */\n+#undef HAVE_SIGACTION\n+\n+/* Define to 1 if the system has the type `socklen_t'. */\n+#undef HAVE_SOCKLEN_T\n+\n+/* Define to 1 if you have the <stdint.h> header file. */\n+#undef HAVE_STDINT_H\n+\n+/* Define to 1 if you have the <stdlib.h> header file. */\n+#undef HAVE_STDLIB_H\n+\n+/* Define to 1 if you have the <strings.h> header file. */\n+#undef HAVE_STRINGS_H\n+\n+/* Define to 1 if you have the <string.h> header file. */\n+#undef HAVE_STRING_H\n+\n+/* Define to 1 if `st_atime' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_ATIME\n+\n+/* Define to 1 if `st_blksize' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_BLKSIZE\n+\n+/* Define to 1 if `st_blocks' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_BLOCKS\n+\n+/* Define to 1 if `st_ctime' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_CTIME\n+\n+/* Define to 1 if `st_dev' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_DEV\n+\n+/* Define to 1 if `st_gid' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_GID\n+\n+/* Define to 1 if `st_ino' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_INO\n+\n+/* Define to 1 if `st_mode' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_MODE\n+\n+/* Define to 1 if `st_mtime' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_MTIME\n+\n+/* Define to 1 if `st_nlink' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_NLINK\n+\n+/* Define to 1 if `st_rdev' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_RDEV\n+\n+/* Define to 1 if `st_size' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_SIZE\n+\n+/* Define to 1 if `st_uid' is a member of `struct stat'. */\n+#undef HAVE_STRUCT_STAT_ST_UID\n+\n+/* Define to 1 if you have the <sys/mman.h> header file. */\n+#undef HAVE_SYS_MMAN_H\n+\n+/* Define to 1 if you have the <sys/resource.h> header file. */\n+#undef HAVE_SYS_RESOURCE_H\n+\n+/* Define to 1 if you have the <sys/stat.h> header file. */\n+#undef HAVE_SYS_STAT_H\n+\n+/* Define to 1 if you have the <sys/times.h> header file. */\n+#undef HAVE_SYS_TIMES_H\n+\n+/* Define to 1 if you have the <sys/time.h> header file. */\n+#undef HAVE_SYS_TIME_H\n+\n+/* Define to 1 if you have the <sys/types.h> header file. */\n+#undef HAVE_SYS_TYPES_H\n+\n+/* Define to 1 if you have the `time' function. */\n+#undef HAVE_TIME\n+\n+/* Define to 1 if you have the `truncate' function. */\n+#undef HAVE_TRUNCATE\n+\n+/* Define to 1 if you have the <unistd.h> header file. */\n+#undef HAVE_UNISTD_H\n+\n+/* Define to 1 if you have the <windows.h> header file. */\n+#undef HAVE_WINDOWS_H\n+\n+/* Define to 1 if you have the `__setfpucw' function. */\n+#undef HAVE___SETFPUCW\n+\n+/* Define to the sub-directory in which libtool stores uninstalled libraries.\n+   */\n+#undef LT_OBJDIR\n+\n+/* Name of this package. */\n+#undef PACKAGE\n+\n+/* Define to the address where bug reports for this package should be sent. */\n+#undef PACKAGE_BUGREPORT\n+\n+/* Define to the full name of this package. */\n+#undef PACKAGE_NAME\n+\n+/* Define to the full name and version of this package. */\n+#undef PACKAGE_STRING\n+\n+/* Define to the one symbol short name of this package. */\n+#undef PACKAGE_TARNAME\n+\n+/* Define to the home page for this package. */\n+#undef PACKAGE_URL\n+\n+/* Define to the version of this package. */\n+#undef PACKAGE_VERSION\n+\n+/* Additional package description */\n+#undef PKGVERSION\n+\n+/* Sim profile settings */\n+#undef PROFILE\n+\n+/* Bug reporting address */\n+#undef REPORT_BUGS_TO\n+\n+/* Define as the return type of signal handlers (`int' or `void'). */\n+#undef RETSIGTYPE\n+\n+/* Define to 1 if you have the ANSI C header files. */\n+#undef STDC_HEADERS\n+\n+/* Enable extensions on AIX 3, Interix.  */\n+#ifndef _ALL_SOURCE\n+# undef _ALL_SOURCE\n+#endif\n+/* Enable GNU extensions on systems that have them.  */\n+#ifndef _GNU_SOURCE\n+# undef _GNU_SOURCE\n+#endif\n+/* Enable threading extensions on Solaris.  */\n+#ifndef _POSIX_PTHREAD_SEMANTICS\n+# undef _POSIX_PTHREAD_SEMANTICS\n+#endif\n+/* Enable extensions on HP NonStop.  */\n+#ifndef _TANDEM_SOURCE\n+# undef _TANDEM_SOURCE\n+#endif\n+/* Enable general extensions on Solaris.  */\n+#ifndef __EXTENSIONS__\n+# undef __EXTENSIONS__\n+#endif\n+\n+\n+/* Sim assert settings */\n+#undef WITH_ASSERT\n+\n+/* Sim debug setting */\n+#undef WITH_DEBUG\n+\n+/* Sim default environment */\n+#undef WITH_ENVIRONMENT\n+\n+/* Sim profile settings */\n+#undef WITH_PROFILE\n+\n+/* How to route I/O */\n+#undef WITH_STDIO\n+\n+/* Sim trace settings */\n+#undef WITH_TRACE\n+\n+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n+   significant byte first (like Motorola and SPARC, unlike Intel). */\n+#if defined AC_APPLE_UNIVERSAL_BUILD\n+# if defined __BIG_ENDIAN__\n+#  define WORDS_BIGENDIAN 1\n+# endif\n+#else\n+# ifndef WORDS_BIGENDIAN\n+#  undef WORDS_BIGENDIAN\n+# endif\n+#endif\n+\n+/* Define to 1 if on MINIX. */\n+#undef _MINIX\n+\n+/* Define to 2 if the system does not provide POSIX.1 features except with\n+   this defined. */\n+#undef _POSIX_1_SOURCE\n+\n+/* Define to 1 if you need to in order for `stat' and other things to work. */\n+#undef _POSIX_SOURCE"
    },
    {
      "sha": "4392bc8c316f4f3d978071401276931b7e4f85b7",
      "filename": "sim/example-synacor/configure",
      "status": "added",
      "additions": 14333,
      "deletions": 0,
      "changes": 14333,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/configure?ref=26da232cbd6dd920da9521e508e42d1a46180ab4"
    },
    {
      "sha": "13b311197e3613892274c78e368bf42d083c48d3",
      "filename": "sim/example-synacor/configure.ac",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/configure.ac?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,10 @@\n+dnl Process this file with autoconf to produce a configure script.\n+AC_INIT(Makefile.in)\n+AC_CONFIG_MACRO_DIRS([../m4 ../.. ../../config])\n+\n+SIM_AC_COMMON\n+\n+SIM_AC_OPTION_ENDIAN(LITTLE)\n+SIM_AC_OPTION_ALIGNMENT(STRICT_ALIGNMENT,STRICT_ALIGNMENT)\n+\n+SIM_AC_OUTPUT"
    },
    {
      "sha": "a422fbde9b48ed8a34b5f176585c9df384a641a3",
      "filename": "sim/example-synacor/interp.c",
      "status": "added",
      "additions": 176,
      "deletions": 0,
      "changes": 176,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/interp.c?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,176 @@\n+/* Example synacor simulator.\n+\n+   Copyright (C) 2005-2021 Free Software Foundation, Inc.\n+   Contributed by Mike Frysinger.\n+\n+   This file is part of simulators.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This file contains the main glue logic between the sim core and the target\n+   specific simulator.  Normally this file will be kept small and the target\n+   details will live in other files.\n+\n+   For more specific details on these functions, see the gdb/remote-sim.h\n+   header file.  */\n+\n+#include \"config.h\"\n+\n+#include \"sim-main.h\"\n+#include \"sim-options.h\"\n+\f\n+/* This function is the main loop.  It should process ticks and decode+execute\n+   a single instruction.\n+\n+   Usually you do not need to change things here.  */\n+\n+void\n+sim_engine_run (SIM_DESC sd,\n+\t\tint next_cpu_nr, /* ignore  */\n+\t\tint nr_cpus, /* ignore  */\n+\t\tint siggnal) /* ignore  */\n+{\n+  SIM_CPU *cpu;\n+\n+  SIM_ASSERT (STATE_MAGIC (sd) == SIM_MAGIC_NUMBER);\n+\n+  cpu = STATE_CPU (sd, 0);\n+\n+  while (1)\n+    {\n+      step_once (cpu);\n+      if (sim_events_tick (sd))\n+\tsim_events_process (sd);\n+    }\n+}\n+\f\n+/* Initialize the simulator from scratch.  This is called once per lifetime of\n+   the simulation.  Think of it as a processor reset.\n+\n+   Usually all cpu-specific setup is handled in the initialize_cpu callback.\n+   If you want to do cpu-independent stuff, then it should go at the end (see\n+   where memory is initialized).  */\n+\n+#define DEFAULT_MEM_SIZE (16 * 1024 * 1024)\n+\n+static void\n+free_state (SIM_DESC sd)\n+{\n+  if (STATE_MODULES (sd) != NULL)\n+    sim_module_uninstall (sd);\n+  sim_cpu_free_all (sd);\n+  sim_state_free (sd);\n+}\n+\n+SIM_DESC\n+sim_open (SIM_OPEN_KIND kind, host_callback *callback,\n+\t  struct bfd *abfd, char * const *argv)\n+{\n+  char c;\n+  int i;\n+  SIM_DESC sd = sim_state_alloc (kind, callback);\n+\n+  /* The cpu data is kept in a separately allocated chunk of memory.  */\n+  if (sim_cpu_alloc_all (sd, 1, /*cgen_cpu_max_extra_bytes ()*/0) != SIM_RC_OK)\n+    {\n+      free_state (sd);\n+      return 0;\n+    }\n+\n+  if (sim_pre_argv_init (sd, argv[0]) != SIM_RC_OK)\n+    {\n+      free_state (sd);\n+      return 0;\n+    }\n+\n+  /* XXX: Default to the Virtual environment.  */\n+  if (STATE_ENVIRONMENT (sd) == ALL_ENVIRONMENT)\n+    STATE_ENVIRONMENT (sd) = VIRTUAL_ENVIRONMENT;\n+\n+  /* The parser will print an error message for us, so we silently return.  */\n+  if (sim_parse_args (sd, argv) != SIM_RC_OK)\n+    {\n+      free_state (sd);\n+      return 0;\n+    }\n+\n+  /* Check for/establish the a reference program image.  */\n+  if (sim_analyze_program (sd,\n+\t\t\t   (STATE_PROG_ARGV (sd) != NULL\n+\t\t\t    ? *STATE_PROG_ARGV (sd)\n+\t\t\t    : NULL), abfd) != SIM_RC_OK)\n+    {\n+      free_state (sd);\n+      return 0;\n+    }\n+\n+  /* Establish any remaining configuration options.  */\n+  if (sim_config (sd) != SIM_RC_OK)\n+    {\n+      free_state (sd);\n+      return 0;\n+    }\n+\n+  if (sim_post_argv_init (sd) != SIM_RC_OK)\n+    {\n+      free_state (sd);\n+      return 0;\n+    }\n+\n+  /* CPU specific initialization.  */\n+  for (i = 0; i < MAX_NR_PROCESSORS; ++i)\n+    {\n+      SIM_CPU *cpu = STATE_CPU (sd, i);\n+\n+      initialize_cpu (sd, cpu);\n+    }\n+\n+  /* Allocate external memory if none specified by user.\n+     Use address 4 here in case the user wanted address 0 unmapped.  */\n+  if (sim_core_read_buffer (sd, NULL, read_map, &c, 4, 1) == 0)\n+    sim_do_commandf (sd, \"memory-size %#x\", DEFAULT_MEM_SIZE);\n+\n+  return sd;\n+}\n+\f\n+/* Prepare to run a program that has already been loaded into memory.\n+\n+   Usually you do not need to change things here.  */\n+\n+SIM_RC\n+sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n+\t\t     char * const *argv, char * const *env)\n+{\n+  SIM_CPU *cpu = STATE_CPU (sd, 0);\n+  sim_cia addr;\n+\n+  /* Set the PC.  */\n+  if (abfd != NULL)\n+    addr = bfd_get_start_address (abfd);\n+  else\n+    addr = 0;\n+  sim_pc_set (cpu, addr);\n+\n+  /* Standalone mode (i.e. `run`) will take care of the argv for us in\n+     sim_open() -> sim_parse_args().  But in debug mode (i.e. 'target sim'\n+     with `gdb`), we need to handle it because the user can change the\n+     argv on the fly via gdb's 'run'.  */\n+  if (STATE_PROG_ARGV (sd) != argv)\n+    {\n+      freeargv (STATE_PROG_ARGV (sd));\n+      STATE_PROG_ARGV (sd) = dupargv (argv);\n+    }\n+\n+  return SIM_RC_OK;\n+}"
    },
    {
      "sha": "a7d748f3022c9eccdc7adff1a7417d382a3073fa",
      "filename": "sim/example-synacor/sim-main.c",
      "status": "added",
      "additions": 530,
      "deletions": 0,
      "changes": 530,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/sim-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/sim-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/sim-main.c?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,530 @@\n+/* Example synacor simulator.\n+\n+   Copyright (C) 2005-2021 Free Software Foundation, Inc.\n+   Contributed by Mike Frysinger.\n+\n+   This file is part of simulators.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This file contains the main simulator decoding logic.  i.e. everything that\n+   is architecture specific.  */\n+\n+#include \"config.h\"\n+\n+#include \"sim-main.h\"\n+\f\n+/* Get the register number from the number.  */\n+static unsigned16\n+register_num (SIM_CPU *cpu, unsigned16 num)\n+{\n+  SIM_DESC sd = CPU_STATE (cpu);\n+\n+  if (num < 0x8000 || num >= 0x8008)\n+    sim_engine_halt (sd, cpu, NULL, cpu->pc, sim_signalled, SIM_SIGILL);\n+\n+  return num & 0xf;\n+}\n+\n+/* Helper to process immediates according to the ISA.  */\n+static unsigned16\n+interp_num (SIM_CPU *cpu, unsigned16 num)\n+{\n+  SIM_DESC sd = CPU_STATE (cpu);\n+\n+  if (num < 0x8000)\n+    {\n+      /* Numbers 0..32767 mean a literal value.  */\n+      TRACE_DECODE (cpu, \"%#x is a literal\", num);\n+      return num;\n+    }\n+  else if (num < 0x8008)\n+    {\n+      /* Numbers 32768..32775 instead mean registers 0..7.  */\n+      TRACE_DECODE (cpu, \"%#x is register R%i\", num, num & 0xf);\n+      return cpu->regs[num & 0xf];\n+    }\n+  else\n+    {\n+      /* Numbers 32776..65535 are invalid.  */\n+      TRACE_DECODE (cpu, \"%#x is an invalid number\", num);\n+      sim_engine_halt (sd, cpu, NULL, cpu->pc, sim_signalled, SIM_SIGILL);\n+    }\n+}\n+\f\n+/* Decode & execute a single instruction.  */\n+void step_once (SIM_CPU *cpu)\n+{\n+  SIM_DESC sd = CPU_STATE (cpu);\n+  unsigned16 iw1, num1;\n+  sim_cia pc = sim_pc_get (cpu);\n+\n+  iw1 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc);\n+  TRACE_EXTRACT (cpu, \"%04x: iw1: %#x\", pc, iw1);\n+  /* This never happens, but technically is possible in the ISA.  */\n+  num1 = interp_num (cpu, iw1);\n+\n+  if (num1 == 0)\n+    {\n+      /* halt: 0: Stop execution and terminate the program.  */\n+      TRACE_INSN (cpu, \"HALT\");\n+      sim_engine_halt (sd, cpu, NULL, pc, sim_exited, 0);\n+    }\n+  else if (num1 == 1)\n+    {\n+      /* set: 1 a b: Set register <a> to the value of <b>.  */\n+      unsigned16 iw2, iw3, num2, num3;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      TRACE_EXTRACT (cpu, \"SET %#x %#x\", iw2, iw3);\n+      TRACE_INSN (cpu, \"SET R%i %#x\", num2, num3);\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", num2, num3);\n+      cpu->regs[num2] = num3;\n+\n+      pc += 6;\n+    }\n+  else if (num1 == 2)\n+    {\n+      /* push: 2 a: Push <a> onto the stack.  */\n+      unsigned16 iw2, num2;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = interp_num (cpu, iw2);\n+      TRACE_EXTRACT (cpu, \"PUSH %#x\", iw2);\n+      TRACE_INSN (cpu, \"PUSH %#x\", num2);\n+\n+      sim_core_write_aligned_2 (cpu, pc, write_map, cpu->sp, num2);\n+      cpu->sp -= 2;\n+      TRACE_REGISTER (cpu, \"SP = %#x\", cpu->sp);\n+\n+      pc += 4;\n+    }\n+  else if (num1 == 3)\n+    {\n+      /* pop: 3 a: Remove the top element from the stack and write it into <a>.\n+\t Empty stack = error.  */\n+      unsigned16 iw2, num2, result;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      TRACE_EXTRACT (cpu, \"POP %#x\", iw2);\n+      TRACE_INSN (cpu, \"POP R%i\", num2);\n+      cpu->sp += 2;\n+      TRACE_REGISTER (cpu, \"SP = %#x\", cpu->sp);\n+      result = sim_core_read_aligned_2 (cpu, pc, read_map, cpu->sp);\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", num2, result);\n+      cpu->regs[num2] = result;\n+\n+      pc += 4;\n+    }\n+  else if (num1 == 4)\n+    {\n+      /* eq: 4 a b c: Set <a> to 1 if <b> is equal to <c>; set it to 0\n+\t otherwise.  */\n+      unsigned16 iw2, iw3, iw4, num2, num3, num4, result;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      iw4 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 6);\n+      num4 = interp_num (cpu, iw4);\n+      result = (num3 == num4);\n+      TRACE_EXTRACT (cpu, \"EQ %#x %#x %#x\", iw2, iw3, iw4);\n+      TRACE_INSN (cpu, \"EQ R%i %#x %#x\", num2, num3, num4);\n+      TRACE_DECODE (cpu, \"R%i = (%#x == %#x) = %i\", num2, num3, num4, result);\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", num2, result);\n+      cpu->regs[num2] = result;\n+\n+      pc += 8;\n+    }\n+  else if (num1 == 5)\n+    {\n+      /* gt: 5 a b c: Set <a> to 1 if <b> is greater than <c>; set it to 0\n+\t otherwise.  */\n+      unsigned16 iw2, iw3, iw4, num2, num3, num4, result;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      iw4 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 6);\n+      num4 = interp_num (cpu, iw4);\n+      result = (num3 > num4);\n+      TRACE_EXTRACT (cpu, \"GT %#x %#x %#x\", iw2, iw3, iw4);\n+      TRACE_INSN (cpu, \"GT R%i %#x %#x\", num2, num3, num4);\n+      TRACE_DECODE (cpu, \"R%i = (%#x > %#x) = %i\", num2, num3, num4, result);\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", num2, result);\n+      cpu->regs[num2] = result;\n+\n+      pc += 8;\n+    }\n+  else if (num1 == 6)\n+    {\n+      /* jmp: 6 a: Jump to <a>.  */\n+      unsigned16 iw2, num2;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = interp_num (cpu, iw2);\n+      /* Addresses are 16-bit aligned.  */\n+      num2 <<= 1;\n+      TRACE_EXTRACT (cpu, \"JMP %#x\", iw2);\n+      TRACE_INSN (cpu, \"JMP %#x\", num2);\n+\n+      pc = num2;\n+      TRACE_BRANCH (cpu, \"JMP %#x\", pc);\n+    }\n+  else if (num1 == 7)\n+    {\n+      /* jt: 7 a b: If <a> is nonzero, jump to <b>.  */\n+      unsigned16 iw2, iw3, num2, num3;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = interp_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      /* Addresses are 16-bit aligned.  */\n+      num3 <<= 1;\n+      TRACE_EXTRACT (cpu, \"JT %#x %#x\", iw2, iw3);\n+      TRACE_INSN (cpu, \"JT %#x %#x\", num2, num3);\n+      TRACE_DECODE (cpu, \"JT %#x != 0 -> %s\", num2, num2 ? \"taken\" : \"nop\");\n+\n+      if (num2)\n+\t{\n+\t  pc = num3;\n+\t  TRACE_BRANCH (cpu, \"JT %#x\", pc);\n+\t}\n+      else\n+\tpc += 6;\n+    }\n+  else if (num1 == 8)\n+    {\n+      /* jf: 8 a b: If <a> is zero, jump to <b>.  */\n+      unsigned16 iw2, iw3, num2, num3;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = interp_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      /* Addresses are 16-bit aligned.  */\n+      num3 <<= 1;\n+      TRACE_EXTRACT (cpu, \"JF %#x %#x\", iw2, iw3);\n+      TRACE_INSN (cpu, \"JF %#x %#x\", num2, num3);\n+      TRACE_DECODE (cpu, \"JF %#x == 0 -> %s\", num2, num2 ? \"nop\" : \"taken\");\n+\n+      if (!num2)\n+\t{\n+\t  pc = num3;\n+\t  TRACE_BRANCH (cpu, \"JF %#x\", pc);\n+\t}\n+      else\n+\tpc += 6;\n+    }\n+  else if (num1 == 9)\n+    {\n+      /* add: 9 a b c: Assign <a> the sum of <b> and <c> (modulo 32768).  */\n+      unsigned16 iw2, iw3, iw4, num2, num3, num4, result;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      iw4 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 6);\n+      num4 = interp_num (cpu, iw4);\n+      result = (num3 + num4) % 32768;\n+      TRACE_EXTRACT (cpu, \"ADD %#x %#x %#x\", iw2, iw3, iw4);\n+      TRACE_INSN (cpu, \"ADD R%i %#x %#x\", num2, num3, num4);\n+      TRACE_DECODE (cpu, \"R%i = (%#x + %#x) %% %i = %#x\", num2, num3, num4,\n+\t\t    32768, result);\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", num2, result);\n+      cpu->regs[num2] = result;\n+\n+      pc += 8;\n+    }\n+  else if (num1 == 10)\n+    {\n+      /* mult: 10 a b c: Store into <a> the product of <b> and <c> (modulo\n+\t 32768).  */\n+      unsigned16 iw2, iw3, iw4, num2, num3, num4, result;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      iw4 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 6);\n+      num4 = interp_num (cpu, iw4);\n+      result = (num3 * num4) % 32768;\n+      TRACE_EXTRACT (cpu, \"MULT %#x %#x %#x\", iw2, iw3, iw4);\n+      TRACE_INSN (cpu, \"MULT R%i %#x %#x\", num2, num3, num4);\n+      TRACE_DECODE (cpu, \"R%i = (%#x * %#x) %% %i = %#x\", num2, num3, num4,\n+\t\t    32768, result);\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", num2, result);\n+      cpu->regs[num2] = result;\n+\n+      pc += 8;\n+    }\n+  else if (num1 == 11)\n+    {\n+      /* mod: 11 a b c: Store into <a> the remainder of <b> divided by <c>.  */\n+      unsigned16 iw2, iw3, iw4, num2, num3, num4, result;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      iw4 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 6);\n+      num4 = interp_num (cpu, iw4);\n+      result = num3 % num4;\n+      TRACE_EXTRACT (cpu, \"MOD %#x %#x %#x\", iw2, iw3, iw4);\n+      TRACE_INSN (cpu, \"MOD R%i %#x %#x\", num2, num3, num4);\n+      TRACE_DECODE (cpu, \"R%i = %#x %% %#x = %#x\", num2, num3, num4, result);\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", num2, result);\n+      cpu->regs[num2] = result;\n+\n+      pc += 8;\n+    }\n+  else if (num1 == 12)\n+    {\n+      /* and: 12 a b c: Stores into <a> the bitwise and of <b> and <c>.  */\n+      unsigned16 iw2, iw3, iw4, num2, num3, num4, result;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      iw4 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 6);\n+      num4 = interp_num (cpu, iw4);\n+      result = (num3 & num4);\n+      TRACE_EXTRACT (cpu, \"AND %#x %#x %#x\", iw2, iw3, iw4);\n+      TRACE_INSN (cpu, \"AND R%i %#x %#x\", num2, num3, num4);\n+      TRACE_DECODE (cpu, \"R%i = %#x & %#x = %#x\", num2, num3, num4, result);\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", num2, result);\n+      cpu->regs[num2] = result;\n+\n+      pc += 8;\n+    }\n+  else if (num1 == 13)\n+    {\n+      /* or: 13 a b c: Stores into <a> the bitwise or of <b> and <c>.  */\n+      unsigned16 iw2, iw3, iw4, num2, num3, num4, result;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      iw4 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 6);\n+      num4 = interp_num (cpu, iw4);\n+      result = (num3 | num4);\n+      TRACE_EXTRACT (cpu, \"OR %#x %#x %#x\", iw2, iw3, iw4);\n+      TRACE_INSN (cpu, \"OR R%i %#x %#x\", num2, num3, num4);\n+      TRACE_DECODE (cpu, \"R%i = %#x | %#x = %#x\", num2, num3, num4, result);\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", num2, result);\n+      cpu->regs[num2] = result;\n+\n+      pc += 8;\n+    }\n+  else if (num1 == 14)\n+    {\n+      /* not: 14 a b: Stores 15-bit bitwise inverse of <b> in <a>.  */\n+      unsigned16 iw2, iw3, num2, num3, result;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      result = (~num3) & 0x7fff;\n+      TRACE_EXTRACT (cpu, \"NOT %#x %#x\", iw2, iw3);\n+      TRACE_INSN (cpu, \"NOT R%i %#x\", num2, num3);\n+      TRACE_DECODE (cpu, \"R%i = (~%#x) & 0x7fff = %#x\", num2, num3, result);\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", num2, result);\n+      cpu->regs[num2] = result;\n+\n+      pc += 6;\n+    }\n+  else if (num1 == 15)\n+    {\n+      /* rmem: 15 a b: Read memory at address <b> and write it to <a>.  */\n+      unsigned16 iw2, iw3, num2, num3, result;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      /* Addresses are 16-bit aligned.  */\n+      num3 <<= 1;\n+      TRACE_EXTRACT (cpu, \"RMEM %#x %#x\", iw2, iw3);\n+      TRACE_INSN (cpu, \"RMEM R%i %#x\", num2, num3);\n+\n+      TRACE_MEMORY (cpu, \"reading %#x\", num3);\n+      result = sim_core_read_aligned_2 (cpu, pc, read_map, num3);\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", num2, result);\n+      cpu->regs[num2] = result;\n+\n+      pc += 6;\n+    }\n+  else if (num1 == 16)\n+    {\n+      /* wmem: 16 a b: Write the value from <b> into memory at address <a>.  */\n+      unsigned16 iw2, iw3, num2, num3;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = interp_num (cpu, iw2);\n+      iw3 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 4);\n+      num3 = interp_num (cpu, iw3);\n+      /* Addresses are 16-bit aligned.  */\n+      num2 <<= 1;\n+      TRACE_EXTRACT (cpu, \"WMEM %#x %#x\", iw2, iw3);\n+      TRACE_INSN (cpu, \"WMEM %#x %#x\", num2, num3);\n+\n+      TRACE_MEMORY (cpu, \"writing %#x to %#x\", num3, num2);\n+      sim_core_write_aligned_2 (cpu, pc, write_map, num2, num3);\n+\n+      pc += 6;\n+    }\n+  else if (num1 == 17)\n+    {\n+      /* call: 17 a: Write the address of the next instruction to the stack and\n+\t jump to <a>.  */\n+      unsigned16 iw2, num2;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = interp_num (cpu, iw2);\n+      /* Addresses are 16-bit aligned.  */\n+      num2 <<= 1;\n+      TRACE_EXTRACT (cpu, \"CALL %#x\", iw2);\n+      TRACE_INSN (cpu, \"CALL %#x\", num2);\n+\n+      TRACE_MEMORY (cpu, \"pushing %#x onto stack\", (pc + 4) >> 1);\n+      sim_core_write_aligned_2 (cpu, pc, write_map, cpu->sp, (pc + 4) >> 1);\n+      cpu->sp -= 2;\n+      TRACE_REGISTER (cpu, \"SP = %#x\", cpu->sp);\n+\n+      pc = num2;\n+      TRACE_BRANCH (cpu, \"CALL %#x\", pc);\n+    }\n+  else if (num1 == 18)\n+    {\n+      /* ret: 18: Remove the top element from the stack and jump to it; empty\n+\t stack = halt.  */\n+      unsigned16 result;\n+\n+      TRACE_INSN (cpu, \"RET\");\n+      cpu->sp += 2;\n+      TRACE_REGISTER (cpu, \"SP = %#x\", cpu->sp);\n+      result = sim_core_read_aligned_2 (cpu, pc, read_map, cpu->sp);\n+      TRACE_MEMORY (cpu, \"popping %#x off of stack\", result << 1);\n+\n+      pc = result << 1;\n+      TRACE_BRANCH (cpu, \"RET -> %#x\", pc);\n+    }\n+  else if (num1 == 19)\n+    {\n+      /* out: 19 a: Write the character <a> to the terminal.  */\n+      unsigned16 iw2, num2;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = interp_num (cpu, iw2);\n+      TRACE_EXTRACT (cpu, \"OUT %#x\", iw2);\n+      TRACE_INSN (cpu, \"OUT %#x\", num2);\n+      TRACE_EVENTS (cpu, \"write to stdout: %#x (%c)\", num2, num2);\n+\n+      sim_io_printf (sd, \"%c\", num2);\n+\n+      pc += 4;\n+    }\n+  else if (num1 == 20)\n+    {\n+      /* in: 20 a: read a character from the terminal and write its ascii code\n+\t to <a>.  It can be assumed that once input starts, it will continue\n+\t until a newline is encountered.  This means that you can safely read\n+\t lines from the keyboard and trust that they will be fully read.  */\n+      unsigned16 iw2, num2;\n+      char c;\n+\n+      iw2 = sim_core_read_aligned_2 (cpu, pc, exec_map, pc + 2);\n+      num2 = register_num (cpu, iw2);\n+      TRACE_EXTRACT (cpu, \"IN %#x\", iw2);\n+      TRACE_INSN (cpu, \"IN %#x\", num2);\n+      sim_io_read_stdin (sd, &c, 1);\n+      TRACE_EVENTS (cpu, \"read from stdin: %#x (%c)\", c, c);\n+\n+      /* The challenge uses lowercase for all inputs, so insert some low level\n+\t helpers of our own to make it a bit nicer.  */\n+      switch (c)\n+\t{\n+\tcase 'Q':\n+\t  sim_engine_halt (sd, cpu, NULL, pc, sim_exited, 0);\n+\t  break;\n+\t}\n+\n+      TRACE_REGISTER (cpu, \"R%i = %#x\", iw2 & 0xf, c);\n+      cpu->regs[iw2 & 0xf] = c;\n+\n+      pc += 4;\n+    }\n+  else if (num1 == 21)\n+    {\n+      /* noop: 21: no operation */\n+      TRACE_INSN (cpu, \"NOOP\");\n+\n+      pc += 2;\n+    }\n+  else\n+    sim_engine_halt (sd, cpu, NULL, pc, sim_signalled, SIM_SIGILL);\n+\n+  TRACE_REGISTER (cpu, \"PC = %#x\", pc);\n+  sim_pc_set (cpu, pc);\n+}\n+\f\n+/* Return the program counter for this cpu. */\n+static sim_cia\n+pc_get (sim_cpu *cpu)\n+{\n+  return cpu->pc;\n+}\n+\n+/* Set the program counter for this cpu to the new pc value. */\n+static void\n+pc_set (sim_cpu *cpu, sim_cia pc)\n+{\n+  cpu->pc = pc;\n+}\n+\n+/* Initialize the state for a single cpu.  Usuaully this involves clearing all\n+   registers back to their reset state.  Should also hook up the fetch/store\n+   helper functions too.  */\n+void initialize_cpu (SIM_DESC sd, SIM_CPU *cpu)\n+{\n+  memset (cpu->regs, 0, sizeof (cpu->regs));\n+  cpu->pc = 0;\n+  /* Make sure it's initialized outside of the 16-bit address space.  */\n+  cpu->sp = 0x80000;\n+\n+  CPU_PC_FETCH (cpu) = pc_get;\n+  CPU_PC_STORE (cpu) = pc_set;\n+}"
    },
    {
      "sha": "ba0e4efa12a9610cd109bd2af0660a0ec1de3fc2",
      "filename": "sim/example-synacor/sim-main.h",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/sim-main.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/example-synacor/sim-main.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/example-synacor/sim-main.h?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,49 @@\n+/* Example synacor simulator.\n+\n+   Copyright (C) 2005-2021 Free Software Foundation, Inc.\n+   Contributed by Mike Frysinger.\n+\n+   This file is part of simulators.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef SIM_MAIN_H\n+#define SIM_MAIN_H\n+\n+#include \"sim-basics.h\"\n+#include \"sim-base.h\"\n+\n+struct _sim_cpu {\n+  /* ... simulator specific members ... */\n+  unsigned16 regs[8];\n+  sim_cia pc;\n+\n+  /* This isn't a real register, and the stack is not directly addressable,\n+     so use memory outside of the 16-bit address space.  */\n+  unsigned32 sp;\n+\n+  sim_cpu_base base;\n+};\n+\n+struct sim_state {\n+  sim_cpu *cpu[MAX_NR_PROCESSORS];\n+\n+  /* ... simulator specific members ... */\n+  sim_state_base base;\n+};\n+\n+extern void step_once (SIM_CPU *);\n+extern void initialize_cpu (SIM_DESC, SIM_CPU *);\n+\n+#endif"
    },
    {
      "sha": "b9efa9208c669ac00731363fd2740a2b91f86abd",
      "filename": "sim/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/ChangeLog?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -1,3 +1,7 @@\n+2021-04-03  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* lib/sim-defs.exp (run_sim_test): Convert examples to binaries.\n+\n 2021-04-03  Mike Frysinger  <vapier@gentoo.org>\n \n \t* local.mk: Include %D%/common/local.mk."
    },
    {
      "sha": "5d4562130668ca222de3f7aba3dac3157e9a7673",
      "filename": "sim/testsuite/example-synacor/ChangeLog",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/ChangeLog?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,5 @@\n+2021-04-03  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* add.s, allinsn.exp, and.s, call.s, exit-0.s, gt.s, isa.inc, jmp.s,\n+\tmem.s, mod.s, mult.s, not.s, or.s, push-pop.s, ret.s, set.s,\n+\ttestutils.inc: New files."
    },
    {
      "sha": "64a8c20d8edc1f72ae38acc48b4ceb36618ea3b9",
      "filename": "sim/testsuite/example-synacor/add.s",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/add.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/add.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/add.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,24 @@\n+# check the ADD insn.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 3\n+\tHALT\n+\n+\tSET r2, 2\n+\tADD r2, r2, r2\n+\tEQ r3, r2, 4\n+\tJF r3, 2\n+\n+\tADD r1, 100, r2\n+\tEQ r4, r1, 104\n+\tJF r4, 2\n+\n+\t# 0x7ffe == -2\n+\tADD r0, r1, 0x7ffe\n+\tEQ r4, r0, 102\n+\tJF r4, 2\n+\n+\tpass"
    },
    {
      "sha": "7210a610e737b92d46a18491c237f42d04ecb402",
      "filename": "sim/testsuite/example-synacor/allinsn.exp",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/allinsn.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/allinsn.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/allinsn.exp?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,19 @@\n+# Example synacor simulator testsuite.\n+\n+if [istarget *] {\n+    # Used to locate the `run` program.\n+    global arch\n+    set arch \"example-synacor\"\n+\n+    # All machines.\n+    set all_machs \"example\"\n+\n+    foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.s]] {\n+\t# If we're only testing specific files and this isn't one of them,\n+\t# skip it.\n+\tif ![runtest_file_p $runtests $src] {\n+\t    continue\n+\t}\n+\trun_sim_test $src $all_machs\n+    }\n+}"
    },
    {
      "sha": "1d188598559076f019a6825f0db3f005f9b47c64",
      "filename": "sim/testsuite/example-synacor/and.s",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/and.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/and.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/and.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,18 @@\n+# check the AND insn.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 3\n+\tHALT\n+\n+\tAND r2, 0xfff, 0x7f0c\n+\tEQ r3, r2, 0xf0c\n+\tJF r3, 2\n+\n+\tAND r2, r2, 0xf\n+\tEQ r3, r2, 0xc\n+\tJF r3, 2\n+\n+\tpass"
    },
    {
      "sha": "6d7b545a14bc7352765d9609334b0b6a88873b2d",
      "filename": "sim/testsuite/example-synacor/call.s",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/call.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/call.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/call.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,14 @@\n+# check the CALL insn.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tCALL 3\n+\tHALT\n+\n+\tPOP r0\n+\tEQ r1, r0, 2\n+\tJF r1, 2\n+\n+\tpass"
    },
    {
      "sha": "2c1fb72f5d7cdbc81cf72ad65a86233ea12a5c49",
      "filename": "sim/testsuite/example-synacor/exit-0.s",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/exit-0.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/exit-0.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/exit-0.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,10 @@\n+# check that the sim doesn't die immediately.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tNOOP\n+\tNOOP\n+\tNOOP\n+\tpass"
    },
    {
      "sha": "aef28e34404cb187e3f08e84781a2c273018dbab",
      "filename": "sim/testsuite/example-synacor/gt.s",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/gt.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/gt.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/gt.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,31 @@\n+# check the GT insn.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 3\n+\tHALT\n+\n+\tGT r0, 3, 2\n+\tEQ r1, r0, 1\n+\tJF r1, 2\n+\n+\tGT r0, 2, 2\n+\tEQ r1, r0, 0\n+\tJF r1, 2\n+\n+\tGT r0, 1, 2\n+\tEQ r1, r0, 0\n+\tJF r1, 2\n+\n+\tSET r2, 3\n+\tSET r3, 4\n+\tGT r0, r2, r3\n+\tEQ r1, r0, 0\n+\tJF r1, 2\n+\tGT r0, r3, r2\n+\tEQ r1, r0, 1\n+\tJF r1, 2\n+\n+\tpass"
    },
    {
      "sha": "e2e1136ecfb7f6650dda8811210d8a5f5c416d0c",
      "filename": "sim/testsuite/example-synacor/isa.inc",
      "status": "added",
      "additions": 108,
      "deletions": 0,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/isa.inc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/isa.inc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/isa.inc?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,108 @@\n+# Macros for the fake ISA.  Keep in sync with example-synacor/README.arch-spec.\n+\n+# These .set macros will generate symbols in the output ELF, but it also allows\n+# use to use them as arguments to the insns below.  Oh well.\n+.set r0, 32768\n+.set r1, r0+1\n+.set r2, r0+2\n+.set r3, r0+3\n+.set r4, r0+4\n+.set r5, r0+5\n+.set r6, r0+6\n+.set r7, r0+7\n+\n+# The target is little endian, so make sure we output the 16-bit words as such.\n+.macro _op op:req, more:vararg\n+\t.byte \\op & 0xff, (\\op >> 8) & 0xff\n+\t.ifnb \\more\n+\t_op \\more\n+\t.endif\n+.endm\n+\n+.macro HALT\n+\t_op 0\n+.endm\n+\n+.macro SET a:req, b:req\n+\t_op 1, \\a, \\b\n+.endm\n+\n+.macro PUSH a:req\n+\t_op 2, \\a\n+.endm\n+\n+.macro POP a:req\n+\t_op 3, \\a\n+.endm\n+\n+.macro EQ a:req, b:req, c:req\n+\t_op 4, \\a, \\b, \\c\n+.endm\n+\n+.macro GT a:req, b:req, c:req\n+\t_op 5, \\a, \\b, \\c\n+.endm\n+\n+.macro JMP a:req\n+\t_op 6, \\a\n+.endm\n+\n+.macro JT a:req, b:req\n+\t_op 7, \\a, \\b\n+.endm\n+\n+.macro JF a:req, b:req\n+\t_op 8, \\a, \\b\n+.endm\n+\n+.macro ADD a:req, b:req, c:req\n+\t_op 9, \\a, \\b, \\c\n+.endm\n+\n+.macro MULT a:req, b:req, c:req\n+\t_op 10, \\a, \\b, \\c\n+.endm\n+\n+.macro MOD a:req, b:req, c:req\n+\t_op 11, \\a, \\b, \\c\n+.endm\n+\n+.macro AND a:req, b:req, c:req\n+\t_op 12, \\a, \\b, \\c\n+.endm\n+\n+.macro OR a:req, b:req, c:req\n+\t_op 13, \\a, \\b, \\c\n+.endm\n+\n+.macro NOT a:req, b:req\n+\t_op 14, \\a, \\b\n+.endm\n+\n+.macro RMEM a:req, b:req\n+\t_op 15, \\a, \\b\n+.endm\n+\n+.macro WMEM a:req, b:req\n+\t_op 16, \\a, \\b\n+.endm\n+\n+.macro CALL a:req\n+\t_op 17, \\a\n+.endm\n+\n+.macro RET\n+\t_op 18\n+.endm\n+\n+.macro OUT a:req\n+\t_op 19, \\a\n+.endm\n+\n+.macro IN a:req\n+\t_op 20, \\a\n+.endm\n+\n+.macro NOOP\n+\t_op 21\n+.endm"
    },
    {
      "sha": "dcacf668adc45a99f39ec99cfcef06ca97383759",
      "filename": "sim/testsuite/example-synacor/jmp.s",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/jmp.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/jmp.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/jmp.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,9 @@\n+# check the JMP insn.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 3\n+\tHALT\n+\tpass"
    },
    {
      "sha": "24aa0a9e6fc672d71aee9c02ca70f97c0b664aa6",
      "filename": "sim/testsuite/example-synacor/mem.s",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/mem.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/mem.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/mem.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,25 @@\n+# check the RMEM & WMEM insns.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 14\n+\tHALT\n+\tpass\n+\n+\t# Read a constant address.\n+\tRMEM r0, 1\n+\tEQ r1, r0, 14\n+\tJF r1, 2\n+\n+\t# Change the first JMP to skip HALT and hit the pass.\n+\tWMEM 1, 3\n+\n+\t# Read an address in a register.\n+\tSET r2, 1\n+\tRMEM r0, r2\n+\tEQ r1, r0, 3\n+\tJF r1, 2\n+\n+\tJMP 0"
    },
    {
      "sha": "f0b4217574c53b867dd4096fb30c9877a7461e61",
      "filename": "sim/testsuite/example-synacor/mod.s",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/mod.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/mod.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/mod.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,18 @@\n+# check the MOD insn.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 3\n+\tHALT\n+\n+\tMOD r0, 8, 3\n+\tEQ r1, r0, 2\n+\tJF r1, 2\n+\n+\tMOD r0, r0, 2\n+\tEQ r1, r0, 0\n+\tJF r1, 2\n+\n+\tpass"
    },
    {
      "sha": "d323cf53aa77afe2693ccf13e487b24b83639812",
      "filename": "sim/testsuite/example-synacor/mult.s",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/mult.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/mult.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/mult.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,18 @@\n+# check the MULT insn.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 3\n+\tHALT\n+\n+\tMULT r0, 3, 2\n+\tEQ r1, r0, 6\n+\tJF r1, 2\n+\n+\tMULT r0, r0, 8\n+\tEQ r1, r0, 48\n+\tJF r1, 2\n+\n+\tpass"
    },
    {
      "sha": "8a4a570ce6e00cb8336e5f000604997e792f8714",
      "filename": "sim/testsuite/example-synacor/not.s",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/not.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/not.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/not.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,15 @@\n+# check the NOT insn.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 3\n+\tHALT\n+\n+\tSET r2, 0xc\n+\tNOT r0, r2\n+\tEQ r3, r0, 0x7ff3\n+\tJF r3, 2\n+\n+\tpass"
    },
    {
      "sha": "f8f2ae3a153980b223772b3d9c5987dfef33dacf",
      "filename": "sim/testsuite/example-synacor/or.s",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/or.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/or.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/or.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,18 @@\n+# check the OR insn.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 3\n+\tHALT\n+\n+\tOR r2, 0xf, 0x80\n+\tEQ r3, r2, 0x8f\n+\tJF r3, 2\n+\n+\tOR r2, r2, 0xff\n+\tEQ r3, r2, 0xff\n+\tJF r3, 2\n+\n+\tpass"
    },
    {
      "sha": "b8199c5d34e46b983c577429c25d6a2f354f1f9d",
      "filename": "sim/testsuite/example-synacor/push-pop.s",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/push-pop.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/push-pop.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/push-pop.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,22 @@\n+# check the PUSH & POP insns.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 3\n+\tHALT\n+\n+\tPUSH 1\n+\tSET r0, 3\n+\tPUSH r0\n+\tPOP r1\n+\tPOP r2\n+\tEQ r7, r0, 3\n+\tJF r7, 2\n+\tEQ r7, r1, 3\n+\tJF r7, 2\n+\tEQ r7, r2, 1\n+\tJF r7, 2\n+\n+\tpass"
    },
    {
      "sha": "63bfa7132cbe1078554db281a6ae954fcaf3d436",
      "filename": "sim/testsuite/example-synacor/ret.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/ret.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/ret.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/ret.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,13 @@\n+# check the RET insn.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 13\n+\tpass\n+\n+\tSET r5, 2\n+\tPUSH r5\n+\tRET\n+\tHALT"
    },
    {
      "sha": "8b441c762eaa7af49fd629288cd19facc7342daf",
      "filename": "sim/testsuite/example-synacor/set.s",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/set.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/set.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/set.s?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,20 @@\n+# check the SET insn.\n+# mach: example\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\tJMP 3\n+\tHALT\n+\n+\tSET r2, 2\n+\tEQ r3, r2, 2\n+\tJF r3, 2\n+\tSET r1, 1\n+\tEQ r3, r1, 1\n+\tJF r3, 2\n+\tSET r0, r2\n+\tEQ r3, r0, 2\n+\tJF r3, 2\n+\n+\tpass"
    },
    {
      "sha": "0f286c6036ca24d6f81043be80abd4c9d234a9c4",
      "filename": "sim/testsuite/example-synacor/testutils.inc",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/testutils.inc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/example-synacor/testutils.inc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/testutils.inc?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -0,0 +1,31 @@\n+.include \"isa.inc\"\n+\n+# MACRO: pass\n+# Write 'pass' to stdout and quit\n+\t.macro pass\n+\tOUT 'p'\n+\tOUT 'a'\n+\tOUT 's'\n+\tOUT 's'\n+\tOUT '\\n'\n+\tHALT\n+\t.endm\n+\n+# MACRO: fail\n+# Write 'fail' to stdout and quit\n+\t.macro fail\n+\tOUT 'f'\n+\tOUT 'a'\n+\tOUT 'i'\n+\tOUT 'l'\n+\tOUT '\\n'\n+\tHALT\n+\t.endm\n+\n+# MACRO: start\n+# All assembler tests should start with a call to \"start\"\n+\t.macro start\n+\t.text\n+.global _start\n+_start:\n+\t.endm"
    },
    {
      "sha": "e1254a3278cf9116bb3621f5666dcd619eaeacba",
      "filename": "sim/testsuite/lib/sim-defs.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/lib/sim-defs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26da232cbd6dd920da9521e508e42d1a46180ab4/sim/testsuite/lib/sim-defs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/lib/sim-defs.exp?ref=26da232cbd6dd920da9521e508e42d1a46180ab4",
      "patch": "@@ -378,6 +378,13 @@ proc run_sim_test { name requested_machs } {\n \t    set options \"$options timeout=$opts(timeout)\"\n \t}\n \n+\tif [string match \"example\" \"$mach\"] {\n+\t    set objcopy [find_binutils_prog objcopy]\n+\t    set comp_output [remote_exec host $objcopy \"-O binary -j .text ${name}.x ${name}.bin\"]\n+\t    file rename -force \"${name}.bin\" \"${name}.x\"\n+\t    append opts(sim,$mach) \" --target binary\"\n+\t}\n+\n \tset result [sim_run ${name}.x \"$opts(sim,$mach) $global_sim_options\" \"$opts(progopts)\" \"\" \"$options\"]\n \tset return_code [lindex $result 0]\n \tset output [lindex $result 1]"
    }
  ]
}