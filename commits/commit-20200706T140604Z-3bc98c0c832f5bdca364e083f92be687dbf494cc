{
  "sha": "3bc98c0c832f5bdca364e083f92be687dbf494cc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2JjOThjMGM4MzJmNWJkY2EzNjRlMDgzZjkyYmU2ODdkYmY0OTRjYw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-08T13:06:08Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-06T14:06:04Z"
    },
    "message": "gdb: Remove deprecated_set_gdbarch_data\n\nThere are currently two remaining uses of deprecated_set_gdbarch_data,\nboth of which are needed because during gdbarch initialisation we call\ngdbarch_data for a data field that is registered using:\n\n  gdbarch_data_register_post_init (....)\n\nHowever, in both of these cases, the only thing that the call back\nneeds from the gdbarch struct is its obstack.  Given this there is\nnothing stopping us changing the post-init hooks into pre-init hooks.\nThe pre-init hooks don't get passed the full gdbarch, they only get\npassed its obstack.\n\nThe IA64 change is completely untested.  The user-regs change has been\ntested a little by locally adding some user-regs to the x86-64 target,\nand also by running the RISC-V tests, which do use user-regs.\n\ngdb/ChangeLog:\n\n\t* gdbarch.c: Regenerate.\n\t* gdbarch.h: Regenerate.\n\t* gdbarch.sh (deprecated_set_gdbarch_data): Delete.\n\t(gdbarch_data): Use internal_error for the case where\n\tdeprecated_set_gdbarch_data was originally needed.\n\t* ia64-libunwind-tdep.c (libunwind_descr_init): Update parameters,\n\tand use passed in obstack.\n\t(libunwind_frame_set_descr): Should no longer get back NULL from\n\tgdbarch_data.\n\t(_initialize_libunwind_frame): Register as a pre-init gdbarch data\n\ttype.\n\t* user-regs.c (user_regs_init): Update parameters, and use passed\n\tin obstack.\n\t(user_reg_add): Should no longer get back NULL from gdbarch_data.\n\t(_initialize_user_regs): Register as a pre-init gdbarch data type.",
    "tree": {
      "sha": "1d49e95a06e01e11c336f57c28b0d925a6bdd89b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1d49e95a06e01e11c336f57c28b0d925a6bdd89b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3bc98c0c832f5bdca364e083f92be687dbf494cc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3bc98c0c832f5bdca364e083f92be687dbf494cc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3bc98c0c832f5bdca364e083f92be687dbf494cc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3bc98c0c832f5bdca364e083f92be687dbf494cc/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d8cc8af6a1787f9c2eafc62a36ac86cf4d08c89c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8cc8af6a1787f9c2eafc62a36ac86cf4d08c89c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d8cc8af6a1787f9c2eafc62a36ac86cf4d08c89c"
    }
  ],
  "stats": {
    "total": 101,
    "additions": 33,
    "deletions": 68
  },
  "files": [
    {
      "sha": "0b73be8123c6890397790cd1b61ebcb1cc9c0560",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3bc98c0c832f5bdca364e083f92be687dbf494cc",
      "patch": "@@ -1,3 +1,21 @@\n+2020-07-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdbarch.c: Regenerate.\n+\t* gdbarch.h: Regenerate.\n+\t* gdbarch.sh (deprecated_set_gdbarch_data): Delete.\n+\t(gdbarch_data): Use internal_error for the case where\n+\tdeprecated_set_gdbarch_data was originally needed.\n+\t* ia64-libunwind-tdep.c (libunwind_descr_init): Update parameters,\n+\tand use passed in obstack.\n+\t(libunwind_frame_set_descr): Should no longer get back NULL from\n+\tgdbarch_data.\n+\t(_initialize_libunwind_frame): Register as a pre-init gdbarch data\n+\ttype.\n+\t* user-regs.c (user_regs_init): Update parameters, and use passed\n+\tin obstack.\n+\t(user_reg_add): Should no longer get back NULL from gdbarch_data.\n+\t(_initialize_user_regs): Register as a pre-init gdbarch data type.\n+\n 2020-07-06  Tom de Vries  <tdevries@suse.de>\n \n \t* buildsym.c (buildsym_compunit::end_symtab_with_blockvector): Handle"
    },
    {
      "sha": "21ee840e88f83210d19b3cfedaeaa0a73e587a4c",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 3,
      "deletions": 19,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=3bc98c0c832f5bdca364e083f92be687dbf494cc",
      "patch": "@@ -5208,20 +5208,6 @@ alloc_gdbarch_data (struct gdbarch *gdbarch)\n   gdbarch->data = GDBARCH_OBSTACK_CALLOC (gdbarch, gdbarch->nr_data, void *);\n }\n \n-/* Initialize the current value of the specified per-architecture\n-   data-pointer.  */\n-\n-void\n-deprecated_set_gdbarch_data (struct gdbarch *gdbarch,\n-\t\t\t     struct gdbarch_data *data,\n-\t\t\t     void *pointer)\n-{\n-  gdb_assert (data->index < gdbarch->nr_data);\n-  gdb_assert (gdbarch->data[data->index] == NULL);\n-  gdb_assert (data->pre_init == NULL);\n-  gdbarch->data[data->index] = pointer;\n-}\n-\n /* Return the current value of the specified per-architecture\n    data-pointer.  */\n \n@@ -5251,11 +5237,9 @@ gdbarch_data (struct gdbarch *gdbarch, struct gdbarch_data *data)\n \t  data->init_p = 1;\n \t}\n       else\n-\t/* The architecture initialization hasn't completed - punt -\n-\t hope that the caller knows what they are doing.  Once\n-\t deprecated_set_gdbarch_data has been initialized, this can be\n-\t changed to an internal error.  */\n-\treturn NULL;\n+\tinternal_error (__FILE__, __LINE__,\n+\t\t\t_(\"gdbarch post-init data field can only be used \"\n+\t\t\t  \"after gdbarch is fully initialised\"));\n       gdb_assert (gdbarch->data[data->index] != NULL);\n     }\n   return gdbarch->data[data->index];"
    },
    {
      "sha": "0940156aeb8f558fea72b231365cc84357782550",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=3bc98c0c832f5bdca364e083f92be687dbf494cc",
      "patch": "@@ -1839,9 +1839,6 @@ typedef void *(gdbarch_data_pre_init_ftype) (struct obstack *obstack);\n extern struct gdbarch_data *gdbarch_data_register_pre_init (gdbarch_data_pre_init_ftype *init);\n typedef void *(gdbarch_data_post_init_ftype) (struct gdbarch *gdbarch);\n extern struct gdbarch_data *gdbarch_data_register_post_init (gdbarch_data_post_init_ftype *init);\n-extern void deprecated_set_gdbarch_data (struct gdbarch *gdbarch,\n-                                         struct gdbarch_data *data,\n-\t\t\t                 void *pointer);\n \n extern void *gdbarch_data (struct gdbarch *gdbarch, struct gdbarch_data *);\n "
    },
    {
      "sha": "41e7b8d5cc3b0ad6302a04560d30bfb14add2eaf",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 3,
      "deletions": 22,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=3bc98c0c832f5bdca364e083f92be687dbf494cc",
      "patch": "@@ -1630,9 +1630,6 @@ typedef void *(gdbarch_data_pre_init_ftype) (struct obstack *obstack);\n extern struct gdbarch_data *gdbarch_data_register_pre_init (gdbarch_data_pre_init_ftype *init);\n typedef void *(gdbarch_data_post_init_ftype) (struct gdbarch *gdbarch);\n extern struct gdbarch_data *gdbarch_data_register_post_init (gdbarch_data_post_init_ftype *init);\n-extern void deprecated_set_gdbarch_data (struct gdbarch *gdbarch,\n-                                         struct gdbarch_data *data,\n-\t\t\t                 void *pointer);\n \n extern void *gdbarch_data (struct gdbarch *gdbarch, struct gdbarch_data *);\n \n@@ -2237,20 +2234,6 @@ alloc_gdbarch_data (struct gdbarch *gdbarch)\n   gdbarch->data = GDBARCH_OBSTACK_CALLOC (gdbarch, gdbarch->nr_data, void *);\n }\n \n-/* Initialize the current value of the specified per-architecture\n-   data-pointer.  */\n-\n-void\n-deprecated_set_gdbarch_data (struct gdbarch *gdbarch,\n-\t\t\t     struct gdbarch_data *data,\n-\t\t\t     void *pointer)\n-{\n-  gdb_assert (data->index < gdbarch->nr_data);\n-  gdb_assert (gdbarch->data[data->index] == NULL);\n-  gdb_assert (data->pre_init == NULL);\n-  gdbarch->data[data->index] = pointer;\n-}\n-\n /* Return the current value of the specified per-architecture\n    data-pointer.  */\n \n@@ -2280,11 +2263,9 @@ gdbarch_data (struct gdbarch *gdbarch, struct gdbarch_data *data)\n \t  data->init_p = 1;\n \t}\n       else\n-\t/* The architecture initialization hasn't completed - punt -\n-\t hope that the caller knows what they are doing.  Once\n-\t deprecated_set_gdbarch_data has been initialized, this can be\n-\t changed to an internal error.  */\n-\treturn NULL;\n+\tinternal_error (__FILE__, __LINE__,\n+\t\t\t_(\"gdbarch post-init data field can only be used \"\n+\t\t\t  \"after gdbarch is fully initialised\"));\n       gdb_assert (gdbarch->data[data->index] != NULL);\n     }\n   return gdbarch->data[data->index];"
    },
    {
      "sha": "94881bbfb5dac287016bd9a62bf4abecf2ffd4c9",
      "filename": "gdb/ia64-libunwind-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 11,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/ia64-libunwind-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/ia64-libunwind-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-libunwind-tdep.c?ref=3bc98c0c832f5bdca364e083f92be687dbf494cc",
      "patch": "@@ -133,10 +133,10 @@ libunwind_descr (struct gdbarch *gdbarch)\n }\n \n static void *\n-libunwind_descr_init (struct gdbarch *gdbarch)\n+libunwind_descr_init (struct obstack *obstack)\n {\n   struct libunwind_descr *descr\n-    = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct libunwind_descr);\n+    = OBSTACK_ZALLOC (obstack, struct libunwind_descr);\n \n   return descr;\n }\n@@ -151,14 +151,7 @@ libunwind_frame_set_descr (struct gdbarch *gdbarch,\n \n   arch_descr = ((struct libunwind_descr *)\n \t\tgdbarch_data (gdbarch, libunwind_descr_handle));\n-\n-  if (arch_descr == NULL)\n-    {\n-      /* First time here.  Must initialize data area.  */\n-      arch_descr = (struct libunwind_descr *) libunwind_descr_init (gdbarch);\n-      deprecated_set_gdbarch_data (gdbarch,\n-\t\t\t\t   libunwind_descr_handle, arch_descr);\n-    }\n+  gdb_assert (arch_descr != NULL);\n \n   /* Copy new descriptor info into arch descriptor.  */\n   arch_descr->gdb2uw = descr->gdb2uw;\n@@ -596,7 +589,7 @@ void\n _initialize_libunwind_frame ()\n {\n   libunwind_descr_handle\n-    = gdbarch_data_register_post_init (libunwind_descr_init);\n+    = gdbarch_data_register_pre_init (libunwind_descr_init);\n \n   libunwind_initialized = libunwind_load ();\n }"
    },
    {
      "sha": "d461f8573901a47ade0e5c14fbd29d3ad5ffa875",
      "filename": "gdb/user-regs.c",
      "status": "modified",
      "additions": 5,
      "deletions": 13,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/user-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3bc98c0c832f5bdca364e083f92be687dbf494cc/gdb/user-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/user-regs.c?ref=3bc98c0c832f5bdca364e083f92be687dbf494cc",
      "patch": "@@ -98,16 +98,15 @@ user_reg_add_builtin (const char *name, user_reg_read_ftype *xread,\n static struct gdbarch_data *user_regs_data;\n \n static void *\n-user_regs_init (struct gdbarch *gdbarch)\n+user_regs_init (struct obstack *obstack)\n {\n   struct user_reg *reg;\n-  struct gdb_user_regs *regs \n-    = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct gdb_user_regs);\n+  struct gdb_user_regs *regs = OBSTACK_ZALLOC (obstack, struct gdb_user_regs);\n \n   regs->last = &regs->first;\n   for (reg = builtin_user_regs.first; reg != NULL; reg = reg->next)\n     append_user_reg (regs, reg->name, reg->xread, reg->baton,\n-\t\t     GDBARCH_OBSTACK_ZALLOC (gdbarch, struct user_reg));\n+\t\t     OBSTACK_ZALLOC (obstack, struct user_reg));\n   return regs;\n }\n \n@@ -117,14 +116,7 @@ user_reg_add (struct gdbarch *gdbarch, const char *name,\n {\n   struct gdb_user_regs *regs\n     = (struct gdb_user_regs *) gdbarch_data (gdbarch, user_regs_data);\n-\n-  if (regs == NULL)\n-    {\n-      /* ULGH, called during architecture initialization.  Patch\n-         things up.  */\n-      regs = (struct gdb_user_regs *) user_regs_init (gdbarch);\n-      deprecated_set_gdbarch_data (gdbarch, user_regs_data, regs);\n-    }\n+  gdb_assert (regs != NULL);\n   append_user_reg (regs, name, xread, baton,\n \t\t   GDBARCH_OBSTACK_ZALLOC (gdbarch, struct user_reg));\n }\n@@ -240,7 +232,7 @@ void _initialize_user_regs ();\n void\n _initialize_user_regs ()\n {\n-  user_regs_data = gdbarch_data_register_post_init (user_regs_init);\n+  user_regs_data = gdbarch_data_register_pre_init (user_regs_init);\n \n   add_cmd (\"user-registers\", class_maintenance,\n \t   maintenance_print_user_registers,"
    }
  ]
}