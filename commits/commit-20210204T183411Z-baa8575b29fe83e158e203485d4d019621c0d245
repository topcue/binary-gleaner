{
  "sha": "baa8575b29fe83e158e203485d4d019621c0d245",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmFhODU3NWIyOWZlODNlMTU4ZTIwMzQ4NWQ0ZDAxOTYyMWMwZDI0NQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-02-04T18:34:11Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-02-04T18:34:11Z"
    },
    "message": "gdb: make remote target clear its handler in remote_target::wait\n\nThe remote target's remote_async_inferior_event_token is a flag that\ntells when it wants the infrun loop to call its wait method.  The flag\nis cleared in the async_event_handler's callback\n(remote_async_inferior_event_handler), just before calling\ninferior_event_handler.  However, since inferior_event_handler may\nactually call another target's wait method, there needs to be code that\nchecks if we need to re-raise the flag.\n\nIt would be simpler instead for remote_target::wait to clear the flag\nwhen it returns an event and there are no more to report after that.  If\nanother target's wait method gets called by inferior_event_handler, the\nremote target's flag will stay naturally stay marked.\n\nNote that this is already partially implemented in remote_target::wait,\nsince the remote target may have multiple events to report (and it can\nonly report one at the time):\n\n  if (target_is_async_p ())\n    {\n      remote_state *rs = get_remote_state ();\n\n      /* If there are are events left in the queue tell the event loop\n\t to return here.  */\n      if (!rs->stop_reply_queue.empty ())\n\tmark_async_event_handler (rs->remote_async_inferior_event_token);\n    }\n\nThe code in remote_async_inferior_event_handler also checks for pending\nevents as well, in addition to the stop reply queue, so I've made\nremote_target::wait check for that as well.  I'm not completely sure\nthis is ok, since I don't understand very well how the pending events\nmechanism works.  But I figured it was safer to do this, worst case it\njust leads to unnecessary calls to remote_target::wait.\n\ngdb/ChangeLog:\n\n\t* remote.c (remote_target::wait): Clear async event handler at\n\tbeginning, mark if needed at the end.\n\t(remote_async_inferior_event_handler): Don't set or clear async\n\tevent handler.\n\nChange-Id: I20117f5b5acc8a9972c90f16280249b766c1bf37",
    "tree": {
      "sha": "fe69f9841fe4b890d4a27d9c33b478356584d5bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fe69f9841fe4b890d4a27d9c33b478356584d5bd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/baa8575b29fe83e158e203485d4d019621c0d245",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/baa8575b29fe83e158e203485d4d019621c0d245",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/baa8575b29fe83e158e203485d4d019621c0d245",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/baa8575b29fe83e158e203485d4d019621c0d245/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6b36ddeb1edbdc3039075e4e220a108579b82121",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b36ddeb1edbdc3039075e4e220a108579b82121",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6b36ddeb1edbdc3039075e4e220a108579b82121"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 19,
    "deletions": 20
  },
  "files": [
    {
      "sha": "c8cae1c77da57d452d86dbbf2f3b16eba1e1082d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baa8575b29fe83e158e203485d4d019621c0d245/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baa8575b29fe83e158e203485d4d019621c0d245/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=baa8575b29fe83e158e203485d4d019621c0d245",
      "patch": "@@ -1,3 +1,10 @@\n+2021-02-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* remote.c (remote_target::wait): Clear async event handler at\n+\tbeginning, mark if needed at the end.\n+\t(remote_async_inferior_event_handler): Don't set or clear async\n+\tevent handler.\n+\n 2021-02-04  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* async-event.h (async_event_handler_func):  Add documentation."
    },
    {
      "sha": "31c6e17a1c4bd381ca2d0c2f917f482b0d39983e",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 12,
      "deletions": 20,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baa8575b29fe83e158e203485d4d019621c0d245/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baa8575b29fe83e158e203485d4d019621c0d245/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=baa8575b29fe83e158e203485d4d019621c0d245",
      "patch": "@@ -5672,7 +5672,7 @@ remote_target::open_1 (const char *name, int from_tty, int extended_p)\n \n   /* Register extra event sources in the event loop.  */\n   rs->remote_async_inferior_event_token\n-    = create_async_event_handler (remote_async_inferior_event_handler, remote,\n+    = create_async_event_handler (remote_async_inferior_event_handler, nullptr,\n \t\t\t\t  \"remote\");\n   rs->notif_state = remote_notif_state_allocate (remote);\n \n@@ -8155,6 +8155,13 @@ remote_target::wait (ptid_t ptid, struct target_waitstatus *status,\n {\n   REMOTE_SCOPED_DEBUG_ENTER_EXIT;\n \n+  remote_state *rs = get_remote_state ();\n+\n+  /* Start by clearing the flag that asks for our wait method to be called,\n+     we'll mark it again at the end if needed.  */\n+  if (target_is_async_p ())\n+    clear_async_event_handler (rs->remote_async_inferior_event_token);\n+\n   ptid_t event_ptid;\n \n   if (target_is_non_stop_p ())\n@@ -8164,11 +8171,10 @@ remote_target::wait (ptid_t ptid, struct target_waitstatus *status,\n \n   if (target_is_async_p ())\n     {\n-      remote_state *rs = get_remote_state ();\n-\n-      /* If there are are events left in the queue tell the event loop\n-\t to return here.  */\n-      if (!rs->stop_reply_queue.empty ())\n+      /* If there are events left in the queue, or unacknowledged\n+\t notifications, then tell the event loop to call us again.  */\n+      if (!rs->stop_reply_queue.empty ()\n+\t  || rs->notif_state->pending_event[notif_client_stop.id] != nullptr)\n \tmark_async_event_handler (rs->remote_async_inferior_event_token);\n     }\n \n@@ -14259,21 +14265,7 @@ remote_async_serial_handler (struct serial *scb, void *context)\n static void\n remote_async_inferior_event_handler (gdb_client_data data)\n {\n-  remote_target *remote = (remote_target *) data;\n-  remote_state *rs = remote->get_remote_state ();\n-  clear_async_event_handler (rs->remote_async_inferior_event_token);\n-\n   inferior_event_handler (INF_REG_EVENT);\n-\n-  /* inferior_event_handler may have consumed an event pending on the\n-     infrun side without calling target_wait on the REMOTE target, or\n-     may have pulled an event out of a different target.  Keep trying\n-     for this remote target as long it still has either pending events\n-     or unacknowledged notifications.  */\n-\n-  if (rs->notif_state->pending_event[notif_client_stop.id] != NULL\n-      || !rs->stop_reply_queue.empty ())\n-    mark_async_event_handler (rs->remote_async_inferior_event_token);\n }\n \n int"
    }
  ]
}