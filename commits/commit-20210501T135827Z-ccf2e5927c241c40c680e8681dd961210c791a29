{
  "sha": "ccf2e5927c241c40c680e8681dd961210c791a29",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2NmMmU1OTI3YzI0MWM0MGM2ODBlODY4MWRkOTYxMjEwYzc5MWEyOQ==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-04-24T18:28:17Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-05-01T13:58:27Z"
    },
    "message": "sim: callback: inline wrap helper\n\nThis is annoying as it requires inlining boiler plate, but we don't\nhave much choice: the wrap helper assumes the return value is always\nan int, but that's already not the case with some of the callbacks\nwhich use long.  GCC has extensions to define macros-as-functions,\nbut we can't assume GCC.",
    "tree": {
      "sha": "8232411ed1d8c434ccd8d65218d8027552316bcc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8232411ed1d8c434ccd8d65218d8027552316bcc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ccf2e5927c241c40c680e8681dd961210c791a29",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ccf2e5927c241c40c680e8681dd961210c791a29",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ccf2e5927c241c40c680e8681dd961210c791a29",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ccf2e5927c241c40c680e8681dd961210c791a29/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6aee2cb249daca249353d0dcceb0329a1662623c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6aee2cb249daca249353d0dcceb0329a1662623c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6aee2cb249daca249353d0dcceb0329a1662623c"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 66,
    "deletions": 25
  },
  "files": [
    {
      "sha": "9775f418b8f67e17301fcb0ca465da61702df9d0",
      "filename": "sim/common/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccf2e5927c241c40c680e8681dd961210c791a29/sim/common/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccf2e5927c241c40c680e8681dd961210c791a29/sim/common/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/ChangeLog?ref=ccf2e5927c241c40c680e8681dd961210c791a29",
      "patch": "@@ -1,3 +1,10 @@\n+2021-05-01  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* callback.c (wrap): Delete.\n+\t(os_close): Replace wrap call with direct call & setting last_errno.\n+\t(os_isatty, os_lseek, os_read_stdin, os_write, os_rename, os_system,\n+\tos_time, os_unlink, os_stat, os_fstat, os_lstat): Likewise.\n+\n 2021-04-26  Mike Frysinger  <vapier@gentoo.org>\n \n \t* gennltvals.py (TARGETS): Delete.  Update comment."
    },
    {
      "sha": "aae0630d645ca908d374e54f136d9284ce32180a",
      "filename": "sim/common/callback.c",
      "status": "modified",
      "additions": 59,
      "deletions": 25,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccf2e5927c241c40c680e8681dd961210c791a29/sim/common/callback.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccf2e5927c241c40c680e8681dd961210c791a29/sim/common/callback.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/callback.c?ref=ccf2e5927c241c40c680e8681dd961210c791a29",
      "patch": "@@ -58,15 +58,6 @@ extern CB_TARGET_DEFS_MAP cb_init_syscall_map[];\n extern CB_TARGET_DEFS_MAP cb_init_errno_map[];\n extern CB_TARGET_DEFS_MAP cb_init_open_map[];\n \n-/* Set the callback copy of errno from what we see now.  */\n-\n-static int\n-wrap (host_callback *p, int val)\n-{\n-  p->last_errno = errno;\n-  return val;\n-}\n-\n /* Make sure the FD provided is ok.  If not, return non-zero\n    and set errno. */\n \n@@ -143,7 +134,8 @@ os_close (host_callback *p, int fd)\n \t  return 0;\n \t}\n \n-      result = wrap (p, close (fdmap (p, fd)));\n+      result = close (fdmap (p, fd));\n+      p->last_errno = errno;\n     }\n   p->fd_buddy[fd] = -1;\n \n@@ -207,8 +199,9 @@ os_isatty (host_callback *p, int fd)\n   result = fdbad (p, fd);\n   if (result)\n     return result;\n-  result = wrap (p, isatty (fdmap (p, fd)));\n \n+  result = isatty (fdmap (p, fd));\n+  p->last_errno = errno;\n   return result;\n }\n \n@@ -220,7 +213,9 @@ os_lseek (host_callback *p, int fd, long off, int way)\n   result = fdbad (p, fd);\n   if (result)\n     return result;\n-  result = wrap (p, lseek (fdmap (p, fd), off, way));\n+\n+  result = lseek (fdmap (p, fd), off, way);\n+  p->last_errno = errno;\n   return result;\n }\n \n@@ -296,14 +291,19 @@ os_read (host_callback *p, int fd, char *buf, int len)\n       return len;\n     }\n \n-  result = wrap (p, read (fdmap (p, fd), buf, len));\n+  result = read (fdmap (p, fd), buf, len);\n+  p->last_errno = errno;\n   return result;\n }\n \n static int\n os_read_stdin (host_callback *p, char *buf, int len)\n {\n-  return wrap (p, read (0, buf, len));\n+  int result;\n+\n+  result = read (0, buf, len);\n+  p->last_errno = errno;\n+  return result;\n }\n \n static int\n@@ -362,7 +362,8 @@ os_write (host_callback *p, int fd, const char *buf, int len)\n   switch (real_fd)\n     {\n     default:\n-      result = wrap (p, write (real_fd, buf, len));\n+      result = write (real_fd, buf, len);\n+      p->last_errno = errno;\n       break;\n     case 1:\n       result = p->write_stdout (p, buf, len);\n@@ -401,42 +402,64 @@ os_flush_stderr (host_callback *p ATTRIBUTE_UNUSED)\n static int\n os_rename (host_callback *p, const char *f1, const char *f2)\n {\n-  return wrap (p, rename (f1, f2));\n+  int result;\n+\n+  result = rename (f1, f2);\n+  p->last_errno = errno;\n+  return result;\n }\n \n \n static int\n os_system (host_callback *p, const char *s)\n {\n-  return wrap (p, system (s));\n+  int result;\n+\n+  result = system (s);\n+  p->last_errno = errno;\n+  return result;\n }\n \n static long\n os_time (host_callback *p, long *t)\n {\n-  return wrap (p, time (t));\n+  long result;\n+\n+  result = time (t);\n+  p->last_errno = errno;\n+  return result;\n }\n \n \n static int\n os_unlink (host_callback *p, const char *f1)\n {\n-  return wrap (p, unlink (f1));\n+  int result;\n+\n+  result = unlink (f1);\n+  p->last_errno = errno;\n+  return result;\n }\n \n static int\n os_stat (host_callback *p, const char *file, struct stat *buf)\n {\n+  int result;\n+\n   /* ??? There is an issue of when to translate to the target layout.\n      One could do that inside this function, or one could have the\n      caller do it.  It's more flexible to let the caller do it, though\n      I'm not sure the flexibility will ever be useful.  */\n-  return wrap (p, stat (file, buf));\n+  result = stat (file, buf);\n+  p->last_errno = errno;\n+  return result;\n }\n \n static int\n os_fstat (host_callback *p, int fd, struct stat *buf)\n {\n+  int result;\n+\n   if (fdbad (p, fd))\n     return -1;\n \n@@ -475,18 +498,24 @@ os_fstat (host_callback *p, int fd, struct stat *buf)\n      One could do that inside this function, or one could have the\n      caller do it.  It's more flexible to let the caller do it, though\n      I'm not sure the flexibility will ever be useful.  */\n-  return wrap (p, fstat (fdmap (p, fd), buf));\n+  result = fstat (fdmap (p, fd), buf);\n+  p->last_errno = errno;\n+  return result;\n }\n \n static int\n os_lstat (host_callback *p, const char *file, struct stat *buf)\n {\n+  int result;\n+\n   /* NOTE: hpn/2004-12-12: Same issue here as with os_fstat.  */\n #ifdef HAVE_LSTAT\n-  return wrap (p, lstat (file, buf));\n+  result = lstat (file, buf);\n #else\n-  return wrap (p, stat (file, buf));\n+  result = stat (file, buf);\n #endif\n+  p->last_errno = errno;\n+  return result;\n }\n \n static int\n@@ -503,7 +532,8 @@ os_ftruncate (host_callback *p, int fd, long len)\n   if (result)\n     return result;\n #ifdef HAVE_FTRUNCATE\n-  result = wrap (p, ftruncate (fdmap (p, fd), len));\n+  result = ftruncate (fdmap (p, fd), len);\n+  p->last_errno = errno;\n #else\n   p->last_errno = EINVAL;\n   result = -1;\n@@ -515,7 +545,11 @@ static int\n os_truncate (host_callback *p, const char *file, long len)\n {\n #ifdef HAVE_TRUNCATE\n-  return wrap (p, truncate (file, len));\n+  int result;\n+\n+  result = truncate (file, len);\n+  p->last_errno = errno;\n+  return result;\n #else\n   p->last_errno = EINVAL;\n   return -1;"
    }
  ]
}