{
  "sha": "89b268d8233e11acdfbc5af196166aacc1440ff3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODliMjY4ZDgyMzNlMTFhY2RmYmM1YWYxOTYxNjZhYWNjMTQ0MGZmMw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-10T18:27:12Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T21:50:21Z"
    },
    "message": "gdb/m32c: Use default gdbarch methods where possible\n\nMake use of the default gdbarch methods for gdbarch_dummy_id,\ngdbarch_unwind_pc, and gdbarch_unwind_sp where possible.\n\nI have not tested this change but, by inspecting the code, I believe\nthe default methods are equivalent to the code being deleted.\n\ngdb/ChangeLog:\n\n\t* m32c-tdep.c (m32c_unwind_pc): Delete.\n\t(m32c_unwind_sp): Delete.\n\t(m32c_dummy_id): Delete.\n\t(m32c_gdbarch_init): Don't register deleted functions with\n\tgdbarch.",
    "tree": {
      "sha": "ef5eeadd7fb556d5e96be9a571232fc1bffd1f04",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ef5eeadd7fb556d5e96be9a571232fc1bffd1f04"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/89b268d8233e11acdfbc5af196166aacc1440ff3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89b268d8233e11acdfbc5af196166aacc1440ff3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/89b268d8233e11acdfbc5af196166aacc1440ff3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89b268d8233e11acdfbc5af196166aacc1440ff3/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "946c28d2f93789ff4eec86a8c321af35759fa20a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/946c28d2f93789ff4eec86a8c321af35759fa20a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/946c28d2f93789ff4eec86a8c321af35759fa20a"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 8,
    "deletions": 34
  },
  "files": [
    {
      "sha": "c4bdedb24dbf5c4714f31d887613840419f3f289",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89b268d8233e11acdfbc5af196166aacc1440ff3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89b268d8233e11acdfbc5af196166aacc1440ff3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=89b268d8233e11acdfbc5af196166aacc1440ff3",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* m32c-tdep.c (m32c_unwind_pc): Delete.\n+\t(m32c_unwind_sp): Delete.\n+\t(m32c_dummy_id): Delete.\n+\t(m32c_gdbarch_init): Don't register deleted functions with\n+\tgdbarch.\n+\n 2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb/lm32-tdep.c (lm32_unwind_sp): Delete."
    },
    {
      "sha": "a28c5d8e81fe7be13e3e132b67a286b693a7f468",
      "filename": "gdb/m32c-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 34,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89b268d8233e11acdfbc5af196166aacc1440ff3/gdb/m32c-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89b268d8233e11acdfbc5af196166aacc1440ff3/gdb/m32c-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m32c-tdep.c?ref=89b268d8233e11acdfbc5af196166aacc1440ff3",
      "patch": "@@ -1951,22 +1951,6 @@ static const struct frame_unwind m32c_unwind = {\n   default_frame_sniffer\n };\n \n-\n-static CORE_ADDR\n-m32c_unwind_pc (struct gdbarch *arch, struct frame_info *next_frame)\n-{\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (arch);\n-  return frame_unwind_register_unsigned (next_frame, tdep->pc->num);\n-}\n-\n-\n-static CORE_ADDR\n-m32c_unwind_sp (struct gdbarch *arch, struct frame_info *next_frame)\n-{\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (arch);\n-  return frame_unwind_register_unsigned (next_frame, tdep->sp->num);\n-}\n-\n \f\n /* Inferior calls.  */\n \n@@ -2139,21 +2123,6 @@ m32c_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n }\n \n \n-static struct frame_id\n-m32c_dummy_id (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  /* This needs to return a frame ID whose PC is the return address\n-     passed to m32c_push_dummy_call, and whose stack_addr is the SP\n-     m32c_push_dummy_call returned.\n-\n-     m32c_unwind_sp gives us the CFA, which is the value the SP had\n-     before the return address was pushed.  */\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n-  CORE_ADDR sp = get_frame_register_unsigned (this_frame, tdep->sp->num);\n-  return frame_id_build (sp, get_frame_pc (this_frame));\n-}\n-\n-\n \f\n /* Return values.  */\n \n@@ -2643,8 +2612,6 @@ m32c_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   /* Prologue analysis and unwinding.  */\n   set_gdbarch_inner_than (gdbarch, core_addr_lessthan);\n   set_gdbarch_skip_prologue (gdbarch, m32c_skip_prologue);\n-  set_gdbarch_unwind_pc (gdbarch, m32c_unwind_pc);\n-  set_gdbarch_unwind_sp (gdbarch, m32c_unwind_sp);\n #if 0\n   /* I'm dropping the dwarf2 sniffer because it has a few problems.\n      They may be in the dwarf2 cfi code in GDB, or they may be in\n@@ -2658,7 +2625,6 @@ m32c_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   /* Inferior calls.  */\n   set_gdbarch_push_dummy_call (gdbarch, m32c_push_dummy_call);\n   set_gdbarch_return_value (gdbarch, m32c_return_value);\n-  set_gdbarch_dummy_id (gdbarch, m32c_dummy_id);\n \n   /* Trampolines.  */\n   set_gdbarch_skip_trampoline_code (gdbarch, m32c_skip_trampoline_code);"
    }
  ]
}