{
  "sha": "2c1bef53dee85aede31e6de6fa8276d6869f6512",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmMxYmVmNTNkZWU4NWFlZGUzMWU2ZGU2ZmE4Mjc2ZDY4NjlmNjUxMg==",
  "commit": {
    "author": {
      "name": "Cl\u00e9ment Chigot",
      "email": "clement.chigot@atos.net",
      "date": "2021-03-11T10:08:18Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-12T11:38:20Z"
    },
    "message": "aix: correct HOWTO table and add missing relocations\n\nSince the last time AIX HOWTO table was modified, IBM has now\nreleased an official documentation about XCOFF relocations.\nThis commit corrects the wrong ones and add some missing.\nFor now, the \"custom\" relocations made for xcoff_rtype2howto have\nbeen kept.\nThe new relocations are still set as EMPTY_HOWTO because they will\nbe implemented in later commits.\n\nIn xcoff[64]_ppc_relocate_section, instead of recreating howto\nfrom scratch, it's better to use the existing howto from the\ntable and fixing it according to r_size field.\n\nbfd/\n\t* coff-rs6000.c (xcoff_calculate_relocation): Correct and\n\tadd new relocations.\n\t(xcoff_howto_table): Likewise.\n\t(xcoff_rtype2howto): Increase r_type maximum value.\n\t(xcoff_ppc_relocate_section): Reuse predefined HOWTOs instead\n\tof create a new one from scratch.  Enable only some relocations\n\tto have a changing r_size.\n\t* coff64-rs6000.c (xcoff64_calculate_relocation): Likewise.\n\t(xcoff64_howto_table): Likewise.\n\t(xcoff64_rtype2howto): Likewise.\n\t(xcoff64_ppc_relocate_section): Likewise.\n\t* libxcoff.h (XCOFF_MAX_CALCULATE_RELOCATION): Fix value.\nbinutils/\n\t* od-xcoff.c: Replace RTB by TRL entry.\ninclude/\n\t* coff/xcoff.h (R_RTB): Remove.\n\t(R_TRL): Fix value.",
    "tree": {
      "sha": "0d3903dfd673a797ed2c8f38557f8fc06ac424d1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0d3903dfd673a797ed2c8f38557f8fc06ac424d1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2c1bef53dee85aede31e6de6fa8276d6869f6512",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c1bef53dee85aede31e6de6fa8276d6869f6512",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2c1bef53dee85aede31e6de6fa8276d6869f6512",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c1bef53dee85aede31e6de6fa8276d6869f6512/comments",
  "author": {
    "login": "Helflym",
    "id": 23002587,
    "node_id": "MDQ6VXNlcjIzMDAyNTg3",
    "avatar_url": "https://avatars.githubusercontent.com/u/23002587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Helflym",
    "html_url": "https://github.com/Helflym",
    "followers_url": "https://api.github.com/users/Helflym/followers",
    "following_url": "https://api.github.com/users/Helflym/following{/other_user}",
    "gists_url": "https://api.github.com/users/Helflym/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Helflym/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Helflym/subscriptions",
    "organizations_url": "https://api.github.com/users/Helflym/orgs",
    "repos_url": "https://api.github.com/users/Helflym/repos",
    "events_url": "https://api.github.com/users/Helflym/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Helflym/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0c929e83c1fdb29e553021b1d03565862accfd2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c929e83c1fdb29e553021b1d03565862accfd2d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0c929e83c1fdb29e553021b1d03565862accfd2d"
    }
  ],
  "stats": {
    "total": 639,
    "additions": 400,
    "deletions": 239
  },
  "files": [
    {
      "sha": "6c359ac1a8825a8383863d8d7f6145d1eff3ae5c",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1bef53dee85aede31e6de6fa8276d6869f6512/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1bef53dee85aede31e6de6fa8276d6869f6512/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=2c1bef53dee85aede31e6de6fa8276d6869f6512",
      "patch": "@@ -1,3 +1,18 @@\n+2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* coff-rs6000.c (xcoff_calculate_relocation): Correct and\n+\tadd new relocations.\n+\t(xcoff_howto_table): Likewise.\n+\t(xcoff_rtype2howto): Increase r_type maximum value.\n+\t(xcoff_ppc_relocate_section): Reuse predefined HOWTOs instead\n+\tof create a new one from scratch.  Enable only some relocations\n+\tto have a changing r_size.\n+\t* coff64-rs6000.c (xcoff64_calculate_relocation): Likewise.\n+\t(xcoff64_howto_table): Likewise.\n+\t(xcoff64_rtype2howto): Likewise.\n+\t(xcoff64_ppc_relocate_section): Likewise.\n+\t* libxcoff.h (XCOFF_MAX_CALCULATE_RELOCATION): Fix value.\n+\n 2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n \n \t* coff64-rs6000.c (xcoff64_ppc_relocate_section): Move."
    },
    {
      "sha": "2cae299539d1642ca5f7ab67bc9baa101562405a",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 204,
      "deletions": 119,
      "changes": 323,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1bef53dee85aede31e6de6fa8276d6869f6512/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1bef53dee85aede31e6de6fa8276d6869f6512/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=2c1bef53dee85aede31e6de6fa8276d6869f6512",
      "patch": "@@ -158,34 +158,56 @@ static xcoff_complain_function xcoff_complain_overflow_unsigned_func;\n xcoff_reloc_function *const\n xcoff_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION] =\n {\n-  xcoff_reloc_type_pos,\t /* R_POS   (0x00) */\n-  xcoff_reloc_type_neg,\t /* R_NEG   (0x01) */\n-  xcoff_reloc_type_rel,\t /* R_REL   (0x02) */\n-  xcoff_reloc_type_toc,\t /* R_TOC   (0x03) */\n-  xcoff_reloc_type_fail, /* R_RTB   (0x04) */\n-  xcoff_reloc_type_toc,\t /* R_GL    (0x05) */\n-  xcoff_reloc_type_toc,\t /* R_TCL   (0x06) */\n-  xcoff_reloc_type_fail, /*\t    (0x07) */\n-  xcoff_reloc_type_ba,\t /* R_BA    (0x08) */\n-  xcoff_reloc_type_fail, /*\t    (0x09) */\n-  xcoff_reloc_type_br,\t /* R_BR    (0x0a) */\n-  xcoff_reloc_type_fail, /*\t    (0x0b) */\n-  xcoff_reloc_type_pos,\t /* R_RL    (0x0c) */\n-  xcoff_reloc_type_pos,\t /* R_RLA   (0x0d) */\n-  xcoff_reloc_type_fail, /*\t    (0x0e) */\n+  xcoff_reloc_type_pos,  /* R_POS   (0x00) */\n+  xcoff_reloc_type_neg,  /* R_NEG   (0x01) */\n+  xcoff_reloc_type_rel,  /* R_REL   (0x02) */\n+  xcoff_reloc_type_toc,  /* R_TOC   (0x03) */\n+  xcoff_reloc_type_toc,  /* R_TRL   (0x04) */\n+  xcoff_reloc_type_toc,  /* R_GL    (0x05) */\n+  xcoff_reloc_type_toc,  /* R_TCL   (0x06) */\n+  xcoff_reloc_type_fail, /*         (0x07) */\n+  xcoff_reloc_type_ba,   /* R_BA    (0x08) */\n+  xcoff_reloc_type_fail, /*         (0x09) */\n+  xcoff_reloc_type_br,   /* R_BR    (0x0a) */\n+  xcoff_reloc_type_fail, /*         (0x0b) */\n+  xcoff_reloc_type_pos,  /* R_RL    (0x0c) */\n+  xcoff_reloc_type_pos,  /* R_RLA   (0x0d) */\n+  xcoff_reloc_type_fail, /*         (0x0e) */\n   xcoff_reloc_type_noop, /* R_REF   (0x0f) */\n-  xcoff_reloc_type_fail, /*\t    (0x10) */\n-  xcoff_reloc_type_fail, /*\t    (0x11) */\n-  xcoff_reloc_type_toc,\t /* R_TRL   (0x12) */\n-  xcoff_reloc_type_toc,\t /* R_TRLA  (0x13) */\n+  xcoff_reloc_type_fail, /*         (0x10) */\n+  xcoff_reloc_type_fail, /*         (0x11) */\n+  xcoff_reloc_type_fail, /*         (0x12) */\n+  xcoff_reloc_type_toc,  /* R_TRLA  (0x13) */\n   xcoff_reloc_type_fail, /* R_RRTBI (0x14) */\n   xcoff_reloc_type_fail, /* R_RRTBA (0x15) */\n-  xcoff_reloc_type_ba,\t /* R_CAI   (0x16) */\n+  xcoff_reloc_type_ba,   /* R_CAI   (0x16) */\n   xcoff_reloc_type_crel, /* R_CREL  (0x17) */\n-  xcoff_reloc_type_ba,\t /* R_RBA   (0x18) */\n-  xcoff_reloc_type_ba,\t /* R_RBAC  (0x19) */\n-  xcoff_reloc_type_br,\t /* R_RBR   (0x1a) */\n-  xcoff_reloc_type_ba,\t /* R_RBRC  (0x1b) */\n+  xcoff_reloc_type_ba,   /* R_RBA   (0x18) */\n+  xcoff_reloc_type_ba,   /* R_RBAC  (0x19) */\n+  xcoff_reloc_type_br,   /* R_RBR   (0x1a) */\n+  xcoff_reloc_type_ba,   /* R_RBRC  (0x1b) */\n+  xcoff_reloc_type_fail, /*           (0x1c) */\n+  xcoff_reloc_type_fail, /*           (0x1d) */\n+  xcoff_reloc_type_fail, /*           (0x1e) */\n+  xcoff_reloc_type_fail, /*           (0x1f) */\n+  xcoff_reloc_type_fail, /* R_TLS     (0x20) */\n+  xcoff_reloc_type_fail, /* R_TLS_IE  (0x21) */\n+  xcoff_reloc_type_fail, /* R_TLS_LD  (0x22) */\n+  xcoff_reloc_type_fail, /* R_TLS_LE  (0x23) */\n+  xcoff_reloc_type_fail, /* R_TLSM    (0x24) */\n+  xcoff_reloc_type_fail, /* R_TLSML   (0x25) */\n+  xcoff_reloc_type_fail, /*           (0x26) */\n+  xcoff_reloc_type_fail, /*           (0x27) */\n+  xcoff_reloc_type_fail, /*           (0x28) */\n+  xcoff_reloc_type_fail, /*           (0x29) */\n+  xcoff_reloc_type_fail, /*           (0x2a) */\n+  xcoff_reloc_type_fail, /*           (0x2b) */\n+  xcoff_reloc_type_fail, /*           (0x2c) */\n+  xcoff_reloc_type_fail, /*           (0x2d) */\n+  xcoff_reloc_type_fail, /*           (0x2e) */\n+  xcoff_reloc_type_fail, /*           (0x2f) */\n+  xcoff_reloc_type_fail, /* R_TOCU    (0x30) */\n+  xcoff_reloc_type_fail, /* R_TOCL    (0x31) */\n };\n \n xcoff_complain_function *const\n@@ -652,11 +674,18 @@ _bfd_xcoff_swap_aux_out (bfd *abfd, void * inp, int type, int in_class,\n   return bfd_coff_auxesz (abfd);\n }\n \f\n-/* The XCOFF reloc table.  Actually, XCOFF relocations specify the\n-   bitsize and whether they are signed or not, along with a\n-   conventional type.  This table is for the types, which are used for\n-   different algorithms for putting in the reloc.  Many of these\n-   relocs need special_function entries, which I have not written.  */\n+/* The XCOFF reloc table.\n+   XCOFF relocations aren't defined only by the type field r_type.\n+   The bitsize and whether they are signed or not, are defined by\n+   r_size field.  Thus, it's complicated to create a constant\n+   table reference every possible relocation.\n+   This table contains the \"default\" relocation and few modified\n+   relocations what were already there.  It's enough when\n+   xcoff_rtype2howto is called.\n+   For relocations from an input bfd to an output bfd, the default\n+   relocation is retrieved and when manually adapted.\n+\n+   For now, it seems to be enought.  */\n \n reloc_howto_type xcoff_howto_table[] =\n {\n@@ -720,19 +749,19 @@ reloc_howto_type xcoff_howto_table[] =\n \t 0xffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n-  /* 0x04: I don't really know what this is.  */\n-  HOWTO (R_RTB,\t\t\t/* type */\n-\t 1,\t\t\t/* rightshift */\n-\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 32,\t\t\t/* bitsize */\n+  /* 0x04: Same as R_TOC  */\n+  HOWTO (R_TRL,\t\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 16,\t\t\t/* bitsize */\n \t FALSE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_bitfield, /* complain_on_overflow */\n \t 0,\t\t\t/* special_function */\n-\t \"R_RTB\",\t\t/* name */\n+\t \"R_TRL\",\t\t/* name */\n \t TRUE,\t\t\t/* partial_inplace */\n-\t 0xffffffff,\t\t/* src_mask */\n-\t 0xffffffff,\t\t/* dst_mask */\n+\t 0xffff,\t\t/* src_mask */\n+\t 0xffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x05: External TOC relative symbol.  */\n@@ -767,7 +796,7 @@ reloc_howto_type xcoff_howto_table[] =\n \n   EMPTY_HOWTO (7),\n \n-  /* 0x08: Non modifiable absolute branch.  */\n+  /* 0x08: Same as R_RBA.  */\n   HOWTO (R_BA,\t\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n \t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n@@ -784,7 +813,7 @@ reloc_howto_type xcoff_howto_table[] =\n \n   EMPTY_HOWTO (9),\n \n-  /* 0x0a: Non modifiable relative branch.  */\n+  /* 0x0a: Same as R_RBR.  */\n   HOWTO (R_BR,\t\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n \t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n@@ -801,34 +830,34 @@ reloc_howto_type xcoff_howto_table[] =\n \n   EMPTY_HOWTO (0xb),\n \n-  /* 0x0c: Indirect load.  */\n+  /* 0x0c: Same as R_POS.  */\n   HOWTO (R_RL,\t\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n-\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 16,\t\t\t/* bitsize */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n \t FALSE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_bitfield, /* complain_on_overflow */\n \t 0,\t\t\t/* special_function */\n \t \"R_RL\",\t\t/* name */\n \t TRUE,\t\t\t/* partial_inplace */\n-\t 0xffff,\t\t/* src_mask */\n-\t 0xffff,\t\t/* dst_mask */\n+\t 0xffffffff,\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n-  /* 0x0d: Load address.  */\n+  /* 0x0d: Same as R_POS.  */\n   HOWTO (R_RLA,\t\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n-\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 16,\t\t\t/* bitsize */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n \t FALSE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_bitfield, /* complain_on_overflow */\n \t 0,\t\t\t/* special_function */\n \t \"R_RLA\",\t\t/* name */\n \t TRUE,\t\t\t/* partial_inplace */\n-\t 0xffff,\t\t/* src_mask */\n-\t 0xffff,\t\t/* dst_mask */\n+\t 0xffffffff,\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n   EMPTY_HOWTO (0xe),\n@@ -850,23 +879,9 @@ reloc_howto_type xcoff_howto_table[] =\n \n   EMPTY_HOWTO (0x10),\n   EMPTY_HOWTO (0x11),\n+  EMPTY_HOWTO (0x12),\n \n-  /* 0x12: TOC relative indirect load.  */\n-  HOWTO (R_TRL,\t\t\t/* type */\n-\t 0,\t\t\t/* rightshift */\n-\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 16,\t\t\t/* bitsize */\n-\t FALSE,\t\t\t/* pc_relative */\n-\t 0,\t\t\t/* bitpos */\n-\t complain_overflow_bitfield, /* complain_on_overflow */\n-\t 0,\t\t\t/* special_function */\n-\t \"R_TRL\",\t\t/* name */\n-\t TRUE,\t\t\t/* partial_inplace */\n-\t 0xffff,\t\t/* src_mask */\n-\t 0xffff,\t\t/* dst_mask */\n-\t FALSE),\t\t/* pcrel_offset */\n-\n-  /* 0x13: TOC relative load address.  */\n+  /* 0x13: Same as R_TOC.  */\n   HOWTO (R_TRLA,\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n \t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n@@ -882,7 +897,7 @@ reloc_howto_type xcoff_howto_table[] =\n \t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x14: Modifiable relative branch.  */\n-  HOWTO (R_RRTBI,\t\t /* type */\n+  HOWTO (R_RRTBI,\t\t/* type */\n \t 1,\t\t\t/* rightshift */\n \t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n \t 32,\t\t\t/* bitsize */\n@@ -897,7 +912,7 @@ reloc_howto_type xcoff_howto_table[] =\n \t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x15: Modifiable absolute branch.  */\n-  HOWTO (R_RRTBA,\t\t /* type */\n+  HOWTO (R_RRTBA,\t\t/* type */\n \t 1,\t\t\t/* rightshift */\n \t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n \t 32,\t\t\t/* bitsize */\n@@ -1045,12 +1060,50 @@ reloc_howto_type xcoff_howto_table[] =\n \t 0xffff,\t\t/* src_mask */\n \t 0xffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n+\n+  EMPTY_HOWTO (0x1f),\n+\n+  /* 0x20: General-dynamic TLS relocation.  */\n+  EMPTY_HOWTO (R_TLS),\n+\n+  /* 0x21: Initial-exec TLS relocation.  */\n+  EMPTY_HOWTO (R_TLS_IE),\n+\n+  /* 0x22: Local-dynamic TLS relocation.  */\n+  EMPTY_HOWTO (R_TLS_LD),\n+\n+  /* 0x23: Local-exec TLS relocation.  */\n+  EMPTY_HOWTO (R_TLS_LE),\n+\n+  /* 0x24: TLS relocation.  */\n+  EMPTY_HOWTO(R_TLSM),\n+\n+  /* 0x25: TLS module relocation.  */\n+  EMPTY_HOWTO(R_TLSML),\n+\n+  EMPTY_HOWTO(0x26),\n+  EMPTY_HOWTO(0x27),\n+  EMPTY_HOWTO(0x28),\n+  EMPTY_HOWTO(0x29),\n+  EMPTY_HOWTO(0x2a),\n+  EMPTY_HOWTO(0x2b),\n+  EMPTY_HOWTO(0x2c),\n+  EMPTY_HOWTO(0x2d),\n+  EMPTY_HOWTO(0x2e),\n+  EMPTY_HOWTO(0x2f),\n+\n+  /* 0x30: High-order 16 bit TOC relative relocation.  */\n+  EMPTY_HOWTO (R_TOCU),\n+\n+  /* 0x31: Low-order 16 bit TOC relative relocation.  */\n+  EMPTY_HOWTO (R_TOCL),\n+\n };\n \n void\n xcoff_rtype2howto (arelent *relent, struct internal_reloc *internal)\n {\n-  if (internal->r_type > R_RBRC)\n+  if (internal->r_type > R_TOCL)\n     abort ();\n \n   /* Default howto layout works most of the time */\n@@ -3225,11 +3278,14 @@ xcoff_complain_overflow_unsigned_func (bfd *input_bfd,\n    This is currently the only processor which uses XCOFF; I hope that\n    will never change.\n \n-   I took the relocation type definitions from two documents:\n+   The original version was based on two documents:\n    the PowerPC AIX Version 4 Application Binary Interface, First\n    Edition (April 1992), and the PowerOpen ABI, Big-Endian\n    32-Bit Hardware Implementation (June 30, 1994).  Differences\n    between the documents are noted below.\n+   Now, IBM has released an official documentation about XCOFF\n+   format:\n+   https://www.ibm.com/support/knowledgecenter/ssw_aix_72/filesreference/XCOFF.html\n \n    Unsupported r_type's\n \n@@ -3243,6 +3299,15 @@ xcoff_complain_overflow_unsigned_func (bfd *input_bfd,\n    quite figure out when this is useful.  These relocs are\n    not defined by the PowerOpen ABI.\n \n+   R_TOCU\n+   R_TOCL\n+   R_TLS\n+   R_TLS_IE\n+   R_TLS_LD\n+   R_TLSLE\n+\n+   Not yet implemented.\n+\n    Supported r_type's\n \n    R_POS:\n@@ -3264,38 +3329,68 @@ xcoff_complain_overflow_unsigned_func (bfd *input_bfd,\n    osym = oTOC + on\n    oinsn = on + o\n    so we must change insn by on - in.\n+   This relocation allows the linker to perform optimizations\n+   by transforming a load instruction into a add-immediate\n+   when possible. The relocation is, then, changed to R_TRLA\n+   in the output file.\n+   TODO: Currently, the optimisation isn't implemented.\n+\n+   R_TRL:\n+   TOC relative relocation.  Same as R_TOC, except that\n+   the optimization isn't allowed\n+\n+   R_TRLA:\n+   TOC relative relocation.  This is a TOC relative load\n+   address instruction which have been changed to an add-\n+   immediate instruction.\n \n    R_GL:\n    GL linkage relocation.  The value of this relocation\n-   is the address of the entry in the TOC section.\n+   is the address of the external symbol in the TOC\n+   section.\n \n    R_TCL:\n    Local object TOC address.  I can't figure out the\n    difference between this and case R_GL.\n \n-   R_TRL:\n-   TOC relative relocation.  A TOC relative load instruction\n-   which may be changed to a load address instruction.\n-   FIXME: We don't currently implement this optimization.\n+   R_RL:\n+   The PowerPC AIX ABI describes this as a load which may be\n+   changed to a load address.  The PowerOpen ABI says this\n+   is the same as case R_POS.\n \n-   R_TRLA:\n-   TOC relative relocation.  This is a TOC relative load\n-   address instruction which may be changed to a load\n-   instruction.  FIXME: I don't know if this is the correct\n-   implementation.\n+   R_RLA:\n+   The PowerPC AIX ABI describes this as a load address\n+   which may be changed to a load.  The PowerOpen ABI says\n+   this is the same as R_POS.\n+\n+   R_REF:\n+   Not a relocation but a way to prevent the garbage\n+   collector of AIX linker to remove symbols.\n+   This is not needed in our case.\n \n    R_BA:\n-   Absolute branch.  We don't want to mess with the lower\n-   two bits of the instruction.\n+   The PowerOpen ABI says this is the same as R_RBA.\n+\n+   R_RBA:\n+   Absolute branch which may be modified to become a\n+   relative branch.\n+\n+   R_BR:\n+   The PowerOpen ABI says this is the same as R_RBR.\n+\n+   R_RBR:\n+   A relative branch which may be modified to become an\n+   absolute branch.\n \n    R_CAI:\n    The PowerPC ABI defines this as an absolute call which\n    may be modified to become a relative call.  The PowerOpen\n    ABI does not define this relocation type.\n \n-   R_RBA:\n-   Absolute branch which may be modified to become a\n-   relative branch.\n+   R_CREL:\n+   The PowerPC ABI defines this as a relative call which may\n+   be modified to become an absolute call.  The PowerOpen\n+   ABI does not define this relocation type.\n \n    R_RBAC:\n    The PowerPC ABI defines this as an absolute branch to a\n@@ -3307,29 +3402,6 @@ xcoff_complain_overflow_unsigned_func (bfd *input_bfd,\n    The PowerPC ABI defines this as an absolute branch to a\n    fixed address which may be modified to a relative branch.\n    The PowerOpen ABI does not define this relocation type.\n-\n-   R_BR:\n-   Relative branch.  We don't want to mess with the lower\n-   two bits of the instruction.\n-\n-   R_CREL:\n-   The PowerPC ABI defines this as a relative call which may\n-   be modified to become an absolute call.  The PowerOpen\n-   ABI does not define this relocation type.\n-\n-   R_RBR:\n-   A relative branch which may be modified to become an\n-   absolute branch.\n-\n-   R_RL:\n-   The PowerPC AIX ABI describes this as a load which may be\n-   changed to a load address.  The PowerOpen ABI says this\n-   is the same as case R_POS.\n-\n-   R_RLA:\n-   The PowerPC AIX ABI describes this as a load address\n-   which may be changed to a load.  The PowerOpen ABI says\n-   this is the same as R_POS.\n */\n \n bfd_boolean\n@@ -3366,21 +3438,34 @@ xcoff_ppc_relocate_section (bfd *output_bfd,\n       if (rel->r_type == R_REF)\n \tcontinue;\n \n-      /* howto */\n-      howto.type = rel->r_type;\n-      howto.rightshift = 0;\n-      howto.bitsize = (rel->r_size & 0x1f) + 1;\n-      howto.size = howto.bitsize > 16 ? 2 : 1;\n-      howto.pc_relative = FALSE;\n-      howto.bitpos = 0;\n+      /* Retrieve default value in HOWTO table and fix up according\n+\t to r_size field, if it can be different.\n+\t This should be made during relocation reading but the algorithms\n+\t are expecting constant howtos.  */\n+      memcpy (&howto, &xcoff_howto_table[rel->r_type], sizeof (howto));\n+      if (howto.bitsize != (rel->r_size & 0x1f) + 1)\n+\t{\n+\t  switch (rel->r_type)\n+\t    {\n+\t    case R_POS:\n+\t    case R_NEG:\n+\t      howto.bitsize = (rel->r_size & 0x1f) + 1;\n+\t      howto.size = howto.bitsize > 16 ? 2 : 1;\n+\t      howto.src_mask = howto.dst_mask = N_ONES (howto.bitsize);\n+\t      break;\n+\n+\t    default:\n+\t      _bfd_error_handler\n+\t\t(_(\"%pB: relocatation (%d) at (0x%\" BFD_VMA_FMT \"x) has wrong\"\n+\t\t   \" r_rsize (0x%x)\\n\"),\n+\t\t input_bfd, rel->r_type, rel->r_vaddr, rel->r_size);\n+\t      return FALSE;\n+\t    }\n+\t}\n+\n       howto.complain_on_overflow = (rel->r_size & 0x80\n \t\t\t\t    ? complain_overflow_signed\n \t\t\t\t    : complain_overflow_bitfield);\n-      howto.special_function = NULL;\n-      howto.name = \"internal\";\n-      howto.partial_inplace = TRUE;\n-      howto.src_mask = howto.dst_mask = N_ONES (howto.bitsize);\n-      howto.pcrel_offset = FALSE;\n \n       /* symbol */\n       val = 0;"
    },
    {
      "sha": "0cb7e8b12780eb85891094818c147f31b5f6fc72",
      "filename": "bfd/coff64-rs6000.c",
      "status": "modified",
      "additions": 144,
      "deletions": 90,
      "changes": 234,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1bef53dee85aede31e6de6fa8276d6869f6512/bfd/coff64-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1bef53dee85aede31e6de6fa8276d6869f6512/bfd/coff64-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff64-rs6000.c?ref=2c1bef53dee85aede31e6de6fa8276d6869f6512",
      "patch": "@@ -180,34 +180,56 @@ static xcoff_reloc_function xcoff64_reloc_type_br;\n xcoff_reloc_function *const\n xcoff64_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION] =\n {\n-  xcoff_reloc_type_pos,\t /* R_POS   (0x00) */\n-  xcoff_reloc_type_neg,\t /* R_NEG   (0x01) */\n-  xcoff_reloc_type_rel,\t /* R_REL   (0x02) */\n-  xcoff_reloc_type_toc,\t /* R_TOC   (0x03) */\n-  xcoff_reloc_type_fail, /* R_RTB   (0x04) */\n-  xcoff_reloc_type_toc,\t /* R_GL    (0x05) */\n-  xcoff_reloc_type_toc,\t /* R_TCL   (0x06) */\n-  xcoff_reloc_type_fail, /*\t    (0x07) */\n-  xcoff_reloc_type_ba,\t /* R_BA    (0x08) */\n-  xcoff_reloc_type_fail, /*\t    (0x09) */\n-  xcoff64_reloc_type_br, /* R_BR    (0x0a) */\n-  xcoff_reloc_type_fail, /*\t    (0x0b) */\n-  xcoff_reloc_type_pos,\t /* R_RL    (0x0c) */\n-  xcoff_reloc_type_pos,\t /* R_RLA   (0x0d) */\n-  xcoff_reloc_type_fail, /*\t    (0x0e) */\n-  xcoff_reloc_type_noop, /* R_REF   (0x0f) */\n-  xcoff_reloc_type_fail, /*\t    (0x10) */\n-  xcoff_reloc_type_fail, /*\t    (0x11) */\n-  xcoff_reloc_type_toc,\t /* R_TRL   (0x12) */\n-  xcoff_reloc_type_toc,\t /* R_TRLA  (0x13) */\n-  xcoff_reloc_type_fail, /* R_RRTBI (0x14) */\n-  xcoff_reloc_type_fail, /* R_RRTBA (0x15) */\n-  xcoff_reloc_type_ba,\t /* R_CAI   (0x16) */\n-  xcoff_reloc_type_crel, /* R_CREL  (0x17) */\n-  xcoff_reloc_type_ba,\t /* R_RBA   (0x18) */\n-  xcoff_reloc_type_ba,\t /* R_RBAC  (0x19) */\n-  xcoff64_reloc_type_br, /* R_RBR   (0x1a) */\n-  xcoff_reloc_type_ba,\t /* R_RBRC  (0x1b) */\n+  xcoff_reloc_type_pos,  /* R_POS     (0x00) */\n+  xcoff_reloc_type_neg,  /* R_NEG     (0x01) */\n+  xcoff_reloc_type_rel,  /* R_REL     (0x02) */\n+  xcoff_reloc_type_toc,  /* R_TOC     (0x03) */\n+  xcoff_reloc_type_toc,  /* R_TRL     (0x04) */\n+  xcoff_reloc_type_toc,  /* R_GL      (0x05) */\n+  xcoff_reloc_type_toc,  /* R_TCL     (0x06) */\n+  xcoff_reloc_type_fail, /*           (0x07) */\n+  xcoff_reloc_type_ba,   /* R_BA      (0x08) */\n+  xcoff_reloc_type_fail, /*           (0x09) */\n+  xcoff64_reloc_type_br, /* R_BR      (0x0a) */\n+  xcoff_reloc_type_fail, /*           (0x0b) */\n+  xcoff_reloc_type_pos,  /* R_RL      (0x0c) */\n+  xcoff_reloc_type_pos,  /* R_RLA     (0x0d) */\n+  xcoff_reloc_type_fail, /*           (0x0e) */\n+  xcoff_reloc_type_noop, /* R_REF     (0x0f) */\n+  xcoff_reloc_type_fail, /*           (0x10) */\n+  xcoff_reloc_type_fail, /*           (0x11) */\n+  xcoff_reloc_type_fail, /*           (0x12) */\n+  xcoff_reloc_type_toc,  /* R_TRLA    (0x13) */\n+  xcoff_reloc_type_fail, /* R_RRTBI   (0x14) */\n+  xcoff_reloc_type_fail, /* R_RRTBA   (0x15) */\n+  xcoff_reloc_type_ba,   /* R_CAI     (0x16) */\n+  xcoff_reloc_type_crel, /* R_CREL    (0x17) */\n+  xcoff_reloc_type_ba,   /* R_RBA     (0x18) */\n+  xcoff_reloc_type_ba,   /* R_RBAC    (0x19) */\n+  xcoff64_reloc_type_br, /* R_RBR     (0x1a) */\n+  xcoff_reloc_type_ba,   /* R_RBRC    (0x1b) */\n+  xcoff_reloc_type_fail, /*           (0x1c) */\n+  xcoff_reloc_type_fail, /*           (0x1d) */\n+  xcoff_reloc_type_fail, /*           (0x1e) */\n+  xcoff_reloc_type_fail, /*           (0x1f) */\n+  xcoff_reloc_type_fail, /* R_TLS     (0x20) */\n+  xcoff_reloc_type_fail, /* R_TLS_IE  (0x21) */\n+  xcoff_reloc_type_fail, /* R_TLS_LD  (0x22) */\n+  xcoff_reloc_type_fail, /* R_TLS_LE  (0x23) */\n+  xcoff_reloc_type_fail, /* R_TLSM    (0x24) */\n+  xcoff_reloc_type_fail, /* R_TLSML   (0x25) */\n+  xcoff_reloc_type_fail, /*           (0x26) */\n+  xcoff_reloc_type_fail, /*           (0x27) */\n+  xcoff_reloc_type_fail, /*           (0x28) */\n+  xcoff_reloc_type_fail, /*           (0x29) */\n+  xcoff_reloc_type_fail, /*           (0x2a) */\n+  xcoff_reloc_type_fail, /*           (0x2b) */\n+  xcoff_reloc_type_fail, /*           (0x2c) */\n+  xcoff_reloc_type_fail, /*           (0x2d) */\n+  xcoff_reloc_type_fail, /*           (0x2e) */\n+  xcoff_reloc_type_fail, /*           (0x2f) */\n+  xcoff_reloc_type_fail, /* R_TOCU    (0x30) */\n+  xcoff_reloc_type_fail, /* R_TOCL    (0x31) */\n };\n \n /* coffcode.h needs these to be defined.  */\n@@ -816,11 +838,8 @@ xcoff64_reloc_type_br (bfd *input_bfd,\n \n \n \f\n-/* The XCOFF reloc table.  Actually, XCOFF relocations specify the\n-   bitsize and whether they are signed or not, along with a\n-   conventional type.  This table is for the types, which are used for\n-   different algorithms for putting in the reloc.  Many of these\n-   relocs need special_function entries, which I have not written.  */\n+/* The XCOFF reloc table.\n+   Cf xcoff_howto_table comments.  */\n \n reloc_howto_type xcoff64_howto_table[] =\n {\n@@ -854,19 +873,19 @@ reloc_howto_type xcoff64_howto_table[] =\n \t MINUS_ONE,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n-  /* 0x02: 32 bit PC relative relocation.  */\n+  /* 0x02: 64 bit PC relative relocation.  */\n   HOWTO (R_REL,\t\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n-\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 32,\t\t\t/* bitsize */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n \t TRUE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_signed, /* complain_on_overflow */\n \t 0,\t\t\t/* special_function */\n \t \"R_REL\",\t\t/* name */\n \t TRUE,\t\t\t/* partial_inplace */\n-\t 0xffffffff,\t\t/* src_mask */\n-\t 0xffffffff,\t\t/* dst_mask */\n+\t MINUS_ONE,\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x03: 16 bit TOC relative relocation.  */\n@@ -884,19 +903,19 @@ reloc_howto_type xcoff64_howto_table[] =\n \t 0xffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n-  /* 0x04: I don't really know what this is.\t*/\n-  HOWTO (R_RTB,\t\t\t/* type */\n-\t 1,\t\t\t/* rightshift */\n-\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 32,\t\t\t/* bitsize */\n+  /* 0x04: Same as R_TOC.  */\n+  HOWTO (R_TRL,\t\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 16,\t\t\t/* bitsize */\n \t FALSE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_bitfield, /* complain_on_overflow */\n \t 0,\t\t\t/* special_function */\n-\t \"R_RTB\",\t\t/* name */\n+\t \"R_TRL\",\t\t/* name */\n \t TRUE,\t\t\t/* partial_inplace */\n-\t 0xffffffff,\t\t/* src_mask */\n-\t 0xffffffff,\t\t/* dst_mask */\n+\t 0xffff,\t\t/* src_mask */\n+\t 0xffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x05: External TOC relative symbol.  */\n@@ -931,7 +950,7 @@ reloc_howto_type xcoff64_howto_table[] =\n \n   EMPTY_HOWTO (7),\n \n-  /* 0x08: Non modifiable absolute branch.  */\n+  /* 0x08: Same as R_RBA.  */\n   HOWTO (R_BA,\t\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n \t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n@@ -948,7 +967,7 @@ reloc_howto_type xcoff64_howto_table[] =\n \n   EMPTY_HOWTO (9),\n \n-  /* 0x0a: Non modifiable relative branch.  */\n+  /* 0x0a: Same as R_RBR.  */\n   HOWTO (R_BR,\t\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n \t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n@@ -965,34 +984,34 @@ reloc_howto_type xcoff64_howto_table[] =\n \n   EMPTY_HOWTO (0xb),\n \n-  /* 0x0c: Indirect load.  */\n+  /* 0x0c: Same as R_POS.  */\n   HOWTO (R_RL,\t\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n-\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 16,\t\t\t/* bitsize */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n \t FALSE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_bitfield, /* complain_on_overflow */\n \t 0,\t\t\t/* special_function */\n \t \"R_RL\",\t\t/* name */\n \t TRUE,\t\t\t/* partial_inplace */\n-\t 0xffff,\t\t/* src_mask */\n-\t 0xffff,\t\t/* dst_mask */\n+\t MINUS_ONE,\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n-  /* 0x0d: Load address.  */\n+  /* 0x0d: Same as R_POS.  */\n   HOWTO (R_RLA,\t\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n-\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 16,\t\t\t/* bitsize */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n \t FALSE,\t\t\t/* pc_relative */\n \t 0,\t\t\t/* bitpos */\n \t complain_overflow_bitfield, /* complain_on_overflow */\n \t 0,\t\t\t/* special_function */\n \t \"R_RLA\",\t\t/* name */\n \t TRUE,\t\t\t/* partial_inplace */\n-\t 0xffff,\t\t/* src_mask */\n-\t 0xffff,\t\t/* dst_mask */\n+\t MINUS_ONE,\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n   EMPTY_HOWTO (0xe),\n@@ -1014,23 +1033,9 @@ reloc_howto_type xcoff64_howto_table[] =\n \n   EMPTY_HOWTO (0x10),\n   EMPTY_HOWTO (0x11),\n+  EMPTY_HOWTO (0x12),\n \n-  /* 0x12: TOC relative indirect load.  */\n-  HOWTO (R_TRL,\t\t\t/* type */\n-\t 0,\t\t\t/* rightshift */\n-\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 16,\t\t\t/* bitsize */\n-\t FALSE,\t\t\t/* pc_relative */\n-\t 0,\t\t\t/* bitpos */\n-\t complain_overflow_bitfield, /* complain_on_overflow */\n-\t 0,\t\t\t/* special_function */\n-\t \"R_TRL\",\t\t/* name */\n-\t TRUE,\t\t\t/* partial_inplace */\n-\t 0xffff,\t\t/* src_mask */\n-\t 0xffff,\t\t/* dst_mask */\n-\t FALSE),\t\t/* pcrel_offset */\n-\n-  /* 0x13: TOC relative load address.\t */\n+  /* 0x13: Same as R_TOC  */\n   HOWTO (R_TRLA,\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n \t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n@@ -1075,7 +1080,7 @@ reloc_howto_type xcoff64_howto_table[] =\n \t 0xffffffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n-  /* 0x16: Modifiable call absolute indirect.\t */\n+  /* 0x16: Modifiable call absolute indirect.  */\n   HOWTO (R_CAI,\t\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n \t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n@@ -1090,7 +1095,7 @@ reloc_howto_type xcoff64_howto_table[] =\n \t 0xffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n-  /* 0x17: Modifiable call relative.\t*/\n+  /* 0x17: Modifiable call relative.  */\n   HOWTO (R_CREL,\t\t/* type */\n \t 0,\t\t\t/* rightshift */\n \t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n@@ -1225,12 +1230,48 @@ reloc_howto_type xcoff64_howto_table[] =\n \t 0xffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n+\n+  /* 0x20: General-dynamic TLS relocation.  */\n+  EMPTY_HOWTO (R_TLS),\n+\n+  /* 0x21: Initial-exec TLS relocation.  */\n+  EMPTY_HOWTO (R_TLS_IE),\n+\n+  /* 0x22: Local-dynamic TLS relocation.  */\n+  EMPTY_HOWTO (R_TLS_LD),\n+\n+  /* 0x23: Local-exec TLS relocation.  */\n+  EMPTY_HOWTO (R_TLS_LE),\n+\n+  /* 0x24: TLS relocation.  */\n+  EMPTY_HOWTO(R_TLSM),\n+\n+  /* 0x25: TLS module relocation.  */\n+  EMPTY_HOWTO(R_TLSML),\n+\n+  EMPTY_HOWTO(0x26),\n+  EMPTY_HOWTO(0x27),\n+  EMPTY_HOWTO(0x28),\n+  EMPTY_HOWTO(0x29),\n+  EMPTY_HOWTO(0x2a),\n+  EMPTY_HOWTO(0x2b),\n+  EMPTY_HOWTO(0x2c),\n+  EMPTY_HOWTO(0x2d),\n+  EMPTY_HOWTO(0x2e),\n+  EMPTY_HOWTO(0x2f),\n+\n+  /* 0x30: High-order 16 bit TOC relative relocation.  */\n+  EMPTY_HOWTO (R_TOCU),\n+\n+  /* 0x31: Low-order 16 bit TOC relative relocation.  */\n+  EMPTY_HOWTO (R_TOCL),\n+\n };\n \n void\n xcoff64_rtype2howto (arelent *relent, struct internal_reloc *internal)\n {\n-  if (internal->r_type > R_RBRC)\n+  if (internal->r_type > R_TOCL)\n     abort ();\n \n   /* Default howto layout works most of the time */\n@@ -1345,21 +1386,34 @@ xcoff64_ppc_relocate_section (bfd *output_bfd,\n       if (rel->r_type == R_REF)\n \tcontinue;\n \n-      /* howto */\n-      howto.type = rel->r_type;\n-      howto.rightshift = 0;\n-      howto.bitsize = (rel->r_size & 0x3f) + 1;\n-      howto.size = howto.bitsize > 16 ? (howto.bitsize > 32 ? 4 : 2) : 1;\n-      howto.pc_relative = FALSE;\n-      howto.bitpos = 0;\n+      /* Retrieve default value in HOWTO table and fix up according\n+\t to r_size field, if it can be different.\n+\t This should be made during relocation reading but the algorithms\n+\t are expecting constant howtos.  */\n+      memcpy (&howto, &xcoff64_howto_table[rel->r_type], sizeof (howto));\n+      if (howto.bitsize != (rel->r_size & 0x3f) + 1)\n+\t{\n+\t  switch (rel->r_type)\n+\t    {\n+\t    case R_POS:\n+\t    case R_NEG:\n+\t      howto.bitsize = (rel->r_size & 0x3f) + 1;\n+\t      howto.size = howto.bitsize > 16 ? (howto.bitsize > 32 ? 4 : 2) : 1;\n+\t      howto.src_mask = howto.dst_mask = N_ONES (howto.bitsize);\n+\t      break;\n+\n+\t    default:\n+\t      _bfd_error_handler\n+\t\t(_(\"%pB: relocatation (%d) at (0x%\" BFD_VMA_FMT \"x) has wrong\"\n+\t\t   \" r_rsize (0x%x)\\n\"),\n+\t\t input_bfd, rel->r_type, rel->r_vaddr, rel->r_size);\n+\t      return FALSE;\n+\t    }\n+\t}\n+\n       howto.complain_on_overflow = (rel->r_size & 0x80\n \t\t\t\t    ? complain_overflow_signed\n \t\t\t\t    : complain_overflow_bitfield);\n-      howto.special_function = NULL;\n-      howto.name = \"internal\";\n-      howto.partial_inplace = TRUE;\n-      howto.src_mask = howto.dst_mask = N_ONES (howto.bitsize);\n-      howto.pcrel_offset = FALSE;\n \n       /* symbol */\n       val = 0;\n@@ -1394,7 +1448,7 @@ xcoff64_ppc_relocate_section (bfd *output_bfd,\n \t    {\n \t      if (info->unresolved_syms_in_objects != RM_IGNORE\n \t\t  && (h->flags & XCOFF_WAS_UNDEFINED) != 0)\n-                info->callbacks->undefined_symbol\n+\t\tinfo->callbacks->undefined_symbol\n \t\t  (info, h->root.root.string, input_bfd, input_section,\n \t\t   rel->r_vaddr - input_section->vma,\n \t\t   info->unresolved_syms_in_objects == RM_DIAGNOSE"
    },
    {
      "sha": "229e47c2ae14b219da32d2baf70fa39a0a803d48",
      "filename": "bfd/libxcoff.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1bef53dee85aede31e6de6fa8276d6869f6512/bfd/libxcoff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1bef53dee85aede31e6de6fa8276d6869f6512/bfd/libxcoff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libxcoff.h?ref=2c1bef53dee85aede31e6de6fa8276d6869f6512",
      "patch": "@@ -202,7 +202,7 @@ struct xcoff_backend_data_rec\n #define bfd_xcoff_data_align_power(a) ((xcoff_data (a)->data_align_power))\n \n /* xcoff*_ppc_relocate_section macros  */\n-#define XCOFF_MAX_CALCULATE_RELOCATION (0x1c)\n+#define XCOFF_MAX_CALCULATE_RELOCATION (0x32)\n #define XCOFF_MAX_COMPLAIN_OVERFLOW (4)\n /* N_ONES produces N one bits, without overflowing machine arithmetic.  */\n #ifdef N_ONES"
    },
    {
      "sha": "37460e7bcde0948c23c8df52d4ff46aafe6153be",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1bef53dee85aede31e6de6fa8276d6869f6512/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1bef53dee85aede31e6de6fa8276d6869f6512/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=2c1bef53dee85aede31e6de6fa8276d6869f6512",
      "patch": "@@ -1,3 +1,7 @@\n+2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* od-xcoff.c: Replace RTB by TRL entry.\n+\n 2021-03-05  Craig Blackmore  <craig.blackmore@embecosm.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n "
    },
    {
      "sha": "f0d566b190213c393af2494b5547d5373661d643",
      "filename": "binutils/od-xcoff.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1bef53dee85aede31e6de6fa8276d6869f6512/binutils/od-xcoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1bef53dee85aede31e6de6fa8276d6869f6512/binutils/od-xcoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/od-xcoff.c?ref=2c1bef53dee85aede31e6de6fa8276d6869f6512",
      "patch": "@@ -300,15 +300,14 @@ static const struct xlat_table rtype_xlat[] =\n     RTYPE_ENTRY (NEG),\n     RTYPE_ENTRY (REL),\n     RTYPE_ENTRY (TOC),\n-    RTYPE_ENTRY (RTB),\n+    RTYPE_ENTRY (TRL),\n     RTYPE_ENTRY (GL),\n     RTYPE_ENTRY (TCL),\n     RTYPE_ENTRY (BA),\n     RTYPE_ENTRY (BR),\n     RTYPE_ENTRY (RL),\n     RTYPE_ENTRY (RLA),\n     RTYPE_ENTRY (REF),\n-    RTYPE_ENTRY (TRL),\n     RTYPE_ENTRY (TRLA),\n     RTYPE_ENTRY (RRTBI),\n     RTYPE_ENTRY (RRTBA),"
    },
    {
      "sha": "c736323b63918912384b1d994b2558b2a35b537e",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1bef53dee85aede31e6de6fa8276d6869f6512/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1bef53dee85aede31e6de6fa8276d6869f6512/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=2c1bef53dee85aede31e6de6fa8276d6869f6512",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* coff/xcoff.h (R_RTB): Remove.\n+\t(R_TRL): Fix value.\n+\n 2021-03-05  Craig Blackmore  <craig.blackmore@embecosm.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n "
    },
    {
      "sha": "36651d4375dab3ca440721e28a29a4c72609dd31",
      "filename": "include/coff/xcoff.h",
      "status": "modified",
      "additions": 26,
      "deletions": 27,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c1bef53dee85aede31e6de6fa8276d6869f6512/include/coff/xcoff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c1bef53dee85aede31e6de6fa8276d6869f6512/include/coff/xcoff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/xcoff.h?ref=2c1bef53dee85aede31e6de6fa8276d6869f6512",
      "patch": "@@ -97,36 +97,35 @@\n    The relocations are described in the function  \n    xcoff[64]_ppc_relocate_section in coff64-rs6000.c and coff-rs6000.c  */\n \n-#define R_POS   (0x00)\n-#define R_NEG   (0x01)\n-#define R_REL   (0x02)\n-#define R_TOC   (0x03)\n-#define R_RTB   (0x04)\n-#define R_GL    (0x05)\n-#define R_TCL   (0x06)\n-#define R_BA    (0x08)\n-#define R_BR    (0x0a)\n-#define R_RL    (0x0c)\n-#define R_RLA   (0x0d)\n-#define R_REF   (0x0f)\n-#define R_TRL   (0x12)\n-#define R_TRLA  (0x13)\n-#define R_RRTBI (0x14)\n-#define R_RRTBA (0x15)\n-#define R_CAI   (0x16)\n-#define R_CREL  (0x17)\n-#define R_RBA   (0x18)\n-#define R_RBAC  (0x19)\n-#define R_RBR   (0x1a)\n-#define R_RBRC  (0x1b)\n-#define R_TLS   (0x20)\n+#define R_POS    (0x00)\n+#define R_NEG    (0x01)\n+#define R_REL    (0x02)\n+#define R_TOC    (0x03)\n+#define R_TRL    (0x04)\n+#define R_GL     (0x05)\n+#define R_TCL    (0x06)\n+#define R_BA     (0x08)\n+#define R_BR     (0x0a)\n+#define R_RL     (0x0c)\n+#define R_RLA    (0x0d)\n+#define R_REF    (0x0f)\n+#define R_TRLA   (0x13)\n+#define R_RRTBI  (0x14)\n+#define R_RRTBA  (0x15)\n+#define R_CAI    (0x16)\n+#define R_CREL   (0x17)\n+#define R_RBA    (0x18)\n+#define R_RBAC   (0x19)\n+#define R_RBR    (0x1a)\n+#define R_RBRC   (0x1b)\n+#define R_TLS    (0x20)\n #define R_TLS_IE (0x21)\n #define R_TLS_LD (0x22)\n #define R_TLS_LE (0x23)\n-#define R_TLSM  (0x24)\n-#define R_TLSML (0x25)\n-#define R_TOCU  (0x30)\n-#define R_TOCL  (0x31)\n+#define R_TLSM   (0x24)\n+#define R_TLSML  (0x25)\n+#define R_TOCU   (0x30)\n+#define R_TOCL   (0x31)\n \n /* Storage class #defines, from /usr/include/storclass.h that are not already \n    defined in internal.h */"
    }
  ]
}