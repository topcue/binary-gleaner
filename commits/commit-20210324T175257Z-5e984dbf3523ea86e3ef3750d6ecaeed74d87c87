{
  "sha": "5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWU5ODRkYmYzNTIzZWE4NmUzZWYzNzUwZDZlY2FlZWQ3NGQ4N2M4Nw==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-06-15T16:59:40Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-24T17:52:57Z"
    },
    "message": "AArch64: Add MTE register set support for GDB and gdbserver\n\nAArch64 MTE support in the Linux kernel exposes a new register\nthrough ptrace.  This patch adds the required code to support it.\n\ninclude/ChangeLog:\n\n2021-03-24  Luis Machado  <luis.machado@linaro.org>\n\n\t* elf/common.h (NT_ARM_TAGGED_ADDR_CTRL): Define.\n\ngdb/ChangeLog:\n\n2021-03-24  Luis Machado  <luis.machado@linaro.org>\n\n\t* aarch64-linux-nat.c (fetch_mteregs_from_thread): New function.\n\t(store_mteregs_to_thread): New function.\n\t(aarch64_linux_nat_target::fetch_registers): Update to call\n\tfetch_mteregs_from_thread.\n\t(aarch64_linux_nat_target::store_registers): Update to call\n\tstore_mteregs_to_thread.\n\t* aarch64-tdep.c (aarch64_mte_register_names): New struct.\n\t(aarch64_cannot_store_register): Handle MTE registers.\n\t(aarch64_gdbarch_init): Initialize and setup MTE registers.\n\t* aarch64-tdep.h (gdbarch_tdep) <mte_reg_base>: New field.\n\t<has_mte>: New method.\n\t* arch/aarch64-linux.h (AARCH64_LINUX_SIZEOF_MTE): Define.\n\ngdbserver/ChangeLog:\n\n2021-03-24  Luis Machado  <luis.machado@linaro.org>\n\n\t* linux-aarch64-low.cc (aarch64_fill_mteregset): New function.\n\t(aarch64_store_mteregset): New function.\n\t(aarch64_regsets): Add MTE register set entry.\n\t(aarch64_sve_regsets): Add MTE register set entry.",
    "tree": {
      "sha": "f6415f72ff6a9c4aae4905a2ad94b70e48b201eb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f6415f72ff6a9c4aae4905a2ad94b70e48b201eb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c1bd443b4d86e12f2a97856270e40df24c7f3df7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1bd443b4d86e12f2a97856270e40df24c7f3df7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c1bd443b4d86e12f2a97856270e40df24c7f3df7"
    }
  ],
  "stats": {
    "total": 158,
    "additions": 158,
    "deletions": 0
  },
  "files": [
    {
      "sha": "866623e168a4f41a86b07ef266298e601c132a4e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
      "patch": "@@ -1,3 +1,18 @@\n+2021-03-24  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* aarch64-linux-nat.c (fetch_mteregs_from_thread): New function.\n+\t(store_mteregs_to_thread): New function.\n+\t(aarch64_linux_nat_target::fetch_registers): Update to call\n+\tfetch_mteregs_from_thread.\n+\t(aarch64_linux_nat_target::store_registers): Update to call\n+\tstore_mteregs_to_thread.\n+\t* aarch64-tdep.c (aarch64_mte_register_names): New struct.\n+\t(aarch64_cannot_store_register): Handle MTE registers.\n+\t(aarch64_gdbarch_init): Initialize and setup MTE registers.\n+\t* aarch64-tdep.h (gdbarch_tdep) <mte_reg_base>: New field.\n+\t<has_mte>: New method.\n+\t* arch/aarch64-linux.h (AARCH64_LINUX_SIZEOF_MTE): Define.\n+\n 2021-03-24  Luis Machado  <luis.machado@linaro.org>\n \n \t* aarch64-linux-nat.c"
    },
    {
      "sha": "fe3ba44c5534dac421f5f030ab853975eb37d816",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
      "patch": "@@ -461,6 +461,58 @@ fetch_pauth_masks_from_thread (struct regcache *regcache)\n \t\t\t&pauth_regset[1]);\n }\n \n+/* Fill GDB's register array with the MTE register values from\n+   the current thread.  */\n+\n+static void\n+fetch_mteregs_from_thread (struct regcache *regcache)\n+{\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  int regno = tdep->mte_reg_base;\n+\n+  gdb_assert (regno != -1);\n+\n+  uint64_t tag_ctl = 0;\n+  struct iovec iovec;\n+\n+  iovec.iov_base = &tag_ctl;\n+  iovec.iov_len = sizeof (tag_ctl);\n+\n+  int tid = get_ptrace_pid (regcache->ptid ());\n+  if (ptrace (PTRACE_GETREGSET, tid, NT_ARM_TAGGED_ADDR_CTRL, &iovec) != 0)\n+      perror_with_name (_(\"unable to fetch MTE registers.\"));\n+\n+  regcache->raw_supply (regno, &tag_ctl);\n+}\n+\n+/* Store to the current thread the valid MTE register set in the GDB's\n+   register array.  */\n+\n+static void\n+store_mteregs_to_thread (struct regcache *regcache)\n+{\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  int regno = tdep->mte_reg_base;\n+\n+  gdb_assert (regno != -1);\n+\n+  uint64_t tag_ctl = 0;\n+\n+  if (REG_VALID != regcache->get_register_status (regno))\n+    return;\n+\n+  regcache->raw_collect (regno, (char *) &tag_ctl);\n+\n+  struct iovec iovec;\n+\n+  iovec.iov_base = &tag_ctl;\n+  iovec.iov_len = sizeof (tag_ctl);\n+\n+  int tid = get_ptrace_pid (regcache->ptid ());\n+  if (ptrace (PTRACE_SETREGSET, tid, NT_ARM_TAGGED_ADDR_CTRL, &iovec) != 0)\n+    perror_with_name (_(\"unable to store MTE registers.\"));\n+}\n+\n /* Implement the \"fetch_registers\" target_ops method.  */\n \n void\n@@ -479,6 +531,9 @@ aarch64_linux_nat_target::fetch_registers (struct regcache *regcache,\n \n       if (tdep->has_pauth ())\n \tfetch_pauth_masks_from_thread (regcache);\n+\n+      if (tdep->has_mte ())\n+\tfetch_mteregs_from_thread (regcache);\n     }\n   else if (regno < AARCH64_V0_REGNUM)\n     fetch_gregs_from_thread (regcache);\n@@ -493,6 +548,11 @@ aarch64_linux_nat_target::fetch_registers (struct regcache *regcache,\n \t  || regno == AARCH64_PAUTH_CMASK_REGNUM (tdep->pauth_reg_base))\n \tfetch_pauth_masks_from_thread (regcache);\n     }\n+\n+  /* Fetch individual MTE registers.  */\n+  if (tdep->has_mte ()\n+      && (regno == tdep->mte_reg_base))\n+    fetch_mteregs_from_thread (regcache);\n }\n \n /* Implement the \"store_registers\" target_ops method.  */\n@@ -510,13 +570,21 @@ aarch64_linux_nat_target::store_registers (struct regcache *regcache,\n \tstore_sveregs_to_thread (regcache);\n       else\n \tstore_fpregs_to_thread (regcache);\n+\n+      if (tdep->has_mte ())\n+\tstore_mteregs_to_thread (regcache);\n     }\n   else if (regno < AARCH64_V0_REGNUM)\n     store_gregs_to_thread (regcache);\n   else if (tdep->has_sve ())\n     store_sveregs_to_thread (regcache);\n   else\n     store_fpregs_to_thread (regcache);\n+\n+  /* Store MTE registers.  */\n+  if (tdep->has_mte ()\n+      && (regno == tdep->mte_reg_base))\n+    store_mteregs_to_thread (regcache);\n }\n \n /* Fill register REGNO (if it is a general-purpose register) in"
    },
    {
      "sha": "44833eb94d3387784942614c1b7bedac28161c52",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
      "patch": "@@ -172,6 +172,12 @@ static const char *const aarch64_pauth_register_names[] =\n   \"pauth_cmask\"\n };\n \n+static const char *const aarch64_mte_register_names[] =\n+{\n+  /* Tag Control Register.  */\n+  \"tag_ctl\"\n+};\n+\n /* AArch64 prologue cache structure.  */\n struct aarch64_prologue_cache\n {\n@@ -3346,6 +3352,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   bool valid_p = true;\n   int i, num_regs = 0, num_pseudo_regs = 0;\n   int first_pauth_regnum = -1, pauth_ra_state_offset = -1;\n+  int first_mte_regnum = -1;\n \n   /* Use the vector length passed via the target info.  Here -1 is used for no\n      SVE, and 0 is unset.  If unset then use the vector length from the existing\n@@ -3383,6 +3390,8 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   feature_fpu = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.fpu\");\n   feature_sve = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.sve\");\n   feature_pauth = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.pauth\");\n+  const struct tdesc_feature *feature_mte\n+    = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.mte\");\n \n   if (feature_core == nullptr)\n     return nullptr;\n@@ -3453,6 +3462,20 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n       num_pseudo_regs += 1;\t/* Count RA_STATE pseudo register.  */\n     }\n \n+  /* Add the MTE registers.  */\n+  if (feature_mte != NULL)\n+    {\n+      first_mte_regnum = num_regs;\n+      /* Validate the descriptor provides the mandatory MTE registers and\n+\t allocate their numbers.  */\n+      for (i = 0; i < ARRAY_SIZE (aarch64_mte_register_names); i++)\n+\tvalid_p &= tdesc_numbered_register (feature_mte, tdesc_data.get (),\n+\t\t\t\t\t    first_mte_regnum + i,\n+\t\t\t\t\t    aarch64_mte_register_names[i]);\n+\n+      num_regs += i;\n+    }\n+\n   if (!valid_p)\n     return nullptr;\n \n@@ -3470,6 +3493,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   tdep->pauth_reg_base = first_pauth_regnum;\n   tdep->pauth_ra_state_regnum = (feature_pauth == NULL) ? -1\n \t\t\t\t: pauth_ra_state_offset + num_regs;\n+  tdep->mte_reg_base = first_mte_regnum;\n \n   set_gdbarch_push_dummy_call (gdbarch, aarch64_push_dummy_call);\n   set_gdbarch_frame_align (gdbarch, aarch64_frame_align);"
    },
    {
      "sha": "7bf612b012aff9138fce27ead35312a8477f8a98",
      "filename": "gdb/aarch64-tdep.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdb/aarch64-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdb/aarch64-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.h?ref=5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
      "patch": "@@ -100,6 +100,15 @@ struct gdbarch_tdep\n   {\n     return pauth_reg_base != -1;\n   }\n+\n+  /* First MTE register.  This is -1 if no MTE registers are available.  */\n+  int mte_reg_base;\n+\n+  /* Returns true if the target supports MTE.  */\n+  bool has_mte () const\n+  {\n+    return mte_reg_base != -1;\n+  }\n };\n \n const target_desc *aarch64_read_description (uint64_t vq, bool pauth_p,"
    },
    {
      "sha": "7c259b8a4a43f4549b649b707f3dc57c84709db4",
      "filename": "gdb/arch/aarch64-mte-linux.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdb/arch/aarch64-mte-linux.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdb/arch/aarch64-mte-linux.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64-mte-linux.h?ref=5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
      "patch": "@@ -25,4 +25,7 @@\n #define HWCAP2_MTE  (1 << 18)\n #endif\n \n+/* The MTE regset consists of a single 64-bit register.  */\n+#define AARCH64_LINUX_SIZEOF_MTE 8\n+\n #endif /* ARCH_AARCH64_LINUX_H */"
    },
    {
      "sha": "d4b8d80d393489c31b9d6f0b812f51322dd3b867",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-24  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* linux-aarch64-low.cc (aarch64_fill_mteregset): New function.\n+\t(aarch64_store_mteregset): New function.\n+\t(aarch64_regsets): Add MTE register set entry.\n+\t(aarch64_sve_regsets): Add MTE register set entry.\n+\n 2021-03-24  Luis Machado  <luis.machado@linaro.org>\n \n \t* linux-aarch64-ipa.cc (get_ipa_tdesc): Update call to"
    },
    {
      "sha": "a066d963a5f03e57d2d44cd49fe620fad297dcb0",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
      "patch": "@@ -261,6 +261,29 @@ aarch64_store_pauthregset (struct regcache *regcache, const void *buf)\n \t\t   &pauth_regset[1]);\n }\n \n+/* Fill BUF with the MTE registers from the regcache.  */\n+\n+static void\n+aarch64_fill_mteregset (struct regcache *regcache, void *buf)\n+{\n+  uint64_t *mte_regset = (uint64_t *) buf;\n+  int mte_base = find_regno (regcache->tdesc, \"tag_ctl\");\n+\n+  collect_register (regcache, mte_base, mte_regset);\n+}\n+\n+/* Store the MTE registers to regcache.  */\n+\n+static void\n+aarch64_store_mteregset (struct regcache *regcache, const void *buf)\n+{\n+  uint64_t *mte_regset = (uint64_t *) buf;\n+  int mte_base = find_regno (regcache->tdesc, \"tag_ctl\");\n+\n+  /* Tag Control register */\n+  supply_register (regcache, mte_base, mte_regset);\n+}\n+\n bool\n aarch64_target::low_supports_breakpoints ()\n {\n@@ -706,6 +729,9 @@ static struct regset_info aarch64_regsets[] =\n   { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_ARM_PAC_MASK,\n     AARCH64_PAUTH_REGS_SIZE, OPTIONAL_REGS,\n     NULL, aarch64_store_pauthregset },\n+  { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_ARM_TAGGED_ADDR_CTRL,\n+    AARCH64_LINUX_SIZEOF_MTE, OPTIONAL_REGS, aarch64_fill_mteregset,\n+    aarch64_store_mteregset },\n   NULL_REGSET\n };\n \n@@ -735,6 +761,9 @@ static struct regset_info aarch64_sve_regsets[] =\n   { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_ARM_PAC_MASK,\n     AARCH64_PAUTH_REGS_SIZE, OPTIONAL_REGS,\n     NULL, aarch64_store_pauthregset },\n+  { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_ARM_TAGGED_ADDR_CTRL,\n+    AARCH64_LINUX_SIZEOF_MTE, OPTIONAL_REGS, aarch64_fill_mteregset,\n+    aarch64_store_mteregset },\n   NULL_REGSET\n };\n "
    },
    {
      "sha": "f36bb0b80a292a99b36e939d9d16406900733a00",
      "filename": "include/elf/common.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/include/elf/common.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e984dbf3523ea86e3ef3750d6ecaeed74d87c87/include/elf/common.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/common.h?ref=5e984dbf3523ea86e3ef3750d6ecaeed74d87c87",
      "patch": "@@ -672,6 +672,9 @@\n \t\t\t\t\t/*   note name must be \"LINUX\".  */\n #define NT_ARM_PAC_MASK\t0x406\t\t/* AArch pointer authentication code masks */\n \t\t\t\t\t/*   note name must be \"LINUX\".  */\n+#define NT_ARM_TAGGED_ADDR_CTRL\t0x409\t/* AArch64 tagged address control\n+\t\t\t\t\t   (prctl()) */\n+\t\t\t\t\t/*   note name must be \"LINUX\".  */\n #define NT_ARC_V2\t0x600\t\t/* ARC HS accumulator/extra registers.  */\n \t\t\t\t\t/*   note name must be \"LINUX\".  */\n #define NT_RISCV_CSR    0x900\t\t/* RISC-V Control and Status Registers */"
    }
  ]
}