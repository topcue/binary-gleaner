{
  "sha": "d9743061f92738a6c3f311d640e614a5a2f01b1e",
  "node_id": "C_kwDOANOeidoAKGQ5NzQzMDYxZjkyNzM4YTZjM2YzMTFkNjQwZTYxNGE1YTJmMDFiMWU",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2022-01-28T03:06:47Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2022-02-06T21:03:46Z"
    },
    "message": "gdb: remove SYMBOL_IS_ARGUMENT macro\n\nAdd a getter and a setter for whether a symbol is an argument.  Remove\nthe corresponding macro and adjust all callers.\n\nChange-Id: I71b4f0465f3dfd2ed8b9e140bd3f7d5eb8d9ee81",
    "tree": {
      "sha": "526c9f1911ab21c38bcee992174f7a7457bba773",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/526c9f1911ab21c38bcee992174f7a7457bba773"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d9743061f92738a6c3f311d640e614a5a2f01b1e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9743061f92738a6c3f311d640e614a5a2f01b1e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d9743061f92738a6c3f311d640e614a5a2f01b1e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9743061f92738a6c3f311d640e614a5a2f01b1e/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7b3ecc7555438f05dda657d0ed6a43ee71a3901d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b3ecc7555438f05dda657d0ed6a43ee71a3901d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7b3ecc7555438f05dda657d0ed6a43ee71a3901d"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 49,
    "deletions": 40
  },
  "files": [
    {
      "sha": "636ae906250bbc124ddfbfbde46e48476998f36a",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -5053,7 +5053,7 @@ match_data::operator() (struct block_symbol *bsym)\n     {\n       if (sym->aclass () == LOC_UNRESOLVED)\n \treturn true;\n-      else if (SYMBOL_IS_ARGUMENT (sym))\n+      else if (sym->is_argument ())\n \targ_sym = sym;\n       else\n \t{\n@@ -5744,7 +5744,7 @@ ada_add_block_symbols (std::vector<struct block_symbol> &result,\n \t{\n \t  if (sym->aclass () != LOC_UNRESOLVED)\n \t    {\n-\t      if (SYMBOL_IS_ARGUMENT (sym))\n+\t      if (sym->is_argument ())\n \t\targ_sym = sym;\n \t      else\n \t\t{\n@@ -5798,7 +5798,7 @@ ada_add_block_symbols (std::vector<struct block_symbol> &result,\n \t      {\n \t\tif (sym->aclass () != LOC_UNRESOLVED)\n \t\t  {\n-\t\t    if (SYMBOL_IS_ARGUMENT (sym))\n+\t\t    if (sym->is_argument ())\n \t\t      arg_sym = sym;\n \t\t    else\n \t\t      {"
    },
    {
      "sha": "f7532120286bbd601184c39c16967a3318daddda",
      "filename": "gdb/block.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -753,7 +753,7 @@ block_lookup_symbol (const struct block *block, const char *name,\n \t\t\t\t     sym->domain (), domain))\n \t    {\n \t      sym_found = sym;\n-\t      if (!SYMBOL_IS_ARGUMENT (sym))\n+\t      if (!sym->is_argument ())\n \t\t{\n \t\t  break;\n \t\t}"
    },
    {
      "sha": "51764a67040c58188fee49ba842f29492a61263b",
      "filename": "gdb/buildsym.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/buildsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/buildsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -266,7 +266,7 @@ buildsym_compunit::finish_block_internal\n \t     we haven't fully initialized the block yet.  */\n \t  ALL_DICT_SYMBOLS (BLOCK_MULTIDICT (block), miter, sym)\n \t    {\n-\t      if (SYMBOL_IS_ARGUMENT (sym))\n+\t      if (sym->is_argument ())\n \t\tnparams++;\n \t    }\n \t  if (nparams > 0)\n@@ -284,7 +284,7 @@ buildsym_compunit::finish_block_internal\n \t\t  if (iparams == nparams)\n \t\t    break;\n \n-\t\t  if (SYMBOL_IS_ARGUMENT (sym))\n+\t\t  if (sym->is_argument ())\n \t\t    {\n \t\t      ftype->field (iparams).set_type (SYMBOL_TYPE (sym));\n \t\t      TYPE_FIELD_ARTIFICIAL (ftype, iparams) = 0;"
    },
    {
      "sha": "6d4cb475bd1996be2defa16cb71f835d6caed455",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -1102,7 +1102,7 @@ block\t:\tblock COLONCOLON name\n variable:\tname_not_typename ENTRY\n \t\t\t{ struct symbol *sym = $1.sym.symbol;\n \n-\t\t\t  if (sym == NULL || !SYMBOL_IS_ARGUMENT (sym)\n+\t\t\t  if (sym == NULL || !sym->is_argument ()\n \t\t\t      || !symbol_read_needs_frame (sym))\n \t\t\t    error (_(\"@entry can be used only for function \"\n \t\t\t\t     \"parameters, not for \\\"%s\\\"\"),"
    },
    {
      "sha": "e4db4fdb02f6cf0d49e7104b8f254a86101277de",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -1640,13 +1640,13 @@ process_coff_symbol (struct coff_symbol *cs,\n \n \tcase C_ARG:\n \t  sym->set_aclass_index (LOC_ARG);\n-\t  SYMBOL_IS_ARGUMENT (sym) = 1;\n+\t  sym->set_is_argument (1);\n \t  add_symbol_to_list (sym, get_local_symbols ());\n \t  break;\n \n \tcase C_REGPARM:\n \t  sym->set_aclass_index (coff_register_index);\n-\t  SYMBOL_IS_ARGUMENT (sym) = 1;\n+\t  sym->set_is_argument (1);\n \t  SYMBOL_VALUE (sym) = cs->c_value;\n \t  add_symbol_to_list (sym, get_local_symbols ());\n \t  break;"
    },
    {
      "sha": "259401fbbb70d2c761dcf9a9d8dcabbd48a55fac",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -21934,7 +21934,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t    struct context_stack *curr\n \t      = cu->get_builder ()->get_current_context_stack ();\n \t    if (curr != nullptr && curr->name != nullptr)\n-\t      SYMBOL_IS_ARGUMENT (sym) = 1;\n+\t      sym->set_is_argument (1);\n \t    attr = dwarf2_attr (die, DW_AT_location, cu);\n \t    if (attr != nullptr)\n \t      {"
    },
    {
      "sha": "fed7fe531f982e1b7afa21ce9fc207da15f68034",
      "filename": "gdb/go-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/go-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/go-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-exp.y?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -545,7 +545,7 @@ variable:\tname_not_typename ENTRY\n \t\t\t{ struct symbol *sym = $1.sym.symbol;\n \n \t\t\t  if (sym == NULL\n-\t\t\t      || !SYMBOL_IS_ARGUMENT (sym)\n+\t\t\t      || !sym->is_argument ()\n \t\t\t      || !symbol_read_needs_frame (sym))\n \t\t\t    error (_(\"@entry can be used only for function \"\n \t\t\t\t     \"parameters, not for \\\"%s\\\"\"),"
    },
    {
      "sha": "32ef3361941ab6070ddc88feaaef9d52cd8a5ba8",
      "filename": "gdb/guile/scm-symbol.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/guile/scm-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/guile/scm-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-symbol.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -424,7 +424,7 @@ gdbscm_symbol_argument_p (SCM self)\n     = syscm_get_valid_symbol_smob_arg_unsafe (self, SCM_ARG1, FUNC_NAME);\n   const struct symbol *symbol = s_smob->symbol;\n \n-  return scm_from_bool (SYMBOL_IS_ARGUMENT (symbol));\n+  return scm_from_bool (symbol->is_argument ());\n }\n \n /* (symbol-constant? <gdb:symbol>) -> boolean */\n@@ -469,7 +469,7 @@ gdbscm_symbol_variable_p (SCM self)\n \n   theclass = symbol->aclass ();\n \n-  return scm_from_bool (!SYMBOL_IS_ARGUMENT (symbol)\n+  return scm_from_bool (!symbol->is_argument ()\n \t\t\t&& (theclass == LOC_LOCAL || theclass == LOC_REGISTER\n \t\t\t    || theclass == LOC_STATIC || theclass == LOC_COMPUTED\n \t\t\t    || theclass == LOC_OPTIMIZED_OUT));"
    },
    {
      "sha": "f9420d549907e790eb473c3ad973a5aa8134106c",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -7935,7 +7935,7 @@ check_exception_resume (struct execution_control_state *ecs,\n       b = SYMBOL_BLOCK_VALUE (func);\n       ALL_BLOCK_SYMBOLS (b, iter, sym)\n \t{\n-\t  if (!SYMBOL_IS_ARGUMENT (sym))\n+\t  if (!sym->is_argument ())\n \t    continue;\n \n \t  if (argno == 0)"
    },
    {
      "sha": "a295878b625aeaae3856669ecf98b09f13e20847",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -676,7 +676,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n       s = new_symbol (name);\n \n       s->set_domain (VAR_DOMAIN);\n-      SYMBOL_IS_ARGUMENT (s) = 1;\n+      s->set_is_argument (1);\n       switch (sh->sc)\n \t{\n \tcase scRegister:\n@@ -1202,7 +1202,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t\t      if (iparams == nparams)\n \t\t\tbreak;\n \n-\t\t      if (SYMBOL_IS_ARGUMENT (sym))\n+\t\t      if (sym->is_argument ())\n \t\t\t{\n \t\t\t  ftype->field (iparams).set_type (SYMBOL_TYPE (sym));\n \t\t\t  TYPE_FIELD_ARTIFICIAL (ftype, iparams) = 0;"
    },
    {
      "sha": "ed22f3435e0f80bffa879084c67c0ec781c5f5f8",
      "filename": "gdb/mi/mi-cmd-stack.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/mi/mi-cmd-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/mi/mi-cmd-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-stack.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -520,7 +520,7 @@ list_arg_or_local (const struct frame_arg *arg, enum what_to_list what,\n     stb.puts (\"@entry\");\n   uiout->field_stream (\"name\", stb);\n \n-  if (what == all && SYMBOL_IS_ARGUMENT (arg->sym))\n+  if (what == all && arg->sym->is_argument ())\n     uiout->field_signed (\"arg\", 1);\n \n   if (values == PRINT_SIMPLE_VALUES)\n@@ -623,17 +623,17 @@ list_args_or_locals (const frame_print_options &fp_opts,\n \t      if (what == all)\n \t\tprint_me = 1;\n \t      else if (what == locals)\n-\t\tprint_me = !SYMBOL_IS_ARGUMENT (sym);\n+\t\tprint_me = !sym->is_argument ();\n \t      else\n-\t\tprint_me = SYMBOL_IS_ARGUMENT (sym);\n+\t\tprint_me = sym->is_argument ();\n \t      break;\n \t    }\n \t  if (print_me)\n \t    {\n \t      struct symbol *sym2;\n \t      struct frame_arg arg, entryarg;\n \n-\t      if (SYMBOL_IS_ARGUMENT (sym))\n+\t      if (sym->is_argument ())\n \t\tsym2 = lookup_symbol_search_name (sym->search_name (),\n \t\t\t\t\t\t  block, VAR_DOMAIN).symbol;\n \t      else\n@@ -654,7 +654,7 @@ list_args_or_locals (const frame_print_options &fp_opts,\n \t\t      && type->code () != TYPE_CODE_UNION)\n \t\t    {\n \t\tcase PRINT_ALL_VALUES:\n-\t\t  if (SYMBOL_IS_ARGUMENT (sym))\n+\t\t  if (sym->is_argument ())\n \t\t    read_frame_arg (fp_opts, sym2, fi, &arg, &entryarg);\n \t\t  else\n \t\t    read_frame_local (sym2, fi, &arg);"
    },
    {
      "sha": "6f9be820b0cfa6e9327c7543b5561d6db23f1d16",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -1735,7 +1735,7 @@ info_address_command (const char *exp, int from_tty)\n \t in that objfile.  */\n       regno = SYMBOL_REGISTER_OPS (sym)->register_number (sym, gdbarch);\n \n-      if (SYMBOL_IS_ARGUMENT (sym))\n+      if (sym->is_argument ())\n \tprintf_filtered (_(\"an argument in register %s\"),\n \t\t\t gdbarch_register_name (gdbarch, regno));\n       else"
    },
    {
      "sha": "e6eb1ec8cdf1897dd0825894e759009b8ea86c03",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -191,9 +191,9 @@ mi_should_print (struct symbol *sym, enum mi_print_types type)\n     case LOC_REGISTER:\t/* register              */\n     case LOC_COMPUTED:\t/* computed location     */\n       if (type == MI_PRINT_LOCALS)\n-\tprint_me = ! SYMBOL_IS_ARGUMENT (sym);\n+\tprint_me = ! sym->is_argument ();\n       else\n-\tprint_me = SYMBOL_IS_ARGUMENT (sym);\n+\tprint_me = sym->is_argument ();\n     }\n   return print_me;\n }"
    },
    {
      "sha": "c756870adb6cef98cae282f9762d1d9874683de8",
      "filename": "gdb/python/py-symbol.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/python/py-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/python/py-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symbol.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -141,7 +141,7 @@ sympy_is_argument (PyObject *self, void *closure)\n \n   SYMPY_REQUIRE_VALID (self, symbol);\n \n-  return PyBool_FromLong (SYMBOL_IS_ARGUMENT (symbol));\n+  return PyBool_FromLong (symbol->is_argument ());\n }\n \n static PyObject *\n@@ -180,7 +180,7 @@ sympy_is_variable (PyObject *self, void *closure)\n \n   theclass = symbol->aclass ();\n \n-  return PyBool_FromLong (!SYMBOL_IS_ARGUMENT (symbol)\n+  return PyBool_FromLong (!symbol->is_argument ()\n \t\t\t  && (theclass == LOC_LOCAL || theclass == LOC_REGISTER\n \t\t\t      || theclass == LOC_STATIC || theclass == LOC_COMPUTED\n \t\t\t      || theclass == LOC_OPTIMIZED_OUT));"
    },
    {
      "sha": "33fcc9263f7eb473665b4860a6f341962c43f8e4",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -1067,7 +1067,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       sym->set_aclass_index (LOC_ARG);\n       SYMBOL_VALUE (sym) = valu;\n       sym->set_domain (VAR_DOMAIN);\n-      SYMBOL_IS_ARGUMENT (sym) = 1;\n+      sym->set_is_argument (1);\n       add_symbol_to_list (sym, get_local_symbols ());\n \n       if (gdbarch_byte_order (gdbarch) != BFD_ENDIAN_BIG)\n@@ -1114,7 +1114,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       /* Parameter which is in a register.  */\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (stab_register_index);\n-      SYMBOL_IS_ARGUMENT (sym) = 1;\n+      sym->set_is_argument (1);\n       SYMBOL_VALUE (sym) = valu;\n       sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_local_symbols ());\n@@ -1352,7 +1352,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       /* Reference parameter */\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (LOC_REF_ARG);\n-      SYMBOL_IS_ARGUMENT (sym) = 1;\n+      sym->set_is_argument (1);\n       SYMBOL_VALUE (sym) = valu;\n       sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_local_symbols ());\n@@ -1362,7 +1362,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       /* Reference parameter which is in a register.  */\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (stab_regparm_index);\n-      SYMBOL_IS_ARGUMENT (sym) = 1;\n+      sym->set_is_argument (1);\n       SYMBOL_VALUE (sym) = valu;\n       sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_local_symbols ());\n@@ -1394,7 +1394,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n      register or on the stack) instead of the structure itself.  */\n \n   if (gdbarch_stabs_argument_has_addr (gdbarch, SYMBOL_TYPE (sym))\n-      && SYMBOL_IS_ARGUMENT (sym))\n+      && sym->is_argument ())\n     {\n       /* We have to convert LOC_REGISTER to LOC_REGPARM_ADDR (for\n \t variables passed in a register).  */"
    },
    {
      "sha": "834e016ef937e0a5f9a8fdd538ba34f049c703a2",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -763,7 +763,7 @@ print_frame_args (const frame_print_options &fp_opts,\n \t  /* Keep track of the highest stack argument offset seen, and\n \t     skip over any kinds of symbols we don't care about.  */\n \n-\t  if (!SYMBOL_IS_ARGUMENT (sym))\n+\t  if (!sym->is_argument ())\n \t    continue;\n \n \t  if (!print_names)\n@@ -829,7 +829,7 @@ print_frame_args (const frame_print_options &fp_opts,\n \t\t\t\t\t\tb, VAR_DOMAIN).symbol;\n \t      gdb_assert (nsym != NULL);\n \t      if (nsym->aclass () == LOC_REGISTER\n-\t\t  && !SYMBOL_IS_ARGUMENT (nsym))\n+\t\t  && !nsym->is_argument ())\n \t\t{\n \t\t  /* There is a LOC_ARG/LOC_REGISTER pair.  This means\n \t\t     that it was passed on the stack and loaded into a\n@@ -2256,7 +2256,7 @@ iterate_over_block_locals (const struct block *b,\n \tcase LOC_STATIC:\n \tcase LOC_COMPUTED:\n \tcase LOC_OPTIMIZED_OUT:\n-\t  if (SYMBOL_IS_ARGUMENT (sym))\n+\t  if (sym->is_argument ())\n \t    break;\n \t  if (sym->domain () == COMMON_BLOCK_DOMAIN)\n \t    break;\n@@ -2503,7 +2503,7 @@ iterate_over_block_arg_vars (const struct block *b,\n   ALL_BLOCK_SYMBOLS (b, iter, sym)\n     {\n       /* Don't worry about things which aren't arguments.  */\n-      if (SYMBOL_IS_ARGUMENT (sym))\n+      if (sym->is_argument ())\n \t{\n \t  /* We have to look up the symbol because arguments can have\n \t     two entries (one a parameter, one a local) and the one we"
    },
    {
      "sha": "328230afe3ad59f1236db0eadd458f3a72243985",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -589,7 +589,7 @@ print_symbol (struct gdbarch *gdbarch, struct symbol *symbol,\n \t  break;\n \n \tcase LOC_REGISTER:\n-\t  if (SYMBOL_IS_ARGUMENT (symbol))\n+\t  if (symbol->is_argument ())\n \t    fprintf_filtered (outfile, \"parameter register %s\",\n \t\t\t      plongest (SYMBOL_VALUE (symbol)));\n \t  else"
    },
    {
      "sha": "f565f1258248d1f69891bd6df96bf6787763b5ae",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -1116,7 +1116,7 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n     : m_domain (UNDEF_DOMAIN),\n       m_aclass_index (0),\n       m_is_objfile_owned (1),\n-      is_argument (0),\n+      m_is_argument (0),\n       is_inlined (0),\n       maybe_copied (0),\n       subclass (SYMBOL_NONE),\n@@ -1178,6 +1178,16 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n     m_is_objfile_owned = is_objfile_owned;\n   }\n \n+  bool is_argument () const\n+  {\n+    return m_is_argument;\n+  }\n+\n+  void set_is_argument (bool is_argument)\n+  {\n+    m_is_argument = is_argument;\n+  }\n+\n   /* Data type of value */\n \n   struct type *type = nullptr;\n@@ -1213,7 +1223,7 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n \n   /* Whether this is an argument.  */\n \n-  unsigned is_argument : 1;\n+  unsigned m_is_argument : 1;\n \n   /* Whether this is an inlined function (class LOC_BLOCK only).  */\n   unsigned is_inlined : 1;\n@@ -1280,7 +1290,6 @@ struct block_symbol\n /* Note: There is no accessor macro for symbol.owner because it is\n    \"private\".  */\n \n-#define SYMBOL_IS_ARGUMENT(symbol)\t(symbol)->is_argument\n #define SYMBOL_INLINED(symbol)\t\t(symbol)->is_inlined\n #define SYMBOL_IS_CPLUS_TEMPLATE_FUNCTION(symbol) \\\n   (((symbol)->subclass) == SYMBOL_TEMPLATE)"
    },
    {
      "sha": "d8577dc4518bfe16fd305cee6c4b24b0f8484c11",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9743061f92738a6c3f311d640e614a5a2f01b1e/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=d9743061f92738a6c3f311d640e614a5a2f01b1e",
      "patch": "@@ -2586,7 +2586,7 @@ info_scope_command (const char *args_in, int from_tty)\n \t\t  regno = SYMBOL_REGISTER_OPS (sym)->register_number (sym,\n \t\t\t\t\t\t\t\t      gdbarch);\n \n-\t\t  if (SYMBOL_IS_ARGUMENT (sym))\n+\t\t  if (sym->is_argument ())\n \t\t    printf_filtered (\"an argument in register $%s\",\n \t\t\t\t     gdbarch_register_name (gdbarch, regno));\n \t\t  else"
    }
  ]
}