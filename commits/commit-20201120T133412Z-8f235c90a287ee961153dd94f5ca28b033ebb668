{
  "sha": "8f235c90a287ee961153dd94f5ca28b033ebb668",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGYyMzVjOTBhMjg3ZWU5NjExNTNkZDk0ZjVjYTI4YjAzM2ViYjY2OA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-11-20T13:34:04Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-11-20T13:34:12Z"
    },
    "message": "libctf: error-handling fixes\n\nlibctf/ChangeLog\n2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-create.c (ctf_dtd_insert): Set ENOMEM on the dict if out of memory.\n\t(ctf_dvd_insert): Likewise.\n\t(ctf_add_function): Report ECTF_RDONLY if this dict is not writable.\n\t* ctf-subr.c (ctf_err_warn): Only debug-dump passed-in warnings if\n\tthe passed-in error code is nonzero: the error on the dict for\n\twarnings may relate to a previous error.",
    "tree": {
      "sha": "d43c3ab0cf3fae2b62081fa92e1c3f534efdf205",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d43c3ab0cf3fae2b62081fa92e1c3f534efdf205"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8f235c90a287ee961153dd94f5ca28b033ebb668",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f235c90a287ee961153dd94f5ca28b033ebb668",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8f235c90a287ee961153dd94f5ca28b033ebb668",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f235c90a287ee961153dd94f5ca28b033ebb668/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "97a2a623d0193dbfc92d92545b63aaffd6099272",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97a2a623d0193dbfc92d92545b63aaffd6099272",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/97a2a623d0193dbfc92d92545b63aaffd6099272"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 25,
    "deletions": 4
  },
  "files": [
    {
      "sha": "0a8da127616f5ab0d25266473f1de29f264670e7",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f235c90a287ee961153dd94f5ca28b033ebb668/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f235c90a287ee961153dd94f5ca28b033ebb668/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=8f235c90a287ee961153dd94f5ca28b033ebb668",
      "patch": "@@ -1,3 +1,12 @@\n+2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-create.c (ctf_dtd_insert): Set ENOMEM on the dict if out of memory.\n+\t(ctf_dvd_insert): Likewise.\n+\t(ctf_add_function): Report ECTF_RDONLY if this dict is not writable.\n+\t* ctf-subr.c (ctf_err_warn): Only debug-dump passed-in warnings if\n+\tthe passed-in error code is nonzero: the error on the dict for\n+\twarnings may relate to a previous error.\n+\n 2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-open.c (ctf_getsymsect): New."
    },
    {
      "sha": "c3223a72ac4ba036355ec9b26e2ce7d780a7dab8",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f235c90a287ee961153dd94f5ca28b033ebb668/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f235c90a287ee961153dd94f5ca28b033ebb668/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=8f235c90a287ee961153dd94f5ca28b033ebb668",
      "patch": "@@ -1257,7 +1257,10 @@ ctf_dtd_insert (ctf_dict_t *fp, ctf_dtdef_t *dtd, int flag, int kind)\n   const char *name;\n   if (ctf_dynhash_insert (fp->ctf_dthash, (void *) (uintptr_t) dtd->dtd_type,\n \t\t\t  dtd) < 0)\n-    return -1;\n+    {\n+      ctf_set_errno (fp, ENOMEM);\n+      return -1;\n+    }\n \n   if (flag == CTF_ADD_ROOT && dtd->dtd_data.ctt_name\n       && (name = ctf_strraw (fp, dtd->dtd_data.ctt_name)) != NULL)\n@@ -1268,6 +1271,7 @@ ctf_dtd_insert (ctf_dict_t *fp, ctf_dtdef_t *dtd, int flag, int kind)\n \t{\n \t  ctf_dynhash_remove (fp->ctf_dthash, (void *) (uintptr_t)\n \t\t\t      dtd->dtd_type);\n+\t  ctf_set_errno (fp, ENOMEM);\n \t  return -1;\n \t}\n     }\n@@ -1349,7 +1353,10 @@ int\n ctf_dvd_insert (ctf_dict_t *fp, ctf_dvdef_t *dvd)\n {\n   if (ctf_dynhash_insert (fp->ctf_dvhash, dvd->dvd_name, dvd) < 0)\n-    return -1;\n+    {\n+      ctf_set_errno (fp, ENOMEM);\n+      return -1;\n+    }\n   ctf_list_append (&fp->ctf_dvdefs, dvd);\n   return 0;\n }\n@@ -1721,6 +1728,9 @@ ctf_add_function (ctf_dict_t *fp, uint32_t flag,\n   ctf_dict_t *tmp = fp;\n   size_t i;\n \n+  if (!(fp->ctf_flags & LCTF_RDWR))\n+    return (ctf_set_errno (fp, ECTF_RDONLY));\n+\n   if (ctc == NULL || (ctc->ctc_flags & ~CTF_FUNC_VARARG) != 0\n       || (ctc->ctc_argc != 0 && argv == NULL))\n     return (ctf_set_errno (fp, EINVAL));"
    },
    {
      "sha": "a4d445a4523d877358ac3218f9ecf78a9ccfb147",
      "filename": "libctf/ctf-subr.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f235c90a287ee961153dd94f5ca28b033ebb668/libctf/ctf-subr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f235c90a287ee961153dd94f5ca28b033ebb668/libctf/ctf-subr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-subr.c?ref=8f235c90a287ee961153dd94f5ca28b033ebb668",
      "patch": "@@ -225,10 +225,12 @@ ctf_err_warn (ctf_dict_t *fp, int is_warning, int err,\n     }\n   va_end (alist);\n \n-  /* Include the error code only if there is one, and if this is not a warning.\n+  /* Include the error code only if there is one; if this is not a warning,\n+     only use the error code if it was explicitly passed and is nonzero.\n      (Warnings may not have a meaningful error code, since the warning may not\n      lead to unwinding up to the user.)  */\n-  if (!is_warning && (err != 0 || (fp && ctf_errno (fp) != 0)))\n+  if ((!is_warning && (err != 0 || (fp && ctf_errno (fp) != 0)))\n+      || (is_warning && err != 0))\n     ctf_dprintf (\"%s: %s (%s)\\n\", is_warning ? _(\"error\") : _(\"warning\"),\n \t\t cew->cew_text, err != 0 ? ctf_errmsg (err)\n \t\t : ctf_errmsg (ctf_errno (fp)));"
    }
  ]
}