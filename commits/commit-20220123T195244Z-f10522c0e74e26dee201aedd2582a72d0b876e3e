{
  "sha": "f10522c0e74e26dee201aedd2582a72d0b876e3e",
  "node_id": "C_kwDOANOeidoAKGYxMDUyMmMwZTc0ZTI2ZGVlMjAxYWVkZDI1ODJhNzJkMGI4NzZlM2U",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-23T19:48:38Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-23T19:52:44Z"
    },
    "message": "Simplify some Rust expression-evaluation code\n\nA few Rust operations do a bit of work in their 'evaluate' functions\nand then call another function -- but are also the only caller.  This\npatch simplifies this code by removing the extra layer.\n\nTested on x86-64 Fedora 34.  I'm checking this in.",
    "tree": {
      "sha": "3532af71c0cbd5d9f744f42921bf4e59ee6505b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3532af71c0cbd5d9f744f42921bf4e59ee6505b1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f10522c0e74e26dee201aedd2582a72d0b876e3e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f10522c0e74e26dee201aedd2582a72d0b876e3e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f10522c0e74e26dee201aedd2582a72d0b876e3e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f10522c0e74e26dee201aedd2582a72d0b876e3e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "451c003d5fcebbc7b7bc2516d43aede6d02bd501",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/451c003d5fcebbc7b7bc2516d43aede6d02bd501",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/451c003d5fcebbc7b7bc2516d43aede6d02bd501"
    }
  ],
  "stats": {
    "total": 83,
    "additions": 29,
    "deletions": 54
  },
  "files": [
    {
      "sha": "6a24f2cbc10d45cfa71a89f485ffa4ee5e06f36a",
      "filename": "gdb/rust-exp.h",
      "status": "modified",
      "additions": 3,
      "deletions": 36,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f10522c0e74e26dee201aedd2582a72d0b876e3e/gdb/rust-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f10522c0e74e26dee201aedd2582a72d0b876e3e/gdb/rust-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.h?ref=f10522c0e74e26dee201aedd2582a72d0b876e3e",
      "patch": "@@ -33,11 +33,6 @@ extern struct value *eval_op_rust_array (struct type *expect_type,\n \t\t\t\t\t enum exp_opcode opcode,\n \t\t\t\t\t struct value *ncopies,\n \t\t\t\t\t struct value *elt);\n-extern struct value *eval_op_rust_ind (struct type *expect_type,\n-\t\t\t\t       struct expression *exp,\n-\t\t\t\t       enum noside noside,\n-\t\t\t\t       enum exp_opcode opcode,\n-\t\t\t\t       struct value *value);\n extern struct value *rust_subscript (struct type *expect_type,\n \t\t\t\t     struct expression *exp,\n \t\t\t\t     enum noside noside, bool for_addr,\n@@ -46,16 +41,6 @@ extern struct value *rust_range (struct type *expect_type,\n \t\t\t\t struct expression *exp,\n \t\t\t\t enum noside noside, enum range_flag kind,\n \t\t\t\t struct value *low, struct value *high);\n-extern struct value *eval_op_rust_struct_anon (struct type *expect_type,\n-\t\t\t\t\t       struct expression *exp,\n-\t\t\t\t\t       enum noside noside,\n-\t\t\t\t\t       int field_number,\n-\t\t\t\t\t       struct value *lhs);\n-extern struct value *eval_op_rust_structop (struct type *expect_type,\n-\t\t\t\t\t    struct expression *exp,\n-\t\t\t\t\t    enum noside noside,\n-\t\t\t\t\t    struct value *lhs,\n-\t\t\t\t\t    const char *field_name);\n \n namespace expr\n {\n@@ -75,14 +60,7 @@ class rust_unop_ind_operation\n \n   value *evaluate (struct type *expect_type,\n \t\t   struct expression *exp,\n-\t\t   enum noside noside) override\n-  {\n-    if (noside != EVAL_NORMAL)\n-      return unop_ind_operation::evaluate (expect_type, exp, noside);\n-\n-    value *arg1 = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n-    return eval_op_rust_ind (expect_type, exp, noside, UNOP_IND, arg1);\n-  }\n+\t\t   enum noside noside) override;\n };\n \n /* Subscript operator for Rust.  */\n@@ -174,13 +152,7 @@ class rust_struct_anon\n \n   value *evaluate (struct type *expect_type,\n \t\t   struct expression *exp,\n-\t\t   enum noside noside) override\n-  {\n-    value *lhs = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n-    return eval_op_rust_struct_anon (expect_type, exp, noside,\n-\t\t\t\t     std::get<0> (m_storage), lhs);\n-\n-  }\n+\t\t   enum noside noside) override;\n \n   enum exp_opcode opcode () const override\n   { return STRUCTOP_ANONYMOUS; }\n@@ -196,12 +168,7 @@ class rust_structop\n \n   value *evaluate (struct type *expect_type,\n \t\t   struct expression *exp,\n-\t\t   enum noside noside) override\n-  {\n-    value *lhs = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n-    return eval_op_rust_structop (expect_type, exp, noside, lhs,\n-\t\t\t\t  std::get<1> (m_storage).c_str ());\n-  }\n+\t\t   enum noside noside) override;\n \n   value *evaluate_funcall (struct type *expect_type,\n \t\t\t   struct expression *exp,"
    },
    {
      "sha": "ec8cdef052fd7940cb54ec52078cca7f26062029",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 26,
      "deletions": 18,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f10522c0e74e26dee201aedd2582a72d0b876e3e/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f10522c0e74e26dee201aedd2582a72d0b876e3e/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=f10522c0e74e26dee201aedd2582a72d0b876e3e",
      "patch": "@@ -1244,22 +1244,28 @@ rust_subscript (struct type *expect_type, struct expression *exp,\n   return result;\n }\n \n-/* A helper function for UNOP_IND.  */\n+namespace expr\n+{\n \n struct value *\n-eval_op_rust_ind (struct type *expect_type, struct expression *exp,\n-\t\t  enum noside noside,\n-\t\t  enum exp_opcode opcode,\n-\t\t  struct value *value)\n+rust_unop_ind_operation::evaluate (struct type *expect_type,\n+\t\t\t\t   struct expression *exp,\n+\t\t\t\t   enum noside noside)\n {\n-  gdb_assert (noside == EVAL_NORMAL);\n+  if (noside != EVAL_NORMAL)\n+    return unop_ind_operation::evaluate (expect_type, exp, noside);\n+\n+  struct value *value = std::get<0> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t\t\t   noside);\n   struct value *trait_ptr = rust_get_trait_object_pointer (value);\n   if (trait_ptr != NULL)\n     value = trait_ptr;\n \n   return value_ind (value);\n }\n \n+} /* namespace expr */\n+\n /* A helper function for UNOP_COMPLEMENT.  */\n \n struct value *\n@@ -1302,13 +1308,17 @@ eval_op_rust_array (struct type *expect_type, struct expression *exp,\n     }\n }\n \n-/* A helper function for STRUCTOP_ANONYMOUS.  */\n+namespace expr\n+{\n \n struct value *\n-eval_op_rust_struct_anon (struct type *expect_type, struct expression *exp,\n-\t\t\t  enum noside noside,\n-\t\t\t  int field_number, struct value *lhs)\n+rust_struct_anon::evaluate (struct type *expect_type,\n+\t\t\t    struct expression *exp,\n+\t\t\t    enum noside noside)\n {\n+  value *lhs = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+  int field_number = std::get<0> (m_storage);\n+\n   struct type *type = value_type (lhs);\n \n   if (type->code () == TYPE_CODE_STRUCT)\n@@ -1368,13 +1378,14 @@ eval_op_rust_struct_anon (struct type *expect_type, struct expression *exp,\n tuple structs, and tuple-like enum variants\"));\n }\n \n-/* A helper function for STRUCTOP_STRUCT.  */\n-\n struct value *\n-eval_op_rust_structop (struct type *expect_type, struct expression *exp,\n-\t\t       enum noside noside,\n-\t\t       struct value *lhs, const char *field_name)\n+rust_structop::evaluate (struct type *expect_type,\n+\t\t\t struct expression *exp,\n+\t\t\t enum noside noside)\n {\n+  value *lhs = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+  const char *field_name = std::get<1> (m_storage).c_str ();\n+\n   struct value *result;\n   struct type *type = value_type (lhs);\n   if (type->code () == TYPE_CODE_STRUCT && rust_enum_p (type))\n@@ -1416,9 +1427,6 @@ eval_op_rust_structop (struct type *expect_type, struct expression *exp,\n   return result;\n }\n \n-namespace expr\n-{\n-\n value *\n rust_aggregate_operation::evaluate (struct type *expect_type,\n \t\t\t\t    struct expression *exp,"
    }
  ]
}