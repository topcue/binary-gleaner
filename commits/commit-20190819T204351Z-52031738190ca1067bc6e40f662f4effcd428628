{
  "sha": "52031738190ca1067bc6e40f662f4effcd428628",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTIwMzE3MzgxOTBjYTEwNjdiYzZlNDBmNjYyZjRlZmZjZDQyODYyOA==",
  "commit": {
    "author": {
      "name": "Faraz Shahbazker",
      "email": "fshahbazker@wavecomp.com",
      "date": "2019-08-13T05:32:20Z"
    },
    "committer": {
      "name": "Faraz Shahbazker",
      "email": "fshahbazker@wavecomp.com",
      "date": "2019-08-19T20:43:51Z"
    },
    "message": "MIPS/gas: Fix misaligned address errors to disregard ISA mode bit\n\ngas/\n\t* config/tc-mips.c (fix_bad_misaligned_address): New function.\n\t(fix_validate_branch): Call fix_bad_misaligned address_to\n\tcalculate the target address.\n\t(md_apply_fix): Likewise.\n\t(md_convert_frag): Update misaligned address calculation to\n\tdisregard ISA mode bit.",
    "tree": {
      "sha": "1ec67e0fbfe9f0331028d0dc7068a647e66519d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1ec67e0fbfe9f0331028d0dc7068a647e66519d6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/52031738190ca1067bc6e40f662f4effcd428628",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/52031738190ca1067bc6e40f662f4effcd428628",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/52031738190ca1067bc6e40f662f4effcd428628",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/52031738190ca1067bc6e40f662f4effcd428628/comments",
  "author": {
    "login": "farazs-github",
    "id": 57776434,
    "node_id": "MDQ6VXNlcjU3Nzc2NDM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/57776434?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/farazs-github",
    "html_url": "https://github.com/farazs-github",
    "followers_url": "https://api.github.com/users/farazs-github/followers",
    "following_url": "https://api.github.com/users/farazs-github/following{/other_user}",
    "gists_url": "https://api.github.com/users/farazs-github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/farazs-github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/farazs-github/subscriptions",
    "organizations_url": "https://api.github.com/users/farazs-github/orgs",
    "repos_url": "https://api.github.com/users/farazs-github/repos",
    "events_url": "https://api.github.com/users/farazs-github/events{/privacy}",
    "received_events_url": "https://api.github.com/users/farazs-github/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "farazs-github",
    "id": 57776434,
    "node_id": "MDQ6VXNlcjU3Nzc2NDM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/57776434?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/farazs-github",
    "html_url": "https://github.com/farazs-github",
    "followers_url": "https://api.github.com/users/farazs-github/followers",
    "following_url": "https://api.github.com/users/farazs-github/following{/other_user}",
    "gists_url": "https://api.github.com/users/farazs-github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/farazs-github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/farazs-github/subscriptions",
    "organizations_url": "https://api.github.com/users/farazs-github/orgs",
    "repos_url": "https://api.github.com/users/farazs-github/repos",
    "events_url": "https://api.github.com/users/farazs-github/events{/privacy}",
    "received_events_url": "https://api.github.com/users/farazs-github/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "770c015139f038bd7b7abb5c6d84eb39d36d3080",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/770c015139f038bd7b7abb5c6d84eb39d36d3080",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/770c015139f038bd7b7abb5c6d84eb39d36d3080"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 32,
    "deletions": 5
  },
  "files": [
    {
      "sha": "966bc1727104f223e7196a34c028f38a4fd161e3",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52031738190ca1067bc6e40f662f4effcd428628/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52031738190ca1067bc6e40f662f4effcd428628/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=52031738190ca1067bc6e40f662f4effcd428628",
      "patch": "@@ -1,3 +1,12 @@\n+2019-08-19  Faraz Shahbazker  <fshahbazker@wavecomp.com>\n+\n+\t* config/tc-mips.c (fix_bad_misaligned_address): New function.\n+\t(fix_validate_branch): Call fix_bad_misaligned address_to\n+\tcalculate the target address.\n+\t(md_apply_fix): Likewise.\n+\t(md_convert_frag): Update misaligned address calculation to\n+\tdisregard ISA mode bit.\n+\n 2019-08-19  Faraz Shahbazker  <fshahbazker@wavecomp.com>\n \n \t* config/tc-mips.c (mips_move_labels): Retain ISA mode bit"
    },
    {
      "sha": "a386d11f6c2451430936500c06754c2bfb5c2c06",
      "filename": "gas/config/tc-mips.c",
      "status": "modified",
      "additions": 23,
      "deletions": 5,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52031738190ca1067bc6e40f662f4effcd428628/gas/config/tc-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52031738190ca1067bc6e40f662f4effcd428628/gas/config/tc-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mips.c?ref=52031738190ca1067bc6e40f662f4effcd428628",
      "patch": "@@ -15743,6 +15743,24 @@ fix_bad_misaligned_branch_p (fixS *fixP)\n   return (val & 0x3) != isa_bit;\n }\n \n+/* Calculate the relocation target by masking off ISA mode bit before\n+   combining symbol and addend.  */\n+\n+static valueT\n+fix_bad_misaligned_address (fixS *fixP)\n+{\n+  valueT val;\n+  valueT off;\n+  unsigned isa_mode;\n+  gas_assert (fixP != NULL && fixP->fx_addsy != NULL);\n+  val = S_GET_VALUE (fixP->fx_addsy);\n+  off = fixP->fx_offset;\n+  isa_mode = (ELF_ST_IS_COMPRESSED (S_GET_OTHER (fixP->fx_addsy))\n+\t      ? 1 : 0);\n+\n+  return ((val & ~isa_mode) + off);\n+}\n+\n /* Make the necessary checks on a regular MIPS branch pointed to by FIXP\n    and its calculated value VAL.  */\n \n@@ -15759,7 +15777,7 @@ fix_validate_branch (fixS *fixP, valueT val)\n   else if (fix_bad_misaligned_branch_p (fixP))\n     as_bad_where (fixP->fx_file, fixP->fx_line,\n \t\t  _(\"branch to misaligned address (0x%lx)\"),\n-\t\t  (long) (S_GET_VALUE (fixP->fx_addsy) + fixP->fx_offset));\n+\t\t  (long) fix_bad_misaligned_address (fixP));\n   else if (HAVE_IN_PLACE_ADDENDS && (fixP->fx_offset & 0x3) != 0)\n     as_bad_where (fixP->fx_file, fixP->fx_line,\n \t\t  _(\"cannot encode misaligned addend \"\n@@ -15898,8 +15916,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n \telse if (fix_bad_misaligned_jump_p (fixP, shift))\n \t  as_bad_where (fixP->fx_file, fixP->fx_line,\n \t\t\t_(\"jump to misaligned address (0x%lx)\"),\n-\t\t\t(long) (S_GET_VALUE (fixP->fx_addsy)\n-\t\t\t\t+ fixP->fx_offset));\n+\t\t\t(long) fix_bad_misaligned_address (fixP));\n \telse if (HAVE_IN_PLACE_ADDENDS\n \t\t && (fixP->fx_offset & ((1 << shift) - 1)) != 0)\n \t  as_bad_where (fixP->fx_file, fixP->fx_line,\n@@ -16153,7 +16170,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n \t       && (fixP->fx_offset & 0x1) != 0)\n \tas_bad_where (fixP->fx_file, fixP->fx_line,\n \t\t      _(\"branch to misaligned address (0x%lx)\"),\n-\t\t      (long) (S_GET_VALUE (fixP->fx_addsy) + fixP->fx_offset));\n+\t\t      (long) fix_bad_misaligned_address (fixP));\n       else if (HAVE_IN_PLACE_ADDENDS && (fixP->fx_offset & 0x1) != 0)\n \tas_bad_where (fixP->fx_file, fixP->fx_line,\n \t\t      _(\"cannot encode misaligned addend \"\n@@ -19000,7 +19017,8 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED, segT asec, fragS *fragp)\n \t      else if ((fragp->fr_offset & 0x1) != 0)\n \t\tas_bad_where (fragp->fr_file, fragp->fr_line,\n \t\t\t      _(\"branch to misaligned address (0x%lx)\"),\n-\t\t\t      (long) val);\n+\t\t\t      (long) (resolve_symbol_value (fragp->fr_symbol)\n+\t\t\t\t      + (fragp->fr_offset & ~1)));\n \t    }\n \n \t  val = mips16_pcrel_val (fragp, pcrel_op, val, 0);"
    }
  ]
}