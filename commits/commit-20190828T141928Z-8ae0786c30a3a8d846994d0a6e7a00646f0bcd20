{
  "sha": "8ae0786c30a3a8d846994d0a6e7a00646f0bcd20",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGFlMDc4NmMzMGEzYThkODQ2OTk0ZDBhNmU3YTAwNjQ2ZjBiY2QyMA==",
  "commit": {
    "author": {
      "name": "Gary Benson",
      "email": "gbenson@redhat.com",
      "date": "2019-08-28T14:19:28Z"
    },
    "committer": {
      "name": "Gary Benson",
      "email": "gbenson@redhat.com",
      "date": "2019-08-28T14:19:28Z"
    },
    "message": "Fix Gnulib glob.c resource leaks found by Coverity\n\nCoverity discovered a number of resource leaks in Gnulib's glob.c.\nThis commit backports the Gnulib commits that fix the leaks.\n\ngnulib/ChangeLog:\n\n\t* patches/0003-Fix-glob-c-Coverity-issues.patch: New file.\n\t* update-gnulib.sh: List the above.\n\t* import/glob.c: Rebuild.",
    "tree": {
      "sha": "411fa2a7edacd8de4938d4250543821d179d5bc8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/411fa2a7edacd8de4938d4250543821d179d5bc8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "d8f27c6018adbb32a3ebba39a5abac44a6b9e67c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8f27c6018adbb32a3ebba39a5abac44a6b9e67c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d8f27c6018adbb32a3ebba39a5abac44a6b9e67c"
    }
  ],
  "stats": {
    "total": 370,
    "additions": 347,
    "deletions": 23
  },
  "files": [
    {
      "sha": "181fccd44b51cacd6968cc53a357f0e7eaa11229",
      "filename": "gnulib/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20/gnulib/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20/gnulib/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/ChangeLog?ref=8ae0786c30a3a8d846994d0a6e7a00646f0bcd20",
      "patch": "@@ -1,3 +1,9 @@\n+2019-08-28  Gary Benson  <gbenson@redhat.com>\n+\n+\t* patches/0003-Fix-glob-c-Coverity-issues.patch: New file.\n+\t* update-gnulib.sh: List the above.\n+\t* import/glob.c: Rebuild.\n+\n 2019-06-21  Gary Benson  <gbenson@redhat.com>\n \n \t* update-gnulib.sh: Adjust paths."
    },
    {
      "sha": "416d210b630bd7fa49f5308109ec460f50cd200e",
      "filename": "gnulib/import/glob.c",
      "status": "modified",
      "additions": 61,
      "deletions": 23,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20/gnulib/import/glob.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20/gnulib/import/glob.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/glob.c?ref=8ae0786c30a3a8d846994d0a6e7a00646f0bcd20",
      "patch": "@@ -734,6 +734,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n                       pwtmpbuf = malloc (pwbuflen);\n                       if (pwtmpbuf == NULL)\n                         {\n+                          if (__glibc_unlikely (malloc_name))\n+                            free (name);\n                           retval = GLOB_NOSPACE;\n                           goto out;\n                         }\n@@ -762,6 +764,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n                           if (newp == NULL)\n                             {\n                               free (malloc_pwtmpbuf);\n+                              if (__glibc_unlikely (malloc_name))\n+                                free (name);\n                               retval = GLOB_NOSPACE;\n                               goto out;\n                             }\n@@ -797,23 +801,30 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n                               malloc_home_dir = 1;\n                             }\n                           memcpy (home_dir, p->pw_dir, home_dir_len);\n-\n-                          free (pwtmpbuf);\n                         }\n                     }\n+                  free (malloc_pwtmpbuf);\n+                }\n+              else\n+                {\n+                  if (__glibc_unlikely (malloc_name))\n+                    free (name);\n                 }\n             }\n           if (home_dir == NULL || home_dir[0] == '\\0')\n             {\n+              if (__glibc_unlikely (malloc_home_dir))\n+                free (home_dir);\n               if (flags & GLOB_TILDE_CHECK)\n                 {\n-                  if (__glibc_unlikely (malloc_home_dir))\n-                    free (home_dir);\n                   retval = GLOB_NOMATCH;\n                   goto out;\n                 }\n               else\n-                home_dir = (char *) \"~\"; /* No luck.  */\n+                {\n+                  home_dir = (char *) \"~\"; /* No luck.  */\n+                  malloc_home_dir = 0;\n+                }\n             }\n #  endif /* WINDOWS32 */\n # endif\n@@ -855,6 +866,9 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n               dirname = newp;\n               dirlen += home_len - 1;\n               malloc_dirname = !use_alloca;\n+\n+              if (__glibc_unlikely (malloc_home_dir))\n+                free (home_dir);\n             }\n           dirname_modified = 1;\n         }\n@@ -1027,9 +1041,12 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n                 free (malloc_pwtmpbuf);\n \n                 if (flags & GLOB_TILDE_CHECK)\n-                  /* We have to regard it as an error if we cannot find the\n-                     home directory.  */\n-                  return GLOB_NOMATCH;\n+                  {\n+                    /* We have to regard it as an error if we cannot find the\n+                       home directory.  */\n+                    retval = GLOB_NOMATCH;\n+                    goto out;\n+                  }\n               }\n           }\n         }\n@@ -1059,7 +1076,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n               free (pglob->gl_pathv);\n               pglob->gl_pathv = NULL;\n               pglob->gl_pathc = 0;\n-              return GLOB_NOSPACE;\n+              retval = GLOB_NOSPACE;\n+              goto out;\n             }\n \n           new_gl_pathv = realloc (pglob->gl_pathv,\n@@ -1077,12 +1095,19 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n               p = mempcpy (pglob->gl_pathv[newcount], dirname, dirlen);\n               p[0] = '/';\n               p[1] = '\\0';\n+              if (__glibc_unlikely (malloc_dirname))\n+                free (dirname);\n             }\n           else\n             {\n-              pglob->gl_pathv[newcount] = strdup (dirname);\n-              if (pglob->gl_pathv[newcount] == NULL)\n-                goto nospace;\n+              if (__glibc_unlikely (malloc_dirname))\n+                pglob->gl_pathv[newcount] = dirname;\n+              else\n+                {\n+                  pglob->gl_pathv[newcount] = strdup (dirname);\n+                  if (pglob->gl_pathv[newcount] == NULL)\n+                    goto nospace;\n+                }\n             }\n           pglob->gl_pathv[++newcount] = NULL;\n           ++pglob->gl_pathc;\n@@ -1092,7 +1117,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n         }\n \n       /* Not found.  */\n-      return GLOB_NOMATCH;\n+      retval = GLOB_NOMATCH;\n+      goto out;\n     }\n \n   meta = __glob_pattern_type (dirname, !(flags & GLOB_NOESCAPE));\n@@ -1138,7 +1164,10 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n       if (status != 0)\n         {\n           if ((flags & GLOB_NOCHECK) == 0 || status != GLOB_NOMATCH)\n-            return status;\n+            {\n+              retval = status;\n+              goto out;\n+            }\n           goto no_matches;\n         }\n \n@@ -1157,7 +1186,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n             if (interrupt_state)\n               {\n                 globfree (&dirs);\n-                return GLOB_ABORTED;\n+                retval = GLOB_ABORTED;\n+                goto out;\n               }\n           }\n #endif /* SHELL.  */\n@@ -1176,7 +1206,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n               globfree (&dirs);\n               globfree (pglob);\n               pglob->gl_pathc = 0;\n-              return status;\n+              retval = status;\n+              goto out;\n             }\n \n           /* Stick the directory on the front of each name.  */\n@@ -1187,7 +1218,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n               globfree (&dirs);\n               globfree (pglob);\n               pglob->gl_pathc = 0;\n-              return GLOB_NOSPACE;\n+              retval = GLOB_NOSPACE;\n+              goto out;\n             }\n         }\n \n@@ -1209,7 +1241,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n                 {\n                 nospace2:\n                   globfree (&dirs);\n-                  return GLOB_NOSPACE;\n+                  retval = GLOB_NOSPACE;\n+                  goto out;\n                 }\n \n               new_gl_pathv = realloc (pglob->gl_pathv,\n@@ -1224,7 +1257,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n                   globfree (&dirs);\n                   globfree (pglob);\n                   pglob->gl_pathc = 0;\n-                  return GLOB_NOSPACE;\n+                  retval = GLOB_NOSPACE;\n+                  goto out;\n                 }\n \n               ++pglob->gl_pathc;\n@@ -1236,7 +1270,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n           else\n             {\n               globfree (&dirs);\n-              return GLOB_NOMATCH;\n+              retval = GLOB_NOMATCH;\n+              goto out;\n             }\n         }\n \n@@ -1282,7 +1317,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n               flags = orig_flags;\n               goto no_matches;\n             }\n-          return status;\n+          retval = status;\n+          goto out;\n         }\n \n       if (dirlen > 0)\n@@ -1294,7 +1330,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n             {\n               globfree (pglob);\n               pglob->gl_pathc = 0;\n-              return GLOB_NOSPACE;\n+              retval = GLOB_NOSPACE;\n+              goto out;\n             }\n         }\n     }\n@@ -1319,7 +1356,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n               {\n                 globfree (pglob);\n                 pglob->gl_pathc = 0;\n-                return GLOB_NOSPACE;\n+                retval = GLOB_NOSPACE;\n+                goto out;\n               }\n             strcpy (&new[len - 2], \"/\");\n             pglob->gl_pathv[i] = new;"
    },
    {
      "sha": "f976bb9e1a6093d78f524d2ba0471d16615deba1",
      "filename": "gnulib/patches/0003-Fix-glob-c-Coverity-issues.patch",
      "status": "added",
      "additions": 279,
      "deletions": 0,
      "changes": 279,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20/gnulib/patches/0003-Fix-glob-c-Coverity-issues.patch",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20/gnulib/patches/0003-Fix-glob-c-Coverity-issues.patch",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/patches/0003-Fix-glob-c-Coverity-issues.patch?ref=8ae0786c30a3a8d846994d0a6e7a00646f0bcd20",
      "patch": "@@ -0,0 +1,279 @@\n+Coverity discovered a number of resource leaks in Gnulib.\n+The solution is to backport the following Gnulib commits:\n+\n+  commit 0eee3ccaae5bb3d0016a0da8b8e5108767c02748\n+  Author: Bruno Haible <bruno@clisp.org>\n+  Date:   Fri Mar 31 22:41:38 2017 +0200\n+\n+      glob: Fix memory leaks.\n+\n+      * lib/glob.c (glob): Free allocated memory before returning.\n+      Reported by Coverity via Tim R\u00fchsen.\n+\n+  commit b1d7f3165ba1c7a44a29017eb80491094aa240ba\n+  Author: Bruno Haible <bruno@clisp.org>\n+  Date:   Fri Mar 31 22:43:35 2017 +0200\n+\n+      glob: Fix invalid free() call.\n+\n+      * lib/glob.c (glob): Reset malloc_home_dir when assigning a pointer to\n+      static storage to home_dir.\n+      Reported by Coverity via Tim R\u00fchsen.\n+\n+  commit 1540f3441555f756558f3a18e5f68914c0b72227\n+  Author: Bruno Haible <bruno@clisp.org>\n+  Date:   Sat Apr 1 15:15:18 2017 +0200\n+\n+      glob: Fix more memory leaks.\n+\n+      * lib/glob.c (glob): Free allocated memory before returning.\n+      Reported by Coverity via Tim R\u00fchsen.\n+\n+  commit b19cb256c9a4d3a138c27181cffee5513edb0e81\n+  Author: Bruno Haible <bruno@clisp.org>\n+  Date:   Thu Jul 6 23:21:49 2017 +0200\n+\n+      glob: Fix more memory leaks.\n+\n+      * lib/glob.c (glob): Free dirname before returning.\n+      Reported by Coverity and Tim R\u00fchsen.\n+\n+  commit 8cb994d1fc4a957359780e1a4187b4f250c1cea5\n+  Author: Tim R\u00fchsen <tim.ruehsen@gmx.de>\n+  Date:   Mon Jul 10 19:02:19 2017 +0200\n+\n+      glob: Fix more memory leaks.\n+\n+      * lib/glob.c (glob): Use 'goto out' in order to free dirname before\n+      returning.\n+      Reported by Tim R\u00fchsen.\n+\n+diff --git a/gnulib/import/glob.c b/gnulib/import/glob.c\n+index 4b04b90..416d210 100644\n+--- a/gdb/gnulib/import/glob.c\n++++ b/gdb/gnulib/import/glob.c\n+@@ -734,6 +734,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+                       pwtmpbuf = malloc (pwbuflen);\n+                       if (pwtmpbuf == NULL)\n+                         {\n++                          if (__glibc_unlikely (malloc_name))\n++                            free (name);\n+                           retval = GLOB_NOSPACE;\n+                           goto out;\n+                         }\n+@@ -762,6 +764,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+                           if (newp == NULL)\n+                             {\n+                               free (malloc_pwtmpbuf);\n++                              if (__glibc_unlikely (malloc_name))\n++                                free (name);\n+                               retval = GLOB_NOSPACE;\n+                               goto out;\n+                             }\n+@@ -797,23 +801,30 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+                               malloc_home_dir = 1;\n+                             }\n+                           memcpy (home_dir, p->pw_dir, home_dir_len);\n+-\n+-                          free (pwtmpbuf);\n+                         }\n+                     }\n++                  free (malloc_pwtmpbuf);\n++                }\n++              else\n++                {\n++                  if (__glibc_unlikely (malloc_name))\n++                    free (name);\n+                 }\n+             }\n+           if (home_dir == NULL || home_dir[0] == '\\0')\n+             {\n++              if (__glibc_unlikely (malloc_home_dir))\n++                free (home_dir);\n+               if (flags & GLOB_TILDE_CHECK)\n+                 {\n+-                  if (__glibc_unlikely (malloc_home_dir))\n+-                    free (home_dir);\n+                   retval = GLOB_NOMATCH;\n+                   goto out;\n+                 }\n+               else\n+-                home_dir = (char *) \"~\"; /* No luck.  */\n++                {\n++                  home_dir = (char *) \"~\"; /* No luck.  */\n++                  malloc_home_dir = 0;\n++                }\n+             }\n+ #  endif /* WINDOWS32 */\n+ # endif\n+@@ -855,6 +866,9 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+               dirname = newp;\n+               dirlen += home_len - 1;\n+               malloc_dirname = !use_alloca;\n++\n++              if (__glibc_unlikely (malloc_home_dir))\n++                free (home_dir);\n+             }\n+           dirname_modified = 1;\n+         }\n+@@ -1027,9 +1041,12 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+                 free (malloc_pwtmpbuf);\n+ \n+                 if (flags & GLOB_TILDE_CHECK)\n+-                  /* We have to regard it as an error if we cannot find the\n+-                     home directory.  */\n+-                  return GLOB_NOMATCH;\n++                  {\n++                    /* We have to regard it as an error if we cannot find the\n++                       home directory.  */\n++                    retval = GLOB_NOMATCH;\n++                    goto out;\n++                  }\n+               }\n+           }\n+         }\n+@@ -1059,7 +1076,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+               free (pglob->gl_pathv);\n+               pglob->gl_pathv = NULL;\n+               pglob->gl_pathc = 0;\n+-              return GLOB_NOSPACE;\n++              retval = GLOB_NOSPACE;\n++              goto out;\n+             }\n+ \n+           new_gl_pathv = realloc (pglob->gl_pathv,\n+@@ -1077,12 +1095,19 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+               p = mempcpy (pglob->gl_pathv[newcount], dirname, dirlen);\n+               p[0] = '/';\n+               p[1] = '\\0';\n++              if (__glibc_unlikely (malloc_dirname))\n++                free (dirname);\n+             }\n+           else\n+             {\n+-              pglob->gl_pathv[newcount] = strdup (dirname);\n+-              if (pglob->gl_pathv[newcount] == NULL)\n+-                goto nospace;\n++              if (__glibc_unlikely (malloc_dirname))\n++                pglob->gl_pathv[newcount] = dirname;\n++              else\n++                {\n++                  pglob->gl_pathv[newcount] = strdup (dirname);\n++                  if (pglob->gl_pathv[newcount] == NULL)\n++                    goto nospace;\n++                }\n+             }\n+           pglob->gl_pathv[++newcount] = NULL;\n+           ++pglob->gl_pathc;\n+@@ -1092,7 +1117,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+         }\n+ \n+       /* Not found.  */\n+-      return GLOB_NOMATCH;\n++      retval = GLOB_NOMATCH;\n++      goto out;\n+     }\n+ \n+   meta = __glob_pattern_type (dirname, !(flags & GLOB_NOESCAPE));\n+@@ -1138,7 +1164,10 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+       if (status != 0)\n+         {\n+           if ((flags & GLOB_NOCHECK) == 0 || status != GLOB_NOMATCH)\n+-            return status;\n++            {\n++              retval = status;\n++              goto out;\n++            }\n+           goto no_matches;\n+         }\n+ \n+@@ -1157,7 +1186,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+             if (interrupt_state)\n+               {\n+                 globfree (&dirs);\n+-                return GLOB_ABORTED;\n++                retval = GLOB_ABORTED;\n++                goto out;\n+               }\n+           }\n+ #endif /* SHELL.  */\n+@@ -1176,7 +1206,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+               globfree (&dirs);\n+               globfree (pglob);\n+               pglob->gl_pathc = 0;\n+-              return status;\n++              retval = status;\n++              goto out;\n+             }\n+ \n+           /* Stick the directory on the front of each name.  */\n+@@ -1187,7 +1218,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+               globfree (&dirs);\n+               globfree (pglob);\n+               pglob->gl_pathc = 0;\n+-              return GLOB_NOSPACE;\n++              retval = GLOB_NOSPACE;\n++              goto out;\n+             }\n+         }\n+ \n+@@ -1209,7 +1241,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+                 {\n+                 nospace2:\n+                   globfree (&dirs);\n+-                  return GLOB_NOSPACE;\n++                  retval = GLOB_NOSPACE;\n++                  goto out;\n+                 }\n+ \n+               new_gl_pathv = realloc (pglob->gl_pathv,\n+@@ -1224,7 +1257,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+                   globfree (&dirs);\n+                   globfree (pglob);\n+                   pglob->gl_pathc = 0;\n+-                  return GLOB_NOSPACE;\n++                  retval = GLOB_NOSPACE;\n++                  goto out;\n+                 }\n+ \n+               ++pglob->gl_pathc;\n+@@ -1236,7 +1270,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+           else\n+             {\n+               globfree (&dirs);\n+-              return GLOB_NOMATCH;\n++              retval = GLOB_NOMATCH;\n++              goto out;\n+             }\n+         }\n+ \n+@@ -1282,7 +1317,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+               flags = orig_flags;\n+               goto no_matches;\n+             }\n+-          return status;\n++          retval = status;\n++          goto out;\n+         }\n+ \n+       if (dirlen > 0)\n+@@ -1294,7 +1330,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+             {\n+               globfree (pglob);\n+               pglob->gl_pathc = 0;\n+-              return GLOB_NOSPACE;\n++              retval = GLOB_NOSPACE;\n++              goto out;\n+             }\n+         }\n+     }\n+@@ -1319,7 +1356,8 @@ glob (const char *pattern, int flags, int (*errfunc) (const char *, int),\n+               {\n+                 globfree (pglob);\n+                 pglob->gl_pathc = 0;\n+-                return GLOB_NOSPACE;\n++                retval = GLOB_NOSPACE;\n++                goto out;\n+               }\n+             strcpy (&new[len - 2], \"/\");\n+             pglob->gl_pathv[i] = new;"
    },
    {
      "sha": "0c8357c8880f89c1bbc2c9f5293920d5afc19a6b",
      "filename": "gnulib/update-gnulib.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20/gnulib/update-gnulib.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ae0786c30a3a8d846994d0a6e7a00646f0bcd20/gnulib/update-gnulib.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/update-gnulib.sh?ref=8ae0786c30a3a8d846994d0a6e7a00646f0bcd20",
      "patch": "@@ -171,6 +171,7 @@ apply_patches ()\n \n apply_patches \"patches/0001-Fix-PR-gdb-23558-Use-system-s-getcwd-when-cross-comp.patch\"\n apply_patches \"patches/0002-mkostemp-mkostemps-Fix-compilation-error-in-C-mode-o.patch\"\n+apply_patches \"patches/0003-Fix-glob-c-Coverity-issues.patch\"\n \n # Regenerate all necessary files...\n aclocal -Iimport/m4 -I../config &&"
    }
  ]
}