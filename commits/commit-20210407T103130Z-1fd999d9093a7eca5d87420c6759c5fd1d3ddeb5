{
  "sha": "1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWZkOTk5ZDkwOTNhN2VjYTVkODc0MjBjNjc1OWM1ZmQxZDNkZGViNQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-22T16:37:39Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-07T10:31:30Z"
    },
    "message": "gdb: Handle missing .debug_str section\n\nWhile messing with the Dwarf assembler (gdb/testsuite/lib/dwarf.exp) I\nmanaged to create an ELF which made use of DW_FORM_strp, but didn't\ninclude a .debug_str section.\n\nWhen I started GDB on this ELF, GDB crashed.  I would have expected to\nget an error instead.\n\nI tracked this down to an unfortunate design choice in\ndwarf2_section_info, a class which wraps around a bfd section, and is\nused for reading in debug information.  GBB creates many\ndwarf2_section_info objects, one for each debug section that might\nneed to be read, then as we find the input bfd sections we associate\nthem with the corresponding dwarf2_section_info.\n\nIf no matching input bfd section is found then the dwarf2_section_info\nis left in an unassociated state, its internal bfd section pointer is\nnull.\n\nIf later GDB tries to read content from the dwarf2_section_info, for\nexample, which trying to read the string associated with DW_FORM_strp,\nwe spot that there is no associated bfd section and issue an error\nmessage.\n\nTo make the users life easier, the error message includes the section\nname being looked for, and the bfd from which the section was\nobtained.\n\nHowever, we get the section name by calling bfd_section_name on the\nassociated section, and we get the bfd filename by calling\nbfd_get_filename on the owner of the associated section.\n\nOf course, if there is no associated section then both the calls\nbfd_section_name and dwarf2_section_info::get_bfd_owner will result in\nundefined behaviour (e.g. a crash).\n\nThe solution I propose in this patch is, I know, not ideal.  I simply\nspot the case where there is no associated section, and print a\nsimpler error message, leaving out the section name and filename.\n\nA better solution would involve redesigning dwarf2_section_info, we\ncould associate each dwarf2_section_info with the initial bfd being\nparsed.  We would then display this filename if there's nothing better\nto display (e.g. if we find a section in a dwo/dwp split dwarf file\nthen we would probably use that filename in preference).\n\nEach dwarf2_section_info could also have the concept of the default\nsection name that would be read for that section, for example, string\ndata might appear in \".debug_str\" or \".zdebug_str\", but if neither is\nfound, then it would probably be OK to just say \".debug_str\" is\nmissing.\n\nAnyway, I didn't do any of that redesign, I just wanted to stop GDB\ncrashing for now, so instead we get this:\n\n  Dwarf Error: DW_FORM_strp used without required section\n\nWhich isn't the best, but in context, isn't too bad:\n\n  Reading symbols from /path/to/executable...\n  Dwarf Error: DW_FORM_strp used without required section\n  (No debugging symbols found in /path/to/executable)\n\nI also added some asserts into dwarf2_section_info which should\ntrigger before GDB crashes in future, if we trigger any other bad\npaths through this code.\n\nAnd there's a test for the specific issue I hit.\n\ngdb/ChangeLog:\n\n\t* dwarf2/section.c (dwarf2_section_info::get_bfd_owner): Add an\n\tassert.\n\t(dwarf2_section_info::get_file_name): Add an assert.\n\t(dwarf2_section_info::read_string): Display a minimal, sane error\n\twhen the dwarf2_section_info is not associated with a bfd section.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/dw2-using-debug-str.exp: Add an additional test.",
    "tree": {
      "sha": "d2c06aa68bf25b5cd337a86110158b28c5df09ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d2c06aa68bf25b5cd337a86110158b28c5df09ba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "79c024436b26a0de2f1b0ddc25f8987b4c9933b8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79c024436b26a0de2f1b0ddc25f8987b4c9933b8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/79c024436b26a0de2f1b0ddc25f8987b4c9933b8"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 63,
    "deletions": 2
  },
  "files": [
    {
      "sha": "b378ccf2e110bea97a36f3f848aeb4f8d55cd5e2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5",
      "patch": "@@ -1,3 +1,11 @@\n+2021-04-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* dwarf2/section.c (dwarf2_section_info::get_bfd_owner): Add an\n+\tassert.\n+\t(dwarf2_section_info::get_file_name): Add an assert.\n+\t(dwarf2_section_info::read_string): Display a minimal, sane error\n+\twhen the dwarf2_section_info is not associated with a bfd section.\n+\n 2021-04-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* top.c (staged_gdb_datadir): Update comment."
    },
    {
      "sha": "8e1c0197c8556e963bcc9e1f5c66a7410a1e81b6",
      "filename": "gdb/dwarf2/section.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5/gdb/dwarf2/section.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5/gdb/dwarf2/section.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/section.c?ref=1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5",
      "patch": "@@ -54,6 +54,7 @@ dwarf2_section_info::get_bfd_owner () const\n       section = get_containing_section ();\n       gdb_assert (!section->is_virtual);\n     }\n+  gdb_assert (section->s.section != nullptr);\n   return section->s.section->owner;\n }\n \n@@ -83,6 +84,7 @@ dwarf2_section_info::get_file_name () const\n {\n   bfd *abfd = get_bfd_owner ();\n \n+  gdb_assert (abfd != nullptr);\n   return bfd_get_filename (abfd);\n }\n \n@@ -194,8 +196,14 @@ dwarf2_section_info::read_string (struct objfile *objfile, LONGEST str_offset,\n {\n   read (objfile);\n   if (buffer == NULL)\n-    error (_(\"%s used without %s section [in module %s]\"),\n-\t   form_name, get_name (), get_file_name ());\n+    {\n+      if (get_bfd_section () == nullptr)\n+\terror (_(\"Dwarf Error: %s used without required section\"),\n+\t       form_name);\n+      else\n+\terror (_(\"Dwarf Error: %s used without %s section [in module %s]\"),\n+\t       form_name, get_name (), get_file_name ());\n+    }\n   if (str_offset >= size)\n     error (_(\"%s pointing outside of %s section [in module %s]\"),\n \t   form_name, get_name (), get_file_name ());"
    },
    {
      "sha": "690c8b34985a8dfd8c31614d85c3824661894728",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5",
      "patch": "@@ -1,3 +1,7 @@\n+2021-04-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.dwarf2/dw2-using-debug-str.exp: Add an additional test.\n+\n 2021-04-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-parameter.exp: Add test for reading data-directory"
    },
    {
      "sha": "62febdb0a998ba050a4e7acb5f3b66210515323d",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-using-debug-str.exp",
      "status": "modified",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5/gdb/testsuite/gdb.dwarf2/dw2-using-debug-str.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5/gdb/testsuite/gdb.dwarf2/dw2-using-debug-str.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-using-debug-str.exp?ref=1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5",
      "patch": "@@ -99,3 +99,44 @@ if ![runto_main] {\n # fictional, it only exists in the DWARF, but it contains lots of nice\n # field names, all of which are stored in the .debug_str section.\n gdb_test \"p global_var\" \" = \\\\{aa = 0, bb = 0, cc = 0\\\\}\"\n+\n+# Now copy the executable, and remove the .debug_str section.  This\n+# creates an executable with an invalid DWARF configuration.  GDB\n+# should give an error when trying to read the debug information from\n+# this executable.\n+set binfile_no_debug_str \"${binfile}-no-debug-str\"\n+set args \"--remove-section .debug_str $binfile ${binfile_no_debug_str}\"\n+if {[run_on_host \"objcopy\" [gdb_find_objcopy] \"$args\"]} {\n+    perror \"failed to run objcopy\"\n+    return -1\n+}\n+\n+# Restart GDB, but don't load an executable.  When we do load the\n+# executable we're going to get an error, which we check for below.\n+clean_restart\n+\n+# This pattern is hit when GDB does not use -readnow (i.e. the default\n+# behaviour).\n+set pattern1 \\\n+    [multi_line \\\n+        \"Reading symbols from \\[^\\r\\n\\]+\" \\\n+        \"Dwarf Error: DW_FORM_strp used without required section\" \\\n+        \"\\\\(No debugging symbols \\[^\\r\\n\\]+\\\\)\"]\n+\n+# This pattern is hit when GDB does use -readnow (e.g. running with\n+# --target_board=readnow).\n+set pattern2 \\\n+    [multi_line \\\n+        \"Reading symbols from \\[^\\r\\n\\]+\" \\\n+        \"Expanding full symbols from \\[^\\r\\n\\]+\" \\\n+        \"Dwarf Error: DW_FORM_strp used without required section\"]\n+\n+# Load the executable, we expect an error from the DWARF parser.\n+gdb_test_multiple \"file $binfile_no_debug_str\" \"file $testfile\" {\n+    -wrap -re $pattern1 {\n+       pass $gdb_test_name\n+    }\n+    -re -wrap \"$pattern2\" {\n+       pass $gdb_test_name\n+    }\n+}"
    }
  ]
}