{
  "sha": "2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmE2N2YwOWRiMWI3MGJmNTVmYTg4Y2YyZGJiNjc1NTIxMGUwZTIxOA==",
  "commit": {
    "author": {
      "name": "Felix Willgerodt",
      "email": "felix.willgerodt@intel.com",
      "date": "2020-09-10T12:29:53Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-09-11T18:42:47Z"
    },
    "message": "Add bfloat16 support for AVX512 register view.\n\nThis adds support for the bfloat16 datatype, which can be seen as a short\nversion of FP32, skipping the least significant 16 bits of the mantissa.\nSince the datatype is currently only supported by the AVX512 registers,\nthe printing of bfloat16 values is only supported for xmm, ymm and zmm\nregisters.\n\ngdb/ChangeLog:\n2020-09-11  Moritz Riesterer  <moritz.riesterer@intel.com>\n\t    Felix Willgerodt  <Felix.Willgerodt@intel.com>\n\n\t* gdbarch.sh: Added bfloat16 type.\n\t* gdbarch.c: Regenerated.\n\t* gdbarch.h: Regenerated.\n\t* gdbtypes.c (floatformats_bfloat16): New struct.\n\t(gdbtypes_post_init): Add builtin_bfloat16.\n\t* gdbtypes.h (struct builtin_type) <builtin_bfloat16>: New member.\n\t(floatformats_bfloat16): New struct.\n\t* i386-tdep.c (i386_zmm_type): Add field \"v32_bfloat16\"\n\t(i386_ymm_type): Add field \"v16_bfloat16\"\n\t(i386_gdbarch_init): Add set_gdbarch_bfloat16_format.\n\t* target-descriptions.c (make_gdb_type): Add case TDESC_TYPE_BFLOAT16.\n\t* gdbsupport/tdesc.cc (tdesc_predefined_types): New member bfloat16.\n\t* gdbsupport/tdesc.h (tdesc_type_kind): New member TDESC_TYPE_BFLOAT16.\n\t* features/i386/64bit-avx512.xml: Add bfloat16 type.\n\t* features/i386/64bit-avx512.c: Regenerated.\n\t* features/i386/64bit-sse.xml: Add bfloat16 type.\n\t* features/i386/64bit-sse.c: Regenerated.\n\ngdb/testsuite/ChangeLog:\n2020-09-11  Moritz Riesterer  <moritz.riesterer@intel.com>\n\t    Felix Willgerodt  <Felix.Willgerodt@intel.com>\n\n\t* x86-avx512bf16.c: New file.\n\t* x86-avx512bf16.exp: Likewise.\n\t* lib/gdb.exp (skip_avx512bf16_tests): New function.",
    "tree": {
      "sha": "d8e892091e998a3e0a7c96116ddb42cfdd688d16",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d8e892091e998a3e0a7c96116ddb42cfdd688d16"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/comments",
  "author": {
    "login": "felix-willgerodt",
    "id": 68062808,
    "node_id": "MDQ6VXNlcjY4MDYyODA4",
    "avatar_url": "https://avatars.githubusercontent.com/u/68062808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/felix-willgerodt",
    "html_url": "https://github.com/felix-willgerodt",
    "followers_url": "https://api.github.com/users/felix-willgerodt/followers",
    "following_url": "https://api.github.com/users/felix-willgerodt/following{/other_user}",
    "gists_url": "https://api.github.com/users/felix-willgerodt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/felix-willgerodt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/felix-willgerodt/subscriptions",
    "organizations_url": "https://api.github.com/users/felix-willgerodt/orgs",
    "repos_url": "https://api.github.com/users/felix-willgerodt/repos",
    "events_url": "https://api.github.com/users/felix-willgerodt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/felix-willgerodt/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1347d111096835049841f2039a4d5852404606a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1347d111096835049841f2039a4d5852404606a3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1347d111096835049841f2039a4d5852404606a3"
    }
  ],
  "stats": {
    "total": 418,
    "additions": 413,
    "deletions": 5
  },
  "files": [
    {
      "sha": "6b1563a111ed3ae41dc3aac2ea03e17574e5997d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -1,3 +1,24 @@\n+2020-09-11  Moritz Riesterer  <moritz.riesterer@intel.com>\n+\t    Felix Willgerodt  <Felix.Willgerodt@intel.com>\n+\n+\t* gdbarch.sh: Added bfloat16 type.\n+\t* gdbarch.c: Regenerated.\n+\t* gdbarch.h: Regenerated.\n+\t* gdbtypes.c (floatformats_bfloat16): New struct.\n+\t(gdbtypes_post_init): Add builtin_bfloat16.\n+\t* gdbtypes.h (struct builtin_type) <builtin_bfloat16>: New member.\n+\t(floatformats_bfloat16): New struct.\n+\t* i386-tdep.c (i386_zmm_type): Add field \"v32_bfloat16\"\n+\t(i386_ymm_type): Add field \"v16_bfloat16\"\n+\t(i386_gdbarch_init): Add set_gdbarch_bfloat16_format.\n+\t* target-descriptions.c (make_gdb_type): Add case TDESC_TYPE_BFLOAT16.\n+\t* gdbsupport/tdesc.cc (tdesc_predefined_types): New member bfloat16.\n+\t* gdbsupport/tdesc.h (tdesc_type_kind): New member TDESC_TYPE_BFLOAT16.\n+\t* features/i386/64bit-avx512.xml: Add bfloat16 type.\n+\t* features/i386/64bit-avx512.c: Regenerated.\n+\t* features/i386/64bit-sse.xml: Add bfloat16 type.\n+\t* features/i386/64bit-sse.c: Regenerated.\n+\n 2020-09-11  Felix Willgerodt  <felix.willgerodt@intel.com>\n \n \t* i386-tdep.c (i386_zmm_type): Fix field names."
    },
    {
      "sha": "1bd49dcd9d5a27705de5c61755fe8322ec981ff2",
      "filename": "gdb/features/i386/64bit-avx512.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/features/i386/64bit-avx512.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/features/i386/64bit-avx512.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/i386/64bit-avx512.c?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -10,6 +10,9 @@ create_feature_i386_64bit_avx512 (struct target_desc *result, long regnum)\n \n   feature = tdesc_create_feature (result, \"org.gnu.gdb.i386.avx512\");\n   tdesc_type *element_type;\n+  element_type = tdesc_named_type (feature, \"bfloat16\");\n+  tdesc_create_vector (feature, \"v8bf16\", element_type, 8);\n+\n   element_type = tdesc_named_type (feature, \"ieee_single\");\n   tdesc_create_vector (feature, \"v4f\", element_type, 4);\n \n@@ -31,6 +34,8 @@ create_feature_i386_64bit_avx512 (struct target_desc *result, long regnum)\n   tdesc_type_with_fields *type_with_fields;\n   type_with_fields = tdesc_create_union (feature, \"vec128\");\n   tdesc_type *field_type;\n+  field_type = tdesc_named_type (feature, \"v8bf16\");\n+  tdesc_add_field (type_with_fields, \"v8_bfloat16\", field_type);\n   field_type = tdesc_named_type (feature, \"v4f\");\n   tdesc_add_field (type_with_fields, \"v4_float\", field_type);\n   field_type = tdesc_named_type (feature, \"v2d\");"
    },
    {
      "sha": "3636121e8473b4813aab0b668cccf85164ce3711",
      "filename": "gdb/features/i386/64bit-avx512.xml",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/features/i386/64bit-avx512.xml",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/features/i386/64bit-avx512.xml",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/i386/64bit-avx512.xml?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -7,13 +7,15 @@\n \n <!DOCTYPE feature SYSTEM \"gdb-target.dtd\">\n <feature name=\"org.gnu.gdb.i386.avx512\">\n-<vector id=\"v4f\" type=\"ieee_single\" count=\"4\"/>\n+  <vector id=\"v8bf16\" type=\"bfloat16\" count=\"8\"/>\n+  <vector id=\"v4f\" type=\"ieee_single\" count=\"4\"/>\n   <vector id=\"v2d\" type=\"ieee_double\" count=\"2\"/>\n   <vector id=\"v16i8\" type=\"int8\" count=\"16\"/>\n   <vector id=\"v8i16\" type=\"int16\" count=\"8\"/>\n   <vector id=\"v4i32\" type=\"int32\" count=\"4\"/>\n   <vector id=\"v2i64\" type=\"int64\" count=\"2\"/>\n   <union id=\"vec128\">\n+    <field name=\"v8_bfloat16\" type=\"v8bf16\"/>\n     <field name=\"v4_float\" type=\"v4f\"/>\n     <field name=\"v2_double\" type=\"v2d\"/>\n     <field name=\"v16_int8\" type=\"v16i8\"/>"
    },
    {
      "sha": "645e31413376539f6f81f61a6b038f524c502a6c",
      "filename": "gdb/features/i386/64bit-sse.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/features/i386/64bit-sse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/features/i386/64bit-sse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/i386/64bit-sse.c?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -10,6 +10,9 @@ create_feature_i386_64bit_sse (struct target_desc *result, long regnum)\n \n   feature = tdesc_create_feature (result, \"org.gnu.gdb.i386.sse\");\n   tdesc_type *element_type;\n+  element_type = tdesc_named_type (feature, \"bfloat16\");\n+  tdesc_create_vector (feature, \"v8bf16\", element_type, 8);\n+\n   element_type = tdesc_named_type (feature, \"ieee_single\");\n   tdesc_create_vector (feature, \"v4f\", element_type, 4);\n \n@@ -31,6 +34,8 @@ create_feature_i386_64bit_sse (struct target_desc *result, long regnum)\n   tdesc_type_with_fields *type_with_fields;\n   type_with_fields = tdesc_create_union (feature, \"vec128\");\n   tdesc_type *field_type;\n+  field_type = tdesc_named_type (feature, \"v8bf16\");\n+  tdesc_add_field (type_with_fields, \"v8_bfloat16\", field_type);\n   field_type = tdesc_named_type (feature, \"v4f\");\n   tdesc_add_field (type_with_fields, \"v4_float\", field_type);\n   field_type = tdesc_named_type (feature, \"v2d\");"
    },
    {
      "sha": "e3dec544cf4c9d85b869d0489d4edd5e40c75859",
      "filename": "gdb/features/i386/64bit-sse.xml",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/features/i386/64bit-sse.xml",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/features/i386/64bit-sse.xml",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/i386/64bit-sse.xml?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -7,13 +7,15 @@\n \n <!DOCTYPE feature SYSTEM \"gdb-target.dtd\">\n <feature name=\"org.gnu.gdb.i386.sse\">\n+  <vector id=\"v8bf16\" type=\"bfloat16\" count=\"8\"/>\n   <vector id=\"v4f\" type=\"ieee_single\" count=\"4\"/>\n   <vector id=\"v2d\" type=\"ieee_double\" count=\"2\"/>\n   <vector id=\"v16i8\" type=\"int8\" count=\"16\"/>\n   <vector id=\"v8i16\" type=\"int16\" count=\"8\"/>\n   <vector id=\"v4i32\" type=\"int32\" count=\"4\"/>\n   <vector id=\"v2i64\" type=\"int64\" count=\"2\"/>\n   <union id=\"vec128\">\n+    <field name=\"v8_bfloat16\" type=\"v8bf16\"/>\n     <field name=\"v4_float\" type=\"v4f\"/>\n     <field name=\"v2_double\" type=\"v2d\"/>\n     <field name=\"v16_int8\" type=\"v16i8\"/>"
    },
    {
      "sha": "062c86bd54aed5b6f57b0cb82913897796931275",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -166,6 +166,8 @@ struct gdbarch\n   int int_bit;\n   int long_bit;\n   int long_long_bit;\n+  int bfloat16_bit;\n+  const struct floatformat ** bfloat16_format;\n   int half_bit;\n   const struct floatformat ** half_format;\n   int float_bit;\n@@ -383,6 +385,7 @@ gdbarch_alloc (const struct gdbarch_info *info,\n   gdbarch->int_bit = 4*TARGET_CHAR_BIT;\n   gdbarch->long_bit = 4*TARGET_CHAR_BIT;\n   gdbarch->long_long_bit = 2*gdbarch->long_bit;\n+  gdbarch->bfloat16_bit = 2*TARGET_CHAR_BIT;\n   gdbarch->half_bit = 2*TARGET_CHAR_BIT;\n   gdbarch->float_bit = 4*TARGET_CHAR_BIT;\n   gdbarch->double_bit = 8*TARGET_CHAR_BIT;\n@@ -523,6 +526,9 @@ verify_gdbarch (struct gdbarch *gdbarch)\n   /* Skip verify of int_bit, invalid_p == 0 */\n   /* Skip verify of long_bit, invalid_p == 0 */\n   /* Skip verify of long_long_bit, invalid_p == 0 */\n+  /* Skip verify of bfloat16_bit, invalid_p == 0 */\n+  if (gdbarch->bfloat16_format == 0)\n+    gdbarch->bfloat16_format = floatformats_bfloat16;\n   /* Skip verify of half_bit, invalid_p == 0 */\n   if (gdbarch->half_format == 0)\n     gdbarch->half_format = floatformats_ieee_half;\n@@ -807,6 +813,12 @@ gdbarch_dump (struct gdbarch *gdbarch, struct ui_file *file)\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: bfd_arch_info = %s\\n\",\n                       gdbarch_bfd_arch_info (gdbarch)->printable_name);\n+  fprintf_unfiltered (file,\n+                      \"gdbarch_dump: bfloat16_bit = %s\\n\",\n+                      plongest (gdbarch->bfloat16_bit));\n+  fprintf_unfiltered (file,\n+                      \"gdbarch_dump: bfloat16_format = %s\\n\",\n+                      pformat (gdbarch->bfloat16_format));\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: breakpoint_from_pc = <%s>\\n\",\n                       host_address_to_string (gdbarch->breakpoint_from_pc));\n@@ -1620,6 +1632,39 @@ set_gdbarch_long_long_bit (struct gdbarch *gdbarch,\n   gdbarch->long_long_bit = long_long_bit;\n }\n \n+int\n+gdbarch_bfloat16_bit (struct gdbarch *gdbarch)\n+{\n+  gdb_assert (gdbarch != NULL);\n+  /* Skip verify of bfloat16_bit, invalid_p == 0 */\n+  if (gdbarch_debug >= 2)\n+    fprintf_unfiltered (gdb_stdlog, \"gdbarch_bfloat16_bit called\\n\");\n+  return gdbarch->bfloat16_bit;\n+}\n+\n+void\n+set_gdbarch_bfloat16_bit (struct gdbarch *gdbarch,\n+                          int bfloat16_bit)\n+{\n+  gdbarch->bfloat16_bit = bfloat16_bit;\n+}\n+\n+const struct floatformat **\n+gdbarch_bfloat16_format (struct gdbarch *gdbarch)\n+{\n+  gdb_assert (gdbarch != NULL);\n+  if (gdbarch_debug >= 2)\n+    fprintf_unfiltered (gdb_stdlog, \"gdbarch_bfloat16_format called\\n\");\n+  return gdbarch->bfloat16_format;\n+}\n+\n+void\n+set_gdbarch_bfloat16_format (struct gdbarch *gdbarch,\n+                             const struct floatformat ** bfloat16_format)\n+{\n+  gdbarch->bfloat16_format = bfloat16_format;\n+}\n+\n int\n gdbarch_half_bit (struct gdbarch *gdbarch)\n {"
    },
    {
      "sha": "87e55fa72b9ec2680ae2ef727e9712e675cc0565",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -158,12 +158,18 @@ extern void set_gdbarch_long_bit (struct gdbarch *gdbarch, int long_bit);\n extern int gdbarch_long_long_bit (struct gdbarch *gdbarch);\n extern void set_gdbarch_long_long_bit (struct gdbarch *gdbarch, int long_long_bit);\n \n-/* The ABI default bit-size and format for \"half\", \"float\", \"double\", and\n+/* The ABI default bit-size and format for \"bfloat16\", \"half\", \"float\", \"double\", and\n    \"long double\".  These bit/format pairs should eventually be combined\n    into a single object.  For the moment, just initialize them as a pair.\n    Each format describes both the big and little endian layouts (if\n    useful). */\n \n+extern int gdbarch_bfloat16_bit (struct gdbarch *gdbarch);\n+extern void set_gdbarch_bfloat16_bit (struct gdbarch *gdbarch, int bfloat16_bit);\n+\n+extern const struct floatformat ** gdbarch_bfloat16_format (struct gdbarch *gdbarch);\n+extern void set_gdbarch_bfloat16_format (struct gdbarch *gdbarch, const struct floatformat ** bfloat16_format);\n+\n extern int gdbarch_half_bit (struct gdbarch *gdbarch);\n extern void set_gdbarch_half_bit (struct gdbarch *gdbarch, int half_bit);\n "
    },
    {
      "sha": "8d221601b762761c5f39e922363c8e3dc1c6739a",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -325,12 +325,14 @@ v;int;long_bit;;;8 * sizeof (long);4*TARGET_CHAR_BIT;;0\n # machine.\n v;int;long_long_bit;;;8 * sizeof (LONGEST);2*gdbarch->long_bit;;0\n \n-# The ABI default bit-size and format for \"half\", \"float\", \"double\", and\n+# The ABI default bit-size and format for \"bfloat16\", \"half\", \"float\", \"double\", and\n # \"long double\".  These bit/format pairs should eventually be combined\n # into a single object.  For the moment, just initialize them as a pair.\n # Each format describes both the big and little endian layouts (if\n # useful).\n \n+v;int;bfloat16_bit;;;16;2*TARGET_CHAR_BIT;;0\n+v;const struct floatformat **;bfloat16_format;;;;;floatformats_bfloat16;;pformat (gdbarch->bfloat16_format)\n v;int;half_bit;;;16;2*TARGET_CHAR_BIT;;0\n v;const struct floatformat **;half_format;;;;;floatformats_ieee_half;;pformat (gdbarch->half_format)\n v;int;float_bit;;;8 * sizeof (float);4*TARGET_CHAR_BIT;;0"
    },
    {
      "sha": "b7c8ec8e6432bccccbe27f8c24f885e5a349e0a6",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -115,6 +115,10 @@ const struct floatformat *floatformats_ibm_long_double[BFD_ENDIAN_UNKNOWN] = {\n   &floatformat_ibm_long_double_big,\n   &floatformat_ibm_long_double_little\n };\n+const struct floatformat *floatformats_bfloat16[BFD_ENDIAN_UNKNOWN] = {\n+  &floatformat_bfloat16_big,\n+  &floatformat_bfloat16_little\n+};\n \n /* Should opaque types be resolved?  */\n \n@@ -5760,6 +5764,9 @@ gdbtypes_post_init (struct gdbarch *gdbarch)\n   builtin_type->builtin_float\n     = arch_float_type (gdbarch, gdbarch_float_bit (gdbarch),\n \t\t       \"float\", gdbarch_float_format (gdbarch));\n+  builtin_type->builtin_bfloat16\n+    = arch_float_type (gdbarch, gdbarch_bfloat16_bit (gdbarch),\n+\t\t       \"bfloat16\", gdbarch_bfloat16_format (gdbarch));\n   builtin_type->builtin_double\n     = arch_float_type (gdbarch, gdbarch_double_bit (gdbarch),\n \t\t       \"double\", gdbarch_double_format (gdbarch));"
    },
    {
      "sha": "9c2059d40c05385b91b521485ce9faea7c848314",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -1847,6 +1847,7 @@ struct builtin_type\n   struct type *builtin_unsigned_short;\n   struct type *builtin_unsigned_int;\n   struct type *builtin_unsigned_long;\n+  struct type *builtin_bfloat16;\n   struct type *builtin_half;\n   struct type *builtin_float;\n   struct type *builtin_double;\n@@ -1981,7 +1982,7 @@ extern const struct floatformat *floatformats_ia64_quad[BFD_ENDIAN_UNKNOWN];\n extern const struct floatformat *floatformats_vax_f[BFD_ENDIAN_UNKNOWN];\n extern const struct floatformat *floatformats_vax_d[BFD_ENDIAN_UNKNOWN];\n extern const struct floatformat *floatformats_ibm_long_double[BFD_ENDIAN_UNKNOWN];\n-\n+extern const struct floatformat *floatformats_bfloat16[BFD_ENDIAN_UNKNOWN];\n \n /* Allocate space for storing data associated with a particular\n    type.  We ensure that the space is allocated using the same"
    },
    {
      "sha": "1b7971c4528bb16bd5c25f3a1bd125c674529ed4",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -3112,13 +3112,16 @@ i386_zmm_type (struct gdbarch *gdbarch)\n \tint8_t v64_int8[64];\n \tdouble v8_double[8];\n \tfloat v16_float[16];\n+\tbfloat16_t v32_bfloat16[32];\n       };\n #endif\n \n       struct type *t;\n \n       t = arch_composite_type (gdbarch,\n \t\t\t       \"__gdb_builtin_type_vec512i\", TYPE_CODE_UNION);\n+      append_composite_type_field (t, \"v32_bfloat16\",\n+\t\t\t\t   init_vector_type (bt->builtin_bfloat16, 32));\n       append_composite_type_field (t, \"v16_float\",\n \t\t\t\t   init_vector_type (bt->builtin_float, 16));\n       append_composite_type_field (t, \"v8_double\",\n@@ -3165,13 +3168,16 @@ i386_ymm_type (struct gdbarch *gdbarch)\n         int8_t v32_int8[32];\n         double v4_double[4];\n         float v8_float[8];\n+        bfloat16_t v16_bfloat16[16];\n       };\n #endif\n \n       struct type *t;\n \n       t = arch_composite_type (gdbarch,\n \t\t\t       \"__gdb_builtin_type_vec256i\", TYPE_CODE_UNION);\n+      append_composite_type_field (t, \"v16_bfloat16\",\n+\t\t\t\t   init_vector_type (bt->builtin_bfloat16, 16));\n       append_composite_type_field (t, \"v8_float\",\n \t\t\t\t   init_vector_type (bt->builtin_float, 8));\n       append_composite_type_field (t, \"v4_double\",\n@@ -8487,6 +8493,9 @@ i386_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n      alignment.  */\n   set_gdbarch_long_double_bit (gdbarch, 96);\n \n+  /* Support of bfloat16 format.  */\n+  set_gdbarch_bfloat16_format (gdbarch, floatformats_bfloat16);\n+\n   /* Support for floating-point data type variants.  */\n   set_gdbarch_floatformat_for_type (gdbarch, i386_floatformat_for_type);\n "
    },
    {
      "sha": "6778b93400b80eb63a1168a2ce47ef0ce411cb6f",
      "filename": "gdb/target-descriptions.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/target-descriptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/target-descriptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-descriptions.c?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -141,6 +141,11 @@ make_gdb_type (struct gdbarch *gdbarch, struct tdesc_type *ttype)\n \t  m_type = arch_float_type (m_gdbarch, -1, \"builtin_type_i387_ext\",\n \t\t\t\t    floatformats_i387_ext);\n \t  return;\n+\n+\tcase TDESC_TYPE_BFLOAT16:\n+\t  m_type = arch_float_type (m_gdbarch, -1, \"builtin_type_bfloat16\",\n+\t\t\t\t    floatformats_bfloat16);\n+\t  return;\n \t}\n \n       internal_error (__FILE__, __LINE__,"
    },
    {
      "sha": "9b150b656b2d1417a7729315904c1a6e55c840a0",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-11  Moritz Riesterer  <moritz.riesterer@intel.com>\n+\t    Felix Willgerodt  <Felix.Willgerodt@intel.com>\n+\n+\t* x86-avx512bf16.c: New file.\n+\t* x86-avx512bf16.exp: Likewise.\n+\t* lib/gdb.exp (skip_avx512bf16_tests): New function.\n+\n 2020-09-11  Tom de Vries  <tdevries@suse.de>\n \n \tPR exp/26602"
    },
    {
      "sha": "615cd121238ff1e9a122889e812d42c6283a5326",
      "filename": "gdb/testsuite/gdb.arch/x86-avx512bf16.c",
      "status": "added",
      "additions": 164,
      "deletions": 0,
      "changes": 164,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/testsuite/gdb.arch/x86-avx512bf16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/testsuite/gdb.arch/x86-avx512bf16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/x86-avx512bf16.c?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -0,0 +1,164 @@\n+/* Test program for bfloat16 of AVX 512 registers.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+typedef struct\n+{\n+  float f[4];\n+} v4sd_t;\n+\n+typedef struct\n+{\n+  float f[8];\n+} v8sd_t;\n+\n+typedef struct\n+{\n+  float f[16];\n+} v16sd_t;\n+\n+v4sd_t xmm_data[] =\n+{\n+  { {  0.0,  0.125,  0.25,  0.375 } },\n+  { {  0.5,  0.625,  0.75,  0.875 } },\n+  { {  1.0,  1.125,  1.25,  1.375 } },\n+  { {  1.5,  1.625,  1.75,  1.875 } },\n+  { {  2.0,  2.125,  2.25,  2.375 } },\n+  { {  2.5,  2.625,  2.75,  2.875 } },\n+  { {  3.0,  3.125,  3.25,  3.375 } },\n+  { {  3.5,  3.625,  3.75,  3.875 } },\n+};\n+\n+v8sd_t ymm_data[] =\n+{\n+  { {  8.0,  8.25,  8.5,  8.75,  9.0,  9.25,  9.5,  9.75 } },\n+  { { 10.0, 10.25, 10.5, 10.75, 11.0, 11.25, 11.5, 11.75 } },\n+  { { 12.0, 12.25, 12.5, 12.75, 13.0, 13.25, 13.5, 13.75 } },\n+  { { 14.0, 14.25, 14.5, 14.75, 15.0, 15.25, 15.5, 15.75 } },\n+  { { 16.0, 16.25, 16.5, 16.75, 17.0, 17.25, 17.5, 17.75 } },\n+  { { 18.0, 18.25, 18.5, 18.75, 19.0, 19.25, 19.5, 19.75 } },\n+  { { 20.0, 20.25, 20.5, 20.75, 21.0, 21.25, 21.5, 21.75 } },\n+  { { 22.0, 22.25, 22.5, 22.75, 23.0, 23.25, 23.5, 23.75 } },\n+};\n+\n+v16sd_t zmm_data[] =\n+{\n+  { { 20.0,  20.5,  21.0,  21.5,  22.0,  22.5,  23.0,  23.5,  24.0,  24.5,\n+      25.0,  25.5,  26.0,  26.5,  27.0,  27.5 } },\n+  { { 28.0,  28.5,  29.0,  29.5,  30.0,  30.5,  31.0,  31.5,  32.0,  32.5,\n+      33.0,  33.5,  34.0,  34.5,  35.0,  35.5 } },\n+  { { 36.0,  36.5,  37.0,  37.5,  38.0,  38.5,  39.0,  39.5,  40.0,  40.5,\n+      41.0,  41.5,  42.0,  42.5,  43.0,  43.5 } },\n+  { { 44.0,  44.5,  45.0,  45.5,  46.0,  46.5,  47.0,  47.5,  48.0,  48.5,\n+      49.0,  49.5,  50.0,  50.5,  51.0,  51.5 } },\n+  { { 52.0,  52.5,  53.0,  53.5,  54.0,  54.5,  55.0,  55.5,  56.0,  56.5,\n+      57.0,  57.5,  58.0,  58.5,  59.0,  59.5 } },\n+  { { 60.0,  60.5,  61.0,  61.5,  62.0,  62.5,  63.0,  63.5,  64.0,  64.5,\n+      65.0,  65.5,  66.0,  66.5,  67.0,  67.5 } },\n+  { { 68.0,  68.5,  69.0,  69.5,  70.0,  70.5,  71.0,  71.5,  72.0,  72.5,\n+      73.0,  73.5,  74.0,  74.5,  75.0,  75.5 } },\n+  { { 76.0,  76.5,  77.0,  77.5,  78.0,  78.5,  79.0,  79.5,  80.0,  80.5,\n+      81.0,  81.5,  82.0,  82.5,  83.0,  83.5 } },\n+};\n+\n+void\n+move_data_to_xmm_reg (void)\n+{\n+  asm (\"vmovups 0(%0), %%xmm0 \\n\\t\"\n+       \"vmovups 16(%0), %%xmm1 \\n\\t\"\n+       \"vmovups 32(%0), %%xmm2 \\n\\t\"\n+       \"vmovups 48(%0), %%xmm3 \\n\\t\"\n+       \"vmovups 64(%0), %%xmm4 \\n\\t\"\n+       \"vmovups 80(%0), %%xmm5 \\n\\t\"\n+       \"vmovups 96(%0), %%xmm6 \\n\\t\"\n+       \"vmovups 112(%0), %%xmm7 \\n\\t\"\n+       : /* no output operands  */\n+       : \"r\" (xmm_data));\n+}\n+\n+void\n+move_data_to_ymm_reg (void)\n+{\n+  asm (\"vmovups 0(%0), %%ymm0 \\n\\t\"\n+       \"vmovups 32(%0), %%ymm1 \\n\\t\"\n+       \"vmovups 64(%0), %%ymm2 \\n\\t\"\n+       \"vmovups 96(%0), %%ymm3 \\n\\t\"\n+       \"vmovups 128(%0), %%ymm4 \\n\\t\"\n+       \"vmovups 160(%0), %%ymm5 \\n\\t\"\n+       \"vmovups 192(%0), %%ymm6 \\n\\t\"\n+       \"vmovups 224(%0), %%ymm7 \\n\\t\"\n+       : /* no output operands  */\n+       : \"r\" (ymm_data));\n+}\n+\n+void\n+move_data_to_zmm_reg (void)\n+{\n+  asm (\"vmovups 0(%0), %%zmm0 \\n\\t\"\n+       \"vmovups 64(%0), %%zmm1 \\n\\t\"\n+       \"vmovups 128(%0), %%zmm2 \\n\\t\"\n+       \"vmovups 192(%0), %%zmm3 \\n\\t\"\n+       \"vmovups 256(%0), %%zmm4 \\n\\t\"\n+       \"vmovups 320(%0), %%zmm5 \\n\\t\"\n+       \"vmovups 384(%0), %%zmm6 \\n\\t\"\n+       \"vmovups 448(%0), %%zmm7 \\n\\t\"\n+       : /* no output operands  */\n+       : \"r\" (zmm_data));\n+}\n+\n+void\n+convert_xmm_from_float_to_bfloat16 (void)\n+{\n+  asm(\"vcvtne2ps2bf16 %xmm0, %xmm1, %xmm0\");\n+  asm(\"vcvtne2ps2bf16 %xmm6, %xmm7, %xmm6\");\n+}\n+\n+void\n+convert_ymm_from_float_to_bfloat16 (void)\n+{\n+  asm(\"vcvtne2ps2bf16 %ymm0, %ymm1, %ymm0\");\n+  asm(\"vcvtne2ps2bf16 %ymm6, %ymm7, %ymm6\");\n+}\n+\n+void\n+convert_zmm_from_float_to_bfloat16 (void)\n+{\n+  asm(\"vcvtne2ps2bf16 %zmm0, %zmm1, %zmm0\");\n+  asm(\"vcvtne2ps2bf16 %zmm6, %zmm7, %zmm6\");\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  /* Move initial values from array to registers and read from XMM regs.  */\n+  move_data_to_xmm_reg ();\n+  convert_xmm_from_float_to_bfloat16 ();\n+  asm (\"nop\"); /* first breakpoint here  */\n+\n+  /* Move initial values from array to registers and read from YMM regs.  */\n+  move_data_to_ymm_reg ();\n+  convert_ymm_from_float_to_bfloat16 ();\n+  asm (\"nop\"); /* second breakpoint here  */\n+\n+  /* Move initial values from array to registers and read from ZMM regs.  */\n+  move_data_to_zmm_reg ();\n+  convert_zmm_from_float_to_bfloat16 ();\n+  asm (\"nop\"); /* third breakpoint here  */\n+\n+  return 0;\n+}"
    },
    {
      "sha": "5f90d8aca28715cb56b1db2a20d7aa00042eff1f",
      "filename": "gdb/testsuite/gdb.arch/x86-avx512bf16.exp",
      "status": "added",
      "additions": 74,
      "deletions": 0,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/testsuite/gdb.arch/x86-avx512bf16.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/testsuite/gdb.arch/x86-avx512bf16.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/x86-avx512bf16.exp?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -0,0 +1,74 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Please email any bugs, comments, and/or additions to this file to:\n+# bug-gdb@gnu.org\n+\n+# Test bfloat16 support in AVX512 registers\n+\n+if { [skip_avx512bf16_tests] } {\n+    unsupported \"target does not support AVX512BF16\"\n+    return -1\n+}\n+\n+standard_testfile\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] } {\n+    return -1\n+}\n+\n+if { ![runto_main] } {\n+    unsupported \"could not run to main\"\n+    return -1\n+}\n+\n+# Test xmm\n+set line1 [gdb_get_line_number \"first breakpoint here\"]\n+gdb_breakpoint $line1\n+gdb_continue_to_breakpoint \"line1\" \".*$srcfile:$line1.*\"\n+\n+gdb_test \"print \\$xmm0.v8_bfloat16\" \\\n+    \"= \\\\{0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875\\\\}\"\n+\n+gdb_test \"print \\$xmm6.v8_bfloat16\" \\\n+    \"= \\\\{3, 3.125, 3.25, 3.375, 3.5, 3.625, 3.75, 3.875\\\\}\"\n+\n+# Test ymm\n+set line2 [gdb_get_line_number \"second breakpoint here\"]\n+gdb_breakpoint $line2\n+gdb_continue_to_breakpoint \"line2\" \".*$srcfile:$line2.*\"\n+\n+gdb_test \"print \\$ymm0.v16_bfloat16\\[1\\]\" \"= 8.25\"\n+gdb_test \"print \\$ymm6.v16_bfloat16\\[1\\]\" \"= 20.25\"\n+\n+# Test zmm\n+set line3 [gdb_get_line_number \"third breakpoint here\"]\n+gdb_breakpoint $line3\n+gdb_continue_to_breakpoint \"line3\" \".*$srcfile:$line3.*\"\n+\n+gdb_test \"print \\$zmm0.v32_bfloat16\\[1\\]\" \"= 20.5\"\n+gdb_test \"print \\$zmm6.v32_bfloat16\\[1\\]\" \"= 68.5\"\n+\n+# Test setting of bfloat values\n+gdb_test_no_output \"set var \\$xmm0.v8_bfloat16\\[0\\] = 32.25\" \\\n+    \"set %xmm0.v8_bfloat16\\[0\\]\"\n+gdb_test_no_output \"set var \\$ymm8.v16_bfloat16\\[1\\] = 33.5\" \\\n+    \"set %ymm8.v16_bfloat16\\[1\\]\"\n+gdb_test_no_output \"set var \\$zmm16.v32_bfloat16\\[2\\] = 22.75\" \\\n+    \"set %zmm16.v32_bfloat16\\[2\\]\"\n+\n+gdb_test \"p \\$xmm0.v8_bfloat16\\[0\\]\" \"= 32.25\"\n+gdb_test \"p \\$ymm8.v16_bfloat16\\[1\\]\" \"= 33.5\"\n+gdb_test \"p \\$zmm16.v32_bfloat16\\[2\\]\" \"= 22.75\""
    },
    {
      "sha": "653f145c1ce96843ebcc7d9661c16216c2946f82",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -3061,6 +3061,57 @@ gdb_caching_proc skip_tsx_tests {\n     return $skip_tsx_tests\n }\n \n+# Run a test on the target to see if it supports avx512bf16.  Return 0 if so,\n+# 1 if it does not.  Based on 'check_vmx_hw_available' from the GCC testsuite.\n+\n+gdb_caching_proc skip_avx512bf16_tests {\n+    global srcdir subdir gdb_prompt inferior_exited_re\n+\n+    set me \"skip_avx512bf16_tests\"\n+    if { ![istarget \"i?86-*-*\"] && ![istarget \"x86_64-*-*\"] } {\n+        verbose \"$me:  target does not support avx512bf16, returning 1\" 2\n+        return 1\n+    }\n+\n+    # Compile a test program.\n+    set src {\n+        int main() {\n+            asm volatile (\"vcvtne2ps2bf16 %xmm0, %xmm1, %xmm0\");\n+            return 0;\n+        }\n+    }\n+    if {![gdb_simple_compile $me $src executable]} {\n+        return 1\n+    }\n+\n+    # No error message, compilation succeeded so now run it via gdb.\n+\n+    gdb_exit\n+    gdb_start\n+    gdb_reinitialize_dir $srcdir/$subdir\n+    gdb_load \"$obj\"\n+    gdb_run_cmd\n+    gdb_expect {\n+        -re \".*Illegal instruction.*${gdb_prompt} $\" {\n+            verbose -log \"$me:  avx512bf16 hardware not detected.\"\n+            set skip_avx512bf16_tests 1\n+        }\n+        -re \".*$inferior_exited_re normally.*${gdb_prompt} $\" {\n+            verbose -log \"$me:  avx512bf16 hardware detected.\"\n+            set skip_avx512bf16_tests 0\n+        }\n+        default {\n+            warning \"\\n$me:  default case taken.\"\n+            set skip_avx512bf16_tests 1\n+        }\n+    }\n+    gdb_exit\n+    remote_file build delete $obj\n+\n+    verbose \"$me:  returning $skip_avx512bf16_tests\" 2\n+    return $skip_avx512bf16_tests\n+}\n+\n # Run a test on the target to see if it supports btrace hardware.  Return 0 if so,\n # 1 if it does not.  Based on 'check_vmx_hw_available' from the GCC testsuite.\n "
    },
    {
      "sha": "c2a3af700e3caa8315faaec6e49081c79eb6bc49",
      "filename": "gdbsupport/tdesc.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdbsupport/tdesc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdbsupport/tdesc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/tdesc.cc?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -54,7 +54,8 @@ static tdesc_type_builtin tdesc_predefined_types[] =\n   { \"ieee_single\", TDESC_TYPE_IEEE_SINGLE },\n   { \"ieee_double\", TDESC_TYPE_IEEE_DOUBLE },\n   { \"arm_fpa_ext\", TDESC_TYPE_ARM_FPA_EXT },\n-  { \"i387_ext\", TDESC_TYPE_I387_EXT }\n+  { \"i387_ext\", TDESC_TYPE_I387_EXT },\n+  { \"bfloat16\", TDESC_TYPE_BFLOAT16 }\n };\n \n void tdesc_feature::accept (tdesc_element_visitor &v) const"
    },
    {
      "sha": "14b5b5fc9b399dbcaf531959522ec269a6105f62",
      "filename": "gdbsupport/tdesc.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdbsupport/tdesc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a67f09db1b70bf55fa88cf2dbb6755210e0e218/gdbsupport/tdesc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/tdesc.h?ref=2a67f09db1b70bf55fa88cf2dbb6755210e0e218",
      "patch": "@@ -173,6 +173,7 @@ enum tdesc_type_kind\n   TDESC_TYPE_IEEE_DOUBLE,\n   TDESC_TYPE_ARM_FPA_EXT,\n   TDESC_TYPE_I387_EXT,\n+  TDESC_TYPE_BFLOAT16,\n \n   /* Types defined by a target feature.  */\n   TDESC_TYPE_VECTOR,"
    }
  ]
}