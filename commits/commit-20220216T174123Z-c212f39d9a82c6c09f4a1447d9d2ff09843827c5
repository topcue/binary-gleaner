{
  "sha": "c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
  "node_id": "C_kwDOANOeidoAKGMyMTJmMzlkOWE4MmM2YzA5ZjRhMTQ0N2Q5ZDJmZjA5ODQzODI3YzU",
  "commit": {
    "author": {
      "name": "Fangrui Song",
      "email": "maskray@google.com",
      "date": "2022-02-16T17:41:23Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2022-02-16T17:41:23Z"
    },
    "message": "ld: Support customized output section type\n\nbfd/\n    PR ld/28841\n    * bfd-in2.h (struct bfd_section): Add type.\n    (discarded_section): Add field.\n    * elf.c (elf_fake_sections): Handle bfd_section::type.\n    * section.c (BFD_FAKE_SECTION): Add field.\n    * mri.c (mri_draw_tree): Update function call.\n\nld/\n    PR ld/28841\n    * ld.texi: Document new output section type.\n    * ldlex.l: Add new token TYPE.\n    * ldgram.y: Handle TYPE=exp.\n    * ldlang.h: Add type_section to list of section types.\n    * ldlang.c (lang_add_section): Handle type_section.\n    (map_input_to_output_sections): Handle type_section.\n    * testsuite/ld-scripts/output-section-types.t: Add tests.\n    * testsuite/ld-scripts/output-section-types.d: Update.",
    "tree": {
      "sha": "4dcd736239b6373674032ce36fa62ecd9ea67883",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4dcd736239b6373674032ce36fa62ecd9ea67883"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/comments",
  "author": {
    "login": "MaskRay",
    "id": 416322,
    "node_id": "MDQ6VXNlcjQxNjMyMg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/416322?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MaskRay",
    "html_url": "https://github.com/MaskRay",
    "followers_url": "https://api.github.com/users/MaskRay/followers",
    "following_url": "https://api.github.com/users/MaskRay/following{/other_user}",
    "gists_url": "https://api.github.com/users/MaskRay/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MaskRay/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MaskRay/subscriptions",
    "organizations_url": "https://api.github.com/users/MaskRay/orgs",
    "repos_url": "https://api.github.com/users/MaskRay/repos",
    "events_url": "https://api.github.com/users/MaskRay/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MaskRay/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1f841a9348f189a8ee4423eb416d6e5495b5b49d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f841a9348f189a8ee4423eb416d6e5495b5b49d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1f841a9348f189a8ee4423eb416d6e5495b5b49d"
    }
  ],
  "stats": {
    "total": 160,
    "additions": 131,
    "deletions": 29
  },
  "files": [
    {
      "sha": "e959a787d9b1dc97753575e46379ceac47530b3e",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -1,3 +1,13 @@\n+2022-02-16  Fangrui Song  <maskray@google.com>\n+\tNick Clifton  <nickc@redhat.com>\n+\n+\tPR ld/28841\n+\t* bfd-in2.h (struct bfd_section): Add type.\n+\t(discarded_section): Add field.\n+\t* elf.c (elf_fake_sections): Handle bfd_section::type.\n+\t* section.c (BFD_FAKE_SECTION): Add field.\n+\t* mri.c (mri_draw_tree): Update function call.\n+\n 2022-02-11  Michael Forney  <mforney@mforney.org>\n \n         * bfd.c (bfd_set_gp_value): Remove return with expression"
    },
    {
      "sha": "78a0a1dea420f0a35752e7485eb549f8524293ab",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -1170,6 +1170,9 @@ typedef struct bfd_section\n     This is used when support for non-contiguous memory regions is enabled.  */\n  struct bfd_section *already_assigned;\n \n+  /* Explicitly specified section type, if non-zero. */\n+  unsigned int type;\n+\n } asection;\n \n /* Relax table contains information about instructions which can\n@@ -1352,8 +1355,8 @@ discarded_section (const asection *sec)\n   /* symbol,                    symbol_ptr_ptr,                     */ \\\n      (struct bfd_symbol *) SYM, &SEC.symbol,                           \\\n                                                                        \\\n-  /* map_head, map_tail, already_assigned                           */ \\\n-     { NULL }, { NULL }, NULL                                          \\\n+  /* map_head, map_tail, already_assigned, type                     */ \\\n+     { NULL }, { NULL }, NULL, 0                                       \\\n                                                                        \\\n     }\n "
    },
    {
      "sha": "82b53be99f99f71974bab96b9c219cb1bf5e2d43",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -3280,7 +3280,9 @@ elf_fake_sections (bfd *abfd, asection *asect, void *fsarg)\n \n   /* If the section type is unspecified, we set it based on\n      asect->flags.  */\n-  if ((asect->flags & SEC_GROUP) != 0)\n+  if (asect->type != 0)\n+    sh_type = asect->type;\n+  else if ((asect->flags & SEC_GROUP) != 0)\n     sh_type = SHT_GROUP;\n   else\n     sh_type = bfd_elf_get_default_section_type (asect->flags);"
    },
    {
      "sha": "2de7dbf661ac7c99d0e11a5c1dab510a680fb3af",
      "filename": "bfd/section.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/bfd/section.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/bfd/section.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/section.c?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -737,8 +737,8 @@ CODE_FRAGMENT\n .  {* symbol,                    symbol_ptr_ptr,                     *}\t\\\n .     (struct bfd_symbol *) SYM, &SEC.symbol,\t\t\t\t\\\n .\t\t\t\t\t\t\t\t\t\\\n-.  {* map_head, map_tail, already_assigned                           *}\t\\\n-.     { NULL }, { NULL }, NULL\t\t\t\t\t\t\\\n+.  {* map_head, map_tail, already_assigned, type                     *}\t\\\n+.     { NULL }, { NULL }, NULL, 0\t\t\t\t\t\t\\\n .\t\t\t\t\t\t\t\t\t\\\n .    }\n ."
    },
    {
      "sha": "63c9c71be4fa042da87bd116a0f770149f31266b",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -1,3 +1,16 @@\n+2022-02-16  Fangrui Song  <maskray@google.com>\n+\tNick Clifton  <nickc@redhat.com>\n+\n+\tPR ld/28841\n+\t* ld.texi: Document new output section type.\n+\t* ldlex.l: Add new token TYPE.\n+\t* ldgram.y: Handle TYPE=exp and READONLY (TYPE=exp).\n+\t* ldlang.h: Add type_section to list of section types.\n+\t* ldlang.c (lang_add_section): Handle type_section.\n+\t(map_input_to_output_sections): Handle type_section.\n+\t* testsuite/ld-scripts/output-section-types.t: Add tests.\n+\t* testsuite/ld-scripts/output-section-types.d: Update.\n+\n 2022-02-02  Nick Clifton  <nickc@redhat.com>\n \n \t* po/fr.po: Updated French translation."
    },
    {
      "sha": "a498abaf0f9beba85081b6ce86f2ab6075ac0dd6",
      "filename": "ld/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/NEWS?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -1,5 +1,8 @@\n -*- text -*-\n \n+* TYPE=<type> is now supported in an output section description to set the\n+  section type value.\n+\n Changes in 2.38:\n \n * Add -z pack-relative-relocs/-z no pack-relative-relocs to x86 ELF"
    },
    {
      "sha": "d57e92214108c7cb466c575e7226bdba05b43edf",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 13,
      "deletions": 3,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -5483,13 +5483,23 @@ loaded into memory when the program is run.\n @item READONLY\n The section should be marked as read-only.\n @item DSECT\n-@itemx COPY\n-@itemx INFO\n-@itemx OVERLAY\n+@item COPY\n+@item INFO\n+@item OVERLAY\n These type names are supported for backward compatibility, and are\n rarely used.  They all have the same effect: the section should be\n marked as not allocatable, so that no memory is allocated for the\n section when the program is run.\n+@item TYPE = @var{type}\n+Set the section type to the integer @var{type}. When generating an ELF\n+output file, type names @code{SHT_PROGBITS}, @code{SHT_STRTAB},\n+@code{SHT_NOTE}, @code {SHT_NOBITS}, @code{SHT_INIT_ARRAY},\n+@code{SHT_FINI_ARRAY}, and @code{SHT_PREINIT_ARRAY} are also allowed\n+for @var{type}.  It is the user's responsibility to ensure that any\n+special requirements of the section type are met.\n+@item READONLY ( TYPE = @var{type} )\n+This form of the syntax combines the @var{READONLY} type with the\n+type specified by @var{type}.\n @end table\n \n @kindex NOLOAD"
    },
    {
      "sha": "3a904e39482640d62fda6fa3db01a52980c48191",
      "filename": "ld/ldgram.y",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ldgram.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ldgram.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldgram.y?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -47,6 +47,7 @@\n #endif\n \n static enum section_type sectype;\n+static etree_type *sectype_value;\n static lang_memory_region_type *region;\n \n static bool ldgram_had_keep = false;\n@@ -139,6 +140,7 @@ static int error_index;\n %token LD_FEATURE\n %token NOLOAD DSECT COPY INFO OVERLAY\n %token READONLY\n+%token TYPE\n %token DEFINED TARGET_K SEARCH_DIR MAP ENTRY\n %token <integer> NEXT\n %token SIZEOF ALIGNOF ADDR LOADADDR MAX_K MIN_K\n@@ -1058,9 +1060,8 @@ section:\tNAME\n \t\t\t{\n \t\t\t  ldlex_popstate ();\n \t\t\t  ldlex_wild ();\n-\t\t\t  lang_enter_output_section_statement($1, $3, sectype,\n-\t\t\t\t\t\t\t      $5, $7, $4,\n-\t\t\t\t\t\t\t      $8, $6);\n+\t\t\t  lang_enter_output_section_statement ($1, $3, sectype,\n+\t\t\t\t\tsectype_value, $5, $7, $4, $8, $6);\n \t\t\t}\n \t\t'{'\n \t\tstatement_list_opt\n@@ -1130,8 +1131,10 @@ type:\n \t|  COPY    { sectype = noalloc_section; }\n \t|  INFO    { sectype = noalloc_section; }\n \t|  OVERLAY { sectype = noalloc_section; }\n+        |  READONLY '(' TYPE '=' exp ')' { sectype = typed_readonly_section; sectype_value = $5; }\n \t|  READONLY { sectype = readonly_section; }\n-\t;\n+\t|  TYPE '=' exp { sectype = type_section; sectype_value = $3; }\n+        ;\n \n atype:\n \t\t'(' type ')'"
    },
    {
      "sha": "1733f8e65c4d20786a5b7ad3eb896f378c3781ed",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 49,
      "deletions": 6,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -1891,8 +1891,8 @@ lang_insert_orphan (asection *s,\n     address = exp_intop (0);\n \n   os_tail = (lang_output_section_statement_type **) lang_os_list.tail;\n-  os = lang_enter_output_section_statement (secname, address, normal_section,\n-\t\t\t\t\t    NULL, NULL, NULL, constraint, 0);\n+  os = lang_enter_output_section_statement (\n+      secname, address, normal_section, 0, NULL, NULL, NULL, constraint, 0);\n \n   if (add_child == NULL)\n     add_child = &os->children;\n@@ -2635,10 +2635,12 @@ lang_add_section (lang_statement_list_type *ptr,\n     case normal_section:\n     case overlay_section:\n     case first_overlay_section:\n+    case type_section:\n       break;\n     case noalloc_section:\n       flags &= ~SEC_ALLOC;\n       break;\n+    case typed_readonly_section:\n     case readonly_section:\n       flags |= SEC_READONLY;\n       break;\n@@ -4209,6 +4211,7 @@ map_input_to_output_sections\n     {\n       lang_output_section_statement_type *tos;\n       flagword flags;\n+      unsigned int type = 0;\n \n       switch (s->header.type)\n \t{\n@@ -4264,6 +4267,42 @@ map_input_to_output_sections\n \t    case readonly_section:\n \t      flags |= SEC_READONLY;\n \t      break;\n+\t    case typed_readonly_section:\n+\t      flags |= SEC_READONLY;\n+\t      /* Fall through.  */\n+\t    case type_section:\n+\t      if (os->sectype_value->type.node_class == etree_name\n+\t\t  && os->sectype_value->type.node_code == NAME)\n+\t\t{\n+\t\t  const char *name = os->sectype_value->name.name;\n+\t\t  if (strcmp (name, \"SHT_PROGBITS\") == 0)\n+\t\t    type = SHT_PROGBITS;\n+\t\t  else if (strcmp (name, \"SHT_STRTAB\") == 0)\n+\t\t    type = SHT_STRTAB;\n+\t\t  else if (strcmp (name, \"SHT_NOTE\") == 0)\n+\t\t    type = SHT_NOTE;\n+\t\t  else if (strcmp (name, \"SHT_NOBITS\") == 0)\n+\t\t    type = SHT_NOBITS;\n+\t\t  else if (strcmp (name, \"SHT_INIT_ARRAY\") == 0)\n+\t\t    type = SHT_INIT_ARRAY;\n+\t\t  else if (strcmp (name, \"SHT_FINI_ARRAY\") == 0)\n+\t\t    type = SHT_FINI_ARRAY;\n+\t\t  else if (strcmp (name, \"SHT_PREINIT_ARRAY\") == 0)\n+\t\t    type = SHT_PREINIT_ARRAY;\n+\t\t  else\n+\t\t    einfo (_ (\"%F%P: invalid type for output section `%s'\\n\"),\n+\t\t\t   os->name);\n+\t\t}\n+\t     else\n+\t       {\n+\t\t exp_fold_tree_no_dot (os->sectype_value);\n+\t\t if (expld.result.valid_p)\n+\t\t   type = expld.result.value;\n+\t\t else\n+\t\t   einfo (_ (\"%F%P: invalid type for output section `%s'\\n\"),\n+\t\t\t  os->name);\n+\t       }\n+\t      break;\n \t    case noload_section:\n \t      if (bfd_get_flavour (link_info.output_bfd)\n \t\t  == bfd_target_elf_flavour)\n@@ -4276,6 +4315,7 @@ map_input_to_output_sections\n \t    init_os (os, flags | SEC_READONLY);\n \t  else\n \t    os->bfd_section->flags |= flags;\n+\t  os->bfd_section->type = type;\n \t  break;\n \tcase lang_input_section_enum:\n \t  break;\n@@ -7506,6 +7546,7 @@ lang_output_section_statement_type *\n lang_enter_output_section_statement (const char *output_section_statement_name,\n \t\t\t\t     etree_type *address_exp,\n \t\t\t\t     enum section_type sectype,\n+\t\t\t\t     etree_type *sectype_value,\n \t\t\t\t     etree_type *align,\n \t\t\t\t     etree_type *subalign,\n \t\t\t\t     etree_type *ebase,\n@@ -7523,10 +7564,12 @@ lang_enter_output_section_statement (const char *output_section_statement_name,\n       os->addr_tree = address_exp;\n     }\n   os->sectype = sectype;\n-  if (sectype != noload_section)\n-    os->flags = SEC_NO_FLAGS;\n-  else\n+  if (sectype == type_section || sectype == typed_readonly_section)\n+    os->sectype_value = sectype_value;\n+  else if (sectype == noload_section)\n     os->flags = SEC_NEVER_LOAD;\n+  else\n+    os->flags = SEC_NO_FLAGS;\n   os->block_value = 1;\n \n   /* Make next things chain into subchain of this.  */\n@@ -8842,7 +8885,7 @@ lang_enter_overlay_section (const char *name)\n   etree_type *size;\n \n   lang_enter_output_section_statement (name, overlay_vma, overlay_section,\n-\t\t\t\t       0, overlay_subalign, 0, 0, 0);\n+\t\t\t\t       0, 0, overlay_subalign, 0, 0, 0);\n \n   /* If this is the first section, then base the VMA of future\n      sections on this one.  This will work correctly even if `.' is"
    },
    {
      "sha": "95f6e468b300c688a764df2c56cc1cf35702c5ce",
      "filename": "ld/ldlang.h",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ldlang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ldlang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.h?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -122,7 +122,9 @@ enum section_type\n   overlay_section,\n   noload_section,\n   noalloc_section,\n-  readonly_section\n+  type_section,\n+  readonly_section,\n+  typed_readonly_section\n };\n \n /* This structure holds a list of program headers describing\n@@ -166,6 +168,7 @@ typedef struct lang_output_section_statement_struct\n   int constraint;\n   flagword flags;\n   enum section_type sectype;\n+  etree_type *sectype_value;\n   unsigned int processed_vma : 1;\n   unsigned int processed_lma : 1;\n   unsigned int all_input_readonly : 1;\n@@ -545,7 +548,7 @@ extern void lang_add_output\n   (const char *, int from_script);\n extern lang_output_section_statement_type *lang_enter_output_section_statement\n   (const char *, etree_type *, enum section_type, etree_type *, etree_type *,\n-   etree_type *, int, int);\n+   etree_type *, etree_type *, int, int);\n extern void lang_final\n   (void);\n extern void lang_relax_sections"
    },
    {
      "sha": "c38b46b933673a1551e93786156a8d66561c198b",
      "filename": "ld/ldlex.l",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ldlex.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/ldlex.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlex.l?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -323,6 +323,7 @@ V_IDENTIFIER [*?.$_a-zA-Z\\[\\]\\-\\!\\^\\\\]([*?.$_a-zA-Z0-9\\[\\]\\-\\!\\^\\\\]|::)*\n <EXPRESSION>\"DSECT\"\t\t\t{ RTOKEN(DSECT); }\n <EXPRESSION>\"COPY\"\t\t\t{ RTOKEN(COPY); }\n <EXPRESSION>\"INFO\"\t\t\t{ RTOKEN(INFO); }\n+<EXPRESSION>\"TYPE\"\t\t\t{ RTOKEN(TYPE); }\n <SCRIPT,EXPRESSION>\"ONLY_IF_RO\"\t\t{ RTOKEN(ONLY_IF_RO); }\n <SCRIPT,EXPRESSION>\"ONLY_IF_RW\"\t\t{ RTOKEN(ONLY_IF_RW); }\n <SCRIPT,EXPRESSION>\"SPECIAL\"\t\t{ RTOKEN(SPECIAL); }"
    },
    {
      "sha": "5749870ef1ea73344bd2a53c1f7e5cfe1dd379eb",
      "filename": "ld/mri.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/mri.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/mri.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/mri.c?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -210,8 +210,8 @@ mri_draw_tree (void)\n \t    base = p->vma ? p->vma : exp_nameop (NAME, \".\");\n \n \t  lang_enter_output_section_statement (p->name, base,\n-\t\t\t\t\t       p->ok_to_load ? normal_section : noload_section,\n-\t\t\t\t\t       align, subalign, NULL, 0, 0);\n+\t    p->ok_to_load ? normal_section : noload_section, 0,\n+\t    align, subalign, NULL, 0, 0);\n \t  base = 0;\n \t  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);\n \t  tmp->next = NULL;"
    },
    {
      "sha": "2ecacaba57d88ce972ce30143248851035bcecac",
      "filename": "ld/testsuite/ld-scripts/output-section-types.d",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/testsuite/ld-scripts/output-section-types.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/testsuite/ld-scripts/output-section-types.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-scripts/output-section-types.d?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -1,13 +1,17 @@\n #ld: -Toutput-section-types.t\n #source: align2a.s\n-#objdump: -h\n+#readelf: -S --wide\n #target: [is_elf_format]\n \n #...\n-  . \\.rom.*\n-[ \t]+ALLOC, READONLY\n-  . \\.ro.*\n-[ \t]+CONTENTS, ALLOC, LOAD, READONLY, DATA\n-  . \\.over.*\n-[ \t]+CONTENTS, READONLY\n+.* .rom          +NOBITS        +[0-9a-f]+ +[0-9a-f]+ +[0-9a-f]+ +00 +A +0 +0 +[1248]\n+.* .ro           +PROGBITS      +[0-9a-f]+ +[0-9a-f]+ +[0-9a-f]+ +00 +A +0 +0 +[1248]\n+.* .over         +PROGBITS      +[0-9a-f]+ +[0-9a-f]+ +[0-9a-f]+ +00  + +0 +0 +[1248]\n+.* progbits      +PROGBITS      +[0-9a-f]+ +[0-9a-f]+ +[0-9a-f]+ +00 +A +0 +0 +[1248]\n+.* strtab        +STRTAB        +[0-9a-f]+ +[0-9a-f]+ +[0-9a-f]+ +00 +A +0 +0 +[1248]\n+.* note          +NOTE          +[0-9a-f]+ +[0-9a-f]+ +[0-9a-f]+ +00 +A +0 +0 +[1248]\n+.* init_array    +INIT_ARRAY    +[0-9a-f]+ +[0-9a-f]+ +[0-9a-f]+ +0[48] +A +0 +0 +[1248]\n+.* fini_array    +FINI_ARRAY    +[0-9a-f]+ +[0-9a-f]+ +[0-9a-f]+ +0[48] +A +0 +0 +[1248]\n+.* preinit_array +PREINIT_ARRAY +[0-9a-f]+ +[0-9a-f]+ +[0-9a-f]+ +0[48] +A +0 +0 +[1248]\n+.* .ro.note      +NOTE          +[0-9a-f]+ +[0-9a-f]+ +[0-9a-f]+ +00 +A +0 +0 +[1248]\n #pass"
    },
    {
      "sha": "18fc5c119805fa50e8e1931a8886909417b49de8",
      "filename": "ld/testsuite/ld-scripts/output-section-types.t",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/testsuite/ld-scripts/output-section-types.t",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c212f39d9a82c6c09f4a1447d9d2ff09843827c5/ld/testsuite/ld-scripts/output-section-types.t",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-scripts/output-section-types.t?ref=c212f39d9a82c6c09f4a1447d9d2ff09843827c5",
      "patch": "@@ -2,6 +2,13 @@ SECTIONS {\n   .rom  (NOLOAD)   : { LONG(1234); }\n   .ro   (READONLY) : { LONG(5678); }\n   .over (OVERLAY)  : { LONG(0123); }\n+  progbits (TYPE=SHT_PROGBITS) : { BYTE(1) }\n+  strtab (TYPE = SHT_STRTAB) : { BYTE(0) }\n+  note (TYPE =SHT_NOTE) : { BYTE(8) }\n+  init_array (TYPE= 14) : { QUAD(14) }\n+  fini_array ( TYPE=SHT_FINI_ARRAY) : { QUAD(15) }\n+  preinit_array (TYPE=SHT_PREINIT_ARRAY ) : { QUAD(16) }\n+  .ro.note   (READONLY (TYPE=SHT_NOTE)) : { LONG(5678); }\n   /DISCARD/        : { *(*) }\n \n }"
    }
  ]
}