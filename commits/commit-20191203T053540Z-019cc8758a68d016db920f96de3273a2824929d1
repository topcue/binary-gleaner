{
  "sha": "019cc8758a68d016db920f96de3273a2824929d1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDE5Y2M4NzU4YTY4ZDAxNmRiOTIwZjk2ZGUzMjczYTI4MjQ5MjlkMQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-29T22:42:29Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-03T05:35:40Z"
    },
    "message": "dwarf2.c: read_abbrevs fail cleanup, and offset checking\n\nread_section does offset checking, reporting an error on out of\nbounds.  There's no need to duplicate the check in functions calling\nread_section.  Also, I spotted a place where a pointer difference\nexpression was being cast to unsigned int, possibly truncating\nrelevant bits on a 64-bit host.\n\n\t* dwarf2.c (read_indirect_string): Don't duplicate offset check\n\tdone in read_section.\n\t(read_indirect_line_string): Likewise.\n\t(read_alt_indirect_string): Likewise.\n\t(read_alt_indirect_ref): Likewise.\n\t(read_abbrevs): Likewise.  Free memory on all failure paths.\n\tUse correct unsigned type for pointer difference comparison.",
    "tree": {
      "sha": "0936437a5a17c7aea43823eb52fcb646de79e1b8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0936437a5a17c7aea43823eb52fcb646de79e1b8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/019cc8758a68d016db920f96de3273a2824929d1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/019cc8758a68d016db920f96de3273a2824929d1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/019cc8758a68d016db920f96de3273a2824929d1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/019cc8758a68d016db920f96de3273a2824929d1/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1b8e12713b399450f8befc5f52442219f1f63669",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b8e12713b399450f8befc5f52442219f1f63669",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1b8e12713b399450f8befc5f52442219f1f63669"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 32,
    "deletions": 29
  },
  "files": [
    {
      "sha": "f299ff15935eb8b8dcecf884cb43c4b45a6b7b42",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/019cc8758a68d016db920f96de3273a2824929d1/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/019cc8758a68d016db920f96de3273a2824929d1/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=019cc8758a68d016db920f96de3273a2824929d1",
      "patch": "@@ -1,3 +1,13 @@\n+2019-12-03  Alan Modra  <amodra@gmail.com>\n+\n+\t* dwarf2.c (read_indirect_string): Don't duplicate offset check\n+\tdone in read_section.\n+\t(read_indirect_line_string): Likewise.\n+\t(read_alt_indirect_string): Likewise.\n+\t(read_alt_indirect_ref): Likewise.\n+\t(read_abbrevs): Likewise.  Free memory on all failure paths.\n+\tUse correct unsigned type for pointer difference comparison.\n+\n 2019-12-03  Alan Modra  <amodra@gmail.com>\n \n \t* dwarf2.c (struct dwarf2_debug): Update comments.  Remove sec"
    },
    {
      "sha": "0d5d84ea4c7342bc683a219447c0c9795b13ad37",
      "filename": "bfd/dwarf2.c",
      "status": "modified",
      "additions": 22,
      "deletions": 29,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/019cc8758a68d016db920f96de3273a2824929d1/bfd/dwarf2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/019cc8758a68d016db920f96de3273a2824929d1/bfd/dwarf2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/dwarf2.c?ref=019cc8758a68d016db920f96de3273a2824929d1",
      "patch": "@@ -721,8 +721,6 @@ read_indirect_string (struct comp_unit * unit,\n \t\t      &stash->dwarf_str_buffer, &stash->dwarf_str_size))\n     return NULL;\n \n-  if (offset >= stash->dwarf_str_size)\n-    return NULL;\n   str = (char *) stash->dwarf_str_buffer + offset;\n   if (*str == '\\0')\n     return NULL;\n@@ -760,8 +758,6 @@ read_indirect_line_string (struct comp_unit * unit,\n \t\t      &stash->dwarf_line_str_size))\n     return NULL;\n \n-  if (offset >= stash->dwarf_line_str_size)\n-    return NULL;\n   str = (char *) stash->dwarf_line_str_buffer + offset;\n   if (*str == '\\0')\n     return NULL;\n@@ -825,8 +821,6 @@ read_alt_indirect_string (struct comp_unit * unit,\n \t\t      &stash->alt_dwarf_str_size))\n     return NULL;\n \n-  if (offset >= stash->alt_dwarf_str_size)\n-    return NULL;\n   str = (char *) stash->alt_dwarf_str_buffer + offset;\n   if (*str == '\\0')\n     return NULL;\n@@ -874,8 +868,6 @@ read_alt_indirect_ref (struct comp_unit * unit,\n \t\t      &stash->alt_dwarf_info_size))\n     return NULL;\n \n-  if (offset >= stash->alt_dwarf_info_size)\n-    return NULL;\n   return stash->alt_dwarf_info_buffer + offset;\n }\n \n@@ -963,9 +955,6 @@ read_abbrevs (bfd *abfd, bfd_uint64_t offset, struct dwarf2_debug *stash)\n \t\t      &stash->dwarf_abbrev_buffer, &stash->dwarf_abbrev_size))\n     return NULL;\n \n-  if (offset >= stash->dwarf_abbrev_size)\n-    return NULL;\n-\n   amt = sizeof (struct abbrev_info*) * ABBREV_HASH_SIZE;\n   abbrevs = (struct abbrev_info **) bfd_zalloc (abfd, amt);\n   if (abbrevs == NULL)\n@@ -983,7 +972,7 @@ read_abbrevs (bfd *abfd, bfd_uint64_t offset, struct dwarf2_debug *stash)\n       amt = sizeof (struct abbrev_info);\n       cur_abbrev = (struct abbrev_info *) bfd_zalloc (abfd, amt);\n       if (cur_abbrev == NULL)\n-\treturn NULL;\n+\tgoto fail;\n \n       /* Read in abbrev header.  */\n       cur_abbrev->number = abbrev_number;\n@@ -1025,21 +1014,7 @@ read_abbrevs (bfd *abfd, bfd_uint64_t offset, struct dwarf2_debug *stash)\n \t      amt *= sizeof (struct attr_abbrev);\n \t      tmp = (struct attr_abbrev *) bfd_realloc (cur_abbrev->attrs, amt);\n \t      if (tmp == NULL)\n-\t\t{\n-\t\t  size_t i;\n-\n-\t\t  for (i = 0; i < ABBREV_HASH_SIZE; i++)\n-\t\t    {\n-\t\t      struct abbrev_info *abbrev = abbrevs[i];\n-\n-\t\t      while (abbrev)\n-\t\t\t{\n-\t\t\t  free (abbrev->attrs);\n-\t\t\t  abbrev = abbrev->next;\n-\t\t\t}\n-\t\t    }\n-\t\t  return NULL;\n-\t\t}\n+\t\tgoto fail;\n \t      cur_abbrev->attrs = tmp;\n \t    }\n \n@@ -1063,7 +1038,7 @@ read_abbrevs (bfd *abfd, bfd_uint64_t offset, struct dwarf2_debug *stash)\n \t already read (which means we are about to read the abbreviations\n \t for the next compile unit) or if the end of the abbreviation\n \t table is reached.  */\n-      if ((unsigned int) (abbrev_ptr - stash->dwarf_abbrev_buffer)\n+      if ((size_t) (abbrev_ptr - stash->dwarf_abbrev_buffer)\n \t  >= stash->dwarf_abbrev_size)\n \tbreak;\n       abbrev_number = _bfd_safe_read_leb128 (abfd, abbrev_ptr,\n@@ -1072,8 +1047,26 @@ read_abbrevs (bfd *abfd, bfd_uint64_t offset, struct dwarf2_debug *stash)\n       if (lookup_abbrev (abbrev_number, abbrevs) != NULL)\n \tbreak;\n     }\n-\n   return abbrevs;\n+\n+ fail:\n+  if (abbrevs != NULL)\n+    {\n+      size_t i;\n+\n+      for (i = 0; i < ABBREV_HASH_SIZE; i++)\n+\t{\n+\t  struct abbrev_info *abbrev = abbrevs[i];\n+\n+\t  while (abbrev)\n+\t    {\n+\t      free (abbrev->attrs);\n+\t      abbrev = abbrev->next;\n+\t    }\n+\t}\n+      free (abbrevs);\n+    }\n+  return NULL;\n }\n \n /* Returns true if the form is one which has a string value.  */"
    }
  ]
}