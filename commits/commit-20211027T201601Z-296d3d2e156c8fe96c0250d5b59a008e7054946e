{
  "sha": "296d3d2e156c8fe96c0250d5b59a008e7054946e",
  "node_id": "C_kwDOANOeidoAKDI5NmQzZDJlMTU2YzhmZTk2YzAyNTBkNWI1OWEwMDhlNzA1NDk0NmU",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-10-04T18:38:23Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-10-27T20:16:01Z"
    },
    "message": "Fix watchpoints with multiple threads on Windows\n\nA recent internal change pointed out that watchpoints were not working\non Windows when the inferior was multi-threaded.  This happened\nbecause the debug registers were only updated for certain threads --\nin particular, those that were being resumed and that were not marked\nas suspended.  In the case of single-stepping, the need to update the\ndebug registers in other threads could also be \"forgotten\".\n\nThis patch changes windows-nat.c to mark all threads needing a debug\nregister update.  This brings the code closer to what gdbserver does\n(though, unfortunately, it still seems more complicated than needed).",
    "tree": {
      "sha": "68bd73b25e70e09614c550b93c3589b8a3f76b2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/68bd73b25e70e09614c550b93c3589b8a3f76b2d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/296d3d2e156c8fe96c0250d5b59a008e7054946e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/296d3d2e156c8fe96c0250d5b59a008e7054946e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/296d3d2e156c8fe96c0250d5b59a008e7054946e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/296d3d2e156c8fe96c0250d5b59a008e7054946e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "35da8c6140344db53eff53189abffd8cb0bec2bc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35da8c6140344db53eff53189abffd8cb0bec2bc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/35da8c6140344db53eff53189abffd8cb0bec2bc"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 20,
    "deletions": 51
  },
  "files": [
    {
      "sha": "f3201295f31a75318265cb46ed89a9942f095e84",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 20,
      "deletions": 51,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/296d3d2e156c8fe96c0250d5b59a008e7054946e/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/296d3d2e156c8fe96c0250d5b59a008e7054946e/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=296d3d2e156c8fe96c0250d5b59a008e7054946e",
      "patch": "@@ -123,8 +123,6 @@ enum\n \t| CONTEXT_EXTENDED_REGISTERS\n \n static uintptr_t dr[8];\n-static int debug_registers_changed;\n-static int debug_registers_used;\n \n static int windows_initialization_done;\n #define DR6_CLEAR_VALUE 0xffff0ff0\n@@ -386,40 +384,10 @@ windows_add_thread (ptid_t ptid, HANDLE h, void *tlb, bool main_thread_p)\n   else\n     add_thread (&the_windows_nat_target, ptid);\n \n-  /* Set the debug registers for the new thread if they are used.  */\n-  if (debug_registers_used)\n-    {\n-#ifdef __x86_64__\n-      if (wow64_process)\n-\t{\n-\t  /* Only change the value of the debug registers.  */\n-\t  th->wow64_context.ContextFlags = CONTEXT_DEBUG_REGISTERS;\n-\t  CHECK (Wow64GetThreadContext (th->h, &th->wow64_context));\n-\t  th->wow64_context.Dr0 = dr[0];\n-\t  th->wow64_context.Dr1 = dr[1];\n-\t  th->wow64_context.Dr2 = dr[2];\n-\t  th->wow64_context.Dr3 = dr[3];\n-\t  th->wow64_context.Dr6 = DR6_CLEAR_VALUE;\n-\t  th->wow64_context.Dr7 = dr[7];\n-\t  CHECK (Wow64SetThreadContext (th->h, &th->wow64_context));\n-\t  th->wow64_context.ContextFlags = 0;\n-\t}\n-      else\n-#endif\n-\t{\n-\t  /* Only change the value of the debug registers.  */\n-\t  th->context.ContextFlags = CONTEXT_DEBUG_REGISTERS;\n-\t  CHECK (GetThreadContext (th->h, &th->context));\n-\t  th->context.Dr0 = dr[0];\n-\t  th->context.Dr1 = dr[1];\n-\t  th->context.Dr2 = dr[2];\n-\t  th->context.Dr3 = dr[3];\n-\t  th->context.Dr6 = DR6_CLEAR_VALUE;\n-\t  th->context.Dr7 = dr[7];\n-\t  CHECK (SetThreadContext (th->h, &th->context));\n-\t  th->context.ContextFlags = 0;\n-\t}\n-    }\n+  /* It's simplest to always set this and update the debug\n+     registers.  */\n+  th->debug_registers_changed = true;\n+\n   return th;\n }\n \n@@ -593,7 +561,7 @@ windows_nat_target::fetch_registers (struct regcache *regcache, int r)\n \t  /* Copy dr values from that thread.\n \t     But only if there were not modified since last stop.\n \t     PR gdb/2388 */\n-\t  if (!debug_registers_changed)\n+\t  if (!th->debug_registers_changed)\n \t    {\n \t      dr[0] = th->wow64_context.Dr0;\n \t      dr[1] = th->wow64_context.Dr1;\n@@ -611,7 +579,7 @@ windows_nat_target::fetch_registers (struct regcache *regcache, int r)\n \t  /* Copy dr values from that thread.\n \t     But only if there were not modified since last stop.\n \t     PR gdb/2388 */\n-\t  if (!debug_registers_changed)\n+\t  if (!th->debug_registers_changed)\n \t    {\n \t      dr[0] = th->context.Dr0;\n \t      dr[1] = th->context.Dr1;\n@@ -1193,12 +1161,10 @@ windows_continue (DWORD continue_status, int id, int killed)\n   for (windows_thread_info *th : thread_list)\n     if (id == -1 || id == (int) th->tid)\n       {\n-\tif (!th->suspended)\n-\t  continue;\n #ifdef __x86_64__\n \tif (wow64_process)\n \t  {\n-\t    if (debug_registers_changed)\n+\t    if (th->debug_registers_changed)\n \t      {\n \t\tth->wow64_context.ContextFlags |= CONTEXT_DEBUG_REGISTERS;\n \t\tth->wow64_context.Dr0 = dr[0];\n@@ -1207,6 +1173,7 @@ windows_continue (DWORD continue_status, int id, int killed)\n \t\tth->wow64_context.Dr3 = dr[3];\n \t\tth->wow64_context.Dr6 = DR6_CLEAR_VALUE;\n \t\tth->wow64_context.Dr7 = dr[7];\n+\t\tth->debug_registers_changed = false;\n \t      }\n \t    if (th->wow64_context.ContextFlags)\n \t      {\n@@ -1227,7 +1194,7 @@ windows_continue (DWORD continue_status, int id, int killed)\n \telse\n #endif\n \t  {\n-\t    if (debug_registers_changed)\n+\t    if (th->debug_registers_changed)\n \t      {\n \t\tth->context.ContextFlags |= CONTEXT_DEBUG_REGISTERS;\n \t\tth->context.Dr0 = dr[0];\n@@ -1236,6 +1203,7 @@ windows_continue (DWORD continue_status, int id, int killed)\n \t\tth->context.Dr3 = dr[3];\n \t\tth->context.Dr6 = DR6_CLEAR_VALUE;\n \t\tth->context.Dr7 = dr[7];\n+\t\tth->debug_registers_changed = false;\n \t      }\n \t    if (th->context.ContextFlags)\n \t      {\n@@ -1268,7 +1236,6 @@ windows_continue (DWORD continue_status, int id, int killed)\n \t     \" (ContinueDebugEvent failed, error %u)\"),\n \t   (unsigned int) GetLastError ());\n \n-  debug_registers_changed = 0;\n   return res;\n }\n \n@@ -1365,14 +1332,15 @@ windows_nat_target::resume (ptid_t ptid, int step, enum gdb_signal sig)\n \n \t  if (th->wow64_context.ContextFlags)\n \t    {\n-\t      if (debug_registers_changed)\n+\t      if (th->debug_registers_changed)\n \t\t{\n \t\t  th->wow64_context.Dr0 = dr[0];\n \t\t  th->wow64_context.Dr1 = dr[1];\n \t\t  th->wow64_context.Dr2 = dr[2];\n \t\t  th->wow64_context.Dr3 = dr[3];\n \t\t  th->wow64_context.Dr6 = DR6_CLEAR_VALUE;\n \t\t  th->wow64_context.Dr7 = dr[7];\n+\t\t  th->debug_registers_changed = false;\n \t\t}\n \t      CHECK (Wow64SetThreadContext (th->h, &th->wow64_context));\n \t      th->wow64_context.ContextFlags = 0;\n@@ -1392,14 +1360,15 @@ windows_nat_target::resume (ptid_t ptid, int step, enum gdb_signal sig)\n \n \t  if (th->context.ContextFlags)\n \t    {\n-\t      if (debug_registers_changed)\n+\t      if (th->debug_registers_changed)\n \t\t{\n \t\t  th->context.Dr0 = dr[0];\n \t\t  th->context.Dr1 = dr[1];\n \t\t  th->context.Dr2 = dr[2];\n \t\t  th->context.Dr3 = dr[3];\n \t\t  th->context.Dr6 = DR6_CLEAR_VALUE;\n \t\t  th->context.Dr7 = dr[7];\n+\t\t  th->debug_registers_changed = false;\n \t\t}\n \t      CHECK (SetThreadContext (th->h, &th->context));\n \t      th->context.ContextFlags = 0;\n@@ -1798,8 +1767,6 @@ windows_nat_target::do_initial_windows_stuff (DWORD pid, bool attaching)\n \n   last_sig = GDB_SIGNAL_0;\n   open_process_used = 0;\n-  debug_registers_changed = 0;\n-  debug_registers_used = 0;\n   for (i = 0; i < sizeof (dr) / sizeof (dr[0]); i++)\n     dr[i] = 0;\n #ifdef __CYGWIN__\n@@ -3203,8 +3170,9 @@ cygwin_set_dr (int i, CORE_ADDR addr)\n     internal_error (__FILE__, __LINE__,\n \t\t    _(\"Invalid register %d in cygwin_set_dr.\\n\"), i);\n   dr[i] = addr;\n-  debug_registers_changed = 1;\n-  debug_registers_used = 1;\n+\n+  for (windows_thread_info *th : thread_list)\n+    th->debug_registers_changed = true;\n }\n \n /* Pass the value VAL to the inferior in the DR7 debug control\n@@ -3214,8 +3182,9 @@ static void\n cygwin_set_dr7 (unsigned long val)\n {\n   dr[7] = (CORE_ADDR) val;\n-  debug_registers_changed = 1;\n-  debug_registers_used = 1;\n+\n+  for (windows_thread_info *th : thread_list)\n+    th->debug_registers_changed = true;\n }\n \n /* Get the value of debug register I from the inferior.  */"
    }
  ]
}