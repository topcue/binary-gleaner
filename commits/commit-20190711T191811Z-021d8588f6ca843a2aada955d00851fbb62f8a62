{
  "sha": "021d8588f6ca843a2aada955d00851fbb62f8a62",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDIxZDg1ODhmNmNhODQzYTJhYWRhOTU1ZDAwODUxZmJiNjJmOGE2Mg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-07-11T10:08:42Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-07-11T19:18:11Z"
    },
    "message": "gdb: Allow quoting around string options in the gdb::option framework\n\nCurrently string options must be a single string with no whitespace,\nthis limitation prevents the gdb::option framework being used in some\nplaces.\n\nAfter this commit, string options can be quoted in single or double\nquotes, and quote characters can be escaped with a backslash if needed\nto either place them within quotes, or to avoid starting a quoted\nargument.\n\nThis test adds a new function extract_string_maybe_quoted which is\nbasically a copy of extract_arg_maybe_quoted from cli/cli-utils.c,\nhowever, the cli-utils.c function will be deleted in the next commit.\n\nThere are tests to exercise the new quoting mechanism.\n\ngdb/ChangeLog:\n\n\t* cli/cli-option.c (parse_option): Use extract_string_maybe_quoted\n\tto extract string arguments.\n\t* common/common-utils.c (extract_string_maybe_quoted): New function.\n\t* common/common-utils.h (extract_string_maybe_quoted): Declare.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/options.exp (expect_string): Dequote strings in\n\tresults.\n\t(test-string): Test strings with different quoting and reindent.",
    "tree": {
      "sha": "2fe3e417f14317271aa14f6916669f0aef7942a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2fe3e417f14317271aa14f6916669f0aef7942a3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/021d8588f6ca843a2aada955d00851fbb62f8a62",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/021d8588f6ca843a2aada955d00851fbb62f8a62",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/021d8588f6ca843a2aada955d00851fbb62f8a62",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/021d8588f6ca843a2aada955d00851fbb62f8a62/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b777eb6de24ae1a1dc2f1e48d593b0a5c79937a9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b777eb6de24ae1a1dc2f1e48d593b0a5c79937a9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b777eb6de24ae1a1dc2f1e48d593b0a5c79937a9"
    }
  ],
  "stats": {
    "total": 143,
    "additions": 123,
    "deletions": 20
  },
  "files": [
    {
      "sha": "5f9872b8dfa3d1146c1da5a909fb89c5663235ca",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=021d8588f6ca843a2aada955d00851fbb62f8a62",
      "patch": "@@ -1,3 +1,10 @@\n+2019-07-11  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* cli/cli-option.c (parse_option): Use extract_string_maybe_quoted\n+\tto extract string arguments.\n+\t* common/common-utils.c (extract_string_maybe_quoted): New function.\n+\t* common/common-utils.h (extract_string_maybe_quoted): Declare.\n+\n 2019-07-11  Tom Tromey  <tromey@adacore.com>\n \n \t* main.c (get_init_files): Use GDBINIT, not gdbinit."
    },
    {
      "sha": "eb8ef79d4f361fac573ea76e12d3a448cb25485f",
      "filename": "gdb/cli/cli-option.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/cli/cli-option.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/cli/cli-option.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-option.c?ref=021d8588f6ca843a2aada955d00851fbb62f8a62",
      "patch": "@@ -434,13 +434,12 @@ parse_option (gdb::array_view<const option_def_group> options_group,\n \t  }\n \n \tconst char *arg_start = *args;\n-\t*args = skip_to_space (*args);\n-\n+\tstd::string str = extract_string_maybe_quoted (args);\n \tif (*args == arg_start)\n \t  error (_(\"-%s requires an argument\"), match->name);\n \n \toption_value val;\n-\tval.string = savestring (arg_start, *args - arg_start);\n+\tval.string = xstrdup (str.c_str ());\n \treturn option_def_and_value {*match, match_ctx, val};\n       }\n "
    },
    {
      "sha": "d1059de0b33f0d6c3364047e53bb3c9e259eafb0",
      "filename": "gdb/gdbsupport/common-utils.c",
      "status": "modified",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/gdbsupport/common-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/gdbsupport/common-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/common-utils.c?ref=021d8588f6ca843a2aada955d00851fbb62f8a62",
      "patch": "@@ -160,6 +160,65 @@ savestring (const char *ptr, size_t len)\n   return p;\n }\n \n+/* See documentation in common-utils.h.  */\n+\n+std::string\n+extract_string_maybe_quoted (const char **arg)\n+{\n+  bool squote = false;\n+  bool dquote = false;\n+  bool bsquote = false;\n+  std::string result;\n+  const char *p = *arg;\n+\n+  /* Find the start of the argument.  */\n+  p = skip_spaces (p);\n+\n+  /* Parse p similarly to gdb_argv buildargv function.  */\n+  while (*p != '\\0')\n+    {\n+      if (isspace (*p) && !squote && !dquote && !bsquote)\n+\tbreak;\n+      else\n+\t{\n+\t  if (bsquote)\n+\t    {\n+\t      bsquote = false;\n+\t      result += *p;\n+\t    }\n+\t  else if (*p == '\\\\')\n+\t    bsquote = true;\n+\t  else if (squote)\n+\t    {\n+\t      if (*p == '\\'')\n+\t\tsquote = false;\n+\t      else\n+\t\tresult += *p;\n+\t    }\n+\t  else if (dquote)\n+\t    {\n+\t      if (*p == '\"')\n+\t\tdquote = false;\n+\t      else\n+\t\tresult += *p;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (*p == '\\'')\n+\t\tsquote = true;\n+\t      else if (*p == '\"')\n+\t\tdquote = true;\n+\t      else\n+\t\tresult += *p;\n+\t    }\n+\t  p++;\n+\t}\n+    }\n+\n+  *arg = p;\n+  return result;\n+}\n+\n /* The bit offset of the highest byte in a ULONGEST, for overflow\n    checking.  */\n "
    },
    {
      "sha": "a5312cb0c4918b08f8f1702ce4e45afdeef56300",
      "filename": "gdb/gdbsupport/common-utils.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/gdbsupport/common-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/gdbsupport/common-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/common-utils.h?ref=021d8588f6ca843a2aada955d00851fbb62f8a62",
      "patch": "@@ -94,6 +94,16 @@ void string_vappendf (std::string &dest, const char* fmt, va_list args)\n \n char *savestring (const char *ptr, size_t len);\n \n+/* Extract the next word from ARG.  The next word is defined as either,\n+   everything up to the next space, or, if the next word starts with either\n+   a single or double quote, then everything up to the closing quote.  The\n+   enclosing quotes are not returned in the result string.  The pointer in\n+   ARG is updated to point to the first character after the end of the\n+   word, or, for quoted words, the first character after the closing\n+   quote.  */\n+\n+std::string extract_string_maybe_quoted (const char **arg);\n+\n /* The strerror() function can return NULL for errno values that are\n    out of range.  Provide a \"safe\" version that always returns a\n    printable string.  */"
    },
    {
      "sha": "238fcfc892565d3a327be0121938e15851072838",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=021d8588f6ca843a2aada955d00851fbb62f8a62",
      "patch": "@@ -1,3 +1,9 @@\n+2019-07-11  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/options.exp (expect_string): Dequote strings in\n+\tresults.\n+\t(test-string): Test strings with different quoting and reindent.\n+\n 2019-07-10  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/mi_ex_cond.exp: Update expected results."
    },
    {
      "sha": "561ca1d1b52c47e71e4fbe08481c1de8b9916e81",
      "filename": "gdb/testsuite/gdb.base/options.exp",
      "status": "modified",
      "additions": 39,
      "deletions": 17,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/testsuite/gdb.base/options.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/021d8588f6ca843a2aada955d00851fbb62f8a62/gdb/testsuite/gdb.base/options.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/options.exp?ref=021d8588f6ca843a2aada955d00851fbb62f8a62",
      "patch": "@@ -128,6 +128,13 @@ proc expect_integer {option val operand} {\n # test-options xxx\", with -string set to $STR.  OPERAND is the\n # expected operand.\n proc expect_string {str operand} {\n+    # Dequote the string in the expected output.\n+    if { ( [string range $str 0 0] == \"\\\"\"\n+\t   && [string range $str end end] == \"\\\"\")\n+\t || ([string range $str 0 0] == \"'\"\n+\t     && [string range $str end end] == \"'\")} {\n+\tset str [string range $str 1 end-1]\n+    }\n     return \"-flag 0 -xx1 0 -xx2 0 -bool 0 -enum xxx -uint 0 -zuint-unl 0 -string '$str' -- $operand\"\n }\n \n@@ -967,26 +974,41 @@ proc_with_prefix test-string {variant} {\n \t    \"-string requires an argument\"\n     }\n \n-    res_test_gdb_complete_none \\\n-\t\"1 [expect_none \"\"]\" \\\n-\t\"$cmd -string STR\"\n-    gdb_test \"$cmd -string STR --\" [expect_string \"STR\" \"\"]\n+    foreach_with_prefix str {\n+\t\"STR\"\n+\t\"\\\"STR\\\"\"\n+\t\"\\\\\\\"STR\"\n+\t\"'STR'\"\n+\t\"\\\\'STR\"\n+\t\"\\\"STR AAA\\\"\"\n+\t\"'STR BBB'\"\n+\t\"\\\"STR 'CCC' DDD\\\"\"\n+\t\"'STR \\\"EEE\\\" FFF'\"\n+\t\"\\\"STR \\\\\\\"GGG\\\\\\\" HHH\\\"\"\n+\t\"'STR \\\\\\'III\\\\\\' JJJ'\"\n+    } {\n+\tres_test_gdb_complete_none \\\n+\t    \"1 [expect_none \"\"]\" \\\n+\t    \"$cmd -string ${str}\"\n+\tgdb_test \"$cmd -string ${str} --\" [expect_string \"${str}\" \"\"]\n \n-    # Completing at \"-\" after parsing STR should list all options.\n-    res_test_gdb_complete_multiple \\\n-\t\"1 [expect_string \"STR\" \"-\"]\" \\\n-\t\"$cmd -string STR \" \"-\" \"\" $all_options\n+\t# Completing at \"-\" after parsing STR should list all options.\n+\tres_test_gdb_complete_multiple \\\n+\t    \"1 [expect_string \"${str}\" \"-\"]\" \\\n+\t    \"$cmd -string ${str} \" \"-\" \"\" $all_options\n \n-    # Check that only FOO is considered part of the string's value.\n-    # I.e., that we stop parsing the string at the first whitespace.\n-    if {$variant == \"require-delimiter\"} {\n-\tres_test_gdb_complete_none \\\n-\t    \"1 [expect_string \"FOO\" \"BAR\"]\" \\\n-\t    \"$cmd -string FOO BAR\"\n-    } else {\n-\tres_test_gdb_complete_none \"0 BAR\" \"$cmd -string FOO BAR\"\n+\t# Check that only $STR is considered part of the string's value.\n+\t# I.e., that we stop parsing the string at the first\n+\t# whitespace or after the closing quote of $STR.\n+\tif {$variant == \"require-delimiter\"} {\n+\t    res_test_gdb_complete_none \\\n+\t\t\"1 [expect_string \"${str}\" \"BAR\"]\" \\\n+\t\t\"$cmd -string ${str} BAR\"\n+\t} else {\n+\t    res_test_gdb_complete_none \"0 BAR\" \"$cmd -string ${str} BAR\"\n+\t}\n+\tgdb_test \"$cmd -string ${str} BAR --\" \"Unrecognized option at: BAR --\"\n     }\n-    gdb_test \"$cmd -string FOO BAR --\" \"Unrecognized option at: BAR --\"\n }\n \n # Run the options framework tests first."
    }
  ]
}