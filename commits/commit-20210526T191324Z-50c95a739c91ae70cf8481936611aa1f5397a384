{
  "sha": "50c95a739c91ae70cf8481936611aa1f5397a384",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTBjOTVhNzM5YzkxYWU3MGNmODQ4MTkzNjYxMWFhMWY1Mzk3YTM4NA==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-05-26T19:13:13Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-05-26T19:13:24Z"
    },
    "message": "x86: Propery check PC16 reloc overflow in 16-bit mode instructions\n\ncommit a7664973b24a242cd9ea17deb5eaf503065fc0bd\nAuthor: Jan Beulich <jbeulich@suse.com>\nDate:   Mon Apr 26 10:41:35 2021 +0200\n\n    x86: correct overflow checking for 16-bit PC-relative relocs\n\ncaused linker failure when building 16-bit program in a 32-bit ELF\ncontainer.  Update GNU_PROPERTY_X86_FEATURE_2_USED with\n\n #define GNU_PROPERTY_X86_FEATURE_2_CODE16 (1U << 12)\n\nto indicate that 16-bit mode instructions are used in the input object:\n\nhttps://groups.google.com/g/x86-64-abi/c/UvvXWeHIGMA\n\nto indicate that 16-bit mode instructions are used in the object to\nallow linker to properly perform relocation overflow check for 16-bit\nPC-relative relocations in 16-bit mode instructions.\n\n1. Update x86 assembler to always generate the GNU property note with\nGNU_PROPERTY_X86_FEATURE_2_CODE16 for .code16 in ELF object.\n2. Update i386 and x86-64 linkers to use 16-bit PC16 relocations if\ninput object is marked with GNU_PROPERTY_X86_FEATURE_2_CODE16.\n\nbfd/\n\n\tPR ld/27905\n\t* elf32-i386.c: Include \"libiberty.h\".\n\t(elf_howto_table): Add 16-bit R_386_PC16 entry.\n\t(elf_i386_rtype_to_howto): Add a BFD argument.  Use 16-bit\n\tR_386_PC16 if input has 16-bit mode instructions.\n\t(elf_i386_info_to_howto_rel): Update elf_i386_rtype_to_howto\n\tcall.\n\t(elf_i386_tls_transition): Likewise.\n\t(elf_i386_relocate_section): Likewise.\n\t* elf64-x86-64.c (x86_64_elf_howto_table): Add 16-bit\n\tR_X86_64_PC16 entry.\n\t(elf_x86_64_rtype_to_howto): Use 16-bit R_X86_64_PC16 if input\n\thas 16-bit mode instructions.\n\t* elfxx-x86.c (_bfd_x86_elf_parse_gnu_properties): Set\n\telf_x86_has_code16 if relocatable input is marked with\n\tGNU_PROPERTY_X86_FEATURE_2_CODE16.\n\t* elfxx-x86.h (elf_x86_obj_tdata): Add has_code16.\n\t(elf_x86_has_code16): New.\n\nbinutils/\n\n\tPR ld/27905\n\t* readelf.c (decode_x86_feature_2): Support\n\tGNU_PROPERTY_X86_FEATURE_2_CODE16.\n\ngas/\n\n\tPR ld/27905\n\t* config/tc-i386.c (set_code_flag): Update x86_feature_2_used\n\twith GNU_PROPERTY_X86_FEATURE_2_CODE16 for .code16 in ELF\n\tobject.\n\t(set_16bit_gcc_code_flag): Likewise.\n\t(x86_cleanup): Always generate the GNU property note if\n\tx86_feature_2_used isn't 0.\n\t* testsuite/gas/i386/code16-2.d: New file.\n\t* testsuite/gas/i386/code16-2.s: Likewise.\n\t* testsuite/gas/i386/x86-64-code16-2.d: Likewise.\n\t* testsuite/gas/i386/i386.exp: Run code16-2 and x86-64-code16-2.\n\ninclude/\n\n\tPR ld/27905\n\t* elf/common.h (GNU_PROPERTY_X86_FEATURE_2_CODE16): New.\n\nld/\n\n\tPR ld/27905\n\t* testsuite/ld-i386/code16.d: New file.\n\t* testsuite/ld-i386/code16.t: Likewise.\n\t* testsuite/ld-x86-64/code16.d: Likewise.\n\t* testsuite/ld-x86-64/code16.t: Likewise.\n\t* testsuite/ld-i386/i386.exp: Run code16.\n\t* testsuite/ld-x86-64/x86-64.exp: Likewise.",
    "tree": {
      "sha": "f539432154713f55c321e9dbd16251eb4f51eec7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f539432154713f55c321e9dbd16251eb4f51eec7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/50c95a739c91ae70cf8481936611aa1f5397a384",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/50c95a739c91ae70cf8481936611aa1f5397a384",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/50c95a739c91ae70cf8481936611aa1f5397a384",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/50c95a739c91ae70cf8481936611aa1f5397a384/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "11bb5c41eb98d8e7d4d75dfcf620f6f627523e77",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/11bb5c41eb98d8e7d4d75dfcf620f6f627523e77",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/11bb5c41eb98d8e7d4d75dfcf620f6f627523e77"
    }
  ],
  "stats": {
    "total": 248,
    "additions": 223,
    "deletions": 25
  },
  "files": [
    {
      "sha": "82005a414218cf733f6713f8b9277c3912d20bb4",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -1,3 +1,24 @@\n+2021-05-26  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/27905\n+\t* elf32-i386.c: Include \"libiberty.h\".\n+\t(elf_howto_table): Add 16-bit R_386_PC16 entry.\n+\t(elf_i386_rtype_to_howto): Add a BFD argument.  Use 16-bit\n+\tR_386_PC16 if input has 16-bit mode instructions.\n+\t(elf_i386_info_to_howto_rel): Update elf_i386_rtype_to_howto\n+\tcall.\n+\t(elf_i386_tls_transition): Likewise.\n+\t(elf_i386_relocate_section): Likewise.\n+\t* elf64-x86-64.c (x86_64_elf_howto_table): Add 16-bit\n+\tR_X86_64_PC16 entry.\n+\t(elf_x86_64_rtype_to_howto): Use 16-bit R_X86_64_PC16 if input\n+\thas 16-bit mode instructions.\n+\t* elfxx-x86.c (_bfd_x86_elf_parse_gnu_properties): Set\n+\telf_x86_has_code16 if relocatable input is marked with\n+\tGNU_PROPERTY_X86_FEATURE_2_CODE16.\n+\t* elfxx-x86.h (elf_x86_obj_tdata): Add has_code16.\n+\t(elf_x86_has_code16): New.\n+\n 2021-05-26  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* elfxx-riscv.h (check_unknown_prefixed_ext): New bool."
    },
    {
      "sha": "c68741af02cb6b087cf5ffc962da20b3fbdc3aea",
      "filename": "bfd/elf32-i386.c",
      "status": "modified",
      "additions": 17,
      "deletions": 6,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/bfd/elf32-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/bfd/elf32-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-i386.c?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -22,6 +22,7 @@\n #include \"elf-vxworks.h\"\n #include \"dwarf2.h\"\n #include \"opcode/i386.h\"\n+#include \"libiberty.h\"\n \n /* 386 uses REL relocations instead of RELA.  */\n #define USE_REL\t1\n@@ -175,10 +176,14 @@ static reloc_howto_type elf_howto_table[]=\n \t false,\t\t\t/* partial_inplace */\n \t 0,\t\t\t/* src_mask */\n \t 0,\t\t\t/* dst_mask */\n-\t false)\t\t\t/* pcrel_offset */\n+\t false),\t\t/* pcrel_offset */\n \n #define R_386_vt (R_386_GNU_VTENTRY + 1 - R_386_vt_offset)\n \n+/* Use complain_overflow_bitfield on R_386_PC16 for code16.  */\n+  HOWTO(R_386_PC16, 0, 1, 16, true, 0, complain_overflow_bitfield,\n+\tbfd_elf_generic_reloc, \"R_386_PC16\",\n+\ttrue, 0xffff, 0xffff, true)\n };\n \n #define X86_PCREL_TYPE_P(TYPE) ((TYPE) == R_386_PC32)\n@@ -369,7 +374,7 @@ elf_i386_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED,\n }\n \n static reloc_howto_type *\n-elf_i386_rtype_to_howto (unsigned r_type)\n+elf_i386_rtype_to_howto (bfd *abfd, unsigned r_type)\n {\n   unsigned int indx;\n \n@@ -384,6 +389,11 @@ elf_i386_rtype_to_howto (unsigned r_type)\n   /* PR 17512: file: 0f67f69d.  */\n   if (elf_howto_table [indx].type != r_type)\n     return NULL;\n+\n+  /* Use complain_overflow_bitfield on R_386_PC16 for code16.  */\n+  if (r_type == (unsigned int) R_386_PC16 && elf_x86_has_code16 (abfd))\n+    indx = ARRAY_SIZE (elf_howto_table) - 1;\n+\n   return &elf_howto_table[indx];\n }\n \n@@ -394,7 +404,8 @@ elf_i386_info_to_howto_rel (bfd *abfd,\n {\n   unsigned int r_type = ELF32_R_TYPE (dst->r_info);\n \n-  if ((cache_ptr->howto = elf_i386_rtype_to_howto (r_type)) == NULL)\n+  if ((cache_ptr->howto = elf_i386_rtype_to_howto (abfd, r_type))\n+      == NULL)\n     {\n       /* xgettext:c-format */\n       _bfd_error_handler (_(\"%pB: unsupported relocation type %#x\"),\n@@ -1142,8 +1153,8 @@ elf_i386_tls_transition (struct bfd_link_info *info, bfd *abfd,\n       reloc_howto_type *from, *to;\n       const char *name;\n \n-      from = elf_i386_rtype_to_howto (from_type);\n-      to = elf_i386_rtype_to_howto (to_type);\n+      from = elf_i386_rtype_to_howto (abfd, from_type);\n+      to = elf_i386_rtype_to_howto (abfd, to_type);\n \n       if (h)\n \tname = h->root.root.string;\n@@ -2074,7 +2085,7 @@ elf_i386_relocate_section (bfd *output_bfd,\n \t  continue;\n \t}\n \n-      howto = elf_i386_rtype_to_howto (r_type);\n+      howto = elf_i386_rtype_to_howto (input_bfd, r_type);\n       if (howto == NULL)\n \treturn _bfd_unrecognized_reloc (input_bfd, input_section, r_type);\n "
    },
    {
      "sha": "d420561c156a33250c717f136c52678054ada2fb",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -187,6 +187,10 @@ static reloc_howto_type x86_64_elf_howto_table[] =\n \t _bfd_elf_rel_vtable_reloc_fn, \"R_X86_64_GNU_VTENTRY\", false, 0, 0,\n \t false),\n \n+/* Use complain_overflow_bitfield on R_X86_64_PC16 for code16.  */\n+  HOWTO(R_X86_64_PC16, 0, 1, 16, true, 0, complain_overflow_bitfield,\n+\tbfd_elf_generic_reloc, \"R_X86_64_PC16\", false, 0, 0xffff, true),\n+\n /* Use complain_overflow_bitfield on R_X86_64_32 for x32.  */\n   HOWTO(R_X86_64_32, 0, 2, 32, false, 0, complain_overflow_bitfield,\n \tbfd_elf_generic_reloc, \"R_X86_64_32\", false, 0, 0xffffffff,\n@@ -270,6 +274,14 @@ elf_x86_64_rtype_to_howto (bfd *abfd, unsigned r_type)\n       else\n \ti = ARRAY_SIZE (x86_64_elf_howto_table) - 1;\n     }\n+  else if (r_type == (unsigned int) R_X86_64_PC16)\n+    {\n+      /* Use complain_overflow_bitfield on R_X86_64_PC16 for code16.  */\n+      if (elf_x86_has_code16 (abfd))\n+\ti = ARRAY_SIZE (x86_64_elf_howto_table) - 2;\n+      else\n+\ti = r_type;\n+    }\n   else if (r_type < (unsigned int) R_X86_64_GNU_VTINHERIT\n \t   || r_type >= (unsigned int) R_X86_64_max)\n     {"
    },
    {
      "sha": "29dc7f04b4d8a6128420567411c0c6bb4dcd0ad1",
      "filename": "bfd/elfxx-x86.c",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/bfd/elfxx-x86.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/bfd/elfxx-x86.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.c?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -2353,6 +2353,7 @@ _bfd_x86_elf_parse_gnu_properties (bfd *abfd, unsigned int type,\n       || (type >= GNU_PROPERTY_X86_UINT32_OR_AND_LO\n \t  && type <= GNU_PROPERTY_X86_UINT32_OR_AND_HI))\n     {\n+      unsigned int number;\n       if (datasz != 4)\n \t{\n \t  _bfd_error_handler\n@@ -2361,7 +2362,13 @@ _bfd_x86_elf_parse_gnu_properties (bfd *abfd, unsigned int type,\n \t  return property_corrupt;\n \t}\n       prop = _bfd_elf_get_property (abfd, type, datasz);\n-      prop->u.number |= bfd_h_get_32 (abfd, ptr);\n+      number = bfd_h_get_32 (abfd, ptr);\n+      if ((abfd->flags\n+\t   & (DYNAMIC | BFD_LINKER_CREATED | BFD_PLUGIN)) == 0\n+\t  && type == GNU_PROPERTY_X86_FEATURE_2_USED\n+\t  && (number & GNU_PROPERTY_X86_FEATURE_2_CODE16) != 0)\n+\telf_x86_has_code16 (abfd) = 1;\n+      prop->u.number |= number;\n       prop->pr_kind = property_number;\n       return property_number;\n     }"
    },
    {
      "sha": "e834430549223663606c342fbd01e499fa5962a6",
      "filename": "bfd/elfxx-x86.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/bfd/elfxx-x86.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/bfd/elfxx-x86.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.h?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -549,6 +549,9 @@ struct elf_x86_obj_tdata\n \n   /* GOTPLT entries for TLS descriptors.  */\n   bfd_vma *local_tlsdesc_gotent;\n+\n+  /* Set if the objec file has 16-bit code.  */\n+  unsigned int has_code16 : 1;\n };\n \n enum elf_x86_plt_type\n@@ -584,6 +587,9 @@ struct elf_x86_plt\n #define elf_x86_local_tlsdesc_gotent(abfd) \\\n   (elf_x86_tdata (abfd)->local_tlsdesc_gotent)\n \n+#define elf_x86_has_code16(abfd) \\\n+  (elf_x86_tdata (abfd)->has_code16)\n+\n #define elf_x86_compute_jump_table_size(htab) \\\n   ((htab)->elf.srelplt->reloc_count * (htab)->got_entry_size)\n "
    },
    {
      "sha": "acee8f724e4a0c7f44d22d30c1cd6b0d3afedb16",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-26  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/27905\n+\t* readelf.c (decode_x86_feature_2): Support\n+\tGNU_PROPERTY_X86_FEATURE_2_CODE16.\n+\n 2021-05-23  Tiezhu Yang  <yangtiezhu@loongson.cn>\n \n \t* readelf.c (get_machine_name): Change Loongson Loongarch to"
    },
    {
      "sha": "8f24cc4071bac5c25a13e985aa41df94822b8735",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -19140,6 +19140,9 @@ decode_x86_feature_2 (unsigned int bitmask)\n \tcase GNU_PROPERTY_X86_FEATURE_2_XSAVEC:\n \t  printf (\"XSAVEC\");\n \t  break;\n+\tcase GNU_PROPERTY_X86_FEATURE_2_CODE16:\n+\t  printf (\"CODE16\");\n+\t  break;\n \tdefault:\n \t  printf (_(\"<unknown: %x>\"), bit);\n \t  break;"
    },
    {
      "sha": "31f9e36ce9a4f2603d54833e8a6c719ea66dcff3",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -1,3 +1,17 @@\n+2021-05-26  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/27905\n+\t* config/tc-i386.c (set_code_flag): Update x86_feature_2_used\n+\twith GNU_PROPERTY_X86_FEATURE_2_CODE16 for .code16 in ELF\n+\tobject.\n+\t(set_16bit_gcc_code_flag): Likewise.\n+\t(x86_cleanup): Always generate the GNU property note if\n+\tx86_feature_2_used isn't 0.\n+\t* testsuite/gas/i386/code16-2.d: New file.\n+\t* testsuite/gas/i386/code16-2.s: Likewise.\n+\t* testsuite/gas/i386/x86-64-code16-2.d: Likewise.\n+\t* testsuite/gas/i386/i386.exp: Run code16-2 and x86-64-code16-2.\n+\n 2021-05-26  Sebastien Villemot  <sebastien@debian.org>\n \n \tPR gas/27906"
    },
    {
      "sha": "c17f4da16fe32c1d53b7334110822bb6a1a614e5",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 37,
      "deletions": 18,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -2695,6 +2695,10 @@ static void\n set_code_flag (int value)\n {\n   update_code_flag (value, 0);\n+#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)\n+  if (value == CODE_16BIT)\n+    x86_feature_2_used |= GNU_PROPERTY_X86_FEATURE_2_CODE16;\n+#endif\n }\n \n static void\n@@ -2706,6 +2710,10 @@ set_16bit_gcc_code_flag (int new_code_flag)\n   cpu_arch_flags.bitfield.cpu64 = 0;\n   cpu_arch_flags.bitfield.cpuno64 = 1;\n   stackop_size = LONG_MNEM_SUFFIX;\n+#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)\n+  if (new_code_flag == CODE_16BIT)\n+    x86_feature_2_used |= GNU_PROPERTY_X86_FEATURE_2_CODE16;\n+#endif\n }\n \n static void\n@@ -9032,7 +9040,7 @@ x86_cleanup (void)\n   unsigned int isa_1_descsz_raw, feature_2_descsz_raw;\n   unsigned int padding;\n \n-  if (!IS_ELF || !x86_used_note)\n+  if (!IS_ELF || (!x86_used_note && !x86_feature_2_used))\n     return;\n \n   x86_feature_2_used |= GNU_PROPERTY_X86_FEATURE_2_X86;\n@@ -9072,15 +9080,23 @@ x86_cleanup (void)\n   bfd_set_section_alignment (sec, alignment);\n   elf_section_type (sec) = SHT_NOTE;\n \n-  /* GNU_PROPERTY_X86_ISA_1_USED: 4-byte type + 4-byte data size\n-\t\t\t\t  + 4-byte data  */\n-  isa_1_descsz_raw = 4 + 4 + 4;\n-  /* Align GNU_PROPERTY_X86_ISA_1_USED.  */\n-  isa_1_descsz = (isa_1_descsz_raw + align_size_1) & ~align_size_1;\n+  if (x86_used_note)\n+    {\n+      /* GNU_PROPERTY_X86_ISA_1_USED: 4-byte type + 4-byte data size\n+\t + 4-byte data  */\n+      isa_1_descsz_raw = 4 + 4 + 4;\n+      /* Align GNU_PROPERTY_X86_ISA_1_USED.  */\n+      isa_1_descsz = (isa_1_descsz_raw + align_size_1) & ~align_size_1;\n+    }\n+  else\n+    {\n+      isa_1_descsz_raw = 0;\n+      isa_1_descsz = 0;\n+    }\n \n   feature_2_descsz_raw = isa_1_descsz;\n   /* GNU_PROPERTY_X86_FEATURE_2_USED: 4-byte type + 4-byte data size\n-\t\t\t\t      + 4-byte data  */\n+     + 4-byte data  */\n   feature_2_descsz_raw += 4 + 4 + 4;\n   /* Align GNU_PROPERTY_X86_FEATURE_2_USED.  */\n   feature_2_descsz = ((feature_2_descsz_raw + align_size_1)\n@@ -9102,20 +9118,23 @@ x86_cleanup (void)\n   /* Write n_name.  */\n   memcpy (p + 4 * 3, \"GNU\", 4);\n \n-  /* Write 4-byte type.  */\n-  md_number_to_chars (p + 4 * 4,\n-\t\t      (valueT) GNU_PROPERTY_X86_ISA_1_USED, 4);\n+  if (isa_1_descsz != 0)\n+    {\n+      /* Write 4-byte type.  */\n+      md_number_to_chars (p + 4 * 4,\n+\t\t\t  (valueT) GNU_PROPERTY_X86_ISA_1_USED, 4);\n \n-  /* Write 4-byte data size.  */\n-  md_number_to_chars (p + 4 * 5, (valueT) 4, 4);\n+      /* Write 4-byte data size.  */\n+      md_number_to_chars (p + 4 * 5, (valueT) 4, 4);\n \n-  /* Write 4-byte data.  */\n-  md_number_to_chars (p + 4 * 6, (valueT) x86_isa_1_used, 4);\n+      /* Write 4-byte data.  */\n+      md_number_to_chars (p + 4 * 6, (valueT) x86_isa_1_used, 4);\n \n-  /* Zero out paddings.  */\n-  padding = isa_1_descsz - isa_1_descsz_raw;\n-  if (padding)\n-    memset (p + 4 * 7, 0, padding);\n+      /* Zero out paddings.  */\n+      padding = isa_1_descsz - isa_1_descsz_raw;\n+      if (padding)\n+\tmemset (p + 4 * 7, 0, padding);\n+    }\n \n   /* Write 4-byte type.  */\n   md_number_to_chars (p + isa_1_descsz + 4 * 4,"
    },
    {
      "sha": "37b66c85f4e379ed36abbfe15e56983f2f22c47f",
      "filename": "gas/testsuite/gas/i386/code16-2.d",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/gas/testsuite/gas/i386/code16-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/gas/testsuite/gas/i386/code16-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/code16-2.d?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -0,0 +1,8 @@\n+#name: i386 code16 2\n+#as: -mx86-used-note=no --generate-missing-build-notes=no\n+#readelf: -n\n+\n+Displaying notes found in: .note.gnu.property\n+[ \t]+Owner[ \t]+Data size[ \t]+Description\n+  GNU                  0x[0-9a-f]+\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: x86 feature used: x86, CODE16"
    },
    {
      "sha": "66e5d5587916fe1ce0463ac11e6a30bb59e91e3c",
      "filename": "gas/testsuite/gas/i386/code16-2.s",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/gas/testsuite/gas/i386/code16-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/gas/testsuite/gas/i386/code16-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/code16-2.s?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -0,0 +1,10 @@\n+\t.code16gcc\n+\t.text\n+\t.section\t.text.default_process_op.isra.0,\"ax\",@progbits\n+\t.type\tdefault_process_op.isra.0, @function\n+default_process_op.isra.0:\n+\tret\n+\t.section\t.text.mpt_scsi_process_op,\"ax\",@progbits\n+\t.type\tmpt_scsi_process_op, @function\n+mpt_scsi_process_op:\n+\tjmp\tdefault_process_op.isra.0"
    },
    {
      "sha": "a459c6fe392eb152fca35ba6fd0c856e3afb4e32",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -734,6 +734,7 @@ if {[is_elf_format] || [istarget \"*-*-vxworks*\"]} then {\n     run_dump_test \"property-ldmxcsr\"\n     run_dump_test \"property-vldmxcsr\"\n     run_dump_test \"property-vzeroall\"\n+    run_dump_test \"code16-2\"\n \n     if {![istarget \"*-*-dragonfly*\"]\n \t&& ![istarget \"*-*-gnu*\"]\n@@ -1298,6 +1299,7 @@ if [gas_64_check] then {\n \trun_dump_test \"x86-64-property-8\"\n \trun_dump_test \"x86-64-property-9\"\n \trun_dump_test \"x86-64-property-14\"\n+\trun_dump_test \"x86-64-code16-2\"\n \n \tif {[istarget \"*-*-linux*\"]} then {\n \t    run_dump_test \"x86-64-align-branch-3\""
    },
    {
      "sha": "dbabd67e8880b6e112bc470e9e2d105a5230813d",
      "filename": "gas/testsuite/gas/i386/x86-64-code16-2.d",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/gas/testsuite/gas/i386/x86-64-code16-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/gas/testsuite/gas/i386/x86-64-code16-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-code16-2.d?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -0,0 +1,9 @@\n+#source: code16-2.s\n+#name: x86-64 code16 2\n+#as: -mx86-used-note=no --generate-missing-build-notes=no\n+#readelf: -n\n+\n+Displaying notes found in: .note.gnu.property\n+[ \t]+Owner[ \t]+Data size[ \t]+Description\n+  GNU                  0x[0-9a-f]+\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: x86 feature used: x86, CODE16"
    },
    {
      "sha": "355c391fe466bff6f6862f7a66288e36cced7622",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-26  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/27905\n+\t* elf/common.h (GNU_PROPERTY_X86_FEATURE_2_CODE16): New.\n+\n 2021-05-23  Tiezhu Yang  <yangtiezhu@loongson.cn>\n \n \t* elf/common.h (EM_LOONGARCH): Change Loongson Loongarch to"
    },
    {
      "sha": "564ab711a204816fce74dffd41d2297569424c54",
      "filename": "include/elf/common.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/include/elf/common.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/include/elf/common.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/common.h?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -872,6 +872,7 @@\n #define GNU_PROPERTY_X86_FEATURE_2_XSAVEC\t(1U << 9)\n #define GNU_PROPERTY_X86_FEATURE_2_TMM\t\t(1U << 10)\n #define GNU_PROPERTY_X86_FEATURE_2_MASK\t\t(1U << 11)\n+#define GNU_PROPERTY_X86_FEATURE_2_CODE16\t(1U << 12)\n \n #define GNU_PROPERTY_X86_COMPAT_2_ISA_1_NEEDED \\\n   (GNU_PROPERTY_X86_UINT32_OR_LO + 0)"
    },
    {
      "sha": "8d25dd87a1b334bd95aadaca13846260c922bf42",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -1,3 +1,13 @@\n+2021-05-26  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/27905\n+\t* testsuite/ld-i386/code16.d: New file.\n+\t* testsuite/ld-i386/code16.t: Likewise.\n+\t* testsuite/ld-x86-64/code16.d: Likewise.\n+\t* testsuite/ld-x86-64/code16.t: Likewise.\n+\t* testsuite/ld-i386/i386.exp: Run code16.\n+\t* testsuite/ld-x86-64/x86-64.exp: Likewise.\n+\n 2021-05-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* testsuite/ld-x86-64/ilp32-12.d: New file."
    },
    {
      "sha": "8b67861db91a96c0f69596bb89bd7ec7255505d4",
      "filename": "ld/testsuite/ld-i386/code16.d",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-i386/code16.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-i386/code16.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-i386/code16.d?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -0,0 +1,19 @@\n+#name: i386 R_386_PC16 reloc in 16-bit mode\n+#as: --32 -mx86-used-note=no --generate-missing-build-notes=no\n+#source: ${srcdir}/../../../gas/testsuite/gas/i386/code16-2.s\n+#ld: -T code16.t\n+#objdump: -dw -Mi8086\n+\n+.*: +file format .*\n+\n+\n+Disassembly of section .text.default_process_op.isra.0:\n+\n+0+737c <default_process_op.isra.0>:\n+ +[a-f0-9]+:\t66 c3                \tretl   \n+\n+Disassembly of section .text.mpt_scsi_process_op:\n+\n+0+f869 <mpt_scsi_process_op>:\n+ +[a-f0-9]+:\te9 10 7b             \tjmp    737c <default_process_op.isra.0>\n+#pass"
    },
    {
      "sha": "0cf99042e400886cc4fbf713a314c969e0298fba",
      "filename": "ld/testsuite/ld-i386/code16.t",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-i386/code16.t",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-i386/code16.t",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-i386/code16.t?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -0,0 +1,7 @@\n+OUTPUT_FORMAT(\"elf32-i386\")\n+OUTPUT_ARCH(\"i386\")\n+SECTIONS\n+{\n+.text.default_process_op.isra.0 0x737c : { *(.text.default_process_op.isra.0) }\n+.text.mpt_scsi_process_op 0xf869 : { *(.text.mpt_scsi_process_op) }\n+}"
    },
    {
      "sha": "3d6047b790d526586592521c06542a358b1fe50a",
      "filename": "ld/testsuite/ld-i386/i386.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-i386/i386.exp?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -492,6 +492,7 @@ run_dump_test \"property-x86-isa2\"\n run_dump_test \"property-x86-isa3\"\n run_dump_test \"property-x86-isa4\"\n run_dump_test \"pr26869\"\n+run_dump_test \"code16\"\n \n if { !([istarget \"i?86-*-linux*\"]\n        || [istarget \"i?86-*-gnu*\"]"
    },
    {
      "sha": "20096ab6abf3a15ac0f5a61b7698ace722d733b9",
      "filename": "ld/testsuite/ld-x86-64/code16.d",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-x86-64/code16.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-x86-64/code16.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/code16.d?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -0,0 +1,19 @@\n+#name: x86-64 R_X86_64_PC16 reloc in 16-bit mode\n+#as: --64 -mx86-used-note=no --generate-missing-build-notes=no\n+#source: ${srcdir}/../../../gas/testsuite/gas/i386/code16-2.s\n+#ld: -T code16.t\n+#objdump: -dw -Mi8086\n+\n+.*: +file format .*\n+\n+\n+Disassembly of section .text.default_process_op.isra.0:\n+\n+0+737c <default_process_op.isra.0>:\n+ +[a-f0-9]+:\t66 c3                \tretl   \n+\n+Disassembly of section .text.mpt_scsi_process_op:\n+\n+0+f869 <mpt_scsi_process_op>:\n+ +[a-f0-9]+:\te9 10 7b             \tjmp    737c <default_process_op.isra.0>\n+#pass"
    },
    {
      "sha": "9ef00a3404db6c22288dfb0e378ce8c00403ce3e",
      "filename": "ld/testsuite/ld-x86-64/code16.t",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-x86-64/code16.t",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-x86-64/code16.t",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/code16.t?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -0,0 +1,7 @@\n+OUTPUT_FORMAT(\"elf64-x86-64\")\n+OUTPUT_ARCH(\"i386:x86-64\")\n+SECTIONS\n+{\n+.text.default_process_op.isra.0 0x737c : { *(.text.default_process_op.isra.0) }\n+.text.mpt_scsi_process_op 0xf869 : { *(.text.mpt_scsi_process_op) }\n+}"
    },
    {
      "sha": "80716668df6d1832001ee9dd13b47fa1c3e1d6ff",
      "filename": "ld/testsuite/ld-x86-64/x86-64.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-x86-64/x86-64.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/50c95a739c91ae70cf8481936611aa1f5397a384/ld/testsuite/ld-x86-64/x86-64.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/x86-64.exp?ref=50c95a739c91ae70cf8481936611aa1f5397a384",
      "patch": "@@ -474,6 +474,7 @@ run_dump_test \"property-x86-isa3\"\n run_dump_test \"property-x86-isa3-x32\"\n run_dump_test \"property-x86-isa4\"\n run_dump_test \"property-x86-isa4-x32\"\n+run_dump_test \"code16\"\n \n if ![istarget \"x86_64-*-linux*\"] {\n     return"
    }
  ]
}