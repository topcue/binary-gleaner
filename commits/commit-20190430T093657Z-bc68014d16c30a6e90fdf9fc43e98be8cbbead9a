{
  "sha": "bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmM2ODAxNGQxNmMzMGE2ZTkwZmRmOWZjNDNlOThiZThjYmJlYWQ5YQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-03-07T16:53:54Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-30T09:36:57Z"
    },
    "message": "gdb/fortran: Add allocatable type qualifier\n\nTypes in Fortran can have the 'allocatable' qualifier attached to\nindicate that memory needs to be explicitly allocated by the user.\nThis patch extends GDB to show this qualifier when printing types.\n\nLots of tests results are then updated to include this new qualifier\nin the expected results.\n\ngdb/ChangeLog:\n\n\t* f-typeprint.c (f_type_print_base): Print 'allocatable' type\n\tqualifier.\n\t* gdbtypes.h (TYPE_IS_ALLOCATABLE): Define.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/vla-datatypes.exp: Update expected results.\n\t* gdb.fortran/vla-ptype.exp: Likewise.\n\t* gdb.fortran/vla-type.exp: Likewise.\n\t* gdb.fortran/vla-value.exp: Likewise.",
    "tree": {
      "sha": "7a4c9a61b37875f64f7919c9024272e0550fd165",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7a4c9a61b37875f64f7919c9024272e0550fd165"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f1fdc960664c24d911d6189b94e5c054b4bb9053",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f1fdc960664c24d911d6189b94e5c054b4bb9053",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f1fdc960664c24d911d6189b94e5c054b4bb9053"
    }
  ],
  "stats": {
    "total": 69,
    "additions": 45,
    "deletions": 24
  },
  "files": [
    {
      "sha": "f4a50e17887f514bcd789242f856785d6cd69f6d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Chris January  <chris.january@arm.com>\n+\n+\t* f-typeprint.c (f_type_print_base): Print 'allocatable' type\n+\tqualifier.\n+\t* gdbtypes.h (TYPE_IS_ALLOCATABLE): Define.\n+\n 2019-04-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* f-typeprint.c (f_print_type): Update rules for printing"
    },
    {
      "sha": "a7c1a00a71495d72932a1dc36c66df5308cc073a",
      "filename": "gdb/f-typeprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/f-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/f-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-typeprint.c?ref=bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
      "patch": "@@ -440,4 +440,7 @@ f_type_print_base (struct type *type, struct ui_file *stream, int show,\n \terror (_(\"Invalid type code (%d) in symbol table.\"), TYPE_CODE (type));\n       break;\n     }\n+\n+  if (TYPE_IS_ALLOCATABLE (type))\n+    fprintf_filtered (stream, \", allocatable\");\n }"
    },
    {
      "sha": "edea6f05474a3d48ce99afe8d0b43a989bc0f2a8",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
      "patch": "@@ -350,6 +350,10 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n #define TYPE_IS_REFERENCE(t) \\\n   (TYPE_CODE (t) == TYPE_CODE_REF || TYPE_CODE (t) == TYPE_CODE_RVALUE_REF)\n \n+/* * True if this type is allocatable.  */\n+#define TYPE_IS_ALLOCATABLE(t) \\\n+  (get_dyn_prop (DYN_PROP_ALLOCATED, t) != NULL)\n+\n /* * Instruction-space delimited type.  This is for Harvard architectures\n    which have separate instruction and data address spaces (and perhaps\n    others)."
    },
    {
      "sha": "d3be74d8c16c698bfd8f0c6b540314bd9ed21ff4",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/vla-datatypes.exp: Update expected results.\n+\t* gdb.fortran/vla-ptype.exp: Likewise.\n+\t* gdb.fortran/vla-type.exp: Likewise.\n+\t* gdb.fortran/vla-value.exp: Likewise.\n+\n 2019-04-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.fortran/ptr-indentation.exp: Update expected results."
    },
    {
      "sha": "bb5ed276c22609f2eb46caf3c956d8ccc4b30de6",
      "filename": "gdb/testsuite/gdb.fortran/vla-datatypes.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/gdb.fortran/vla-datatypes.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/gdb.fortran/vla-datatypes.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/vla-datatypes.exp?ref=bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
      "patch": "@@ -55,15 +55,15 @@ gdb_test \"print l\" \" = \\\\.TRUE\\\\.\" \"charactervla allocated\"\n \n gdb_breakpoint [gdb_get_line_number \"vlas-initialized\"]\n gdb_continue_to_breakpoint \"vlas-initialized\"\n-gdb_test \"ptype intvla\" \"type = $int \\\\\\(11,22,33\\\\\\)\" \\\n+gdb_test \"ptype intvla\" \"type = $int, allocatable \\\\\\(11,22,33\\\\\\)\" \\\n   \"ptype intvla\"\n-gdb_test \"ptype realvla\" \"type = $real \\\\\\(11,22,33\\\\\\)\" \\\n+gdb_test \"ptype realvla\" \"type = $real, allocatable \\\\\\(11,22,33\\\\\\)\" \\\n   \"ptype realvla\"\n-gdb_test \"ptype complexvla\" \"type = $complex \\\\\\(11,22,33\\\\\\)\" \\\n+gdb_test \"ptype complexvla\" \"type = $complex, allocatable \\\\\\(11,22,33\\\\\\)\" \\\n   \"ptype complexvla\"\n-gdb_test \"ptype logicalvla\" \"type = $logical \\\\\\(11,22,33\\\\\\)\" \\\n+gdb_test \"ptype logicalvla\" \"type = $logical, allocatable \\\\\\(11,22,33\\\\\\)\" \\\n   \"ptype logicalvla\"\n-gdb_test \"ptype charactervla\" \"type = character\\\\\\*1 \\\\\\(11,22,33\\\\\\)\" \\\n+gdb_test \"ptype charactervla\" \"type = character\\\\\\*1, allocatable \\\\\\(11,22,33\\\\\\)\" \\\n   \"ptype charactervla\"\n \n gdb_test \"print intvla(5,5,5)\" \" = 1\" \"print intvla(5,5,5) (1st)\""
    },
    {
      "sha": "0f4abb637571c697d0a9b5c1546fb50a0e51c634",
      "filename": "gdb/testsuite/gdb.fortran/vla-ptype.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/gdb.fortran/vla-ptype.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/gdb.fortran/vla-ptype.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/vla-ptype.exp?ref=bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
      "patch": "@@ -43,24 +43,24 @@ gdb_test \"ptype vla2(5, 45, 20)\" \\\n \n gdb_breakpoint [gdb_get_line_number \"vla1-allocated\"]\n gdb_continue_to_breakpoint \"vla1-allocated\"\n-gdb_test \"ptype vla1\" \"type = $real \\\\\\(10,10,10\\\\\\)\" \\\n+gdb_test \"ptype vla1\" \"type = $real, allocatable \\\\\\(10,10,10\\\\\\)\" \\\n   \"ptype vla1 allocated\"\n \n gdb_breakpoint [gdb_get_line_number \"vla2-allocated\"]\n gdb_continue_to_breakpoint \"vla2-allocated\"\n-gdb_test \"ptype vla2\" \"type = $real \\\\\\(7,42:50,13:35\\\\\\)\" \\\n+gdb_test \"ptype vla2\" \"type = $real, allocatable \\\\\\(7,42:50,13:35\\\\\\)\" \\\n   \"ptype vla2 allocated\"\n \n gdb_breakpoint [gdb_get_line_number \"vla1-filled\"]\n gdb_continue_to_breakpoint \"vla1-filled\"\n-gdb_test \"ptype vla1\" \"type = $real \\\\\\(10,10,10\\\\\\)\" \\\n+gdb_test \"ptype vla1\" \"type = $real, allocatable \\\\\\(10,10,10\\\\\\)\" \\\n   \"ptype vla1 filled\"\n gdb_test \"ptype vla1(3, 6, 9)\" \"type = $real\" \\\n   \"ptype vla1(3, 6, 9)\"\n \n gdb_breakpoint [gdb_get_line_number \"vla2-filled\"]\n gdb_continue_to_breakpoint \"vla2-filled\"\n-gdb_test \"ptype vla2\" \"type = $real \\\\\\(7,42:50,13:35\\\\\\)\" \\\n+gdb_test \"ptype vla2\" \"type = $real, allocatable \\\\\\(7,42:50,13:35\\\\\\)\" \\\n   \"ptype vla2 filled\"\n gdb_test \"ptype vla2(5, 45, 20)\" \"type = $real\" \\\n   \"ptype vla2(5, 45, 20) filled\""
    },
    {
      "sha": "951f118194af63669c0eed728f67d873e37f0804",
      "filename": "gdb/testsuite/gdb.fortran/vla-type.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/gdb.fortran/vla-type.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/gdb.fortran/vla-type.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/vla-type.exp?ref=bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
      "patch": "@@ -46,7 +46,7 @@ gdb_test \"print onev%ivla(1, 2, 3)\" \" = 123\"\n gdb_test \"print onev%ivla(3, 2, 1)\" \" = 321\"\n gdb_test \"ptype onev\" \\\n          [multi_line \"type = Type one\" \\\n-                     \"\\\\s+$int :: ivla\\\\\\(11,22,33\\\\\\)\" \\\n+                     \"\\\\s+$int, allocatable :: ivla\\\\\\(11,22,33\\\\\\)\" \\\n                      \"End Type one\" ]\n \n # Check type with two VLA's inside\n@@ -57,8 +57,8 @@ gdb_test \"print twov%ivla1(1, 2, 3)\" \" = 123\"\n gdb_test \"print twov%ivla1(3, 2, 1)\" \" = 321\"\n gdb_test \"ptype twov\" \\\n          [multi_line \"type = Type two\" \\\n-                     \"\\\\s+$int :: ivla1\\\\\\(5,12,99\\\\\\)\" \\\n-                     \"\\\\s+$int :: ivla2\\\\\\(9,12\\\\\\)\" \\\n+                     \"\\\\s+$int, allocatable :: ivla1\\\\\\(5,12,99\\\\\\)\" \\\n+                     \"\\\\s+$int, allocatable :: ivla2\\\\\\(9,12\\\\\\)\" \\\n                      \"End Type two\" ]\n gdb_test \"print twov\" \" = \\\\\\( ivla1 = \\\\\\(\\\\\\( \\\\\\( 1, 1, 1, 1, 1\\\\\\)\\\n  \\\\\\( 1, 1, 321, 1, 1\\\\\\)\\\n@@ -74,7 +74,7 @@ gdb_test \"print threev%ivar\" \" = 3\"\n gdb_test \"ptype threev\" \\\n          [multi_line \"type = Type three\" \\\n                      \"\\\\s+$int :: ivar\" \\\n-                     \"\\\\s+$int :: ivla\\\\\\(20\\\\\\)\" \\\n+                     \"\\\\s+$int, allocatable :: ivla\\\\\\(20\\\\\\)\" \\\n                      \"End Type three\" ]\n \n # Check type with attribute at end of type\n@@ -87,7 +87,7 @@ gdb_test \"print fourv%ivla(12)\" \"no such vector element\"\n gdb_test \"print fourv%ivar\" \" = 3\"\n gdb_test \"ptype fourv\" \\\n          [multi_line \"type = Type four\" \\\n-                     \"\\\\s+$int :: ivla\\\\\\(10\\\\\\)\" \\\n+                     \"\\\\s+$int, allocatable :: ivla\\\\\\(10\\\\\\)\" \\\n                      \"\\\\s+$int :: ivar\" \\\n                      \"End Type four\" ]\n \n@@ -103,7 +103,7 @@ gdb_test \"ptype fivev\" \\\n                      \"End Type five\" ]\n gdb_test \"ptype fivev%tone\" \\\n          [multi_line \"type = Type one\" \\\n-                     \"    $int :: ivla\\\\(10,10,10\\\\)\" \\\n+                     \"    $int, allocatable :: ivla\\\\(10,10,10\\\\)\" \\\n                      \"End Type one\" ]\n \n # Check array of types containing a VLA\n@@ -120,15 +120,15 @@ gdb_test \"ptype fivearr(1)\" \\\n                      \"End Type five\" ]\n gdb_test \"ptype fivearr(1)%tone\" \\\n          [multi_line \"type = Type one\" \\\n-                     \"    $int :: ivla\\\\(2,4,6\\\\)\" \\\n+                     \"    $int, allocatable :: ivla\\\\(2,4,6\\\\)\" \\\n                      \"End Type one\" ]\n gdb_test \"ptype fivearr(2)\" \\\n          [multi_line \"type = Type five\" \\\n                      \"\\\\s+Type one :: tone\" \\\n                      \"End Type five\" ]\n gdb_test \"ptype fivearr(2)%tone\" \\\n          [multi_line \"type = Type one\" \\\n-                     \"    $int :: ivla\\\\(12,14,16\\\\)\" \\\n+                     \"    $int, allocatable :: ivla\\\\(12,14,16\\\\)\" \\\n                      \"End Type one\" ]\n \n # Check allocation status of dynamic array and it's dynamic members\n@@ -141,7 +141,7 @@ gdb_test \"ptype fivedynarr(2)\" \\\n          \"ptype fivedynarr(2), tone is not allocated\"\n gdb_test \"ptype fivedynarr(2)%tone\" \\\n          [multi_line \"type = Type one\" \\\n-                     \"    $int :: ivla\\\\(<not allocated>\\\\)\" \\\n+                     \"    $int, allocatable :: ivla\\\\(<not allocated>\\\\)\" \\\n                      \"End Type one\" ] \\\n          \"ptype fivedynarr(2)%tone, not allocated\"\n \n@@ -159,13 +159,13 @@ gdb_test \"ptype fivedynarr(1)\" \\\n                      \"End Type five\" ]\n gdb_test \"ptype fivedynarr(1)%tone\" \\\n          [multi_line \"type = Type one\" \\\n-                     \"    $int :: ivla\\\\(2,4,6\\\\)\" \\\n+                     \"    $int, allocatable :: ivla\\\\(2,4,6\\\\)\" \\\n                      \"End Type one\" ]\n gdb_test \"ptype fivedynarr(2)\" \\\n          [multi_line \"type = Type five\" \\\n                      \"\\\\s+Type one :: tone\" \\\n                      \"End Type five\" ]\n gdb_test \"ptype fivedynarr(2)%tone\" \\\n          [multi_line \"type = Type one\" \\\n-                     \"    $int :: ivla\\\\(12,14,16\\\\)\" \\\n+                     \"    $int, allocatable :: ivla\\\\(12,14,16\\\\)\" \\\n                      \"End Type one\" ]"
    },
    {
      "sha": "be397fd95fb96a8dc6b5612c5768df2a76d1890e",
      "filename": "gdb/testsuite/gdb.fortran/vla-value.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/gdb.fortran/vla-value.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/gdb.fortran/vla-value.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/vla-value.exp?ref=bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
      "patch": "@@ -35,7 +35,7 @@ gdb_breakpoint [gdb_get_line_number \"vla1-init\"]\n gdb_continue_to_breakpoint \"vla1-init\"\n gdb_test \"print vla1\" \" = <not allocated>\" \"print non-allocated vla1\"\n gdb_test \"print &vla1\" \\\n-  \" = \\\\\\(PTR TO -> \\\\\\( $real \\\\\\(<not allocated>\\\\\\) \\\\\\)\\\\\\) $hex\" \\\n+  \" = \\\\\\(PTR TO -> \\\\\\( $real, allocatable \\\\\\(<not allocated>\\\\\\) \\\\\\)\\\\\\) $hex\" \\\n   \"print non-allocated &vla1\"\n gdb_test \"print vla1(1,1,1)\" \"no such vector element \\\\\\(vector not allocated\\\\\\)\" \\\n   \"print member in non-allocated vla1 (1)\"\n@@ -56,7 +56,7 @@ with_timeout_factor 15 {\n \t\"step over value assignment of vla1\"\n }\n gdb_test \"print &vla1\" \\\n-  \" = \\\\\\(PTR TO -> \\\\\\( $real \\\\\\(10,10,10\\\\\\) \\\\\\)\\\\\\) $hex\" \\\n+  \" = \\\\\\(PTR TO -> \\\\\\( $real, allocatable \\\\\\(10,10,10\\\\\\) \\\\\\)\\\\\\) $hex\" \\\n   \"print allocated &vla1\"\n gdb_test \"print vla1(3, 6, 9)\" \" = 1311\" \"print allocated vla1(3,6,9)\"\n gdb_test \"print vla1(1, 3, 8)\" \" = 1311\" \"print allocated vla1(1,3,8)\""
    },
    {
      "sha": "0759ccbaebe69cf8574038bc07a0470548518a16",
      "filename": "gdb/testsuite/gdb.mi/mi-vla-fortran.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/gdb.mi/mi-vla-fortran.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bc68014d16c30a6e90fdf9fc43e98be8cbbead9a/gdb/testsuite/gdb.mi/mi-vla-fortran.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-vla-fortran.exp?ref=bc68014d16c30a6e90fdf9fc43e98be8cbbead9a",
      "patch": "@@ -77,10 +77,10 @@ mi_expect_stop \"breakpoint-hit\" \"vla\" \"\" \".*vla.f90\" \"$bp_lineno\" \\\n mi_gdb_test \"510-data-evaluate-expression vla1\" \\\n   \"510\\\\^done,value=\\\"\\\\(.*\\\\)\\\"\" \"evaluate allocated vla\"\n \n-mi_create_varobj_checked vla1_allocated vla1 \"$real \\\\\\(5\\\\\\)\" \\\n+mi_create_varobj_checked vla1_allocated vla1 \"$real, allocatable \\\\\\(5\\\\\\)\" \\\n   \"create local variable vla1_allocated\"\n mi_gdb_test \"511-var-info-type vla1_allocated\" \\\n-  \"511\\\\^done,type=\\\"$real \\\\\\(5\\\\\\)\\\"\" \\\n+  \"511\\\\^done,type=\\\"$real, allocatable \\\\\\(5\\\\\\)\\\"\" \\\n   \"info type variable vla1_allocated\"\n mi_gdb_test \"512-var-show-format vla1_allocated\" \\\n   \"512\\\\^done,format=\\\"natural\\\"\" \\"
    }
  ]
}