{
  "sha": "9c95aea186b18310340915045189a4e39b8393ea",
  "node_id": "C_kwDOANOeidoAKDljOTVhZWExODZiMTgzMTAzNDA5MTUwNDUxODlhNGUzOWI4MzkzZWE",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2021-10-02T00:01:17Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2021-11-10T03:27:53Z"
    },
    "message": "Fix PR 28308 - dprintf breakpoints not working when run from script\n\nThis commit fixes Bug 28308, titled \"Strange interactions with\ndprintf and break/commands\":\n\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=28308\n\nSince creating that bug report, I've found a somewhat simpler way of\nreproducing the problem.  I've encapsulated it into the GDB test case\nwhich I've created along with this bug fix.  The name of the new test\nis gdb.base/dprintf-execution-x-script.exp, I'll demonstrate the\nproblem using this test case, though for brevity, I've placed all\nrelevant files in the same directory and have renamed the files to all\nstart with 'dp-bug' instead of 'dprintf-execution-x-script'.\n\nThe script file, named dp-bug.gdb, consists of the following commands:\n\ndprintf increment, \"dprintf in increment(), vi=%d\\n\", vi\nbreak inc_vi\ncommands\n  continue\nend\nrun\n\nNote that the final command in this script is 'run'.  When 'run' is\ninstead issued interactively, the  bug does not occur.  So, let's look\nat the interactive case first in order to see the correct/expected\noutput:\n\n$ gdb -q -x dp-bug.gdb dp-bug\n... eliding buggy output which I'll discuss later ...\n(gdb) run\nStarting program: /mesquite2/sourceware-git/f34-master/bld/gdb/tmp/dp-bug\nvi=0\ndprintf in increment(), vi=0\n\nBreakpoint 2, inc_vi () at dprintf-execution-x-script.c:26\n26\tin dprintf-execution-x-script.c\nvi=1\ndprintf in increment(), vi=1\n\nBreakpoint 2, inc_vi () at dprintf-execution-x-script.c:26\n26\tin dprintf-execution-x-script.c\nvi=2\ndprintf in increment(), vi=2\n\nBreakpoint 2, inc_vi () at dprintf-execution-x-script.c:26\n26\tin dprintf-execution-x-script.c\nvi=3\n[Inferior 1 (process 1539210) exited normally]\n\nIn this run, in which 'run' was issued from the gdb prompt (instead\nof at the end of the script), there are three dprintf messages along\nwith three 'Breakpoint 2' messages.  This is the correct output.\n\nNow let's look at the output that I snipped above; this is the output\nwhen 'run' is issued from the script loaded via GDB's -x switch:\n\n$ gdb -q -x dp-bug.gdb dp-bug\nReading symbols from dp-bug...\nDprintf 1 at 0x40116e: file dprintf-execution-x-script.c, line 38.\nBreakpoint 2 at 0x40113a: file dprintf-execution-x-script.c, line 26.\nvi=0\ndprintf in increment(), vi=0\n\nBreakpoint 2, inc_vi () at dprintf-execution-x-script.c:26\n26\tdprintf-execution-x-script.c: No such file or directory.\nvi=1\n\nBreakpoint 2, inc_vi () at dprintf-execution-x-script.c:26\n26\tin dprintf-execution-x-script.c\nvi=2\n\nBreakpoint 2, inc_vi () at dprintf-execution-x-script.c:26\n26\tin dprintf-execution-x-script.c\nvi=3\n[Inferior 1 (process 1539175) exited normally]\n\nIn the output shown above, only the first dprintf message is printed.\nThe 2nd and 3rd dprintf messages are missing!  However, all three\n'Breakpoint 2...' messages are still printed.\n\nWhy does this happen?\n\nbpstat_do_actions_1() in gdb/breakpoint.c contains the following\ncomment and code near the start of the function:\n\n  /* Avoid endless recursion if a `source' command is contained\n     in bs->commands.  */\n  if (executing_breakpoint_commands)\n    return 0;\n\n  scoped_restore save_executing\n    = make_scoped_restore (&executing_breakpoint_commands, 1);\n\nAlso, as described by this comment prior to the 'async' field\nin 'struct ui' in top.h, the main UI starts off in sync mode\nwhen processing command line arguments:\n\n  /* True if the UI is in async mode, false if in sync mode.  If in\n     sync mode, a synchronous execution command (e.g, \"next\") does not\n     return until the command is finished.  If in async mode, then\n     running a synchronous command returns right after resuming the\n     target.  Waiting for the command's completion is later done on\n     the top event loop.  For the main UI, this starts out disabled,\n     until all the explicit command line arguments (e.g., `gdb -ex\n     \"start\" -ex \"next\"') are processed.  */\n\nThis combination of things, the state of the static global\n'executing_breakpoint_commands' plus the state of the async\nfield in the main UI causes this behavior.\n\nThis is a backtrace after hitting the dprintf breakpoint for\nthe second time when doing 'run' from the script file, i.e.\nnon-interactively:\n\nThread 1 \"gdb\" hit Breakpoint 3, bpstat_do_actions_1 (bsp=0x7fffffffc2b8)\n    at /ironwood1/sourceware-git/f34-master/bld/../../worktree-master/gdb/breakpoint.c:4431\n4431\t  if (executing_breakpoint_commands)\n\n #0  bpstat_do_actions_1 (bsp=0x7fffffffc2b8)\n     at gdb/breakpoint.c:4431\n #1  0x00000000004d8bc6 in dprintf_after_condition_true (bs=0x1538090)\n     at gdb/breakpoint.c:13048\n #2  0x00000000004c5caa in bpstat_stop_status (aspace=0x116dbc0, bp_addr=0x40116e, thread=0x137f450, ws=0x7fffffffc718,\n     stop_chain=0x1538090) at gdb/breakpoint.c:5498\n #3  0x0000000000768d98 in handle_signal_stop (ecs=0x7fffffffc6f0)\n     at gdb/infrun.c:6172\n #4  0x00000000007678d3 in handle_inferior_event (ecs=0x7fffffffc6f0)\n     at gdb/infrun.c:5662\n #5  0x0000000000763cd5 in fetch_inferior_event ()\n     at gdb/infrun.c:4060\n #6  0x0000000000746d7d in inferior_event_handler (event_type=INF_REG_EVENT)\n     at gdb/inf-loop.c:41\n #7  0x00000000007a702f in handle_target_event (error=0, client_data=0x0)\n     at gdb/linux-nat.c:4207\n #8  0x0000000000b8cd6e in gdb_wait_for_event (block=block@entry=0)\n     at gdbsupport/event-loop.cc:701\n #9  0x0000000000b8d032 in gdb_wait_for_event (block=0)\n     at gdbsupport/event-loop.cc:597\n #10 gdb_do_one_event () at gdbsupport/event-loop.cc:212\n #11 0x00000000009d19b6 in wait_sync_command_done ()\n     at gdb/top.c:528\n #12 0x00000000009d1a3f in maybe_wait_sync_command_done (was_sync=0)\n     at gdb/top.c:545\n #13 0x00000000009d2033 in execute_command (p=0x7fffffffcb18 \"\", from_tty=0)\n     at gdb/top.c:676\n #14 0x0000000000560d5b in execute_control_command_1 (cmd=0x13b9bb0, from_tty=0)\n     at gdb/cli/cli-script.c:547\n #15 0x000000000056134a in execute_control_command (cmd=0x13b9bb0, from_tty=0)\n     at gdb/cli/cli-script.c:717\n #16 0x00000000004c3bbe in bpstat_do_actions_1 (bsp=0x137f530)\n     at gdb/breakpoint.c:4469\n #17 0x00000000004c3d40 in bpstat_do_actions ()\n     at gdb/breakpoint.c:4533\n #18 0x00000000006a473a in command_handler (command=0x1399ad0 \"run\")\n     at gdb/event-top.c:624\n #19 0x00000000009d182e in read_command_file (stream=0x113e540)\n     at gdb/top.c:443\n #20 0x0000000000563697 in script_from_file (stream=0x113e540, file=0x13bb0b0 \"dp-bug.gdb\")\n     at gdb/cli/cli-script.c:1642\n #21 0x00000000006abd63 in source_gdb_script (extlang=0xc44e80 <extension_language_gdb>, stream=0x113e540,\n     file=0x13bb0b0 \"dp-bug.gdb\") at gdb/extension.c:188\n #22 0x0000000000544400 in source_script_from_stream (stream=0x113e540, file=0x7fffffffd91a \"dp-bug.gdb\",\n     file_to_open=0x13bb0b0 \"dp-bug.gdb\")\n     at gdb/cli/cli-cmds.c:692\n #23 0x0000000000544557 in source_script_with_search (file=0x7fffffffd91a \"dp-bug.gdb\", from_tty=1, search_path=0)\n     at gdb/cli/cli-cmds.c:750\n #24 0x00000000005445cf in source_script (file=0x7fffffffd91a \"dp-bug.gdb\", from_tty=1)\n     at gdb/cli/cli-cmds.c:759\n #25 0x00000000007cf6d9 in catch_command_errors (command=0x5445aa <source_script(char const*, int)>,\n     arg=0x7fffffffd91a \"dp-bug.gdb\", from_tty=1, do_bp_actions=false)\n     at gdb/main.c:523\n #26 0x00000000007cf85d in execute_cmdargs (cmdarg_vec=0x7fffffffd1b0, file_type=CMDARG_FILE, cmd_type=CMDARG_COMMAND,\n     ret=0x7fffffffd18c) at gdb/main.c:615\n #27 0x00000000007d0c8e in captured_main_1 (context=0x7fffffffd3f0)\n     at gdb/main.c:1322\n #28 0x00000000007d0eba in captured_main (data=0x7fffffffd3f0)\n     at gdb/main.c:1343\n #29 0x00000000007d0f25 in gdb_main (args=0x7fffffffd3f0)\n     at gdb/main.c:1368\n #30 0x00000000004186dd in main (argc=5, argv=0x7fffffffd508)\n     at gdb/gdb.c:32\n\nThere are two frames for bpstat_do_actions_1(), one at frame #16 and\nthe other at frame #0.  The one at frame #16 is processing the actions\nfor Breakpoint 2, which is a 'continue'.  The one at frame #0 is attempting\nto process the dprintf breakpoint action.  However, at this point,\nthe value of 'executing_breakpoint_commands' is 1, forcing an early\nreturn, i.e. prior to executing the command(s) associated with the dprintf\nbreakpoint.\n\nFor the sake of comparison, this is what the stack looks like when hitting\nthe dprintf breakpoint for the second time when issuing the 'run'\ncommand from the GDB prompt.\n\nThread 1 \"gdb\" hit Breakpoint 3, bpstat_do_actions_1 (bsp=0x7fffffffccd8)\n    at /ironwood1/sourceware-git/f34-master/bld/../../worktree-master/gdb/breakpoint.c:4431\n4431\t  if (executing_breakpoint_commands)\n\n #0  bpstat_do_actions_1 (bsp=0x7fffffffccd8)\n     at gdb/breakpoint.c:4431\n #1  0x00000000004d8bc6 in dprintf_after_condition_true (bs=0x16b0290)\n     at gdb/breakpoint.c:13048\n #2  0x00000000004c5caa in bpstat_stop_status (aspace=0x116dbc0, bp_addr=0x40116e, thread=0x13f0e60, ws=0x7fffffffd138,\n     stop_chain=0x16b0290) at gdb/breakpoint.c:5498\n #3  0x0000000000768d98 in handle_signal_stop (ecs=0x7fffffffd110)\n     at gdb/infrun.c:6172\n #4  0x00000000007678d3 in handle_inferior_event (ecs=0x7fffffffd110)\n     at gdb/infrun.c:5662\n #5  0x0000000000763cd5 in fetch_inferior_event ()\n     at gdb/infrun.c:4060\n #6  0x0000000000746d7d in inferior_event_handler (event_type=INF_REG_EVENT)\n     at gdb/inf-loop.c:41\n #7  0x00000000007a702f in handle_target_event (error=0, client_data=0x0)\n     at gdb/linux-nat.c:4207\n #8  0x0000000000b8cd6e in gdb_wait_for_event (block=block@entry=0)\n     at gdbsupport/event-loop.cc:701\n #9  0x0000000000b8d032 in gdb_wait_for_event (block=0)\n     at gdbsupport/event-loop.cc:597\n #10 gdb_do_one_event () at gdbsupport/event-loop.cc:212\n #11 0x00000000007cf512 in start_event_loop ()\n     at gdb/main.c:421\n #12 0x00000000007cf631 in captured_command_loop ()\n     at gdb/main.c:481\n #13 0x00000000007d0ebf in captured_main (data=0x7fffffffd3f0)\n     at gdb/main.c:1353\n #14 0x00000000007d0f25 in gdb_main (args=0x7fffffffd3f0)\n     at gdb/main.c:1368\n #15 0x00000000004186dd in main (argc=5, argv=0x7fffffffd508)\n     at gdb/gdb.c:32\n\nThis relatively short backtrace is due to the current UI's async field\nbeing set to 1.\n\nYet another thing to be aware of regarding this problem is the\ndifference in the way that commands associated to dprintf breakpoints\nversus regular breakpoints are handled.  While they both use a command\nlist associated with the breakpoint, regular breakpoints will place\nthe commands to be run on the bpstat chain constructed in\nbp_stop_status().  These commands are run later on.  For dprintf\nbreakpoints, commands are run via the 'after_condition_true' function\npointer directly from bpstat_stop_status().  (The 'commands' field in\nthe bpstat is cleared in dprintf_after_condition_true().  This\nprevents the dprintf commands from being run again later on when other\ncommands on the bpstat chain are processed.)\n\nAnother thing that I noticed is that dprintf breakpoints are the only\ntype of breakpoint which use 'after_condition_true'.  This suggests\nthat one possible way of fixing this problem, that of making dprintf\nbreakpoints work more like regular breakpoints, probably won't work.\n(I must admit, however, that my understanding of this code isn't\ncomplete enough to say why.  I'll trust that whoever implemented it\nhad a good reason for doing it this way.)\n\nThe comment referenced earlier regarding 'executing_breakpoint_commands'\nstates that the reason for checking this variable is to avoid\npotential endless recursion when a 'source' command appears in\nbs->commands.  We know that a dprintf command is constrained to either\n1) execution of a GDB printf command, 2) an inferior function call of\na printf-like function, or 3) execution of an agent-printf command.\nTherefore, infinite recursion due to a 'source' command cannot happen\nwhen executing commands upon hitting a dprintf breakpoint.\n\nI chose to fix this problem by having dprintf_after_condition_true()\ndirectly call execute_control_commands().  This means that it no\nlonger attempts to go through bpstat_do_actions_1() avoiding the\ninfinite recursion check for potential 'source' commands on the\ncommand chain.  I think it simplifies this code a little bit too, a\ndefinite bonus.\n\nSummary:\n\n\t* breakpoint.c (dprintf_after_condition_true): Don't call\n\tbpstat_do_actions_1().  Call execute_control_commands()\n\tinstead.",
    "tree": {
      "sha": "9186dc42dbd53e71ef56b6b863e196157cb855e7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9186dc42dbd53e71ef56b6b863e196157cb855e7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9c95aea186b18310340915045189a4e39b8393ea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c95aea186b18310340915045189a4e39b8393ea",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9c95aea186b18310340915045189a4e39b8393ea",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c95aea186b18310340915045189a4e39b8393ea/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9b49454b4a32d1cb94095c288ab6ddde8aea9a70",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b49454b4a32d1cb94095c288ab6ddde8aea9a70",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9b49454b4a32d1cb94095c288ab6ddde8aea9a70"
    }
  ],
  "stats": {
    "total": 14,
    "additions": 3,
    "deletions": 11
  },
  "files": [
    {
      "sha": "86dffb40e8dfe752b97e59bccde337023c2249ec",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 11,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c95aea186b18310340915045189a4e39b8393ea/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c95aea186b18310340915045189a4e39b8393ea/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=9c95aea186b18310340915045189a4e39b8393ea",
      "patch": "@@ -13004,9 +13004,6 @@ dprintf_print_recreate (struct breakpoint *tp, struct ui_file *fp)\n static void\n dprintf_after_condition_true (struct bpstat *bs)\n {\n-  struct bpstat tmp_bs;\n-  struct bpstat *tmp_bs_p = &tmp_bs;\n-\n   /* dprintf's never cause a stop.  This wasn't set in the\n      check_status hook instead because that would make the dprintf's\n      condition not be evaluated.  */\n@@ -13017,14 +13014,9 @@ dprintf_after_condition_true (struct bpstat *bs)\n      bpstat_do_actions, if a breakpoint that causes a stop happens to\n      be set at same address as this dprintf, or even if running the\n      commands here throws.  */\n-  tmp_bs.commands = bs->commands;\n-  bs->commands = NULL;\n-\n-  bpstat_do_actions_1 (&tmp_bs_p);\n-\n-  /* 'tmp_bs.commands' will usually be NULL by now, but\n-     bpstat_do_actions_1 may return early without processing the whole\n-     list.  */\n+  counted_command_line cmds = std::move (bs->commands);\n+  gdb_assert (cmds != nullptr);\n+  execute_control_commands (cmds.get (), 0);\n }\n \n /* The breakpoint_ops structure to be used on static tracepoints with"
    }
  ]
}