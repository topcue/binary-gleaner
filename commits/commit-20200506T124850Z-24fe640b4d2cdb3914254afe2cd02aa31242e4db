{
  "sha": "24fe640b4d2cdb3914254afe2cd02aa31242e4db",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjRmZTY0MGI0ZDJjZGIzOTE0MjU0YWZlMmNkMDJhYTMxMjQyZTRkYg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-05-06T12:48:50Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-05-06T12:48:50Z"
    },
    "message": "[gdb/testsuite] Fix gdb.reverse/consecutive-{precsave,reverse}.exp with gcc-8\n\nWhen running test-cases gdb.reverse/consecutive-precsave.exp and\ngdb.reverse/consecutive-reverse.exp with gcc-8, we get:\n...\nFAIL: gdb.reverse/consecutive-precsave.exp: stopped at bp, 2nd instr\nFAIL: gdb.reverse/consecutive-reverse.exp: stopped at bp, 2nd instr\n...\n\nThese FAILs are duplicates of the FAILs fixed in commit 7c99e7e2b08\n\"[gdb/testsuite] Fix gdb.base/consecutive.exp with gcc-8\".\n\nFix these in the same manner.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2020-05-06  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.reverse/consecutive-precsave.exp: Handle if instruction after\n\tbreakpoint is at a \"recommended breakpoint location\".\n\t* gdb.reverse/consecutive-reverse.exp: Same.",
    "tree": {
      "sha": "25d9466e23bde6048e452d2ccab87abed9f72a77",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/25d9466e23bde6048e452d2ccab87abed9f72a77"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/24fe640b4d2cdb3914254afe2cd02aa31242e4db",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24fe640b4d2cdb3914254afe2cd02aa31242e4db",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/24fe640b4d2cdb3914254afe2cd02aa31242e4db",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24fe640b4d2cdb3914254afe2cd02aa31242e4db/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0d8683a32122f0027d2ab64082d1f9fced98d599",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0d8683a32122f0027d2ab64082d1f9fced98d599",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0d8683a32122f0027d2ab64082d1f9fced98d599"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 34,
    "deletions": 2
  },
  "files": [
    {
      "sha": "443c3d35d12b10f3f870d604418ee434acbc2ad9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24fe640b4d2cdb3914254afe2cd02aa31242e4db/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24fe640b4d2cdb3914254afe2cd02aa31242e4db/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=24fe640b4d2cdb3914254afe2cd02aa31242e4db",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-06  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.reverse/consecutive-precsave.exp: Handle if instruction after\n+\tbreakpoint is at a \"recommended breakpoint location\".\n+\t* gdb.reverse/consecutive-reverse.exp: Same.\n+\n 2020-05-06  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/watchpoint-reuse-slot.exp (stepi): Print $pc to get current"
    },
    {
      "sha": "dec501d589b65894c9df209ba843db225ad21c37",
      "filename": "gdb/testsuite/gdb.reverse/consecutive-precsave.exp",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24fe640b4d2cdb3914254afe2cd02aa31242e4db/gdb/testsuite/gdb.reverse/consecutive-precsave.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24fe640b4d2cdb3914254afe2cd02aa31242e4db/gdb/testsuite/gdb.reverse/consecutive-precsave.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.reverse/consecutive-precsave.exp?ref=24fe640b4d2cdb3914254afe2cd02aa31242e4db",
      "patch": "@@ -35,6 +35,8 @@ if [supports_process_record] {\n     gdb_test_no_output \"record\" \"turn on process record\"\n }\n \n+set is_stmt [is_stmt_addresses $srcfile]\n+\n set end_location  [gdb_get_line_number \"end of main\"  ]\n gdb_test \"break $end_location\" \\\n     \"Breakpoint $decimal at .*$srcfile, line $end_location\\.\" \\\n@@ -79,14 +81,25 @@ gdb_test \"break \\*$foo2_addr\" \"Breakpoint $decimal at $foo2_addr: file .*\" \\\n \n set testmsg \"stopped at bp, 2nd instr\"\n gdb_test_multiple \"step\" $testmsg {\n-    -re \"Breakpoint $decimal, ($hex) in foo.*$gdb_prompt $\" {\n+    -re -wrap \"Breakpoint $decimal, ($hex) in foo.*\" {\n \tset stop_addr $expect_out(1,string)\n \tif [eval expr \"$foo2_addr == $stop_addr\"] then {\n \t    pass \"stopped at bp, 2nd instr\"\n \t} else {\n \t    fail \"stopped at bp, 2nd instr (wrong address)\"\n \t}\n     }\n+    -re -wrap \"Breakpoint $decimal, foo.*\" {\n+       set stop_addr [get_valueof \"/x\" \"\\$pc\" \"\" \"value of pc\"]\n+       set stop_addr_is_stmt [hex_in_list $stop_addr $is_stmt]\n+       if { ! $stop_addr_is_stmt } {\n+           fail \"stopped at bp, 2nd instr (missing hex prefix)\"\n+       } elseif [eval expr \"$foo2_addr == $stop_addr\"] then {\n+           pass \"stopped at bp, 2nd instr\"\n+       } else {\n+           fail \"stopped at bp, 2nd instr (wrong address)\"\n+       }\n+    }\n }\n \n ###"
    },
    {
      "sha": "ff03e6744a4628a7ea87dc61eded971a14558add",
      "filename": "gdb/testsuite/gdb.reverse/consecutive-reverse.exp",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24fe640b4d2cdb3914254afe2cd02aa31242e4db/gdb/testsuite/gdb.reverse/consecutive-reverse.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24fe640b4d2cdb3914254afe2cd02aa31242e4db/gdb/testsuite/gdb.reverse/consecutive-reverse.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.reverse/consecutive-reverse.exp?ref=24fe640b4d2cdb3914254afe2cd02aa31242e4db",
      "patch": "@@ -33,6 +33,8 @@ if [supports_process_record] {\n     gdb_test_no_output \"record\" \"turn on process record\"\n }\n \n+set is_stmt [is_stmt_addresses $srcfile]\n+\n gdb_breakpoint foo\n gdb_test \"continue\" \"Breakpoint $decimal, foo .*\" \\\n \t\"continue to breakpoint in foo\"\n@@ -59,14 +61,25 @@ gdb_test \"break \\*$foo2_addr\" \"Breakpoint $decimal at $foo2_addr: file .*\" \\\n \n set testmsg \"stopped at bp, 2nd instr\"\n gdb_test_multiple \"step\" $testmsg {\n-    -re \"Breakpoint $decimal, ($hex) in foo.*$gdb_prompt $\" {\n+    -re -wrap \"Breakpoint $decimal, ($hex) in foo.*\" {\n \tset stop_addr $expect_out(1,string)\n \tif [eval expr \"$foo2_addr == $stop_addr\"] then {\n \t    pass \"stopped at bp, 2nd instr\"\n \t} else {\n \t    fail \"stopped at bp, 2nd instr (wrong address)\"\n \t}\n     }\n+    -re -wrap \"Breakpoint $decimal, foo.*\" {\n+       set stop_addr [get_valueof \"/x\" \"\\$pc\" \"\" \"value of pc\"]\n+       set stop_addr_is_stmt [hex_in_list $stop_addr $is_stmt]\n+       if { ! $stop_addr_is_stmt } {\n+           fail \"stopped at bp, 2nd instr (missing hex prefix)\"\n+       } elseif [eval expr \"$foo2_addr == $stop_addr\"] then {\n+           pass \"stopped at bp, 2nd instr\"\n+       } else {\n+           fail \"stopped at bp, 2nd instr (wrong address)\"\n+       }\n+    }\n }\n \n ###"
    }
  ]
}