{
  "sha": "17d66340ebb4528307c6c5d08383859aab785db7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTdkNjYzNDBlYmI0NTI4MzA3YzZjNWQwODM4Mzg1OWFhYjc4NWRiNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:44Z"
    },
    "message": "Attach partial symtab storage to psymbol_functions\n\nCurrently, the storage for partial symtabs is attached to the objfile.\nUltimately, though, this direct assocation will be removed, and the\nstorage will be owned by the psymbol_functions object.\n\nThis patch is a step toward this goal.  The storage is already managed\nas a shared_ptr, to enable cross-objfile sharing, so this adds a\nreference from the psymbol_functions, and changes some code in\npsymtab.c to use this reference instead.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dwarf2_build_psymtabs): Call\n\tset_partial_symtabs.\n\t* symfile.c (syms_from_objfile_1, reread_symbols): Update.\n\t* psymtab.h (make_psymbol_functions): Add partial_symtabs\n\tparameter.\n\t* psymtab.c (find_pc_sect_psymtab): Add partial_symtabs\n\tparameter.\n\t(psymbol_functions::find_pc_sect_compunit_symtab)\n\t(psymbol_functions::print_stats, psymbol_functions::dump)\n\t(psymbol_functions::has_symbols): Update.\n\t(make_psymbol_functions, dump_psymtab_addrmap): Add\n\tpartial_symtabs parameter.\n\t(maintenance_print_psymbols): Update.\n\t(psymbol_functions::expand_symtabs_matching): Update.\n\t* psympriv.h (struct psymbol_functions): Add constructor.\n\t<m_partial_symtabs>: New member.\n\t<set_partial_symtabs>: New method.",
    "tree": {
      "sha": "8ac73162b98501fb1d60f0961a6487a568095220",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8ac73162b98501fb1d60f0961a6487a568095220"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/17d66340ebb4528307c6c5d08383859aab785db7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17d66340ebb4528307c6c5d08383859aab785db7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/17d66340ebb4528307c6c5d08383859aab785db7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17d66340ebb4528307c6c5d08383859aab785db7/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "84685904937577dabf4fb0b458784f853fc648be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84685904937577dabf4fb0b458784f853fc648be",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/84685904937577dabf4fb0b458784f853fc648be"
    }
  ],
  "stats": {
    "total": 100,
    "additions": 76,
    "deletions": 24
  },
  "files": [
    {
      "sha": "abeaad8f61333db6026cfa85d40c9e6f10ead388",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17d66340ebb4528307c6c5d08383859aab785db7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17d66340ebb4528307c6c5d08383859aab785db7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=17d66340ebb4528307c6c5d08383859aab785db7",
      "patch": "@@ -1,3 +1,23 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dwarf2_build_psymtabs): Call\n+\tset_partial_symtabs.\n+\t* symfile.c (syms_from_objfile_1, reread_symbols): Update.\n+\t* psymtab.h (make_psymbol_functions): Add partial_symtabs\n+\tparameter.\n+\t* psymtab.c (find_pc_sect_psymtab): Add partial_symtabs\n+\tparameter.\n+\t(psymbol_functions::find_pc_sect_compunit_symtab)\n+\t(psymbol_functions::print_stats, psymbol_functions::dump)\n+\t(psymbol_functions::has_symbols): Update.\n+\t(make_psymbol_functions, dump_psymtab_addrmap): Add\n+\tpartial_symtabs parameter.\n+\t(maintenance_print_psymbols): Update.\n+\t(psymbol_functions::expand_symtabs_matching): Update.\n+\t* psympriv.h (struct psymbol_functions): Add constructor.\n+\t<m_partial_symtabs>: New member.\n+\t<set_partial_symtabs>: New method.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (dwarf2_create_include_psymtab): Add per_bfd"
    },
    {
      "sha": "c4acf292542fb5aafeefddf9a96502cd839ad924",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17d66340ebb4528307c6c5d08383859aab785db7/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17d66340ebb4528307c6c5d08383859aab785db7/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=17d66340ebb4528307c6c5d08383859aab785db7",
      "patch": "@@ -6128,6 +6128,12 @@ dwarf2_build_psymtabs (struct objfile *objfile)\n       /* Partial symbols were already read, so now we can simply\n \t attach them.  */\n       objfile->partial_symtabs = per_bfd->partial_symtabs;\n+      /* This is a temporary hack to ensure that the objfile and 'qf'\n+\t psymtabs are identical.  */\n+      psymbol_functions *psf\n+\t= dynamic_cast<psymbol_functions *> (objfile->qf.get ());\n+      gdb_assert (psf != nullptr);\n+      psf->set_partial_symtabs (per_bfd->partial_symtabs);\n       per_objfile->resize_symtabs ();\n       return;\n     }"
    },
    {
      "sha": "b1b8027ce3ae0a9f56d423badfef0edf69a0b7ff",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17d66340ebb4528307c6c5d08383859aab785db7/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17d66340ebb4528307c6c5d08383859aab785db7/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=17d66340ebb4528307c6c5d08383859aab785db7",
      "patch": "@@ -476,6 +476,11 @@ class psymtab_discarder\n    partial symbols.  */\n struct psymbol_functions : public quick_symbol_functions\n {\n+  explicit psymbol_functions (const std::shared_ptr<psymtab_storage> &storage)\n+    : m_partial_symtabs (storage)\n+  {\n+  }\n+\n   bool has_symbols (struct objfile *objfile) override;\n \n   struct symtab *find_last_source_symtab (struct objfile *objfile) override;\n@@ -540,13 +545,23 @@ struct psymbol_functions : public quick_symbol_functions\n     m_psymbol_map.clear ();\n   }\n \n+  /* Replace the partial symbol table storage in this object with\n+     SYMS.  */\n+  void set_partial_symtabs (const std::shared_ptr<psymtab_storage> &syms)\n+  {\n+    m_partial_symtabs = syms;\n+  }\n+\n private:\n \n   void fill_psymbol_map (struct objfile *objfile,\n \t\t\t struct partial_symtab *psymtab,\n \t\t\t std::set<CORE_ADDR> *seen_addrs,\n \t\t\t const std::vector<partial_symbol *> &symbols);\n \n+  /* Storage for the partial symbols.  */\n+  std::shared_ptr<psymtab_storage> m_partial_symtabs;\n+\n   /* Map symbol addresses to the partial symtab that defines the\n      object at that address.  */\n "
    },
    {
      "sha": "1549ead04d01c4ae8ac93b9f2eeced21accd60dd",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 31,
      "deletions": 21,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17d66340ebb4528307c6c5d08383859aab785db7/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17d66340ebb4528307c6c5d08383859aab785db7/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=17d66340ebb4528307c6c5d08383859aab785db7",
      "patch": "@@ -275,7 +275,9 @@ find_pc_sect_psymtab_closer (struct objfile *objfile,\n    psymtab that contains a symbol whose address is closest to PC.  */\n \n static struct partial_symtab *\n-find_pc_sect_psymtab (struct objfile *objfile, CORE_ADDR pc,\n+find_pc_sect_psymtab (struct objfile *objfile,\n+\t\t      psymtab_storage *partial_symtabs,\n+\t\t      CORE_ADDR pc,\n \t\t      struct obj_section *section,\n \t\t      struct bound_minimal_symbol msymbol)\n {\n@@ -291,14 +293,14 @@ find_pc_sect_psymtab (struct objfile *objfile, CORE_ADDR pc,\n      partial symtabs then we will end up returning a pointer to an object\n      that is not a partial_symtab, which doesn't end well.  */\n \n-  if (objfile->partial_symtabs->psymtabs != NULL\n-      && objfile->partial_symtabs->psymtabs_addrmap != NULL)\n+  if (partial_symtabs->psymtabs != NULL\n+      && partial_symtabs->psymtabs_addrmap != NULL)\n     {\n       CORE_ADDR baseaddr = objfile->text_section_offset ();\n \n       struct partial_symtab *pst\n \t= ((struct partial_symtab *)\n-\t   addrmap_find (objfile->partial_symtabs->psymtabs_addrmap,\n+\t   addrmap_find (partial_symtabs->psymtabs_addrmap,\n \t\t\t pc - baseaddr));\n       if (pst != NULL)\n \t{\n@@ -367,7 +369,9 @@ psymbol_functions::find_pc_sect_compunit_symtab\n       struct obj_section *section,\n       int warn_if_readin)\n {\n-  struct partial_symtab *ps = find_pc_sect_psymtab (objfile, pc, section,\n+  struct partial_symtab *ps = find_pc_sect_psymtab (objfile,\n+\t\t\t\t\t\t    m_partial_symtabs.get (),\n+\t\t\t\t\t\t    pc, section,\n \t\t\t\t\t\t    msymbol);\n   if (ps != NULL)\n     {\n@@ -1013,12 +1017,12 @@ psymbol_functions::print_stats (struct objfile *objfile, bool print_bcache)\n       printf_filtered (_(\"  Number of psym tables (not yet expanded): %d\\n\"),\n \t\t       i);\n       printf_filtered (_(\"  Total memory used for psymbol cache: %d\\n\"),\n-\t\t       objfile->partial_symtabs->psymbol_cache.memory_used ());\n+\t\t       m_partial_symtabs->psymbol_cache.memory_used ());\n     }\n   else\n     {\n       printf_filtered (_(\"Psymbol byte cache statistics:\\n\"));\n-      objfile->partial_symtabs->psymbol_cache.print_statistics\n+      m_partial_symtabs->psymbol_cache.print_statistics\n \t(\"partial symbol cache\");\n     }\n }\n@@ -1031,10 +1035,10 @@ psymbol_functions::dump (struct objfile *objfile)\n {\n   struct partial_symtab *psymtab;\n \n-  if (objfile->partial_symtabs->psymtabs)\n+  if (m_partial_symtabs->psymtabs)\n     {\n       printf_filtered (\"Psymtabs:\\n\");\n-      for (psymtab = objfile->partial_symtabs->psymtabs;\n+      for (psymtab = m_partial_symtabs->psymtabs;\n \t   psymtab != NULL;\n \t   psymtab = psymtab->next)\n \t{\n@@ -1321,7 +1325,7 @@ psymbol_functions::expand_symtabs_matching\n   for (partial_symtab *ps : require_partial_symbols (objfile, true))\n     ps->searched_flag = PST_NOT_SEARCHED;\n \n-  for (partial_symtab *ps : objfile->psymtabs ())\n+  for (partial_symtab *ps : m_partial_symtabs->range ())\n     {\n       QUIT;\n \n@@ -1373,7 +1377,7 @@ psymbol_functions::expand_symtabs_matching\n bool\n psymbol_functions::has_symbols (struct objfile *objfile)\n {\n-  return objfile->partial_symtabs->psymtabs != NULL;\n+  return m_partial_symtabs->psymtabs != NULL;\n }\n \n /* Helper function for psym_find_compunit_symtab_by_address that fills\n@@ -1446,9 +1450,9 @@ psymbol_functions::find_compunit_symtab_by_address (struct objfile *objfile,\n }\n \n quick_symbol_functions_up\n-make_psymbol_functions ()\n+make_psymbol_functions (const std::shared_ptr<psymtab_storage> &storage)\n {\n-  return quick_symbol_functions_up (new psymbol_functions);\n+  return quick_symbol_functions_up (new psymbol_functions (storage));\n }\n \n \f\n@@ -1724,22 +1728,24 @@ dump_psymtab_addrmap_1 (void *datap, CORE_ADDR start_addr, void *obj)\n    of PSYMTAB.  If PSYMTAB is NULL print the entire addrmap.  */\n \n static void\n-dump_psymtab_addrmap (struct objfile *objfile, struct partial_symtab *psymtab,\n+dump_psymtab_addrmap (struct objfile *objfile,\n+\t\t      psymtab_storage *partial_symtabs,\n+\t\t      struct partial_symtab *psymtab,\n \t\t      struct ui_file *outfile)\n {\n   struct dump_psymtab_addrmap_data addrmap_dump_data;\n \n   if ((psymtab == NULL\n        || psymtab->psymtabs_addrmap_supported)\n-      && objfile->partial_symtabs->psymtabs_addrmap != NULL)\n+      && partial_symtabs->psymtabs_addrmap != NULL)\n     {\n       addrmap_dump_data.objfile = objfile;\n       addrmap_dump_data.psymtab = psymtab;\n       addrmap_dump_data.outfile = outfile;\n       addrmap_dump_data.previous_matched = 0;\n       fprintf_filtered (outfile, \"%sddress map:\\n\",\n \t\t\tpsymtab == NULL ? \"Entire a\" : \"  A\");\n-      addrmap_foreach (objfile->partial_symtabs->psymtabs_addrmap,\n+      addrmap_foreach (partial_symtabs->psymtabs_addrmap,\n \t\t       dump_psymtab_addrmap_1, &addrmap_dump_data);\n     }\n }\n@@ -1830,14 +1836,17 @@ maintenance_print_psymbols (const char *args, int from_tty)\n       if (!print_for_objfile)\n \tcontinue;\n \n+      psymtab_storage *partial_symtabs = objfile->partial_symtabs.get ();\n+\n       if (address_arg != NULL)\n \t{\n \t  struct bound_minimal_symbol msymbol = { NULL, NULL };\n \n \t  /* We don't assume each pc has a unique objfile (this is for\n \t     debugging).  */\n-\t  struct partial_symtab *ps = find_pc_sect_psymtab (objfile, pc,\n-\t\t\t\t\t\t\t    section, msymbol);\n+\t  struct partial_symtab *ps\n+\t    = find_pc_sect_psymtab (objfile, partial_symtabs, pc,\n+\t\t\t\t    section, msymbol);\n \t  if (ps != NULL)\n \t    {\n \t      if (!printed_objfile_header)\n@@ -1847,7 +1856,7 @@ maintenance_print_psymbols (const char *args, int from_tty)\n \t\t  printed_objfile_header = 1;\n \t\t}\n \t      dump_psymtab (objfile, ps, outfile);\n-\t      dump_psymtab_addrmap (objfile, ps, outfile);\n+\t      dump_psymtab_addrmap (objfile, partial_symtabs, ps, outfile);\n \t      found = 1;\n \t    }\n \t}\n@@ -1874,7 +1883,8 @@ maintenance_print_psymbols (const char *args, int from_tty)\n \t\t      printed_objfile_header = 1;\n \t\t    }\n \t\t  dump_psymtab (objfile, ps, outfile);\n-\t\t  dump_psymtab_addrmap (objfile, ps, outfile);\n+\t\t  dump_psymtab_addrmap (objfile, partial_symtabs, ps,\n+\t\t\t\t\toutfile);\n \t\t}\n \t    }\n \t}\n@@ -1886,7 +1896,7 @@ maintenance_print_psymbols (const char *args, int from_tty)\n \t  && objfile->partial_symtabs->psymtabs_addrmap != NULL)\n \t{\n \t  outfile->puts (\"\\n\");\n-\t  dump_psymtab_addrmap (objfile, NULL, outfile);\n+\t  dump_psymtab_addrmap (objfile, partial_symtabs, NULL, outfile);\n \t}\n     }\n "
    },
    {
      "sha": "18b47c55b3caf9ad21fc7fc8f1f2bcb9eb38decf",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17d66340ebb4528307c6c5d08383859aab785db7/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17d66340ebb4528307c6c5d08383859aab785db7/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=17d66340ebb4528307c6c5d08383859aab785db7",
      "patch": "@@ -154,6 +154,7 @@ class psymtab_storage\n extern psymtab_storage::partial_symtab_range require_partial_symbols\n     (struct objfile *objfile, bool verbose);\n \n-extern quick_symbol_functions_up make_psymbol_functions ();\n+extern quick_symbol_functions_up make_psymbol_functions\n+     (const std::shared_ptr<psymtab_storage> &);\n \n #endif /* PSYMTAB_H */"
    },
    {
      "sha": "12746c4337478b900d44c0621af9c4123b3bc695",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17d66340ebb4528307c6c5d08383859aab785db7/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17d66340ebb4528307c6c5d08383859aab785db7/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=17d66340ebb4528307c6c5d08383859aab785db7",
      "patch": "@@ -904,7 +904,7 @@ syms_from_objfile_1 (struct objfile *objfile,\n   const int mainline = add_flags & SYMFILE_MAINLINE;\n \n   objfile_set_sym_fns (objfile, find_sym_fns (objfile->obfd));\n-  objfile->qf = make_psymbol_functions ();\n+  objfile->qf = make_psymbol_functions (objfile->partial_symtabs);\n \n   if (objfile->sf == NULL)\n     {\n@@ -2555,7 +2555,7 @@ reread_symbols (void)\n \t     based on whether .gdb_index is present, and we need it to\n \t     start over.  PR symtab/15885  */\n \t  objfile_set_sym_fns (objfile, find_sym_fns (objfile->obfd));\n-\t  objfile->qf = make_psymbol_functions ();\n+\t  objfile->qf = make_psymbol_functions (objfile->partial_symtabs);\n \n \t  build_objfile_section_table (objfile);\n "
    }
  ]
}