{
  "sha": "bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmY5YWU5ZDhjMzdhNGUxZGZkMTkyZjI2NmMyMGVhNTc4NmZkMWJiZA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:24Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:24Z"
    },
    "message": "gdbserver/linux-low: turn 'get_pc' and 'set_pc' into methods\n\ngdbserver/ChangeLog:\n2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn the 'get_pc' and 'set_pc' linux target ops into methods\n\tof linux_process_target.\n\n\t* linux-low.h (struct linux_target_ops): Remove the ops.\n\t(class linux_process_target) <low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t* linux-low.cc (supports_breakpoints): Turn into...\n\t(linux_process_target::low_supports_breakpoints): ...this.\n\t(linux_process_target::low_get_pc): Define.\n\t(linux_process_target::low_set_pc): Define.\n\n\tUpdate the callers below.\n\n\t(linux_process_target::get_pc)\n\t(linux_process_target::save_stop_reason)\n\t(linux_process_target::maybe_move_out_of_jump_pad)\n\t(linux_process_target::wait_1)\n\t(linux_process_target::resume_one_lwp_throw)\n\t(linux_process_target::resume)\n\t(linux_process_target::proceed_all_lwps)\n\t(linux_process_target::read_pc)\n\t(linux_process_target::write_pc)\n\n\t* linux-x86-low.cc (class linux_process_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(x86_target::low_supports_breakpoints): Define.\n\t(x86_get_pc): Turn into...\n\t(x86_target::low_get_pc): ...this.\n\t(x86_set_pc): Turn into...\n\t(x86_target::low_set_pc): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-arm-low.cc (class arm_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(arm_target::low_supports_breakpoints)\n\t(arm_target::low_get_pc)\n\t(arm_target::low_set_pc): Define.\n\t(the_low_target): Remove the op fields.\n\t* linux-bfin-low.cc (class bfin_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(bfin_target::low_supports_breakpoints)\n\t(bfin_target::low_get_pc)\n\t(bfin_target::low_set_pc): Define.\n\t(the_low_target): Remove the op fields.\n\t* linux-cris-low.cc (class cris_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(cris_target::low_supports_breakpoints)\n\t(cris_target::low_get_pc)\n\t(cris_target::low_set_pc): Define.\n\t(the_low_target): Remove the op fields.\n\t* linux-crisv32-low.cc (class crisv32_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(crisv32_target::low_supports_breakpoints)\n\t(crisv32_target::low_get_pc)\n\t(crisv32_target::low_set_pc): Define.\n\t(the_low_target): Remove the op fields.\n\t* linux-m32r-low.cc (class m32r_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(m32r_target::low_supports_breakpoints)\n\t(m32r_target::low_get_pc)\n\t(m32r_target::low_set_pc): Define.\n\t(the_low_target): Remove the op fields.\n\t* linux-m68k-low.cc (class m68k_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(m68k_target::low_supports_breakpoints)\n\t(m68k_target::low_get_pc)\n\t(m68k_target::low_set_pc): Define.\n\t(the_low_target): Remove the op fields.\n\t* linux-nios2-low.cc (class nios2_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(nios2_target::low_supports_breakpoints)\n\t(nios2_target::low_get_pc)\n\t(nios2_target::low_set_pc): Define.\n\t(the_low_target): Remove the op fields.\n\t* linux-sh-low.cc (class sh_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(sh_target::low_supports_breakpoints)\n\t(sh_target::low_get_pc)\n\t(sh_target::low_set_pc): Define.\n\t(the_low_target): Remove the op fields.\n\t* linux-xtensa-low.cc (class xtensa_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(xtensa_target::low_supports_breakpoints)\n\t(xtensa_target::low_get_pc)\n\t(xtensa_target::low_set_pc): Define.\n\t(the_low_target): Remove the op fields.\n\t* linux-sparc-low.cc (class sparc_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>: Declare.\n\t(sparc_target::low_supports_breakpoints)\n\t(sparc_target::low_get_pc): Define.\n\t(the_low_target): Remove the op fields.\n\t* linux-tile-low.cc (class tile_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(tile_target::low_supports_breakpoints)\n\t(tile_target::low_get_pc)\n\t(tile_target::low_set_pc): Define.\n\t(the_low_target): Remove the op fields.\n\t* linux-aarch64-low.cc (class aarch64_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(aarch64_target::low_supports_breakpoints): Define.\n\t(aarch64_get_pc): Turn into...\n\t(aarch64_target::low_get_pc): ...this.\n\t(aarch64_set_pc): Turn into...\n\t(aarch64_target::low_set_pc): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-mips-low.cc (class mips_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(mips_target::low_supports_breakpoints): Define.\n\t(mips_get_pc): Turn into...\n\t(mips_target::low_get_pc): ...this.\n\t(mips_set_pc): Turn into...\n\t(mips_target::low_set_pc): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-ppc-low.cc (class ppc_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(ppc_target::low_supports_breakpoints): Define.\n\t(ppc_get_pc): Turn into...\n\t(ppc_target::low_get_pc): ...this.\n\t(ppc_set_pc): Turn into...\n\t(ppc_target::low_set_pc): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-riscv-low.cc (class riscv_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(riscv_target::low_supports_breakpoints): Define.\n\t(riscv_get_pc): Turn into...\n\t(riscv_target::low_get_pc): ...this.\n\t(riscv_set_pc): Turn into...\n\t(riscv_target::low_set_pc): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-s390-low.cc (class s390_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(s390_target::low_supports_breakpoints): Define.\n\t(s390_get_pc): Turn into...\n\t(s390_target::low_get_pc): ...this.\n\t(s390_set_pc): Turn into...\n\t(s390_target::low_set_pc): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-tic6x-low.cc (class tic6x_target)\n\t<low_supports_breakpoints>\n\t<low_get_pc>\n\t<low_set_pc>: Declare.\n\t(tic6x_target::low_supports_breakpoints): Define.\n\t(tic6x_get_pc): Turn into...\n\t(tic6x_target::low_get_pc): ...this.\n\t(tic6x_set_pc): Turn into...\n\t(tic6x_target::low_set_pc): ...this.\n\t(the_low_target): Remove the op fields.",
    "tree": {
      "sha": "4d2f804cb70628cc5880077267d5681a54d52e56",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4d2f804cb70628cc5880077267d5681a54d52e56"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "df95181f00dacf335deb4415e3e6061548b917ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df95181f00dacf335deb4415e3e6061548b917ba",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/df95181f00dacf335deb4415e3e6061548b917ba"
    }
  ],
  "stats": {
    "total": 692,
    "additions": 597,
    "deletions": 95
  },
  "files": [
    {
      "sha": "891eccd63bb7653314ae16cdfc776b34966fed67",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 183,
      "deletions": 0,
      "changes": 183,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -1,3 +1,186 @@\n+2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn the 'get_pc' and 'set_pc' linux target ops into methods\n+\tof linux_process_target.\n+\n+\t* linux-low.h (struct linux_target_ops): Remove the ops.\n+\t(class linux_process_target) <low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t* linux-low.cc (supports_breakpoints): Turn into...\n+\t(linux_process_target::low_supports_breakpoints): ...this.\n+\t(linux_process_target::low_get_pc): Define.\n+\t(linux_process_target::low_set_pc): Define.\n+\n+\tUpdate the callers below.\n+\n+\t(linux_process_target::get_pc)\n+\t(linux_process_target::save_stop_reason)\n+\t(linux_process_target::maybe_move_out_of_jump_pad)\n+\t(linux_process_target::wait_1)\n+\t(linux_process_target::resume_one_lwp_throw)\n+\t(linux_process_target::resume)\n+\t(linux_process_target::proceed_all_lwps)\n+\t(linux_process_target::read_pc)\n+\t(linux_process_target::write_pc)\n+\n+\t* linux-x86-low.cc (class linux_process_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(x86_target::low_supports_breakpoints): Define.\n+\t(x86_get_pc): Turn into...\n+\t(x86_target::low_get_pc): ...this.\n+\t(x86_set_pc): Turn into...\n+\t(x86_target::low_set_pc): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-arm-low.cc (class arm_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(arm_target::low_supports_breakpoints)\n+\t(arm_target::low_get_pc)\n+\t(arm_target::low_set_pc): Define.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-bfin-low.cc (class bfin_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(bfin_target::low_supports_breakpoints)\n+\t(bfin_target::low_get_pc)\n+\t(bfin_target::low_set_pc): Define.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-cris-low.cc (class cris_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(cris_target::low_supports_breakpoints)\n+\t(cris_target::low_get_pc)\n+\t(cris_target::low_set_pc): Define.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-crisv32-low.cc (class crisv32_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(crisv32_target::low_supports_breakpoints)\n+\t(crisv32_target::low_get_pc)\n+\t(crisv32_target::low_set_pc): Define.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-m32r-low.cc (class m32r_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(m32r_target::low_supports_breakpoints)\n+\t(m32r_target::low_get_pc)\n+\t(m32r_target::low_set_pc): Define.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-m68k-low.cc (class m68k_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(m68k_target::low_supports_breakpoints)\n+\t(m68k_target::low_get_pc)\n+\t(m68k_target::low_set_pc): Define.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-nios2-low.cc (class nios2_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(nios2_target::low_supports_breakpoints)\n+\t(nios2_target::low_get_pc)\n+\t(nios2_target::low_set_pc): Define.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-sh-low.cc (class sh_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(sh_target::low_supports_breakpoints)\n+\t(sh_target::low_get_pc)\n+\t(sh_target::low_set_pc): Define.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-xtensa-low.cc (class xtensa_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(xtensa_target::low_supports_breakpoints)\n+\t(xtensa_target::low_get_pc)\n+\t(xtensa_target::low_set_pc): Define.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-sparc-low.cc (class sparc_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>: Declare.\n+\t(sparc_target::low_supports_breakpoints)\n+\t(sparc_target::low_get_pc): Define.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-tile-low.cc (class tile_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(tile_target::low_supports_breakpoints)\n+\t(tile_target::low_get_pc)\n+\t(tile_target::low_set_pc): Define.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-aarch64-low.cc (class aarch64_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(aarch64_target::low_supports_breakpoints): Define.\n+\t(aarch64_get_pc): Turn into...\n+\t(aarch64_target::low_get_pc): ...this.\n+\t(aarch64_set_pc): Turn into...\n+\t(aarch64_target::low_set_pc): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-mips-low.cc (class mips_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(mips_target::low_supports_breakpoints): Define.\n+\t(mips_get_pc): Turn into...\n+\t(mips_target::low_get_pc): ...this.\n+\t(mips_set_pc): Turn into...\n+\t(mips_target::low_set_pc): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-ppc-low.cc (class ppc_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(ppc_target::low_supports_breakpoints): Define.\n+\t(ppc_get_pc): Turn into...\n+\t(ppc_target::low_get_pc): ...this.\n+\t(ppc_set_pc): Turn into...\n+\t(ppc_target::low_set_pc): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-riscv-low.cc (class riscv_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(riscv_target::low_supports_breakpoints): Define.\n+\t(riscv_get_pc): Turn into...\n+\t(riscv_target::low_get_pc): ...this.\n+\t(riscv_set_pc): Turn into...\n+\t(riscv_target::low_set_pc): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-s390-low.cc (class s390_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(s390_target::low_supports_breakpoints): Define.\n+\t(s390_get_pc): Turn into...\n+\t(s390_target::low_get_pc): ...this.\n+\t(s390_set_pc): Turn into...\n+\t(s390_target::low_set_pc): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-tic6x-low.cc (class tic6x_target)\n+\t<low_supports_breakpoints>\n+\t<low_get_pc>\n+\t<low_set_pc>: Declare.\n+\t(tic6x_target::low_supports_breakpoints): Define.\n+\t(tic6x_get_pc): Turn into...\n+\t(tic6x_target::low_get_pc): ...this.\n+\t(tic6x_set_pc): Turn into...\n+\t(tic6x_target::low_set_pc): ...this.\n+\t(the_low_target): Remove the op fields.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn some more static methods in linux-low into private methods"
    },
    {
      "sha": "6bed620320dd93afb54ba65dadc6a7ae197c6db0",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 18,
      "deletions": 8,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -64,6 +64,12 @@ class aarch64_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -189,21 +195,27 @@ aarch64_store_pauthregset (struct regcache *regcache, const void *buf)\n \t\t   &pauth_regset[1]);\n }\n \n-/* Implementation of linux_target_ops method \"get_pc\".  */\n+bool\n+aarch64_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+/* Implementation of linux target ops method \"low_get_pc\".  */\n \n-static CORE_ADDR\n-aarch64_get_pc (struct regcache *regcache)\n+CORE_ADDR\n+aarch64_target::low_get_pc (regcache *regcache)\n {\n   if (register_size (regcache->tdesc, 0) == 8)\n     return linux_get_pc_64bit (regcache);\n   else\n     return linux_get_pc_32bit (regcache);\n }\n \n-/* Implementation of linux_target_ops method \"set_pc\".  */\n+/* Implementation of linux target ops method \"low_set_pc\".  */\n \n-static void\n-aarch64_set_pc (struct regcache *regcache, CORE_ADDR pc)\n+void\n+aarch64_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n {\n   if (register_size (regcache->tdesc, 0) == 8)\n     linux_set_pc_64bit (regcache, pc);\n@@ -3085,8 +3097,6 @@ aarch64_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  aarch64_get_pc,\n-  aarch64_set_pc,\n   aarch64_breakpoint_kind_from_pc,\n   aarch64_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */"
    },
    {
      "sha": "7b9ef8999f605fc22d961b585137290fc89518e9",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 24,
      "deletions": 2,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -69,12 +69,36 @@ class arm_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n \n static arm_target the_arm_target;\n \n+bool\n+arm_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+arm_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_32bit (regcache);\n+}\n+\n+void\n+arm_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n+{\n+  linux_set_pc_32bit (regcache, pc);\n+}\n+\n /* Information describing the hardware breakpoint capabilities.  */\n static struct\n {\n@@ -1027,8 +1051,6 @@ arm_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  linux_get_pc_32bit,\n-  linux_set_pc_32bit,\n   arm_breakpoint_kind_from_pc,\n   arm_sw_breakpoint_from_kind,\n   arm_gdbserver_get_next_pcs,"
    },
    {
      "sha": "f734c122090795db807c71fe84325cbf5681a1bd",
      "filename": "gdbserver/linux-bfin-low.cc",
      "status": "modified",
      "additions": 24,
      "deletions": 2,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-bfin-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-bfin-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-bfin-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -38,12 +38,36 @@ class bfin_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n \n static bfin_target the_bfin_target;\n \n+bool\n+bfin_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+bfin_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_32bit (regcache);\n+}\n+\n+void\n+bfin_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n+{\n+  linux_set_pc_32bit (regcache, pc);\n+}\n+\n /* Defined in auto-generated file reg-bfin.c.  */\n void init_registers_bfin (void);\n extern const struct target_desc *tdesc_bfin;\n@@ -135,8 +159,6 @@ bfin_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  linux_get_pc_32bit,\n-  linux_set_pc_32bit,\n   NULL, /* breakpoint_kind_from_pc */\n   bfin_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */"
    },
    {
      "sha": "50c9b5bd8586528f75556d21bf63fc56b51a10d7",
      "filename": "gdbserver/linux-cris-low.cc",
      "status": "modified",
      "additions": 24,
      "deletions": 2,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-cris-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-cris-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-cris-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -35,12 +35,36 @@ class cris_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n \n static cris_target the_cris_target;\n \n+bool\n+cris_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+cris_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_32bit (regcache);\n+}\n+\n+void\n+cris_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n+{\n+  linux_set_pc_32bit (regcache, pc);\n+}\n+\n /* Defined in auto-generated file reg-cris.c.  */\n void init_registers_cris (void);\n extern const struct target_desc *tdesc_cris;\n@@ -132,8 +156,6 @@ cris_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  linux_get_pc_32bit,\n-  linux_set_pc_32bit,\n   NULL, /* breakpoint_kind_from_pc */\n   cris_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */"
    },
    {
      "sha": "1d650e3ded96ce6a2c9b0c7b18e50ecc76406983",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 24,
      "deletions": 2,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -35,6 +35,12 @@ class crisv32_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -55,6 +61,24 @@ crisv32_target::low_cannot_store_register (int regno)\n \t\t\t  \"is not implemented by the target\");\n }\n \n+bool\n+crisv32_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+crisv32_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_32bit (regcache);\n+}\n+\n+void\n+crisv32_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n+{\n+  linux_set_pc_32bit (regcache, pc);\n+}\n+\n /* Defined in auto-generated file reg-crisv32.c.  */\n void init_registers_crisv32 (void);\n extern const struct target_desc *tdesc_crisv32;\n@@ -429,8 +453,6 @@ crisv32_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  linux_get_pc_32bit,\n-  linux_set_pc_32bit,\n   NULL, /* breakpoint_kind_from_pc */\n   cris_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */"
    },
    {
      "sha": "47b2ef9fd316da372b84907b22df9cd2ebf4f3a3",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 32,
      "deletions": 23,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -301,13 +301,22 @@ can_software_single_step (void)\n   return (the_low_target.get_next_pcs != NULL);\n }\n \n-/* True if the low target supports memory breakpoints.  If so, we'll\n-   have a GET_PC implementation.  */\n+bool\n+linux_process_target::low_supports_breakpoints ()\n+{\n+  return false;\n+}\n \n-static int\n-supports_breakpoints (void)\n+CORE_ADDR\n+linux_process_target::low_get_pc (regcache *regcache)\n+{\n+  return 0;\n+}\n+\n+void\n+linux_process_target::low_set_pc (regcache *regcache, CORE_ADDR newpc)\n {\n-  return (the_low_target.get_pc != NULL);\n+  gdb_assert_not_reached (\"linux target op low_set_pc is not implemented\");\n }\n \n /* Returns true if this target can support fast tracepoints.  This\n@@ -728,14 +737,14 @@ linux_process_target::get_pc (lwp_info *lwp)\n   struct regcache *regcache;\n   CORE_ADDR pc;\n \n-  if (the_low_target.get_pc == NULL)\n+  if (!low_supports_breakpoints ())\n     return 0;\n \n   saved_thread = current_thread;\n   current_thread = get_lwp_thread (lwp);\n \n   regcache = get_thread_regcache (current_thread, 1);\n-  pc = (*the_low_target.get_pc) (regcache);\n+  pc = low_get_pc (regcache);\n \n   if (debug_threads)\n     debug_printf (\"pc is 0x%lx\\n\", (long) pc);\n@@ -785,7 +794,7 @@ linux_process_target::save_stop_reason (lwp_info *lwp)\n   siginfo_t siginfo;\n #endif\n \n-  if (the_low_target.get_pc == NULL)\n+  if (!low_supports_breakpoints ())\n     return false;\n \n   pc = get_pc (lwp);\n@@ -868,7 +877,7 @@ linux_process_target::save_stop_reason (lwp_info *lwp)\n \t{\n \t  struct regcache *regcache\n \t    = get_thread_regcache (current_thread, 1);\n-\t  (*the_low_target.set_pc) (regcache, sw_breakpoint_pc);\n+\t  low_set_pc (regcache, sw_breakpoint_pc);\n \t}\n \n       /* Update this so we record the correct stop PC below.  */\n@@ -2092,7 +2101,7 @@ linux_process_target::maybe_move_out_of_jump_pad (lwp_info *lwp, int *wstat)\n \t\t}\n \n \t      regcache = get_thread_regcache (current_thread, 1);\n-\t      (*the_low_target.set_pc) (regcache, status.tpoint_addr);\n+\t      low_set_pc (regcache, status.tpoint_addr);\n \t      lwp->stop_pc = status.tpoint_addr;\n \n \t      /* Cancel any fast tracepoint lock this thread was\n@@ -3170,7 +3179,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n \t    = get_thread_regcache (current_thread, 1);\n \n \t  event_child->stop_pc += increment_pc;\n-\t  (*the_low_target.set_pc) (regcache, event_child->stop_pc);\n+\t  low_set_pc (regcache, event_child->stop_pc);\n \n \t  if (!(*the_low_target.breakpoint_at) (event_child->stop_pc))\n \t    event_child->stop_reason = TARGET_STOPPED_BY_NO_REASON;\n@@ -3183,7 +3192,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n      not support internal breakpoints at all, we also report the\n      SIGTRAP without further processing; it's of no concern to us.  */\n   maybe_internal_trap\n-    = (supports_breakpoints ()\n+    = (low_supports_breakpoints ()\n        && (WSTOPSIG (w) == SIGTRAP\n \t   || ((WSTOPSIG (w) == SIGILL\n \t\t|| WSTOPSIG (w) == SIGSEGV)\n@@ -3478,11 +3487,11 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n \t decr_pc_after_break adjustment to the inferior's regcache\n \t ourselves.  */\n \n-      if (the_low_target.set_pc != NULL)\n+      if (low_supports_breakpoints ())\n \t{\n \t  struct regcache *regcache\n \t    = get_thread_regcache (current_thread, 1);\n-\t  (*the_low_target.set_pc) (regcache, event_child->stop_pc);\n+\t  low_set_pc (regcache, event_child->stop_pc);\n \t}\n \n       if (step_over_finished)\n@@ -3693,7 +3702,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n \t{\n \t  struct regcache *regcache\n \t    = get_thread_regcache (current_thread, 1);\n-\t  (*the_low_target.set_pc) (regcache, event_child->stop_pc + decr_pc);\n+\t  low_set_pc (regcache, event_child->stop_pc + decr_pc);\n \t}\n     }\n \n@@ -4285,11 +4294,11 @@ linux_process_target::resume_one_lwp_throw (lwp_info *lwp, int step,\n       step = single_step (lwp);\n     }\n \n-  if (proc->tdesc != NULL && the_low_target.get_pc != NULL)\n+  if (proc->tdesc != NULL && low_supports_breakpoints ())\n     {\n       struct regcache *regcache = get_thread_regcache (current_thread, 1);\n \n-      lwp->stop_pc = (*the_low_target.get_pc) (regcache);\n+      lwp->stop_pc = low_get_pc (regcache);\n \n       if (debug_threads)\n \t{\n@@ -4915,7 +4924,7 @@ linux_process_target::resume (thread_resume *resume_info, size_t n)\n      other threads stopped, then resume all threads again.  Make sure\n      to queue any signals that would otherwise be delivered or\n      queued.  */\n-  if (!any_pending && supports_breakpoints ())\n+  if (!any_pending && low_supports_breakpoints ())\n     need_step_over = find_thread ([this] (thread_info *thread)\n \t\t       {\n \t\t\t return thread_needs_step_over (thread);\n@@ -5077,7 +5086,7 @@ linux_process_target::proceed_all_lwps ()\n      resume any threads - have it step over the breakpoint with all\n      other threads stopped, then resume all threads again.  */\n \n-  if (supports_breakpoints ())\n+  if (low_supports_breakpoints ())\n     {\n       need_step_over = find_thread ([this] (thread_info *thread)\n \t\t\t {\n@@ -6453,18 +6462,18 @@ linux_process_target::supports_tracepoints ()\n CORE_ADDR\n linux_process_target::read_pc (regcache *regcache)\n {\n-  if (the_low_target.get_pc == NULL)\n+  if (!low_supports_breakpoints ())\n     return 0;\n \n-  return (*the_low_target.get_pc) (regcache);\n+  return low_get_pc (regcache);\n }\n \n void\n linux_process_target::write_pc (regcache *regcache, CORE_ADDR pc)\n {\n-  gdb_assert (the_low_target.set_pc != NULL);\n+  gdb_assert (low_supports_breakpoints ());\n \n-  (*the_low_target.set_pc) (regcache, pc);\n+  low_set_pc (regcache, pc);\n }\n \n bool"
    },
    {
      "sha": "4d2435cd59db32b8191f88f4ec802354bc1d4625",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -131,9 +131,6 @@ struct lwp_info;\n \n struct linux_target_ops\n {\n-  CORE_ADDR (*get_pc) (struct regcache *regcache);\n-  void (*set_pc) (struct regcache *regcache, CORE_ADDR newpc);\n-\n   /* See target.h for details.  */\n   int (*breakpoint_kind_from_pc) (CORE_ADDR *pcptr);\n \n@@ -676,6 +673,14 @@ class linux_process_target : public process_stratum_target\n      REGNO was supplied, false if not, and we should fallback to the\n      standard ptrace methods.  */\n   virtual bool low_fetch_register (regcache *regcache, int regno);\n+\n+  /* Return true if breakpoints are supported.  Such targets must\n+     implement the GET_PC and SET_PC methods.  */\n+  virtual bool low_supports_breakpoints ();\n+\n+  virtual CORE_ADDR low_get_pc (regcache *regcache);\n+\n+  virtual void low_set_pc (regcache *regcache, CORE_ADDR newpc);\n };\n \n extern linux_process_target *the_linux_target;"
    },
    {
      "sha": "090b75d8112f5d9d80dde5c564b211fd554869c9",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 24,
      "deletions": 2,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -38,12 +38,36 @@ class m32r_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n \n static m32r_target the_m32r_target;\n \n+bool\n+m32r_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+m32r_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_32bit (regcache);\n+}\n+\n+void\n+m32r_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n+{\n+  linux_set_pc_32bit (regcache, pc);\n+}\n+\n /* Defined in auto-generated file reg-m32r.c.  */\n void init_registers_m32r (void);\n extern const struct target_desc *tdesc_m32r;\n@@ -134,8 +158,6 @@ m32r_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  linux_get_pc_32bit,\n-  linux_set_pc_32bit,\n   NULL, /* breakpoint_from_pc */\n   m32r_sw_breakpoint_from_kind,\n   NULL,"
    },
    {
      "sha": "07bbae6da6132f4f56a8adb6c8ddb7a62fe051ef",
      "filename": "gdbserver/linux-m68k-low.cc",
      "status": "modified",
      "additions": 24,
      "deletions": 2,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-m68k-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-m68k-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m68k-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -34,12 +34,36 @@ class m68k_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n \n static m68k_target the_m68k_target;\n \n+bool\n+m68k_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+m68k_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_32bit (regcache);\n+}\n+\n+void\n+m68k_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n+{\n+  linux_set_pc_32bit (regcache, pc);\n+}\n+\n /* Defined in auto-generated file reg-m68k.c.  */\n void init_registers_m68k (void);\n extern const struct target_desc *tdesc_m68k;\n@@ -229,8 +253,6 @@ m68k_supports_hardware_single_step (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  linux_get_pc_32bit,\n-  linux_set_pc_32bit,\n   NULL, /* breakpoint_kind_from_pc */\n   m68k_sw_breakpoint_from_kind,\n   NULL,"
    },
    {
      "sha": "22cd3bd33003d231617e58e0bb8dddc7ac491223",
      "filename": "gdbserver/linux-mips-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-mips-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-mips-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-mips-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -42,6 +42,12 @@ class mips_target : public linux_process_target\n   bool low_cannot_store_register (int regno) override;\n \n   bool low_fetch_register (regcache *regcache, int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -279,16 +285,22 @@ mips_target::low_fetch_register (regcache *regcache, int regno)\n   return false;\n }\n \n-static CORE_ADDR\n-mips_get_pc (struct regcache *regcache)\n+bool\n+mips_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+mips_target::low_get_pc (regcache *regcache)\n {\n   union mips_register pc;\n   collect_register_by_name (regcache, \"pc\", pc.buf);\n   return register_size (regcache->tdesc, 0) == 4 ? pc.reg32 : pc.reg64;\n }\n \n-static void\n-mips_set_pc (struct regcache *regcache, CORE_ADDR pc)\n+void\n+mips_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n {\n   union mips_register newpc;\n   if (register_size (regcache->tdesc, 0) == 4)\n@@ -952,8 +964,6 @@ mips_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  mips_get_pc,\n-  mips_set_pc,\n   NULL, /* breakpoint_kind_from_pc */\n   mips_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */"
    },
    {
      "sha": "c1372dd6d3cb0dce17dd92f1cd7b0d20cae17a1d",
      "filename": "gdbserver/linux-nios2-low.cc",
      "status": "modified",
      "additions": 24,
      "deletions": 2,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-nios2-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-nios2-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-nios2-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -46,12 +46,36 @@ class nios2_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n \n static nios2_target the_nios2_target;\n \n+bool\n+nios2_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+nios2_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_32bit (regcache);\n+}\n+\n+void\n+nios2_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n+{\n+  linux_set_pc_32bit (regcache, pc);\n+}\n+\n /* The following definition must agree with the number of registers\n    defined in \"struct user_regs\" in GLIBC\n    (sysdeps/unix/sysv/linux/nios2/sys/user.h), and also with\n@@ -251,8 +275,6 @@ nios2_target::get_regs_info ()\n \n struct linux_target_ops the_low_target =\n {\n-  linux_get_pc_32bit,\n-  linux_set_pc_32bit,\n   NULL, /* breakpoint_kind_from_pc */\n   nios2_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */"
    },
    {
      "sha": "4aa7f5159b5a993fd697d9ccfd8035cdfb54fd15",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -59,6 +59,12 @@ class ppc_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -241,8 +247,14 @@ ppc_supply_ptrace_register (struct regcache *regcache,\n     perror_with_name (\"Unexpected byte order\");\n }\n \n-static CORE_ADDR\n-ppc_get_pc (struct regcache *regcache)\n+bool\n+ppc_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+ppc_target::low_get_pc (regcache *regcache)\n {\n   if (register_size (regcache->tdesc, 0) == 4)\n     {\n@@ -258,8 +270,8 @@ ppc_get_pc (struct regcache *regcache)\n     }\n }\n \n-static void\n-ppc_set_pc (struct regcache *regcache, CORE_ADDR pc)\n+void\n+ppc_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n {\n   if (register_size (regcache->tdesc, 0) == 4)\n     {\n@@ -3392,8 +3404,6 @@ ppc_get_ipa_tdesc_idx (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  ppc_get_pc,\n-  ppc_set_pc,\n   NULL, /* breakpoint_kind_from_pc */\n   ppc_sw_breakpoint_from_kind,\n   NULL,"
    },
    {
      "sha": "4fb2308a4528968cdee868044d464fa2b9639504",
      "filename": "gdbserver/linux-riscv-low.cc",
      "status": "modified",
      "additions": 18,
      "deletions": 8,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-riscv-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-riscv-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-riscv-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -47,6 +47,12 @@ class riscv_target : public linux_process_target\n   bool low_cannot_store_register (int regno) override;\n \n   bool low_fetch_register (regcache *regcache, int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -203,10 +209,16 @@ riscv_target::low_fetch_register (regcache *regcache, int regno)\n   return true;\n }\n \n-/* Implementation of linux_target_ops method \"get_pc\".  */\n+bool\n+riscv_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+/* Implementation of linux target ops method \"low_get_pc\".  */\n \n-static CORE_ADDR\n-riscv_get_pc (struct regcache *regcache)\n+CORE_ADDR\n+riscv_target::low_get_pc (regcache *regcache)\n {\n   elf_gregset_t regset;\n \n@@ -216,10 +228,10 @@ riscv_get_pc (struct regcache *regcache)\n     return linux_get_pc_32bit (regcache);\n }\n \n-/* Implementation of linux_target_ops method \"set_pc\".  */\n+/* Implementation of linux target ops method \"low_set_pc\".  */\n \n-static void\n-riscv_set_pc (struct regcache *regcache, CORE_ADDR newpc)\n+void\n+riscv_target::low_set_pc (regcache *regcache, CORE_ADDR newpc)\n {\n   elf_gregset_t regset;\n \n@@ -293,8 +305,6 @@ riscv_breakpoint_at (CORE_ADDR pc)\n /* RISC-V/Linux target operations.  */\n struct linux_target_ops the_low_target =\n {\n-  riscv_get_pc,\n-  riscv_set_pc,\n   riscv_breakpoint_kind_from_pc,\n   riscv_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */"
    },
    {
      "sha": "ef5e8227d50b409cb29ed1968c5f9186014652ff",
      "filename": "gdbserver/linux-s390-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-s390-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-s390-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-s390-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -66,6 +66,12 @@ class s390_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -454,8 +460,14 @@ s390_sw_breakpoint_from_kind (int kind, int *size)\n   return s390_breakpoint;\n }\n \n-static CORE_ADDR\n-s390_get_pc (struct regcache *regcache)\n+bool\n+s390_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+s390_target::low_get_pc (regcache *regcache)\n {\n   if (register_size (regcache->tdesc, 0) == 4)\n     {\n@@ -471,8 +483,8 @@ s390_get_pc (struct regcache *regcache)\n     }\n }\n \n-static void\n-s390_set_pc (struct regcache *regcache, CORE_ADDR newpc)\n+void\n+s390_target::low_set_pc (regcache *regcache, CORE_ADDR newpc)\n {\n   if (register_size (regcache->tdesc, 0) == 4)\n     {\n@@ -2812,8 +2824,6 @@ s390_emit_ops (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  s390_get_pc,\n-  s390_set_pc,\n   NULL, /* breakpoint_kind_from_pc */\n   s390_sw_breakpoint_from_kind,\n   NULL,"
    },
    {
      "sha": "4e5142571858ffa6f9fa0442a916ee9ad32004d7",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 24,
      "deletions": 2,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -34,12 +34,36 @@ class sh_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n \n static sh_target the_sh_target;\n \n+bool\n+sh_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+sh_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_32bit (regcache);\n+}\n+\n+void\n+sh_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n+{\n+  linux_set_pc_32bit (regcache, pc);\n+}\n+\n /* Defined in auto-generated file reg-sh.c.  */\n void init_registers_sh (void);\n extern const struct target_desc *tdesc_sh;\n@@ -164,8 +188,6 @@ sh_target::low_arch_setup ()\n }\n \n struct linux_target_ops the_low_target = {\n-  linux_get_pc_32bit,\n-  linux_set_pc_32bit,\n   NULL, /* breakpoint_kind_from_pc */\n   sh_sw_breakpoint_from_kind,\n   NULL,"
    },
    {
      "sha": "b415deeaa6a7c5fc932560cf5a74b5875d72ac75",
      "filename": "gdbserver/linux-sparc-low.cc",
      "status": "modified",
      "additions": 18,
      "deletions": 3,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-sparc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-sparc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sparc-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -57,12 +57,30 @@ class sparc_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  /* No low_set_pc is needed.  */\n };\n \n /* The singleton target ops object.  */\n \n static sparc_target the_sparc_target;\n \n+bool\n+sparc_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+sparc_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_64bit (regcache);\n+}\n+\n /* Each offset is multiplied by 8, because of the register size.\n    These offsets apply to the buffer sent/filled by ptrace.\n    Additionally, the array elements order corresponds to the .dat file, and the\n@@ -319,9 +337,6 @@ sparc_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  linux_get_pc_64bit,\n-  /* No sparc_set_pc is needed.  */\n-  NULL,\n   NULL, /* breakpoint_kind_from_pc */\n   sparc_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */"
    },
    {
      "sha": "790b4e44baf98e59bbb8e73a24783cdf96ea05c0",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -53,6 +53,12 @@ class tic6x_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -239,17 +245,23 @@ tic6x_target::low_cannot_store_register (int regno)\n   return (tic6x_regmap[regno] == -1);\n }\n \n-static CORE_ADDR\n-tic6x_get_pc (struct regcache *regcache)\n+bool\n+tic6x_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+tic6x_target::low_get_pc (regcache *regcache)\n {\n   union tic6x_register pc;\n \n   collect_register_by_name (regcache, \"PC\", pc.buf);\n   return pc.reg32;\n }\n \n-static void\n-tic6x_set_pc (struct regcache *regcache, CORE_ADDR pc)\n+void\n+tic6x_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n {\n   union tic6x_register newpc;\n \n@@ -407,8 +419,6 @@ tic6x_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  tic6x_get_pc,\n-  tic6x_set_pc,\n   NULL, /* breakpoint_kind_from_pc */\n   tic6x_sw_breakpoint_from_kind,\n   NULL,"
    },
    {
      "sha": "9756c6c3fb913a7488775b80719f3a02be687840",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 24,
      "deletions": 2,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -38,12 +38,36 @@ class tile_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n \n static tile_target the_tile_target;\n \n+bool\n+tile_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+tile_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_64bit (regcache);\n+}\n+\n+void\n+tile_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n+{\n+  linux_set_pc_64bit (regcache, pc);\n+}\n+\n /* Defined in auto-generated file reg-tilegx.c.  */\n void init_registers_tilegx (void);\n extern const struct target_desc *tdesc_tilegx;\n@@ -196,8 +220,6 @@ tile_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  linux_get_pc_64bit,\n-  linux_set_pc_64bit,\n   NULL, /* breakpoint_kind_from_pc */\n   tile_sw_breakpoint_from_kind,\n   NULL,"
    },
    {
      "sha": "9aa29f8152222999b7a143d7b2feff5ebaef76c3",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -113,6 +113,12 @@ class x86_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -494,8 +500,14 @@ static struct regset_info x86_regsets[] =\n   NULL_REGSET\n };\n \n-static CORE_ADDR\n-x86_get_pc (struct regcache *regcache)\n+bool\n+x86_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+x86_target::low_get_pc (regcache *regcache)\n {\n   int use_64bit = register_size (regcache->tdesc, 0) == 8;\n \n@@ -515,8 +527,8 @@ x86_get_pc (struct regcache *regcache)\n     }\n }\n \n-static void\n-x86_set_pc (struct regcache *regcache, CORE_ADDR pc)\n+void\n+x86_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n {\n   int use_64bit = register_size (regcache->tdesc, 0) == 8;\n \n@@ -2885,8 +2897,6 @@ x86_get_ipa_tdesc_idx (void)\n \n struct linux_target_ops the_low_target =\n {\n-  x86_get_pc,\n-  x86_set_pc,\n   NULL, /* breakpoint_kind_from_pc */\n   x86_sw_breakpoint_from_kind,\n   NULL,"
    },
    {
      "sha": "fb680bdb965a6d24ad01278b4b4f792d8ee58169",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 24,
      "deletions": 2,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=bf9ae9d8c37a4e1dfd192f266c20ea5786fd1bbd",
      "patch": "@@ -35,6 +35,12 @@ class xtensa_target : public linux_process_target\n   bool low_cannot_fetch_register (int regno) override;\n \n   bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n };\n \n /* The singleton target ops object.  */\n@@ -55,6 +61,24 @@ xtensa_target::low_cannot_store_register (int regno)\n \t\t\t  \"is not implemented by the target\");\n }\n \n+bool\n+xtensa_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+xtensa_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_32bit (regcache);\n+}\n+\n+void\n+xtensa_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n+{\n+  linux_set_pc_32bit (regcache, pc);\n+}\n+\n /* Defined in auto-generated file reg-xtensa.c.  */\n void init_registers_xtensa (void);\n extern const struct target_desc *tdesc_xtensa;\n@@ -302,8 +326,6 @@ xtensa_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  linux_get_pc_32bit,\n-  linux_set_pc_32bit,\n   NULL, /* breakpoint_kind_from_pc */\n   xtensa_sw_breakpoint_from_kind,\n   NULL,"
    }
  ]
}