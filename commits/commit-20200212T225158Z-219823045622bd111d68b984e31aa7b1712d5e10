{
  "sha": "219823045622bd111d68b984e31aa7b1712d5e10",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjE5ODIzMDQ1NjIyYmQxMTFkNjhiOTg0ZTMxYWE3YjE3MTJkNWUxMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-12T22:45:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-12T22:51:58Z"
    },
    "message": "Remove the objfile backlink from comp_unit\n\nThis removes the objfile backlink from comp_unit.  The only remaining\nuses involved fetching the text offset from the objfile.  However,\nthis is already conveniently computed at all the sites that call\nexecute_cfa_program, and so it can simply be passed in.\n\ngdb/ChangeLog\n2020-02-12  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/frame.c (struct comp_unit) <objfile>: Remove.\n\t(comp_unit): Don't initialize objfile.\n\t(execute_cfa_program): Add text_offset parameter.\n\t(execute_cfa_program_test, dwarf2_fetch_cfa_info)\n\t(dwarf2_frame_cache): Update.\n\t(dwarf2_build_frame_info): Don't set \"objfile\" member.",
    "tree": {
      "sha": "01cd34467452ab222ff4d980109de326c0ec8f1e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/01cd34467452ab222ff4d980109de326c0ec8f1e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/219823045622bd111d68b984e31aa7b1712d5e10",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/219823045622bd111d68b984e31aa7b1712d5e10",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/219823045622bd111d68b984e31aa7b1712d5e10",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/219823045622bd111d68b984e31aa7b1712d5e10/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4debb2379696829391bfb519ed9a5f415d6e190a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4debb2379696829391bfb519ed9a5f415d6e190a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4debb2379696829391bfb519ed9a5f415d6e190a"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 23,
    "deletions": 13
  },
  "files": [
    {
      "sha": "27166b44f672c58369240f1c2594e83f74bb3ad9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/219823045622bd111d68b984e31aa7b1712d5e10/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/219823045622bd111d68b984e31aa7b1712d5e10/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=219823045622bd111d68b984e31aa7b1712d5e10",
      "patch": "@@ -1,3 +1,12 @@\n+2020-02-12  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/frame.c (struct comp_unit) <objfile>: Remove.\n+\t(comp_unit): Don't initialize objfile.\n+\t(execute_cfa_program): Add text_offset parameter.\n+\t(execute_cfa_program_test, dwarf2_fetch_cfa_info)\n+\t(dwarf2_frame_cache): Update.\n+\t(dwarf2_build_frame_info): Don't set \"objfile\" member.\n+\n 2020-02-12  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/frame.c (decode_frame_entry_1): Add gdbarch parameter."
    },
    {
      "sha": "ff33f4df756ef3e4e49b2095d948a742467c4fa5",
      "filename": "gdb/dwarf2/frame.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/219823045622bd111d68b984e31aa7b1712d5e10/gdb/dwarf2/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/219823045622bd111d68b984e31aa7b1712d5e10/gdb/dwarf2/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame.c?ref=219823045622bd111d68b984e31aa7b1712d5e10",
      "patch": "@@ -137,16 +137,13 @@ typedef std::vector<dwarf2_fde *> dwarf2_fde_table;\n struct comp_unit\n {\n   comp_unit (struct objfile *objf)\n-    : abfd (objf->obfd),\n-      objfile (objf)\n+    : abfd (objf->obfd)\n   {\n   }\n \n   /* Keep the bfd convenient.  */\n   bfd *abfd;\n \n-  struct objfile *objfile;\n-\n   /* Pointer to the .debug_frame section loaded into memory.  */\n   const gdb_byte *dwarf_frame_buffer = nullptr;\n \n@@ -355,7 +352,8 @@ Not implemented: computing unwound register using explicit value operator\"));\n static const gdb_byte *\n execute_cfa_program (struct dwarf2_fde *fde, const gdb_byte *insn_ptr,\n \t\t     const gdb_byte *insn_end, struct gdbarch *gdbarch,\n-\t\t     CORE_ADDR pc, struct dwarf2_frame_state *fs)\n+\t\t     CORE_ADDR pc, struct dwarf2_frame_state *fs,\n+\t\t     CORE_ADDR text_offset)\n {\n   int eh_frame_p = fde->eh_frame_p;\n   unsigned int bytes_read;\n@@ -392,8 +390,8 @@ execute_cfa_program (struct dwarf2_fde *fde, const gdb_byte *insn_ptr,\n \t      fs->pc = read_encoded_value (fde->cie->unit, fde->cie->encoding,\n \t\t\t\t\t   fde->cie->ptr_size, insn_ptr,\n \t\t\t\t\t   &bytes_read, fde->initial_location);\n-\t      /* Apply the objfile offset for relocatable objects.  */\n-\t      fs->pc += fde->cie->unit->objfile->text_section_offset ();\n+\t      /* Apply the text offset for relocatable objects.  */\n+\t      fs->pc += text_offset;\n \t      insn_ptr += bytes_read;\n \t      break;\n \n@@ -652,7 +650,7 @@ execute_cfa_program_test (struct gdbarch *gdbarch)\n \n   const gdb_byte *insn_end = insns + sizeof (insns);\n   const gdb_byte *out = execute_cfa_program (&fde, insns, insn_end, gdbarch,\n-\t\t\t\t\t     0, &fs);\n+\t\t\t\t\t     0, &fs, 0);\n \n   SELF_CHECK (out == insn_end);\n   SELF_CHECK (fs.pc == 0);\n@@ -900,13 +898,14 @@ dwarf2_fetch_cfa_info (struct gdbarch *gdbarch, CORE_ADDR pc,\n \n   /* First decode all the insns in the CIE.  */\n   execute_cfa_program (fde, fde->cie->initial_instructions,\n-\t\t       fde->cie->end, gdbarch, pc, &fs);\n+\t\t       fde->cie->end, gdbarch, pc, &fs, text_offset);\n \n   /* Save the initialized register set.  */\n   fs.initial = fs.regs;\n \n   /* Then decode the insns in the FDE up to our target PC.  */\n-  execute_cfa_program (fde, fde->instructions, fde->end, gdbarch, pc, &fs);\n+  execute_cfa_program (fde, fde->instructions, fde->end, gdbarch, pc, &fs,\n+\t\t       text_offset);\n \n   /* Calculate the CFA.  */\n   switch (fs.regs.cfa_how)\n@@ -1028,7 +1027,8 @@ dwarf2_frame_cache (struct frame_info *this_frame, void **this_cache)\n   /* First decode all the insns in the CIE.  */\n   execute_cfa_program (fde, fde->cie->initial_instructions,\n \t\t       fde->cie->end, gdbarch,\n-\t\t       get_frame_address_in_block (this_frame), &fs);\n+\t\t       get_frame_address_in_block (this_frame), &fs,\n+\t\t       cache->text_offset);\n \n   /* Save the initialized register set.  */\n   fs.initial = fs.regs;\n@@ -1043,7 +1043,7 @@ dwarf2_frame_cache (struct frame_info *this_frame, void **this_cache)\n     {\n       /* Decode the insns in the FDE up to the entry PC.  */\n       instr = execute_cfa_program (fde, fde->instructions, fde->end, gdbarch,\n-\t\t\t\t   entry_pc, &fs);\n+\t\t\t\t   entry_pc, &fs, cache->text_offset);\n \n       if (fs.regs.cfa_how == CFA_REG_OFFSET\n \t  && (dwarf_reg_to_regnum (gdbarch, fs.regs.cfa_reg)\n@@ -1058,7 +1058,8 @@ dwarf2_frame_cache (struct frame_info *this_frame, void **this_cache)\n \n   /* Then decode the insns in the FDE up to our target PC.  */\n   execute_cfa_program (fde, instr, fde->end, gdbarch,\n-\t\t       get_frame_address_in_block (this_frame), &fs);\n+\t\t       get_frame_address_in_block (this_frame), &fs,\n+\t\t       cache->text_offset);\n \n   try\n     {"
    }
  ]
}