{
  "sha": "4933265c3f71b9134363d0c05f09542d5cc677f4",
  "node_id": "C_kwDOANOeidoAKDQ5MzMyNjVjM2Y3MWI5MTM0MzYzZDBjMDVmMDk1NDJkNWNjNjc3ZjQ",
  "commit": {
    "author": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2020-08-15T21:04:05Z"
    },
    "committer": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2021-10-28T20:22:12Z"
    },
    "message": "gdb: or1k: implement gdb server\n\nThis patch adds gdbserver support for OpenRISC.  This has been used for\ndebugging the glibc port that in being worked on here:\n\n  https://github.com/openrisc/or1k-glibc/tree/or1k-port-2\n\nHence the comment about registers definitions being inline with glibc.",
    "tree": {
      "sha": "b291e70e95620bba525afe2b607a6975772dc9cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b291e70e95620bba525afe2b607a6975772dc9cc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4933265c3f71b9134363d0c05f09542d5cc677f4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4933265c3f71b9134363d0c05f09542d5cc677f4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4933265c3f71b9134363d0c05f09542d5cc677f4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4933265c3f71b9134363d0c05f09542d5cc677f4/comments",
  "author": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cf365c10d0786a4fd2423d451596b879ee44627a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf365c10d0786a4fd2423d451596b879ee44627a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cf365c10d0786a4fd2423d451596b879ee44627a"
    }
  ],
  "stats": {
    "total": 329,
    "additions": 329,
    "deletions": 0
  },
  "files": [
    {
      "sha": "311176aba2874602220a59554b352333ac651448",
      "filename": "gdb/features/Makefile",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4933265c3f71b9134363d0c05f09542d5cc677f4/gdb/features/Makefile",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4933265c3f71b9134363d0c05f09542d5cc677f4/gdb/features/Makefile",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/Makefile?ref=4933265c3f71b9134363d0c05f09542d5cc677f4",
      "patch": "@@ -47,6 +47,7 @@\n WHICH = mips-linux mips-dsp-linux \\\n \tmips64-linux mips64-dsp-linux \\\n \tnios2-linux \\\n+\tor1k-linux \\\n \trs6000/powerpc-32 \\\n \trs6000/powerpc-32l rs6000/powerpc-altivec32l rs6000/powerpc-e500l \\\n \trs6000/powerpc-64l rs6000/powerpc-altivec64l rs6000/powerpc-vsx32l \\"
    },
    {
      "sha": "598538d124f4452462577c3cc2ea968816611474",
      "filename": "gdb/features/or1k-linux.xml",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4933265c3f71b9134363d0c05f09542d5cc677f4/gdb/features/or1k-linux.xml",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4933265c3f71b9134363d0c05f09542d5cc677f4/gdb/features/or1k-linux.xml",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/or1k-linux.xml?ref=4933265c3f71b9134363d0c05f09542d5cc677f4",
      "patch": "@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\"?>\n+<!-- Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+     Copying and distribution of this file, with or without modification,\n+     are permitted in any medium without royalty provided the copyright\n+     notice and this notice are preserved.  -->\n+\n+<!DOCTYPE target SYSTEM \"gdb-target.dtd\">\n+<target>\n+  <architecture>or1k</architecture>\n+  <osabi>GNU/Linux</osabi>\n+  <xi:include href=\"or1k-core.xml\"/>\n+</target>"
    },
    {
      "sha": "7b64646fc65ae493ebd7dfce0b203e9225acbdd9",
      "filename": "gdb/regformats/or1k-linux.dat",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4933265c3f71b9134363d0c05f09542d5cc677f4/gdb/regformats/or1k-linux.dat",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4933265c3f71b9134363d0c05f09542d5cc677f4/gdb/regformats/or1k-linux.dat",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regformats/or1k-linux.dat?ref=4933265c3f71b9134363d0c05f09542d5cc677f4",
      "patch": "@@ -0,0 +1,40 @@\n+# THIS FILE IS GENERATED.  -*- buffer-read-only: t -*- vi :set ro:\n+# Generated from: or1k-linux.xml\n+name:or1k_linux\n+xmltarget:or1k-linux.xml\n+expedite:r1,npc\n+32:r0\n+32:r1\n+32:r2\n+32:r3\n+32:r4\n+32:r5\n+32:r6\n+32:r7\n+32:r8\n+32:r9\n+32:r10\n+32:r11\n+32:r12\n+32:r13\n+32:r14\n+32:r15\n+32:r16\n+32:r17\n+32:r18\n+32:r19\n+32:r20\n+32:r21\n+32:r22\n+32:r23\n+32:r24\n+32:r25\n+32:r26\n+32:r27\n+32:r28\n+32:r29\n+32:r30\n+32:r31\n+32:ppc\n+32:npc\n+32:sr"
    },
    {
      "sha": "71c3c4ad95915e158676e03034295a96e391f7c5",
      "filename": "gdbserver/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4933265c3f71b9134363d0c05f09542d5cc677f4/gdbserver/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4933265c3f71b9134363d0c05f09542d5cc677f4/gdbserver/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/Makefile.in?ref=4933265c3f71b9134363d0c05f09542d5cc677f4",
      "patch": "@@ -180,6 +180,7 @@ SFILES = \\\n \t$(srcdir)/linux-m68k-low.cc \\\n \t$(srcdir)/linux-mips-low.cc \\\n \t$(srcdir)/linux-nios2-low.cc \\\n+\t$(srcdir)/linux-or1k-low.cc \\\n \t$(srcdir)/linux-ppc-low.cc \\\n \t$(srcdir)/linux-riscv-low.cc \\\n \t$(srcdir)/linux-s390-low.cc \\"
    },
    {
      "sha": "6e09b0eeb79bf44f415f06fee18d4a3da2c775d0",
      "filename": "gdbserver/configure.srv",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4933265c3f71b9134363d0c05f09542d5cc677f4/gdbserver/configure.srv",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4933265c3f71b9134363d0c05f09542d5cc677f4/gdbserver/configure.srv",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/configure.srv?ref=4933265c3f71b9134363d0c05f09542d5cc677f4",
      "patch": "@@ -175,6 +175,14 @@ case \"${gdbserver_host}\" in\n \t\t\tsrv_linux_usrregs=yes\n \t\t\tsrv_linux_thread_db=yes\n \t\t\t;;\n+  or1k*-*-linux*)\tsrv_regobj=\"or1k-linux.o\"\n+\t\t\tsrv_tgtobj=\"$srv_linux_obj linux-or1k-low.o\"\n+\t\t\tsrv_xmlfiles=\"or1k-linux.xml\"\n+\t\t\tsrv_xmlfiles=\"${srv_xmlfiles} or1k-core.xml\"\n+\t\t\tsrv_linux_regsets=yes\n+\t\t\tsrv_linux_usrregs=yes\n+\t\t\tsrv_linux_thread_db=yes\n+\t\t\t;;\n   powerpc*-*-linux*)\tsrv_regobj=\"powerpc-32l.o\"\n \t\t\tsrv_regobj=\"${srv_regobj} powerpc-altivec32l.o\"\n \t\t\tsrv_regobj=\"${srv_regobj} powerpc-vsx32l.o\""
    },
    {
      "sha": "46d03f2651a7a289b34985a621f5107308805762",
      "filename": "gdbserver/linux-or1k-low.cc",
      "status": "added",
      "additions": 266,
      "deletions": 0,
      "changes": 266,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4933265c3f71b9134363d0c05f09542d5cc677f4/gdbserver/linux-or1k-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4933265c3f71b9134363d0c05f09542d5cc677f4/gdbserver/linux-or1k-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-or1k-low.cc?ref=4933265c3f71b9134363d0c05f09542d5cc677f4",
      "patch": "@@ -0,0 +1,266 @@\n+/* GNU/Linux/OR1K specific low level interface for the GDB server.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"server.h\"\n+#include \"linux-low.h\"\n+#include \"elf/common.h\"\n+#include \"nat/gdb_ptrace.h\"\n+#include <endian.h>\n+#include \"gdb_proc_service.h\"\n+#include <asm/ptrace.h>\n+\n+#ifndef PTRACE_GET_THREAD_AREA\n+#define PTRACE_GET_THREAD_AREA 25\n+#endif\n+\n+/* Linux target op definitions for the OpenRISC architecture.  */\n+\n+class or1k_target : public linux_process_target\n+{\n+public:\n+\n+  const regs_info *get_regs_info () override;\n+\n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n+protected:\n+\n+  void low_arch_setup () override;\n+\n+  bool low_cannot_fetch_register (int regno) override;\n+\n+  bool low_cannot_store_register (int regno) override;\n+\n+  bool low_supports_breakpoints () override;\n+\n+  CORE_ADDR low_get_pc (regcache *regcache) override;\n+\n+  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n+\n+  bool low_breakpoint_at (CORE_ADDR pc) override;\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static or1k_target the_or1k_target;\n+\n+bool\n+or1k_target::low_supports_breakpoints ()\n+{\n+  return true;\n+}\n+\n+CORE_ADDR\n+or1k_target::low_get_pc (regcache *regcache)\n+{\n+  return linux_get_pc_32bit (regcache);\n+}\n+\n+void\n+or1k_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n+{\n+  linux_set_pc_32bit (regcache, pc);\n+}\n+\n+/* The following definition must agree with the number of registers\n+   defined in \"struct user_regs\" in GLIBC\n+   (sysdeps/unix/sysv/linux/or1k/sys/ucontext.h), and also with\n+   OR1K_NUM_REGS in GDB proper.  */\n+\n+#define or1k_num_regs 35\n+\n+/* Defined in auto-generated file or1k-linux.c.  */\n+\n+void init_registers_or1k_linux (void);\n+extern const struct target_desc *tdesc_or1k_linux;\n+\n+/* This union is used to convert between int and byte buffer\n+   representations of register contents.  */\n+\n+union or1k_register\n+{\n+  unsigned char buf[4];\n+  int reg32;\n+};\n+\n+/* Return the ptrace ``address'' of register REGNO. */\n+\n+static int or1k_regmap[] = {\n+  -1,  1,  2,  3,  4,  5,  6,  7,\n+  8,  9,  10, 11, 12, 13, 14, 15,\n+  16, 17, 18, 19, 20, 21, 22, 23,\n+  24, 25, 26, 27, 28, 29, 30, 31,\n+  -1, /* PC */\n+  -1, /* ORIGINAL R11 */\n+  -1  /* SYSCALL NO */\n+};\n+\n+/* Implement the low_arch_setup linux target ops method.  */\n+\n+void\n+or1k_target::low_arch_setup ()\n+{\n+  current_process ()->tdesc = tdesc_or1k_linux;\n+}\n+\n+/* Implement the low_cannot_fetch_register linux target ops method.  */\n+\n+bool\n+or1k_target::low_cannot_fetch_register (int regno)\n+{\n+  return (or1k_regmap[regno] == -1);\n+}\n+\n+/* Implement the low_cannot_store_register linux target ops method.  */\n+\n+bool\n+or1k_target::low_cannot_store_register (int regno)\n+{\n+  return (or1k_regmap[regno] == -1);\n+}\n+\n+/* Breakpoint support.  */\n+\n+static const unsigned int or1k_breakpoint = 0x21000001;\n+#define or1k_breakpoint_len 4\n+\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n+\n+const gdb_byte *\n+or1k_target::sw_breakpoint_from_kind (int kind, int *size)\n+{\n+  *size = or1k_breakpoint_len;\n+  return (const gdb_byte *) &or1k_breakpoint;\n+}\n+\n+/* Implement the low_breakpoint_at linux target ops method.  */\n+\n+bool\n+or1k_target::low_breakpoint_at (CORE_ADDR where)\n+{\n+  unsigned int insn;\n+\n+  read_memory (where, (unsigned char *) &insn, or1k_breakpoint_len);\n+  if (insn == or1k_breakpoint)\n+    return true;\n+  return false;\n+}\n+\n+/* Fetch the thread-local storage pointer for libthread_db.  */\n+\n+ps_err_e\n+ps_get_thread_area (struct ps_prochandle *ph,\n+\t\t    lwpid_t lwpid, int idx, void **base)\n+{\n+  if (ptrace (PTRACE_GET_THREAD_AREA, lwpid, NULL, base) != 0)\n+    return PS_ERR;\n+\n+  /* IDX is the bias from the thread pointer to the beginning of the\n+     thread descriptor.  It has to be subtracted due to implementation\n+     quirks in libthread_db.  */\n+  *base = (void *) ((char *) *base - idx);\n+\n+  return PS_OK;\n+}\n+\n+/* Helper functions to collect/supply a single register REGNO.  */\n+\n+static void\n+or1k_collect_register (struct regcache *regcache, int regno,\n+\t\t\tunion or1k_register *reg)\n+{\n+  union or1k_register tmp_reg;\n+\n+  collect_register (regcache, regno, &tmp_reg.reg32);\n+  reg->reg32 = tmp_reg.reg32;\n+}\n+\n+static void\n+or1k_supply_register (struct regcache *regcache, int regno,\n+\t\t       const union or1k_register *reg)\n+{\n+  supply_register (regcache, regno, reg->buf);\n+}\n+\n+/* We have only a single register set on OpenRISC.  */\n+\n+static void\n+or1k_fill_gregset (struct regcache *regcache, void *buf)\n+{\n+  union or1k_register *regset = (union or1k_register *) buf;\n+  int i;\n+\n+  for (i = 1; i < or1k_num_regs; i++)\n+    or1k_collect_register (regcache, i, regset + i);\n+}\n+\n+static void\n+or1k_store_gregset (struct regcache *regcache, const void *buf)\n+{\n+  const union or1k_register *regset = (union or1k_register *) buf;\n+  int i;\n+\n+  for (i = 0; i < or1k_num_regs; i++)\n+    or1k_supply_register (regcache, i, regset + i);\n+}\n+\n+static struct regset_info or1k_regsets[] =\n+{\n+  { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_PRSTATUS,\n+    or1k_num_regs * 4, GENERAL_REGS,\n+    or1k_fill_gregset, or1k_store_gregset },\n+  NULL_REGSET\n+};\n+\n+static struct regsets_info or1k_regsets_info =\n+  {\n+    or1k_regsets, /* regsets */\n+    0, /* num_regsets */\n+    NULL, /* disabled_regsets */\n+  };\n+\n+static struct usrregs_info or1k_usrregs_info =\n+  {\n+    or1k_num_regs,\n+    or1k_regmap,\n+  };\n+\n+static struct regs_info or1k_regs =\n+  {\n+    NULL, /* regset_bitmap */\n+    &or1k_usrregs_info,\n+    &or1k_regsets_info\n+  };\n+\n+const regs_info *\n+or1k_target::get_regs_info ()\n+{\n+  return &or1k_regs;\n+}\n+\n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_or1k_target;\n+\n+void\n+initialize_low_arch (void)\n+{\n+  init_registers_or1k_linux ();\n+\n+  initialize_regsets_info (&or1k_regsets_info);\n+}"
    }
  ]
}