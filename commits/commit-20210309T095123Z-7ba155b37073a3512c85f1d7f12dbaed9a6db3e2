{
  "sha": "7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2JhMTU1YjM3MDczYTM1MTJjODVmMWQ3ZjEyZGJhZWQ5YTZkYjNlMg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-25T16:15:52Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-09T09:51:23Z"
    },
    "message": "gdb/fortran: add support for 'SIZE' keyword\n\nAdd support for the 'SIZE' keyword to the Fortran expression parser.\nThis returns the number of elements either in an entire array (passing\na single argument to SIZE), or in a particular dimension of an\narray (passing two arguments to SIZE).\n\nAt this point I have not added support for the optional third argument\nto SIZE, which controls the exact integer type of the result.\n\ngdb/ChangeLog:\n\n\t* f-exp.y (eval_op_f_array_size): Declare 1 and 2 argument forms\n\tof this function.\n\t(expr::fortran_array_size_1arg): New type.\n\t(expr::fortran_array_size_2arg): Likewise.\n\t* f-exp.y (exp): Handle FORTRAN_ARRAY_SIZE after parsing\n\tUNOP_OR_BINOP_INTRINSIC.\n\t(f77_keywords): Add \"size\" keyword.\n\t* f-lang.c (fortran_array_size): New function.\n\t(eval_op_f_array_size): New function, has a 1 arg and 2 arg form.\n\t* std-operator.def (FORTRAN_ARRAY_SIZE): New operator.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/size.exp: New file.\n\t* gdb.fortran/size.f90: New file.",
    "tree": {
      "sha": "41e98c0082c4cae7c641a83851708fef750eec8e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/41e98c0082c4cae7c641a83851708fef750eec8e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e14816a8ba5ecf8d7c0125a08afe87fb7d1a6bba"
    }
  ],
  "stats": {
    "total": 359,
    "additions": 359,
    "deletions": 0
  },
  "files": [
    {
      "sha": "0a163539a74377abf0eec5b00e4cfe7fd52f5054",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
      "patch": "@@ -1,3 +1,16 @@\n+2021-03-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* f-exp.y (eval_op_f_array_size): Declare 1 and 2 argument forms\n+\tof this function.\n+\t(expr::fortran_array_size_1arg): New type.\n+\t(expr::fortran_array_size_2arg): Likewise.\n+\t* f-exp.y (exp): Handle FORTRAN_ARRAY_SIZE after parsing\n+\tUNOP_OR_BINOP_INTRINSIC.\n+\t(f77_keywords): Add \"size\" keyword.\n+\t* f-lang.c (fortran_array_size): New function.\n+\t(eval_op_f_array_size): New function, has a 1 arg and 2 arg form.\n+\t* std-operator.def (FORTRAN_ARRAY_SIZE): New operator.\n+\n 2021-03-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* f-exp.h (eval_op_f_rank): Declare."
    },
    {
      "sha": "fc46c123c6a16cb73b7244c026c3427701ee4d77",
      "filename": "gdb/f-exp.h",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/f-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/f-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.h?ref=7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
      "patch": "@@ -85,6 +85,30 @@ extern struct value *eval_op_f_rank (struct type *expect_type,\n \t\t\t\t     enum exp_opcode op,\n \t\t\t\t     struct value *arg1);\n \n+/* Implement expression evaluation for Fortran's SIZE keyword. For\n+   EXPECT_TYPE, EXP, and NOSIDE see expression::evaluate (in\n+   expression.h).  OP will always for FORTRAN_ARRAY_SIZE.  ARG1 is the\n+   value passed to SIZE if it is only passed a single argument.  For the\n+   two argument form see the overload of this function below.  */\n+\n+extern struct value *eval_op_f_array_size (struct type *expect_type,\n+\t\t\t\t\t   struct expression *exp,\n+\t\t\t\t\t   enum noside noside,\n+\t\t\t\t\t   enum exp_opcode opcode,\n+\t\t\t\t\t   struct value *arg1);\n+\n+/* An overload of EVAL_OP_F_ARRAY_SIZE above, this version takes two\n+   arguments, representing the two values passed to Fortran's SIZE\n+   keyword.  */\n+\n+extern struct value *eval_op_f_array_size (struct type *expect_type,\n+\t\t\t\t\t   struct expression *exp,\n+\t\t\t\t\t   enum noside noside,\n+\t\t\t\t\t   enum exp_opcode opcode,\n+\t\t\t\t\t   struct value *arg1,\n+\t\t\t\t\t   struct value *arg2);\n+\n+\n namespace expr\n {\n \n@@ -107,6 +131,10 @@ using fortran_associated_2arg = binop_operation<FORTRAN_ASSOCIATED,\n \t\t\t\t\t\teval_op_f_associated>;\n using fortran_rank_operation = unop_operation<UNOP_FORTRAN_RANK,\n \t\t\t\t\t      eval_op_f_rank>;\n+using fortran_array_size_1arg = unop_operation<FORTRAN_ARRAY_SIZE,\n+\t\t\t\t\t       eval_op_f_array_size>;\n+using fortran_array_size_2arg = binop_operation<FORTRAN_ARRAY_SIZE,\n+\t\t\t\t\t\teval_op_f_array_size>;\n \n /* The Fortran \"complex\" operation.  */\n class fortran_cmplx_operation"
    },
    {
      "sha": "e652bd96d74e0b6442ec4866c33dcb1b23ca234b",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
      "patch": "@@ -260,6 +260,13 @@ exp\t:\tUNOP_OR_BINOP_INTRINSIC '('\n \t\t\t      else\n \t\t\t\tpstate->wrap2<fortran_associated_2arg> ();\n \t\t\t    }\n+\t\t\t  else if ($1 == FORTRAN_ARRAY_SIZE)\n+\t\t\t    {\n+\t\t\t      if (n == 1)\n+\t\t\t\tpstate->wrap<fortran_array_size_1arg> ();\n+\t\t\t      else\n+\t\t\t\tpstate->wrap2<fortran_array_size_2arg> ();\n+\t\t\t    }\n \t\t\t  else\n \t\t\t    {\n \t\t\t      std::vector<operation_up> args\n@@ -1143,6 +1150,7 @@ static const struct token f77_keywords[] =\n   { \"allocated\", UNOP_INTRINSIC, UNOP_FORTRAN_ALLOCATED, false },\n   { \"associated\", UNOP_OR_BINOP_INTRINSIC, FORTRAN_ASSOCIATED, false },\n   { \"rank\", UNOP_INTRINSIC, UNOP_FORTRAN_RANK, false },\n+  { \"size\", UNOP_OR_BINOP_INTRINSIC, FORTRAN_ARRAY_SIZE, false },\n };\n \n /* Implementation of a dynamically expandable buffer for processing input"
    },
    {
      "sha": "a33aef31d4f2612e9daa6f9ed70bac7edd28c83f",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 97,
      "deletions": 0,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
      "patch": "@@ -578,6 +578,103 @@ eval_op_f_associated (struct type *expect_type,\n   return fortran_associated (exp->gdbarch, exp->language_defn, arg1, arg2);\n }\n \n+/* Implement FORTRAN_ARRAY_SIZE expression, this corresponds to the 'SIZE'\n+   keyword.  Both GDBARCH and LANG are extracted from the expression being\n+   evaluated.  ARRAY is the value that should be an array, though this will\n+   not have been checked before calling this function.  DIM is optional, if\n+   present then it should be an integer identifying a dimension of the\n+   array to ask about.  As with ARRAY the validity of DIM is not checked\n+   before calling this function.\n+\n+   Return either the total number of elements in ARRAY (when DIM is\n+   nullptr), or the number of elements in dimension DIM.  */\n+\n+static struct value *\n+fortran_array_size (struct gdbarch *gdbarch, const language_defn *lang,\n+\t\t    struct value *array, struct value *dim_val = nullptr)\n+{\n+  /* Check that ARRAY is the correct type.  */\n+  struct type *array_type = check_typedef (value_type (array));\n+  if (array_type->code () != TYPE_CODE_ARRAY)\n+    error (_(\"SIZE can only be applied to arrays\"));\n+  if (type_not_allocated (array_type) || type_not_associated (array_type))\n+    error (_(\"SIZE can only be used on allocated/associated arrays\"));\n+\n+  int ndimensions = calc_f77_array_dims (array_type);\n+  int dim = -1;\n+  LONGEST result = 0;\n+\n+  if (dim_val != nullptr)\n+    {\n+      if (check_typedef (value_type (dim_val))->code () != TYPE_CODE_INT)\n+\terror (_(\"DIM argument to SIZE must be an integer\"));\n+      dim = (int) value_as_long (dim_val);\n+\n+      if (dim < 1 || dim > ndimensions)\n+\terror (_(\"DIM argument to SIZE must be between 1 and %d\"),\n+\t       ndimensions);\n+    }\n+\n+  /* Now walk over all the dimensions of the array totalling up the\n+     elements in each dimension.  */\n+  for (int i = ndimensions - 1; i >= 0; --i)\n+    {\n+      /* If this is the requested dimension then we're done.  Grab the\n+\t bounds and return.  */\n+      if (i == dim - 1 || dim == -1)\n+\t{\n+\t  LONGEST lbound, ubound;\n+\t  struct type *range = array_type->index_type ();\n+\n+\t  if (!get_discrete_bounds (range, &lbound, &ubound))\n+\t    error (_(\"failed to find array bounds\"));\n+\n+\t  LONGEST dim_size = (ubound - lbound + 1);\n+\t  if (result == 0)\n+\t    result = dim_size;\n+\t  else\n+\t    result *= dim_size;\n+\n+\t  if (dim != -1)\n+\t    break;\n+\t}\n+\n+      /* Peel off another dimension of the array.  */\n+      array_type = TYPE_TARGET_TYPE (array_type);\n+    }\n+\n+  struct type *result_type\n+    = builtin_f_type (gdbarch)->builtin_integer;\n+  return value_from_longest (result_type, result);\n+}\n+\n+/* See f-exp.h.  */\n+\n+struct value *\n+eval_op_f_array_size (struct type *expect_type,\n+\t\t      struct expression *exp,\n+\t\t      enum noside noside,\n+\t\t      enum exp_opcode opcode,\n+\t\t      struct value *arg1)\n+{\n+  gdb_assert (opcode == FORTRAN_ARRAY_SIZE);\n+  return fortran_array_size (exp->gdbarch, exp->language_defn, arg1);\n+}\n+\n+/* See f-exp.h.  */\n+\n+struct value *\n+eval_op_f_array_size (struct type *expect_type,\n+\t\t      struct expression *exp,\n+\t\t      enum noside noside,\n+\t\t      enum exp_opcode opcode,\n+\t\t      struct value *arg1,\n+\t\t      struct value *arg2)\n+{\n+  gdb_assert (opcode == FORTRAN_ARRAY_SIZE);\n+  return fortran_array_size (exp->gdbarch, exp->language_defn, arg1, arg2);\n+}\n+\n /* A helper function for UNOP_ABS.  */\n \n struct value *"
    },
    {
      "sha": "b67247f7e183e4727ccbd9a37ac58eb15bbe94f4",
      "filename": "gdb/std-operator.def",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/std-operator.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/std-operator.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/std-operator.def?ref=7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
      "patch": "@@ -388,3 +388,4 @@ OP (BINOP_FORTRAN_MODULO)\n OP (FORTRAN_LBOUND)\n OP (FORTRAN_UBOUND)\n OP (FORTRAN_ASSOCIATED)\n+OP (FORTRAN_ARRAY_SIZE)\n\\ No newline at end of file"
    },
    {
      "sha": "00a7133d2b0d12ed1149331682b5e3ee52b1f84b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/size.exp: New file.\n+\t* gdb.fortran/size.f90: New file.\n+\n 2021-03-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.fortran/rank.exp: New file."
    },
    {
      "sha": "20a9b2795b07648c03275b0a48b9e3886ecba3a5",
      "filename": "gdb/testsuite/gdb.fortran/size.exp",
      "status": "added",
      "additions": 89,
      "deletions": 0,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/testsuite/gdb.fortran/size.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/testsuite/gdb.fortran/size.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/size.exp?ref=7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
      "patch": "@@ -0,0 +1,89 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/> .\n+\n+# Testing GDB's implementation of SIZE keyword.\n+\n+if {[skip_fortran_tests]} { return -1 }\n+\n+standard_testfile \".f90\"\n+load_lib fortran.exp\n+\n+if {[prepare_for_testing ${testfile}.exp ${testfile} ${srcfile} \\\n+\t {debug f90}]} {\n+    return -1\n+}\n+\n+if ![fortran_runto_main] {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"Test Breakpoint\"]\n+gdb_breakpoint [gdb_get_line_number \"Final Breakpoint\"]\n+\n+# We place a limit on the number of tests that can be run, just in\n+# case something goes wrong, and GDB gets stuck in an loop here.\n+set found_final_breakpoint false\n+set test_count 0\n+while { $test_count < 500 } {\n+    with_test_prefix \"test $test_count\" {\n+\tincr test_count\n+\n+\tgdb_test_multiple \"continue\" \"continue\" {\n+\t    -re -wrap \"! Test Breakpoint\" {\n+\t\t# We can run a test from here.\n+\t    }\n+\t    -re -wrap \"! Final Breakpoint\" {\n+\t\t# We're done with the tests.\n+\t\tset found_final_breakpoint true\n+\t    }\n+\t}\n+\n+\tif ($found_final_breakpoint) {\n+\t    break\n+\t}\n+\n+\t# First grab the expected answer.\n+\tset answer [get_valueof \"\" \"answer\" \"**unknown**\"]\n+\n+\t# Now move up a frame and figure out a command for us to run\n+\t# as a test.\n+\tset command \"\"\n+\tgdb_test_multiple \"up\" \"up\" {\n+\t    -re -wrap \"\\r\\n\\[0-9\\]+\\[ \\t\\]+call test_size \\\\((\\[^\\r\\n\\]+)\\\\)\" {\n+\t\tset command $expect_out(1,string)\n+\t    }\n+\t}\n+\n+\tgdb_assert { ![string equal $command \"\"] } \"found a command to run\"\n+\n+\tgdb_test \"p $command\" \" = $answer\"\n+    }\n+}\n+\n+# Ensure we reached the final breakpoint.  If more tests have been added\n+# to the test script, and this starts failing, then the safety 'while'\n+# loop above might need to be increased.\n+gdb_assert {$found_final_breakpoint} \"ran all compiled in tests\"\n+\n+foreach var {array_1d_p array_2d_p allocatable_array_1d \\\n+\t\t allocatable_array_2d} {\n+    gdb_test \"p size ($var)\" \\\n+\t\"SIZE can only be used on allocated/associated arrays\"\n+}\n+\n+foreach var {an_integer a_real} {\n+    gdb_test \"p size ($var)\" \"SIZE can only be applied to arrays\"\n+}"
    },
    {
      "sha": "4b556a73b06d864970c1a1dbe8ca66a08dcc4026",
      "filename": "gdb/testsuite/gdb.fortran/size.f90",
      "status": "added",
      "additions": 118,
      "deletions": 0,
      "changes": 118,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/testsuite/gdb.fortran/size.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ba155b37073a3512c85f1d7f12dbaed9a6db3e2/gdb/testsuite/gdb.fortran/size.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/size.f90?ref=7ba155b37073a3512c85f1d7f12dbaed9a6db3e2",
      "patch": "@@ -0,0 +1,118 @@\n+! Copyright 2021 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 3 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+!\n+! Start of test program.\n+!\n+program test\n+\n+  ! Things to perform tests on.\n+  integer, target :: array_1d (1:10) = 0\n+  integer, target :: array_2d (1:4, 1:3) = 0\n+  integer :: an_integer = 0\n+  real :: a_real = 0.0\n+  integer, pointer :: array_1d_p (:) => null ()\n+  integer, pointer :: array_2d_p (:,:) => null ()\n+  integer, allocatable :: allocatable_array_1d (:)\n+  integer, allocatable :: allocatable_array_2d (:,:)\n+\n+  ! Loop counters.\n+  integer :: s1, s2\n+\n+  ! The start of the tests.\n+  call test_size (size (array_1d))\n+  call test_size (size (array_1d, 1))\n+  do s1=1, SIZE (array_1d, 1), 1\n+     call test_size (size (array_1d (1:10:s1)))\n+     call test_size (size (array_1d (1:10:s1), 1))\n+     call test_size (size (array_1d (10:1:-s1)))\n+     call test_size (size (array_1d (10:1:-s1), 1))\n+  end do\n+\n+  do s2=1, SIZE (array_2d, 2), 1\n+     do s1=1, SIZE (array_2d, 1), 1\n+        call test_size (size (array_2d (1:4:s1, 1:3:s2)))\n+        call test_size (size (array_2d (4:1:-s1, 1:3:s2)))\n+        call test_size (size (array_2d (1:4:s1, 3:1:-s2)))\n+        call test_size (size (array_2d (4:1:-s1, 3:1:-s2)))\n+\n+        call test_size (size (array_2d (1:4:s1, 1:3:s2), 1))\n+        call test_size (size (array_2d (4:1:-s1, 1:3:s2), 1))\n+        call test_size (size (array_2d (1:4:s1, 3:1:-s2), 1))\n+        call test_size (size (array_2d (4:1:-s1, 3:1:-s2), 1))\n+\n+        call test_size (size (array_2d (1:4:s1, 1:3:s2), 2))\n+        call test_size (size (array_2d (4:1:-s1, 1:3:s2), 2))\n+        call test_size (size (array_2d (1:4:s1, 3:1:-s2), 2))\n+        call test_size (size (array_2d (4:1:-s1, 3:1:-s2), 2))\n+     end do\n+  end do\n+\n+  allocate (allocatable_array_1d (-10:-5))\n+  call test_size (size (allocatable_array_1d))\n+  do s1=1, SIZE (allocatable_array_1d, 1), 1\n+     call test_size (size (allocatable_array_1d (-10:-5:s1)))\n+     call test_size (size (allocatable_array_1d (-5:-10:-s1)))\n+\n+     call test_size (size (allocatable_array_1d (-10:-5:s1), 1))\n+     call test_size (size (allocatable_array_1d (-5:-10:-s1), 1))\n+  end do\n+\n+  allocate (allocatable_array_2d (-3:3, 8:12))\n+  do s2=1, SIZE (allocatable_array_2d, 2), 1\n+     do s1=1, SIZE (allocatable_array_2d, 1), 1\n+        call test_size (size (allocatable_array_2d (-3:3:s1, 8:12:s2)))\n+        call test_size (size (allocatable_array_2d (3:-3:-s1, 8:12:s2)))\n+        call test_size (size (allocatable_array_2d (-3:3:s1, 12:8:-s2)))\n+        call test_size (size (allocatable_array_2d (3:-3:-s1, 12:8:-s2)))\n+\n+        call test_size (size (allocatable_array_2d (-3:3:s1, 8:12:s2), 1))\n+        call test_size (size (allocatable_array_2d (3:-3:-s1, 8:12:s2), 2))\n+        call test_size (size (allocatable_array_2d (-3:3:s1, 12:8:-s2), 1))\n+        call test_size (size (allocatable_array_2d (3:-3:-s1, 12:8:-s2), 2))\n+     end do\n+  end do\n+\n+  array_1d_p => array_1d\n+  call test_size (size (array_1d_p))\n+  call test_size (size (array_1d_p, 1))\n+\n+  array_2d_p => array_2d\n+  call test_size (size (array_2d_p))\n+  call test_size (size (array_2d_p, 1))\n+  call test_size (size (array_2d_p, 2))\n+\n+  deallocate (allocatable_array_1d)\n+  deallocate (allocatable_array_2d)\n+  array_1d_p => null ()\n+  array_2d_p => null ()\n+\n+  print *, \"\" ! Final Breakpoint\n+  print *, an_integer\n+  print *, a_real\n+  print *, associated (array_1d_p)\n+  print *, associated (array_2d_p)\n+  print *, allocated (allocatable_array_1d)\n+  print *, allocated (allocatable_array_2d)\n+\n+contains\n+\n+  subroutine test_size (answer)\n+    integer :: answer\n+\n+    print *,answer\t! Test Breakpoint\n+  end subroutine test_size\n+\n+end program test"
    }
  ]
}