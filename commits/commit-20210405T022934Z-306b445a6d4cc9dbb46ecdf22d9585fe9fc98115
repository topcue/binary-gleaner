{
  "sha": "306b445a6d4cc9dbb46ecdf22d9585fe9fc98115",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzA2YjQ0NWE2ZDRjYzlkYmI0NmVjZGYyMmQ5NTg1ZmU5ZmM5ODExNQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-05T02:29:34Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-05T02:29:34Z"
    },
    "message": "gdb: fix internal error in avr_frame_unwind_cache\n\nWhen trying to do pretty much anything that requires unwinding a frame\non AVR, we get\n\n    /home/simark/src/wt/avr/gdb/trad-frame.h:143: internal-error: LONGEST trad_frame_saved_reg::addr() const: Assertion `m_kind == trad_frame_saved_reg_kind::ADDR' failed.\n\nThis is likely coming from the trad-frame refactor in 098caef485a4\n(\"Refactor struct trad_frame_saved_regs\").  Here's an example of how to\nreproduce it:\n\nIn one terminal:\n\n    $ cat test.c\n    int foo(int x)\n    {\n      return x * 7;\n    }\n\n    int main() {\n        return foo(2);\n    }\n    $ avr-gcc -gdwarf-4 -mmcu=atmega2560 test.c\n    $ /tmp/simavr/bin/simavr --mcu atmega2560 -g a.out\n    Loaded 330 .text at address 0x0\n    Loaded 0 .data\n\nAnd in another one:\n\n    $ ./gdb -q -nx --data-directory=data-directory a.out -ex \"tar rem :1234\" -ex \"b foo\" -ex c -ex bt\n    Reading symbols from a.out...\n    Remote debugging using :1234\n    0x00000000 in __vectors ()\n    Breakpoint 1 at 0x110: file test.c, line 3.\n    Note: automatically using hardware breakpoints for read-only addresses.\n    Continuing.\n\n    Breakpoint 1, foo (x=2) at test.c:3\n    3         return x * 7;\n    #0  foo (x=2) at test.c:3\n    /home/simark/src/wt/avr/gdb/trad-frame.h:143: internal-error: LONGEST trad_frame_saved_reg::addr() const: Assertion `m_kind == trad_frame_saved_reg_kind::ADDR' failed.\n\nWhat the AVR code does is:\n\n1. In avr_scan_prologue, in the block that says \"First stage of the\n   prologue scanning.\", look for \"push rX\" instructions and note that rX\n   is saved on the stack.  But instead of putting the actual stack\n   address directly, it puts an offset (from the previous frame's sp).\n2. Back in avr_frame_unwind_cache, in the block that says \"Adjust all\n   the saved registers\", adjust all these values to be real stack\n   addresses.\n\nTo check whether a register was assigned an address (and therefore if it\nneeds adjustment), the code does:\n\n    if (info->saved_regs[i].addr () > 0)\n\nSince commit 098caef485a4, it's invalid to call the `addr` getter of\ntrad_frame_saved_reg if the register hasn't been assigned an address.\nInstead, the code could use the `is_addr` getter to verify if the\nregister has been assigned an address.  This is what this patch does.\n\ngdb/ChangeLog:\n\n\t* avr-tdep.c (avr_frame_unwind_cache): Use\n\ttrad_frame_saved_reg::is_addr.\n\nChange-Id: I5803089160b829400178746c5e3bca0c1cd11c00",
    "tree": {
      "sha": "909b61ccce75fd48a1593d59bf443c011befa3b4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/909b61ccce75fd48a1593d59bf443c011befa3b4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/306b445a6d4cc9dbb46ecdf22d9585fe9fc98115",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/306b445a6d4cc9dbb46ecdf22d9585fe9fc98115",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/306b445a6d4cc9dbb46ecdf22d9585fe9fc98115",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/306b445a6d4cc9dbb46ecdf22d9585fe9fc98115/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a2991571f0d7fdaea813fb6dfe15d19e33364918",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2991571f0d7fdaea813fb6dfe15d19e33364918",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a2991571f0d7fdaea813fb6dfe15d19e33364918"
    }
  ],
  "stats": {
    "total": 7,
    "additions": 6,
    "deletions": 1
  },
  "files": [
    {
      "sha": "281c567a8d7f68c573e3d5292a050c45cc5fcfce",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/306b445a6d4cc9dbb46ecdf22d9585fe9fc98115/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/306b445a6d4cc9dbb46ecdf22d9585fe9fc98115/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=306b445a6d4cc9dbb46ecdf22d9585fe9fc98115",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-04  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* avr-tdep.c (avr_frame_unwind_cache): Use\n+\ttrad_frame_saved_reg::is_addr.\n+\n 2021-04-02  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* objfiles.c (get_objfile_bfd_data): Remove objfile parameter,"
    },
    {
      "sha": "5853e692ae46067daee8b78056742fa65ceee783",
      "filename": "gdb/avr-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/306b445a6d4cc9dbb46ecdf22d9585fe9fc98115/gdb/avr-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/306b445a6d4cc9dbb46ecdf22d9585fe9fc98115/gdb/avr-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/avr-tdep.c?ref=306b445a6d4cc9dbb46ecdf22d9585fe9fc98115",
      "patch": "@@ -1037,7 +1037,7 @@ avr_frame_unwind_cache (struct frame_info *this_frame,\n   /* Adjust all the saved registers so that they contain addresses and not\n      offsets.  */\n   for (i = 0; i < gdbarch_num_regs (gdbarch) - 1; i++)\n-    if (info->saved_regs[i].addr () > 0)\n+    if (info->saved_regs[i].is_addr ())\n       info->saved_regs[i].set_addr (info->prev_sp\n \t\t\t\t    - info->saved_regs[i].addr ());\n "
    }
  ]
}