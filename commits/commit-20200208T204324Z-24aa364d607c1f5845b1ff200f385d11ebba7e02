{
  "sha": "24aa364d607c1f5845b1ff200f385d11ebba7e02",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjRhYTM2NGQ2MDdjMWY1ODQ1YjFmZjIwMGYzODVkMTFlYmJhN2UwMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:43:24Z"
    },
    "message": "Move read_offset_1 to leb.c\n\nThis moves read_offset_1 to leb.c, as it is a low-level data-reading\nfunction.  It is also renamed to remove the \"_1\", because gdb can use\noverloading now, and this is clearer.\n\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_offset_1): Move to leb.c.\n\t(read_abbrev_offset, read_offset, dwarf_decode_line_header)\n\t(dwarf_decode_macro_bytes): Update.\n\t* dwarf2/leb.c (read_offset): Rename; move from read.c.\n\t* dwarf2/leb.h (read_offset): Declare.\n\nChange-Id: I048140598acfa76eade2cc529ab7933d4b9ca0b3",
    "tree": {
      "sha": "0ef677978c85c57220813b1e843633aaa3ff9f0c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0ef677978c85c57220813b1e843633aaa3ff9f0c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/24aa364d607c1f5845b1ff200f385d11ebba7e02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24aa364d607c1f5845b1ff200f385d11ebba7e02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/24aa364d607c1f5845b1ff200f385d11ebba7e02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24aa364d607c1f5845b1ff200f385d11ebba7e02/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2c7d5afccfea519b7cb53d76673d5aca1a00bacc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c7d5afccfea519b7cb53d76673d5aca1a00bacc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2c7d5afccfea519b7cb53d76673d5aca1a00bacc"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 41,
    "deletions": 31
  },
  "files": [
    {
      "sha": "519225fb918cee0feb8aabf3d54c5b30e4eb0ffc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aa364d607c1f5845b1ff200f385d11ebba7e02/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aa364d607c1f5845b1ff200f385d11ebba7e02/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=24aa364d607c1f5845b1ff200f385d11ebba7e02",
      "patch": "@@ -1,3 +1,11 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_offset_1): Move to leb.c.\n+\t(read_abbrev_offset, read_offset, dwarf_decode_line_header)\n+\t(dwarf_decode_macro_bytes): Update.\n+\t* dwarf2/leb.c (read_offset): Rename; move from read.c.\n+\t* dwarf2/leb.h (read_offset): Declare.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (dwarf2_section_size): Remove."
    },
    {
      "sha": "02faaa9954ddd136438bb6e985ea7fa857d9969d",
      "filename": "gdb/dwarf2/leb.c",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aa364d607c1f5845b1ff200f385d11ebba7e02/gdb/dwarf2/leb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aa364d607c1f5845b1ff200f385d11ebba7e02/gdb/dwarf2/leb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/leb.c?ref=24aa364d607c1f5845b1ff200f385d11ebba7e02",
      "patch": "@@ -110,3 +110,27 @@ read_initial_length (bfd *abfd, const gdb_byte *buf, unsigned int *bytes_read,\n \n   return length;\n }\n+\n+/* See leb.h.  */\n+\n+LONGEST\n+read_offset (bfd *abfd, const gdb_byte *buf, unsigned int offset_size)\n+{\n+  LONGEST retval = 0;\n+\n+  switch (offset_size)\n+    {\n+    case 4:\n+      retval = bfd_get_32 (abfd, buf);\n+      break;\n+    case 8:\n+      retval = bfd_get_64 (abfd, buf);\n+      break;\n+    default:\n+      internal_error (__FILE__, __LINE__,\n+\t\t      _(\"read_offset_1: bad switch [in module %s]\"),\n+\t\t      bfd_get_filename (abfd));\n+    }\n+\n+  return retval;\n+}"
    },
    {
      "sha": "9c30cbea73490fb4580b01b8d523e5cc04c2d8cb",
      "filename": "gdb/dwarf2/leb.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aa364d607c1f5845b1ff200f385d11ebba7e02/gdb/dwarf2/leb.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aa364d607c1f5845b1ff200f385d11ebba7e02/gdb/dwarf2/leb.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/leb.h?ref=24aa364d607c1f5845b1ff200f385d11ebba7e02",
      "patch": "@@ -130,4 +130,8 @@ extern LONGEST read_initial_length (bfd *abfd, const gdb_byte *buf,\n \t\t\t\t    unsigned int *bytes_read,\n \t\t\t\t    bool handle_nonstd = true);\n \n+/* Read an offset from the data stream.  */\n+extern LONGEST read_offset (bfd *abfd, const gdb_byte *buf,\n+\t\t\t    unsigned int offset_size);\n+\n #endif /* GDB_DWARF2_LEB_H */"
    },
    {
      "sha": "f291d8f237991a56f6b4e755418cc4c1cb3deebb",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 5,
      "deletions": 31,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aa364d607c1f5845b1ff200f385d11ebba7e02/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aa364d607c1f5845b1ff200f385d11ebba7e02/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=24aa364d607c1f5845b1ff200f385d11ebba7e02",
      "patch": "@@ -1285,8 +1285,6 @@ static LONGEST read_offset (bfd *, const gdb_byte *,\n \t\t\t    const struct comp_unit_head *,\n \t\t\t    unsigned int *);\n \n-static LONGEST read_offset_1 (bfd *, const gdb_byte *, unsigned int);\n-\n static sect_offset read_abbrev_offset\n   (struct dwarf2_per_objfile *dwarf2_per_objfile,\n    struct dwarf2_section_info *, sect_offset);\n@@ -6145,7 +6143,7 @@ read_abbrev_offset (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       info_ptr += 2;\n     }\n \n-  return (sect_offset) read_offset_1 (abfd, info_ptr, offset_size);\n+  return (sect_offset) read_offset (abfd, info_ptr, offset_size);\n }\n \n /* Allocate a new partial symtab for file named NAME and mark this new\n@@ -19033,36 +19031,12 @@ read_offset (bfd *abfd, const gdb_byte *buf,\n \t     const struct comp_unit_head *cu_header,\n              unsigned int *bytes_read)\n {\n-  LONGEST offset = read_offset_1 (abfd, buf, cu_header->offset_size);\n+  LONGEST offset = read_offset (abfd, buf, cu_header->offset_size);\n \n   *bytes_read = cu_header->offset_size;\n   return offset;\n }\n \n-/* Read an offset from the data stream.  */\n-\n-static LONGEST\n-read_offset_1 (bfd *abfd, const gdb_byte *buf, unsigned int offset_size)\n-{\n-  LONGEST retval = 0;\n-\n-  switch (offset_size)\n-    {\n-    case 4:\n-      retval = bfd_get_32 (abfd, buf);\n-      break;\n-    case 8:\n-      retval = bfd_get_64 (abfd, buf);\n-      break;\n-    default:\n-      internal_error (__FILE__, __LINE__,\n-\t\t      _(\"read_offset_1: bad switch [in module %s]\"),\n-\t\t      bfd_get_filename (abfd));\n-    }\n-\n-  return retval;\n-}\n-\n static const gdb_byte *\n read_n_bytes (bfd *abfd, const gdb_byte *buf, unsigned int size)\n {\n@@ -19847,7 +19821,7 @@ dwarf_decode_line_header (sect_offset sect_off, struct dwarf2_cu *cu)\n \t  return NULL;\n \t}\n     }\n-  lh->header_length = read_offset_1 (abfd, line_ptr, offset_size);\n+  lh->header_length = read_offset (abfd, line_ptr, offset_size);\n   line_ptr += offset_size;\n   lh->statement_program_start = line_ptr + lh->header_length;\n   lh->minimum_instruction_length = read_1_byte (abfd, line_ptr);\n@@ -23922,7 +23896,7 @@ dwarf_decode_macro_bytes (struct dwarf2_cu *cu,\n \t      {\n \t\tLONGEST str_offset;\n \n-\t\tstr_offset = read_offset_1 (abfd, mac_ptr, offset_size);\n+\t\tstr_offset = read_offset (abfd, mac_ptr, offset_size);\n \t\tmac_ptr += offset_size;\n \n \t\tif (macinfo_type == DW_MACRO_define_sup\n@@ -24062,7 +24036,7 @@ dwarf_decode_macro_bytes (struct dwarf2_cu *cu,\n \t    int is_dwz = section_is_dwz;\n \t    const gdb_byte *new_mac_ptr;\n \n-\t    offset = read_offset_1 (abfd, mac_ptr, offset_size);\n+\t    offset = read_offset (abfd, mac_ptr, offset_size);\n \t    mac_ptr += offset_size;\n \n \t    if (macinfo_type == DW_MACRO_import_sup)"
    }
  ]
}