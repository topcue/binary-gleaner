{
  "sha": "1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWZhN2EwYzI0ZTc4ZTdmNzk5NWEzZmE2MDhjOWY5N2E2Y2NiZTFiNg==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-04T16:30:01Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T17:02:18Z"
    },
    "message": "libctf: sort out potential refcount loops\n\nWhen you link TUs that contain conflicting types together, the resulting\nCTF section is an archive containing many CTF dicts.  These dicts appear\nin ctf_link_outputs of the shared dict, with each ctf_import'ing that\nshared dict.  ctf_importing a dict bumps its refcount to stop it going\naway while it's in use -- but if the shared dict (whose refcount is\nbumped) has the child dict (doing the bumping) in its ctf_link_outputs,\nwe have a refcount loop, since the child dict only un-ctf_imports and\ndrops the parent's refcount when it is freed, but the child is only\nfreed when the parent's refcount falls to zero.\n\n(In the future, this will be able to go wrong on the inputs too, when an\nld -r'ed deduplicated output with conflicts is relinked.  Right now this\ncannot happen because we don't ctf_import such dicts at all.  This will\nbe fixed in a later commit in this series.)\n\nFix this by introducing an internal-use-only ctf_import_unref function\nthat imports a parent dict *witthout* bumping the parent's refcount, and\nusing it when we create per-CU outputs.  This function is only safe to\nuse if you know the parent cannot go away while the child exists: but if\nthe parent *owns* the child, as here, this is necessarily true.\n\nRecord in the ctf_file_t whether a parent was imported via ctf_import or\nctf_import_unref, so that if you do another ctf_import later on (or a\nctf_import_unref) it can decide whether to drop the refcount of the\nexisting parent being replaced depending on which function you used to\nimport that one.  Adjust ctf_serialize so that rather than doing a\nctf_import (which is wrong if the original import was\nctf_import_unref'fed), we just copy the parent field and refcount over\nand forcibly flip the unref flag on on the old copy we are going to\ndiscard.\n\nctf_file_close also needs a bit of tweaking to only close the parent if\nit was not imported with ctf_import_unref: while we're at it, guard\nagainst repeated closes with a refcount of zero and stop them causing\ndouble-frees, even if destruction of things freed *inside*\nctf_file_close cause such recursion.\n\nVerified no leaks or accesses to freed memory after all of this with\nvalgrind.  (It was leak-happy before.)\n\nlibctf/\n\t* ctf-impl.c (ctf_file_t) <ctf_parent_unreffed>: New.\n\t(ctf_import_unref): New.\n\t* ctf-open.c (ctf_file_close) Drop the refcount all the way to\n\tzero.  Don't recurse back in if the refcount is already zero.\n\t(ctf_import): Check ctf_parent_unreffed before deciding whether\n\tto close a pre-existing parent.  Set it to zero.\n\t(ctf_import_unreffed): New, as above, setting\n\tctf_parent_unreffed to 1.\n\t* ctf-create.c (ctf_serialize): Do not ctf_import into the new\n\tchild: use direct assignment, and set unreffed on the new and\n\told children.\n\t* ctf-link.c (ctf_create_per_cu): Import the parent using\n\tctf_import_unreffed.",
    "tree": {
      "sha": "a302cec9970964b2ccb806937b7daab8003dcfe7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a302cec9970964b2ccb806937b7daab8003dcfe7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3166467b00a08050366120fc3cd64336a51fa12c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3166467b00a08050366120fc3cd64336a51fa12c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3166467b00a08050366120fc3cd64336a51fa12c"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 67,
    "deletions": 8
  },
  "files": [
    {
      "sha": "4830284b14a1477a52dfbcf351873615631f8f6f",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6",
      "patch": "@@ -1,3 +1,19 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-impl.c (ctf_file_t) <ctf_parent_unreffed>: New.\n+\t(ctf_import_unref): New.\n+\t* ctf-open.c (ctf_file_close) Drop the refcount all the way to\n+\tzero.  Don't recurse back in if the refcount is already zero.\n+\t(ctf_import): Check ctf_parent_unreffed before deciding whether\n+\tto close a pre-existing parent.  Set it to zero.\n+\t(ctf_import_unreffed): New, as above, setting\n+\tctf_parent_unreffed to 1.\n+\t* ctf-create.c (ctf_serialize): Do not ctf_import into the new\n+\tchild: use direct assignment, and set unreffed on the new and\n+\told children.\n+\t* ctf-link.c (ctf_create_per_cu): Import the parent using\n+\tctf_import_unreffed.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-impl.h (ctf_link_type_mapping_key): Rename to..."
    },
    {
      "sha": "a964c20b9ed223742b81d943b7d0f265f06c69a2",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6",
      "patch": "@@ -516,8 +516,9 @@ ctf_serialize (ctf_file_t *fp)\n     }\n \n   (void) ctf_setmodel (nfp, ctf_getmodel (fp));\n-  (void) ctf_import (nfp, fp->ctf_parent);\n \n+  nfp->ctf_parent = fp->ctf_parent;\n+  nfp->ctf_parent_unreffed = fp->ctf_parent_unreffed;\n   nfp->ctf_refcnt = fp->ctf_refcnt;\n   nfp->ctf_flags |= fp->ctf_flags & ~LCTF_DIRTY;\n   if (nfp->ctf_dynbase == NULL)\n@@ -565,6 +566,7 @@ ctf_serialize (ctf_file_t *fp)\n   fp->ctf_syn_ext_strtab = NULL;\n   fp->ctf_link_cu_mapping = NULL;\n   fp->ctf_link_type_mapping = NULL;\n+  fp->ctf_parent_unreffed = 1;\n \n   fp->ctf_dvhash = NULL;\n   memset (&fp->ctf_dvdefs, 0, sizeof (ctf_list_t));"
    },
    {
      "sha": "4c8a37c4c268e20741e70e8963d54fcada904b3d",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6",
      "patch": "@@ -291,6 +291,7 @@ struct ctf_file\n   const char *ctf_cuname;\t  /* Compilation unit name (if any).  */\n   char *ctf_dyncuname;\t\t  /* Dynamically allocated name of CU.  */\n   struct ctf_file *ctf_parent;\t  /* Parent CTF container (if any).  */\n+  int ctf_parent_unreffed;\t  /* Parent set by ctf_import_unref?  */\n   const char *ctf_parlabel;\t  /* Label in parent container (if any).  */\n   const char *ctf_parname;\t  /* Basename of parent (if any).  */\n   char *ctf_dynparname;\t\t  /* Dynamically allocated name of parent.  */\n@@ -536,6 +537,7 @@ extern ctf_file_t *ctf_simple_open_internal (const char *, size_t, const char *,\n extern ctf_file_t *ctf_bufopen_internal (const ctf_sect_t *, const ctf_sect_t *,\n \t\t\t\t\t const ctf_sect_t *, ctf_dynhash_t *,\n \t\t\t\t\t int, int *);\n+extern int ctf_import_unref (ctf_file_t *fp, ctf_file_t *pfp);\n extern int ctf_serialize (ctf_file_t *);\n \n _libctf_malloc_"
    },
    {
      "sha": "bcfd2564fbc23921c8484827a713b64cc30342de",
      "filename": "libctf/ctf-link.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6/libctf/ctf-link.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6/libctf/ctf-link.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-link.c?ref=1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6",
      "patch": "@@ -222,7 +222,7 @@ ctf_create_per_cu (ctf_file_t *fp, const char *filename, const char *cuname)\n       if (ctf_dynhash_insert (fp->ctf_link_outputs, dynname, cu_fp) < 0)\n \tgoto oom;\n \n-      ctf_import (cu_fp, fp);\n+      ctf_import_unref (cu_fp, fp);\n       ctf_cuname_set (cu_fp, cuname);\n       ctf_parent_name_set (cu_fp, _CTF_SECTION);\n     }"
    },
    {
      "sha": "87bff2f122d31e61641798029cc1698a5fab2fcc",
      "filename": "libctf/ctf-open.c",
      "status": "modified",
      "additions": 45,
      "deletions": 6,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6/libctf/ctf-open.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6/libctf/ctf-open.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open.c?ref=1fa7a0c24e78e7f7995a3fa608c9f97a6ccbe1b6",
      "patch": "@@ -1657,9 +1657,17 @@ ctf_file_close (ctf_file_t *fp)\n       return;\n     }\n \n+  /* It is possible to recurse back in here, notably if dicts in the\n+     ctf_link_inputs or ctf_link_outputs cite this dict as a parent without\n+     using ctf_import_unref.  Do nothing in that case.  */\n+  if (fp->ctf_refcnt == 0)\n+    return;\n+\n+  fp->ctf_refcnt--;\n   free (fp->ctf_dyncuname);\n   free (fp->ctf_dynparname);\n-  ctf_file_close (fp->ctf_parent);\n+  if (fp->ctf_parent && !fp->ctf_parent_unreffed)\n+    ctf_file_close (fp->ctf_parent);\n \n   for (dtd = ctf_list_next (&fp->ctf_dtdefs); dtd != NULL; dtd = ntd)\n     {\n@@ -1816,13 +1824,44 @@ ctf_import (ctf_file_t *fp, ctf_file_t *pfp)\n   if (pfp != NULL && pfp->ctf_dmodel != fp->ctf_dmodel)\n     return (ctf_set_errno (fp, ECTF_DMODEL));\n \n-  if (fp->ctf_parent != NULL)\n+  if (fp->ctf_parent && !fp->ctf_parent_unreffed)\n+    ctf_file_close (fp->ctf_parent);\n+  fp->ctf_parent = NULL;\n+\n+  if (pfp != NULL)\n     {\n-      fp->ctf_parent->ctf_refcnt--;\n-      ctf_file_close (fp->ctf_parent);\n-      fp->ctf_parent = NULL;\n+      int err;\n+\n+      if (fp->ctf_parname == NULL)\n+\tif ((err = ctf_parent_name_set (fp, \"PARENT\")) < 0)\n+\t  return err;\n+\n+      fp->ctf_flags |= LCTF_CHILD;\n+      pfp->ctf_refcnt++;\n+      fp->ctf_parent_unreffed = 0;\n     }\n \n+  fp->ctf_parent = pfp;\n+  return 0;\n+}\n+\n+/* Like ctf_import, but does not increment the refcount on the imported parent\n+   or close it at any point: as a result it can go away at any time and the\n+   caller must do all freeing itself.  Used internally to avoid refcount\n+   loops.  */\n+int\n+ctf_import_unref (ctf_file_t *fp, ctf_file_t *pfp)\n+{\n+  if (fp == NULL || fp == pfp || (pfp != NULL && pfp->ctf_refcnt == 0))\n+    return (ctf_set_errno (fp, EINVAL));\n+\n+  if (pfp != NULL && pfp->ctf_dmodel != fp->ctf_dmodel)\n+    return (ctf_set_errno (fp, ECTF_DMODEL));\n+\n+  if (fp->ctf_parent && !fp->ctf_parent_unreffed)\n+    ctf_file_close (fp->ctf_parent);\n+  fp->ctf_parent = NULL;\n+\n   if (pfp != NULL)\n     {\n       int err;\n@@ -1832,7 +1871,7 @@ ctf_import (ctf_file_t *fp, ctf_file_t *pfp)\n \t  return err;\n \n       fp->ctf_flags |= LCTF_CHILD;\n-      pfp->ctf_refcnt++;\n+      fp->ctf_parent_unreffed = 1;\n     }\n \n   fp->ctf_parent = pfp;"
    }
  ]
}