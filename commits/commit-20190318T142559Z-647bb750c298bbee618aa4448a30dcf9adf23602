{
  "sha": "647bb750c298bbee618aa4448a30dcf9adf23602",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjQ3YmI3NTBjMjk4YmJlZTYxOGFhNDQ0OGEzMGRjZjlhZGYyMzYwMg==",
  "commit": {
    "author": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2019-03-18T14:25:59Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-03-18T14:25:59Z"
    },
    "message": "Fix scrolling right in the TUI\n\nThis commit fixes two issues in scrolling right in the TUI:\n\n#1 - Scrolling right with the arrow keys, the first keypress doesn't\ndo anything.  The problem is that copy_source_line() checks if\n(column < first_col), and because of the ++column directly before, it\nbasically starts with 1 instead of 0.\n\n#2 - Scrolling right handles TABS and escaped characters as single\ncharacters, which just looks weird.  The problem is that there's a\nspot that misses handling TABS.\n\ngdb/ChangeLog:\n2019-03-18  Hannes Domani  <ssbssa@yahoo.de>\n\n\t* tui/tui-source.c (copy_source_line): Fix handling of 'column'.\n\tHandle tabs.",
    "tree": {
      "sha": "cdaedc2d31b77d1daa8400cd5ef894f6c57cb4bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cdaedc2d31b77d1daa8400cd5ef894f6c57cb4bb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/647bb750c298bbee618aa4448a30dcf9adf23602",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/647bb750c298bbee618aa4448a30dcf9adf23602",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/647bb750c298bbee618aa4448a30dcf9adf23602",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/647bb750c298bbee618aa4448a30dcf9adf23602/comments",
  "author": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bff8c71fd8dece639e69b399883f90b3404a2a48",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bff8c71fd8dece639e69b399883f90b3404a2a48",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bff8c71fd8dece639e69b399883f90b3404a2a48"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 25,
    "deletions": 10
  },
  "files": [
    {
      "sha": "75d82dbd3f25b2f4f55b45bdc5e74f718c3b7789",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/647bb750c298bbee618aa4448a30dcf9adf23602/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/647bb750c298bbee618aa4448a30dcf9adf23602/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=647bb750c298bbee618aa4448a30dcf9adf23602",
      "patch": "@@ -1,3 +1,8 @@\n+2019-03-18  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\t* tui/tui-source.c (copy_source_line): Fix handling of 'column'.\n+\tHandle tabs.\n+\n 2019-03-18  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (empty_array): Add \"high\" parameter."
    },
    {
      "sha": "1fa0e986e0392a6c0b4a4e15dcad774de7697a1e",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 20,
      "deletions": 10,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/647bb750c298bbee618aa4448a30dcf9adf23602/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/647bb750c298bbee618aa4448a30dcf9adf23602/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=647bb750c298bbee618aa4448a30dcf9adf23602",
      "patch": "@@ -71,10 +71,27 @@ copy_source_line (const char **ptr, int line_no, int first_col,\n \n       ++lineptr;\n       ++column;\n+\n+      auto process_tab = [&] ()\n+\t{\n+\t  int max_tab_len = tui_tab_width;\n+\n+\t  --column;\n+\t  for (int j = column % max_tab_len;\n+\t       j < max_tab_len && column < first_col + line_width;\n+\t       column++, j++)\n+\t    if (column >= first_col)\n+\t      result.push_back (' ');\n+\t};\n+\n       /* We have to process all the text in order to pick up all the\n \t escapes.  */\n-      if (column < first_col || column > first_col + line_width)\n-\tcontinue;\n+      if (column <= first_col || column > first_col + line_width)\n+\t{\n+\t  if (c == '\\t')\n+\t    process_tab ();\n+\t  continue;\n+\t}\n \n       if (c == '\\n' || c == '\\r' || c == '\\0')\n \t{\n@@ -91,14 +108,7 @@ copy_source_line (const char **ptr, int line_no, int first_col,\n \t  result.push_back ('?');\n \t}\n       else if (c == '\\t')\n-\t{\n-\t  int j, max_tab_len = tui_tab_width;\n-\n-\t  for (j = column - ((column / max_tab_len) * max_tab_len);\n-\t       j < max_tab_len && column < first_col + line_width;\n-\t       column++, j++)\n-\t    result.push_back (' ');\n-\t}\n+\tprocess_tab ();\n       else\n \tresult.push_back (c);\n     }"
    }
  ]
}