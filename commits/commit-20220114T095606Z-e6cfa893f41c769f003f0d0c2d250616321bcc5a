{
  "sha": "e6cfa893f41c769f003f0d0c2d250616321bcc5a",
  "node_id": "C_kwDOANOeidoAKGU2Y2ZhODkzZjQxYzc2OWYwMDNmMGQwYzJkMjUwNjE2MzIxYmNjNWE",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2022-01-14T09:56:06Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2022-01-14T09:56:06Z"
    },
    "message": "x86: share yet more VEX table entries with EVEX decoding\n\nOn top of prior similar work more opportunities have appeared in the\nmeantime. Note that this also happens to address the prior lack of\ndecoding of EVEX.L'L for VMOV{L,H}P{S,D} and VMOV{LH,HL}PS.",
    "tree": {
      "sha": "27aade75714b5d5bda42e0f54a06b2efaf03f668",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/27aade75714b5d5bda42e0f54a06b2efaf03f668"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e6cfa893f41c769f003f0d0c2d250616321bcc5a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6cfa893f41c769f003f0d0c2d250616321bcc5a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e6cfa893f41c769f003f0d0c2d250616321bcc5a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6cfa893f41c769f003f0d0c2d250616321bcc5a/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "928c8d70c82feea45683b43e324cd2079d4ee31d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/928c8d70c82feea45683b43e324cd2079d4ee31d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/928c8d70c82feea45683b43e324cd2079d4ee31d"
    }
  ],
  "stats": {
    "total": 278,
    "additions": 69,
    "deletions": 209
  },
  "files": [
    {
      "sha": "b3af48e421d9e2f551020e2c55edb1f4c5f3b96b",
      "filename": "opcodes/i386-dis-evex-mod.h",
      "status": "modified",
      "additions": 0,
      "deletions": 30,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6cfa893f41c769f003f0d0c2d250616321bcc5a/opcodes/i386-dis-evex-mod.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6cfa893f41c769f003f0d0c2d250616321bcc5a/opcodes/i386-dis-evex-mod.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-mod.h?ref=e6cfa893f41c769f003f0d0c2d250616321bcc5a",
      "patch": "@@ -1,33 +1,3 @@\n-  {\n-    /* MOD_EVEX_0F12_PREFIX_0 */\n-    { \"vmovlpX\",\t{ XMM, Vex, EXq }, PREFIX_OPCODE },\n-    { \"vmovhlp%XS\",\t{ XMM, Vex, EXq }, 0 },\n-  },\n-  {\n-    /* MOD_EVEX_0F12_PREFIX_2 */\n-    { \"vmovlpX\",\t{ XMM, Vex, EXq }, PREFIX_OPCODE },\n-  },\n-  {\n-    /* MOD_EVEX_0F13 */\n-    { \"vmovlpX\",\t{ EXq, XMM }, PREFIX_OPCODE },\n-  },\n-  {\n-    /* MOD_EVEX_0F16_PREFIX_0 */\n-    { \"vmovhpX\",\t{ XMM, Vex, EXq }, PREFIX_OPCODE },\n-    { \"vmovlhp%XS\",\t{ XMM, Vex, EXq }, 0 },\n-  },\n-  {\n-    /* MOD_EVEX_0F16_PREFIX_2 */\n-    { \"vmovhpX\",\t{ XMM, Vex, EXq }, PREFIX_OPCODE },\n-  },\n-  {\n-    /* MOD_EVEX_0F17 */\n-    { \"vmovhpX\",\t{ EXq, XMM }, PREFIX_OPCODE },\n-  },\n-  {\n-    /* MOD_EVEX_0F2B */\n-    { \"vmovntpX\",\t{ EXx, XM }, PREFIX_OPCODE },\n-  },\n   /* MOD_EVEX_0F381A */\n   {\n     { EVEX_LEN_TABLE (EVEX_LEN_0F381A_M_0) },"
    },
    {
      "sha": "7c2fb484f95d594b486303301fda90554572e6e8",
      "filename": "opcodes/i386-dis-evex-prefix.h",
      "status": "modified",
      "additions": 0,
      "deletions": 90,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6cfa893f41c769f003f0d0c2d250616321bcc5a/opcodes/i386-dis-evex-prefix.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6cfa893f41c769f003f0d0c2d250616321bcc5a/opcodes/i386-dis-evex-prefix.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-prefix.h?ref=e6cfa893f41c769f003f0d0c2d250616321bcc5a",
      "patch": "@@ -1,99 +1,9 @@\n-  /* PREFIX_EVEX_0F10 */\n-  {\n-    { \"vmovupX\",\t{ XM, EXEvexXNoBcst }, PREFIX_OPCODE },\n-    { \"vmovs%XS\",\t{ XMScalar, VexScalarR, EXd }, 0 },\n-    { \"vmovupX\",\t{ XM, EXEvexXNoBcst }, PREFIX_OPCODE },\n-    { \"vmovs%XD\",\t{ XMScalar, VexScalarR, EXq }, 0 },\n-  },\n-  /* PREFIX_EVEX_0F11 */\n-  {\n-    { \"vmovupX\",\t{ EXxS, XM }, PREFIX_OPCODE },\n-    { \"vmovs%XS\",\t{ EXdS, VexScalarR, XMScalar }, 0 },\n-    { \"vmovupX\",\t{ EXxS, XM }, PREFIX_OPCODE },\n-    { \"vmovs%XD\",\t{ EXqS, VexScalarR, XMScalar }, 0 },\n-  },\n-  /* PREFIX_EVEX_0F12 */\n-  {\n-    { MOD_TABLE (MOD_EVEX_0F12_PREFIX_0) },\n-    { \"vmov%XSldup\", { XM, EXEvexXNoBcst }, 0 },\n-    { MOD_TABLE (MOD_EVEX_0F12_PREFIX_2) },\n-    { \"vmov%XDdup\",\t{ XM, EXymmq }, 0 },\n-  },\n-  /* PREFIX_EVEX_0F16 */\n-  {\n-    { MOD_TABLE (MOD_EVEX_0F16_PREFIX_0) },\n-    { \"vmov%XShdup\", { XM, EXEvexXNoBcst }, 0 },\n-    { MOD_TABLE (MOD_EVEX_0F16_PREFIX_2) },\n-  },\n-  /* PREFIX_EVEX_0F2A */\n-  {\n-    { Bad_Opcode },\n-    { \"vcvtsi2ss{%LQ|}\",\t{ XMScalar, VexScalar, EXxEVexR, Edq }, 0 },\n-    { Bad_Opcode },\n-    { \"vcvtsi2sd{%LQ|}\",\t{ XMScalar, VexScalar, EXxEVexR64, Edq }, 0 },\n-  },\n-  /* PREFIX_EVEX_0F51 */\n-  {\n-    { \"vsqrtpX\",\t{ XM, EXx, EXxEVexR }, PREFIX_OPCODE },\n-    { \"vsqrts%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n-    { \"vsqrtpX\",\t{ XM, EXx, EXxEVexR }, PREFIX_OPCODE },\n-    { \"vsqrts%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n-  },\n-  /* PREFIX_EVEX_0F58 */\n-  {\n-    { \"vaddpX\",\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n-    { \"vadds%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n-    { \"vaddpX\",\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n-    { \"vadds%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n-  },\n-  /* PREFIX_EVEX_0F59 */\n-  {\n-    { \"vmulpX\",\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n-    { \"vmuls%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n-    { \"vmulpX\",\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n-    { \"vmuls%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n-  },\n-  /* PREFIX_EVEX_0F5A */\n-  {\n-    { \"vcvtp%XS2pd\", { XM, EXEvexHalfBcstXmmq, EXxEVexS }, 0 },\n-    { \"vcvts%XS2sd\", { XMScalar, VexScalar, EXd, EXxEVexS }, 0 },\n-    { \"vcvtp%XD2ps%XY\", { XMxmmq, EXx, EXxEVexR }, 0 },\n-    { \"vcvts%XD2ss\", { XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n-  },\n   /* PREFIX_EVEX_0F5B */\n   {\n     { VEX_W_TABLE (EVEX_W_0F5B_P_0) },\n     { \"vcvttp%XS2dq\", { XM, EXx, EXxEVexS }, 0 },\n     { \"vcvtp%XS2dq\", { XM, EXx, EXxEVexR }, 0 },\n   },\n-  /* PREFIX_EVEX_0F5C */\n-  {\n-    { \"vsubpX\",\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n-    { \"vsubs%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n-    { \"vsubpX\",\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n-    { \"vsubs%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n-  },\n-  /* PREFIX_EVEX_0F5D */\n-  {\n-    { \"vminpX\",\t{ XM, Vex, EXx, EXxEVexS }, PREFIX_OPCODE },\n-    { \"vmins%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexS }, 0 },\n-    { \"vminpX\",\t{ XM, Vex, EXx, EXxEVexS }, PREFIX_OPCODE },\n-    { \"vmins%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexS }, 0 },\n-  },\n-  /* PREFIX_EVEX_0F5E */\n-  {\n-    { \"vdivpX\",\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n-    { \"vdivs%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n-    { \"vdivpX\",\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n-    { \"vdivs%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n-  },\n-  /* PREFIX_EVEX_0F5F */\n-  {\n-    { \"vmaxpX\",\t{ XM, Vex, EXx, EXxEVexS }, PREFIX_OPCODE },\n-    { \"vmaxs%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexS }, 0 },\n-    { \"vmaxpX\",\t{ XM, Vex, EXx, EXxEVexS }, PREFIX_OPCODE },\n-    { \"vmaxs%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexS }, 0 },\n-  },\n   /* PREFIX_EVEX_0F6F */\n   {\n     { Bad_Opcode },"
    },
    {
      "sha": "176529a475c77c359aef0183d2cdc9d32473365c",
      "filename": "opcodes/i386-dis-evex.h",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6cfa893f41c769f003f0d0c2d250616321bcc5a/opcodes/i386-dis-evex.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6cfa893f41c769f003f0d0c2d250616321bcc5a/opcodes/i386-dis-evex.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex.h?ref=e6cfa893f41c769f003f0d0c2d250616321bcc5a",
      "patch": "@@ -20,14 +20,14 @@ static const struct dis386 evex_table[][256] = {\n     { Bad_Opcode },\n     { Bad_Opcode },\n     /* 10 */\n-    { PREFIX_TABLE (PREFIX_EVEX_0F10) },\n-    { PREFIX_TABLE (PREFIX_EVEX_0F11) },\n-    { PREFIX_TABLE (PREFIX_EVEX_0F12) },\n-    { MOD_TABLE (MOD_EVEX_0F13) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F10) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F11) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F12) },\n+    { MOD_TABLE (MOD_VEX_0F13) },\n     { \"vunpcklpX\",\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n     { \"vunpckhpX\",\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n-    { PREFIX_TABLE (PREFIX_EVEX_0F16) },\n-    { MOD_TABLE (MOD_EVEX_0F17) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F16) },\n+    { MOD_TABLE (MOD_VEX_0F17) },\n     /* 18 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -49,8 +49,8 @@ static const struct dis386 evex_table[][256] = {\n     /* 28 */\n     { \"vmovapX\",\t{ XM, EXx }, PREFIX_OPCODE },\n     { \"vmovapX\",\t{ EXxS, XM }, PREFIX_OPCODE },\n-    { PREFIX_TABLE (PREFIX_EVEX_0F2A) },\n-    { MOD_TABLE (MOD_EVEX_0F2B) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F2A) },\n+    { MOD_TABLE (MOD_VEX_0F2B) },\n     { PREFIX_TABLE (PREFIX_VEX_0F2C) },\n     { PREFIX_TABLE (PREFIX_VEX_0F2D) },\n     { PREFIX_TABLE (PREFIX_VEX_0F2E) },\n@@ -93,22 +93,22 @@ static const struct dis386 evex_table[][256] = {\n     { Bad_Opcode },\n     /* 50 */\n     { Bad_Opcode },\n-    { PREFIX_TABLE (PREFIX_EVEX_0F51) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F51) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { \"vandpX\",\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n     { \"vandnpX\",\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n     { \"vorpX\",\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n     { \"vxorpX\",\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n     /* 58 */\n-    { PREFIX_TABLE (PREFIX_EVEX_0F58) },\n-    { PREFIX_TABLE (PREFIX_EVEX_0F59) },\n-    { PREFIX_TABLE (PREFIX_EVEX_0F5A) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F58) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F59) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F5A) },\n     { PREFIX_TABLE (PREFIX_EVEX_0F5B) },\n-    { PREFIX_TABLE (PREFIX_EVEX_0F5C) },\n-    { PREFIX_TABLE (PREFIX_EVEX_0F5D) },\n-    { PREFIX_TABLE (PREFIX_EVEX_0F5E) },\n-    { PREFIX_TABLE (PREFIX_EVEX_0F5F) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F5C) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F5D) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F5E) },\n+    { PREFIX_TABLE (PREFIX_VEX_0F5F) },\n     /* 60 */\n     { \"vpunpcklbw\",\t{ XM, Vex, EXx }, PREFIX_DATA },\n     { \"vpunpcklwd\",\t{ XM, Vex, EXx }, PREFIX_DATA },"
    },
    {
      "sha": "1c31f9ee30c252a84aa4e133709e3aad6597cad1",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 53,
      "deletions": 73,
      "changes": 126,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6cfa893f41c769f003f0d0c2d250616321bcc5a/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6cfa893f41c769f003f0d0c2d250616321bcc5a/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=e6cfa893f41c769f003f0d0c2d250616321bcc5a",
      "patch": "@@ -955,13 +955,6 @@ enum\n \n   MOD_XOP_09_12,\n \n-  MOD_EVEX_0F12_PREFIX_0,\n-  MOD_EVEX_0F12_PREFIX_2,\n-  MOD_EVEX_0F13,\n-  MOD_EVEX_0F16_PREFIX_0,\n-  MOD_EVEX_0F16_PREFIX_2,\n-  MOD_EVEX_0F17,\n-  MOD_EVEX_0F2B,\n   MOD_EVEX_0F381A,\n   MOD_EVEX_0F381B,\n   MOD_EVEX_0F3828_P_1,\n@@ -1153,20 +1146,7 @@ enum\n   PREFIX_VEX_0F38F7_L_0,\n   PREFIX_VEX_0F3AF0_L_0,\n \n-  PREFIX_EVEX_0F10,\n-  PREFIX_EVEX_0F11,\n-  PREFIX_EVEX_0F12,\n-  PREFIX_EVEX_0F16,\n-  PREFIX_EVEX_0F2A,\n-  PREFIX_EVEX_0F51,\n-  PREFIX_EVEX_0F58,\n-  PREFIX_EVEX_0F59,\n-  PREFIX_EVEX_0F5A,\n   PREFIX_EVEX_0F5B,\n-  PREFIX_EVEX_0F5C,\n-  PREFIX_EVEX_0F5D,\n-  PREFIX_EVEX_0F5E,\n-  PREFIX_EVEX_0F5F,\n   PREFIX_EVEX_0F6F,\n   PREFIX_EVEX_0F70,\n   PREFIX_EVEX_0F78,\n@@ -1783,9 +1763,9 @@ struct dis386 {\n    \"XZ\" => print 'x', 'y', or 'z' if suffix_always is true or no\n \t   register operands and no broadcast.\n    \"XW\" => print 's', 'd' depending on the VEX.W bit (for FMA)\n-   \"XD\" => print 'd' if EVEX.W=1, EVEX.W=0 is not a valid encoding\n+   \"XD\" => print 'd' if !EVEX or EVEX.W=1, EVEX.W=0 is not a valid encoding\n    \"XH\" => print 'h' if EVEX.W=0, EVEX.W=1 is not a valid encoding (for FP16)\n-   \"XS\" => print 's' if EVEX.W=0, EVEX.W=1 is not a valid encoding\n+   \"XS\" => print 's' if !EVEX or EVEX.W=0, EVEX.W=1 is not a valid encoding\n    \"XV\" => print \"{vex3}\" pseudo prefix\n    \"LQ\" => print 'l' ('d' in Intel mode) or 'q' for memory operand, cond\n \t   being false, or no operand at all in 64bit mode, or if suffix_always\n@@ -3661,41 +3641,41 @@ static const struct dis386 prefix_table[][4] = {\n \n   /* PREFIX_VEX_0F10 */\n   {\n-    { \"vmovups\",\t{ XM, EXx }, 0 },\n-    { \"vmovss\",\t\t{ XMScalar, VexScalarR, EXd }, 0 },\n-    { \"vmovupd\",\t{ XM, EXx }, 0 },\n-    { \"vmovsd\",\t\t{ XMScalar, VexScalarR, EXq }, 0 },\n+    { \"vmovupX\",\t{ XM, EXEvexXNoBcst }, PREFIX_OPCODE },\n+    { \"vmovs%XS\",\t{ XMScalar, VexScalarR, EXd }, 0 },\n+    { \"vmovupX\",\t{ XM, EXEvexXNoBcst }, PREFIX_OPCODE },\n+    { \"vmovs%XD\",\t{ XMScalar, VexScalarR, EXq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F11 */\n   {\n-    { \"vmovups\",\t{ EXxS, XM }, 0 },\n-    { \"vmovss\",\t\t{ EXdS, VexScalarR, XMScalar }, 0 },\n-    { \"vmovupd\",\t{ EXxS, XM }, 0 },\n-    { \"vmovsd\",\t\t{ EXqS, VexScalarR, XMScalar }, 0 },\n+    { \"vmovupX\",\t{ EXxS, XM }, PREFIX_OPCODE },\n+    { \"vmovs%XS\",\t{ EXdS, VexScalarR, XMScalar }, 0 },\n+    { \"vmovupX\",\t{ EXxS, XM }, PREFIX_OPCODE },\n+    { \"vmovs%XD\",\t{ EXqS, VexScalarR, XMScalar }, 0 },\n   },\n \n   /* PREFIX_VEX_0F12 */\n   {\n     { MOD_TABLE (MOD_VEX_0F12_PREFIX_0) },\n-    { \"vmovsldup\",\t{ XM, EXx }, 0 },\n+    { \"vmov%XSldup\",\t{ XM, EXEvexXNoBcst }, 0 },\n     { MOD_TABLE (MOD_VEX_0F12_PREFIX_2) },\n-    { \"vmovddup\",\t{ XM, EXymmq }, 0 },\n+    { \"vmov%XDdup\",\t{ XM, EXymmq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F16 */\n   {\n     { MOD_TABLE (MOD_VEX_0F16_PREFIX_0) },\n-    { \"vmovshdup\",\t{ XM, EXx }, 0 },\n+    { \"vmov%XShdup\",\t{ XM, EXEvexXNoBcst }, 0 },\n     { MOD_TABLE (MOD_VEX_0F16_PREFIX_2) },\n   },\n \n   /* PREFIX_VEX_0F2A */\n   {\n     { Bad_Opcode },\n-    { \"vcvtsi2ss{%LQ|}\",\t{ XMScalar, VexScalar, Edq }, 0 },\n+    { \"vcvtsi2ss{%LQ|}\",\t{ XMScalar, VexScalar, EXxEVexR, Edq }, 0 },\n     { Bad_Opcode },\n-    { \"vcvtsi2sd{%LQ|}\",\t{ XMScalar, VexScalar, Edq }, 0 },\n+    { \"vcvtsi2sd{%LQ|}\",\t{ XMScalar, VexScalar, EXxEVexR64, Edq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F2C */\n@@ -3840,10 +3820,10 @@ static const struct dis386 prefix_table[][4] = {\n \n   /* PREFIX_VEX_0F51 */\n   {\n-    { \"vsqrtps\",\t{ XM, EXx }, 0 },\n-    { \"vsqrtss\",\t{ XMScalar, VexScalar, EXd }, 0 },\n-    { \"vsqrtpd\",\t{ XM, EXx }, 0 },\n-    { \"vsqrtsd\",\t{ XMScalar, VexScalar, EXq }, 0 },\n+    { \"vsqrtpX\",\t{ XM, EXx, EXxEVexR }, PREFIX_OPCODE },\n+    { \"vsqrts%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n+    { \"vsqrtpX\",\t{ XM, EXx, EXxEVexR }, PREFIX_OPCODE },\n+    { \"vsqrts%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n \n   /* PREFIX_VEX_0F52 */\n@@ -3860,26 +3840,26 @@ static const struct dis386 prefix_table[][4] = {\n \n   /* PREFIX_VEX_0F58 */\n   {\n-    { \"vaddps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vaddss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n-    { \"vaddpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vaddsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n+    { \"vaddpX\",\t\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n+    { \"vadds%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n+    { \"vaddpX\",\t\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n+    { \"vadds%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n \n   /* PREFIX_VEX_0F59 */\n   {\n-    { \"vmulps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmulss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n-    { \"vmulpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmulsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n+    { \"vmulpX\",\t\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n+    { \"vmuls%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n+    { \"vmulpX\",\t\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n+    { \"vmuls%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5A */\n   {\n-    { \"vcvtps2pd\",\t{ XM, EXxmmq }, 0 },\n-    { \"vcvtss2sd\",\t{ XMScalar, VexScalar, EXd }, 0 },\n-    { \"vcvtpd2ps%XY\",{ XMM, EXx }, 0 },\n-    { \"vcvtsd2ss\",\t{ XMScalar, VexScalar, EXq }, 0 },\n+    { \"vcvtp%XS2pd\", { XM, EXEvexHalfBcstXmmq, EXxEVexS }, 0 },\n+    { \"vcvts%XS2sd\", { XMScalar, VexScalar, EXd, EXxEVexS }, 0 },\n+    { \"vcvtp%XD2ps%XY\", { XMxmmq, EXx, EXxEVexR }, 0 },\n+    { \"vcvts%XD2ss\", { XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5B */\n@@ -3891,34 +3871,34 @@ static const struct dis386 prefix_table[][4] = {\n \n   /* PREFIX_VEX_0F5C */\n   {\n-    { \"vsubps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vsubss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n-    { \"vsubpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vsubsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n+    { \"vsubpX\",\t\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n+    { \"vsubs%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n+    { \"vsubpX\",\t\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n+    { \"vsubs%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5D */\n   {\n-    { \"vminps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vminss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n-    { \"vminpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vminsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n+    { \"vminpX\",\t\t{ XM, Vex, EXx, EXxEVexS }, PREFIX_OPCODE },\n+    { \"vmins%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexS }, 0 },\n+    { \"vminpX\",\t\t{ XM, Vex, EXx, EXxEVexS }, PREFIX_OPCODE },\n+    { \"vmins%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexS }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5E */\n   {\n-    { \"vdivps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vdivss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n-    { \"vdivpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vdivsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n+    { \"vdivpX\",\t\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n+    { \"vdivs%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexR }, 0 },\n+    { \"vdivpX\",\t\t{ XM, Vex, EXx, EXxEVexR }, PREFIX_OPCODE },\n+    { \"vdivs%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexR }, 0 },\n   },\n \n   /* PREFIX_VEX_0F5F */\n   {\n-    { \"vmaxps\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmaxss\",\t\t{ XMScalar, VexScalar, EXd }, 0 },\n-    { \"vmaxpd\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vmaxsd\",\t\t{ XMScalar, VexScalar, EXq }, 0 },\n+    { \"vmaxpX\",\t\t{ XM, Vex, EXx, EXxEVexS }, PREFIX_OPCODE },\n+    { \"vmaxs%XS\",\t{ XMScalar, VexScalar, EXd, EXxEVexS }, 0 },\n+    { \"vmaxpX\",\t\t{ XM, Vex, EXx, EXxEVexS }, PREFIX_OPCODE },\n+    { \"vmaxs%XD\",\t{ XMScalar, VexScalar, EXq, EXxEVexS }, 0 },\n   },\n \n   /* PREFIX_VEX_0F6F */\n@@ -6777,12 +6757,12 @@ static const struct dis386 vex_table[][256] = {\n static const struct dis386 vex_len_table[][2] = {\n   /* VEX_LEN_0F12_P_0_M_0 / VEX_LEN_0F12_P_2_M_0 */\n   {\n-    { \"vmovlpX\",\t{ XM, Vex, EXq }, 0 },\n+    { \"vmovlpX\",\t{ XM, Vex, EXq }, PREFIX_OPCODE },\n   },\n \n   /* VEX_LEN_0F12_P_0_M_1 */\n   {\n-    { \"vmovhlps\",\t{ XM, Vex, EXq }, 0 },\n+    { \"vmovhlp%XS\",\t{ XM, Vex, EXq }, 0 },\n   },\n \n   /* VEX_LEN_0F13_M_0 */\n@@ -6792,12 +6772,12 @@ static const struct dis386 vex_len_table[][2] = {\n \n   /* VEX_LEN_0F16_P_0_M_0 / VEX_LEN_0F16_P_2_M_0 */\n   {\n-    { \"vmovhpX\",\t{ XM, Vex, EXq }, 0 },\n+    { \"vmovhpX\",\t{ XM, Vex, EXq }, PREFIX_OPCODE },\n   },\n \n   /* VEX_LEN_0F16_P_0_M_1 */\n   {\n-    { \"vmovlhps\",\t{ XM, Vex, EXq }, 0 },\n+    { \"vmovlhp%XS\",\t{ XM, Vex, EXq }, 0 },\n   },\n \n   /* VEX_LEN_0F17_M_0 */\n@@ -10446,7 +10426,7 @@ putop (instr_info *ins, const char *in_template, int sizeflag)\n \t      switch (last[0])\n \t      {\n \t      case 'X':\n-\t\tif (ins->vex.w)\n+\t\tif (!ins->vex.evex || ins->vex.w)\n \t\t  *ins->obufp++ = 'd';\n \t\telse\n \t\t  oappend (ins, \"{bad}\");\n@@ -10725,7 +10705,7 @@ putop (instr_info *ins, const char *in_template, int sizeflag)\n \n \t      goto case_S;\n \t    case 'X':\n-\t      if (!ins->vex.w)\n+\t      if (!ins->vex.evex || !ins->vex.w)\n \t\t*ins->obufp++ = 's';\n \t      else\n \t\toappend (ins, \"{bad}\");"
    }
  ]
}