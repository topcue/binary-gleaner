{
  "sha": "adccc50753467ac66573471f180a60d8d96ce223",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWRjY2M1MDc1MzQ2N2FjNjY1NzM0NzFmMTgwYTYwZDhkOTZjZTIyMw==",
  "commit": {
    "author": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-05-09T09:29:15Z"
    },
    "committer": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-05-09T09:29:15Z"
    },
    "message": "[binutils][aarch64] Introduce SVE_IMM_ROT3 operand.\n\nNew operand AARCH64_OPND_SVE_IMM_ROT3 handles a single bit rotate\noperand encoded at bit position 10.\n\ngas/ChangeLog:\n\n2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/tc-aarch64.c (parse_operands): Handle new SVE_IMM_ROT3 operand.\n\ninclude/ChangeLog:\n\n2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* opcode/aarch64.h (enum aarch64_opnd): New SVE_IMM_ROT3 operand.\n\nopcodes/ChangeLog:\n\n2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* aarch64-asm-2.c: Regenerated.\n\t* aarch64-dis-2.c: Regenerated.\n\t* aarch64-opc-2.c: Regenerated.\n\t* aarch64-opc.c (operand_general_constraint_met_p): Constraint checking\n\tfor SVE_IMM_ROT3.\n\t(aarch64_print_operand): Add printing for SVE_IMM_ROT3.\n\t(fields): Handle SVE_rot3 field.\n\t* aarch64-opc.h (enum aarch64_field_kind): New SVE_rot3 field.\n\t* aarch64-tbl.h (AARCH64_OPERANDS): Use new SVE_IMM_ROT3 operand.",
    "tree": {
      "sha": "c3f8777976a8b215ea877ac790918e5ee90d2e5a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c3f8777976a8b215ea877ac790918e5ee90d2e5a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/adccc50753467ac66573471f180a60d8d96ce223",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/adccc50753467ac66573471f180a60d8d96ce223",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/adccc50753467ac66573471f180a60d8d96ce223",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/adccc50753467ac66573471f180a60d8d96ce223/comments",
  "author": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5cd99750959f54fea9e7290ec850df6c96878b56",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5cd99750959f54fea9e7290ec850df6c96878b56",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5cd99750959f54fea9e7290ec850df6c96878b56"
    }
  ],
  "stats": {
    "total": 107,
    "additions": 69,
    "deletions": 38
  },
  "files": [
    {
      "sha": "ff3e49b14978ffd981c4c837181090da935e8e95",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adccc50753467ac66573471f180a60d8d96ce223/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adccc50753467ac66573471f180a60d8d96ce223/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=adccc50753467ac66573471f180a60d8d96ce223",
      "patch": "@@ -1,3 +1,7 @@\n+2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/tc-aarch64.c (parse_operands): Handle new SVE_IMM_ROT3 operand.\n+\n 2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* config/tc-aarch64.c: Add command line architecture feature flags"
    },
    {
      "sha": "9f3a958c74c0c27b8986b08290cdd54a4fc55654",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adccc50753467ac66573471f180a60d8d96ce223/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adccc50753467ac66573471f180a60d8d96ce223/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=adccc50753467ac66573471f180a60d8d96ce223",
      "patch": "@@ -5782,6 +5782,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \tcase AARCH64_OPND_IMM_ROT3:\n \tcase AARCH64_OPND_SVE_IMM_ROT1:\n \tcase AARCH64_OPND_SVE_IMM_ROT2:\n+\tcase AARCH64_OPND_SVE_IMM_ROT3:\n \t  po_imm_nc_or_fail ();\n \t  info->imm.value = val;\n \t  break;"
    },
    {
      "sha": "14415ed90791b221964105dc6890bb085d54c650",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adccc50753467ac66573471f180a60d8d96ce223/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adccc50753467ac66573471f180a60d8d96ce223/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=adccc50753467ac66573471f180a60d8d96ce223",
      "patch": "@@ -1,3 +1,7 @@\n+2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* opcode/aarch64.h (enum aarch64_opnd): New SVE_IMM_ROT3 operand.\n+\n 2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* opcode/aarch64.h (AARCH64_FEATURE_SVE2"
    },
    {
      "sha": "e3924991f0b781571ca20633557bc68fd42daac7",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adccc50753467ac66573471f180a60d8d96ce223/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adccc50753467ac66573471f180a60d8d96ce223/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=adccc50753467ac66573471f180a60d8d96ce223",
      "patch": "@@ -372,6 +372,7 @@ enum aarch64_opnd\n   AARCH64_OPND_SVE_I1_ZERO_ONE,\t/* SVE choice between 0.0 and 1.0.  */\n   AARCH64_OPND_SVE_IMM_ROT1,\t/* SVE 1-bit rotate operand (90 or 270).  */\n   AARCH64_OPND_SVE_IMM_ROT2,\t/* SVE 2-bit rotate operand (N*90).  */\n+  AARCH64_OPND_SVE_IMM_ROT3,\t/* SVE cadd 1-bit rotate (90 or 270).  */\n   AARCH64_OPND_SVE_INV_LIMM,\t/* SVE inverted logical immediate.  */\n   AARCH64_OPND_SVE_LIMM,\t/* SVE logical immediate.  */\n   AARCH64_OPND_SVE_LIMM_MOV,\t/* SVE logical immediate for MOV.  */"
    },
    {
      "sha": "a1a842d225bb13a36af8721eba0f4854f9fcc861",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adccc50753467ac66573471f180a60d8d96ce223/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adccc50753467ac66573471f180a60d8d96ce223/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=adccc50753467ac66573471f180a60d8d96ce223",
      "patch": "@@ -1,3 +1,15 @@\n+2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* aarch64-asm-2.c: Regenerated.\n+\t* aarch64-dis-2.c: Regenerated.\n+\t* aarch64-opc-2.c: Regenerated.\n+\t* aarch64-opc.c (operand_general_constraint_met_p): Constraint checking\n+\tfor SVE_IMM_ROT3.\n+\t(aarch64_print_operand): Add printing for SVE_IMM_ROT3.\n+\t(fields): Handle SVE_rot3 field.\n+\t* aarch64-opc.h (enum aarch64_field_kind): New SVE_rot3 field.\n+\t* aarch64-tbl.h (AARCH64_OPERANDS): Use new SVE_IMM_ROT3 operand.\n+\n 2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* aarch64-opc.c (verify_constraints): Check for movprfx for sve2"
    },
    {
      "sha": "dbfb4315d1bbc968b8f481c76e290d07827a41b3",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 20,
      "deletions": 19,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=adccc50753467ac66573471f180a60d8d96ce223",
      "patch": "@@ -628,7 +628,6 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 28:\n     case 29:\n     case 30:\n-    case 160:\n     case 161:\n     case 162:\n     case 163:\n@@ -638,7 +637,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 167:\n     case 168:\n     case 169:\n-    case 182:\n+    case 170:\n     case 183:\n     case 184:\n     case 185:\n@@ -647,8 +646,9 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 188:\n     case 189:\n     case 190:\n-    case 194:\n-    case 197:\n+    case 191:\n+    case 195:\n+    case 198:\n       return aarch64_ins_regno (self, info, code, inst, errors);\n     case 14:\n       return aarch64_ins_reg_extended (self, info, code, inst, errors);\n@@ -660,7 +660,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 32:\n     case 33:\n     case 34:\n-    case 200:\n+    case 201:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 35:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -694,17 +694,17 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 80:\n     case 81:\n     case 82:\n-    case 157:\n-    case 159:\n-    case 174:\n+    case 158:\n+    case 160:\n     case 175:\n     case 176:\n     case 177:\n     case 178:\n     case 179:\n     case 180:\n     case 181:\n-    case 199:\n+    case 182:\n+    case 200:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 43:\n     case 44:\n@@ -717,7 +717,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 148:\n       return aarch64_ins_fpimm (self, info, code, inst, errors);\n     case 68:\n-    case 155:\n+    case 156:\n       return aarch64_ins_limm (self, info, code, inst, errors);\n     case 69:\n       return aarch64_ins_aimm (self, info, code, inst, errors);\n@@ -731,6 +731,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n       return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);\n     case 75:\n     case 152:\n+    case 154:\n       return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);\n     case 76:\n     case 77:\n@@ -832,26 +833,26 @@ aarch64_insert_operand (const aarch64_operand *self,\n       return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n     case 151:\n       return aarch64_ins_sve_float_zero_one (self, info, code, inst, errors);\n-    case 154:\n+    case 155:\n       return aarch64_ins_inv_limm (self, info, code, inst, errors);\n-    case 156:\n+    case 157:\n       return aarch64_ins_sve_limm_mov (self, info, code, inst, errors);\n-    case 158:\n+    case 159:\n       return aarch64_ins_sve_scale (self, info, code, inst, errors);\n-    case 170:\n     case 171:\n-      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 172:\n+      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 173:\n+    case 174:\n       return aarch64_ins_sve_shrimm (self, info, code, inst, errors);\n-    case 191:\n     case 192:\n     case 193:\n+    case 194:\n       return aarch64_ins_sve_quad_index (self, info, code, inst, errors);\n-    case 195:\n-      return aarch64_ins_sve_index (self, info, code, inst, errors);\n     case 196:\n-    case 198:\n+      return aarch64_ins_sve_index (self, info, code, inst, errors);\n+    case 197:\n+    case 199:\n       return aarch64_ins_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "dc3721251326dce939e584b4a64804da91bcd233",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 20,
      "deletions": 19,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=adccc50753467ac66573471f180a60d8d96ce223",
      "patch": "@@ -20059,7 +20059,6 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 28:\n     case 29:\n     case 30:\n-    case 160:\n     case 161:\n     case 162:\n     case 163:\n@@ -20069,7 +20068,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 167:\n     case 168:\n     case 169:\n-    case 182:\n+    case 170:\n     case 183:\n     case 184:\n     case 185:\n@@ -20078,8 +20077,9 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 188:\n     case 189:\n     case 190:\n-    case 194:\n-    case 197:\n+    case 191:\n+    case 195:\n+    case 198:\n       return aarch64_ext_regno (self, info, code, inst, errors);\n     case 9:\n       return aarch64_ext_regrt_sysins (self, info, code, inst, errors);\n@@ -20095,7 +20095,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 32:\n     case 33:\n     case 34:\n-    case 200:\n+    case 201:\n       return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 35:\n       return aarch64_ext_reglist (self, info, code, inst, errors);\n@@ -20130,17 +20130,17 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 80:\n     case 81:\n     case 82:\n-    case 157:\n-    case 159:\n-    case 174:\n+    case 158:\n+    case 160:\n     case 175:\n     case 176:\n     case 177:\n     case 178:\n     case 179:\n     case 180:\n     case 181:\n-    case 199:\n+    case 182:\n+    case 200:\n       return aarch64_ext_imm (self, info, code, inst, errors);\n     case 43:\n     case 44:\n@@ -20155,7 +20155,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 148:\n       return aarch64_ext_fpimm (self, info, code, inst, errors);\n     case 68:\n-    case 155:\n+    case 156:\n       return aarch64_ext_limm (self, info, code, inst, errors);\n     case 69:\n       return aarch64_ext_aimm (self, info, code, inst, errors);\n@@ -20169,6 +20169,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n       return aarch64_ext_imm_rotate2 (self, info, code, inst, errors);\n     case 75:\n     case 152:\n+    case 154:\n       return aarch64_ext_imm_rotate1 (self, info, code, inst, errors);\n     case 76:\n     case 77:\n@@ -20270,26 +20271,26 @@ aarch64_extract_operand (const aarch64_operand *self,\n       return aarch64_ext_sve_float_half_two (self, info, code, inst, errors);\n     case 151:\n       return aarch64_ext_sve_float_zero_one (self, info, code, inst, errors);\n-    case 154:\n+    case 155:\n       return aarch64_ext_inv_limm (self, info, code, inst, errors);\n-    case 156:\n+    case 157:\n       return aarch64_ext_sve_limm_mov (self, info, code, inst, errors);\n-    case 158:\n+    case 159:\n       return aarch64_ext_sve_scale (self, info, code, inst, errors);\n-    case 170:\n     case 171:\n-      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);\n     case 172:\n+      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);\n     case 173:\n+    case 174:\n       return aarch64_ext_sve_shrimm (self, info, code, inst, errors);\n-    case 191:\n     case 192:\n     case 193:\n+    case 194:\n       return aarch64_ext_sve_quad_index (self, info, code, inst, errors);\n-    case 195:\n-      return aarch64_ext_sve_index (self, info, code, inst, errors);\n     case 196:\n-    case 198:\n+      return aarch64_ext_sve_index (self, info, code, inst, errors);\n+    case 197:\n+    case 199:\n       return aarch64_ext_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "9f9e0003db7570e8bbdd6fe622dbc8ac5354385c",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=adccc50753467ac66573471f180a60d8d96ce223",
      "patch": "@@ -178,6 +178,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_I1_ZERO_ONE\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_i1}, \"either 0.0 or 1.0\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_IMM_ROT1\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_rot1}, \"a 1-bit rotation specifier for complex arithmetic operations\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_IMM_ROT2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_rot2}, \"a 2-bit rotation specifier for complex arithmetic operations\"},\n+  {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_IMM_ROT3\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_rot3}, \"a 1-bit rotation specifier for complex arithmetic operations\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_INV_LIMM\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_N,FLD_SVE_immr,FLD_SVE_imms}, \"an inverted 13-bit logical immediate\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_LIMM\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_N,FLD_SVE_immr,FLD_SVE_imms}, \"a 13-bit logical immediate\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_LIMM_MOV\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_N,FLD_SVE_immr,FLD_SVE_imms}, \"a 13-bit logical move immediate\"},"
    },
    {
      "sha": "eb3a1e400d148170a7b526eb14b10c737912e636",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=adccc50753467ac66573471f180a60d8d96ce223",
      "patch": "@@ -309,6 +309,7 @@ const aarch64_field fields[] =\n     {  0,  4 }, /* SVE_prfop: prefetch operation for SVE PRF[BHWD].  */\n     { 16,  1 }, /* SVE_rot1: 1-bit rotation amount.  */\n     { 10,  2 }, /* SVE_rot2: 2-bit rotation amount.  */\n+    { 10,  1 }, /* SVE_rot3: 1-bit rotation amount at bit 10.  */\n     { 22,  1 }, /* SVE_sz: 1-bit element size select.  */\n     { 16,  4 }, /* SVE_tsz: triangular size select.  */\n     { 22,  2 }, /* SVE_tszh: triangular size select high, bits [23,22].  */\n@@ -2231,6 +2232,7 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \n \tcase AARCH64_OPND_IMM_ROT3:\n \tcase AARCH64_OPND_SVE_IMM_ROT1:\n+\tcase AARCH64_OPND_SVE_IMM_ROT3:\n \t  if (opnd->imm.value != 90 && opnd->imm.value != 270)\n \t    {\n \t      set_other_error (mismatch_detail, idx,\n@@ -3346,6 +3348,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n     case AARCH64_OPND_IMM_ROT3:\n     case AARCH64_OPND_SVE_IMM_ROT1:\n     case AARCH64_OPND_SVE_IMM_ROT2:\n+    case AARCH64_OPND_SVE_IMM_ROT3:\n       snprintf (buf, size, \"#%\" PRIi64, opnd->imm.value);\n       break;\n "
    },
    {
      "sha": "b1060d459339b69fdf0fd77833effd4bc04bb809",
      "filename": "opcodes/aarch64-opc.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.h?ref=adccc50753467ac66573471f180a60d8d96ce223",
      "patch": "@@ -136,6 +136,7 @@ enum aarch64_field_kind\n   FLD_SVE_prfop,\n   FLD_SVE_rot1,\n   FLD_SVE_rot2,\n+  FLD_SVE_rot3,\n   FLD_SVE_sz,\n   FLD_SVE_tsz,\n   FLD_SVE_tszh,"
    },
    {
      "sha": "6be57f0a3499dbf94b9599406ec531c7441bb4b8",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adccc50753467ac66573471f180a60d8d96ce223/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=adccc50753467ac66573471f180a60d8d96ce223",
      "patch": "@@ -4879,6 +4879,8 @@ struct aarch64_opcode aarch64_opcode_table[] =\n       \"a 1-bit rotation specifier for complex arithmetic operations\")\t\\\n     Y(IMMEDIATE, imm_rotate2, \"SVE_IMM_ROT2\", 0, F(FLD_SVE_rot2),\t\\\n       \"a 2-bit rotation specifier for complex arithmetic operations\")\t\\\n+    Y(IMMEDIATE, imm_rotate1, \"SVE_IMM_ROT3\", 0, F(FLD_SVE_rot3),\t\\\n+      \"a 1-bit rotation specifier for complex arithmetic operations\")\t\\\n     Y(IMMEDIATE, inv_limm, \"SVE_INV_LIMM\", 0,\t\t\t\t\\\n       F(FLD_SVE_N,FLD_SVE_immr,FLD_SVE_imms),\t\t\t\t\\\n       \"an inverted 13-bit logical immediate\")\t\t\t\t\\"
    }
  ]
}