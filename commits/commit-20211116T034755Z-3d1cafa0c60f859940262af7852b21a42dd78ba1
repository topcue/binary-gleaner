{
  "sha": "3d1cafa0c60f859940262af7852b21a42dd78ba1",
  "node_id": "C_kwDOANOeidoAKDNkMWNhZmEwYzYwZjg1OTk0MDI2MmFmNzg1MmIyMWE0MmRkNzhiYTE",
  "commit": {
    "author": {
      "name": "jiawei",
      "email": "jiawei@iscas.ac.cn",
      "date": "2021-11-15T03:03:42Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-11-16T03:47:55Z"
    },
    "message": "RISC-V: Scalar crypto instructions and operand set.\n\nAdd instructions in k-ext, some instruction in zbkb, zbkc is reuse from\nzbb,zbc, we just change the class attribute to make them both support.\nThe 'aes64ks1i' and 'aes64ks2' instructions are present in both the Zknd\nand Zkne extensions on rv64.  Add new operand letter 'y' to present 'bs'\nsymbol and 'Y' to present 'rnum' symbolc  for zkn instructions.  Also add\na new Entropy Source CSR define 'seed' located at address 0x015.\n\nbfd/\n\t* elfxx-riscv.c (riscv_multi_subset_supports): Added support for\n\tcrypto extension.\ngas/\n\t*config/tc-riscv.c (enum riscv_csr_class): Added CSR_CLASS_ZKR.\n\t(riscv_csr_address): Checked for CSR_CLASS_ZKR.\n\t(validate_riscv_insn): Added y and Y for bs and rnum operands.\n\t(riscv_ip): Handle y and Y operands.\ninclude/\n\t* opcode/riscv-opc.h: Added encodings of crypto instructions.\n\tAlso defined new csr seed, which address is 0x15.\n\t* opcode/riscv.h: Defined OP_* and INSN_CLASS_* for crypto.\nopcodes/\n\t* riscv-dis.c (print_insn_args): Recognized new y and Y operands.\n\t* riscv-opc.c (riscv_opcodes): Added crypto instructions.",
    "tree": {
      "sha": "b80f2292a60b9442794b600dc6c635adf34236f0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b80f2292a60b9442794b600dc6c635adf34236f0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d1cafa0c60f859940262af7852b21a42dd78ba1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d1cafa0c60f859940262af7852b21a42dd78ba1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d1cafa0c60f859940262af7852b21a42dd78ba1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d1cafa0c60f859940262af7852b21a42dd78ba1/comments",
  "author": {
    "login": "pz9115",
    "id": 43362020,
    "node_id": "MDQ6VXNlcjQzMzYyMDIw",
    "avatar_url": "https://avatars.githubusercontent.com/u/43362020?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pz9115",
    "html_url": "https://github.com/pz9115",
    "followers_url": "https://api.github.com/users/pz9115/followers",
    "following_url": "https://api.github.com/users/pz9115/following{/other_user}",
    "gists_url": "https://api.github.com/users/pz9115/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pz9115/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pz9115/subscriptions",
    "organizations_url": "https://api.github.com/users/pz9115/orgs",
    "repos_url": "https://api.github.com/users/pz9115/repos",
    "events_url": "https://api.github.com/users/pz9115/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pz9115/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "dfdba097767e42f5163aeb5a97c4aa0084d44457",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dfdba097767e42f5163aeb5a97c4aa0084d44457",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dfdba097767e42f5163aeb5a97c4aa0084d44457"
    }
  ],
  "stats": {
    "total": 247,
    "additions": 227,
    "deletions": 20
  },
  "files": [
    {
      "sha": "e2fb4003380d4b3482f2b369fb182ebb69b278a5",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d1cafa0c60f859940262af7852b21a42dd78ba1/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d1cafa0c60f859940262af7852b21a42dd78ba1/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=3d1cafa0c60f859940262af7852b21a42dd78ba1",
      "patch": "@@ -2180,6 +2180,31 @@ riscv_multi_subset_supports (riscv_parse_subset_t *rps,\n       return riscv_subset_supports (rps, \"zbc\");\n     case INSN_CLASS_ZBS:\n       return riscv_subset_supports (rps, \"zbs\");\n+    case INSN_CLASS_ZBKB:\n+      return riscv_subset_supports (rps, \"zbkb\");\n+    case INSN_CLASS_ZBKC:\n+      return riscv_subset_supports (rps, \"zbkc\");\n+    case INSN_CLASS_ZBKX:\n+      return riscv_subset_supports (rps, \"zbkx\");\n+    case INSN_CLASS_ZBB_OR_ZBKB:\n+      return (riscv_subset_supports (rps, \"zbb\")\n+\t      || riscv_subset_supports (rps, \"zbkb\"));\n+    case INSN_CLASS_ZBC_OR_ZBKC:\n+      return (riscv_subset_supports (rps, \"zbc\")\n+\t      || riscv_subset_supports (rps, \"zbkc\"));\n+    case INSN_CLASS_ZKND:\n+      return riscv_subset_supports (rps, \"zknd\");\n+    case INSN_CLASS_ZKNE:\n+      return riscv_subset_supports (rps, \"zkne\");\n+    case INSN_CLASS_ZKNH:\n+      return riscv_subset_supports (rps, \"zknh\");\n+    case INSN_CLASS_ZKND_OR_ZKNE:\n+      return (riscv_subset_supports (rps, \"zknd\")\n+\t      || riscv_subset_supports (rps, \"zkne\"));\n+    case INSN_CLASS_ZKSED:\n+      return riscv_subset_supports (rps, \"zksed\");\n+    case INSN_CLASS_ZKSH:\n+      return riscv_subset_supports (rps, \"zksh\");\n     default:\n       rps->error_handler\n         (_(\"internal: unreachable INSN_CLASS_*\"));"
    },
    {
      "sha": "8985edf4bfa5e4ee3c894558ac60f9d23b4f4b84",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d1cafa0c60f859940262af7852b21a42dd78ba1/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d1cafa0c60f859940262af7852b21a42dd78ba1/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=3d1cafa0c60f859940262af7852b21a42dd78ba1",
      "patch": "@@ -63,6 +63,7 @@ enum riscv_csr_class\n   CSR_CLASS_I,\n   CSR_CLASS_I_32, /* rv32 only */\n   CSR_CLASS_F, /* f-ext only */\n+  CSR_CLASS_ZKR, /* zkr only */\n   CSR_CLASS_DEBUG /* debug CSR */\n };\n \n@@ -875,6 +876,10 @@ riscv_csr_address (const char *csr_name,\n       result = riscv_subset_supports (&riscv_rps_as, \"f\");\n       need_check_version = false;\n       break;\n+    case CSR_CLASS_ZKR:\n+      result = riscv_subset_supports (&riscv_rps_as, \"zkr\");\n+      need_check_version = false;\n+      break;\n     case CSR_CLASS_DEBUG:\n       need_check_version = false;\n       break;\n@@ -1085,6 +1090,8 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)\n \tcase 'I': break; /* Macro operand, must be constant.  */\n \tcase 'D': /* RD, floating point.  */\n \tcase 'd': USE_BITS (OP_MASK_RD, OP_SH_RD); break;\n+\tcase 'y': USE_BITS (OP_MASK_BS,\tOP_SH_BS); break;\n+\tcase 'Y': USE_BITS (OP_MASK_RNUM, OP_SH_RNUM); break;\n \tcase 'Z': /* RS1, CSR number.  */\n \tcase 'S': /* RS1, floating point.  */\n \tcase 's': USE_BITS (OP_MASK_RS1, OP_SH_RS1); break;\n@@ -2706,6 +2713,28 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t}\n \t      break;\n \n+\t    case 'y': /* bs immediate */\n+\t      my_getExpression (imm_expr, asarg);\n+\t      check_absolute_expr (ip, imm_expr, FALSE);\n+\t      if ((unsigned long)imm_expr->X_add_number > 3)\n+\t\tas_bad(_(\"Improper bs immediate (%lu)\"),\n+\t\t       (unsigned long)imm_expr->X_add_number);\n+\t      INSERT_OPERAND(BS, *ip, imm_expr->X_add_number);\n+\t      imm_expr->X_op = O_absent;\n+\t      asarg = expr_end;\n+\t      continue;\n+\n+\t    case 'Y': /* rnum immediate */\n+\t      my_getExpression (imm_expr, asarg);\n+\t      check_absolute_expr (ip, imm_expr, FALSE);\n+\t      if ((unsigned long)imm_expr->X_add_number > 10)\n+\t\tas_bad(_(\"Improper rnum immediate (%lu)\"),\n+\t\t       (unsigned long)imm_expr->X_add_number);\n+\t      INSERT_OPERAND(RNUM, *ip, imm_expr->X_add_number);\n+\t      imm_expr->X_op = O_absent;\n+\t      asarg = expr_end;\n+\t      continue;\n+\n \t    case 'z':\n \t      if (my_getSmallExpression (imm_expr, imm_reloc, asarg, p)\n \t\t  || imm_expr->X_op != O_constant"
    },
    {
      "sha": "425e6da276485e8349e262489dd1fe3918943eab",
      "filename": "include/opcode/riscv-opc.h",
      "status": "modified",
      "additions": 75,
      "deletions": 0,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d1cafa0c60f859940262af7852b21a42dd78ba1/include/opcode/riscv-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d1cafa0c60f859940262af7852b21a42dd78ba1/include/opcode/riscv-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/riscv-opc.h?ref=3d1cafa0c60f859940262af7852b21a42dd78ba1",
      "patch": "@@ -443,6 +443,8 @@\n #define MASK_SEXT_H  0xfff0707f\n #define MATCH_PACK 0x8004033\n #define MASK_PACK  0xfe00707f\n+#define MATCH_PACKH 0x8007033\n+#define MASK_PACKH  0xfe00707f\n #define MATCH_PACKW 0x800403b\n #define MASK_PACKW  0xfe00707f\n #define MATCH_ANDN 0x40007033\n@@ -461,6 +463,10 @@\n #define MASK_GREVI  0xfc00707f\n #define MATCH_GORCI 0x28005013\n #define MASK_GORCI  0xfc00707f\n+#define MATCH_SHFLI 0x8001013\n+#define MASK_SHFLI  0xfe00707f\n+#define MATCH_UNSHFLI 0x8005013\n+#define MASK_UNSHFLI  0xfe00707f\n #define MATCH_CLZW 0x6000101b\n #define MASK_CLZW  0xfff0707f\n #define MATCH_CTZW 0x6010101b\n@@ -495,6 +501,10 @@\n #define MASK_CLMULH  0xfe00707f\n #define MATCH_CLMULR 0xa002033\n #define MASK_CLMULR  0xfe00707f\n+#define MATCH_XPERM4 0x28002033\n+#define MASK_XPERM4  0xfe00707f\n+#define MATCH_XPERM8 0x28004033\n+#define MASK_XPERM8  0xfe00707f\n #define MATCH_BCLRI 0x48001013\n #define MASK_BCLRI  0xfc00707f\n #define MATCH_BSETI 0x28001013\n@@ -637,6 +647,64 @@\n #define MASK_C_LDSP  0xe003\n #define MATCH_C_SDSP 0xe002\n #define MASK_C_SDSP  0xe003\n+#define MATCH_SM3P0 0x10801013\n+#define MASK_SM3P0  0xfff0707f\n+#define MATCH_SM3P1 0x10901013\n+#define MASK_SM3P1  0xfff0707f\n+#define MATCH_SHA256SUM0 0x10001013\n+#define MASK_SHA256SUM0  0xfff0707f\n+#define MATCH_SHA256SUM1 0x10101013\n+#define MASK_SHA256SUM1  0xfff0707f\n+#define MATCH_SHA256SIG0 0x10201013\n+#define MASK_SHA256SIG0  0xfff0707f\n+#define MATCH_SHA256SIG1 0x10301013\n+#define MASK_SHA256SIG1  0xfff0707f\n+#define MATCH_SHA512SUM0R 0x50000033\n+#define MASK_SHA512SUM0R  0xfe00707f\n+#define MATCH_SHA512SUM1R 0x52000033\n+#define MASK_SHA512SUM1R  0xfe00707f\n+#define MATCH_SHA512SIG0L 0x54000033\n+#define MASK_SHA512SIG0L  0xfe00707f\n+#define MATCH_SHA512SIG0H 0x5c000033\n+#define MASK_SHA512SIG0H  0xfe00707f\n+#define MATCH_SHA512SIG1L 0x56000033\n+#define MASK_SHA512SIG1L  0xfe00707f\n+#define MATCH_SHA512SIG1H 0x5e000033\n+#define MASK_SHA512SIG1H  0xfe00707f\n+#define MATCH_SM4ED 0x30000033\n+#define MASK_SM4ED  0x3e00707f\n+#define MATCH_SM4KS 0x34000033\n+#define MASK_SM4KS  0x3e00707f\n+#define MATCH_AES32ESMI 0x26000033\n+#define MASK_AES32ESMI  0x3e00707f\n+#define MATCH_AES32ESI 0x22000033\n+#define MASK_AES32ESI  0x3e00707f\n+#define MATCH_AES32DSMI 0x2e000033\n+#define MASK_AES32DSMI  0x3e00707f\n+#define MATCH_AES32DSI 0x2a000033\n+#define MASK_AES32DSI  0x3e00707f\n+#define MATCH_SHA512SUM0 0x10401013\n+#define MASK_SHA512SUM0  0xfff0707f\n+#define MATCH_SHA512SUM1 0x10501013\n+#define MASK_SHA512SUM1  0xfff0707f\n+#define MATCH_SHA512SIG0 0x10601013\n+#define MASK_SHA512SIG0  0xfff0707f\n+#define MATCH_SHA512SIG1 0x10701013\n+#define MASK_SHA512SIG1  0xfff0707f\n+#define MATCH_AES64KS1I 0x31001013\n+#define MASK_AES64KS1I  0xff00707f\n+#define MATCH_AES64IM 0x30001013\n+#define MASK_AES64IM  0xfff0707f\n+#define MATCH_AES64KS2 0x7e000033\n+#define MASK_AES64KS2  0xfe00707f\n+#define MATCH_AES64ESM 0x36000033\n+#define MASK_AES64ESM  0xfe00707f\n+#define MATCH_AES64ES 0x32000033\n+#define MASK_AES64ES  0xfe00707f\n+#define MATCH_AES64DSM 0x3e000033\n+#define MASK_AES64DSM  0xfe00707f\n+#define MATCH_AES64DS 0x3a000033\n+#define MASK_AES64DS  0xfe00707f\n /* Privileged CSR addresses.  */\n #define CSR_USTATUS 0x0\n #define CSR_UIE 0x4\n@@ -884,6 +952,7 @@\n #define CSR_TCONTROL 0x7a5\n #define CSR_MCONTEXT 0x7a8\n #define CSR_SCONTEXT 0x7aa\n+#define CSR_SEED 0x015\n #endif /* RISCV_ENCODING_H */\n #ifdef DECLARE_INSN\n DECLARE_INSN(slli_rv32, MATCH_SLLI_RV32, MASK_SLLI_RV32)\n@@ -1118,6 +1187,11 @@ DECLARE_INSN(slli_uw, MATCH_SLLI_UW, MASK_SLLI_UW)\n DECLARE_INSN(clmul, MATCH_CLMUL, MASK_CLMUL)\n DECLARE_INSN(clmulh, MATCH_CLMULH, MASK_CLMULH)\n DECLARE_INSN(clmulr, MATCH_CLMULR, MASK_CLMULR)\n+DECLARE_INSN(pack, MATCH_PACK, MASK_PACK)\n+DECLARE_INSN(packh, MATCH_PACKH, MASK_PACKH)\n+DECLARE_INSN(packw, MATCH_PACKW, MASK_PACKW)\n+DECLARE_INSN(xperm4, MATCH_XPERM4, MASK_XPERM4)\n+DECLARE_INSN(xperm8, MATCH_XPERM8, MASK_XPERM8)\n DECLARE_INSN(bclri, MATCH_BCLRI, MASK_BCLRI)\n DECLARE_INSN(bseti, MATCH_BSETI, MASK_BSETI)\n DECLARE_INSN(binvi, MATCH_BINVI, MASK_BINVI)\n@@ -1436,6 +1510,7 @@ DECLARE_CSR(tinfo, CSR_TINFO, CSR_CLASS_DEBUG, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_C\n DECLARE_CSR(tcontrol, CSR_TCONTROL, CSR_CLASS_DEBUG, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)\n DECLARE_CSR(mcontext, CSR_MCONTEXT, CSR_CLASS_DEBUG, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)\n DECLARE_CSR(scontext, CSR_SCONTEXT, CSR_CLASS_DEBUG, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)\n+DECLARE_CSR(seed, CSR_SEED, CSR_CLASS_ZKR, PRIV_SPEC_CLASS_NONE, PRIV_SPEC_CLASS_NONE)\n #endif /* DECLARE_CSR */\n #ifdef DECLARE_CSR_ALIAS\n DECLARE_CSR_ALIAS(ubadaddr, CSR_UTVAL, CSR_CLASS_I, PRIV_SPEC_CLASS_1P9P1, PRIV_SPEC_CLASS_1P10)"
    },
    {
      "sha": "1b5b7cb6ffc9a34088c9b8a086fcb20a84c8da69",
      "filename": "include/opcode/riscv.h",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d1cafa0c60f859940262af7852b21a42dd78ba1/include/opcode/riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d1cafa0c60f859940262af7852b21a42dd78ba1/include/opcode/riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/riscv.h?ref=3d1cafa0c60f859940262af7852b21a42dd78ba1",
      "patch": "@@ -261,6 +261,13 @@ static const char * const riscv_pred_succ[16] =\n #define OP_MASK_CFUNCT2\t\t0x3\n #define OP_SH_CFUNCT2\t\t5\n \n+/* Scalar crypto fields. */\n+\n+#define OP_SH_BS        30\n+#define OP_MASK_BS      3\n+#define OP_SH_RNUM      20\n+#define OP_MASK_RNUM    0xf\n+\n /* ABI names for selected x-registers.  */\n \n #define X_RA 1\n@@ -320,6 +327,17 @@ enum riscv_insn_class\n   INSN_CLASS_ZBB,\n   INSN_CLASS_ZBC,\n   INSN_CLASS_ZBS,\n+  INSN_CLASS_ZBKB,\n+  INSN_CLASS_ZBKC,\n+  INSN_CLASS_ZBKX,\n+  INSN_CLASS_ZKND,\n+  INSN_CLASS_ZKNE,\n+  INSN_CLASS_ZKNH,\n+  INSN_CLASS_ZKSED,\n+  INSN_CLASS_ZKSH,\n+  INSN_CLASS_ZBB_OR_ZBKB,\n+  INSN_CLASS_ZBC_OR_ZBKC,\n+  INSN_CLASS_ZKND_OR_ZKNE,\n };\n \n /* This structure holds information for a particular instruction.  */"
    },
    {
      "sha": "86e2e5ab214cc0d96ef0794d0c2fbd512cbfe2f4",
      "filename": "opcodes/riscv-dis.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d1cafa0c60f859940262af7852b21a42dd78ba1/opcodes/riscv-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d1cafa0c60f859940262af7852b21a42dd78ba1/opcodes/riscv-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-dis.c?ref=3d1cafa0c60f859940262af7852b21a42dd78ba1",
      "patch": "@@ -375,6 +375,10 @@ print_insn_args (const char *oparg, insn_t l, bfd_vma pc, disassemble_info *info\n \t  print (info->stream, \"%s\", riscv_gpr_names[rd]);\n \t  break;\n \n+\tcase 'y':\n+\t  print (info->stream, \"0x%x\", (int)EXTRACT_OPERAND (BS, l));\n+\t  break;\n+\n \tcase 'z':\n \t  print (info->stream, \"%s\", riscv_gpr_names[0]);\n \t  break;\n@@ -440,6 +444,10 @@ print_insn_args (const char *oparg, insn_t l, bfd_vma pc, disassemble_info *info\n \t    break;\n \t  }\n \n+\tcase 'Y':\n+\t  print (info->stream, \"0x%x\", (int)EXTRACT_OPERAND (RNUM, l));\n+\t  break;\n+\n \tcase 'Z':\n \t  print (info->stream, \"%d\", rs1);\n \t  break;"
    },
    {
      "sha": "f4df81f4902b67320c21fb36acdc8d4f431dbf73",
      "filename": "opcodes/riscv-opc.c",
      "status": "modified",
      "additions": 72,
      "deletions": 20,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d1cafa0c60f859940262af7852b21a42dd78ba1/opcodes/riscv-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d1cafa0c60f859940262af7852b21a42dd78ba1/opcodes/riscv-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-opc.c?ref=3d1cafa0c60f859940262af7852b21a42dd78ba1",
      "patch": "@@ -84,6 +84,8 @@ const char * const riscv_fpr_names_abi[NFPR] =\n #define MASK_SHAMT (OP_MASK_SHAMT << OP_SH_SHAMT)\n #define MATCH_SHAMT_REV8_32 (0b11000 << OP_SH_SHAMT)\n #define MATCH_SHAMT_REV8_64 (0b111000 << OP_SH_SHAMT)\n+#define MATCH_SHAMT_BREV8 (0b00111 << OP_SH_SHAMT)\n+#define MATCH_SHAMT_ZIP_32 (0b1111 << OP_SH_SHAMT)\n #define MATCH_SHAMT_ORC_B (0b00111 << OP_SH_SHAMT)\n \n static int\n@@ -783,7 +785,7 @@ const struct riscv_opcode riscv_opcodes[] =\n {\"sfence.vma\", 0, INSN_CLASS_I,    \"s,t\",      MATCH_SFENCE_VMA, MASK_SFENCE_VMA, match_opcode, 0 },\n {\"wfi\",        0, INSN_CLASS_I,    \"\",         MATCH_WFI, MASK_WFI, match_opcode, 0 },\n \n-/* Zbb instructions */\n+/* Zbb or zbkb instructions.  */\n {\"clz\",        0, INSN_CLASS_ZBB,  \"d,s\",   MATCH_CLZ, MASK_CLZ, match_opcode, 0 },\n {\"ctz\",        0, INSN_CLASS_ZBB,  \"d,s\",   MATCH_CTZ, MASK_CTZ, match_opcode, 0 },\n {\"cpop\",       0, INSN_CLASS_ZBB,  \"d,s\",   MATCH_CPOP, MASK_CPOP, match_opcode, 0 },\n@@ -798,25 +800,32 @@ const struct riscv_opcode riscv_opcodes[] =\n {\"zext.h\",    32, INSN_CLASS_ZBB,  \"d,s\",   MATCH_PACK, MASK_PACK | MASK_RS2, match_opcode, 0 },\n {\"zext.h\",    64, INSN_CLASS_ZBB,  \"d,s\",   MATCH_PACKW, MASK_PACKW | MASK_RS2, match_opcode, 0 },\n {\"zext.h\",     0, INSN_CLASS_I,         \"d,s\",   0, (int) M_ZEXTH, match_never, INSN_MACRO },\n-{\"andn\",       0, INSN_CLASS_ZBB,  \"d,s,t\", MATCH_ANDN, MASK_ANDN, match_opcode, 0 },\n-{\"orn\",        0, INSN_CLASS_ZBB,  \"d,s,t\", MATCH_ORN, MASK_ORN, match_opcode, 0 },\n-{\"xnor\",       0, INSN_CLASS_ZBB,  \"d,s,t\", MATCH_XNOR, MASK_XNOR, match_opcode, 0 },\n-{\"rol\",        0, INSN_CLASS_ZBB,  \"d,s,t\", MATCH_ROL, MASK_ROL, match_opcode, 0 },\n-{\"rori\",       0, INSN_CLASS_ZBB,  \"d,s,>\", MATCH_RORI, MASK_RORI, match_opcode, 0 },\n-{\"ror\",        0, INSN_CLASS_ZBB,  \"d,s,t\", MATCH_ROR, MASK_ROR, match_opcode, 0 },\n-{\"ror\",        0, INSN_CLASS_ZBB,  \"d,s,>\", MATCH_RORI, MASK_RORI, match_opcode, INSN_ALIAS },\n-{\"rev8\",      32, INSN_CLASS_ZBB,  \"d,s\",   MATCH_GREVI | MATCH_SHAMT_REV8_32 , MASK_GREVI | MASK_SHAMT, match_opcode, 0 },\n-{\"rev8\",      64, INSN_CLASS_ZBB,  \"d,s\",   MATCH_GREVI | MATCH_SHAMT_REV8_64 , MASK_GREVI | MASK_SHAMT, match_opcode, 0 },\n {\"orc.b\",      0, INSN_CLASS_ZBB,  \"d,s\",   MATCH_GORCI | MATCH_SHAMT_ORC_B, MASK_GORCI | MASK_SHAMT, match_opcode, 0 },\n {\"clzw\",      64, INSN_CLASS_ZBB,  \"d,s\",   MATCH_CLZW, MASK_CLZW, match_opcode, 0 },\n {\"ctzw\",      64, INSN_CLASS_ZBB,  \"d,s\",   MATCH_CTZW, MASK_CTZW, match_opcode, 0 },\n {\"cpopw\",     64, INSN_CLASS_ZBB,  \"d,s\",   MATCH_CPOPW, MASK_CPOPW, match_opcode, 0 },\n-{\"rolw\",      64, INSN_CLASS_ZBB,  \"d,s,t\", MATCH_ROLW, MASK_ROLW, match_opcode, 0 },\n-{\"roriw\",     64, INSN_CLASS_ZBB,  \"d,s,<\", MATCH_RORIW, MASK_RORIW, match_opcode, 0 },\n-{\"rorw\",      64, INSN_CLASS_ZBB,  \"d,s,t\", MATCH_RORW, MASK_RORW, match_opcode, 0 },\n-{\"rorw\",      64, INSN_CLASS_ZBB,  \"d,s,<\", MATCH_RORIW, MASK_RORIW, match_opcode, 0 },\n-\n-/* Zba instructions */\n+{\"brev8\",     32, INSN_CLASS_ZBKB,  \"d,s\",      MATCH_GREVI | MATCH_SHAMT_BREV8, MASK_GREVI | MASK_SHAMT, match_opcode, 0 },\n+{\"brev8\",     64, INSN_CLASS_ZBKB,  \"d,s\",      MATCH_GREVI | MATCH_SHAMT_BREV8, MASK_GREVI | MASK_SHAMT, match_opcode, 0 },\n+{\"zip\",       32, INSN_CLASS_ZBKB,  \"d,s\",      MATCH_SHFLI|MATCH_SHAMT_ZIP_32, MASK_SHFLI|MASK_SHAMT, match_opcode, INSN_ALIAS },\n+{\"unzip\",     32, INSN_CLASS_ZBKB,  \"d,s\",      MATCH_UNSHFLI|MATCH_SHAMT_ZIP_32, MASK_UNSHFLI|MASK_SHAMT, match_opcode, INSN_ALIAS },\n+{\"pack\",       0, INSN_CLASS_ZBKB,  \"d,s,t\",    MATCH_PACK, MASK_PACK, match_opcode, 0 },\n+{\"packh\",      0, INSN_CLASS_ZBKB,  \"d,s,t\",    MATCH_PACKH, MASK_PACKH, match_opcode, 0 },\n+{\"packw\",     64, INSN_CLASS_ZBKB,  \"d,s,t\",    MATCH_PACKW, MASK_PACKW, match_opcode, 0 },\n+{\"andn\",       0, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s,t\", MATCH_ANDN, MASK_ANDN, match_opcode, 0 },\n+{\"orn\",        0, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s,t\", MATCH_ORN, MASK_ORN, match_opcode, 0 },\n+{\"xnor\",       0, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s,t\", MATCH_XNOR, MASK_XNOR, match_opcode, 0 },\n+{\"rol\",        0, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s,t\", MATCH_ROL, MASK_ROL, match_opcode, 0 },\n+{\"rori\",       0, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s,>\", MATCH_RORI, MASK_RORI, match_opcode, 0 },\n+{\"ror\",        0, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s,t\", MATCH_ROR, MASK_ROR, match_opcode, 0 },\n+{\"ror\",        0, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s,>\", MATCH_RORI, MASK_RORI, match_opcode, INSN_ALIAS },\n+{\"rev8\",      32, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s\",   MATCH_GREVI | MATCH_SHAMT_REV8_32, MASK_GREVI | MASK_SHAMT, match_opcode, 0 },\n+{\"rev8\",      64, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s\",   MATCH_GREVI | MATCH_SHAMT_REV8_64, MASK_GREVI | MASK_SHAMT, match_opcode, 0 },\n+{\"rolw\",      64, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s,t\", MATCH_ROLW, MASK_ROLW, match_opcode, 0 },\n+{\"roriw\",     64, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s,<\", MATCH_RORIW, MASK_RORIW, match_opcode, 0 },\n+{\"rorw\",      64, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s,t\", MATCH_RORW, MASK_RORW, match_opcode, 0 },\n+{\"rorw\",      64, INSN_CLASS_ZBB_OR_ZBKB,  \"d,s,<\", MATCH_RORIW, MASK_RORIW, match_opcode, 0 },\n+\n+/* Zba instructions.  */\n {\"sh1add\",     0, INSN_CLASS_ZBA,  \"d,s,t\", MATCH_SH1ADD, MASK_SH1ADD, match_opcode, 0 },\n {\"sh2add\",     0, INSN_CLASS_ZBA,  \"d,s,t\", MATCH_SH2ADD, MASK_SH2ADD, match_opcode, 0 },\n {\"sh3add\",     0, INSN_CLASS_ZBA,  \"d,s,t\", MATCH_SH3ADD, MASK_SH3ADD, match_opcode, 0 },\n@@ -828,12 +837,12 @@ const struct riscv_opcode riscv_opcodes[] =\n {\"add.uw\",    64, INSN_CLASS_ZBA,  \"d,s,t\", MATCH_ADD_UW, MASK_ADD_UW, match_opcode, 0 },\n {\"slli.uw\",   64, INSN_CLASS_ZBA,  \"d,s,>\", MATCH_SLLI_UW, MASK_SLLI_UW, match_opcode, 0 },\n \n-/* Zbc instructions */\n-{\"clmul\",      0, INSN_CLASS_ZBC,  \"d,s,t\", MATCH_CLMUL, MASK_CLMUL, match_opcode, 0 },\n-{\"clmulh\",     0, INSN_CLASS_ZBC,  \"d,s,t\", MATCH_CLMULH, MASK_CLMULH, match_opcode, 0 },\n+/* Zbc or zbkc instructions.  */\n+{\"clmul\",      0, INSN_CLASS_ZBC_OR_ZBKC,  \"d,s,t\", MATCH_CLMUL, MASK_CLMUL, match_opcode, 0 },\n+{\"clmulh\",     0, INSN_CLASS_ZBC_OR_ZBKC,  \"d,s,t\", MATCH_CLMULH, MASK_CLMULH, match_opcode, 0 },\n {\"clmulr\",     0, INSN_CLASS_ZBC,  \"d,s,t\", MATCH_CLMULR, MASK_CLMULR, match_opcode, 0 },\n \n-/* Zbs instructions */\n+/* Zbs instructions.  */\n {\"bclri\",     0, INSN_CLASS_ZBS,   \"d,s,>\",  MATCH_BCLRI, MASK_BCLRI, match_opcode, 0 },\n {\"bseti\",     0, INSN_CLASS_ZBS,   \"d,s,>\",  MATCH_BSETI, MASK_BSETI, match_opcode, 0 },\n {\"binvi\",     0, INSN_CLASS_ZBS,   \"d,s,>\",  MATCH_BINVI, MASK_BINVI, match_opcode, 0 },\n@@ -847,6 +856,49 @@ const struct riscv_opcode riscv_opcodes[] =\n {\"bext\",      0, INSN_CLASS_ZBS,   \"d,s,t\",  MATCH_BEXT, MASK_BEXT, match_opcode, 0 },\n {\"bext\",      0, INSN_CLASS_ZBS,   \"d,s,>\",  MATCH_BEXTI, MASK_BEXTI, match_opcode, INSN_ALIAS },\n \n+/* Zbkx instructions.  */\n+{\"xperm4\",     0, INSN_CLASS_ZBKX,  \"d,s,t\",  MATCH_XPERM4, MASK_XPERM4, match_opcode, 0 },\n+{\"xperm8\",     0, INSN_CLASS_ZBKX,  \"d,s,t\",  MATCH_XPERM8, MASK_XPERM8, match_opcode, 0 },\n+\n+/* Zknd instructions.  */\n+{\"aes32dsi\",  32, INSN_CLASS_ZKND,  \"d,s,t,y\",  MATCH_AES32DSI, MASK_AES32DSI, match_opcode, 0 },\n+{\"aes32dsmi\", 32, INSN_CLASS_ZKND,  \"d,s,t,y\",  MATCH_AES32DSMI, MASK_AES32DSMI, match_opcode, 0 },\n+{\"aes64ds\",   64, INSN_CLASS_ZKND,  \"d,s,t\",    MATCH_AES64DS, MASK_AES64DS, match_opcode, 0 },\n+{\"aes64dsm\",  64, INSN_CLASS_ZKND,  \"d,s,t\",    MATCH_AES64DSM, MASK_AES64DSM, match_opcode, 0 },\n+{\"aes64im\",   64, INSN_CLASS_ZKND,  \"d,s\",      MATCH_AES64IM, MASK_AES64IM, match_opcode, 0 },\n+{\"aes64ks1i\", 64, INSN_CLASS_ZKND_OR_ZKNE,  \"d,s,Y\",    MATCH_AES64KS1I, MASK_AES64KS1I, match_opcode, 0 },\n+{\"aes64ks2\",  64, INSN_CLASS_ZKND_OR_ZKNE,  \"d,s,t\",    MATCH_AES64KS2, MASK_AES64KS2, match_opcode, 0 },\n+\n+/* Zkne instructions.  */\n+{\"aes32esi\",  32, INSN_CLASS_ZKNE,  \"d,s,t,y\",  MATCH_AES32ESI, MASK_AES32ESI, match_opcode, 0 },\n+{\"aes32esmi\", 32, INSN_CLASS_ZKNE,  \"d,s,t,y\",  MATCH_AES32ESMI, MASK_AES32ESMI, match_opcode, 0 },\n+{\"aes64es\",   64, INSN_CLASS_ZKNE,  \"d,s,t\",    MATCH_AES64ES, MASK_AES64ES, match_opcode, 0 },\n+{\"aes64esm\",  64, INSN_CLASS_ZKNE,  \"d,s,t\",    MATCH_AES64ESM, MASK_AES64ESM, match_opcode, 0 },\n+\n+/* Zknh instructions.  */\n+{\"sha256sig0\",   0, INSN_CLASS_ZKNH,    \"d,s\",    MATCH_SHA256SIG0, MASK_SHA256SIG0, match_opcode, 0 },\n+{\"sha256sig1\",   0, INSN_CLASS_ZKNH,    \"d,s\",    MATCH_SHA256SIG1, MASK_SHA256SIG1, match_opcode, 0 },\n+{\"sha256sum0\",   0, INSN_CLASS_ZKNH,    \"d,s\",    MATCH_SHA256SUM0, MASK_SHA256SUM0, match_opcode, 0 },\n+{\"sha256sum1\",   0, INSN_CLASS_ZKNH,    \"d,s\",    MATCH_SHA256SUM1, MASK_SHA256SUM1, match_opcode, 0 },\n+{\"sha512sig0h\", 32, INSN_CLASS_ZKNH,    \"d,s,t\",  MATCH_SHA512SIG0H, MASK_SHA512SIG0H, match_opcode, 0 },\n+{\"sha512sig0l\", 32, INSN_CLASS_ZKNH,    \"d,s,t\",  MATCH_SHA512SIG0L, MASK_SHA512SIG0L, match_opcode, 0 },\n+{\"sha512sig1h\", 32, INSN_CLASS_ZKNH,    \"d,s,t\",  MATCH_SHA512SIG1H, MASK_SHA512SIG1H, match_opcode, 0 },\n+{\"sha512sig1l\", 32, INSN_CLASS_ZKNH,    \"d,s,t\",  MATCH_SHA512SIG1L, MASK_SHA512SIG1L, match_opcode, 0 },\n+{\"sha512sum0r\", 32, INSN_CLASS_ZKNH,    \"d,s,t\",  MATCH_SHA512SUM0R, MASK_SHA512SUM0R, match_opcode, 0 },\n+{\"sha512sum1r\", 32, INSN_CLASS_ZKNH,    \"d,s,t\",  MATCH_SHA512SUM1R, MASK_SHA512SUM1R, match_opcode, 0 },\n+{\"sha512sig0\",  64, INSN_CLASS_ZKNH,    \"d,s\",    MATCH_SHA512SIG0, MASK_SHA512SIG0, match_opcode, 0 },\n+{\"sha512sig1\",  64, INSN_CLASS_ZKNH,    \"d,s\",    MATCH_SHA512SIG1, MASK_SHA512SIG1, match_opcode, 0 },\n+{\"sha512sum0\",  64, INSN_CLASS_ZKNH,    \"d,s\",    MATCH_SHA512SUM0, MASK_SHA512SUM0, match_opcode, 0 },\n+{\"sha512sum1\",  64, INSN_CLASS_ZKNH,    \"d,s\",    MATCH_SHA512SUM1, MASK_SHA512SUM1, match_opcode, 0 },\n+\n+/* Zksed instructions.  */\n+{\"sm4ed\",    0, INSN_CLASS_ZKSED,   \"d,s,t,y\",  MATCH_SM4ED, MASK_SM4ED, match_opcode, 0 },\n+{\"sm4ks\",    0, INSN_CLASS_ZKSED,   \"d,s,t,y\",  MATCH_SM4KS, MASK_SM4KS, match_opcode, 0 },\n+\n+/* Zksh instructions  */\n+{\"sm3p0\",    0, INSN_CLASS_ZKSH,    \"d,s\",    MATCH_SM3P0, MASK_SM3P0, match_opcode, 0 },\n+{\"sm3p1\",    0, INSN_CLASS_ZKSH,    \"d,s\",    MATCH_SM3P1, MASK_SM3P1, match_opcode, 0 },\n+\n /* Terminate the list.  */\n {0, 0, INSN_CLASS_NONE, 0, 0, 0, 0, 0}\n };"
    }
  ]
}