{
  "sha": "d70cc3ba8740fc0eb0328da2453cefba8211944b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDcwY2MzYmE4NzQwZmMwZWIwMzI4ZGEyNDUzY2VmYmE4MjExOTQ0Yg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-04-22T18:02:36Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-04-22T18:02:50Z"
    },
    "message": "solib-svr4: Pass down svr4_info as much as possible\n\nWhile reviewing\n\n  https://sourceware.org/ml/gdb-patches/2019-04/msg00141.html\n\nI noticed that we relied heavily on global state through the\nget_svr4_info function, which uses current_program_space.  I thought we\ncould improve this (make things more explicit and easier to follow) by\n\n- Making get_svr4_info accept a program_space parameter, making it\n  return the SVR4 info for that program space.\n- Passing down the svr4_info object from callers as much as possible.\n\nThis means looking up the svr4_info for the appropriate program space at\nthe entry points of the solib-svr4.c file and passing it down.  For now,\nthese entry points (most of them are \"methods\" of svr4_so_ops) rely on\ncurrent_program_space, but we can later try to change the target_so_ops\ninterface to pass down the program space.\n\ngdb/ChangeLog:\n\n\t* solib-svr4.c (get_svr4_info): Add pspace parameter.\n\t(svr4_keep_data_in_core): Pass current_program_space to get_svr4_info.\n\t(open_symbol_file_object): Likewise.\n\t(svr4_default_sos): Add info parameter.\n\t(svr4_read_so_list): Likewise.\n\t(svr4_current_sos_direct): Adjust functions calls to pass down\n\tinfo.\n\t(svr4_current_sos_1): Add info parameter.\n\t(svr4_current_sos): Call get_svr4_info, pass info down to\n\tsvr4_current_sos_1.\n\t(svr4_fetch_objfile_link_map): Pass objfile->pspace to\n\tget_svr4_info.\n\t(svr4_in_dynsym_resolve_code): Pass current_program_space to\n\tget_svr4_info.\n\t(probes_table_htab_remove_objfile_probes): Pass objfile->pspace\n\tto get_svr4_info.\n\t(probes_table_remove_objfile_probes): Likewise.\n\t(register_solib_event_probe): Add info parameter.\n\t(solist_update_incremental): Pass info parameter down to\n\tsvr4_read_so_list.\n\t(disable_probes_interface): Add info parameter.\n\t(svr4_handle_solib_event): Pass current_program_space to\n\tget_svr4_info.  Adjust disable_probes_interface cleanup.\n\t(svr4_create_probe_breakpoints): Add info parameter, pass it\n\tdown to register_solib_event_probe.\n\t(svr4_create_solib_event_breakpoints): Add info parameter,\n\tpass it down to svr4_create_probe_breakpoints.\n\t(enable_break): Pass info down to\n\tsvr4_create_solib_event_breakpoints.\n\t(svr4_solib_create_inferior_hook): Pass current_program_space to\n\tget_svr4_info.\n\t(svr4_clear_solib): Likewise.",
    "tree": {
      "sha": "e153634b5d073e3cba70ee206080ecf6ddc2bc7e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e153634b5d073e3cba70ee206080ecf6ddc2bc7e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d70cc3ba8740fc0eb0328da2453cefba8211944b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d70cc3ba8740fc0eb0328da2453cefba8211944b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d70cc3ba8740fc0eb0328da2453cefba8211944b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d70cc3ba8740fc0eb0328da2453cefba8211944b/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7905fc359d6921c411999633e382330e6fd04fb6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7905fc359d6921c411999633e382330e6fd04fb6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7905fc359d6921c411999633e382330e6fd04fb6"
    }
  ],
  "stats": {
    "total": 119,
    "additions": 76,
    "deletions": 43
  },
  "files": [
    {
      "sha": "35d54a51fbe10e55d89795adbc29419780f99eab",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d70cc3ba8740fc0eb0328da2453cefba8211944b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d70cc3ba8740fc0eb0328da2453cefba8211944b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d70cc3ba8740fc0eb0328da2453cefba8211944b",
      "patch": "@@ -1,3 +1,38 @@\n+2019-04-22  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* solib-svr4.c (get_svr4_info): Add pspace parameter.\n+\t(svr4_keep_data_in_core): Pass current_program_space to get_svr4_info.\n+\t(open_symbol_file_object): Likewise.\n+\t(svr4_default_sos): Add info parameter.\n+\t(svr4_read_so_list): Likewise.\n+\t(svr4_current_sos_direct): Adjust functions calls to pass down\n+\tinfo.\n+\t(svr4_current_sos_1): Add info parameter.\n+\t(svr4_current_sos): Call get_svr4_info, pass info down to\n+\tsvr4_current_sos_1.\n+\t(svr4_fetch_objfile_link_map): Pass objfile->pspace to\n+\tget_svr4_info.\n+\t(svr4_in_dynsym_resolve_code): Pass current_program_space to\n+\tget_svr4_info.\n+\t(probes_table_htab_remove_objfile_probes): Pass objfile->pspace\n+\tto get_svr4_info.\n+\t(probes_table_remove_objfile_probes): Likewise.\n+\t(register_solib_event_probe): Add info parameter.\n+\t(solist_update_incremental): Pass info parameter down to\n+\tsvr4_read_so_list.\n+\t(disable_probes_interface): Add info parameter.\n+\t(svr4_handle_solib_event): Pass current_program_space to\n+\tget_svr4_info.  Adjust disable_probes_interface cleanup.\n+\t(svr4_create_probe_breakpoints): Add info parameter, pass it\n+\tdown to register_solib_event_probe.\n+\t(svr4_create_solib_event_breakpoints): Add info parameter,\n+\tpass it down to svr4_create_probe_breakpoints.\n+\t(enable_break): Pass info down to\n+\tsvr4_create_solib_event_breakpoints.\n+\t(svr4_solib_create_inferior_hook): Pass current_program_space to\n+\tget_svr4_info.\n+\t(svr4_clear_solib): Likewise.\n+\n 2019-04-22  Pedro Alves  <palves@redhat.com>\n \n \t* solib-svr4.c (svr4_free_objfile_observer): New."
    },
    {
      "sha": "2aa7b95ce6c169a704dc06a4c3507e3b62af72b3",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 41,
      "deletions": 43,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d70cc3ba8740fc0eb0328da2453cefba8211944b/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d70cc3ba8740fc0eb0328da2453cefba8211944b/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=d70cc3ba8740fc0eb0328da2453cefba8211944b",
      "patch": "@@ -391,21 +391,21 @@ svr4_pspace_data_cleanup (struct program_space *pspace, void *arg)\n   xfree (info);\n }\n \n-/* Get the current svr4 data.  If none is found yet, add it now.  This\n-   function always returns a valid object.  */\n+/* Get the svr4 data for program space PSPACE.  If none is found yet, add it now.\n+   This function always returns a valid object.  */\n \n static struct svr4_info *\n-get_svr4_info (void)\n+get_svr4_info (program_space *pspace)\n {\n   struct svr4_info *info;\n \n-  info = (struct svr4_info *) program_space_data (current_program_space,\n+  info = (struct svr4_info *) program_space_data (pspace,\n \t\t\t\t\t\t  solib_svr4_pspace_data);\n   if (info != NULL)\n     return info;\n \n   info = XCNEW (struct svr4_info);\n-  set_program_space_data (current_program_space, solib_svr4_pspace_data, info);\n+  set_program_space_data (pspace, solib_svr4_pspace_data, info);\n   return info;\n }\n \n@@ -940,7 +940,7 @@ svr4_keep_data_in_core (CORE_ADDR vaddr, unsigned long size)\n   CORE_ADDR ldsomap;\n   CORE_ADDR name_lm;\n \n-  info = get_svr4_info ();\n+  info = get_svr4_info (current_program_space);\n \n   info->debug_base = 0;\n   locate_base (info);\n@@ -969,7 +969,7 @@ open_symbol_file_object (int from_tty)\n   struct type *ptr_type = builtin_type (target_gdbarch ())->builtin_data_ptr;\n   int l_name_size = TYPE_LENGTH (ptr_type);\n   gdb::byte_vector l_name_buf (l_name_size);\n-  struct svr4_info *info = get_svr4_info ();\n+  struct svr4_info *info = get_svr4_info (current_program_space);\n   symfile_add_flags add_flags = 0;\n \n   if (from_tty)\n@@ -1264,9 +1264,8 @@ svr4_current_sos_via_xfer_libraries (struct svr4_library_list *list,\n    linker, build a fallback list from other sources.  */\n \n static struct so_list *\n-svr4_default_sos (void)\n+svr4_default_sos (svr4_info *info)\n {\n-  struct svr4_info *info = get_svr4_info ();\n   struct so_list *newobj;\n \n   if (!info->debug_loader_offset_p)\n@@ -1296,7 +1295,7 @@ svr4_default_sos (void)\n    represent only part of the inferior library list.  */\n \n static int\n-svr4_read_so_list (CORE_ADDR lm, CORE_ADDR prev_lm,\n+svr4_read_so_list (svr4_info *info, CORE_ADDR lm, CORE_ADDR prev_lm,\n \t\t   struct so_list ***link_ptr_ptr, int ignore_first)\n {\n   CORE_ADDR first_l_name = 0;\n@@ -1331,8 +1330,6 @@ svr4_read_so_list (CORE_ADDR lm, CORE_ADDR prev_lm,\n          decide when to ignore it.  */\n       if (ignore_first && li->l_prev == 0)\n \t{\n-\t  struct svr4_info *info = get_svr4_info ();\n-\n \t  first_l_name = li->l_name;\n \t  info->main_lm_addr = li->lm_addr;\n \t  continue;\n@@ -1400,7 +1397,7 @@ svr4_current_sos_direct (struct svr4_info *info)\n       if (library_list.main_lm)\n \tinfo->main_lm_addr = library_list.main_lm;\n \n-      return library_list.head ? library_list.head : svr4_default_sos ();\n+      return library_list.head ? library_list.head : svr4_default_sos (info);\n     }\n \n   /* Always locate the debug struct, in case it has moved.  */\n@@ -1410,7 +1407,7 @@ svr4_current_sos_direct (struct svr4_info *info)\n   /* If we can't find the dynamic linker's base structure, this\n      must not be a dynamically linked executable.  Hmm.  */\n   if (! info->debug_base)\n-    return svr4_default_sos ();\n+    return svr4_default_sos (info);\n \n   /* Assume that everything is a library if the dynamic loader was loaded\n      late by a static executable.  */\n@@ -1428,20 +1425,20 @@ svr4_current_sos_direct (struct svr4_info *info)\n      `struct so_list' nodes.  */\n   lm = solib_svr4_r_map (info);\n   if (lm)\n-    svr4_read_so_list (lm, 0, &link_ptr, ignore_first);\n+    svr4_read_so_list (info, lm, 0, &link_ptr, ignore_first);\n \n   /* On Solaris, the dynamic linker is not in the normal list of\n      shared objects, so make sure we pick it up too.  Having\n      symbol information for the dynamic linker is quite crucial\n      for skipping dynamic linker resolver code.  */\n   lm = solib_svr4_r_ldsomap (info);\n   if (lm)\n-    svr4_read_so_list (lm, 0, &link_ptr, 0);\n+    svr4_read_so_list (info, lm, 0, &link_ptr, 0);\n \n   cleanup.release ();\n \n   if (head == NULL)\n-    return svr4_default_sos ();\n+    return svr4_default_sos (info);\n \n   return head;\n }\n@@ -1450,10 +1447,8 @@ svr4_current_sos_direct (struct svr4_info *info)\n    method.  */\n \n static struct so_list *\n-svr4_current_sos_1 (void)\n+svr4_current_sos_1 (svr4_info *info)\n {\n-  struct svr4_info *info = get_svr4_info ();\n-\n   /* If the solib list has been read and stored by the probes\n      interface then we return a copy of the stored list.  */\n   if (info->solib_list != NULL)\n@@ -1468,7 +1463,8 @@ svr4_current_sos_1 (void)\n static struct so_list *\n svr4_current_sos (void)\n {\n-  struct so_list *so_head = svr4_current_sos_1 ();\n+  svr4_info *info = get_svr4_info (current_program_space);\n+  struct so_list *so_head = svr4_current_sos_1 (info);\n   struct mem_range vsyscall_range;\n \n   /* Filter out the vDSO module, if present.  Its symbol file would\n@@ -1548,7 +1544,7 @@ CORE_ADDR\n svr4_fetch_objfile_link_map (struct objfile *objfile)\n {\n   struct so_list *so;\n-  struct svr4_info *info = get_svr4_info ();\n+  struct svr4_info *info = get_svr4_info (objfile->pspace);\n \n   /* Cause svr4_current_sos() to be run if it hasn't been already.  */\n   if (info->main_lm_addr == 0)\n@@ -1601,7 +1597,7 @@ match_main (const char *soname)\n int\n svr4_in_dynsym_resolve_code (CORE_ADDR pc)\n {\n-  struct svr4_info *info = get_svr4_info ();\n+  struct svr4_info *info = get_svr4_info (current_program_space);\n \n   return ((pc >= info->interp_text_sect_low\n \t   && pc < info->interp_text_sect_high)\n@@ -1681,7 +1677,7 @@ probes_table_htab_remove_objfile_probes (void **slot, void *info)\n   struct objfile *objfile = (struct objfile *) info;\n \n   if (pa->objfile == objfile)\n-    htab_clear_slot (get_svr4_info ()->probes_table, slot);\n+    htab_clear_slot (get_svr4_info (objfile->pspace)->probes_table, slot);\n \n   return 1;\n }\n@@ -1691,7 +1687,7 @@ probes_table_htab_remove_objfile_probes (void **slot, void *info)\n static void\n probes_table_remove_objfile_probes (struct objfile *objfile)\n {\n-  svr4_info *info = get_svr4_info ();\n+  svr4_info *info = get_svr4_info (objfile->pspace);\n   if (info->probes_table != nullptr)\n     htab_traverse_noresize (info->probes_table,\n \t\t\t    probes_table_htab_remove_objfile_probes, objfile);\n@@ -1701,11 +1697,10 @@ probes_table_remove_objfile_probes (struct objfile *objfile)\n    probes table.  */\n \n static void\n-register_solib_event_probe (struct objfile *objfile,\n+register_solib_event_probe (svr4_info *info, struct objfile *objfile,\n \t\t\t    probe *prob, CORE_ADDR address,\n \t\t\t    enum probe_action action)\n {\n-  struct svr4_info *info = get_svr4_info ();\n   struct probe_and_action lookup, *pa;\n   void **slot;\n \n@@ -1857,7 +1852,7 @@ solist_update_incremental (struct svr4_info *info, CORE_ADDR lm)\n \t above check and deferral to solist_update_full ensures\n \t that this call to svr4_read_so_list will never see the\n \t first element.  */\n-      if (!svr4_read_so_list (lm, prev_lm, &link, 0))\n+      if (!svr4_read_so_list (info, lm, prev_lm, &link, 0))\n \treturn 0;\n     }\n \n@@ -1869,10 +1864,8 @@ solist_update_incremental (struct svr4_info *info, CORE_ADDR lm)\n    ones set up for the probes-based interface are adequate.  */\n \n static void\n-disable_probes_interface ()\n+disable_probes_interface (svr4_info *info)\n {\n-  struct svr4_info *info = get_svr4_info ();\n-\n   warning (_(\"Probes-based dynamic linker interface failed.\\n\"\n \t     \"Reverting to original interface.\\n\"));\n \n@@ -1887,7 +1880,7 @@ disable_probes_interface ()\n static void\n svr4_handle_solib_event (void)\n {\n-  struct svr4_info *info = get_svr4_info ();\n+  struct svr4_info *info = get_svr4_info (current_program_space);\n   struct probe_and_action *pa;\n   enum probe_action action;\n   struct value *val = NULL;\n@@ -1900,7 +1893,10 @@ svr4_handle_solib_event (void)\n \n   /* If anything goes wrong we revert to the original linker\n      interface.  */\n-  auto cleanup = make_scope_exit (disable_probes_interface);\n+  auto cleanup = make_scope_exit ([info] ()\n+    {\n+      disable_probes_interface (info);\n+    });\n \n   pc = regcache_read_pc (get_current_regcache ());\n   pa = solib_event_probe_at (info, pc);\n@@ -2055,7 +2051,7 @@ svr4_update_solib_event_breakpoints (void)\n    probe.  */\n \n static void\n-svr4_create_probe_breakpoints (struct gdbarch *gdbarch,\n+svr4_create_probe_breakpoints (svr4_info *info, struct gdbarch *gdbarch,\n \t\t\t       const std::vector<probe *> *probes,\n \t\t\t       struct objfile *objfile)\n {\n@@ -2068,7 +2064,7 @@ svr4_create_probe_breakpoints (struct gdbarch *gdbarch,\n \t  CORE_ADDR address = p->get_relocated_address (objfile);\n \n \t  create_solib_event_breakpoint (gdbarch, address);\n-\t  register_solib_event_probe (objfile, p, address, action);\n+\t  register_solib_event_probe (info, objfile, p, address, action);\n \t}\n     }\n \n@@ -2088,7 +2084,7 @@ svr4_create_probe_breakpoints (struct gdbarch *gdbarch,\n    marker function.  */\n \n static void\n-svr4_create_solib_event_breakpoints (struct gdbarch *gdbarch,\n+svr4_create_solib_event_breakpoints (svr4_info *info, struct gdbarch *gdbarch,\n \t\t\t\t     CORE_ADDR address)\n {\n   struct obj_section *os;\n@@ -2151,7 +2147,7 @@ svr4_create_solib_event_breakpoints (struct gdbarch *gdbarch,\n \t    }\n \n \t  if (all_probes_found)\n-\t    svr4_create_probe_breakpoints (gdbarch, probes, os->objfile);\n+\t    svr4_create_probe_breakpoints (info, gdbarch, probes, os->objfile);\n \n \t  if (all_probes_found)\n \t    return;\n@@ -2282,7 +2278,7 @@ enable_break (struct svr4_info *info, int from_tty)\n \t\t+ bfd_section_size (tmp_bfd, interp_sect);\n \t    }\n \n-\t  svr4_create_solib_event_breakpoints (target_gdbarch (), sym_addr);\n+\t  svr4_create_solib_event_breakpoints (info, target_gdbarch (), sym_addr);\n \t  return 1;\n \t}\n     }\n@@ -2444,7 +2440,7 @@ enable_break (struct svr4_info *info, int from_tty)\n \n       if (sym_addr != 0)\n \t{\n-\t  svr4_create_solib_event_breakpoints (target_gdbarch (),\n+\t  svr4_create_solib_event_breakpoints (info, target_gdbarch (),\n \t\t\t\t\t       load_addr + sym_addr);\n \t  return 1;\n \t}\n@@ -2470,7 +2466,8 @@ enable_break (struct svr4_info *info, int from_tty)\n \t  sym_addr = gdbarch_convert_from_func_ptr_addr (target_gdbarch (),\n \t\t\t\t\t\t\t sym_addr,\n \t\t\t\t\t\t\t current_top_target ());\n-\t  svr4_create_solib_event_breakpoints (target_gdbarch (), sym_addr);\n+\t  svr4_create_solib_event_breakpoints (info, target_gdbarch (),\n+\t\t\t\t\t       sym_addr);\n \t  return 1;\n \t}\n     }\n@@ -2487,7 +2484,8 @@ enable_break (struct svr4_info *info, int from_tty)\n \t      sym_addr = gdbarch_convert_from_func_ptr_addr (target_gdbarch (),\n \t\t\t\t\t\t\t     sym_addr,\n \t\t\t\t\t\t\t     current_top_target ());\n-\t      svr4_create_solib_event_breakpoints (target_gdbarch (), sym_addr);\n+\t      svr4_create_solib_event_breakpoints (info, target_gdbarch (),\n+\t\t\t\t\t\t   sym_addr);\n \t      return 1;\n \t    }\n \t}\n@@ -3010,7 +3008,7 @@ svr4_solib_create_inferior_hook (int from_tty)\n {\n   struct svr4_info *info;\n \n-  info = get_svr4_info ();\n+  info = get_svr4_info (current_program_space);\n \n   /* Clear the probes-based interface's state.  */\n   free_probes_table (info);\n@@ -3036,7 +3034,7 @@ svr4_clear_solib (void)\n {\n   struct svr4_info *info;\n \n-  info = get_svr4_info ();\n+  info = get_svr4_info (current_program_space);\n   info->debug_base = 0;\n   info->debug_loader_offset_p = 0;\n   info->debug_loader_offset = 0;"
    }
  ]
}