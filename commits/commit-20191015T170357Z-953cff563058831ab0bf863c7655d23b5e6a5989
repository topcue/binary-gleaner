{
  "sha": "953cff563058831ab0bf863c7655d23b5e6a5989",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTUzY2ZmNTYzMDU4ODMxYWIwYmY4NjNjNzY1NWQyM2I1ZTZhNTk4OQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-10-15T16:57:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-10-15T17:03:57Z"
    },
    "message": "Change gcc_target_options to return std::string\n\nThis patch was inspired by a recent review that recommended using\nstd::string in a new implementation of the gcc_target_options gdbarch\nfunction.  It changes this function to return std::string rather than\nan ordinary xmalloc'd string.\n\nI believe this caught a latent memory leak in compile.c:get_args.\n\nTested on x86-64 Fedora 29.\n\ngdb/ChangeLog\n2019-10-15  Tom Tromey  <tromey@adacore.com>\n\n\t* gdbarch.h, gdbarch.c: Rebuild.\n\t* gdbarch.sh (gcc_target_options): Change return type to\n\tstd::string.\n\t* compile/compile.c (get_args): Update.\n\t* nios2-tdep.c (nios2_gcc_target_options): Return std::string.\n\t* arm-linux-tdep.c (arm_linux_gcc_target_options): Return\n\tstd::string.\n\t* aarch64-linux-tdep.c (aarch64_linux_gcc_target_options): Return\n\tstd::string.\n\t* arch-utils.c (default_gcc_target_options): Return std::string.\n\t* arch-utils.h (default_gcc_target_options): Return std::string.\n\t* s390-tdep.c (s390_gcc_target_options): Return std::string.\n\nChange-Id: I51f61703426a323089e646da8f22320a2cafbc1f",
    "tree": {
      "sha": "b7c925518139ea7492e4ffdee4ef3ae6f11667ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b7c925518139ea7492e4ffdee4ef3ae6f11667ad"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/953cff563058831ab0bf863c7655d23b5e6a5989",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/953cff563058831ab0bf863c7655d23b5e6a5989",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/953cff563058831ab0bf863c7655d23b5e6a5989",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/953cff563058831ab0bf863c7655d23b5e6a5989/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "81e6b8eb208c427028d919afb2b5cabbc355fc88",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/81e6b8eb208c427028d919afb2b5cabbc355fc88",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/81e6b8eb208c427028d919afb2b5cabbc355fc88"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 35,
    "deletions": 19
  },
  "files": [
    {
      "sha": "e52ec3f307c791c0437a4a699274c9b9f35c62fd",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=953cff563058831ab0bf863c7655d23b5e6a5989",
      "patch": "@@ -1,3 +1,18 @@\n+2019-10-15  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdbarch.h, gdbarch.c: Rebuild.\n+\t* gdbarch.sh (gcc_target_options): Change return type to\n+\tstd::string.\n+\t* compile/compile.c (get_args): Update.\n+\t* nios2-tdep.c (nios2_gcc_target_options): Return std::string.\n+\t* arm-linux-tdep.c (arm_linux_gcc_target_options): Return\n+\tstd::string.\n+\t* aarch64-linux-tdep.c (aarch64_linux_gcc_target_options): Return\n+\tstd::string.\n+\t* arch-utils.c (default_gcc_target_options): Return std::string.\n+\t* arch-utils.h (default_gcc_target_options): Return std::string.\n+\t* s390-tdep.c (s390_gcc_target_options): Return std::string.\n+\n 2019-10-15  Christian Biesinger  <cbiesinger@google.com>\n \n \t* breakpoint.c (breakpoint_chain): Make static."
    },
    {
      "sha": "3ec08d1c76e655c0113ee6b951af6d1b1abc62a6",
      "filename": "gdb/aarch64-linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/aarch64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/aarch64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-tdep.c?ref=953cff563058831ab0bf863c7655d23b5e6a5989",
      "patch": "@@ -1429,11 +1429,11 @@ aarch64_linux_syscall_record (struct regcache *regcache,\n \n /* Implement the \"gcc_target_options\" gdbarch method.  */\n \n-static char *\n+static std::string\n aarch64_linux_gcc_target_options (struct gdbarch *gdbarch)\n {\n   /* GCC doesn't know \"-m64\".  */\n-  return NULL;\n+  return {};\n }\n \n static void"
    },
    {
      "sha": "571646e4c8de1586ee3621412c654779c5bf1368",
      "filename": "gdb/arch-utils.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/arch-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/arch-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.c?ref=953cff563058831ab0bf863c7655d23b5e6a5989",
      "patch": "@@ -903,11 +903,12 @@ default_infcall_munmap (CORE_ADDR addr, CORE_ADDR size)\n /* -mcmodel=large is used so that no GOT (Global Offset Table) is needed to be\n    created in inferior memory by GDB (normally it is set by ld.so).  */\n \n-char *\n+std::string\n default_gcc_target_options (struct gdbarch *gdbarch)\n {\n-  return xstrprintf (\"-m%d%s\", gdbarch_ptr_bit (gdbarch),\n-\t\t     gdbarch_ptr_bit (gdbarch) == 64 ? \" -mcmodel=large\" : \"\");\n+  return string_printf (\"-m%d%s\", gdbarch_ptr_bit (gdbarch),\n+\t\t\t(gdbarch_ptr_bit (gdbarch) == 64\n+\t\t\t ? \" -mcmodel=large\" : \"\"));\n }\n \n /* gdbarch gnu_triplet_regexp method.  */"
    },
    {
      "sha": "48ff3bb9a1636db39700534ee2483ffc7db084ac",
      "filename": "gdb/arch-utils.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/arch-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/arch-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.h?ref=953cff563058831ab0bf863c7655d23b5e6a5989",
      "patch": "@@ -247,7 +247,7 @@ extern void default_skip_permanent_breakpoint (struct regcache *regcache);\n \n extern CORE_ADDR default_infcall_mmap (CORE_ADDR size, unsigned prot);\n extern void default_infcall_munmap (CORE_ADDR addr, CORE_ADDR size);\n-extern char *default_gcc_target_options (struct gdbarch *gdbarch);\n+extern std::string default_gcc_target_options (struct gdbarch *gdbarch);\n extern const char *default_gnu_triplet_regexp (struct gdbarch *gdbarch);\n extern int default_addressable_memory_unit_size (struct gdbarch *gdbarch);\n "
    },
    {
      "sha": "32c1ef3a770002547ae548bb5b1b03c7f3734221",
      "filename": "gdb/arm-linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/arm-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/arm-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-tdep.c?ref=953cff563058831ab0bf863c7655d23b5e6a5989",
      "patch": "@@ -1710,11 +1710,11 @@ arm_linux_skip_trampoline_code (struct frame_info *frame, CORE_ADDR pc)\n \n /* Implement the gcc_target_options gdbarch method.  */\n \n-static char *\n+static std::string\n arm_linux_gcc_target_options (struct gdbarch *gdbarch)\n {\n   /* GCC doesn't know \"-m32\".  */\n-  return NULL;\n+  return {};\n }\n \n static void"
    },
    {
      "sha": "94942db10e10c6beb9063498edb24ce26f4a3d8e",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=953cff563058831ab0bf863c7655d23b5e6a5989",
      "patch": "@@ -635,7 +635,7 @@ get_args (const compile_instance *compiler, struct gdbarch *gdbarch,\n   int argc_compiler;\n   char **argv_compiler;\n \n-  build_argc_argv (gdbarch_gcc_target_options (gdbarch),\n+  build_argc_argv (gdbarch_gcc_target_options (gdbarch).c_str (),\n \t\t   argcp, argvp);\n \n   cs_producer_options = get_selected_pc_producer_options ();"
    },
    {
      "sha": "fa6be50730b4aac73a73754f769453456927ba1e",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=953cff563058831ab0bf863c7655d23b5e6a5989",
      "patch": "@@ -5043,7 +5043,7 @@ set_gdbarch_infcall_munmap (struct gdbarch *gdbarch,\n   gdbarch->infcall_munmap = infcall_munmap;\n }\n \n-char *\n+std::string\n gdbarch_gcc_target_options (struct gdbarch *gdbarch)\n {\n   gdb_assert (gdbarch != NULL);"
    },
    {
      "sha": "01b5aef8f80323bf8b73c0cb458279f90a24cce3",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=953cff563058831ab0bf863c7655d23b5e6a5989",
      "patch": "@@ -1596,10 +1596,10 @@ extern void set_gdbarch_infcall_munmap (struct gdbarch *gdbarch, gdbarch_infcall\n /* Return string (caller has to use xfree for it) with options for GCC\n    to produce code for this target, typically \"-m64\", \"-m32\" or \"-m31\".\n    These options are put before CU's DW_AT_producer compilation options so that\n-   they can override it.  Method may also return NULL. */\n+   they can override it. */\n \n-typedef char * (gdbarch_gcc_target_options_ftype) (struct gdbarch *gdbarch);\n-extern char * gdbarch_gcc_target_options (struct gdbarch *gdbarch);\n+typedef std::string (gdbarch_gcc_target_options_ftype) (struct gdbarch *gdbarch);\n+extern std::string gdbarch_gcc_target_options (struct gdbarch *gdbarch);\n extern void set_gdbarch_gcc_target_options (struct gdbarch *gdbarch, gdbarch_gcc_target_options_ftype *gcc_target_options);\n \n /* Return a regular expression that matches names used by this"
    },
    {
      "sha": "62f68dc8add682233d4f0dbd17e9437c3dc2fde6",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=953cff563058831ab0bf863c7655d23b5e6a5989",
      "patch": "@@ -1184,8 +1184,8 @@ f;void;infcall_munmap;CORE_ADDR addr, CORE_ADDR size;addr, size;;default_infcall\n # Return string (caller has to use xfree for it) with options for GCC\n # to produce code for this target, typically \"-m64\", \"-m32\" or \"-m31\".\n # These options are put before CU's DW_AT_producer compilation options so that\n-# they can override it.  Method may also return NULL.\n-m;char *;gcc_target_options;void;;;default_gcc_target_options;;0\n+# they can override it.\n+m;std::string;gcc_target_options;void;;;default_gcc_target_options;;0\n \n # Return a regular expression that matches names used by this\n # architecture in GNU configury triplets.  The result is statically"
    },
    {
      "sha": "c2683b5e3a79fd2110a535258ecc44c683a2cb70",
      "filename": "gdb/nios2-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/nios2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/nios2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nios2-tdep.c?ref=953cff563058831ab0bf863c7655d23b5e6a5989",
      "patch": "@@ -2260,11 +2260,11 @@ nios2_type_align (struct gdbarch *gdbarch, struct type *type)\n }\n \n /* Implement the gcc_target_options gdbarch method.  */\n-static char *\n+static std::string\n nios2_gcc_target_options (struct gdbarch *gdbarch)\n {\n   /* GCC doesn't know \"-m32\".  */\n-  return NULL;\n+  return {};\n }\n \n /* Initialize the Nios II gdbarch.  */"
    },
    {
      "sha": "329a1223963ee182c0033c04931cb6d85da71ba7",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/953cff563058831ab0bf863c7655d23b5e6a5989/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=953cff563058831ab0bf863c7655d23b5e6a5989",
      "patch": "@@ -6779,10 +6779,10 @@ s390_process_record (struct gdbarch *gdbarch, struct regcache *regcache,\n /* Implement gdbarch_gcc_target_options.  GCC does not know \"-m32\" or\n    \"-mcmodel=large\".  */\n \n-static char *\n+static std::string\n s390_gcc_target_options (struct gdbarch *gdbarch)\n {\n-  return xstrdup (gdbarch_ptr_bit (gdbarch) == 64 ? \"-m64\" : \"-m31\");\n+  return gdbarch_ptr_bit (gdbarch) == 64 ? \"-m64\" : \"-m31\";\n }\n \n /* Implement gdbarch_gnu_triplet_regexp.  Target triplets are \"s390-*\""
    }
  ]
}