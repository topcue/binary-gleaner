{
  "sha": "dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGZiNjUxOTFkODBhZmNjN2Q4Y2U3OWQzZDlmOTJlYTJlMWFiM2ZjOQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-12-02T21:05:54Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-12-06T19:19:02Z"
    },
    "message": "Put bcache inside \"namespace gdb\"\n\nThis avoids a conflict with a system \"struct bcache\" on\nSolaris (see e.g.\nhttps://www.isi.edu/nsnam/archive/ns-users/webarch/2001/msg05393.html)\n\nNote that the Solaris conflict for now only surfaces with\n--enable-targets=all (which the build bot doesn't use).\n\ngdb/ChangeLog:\n\n2019-12-06  Christian Biesinger  <cbiesinger@google.com>\n\n\t* bcache.c: Put in namespace gdb.\n\t* bcache.h: Likewise.\n\t* gdbtypes.c (check_types_worklist): Update.\n\t(types_deeply_equal): Update.\n\t* macrotab.c (struct macro_table) <bcache>: Update.\n\t(new_macro_table): Update.\n\t* macrotab.h (struct bcache): Put this forward declaration\n\tinside namespace gdb.\n\t(new_macro_table): Update.\n\t* objfiles.h (struct objfile_per_bfd_storage) <filename_cache>:\n\tUpdate.\n\t<macro_cache>: Update.\n\t* psymtab.h: (psymtab_storage) <psymbol_cache>: Update.\n\nChange-Id: I843d5e91f7ccb3db6d1099a8214c15a74510256f",
    "tree": {
      "sha": "37f6f79d20d0a75a26e371b25a3b0e78e2737dc2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/37f6f79d20d0a75a26e371b25a3b0e78e2737dc2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "93e55f0a031b0e677d22aaba00857de902ebe685",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93e55f0a031b0e677d22aaba00857de902ebe685",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/93e55f0a031b0e677d22aaba00857de902ebe685"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 36,
    "deletions": 9
  },
  "files": [
    {
      "sha": "f06ad13870afe0166a08152afd14a9d74917160b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
      "patch": "@@ -1,3 +1,19 @@\n+2019-12-06  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* bcache.c: Put in namespace gdb.\n+\t* bcache.h: Likewise.\n+\t* gdbtypes.c (check_types_worklist): Update.\n+\t(types_deeply_equal): Update.\n+\t* macrotab.c (struct macro_table) <bcache>: Update.\n+\t(new_macro_table): Update.\n+\t* macrotab.h (struct bcache): Put this forward declaration\n+\tinside namespace gdb.\n+\t(new_macro_table): Update.\n+\t* objfiles.h (struct objfile_per_bfd_storage) <filename_cache>:\n+\tUpdate.\n+\t<macro_cache>: Update.\n+\t* psymtab.h: (psymtab_storage) <psymbol_cache>: Update.\n+\n 2019-12-06  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/24971"
    },
    {
      "sha": "348ad152f64f3ebb145c38f45e752030dd029bda",
      "filename": "gdb/bcache.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/bcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/bcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bcache.c?ref=dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
      "patch": "@@ -25,6 +25,8 @@\n \n #include <algorithm>\n \n+namespace gdb {\n+\n /* The type used to hold a single bcache string.  The user data is\n    stored in d.data.  Since it can be any type, it needs to have the\n    same alignment as the most strict alignment of any type on the host\n@@ -378,3 +380,5 @@ bcache::memory_used ()\n     return 0;\n   return obstack_memory_used (&m_cache);\n }\n+\n+} /* namespace gdb */"
    },
    {
      "sha": "4b2b42e2de230b67e3b4046bb1da29f9681e28dc",
      "filename": "gdb/bcache.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/bcache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/bcache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bcache.h?ref=dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
      "patch": "@@ -136,6 +136,8 @@\n   \n */\n \n+namespace gdb {\n+\n struct bstring;\n \n struct bcache\n@@ -222,4 +224,6 @@ struct bcache\n   void expand_hash_table ();\n };\n \n+} /* namespace gdb */\n+\n #endif /* BCACHE_H */"
    },
    {
      "sha": "508628af1f73a99d66b0eec75788c042635432bb",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
      "patch": "@@ -3813,7 +3813,7 @@ check_types_equal (struct type *type1, struct type *type2,\n \n static bool\n check_types_worklist (std::vector<type_equality_entry> *worklist,\n-\t\t      struct bcache *cache)\n+\t\t      gdb::bcache *cache)\n {\n   while (!worklist->empty ())\n     {\n@@ -3849,7 +3849,7 @@ types_deeply_equal (struct type *type1, struct type *type2)\n   if (type1 == type2)\n     return true;\n \n-  struct bcache cache (nullptr, nullptr);\n+  gdb::bcache cache (nullptr, nullptr);\n   worklist.emplace_back (type1, type2);\n   return check_types_worklist (&worklist, &cache);\n }"
    },
    {
      "sha": "e500cf5cbe67f3246ebff74a6a53783adf73e497",
      "filename": "gdb/macrotab.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/macrotab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/macrotab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macrotab.c?ref=dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
      "patch": "@@ -40,7 +40,7 @@ struct macro_table\n \n   /* The bcache we should use to hold macro names, argument names, and\n      definitions, or zero if we should use xmalloc.  */\n-  struct bcache *bcache;\n+  gdb::bcache *bcache;\n \n   /* The main source file for this compilation unit --- the one whose\n      name was given to the compiler.  This is the root of the\n@@ -1025,7 +1025,7 @@ macro_for_each_in_scope (struct macro_source_file *file, int line,\n \n \n struct macro_table *\n-new_macro_table (struct obstack *obstack, struct bcache *b,\n+new_macro_table (struct obstack *obstack, gdb::bcache *b,\n \t\t struct compunit_symtab *cust)\n {\n   struct macro_table *t;"
    },
    {
      "sha": "83a7dfad23a63e628e65577c42abaa0818895c09",
      "filename": "gdb/macrotab.h",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/macrotab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/macrotab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macrotab.h?ref=dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
      "patch": "@@ -23,9 +23,12 @@\n #include \"gdbsupport/function-view.h\"\n \n struct obstack;\n-struct bcache;\n struct compunit_symtab;\n \n+namespace gdb {\n+struct bcache;\n+}\n+\n /* How do we represent a source location?  I mean, how should we\n    represent them within GDB; the user wants to use all sorts of\n    ambiguous abbreviations, like \"break 32\" and \"break foo.c:32\"\n@@ -170,7 +173,7 @@ struct macro_source_file\n    the same source location (although 'gcc -DFOO -UFOO -DFOO=2' does\n    do that in GCC 4.1.2.).  */\n struct macro_table *new_macro_table (struct obstack *obstack,\n-                                     struct bcache *bcache,\n+                                     gdb::bcache *bcache,\n \t\t\t\t     struct compunit_symtab *cust);\n \n "
    },
    {
      "sha": "1601cfe591f0b4d7031555e9d67f0b2faac0dd7b",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
      "patch": "@@ -244,11 +244,11 @@ struct objfile_per_bfd_storage\n \n   /* Byte cache for file names.  */\n \n-  struct bcache filename_cache;\n+  gdb::bcache filename_cache;\n \n   /* Byte cache for macros.  */\n \n-  struct bcache macro_cache;\n+  gdb::bcache macro_cache;\n \n   /* The gdbarch associated with the BFD.  Note that this gdbarch is\n      determined solely from BFD information, without looking at target"
    },
    {
      "sha": "a4281c80bfcd5a1456609e28373e8e0d4d3ce3c7",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=dfb65191d80afcc7d8ce79d3d9f92ea2e1ab3fc9",
      "patch": "@@ -120,7 +120,7 @@ class psymtab_storage\n   /* A byte cache where we can stash arbitrary \"chunks\" of bytes that\n      will not change.  */\n \n-  struct bcache psymbol_cache;\n+  gdb::bcache psymbol_cache;\n \n   /* Vectors of all partial symbols read in from file.  The actual data\n      is stored in the objfile_obstack.  */"
    }
  ]
}