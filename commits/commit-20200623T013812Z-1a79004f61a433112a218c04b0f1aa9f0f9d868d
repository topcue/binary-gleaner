{
  "sha": "1a79004f61a433112a218c04b0f1aa9f0f9d868d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWE3OTAwNGY2MWE0MzMxMTJhMjE4YzA0YjBmMWFhOWYwZjlkODY4ZA==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2020-06-22T08:11:18Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2020-06-23T01:38:12Z"
    },
    "message": "RISC-V: Generate ELF priv attributes if priv instruction are explicited used.\n\nWe should generate the ELF priv attributes only if,\n\n1. The priv attributes are already set in the assembly file.\n2. The CSR are explicited used.\n3. The privileged instruction are explicited used.\n\n* There are four privileged instruction defined in the v1.11 priv spec:\n`mret`, `sret`, `wfi` and `sfence.vma`.\n\n* `sfence.vm` is dropped in the v1.10 priv spec.\n\n* `uret` is actually a N-ext instruction.  So it is better to regard it as\nan user instruction rather than the priv instruction.\n\n* `hret` is used to return from traps in H-mode.  H-mode is removed since\nthe v1.10 priv spec, but probably be added in the new hypervisor spec.\nTherefore, `hret` should be controlled by the hypervisor spec rather than\npriv spec in the future.\n\n* `dret` is a debug instruction.  We should record the debug spec versions\nonce it is explicited used in the future.\n\n\tgas/\n\t* config/tc-riscv.c (explicit_priv_attr): Rename explicit_csr to\n\texplicit_priv_attr.  It used to indicate CSR or priv instructions are\n\texplictly used.\n\t(riscv_is_priv_insn): Return True if it is a privileged instruction.\n\t(riscv_ip): Call riscv_is_priv_insn to check whether the instruction\n\tis privileged or not.  If it is, then set explicit_priv_attr to TRUE.\n\t(riscv_write_out_attrs): Clarification of when to generate the elf\n\tpriv spec attributes.\n\n\t* testsuite/gas/riscv/attribute-11.s: Add comments.\n\t* testsuite/gas/riscv/attribute-14.s: New testcase.  Use symbol\n\t`priv_insn_<n>` to decide which priv instruction is expected to used.\n\t(<n> is a to g.)\n\t* testsuite/gas/riscv/attribute-14a.d: Likewise.\n\t* testsuite/gas/riscv/attribute-14b.d: Likewise.\n\t* testsuite/gas/riscv/attribute-14c.d: Likewise.\n\t* testsuite/gas/riscv/attribute-14d.d: Likewise.\n\t* testsuite/gas/riscv/attribute-14e.d: Likewise.",
    "tree": {
      "sha": "398fb787152c4427aa1f7dcfbc18a10f08b9f36c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/398fb787152c4427aa1f7dcfbc18a10f08b9f36c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1a79004f61a433112a218c04b0f1aa9f0f9d868d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a79004f61a433112a218c04b0f1aa9f0f9d868d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1a79004f61a433112a218c04b0f1aa9f0f9d868d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a79004f61a433112a218c04b0f1aa9f0f9d868d/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "c7c970e4c63f81479539220874a98aa74bc0e090",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c7c970e4c63f81479539220874a98aa74bc0e090",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c7c970e4c63f81479539220874a98aa74bc0e090"
    }
  ],
  "stats": {
    "total": 129,
    "additions": 123,
    "deletions": 6
  },
  "files": [
    {
      "sha": "7648a370a538c141e5beb271d96d01e5e24d3e16",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=1a79004f61a433112a218c04b0f1aa9f0f9d868d",
      "patch": "@@ -1,3 +1,23 @@\n+2020-06-23  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* config/tc-riscv.c (explicit_priv_attr): Rename explicit_csr to\n+\texplicit_priv_attr.  It used to indicate CSR or priv instructions are\n+\texplictly used.\n+\t(riscv_is_priv_insn): Return True if it is a privileged instruction.\n+\t(riscv_ip): Call riscv_is_priv_insn to check whether the instruction\n+\tis privileged or not.  If it is, then set explicit_priv_attr to TRUE.\n+\t(riscv_write_out_attrs): Clarification of when to generate the elf\n+\tpriv spec attributes.\n+\t* testsuite/gas/riscv/attribute-11.s: Add comments.\n+\t* testsuite/gas/riscv/attribute-14.s: New testcase.  Use symbol\n+\t`priv_insn_<n>` to decide which priv instruction is expected to used.\n+\t(<n> is a to e.)\n+\t* testsuite/gas/riscv/attribute-14a.d: Likewise.\n+\t* testsuite/gas/riscv/attribute-14b.d: Likewise.\n+\t* testsuite/gas/riscv/attribute-14c.d: Likewise.\n+\t* testsuite/gas/riscv/attribute-14d.d: Likewise.\n+\t* testsuite/gas/riscv/attribute-14e.d: Likewise.\n+\n 2020-06-22  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* config/tc-riscv.c (buf_size, buf): Remove the unused variables."
    },
    {
      "sha": "ca62f46adef0e49632ac5dee4e3dac1f6999d466",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 42,
      "deletions": 6,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=1a79004f61a433112a218c04b0f1aa9f0f9d868d",
      "patch": "@@ -356,8 +356,8 @@ static bfd_boolean start_assemble = FALSE;\n /* Indicate ELF attributes are explictly set.  */\n static bfd_boolean explicit_attr = FALSE;\n \n-/* Indicate CSR are explictly used.  */\n-static bfd_boolean explicit_csr = FALSE;\n+/* Indicate CSR or priv instructions are explictly used.  */\n+static bfd_boolean explicit_priv_attr = FALSE;\n \n /* Macros for encoding relaxation state for RVC branches and far jumps.  */\n #define RELAX_BRANCH_ENCODE(uncond, rvc, length)\t\\\n@@ -1766,6 +1766,35 @@ riscv_csr_read_only_check (insn_t insn)\n   return TRUE;\n }\n \n+/* Return True if it is a privileged instruction.  Otherwise, return FALSE.\n+\n+   uret is actually a N-ext instruction.  So it is better to regard it as\n+   an user instruction rather than the priv instruction.\n+\n+   hret is used to return from traps in H-mode.  H-mode is removed since\n+   the v1.10 priv spec, but probably be added in the new hypervisor spec.\n+   Therefore, hret should be controlled by the hypervisor spec rather than\n+   priv spec in the future.\n+\n+   dret is defined in the debug spec, so it should be checked in the future,\n+   too.  */\n+\n+static bfd_boolean\n+riscv_is_priv_insn (insn_t insn)\n+{\n+  return (((insn ^ MATCH_SRET) & MASK_SRET) == 0\n+\t  || ((insn ^ MATCH_MRET) & MASK_MRET) == 0\n+\t  || ((insn ^ MATCH_SFENCE_VMA) & MASK_SFENCE_VMA) == 0\n+\t  || ((insn ^ MATCH_WFI) & MASK_WFI) == 0\n+  /* The sfence.vm is dropped in the v1.10 priv specs, but we still need to\n+     check it here to keep the compatible.  Maybe we should issue warning\n+     if sfence.vm is used, but the priv spec newer than v1.10 is chosen.\n+     We already have a similar check for CSR, but not yet for instructions.\n+     It would be good if we could check the spec versions both for CSR and\n+     instructions, but not here.  */\n+\t  || ((insn ^ MATCH_SFENCE_VM) & MASK_SFENCE_VM) == 0);\n+}\n+\n /* This routine assembles an instruction into its binary format.  As a\n    side effect, it sets the global variable imm_reloc to the type of\n    relocation to do if one of the operands is an address expression.  */\n@@ -1833,6 +1862,9 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t      && !riscv_opts.rvc)\n \t\t    break;\n \n+\t\t  if (riscv_is_priv_insn (ip->insn_opcode))\n+\t\t    explicit_priv_attr = TRUE;\n+\n \t\t  /* Check if we write a read-only CSR by the CSR\n \t\t     instruction.  */\n \t\t  if (insn_with_csr\n@@ -2197,7 +2229,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \n \t    case 'E':\t\t/* Control register.  */\n \t      insn_with_csr = TRUE;\n-\t      explicit_csr = TRUE;\n+\t      explicit_priv_attr = TRUE;\n \t      if (reg_lookup (&s, RCLASS_CSR, &regno))\n \t\tINSERT_OPERAND (CSR, *ip, regno);\n \t      else\n@@ -3591,9 +3623,13 @@ riscv_write_out_attrs (void)\n       && !riscv_set_default_priv_spec (NULL))\n     return;\n \n-  /* If we already have set elf priv attributes, then generate them.\n-     Otherwise, don't generate them when no CSR are used.  */\n-  if (!explicit_csr)\n+  /* If we already have set elf priv attributes, then no need to do anything,\n+     assembler will generate them according to what you set.  Otherwise, don't\n+     generate or update them when no CSR and priv instructions are used.\n+     Generate the priv attributes according to default_priv_spec, which can be\n+     set by -mpriv-spec and --with-priv-spec, and be updated by the original\n+     priv attribute sets.  */\n+  if (!explicit_priv_attr)\n     return;\n \n   /* Re-write priv attributes by default_priv_spec.  */"
    },
    {
      "sha": "81367da4d493391685555d933b698578600817d3",
      "filename": "gas/testsuite/gas/riscv/attribute-11.s",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-11.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-11.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/attribute-11.s?ref=1a79004f61a433112a218c04b0f1aa9f0f9d868d",
      "patch": "@@ -1 +1,3 @@\n+\t# The csr is explicit used, so we need to generate the priv spec\n+\t# attributes even if the attributes are not set.\n \tcsrr a0, 0x0"
    },
    {
      "sha": "ddda6b996f838656d2a34dee989fd499794dca42",
      "filename": "gas/testsuite/gas/riscv/attribute-14.s",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/attribute-14.s?ref=1a79004f61a433112a218c04b0f1aa9f0f9d868d",
      "patch": "@@ -0,0 +1,19 @@\n+\t# The priv instruction is explicit used, so we need to generate\n+\t# the priv spec attributes even if the attributes are not set.\n+.ifdef priv_insn_a\n+\tmret\n+.endif\n+.ifdef priv_insn_b\n+\tsret\n+.endif\n+.ifdef priv_insn_c\n+\twfi\n+.endif\n+.ifdef priv_insn_d\n+\tsfence.vma\n+.endif\n+\n+\t# Obselete priv instruction.\n+.ifdef priv_insn_e\n+\tsfence.vm\n+.endif"
    },
    {
      "sha": "7b66f0faa930916de71d28d0d6f870956a345778",
      "filename": "gas/testsuite/gas/riscv/attribute-14a.d",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/attribute-14a.d?ref=1a79004f61a433112a218c04b0f1aa9f0f9d868d",
      "patch": "@@ -0,0 +1,8 @@\n+#as: -march-attr --defsym priv_insn_a=1\n+#readelf: -A\n+#source: attribute-14.s\n+Attribute Section: riscv\n+File Attributes\n+  Tag_RISCV_arch: [a-zA-Z0-9_\\\"].*\n+  Tag_RISCV_priv_spec: [0-9_\\\"].*\n+#..."
    },
    {
      "sha": "e044f4ff80da38640f9e3a568b0ecf300082a91d",
      "filename": "gas/testsuite/gas/riscv/attribute-14b.d",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/attribute-14b.d?ref=1a79004f61a433112a218c04b0f1aa9f0f9d868d",
      "patch": "@@ -0,0 +1,8 @@\n+#as: -march-attr --defsym priv_insn_b=1\n+#readelf: -A\n+#source: attribute-14.s\n+Attribute Section: riscv\n+File Attributes\n+  Tag_RISCV_arch: [a-zA-Z0-9_\\\"].*\n+  Tag_RISCV_priv_spec: [0-9_\\\"].*\n+#..."
    },
    {
      "sha": "6311a9d7e5106f31d6ed8e7dda51b081b9e4f8b2",
      "filename": "gas/testsuite/gas/riscv/attribute-14c.d",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14c.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14c.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/attribute-14c.d?ref=1a79004f61a433112a218c04b0f1aa9f0f9d868d",
      "patch": "@@ -0,0 +1,8 @@\n+#as: -march-attr --defsym priv_insn_c=1\n+#readelf: -A\n+#source: attribute-14.s\n+Attribute Section: riscv\n+File Attributes\n+  Tag_RISCV_arch: [a-zA-Z0-9_\\\"].*\n+  Tag_RISCV_priv_spec: [0-9_\\\"].*\n+#..."
    },
    {
      "sha": "f0f2d63b0875bc7b7d5aa6e73e7ed2f5a385bcff",
      "filename": "gas/testsuite/gas/riscv/attribute-14d.d",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14d.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14d.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/attribute-14d.d?ref=1a79004f61a433112a218c04b0f1aa9f0f9d868d",
      "patch": "@@ -0,0 +1,8 @@\n+#as: -march-attr --defsym priv_insn_d=1\n+#readelf: -A\n+#source: attribute-14.s\n+Attribute Section: riscv\n+File Attributes\n+  Tag_RISCV_arch: [a-zA-Z0-9_\\\"].*\n+  Tag_RISCV_priv_spec: [0-9_\\\"].*\n+#..."
    },
    {
      "sha": "47fdc2e2df9bbcf0b2a44a9d2753d4a5f75c9aeb",
      "filename": "gas/testsuite/gas/riscv/attribute-14e.d",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14e.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a79004f61a433112a218c04b0f1aa9f0f9d868d/gas/testsuite/gas/riscv/attribute-14e.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/attribute-14e.d?ref=1a79004f61a433112a218c04b0f1aa9f0f9d868d",
      "patch": "@@ -0,0 +1,8 @@\n+#as: -march-attr --defsym priv_insn_e=1\n+#readelf: -A\n+#source: attribute-14.s\n+Attribute Section: riscv\n+File Attributes\n+  Tag_RISCV_arch: [a-zA-Z0-9_\\\"].*\n+  Tag_RISCV_priv_spec: [0-9_\\\"].*\n+#..."
    }
  ]
}