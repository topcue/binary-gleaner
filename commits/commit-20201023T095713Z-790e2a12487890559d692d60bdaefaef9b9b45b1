{
  "sha": "790e2a12487890559d692d60bdaefaef9b9b45b1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzkwZTJhMTI0ODc4OTA1NTlkNjkyZDYwYmRhZWZhZWY5YjliNDViMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-08-14T13:50:48Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-10-23T09:57:13Z"
    },
    "message": "gdb: move Modula2 language class into a header file\n\nMove the m2_language class from m2-lang.c into m2-lang.h.  The benefit\nof this move is that we can remove trampoline functions.  Currently\nthe language implementation is split of different m2-* files with\nm2-lang.h including declaration for all the language implementation\nfunctions.\n\nCurrently the m2_language class in m2-lang.c has member functions that\nthen call the global functions declared in m2-lang.h.\n\nAfter this change the m2_language class is declared in m2-lang.h, and\nthe member functions are the implementations defined in all the m2-*\nfiles.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* m2-exp.y (m2_parse): Rename to...\n\t(m2_language::parser): ...this.  Update function signature.\n\t* m2-lang.c (m2_printchar): Renamed to m2_language::printchar.\n\t(m2_op_print): Rename to...\n\t(m2_language::op_print_tab): ...this, and make const.\n\t(exp_descriptor_modula2): Rename to...\n\t(m2_language::exp_descriptor_modula2): ...this.\n\t(class m2_language): Move to m2-lang.h.\n\t(m2_language::language_arch_info): New function, moved out of\n\tclass declaration.\n\t(m2_language::printchar): New function, body from m2_printchar.\n\t(m2_language::printstr): New function, moved out of class\n\tdeclaration.\n\t(m2_language::emitchar): Likewise.\n\t* m2-lang.h (m2_parse): Delete declaration.\n\t(m2_print_typedef): Delete declaration.\n\t(m2_value_print_inner): Delete declaration.\n\t(class m2_language): Class declaration moved from m2-lang.c,\n\tlarger functions are left in m2-lang.c.\n\t* m2-typeprint.c (m2_print_typedef): Rename to...\n\t(m2_language::print_typedef): ...this, and update function\n\tsignature.\n\t* m2-valprint.c (m2_value_print_inner): Rename to...\n\t(m2_language::value_print_inner): ...this, replace use of\n\tLA_PRINT_STRING with a direct call to printstr member function,\n\tand update recursive call.",
    "tree": {
      "sha": "6599b3ad35d4564009d20029a6b543258f175236",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6599b3ad35d4564009d20029a6b543258f175236"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/790e2a12487890559d692d60bdaefaef9b9b45b1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/790e2a12487890559d692d60bdaefaef9b9b45b1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/790e2a12487890559d692d60bdaefaef9b9b45b1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/790e2a12487890559d692d60bdaefaef9b9b45b1/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b01175fc46bbb9103bde88ec93236bcb6719c696",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b01175fc46bbb9103bde88ec93236bcb6719c696",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b01175fc46bbb9103bde88ec93236bcb6719c696"
    }
  ],
  "stats": {
    "total": 578,
    "additions": 308,
    "deletions": 270
  },
  "files": [
    {
      "sha": "e9ab8ec22264aa7df3182932a420a539b4c2d000",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=790e2a12487890559d692d60bdaefaef9b9b45b1",
      "patch": "@@ -1,3 +1,32 @@\n+2020-10-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* m2-exp.y (m2_parse): Rename to...\n+\t(m2_language::parser): ...this.  Update function signature.\n+\t* m2-lang.c (m2_printchar): Renamed to m2_language::printchar.\n+\t(m2_op_print): Rename to...\n+\t(m2_language::op_print_tab): ...this, and make const.\n+\t(exp_descriptor_modula2): Rename to...\n+\t(m2_language::exp_descriptor_modula2): ...this.\n+\t(class m2_language): Move to m2-lang.h.\n+\t(m2_language::language_arch_info): New function, moved out of\n+\tclass declaration.\n+\t(m2_language::printchar): New function, body from m2_printchar.\n+\t(m2_language::printstr): New function, moved out of class\n+\tdeclaration.\n+\t(m2_language::emitchar): Likewise.\n+\t* m2-lang.h (m2_parse): Delete declaration.\n+\t(m2_print_typedef): Delete declaration.\n+\t(m2_value_print_inner): Delete declaration.\n+\t(class m2_language): Class declaration moved from m2-lang.c,\n+\tlarger functions are left in m2-lang.c.\n+\t* m2-typeprint.c (m2_print_typedef): Rename to...\n+\t(m2_language::print_typedef): ...this, and update function\n+\tsignature.\n+\t* m2-valprint.c (m2_value_print_inner): Rename to...\n+\t(m2_language::value_print_inner): ...this, replace use of\n+\tLA_PRINT_STRING with a direct call to printstr member function,\n+\tand update recursive call.\n+\n 2020-10-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* language.c (default_is_string_type_p): Delete, implementation"
    },
    {
      "sha": "5924e895c7022573e7694b28774b06e717ea1d87",
      "filename": "gdb/m2-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/m2-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/m2-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-exp.y?ref=790e2a12487890559d692d60bdaefaef9b9b45b1",
      "patch": "@@ -1031,7 +1031,7 @@ yylex (void)\n }\n \n int\n-m2_parse (struct parser_state *par_state)\n+m2_language::parser (struct parser_state *par_state) const\n {\n   /* Setting up the parser state.  */\n   scoped_restore pstate_restore = make_scoped_restore (&pstate);"
    },
    {
      "sha": "2f671eff08f11e8d6d5f505fece4c492b8d8e848",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 150,
      "deletions": 252,
      "changes": 402,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=790e2a12487890559d692d60bdaefaef9b9b45b1",
      "patch": "@@ -29,19 +29,6 @@\n #include \"valprint.h\"\n #include \"gdbarch.h\"\n \n-static void m2_printchar (int, struct type *, struct ui_file *);\n-\n-/* FIXME:  This is a copy of the same function from c-exp.y.  It should\n-   be replaced with a true Modula version.  */\n-\n-static void\n-m2_printchar (int c, struct type *type, struct ui_file *stream)\n-{\n-  fputs_filtered (\"'\", stream);\n-  LA_EMIT_CHAR (c, type, stream, '\\'');\n-  fputs_filtered (\"'\", stream);\n-}\n-\n static struct value *\n evaluate_subexp_modula2 (struct type *expect_type, struct expression *exp,\n \t\t\t int *pos, enum noside noside)\n@@ -140,7 +127,7 @@ evaluate_subexp_modula2 (struct type *expect_type, struct expression *exp,\n \n /* Table of operators and their precedences for printing expressions.  */\n \n-static const struct op_print m2_op_print_tab[] =\n+const struct op_print m2_language::op_print_tab[] =\n {\n   {\"+\", BINOP_ADD, PREC_ADD, 0},\n   {\"+\", UNOP_PLUS, PREC_PREFIX, 0},\n@@ -185,7 +172,7 @@ enum m2_primitive_types {\n   nr_m2_primitive_types\n };\n \n-const struct exp_descriptor exp_descriptor_modula2 = \n+const struct exp_descriptor m2_language::exp_descriptor_modula2 =\n {\n   print_subexp_standard,\n   operator_length_standard,\n@@ -195,262 +182,173 @@ const struct exp_descriptor exp_descriptor_modula2 =\n   evaluate_subexp_modula2\n };\n \n-/* Class representing the M2 language.  */\n-\n-class m2_language : public language_defn\n-{\n-public:\n-  m2_language ()\n-    : language_defn (language_m2)\n-  { /* Nothing.  */ }\n-\n-  /* See language.h.  */\n-\n-  const char *name () const override\n-  { return \"modula-2\"; }\n-\n-  /* See language.h.  */\n-\n-  const char *natural_name () const override\n-  { return \"Modula-2\"; }\n-\n-  /* See language.h.  */\n-  void language_arch_info (struct gdbarch *gdbarch,\n-\t\t\t   struct language_arch_info *lai) const override\n-  {\n-    const struct builtin_m2_type *builtin = builtin_m2_type (gdbarch);\n-\n-    lai->string_char_type = builtin->builtin_char;\n-    lai->primitive_type_vector\n-      = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_m2_primitive_types + 1,\n-\t\t\t\tstruct type *);\n-\n-    lai->primitive_type_vector [m2_primitive_type_char]\n-      = builtin->builtin_char;\n-    lai->primitive_type_vector [m2_primitive_type_int]\n-      = builtin->builtin_int;\n-    lai->primitive_type_vector [m2_primitive_type_card]\n-      = builtin->builtin_card;\n-    lai->primitive_type_vector [m2_primitive_type_real]\n-      = builtin->builtin_real;\n-    lai->primitive_type_vector [m2_primitive_type_bool]\n-      = builtin->builtin_bool;\n-\n-    lai->bool_type_symbol = \"BOOLEAN\";\n-    lai->bool_type_default = builtin->builtin_bool;\n-  }\n-\n-  /* See language.h.  */\n-\n-  void print_type (struct type *type, const char *varstring,\n-\t\t   struct ui_file *stream, int show, int level,\n-\t\t   const struct type_print_options *flags) const override\n-  {\n-    m2_print_type (type, varstring, stream, show, level, flags);\n-  }\n-\n-  /* See language.h.  */\n-\n-  void value_print_inner\n-\t(struct value *val, struct ui_file *stream, int recurse,\n-\t const struct value_print_options *options) const override\n-  {\n-    return m2_value_print_inner (val, stream, recurse, options);\n-  }\n-\n-  /* See language.h.  */\n-\n-  int parser (struct parser_state *ps) const override\n-  {\n-    return m2_parse (ps);\n-  }\n-\n-  /* See language.h.  */\n-\n-  void emitchar (int ch, struct type *chtype,\n-\t\t struct ui_file *stream, int quoter) const override\n-  {\n-    ch &= 0xFF;\t\t\t/* Avoid sign bit follies.  */\n-\n-    if (PRINT_LITERAL_FORM (ch))\n-      {\n-\tif (ch == '\\\\' || ch == quoter)\n-\t  fputs_filtered (\"\\\\\", stream);\n-\tfprintf_filtered (stream, \"%c\", ch);\n-      }\n-    else\n-      {\n-\tswitch (ch)\n-\t  {\n-\t  case '\\n':\n-\t    fputs_filtered (\"\\\\n\", stream);\n-\t    break;\n-\t  case '\\b':\n-\t    fputs_filtered (\"\\\\b\", stream);\n-\t    break;\n-\t  case '\\t':\n-\t    fputs_filtered (\"\\\\t\", stream);\n-\t    break;\n-\t  case '\\f':\n-\t    fputs_filtered (\"\\\\f\", stream);\n-\t    break;\n-\t  case '\\r':\n-\t    fputs_filtered (\"\\\\r\", stream);\n-\t    break;\n-\t  case '\\033':\n-\t    fputs_filtered (\"\\\\e\", stream);\n-\t    break;\n-\t  case '\\007':\n-\t    fputs_filtered (\"\\\\a\", stream);\n-\t    break;\n-\t  default:\n-\t    fprintf_filtered (stream, \"\\\\%.3o\", (unsigned int) ch);\n-\t    break;\n-\t  }\n-      }\n-  }\n-\n-  /* See language.h.  */\n-\n-  void printchar (int ch, struct type *chtype,\n-\t\t  struct ui_file *stream) const override\n-  {\n-    m2_printchar (ch, chtype, stream);\n-  }\n-\n-  /* See language.h.  */\n-\n-  void printstr (struct ui_file *stream, struct type *elttype,\n-\t\t const gdb_byte *string, unsigned int length,\n-\t\t const char *encoding, int force_ellipses,\n-\t\t const struct value_print_options *options) const override\n-  {\n-    unsigned int i;\n-    unsigned int things_printed = 0;\n-    int in_quotes = 0;\n-    int need_comma = 0;\n-\n-    if (length == 0)\n-      {\n-\tfputs_filtered (\"\\\"\\\"\", gdb_stdout);\n-\treturn;\n-      }\n-\n-    for (i = 0; i < length && things_printed < options->print_max; ++i)\n-      {\n-\t/* Position of the character we are examining\n-\t   to see whether it is repeated.  */\n-\tunsigned int rep1;\n-\t/* Number of repetitions we have detected so far.  */\n-\tunsigned int reps;\n-\n-\tQUIT;\n-\n-\tif (need_comma)\n-\t  {\n-\t    fputs_filtered (\", \", stream);\n-\t    need_comma = 0;\n-\t  }\n-\n-\trep1 = i + 1;\n-\treps = 1;\n-\twhile (rep1 < length && string[rep1] == string[i])\n-\t  {\n-\t    ++rep1;\n-\t    ++reps;\n-\t  }\n-\n-\tif (reps > options->repeat_count_threshold)\n-\t  {\n-\t    if (in_quotes)\n-\t      {\n-\t\tfputs_filtered (\"\\\", \", stream);\n-\t\tin_quotes = 0;\n-\t      }\n-\t    m2_printchar (string[i], elttype, stream);\n-\t    fprintf_filtered (stream, \" <repeats %u times>\", reps);\n-\t    i = rep1 - 1;\n-\t    things_printed += options->repeat_count_threshold;\n-\t    need_comma = 1;\n-\t  }\n-\telse\n-\t  {\n-\t    if (!in_quotes)\n-\t      {\n-\t\tfputs_filtered (\"\\\"\", stream);\n-\t\tin_quotes = 1;\n-\t      }\n-\t    LA_EMIT_CHAR (string[i], elttype, stream, '\"');\n-\t    ++things_printed;\n-\t  }\n-      }\n-\n-    /* Terminate the quotes if necessary.  */\n-    if (in_quotes)\n-      fputs_filtered (\"\\\"\", stream);\n+/* Single instance of the M2 language.  */\n \n-    if (force_ellipses || i < length)\n-      fputs_filtered (\"...\", stream);\n-  }\n+static m2_language m2_language_defn;\n \n-  /* See language.h.  */\n+/* See language.h.  */\n \n-  void print_typedef (struct type *type, struct symbol *new_symbol,\n-\t\t      struct ui_file *stream) const override\n-  {\n-    m2_print_typedef (type, new_symbol, stream);\n-  }\n+void\n+m2_language::language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t\t struct language_arch_info *lai) const\n+{\n+  const struct builtin_m2_type *builtin = builtin_m2_type (gdbarch);\n+\n+  lai->string_char_type = builtin->builtin_char;\n+  lai->primitive_type_vector\n+    = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_m2_primitive_types + 1,\n+\t\t\t      struct type *);\n+\n+  lai->primitive_type_vector [m2_primitive_type_char]\n+    = builtin->builtin_char;\n+  lai->primitive_type_vector [m2_primitive_type_int]\n+    = builtin->builtin_int;\n+  lai->primitive_type_vector [m2_primitive_type_card]\n+    = builtin->builtin_card;\n+  lai->primitive_type_vector [m2_primitive_type_real]\n+    = builtin->builtin_real;\n+  lai->primitive_type_vector [m2_primitive_type_bool]\n+    = builtin->builtin_bool;\n+\n+  lai->bool_type_symbol = \"BOOLEAN\";\n+  lai->bool_type_default = builtin->builtin_bool;\n+}\n \n-  /* See language.h.  */\n+/* See languge.h.  */\n \n-  bool is_string_type_p (struct type *type) const override\n-  {\n-    type = check_typedef (type);\n-    if (type->code () == TYPE_CODE_ARRAY\n-\t&& TYPE_LENGTH (type) > 0\n-\t&& TYPE_LENGTH (TYPE_TARGET_TYPE (type)) > 0)\n-      {\n-\tstruct type *elttype = check_typedef (TYPE_TARGET_TYPE (type));\n+void\n+m2_language::printchar (int c, struct type *type,\n+\t\t\tstruct ui_file *stream) const\n+{\n+  fputs_filtered (\"'\", stream);\n+  emitchar (c, type, stream, '\\'');\n+  fputs_filtered (\"'\", stream);\n+}\n \n-\tif (TYPE_LENGTH (elttype) == 1\n-\t    && (elttype->code () == TYPE_CODE_INT\n-\t\t|| elttype->code () == TYPE_CODE_CHAR))\n-\t  return true;\n-      }\n+/* See language.h.  */\n \n-    return false;\n-  }\n+void\n+m2_language::printstr (struct ui_file *stream, struct type *elttype,\n+\t\t\tconst gdb_byte *string, unsigned int length,\n+\t\t\tconst char *encoding, int force_ellipses,\n+\t\t\tconst struct value_print_options *options) const\n+{\n+  unsigned int i;\n+  unsigned int things_printed = 0;\n+  int in_quotes = 0;\n+  int need_comma = 0;\n \n-  /* See language.h.  */\n+  if (length == 0)\n+    {\n+      fputs_filtered (\"\\\"\\\"\", gdb_stdout);\n+      return;\n+    }\n \n-  bool c_style_arrays_p () const override\n-  { return false; }\n+  for (i = 0; i < length && things_printed < options->print_max; ++i)\n+    {\n+      /* Position of the character we are examining\n+\t to see whether it is repeated.  */\n+      unsigned int rep1;\n+      /* Number of repetitions we have detected so far.  */\n+      unsigned int reps;\n \n-  /* See language.h.  Despite not having C-style arrays, Modula-2 uses 0\n-     for its string lower bounds.  */\n+      QUIT;\n \n-  char string_lower_bound () const override\n-  { return 0; }\n+      if (need_comma)\n+\t{\n+\t  fputs_filtered (\", \", stream);\n+\t  need_comma = 0;\n+\t}\n \n-  /* See language.h.  */\n+      rep1 = i + 1;\n+      reps = 1;\n+      while (rep1 < length && string[rep1] == string[i])\n+\t{\n+\t  ++rep1;\n+\t  ++reps;\n+\t}\n \n-  bool range_checking_on_by_default () const override\n-  { return true; }\n+      if (reps > options->repeat_count_threshold)\n+\t{\n+\t  if (in_quotes)\n+\t    {\n+\t      fputs_filtered (\"\\\", \", stream);\n+\t      in_quotes = 0;\n+\t    }\n+\t  printchar (string[i], elttype, stream);\n+\t  fprintf_filtered (stream, \" <repeats %u times>\", reps);\n+\t  i = rep1 - 1;\n+\t  things_printed += options->repeat_count_threshold;\n+\t  need_comma = 1;\n+\t}\n+      else\n+\t{\n+\t  if (!in_quotes)\n+\t    {\n+\t      fputs_filtered (\"\\\"\", stream);\n+\t      in_quotes = 1;\n+\t    }\n+\t  emitchar (string[i], elttype, stream, '\"');\n+\t  ++things_printed;\n+\t}\n+    }\n \n-  /* See language.h.  */\n+  /* Terminate the quotes if necessary.  */\n+  if (in_quotes)\n+    fputs_filtered (\"\\\"\", stream);\n \n-  const struct exp_descriptor *expression_ops () const override\n-  { return &exp_descriptor_modula2; }\n+  if (force_ellipses || i < length)\n+    fputs_filtered (\"...\", stream);\n+}\n \n-  /* See language.h.  */\n+/* See language.h.  */\n \n-  const struct op_print *opcode_print_table () const override\n-  { return m2_op_print_tab; }\n-};\n+void\n+m2_language::emitchar (int ch, struct type *chtype,\n+\t\t       struct ui_file *stream, int quoter) const\n+{\n+  ch &= 0xFF;\t\t\t/* Avoid sign bit follies.  */\n \n-/* Single instance of the M2 language.  */\n+  if (PRINT_LITERAL_FORM (ch))\n+    {\n+      if (ch == '\\\\' || ch == quoter)\n+\tfputs_filtered (\"\\\\\", stream);\n+      fprintf_filtered (stream, \"%c\", ch);\n+    }\n+  else\n+    {\n+      switch (ch)\n+\t{\n+\tcase '\\n':\n+\t  fputs_filtered (\"\\\\n\", stream);\n+\t  break;\n+\tcase '\\b':\n+\t  fputs_filtered (\"\\\\b\", stream);\n+\t  break;\n+\tcase '\\t':\n+\t  fputs_filtered (\"\\\\t\", stream);\n+\t  break;\n+\tcase '\\f':\n+\t  fputs_filtered (\"\\\\f\", stream);\n+\t  break;\n+\tcase '\\r':\n+\t  fputs_filtered (\"\\\\r\", stream);\n+\t  break;\n+\tcase '\\033':\n+\t  fputs_filtered (\"\\\\e\", stream);\n+\t  break;\n+\tcase '\\007':\n+\t  fputs_filtered (\"\\\\a\", stream);\n+\t  break;\n+\tdefault:\n+\t  fprintf_filtered (stream, \"\\\\%.3o\", (unsigned int) ch);\n+\t  break;\n+\t}\n+    }\n+}\n \n-static m2_language m2_language_defn;\n+/* Called during architecture gdbarch initialisation to create language\n+   specific types.  */\n \n static void *\n build_m2_types (struct gdbarch *gdbarch)"
    },
    {
      "sha": "3cf32587030fbbe92944df405797f0d24b275357",
      "filename": "gdb/m2-lang.h",
      "status": "modified",
      "additions": 120,
      "deletions": 10,
      "changes": 130,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/m2-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/m2-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.h?ref=790e2a12487890559d692d60bdaefaef9b9b45b1",
      "patch": "@@ -23,23 +23,13 @@\n struct type_print_options;\n struct parser_state;\n \n-extern int m2_parse (struct parser_state *); /* Defined in m2-exp.y */\n-\n /* Defined in m2-typeprint.c */\n extern void m2_print_type (struct type *, const char *, struct ui_file *, int,\n \t\t\t   int, const struct type_print_options *);\n \n-extern void m2_print_typedef (struct type *, struct symbol *,\n-\t\t\t      struct ui_file *);\n-\n extern int m2_is_long_set (struct type *type);\n extern int m2_is_unbounded_array (struct type *type);\n \n-/* Implement la_value_print_inner for Modula-2.  */\n-\n-extern void m2_value_print_inner (struct value *, struct ui_file *, int,\n-\t\t\t\t  const struct value_print_options *);\n-\n extern int get_long_set_bounds (struct type *type, LONGEST *low,\n \t\t\t\tLONGEST *high);\n \n@@ -57,4 +47,124 @@ struct builtin_m2_type\n /* Return the Modula-2 type table for the specified architecture.  */\n extern const struct builtin_m2_type *builtin_m2_type (struct gdbarch *gdbarch);\n \n+/* Class representing the M2 language.  */\n+\n+class m2_language : public language_defn\n+{\n+public:\n+  m2_language ()\n+    : language_defn (language_m2)\n+  { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+\n+  const char *name () const override\n+  { return \"modula-2\"; }\n+\n+  /* See language.h.  */\n+\n+  const char *natural_name () const override\n+  { return \"Modula-2\"; }\n+\n+  /* See language.h.  */\n+\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override;\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    m2_print_type (type, varstring, stream, show, level, flags);\n+  }\n+\n+  /* See language.h.  */\n+\n+  void value_print_inner (struct value *val, struct ui_file *stream,\n+\t\t\t  int recurse,\n+\t\t\t  const struct value_print_options *options) const override;\n+\n+  /* See language.h.  */\n+\n+  int parser (struct parser_state *ps) const override;\n+\n+  /* See language.h.  */\n+\n+  void emitchar (int ch, struct type *chtype,\n+\t\t struct ui_file *stream, int quoter) const override;\n+\n+  /* See language.h.  */\n+\n+  void printchar (int ch, struct type *chtype,\n+\t\t  struct ui_file *stream) const override;\n+\n+  /* See language.h.  */\n+\n+  void printstr (struct ui_file *stream, struct type *elttype,\n+\t\t const gdb_byte *string, unsigned int length,\n+\t\t const char *encoding, int force_ellipses,\n+\t\t const struct value_print_options *options) const override;\n+\n+  /* See language.h.  */\n+\n+  void print_typedef (struct type *type, struct symbol *new_symbol,\n+\t\t      struct ui_file *stream) const override;\n+\n+  /* See language.h.  */\n+\n+  bool is_string_type_p (struct type *type) const override\n+  {\n+    type = check_typedef (type);\n+    if (type->code () == TYPE_CODE_ARRAY\n+\t&& TYPE_LENGTH (type) > 0\n+\t&& TYPE_LENGTH (TYPE_TARGET_TYPE (type)) > 0)\n+      {\n+\tstruct type *elttype = check_typedef (TYPE_TARGET_TYPE (type));\n+\n+\tif (TYPE_LENGTH (elttype) == 1\n+\t    && (elttype->code () == TYPE_CODE_INT\n+\t\t|| elttype->code () == TYPE_CODE_CHAR))\n+\t  return true;\n+      }\n+\n+    return false;\n+  }\n+\n+  /* See language.h.  */\n+\n+  bool c_style_arrays_p () const override\n+  { return false; }\n+\n+  /* See language.h.  Despite not having C-style arrays, Modula-2 uses 0\n+     for its string lower bounds.  */\n+\n+  char string_lower_bound () const override\n+  { return 0; }\n+\n+  /* See language.h.  */\n+\n+  bool range_checking_on_by_default () const override\n+  { return true; }\n+\n+  /* See language.h.  */\n+\n+  const struct exp_descriptor *expression_ops () const override\n+  { return &exp_descriptor_modula2; }\n+\n+  /* See language.h.  */\n+\n+  const struct op_print *opcode_print_table () const override\n+  { return op_print_tab; }\n+\n+private:\n+  /* Table of expression handling functions for use by EXPRESSION_OPS\n+     member function.  */\n+  static const struct exp_descriptor exp_descriptor_modula2;\n+\n+  /* Table of opcode data for use by OPCODE_PRINT_TABLE member function.  */\n+  static const struct op_print op_print_tab[];\n+};\n+\n #endif /* M2_LANG_H */"
    },
    {
      "sha": "dbe112c4fcc2084f5b288ce04d639ac908cf4539",
      "filename": "gdb/m2-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/m2-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/m2-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-typeprint.c?ref=790e2a12487890559d692d60bdaefaef9b9b45b1",
      "patch": "@@ -158,8 +158,8 @@ m2_print_type (struct type *type, const char *varstring,\n    which to print.  */\n \n void\n-m2_print_typedef (struct type *type, struct symbol *new_symbol,\n-\t\t  struct ui_file *stream)\n+m2_language::print_typedef (struct type *type, struct symbol *new_symbol,\n+\t\t\t    struct ui_file *stream) const\n {\n   type = check_typedef (type);\n   fprintf_filtered (stream, \"TYPE \");"
    },
    {
      "sha": "fdccbaf500d30ad62b00d1972b042fe6272e10e0",
      "filename": "gdb/m2-valprint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/m2-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/790e2a12487890559d692d60bdaefaef9b9b45b1/gdb/m2-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-valprint.c?ref=790e2a12487890559d692d60bdaefaef9b9b45b1",
      "patch": "@@ -298,8 +298,9 @@ static const struct generic_val_print_decorations m2_decorations =\n /* See m2-lang.h.  */\n \n void\n-m2_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n-\t\t      const struct value_print_options *options)\n+m2_language::value_print_inner (struct value *val, struct ui_file *stream,\n+\t\t\t\tint recurse,\n+\t\t\t\tconst struct value_print_options *options) const\n {\n   unsigned len;\n   struct type *elttype;\n@@ -336,8 +337,8 @@ m2_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n \t\t  len = temp_len;\n \t\t}\n \n-\t      LA_PRINT_STRING (stream, TYPE_TARGET_TYPE (type),\n-\t\t\t       valaddr, len, NULL, 0, options);\n+\t      printstr (stream, TYPE_TARGET_TYPE (type), valaddr, len,\n+\t\t\tNULL, 0, options);\n \t    }\n \t  else\n \t    {\n@@ -445,7 +446,7 @@ m2_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n       if (TYPE_LENGTH (type) == TYPE_LENGTH (TYPE_TARGET_TYPE (type)))\n \t{\n \t  struct value *v = value_cast (TYPE_TARGET_TYPE (type), val);\n-\t  m2_value_print_inner (v, stream, recurse, options);\n+\t  value_print_inner (v, stream, recurse, options);\n \t  break;\n \t}\n       /* FALLTHROUGH */"
    }
  ]
}