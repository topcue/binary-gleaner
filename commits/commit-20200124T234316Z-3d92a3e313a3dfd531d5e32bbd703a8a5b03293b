{
  "sha": "3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Q5MmEzZTMxM2EzZGZkNTMxZDVlMzJiYmQ3MDNhOGE1YjAzMjkzYg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-06T10:17:05Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-01-24T23:43:16Z"
    },
    "message": "gdb: Don't reorder line table entries too much when sorting.\n\nDon't reorder line table entries for the same address when sorting the\nline table, maintain the compiler given line order.  Usually this will\nreflect the order in which lines are conceptually encountered at a\ngiven address.\n\nConsider this example:\n\n/* 1  */    volatile int global_var;\n/* 2  */    int  __attribute__ ((noinline))\n/* 3  */    bar ()\n/* 4  */    {\n/* 5  */      return global_var;\n/* 6  */    }\n/* 7  */    static inline int __attribute__ ((always_inline))\n/* 8  */    foo ()\n/* 9  */    {\n/* 10 */      return bar ();\n/* 11 */    }\n/* 12 */    int\n/* 13 */    main ()\n/* 14 */    {\n/* 15 */      global_var = 0;\n/* 16 */      return foo ();\n/* 17 */    }\n\nGCC 10 currently generates a line table like this (as shown by\nobjdump):\n\n  CU: ./test.c:\n  File name          Line number    Starting address\n  test.c                       4            0x4004b0\n  test.c                       5            0x4004b0\n  test.c                       6            0x4004b6\n  test.c                       6            0x4004b7\n\n  test.c                      14            0x4003b0\n  test.c                      15            0x4003b0\n  test.c                      16            0x4003ba\n  test.c                      10            0x4003ba\n  test.c                      10            0x4003c1\n\nThe interesting entries are those for lines 16 and 10 at address\n0x4003ba, these represent the call to foo and the inlined body of\nfoo.\n\nWith the current line table sorting GDB builds the line table like\nthis (as shown by 'maintenance info line-table'):\n\n  INDEX    LINE ADDRESS\n  0          14 0x00000000004003b0\n  1          15 0x00000000004003b0\n  2          10 0x00000000004003ba\n  3          16 0x00000000004003ba\n  4         END 0x00000000004003c1\n  5           4 0x00000000004004b0\n  6           5 0x00000000004004b0\n  7         END 0x00000000004004b7\n\nNotice that entries 2 and 3 for lines 10 and 16 are now in a different\norder to the line table as given by the compiler.  With this patch\napplied the order is now:\n\n  INDEX    LINE ADDRESS\n  0          14 0x00000000004003b0\n  1          15 0x00000000004003b0\n  2          16 0x00000000004003ba\n  3          10 0x00000000004003ba\n  4         END 0x00000000004003c1\n  5           4 0x00000000004004b0\n  6           5 0x00000000004004b0\n  7         END 0x00000000004004b7\n\nNotice that entries 2 and 3 are now in their original order again.\n\nThe consequence of the incorrect ordering is that when stepping\nthrough inlined functions GDB will display the wrong line for the\ninner most frame.  Here's a GDB session before this patch is applied:\n\n  Starting program: /home/andrew/tmp/inline/test\n\n  Temporary breakpoint 1, main () at test.c:15\n  15\t/* 15 */      global_var = 0;\n  (gdb) step\n  16\t/* 16 */      return foo ();\n  (gdb) step\n  foo () at test.c:16\n  16\t/* 16 */      return foo ();\n  (gdb) step\n  bar () at test.c:5\n  5\t/* 5  */      return global_var;\n\nThe step from line 15 to 16 was fine, but the next step should have\ntaken us to line 10, instead we are left at line 16.  The final step\nto line 5 is as expected.\n\nWith this patch applied the session goes better:\n\n  Starting program: /home/andrew/tmp/inline/test\n\n  Temporary breakpoint 1, main () at test.c:15\n  15\t/* 15 */      global_var = 0;\n  (gdb) step\n  16\t/* 16 */      return foo ();\n  (gdb) step\n  foo () at test.c:10\n  10\t/* 10 */      return bar ();\n  (gdb) step\n  bar () at test.c:5\n  5\t/* 5  */      return global_var;\n\nWe now visit the lines as 15, 16, 10, 5 as we would like.\n\nThe reason for this issue is that the inline frame unwinder is\ndetecting that foo is inlined in main.  When we stop at the shared\naddress 0x4003ba the inline frame unwinder first shows us the outer\nframe, this information is extracted from the DWARF's\nDW_TAG_inlined_subroutine entries and passed via GDB's block data.\n\nWhen we step again the inlined frame unwinder moves us up the call\nstack to the inner most frame at which point the frame is displayed as\nnormal, with the location for the address being looked up in the line\ntable.\n\nAs GDB uses the last line table entry for an address as \"the\" line to\nreport for that address it is critical that GDB maintain the order of\nthe line table entries.  In the first case, by reordering the line\ntable we report the wrong location.\n\nI had to make a small adjustment in find_pc_sect_line in order to\ncorrectly find the previous line in the line table.  In some line\ntables I was seeing an actual line entry and an end of sequence marker\nat the same address, before this commit these would reorder to move\nthe end of sequence marker before the line entry (end of sequence has\nline number 0).  Now the end of sequence marker remains in its correct\nlocation, and in order to find a previous line we should step backward\nover any end of sequence markers.\n\nAs an example, the binary:\n  gdb/testsuite/outputs/gdb.dwarf2/dw2-ranges-func/dw2-ranges-func-lo-cold\n\nHas this line table before the patch:\n\n  INDEX    LINE ADDRESS\n  0          48 0x0000000000400487\n  1         END 0x000000000040048e\n  2          52 0x000000000040048e\n  3          54 0x0000000000400492\n  4          56 0x0000000000400497\n  5         END 0x000000000040049a\n  6          62 0x000000000040049a\n  7         END 0x00000000004004a1\n  8          66 0x00000000004004a1\n  9          68 0x00000000004004a5\n  10         70 0x00000000004004aa\n  11         72 0x00000000004004b9\n  12        END 0x00000000004004bc\n  13         76 0x00000000004004bc\n  14         78 0x00000000004004c0\n  15         80 0x00000000004004c5\n  16        END 0x00000000004004cc\n\nAnd after this patch:\n\n  INDEX    LINE ADDRESS\n  0          48 0x0000000000400487\n  1          52 0x000000000040048e\n  2         END 0x000000000040048e\n  3          54 0x0000000000400492\n  4          56 0x0000000000400497\n  5         END 0x000000000040049a\n  6          62 0x000000000040049a\n  7          66 0x00000000004004a1\n  8         END 0x00000000004004a1\n  9          68 0x00000000004004a5\n  10         70 0x00000000004004aa\n  11         72 0x00000000004004b9\n  12        END 0x00000000004004bc\n  13         76 0x00000000004004bc\n  14         78 0x00000000004004c0\n  15         80 0x00000000004004c5\n  16        END 0x00000000004004cc\n\nWhen calling find_pc_sect_line with the address 0x000000000040048e, in\nboth cases we find entry #3, we then try to find the previous entry,\nwhich originally found this entry '2         52 0x000000000040048e',\nafter the patch it finds '2         END 0x000000000040048e', which\ncases the lookup to fail.\n\nBy skipping the END marker after this patch we get back to the correct\nentry, which is now #1: '1          52 0x000000000040048e', and\neverything works again.\n\ngdb/ChangeLog:\n\n\t* buildsym.c (lte_is_less_than): Delete.\n\t(buildsym_compunit::end_symtab_with_blockvector): Create local\n\tlambda function to sort line table entries, and use\n\tstd::stable_sort instead of std::sort.\n\t* symtab.c (find_pc_sect_line): Skip backward over end of sequence\n\tmarkers when looking for a previous line.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/dw2-inline-stepping.c: New file.\n\t* gdb.dwarf2/dw2-inline-stepping.exp: New file.\n\nChange-Id: Ia0309494be4cfd9dcc554f30209477f5f040b21b",
    "tree": {
      "sha": "85048807bfc58811dadd8194a718422f1337614f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/85048807bfc58811dadd8194a718422f1337614f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "94a72be7086fa1870eca83d4d6f55cadf48f66b2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94a72be7086fa1870eca83d4d6f55cadf48f66b2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/94a72be7086fa1870eca83d4d6f55cadf48f66b2"
    }
  ],
  "stats": {
    "total": 252,
    "additions": 227,
    "deletions": 25
  },
  "files": [
    {
      "sha": "5dd516538a984d0450775c4ab1fc549c947ef3b0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
      "patch": "@@ -1,3 +1,12 @@\n+2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* buildsym.c (lte_is_less_than): Delete.\n+\t(buildsym_compunit::end_symtab_with_blockvector): Create local\n+\tlambda function to sort line table entries, and use\n+\tstd::stable_sort instead of std::sort.\n+\t* symtab.c (find_pc_sect_line): Skip backward over end of sequence\n+\tmarkers when looking for a previous line.\n+\n 2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* dwarf2read.c (lnp_state_machine::record_line): Include"
    },
    {
      "sha": "4965b552b32ffe52fd469dd179a3a1ab92aad3f5",
      "filename": "gdb/buildsym.c",
      "status": "modified",
      "additions": 16,
      "deletions": 24,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/buildsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/buildsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.c?ref=3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
      "patch": "@@ -719,23 +719,6 @@ buildsym_compunit::record_line (struct subfile *subfile, int line,\n   e->pc = pc;\n }\n \n-/* Needed in order to sort line tables from IBM xcoff files.  Sigh!  */\n-\n-static bool\n-lte_is_less_than (const linetable_entry &ln1, const linetable_entry &ln2)\n-{\n-  /* Note: this code does not assume that CORE_ADDRs can fit in ints.\n-     Please keep it that way.  */\n-  if (ln1.pc < ln2.pc)\n-    return true;\n-\n-  if (ln1.pc > ln2.pc)\n-    return false;\n-\n-  /* If pc equal, sort by line.  I'm not sure whether this is optimum\n-     behavior (see comment at struct linetable in symtab.h).  */\n-  return ln1.line < ln2.line;\n-}\n \f\n /* Subroutine of end_symtab to simplify it.  Look for a subfile that\n    matches the main source file's basename.  If there is only one, and\n@@ -953,14 +936,23 @@ buildsym_compunit::end_symtab_with_blockvector (struct block *static_block,\n \t  linetablesize = sizeof (struct linetable) +\n \t    subfile->line_vector->nitems * sizeof (struct linetable_entry);\n \n-\t  /* Like the pending blocks, the line table may be\n-\t     scrambled in reordered executables.  Sort it if\n-\t     OBJF_REORDERED is true.  */\n+\t  const auto lte_is_less_than\n+\t    = [] (const linetable_entry &ln1,\n+\t\t  const linetable_entry &ln2) -> bool\n+\t      {\n+\t\treturn (ln1.pc < ln2.pc);\n+\t      };\n+\n+\t  /* Like the pending blocks, the line table may be scrambled in\n+\t     reordered executables.  Sort it if OBJF_REORDERED is true.  It\n+\t     is important to preserve the order of lines at the same\n+\t     address, as this maintains the inline function caller/callee\n+\t     relationships, this is why std::stable_sort is used.  */\n \t  if (m_objfile->flags & OBJF_REORDERED)\n-\t    std::sort (subfile->line_vector->item,\n-\t\t       subfile->line_vector->item\n-\t\t\t + subfile->line_vector->nitems,\n-\t\t       lte_is_less_than);\n+\t    std::stable_sort (subfile->line_vector->item,\n+\t\t\t      subfile->line_vector->item\n+\t\t\t      + subfile->line_vector->nitems,\n+\t\t\t      lte_is_less_than);\n \t}\n \n       /* Allocate a symbol table if necessary.  */"
    },
    {
      "sha": "f456f4d852df46299e715a8166cc09febb9c0f92",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
      "patch": "@@ -3222,7 +3222,12 @@ find_pc_sect_line (CORE_ADDR pc, struct obj_section *section, int notcurrent)\n       struct linetable_entry *last = item + len;\n       item = std::upper_bound (first, last, pc, pc_compare);\n       if (item != first)\n-\tprev = item - 1;\t\t/* Found a matching item.  */\n+\t{\n+\t  /* Found a matching item.  Skip backwards over any end of\n+\t     sequence markers.  */\n+\t  for (prev = item - 1; prev->line == 0 && prev != first; prev--)\n+\t    /* Nothing.  */;\n+\t}\n \n       /* At this point, prev points at the line whose start addr is <= pc, and\n          item points at the next line.  If we ran off the end of the linetable"
    },
    {
      "sha": "07853155db78023f77303e8720b6975ae62f62d7",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.dwarf2/dw2-inline-stepping.c: New file.\n+\t* gdb.dwarf2/dw2-inline-stepping.exp: New file.\n+\n 2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.base/maint.exp: Update line table parsing test."
    },
    {
      "sha": "c32e3d0b3e1599cfc6ad4f90955fc5994e82ce3f",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.c",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.c?ref=3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
      "patch": "@@ -0,0 +1,45 @@\n+/* Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This test relies on foo being inlined into main and bar not being\n+   inlined.  The test is checking GDB's behaviour as we single step from\n+   main through foo and into bar.  */\n+\n+volatile int global_var;\n+\n+int  __attribute__ ((noinline))\n+bar ()\n+{\t\t\t\t\t\t/* bar prologue */\n+  asm (\"bar_label: .globl bar_label\");\n+  return global_var;\t\t\t\t/* bar return global_var */\n+}\t\t\t\t\t\t/* bar end */\n+\n+static inline int __attribute__ ((always_inline))\n+foo ()\n+{\t\t\t\t\t\t/* foo prologue */\n+  return bar ();\t\t\t\t/* foo call bar */\n+}\t\t\t\t\t\t/* foo end */\n+\n+int\n+main ()\n+{\t\t\t\t\t\t/* main prologue */\n+  int ans;\n+  asm (\"main_label: .globl main_label\");\n+  global_var = 0;\t\t\t\t/* main set global_var */\n+  asm (\"main_label2: .globl main_label2\");\n+  ans = foo ();\t\t\t\t\t/* main call foo */\n+  asm (\"main_label3: .globl main_label3\");\n+  return ans;\n+}\t\t\t\t\t\t/* main end */"
    },
    {
      "sha": "81a678243d9966258789f219289abd07b83a1eaa",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.exp",
      "status": "added",
      "additions": 146,
      "deletions": 0,
      "changes": 146,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d92a3e313a3dfd531d5e32bbd703a8a5b03293b/gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-inline-stepping.exp?ref=3d92a3e313a3dfd531d5e32bbd703a8a5b03293b",
      "patch": "@@ -0,0 +1,146 @@\n+# Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test shows the importance of not corrupting the order of line\n+# table information.  When multiple lines are given for the same\n+# address the compiler usually lists these in the order in which we\n+# would expect to encounter them.  When stepping through nested inline\n+# frames the last line given for an address is assumed by GDB to be\n+# the most inner frame, and this is what GDB displays.\n+#\n+# If we corrupt the order of the line table entries then GDB will\n+# display the wrong line as being the inner most frame.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+# The .c files use __attribute__.\n+if [get_compiler_info] {\n+    return -1\n+}\n+if !$gcc_compiled {\n+    return 0\n+}\n+\n+standard_testfile dw2-inline-stepping.c dw2-inline-stepping.S\n+\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    global srcdir subdir srcfile srcfile2\n+    declare_labels ranges_label lines_label foo_prog\n+\n+    lassign [function_range main [list ${srcdir}/${subdir}/$srcfile]] \\\n+\tmain_start main_len\n+    set main_end \"$main_start + $main_len\"\n+    lassign [function_range bar [list ${srcdir}/${subdir}/$srcfile]] \\\n+\tbar_start bar_len\n+    set bar_end \"$bar_start + $bar_len\"\n+\n+    set call_line [gdb_get_line_number \"main call foo\"]\n+\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name dw2-inline-stepping.c}\n+\t    {low_pc 0 addr}\n+\t    {stmt_list ${lines_label} DW_FORM_sec_offset}\n+\t    {ranges ${ranges_label} DW_FORM_sec_offset}\n+\t} {\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name bar}\n+\t\t{low_pc $bar_start addr}\n+\t\t{high_pc \"$bar_start + $bar_len\" addr}\n+\t    }\n+\t    foo_prog: subprogram {\n+\t\t{name foo}\n+\t\t{inline 3 data1}\n+\t    }\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name main}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc \"$main_start + $main_len\" addr}\n+\t    } {\n+\t\tinlined_subroutine {\n+\t\t    {abstract_origin %$foo_prog}\n+\t\t    {low_pc main_label2 addr}\n+\t\t    {high_pc main_label3 addr}\n+\t\t    {call_file 1 data1}\n+\t\t    {call_line $call_line data1}\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    lines {version 2} lines_label {\n+\tinclude_dir \"${srcdir}/${subdir}\"\n+\tfile_name \"$srcfile\" 1\n+\n+\tprogram {\n+\t    {DW_LNE_set_address $main_start}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"main prologue\"] - 1]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address main_label}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"main set global_var\"] - [gdb_get_line_number \"main prologue\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address main_label2}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"main call foo\"] - [gdb_get_line_number \"main set global_var\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address main_label2}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"foo call bar\"] - [gdb_get_line_number \"main call foo\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address $main_end}\n+\t    {DW_LNE_end_sequence}\n+\n+\t    {DW_LNE_set_address $bar_start}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"bar prologue\"] - 1]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address bar_label}\n+\t    {DW_LNS_advance_line [expr [gdb_get_line_number \"bar return global_var\"] - [gdb_get_line_number \"bar prologue\"]]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address $bar_end}\n+\t    {DW_LNE_end_sequence}\n+\t}\n+    }\n+\n+    ranges {is_64 [is_64_target]} {\n+\tranges_label: sequence {\n+\t    {range {${main_start}} ${main_end}}\n+\t    {range {${bar_start}} ${bar_end}}\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+set patterns [list \"main call foo\" \\\n+\t\t  \"foo call bar\" \\\n+\t\t  \"bar return global_var\"]\n+foreach p $patterns {\n+    gdb_test \"step\" \"/\\\\* $p \\\\*/\" \\\n+\t\"step to '$p'\"\n+}"
    }
  ]
}