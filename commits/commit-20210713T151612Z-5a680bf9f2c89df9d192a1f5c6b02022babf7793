{
  "sha": "5a680bf9f2c89df9d192a1f5c6b02022babf7793",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWE2ODBiZjlmMmM4OWRmOWQxOTJhMWY1YzZiMDIwMjJiYWJmNzc5Mw==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-07-13T15:16:12Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-07-13T15:16:12Z"
    },
    "message": "fbsd-nat: Add helper functions to fetch and store register sets.\n\nIn particular, this supports register sets described by a regcache_map\nwhich are fetched and stored with dedicated ptrace operations.  These\nfunctions are intended to be used in architecture-specific\nfetch_registers and store_registers target methods.",
    "tree": {
      "sha": "7ba49463c926ae37fe0301b358bbe14e76d37b7a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7ba49463c926ae37fe0301b358bbe14e76d37b7a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5a680bf9f2c89df9d192a1f5c6b02022babf7793",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5a680bf9f2c89df9d192a1f5c6b02022babf7793",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5a680bf9f2c89df9d192a1f5c6b02022babf7793",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5a680bf9f2c89df9d192a1f5c6b02022babf7793/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "30a696c543419bb9cadb844f9d2e2d6ecc66d3b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30a696c543419bb9cadb844f9d2e2d6ecc66d3b5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/30a696c543419bb9cadb844f9d2e2d6ecc66d3b5"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 89,
    "deletions": 0
  },
  "files": [
    {
      "sha": "33eddb5f22c6604c72b4565e3be510a769072c96",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a680bf9f2c89df9d192a1f5c6b02022babf7793/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a680bf9f2c89df9d192a1f5c6b02022babf7793/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=5a680bf9f2c89df9d192a1f5c6b02022babf7793",
      "patch": "@@ -1601,6 +1601,52 @@ fbsd_nat_target::supports_disable_randomization ()\n #endif\n }\n \n+/* See fbsd-nat.h.  */\n+\n+void\n+fbsd_nat_target::fetch_register_set (struct regcache *regcache, int regnum,\n+\t\t\t\t     int fetch_op, const struct regset *regset,\n+\t\t\t\t     void *regs, size_t size)\n+{\n+  const struct regcache_map_entry *map\n+    = (const struct regcache_map_entry *) regset->regmap;\n+  pid_t pid = get_ptrace_pid (regcache->ptid ());\n+\n+  if (regnum == -1 || regcache_map_supplies (map, regnum, regcache->arch(),\n+\t\t\t\t\t     size))\n+    {\n+      if (ptrace (fetch_op, pid, (PTRACE_TYPE_ARG3) regs, 0) == -1)\n+\tperror_with_name (_(\"Couldn't get registers\"));\n+\n+      regcache->supply_regset (regset, regnum, regs, size);\n+    }\n+}\n+\n+/* See fbsd-nat.h.  */\n+\n+void\n+fbsd_nat_target::store_register_set (struct regcache *regcache, int regnum,\n+\t\t\t\t     int fetch_op, int store_op,\n+\t\t\t\t     const struct regset *regset, void *regs,\n+\t\t\t\t     size_t size)\n+{\n+  const struct regcache_map_entry *map\n+    = (const struct regcache_map_entry *) regset->regmap;\n+  pid_t pid = get_ptrace_pid (regcache->ptid ());\n+\n+  if (regnum == -1 || regcache_map_supplies (map, regnum, regcache->arch(),\n+\t\t\t\t\t     size))\n+    {\n+      if (ptrace (fetch_op, pid, (PTRACE_TYPE_ARG3) regs, 0) == -1)\n+\tperror_with_name (_(\"Couldn't get registers\"));\n+\n+      regcache->collect_regset (regset, regnum, regs, size);\n+\n+      if (ptrace (store_op, pid, (PTRACE_TYPE_ARG3) regs, 0) == -1)\n+\tperror_with_name (_(\"Couldn't write registers\"));\n+    }\n+}\n+\n void _initialize_fbsd_nat ();\n void\n _initialize_fbsd_nat ()"
    },
    {
      "sha": "a59065415be8e7034ed91494ef61703878c15d8e",
      "filename": "gdb/fbsd-nat.h",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a680bf9f2c89df9d192a1f5c6b02022babf7793/gdb/fbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a680bf9f2c89df9d192a1f5c6b02022babf7793/gdb/fbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.h?ref=5a680bf9f2c89df9d192a1f5c6b02022babf7793",
      "patch": "@@ -21,6 +21,8 @@\n #define FBSD_NAT_H\n \n #include \"inf-ptrace.h\"\n+#include \"regcache.h\"\n+#include \"regset.h\"\n #include <osreldate.h>\n #include <sys/proc.h>\n \n@@ -103,6 +105,47 @@ class fbsd_nat_target : public inf_ptrace_target\n   bool supports_multi_process () override;\n \n   bool supports_disable_randomization () override;\n+\n+private:\n+  /* Helper routines for use in fetch_registers and store_registers in\n+     subclasses.  These routines fetch and store a single set of\n+     registers described by REGSET.  The REGSET's 'regmap' field must\n+     point to an array of 'struct regcache_map_entry'.\n+\n+     FETCH_OP is a ptrace operation to fetch the set of registers from\n+     a native thread.  STORE_OP is a ptrace operation to store the set\n+     of registers to a native thread.\n+\n+     The caller must provide storage for the set of registers in REGS,\n+     and SIZE is the size of the storage.  */\n+\n+  void fetch_register_set (struct regcache *regcache, int regnum, int fetch_op,\n+\t\t\t   const struct regset *regset, void *regs, size_t size);\n+\n+  void store_register_set (struct regcache *regcache, int regnum, int fetch_op,\n+\t\t\t   int store_op, const struct regset *regset,\n+\t\t\t   void *regs, size_t size);\n+protected:\n+  /* Wrapper versions of the above helpers which accept a register set\n+     type such as 'struct reg' or 'struct fpreg'.  */\n+\n+  template <class Regset>\n+  void fetch_register_set (struct regcache *regcache, int regnum, int fetch_op,\n+\t\t\t   const struct regset *regset)\n+  {\n+    Regset regs;\n+    fetch_register_set (regcache, regnum, fetch_op, regset, &regs,\n+\t\t\tsizeof (regs));\n+  }\n+\n+  template <class Regset>\n+  void store_register_set (struct regcache *regcache, int regnum, int fetch_op,\n+\t\t\t   int store_op, const struct regset *regset)\n+  {\n+    Regset regs;\n+    store_register_set (regcache, regnum, fetch_op, store_op, regset, &regs,\n+\t\t\tsizeof (regs));\n+  }\n };\n \n #endif /* fbsd-nat.h */"
    }
  ]
}