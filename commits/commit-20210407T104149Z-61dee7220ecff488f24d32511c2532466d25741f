{
  "sha": "61dee7220ecff488f24d32511c2532466d25741f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjFkZWU3MjIwZWNmZjQ4OGYyNGQzMjUxMWMyNTMyNDY2ZDI1NzQxZg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-26T12:06:37Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-07T10:41:49Z"
    },
    "message": "gdb/testsuite: fix fission support in the Dwarf assembler\n\nThis commit fixes fission support in the Dwarf assembler. I added the\nnew test gdb.dwarf2/fission-absolute-dwo.exp which is a simple example\nof using the fission support.  I also rewrote the existing test\ngdb.dwarf2/fission-multi-cu.exp to use the new functionality (instead\nof using an x86-64 only assembler file).\n\nTo better support compiling the assembler files produced by the Dwarf\nassembler I have added the new proc build_executable_and_dwo_files in\nlib/dwarf.exp, this replaces build_executable_from_fission_assembler,\nall the tests that used the old proc have been updated.  Where the old\nproc assumed a single .S source file which contained the entire test,\nthe new proc allows for multiple source files.\n\nThe Dwarf assembler already had some fission support, however, this\nwas not actually used in any tests, and when I tried using it there\nwere a few issues.\n\nThe biggest change is that we now generate DW_FORM_GNU_addr_index\ninstead of DW_FORM_addr for the low and high pc in\n_handle_macro_at_range, support for the DW_FORM_GNU_addr_index is new\nin this commit.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/fission-absolute-dwo.c: New file.\n\t* gdb.dwarf2/fission-absolute-dwo.exp: New file.\n\t* gdb.dwarf2/fission-base.exp: Use build_executable_and_dwo_files\n\tinstead of build_executable_from_fission_assembler.\n\t* gdb.dwarf2/fission-loclists-pie.exp: Likewise.\n\t* gdb.dwarf2/fission-loclists.exp: Likewise.",
    "tree": {
      "sha": "aa226d6676b535a4dfbcaa8bbbf652523426a93e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/aa226d6676b535a4dfbcaa8bbbf652523426a93e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/61dee7220ecff488f24d32511c2532466d25741f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61dee7220ecff488f24d32511c2532466d25741f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/61dee7220ecff488f24d32511c2532466d25741f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61dee7220ecff488f24d32511c2532466d25741f/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5"
    }
  ],
  "stats": {
    "total": 1066,
    "additions": 620,
    "deletions": 446
  },
  "files": [
    {
      "sha": "ad97b669ccb3aa5c332554de398e5fd8dc06c062",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=61dee7220ecff488f24d32511c2532466d25741f",
      "patch": "@@ -1,3 +1,35 @@\n+2021-04-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.dwarf2/fission-absolute-dwo.c: New file.\n+\t* gdb.dwarf2/fission-absolute-dwo.exp: New file.\n+\t* gdb.dwarf2/fission-base.exp: Use build_executable_and_dwo_files\n+\tinstead of build_executable_from_fission_assembler.\n+\t* gdb.dwarf2/fission-loclists-pie.exp: Likewise.\n+\t* gdb.dwarf2/fission-loclists.exp: Likewise.\n+\n+\t* gdb.dwarf2/fission-multi-cu.S: Delete file.\n+\t* gdb.dwarf2/fission-multi-cu.c: New file based on old\n+\tfission-multi-cu1.c and fission-multi-cu2.c files.\n+\t* gdb.dwarf2/fission-multi-cu1.c: Delete file.\n+\t* gdb.dwarf2/fission-multi-cu2.c: Delete file.\n+\t* gdb.dwarf2/fission-multi-cu.exp: Rewrite to use Dwarf assembler.\n+\t* gdb.dwarf2/fission-reread.exp: Likewise.\n+\t* lib/dwarf.exp (extract_dwo_information): New proc.\n+\t(strip_dwo_information): New proc.\n+\t(build_executable_and_dwo_files): New proc.\n+\t(build_executable_from_fission_assembler): Delete.\n+\t(Dwarf::_debug_addr_index): New variable.\n+\t(Dwarf::_cu_is_fission): New variable.\n+\t(Dwarf::_handle_DW_FORM): Handle DW_OP_GNU_addr_index.\n+\t(Dwarf::_default_form): Supply a default for DW_AT_GNU_addr_base.\n+\t(Dwarf::_handle_macro_at_range): Use form DW_FORM_GNU_addr_index\n+\tif this is a fission CU.\n+\t(Dwarf::_location): Handle DW_OP_GNU_addr_index.\n+\t(Dwarf::debug_addr_label): New proc.\n+\t(Dwarf::cu): Initialise _cu_is_fission.\n+\t(Dwarf::tu): Likewise.\n+\t(Dwarf::assemble): Initialise _debug_addr_index.\n+\n 2021-04-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.dwarf2/dw2-using-debug-str.exp: Add an additional test."
    },
    {
      "sha": "27f7f0dfb4bb8b5920f166d27c36197a133df51c",
      "filename": "gdb/testsuite/gdb.dwarf2/fission-absolute-dwo.c",
      "status": "renamed",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-absolute-dwo.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-absolute-dwo.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fission-absolute-dwo.c?ref=61dee7220ecff488f24d32511c2532466d25741f",
      "patch": "@@ -1,6 +1,6 @@\n /* This testcase is part of GDB, the GNU debugger.\n \n-   Copyright 2012-2021 Free Software Foundation, Inc.\n+   Copyright 2021 Free Software Foundation, Inc.\n \n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n@@ -13,12 +13,16 @@\n    GNU General Public License for more details.\n \n    You should have received a copy of the GNU General Public License\n-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+   along with this program.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n \n-void func ();\n+/* Our fake object.  */\n+int global_var[100];\n \n int\n-main ()\n+main (int argc, char **argv)\n {\n-  func (-1);\n+  asm (\"main_label: .globl main_label\");\n+\n+  return 0;\n }",
      "previous_filename": "gdb/testsuite/gdb.dwarf2/fission-multi-cu2.c"
    },
    {
      "sha": "2483349bf78d2a86dc148ddaae7499af4d2e086b",
      "filename": "gdb/testsuite/gdb.dwarf2/fission-absolute-dwo.exp",
      "status": "added",
      "additions": 133,
      "deletions": 0,
      "changes": 133,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-absolute-dwo.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-absolute-dwo.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fission-absolute-dwo.exp?ref=61dee7220ecff488f24d32511c2532466d25741f",
      "patch": "@@ -0,0 +1,133 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This is a basic first test for using the testsuite's Dwarf assembler to\n+# create split debug information.  There's not unique feature of GDB being\n+# tested here, this exists only as a basic test for the testsuite\n+# infrastructure.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile .c -dw.S\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] } {\n+    return -1\n+}\n+\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    global srcfile binfile objdir\n+\n+    set debug_addr_lbl \".unknown!!\"\n+\n+    # The information that will be split out into the .dwo file.\n+    cu {fission 1} {\n+\n+\t# Capture a label to the current start of the .debug_addr\n+\t# section.  This will be passed to DW_AT_GNU_addr_base in the\n+\t# non-split CU later.\n+\tset debug_addr_lbl [debug_addr_label]\n+\n+\tcompile_unit {\n+            {language @DW_LANG_C}\n+            {name ${srcfile}}\n+\t    {DW_AT_comp_dir ${objdir}}\n+\t    {DW_AT_GNU_dwo_id 0x1234 DW_FORM_data8}\n+        } {\n+\t    declare_labels int4_type struct_type\n+\n+\t    int4_type: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size 4 DW_FORM_sdata}\n+\t\t{DW_AT_encoding  @DW_ATE_signed}\n+\t\t{DW_AT_name      integer}\n+\t    }\n+\n+\t    struct_type: DW_TAG_structure_type {\n+\t\t{DW_AT_name \"foo_t\"}\n+\t\t{DW_AT_byte_size 12 DW_FORM_sdata}\n+\t    } {\n+\t\tmember {\n+\t\t    {name \"aa\"}\n+\t\t    {type :$int4_type}\n+\t\t    {data_member_location 0 data1}\n+\t\t}\n+\t\tmember {\n+\t\t    {name \"bb\"}\n+\t\t    {type :$int4_type}\n+\t\t    {data_member_location 4 data1}\n+\t\t}\n+\t\tmember {\n+\t\t    {name \"cc\"}\n+\t\t    {type :$int4_type}\n+\t\t    {data_member_location 8 data1}\n+\t\t}\n+\t    }\n+\n+\t    DW_TAG_variable {\n+\t\t{DW_AT_name global_var}\n+\t\t{DW_AT_type :$struct_type}\n+\t\t{DW_AT_location {\n+\t\t    DW_OP_GNU_addr_index [gdb_target_symbol global_var]\n+\t\t} SPECIAL_expr}\n+\t\t{external 1 flag}\n+\t    }\n+\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{DW_AT_name main DW_FORM_string}\n+\t\t{MACRO_AT_func {main}}\n+\t    }\n+\t}\n+    }\n+\n+    # The information that will remain in the .o file.\n+    cu {} {\n+\tcompile_unit {\n+            {DW_AT_GNU_dwo_name ${binfile}.dwo DW_FORM_strp}\n+\t    {DW_AT_comp_dir ${objdir}}\n+\t    {DW_AT_GNU_dwo_id 0x1234 DW_FORM_data8}\n+\t    {DW_AT_GNU_addr_base $debug_addr_lbl}\n+        } {\n+\t    # Nothing.\n+\t}\n+    }\n+}\n+\n+# Compile both source files to create the executable.  As we compile\n+# ASM_FILE we split out the debug information into the dwo file.\n+set object_file [standard_output_file ${testfile}.o]\n+if { [build_executable_and_dwo_files \"${testfile}.exp\" ${binfile} {nodebug} \\\n+\t  [list $asm_file {nodebug split-dwo} ${object_file}] \\\n+\t  [list $srcfile {nodebug}]] } {\n+    perror \"failed to compile ${gdb_test_file_name}\"\n+    return -1\n+}\n+\n+# Now we can start GDB.\n+clean_restart ${testfile}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+# Print the type of global_var.  This type information is entirely\n+# fictional, it only exists in the DWARF.  If we don't have the DWARF\n+# information then there's no way we can print this.\n+gdb_test \"p global_var\" \" = \\\\{aa = 0, bb = 0, cc = 0\\\\}\""
    },
    {
      "sha": "00eb7fec1b0bb7c36a87bafa1eadef54b287a822",
      "filename": "gdb/testsuite/gdb.dwarf2/fission-base.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-base.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-base.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fission-base.exp?ref=61dee7220ecff488f24d32511c2532466d25741f",
      "patch": "@@ -32,11 +32,12 @@ if {![istarget x86_64-*] || ![is_lp64_target]} {\n \n standard_testfile .S\n \n-set dwo [standard_output_file \"fission-base.dwo\"]\n-\n-if [build_executable_from_fission_assembler \\\n-\t\"$testfile.exp\" \"$binfile\" \"$srcfile\" \\\n-\t[list nodebug additional_flags=-DDWO=$dwo]] {\n+set obj [standard_output_file \"${testfile}.o\"]\n+set dwo [standard_output_file \"${testfile}.dwo\"]\n+if [build_executable_and_dwo_files \"$testfile.exp\" \"${binfile}\" {nodebug} \\\n+\t[list $srcfile \\\n+\t     [list nodebug split-dwo additional_flags=-DDWO=$dwo] \\\n+\t     $obj]] {\n     return -1\n }\n "
    },
    {
      "sha": "21098a24624fc575ac6ee6a4127b3df10cce2cb4",
      "filename": "gdb/testsuite/gdb.dwarf2/fission-loclists-pie.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-loclists-pie.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-loclists-pie.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fission-loclists-pie.exp?ref=61dee7220ecff488f24d32511c2532466d25741f",
      "patch": "@@ -37,11 +37,12 @@ if {![istarget x86_64-*] || ![is_lp64_target]} {\n \n standard_testfile .S\n \n-set dwo [standard_output_file \"fission-loclists-pie.dwo\"]\n-\n-if [build_executable_from_fission_assembler \\\n-\t\"$testfile.exp\" \"$binfile\" \"$srcfile\" \\\n-\t[list \"nodebug\" \"ldflags=-pie\" additional_flags=-DDWO=$dwo]] {\n+set obj [standard_output_file \"${testfile}.o\"]\n+set dwo [standard_output_file \"${testfile}.dwo\"]\n+if [build_executable_and_dwo_files \"$testfile.exp\" \"${binfile}\" \\\n+\t{nodebug ldflags=-pie} \\\n+\t[list $srcfile [list nodebug split-dwo additional_flags=-DDWO=$dwo] \\\n+\t     $obj]] {\n     return -1\n }\n "
    },
    {
      "sha": "c490763982e3f7026b64a4e4b97eefd342db0330",
      "filename": "gdb/testsuite/gdb.dwarf2/fission-loclists.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-loclists.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-loclists.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fission-loclists.exp?ref=61dee7220ecff488f24d32511c2532466d25741f",
      "patch": "@@ -32,11 +32,12 @@ if {![istarget x86_64-*] || ![is_lp64_target]} {\n \n standard_testfile .S\n \n-set dwo [standard_output_file \"fission-loclists.dwo\"]\n-\n-if [build_executable_from_fission_assembler \\\n-\t\"$testfile.exp\" \"$binfile\" \"$srcfile\" \\\n-\t[list nodebug additional_flags=-DDWO=$dwo]] {\n+set obj [standard_output_file \"${testfile}.o\"]\n+set dwo [standard_output_file \"${testfile}.dwo\"]\n+if [build_executable_and_dwo_files \"$testfile.exp\" \"${binfile}\" {nodebug} \\\n+\t[list $srcfile \\\n+\t     [list nodebug split-dwo additional_flags=-DDWO=$dwo] \\\n+\t     $obj]] {\n     return -1\n }\n "
    },
    {
      "sha": "df83613831e460393dba14b13eb26c14948ff597",
      "filename": "gdb/testsuite/gdb.dwarf2/fission-multi-cu.S",
      "status": "removed",
      "additions": 0,
      "deletions": 364,
      "changes": 364,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5/gdb/testsuite/gdb.dwarf2/fission-multi-cu.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5/gdb/testsuite/gdb.dwarf2/fission-multi-cu.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fission-multi-cu.S?ref=1fd999d9093a7eca5d87420c6759c5fd1d3ddeb5",
      "patch": "@@ -1,364 +0,0 @@\n-/* This testcase is part of GDB, the GNU debugger.\n-\n-   Copyright 2012-2021 Free Software Foundation, Inc.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-\n-   This file was created by doing:\n-\n-   clang fission-multi-cu*.c -g -fno-split-dwarf-inlining -emit-llvm -S -c\n-   llvm-link fission-multi-cu*.ll -S -o fission-multi-cu.ll\n-   clang-tot fission-multi-cu.ll -gsplit-dwarf -S\n-\n-   and then massaging the output.\n-*/\n-\n-#define XSTR(s) STR(s)\n-#define STR(s) #s\n-\n-\t.text\n-\t.file\t\"llvm-link\"\n-\t.globl\tfunc\n-\t.p2align\t4, 0x90\n-\t.type\tfunc,@function\n-func:                                   # @func\n-.Lfunc_begin0:\n-\t.file\t1 \"fission-multi-cu1.c\"\n-\t.loc\t1 20 0                  # fission-multi-cu1.c:20:0\n-\t.cfi_startproc\n-# BB#0:                                 # %entry\n-\tpushq\t%rbp\n-\t.cfi_def_cfa_offset 16\n-\t.cfi_offset %rbp, -16\n-\tmovq\t%rsp, %rbp\n-\t.cfi_def_cfa_register %rbp\n-\tmovl\t%edi, -4(%rbp)\n-\t.loc\t1 21 10 prologue_end    # fission-multi-cu1.c:21:10\n-\tmovl\t-4(%rbp), %edi\n-\t.loc\t1 21 14 is_stmt 0       # fission-multi-cu1.c:21:14\n-\taddl\t$1, %edi\n-\t.loc\t1 21 3                  # fission-multi-cu1.c:21:3\n-\tmovl\t%edi, %eax\n-\tpopq\t%rbp\n-\tretq\n-.Lfunc_end0:\n-\t.size\tfunc, .Lfunc_end0-func\n-\t.cfi_endproc\n-\n-\t.globl\tmain\n-\t.p2align\t4, 0x90\n-\t.type\tmain,@function\n-main:                                   # @main\n-.Lfunc_begin1:\n-\t.file\t2 \"fission-multi-cu2.c\"\n-\t.loc\t2 23 0 is_stmt 1        # fission-multi-cu2.c:23:0\n-\t.cfi_startproc\n-# BB#0:                                 # %entry\n-\tpushq\t%rbp\n-\t.cfi_def_cfa_offset 16\n-\t.cfi_offset %rbp, -16\n-\tmovq\t%rsp, %rbp\n-\t.cfi_def_cfa_register %rbp\n-\tmovl\t$4294967295, %edi       # imm = 0xFFFFFFFF\n-\t.loc\t2 24 3 prologue_end     # fission-multi-cu2.c:24:3\n-\tmovb\t$0, %al\n-\tcallq\tfunc\n-\txorl\t%eax, %eax\n-\t.loc\t2 25 1                  # fission-multi-cu2.c:25:1\n-\tpopq\t%rbp\n-\tretq\n-.Lfunc_end1:\n-\t.size\tmain, .Lfunc_end1-main\n-\t.cfi_endproc\n-\n-\t.section\t.debug_str,\"MS\",@progbits,1\n-.Lskel_string0:\n-\t.asciz\tXSTR(DWO)  # string offset=0\n-.Lskel_string1:\n-\t.asciz\t\"/tmp/src/gdb/testsuite\" # string offset=21\n-\t.section\t.debug_loc.dwo,\"\",@progbits\n-\t.section\t.debug_abbrev,\"\",@progbits\n-\t.byte\t1                       # Abbreviation Code\n-\t.byte\t17                      # DW_TAG_compile_unit\n-\t.byte\t0                       # DW_CHILDREN_no\n-\t.byte\t16                      # DW_AT_stmt_list\n-\t.byte\t23                      # DW_FORM_sec_offset\n-\t.ascii\t\"\\260B\"                 # DW_AT_GNU_dwo_name\n-\t.byte\t14                      # DW_FORM_strp\n-\t.byte\t27                      # DW_AT_comp_dir\n-\t.byte\t14                      # DW_FORM_strp\n-\t.ascii\t\"\\261B\"                 # DW_AT_GNU_dwo_id\n-\t.byte\t7                       # DW_FORM_data8\n-\t.ascii\t\"\\263B\"                 # DW_AT_GNU_addr_base\n-\t.byte\t23                      # DW_FORM_sec_offset\n-\t.byte\t17                      # DW_AT_low_pc\n-\t.byte\t1                       # DW_FORM_addr\n-\t.byte\t18                      # DW_AT_high_pc\n-\t.byte\t6                       # DW_FORM_data4\n-\t.byte\t0                       # EOM(1)\n-\t.byte\t0                       # EOM(2)\n-\t.byte\t0                       # EOM(3)\n-\t.section\t.debug_info,\"\",@progbits\n-.Lcu_begin0:\n-\t.long\t44                      # Length of Unit\n-\t.short\t4                       # DWARF version number\n-\t.long\t.debug_abbrev           # Offset Into Abbrev. Section\n-\t.byte\t8                       # Address Size (in bytes)\n-\t.byte\t1                       # Abbrev [1] 0xb:0x25 DW_TAG_compile_unit\n-\t.long\t.Lline_table_start0     # DW_AT_stmt_list\n-\t.long\t.Lskel_string0          # DW_AT_GNU_dwo_name\n-\t.long\t.Lskel_string1          # DW_AT_comp_dir\n-\t.quad\t7615852067747431413     # DW_AT_GNU_dwo_id\n-\t.long\t.debug_addr             # DW_AT_GNU_addr_base\n-\t.quad\t.Lfunc_begin0           # DW_AT_low_pc\n-\t.long\t.Lfunc_end0-.Lfunc_begin0 # DW_AT_high_pc\n-.Lcu_begin1:\n-\t.long\t44                      # Length of Unit\n-\t.short\t4                       # DWARF version number\n-\t.long\t.debug_abbrev           # Offset Into Abbrev. Section\n-\t.byte\t8                       # Address Size (in bytes)\n-\t.byte\t1                       # Abbrev [1] 0xb:0x25 DW_TAG_compile_unit\n-\t.long\t.Lline_table_start0     # DW_AT_stmt_list\n-\t.long\t.Lskel_string0          # DW_AT_GNU_dwo_name\n-\t.long\t.Lskel_string1          # DW_AT_comp_dir\n-\t.quad\t2037650261599692324     # DW_AT_GNU_dwo_id\n-\t.long\t.debug_addr             # DW_AT_GNU_addr_base\n-\t.quad\t.Lfunc_begin1           # DW_AT_low_pc\n-\t.long\t.Lfunc_end1-.Lfunc_begin1 # DW_AT_high_pc\n-\t.section\t.debug_ranges,\"\",@progbits\n-\t.section\t.debug_macinfo,\"\",@progbits\n-.Lcu_macro_begin1:\n-.Lcu_macro_begin3:\n-\t.byte\t0                       # End Of Macro List Mark\n-\t.section\t.debug_str.dwo,\"MS\",@progbits,1\n-.Linfo_string0:\n-\t.asciz\t\"fission-multi-cu.dwo\"  # string offset=0\n-.Linfo_string1:\n-\t.asciz\t\"clang version 5.0.0 (trunk 302855) (llvm/trunk 302853)\" # string offset=21\n-.Linfo_string2:\n-\t.asciz\t\"fission-multi-cu1.c\" # string offset=76\n-.Linfo_string3:\n-\t.asciz\t\"fission-multi-cu2.c\" # string offset=96\n-.Linfo_string4:\n-\t.asciz\t\"func\"                  # string offset=116\n-.Linfo_string5:\n-\t.asciz\t\"int\"                   # string offset=121\n-.Linfo_string6:\n-\t.asciz\t\"main\"                  # string offset=125\n-.Linfo_string7:\n-\t.asciz\t\"arg\"                   # string offset=130\n-\t.section\t.debug_str_offsets.dwo,\"\",@progbits\n-\t.long\t0\n-\t.long\t21\n-\t.long\t76\n-\t.long\t96\n-\t.long\t116\n-\t.long\t121\n-\t.long\t125\n-\t.long\t130\n-\t.section\t.debug_info.dwo,\"\",@progbits\n-\t.long\t53                      # Length of Unit\n-\t.short\t4                       # DWARF version number\n-\t.long\t0                       # Offset Into Abbrev. Section\n-\t.byte\t8                       # Address Size (in bytes)\n-\t.byte\t1                       # Abbrev [1] 0xb:0x2e DW_TAG_compile_unit\n-\t.byte\t0                       # DW_AT_GNU_dwo_name\n-\t.byte\t1                       # DW_AT_producer\n-\t.short\t12                      # DW_AT_language\n-\t.byte\t2                       # DW_AT_name\n-\t.quad\t7615852067747431413     # DW_AT_GNU_dwo_id\n-\t.byte\t2                       # Abbrev [2] 0x19:0x1b DW_TAG_subprogram\n-\t.byte\t0                       # DW_AT_low_pc\n-\t.long\t.Lfunc_end0-.Lfunc_begin0 # DW_AT_high_pc\n-\t.byte\t1                       # DW_AT_frame_base\n-\t.byte\t86\n-\t.byte\t4                       # DW_AT_name\n-\t.byte\t1                       # DW_AT_decl_file\n-\t.byte\t19                      # DW_AT_decl_line\n-                                        # DW_AT_prototyped\n-\t.long\t52                      # DW_AT_type\n-                                        # DW_AT_external\n-\t.byte\t3                       # Abbrev [3] 0x28:0xb DW_TAG_formal_parameter\n-\t.byte\t2                       # DW_AT_location\n-\t.byte\t145\n-\t.byte\t124\n-\t.byte\t7                       # DW_AT_name\n-\t.byte\t1                       # DW_AT_decl_file\n-\t.byte\t19                      # DW_AT_decl_line\n-\t.long\t52                      # DW_AT_type\n-\t.byte\t0                       # End Of Children Mark\n-\t.byte\t4                       # Abbrev [4] 0x34:0x4 DW_TAG_base_type\n-\t.byte\t5                       # DW_AT_name\n-\t.byte\t5                       # DW_AT_encoding\n-\t.byte\t4                       # DW_AT_byte_size\n-\t.byte\t0                       # End Of Children Mark\n-\t.long\t41                      # Length of Unit\n-\t.short\t4                       # DWARF version number\n-\t.long\t0                       # Offset Into Abbrev. Section\n-\t.byte\t8                       # Address Size (in bytes)\n-\t.byte\t1                       # Abbrev [1] 0xb:0x22 DW_TAG_compile_unit\n-\t.byte\t0                       # DW_AT_GNU_dwo_name\n-\t.byte\t1                       # DW_AT_producer\n-\t.short\t12                      # DW_AT_language\n-\t.byte\t3                       # DW_AT_name\n-\t.quad\t2037650261599692324     # DW_AT_GNU_dwo_id\n-\t.byte\t5                       # Abbrev [5] 0x19:0xf DW_TAG_subprogram\n-\t.byte\t1                       # DW_AT_low_pc\n-\t.long\t.Lfunc_end1-.Lfunc_begin1 # DW_AT_high_pc\n-\t.byte\t1                       # DW_AT_frame_base\n-\t.byte\t86\n-\t.byte\t6                       # DW_AT_name\n-\t.byte\t2                       # DW_AT_decl_file\n-\t.byte\t22                      # DW_AT_decl_line\n-\t.long\t40                      # DW_AT_type\n-                                        # DW_AT_external\n-\t.byte\t4                       # Abbrev [4] 0x28:0x4 DW_TAG_base_type\n-\t.byte\t5                       # DW_AT_name\n-\t.byte\t5                       # DW_AT_encoding\n-\t.byte\t4                       # DW_AT_byte_size\n-\t.byte\t0                       # End Of Children Mark\n-\t.section\t.debug_abbrev.dwo,\"\",@progbits\n-\t.byte\t1                       # Abbreviation Code\n-\t.byte\t17                      # DW_TAG_compile_unit\n-\t.byte\t1                       # DW_CHILDREN_yes\n-\t.ascii\t\"\\260B\"                 # DW_AT_GNU_dwo_name\n-\t.ascii\t\"\\202>\"                 # DW_FORM_GNU_str_index\n-\t.byte\t37                      # DW_AT_producer\n-\t.ascii\t\"\\202>\"                 # DW_FORM_GNU_str_index\n-\t.byte\t19                      # DW_AT_language\n-\t.byte\t5                       # DW_FORM_data2\n-\t.byte\t3                       # DW_AT_name\n-\t.ascii\t\"\\202>\"                 # DW_FORM_GNU_str_index\n-\t.ascii\t\"\\261B\"                 # DW_AT_GNU_dwo_id\n-\t.byte\t7                       # DW_FORM_data8\n-\t.byte\t0                       # EOM(1)\n-\t.byte\t0                       # EOM(2)\n-\t.byte\t2                       # Abbreviation Code\n-\t.byte\t46                      # DW_TAG_subprogram\n-\t.byte\t1                       # DW_CHILDREN_yes\n-\t.byte\t17                      # DW_AT_low_pc\n-\t.ascii\t\"\\201>\"                 # DW_FORM_GNU_addr_index\n-\t.byte\t18                      # DW_AT_high_pc\n-\t.byte\t6                       # DW_FORM_data4\n-\t.byte\t64                      # DW_AT_frame_base\n-\t.byte\t24                      # DW_FORM_exprloc\n-\t.byte\t3                       # DW_AT_name\n-\t.ascii\t\"\\202>\"                 # DW_FORM_GNU_str_index\n-\t.byte\t58                      # DW_AT_decl_file\n-\t.byte\t11                      # DW_FORM_data1\n-\t.byte\t59                      # DW_AT_decl_line\n-\t.byte\t11                      # DW_FORM_data1\n-\t.byte\t39                      # DW_AT_prototyped\n-\t.byte\t25                      # DW_FORM_flag_present\n-\t.byte\t73                      # DW_AT_type\n-\t.byte\t19                      # DW_FORM_ref4\n-\t.byte\t63                      # DW_AT_external\n-\t.byte\t25                      # DW_FORM_flag_present\n-\t.byte\t0                       # EOM(1)\n-\t.byte\t0                       # EOM(2)\n-\t.byte\t3                       # Abbreviation Code\n-\t.byte\t5                       # DW_TAG_formal_parameter\n-\t.byte\t0                       # DW_CHILDREN_no\n-\t.byte\t2                       # DW_AT_location\n-\t.byte\t24                      # DW_FORM_exprloc\n-\t.byte\t3                       # DW_AT_name\n-\t.ascii\t\"\\202>\"                 # DW_FORM_GNU_str_index\n-\t.byte\t58                      # DW_AT_decl_file\n-\t.byte\t11                      # DW_FORM_data1\n-\t.byte\t59                      # DW_AT_decl_line\n-\t.byte\t11                      # DW_FORM_data1\n-\t.byte\t73                      # DW_AT_type\n-\t.byte\t19                      # DW_FORM_ref4\n-\t.byte\t0                       # EOM(1)\n-\t.byte\t0                       # EOM(2)\n-\t.byte\t4                       # Abbreviation Code\n-\t.byte\t36                      # DW_TAG_base_type\n-\t.byte\t0                       # DW_CHILDREN_no\n-\t.byte\t3                       # DW_AT_name\n-\t.ascii\t\"\\202>\"                 # DW_FORM_GNU_str_index\n-\t.byte\t62                      # DW_AT_encoding\n-\t.byte\t11                      # DW_FORM_data1\n-\t.byte\t11                      # DW_AT_byte_size\n-\t.byte\t11                      # DW_FORM_data1\n-\t.byte\t0                       # EOM(1)\n-\t.byte\t0                       # EOM(2)\n-\t.byte\t5                       # Abbreviation Code\n-\t.byte\t46                      # DW_TAG_subprogram\n-\t.byte\t0                       # DW_CHILDREN_no\n-\t.byte\t17                      # DW_AT_low_pc\n-\t.ascii\t\"\\201>\"                 # DW_FORM_GNU_addr_index\n-\t.byte\t18                      # DW_AT_high_pc\n-\t.byte\t6                       # DW_FORM_data4\n-\t.byte\t64                      # DW_AT_frame_base\n-\t.byte\t24                      # DW_FORM_exprloc\n-\t.byte\t3                       # DW_AT_name\n-\t.ascii\t\"\\202>\"                 # DW_FORM_GNU_str_index\n-\t.byte\t58                      # DW_AT_decl_file\n-\t.byte\t11                      # DW_FORM_data1\n-\t.byte\t59                      # DW_AT_decl_line\n-\t.byte\t11                      # DW_FORM_data1\n-\t.byte\t73                      # DW_AT_type\n-\t.byte\t19                      # DW_FORM_ref4\n-\t.byte\t63                      # DW_AT_external\n-\t.byte\t25                      # DW_FORM_flag_present\n-\t.byte\t0                       # EOM(1)\n-\t.byte\t0                       # EOM(2)\n-\t.byte\t0                       # EOM(3)\n-\t.section\t.debug_addr,\"\",@progbits\n-\t.quad\t.Lfunc_begin0\n-\t.quad\t.Lfunc_begin1\n-\t.section\t.debug_pubnames,\"\",@progbits\n-\t.long\t.LpubNames_end0-.LpubNames_begin0 # Length of Public Names Info\n-.LpubNames_begin0:\n-\t.short\t2                       # DWARF Version\n-\t.long\t.Lcu_begin0             # Offset of Compilation Unit Info\n-\t.long\t48                      # Compilation Unit Length\n-\t.long\t25                      # DIE offset\n-\t.asciz\t\"func\"                  # External Name\n-\t.long\t0                       # End Mark\n-.LpubNames_end0:\n-\t.long\t.LpubNames_end1-.LpubNames_begin1 # Length of Public Names Info\n-.LpubNames_begin1:\n-\t.short\t2                       # DWARF Version\n-\t.long\t.Lcu_begin1             # Offset of Compilation Unit Info\n-\t.long\t48                      # Compilation Unit Length\n-\t.long\t25                      # DIE offset\n-\t.asciz\t\"main\"                  # External Name\n-\t.long\t0                       # End Mark\n-.LpubNames_end1:\n-\t.section\t.debug_pubtypes,\"\",@progbits\n-\t.long\t.LpubTypes_end0-.LpubTypes_begin0 # Length of Public Types Info\n-.LpubTypes_begin0:\n-\t.short\t2                       # DWARF Version\n-\t.long\t.Lcu_begin0             # Offset of Compilation Unit Info\n-\t.long\t48                      # Compilation Unit Length\n-\t.long\t52                      # DIE offset\n-\t.asciz\t\"int\"                   # External Name\n-\t.long\t0                       # End Mark\n-.LpubTypes_end0:\n-\t.long\t.LpubTypes_end1-.LpubTypes_begin1 # Length of Public Types Info\n-.LpubTypes_begin1:\n-\t.short\t2                       # DWARF Version\n-\t.long\t.Lcu_begin1             # Offset of Compilation Unit Info\n-\t.long\t48                      # Compilation Unit Length\n-\t.long\t40                      # DIE offset\n-\t.asciz\t\"int\"                   # External Name\n-\t.long\t0                       # End Mark\n-.LpubTypes_end1:\n-\n-\t.ident\t\"clang version 5.0.0 (trunk 302855) (llvm/trunk 302853)\"\n-\t.ident\t\"clang version 5.0.0 (trunk 302855) (llvm/trunk 302853)\"\n-\t.section\t\".note.GNU-stack\",\"\",@progbits\n-\t.section\t.debug_line,\"\",@progbits\n-.Lline_table_start0:"
    },
    {
      "sha": "6a177ad4e61ee7ccea457ab2d9ac1fa63acfdaeb",
      "filename": "gdb/testsuite/gdb.dwarf2/fission-multi-cu.c",
      "status": "renamed",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-multi-cu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-multi-cu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fission-multi-cu.c?ref=61dee7220ecff488f24d32511c2532466d25741f",
      "patch": "@@ -15,8 +15,27 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n+#define LL(N) asm (\"line_label_\" #N \": .globl line_label_\" #N)\n+\n+/* Fake parameter location.  */\n+int global_param = 0;\n+\n int\n func (int arg)\n {\n+  asm (\"func_label: .globl func_label\");\n+  LL(4);\n   return arg + 1;\n }\n+\n+int\n+main ()\n+{\n+  asm (\"main_label: .globl main_label\");\n+  LL(1);\n+  global_param = -1;\n+  LL(2);\n+  func (-1);\n+  LL(3);\n+  return 0;\n+}",
      "previous_filename": "gdb/testsuite/gdb.dwarf2/fission-multi-cu1.c"
    },
    {
      "sha": "0f7f796a541e0a7b67ad8614c4e58364123db2c0",
      "filename": "gdb/testsuite/gdb.dwarf2/fission-multi-cu.exp",
      "status": "modified",
      "additions": 183,
      "deletions": 12,
      "changes": 195,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-multi-cu.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-multi-cu.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fission-multi-cu.exp?ref=61dee7220ecff488f24d32511c2532466d25741f",
      "patch": "@@ -13,6 +13,9 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n+# This test checks that GDB can load DWARF information from two\n+# separate split .DWO files.\n+\n load_lib dwarf.exp\n \n # We run objcopy locally to split out the .dwo file.\n@@ -25,18 +28,186 @@ if ![dwarf2_support] {\n     return 0\n }\n \n-# This test can only be run on x86-64 targets.\n-if {![istarget x86_64-*] || ![is_lp64_target]} {\n-    return 0\n+# We place the entire source code for the test into a single .c file,\n+# but we generate the DWARF in two separate .S files.  Each .S is\n+# compiled to a .o, then the DWARF is split into a .dwo file.  Finally\n+# the all three .o files are merged into a single executable that will\n+# reference the two .dwo files.\n+standard_testfile .c -1-dw.S -2-cw.S\n+\n+# Generate the first .S file.\n+set asm_file_1 [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file_1 {\n+    global srcfile binfile objdir srcdir subdir\n+\n+    get_func_info func\n+\n+    declare_labels int4_type lines_table\n+\n+    set debug_addr_lbl \".unknown!!\"\n+\n+    # The information that will be split out into the .dwo file.\n+    cu {fission 1} {\n+\n+\t# Capture a label to the current start of the .debug_addr\n+\t# section.  This will be passed to DW_AT_GNU_addr_base in the\n+\t# non-split CU later.\n+\tset debug_addr_lbl [debug_addr_label]\n+\n+\tcompile_unit {\n+            {language @DW_LANG_C}\n+            {name ${srcfile}}\n+\t    {DW_AT_comp_dir ${objdir}}\n+\t    {DW_AT_GNU_dwo_id 0x1234 DW_FORM_data8}\n+        } {\n+\t    int4_type: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size 4 DW_FORM_sdata}\n+\t\t{DW_AT_encoding  @DW_ATE_signed}\n+\t\t{DW_AT_name      int}\n+\t    }\n+\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{DW_AT_name func DW_FORM_string}\n+\t\t{MACRO_AT_func {func}}\n+\t\t{DW_AT_type :$int4_type}\n+\t    } {\n+\t\tDW_TAG_formal_parameter {\n+\t\t    {DW_AT_name arg}\n+\t\t    {DW_AT_type :$int4_type}\n+\t\t    {DW_AT_location {\n+\t\t\tDW_OP_GNU_addr_index [gdb_target_symbol global_param]\n+\t\t    } SPECIAL_expr}\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    lines {version 2} lines_table {\n+\tinclude_dir \"${srcdir}/${subdir}\"\n+\tfile_name \"$srcfile\" 1\n+\n+\tprogram {\n+\t    {DW_LNE_set_address $func_start}\n+\t    {DW_LNS_advance_line 24}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_4}\n+\t    {DW_LNS_advance_line 3}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address $func_end}\n+\t    {DW_LNS_advance_line 1}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_end_sequence}\n+\t}\n+    }\n+\n+    # The information that will remain in the .o file.\n+    cu {} {\n+\tcompile_unit {\n+            {DW_AT_GNU_dwo_name ${binfile}-1-dw.dwo DW_FORM_strp}\n+\t    {DW_AT_comp_dir ${objdir}}\n+\t    {DW_AT_GNU_dwo_id 0x1234 DW_FORM_data8}\n+\t    {DW_AT_GNU_addr_base $debug_addr_lbl}\n+\t    {stmt_list $lines_table DW_FORM_sec_offset}\n+        } {\n+\t    # Nothing.\n+\t}\n+    }\n }\n \n-standard_testfile .S\n-\n-set dwo [standard_output_file \"fission-multi-cu.dwo\"]\n+# Generate the second .S file.\n+set asm_file_2 [standard_output_file $srcfile3]\n+Dwarf::assemble $asm_file_2 {\n+    global srcfile binfile objdir srcdir subdir\n+\n+    set debug_addr_lbl \".unknown!!\"\n+\n+    declare_labels int4_type lines_table\n+\n+    get_func_info main\n+\n+    # The information that will be split out into the .dwo file.\n+    cu {fission 1} {\n+\n+\t# Capture a label to the current start of the .debug_addr\n+\t# section.  This will be passed to DW_AT_GNU_addr_base in the\n+\t# non-split CU later.\n+\tset debug_addr_lbl [debug_addr_label]\n+\n+\tcompile_unit {\n+            {language @DW_LANG_C}\n+            {name ${srcfile}}\n+\t    {DW_AT_comp_dir ${objdir}}\n+\t    {DW_AT_GNU_dwo_id 0x4567 DW_FORM_data8}\n+        } {\n+\t    int4_type: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size 4 DW_FORM_sdata}\n+\t\t{DW_AT_encoding  @DW_ATE_signed}\n+\t\t{DW_AT_name      int}\n+\t    }\n+\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{DW_AT_name main DW_FORM_string}\n+\t\t{MACRO_AT_func {main}}\n+\t\t{DW_AT_type :$int4_type}\n+\t\t{DW_AT_decl_file 1 data1}\n+\t\t{DW_AT_decl_line 29 data1}\n+\t    }\n+\t}\n+    }\n+\n+    lines {version 2} lines_table {\n+\tinclude_dir \"${srcdir}/${subdir}\"\n+\tfile_name \"$srcfile\" 1\n+\n+\tprogram {\n+\t    {DW_LNE_set_address $main_start}\n+\t    {DW_LNS_advance_line 32}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_1}\n+\t    {DW_LNS_advance_line 3}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_2}\n+\t    {DW_LNS_advance_line 2}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_3}\n+\t    {DW_LNS_advance_line 2}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address $main_end}\n+\t    {DW_LNS_advance_line 2}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_end_sequence}\n+\t}\n+    }\n+\n+    # The information that will remain in the .o file.\n+    cu {} {\n+\tcompile_unit {\n+            {DW_AT_GNU_dwo_name ${binfile}-2-dw.dwo DW_FORM_strp}\n+\t    {DW_AT_comp_dir ${objdir}}\n+\t    {DW_AT_GNU_dwo_id 0x4567 DW_FORM_data8}\n+\t    {DW_AT_GNU_addr_base $debug_addr_lbl}\n+\t    {stmt_list $lines_table DW_FORM_sec_offset}\n+        } {\n+\t    # Nothing.\n+\t}\n+    }\n+}\n \n-if [build_executable_from_fission_assembler \\\n-\t\"$testfile.exp\" \"$binfile\" \"$srcfile\" \\\n-\t[list nodebug additional_flags=-DDWO=$dwo]] {\n+# Compile all of the input files, split the DWARF into the .dwo files.\n+set obj1 [standard_output_file \"${testfile}-1-dw.o\"]\n+set obj2 [standard_output_file \"${testfile}-2-dw.o\"]\n+if [build_executable_and_dwo_files \"$testfile.exp\" \"${binfile}\" {nodebug} \\\n+\t[list $asm_file_1 [list nodebug split-dwo] $obj1] \\\n+\t[list $asm_file_2 [list nodebug split-dwo] $obj2] \\\n+\t[list $srcfile  [list nodebug]]] {\n     return -1\n }\n \n@@ -51,13 +222,13 @@ if ![runto_main] {\n gdb_test \"ptype main\" \"type = int \\\\(\\\\)\"\n gdb_test \"ptype func\" \"type = int \\\\(int\\\\)\"\n \n-gdb_test \"frame\" \"#0 *main \\\\(\\\\) at ${testfile}2\\\\.c:$decimal.*\" \\\n+gdb_test \"frame\" \"#0 *main \\\\(\\\\) at \\[^\\r\\n\\]+${srcfile}:$decimal.*\" \\\n     \"frame in main\"\n \n-gdb_test \"break func\" \"Breakpoint.*at.* file .*${testfile}1\\\\.c, line .*\"\n+gdb_test \"break func\" \"Breakpoint.*at.* file .*${srcfile}, line .*\"\n \n gdb_test \"continue\" \"Breakpoint.* func \\\\(arg=-1\\\\).*\" \\\n     \"continue to func\"\n \n-gdb_test \"frame\" \"#0 *func \\\\(arg=-1\\\\) at ${testfile}1\\\\.c:$decimal.*\" \\\n+gdb_test \"frame\" \"#0 *func \\\\(arg=-1\\\\) at \\[^\\r\\n\\]+${srcfile}:$decimal.*\" \\\n     \"frame in func\""
    },
    {
      "sha": "16a139eb0cd7414c7188c908fada8bba3b5bda98",
      "filename": "gdb/testsuite/gdb.dwarf2/fission-reread.exp",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-reread.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/gdb.dwarf2/fission-reread.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fission-reread.exp?ref=61dee7220ecff488f24d32511c2532466d25741f",
      "patch": "@@ -30,17 +30,20 @@ set additional_flags [gdb_target_symbol_prefix_flags_asm]\n \n standard_testfile .S\n \n-set dwo [standard_output_file \"fission-reread.dwo\"]\n+set obj [standard_output_file \"${testfile}.o\"]\n+set dwo [standard_output_file \"${testfile}.dwo\"]\n \n-set options [list]\n-lappend options nodebug\n+set options [list nodebug]\n if { $additional_flags != \"\" } {\n     lappend options $additional_flags\n }\n-lappend options additional_flags=-DDWO=$dwo\n \n-if [build_executable_from_fission_assembler \\\n-\t\"$testfile.exp\" \"$binfile\" \"$srcfile\" $options] {\n+set dwo_options $options\n+lappend dwo_options split-dwo\n+lappend dwo_options additional_flags=-DDWO=$dwo\n+\n+if [build_executable_and_dwo_files \"$testfile.exp\" \"${binfile}\" $options \\\n+\t[list $srcfile $dwo_options $obj]] {\n     return -1\n }\n "
    },
    {
      "sha": "f6a35749cabf7c06d033e5acec40685400141e84",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 217,
      "deletions": 44,
      "changes": 261,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61dee7220ecff488f24d32511c2532466d25741f/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=61dee7220ecff488f24d32511c2532466d25741f",
      "patch": "@@ -28,59 +28,170 @@ proc dwarf2_support {} {\n     return 0\n }\n \n-# Build an executable from a fission-based .S file.\n-# This handles the extra work of splitting the .o into non-dwo and dwo\n-# pieces, making sure the .dwo is available if we're using cc-with-tweaks.sh\n-# to build a .dwp file.\n-# The arguments and results are the same as for build_executable.\n+# Use 'objcopy --extract-dwo to extract DWO information from\n+# OBJECT_FILE and place it into DWO_FILE.\n #\n-# Current restrictions:\n-# - only supports one source file\n-# - cannot be run on remote hosts\n-\n-proc build_executable_from_fission_assembler { testname executable sources options } {\n-    verbose -log \"build_executable_from_fission_assembler $testname $executable $sources $options\"\n-    if { [llength $sources] != 1 } {\n-\terror \"Only one source file supported.\"\n-    }\n-    if [is_remote host] {\n-\terror \"Remote hosts are not supported.\"\n-    }\n-\n-    global srcdir subdir\n-    set source_file ${srcdir}/${subdir}/${sources}\n-    set root_name [file rootname [file tail $source_file]]\n-    set output_base [standard_output_file $root_name]\n-    set object_file ${output_base}.o\n-    set dwo_file ${output_base}.dwo\n-    set object_options \"object $options\"\n+# Return 0 on success, otherwise, return -1.\n+proc extract_dwo_information { object_file dwo_file } {\n     set objcopy [gdb_find_objcopy]\n-\n-    set result [gdb_compile $source_file $object_file object $options]\n-    if { \"$result\" != \"\" } {\n-\treturn -1\n-    }\n-\n     set command \"$objcopy --extract-dwo $object_file $dwo_file\"\n     verbose -log \"Executing $command\"\n     set result [catch \"exec $command\" output]\n     verbose -log \"objcopy --extract-dwo output: $output\"\n     if { $result == 1 } {\n \treturn -1\n     }\n+    return 0\n+}\n \n-    set command \"$objcopy --strip-dwo $object_file\"\n+# Use 'objcopy --strip-dwo to remove DWO information from\n+# FILENAME.\n+#\n+# Return 0 on success, otherwise, return -1.\n+proc strip_dwo_information { filename } {\n+    set objcopy [gdb_find_objcopy]\n+    set command \"$objcopy --strip-dwo $filename\"\n     verbose -log \"Executing $command\"\n     set result [catch \"exec $command\" output]\n     verbose -log \"objcopy --strip-dwo output: $output\"\n     if { $result == 1 } {\n \treturn -1\n     }\n+    return 0\n+}\n \n-    set result [gdb_compile $object_file $executable executable $options]\n-    if { \"$result\" != \"\" } {\n+# Build an executable, with the debug information split out into a\n+# separate .dwo file.\n+#\n+# This function is based on build_executable_from_specs in\n+# lib/gdb.exp, but with threading support, and rust support removed.\n+#\n+# TESTNAME is the name of the test; this is passed to 'untested' if\n+# something fails.\n+#\n+# EXECUTABLE is the executable to create, this can be an absolute\n+# path, or a relative path, in which case the EXECUTABLE will be\n+# created in the standard output directory.\n+#\n+# OPTIONS is passed to the final link, using gdb_compile.  If OPTIONS\n+# contains any option that indicates threads is required, of if the\n+# option rust is included, then this function will return failure.\n+#\n+# ARGS is a series of lists.  Each list is a spec for one source file\n+# that will be compiled to make EXECUTABLE.  Each spec in ARGS has the\n+# form:\n+#\t[ SOURCE OPTIONS ]\n+# or:\n+#       [ SOURCE OPTIONS OBJFILE ]\n+#\n+# Where SOURCE is the path to the source file to compile.  This can be\n+# absolute, or relative to the standard global ${subdir}/${srcdir}/\n+# path.\n+#\n+# OPTIONS are the options to use when compiling SOURCE into an object\n+# file.\n+#\n+# OBJFILE is optional, if present this is the name of the object file\n+# to create for SOURCE.  If this is not provided then a suitable name\n+# will be auto-generated.\n+#\n+# If OPTIONS contains the option 'split-dwo' then the debug\n+# information is extracted from the object file created by compiling\n+# SOURCE and placed into a file with a dwo extension.  The name of\n+# this file is generated based on the name of the object file that was\n+# created (with the .o replaced with .dwo).\n+proc build_executable_and_dwo_files { testname executable options args } {\n+    global subdir\n+    global srcdir\n+\n+    if { ! [regexp \"^/\" \"$executable\"] } then {\n+\tset binfile [standard_output_file $executable]\n+    } else {\n+\tset binfile $executable\n+    }\n+\n+    set info_options \"\"\n+    if { [lsearch -exact $options \"c++\"] >= 0 } {\n+\tset info_options \"c++\"\n+    }\n+    if [get_compiler_info ${info_options}] {\n+        return -1\n+    }\n+\n+    set func gdb_compile\n+    if {[lsearch -regexp $options \\\n+\t     {^(pthreads|shlib|shlib_pthreads|openmp)$}] != -1} {\n+\t# Currently don't support compiling thread based tests here.\n+\t# If this is required then look to build_executable_from_specs\n+\t# for inspiration.\n \treturn -1\n     }\n+    if {[lsearch -exact $options rust] != -1} {\n+\t# Currently don't support compiling rust tests here.  If this\n+\t# is required then look to build_executable_from_specs for\n+\t# inspiration.\n+\treturn -1\n+    }\n+\n+    # Must be run on local host due to use of objcopy.\n+    if [is_remote host] {\n+\treturn -1\n+    }\n+\n+    set objects {}\n+    set i 0\n+    foreach spec $args {\n+\tif {[llength $spec] < 2} {\n+\t    error \"invalid spec length\"\n+\t    return -1\n+\t}\n+\n+\tverbose -log \"APB: SPEC: $spec\"\n+\n+\tset s [lindex $spec 0]\n+\tset local_options [lindex $spec 1]\n+\n+\tif { ! [regexp \"^/\" \"$s\"] } then {\n+\t    set s \"$srcdir/$subdir/$s\"\n+\t}\n+\n+\tif {[llength $spec] > 2} {\n+\t    set objfile [lindex $spec 2]\n+\t} else {\n+\t    set objfile \"${binfile}${i}.o\"\n+\t    incr i\n+\t}\n+\n+\tif  { [$func \"${s}\" \"${objfile}\" object $local_options] != \"\" } {\n+\t    untested $testname\n+\t    return -1\n+\t}\n+\n+\tlappend objects \"$objfile\"\n+\n+\tif {[lsearch -exact $local_options \"split-dwo\"] >= 0} {\n+\t    # Split out the DWO file.\n+\t    set dwo_file \"[file rootname ${objfile}].dwo\"\n+\n+\t    if { [extract_dwo_information $objfile $dwo_file] == -1 } {\n+\t\tuntested $testname\n+\t\treturn -1\n+\t    }\n+\n+\t    if { [strip_dwo_information $objfile] == -1 } {\n+\t\tuntested $testname\n+\t\treturn -1\n+\t    }\n+\t}\n+    }\n+\n+    verbose -log \"APB: OBJECTS = $objects\"\n+\n+    set ret [$func $objects \"${binfile}\" executable $options]\n+    if  { $ret != \"\" } {\n+        untested $testname\n+        return -1\n+    }\n \n     return 0\n }\n@@ -329,6 +440,14 @@ namespace eval Dwarf {\n     # The address size for debug ranges section.\n     variable _debug_ranges_64_bit\n \n+    # The index into the .debug_addr section (used for fission\n+    # generation).\n+    variable _debug_addr_index\n+\n+    # Flag, true if the current CU is contains fission information,\n+    # otherwise false.\n+    variable _cu_is_fission\n+\n     proc _process_one_constant {name value} {\n \tvariable _constants\n \tvariable _AT\n@@ -486,6 +605,18 @@ namespace eval Dwarf {\n \t\t_op .${_cu_addr_size}byte $value\n \t    }\n \n+\t    DW_FORM_GNU_addr_index {\n+\t\tvariable _debug_addr_index\n+\t\tvariable _cu_addr_size\n+\n+\t\t_op .uleb128 ${_debug_addr_index}\n+\t\tincr _debug_addr_index\n+\n+\t\t_defer_output .debug_addr {\n+\t\t    _op .${_cu_addr_size}byte $value\n+\t\t}\n+\t    }\n+\n \t    DW_FORM_data2 -\n \t    DW_FORM_ref2 {\n \t\t_op .2byte $value\n@@ -553,7 +684,6 @@ namespace eval Dwarf {\n \t    DW_FORM_strx3 -\n \t    DW_FORM_strx4 -\n \n-\t    DW_FORM_GNU_addr_index -\n \t    DW_FORM_GNU_str_index -\n \n \t    default {\n@@ -609,6 +739,9 @@ namespace eval Dwarf {\n \t    DW_AT_name {\n \t\treturn DW_FORM_string\n \t    }\n+\t    DW_AT_GNU_addr_base {\n+\t\treturn DW_FORM_sec_offset\n+\t    }\n \t}\n \treturn \"\"\n     }\n@@ -649,6 +782,8 @@ namespace eval Dwarf {\n     # Handle macro attribute MACRO_AT_range.\n \n     proc _handle_macro_at_range { attr_value } {\n+\tvariable _cu_is_fission\n+\n \tif {[llength $attr_value] != 1} {\n \t    error \"usage: MACRO_AT_range { func }\"\n \t}\n@@ -658,10 +793,14 @@ namespace eval Dwarf {\n \tset src ${srcdir}/${subdir}/${srcfile}\n \tset result [function_range $func $src]\n \n-\t_handle_attribute DW_AT_low_pc [lindex $result 0] \\\n-\t    DW_FORM_addr\n+\tset form DW_FORM_addr\n+\tif { $_cu_is_fission } {\n+\t    set form DW_FORM_GNU_addr_index\n+\t}\n+\n+\t_handle_attribute DW_AT_low_pc [lindex $result 0] $form\n \t_handle_attribute DW_AT_high_pc \\\n-\t    \"[lindex $result 0] + [lindex $result 1]\" DW_FORM_addr\n+\t    \"[lindex $result 0] + [lindex $result 1]\" $form\n     }\n \n     # Handle macro attribute MACRO_AT_func.\n@@ -945,6 +1084,18 @@ namespace eval Dwarf {\n \t\t    _op .${addr_size}byte $argvec(size)\n \t\t}\n \n+\t\tDW_OP_GNU_addr_index {\n+\t\t    variable _debug_addr_index\n+\t\t    variable _cu_addr_size\n+\n+\t\t    _op .uleb128 ${_debug_addr_index}\n+\t\t    incr _debug_addr_index\n+\n+\t\t    _defer_output .debug_addr {\n+\t\t\t_op .${_cu_addr_size}byte [lindex $line 1]\n+\t\t    }\n+\t\t}\n+\n \t\tDW_OP_regx {\n \t\t    _get_args $line $opcode register\n \t\t    _op .uleb128 $argvec(register)\n@@ -1069,6 +1220,23 @@ namespace eval Dwarf {\n \t}\n     }\n \n+    # Return a label that references the current position in the\n+    # .debug_addr table.  When a user is creating split DWARF they\n+    # will define two CUs, the first will be the split DWARF content,\n+    # and the second will be the non-split stub CU.  The split DWARF\n+    # CU fills in the .debug_addr section, but the non-split CU\n+    # includes a reference to the start of the section.  The label\n+    # returned by this proc provides that reference.\n+    proc debug_addr_label {} {\n+\tvariable _debug_addr_index\n+\n+\tset lbl [new_label \"debug_addr_idx_${_debug_addr_index}_\"]\n+\t_defer_output .debug_addr {\n+\t    define_label $lbl\n+\t}\n+\treturn $lbl\n+    }\n+\n     # Emit a DWARF CU.\n     # OPTIONS is a list with an even number of elements containing\n     # option-name and option-value pairs.\n@@ -1092,12 +1260,13 @@ namespace eval Dwarf {\n \tvariable _cu_version\n \tvariable _cu_addr_size\n \tvariable _cu_offset_size\n+\tvariable _cu_is_fission\n \n \t# Establish the defaults.\n \tset is_64 0\n \tset _cu_version 4\n \tset _cu_addr_size default\n-\tset fission 0\n+\tset _cu_is_fission 0\n \tset section \".debug_info\"\n \tset _abbrev_section \".debug_abbrev\"\n \n@@ -1107,7 +1276,7 @@ namespace eval Dwarf {\n \t\tis_64 { set is_64 $value }\n \t\tversion { set _cu_version $value }\n \t\taddr_size { set _cu_addr_size $value }\n-\t\tfission { set fission $value }\n+\t\tfission { set _cu_is_fission $value }\n \t\tdefault { error \"unknown option $name\" }\n \t    }\n \t}\n@@ -1119,7 +1288,7 @@ namespace eval Dwarf {\n \t    }\n \t}\n \tset _cu_offset_size [expr { $is_64 ? 8 : 4 }]\n-\tif { $fission } {\n+\tif { $_cu_is_fission } {\n \t    set section \".debug_info.dwo\"\n \t    set _abbrev_section \".debug_abbrev.dwo\"\n \t}\n@@ -1199,12 +1368,13 @@ namespace eval Dwarf {\n \tvariable _cu_version\n \tvariable _cu_addr_size\n \tvariable _cu_offset_size\n+\tvariable _cu_is_fission\n \n \t# Establish the defaults.\n \tset is_64 0\n \tset _cu_version 4\n \tset _cu_addr_size default\n-\tset fission 0\n+\tset _cu_is_fission 0\n \tset section \".debug_types\"\n \tset _abbrev_section \".debug_abbrev\"\n \n@@ -1213,7 +1383,7 @@ namespace eval Dwarf {\n \t\tis_64 { set is_64 $value }\n \t\tversion { set _cu_version $value }\n \t\taddr_size { set _cu_addr_size $value }\n-\t\tfission { set fission $value }\n+\t\tfission { set _cu_is_fission $value }\n \t\tdefault { error \"unknown option $name\" }\n \t    }\n \t}\n@@ -1225,7 +1395,7 @@ namespace eval Dwarf {\n \t    }\n \t}\n \tset _cu_offset_size [expr { $is_64 ? 8 : 4 }]\n-\tif { $fission } {\n+\tif { $_cu_is_fission } {\n \t    set section \".debug_types.dwo\"\n \t    set _abbrev_section \".debug_abbrev.dwo\"\n \t}\n@@ -2075,6 +2245,7 @@ namespace eval Dwarf {\n \tvariable _line_saw_program\n \tvariable _line_header_end_label\n \tvariable _debug_ranges_64_bit\n+\tvariable _debug_addr_index\n \n \tif {!$_initialized} {\n \t    _read_constants\n@@ -2093,6 +2264,8 @@ namespace eval Dwarf {\n \tset _line_saw_program 0\n \tset _debug_ranges_64_bit [is_64_target]\n \n+\tset _debug_addr_index 0\n+\n \t# Not \"uplevel\" here, because we want to evaluate in this\n \t# namespace.  This is somewhat bad because it means we can't\n \t# readily refer to outer variables."
    }
  ]
}