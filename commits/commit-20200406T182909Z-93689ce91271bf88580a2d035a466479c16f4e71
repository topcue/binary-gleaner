{
  "sha": "93689ce91271bf88580a2d035a466479c16f4e71",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTM2ODljZTkxMjcxYmY4ODU4MGEyZDAzNWE0NjY0NzljMTZmNGU3MQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-06T18:13:24Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-06T18:29:09Z"
    },
    "message": "Handle complex error type in read_base_type\n\nIt turns out there was one more bug in the earlier complex series:\nread_base_type could cause an assertion failure on some platforms.  I\nfound this running the AdaCore internal test suite, but you can also\nsee it by running gdb's \"gdb.cp\" tests for x86 (not x86-64).\n\nIn particular, the DW_ATE_complex_float case calls\ndwarf2_init_complex_target_type, which calls dwarf2_init_float_type,\nwhich can return a type using TYPE_CODE_ERROR.\n\nThis patch changes the DWARF reader to handle this case, the same way\nthat the f-lang.c patch did.  Perhaps init_complex_type really should\nbe changed to allow TYPE_CODE_ERROR?  I was not sure.\n\nTested on x86-64 Fedora 30, using an x86 build.  I'm checking this in.\n\ngdb/ChangeLog\n2020-04-06  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2/read.c (read_base_type) <DW_ATE_complex_float>: Handle\n\tTYPE_CODE_ERROR.",
    "tree": {
      "sha": "42d0491979b19bb6e65e7b38c0363cd1bf297db2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/42d0491979b19bb6e65e7b38c0363cd1bf297db2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/93689ce91271bf88580a2d035a466479c16f4e71",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93689ce91271bf88580a2d035a466479c16f4e71",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/93689ce91271bf88580a2d035a466479c16f4e71",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93689ce91271bf88580a2d035a466479c16f4e71/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "797439622361bc901ed64b398c0d689c97cd8121",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/797439622361bc901ed64b398c0d689c97cd8121",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/797439622361bc901ed64b398c0d689c97cd8121"
    }
  ],
  "stats": {
    "total": 19,
    "additions": 18,
    "deletions": 1
  },
  "files": [
    {
      "sha": "cdf6d66787216a267664574857cfe569a79fb58e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93689ce91271bf88580a2d035a466479c16f4e71/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93689ce91271bf88580a2d035a466479c16f4e71/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=93689ce91271bf88580a2d035a466479c16f4e71",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-06  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2/read.c (read_base_type) <DW_ATE_complex_float>: Handle\n+\tTYPE_CODE_ERROR.\n+\n 2020-04-06  Kamil Rytarowski  <n54@gmx.com>\n \n \t* nbsd-tdep.c: Include \"gdbarch.h\"."
    },
    {
      "sha": "749acb3ba26cd3f6b06a24967b1d02c9d78bf352",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93689ce91271bf88580a2d035a466479c16f4e71/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93689ce91271bf88580a2d035a466479c16f4e71/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=93689ce91271bf88580a2d035a466479c16f4e71",
      "patch": "@@ -16910,7 +16910,19 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n       case DW_ATE_complex_float:\n \ttype = dwarf2_init_complex_target_type (cu, objfile, bits / 2, name,\n \t\t\t\t\t\tbyte_order);\n-\ttype = init_complex_type (name, type);\n+\tif (TYPE_CODE (type) == TYPE_CODE_ERROR)\n+\t  {\n+\t    if (name == nullptr)\n+\t      {\n+\t\tstruct obstack *obstack\n+\t\t  = &cu->per_cu->dwarf2_per_objfile->objfile->objfile_obstack;\n+\t\tname = obconcat (obstack, \"_Complex \", TYPE_NAME (type),\n+\t\t\t\t nullptr);\n+\t      }\n+\t    type = init_type (objfile, TYPE_CODE_ERROR, bits, name);\n+\t  }\n+\telse\n+\t  type = init_complex_type (name, type);\n \tbreak;\n       case DW_ATE_decimal_float:\n \ttype = init_decfloat_type (objfile, bits, name);"
    }
  ]
}