{
  "sha": "e409955ddcc33743044f217a3cc0541e0e6211b7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTQwOTk1NWRkY2MzMzc0MzA0NGYyMTdhM2NjMDU0MWUwZTYyMTFiNw==",
  "commit": {
    "author": {
      "name": "Fredrik Strupe",
      "email": "fredrik@strupe.net",
      "date": "2020-04-17T16:25:19Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-04-17T16:25:19Z"
    },
    "message": "[PATCH v2] binutils: arm: Fix disassembly of conditional VDUPs.\n\nVDUP (neon) instructions can be conditional, but this is not taken into\naccount in the current master. This commit fixes that by i) fixing the\nVDUP instruction masks and ii) adding logic for disassembling\nconditional neon instructions.\n\nopcodes\t* arm-dis.c (neon_opcodes): Fix VDUP instruction masks.\n\t(print_insn_neon): Support disassembly of conditional\n\tinstructions.\n\nbinutils* testsuite/binutils-all/arm/vdup-cond.d: New test for testing that\n\tconditional VDUP instructions are disassembled correctly.\n\t* testsuite/binutils-all/arm/vdup-cond.s: New file used by\n\tvdup-cond.d.\n\t* testsuite/binutils-all/arm/vdup-thumb.d: New test for testing\n\tthat VDUP instructions (which are conditional in A32) can be\n\tdisassembled in thumb mode.\n\t* testsuite/binutils-all/arm/vdup-cond.s: New file used by\n\tvdup-thumb.d.",
    "tree": {
      "sha": "5035e7c39e0a85db570823c1fa1925d3326f11ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5035e7c39e0a85db570823c1fa1925d3326f11ba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e409955ddcc33743044f217a3cc0541e0e6211b7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e409955ddcc33743044f217a3cc0541e0e6211b7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e409955ddcc33743044f217a3cc0541e0e6211b7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e409955ddcc33743044f217a3cc0541e0e6211b7/comments",
  "author": {
    "login": "frestr",
    "id": 7038699,
    "node_id": "MDQ6VXNlcjcwMzg2OTk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7038699?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/frestr",
    "html_url": "https://github.com/frestr",
    "followers_url": "https://api.github.com/users/frestr/followers",
    "following_url": "https://api.github.com/users/frestr/following{/other_user}",
    "gists_url": "https://api.github.com/users/frestr/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/frestr/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/frestr/subscriptions",
    "organizations_url": "https://api.github.com/users/frestr/orgs",
    "repos_url": "https://api.github.com/users/frestr/repos",
    "events_url": "https://api.github.com/users/frestr/events{/privacy}",
    "received_events_url": "https://api.github.com/users/frestr/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0203cad215219c3f78c5dff246fbc189946d06ce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0203cad215219c3f78c5dff246fbc189946d06ce",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0203cad215219c3f78c5dff246fbc189946d06ce"
    }
  ],
  "stats": {
    "total": 137,
    "additions": 127,
    "deletions": 10
  },
  "files": [
    {
      "sha": "1b6a2f9b8fbc6cb0981f36f518439133da3de890",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e409955ddcc33743044f217a3cc0541e0e6211b7/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e409955ddcc33743044f217a3cc0541e0e6211b7/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=e409955ddcc33743044f217a3cc0541e0e6211b7",
      "patch": "@@ -1,3 +1,15 @@\n+2020-04-17  Fredrik Strupe  <fredrik@strupe.net>\n+\n+\t* testsuite/binutils-all/arm/vdup-cond.d: New test for testing that\n+\tconditional VDUP instructions are disassembled correctly.\n+\t* testsuite/binutils-all/arm/vdup-cond.s: New file used by\n+\tvdup-cond.d.\n+\t* testsuite/binutils-all/arm/vdup-thumb.d: New test for testing\n+\tthat VDUP instructions (which are conditional in A32) can be\n+\tdisassembled in thumb mode.\n+\t* testsuite/binutils-all/arm/vdup-cond.s: New file used by\n+\tvdup-thumb.d.\n+\n 2020-04-17  Alan Modra  <amodra@gmail.com>\n \n \tPR 25840"
    },
    {
      "sha": "f75931b4664fecef06b84addf0ab91e371f47854",
      "filename": "binutils/testsuite/binutils-all/arm/vdup-cond.d",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e409955ddcc33743044f217a3cc0541e0e6211b7/binutils/testsuite/binutils-all/arm/vdup-cond.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e409955ddcc33743044f217a3cc0541e0e6211b7/binutils/testsuite/binutils-all/arm/vdup-cond.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/arm/vdup-cond.d?ref=e409955ddcc33743044f217a3cc0541e0e6211b7",
      "patch": "@@ -0,0 +1,27 @@\n+#PROG: objcopy\n+#source vdup-cond.s\n+#as: -mfpu=neon\n+#objdump: -d\n+#skip: *-*-pe *-wince-* *-*-coff\n+#name: Check if disassembler can handle conditional neon (vdup) instructions\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section \\.vdups:\n+\n+.+ <\\.vdups>:\n+[^:]+:\t0e800b10 \tvdupeq.32\td0, r0\n+[^:]+:\t1e800b10 \tvdupne.32\td0, r0\n+[^:]+:\t2e800b10 \tvdupcs.32\td0, r0\n+[^:]+:\t3e800b10 \tvdupcc.32\td0, r0\n+[^:]+:\t4e800b10 \tvdupmi.32\td0, r0\n+[^:]+:\t5e800b10 \tvduppl.32\td0, r0\n+[^:]+:\t6e800b10 \tvdupvs.32\td0, r0\n+[^:]+:\t7e800b10 \tvdupvc.32\td0, r0\n+[^:]+:\t8e800b10 \tvduphi.32\td0, r0\n+[^:]+:\t9e800b10 \tvdupls.32\td0, r0\n+[^:]+:\tae800b10 \tvdupge.32\td0, r0\n+[^:]+:\tbe800b10 \tvduplt.32\td0, r0\n+[^:]+:\tce800b10 \tvdupgt.32\td0, r0\n+[^:]+:\tde800b10 \tvduple.32\td0, r0\n+[^:]+:\tee800b10 \tvdup.32\td0, r0"
    },
    {
      "sha": "cc544ef29cdaf6996f5bf4794211dbe61fdf3f31",
      "filename": "binutils/testsuite/binutils-all/arm/vdup-cond.s",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e409955ddcc33743044f217a3cc0541e0e6211b7/binutils/testsuite/binutils-all/arm/vdup-cond.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e409955ddcc33743044f217a3cc0541e0e6211b7/binutils/testsuite/binutils-all/arm/vdup-cond.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/arm/vdup-cond.s?ref=e409955ddcc33743044f217a3cc0541e0e6211b7",
      "patch": "@@ -0,0 +1,18 @@\n+.text\n+.arm\n+.section .vdups, \"ax\"\n+vdupeq.32  d0, r0\n+vdupne.32  d0, r0\n+vdupcs.32  d0, r0\n+vdupcc.32  d0, r0\n+vdupmi.32  d0, r0\n+vduppl.32  d0, r0\n+vdupvs.32  d0, r0\n+vdupvc.32  d0, r0\n+vduphi.32  d0, r0\n+vdupls.32  d0, r0\n+vdupge.32  d0, r0\n+vduplt.32  d0, r0\n+vdupgt.32  d0, r0\n+vduple.32  d0, r0\n+vdup.32    d0, r0"
    },
    {
      "sha": "30e80340f6b09c3246b6b9c863e2856fec8e3817",
      "filename": "binutils/testsuite/binutils-all/arm/vdup-thumb.d",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e409955ddcc33743044f217a3cc0541e0e6211b7/binutils/testsuite/binutils-all/arm/vdup-thumb.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e409955ddcc33743044f217a3cc0541e0e6211b7/binutils/testsuite/binutils-all/arm/vdup-thumb.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/arm/vdup-thumb.d?ref=e409955ddcc33743044f217a3cc0541e0e6211b7",
      "patch": "@@ -0,0 +1,13 @@\n+#PROG: objcopy\n+#source vdup-cond.s\n+#as: -mfpu=neon\n+#objdump: -d\n+#skip: *-*-pe *-wince-* *-*-coff\n+#name: Check if disassembler can handle vdup instructions in thumb\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section \\.vdups:\n+\n+.+ <\\.vdups>:\n+[^:]+:\tee80 0b10 \tvdup.32\td0, r0"
    },
    {
      "sha": "d98b6a41ea9ee7a88b90757868da48619473d1b2",
      "filename": "binutils/testsuite/binutils-all/arm/vdup-thumb.s",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e409955ddcc33743044f217a3cc0541e0e6211b7/binutils/testsuite/binutils-all/arm/vdup-thumb.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e409955ddcc33743044f217a3cc0541e0e6211b7/binutils/testsuite/binutils-all/arm/vdup-thumb.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/arm/vdup-thumb.s?ref=e409955ddcc33743044f217a3cc0541e0e6211b7",
      "patch": "@@ -0,0 +1,4 @@\n+.text\n+.thumb\n+.section .vdups, \"ax\"\n+vdup.32    d0, r0"
    },
    {
      "sha": "e3233f02ae10a86484aabccb962c5da3071a0fb9",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e409955ddcc33743044f217a3cc0541e0e6211b7/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e409955ddcc33743044f217a3cc0541e0e6211b7/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=e409955ddcc33743044f217a3cc0541e0e6211b7",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-17  Fredrik Strupe  <fredrik@strupe.net>\n+\n+\t* arm-dis.c (neon_opcodes): Fix VDUP instruction masks.\n+\t(print_insn_neon): Support disassembly of conditional\n+\tinstructions.\n+\n 2020-02-16  David Faust  <david.faust@oracle.com>\n \n \t* bpf-desc.c: Regenerate."
    },
    {
      "sha": "79a3dc656a92b7e8bfc258f64d621d34f60273f9",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 47,
      "deletions": 10,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e409955ddcc33743044f217a3cc0541e0e6211b7/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e409955ddcc33743044f217a3cc0541e0e6211b7/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=e409955ddcc33743044f217a3cc0541e0e6211b7",
      "patch": "@@ -1494,17 +1494,17 @@ static const struct opcode32 neon_opcodes[] =\n \n   /* Data transfer between ARM and NEON registers.  */\n   {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0e800b10, 0x1ff00f70, \"vdup%c.32\\t%16-19,7D, %12-15r\"},\n+    0x0e800b10, 0x0ff00f70, \"vdup%c.32\\t%16-19,7D, %12-15r\"},\n   {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0e800b30, 0x1ff00f70, \"vdup%c.16\\t%16-19,7D, %12-15r\"},\n+    0x0e800b30, 0x0ff00f70, \"vdup%c.16\\t%16-19,7D, %12-15r\"},\n   {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0ea00b10, 0x1ff00f70, \"vdup%c.32\\t%16-19,7Q, %12-15r\"},\n+    0x0ea00b10, 0x0ff00f70, \"vdup%c.32\\t%16-19,7Q, %12-15r\"},\n   {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0ea00b30, 0x1ff00f70, \"vdup%c.16\\t%16-19,7Q, %12-15r\"},\n+    0x0ea00b30, 0x0ff00f70, \"vdup%c.16\\t%16-19,7Q, %12-15r\"},\n   {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0ec00b10, 0x1ff00f70, \"vdup%c.8\\t%16-19,7D, %12-15r\"},\n+    0x0ec00b10, 0x0ff00f70, \"vdup%c.8\\t%16-19,7D, %12-15r\"},\n   {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n-    0x0ee00b10, 0x1ff00f70, \"vdup%c.8\\t%16-19,7Q, %12-15r\"},\n+    0x0ee00b10, 0x0ff00f70, \"vdup%c.8\\t%16-19,7Q, %12-15r\"},\n \n   /* Move data element to all lanes.  */\n   {ARM_FEATURE_COPROC (FPU_NEON_EXT_V1),\n@@ -9032,13 +9032,51 @@ print_insn_neon (struct disassemble_info *info, long given, bfd_boolean thumb)\n \t       || (given & 0xff000000) == 0xfc000000)\n \t;\n       /* vdup is also a valid neon instruction.  */\n-      else if ((given & 0xff910f5f) != 0xee800b10)\n+      else if ((given & 0xff900f5f) != 0xee800b10)\n \treturn FALSE;\n     }\n \n   for (insn = neon_opcodes; insn->assembler; insn++)\n     {\n-      if ((given & insn->mask) == insn->value)\n+      unsigned long cond_mask = insn->mask;\n+      unsigned long cond_value = insn->value;\n+      int cond;\n+\n+      if (thumb)\n+        {\n+          if ((cond_mask & 0xf0000000) == 0) {\n+              /* For the entries in neon_opcodes, an opcode mask/value with\n+                 the high 4 bits equal to 0 indicates a conditional\n+                 instruction. For thumb however, we need to include those\n+                 bits in the instruction matching.  */\n+              cond_mask |= 0xf0000000;\n+              /* Furthermore, the thumb encoding of a conditional instruction\n+                 will have the high 4 bits equal to 0xe.  */\n+              cond_value |= 0xe0000000;\n+          }\n+          if (ifthen_state)\n+            cond = IFTHEN_COND;\n+          else\n+            cond = COND_UNCOND;\n+        }\n+      else\n+        {\n+          if ((given & 0xf0000000) == 0xf0000000)\n+            {\n+              /* If the instruction is unconditional, update the mask to only\n+                 match against unconditional opcode values.  */\n+              cond_mask |= 0xf0000000;\n+              cond = COND_UNCOND;\n+            }\n+          else\n+            {\n+              cond = (given >> 28) & 0xf;\n+              if (cond == 0xe)\n+                cond = COND_UNCOND;\n+            }\n+        }\n+\n+      if ((given & cond_mask) == cond_value)\n \t{\n \t  signed long value_in_comment = 0;\n \t  bfd_boolean is_unpredictable = FALSE;\n@@ -9060,8 +9098,7 @@ print_insn_neon (struct disassemble_info *info, long given, bfd_boolean thumb)\n \n \t\t      /* Fall through.  */\n \t\t    case 'c':\n-\t\t      if (thumb && ifthen_state)\n-\t\t\tfunc (stream, \"%s\", arm_conditional[IFTHEN_COND]);\n+\t\t      func (stream, \"%s\", arm_conditional[cond]);\n \t\t      break;\n \n \t\t    case 'A':"
    }
  ]
}