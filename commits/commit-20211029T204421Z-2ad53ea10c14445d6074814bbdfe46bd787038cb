{
  "sha": "2ad53ea10c14445d6074814bbdfe46bd787038cb",
  "node_id": "C_kwDOANOeidoAKDJhZDUzZWExMGMxNDQ0NWQ2MDc0ODE0YmJkZmU0NmJkNzg3MDM4Y2I",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-26T20:34:28Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-10-29T20:44:21Z"
    },
    "message": "gdb: remove TYPE_FIELD_LOC_KIND\n\nRemove TYPE_FIELD_LOC_KIND, replace its uses with type::field +\nfield::loc_kind.\n\nChange-Id: Ib124a26365df82ac1d23df7962d954192913bd90",
    "tree": {
      "sha": "754f8b3ea284ae5ef76887619d2fb468b8067bd2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/754f8b3ea284ae5ef76887619d2fb468b8067bd2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2ad53ea10c14445d6074814bbdfe46bd787038cb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2ad53ea10c14445d6074814bbdfe46bd787038cb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2ad53ea10c14445d6074814bbdfe46bd787038cb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2ad53ea10c14445d6074814bbdfe46bd787038cb/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d8557c3d229589c690a1bef92be434eb663e3bb6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8557c3d229589c690a1bef92be434eb663e3bb6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d8557c3d229589c690a1bef92be434eb663e3bb6"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 18,
    "deletions": 18
  },
  "files": [
    {
      "sha": "29d1bab81148df8d52e201227e2a471944977f50",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "patch": "@@ -1438,7 +1438,7 @@ static void\n gen_static_field (struct agent_expr *ax, struct axs_value *value,\n \t\t  struct type *type, int fieldno)\n {\n-  if (TYPE_FIELD_LOC_KIND (type, fieldno) == FIELD_LOC_KIND_PHYSADDR)\n+  if (type->field (fieldno).loc_kind () == FIELD_LOC_KIND_PHYSADDR)\n     {\n       ax_const_l (ax, TYPE_FIELD_STATIC_PHYSADDR (type, fieldno));\n       value->kind = axs_lvalue_memory;"
    },
    {
      "sha": "ef73aaabf0f10268c0b2a9af47afee1cd365ae51",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "patch": "@@ -599,7 +599,7 @@ compile_cplus_convert_struct_or_union_members\n \t{\n \t  CORE_ADDR physaddr;\n \n-\t  switch (TYPE_FIELD_LOC_KIND (type, i))\n+\t  switch (type->field (i).loc_kind ())\n \t    {\n \t    case FIELD_LOC_KIND_PHYSADDR:\n \t      {\n@@ -939,7 +939,7 @@ compile_cplus_convert_enum (compile_cplus_instance *instance, struct type *type,\n       gdb::unique_xmalloc_ptr<char> fname\n \t= compile_cplus_instance::decl_name (type->field (i).name ());\n \n-      if (TYPE_FIELD_LOC_KIND (type, i) != FIELD_LOC_KIND_ENUMVAL\n+      if (type->field (i).loc_kind () != FIELD_LOC_KIND_ENUMVAL\n \t  || fname == nullptr)\n \tcontinue;\n "
    },
    {
      "sha": "5e5c7ccfdb859b722e928c8cf45680cf6312e894",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "patch": "@@ -9065,7 +9065,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n \t  name = tail;\n \t  if (*name != '$'\n \t      || index >= field_type->num_fields ()\n-\t      || (TYPE_FIELD_LOC_KIND (field_type, index)\n+\t      || (field_type->field (index).loc_kind ()\n \t\t  != FIELD_LOC_KIND_BITPOS))\n \t    {\n \t      complaint (_(\"Could not parse Rust enum encoding string \\\"%s\\\"\"\n@@ -9197,7 +9197,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n       std::unordered_map<std::string, ULONGEST> discriminant_map;\n       for (int i = 0; i < enum_type->num_fields (); ++i)\n \t{\n-\t  if (TYPE_FIELD_LOC_KIND (enum_type, i) == FIELD_LOC_KIND_ENUMVAL)\n+\t  if (enum_type->field (i).loc_kind () == FIELD_LOC_KIND_ENUMVAL)\n \t    {\n \t      const char *name\n \t\t= rust_last_path_segment (enum_type->field (i).name ());"
    },
    {
      "sha": "981b9b337c2e3ec37de5427a9e2ef88d123d281b",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "patch": "@@ -2154,7 +2154,7 @@ is_dynamic_type_internal (struct type *type, int top_level)\n \t      return 1;\n \t    /* If the field is at a fixed offset, then it is not\n \t       dynamic.  */\n-\t    if (TYPE_FIELD_LOC_KIND (type, i) != FIELD_LOC_KIND_DWARF_BLOCK)\n+\t    if (type->field (i).loc_kind () != FIELD_LOC_KIND_DWARF_BLOCK)\n \t      continue;\n \t    /* Do not consider C++ virtual base types to be dynamic\n \t       due to the field's offset being dynamic; these are\n@@ -2454,7 +2454,7 @@ compute_variant_fields_inner (struct type *type,\n     {\n       int idx = part.discriminant_index;\n \n-      if (TYPE_FIELD_LOC_KIND (type, idx) != FIELD_LOC_KIND_BITPOS)\n+      if (type->field (idx).loc_kind () != FIELD_LOC_KIND_BITPOS)\n \terror (_(\"Cannot determine struct field location\"\n \t\t \" (invalid location kind)\"));\n \n@@ -2586,7 +2586,7 @@ resolve_dynamic_struct (struct type *type,\n       if (field_is_static (&resolved_type->field (i)))\n \tcontinue;\n \n-      if (TYPE_FIELD_LOC_KIND (resolved_type, i) == FIELD_LOC_KIND_DWARF_BLOCK)\n+      if (resolved_type->field (i).loc_kind () == FIELD_LOC_KIND_DWARF_BLOCK)\n \t{\n \t  struct dwarf2_property_baton baton;\n \t  baton.property_type\n@@ -2610,7 +2610,7 @@ resolve_dynamic_struct (struct type *type,\n \t that verification indicates a bug in our code, the error\n \t is not severe enough to suggest to the user he stops\n \t his debugging session because of it.  */\n-      if (TYPE_FIELD_LOC_KIND (resolved_type, i) != FIELD_LOC_KIND_BITPOS)\n+      if (resolved_type->field (i).loc_kind () != FIELD_LOC_KIND_BITPOS)\n \terror (_(\"Cannot determine struct field location\"\n \t\t \" (invalid location kind)\"));\n \n@@ -2625,7 +2625,7 @@ resolve_dynamic_struct (struct type *type,\n       resolved_type->field (i).set_type\n \t(resolve_dynamic_type_internal (resolved_type->field (i).type (),\n \t\t\t\t\t&pinfo, 0));\n-      gdb_assert (TYPE_FIELD_LOC_KIND (resolved_type, i)\n+      gdb_assert (resolved_type->field (i).loc_kind ()\n \t\t  == FIELD_LOC_KIND_BITPOS);\n \n       new_bit_length = TYPE_FIELD_BITPOS (resolved_type, i);\n@@ -5558,7 +5558,8 @@ copy_type_recursive (struct objfile *objfile,\n \t\t\t\t    copied_types));\n \t  if (type->field (i).name ())\n \t    new_type->field (i).set_name (xstrdup (type->field (i).name ()));\n-\t  switch (TYPE_FIELD_LOC_KIND (type, i))\n+\n+\t  switch (type->field (i).loc_kind ())\n \t    {\n \t    case FIELD_LOC_KIND_BITPOS:\n \t      new_type->field (i).set_loc_bitpos (TYPE_FIELD_BITPOS (type, i));\n@@ -5581,7 +5582,7 @@ copy_type_recursive (struct objfile *objfile,\n \t    default:\n \t      internal_error (__FILE__, __LINE__,\n \t\t\t      _(\"Unexpected type field location kind: %d\"),\n-\t\t\t      TYPE_FIELD_LOC_KIND (type, i));\n+\t\t\t      type->field (i).loc_kind ());\n \t    }\n \t}\n     }"
    },
    {
      "sha": "b9f96d945696cb908bceed253f9bf1edd2f19413",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "patch": "@@ -2128,7 +2128,6 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n #define FIELD_ARTIFICIAL(thisfld) ((thisfld).artificial)\n #define FIELD_BITSIZE(thisfld) ((thisfld).bitsize)\n \n-#define TYPE_FIELD_LOC_KIND(thistype, n) ((thistype)->field (n).loc_kind ())\n #define TYPE_FIELD_BITPOS(thistype, n) ((thistype)->field (n).loc_bitpos ())\n #define TYPE_FIELD_ENUMVAL(thistype, n) ((thistype)->field (n).loc_enumval ())\n #define TYPE_FIELD_STATIC_PHYSNAME(thistype, n) ((thistype)->field (n).loc_physname ())"
    },
    {
      "sha": "773d3f8053cc6187e482c1657bb3f02b92fcba0e",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "patch": "@@ -464,7 +464,7 @@ gnuv3_baseclass_offset (struct type *type, int index,\n     return TYPE_BASECLASS_BITPOS (type, index) / 8;\n \n   /* If we have a DWARF expression for the offset, evaluate it.  */\n-  if (TYPE_FIELD_LOC_KIND (type, index) == FIELD_LOC_KIND_DWARF_BLOCK)\n+  if (type->field (index).loc_kind () == FIELD_LOC_KIND_DWARF_BLOCK)\n     {\n       struct dwarf2_property_baton baton;\n       baton.property_type"
    },
    {
      "sha": "7980bec1c90562a702799704cbfafe25abc94c7e",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "patch": "@@ -189,7 +189,7 @@ convert_field (struct type *type, int field)\n \t}\n       else\n \t{\n-\t  if (TYPE_FIELD_LOC_KIND (type, field) == FIELD_LOC_KIND_DWARF_BLOCK)\n+\t  if (type->field (field).loc_kind () == FIELD_LOC_KIND_DWARF_BLOCK)\n \t    arg = gdbpy_ref<>::new_reference (Py_None);\n \t  else\n \t    arg = gdb_py_object_from_longest (TYPE_FIELD_BITPOS (type, field));"
    },
    {
      "sha": "069aebf372a4e44f316b4862453b9e55c5c667f7",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "patch": "@@ -2542,7 +2542,7 @@ riscv_struct_info::analyse_inner (struct type *type, int offset)\n \n   for (i = 0; i < count; ++i)\n     {\n-      if (TYPE_FIELD_LOC_KIND (type, i) != FIELD_LOC_KIND_BITPOS)\n+      if (type->field (i).loc_kind () != FIELD_LOC_KIND_BITPOS)\n \tcontinue;\n \n       struct type *field_type = type->field (i).type ();"
    },
    {
      "sha": "a80bdf08611bec010a76bc66e1ce059b77772c44",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "patch": "@@ -3332,7 +3332,7 @@ enum_constant_from_type (struct type *type, const char *name)\n       const char *fname = type->field (i).name ();\n       int len;\n \n-      if (TYPE_FIELD_LOC_KIND (type, i) != FIELD_LOC_KIND_ENUMVAL\n+      if (type->field (i).loc_kind () != FIELD_LOC_KIND_ENUMVAL\n \t  || fname == NULL)\n \tcontinue;\n "
    },
    {
      "sha": "b6672c77073f5422d8c1522d46fe5289fff65e77",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ad53ea10c14445d6074814bbdfe46bd787038cb/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=2ad53ea10c14445d6074814bbdfe46bd787038cb",
      "patch": "@@ -2952,7 +2952,7 @@ value_static_field (struct type *type, int fieldno)\n {\n   struct value *retval;\n \n-  switch (TYPE_FIELD_LOC_KIND (type, fieldno))\n+  switch (type->field (fieldno).loc_kind ())\n     {\n     case FIELD_LOC_KIND_PHYSADDR:\n       retval = value_at_lazy (type->field (fieldno).type (),"
    }
  ]
}