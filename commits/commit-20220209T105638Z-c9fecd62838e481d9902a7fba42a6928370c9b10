{
  "sha": "c9fecd62838e481d9902a7fba42a6928370c9b10",
  "node_id": "C_kwDOANOeidoAKGM5ZmVjZDYyODM4ZTQ4MWQ5OTAyYTdmYmE0MmE2OTI4MzcwYzliMTA",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-09T05:51:02Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-09T10:56:38Z"
    },
    "message": "Work around gcc-4 warnings in elf64-ppc.c\n\nelf64-ppc.c: In function 'ppc64_elf_size_dynamic_sections':\nelf64-ppc.c:10309:45: error: value computed is not used [-Werror=unused-value]\n     ++lgot_ents, ++lgot_masks, isym != NULL && isym++)\n\nIt is of course a silly warning, fixed in later versions of gcc.  I\nwrote \"isym != NULL && isym++\" rather than the simpler \"isym++\" to\nstop sanitisers complaining about incrementing a NULL pointer.  isym\nis of course unused in any code path where it might start off as\nNULL.  Sometimes you can't win.  So don't try to be clever in reading\nlocal symbols only when needed.  99 times out of 100 they will be\ncached anyway.\n\n\t* elf64-ppc.c (ppc64_elf_size_dynamic_sections): Avoid annoying\n\twarnings by always reading local syms.\n\t(ppc64_elf_layout_multitoc): Likewise.",
    "tree": {
      "sha": "c7cb03f19753380072e454135c8fa729134a6ebb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c7cb03f19753380072e454135c8fa729134a6ebb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c9fecd62838e481d9902a7fba42a6928370c9b10",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9fecd62838e481d9902a7fba42a6928370c9b10",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c9fecd62838e481d9902a7fba42a6928370c9b10",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9fecd62838e481d9902a7fba42a6928370c9b10/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5049d00eb7e77e816df6178250e9fee03e503127",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5049d00eb7e77e816df6178250e9fee03e503127",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5049d00eb7e77e816df6178250e9fee03e503127"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 14,
    "deletions": 22
  },
  "files": [
    {
      "sha": "7b7bfa195064118ae375e373e2748438aaabbabe",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 14,
      "deletions": 22,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9fecd62838e481d9902a7fba42a6928370c9b10/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9fecd62838e481d9902a7fba42a6928370c9b10/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=c9fecd62838e481d9902a7fba42a6928370c9b10",
      "patch": "@@ -10292,22 +10292,18 @@ ppc64_elf_size_dynamic_sections (bfd *output_bfd,\n       local_plt = (struct plt_entry **) end_lgot_ents;\n       end_local_plt = local_plt + locsymcount;\n       lgot_masks = (unsigned char *) end_local_plt;\n-      local_syms = NULL;\n-      if (bfd_link_pic (info))\n+      local_syms = (Elf_Internal_Sym *) symtab_hdr->contents;\n+      if (local_syms == NULL && locsymcount != 0)\n \t{\n-\t  local_syms = (Elf_Internal_Sym *) symtab_hdr->contents;\n-\t  if (local_syms == NULL && locsymcount != 0)\n-\t    {\n-\t      local_syms = bfd_elf_get_elf_syms (ibfd, symtab_hdr, locsymcount,\n-\t\t\t\t\t\t 0, NULL, NULL, NULL);\n-\t      if (local_syms == NULL)\n-\t\treturn false;\n-\t    }\n+\t  local_syms = bfd_elf_get_elf_syms (ibfd, symtab_hdr, locsymcount,\n+\t\t\t\t\t     0, NULL, NULL, NULL);\n+\t  if (local_syms == NULL)\n+\t    return false;\n \t}\n       s = ppc64_elf_tdata (ibfd)->got;\n       for (isym = local_syms;\n \t   lgot_ents < end_lgot_ents;\n-\t   ++lgot_ents, ++lgot_masks, isym != NULL && isym++)\n+\t   ++lgot_ents, ++lgot_masks, isym++)\n \t{\n \t  struct got_entry **pent, *ent;\n \n@@ -12828,22 +12824,18 @@ ppc64_elf_layout_multitoc (struct bfd_link_info *info)\n       local_plt = (struct plt_entry **) end_lgot_ents;\n       end_local_plt = local_plt + locsymcount;\n       lgot_masks = (unsigned char *) end_local_plt;\n-      local_syms = NULL;\n-      if (bfd_link_pic (info))\n+      local_syms = (Elf_Internal_Sym *) symtab_hdr->contents;\n+      if (local_syms == NULL && locsymcount != 0)\n \t{\n-\t  local_syms = (Elf_Internal_Sym *) symtab_hdr->contents;\n-\t  if (local_syms == NULL && locsymcount != 0)\n-\t    {\n-\t      local_syms = bfd_elf_get_elf_syms (ibfd, symtab_hdr, locsymcount,\n-\t\t\t\t\t\t 0, NULL, NULL, NULL);\n-\t      if (local_syms == NULL)\n-\t\treturn false;\n-\t    }\n+\t  local_syms = bfd_elf_get_elf_syms (ibfd, symtab_hdr, locsymcount,\n+\t\t\t\t\t     0, NULL, NULL, NULL);\n+\t  if (local_syms == NULL)\n+\t    return false;\n \t}\n       s = ppc64_elf_tdata (ibfd)->got;\n       for (isym = local_syms;\n \t   lgot_ents < end_lgot_ents;\n-\t   ++lgot_ents, ++lgot_masks, isym != NULL && isym++)\n+\t   ++lgot_ents, ++lgot_masks, isym++)\n \t{\n \t  struct got_entry *ent;\n "
    }
  ]
}