{
  "sha": "67748e0f666f0645d7f182e1365f4d9859e55f1d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Njc3NDhlMGY2NjZmMDY0NWQ3ZjE4MmUxMzY1ZjRkOTg1OWU1NWYxZA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-04T12:36:48Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-04T12:36:48Z"
    },
    "message": "[gdb/testsuite] Make gdb.arch/amd64-gs_base.exp unsupported for i386\n\nWith target board unix/-m32 I run into:\n...\n(gdb) print /x $fs_base^M\n$1 = void^M\n(gdb) FAIL: gdb.arch/amd64-gs_base.exp: print fs_base\n...\n\nThe problem is that the fs_base register is not supported for i386.\n\nFix this by making the test unsupported if fs_base/gs_base don't show up in\ninfo register sys output.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2020-12-04  Tom de Vries  <tdevries@suse.de>\n\n\tPR testsuite/26990\n\t* gdb.arch/amd64-gs_base.exp: Handle -m32 where fs_base and gs_base\n\tare unsupported.",
    "tree": {
      "sha": "668feae87503d1e6a467a25fceaca2ad78bfc120",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/668feae87503d1e6a467a25fceaca2ad78bfc120"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/67748e0f666f0645d7f182e1365f4d9859e55f1d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67748e0f666f0645d7f182e1365f4d9859e55f1d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/67748e0f666f0645d7f182e1365f4d9859e55f1d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67748e0f666f0645d7f182e1365f4d9859e55f1d/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b6a6aa07c5bd53d19c33db1f7c9645fc99b66e1b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6a6aa07c5bd53d19c33db1f7c9645fc99b66e1b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b6a6aa07c5bd53d19c33db1f7c9645fc99b66e1b"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 31,
    "deletions": 1
  },
  "files": [
    {
      "sha": "57b7208fe38739b326c43354fa172156620ea1e5",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67748e0f666f0645d7f182e1365f4d9859e55f1d/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67748e0f666f0645d7f182e1365f4d9859e55f1d/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=67748e0f666f0645d7f182e1365f4d9859e55f1d",
      "patch": "@@ -1,3 +1,9 @@\n+2020-12-04  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR testsuite/26990\n+\t* gdb.arch/amd64-gs_base.exp: Handle -m32 where fs_base and gs_base\n+\tare unsupported.\n+\n 2020-12-04  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.reverse/insn-reverse.exp: Don't break inside gdb_test_multiple"
    },
    {
      "sha": "d29043bb7969f64a2a04875b6cb10ff960f48a7e",
      "filename": "gdb/testsuite/gdb.arch/amd64-gs_base.exp",
      "status": "modified",
      "additions": 25,
      "deletions": 1,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67748e0f666f0645d7f182e1365f4d9859e55f1d/gdb/testsuite/gdb.arch/amd64-gs_base.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67748e0f666f0645d7f182e1365f4d9859e55f1d/gdb/testsuite/gdb.arch/amd64-gs_base.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/amd64-gs_base.exp?ref=67748e0f666f0645d7f182e1365f4d9859e55f1d",
      "patch": "@@ -30,6 +30,31 @@ if ![runto_main] {\n     return -1\n }\n \n+# Test the presence of fs_base and gs_base on the system\n+# register group and values.\n+#\n+set ws \"\\[\\t \\]+\"\n+set info_reg_out [multi_line \"info register sys\" \\\n+          \"fs_base${ws}$hex${ws}$decimal\"\\\n+          \"gs_base${ws}$hex${ws}$decimal\"\\\n+          \"orig_rax${ws}$hex${ws}\\[-\\]$decimal\" ]\n+set info_reg_out_m32 [multi_line \"info register sys\" \\\n+          \"orig_eax${ws}$hex${ws}\\[-\\]$decimal\" ]\n+\n+set supported 0\n+gdb_test_multiple \"info register sys\" \"\" {\n+    -re -wrap $info_reg_out {\n+\tset supported 1\n+    }\n+    -re -wrap $info_reg_out_m32 {\n+    }\n+}\n+\n+if { ! $supported } {\n+    unsupported \"target does not support fs_base and gs_base\"\n+    return -1\n+}\n+\n gdb_test \"print /x \\$fs_base\" \"= $hex\" \"print fs_base\"\n gdb_test \"print /x \\$gs_base\" \"= $hex\" \"print gs_base\"\n \n@@ -39,7 +64,6 @@ gdb_test \"print \\$gs_base = 3\" \"= 3\" \"set gs_base\"\n # Test the presence of fs_base and gs_base on the system\n # register group and values.\n #\n-set ws \"\\[\\t \\]+\"\n set info_reg_out [multi_line \"info register sys\" \\\n           \"fs_base${ws}0x2${ws}2\"\\\n           \"gs_base${ws}0x3${ws}3\"\\"
    }
  ]
}