{
  "sha": "17d305ef8f4b5bf20beaaad427490b3c6773909b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTdkMzA1ZWY4ZjRiNWJmMjBiZWFhYWQ0Mjc0OTBiM2M2NzczOTA5Yg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-06-01T13:25:51Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-06-01T13:25:51Z"
    },
    "message": "[gdb/symtab] Ignore cold clones\n\nConsider the test-case contained in this patch, compiled for c using gcc-10:\n...\n$ gcc-10 -x c src/gdb/testsuite/gdb.cp/cold-clone.cc -O2 -g -Wall -Wextra\n...\n\nWhen setting a breakpoint on foo, we get one breakpoint location:\n...\n$ gdb -q -batch a.out -ex \"b foo\"\nBreakpoint 1 at 0x400560: file cold-clone.cc, line 28.\n...\n\nHowever, when we compile for c++ instead, we get two breakpoint locations:\n...\n$ gdb -q -batch a.out -ex \"b foo\" -ex \"info break\"\nBreakpoint 1 at 0x400430: foo. (2 locations)\nNum  Type        Disp Enb Address            What\n1    breakpoint  keep y   <MULTIPLE>\n1.1                   y   0x0000000000400430 in foo() at cold-clone.cc:30\n1.2                   y   0x0000000000400560 in foo() at cold-clone.cc:28\n...\n\nThe additional breakpoint location at 0x400430 corresponds to the cold clone:\n...\n$ nm a.out | grep foo\n0000000000400560 t _ZL3foov\n0000000000400430 t _ZL3foov.cold\n...\nwhich demangled looks like this:\n...\n$ nm -C a.out | grep foo\n0000000000400560 t foo()\n0000000000400430 t foo() [clone .cold]\n...\n\n[ Or, in the case of the cc1 mentioned in PR23710:\n...\n$ nm cc1 | grep do_rpo_vn.*cold\n000000000058659d t \\\n  _ZL9do_rpo_vnP8functionP8edge_defP11bitmap_headbb.cold.138\n$ nm -C cc1 | grep do_rpo_vn.*cold\n000000000058659d t \\\n  do_rpo_vn(function*, edge_def*, bitmap_head*, bool, bool) [clone .cold.138]\n... ]\n\nThe cold clone is a part of the function that is split off from the rest of\nthe function because it's considered cold (not frequently executed).  So while\nthe symbol points to code that is part of a function, it doesn't point to a\nfunction entry, so the desirable behaviour for \"break foo\" is to ignore this\nsymbol.\n\nWhen compiling for c, the symbol \"foo.cold\" is entered as minimal symbol\nwith the search name \"foo.cold\", and the lookup using \"foo\" fails to find that\nsymbol.\n\nBut when compiling for c++, the symbol \"foo.cold\" is entered as minimal symbol\nwith both the mangled and demangled name, and for the demangled name\n\"foo() [clone .cold]\" we get the search name \"foo\" (because\ncp_search_name_hash stops hashing at '('), and the lookup using \"foo\" succeeds.\n\nFix this by recognizing the cold clone suffix and returning false for such a\nminimal symbol in msymbol_is_function.\n\nTested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2021-06-01  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/26096\n\t* minsyms.c (msymbol_is_cold_clone): New function.\n\t(msymbol_is_function): Use msymbol_is_cold_clone.\n\ngdb/testsuite/ChangeLog:\n\n2021-06-01  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/26096\n\t* gdb.cp/cold-clone.cc: New test.\n\t* gdb.cp/cold-clone.exp: New file.",
    "tree": {
      "sha": "65ff9afc5607d23095c384063372e366fe90f42f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/65ff9afc5607d23095c384063372e366fe90f42f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/17d305ef8f4b5bf20beaaad427490b3c6773909b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17d305ef8f4b5bf20beaaad427490b3c6773909b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/17d305ef8f4b5bf20beaaad427490b3c6773909b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17d305ef8f4b5bf20beaaad427490b3c6773909b/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b97eff8ffac51061413437ed3fe9b3a12f136cd4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b97eff8ffac51061413437ed3fe9b3a12f136cd4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b97eff8ffac51061413437ed3fe9b3a12f136cd4"
    }
  ],
  "stats": {
    "total": 148,
    "additions": 148,
    "deletions": 0
  },
  "files": [
    {
      "sha": "7780f76e84ec4b117102422c1d175aafe08547d7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17d305ef8f4b5bf20beaaad427490b3c6773909b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17d305ef8f4b5bf20beaaad427490b3c6773909b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=17d305ef8f4b5bf20beaaad427490b3c6773909b",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-01  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR symtab/26096\n+\t* minsyms.c (msymbol_is_cold_clone): New function.\n+\t(msymbol_is_function): Use msymbol_is_cold_clone.\n+\n 2021-06-01  Fredrik Hederstierna  <fredrik@hederstierna.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n "
    },
    {
      "sha": "80c3d431209e496df5c096df88ceccc69fd19148",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17d305ef8f4b5bf20beaaad427490b3c6773909b/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17d305ef8f4b5bf20beaaad427490b3c6773909b/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=17d305ef8f4b5bf20beaaad427490b3c6773909b",
      "patch": "@@ -60,6 +60,53 @@\n #include <mutex>\n #endif\n \n+/* Return true if MINSYM is a cold clone symbol.\n+   Recognize f.i. these symbols (mangled/demangled):\n+   - _ZL3foov.cold\n+     foo() [clone .cold]\n+   - _ZL9do_rpo_vnP8functionP8edge_defP11bitmap_headbb.cold.138\n+     do_rpo_vn(function*, edge_def*, bitmap_head*, bool, bool)\t\\\n+       [clone .cold.138].  */\n+\n+static bool\n+msymbol_is_cold_clone (minimal_symbol *minsym)\n+{\n+  const char *name = minsym->natural_name ();\n+  size_t name_len = strlen (name);\n+  if (name_len < 1)\n+    return false;\n+\n+  const char *last = &name[name_len - 1];\n+  if (*last != ']')\n+    return false;\n+\n+  const char *suffix = \" [clone .cold\";\n+  size_t suffix_len = strlen (suffix);\n+  const char *found = strstr (name, suffix);\n+  if (found == nullptr)\n+    return false;\n+\n+  const char *start = &found[suffix_len];\n+  if (*start == ']')\n+    return true;\n+\n+  if (*start != '.')\n+    return false;\n+\n+  const char *p;\n+  for (p = start + 1; p <= last; ++p)\n+    {\n+      if (*p >= '0' && *p <= '9')\n+\tcontinue;\n+      break;\n+    }\n+\n+  if (p == last)\n+    return true;\n+\n+  return false;\n+}\n+\n /* See minsyms.h.  */\n \n bool\n@@ -89,6 +136,11 @@ msymbol_is_function (struct objfile *objfile, minimal_symbol *minsym,\n \t  }\n \treturn false;\n       }\n+    case mst_file_text:\n+      /* Ignore function symbol that is not a function entry.  */\n+      if (msymbol_is_cold_clone (minsym))\n+\treturn false;\n+      /* fallthru */\n     default:\n       if (func_address_p != NULL)\n \t*func_address_p = msym_addr;"
    },
    {
      "sha": "9b53b2c96595195b40dd9795089e3439f3db97ca",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17d305ef8f4b5bf20beaaad427490b3c6773909b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17d305ef8f4b5bf20beaaad427490b3c6773909b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=17d305ef8f4b5bf20beaaad427490b3c6773909b",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-01  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR symtab/26096\n+\t* gdb.cp/cold-clone.cc: New test.\n+\t* gdb.cp/cold-clone.exp: New file.\n+\n 2021-06-01  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.gdb/unittest.c: New file."
    },
    {
      "sha": "233a84a7ee77bf804517ebf8a509d747505e7bc5",
      "filename": "gdb/testsuite/gdb.cp/cold-clone.cc",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17d305ef8f4b5bf20beaaad427490b3c6773909b/gdb/testsuite/gdb.cp/cold-clone.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17d305ef8f4b5bf20beaaad427490b3c6773909b/gdb/testsuite/gdb.cp/cold-clone.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/cold-clone.cc?ref=17d305ef8f4b5bf20beaaad427490b3c6773909b",
      "patch": "@@ -0,0 +1,54 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdlib.h>\n+#include \"../lib/attributes.h\"\n+\n+int a;\n+int b;\n+int c;\n+\n+static int __attribute__((used, noinline)) ATTRIBUTE_NOCLONE\n+foo (void)\n+{\n+  a = 2;\n+  if (b)\n+    abort ();\n+\n+  return c;\n+}\n+\n+static int __attribute__((used, noinline)) ATTRIBUTE_NOCLONE\n+bar (void)\n+{\n+  a = 1;\n+  if (c)\n+    abort ();\n+  return b;\n+}\n+\n+int\n+main (int argc, char **argv __attribute__((unused)))\n+{\n+  b = argc * 2;\n+  c = argc / 2;\n+\n+  if (b + c == 5)\n+    abort ();\n+\n+  return foo () + bar ();\n+}"
    },
    {
      "sha": "07b9bdc0a93e9922ec4cd34408639270491b5b04",
      "filename": "gdb/testsuite/gdb.cp/cold-clone.exp",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17d305ef8f4b5bf20beaaad427490b3c6773909b/gdb/testsuite/gdb.cp/cold-clone.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17d305ef8f4b5bf20beaaad427490b3c6773909b/gdb/testsuite/gdb.cp/cold-clone.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/cold-clone.exp?ref=17d305ef8f4b5bf20beaaad427490b3c6773909b",
      "patch": "@@ -0,0 +1,30 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+standard_testfile .cc\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile \\\n+\t {debug c++ optimize=-O2}]} {\n+    return -1\n+}\n+\n+gdb_test_multiple \"break foo\" \"\" {\n+    -re -wrap \"\\\\($decimal locations\\\\)\" {\n+\tfail $gdb_test_name\n+    }\n+    -re -wrap \"\" {\n+\tpass $gdb_test_name\n+    }\n+}"
    }
  ]
}