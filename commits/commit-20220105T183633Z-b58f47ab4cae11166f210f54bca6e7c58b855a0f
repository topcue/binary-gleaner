{
  "sha": "b58f47ab4cae11166f210f54bca6e7c58b855a0f",
  "node_id": "C_kwDOANOeidoAKGI1OGY0N2FiNGNhZTExMTY2ZjIxMGY1NGJjYTZlN2M1OGI4NTVhMGY",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-25T05:31:53Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-05T18:36:33Z"
    },
    "message": "Use filtered output in ordinary commands\n\nMany otherwise ordinary commands choose to use unfiltered output\nrather than filtered.  I don't think there's any reason for this, so\nthis changes many such commands to use filtered output instead.\n\nNote that complete_command is not touched due to a comment there\nexplaining why unfiltered output is believed to be used.",
    "tree": {
      "sha": "71a3a29e7574066997f1e5c6ef4df785ad928f98",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/71a3a29e7574066997f1e5c6ef4df785ad928f98"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b58f47ab4cae11166f210f54bca6e7c58b855a0f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b58f47ab4cae11166f210f54bca6e7c58b855a0f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b58f47ab4cae11166f210f54bca6e7c58b855a0f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b58f47ab4cae11166f210f54bca6e7c58b855a0f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b68178b9cbbef2aa4e234db4313ac8ba6d1dc04c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b68178b9cbbef2aa4e234db4313ac8ba6d1dc04c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b68178b9cbbef2aa4e234db4313ac8ba6d1dc04c"
    }
  ],
  "stats": {
    "total": 178,
    "additions": 89,
    "deletions": 89
  },
  "files": [
    {
      "sha": "c7d757316215ff62fd583e76e749a8d3c66d75e2",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -11535,19 +11535,19 @@ clear_command (const char *arg, int from_tty)\n   if (from_tty)\n     {\n       if (found.size () == 1)\n-\tprintf_unfiltered (_(\"Deleted breakpoint \"));\n+\tprintf_filtered (_(\"Deleted breakpoint \"));\n       else\n-\tprintf_unfiltered (_(\"Deleted breakpoints \"));\n+\tprintf_filtered (_(\"Deleted breakpoints \"));\n     }\n \n   for (breakpoint *iter : found)\n     {\n       if (from_tty)\n-\tprintf_unfiltered (\"%d \", iter->number);\n+\tprintf_filtered (\"%d \", iter->number);\n       delete_breakpoint (iter);\n     }\n   if (from_tty)\n-    putchar_unfiltered ('\\n');\n+    putchar_filtered ('\\n');\n }\n \f\n /* Delete breakpoint in BS if they are `delete' breakpoints and\n@@ -14010,7 +14010,7 @@ map_breakpoint_number_range (std::pair<int, int> bp_num_range,\n \t\tbreak;\n \t      }\n \t  if (!match)\n-\t    printf_unfiltered (_(\"No breakpoint number %d.\\n\"), i);\n+\t    printf_filtered (_(\"No breakpoint number %d.\\n\"), i);\n \t}\n     }\n }\n@@ -14948,7 +14948,7 @@ get_tracepoint_by_number (const char **arg,\n     if (t->number == tpnum)\n       return (struct tracepoint *) t;\n \n-  printf_unfiltered (\"No tracepoint number %d.\\n\", tpnum);\n+  printf_filtered (\"No tracepoint number %d.\\n\", tpnum);\n   return NULL;\n }\n "
    },
    {
      "sha": "e62e7a9331fef42868f7f8c3a10fcc47aa808c02",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -501,14 +501,14 @@ pwd_command (const char *args, int from_tty)\n \t   safe_strerror (errno));\n \n   if (strcmp (cwd.get (), current_directory) != 0)\n-    printf_unfiltered (_(\"Working directory %ps\\n (canonically %ps).\\n\"),\n-\t\t       styled_string (file_name_style.style (),\n-\t\t\t\t      current_directory),\n-\t\t       styled_string (file_name_style.style (), cwd.get ()));\n+    printf_filtered (_(\"Working directory %ps\\n (canonically %ps).\\n\"),\n+\t\t     styled_string (file_name_style.style (),\n+\t\t\t\t    current_directory),\n+\t\t     styled_string (file_name_style.style (), cwd.get ()));\n   else\n-    printf_unfiltered (_(\"Working directory %ps.\\n\"),\n-\t\t       styled_string (file_name_style.style (),\n-\t\t\t\t      current_directory));\n+    printf_filtered (_(\"Working directory %ps.\\n\"),\n+\t\t     styled_string (file_name_style.style (),\n+\t\t\t\t    current_directory));\n }\n \n void"
    },
    {
      "sha": "bf12b1aa1f204eaa883d07c0ba83b85be57d1a02",
      "filename": "gdb/cli/cli-logging.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/cli/cli-logging.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/cli/cli-logging.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-logging.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -115,8 +115,8 @@ handle_redirections (int from_tty)\n {\n   if (!saved_filename.empty ())\n     {\n-      fprintf_unfiltered (gdb_stdout, \"Already logging to %s.\\n\",\n-\t\t\t  saved_filename.c_str ());\n+      printf_filtered (\"Already logging to %s.\\n\",\n+\t\t       saved_filename.c_str ());\n       return;\n     }\n \n@@ -128,18 +128,18 @@ handle_redirections (int from_tty)\n   if (from_tty)\n     {\n       if (!logging_redirect)\n-\tfprintf_unfiltered (gdb_stdout, \"Copying output to %s.\\n\",\n-\t\t\t    logging_filename.c_str ());\n+\tprintf_filtered (\"Copying output to %s.\\n\",\n+\t\t\t logging_filename.c_str ());\n       else\n-\tfprintf_unfiltered (gdb_stdout, \"Redirecting output to %s.\\n\",\n-\t\t\t    logging_filename.c_str ());\n+\tprintf_filtered (\"Redirecting output to %s.\\n\",\n+\t\t\t logging_filename.c_str ());\n \n       if (!debug_redirect)\n-\tfprintf_unfiltered (gdb_stdout, \"Copying debug output to %s.\\n\",\n-\t\t\t    logging_filename.c_str ());\n+\tprintf_filtered (\"Copying debug output to %s.\\n\",\n+\t\t\t logging_filename.c_str ());\n       else\n-\tfprintf_unfiltered (gdb_stdout, \"Redirecting debug output to %s.\\n\",\n-\t\t\t    logging_filename.c_str ());\n+\tprintf_filtered (\"Redirecting debug output to %s.\\n\",\n+\t\t\t logging_filename.c_str ());\n     }\n \n   saved_filename = logging_filename;\n@@ -177,8 +177,8 @@ set_logging_off (const char *args, int from_tty)\n \n   pop_output_files ();\n   if (from_tty)\n-    fprintf_unfiltered (gdb_stdout, \"Done logging to %s.\\n\",\n-\t\t\tsaved_filename.c_str ());\n+    printf_filtered (\"Done logging to %s.\\n\",\n+\t\t     saved_filename.c_str ());\n   saved_filename.clear ();\n }\n "
    },
    {
      "sha": "e61767196779d294fb7ecb316ed1943511b8d6ec",
      "filename": "gdb/cp-namespace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/cp-namespace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/cp-namespace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-namespace.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -1058,7 +1058,7 @@ cp_lookup_transparent_type_loop (const char *name,\n static void\n maintenance_cplus_namespace (const char *args, int from_tty)\n {\n-  printf_unfiltered (_(\"The `maint namespace' command was removed.\\n\"));\n+  printf_filtered (_(\"The `maint namespace' command was removed.\\n\"));\n }\n \n void _initialize_cp_namespace ();"
    },
    {
      "sha": "de83eb5d957021a3c677aced278b1aac83e2fa65",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -2185,7 +2185,7 @@ first_component_command (const char *arg, int from_tty)\n   memcpy (prefix, arg, len);\n   prefix[len] = '\\0';\n \n-  printf_unfiltered (\"%s\\n\", prefix);\n+  printf_filtered (\"%s\\n\", prefix);\n }\n \n /* Implement \"info vtbl\".  */"
    },
    {
      "sha": "fa6b7abccd5060df1ccf9152491414482313ed6c",
      "filename": "gdb/dwarf2/index-cache.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/dwarf2/index-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/dwarf2/index-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-cache.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -257,8 +257,8 @@ show_index_cache_command (const char *arg, int from_tty)\n   /* Call all \"show index-cache\" subcommands.  */\n   cmd_show_list (show_index_cache_prefix_list, from_tty);\n \n-  printf_unfiltered (\"\\n\");\n-  printf_unfiltered\n+  printf_filtered (\"\\n\");\n+  printf_filtered\n     (_(\"The index cache is currently %s.\\n\"),\n      global_index_cache.enabled () ? _(\"enabled\") : _(\"disabled\"));\n }\n@@ -316,13 +316,13 @@ show_index_cache_stats_command (const char *arg, int from_tty)\n   if (in_show_index_cache_command)\n     {\n       indent = \"  \";\n-      printf_unfiltered (\"\\n\");\n+      printf_filtered (\"\\n\");\n     }\n \n-  printf_unfiltered (_(\"%s  Cache hits (this session): %u\\n\"),\n-\t\t     indent, global_index_cache.n_hits ());\n-  printf_unfiltered (_(\"%sCache misses (this session): %u\\n\"),\n-\t\t     indent, global_index_cache.n_misses ());\n+  printf_filtered (_(\"%s  Cache hits (this session): %u\\n\"),\n+\t\t   indent, global_index_cache.n_hits ());\n+  printf_filtered (_(\"%sCache misses (this session): %u\\n\"),\n+\t\t   indent, global_index_cache.n_misses ());\n }\n \n void _initialize_index_cache ();"
    },
    {
      "sha": "f42862b2159c3ed734d06e56ac6df1337cf74057",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -378,7 +378,7 @@ exec_file_attach (const char *filename, int from_tty)\n   if (!filename)\n     {\n       if (from_tty)\n-\tprintf_unfiltered (_(\"No executable file now.\\n\"));\n+\tprintf_filtered (_(\"No executable file now.\\n\"));\n \n       set_gdbarch_from_file (NULL);\n     }"
    },
    {
      "sha": "3584974c9e15e30814f9731dc7f780929eca1422",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -116,7 +116,7 @@ static void\n maintenance_time_display (const char *args, int from_tty)\n {\n   if (args == NULL || *args == '\\0')\n-    printf_unfiltered (_(\"\\\"maintenance time\\\" takes a numeric argument.\\n\"));\n+    printf_filtered (_(\"\\\"maintenance time\\\" takes a numeric argument.\\n\"));\n   else\n     set_per_command_time (strtol (args, NULL, 10));\n }\n@@ -125,7 +125,7 @@ static void\n maintenance_space_display (const char *args, int from_tty)\n {\n   if (args == NULL || *args == '\\0')\n-    printf_unfiltered (\"\\\"maintenance space\\\" takes a numeric argument.\\n\");\n+    printf_filtered (\"\\\"maintenance space\\\" takes a numeric argument.\\n\");\n   else\n     set_per_command_space (strtol (args, NULL, 10));\n }\n@@ -632,7 +632,7 @@ maintenance_deprecate (const char *args, int from_tty)\n {\n   if (args == NULL || *args == '\\0')\n     {\n-      printf_unfiltered (_(\"\\\"maintenance deprecate\\\" takes an argument,\\n\\\n+      printf_filtered (_(\"\\\"maintenance deprecate\\\" takes an argument,\\n\\\n the command you want to deprecate, and optionally the replacement command\\n\\\n enclosed in quotes.\\n\"));\n     }\n@@ -646,7 +646,7 @@ maintenance_undeprecate (const char *args, int from_tty)\n {\n   if (args == NULL || *args == '\\0')\n     {\n-      printf_unfiltered (_(\"\\\"maintenance undeprecate\\\" takes an argument, \\n\\\n+      printf_filtered (_(\"\\\"maintenance undeprecate\\\" takes an argument, \\n\\\n the command you want to undeprecate.\\n\"));\n     }\n "
    },
    {
      "sha": "f83888449a14cef14b36f7381269dc4800d0f52e",
      "filename": "gdb/memattr.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/memattr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/memattr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/memattr.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -121,7 +121,7 @@ create_user_mem_region (CORE_ADDR lo, CORE_ADDR hi,\n   /* lo == hi is a useless empty region.  */\n   if (lo >= hi && hi != 0)\n     {\n-      printf_unfiltered (_(\"invalid memory region: low >= high\\n\"));\n+      printf_filtered (_(\"invalid memory region: low >= high\\n\"));\n       return;\n     }\n \n@@ -148,7 +148,7 @@ create_user_mem_region (CORE_ADDR lo, CORE_ADDR hi,\n \t  || (hi > n.lo && (hi <= n.hi || n.hi == 0))\n \t  || (lo <= n.lo && ((hi >= n.hi && n.hi != 0) || hi == 0)))\n \t{\n-\t  printf_unfiltered (_(\"overlapping memory region\\n\"));\n+\t  printf_filtered (_(\"overlapping memory region\\n\"));\n \t  return;\n \t}\n     }\n@@ -347,7 +347,7 @@ info_mem_command (const char *args, int from_tty)\n \n   if (mem_region_list->empty ())\n     {\n-      printf_unfiltered (_(\"There are no memory regions defined.\\n\"));\n+      printf_filtered (_(\"There are no memory regions defined.\\n\"));\n       return;\n     }\n \n@@ -474,7 +474,7 @@ mem_enable (int num)\n \tm.enabled_p = 1;\n \treturn;\n       }\n-  printf_unfiltered (_(\"No memory region number %d.\\n\"), num);\n+  printf_filtered (_(\"No memory region number %d.\\n\"), num);\n }\n \n static void\n@@ -512,7 +512,7 @@ mem_disable (int num)\n \tm.enabled_p = 0;\n \treturn;\n       }\n-  printf_unfiltered (_(\"No memory region number %d.\\n\"), num);\n+  printf_filtered (_(\"No memory region number %d.\\n\"), num);\n }\n \n static void\n@@ -545,7 +545,7 @@ mem_delete (int num)\n {\n   if (!mem_region_list)\n     {\n-      printf_unfiltered (_(\"No memory region number %d.\\n\"), num);\n+      printf_filtered (_(\"No memory region number %d.\\n\"), num);\n       return;\n     }\n \n@@ -558,7 +558,7 @@ mem_delete (int num)\n   if (it != mem_region_list->end ())\n     mem_region_list->erase (it);\n   else\n-    printf_unfiltered (_(\"No memory region number %d.\\n\"), num);\n+    printf_filtered (_(\"No memory region number %d.\\n\"), num);\n }\n \n static void"
    },
    {
      "sha": "509f62c21c76f671763ad2d7d325d58b6a349b3d",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -2058,7 +2058,7 @@ map_display_numbers (const char *args,\n \t\t\t\t      return item->number == num;\n \t\t\t\t    });\n \t  if (iter == all_displays.end ())\n-\t    printf_unfiltered (_(\"No display number %d.\\n\"), num);\n+\t    printf_filtered (_(\"No display number %d.\\n\"), num);\n \t  else\n \t    function (iter->get ());\n \t}\n@@ -2253,7 +2253,7 @@ disable_display (int num)\n \td->enabled_p = false;\n \treturn;\n       }\n-  printf_unfiltered (_(\"No display number %d.\\n\"), num);\n+  printf_filtered (_(\"No display number %d.\\n\"), num);\n }\n \n void\n@@ -2274,7 +2274,7 @@ static void\n info_display_command (const char *ignore, int from_tty)\n {\n   if (all_displays.empty ())\n-    printf_unfiltered (_(\"There are no auto-display expressions now.\\n\"));\n+    printf_filtered (_(\"There are no auto-display expressions now.\\n\"));\n   else\n     printf_filtered (_(\"Auto-display expressions now in effect:\\n\\\n Num Enb Expression\\n\"));"
    },
    {
      "sha": "3c936811fe41f4ba0f44499a7106dcde4f335aa3",
      "filename": "gdb/record.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/record.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/record.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -279,14 +279,14 @@ cmd_record_delete (const char *args, int from_tty)\n \n   if (!target_record_is_replaying (inferior_ptid))\n     {\n-      printf_unfiltered (_(\"Already at end of record list.\\n\"));\n+      printf_filtered (_(\"Already at end of record list.\\n\"));\n       return;\n     }\n \n   if (!target_supports_delete_record ())\n     {\n-      printf_unfiltered (_(\"The current record target does not support \"\n-\t\t\t   \"this operation.\\n\"));\n+      printf_filtered (_(\"The current record target does not support \"\n+\t\t\t \"this operation.\\n\"));\n       return;\n     }\n \n@@ -308,8 +308,8 @@ cmd_record_stop (const char *args, int from_tty)\n   record_stop (t);\n   record_unpush (t);\n \n-  printf_unfiltered (_(\"Process record is stopped and all execution \"\n-\t\t       \"logs are deleted.\\n\"));\n+  printf_filtered (_(\"Process record is stopped and all execution \"\n+\t\t     \"logs are deleted.\\n\"));\n \n   gdb::observers::record_changed.notify (current_inferior (), 0, NULL, NULL);\n }"
    },
    {
      "sha": "9963f1ebc01899e02e07cc546f70a6a73fa7d38e",
      "filename": "gdb/remote-fileio.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/remote-fileio.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/remote-fileio.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-fileio.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -1290,8 +1290,8 @@ show_system_call_allowed (const char *args, int from_tty)\n   if (args)\n     error (_(\"Garbage after \\\"show remote \"\n \t     \"system-call-allowed\\\" command: `%s'\"), args);\n-  printf_unfiltered (\"Calling host system(3) call from target is %sallowed\\n\",\n-\t\t     remote_fio_system_call_allowed ? \"\" : \"not \");\n+  printf_filtered (\"Calling host system(3) call from target is %sallowed\\n\",\n+\t\t   remote_fio_system_call_allowed ? \"\" : \"not \");\n }\n \n void"
    },
    {
      "sha": "0449b919974624242b96eebec267f3b0d54e46fa",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -2276,8 +2276,8 @@ add_symbol_file_command (const char *args, int from_tty)\n      statements because hex_string returns a local static\n      string.  */\n \n-  printf_unfiltered (_(\"add symbol table from file \\\"%s\\\"\"),\n-\t\t     filename.get ());\n+  printf_filtered (_(\"add symbol table from file \\\"%s\\\"\"),\n+\t\t   filename.get ());\n   section_addr_info section_addrs;\n   std::vector<sect_opt>::const_iterator it = sect_opts.begin ();\n   if (!seen_addr)\n@@ -2289,7 +2289,7 @@ add_symbol_file_command (const char *args, int from_tty)\n       const char *sec = it->name;\n \n       if (section_addrs.empty ())\n-\tprintf_unfiltered (_(\" at\\n\"));\n+\tprintf_filtered (_(\" at\\n\"));\n       addr = parse_and_eval_address (val);\n \n       /* Here we store the section offsets in the order they were\n@@ -2309,13 +2309,13 @@ add_symbol_file_command (const char *args, int from_tty)\n \t so we can't determine what section names are valid.  */\n     }\n   if (seen_offset)\n-      printf_unfiltered (_(\"%s offset by %s\\n\"),\n-\t\t\t (section_addrs.empty ()\n-\t\t\t  ? _(\" with all sections\")\n-\t\t\t  : _(\"with other sections\")),\n-\t\t\t paddress (gdbarch, offset));\n+    printf_filtered (_(\"%s offset by %s\\n\"),\n+\t\t     (section_addrs.empty ()\n+\t\t      ? _(\" with all sections\")\n+\t\t      : _(\"with other sections\")),\n+\t\t     paddress (gdbarch, offset));\n   else if (section_addrs.empty ())\n-    printf_unfiltered (\"\\n\");\n+    printf_filtered (\"\\n\");\n \n   if (from_tty && (!query (\"%s\", \"\")))\n     error (_(\"Not confirmed.\"));\n@@ -3262,8 +3262,8 @@ map_overlay_command (const char *args, int from_tty)\n \t\t\t\t\t\t\t\t\tsec2))\n \t\t{\n \t\t  if (info_verbose)\n-\t\t    printf_unfiltered (_(\"Note: section %s unmapped by overlap\\n\"),\n-\t\t\t\t       bfd_section_name (sec2->the_bfd_section));\n+\t\t    printf_filtered (_(\"Note: section %s unmapped by overlap\\n\"),\n+\t\t\t\t     bfd_section_name (sec2->the_bfd_section));\n \t\t  sec2->ovly_mapped = 0; /* sec2 overlaps sec: unmap sec2.  */\n \t\t}\n \t  return;\n@@ -3311,7 +3311,7 @@ overlay_auto_command (const char *args, int from_tty)\n   overlay_debugging = ovly_auto;\n   enable_overlay_breakpoints ();\n   if (info_verbose)\n-    printf_unfiltered (_(\"Automatic overlay debugging enabled.\"));\n+    printf_filtered (_(\"Automatic overlay debugging enabled.\"));\n }\n \n /* Function: overlay_manual_command\n@@ -3324,7 +3324,7 @@ overlay_manual_command (const char *args, int from_tty)\n   overlay_debugging = ovly_on;\n   disable_overlay_breakpoints ();\n   if (info_verbose)\n-    printf_unfiltered (_(\"Overlay debugging enabled.\"));\n+    printf_filtered (_(\"Overlay debugging enabled.\"));\n }\n \n /* Function: overlay_off_command\n@@ -3337,7 +3337,7 @@ overlay_off_command (const char *args, int from_tty)\n   overlay_debugging = ovly_off;\n   disable_overlay_breakpoints ();\n   if (info_verbose)\n-    printf_unfiltered (_(\"Overlay debugging disabled.\"));\n+    printf_filtered (_(\"Overlay debugging disabled.\"));\n }\n \n static void"
    },
    {
      "sha": "07695f88fd449f263a241def454196c43e75293a",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -385,7 +385,7 @@ new_ui_command (const char *args, int from_tty)\n     ui.release ();\n   }\n \n-  printf_unfiltered (\"New UI allocated\\n\");\n+  printf_filtered (\"New UI allocated\\n\");\n }\n \n /* Handler for SIGHUP.  */\n@@ -652,7 +652,7 @@ execute_command (const char *p, int from_tty)\n \t  std::string prefixname = c->prefixname ();\n           std::string prefixname_no_space\n \t    = prefixname.substr (0, prefixname.length () - 1);\n-\t  printf_unfiltered\n+\t  printf_filtered\n \t    (\"\\\"%s\\\" must be followed by the name of a subcommand.\\n\",\n \t     prefixname_no_space.c_str ());\n \t  help_list (*c->subcommands, prefixname.c_str (), all_commands,"
    },
    {
      "sha": "dc5e7f141cf73178ad46900bfdf71916ba0dc0a6",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -2195,18 +2195,18 @@ tfind_1 (enum trace_find_type type, int num,\n \t}\n       else\n \t{\n-\t  printf_unfiltered (_(\"Found trace frame %d, tracepoint %d\\n\"),\n-\t\t\t     traceframe_number, tracepoint_number);\n+\t  printf_filtered (_(\"Found trace frame %d, tracepoint %d\\n\"),\n+\t\t\t   traceframe_number, tracepoint_number);\n \t}\n     }\n   else\n     {\n       if (uiout->is_mi_like_p ())\n \tuiout->field_string (\"found\", \"0\");\n       else if (type == tfind_number && num == -1)\n-\tprintf_unfiltered (_(\"No longer looking at any trace frame\\n\"));\n+\tprintf_filtered (_(\"No longer looking at any trace frame\\n\"));\n       else /* This case may never occur, check.  */\n-\tprintf_unfiltered (_(\"No trace frame found\\n\"));\n+\tprintf_filtered (_(\"No trace frame found\\n\"));\n     }\n \n   /* If we're in nonstop mode and getting out of looking at trace"
    },
    {
      "sha": "16b6c081253343c78350988a08218216b2b361ca",
      "filename": "gdb/tui/tui-regs.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/tui/tui-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/tui/tui-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -606,20 +606,20 @@ tui_reg_command (const char *args, int from_tty)\n       struct reggroup *group;\n       int first;\n \n-      printf_unfiltered (_(\"\\\"tui reg\\\" must be followed by the name of \"\n-\t\t\t   \"either a register group,\\nor one of 'next' \"\n-\t\t\t   \"or 'prev'.  Known register groups are:\\n\"));\n+      printf_filtered (_(\"\\\"tui reg\\\" must be followed by the name of \"\n+\t\t\t \"either a register group,\\nor one of 'next' \"\n+\t\t\t \"or 'prev'.  Known register groups are:\\n\"));\n \n       for (first = 1, group = reggroup_next (gdbarch, NULL);\n \t   group != NULL;\n \t   first = 0, group = reggroup_next (gdbarch, group))\n \t{\n \t  if (!first)\n-\t    printf_unfiltered (\", \");\n-\t  printf_unfiltered (\"%s\", reggroup_name (group));\n+\t    printf_filtered (\", \");\n+\t  printf_filtered (\"%s\", reggroup_name (group));\n \t}\n \n-      printf_unfiltered (\"\\n\");\n+      printf_filtered (\"\\n\");\n     }\n }\n "
    },
    {
      "sha": "e9a47be767dcedcf92c3a6d911989b14d1005695",
      "filename": "gdb/user-regs.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/user-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/user-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/user-regs.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -223,9 +223,9 @@ maintenance_print_user_registers (const char *args, int from_tty)\n   regs = (struct gdb_user_regs *) gdbarch_data (gdbarch, user_regs_data);\n   regnum = gdbarch_num_cooked_regs (gdbarch);\n \n-  fprintf_unfiltered (gdb_stdout, \" %-11s %3s\\n\", \"Name\", \"Nr\");\n+  printf_filtered (\" %-11s %3s\\n\", \"Name\", \"Nr\");\n   for (reg = regs->first; reg != NULL; reg = reg->next, ++regnum)\n-    fprintf_unfiltered (gdb_stdout, \" %-11s %3d\\n\", reg->name, regnum);\n+    printf_filtered (\" %-11s %3d\\n\", reg->name, regnum);\n }\n \n void _initialize_user_regs ();"
    },
    {
      "sha": "37c949f0853cbfb07e45cc5091ce8e388b379c5b",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b58f47ab4cae11166f210f54bca6e7c58b855a0f/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=b58f47ab4cae11166f210f54bca6e7c58b855a0f",
      "patch": "@@ -2649,11 +2649,11 @@ show_convenience (const char *ignore, int from_tty)\n \t The user can't create them except via Python, and if Python support\n \t is installed this message will never be printed ($_streq will\n \t exist).  */\n-      printf_unfiltered (_(\"No debugger convenience variables now defined.\\n\"\n-\t\t\t   \"Convenience variables have \"\n-\t\t\t   \"names starting with \\\"$\\\";\\n\"\n-\t\t\t   \"use \\\"set\\\" as in \\\"set \"\n-\t\t\t   \"$foo = 5\\\" to define them.\\n\"));\n+      printf_filtered (_(\"No debugger convenience variables now defined.\\n\"\n+\t\t\t \"Convenience variables have \"\n+\t\t\t \"names starting with \\\"$\\\";\\n\"\n+\t\t\t \"use \\\"set\\\" as in \\\"set \"\n+\t\t\t \"$foo = 5\\\" to define them.\\n\"));\n     }\n }\n \f"
    }
  ]
}