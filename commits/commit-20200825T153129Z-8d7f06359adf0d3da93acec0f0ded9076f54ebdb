{
  "sha": "8d7f06359adf0d3da93acec0f0ded9076f54ebdb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGQ3ZjA2MzU5YWRmMGQzZGE5M2FjZWMwZjBkZWQ5MDc2ZjU0ZWJkYg==",
  "commit": {
    "author": {
      "name": "Anton Kolesov",
      "email": "Anton.Kolesov@synopsys.com",
      "date": "2016-07-06T17:36:49Z"
    },
    "committer": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2020-08-25T15:31:29Z"
    },
    "message": "arc: Add GNU/Linux support for ARC\n\nARC Linux targets differences from baremetal:\n\n- No support for hardware single instruction stepping.\n- Different access rules to registers.\n- Use of another instruction for breakpoints.\n\nv2: Changes after Tom's remarks [1]\n arc-linux-tdep.c\n  - Use true/false instead of TRUE/FALSE.\n  - arc_linux_sw_breakpoint_from_kind (): Break long lines into two.\n  - arc_linux_sw_breakpoint_from_kind (): Remove starting blank line.\n  - Use explicit number evaluation, e.g: if (a & b) -> if ((a & b) != 0)\n arc-tdep.c\n  - Use explicit number evaluation, e.g: if (a & b) -> if ((a & b) != 0)\n gdb/configure.tgt\n  - arc*-*-linux*): Remove \"build_gdbserver=yes\".\n\nv3: Changes after Simon's remarks [2]\n  arc-linux-tdep.c\n  - Use \"return trap_size\" instead of cryptic \"return 2\".\n  - Removed unnecessary curly braces.\n  - Removed \"void\" from \"_initialize_arc_linux_tdep (void)\".\n\nv5: Changes after Simon's remarks [3]\n- Remove unnecessary empty lines.\n- Replace \"breakpoint uses\" with \"breakpoints use\" in a comment.\n- \"return condition;\" i.s.o. \"if (condition) return true; else return false;\"\n\n[1] Tom's remarks\nhttps://sourceware.org/pipermail/gdb-patches/2020-April/167887.html\n\n[2] Simon's remarks on v2\nhttps://sourceware.org/pipermail/gdb-patches/2020-May/168513.html\n\n[3] Simon's remarks on v4\nhttps://sourceware.org/pipermail/gdb-patches/2020-August/170994.html\n\ngdb/ChangeLog:\n\n2020-08-25  Anton Kolesov  <anton.kolesov@synopsys.com>\n\n\t* configure.tgt: ARC support for GNU/Linux.\n\t* Makefile.in (ALL_TARGET_OBJS): Likewise.\n\t* arc-linux-tdep.c: New file.\n\t* arc-tdep.h (ARC_STATUS32_L_MASK, ARC_STATUS32_DE_MASK): Declare.\n\t* arc-tdep.c (arc_write_pc): Use it.",
    "tree": {
      "sha": "61f12ed6aa534b5bf6cb08effd0d672a77767a05",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/61f12ed6aa534b5bf6cb08effd0d672a77767a05"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8d7f06359adf0d3da93acec0f0ded9076f54ebdb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d7f06359adf0d3da93acec0f0ded9076f54ebdb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8d7f06359adf0d3da93acec0f0ded9076f54ebdb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/comments",
  "author": {
    "login": "anthony-kolesov",
    "id": 602123,
    "node_id": "MDQ6VXNlcjYwMjEyMw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/602123?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/anthony-kolesov",
    "html_url": "https://github.com/anthony-kolesov",
    "followers_url": "https://api.github.com/users/anthony-kolesov/followers",
    "following_url": "https://api.github.com/users/anthony-kolesov/following{/other_user}",
    "gists_url": "https://api.github.com/users/anthony-kolesov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/anthony-kolesov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/anthony-kolesov/subscriptions",
    "organizations_url": "https://api.github.com/users/anthony-kolesov/orgs",
    "repos_url": "https://api.github.com/users/anthony-kolesov/repos",
    "events_url": "https://api.github.com/users/anthony-kolesov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/anthony-kolesov/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "fdd8731bd137e55453b501fa5404b5e6f60ddea0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdd8731bd137e55453b501fa5404b5e6f60ddea0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fdd8731bd137e55453b501fa5404b5e6f60ddea0"
    }
  ],
  "stats": {
    "total": 300,
    "additions": 298,
    "deletions": 2
  },
  "files": [
    {
      "sha": "150a7afc581e1fcce4c5d7c1d014cef92d11dede",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8d7f06359adf0d3da93acec0f0ded9076f54ebdb",
      "patch": "@@ -1,3 +1,11 @@\n+2020-08-25  Anton Kolesov  <anton.kolesov@synopsys.com>\n+\n+\t* configure.tgt: ARC support for GNU/Linux.\n+\t* Makefile.in (ALL_TARGET_OBJS): Likewise.\n+\t* arc-linux-tdep.c: New file.\n+\t* arc-tdep.h (ARC_STATUS32_L_MASK, ARC_STATUS32_DE_MASK): Declare.\n+\t* arc-tdep.c (arc_write_pc): Use it.\n+\n 2020-08-25  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* arc-tdep.c (arc_check_for_hardware_loop): New."
    },
    {
      "sha": "4808357e651260f83eee66ed185ef5bf48b2064a",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=8d7f06359adf0d3da93acec0f0ded9076f54ebdb",
      "patch": "@@ -702,6 +702,7 @@ ALL_64_TARGET_OBS = \\\n # All other target-dependent objects files (used with --enable-targets=all).\n ALL_TARGET_OBS = \\\n \taarch32-tdep.o \\\n+\tarc-linux-tdep.o \\\n \tarc-tdep.o \\\n \tarch/aarch32.o \\\n \tarch/arc.o \\"
    },
    {
      "sha": "36f32459bbeeab7fb269853d3b4411be45cbe4b5",
      "filename": "gdb/arc-linux-tdep.c",
      "status": "added",
      "additions": 278,
      "deletions": 0,
      "changes": 278,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/arc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/arc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-linux-tdep.c?ref=8d7f06359adf0d3da93acec0f0ded9076f54ebdb",
      "patch": "@@ -0,0 +1,278 @@\n+/* Target dependent code for GNU/Linux ARC.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* GDB header files.  */\n+#include \"defs.h\"\n+#include \"linux-tdep.h\"\n+#include \"objfiles.h\"\n+#include \"opcode/arc.h\"\n+#include \"osabi.h\"\n+#include \"solib-svr4.h\"\n+\n+/* ARC header files.  */\n+#include \"opcodes/arc-dis.h\"\n+#include \"arc-tdep.h\"\n+\n+/* Implement the \"cannot_fetch_register\" gdbarch method.  */\n+\n+static int\n+arc_linux_cannot_fetch_register (struct gdbarch *gdbarch, int regnum)\n+{\n+  /* Assume that register is readable if it is unknown.  */\n+  switch (regnum)\n+    {\n+    case ARC_ILINK_REGNUM:\n+    case ARC_RESERVED_REGNUM:\n+    case ARC_LIMM_REGNUM:\n+      return true;\n+    case ARC_R30_REGNUM:\n+    case ARC_R58_REGNUM:\n+    case ARC_R59_REGNUM:\n+      return !arc_mach_is_arcv2 (gdbarch);\n+    }\n+  return (regnum > ARC_BLINK_REGNUM) && (regnum < ARC_LP_COUNT_REGNUM);\n+}\n+\n+/* Implement the \"cannot_store_register\" gdbarch method.  */\n+\n+static int\n+arc_linux_cannot_store_register (struct gdbarch *gdbarch, int regnum)\n+{\n+  /* Assume that register is writable if it is unknown.  */\n+  switch (regnum)\n+    {\n+    case ARC_ILINK_REGNUM:\n+    case ARC_RESERVED_REGNUM:\n+    case ARC_LIMM_REGNUM:\n+    case ARC_PCL_REGNUM:\n+      return true;\n+    case ARC_R30_REGNUM:\n+    case ARC_R58_REGNUM:\n+    case ARC_R59_REGNUM:\n+      return !arc_mach_is_arcv2 (gdbarch);\n+    }\n+  return (regnum > ARC_BLINK_REGNUM) && (regnum < ARC_LP_COUNT_REGNUM);\n+}\n+\n+/* For ARC Linux, breakpoints use the 16-bit TRAP_S 1 instruction, which\n+   is 0x3e78 (little endian) or 0x783e (big endian).  */\n+\n+static const gdb_byte arc_linux_trap_s_be[] = { 0x78, 0x3e };\n+static const gdb_byte arc_linux_trap_s_le[] = { 0x3e, 0x78 };\n+static const int trap_size = 2;   /* Number of bytes to insert \"trap\".  */\n+\n+/* Implement the \"breakpoint_kind_from_pc\" gdbarch method.  */\n+\n+static int\n+arc_linux_breakpoint_kind_from_pc (struct gdbarch *gdbarch, CORE_ADDR *pcptr)\n+{\n+  return trap_size;\n+}\n+\n+/* Implement the \"sw_breakpoint_from_kind\" gdbarch method.  */\n+\n+static const gdb_byte *\n+arc_linux_sw_breakpoint_from_kind (struct gdbarch *gdbarch,\n+\t\t\t\t   int kind, int *size)\n+{\n+  *size = kind;\n+  return ((gdbarch_byte_order (gdbarch) == BFD_ENDIAN_BIG)\n+\t  ? arc_linux_trap_s_be\n+\t  : arc_linux_trap_s_le);\n+}\n+\n+/* Implement the \"software_single_step\" gdbarch method.  */\n+\n+static std::vector<CORE_ADDR>\n+arc_linux_software_single_step (struct regcache *regcache)\n+{\n+  struct gdbarch *gdbarch = regcache->arch ();\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  struct disassemble_info di = arc_disassemble_info (gdbarch);\n+\n+  /* Read current instruction.  */\n+  struct arc_instruction curr_insn;\n+  arc_insn_decode (regcache_read_pc (regcache), &di, arc_delayed_print_insn,\n+\t\t   &curr_insn);\n+  CORE_ADDR next_pc = arc_insn_get_linear_next_pc (curr_insn);\n+\n+  std::vector<CORE_ADDR> next_pcs;\n+\n+  /* For instructions with delay slots, the fall thru is not the\n+     instruction immediately after the current instruction, but the one\n+     after that.  */\n+  if (curr_insn.has_delay_slot)\n+    {\n+      struct arc_instruction next_insn;\n+      arc_insn_decode (next_pc, &di, arc_delayed_print_insn, &next_insn);\n+      next_pcs.push_back (arc_insn_get_linear_next_pc (next_insn));\n+    }\n+  else\n+    next_pcs.push_back (next_pc);\n+\n+  ULONGEST status32;\n+  regcache_cooked_read_unsigned (regcache, gdbarch_ps_regnum (gdbarch),\n+\t\t\t\t &status32);\n+\n+  if (curr_insn.is_control_flow)\n+    {\n+      CORE_ADDR branch_pc = arc_insn_get_branch_target (curr_insn);\n+      if (branch_pc != next_pc)\n+\tnext_pcs.push_back (branch_pc);\n+    }\n+  /* Is current instruction the last in a loop body?  */\n+  else if (tdep->has_hw_loops)\n+    {\n+      /* If STATUS32.L is 1, then ZD-loops are disabled.  */\n+      if ((status32 & ARC_STATUS32_L_MASK) == 0)\n+\t{\n+\t  ULONGEST lp_end, lp_start, lp_count;\n+\t  regcache_cooked_read_unsigned (regcache, ARC_LP_START_REGNUM,\n+\t\t\t\t\t &lp_start);\n+\t  regcache_cooked_read_unsigned (regcache, ARC_LP_END_REGNUM, &lp_end);\n+\t  regcache_cooked_read_unsigned (regcache, ARC_LP_COUNT_REGNUM,\n+\t\t\t\t\t &lp_count);\n+\n+\t  if (arc_debug)\n+\t    {\n+\t      debug_printf (\"arc-linux: lp_start = %s, lp_end = %s, \"\n+\t\t\t    \"lp_count = %s, next_pc = %s\\n\",\n+\t\t\t    paddress (gdbarch, lp_start),\n+\t\t\t    paddress (gdbarch, lp_end),\n+\t\t\t    pulongest (lp_count),\n+\t\t\t    paddress (gdbarch, next_pc));\n+\t    }\n+\n+\t  if (next_pc == lp_end && lp_count > 1)\n+\t    {\n+\t      /* The instruction is in effect a jump back to the start of\n+\t\t the loop.  */\n+\t      next_pcs.push_back (lp_start);\n+\t    }\n+\t}\n+    }\n+\n+  /* Is this a delay slot?  Then next PC is in BTA register.  */\n+  if ((status32 & ARC_STATUS32_DE_MASK) != 0)\n+    {\n+      ULONGEST bta;\n+      regcache_cooked_read_unsigned (regcache, ARC_BTA_REGNUM, &bta);\n+      next_pcs.push_back (bta);\n+    }\n+\n+  return next_pcs;\n+}\n+\n+/* Implement the \"skip_solib_resolver\" gdbarch method.\n+\n+   See glibc_skip_solib_resolver for details.  */\n+\n+static CORE_ADDR\n+arc_linux_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)\n+{\n+  /* For uClibc 0.9.26+.\n+\n+     An unresolved PLT entry points to \"__dl_linux_resolve\", which calls\n+     \"_dl_linux_resolver\" to do the resolving and then eventually jumps to\n+     the function.\n+\n+     So we look for the symbol `_dl_linux_resolver', and if we are there,\n+     gdb sets a breakpoint at the return address, and continues.  */\n+  struct bound_minimal_symbol resolver\n+    = lookup_minimal_symbol (\"_dl_linux_resolver\", NULL, NULL);\n+\n+  if (arc_debug)\n+    {\n+      if (resolver.minsym != nullptr)\n+\t{\n+\t  CORE_ADDR res_addr = BMSYMBOL_VALUE_ADDRESS (resolver);\n+\t  debug_printf (\"arc-linux: skip_solib_resolver (): \"\n+\t\t\t\"pc = %s, resolver at %s\\n\",\n+\t\t\tprint_core_address (gdbarch, pc),\n+\t\t\tprint_core_address (gdbarch, res_addr));\n+\t}\n+      else\n+\t{\n+\t  debug_printf (\"arc-linux: skip_solib_resolver (): \"\n+\t\t\t\"pc = %s, no resolver found\\n\",\n+\t\t\tprint_core_address (gdbarch, pc));\n+\t}\n+    }\n+\n+  if (resolver.minsym != nullptr && BMSYMBOL_VALUE_ADDRESS (resolver) == pc)\n+    {\n+      /* Find the return address.  */\n+      return frame_unwind_caller_pc (get_current_frame ());\n+    }\n+  else\n+    {\n+      /* No breakpoint required.  */\n+      return 0;\n+    }\n+}\n+\n+/* Initialization specific to Linux environment.  */\n+\n+static void\n+arc_linux_init_osabi (struct gdbarch_info info, struct gdbarch *gdbarch)\n+{\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+\n+  if (arc_debug)\n+    debug_printf (\"arc-linux: GNU/Linux OS/ABI initialization.\\n\");\n+\n+  /* If we are using Linux, we have in uClibc\n+     (libc/sysdeps/linux/arc/bits/setjmp.h):\n+\n+     typedef int __jmp_buf[13+1+1+1];    //r13-r25, fp, sp, blink\n+\n+     Where \"blink\" is a stored PC of a caller function.\n+   */\n+  tdep->jb_pc = 15;\n+\n+  linux_init_abi (info, gdbarch);\n+\n+  /* Set up target dependent GDB architecture entries.  */\n+  set_gdbarch_cannot_fetch_register (gdbarch, arc_linux_cannot_fetch_register);\n+  set_gdbarch_cannot_store_register (gdbarch, arc_linux_cannot_store_register);\n+  set_gdbarch_breakpoint_kind_from_pc (gdbarch,\n+\t\t\t\t       arc_linux_breakpoint_kind_from_pc);\n+  set_gdbarch_sw_breakpoint_from_kind (gdbarch,\n+\t\t\t\t       arc_linux_sw_breakpoint_from_kind);\n+  set_gdbarch_fetch_tls_load_module_address (gdbarch,\n+\t\t\t\t\t     svr4_fetch_objfile_link_map);\n+  set_gdbarch_software_single_step (gdbarch, arc_linux_software_single_step);\n+  set_gdbarch_skip_trampoline_code (gdbarch, find_solib_trampoline_target);\n+  set_gdbarch_skip_solib_resolver (gdbarch, arc_linux_skip_solib_resolver);\n+\n+  /* GNU/Linux uses SVR4-style shared libraries, with 32-bit ints, longs\n+     and pointers (ILP32).  */\n+  set_solib_svr4_fetch_link_map_offsets (gdbarch,\n+\t\t\t\t\t svr4_ilp32_fetch_link_map_offsets);\n+}\n+\n+/* Suppress warning from -Wmissing-prototypes.  */\n+extern initialize_file_ftype _initialize_arc_linux_tdep;\n+\n+void\n+_initialize_arc_linux_tdep ()\n+{\n+  gdbarch_register_osabi (bfd_arch_arc, 0, GDB_OSABI_LINUX,\n+\t\t\t  arc_linux_init_osabi);\n+}"
    },
    {
      "sha": "6f544bff78d9c227d98b22a4b5805b6bd939e0e3",
      "filename": "gdb/arc-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/arc-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/arc-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.c?ref=8d7f06359adf0d3da93acec0f0ded9076f54ebdb",
      "patch": "@@ -612,8 +612,7 @@ arc_write_pc (struct regcache *regcache, CORE_ADDR new_pc)\n   regcache_cooked_read_unsigned (regcache, gdbarch_ps_regnum (gdbarch),\n \t\t\t\t &status32);\n \n-  /* Mask for DE bit is 0x40.  */\n-  if (status32 & 0x40)\n+  if ((status32 & ARC_STATUS32_DE_MASK) != 0)\n     {\n       if (arc_debug)\n \t{"
    },
    {
      "sha": "6331d29f402482830ac48ffb905b46b0966c47c8",
      "filename": "gdb/arc-tdep.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/arc-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/arc-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.h?ref=8d7f06359adf0d3da93acec0f0ded9076f54ebdb",
      "patch": "@@ -100,6 +100,11 @@ enum arc_regnum\n    Longer registers are represented as pairs of 32-bit registers.  */\n #define ARC_REGISTER_SIZE  4\n \n+/* STATUS32 register: hardware loops disabled bit.  */\n+#define ARC_STATUS32_L_MASK (1 << 12)\n+/* STATUS32 register: current instruction is a delay slot.  */\n+#define ARC_STATUS32_DE_MASK (1 << 6)\n+\n #define arc_print(fmt, args...) fprintf_unfiltered (gdb_stdlog, fmt, ##args)\n \n extern int arc_debug;"
    },
    {
      "sha": "a3e11c4b9b8b147af0b10587da304c9b0cc54792",
      "filename": "gdb/configure.tgt",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d7f06359adf0d3da93acec0f0ded9076f54ebdb/gdb/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.tgt?ref=8d7f06359adf0d3da93acec0f0ded9076f54ebdb",
      "patch": "@@ -157,6 +157,11 @@ arc*-*-elf32)\n \tgdb_target_obs=\"arc-newlib-tdep.o\"\n \t;;\n \n+arc*-*-linux*)\n+\t# Target: ARC machine running Linux\n+\tgdb_target_obs=\"arc-linux-tdep.o linux-tdep.o solib-svr4.o\"\n+\t;;\n+\n arm*-wince-pe | arm*-*-mingw32ce*)\n \t# Target: ARM based machine running Windows CE (win32)\n \tgdb_target_obs=\"arm-wince-tdep.o windows-tdep.o\""
    }
  ]
}