{
  "sha": "086baaf1346f07acfb6708e8c6cb79274241488b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDg2YmFhZjEzNDZmMDdhY2ZiNjcwOGU4YzZjYjc5Mjc0MjQxNDg4Yg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-15T15:18:26Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-10T21:35:32Z"
    },
    "message": "gdb/python: Introduce gdb.lookup_static_symbols\n\nIf gdb.lookup_static_symbol is going to return a single symbol then it\nmakes sense (I think) for it to return a context sensitive choice of\nsymbol, that is the global static symbol that would be visible to the\nprogram at that point.\n\nHowever, if the user of the python API wants to instead get a\nconsistent set of global static symbols, no matter where they stop,\nthen they have to instead consider all global static symbols with a\ngiven name - there could be many.  That is what this new API function\noffers, it returns a list (possibly empty) of all global static\nsymbols matching a given name (and optionally a given symbol domain).\n\ngdb/ChangeLog:\n\n\t* python/py-symbol.c (gdbpy_lookup_static_symbols): New\n\tfunction.\n\t* python/python-internal.h (gdbpy_lookup_static_symbols):\n\tDeclare new function.\n\t* python/python.c (python_GdbMethods): Add\n\tgdb.lookup_static_symbols method.\n\t* NEWS: Mention gdb.lookup_static_symbols.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-symbol.exp: Add test for\n\tgdb.lookup_static_symbols.\n\ngdb/doc/ChangeLog:\n\n\t* python.texi (Symbols In Python): Add documentation for\n\tgdb.lookup_static_symbols.\n\nChange-Id: I1153b0ae5bcbc43b3dcf139043c7a48bf791e1a3",
    "tree": {
      "sha": "0dff00a4c5da670a23ed348dd13c5475bd342289",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0dff00a4c5da670a23ed348dd13c5475bd342289"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/086baaf1346f07acfb6708e8c6cb79274241488b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/086baaf1346f07acfb6708e8c6cb79274241488b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/086baaf1346f07acfb6708e8c6cb79274241488b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/086baaf1346f07acfb6708e8c6cb79274241488b/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/09ff83af3c8558594bd31bfaf4ed7daadf4f707d"
    }
  ],
  "stats": {
    "total": 142,
    "additions": 142,
    "deletions": 0
  },
  "files": [
    {
      "sha": "dd280ec5cc48007340b07d71a929b5a14fad6c62",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=086baaf1346f07acfb6708e8c6cb79274241488b",
      "patch": "@@ -1,3 +1,13 @@\n+2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python/py-symbol.c (gdbpy_lookup_static_symbols): New\n+\tfunction.\n+\t* python/python-internal.h (gdbpy_lookup_static_symbols):\n+\tDeclare new function.\n+\t* python/python.c (python_GdbMethods): Add\n+\tgdb.lookup_static_symbols method.\n+\t* NEWS: Mention gdb.lookup_static_symbols.\n+\n 2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python/py-symbol.c (gdbpy_lookup_static_symbol): Lookup in"
    },
    {
      "sha": "96ea6667878bdb968f0ced9c3bbe1953923ac373",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=086baaf1346f07acfb6708e8c6cb79274241488b",
      "patch": "@@ -77,6 +77,9 @@\n   ** The new function gdb.lookup_static_symbol can be used to look up\n      symbols with static linkage.\n \n+  ** The new function gdb.lookup_static_symbols can be used to look up\n+     all static symbols with static linkage.\n+\n   ** gdb.Objfile has new methods 'lookup_global_symbol' and\n      'lookup_static_symbol' to lookup a symbol from this objfile only.\n "
    },
    {
      "sha": "fec0ebd8a1126a51009d6f7ca09e5ad571ff7fa6",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=086baaf1346f07acfb6708e8c6cb79274241488b",
      "patch": "@@ -1,3 +1,8 @@\n+2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python.texi (Symbols In Python): Add documentation for\n+\tgdb.lookup_static_symbols.\n+\n 2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python.texi (Symbols In Python): Extend documentation for"
    },
    {
      "sha": "c9f84d8299a11665094823330aa649cf37ca0c54",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=086baaf1346f07acfb6708e8c6cb79274241488b",
      "patch": "@@ -4883,6 +4883,41 @@ search all object files in the order they appear in the debug\n information.\n @end defun\n \n+@findex gdb.lookup_global_symbol\n+@defun gdb.lookup_global_symbol (name @r{[}, domain@r{]})\n+This function searches for a global symbol by name.\n+The search scope can be restricted to by the domain argument.\n+\n+@var{name} is the name of the symbol.  It must be a string.\n+The optional @var{domain} argument restricts the search to the domain type.\n+The @var{domain} argument must be a domain constant defined in the @code{gdb}\n+module and described later in this chapter.\n+\n+The result is a @code{gdb.Symbol} object or @code{None} if the symbol\n+is not found.\n+@end defun\n+\n+@findex gdb.lookup_static_symbols\n+@defun gdb.lookup_static_symbols (name @r{[}, domain@r{]})\n+Similar to @code{gdb.lookup_static_symbol}, this function searches for\n+global symbols with static linkage by name, and optionally restricted\n+by the domain argument.  However, this function returns a list of all\n+matching symbols found, not just the first one.\n+\n+@var{name} is the name of the symbol.  It must be a string.\n+The optional @var{domain} argument restricts the search to the domain type.\n+The @var{domain} argument must be a domain constant defined in the @code{gdb}\n+module and described later in this chapter.\n+\n+The result is a list of @code{gdb.Symbol} objects which could be empty\n+if no matching symbols were found.\n+\n+Note that this function will not find function-scoped static variables. To look\n+up such variables, iterate over the variables of the function's\n+@code{gdb.Block} and check that @code{block.addr_class} is\n+@code{gdb.SYMBOL_LOC_STATIC}.\n+@end defun\n+\n A @code{gdb.Symbol} object has the following attributes:\n \n @defvar Symbol.type"
    },
    {
      "sha": "647c54b0a5b2799b2f11451e876e6566161ed7d9",
      "filename": "gdb/python/py-symbol.c",
      "status": "modified",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/python/py-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/python/py-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symbol.c?ref=086baaf1346f07acfb6708e8c6cb79274241488b",
      "patch": "@@ -23,6 +23,7 @@\n #include \"symtab.h\"\n #include \"python-internal.h\"\n #include \"objfiles.h\"\n+#include \"symfile.h\"\n \n typedef struct sympy_symbol_object {\n   PyObject_HEAD\n@@ -534,6 +535,66 @@ gdbpy_lookup_static_symbol (PyObject *self, PyObject *args, PyObject *kw)\n   return sym_obj;\n }\n \n+/* Implementation of\n+   gdb.lookup_static_symbols (name [, domain]) -> symbol list.\n+\n+   Returns a list of all static symbols matching NAME in DOMAIN.  */\n+\n+PyObject *\n+gdbpy_lookup_static_symbols (PyObject *self, PyObject *args, PyObject *kw)\n+{\n+  const char *name;\n+  int domain = VAR_DOMAIN;\n+  static const char *keywords[] = { \"name\", \"domain\", NULL };\n+\n+  if (!gdb_PyArg_ParseTupleAndKeywords (args, kw, \"s|i\", keywords, &name,\n+\t\t\t\t\t&domain))\n+    return NULL;\n+\n+  gdbpy_ref<> return_list (PyList_New (0));\n+  if (return_list == NULL)\n+    return NULL;\n+\n+  try\n+    {\n+      /* Expand any symtabs that contain potentially matching symbols.  */\n+      lookup_name_info lookup_name (name, symbol_name_match_type::FULL);\n+      expand_symtabs_matching (NULL, lookup_name, NULL, NULL, ALL_DOMAIN);\n+\n+      for (objfile *objfile : current_program_space->objfiles ())\n+\t{\n+\t  for (compunit_symtab *cust : objfile->compunits ())\n+\t    {\n+\t      const struct blockvector *bv;\n+\t      const struct block *block;\n+\n+\t      bv = COMPUNIT_BLOCKVECTOR (cust);\n+\t      block = BLOCKVECTOR_BLOCK (bv, STATIC_BLOCK);\n+\n+\t      if (block != nullptr)\n+\t\t{\n+\t\t  symbol *symbol = lookup_symbol_in_static_block\n+\t\t    (name, block, (domain_enum) domain).symbol;\n+\n+\t\t  if (symbol != nullptr)\n+\t\t    {\n+\t\t      PyObject *sym_obj\n+\t\t\t= symbol_to_symbol_object (symbol);\n+\t\t      if (PyList_Append (return_list.get (), sym_obj) == -1)\n+\t\t\treturn NULL;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+  catch (const gdb_exception &except)\n+    {\n+      GDB_PY_HANDLE_EXCEPTION (except);\n+    }\n+\n+  return return_list.release ();\n+}\n+\n /* This function is called when an objfile is about to be freed.\n    Invalidate the symbol as further actions on the symbol would result\n    in bad data.  All access to obj->symbol should be gated by"
    },
    {
      "sha": "703c60032c0d31fe69fddeeedb4295702edf0f8d",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=086baaf1346f07acfb6708e8c6cb79274241488b",
      "patch": "@@ -426,6 +426,8 @@ PyObject *gdbpy_lookup_global_symbol (PyObject *self, PyObject *args,\n \t\t\t\t      PyObject *kw);\n PyObject *gdbpy_lookup_static_symbol (PyObject *self, PyObject *args,\n \t\t\t\t      PyObject *kw);\n+PyObject *gdbpy_lookup_static_symbols (PyObject *self, PyObject *args,\n+\t\t\t\t\t   PyObject *kw);\n PyObject *gdbpy_start_recording (PyObject *self, PyObject *args);\n PyObject *gdbpy_current_recording (PyObject *self, PyObject *args);\n PyObject *gdbpy_stop_recording (PyObject *self, PyObject *args);"
    },
    {
      "sha": "f94214e1b24933d3aa2cd0c582ab3cf41b239d37",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=086baaf1346f07acfb6708e8c6cb79274241488b",
      "patch": "@@ -1994,6 +1994,10 @@ Return the symbol corresponding to the given name (or None).\" },\n     METH_VARARGS | METH_KEYWORDS,\n     \"lookup_static_symbol (name [, domain]) -> symbol\\n\\\n Return the static-linkage symbol corresponding to the given name (or None).\" },\n+  { \"lookup_static_symbols\", (PyCFunction) gdbpy_lookup_static_symbols,\n+    METH_VARARGS | METH_KEYWORDS,\n+    \"lookup_static_symbols (name [, domain]) -> symbol\\n\\\n+Return a list of all static-linkage symbols corresponding to the given name.\" },\n \n   { \"lookup_objfile\", (PyCFunction) gdbpy_lookup_objfile,\n     METH_VARARGS | METH_KEYWORDS,"
    },
    {
      "sha": "9c69443bd784e03e15bafc7230c1322a1f298881",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=086baaf1346f07acfb6708e8c6cb79274241488b",
      "patch": "@@ -1,3 +1,8 @@\n+2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-symbol.exp: Add test for\n+\tgdb.lookup_static_symbols.\n+\n 2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-symbol.c: Declare and call function from new"
    },
    {
      "sha": "ea41297f54f89911100d6bbccc408673f915c718",
      "filename": "gdb/testsuite/gdb.python/py-symbol.exp",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/testsuite/gdb.python/py-symbol.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/086baaf1346f07acfb6708e8c6cb79274241488b/gdb/testsuite/gdb.python/py-symbol.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-symbol.exp?ref=086baaf1346f07acfb6708e8c6cb79274241488b",
      "patch": "@@ -29,6 +29,15 @@ if {[prepare_for_testing \"failed to prepare\" $testfile \\\n # Skip all tests if Python scripting is not enabled.\n if { [skip_python_tests] } { continue }\n \n+# Check that we find all static symbols before the inferior has\n+# started, at which point some of the symtabs might not have been\n+# expanded.\n+gdb_test \"python print (len (gdb.lookup_static_symbols ('rr')))\" \\\n+    \"2\" \"print (len (gdb.lookup_static_symbols ('rr')))\"\n+\n+# Restart so we don't have expanded symtabs after the previous test.\n+clean_restart ${binfile}\n+\n # Test looking up a global symbol before we runto_main as this is the\n # point where we don't have a current frame, and we don't want to\n # require one.\n@@ -108,6 +117,10 @@ gdb_breakpoint \"function_in_other_file\"\n gdb_continue_to_breakpoint \"function_in_other_file\"\n gdb_test \"python print (gdb.lookup_static_symbol ('rr').value ())\" \"99\" \\\n     \"print value of rr from other file\"\n+gdb_test \"python print (gdb.lookup_static_symbols ('rr')\\[0\\].value ())\" \"99\" \\\n+    \"print value of gdb.lookup_static_symbols ('rr')\\[0\\], from the other file\"\n+gdb_test \"python print (gdb.lookup_static_symbols ('rr')\\[1\\].value ())\" \"42\" \\\n+    \"print value of gdb.lookup_static_symbols ('rr')\\[1\\], from the other file\"\n \n # Now continue back to the first source file.\n set linenum [gdb_get_line_number \"Break at end.\"]\n@@ -119,6 +132,10 @@ gdb_py_test_silent_cmd \"python frame = gdb.selected_frame()\" \"Get Frame\" 0\n # static symbol from the second source file.\n gdb_test \"python print (gdb.lookup_static_symbol ('rr').value ())\" \"42\" \\\n     \"print value of rr from main file\"\n+gdb_test \"python print (gdb.lookup_static_symbols ('rr')\\[0\\].value ())\" \"99\" \\\n+    \"print value of gdb.lookup_static_symbols ('rr')\\[0\\], from the main file\"\n+gdb_test \"python print (gdb.lookup_static_symbols ('rr')\\[1\\].value ())\" \"42\" \\\n+    \"print value of gdb.lookup_static_symbols ('rr')\\[1\\], from the main file\"\n \n # Test is_variable attribute.\n gdb_py_test_silent_cmd \"python a = gdb.lookup_symbol(\\'a\\')\" \"Get variable a\" 0"
    }
  ]
}