{
  "sha": "2652cfad8d9d6ab05fe6296802ec499682a00749",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjY1MmNmYWQ4ZDlkNmFiMDVmZTYyOTY4MDJlYzQ5OTY4MmEwMDc0OQ==",
  "commit": {
    "author": {
      "name": "Claire Xenia Wolf",
      "email": "claire@symbioticeda.com",
      "date": "2020-12-15T15:11:03Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-01-07T03:44:54Z"
    },
    "message": "RISC-V: Support riscv bitmanip frozen ZBA/ZBB/ZBC instructions (v0.93).\n\nIn fact rev8/orc.b/zext.h are the aliases of grevi/gorci/pack[w], so we\nshould update them to INSN_ALIAS when we have supported their true instruction\nin the future.  Though we still use the [MATCH|MAKS]_[GREVI|GORCI|PACK|PACKW]\nto encode them.  Besides, the orc.b has the same encoding both in rv32 and\nrv64, so we just keep one of them in the opcode table.\n\nThis patch is implemented according to the following link,\nhttps://github.com/riscv/riscv-bitmanip/pull/101\n\n2021-01-07  Claire Xenia Wolf  <claire@symbioticeda.com>\n            Jim Wilson  <jimw@sifive.com>\n            Andrew Waterman  <andrew@sifive.com>\n            Maxim Blinov  <maxim.blinov@embecosm.com>\n            Kito Cheng  <kito.cheng@sifive.com>\n            Nelson Chu  <nelson.chu@sifive.com>\n\nbfd/\n    * elfxx-riscv.c (riscv_std_z_ext_strtab): Added zba, zbb and zbc.\ngas/\n    * config/tc-riscv.c (riscv_multi_subset_supports): Handle INSN_CLASS_ZB*.\n    (riscv_get_default_ext_version): Do not check the default_isa_spec when\n    the version defined in the riscv_opcodes table is ISA_SPEC_CLASS_DRAFT.\n    * testsuite/gas/riscv/bitmanip-insns-32.d: New testcase.\n    * testsuite/gas/riscv/bitmanip-insns-64.d: Likewise.\n    * testsuite/gas/riscv/bitmanip-insns.s: Likewise.\ninclude/\n    * opcode/riscv-opc.h: Added MASK/MATCH/DECLARE_INSN for ZBA/ZBB/ZBC.\n    * opcode/riscv.h (riscv_insn_class): Added INSN_CLASS_ZB*.\n    (enum riscv_isa_spec_class): Added ISA_SPEC_CLASS_DRAFT for the\n    frozen extensions.\nopcodes/\n    * riscv-opc.c (riscv_opcodes): Add ZBA/ZBB/ZBC instructions.\n    (MASK_RVB_IMM): Used for rev8 and orc.b encoding.",
    "tree": {
      "sha": "117665ece17441b71841d299fa3cc151e38b4b9e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/117665ece17441b71841d299fa3cc151e38b4b9e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2652cfad8d9d6ab05fe6296802ec499682a00749",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2652cfad8d9d6ab05fe6296802ec499682a00749",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2652cfad8d9d6ab05fe6296802ec499682a00749",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2652cfad8d9d6ab05fe6296802ec499682a00749/comments",
  "author": {
    "login": "clairexen",
    "id": 59544343,
    "node_id": "MDQ6VXNlcjU5NTQ0MzQz",
    "avatar_url": "https://avatars.githubusercontent.com/u/59544343?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/clairexen",
    "html_url": "https://github.com/clairexen",
    "followers_url": "https://api.github.com/users/clairexen/followers",
    "following_url": "https://api.github.com/users/clairexen/following{/other_user}",
    "gists_url": "https://api.github.com/users/clairexen/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/clairexen/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/clairexen/subscriptions",
    "organizations_url": "https://api.github.com/users/clairexen/orgs",
    "repos_url": "https://api.github.com/users/clairexen/repos",
    "events_url": "https://api.github.com/users/clairexen/events{/privacy}",
    "received_events_url": "https://api.github.com/users/clairexen/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "d4e57b87a3d5879917c30e33b14760fd76ff7b38",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4e57b87a3d5879917c30e33b14760fd76ff7b38",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d4e57b87a3d5879917c30e33b14760fd76ff7b38"
    }
  ],
  "stats": {
    "total": 383,
    "additions": 376,
    "deletions": 7
  },
  "files": [
    {
      "sha": "4843f0a7c6efb87c3192da6e0f54a8624e7a59de",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -1,3 +1,12 @@\n+2021-01-07  Claire Xenia Wolf  <claire@symbioticeda.com>\n+\t    Jim Wilson  <jimw@sifive.com>\n+\t    Andrew Waterman  <andrew@sifive.com>\n+\t    Maxim Blinov  <maxim.blinov@embecosm.com>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\t    Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* elfxx-riscv.c (riscv_std_z_ext_strtab): Added zba, zbb and zbc.\n+\n 2021-01-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* elf32-bfin.c (bfin_check_relocs): Check bfd_link_hash_indirect."
    },
    {
      "sha": "f40a923ff6f4073b51dacabb1c59bc47a75bbb19",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -1597,7 +1597,7 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n \n static const char * const riscv_std_z_ext_strtab[] =\n {\n-  \"zicsr\", \"zifencei\", NULL\n+  \"zicsr\", \"zifencei\", \"zba\", \"zbb\", \"zbc\", NULL\n };\n \n static const char * const riscv_std_s_ext_strtab[] ="
    },
    {
      "sha": "c99e1b32004694a44dc9f65298baf842fbcdba23",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -1,3 +1,17 @@\n+2021-01-07  Claire Xenia Wolf  <claire@symbioticeda.com>\n+\t    Jim Wilson  <jimw@sifive.com>\n+\t    Andrew Waterman  <andrew@sifive.com>\n+\t    Maxim Blinov  <maxim.blinov@embecosm.com>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\t    Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* config/tc-riscv.c (riscv_multi_subset_supports): Handle INSN_CLASS_ZB*.\n+\t(riscv_get_default_ext_version): Do not check the default_isa_spec when\n+\tthe version defined in the riscv_opcodes table is ISA_SPEC_CLASS_DRAFT.\n+\t* testsuite/gas/riscv/bitmanip-insns-32.d: New testcase.\n+\t* testsuite/gas/riscv/bitmanip-insns-64.d: Likewise.\n+\t* testsuite/gas/riscv/bitmanip-insns.s: Likewise.\n+\n 2021-01-06  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/sparc/sparc.exp: Move 64-bit tests inside gas_64_check."
    },
    {
      "sha": "052199ea7404f5a8d88e6a68c2529d501b2df3d9",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -251,6 +251,16 @@ riscv_multi_subset_supports (enum riscv_insn_class insn_class)\n     case INSN_CLASS_ZIFENCEI:\n       return riscv_subset_supports (\"zifencei\");\n \n+    case INSN_CLASS_ZBA:\n+      return riscv_subset_supports (\"zba\");\n+    case INSN_CLASS_ZBB:\n+      return riscv_subset_supports (\"zbb\");\n+    case INSN_CLASS_ZBC:\n+      return riscv_subset_supports (\"zbc\");\n+    case INSN_CLASS_ZBA_OR_ZBB:\n+      return (riscv_subset_supports (\"zba\")\n+\t      || riscv_subset_supports (\"zbb\"));\n+\n     default:\n       as_fatal (\"Unreachable\");\n       return FALSE;\n@@ -296,7 +306,8 @@ riscv_get_default_ext_version (const char *name,\n \t && ext->name\n \t && strcmp (ext->name, name) == 0)\n     {\n-      if (ext->isa_spec_class == default_isa_spec)\n+      if (ext->isa_spec_class == ISA_SPEC_CLASS_DRAFT\n+\t  || ext->isa_spec_class == default_isa_spec)\n \t{\n \t  *major_version = ext->major_version;\n \t  *minor_version = ext->minor_version;\n@@ -1454,6 +1465,7 @@ riscv_ext (int destreg, int srcreg, unsigned shift, bfd_boolean sign)\n }\n \n /* Expand RISC-V assembly macros into one or more instructions.  */\n+\n static void\n macro (struct riscv_cl_insn *ip, expressionS *imm_expr,\n        bfd_reloc_code_real_type *imm_reloc)"
    },
    {
      "sha": "b218f96e948726ab58f0c09f54b7be266ef15468",
      "filename": "gas/testsuite/gas/riscv/bitmanip-insns-32.d",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/gas/testsuite/gas/riscv/bitmanip-insns-32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/gas/testsuite/gas/riscv/bitmanip-insns-32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/bitmanip-insns-32.d?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -0,0 +1,37 @@\n+#as: -march=rv32i_zba_zbb_zbc\n+#source: bitmanip-insns.s\n+#objdump: -dr -Mno-aliases\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <.text>:\n+[ \t]+[0-9a-f]+:[ \t]+0805c533[ \t]+zext.h[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+6985d513[ \t]+rev8[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+2875d513[ \t]+orc.b[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+20c5a533[ \t]+sh1add[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+20c5c533[ \t]+sh2add[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+20c5e533[ \t]+sh3add[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+60059513[ \t]+clz[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+60159513[ \t]+ctz[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+60259513[ \t]+cpop[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+0ac5c533[ \t]+min[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac5e533[ \t]+max[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac5d533[ \t]+minu[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac5f533[ \t]+maxu[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+60459513[ \t]+sext.b[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+60559513[ \t]+sext.h[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+40c5f533[ \t]+andn[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+40c5e533[ \t]+orn[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+00c5c533[ \t]+xor[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+6005d513[ \t]+rori[ \t]+a0,a1,0x0\n+[ \t]+[0-9a-f]+:[ \t]+61f5d513[ \t]+rori[ \t]+a0,a1,0x1f\n+[ \t]+[0-9a-f]+:[ \t]+60c5d533[ \t]+ror[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+6005d513[ \t]+rori[ \t]+a0,a1,0x0\n+[ \t]+[0-9a-f]+:[ \t]+61f5d513[ \t]+rori[ \t]+a0,a1,0x1f\n+[ \t]+[0-9a-f]+:[ \t]+60c59533[ \t]+rol[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac59533[ \t]+clmul[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac5b533[ \t]+clmulh[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac5a533[ \t]+clmulr[ \t]+a0,a1,a2"
    },
    {
      "sha": "9914f3e5571f6aecc70545f3d4fd7010a80386a1",
      "filename": "gas/testsuite/gas/riscv/bitmanip-insns-64.d",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/gas/testsuite/gas/riscv/bitmanip-insns-64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/gas/testsuite/gas/riscv/bitmanip-insns-64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/bitmanip-insns-64.d?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -0,0 +1,55 @@\n+#as: -march=rv64i_zba_zbb_zbc -defsym __64_bit__=1\n+#source: bitmanip-insns.s\n+#objdump: -dr -Mno-aliases\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <.text>:\n+[ \t]+[0-9a-f]+:[ \t]+0805c53b[ \t]+zext.h[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+6b85d513[ \t]+rev8[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+2875d513[ \t]+orc.b[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+0805853b[ \t]+add.uw[ \t]+a0,a1,zero\n+[ \t]+[0-9a-f]+:[ \t]+20c5a533[ \t]+sh1add[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+20c5c533[ \t]+sh2add[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+20c5e533[ \t]+sh3add[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+20c5a53b[ \t]+sh1add.uw[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+20c5c53b[ \t]+sh2add.uw[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+20c5e53b[ \t]+sh3add.uw[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+08c5853b[ \t]+add.uw[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0805951b[ \t]+slli.uw[ \t]+a0,a1,0x0\n+[ \t]+[0-9a-f]+:[ \t]+0bf5951b[ \t]+slli.uw[ \t]+a0,a1,0x3f\n+[ \t]+[0-9a-f]+:[ \t]+60059513[ \t]+clz[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+60159513[ \t]+ctz[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+60259513[ \t]+cpop[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+0ac5c533[ \t]+min[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac5e533[ \t]+max[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac5d533[ \t]+minu[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac5f533[ \t]+maxu[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+60459513[ \t]+sext.b[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+60559513[ \t]+sext.h[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+40c5f533[ \t]+andn[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+40c5e533[ \t]+orn[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+00c5c533[ \t]+xor[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+6005d513[ \t]+rori[ \t]+a0,a1,0x0\n+[ \t]+[0-9a-f]+:[ \t]+61f5d513[ \t]+rori[ \t]+a0,a1,0x1f\n+[ \t]+[0-9a-f]+:[ \t]+60c5d533[ \t]+ror[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+6005d513[ \t]+rori[ \t]+a0,a1,0x0\n+[ \t]+[0-9a-f]+:[ \t]+61f5d513[ \t]+rori[ \t]+a0,a1,0x1f\n+[ \t]+[0-9a-f]+:[ \t]+60c59533[ \t]+rol[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+6005951b[ \t]+clzw[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+6015951b[ \t]+ctzw[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+6025951b[ \t]+cpopw[ \t]+a0,a1\n+[ \t]+[0-9a-f]+:[ \t]+63f5d513[ \t]+rori[ \t]+a0,a1,0x3f\n+[ \t]+[0-9a-f]+:[ \t]+63f5d513[ \t]+rori[ \t]+a0,a1,0x3f\n+[ \t]+[0-9a-f]+:[ \t]+6005d51b[ \t]+roriw[ \t]+a0,a1,0x0\n+[ \t]+[0-9a-f]+:[ \t]+61f5d51b[ \t]+roriw[ \t]+a0,a1,0x1f\n+[ \t]+[0-9a-f]+:[ \t]+60c5d53b[ \t]+rorw[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+6005d51b[ \t]+roriw[ \t]+a0,a1,0x0\n+[ \t]+[0-9a-f]+:[ \t]+61f5d51b[ \t]+roriw[ \t]+a0,a1,0x1f\n+[ \t]+[0-9a-f]+:[ \t]+60c5953b[ \t]+rolw[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac59533[ \t]+clmul[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac5b533[ \t]+clmulh[ \t]+a0,a1,a2\n+[ \t]+[0-9a-f]+:[ \t]+0ac5a533[ \t]+clmulr[ \t]+a0,a1,a2"
    },
    {
      "sha": "b14e89c1d4c88ed32fc63104448fc721daa41a7a",
      "filename": "gas/testsuite/gas/riscv/bitmanip-insns.s",
      "status": "added",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/gas/testsuite/gas/riscv/bitmanip-insns.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/gas/testsuite/gas/riscv/bitmanip-insns.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/bitmanip-insns.s?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -0,0 +1,58 @@\n+\t# pseudo/aliaese\n+\tzext.h\ta0, a1\n+\trev8\ta0, a1\n+\torc.b\ta0, a1\n+.ifdef __64_bit__\n+\tzext.w\ta0, a1\n+.endif\n+\n+\t# ZBA\n+\tsh1add\ta0, a1, a2\n+\tsh2add\ta0, a1, a2\n+\tsh3add\ta0, a1, a2\n+.ifdef __64_bit__\n+\tsh1add.uw\ta0, a1, a2\n+\tsh2add.uw\ta0, a1, a2\n+\tsh3add.uw\ta0, a1, a2\n+\tadd.uw\t\ta0, a1, a2\n+\tslli.uw\t\ta0, a1, 0\n+\tslli.uw\t\ta0, a1, 63\n+.endif\n+\n+\t# ZBB\n+\tclz\ta0, a1\n+\tctz\ta0, a1\n+\tcpop\ta0, a1\n+\tmin\ta0, a1, a2\n+\tmax\ta0, a1, a2\n+\tminu\ta0, a1, a2\n+\tmaxu\ta0, a1, a2\n+\tsext.b\ta0, a1\n+\tsext.h\ta0, a1\n+\tandn\ta0, a1, a2\n+\torn\ta0, a1, a2\n+\txor\ta0, a1, a2\n+\trori\ta0, a1, 0\n+\trori\ta0, a1, 31\n+\tror\ta0, a1, a2\n+\tror\ta0, a1, 0\n+\tror\ta0, a1, 31\n+\trol\ta0, a1, a2\n+.ifdef __64_bit__\n+\tclzw\ta0, a1\n+\tctzw\ta0, a1\n+\tcpopw\ta0, a1\n+\trori\ta0, a1, 63\n+\tror\ta0, a1, 63\n+\troriw\ta0, a1, 0\n+\troriw\ta0, a1, 31\n+\trorw\ta0, a1, a2\n+\trorw\ta0, a1, 0\n+\trorw\ta0, a1, 31\n+\trolw\ta0, a1, a2\n+.endif\n+\n+\t# ZBC\n+\tclmul\ta0, a1, a2\n+\tclmulh\ta0, a1, a2\n+\tclmulr\ta0, a1, a2"
    },
    {
      "sha": "80be817fe4357010a32f56bee01c45dd38402bb3",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -1,3 +1,15 @@\n+2021-01-07  Claire Xenia Wolf  <claire@symbioticeda.com>\n+\t    Jim Wilson  <jimw@sifive.com>\n+\t    Andrew Waterman  <andrew@sifive.com>\n+\t    Maxim Blinov  <maxim.blinov@embecosm.com>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\t    Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* opcode/riscv-opc.h: Added MASK/MATCH/DECLARE_INSN for ZBA/ZBB/ZBC.\n+\t* opcode/riscv.h (riscv_insn_class): Added INSN_CLASS_ZB*.\n+\t(enum riscv_isa_spec_class): Added ISA_SPEC_CLASS_DRAFT for the\n+\tfrozen extensions.\n+\n 2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-api.h (CTF_MN_RECURSE): New."
    },
    {
      "sha": "7dbe8308296993e39725d668d28c179879b84b80",
      "filename": "include/opcode/riscv-opc.h",
      "status": "modified",
      "additions": 108,
      "deletions": 0,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/include/opcode/riscv-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/include/opcode/riscv-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/riscv-opc.h?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -189,6 +189,78 @@\n #define MASK_REMW  0xfe00707f\n #define MATCH_REMUW 0x200703b\n #define MASK_REMUW  0xfe00707f\n+#define MATCH_GREVI 0x68005013\n+#define MASK_GREVI  0xfc00707f\n+#define MATCH_GORCI 0x28005013\n+#define MASK_GORCI  0xfc00707f\n+#define MATCH_PACK 0x8004033\n+#define MASK_PACK  0xfe00707f\n+#define MATCH_PACKW 0x800403b\n+#define MASK_PACKW  0xfe00707f\n+#define MATCH_SH1ADD 0x20002033\n+#define MASK_SH1ADD  0xfe00707f\n+#define MATCH_SH2ADD 0x20004033\n+#define MASK_SH2ADD  0xfe00707f\n+#define MATCH_SH3ADD 0x20006033\n+#define MASK_SH3ADD  0xfe00707f\n+#define MATCH_SH1ADD_UW 0x2000203b\n+#define MASK_SH1ADD_UW  0xfe00707f\n+#define MATCH_SH2ADD_UW 0x2000403b\n+#define MASK_SH2ADD_UW  0xfe00707f\n+#define MATCH_SH3ADD_UW 0x2000603b\n+#define MASK_SH3ADD_UW  0xfe00707f\n+#define MATCH_ADD_UW 0x800003b\n+#define MASK_ADD_UW  0xfe00707f\n+#define MATCH_SLLI_UW 0x800101b\n+#define MASK_SLLI_UW  0xfc00707f\n+#define MATCH_CLZ 0x60001013\n+#define MASK_CLZ  0xfff0707f\n+#define MATCH_CTZ 0x60101013\n+#define MASK_CTZ  0xfff0707f\n+#define MATCH_CPOP 0x60201013\n+#define MASK_CPOP  0xfff0707f\n+#define MATCH_MIN 0xa004033\n+#define MASK_MIN  0xfe00707f\n+#define MATCH_MAX 0xa006033\n+#define MASK_MAX  0xfe00707f\n+#define MATCH_MINU 0xa005033\n+#define MASK_MINU  0xfe00707f\n+#define MATCH_MAXU 0xa007033\n+#define MASK_MAXU  0xfe00707f\n+#define MATCH_SEXT_B 0x60401013\n+#define MASK_SEXT_B  0xfff0707f\n+#define MATCH_SEXT_H 0x60501013\n+#define MASK_SEXT_H  0xfff0707f\n+#define MATCH_ANDN 0x40007033\n+#define MASK_ANDN  0xfe00707f\n+#define MATCH_ORN 0x40006033\n+#define MASK_ORN  0xfe00707f\n+#define MATCH_XNOR 0x40004033\n+#define MASK_XNOR  0xfe00707f\n+#define MATCH_RORI 0x60005013\n+#define MASK_RORI  0xfc00707f\n+#define MATCH_ROR 0x60005033\n+#define MASK_ROR  0xfe00707f\n+#define MATCH_ROL 0x60001033\n+#define MASK_ROL  0xfe00707f\n+#define MATCH_CLZW 0x6000101b\n+#define MASK_CLZW  0xfff0707f\n+#define MATCH_CTZW 0x6010101b\n+#define MASK_CTZW  0xfff0707f\n+#define MATCH_CPOPW 0x6020101b\n+#define MASK_CPOPW  0xfff0707f\n+#define MATCH_RORIW 0x6000501b\n+#define MASK_RORIW  0xfe00707f\n+#define MATCH_RORW 0x6000503b\n+#define MASK_RORW  0xfe00707f\n+#define MATCH_ROLW 0x6000103b\n+#define MASK_ROLW  0xfe00707f\n+#define MATCH_CLMUL 0xa001033\n+#define MASK_CLMUL  0xfe00707f\n+#define MATCH_CLMULH 0xa003033\n+#define MASK_CLMULH  0xfe00707f\n+#define MATCH_CLMULR 0xa002033\n+#define MASK_CLMULR  0xfe00707f\n #define MATCH_AMOADD_W 0x202f\n #define MASK_AMOADD_W  0xf800707f\n #define MATCH_AMOXOR_W 0x2000202f\n@@ -927,6 +999,42 @@ DECLARE_INSN(divw, MATCH_DIVW, MASK_DIVW)\n DECLARE_INSN(divuw, MATCH_DIVUW, MASK_DIVUW)\n DECLARE_INSN(remw, MATCH_REMW, MASK_REMW)\n DECLARE_INSN(remuw, MATCH_REMUW, MASK_REMUW)\n+DECLARE_INSN(grevi, MATCH_GREVI, MASK_GREVI)\n+DECLARE_INSN(gorci, MATCH_GORCI, MASK_GORCI)\n+DECLARE_INSN(pack, MATCH_PACK, MASK_PACK)\n+DECLARE_INSN(packw, MATCH_PACKW, MASK_PACKW)\n+DECLARE_INSN(sh1add, MATCH_SH1ADD, MASK_SH1ADD)\n+DECLARE_INSN(sh2add, MATCH_SH2ADD, MASK_SH2ADD)\n+DECLARE_INSN(sh3add, MATCH_SH3ADD, MASK_SH3ADD)\n+DECLARE_INSN(sh1add_uw, MATCH_SH1ADD_UW, MASK_SH1ADD_UW)\n+DECLARE_INSN(sh2add_uw, MATCH_SH2ADD_UW, MASK_SH2ADD_UW)\n+DECLARE_INSN(sh3add_uw, MATCH_SH3ADD_UW, MASK_SH3ADD_UW)\n+DECLARE_INSN(add_uw, MATCH_ADD_UW, MASK_ADD_UW)\n+DECLARE_INSN(slli_uw, MATCH_SLLI_UW, MASK_SLLI_UW)\n+DECLARE_INSN(clz, MATCH_CLZ, MASK_CLZ)\n+DECLARE_INSN(ctz, MATCH_CTZ, MASK_CTZ)\n+DECLARE_INSN(cpop, MATCH_CPOP, MASK_CPOP)\n+DECLARE_INSN(min, MATCH_MIN, MASK_MIN)\n+DECLARE_INSN(max, MATCH_MAX, MASK_MAX)\n+DECLARE_INSN(minu, MATCH_MINU, MASK_MINU)\n+DECLARE_INSN(maxu, MATCH_MAXU, MASK_MAXU)\n+DECLARE_INSN(sext_b, MATCH_SEXT_B, MASK_SEXT_B)\n+DECLARE_INSN(sext_h, MATCH_SEXT_H, MASK_SEXT_H)\n+DECLARE_INSN(andn, MATCH_ANDN, MASK_ANDN)\n+DECLARE_INSN(orn, MATCH_ORN, MASK_ORN)\n+DECLARE_INSN(xnor, MATCH_XNOR, MASK_XNOR)\n+DECLARE_INSN(rori, MATCH_RORI, MASK_RORI)\n+DECLARE_INSN(ror, MATCH_ROR, MASK_ROR)\n+DECLARE_INSN(rol, MATCH_ROL, MASK_ROL)\n+DECLARE_INSN(clzw, MATCH_CLZW, MASK_CLZW)\n+DECLARE_INSN(ctzw, MATCH_CTZW, MASK_CTZW)\n+DECLARE_INSN(cpopw, MATCH_CPOPW, MASK_CPOPW)\n+DECLARE_INSN(roriw, MATCH_RORIW, MASK_RORIW)\n+DECLARE_INSN(rorw, MATCH_RORW, MASK_RORW)\n+DECLARE_INSN(rolw, MATCH_ROLW, MASK_ROLW)\n+DECLARE_INSN(clmul, MATCH_CLMUL, MASK_CLMUL)\n+DECLARE_INSN(clmulr, MATCH_CLMULR, MASK_CLMULR)\n+DECLARE_INSN(clmulh, MATCH_CLMULH, MASK_CLMULH)\n DECLARE_INSN(amoadd_w, MATCH_AMOADD_W, MASK_AMOADD_W)\n DECLARE_INSN(amoxor_w, MATCH_AMOXOR_W, MASK_AMOXOR_W)\n DECLARE_INSN(amoor_w, MATCH_AMOOR_W, MASK_AMOOR_W)"
    },
    {
      "sha": "326d84033412fba284a607dd3c557194281754bc",
      "filename": "include/opcode/riscv.h",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/include/opcode/riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/include/opcode/riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/riscv.h?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -311,6 +311,10 @@ enum riscv_insn_class\n    INSN_CLASS_D_AND_C,\n    INSN_CLASS_ZICSR,\n    INSN_CLASS_ZIFENCEI,\n+   INSN_CLASS_ZBA,\n+   INSN_CLASS_ZBB,\n+   INSN_CLASS_ZBC,\n+   INSN_CLASS_ZBA_OR_ZBB,\n   };\n \n /* This structure holds information for a particular instruction.  */\n@@ -353,7 +357,8 @@ enum riscv_isa_spec_class\n \n   ISA_SPEC_CLASS_2P2,\n   ISA_SPEC_CLASS_20190608,\n-  ISA_SPEC_CLASS_20191213\n+  ISA_SPEC_CLASS_20191213,\n+  ISA_SPEC_CLASS_DRAFT\n };\n \n #define RISCV_UNKNOWN_VERSION -1"
    },
    {
      "sha": "4f4e54e6b360815171ffb152ede612763c36471f",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -1,3 +1,13 @@\n+2021-01-07  Claire Xenia Wolf  <claire@symbioticeda.com>\n+\t    Jim Wilson  <jimw@sifive.com>\n+\t    Andrew Waterman  <andrew@sifive.com>\n+\t    Maxim Blinov  <maxim.blinov@embecosm.com>\n+\t    Kito Cheng  <kito.cheng@sifive.com>\n+\t    Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* riscv-opc.c (riscv_opcodes): Add ZBA/ZBB/ZBC instructions.\n+\t(MASK_RVB_IMM): Used for rev8 and orc.b encoding.\n+\n 2021-01-01  Alan Modra  <amodra@gmail.com>\n \n \tUpdate year range in copyright notice of all files."
    },
    {
      "sha": "cb980f23547ac6305cb095aaed3a5ba1f402eb52",
      "filename": "opcodes/riscv-opc.c",
      "status": "modified",
      "additions": 53,
      "deletions": 4,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2652cfad8d9d6ab05fe6296802ec499682a00749/opcodes/riscv-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2652cfad8d9d6ab05fe6296802ec499682a00749/opcodes/riscv-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-opc.c?ref=2652cfad8d9d6ab05fe6296802ec499682a00749",
      "patch": "@@ -79,6 +79,7 @@ const char * const riscv_fpr_names_abi[NFPR] = {\n #define MASK_AQ (OP_MASK_AQ << OP_SH_AQ)\n #define MASK_RL (OP_MASK_RL << OP_SH_RL)\n #define MASK_AQRL (MASK_AQ | MASK_RL)\n+#define MASK_RVB_IMM (OP_MASK_SHAMT << OP_SH_SHAMT)\n \n static int\n match_opcode (const struct riscv_opcode *op, insn_t insn)\n@@ -238,10 +239,7 @@ const struct riscv_opcode riscv_opcodes[] =\n {\"mv\",          0, INSN_CLASS_I,   \"d,s\",  MATCH_ADDI, MASK_ADDI | MASK_IMM, match_opcode, INSN_ALIAS },\n {\"move\",        0, INSN_CLASS_C,   \"d,CV\",  MATCH_C_MV, MASK_C_MV, match_c_add, INSN_ALIAS },\n {\"move\",        0, INSN_CLASS_I,   \"d,s\",  MATCH_ADDI, MASK_ADDI | MASK_IMM, match_opcode, INSN_ALIAS },\n-{\"sext.b\",      0, INSN_CLASS_I,   \"d,s\",  0,    (int) M_SEXTB,  match_never, INSN_MACRO },\n-{\"sext.h\",      0, INSN_CLASS_I,   \"d,s\",  0,    (int) M_SEXTH,  match_never, INSN_MACRO },\n {\"zext.b\",      0, INSN_CLASS_I,   \"d,s\",  MATCH_ANDI | ENCODE_ITYPE_IMM (255), MASK_ANDI | MASK_IMM, match_opcode, INSN_ALIAS },\n-{\"zext.h\",      0, INSN_CLASS_I,   \"d,s\",  0,    (int) M_ZEXTH,  match_never, INSN_MACRO },\n {\"andi\",        0, INSN_CLASS_C,   \"Cs,Cw,Co\",  MATCH_C_ANDI, MASK_C_ANDI, match_opcode, INSN_ALIAS },\n {\"andi\",        0, INSN_CLASS_I,   \"d,s,j\",  MATCH_ANDI, MASK_ANDI, match_opcode, 0 },\n {\"and\",         0, INSN_CLASS_C,   \"Cs,Cw,Ct\",  MATCH_C_AND, MASK_C_AND, match_opcode, INSN_ALIAS },\n@@ -374,7 +372,6 @@ const struct riscv_opcode riscv_opcodes[] =\n {\"sd\",         64, INSN_CLASS_C, \"Ct,Cl(Cs)\",  MATCH_C_SD, MASK_C_SD, match_opcode, INSN_ALIAS|INSN_DREF|INSN_8_BYTE },\n {\"sd\",         64, INSN_CLASS_I, \"t,q(s)\",  MATCH_SD, MASK_SD, match_opcode, INSN_DREF|INSN_8_BYTE },\n {\"sd\",         64, INSN_CLASS_I, \"t,A,s\",  0, (int) M_SD, match_never, INSN_MACRO },\n-{\"zext.w\",     64, INSN_CLASS_I, \"d,s\",    0, (int) M_ZEXTW,  match_never, INSN_MACRO },\n {\"sext.w\",     64, INSN_CLASS_C, \"d,CU\",  MATCH_C_ADDIW, MASK_C_ADDIW | MASK_RVC_IMM, match_rd_nonzero, INSN_ALIAS },\n {\"sext.w\",     64, INSN_CLASS_I, \"d,s\",  MATCH_ADDIW, MASK_ADDIW | MASK_IMM, match_opcode, INSN_ALIAS },\n {\"addiw\",      64, INSN_CLASS_C, \"d,CU,Co\",  MATCH_C_ADDIW, MASK_C_ADDIW, match_rd_nonzero, INSN_ALIAS },\n@@ -502,6 +499,54 @@ const struct riscv_opcode riscv_opcodes[] =\n {\"remw\",     64, INSN_CLASS_M, \"d,s,t\",  MATCH_REMW, MASK_REMW, match_opcode, 0 },\n {\"remuw\",    64, INSN_CLASS_M, \"d,s,t\",  MATCH_REMUW, MASK_REMUW, match_opcode, 0 },\n \n+/* Bitmanip instruction subset - ZBA/ZBB/ZBC  */\n+{\"sh1add\",    0, INSN_CLASS_ZBA,   \"d,s,t\",  MATCH_SH1ADD, MASK_SH1ADD, match_opcode, 0 },\n+{\"sh2add\",    0, INSN_CLASS_ZBA,   \"d,s,t\",  MATCH_SH2ADD, MASK_SH2ADD, match_opcode, 0 },\n+{\"sh3add\",    0, INSN_CLASS_ZBA,   \"d,s,t\",  MATCH_SH3ADD, MASK_SH3ADD, match_opcode, 0 },\n+{\"sh1add.uw\",64, INSN_CLASS_ZBA,   \"d,s,t\",  MATCH_SH1ADD_UW, MASK_SH1ADD_UW, match_opcode, 0 },\n+{\"sh2add.uw\",64, INSN_CLASS_ZBA,   \"d,s,t\",  MATCH_SH2ADD_UW, MASK_SH2ADD_UW, match_opcode, 0 },\n+{\"sh3add.uw\",64, INSN_CLASS_ZBA,   \"d,s,t\",  MATCH_SH3ADD_UW, MASK_SH3ADD_UW, match_opcode, 0 },\n+{\"zext.w\",   64, INSN_CLASS_ZBA_OR_ZBB,   \"d,s\",    MATCH_ADD_UW, MASK_ADD_UW | MASK_RS2, match_opcode, INSN_ALIAS },\n+{\"zext.w\",   64, INSN_CLASS_I,     \"d,s\",    0, (int) M_ZEXTW,  match_never, INSN_MACRO },\n+{\"add.uw\",   64, INSN_CLASS_ZBA,   \"d,s,t\",  MATCH_ADD_UW, MASK_ADD_UW, match_opcode, 0 },\n+{\"slli.uw\",  64, INSN_CLASS_ZBA,   \"d,s,>\",  MATCH_SLLI_UW, MASK_SLLI_UW, match_opcode, 0 },\n+\n+{\"clz\",       0, INSN_CLASS_ZBB,   \"d,s\",  MATCH_CLZ, MASK_CLZ, match_opcode, 0 },\n+{\"ctz\",       0, INSN_CLASS_ZBB,   \"d,s\",  MATCH_CTZ, MASK_CTZ, match_opcode, 0 },\n+{\"cpop\",      0, INSN_CLASS_ZBB,   \"d,s\",  MATCH_CPOP, MASK_CPOP, match_opcode, 0 },\n+{\"min\",       0, INSN_CLASS_ZBB,   \"d,s,t\",  MATCH_MIN, MASK_MIN, match_opcode, 0 },\n+{\"max\",       0, INSN_CLASS_ZBB,   \"d,s,t\",  MATCH_MAX, MASK_MAX, match_opcode, 0 },\n+{\"minu\",      0, INSN_CLASS_ZBB,   \"d,s,t\",  MATCH_MINU, MASK_MINU, match_opcode, 0 },\n+{\"maxu\",      0, INSN_CLASS_ZBB,   \"d,s,t\",  MATCH_MAXU, MASK_MAXU, match_opcode, 0 },\n+{\"sext.b\",    0, INSN_CLASS_ZBB,   \"d,s\",  MATCH_SEXT_B, MASK_SEXT_B, match_opcode, 0 },\n+{\"sext.b\",    0, INSN_CLASS_I,     \"d,s\",  0, (int) M_SEXTB,  match_never, INSN_MACRO },\n+{\"sext.h\",    0, INSN_CLASS_ZBB,   \"d,s\",  MATCH_SEXT_H, MASK_SEXT_H, match_opcode, 0 },\n+{\"sext.h\",    0, INSN_CLASS_I,     \"d,s\",  0, (int) M_SEXTH,  match_never, INSN_MACRO },\n+{\"zext.h\",   32, INSN_CLASS_ZBB,   \"d,s\",  MATCH_PACK, MASK_PACK | MASK_RS2, match_opcode, 0 },\n+{\"zext.h\",   64, INSN_CLASS_ZBB,   \"d,s\",  MATCH_PACKW, MASK_PACKW | MASK_RS2, match_opcode, 0 },\n+{\"zext.h\",    0, INSN_CLASS_I,     \"d,s\",  0, (int) M_ZEXTH,  match_never, INSN_MACRO },\n+{\"andn\",      0, INSN_CLASS_ZBB,   \"d,s,t\",  MATCH_ANDN, MASK_ANDN, match_opcode, 0 },\n+{\"orn\",       0, INSN_CLASS_ZBB,   \"d,s,t\",  MATCH_ORN, MASK_ORN, match_opcode, 0 },\n+{\"xnor\",      0, INSN_CLASS_ZBB,   \"d,s,t\",  MATCH_XNOR, MASK_XNOR, match_opcode, 0 },\n+{\"rori\",      0, INSN_CLASS_ZBB,   \"d,s,>\",  MATCH_RORI, MASK_RORI, match_opcode, 0 },\n+{\"ror\",       0, INSN_CLASS_ZBB,   \"d,s,t\",  MATCH_ROR, MASK_ROR, match_opcode, 0 },\n+{\"ror\",       0, INSN_CLASS_ZBB,   \"d,s,>\",  MATCH_RORI, MASK_RORI, match_opcode, INSN_ALIAS },\n+{\"rol\",       0, INSN_CLASS_ZBB,   \"d,s,t\",  MATCH_ROL, MASK_ROL, match_opcode, 0 },\n+{\"clzw\",     64, INSN_CLASS_ZBB,   \"d,s\",  MATCH_CLZW, MASK_CLZW, match_opcode, 0 },\n+{\"ctzw\",     64, INSN_CLASS_ZBB,   \"d,s\",  MATCH_CTZW, MASK_CTZW, match_opcode, 0 },\n+{\"cpopw\",    64, INSN_CLASS_ZBB,   \"d,s\",  MATCH_CPOPW, MASK_CPOPW, match_opcode, 0 },\n+{\"roriw\",    64, INSN_CLASS_ZBB,   \"d,s,<\",  MATCH_RORIW, MASK_RORIW, match_opcode, 0 },\n+{\"rorw\",     64, INSN_CLASS_ZBB,   \"d,s,t\",  MATCH_RORW, MASK_RORW, match_opcode, 0 },\n+{\"rorw\",     64, INSN_CLASS_ZBB,   \"d,s,<\",  MATCH_RORIW, MASK_RORIW, match_opcode, INSN_ALIAS },\n+{\"rolw\",     64, INSN_CLASS_ZBB,   \"d,s,t\",  MATCH_ROLW, MASK_ROLW, match_opcode, 0 },\n+{\"rev8\",     32, INSN_CLASS_ZBB,   \"d,s\",  MATCH_GREVI | ENCODE_ITYPE_IMM (0x18), MASK_GREVI | MASK_RVB_IMM, match_opcode, 0 },\n+{\"rev8\",     64, INSN_CLASS_ZBB,   \"d,s\",  MATCH_GREVI | ENCODE_ITYPE_IMM (0x38), MASK_GREVI | MASK_RVB_IMM, match_opcode, 0 },\n+{\"orc.b\",     0, INSN_CLASS_ZBB,   \"d,s\",  MATCH_GORCI | ENCODE_ITYPE_IMM (0x7), MASK_GORCI | MASK_RVB_IMM, match_opcode, 0 },\n+\n+{\"clmul\",     0, INSN_CLASS_ZBC,   \"d,s,t\",  MATCH_CLMUL, MASK_CLMUL, match_opcode, 0 },\n+{\"clmulh\",    0, INSN_CLASS_ZBC,   \"d,s,t\",  MATCH_CLMULH, MASK_CLMULH, match_opcode, 0 },\n+{\"clmulr\",    0, INSN_CLASS_ZBC,   \"d,s,t\",  MATCH_CLMULR, MASK_CLMULR, match_opcode, 0 },\n+\n /* Single-precision floating-point instruction subset */\n {\"frcsr\",     0, INSN_CLASS_F,   \"d\",  MATCH_FRCSR, MASK_FRCSR, match_opcode, INSN_ALIAS },\n {\"frsr\",      0, INSN_CLASS_F,   \"d\",  MATCH_FRCSR, MASK_FRCSR, match_opcode, INSN_ALIAS },\n@@ -932,6 +977,10 @@ const struct riscv_ext_version riscv_ext_version_table[] =\n {\"zifencei\", ISA_SPEC_CLASS_20191213, 2, 0},\n {\"zifencei\", ISA_SPEC_CLASS_20190608, 2, 0},\n \n+{\"zba\", ISA_SPEC_CLASS_DRAFT, 0, 93},\n+{\"zbb\", ISA_SPEC_CLASS_DRAFT, 0, 93},\n+{\"zbc\", ISA_SPEC_CLASS_DRAFT, 0, 93},\n+\n /* Terminate the list.  */\n {NULL, 0, 0, 0}\n };"
    }
  ]
}