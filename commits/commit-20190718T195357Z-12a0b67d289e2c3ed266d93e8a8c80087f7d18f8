{
  "sha": "12a0b67d289e2c3ed266d93e8a8c80087f7d18f8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTJhMGI2N2QyODllMmMzZWQyNjZkOTNlOGE4YzgwMDg3ZjdkMThmOA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-07-18T17:44:21Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-07-18T19:53:57Z"
    },
    "message": "libctf: introduce ctf_func_type_{info,args}, ctf_type_aname_raw\n\nThe first two of these allow you to get function type info and args out\nof the types section give a type ID: astonishingly, this was missing\nfrom libctf before now: so even though types of kind CTF_K_FUNCTION were\nsupported, you couldn't find out anything about them.  (The existing\nctf_func_info and ctf_func_args only allow you to get info about\nfunctions in the function section, i.e. given symbol table indexes, not\ntype IDs.)\n\nThe second of these allows you to get the raw undecorated name out of\nthe CTF section (strdupped for safety) without traversing subtypes to\nbuild a full C identifier out of it.  It's useful for things that are\nalready tracking the type kind etc and just need an unadorned name.\n\ninclude/\n\t* ctf-api.h (ECTF_NOTFUNC): Fix description.\n\t(ctf_func_type_info): New.\n\t(ctf_func_type_args): Likewise.\nlibctf/\n\t* ctf-types.c (ctf_type_aname_raw): New.\n\t(ctf_func_type_info): Likewise.\n\t(ctf_func_type_args): Likewise.\n\t* ctf-error.c (_ctf_errlist): Fix description.",
    "tree": {
      "sha": "b1319f5db30360a534b3ef60c07cf2b8f2be49ec",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b1319f5db30360a534b3ef60c07cf2b8f2be49ec"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "afe09f0b6311a4dd1a7e2dc6491550bb228734f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/afe09f0b6311a4dd1a7e2dc6491550bb228734f8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/afe09f0b6311a4dd1a7e2dc6491550bb228734f8"
    }
  ],
  "stats": {
    "total": 109,
    "additions": 106,
    "deletions": 3
  },
  "files": [
    {
      "sha": "07e0c5c34adf38e25a8d024c08acc6d8964068df",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=12a0b67d289e2c3ed266d93e8a8c80087f7d18f8",
      "patch": "@@ -1,3 +1,10 @@\n+2019-07-18  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-api.h (ECTF_NOTFUNC): Fix description.\n+\t(ctf_func_type_info): New.\n+\t(ctf_func_type_args): Likewise.\n+\t(ctf_type_aname_raw): Likewise.\n+\n 2019-07-16  Jan Beulich  <jbeulich@suse.com>\n \n \t* opcode/i386.h (POP_SEG386_SHORT): New."
    },
    {
      "sha": "1a0d47eae16fbf66461862a635a4a1734d4f0070",
      "filename": "include/ctf-api.h",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/include/ctf-api.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/include/ctf-api.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf-api.h?ref=12a0b67d289e2c3ed266d93e8a8c80087f7d18f8",
      "patch": "@@ -160,7 +160,7 @@ enum\n    ECTF_NAMELEN,\t\t/* Buffer is too small to hold type name.  */\n    ECTF_NOTYPE,\t\t\t/* No type found corresponding to name.  */\n    ECTF_SYNTAX,\t\t\t/* Syntax error in type name.  */\n-   ECTF_NOTFUNC,\t\t/* Symtab entry does not refer to a function.  */\n+   ECTF_NOTFUNC,\t\t/* Symbol entry or type is not a function.  */\n    ECTF_NOFUNCDAT,\t\t/* No func info available for function.  */\n    ECTF_NOTDATA,\t\t/* Symtab entry does not refer to a data obj.  */\n    ECTF_NOTYPEDAT,\t\t/* No type info available for object.  */\n@@ -277,13 +277,16 @@ extern int ctf_version (int);\n \n extern int ctf_func_info (ctf_file_t *, unsigned long, ctf_funcinfo_t *);\n extern int ctf_func_args (ctf_file_t *, unsigned long, uint32_t, ctf_id_t *);\n+extern int ctf_func_type_info (ctf_file_t *, ctf_id_t, ctf_funcinfo_t *);\n+extern int ctf_func_type_args (ctf_file_t *, ctf_id_t, uint32_t, ctf_id_t *);\n \n extern ctf_id_t ctf_lookup_by_name (ctf_file_t *, const char *);\n extern ctf_id_t ctf_lookup_by_symbol (ctf_file_t *, unsigned long);\n extern ctf_id_t ctf_lookup_variable (ctf_file_t *, const char *);\n \n extern ctf_id_t ctf_type_resolve (ctf_file_t *, ctf_id_t);\n extern char *ctf_type_aname (ctf_file_t *, ctf_id_t);\n+extern char *ctf_type_aname_raw (ctf_file_t *, ctf_id_t);\n extern ssize_t ctf_type_lname (ctf_file_t *, ctf_id_t, char *, size_t);\n extern char *ctf_type_name (ctf_file_t *, ctf_id_t, char *, size_t);\n extern ssize_t ctf_type_size (ctf_file_t *, ctf_id_t);"
    },
    {
      "sha": "41707625747146215083234f1ef5c92fec089157",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=12a0b67d289e2c3ed266d93e8a8c80087f7d18f8",
      "patch": "@@ -1,3 +1,11 @@\n+2019-07-18  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-types.c (ctf_type_aname_raw): New.\n+\t(ctf_func_type_info): Likewise.\n+\t(ctf_func_type_args): Likewise.\n+\t* ctf-error.c (_ctf_errlist): Fix description.\n+\t* ctf-lookup.c: Fix file description.\n+\n 2019-06-28  Nick Alcock <nick.alcock@oracle.com>\n \n \t* ctf-create.c (ctf_create): Fix off-by-one error."
    },
    {
      "sha": "660a30aa64fb1a8ef16e700be843d2445a92d4b1",
      "filename": "libctf/ctf-error.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/libctf/ctf-error.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/libctf/ctf-error.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-error.c?ref=12a0b67d289e2c3ed266d93e8a8c80087f7d18f8",
      "patch": "@@ -48,7 +48,7 @@ static const char *const _ctf_errlist[] = {\n   \"Input buffer is too small for type name\",\t     /* ECTF_NAMELEN */\n   \"No type information available for that name\",     /* ECTF_NOTYPE */\n   \"Syntax error in type name\",\t\t\t     /* ECTF_SYNTAX */\n-  \"Symbol table entry is not a function\",\t     /* ECTF_NOTFUNC */\n+  \"Symbol table entry or type is not a function\",    /* ECTF_NOTFUNC */\n   \"No function information available for symbol\",    /* ECTF_NOFUNCDAT */\n   \"Symbol table entry is not a data object\",\t     /* ECTF_NOTDATA */\n   \"No type information available for symbol\",\t     /* ECTF_NOTYPEDAT */"
    },
    {
      "sha": "40eaf9c819dcadcb36ab4570a646c3e81836d289",
      "filename": "libctf/ctf-lookup.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/libctf/ctf-lookup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/libctf/ctf-lookup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-lookup.c?ref=12a0b67d289e2c3ed266d93e8a8c80087f7d18f8",
      "patch": "@@ -1,4 +1,4 @@\n-/* Type lookup.\n+/* Symbol, variable and name lookup.\n    Copyright (C) 2019 Free Software Foundation, Inc.\n \n    This file is part of libctf."
    },
    {
      "sha": "5068ff16a560334e887e077bc0c600fa1d8ca447",
      "filename": "libctf/ctf-types.c",
      "status": "modified",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/libctf/ctf-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/12a0b67d289e2c3ed266d93e8a8c80087f7d18f8/libctf/ctf-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-types.c?ref=12a0b67d289e2c3ed266d93e8a8c80087f7d18f8",
      "patch": "@@ -369,6 +369,23 @@ ctf_type_name (ctf_file_t *fp, ctf_id_t type, char *buf, size_t len)\n   return (rv >= 0 && (size_t) rv < len ? buf : NULL);\n }\n \n+/* Lookup the given type ID and return its raw, unadorned, undecorated name as a\n+   new dynamcally-allocated string.  */\n+\n+char *\n+ctf_type_aname_raw (ctf_file_t *fp, ctf_id_t type)\n+{\n+  const ctf_type_t *tp;\n+\n+  if ((tp = ctf_lookup_by_id (&fp, type)) == NULL)\n+    return NULL;\t\t/* errno is set for us.  */\n+\n+  if (ctf_strraw (fp, tp->ctt_name) != NULL)\n+    return strdup (ctf_strraw (fp, tp->ctt_name));\n+\n+  return NULL;\n+}\n+\n /* Resolve the type down to a base type node, and then return the size\n    of the type storage in bytes.  */\n \n@@ -948,6 +965,74 @@ ctf_enum_value (ctf_file_t * fp, ctf_id_t type, const char *name, int *valp)\n   return -1;\n }\n \n+/* Given a type ID relating to a function type, return info on return types and\n+   arg counts for that function.  */\n+\n+int\n+ctf_func_type_info (ctf_file_t *fp, ctf_id_t type, ctf_funcinfo_t *fip)\n+{\n+  const ctf_type_t *tp;\n+  uint32_t kind;\n+  const uint32_t *args;\n+  ssize_t size, increment;\n+\n+  if ((type = ctf_type_resolve (fp, type)) == CTF_ERR)\n+    return -1;\t\t\t/* errno is set for us.  */\n+\n+  if ((tp = ctf_lookup_by_id (&fp, type)) == NULL)\n+    return -1;\t\t\t/* errno is set for us.  */\n+\n+  (void) ctf_get_ctt_size (fp, tp, &size, &increment);\n+  kind = LCTF_INFO_KIND (fp, tp->ctt_info);\n+\n+  if (kind != CTF_K_FUNCTION)\n+    return (ctf_set_errno (fp, ECTF_NOTFUNC));\n+\n+  fip->ctc_return = tp->ctt_type;\n+  fip->ctc_argc = LCTF_INFO_VLEN (fp, tp->ctt_info);\n+  fip->ctc_flags = 0;\n+\n+  args = (uint32_t *) ((uintptr_t) tp + increment);\n+\n+  if (fip->ctc_argc != 0 && args[fip->ctc_argc - 1] == 0)\n+    {\n+      fip->ctc_flags |= CTF_FUNC_VARARG;\n+      fip->ctc_argc--;\n+    }\n+\n+  return 0;\n+}\n+\n+/* Given a type ID relating to a function type,, return the arguments for the\n+   function.  */\n+\n+int\n+ctf_func_type_args (ctf_file_t *fp, ctf_id_t type, uint32_t argc, ctf_id_t *argv)\n+{\n+  const ctf_type_t *tp;\n+  const uint32_t *args;\n+  ssize_t size, increment;\n+  ctf_funcinfo_t f;\n+\n+  if (ctf_func_type_info (fp, type, &f) < 0)\n+    return -1;\t\t\t/* errno is set for us.  */\n+\n+  if ((type = ctf_type_resolve (fp, type)) == CTF_ERR)\n+    return -1;\t\t\t/* errno is set for us.  */\n+\n+  if ((tp = ctf_lookup_by_id (&fp, type)) == NULL)\n+    return -1;\t\t\t/* errno is set for us.  */\n+\n+  (void) ctf_get_ctt_size (fp, tp, &size, &increment);\n+\n+  args = (uint32_t *) ((uintptr_t) tp + increment);\n+\n+  for (argc = MIN (argc, f.ctc_argc); argc != 0; argc--)\n+    *argv++ = *args++;\n+\n+  return 0;\n+}\n+\n /* Recursively visit the members of any type.  This function is used as the\n    engine for ctf_type_visit, below.  We resolve the input type, recursively\n    invoke ourself for each type member if the type is a struct or union, and"
    }
  ]
}