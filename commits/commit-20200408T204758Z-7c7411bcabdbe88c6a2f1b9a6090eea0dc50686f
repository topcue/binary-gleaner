{
  "sha": "7c7411bcabdbe88c6a2f1b9a6090eea0dc50686f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2M3NDExYmNhYmRiZTg4YzZhMmYxYjlhNjA5MGVlYTBkYzUwNjg2Zg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:58Z"
    },
    "message": "Use lwp, not tid, for Windows thread id\n\nThis changes windows-nat.c to put the Windows thread id into the \"lwp\"\nfield of ptid_t, not the \"tid\" field.  This is done for two reasons.\n\nFirst, ptid.h has this to say:\n\n   process_stratum targets that handle threading themselves should\n   prefer using the ptid.lwp field, leaving the ptid.tid field for any\n   thread_stratum target that might want to sit on top.\n\nSecond, this change brings gdb and gdbserver into sync here, which\nmakes sharing code simpler.\n\ngdb/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (windows_add_thread, windows_delete_thread)\n\t(windows_nat_target::fetch_registers)\n\t(windows_nat_target::store_registers, fake_create_process)\n\t(windows_nat_target::resume, windows_nat_target::resume)\n\t(get_windows_debug_event, windows_nat_target::wait)\n\t(windows_nat_target::pid_to_str)\n\t(windows_nat_target::get_tib_address)\n\t(windows_nat_target::get_ada_task_ptid)\n\t(windows_nat_target::thread_name)\n\t(windows_nat_target::thread_alive): Use lwp, not tid.",
    "tree": {
      "sha": "30be965ffcd19194e86b602ec42c8c39a3e2a0d1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/30be965ffcd19194e86b602ec42c8c39a3e2a0d1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7c7411bcabdbe88c6a2f1b9a6090eea0dc50686f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c7411bcabdbe88c6a2f1b9a6090eea0dc50686f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7c7411bcabdbe88c6a2f1b9a6090eea0dc50686f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c7411bcabdbe88c6a2f1b9a6090eea0dc50686f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2950fdf7423a404f6ebc691606d04917fd68228a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2950fdf7423a404f6ebc691606d04917fd68228a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2950fdf7423a404f6ebc691606d04917fd68228a"
    }
  ],
  "stats": {
    "total": 67,
    "additions": 40,
    "deletions": 27
  },
  "files": [
    {
      "sha": "c9885942a719e31c2e814d11fde3c6ad2f341188",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c7411bcabdbe88c6a2f1b9a6090eea0dc50686f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c7411bcabdbe88c6a2f1b9a6090eea0dc50686f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7c7411bcabdbe88c6a2f1b9a6090eea0dc50686f",
      "patch": "@@ -1,3 +1,16 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (windows_add_thread, windows_delete_thread)\n+\t(windows_nat_target::fetch_registers)\n+\t(windows_nat_target::store_registers, fake_create_process)\n+\t(windows_nat_target::resume, windows_nat_target::resume)\n+\t(get_windows_debug_event, windows_nat_target::wait)\n+\t(windows_nat_target::pid_to_str)\n+\t(windows_nat_target::get_tib_address)\n+\t(windows_nat_target::get_ada_task_ptid)\n+\t(windows_nat_target::thread_name)\n+\t(windows_nat_target::thread_alive): Use lwp, not tid.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* windows-nat.c (handle_exception)"
    },
    {
      "sha": "d2e900c2387aa16c0bf48a4bd8389b7a781ea01d",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 27,
      "deletions": 27,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c7411bcabdbe88c6a2f1b9a6090eea0dc50686f/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c7411bcabdbe88c6a2f1b9a6090eea0dc50686f/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=7c7411bcabdbe88c6a2f1b9a6090eea0dc50686f",
      "patch": "@@ -461,9 +461,9 @@ windows_add_thread (ptid_t ptid, HANDLE h, void *tlb, bool main_thread_p)\n   windows_thread_info *th;\n   DWORD id;\n \n-  gdb_assert (ptid.tid () != 0);\n+  gdb_assert (ptid.lwp () != 0);\n \n-  id = ptid.tid ();\n+  id = ptid.lwp ();\n \n   if ((th = thread_rec (id, FALSE)))\n     return th;\n@@ -551,9 +551,9 @@ windows_delete_thread (ptid_t ptid, DWORD exit_code, bool main_thread_p)\n {\n   DWORD id;\n \n-  gdb_assert (ptid.tid () != 0);\n+  gdb_assert (ptid.lwp () != 0);\n \n-  id = ptid.tid ();\n+  id = ptid.lwp ();\n \n   /* Emit a notification about the thread being deleted.\n \n@@ -636,7 +636,7 @@ windows_fetch_one_register (struct regcache *regcache,\n void\n windows_nat_target::fetch_registers (struct regcache *regcache, int r)\n {\n-  DWORD tid = regcache->ptid ().tid ();\n+  DWORD tid = regcache->ptid ().lwp ();\n   windows_thread_info *th = thread_rec (tid, TRUE);\n \n   /* Check if TH exists.  Windows sometimes uses a non-existent\n@@ -732,7 +732,7 @@ windows_store_one_register (const struct regcache *regcache,\n void\n windows_nat_target::store_registers (struct regcache *regcache, int r)\n {\n-  DWORD tid = regcache->ptid ().tid ();\n+  DWORD tid = regcache->ptid ().lwp ();\n   windows_thread_info *th = thread_rec (tid, TRUE);\n \n   /* Check if TH exists.  Windows sometimes uses a non-existent\n@@ -1549,8 +1549,8 @@ fake_create_process (void)\n       /*  We can not debug anything in that case.  */\n     }\n   current_thread\n-    = windows_add_thread (ptid_t (current_event.dwProcessId, 0,\n-\t\t\t\t  current_event.dwThreadId),\n+    = windows_add_thread (ptid_t (current_event.dwProcessId,\n+\t\t\t\t  current_event.dwThreadId, 0),\n \t\t\t  current_event.u.CreateThread.hThread,\n \t\t\t  current_event.u.CreateThread.lpThreadLocalBase,\n \t\t\t  true /* main_thread_p */);\n@@ -1607,10 +1607,10 @@ windows_nat_target::resume (ptid_t ptid, int step, enum gdb_signal sig)\n   last_sig = GDB_SIGNAL_0;\n \n   DEBUG_EXEC ((\"gdb: windows_resume (pid=%d, tid=0x%x, step=%d, sig=%d);\\n\",\n-\t       ptid.pid (), (unsigned) ptid.tid (), step, sig));\n+\t       ptid.pid (), (unsigned) ptid.lwp (), step, sig));\n \n   /* Get context for currently selected thread.  */\n-  th = thread_rec (inferior_ptid.tid (), FALSE);\n+  th = thread_rec (inferior_ptid.lwp (), FALSE);\n   if (th)\n     {\n #ifdef __x86_64__\n@@ -1675,7 +1675,7 @@ windows_nat_target::resume (ptid_t ptid, int step, enum gdb_signal sig)\n   if (resume_all)\n     windows_continue (continue_status, -1, 0);\n   else\n-    windows_continue (continue_status, ptid.tid (), 0);\n+    windows_continue (continue_status, ptid.lwp (), 0);\n }\n \n /* Ctrl-C handler used when the inferior is not run in the same console.  The\n@@ -1754,7 +1754,7 @@ windows_nat_target::get_windows_debug_event (int pid,\n       /* Record the existence of this thread.  */\n       thread_id = current_event.dwThreadId;\n       th = windows_add_thread\n-        (ptid_t (current_event.dwProcessId, 0, current_event.dwThreadId),\n+        (ptid_t (current_event.dwProcessId, current_event.dwThreadId, 0),\n \t current_event.u.CreateThread.hThread,\n \t current_event.u.CreateThread.lpThreadLocalBase,\n \t false /* main_thread_p */);\n@@ -1766,8 +1766,8 @@ windows_nat_target::get_windows_debug_event (int pid,\n \t\t     (unsigned) current_event.dwProcessId,\n \t\t     (unsigned) current_event.dwThreadId,\n \t\t     \"EXIT_THREAD_DEBUG_EVENT\"));\n-      windows_delete_thread (ptid_t (current_event.dwProcessId, 0,\n-\t\t\t\t     current_event.dwThreadId),\n+      windows_delete_thread (ptid_t (current_event.dwProcessId,\n+\t\t\t\t     current_event.dwThreadId, 0),\n \t\t\t     current_event.u.ExitThread.dwExitCode,\n \t\t\t     false /* main_thread_p */);\n       th = &dummy_thread_info;\n@@ -1785,8 +1785,8 @@ windows_nat_target::get_windows_debug_event (int pid,\n       current_process_handle = current_event.u.CreateProcessInfo.hProcess;\n       /* Add the main thread.  */\n       th = windows_add_thread\n-        (ptid_t (current_event.dwProcessId, 0,\n-\t\t current_event.dwThreadId),\n+        (ptid_t (current_event.dwProcessId,\n+\t\t current_event.dwThreadId, 0),\n \t current_event.u.CreateProcessInfo.hThread,\n \t current_event.u.CreateProcessInfo.lpThreadLocalBase,\n \t true /* main_thread_p */);\n@@ -1807,8 +1807,8 @@ windows_nat_target::get_windows_debug_event (int pid,\n \t}\n       else if (saw_create == 1)\n \t{\n-\t  windows_delete_thread (ptid_t (current_event.dwProcessId, 0,\n-\t\t\t\t\t current_event.dwThreadId),\n+\t  windows_delete_thread (ptid_t (current_event.dwProcessId,\n+\t\t\t\t\t current_event.dwThreadId, 0),\n \t\t\t\t 0, true /* main_thread_p */);\n \t  DWORD exit_status = current_event.u.ExitProcess.dwExitCode;\n \t  /* If the exit status looks like a fatal exception, but we\n@@ -1907,7 +1907,7 @@ windows_nat_target::get_windows_debug_event (int pid,\n     }\n   else\n     {\n-      inferior_ptid = ptid_t (current_event.dwProcessId, 0, thread_id);\n+      inferior_ptid = ptid_t (current_event.dwProcessId, thread_id, 0);\n       current_thread = th;\n       if (!current_thread)\n \tcurrent_thread = thread_rec (thread_id, TRUE);\n@@ -1965,7 +1965,7 @@ windows_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n       SetConsoleCtrlHandler (&ctrl_c_handler, FALSE);\n \n       if (retval)\n-\treturn ptid_t (current_event.dwProcessId, 0, retval);\n+\treturn ptid_t (current_event.dwProcessId, retval, 0);\n       else\n \t{\n \t  int detach = 0;\n@@ -3237,8 +3237,8 @@ windows_nat_target::close ()\n std::string\n windows_nat_target::pid_to_str (ptid_t ptid)\n {\n-  if (ptid.tid () != 0)\n-    return string_printf (\"Thread %d.0x%lx\", ptid.pid (), ptid.tid ());\n+  if (ptid.lwp () != 0)\n+    return string_printf (\"Thread %d.0x%lx\", ptid.pid (), ptid.lwp ());\n \n   return normal_pid_to_str (ptid);\n }\n@@ -3372,7 +3372,7 @@ windows_nat_target::get_tib_address (ptid_t ptid, CORE_ADDR *addr)\n {\n   windows_thread_info *th;\n \n-  th = thread_rec (ptid.tid (), 0);\n+  th = thread_rec (ptid.lwp (), 0);\n   if (th == NULL)\n     return false;\n \n@@ -3385,15 +3385,15 @@ windows_nat_target::get_tib_address (ptid_t ptid, CORE_ADDR *addr)\n ptid_t\n windows_nat_target::get_ada_task_ptid (long lwp, long thread)\n {\n-  return ptid_t (inferior_ptid.pid (), 0, lwp);\n+  return ptid_t (inferior_ptid.pid (), lwp, 0);\n }\n \n /* Implementation of the to_thread_name method.  */\n \n const char *\n windows_nat_target::thread_name (struct thread_info *thr)\n {\n-  return thread_rec (thr->ptid.tid (), 0)->name.get ();\n+  return thread_rec (thr->ptid.lwp (), 0)->name.get ();\n }\n \n \n@@ -3554,8 +3554,8 @@ windows_nat_target::thread_alive (ptid_t ptid)\n {\n   int tid;\n \n-  gdb_assert (ptid.tid () != 0);\n-  tid = ptid.tid ();\n+  gdb_assert (ptid.lwp () != 0);\n+  tid = ptid.lwp ();\n \n   return WaitForSingleObject (thread_rec (tid, FALSE)->h, 0) != WAIT_OBJECT_0;\n }"
    }
  ]
}