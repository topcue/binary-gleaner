{
  "sha": "f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjhiYWIyZDYxZDg0YjRlMTIyY2E2NjdjNGU0NThjZDJjYTI5ZTNiNg==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-11-18T22:37:31Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-11-22T17:42:41Z"
    },
    "message": "Create a correctly-sized demangled names hashtable\n\nIf we have a minsym count, we know the demangled names hashtable will\nbe at least that big.  So use that count to size it, so we don't\nhave to resize/rehash it as much.\n\nThis is a 6% improvement in minsym loading time.\n\n2019-11-22  Christian Biesinger  <cbiesinger@google.com>\n\n\t* symtab.c (create_demangled_names_hash): Use per_bfd->\n\tminimal_symbol_count for computing the initial size, if greater\n\tthan our default size.\n\nChange-Id: I1f074d38e1d90af58705ec852f90c84cc034cd2e",
    "tree": {
      "sha": "05b3a9dc41b308d031b3ed2b084a0f52fecf2001",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/05b3a9dc41b308d031b3ed2b084a0f52fecf2001"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "85e7588dc4b191326f90d4e2358566d9cc14242a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85e7588dc4b191326f90d4e2358566d9cc14242a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/85e7588dc4b191326f90d4e2358566d9cc14242a"
    }
  ],
  "stats": {
    "total": 20,
    "additions": 18,
    "deletions": 2
  },
  "files": [
    {
      "sha": "838262eba3e7036f443b2beb7c2da7e52185a2ee",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6",
      "patch": "@@ -1,3 +1,9 @@\n+2019-11-22  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* symtab.c (create_demangled_names_hash): Use per_bfd->\n+\tminimal_symbol_count for computing the initial size, if greater\n+\tthan our default size.\n+\n 2019-11-22  Tom de Vries  <tdevries@suse.de>\n \n \t* contrib/words.sh: Improve words extraction."
    },
    {
      "sha": "6affdef58c5f4f886c84e361dcacdef74185338b",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=f8bab2d61d84b4e122ca667c4e458cd2ca29e3b6",
      "patch": "@@ -770,10 +770,20 @@ create_demangled_names_hash (struct objfile_per_bfd_storage *per_bfd)\n   /* Choose 256 as the starting size of the hash table, somewhat arbitrarily.\n      The hash table code will round this up to the next prime number.\n      Choosing a much larger table size wastes memory, and saves only about\n-     1% in symbol reading.  */\n+     1% in symbol reading.  However, if the minsym count is already\n+     initialized (e.g. because symbol name setting was deferred to\n+     a background thread) we can initialize the hashtable with a count\n+     based on that, because we will almost certainly have at least that\n+     many entries.  If we have a nonzero number but less than 256,\n+     we still stay with 256 to have some space for psymbols, etc.  */\n+\n+  /* htab will expand the table when it is 3/4th full, so we account for that\n+     here.  +2 to round up.  */\n+  int minsym_based_count = (per_bfd->minimal_symbol_count + 2) / 3 * 4;\n+  int count = std::max (per_bfd->minimal_symbol_count, minsym_based_count);\n \n   per_bfd->demangled_names_hash.reset (htab_create_alloc\n-    (256, hash_demangled_name_entry, eq_demangled_name_entry,\n+    (count, hash_demangled_name_entry, eq_demangled_name_entry,\n      free_demangled_name_entry, xcalloc, xfree));\n }\n "
    }
  ]
}