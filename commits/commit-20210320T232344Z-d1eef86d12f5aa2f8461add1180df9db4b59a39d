{
  "sha": "d1eef86d12f5aa2f8461add1180df9db4b59a39d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDFlZWY4NmQxMmY1YWEyZjg0NjFhZGQxMTgwZGY5ZGI0YjU5YTM5ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:44Z"
    },
    "message": "Introduce objfile::require_partial_symbols\n\nThis adds a new method, objfile::require_partial_symbols.  This reuses\nmost of the code from the old function in psymtab.c.  That function is\nnow made static, and simplified.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* symfile.c (read_symbols): Use objfile method.\n\t* symfile-debug.c (objfile::require_partial_symbols): New method.\n\t* psymtab.h (require_partial_symbols): Don't declare.\n\t* psymtab.c (require_partial_symbols): Use objfile method.  Now\n\tstatic.\n\t(psymbol_functions::map_symtabs_matching_filename, OBJFILE)\n\t(psymbol_functions::lookup_symbol)\n\t(psymbol_functions::lookup_global_symbol_language)\n\t(psymbol_functions::find_last_source_symtab)\n\t(psymbol_functions::forget_cached_source_info)\n\t(psymbol_functions::print_stats)\n\t(psymbol_functions::expand_symtabs_for_function)\n\t(psymbol_functions::expand_all_symtabs)\n\t(psymbol_functions::expand_symtabs_with_fullname)\n\t(psymbol_functions::map_symbol_filenames)\n\t(psymbol_functions::map_matching_symbols)\n\t(psymbol_functions::expand_symtabs_matching)\n\t(psymbol_functions::find_compunit_symtab_by_address)\n\t(maintenance_print_psymbols, maintenance_info_psymtabs)\n\t(maintenance_check_psymtabs): Update.\n\t* objfiles.h (struct objfile) <require_partial_symbols>: Declare\n\tnew method.",
    "tree": {
      "sha": "085a1f465fc21fd51c7d8b03fa35e44bc660a1f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/085a1f465fc21fd51c7d8b03fa35e44bc660a1f6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d1eef86d12f5aa2f8461add1180df9db4b59a39d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d1eef86d12f5aa2f8461add1180df9db4b59a39d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d1eef86d12f5aa2f8461add1180df9db4b59a39d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d1eef86d12f5aa2f8461add1180df9db4b59a39d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eb00e4686dd1a1530737e2de7eae971d61332da1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb00e4686dd1a1530737e2de7eae971d61332da1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/eb00e4686dd1a1530737e2de7eae971d61332da1"
    }
  ],
  "stats": {
    "total": 124,
    "additions": 75,
    "deletions": 49
  },
  "files": [
    {
      "sha": "f647ac487391cea9ed8857c510e7c6fb6e9ee1e6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d1eef86d12f5aa2f8461add1180df9db4b59a39d",
      "patch": "@@ -1,3 +1,28 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* symfile.c (read_symbols): Use objfile method.\n+\t* symfile-debug.c (objfile::require_partial_symbols): New method.\n+\t* psymtab.h (require_partial_symbols): Don't declare.\n+\t* psymtab.c (require_partial_symbols): Use objfile method.  Now\n+\tstatic.\n+\t(psymbol_functions::map_symtabs_matching_filename, OBJFILE)\n+\t(psymbol_functions::lookup_symbol)\n+\t(psymbol_functions::lookup_global_symbol_language)\n+\t(psymbol_functions::find_last_source_symtab)\n+\t(psymbol_functions::forget_cached_source_info)\n+\t(psymbol_functions::print_stats)\n+\t(psymbol_functions::expand_symtabs_for_function)\n+\t(psymbol_functions::expand_all_symtabs)\n+\t(psymbol_functions::expand_symtabs_with_fullname)\n+\t(psymbol_functions::map_symbol_filenames)\n+\t(psymbol_functions::map_matching_symbols)\n+\t(psymbol_functions::expand_symtabs_matching)\n+\t(psymbol_functions::find_compunit_symtab_by_address)\n+\t(maintenance_print_psymbols, maintenance_info_psymtabs)\n+\t(maintenance_check_psymtabs): Update.\n+\t* objfiles.h (struct objfile) <require_partial_symbols>: Declare\n+\tnew method.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* xcoffread.c (xcoff_sym_fns): Update."
    },
    {
      "sha": "c51217be6f06c4d842e3c1f59123f67e285680b0",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=d1eef86d12f5aa2f8461add1180df9db4b59a39d",
      "patch": "@@ -615,6 +615,9 @@ struct objfile\n \t\t\t\t\t       domain_enum domain,\n \t\t\t\t\t       bool *symbol_found_p);\n \n+  /* See quick_symbol_functions.  */\n+  void require_partial_symbols (bool verbose);\n+\n \n   /* The object file's original name as specified by the user,\n      made absolute, and tilde-expanded.  However, it is not canonicalized"
    },
    {
      "sha": "302ef9a192f43e4e9fc15e5b53647f29d7062e11",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 25,
      "deletions": 38,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=d1eef86d12f5aa2f8461add1180df9db4b59a39d",
      "patch": "@@ -75,28 +75,15 @@ psymtab_storage::install_psymtab (partial_symtab *pst)\n \n \f\n \n-/* See psymtab.h.  */\n+/* Ensure that the partial symbols for OBJFILE have been loaded.  This\n+   will print a message when symbols are loaded.  This function\n+   returns a range adapter suitable for iterating over the psymtabs of\n+   OBJFILE.  */\n \n-psymtab_storage::partial_symtab_range\n-require_partial_symbols (struct objfile *objfile, bool verbose)\n+static psymtab_storage::partial_symtab_range\n+require_partial_symbols (struct objfile *objfile)\n {\n-  if ((objfile->flags & OBJF_PSYMTABS_READ) == 0)\n-    {\n-      objfile->flags |= OBJF_PSYMTABS_READ;\n-\n-      if (objfile->qf->can_lazily_read_symbols ())\n-\t{\n-\t  if (verbose)\n-\t    printf_filtered (_(\"Reading symbols from %s...\\n\"),\n-\t\t\t     objfile_name (objfile));\n-\t  objfile->qf->read_partial_symbols (objfile);\n-\n-\t  if (verbose && !objfile_has_symbols (objfile))\n-\t    printf_filtered (_(\"(No debugging symbols found in %s)\\n\"),\n-\t\t\t     objfile_name (objfile));\n-\t}\n-    }\n-\n+  objfile->require_partial_symbols (true);\n   return objfile->psymtabs ();\n }\n \n@@ -140,7 +127,7 @@ psymbol_functions::map_symtabs_matching_filename\n {\n   const char *name_basename = lbasename (name);\n \n-  for (partial_symtab *pst : require_partial_symbols (objfile, true))\n+  for (partial_symtab *pst : require_partial_symbols (objfile))\n     {\n       /* Anonymous psymtabs don't have a file name.  */\n       if (pst->anonymous)\n@@ -342,7 +329,7 @@ find_pc_sect_psymtab (struct objfile *objfile,\n      its CUs may be missing in PSYMTABS_ADDRMAP as they may be varying\n      debug info type in single OBJFILE.  */\n \n-  for (partial_symtab *pst : require_partial_symbols (objfile, true))\n+  for (partial_symtab *pst : require_partial_symbols (objfile))\n     if (!pst->psymtabs_addrmap_supported\n \t&& pc >= pst->text_low (objfile) && pc < pst->text_high (objfile))\n       {\n@@ -465,7 +452,7 @@ psymbol_functions::lookup_symbol (struct objfile *objfile,\n \n   lookup_name_info psym_lookup_name = lookup_name.make_ignore_params ();\n \n-  for (partial_symtab *ps : require_partial_symbols (objfile, true))\n+  for (partial_symtab *ps : require_partial_symbols (objfile))\n     {\n       if (!ps->readin_p (objfile)\n \t  && lookup_partial_symbol (objfile, ps, psym_lookup_name,\n@@ -516,7 +503,7 @@ psymbol_functions::lookup_global_symbol_language (struct objfile *objfile,\n \n   lookup_name_info lookup_name (name, symbol_name_match_type::FULL);\n \n-  for (partial_symtab *ps : require_partial_symbols (objfile, true))\n+  for (partial_symtab *ps : require_partial_symbols (objfile))\n     {\n       struct partial_symbol *psym;\n       if (ps->readin_p (objfile))\n@@ -765,7 +752,7 @@ psymbol_functions::find_last_source_symtab (struct objfile *ofp)\n {\n   struct partial_symtab *cs_pst = NULL;\n \n-  for (partial_symtab *ps : require_partial_symbols (ofp, true))\n+  for (partial_symtab *ps : require_partial_symbols (ofp))\n     {\n       const char *name = ps->filename;\n       int len = strlen (name);\n@@ -801,7 +788,7 @@ psymbol_functions::find_last_source_symtab (struct objfile *ofp)\n void\n psymbol_functions::forget_cached_source_info (struct objfile *objfile)\n {\n-  for (partial_symtab *pst : require_partial_symbols (objfile, true))\n+  for (partial_symtab *pst : require_partial_symbols (objfile))\n     {\n       if (pst->fullname != NULL)\n \t{\n@@ -1008,7 +995,7 @@ psymbol_functions::print_stats (struct objfile *objfile, bool print_bcache)\n \t\t\t n_psyms);\n \n       i = 0;\n-      for (partial_symtab *ps : require_partial_symbols (objfile, true))\n+      for (partial_symtab *ps : require_partial_symbols (objfile))\n \t{\n \t  if (!ps->readin_p (objfile))\n \t    i++;\n@@ -1061,7 +1048,7 @@ psymbol_functions::expand_symtabs_for_function (struct objfile *objfile,\n   lookup_name_info base_lookup (func_name, symbol_name_match_type::FULL);\n   lookup_name_info lookup_name = base_lookup.make_ignore_params ();\n \n-  for (partial_symtab *ps : require_partial_symbols (objfile, true))\n+  for (partial_symtab *ps : require_partial_symbols (objfile))\n     {\n       if (ps->readin_p (objfile))\n \tcontinue;\n@@ -1080,7 +1067,7 @@ psymbol_functions::expand_symtabs_for_function (struct objfile *objfile,\n void\n psymbol_functions::expand_all_symtabs (struct objfile *objfile)\n {\n-  for (partial_symtab *psymtab : require_partial_symbols (objfile, true))\n+  for (partial_symtab *psymtab : require_partial_symbols (objfile))\n     psymtab_to_symtab (objfile, psymtab);\n }\n \n@@ -1091,7 +1078,7 @@ void\n psymbol_functions::expand_symtabs_with_fullname (struct objfile *objfile,\n \t\t\t\t\t\t const char *fullname)\n {\n-  for (partial_symtab *p : require_partial_symbols (objfile, true))\n+  for (partial_symtab *p : require_partial_symbols (objfile))\n     {\n       /* Anonymous psymtabs don't have a name of a source file.  */\n       if (p->anonymous)\n@@ -1115,7 +1102,7 @@ psymbol_functions::map_symbol_filenames (struct objfile *objfile,\n \t\t\t\t\t void *data,\n \t\t\t\t\t int need_fullname)\n {\n-  for (partial_symtab *ps : require_partial_symbols (objfile, true))\n+  for (partial_symtab *ps : require_partial_symbols (objfile))\n     {\n       const char *fullname;\n \n@@ -1196,7 +1183,7 @@ psymbol_functions::map_matching_symbols\n {\n   const int block_kind = global ? GLOBAL_BLOCK : STATIC_BLOCK;\n \n-  for (partial_symtab *ps : require_partial_symbols (objfile, true))\n+  for (partial_symtab *ps : require_partial_symbols (objfile))\n     {\n       QUIT;\n       if (ps->readin_p (objfile)\n@@ -1321,7 +1308,7 @@ psymbol_functions::expand_symtabs_matching\n    enum search_domain domain)\n {\n   /* Clear the search flags.  */\n-  for (partial_symtab *ps : require_partial_symbols (objfile, true))\n+  for (partial_symtab *ps : require_partial_symbols (objfile))\n     ps->searched_flag = PST_NOT_SEARCHED;\n \n   for (partial_symtab *ps : m_partial_symtabs->range ())\n@@ -1414,7 +1401,7 @@ psymbol_functions::find_compunit_symtab_by_address (struct objfile *objfile,\n     {\n       std::set<CORE_ADDR> seen_addrs;\n \n-      for (partial_symtab *pst : require_partial_symbols (objfile, true))\n+      for (partial_symtab *pst : require_partial_symbols (objfile))\n \t{\n \t  fill_psymbol_map (objfile, pst,\n \t\t\t    &seen_addrs,\n@@ -1861,7 +1848,7 @@ maintenance_print_psymbols (const char *args, int from_tty)\n \t}\n       else\n \t{\n-\t  for (partial_symtab *ps : require_partial_symbols (objfile, true))\n+\t  for (partial_symtab *ps : require_partial_symbols (objfile))\n \t    {\n \t      int print_for_source = 0;\n \n@@ -1892,7 +1879,7 @@ maintenance_print_psymbols (const char *args, int from_tty)\n \n       if (address_arg == NULL\n \t  && source_arg == NULL\n-\t  && objfile->partial_symtabs->psymtabs_addrmap != NULL)\n+\t  && partial_symtabs->psymtabs_addrmap != NULL)\n \t{\n \t  outfile->puts (\"\\n\");\n \t  dump_psymtab_addrmap (objfile, partial_symtabs, NULL, outfile);\n@@ -1925,7 +1912,7 @@ maintenance_info_psymtabs (const char *regexp, int from_tty)\n \t   actually find a symtab whose name matches.  */\n \tint printed_objfile_start = 0;\n \n-\tfor (partial_symtab *psymtab : require_partial_symbols (objfile, true))\n+\tfor (partial_symtab *psymtab : require_partial_symbols (objfile))\n \t  {\n \t    QUIT;\n \n@@ -2025,7 +2012,7 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n   const struct block *b;\n \n   for (objfile *objfile : current_program_space->objfiles ())\n-    for (partial_symtab *ps : require_partial_symbols (objfile, true))\n+    for (partial_symtab *ps : require_partial_symbols (objfile))\n       {\n \tstruct gdbarch *gdbarch = objfile->arch ();\n "
    },
    {
      "sha": "e19cac64aa449da7a51c09ba8a54eb4e48b43567",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=d1eef86d12f5aa2f8461add1180df9db4b59a39d",
      "patch": "@@ -146,14 +146,6 @@ class psymtab_storage\n };\n \n \n-/* Ensure that the partial symbols for OBJFILE have been loaded.  If\n-   VERBOSE is true, then this will print a message when symbols\n-   are loaded.  This function returns a range adapter suitable for\n-   iterating over the psymtabs of OBJFILE.  */\n-\n-extern psymtab_storage::partial_symtab_range require_partial_symbols\n-    (struct objfile *objfile, bool verbose);\n-\n extern quick_symbol_functions_up make_psymbol_functions\n      (const std::shared_ptr<psymtab_storage> &);\n "
    },
    {
      "sha": "99974536bf435910fffab82ea29ca58ae3908a3c",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=d1eef86d12f5aa2f8461add1180df9db4b59a39d",
      "patch": "@@ -357,6 +357,27 @@ objfile::lookup_global_symbol_language (const char *name,\n   return result;\n }\n \n+void\n+objfile::require_partial_symbols (bool verbose)\n+{\n+  if ((flags & OBJF_PSYMTABS_READ) == 0)\n+    {\n+      flags |= OBJF_PSYMTABS_READ;\n+\n+      if (qf->can_lazily_read_symbols ())\n+\t{\n+\t  if (verbose)\n+\t    printf_filtered (_(\"Reading symbols from %s...\\n\"),\n+\t\t\t     objfile_name (this));\n+\t  qf->read_partial_symbols (this);\n+\n+\t  if (verbose && !objfile_has_symbols (this))\n+\t    printf_filtered (_(\"(No debugging symbols found in %s)\\n\"),\n+\t\t\t     objfile_name (this));\n+\t}\n+    }\n+}\n+\n \f\n /* Debugging version of struct sym_probe_fns.  */\n "
    },
    {
      "sha": "d2ea04ed14963d6e132e48106fe0d6acda17ba30",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1eef86d12f5aa2f8461add1180df9db4b59a39d/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=d1eef86d12f5aa2f8461add1180df9db4b59a39d",
      "patch": "@@ -69,8 +69,6 @@\n #include <chrono>\n #include <algorithm>\n \n-#include \"psymtab.h\"\n-\n int (*deprecated_ui_load_progress_hook) (const char *section,\n \t\t\t\t\t unsigned long num);\n void (*deprecated_show_load_progress) (const char *section,\n@@ -793,7 +791,7 @@ read_symbols (struct objfile *objfile, symfile_add_flags add_flags)\n \t}\n     }\n   if ((add_flags & SYMFILE_NO_READ) == 0)\n-    require_partial_symbols (objfile, false);\n+    objfile->require_partial_symbols (false);\n }\n \n /* Initialize entry point information for this objfile.  */"
    }
  ]
}