{
  "sha": "5e18990f1f2957e59fa4b62d64ed0cb683b65b58",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWUxODk5MGYxZjI5NTdlNTlmYTRiNjJkNjRlZDBjYjY4M2I2NWI1OA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-24T17:48:27Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-07T11:49:12Z"
    },
    "message": "gdb: move cheap pointer equality check earlier in types_equal\n\nI noticed that in types equal we start with a cheap pointer equality\ncheck, then resolve typedefs, then do a series of (semi-)expensive\nchecks, including checking type names, before, finally performing\nanother pointer equality check.\n\nWe should hoist the second pointer equality check to immediately after\nwe have resolved typedefs.  This would save performing the more\nexpensive checks.\n\nThis isn't going to give any noticable performance improvement, I just\nspotted this in passing and figured I might as well commit the fix.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.c (types_equal): Move pointer equality check earlier in\n\tthe function.",
    "tree": {
      "sha": "015550c82dc9c03756111ce968335798b474d872",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/015550c82dc9c03756111ce968335798b474d872"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5e18990f1f2957e59fa4b62d64ed0cb683b65b58",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e18990f1f2957e59fa4b62d64ed0cb683b65b58",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5e18990f1f2957e59fa4b62d64ed0cb683b65b58",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e18990f1f2957e59fa4b62d64ed0cb683b65b58/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "efd86e5b0f756b04675e2ef7e26a64508300d9a8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efd86e5b0f756b04675e2ef7e26a64508300d9a8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/efd86e5b0f756b04675e2ef7e26a64508300d9a8"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 9,
    "deletions": 4
  },
  "files": [
    {
      "sha": "d8b3313030a993313f4ffeffd338d2a85244874c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e18990f1f2957e59fa4b62d64ed0cb683b65b58/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e18990f1f2957e59fa4b62d64ed0cb683b65b58/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5e18990f1f2957e59fa4b62d64ed0cb683b65b58",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-07  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdbtypes.c (types_equal): Move pointer equality check earlier in\n+\tthe function.\n+\n 2021-04-07  Caroline Tice  <cmtice@google.com>\n \n \t* dwarf2/read.c (try_open_dwop_file): Add path for the binary to"
    },
    {
      "sha": "84c4f34cf30f0780f74608e5aa7968f99a51c97e",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e18990f1f2957e59fa4b62d64ed0cb683b65b58/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e18990f1f2957e59fa4b62d64ed0cb683b65b58/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=5e18990f1f2957e59fa4b62d64ed0cb683b65b58",
      "patch": "@@ -4075,6 +4075,10 @@ types_equal (struct type *a, struct type *b)\n   if (b->code () == TYPE_CODE_TYPEDEF)\n     b = check_typedef (b);\n \n+  /* Check if identical after resolving typedefs.  */\n+  if (a == b)\n+    return true;\n+\n   /* If after resolving typedefs a and b are not of the same type\n      code then they are not equal.  */\n   if (a->code () != b->code ())\n@@ -4097,10 +4101,6 @@ types_equal (struct type *a, struct type *b)\n       && strcmp (a->name (), b->name ()) == 0)\n     return true;\n \n-  /* Check if identical after resolving typedefs.  */\n-  if (a == b)\n-    return true;\n-\n   /* Two function types are equal if their argument and return types\n      are equal.  */\n   if (a->code () == TYPE_CODE_FUNC)"
    }
  ]
}