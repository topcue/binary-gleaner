{
  "sha": "baf8791efb4b5cb41348b11ad9f63e6c2a004c5f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmFmODc5MWVmYjRiNWNiNDEzNDhiMTFhZDlmNjNlNmMyYTAwNGM1Zg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-07T14:26:42Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-21T20:57:08Z"
    },
    "message": "gdb/python: Reuse gdb.RegisterGroup objects where possible\n\nOnly create one gdb.RegisterGroup Python object for each of GDB's\nreggroup objects.\n\nI could have added a field into the reggroup object to hold the Python\nobject pointer for each reggroup, however, as reggroups are never\ndeleted within GDB, and are global (not per-architecture) a simpler\nsolution seemed to be just to hold a single global map from reggroup\npointer to a Python object representing the reggroup.  Then we can\nreuse the objects out of this map.\n\nAfter this commit it is possible for a user to tell that two\ngdb.RegisterGroup objects are now identical when previously they were\nunique, however, as both these objects are read-only I don't think\nthis should be a problem.\n\nThere should be no other user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* python/py-registers.c : Add 'unordered_map' include.\n\t(gdbpy_new_reggroup): Renamed to...\n\t(gdbpy_get_reggroup): ...this.  Update to only create register\n\tgroup descriptors when needed.\n\t(gdbpy_reggroup_iter_next): Update.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-arch-reg-groups.exp: Additional tests.",
    "tree": {
      "sha": "87b92e4e11919ae60839e352c79c4833b5f8a58c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/87b92e4e11919ae60839e352c79c4833b5f8a58c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f7306dac19c502232f766c3881313857915f330d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f7306dac19c502232f766c3881313857915f330d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f7306dac19c502232f766c3881313857915f330d"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 61,
    "deletions": 11
  },
  "files": [
    {
      "sha": "31307e6ff2b6cadffc74e5bac9d9dacd9e107c0b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=baf8791efb4b5cb41348b11ad9f63e6c2a004c5f",
      "patch": "@@ -1,3 +1,11 @@\n+2020-07-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python/py-registers.c : Add 'unordered_map' include.\n+\t(gdbpy_new_reggroup): Renamed to...\n+\t(gdbpy_get_reggroup): ...this.  Update to only create register\n+\tgroup descriptors when needed.\n+\t(gdbpy_reggroup_iter_next): Update.\n+\n 2020-07-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python/py-registers.c (gdbpy_register_object_data): New static"
    },
    {
      "sha": "9396498cc3464a560e5f6805bf8c48e84be9f236",
      "filename": "gdb/python/py-registers.c",
      "status": "modified",
      "additions": 30,
      "deletions": 11,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f/gdb/python/py-registers.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f/gdb/python/py-registers.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-registers.c?ref=baf8791efb4b5cb41348b11ad9f63e6c2a004c5f",
      "patch": "@@ -23,6 +23,7 @@\n #include \"disasm.h\"\n #include \"reggroups.h\"\n #include \"python-internal.h\"\n+#include <unordered_map>\n \n /* Token to access per-gdbarch data related to register descriptors.  */\n static struct gdbarch_data *gdbpy_register_object_data = NULL;\n@@ -95,18 +96,36 @@ gdbpy_register_object_data_init (struct gdbarch *gdbarch)\n   return (void *) vec;\n }\n \n-/* Create a new gdb.RegisterGroup object wrapping REGGROUP.  */\n+/* Return a gdb.RegisterGroup object wrapping REGGROUP.  The register\n+   group objects are cached, and the same Python object will always be\n+   returned for the same REGGROUP pointer.  */\n \n-static PyObject *\n-gdbpy_new_reggroup (struct reggroup *reggroup)\n+static gdbpy_ref<>\n+gdbpy_get_reggroup (struct reggroup *reggroup)\n {\n-  /* Create a new object and fill in its details.  */\n-  reggroup_object *group\n-    = PyObject_New (reggroup_object, &reggroup_object_type);\n-  if (group == NULL)\n-    return NULL;\n-  group->reggroup = reggroup;\n-  return (PyObject *) group;\n+  /* Map from GDB's internal reggroup objects to the Python representation.\n+     GDB's reggroups are global, and are never deleted, so using a map like\n+     this is safe.  */\n+  static std::unordered_map<struct reggroup *,gdbpy_ref<>>\n+    gdbpy_reggroup_object_map;\n+\n+  /* If there is not already a suitable Python object in the map then\n+     create a new one, and add it to the map.  */\n+  if (gdbpy_reggroup_object_map[reggroup] == nullptr)\n+    {\n+      /* Create a new object and fill in its details.  */\n+      gdbpy_ref<reggroup_object> group\n+\t(PyObject_New (reggroup_object, &reggroup_object_type));\n+      if (group == NULL)\n+\treturn NULL;\n+      group->reggroup = reggroup;\n+      gdbpy_reggroup_object_map[reggroup]\n+\t= gdbpy_ref<> ((PyObject *) group.release ());\n+    }\n+\n+  /* Fetch the Python object wrapping REGGROUP from the map, increasing\n+     the reference count is handled by the gdbpy_ref class.  */\n+  return gdbpy_reggroup_object_map[reggroup];\n }\n \n /* Convert a gdb.RegisterGroup to a string, it just returns the name of\n@@ -215,7 +234,7 @@ gdbpy_reggroup_iter_next (PyObject *self)\n     }\n \n   iter_obj->reggroup = next_group;\n-  return gdbpy_new_reggroup (iter_obj->reggroup);\n+  return gdbpy_get_reggroup (iter_obj->reggroup).release ();\n }\n \n /* Return a new gdb.RegisterGroupsIterator over all the register groups in"
    },
    {
      "sha": "1f0861e706a44f16b6cf3079c04e75fba1de3fa1",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=baf8791efb4b5cb41348b11ad9f63e6c2a004c5f",
      "patch": "@@ -1,3 +1,7 @@\n+2020-07-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-arch-reg-groups.exp: Additional tests.\n+\n 2020-07-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-arch-reg-names.exp: Additional tests."
    },
    {
      "sha": "093de2e73903620b43c8c14b1fd362d34da521b6",
      "filename": "gdb/testsuite/gdb.python/py-arch-reg-groups.exp",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f/gdb/testsuite/gdb.python/py-arch-reg-groups.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baf8791efb4b5cb41348b11ad9f63e6c2a004c5f/gdb/testsuite/gdb.python/py-arch-reg-groups.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-arch-reg-groups.exp?ref=baf8791efb4b5cb41348b11ad9f63e6c2a004c5f",
      "patch": "@@ -85,3 +85,22 @@ for { set i 0 } { $i < [llength $groups] } { incr i } {\n     }\n }\n gdb_assert { $found_non_match == 0 } \"all register groups match\"\n+\n+# Check that we get the same register group descriptors from two\n+# different iterators.\n+gdb_py_test_silent_cmd \\\n+    \"python iter1 = arch.register_groups ()\" \\\n+    \"get first all register group iterator\" 0\n+gdb_py_test_silent_cmd \\\n+    \"python iter2 = arch.register_groups ()\" \\\n+    \"get second all register group iterator\" 0\n+gdb_py_test_silent_cmd \\\n+    [multi_line_input \\\n+\t \"python\" \\\n+\t \"for r1, r2 in zip(iter1, iter2):\" \\\n+\t \"  if (r1.name != r2.name):\"\\\n+\t \"    raise gdb.GdbError (\\\"miss-matched names\\\")\" \\\n+\t \"  if (r1 != r2):\" \\\n+\t \"    raise gdb.GdbError (\\\"miss-matched objects\\\")\" \\\n+\t \"\\004\" ] \\\n+    \"check names and objects match\" 1"
    }
  ]
}