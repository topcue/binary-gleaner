{
  "sha": "e82a5afcedd98a2ca9c1915bef2938c77e967959",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTgyYTVhZmNlZGQ5OGEyY2E5YzE5MTViZWYyOTM4Yzc3ZTk2Nzk1OQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:24Z"
    },
    "message": "Introduce var_value_operation\n\nThis adds class var_value_operation, which implements OP_VAR_VALUE.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class var_value_operation): New.\n\t* eval.c (var_value_operation::evaluate)\n\t(var_value_operation::evaluate_for_address)\n\t(var_value_operation::evaluate_with_coercion)\n\t(var_value_operation::evaluate_for_sizeof)\n\t(var_value_operation::evaluate_for_cast): New methods.\n\t* ax-gdb.c (var_value_operation::do_generate_ax): New method.",
    "tree": {
      "sha": "3fd2cb49eba253dec29d7ae3ace902c11d831cb2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3fd2cb49eba253dec29d7ae3ace902c11d831cb2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e82a5afcedd98a2ca9c1915bef2938c77e967959",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e82a5afcedd98a2ca9c1915bef2938c77e967959",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e82a5afcedd98a2ca9c1915bef2938c77e967959",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e82a5afcedd98a2ca9c1915bef2938c77e967959/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d9ad79d8800c18b70e90e9672b5085246e4fd537",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9ad79d8800c18b70e90e9672b5085246e4fd537",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d9ad79d8800c18b70e90e9672b5085246e4fd537"
    }
  ],
  "stats": {
    "total": 179,
    "additions": 179,
    "deletions": 0
  },
  "files": [
    {
      "sha": "4f6680ee230e3a1a5c20be2b5d8a80691f0a084e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e82a5afcedd98a2ca9c1915bef2938c77e967959/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e82a5afcedd98a2ca9c1915bef2938c77e967959/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e82a5afcedd98a2ca9c1915bef2938c77e967959",
      "patch": "@@ -1,3 +1,13 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class var_value_operation): New.\n+\t* eval.c (var_value_operation::evaluate)\n+\t(var_value_operation::evaluate_for_address)\n+\t(var_value_operation::evaluate_with_coercion)\n+\t(var_value_operation::evaluate_for_sizeof)\n+\t(var_value_operation::evaluate_for_cast): New methods.\n+\t* ax-gdb.c (var_value_operation::do_generate_ax): New method.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (cxx_cast_ftype): New typedef."
    },
    {
      "sha": "bdf4a6dc39a25a95a321dd09e248eaa51d6f0f40",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e82a5afcedd98a2ca9c1915bef2938c77e967959/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e82a5afcedd98a2ca9c1915bef2938c77e967959/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=e82a5afcedd98a2ca9c1915bef2938c77e967959",
      "patch": "@@ -2673,6 +2673,26 @@ unop_cast_type_operation::do_generate_ax (struct expression *exp,\n   std::get<1> (m_storage)->generate_ax (exp, ax, value, value_type (val));\n }\n \n+void\n+var_value_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t     struct agent_expr *ax,\n+\t\t\t\t     struct axs_value *value,\n+\t\t\t\t     struct type *cast_type)\n+{\n+  gen_var_ref (ax, value, std::get<0> (m_storage));\n+\n+  if (value->optimized_out)\n+    error (_(\"`%s' has been optimized out, cannot use\"),\n+\t   std::get<0> (m_storage)->print_name ());\n+\n+  if (value->type->code () == TYPE_CODE_ERROR)\n+    {\n+      if (cast_type == nullptr)\n+\terror_unknown_type (std::get<0> (m_storage)->print_name ());\n+      value->type = cast_type;\n+    }\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "9d3b5ae87625400e596e463276b6a49d5f3c5176",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 112,
      "deletions": 0,
      "changes": 112,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e82a5afcedd98a2ca9c1915bef2938c77e967959/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e82a5afcedd98a2ca9c1915bef2938c77e967959/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=e82a5afcedd98a2ca9c1915bef2938c77e967959",
      "patch": "@@ -686,6 +686,23 @@ evaluate_var_value (enum noside noside, const block *blk, symbol *var)\n   return ret;\n }\n \n+namespace expr\n+\n+{\n+\n+value *\n+var_value_operation::evaluate (struct type *expect_type,\n+\t\t\t       struct expression *exp,\n+\t\t\t       enum noside noside)\n+{\n+  symbol *var = std::get<0> (m_storage);\n+  if (SYMBOL_TYPE (var)->code () == TYPE_CODE_ERROR)\n+    error_unknown_type (var->print_name ());\n+  return evaluate_var_value (noside, std::get<1> (m_storage), var);\n+}\n+\n+} /* namespace expr */\n+\n /* Helper for evaluating an OP_VAR_MSYM_VALUE.  */\n \n value *\n@@ -3417,6 +3434,54 @@ evaluate_subexp_with_coercion (struct expression *exp,\n     }\n }\n \n+namespace expr\n+{\n+\n+value *\n+var_value_operation::evaluate_for_address (struct expression *exp,\n+\t\t\t\t\t   enum noside noside)\n+{\n+  symbol *var = std::get<0> (m_storage);\n+\n+  /* C++: The \"address\" of a reference should yield the address\n+   * of the object pointed to.  Let value_addr() deal with it.  */\n+  if (TYPE_IS_REFERENCE (SYMBOL_TYPE (var)))\n+    return operation::evaluate_for_address (exp, noside);\n+\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    {\n+      struct type *type = lookup_pointer_type (SYMBOL_TYPE (var));\n+      enum address_class sym_class = SYMBOL_CLASS (var);\n+\n+      if (sym_class == LOC_CONST\n+\t  || sym_class == LOC_CONST_BYTES\n+\t  || sym_class == LOC_REGISTER)\n+\terror (_(\"Attempt to take address of register or constant.\"));\n+\n+      return value_zero (type, not_lval);\n+    }\n+  else\n+    return address_of_variable (var, std::get<1> (m_storage));\n+}\n+\n+value *\n+var_value_operation::evaluate_with_coercion (struct expression *exp,\n+\t\t\t\t\t     enum noside noside)\n+{\n+  struct symbol *var = std::get<0> (m_storage);\n+  struct type *type = check_typedef (SYMBOL_TYPE (var));\n+  if (type->code () == TYPE_CODE_ARRAY\n+      && !type->is_vector ()\n+      && CAST_IS_CONVERSION (exp->language_defn))\n+    {\n+      struct value *val = address_of_variable (var, std::get<1> (m_storage));\n+      return value_cast (lookup_pointer_type (TYPE_TARGET_TYPE (type)), val);\n+    }\n+  return evaluate (nullptr, exp, noside);\n+}\n+\n+}\n+\n /* Helper function for evaluating the size of a type.  */\n \n static value *\n@@ -3657,6 +3722,29 @@ unop_memval_type_operation::evaluate_for_sizeof (struct expression *exp,\n   return evaluate_subexp_for_sizeof_base (exp, value_type (typeval));\n }\n \n+value *\n+var_value_operation::evaluate_for_sizeof (struct expression *exp,\n+\t\t\t\t\t  enum noside noside)\n+{\n+  struct type *type = SYMBOL_TYPE (std::get<0> (m_storage));\n+  if (is_dynamic_type (type))\n+    {\n+      value *val = evaluate (nullptr, exp, EVAL_NORMAL);\n+      type = value_type (val);\n+      if (type->code () == TYPE_CODE_ARRAY)\n+\t{\n+\t  /* FIXME: This should be size_t.  */\n+\t  struct type *size_type = builtin_type (exp->gdbarch)->builtin_int;\n+\t  if (type_not_allocated (type) || type_not_associated (type))\n+\t    return value_zero (size_type, not_lval);\n+\t  else if (is_dynamic_type (type->index_type ())\n+\t\t   && type->bounds ()->high.kind () == PROP_UNDEFINED)\n+\t    return allocate_optimized_out_value (size_type);\n+\t}\n+    }\n+  return evaluate_subexp_for_sizeof_base (exp, type);\n+}\n+\n }\n \n /* Evaluate a subexpression of EXP, at index *POS, and return a value\n@@ -3744,6 +3832,30 @@ var_msym_value_operation::evaluate_for_cast (struct type *to_type,\n   return val;\n }\n \n+value *\n+var_value_operation::evaluate_for_cast (struct type *to_type,\n+\t\t\t\t\tstruct expression *exp,\n+\t\t\t\t\tenum noside noside)\n+{\n+  value *val = evaluate_var_value (noside,\n+\t\t\t\t   std::get<1> (m_storage),\n+\t\t\t\t   std::get<0> (m_storage));\n+\n+  if (noside == EVAL_SKIP)\n+    return eval_skip_value (exp);\n+\n+  val = value_cast (to_type, val);\n+\n+  /* Don't allow e.g. '&(int)var_with_no_debug_info'.  */\n+  if (VALUE_LVAL (val) == lval_memory)\n+    {\n+      if (value_lazy (val))\n+\tvalue_fetch_lazy (val);\n+      VALUE_LVAL (val) = not_lval;\n+    }\n+  return val;\n+}\n+\n }\n \n /* Parse a type expression in the string [P..P+LENGTH).  */"
    },
    {
      "sha": "ef5b9bb197d0e11c6a98067623048c8ecf6afb44",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e82a5afcedd98a2ca9c1915bef2938c77e967959/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e82a5afcedd98a2ca9c1915bef2938c77e967959/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=e82a5afcedd98a2ca9c1915bef2938c77e967959",
      "patch": "@@ -609,6 +609,43 @@ class scope_operation\n     override;\n };\n \n+/* Compute the value of a variable.  */\n+class var_value_operation\n+  : public maybe_constant_operation<symbol *, const block *>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  value *evaluate_with_coercion (struct expression *exp,\n+\t\t\t\t enum noside noside) override;\n+\n+  value *evaluate_for_sizeof (struct expression *exp, enum noside noside)\n+    override;\n+\n+  value *evaluate_for_cast (struct type *expect_type,\n+\t\t\t    struct expression *exp,\n+\t\t\t    enum noside noside) override;\n+\n+  value *evaluate_for_address (struct expression *exp, enum noside noside)\n+    override;\n+\n+  enum exp_opcode opcode () const override\n+  { return OP_VAR_VALUE; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n class long_const_operation\n   : public tuple_holding_operation<struct type *, LONGEST>\n {"
    }
  ]
}