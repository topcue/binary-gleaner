{
  "sha": "d72a9b85651c872378f6dd732cb578f6f055a9b3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDcyYTliODU2NTFjODcyMzc4ZjZkZDczMmNiNTc4ZjZmMDU1YTliMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-15T17:52:02Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-17T13:29:58Z"
    },
    "message": "Remove a VEC from s390-linux-nat.c\n\nThis removes a use of VEC fro s390-linux-nat.c, replacing it with\nstd::vector.\n\nTested using the Fedora-s390x-m64 buildbot builder.\n\ngdb/ChangeLog\n2019-07-17  Tom Tromey  <tromey@adacore.com>\n\n\t* s390-linux-nat.c (s390_watch_area): Remove typedef.  Don't\n\tdeclare VEC.\n\t(struct s390_debug_reg_state) <watch_areas, break_areas>: Now\n\tstd::vector.\n\t(struct s390_process_info): Add initializers.\n\t(s390_add_process): Use new.\n\t(s390_linux_nat_target::low_forget_process): Use delete.\n\t(s390_linux_nat_target::low_new_fork)\n\t(s390_linux_nat_target::stopped_by_watchpoint)\n\t(s390_linux_nat_target::low_prepare_to_resume)\n\t(s390_linux_nat_target::insert_watchpoint)\n\t(s390_linux_nat_target::insert_hw_breakpoint)\n\t(s390_linux_nat_target::remove_watchpoint)\n\t(s390_linux_nat_target::remove_hw_breakpoint): Update.",
    "tree": {
      "sha": "5787b3f99166e211a4bb17d60d9ff0aeef55437b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5787b3f99166e211a4bb17d60d9ff0aeef55437b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d72a9b85651c872378f6dd732cb578f6f055a9b3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d72a9b85651c872378f6dd732cb578f6f055a9b3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d72a9b85651c872378f6dd732cb578f6f055a9b3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d72a9b85651c872378f6dd732cb578f6f055a9b3/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8dc0818eb2c449d553065b57e6953436896c6e5a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8dc0818eb2c449d553065b57e6953436896c6e5a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8dc0818eb2c449d553065b57e6953436896c6e5a"
    }
  ],
  "stats": {
    "total": 97,
    "additions": 49,
    "deletions": 48
  },
  "files": [
    {
      "sha": "611a10e43e2bcf969965a9a7215f7bcbdf3cdbf1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d72a9b85651c872378f6dd732cb578f6f055a9b3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d72a9b85651c872378f6dd732cb578f6f055a9b3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d72a9b85651c872378f6dd732cb578f6f055a9b3",
      "patch": "@@ -1,3 +1,20 @@\n+2019-07-17  Tom Tromey  <tromey@adacore.com>\n+\n+\t* s390-linux-nat.c (s390_watch_area): Remove typedef.  Don't\n+\tdeclare VEC.\n+\t(struct s390_debug_reg_state) <watch_areas, break_areas>: Now\n+\tstd::vector.\n+\t(struct s390_process_info): Add initializers.\n+\t(s390_add_process): Use new.\n+\t(s390_linux_nat_target::low_forget_process): Use delete.\n+\t(s390_linux_nat_target::low_new_fork)\n+\t(s390_linux_nat_target::stopped_by_watchpoint)\n+\t(s390_linux_nat_target::low_prepare_to_resume)\n+\t(s390_linux_nat_target::insert_watchpoint)\n+\t(s390_linux_nat_target::insert_hw_breakpoint)\n+\t(s390_linux_nat_target::remove_watchpoint)\n+\t(s390_linux_nat_target::remove_hw_breakpoint): Update.\n+\n 2019-07-16  John Baldwin  <jhb@FreeBSD.org>\n \n \t* aarch64-fbsd-nat.c: Include regcache.h."
    },
    {
      "sha": "e77f4ac14d474e37879a1f3332af92bf34c4dca9",
      "filename": "gdb/s390-linux-nat.c",
      "status": "modified",
      "additions": 32,
      "deletions": 48,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d72a9b85651c872378f6dd732cb578f6f055a9b3/gdb/s390-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d72a9b85651c872378f6dd732cb578f6f055a9b3/gdb/s390-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-linux-nat.c?ref=d72a9b85651c872378f6dd732cb578f6f055a9b3",
      "patch": "@@ -500,28 +500,26 @@ s390_linux_nat_target::store_registers (struct regcache *regcache, int regnum)\n    The only thing we actually need is the total address space area\n    spanned by the watchpoints.  */\n \n-typedef struct watch_area\n+struct watch_area\n {\n   CORE_ADDR lo_addr;\n   CORE_ADDR hi_addr;\n-} s390_watch_area;\n-\n-DEF_VEC_O (s390_watch_area);\n+};\n \n /* Hardware debug state.  */\n \n struct s390_debug_reg_state\n {\n-  VEC_s390_watch_area *watch_areas;\n-  VEC_s390_watch_area *break_areas;\n+  std::vector<watch_area> watch_areas;\n+  std::vector<watch_area> break_areas;\n };\n \n /* Per-process data.  */\n \n struct s390_process_info\n {\n-  struct s390_process_info *next;\n-  pid_t pid;\n+  struct s390_process_info *next = nullptr;\n+  pid_t pid = 0;\n   struct s390_debug_reg_state state;\n };\n \n@@ -547,7 +545,7 @@ s390_find_process_pid (pid_t pid)\n static struct s390_process_info *\n s390_add_process (pid_t pid)\n {\n-  struct s390_process_info *proc = XCNEW (struct s390_process_info);\n+  struct s390_process_info *proc = new struct s390_process_info;\n \n   proc->pid = pid;\n   proc->next = s390_process_list;\n@@ -594,10 +592,8 @@ s390_linux_nat_target::low_forget_process (pid_t pid)\n     {\n       if (proc->pid == pid)\n \t{\n-\t  VEC_free (s390_watch_area, proc->state.watch_areas);\n-\t  VEC_free (s390_watch_area, proc->state.break_areas);\n \t  *proc_link = proc->next;\n-\t  xfree (proc);\n+\t  delete proc;\n \t  return;\n \t}\n \n@@ -627,10 +623,8 @@ s390_linux_nat_target::low_new_fork (struct lwp_info *parent, pid_t child_pid)\n   parent_state = s390_get_debug_reg_state (parent_pid);\n   child_state = s390_get_debug_reg_state (child_pid);\n \n-  child_state->watch_areas = VEC_copy (s390_watch_area,\n-\t\t\t\t       parent_state->watch_areas);\n-  child_state->break_areas = VEC_copy (s390_watch_area,\n-\t\t\t\t       parent_state->break_areas);\n+  child_state->watch_areas = parent_state->watch_areas;\n+  child_state->break_areas = parent_state->break_areas;\n }\n \n /* Dump PER state.  */\n@@ -676,7 +670,7 @@ s390_linux_nat_target::stopped_by_watchpoint ()\n     s390_show_debug_regs (s390_inferior_tid (), \"stop\");\n \n   /* Speed up common case.  */\n-  if (VEC_empty (s390_watch_area, state->watch_areas))\n+  if (state->watch_areas.empty ())\n     return false;\n \n   parea.len = sizeof (per_lowcore);\n@@ -711,8 +705,6 @@ s390_linux_nat_target::low_prepare_to_resume (struct lwp_info *lp)\n   ptrace_area parea;\n \n   CORE_ADDR watch_lo_addr = (CORE_ADDR)-1, watch_hi_addr = 0;\n-  unsigned ix;\n-  s390_watch_area *area;\n   struct arch_lwp_info *lp_priv = lwp_arch_private_info (lp);\n   struct s390_debug_reg_state *state = s390_get_debug_reg_state (pid);\n   int step = lwp_is_stepping (lp);\n@@ -725,7 +717,7 @@ s390_linux_nat_target::low_prepare_to_resume (struct lwp_info *lp)\n      hardware breakpoints (if any).  Otherwise we're done.  */\n   if (!lp_priv->per_info_changed)\n     {\n-      if (!step || VEC_empty (s390_watch_area, state->break_areas))\n+      if (!step || state->break_areas.empty ())\n \treturn;\n     }\n \n@@ -744,22 +736,20 @@ s390_linux_nat_target::low_prepare_to_resume (struct lwp_info *lp)\n   memset (&per_info, 0, sizeof (per_info));\n   per_info.single_step = (step != 0);\n \n-  if (!VEC_empty (s390_watch_area, state->watch_areas))\n+  if (!state->watch_areas.empty ())\n     {\n-      for (ix = 0;\n-\t   VEC_iterate (s390_watch_area, state->watch_areas, ix, area);\n-\t   ix++)\n+      for (const auto &area : state->watch_areas)\n \t{\n-\t  watch_lo_addr = std::min (watch_lo_addr, area->lo_addr);\n-\t  watch_hi_addr = std::max (watch_hi_addr, area->hi_addr);\n+\t  watch_lo_addr = std::min (watch_lo_addr, area.lo_addr);\n+\t  watch_hi_addr = std::max (watch_hi_addr, area.hi_addr);\n \t}\n \n       /* Enable storage-alteration events.  */\n       per_info.control_regs.words.cr[0] |= (PER_EVENT_STORE\n \t\t\t\t\t    | PER_CONTROL_ALTERATION);\n     }\n \n-  if (!VEC_empty (s390_watch_area, state->break_areas))\n+  if (!state->break_areas.empty ())\n     {\n       /* Don't install hardware breakpoints while single-stepping, since\n \t our PER settings (e.g. the nullification bit) might then conflict\n@@ -768,12 +758,10 @@ s390_linux_nat_target::low_prepare_to_resume (struct lwp_info *lp)\n \tlp_priv->per_info_changed = 1;\n       else\n \t{\n-\t  for (ix = 0;\n-\t       VEC_iterate (s390_watch_area, state->break_areas, ix, area);\n-\t       ix++)\n+\t  for (const auto &area : state->break_areas)\n \t    {\n-\t      watch_lo_addr = std::min (watch_lo_addr, area->lo_addr);\n-\t      watch_hi_addr = std::max (watch_hi_addr, area->hi_addr);\n+\t      watch_lo_addr = std::min (watch_lo_addr, area.lo_addr);\n+\t      watch_hi_addr = std::max (watch_hi_addr, area.hi_addr);\n \t    }\n \n \t  /* If there's just one breakpoint, enable instruction-fetching\n@@ -860,13 +848,13 @@ s390_linux_nat_target::insert_watchpoint (CORE_ADDR addr, int len,\n \t\t\t\t\t  enum target_hw_bp_type type,\n \t\t\t\t\t  struct expression *cond)\n {\n-  s390_watch_area area;\n+  watch_area area;\n   struct s390_debug_reg_state *state\n     = s390_get_debug_reg_state (inferior_ptid.pid ());\n \n   area.lo_addr = addr;\n   area.hi_addr = addr + len - 1;\n-  VEC_safe_push (s390_watch_area, state->watch_areas, &area);\n+  state->watch_areas.push_back (area);\n \n   return s390_refresh_per_info ();\n }\n@@ -877,17 +865,15 @@ s390_linux_nat_target::remove_watchpoint (CORE_ADDR addr, int len,\n \t\t\t\t\t  struct expression *cond)\n {\n   unsigned ix;\n-  s390_watch_area *area;\n   struct s390_debug_reg_state *state\n     = s390_get_debug_reg_state (inferior_ptid.pid ());\n \n-  for (ix = 0;\n-       VEC_iterate (s390_watch_area, state->watch_areas, ix, area);\n-       ix++)\n+  for (ix = 0; ix < state->watch_areas.size (); ix++)\n     {\n-      if (area->lo_addr == addr && area->hi_addr == addr + len - 1)\n+      watch_area &area = state->watch_areas[ix];\n+      if (area.lo_addr == addr && area.hi_addr == addr + len - 1)\n \t{\n-\t  VEC_unordered_remove (s390_watch_area, state->watch_areas, ix);\n+\t  unordered_remove (state->watch_areas, ix);\n \t  return s390_refresh_per_info ();\n \t}\n     }\n@@ -914,13 +900,13 @@ int\n s390_linux_nat_target::insert_hw_breakpoint (struct gdbarch *gdbarch,\n \t\t\t\t\t     struct bp_target_info *bp_tgt)\n {\n-  s390_watch_area area;\n+  watch_area area;\n   struct s390_debug_reg_state *state;\n \n   area.lo_addr = bp_tgt->placed_address = bp_tgt->reqstd_address;\n   area.hi_addr = area.lo_addr;\n   state = s390_get_debug_reg_state (inferior_ptid.pid ());\n-  VEC_safe_push (s390_watch_area, state->break_areas, &area);\n+  state->break_areas.push_back (area);\n \n   return s390_refresh_per_info ();\n }\n@@ -932,17 +918,15 @@ s390_linux_nat_target::remove_hw_breakpoint (struct gdbarch *gdbarch,\n \t\t\t\t\t     struct bp_target_info *bp_tgt)\n {\n   unsigned ix;\n-  struct watch_area *area;\n   struct s390_debug_reg_state *state;\n \n   state = s390_get_debug_reg_state (inferior_ptid.pid ());\n-  for (ix = 0;\n-       VEC_iterate (s390_watch_area, state->break_areas, ix, area);\n-       ix++)\n+  for (ix = 0; state->break_areas.size (); ix++)\n     {\n-      if (area->lo_addr == bp_tgt->placed_address)\n+      watch_area &area = state->break_areas[ix];\n+      if (area.lo_addr == bp_tgt->placed_address)\n \t{\n-\t  VEC_unordered_remove (s390_watch_area, state->break_areas, ix);\n+\t  unordered_remove (state->break_areas, ix);\n \t  return s390_refresh_per_info ();\n \t}\n     }"
    }
  ]
}