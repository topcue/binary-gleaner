{
  "sha": "afc72f154d6c59367e2f1cdf3ead5035748e2b61",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWZjNzJmMTU0ZDZjNTkzNjdlMmYxY2RmM2VhZDUwMzU3NDhlMmI2MQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-08-23T09:37:51Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-08-23T09:37:51Z"
    },
    "message": "Prevent a potential illegal memory access in the DWARF parser when processing a corrupt file.\n\n\tPR 24829\n\t* dwarf.c (check_uvalue): New function.  Ensures that a block's\n\tsize is valid.\n\t(read_and_display_attr_value): Use check_value when processsing\n\tDW_FORM_block<n> attributes.",
    "tree": {
      "sha": "b311b122a3851be68233ef77c7371be61a0b0574",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b311b122a3851be68233ef77c7371be61a0b0574"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/afc72f154d6c59367e2f1cdf3ead5035748e2b61",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/afc72f154d6c59367e2f1cdf3ead5035748e2b61",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/afc72f154d6c59367e2f1cdf3ead5035748e2b61",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/afc72f154d6c59367e2f1cdf3ead5035748e2b61/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1aa7f807d239dc32433e5f10840cdc8e80824c64",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1aa7f807d239dc32433e5f10840cdc8e80824c64",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1aa7f807d239dc32433e5f10840cdc8e80824c64"
    }
  ],
  "stats": {
    "total": 78,
    "additions": 48,
    "deletions": 30
  },
  "files": [
    {
      "sha": "e5b197a50e34b16bc8038e774110615e8f5f7b2c",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afc72f154d6c59367e2f1cdf3ead5035748e2b61/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afc72f154d6c59367e2f1cdf3ead5035748e2b61/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=afc72f154d6c59367e2f1cdf3ead5035748e2b61",
      "patch": "@@ -1,3 +1,11 @@\n+2019-08-23  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 24829\n+\t* dwarf.c (check_uvalue): New function.  Ensures that a block's\n+\tsize is valid.\n+\t(read_and_display_attr_value): Use check_value when processsing\n+\tDW_FORM_block<n> attributes.\n+\n 2019-08-22  Nick Clifton  <nickc@redhat.com>\n \n \tPR 24921"
    },
    {
      "sha": "27685183e0188918ea2308e4b3848e8546c9a478",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 40,
      "deletions": 30,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/afc72f154d6c59367e2f1cdf3ead5035748e2b61/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/afc72f154d6c59367e2f1cdf3ead5035748e2b61/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=afc72f154d6c59367e2f1cdf3ead5035748e2b61",
      "patch": "@@ -1832,6 +1832,34 @@ free_dwo_info (void)\n   first_dwo_info = NULL;\n }\n \n+/* Ensure that START + UVALUE is less than END.\n+   Return an adjusted UVALUE if necessary to ensure this relationship.  */\n+\n+static inline dwarf_vma\n+check_uvalue (const unsigned char * start,\n+\t      dwarf_vma             uvalue,\n+\t      const unsigned char * end)\n+{\n+  dwarf_vma max_uvalue = end - start;\n+\n+  /* FIXME: Testing \"(start + uvalue) < start\" miscompiles with gcc 4.8.3\n+     running on an x86_64 host in 32-bit mode.  So we pre-compute the value\n+     here.  */\n+  const unsigned char * ptr = start + uvalue;\n+\n+  /* See PR 17512: file: 008-103549-0.001:0.1.\n+     and PR 24829 for examples of where these tests are triggered.  */\n+  if (uvalue > max_uvalue\n+      || ptr > end\n+      || ptr < start)\n+    {\n+      warn (_(\"Corrupt attribute block length: %lx\\n\"), (long) uvalue);\n+      uvalue = max_uvalue;\n+    }\n+\n+  return uvalue;\n+}\n+\n static unsigned char *\n read_and_display_attr_value (unsigned long           attribute,\n \t\t\t     unsigned long           form,\n@@ -2056,16 +2084,9 @@ read_and_display_attr_value (unsigned long           attribute,\n \t  uvalue = 0;\n \t  block_start = end;\n \t}\n-      /* FIXME: Testing \"(block_start + uvalue) < block_start\" miscompiles with\n-\t gcc 4.8.3 running on an x86_64 host in 32-bit mode.  So we pre-compute\n-\t block_start + uvalue here.  */\n-      data = block_start + uvalue;\n-      /* PR 17512: file: 008-103549-0.001:0.1.  */\n-      if (block_start + uvalue > end || data < block_start)\n-\t{\n-\t  warn (_(\"Corrupt attribute block length: %lx\\n\"), (long) uvalue);\n-\t  uvalue = end - block_start;\n-\t}\n+\n+      uvalue = check_uvalue (block_start, uvalue, end);\n+\n       if (do_loc)\n \tdata = block_start + uvalue;\n       else\n@@ -2081,12 +2102,9 @@ read_and_display_attr_value (unsigned long           attribute,\n \t  uvalue = 0;\n \t  block_start = end;\n \t}\n-      data = block_start + uvalue;\n-      if (block_start + uvalue > end || data < block_start)\n-\t{\n-\t  warn (_(\"Corrupt attribute block length: %lx\\n\"), (long) uvalue);\n-\t  uvalue = end - block_start;\n-\t}\n+\n+      uvalue = check_uvalue (block_start, uvalue, end);\n+\n       if (do_loc)\n \tdata = block_start + uvalue;\n       else\n@@ -2102,12 +2120,9 @@ read_and_display_attr_value (unsigned long           attribute,\n \t  uvalue = 0;\n \t  block_start = end;\n \t}\n-      data = block_start + uvalue;\n-      if (block_start + uvalue > end || data < block_start)\n-\t{\n-\t  warn (_(\"Corrupt attribute block length: %lx\\n\"), (long) uvalue);\n-\t  uvalue = end - block_start;\n-\t}\n+\n+      uvalue = check_uvalue (block_start, uvalue, end);\n+\n       if (do_loc)\n \tdata = block_start + uvalue;\n       else\n@@ -2124,14 +2139,9 @@ read_and_display_attr_value (unsigned long           attribute,\n \t  uvalue = 0;\n \t  block_start = end;\n \t}\n-      data = block_start + uvalue;\n-      if (block_start + uvalue > end\n-\t  /* PR 17531: file: 5b5f0592.  */\n-\t  || data < block_start)\n-\t{\n-\t  warn (_(\"Corrupt attribute block length: %lx\\n\"), (long) uvalue);\n-\t  uvalue = end - block_start;\n-\t}\n+\n+      uvalue = check_uvalue (block_start, uvalue, end);\n+\n       if (do_loc)\n \tdata = block_start + uvalue;\n       else"
    }
  ]
}