{
  "sha": "630ed6b975d2d2f950523dd2ad9ac77614f5222c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjMwZWQ2Yjk3NWQyZDJmOTUwNTIzZGQyYWQ5YWM3NzYxNGY1MjIyYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:06Z"
    },
    "message": "Remove DW_SIGNATURE\n\nThis removes DW_SIGNATURE in favor of methods on struct attribute.  As\nusual, the methods check the form, which DW_SIGNATURE did not do.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_attribute_value, lookup_die_type)\n\t(dump_die_shallow, follow_die_sig, get_DW_AT_signature_type):\n\tUpdate.\n\t* dwarf2/attribute.h (struct attribute) <as_signature,\n\tset_signature>: New methods.\n\t(DW_SIGNATURE): Remove.",
    "tree": {
      "sha": "1d3434e503cc0f281807ffe8a379e2163409225d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1d3434e503cc0f281807ffe8a379e2163409225d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/630ed6b975d2d2f950523dd2ad9ac77614f5222c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/630ed6b975d2d2f950523dd2ad9ac77614f5222c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/630ed6b975d2d2f950523dd2ad9ac77614f5222c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/630ed6b975d2d2f950523dd2ad9ac77614f5222c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9d2246fce014a0133882051f8527e2dbd869a31b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d2246fce014a0133882051f8527e2dbd869a31b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9d2246fce014a0133882051f8527e2dbd869a31b"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 29,
    "deletions": 6
  },
  "files": [
    {
      "sha": "cab1d8a0820241380f9df8624a8410cf8ca75810",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/630ed6b975d2d2f950523dd2ad9ac77614f5222c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/630ed6b975d2d2f950523dd2ad9ac77614f5222c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=630ed6b975d2d2f950523dd2ad9ac77614f5222c",
      "patch": "@@ -1,3 +1,12 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_attribute_value, lookup_die_type)\n+\t(dump_die_shallow, follow_die_sig, get_DW_AT_signature_type):\n+\tUpdate.\n+\t* dwarf2/attribute.h (struct attribute) <as_signature,\n+\tset_signature>: New methods.\n+\t(DW_SIGNATURE): Remove.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (read_call_site_scope)"
    },
    {
      "sha": "800ea8d46802b3b7916e823a4520e43eace722c4",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/630ed6b975d2d2f950523dd2ad9ac77614f5222c/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/630ed6b975d2d2f950523dd2ad9ac77614f5222c/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=630ed6b975d2d2f950523dd2ad9ac77614f5222c",
      "patch": "@@ -57,6 +57,14 @@ struct attribute\n     return u.blk;\n   }\n \n+  /* Return the signature.  The attribute must have signature\n+     form.  */\n+  ULONGEST as_signature () const\n+  {\n+    gdb_assert (form == DW_FORM_ref_sig8);\n+    return u.signature;\n+  }\n+\n   /* Return non-zero if ATTR's value is a section offset --- classes\n      lineptr, loclistptr, macptr or rangelistptr --- or zero, otherwise.\n      You may use DW_UNSND (attr) to retrieve such offsets.\n@@ -160,6 +168,13 @@ struct attribute\n     u.blk = blk;\n   }\n \n+  /* Set the signature value for this attribute.  */\n+  void set_signature (ULONGEST signature)\n+  {\n+    gdb_assert (form == DW_FORM_ref_sig8);\n+    u.signature = signature;\n+  }\n+\n \n   ENUM_BITFIELD(dwarf_attribute) name : 16;\n   ENUM_BITFIELD(dwarf_form) form : 15;\n@@ -192,6 +207,5 @@ struct attribute\n #define DW_UNSND(attr)     ((attr)->u.unsnd)\n #define DW_SND(attr)       ((attr)->u.snd)\n #define DW_ADDR(attr)\t   ((attr)->u.addr)\n-#define DW_SIGNATURE(attr) ((attr)->u.signature)\n \n #endif /* GDB_DWARF2_ATTRIBUTE_H */"
    },
    {
      "sha": "e8170eb5f65fbf8e8b67f3dc8404b1164aef7e79",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/630ed6b975d2d2f950523dd2ad9ac77614f5222c/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/630ed6b975d2d2f950523dd2ad9ac77614f5222c/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=630ed6b975d2d2f950523dd2ad9ac77614f5222c",
      "patch": "@@ -19850,7 +19850,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n       info_ptr += 8;\n       break;\n     case DW_FORM_ref_sig8:\n-      DW_SIGNATURE (attr) = read_8_bytes (abfd, info_ptr);\n+      attr->set_signature (read_8_bytes (abfd, info_ptr));\n       info_ptr += 8;\n       break;\n     case DW_FORM_ref_udata:\n@@ -22093,7 +22093,7 @@ lookup_die_type (struct die_info *die, const struct attribute *attr,\n     }\n   else if (attr->form == DW_FORM_ref_sig8)\n     {\n-      ULONGEST signature = DW_SIGNATURE (attr);\n+      ULONGEST signature = attr->as_signature ();\n \n       return get_signatured_type (die, signature, cu);\n     }\n@@ -22782,7 +22782,7 @@ dump_die_shallow (struct ui_file *f, int indent, struct die_info *die)\n \t  break;\n \tcase DW_FORM_ref_sig8:\n \t  fprintf_unfiltered (f, \"signature: %s\",\n-\t\t\t      hex_string (DW_SIGNATURE (&die->attrs[i])));\n+\t\t\t      hex_string (die->attrs[i].as_signature ()));\n \t  break;\n \tcase DW_FORM_string:\n \tcase DW_FORM_strp:\n@@ -23360,7 +23360,7 @@ static struct die_info *\n follow_die_sig (struct die_info *src_die, const struct attribute *attr,\n \t\tstruct dwarf2_cu **ref_cu)\n {\n-  ULONGEST signature = DW_SIGNATURE (attr);\n+  ULONGEST signature = attr->as_signature ();\n   struct signatured_type *sig_type;\n   struct die_info *die;\n \n@@ -23468,7 +23468,7 @@ get_DW_AT_signature_type (struct die_info *die, const struct attribute *attr,\n     }\n   else if (attr->form == DW_FORM_ref_sig8)\n     {\n-      return get_signatured_type (die, DW_SIGNATURE (attr), cu);\n+      return get_signatured_type (die, attr->as_signature (), cu);\n     }\n   else\n     {"
    }
  ]
}