{
  "sha": "039e4b76be2741e3813a691f12cc5550eb6e891d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDM5ZTRiNzZiZTI3NDFlMzgxM2E2OTFmMTJjYzU1NTBlYjZlODkxZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:33Z"
    },
    "message": "Introduce ada_bitwise_operation\n\nThis adds class ada_bitwise_operation, which is used to implement the\nAda bitwise operators.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* ada-exp.h (ada_bitwise_operation): New template class.\n\t(ada_bitwise_and_operation, ada_bitwise_ior_operation)\n\t(ada_bitwise_xor_operation): New typedefs.",
    "tree": {
      "sha": "6652439c5e8813adf251915cfbefcea387948ef2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6652439c5e8813adf251915cfbefcea387948ef2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/039e4b76be2741e3813a691f12cc5550eb6e891d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/039e4b76be2741e3813a691f12cc5550eb6e891d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/039e4b76be2741e3813a691f12cc5550eb6e891d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/039e4b76be2741e3813a691f12cc5550eb6e891d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6e8fb7b723199eed2706e5ef9ee464ed8b467f7f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6e8fb7b723199eed2706e5ef9ee464ed8b467f7f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6e8fb7b723199eed2706e5ef9ee464ed8b467f7f"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 33,
    "deletions": 0
  },
  "files": [
    {
      "sha": "62c71b7c53476fc84ea520ac8dd4779cff3fee01",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/039e4b76be2741e3813a691f12cc5550eb6e891d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/039e4b76be2741e3813a691f12cc5550eb6e891d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=039e4b76be2741e3813a691f12cc5550eb6e891d",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-exp.h (ada_bitwise_operation): New template class.\n+\t(ada_bitwise_and_operation, ada_bitwise_ior_operation)\n+\t(ada_bitwise_xor_operation): New typedefs.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* ada-lang.c (ada_equal_binop): No longer static."
    },
    {
      "sha": "d8f18b9c61f76a496c30bcd3ab2c97609d8ffdf7",
      "filename": "gdb/ada-exp.h",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/039e4b76be2741e3813a691f12cc5550eb6e891d/gdb/ada-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/039e4b76be2741e3813a691f12cc5550eb6e891d/gdb/ada-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.h?ref=039e4b76be2741e3813a691f12cc5550eb6e891d",
      "patch": "@@ -186,6 +186,33 @@ class ada_binop_equal_operation\n   { return std::get<0> (m_storage); }\n };\n \n+/* Bitwise operators for Ada.  */\n+template<enum exp_opcode OP>\n+class ada_bitwise_operation\n+  : public maybe_constant_operation<operation_up, operation_up>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *lhs = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+    value *rhs = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+    value *result = eval_op_binary (expect_type, exp, noside, OP, lhs, rhs);\n+    return value_cast (value_type (lhs), result);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return OP; }\n+};\n+\n+using ada_bitwise_and_operation = ada_bitwise_operation<BINOP_BITWISE_AND>;\n+using ada_bitwise_ior_operation = ada_bitwise_operation<BINOP_BITWISE_IOR>;\n+using ada_bitwise_xor_operation = ada_bitwise_operation<BINOP_BITWISE_XOR>;\n+\n } /* namespace expr */\n \n #endif /* ADA_EXP_H */"
    }
  ]
}