{
  "sha": "19007d955670a183fdf79408301d403b43eb7db1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTkwMDdkOTU1NjcwYTE4M2ZkZjc5NDA4MzAxZDQwM2I0M2ViN2RiMQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-12-10T19:51:20Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-12-16T13:05:56Z"
    },
    "message": "Fix TBI handling for watchpoints\n\nWhen inserting hw watchpoints, we take care of masking off the top byte\nof the address (and sign-extending it if needed).  This guarantees we won't\npass tagged addresses to the kernel via ptrace.\n\nHowever, from the kernel documentation on tagged pointers...\n\n\"Non-zero tags are not preserved when delivering signals. This means that\nsignal handlers in applications making use of tags cannot rely on the tag\ninformation for user virtual addresses being maintained for fields inside\nsiginfo_t.\n\nOne exception to this rule is for signals raised in response to watchpoint\ndebug exceptions, where the tag information will be preserved.\"\n\nSo the stopped data address after a hw watchpoint hit can be potentially\ntagged, and we don't handle this in GDB at the moment.  This results in\nGDB missing a hw watchpoint hit and attempting to step over an unsteppable\nhw watchpoint, causing it to spin endlessly.\n\nThe following patch fixes this by adjusting the stopped data address and adds\nsome tests to expose the problem.\n\ngdb/ChangeLog:\n\n2020-12-16  Luis Machado  <luis.machado@linaro.org>\n\n\t* aarch64-linux-nat.c\n\t(aarch64_linux_nat_target::stopped_data_address): Handle the TBI.\n\ngdbserver/ChangeLog:\n\n2020-12-16  Luis Machado  <luis.machado@linaro.org>\n\n\t* linux-aarch64-low.cc (address_significant): New function.\n\t(aarch64_target::low_stopped_data_address): Handle the TBI.\n\ngdb/testsuite/ChangeLog:\n\n2020-12-16  Luis Machado  <luis.machado@linaro.org>\n\n\t* gdb.arch/aarch64-tagged-pointer.c (main): Add a few more\n\tpointer-based memory accesses.\n\t* gdb.arch/aarch64-tagged-pointer.exp: Exercise additional\n\thw watchpoint cases.",
    "tree": {
      "sha": "4792181fe8ae0bf0fb897646fe30ed98937e100e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4792181fe8ae0bf0fb897646fe30ed98937e100e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/19007d955670a183fdf79408301d403b43eb7db1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19007d955670a183fdf79408301d403b43eb7db1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/19007d955670a183fdf79408301d403b43eb7db1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19007d955670a183fdf79408301d403b43eb7db1/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c410035d37d8237c641155c4e51e7ccf53decb29",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c410035d37d8237c641155c4e51e7ccf53decb29",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c410035d37d8237c641155c4e51e7ccf53decb29"
    }
  ],
  "stats": {
    "total": 84,
    "additions": 71,
    "deletions": 13
  },
  "files": [
    {
      "sha": "764329d52f6ee138c6d6a8eecd284a5f472b4a03",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19007d955670a183fdf79408301d403b43eb7db1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19007d955670a183fdf79408301d403b43eb7db1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=19007d955670a183fdf79408301d403b43eb7db1",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-16  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* aarch64-linux-nat.c\n+\t(aarch64_linux_nat_target::stopped_data_address): Handle the TBI.\n+\n 2020-12-15  Rae Kim  <rae.kim@gmail.com>\n \n \t* cli/cli-script.c (do_document_command): Rename from"
    },
    {
      "sha": "b3bbde4b92c8a8d620fbc9fe5bc9664ceb1563c8",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19007d955670a183fdf79408301d403b43eb7db1/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19007d955670a183fdf79408301d403b43eb7db1/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=19007d955670a183fdf79408301d403b43eb7db1",
      "patch": "@@ -877,14 +877,20 @@ aarch64_linux_nat_target::stopped_data_address (CORE_ADDR *addr_p)\n       || (siginfo.si_code & 0xffff) != TRAP_HWBKPT)\n     return false;\n \n+  /* Make sure to ignore the top byte, otherwise we may not recognize a\n+     hardware watchpoint hit.  The stopped data addresses coming from the\n+     kernel can potentially be tagged addresses.  */\n+  struct gdbarch *gdbarch = thread_architecture (inferior_ptid);\n+  const CORE_ADDR addr_trap\n+    = address_significant (gdbarch, (CORE_ADDR) siginfo.si_addr);\n+\n   /* Check if the address matches any watched address.  */\n   state = aarch64_get_debug_reg_state (inferior_ptid.pid ());\n   for (i = aarch64_num_wp_regs - 1; i >= 0; --i)\n     {\n       const unsigned int offset\n \t= aarch64_watchpoint_offset (state->dr_ctrl_wp[i]);\n       const unsigned int len = aarch64_watchpoint_length (state->dr_ctrl_wp[i]);\n-      const CORE_ADDR addr_trap = (CORE_ADDR) siginfo.si_addr;\n       const CORE_ADDR addr_watch = state->dr_addr_wp[i] + offset;\n       const CORE_ADDR addr_watch_aligned = align_down (state->dr_addr_wp[i], 8);\n       const CORE_ADDR addr_orig = state->dr_addr_orig_wp[i];"
    },
    {
      "sha": "7249ae670d6450cf32877338b5860e8a21d0ad60",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19007d955670a183fdf79408301d403b43eb7db1/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19007d955670a183fdf79408301d403b43eb7db1/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=19007d955670a183fdf79408301d403b43eb7db1",
      "patch": "@@ -1,3 +1,10 @@\n+2020-12-16  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* gdb.arch/aarch64-tagged-pointer.c (main): Add a few more\n+\tpointer-based memory accesses.\n+\t* gdb.arch/aarch64-tagged-pointer.exp: Exercise additional\n+\thw watchpoint cases.\n+\n 2020-12-15  Rae Kim  <rae.kim@gmail.com>\n \n \t* gdb.base/document.exp: New test."
    },
    {
      "sha": "658c3093e873eb5e1fdda11c14f9e97fecc0df6d",
      "filename": "gdb/testsuite/gdb.arch/aarch64-tagged-pointer.c",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19007d955670a183fdf79408301d403b43eb7db1/gdb/testsuite/gdb.arch/aarch64-tagged-pointer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19007d955670a183fdf79408301d403b43eb7db1/gdb/testsuite/gdb.arch/aarch64-tagged-pointer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-tagged-pointer.c?ref=19007d955670a183fdf79408301d403b43eb7db1",
      "patch": "@@ -53,5 +53,11 @@ main (void)\n     }\n \n   sp1->i = 8765;\n-  i = 1;\n+  sp2->i = 4321;\n+  sp1->i = 8765;\n+  sp2->i = 4321;\n+  *p1 = 1;\n+  *p2 = 2;\n+  *p1 = 1;\n+  *p2 = 2;\n }"
    },
    {
      "sha": "01c2b577d53b61821a3583d54c776dee0195798b",
      "filename": "gdb/testsuite/gdb.arch/aarch64-tagged-pointer.exp",
      "status": "modified",
      "additions": 17,
      "deletions": 10,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19007d955670a183fdf79408301d403b43eb7db1/gdb/testsuite/gdb.arch/aarch64-tagged-pointer.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19007d955670a183fdf79408301d403b43eb7db1/gdb/testsuite/gdb.arch/aarch64-tagged-pointer.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-tagged-pointer.exp?ref=19007d955670a183fdf79408301d403b43eb7db1",
      "patch": "@@ -92,14 +92,21 @@ foreach_with_prefix bptype {\"hbreak\" \"break\"} {\n \n gdb_test \"down\"\n gdb_test \"finish\"\n-# Watch on tagged pointer.\n-gdb_test \"watch *sp2\"\n-gdb_test \"continue\" \\\n-    \"Continuing\\\\..*Hardware watchpoint \\[0-9\\]+.*\" \\\n-    \"run until watchpoint on s1\"\n-delete_breakpoints\n \n-gdb_test \"watch *p2\"\n-gdb_test \"continue\" \\\n-    \"Continuing\\\\..*Hardware watchpoint \\[0-9\\]+.*\" \\\n-    \"run until watchpoint on i\"\n+# sp1 and p1 are untagged pointers, but sp2 and p2 are tagged pointers.\n+# Cycle through all of them to make sure the following combinations work:\n+#\n+# hw watch on untagged address, hit on untagged address.\n+# hw watch on tagged address, hit on untagged address.\n+# hw watch on untagged address, hit on tagged address.\n+# hw watch on tagged address, hit on tagged address.\n+foreach symbol {\"sp1\" \"sp2\" \"p1\" \"p2\"} {\n+    gdb_test \"watch *${symbol}\"\n+    gdb_test \"continue\" \\\n+\t\"Continuing\\\\..*Hardware watchpoint \\[0-9\\]+.*\" \\\n+\t\"run until watchpoint on ${symbol}\"\n+    gdb_test \"continue\" \\\n+\t\"Continuing\\\\..*Hardware watchpoint \\[0-9\\]+.*\" \\\n+\t\"run until watchpoint on ${symbol}, 2nd hit\"\n+    delete_breakpoints\n+}"
    },
    {
      "sha": "16a9609bd0bf6ed36ed46e3ed6a69574b9fa05e7",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19007d955670a183fdf79408301d403b43eb7db1/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19007d955670a183fdf79408301d403b43eb7db1/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=19007d955670a183fdf79408301d403b43eb7db1",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-16  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* linux-aarch64-low.cc (address_significant): New function.\n+\t(aarch64_target::low_stopped_data_address): Handle the TBI.\n+\n 2020-12-11  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* Makefile.in (IPA_LIB): Include libiberty library."
    },
    {
      "sha": "f39d7c231646c83825f49d9d1b5e1feb9b4696f1",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 23,
      "deletions": 1,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19007d955670a183fdf79408301d403b43eb7db1/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19007d955670a183fdf79408301d403b43eb7db1/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=19007d955670a183fdf79408301d403b43eb7db1",
      "patch": "@@ -458,6 +458,23 @@ aarch64_target::low_remove_point (raw_bkpt_type type, CORE_ADDR addr,\n   return ret;\n }\n \n+/* Return the address only having significant bits.  This is used to ignore\n+   the top byte (TBI).  */\n+\n+static CORE_ADDR\n+address_significant (CORE_ADDR addr)\n+{\n+  /* Clear insignificant bits of a target address and sign extend resulting\n+     address.  */\n+  int addr_bit = 56;\n+\n+  CORE_ADDR sign = (CORE_ADDR) 1 << (addr_bit - 1);\n+  addr &= ((CORE_ADDR) 1 << addr_bit) - 1;\n+  addr = (addr ^ sign) - sign;\n+\n+  return addr;\n+}\n+\n /* Implementation of linux target ops method \"low_stopped_data_address\".  */\n \n CORE_ADDR\n@@ -478,14 +495,19 @@ aarch64_target::low_stopped_data_address ()\n       || (siginfo.si_code & 0xffff) != 0x0004 /* TRAP_HWBKPT */)\n     return (CORE_ADDR) 0;\n \n+  /* Make sure to ignore the top byte, otherwise we may not recognize a\n+     hardware watchpoint hit.  The stopped data addresses coming from the\n+     kernel can potentially be tagged addresses.  */\n+  const CORE_ADDR addr_trap\n+    = address_significant ((CORE_ADDR) siginfo.si_addr);\n+\n   /* Check if the address matches any watched address.  */\n   state = aarch64_get_debug_reg_state (pid_of (current_thread));\n   for (i = aarch64_num_wp_regs - 1; i >= 0; --i)\n     {\n       const unsigned int offset\n \t= aarch64_watchpoint_offset (state->dr_ctrl_wp[i]);\n       const unsigned int len = aarch64_watchpoint_length (state->dr_ctrl_wp[i]);\n-      const CORE_ADDR addr_trap = (CORE_ADDR) siginfo.si_addr;\n       const CORE_ADDR addr_watch = state->dr_addr_wp[i] + offset;\n       const CORE_ADDR addr_watch_aligned = align_down (state->dr_addr_wp[i], 8);\n       const CORE_ADDR addr_orig = state->dr_addr_orig_wp[i];"
    }
  ]
}