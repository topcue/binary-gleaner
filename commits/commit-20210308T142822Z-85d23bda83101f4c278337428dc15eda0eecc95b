{
  "sha": "85d23bda83101f4c278337428dc15eda0eecc95b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODVkMjNiZGE4MzEwMWY0YzI3ODMzNzQyOGRjMTVlZGEwZWVjYzk1Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:22Z"
    },
    "message": "Introduce unop_sizeof_operation\n\nThis adds class unop_sizeof_operation, which implements UNOP_SIZEOF.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class unop_sizeof_operation): New.\n\t* ax-gdb.c (unop_sizeof_operation::do_generate_ax): New method.",
    "tree": {
      "sha": "919485b3aaf4a2eaade8a265e9fea942d753b3e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/919485b3aaf4a2eaade8a265e9fea942d753b3e3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/85d23bda83101f4c278337428dc15eda0eecc95b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85d23bda83101f4c278337428dc15eda0eecc95b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/85d23bda83101f4c278337428dc15eda0eecc95b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85d23bda83101f4c278337428dc15eda0eecc95b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "14aff815df1efbbc573df75b7fc65017e9399c84",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14aff815df1efbbc573df75b7fc65017e9399c84",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/14aff815df1efbbc573df75b7fc65017e9399c84"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 57,
    "deletions": 0
  },
  "files": [
    {
      "sha": "cf5d7839f6a86a1fbacbcddd41c40d6ba6a4dabc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85d23bda83101f4c278337428dc15eda0eecc95b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85d23bda83101f4c278337428dc15eda0eecc95b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=85d23bda83101f4c278337428dc15eda0eecc95b",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class unop_sizeof_operation): New.\n+\t* ax-gdb.c (unop_sizeof_operation::do_generate_ax): New method.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class unop_addr_operation): New."
    },
    {
      "sha": "756f4d7969aa86f36b7528a73a4eed0ce91e894f",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85d23bda83101f4c278337428dc15eda0eecc95b/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85d23bda83101f4c278337428dc15eda0eecc95b/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=85d23bda83101f4c278337428dc15eda0eecc95b",
      "patch": "@@ -2491,6 +2491,29 @@ comma_operation::do_generate_ax (struct expression *exp,\n   /* It's the consumer's responsibility to trace the right operand.  */\n }\n \n+void\n+unop_sizeof_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t       struct agent_expr *ax,\n+\t\t\t\t       struct axs_value *value,\n+\t\t\t\t       struct type *cast_type)\n+{\n+  /* We don't care about the value of the operand expression; we only\n+     care about its type.  However, in the current arrangement, the\n+     only way to find an expression's type is to generate code for it.\n+     So we generate code for the operand, and then throw it away,\n+     replacing it with code that simply pushes its size.  */\n+  int start = ax->len;\n+\n+  std::get<0> (m_storage)->generate_ax (exp, ax, value);\n+\n+  /* Throw away the code we just generated.  */\n+  ax->len = start;\n+\n+  ax_const_l (ax, TYPE_LENGTH (value->type));\n+  value->kind = axs_rvalue;\n+  value->type = builtin_type (ax->gdbarch)->builtin_int;\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "8cb7281830bec8522fadb0dc1da00d0a15ce658f",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85d23bda83101f4c278337428dc15eda0eecc95b/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85d23bda83101f4c278337428dc15eda0eecc95b/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=85d23bda83101f4c278337428dc15eda0eecc95b",
      "patch": "@@ -1582,6 +1582,35 @@ class unop_addr_operation\n   }\n };\n \n+/* Implement 'sizeof'.  */\n+class unop_sizeof_operation\n+  : public maybe_constant_operation<operation_up>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    if (noside == EVAL_SKIP)\n+      return eval_skip_value (exp);\n+    return std::get<0> (m_storage)->evaluate_for_sizeof (exp, noside);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return UNOP_SIZEOF; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}