{
  "sha": "199b4314efbd419d6957e366e13a14cd87cea5e4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTk5YjQzMTRlZmJkNDE5ZDY5NTdlMzY2ZTEzYTE0Y2Q4N2NlYTVlNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-12T16:45:34Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-09-10T14:30:45Z"
    },
    "message": "Change map_matching_symbols to take a symbol_found_callback_ftype\n\nThis changes map_matching_symbols to take a\nsymbol_found_callback_ftype, rather than separate callback and data\nparameters.  This enables a future patch to clean up some existing\ncode so that it can more readily be shared.\n\ngdb/ChangeLog\n2019-09-10  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.c (aux_add_nonlocal_symbols): Change type.\n\t(add_nonlocal_symbols): Update.\n\t* dwarf2read.c (dw2_map_matching_symbols): Change type.\n\t* psymtab.c (map_block, psym_map_matching_symbols): Change type.\n\t* symfile-debug.c (debug_qf_map_matching_symbols): Change type.\n\t* symfile.h (struct quick_symbol_functions) <map_matching_symbols>:\n\tChange type of \"callback\".  Remove \"data\".",
    "tree": {
      "sha": "f1844b4639994e943190a9e15a9940c8bd7318e4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f1844b4639994e943190a9e15a9940c8bd7318e4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/199b4314efbd419d6957e366e13a14cd87cea5e4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/199b4314efbd419d6957e366e13a14cd87cea5e4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/199b4314efbd419d6957e366e13a14cd87cea5e4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/199b4314efbd419d6957e366e13a14cd87cea5e4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aebcfb76fc165795e67917cb67cf985c4dfdc577",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aebcfb76fc165795e67917cb67cf985c4dfdc577"
    }
  ],
  "stats": {
    "total": 140,
    "additions": 74,
    "deletions": 66
  },
  "files": [
    {
      "sha": "1865eeddbbb1fae9f591b8352741a8bd861c4d3d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=199b4314efbd419d6957e366e13a14cd87cea5e4",
      "patch": "@@ -1,3 +1,13 @@\n+2019-09-10  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.c (aux_add_nonlocal_symbols): Change type.\n+\t(add_nonlocal_symbols): Update.\n+\t* dwarf2read.c (dw2_map_matching_symbols): Change type.\n+\t* psymtab.c (map_block, psym_map_matching_symbols): Change type.\n+\t* symfile-debug.c (debug_qf_map_matching_symbols): Change type.\n+\t* symfile.h (struct quick_symbol_functions) <map_matching_symbols>:\n+\tChange type of \"callback\".  Remove \"data\".\n+\n \n 2019-09-09  Ali Tamur  <tamur@google.com>\n "
    },
    {
      "sha": "d677acdb60e7066e9ea573f3fafaaeab5a38615e",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 18,
      "deletions": 16,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=199b4314efbd419d6957e366e13a14cd87cea5e4",
      "patch": "@@ -5331,21 +5331,22 @@ struct match_data\n   int found_sym;\n };\n \n-/* A callback for add_nonlocal_symbols that adds SYM, found in BLOCK,\n-   to a list of symbols.  DATA0 is a pointer to a struct match_data *\n+/* A callback for add_nonlocal_symbols that adds symbol, found in BSYM,\n+   to a list of symbols.  DATA is a pointer to a struct match_data *\n    containing the obstack that collects the symbol list, the file that SYM\n    must come from, a flag indicating whether a non-argument symbol has\n    been found in the current block, and the last argument symbol\n    passed in SYM within the current block (if any).  When SYM is null,\n    marking the end of a block, the argument symbol is added if no\n    other has been found.  */\n \n-static int\n-aux_add_nonlocal_symbols (const struct block *block, struct symbol *sym,\n-\t\t\t  void *data0)\n+static bool\n+aux_add_nonlocal_symbols (struct block_symbol *bsym,\n+\t\t\t  struct match_data *data)\n {\n-  struct match_data *data = (struct match_data *) data0;\n-  \n+  const struct block *block = bsym->block;\n+  struct symbol *sym = bsym->symbol;\n+\n   if (sym == NULL)\n     {\n       if (!data->found_sym && data->arg_sym != NULL) \n@@ -5358,7 +5359,7 @@ aux_add_nonlocal_symbols (const struct block *block, struct symbol *sym,\n   else \n     {\n       if (SYMBOL_CLASS (sym) == LOC_UNRESOLVED)\n-\treturn 0;\n+\treturn true;\n       else if (SYMBOL_IS_ARGUMENT (sym))\n \tdata->arg_sym = sym;\n       else\n@@ -5369,7 +5370,7 @@ aux_add_nonlocal_symbols (const struct block *block, struct symbol *sym,\n \t\t\t   block);\n \t}\n     }\n-  return 0;\n+  return true;\n }\n \n /* Helper for add_nonlocal_symbols.  Find symbols in DOMAIN which are\n@@ -5540,20 +5541,23 @@ add_nonlocal_symbols (struct obstack *obstackp,\n \n   bool is_wild_match = lookup_name.ada ().wild_match_p ();\n \n+  auto callback = [&] (struct block_symbol *bsym)\n+    {\n+      return aux_add_nonlocal_symbols (bsym, &data);\n+    };\n+\n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n       data.objfile = objfile;\n \n       if (is_wild_match)\n \tobjfile->sf->qf->map_matching_symbols (objfile, lookup_name.name ().c_str (),\n-\t\t\t\t\t       domain, global,\n-\t\t\t\t\t       aux_add_nonlocal_symbols, &data,\n+\t\t\t\t\t       domain, global, callback,\n \t\t\t\t\t       symbol_name_match_type::WILD,\n \t\t\t\t\t       NULL);\n       else\n \tobjfile->sf->qf->map_matching_symbols (objfile, lookup_name.name ().c_str (),\n-\t\t\t\t\t       domain, global,\n-\t\t\t\t\t       aux_add_nonlocal_symbols, &data,\n+\t\t\t\t\t       domain, global, callback,\n \t\t\t\t\t       symbol_name_match_type::FULL,\n \t\t\t\t\t       compare_names);\n \n@@ -5577,9 +5581,7 @@ add_nonlocal_symbols (struct obstack *obstackp,\n         {\n \t  data.objfile = objfile;\n \t  objfile->sf->qf->map_matching_symbols (objfile, name1.c_str (),\n-\t\t\t\t\t\t domain, global,\n-\t\t\t\t\t\t aux_add_nonlocal_symbols,\n-\t\t\t\t\t\t &data,\n+\t\t\t\t\t\t domain, global, callback,\n \t\t\t\t\t\t symbol_name_match_type::FULL,\n \t\t\t\t\t\t compare_names);\n \t}"
    },
    {
      "sha": "cccc493b29126da1cdb93eeabfd0eb945d6dc355",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=199b4314efbd419d6957e366e13a14cd87cea5e4",
      "patch": "@@ -4184,13 +4184,13 @@ dw2_expand_symtabs_with_fullname (struct objfile *objfile,\n }\n \n static void\n-dw2_map_matching_symbols (struct objfile *objfile,\n-\t\t\t  const char * name, domain_enum domain,\n-\t\t\t  int global,\n-\t\t\t  int (*callback) (const struct block *,\n-\t\t\t\t\t   struct symbol *, void *),\n-\t\t\t  void *data, symbol_name_match_type match,\n-\t\t\t  symbol_compare_ftype *ordered_compare)\n+dw2_map_matching_symbols\n+  (struct objfile *objfile,\n+   const char * name, domain_enum domain,\n+   int global,\n+   gdb::function_view<symbol_found_callback_ftype> callback,\n+   symbol_name_match_type match,\n+   symbol_compare_ftype *ordered_compare)\n {\n   /* Currently unimplemented; used for Ada.  The function can be called if the\n      current language is Ada for a non-Ada objfile using GNU index.  As Ada"
    },
    {
      "sha": "cd577bc4c53bdeaf4098d1b576dde4ff13dce1cf",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=199b4314efbd419d6957e366e13a14cd87cea5e4",
      "patch": "@@ -1170,14 +1170,14 @@ psymtab_to_fullname (struct partial_symtab *ps)\n \n /* For all symbols, s, in BLOCK that are in DOMAIN and match NAME\n    according to the function MATCH, call CALLBACK(BLOCK, s, DATA).\n-   BLOCK is assumed to come from OBJFILE.  Returns 1 iff CALLBACK\n-   ever returns non-zero, and otherwise returns 0.  */\n+   BLOCK is assumed to come from OBJFILE.  Returns false iff CALLBACK\n+   ever returns false, and otherwise returns true.  */\n \n-static int\n+static bool\n map_block (const char *name, domain_enum domain, struct objfile *objfile,\n \t   const struct block *block,\n-\t   int (*callback) (const struct block *, struct symbol *, void *),\n-\t   void *data, symbol_name_match_type match)\n+\t   gdb::function_view<symbol_found_callback_ftype> callback,\n+\t   symbol_name_match_type match)\n {\n   struct block_iterator iter;\n   struct symbol *sym;\n@@ -1191,26 +1191,26 @@ map_block (const char *name, domain_enum domain, struct objfile *objfile,\n       if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n \t\t\t\t SYMBOL_DOMAIN (sym), domain))\n \t{\n-\t  if (callback (block, sym, data))\n-\t    return 1;\n+\t  struct block_symbol block_sym = {sym, block};\n+\t  if (!callback (&block_sym))\n+\t    return false;\n \t}\n     }\n \n-  return 0;\n+  return true;\n }\n \n /* Psymtab version of map_matching_symbols.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n static void\n-psym_map_matching_symbols (struct objfile *objfile,\n-\t\t\t   const char *name, domain_enum domain,\n-\t\t\t   int global,\n-\t\t\t   int (*callback) (const struct block *,\n-\t\t\t\t\t    struct symbol *, void *),\n-\t\t\t   void *data,\n-\t\t\t   symbol_name_match_type match,\n-\t\t\t   symbol_compare_ftype *ordered_compare)\n+psym_map_matching_symbols\n+  (struct objfile *objfile,\n+   const char *name, domain_enum domain,\n+   int global,\n+   gdb::function_view<symbol_found_callback_ftype> callback,\n+   symbol_name_match_type match,\n+   symbol_compare_ftype *ordered_compare)\n {\n   const int block_kind = global ? GLOBAL_BLOCK : STATIC_BLOCK;\n \n@@ -1227,10 +1227,10 @@ psym_map_matching_symbols (struct objfile *objfile,\n \t  if (cust == NULL)\n \t    continue;\n \t  block = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust), block_kind);\n-\t  if (map_block (name, domain, objfile, block,\n-\t\t\t callback, data, match))\n+\t  if (!map_block (name, domain, objfile, block, callback, match))\n \t    return;\n-\t  if (callback (block, NULL, data))\n+\t  struct block_symbol block_sym = {nullptr, block};\n+\t  if (!callback (&block_sym))\n \t    return;\n \t}\n     }"
    },
    {
      "sha": "d36c192ccc9bca749f98691b9b4a6a853850e776",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 9,
      "deletions": 12,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=199b4314efbd419d6957e366e13a14cd87cea5e4",
      "patch": "@@ -228,30 +228,27 @@ debug_qf_expand_symtabs_with_fullname (struct objfile *objfile,\n }\n \n static void\n-debug_qf_map_matching_symbols (struct objfile *objfile,\n-\t\t\t       const char *name, domain_enum domain,\n-\t\t\t       int global,\n-\t\t\t       int (*callback) (const struct block *,\n-\t\t\t\t\t\tstruct symbol *, void *),\n-\t\t\t       void *data,\n-\t\t\t       symbol_name_match_type match,\n-\t\t\t       symbol_compare_ftype *ordered_compare)\n+debug_qf_map_matching_symbols\n+  (struct objfile *objfile,\n+   const char *name, domain_enum domain,\n+   int global,\n+   gdb::function_view<symbol_found_callback_ftype> callback,\n+   symbol_name_match_type match,\n+   symbol_compare_ftype *ordered_compare)\n {\n   const struct debug_sym_fns_data *debug_data\n     = symfile_debug_objfile_data_key.get (objfile);\n \n   fprintf_filtered (gdb_stdlog,\n-\t\t    \"qf->map_matching_symbols (%s, \\\"%s\\\", %s, %d, %s, %s, %s, %s)\\n\",\n+\t\t    \"qf->map_matching_symbols (%s, \\\"%s\\\", %s, %d, %s, %s)\\n\",\n \t\t    objfile_debug_name (objfile), name,\n \t\t    domain_name (domain), global,\n-\t\t    host_address_to_string (callback),\n-\t\t    host_address_to_string (data),\n \t\t    plongest ((LONGEST) match),\n \t\t    host_address_to_string (ordered_compare));\n \n   debug_data->real_sf->qf->map_matching_symbols (objfile, name,\n \t\t\t\t\t\t domain, global,\n-\t\t\t\t\t\t callback, data,\n+\t\t\t\t\t\t callback,\n \t\t\t\t\t\t match,\n \t\t\t\t\t\t ordered_compare);\n }"
    },
    {
      "sha": "cf9488881ab03327c3df1a698a48f81fbcf5751f",
      "filename": "gdb/symfile.h",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/symfile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/199b4314efbd419d6957e366e13a14cd87cea5e4/gdb/symfile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.h?ref=199b4314efbd419d6957e366e13a14cd87cea5e4",
      "patch": "@@ -212,7 +212,7 @@ struct quick_symbol_functions\n      and for which MATCH (symbol name, NAME) == 0, passing each to \n      CALLBACK, reading in partial symbol tables as needed.  Look\n      through global symbols if GLOBAL and otherwise static symbols.\n-     Passes NAME, NAMESPACE, and DATA to CALLBACK with each symbol\n+     Passes NAME and NAMESPACE to CALLBACK with each symbol\n      found.  After each block is processed, passes NULL to CALLBACK.\n      MATCH must be weaker than strcmp_iw_ordered in the sense that\n      strcmp_iw_ordered(x,y) == 0 --> MATCH(x,y) == 0.  ORDERED_COMPARE,\n@@ -222,17 +222,16 @@ struct quick_symbol_functions\n      and \n             strcmp_iw_ordered(x,y) <= 0 --> ORDERED_COMPARE(x,y) <= 0\n      (allowing strcmp_iw_ordered(x,y) < 0 while ORDERED_COMPARE(x, y) == 0).\n-     CALLBACK returns 0 to indicate that the scan should continue, or\n-     non-zero to indicate that the scan should be terminated.  */\n-\n-  void (*map_matching_symbols) (struct objfile *,\n-\t\t\t\tconst char *name, domain_enum domain,\n-\t\t\t\tint global,\n-\t\t\t\tint (*callback) (const struct block *,\n-\t\t\t\t\t\t struct symbol *, void *),\n-\t\t\t\tvoid *data,\n-\t\t\t\tsymbol_name_match_type match,\n-\t\t\t\tsymbol_compare_ftype *ordered_compare);\n+     CALLBACK returns true to indicate that the scan should continue, or\n+     false to indicate that the scan should be terminated.  */\n+\n+  void (*map_matching_symbols)\n+    (struct objfile *,\n+     const char *name, domain_enum domain,\n+     int global,\n+     gdb::function_view<symbol_found_callback_ftype> callback,\n+     symbol_name_match_type match,\n+     symbol_compare_ftype *ordered_compare);\n \n   /* Expand all symbol tables in OBJFILE matching some criteria.\n "
    }
  ]
}