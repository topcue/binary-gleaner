{
  "sha": "d3473f0c4b8e8d791ed87b1919a666bc368497dc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDM0NzNmMGM0YjhlOGQ3OTFlZDg3YjE5MTlhNjY2YmMzNjg0OTdkYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-27T15:13:49Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:13:49Z"
    },
    "message": "Add dwarf2_per_cu_data::index\n\nCurrently, a dwarf2_per_cu_data can hold a link to the corresponding\nexpanded compunit_symtab.  However, the dwarf2_per_cu_data objects are\nshared across objfiles, a simple pointer won't work: each objfile\nsharing the dwarf2_per_cu_data instance will have a corresponding\ncompunit_symtab.\n\nInstead, this link will be stored in the dwarf2_per_objfile object\n(which will contain the objfile-specific data).  To enable this, we add\nan index to each dwarf2_per_cu_data and signatured_type.  The data\nstructure in the dwarf2_per_objfile will use this new index to map a\ndwarf2_per_cu_data to its corresponding compunit_symtab, for this\nobjfile.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.h (struct dwarf2_per_objfile) <allocate_per_cu,\n\tallocate_signatured_type>: Declare new methods.\n\t<m_num_psymtabs>: New member.\n\t(struct dwarf2_per_cu_data) <index>: New member.\n\t* dwarf2/read.c (dwarf2_per_objfile::allocate_per_cu)\n\t(dwarf2_per_objfile::allocate_signatured_type): New methods.\n\t(create_cu_from_index_list): Use allocate_per_cu.\n\t(create_signatured_type_table_from_index)\n\t(create_signatured_type_table_from_debug_names)\n\t(create_debug_type_hash_table, add_type_unit)\n\t(read_comp_units_from_section): Use allocate_signatured_type.\n\nChange-Id: I7733479a38ce82a5015cb184c8acce5f8bbf2e69",
    "tree": {
      "sha": "5030507a84d80fab2e2856fb031b9970fa6bc756",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5030507a84d80fab2e2856fb031b9970fa6bc756"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d3473f0c4b8e8d791ed87b1919a666bc368497dc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3473f0c4b8e8d791ed87b1919a666bc368497dc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d3473f0c4b8e8d791ed87b1919a666bc368497dc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3473f0c4b8e8d791ed87b1919a666bc368497dc/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5717c425a62c8e15a5936acdfa2bac2732aeb9b4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5717c425a62c8e15a5936acdfa2bac2732aeb9b4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5717c425a62c8e15a5936acdfa2bac2732aeb9b4"
    }
  ],
  "stats": {
    "total": 79,
    "additions": 60,
    "deletions": 19
  },
  "files": [
    {
      "sha": "4f49e3992c8d8e1a6f3ae2022bfe6ba65aa8b230",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3473f0c4b8e8d791ed87b1919a666bc368497dc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3473f0c4b8e8d791ed87b1919a666bc368497dc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d3473f0c4b8e8d791ed87b1919a666bc368497dc",
      "patch": "@@ -1,3 +1,17 @@\n+2020-05-27  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.h (struct dwarf2_per_objfile) <allocate_per_cu,\n+\tallocate_signatured_type>: Declare new methods.\n+\t<m_num_psymtabs>: New member.\n+\t(struct dwarf2_per_cu_data) <index>: New member.\n+\t* dwarf2/read.c (dwarf2_per_objfile::allocate_per_cu)\n+\t(dwarf2_per_objfile::allocate_signatured_type): New methods.\n+\t(create_cu_from_index_list): Use allocate_per_cu.\n+\t(create_signatured_type_table_from_index)\n+\t(create_signatured_type_table_from_debug_names)\n+\t(create_debug_type_hash_table, add_type_unit)\n+\t(read_comp_units_from_section): Use allocate_signatured_type.\n+\n 2020-05-27  Tom Tromey  <tom@tromey.com>\n \n \t* psymtab.c (partial_map_expand_apply)"
    },
    {
      "sha": "8b4f38585656380e733be925873d13d3bb79e23b",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 27,
      "deletions": 19,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3473f0c4b8e8d791ed87b1919a666bc368497dc/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3473f0c4b8e8d791ed87b1919a666bc368497dc/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=d3473f0c4b8e8d791ed87b1919a666bc368497dc",
      "patch": "@@ -2408,6 +2408,26 @@ dwarf2_per_objfile::get_tu (int index)\n   return this->all_type_units[index];\n }\n \n+/* See read.h.  */\n+\n+dwarf2_per_cu_data *\n+dwarf2_per_objfile::allocate_per_cu ()\n+{\n+  dwarf2_per_cu_data *result = OBSTACK_ZALLOC (&obstack, dwarf2_per_cu_data);\n+  result->index = m_num_psymtabs++;\n+  return result;\n+}\n+\n+/* See read.h.  */\n+\n+signatured_type *\n+dwarf2_per_objfile::allocate_signatured_type ()\n+{\n+  signatured_type *result = OBSTACK_ZALLOC (&obstack, signatured_type);\n+  result->per_cu.index = m_num_psymtabs++;\n+  return result;\n+}\n+\n /* Return a new dwarf2_per_cu_data allocated on the dwarf2_per_objfile\n    obstack, and constructed with the specified field values.  */\n \n@@ -2417,9 +2437,7 @@ create_cu_from_index_list (struct dwarf2_per_objfile *dwarf2_per_objfile,\n                           int is_dwz,\n                           sect_offset sect_off, ULONGEST length)\n {\n-  dwarf2_per_cu_data *the_cu\n-    = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n-                     struct dwarf2_per_cu_data);\n+  dwarf2_per_cu_data *the_cu = dwarf2_per_objfile->allocate_per_cu ();\n   the_cu->sect_off = sect_off;\n   the_cu->length = length;\n   the_cu->dwarf2_per_objfile = dwarf2_per_objfile;\n@@ -2508,8 +2526,7 @@ create_signatured_type_table_from_index\n       signature = extract_unsigned_integer (bytes + 16, 8, BFD_ENDIAN_LITTLE);\n       bytes += 3 * 8;\n \n-      sig_type = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n-\t\t\t\t struct signatured_type);\n+      sig_type = dwarf2_per_objfile->allocate_signatured_type ();\n       sig_type->signature = signature;\n       sig_type->type_offset_in_tu = type_offset_in_tu;\n       sig_type->per_cu.is_debug_types = 1;\n@@ -2565,8 +2582,7 @@ create_signatured_type_table_from_debug_names\n \t\t\t\t     section->buffer + to_underlying (sect_off),\n \t\t\t\t     rcuh_kind::TYPE);\n \n-      sig_type = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n-\t\t\t\t struct signatured_type);\n+      sig_type = dwarf2_per_objfile->allocate_signatured_type ();\n       sig_type->signature = cu_header.signature;\n       sig_type->type_offset_in_tu = cu_header.type_cu_offset_in_tu;\n       sig_type->per_cu.is_debug_types = 1;\n@@ -6242,8 +6258,7 @@ create_debug_type_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t  /* N.B.: type_offset is not usable if this type uses a DWO file.\n \t     The real type_offset is in the DWO file.  */\n \t  dwo_tu = NULL;\n-\t  sig_type = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n-\t\t\t\t     struct signatured_type);\n+\t  sig_type = dwarf2_per_objfile->allocate_signatured_type ();\n \t  sig_type->signature = header.signature;\n \t  sig_type->type_offset_in_tu = header.type_cu_offset_in_tu;\n \t  sig_type->per_cu.dwarf2_per_objfile = dwarf2_per_objfile;\n@@ -6358,8 +6373,7 @@ add_type_unit (struct dwarf2_per_objfile *dwarf2_per_objfile, ULONGEST sig,\n       == dwarf2_per_objfile->all_type_units.capacity ())\n     ++dwarf2_per_objfile->tu_stats.nr_all_type_units_reallocs;\n \n-  signatured_type *sig_type = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n-\t\t\t\t\t      struct signatured_type);\n+  signatured_type *sig_type = dwarf2_per_objfile->allocate_signatured_type ();\n \n   dwarf2_per_objfile->all_type_units.push_back (sig_type);\n   sig_type->signature = sig;\n@@ -7964,16 +7978,10 @@ read_comp_units_from_section (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \n       /* Save the compilation unit for later lookup.  */\n       if (cu_header.unit_type != DW_UT_type)\n-\t{\n-\t  this_cu = XOBNEW (&dwarf2_per_objfile->obstack,\n-\t\t\t    struct dwarf2_per_cu_data);\n-\t  memset (this_cu, 0, sizeof (*this_cu));\n-\t}\n+\tthis_cu = dwarf2_per_objfile->allocate_per_cu ();\n       else\n \t{\n-\t  auto sig_type = XOBNEW (&dwarf2_per_objfile->obstack,\n-\t\t\t\t  struct signatured_type);\n-\t  memset (sig_type, 0, sizeof (*sig_type));\n+\t  auto sig_type = dwarf2_per_objfile->allocate_signatured_type ();\n \t  sig_type->signature = cu_header.signature;\n \t  sig_type->type_offset_in_tu = cu_header.type_cu_offset_in_tu;\n \t  this_cu = &sig_type->per_cu;"
    },
    {
      "sha": "bbc4f96b7cf4d4dea765dfe4a5991679e9097678",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3473f0c4b8e8d791ed87b1919a666bc368497dc/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3473f0c4b8e8d791ed87b1919a666bc368497dc/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=d3473f0c4b8e8d791ed87b1919a666bc368497dc",
      "patch": "@@ -111,6 +111,16 @@ struct dwarf2_per_objfile\n   /* Free all cached compilation units.  */\n   void free_cached_comp_units ();\n \n+  /* A convenience function to allocate a dwarf2_per_cu_data.  The\n+     returned object has its \"index\" field set properly.  The object\n+     is allocated on the dwarf2_per_objfile obstack.  */\n+  dwarf2_per_cu_data *allocate_per_cu ();\n+\n+  /* A convenience function to allocate a signatured_type.  The\n+     returned object has its \"index\" field set properly.  The object\n+     is allocated on the dwarf2_per_objfile obstack.  */\n+  signatured_type *allocate_signatured_type ();\n+\n   /* Return pointer to string at .debug_line_str offset as read from BUF.\n      BUF is assumed to be in a compilation unit described by CU_HEADER.\n      Return *BYTES_READ_PTR count of bytes read from BUF.  */\n@@ -249,6 +259,12 @@ struct dwarf2_per_objfile\n \n   /* CUs that are queued to be read.  */\n   std::queue<dwarf2_queue_item> queue;\n+\n+private:\n+\n+  /* The total number of per_cu and signatured_type objects that have\n+     been created so far for this reader.  */\n+  size_t m_num_psymtabs = 0;\n };\n \n /* Get the dwarf2_per_objfile associated to OBJFILE.  */\n@@ -322,6 +338,9 @@ struct dwarf2_per_cu_data\n      This flag is only valid if is_debug_types is true.  */\n   unsigned int tu_read : 1;\n \n+  /* Our index in the unshared \"symtabs\" vector.  */\n+  unsigned index;\n+\n   /* The section this CU/TU lives in.\n      If the DIE refers to a DWO file, this is always the original die,\n      not the DWO file.  */"
    }
  ]
}