{
  "sha": "bffa1015cd6cb4a2a4bd1276ed749d150684dd5c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmZmYTEwMTVjZDZjYjRhMmE0YmQxMjc2ZWQ3NDlkMTUwNjg0ZGQ1Yw==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-28T12:27:30Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-28T12:27:30Z"
    },
    "message": "AArch64: View the pseudo V registers as vectors\n\nWhen SVE is enabled, the V registers become pseudo registers based\non the Z registers.  They should look the same as they do when\nthere is no SVE.\n\nThe existing code viewed them as single value registers. Switch\nthis to a vector.\n\ngdb/ChangeLog:\n\n\t* aarch64-tdep.c (aarch64_vnv_type): Use vector types.",
    "tree": {
      "sha": "4ff1e3f204350fb5738e43ea91c891d8feb3cafb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4ff1e3f204350fb5738e43ea91c891d8feb3cafb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bffa1015cd6cb4a2a4bd1276ed749d150684dd5c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bffa1015cd6cb4a2a4bd1276ed749d150684dd5c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bffa1015cd6cb4a2a4bd1276ed749d150684dd5c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bffa1015cd6cb4a2a4bd1276ed749d150684dd5c/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fc96163a3ea7761f5353591c825027090942e330",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc96163a3ea7761f5353591c825027090942e330",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fc96163a3ea7761f5353591c825027090942e330"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 52,
    "deletions": 5
  },
  "files": [
    {
      "sha": "0bd86ee26dd1309669a7d688ee57a5b4c0b7cd5b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bffa1015cd6cb4a2a4bd1276ed749d150684dd5c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bffa1015cd6cb4a2a4bd1276ed749d150684dd5c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bffa1015cd6cb4a2a4bd1276ed749d150684dd5c",
      "patch": "@@ -1,3 +1,7 @@\n+2019-03-28  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* aarch64-tdep.c (aarch64_vnv_type): Use vector types.\n+\n 2019-03-28  Alan Hayward  <alan.hayward@arm.com>\n \n \t* features/aarch64-sve.c (create_feature_aarch64_sve): Add q view."
    },
    {
      "sha": "68b6549ba9b2a421fc29ede97454cd6c0640ec29",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 48,
      "deletions": 5,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bffa1015cd6cb4a2a4bd1276ed749d150684dd5c/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bffa1015cd6cb4a2a4bd1276ed749d150684dd5c/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=bffa1015cd6cb4a2a4bd1276ed749d150684dd5c",
      "patch": "@@ -1976,14 +1976,57 @@ aarch64_vnv_type (struct gdbarch *gdbarch)\n \n   if (tdep->vnv_type == NULL)\n     {\n+      /* The other AArch64 psuedo registers (Q,D,H,S,B) refer to a single value\n+\t slice from the non-pseudo vector registers.  However NEON V registers\n+\t are always vector registers, and need constructing as such.  */\n+      const struct builtin_type *bt = builtin_type (gdbarch);\n+\n       struct type *t = arch_composite_type (gdbarch, \"__gdb_builtin_type_vnv\",\n \t\t\t\t\t    TYPE_CODE_UNION);\n \n-      append_composite_type_field (t, \"d\", aarch64_vnd_type (gdbarch));\n-      append_composite_type_field (t, \"s\", aarch64_vns_type (gdbarch));\n-      append_composite_type_field (t, \"h\", aarch64_vnh_type (gdbarch));\n-      append_composite_type_field (t, \"b\", aarch64_vnb_type (gdbarch));\n-      append_composite_type_field (t, \"q\", aarch64_vnq_type (gdbarch));\n+      struct type *sub = arch_composite_type (gdbarch, \"__gdb_builtin_type_vnd\",\n+\t\t\t\t TYPE_CODE_UNION);\n+      append_composite_type_field (sub, \"f\",\n+\t\t\t\t   init_vector_type (bt->builtin_double, 2));\n+      append_composite_type_field (sub, \"u\",\n+\t\t\t\t   init_vector_type (bt->builtin_uint64, 2));\n+      append_composite_type_field (sub, \"s\",\n+\t\t\t\t   init_vector_type (bt->builtin_int64, 2));\n+      append_composite_type_field (t, \"d\", sub);\n+\n+      sub = arch_composite_type (gdbarch, \"__gdb_builtin_type_vns\",\n+\t\t\t\t TYPE_CODE_UNION);\n+      append_composite_type_field (sub, \"f\",\n+\t\t\t\t   init_vector_type (bt->builtin_float, 4));\n+      append_composite_type_field (sub, \"u\",\n+\t\t\t\t   init_vector_type (bt->builtin_uint32, 4));\n+      append_composite_type_field (sub, \"s\",\n+\t\t\t\t   init_vector_type (bt->builtin_int32, 4));\n+      append_composite_type_field (t, \"s\", sub);\n+\n+      sub = arch_composite_type (gdbarch, \"__gdb_builtin_type_vnh\",\n+\t\t\t\t TYPE_CODE_UNION);\n+      append_composite_type_field (sub, \"u\",\n+\t\t\t\t   init_vector_type (bt->builtin_uint16, 8));\n+      append_composite_type_field (sub, \"s\",\n+\t\t\t\t   init_vector_type (bt->builtin_int16, 8));\n+      append_composite_type_field (t, \"h\", sub);\n+\n+      sub = arch_composite_type (gdbarch, \"__gdb_builtin_type_vnb\",\n+\t\t\t\t TYPE_CODE_UNION);\n+      append_composite_type_field (sub, \"u\",\n+\t\t\t\t   init_vector_type (bt->builtin_uint8, 16));\n+      append_composite_type_field (sub, \"s\",\n+\t\t\t\t   init_vector_type (bt->builtin_int8, 16));\n+      append_composite_type_field (t, \"b\", sub);\n+\n+      sub = arch_composite_type (gdbarch, \"__gdb_builtin_type_vnq\",\n+\t\t\t\t TYPE_CODE_UNION);\n+      append_composite_type_field (sub, \"u\",\n+\t\t\t\t   init_vector_type (bt->builtin_uint128, 1));\n+      append_composite_type_field (sub, \"s\",\n+\t\t\t\t   init_vector_type (bt->builtin_int128, 1));\n+      append_composite_type_field (t, \"q\", sub);\n \n       tdep->vnv_type = t;\n     }"
    }
  ]
}