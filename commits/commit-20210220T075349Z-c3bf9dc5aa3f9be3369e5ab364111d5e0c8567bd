{
  "sha": "c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzNiZjlkYzVhYTNmOWJlMzM2OWU1YWIzNjQxMTFkNWUwYzg1NjdiZA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-18T10:18:16Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-20T07:53:49Z"
    },
    "message": "Include ld-lib.exp from ctf-lib.exp\n\n\t* testsuite/config/default.exp (ld_L_opt): Define.\n\t* testsuite/lib/ctf-lib.exp (load_common_lib): Delete.  Instead load\n\tld-lib.exp.\n\t(run_host_cmd, run_host_cmd_yesno, check_compiler_available): Delete.\n\t(compile_one_cc, check_ctf_available): Delete.",
    "tree": {
      "sha": "3ae6fa9d35c20050af2ee36f073e3647f0502365",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3ae6fa9d35c20050af2ee36f073e3647f0502365"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ca6afb81ca4c7633eea0f854a6c591070083959a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca6afb81ca4c7633eea0f854a6c591070083959a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ca6afb81ca4c7633eea0f854a6c591070083959a"
    }
  ],
  "stats": {
    "total": 183,
    "additions": 11,
    "deletions": 172
  },
  "files": [
    {
      "sha": "7a69476b9a974da32b8ce7cdfb00b6b2101ac458",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd",
      "patch": "@@ -1,3 +1,11 @@\n+2021-02-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/config/default.exp (ld_L_opt): Define.\n+\t* testsuite/lib/ctf-lib.exp (load_common_lib): Delete.  Instead load\n+\tld-lib.exp.\n+\t(run_host_cmd, run_host_cmd_yesno, check_compiler_available): Delete.\n+\t(compile_one_cc, check_ctf_available): Delete.\n+\n 2021-02-03  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* configure.ac (ac_cv_libctf_bfd_elf): Include string.h."
    },
    {
      "sha": "32e882d0fef0e88d4a53077941f93dc7066dc0fb",
      "filename": "libctf/testsuite/config/default.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd/libctf/testsuite/config/default.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd/libctf/testsuite/config/default.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/config/default.exp?ref=c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd",
      "patch": "@@ -41,6 +41,7 @@ if {![file isdirectory tmpdir/libctf]} then {\n     catch \"exec ln -s ../../../gas/as-new tmpdir/libctf/as\" status\n }\n set gcc_B_opt \"-B[pwd]/tmpdir/libctf/\"\n+set ld_L_opt \"\"\n \n # The \"make check\" target in the Makefile passes in\n # \"CC=$(CC_FOR_TARGET)\".  But, if the user invokes runtest directly,"
    },
    {
      "sha": "2f1742c8755e59ea102677bc3242bed532413559",
      "filename": "libctf/testsuite/lib/ctf-lib.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 172,
      "changes": 174,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd/libctf/testsuite/lib/ctf-lib.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd/libctf/testsuite/lib/ctf-lib.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/lib/ctf-lib.exp?ref=c3bf9dc5aa3f9be3369e5ab364111d5e0c8567bd",
      "patch": "@@ -18,12 +18,7 @@\n # Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n # MA 02110-1301, USA.\n \n-proc load_common_lib { name } {\n-    global srcdir\n-    load_file $srcdir/../../binutils/testsuite/lib/$name\n-}\n-\n-load_common_lib binutils-common.exp\n+load_file $srcdir/../../ld/testsuite/lib/ld-lib.exp\n \n proc run_native_host_cmd { command } {\n     global link_output\n@@ -51,124 +46,6 @@ proc run_native_host_cmd { command } {\n     return \"$run_output\"\n }\n \n-proc run_host_cmd { prog command } {\n-    global link_output\n-    global gcc_B_opt\n-    global gcc_ld_B_opt_tested\n-    global ld\n-\n-    if { ![is_remote host] && [which \"$prog\"] == 0 } then {\n-\tperror \"$prog does not exist\"\n-\treturn 0\n-    }\n-\n-    # If we are compiling with gcc, we want to add gcc_B_opt to flags.  However,\n-    # if $prog already has -B options, which might be the case when running gcc\n-    # out of a build directory, we want our -B options to come first.\n-    set gccexe $prog\n-    set gccparm [string first \" \" $gccexe]\n-    set gccflags \"\"\n-    if { $gccparm > 0 } then {\n-\tset gccflags [string range $gccexe $gccparm end]\n-\tset gccexe [string range $gccexe 0 $gccparm]\n-\tset prog $gccexe\n-    }\n-    set gccexe [string replace $gccexe 0 [string last \"/\" $gccexe] \"\"]\n-    if {[string match \"*cc*\" $gccexe] || [string match \"*++*\" $gccexe]} then {\n-\tset gccflags \"$gcc_B_opt $gccflags\"\n-\tif {![info exists gcc_ld_B_opt_tested]} {\n-\t    set gcc_ld_B_opt_tested 1\n-\t    set ld_version_message [run_host_cmd \"$ld\" \"--version\"]\n-\t    set gcc_ld_version_message [run_host_cmd \"$prog\" \"$gccflags -Wl,--version\"]\n-\t    if {[string first $ld_version_message $gcc_ld_version_message] < 0} {\n-\t\tperror \"************************************************************************\"\n-\t\tperror \"Your compiler driver ignores -B when choosing ld.\"\n-\t\tperror \"You will not be testing the new ld in many of the following tests.\"\n-\t\tset gcc_ld_version [run_host_cmd \"$prog\" \"$gccflags --print-prog-name=ld\"]\n-\t\tif {![string match \"\" $gcc_ld_version] && ![string match \"ld\" $gcc_ld_version]} {\n-\t\t    perror \"It seems you will be testing $gcc_ld_version instead.\"\n-\t\t}\n-\t\tperror \"************************************************************************\"\n-\t    }\n-\t}\n-    }\n-\n-    verbose -log \"$prog $gccflags $command\"\n-    set status [remote_exec host [concat sh -c [list \"$prog $gccflags $command 2>&1\"]] \"\" \"/dev/null\" \"libctf.tmp\"]\n-    remote_upload host \"libctf.tmp\"\n-    set run_output [file_contents \"libctf.tmp\"]\n-    regsub \"\\n$\" $run_output \"\" run_output\n-    if { [lindex $status 0] != 0 && [string match \"\" $run_output] } then {\n-\tappend run_output \"child process exited abnormally\"\n-    }\n-    remote_file build delete libctf.tmp\n-    remote_file host delete libctf.tmp\n-\n-    if [string match \"\" $run_output] then {\n-\treturn \"\"\n-    }\n-\n-    verbose -log \"$run_output\"\n-    return \"$run_output\"\n-}\n-\n-proc run_host_cmd_yesno { prog command } {\n-    global exec_output\n-    global errcnt warncnt\n-\n-    set exec_output [prune_warnings [run_host_cmd \"$prog\" \"$command\"]]\n-    # Ignore error and warning.\n-    set errcnt 0\n-    set warncnt 0\n-    if [string match \"\" $exec_output] then {\n-\treturn 1;\n-    }\n-    return 0;\n-}\n-\n-# Return true if we can build a program with the compiler.\n-# On some targets, CC might be defined, but libraries and startup\n-# code might be missing or require special options that the ld test\n-# harness doesn't know about.\n-\n-proc check_compiler_available { } {\n-    global compiler_available_saved\n-    global CC\n-\n-    if {![info exists compiler_available_saved]} {\n-\tif { [which $CC] == 0 } {\n-\t    set compiler_available_saved 0\n-\t    return 0\n-\t}\n-\n-\tset flags \"\"\n-\tif [board_info [target_info name] exists cflags] {\n-\t    append flags \" [board_info [target_info name] cflags]\"\n-\t}\n-\tif [board_info [target_info name] exists ldflags] {\n-\t    append flags \" [board_info [target_info name] ldflags]\"\n-\t}\n-\n-\tset basename \"tmpdir/compiler[pid]\"\n-\tset src ${basename}.c\n-\tset output ${basename}.out\n-\tset f [open $src \"w\"]\n-\tputs $f \"int main (void)\"\n-\tputs $f \"{\"\n-\tputs $f \"  return 0; \"\n-\tputs $f \"}\"\n-\tclose $f\n-\tif [is_remote host] {\n-\t    set src [remote_download host $src]\n-\t}\n-\tset compiler_available_saved [run_host_cmd_yesno \"$CC\" \"$flags $src -o $output\"]\n-\tremote_file host delete $src\n-\tremote_file host delete $output\n-\tfile delete $src\n-    }\n-    return $compiler_available_saved\n-}\n-\n # Compile and link a C source file for execution on the host.\n proc compile_link_one_host_cc { src output additional_args } {\n     global CC_FOR_HOST\n@@ -177,25 +54,6 @@ proc compile_link_one_host_cc { src output additional_args } {\n     return [run_native_host_cmd \"./libtool --quiet --tag=CC --mode=link $CC_FOR_HOST $CFLAGS $src -o $output $additional_args\" ]\n }\n \n-# Compile a C source file, with the specified additional_flags.\n-proc compile_one_cc { src output additional_flags } {\n-    global CC\n-    global CFLAGS\n-\n-    set flags \"\"\n-    if [board_info [target_info name] exists cflags] {\n-\tappend flags \" [board_info [target_info name] cflags]\"\n-    }\n-    if [board_info [target_info name] exists ldflags] {\n-\tappend flags \" [board_info [target_info name] ldflags]\"\n-    }\n-\n-    if [is_remote host] {\n-\tset src [remote_download host $src]\n-    }\n-    return [run_host_cmd \"$CC\" \"$flags $CFLAGS $additional_flags $src -o $output\"]\n-}\n-\n # run_lookup_test FILE\n #\n # Compile with the host compiler and link a .c file into a \"lookup\" binary, then\n@@ -234,7 +92,7 @@ proc compile_one_cc { src output additional_flags } {\n #\tAssemble the file SOURCE.c and pass it to the LOOKUP program.\n #\n #   nonshared:\n-#       If set, do not link with -shared.\n+#\tIf set, do not link with -shared.\n #\n #   link:\n #\tIf set, link the SOURCE together even if only one file is specified.\n@@ -393,31 +251,3 @@ proc run_lookup_test { name } {\n     pass $testname\n     return 0\n }\n-\n-# Returns true if the target compiler supports -gt\n-proc check_ctf_available { } {\n-    global ctf_available_saved\n-\n-    if {![info exists ctf_available_saved]} {\n-\tif { ![check_compiler_available] } {\n-\t    set ctf_available_saved 0\n-\t} else {\n-\t    set basename \"tmpdir/ctf_available[pid]\"\n-\t    set src ${basename}.c\n-\t    set output ${basename}.o\n-\t    set f [open $src \"w\"]\n-\t    puts $f \"int main() { return 0; }\"\n-\t    close $f\n-\t    set comp_output [compile_one_cc $src $output \"-gt -c\"]\n-            if { $comp_output == \"\"} {\n-                set ctf_available_saved 1\n-            } else {\n-                set ctf_available_saved 0\n-            }\n-\t    remote_file host delete $src\n-\t    remote_file host delete $output\n-\t    file delete $src\n-\t}\n-    }\n-    return $ctf_available_saved\n-}"
    }
  ]
}