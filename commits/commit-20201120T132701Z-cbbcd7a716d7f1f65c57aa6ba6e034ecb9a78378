{
  "sha": "cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2JiY2Q3YTcxNmQ3ZjFmNjVjNTdhYTZiYTZlMDM0ZWNiOWE3ODM3OA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-11-16T19:15:00Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-11-20T13:27:01Z"
    },
    "message": "language_lookup_primitive_type, std::function -> gdb::function_view\n\ngdb/ChangeLog:\n\n\t* language.c (language_arch_info::lookup_primitive_type): Use\n\tgdb::function_view instead of gdb::function.\n\t(template language_lookup_primitive_type): Rename to ...\n\t(language_lookup_primitive_type_1): ... this, and make static.\n\t(language_lookup_primitive_type(const struct language_defn *,\n\tstruct gdbarch *, const char *): Make non-template.\n\t(language_lookup_primitive_type(const struct language_defn *,\n\tstruct gdbarch *, std::function<bool (struct type *)>): Make\n\tnon-template and use gdb::function_view.\n\t* language.h (language_arch_info::lookup_primitive_type): Use\n\tgdb::function_view instead of std::function.\n\t(language_lookup_primitive_type): No longer template.\n\t* opencl-lang.c (lookup_opencl_vector_type): 'filter' is now a\n\tlambda instead of a std::function.",
    "tree": {
      "sha": "d2d5bd43aaa5a9adf354ff9f17945c285bc4ce04",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d2d5bd43aaa5a9adf354ff9f17945c285bc4ce04"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e6f6aa8d184c38230d9acd91a49aa0cbe3f37e42",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6f6aa8d184c38230d9acd91a49aa0cbe3f37e42",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e6f6aa8d184c38230d9acd91a49aa0cbe3f37e42"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 55,
    "deletions": 20
  },
  "files": [
    {
      "sha": "1208b4a5b215faa09b4b2076d7a721c8f6babbd2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378",
      "patch": "@@ -1,3 +1,20 @@\n+2020-11-20  Pedro Alves  <pedro@palves.net>\n+\n+\t* language.c (language_arch_info::lookup_primitive_type): Use\n+\tgdb::function_view instead of gdb::function.\n+\t(template language_lookup_primitive_type): Rename to ...\n+\t(language_lookup_primitive_type_1): ... this, and make static.\n+\t(language_lookup_primitive_type(const struct language_defn *,\n+\tstruct gdbarch *, const char *): Make non-template.\n+\t(language_lookup_primitive_type(const struct language_defn *,\n+\tstruct gdbarch *, std::function<bool (struct type *)>): Make\n+\tnon-template and use gdb::function_view.\n+\t* language.h (language_arch_info::lookup_primitive_type): Use\n+\tgdb::function_view instead of std::function.\n+\t(language_lookup_primitive_type): No longer template.\n+\t* opencl-lang.c (lookup_opencl_vector_type): 'filter' is now a\n+\tlambda instead of a std::function.\n+\n 2020-11-19  Andreas Arnez  <arnez@linux.ibm.com>\n \n \tPR tdep/26916"
    },
    {
      "sha": "5e64e6af45fc0ac64050483e15d02a37e08e88f2",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 19,
      "deletions": 12,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378",
      "patch": "@@ -1088,7 +1088,7 @@ language_arch_info::lookup_primitive_type (const char *name)\n \n struct type *\n language_arch_info::lookup_primitive_type\n-\t(std::function<bool (struct type *)> filter)\n+  (gdb::function_view<bool (struct type *)> filter)\n {\n   for (struct type_and_symbol &tas : primitive_types_and_symbols)\n     {\n@@ -1111,32 +1111,39 @@ language_arch_info::lookup_primitive_type_as_symbol (const char *name,\n   return nullptr;\n }\n \n-/* See language.h.  */\n+/* Helper for the language_lookup_primitive_type overloads to forward\n+   to the corresponding language's lookup_primitive_type overload.  */\n \n template<typename T>\n-struct type *\n-language_lookup_primitive_type (const struct language_defn *la,\n-\t\t\t\tstruct gdbarch *gdbarch,\n-\t\t\t\tT arg)\n+static struct type *\n+language_lookup_primitive_type_1 (const struct language_defn *la,\n+\t\t\t\t  struct gdbarch *gdbarch,\n+\t\t\t\t  T arg)\n {\n   struct language_gdbarch *ld =\n     (struct language_gdbarch *) gdbarch_data (gdbarch, language_gdbarch_data);\n   return ld->arch_info[la->la_language].lookup_primitive_type (arg);\n }\n \n-/* Template instantiation.  */\n+/* See language.h.  */\n \n-template struct type *\n+struct type *\n language_lookup_primitive_type (const struct language_defn *la,\n \t\t\t\tstruct gdbarch *gdbarch,\n-\t\t\t\tconst char *arg);\n+\t\t\t\tconst char *name)\n+{\n+  return language_lookup_primitive_type_1 (la, gdbarch, name);\n+}\n \n-/* Template instantiation.  */\n+/* See language.h.  */\n \n-template struct type *\n+struct type *\n language_lookup_primitive_type (const struct language_defn *la,\n \t\t\t\tstruct gdbarch *gdbarch,\n-\t\t\t\tstd::function<bool (struct type *)> arg);\n+\t\t\t\tgdb::function_view<bool (struct type *)> filter)\n+{\n+  return language_lookup_primitive_type_1 (la, gdbarch, filter);\n+}\n \n /* See language.h.  */\n "
    },
    {
      "sha": "e955340440de57d269c86a2770b0b6ea06a51bfc",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 18,
      "deletions": 7,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378",
      "patch": "@@ -140,7 +140,7 @@ struct language_arch_info\n   /* Lookup a primitive type for which FILTER returns true.  Will return\n      nullptr if no matching type is found.  */\n   struct type *lookup_primitive_type\n-\t(std::function<bool (struct type *)> filter);\n+    (gdb::function_view<bool (struct type *)> filter);\n \n   /* Lookup a primitive type called NAME and return the type as a symbol.\n      LANG is the language for which type is being looked up.  */\n@@ -719,15 +719,26 @@ struct type *language_bool_type (const struct language_defn *l,\n struct type *language_string_char_type (const struct language_defn *l,\n \t\t\t\t\tstruct gdbarch *gdbarch);\n \n-/* Look up a type from the set of OS/ABI specific types defined in GDBARCH\n-   for language L.  ARG is used for selecting the matching type, and is\n-   passed through to the corresponding lookup_primitive_type member\n-   function inside the language_arch_info class.  */\n+/* Look up a type from the set of OS/ABI specific types defined in\n+   GDBARCH for language L.  NAME is used for selecting the matching\n+   type, and is passed through to the corresponding\n+   lookup_primitive_type member function inside the language_arch_info\n+   class.  */\n \n-template<typename T>\n struct type *language_lookup_primitive_type (const struct language_defn *l,\n \t\t\t\t\t     struct gdbarch *gdbarch,\n-\t\t\t\t\t     T arg);\n+\t\t\t\t\t     const char *name);\n+\n+/* Look up a type from the set of OS/ABI specific types defined in\n+   GDBARCH for language L.  FILTER is used for selecting the matching\n+   type, and is passed through to the corresponding\n+   lookup_primitive_type member function inside the language_arch_info\n+   class.  */\n+\n+struct type *language_lookup_primitive_type\n+  (const struct language_defn *la,\n+   struct gdbarch *gdbarch,\n+   gdb::function_view<bool (struct type *)> filter);\n \n /* Wrapper around language_lookup_primitive_type to return the\n    corresponding symbol.  */"
    },
    {
      "sha": "830a6acaaabc317043ca02fe8b1fed3ec516f114",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=cbbcd7a716d7f1f65c57aa6ba6e034ecb9a78378",
      "patch": "@@ -46,7 +46,7 @@ lookup_opencl_vector_type (struct gdbarch *gdbarch, enum type_code code,\n   /* Triple vectors have the size of a quad vector.  */\n   length = (n == 3) ?  el_length * 4 : el_length * n;\n \n-  std::function<bool (struct type *)> filter = [&] (struct type *type)\n+  auto filter = [&] (struct type *type)\n   {\n     LONGEST lowb, highb;\n "
    }
  ]
}