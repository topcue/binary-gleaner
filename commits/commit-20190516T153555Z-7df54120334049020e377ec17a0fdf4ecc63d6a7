{
  "sha": "7df54120334049020e377ec17a0fdf4ecc63d6a7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2RmNTQxMjAzMzQwNDkwMjBlMzc3ZWMxN2EwZmRmNGVjYzYzZDZhNw==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T10:40:26Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:35:55Z"
    },
    "message": "[PATCH 18/57][Arm][GAS] Add support for MVE instructions: vhcadd, vhadd, vhsub and vrhadd\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (enum operand_parse_code): New operand.\n\t(parse_operands): Handle new operand.\n\t(mve_encode_qqr): Change to support new instructions.\n\t(enum vfp_or_neon_is_neon_bits): Moved.\n\t(vfp_or_neon_is_neon): Moved.\n\t(check_simd_pred_availability): Moved.\n\t(do_neon_dyadic_i_su): Changed to support MVE variants.\n\t(neon_dyadic_misc): Changed mve_encode_qqr call.\n\t(do_mve_vbrsr): Likewise.\n\t(do_mve_vhcadd): New encoding function.\n\t(insns): Change existing to accept MVE variants and add new.\n\t* testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.d: New test.\n\t* testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.l: New test.\n\t* testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.s: New test.\n\t* testsuite/gas/arm/mve-vhcadd-bad.d: New test.\n\t* testsuite/gas/arm/mve-vhcadd-bad.l: New test.\n\t* testsuite/gas/arm/mve-vhcadd-bad.s: New test.",
    "tree": {
      "sha": "55125e36f65f029972206d9ee3fc0716e3583520",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/55125e36f65f029972206d9ee3fc0716e3583520"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7df54120334049020e377ec17a0fdf4ecc63d6a7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7df54120334049020e377ec17a0fdf4ecc63d6a7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7df54120334049020e377ec17a0fdf4ecc63d6a7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7df54120334049020e377ec17a0fdf4ecc63d6a7/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d58196e061969786922cae5cdaa2ade56dadd95f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d58196e061969786922cae5cdaa2ade56dadd95f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d58196e061969786922cae5cdaa2ade56dadd95f"
    }
  ],
  "stats": {
    "total": 453,
    "additions": 358,
    "deletions": 95
  },
  "files": [
    {
      "sha": "48141b89fb7220800e789ad42946a4c92bda8443",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=7df54120334049020e377ec17a0fdf4ecc63d6a7",
      "patch": "@@ -1,3 +1,23 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (enum operand_parse_code): New operand.\n+\t(parse_operands): Handle new operand.\n+\t(mve_encode_qqr): Change to support new instructions.\n+\t(enum vfp_or_neon_is_neon_bits): Moved.\n+\t(vfp_or_neon_is_neon): Moved.\n+\t(check_simd_pred_availability): Moved.\n+\t(do_neon_dyadic_i_su): Changed to support MVE variants.\n+\t(neon_dyadic_misc): Changed mve_encode_qqr call.\n+\t(do_mve_vbrsr): Likewise.\n+\t(do_mve_vhcadd): New encoding function.\n+\t(insns): Change existing to accept MVE variants and add new.\n+\t* testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vhcadd-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vhcadd-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vhcadd-bad.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (do_neon_fmac): Change to support MVE variants."
    },
    {
      "sha": "cc555f8a7a0bdc7e246d5f86685ac6e70d5c4679",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 148,
      "deletions": 95,
      "changes": 243,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=7df54120334049020e377ec17a0fdf4ecc63d6a7",
      "patch": "@@ -6902,6 +6902,7 @@ enum operand_parse_code\n   OP_RNSD,      /* Neon single or double precision register */\n   OP_RNDQ,      /* Neon double or quad precision register */\n   OP_RNDQMQ,     /* Neon double, quad or MVE vector register.  */\n+  OP_RNDQMQR,   /* Neon double, quad, MVE vector or ARM register.  */\n   OP_RNSDQ,\t/* Neon single, double or quad precision register */\n   OP_RNSC,      /* Neon scalar D[X] */\n   OP_RVC,\t/* VFP control register */\n@@ -7242,6 +7243,10 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \ttry_nq:\n \tcase OP_RNQ:   po_reg_or_fail (REG_TYPE_NQ);      break;\n \tcase OP_RNSD:  po_reg_or_fail (REG_TYPE_NSD);     break;\n+\tcase OP_RNDQMQR:\n+\t  po_reg_or_goto (REG_TYPE_RN, try_rndqmq);\n+\t  break;\n+\ttry_rndqmq:\n \tcase OP_oRNDQMQ:\n \tcase OP_RNDQMQ:\n \t  po_reg_or_goto (REG_TYPE_MQ, try_rndq);\n@@ -15820,7 +15825,7 @@ neon_dp_fixup (struct arm_it* insn)\n }\n \n static void\n-mve_encode_qqr (int size, int fp)\n+mve_encode_qqr (int size, int U, int fp)\n {\n   if (inst.operands[2].reg == REG_SP)\n     as_tsktsk (MVE_BAD_SP);\n@@ -15847,6 +15852,16 @@ mve_encode_qqr (int size, int fp)\n       /* vsub.  */\n       else if (((unsigned)inst.instruction) == 0x1000800)\n \tinst.instruction = 0xee011f40;\n+      /* vhadd.  */\n+      else if (((unsigned)inst.instruction) == 0)\n+\tinst.instruction = 0xee000f40;\n+      /* vhsub.  */\n+      else if (((unsigned)inst.instruction) == 0x200)\n+\tinst.instruction = 0xee001f40;\n+\n+      /* Set U-bit.  */\n+      inst.instruction |= U << 28;\n+\n       /* Setting bits for size.  */\n       inst.instruction |= neon_logbits (size) << 20;\n     }\n@@ -15945,15 +15960,112 @@ neon_two_same (int qbit, int ubit, int size)\n   neon_dp_fixup (&inst);\n }\n \n+enum vfp_or_neon_is_neon_bits\n+{\n+NEON_CHECK_CC = 1,\n+NEON_CHECK_ARCH = 2,\n+NEON_CHECK_ARCH8 = 4\n+};\n+\n+/* Call this function if an instruction which may have belonged to the VFP or\n+ Neon instruction sets, but turned out to be a Neon instruction (due to the\n+ operand types involved, etc.). We have to check and/or fix-up a couple of\n+ things:\n+\n+   - Make sure the user hasn't attempted to make a Neon instruction\n+     conditional.\n+   - Alter the value in the condition code field if necessary.\n+   - Make sure that the arch supports Neon instructions.\n+\n+ Which of these operations take place depends on bits from enum\n+ vfp_or_neon_is_neon_bits.\n+\n+ WARNING: This function has side effects! If NEON_CHECK_CC is used and the\n+ current instruction's condition is COND_ALWAYS, the condition field is\n+ changed to inst.uncond_value.  This is necessary because instructions shared\n+ between VFP and Neon may be conditional for the VFP variants only, and the\n+ unconditional Neon version must have, e.g., 0xF in the condition field.  */\n+\n+static int\n+vfp_or_neon_is_neon (unsigned check)\n+{\n+/* Conditions are always legal in Thumb mode (IT blocks).  */\n+if (!thumb_mode && (check & NEON_CHECK_CC))\n+  {\n+    if (inst.cond != COND_ALWAYS)\n+      {\n+\tfirst_error (_(BAD_COND));\n+\treturn FAIL;\n+      }\n+    if (inst.uncond_value != -1)\n+      inst.instruction |= inst.uncond_value << 28;\n+  }\n+\n+\n+  if (((check & NEON_CHECK_ARCH) && !mark_feature_used (&fpu_neon_ext_v1))\n+      || ((check & NEON_CHECK_ARCH8)\n+\t  && !mark_feature_used (&fpu_neon_ext_armv8)))\n+    {\n+      first_error (_(BAD_FPU));\n+      return FAIL;\n+    }\n+\n+return SUCCESS;\n+}\n+\n+static int\n+check_simd_pred_availability (int fp, unsigned check)\n+{\n+if (inst.cond > COND_ALWAYS)\n+  {\n+    if (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+      {\n+\tinst.error = BAD_FPU;\n+\treturn 1;\n+      }\n+    inst.pred_insn_type = INSIDE_VPT_INSN;\n+  }\n+else if (inst.cond < COND_ALWAYS)\n+  {\n+    if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+      inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+    else if (vfp_or_neon_is_neon (check) == FAIL)\n+      return 2;\n+  }\n+else\n+  {\n+    if (!ARM_CPU_HAS_FEATURE (cpu_variant, fp ? mve_fp_ext : mve_ext)\n+\t&& vfp_or_neon_is_neon (check) == FAIL)\n+      return 3;\n+\n+    if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+      inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+  }\n+return 0;\n+}\n+\n /* Neon instruction encoders, in approximate order of appearance.  */\n \n static void\n do_neon_dyadic_i_su (void)\n {\n-  enum neon_shape rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n-  struct neon_type_el et = neon_check_type (3, rs,\n-    N_EQK, N_EQK, N_SU_32 | N_KEY);\n-  neon_three_same (neon_quad (rs), et.type == NT_unsigned, et.size);\n+  if (check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC))\n+   return;\n+\n+  enum neon_shape rs;\n+  struct neon_type_el et;\n+  if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+    rs = neon_select_shape (NS_QQQ, NS_QQR, NS_NULL);\n+  else\n+    rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n+\n+  et = neon_check_type (3, rs, N_EQK, N_EQK, N_SU_32 | N_KEY);\n+\n+\n+  if (rs != NS_QQR)\n+    neon_three_same (neon_quad (rs), et.type == NT_unsigned, et.size);\n+  else\n+    mve_encode_qqr (et.size, et.type == NT_unsigned, 0);\n }\n \n static void\n@@ -16120,90 +16232,6 @@ neon_cmode_for_logic_imm (unsigned immediate, unsigned *immbits, int size)\n   return FAIL;\n }\n \n-enum vfp_or_neon_is_neon_bits\n-{\n-NEON_CHECK_CC = 1,\n-NEON_CHECK_ARCH = 2,\n-NEON_CHECK_ARCH8 = 4\n-};\n-\n-/* Call this function if an instruction which may have belonged to the VFP or\n- Neon instruction sets, but turned out to be a Neon instruction (due to the\n- operand types involved, etc.). We have to check and/or fix-up a couple of\n- things:\n-\n-   - Make sure the user hasn't attempted to make a Neon instruction\n-     conditional.\n-   - Alter the value in the condition code field if necessary.\n-   - Make sure that the arch supports Neon instructions.\n-\n- Which of these operations take place depends on bits from enum\n- vfp_or_neon_is_neon_bits.\n-\n- WARNING: This function has side effects! If NEON_CHECK_CC is used and the\n- current instruction's condition is COND_ALWAYS, the condition field is\n- changed to inst.uncond_value.  This is necessary because instructions shared\n- between VFP and Neon may be conditional for the VFP variants only, and the\n- unconditional Neon version must have, e.g., 0xF in the condition field.  */\n-\n-static int\n-vfp_or_neon_is_neon (unsigned check)\n-{\n-/* Conditions are always legal in Thumb mode (IT blocks).  */\n-if (!thumb_mode && (check & NEON_CHECK_CC))\n-  {\n-    if (inst.cond != COND_ALWAYS)\n-      {\n-\tfirst_error (_(BAD_COND));\n-\treturn FAIL;\n-      }\n-    if (inst.uncond_value != -1)\n-      inst.instruction |= inst.uncond_value << 28;\n-  }\n-\n-\n-  if (((check & NEON_CHECK_ARCH) && !mark_feature_used (&fpu_neon_ext_v1))\n-      || ((check & NEON_CHECK_ARCH8)\n-\t  && !mark_feature_used (&fpu_neon_ext_armv8)))\n-    {\n-      first_error (_(BAD_FPU));\n-      return FAIL;\n-    }\n-\n-return SUCCESS;\n-}\n-\n-static int\n-check_simd_pred_availability (int fp, unsigned check)\n-{\n-if (inst.cond > COND_ALWAYS)\n-  {\n-    if (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n-      {\n-\tinst.error = BAD_FPU;\n-\treturn 1;\n-      }\n-    inst.pred_insn_type = INSIDE_VPT_INSN;\n-  }\n-else if (inst.cond < COND_ALWAYS)\n-  {\n-    if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n-      inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n-    else if (vfp_or_neon_is_neon (check) == FAIL)\n-      return 2;\n-  }\n-else\n-  {\n-    if (!ARM_CPU_HAS_FEATURE (cpu_variant, fp ? mve_fp_ext : mve_ext)\n-\t&& vfp_or_neon_is_neon (check) == FAIL)\n-      return 3;\n-\n-    if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n-      inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n-  }\n-return 0;\n-}\n-\n static void\n do_neon_logic (void)\n {\n@@ -16332,15 +16360,15 @@ neon_dyadic_misc (enum neon_el_type ubit_meaning, unsigned types,\n     {\n       NEON_ENCODE (FLOAT, inst);\n       if (rs == NS_QQR)\n-\tmve_encode_qqr (et.size, 1);\n+\tmve_encode_qqr (et.size, 0, 1);\n       else\n \tneon_three_same (neon_quad (rs), 0, et.size == 16 ? (int) et.size : -1);\n     }\n   else\n     {\n       NEON_ENCODE (INTEGER, inst);\n       if (rs == NS_QQR)\n-\tmve_encode_qqr (et.size, 0);\n+\tmve_encode_qqr (et.size, 0, 0);\n       else\n \tneon_three_same (neon_quad (rs), et.type == ubit_meaning, et.size);\n     }\n@@ -16991,6 +17019,30 @@ do_mve_vaddv (void)\n   mve_encode_rq (et.type == NT_unsigned, et.size);\n }\n \n+static void\n+do_mve_vhcadd (void)\n+{\n+  enum neon_shape rs = neon_select_shape (NS_QQQI, NS_NULL);\n+  struct neon_type_el et\n+    = neon_check_type (3, rs, N_EQK, N_EQK, N_S8 | N_S16 | N_S32 | N_KEY);\n+\n+  if (inst.cond > COND_ALWAYS)\n+    inst.pred_insn_type = INSIDE_VPT_INSN;\n+  else\n+    inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+\n+  unsigned rot = inst.relocs[0].exp.X_add_number;\n+  constraint (rot != 90 && rot != 270, _(\"immediate out of range\"));\n+\n+  if (et.size == 32 && inst.operands[0].reg == inst.operands[2].reg)\n+    as_tsktsk (_(\"Warning: 32-bit element size and same first and third \"\n+\t\t \"operand makes instruction UNPREDICTABLE\"));\n+\n+  mve_encode_qqq (0, et.size);\n+  inst.instruction |= (rot == 270) << 12;\n+  inst.is_neon = 1;\n+}\n+\n static void\n do_mve_vadc (void)\n {\n@@ -17021,7 +17073,7 @@ do_mve_vbrsr (void)\n   else\n     inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n \n-  mve_encode_qqr (et.size, 0);\n+  mve_encode_qqr (et.size, 0, 0);\n }\n \n static void\n@@ -23585,11 +23637,8 @@ static const struct asm_opcode insns[] =\n   /* integer ops, valid types S8 S16 S32 U8 U16 U32.  */\n  NUF(vaba,      0000710, 3, (RNDQ, RNDQ,  RNDQ), neon_dyadic_i_su),\n  NUF(vabaq,     0000710, 3, (RNQ,  RNQ,   RNQ),  neon_dyadic_i_su),\n- NUF(vhadd,     0000000, 3, (RNDQ, oRNDQ, RNDQ), neon_dyadic_i_su),\n  NUF(vhaddq,    0000000, 3, (RNQ,  oRNQ,  RNQ),  neon_dyadic_i_su),\n- NUF(vrhadd,    0000100, 3, (RNDQ, oRNDQ, RNDQ), neon_dyadic_i_su),\n  NUF(vrhaddq,   0000100, 3, (RNQ,  oRNQ,  RNQ),  neon_dyadic_i_su),\n- NUF(vhsub,     0000200, 3, (RNDQ, oRNDQ, RNDQ), neon_dyadic_i_su),\n  NUF(vhsubq,    0000200, 3, (RNQ,  oRNQ,  RNQ),  neon_dyadic_i_su),\n   /* integer ops, valid types S8 S16 S32 S64 U8 U16 U32 U64.  */\n  NUF(vqadd,     0000010, 3, (RNDQ, oRNDQ, RNDQ), neon_dyadic_i64_su),\n@@ -24271,6 +24320,7 @@ static const struct asm_opcode insns[] =\n  ToC(\"vpsteee\",\tfe712f4d, 0, (), mve_vpt),\n \n  /* MVE and MVE FP only.  */\n+ mToC(\"vhcadd\",\tee000f00,   4, (RMQ, RMQ, RMQ, EXPi),\t\t  mve_vhcadd),\n  mCEF(vadc,\t_vadc,      3, (RMQ, RMQ, RMQ),\t\t\t  mve_vadc),\n  mCEF(vadci,\t_vadci,     3, (RMQ, RMQ, RMQ),\t\t\t  mve_vadc),\n  mToC(\"vsbc\",\tfe300f00,   3, (RMQ, RMQ, RMQ),\t\t\t  mve_vsbc),\n@@ -24383,6 +24433,9 @@ static const struct asm_opcode insns[] =\n  MNUF(vcls,      1b00400,\t  2, (RNDQMQ, RNDQMQ),\t\t     neon_cls),\n  MNUF(vclz,      1b00480,\t  2, (RNDQMQ, RNDQMQ),\t\t     neon_clz),\n  mnCE(vdup,      _vdup,\t\t  2, (RNDQMQ, RR_RNSC),\t\t     neon_dup),\n+ MNUF(vhadd,     00000000,\t  3, (RNDQMQ, oRNDQMQ, RNDQMQR),  neon_dyadic_i_su),\n+ MNUF(vrhadd,    00000100,\t  3, (RNDQMQ, oRNDQMQ, RNDQMQ),\t  neon_dyadic_i_su),\n+ MNUF(vhsub,     00000200,\t  3, (RNDQMQ, oRNDQMQ, RNDQMQR),  neon_dyadic_i_su),\n \n #undef\tARM_VARIANT\n #define ARM_VARIANT & arm_ext_v8_3"
    },
    {
      "sha": "acb12a42c6707c266fec2a327127d61e6a29021c",
      "filename": "gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.d?ref=7df54120334049020e377ec17a0fdf4ecc63d6a7",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VHADD, VHSUB and VRHADD instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vhadd-vhsub-vrhadd-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "e49015c663950a4b8790e9551f8a07fdc2c8db53",
      "filename": "gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.l",
      "status": "added",
      "additions": 71,
      "deletions": 0,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.l?ref=7df54120334049020e377ec17a0fdf4ecc63d6a7",
      "patch": "@@ -0,0 +1,71 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vhadd.i8 q0,q1,q2'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vhadd.s64 q0,q1,q2'\n+[^:]*:12: Error: bad type in SIMD instruction -- `vhadd.i8 q0,q1,r2'\n+[^:]*:13: Error: bad type in SIMD instruction -- `vhadd.s64 q0,q1,r2'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vhsub.i16 q0,q1,q2'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vhsub.u64 q0,q1,q2'\n+[^:]*:16: Error: bad type in SIMD instruction -- `vhsub.i16 q0,q1,r2'\n+[^:]*:17: Error: bad type in SIMD instruction -- `vhsub.u64 q0,q1,r2'\n+[^:]*:18: Error: bad type in SIMD instruction -- `vrhadd.i32 q0,q1,q2'\n+[^:]*:19: Error: bad type in SIMD instruction -- `vrhadd.s64 q0,q1,q2'\n+[^:]*:20: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:21: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:22: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:23: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:24: Error: garbage following instruction -- `vrhadd.s8 q0,q1,r2'\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:31: Error: syntax error -- `vhaddeq.s8 q0,q1,r2'\n+[^:]*:32: Error: syntax error -- `vhaddeq.s8 q0,q1,r2'\n+[^:]*:34: Error: syntax error -- `vhaddeq.s8 q0,q1,r2'\n+[^:]*:35: Error: vector predicated instruction should be in VPT/VPST block -- `vhaddt.s8 q0,q1,r2'\n+[^:]*:37: Error: instruction missing MVE vector predication code -- `vhadd.s8 q0,q1,r2'\n+[^:]*:39: Error: syntax error -- `vhaddeq.s8 q0,q1,q2'\n+[^:]*:40: Error: syntax error -- `vhaddeq.s8 q0,q1,q2'\n+[^:]*:42: Error: syntax error -- `vhaddeq.s8 q0,q1,q2'\n+[^:]*:43: Error: vector predicated instruction should be in VPT/VPST block -- `vhaddt.s8 q0,q1,q2'\n+[^:]*:45: Error: instruction missing MVE vector predication code -- `vhadd.s8 q0,q1,q2'\n+[^:]*:47: Error: syntax error -- `vhsubeq.s8 q0,q1,r2'\n+[^:]*:48: Error: syntax error -- `vhsubeq.s8 q0,q1,r2'\n+[^:]*:50: Error: syntax error -- `vhsubeq.s8 q0,q1,r2'\n+[^:]*:51: Error: vector predicated instruction should be in VPT/VPST block -- `vhsubt.s8 q0,q1,r2'\n+[^:]*:53: Error: instruction missing MVE vector predication code -- `vhsub.s8 q0,q1,r2'\n+[^:]*:55: Error: syntax error -- `vhsubeq.s8 q0,q1,q2'\n+[^:]*:56: Error: syntax error -- `vhsubeq.s8 q0,q1,q2'\n+[^:]*:58: Error: syntax error -- `vhsubeq.s8 q0,q1,q2'\n+[^:]*:59: Error: vector predicated instruction should be in VPT/VPST block -- `vhsubt.s8 q0,q1,q2'\n+[^:]*:61: Error: instruction missing MVE vector predication code -- `vhsub.s8 q0,q1,q2'\n+[^:]*:63: Error: syntax error -- `vrhaddeq.s8 q0,q1,q2'\n+[^:]*:64: Error: syntax error -- `vrhaddeq.s8 q0,q1,q2'\n+[^:]*:66: Error: syntax error -- `vrhaddeq.s8 q0,q1,q2'\n+[^:]*:67: Error: vector predicated instruction should be in VPT/VPST block -- `vrhaddt.s8 q0,q1,q2'\n+[^:]*:69: Error: instruction missing MVE vector predication code -- `vrhadd.s8 q0,q1,q2'"
    },
    {
      "sha": "bebefc933b40b7e3c956886c614471be7283f7ee",
      "filename": "gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.s",
      "status": "added",
      "additions": 69,
      "deletions": 0,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vhadd-vhsub-vrhadd-bad.s?ref=7df54120334049020e377ec17a0fdf4ecc63d6a7",
      "patch": "@@ -0,0 +1,69 @@\n+.macro cond, op, lastreg\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().s8 q0, q1, \\lastreg\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vhadd.i8 q0, q1, q2\n+vhadd.s64 q0, q1, q2\n+vhadd.i8 q0, q1, r2\n+vhadd.s64 q0, q1, r2\n+vhsub.i16 q0, q1, q2\n+vhsub.u64 q0, q1, q2\n+vhsub.i16 q0, q1, r2\n+vhsub.u64 q0, q1, r2\n+vrhadd.i32 q0, q1, q2\n+vrhadd.s64 q0, q1, q2\n+vhadd.s8 q0, q1, sp\n+vhadd.s8 q0, q1, pc\n+vhsub.s8 q0, q1, sp\n+vhsub.s8 q0, q1, pc\n+vrhadd.s8 q0, q1, r2\n+cond vhadd, r2\n+cond vhadd, q2\n+cond vhsub, r2\n+cond vhsub, q2\n+cond vrhadd, q2\n+it eq\n+vhaddeq.s8 q0, q1, r2\n+vhaddeq.s8 q0, q1, r2\n+vpst\n+vhaddeq.s8 q0, q1, r2\n+vhaddt.s8 q0, q1, r2\n+vpst\n+vhadd.s8 q0, q1, r2\n+it eq\n+vhaddeq.s8 q0, q1, q2\n+vhaddeq.s8 q0, q1, q2\n+vpst\n+vhaddeq.s8 q0, q1, q2\n+vhaddt.s8 q0, q1, q2\n+vpst\n+vhadd.s8 q0, q1, q2\n+it eq\n+vhsubeq.s8 q0, q1, r2\n+vhsubeq.s8 q0, q1, r2\n+vpst\n+vhsubeq.s8 q0, q1, r2\n+vhsubt.s8 q0, q1, r2\n+vpst\n+vhsub.s8 q0, q1, r2\n+it eq\n+vhsubeq.s8 q0, q1, q2\n+vhsubeq.s8 q0, q1, q2\n+vpst\n+vhsubeq.s8 q0, q1, q2\n+vhsubt.s8 q0, q1, q2\n+vpst\n+vhsub.s8 q0, q1, q2\n+it eq\n+vrhaddeq.s8 q0, q1, q2\n+vrhaddeq.s8 q0, q1, q2\n+vpst\n+vrhaddeq.s8 q0, q1, q2\n+vrhaddt.s8 q0, q1, q2\n+vpst\n+vrhadd.s8 q0, q1, q2"
    },
    {
      "sha": "51b37a4bf1fe60e794a8b5613789b82b64f46b7b",
      "filename": "gas/testsuite/gas/arm/mve-vhcadd-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhcadd-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhcadd-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vhcadd-bad.d?ref=7df54120334049020e377ec17a0fdf4ecc63d6a7",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VHCADD instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vhcadd-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "61200723dfa668f1268b45a04e2bf7a65f6a19ef",
      "filename": "gas/testsuite/gas/arm/mve-vhcadd-bad.l",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhcadd-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhcadd-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vhcadd-bad.l?ref=7df54120334049020e377ec17a0fdf4ecc63d6a7",
      "patch": "@@ -0,0 +1,17 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vhcadd.u8 q0,q1,q2,#90'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vhcadd.i8 q0,q1,q2,#90'\n+[^:]*:12: Error: bad type in SIMD instruction -- `vhcadd.s64 q0,q1,q2,#90'\n+[^:]*:13: Error: immediate out of range -- `vhcadd.s8 q0,q1,q2,#0'\n+[^:]*:14: Error: immediate out of range -- `vhcadd.s8 q0,q1,q2,#180'\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Error: syntax error -- `vhcaddeq.s8 q0,q1,q2,#90'\n+[^:]*:18: Error: syntax error -- `vhcaddeq.s8 q0,q1,q2,#90'\n+[^:]*:20: Error: syntax error -- `vhcaddeq.s8 q0,q1,q2,#90'\n+[^:]*:21: Error: vector predicated instruction should be in VPT/VPST block -- `vhcaddt.s8 q0,q1,q2,#90'\n+[^:]*:23: Error: instruction missing MVE vector predication code -- `vhcadd.s8 q0,q1,q2,#90'"
    },
    {
      "sha": "ede5b7e45e04968340dc814bc39cfb5cda1c3acd",
      "filename": "gas/testsuite/gas/arm/mve-vhcadd-bad.s",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhcadd-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7df54120334049020e377ec17a0fdf4ecc63d6a7/gas/testsuite/gas/arm/mve-vhcadd-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vhcadd-bad.s?ref=7df54120334049020e377ec17a0fdf4ecc63d6a7",
      "patch": "@@ -0,0 +1,23 @@\n+.macro cond\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vhcadd.s8 q0, q1, q2, #90\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vhcadd.u8 q0, q1, q2, #90\n+vhcadd.i8 q0, q1, q2, #90\n+vhcadd.s64 q0, q1, q2, #90\n+vhcadd.s8 q0, q1, q2, #0\n+vhcadd.s8 q0, q1, q2, #180\n+cond\n+it eq\n+vhcaddeq.s8 q0, q1, q2, #90\n+vhcaddeq.s8 q0, q1, q2, #90\n+vpst\n+vhcaddeq.s8 q0, q1, q2, #90\n+vhcaddt.s8 q0, q1, q2, #90\n+vpst\n+vhcadd.s8 q0, q1, q2, #90"
    }
  ]
}