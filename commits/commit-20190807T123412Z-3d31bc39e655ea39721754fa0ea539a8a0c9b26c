{
  "sha": "3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2QzMWJjMzllNjU1ZWEzOTcyMTc1NGZhMGVhNTM5YThhMGM5YjI2Yw==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-08-07T08:47:57Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-08-07T12:34:12Z"
    },
    "message": "AArch64 pauth: Indicate unmasked addresses in backtrace\n\nArmv8.3-a Pointer Authentication causes the function return address to be\nobfuscated on entry to some functions. GDB must unmask the link register in\norder to produce a backtrace.\n\nThe following patch adds markers of [PAC] to the bracktrace, to indicate\nwhich addresses needed unmasking.  This includes the backtrace when using MI.\n\nFor example, consider the following backtrace:\n\n(gdb) bt\n0  0x0000000000400490 in puts@plt ()\n1  0x00000000004005dc in foo (\"hello\") at cbreak-lib.c:6\n2  0x0000000000400604 [PAC] in bar () at cbreak-lib.c:12\n3  0x0000000000400620 [PAC] in main2 () at cbreak.c:17\n4  0x00000000004005b4 in main () at cbreak-3.c:10\n\nThe functions in cbreak-lib use pointer auth, which masks the return address\nto the previous function, causing the addresses of bar (in the library) and main2\n(in the main binary) to require unmasking in order to unwind the backtrace.\n\nAn extra bool is added alongside the prev_pc in the frame structure.  At the\npoint at which the link register is unmasked, the AArch64 port calls into frame\nto sets the bool.  This is the most efficient way of doing it.\n\nThe marker is also added to the python frame printer, which is always printed if\nset.  The marker is not explicitly exposed to the python code.\n\nI expect this will potentially cause issues with some tests in the testsuite\nwhen Armv8.3 pointer authentication is used.  This should be fixed up in the\nthe future once real hardware is available for full testsuite testing.\n\ngdb/ChangeLog:\n\n        * NEWS: Expand the Pointer Authentication entry.\n        * aarch64-tdep.c (aarch64_frame_unmask_address): Rename from this.\n        (aarch64_frame_unmask_lr): ... to this.\n        (aarch64_prologue_prev_register, aarch64_dwarf2_prev_register):\n        Call aarch64_frame_unmask_lr.\n        * frame.c (struct frame_info): Add \"masked\" variable.\n        (frame_set_previous_pc_masked) (frame_get_pc_masked): New functions.\n        (fprint_frame): Check for masked pc.\n        * frame.h (frame_set_previous_pc_masked) (frame_get_pc_masked): New\n        declarations.\n\t* python/py-framefilter.c (py_print_frame): Check for masked pc.\n        * stack.c (print_frame): Check for masked pc.\n\ngdb/doc/ChangeLog:\n\n        * gdb.texinfo (AArch64 Pointer Authentication): New subsection.",
    "tree": {
      "sha": "ec7bbfffea5a3d18b20acf0bf5162e48b1db1af3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ec7bbfffea5a3d18b20acf0bf5162e48b1db1af3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fca8e23c31e6ec37bdcb5cf1d981a39d1e6fb6f6"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 82,
    "deletions": 11
  },
  "files": [
    {
      "sha": "bacf5d76368962712f9ca99b2da8e75ee539217c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
      "patch": "@@ -1,3 +1,18 @@\n+2019-08-07  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* NEWS: Expand the Pointer Authentication entry.\n+\t* aarch64-tdep.c (aarch64_frame_unmask_address): Rename from this.\n+\t(aarch64_frame_unmask_lr): ... to this.\n+\t(aarch64_prologue_prev_register, aarch64_dwarf2_prev_register):\n+\tCall aarch64_frame_unmask_lr.\n+\t* frame.c (struct frame_info): Add \"masked\" variable.\n+\t(frame_set_previous_pc_masked) (frame_get_pc_masked): New functions.\n+\t(fprint_frame): Check for masked pc.\n+\t* frame.h (frame_set_previous_pc_masked) (frame_get_pc_masked): New\n+\tdeclarations.\n+\t* python/py-framefilter.c (py_print_frame): Check for masked pc.\n+\t* stack.c (print_frame): Check for masked pc.\n+\n 2019-08-06  Tom Tromey  <tom@tromey.com>\n \n \t* stabsread.c (patch_block_stabs, read_one_struct_field)"
    },
    {
      "sha": "fa01adf6e894ac81c534ce40deeafab846a63e91",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
      "patch": "@@ -16,7 +16,9 @@\n   architectures require kernel changes.  TLS is not yet supported for\n   amd64 and i386 process core dumps.\n \n-* Support for Pointer Authentication on AArch64 Linux.\n+* Support for Pointer Authentication (PAC) on AArch64 Linux.  Return\n+  addresses that required unmasking are shown in the backtrace with the\n+  postfix [PAC].\n \n * Two new convenience functions $_cimag and $_creal that extract the\n   imaginary and real parts respectively from complex numbers."
    },
    {
      "sha": "9b6324f0fcf05133f59b7bc4f38ccd383dfb1cf9",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
      "patch": "@@ -250,13 +250,13 @@ class instruction_reader : public abstract_instruction_reader\n \n } // namespace\n \n-/* If address signing is enabled, mask off the signature bits from ADDR, using\n-   the register values in THIS_FRAME.  */\n+/* If address signing is enabled, mask off the signature bits from the link\n+   register, which is passed by value in ADDR, using the register values in\n+   THIS_FRAME.  */\n \n static CORE_ADDR\n-aarch64_frame_unmask_address (struct gdbarch_tdep *tdep,\n-\t\t\t      struct frame_info *this_frame,\n-\t\t\t      CORE_ADDR addr)\n+aarch64_frame_unmask_lr (struct gdbarch_tdep *tdep,\n+\t\t\t struct frame_info *this_frame, CORE_ADDR addr)\n {\n   if (tdep->has_pauth ()\n       && frame_unwind_register_unsigned (this_frame,\n@@ -265,6 +265,9 @@ aarch64_frame_unmask_address (struct gdbarch_tdep *tdep,\n       int cmask_num = AARCH64_PAUTH_CMASK_REGNUM (tdep->pauth_reg_base);\n       CORE_ADDR cmask = frame_unwind_register_unsigned (this_frame, cmask_num);\n       addr = addr & ~cmask;\n+\n+      /* Record in the frame that the link register required unmasking.  */\n+      set_frame_previous_pc_masked (this_frame);\n     }\n \n   return addr;\n@@ -952,7 +955,7 @@ aarch64_prologue_prev_register (struct frame_info *this_frame,\n       if (tdep->has_pauth ()\n \t  && trad_frame_value_p (cache->saved_regs,\n \t\t\t\t tdep->pauth_ra_state_regnum))\n-\tlr = aarch64_frame_unmask_address (tdep, this_frame, lr);\n+\tlr = aarch64_frame_unmask_lr (tdep, this_frame, lr);\n \n       return frame_unwind_got_constant (this_frame, prev_regnum, lr);\n     }\n@@ -1119,7 +1122,7 @@ aarch64_dwarf2_prev_register (struct frame_info *this_frame,\n     {\n     case AARCH64_PC_REGNUM:\n       lr = frame_unwind_register_unsigned (this_frame, AARCH64_LR_REGNUM);\n-      lr = aarch64_frame_unmask_address (tdep, this_frame, lr);\n+      lr = aarch64_frame_unmask_lr (tdep, this_frame, lr);\n       return frame_unwind_got_constant (this_frame, regnum, lr);\n \n     default:"
    },
    {
      "sha": "702bb7c7a0256d0088f64c0dc6e695cc36221be9",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
      "patch": "@@ -1,3 +1,7 @@\n+2019-08-07  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* gdb.texinfo (AArch64 Pointer Authentication): New subsection.\n+\n 2019-08-05  Christian Biesinger  <cbiesinger@google.com>\n \n \t* python.texi (Blocks In Python): Document dictionary access on blocks."
    },
    {
      "sha": "7f8c0aff1cdb1451ab0d7338618c3545483e335a",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
      "patch": "@@ -24390,6 +24390,14 @@ but the lengths of the @code{z} and @code{p} registers will not change.  This\n is a known limitation of @value{GDBN} and does not affect the execution of the\n target process.\n \n+@subsubsection AArch64 Pointer Authentication.\n+@cindex AArch64 Pointer Authentication.\n+\n+When @value{GDBN} is debugging the AArch64 architecture, and the program is\n+using the v8.3-A feature Pointer Authentication (PAC), then whenever the link\n+register @code{$lr} is pointing to an PAC function it's value will be masked.\n+When GDB prints a backtrace, any addresses that required unmasking will be\n+postfixed with the marker [PAC].\n \n @node i386\n @subsection x86 Architecture-specific Issues"
    },
    {
      "sha": "b62fd5cd852158226d952299581ab5af1f4c036c",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 26,
      "deletions": 2,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
      "patch": "@@ -123,6 +123,8 @@ struct frame_info\n   /* Cached copy of the previous frame's resume address.  */\n   struct {\n     enum cached_copy_status status;\n+    /* Did VALUE require unmasking when being read.  */\n+    bool masked;\n     CORE_ADDR value;\n   } prev_pc;\n   \n@@ -161,6 +163,25 @@ struct frame_info\n   const char *stop_string;\n };\n \n+/* See frame.h.  */\n+\n+void\n+set_frame_previous_pc_masked (struct frame_info *frame)\n+{\n+  frame->prev_pc.masked = true;\n+}\n+\n+/* See frame.h.  */\n+\n+bool\n+get_frame_pc_masked (const struct frame_info *frame)\n+{\n+  gdb_assert (frame->next != nullptr);\n+  gdb_assert (frame->next->prev_pc.status == CC_VALUE);\n+\n+  return frame->next->prev_pc.masked;\n+}\n+\n /* A frame stash used to speed up frame lookups.  Create a hash table\n    to stash frames previously accessed from the frame cache for\n    quicker subsequent retrieval.  The hash table is emptied whenever\n@@ -429,8 +450,11 @@ fprint_frame (struct ui_file *file, struct frame_info *fi)\n   if (fi->next == NULL || fi->next->prev_pc.status == CC_UNKNOWN)\n     fprintf_unfiltered (file, \"<unknown>\");\n   else if (fi->next->prev_pc.status == CC_VALUE)\n-    fprintf_unfiltered (file, \"%s\",\n-\t\t\thex_string (fi->next->prev_pc.value));\n+    {\n+      fprintf_unfiltered (file, \"%s\", hex_string (fi->next->prev_pc.value));\n+      if (fi->next->prev_pc.masked)\n+\tfprintf_unfiltered (file, \"[PAC]\");\n+    }\n   else if (fi->next->prev_pc.status == CC_NOT_SAVED)\n     val_print_not_saved (file);\n   else if (fi->next->prev_pc.status == CC_UNAVAILABLE)"
    },
    {
      "sha": "fdb401d84f1e219c6aaa21dd125c3f47a893f91d",
      "filename": "gdb/frame.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.h?ref=3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
      "patch": "@@ -949,4 +949,13 @@ extern const gdb::option::option_def set_backtrace_option_defs[2];\n /* The values behind the global \"set backtrace ...\" settings.  */\n extern set_backtrace_options user_set_backtrace_options;\n \n+/* Mark that the PC value is masked for the previous frame.  */\n+\n+extern void set_frame_previous_pc_masked (struct frame_info *frame);\n+\n+/* Get whether the PC value is masked for the given frame.  */\n+\n+extern bool get_frame_pc_masked (const struct frame_info *frame);\n+\n+\n #endif /* !defined (FRAME_H)  */"
    },
    {
      "sha": "d805ec68f233bc257d7891a63b14e2dba58c5f03",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
      "patch": "@@ -901,6 +901,8 @@ py_print_frame (PyObject *filter, frame_filter_flags flags,\n \t    {\n \t      annotate_frame_address ();\n \t      out->field_core_addr (\"addr\", gdbarch, address);\n+\t      if (get_frame_pc_masked (frame))\n+\t\tout->field_string (\"pac\", \" [PAC]\");\n \t      annotate_frame_address_end ();\n \t      out->text (\" in \");\n \t    }"
    },
    {
      "sha": "0859815baf452f037d8d86e9e2206f7f6fc9e8ab",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d31bc39e655ea39721754fa0ea539a8a0c9b26c/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=3d31bc39e655ea39721754fa0ea539a8a0c9b26c",
      "patch": "@@ -1298,7 +1298,11 @@ print_frame (const frame_print_options &fp_opts,\n \t{\n \t  annotate_frame_address ();\n \t  if (pc_p)\n-\t    uiout->field_core_addr (\"addr\", gdbarch, pc);\n+\t    {\n+\t      uiout->field_core_addr (\"addr\", gdbarch, pc);\n+\t      if (get_frame_pc_masked (frame))\n+\t\tuiout->field_string (\"pac\", \" [PAC]\");\n+\t    }\n \t  else\n \t    uiout->field_string (\"addr\", \"<unavailable>\",\n \t\t\t\t ui_out_style_kind::ADDRESS);"
    }
  ]
}