{
  "sha": "1aa98955b19676497f89112a0962f24f359ce761",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWFhOTg5NTViMTk2NzY0OTdmODkxMTJhMDk2MmYyNGYzNTljZTc2MQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-02T06:58:38Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-02T06:58:38Z"
    },
    "message": "[gdb/ada] Fix -readnow FAILs\n\nWhen running test-case gdb.ada/access_to_packed_array we have:\n...\n(gdb) print pack.a^M\n$1 = (0 => 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)^M\n...\nbut with target board readnow.exp, we have instead:\n...\n(gdb) print pack.a^M\n'pack.a' has unknown type; cast it to its declared type^M\n...\n\nThe symbol is normally found by the map_matching_symbols call in\nada-lang.c:add_nonlocal_symbols:\n...\n  for (objfile *objfile : current_program_space->objfiles ())\n    {\n      data.objfile = objfile;\n\n      objfile->sf->qf->map_matching_symbols (objfile, lookup_name,\n\t\t\t\t\t     domain, global, callback,\n\t\t\t\t\t     (is_wild_match\n\t\t\t\t\t      ? NULL : compare_names));\n...\nwhich maps onto psym_map_matching_symbols.\n\nFunction psym_map_matching_symbols iterates over all the partial symtabs,\nand:\n- if not expanded, searches in the partial symtab:\n  - if not found, continues to the next\n  - if found, expands into full symtab\n- searches in the full symtab\n\nHowever, with -readnow the call maps onto dw2_map_matching_symbols instead,\nwhich is unimplemented, and consequently no symbol is found.\n\nFix this by detecting -readnow in dw2_map_matching_symbols, and handling that\nappropriately given that partial symtabs are not present, and full symtabs\nare: iterate over all the symtabs and search them.\n\nTested on x86_64-linux, with native and target board -readnow.\n\nThis removes 217 FAILs with board -readnow.\n\ngdb/ChangeLog:\n\n2020-04-02  Tom de Vries  <tdevries@suse.de>\n\n\tPR ada/24671\n\t* dwarf2/read.c (dw2_map_matching_symbols): Handle -readnow.",
    "tree": {
      "sha": "92c522b4f8dcee539e56fcf883f4e3d567210d8b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/92c522b4f8dcee539e56fcf883f4e3d567210d8b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1aa98955b19676497f89112a0962f24f359ce761",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1aa98955b19676497f89112a0962f24f359ce761",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1aa98955b19676497f89112a0962f24f359ce761",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1aa98955b19676497f89112a0962f24f359ce761/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d3214198119c1a2f9a6a2b8fcc56d8c324e1a245"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 34,
    "deletions": 3
  },
  "files": [
    {
      "sha": "a6e0ec9d522bc54be6c0c4844b0023097d589d65",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1aa98955b19676497f89112a0962f24f359ce761/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1aa98955b19676497f89112a0962f24f359ce761/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1aa98955b19676497f89112a0962f24f359ce761",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-02  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR ada/24671\n+\t* dwarf2/read.c (dw2_map_matching_symbols): Handle -readnow.\n+\n 2020-04-02  Tom de Vries  <tdevries@suse.de>\n \n \t* dwarf2/read.c (dwarf2_gdb_index_functions,"
    },
    {
      "sha": "f94c66b4f1bc7f0a8563a361139177faa69ac175",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 29,
      "deletions": 3,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1aa98955b19676497f89112a0962f24f359ce761/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1aa98955b19676497f89112a0962f24f359ce761/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=1aa98955b19676497f89112a0962f24f359ce761",
      "patch": "@@ -3592,9 +3592,35 @@ dw2_map_matching_symbols\n    gdb::function_view<symbol_found_callback_ftype> callback,\n    symbol_compare_ftype *ordered_compare)\n {\n-  /* Currently unimplemented; used for Ada.  The function can be called if the\n-     current language is Ada for a non-Ada objfile using GNU index.  As Ada\n-     does not look for non-Ada symbols this function should just return.  */\n+  /* Used for Ada.  */\n+  struct dwarf2_per_objfile *dwarf2_per_objfile\n+    = get_dwarf2_per_objfile (objfile);\n+\n+  if (dwarf2_per_objfile->index_table != nullptr)\n+    {\n+      /* Ada currently doesn't support .gdb_index (see PR24713).  We can get\n+\t here though if the current language is Ada for a non-Ada objfile\n+\t using GNU index.  As Ada does not look for non-Ada symbols this\n+\t function should just return.  */\n+      return;\n+    }\n+\n+  /* We have -readnow: no .gdb_index, but no partial symtabs either.  So,\n+     inline psym_map_matching_symbols here, assuming all partial symtabs have\n+     been read in.  */\n+  const int block_kind = global ? GLOBAL_BLOCK : STATIC_BLOCK;\n+\n+  for (compunit_symtab *cust : objfile->compunits ())\n+    {\n+      const struct block *block;\n+\n+      if (cust == NULL)\n+\tcontinue;\n+      block = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust), block_kind);\n+      if (!iterate_over_symbols_terminated (block, name,\n+\t\t\t\t\t    domain, callback))\n+\treturn;\n+    }\n }\n \n /* Starting from a search name, return the string that finds the upper"
    }
  ]
}