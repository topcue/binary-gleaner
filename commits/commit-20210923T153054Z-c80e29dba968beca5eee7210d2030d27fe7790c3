{
  "sha": "c80e29dba968beca5eee7210d2030d27fe7790c3",
  "node_id": "C_kwDOANOeidoAKGM4MGUyOWRiYTk2OGJlY2E1ZWVlNzIxMGQyMDMwZDI3ZmU3NzkwYzM",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-09-17T13:46:03Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-09-23T15:30:54Z"
    },
    "message": "Change get_ada_task_ptid parameter type\n\nget_ada_task_ptid currently takes a 'long' as its 'thread' parameter\ntype.  However, on some platforms this is actually a pointer, and\nusing 'long' can sometimes end up with the value being sign-extended.\nThis sign extension can cause problems later, if the tid is then later\nused as an address again.\n\nThis patch changes the parameter type to ULONGEST and updates all the\nuses.  This approach preserves sign extension on the targets where it\nis apparently intended, while avoiding it on others.\n\nCo-Authored-By: John Baldwin <jhb@FreeBSD.org>",
    "tree": {
      "sha": "b6e08f09ecd225efa78aae2c6966994413a21b5e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b6e08f09ecd225efa78aae2c6966994413a21b5e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c80e29dba968beca5eee7210d2030d27fe7790c3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c80e29dba968beca5eee7210d2030d27fe7790c3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c80e29dba968beca5eee7210d2030d27fe7790c3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c80e29dba968beca5eee7210d2030d27fe7790c3/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "96bbe3ef9653e23a17b2315627e0cab441815f2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96bbe3ef9653e23a17b2315627e0cab441815f2d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/96bbe3ef9653e23a17b2315627e0cab441815f2d"
    }
  ],
  "stats": {
    "total": 58,
    "additions": 29,
    "deletions": 29
  },
  "files": [
    {
      "sha": "9a5bcc6c91c91ec5ef5aa8f2213527adcab9b5f2",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -600,7 +600,7 @@ ada_get_tcb_types_info (void)\n static ptid_t\n ptid_from_atcb_common (struct value *common_value)\n {\n-  long thread = 0;\n+  ULONGEST thread;\n   CORE_ADDR lwp = 0;\n   struct value *ll_value;\n   ptid_t ptid;"
    },
    {
      "sha": "04649015d23762e5129fec313a2c2b4038d926bb",
      "filename": "gdb/aix-thread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/aix-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/aix-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aix-thread.c?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -144,7 +144,7 @@ class aix_thread_target final : public target_ops\n \n   const char *extra_thread_info (struct thread_info *) override;\n \n-  ptid_t get_ada_task_ptid (long lwp, long thread) override;\n+  ptid_t get_ada_task_ptid (long lwp, ULONGEST thread) override;\n };\n \n static aix_thread_target aix_thread_ops;\n@@ -1825,7 +1825,7 @@ aix_thread_target::extra_thread_info (struct thread_info *thread)\n }\n \n ptid_t\n-aix_thread_target::get_ada_task_ptid (long lwp, long thread)\n+aix_thread_target::get_ada_task_ptid (long lwp, ULONGEST thread)\n {\n   return ptid_t (inferior_ptid.pid (), 0, thread);\n }"
    },
    {
      "sha": "84558bfc132863b4e91d6b02678109a2f48cf7c8",
      "filename": "gdb/darwin-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/darwin-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/darwin-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.c?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -2376,7 +2376,7 @@ darwin_nat_target::pid_to_exec_file (int pid)\n }\n \n ptid_t\n-darwin_nat_target::get_ada_task_ptid (long lwp, long thread)\n+darwin_nat_target::get_ada_task_ptid (long lwp, ULONGEST thread)\n {\n   struct inferior *inf = current_inferior ();\n   darwin_inferior *priv = get_darwin_inferior (inf);"
    },
    {
      "sha": "0e5951d47c8eb0b15b9eb8b513edad227fa7a02d",
      "filename": "gdb/darwin-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/darwin-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/darwin-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.h?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -111,7 +111,7 @@ class darwin_nat_target : public inf_child_target\n \n   bool supports_multi_process () override;\n \n-  ptid_t get_ada_task_ptid (long lwp, long thread) override;\n+  ptid_t get_ada_task_ptid (long lwp, ULONGEST thread) override;\n \n private:\n   ptid_t wait_1 (ptid_t, struct target_waitstatus *);"
    },
    {
      "sha": "1323626e3d0c55ace46e6a70b07cd6b8d3f1563e",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -1045,8 +1045,8 @@ fbsd_nat_target::resume (ptid_t ptid, int step, enum gdb_signal signo)\n     return;\n #endif\n \n-  fbsd_lwp_debug_printf (\"ptid (%d, %ld, %ld)\", ptid.pid (), ptid.lwp (),\n-\t\t\t ptid.tid ());\n+  fbsd_lwp_debug_printf (\"ptid (%d, %ld, %s)\", ptid.pid (), ptid.lwp (),\n+\t\t\t pulongest (ptid.tid ()));\n   if (ptid.lwp_p ())\n     {\n       /* If ptid is a specific LWP, suspend all other LWPs in the process.  */"
    },
    {
      "sha": "bfb3bd64323f2e6be7808f80d0700a9eab929aa1",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -102,7 +102,7 @@ class thread_db_target final : public target_ops\n \t\t\t\t      CORE_ADDR load_module_addr,\n \t\t\t\t      CORE_ADDR offset) override;\n   const char *extra_thread_info (struct thread_info *) override;\n-  ptid_t get_ada_task_ptid (long lwp, long thread) override;\n+  ptid_t get_ada_task_ptid (long lwp, ULONGEST thread) override;\n \n   thread_info *thread_handle_to_thread_info (const gdb_byte *thread_handle,\n \t\t\t\t\t     int handle_len,\n@@ -1839,7 +1839,7 @@ thread_db_target::get_thread_local_address (ptid_t ptid,\n /* Implement the to_get_ada_task_ptid target method for this target.  */\n \n ptid_t\n-thread_db_target::get_ada_task_ptid (long lwp, long thread)\n+thread_db_target::get_ada_task_ptid (long lwp, ULONGEST thread)\n {\n   /* NPTL uses a 1:1 model, so the LWP id suffices.  */\n   return ptid_t (inferior_ptid.pid (), lwp);"
    },
    {
      "sha": "85f934be3af024fbafe479d1e992a8271012a5e0",
      "filename": "gdb/ravenscar-thread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ravenscar-thread.c?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -118,7 +118,7 @@ struct ravenscar_thread_target final : public target_ops\n \n   std::string pid_to_str (ptid_t) override;\n \n-  ptid_t get_ada_task_ptid (long lwp, long thread) override;\n+  ptid_t get_ada_task_ptid (long lwp, ULONGEST thread) override;\n \n   struct btrace_target_info *enable_btrace (ptid_t ptid,\n \t\t\t\t\t    const struct btrace_config *conf)\n@@ -682,7 +682,7 @@ ravenscar_inferior_created (inferior *inf)\n }\n \n ptid_t\n-ravenscar_thread_target::get_ada_task_ptid (long lwp, long thread)\n+ravenscar_thread_target::get_ada_task_ptid (long lwp, ULONGEST thread)\n {\n   return ptid_t (m_base_ptid.pid (), 0, thread);\n }"
    },
    {
      "sha": "0dfe36acec7517d4601b4ace7cb23d651ce004d5",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -493,7 +493,7 @@ class remote_target : public process_stratum_target\n \n   const char *extra_thread_info (struct thread_info *) override;\n \n-  ptid_t get_ada_task_ptid (long lwp, long thread) override;\n+  ptid_t get_ada_task_ptid (long lwp, ULONGEST thread) override;\n \n   thread_info *thread_handle_to_thread_info (const gdb_byte *thread_handle,\n \t\t\t\t\t     int handle_len,\n@@ -4136,7 +4136,7 @@ remote_target::static_tracepoint_markers_by_strid (const char *strid)\n /* Implement the to_get_ada_task_ptid function for the remote targets.  */\n \n ptid_t\n-remote_target::get_ada_task_ptid (long lwp, long thread)\n+remote_target::get_ada_task_ptid (long lwp, ULONGEST thread)\n {\n   return ptid_t (inferior_ptid.pid (), lwp);\n }"
    },
    {
      "sha": "513d0309bc4c49a07b1e0f52905bbfebf2afbedd",
      "filename": "gdb/sol-thread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/sol-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/sol-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sol-thread.c?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -88,7 +88,7 @@ class sol_thread_target final : public target_ops\n   void resume (ptid_t, int, enum gdb_signal) override;\n   void mourn_inferior () override;\n   std::string pid_to_str (ptid_t) override;\n-  ptid_t get_ada_task_ptid (long lwp, long thread) override;\n+  ptid_t get_ada_task_ptid (long lwp, ULONGEST thread) override;\n \n   void fetch_registers (struct regcache *, int) override;\n   void store_registers (struct regcache *, int) override;\n@@ -1120,7 +1120,7 @@ info_solthreads (const char *args, int from_tty)\n static int\n thread_db_find_thread_from_tid (struct thread_info *thread, void *data)\n {\n-  long *tid = (long *) data;\n+  ULONGEST *tid = (ULONGEST *) data;\n \n   if (thread->ptid.tid () == *tid)\n     return 1;\n@@ -1129,7 +1129,7 @@ thread_db_find_thread_from_tid (struct thread_info *thread, void *data)\n }\n \n ptid_t\n-sol_thread_target::get_ada_task_ptid (long lwp, long thread)\n+sol_thread_target::get_ada_task_ptid (long lwp, ULONGEST thread)\n {\n   struct thread_info *thread_info =\n     iterate_over_threads (thread_db_find_thread_from_tid, &thread);"
    },
    {
      "sha": "fb9c78a5f793f1b48ec80efbe8460658bc0f6340",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -99,7 +99,7 @@ struct dummy_target : public target_ops\n   void flash_erase (ULONGEST arg0, LONGEST arg1) override;\n   void flash_done () override;\n   const struct target_desc *read_description () override;\n-  ptid_t get_ada_task_ptid (long arg0, long arg1) override;\n+  ptid_t get_ada_task_ptid (long arg0, ULONGEST arg1) override;\n   int auxv_parse (gdb_byte **arg0, gdb_byte *arg1, CORE_ADDR *arg2, CORE_ADDR *arg3) override;\n   int search_memory (CORE_ADDR arg0, ULONGEST arg1, const gdb_byte *arg2, ULONGEST arg3, CORE_ADDR *arg4) override;\n   bool can_execute_reverse () override;\n@@ -274,7 +274,7 @@ struct debug_target : public target_ops\n   void flash_erase (ULONGEST arg0, LONGEST arg1) override;\n   void flash_done () override;\n   const struct target_desc *read_description () override;\n-  ptid_t get_ada_task_ptid (long arg0, long arg1) override;\n+  ptid_t get_ada_task_ptid (long arg0, ULONGEST arg1) override;\n   int auxv_parse (gdb_byte **arg0, gdb_byte *arg1, CORE_ADDR *arg2, CORE_ADDR *arg3) override;\n   int search_memory (CORE_ADDR arg0, ULONGEST arg1, const gdb_byte *arg2, ULONGEST arg3, CORE_ADDR *arg4) override;\n   bool can_execute_reverse () override;\n@@ -2598,27 +2598,27 @@ debug_target::read_description ()\n }\n \n ptid_t\n-target_ops::get_ada_task_ptid (long arg0, long arg1)\n+target_ops::get_ada_task_ptid (long arg0, ULONGEST arg1)\n {\n   return this->beneath ()->get_ada_task_ptid (arg0, arg1);\n }\n \n ptid_t\n-dummy_target::get_ada_task_ptid (long arg0, long arg1)\n+dummy_target::get_ada_task_ptid (long arg0, ULONGEST arg1)\n {\n   return default_get_ada_task_ptid (this, arg0, arg1);\n }\n \n ptid_t\n-debug_target::get_ada_task_ptid (long arg0, long arg1)\n+debug_target::get_ada_task_ptid (long arg0, ULONGEST arg1)\n {\n   ptid_t result;\n   fprintf_unfiltered (gdb_stdlog, \"-> %s->get_ada_task_ptid (...)\\n\", this->beneath ()->shortname ());\n   result = this->beneath ()->get_ada_task_ptid (arg0, arg1);\n   fprintf_unfiltered (gdb_stdlog, \"<- %s->get_ada_task_ptid (\", this->beneath ()->shortname ());\n   target_debug_print_long (arg0);\n   fputs_unfiltered (\", \", gdb_stdlog);\n-  target_debug_print_long (arg1);\n+  target_debug_print_ULONGEST (arg1);\n   fputs_unfiltered (\") = \", gdb_stdlog);\n   target_debug_print_ptid_t (result);\n   fputs_unfiltered (\"\\n\", gdb_stdlog);"
    },
    {
      "sha": "2cb587d9cee2ac1a56e0acf0faa47ebd7c11d653",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -67,7 +67,7 @@ static int default_region_ok_for_hw_watchpoint (struct target_ops *,\n static void default_rcmd (struct target_ops *, const char *, struct ui_file *);\n \n static ptid_t default_get_ada_task_ptid (struct target_ops *self,\n-\t\t\t\t\t long lwp, long tid);\n+\t\t\t\t\t long lwp, ULONGEST tid);\n \n static void default_mourn_inferior (struct target_ops *self);\n \n@@ -595,7 +595,7 @@ target_can_execute_reverse ()\n }\n \n ptid_t\n-target_get_ada_task_ptid (long lwp, long tid)\n+target_get_ada_task_ptid (long lwp, ULONGEST tid)\n {\n   return current_inferior ()->top_target ()->get_ada_task_ptid (lwp, tid);\n }\n@@ -1133,7 +1133,7 @@ default_terminal_info (struct target_ops *self, const char *args, int from_tty)\n    inferior_ptid.  */\n \n static ptid_t\n-default_get_ada_task_ptid (struct target_ops *self, long lwp, long tid)\n+default_get_ada_task_ptid (struct target_ops *self, long lwp, ULONGEST tid)\n {\n   return ptid_t (inferior_ptid.pid (), lwp, tid);\n }"
    },
    {
      "sha": "61febdb183a8645351d889b4fe808ee266e421ec",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -856,7 +856,7 @@ struct target_ops\n        based on LWP and THREAD.  These values are extracted from the\n        task Private_Data section of the Ada Task Control Block, and\n        their interpretation depends on the target.  */\n-    virtual ptid_t get_ada_task_ptid (long lwp, long thread)\n+    virtual ptid_t get_ada_task_ptid (long lwp, ULONGEST thread)\n       TARGET_DEFAULT_FUNC (default_get_ada_task_ptid);\n \n     /* Read one auxv entry from *READPTR, not reading locations >= ENDPTR.\n@@ -2141,7 +2141,7 @@ extern bool target_can_execute_reverse ();\n \n extern const struct target_desc *target_read_description (struct target_ops *);\n \n-extern ptid_t target_get_ada_task_ptid (long lwp, long tid);\n+extern ptid_t target_get_ada_task_ptid (long lwp, ULONGEST tid);\n \n /* Main entry point for searching memory.  */\n extern int target_search_memory (CORE_ADDR start_addr,"
    },
    {
      "sha": "a052efe654ce4e6fc9e4f37bdc2d6a8fc31c3863",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c80e29dba968beca5eee7210d2030d27fe7790c3/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=c80e29dba968beca5eee7210d2030d27fe7790c3",
      "patch": "@@ -277,7 +277,7 @@ struct windows_nat_target final : public x86_nat_target<inf_child_target>\n \n   char *pid_to_exec_file (int pid) override;\n \n-  ptid_t get_ada_task_ptid (long lwp, long thread) override;\n+  ptid_t get_ada_task_ptid (long lwp, ULONGEST thread) override;\n \n   bool get_tib_address (ptid_t ptid, CORE_ADDR *addr) override;\n \n@@ -3082,7 +3082,7 @@ windows_nat_target::get_tib_address (ptid_t ptid, CORE_ADDR *addr)\n }\n \n ptid_t\n-windows_nat_target::get_ada_task_ptid (long lwp, long thread)\n+windows_nat_target::get_ada_task_ptid (long lwp, ULONGEST thread)\n {\n   return ptid_t (inferior_ptid.pid (), lwp, 0);\n }"
    }
  ]
}