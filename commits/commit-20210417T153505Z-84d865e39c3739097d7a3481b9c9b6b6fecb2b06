{
  "sha": "84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODRkODY1ZTM5YzM3MzkwOTdkN2EzNDgxYjljOWI2YjZmZWNiMmIwNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-17T15:35:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-17T15:35:05Z"
    },
    "message": "Remove quick_symbol_functions::lookup_symbol\n\nThis removes quick_symbol_functions, replacing it with calls to\nexpand_symtabs_matching.  Because the replacement is somewhat verbose,\nobjfile::lookup_symbol is not removed.  This consolidates some\nduplicated code into this one spot.\n\ngdb/ChangeLog\n2021-04-17  Tom Tromey  <tom@tromey.com>\n\n\t* symfile-debug.c (objfile::lookup_symbol): Rewrite.\n\t* quick-symbol.h (struct quick_symbol_functions) <lookup_symbol>:\n\tRemove.\n\t* psymtab.c (psymbol_functions::lookup_symbol): Remove.\n\t* psympriv.h (struct psymbol_functions) <lookup_symbol>: Remove.\n\t* objfiles.h (struct objfile) <lookup_symbol>: Add comment.\n\t* dwarf2/read.c (struct dwarf2_gdb_index) <lookup_symbol>:\n\tRemove.\n\t(struct dwarf2_debug_names_index) <lookup_symbol>: Remove.\n\t(dwarf2_gdb_index::lookup_symbol)\n\t(dwarf2_debug_names_index::lookup_symbol): Remove.",
    "tree": {
      "sha": "564ba47ed285702b5c3a852def5321870287b1c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/564ba47ed285702b5c3a852def5321870287b1c3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3bfa51a75fc18775ea043efb248d0e2c35103202",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3bfa51a75fc18775ea043efb248d0e2c35103202",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3bfa51a75fc18775ea043efb248d0e2c35103202"
    }
  ],
  "stats": {
    "total": 246,
    "additions": 66,
    "deletions": 180
  },
  "files": [
    {
      "sha": "d5cff05bda0aefa1c7bfa02d81444ea736aeca88",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
      "patch": "@@ -1,3 +1,17 @@\n+2021-04-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* symfile-debug.c (objfile::lookup_symbol): Rewrite.\n+\t* quick-symbol.h (struct quick_symbol_functions) <lookup_symbol>:\n+\tRemove.\n+\t* psymtab.c (psymbol_functions::lookup_symbol): Remove.\n+\t* psympriv.h (struct psymbol_functions) <lookup_symbol>: Remove.\n+\t* objfiles.h (struct objfile) <lookup_symbol>: Add comment.\n+\t* dwarf2/read.c (struct dwarf2_gdb_index) <lookup_symbol>:\n+\tRemove.\n+\t(struct dwarf2_debug_names_index) <lookup_symbol>: Remove.\n+\t(dwarf2_gdb_index::lookup_symbol)\n+\t(dwarf2_debug_names_index::lookup_symbol): Remove.\n+\n 2021-04-17  Tom Tromey  <tom@tromey.com>\n \n \t* symtab.c (global_symbol_searcher::expand_symtabs): Update."
    },
    {
      "sha": "eabe16a652857df9e2ff408e204fcfaaafdc7829",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 0,
      "deletions": 106,
      "changes": 106,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
      "patch": "@@ -2265,11 +2265,6 @@ struct dwarf2_base_index_functions : public quick_symbol_functions\n \n struct dwarf2_gdb_index : public dwarf2_base_index_functions\n {\n-  struct compunit_symtab *lookup_symbol (struct objfile *objfile,\n-\t\t\t\t\t block_enum block_index,\n-\t\t\t\t\t const char *name,\n-\t\t\t\t\t domain_enum domain) override;\n-\n   void dump (struct objfile *objfile) override;\n \n   void expand_symtabs_for_function (struct objfile *objfile,\n@@ -2296,11 +2291,6 @@ struct dwarf2_gdb_index : public dwarf2_base_index_functions\n \n struct dwarf2_debug_names_index : public dwarf2_base_index_functions\n {\n-  struct compunit_symtab *lookup_symbol (struct objfile *objfile,\n-\t\t\t\t\t block_enum block_index,\n-\t\t\t\t\t const char *name,\n-\t\t\t\t\t domain_enum domain) override;\n-\n   void dump (struct objfile *objfile) override;\n \n   void expand_symtabs_for_function (struct objfile *objfile,\n@@ -3667,50 +3657,6 @@ dw2_symtab_iter_next (struct dw2_symtab_iterator *iter)\n   return NULL;\n }\n \n-struct compunit_symtab *\n-dwarf2_gdb_index::lookup_symbol (struct objfile *objfile,\n-\t\t\t\t block_enum block_index,\n-\t\t\t\t const char *name, domain_enum domain)\n-{\n-  struct compunit_symtab *stab_best = NULL;\n-  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n-\n-  lookup_name_info lookup_name (name, symbol_name_match_type::FULL);\n-\n-  struct dw2_symtab_iterator iter;\n-  struct dwarf2_per_cu_data *per_cu;\n-\n-  dw2_symtab_iter_init (&iter, per_objfile, block_index, domain, name);\n-\n-  while ((per_cu = dw2_symtab_iter_next (&iter)) != NULL)\n-    {\n-      struct symbol *sym, *with_opaque = NULL;\n-      struct compunit_symtab *stab\n-\t= dw2_instantiate_symtab (per_cu, per_objfile, false);\n-      const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (stab);\n-      const struct block *block = BLOCKVECTOR_BLOCK (bv, block_index);\n-\n-      sym = block_find_symbol (block, name, domain,\n-\t\t\t       block_find_non_opaque_type_preferred,\n-\t\t\t       &with_opaque);\n-\n-      /* Some caution must be observed with overloaded functions\n-\t and methods, since the index will not contain any overload\n-\t information (but NAME might contain it).  */\n-\n-      if (sym != NULL\n-\t  && SYMBOL_MATCHES_SEARCH_NAME (sym, lookup_name))\n-\treturn stab;\n-      if (with_opaque != NULL\n-\t  && SYMBOL_MATCHES_SEARCH_NAME (with_opaque, lookup_name))\n-\tstab_best = stab;\n-\n-      /* Keep looking through other CUs.  */\n-    }\n-\n-  return stab_best;\n-}\n-\n void\n dwarf2_base_index_functions::print_stats (struct objfile *objfile,\n \t\t\t\t\t  bool print_bcache)\n@@ -5794,58 +5740,6 @@ dw2_debug_names_iterator::next ()\n   return per_cu;\n }\n \n-struct compunit_symtab *\n-dwarf2_debug_names_index::lookup_symbol\n-     (struct objfile *objfile, block_enum block_index,\n-      const char *name, domain_enum domain)\n-{\n-  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n-\n-  const auto &mapp = per_objfile->per_bfd->debug_names_table;\n-  if (!mapp)\n-    {\n-      /* index is NULL if OBJF_READNOW.  */\n-      return NULL;\n-    }\n-  const auto &map = *mapp;\n-\n-  dw2_debug_names_iterator iter (map,\n-\t\t\t\t block_index == GLOBAL_BLOCK\n-\t\t\t\t ? SEARCH_GLOBAL_BLOCK\n-\t\t\t\t : SEARCH_STATIC_BLOCK,\n-\t\t\t\t domain, name, per_objfile);\n-\n-  struct compunit_symtab *stab_best = NULL;\n-  struct dwarf2_per_cu_data *per_cu;\n-  while ((per_cu = iter.next ()) != NULL)\n-    {\n-      struct symbol *sym, *with_opaque = NULL;\n-      compunit_symtab *stab\n-\t= dw2_instantiate_symtab (per_cu, per_objfile, false);\n-      const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (stab);\n-      const struct block *block = BLOCKVECTOR_BLOCK (bv, block_index);\n-\n-      sym = block_find_symbol (block, name, domain,\n-\t\t\t       block_find_non_opaque_type_preferred,\n-\t\t\t       &with_opaque);\n-\n-      /* Some caution must be observed with overloaded functions and\n-\t methods, since the index will not contain any overload\n-\t information (but NAME might contain it).  */\n-\n-      if (sym != NULL\n-\t  && strcmp_iw (sym->search_name (), name) == 0)\n-\treturn stab;\n-      if (with_opaque != NULL\n-\t  && strcmp_iw (with_opaque->search_name (), name) == 0)\n-\tstab_best = stab;\n-\n-      /* Keep looking through other CUs.  */\n-    }\n-\n-  return stab_best;\n-}\n-\n /* This dumps minimal information about .debug_names.  It is called\n    via \"mt print objfiles\".  The gdb.dwarf2/gdb-index.exp testcase\n    uses this to verify that .debug_names has been loaded.  */"
    },
    {
      "sha": "31914d50a60ff2d661eb691b08c8b92a5c4c2d74",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
      "patch": "@@ -576,7 +576,16 @@ struct objfile\n     (const char *name, const char *real_path,\n      gdb::function_view<bool (symtab *)> callback);\n \n-  /* See quick_symbol_functions.  */\n+  /* Check to see if the symbol is defined in a \"partial\" symbol table\n+     of this objfile.  BLOCK_INDEX should be either GLOBAL_BLOCK or\n+     STATIC_BLOCK, depending on whether we want to search global\n+     symbols or static symbols.  NAME is the name of the symbol to\n+     look for.  DOMAIN indicates what sort of symbol to search for.\n+\n+     Returns the newly-expanded compunit in which the symbol is\n+     defined, or NULL if no such symbol table exists.  If OBJFILE\n+     contains !TYPE_OPAQUE symbol prefer its compunit.  If it contains\n+     only TYPE_OPAQUE symbol(s), return at least that compunit.  */\n   struct compunit_symtab *lookup_symbol (block_enum kind, const char *name,\n \t\t\t\t\t domain_enum domain);\n "
    },
    {
      "sha": "9d1375bd96a4f9fd3d5baece5944c58bdcb962f7",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
      "patch": "@@ -511,11 +511,6 @@ struct psymbol_functions : public quick_symbol_functions\n     (struct objfile *objfile, const char *name, const char *real_path,\n      gdb::function_view<bool (symtab *)> callback) override;\n \n-  struct compunit_symtab *lookup_symbol (struct objfile *objfile,\n-\t\t\t\t\t block_enum block_index,\n-\t\t\t\t\t const char *name,\n-\t\t\t\t\t domain_enum domain) override;\n-\n   enum language lookup_global_symbol_language (struct objfile *objfile,\n \t\t\t\t\t       const char *name,\n \t\t\t\t\t       domain_enum domain,"
    },
    {
      "sha": "b9b7c7d06b246aed127f243089d1fdb06637db46",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 0,
      "deletions": 51,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
      "patch": "@@ -432,57 +432,6 @@ find_pc_sect_psymbol (struct objfile *objfile,\n   return best;\n }\n \n-/* Psymtab version of lookup_symbol.  See its definition in\n-   the definition of quick_symbol_functions in symfile.h.  */\n-\n-struct compunit_symtab *\n-psymbol_functions::lookup_symbol (struct objfile *objfile,\n-\t\t\t\t  block_enum block_index, const char *name,\n-\t\t\t\t  const domain_enum domain)\n-{\n-  const int psymtab_index = (block_index == GLOBAL_BLOCK ? 1 : 0);\n-  struct compunit_symtab *stab_best = NULL;\n-\n-  lookup_name_info lookup_name (name, symbol_name_match_type::FULL);\n-\n-  lookup_name_info psym_lookup_name = lookup_name.make_ignore_params ();\n-\n-  for (partial_symtab *ps : require_partial_symbols (objfile))\n-    {\n-      if (!ps->readin_p (objfile)\n-\t  && lookup_partial_symbol (objfile, ps, psym_lookup_name,\n-\t\t\t\t    psymtab_index, domain))\n-\t{\n-\t  struct symbol *sym, *with_opaque = NULL;\n-\t  struct compunit_symtab *stab = psymtab_to_symtab (objfile, ps);\n-\t  /* Note: While psymtab_to_symtab can return NULL if the\n-\t     partial symtab is empty, we can assume it won't here\n-\t     because lookup_partial_symbol succeeded.  */\n-\t  const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (stab);\n-\t  const struct block *block = BLOCKVECTOR_BLOCK (bv, block_index);\n-\n-\t  sym = block_find_symbol (block, name, domain,\n-\t\t\t\t   block_find_non_opaque_type_preferred,\n-\t\t\t\t   &with_opaque);\n-\n-\t  /* Some caution must be observed with overloaded functions\n-\t     and methods, since the index will not contain any overload\n-\t     information (but NAME might contain it).  */\n-\n-\t  if (sym != NULL\n-\t      && SYMBOL_MATCHES_SEARCH_NAME (sym, lookup_name))\n-\t    return stab;\n-\t  if (with_opaque != NULL\n-\t      && SYMBOL_MATCHES_SEARCH_NAME (with_opaque, lookup_name))\n-\t    stab_best = stab;\n-\n-\t  /* Keep looking through other psymtabs.  */\n-\t}\n-    }\n-\n-  return stab_best;\n-}\n-\n /* Psymtab version of lookup_global_symbol_language.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n "
    },
    {
      "sha": "6252eb5a382742b3bdc9be18a767b324148c585d",
      "filename": "gdb/quick-symbol.h",
      "status": "modified",
      "additions": 0,
      "deletions": 15,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/quick-symbol.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/quick-symbol.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/quick-symbol.h?ref=84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
      "patch": "@@ -109,21 +109,6 @@ struct quick_symbol_functions\n     (struct objfile *objfile, const char *name, const char *real_path,\n      gdb::function_view<bool (symtab *)> callback) = 0;\n \n-  /* Check to see if the symbol is defined in a \"partial\" symbol table\n-     of OBJFILE.  BLOCK_INDEX should be either GLOBAL_BLOCK or STATIC_BLOCK,\n-     depending on whether we want to search global symbols or static\n-     symbols.  NAME is the name of the symbol to look for.  DOMAIN\n-     indicates what sort of symbol to search for.\n-\n-     Returns the newly-expanded compunit in which the symbol is\n-     defined, or NULL if no such symbol table exists.  If OBJFILE\n-     contains !TYPE_OPAQUE symbol prefer its compunit.  If it contains\n-     only TYPE_OPAQUE symbol(s), return at least that compunit.  */\n-  virtual struct compunit_symtab *lookup_symbol (struct objfile *objfile,\n-\t\t\t\t\t\t block_enum block_index,\n-\t\t\t\t\t\t const char *name,\n-\t\t\t\t\t\t domain_enum domain) = 0;\n-\n   /* Check to see if the global symbol is defined in a \"partial\" symbol table\n      of OBJFILE. NAME is the name of the symbol to look for.  DOMAIN\n      indicates what sort of symbol to search for."
    },
    {
      "sha": "0535f413c0789f5154eb3ce105fb78777de8e91c",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 42,
      "deletions": 2,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84d865e39c3739097d7a3481b9c9b6b6fecb2b06/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=84d865e39c3739097d7a3481b9c9b6b6fecb2b06",
      "patch": "@@ -32,6 +32,7 @@\n #include \"source.h\"\n #include \"symtab.h\"\n #include \"symfile.h\"\n+#include \"block.h\"\n \n /* We need to save a pointer to the real symbol functions.\n    Plus, the debug versions are malloc'd because we have to NULL out the\n@@ -173,10 +174,49 @@ objfile::lookup_symbol (block_enum kind, const char *name, domain_enum domain)\n \t\t      objfile_debug_name (this), kind, name,\n \t\t      domain_name (domain));\n \n+  lookup_name_info lookup_name (name, symbol_name_match_type::FULL);\n+\n+  auto search_one_symtab = [&] (compunit_symtab *stab)\n+  {\n+    struct symbol *sym, *with_opaque = NULL;\n+    const struct blockvector *bv = COMPUNIT_BLOCKVECTOR (stab);\n+    const struct block *block = BLOCKVECTOR_BLOCK (bv, kind);\n+\n+    sym = block_find_symbol (block, name, domain,\n+\t\t\t     block_find_non_opaque_type_preferred,\n+\t\t\t     &with_opaque);\n+\n+    /* Some caution must be observed with overloaded functions\n+       and methods, since the index will not contain any overload\n+       information (but NAME might contain it).  */\n+\n+    if (sym != NULL\n+\t&& SYMBOL_MATCHES_SEARCH_NAME (sym, lookup_name))\n+      {\n+\tretval = stab;\n+\t/* Found it.  */\n+\treturn false;\n+      }\n+    if (with_opaque != NULL\n+\t&& SYMBOL_MATCHES_SEARCH_NAME (with_opaque, lookup_name))\n+      retval = stab;\n+\n+    /* Keep looking through other psymtabs.  */\n+    return true;\n+  };\n+\n   for (const auto &iter : qf)\n     {\n-      retval = iter->lookup_symbol (this, kind, name, domain);\n-      if (retval != nullptr)\n+      if (!iter->expand_symtabs_matching (this,\n+\t\t\t\t\t  nullptr,\n+\t\t\t\t\t  &lookup_name,\n+\t\t\t\t\t  nullptr,\n+\t\t\t\t\t  search_one_symtab,\n+\t\t\t\t\t  kind == GLOBAL_BLOCK\n+\t\t\t\t\t  ? SEARCH_GLOBAL_BLOCK\n+\t\t\t\t\t  : SEARCH_STATIC_BLOCK,\n+\t\t\t\t\t  domain,\n+\t\t\t\t\t  ALL_DOMAIN))\n \tbreak;\n     }\n "
    }
  ]
}