{
  "sha": "1457d766df2c6925e4af7a013c92ce7495cb0d87",
  "node_id": "C_kwDOANOeidoAKDE0NTdkNzY2ZGYyYzY5MjVlNGFmN2EwMTNjOTJjZTc0OTVjYjBkODc",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-10-05T23:27:58Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-10-05T23:27:58Z"
    },
    "message": "[gdb/testsuite] Make tui testing less verbose\n\nCurrently, tui testing is rather verbose.  When using these RUNTESTFLAGS to\npick up all tui tests (17 in total):\n...\nrtf=$(echo $(cd src/gdb/testsuite/; find gdb.* -type f -name *.exp* \\\n  | xargs grep -l tuiterm_env) )\n...\nwe have:\n...\n$ wc -l gdb.log\n120592 gdb.log\n...\n\nMost of the output is related to controlling the tui screen, but that does\nnot give a top-level sense of how the test-case progresses.\n\nPut differently: a lot of bandwith is used to describe how we arrive at a\ncertain tui screen state.  But we don't actually always show the state we\narrive at, unless there's a FAIL.\n\nAnd if there's say, a PASS that should actually be FAILing, it's hard to\ndetect.\n\nFix this by:\n- dropping the -log on the call to verbose in _log.  We still can get the\n  same info back using runtest -v.\n- dumping the screen or box that we're checking, also when the test passes.\n\nBrings down verbosity to something more reasonable:\n...\n$ wc -l gdb.log\n3221 gdb.log\n...\n\nTested on x86_64-linux.",
    "tree": {
      "sha": "dcc8ad30971776d1b50800f25fc3b4ac5d64fba1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dcc8ad30971776d1b50800f25fc3b4ac5d64fba1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1457d766df2c6925e4af7a013c92ce7495cb0d87",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1457d766df2c6925e4af7a013c92ce7495cb0d87",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1457d766df2c6925e4af7a013c92ce7495cb0d87",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1457d766df2c6925e4af7a013c92ce7495cb0d87/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "58d82c2c59814c6d3f56a4134a777ae6ec292460",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/58d82c2c59814c6d3f56a4134a777ae6ec292460",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/58d82c2c59814c6d3f56a4134a777ae6ec292460"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 7,
    "deletions": 9
  },
  "files": [
    {
      "sha": "149b7515d4958f6b04e74cc06ea0d3c01836c3b1",
      "filename": "gdb/testsuite/lib/tuiterm.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1457d766df2c6925e4af7a013c92ce7495cb0d87/gdb/testsuite/lib/tuiterm.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1457d766df2c6925e4af7a013c92ce7495cb0d87/gdb/testsuite/lib/tuiterm.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/tuiterm.exp?ref=1457d766df2c6925e4af7a013c92ce7495cb0d87",
      "patch": "@@ -34,7 +34,7 @@ namespace eval Term {\n     variable _resize_count\n \n     proc _log { what } {\n-\tverbose -log \"+++ $what\"\n+\tverbose \"+++ $what\"\n     }\n \n     # Call BODY, then log WHAT along with the original and new cursor position.\n@@ -754,22 +754,21 @@ namespace eval Term {\n \n     # Check for a box at the given coordinates.\n     proc check_box {test_name x y width height} {\n+\tdump_box $x $y $width $height\n \tset why [_check_box $x $y $width $height]\n \tif {$why == \"\"} {\n \t    pass $test_name\n \t} else {\n-\t    dump_screen\n \t    fail \"$test_name ($why)\"\n \t}\n     }\n \n     # Check whether the text contents of the terminal match the\n     # regular expression.  Note that text styling is not considered.\n     proc check_contents {test_name regexp} {\n+\tdump_screen\n \tset contents [get_all_lines]\n-\tif {![gdb_assert {[regexp -- $regexp $contents]} $test_name]} {\n-\t    dump_screen\n-\t}\n+\tgdb_assert {[regexp -- $regexp $contents]} $test_name\n     }\n \n     # Get the region of the screen described by X, Y, WIDTH,\n@@ -800,13 +799,12 @@ namespace eval Term {\n     # choice for boxes with a border).\n     proc check_region_contents { test_name x y width height regexp } {\n \tvariable _chars\n+\tdump_box $x $y $width $height\n \n \t# Now grab the contents of the box, join each line together\n \t# with a '\\r\\n' sequence and match against REGEXP.\n \tset result [get_region $x $y $width $height \"\\r\\n\"]\n-\tif {![gdb_assert {[regexp -- $regexp $result]} $test_name]} {\n-\t    dump_screen\n-\t}\n+\tgdb_assert {[regexp -- $regexp $result]} $test_name\n     }\n \n     # Check the contents of a box on the screen.  This is a little\n@@ -818,9 +816,9 @@ namespace eval Term {\n     proc check_box_contents {test_name x y width height regexp} {\n \tvariable _chars\n \n+\tdump_box $x $y $width $height\n \tset why [_check_box $x $y $width $height]\n \tif {$why != \"\"} {\n-\t    dump_screen\n \t    fail \"$test_name (box check: $why)\"\n \t    return\n \t}"
    }
  ]
}