{
  "sha": "9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
  "node_id": "C_kwDOANOeidoAKDliYzhlNTRiMWYxYzI4MWM3YTRlY2Y0OWE0ZTkzMDBlMzM0YmViMGE",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-12-03T21:31:09Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-12-14T13:47:48Z"
    },
    "message": "bfd: fix -Wunused errors with clang 13+\n\nClang 13 and 14 produce some -Wunused-but-set-{variable,parameter} for\nsituations where gcc doesn't.  In particular, when a variable is set and\nthen used in a way to update its own value.  For example, if `i` is only\nused in this way:\n\n  int i = 2;\n  i++;\n  i = i + 1;\n\ngcc won't warn, but clang will.\n\nFix all such errors found in an --enable-targets=all build.  It would be\nimportant for somebody who knows what they're doing to just make sure\nthat these variables can indeed be deleted, and that there a no cases\nwhere it's a bug, and the variable should actually be used.\n\nThe first instance of this error fix by this patch is:\n\n      CC       elf32-score.lo\n    /home/simark/src/binutils-gdb/bfd/elf32-score.c:450:11: error: variable 'relocation' set but not used [-Werror,-Wunused-but-set-variable]\n      bfd_vma relocation;\n              ^\n\nChange-Id: I2f233ce20352645cf388aff3dfa08a651d21a6b6",
    "tree": {
      "sha": "a14d07055ccb22a4858f58147c5492ca55460425",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a14d07055ccb22a4858f58147c5492ca55460425"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "78d4da9ae0d3447f28274a00b278f58ca7d8d1b2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/78d4da9ae0d3447f28274a00b278f58ca7d8d1b2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/78d4da9ae0d3447f28274a00b278f58ca7d8d1b2"
    }
  ],
  "stats": {
    "total": 96,
    "additions": 9,
    "deletions": 87
  },
  "files": [
    {
      "sha": "44cb1f3a5a68f1f4fb4644322805afa66a4871b2",
      "filename": "bfd/ecofflink.c",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/ecofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/ecofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecofflink.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -2402,9 +2402,6 @@ _bfd_ecoff_locate_line (bfd *abfd,\n static bool\n ecoff_collect_shuffle (struct shuffle *l, bfd_byte *buff)\n {\n-  unsigned long total;\n-\n-  total = 0;\n   for (; l != (struct shuffle *) NULL; l = l->next)\n     {\n       if (! l->filep)\n@@ -2416,7 +2413,6 @@ ecoff_collect_shuffle (struct shuffle *l, bfd_byte *buff)\n \t\t  != l->size))\n \t    return false;\n \t}\n-      total += l->size;\n       buff += l->size;\n     }\n \n@@ -2451,13 +2447,11 @@ _bfd_ecoff_get_accumulated_ss (void * handle, bfd_byte *buff)\n {\n   struct accumulate *ainfo = (struct accumulate *) handle;\n   struct string_hash_entry *sh;\n-  unsigned long total;\n \n   /* The string table is written out from the hash table if this is a\n      final link.  */\n   BFD_ASSERT (ainfo->ss == (struct shuffle *) NULL);\n   *buff++ = '\\0';\n-  total = 1;\n   BFD_ASSERT (ainfo->ss_hash == NULL || ainfo->ss_hash->val == 1);\n   for (sh = ainfo->ss_hash;\n        sh != (struct string_hash_entry *) NULL;\n@@ -2467,7 +2461,6 @@ _bfd_ecoff_get_accumulated_ss (void * handle, bfd_byte *buff)\n \n       len = strlen (sh->root.string);\n       memcpy (buff, sh->root.string, len + 1);\n-      total += len + 1;\n       buff += len + 1;\n     }\n "
    },
    {
      "sha": "9cca778e7db2f62e612e53ad839652c887683b7b",
      "filename": "bfd/elf-m10200.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf-m10200.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf-m10200.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-m10200.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -795,14 +795,8 @@ mn10200_elf_relax_section (bfd *abfd,\n       if (ELF32_R_TYPE (irel->r_info) == (int) R_MN10200_PCREL8)\n \t{\n \t  Elf_Internal_Rela *nrel;\n-\t  bfd_vma value = symval;\n \t  unsigned char code;\n \n-\t  /* Deal with pc-relative gunk.  */\n-\t  value -= (sec->output_section->vma + sec->output_offset);\n-\t  value -= (irel->r_offset + 1);\n-\t  value += irel->r_addend;\n-\n \t  /* Do nothing if this reloc is the last byte in the section.  */\n \t  if (irel->r_offset == sec->size)\n \t    continue;"
    },
    {
      "sha": "ab2c1304855b22519463e48a60c562de00cfc844",
      "filename": "bfd/elf-m10300.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf-m10300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf-m10300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-m10300.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -3702,14 +3702,8 @@ mn10300_elf_relax_section (bfd *abfd,\n       if (ELF32_R_TYPE (irel->r_info) == (int) R_MN10300_PCREL8)\n \t{\n \t  Elf_Internal_Rela *nrel;\n-\t  bfd_vma value = symval;\n \t  unsigned char code;\n \n-\t  /* Deal with pc-relative gunk.  */\n-\t  value -= (sec->output_section->vma + sec->output_offset);\n-\t  value -= irel->r_offset;\n-\t  value += irel->r_addend;\n-\n \t  /* Do nothing if this reloc is the last byte in the section.  */\n \t  if (irel->r_offset == sec->size)\n \t    continue;"
    },
    {
      "sha": "9cf0064447e1d4fb5c6f77041f76d67122b78a1f",
      "filename": "bfd/elf32-bfin.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-bfin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-bfin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-bfin.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -4109,7 +4109,7 @@ _bfinfdpic_check_discarded_relocs (bfd *abfd, asection *sec,\n \t\t\t\t   bool *changed)\n {\n   Elf_Internal_Shdr *symtab_hdr;\n-  struct elf_link_hash_entry **sym_hashes, **sym_hashes_end;\n+  struct elf_link_hash_entry **sym_hashes;\n   Elf_Internal_Rela *rel, *erel;\n \n   if ((sec->flags & SEC_RELOC) == 0\n@@ -4118,9 +4118,6 @@ _bfinfdpic_check_discarded_relocs (bfd *abfd, asection *sec,\n \n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);\n-  sym_hashes_end = sym_hashes + symtab_hdr->sh_size/sizeof(Elf32_External_Sym);\n-  if (!elf_bad_symtab (abfd))\n-    sym_hashes_end -= symtab_hdr->sh_info;\n \n   rel = elf_section_data (sec)->relocs;\n "
    },
    {
      "sha": "b23ff34c10aa572886f8011a1de69c9d617bba49",
      "filename": "bfd/elf32-cr16.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-cr16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-cr16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-cr16.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -700,7 +700,7 @@ cr16_elf_check_relocs (bfd *abfd, struct bfd_link_info *info, asection *sec,\n {\n   Elf_Internal_Shdr *symtab_hdr;\n   Elf_Internal_Sym * isymbuf = NULL;\n-  struct elf_link_hash_entry **sym_hashes, **sym_hashes_end;\n+  struct elf_link_hash_entry **sym_hashes;\n   const Elf_Internal_Rela *rel;\n   const Elf_Internal_Rela *rel_end;\n   bfd *      dynobj;\n@@ -717,9 +717,6 @@ cr16_elf_check_relocs (bfd *abfd, struct bfd_link_info *info, asection *sec,\n \n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);\n-  sym_hashes_end = sym_hashes + symtab_hdr->sh_size/sizeof (Elf32_External_Sym);\n-  if (!elf_bad_symtab (abfd))\n-    sym_hashes_end -= symtab_hdr->sh_info;\n \n   dynobj = elf_hash_table (info)->dynobj;\n   local_got_offsets = elf_local_got_offsets (abfd);"
    },
    {
      "sha": "779b6817dfd74426a6617c088e58b7e4b3560ce3",
      "filename": "bfd/elf32-lm32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-lm32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-lm32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-lm32.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -1120,7 +1120,7 @@ lm32_elf_check_relocs (bfd *abfd,\n \t\t       const Elf_Internal_Rela *relocs)\n {\n   Elf_Internal_Shdr *symtab_hdr;\n-  struct elf_link_hash_entry **sym_hashes, **sym_hashes_end;\n+  struct elf_link_hash_entry **sym_hashes;\n   const Elf_Internal_Rela *rel;\n   const Elf_Internal_Rela *rel_end;\n   struct elf_lm32_link_hash_table *htab;\n@@ -1131,9 +1131,6 @@ lm32_elf_check_relocs (bfd *abfd,\n \n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);\n-  sym_hashes_end = sym_hashes + symtab_hdr->sh_size/sizeof (Elf32_External_Sym);\n-  if (!elf_bad_symtab (abfd))\n-    sym_hashes_end -= symtab_hdr->sh_info;\n \n   htab = lm32_elf_hash_table (info);\n   if (htab == NULL)"
    },
    {
      "sha": "b05ee9bca2b1dc30a42c326765a8038de7da86ef",
      "filename": "bfd/elf32-microblaze.c",
      "status": "modified",
      "additions": 0,
      "deletions": 14,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-microblaze.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-microblaze.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-microblaze.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -2088,8 +2088,6 @@ microblaze_elf_relax_section (bfd *abfd,\n \t\t  if (isym->st_shndx == shndx\n \t\t      && (ELF32_ST_TYPE (isym->st_info) == STT_SECTION))\n \t\t    {\n-\t\t      bfd_vma immediate;\n-\n \t\t      if (ocontents == NULL)\n \t\t\t{\n \t\t\t  if (elf_section_data (o)->this_hdr.contents != NULL)\n@@ -2112,15 +2110,7 @@ microblaze_elf_relax_section (bfd *abfd,\n \t\t\t      elf_section_data (o)->this_hdr.contents = ocontents;\n \t\t\t    }\n \t\t\t}\n-\t  unsigned long instr_hi =  bfd_get_32 (abfd, ocontents\n-\t\t\t\t\t\t+ irelscan->r_offset);\n-\t  unsigned long instr_lo =  bfd_get_32 (abfd, ocontents\n-\t\t\t\t\t\t+ irelscan->r_offset\n-\t\t\t\t\t\t+ INST_WORD_SIZE);\n-\t  immediate = (instr_hi & 0x0000ffff) << 16;\n-\t  immediate |= (instr_lo & 0x0000ffff);\n \t\t      offset = calc_fixup (irelscan->r_addend, 0, sec);\n-\t\t      immediate -= offset;\n \t\t      irelscan->r_addend -= offset;\n \t\t    }\n \t\t}\n@@ -2326,7 +2316,6 @@ microblaze_elf_check_relocs (bfd * abfd,\n {\n   Elf_Internal_Shdr *\t\tsymtab_hdr;\n   struct elf_link_hash_entry ** sym_hashes;\n-  struct elf_link_hash_entry ** sym_hashes_end;\n   const Elf_Internal_Rela *\trel;\n   const Elf_Internal_Rela *\trel_end;\n   struct elf32_mb_link_hash_table *htab;\n@@ -2341,9 +2330,6 @@ microblaze_elf_check_relocs (bfd * abfd,\n \n   symtab_hdr = & elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);\n-  sym_hashes_end = sym_hashes + symtab_hdr->sh_size / sizeof (Elf32_External_Sym);\n-  if (!elf_bad_symtab (abfd))\n-    sym_hashes_end -= symtab_hdr->sh_info;\n \n   rel_end = relocs + sec->reloc_count;\n "
    },
    {
      "sha": "5b43ca97803563dc4208e319c262fe2d74a33784",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 2,
      "deletions": 10,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -6973,7 +6973,7 @@ nds32_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t\tasection *sec, const Elf_Internal_Rela *relocs)\n {\n   Elf_Internal_Shdr *symtab_hdr;\n-  struct elf_link_hash_entry **sym_hashes, **sym_hashes_end;\n+  struct elf_link_hash_entry **sym_hashes;\n   const Elf_Internal_Rela *rel;\n   const Elf_Internal_Rela *rel_end;\n   struct elf_link_hash_table *ehtab;\n@@ -6990,10 +6990,6 @@ nds32_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);\n-  sym_hashes_end =\n-    sym_hashes + symtab_hdr->sh_size / sizeof (Elf32_External_Sym);\n-  if (!elf_bad_symtab (abfd))\n-    sym_hashes_end -= symtab_hdr->sh_info;\n \n   ehtab = elf_hash_table (info);\n   htab = nds32_elf_hash_table (info);\n@@ -13478,12 +13474,8 @@ nds32_elf_unify_tls_model (bfd *inbfd, asection *insec, bfd_byte *incontents,\n   relax_group_list_t chain = { .id = -1, .next = NULL, .next_sibling = NULL };\n \n   Elf_Internal_Shdr *symtab_hdr = &elf_tdata (inbfd)->symtab_hdr;\n-  struct elf_link_hash_entry **sym_hashes, **sym_hashes_end;\n+  struct elf_link_hash_entry **sym_hashes;\n   sym_hashes = elf_sym_hashes (inbfd);\n-  sym_hashes_end =\n-    sym_hashes + symtab_hdr->sh_size / sizeof (Elf32_External_Sym);\n-  if (!elf_bad_symtab (inbfd))\n-    sym_hashes_end -= symtab_hdr->sh_info;\n \n   /* Reorder RELAX_GROUP when command line option '-r' is applied.  */\n   if (bfd_link_relocatable (lnkinfo))"
    },
    {
      "sha": "c1a450b61d6af275cbcd0a3b4273d1d5da4f4999",
      "filename": "bfd/elf32-nios2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nios2.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -4676,7 +4676,7 @@ nios2_elf32_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t\t  asection *sec, const Elf_Internal_Rela *relocs)\n {\n   Elf_Internal_Shdr *symtab_hdr;\n-  struct elf_link_hash_entry **sym_hashes, **sym_hashes_end;\n+  struct elf_link_hash_entry **sym_hashes;\n   const Elf_Internal_Rela *rel;\n   const Elf_Internal_Rela *rel_end;\n   struct elf32_nios2_link_hash_table *htab;\n@@ -4688,10 +4688,6 @@ nios2_elf32_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);\n-  sym_hashes_end = (sym_hashes\n-\t\t    + symtab_hdr->sh_size / sizeof (Elf32_External_Sym));\n-  if (!elf_bad_symtab (abfd))\n-    sym_hashes_end -= symtab_hdr->sh_info;\n   local_got_refcounts = elf_local_got_refcounts (abfd);\n \n   htab = elf32_nios2_hash_table (info);"
    },
    {
      "sha": "cf2a3a43a8485b520f093707a15607a9b9e6a6e7",
      "filename": "bfd/elf32-score.c",
      "status": "modified",
      "additions": 2,
      "deletions": 11,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-score.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-score.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-score.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -440,23 +440,14 @@ score_elf_final_gp (bfd *output_bfd,\n \n static bfd_reloc_status_type\n score_elf_gprel15_with_gp (bfd *abfd,\n-\t\t\t   asymbol *symbol,\n \t\t\t   arelent *reloc_entry,\n \t\t\t   asection *input_section,\n \t\t\t   bool relocateable,\n \t\t\t   void * data,\n \t\t\t   bfd_vma gp ATTRIBUTE_UNUSED)\n {\n-  bfd_vma relocation;\n   unsigned long insn;\n \n-  if (bfd_is_com_section (symbol->section))\n-    relocation = 0;\n-  else\n-    relocation = symbol->value;\n-\n-  relocation += symbol->section->output_section->vma;\n-  relocation += symbol->section->output_offset;\n   if (reloc_entry->address > input_section->size)\n     return bfd_reloc_outofrange;\n \n@@ -547,8 +538,8 @@ score_elf_gprel15_reloc (bfd *abfd,\n   if (ret != bfd_reloc_ok)\n     return ret;\n \n-  return score_elf_gprel15_with_gp (abfd, symbol, reloc_entry,\n-\t\t\t\t\t input_section, relocateable, data, gp);\n+  return score_elf_gprel15_with_gp (abfd, reloc_entry,\n+\t\t\t\t    input_section, relocateable, data, gp);\n }\n \n /* Do a R_SCORE_GPREL32 relocation.  This is a 32 bit value which must"
    },
    {
      "sha": "b3eac5604825a1d85a0625c30394168c88f2913d",
      "filename": "bfd/elf32-score7.c",
      "status": "modified",
      "additions": 1,
      "deletions": 10,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-score7.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf32-score7.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-score7.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -340,23 +340,14 @@ score_elf_final_gp (bfd *output_bfd,\n \n static bfd_reloc_status_type\n score_elf_gprel15_with_gp (bfd *abfd,\n-\t\t\t   asymbol *symbol,\n \t\t\t   arelent *reloc_entry,\n \t\t\t   asection *input_section,\n \t\t\t   bool relocateable,\n \t\t\t   void * data,\n \t\t\t   bfd_vma gp ATTRIBUTE_UNUSED)\n {\n-  bfd_vma relocation;\n   unsigned long insn;\n \n-  if (bfd_is_com_section (symbol->section))\n-    relocation = 0;\n-  else\n-    relocation = symbol->value;\n-\n-  relocation += symbol->section->output_section->vma;\n-  relocation += symbol->section->output_offset;\n   if (reloc_entry->address > input_section->size)\n     return bfd_reloc_outofrange;\n \n@@ -449,7 +440,7 @@ score_elf_gprel15_reloc (bfd *abfd,\n   if (ret != bfd_reloc_ok)\n     return ret;\n \n-  return score_elf_gprel15_with_gp (abfd, symbol, reloc_entry,\n+  return score_elf_gprel15_with_gp (abfd, reloc_entry,\n \t\t\t\t    input_section, relocateable, data, gp);\n }\n "
    },
    {
      "sha": "54645f00ce4f20a58857e91289102c281e0924ca",
      "filename": "bfd/elf64-ia64-vms.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf64-ia64-vms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a/bfd/elf64-ia64-vms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ia64-vms.c?ref=9bc8e54b1f1c281c7a4ecf49a4e9300e334beb0a",
      "patch": "@@ -2512,8 +2512,6 @@ allocate_dynrel_entries (struct elf64_ia64_dyn_sym_info *dyn_i,\n \n   for (rent = dyn_i->reloc_entries; rent; rent = rent->next)\n     {\n-      int count = rent->count;\n-\n       switch (rent->type)\n \t{\n \tcase R_IA64_FPTR32LSB:\n@@ -2538,10 +2536,6 @@ allocate_dynrel_entries (struct elf64_ia64_dyn_sym_info *dyn_i,\n \tcase R_IA64_IPLTLSB:\n \t  if (!dynamic_symbol && !shared)\n \t    continue;\n-\t  /* Use two REL relocations for IPLT relocations\n-\t     against local symbols.  */\n-\t  if (!dynamic_symbol)\n-\t    count *= 2;\n \t  break;\n \tcase R_IA64_DTPREL32LSB:\n \tcase R_IA64_TPREL64LSB:"
    }
  ]
}