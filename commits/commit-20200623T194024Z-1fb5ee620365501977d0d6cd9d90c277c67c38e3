{
  "sha": "1fb5ee620365501977d0d6cd9d90c277c67c38e3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWZiNWVlNjIwMzY1NTAxOTc3ZDBkNmNkOWQ5MGMyNzdjNjdjMzhlMw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-23T19:40:23Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-06-23T19:40:24Z"
    },
    "message": "gdb: add some more empty lines in loc.c\n\nAdd some empty lines at places I forgot in the previous patch.\n\ngdb/ChangeLog:\n\n\t* dwarf2/loc.c (decode_debug_loclists_addresses): Add empty\n\tlines.\n\nChange-Id: I8a9f3766ede1ce750e0703023285dca873bce0da",
    "tree": {
      "sha": "9ced5c26c98ddc35322e21ebd97aeeab1807e0f3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9ced5c26c98ddc35322e21ebd97aeeab1807e0f3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1fb5ee620365501977d0d6cd9d90c277c67c38e3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fb5ee620365501977d0d6cd9d90c277c67c38e3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1fb5ee620365501977d0d6cd9d90c277c67c38e3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fb5ee620365501977d0d6cd9d90c277c67c38e3/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fc3ecb3e61fe5dcc16c206e4135b33cc1a32ba49"
    }
  ],
  "stats": {
    "total": 22,
    "additions": 22,
    "deletions": 0
  },
  "files": [
    {
      "sha": "08e4d310e447b8e14e6159ead4d418d2dd23239e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb5ee620365501977d0d6cd9d90c277c67c38e3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb5ee620365501977d0d6cd9d90c277c67c38e3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1fb5ee620365501977d0d6cd9d90c277c67c38e3",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-23  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/loc.c (decode_debug_loclists_addresses): Add empty\n+\tlines.\n+\n 2020-06-23  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/loc.c (decode_debug_loc_dwo_addresses): Add empty"
    },
    {
      "sha": "445d71a5ef1665ebbefb0377ec60e65c5dde1e56",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb5ee620365501977d0d6cd9d90c277c67c38e3/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb5ee620365501977d0d6cd9d90c277c67c38e3/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=1fb5ee620365501977d0d6cd9d90c277c67c38e3",
      "patch": "@@ -184,60 +184,77 @@ decode_debug_loclists_addresses (dwarf2_per_cu_data *per_cu,\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n       if (loc_ptr == NULL)\n \t return DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       *high = dwarf2_read_addr_index (per_cu, per_objfile, u64);\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_BASE_ADDRESS;\n+\n     case DW_LLE_startx_length:\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n       if (loc_ptr == NULL)\n \t return DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       *low = dwarf2_read_addr_index (per_cu, per_objfile, u64);\n       *high = *low;\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n       if (loc_ptr == NULL)\n \t return DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       *high += u64;\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_START_LENGTH;\n+\n     case DW_LLE_start_length:\n       if (buf_end - loc_ptr < addr_size)\n \t return DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       if (signed_addr_p)\n \t *low = extract_signed_integer (loc_ptr, addr_size, byte_order);\n       else\n \t *low = extract_unsigned_integer (loc_ptr, addr_size, byte_order);\n+\n       loc_ptr += addr_size;\n       *high = *low;\n+\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n       if (loc_ptr == NULL)\n \t return DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       *high += u64;\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_START_LENGTH;\n+\n     case DW_LLE_end_of_list:\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_END_OF_LIST;\n+\n     case DW_LLE_base_address:\n       if (loc_ptr + addr_size > buf_end)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       if (signed_addr_p)\n \t*high = extract_signed_integer (loc_ptr, addr_size, byte_order);\n       else\n \t*high = extract_unsigned_integer (loc_ptr, addr_size, byte_order);\n+\n       loc_ptr += addr_size;\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_BASE_ADDRESS;\n+\n     case DW_LLE_offset_pair:\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n       if (loc_ptr == NULL)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       *low = u64;\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n       if (loc_ptr == NULL)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n+\n       *high = u64;\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_OFFSET_PAIR;\n+\n     /* Following cases are not supported yet.  */\n     case DW_LLE_startx_endx:\n     case DW_LLE_start_end:"
    }
  ]
}