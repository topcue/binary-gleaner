{
  "sha": "61ab1364c7efa3934e0ca62af444e6e6e34f219e",
  "node_id": "C_kwDOANOeidoAKDYxYWIxMzY0YzdlZmEzOTM0ZTBjYTYyYWY0NDRlNmU2ZTM0ZjIxOWU",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-12-16T14:05:40Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-12-16T14:05:40Z"
    },
    "message": "When loading separate debug info files, also attempt to locate a file based upon the build-id.\n\n\tPR 28697\n\t* dwarf.c (load_build_id_debug_file): New function.\n\t(try_build_id_prefix): New function.\n\t(check_for_and_load_links): Call load_build_id_debug_file.\n\t(debug_displays): Add entry for .note.gnu.build-id.\n\t* dwarf.h (enum dwarf_section_display_enum): Add\n\tnote_gnu_build_id.\n\t* testsuite/binutils-all/debuginfod.exp (test_fetch_debuglink):\n\tFix regexp for loads via debuglink section.",
    "tree": {
      "sha": "19c55de789643442ba201ef5772b9bce33097a4e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/19c55de789643442ba201ef5772b9bce33097a4e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/61ab1364c7efa3934e0ca62af444e6e6e34f219e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61ab1364c7efa3934e0ca62af444e6e6e34f219e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/61ab1364c7efa3934e0ca62af444e6e6e34f219e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61ab1364c7efa3934e0ca62af444e6e6e34f219e/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a2b1ea81bacc044a721092484c7cdcb600bcf9ce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2b1ea81bacc044a721092484c7cdcb600bcf9ce",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a2b1ea81bacc044a721092484c7cdcb600bcf9ce"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 131,
    "deletions": 4
  },
  "files": [
    {
      "sha": "9ed85a93c5333dfe48f88a913dbf0752d3d74795",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61ab1364c7efa3934e0ca62af444e6e6e34f219e/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61ab1364c7efa3934e0ca62af444e6e6e34f219e/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=61ab1364c7efa3934e0ca62af444e6e6e34f219e",
      "patch": "@@ -1,3 +1,15 @@\n+2021-12-16  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 28697\n+\t* dwarf.c (load_build_id_debug_file): New function.\n+\t(try_build_id_prefix): New function.\n+\t(check_for_and_load_links): Call load_build_id_debug_file.\n+\t(debug_displays): Add entry for .note.gnu.build-id.\n+\t* dwarf.h (enum dwarf_section_display_enum): Add\n+\tnote_gnu_build_id.\n+\t* testsuite/binutils-all/debuginfod.exp (test_fetch_debuglink):\n+\tFix regexp for loads via debuglink section.\n+\n 2021-12-03  Chenghua Xu  <xuchenghua@loongson.cn>\n \n \t* MAINTAINERS: Add myself and Zhensong Liu"
    },
    {
      "sha": "12c5b0a8fa29372783b8bbbe34c8d3bfc7f58c42",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 115,
      "deletions": 1,
      "changes": 116,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61ab1364c7efa3934e0ca62af444e6e6e34f219e/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61ab1364c7efa3934e0ca62af444e6e6e34f219e/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=61ab1364c7efa3934e0ca62af444e6e6e34f219e",
      "patch": "@@ -11292,6 +11292,117 @@ load_dwo_file (const char * main_filename, const char * name, const char * dir,\n   return separate_handle;\n }\n \n+static void *\n+try_build_id_prefix (const char * prefix, char * filename, const unsigned char * data, unsigned long id_len)\n+{\n+  char * f = filename;\n+\n+  f += sprintf (f, prefix);\n+  f += sprintf (f, \".build-id/%02x/\", (unsigned) *data++);\n+  id_len --;\n+  while (id_len --)\n+    f += sprintf (f, \"%02x\", (unsigned) *data++);\n+  f += sprintf (f, \".debug\");\n+\n+  return open_debug_file (filename);\n+}\n+\n+/* Try to load a debug file based upon the build-id held in the .note.gnu.build-id section.  */\n+\n+static void\n+load_build_id_debug_file (const char * main_filename, void * main_file)\n+{\n+  if (! load_debug_section (note_gnu_build_id, main_file))\n+    return; /* No .note.gnu.build-id section.  */\n+\n+  struct dwarf_section * section = & debug_displays [note_gnu_build_id].section;\n+  if (section == NULL)\n+    {\n+      warn (_(\"Unable to load the .note.gnu.build-id section\\n\"));\n+      return;\n+    }\n+\n+  if (section->start == NULL || section->size < 0x18)\n+    {\n+      warn (_(\".note.gnu.build-id section is corrupt/empty\\n\"));\n+      return;\n+    }\n+\n+  /* In theory we should extract the contents of the section into\n+     a note structure and then check the fields.  For now though\n+     just use hard coded offsets instead:\n+     \n+       Field  Bytes    Contents\n+\tNSize  0...3   4\n+\tDSize  4...7   8+\n+\tType   8..11   3  (NT_GNU_BUILD_ID)\n+        Name   12.15   GNU\\0\n+\tData   16....   */\n+\n+  /* FIXME: Check the name size, name and type fields.  */\n+\n+  unsigned long build_id_size;\n+  build_id_size = byte_get (section->start + 4, 4);\n+  if (build_id_size < 8)\n+    {\n+      warn (_(\".note.gnu.build-id data size is too small\\n\"));\n+      return;\n+    }\n+  \n+  if (build_id_size > (section->size - 16))\n+    {\n+      warn (_(\".note.gnu.build-id data size is too bug\\n\"));\n+      return;\n+    }\n+\n+  char * filename;\n+  filename = xmalloc (strlen (\".build-id/\")\n+\t\t      + build_id_size * 2 + 2\n+\t\t      + strlen (\".debug\")\n+\t\t      /* The next string should be the same as the longest\n+\t\t\t name found in the prefixes[] array below.  */\n+\t\t      + strlen (\"/usrlib64/debug/usr\")\n+\t\t      + 1);\n+  void * handle;\n+\n+  static const char * prefixes[] =\n+    {\n+      \"\",\n+      \".debug/\",\n+      \"/usr/lib/debug/\",\n+      \"/usr/lib/debug/usr/\",\n+      \"/usr/lib64/debug/\",\n+      \"/usr/lib64/debug/usr\"\n+    };\n+  long unsigned int i;\n+\n+  for (i = 0; i < ARRAY_SIZE (prefixes); i++)\n+    {\n+      handle = try_build_id_prefix (prefixes[i], filename,\n+\t\t\t\t    section->start + 16, build_id_size);\n+      if (handle != NULL)\n+\tbreak;\n+    }\n+  /* FIXME: TYhe BFD library also tries a global debugfile directory prefix.  */\n+  if (handle == NULL)\n+    {\n+      /* Failed to find a debug file associated with the build-id.\n+\t This is not an error however, rather it just means that\n+\t the debug info has probably not been loaded on the system,\n+\t or that another method is being used to link to the debug\n+\t info.  */\n+      free (filename);\n+      return;\n+    }\n+\n+  printf (_(\"%s: Found build-id indexed debug file: %s\\n\\n\"),\n+\t  main_filename, filename);\n+\n+  add_separate_debug_file (filename, handle);\n+}\n+\n+/* Try to load a debug file pointed to by the .debug_sup section.  */\n+\n static void\n load_debug_sup_file (const char * main_filename, void * file)\n {\n@@ -11409,6 +11520,8 @@ check_for_and_load_links (void * file, const char * filename)\n     }\n \n   load_debug_sup_file (filename, file);\n+\n+  load_build_id_debug_file (filename, file);\n }\n \n /* Load the separate debug info file(s) attached to FILE, if any exist.\n@@ -11779,7 +11892,8 @@ struct dwarf_section_display debug_displays[] =\n   /* Separate debug info files can containt their own .debug_str section,\n      and this might be in *addition* to a .debug_str section already present\n      in the main file.\tHence we need to have two entries for .debug_str.  */\n-  { { \".debug_str\",\t    \".zdebug_str\",\t\"\",\t  NO_ABBREVS },\t     display_debug_str,\t   &do_debug_str,\tfalse },\n+  { { \".debug_str\",\t    \".zdebug_str\",\t     \"\",\t NO_ABBREVS },\t    display_debug_str,\t    &do_debug_str,\tfalse },\n+  { { \".note.gnu.build-id\", \"\",                      \"\",\t NO_ABBREVS },\t    display_debug_not_supported, NULL,\t\tfalse },\n };\n \n /* A static assertion.  */"
    },
    {
      "sha": "1463d2027a065f08b1d0931ec320b7cb572c32e4",
      "filename": "binutils/dwarf.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61ab1364c7efa3934e0ca62af444e6e6e34f219e/binutils/dwarf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61ab1364c7efa3934e0ca62af444e6e6e34f219e/binutils/dwarf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.h?ref=61ab1364c7efa3934e0ca62af444e6e6e34f219e",
      "patch": "@@ -122,6 +122,7 @@ enum dwarf_section_display_enum\n   gnu_debugaltlink,\n   debug_sup,\n   separate_debug_str,\n+  note_gnu_build_id,\n   max\n };\n "
    },
    {
      "sha": "514fa3d5b3059ad57c95d6db685134dd7c7b5b89",
      "filename": "binutils/testsuite/binutils-all/debuginfod.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61ab1364c7efa3934e0ca62af444e6e6e34f219e/binutils/testsuite/binutils-all/debuginfod.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61ab1364c7efa3934e0ca62af444e6e6e34f219e/binutils/testsuite/binutils-all/debuginfod.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/debuginfod.exp?ref=61ab1364c7efa3934e0ca62af444e6e6e34f219e",
      "patch": "@@ -161,10 +161,10 @@ proc test_fetch_debuglink { prog progargs } {\n \n     set got [binutils_run $prog \"$progargs tmpdir/testprog\"]\n \n-    if { [regexp \".*Found separate debug info file.*Contents\\[^\\n\\]*loaded from\\[^\\n\\]*$cache.*\" $got] } {\n+    if { [regexp \".*Found separate debug info file.*Contents\\[^\\n\\]*loaded from\\[^\\n\\]*\" $got] } {\n        pass \"$test ($prog debuglink)\"\n     } else {\n-       fail \"$test ($prog debuglink)\"\n+       fail \"$test ($prog did not find debuglink to cache $cache)\"\n     }\n }\n \n@@ -180,7 +180,7 @@ proc test_fetch_debugaltlink { prog progargs } {\n     if { [regexp \".*Found separate debug info file\\[^\\n\\]*$cache/$buildid\" $got] } {\n         pass \"$test ($prog debugaltlink)\"\n     } else {\n-        fail \"$test ($prog debugaltlink)\"\n+        fail \"$test ($prog could not load debugaltlink)\"\n     }\n }\n "
    }
  ]
}