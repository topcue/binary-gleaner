{
  "sha": "e74d08100dd3d1c5aee6eb67235465ebed194380",
  "node_id": "C_kwDOANOeidoAKGU3NGQwODEwMGRkM2QxYzVhZWU2ZWI2NzIzNTQ2NWViZWQxOTQzODA",
  "commit": {
    "author": {
      "name": "Tiezhu Yang",
      "email": "yangtiezhu@loongson.cn",
      "date": "2022-02-11T12:12:30Z"
    },
    "committer": {
      "name": "Tiezhu Yang",
      "email": "yangtiezhu@loongson.cn",
      "date": "2022-02-11T12:12:30Z"
    },
    "message": "gdb: LoongArch: Add initial target description support\n\nThis commit adds initial target description support for LoongArch.\n\nSigned-off-by: Zhensong Liu <liuzhensong@loongson.cn>\nSigned-off-by: Qing zhang <zhangqing@loongson.cn>\nSigned-off-by: Youling Tang <tangyouling@loongson.cn>\nSigned-off-by: Tiezhu Yang <yangtiezhu@loongson.cn>",
    "tree": {
      "sha": "ae3e047cf6c2ec47d755317a569b7b4803ec621c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ae3e047cf6c2ec47d755317a569b7b4803ec621c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e74d08100dd3d1c5aee6eb67235465ebed194380",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e74d08100dd3d1c5aee6eb67235465ebed194380",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e74d08100dd3d1c5aee6eb67235465ebed194380",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e74d08100dd3d1c5aee6eb67235465ebed194380/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "7c1aa0090f673e29e0b54eae9975b2c1b72a49d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c1aa0090f673e29e0b54eae9975b2c1b72a49d2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7c1aa0090f673e29e0b54eae9975b2c1b72a49d2"
    }
  ],
  "stats": {
    "total": 353,
    "additions": 353,
    "deletions": 0
  },
  "files": [
    {
      "sha": "934f6e489c5fd136e3f082c685ef3d9e9412736e",
      "filename": "gdb/arch/loongarch.c",
      "status": "added",
      "additions": 88,
      "deletions": 0,
      "changes": 88,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/arch/loongarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/arch/loongarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/loongarch.c?ref=e74d08100dd3d1c5aee6eb67235465ebed194380",
      "patch": "@@ -0,0 +1,88 @@\n+/* Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"gdbsupport/common-defs.h\"\n+#include \"loongarch.h\"\n+#include <stdlib.h>\n+#include <unordered_map>\n+\n+/* Target description features.  */\n+\n+#include \"../features/loongarch/base32.c\"\n+#include \"../features/loongarch/base64.c\"\n+\n+static target_desc_up\n+loongarch_create_target_description (const struct loongarch_gdbarch_features features)\n+{\n+  /* Now we should create a new target description.  */\n+  target_desc_up tdesc = allocate_target_description ();\n+\n+  std::string arch_name = \"loongarch\";\n+\n+  if (features.xlen == 4)\n+    arch_name.append (\"32\");\n+  else if (features.xlen == 8)\n+    arch_name.append (\"64\");\n+\n+  set_tdesc_architecture (tdesc.get (), arch_name.c_str ());\n+\n+  long regnum = 0;\n+\n+  /* For now we only support creating 32-bit or 64-bit x-registers.  */\n+  if (features.xlen == 4)\n+    regnum = create_feature_loongarch_base32 (tdesc.get (), regnum);\n+  else if (features.xlen == 8)\n+    regnum = create_feature_loongarch_base64 (tdesc.get (), regnum);\n+\n+  return tdesc;\n+}\n+\n+/* Wrapper used by std::unordered_map to generate hash for feature set.  */\n+struct loongarch_gdbarch_features_hasher\n+{\n+  std::size_t\n+  operator() (const loongarch_gdbarch_features &features) const noexcept\n+  {\n+    return features.hash ();\n+  }\n+};\n+\n+/* Cache of previously seen target descriptions, indexed by the feature set\n+   that created them.  */\n+static std::unordered_map<loongarch_gdbarch_features,\n+\t\t\t  const target_desc_up,\n+\t\t\t  loongarch_gdbarch_features_hasher> loongarch_tdesc_cache;\n+\n+const target_desc *\n+loongarch_lookup_target_description (const struct loongarch_gdbarch_features features)\n+{\n+  /* Lookup in the cache.  If we find it then return the pointer out of\n+     the target_desc_up (which is a unique_ptr).  This is safe as the\n+     loongarch_tdesc_cache will exist until GDB exits.  */\n+  const auto it = loongarch_tdesc_cache.find (features);\n+  if (it != loongarch_tdesc_cache.end ())\n+    return it->second.get ();\n+\n+  target_desc_up tdesc (loongarch_create_target_description (features));\n+\n+  /* Add to the cache, and return a pointer borrowed from the\n+     target_desc_up.  This is safe as the cache (and the pointers\n+     contained within it) are not deleted until GDB exits.  */\n+  target_desc *ptr = tdesc.get ();\n+  loongarch_tdesc_cache.emplace (features, std::move (tdesc));\n+  return ptr;\n+}"
    },
    {
      "sha": "9e10df967d11f4a13c2c70d0418d34ed7f84cee6",
      "filename": "gdb/arch/loongarch.h",
      "status": "added",
      "additions": 73,
      "deletions": 0,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/arch/loongarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/arch/loongarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/loongarch.h?ref=e74d08100dd3d1c5aee6eb67235465ebed194380",
      "patch": "@@ -0,0 +1,73 @@\n+/* Common target-dependent functionality for LoongArch\n+\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef ARCH_LOONGARCH_H\n+#define ARCH_LOONGARCH_H\n+\n+#include \"gdbsupport/tdesc.h\"\n+\n+/* The set of LoongArch architectural features that we track that impact how\n+   we configure the actual gdbarch instance.  We hold one of these in the\n+   gdbarch_tdep structure, and use it to distinguish between different\n+   LoongArch gdbarch instances.\n+\n+   The information in here ideally comes from the target description,\n+   however, if the target doesn't provide a target description then we will\n+   create a default target description by first populating one of these\n+   based on what we know about the binary being executed, and using that to\n+   drive default target description creation.  */\n+\n+struct loongarch_gdbarch_features\n+{\n+  /* The size of the x-registers in bytes.  This is either 4 (loongarch32)\n+     or 8 (loongarch64).  No other value is valid.  Initialise to the invalid\n+     0 value so we can spot if one of these is used uninitialised.  */\n+  int xlen = 0;\n+\n+  /* Equality operator.  */\n+  bool operator== (const struct loongarch_gdbarch_features &rhs) const\n+  {\n+    return (xlen == rhs.xlen);\n+  }\n+\n+  /* Inequality operator.  */\n+  bool operator!= (const struct loongarch_gdbarch_features &rhs) const\n+  {\n+    return !((*this) == rhs);\n+  }\n+\n+  /* Used by std::unordered_map to hash feature sets.  */\n+  std::size_t hash () const noexcept\n+  {\n+    std::size_t val = (xlen & 0x1f) << 5;\n+    return val;\n+  }\n+};\n+\n+/* Lookup an already existing target description matching FEATURES, or\n+   create a new target description if this is the first time we have seen\n+   FEATURES.  For the same FEATURES the same target_desc is always\n+   returned.  This is important when trying to lookup gdbarch objects as\n+   GDBARCH_LIST_LOOKUP_BY_INFO performs a pointer comparison on target\n+   descriptions to find candidate gdbarch objects.  */\n+\n+const target_desc *loongarch_lookup_target_description\n+\t(const struct loongarch_gdbarch_features features);\n+\n+#endif /* ARCH_LOONGARCH_H  */"
    },
    {
      "sha": "1f85913278b25b87675507b963f2c639e6252a54",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=e74d08100dd3d1c5aee6eb67235465ebed194380",
      "patch": "@@ -46293,6 +46293,7 @@ registers using the capitalization used in the description.\n * ARC Features::\n * ARM Features::\n * i386 Features::\n+* LoongArch Features::\n * MicroBlaze Features::\n * MIPS Features::\n * M68K Features::\n@@ -46521,6 +46522,15 @@ The @samp{org.gnu.gdb.i386.pkeys} feature is optional.  It should\n describe a single register, @samp{pkru}.  It is a 32-bit register\n valid for i386 and amd64.\n \n+@node LoongArch Features\n+@subsection LoongArch Features\n+@cindex target descriptions, LoongArch Features\n+\n+The @samp{org.gnu.gdb.loongarch.base} feature is required for LoongArch\n+targets.  It should contain the registers @samp{r0} through @samp{r31},\n+@samp{pc}, and @samp{badv}.  Either the architectural names (@samp{r0},\n+@samp{r1}, etc) can be used, or the ABI names (@samp{zero}, @samp{ra}, etc).\n+\n @node MicroBlaze Features\n @subsection MicroBlaze Features\n @cindex target descriptions, MicroBlaze features"
    },
    {
      "sha": "7105c152aed3dea9cf01d36bd854ec7663105ba7",
      "filename": "gdb/features/loongarch/base32.c",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/features/loongarch/base32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/features/loongarch/base32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/loongarch/base32.c?ref=e74d08100dd3d1c5aee6eb67235465ebed194380",
      "patch": "@@ -0,0 +1,47 @@\n+/* THIS FILE IS GENERATED.  -*- buffer-read-only: t -*- vi:set ro:\n+  Original: base32.xml */\n+\n+#include \"gdbsupport/tdesc.h\"\n+\n+static int\n+create_feature_loongarch_base32 (struct target_desc *result, long regnum)\n+{\n+  struct tdesc_feature *feature;\n+\n+  feature = tdesc_create_feature (result, \"org.gnu.gdb.loongarch.base\");\n+  tdesc_create_reg (feature, \"r0\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r1\", regnum++, 1, \"general\", 32, \"code_ptr\");\n+  tdesc_create_reg (feature, \"r2\", regnum++, 1, \"general\", 32, \"data_ptr\");\n+  tdesc_create_reg (feature, \"r3\", regnum++, 1, \"general\", 32, \"data_ptr\");\n+  tdesc_create_reg (feature, \"r4\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r5\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r6\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r7\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r8\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r9\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r10\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r11\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r12\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r13\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r14\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r15\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r16\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r17\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r18\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r19\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r20\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r21\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r22\", regnum++, 1, \"general\", 32, \"data_ptr\");\n+  tdesc_create_reg (feature, \"r23\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r24\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r25\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r26\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r27\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r28\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r29\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r30\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"r31\", regnum++, 1, \"general\", 32, \"uint32\");\n+  tdesc_create_reg (feature, \"pc\", regnum++, 1, \"general\", 32, \"code_ptr\");\n+  tdesc_create_reg (feature, \"badv\", regnum++, 1, \"general\", 32, \"code_ptr\");\n+  return regnum;\n+}"
    },
    {
      "sha": "5b00f8a8d377760c3ecc73806af1b9a716973765",
      "filename": "gdb/features/loongarch/base32.xml",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/features/loongarch/base32.xml",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/features/loongarch/base32.xml",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/loongarch/base32.xml?ref=e74d08100dd3d1c5aee6eb67235465ebed194380",
      "patch": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\"?>\n+<!-- Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+     Copying and distribution of this file, with or without modification,\n+     are permitted in any medium without royalty provided the copyright\n+     notice and this notice are preserved.  -->\n+\n+<!DOCTYPE feature SYSTEM \"gdb-target.dtd\">\n+<feature name=\"org.gnu.gdb.loongarch.base\">\n+  <reg name=\"r0\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r1\" bitsize=\"32\" type=\"code_ptr\" group=\"general\"/>\n+  <reg name=\"r2\" bitsize=\"32\" type=\"data_ptr\" group=\"general\"/>\n+  <reg name=\"r3\" bitsize=\"32\" type=\"data_ptr\" group=\"general\"/>\n+  <reg name=\"r4\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r5\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r6\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r7\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r8\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r9\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r10\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r11\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r12\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r13\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r14\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r15\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r16\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r17\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r18\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r19\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r20\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r21\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r22\" bitsize=\"32\" type=\"data_ptr\" group=\"general\"/>\n+  <reg name=\"r23\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r24\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r25\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r26\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r27\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r28\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r29\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r30\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"r31\" bitsize=\"32\" type=\"uint32\" group=\"general\"/>\n+  <reg name=\"pc\" bitsize=\"32\" type=\"code_ptr\" group=\"general\"/>\n+  <reg name=\"badv\" bitsize=\"32\" type=\"code_ptr\" group=\"general\"/>\n+</feature>"
    },
    {
      "sha": "63eee02455458180072b3d244183e5ba741bc933",
      "filename": "gdb/features/loongarch/base64.c",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/features/loongarch/base64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/features/loongarch/base64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/loongarch/base64.c?ref=e74d08100dd3d1c5aee6eb67235465ebed194380",
      "patch": "@@ -0,0 +1,47 @@\n+/* THIS FILE IS GENERATED.  -*- buffer-read-only: t -*- vi:set ro:\n+  Original: base64.xml */\n+\n+#include \"gdbsupport/tdesc.h\"\n+\n+static int\n+create_feature_loongarch_base64 (struct target_desc *result, long regnum)\n+{\n+  struct tdesc_feature *feature;\n+\n+  feature = tdesc_create_feature (result, \"org.gnu.gdb.loongarch.base\");\n+  tdesc_create_reg (feature, \"r0\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r1\", regnum++, 1, \"general\", 64, \"code_ptr\");\n+  tdesc_create_reg (feature, \"r2\", regnum++, 1, \"general\", 64, \"data_ptr\");\n+  tdesc_create_reg (feature, \"r3\", regnum++, 1, \"general\", 64, \"data_ptr\");\n+  tdesc_create_reg (feature, \"r4\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r5\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r6\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r7\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r8\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r9\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r10\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r11\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r12\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r13\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r14\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r15\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r16\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r17\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r18\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r19\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r20\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r21\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r22\", regnum++, 1, \"general\", 64, \"data_ptr\");\n+  tdesc_create_reg (feature, \"r23\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r24\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r25\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r26\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r27\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r28\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r29\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r30\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"r31\", regnum++, 1, \"general\", 64, \"uint64\");\n+  tdesc_create_reg (feature, \"pc\", regnum++, 1, \"general\", 64, \"code_ptr\");\n+  tdesc_create_reg (feature, \"badv\", regnum++, 1, \"general\", 64, \"code_ptr\");\n+  return regnum;\n+}"
    },
    {
      "sha": "bef91e50dd7ad9e61f5fc5d75f3ee2248b9d6d63",
      "filename": "gdb/features/loongarch/base64.xml",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/features/loongarch/base64.xml",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e74d08100dd3d1c5aee6eb67235465ebed194380/gdb/features/loongarch/base64.xml",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/loongarch/base64.xml?ref=e74d08100dd3d1c5aee6eb67235465ebed194380",
      "patch": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\"?>\n+<!-- Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+     Copying and distribution of this file, with or without modification,\n+     are permitted in any medium without royalty provided the copyright\n+     notice and this notice are preserved.  -->\n+\n+<!DOCTYPE feature SYSTEM \"gdb-target.dtd\">\n+<feature name=\"org.gnu.gdb.loongarch.base\">\n+  <reg name=\"r0\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r1\" bitsize=\"64\" type=\"code_ptr\" group=\"general\"/>\n+  <reg name=\"r2\" bitsize=\"64\" type=\"data_ptr\" group=\"general\"/>\n+  <reg name=\"r3\" bitsize=\"64\" type=\"data_ptr\" group=\"general\"/>\n+  <reg name=\"r4\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r5\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r6\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r7\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r8\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r9\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r10\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r11\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r12\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r13\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r14\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r15\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r16\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r17\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r18\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r19\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r20\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r21\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r22\" bitsize=\"64\" type=\"data_ptr\" group=\"general\"/>\n+  <reg name=\"r23\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r24\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r25\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r26\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r27\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r28\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r29\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r30\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"r31\" bitsize=\"64\" type=\"uint64\" group=\"general\"/>\n+  <reg name=\"pc\" bitsize=\"64\" type=\"code_ptr\" group=\"general\"/>\n+  <reg name=\"badv\" bitsize=\"64\" type=\"code_ptr\" group=\"general\"/>\n+</feature>"
    }
  ]
}