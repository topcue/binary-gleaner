{
  "sha": "6640a367bf5427779856e7c80ae4b4bd88c19d3c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjY0MGEzNjdiZjU0Mjc3Nzk4NTZlN2M4MGFlNGI0YmQ4OGMxOWQzYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-22T22:53:12Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-25T05:32:09Z"
    },
    "message": "Remove null_block_symbol\n\nThis removes null_block_symbol.  It seemed simpler to me to change\ninitializations and returns to use value initialization rather than\nnull_block_symbol.  This also fixes up a few spots where\ninitialization was done piecemeal.\n\ngdb/ChangeLog\n2019-03-24  Tom Tromey  <tom@tromey.com>\n\n\t* ada-lang.c (standard_lookup): Simplify initialization.\n\t(ada_lookup_symbol_nonlocal): Simplify return.\n\t* solib-spu.c (spu_lookup_lib_symbol): Simplify return.\n\t* solib-darwin.c (darwin_lookup_lib_symbol): Simplify return.\n\t* solib-svr4.c (elf_lookup_lib_symbol): Simplify return.\n\t* rust-lang.c (rust_lookup_symbol_nonlocal): Simplify\n\tinitialization.\n\t* solib.c (solib_global_lookup): Simplify.\n\t* symtab.c (null_block_symbol): Remove.\n\t(symbol_cache_lookup): Simplify returns.\n\t(lookup_language_this): Simplify returns.\n\t(lookup_symbol_aux): Simplify return.\n\t(lookup_local_symbol): Simplify returns.\n\t(lookup_global_symbol_from_objfile): Simplify return.\n\t(lookup_symbol_in_objfile_symtabs)\n\t(lookup_symbol_in_objfile_from_linkage_name): Simplify return.\n\t(lookup_symbol_via_quick_fns, lookup_symbol_in_static_block)\n\t(lookup_static_symbol, lookup_global_symbol): Simplify return.\n\t* cp-namespace.c (cp_lookup_bare_symbol)\n\t(cp_search_static_and_baseclasses, cp_lookup_symbol_via_imports)\n\t(cp_lookup_symbol_via_all_imports, cp_lookup_nested_symbol_1)\n\t(cp_lookup_nested_symbol): Don't use null_block_symbol.\n\t(cp_lookup_symbol_via_imports): Simplify initialization.\n\t(find_symbol_in_baseclass): Likewise.\n\t* symtab.h (null_block_symbol): Remove.\n\t* d-namespace.c (d_lookup_symbol): Don't use null_block_symbol.\n\t(d_lookup_nested_symbol, d_lookup_symbol_imports)\n\t(d_lookup_symbol_module): Likewise.\n\t(find_symbol_in_baseclass): Simplify initialization.",
    "tree": {
      "sha": "c284eec96b2024f564b01d9c042ef9dbf0d94628",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c284eec96b2024f564b01d9c042ef9dbf0d94628"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6640a367bf5427779856e7c80ae4b4bd88c19d3c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6640a367bf5427779856e7c80ae4b4bd88c19d3c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6640a367bf5427779856e7c80ae4b4bd88c19d3c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6640a367bf5427779856e7c80ae4b4bd88c19d3c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a930ebcdf9594d6b6f91b634dceec1b2425a76a0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a930ebcdf9594d6b6f91b634dceec1b2425a76a0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a930ebcdf9594d6b6f91b634dceec1b2425a76a0"
    }
  ],
  "stats": {
    "total": 126,
    "additions": 71,
    "deletions": 55
  },
  "files": [
    {
      "sha": "2f63bc3ef0658419f6c5c4b89ac6ac7e6aedf58d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "patch": "@@ -1,3 +1,35 @@\n+2019-03-24  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-lang.c (standard_lookup): Simplify initialization.\n+\t(ada_lookup_symbol_nonlocal): Simplify return.\n+\t* solib-spu.c (spu_lookup_lib_symbol): Simplify return.\n+\t* solib-darwin.c (darwin_lookup_lib_symbol): Simplify return.\n+\t* solib-svr4.c (elf_lookup_lib_symbol): Simplify return.\n+\t* rust-lang.c (rust_lookup_symbol_nonlocal): Simplify\n+\tinitialization.\n+\t* solib.c (solib_global_lookup): Simplify.\n+\t* symtab.c (null_block_symbol): Remove.\n+\t(symbol_cache_lookup): Simplify returns.\n+\t(lookup_language_this): Simplify returns.\n+\t(lookup_symbol_aux): Simplify return.\n+\t(lookup_local_symbol): Simplify returns.\n+\t(lookup_global_symbol_from_objfile): Simplify return.\n+\t(lookup_symbol_in_objfile_symtabs)\n+\t(lookup_symbol_in_objfile_from_linkage_name): Simplify return.\n+\t(lookup_symbol_via_quick_fns, lookup_symbol_in_static_block)\n+\t(lookup_static_symbol, lookup_global_symbol): Simplify return.\n+\t* cp-namespace.c (cp_lookup_bare_symbol)\n+\t(cp_search_static_and_baseclasses, cp_lookup_symbol_via_imports)\n+\t(cp_lookup_symbol_via_all_imports, cp_lookup_nested_symbol_1)\n+\t(cp_lookup_nested_symbol): Don't use null_block_symbol.\n+\t(cp_lookup_symbol_via_imports): Simplify initialization.\n+\t(find_symbol_in_baseclass): Likewise.\n+\t* symtab.h (null_block_symbol): Remove.\n+\t* d-namespace.c (d_lookup_symbol): Don't use null_block_symbol.\n+\t(d_lookup_nested_symbol, d_lookup_symbol_imports)\n+\t(d_lookup_symbol_module): Likewise.\n+\t(find_symbol_in_baseclass): Simplify initialization.\n+\n 2019-03-24  Tom Tromey  <tom@tromey.com>\n \n \t* expression.h: Don't include symtab.h."
    },
    {
      "sha": "692d52a955192f04f86f4ce02a30f49a1603c715",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "patch": "@@ -4758,7 +4758,7 @@ standard_lookup (const char *name, const struct block *block,\n                  domain_enum domain)\n {\n   /* Initialize it just to avoid a GCC false warning.  */\n-  struct block_symbol sym = {NULL, NULL};\n+  struct block_symbol sym = {};\n \n   if (lookup_cached_symbol (name, domain, &sym.symbol, NULL))\n     return sym.symbol;\n@@ -5918,7 +5918,7 @@ ada_lookup_symbol_nonlocal (const struct language_defn *langdef,\n \treturn sym;\n     }\n \n-  return (struct block_symbol) {NULL, NULL};\n+  return {};\n }\n \n "
    },
    {
      "sha": "5b352d1d77be8f092719c3926af170947ce313f8",
      "filename": "gdb/cp-namespace.c",
      "status": "modified",
      "additions": 10,
      "deletions": 16,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/cp-namespace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/cp-namespace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-namespace.c?ref=6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "patch": "@@ -217,15 +217,15 @@ cp_lookup_bare_symbol (const struct language_defn *langdef,\n \tlang_this = lookup_language_this (langdef, block);\n \n       if (lang_this.symbol == NULL)\n-\treturn null_block_symbol;\n+\treturn {};\n \n \n       type = check_typedef (TYPE_TARGET_TYPE (SYMBOL_TYPE (lang_this.symbol)));\n       /* If TYPE_NAME is NULL, abandon trying to find this symbol.\n \t This can happen for lambda functions compiled with clang++,\n \t which outputs no name for the container class.  */\n       if (TYPE_NAME (type) == NULL)\n-\treturn null_block_symbol;\n+\treturn {};\n \n       /* Look for symbol NAME in this class.  */\n       sym = cp_lookup_nested_symbol (type, name, block, domain);\n@@ -252,7 +252,7 @@ cp_search_static_and_baseclasses (const char *name,\n {\n   /* Check for malformed input.  */\n   if (prefix_len + 2 > strlen (name) || name[prefix_len + 1] != ':')\n-    return null_block_symbol;\n+    return {};\n \n   /* The class, namespace or function name is everything up to and\n      including PREFIX_LEN.  */\n@@ -272,7 +272,7 @@ cp_search_static_and_baseclasses (const char *name,\n   if (scope_sym.symbol == NULL)\n     scope_sym = lookup_global_symbol (scope.c_str (), block, VAR_DOMAIN);\n   if (scope_sym.symbol == NULL)\n-    return null_block_symbol;\n+    return {};\n \n   struct type *scope_type = SYMBOL_TYPE (scope_sym.symbol);\n \n@@ -379,13 +379,10 @@ cp_lookup_symbol_via_imports (const char *scope,\n \t\t\t      const int search_parents)\n {\n   struct using_direct *current;\n-  struct block_symbol sym;\n+  struct block_symbol sym = {};\n   int len;\n   int directive_match;\n \n-  sym.symbol = NULL;\n-  sym.block = NULL;\n-\n   /* First, try to find the symbol in the given namespace if requested.  */\n   if (search_scope_first)\n     sym = cp_lookup_symbol_in_namespace (scope, name,\n@@ -476,7 +473,7 @@ cp_lookup_symbol_via_imports (const char *scope,\n \t}\n     }\n \n-  return null_block_symbol;\n+  return {};\n }\n \n /* Helper function that searches an array of symbols for one named NAME.  */\n@@ -621,7 +618,7 @@ cp_lookup_symbol_via_all_imports (const char *scope, const char *name,\n       block = BLOCK_SUPERBLOCK (block);\n     }\n \n-  return null_block_symbol;\n+  return {};\n }\n \n /* Searches for NAME in the current namespace, and by applying\n@@ -808,10 +805,7 @@ find_symbol_in_baseclass (struct type *parent_type, const char *name,\n \t\t\t  int is_in_anonymous)\n {\n   int i;\n-  struct block_symbol sym;\n-\n-  sym.symbol = NULL;\n-  sym.block = NULL;\n+  struct block_symbol sym = {};\n \n   for (i = 0; i < TYPE_N_BASECLASSES (parent_type); ++i)\n     {\n@@ -902,7 +896,7 @@ cp_lookup_nested_symbol_1 (struct type *container_type,\n \treturn sym;\n     }\n \n-  return null_block_symbol;\n+  return {};\n }\n \n /* Look up a symbol named NESTED_NAME that is nested inside the C++\n@@ -979,7 +973,7 @@ cp_lookup_nested_symbol (struct type *parent_type,\n \t\t\t      \"cp_lookup_nested_symbol (...) = NULL\"\n \t\t\t      \" (func/method)\\n\");\n \t}\n-      return null_block_symbol;\n+      return {};\n \n     default:\n       internal_error (__FILE__, __LINE__,"
    },
    {
      "sha": "4edef188e9e14bd52de71fc58a91cfe208e2360b",
      "filename": "gdb/d-namespace.c",
      "status": "modified",
      "additions": 6,
      "deletions": 9,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/d-namespace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/d-namespace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-namespace.c?ref=6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "patch": "@@ -127,7 +127,7 @@ d_lookup_symbol (const struct language_defn *langdef,\n \n \t  lang_this = lookup_language_this (language_def (language_d), block);\n \t  if (lang_this.symbol == NULL)\n-\t    return null_block_symbol;\n+\t    return {};\n \n \t  type = check_typedef (TYPE_TARGET_TYPE (SYMBOL_TYPE (lang_this.symbol)));\n \t  classname = TYPE_NAME (type);\n@@ -147,7 +147,7 @@ d_lookup_symbol (const struct language_defn *langdef,\n \t more that can be done.  */\n       class_sym = lookup_global_symbol (classname.c_str (), block, domain);\n       if (class_sym.symbol == NULL)\n-\treturn null_block_symbol;\n+\treturn {};\n \n       /* Look for a symbol named NESTED in this class.  */\n       sym = d_lookup_nested_symbol (SYMBOL_TYPE (class_sym.symbol),\n@@ -246,12 +246,9 @@ static struct block_symbol\n find_symbol_in_baseclass (struct type *parent_type, const char *name,\n \t\t\t  const struct block *block)\n {\n-  struct block_symbol sym;\n+  struct block_symbol sym = {};\n   int i;\n \n-  sym.symbol = NULL;\n-  sym.block = NULL;\n-\n   for (i = 0; i < TYPE_N_BASECLASSES (parent_type); ++i)\n     {\n       struct type *base_type = TYPE_BASECLASS (parent_type, i);\n@@ -349,7 +346,7 @@ d_lookup_nested_symbol (struct type *parent_type,\n \n     case TYPE_CODE_FUNC:\n     case TYPE_CODE_METHOD:\n-      return null_block_symbol;\n+      return {};\n \n     default:\n       gdb_assert_not_reached (\"called with non-aggregate type.\");\n@@ -464,7 +461,7 @@ d_lookup_symbol_imports (const char *scope, const char *name,\n \t}\n     }\n \n-  return null_block_symbol;\n+  return {};\n }\n \n /* Searches for NAME in the current module, and by applying relevant\n@@ -496,7 +493,7 @@ d_lookup_symbol_module (const char *scope, const char *name,\n       block = BLOCK_SUPERBLOCK (block);\n     }\n \n-  return null_block_symbol;\n+  return {};\n }\n \n /* The D-specific version of name lookup for static and global names"
    },
    {
      "sha": "0c6c13d738e64588798ade84cfa81769142b4a5c",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "patch": "@@ -2020,7 +2020,7 @@ rust_lookup_symbol_nonlocal (const struct language_defn *langdef,\n \t\t\t     const struct block *block,\n \t\t\t     const domain_enum domain)\n {\n-  struct block_symbol result = {NULL, NULL};\n+  struct block_symbol result = {};\n \n   if (symbol_lookup_debug)\n     {"
    },
    {
      "sha": "65a5b9afca0258c7b6577a2bdb5e4204cd5678f3",
      "filename": "gdb/solib-darwin.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/solib-darwin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/solib-darwin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-darwin.c?ref=6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "patch": "@@ -653,7 +653,7 @@ darwin_lookup_lib_symbol (struct objfile *objfile,\n \t\t\t  const char *name,\n \t\t\t  const domain_enum domain)\n {\n-  return (struct block_symbol) {NULL, NULL};\n+  return {};\n }\n \n static gdb_bfd_ref_ptr"
    },
    {
      "sha": "0cce0c953a10eb6843278eeca39aa09c43ee2a18",
      "filename": "gdb/solib-spu.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/solib-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/solib-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-spu.c?ref=6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "patch": "@@ -397,7 +397,7 @@ spu_lookup_lib_symbol (struct objfile *objfile,\n \n   if (svr4_so_ops.lookup_lib_global_symbol != NULL)\n     return svr4_so_ops.lookup_lib_global_symbol (objfile, name, domain);\n-  return (struct block_symbol) {NULL, NULL};\n+  return {};\n }\n \n /* Enable shared library breakpoint.  */"
    },
    {
      "sha": "0b8cadb2dc7879303fb54866707ae88ab5616327",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "patch": "@@ -3204,7 +3204,7 @@ elf_lookup_lib_symbol (struct objfile *objfile,\n     }\n \n   if (abfd == NULL || scan_dyntag (DT_SYMBOLIC, abfd, NULL, NULL) != 1)\n-    return (struct block_symbol) {NULL, NULL};\n+    return {};\n \n   return lookup_global_symbol_from_objfile (objfile, name, domain);\n }"
    },
    {
      "sha": "8cef5a042b40554dad2b6fcff0f9c5b18ba95349",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "patch": "@@ -1457,7 +1457,7 @@ solib_global_lookup (struct objfile *objfile,\n \n   if (ops->lookup_lib_global_symbol != NULL)\n     return ops->lookup_lib_global_symbol (objfile, name, domain);\n-  return (struct block_symbol) {NULL, NULL};\n+  return {};\n }\n \n /* Lookup the value for a specific symbol from dynamic symbol table.  Look"
    },
    {
      "sha": "d25f560f084a23089154605e3631ce1a0d7aac66",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 16,
      "deletions": 19,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "patch": "@@ -95,9 +95,6 @@ static struct block_symbol\n   lookup_symbol_in_objfile (struct objfile *objfile, int block_index,\n \t\t\t    const char *name, const domain_enum domain);\n \n-/* See symtab.h.  */\n-const struct block_symbol null_block_symbol = { NULL, NULL };\n-\n /* Program space key for finding name and language of \"main\".  */\n \n static const struct program_space_data *main_progspace_key;\n@@ -1339,7 +1336,7 @@ symbol_cache_lookup (struct symbol_cache *cache,\n     {\n       *bsc_ptr = NULL;\n       *slot_ptr = NULL;\n-      return (struct block_symbol) {NULL, NULL};\n+      return {};\n     }\n \n   hash = hash_symbol_entry (objfile_context, name, domain);\n@@ -1373,7 +1370,7 @@ symbol_cache_lookup (struct symbol_cache *cache,\n \t\t\t  name, domain_name (domain));\n     }\n   ++bsc->misses;\n-  return (struct block_symbol) {NULL, NULL};\n+  return {};\n }\n \n /* Clear out SLOT.  */\n@@ -1938,7 +1935,7 @@ lookup_language_this (const struct language_defn *lang,\n \t\t      const struct block *block)\n {\n   if (lang->la_name_of_this == NULL || block == NULL)\n-    return (struct block_symbol) {NULL, NULL};\n+    return {};\n \n   if (symbol_lookup_debug > 1)\n     {\n@@ -1975,7 +1972,7 @@ lookup_language_this (const struct language_defn *lang,\n \n   if (symbol_lookup_debug > 1)\n     fprintf_unfiltered (gdb_stdlog, \" = NULL\\n\");\n-  return (struct block_symbol) {NULL, NULL};\n+  return {};\n }\n \n /* Given TYPE, a structure/union,\n@@ -2102,7 +2099,7 @@ lookup_symbol_aux (const char *name, symbol_name_match_type match_type,\n \t\t  fprintf_unfiltered (gdb_stdlog,\n \t\t\t\t      \"lookup_symbol_aux (...) = NULL\\n\");\n \t\t}\n-\t      return (struct block_symbol) {NULL, NULL};\n+\t      return {};\n \t    }\n \t}\n     }\n@@ -2152,7 +2149,7 @@ lookup_local_symbol (const char *name,\n   /* Check if either no block is specified or it's a global block.  */\n \n   if (static_block == NULL)\n-    return (struct block_symbol) {NULL, NULL};\n+    return {};\n \n   while (block != static_block)\n     {\n@@ -2177,7 +2174,7 @@ lookup_local_symbol (const char *name,\n \n   /* We've reached the end of the function without finding a result.  */\n \n-  return (struct block_symbol) {NULL, NULL};\n+  return {};\n }\n \n /* See symtab.h.  */\n@@ -2262,7 +2259,7 @@ lookup_global_symbol_from_objfile (struct objfile *main_objfile,\n \treturn result;\n     }\n \n-  return (struct block_symbol) {NULL, NULL};\n+  return {};\n }\n \n /* Check to see if the symbol is defined in one of the OBJFILE's\n@@ -2312,7 +2309,7 @@ lookup_symbol_in_objfile_symtabs (struct objfile *objfile, int block_index,\n \n   if (symbol_lookup_debug > 1)\n     fprintf_unfiltered (gdb_stdlog, \" = NULL\\n\");\n-  return (struct block_symbol) {NULL, NULL};\n+  return {};\n }\n \n /* Wrapper around lookup_symbol_in_objfile_symtabs for search_symbols.\n@@ -2355,7 +2352,7 @@ lookup_symbol_in_objfile_from_linkage_name (struct objfile *objfile,\n \treturn result;\n     }\n \n-  return (struct block_symbol) {NULL, NULL};\n+  return {};\n }\n \n /* A helper function that throws an exception when a symbol was found\n@@ -2388,7 +2385,7 @@ lookup_symbol_via_quick_fns (struct objfile *objfile, int block_index,\n   struct block_symbol result;\n \n   if (!objfile->sf)\n-    return (struct block_symbol) {NULL, NULL};\n+    return {};\n \n   if (symbol_lookup_debug > 1)\n     {\n@@ -2408,7 +2405,7 @@ lookup_symbol_via_quick_fns (struct objfile *objfile, int block_index,\n \t  fprintf_unfiltered (gdb_stdlog,\n \t\t\t      \"lookup_symbol_via_quick_fns (...) = NULL\\n\");\n \t}\n-      return (struct block_symbol) {NULL, NULL};\n+      return {};\n     }\n \n   bv = COMPUNIT_BLOCKVECTOR (cust);\n@@ -2512,7 +2509,7 @@ lookup_symbol_in_static_block (const char *name,\n   struct symbol *sym;\n \n   if (static_block == NULL)\n-    return (struct block_symbol) {NULL, NULL};\n+    return {};\n \n   if (symbol_lookup_debug)\n     {\n@@ -2605,7 +2602,7 @@ lookup_static_symbol (const char *name, const domain_enum domain)\n   if (result.symbol != NULL)\n     {\n       if (SYMBOL_LOOKUP_FAILED_P (result))\n-\treturn (struct block_symbol) {NULL, NULL};\n+\treturn {};\n       return result;\n     }\n \n@@ -2623,7 +2620,7 @@ lookup_static_symbol (const char *name, const domain_enum domain)\n \n   /* Still pass NULL for OBJFILE_CONTEXT here.  */\n   symbol_cache_mark_not_found (bsc, slot, NULL, name, domain);\n-  return (struct block_symbol) {NULL, NULL};\n+  return {};\n }\n \n /* Private data to be used with lookup_symbol_global_iterator_cb.  */\n@@ -2687,7 +2684,7 @@ lookup_global_symbol (const char *name,\n   if (result.symbol != NULL)\n     {\n       if (SYMBOL_LOOKUP_FAILED_P (result))\n-\treturn (struct block_symbol) {NULL, NULL};\n+\treturn {};\n       return result;\n     }\n "
    },
    {
      "sha": "e4ee7271a15f9d333fe584acd47fd2f9964aa64f",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6640a367bf5427779856e7c80ae4b4bd88c19d3c/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "patch": "@@ -1159,10 +1159,6 @@ struct block_symbol\n \n extern const struct symbol_impl *symbol_impls;\n \n-/* For convenience.  All fields are NULL.  This means \"there is no\n-   symbol\".  */\n-extern const struct block_symbol null_block_symbol;\n-\n /* Note: There is no accessor macro for symbol.owner because it is\n    \"private\".  */\n "
    }
  ]
}