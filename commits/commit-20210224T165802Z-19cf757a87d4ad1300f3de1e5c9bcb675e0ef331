{
  "sha": "19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTljZjc1N2E4N2Q0YWQxMzAwZjNkZTFlNWM5YmNiNjc1ZTBlZjMzMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-12T11:39:23Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-24T16:58:02Z"
    },
    "message": "gdb: spread a little 'const' through the target_section_table code\n\nThe code to access the target section table can be made more const, so\nlets do that.  There should be no user visible changes after this\ncommit.\n\ngdb/ChangeLog:\n\n\t* gdb/bfd-target.c (class target_bfd) <get_section_table>: Make\n\treturn type const.\n\t* gdb/exec.c (struct exec_target) <get_section_table>: Likewise.\n\t(section_table_read_available_memory): Make local const.\n\t(exec_target::xfer_partial): Make local const.\n\t(print_section_info): Make parameter const.\n\t* gdb/exec.h (print_section_info): Likewise.\n\t* gdb/ppc64-tdep.c (ppc64_convert_from_func_ptr_addr): Make local\n\tconst.\n\t* gdb/record-btrace.c (record_btrace_target::xfer_partial):\n\tLikewise.\n\t* gdb/remote.c (remote_target::remote_xfer_live_readonly_partial):\n\tLikewise.\n\t* gdb/s390-tdep.c (s390_load): Likewise.\n\t* gdb/solib-dsbt.c (scan_dyntag): Likewise.\n\t* gdb/solib-svr4.c (scan_dyntag): Likewise.\n\t* gdb/target-debug.h (target_debug_print_target_section_table_p):\n\tRename to...\n\t(target_debug_print_const_target_section_table_p): ...this.\n\t* gdb/target-delegates.c: Regenerate.\n\t* gdb/target.c (target_get_section_table): Make return type const.\n\t(target_section_by_addr): Likewise.  Also make some locals const.\n\t(memory_xfer_partial_1): Make some locals const.\n\t* gdb/target.h (struct target_ops) <get_section_table>: Make\n\treturn type const.\n\t(target_section_by_addr): Likewise.\n\t(target_get_section_table): Likewise.",
    "tree": {
      "sha": "e6a5813dee072ee9e1ad696ef125895f66b87419",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e6a5813dee072ee9e1ad696ef125895f66b87419"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "02a79309925c71591d825f8fc4e2b79ce0faa45b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02a79309925c71591d825f8fc4e2b79ce0faa45b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/02a79309925c71591d825f8fc4e2b79ce0faa45b"
    }
  ],
  "stats": {
    "total": 107,
    "additions": 69,
    "deletions": 38
  },
  "files": [
    {
      "sha": "e59343bc819807559cf940fc8fc5341e040bf89f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -1,3 +1,33 @@\n+2021-02-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb/bfd-target.c (class target_bfd) <get_section_table>: Make\n+\treturn type const.\n+\t* gdb/exec.c (struct exec_target) <get_section_table>: Likewise.\n+\t(section_table_read_available_memory): Make local const.\n+\t(exec_target::xfer_partial): Make local const.\n+\t(print_section_info): Make parameter const.\n+\t* gdb/exec.h (print_section_info): Likewise.\n+\t* gdb/ppc64-tdep.c (ppc64_convert_from_func_ptr_addr): Make local\n+\tconst.\n+\t* gdb/record-btrace.c (record_btrace_target::xfer_partial):\n+\tLikewise.\n+\t* gdb/remote.c (remote_target::remote_xfer_live_readonly_partial):\n+\tLikewise.\n+\t* gdb/s390-tdep.c (s390_load): Likewise.\n+\t* gdb/solib-dsbt.c (scan_dyntag): Likewise.\n+\t* gdb/solib-svr4.c (scan_dyntag): Likewise.\n+\t* gdb/target-debug.h (target_debug_print_target_section_table_p):\n+\tRename to...\n+\t(target_debug_print_const_target_section_table_p): ...this.\n+\t* gdb/target-delegates.c: Regenerate.\n+\t* gdb/target.c (target_get_section_table): Make return type const.\n+\t(target_section_by_addr): Likewise.  Also make some locals const.\n+\t(memory_xfer_partial_1): Make some locals const.\n+\t* gdb/target.h (struct target_ops) <get_section_table>: Make\n+\treturn type const.\n+\t(target_section_by_addr): Likewise.\n+\t(target_get_section_table): Likewise.\n+\n 2021-02-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* NEWS: Mention new 'maint info target-sections' command."
    },
    {
      "sha": "b23cf2cd5ccb63c303db1c43d60903bcdc88c1a4",
      "filename": "gdb/bfd-target.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/bfd-target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/bfd-target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bfd-target.c?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -50,7 +50,7 @@ class target_bfd : public target_ops\n \t\t  ULONGEST offset, ULONGEST len,\n \t\t  ULONGEST *xfered_len) override;\n \n-  target_section_table *get_section_table () override;\n+  const target_section_table *get_section_table () override;\n \n private:\n   /* The BFD we're wrapping.  */\n@@ -82,7 +82,7 @@ target_bfd::xfer_partial (target_object object,\n     }\n }\n \n-target_section_table *\n+const target_section_table *\n target_bfd::get_section_table ()\n {\n   return &m_table;"
    },
    {
      "sha": "1cac5fb5d3d6395f05995b09a99ce1824646f373",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -75,7 +75,7 @@ struct exec_target final : public target_ops\n \t\t\t\t\tconst gdb_byte *writebuf,\n \t\t\t\t\tULONGEST offset, ULONGEST len,\n \t\t\t\t\tULONGEST *xfered_len) override;\n-  target_section_table *get_section_table () override;\n+  const target_section_table *get_section_table () override;\n   void files_info () override;\n \n   bool has_memory () override;\n@@ -775,7 +775,7 @@ enum target_xfer_status\n section_table_read_available_memory (gdb_byte *readbuf, ULONGEST offset,\n \t\t\t\t     ULONGEST len, ULONGEST *xfered_len)\n {\n-  target_section_table *table = target_get_section_table (&exec_ops);\n+  const target_section_table *table = target_get_section_table (&exec_ops);\n   std::vector<mem_range> available_memory\n     = section_table_available_memory (offset, len, *table);\n \n@@ -884,7 +884,7 @@ section_table_xfer_memory_partial (gdb_byte *readbuf, const gdb_byte *writebuf,\n   return TARGET_XFER_EOF;\t\t/* We can't help.  */\n }\n \n-target_section_table *\n+const target_section_table *\n exec_target::get_section_table ()\n {\n   return &current_program_space->target_sections;\n@@ -896,7 +896,7 @@ exec_target::xfer_partial (enum target_object object,\n \t\t\t   const gdb_byte *writebuf,\n \t\t\t   ULONGEST offset, ULONGEST len, ULONGEST *xfered_len)\n {\n-  target_section_table *table = get_section_table ();\n+  const target_section_table *table = target_get_section_table (this);\n \n   if (object == TARGET_OBJECT_MEMORY)\n     return section_table_xfer_memory_partial (readbuf, writebuf,\n@@ -908,7 +908,7 @@ exec_target::xfer_partial (enum target_object object,\n \f\n \n void\n-print_section_info (target_section_table *t, bfd *abfd)\n+print_section_info (const target_section_table *t, bfd *abfd)\n {\n   struct gdbarch *gdbarch = gdbarch_from_bfd (abfd);\n   /* FIXME: 16 is not wide enough when gdbarch_addr_bit > 64.  */"
    },
    {
      "sha": "1119953dc8fb79ac01a448065b5ff8cc9291fb47",
      "filename": "gdb/exec.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/exec.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/exec.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.h?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -96,7 +96,7 @@ extern void exec_set_section_address (const char *, int, CORE_ADDR);\n    special cased --- it's filename is omitted; if it is the executable\n    file, its entry point is printed.  */\n \n-extern void print_section_info (target_section_table *table,\n+extern void print_section_info (const target_section_table *table,\n \t\t\t\tbfd *abfd);\n \n /* Helper function that attempts to open the symbol file at EXEC_FILE_HOST."
    },
    {
      "sha": "74873a6999e71b0516029fcfc0964b4d6825e2d7",
      "filename": "gdb/ppc64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/ppc64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/ppc64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc64-tdep.c?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -561,7 +561,7 @@ ppc64_convert_from_func_ptr_addr (struct gdbarch *gdbarch,\n \t\t\t\t\tstruct target_ops *targ)\n {\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n-  struct target_section *s = target_section_by_addr (targ, addr);\n+  const struct target_section *s = target_section_by_addr (targ, addr);\n \n   /* Check if ADDR points to a function descriptor.  */\n   if (s && strcmp (s->the_bfd_section->name, \".opd\") == 0)"
    },
    {
      "sha": "d9cc7a3b6d89dd14bf4da75ec3d20bb711b6c92a",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -1439,7 +1439,7 @@ record_btrace_target::xfer_partial (enum target_object object,\n \t{\n \tcase TARGET_OBJECT_MEMORY:\n \t  {\n-\t    struct target_section *section;\n+\t    const struct target_section *section;\n \n \t    /* We do not allow writing memory in general.  */\n \t    if (writebuf != NULL)"
    },
    {
      "sha": "2c85bdcffbc58db4fcc78cf131f274f655e16225",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -9044,16 +9044,16 @@ remote_target::remote_xfer_live_readonly_partial (gdb_byte *readbuf,\n \t\t\t\t\t\t  int unit_size,\n \t\t\t\t\t\t  ULONGEST *xfered_len)\n {\n-  struct target_section *secp;\n+  const struct target_section *secp;\n \n   secp = target_section_by_addr (this, memaddr);\n   if (secp != NULL\n       && (bfd_section_flags (secp->the_bfd_section) & SEC_READONLY))\n     {\n       ULONGEST memend = memaddr + len;\n \n-      target_section_table *table = target_get_section_table (this);\n-      for (target_section &p : *table)\n+      const target_section_table *table = target_get_section_table (this);\n+      for (const target_section &p : *table)\n \t{\n \t  if (memaddr >= p.addr)\n \t    {"
    },
    {
      "sha": "39c8ee0450ac0088012f3c5078aae4e55c3478a7",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -684,8 +684,8 @@ s390_load (struct s390_prologue_data *data,\n      we're analyzing the code to unwind past that frame.  */\n   if (pv_is_constant (addr))\n     {\n-      struct target_section *secp;\n-      secp = target_section_by_addr (current_top_target (), addr.k);\n+      const struct target_section *secp\n+\t= target_section_by_addr (current_top_target (), addr.k);\n       if (secp != NULL\n \t  && (bfd_section_flags (secp->the_bfd_section) & SEC_READONLY))\n \treturn pv_constant (read_memory_integer (addr.k, size,"
    },
    {
      "sha": "6d2180603433d0b4b72e6fc84b1ba2b1269b12f9",
      "filename": "gdb/solib-dsbt.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/solib-dsbt.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/solib-dsbt.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-dsbt.c?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -424,7 +424,8 @@ scan_dyntag (int dyntag, bfd *abfd, CORE_ADDR *ptr)\n     return 0;\n \n   bool found = false;\n-  for (target_section &target_section : current_program_space->target_sections)\n+  for (const target_section &target_section\n+\t : current_program_space->target_sections)\n     if (sect == target_section.the_bfd_section)\n       {\n \tdyn_addr = target_section.addr;"
    },
    {
      "sha": "f8dd4194e701e2260f1880ea23d25c5557fe12d8",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -610,7 +610,8 @@ scan_dyntag (const int desired_dyntag, bfd *abfd, CORE_ADDR *ptr,\n     return 0;\n \n   bool found = false;\n-  for (target_section &target_section : current_program_space->target_sections)\n+  for (const target_section &target_section\n+\t : current_program_space->target_sections)\n     if (sect == target_section.the_bfd_section)\n       {\n \tdyn_addr = target_section.addr;"
    },
    {
      "sha": "1cc825620954b8f5dee4c59dea715c229845236c",
      "filename": "gdb/target-debug.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/target-debug.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/target-debug.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-debug.h?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -104,7 +104,7 @@\n   target_debug_do_print (host_address_to_string (X))\n #define target_debug_print_struct_ui_file_p(X)\t\\\n   target_debug_do_print (host_address_to_string (X))\n-#define target_debug_print_target_section_table_p(X)\t\\\n+#define target_debug_print_const_target_section_table_p(X)\t\\\n   target_debug_do_print (host_address_to_string (X))\n #define target_debug_print_void_p(X) \\\n   target_debug_do_print (host_address_to_string (X))"
    },
    {
      "sha": "69fbc0f3b23c6bd08ac7e7ef1634e61def34f73e",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -77,7 +77,7 @@ struct dummy_target : public target_ops\n   void rcmd (const char *arg0, struct ui_file *arg1) override;\n   char *pid_to_exec_file (int arg0) override;\n   void log_command (const char *arg0) override;\n-  target_section_table *get_section_table () override;\n+  const target_section_table *get_section_table () override;\n   thread_control_capabilities get_thread_control_capabilities () override;\n   bool attach_no_wait () override;\n   bool can_async_p () override;\n@@ -248,7 +248,7 @@ struct debug_target : public target_ops\n   void rcmd (const char *arg0, struct ui_file *arg1) override;\n   char *pid_to_exec_file (int arg0) override;\n   void log_command (const char *arg0) override;\n-  target_section_table *get_section_table () override;\n+  const target_section_table *get_section_table () override;\n   thread_control_capabilities get_thread_control_capabilities () override;\n   bool attach_no_wait () override;\n   bool can_async_p () override;\n@@ -2021,27 +2021,27 @@ debug_target::log_command (const char *arg0)\n   fputs_unfiltered (\")\\n\", gdb_stdlog);\n }\n \n-target_section_table *\n+const target_section_table *\n target_ops::get_section_table ()\n {\n   return this->beneath ()->get_section_table ();\n }\n \n-target_section_table *\n+const target_section_table *\n dummy_target::get_section_table ()\n {\n   return NULL;\n }\n \n-target_section_table *\n+const target_section_table *\n debug_target::get_section_table ()\n {\n-  target_section_table * result;\n+  const target_section_table * result;\n   fprintf_unfiltered (gdb_stdlog, \"-> %s->get_section_table (...)\\n\", this->beneath ()->shortname ());\n   result = this->beneath ()->get_section_table ();\n   fprintf_unfiltered (gdb_stdlog, \"<- %s->get_section_table (\", this->beneath ()->shortname ());\n   fputs_unfiltered (\") = \", gdb_stdlog);\n-  target_debug_print_target_section_table_p (result);\n+  target_debug_print_const_target_section_table_p (result);\n   fputs_unfiltered (\"\\n\", gdb_stdlog);\n   return result;\n }"
    },
    {
      "sha": "78535b89e581c7dc6eb3945f39ae922bab7b4e11",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -812,23 +812,23 @@ target_read_string (CORE_ADDR memaddr, int len, int *bytes_read)\n   return gdb::unique_xmalloc_ptr<char> ((char *) buffer.release ());\n }\n \n-target_section_table *\n+const target_section_table *\n target_get_section_table (struct target_ops *target)\n {\n   return target->get_section_table ();\n }\n \n /* Find a section containing ADDR.  */\n \n-struct target_section *\n+const struct target_section *\n target_section_by_addr (struct target_ops *target, CORE_ADDR addr)\n {\n-  target_section_table *table = target_get_section_table (target);\n+  const target_section_table *table = target_get_section_table (target);\n \n   if (table == NULL)\n     return NULL;\n \n-  for (target_section &secp : *table)\n+  for (const target_section &secp : *table)\n     {\n       if (addr >= secp.addr && addr < secp.endaddr)\n \treturn &secp;\n@@ -965,7 +965,7 @@ memory_xfer_partial_1 (struct target_ops *ops, enum target_object object,\n \n       if (pc_in_unmapped_range (memaddr, section))\n \t{\n-\t  target_section_table *table = target_get_section_table (ops);\n+\t  const target_section_table *table = target_get_section_table (ops);\n \t  const char *section_name = section->the_bfd_section->name;\n \n \t  memaddr = overlay_mapped_address (memaddr, section);\n@@ -984,13 +984,12 @@ memory_xfer_partial_1 (struct target_ops *ops, enum target_object object,\n   /* Try the executable files, if \"trust-readonly-sections\" is set.  */\n   if (readbuf != NULL && trust_readonly)\n     {\n-      struct target_section *secp;\n-\n-      secp = target_section_by_addr (ops, memaddr);\n+      const struct target_section *secp\n+\t= target_section_by_addr (ops, memaddr);\n       if (secp != NULL\n \t  && (bfd_section_flags (secp->the_bfd_section) & SEC_READONLY))\n \t{\n-\t  target_section_table *table = target_get_section_table (ops);\n+\t  const target_section_table *table = target_get_section_table (ops);\n \t  return section_table_xfer_memory_partial (readbuf, writebuf,\n \t\t\t\t\t\t    memaddr, len, xfered_len,\n \t\t\t\t\t\t    *table);"
    },
    {
      "sha": "66d46e2facbc68acb83a88bec95a657e74fa1a43",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "patch": "@@ -687,7 +687,7 @@ struct target_ops\n       TARGET_DEFAULT_RETURN (NULL);\n     virtual void log_command (const char *)\n       TARGET_DEFAULT_IGNORE ();\n-    virtual target_section_table *get_section_table ()\n+    virtual const target_section_table *get_section_table ()\n       TARGET_DEFAULT_RETURN (NULL);\n \n     /* Provide default values for all \"must have\" methods.  */\n@@ -2427,13 +2427,13 @@ extern CORE_ADDR target_translate_tls_address (struct objfile *objfile,\n \t\t\t\t\t       CORE_ADDR offset);\n \n /* Return the \"section\" containing the specified address.  */\n-struct target_section *target_section_by_addr (struct target_ops *target,\n-\t\t\t\t\t       CORE_ADDR addr);\n+const struct target_section *target_section_by_addr (struct target_ops *target,\n+\t\t\t\t\t\t     CORE_ADDR addr);\n \n /* Return the target section table this target (or the targets\n    beneath) currently manipulate.  */\n \n-extern target_section_table *target_get_section_table\n+extern const target_section_table *target_get_section_table\n   (struct target_ops *target);\n \n /* From mem-break.c */"
    }
  ]
}