{
  "sha": "092324387247f92c66f25a3e1927cf8821bb4943",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDkyMzI0Mzg3MjQ3ZjkyYzY2ZjI1YTNlMTkyN2NmODgyMWJiNDk0Mw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-01T03:58:50Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-08T22:01:50Z"
    },
    "message": "Convert solib-svr4.c to type-safe registry API\n\nThis changes solib-svr4y.c to use the type-safe registry API.\n\ngdb/ChangeLog\n2019-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* solib-svr4.c (struct svr4_info): Add initializers and\n\tdestructor.\n\t<probes_table>: Now an htab_up.\n\t(solib_svr4_pspace_data): Change type.\n\t(free_probes_table): Simplify.\n\t(~svr4_info): Rename from svr4_pspace_data_cleanup.\n\t(get_svr4_info, probes_table_htab_remove_objfile_probes)\n\t(probes_table_remove_objfile_probes, register_solib_event_probe)\n\t(solib_event_probe_at, svr4_update_solib_event_breakpoint)\n\t(_initialize_svr4_solib): Update.",
    "tree": {
      "sha": "800e218886f19f9c389d580997926977a492592b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/800e218886f19f9c389d580997926977a492592b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/092324387247f92c66f25a3e1927cf8821bb4943",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/092324387247f92c66f25a3e1927cf8821bb4943",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/092324387247f92c66f25a3e1927cf8821bb4943",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/092324387247f92c66f25a3e1927cf8821bb4943/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7b4a314f8b9b50c2289ca6b5d21513052c48730b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b4a314f8b9b50c2289ca6b5d21513052c48730b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7b4a314f8b9b50c2289ca6b5d21513052c48730b"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 45,
    "deletions": 44
  },
  "files": [
    {
      "sha": "49bc5b742f17ca748d02b55b4c9bd3575140a114",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/092324387247f92c66f25a3e1927cf8821bb4943/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/092324387247f92c66f25a3e1927cf8821bb4943/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=092324387247f92c66f25a3e1927cf8821bb4943",
      "patch": "@@ -1,3 +1,16 @@\n+2019-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* solib-svr4.c (struct svr4_info): Add initializers and\n+\tdestructor.\n+\t<probes_table>: Now an htab_up.\n+\t(solib_svr4_pspace_data): Change type.\n+\t(free_probes_table): Simplify.\n+\t(~svr4_info): Rename from svr4_pspace_data_cleanup.\n+\t(get_svr4_info, probes_table_htab_remove_objfile_probes)\n+\t(probes_table_remove_objfile_probes, register_solib_event_probe)\n+\t(solib_event_probe_at, svr4_update_solib_event_breakpoint)\n+\t(_initialize_svr4_solib): Update.\n+\n 2019-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* remote.c (remote_pspace_data): Change type."
    },
    {
      "sha": "2828c96c68355931332c1704035e9a0d8f691fad",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 32,
      "deletions": 44,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/092324387247f92c66f25a3e1927cf8821bb4943/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/092324387247f92c66f25a3e1927cf8821bb4943/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=092324387247f92c66f25a3e1927cf8821bb4943",
      "patch": "@@ -322,53 +322,53 @@ lm_addr_check (const struct so_list *so, bfd *abfd)\n \n struct svr4_info\n {\n-  CORE_ADDR debug_base;\t/* Base of dynamic linker structures.  */\n+  svr4_info () = default;\n+  ~svr4_info ();\n+\n+  /* Base of dynamic linker structures.  */\n+  CORE_ADDR debug_base = 0;\n \n   /* Validity flag for debug_loader_offset.  */\n-  int debug_loader_offset_p;\n+  int debug_loader_offset_p = 0;\n \n   /* Load address for the dynamic linker, inferred.  */\n-  CORE_ADDR debug_loader_offset;\n+  CORE_ADDR debug_loader_offset = 0;\n \n   /* Name of the dynamic linker, valid if debug_loader_offset_p.  */\n-  char *debug_loader_name;\n+  char *debug_loader_name = nullptr;\n \n   /* Load map address for the main executable.  */\n-  CORE_ADDR main_lm_addr;\n+  CORE_ADDR main_lm_addr = 0;\n \n-  CORE_ADDR interp_text_sect_low;\n-  CORE_ADDR interp_text_sect_high;\n-  CORE_ADDR interp_plt_sect_low;\n-  CORE_ADDR interp_plt_sect_high;\n+  CORE_ADDR interp_text_sect_low = 0;\n+  CORE_ADDR interp_text_sect_high = 0;\n+  CORE_ADDR interp_plt_sect_low = 0;\n+  CORE_ADDR interp_plt_sect_high = 0;\n \n   /* Nonzero if the list of objects was last obtained from the target\n      via qXfer:libraries-svr4:read.  */\n-  int using_xfer;\n+  int using_xfer = 0;\n \n   /* Table of struct probe_and_action instances, used by the\n      probes-based interface to map breakpoint addresses to probes\n      and their associated actions.  Lookup is performed using\n      probe_and_action->prob->address.  */\n-  htab_t probes_table;\n+  htab_up probes_table;\n \n   /* List of objects loaded into the inferior, used by the probes-\n      based interface.  */\n-  struct so_list *solib_list;\n+  struct so_list *solib_list = nullptr;\n };\n \n /* Per-program-space data key.  */\n-static const struct program_space_data *solib_svr4_pspace_data;\n+static const struct program_space_key<svr4_info> solib_svr4_pspace_data;\n \n /* Free the probes table.  */\n \n static void\n free_probes_table (struct svr4_info *info)\n {\n-  if (info->probes_table == NULL)\n-    return;\n-\n-  htab_delete (info->probes_table);\n-  info->probes_table = NULL;\n+  info->probes_table.reset (nullptr);\n }\n \n /* Free the solib list.  */\n@@ -380,15 +380,9 @@ free_solib_list (struct svr4_info *info)\n   info->solib_list = NULL;\n }\n \n-static void\n-svr4_pspace_data_cleanup (struct program_space *pspace, void *arg)\n+svr4_info::~svr4_info ()\n {\n-  struct svr4_info *info = (struct svr4_info *) arg;\n-\n-  free_probes_table (info);\n-  free_solib_list (info);\n-\n-  xfree (info);\n+  free_solib_list (this);\n }\n \n /* Get the svr4 data for program space PSPACE.  If none is found yet, add it now.\n@@ -397,15 +391,11 @@ svr4_pspace_data_cleanup (struct program_space *pspace, void *arg)\n static struct svr4_info *\n get_svr4_info (program_space *pspace)\n {\n-  struct svr4_info *info;\n+  struct svr4_info *info = solib_svr4_pspace_data.get (pspace);\n \n-  info = (struct svr4_info *) program_space_data (pspace,\n-\t\t\t\t\t\t  solib_svr4_pspace_data);\n-  if (info != NULL)\n-    return info;\n+  if (info == NULL)\n+    info = solib_svr4_pspace_data.emplace (pspace);\n \n-  info = XCNEW (struct svr4_info);\n-  set_program_space_data (pspace, solib_svr4_pspace_data, info);\n   return info;\n }\n \n@@ -1677,7 +1667,8 @@ probes_table_htab_remove_objfile_probes (void **slot, void *info)\n   struct objfile *objfile = (struct objfile *) info;\n \n   if (pa->objfile == objfile)\n-    htab_clear_slot (get_svr4_info (objfile->pspace)->probes_table, slot);\n+    htab_clear_slot (get_svr4_info (objfile->pspace)->probes_table.get (),\n+\t\t     slot);\n \n   return 1;\n }\n@@ -1689,7 +1680,7 @@ probes_table_remove_objfile_probes (struct objfile *objfile)\n {\n   svr4_info *info = get_svr4_info (objfile->pspace);\n   if (info->probes_table != nullptr)\n-    htab_traverse_noresize (info->probes_table,\n+    htab_traverse_noresize (info->probes_table.get (),\n \t\t\t    probes_table_htab_remove_objfile_probes, objfile);\n }\n \n@@ -1706,12 +1697,12 @@ register_solib_event_probe (svr4_info *info, struct objfile *objfile,\n \n   /* Create the probes table, if necessary.  */\n   if (info->probes_table == NULL)\n-    info->probes_table = htab_create_alloc (1, hash_probe_and_action,\n-\t\t\t\t\t    equal_probe_and_action,\n-\t\t\t\t\t    xfree, xcalloc, xfree);\n+    info->probes_table.reset (htab_create_alloc (1, hash_probe_and_action,\n+\t\t\t\t\t\t equal_probe_and_action,\n+\t\t\t\t\t\t xfree, xcalloc, xfree));\n \n   lookup.address = address;\n-  slot = htab_find_slot (info->probes_table, &lookup, INSERT);\n+  slot = htab_find_slot (info->probes_table.get (), &lookup, INSERT);\n   gdb_assert (*slot == HTAB_EMPTY_ENTRY);\n \n   pa = XCNEW (struct probe_and_action);\n@@ -1734,7 +1725,7 @@ solib_event_probe_at (struct svr4_info *info, CORE_ADDR address)\n   void **slot;\n \n   lookup.address = address;\n-  slot = htab_find_slot (info->probes_table, &lookup, NO_INSERT);\n+  slot = htab_find_slot (info->probes_table.get (), &lookup, NO_INSERT);\n \n   if (slot == NULL)\n     return NULL;\n@@ -2012,8 +2003,7 @@ svr4_update_solib_event_breakpoint (struct breakpoint *b, void *arg)\n       struct svr4_info *info;\n       struct probe_and_action *pa;\n \n-      info = ((struct svr4_info *)\n-\t      program_space_data (loc->pspace, solib_svr4_pspace_data));\n+      info = solib_svr4_pspace_data.get (loc->pspace);\n       if (info == NULL || info->probes_table == NULL)\n \tcontinue;\n \n@@ -3243,8 +3233,6 @@ void\n _initialize_svr4_solib (void)\n {\n   solib_svr4_data = gdbarch_data_register_pre_init (solib_svr4_init);\n-  solib_svr4_pspace_data\n-    = register_program_space_data_with_cleanup (NULL, svr4_pspace_data_cleanup);\n \n   svr4_so_ops.relocate_section_addresses = svr4_relocate_section_addresses;\n   svr4_so_ops.free_so = svr4_free_so;"
    }
  ]
}