{
  "sha": "88f07206fa577f80e8f6cfed7b2183dc3b4e9f39",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODhmMDcyMDZmYTU3N2Y4MGU4ZjZjZmVkN2IyMTgzZGMzYjRlOWYzOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-17T17:47:50Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-17T17:58:56Z"
    },
    "message": "Use htab_up in auto-load.c\n\nThis changes auto-load.c to use htab_up, rather than manually calling\nhtab_delete.\n\ngdb/ChangeLog\n2020-09-17  Tom Tromey  <tom@tromey.com>\n\n\t* auto-load.c (struct auto_load_pspace_info)\n\t<~auto_load_pspace_info, auto_load_pspace_info>: Remove.\n\t<loaded_script_files, loaded_script_texts>: Change type to\n\thtab_up.\n\t(~auto_load_pspace_info) Remove.\n\t(init_loaded_scripts_info, maybe_add_script_file)\n\t(maybe_add_script_text, auto_load_info_scripts): Update.",
    "tree": {
      "sha": "c4c0fbb8469ed704a3fd82f2c22e498a5abec888",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c4c0fbb8469ed704a3fd82f2c22e498a5abec888"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/88f07206fa577f80e8f6cfed7b2183dc3b4e9f39",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/88f07206fa577f80e8f6cfed7b2183dc3b4e9f39",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/88f07206fa577f80e8f6cfed7b2183dc3b4e9f39",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/88f07206fa577f80e8f6cfed7b2183dc3b4e9f39/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9519b2eea05637faa380a68fd679a950176de6db",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9519b2eea05637faa380a68fd679a950176de6db",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9519b2eea05637faa380a68fd679a950176de6db"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 26,
    "deletions": 25
  },
  "files": [
    {
      "sha": "e9b7b7d596087b2406152fc4f2dabb2083d8da97",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88f07206fa577f80e8f6cfed7b2183dc3b4e9f39/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88f07206fa577f80e8f6cfed7b2183dc3b4e9f39/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=88f07206fa577f80e8f6cfed7b2183dc3b4e9f39",
      "patch": "@@ -1,3 +1,13 @@\n+2020-09-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* auto-load.c (struct auto_load_pspace_info)\n+\t<~auto_load_pspace_info, auto_load_pspace_info>: Remove.\n+\t<loaded_script_files, loaded_script_texts>: Change type to\n+\thtab_up.\n+\t(~auto_load_pspace_info) Remove.\n+\t(init_loaded_scripts_info, maybe_add_script_file)\n+\t(maybe_add_script_text, auto_load_info_scripts): Update.\n+\n 2020-09-17  Tom Tromey  <tromey@adacore.com>\n \n \t* c-exp.y (name_obstack): Now static."
    },
    {
      "sha": "9a51d2f3dc6c5f9024a26c5c1dbe64f66ff9cfe4",
      "filename": "gdb/auto-load.c",
      "status": "modified",
      "additions": 16,
      "deletions": 25,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88f07206fa577f80e8f6cfed7b2183dc3b4e9f39/gdb/auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88f07206fa577f80e8f6cfed7b2183dc3b4e9f39/gdb/auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.c?ref=88f07206fa577f80e8f6cfed7b2183dc3b4e9f39",
      "patch": "@@ -529,13 +529,10 @@ For more information about this security protection see the\\n\\\n \n struct auto_load_pspace_info\n {\n-  auto_load_pspace_info () = default;\n-  ~auto_load_pspace_info ();\n-\n   /* For each program space we keep track of loaded scripts, both when\n      specified as file names and as scripts to be executed directly.  */\n-  struct htab *loaded_script_files = nullptr;\n-  struct htab *loaded_script_texts = nullptr;\n+  htab_up loaded_script_files;\n+  htab_up loaded_script_texts;\n \n   /* Non-zero if we've issued the warning about an auto-load script not being\n      supported.  We only want to issue this warning once.  */\n@@ -567,14 +564,6 @@ struct loaded_script\n static const struct program_space_key<struct auto_load_pspace_info>\n   auto_load_pspace_data;\n \n-auto_load_pspace_info::~auto_load_pspace_info ()\n-{\n-  if (loaded_script_files)\n-    htab_delete (loaded_script_files);\n-  if (loaded_script_texts)\n-    htab_delete (loaded_script_texts);\n-}\n-\n /* Get the current autoload data.  If none is found yet, add it now.  This\n    function always returns a valid object.  */\n \n@@ -621,14 +610,16 @@ init_loaded_scripts_info (struct auto_load_pspace_info *pspace_info)\n      Space for each entry is obtained with one malloc so we can free them\n      easily.  */\n \n-  pspace_info->loaded_script_files = htab_create (31,\n-\t\t\t\t\t\t  hash_loaded_script_entry,\n-\t\t\t\t\t\t  eq_loaded_script_entry,\n-\t\t\t\t\t\t  xfree);\n-  pspace_info->loaded_script_texts = htab_create (31,\n-\t\t\t\t\t\t  hash_loaded_script_entry,\n-\t\t\t\t\t\t  eq_loaded_script_entry,\n-\t\t\t\t\t\t  xfree);\n+  pspace_info->loaded_script_files.reset\n+    (htab_create (31,\n+\t\t  hash_loaded_script_entry,\n+\t\t  eq_loaded_script_entry,\n+\t\t  xfree));\n+  pspace_info->loaded_script_texts.reset\n+    (htab_create (31,\n+\t\t  hash_loaded_script_entry,\n+\t\t  eq_loaded_script_entry,\n+\t\t  xfree));\n \n   pspace_info->unsupported_script_warning_printed = false;\n   pspace_info->script_not_found_warning_printed = false;\n@@ -660,7 +651,7 @@ maybe_add_script_file (struct auto_load_pspace_info *pspace_info, int loaded,\n \t\t       const char *name, const char *full_path,\n \t\t       const struct extension_language_defn *language)\n {\n-  struct htab *htab = pspace_info->loaded_script_files;\n+  struct htab *htab = pspace_info->loaded_script_files.get ();\n   struct loaded_script **slot, entry;\n   int in_hash_table;\n \n@@ -708,7 +699,7 @@ maybe_add_script_text (struct auto_load_pspace_info *pspace_info,\n \t\t       int loaded, const char *name,\n \t\t       const struct extension_language_defn *language)\n {\n-  struct htab *htab = pspace_info->loaded_script_texts;\n+  struct htab *htab = pspace_info->loaded_script_texts.get ();\n   struct loaded_script **slot, entry;\n   int in_hash_table;\n \n@@ -1299,7 +1290,7 @@ auto_load_info_scripts (const char *pattern, int from_tty,\n       collect_matching_scripts_data data (&script_files, language);\n \n       /* Pass a pointer to scripts as VEC_safe_push can realloc space.  */\n-      htab_traverse_noresize (pspace_info->loaded_script_files,\n+      htab_traverse_noresize (pspace_info->loaded_script_files.get (),\n \t\t\t      collect_matching_scripts, &data);\n \n       std::sort (script_files.begin (), script_files.end (),\n@@ -1311,7 +1302,7 @@ auto_load_info_scripts (const char *pattern, int from_tty,\n       collect_matching_scripts_data data (&script_texts, language);\n \n       /* Pass a pointer to scripts as VEC_safe_push can realloc space.  */\n-      htab_traverse_noresize (pspace_info->loaded_script_texts,\n+      htab_traverse_noresize (pspace_info->loaded_script_texts.get (),\n \t\t\t      collect_matching_scripts, &data);\n \n       std::sort (script_texts.begin (), script_texts.end (),"
    }
  ]
}