{
  "sha": "25558938d07b61ad628952a7bdc0a793d27f1b71",
  "node_id": "C_kwDOANOeidoAKDI1NTU4OTM4ZDA3YjYxYWQ2Mjg5NTJhN2JkYzBhNzkzZDI3ZjFiNzE",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-01T16:19:30Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-24T21:25:55Z"
    },
    "message": "gdb: change thread_info::name to unique_xmalloc_ptr, add helper function\n\nThis started out as changing thread_info::name to a unique_xmalloc_ptr.\nThat showed that almost all users of that field had the same logic to\nget a thread's name: use thread_info::name if non-nullptr, else ask the\ntarget.  Factor out this logic in a new thread_name free function.  Make\nthe field private (rename to m_name) and add some accessors.\n\nChange-Id: Iebdd95f4cd21fbefc505249bd1d05befc466a2fc",
    "tree": {
      "sha": "1cce292b3623c2f8cecc2426bb2011dfe1716fba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1cce292b3623c2f8cecc2426bb2011dfe1716fba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/25558938d07b61ad628952a7bdc0a793d27f1b71",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25558938d07b61ad628952a7bdc0a793d27f1b71",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/25558938d07b61ad628952a7bdc0a793d27f1b71",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25558938d07b61ad628952a7bdc0a793d27f1b71/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7ebaa5f7821682c40e79ee1fdfe43528b7d87376"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 57,
    "deletions": 30
  },
  "files": [
    {
      "sha": "3b626b8f4aa2f8ab86ddede4f34a7e024c468db0",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=25558938d07b61ad628952a7bdc0a793d27f1b71",
      "patch": "@@ -4565,13 +4565,12 @@ maybe_print_thread_hit_breakpoint (struct ui_out *uiout)\n \n   if (show_thread_that_caused_stop ())\n     {\n-      const char *name;\n       struct thread_info *thr = inferior_thread ();\n \n       uiout->text (\"Thread \");\n       uiout->field_string (\"thread-id\", print_thread_id (thr));\n \n-      name = thr->name != NULL ? thr->name : target_thread_name (thr);\n+      const char *name = thread_name (thr);\n       if (name != NULL)\n \t{\n \t  uiout->text (\" \\\"\");"
    },
    {
      "sha": "7beccba4272af0feb11685e715c93d0210a5d7b6",
      "filename": "gdb/gdbthread.h",
      "status": "modified",
      "additions": 26,
      "deletions": 4,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/gdbthread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/gdbthread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbthread.h?ref=25558938d07b61ad628952a7bdc0a793d27f1b71",
      "patch": "@@ -235,7 +235,6 @@ class thread_info : public refcounted_object,\n {\n public:\n   explicit thread_info (inferior *inf, ptid_t ptid);\n-  ~thread_info ();\n \n   bool deletable () const;\n \n@@ -286,9 +285,21 @@ class thread_info : public refcounted_object,\n   /* The inferior this thread belongs to.  */\n   struct inferior *inf;\n \n-  /* The name of the thread, as specified by the user.  This is NULL\n-     if the thread does not have a user-given name.  */\n-  char *name = NULL;\n+  /* The user-given name of the thread.\n+\n+     Returns nullptr if the thread does not have a user-given name.  */\n+  const char *name () const\n+  {\n+    return m_name.get ();\n+  }\n+\n+  /* Set the user-given name of the thread.\n+\n+     Pass nullptr to clear the name.  */\n+  void set_name (gdb::unique_xmalloc_ptr<char> name)\n+  {\n+    m_name = std::move (name);\n+  }\n \n   bool executing () const\n   { return m_executing; }\n@@ -523,6 +534,11 @@ class thread_info : public refcounted_object,\n   /* State of inferior thread to restore after GDB is done with an inferior\n      call.  See `struct thread_suspend_state'.  */\n   thread_suspend_state m_suspend;\n+\n+  /* The user-given name of the thread.\n+\n+     Nullptr if the thread does not have a user-given name.  */\n+  gdb::unique_xmalloc_ptr<char> m_name;\n };\n \n using thread_info_resumed_with_pending_wait_status_node\n@@ -953,4 +969,10 @@ extern void print_selected_thread_frame (struct ui_out *uiout,\n    alive anymore.  */\n extern void thread_select (const char *tidstr, class thread_info *thr);\n \n+/* Return THREAD's name.\n+\n+   If THREAD has a user-given name, return it.  Otherwise, query the thread's\n+   target to get the name.  May return nullptr.  */\n+extern const char *thread_name (thread_info *thread);\n+\n #endif /* GDBTHREAD_H */"
    },
    {
      "sha": "0acb3f779b5abca3621a7e3082441d317ffe4e6c",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=25558938d07b61ad628952a7bdc0a793d27f1b71",
      "patch": "@@ -8185,12 +8185,10 @@ print_signal_received_reason (struct ui_out *uiout, enum gdb_signal siggnal)\n     ;\n   else if (show_thread_that_caused_stop ())\n     {\n-      const char *name;\n-\n       uiout->text (\"\\nThread \");\n       uiout->field_string (\"thread-id\", print_thread_id (thr));\n \n-      name = thr->name != NULL ? thr->name : target_thread_name (thr);\n+      const char *name = thread_name (thr);\n       if (name != NULL)\n \t{\n \t  uiout->text (\" \\\"\");"
    },
    {
      "sha": "a815f3f90c026a82be3bcabdfa1aa3f023154316",
      "filename": "gdb/python/py-infthread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/python/py-infthread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/python/py-infthread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-infthread.c?ref=25558938d07b61ad628952a7bdc0a793d27f1b71",
      "patch": "@@ -66,14 +66,10 @@ static PyObject *\n thpy_get_name (PyObject *self, void *ignore)\n {\n   thread_object *thread_obj = (thread_object *) self;\n-  const char *name;\n \n   THPY_REQUIRE_VALID (thread_obj);\n \n-  name = thread_obj->thread->name;\n-  if (name == NULL)\n-    name = target_thread_name (thread_obj->thread);\n-\n+  const char *name = thread_name (thread_obj->thread);\n   if (name == NULL)\n     Py_RETURN_NONE;\n \n@@ -115,8 +111,7 @@ thpy_set_name (PyObject *self, PyObject *newvalue, void *ignore)\n \treturn -1;\n     }\n \n-  xfree (thread_obj->thread->name);\n-  thread_obj->thread->name = name.release ();\n+  thread_obj->thread->set_name (std::move (name));\n \n   return 0;\n }"
    },
    {
      "sha": "4dc17fd4806d6d2948a2a187a23577db1dc6fc32",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=25558938d07b61ad628952a7bdc0a793d27f1b71",
      "patch": "@@ -1924,7 +1924,10 @@ extern std::string normal_pid_to_str (ptid_t ptid);\n extern const char *target_extra_thread_info (thread_info *tp);\n \n /* Return the thread's name, or NULL if the target is unable to determine it.\n-   The returned value must not be freed by the caller.  */\n+   The returned value must not be freed by the caller.\n+\n+   You likely don't want to call this function, but use the thread_name\n+   function instead, which prefers the user-given thread name, if set.  */\n \n extern const char *target_thread_name (struct thread_info *);\n "
    },
    {
      "sha": "ebe2d7833e3321f2a0ce6b32bc2b508a8a6b7466",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 23,
      "deletions": 13,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25558938d07b61ad628952a7bdc0a793d27f1b71/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=25558938d07b61ad628952a7bdc0a793d27f1b71",
      "patch": "@@ -302,11 +302,6 @@ thread_info::thread_info (struct inferior *inf_, ptid_t ptid_)\n   this->m_suspend.waitstatus.kind = TARGET_WAITKIND_IGNORE;\n }\n \n-thread_info::~thread_info ()\n-{\n-  xfree (this->name);\n-}\n-\n /* See gdbthread.h.  */\n \n bool\n@@ -998,7 +993,7 @@ thread_target_id_str (thread_info *tp)\n {\n   std::string target_id = target_pid_to_str (tp->ptid);\n   const char *extra_info = target_extra_thread_info (tp);\n-  const char *name = tp->name != nullptr ? tp->name : target_thread_name (tp);\n+  const char *name = thread_name (tp);\n \n   if (extra_info != nullptr && name != nullptr)\n     return string_printf (\"%s \\\"%s\\\" (%s)\", target_id.c_str (), name,\n@@ -1140,9 +1135,7 @@ print_thread_info_1 (struct ui_out *uiout, const char *requested_threads,\n \t      if (extra_info != nullptr)\n \t\tuiout->field_string (\"details\", extra_info);\n \n-\t      const char *name = (tp->name != nullptr\n-\t\t\t\t  ? tp->name\n-\t\t\t\t  : target_thread_name (tp));\n+\t      const char *name = thread_name (tp);\n \t      if (name != NULL)\n \t\tuiout->field_string (\"name\", name);\n \t    }\n@@ -1835,8 +1828,7 @@ thread_name_command (const char *arg, int from_tty)\n   arg = skip_spaces (arg);\n \n   info = inferior_thread ();\n-  xfree (info->name);\n-  info->name = arg ? xstrdup (arg) : NULL;\n+  info->set_name (arg != nullptr ? make_unique_xstrdup (arg) : nullptr);\n }\n \n /* Find thread ids with a name, target pid, or extra info matching ARG.  */\n@@ -1863,10 +1855,10 @@ thread_find_command (const char *arg, int from_tty)\n     {\n       switch_to_inferior_no_thread (tp->inf);\n \n-      if (tp->name != NULL && re_exec (tp->name))\n+      if (tp->name () != nullptr && re_exec (tp->name ()))\n \t{\n \t  printf_filtered (_(\"Thread %s has name '%s'\\n\"),\n-\t\t\t   print_thread_id (tp), tp->name);\n+\t\t\t   print_thread_id (tp), tp->name ());\n \t  match++;\n \t}\n \n@@ -2010,6 +2002,24 @@ update_thread_list (void)\n   update_threads_executing ();\n }\n \n+/* See gdbthread.h.  */\n+\n+const char *\n+thread_name (thread_info *thread)\n+{\n+  /* Use the manually set name if there is one.  */\n+  const char *name = thread->name ();\n+  if (name != nullptr)\n+    return name;\n+\n+  /* Otherwise, ask the target.  Ensure we query the right target stack.  */\n+  scoped_restore_current_thread restore_thread;\n+  if (thread->inf != current_inferior ())\n+    switch_to_inferior_no_thread (thread->inf);\n+\n+  return target_thread_name (thread);\n+}\n+\n /* Return a new value for the selected thread's id.  Return a value of\n    0 if no thread is selected.  If GLOBAL is true, return the thread's\n    global number.  Otherwise return the per-inferior number.  */"
    }
  ]
}