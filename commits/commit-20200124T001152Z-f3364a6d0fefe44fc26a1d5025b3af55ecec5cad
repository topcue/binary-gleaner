{
  "sha": "f3364a6d0fefe44fc26a1d5025b3af55ecec5cad",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjMzNjRhNmQwZmVmZTQ0ZmMyNmExZDUwMjViM2FmNTVlY2VjNWNhZA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-19T18:09:43Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-01-24T00:11:52Z"
    },
    "message": "gdb: Re-enable stdin for all UIs from start_event_loop\n\nIf we catch an exception in start_event_loop's call to\ngdb_do_one_event, then it is possible that the current_ui has changed\nsince we called async_disable_stdin.  If that's the case then calling\nasync_enable_stdin will be called on the wrong UI.\n\nTo solve this problem we wrap the call to async_enable_stdin with\nSWITCH_THRU_ALL_UIS, this causes us to try and re-enable stdin for all\nUIs, which will catch any for which we called async_disable_stdin.\n\ngdb/ChangeLog:\n\n\t* event-loop.c (start_event_loop): Wrap async_enable_stdin with\n\tSWITCH_THRU_ALL_UIS.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.server/multi-ui-errors.c: New file.\n\t* gdb.server/multi-ui-errors.exp: New file.\n\nChange-Id: I1e18deff2e6f4e17f7a13adce3553eb001cad93b",
    "tree": {
      "sha": "98a9b7a3b11bec69543e3a6f1a5a8f18ce1cb682",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/98a9b7a3b11bec69543e3a6f1a5a8f18ce1cb682"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "733d0a679536628eb1be4b4b8aa6384de24ff1f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/733d0a679536628eb1be4b4b8aa6384de24ff1f1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/733d0a679536628eb1be4b4b8aa6384de24ff1f1"
    }
  ],
  "stats": {
    "total": 154,
    "additions": 153,
    "deletions": 1
  },
  "files": [
    {
      "sha": "20304ced1f257dd408360d2c9485df3d4c8836d5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f3364a6d0fefe44fc26a1d5025b3af55ecec5cad",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* event-loop.c (start_event_loop): Wrap async_enable_stdin with\n+\tSWITCH_THRU_ALL_UIS.\n+\n 2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \tPR tui/9765"
    },
    {
      "sha": "65a35b4e77c556abdbb0cbf3c45b7e9e05897417",
      "filename": "gdb/event-loop.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad/gdb/event-loop.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad/gdb/event-loop.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-loop.c?ref=f3364a6d0fefe44fc26a1d5025b3af55ecec5cad",
      "patch": "@@ -376,7 +376,10 @@ start_event_loop (void)\n \t  /* If any exception escaped to here, we better enable\n \t     stdin.  Otherwise, any command that calls async_disable_stdin,\n \t     and then throws, will leave stdin inoperable.  */\n-\t  async_enable_stdin ();\n+\t  SWITCH_THRU_ALL_UIS ()\n+\t    {\n+\t      async_enable_stdin ();\n+\t    }\n \t  /* If we long-jumped out of do_one_event, we probably didn't\n \t     get around to resetting the prompt, which leaves readline\n \t     in a messed-up state.  Reset it here.  */"
    },
    {
      "sha": "facd32fe178e0216cd8793353acb6887782d51f0",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f3364a6d0fefe44fc26a1d5025b3af55ecec5cad",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.server/multi-ui-errors.c: New file.\n+\t* gdb.server/multi-ui-errors.exp: New file.\n+\n 2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \tPR tui/9765"
    },
    {
      "sha": "1a243b5c577443b6dc219d9f02b48067914f2047",
      "filename": "gdb/testsuite/gdb.server/multi-ui-errors.c",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad/gdb/testsuite/gdb.server/multi-ui-errors.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad/gdb/testsuite/gdb.server/multi-ui-errors.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/multi-ui-errors.c?ref=f3364a6d0fefe44fc26a1d5025b3af55ecec5cad",
      "patch": "@@ -0,0 +1,32 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdio.h>\n+#include <unistd.h>\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  printf (\"@@XX@@ Inferior Starting @@XX@@\\n\");\n+\n+  for (i = 0; i < 120; ++i)\n+    sleep (1);\n+\n+  return 0;\n+}"
    },
    {
      "sha": "c2a05b0fb6f2090d6f6e2f96df6246f8e14202b7",
      "filename": "gdb/testsuite/gdb.server/multi-ui-errors.exp",
      "status": "added",
      "additions": 107,
      "deletions": 0,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad/gdb/testsuite/gdb.server/multi-ui-errors.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad/gdb/testsuite/gdb.server/multi-ui-errors.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/multi-ui-errors.exp?ref=f3364a6d0fefe44fc26a1d5025b3af55ecec5cad",
      "patch": "@@ -0,0 +1,107 @@\n+# This testcase is part of GDB, the GNU debugger.\n+#\n+# Copyright 2019-2020 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test what happens if we have multiple UIs in use, and an error\n+# occurs while running a GDB command.  Specifically, do both UIs\n+# return to an interactive state, or does one (or both) of them get\n+# stuck in a non-interactive state.\n+\n+load_lib gdbserver-support.exp\n+\n+standard_testfile\n+\n+if {[skip_gdbserver_tests]} {\n+    return 0\n+}\n+\n+if {[prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}]} {\n+    return -1\n+}\n+\n+# Make sure we're disconnected, in case we're testing with an\n+# extended-remote board, therefore already connected.\n+gdb_test \"disconnect\" \".*\"\n+\n+# Start gdbserver.\n+set res [gdbserver_spawn \"${binfile}\"]\n+set gdbserver_protocol [lindex $res 0]\n+set gdbserver_gdbport [lindex $res 1]\n+set gdbserver_pid [exp_pid -i $server_spawn_id]\n+\n+# Save the main UI's spawn ID.\n+set gdb_main_spawn_id $gdb_spawn_id\n+\n+# Create the new PTY for the secondary console UI, issue the 'new-ui'\n+# command, and wait for a prompt on the second UI.\n+spawn -pty\n+set extra_spawn_id $spawn_id\n+set extra_tty_name $spawn_out(slave,name)\n+gdb_test_multiple \"new-ui console $extra_tty_name\" \"new-ui\" {\n+    -re \"New UI allocated\\r\\n$gdb_prompt $\" {\n+\tpass $gdb_test_name\n+    }\n+}\n+with_spawn_id $extra_spawn_id {\n+    gdb_test_multiple \"\" \"initial prompt on extra console\" {\n+\t-re \"$gdb_prompt $\" {\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+}\n+\n+# Connect to the remote and continue its execution from the other UI.\n+with_spawn_id $extra_spawn_id {\n+    gdb_test \"target $gdbserver_protocol $gdbserver_gdbport\" \".*\"\n+    send_gdb \"continue\\n\"\n+}\n+\n+# We're going to kill the gdbserver, but before we do, lets make sure\n+# that the inferior has started executing.\n+with_spawn_id $server_spawn_id {\n+    gdb_test_multiple \"\" \"ensure inferior is running\" {\n+\t-re \"@@XX@@ Inferior Starting @@XX@@\" {\n+\t    pass $gdb_test_name\n+\t}\n+\ttimeout {\n+\t    fail $gdb_test_name\n+\t}\n+    }\n+}\n+\n+# Interact with the main UI.\n+with_spawn_id $gdb_main_spawn_id {\n+    gdb_test \"echo hello\\\\n\" \"hello\" \"interact with GDB's main UI\"\n+}\n+\n+# Now kill the gdbserver.\n+remote_exec target \"kill -9 $gdbserver_pid\"\n+\n+# We expect to land back at a GDB prompt in both UIs, however there is\n+# currently an issue that in the original UI GDB doesn't reprint its\n+# prompt.  That said, getting a prompt isn't the point of this test.\n+# The point is that we should be able to interact with GDB from either\n+# interpreter now.\n+\n+with_spawn_id $gdb_main_spawn_id {\n+    gdb_test \"echo\" \"\" \\\n+\t\"main UI, prompt after gdbserver dies\"\n+}\n+\n+with_spawn_id $extra_spawn_id {\n+    gdb_test \"echo\" \"\" \\\n+\t\"extra UI, prompt after gdbserver dies\"\n+}"
    }
  ]
}