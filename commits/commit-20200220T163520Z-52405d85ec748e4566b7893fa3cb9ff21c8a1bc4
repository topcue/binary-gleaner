{
  "sha": "52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTI0MDVkODVlYzc0OGU0NTY2Yjc4OTNmYTNjYjlmZjIxYzhhMWJjNA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:12:04Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:20Z"
    },
    "message": "gdbserver: finish turning the target ops vector into a class\n\nNow that 'process_stratum_target' has a single field left, namely 'pt'\nof type 'process_target', and that all the requests to a\n'process_stratum_target' are forwarded to 'pt', meld the\n'process_target' class into 'process_stratum_target'.\n\nThis essentially means\n\n1. All the references of the form 'the_target->pt' become 'the_target'.\n\n2. All the uses of the name 'process_target' become\n   'process_stratum_target'.\n\n3. The platform-specific target op vectors (e.g. linux_target_ops) are\n   removed and instances of their \"process target\" classes are used\n   instead.\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* target.h (struct process_stratum_target): Remove.\n\t(class process_target): Rename to ...\n\t(class process_stratum_target): ... this.\n\t* linux-low.h (class linux_process_target): Derive from\n\t'process_stratum_target'.\n\t* linux-low.cc (linux_target_ops): Remove.\n\t(initialize_low): Set the_target to the singleton instance of\n\tlinux_process_target.\n\t* lynx-low.h (class lynx_process_target): Derive from\n\t'process_stratum_target'.\n\t* lynx-low.cc (lynx_target_ops): Remove.\n\t(initialize_low): Set the_target to the singleton instance of\n\tlynx_process_target.\n\t* nto-low.h (class nto_process_target): Derive from\n\t'process_stratum_target'.\n\t* nto-low.cc (nto_target_ops): Remove.\n\t(initialize_low): Set the_target to the singleton instance of\n\tnto_process_target.\n\t* win32-low.h (class win32_process_target): Derive from\n\t'process_stratum_target'.\n\t* win32-low.cc (win32_target_ops): Remove.\n\t(initialize_low): Set the_target to the singleton instance of\n\twin32_process_target.\n\n\tReplace 'the_target->pt' with 'the_target' in the uses below.\n\n\t* hostio.cc (hostio_error)\n\t(handle_setfs)\n\t(handle_open)\n\t(handle_unlink)\n\t(handle_readlink)\n\t* linux-aarch32-low.cc (arm_breakpoint_at)\n\t* linux-aarch64-low.cc (aarch64_breakpoint_at)\n\t* linux-arm-low.cc (arm_sigreturn_next_pc)\n\t(arm_get_hwcap)\n\t(arm_get_syscall_trapinfo)\n\t* linux-cris-low.cc (cris_breakpoint_at)\n\t* linux-crisv32-low.cc (cris_breakpoint_at)\n\t* linux-low.cc (handle_extended_wait)\n\t(linux_wait_1)\n\t(linux_read_memory)\n\t(linux_process_target::breakpoint_kind_from_pc)\n\t(linux_get_auxv)\n\t* linux-m32r-low.cc (m32r_breakpoint_at)\n\t* linux-mips-low.cc (mips_breakpoint_at)\n\t* linux-nios2-low.cc (nios2_breakpoint_at)\n\t* linux-ppc-low.cc (ppc_breakpoint_at)\n\t* linux-s390-low.cc (s390_get_hwcap)\n\t* linux-sh-low.cc (sh_breakpoint_at)\n\t* linux-sparc-low.cc (sparc_fill_gregset_to_stack)\n\t(sparc_store_gregset_from_stack)\n\t(sparc_breakpoint_at)\n\t* linux-tic6x-low.cc (tic6x_breakpoint_at)\n\t* linux-tile-low.cc (tile_breakpoint_at)\n\t* linux-x86-low.cc (x86_breakpoint_at)\n\t* linux-xtensa-low.cc (xtensa_breakpoint_at)\n\t* mem-break.cc (bp_size)\n\t(bp_opcode)\n\t(insert_memory_breakpoint)\n\t(set_raw_breakpoint_at)\n\t(delete_raw_breakpoint)\n\t(z_type_supported)\n\t(uninsert_raw_breakpoint)\n\t(reinsert_raw_breakpoint)\n\t(validate_inserted_breakpoint)\n\t* regcache.cc (regcache_read_pc)\n\t(regcache_write_pc)\n\t* remote-utils.cc (putpkt_binary_1)\n\t(input_interrupt)\n\t(getpkt)\n\t(prepare_resume_reply)\n\t* server.cc (handle_general_set)\n\t(handle_detach)\n\t(handle_qxfer_auxv)\n\t(handle_qxfer_exec_file)\n\t(handle_qxfer_libraries_svr4)\n\t(handle_qxfer_osdata)\n\t(handle_qxfer_siginfo)\n\t(handle_qxfer_fdpic)\n\t(handle_query)\n\t(resume)\n\t(handle_v_requests)\n\t(queue_stop_reply_callback)\n\t(captured_main)\n\t* target.cc (prepare_to_access_memory)\n\t(done_accessing_memory)\n\t(read_inferior_memory)\n\t(target_write_memory)\n\t(target_stop_and_wait)\n\t(target_wait)\n\t(target_mourn_inferior)\n\t(target_continue_no_signal)\n\t(target_continue)\n\t(target_supports_multi_process)\n\t(kill_inferior)\n\t* target.h\n\t(target_create_inferior)\n\t(target_post_create_inferior)\n\t(myattach)\n\t(target_supports_fork_events)\n\t(target_supports_vfork_events)\n\t(target_supports_exec_events)\n\t(target_handle_new_gdb_connection)\n\t(detach_inferior)\n\t(mythread_alive)\n\t(fetch_inferior_registers)\n\t(store_inferior_registers)\n\t(join_inferior)\n\t(target_supports_non_stop)\n\t(target_async)\n\t(target_process_qsupported)\n\t(target_supports_catch_syscall)\n\t(target_get_ipa_tdesc_idx)\n\t(target_supports_tracepoints)\n\t(target_supports_fast_tracepoints)\n\t(target_get_min_fast_tracepoint_insn_len)\n\t(target_thread_stopped)\n\t(target_pause_all)\n\t(target_unpause_all)\n\t(target_stabilize_threads)\n\t(target_install_fast_tracepoint_jump_pad)\n\t(target_emit_ops)\n\t(target_supports_disable_randomization)\n\t(target_supports_agent)\n\t(target_enable_btrace)\n\t(target_disable_btrace)\n\t(target_read_btrace)\n\t(target_read_btrace_conf)\n\t(target_supports_range_stepping)\n\t(target_supports_stopped_by_sw_breakpoint)\n\t(target_stopped_by_sw_breakpoint)\n\t(target_supports_stopped_by_hw_breakpoint)\n\t(target_supports_hardware_single_step)\n\t(target_stopped_by_hw_breakpoint)\n\t(target_breakpoint_kind_from_pc)\n\t(target_breakpoint_kind_from_current_state)\n\t(target_supports_software_single_step)\n\t(target_core_of_thread)\n\t(target_thread_name)\n\t(target_thread_handle)\n\t* win32-low.cc (do_initial_child_stuff)\n\n\tRename target op default definitions listed below.\n\n\t* target.cc (process_target::post_create_inferior): Rename as ...\n\t(process_stratum_target::post_create_inferior): ... this.\n\t(process_target::prepare_to_access_memory): Rename as ...\n\t(process_stratum_target::prepare_to_access_memory): ... this.\n\t(process_target::done_accessing_memory): Rename as ...\n\t(process_stratum_target::done_accessing_memory): ... this.\n\t(process_target::look_up_symbols): Rename as ...\n\t(process_stratum_target::look_up_symbols): ... this.\n\t(process_target::supports_read_auxv): Rename as ...\n\t(process_stratum_target::supports_read_auxv): ... this.\n\t(process_target::read_auxv): Rename as ...\n\t(process_stratum_target::read_auxv): ... this.\n\t(process_target::supports_z_point_type): Rename as ...\n\t(process_stratum_target::supports_z_point_type): ... this.\n\t(process_target::insert_point): Rename as ...\n\t(process_stratum_target::insert_point): ... this.\n\t(process_target::remove_point): Rename as ...\n\t(process_stratum_target::remove_point): ... this.\n\t(process_target::stopped_by_sw_breakpoint): Rename as ...\n\t(process_stratum_target::stopped_by_sw_breakpoint): ... this.\n\t(process_target::supports_stopped_by_sw_breakpoint): Rename as ...\n\t(process_stratum_target::supports_stopped_by_sw_breakpoint): ... this.\n\t(process_target::stopped_by_hw_breakpoint): Rename as ...\n\t(process_stratum_target::stopped_by_hw_breakpoint): ... this.\n\t(process_target::supports_stopped_by_hw_breakpoint): Rename as ...\n\t(process_stratum_target::supports_stopped_by_hw_breakpoint): ... this.\n\t(process_target::supports_hardware_single_step): Rename as ...\n\t(process_stratum_target::supports_hardware_single_step): ... this.\n\t(process_target::stopped_by_watchpoint): Rename as ...\n\t(process_stratum_target::stopped_by_watchpoint): ... this.\n\t(process_target::stopped_data_address): Rename as ...\n\t(process_stratum_target::stopped_data_address): ... this.\n\t(process_target::supports_read_offsets): Rename as ...\n\t(process_stratum_target::supports_read_offsets): ... this.\n\t(process_target::read_offsets): Rename as ...\n\t(process_stratum_target::read_offsets): ... this.\n\t(process_target::supports_get_tls_address): Rename as ...\n\t(process_stratum_target::supports_get_tls_address): ... this.\n\t(process_target::get_tls_address): Rename as ...\n\t(process_stratum_target::get_tls_address): ... this.\n\t(process_target::hostio_last_error): Rename as ...\n\t(process_stratum_target::hostio_last_error): ... this.\n\t(process_target::supports_qxfer_osdata): Rename as ...\n\t(process_stratum_target::supports_qxfer_osdata): ... this.\n\t(process_target::qxfer_osdata): Rename as ...\n\t(process_stratum_target::qxfer_osdata): ... this.\n\t(process_target::supports_qxfer_siginfo): Rename as ...\n\t(process_stratum_target::supports_qxfer_siginfo): ... this.\n\t(process_target::qxfer_siginfo): Rename as ...\n\t(process_stratum_target::qxfer_siginfo): ... this.\n\t(process_target::supports_non_stop): Rename as ...\n\t(process_stratum_target::supports_non_stop): ... this.\n\t(process_target::async): Rename as ...\n\t(process_stratum_target::async): ... this.\n\t(process_target::start_non_stop): Rename as ...\n\t(process_stratum_target::start_non_stop): ... this.\n\t(process_target::supports_multi_process): Rename as ...\n\t(process_stratum_target::supports_multi_process): ... this.\n\t(process_target::supports_fork_events): Rename as ...\n\t(process_stratum_target::supports_fork_events): ... this.\n\t(process_target::supports_vfork_events): Rename as ...\n\t(process_stratum_target::supports_vfork_events): ... this.\n\t(process_target::supports_exec_events): Rename as ...\n\t(process_stratum_target::supports_exec_events): ... this.\n\t(process_target::handle_new_gdb_connection): Rename as ...\n\t(process_stratum_target::handle_new_gdb_connection): ... this.\n\t(process_target::handle_monitor_command): Rename as ...\n\t(process_stratum_target::handle_monitor_command): ... this.\n\t(process_target::core_of_thread): Rename as ...\n\t(process_stratum_target::core_of_thread): ... this.\n\t(process_target::supports_read_loadmap): Rename as ...\n\t(process_stratum_target::supports_read_loadmap): ... this.\n\t(process_target::read_loadmap): Rename as ...\n\t(process_stratum_target::read_loadmap): ... this.\n\t(process_target::process_qsupported): Rename as ...\n\t(process_stratum_target::process_qsupported): ... this.\n\t(process_target::supports_tracepoints): Rename as ...\n\t(process_stratum_target::supports_tracepoints): ... this.\n\t(process_target::read_pc): Rename as ...\n\t(process_stratum_target::read_pc): ... this.\n\t(process_target::write_pc): Rename as ...\n\t(process_stratum_target::write_pc): ... this.\n\t(process_target::supports_thread_stopped): Rename as ...\n\t(process_stratum_target::supports_thread_stopped): ... this.\n\t(process_target::thread_stopped): Rename as ...\n\t(process_stratum_target::thread_stopped): ... this.\n\t(process_target::supports_get_tib_address): Rename as ...\n\t(process_stratum_target::supports_get_tib_address): ... this.\n\t(process_target::get_tib_address): Rename as ...\n\t(process_stratum_target::get_tib_address): ... this.\n\t(process_target::pause_all): Rename as ...\n\t(process_stratum_target::pause_all): ... this.\n\t(process_target::unpause_all): Rename as ...\n\t(process_stratum_target::unpause_all): ... this.\n\t(process_target::stabilize_threads): Rename as ...\n\t(process_stratum_target::stabilize_threads): ... this.\n\t(process_target::supports_fast_tracepoints): Rename as ...\n\t(process_stratum_target::supports_fast_tracepoints): ... this.\n\t(process_target::get_min_fast_tracepoint_insn_len): Rename as ...\n\t(process_stratum_target::get_min_fast_tracepoint_insn_len): ... this.\n\t(process_target::emit_ops): Rename as ...\n\t(process_stratum_target::emit_ops): ... this.\n\t(process_target::supports_disable_randomization): Rename as ...\n\t(process_stratum_target::supports_disable_randomization): ... this.\n\t(process_target::supports_qxfer_libraries_svr4): Rename as ...\n\t(process_stratum_target::supports_qxfer_libraries_svr4): ... this.\n\t(process_target::qxfer_libraries_svr4): Rename as ...\n\t(process_stratum_target::qxfer_libraries_svr4): ... this.\n\t(process_target::supports_agent): Rename as ...\n\t(process_stratum_target::supports_agent): ... this.\n\t(process_target::enable_btrace): Rename as ...\n\t(process_stratum_target::enable_btrace): ... this.\n\t(process_target::disable_btrace): Rename as ...\n\t(process_stratum_target::disable_btrace): ... this.\n\t(process_target::read_btrace): Rename as ...\n\t(process_stratum_target::read_btrace): ... this.\n\t(process_target::read_btrace_conf): Rename as ...\n\t(process_stratum_target::read_btrace_conf): ... this.\n\t(process_target::supports_range_stepping): Rename as ...\n\t(process_stratum_target::supports_range_stepping): ... this.\n\t(process_target::supports_pid_to_exec_file): Rename as ...\n\t(process_stratum_target::supports_pid_to_exec_file): ... this.\n\t(process_target::pid_to_exec_file): Rename as ...\n\t(process_stratum_target::pid_to_exec_file): ... this.\n\t(process_target::supports_multifs): Rename as ...\n\t(process_stratum_target::supports_multifs): ... this.\n\t(process_target::multifs_open): Rename as ...\n\t(process_stratum_target::multifs_open): ... this.\n\t(process_target::multifs_unlink): Rename as ...\n\t(process_stratum_target::multifs_unlink): ... this.\n\t(process_target::multifs_readlink): Rename as ...\n\t(process_stratum_target::multifs_readlink): ... this.\n\t(process_target::breakpoint_kind_from_pc): Rename as ...\n\t(process_stratum_target::breakpoint_kind_from_pc): ... this.\n\t(process_target::breakpoint_kind_from_current_state): Rename as ...\n\t(process_stratum_target::breakpoint_kind_from_current_state): ... this.\n\t(process_target::thread_name): Rename as ...\n\t(process_stratum_target::thread_name): ... this.\n\t(process_target::thread_handle): Rename as ...\n\t(process_stratum_target::thread_handle): ... this.\n\t(process_target::supports_software_single_step): Rename as ...\n\t(process_stratum_target::supports_software_single_step): ... this.\n\t(process_target::supports_catch_syscall): Rename as ...\n\t(process_stratum_target::supports_catch_syscall): ... this.\n\t(process_target::get_ipa_tdesc_idx): Rename as ...\n\t(process_stratum_target::get_ipa_tdesc_idx): ... this.",
    "tree": {
      "sha": "ec1d1c674c6f7a134dffc2956e2359a873431a23",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ec1d1c674c6f7a134dffc2956e2359a873431a23"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "478f9adff55f3b03d935d1384f6ee3597969c448",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/478f9adff55f3b03d935d1384f6ee3597969c448",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/478f9adff55f3b03d935d1384f6ee3597969c448"
    }
  ],
  "stats": {
    "total": 850,
    "additions": 562,
    "deletions": 288
  },
  "files": [
    {
      "sha": "be39358f789bf43ca951c34ae29537b60c48bb8e",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 293,
      "deletions": 0,
      "changes": 293,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -1,3 +1,296 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* target.h (struct process_stratum_target): Remove.\n+\t(class process_target): Rename to ...\n+\t(class process_stratum_target): ... this.\n+\t* linux-low.h (class linux_process_target): Derive from\n+\t'process_stratum_target'.\n+\t* linux-low.cc (linux_target_ops): Remove.\n+\t(initialize_low): Set the_target to the singleton instance of\n+\tlinux_process_target.\n+\t* lynx-low.h (class lynx_process_target): Derive from\n+\t'process_stratum_target'.\n+\t* lynx-low.cc (lynx_target_ops): Remove.\n+\t(initialize_low): Set the_target to the singleton instance of\n+\tlynx_process_target.\n+\t* nto-low.h (class nto_process_target): Derive from\n+\t'process_stratum_target'.\n+\t* nto-low.cc (nto_target_ops): Remove.\n+\t(initialize_low): Set the_target to the singleton instance of\n+\tnto_process_target.\n+\t* win32-low.h (class win32_process_target): Derive from\n+\t'process_stratum_target'.\n+\t* win32-low.cc (win32_target_ops): Remove.\n+\t(initialize_low): Set the_target to the singleton instance of\n+\twin32_process_target.\n+\n+\tReplace 'the_target->pt' with 'the_target' in the uses below.\n+\n+\t* hostio.cc (hostio_error)\n+\t(handle_setfs)\n+\t(handle_open)\n+\t(handle_unlink)\n+\t(handle_readlink)\n+\t* linux-aarch32-low.cc (arm_breakpoint_at)\n+\t* linux-aarch64-low.cc (aarch64_breakpoint_at)\n+\t* linux-arm-low.cc (arm_sigreturn_next_pc)\n+\t(arm_get_hwcap)\n+\t(arm_get_syscall_trapinfo)\n+\t* linux-cris-low.cc (cris_breakpoint_at)\n+\t* linux-crisv32-low.cc (cris_breakpoint_at)\n+\t* linux-low.cc (handle_extended_wait)\n+\t(linux_wait_1)\n+\t(linux_read_memory)\n+\t(linux_process_target::breakpoint_kind_from_pc)\n+\t(linux_get_auxv)\n+\t* linux-m32r-low.cc (m32r_breakpoint_at)\n+\t* linux-mips-low.cc (mips_breakpoint_at)\n+\t* linux-nios2-low.cc (nios2_breakpoint_at)\n+\t* linux-ppc-low.cc (ppc_breakpoint_at)\n+\t* linux-s390-low.cc (s390_get_hwcap)\n+\t* linux-sh-low.cc (sh_breakpoint_at)\n+\t* linux-sparc-low.cc (sparc_fill_gregset_to_stack)\n+\t(sparc_store_gregset_from_stack)\n+\t(sparc_breakpoint_at)\n+\t* linux-tic6x-low.cc (tic6x_breakpoint_at)\n+\t* linux-tile-low.cc (tile_breakpoint_at)\n+\t* linux-x86-low.cc (x86_breakpoint_at)\n+\t* linux-xtensa-low.cc (xtensa_breakpoint_at)\n+\t* mem-break.cc (bp_size)\n+\t(bp_opcode)\n+\t(insert_memory_breakpoint)\n+\t(set_raw_breakpoint_at)\n+\t(delete_raw_breakpoint)\n+\t(z_type_supported)\n+\t(uninsert_raw_breakpoint)\n+\t(reinsert_raw_breakpoint)\n+\t(validate_inserted_breakpoint)\n+\t* regcache.cc (regcache_read_pc)\n+\t(regcache_write_pc)\n+\t* remote-utils.cc (putpkt_binary_1)\n+\t(input_interrupt)\n+\t(getpkt)\n+\t(prepare_resume_reply)\n+\t* server.cc (handle_general_set)\n+\t(handle_detach)\n+\t(handle_qxfer_auxv)\n+\t(handle_qxfer_exec_file)\n+\t(handle_qxfer_libraries_svr4)\n+\t(handle_qxfer_osdata)\n+\t(handle_qxfer_siginfo)\n+\t(handle_qxfer_fdpic)\n+\t(handle_query)\n+\t(resume)\n+\t(handle_v_requests)\n+\t(queue_stop_reply_callback)\n+\t(captured_main)\n+\t* target.cc (prepare_to_access_memory)\n+\t(done_accessing_memory)\n+\t(read_inferior_memory)\n+\t(target_write_memory)\n+\t(target_stop_and_wait)\n+\t(target_wait)\n+\t(target_mourn_inferior)\n+\t(target_continue_no_signal)\n+\t(target_continue)\n+\t(target_supports_multi_process)\n+\t(kill_inferior)\n+\t* target.h\n+\t(target_create_inferior)\n+\t(target_post_create_inferior)\n+\t(myattach)\n+\t(target_supports_fork_events)\n+\t(target_supports_vfork_events)\n+\t(target_supports_exec_events)\n+\t(target_handle_new_gdb_connection)\n+\t(detach_inferior)\n+\t(mythread_alive)\n+\t(fetch_inferior_registers)\n+\t(store_inferior_registers)\n+\t(join_inferior)\n+\t(target_supports_non_stop)\n+\t(target_async)\n+\t(target_process_qsupported)\n+\t(target_supports_catch_syscall)\n+\t(target_get_ipa_tdesc_idx)\n+\t(target_supports_tracepoints)\n+\t(target_supports_fast_tracepoints)\n+\t(target_get_min_fast_tracepoint_insn_len)\n+\t(target_thread_stopped)\n+\t(target_pause_all)\n+\t(target_unpause_all)\n+\t(target_stabilize_threads)\n+\t(target_install_fast_tracepoint_jump_pad)\n+\t(target_emit_ops)\n+\t(target_supports_disable_randomization)\n+\t(target_supports_agent)\n+\t(target_enable_btrace)\n+\t(target_disable_btrace)\n+\t(target_read_btrace)\n+\t(target_read_btrace_conf)\n+\t(target_supports_range_stepping)\n+\t(target_supports_stopped_by_sw_breakpoint)\n+\t(target_stopped_by_sw_breakpoint)\n+\t(target_supports_stopped_by_hw_breakpoint)\n+\t(target_supports_hardware_single_step)\n+\t(target_stopped_by_hw_breakpoint)\n+\t(target_breakpoint_kind_from_pc)\n+\t(target_breakpoint_kind_from_current_state)\n+\t(target_supports_software_single_step)\n+\t(target_core_of_thread)\n+\t(target_thread_name)\n+\t(target_thread_handle)\n+\t* win32-low.cc (do_initial_child_stuff)\n+\n+\tRename target op default definitions listed below.\n+\n+\t* target.cc (process_target::post_create_inferior): Rename as ...\n+\t(process_stratum_target::post_create_inferior): ... this.\n+\t(process_target::prepare_to_access_memory): Rename as ...\n+\t(process_stratum_target::prepare_to_access_memory): ... this.\n+\t(process_target::done_accessing_memory): Rename as ...\n+\t(process_stratum_target::done_accessing_memory): ... this.\n+\t(process_target::look_up_symbols): Rename as ...\n+\t(process_stratum_target::look_up_symbols): ... this.\n+\t(process_target::supports_read_auxv): Rename as ...\n+\t(process_stratum_target::supports_read_auxv): ... this.\n+\t(process_target::read_auxv): Rename as ...\n+\t(process_stratum_target::read_auxv): ... this.\n+\t(process_target::supports_z_point_type): Rename as ...\n+\t(process_stratum_target::supports_z_point_type): ... this.\n+\t(process_target::insert_point): Rename as ...\n+\t(process_stratum_target::insert_point): ... this.\n+\t(process_target::remove_point): Rename as ...\n+\t(process_stratum_target::remove_point): ... this.\n+\t(process_target::stopped_by_sw_breakpoint): Rename as ...\n+\t(process_stratum_target::stopped_by_sw_breakpoint): ... this.\n+\t(process_target::supports_stopped_by_sw_breakpoint): Rename as ...\n+\t(process_stratum_target::supports_stopped_by_sw_breakpoint): ... this.\n+\t(process_target::stopped_by_hw_breakpoint): Rename as ...\n+\t(process_stratum_target::stopped_by_hw_breakpoint): ... this.\n+\t(process_target::supports_stopped_by_hw_breakpoint): Rename as ...\n+\t(process_stratum_target::supports_stopped_by_hw_breakpoint): ... this.\n+\t(process_target::supports_hardware_single_step): Rename as ...\n+\t(process_stratum_target::supports_hardware_single_step): ... this.\n+\t(process_target::stopped_by_watchpoint): Rename as ...\n+\t(process_stratum_target::stopped_by_watchpoint): ... this.\n+\t(process_target::stopped_data_address): Rename as ...\n+\t(process_stratum_target::stopped_data_address): ... this.\n+\t(process_target::supports_read_offsets): Rename as ...\n+\t(process_stratum_target::supports_read_offsets): ... this.\n+\t(process_target::read_offsets): Rename as ...\n+\t(process_stratum_target::read_offsets): ... this.\n+\t(process_target::supports_get_tls_address): Rename as ...\n+\t(process_stratum_target::supports_get_tls_address): ... this.\n+\t(process_target::get_tls_address): Rename as ...\n+\t(process_stratum_target::get_tls_address): ... this.\n+\t(process_target::hostio_last_error): Rename as ...\n+\t(process_stratum_target::hostio_last_error): ... this.\n+\t(process_target::supports_qxfer_osdata): Rename as ...\n+\t(process_stratum_target::supports_qxfer_osdata): ... this.\n+\t(process_target::qxfer_osdata): Rename as ...\n+\t(process_stratum_target::qxfer_osdata): ... this.\n+\t(process_target::supports_qxfer_siginfo): Rename as ...\n+\t(process_stratum_target::supports_qxfer_siginfo): ... this.\n+\t(process_target::qxfer_siginfo): Rename as ...\n+\t(process_stratum_target::qxfer_siginfo): ... this.\n+\t(process_target::supports_non_stop): Rename as ...\n+\t(process_stratum_target::supports_non_stop): ... this.\n+\t(process_target::async): Rename as ...\n+\t(process_stratum_target::async): ... this.\n+\t(process_target::start_non_stop): Rename as ...\n+\t(process_stratum_target::start_non_stop): ... this.\n+\t(process_target::supports_multi_process): Rename as ...\n+\t(process_stratum_target::supports_multi_process): ... this.\n+\t(process_target::supports_fork_events): Rename as ...\n+\t(process_stratum_target::supports_fork_events): ... this.\n+\t(process_target::supports_vfork_events): Rename as ...\n+\t(process_stratum_target::supports_vfork_events): ... this.\n+\t(process_target::supports_exec_events): Rename as ...\n+\t(process_stratum_target::supports_exec_events): ... this.\n+\t(process_target::handle_new_gdb_connection): Rename as ...\n+\t(process_stratum_target::handle_new_gdb_connection): ... this.\n+\t(process_target::handle_monitor_command): Rename as ...\n+\t(process_stratum_target::handle_monitor_command): ... this.\n+\t(process_target::core_of_thread): Rename as ...\n+\t(process_stratum_target::core_of_thread): ... this.\n+\t(process_target::supports_read_loadmap): Rename as ...\n+\t(process_stratum_target::supports_read_loadmap): ... this.\n+\t(process_target::read_loadmap): Rename as ...\n+\t(process_stratum_target::read_loadmap): ... this.\n+\t(process_target::process_qsupported): Rename as ...\n+\t(process_stratum_target::process_qsupported): ... this.\n+\t(process_target::supports_tracepoints): Rename as ...\n+\t(process_stratum_target::supports_tracepoints): ... this.\n+\t(process_target::read_pc): Rename as ...\n+\t(process_stratum_target::read_pc): ... this.\n+\t(process_target::write_pc): Rename as ...\n+\t(process_stratum_target::write_pc): ... this.\n+\t(process_target::supports_thread_stopped): Rename as ...\n+\t(process_stratum_target::supports_thread_stopped): ... this.\n+\t(process_target::thread_stopped): Rename as ...\n+\t(process_stratum_target::thread_stopped): ... this.\n+\t(process_target::supports_get_tib_address): Rename as ...\n+\t(process_stratum_target::supports_get_tib_address): ... this.\n+\t(process_target::get_tib_address): Rename as ...\n+\t(process_stratum_target::get_tib_address): ... this.\n+\t(process_target::pause_all): Rename as ...\n+\t(process_stratum_target::pause_all): ... this.\n+\t(process_target::unpause_all): Rename as ...\n+\t(process_stratum_target::unpause_all): ... this.\n+\t(process_target::stabilize_threads): Rename as ...\n+\t(process_stratum_target::stabilize_threads): ... this.\n+\t(process_target::supports_fast_tracepoints): Rename as ...\n+\t(process_stratum_target::supports_fast_tracepoints): ... this.\n+\t(process_target::get_min_fast_tracepoint_insn_len): Rename as ...\n+\t(process_stratum_target::get_min_fast_tracepoint_insn_len): ... this.\n+\t(process_target::emit_ops): Rename as ...\n+\t(process_stratum_target::emit_ops): ... this.\n+\t(process_target::supports_disable_randomization): Rename as ...\n+\t(process_stratum_target::supports_disable_randomization): ... this.\n+\t(process_target::supports_qxfer_libraries_svr4): Rename as ...\n+\t(process_stratum_target::supports_qxfer_libraries_svr4): ... this.\n+\t(process_target::qxfer_libraries_svr4): Rename as ...\n+\t(process_stratum_target::qxfer_libraries_svr4): ... this.\n+\t(process_target::supports_agent): Rename as ...\n+\t(process_stratum_target::supports_agent): ... this.\n+\t(process_target::enable_btrace): Rename as ...\n+\t(process_stratum_target::enable_btrace): ... this.\n+\t(process_target::disable_btrace): Rename as ...\n+\t(process_stratum_target::disable_btrace): ... this.\n+\t(process_target::read_btrace): Rename as ...\n+\t(process_stratum_target::read_btrace): ... this.\n+\t(process_target::read_btrace_conf): Rename as ...\n+\t(process_stratum_target::read_btrace_conf): ... this.\n+\t(process_target::supports_range_stepping): Rename as ...\n+\t(process_stratum_target::supports_range_stepping): ... this.\n+\t(process_target::supports_pid_to_exec_file): Rename as ...\n+\t(process_stratum_target::supports_pid_to_exec_file): ... this.\n+\t(process_target::pid_to_exec_file): Rename as ...\n+\t(process_stratum_target::pid_to_exec_file): ... this.\n+\t(process_target::supports_multifs): Rename as ...\n+\t(process_stratum_target::supports_multifs): ... this.\n+\t(process_target::multifs_open): Rename as ...\n+\t(process_stratum_target::multifs_open): ... this.\n+\t(process_target::multifs_unlink): Rename as ...\n+\t(process_stratum_target::multifs_unlink): ... this.\n+\t(process_target::multifs_readlink): Rename as ...\n+\t(process_stratum_target::multifs_readlink): ... this.\n+\t(process_target::breakpoint_kind_from_pc): Rename as ...\n+\t(process_stratum_target::breakpoint_kind_from_pc): ... this.\n+\t(process_target::breakpoint_kind_from_current_state): Rename as ...\n+\t(process_stratum_target::breakpoint_kind_from_current_state): ... this.\n+\t(process_target::thread_name): Rename as ...\n+\t(process_stratum_target::thread_name): ... this.\n+\t(process_target::thread_handle): Rename as ...\n+\t(process_stratum_target::thread_handle): ... this.\n+\t(process_target::supports_software_single_step): Rename as ...\n+\t(process_stratum_target::supports_software_single_step): ... this.\n+\t(process_target::supports_catch_syscall): Rename as ...\n+\t(process_stratum_target::supports_catch_syscall): ... this.\n+\t(process_target::get_ipa_tdesc_idx): Rename as ...\n+\t(process_stratum_target::get_ipa_tdesc_idx): ... this.\n+\n 2020-02-20  Pedro Alves  <palves@redhat.com>\n \n \t* target.cc (set_target_ops): Simply copy the given target pointer"
    },
    {
      "sha": "0185a3ba038a08a77a4739045ffa99163f021d7e",
      "filename": "gdbserver/hostio.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/hostio.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/hostio.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/hostio.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -196,7 +196,7 @@ require_valid_fd (int fd)\n static void\n hostio_error (char *own_buf)\n {\n-  the_target->pt->hostio_last_error (own_buf);\n+  the_target->hostio_last_error (own_buf);\n }\n \n static void\n@@ -272,7 +272,7 @@ handle_setfs (char *own_buf)\n      then there's no point in GDB sending \"vFile:setfs:\" packets.  We\n      reply with an empty packet (i.e. we pretend we don't understand\n      \"vFile:setfs:\") and that should stop GDB sending any more.  */\n-  if (!the_target->pt->supports_multifs ())\n+  if (!the_target->supports_multifs ())\n     {\n       own_buf[0] = '\\0';\n       return;\n@@ -320,8 +320,7 @@ handle_open (char *own_buf)\n   /* We do not need to convert MODE, since the fileio protocol\n      uses the standard values.  */\n   if (hostio_fs_pid != 0)\n-    fd = the_target->pt->multifs_open (hostio_fs_pid, filename,\n-\t\t\t\t       flags, mode);\n+    fd = the_target->multifs_open (hostio_fs_pid, filename, flags, mode);\n   else\n     fd = open (filename, flags, mode);\n \n@@ -540,7 +539,7 @@ handle_unlink (char *own_buf)\n     }\n \n   if (hostio_fs_pid != 0)\n-    ret = the_target->pt->multifs_unlink (hostio_fs_pid, filename);\n+    ret = the_target->multifs_unlink (hostio_fs_pid, filename);\n   else\n     ret = unlink (filename);\n \n@@ -570,9 +569,9 @@ handle_readlink (char *own_buf, int *new_packet_len)\n     }\n \n   if (hostio_fs_pid != 0)\n-    ret = the_target->pt->multifs_readlink (hostio_fs_pid, filename,\n-\t\t\t\t\t    linkname,\n-\t\t\t\t\t    sizeof (linkname) - 1);\n+    ret = the_target->multifs_readlink (hostio_fs_pid, filename,\n+\t\t\t\t\tlinkname,\n+\t\t\t\t\tsizeof (linkname) - 1);\n   else\n     ret = readlink (filename, linkname, sizeof (linkname) - 1);\n "
    },
    {
      "sha": "1ca0bfa8210d6412a4cebc083926dd6a6a7f6247",
      "filename": "gdbserver/linux-aarch32-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-aarch32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-aarch32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch32-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -192,13 +192,13 @@ arm_breakpoint_at (CORE_ADDR where)\n       /* Thumb mode.  */\n       unsigned short insn;\n \n-      the_target->pt->read_memory (where, (unsigned char *) &insn, 2);\n+      the_target->read_memory (where, (unsigned char *) &insn, 2);\n       if (insn == thumb_breakpoint)\n \treturn 1;\n \n       if (insn == thumb2_breakpoint[0])\n \t{\n-\t  the_target->pt->read_memory (where + 2, (unsigned char *) &insn, 2);\n+\t  the_target->read_memory (where + 2, (unsigned char *) &insn, 2);\n \t  if (insn == thumb2_breakpoint[1])\n \t    return 1;\n \t}\n@@ -208,7 +208,7 @@ arm_breakpoint_at (CORE_ADDR where)\n       /* ARM mode.  */\n       unsigned long insn;\n \n-      the_target->pt->read_memory (where, (unsigned char *) &insn, 4);\n+      the_target->read_memory (where, (unsigned char *) &insn, 4);\n       if (insn == arm_abi_breakpoint)\n \treturn 1;\n "
    },
    {
      "sha": "6ce5452945e2b184b92851bb581fa54e3504e8c8",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -192,8 +192,8 @@ aarch64_breakpoint_at (CORE_ADDR where)\n     {\n       gdb_byte insn[aarch64_breakpoint_len];\n \n-      the_target->pt->read_memory (where, (unsigned char *) &insn,\n-\t\t\t\t   aarch64_breakpoint_len);\n+      the_target->read_memory (where, (unsigned char *) &insn,\n+\t\t\t       aarch64_breakpoint_len);\n       if (memcmp (insn, aarch64_breakpoint, aarch64_breakpoint_len) == 0)\n \treturn 1;\n "
    },
    {
      "sha": "f60543eae94790c7b1fb3bb5e7b270c729dfe163",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -779,15 +779,15 @@ arm_sigreturn_next_pc (struct regcache *regcache, int svc_number,\n   gdb_assert (svc_number == __NR_sigreturn || svc_number == __NR_rt_sigreturn);\n \n   collect_register_by_name (regcache, \"sp\", &sp);\n-  the_target->pt->read_memory (sp, (unsigned char *) &sp_data, 4);\n+  the_target->read_memory (sp, (unsigned char *) &sp_data, 4);\n \n   pc_offset = arm_linux_sigreturn_next_pc_offset\n     (sp, sp_data, svc_number, __NR_sigreturn == svc_number ? 1 : 0);\n \n-  the_target->pt->read_memory (sp + pc_offset, (unsigned char *) &next_pc, 4);\n+  the_target->read_memory (sp + pc_offset, (unsigned char *) &next_pc, 4);\n \n   /* Set IS_THUMB according the CPSR saved on the stack.  */\n-  the_target->pt->read_memory (sp + pc_offset + 4, (unsigned char *) &cpsr, 4);\n+  the_target->read_memory (sp + pc_offset + 4, (unsigned char *) &cpsr, 4);\n   *is_thumb = ((cpsr & CPSR_T) != 0);\n \n   return next_pc;\n@@ -939,7 +939,7 @@ arm_get_syscall_trapinfo (struct regcache *regcache, int *sysno)\n \n       collect_register_by_name (regcache, \"pc\", &pc);\n \n-      if (the_target->pt->read_memory (pc - 4, (unsigned char *) &insn, 4))\n+      if (the_target->read_memory (pc - 4, (unsigned char *) &insn, 4))\n \t*sysno = UNKNOWN_SYSCALL;\n       else\n \t{"
    },
    {
      "sha": "81d84a1b5c8f56302fa93007dabd746f5ce46442",
      "filename": "gdbserver/linux-cris-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-cris-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-cris-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-cris-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -76,8 +76,8 @@ cris_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  the_target->pt->read_memory (where, (unsigned char *) &insn,\n-\t\t\t       cris_breakpoint_len);\n+  the_target->read_memory (where, (unsigned char *) &insn,\n+\t\t\t   cris_breakpoint_len);\n   if (insn == cris_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "06135efcfa276d0e46f51961ae2ebdd6abacabcf",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -72,8 +72,8 @@ cris_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  the_target->pt->read_memory (where, (unsigned char *) &insn,\n-\t\t\t       cris_breakpoint_len);\n+  the_target->read_memory (where, (unsigned char *) &insn,\n+\t\t\t   cris_breakpoint_len);\n   if (insn == cris_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "2872bc78da95111dac4f7ad661658110941fd371",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -711,7 +711,7 @@ handle_extended_wait (struct lwp_info **orig_event_lwp, int wstat)\n       syscalls_to_catch = std::move (proc->syscalls_to_catch);\n \n       /* Delete the execing process and all its threads.  */\n-      the_target->pt->mourn (proc);\n+      the_target->mourn (proc);\n       current_thread = NULL;\n \n       /* Create a new process/lwp/thread.  */\n@@ -3226,8 +3226,8 @@ linux_wait_1 (ptid_t ptid,\n       CORE_ADDR stop_pc = event_child->stop_pc;\n \n       breakpoint_kind =\n-\tthe_target->pt->breakpoint_kind_from_current_state (&stop_pc);\n-      the_target->pt->sw_breakpoint_from_kind (breakpoint_kind, &increment_pc);\n+\tthe_target->breakpoint_kind_from_current_state (&stop_pc);\n+      the_target->sw_breakpoint_from_kind (breakpoint_kind, &increment_pc);\n \n       if (debug_threads)\n \t{\n@@ -5720,7 +5720,7 @@ linux_process_target::store_registers (regcache *regcache, int regno)\n static int\n linux_read_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n {\n-  return the_target->pt->read_memory (memaddr, myaddr, len);\n+  return the_target->read_memory (memaddr, myaddr, len);\n }\n \n /* Copy LEN bytes from inferior's memory starting at MEMADDR\n@@ -7372,7 +7372,7 @@ linux_process_target::breakpoint_kind_from_pc (CORE_ADDR *pcptr)\n   if (the_low_target.breakpoint_kind_from_pc != NULL)\n     return (*the_low_target.breakpoint_kind_from_pc) (pcptr);\n   else\n-    return process_target::breakpoint_kind_from_pc (pcptr);\n+    return process_stratum_target::breakpoint_kind_from_pc (pcptr);\n }\n \n /* Implementation of the target_ops method \"sw_breakpoint_from_kind\".  */\n@@ -7472,7 +7472,7 @@ linux_get_auxv (int wordsize, CORE_ADDR match, CORE_ADDR *valp)\n \n   gdb_assert (wordsize == 4 || wordsize == 8);\n \n-  while (the_target->pt->read_auxv (offset, data, 2 * wordsize) == 2 * wordsize)\n+  while (the_target->read_auxv (offset, data, 2 * wordsize) == 2 * wordsize)\n     {\n       if (wordsize == 4)\n \t{\n@@ -7523,10 +7523,6 @@ linux_get_hwcap2 (int wordsize)\n \n static linux_process_target the_linux_target;\n \n-static process_stratum_target linux_target_ops = {\n-  &the_linux_target,\n-};\n-\n #ifdef HAVE_LINUX_REGSETS\n void\n initialize_regsets_info (struct regsets_info *info)\n@@ -7544,7 +7540,7 @@ initialize_low (void)\n   struct sigaction sigchld_action;\n \n   memset (&sigchld_action, 0, sizeof (sigchld_action));\n-  set_target_ops (&linux_target_ops);\n+  set_target_ops (&the_linux_target);\n \n   linux_ptrace_init_warnings ();\n   linux_proc_init_warnings ();"
    },
    {
      "sha": "b69ade98e41db7eea7d8d396b1496c736a03e636",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -266,7 +266,7 @@ extern struct linux_target_ops the_low_target;\n \n /* Target ops definitions for a Linux target.  */\n \n-class linux_process_target : public process_target\n+class linux_process_target : public process_stratum_target\n {\n public:\n "
    },
    {
      "sha": "74e0f3f74c6b1575303d105c5d2aa9556c446b28",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -70,8 +70,8 @@ m32r_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  the_target->pt->read_memory (where, (unsigned char *) &insn,\n-\t\t\t       m32r_breakpoint_len);\n+  the_target->read_memory (where, (unsigned char *) &insn,\n+\t\t\t   m32r_breakpoint_len);\n   if (insn == m32r_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "3caab02e5038e30a582e7b0911309a5bf37ac759",
      "filename": "gdbserver/linux-mips-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-mips-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-mips-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-mips-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -302,7 +302,7 @@ mips_breakpoint_at (CORE_ADDR where)\n {\n   unsigned int insn;\n \n-  the_target->pt->read_memory (where, (unsigned char *) &insn, 4);\n+  the_target->read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == mips_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "a8bb87a390efc1e9e242458401791f470205ab9b",
      "filename": "gdbserver/linux-nios2-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-nios2-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-nios2-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-nios2-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -131,12 +131,12 @@ nios2_breakpoint_at (CORE_ADDR where)\n \n   /* For R2, first check for the 2-byte CDX trap.n breakpoint encoding.  */\n #if defined(__nios2_arch__) && __nios2_arch__ == 2\n-  the_target->pt->read_memory (where, (unsigned char *) &insn, 2);\n+  the_target->read_memory (where, (unsigned char *) &insn, 2);\n   if (insn == CDX_BREAKPOINT)\n     return 1;\n #endif\n \n-  the_target->pt->read_memory (where, (unsigned char *) &insn, 4);\n+  the_target->read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == nios2_breakpoint)\n     return 1;\n   return 0;"
    },
    {
      "sha": "fd6d0369c48f688f56ddff13378ab88460529177",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -277,7 +277,7 @@ ppc_breakpoint_at (CORE_ADDR where)\n {\n   unsigned int insn;\n \n-  the_target->pt->read_memory (where, (unsigned char *) &insn, 4);\n+  the_target->read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == ppc_breakpoint)\n     return 1;\n   /* If necessary, recognize more trap instructions here.  GDB only uses"
    },
    {
      "sha": "f55402c3d41bb2c4529f1e7108a19572f56d09b2",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -76,7 +76,7 @@ sh_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  the_target->pt->read_memory (where, (unsigned char *) &insn, 2);\n+  the_target->read_memory (where, (unsigned char *) &insn, 2);\n   if (insn == sh_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "e6cb43209af4fd7cae0db880ca6407534e48fc98",
      "filename": "gdbserver/linux-sparc-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-sparc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-sparc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sparc-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -133,7 +133,7 @@ sparc_fill_gregset_to_stack (struct regcache *regcache, const void *buf)\n   for (i = l0_regno; i <= i7_regno; i++)\n     {\n       collect_register (regcache, i, tmp_reg_buf);\n-      the_target->pt->write_memory (addr, tmp_reg_buf, sizeof (tmp_reg_buf));\n+      the_target->write_memory (addr, tmp_reg_buf, sizeof (tmp_reg_buf));\n       addr += sizeof (tmp_reg_buf);\n     }\n }\n@@ -184,7 +184,7 @@ sparc_store_gregset_from_stack (struct regcache *regcache, const void *buf)\n \n   for (i = l0_regno; i <= i7_regno; i++)\n     {\n-      the_target->pt->read_memory (addr, tmp_reg_buf, sizeof (tmp_reg_buf));\n+      the_target->read_memory (addr, tmp_reg_buf, sizeof (tmp_reg_buf));\n       supply_register (regcache, i, tmp_reg_buf);\n       addr += sizeof (tmp_reg_buf);\n     }\n@@ -242,7 +242,7 @@ sparc_breakpoint_at (CORE_ADDR where)\n {\n   unsigned char insn[INSN_SIZE];\n \n-  the_target->pt->read_memory (where, (unsigned char *) insn, sizeof (insn));\n+  the_target->read_memory (where, (unsigned char *) insn, sizeof (insn));\n \n   if (memcmp (sparc_breakpoint, insn, sizeof (insn)) == 0)\n     return 1;"
    },
    {
      "sha": "ca7c983a8ac2f2a8a668e3d246a636db852591f0",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -241,7 +241,7 @@ tic6x_breakpoint_at (CORE_ADDR where)\n {\n   unsigned int insn;\n \n-  the_target->pt->read_memory (where, (unsigned char *) &insn, 4);\n+  the_target->read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == tic6x_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "1fe77a3fa5744cb08ce93b149d56f6a060811e42",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -85,7 +85,7 @@ tile_breakpoint_at (CORE_ADDR where)\n {\n   uint64_t insn;\n \n-  the_target->pt->read_memory (where, (unsigned char *) &insn, 8);\n+  the_target->read_memory (where, (unsigned char *) &insn, 8);\n   if (insn == tile_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "96818b85a867e3004c1d7c73bd49d8fc7010ca7e",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -515,7 +515,7 @@ x86_breakpoint_at (CORE_ADDR pc)\n {\n   unsigned char c;\n \n-  the_target->pt->read_memory (pc, &c, 1);\n+  the_target->read_memory (pc, &c, 1);\n   if (c == 0xCC)\n     return 1;\n "
    },
    {
      "sha": "510c9bd8879f782264621338391f2cbd880cd029",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -207,8 +207,8 @@ xtensa_breakpoint_at (CORE_ADDR where)\n {\n     unsigned long insn;\n \n-    the_target->pt->read_memory (where, (unsigned char *) &insn,\n-\t\t\t\t xtensa_breakpoint_len);\n+    the_target->read_memory (where, (unsigned char *) &insn,\n+\t\t\t     xtensa_breakpoint_len);\n     return memcmp((char *) &insn,\n \t\t  xtensa_breakpoint, xtensa_breakpoint_len) == 0;\n }"
    },
    {
      "sha": "9aa140c12988d73075099e3b56015b3128a67a4a",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -738,16 +738,10 @@ lynx_process_target::sw_breakpoint_from_kind (int kind, int *size)\n \n static lynx_process_target the_lynx_target;\n \n-/* The LynxOS target_ops vector.  */\n-\n-static process_stratum_target lynx_target_ops = {\n-  &the_lynx_target,\n-};\n-\n void\n initialize_low (void)\n {\n-  set_target_ops (&lynx_target_ops);\n+  set_target_ops (&the_lynx_target);\n   the_low_target.arch_setup ();\n }\n "
    },
    {
      "sha": "fa975a21f30cbf42eec06e3f62abfdda6f744390",
      "filename": "gdbserver/lynx-low.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/lynx-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/lynx-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.h?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -54,7 +54,7 @@ extern struct lynx_target_ops the_low_target;\n \n /* Target ops definitions for a LynxOS target.  */\n \n-class lynx_process_target : public process_target\n+class lynx_process_target : public process_stratum_target\n {\n public:\n "
    },
    {
      "sha": "6b7af3a7d337f0b56c46a2c7812bea3cf539e613",
      "filename": "gdbserver/mem-break.cc",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/mem-break.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/mem-break.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/mem-break.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -223,7 +223,7 @@ bp_size (struct raw_breakpoint *bp)\n {\n   int size = 0;\n \n-  the_target->pt->sw_breakpoint_from_kind (bp->kind, &size);\n+  the_target->sw_breakpoint_from_kind (bp->kind, &size);\n   return size;\n }\n \n@@ -234,7 +234,7 @@ bp_opcode (struct raw_breakpoint *bp)\n {\n   int size = 0;\n \n-  return the_target->pt->sw_breakpoint_from_kind (bp->kind, &size);\n+  return the_target->sw_breakpoint_from_kind (bp->kind, &size);\n }\n \n /* See mem-break.h.  */\n@@ -380,8 +380,8 @@ insert_memory_breakpoint (struct raw_breakpoint *bp)\n     {\n       memcpy (bp->old_data, buf, bp_size (bp));\n \n-      err = the_target->pt->write_memory (bp->pc, bp_opcode (bp),\n-\t\t\t\t\t  bp_size (bp));\n+      err = the_target->write_memory (bp->pc, bp_opcode (bp),\n+\t\t\t\t      bp_size (bp));\n       if (err != 0)\n \t{\n \t  if (debug_threads)\n@@ -460,7 +460,7 @@ set_raw_breakpoint_at (enum raw_bkpt_type type, CORE_ADDR where, int kind,\n \n   if (!bp->inserted)\n     {\n-      *err = the_target->pt->insert_point (bp->raw_type, bp->pc, bp->kind, bp);\n+      *err = the_target->insert_point (bp->raw_type, bp->pc, bp->kind, bp);\n       if (*err != 0)\n \t{\n \t  if (debug_threads)\n@@ -890,8 +890,8 @@ delete_raw_breakpoint (struct process_info *proc, struct raw_breakpoint *todel)\n \n \t      *bp_link = bp->next;\n \n-\t      ret = the_target->pt->remove_point (bp->raw_type, bp->pc,\n-\t\t\t\t\t\t  bp->kind, bp);\n+\t      ret = the_target->remove_point (bp->raw_type, bp->pc,\n+\t\t\t\t\t      bp->kind, bp);\n \t      if (ret != 0)\n \t\t{\n \t\t  /* Something went wrong, relink the breakpoint.  */\n@@ -1005,7 +1005,7 @@ static int\n z_type_supported (char z_type)\n {\n   return (z_type >= '0' && z_type <= '4'\n-\t  && the_target->pt->supports_z_point_type (z_type));\n+\t  && the_target->supports_z_point_type (z_type));\n }\n \n /* Create a new GDB breakpoint of type Z_TYPE at ADDR with kind KIND.\n@@ -1532,7 +1532,7 @@ uninsert_raw_breakpoint (struct raw_breakpoint *bp)\n \n       bp->inserted = 0;\n \n-      err = the_target->pt->remove_point (bp->raw_type, bp->pc, bp->kind, bp);\n+      err = the_target->remove_point (bp->raw_type, bp->pc, bp->kind, bp);\n       if (err != 0)\n \t{\n \t  bp->inserted = 1;\n@@ -1621,7 +1621,7 @@ reinsert_raw_breakpoint (struct raw_breakpoint *bp)\n   if (bp->inserted)\n     return;\n \n-  err = the_target->pt->insert_point (bp->raw_type, bp->pc, bp->kind, bp);\n+  err = the_target->insert_point (bp->raw_type, bp->pc, bp->kind, bp);\n   if (err == 0)\n     bp->inserted = 1;\n   else if (debug_threads)\n@@ -1856,7 +1856,7 @@ validate_inserted_breakpoint (struct raw_breakpoint *bp)\n   gdb_assert (bp->raw_type == raw_bkpt_type_sw);\n \n   buf = (unsigned char *) alloca (bp_size (bp));\n-  err = the_target->pt->read_memory (bp->pc, buf, bp_size (bp));\n+  err = the_target->read_memory (bp->pc, buf, bp_size (bp));\n   if (err || memcmp (buf, bp_opcode (bp), bp_size (bp)) != 0)\n     {\n       /* Tag it as gone.  */"
    },
    {
      "sha": "642fe9ffd21321564681a7095e5656c85835c116",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -946,11 +946,6 @@ nto_process_target::sw_breakpoint_from_kind (int kind, int *size)\n \n static nto_process_target the_nto_target;\n \n-static process_stratum_target nto_target_ops = {\n-  &the_nto_target,\n-};\n-\n-\n /* Global function called by server.c.  Initializes QNX Neutrino\n    gdbserver.  */\n \n@@ -960,7 +955,7 @@ initialize_low (void)\n   sigset_t set;\n \n   TRACE (\"%s\\n\", __func__);\n-  set_target_ops (&nto_target_ops);\n+  set_target_ops (&the_nto_target);\n \n   /* We use SIGUSR1 to gain control after we block waiting for a process.\n      We use sigwaitevent to wait.  */"
    },
    {
      "sha": "e26dcab331d28e8f77b7e5ca7aad2ddfa1ee2e3d",
      "filename": "gdbserver/nto-low.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/nto-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/nto-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.h?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -44,7 +44,7 @@ extern struct nto_target_ops the_low_target;\n \n /* Target ops definitions for a QNX Neutrino target.  */\n \n-class nto_process_target : public process_target\n+class nto_process_target : public process_stratum_target\n {\n public:\n "
    },
    {
      "sha": "33d38879dc6fd5028ee0fd127c3d996fcb1cff9c",
      "filename": "gdbserver/regcache.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/regcache.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/regcache.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/regcache.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -477,13 +477,13 @@ collect_register_by_name (struct regcache *regcache,\n CORE_ADDR\n regcache_read_pc (struct regcache *regcache)\n {\n-  return the_target->pt->read_pc (regcache);\n+  return the_target->read_pc (regcache);\n }\n \n void\n regcache_write_pc (struct regcache *regcache, CORE_ADDR pc)\n {\n-  the_target->pt->write_pc (regcache, pc);\n+  the_target->write_pc (regcache, pc);\n }\n \n #endif"
    },
    {
      "sha": "6b547493a71a91ab02318fa8ad475c0387a26d04",
      "filename": "gdbserver/remote-utils.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/remote-utils.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/remote-utils.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/remote-utils.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -710,7 +710,7 @@ putpkt_binary_1 (char *buf, int cnt, int is_notif)\n \n       /* Check for an input interrupt while we're here.  */\n       if (cc == '\\003' && current_thread != NULL)\n-\tthe_target->pt->request_interrupt ();\n+\tthe_target->request_interrupt ();\n     }\n   while (cc != '+');\n \n@@ -779,7 +779,7 @@ input_interrupt (int unused)\n \t  return;\n \t}\n \n-      the_target->pt->request_interrupt ();\n+      the_target->request_interrupt ();\n     }\n }\n \n@@ -986,7 +986,7 @@ getpkt (char *buf)\n \t     check for an input interrupt.  */\n \t  if (c == '\\003')\n \t    {\n-\t      the_target->pt->request_interrupt ();\n+\t      the_target->request_interrupt ();\n \t      continue;\n \t    }\n \n@@ -1076,7 +1076,7 @@ getpkt (char *buf)\n     {\n       /* Consume the interrupt character in the buffer.  */\n       readchar ();\n-      the_target->pt->request_interrupt ();\n+      the_target->request_interrupt ();\n     }\n \n   return bp - buf;\n@@ -1214,15 +1214,15 @@ prepare_resume_reply (char *buf, ptid_t ptid,\n \n \tregcache = get_thread_regcache (current_thread, 1);\n \n-\tif (the_target->pt->stopped_by_watchpoint ())\n+\tif (the_target->stopped_by_watchpoint ())\n \t  {\n \t    CORE_ADDR addr;\n \t    int i;\n \n \t    memcpy (buf, \"watch:\", 6);\n \t    buf += 6;\n \n-\t    addr = the_target->pt->stopped_data_address ();\n+\t    addr = the_target->stopped_data_address ();\n \n \t    /* Convert each byte of the address into two hexadecimal\n \t       chars.  Note that we take sizeof (void *) instead of"
    },
    {
      "sha": "a4cb1eb41819956b4272001b2745143b652d0add",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 34,
      "deletions": 34,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -740,7 +740,7 @@ handle_general_set (char *own_buf)\n \t}\n \n       req_str = req ? \"non-stop\" : \"all-stop\";\n-      if (the_target->pt->start_non_stop (req == 1) != 0)\n+      if (the_target->start_non_stop (req == 1) != 0)\n \t{\n \t  fprintf (stderr, \"Setting %s mode failed\\n\", req_str);\n \t  write_enn (own_buf);\n@@ -1234,7 +1234,7 @@ handle_detach (char *own_buf)\n \t    debug_printf (\"Forcing non-stop mode\\n\");\n \n \t  non_stop = true;\n-\t  the_target->pt->start_non_stop (true);\n+\t  the_target->start_non_stop (true);\n \t}\n \n       process->gdb_detached = 1;\n@@ -1442,13 +1442,13 @@ handle_qxfer_auxv (const char *annex,\n \t\t   gdb_byte *readbuf, const gdb_byte *writebuf,\n \t\t   ULONGEST offset, LONGEST len)\n {\n-  if (!the_target->pt->supports_read_auxv () || writebuf != NULL)\n+  if (!the_target->supports_read_auxv () || writebuf != NULL)\n     return -2;\n \n   if (annex[0] != '\\0' || current_thread == NULL)\n     return -1;\n \n-  return the_target->pt->read_auxv (offset, readbuf, len);\n+  return the_target->read_auxv (offset, readbuf, len);\n }\n \n /* Handle qXfer:exec-file:read.  */\n@@ -1462,7 +1462,7 @@ handle_qxfer_exec_file (const char *annex,\n   ULONGEST pid;\n   int total_len;\n \n-  if (!the_target->pt->supports_pid_to_exec_file () || writebuf != NULL)\n+  if (!the_target->supports_pid_to_exec_file () || writebuf != NULL)\n     return -2;\n \n   if (annex[0] == '\\0')\n@@ -1482,7 +1482,7 @@ handle_qxfer_exec_file (const char *annex,\n   if (pid <= 0)\n     return -1;\n \n-  file = the_target->pt->pid_to_exec_file (pid);\n+  file = the_target->pid_to_exec_file (pid);\n   if (file == NULL)\n     return -1;\n \n@@ -1575,11 +1575,11 @@ handle_qxfer_libraries_svr4 (const char *annex,\n     return -2;\n \n   if (current_thread == NULL\n-      || !the_target->pt->supports_qxfer_libraries_svr4 ())\n+      || !the_target->supports_qxfer_libraries_svr4 ())\n     return -1;\n \n-  return the_target->pt->qxfer_libraries_svr4 (annex, readbuf, writebuf,\n-\t\t\t\t\t       offset, len);\n+  return the_target->qxfer_libraries_svr4 (annex, readbuf, writebuf,\n+\t\t\t\t\t   offset, len);\n }\n \n /* Handle qXfer:osadata:read.  */\n@@ -1589,10 +1589,10 @@ handle_qxfer_osdata (const char *annex,\n \t\t     gdb_byte *readbuf, const gdb_byte *writebuf,\n \t\t     ULONGEST offset, LONGEST len)\n {\n-  if (!the_target->pt->supports_qxfer_osdata () || writebuf != NULL)\n+  if (!the_target->supports_qxfer_osdata () || writebuf != NULL)\n     return -2;\n \n-  return the_target->pt->qxfer_osdata (annex, readbuf, NULL, offset, len);\n+  return the_target->qxfer_osdata (annex, readbuf, NULL, offset, len);\n }\n \n /* Handle qXfer:siginfo:read and qXfer:siginfo:write.  */\n@@ -1602,13 +1602,13 @@ handle_qxfer_siginfo (const char *annex,\n \t\t      gdb_byte *readbuf, const gdb_byte *writebuf,\n \t\t      ULONGEST offset, LONGEST len)\n {\n-  if (!the_target->pt->supports_qxfer_siginfo ())\n+  if (!the_target->supports_qxfer_siginfo ())\n     return -2;\n \n   if (annex[0] != '\\0' || current_thread == NULL)\n     return -1;\n \n-  return the_target->pt->qxfer_siginfo (annex, readbuf, writebuf, offset, len);\n+  return the_target->qxfer_siginfo (annex, readbuf, writebuf, offset, len);\n }\n \n /* Handle qXfer:statictrace:read.  */\n@@ -1794,13 +1794,13 @@ static int\n handle_qxfer_fdpic (const char *annex, gdb_byte *readbuf,\n \t\t    const gdb_byte *writebuf, ULONGEST offset, LONGEST len)\n {\n-  if (!the_target->pt->supports_read_loadmap ())\n+  if (!the_target->supports_read_loadmap ())\n     return -2;\n \n   if (current_thread == NULL)\n     return -1;\n \n-  return the_target->pt->read_loadmap (annex, offset, readbuf, len);\n+  return the_target->read_loadmap (annex, offset, readbuf, len);\n }\n \n /* Handle qXfer:btrace:read.  */\n@@ -2195,7 +2195,7 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n \ttracepoint_look_up_symbols ();\n \n       if (current_thread != NULL)\n-\tthe_target->pt->look_up_symbols ();\n+\tthe_target->look_up_symbols ();\n \n       current_thread = save_thread;\n \n@@ -2236,13 +2236,13 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n \t}\n     }\n \n-  if (the_target->pt->supports_read_offsets ()\n+  if (the_target->supports_read_offsets ()\n       && strcmp (\"qOffsets\", own_buf) == 0)\n     {\n       CORE_ADDR text, data;\n \n       require_running_or_return (own_buf);\n-      if (the_target->pt->read_offsets (&text, &data))\n+      if (the_target->read_offsets (&text, &data))\n \tsprintf (own_buf, \"Text=%lX;Data=%lX;Bss=%lX\",\n \t\t (long)text, (long)data, (long)data);\n       else\n@@ -2366,7 +2366,7 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n       if (target_supports_catch_syscall ())\n \tstrcat (own_buf, \";QCatchSyscalls+\");\n \n-      if (the_target->pt->supports_qxfer_libraries_svr4 ())\n+      if (the_target->supports_qxfer_libraries_svr4 ())\n \tstrcat (own_buf, \";qXfer:libraries-svr4:read+\"\n \t\t\";augmented-libraries-svr4-read+\");\n       else\n@@ -2376,13 +2376,13 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n \t  strcat (own_buf, \";qXfer:libraries:read+\");\n \t}\n \n-      if (the_target->pt->supports_read_auxv ())\n+      if (the_target->supports_read_auxv ())\n \tstrcat (own_buf, \";qXfer:auxv:read+\");\n \n-      if (the_target->pt->supports_qxfer_siginfo ())\n+      if (the_target->supports_qxfer_siginfo ())\n \tstrcat (own_buf, \";qXfer:siginfo:read+;qXfer:siginfo:write+\");\n \n-      if (the_target->pt->supports_read_loadmap ())\n+      if (the_target->supports_read_loadmap ())\n \tstrcat (own_buf, \";qXfer:fdpic:read+\");\n \n       /* We always report qXfer:features:read, as targets may\n@@ -2394,7 +2394,7 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n       if (cs.transport_is_reliable)\n \tstrcat (own_buf, \";QStartNoAckMode+\");\n \n-      if (the_target->pt->supports_qxfer_osdata ())\n+      if (the_target->supports_qxfer_osdata ())\n \tstrcat (own_buf, \";qXfer:osdata:read+\");\n \n       if (target_supports_multi_process ())\n@@ -2452,7 +2452,7 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n       if (target_supports_stopped_by_hw_breakpoint ())\n \tstrcat (own_buf, \";hwbreak+\");\n \n-      if (the_target->pt->supports_pid_to_exec_file ())\n+      if (the_target->supports_pid_to_exec_file ())\n \tstrcat (own_buf, \";qXfer:exec-file:read+\");\n \n       strcat (own_buf, \";vContSupported+\");\n@@ -2469,7 +2469,7 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n     }\n \n   /* Thread-local storage support.  */\n-  if (the_target->pt->supports_get_tls_address ()\n+  if (the_target->supports_get_tls_address ()\n       && startswith (own_buf, \"qGetTLSAddr:\"))\n     {\n       char *p = own_buf + 12;\n@@ -2515,8 +2515,8 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n \t  if (thread == NULL)\n \t    err = 2;\n \t  else\n-\t    err = the_target->pt->get_tls_address (thread, parts[0], parts[1],\n-\t\t\t\t\t\t   &address);\n+\t    err = the_target->get_tls_address (thread, parts[0], parts[1],\n+\t\t\t\t\t       &address);\n \t}\n \n       if (err == 0)\n@@ -2534,15 +2534,15 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n     }\n \n   /* Windows OS Thread Information Block address support.  */\n-  if (the_target->pt->supports_get_tib_address ()\n+  if (the_target->supports_get_tib_address ()\n       && startswith (own_buf, \"qGetTIBAddr:\"))\n     {\n       const char *annex;\n       int n;\n       CORE_ADDR tlb;\n       ptid_t ptid = read_ptid (own_buf + 12, &annex);\n \n-      n = the_target->pt->get_tib_address (ptid, &tlb);\n+      n = the_target->get_tib_address (ptid, &tlb);\n       if (n == 1)\n \t{\n \t  strcpy (own_buf, paddress(tlb));\n@@ -2579,7 +2579,7 @@ handle_query (char *own_buf, int packet_len, int *new_packet_len_p)\n \n       write_ok (own_buf);\n \n-      if (the_target->pt->handle_monitor_command (mon) == 0)\n+      if (the_target->handle_monitor_command (mon) == 0)\n \t/* Default processing.  */\n \thandle_monitor_command (mon, own_buf);\n \n@@ -2848,7 +2848,7 @@ resume (struct thread_resume *actions, size_t num_actions)\n       enable_async_io ();\n     }\n \n-  the_target->pt->resume (actions, num_actions);\n+  the_target->resume (actions, num_actions);\n \n   if (non_stop)\n     write_ok (cs.own_buf);\n@@ -3089,7 +3089,7 @@ handle_v_requests (char *own_buf, int packet_len, int *new_packet_len)\n     {\n       if (strcmp (own_buf, \"vCtrlC\") == 0)\n \t{\n-\t  the_target->pt->request_interrupt ();\n+\t  the_target->request_interrupt ();\n \t  write_ok (own_buf);\n \t  return;\n \t}\n@@ -3219,7 +3219,7 @@ queue_stop_reply_callback (thread_info *thread)\n {\n   /* For now, assume targets that don't have this callback also don't\n      manage the thread's last_status field.  */\n-  if (!the_target->pt->supports_thread_stopped ())\n+  if (!the_target->supports_thread_stopped ())\n     {\n       struct vstop_notif *new_notif = new struct vstop_notif;\n \n@@ -3886,7 +3886,7 @@ captured_main (int argc, char *argv[])\n \t\t     down without informing GDB.  */\n \t\t  if (!non_stop)\n \t\t    {\n-\t\t      if (the_target->pt->start_non_stop (true))\n+\t\t      if (the_target->start_non_stop (true))\n \t\t\tnon_stop = 1;\n \n \t\t      /* Detaching implicitly resumes all threads;"
    },
    {
      "sha": "b5190e1f52a28f09e9ac019b4d009dfb23bdb47f",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 110,
      "deletions": 102,
      "changes": 212,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -62,15 +62,15 @@ prepare_to_access_memory (void)\n      it.  */\n   prev_general_thread = cs.general_thread;\n \n-  int res = the_target->pt->prepare_to_access_memory ();\n+  int res = the_target->prepare_to_access_memory ();\n   if (res != 0)\n     return res;\n \n   for_each_thread (prev_general_thread.pid (), [&] (thread_info *thread)\n     {\n       if (mythread_alive (thread->id))\n \t{\n-\t  if (stopped == NULL && the_target->pt->supports_thread_stopped ()\n+\t  if (stopped == NULL && the_target->supports_thread_stopped ()\n \t      && target_thread_stopped (thread))\n \t    stopped = thread;\n \n@@ -114,7 +114,7 @@ done_accessing_memory (void)\n {\n   client_state &cs = get_client_state ();\n \n-  the_target->pt->done_accessing_memory ();\n+  the_target->done_accessing_memory ();\n \n   /* Restore the previous selected thread.  */\n   cs.general_thread = prev_general_thread;\n@@ -125,7 +125,7 @@ int\n read_inferior_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n {\n   int res;\n-  res = the_target->pt->read_memory (memaddr, myaddr, len);\n+  res = the_target->read_memory (memaddr, myaddr, len);\n   check_mem_read (memaddr, myaddr, len);\n   return res;\n }\n@@ -156,7 +156,7 @@ target_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n      update it.  */\n   gdb::byte_vector buffer (myaddr, myaddr + len);\n   check_mem_write (memaddr, buffer.data (), myaddr, len);\n-  return the_target->pt->write_memory (memaddr, buffer.data (), len);\n+  return the_target->write_memory (memaddr, buffer.data (), len);\n }\n \n ptid_t\n@@ -210,7 +210,7 @@ target_stop_and_wait (ptid_t ptid)\n   resume_info.thread = ptid;\n   resume_info.kind = resume_stop;\n   resume_info.sig = GDB_SIGNAL_0;\n-  the_target->pt->resume (&resume_info, 1);\n+  the_target->resume (&resume_info, 1);\n \n   non_stop = true;\n   mywait (ptid, &status, 0, 0);\n@@ -222,15 +222,15 @@ target_stop_and_wait (ptid_t ptid)\n ptid_t\n target_wait (ptid_t ptid, struct target_waitstatus *status, int options)\n {\n-  return the_target->pt->wait (ptid, status, options);\n+  return the_target->wait (ptid, status, options);\n }\n \n /* See target/target.h.  */\n \n void\n target_mourn_inferior (ptid_t ptid)\n {\n-  the_target->pt->mourn (find_process_pid (ptid.pid ()));\n+  the_target->mourn (find_process_pid (ptid.pid ()));\n }\n \n /* See target/target.h.  */\n@@ -243,7 +243,7 @@ target_continue_no_signal (ptid_t ptid)\n   resume_info.thread = ptid;\n   resume_info.kind = resume_continue;\n   resume_info.sig = GDB_SIGNAL_0;\n-  the_target->pt->resume (&resume_info, 1);\n+  the_target->resume (&resume_info, 1);\n }\n \n /* See target/target.h.  */\n@@ -256,15 +256,15 @@ target_continue (ptid_t ptid, enum gdb_signal signal)\n   resume_info.thread = ptid;\n   resume_info.kind = resume_continue;\n   resume_info.sig = gdb_signal_to_host (signal);\n-  the_target->pt->resume (&resume_info, 1);\n+  the_target->resume (&resume_info, 1);\n }\n \n /* See target/target.h.  */\n \n int\n target_supports_multi_process (void)\n {\n-  return the_target->pt->supports_multi_process ();\n+  return the_target->supports_multi_process ();\n }\n \n void\n@@ -302,7 +302,7 @@ kill_inferior (process_info *proc)\n {\n   gdb_agent_about_to_close (proc->pid);\n \n-  return the_target->pt->kill (proc);\n+  return the_target->kill (proc);\n }\n \n /* Define it.  */\n@@ -357,177 +357,183 @@ target_terminal::info (const char *arg, int from_tty)\n    See target.h for definitions.  */\n \n void\n-process_target::post_create_inferior ()\n+process_stratum_target::post_create_inferior ()\n {\n   /* Nop.  */\n }\n \n int\n-process_target::prepare_to_access_memory ()\n+process_stratum_target::prepare_to_access_memory ()\n {\n   return 0;\n }\n \n void\n-process_target::done_accessing_memory ()\n+process_stratum_target::done_accessing_memory ()\n {\n   /* Nop.  */\n }\n \n void\n-process_target::look_up_symbols ()\n+process_stratum_target::look_up_symbols ()\n {\n   /* Nop.  */\n }\n \n bool\n-process_target::supports_read_auxv ()\n+process_stratum_target::supports_read_auxv ()\n {\n   return false;\n }\n \n int\n-process_target::read_auxv (CORE_ADDR offset, unsigned char *myaddr,\n-\t\t\t   unsigned int len)\n+process_stratum_target::read_auxv (CORE_ADDR offset, unsigned char *myaddr,\n+\t\t\t\t   unsigned int len)\n {\n   gdb_assert_not_reached (\"target op read_auxv not supported\");\n }\n \n bool\n-process_target::supports_z_point_type (char z_type)\n+process_stratum_target::supports_z_point_type (char z_type)\n {\n   return false;\n }\n \n int\n-process_target::insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n-\t\t\t      int size, raw_breakpoint *bp)\n+process_stratum_target::insert_point (enum raw_bkpt_type type,\n+\t\t\t\t      CORE_ADDR addr,\n+\t\t\t\t      int size, raw_breakpoint *bp)\n {\n   return 1;\n }\n \n int\n-process_target::remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n-\t\t\t      int size, raw_breakpoint *bp)\n+process_stratum_target::remove_point (enum raw_bkpt_type type,\n+\t\t\t\t      CORE_ADDR addr,\n+\t\t\t\t      int size, raw_breakpoint *bp)\n {\n   return 1;\n }\n \n bool\n-process_target::stopped_by_sw_breakpoint ()\n+process_stratum_target::stopped_by_sw_breakpoint ()\n {\n   return false;\n }\n \n bool\n-process_target::supports_stopped_by_sw_breakpoint ()\n+process_stratum_target::supports_stopped_by_sw_breakpoint ()\n {\n   return false;\n }\n \n bool\n-process_target::stopped_by_hw_breakpoint ()\n+process_stratum_target::stopped_by_hw_breakpoint ()\n {\n   return false;\n }\n \n bool\n-process_target::supports_stopped_by_hw_breakpoint ()\n+process_stratum_target::supports_stopped_by_hw_breakpoint ()\n {\n   return false;\n }\n \n bool\n-process_target::supports_hardware_single_step ()\n+process_stratum_target::supports_hardware_single_step ()\n {\n   return false;\n }\n \n bool\n-process_target::stopped_by_watchpoint ()\n+process_stratum_target::stopped_by_watchpoint ()\n {\n   return false;\n }\n \n CORE_ADDR\n-process_target::stopped_data_address ()\n+process_stratum_target::stopped_data_address ()\n {\n   return 0;\n }\n \n bool\n-process_target::supports_read_offsets ()\n+process_stratum_target::supports_read_offsets ()\n {\n   return false;\n }\n \n int\n-process_target::read_offsets (CORE_ADDR *text, CORE_ADDR *data)\n+process_stratum_target::read_offsets (CORE_ADDR *text, CORE_ADDR *data)\n {\n   gdb_assert_not_reached (\"target op read_offsets not supported\");\n }\n \n bool\n-process_target::supports_get_tls_address ()\n+process_stratum_target::supports_get_tls_address ()\n {\n   return false;\n }\n \n int\n-process_target::get_tls_address (thread_info *thread, CORE_ADDR offset,\n-\t\t\t\t CORE_ADDR load_module, CORE_ADDR *address)\n+process_stratum_target::get_tls_address (thread_info *thread,\n+\t\t\t\t\t CORE_ADDR offset,\n+\t\t\t\t\t CORE_ADDR load_module,\n+\t\t\t\t\t CORE_ADDR *address)\n {\n   gdb_assert_not_reached (\"target op get_tls_address not supported\");\n }\n \n void\n-process_target::hostio_last_error (char *buf)\n+process_stratum_target::hostio_last_error (char *buf)\n {\n   hostio_last_error_from_errno (buf);\n }\n \n bool\n-process_target::supports_qxfer_osdata ()\n+process_stratum_target::supports_qxfer_osdata ()\n {\n   return false;\n }\n \n int\n-process_target::qxfer_osdata (const char *annex, unsigned char *readbuf,\n-\t\t\t      unsigned const char *writebuf,\n-\t\t\t      CORE_ADDR offset, int len)\n+process_stratum_target::qxfer_osdata (const char *annex,\n+\t\t\t\t      unsigned char *readbuf,\n+\t\t\t\t      unsigned const char *writebuf,\n+\t\t\t\t      CORE_ADDR offset, int len)\n {\n   gdb_assert_not_reached (\"target op qxfer_osdata not supported\");\n }\n \n bool\n-process_target::supports_qxfer_siginfo ()\n+process_stratum_target::supports_qxfer_siginfo ()\n {\n   return false;\n }\n \n int\n-process_target::qxfer_siginfo (const char *annex, unsigned char *readbuf,\n-\t\t\t       unsigned const char *writebuf,\n-\t\t\t       CORE_ADDR offset, int len)\n+process_stratum_target::qxfer_siginfo (const char *annex,\n+\t\t\t\t       unsigned char *readbuf,\n+\t\t\t\t       unsigned const char *writebuf,\n+\t\t\t\t       CORE_ADDR offset, int len)\n {\n   gdb_assert_not_reached (\"target op qxfer_siginfo not supported\");\n }\n \n bool\n-process_target::supports_non_stop ()\n+process_stratum_target::supports_non_stop ()\n {\n   return false;\n }\n \n bool\n-process_target::async (bool enable)\n+process_stratum_target::async (bool enable)\n {\n   return false;\n }\n \n int\n-process_target::start_non_stop (bool enable)\n+process_stratum_target::start_non_stop (bool enable)\n {\n   if (enable)\n     return -1;\n@@ -536,134 +542,136 @@ process_target::start_non_stop (bool enable)\n }\n \n bool\n-process_target::supports_multi_process ()\n+process_stratum_target::supports_multi_process ()\n {\n   return false;\n }\n \n bool\n-process_target::supports_fork_events ()\n+process_stratum_target::supports_fork_events ()\n {\n   return false;\n }\n \n bool\n-process_target::supports_vfork_events ()\n+process_stratum_target::supports_vfork_events ()\n {\n   return false;\n }\n \n bool\n-process_target::supports_exec_events ()\n+process_stratum_target::supports_exec_events ()\n {\n   return false;\n }\n \n void\n-process_target::handle_new_gdb_connection ()\n+process_stratum_target::handle_new_gdb_connection ()\n {\n   /* Nop.  */\n }\n \n int\n-process_target::handle_monitor_command (char *mon)\n+process_stratum_target::handle_monitor_command (char *mon)\n {\n   return 0;\n }\n \n int\n-process_target::core_of_thread (ptid_t ptid)\n+process_stratum_target::core_of_thread (ptid_t ptid)\n {\n   return -1;\n }\n \n bool\n-process_target::supports_read_loadmap ()\n+process_stratum_target::supports_read_loadmap ()\n {\n   return false;\n }\n \n int\n-process_target::read_loadmap (const char *annex, CORE_ADDR offset,\n-\t\t\t      unsigned char *myaddr, unsigned int len)\n+process_stratum_target::read_loadmap (const char *annex,\n+\t\t\t\t      CORE_ADDR offset,\n+\t\t\t\t      unsigned char *myaddr,\n+\t\t\t\t      unsigned int len)\n {\n   gdb_assert_not_reached (\"target op read_loadmap not supported\");\n }\n \n void\n-process_target::process_qsupported (char **features, int count)\n+process_stratum_target::process_qsupported (char **features, int count)\n {\n   /* Nop.  */\n }\n \n bool\n-process_target::supports_tracepoints ()\n+process_stratum_target::supports_tracepoints ()\n {\n   return false;\n }\n \n CORE_ADDR\n-process_target::read_pc (regcache *regcache)\n+process_stratum_target::read_pc (regcache *regcache)\n {\n   gdb_assert_not_reached (\"process_target::read_pc: Unable to find PC\");\n }\n \n void\n-process_target::write_pc (regcache *regcache, CORE_ADDR pc)\n+process_stratum_target::write_pc (regcache *regcache, CORE_ADDR pc)\n {\n   gdb_assert_not_reached (\"process_target::write_pc: Unable to update PC\");\n }\n \n bool\n-process_target::supports_thread_stopped ()\n+process_stratum_target::supports_thread_stopped ()\n {\n   return false;\n }\n \n bool\n-process_target::thread_stopped (thread_info *thread)\n+process_stratum_target::thread_stopped (thread_info *thread)\n {\n   gdb_assert_not_reached (\"target op thread_stopped not supported\");\n }\n \n bool\n-process_target::supports_get_tib_address ()\n+process_stratum_target::supports_get_tib_address ()\n {\n   return false;\n }\n \n int\n-process_target::get_tib_address (ptid_t ptid, CORE_ADDR *address)\n+process_stratum_target::get_tib_address (ptid_t ptid, CORE_ADDR *address)\n {\n   gdb_assert_not_reached (\"target op get_tib_address not supported\");\n }\n \n void\n-process_target::pause_all (bool freeze)\n+process_stratum_target::pause_all (bool freeze)\n {\n   /* Nop.  */\n }\n \n void\n-process_target::unpause_all (bool unfreeze)\n+process_stratum_target::unpause_all (bool unfreeze)\n {\n   /* Nop.  */\n }\n \n void\n-process_target::stabilize_threads ()\n+process_stratum_target::stabilize_threads ()\n {\n   /* Nop.  */\n }\n \n bool\n-process_target::supports_fast_tracepoints ()\n+process_stratum_target::supports_fast_tracepoints ()\n {\n   return false;\n }\n \n int\n-process_target::install_fast_tracepoint_jump_pad\n+process_stratum_target::install_fast_tracepoint_jump_pad\n   (CORE_ADDR tpoint, CORE_ADDR tpaddr, CORE_ADDR collector,\n    CORE_ADDR lockaddr, ULONGEST orig_size, CORE_ADDR *jump_entry,\n    CORE_ADDR *trampoline, ULONGEST *trampoline_size,\n@@ -676,117 +684,117 @@ process_target::install_fast_tracepoint_jump_pad\n }\n \n int\n-process_target::get_min_fast_tracepoint_insn_len ()\n+process_stratum_target::get_min_fast_tracepoint_insn_len ()\n {\n   return 0;\n }\n \n struct emit_ops *\n-process_target::emit_ops ()\n+process_stratum_target::emit_ops ()\n {\n   return nullptr;\n }\n \n bool\n-process_target::supports_disable_randomization ()\n+process_stratum_target::supports_disable_randomization ()\n {\n   return false;\n }\n \n bool\n-process_target::supports_qxfer_libraries_svr4 ()\n+process_stratum_target::supports_qxfer_libraries_svr4 ()\n {\n   return false;\n }\n \n int\n-process_target::qxfer_libraries_svr4 (const char *annex,\n-\t\t\t\t      unsigned char *readbuf,\n-\t\t\t\t      unsigned const char *writebuf,\n-\t\t\t\t      CORE_ADDR offset, int len)\n+process_stratum_target::qxfer_libraries_svr4 (const char *annex,\n+\t\t\t\t\t      unsigned char *readbuf,\n+\t\t\t\t\t      unsigned const char *writebuf,\n+\t\t\t\t\t      CORE_ADDR offset, int len)\n {\n   gdb_assert_not_reached (\"target op qxfer_libraries_svr4 not supported\");\n }\n \n bool\n-process_target::supports_agent ()\n+process_stratum_target::supports_agent ()\n {\n   return false;\n }\n \n btrace_target_info *\n-process_target::enable_btrace (ptid_t ptid, const btrace_config *conf)\n+process_stratum_target::enable_btrace (ptid_t ptid, const btrace_config *conf)\n {\n   error (_(\"Target does not support branch tracing.\"));\n }\n \n int\n-process_target::disable_btrace (btrace_target_info *tinfo)\n+process_stratum_target::disable_btrace (btrace_target_info *tinfo)\n {\n   error (_(\"Target does not support branch tracing.\"));\n }\n \n int\n-process_target::read_btrace (btrace_target_info *tinfo,\n+process_stratum_target::read_btrace (btrace_target_info *tinfo,\n \t\t\t     buffer *buffer,\n \t\t\t     enum btrace_read_type type)\n {\n   error (_(\"Target does not support branch tracing.\"));\n }\n \n int\n-process_target::read_btrace_conf (const btrace_target_info *tinfo,\n-\t\t\t\t  buffer *buffer)\n+process_stratum_target::read_btrace_conf (const btrace_target_info *tinfo,\n+\t\t\t\t\t  buffer *buffer)\n {\n   error (_(\"Target does not support branch tracing.\"));\n }\n \n bool\n-process_target::supports_range_stepping ()\n+process_stratum_target::supports_range_stepping ()\n {\n   return false;\n }\n \n bool\n-process_target::supports_pid_to_exec_file ()\n+process_stratum_target::supports_pid_to_exec_file ()\n {\n   return false;\n }\n \n char *\n-process_target::pid_to_exec_file (int pid)\n+process_stratum_target::pid_to_exec_file (int pid)\n {\n   gdb_assert_not_reached (\"target op pid_to_exec_file not supported\");\n }\n \n bool\n-process_target::supports_multifs ()\n+process_stratum_target::supports_multifs ()\n {\n   return false;\n }\n \n int\n-process_target::multifs_open (int pid, const char *filename,\n-\t\t\t      int flags, mode_t mode)\n+process_stratum_target::multifs_open (int pid, const char *filename,\n+\t\t\t\t      int flags, mode_t mode)\n {\n   return open (filename, flags, mode);\n }\n \n int\n-process_target::multifs_unlink (int pid, const char *filename)\n+process_stratum_target::multifs_unlink (int pid, const char *filename)\n {\n   return unlink (filename);\n }\n \n ssize_t\n-process_target::multifs_readlink (int pid, const char *filename,\n-\t\t\t\t  char *buf, size_t bufsiz)\n+process_stratum_target::multifs_readlink (int pid, const char *filename,\n+\t\t\t\t\t  char *buf, size_t bufsiz)\n {\n   return readlink (filename, buf, bufsiz);\n }\n \n int\n-process_target::breakpoint_kind_from_pc (CORE_ADDR *pcptr)\n+process_stratum_target::breakpoint_kind_from_pc (CORE_ADDR *pcptr)\n {\n   /* The default behavior is to use the size of a breakpoint as the\n      kind.  */\n@@ -796,38 +804,38 @@ process_target::breakpoint_kind_from_pc (CORE_ADDR *pcptr)\n }\n \n int\n-process_target::breakpoint_kind_from_current_state (CORE_ADDR *pcptr)\n+process_stratum_target::breakpoint_kind_from_current_state (CORE_ADDR *pcptr)\n {\n   return breakpoint_kind_from_pc (pcptr);\n }\n \n const char *\n-process_target::thread_name (ptid_t thread)\n+process_stratum_target::thread_name (ptid_t thread)\n {\n   return nullptr;\n }\n \n bool\n-process_target::thread_handle (ptid_t ptid, gdb_byte **handle,\n-\t\t\t       int *handle_len)\n+process_stratum_target::thread_handle (ptid_t ptid, gdb_byte **handle,\n+\t\t\t\t       int *handle_len)\n {\n   return false;\n }\n \n bool\n-process_target::supports_software_single_step ()\n+process_stratum_target::supports_software_single_step ()\n {\n   return false;\n }\n \n bool\n-process_target::supports_catch_syscall ()\n+process_stratum_target::supports_catch_syscall ()\n {\n   return false;\n }\n \n int\n-process_target::get_ipa_tdesc_idx ()\n+process_stratum_target::get_ipa_tdesc_idx ()\n {\n   return 0;\n }"
    },
    {
      "sha": "701c8ef87675fa05327f668d7156acde0982942c",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 55,
      "deletions": 62,
      "changes": 117,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -63,22 +63,15 @@ struct thread_resume\n   CORE_ADDR step_range_end;\t/* Exclusive */\n };\n \n-class process_target;\n-\n /* GDBserver doesn't have a concept of strata like GDB, but we call\n    its target vector \"process_stratum\" anyway for the benefit of\n    shared code.  */\n-struct process_stratum_target\n-{\n-  /* The object that will gradually replace this struct.  */\n-  process_target *pt;\n-};\n \n-class process_target\n+class process_stratum_target\n {\n public:\n \n-  virtual ~process_target () = default;\n+  virtual ~process_stratum_target () = default;\n \n   /* Start a new process.\n \n@@ -511,78 +504,78 @@ extern process_stratum_target *the_target;\n void set_target_ops (process_stratum_target *);\n \n #define target_create_inferior(program, program_args)\t\\\n-  the_target->pt->create_inferior (program, program_args)\n+  the_target->create_inferior (program, program_args)\n \n #define target_post_create_inferior()\t\t\t \\\n-  the_target->pt->post_create_inferior ()\n+  the_target->post_create_inferior ()\n \n #define myattach(pid) \\\n-  the_target->pt->attach (pid)\n+  the_target->attach (pid)\n \n int kill_inferior (process_info *proc);\n \n #define target_supports_fork_events() \\\n-  the_target->pt->supports_fork_events ()\n+  the_target->supports_fork_events ()\n \n #define target_supports_vfork_events() \\\n-  the_target->pt->supports_vfork_events ()\n+  the_target->supports_vfork_events ()\n \n #define target_supports_exec_events() \\\n-  the_target->pt->supports_exec_events ()\n+  the_target->supports_exec_events ()\n \n #define target_handle_new_gdb_connection()\t\t \\\n-  the_target->pt->handle_new_gdb_connection ()\n+  the_target->handle_new_gdb_connection ()\n \n #define detach_inferior(proc) \\\n-  the_target->pt->detach (proc)\n+  the_target->detach (proc)\n \n #define mythread_alive(pid) \\\n-  the_target->pt->thread_alive (pid)\n+  the_target->thread_alive (pid)\n \n #define fetch_inferior_registers(regcache, regno)\t\\\n-  the_target->pt->fetch_registers (regcache, regno)\n+  the_target->fetch_registers (regcache, regno)\n \n #define store_inferior_registers(regcache, regno) \\\n-  the_target->pt->store_registers (regcache, regno)\n+  the_target->store_registers (regcache, regno)\n \n #define join_inferior(pid) \\\n-  the_target->pt->join (pid)\n+  the_target->join (pid)\n \n #define target_supports_non_stop() \\\n-  the_target->pt->supports_non_stop ()\n+  the_target->supports_non_stop ()\n \n #define target_async(enable) \\\n-  the_target->pt->async (enable)\n+  the_target->async (enable)\n \n #define target_process_qsupported(features, count)\t\\\n-  the_target->pt->process_qsupported (features, count)\n+  the_target->process_qsupported (features, count)\n \n #define target_supports_catch_syscall()              \t\\\n-  the_target->pt->supports_catch_syscall ()\n+  the_target->supports_catch_syscall ()\n \n #define target_get_ipa_tdesc_idx()\t\t\t\\\n-  the_target->pt->get_ipa_tdesc_idx ()\n+  the_target->get_ipa_tdesc_idx ()\n \n #define target_supports_tracepoints()\t\t\t\\\n-  the_target->pt->supports_tracepoints ()\n+  the_target->supports_tracepoints ()\n \n #define target_supports_fast_tracepoints()\t\t\\\n-  the_target->pt->supports_fast_tracepoints ()\n+  the_target->supports_fast_tracepoints ()\n \n #define target_get_min_fast_tracepoint_insn_len()\t\\\n-  the_target->pt->get_min_fast_tracepoint_insn_len ()\n+  the_target->get_min_fast_tracepoint_insn_len ()\n \n #define target_thread_stopped(thread) \\\n-  the_target->pt->thread_stopped (thread)\n+  the_target->thread_stopped (thread)\n \n #define target_pause_all(freeze)\t\t\\\n-  the_target->pt->pause_all (freeze)\n+  the_target->pause_all (freeze)\n \n #define target_unpause_all(unfreeze)\t\t\\\n-  the_target->pt->unpause_all (unfreeze)\n+  the_target->unpause_all (unfreeze)\n \n #define target_stabilize_threads()\t\t\\\n-  the_target->pt->stabilize_threads ()\n+  the_target->stabilize_threads ()\n \n #define target_install_fast_tracepoint_jump_pad(tpoint, tpaddr,\t\t\\\n \t\t\t\t\t\tcollector, lockaddr,\t\\\n@@ -594,79 +587,79 @@ int kill_inferior (process_info *proc);\n \t\t\t\t\t\tadjusted_insn_addr,\t\\\n \t\t\t\t\t\tadjusted_insn_addr_end,\t\\\n \t\t\t\t\t\terr)\t\t\t\\\n-  the_target->pt->install_fast_tracepoint_jump_pad (tpoint, tpaddr,\t\\\n-\t\t\t\t\t\t    collector,lockaddr,\t\\\n-\t\t\t\t\t\t    orig_size, jump_entry, \\\n-\t\t\t\t\t\t    trampoline,\t\t\\\n-\t\t\t\t\t\t    trampoline_size,\t\\\n-\t\t\t\t\t\t    jjump_pad_insn,\t\\\n-\t\t\t\t\t\t    jjump_pad_insn_size, \\\n-\t\t\t\t\t\t    adjusted_insn_addr,\t\\\n-\t\t\t\t\t\t    adjusted_insn_addr_end, \\\n-\t\t\t\t\t\t    err)\n+  the_target->install_fast_tracepoint_jump_pad (tpoint, tpaddr,\t\\\n+\t\t\t\t\t\tcollector,lockaddr,\t\\\n+\t\t\t\t\t\torig_size, jump_entry,\t\\\n+\t\t\t\t\t\ttrampoline,\t\t\\\n+\t\t\t\t\t\ttrampoline_size,\t\\\n+\t\t\t\t\t\tjjump_pad_insn,\t\t\\\n+\t\t\t\t\t\tjjump_pad_insn_size,\t\\\n+\t\t\t\t\t\tadjusted_insn_addr,\t\\\n+\t\t\t\t\t\tadjusted_insn_addr_end, \\\n+\t\t\t\t\t\terr)\n \n #define target_emit_ops() \\\n-  the_target->pt->emit_ops ()\n+  the_target->emit_ops ()\n \n #define target_supports_disable_randomization() \\\n-  the_target->pt->supports_disable_randomization ()\n+  the_target->supports_disable_randomization ()\n \n #define target_supports_agent() \\\n-  the_target->pt->supports_agent ()\n+  the_target->supports_agent ()\n \n static inline struct btrace_target_info *\n target_enable_btrace (ptid_t ptid, const struct btrace_config *conf)\n {\n-  return the_target->pt->enable_btrace (ptid, conf);\n+  return the_target->enable_btrace (ptid, conf);\n }\n \n static inline int\n target_disable_btrace (struct btrace_target_info *tinfo)\n {\n-  return the_target->pt->disable_btrace (tinfo);\n+  return the_target->disable_btrace (tinfo);\n }\n \n static inline int\n target_read_btrace (struct btrace_target_info *tinfo,\n \t\t    struct buffer *buffer,\n \t\t    enum btrace_read_type type)\n {\n-  return the_target->pt->read_btrace (tinfo, buffer, type);\n+  return the_target->read_btrace (tinfo, buffer, type);\n }\n \n static inline int\n target_read_btrace_conf (struct btrace_target_info *tinfo,\n \t\t\t struct buffer *buffer)\n {\n-  return the_target->pt->read_btrace_conf (tinfo, buffer);\n+  return the_target->read_btrace_conf (tinfo, buffer);\n }\n \n #define target_supports_range_stepping() \\\n-  the_target->pt->supports_range_stepping ()\n+  the_target->supports_range_stepping ()\n \n #define target_supports_stopped_by_sw_breakpoint() \\\n-  the_target->pt->supports_stopped_by_sw_breakpoint ()\n+  the_target->supports_stopped_by_sw_breakpoint ()\n \n #define target_stopped_by_sw_breakpoint() \\\n-  the_target->pt->stopped_by_sw_breakpoint ()\n+  the_target->stopped_by_sw_breakpoint ()\n \n #define target_supports_stopped_by_hw_breakpoint() \\\n-  the_target->pt->supports_stopped_by_hw_breakpoint ()\n+  the_target->supports_stopped_by_hw_breakpoint ()\n \n #define target_supports_hardware_single_step() \\\n-  the_target->pt->supports_hardware_single_step ()\n+  the_target->supports_hardware_single_step ()\n \n #define target_stopped_by_hw_breakpoint() \\\n-  the_target->pt->stopped_by_hw_breakpoint ()\n+  the_target->stopped_by_hw_breakpoint ()\n \n #define target_breakpoint_kind_from_pc(pcptr) \\\n-  the_target->pt->breakpoint_kind_from_pc (pcptr)\n+  the_target->breakpoint_kind_from_pc (pcptr)\n \n #define target_breakpoint_kind_from_current_state(pcptr) \\\n-  the_target->pt->breakpoint_kind_from_current_state (pcptr)\n+  the_target->breakpoint_kind_from_current_state (pcptr)\n \n #define target_supports_software_single_step() \\\n-  the_target->pt->supports_software_single_step ()\n+  the_target->supports_software_single_step ()\n \n ptid_t mywait (ptid_t ptid, struct target_waitstatus *ourstatus, int options,\n \t       int connected_wait);\n@@ -678,13 +671,13 @@ int prepare_to_access_memory (void);\n void done_accessing_memory (void);\n \n #define target_core_of_thread(ptid)\t\t\\\n-  the_target->pt->core_of_thread (ptid)\n+  the_target->core_of_thread (ptid)\n \n #define target_thread_name(ptid)                                \\\n-  the_target->pt->thread_name (ptid)\n+  the_target->thread_name (ptid)\n \n #define target_thread_handle(ptid, handle, handle_len) \\\n-  the_target->pt->thread_handle (ptid, handle, handle_len)\n+  the_target->thread_handle (ptid, handle, handle_len)\n \n int read_inferior_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len);\n "
    },
    {
      "sha": "8b2a16e86dc6ad66cf7bc3a4e31642921b8224ee",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -377,7 +377,7 @@ do_initial_child_stuff (HANDLE proch, DWORD pid, int attached)\n     {\n       struct target_waitstatus status;\n \n-      the_target->pt->wait (minus_one_ptid, &status, 0);\n+      the_target->wait (minus_one_ptid, &status, 0);\n \n       /* Note win32_wait doesn't return thread events.  */\n       if (status.kind != TARGET_WAITKIND_LOADED)\n@@ -393,7 +393,7 @@ do_initial_child_stuff (HANDLE proch, DWORD pid, int attached)\n \tresume.kind = resume_continue;\n \tresume.sig = 0;\n \n-\tthe_target->pt->resume (&resume, 1);\n+\tthe_target->resume (&resume, 1);\n       }\n     }\n \n@@ -1857,14 +1857,10 @@ win32_process_target::sw_breakpoint_from_kind (int kind, int *size)\n \n static win32_process_target the_win32_target;\n \n-static process_stratum_target win32_target_ops = {\n-  &the_win32_target,\n-};\n-\n /* Initialize the Win32 backend.  */\n void\n initialize_low (void)\n {\n-  set_target_ops (&win32_target_ops);\n+  set_target_ops (&the_win32_target);\n   the_low_target.arch_setup ();\n }"
    },
    {
      "sha": "9d2f0b4fbecca96d94d62fe0ce122e1194c288dd",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/52405d85ec748e4566b7893fa3cb9ff21c8a1bc4/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=52405d85ec748e4566b7893fa3cb9ff21c8a1bc4",
      "patch": "@@ -103,7 +103,7 @@ extern struct win32_target_ops the_low_target;\n \n /* Target ops definitions for a Win32 target.  */\n \n-class win32_process_target : public process_target\n+class win32_process_target : public process_stratum_target\n {\n public:\n "
    }
  ]
}