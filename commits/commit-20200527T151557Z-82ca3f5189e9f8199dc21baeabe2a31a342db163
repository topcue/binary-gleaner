{
  "sha": "82ca3f5189e9f8199dc21baeabe2a31a342db163",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODJjYTNmNTE4OWU5ZjgxOTlkYzIxYmFlYWJlMmEzMWEzNDJkYjE2Mw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:14:02Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:57Z"
    },
    "message": "Add dwarf2_per_objfile parameter to dwarf2_read_addr_index\n\nPass it all the way from the symbol batons.  This allows removing a\ndwarf2_per_cu_data::dwarf2_per_objfile reference.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.h (dwarf2_read_addr_index): Add dwarf2_per_objfile\n\tparameter.\n\t* dwarf2/read.c (dwarf2_read_addr_index): Likewise.\n\t* dwarf2/loc.c (decode_debug_loclists_addresses): Add\n\tdwarf2_per_objfile parameter.\n\t(decode_debug_loc_dwo_addresses): Likewise.\n\t(dwarf2_find_location_expression): Update.\n\t(class dwarf_evaluate_loc_desc) <get_addr_index>: Update.\n\t(locexpr_describe_location_piece): Add dwarf2_per_objfile\n\tparameter.\n\t(disassemble_dwarf_expression): Add dwarf2_per_objfile\n\tparameter.\n\t(locexpr_describe_location_1): Likewise.\n\t(locexpr_describe_location): Update.\n\nChange-Id: I8414755e41a87c92f96e408524cc7aaccf086cda",
    "tree": {
      "sha": "1f62e503c4e3e63aa55cfea25d87beb172b5956b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1f62e503c4e3e63aa55cfea25d87beb172b5956b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/82ca3f5189e9f8199dc21baeabe2a31a342db163",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82ca3f5189e9f8199dc21baeabe2a31a342db163",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/82ca3f5189e9f8199dc21baeabe2a31a342db163",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82ca3f5189e9f8199dc21baeabe2a31a342db163/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4"
    }
  ],
  "stats": {
    "total": 83,
    "additions": 55,
    "deletions": 28
  },
  "files": [
    {
      "sha": "1df34cc862235c7d917c1866da76177cde890224",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/82ca3f5189e9f8199dc21baeabe2a31a342db163/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/82ca3f5189e9f8199dc21baeabe2a31a342db163/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=82ca3f5189e9f8199dc21baeabe2a31a342db163",
      "patch": "@@ -1,3 +1,20 @@\n+2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.h (dwarf2_read_addr_index): Add dwarf2_per_objfile\n+\tparameter.\n+\t* dwarf2/read.c (dwarf2_read_addr_index): Likewise.\n+\t* dwarf2/loc.c (decode_debug_loclists_addresses): Add\n+\tdwarf2_per_objfile parameter.\n+\t(decode_debug_loc_dwo_addresses): Likewise.\n+\t(dwarf2_find_location_expression): Update.\n+\t(class dwarf_evaluate_loc_desc) <get_addr_index>: Update.\n+\t(locexpr_describe_location_piece): Add dwarf2_per_objfile\n+\tparameter.\n+\t(disassemble_dwarf_expression): Add dwarf2_per_objfile\n+\tparameter.\n+\t(locexpr_describe_location_1): Likewise.\n+\t(locexpr_describe_location): Update.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.h (struct dwarf2_per_cu_data) <text_offset>:"
    },
    {
      "sha": "5692cf0027911ac5414e267df8fa56318459b259",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 34,
      "deletions": 26,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/82ca3f5189e9f8199dc21baeabe2a31a342db163/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/82ca3f5189e9f8199dc21baeabe2a31a342db163/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=82ca3f5189e9f8199dc21baeabe2a31a342db163",
      "patch": "@@ -163,7 +163,8 @@ decode_debug_loc_addresses (const gdb_byte *loc_ptr, const gdb_byte *buf_end,\n    The result indicates the kind of entry found.  */\n \n static enum debug_loc_kind\n-decode_debug_loclists_addresses (struct dwarf2_per_cu_data *per_cu,\n+decode_debug_loclists_addresses (dwarf2_per_cu_data *per_cu,\n+\t\t\t\t dwarf2_per_objfile *per_objfile,\n \t\t\t\t const gdb_byte *loc_ptr,\n \t\t\t\t const gdb_byte *buf_end,\n \t\t\t\t const gdb_byte **new_ptr,\n@@ -184,14 +185,14 @@ decode_debug_loclists_addresses (struct dwarf2_per_cu_data *per_cu,\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n       if (loc_ptr == NULL)\n \t return DEBUG_LOC_BUFFER_OVERFLOW;\n-      *high = dwarf2_read_addr_index (per_cu, u64);\n+      *high = dwarf2_read_addr_index (per_cu, per_objfile, u64);\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_BASE_ADDRESS;\n     case DW_LLE_startx_length:\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n       if (loc_ptr == NULL)\n \t return DEBUG_LOC_BUFFER_OVERFLOW;\n-      *low = dwarf2_read_addr_index (per_cu, u64);\n+      *low = dwarf2_read_addr_index (per_cu, per_objfile, u64);\n       *high = *low;\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &u64);\n       if (loc_ptr == NULL)\n@@ -253,7 +254,8 @@ decode_debug_loclists_addresses (struct dwarf2_per_cu_data *per_cu,\n    The result indicates the kind of entry found.  */\n \n static enum debug_loc_kind\n-decode_debug_loc_dwo_addresses (struct dwarf2_per_cu_data *per_cu,\n+decode_debug_loc_dwo_addresses (dwarf2_per_cu_data *per_cu,\n+\t\t\t\tdwarf2_per_objfile *per_objfile,\n \t\t\t\tconst gdb_byte *loc_ptr,\n \t\t\t\tconst gdb_byte *buf_end,\n \t\t\t\tconst gdb_byte **new_ptr,\n@@ -275,25 +277,25 @@ decode_debug_loc_dwo_addresses (struct dwarf2_per_cu_data *per_cu,\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &high_index);\n       if (loc_ptr == NULL)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n-      *high = dwarf2_read_addr_index (per_cu, high_index);\n+      *high = dwarf2_read_addr_index (per_cu, per_objfile, high_index);\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_BASE_ADDRESS;\n     case DW_LLE_GNU_start_end_entry:\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &low_index);\n       if (loc_ptr == NULL)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n-      *low = dwarf2_read_addr_index (per_cu, low_index);\n+      *low = dwarf2_read_addr_index (per_cu, per_objfile, low_index);\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &high_index);\n       if (loc_ptr == NULL)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n-      *high = dwarf2_read_addr_index (per_cu, high_index);\n+      *high = dwarf2_read_addr_index (per_cu, per_objfile, high_index);\n       *new_ptr = loc_ptr;\n       return DEBUG_LOC_START_END;\n     case DW_LLE_GNU_start_length_entry:\n       loc_ptr = gdb_read_uleb128 (loc_ptr, buf_end, &low_index);\n       if (loc_ptr == NULL)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n-      *low = dwarf2_read_addr_index (per_cu, low_index);\n+      *low = dwarf2_read_addr_index (per_cu, per_objfile, low_index);\n       if (loc_ptr + 4 > buf_end)\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n       *high = *low;\n@@ -340,6 +342,7 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n \n       if (baton->per_cu->version () < 5 && baton->from_dwo)\n \tkind = decode_debug_loc_dwo_addresses (baton->per_cu,\n+\t\t\t\t\t       baton->per_objfile,\n \t\t\t\t\t       loc_ptr, buf_end, &new_ptr,\n \t\t\t\t\t       &low, &high, byte_order);\n       else if (baton->per_cu->version () < 5)\n@@ -349,6 +352,7 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n \t\t\t\t\t   signed_addr_p);\n       else\n \tkind = decode_debug_loclists_addresses (baton->per_cu,\n+\t\t\t\t\t\tbaton->per_objfile,\n \t\t\t\t\t\tloc_ptr, buf_end, &new_ptr,\n \t\t\t\t\t\t&low, &high, byte_order,\n \t\t\t\t\t\taddr_size, signed_addr_p);\n@@ -682,7 +686,7 @@ class dwarf_evaluate_loc_desc : public dwarf_expr_context\n \n   CORE_ADDR get_addr_index (unsigned int index) override\n   {\n-    return dwarf2_read_addr_index (per_cu, index);\n+    return dwarf2_read_addr_index (per_cu, per_objfile, index);\n   }\n \n   /* Callback function for get_object_address. Return the address of the VLA\n@@ -3698,11 +3702,12 @@ locexpr_regname (struct gdbarch *gdbarch, int dwarf_regnum)\n \n static const gdb_byte *\n locexpr_describe_location_piece (struct symbol *symbol, struct ui_file *stream,\n-\t\t\t\t CORE_ADDR addr, struct objfile *objfile,\n-\t\t\t\t struct dwarf2_per_cu_data *per_cu,\n+\t\t\t\t CORE_ADDR addr, dwarf2_per_cu_data *per_cu,\n+\t\t\t\t dwarf2_per_objfile *per_objfile,\n \t\t\t\t const gdb_byte *data, const gdb_byte *end,\n \t\t\t\t unsigned int addr_size)\n {\n+  objfile *objfile = per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   size_t leb128_size;\n \n@@ -3841,7 +3846,7 @@ locexpr_describe_location_piece (struct symbol *symbol, struct ui_file *stream,\n       uint64_t offset;\n \n       data = safe_read_uleb128 (data + 1, end, &offset);\n-      offset = dwarf2_read_addr_index (per_cu, offset);\n+      offset = dwarf2_read_addr_index (per_cu, per_objfile, offset);\n       fprintf_filtered (stream, \n \t\t\t_(\"a thread-local variable at offset 0x%s \"\n \t\t\t  \"in the thread-local storage for `%s'\"),\n@@ -3874,7 +3879,8 @@ disassemble_dwarf_expression (struct ui_file *stream,\n \t\t\t      int offset_size, const gdb_byte *start,\n \t\t\t      const gdb_byte *data, const gdb_byte *end,\n \t\t\t      int indent, int all,\n-\t\t\t      struct dwarf2_per_cu_data *per_cu)\n+\t\t\t      dwarf2_per_cu_data *per_cu,\n+\t\t\t      dwarf2_per_objfile *per_objfile)\n {\n   while (data < end\n \t && (all\n@@ -4212,7 +4218,7 @@ disassemble_dwarf_expression (struct ui_file *stream,\n \t  fputc_filtered ('\\n', stream);\n \t  disassemble_dwarf_expression (stream, arch, addr_size, offset_size,\n \t\t\t\t\tstart, data, data + ul, indent + 2,\n-\t\t\t\t\tall, per_cu);\n+\t\t\t\t\tall, per_cu, per_objfile);\n \t  data += ul;\n \t  continue;\n \n@@ -4225,12 +4231,12 @@ disassemble_dwarf_expression (struct ui_file *stream,\n \tcase DW_OP_addrx:\n \tcase DW_OP_GNU_addr_index:\n \t  data = safe_read_uleb128 (data, end, &ul);\n-\t  ul = dwarf2_read_addr_index (per_cu, ul);\n+\t  ul = dwarf2_read_addr_index (per_cu, per_objfile, ul);\n \t  fprintf_filtered (stream, \" 0x%s\", phex_nz (ul, addr_size));\n \t  break;\n \tcase DW_OP_GNU_const_index:\n \t  data = safe_read_uleb128 (data, end, &ul);\n-\t  ul = dwarf2_read_addr_index (per_cu, ul);\n+\t  ul = dwarf2_read_addr_index (per_cu, per_objfile, ul);\n \t  fprintf_filtered (stream, \" %s\", pulongest (ul));\n \t  break;\n \n@@ -4267,11 +4273,13 @@ static void\n locexpr_describe_location_1 (struct symbol *symbol, CORE_ADDR addr,\n \t\t\t     struct ui_file *stream,\n \t\t\t     const gdb_byte *data, size_t size,\n-\t\t\t     struct objfile *objfile, unsigned int addr_size,\n-\t\t\t     int offset_size, struct dwarf2_per_cu_data *per_cu)\n+\t\t\t     unsigned int addr_size,\n+\t\t\t     int offset_size, dwarf2_per_cu_data *per_cu,\n+\t\t\t     dwarf2_per_objfile *per_objfile)\n {\n   const gdb_byte *end = data + size;\n   int first_piece = 1, bad = 0;\n+  objfile *objfile = per_objfile->objfile;\n \n   while (data < end)\n     {\n@@ -4286,7 +4294,7 @@ locexpr_describe_location_1 (struct symbol *symbol, CORE_ADDR addr,\n       if (!dwarf_always_disassemble)\n \t{\n \t  data = locexpr_describe_location_piece (symbol, stream,\n-\t\t\t\t\t\t  addr, objfile, per_cu,\n+\t\t\t\t\t\t  addr, per_cu, per_objfile,\n \t\t\t\t\t\t  data, end, addr_size);\n \t  /* If we printed anything, or if we have an empty piece,\n \t     then don't disassemble.  */\n@@ -4303,7 +4311,7 @@ locexpr_describe_location_1 (struct symbol *symbol, CORE_ADDR addr,\n \t\t\t\t\t       addr_size, offset_size, data,\n \t\t\t\t\t       data, end, 0,\n \t\t\t\t\t       dwarf_always_disassemble,\n-\t\t\t\t\t       per_cu);\n+\t\t\t\t\t       per_cu, per_objfile);\n \t}\n \n       if (data < end)\n@@ -4363,15 +4371,13 @@ locexpr_describe_location (struct symbol *symbol, CORE_ADDR addr,\n {\n   struct dwarf2_locexpr_baton *dlbaton\n     = (struct dwarf2_locexpr_baton *) SYMBOL_LOCATION_BATON (symbol);\n-  dwarf2_per_objfile *per_objfile = dlbaton->per_objfile;\n-  struct objfile *objfile = per_objfile->objfile;\n   unsigned int addr_size = dlbaton->per_cu->addr_size ();\n   int offset_size = dlbaton->per_cu->offset_size ();\n \n   locexpr_describe_location_1 (symbol, addr, stream,\n \t\t\t       dlbaton->data, dlbaton->size,\n-\t\t\t       objfile, addr_size, offset_size,\n-\t\t\t       dlbaton->per_cu);\n+\t\t\t       addr_size, offset_size,\n+\t\t\t       dlbaton->per_cu, dlbaton->per_objfile);\n }\n \n /* Describe the location of SYMBOL as an agent value in VALUE, generating\n@@ -4529,6 +4535,7 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n \n       if (dlbaton->per_cu->version () < 5 && dlbaton->from_dwo)\n \tkind = decode_debug_loc_dwo_addresses (dlbaton->per_cu,\n+\t\t\t\t\t       dlbaton->per_objfile,\n \t\t\t\t\t       loc_ptr, buf_end, &new_ptr,\n \t\t\t\t\t       &low, &high, byte_order);\n       else if (dlbaton->per_cu->version () < 5)\n@@ -4538,6 +4545,7 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n \t\t\t\t\t   signed_addr_p);\n       else\n \tkind = decode_debug_loclists_addresses (dlbaton->per_cu,\n+\t\t\t\t\t\tdlbaton->per_objfile,\n \t\t\t\t\t\tloc_ptr, buf_end, &new_ptr,\n \t\t\t\t\t\t&low, &high, byte_order,\n \t\t\t\t\t\taddr_size, signed_addr_p);\n@@ -4590,8 +4598,8 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n \n       /* Now describe this particular location.  */\n       locexpr_describe_location_1 (symbol, low, stream, loc_ptr, length,\n-\t\t\t\t   objfile, addr_size, offset_size,\n-\t\t\t\t   dlbaton->per_cu);\n+\t\t\t\t   addr_size, offset_size,\n+\t\t\t\t   dlbaton->per_cu, dlbaton->per_objfile);\n \n       fprintf_filtered (stream, \"\\n\");\n "
    },
    {
      "sha": "31251732ca3b402fec5f16cc99e3d68f567c8bed",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/82ca3f5189e9f8199dc21baeabe2a31a342db163/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/82ca3f5189e9f8199dc21baeabe2a31a342db163/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=82ca3f5189e9f8199dc21baeabe2a31a342db163",
      "patch": "@@ -19404,9 +19404,10 @@ read_addr_index_from_leb128 (struct dwarf2_cu *cu, const gdb_byte *info_ptr,\n /* See read.h.  */\n \n CORE_ADDR\n-dwarf2_read_addr_index (dwarf2_per_cu_data *per_cu, unsigned int addr_index)\n+dwarf2_read_addr_index (dwarf2_per_cu_data *per_cu,\n+\t\t\tdwarf2_per_objfile *dwarf2_per_objfile,\n+\t\t\tunsigned int addr_index)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile = per_cu->dwarf2_per_objfile;\n   struct dwarf2_cu *cu = per_cu->cu;\n   gdb::optional<ULONGEST> addr_base;\n   int addr_size;"
    },
    {
      "sha": "68e322f8bbe40a7f053bcab3547c16f6506c678e",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/82ca3f5189e9f8199dc21baeabe2a31a342db163/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/82ca3f5189e9f8199dc21baeabe2a31a342db163/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=82ca3f5189e9f8199dc21baeabe2a31a342db163",
      "patch": "@@ -579,6 +579,7 @@ struct type *dwarf2_get_die_type (cu_offset die_offset,\n    may no longer exist.  */\n \n CORE_ADDR dwarf2_read_addr_index (dwarf2_per_cu_data *per_cu,\n+\t\t\t\t  dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t\t  unsigned int addr_index);\n \n /* Return DWARF block referenced by DW_AT_location of DIE at SECT_OFF at PER_CU."
    }
  ]
}