{
  "sha": "4debb2379696829391bfb519ed9a5f415d6e190a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGRlYmIyMzc5Njk2ODI5MzkxYmZiNTE5ZWQ5YTVmNDE1ZDZlMTkwYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-12T22:45:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-12T22:51:58Z"
    },
    "message": "Remove a use of the comp_unit backlink\n\nThe DWARF frame comp_unit object still has a backlink to the objfile.\nIn order to be truly objfile-independent, this must be removed.\n\nThis patch removes one such use, by passing the gdbarch to\ndecode_frame_entry directly.\n\ngdb/ChangeLog\n2020-02-12  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/frame.c (decode_frame_entry_1): Add gdbarch parameter.\n\t(decode_frame_entry): Likewise.\n\t(dwarf2_build_frame_info): Update.",
    "tree": {
      "sha": "cf0fdf38f3b0eb6d2db30921aa57409aef133bb3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cf0fdf38f3b0eb6d2db30921aa57409aef133bb3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4debb2379696829391bfb519ed9a5f415d6e190a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4debb2379696829391bfb519ed9a5f415d6e190a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4debb2379696829391bfb519ed9a5f415d6e190a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4debb2379696829391bfb519ed9a5f415d6e190a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0d404d447ae34e31bdf58ba09c5d3254db3766e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0d404d447ae34e31bdf58ba09c5d3254db3766e1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0d404d447ae34e31bdf58ba09c5d3254db3766e1"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 20,
    "deletions": 8
  },
  "files": [
    {
      "sha": "9bc686b293f10c68f193fbff4cc84dc562d31bc9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4debb2379696829391bfb519ed9a5f415d6e190a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4debb2379696829391bfb519ed9a5f415d6e190a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4debb2379696829391bfb519ed9a5f415d6e190a",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-12  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/frame.c (decode_frame_entry_1): Add gdbarch parameter.\n+\t(decode_frame_entry): Likewise.\n+\t(dwarf2_build_frame_info): Update.\n+\n 2020-02-12  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/frame.c (struct comp_unit) <obstack>: New member."
    },
    {
      "sha": "7397a7fbeb28cc11df4105de3e69cd7bfd543b3c",
      "filename": "gdb/dwarf2/frame.c",
      "status": "modified",
      "additions": 14,
      "deletions": 8,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4debb2379696829391bfb519ed9a5f415d6e190a/gdb/dwarf2/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4debb2379696829391bfb519ed9a5f415d6e190a/gdb/dwarf2/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame.c?ref=4debb2379696829391bfb519ed9a5f415d6e190a",
      "patch": "@@ -1701,7 +1701,8 @@ enum eh_frame_type\n   EH_CIE_OR_FDE_TYPE_ID = EH_CIE_TYPE_ID | EH_FDE_TYPE_ID\n };\n \n-static const gdb_byte *decode_frame_entry (struct comp_unit *unit,\n+static const gdb_byte *decode_frame_entry (struct gdbarch *gdbarch,\n+\t\t\t\t\t   struct comp_unit *unit,\n \t\t\t\t\t   const gdb_byte *start,\n \t\t\t\t\t   int eh_frame_p,\n \t\t\t\t\t   dwarf2_cie_table &cie_table,\n@@ -1712,13 +1713,13 @@ static const gdb_byte *decode_frame_entry (struct comp_unit *unit,\n    Return NULL if invalid input, otherwise the next byte to be processed.  */\n \n static const gdb_byte *\n-decode_frame_entry_1 (struct comp_unit *unit, const gdb_byte *start,\n+decode_frame_entry_1 (struct gdbarch *gdbarch,\n+\t\t      struct comp_unit *unit, const gdb_byte *start,\n \t\t      int eh_frame_p,\n                       dwarf2_cie_table &cie_table,\n                       dwarf2_fde_table *fde_table,\n                       enum eh_frame_type entry_type)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (unit->objfile);\n   const gdb_byte *buf, *end;\n   ULONGEST length;\n   unsigned int bytes_read;\n@@ -1963,7 +1964,8 @@ decode_frame_entry_1 (struct comp_unit *unit, const gdb_byte *start,\n       fde->cie = find_cie (cie_table, cie_pointer);\n       if (fde->cie == NULL)\n \t{\n-\t  decode_frame_entry (unit, unit->dwarf_frame_buffer + cie_pointer,\n+\t  decode_frame_entry (gdbarch, unit,\n+\t\t\t      unit->dwarf_frame_buffer + cie_pointer,\n \t\t\t      eh_frame_p, cie_table, fde_table,\n \t\t\t      EH_CIE_TYPE_ID);\n \t  fde->cie = find_cie (cie_table, cie_pointer);\n@@ -2014,7 +2016,8 @@ decode_frame_entry_1 (struct comp_unit *unit, const gdb_byte *start,\n    expect an FDE or a CIE.  */\n \n static const gdb_byte *\n-decode_frame_entry (struct comp_unit *unit, const gdb_byte *start,\n+decode_frame_entry (struct gdbarch *gdbarch,\n+\t\t    struct comp_unit *unit, const gdb_byte *start,\n \t\t    int eh_frame_p,\n \t\t    dwarf2_cie_table &cie_table,\n                     dwarf2_fde_table *fde_table,\n@@ -2026,7 +2029,7 @@ decode_frame_entry (struct comp_unit *unit, const gdb_byte *start,\n \n   while (1)\n     {\n-      ret = decode_frame_entry_1 (unit, start, eh_frame_p,\n+      ret = decode_frame_entry_1 (gdbarch, unit, start, eh_frame_p,\n \t\t\t\t  cie_table, fde_table, entry_type);\n       if (ret != NULL)\n \tbreak;\n@@ -2132,6 +2135,8 @@ dwarf2_build_frame_info (struct objfile *objfile)\n   dwarf2_cie_table cie_table;\n   dwarf2_fde_table fde_table;\n \n+  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+\n   /* Build a minimal decoding of the DWARF2 compilation unit.  */\n   std::unique_ptr<comp_unit> unit (new comp_unit (objfile));\n \n@@ -2165,7 +2170,8 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t    {\n \t      frame_ptr = unit->dwarf_frame_buffer;\n \t      while (frame_ptr < unit->dwarf_frame_buffer + unit->dwarf_frame_size)\n-\t\tframe_ptr = decode_frame_entry (unit.get (), frame_ptr, 1,\n+\t\tframe_ptr = decode_frame_entry (gdbarch, unit.get (),\n+\t\t\t\t\t\tframe_ptr, 1,\n \t\t\t\t\t\tcie_table, &fde_table,\n \t\t\t\t\t\tEH_CIE_OR_FDE_TYPE_ID);\n \t    }\n@@ -2195,7 +2201,7 @@ dwarf2_build_frame_info (struct objfile *objfile)\n \t{\n \t  frame_ptr = unit->dwarf_frame_buffer;\n \t  while (frame_ptr < unit->dwarf_frame_buffer + unit->dwarf_frame_size)\n-\t    frame_ptr = decode_frame_entry (unit.get (), frame_ptr, 0,\n+\t    frame_ptr = decode_frame_entry (gdbarch, unit.get (), frame_ptr, 0,\n \t\t\t\t\t    cie_table, &fde_table,\n \t\t\t\t\t    EH_CIE_OR_FDE_TYPE_ID);\n \t}"
    }
  ]
}