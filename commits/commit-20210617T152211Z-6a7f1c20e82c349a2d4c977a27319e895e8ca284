{
  "sha": "6a7f1c20e82c349a2d4c977a27319e895e8ca284",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmE3ZjFjMjBlODJjMzQ5YTJkNGM5NzdhMjczMTllODk1ZThjYTI4NA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-06-17T15:16:54Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-06-17T15:22:11Z"
    },
    "message": "Introduce scoped_restore_signal\n\nWe currently have scoped_restore_sigttou and scoped_restore_sigpipe\ndoing basically the same thing -- temporarily ignoring a specific\nsignal.\n\nThis patch introduce a scoped_restore_signal type that can be used for\nboth.  This will become more important for the next patch which\nchanges how the signal-ignoring is implemented.\n\nscoped_restore_sigpipe is a straight alias to\nscoped_restore_signal<SIGPIPE> on systems that define SIGPIPE, and an\nalias to scoped_restore_signal_nop (a no-op version of\nscoped_restore_signal) otherwise.\n\nscoped_restore_sigttou is not a straight alias because it wants to\ncheck the job_control global.\n\ngdb/ChangeLog:\nyyyy-mm-dd  Pedro Alves  <pedro@palves.net>\n\n\t* gdbsupport/scoped_ignore_signal.h: New.\n\t* compile/compile.c: Include gdbsupport/scoped_ignore_signal.h\n\tinstead of <signal.h>.  Don't include <unistd.h>.\n\t(scoped_ignore_sigpipe): Remove.\n\t* gdbsupport/scoped_ignore_sigttou.h: Include gdbsupport/scoped_ignore_signal.h\n\tinstead of <signal.h>.  Don't include <unistd.h>.\n\t(lazy_init): New.\n\t(scoped_ignore_sigttou): Reimplement using scoped_ignore_signal\n\tand lazy_init.\n\nChange-Id: Ibb44d0bd705e96df03ef0787c77358a4a7b7086c",
    "tree": {
      "sha": "6210ff7bd225b3fcefd8d5b9047cfefffbdca2be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6210ff7bd225b3fcefd8d5b9047cfefffbdca2be"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6a7f1c20e82c349a2d4c977a27319e895e8ca284",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a7f1c20e82c349a2d4c977a27319e895e8ca284",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6a7f1c20e82c349a2d4c977a27319e895e8ca284",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a7f1c20e82c349a2d4c977a27319e895e8ca284/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "965febe599ab3a5f9fa17a7aaed4dd714f265ecd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/965febe599ab3a5f9fa17a7aaed4dd714f265ecd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/965febe599ab3a5f9fa17a7aaed4dd714f265ecd"
    }
  ],
  "stats": {
    "total": 160,
    "additions": 120,
    "deletions": 40
  },
  "files": [
    {
      "sha": "a56531e9f5399e3db765d55e62250aea944982f4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a7f1c20e82c349a2d4c977a27319e895e8ca284/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a7f1c20e82c349a2d4c977a27319e895e8ca284/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6a7f1c20e82c349a2d4c977a27319e895e8ca284",
      "patch": "@@ -1,3 +1,15 @@\n+2021-06-17  Pedro Alves  <pedro@palves.net>\n+\n+\t* gdbsupport/scoped_ignore_signal.h: New.\n+\t* compile/compile.c: Include gdbsupport/scoped_ignore_signal.h\n+\tinstead of <signal.h>.  Don't include <unistd.h>.\n+\t(scoped_ignore_sigpipe): Remove.\n+\t* gdbsupport/scoped_ignore_sigttou.h: Include gdbsupport/scoped_ignore_signal.h\n+\tinstead of <signal.h>.  Don't include <unistd.h>.\n+\t(lazy_init): New.\n+\t(scoped_ignore_sigttou): Reimplement using scoped_ignore_signal\n+\tand lazy_init.\n+\n 2021-06-17  Pedro Alves  <pedro@palves.net>\n \n \t* Makefile.in (HFILES_NO_SRCDIR): Remove inflow.h."
    },
    {
      "sha": "e815348ff078520f4a05415b6096ca91df8f1bb8",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 28,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a7f1c20e82c349a2d4c977a27319e895e8ca284/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a7f1c20e82c349a2d4c977a27319e895e8ca284/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=6a7f1c20e82c349a2d4c977a27319e895e8ca284",
      "patch": "@@ -43,7 +43,7 @@\n #include \"gdbsupport/gdb_optional.h\"\n #include \"gdbsupport/gdb_unlinker.h\"\n #include \"gdbsupport/pathstuff.h\"\n-#include <signal.h>\n+#include \"gdbsupport/scoped_ignore_signal.h\"\n \n \f\n \n@@ -634,33 +634,6 @@ print_callback (void *ignore, const char *message)\n   fputs_filtered (message, gdb_stderr);\n }\n \n-/* RAII class used to ignore SIGPIPE in a scope.  */\n-\n-class scoped_ignore_sigpipe\n-{\n-public:\n-  scoped_ignore_sigpipe ()\n-  {\n-#ifdef SIGPIPE\n-    m_osigpipe = signal (SIGPIPE, SIG_IGN);\n-#endif\n-  }\n-\n-  ~scoped_ignore_sigpipe ()\n-  {\n-#ifdef SIGPIPE\n-    signal (SIGPIPE, m_osigpipe);\n-#endif\n-  }\n-\n-  DISABLE_COPY_AND_ASSIGN (scoped_ignore_sigpipe);\n-\n-private:\n-#ifdef SIGPIPE\n-  sighandler_t m_osigpipe = NULL;\n-#endif\n-};\n-\n /* Process the compilation request.  On success it returns the object\n    and source file names.  On an error condition, error () is\n    called.  */"
    },
    {
      "sha": "cccd390529b1686fff3a28d76ad9990a8e488ebd",
      "filename": "gdbsupport/scoped_ignore_signal.h",
      "status": "added",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a7f1c20e82c349a2d4c977a27319e895e8ca284/gdbsupport/scoped_ignore_signal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a7f1c20e82c349a2d4c977a27319e895e8ca284/gdbsupport/scoped_ignore_signal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/scoped_ignore_signal.h?ref=6a7f1c20e82c349a2d4c977a27319e895e8ca284",
      "patch": "@@ -0,0 +1,64 @@\n+/* Support for ignoring signals.\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef SCOPED_IGNORE_SIGNAL_H\n+#define SCOPED_IGNORE_SIGNAL_H\n+\n+#include <signal.h>\n+\n+/* RAII class used to ignore a signal in a scope.  */\n+\n+template <int Sig>\n+class scoped_ignore_signal\n+{\n+public:\n+  scoped_ignore_signal ()\n+  {\n+    m_osig = signal (Sig, SIG_IGN);\n+  }\n+\n+  ~scoped_ignore_signal ()\n+  {\n+    signal (Sig, m_osig);\n+  }\n+\n+  DISABLE_COPY_AND_ASSIGN (scoped_ignore_signal);\n+\n+private:\n+  sighandler_t m_osig = nullptr;\n+};\n+\n+struct scoped_ignore_signal_nop\n+{\n+  /* Note, these can't both be \"= default\", because otherwise the\n+     compiler warns that variables of this type are not used.  */\n+  scoped_ignore_signal_nop ()\n+  {}\n+  ~scoped_ignore_signal_nop ()\n+  {}\n+  DISABLE_COPY_AND_ASSIGN (scoped_ignore_signal_nop);\n+};\n+\n+#ifdef SIGPIPE\n+using scoped_ignore_sigpipe = scoped_ignore_signal<SIGPIPE>;\n+#else\n+using scoped_ignore_sigpipe = scoped_ignore_signal_nop;\n+#endif\n+\n+#endif /* SCOPED_IGNORE_SIGNAL_H */"
    },
    {
      "sha": "1fc8f80d7fd72db877e204e43dbca1e9205cafd6",
      "filename": "gdbsupport/scoped_ignore_sigttou.h",
      "status": "modified",
      "additions": 43,
      "deletions": 12,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a7f1c20e82c349a2d4c977a27319e895e8ca284/gdbsupport/scoped_ignore_sigttou.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a7f1c20e82c349a2d4c977a27319e895e8ca284/gdbsupport/scoped_ignore_sigttou.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/scoped_ignore_sigttou.h?ref=6a7f1c20e82c349a2d4c977a27319e895e8ca284",
      "patch": "@@ -20,37 +20,68 @@\n #ifndef SCOPED_IGNORE_SIGTTOU_H\n #define SCOPED_IGNORE_SIGTTOU_H\n \n-#include <unistd.h>\n-#include <signal.h>\n+#include \"gdbsupport/scoped_ignore_signal.h\"\n #include \"gdbsupport/job-control.h\"\n \n-/* RAII class used to ignore SIGTTOU in a scope.  */\n+#ifdef SIGTTOU\n+\n+/* Simple wrapper that allows lazy initialization / destruction of T.\n+   Slightly more efficient than gdb::optional, because it doesn't\n+   carry storage to track whether the object has been initialized.  */\n+template<typename T>\n+class lazy_init\n+{\n+public:\n+  void emplace ()\n+  {\n+    new (&m_u.obj) T ();\n+  }\n+\n+  void reset ()\n+  {\n+    m_u.obj.~T ();\n+  }\n+\n+private:\n+  union u\n+  {\n+    /* Must define ctor/dtor if T has non-trivial ctor/dtor.  */\n+    u () {}\n+    ~u () {}\n+\n+    T obj;\n+  } m_u;\n+};\n+\n+/* RAII class used to ignore SIGTTOU in a scope.  This isn't simply\n+   scoped_ignore_signal<SIGTTOU> because we want to check the\n+   `job_control' global.  */\n \n class scoped_ignore_sigttou\n {\n public:\n   scoped_ignore_sigttou ()\n   {\n-#ifdef SIGTTOU\n     if (job_control)\n-      m_osigttou = signal (SIGTTOU, SIG_IGN);\n-#endif\n+      m_ignore_signal.emplace ();\n   }\n \n   ~scoped_ignore_sigttou ()\n   {\n-#ifdef SIGTTOU\n     if (job_control)\n-      signal (SIGTTOU, m_osigttou);\n-#endif\n+      m_ignore_signal.reset ();\n   }\n \n   DISABLE_COPY_AND_ASSIGN (scoped_ignore_sigttou);\n \n private:\n-#ifdef SIGTTOU\n-  sighandler_t m_osigttou = NULL;\n-#endif\n+  lazy_init<scoped_ignore_signal<SIGTTOU>> m_ignore_signal;\n };\n \n+#else\n+\n+using scoped_ignore_sigttou = scoped_ignore_signal_nop;\n+\n+#endif\n+\n #endif /* SCOPED_IGNORE_SIGTTOU_H */"
    }
  ]
}