{
  "sha": "5561fc304ff2a93a33a42df63eaf18b92483b307",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTU2MWZjMzA0ZmYyYTkzYTMzYTQyZGY2M2VhZjE4YjkyNDgzYjMwNw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-02-22T20:49:04Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-02-27T08:38:15Z"
    },
    "message": "gdb: Restructure type_align and gdbarch_type_align\n\nThis commit restructures the relationship between the type_align\nfunction and the gdbarch_type_align method.\n\nThe problem being addressed with this commit is this; previously the\ntype_align function was structured so that for \"basic\" types (int,\nfloat, etc) the gdbarch_type_align hook was called, which for\n\"compound\" types (arrays, structs, etc) the common type_align code has\na fixed method for how to extract a \"basic\" type and would then call\nitself on that \"basic\" type.\n\nThe problem is that if an architecture wants to modify the alignment\nrules for a \"compound\" type then this is not currently possible.\n\nIn the revised structure, all types pass through the\ngdbarch_type_align method.  If this method returns 0 then this\nindicates that the architecture has no special rules for this type,\nand GDB should apply the default rules for alignment.  However, the\narchitecture is free to provide an alignment for any type, both\n\"basic\" and \"compound\".\n\nAfter this commit the default alignment rules now all live in the\ntype_align function, the default_type_align only ever returns 0,\nmeaning apply the default rules.\n\nI've updated the 3 targets (arc, i386, and nios2) that already\noverride the gdbarch_type_align method to fit the new scheme.\n\nTested on X86-64/GNU Linux with no regressions.\n\ngdb/ChangeLog:\n\n\t* arc-tdep.c (arc_type_align): Provide alignment for basic types,\n\treturn 0 for other types.\n\t* arch-utils.c (default_type_align): Always return 0.\n\t* gdbarch.h: Regenerate.\n\t* gdbarch.sh (type_align): Extend comment.\n\t* gdbtypes.c (type_align): Add additional comments, always call\n\tgdbarch_type_align before applying the default rules.\n\t* i386-tdep.c (i386_type_align): Return 0 as the default rule,\n\tgeneric code will then apply a suitable default.\n\t* nios2-tdep.c (nios2_type_align): Provide alignment for basic\n\ttypes, return 0 for other types.",
    "tree": {
      "sha": "bc30aaaedd4280f162d2a8e46dbfe743644ebfa1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bc30aaaedd4280f162d2a8e46dbfe743644ebfa1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5561fc304ff2a93a33a42df63eaf18b92483b307",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5561fc304ff2a93a33a42df63eaf18b92483b307",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5561fc304ff2a93a33a42df63eaf18b92483b307",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5561fc304ff2a93a33a42df63eaf18b92483b307/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9335e75a6170fbf76f60548690d5724198cf0440",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9335e75a6170fbf76f60548690d5724198cf0440",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9335e75a6170fbf76f60548690d5724198cf0440"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 74,
    "deletions": 13
  },
  "files": [
    {
      "sha": "07f3c478b283ec2778660e7602bfed41b1a52731",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5561fc304ff2a93a33a42df63eaf18b92483b307",
      "patch": "@@ -1,3 +1,17 @@\n+2019-02-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* arc-tdep.c (arc_type_align): Provide alignment for basic types,\n+\treturn 0 for other types.\n+\t* arch-utils.c (default_type_align): Always return 0.\n+\t* gdbarch.h: Regenerate.\n+\t* gdbarch.sh (type_align): Extend comment.\n+\t* gdbtypes.c (type_align): Add additional comments, always call\n+\tgdbarch_type_align before applying the default rules.\n+\t* i386-tdep.c (i386_type_align): Return 0 as the default rule,\n+\tgeneric code will then apply a suitable default.\n+\t* nios2-tdep.c (nios2_type_align): Provide alignment for basic\n+\ttypes, return 0 for other types.\n+\n 2019-02-27  Joel Brobecker  <brobecker@adacore.com>\n \n \t* NEWS: Create a new section for the next release branch."
    },
    {
      "sha": "235fb276e4796cb27d3b4c659caa5514c9414f53",
      "filename": "gdb/arc-tdep.c",
      "status": "modified",
      "additions": 21,
      "deletions": 2,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/arc-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/arc-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.c?ref=5561fc304ff2a93a33a42df63eaf18b92483b307",
      "patch": "@@ -1963,8 +1963,27 @@ arc_tdesc_init (struct gdbarch_info info, const struct target_desc **tdesc,\n static ULONGEST\n arc_type_align (struct gdbarch *gdbarch, struct type *type)\n {\n-  type = check_typedef (type);\n-  return std::min<ULONGEST> (4, TYPE_LENGTH (type));\n+  switch (TYPE_CODE (type))\n+    {\n+    case TYPE_CODE_PTR:\n+    case TYPE_CODE_FUNC:\n+    case TYPE_CODE_FLAGS:\n+    case TYPE_CODE_INT:\n+    case TYPE_CODE_RANGE:\n+    case TYPE_CODE_FLT:\n+    case TYPE_CODE_ENUM:\n+    case TYPE_CODE_REF:\n+    case TYPE_CODE_RVALUE_REF:\n+    case TYPE_CODE_CHAR:\n+    case TYPE_CODE_BOOL:\n+    case TYPE_CODE_DECFLOAT:\n+    case TYPE_CODE_METHODPTR:\n+    case TYPE_CODE_MEMBERPTR:\n+      type = check_typedef (type);\n+      return std::min<ULONGEST> (4, TYPE_LENGTH (type));\n+    default:\n+      return 0;\n+    }\n }\n \n /* Implement the \"init\" gdbarch method.  */"
    },
    {
      "sha": "52a08daa3b9aa266046d1ae7335c71829664c04d",
      "filename": "gdb/arch-utils.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/arch-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/arch-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.c?ref=5561fc304ff2a93a33a42df63eaf18b92483b307",
      "patch": "@@ -993,7 +993,7 @@ default_in_indirect_branch_thunk (gdbarch *gdbarch, CORE_ADDR pc)\n ULONGEST\n default_type_align (struct gdbarch *gdbarch, struct type *type)\n {\n-  return type_length_units (check_typedef (type));\n+  return 0;\n }\n \n void"
    },
    {
      "sha": "75618376abb192eca11a41d42921c483d3be76a3",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=5561fc304ff2a93a33a42df63eaf18b92483b307",
      "patch": "@@ -1589,7 +1589,10 @@ extern void set_gdbarch_disassembler_options (struct gdbarch *gdbarch, char ** d\n extern const disasm_options_and_args_t * gdbarch_valid_disassembler_options (struct gdbarch *gdbarch);\n extern void set_gdbarch_valid_disassembler_options (struct gdbarch *gdbarch, const disasm_options_and_args_t * valid_disassembler_options);\n \n-/* Type alignment. */\n+/* Type alignment override method.  Return the architecture specific\n+   alignment required for TYPE.  If there is no special handling\n+   required for TYPE then return the value 0, GDB will then apply the\n+   default rules as laid out in gdbtypes.c:type_align. */\n \n typedef ULONGEST (gdbarch_type_align_ftype) (struct gdbarch *gdbarch, struct type *type);\n extern ULONGEST gdbarch_type_align (struct gdbarch *gdbarch, struct type *type);"
    },
    {
      "sha": "48fcebd19a08749c826528a6475ef9e960643da0",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=5561fc304ff2a93a33a42df63eaf18b92483b307",
      "patch": "@@ -1171,7 +1171,10 @@ v;const char *;disassembler_options_implicit;;;0;0;;0;pstring (gdbarch->disassem\n v;char **;disassembler_options;;;0;0;;0;pstring_ptr (gdbarch->disassembler_options)\n v;const disasm_options_and_args_t *;valid_disassembler_options;;;0;0;;0;host_address_to_string (gdbarch->valid_disassembler_options)\n \n-# Type alignment.\n+# Type alignment override method.  Return the architecture specific\n+# alignment required for TYPE.  If there is no special handling\n+# required for TYPE then return the value 0, GDB will then apply the\n+# default rules as laid out in gdbtypes.c:type_align.\n m;ULONGEST;type_align;struct type *type;type;;default_type_align;;0\n \n EOF"
    },
    {
      "sha": "63dec3c8b7dea1473e402dacc204211e0ff0725f",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=5561fc304ff2a93a33a42df63eaf18b92483b307",
      "patch": "@@ -2992,11 +2992,17 @@ type_raw_align (struct type *type)\n unsigned\n type_align (struct type *type)\n {\n+  /* Check alignment provided in the debug information.  */\n   unsigned raw_align = type_raw_align (type);\n   if (raw_align != 0)\n     return raw_align;\n \n-  ULONGEST align = 0;\n+  /* Allow the architecture to provide an alignment.  */\n+  struct gdbarch *arch = get_type_arch (type);\n+  ULONGEST align = gdbarch_type_align (arch, type);\n+  if (align != 0)\n+    return align;\n+\n   switch (TYPE_CODE (type))\n     {\n     case TYPE_CODE_PTR:\n@@ -3013,10 +3019,7 @@ type_align (struct type *type)\n     case TYPE_CODE_DECFLOAT:\n     case TYPE_CODE_METHODPTR:\n     case TYPE_CODE_MEMBERPTR:\n-      {\n-\tstruct gdbarch *arch = get_type_arch (type);\n-\talign = gdbarch_type_align (arch, type);\n-      }\n+      align = type_length_units (check_typedef (type));\n       break;\n \n     case TYPE_CODE_ARRAY:"
    },
    {
      "sha": "bc9ba752edf1f40848449ecf9416f9b6a2b0d72d",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=5561fc304ff2a93a33a42df63eaf18b92483b307",
      "patch": "@@ -8348,7 +8348,7 @@ i386_type_align (struct gdbarch *gdbarch, struct type *type)\n \treturn 4;\n     }\n \n-  return TYPE_LENGTH (type);\n+  return 0;\n }\n \n \f"
    },
    {
      "sha": "ee45db98af634a9d705947c2545cbed428adb7df",
      "filename": "gdb/nios2-tdep.c",
      "status": "modified",
      "additions": 21,
      "deletions": 2,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/nios2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5561fc304ff2a93a33a42df63eaf18b92483b307/gdb/nios2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nios2-tdep.c?ref=5561fc304ff2a93a33a42df63eaf18b92483b307",
      "patch": "@@ -2233,8 +2233,27 @@ nios2_get_longjmp_target (struct frame_info *frame, CORE_ADDR *pc)\n static ULONGEST\n nios2_type_align (struct gdbarch *gdbarch, struct type *type)\n {\n-  type = check_typedef (type);\n-  return std::min<ULONGEST> (4, TYPE_LENGTH (type));\n+  switch (TYPE_CODE (type))\n+    {\n+    case TYPE_CODE_PTR:\n+    case TYPE_CODE_FUNC:\n+    case TYPE_CODE_FLAGS:\n+    case TYPE_CODE_INT:\n+    case TYPE_CODE_RANGE:\n+    case TYPE_CODE_FLT:\n+    case TYPE_CODE_ENUM:\n+    case TYPE_CODE_REF:\n+    case TYPE_CODE_RVALUE_REF:\n+    case TYPE_CODE_CHAR:\n+    case TYPE_CODE_BOOL:\n+    case TYPE_CODE_DECFLOAT:\n+    case TYPE_CODE_METHODPTR:\n+    case TYPE_CODE_MEMBERPTR:\n+      type = check_typedef (type);\n+      return std::min<ULONGEST> (4, TYPE_LENGTH (type));\n+    default:\n+      return 0;\n+    }\n }\n \n /* Implement the gcc_target_options gdbarch method.  */"
    }
  ]
}