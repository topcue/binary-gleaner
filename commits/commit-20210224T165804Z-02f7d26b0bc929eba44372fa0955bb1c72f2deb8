{
  "sha": "02f7d26b0bc929eba44372fa0955bb1c72f2deb8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDJmN2QyNmIwYmM5MjllYmE0NDM3MmZhMDk1NWJiMWM3MmYyZGViOA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-12T12:06:15Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-24T16:58:04Z"
    },
    "message": "gdb: make the target_sections table private within program_space\n\nFollowing on from earlier commits which made access to the\ntarget_sections table more 'const', this commit makes the table\nprivate within the program_space class and provides member functions\nto access the table.\n\nIdeally I would have liked for the new target_sections member\nfunction (on program_space) to return a 'const' reference to the table\nwithin the program_space.  Unfortunately, there are two places in\nsolib-*.c, where code outside of the program_space class modifies the\ntarget_sections table, and so to support this we need to return a\nnon-const reference.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* exec.c (exec_target::close): Call new clear_target_sections\n\tfunction.\n\t(program_space::add_target_sections): Update name of member\n\tvariable.\n\t(program_space::foreach_target_section): New function.\n\t(program_space::add_target_sections): Update name of member\n\tvariable.\n\t(program_space::remove_target_sections): Likewise.\n\t(exec_one_fork): Use new target_sections member function.\n\t(exec_target::get_section_table): Likewise.\n\t(exec_target::files_info): Likewise.\n\t(set_section_command): Use new foreach_target_section member\n\tfunction.\n\t(exec_set_section_address): Likewise.\n\t(exec_target::has_memory): Use new target_sections member\n\tfunction.\n\t* progspace.h (program_space::clear_target_sections): New member\n\tfunction.\n\t(program_space::target_sections): Rename member variable to\n\tm_target_sections, replace with a new member function.\n\t(program_space::foreach_target_section): Declare new member\n\tfunction.\n\t(program_space::m_target_sections): New member variable.\n\t* solib-dsbt.c (scan_dyntag): Use new member function.\n\t* solib-svr4.c (scan_dyntag): Likewise.",
    "tree": {
      "sha": "6c374fb50907499dd222422acddab180d42b0237",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6c374fb50907499dd222422acddab180d42b0237"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/02f7d26b0bc929eba44372fa0955bb1c72f2deb8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02f7d26b0bc929eba44372fa0955bb1c72f2deb8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/02f7d26b0bc929eba44372fa0955bb1c72f2deb8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02f7d26b0bc929eba44372fa0955bb1c72f2deb8/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b91919ac8b5550451093f232a596dfe52a71536c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b91919ac8b5550451093f232a596dfe52a71536c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b91919ac8b5550451093f232a596dfe52a71536c"
    }
  ],
  "stats": {
    "total": 81,
    "additions": 59,
    "deletions": 22
  },
  "files": [
    {
      "sha": "841d51bc3ca42c8448f9e37bff15f2fe35b2d144",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02f7d26b0bc929eba44372fa0955bb1c72f2deb8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02f7d26b0bc929eba44372fa0955bb1c72f2deb8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=02f7d26b0bc929eba44372fa0955bb1c72f2deb8",
      "patch": "@@ -1,3 +1,27 @@\n+2021-02-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* exec.c (exec_target::close): Call new clear_target_sections\n+\tfunction.\n+\t(program_space::add_target_sections): Update name of member\n+\tvariable.\n+\t(program_space::add_target_sections): Update name of member\n+\tvariable.\n+\t(program_space::remove_target_sections): Likewise.\n+\t(exec_one_fork): Use new target_sections member function.\n+\t(exec_target::get_section_table): Likewise.\n+\t(exec_target::files_info): Likewise.\n+\t(set_section_command): Likewise.\n+\t(exec_set_section_address): Likewise.\n+\t(exec_target::has_memory): Use new target_sections member\n+\tfunction.\n+\t* progspace.h (program_space::clear_target_sections): New member\n+\tfunction.\n+\t(program_space::target_sections): Rename member variable to\n+\tm_target_sections, replace with a new member function.\n+\t(program_space::m_target_sections): New member variable.\n+\t* solib-dsbt.c (scan_dyntag): Use new member function.\n+\t* solib-svr4.c (scan_dyntag): Likewise.\n+\n 2021-02-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb/bfd-target.c (class target_bfd) <get_section_table>: Make"
    },
    {
      "sha": "c55a41aa8a19d44519bf0a92dadebcb89e4327a1",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02f7d26b0bc929eba44372fa0955bb1c72f2deb8/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02f7d26b0bc929eba44372fa0955bb1c72f2deb8/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=02f7d26b0bc929eba44372fa0955bb1c72f2deb8",
      "patch": "@@ -156,7 +156,7 @@ exec_target::close ()\n {\n   for (struct program_space *ss : program_spaces)\n     {\n-      ss->target_sections.clear ();\n+      ss->clear_target_sections ();\n       ss->exec_close ();\n     }\n }\n@@ -599,8 +599,8 @@ program_space::add_target_sections (void *owner,\n     {\n       for (const target_section &s : sections)\n \t{\n-\t  target_sections.push_back (s);\n-\t  target_sections.back ().owner = owner;\n+\t  m_target_sections.push_back (s);\n+\t  m_target_sections.back ().owner = owner;\n \t}\n \n       scoped_restore_current_pspace_and_thread restore_pspace_thread;\n@@ -637,9 +637,9 @@ program_space::add_target_sections (struct objfile *objfile)\n       if (bfd_section_size (osect->the_bfd_section) == 0)\n \tcontinue;\n \n-      target_sections.emplace_back (obj_section_addr (osect),\n-\t\t\t\t    obj_section_endaddr (osect),\n-\t\t\t\t    osect->the_bfd_section, (void *) objfile);\n+      m_target_sections.emplace_back (obj_section_addr (osect),\n+\t\t\t\t      obj_section_endaddr (osect),\n+\t\t\t\t      osect->the_bfd_section, (void *) objfile);\n     }\n }\n \n@@ -651,18 +651,18 @@ program_space::remove_target_sections (void *owner)\n {\n   gdb_assert (owner != NULL);\n \n-  auto it = std::remove_if (target_sections.begin (),\n-\t\t\t    target_sections.end (),\n+  auto it = std::remove_if (m_target_sections.begin (),\n+\t\t\t    m_target_sections.end (),\n \t\t\t    [&] (target_section &sect)\n \t\t\t    {\n \t\t\t      return sect.owner == owner;\n \t\t\t    });\n-  target_sections.erase (it, target_sections.end ());\n+  m_target_sections.erase (it, m_target_sections.end ());\n \n   /* If we don't have any more sections to read memory from,\n      remove the file_stratum target from the stack of each\n      inferior sharing the program space.  */\n-  if (target_sections.empty ())\n+  if (m_target_sections.empty ())\n     {\n       scoped_restore_current_pspace_and_thread restore_pspace_thread;\n \n@@ -682,7 +682,7 @@ program_space::remove_target_sections (void *owner)\n void\n exec_on_vfork ()\n {\n-  if (!current_program_space->target_sections.empty ())\n+  if (!current_program_space->target_sections ().empty ())\n     push_target (&exec_ops);\n }\n \n@@ -887,7 +887,7 @@ section_table_xfer_memory_partial (gdb_byte *readbuf, const gdb_byte *writebuf,\n const target_section_table *\n exec_target::get_section_table ()\n {\n-  return &current_program_space->target_sections;\n+  return &current_program_space->target_sections ();\n }\n \n enum target_xfer_status\n@@ -985,7 +985,7 @@ void\n exec_target::files_info ()\n {\n   if (current_program_space->exec_bfd ())\n-    print_section_info (&current_program_space->target_sections,\n+    print_section_info (&current_program_space->target_sections (),\n \t\t\tcurrent_program_space->exec_bfd ());\n   else\n     puts_filtered (_(\"\\t<no file loaded>\\n\"));\n@@ -1010,7 +1010,7 @@ set_section_command (const char *args, int from_tty)\n   /* Parse out new virtual address.  */\n   secaddr = parse_and_eval_address (args);\n \n-  for (target_section &p : current_program_space->target_sections)\n+  for (target_section &p : current_program_space->target_sections ())\n     {\n       if (!strncmp (secname, bfd_section_name (p.the_bfd_section), seclen)\n \t  && bfd_section_name (p.the_bfd_section)[seclen] == '\\0')\n@@ -1036,7 +1036,7 @@ set_section_command (const char *args, int from_tty)\n void\n exec_set_section_address (const char *filename, int index, CORE_ADDR address)\n {\n-  for (target_section &p : current_program_space->target_sections)\n+  for (target_section &p : current_program_space->target_sections ())\n     {\n       if (filename_cmp (filename,\n \t\t\tbfd_get_filename (p.the_bfd_section->owner)) == 0\n@@ -1053,7 +1053,7 @@ exec_target::has_memory ()\n {\n   /* We can provide memory if we have any file/target sections to read\n      from.  */\n-  return !current_program_space->target_sections.empty ();\n+  return !current_program_space->target_sections ().empty ();\n }\n \n gdb::unique_xmalloc_ptr<char>"
    },
    {
      "sha": "790684743d871a95396afa877b9860cc3c1be643",
      "filename": "gdb/progspace.h",
      "status": "modified",
      "additions": 17,
      "deletions": 4,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02f7d26b0bc929eba44372fa0955bb1c72f2deb8/gdb/progspace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02f7d26b0bc929eba44372fa0955bb1c72f2deb8/gdb/progspace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.h?ref=02f7d26b0bc929eba44372fa0955bb1c72f2deb8",
      "patch": "@@ -309,6 +309,18 @@ struct program_space\n      sections.  They are given OBJFILE as the \"owner\".  */\n   void add_target_sections (struct objfile *objfile);\n \n+  /* Clear all target sections from M_TARGET_SECTIONS table.  */\n+  void clear_target_sections ()\n+  {\n+    m_target_sections.clear ();\n+  }\n+\n+  /* Return a reference to the M_TARGET_SECTIONS table.  */\n+  target_section_table &target_sections ()\n+  {\n+    return m_target_sections;\n+  }\n+\n   /* Unique ID number.  */\n   int num = 0;\n \n@@ -359,10 +371,6 @@ struct program_space\n   /* All known objfiles are kept in a linked list.  */\n   std::list<std::shared_ptr<objfile>> objfiles_list;\n \n-  /* The set of target sections matching the sections mapped into\n-     this program space.  Managed by both exec_ops and solib.c.  */\n-  target_section_table target_sections;\n-\n   /* List of shared objects mapped into this space.  Managed by\n      solib.c.  */\n   struct so_list *so_list = NULL;\n@@ -380,6 +388,11 @@ struct program_space\n \n   /* Per pspace data-pointers required by other GDB modules.  */\n   REGISTRY_FIELDS {};\n+\n+private:\n+  /* The set of target sections matching the sections mapped into\n+     this program space.  Managed by both exec_ops and solib.c.  */\n+  target_section_table m_target_sections;\n };\n \n /* An address space.  It is used for comparing if"
    },
    {
      "sha": "4b1b7560e16a7cfb85a1cedf3c4306df32321351",
      "filename": "gdb/solib-dsbt.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02f7d26b0bc929eba44372fa0955bb1c72f2deb8/gdb/solib-dsbt.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02f7d26b0bc929eba44372fa0955bb1c72f2deb8/gdb/solib-dsbt.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-dsbt.c?ref=02f7d26b0bc929eba44372fa0955bb1c72f2deb8",
      "patch": "@@ -425,7 +425,7 @@ scan_dyntag (int dyntag, bfd *abfd, CORE_ADDR *ptr)\n \n   bool found = false;\n   for (const target_section &target_section\n-\t : current_program_space->target_sections)\n+\t : current_program_space->target_sections ())\n     if (sect == target_section.the_bfd_section)\n       {\n \tdyn_addr = target_section.addr;"
    },
    {
      "sha": "c7b3157191f2e625c65deef6f8b19d8657a0d7f2",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02f7d26b0bc929eba44372fa0955bb1c72f2deb8/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02f7d26b0bc929eba44372fa0955bb1c72f2deb8/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=02f7d26b0bc929eba44372fa0955bb1c72f2deb8",
      "patch": "@@ -611,7 +611,7 @@ scan_dyntag (const int desired_dyntag, bfd *abfd, CORE_ADDR *ptr,\n \n   bool found = false;\n   for (const target_section &target_section\n-\t : current_program_space->target_sections)\n+\t : current_program_space->target_sections ())\n     if (sect == target_section.the_bfd_section)\n       {\n \tdyn_addr = target_section.addr;"
    }
  ]
}