{
  "sha": "b312488f1046a1b837561a4adf4323e29377cf12",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjMxMjQ4OGYxMDQ2YTFiODM3NTYxYTRhZGY0MzIzZTI5Mzc3Y2YxMg==",
  "commit": {
    "author": {
      "name": "Faraz Shahbazker",
      "email": "fshahbazker@wavecomp.com",
      "date": "2021-05-04T23:21:16Z"
    },
    "committer": {
      "name": "Faraz Shahbazker",
      "email": "fshahbazker@wavecomp.com",
      "date": "2021-05-22T06:00:57Z"
    },
    "message": "sim: mips: Only truncate sign extension bits for 32-bit target models\n\n64-bit BFD for MIPS applies a standard sign extension on all addresses\nassuming 64-bit target.  These bits are required for 64-bit and can only\nbe safely truncated for 32-bit target models. This partially reverts commit\nb36d953bced0a4fecdde1823abac70ed7038ee95\n\nThe sign-extension logic modeled by BFD is an integral part of the\nMIPS64 architecture spec. It appears in the virtual address map, where\nsign extension allows for 32-bit compatibility segments [1] with 64-bit\naddressing. Truncating these addresses prematurely (commit\nmodels (-DWITH_TARGET_WORD_BITSIZE=64).\n\nIn the ISA itself, direct addressing (Load-Upper-Immediate) and indirect\naddressing (Load-Word) both automatically sign-extend their results. These\ninstructions regenerate the sign-extended addresses even if we don't start\nwith one (see pr gdb/19447).\n\nMoreover, some instructions like ADD*/SUB* have unpredictable behaviour when\nan operand is not correctly sign extended [3]. This affects PC-relative\naddressing in particular, so arithmetic on the link-address generated in the\nreturn address register by a jump-and-link is no longer possible, neither is\nthe use of the PC-relative addressing instructions provided by MIPSR6.\n\n[1] \"MIPS64 Architecture for Programmers Volume III: The MIPS64\n    Privileged Resource Architecture\", Document Number: MD00091,\n    Revision 6.02, December 10, 2015, Section 4.3 \"Virtual Address\n    Spaces\", pp. 29-31\nhttps://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MD00091-2B-MIPS64PRA-AFP-06.03.pdf\n\n[2] \"MIPS64 Architecture for Programmers Volume II-A: The MIPS64\n    Instruction Set Reference Manual\", Document Number: MD00087,\n    Revision 6.06, December 15, 2016, Section 3.2 \"Alphabetical\n    List of Instructions\", pp. 321\nhttps://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MD00087-2B-MIPS64BIS-AFP-6.06.pdf\n\n[3] \"MIPS64 Architecture for Programmers Volume II-A: The MIPS64\n    Instruction Set Reference Manual\", Document Number: MD00087,\n    Revision 6.06, December 15, 2016, Section 3.2 \"Alphabetical\n    List of Instructions\", pp. 56\nhttps://s3-eu-west-1.amazonaws.com/downloads-mips/documents/MD00087-2B-MIPS64BIS-AFP-6.06.pdf\n\n2021-04-23  Faraz Shahbazker  <fshahbazker@wavecomp.com>\n\nsim/mips/ChangeLog:\n\t* interp.c (sim_create_inferior): Only truncate sign extension\n\tbits for 32-bit target models\n.",
    "tree": {
      "sha": "3fcac6c8c64a31fc7d509541bcf1e257ef3c2963",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3fcac6c8c64a31fc7d509541bcf1e257ef3c2963"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b312488f1046a1b837561a4adf4323e29377cf12",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b312488f1046a1b837561a4adf4323e29377cf12",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b312488f1046a1b837561a4adf4323e29377cf12",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b312488f1046a1b837561a4adf4323e29377cf12/comments",
  "author": {
    "login": "farazs-github",
    "id": 57776434,
    "node_id": "MDQ6VXNlcjU3Nzc2NDM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/57776434?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/farazs-github",
    "html_url": "https://github.com/farazs-github",
    "followers_url": "https://api.github.com/users/farazs-github/followers",
    "following_url": "https://api.github.com/users/farazs-github/following{/other_user}",
    "gists_url": "https://api.github.com/users/farazs-github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/farazs-github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/farazs-github/subscriptions",
    "organizations_url": "https://api.github.com/users/farazs-github/orgs",
    "repos_url": "https://api.github.com/users/farazs-github/repos",
    "events_url": "https://api.github.com/users/farazs-github/events{/privacy}",
    "received_events_url": "https://api.github.com/users/farazs-github/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "farazs-github",
    "id": 57776434,
    "node_id": "MDQ6VXNlcjU3Nzc2NDM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/57776434?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/farazs-github",
    "html_url": "https://github.com/farazs-github",
    "followers_url": "https://api.github.com/users/farazs-github/followers",
    "following_url": "https://api.github.com/users/farazs-github/following{/other_user}",
    "gists_url": "https://api.github.com/users/farazs-github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/farazs-github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/farazs-github/subscriptions",
    "organizations_url": "https://api.github.com/users/farazs-github/orgs",
    "repos_url": "https://api.github.com/users/farazs-github/repos",
    "events_url": "https://api.github.com/users/farazs-github/events{/privacy}",
    "received_events_url": "https://api.github.com/users/farazs-github/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39549caef4ae5e5adb5a52518d195f367315e9e9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39549caef4ae5e5adb5a52518d195f367315e9e9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/39549caef4ae5e5adb5a52518d195f367315e9e9"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 11,
    "deletions": 6
  },
  "files": [
    {
      "sha": "123d722bdb56b5dd5bde2f5dbcb52768743e5ff2",
      "filename": "sim/mips/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b312488f1046a1b837561a4adf4323e29377cf12/sim/mips/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b312488f1046a1b837561a4adf4323e29377cf12/sim/mips/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/ChangeLog?ref=b312488f1046a1b837561a4adf4323e29377cf12",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-22  Faraz Shahbazker  <fshahbazker@wavecomp.com>\n+\n+sim/mips/ChangeLog:\n+\t* interp.c (sim_create_inferior): Only truncate sign extension\n+\tbits for 32-bit target models.\n+\n 2021-05-17  Mike Frysinger  <vapier@gentoo.org>\n \n \t* sim-main.h (SIM_HAVE_COMMON_SIM_STATE): Delete."
    },
    {
      "sha": "6e00fd0dbf00dbebf8a021e2c374482c0e258945",
      "filename": "sim/mips/interp.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b312488f1046a1b837561a4adf4323e29377cf12/sim/mips/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b312488f1046a1b837561a4adf4323e29377cf12/sim/mips/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/interp.c?ref=b312488f1046a1b837561a4adf4323e29377cf12",
      "patch": "@@ -1014,12 +1014,11 @@ sim_create_inferior (SIM_DESC sd, struct bfd *abfd,\n \t  sim_cpu *cpu = STATE_CPU (sd, cpu_nr);\n \t  sim_cia pc = bfd_get_start_address (abfd);\n \n-\t  /* We need to undo brain-dead bfd behavior where it sign-extends\n-\t     addresses that are supposed to be unsigned.  See the mips bfd\n-\t     sign_extend_vma setting.  We have to check the ELF data itself\n-\t     in order to handle o32 & n32 ABIs.  */\n-\t  if (abfd->tdata.elf_obj_data->elf_header->e_ident[EI_CLASS] ==\n-\t      ELFCLASS32)\n+\t  /* The 64-bit BFD sign-extends MIPS addresses to model\n+\t     32-bit compatibility segments with 64-bit addressing.\n+\t     These addresses work as is on 64-bit targets but\n+\t     can be truncated for 32-bit targets.  */\n+\t  if (WITH_TARGET_WORD_BITSIZE == 32)\n \t    pc = (unsigned32) pc;\n \n \t  CPU_PC_SET (cpu, pc);"
    }
  ]
}