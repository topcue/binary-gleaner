{
  "sha": "b1458c4569ec9eeb077e928b0eb6b210c7eb647f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjE0NThjNDU2OWVjOWVlYjA3N2U5MjhiMGViNmIyMTBjN2ViNjQ3Zg==",
  "commit": {
    "author": {
      "name": "Maciej W. Rozycki",
      "email": "macro@orcam.me.uk",
      "date": "2021-05-29T01:26:32Z"
    },
    "committer": {
      "name": "Maciej W. Rozycki",
      "email": "macro@orcam.me.uk",
      "date": "2021-05-29T01:26:32Z"
    },
    "message": "MIPS/opcodes: Factor out ISA matching against flags\n\nIn preparation for the next change factor out code for ISA matching\nagainst instruction flags used in MIPS opcode tables, similarly to how\nCPU matching is already done.  No functional change, though for clarity\nsplit the single `if' statement into multiple ones and use temporaries\nrather than repeated expressions.\n\n\tinclude/\n\t* opcode/mips.h (isa_is_member): New inline function, factored\n\tout from...\n\t(opcode_is_member): ... here.",
    "tree": {
      "sha": "d82486e9a8cf3d39b54d5338d6d44b6de311145b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d82486e9a8cf3d39b54d5338d6d44b6de311145b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b1458c4569ec9eeb077e928b0eb6b210c7eb647f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b1458c4569ec9eeb077e928b0eb6b210c7eb647f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b1458c4569ec9eeb077e928b0eb6b210c7eb647f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b1458c4569ec9eeb077e928b0eb6b210c7eb647f/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "dd8444682498d975be541793fe00ababe3223b6d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd8444682498d975be541793fe00ababe3223b6d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dd8444682498d975be541793fe00ababe3223b6d"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 27,
    "deletions": 4
  },
  "files": [
    {
      "sha": "b51782f5093372922391a12114d340c4f1e46877",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1458c4569ec9eeb077e928b0eb6b210c7eb647f/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1458c4569ec9eeb077e928b0eb6b210c7eb647f/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=b1458c4569ec9eeb077e928b0eb6b210c7eb647f",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-29  Maciej W. Rozycki  <macro@orcam.me.uk>\n+\n+\t* opcode/mips.h (isa_is_member): New inline function, factored\n+\tout from...\n+\t(opcode_is_member): ... here.\n+\n 2021-05-29  Maciej W. Rozycki  <macro@orcam.me.uk>\n \n \t* opcode/mips.h: Document `g' and `y' operand codes."
    },
    {
      "sha": "aa6e9d7cee988ae8b99e568be340c5b03ccff0d8",
      "filename": "include/opcode/mips.h",
      "status": "modified",
      "additions": 21,
      "deletions": 4,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b1458c4569ec9eeb077e928b0eb6b210c7eb647f/include/opcode/mips.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b1458c4569ec9eeb077e928b0eb6b210c7eb647f/include/opcode/mips.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/mips.h?ref=b1458c4569ec9eeb077e928b0eb6b210c7eb647f",
      "patch": "@@ -1471,6 +1471,26 @@ cpu_is_member (int cpu, unsigned int mask)\n     }\n }\n \n+/* Return true if the given ISA is included in INSN_* mask MASK.  */\n+\n+static inline bool\n+isa_is_member (int isa, unsigned int mask)\n+{\n+  isa &= INSN_ISA_MASK;\n+  mask &= INSN_ISA_MASK;\n+\n+  if (isa == 0)\n+    return false;\n+\n+  if (mask == 0)\n+    return false;\n+\n+  if (((mips_isa_table[isa - 1] >> (mask - 1)) & 1) == 0)\n+    return false;\n+\n+  return true;\n+}\n+\n /* Test for membership in an ISA including chip specific ISAs.  INSN\n    is pointer to an element of the opcode table; ISA is the specified\n    ISA/ASE bitmask to test against; and CPU is the CPU specific ISA to\n@@ -1483,10 +1503,7 @@ opcode_is_member (const struct mips_opcode *insn, int isa, int ase, int cpu)\n   if (!cpu_is_member (cpu, insn->exclusions))\n     {\n       /* Test for ISA level compatibility.  */\n-      if ((isa & INSN_ISA_MASK) != 0\n-\t  && (insn->membership & INSN_ISA_MASK) != 0\n-\t  && ((mips_isa_table[(isa & INSN_ISA_MASK) - 1]\n-\t       >> ((insn->membership & INSN_ISA_MASK) - 1)) & 1) != 0)\n+      if (isa_is_member (isa, insn->membership))\n \treturn true;\n \n       /* Test for ASE compatibility.  */"
    }
  ]
}