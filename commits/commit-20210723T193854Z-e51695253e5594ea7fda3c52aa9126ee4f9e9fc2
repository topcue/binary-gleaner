{
  "sha": "e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTUxNjk1MjUzZTU1OTRlYTdmZGEzYzUyYWE5MTI2ZWU0ZjllOWZjMg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-19T02:02:47Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-23T19:38:54Z"
    },
    "message": "gdb: add setter/getter for inferior arguments\n\nAdd args/set_args to the inferior class, remove the set_inferior_args\nand get_inferior_args functions, that would just be wrappers around\nthem.\n\nChange-Id: If87d52f3402ce08be26c32897ae8915d9f6d1ea3",
    "tree": {
      "sha": "e5b3aaef55d3f3f35c132f135c844587141c0a9e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e5b3aaef55d3f3f35c132f135c844587141c0a9e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a69e37dc2b1dbb84a1ba924532cbaede648b69e8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a69e37dc2b1dbb84a1ba924532cbaede648b69e8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a69e37dc2b1dbb84a1ba924532cbaede648b69e8"
    }
  ],
  "stats": {
    "total": 79,
    "additions": 40,
    "deletions": 39
  },
  "files": [
    {
      "sha": "0d94dc430403e57c796964530eada55f68c64222",
      "filename": "gdb/elf-none-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/elf-none-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/elf-none-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elf-none-tdep.c?ref=e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
      "patch": "@@ -49,7 +49,7 @@ elf_none_make_corefile_notes (struct gdbarch *gdbarch, bfd *obfd,\n       fname = lbasename (exe);\n       psargs = std::string (exe);\n \n-      const char *infargs = get_inferior_args ();\n+      const char *infargs = current_inferior ()->args ();\n       if (infargs != nullptr)\n \tpsargs += \" \" + std::string (infargs);\n "
    },
    {
      "sha": "141d23662838e2d744caaf550723bfec69a0308e",
      "filename": "gdb/fbsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-tdep.c?ref=e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
      "patch": "@@ -684,7 +684,7 @@ fbsd_make_corefile_notes (struct gdbarch *gdbarch, bfd *obfd, int *note_size)\n       const char *fname = lbasename (get_exec_file (0));\n       std::string psargs = fname;\n \n-      const char *infargs = get_inferior_args ();\n+      const char *infargs = current_inferior ()->args ();\n       if (infargs != NULL)\n \tpsargs = psargs + \" \" + infargs;\n "
    },
    {
      "sha": "1407a3ea46641ad77b866d45f6e2ed275914a46f",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 7,
      "deletions": 27,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
      "patch": "@@ -124,33 +124,12 @@ show_inferior_tty_command (struct ui_file *file, int from_tty,\n \t\t      \"is \\\"%s\\\".\\n\"), inferior_tty);\n }\n \n-const char *\n-get_inferior_args (void)\n-{\n-  if (current_inferior ()->args == nullptr)\n-    return \"\";\n-\n-  return current_inferior ()->args.get ();\n-}\n-\n-/* Set the arguments for the current inferior.  Ownership of\n-   NEWARGS is not transferred.  */\n-\n-void\n-set_inferior_args (const char *newargs)\n-{\n-  if (newargs != nullptr)\n-    current_inferior ()->args = make_unique_xstrdup (newargs);\n-  else\n-    current_inferior ()->args.reset ();\n-}\n-\n void\n set_inferior_args_vector (int argc, char **argv)\n {\n   gdb::array_view<char * const> args (argv, argc);\n   std::string n = construct_inferior_arguments (args);\n-  set_inferior_args (n.c_str ());\n+  current_inferior ()->set_args (n.c_str ());\n }\n \n /* Notice when `set args' is run.  */\n@@ -160,7 +139,7 @@ set_args_command (const char *args, int from_tty, struct cmd_list_element *c)\n {\n   /* CLI has assigned the user-provided value to inferior_args_scratch.\n      Now route it to current inferior.  */\n-  set_inferior_args (inferior_args_scratch);\n+  current_inferior ()->set_args (inferior_args_scratch);\n }\n \n /* Notice when `show args' is run.  */\n@@ -171,7 +150,8 @@ show_args_command (struct ui_file *file, int from_tty,\n {\n   /* Note that we ignore the passed-in value in favor of computing it\n      directly.  */\n-  deprecated_show_value_hack (file, from_tty, c, get_inferior_args ());\n+  deprecated_show_value_hack (file, from_tty, c,\n+\t\t\t      current_inferior ()->args ());\n }\n \n /* Set the inferior current working directory.  If CWD is NULL, unset\n@@ -471,7 +451,7 @@ run_command_1 (const char *args, int from_tty, enum run_how run_how)\n \n   /* If there were other args, beside '&', process them.  */\n   if (args != NULL)\n-    set_inferior_args (args);\n+    current_inferior ()->set_args (args);\n \n   if (from_tty)\n     {\n@@ -480,13 +460,13 @@ run_command_1 (const char *args, int from_tty, enum run_how run_how)\n       if (exec_file)\n \tuiout->field_string (\"execfile\", exec_file);\n       uiout->spaces (1);\n-      uiout->field_string (\"infargs\", get_inferior_args ());\n+      uiout->field_string (\"infargs\", current_inferior ()->args ());\n       uiout->text (\"\\n\");\n       uiout->flush ();\n     }\n \n   run_target->create_inferior (exec_file,\n-\t\t\t       std::string (get_inferior_args ()),\n+\t\t\t       current_inferior ()->args (),\n \t\t\t       current_inferior ()->environment.envp (),\n \t\t\t       from_tty);\n   /* to_create_inferior should push the target, so after this point we"
    },
    {
      "sha": "445b56634b4f6ceff64bd074c519e5a88df618d3",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 29,
      "deletions": 7,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
      "patch": "@@ -204,10 +204,6 @@ extern void post_create_inferior (int from_tty);\n \n extern void attach_command (const char *, int);\n \n-extern const char *get_inferior_args (void);\n-\n-extern void set_inferior_args (const char *);\n-\n extern void set_inferior_args_vector (int, char **);\n \n extern void registers_info (const char *, int);\n@@ -446,6 +442,30 @@ class inferior : public refcounted_object,\n   void set_tty (const char *terminal_name);\n   const char *tty ();\n \n+  /* Set the argument string to use when running this inferior.\n+\n+     Either nullptr or an empty string can be used to represent \"no\n+     arguments\".  */\n+  void set_args (const char *args)\n+  {\n+    if (args != nullptr && args[0] != '\\0')\n+      m_args = make_unique_xstrdup (args);\n+    else\n+      m_args.reset ();\n+  };\n+\n+  /* Get the argument string to use when running this inferior.\n+\n+     The return value is always non-nullptr.  No arguments is represented by\n+     an empty string.  */\n+  const char *args () const\n+  {\n+    if (m_args == nullptr)\n+      return \"\";\n+\n+    return m_args.get ();\n+  }\n+\n   /* Convenient handle (GDB inferior id).  Unique across all\n      inferiors.  */\n   int num = 0;\n@@ -475,9 +495,6 @@ class inferior : public refcounted_object,\n   /* The program space bound to this inferior.  */\n   struct program_space *pspace = NULL;\n \n-  /* The arguments string to use when running.  */\n-  gdb::unique_xmalloc_ptr<char> args;\n-\n   /* The current working directory that will be used when starting\n      this inferior.  */\n   gdb::unique_xmalloc_ptr<char> cwd;\n@@ -569,6 +586,11 @@ class inferior : public refcounted_object,\n \n   /* The list of continuations.  */\n   std::list<std::function<void ()>> m_continuations;\n+\n+  /* The arguments string to use when running.\n+\n+     This is nullptr when there are not args.  */\n+  gdb::unique_xmalloc_ptr<char> m_args;\n };\n \n /* Keep a registry of per-inferior data-pointers required by other GDB"
    },
    {
      "sha": "99e868eed6e6fabef96d628c517ec0be87ec5b52",
      "filename": "gdb/linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.c?ref=e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
      "patch": "@@ -1804,7 +1804,6 @@ linux_fill_prpsinfo (struct elf_internal_linux_prpsinfo *p)\n   char filename[100];\n   /* The basename of the executable.  */\n   const char *basename;\n-  const char *infargs;\n   /* Temporary buffer.  */\n   char *tmpstr;\n   /* The valid states of a process, according to the Linux kernel.  */\n@@ -1848,7 +1847,7 @@ linux_fill_prpsinfo (struct elf_internal_linux_prpsinfo *p)\n   strncpy (p->pr_fname, basename, sizeof (p->pr_fname) - 1);\n   p->pr_fname[sizeof (p->pr_fname) - 1] = '\\0';\n \n-  infargs = get_inferior_args ();\n+  const char *infargs = current_inferior ()->args ();\n \n   /* The arguments of the program.  */\n   std::string psargs = fname.get ();"
    },
    {
      "sha": "0641efde4bf9494ea9deae2c0dce8d8ae09da30a",
      "filename": "gdb/procfs.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/procfs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e51695253e5594ea7fda3c52aa9126ee4f9e9fc2/gdb/procfs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/procfs.c?ref=e51695253e5594ea7fda3c52aa9126ee4f9e9fc2",
      "patch": "@@ -3613,7 +3613,7 @@ procfs_target::make_corefile_notes (bfd *obfd, int *note_size)\n       strncpy (psargs, get_exec_file (0), sizeof (psargs));\n       psargs[sizeof (psargs) - 1] = 0;\n \n-      inf_args = get_inferior_args ();\n+      inf_args = current_inferior ()->args ();\n       if (inf_args && *inf_args\n \t  && (strlen (inf_args)\n \t      < ((int) sizeof (psargs) - (int) strlen (psargs))))"
    }
  ]
}