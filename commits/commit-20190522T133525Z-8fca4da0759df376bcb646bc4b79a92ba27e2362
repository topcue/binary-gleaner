{
  "sha": "8fca4da0759df376bcb646bc4b79a92ba27e2362",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGZjYTRkYTA3NTlkZjM3NmJjYjY0NmJjNGI3OWE5MmJhMjdlMjM2Mg==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-05-22T13:02:17Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-05-22T13:35:25Z"
    },
    "message": "AArch64: Treat pauth ops as nops on non-pauth systems\n\nRunning an address signed binary through GDB on a non pauth system\ngives the following error:\nCall Frame Instruction op 45 in vendor extension space is not handled on this architecture.\n\nInstead GDB should ignore the op, treating it as a nop.\n\nAdd test case for pauth binaries, regardless of whether the target\nsupports it.\n\ngdb/ChangeLog:\n\n\t* aarch64-tdep.c (aarch64_execute_dwarf_cfa_vendor_op): Treat\n\tDW_CFA_AARCH64_negate_ra_state as nop on non pauth targets.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.arch/aarch64-pauth.c: New test.\n\t* gdb.arch/aarch64-pauth.exp: New file.",
    "tree": {
      "sha": "47050d975da4df191152bcad7f775581b045595c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/47050d975da4df191152bcad7f775581b045595c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8fca4da0759df376bcb646bc4b79a92ba27e2362",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8fca4da0759df376bcb646bc4b79a92ba27e2362",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8fca4da0759df376bcb646bc4b79a92ba27e2362",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8fca4da0759df376bcb646bc4b79a92ba27e2362/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b706061469811a16ff2fb8d42f6e98a22e454212",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b706061469811a16ff2fb8d42f6e98a22e454212",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b706061469811a16ff2fb8d42f6e98a22e454212"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 94,
    "deletions": 1
  },
  "files": [
    {
      "sha": "34d97c826650a72f41791cfa3fa2e43ba110b8f3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fca4da0759df376bcb646bc4b79a92ba27e2362/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fca4da0759df376bcb646bc4b79a92ba27e2362/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8fca4da0759df376bcb646bc4b79a92ba27e2362",
      "patch": "@@ -1,3 +1,8 @@\n+2019-05-22  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* aarch64-tdep.c (aarch64_execute_dwarf_cfa_vendor_op): Treat\n+\tDW_CFA_AARCH64_negate_ra_state as nop on non pauth targets.\n+\n 2019-05-22  Alan Hayward  <alan.hayward@arm.com>\n \n \t* NEWS: Add debugredirect and testsuite sections."
    },
    {
      "sha": "96ebce4c352cb694da9b5cf821be5395721dcd62",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fca4da0759df376bcb646bc4b79a92ba27e2362/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fca4da0759df376bcb646bc4b79a92ba27e2362/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=8fca4da0759df376bcb646bc4b79a92ba27e2362",
      "patch": "@@ -1180,8 +1180,12 @@ aarch64_execute_dwarf_cfa_vendor_op (struct gdbarch *gdbarch, gdb_byte op,\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n   struct dwarf2_frame_state_reg *ra_state;\n \n-  if (tdep->has_pauth () && op == DW_CFA_AARCH64_negate_ra_state)\n+  if (op == DW_CFA_AARCH64_negate_ra_state)\n     {\n+      /* On systems without pauth, treat as a nop.  */\n+      if (!tdep->has_pauth ())\n+\treturn true;\n+\n       /* Allocate RA_STATE column if it's not allocated yet.  */\n       fs->regs.alloc_regs (AARCH64_DWARF_PAUTH_RA_STATE + 1);\n "
    },
    {
      "sha": "62adbd7f2ca6f15350bd697c55ed22d27c4e844b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fca4da0759df376bcb646bc4b79a92ba27e2362/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fca4da0759df376bcb646bc4b79a92ba27e2362/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=8fca4da0759df376bcb646bc4b79a92ba27e2362",
      "patch": "@@ -1,3 +1,8 @@\n+2019-05-22  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* gdb.arch/aarch64-pauth.c: New test.\n+\t* gdb.arch/aarch64-pauth.exp: New file.\n+\n 2019-05-22  Alan Hayward  <alan.hayward@arm.com>\n \n \t* README (Re-running Tests Outside The Testsuite): New section."
    },
    {
      "sha": "af9bbe4a935b55ed5deec4545f13d80263fb4931",
      "filename": "gdb/testsuite/gdb.arch/aarch64-pauth.c",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fca4da0759df376bcb646bc4b79a92ba27e2362/gdb/testsuite/gdb.arch/aarch64-pauth.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fca4da0759df376bcb646bc4b79a92ba27e2362/gdb/testsuite/gdb.arch/aarch64-pauth.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-pauth.c?ref=8fca4da0759df376bcb646bc4b79a92ba27e2362",
      "patch": "@@ -0,0 +1,36 @@\n+/* This test program is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+int\n+bar (int b)\n+{\n+  int x = 1; /* break here.  */\n+  return b - x;\n+}\n+\n+int\n+foo (int a)\n+{\n+  int y = bar (9);\n+  return a + y;\n+}\n+\n+int\n+main ()\n+{\n+  foo (5);\n+}"
    },
    {
      "sha": "ff1bf26ab4dcf2f35aa08ca8600eb763c209d810",
      "filename": "gdb/testsuite/gdb.arch/aarch64-pauth.exp",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fca4da0759df376bcb646bc4b79a92ba27e2362/gdb/testsuite/gdb.arch/aarch64-pauth.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fca4da0759df376bcb646bc4b79a92ba27e2362/gdb/testsuite/gdb.arch/aarch64-pauth.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-pauth.exp?ref=8fca4da0759df376bcb646bc4b79a92ba27e2362",
      "patch": "@@ -0,0 +1,43 @@\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test a binary with address signing works regardless of whether the target\n+# supports pauth instructions.  On non pauth systems, all pauth instructions\n+# are treated as nops.\n+\n+if {![is_aarch64_target]} {\n+    verbose \"Skipping ${gdb_test_file_name}.\"\n+    return\n+}\n+\n+# Build program with address signing forced on.\n+standard_testfile\n+set compile_flags {debug}\n+lappend compile_flags \"additional_flags=-msign-return-address=all\"\n+lappend compile_flags \"additional_flags=-fno-inline\"\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile} ${compile_flags}] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+gdb_breakpoint [ gdb_get_line_number \"break here\" ]\n+gdb_continue_to_breakpoint \"break here\" \".*break here.*\"\n+\n+# Ensure we can get a full backtrace, despite the address signing.\n+gdb_test \"bt\" \"^bt\\r\\n#0 +bar *\\\\(b=9\\\\) +at.*\\r\\n#1 +0x\\[0-9a-f\\]* +in +foo \\\\(a=5\\\\).*\\r\\n#2 +0x\\[0-9a-f\\]* +in +main \\\\(\\\\).*\" \"backtrace\""
    }
  ]
}