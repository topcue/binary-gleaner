{
  "sha": "272d4594343349a713f7d8967d90ae2413ecbc30",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjcyZDQ1OTQzNDMzNDlhNzEzZjdkODk2N2Q5MGFlMjQxM2VjYmMzMA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:06:53Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:21:29Z"
    },
    "message": "Introduce complete_nested_command_line\n\nThis adds a completion helper routine that makes it possible for a\ncommand that takes another command as argument, such as \"frame apply\nall COMMAND\" as \"thread apply all COMMAND\", to complete on COMMAND,\nand have the completion machinery recurse and complete COMMAND as if\nyou tried to complete \"(gdb) COMMAND\".  I.e., we'll be able to\ncomplete like this, for example:\n\n (gdb) thread apply all -[TAB]\n -c           -ascending   -q           -s\n (gdb) thread apply all -ascending frame apply all -[TAB]\n -c           -limit       -past-entry  -past-main   -q           -s\n (gdb) thread apply all -ascending frame apply all -past-main print -[TAB]\n -address         -elements        -pretty          -symbol\n -array           -null-stop       -repeats         -union\n -array-indexes   -object          -static-members  -vtbl\n (gdb) thread apply all -ascending frame apply all -past-main print glo[TAB]\n global1         global2\n\nAbove, the completer function understands that \"thread apply all\" is a\ncommand, and then parses \"-ascending\" successfully and understand that\nthe rest of the string is \"thread apply all\"'s operand.  And then, the\nprocess repeats for the \"frame apply\" command, and on and on.\n\ngdb/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* completer.c (complete_nested_command_line): New.\n\t(gdb_completion_word_break_characters_throw): Add assertion.\n\t* completer.h (complete_nested_command_line): Declare.",
    "tree": {
      "sha": "25442ababced86788bc1bdd53f87be7d16daedde",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/25442ababced86788bc1bdd53f87be7d16daedde"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/272d4594343349a713f7d8967d90ae2413ecbc30",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/272d4594343349a713f7d8967d90ae2413ecbc30",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/272d4594343349a713f7d8967d90ae2413ecbc30",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/272d4594343349a713f7d8967d90ae2413ecbc30/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e2a689da55d3feb7b79a141f69c4049112f59c91",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2a689da55d3feb7b79a141f69c4049112f59c91",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e2a689da55d3feb7b79a141f69c4049112f59c91"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 54,
    "deletions": 0
  },
  "files": [
    {
      "sha": "08d038bf37b2d16c7eaa769ce60ba910242ebf74",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/272d4594343349a713f7d8967d90ae2413ecbc30/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/272d4594343349a713f7d8967d90ae2413ecbc30/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=272d4594343349a713f7d8967d90ae2413ecbc30",
      "patch": "@@ -1,3 +1,9 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* completer.c (complete_nested_command_line): New.\n+\t(gdb_completion_word_break_characters_throw): Add assertion.\n+\t* completer.h (complete_nested_command_line): Declare.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* stack.c (parse_backtrace_qualifiers): New."
    },
    {
      "sha": "6892a62bb914ff55f9762322750676ad5a29d757",
      "filename": "gdb/completer.c",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/272d4594343349a713f7d8967d90ae2413ecbc30/gdb/completer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/272d4594343349a713f7d8967d90ae2413ecbc30/gdb/completer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.c?ref=272d4594343349a713f7d8967d90ae2413ecbc30",
      "patch": "@@ -423,6 +423,39 @@ completion_tracker::completes_to_completion_word (const char *word)\n   return false;\n }\n \n+/* See completer.h.  */\n+\n+void\n+complete_nested_command_line (completion_tracker &tracker, const char *text)\n+{\n+  /* Must be called from a custom-word-point completer.  */\n+  gdb_assert (tracker.use_custom_word_point ());\n+\n+  /* Disable the custom word point temporarily, because we want to\n+     probe whether the command we're completing itself uses a custom\n+     word point.  */\n+  tracker.set_use_custom_word_point (false);\n+  size_t save_custom_word_point = tracker.custom_word_point ();\n+\n+  int quote_char = '\\0';\n+  const char *word = completion_find_completion_word (tracker, text,\n+\t\t\t\t\t\t      &quote_char);\n+\n+  if (tracker.use_custom_word_point ())\n+    {\n+      /* The command we're completing uses a custom word point, so the\n+\t tracker already contains the matches.  We're done.  */\n+      return;\n+    }\n+\n+  /* Restore the custom word point settings.  */\n+  tracker.set_custom_word_point (save_custom_word_point);\n+  tracker.set_use_custom_word_point (true);\n+\n+  /* Run the handle_completions completer phase.  */\n+  complete_line (tracker, word, text, strlen (text));\n+}\n+\n /* Complete on linespecs, which might be of two possible forms:\n \n        file:line\n@@ -1894,6 +1927,9 @@ gdb_completion_word_break_characters_throw ()\n     {\n       gdb_assert (tracker.custom_word_point () > 0);\n       rl_point = tracker.custom_word_point () - 1;\n+\n+      gdb_assert (rl_point >= 0 && rl_point < strlen (rl_line_buffer));\n+\n       gdb_custom_word_point_brkchars[0] = rl_line_buffer[rl_point];\n       rl_completer_word_break_characters = gdb_custom_word_point_brkchars;\n       rl_completer_quote_characters = NULL;"
    },
    {
      "sha": "9f8ec47c9f13326073132cd1809318c077af0a89",
      "filename": "gdb/completer.h",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/272d4594343349a713f7d8967d90ae2413ecbc30/gdb/completer.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/272d4594343349a713f7d8967d90ae2413ecbc30/gdb/completer.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.h?ref=272d4594343349a713f7d8967d90ae2413ecbc30",
      "patch": "@@ -611,6 +611,18 @@ extern completion_list complete_source_filenames (const char *text);\n extern void complete_expression (completion_tracker &tracker,\n \t\t\t\t const char *text, const char *word);\n \n+/* Called by custom word point completers that want to recurse into\n+   the completion machinery to complete a command.  Used to complete\n+   COMMAND in \"thread apply all COMMAND\", for example.  Note that\n+   unlike command_completer, this fully recurses into the proper\n+   completer for COMMAND, so that e.g.,\n+\n+     (gdb) thread apply all print -[TAB]\n+\n+   does the right thing and show the print options.  */\n+extern void complete_nested_command_line (completion_tracker &tracker,\n+\t\t\t\t\t  const char *text);\n+\n extern const char *skip_quoted_chars (const char *, const char *,\n \t\t\t\t      const char *);\n "
    }
  ]
}