{
  "sha": "a7400e443cb4c20aea2c1c4641cb56a913ff7235",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTc0MDBlNDQzY2I0YzIwYWVhMmMxYzQ2NDFjYjU2YTkxM2ZmNzIzNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-11-04T15:49:16Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-11-04T15:49:17Z"
    },
    "message": "Fix decoding of multi-dimensional constrained packed arrays\n\nPrinting a multi-dimensional constrained packed array in Ada would not\nshow the correct values.  The bug here is that, when decoding the type\nof such an array, only the innermost dimension's element bitsize would\nbe correct.  For outer dimensions, the bitsize must account for the\nsize of each sub-array, but this was not done.\n\nThis patch fixes the problem by arranging to compute these sizes after\ndecoding the array type.  I've included a bit more test case than is\nstrictly necessary -- the current test here was derived from an\ninternal test, and this patch brings the two into sync.\n\ngdb/ChangeLog\n2020-11-04  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.c (recursively_update_array_bitsize): New function.\n\t(decode_constrained_packed_array_type): Call it.\n\ngdb/testsuite/ChangeLog\n2020-11-04  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/enum_idx_packed.exp: Add tests.\n\t* gdb.ada/enum_idx_packed/foo.adb: Add variables.\n\t* gdb.ada/enum_idx_packed/pck.adb: Add functions.\n\t* gdb.ada/enum_idx_packed/pck.ads: Add types, function\n\tdeclarations.",
    "tree": {
      "sha": "558f8c5a6b7eb54e3182a396ef50a293cf97a5b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/558f8c5a6b7eb54e3182a396ef50a293cf97a5b6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a7400e443cb4c20aea2c1c4641cb56a913ff7235",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7400e443cb4c20aea2c1c4641cb56a913ff7235",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a7400e443cb4c20aea2c1c4641cb56a913ff7235",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7400e443cb4c20aea2c1c4641cb56a913ff7235/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "75fd6a26f893fbee0ebd665612e115c0735274ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75fd6a26f893fbee0ebd665612e115c0735274ab",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/75fd6a26f893fbee0ebd665612e115c0735274ab"
    }
  ],
  "stats": {
    "total": 178,
    "additions": 176,
    "deletions": 2
  },
  "files": [
    {
      "sha": "27950c390e4a8b6398962ae45cecaddb293790a4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a7400e443cb4c20aea2c1c4641cb56a913ff7235",
      "patch": "@@ -1,3 +1,8 @@\n+2020-11-04  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.c (recursively_update_array_bitsize): New function.\n+\t(decode_constrained_packed_array_type): Call it.\n+\n 2020-11-04  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (to_fixed_array_type): Error if"
    },
    {
      "sha": "93d8225ad2d39bd1981638b88f75463e3b4eb2d2",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=a7400e443cb4c20aea2c1c4641cb56a913ff7235",
      "patch": "@@ -2139,6 +2139,35 @@ decode_constrained_packed_array_type (struct type *type)\n   return constrained_packed_array_type (shadow_type, &bits);\n }\n \n+/* Helper function for decode_constrained_packed_array.  Set the field\n+   bitsize on a series of packed arrays.  Returns the number of\n+   elements in TYPE.  */\n+\n+static LONGEST\n+recursively_update_array_bitsize (struct type *type)\n+{\n+  gdb_assert (type->code () == TYPE_CODE_ARRAY);\n+\n+  LONGEST low, high;\n+  if (get_discrete_bounds (type->index_type (), &low, &high) < 0\n+      || low > high)\n+    return 0;\n+  LONGEST our_len = high - low + 1;\n+\n+  struct type *elt_type = TYPE_TARGET_TYPE (type);\n+  if (elt_type->code () == TYPE_CODE_ARRAY)\n+    {\n+      LONGEST elt_len = recursively_update_array_bitsize (elt_type);\n+      LONGEST elt_bitsize = elt_len * TYPE_FIELD_BITSIZE (elt_type, 0);\n+      TYPE_FIELD_BITSIZE (type, 0) = elt_bitsize;\n+\n+      TYPE_LENGTH (type) = ((our_len * elt_bitsize + HOST_CHAR_BIT - 1)\n+\t\t\t    / HOST_CHAR_BIT);\n+    }\n+\n+  return our_len;\n+}\n+\n /* Given that ARR is a struct value *indicating a GNAT constrained packed\n    array, returns a simple array that denotes that array.  Its type is a\n    standard GDB array type except that the BITSIZEs of the array\n@@ -2168,6 +2197,18 @@ decode_constrained_packed_array (struct value *arr)\n       return NULL;\n     }\n \n+  /* Decoding the packed array type could not correctly set the field\n+     bitsizes for any dimension except the innermost, because the\n+     bounds may be variable and were not passed to that function.  So,\n+     we further resolve the array bounds here and then update the\n+     sizes.  */\n+  const gdb_byte *valaddr = value_contents_for_printing (arr);\n+  CORE_ADDR address = value_address (arr);\n+  gdb::array_view<const gdb_byte> view\n+    = gdb::make_array_view (valaddr, TYPE_LENGTH (type));\n+  type = resolve_dynamic_type (type, view, address);\n+  recursively_update_array_bitsize (type);\n+\n   if (type_byte_order (value_type (arr)) == BFD_ENDIAN_BIG\n       && ada_is_modular_type (value_type (arr)))\n     {"
    },
    {
      "sha": "e9d5a23a1ed5f2ddc234d872404820c7a93ec8b6",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a7400e443cb4c20aea2c1c4641cb56a913ff7235",
      "patch": "@@ -1,3 +1,11 @@\n+2020-11-04  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/enum_idx_packed.exp: Add tests.\n+\t* gdb.ada/enum_idx_packed/foo.adb: Add variables.\n+\t* gdb.ada/enum_idx_packed/pck.adb: Add functions.\n+\t* gdb.ada/enum_idx_packed/pck.ads: Add types, function\n+\tdeclarations.\n+\n 2020-11-03  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/dwarf.exp (Dwarf::_handle_DW_TAG): Improve attribute list"
    },
    {
      "sha": "480de71b7c4675fb0eb74815a2e1d4a9d6925344",
      "filename": "gdb/testsuite/gdb.ada/enum_idx_packed.exp",
      "status": "modified",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/testsuite/gdb.ada/enum_idx_packed.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/testsuite/gdb.ada/enum_idx_packed.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/enum_idx_packed.exp?ref=a7400e443cb4c20aea2c1c4641cb56a913ff7235",
      "patch": "@@ -28,7 +28,55 @@ clean_restart ${testfile}\n set bp_location [gdb_get_line_number \"STOP\" ${testdir}/foo.adb]\n runto \"foo.adb:$bp_location\"\n \n+gdb_test \"ptype full\" \\\n+    \"type = array \\\\(black \\\\.\\\\. white\\\\) of boolean <packed: 1-bit elements>\"\n+\n gdb_test \"print full\" \" = \\\\(false, true, false, true, false\\\\)\"\n \n gdb_test \"print full'first\" \" = black\"\n \n+gdb_test \"ptype primary\" \\\n+    \"type = array \\\\(red \\\\.\\\\. blue\\\\) of boolean <packed: 1-bit elements>\"\n+\n+gdb_test \"print primary\" \" = \\\\(red => false, true, false\\\\)\"\n+\n+gdb_test \"print primary'first\" \" = red\"\n+\n+gdb_test \"ptype cold\" \\\n+    \"type = array \\\\(green \\\\.\\\\. blue\\\\) of boolean <packed: 1-bit elements>\"\n+\n+gdb_test \"print cold\" \" = \\\\(green => false, true\\\\)\"\n+\n+gdb_test \"print cold'first\" \" = green\"\n+\n+# Note the bounds values are still not correctly displayed.  So we get\n+# the enum equivalent of \"1 .. 0\" (empty range) as the array ranges.\n+# Accept that for now.\n+gdb_test \"ptype small\" \\\n+    \"array \\\\(red \\\\.\\\\. green\\\\) of boolean <packed: 1-bit elements>\"\n+\n+gdb_test \"print small\" \" = \\\\(red => false, true\\\\)\"\n+\n+gdb_test \"print small'first\" \" = red\"\n+\n+gdb_test \"ptype multi\" \\\n+    \"array \\\\(red \\\\.\\\\. green, low .. medium\\\\) of boolean <packed: 1-bit elements>\"\n+\n+gdb_test \"print multi\" \\\n+    \" = \\\\(red => \\\\(low => true, false\\\\), \\\\(low => true, false\\\\)\\\\)\"\n+\n+gdb_test \"print multi'first\" \" = red\"\n+\n+set base \"\\\\(true, false, true, false, true, false, true, false, true, false\\\\)\"\n+set matrix \"\\\\(\"\n+foreach x {1 2 3 4 5 6 7} {\n+    if {$x > 1} {\n+\tappend matrix \", \"\n+    }\n+    append matrix $base\n+}\n+append matrix \"\\\\)\"\n+\n+gdb_test \"print multi_multi\" \" = \\\\($matrix, $matrix\\\\)\"\n+gdb_test \"print multi_multi(1,3)\" \" = $base\"\n+gdb_test \"print multi_multi(2)\" \" = $matrix\""
    },
    {
      "sha": "e9f30747167627004655ffbe0fd86f3436dfd68b",
      "filename": "gdb/testsuite/gdb.ada/enum_idx_packed/foo.adb",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/testsuite/gdb.ada/enum_idx_packed/foo.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/testsuite/gdb.ada/enum_idx_packed/foo.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/enum_idx_packed/foo.adb?ref=a7400e443cb4c20aea2c1c4641cb56a913ff7235",
      "patch": "@@ -17,8 +17,16 @@ with Pck; use Pck;\n \n procedure Foo is\n    Full : Full_Table := (False, True, False, True, False);\n+   Primary : Primary_Table := (False, True, False);\n+   Cold : Cold_Table := (False, True);\n+   Small : Small_Table := New_Small_Table (Low => Red, High => Green);\n+   Multi : Multi_Table := New_Multi_Table (Red, Green, Low, Medium);\n+   Multi_Multi : Multi_Multi_Table := New_Multi_Multi_Table (1, 2, 1, 7, 1, 10);\n begin\n    Do_Nothing (Full'Address);  -- STOP\n+   Do_Nothing (Primary'Address);\n+   Do_Nothing (Cold'Address);\n+   Do_Nothing (Small'Address);\n+   Do_Nothing (Multi'Address);\n+   Do_Nothing (Multi_Multi'Address);\n end Foo;\n-\n-"
    },
    {
      "sha": "a4e04747526eed42e2417f1a03838ac18b1a4845",
      "filename": "gdb/testsuite/gdb.ada/enum_idx_packed/pck.adb",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/testsuite/gdb.ada/enum_idx_packed/pck.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/testsuite/gdb.ada/enum_idx_packed/pck.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/enum_idx_packed/pck.adb?ref=a7400e443cb4c20aea2c1c4641cb56a913ff7235",
      "patch": "@@ -14,6 +14,46 @@\n --  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n package body Pck is\n+\n+   function New_Small_Table (Low: Color; High: Color) return Small_Table is\n+      Result : Small_Table (Low .. High);\n+   begin\n+      for J in Low .. High loop\n+         Result (J) := (J = Black or J = Green or J = White);\n+      end loop;\n+      return Result;\n+   end New_Small_Table;\n+\n+   function New_Multi_Table (Low, High: Color; LS, HS: Strength)\n+     return Multi_Table is\n+      Result : Multi_Table (Low .. High, LS .. HS);\n+      Next : Boolean := True;\n+   begin\n+      for J in Low .. High loop\n+         for K in LS .. HS loop\n+            Result (J, K) := Next;\n+            Next := not Next;\n+         end loop;\n+      end loop;\n+      return Result;\n+   end New_Multi_Table;\n+\n+   function New_Multi_Multi_Table (L1, H1, L2, H2, L3, H3: Positive)\n+     return Multi_Multi_Table is\n+      Result : Multi_Multi_Table (L1 .. H1, L2 .. H2, L3 .. H3);\n+      Next : Boolean := True;\n+   begin\n+      for J in L1 .. H1 loop\n+         for K in L2 .. H2 loop\n+\t    for L in L3 .. H3 loop\n+\t       Result (J, K, L) := Next;\n+               Next := not Next;\n+            end loop;\n+         end loop;\n+      end loop;\n+      return Result;\n+   end New_Multi_Multi_Table;\n+\n    procedure Do_Nothing (A : System.Address) is\n    begin\n       null;"
    },
    {
      "sha": "fdfd8bbc4c6052f751d95a276037a861a186b1c3",
      "filename": "gdb/testsuite/gdb.ada/enum_idx_packed/pck.ads",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/testsuite/gdb.ada/enum_idx_packed/pck.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7400e443cb4c20aea2c1c4641cb56a913ff7235/gdb/testsuite/gdb.ada/enum_idx_packed/pck.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/enum_idx_packed/pck.ads?ref=a7400e443cb4c20aea2c1c4641cb56a913ff7235",
      "patch": "@@ -16,8 +16,32 @@\n with System;\n package Pck is\n    type Color is (Black, Red, Green, Blue, White);\n+   type Strength is (None, Low, Medium, High);\n+\n    type Full_Table is array (Color) of Boolean;\n    pragma Pack (Full_Table);\n \n+   subtype Primary_Color is Color range Red .. Blue;\n+   type Primary_Table is array (Primary_Color) of Boolean;\n+   pragma Pack (Primary_Table);\n+\n+   type Cold_Color is new Color range Green .. Blue;\n+   type Cold_Table is array (Cold_Color) of Boolean;\n+   pragma Pack (Cold_Table);\n+\n+   type Small_Table is array (Color range <>) of Boolean;\n+   pragma Pack (Small_Table);\n+   function New_Small_Table (Low: Color; High: Color) return Small_Table;\n+\n+   type Multi_Table is array (Color range <>, Strength range <>) of Boolean;\n+   pragma Pack (Multi_Table);\n+   function New_Multi_Table (Low, High: Color; LS, HS: Strength)\n+      return Multi_Table;\n+\n+   type Multi_Multi_Table is array (Positive range <>, Positive range <>, Positive range <>) of Boolean;\n+   pragma Pack (Multi_Multi_Table);\n+   function New_Multi_Multi_Table (L1, H1, L2, H2, L3, H3: Positive)\n+      return Multi_Multi_Table;\n+\n    procedure Do_Nothing (A : System.Address);\n end Pck;"
    }
  ]
}