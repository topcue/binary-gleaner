{
  "sha": "b2668f28eee60cca8d4f271e2fbc5de32a86c7ea",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjI2NjhmMjhlZWU2MGNjYThkNGYyNzFlMmZiYzVkZTMyYTg2YzdlYQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-27T14:39:23Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-05T17:21:41Z"
    },
    "message": "gdb/riscv: write CSRs into baremetal core dumps\n\nUse the current target description to include CSRs into the RISC-V\nbaremetal core dumps.\n\nEvery CSR declared in the current target description will be included\nin the core dump.\n\nIt will be critical for users that they have the same target\ndescription in use when loading the core file as was in use when\nwriting the core file.  This should be fine if the user allows the\ntarget description to be written into the core file.\n\nIn more detail, this commit adds a NT_RISCV_CSR note type.  The\ncontents of this section is a series of either 4-byte (on RV32\ntargets), or 8-byte (on RV64 targets) values.  Every CSR that is\nmentioned in the current target description is written out in the\norder the registers appear in the target description.  As a\nconsequence it is critical that the exact same target description,\nincluding the same register order, is in use when the CSRs are loaded\nfrom the core file.\n\ngdb/ChangeLog:\n\n\t* riscv-none-tdep.c: Add 'user-regs.h' and 'target-description.h'\n\tincludes.\n\t(riscv_csrset): New static global.\n\t(riscv_update_csrmap): New function.\n\t(riscv_iterate_over_regset_sections): Process CSRs.",
    "tree": {
      "sha": "180f7da74c56e584d43773f97353af56ecb36a81",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/180f7da74c56e584d43773f97353af56ecb36a81"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b2668f28eee60cca8d4f271e2fbc5de32a86c7ea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b2668f28eee60cca8d4f271e2fbc5de32a86c7ea",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b2668f28eee60cca8d4f271e2fbc5de32a86c7ea",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b2668f28eee60cca8d4f271e2fbc5de32a86c7ea/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d782d24b3297d0eebdc3c823bd41993e5d670c88",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d782d24b3297d0eebdc3c823bd41993e5d670c88",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d782d24b3297d0eebdc3c823bd41993e5d670c88"
    }
  ],
  "stats": {
    "total": 69,
    "additions": 69,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ab9714a5b60a1c1d609e91acf42f91fd3d147c40",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b2668f28eee60cca8d4f271e2fbc5de32a86c7ea/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b2668f28eee60cca8d4f271e2fbc5de32a86c7ea/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b2668f28eee60cca8d4f271e2fbc5de32a86c7ea",
      "patch": "@@ -1,3 +1,12 @@\n+2021-03-05  Craig Blackmore  <craig.blackmore@embecosm.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* riscv-none-tdep.c: Add 'user-regs.h' and 'target-description.h'\n+\tincludes.\n+\t(riscv_csrset): New static global.\n+\t(riscv_update_csrmap): New function.\n+\t(riscv_iterate_over_regset_sections): Process CSRs.\n+\n 2021-03-05  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* riscv-tdep.c (riscv_feature_name_csr): Define."
    },
    {
      "sha": "3247346ee94e259200db70ebcfa56d73b23f105f",
      "filename": "gdb/riscv-none-tdep.c",
      "status": "modified",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b2668f28eee60cca8d4f271e2fbc5de32a86c7ea/gdb/riscv-none-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b2668f28eee60cca8d4f271e2fbc5de32a86c7ea/gdb/riscv-none-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-none-tdep.c?ref=b2668f28eee60cca8d4f271e2fbc5de32a86c7ea",
      "patch": "@@ -23,6 +23,8 @@\n #include \"riscv-tdep.h\"\n #include \"elf-bfd.h\"\n #include \"regset.h\"\n+#include \"user-regs.h\"\n+#include \"target-descriptions.h\"\n \n #ifdef HAVE_ELF\n #include \"elf-none-tdep.h\"\n@@ -65,6 +67,42 @@ static const struct regset riscv_fregset =\n   riscv_fregmap, riscv_supply_regset, regcache_collect_regset\n };\n \n+/* Define the CSR regset, this is not constant as the regmap field is\n+   updated dynamically based on the current target description.  */\n+\n+static struct regset riscv_csrset =\n+{\n+  nullptr, regcache_supply_regset, regcache_collect_regset\n+};\n+\n+/* Update the regmap field of RISCV_CSRSET based on the CSRs available in\n+   the current target description.  */\n+\n+static void\n+riscv_update_csrmap (struct gdbarch *gdbarch,\n+\t\t     const struct tdesc_feature *feature_csr)\n+{\n+  int i = 0;\n+\n+  /* Release any previously defined map.  */\n+  delete[] ((struct regcache_map_entry *) riscv_csrset.regmap);\n+\n+  /* Now create a register map for every csr found in the target\n+     description.  */\n+  struct regcache_map_entry *riscv_csrmap\n+    = new struct regcache_map_entry[feature_csr->registers.size() + 1];\n+  for (auto &csr : feature_csr->registers)\n+    {\n+      int regnum = user_reg_map_name_to_regnum (gdbarch, csr->name.c_str(),\n+\t\t\t\t\t\tcsr->name.length());\n+      riscv_csrmap[i++] = {1, regnum, 0};\n+    }\n+\n+  /* Mark the end of the array.  */\n+  riscv_csrmap[i] = {0};\n+  riscv_csrset.regmap = riscv_csrmap;\n+}\n+\n /* Implement the \"iterate_over_regset_sections\" gdbarch method.  */\n \n static void\n@@ -84,6 +122,28 @@ riscv_iterate_over_regset_sections (struct gdbarch *gdbarch,\n \t    + register_size (gdbarch, RISCV_CSR_FCSR_REGNUM));\n       cb (\".reg2\", sz, sz, &riscv_fregset, NULL, cb_data);\n     }\n+\n+  /* Read or write the CSRs.  The set of CSRs is defined by the current\n+     target description.  The user is responsible for ensuring that the\n+     same target description is in use when reading the core file as was\n+     in use when writing the core file.  */\n+  const struct target_desc *tdesc = gdbarch_target_desc (gdbarch);\n+\n+  /* Do not dump/load any CSRs if there is no target description or the target\n+     description does not contain any CSRs.  */\n+  if (tdesc != nullptr)\n+    {\n+      const struct tdesc_feature *feature_csr\n+        = tdesc_find_feature (tdesc, riscv_feature_name_csr);\n+      if (feature_csr != nullptr && feature_csr->registers.size () > 0)\n+\t{\n+\t  riscv_update_csrmap (gdbarch, feature_csr);\n+\t  cb (\".reg-riscv-csr\",\n+\t      (feature_csr->registers.size() * riscv_isa_xlen (gdbarch)),\n+\t      (feature_csr->registers.size() * riscv_isa_xlen (gdbarch)),\n+\t      &riscv_csrset, NULL, cb_data);\n+\t}\n+    }\n }\n \n /* Initialize RISC-V bare-metal ABI info.  */"
    }
  ]
}