{
  "sha": "1b555f17476d99f97f33fb4c648d94f7767bcbd7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWI1NTVmMTc0NzZkOTlmOTdmMzNmYjRjNjQ4ZDk0Zjc3NjdiY2JkNw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-27T15:14:09Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:19:40Z"
    },
    "message": "Make load_cu return the loaded dwarf2_cu\n\nIn a subsequent patch, the dwarf2_per_cu_data::cu link will be removed.\ndwarf2_cu objects will instead need to be looked up from a per-objfile\nmap, using the dwarf2_per_cu_data object as the key.\n\nTo make it easier for some callers, this patch makes load_cu return the\ndwarf2_cu it creates.  If the caller needs to use the created dwarf2_cu,\nit will have it available right away, rather than having to do a map\nlookup.\n\nAt the same time, this allows changing queue_and_load_all_dwo_tus to\ntake a dwarf2_cu instead of a dwarf2_per_cu_data.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (load_cu): Return dwarf2_cu.\n\t(dw2_do_instantiate_symtab): Update.\n\t(queue_and_load_all_dwo_tus): Change parameter from\n\tdwarf2_per_cu_data to dwarf2_cu.\n\t(dwarf2_fetch_die_loc_sect_off): Update.\n\t(dwarf2_fetch_constant_bytes): Update.\n\t(dwarf2_fetch_die_type_sect_off): Update.\n\nChange-Id: I8a04c5d1b8cc661b8203f97999258ba8e04e1765",
    "tree": {
      "sha": "16823e3579a5051ecafff0bcccdd68757806334e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/16823e3579a5051ecafff0bcccdd68757806334e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b555f17476d99f97f33fb4c648d94f7767bcbd7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b555f17476d99f97f33fb4c648d94f7767bcbd7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b555f17476d99f97f33fb4c648d94f7767bcbd7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b555f17476d99f97f33fb4c648d94f7767bcbd7/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 43,
    "deletions": 32
  },
  "files": [
    {
      "sha": "13aeada94fd5f71681f65f7d8afcb70e30ef6e89",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b555f17476d99f97f33fb4c648d94f7767bcbd7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b555f17476d99f97f33fb4c648d94f7767bcbd7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1b555f17476d99f97f33fb4c648d94f7767bcbd7",
      "patch": "@@ -1,3 +1,13 @@\n+2020-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* dwarf2/read.c (load_cu): Return dwarf2_cu.\n+\t(dw2_do_instantiate_symtab): Update.\n+\t(queue_and_load_all_dwo_tus): Change parameter from\n+\tdwarf2_per_cu_data to dwarf2_cu.\n+\t(dwarf2_fetch_die_loc_sect_off): Update.\n+\t(dwarf2_fetch_constant_bytes): Update.\n+\t(dwarf2_fetch_die_type_sect_off): Update.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* dwarf2/read.c (process_full_comp_unit,"
    },
    {
      "sha": "a27c351e1cc5eda0ae510c2913fbcf0c21a5b9c3",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 33,
      "deletions": 32,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b555f17476d99f97f33fb4c648d94f7767bcbd7/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b555f17476d99f97f33fb4c648d94f7767bcbd7/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=1b555f17476d99f97f33fb4c648d94f7767bcbd7",
      "patch": "@@ -1676,7 +1676,7 @@ static struct dwo_unit *lookup_dwo_comp_unit\n static struct dwo_unit *lookup_dwo_type_unit\n   (dwarf2_cu *cu, const char *dwo_name, const char *comp_dir);\n \n-static void queue_and_load_all_dwo_tus (struct dwarf2_per_cu_data *);\n+static void queue_and_load_all_dwo_tus (dwarf2_cu *cu);\n \n /* A unique pointer to a dwo_file.  */\n \n@@ -2335,7 +2335,7 @@ create_quick_file_names_table (unsigned int nr_initial_entries)\n    function is unrelated to symtabs, symtab would have to be created afterwards.\n    You should call age_cached_comp_units after processing the CU.  */\n \n-static void\n+static dwarf2_cu *\n load_cu (dwarf2_per_cu_data *per_cu, dwarf2_per_objfile *per_objfile,\n \t bool skip_partial)\n {\n@@ -2344,10 +2344,12 @@ load_cu (dwarf2_per_cu_data *per_cu, dwarf2_per_objfile *per_objfile,\n   else\n     load_full_comp_unit (per_cu, per_objfile, skip_partial, language_minimal);\n \n-  if (per_cu->cu == NULL)\n-    return;  /* Dummy CU.  */\n+  if (per_cu->cu == nullptr)\n+    return nullptr;  /* Dummy CU.  */\n \n   dwarf2_find_base_address (per_cu->cu->dies, per_cu->cu);\n+\n+  return per_cu->cu;\n }\n \n /* Read in the symbols for PER_CU in the context of DWARF\"_PER_OBJFILE.  */\n@@ -2370,19 +2372,19 @@ dw2_do_instantiate_symtab (dwarf2_per_cu_data *per_cu,\n   if (!dwarf2_per_objfile->symtab_set_p (per_cu))\n     {\n       queue_comp_unit (per_cu, dwarf2_per_objfile, language_minimal);\n-      load_cu (per_cu, dwarf2_per_objfile, skip_partial);\n+      dwarf2_cu *cu = load_cu (per_cu, dwarf2_per_objfile, skip_partial);\n \n       /* If we just loaded a CU from a DWO, and we're working with an index\n \t that may badly handle TUs, load all the TUs in that DWO as well.\n \t http://sourceware.org/bugzilla/show_bug.cgi?id=15021  */\n       if (!per_cu->is_debug_types\n-\t  && per_cu->cu != NULL\n-\t  && per_cu->cu->dwo_unit != NULL\n+\t  && cu != NULL\n+\t  && cu->dwo_unit != NULL\n \t  && dwarf2_per_objfile->per_bfd->index_table != NULL\n \t  && dwarf2_per_objfile->per_bfd->index_table->version <= 7\n \t  /* DWP files aren't supported yet.  */\n \t  && get_dwp_file (dwarf2_per_objfile) == NULL)\n-\tqueue_and_load_all_dwo_tus (per_cu);\n+\tqueue_and_load_all_dwo_tus (cu);\n     }\n \n   process_queue (dwarf2_per_objfile);\n@@ -12880,28 +12882,27 @@ queue_and_load_dwo_tu (void **slot, void *info)\n   return 1;\n }\n \n-/* Queue all TUs contained in the DWO of PER_CU to be read in.\n+/* Queue all TUs contained in the DWO of CU to be read in.\n    The DWO may have the only definition of the type, though it may not be\n    referenced anywhere in PER_CU.  Thus we have to load *all* its TUs.\n    http://sourceware.org/bugzilla/show_bug.cgi?id=15021  */\n \n static void\n-queue_and_load_all_dwo_tus (struct dwarf2_per_cu_data *per_cu)\n+queue_and_load_all_dwo_tus (dwarf2_cu *cu)\n {\n   struct dwo_unit *dwo_unit;\n   struct dwo_file *dwo_file;\n \n-  gdb_assert (!per_cu->is_debug_types);\n-  gdb_assert (per_cu->cu != NULL);\n-  gdb_assert (get_dwp_file (per_cu->cu->per_objfile) == NULL);\n+  gdb_assert (cu != nullptr);\n+  gdb_assert (!cu->per_cu->is_debug_types);\n+  gdb_assert (get_dwp_file (cu->per_objfile) == nullptr);\n \n-  dwo_unit = per_cu->cu->dwo_unit;\n+  dwo_unit = cu->dwo_unit;\n   gdb_assert (dwo_unit != NULL);\n \n   dwo_file = dwo_unit->dwo_file;\n   if (dwo_file->tus != NULL)\n-    htab_traverse_noresize (dwo_file->tus.get (), queue_and_load_dwo_tu,\n-\t\t\t    per_cu->cu);\n+    htab_traverse_noresize (dwo_file->tus.get (), queue_and_load_dwo_tu, cu);\n }\n \n /* Read in various DIEs.  */\n@@ -22317,16 +22318,16 @@ dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n \t\t\t       CORE_ADDR (*get_frame_pc) (void *baton),\n \t\t\t       void *baton, bool resolve_abstract_p)\n {\n-  struct dwarf2_cu *cu;\n   struct die_info *die;\n   struct attribute *attr;\n   struct dwarf2_locexpr_baton retval;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n \n-  if (per_cu->cu == NULL)\n-    load_cu (per_cu, dwarf2_per_objfile, false);\n-  cu = per_cu->cu;\n-  if (cu == NULL)\n+  dwarf2_cu *cu = per_cu->cu;\n+  if (cu == nullptr)\n+    cu = load_cu (per_cu, dwarf2_per_objfile, false);\n+\n+  if (cu == nullptr)\n     {\n       /* We shouldn't get here for a dummy CU, but don't crash on the user.\n \t Instead just throw an error, not much else we can do.  */\n@@ -22455,7 +22456,6 @@ dwarf2_fetch_constant_bytes (sect_offset sect_off,\n \t\t\t     obstack *obstack,\n \t\t\t     LONGEST *len)\n {\n-  struct dwarf2_cu *cu;\n   struct die_info *die;\n   struct attribute *attr;\n   const gdb_byte *result = NULL;\n@@ -22464,10 +22464,11 @@ dwarf2_fetch_constant_bytes (sect_offset sect_off,\n   enum bfd_endian byte_order;\n   struct objfile *objfile = per_objfile->objfile;\n \n-  if (per_cu->cu == NULL)\n-    load_cu (per_cu, per_objfile, false);\n-  cu = per_cu->cu;\n-  if (cu == NULL)\n+  dwarf2_cu *cu = per_cu->cu;\n+  if (cu == nullptr)\n+    cu = load_cu (per_cu, per_objfile, false);\n+\n+  if (cu == nullptr)\n     {\n       /* We shouldn't get here for a dummy CU, but don't crash on the user.\n \t Instead just throw an error, not much else we can do.  */\n@@ -22584,14 +22585,14 @@ dwarf2_fetch_die_type_sect_off (sect_offset sect_off,\n \t\t\t\tdwarf2_per_cu_data *per_cu,\n \t\t\t\tdwarf2_per_objfile *per_objfile)\n {\n-  struct dwarf2_cu *cu;\n   struct die_info *die;\n \n-  if (per_cu->cu == NULL)\n-    load_cu (per_cu, per_objfile, false);\n-  cu = per_cu->cu;\n-  if (!cu)\n-    return NULL;\n+  dwarf2_cu *cu = per_cu->cu;\n+  if (cu == nullptr)\n+    cu = load_cu (per_cu, per_objfile, false);\n+\n+  if (cu == nullptr)\n+    return nullptr;\n \n   die = follow_die_offset (sect_off, per_cu->is_dwz, &cu);\n   if (!die)"
    }
  ]
}