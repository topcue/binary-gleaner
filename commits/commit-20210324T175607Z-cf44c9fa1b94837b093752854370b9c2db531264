{
  "sha": "cf44c9fa1b94837b093752854370b9c2db531264",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2Y0NGM5ZmExYjk0ODM3YjA5Mzc1Mjg1NDM3MGI5YzJkYjUzMTI2NA==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-06-15T18:44:20Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-24T17:56:07Z"
    },
    "message": "AArch64: Report tag violation error information\n\nWhenever a memory tag violation occurs, we get a SIGSEGV. Additional\ninformation can be obtained through the siginfo data structure.\n\nFor AArch64 the Linux kernel may expose the fault address and tag\ninformation, if we have a synchronous event. Otherwise there is\nno fault address available.\n\nThe synchronous event looks like this:\n\n--\n(gdb) continue\nContinuing.\n\nProgram received signal SIGSEGV, Segmentation fault\nMemory tag violation while accessing address 0x0500fffff7ff8000\nAllocation tag 0x1.\nLogical tag 0x5\n--\n\nThe asynchronous event looks like this:\n\n--\n(gdb) continue\nContinuing.\n\nProgram received signal SIGSEGV, Segmentation fault\nMemory tag violation\nFault address unavailable.\n--\n\ngdb/ChangeLog:\n\n2021-03-24  Luis Machado  <luis.machado@linaro.org>\n\n\t* aarch64-linux-tdep.c\n\t(aarch64_linux_report_signal_info): New function.\n\t(aarch64_linux_init_abi): Register\n\taarch64_linux_report_signal_info as the report_signal_info hook.\n\t* arch/aarch64-linux.h (SEGV_MTEAERR): Define.\n\t(SEGV_MTESERR): Define.",
    "tree": {
      "sha": "ce9e1af6df3ea2bca1d89937ec62dc4168c5aa00",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ce9e1af6df3ea2bca1d89937ec62dc4168c5aa00"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cf44c9fa1b94837b093752854370b9c2db531264",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf44c9fa1b94837b093752854370b9c2db531264",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cf44c9fa1b94837b093752854370b9c2db531264",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf44c9fa1b94837b093752854370b9c2db531264/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb"
    }
  ],
  "stats": {
    "total": 85,
    "additions": 85,
    "deletions": 0
  },
  "files": [
    {
      "sha": "52e0ddeb2b4d1846361f62d85c3956642ee62208",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cf44c9fa1b94837b093752854370b9c2db531264/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cf44c9fa1b94837b093752854370b9c2db531264/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cf44c9fa1b94837b093752854370b9c2db531264",
      "patch": "@@ -1,3 +1,12 @@\n+2021-03-24  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* aarch64-linux-tdep.c\n+\t(aarch64_linux_report_signal_info): New function.\n+\t(aarch64_linux_init_abi): Register\n+\taarch64_linux_report_signal_info as the report_signal_info hook.\n+\t* arch/aarch64-linux.h (SEGV_MTEAERR): Define.\n+\t(SEGV_MTESERR): Define.\n+\n 2021-03-24  Luis Machado  <luis.machado@linaro.org>\n \n \t* aarch64-linux-tdep.c: Include gdbsupport/selftest.h."
    },
    {
      "sha": "15bbdb253f956a2941a782eda74a6b35b64614e4",
      "filename": "gdb/aarch64-linux-tdep.c",
      "status": "modified",
      "additions": 70,
      "deletions": 0,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cf44c9fa1b94837b093752854370b9c2db531264/gdb/aarch64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cf44c9fa1b94837b093752854370b9c2db531264/gdb/aarch64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-tdep.c?ref=cf44c9fa1b94837b093752854370b9c2db531264",
      "patch": "@@ -1685,6 +1685,73 @@ aarch64_linux_memtag_to_string (struct gdbarch *gdbarch, struct value *tag_value\n   return string_printf (\"0x%s\", phex_nz (tag, sizeof (tag)));\n }\n \n+/* AArch64 Linux implementation of the report_signal_info gdbarch\n+   hook.  Displays information about possible memory tag violations.  */\n+\n+static void\n+aarch64_linux_report_signal_info (struct gdbarch *gdbarch,\n+\t\t\t\t  struct ui_out *uiout,\n+\t\t\t\t  enum gdb_signal siggnal)\n+{\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+\n+  if (!tdep->has_mte () || siggnal != GDB_SIGNAL_SEGV)\n+    return;\n+\n+  CORE_ADDR fault_addr = 0;\n+  long si_code = 0;\n+\n+  try\n+    {\n+      /* Sigcode tells us if the segfault is actually a memory tag\n+\t violation.  */\n+      si_code = parse_and_eval_long (\"$_siginfo.si_code\");\n+\n+      fault_addr\n+\t= parse_and_eval_long (\"$_siginfo._sifields._sigfault.si_addr\");\n+    }\n+  catch (const gdb_exception_error &exception)\n+    {\n+      exception_print (gdb_stderr, exception);\n+      return;\n+    }\n+\n+  /* If this is not a memory tag violation, just return.  */\n+  if (si_code != SEGV_MTEAERR && si_code != SEGV_MTESERR)\n+    return;\n+\n+  uiout->text (\"\\n\");\n+\n+  uiout->field_string (\"sigcode-meaning\", _(\"Memory tag violation\"));\n+\n+  /* For synchronous faults, show additional information.  */\n+  if (si_code == SEGV_MTESERR)\n+    {\n+      uiout->text (_(\" while accessing address \"));\n+      uiout->field_core_addr (\"fault-addr\", gdbarch, fault_addr);\n+      uiout->text (\"\\n\");\n+\n+      gdb::optional<CORE_ADDR> atag = aarch64_mte_get_atag (fault_addr);\n+      gdb_byte ltag = aarch64_mte_get_ltag (fault_addr);\n+\n+      if (!atag.has_value ())\n+\tuiout->text (_(\"Allocation tag unavailable\"));\n+      else\n+\t{\n+\t  uiout->text (_(\"Allocation tag \"));\n+\t  uiout->field_string (\"allocation-tag\", hex_string (*atag));\n+\t  uiout->text (\"\\n\");\n+\t  uiout->text (_(\"Logical tag \"));\n+\t  uiout->field_string (\"logical-tag\", hex_string (ltag));\n+\t}\n+    }\n+  else\n+    {\n+      uiout->text (\"\\n\");\n+      uiout->text (_(\"Fault address unavailable\"));\n+    }\n+}\n+\n static void\n aarch64_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n@@ -1765,6 +1832,9 @@ aarch64_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n \n       /* Register a hook for converting a memory tag to a string.  */\n       set_gdbarch_memtag_to_string (gdbarch, aarch64_linux_memtag_to_string);\n+\n+      set_gdbarch_report_signal_info (gdbarch,\n+\t\t\t\t      aarch64_linux_report_signal_info);\n     }\n \n   /* Initialize the aarch64_linux_record_tdep.  */"
    },
    {
      "sha": "2aa97eb861a16a7b7d5b842ab64bcd5ccf118469",
      "filename": "gdb/arch/aarch64-mte-linux.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cf44c9fa1b94837b093752854370b9c2db531264/gdb/arch/aarch64-mte-linux.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cf44c9fa1b94837b093752854370b9c2db531264/gdb/arch/aarch64-mte-linux.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64-mte-linux.h?ref=cf44c9fa1b94837b093752854370b9c2db531264",
      "patch": "@@ -35,6 +35,12 @@\n #define AARCH64_MTE_LOGICAL_TAG_START_BIT 56\n #define AARCH64_MTE_LOGICAL_MAX_VALUE 0xf\n \n+/* Memory tagging definitions.  */\n+#ifndef SEGV_MTEAERR\n+# define SEGV_MTEAERR 8\n+# define SEGV_MTESERR 9\n+#endif\n+\n /* Memory tag types for AArch64.  */\n enum class aarch64_memtag_type\n {"
    }
  ]
}