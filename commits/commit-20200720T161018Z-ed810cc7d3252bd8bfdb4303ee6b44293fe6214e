{
  "sha": "ed810cc7d3252bd8bfdb4303ee6b44293fe6214e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWQ4MTBjYzdkMzI1MmJkOGJmZGI0MzAzZWU2YjQ0MjkzZmU2MjE0ZQ==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2020-07-20T16:09:58Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2020-07-20T16:10:18Z"
    },
    "message": "Implement the skip_solib_resolver gdbarch hook for FreeBSD architectures.\n\nThe ELF runtime linker on all FreeBSD architectures uses the\n\"_rtld_bind\" entry point for unresolved PTL entries.  FreeBSD/mips has\nan additional entry point called \"_mips_rtld_bind\".\n\ngdb/ChangeLog:\n\n\t* fbsd-tdep.c (fbsd_skip_solib_resolver): New function.\n\t(fbsd_init_abi): Install gdbarch \"skip_solib_resolver\" method.\n\t* fbsd-tdep.h (fbsd_skip_solib_resolver): New prototype.\n\t* mips-fbsd-tdep.c (mips_fbsd_skip_solib_resolver): New function.\n\t(mips_fbsd_init_abi): Install gdbarch \"skip_solib_resolver\"\n\tmethod.",
    "tree": {
      "sha": "93cc390389149769497f84234c5ef0be3b4f092f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/93cc390389149769497f84234c5ef0be3b4f092f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ae5369e773c341ab55a130fffb4678bb3595d692",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae5369e773c341ab55a130fffb4678bb3595d692",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ae5369e773c341ab55a130fffb4678bb3595d692"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 44,
    "deletions": 0
  },
  "files": [
    {
      "sha": "fad4608002f6b3abfcedc977e512f1e6b552065b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ed810cc7d3252bd8bfdb4303ee6b44293fe6214e",
      "patch": "@@ -1,3 +1,12 @@\n+2020-07-20  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* fbsd-tdep.c (fbsd_skip_solib_resolver): New function.\n+\t(fbsd_init_abi): Install gdbarch \"skip_solib_resolver\" method.\n+\t* fbsd-tdep.h (fbsd_skip_solib_resolver): New prototype.\n+\t* mips-fbsd-tdep.c (mips_fbsd_skip_solib_resolver): New function.\n+\t(mips_fbsd_init_abi): Install gdbarch \"skip_solib_resolver\"\n+\tmethod.\n+\n 2020-07-20 Ludovic Court\u00e8s  <ludo@gnu.org>\n \n \t* guile/scm-math.c (vlscm_integer_fits_p): Use 'uintmax_t'"
    },
    {
      "sha": "ca397fa8e0f7e9ceaecd08fbb589cc044e4c2cc8",
      "filename": "gdb/fbsd-tdep.c",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e/gdb/fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e/gdb/fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-tdep.c?ref=ed810cc7d3252bd8bfdb4303ee6b44293fe6214e",
      "patch": "@@ -21,6 +21,7 @@\n #include \"auxv.h\"\n #include \"gdbcore.h\"\n #include \"inferior.h\"\n+#include \"objfiles.h\"\n #include \"regcache.h\"\n #include \"regset.h\"\n #include \"gdbthread.h\"\n@@ -2071,6 +2072,18 @@ fbsd_get_thread_local_address (struct gdbarch *gdbarch, CORE_ADDR dtv_addr,\n   return addr + offset;\n }\n \n+/* See fbsd-tdep.h.  */\n+\n+CORE_ADDR\n+fbsd_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)\n+{\n+  struct bound_minimal_symbol msym = lookup_bound_minimal_symbol (\"_rtld_bind\");\n+  if (msym.minsym != nullptr && BMSYMBOL_VALUE_ADDRESS (msym) == pc)\n+    return frame_unwind_caller_pc (get_current_frame ());\n+\n+  return 0;\n+}\n+\n /* To be called from GDB_OSABI_FREEBSD handlers. */\n \n void\n@@ -2085,6 +2098,7 @@ fbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   set_gdbarch_get_siginfo_type (gdbarch, fbsd_get_siginfo_type);\n   set_gdbarch_gdb_signal_from_target (gdbarch, fbsd_gdb_signal_from_target);\n   set_gdbarch_gdb_signal_to_target (gdbarch, fbsd_gdb_signal_to_target);\n+  set_gdbarch_skip_solib_resolver (gdbarch, fbsd_skip_solib_resolver);\n \n   /* `catch syscall' */\n   set_xml_syscall_file_name (gdbarch, \"syscalls/freebsd.xml\");"
    },
    {
      "sha": "e8e49dc25f7c05dd51ae514dd15f3420a287ec60",
      "filename": "gdb/fbsd-tdep.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e/gdb/fbsd-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e/gdb/fbsd-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-tdep.h?ref=ed810cc7d3252bd8bfdb4303ee6b44293fe6214e",
      "patch": "@@ -71,4 +71,9 @@ extern CORE_ADDR fbsd_get_thread_local_address (struct gdbarch *gdbarch,\n \t\t\t\t\t\tCORE_ADDR lm_addr,\n \t\t\t\t\t\tCORE_ADDR offset);\n \n+/* Implement the \"skip_solib_resolver\" gdbarch method.  */\n+\n+extern CORE_ADDR fbsd_skip_solib_resolver (struct gdbarch *gdbarch,\n+\t\t\t\t\t   CORE_ADDR pc);\n+\n #endif /* fbsd-tdep.h */"
    },
    {
      "sha": "ba666f1dc543bc592b6239eae2a409b24ba3c3ed",
      "filename": "gdb/mips-fbsd-tdep.c",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e/gdb/mips-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed810cc7d3252bd8bfdb4303ee6b44293fe6214e/gdb/mips-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-fbsd-tdep.c?ref=ed810cc7d3252bd8bfdb4303ee6b44293fe6214e",
      "patch": "@@ -462,6 +462,20 @@ static const struct tramp_frame mips64_fbsd_sigframe =\n \n /* Shared library support.  */\n \n+/* FreeBSD/mips can use an alternate routine in the runtime linker to\n+   resolve functions.  */\n+\n+static CORE_ADDR\n+mips_fbsd_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)\n+{\n+  struct bound_minimal_symbol msym\n+    = lookup_bound_minimal_symbol (\"_mips_rtld_bind\");\n+  if (msym.minsym != nullptr && BMSYMBOL_VALUE_ADDRESS (msym) == pc)\n+    return frame_unwind_caller_pc (get_current_frame ());\n+\n+  return fbsd_skip_solib_resolver (gdbarch, pc);\n+}\n+\n /* FreeBSD/mips uses a slightly different `struct link_map' than the\n    other FreeBSD platforms as it includes an additional `l_off'\n    member.  */\n@@ -546,6 +560,8 @@ mips_fbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   set_gdbarch_iterate_over_regset_sections\n     (gdbarch, mips_fbsd_iterate_over_regset_sections);\n \n+  set_gdbarch_skip_solib_resolver (gdbarch, mips_fbsd_skip_solib_resolver);\n+\n   /* FreeBSD/mips has SVR4-style shared libraries.  */\n   set_solib_svr4_fetch_link_map_offsets\n     (gdbarch, (gdbarch_ptr_bit (gdbarch) == 32 ?"
    }
  ]
}