{
  "sha": "dbe692af2d1814100748b18a5dd70214e8611107",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGJlNjkyYWYyZDE4MTQxMDA3NDhiMThhNWRkNzAyMTRlODYxMTEwNw==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-06-19T20:31:23Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-24T17:47:05Z"
    },
    "message": "New target methods for memory tagging support\n\nThis patch starts adding some of the generic pieces to accomodate memory\ntagging.\n\nWe have three new target methods:\n\n- supports_memory_tagging: Checks if the target supports memory tagging. This\n  defaults to false for targets that don't support memory tagging.\n\n- fetch_memtags: Fetches the allocation tags associated with a particular\n  memory range [address, address + length).\n\n  The default is to return 0 without returning any tags. This should only\n  be called if memory tagging is supported.\n\n- store_memtags: Stores a set of allocation tags for a particular memory\n  range [address, address + length).\n\n  The default is to return 0. This should only\n  be called if memory tagging is supported.\n\ngdb/ChangeLog:\n\n2021-03-24  Luis Machado  <luis.machado@linaro.org>\n\n\t* remote.c (remote_target) <supports_memory_tagging>: New method\n\toverride.\n\t<fetch_memtags>: New method override.\n\t<store_memtags>: New method override.\n\t(remote_target::supports_memory_tagging): New method.\n\t(remote_target::fetch_memtags): New method.\n\t(remote_target::store_memtags): New method.\n\t* target-delegates.c: Regenerate.\n\t* target.h (struct target_ops) <supports_memory_tagging>: New virtual\n\tmethod.\n\t<fetch_memtags>: New virtual method.\n\t<store_memtags>: New virtual method.\n\t(target_supports_memory_tagging): Define.\n\t(target_fetch_memtags): Define.\n\t(target_store_memtags): Define.\n\t* target-debug.h (target_debug_print_size_t)\n\t(target_debug_print_const_gdb_byte_vector_r)\n\t(target_debug_print_gdb_byte_vector_r): New functions.",
    "tree": {
      "sha": "c5f5e256ce4084fb482161faede8e647960742ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c5f5e256ce4084fb482161faede8e647960742ba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dbe692af2d1814100748b18a5dd70214e8611107",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dbe692af2d1814100748b18a5dd70214e8611107",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dbe692af2d1814100748b18a5dd70214e8611107",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dbe692af2d1814100748b18a5dd70214e8611107/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9a182d0461cc34912da51f445a242b392389edd6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a182d0461cc34912da51f445a242b392389edd6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9a182d0461cc34912da51f445a242b392389edd6"
    }
  ],
  "stats": {
    "total": 215,
    "additions": 215,
    "deletions": 0
  },
  "files": [
    {
      "sha": "9975cd6b308be8ccdd885b095af5b5e366449df6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dbe692af2d1814100748b18a5dd70214e8611107/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dbe692af2d1814100748b18a5dd70214e8611107/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=dbe692af2d1814100748b18a5dd70214e8611107",
      "patch": "@@ -1,3 +1,24 @@\n+2021-03-24  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* remote.c (remote_target) <supports_memory_tagging>: New method\n+\toverride.\n+\t<fetch_memtags>: New method override.\n+\t<store_memtags>: New method override.\n+\t(remote_target::supports_memory_tagging): New method.\n+\t(remote_target::fetch_memtags): New method.\n+\t(remote_target::store_memtags): New method.\n+\t* target-delegates.c: Regenerate.\n+\t* target.h (struct target_ops) <supports_memory_tagging>: New virtual\n+\tmethod.\n+\t<fetch_memtags>: New virtual method.\n+\t<store_memtags>: New virtual method.\n+\t(target_supports_memory_tagging): Define.\n+\t(target_fetch_memtags): Define.\n+\t(target_store_memtags): Define.\n+\t* target-debug.h (target_debug_print_size_t)\n+\t(target_debug_print_const_gdb_byte_vector_r)\n+\t(target_debug_print_gdb_byte_vector_r): New functions.\n+\n 2021-03-23  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* target.h (target_longname): Remove."
    },
    {
      "sha": "eb6ef0407d27438b4c202de7afa8b302fc57af03",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dbe692af2d1814100748b18a5dd70214e8611107/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dbe692af2d1814100748b18a5dd70214e8611107/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=dbe692af2d1814100748b18a5dd70214e8611107",
      "patch": "@@ -690,6 +690,14 @@ class remote_target : public process_stratum_target\n   int remove_exec_catchpoint (int) override;\n   enum exec_direction_kind execution_direction () override;\n \n+  bool supports_memory_tagging () override;\n+\n+  bool fetch_memtags (CORE_ADDR address, size_t len,\n+\t\t      gdb::byte_vector &tags, int type) override;\n+\n+  bool store_memtags (CORE_ADDR address, size_t len,\n+\t\t      const gdb::byte_vector &tags, int type) override;\n+\n public: /* Remote specific methods.  */\n \n   void remote_download_command_source (int num, ULONGEST addr,\n@@ -14489,6 +14497,32 @@ show_remote_timeout (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n+/* Implement the \"supports_memory_tagging\" target_ops method.  */\n+\n+bool\n+remote_target::supports_memory_tagging ()\n+{\n+  return false;\n+}\n+\n+/* Implement the \"fetch_memtags\" target_ops method.  */\n+\n+bool\n+remote_target::fetch_memtags (CORE_ADDR address, size_t len,\n+\t\t\t      gdb::byte_vector &tags, int type)\n+{\n+  return false;\n+}\n+\n+/* Implement the \"store_memtags\" target_ops method.  */\n+\n+bool\n+remote_target::store_memtags (CORE_ADDR address, size_t len,\n+\t\t\t      const gdb::byte_vector &tags, int type)\n+{\n+  return false;\n+}\n+\n void _initialize_remote ();\n void\n _initialize_remote ()"
    },
    {
      "sha": "c3004c2c229b556ca558255b2f98ae8777722f94",
      "filename": "gdb/target-debug.h",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dbe692af2d1814100748b18a5dd70214e8611107/gdb/target-debug.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dbe692af2d1814100748b18a5dd70214e8611107/gdb/target-debug.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-debug.h?ref=dbe692af2d1814100748b18a5dd70214e8611107",
      "patch": "@@ -212,4 +212,28 @@ target_debug_print_signals (gdb::array_view<const unsigned char> sigs)\n   fputs_unfiltered (\" }\", gdb_stdlog);\n }\n \n+static void\n+target_debug_print_size_t (size_t size)\n+{\n+  fprintf_unfiltered (gdb_stdlog, \"%s\", pulongest (size));\n+}\n+\n+static void\n+target_debug_print_const_gdb_byte_vector_r (const gdb::byte_vector &vector)\n+{\n+  fputs_unfiltered (\"{\", gdb_stdlog);\n+\n+  for (size_t i = 0; i < vector.size (); i++)\n+    {\n+      fprintf_unfiltered (gdb_stdlog, \" %s\",\n+\t\t\t  phex_nz (vector[i], 1));\n+    }\n+  fputs_unfiltered (\" }\", gdb_stdlog);\n+}\n+\n+static void\n+target_debug_print_gdb_byte_vector_r (gdb::byte_vector &vector)\n+{\n+  target_debug_print_const_gdb_byte_vector_r (vector);\n+}\n #endif /* TARGET_DEBUG_H */"
    },
    {
      "sha": "74103bfa3fd00e3cfb1627a75bd992cc6437b67c",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 95,
      "deletions": 0,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dbe692af2d1814100748b18a5dd70214e8611107/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dbe692af2d1814100748b18a5dd70214e8611107/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=dbe692af2d1814100748b18a5dd70214e8611107",
      "patch": "@@ -173,6 +173,9 @@ struct dummy_target : public target_ops\n   const struct frame_unwind *get_tailcall_unwinder () override;\n   void prepare_to_generate_core () override;\n   void done_generating_core () override;\n+  bool supports_memory_tagging () override;\n+  bool fetch_memtags (CORE_ADDR arg0, size_t arg1, gdb::byte_vector &arg2, int arg3) override;\n+  bool store_memtags (CORE_ADDR arg0, size_t arg1, const gdb::byte_vector &arg2, int arg3) override;\n };\n \n struct debug_target : public target_ops\n@@ -344,6 +347,9 @@ struct debug_target : public target_ops\n   const struct frame_unwind *get_tailcall_unwinder () override;\n   void prepare_to_generate_core () override;\n   void done_generating_core () override;\n+  bool supports_memory_tagging () override;\n+  bool fetch_memtags (CORE_ADDR arg0, size_t arg1, gdb::byte_vector &arg2, int arg3) override;\n+  bool store_memtags (CORE_ADDR arg0, size_t arg1, const gdb::byte_vector &arg2, int arg3) override;\n };\n \n void\n@@ -4413,3 +4419,92 @@ debug_target::done_generating_core ()\n   fputs_unfiltered (\")\\n\", gdb_stdlog);\n }\n \n+bool\n+target_ops::supports_memory_tagging ()\n+{\n+  return this->beneath ()->supports_memory_tagging ();\n+}\n+\n+bool\n+dummy_target::supports_memory_tagging ()\n+{\n+  return false;\n+}\n+\n+bool\n+debug_target::supports_memory_tagging ()\n+{\n+  bool result;\n+  fprintf_unfiltered (gdb_stdlog, \"-> %s->supports_memory_tagging (...)\\n\", this->beneath ()->shortname ());\n+  result = this->beneath ()->supports_memory_tagging ();\n+  fprintf_unfiltered (gdb_stdlog, \"<- %s->supports_memory_tagging (\", this->beneath ()->shortname ());\n+  fputs_unfiltered (\") = \", gdb_stdlog);\n+  target_debug_print_bool (result);\n+  fputs_unfiltered (\"\\n\", gdb_stdlog);\n+  return result;\n+}\n+\n+bool\n+target_ops::fetch_memtags (CORE_ADDR arg0, size_t arg1, gdb::byte_vector &arg2, int arg3)\n+{\n+  return this->beneath ()->fetch_memtags (arg0, arg1, arg2, arg3);\n+}\n+\n+bool\n+dummy_target::fetch_memtags (CORE_ADDR arg0, size_t arg1, gdb::byte_vector &arg2, int arg3)\n+{\n+  tcomplain ();\n+}\n+\n+bool\n+debug_target::fetch_memtags (CORE_ADDR arg0, size_t arg1, gdb::byte_vector &arg2, int arg3)\n+{\n+  bool result;\n+  fprintf_unfiltered (gdb_stdlog, \"-> %s->fetch_memtags (...)\\n\", this->beneath ()->shortname ());\n+  result = this->beneath ()->fetch_memtags (arg0, arg1, arg2, arg3);\n+  fprintf_unfiltered (gdb_stdlog, \"<- %s->fetch_memtags (\", this->beneath ()->shortname ());\n+  target_debug_print_CORE_ADDR (arg0);\n+  fputs_unfiltered (\", \", gdb_stdlog);\n+  target_debug_print_size_t (arg1);\n+  fputs_unfiltered (\", \", gdb_stdlog);\n+  target_debug_print_gdb_byte_vector_r (arg2);\n+  fputs_unfiltered (\", \", gdb_stdlog);\n+  target_debug_print_int (arg3);\n+  fputs_unfiltered (\") = \", gdb_stdlog);\n+  target_debug_print_bool (result);\n+  fputs_unfiltered (\"\\n\", gdb_stdlog);\n+  return result;\n+}\n+\n+bool\n+target_ops::store_memtags (CORE_ADDR arg0, size_t arg1, const gdb::byte_vector &arg2, int arg3)\n+{\n+  return this->beneath ()->store_memtags (arg0, arg1, arg2, arg3);\n+}\n+\n+bool\n+dummy_target::store_memtags (CORE_ADDR arg0, size_t arg1, const gdb::byte_vector &arg2, int arg3)\n+{\n+  tcomplain ();\n+}\n+\n+bool\n+debug_target::store_memtags (CORE_ADDR arg0, size_t arg1, const gdb::byte_vector &arg2, int arg3)\n+{\n+  bool result;\n+  fprintf_unfiltered (gdb_stdlog, \"-> %s->store_memtags (...)\\n\", this->beneath ()->shortname ());\n+  result = this->beneath ()->store_memtags (arg0, arg1, arg2, arg3);\n+  fprintf_unfiltered (gdb_stdlog, \"<- %s->store_memtags (\", this->beneath ()->shortname ());\n+  target_debug_print_CORE_ADDR (arg0);\n+  fputs_unfiltered (\", \", gdb_stdlog);\n+  target_debug_print_size_t (arg1);\n+  fputs_unfiltered (\", \", gdb_stdlog);\n+  target_debug_print_const_gdb_byte_vector_r (arg2);\n+  fputs_unfiltered (\", \", gdb_stdlog);\n+  target_debug_print_int (arg3);\n+  fputs_unfiltered (\") = \", gdb_stdlog);\n+  target_debug_print_bool (result);\n+  fputs_unfiltered (\"\\n\", gdb_stdlog);\n+  return result;\n+}\n+"
    },
    {
      "sha": "dde222b72ec0a786cbec6ddce1e7bedb57942f68",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dbe692af2d1814100748b18a5dd70214e8611107/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dbe692af2d1814100748b18a5dd70214e8611107/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=dbe692af2d1814100748b18a5dd70214e8611107",
      "patch": "@@ -1267,6 +1267,38 @@ struct target_ops\n     /* Cleanup after generating a core file.  */\n     virtual void done_generating_core ()\n       TARGET_DEFAULT_IGNORE ();\n+\n+    /* Returns true if the target supports memory tagging, false otherwise.  */\n+    virtual bool supports_memory_tagging ()\n+      TARGET_DEFAULT_RETURN (false);\n+\n+    /* Return the allocated memory tags of type TYPE associated with\n+       [ADDRESS, ADDRESS + LEN) in TAGS.\n+\n+       LEN is the number of bytes in the memory range.  TAGS is a vector of\n+       bytes containing the tags found in the above memory range.\n+\n+       It is up to the architecture/target to interpret the bytes in the TAGS\n+       vector and read the tags appropriately.\n+\n+       Returns true if fetching the tags succeeded and false otherwise.  */\n+    virtual bool fetch_memtags (CORE_ADDR address, size_t len,\n+\t\t\t\tgdb::byte_vector &tags, int type)\n+      TARGET_DEFAULT_NORETURN (tcomplain ());\n+\n+    /* Write the allocation tags of type TYPE contained in TAGS to the memory\n+       range [ADDRESS, ADDRESS + LEN).\n+\n+       LEN is the number of bytes in the memory range.  TAGS is a vector of\n+       bytes containing the tags to be stored to the memory range.\n+\n+       It is up to the architecture/target to interpret the bytes in the TAGS\n+       vector and store them appropriately.\n+\n+       Returns true if storing the tags succeeded and false otherwise.  */\n+    virtual bool store_memtags (CORE_ADDR address, size_t len,\n+\t\t\t\tconst gdb::byte_vector &tags, int type)\n+      TARGET_DEFAULT_NORETURN (tcomplain ());\n   };\n \n /* Deleter for std::unique_ptr.  See comments in\n@@ -2318,6 +2350,15 @@ extern gdb::unique_xmalloc_ptr<char> target_fileio_read_stralloc\n #define target_augmented_libraries_svr4_read() \\\n   (current_top_target ()->augmented_libraries_svr4_read) ()\n \n+#define target_supports_memory_tagging() \\\n+  ((current_top_target ()->supports_memory_tagging) ())\n+\n+#define target_fetch_memtags(address, len, tags, type) \\\n+  (current_top_target ()->fetch_memtags) ((address), (len), (tags), (type))\n+\n+#define target_store_memtags(address, len, tags, type) \\\n+  (current_top_target ()->store_memtags) ((address), (len), (tags), (type))\n+\n /* Command logging facility.  */\n \n #define target_log_command(p)\t\t\t\t\t\\"
    }
  ]
}