{
  "sha": "6540edd52cc061071e1ad02c381e85de41bded1f",
  "node_id": "C_kwDOANOeidoAKDY1NDBlZGQ1MmNjMDYxMDcxZTFhZDAyYzM4MWU4NWRlNDFiZGVkMWY",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-01-07T03:13:56Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-01-07T03:16:01Z"
    },
    "message": "Move elf_backend_always_size_sections earlier\n\n\t* elflink.c (bfd_elf_size_dynamic_sections): Move plt/got init\n\tearlier and call elf_backend_always_size_sections at the start\n\tof this function.",
    "tree": {
      "sha": "6b1c56b90dd7bdec1509deb11f096be389ce8d38",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6b1c56b90dd7bdec1509deb11f096be389ce8d38"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6540edd52cc061071e1ad02c381e85de41bded1f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6540edd52cc061071e1ad02c381e85de41bded1f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6540edd52cc061071e1ad02c381e85de41bded1f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6540edd52cc061071e1ad02c381e85de41bded1f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d794dc3eb453af6d21d7d5c751ad004ba30c2e8d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d794dc3eb453af6d21d7d5c751ad004ba30c2e8d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d794dc3eb453af6d21d7d5c751ad004ba30c2e8d"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 15,
    "deletions": 15
  },
  "files": [
    {
      "sha": "08c161713cc7162eebded5ceeccb6e2fe587f39e",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6540edd52cc061071e1ad02c381e85de41bded1f/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6540edd52cc061071e1ad02c381e85de41bded1f/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=6540edd52cc061071e1ad02c381e85de41bded1f",
      "patch": "@@ -6506,6 +6506,21 @@ bfd_elf_size_dynamic_sections (bfd *output_bfd,\n   if (!is_elf_hash_table (info->hash))\n     return true;\n \n+  /* Any syms created from now on start with -1 in\n+     got.refcount/offset and plt.refcount/offset.  */\n+  elf_hash_table (info)->init_got_refcount\n+    = elf_hash_table (info)->init_got_offset;\n+  elf_hash_table (info)->init_plt_refcount\n+    = elf_hash_table (info)->init_plt_offset;\n+\n+  bed = get_elf_backend_data (output_bfd);\n+\n+  /* The backend may have to create some sections regardless of whether\n+     we're dynamic or not.  */\n+  if (bed->elf_backend_always_size_sections\n+      && ! (*bed->elf_backend_always_size_sections) (output_bfd, info))\n+    return false;\n+\n   dynobj = elf_hash_table (info)->dynobj;\n \n   if (dynobj != NULL && elf_hash_table (info)->dynamic_sections_created)\n@@ -6864,8 +6879,6 @@ bfd_elf_size_dynamic_sections (bfd *output_bfd,\n \t}\n     }\n \n-  bed = get_elf_backend_data (output_bfd);\n-\n   if (info->gc_sections && bed->can_gc_sections)\n     {\n       struct elf_gc_sweep_symbol_info sweep_info;\n@@ -6987,23 +7000,10 @@ bfd_elf_size_dynamic_sections (bfd *output_bfd,\n \t}\n     }\n \n-  /* Any syms created from now on start with -1 in\n-     got.refcount/offset and plt.refcount/offset.  */\n-  elf_hash_table (info)->init_got_refcount\n-    = elf_hash_table (info)->init_got_offset;\n-  elf_hash_table (info)->init_plt_refcount\n-    = elf_hash_table (info)->init_plt_offset;\n-\n   if (bfd_link_relocatable (info)\n       && !_bfd_elf_size_group_sections (info))\n     return false;\n \n-  /* The backend may have to create some sections regardless of whether\n-     we're dynamic or not.  */\n-  if (bed->elf_backend_always_size_sections\n-      && ! (*bed->elf_backend_always_size_sections) (output_bfd, info))\n-    return false;\n-\n   /* Determine any GNU_STACK segment requirements, after the backend\n      has had a chance to set a default segment size.  */\n   if (info->execstack)"
    }
  ]
}