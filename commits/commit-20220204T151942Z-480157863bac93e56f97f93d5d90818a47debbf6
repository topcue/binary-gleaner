{
  "sha": "480157863bac93e56f97f93d5d90818a47debbf6",
  "node_id": "C_kwDOANOeidoAKDQ4MDE1Nzg2M2JhYzkzZTU2Zjk3ZjkzZDVkOTA4MThhNDdkZWJiZjY",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2022-02-01T16:46:43Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2022-02-04T15:19:42Z"
    },
    "message": "Improve Ada unchecked union type printing\n\nCurrently, \"ptype\" of an Ada unchecked union may show a\ncompiler-generated wrapper structure in its output.  It's more\nAda-like to elide this structure, which is what this patch implements.\nIt turned out to be simplest to reuse a part of print_variant_clauses\nfor this.\n\nAs this is Ada-specific, and Joel already reviewed it internally, I am\ngoing to check it in.",
    "tree": {
      "sha": "f7893f22b1fcadf4294d3d3c0e8483dd9064891c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f7893f22b1fcadf4294d3d3c0e8483dd9064891c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/480157863bac93e56f97f93d5d90818a47debbf6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/480157863bac93e56f97f93d5d90818a47debbf6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/480157863bac93e56f97f93d5d90818a47debbf6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/480157863bac93e56f97f93d5d90818a47debbf6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2b531492447d10de27e6210117509097f6cbc9e0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b531492447d10de27e6210117509097f6cbc9e0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2b531492447d10de27e6210117509097f6cbc9e0"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 42,
    "deletions": 29
  },
  "files": [
    {
      "sha": "ca26382e1955bf1ee5077b999da04a637e2ff36e",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 32,
      "deletions": 27,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480157863bac93e56f97f93d5d90818a47debbf6/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480157863bac93e56f97f93d5d90818a47debbf6/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=480157863bac93e56f97f93d5d90818a47debbf6",
      "patch": "@@ -506,6 +506,35 @@ print_choices (struct type *type, int field_num, struct ui_file *stream,\n   return 0;\n }\n \n+/* A helper for print_variant_clauses that prints the members of\n+   VAR_TYPE.  DISCR_TYPE is the type of the discriminant (or nullptr\n+   if not available).  The discriminant is contained in OUTER_TYPE.\n+   STREAM, LEVEL, SHOW, and FLAGS are the same as for\n+   ada_print_type.  */\n+\n+static void\n+print_variant_clauses (struct type *var_type, struct type *discr_type,\n+\t\t       struct type *outer_type, struct ui_file *stream,\n+\t\t       int show, int level,\n+\t\t       const struct type_print_options *flags)\n+{\n+  for (int i = 0; i < var_type->num_fields (); i += 1)\n+    {\n+      fprintf_filtered (stream, \"\\n%*swhen \", level, \"\");\n+      if (print_choices (var_type, i, stream, discr_type))\n+\t{\n+\t  if (print_record_field_types (var_type->field (i).type (),\n+\t\t\t\t\touter_type, stream, show, level,\n+\t\t\t\t\tflags)\n+\t      <= 0)\n+\t    fprintf_filtered (stream, \" null;\");\n+\t}\n+      else\n+\tprint_selected_record_field_types (var_type, outer_type, i, i,\n+\t\t\t\t\t   stream, show, level, flags);\n+    }\n+}\n+\n /* Assuming that field FIELD_NUM of TYPE represents variants whose\n    discriminant is contained in OUTER_TYPE, print its components on STREAM.\n    LEVEL is the recursion (indentation) level, in case any of the fields\n@@ -520,7 +549,6 @@ print_variant_clauses (struct type *type, int field_num,\n \t\t       int show, int level,\n \t\t       const struct type_print_options *flags)\n {\n-  int i;\n   struct type *var_type, *par_type;\n   struct type *discr_type;\n \n@@ -538,21 +566,8 @@ print_variant_clauses (struct type *type, int field_num,\n   if (par_type != NULL)\n     var_type = par_type;\n \n-  for (i = 0; i < var_type->num_fields (); i += 1)\n-    {\n-      fprintf_filtered (stream, \"\\n%*swhen \", level + 4, \"\");\n-      if (print_choices (var_type, i, stream, discr_type))\n-\t{\n-\t  if (print_record_field_types (var_type->field (i).type (),\n-\t\t\t\t\touter_type, stream, show, level + 4,\n-\t\t\t\t\tflags)\n-\t      <= 0)\n-\t    fprintf_filtered (stream, \" null;\");\n-\t}\n-      else\n-\tprint_selected_record_field_types (var_type, outer_type, i, i,\n-\t\t\t\t\t   stream, show, level + 4, flags);\n-    }\n+  print_variant_clauses (var_type, discr_type, outer_type, stream, show,\n+\t\t\t level + 4, flags);\n }\n \n /* Assuming that field FIELD_NUM of TYPE is a variant part whose\n@@ -842,19 +857,9 @@ print_unchecked_union_type (struct type *type, struct ui_file *stream,\n     fprintf_filtered (stream, \"record (?) is null; end record\");\n   else\n     {\n-      int i;\n-\n       fprintf_filtered (stream, \"record (?) is\\n%*scase ? is\", level + 4, \"\");\n \n-      for (i = 0; i < type->num_fields (); i += 1)\n-\t{\n-\t  fprintf_filtered (stream, \"\\n%*swhen ? =>\\n%*s\", level + 8, \"\",\n-\t\t\t    level + 12, \"\");\n-\t  ada_print_type (type->field (i).type (),\n-\t\t\t  type->field (i).name (),\n-\t\t\t  stream, show - 1, level + 12, flags);\n-\t  fprintf_filtered (stream, \";\");\n-\t}\n+      print_variant_clauses (type, nullptr, type, stream, show, level + 8, flags);\n \n       fprintf_filtered (stream, \"\\n%*send case;\\n%*send record\",\n \t\t\tlevel + 4, \"\", level, \"\");"
    },
    {
      "sha": "6a9caf229cd8c15a81fe5f73ea74e79e08ec813a",
      "filename": "gdb/testsuite/gdb.ada/unchecked_union.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480157863bac93e56f97f93d5d90818a47debbf6/gdb/testsuite/gdb.ada/unchecked_union.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480157863bac93e56f97f93d5d90818a47debbf6/gdb/testsuite/gdb.ada/unchecked_union.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/unchecked_union.exp?ref=480157863bac93e56f97f93d5d90818a47debbf6",
      "patch": "@@ -30,10 +30,14 @@ proc multi_line_string {str} {\n }\n \n set inner_string {    case ? is\n-        when ? =>\n+        when 0 =>\n             small: range 0 .. 255;\n+            second: range 0 .. 255;\n         when ? =>\n+            bval: range 0 .. 255;\n+        when others =>\n             large: range 255 .. 510;\n+            more: range 255 .. 510;\n     end case;\n }\n set inner_full \"type = record (?) is\\n${inner_string}end record\""
    },
    {
      "sha": "42fe3a997b80855013f356f9f2cee24b0e0c42a5",
      "filename": "gdb/testsuite/gdb.ada/unchecked_union/unchecked_union.adb",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/480157863bac93e56f97f93d5d90818a47debbf6/gdb/testsuite/gdb.ada/unchecked_union/unchecked_union.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/480157863bac93e56f97f93d5d90818a47debbf6/gdb/testsuite/gdb.ada/unchecked_union/unchecked_union.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/unchecked_union/unchecked_union.adb?ref=480157863bac93e56f97f93d5d90818a47debbf6",
      "patch": "@@ -17,14 +17,18 @@ with System;\n with Pck; use Pck;\n \n procedure Foo is\n-   type Key is (Alpha, Omega);\n+   type Key is (Alpha, Beta, Omega);\n \n    type Inner(Disc : Key := Omega) is record\n       case Disc is\n          when Alpha =>\n             Small : Integer range 0..255;\n+            Second : Integer range 0..255;\n+         when Beta =>\n+            Bval : Integer range 0..255;\n          when others =>\n             Large : Integer range 255..510;\n+            More : Integer range 255..510;\n       end case;\n    end record;\n    pragma Unchecked_Union (Inner);"
    }
  ]
}