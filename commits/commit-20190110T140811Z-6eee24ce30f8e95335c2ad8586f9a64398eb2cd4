{
  "sha": "6eee24ce30f8e95335c2ad8586f9a64398eb2cd4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmVlZTI0Y2UzMGY4ZTk1MzM1YzJhZDg1ODZmOWE2NDM5OGViMmNkNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-05-10T22:23:47Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-10T14:08:11Z"
    },
    "message": "Simplify calls to init_psymbol_list\n\nExisting callers to init_psymbol_list were checking to see if psymbols\nhad already been initialized.  It seemed better to me to do this check\ndirectly in init_psymbol_list, simplifying the callers.\n\ngdb/ChangeLog\n2019-01-10  Tom Tromey  <tom@tromey.com>\n\n\t* xcoffread.c (xcoff_initial_scan): Unconditionally call\n\tinit_psymbol_list.\n\t* psymtab.c (init_psymbol_list): Do nothing if already called.\n\t* psympriv.h (init_psymbol_list): Add comment.\n\t* dwarf2read.c (dwarf2_build_psymtabs): Unconditionally call\n\tinit_psymbol_list.\n\t* dbxread.c (dbx_symfile_read): Unconditionally call\n\tinit_psymbol_list.",
    "tree": {
      "sha": "621616df26c1fd059c70b00ebdb83cd397ba8371",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/621616df26c1fd059c70b00ebdb83cd397ba8371"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "75aedd27e6a2c58734ab44cc7cad8491f19d059a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75aedd27e6a2c58734ab44cc7cad8491f19d059a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/75aedd27e6a2c58734ab44cc7cad8491f19d059a"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 34,
    "deletions": 25
  },
  "files": [
    {
      "sha": "e0cf7cbfe2449343df196a67e39e4f22b8bc65a4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6eee24ce30f8e95335c2ad8586f9a64398eb2cd4",
      "patch": "@@ -1,3 +1,14 @@\n+2019-01-10  Tom Tromey  <tom@tromey.com>\n+\n+\t* xcoffread.c (xcoff_initial_scan): Unconditionally call\n+\tinit_psymbol_list.\n+\t* psymtab.c (init_psymbol_list): Do nothing if already called.\n+\t* psympriv.h (init_psymbol_list): Add comment.\n+\t* dwarf2read.c (dwarf2_build_psymtabs): Unconditionally call\n+\tinit_psymbol_list.\n+\t* dbxread.c (dbx_symfile_read): Unconditionally call\n+\tinit_psymbol_list.\n+\n 2019-01-10  Tom Tromey  <tom@tromey.com>\n \n \t* xcoffread.c (scan_xcoff_symtab): Update."
    },
    {
      "sha": "6149175d732d42c5dfd35fc476a7e88c60833bd2",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=6eee24ce30f8e95335c2ad8586f9a64398eb2cd4",
      "patch": "@@ -536,9 +536,7 @@ dbx_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n     perror_with_name (objfile_name (objfile));\n \n   /* Size the symbol table.  */\n-  if (objfile->global_psymbols.capacity () == 0\n-      && objfile->static_psymbols.capacity () == 0)\n-    init_psymbol_list (objfile, DBX_SYMCOUNT (objfile));\n+  init_psymbol_list (objfile, DBX_SYMCOUNT (objfile));\n \n   symbol_size = DBX_SYMBOL_SIZE (objfile);\n   symbol_table_offset = DBX_SYMTAB_OFFSET (objfile);"
    },
    {
      "sha": "9aa33bfec8f67265282ba668cacdccf0a70a80ed",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=6eee24ce30f8e95335c2ad8586f9a64398eb2cd4",
      "patch": "@@ -6299,9 +6299,7 @@ dwarf2_build_psymtabs (struct objfile *objfile)\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = get_dwarf2_per_objfile (objfile);\n \n-  if (objfile->global_psymbols.capacity () == 0\n-      && objfile->static_psymbols.capacity () == 0)\n-    init_psymbol_list (objfile, 1024);\n+  init_psymbol_list (objfile, 1024);\n \n   TRY\n     {"
    },
    {
      "sha": "9b1e952757c8dd5b25540d71c73ce885610f6053",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=6eee24ce30f8e95335c2ad8586f9a64398eb2cd4",
      "patch": "@@ -290,7 +290,11 @@ extern void add_psymbol_to_list (const char *, int,\n \t\t\t\t CORE_ADDR,\n \t\t\t\t enum language, struct objfile *);\n \n-extern void init_psymbol_list (struct objfile *, int);\n+/* Initialize storage for partial symbols.  If partial symbol storage\n+   has already been initialized, this does nothing.  TOTAL_SYMBOLS is\n+   an estimate of how many symbols there will be.  */\n+\n+extern void init_psymbol_list (struct objfile *objfile, int total_symbols);\n \n extern struct partial_symtab *start_psymtab_common (struct objfile *,\n \t\t\t\t\t\t    const char *, CORE_ADDR);"
    },
    {
      "sha": "356901f14b75189993c36e456084e76e20641482",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=6eee24ce30f8e95335c2ad8586f9a64398eb2cd4",
      "patch": "@@ -1662,20 +1662,21 @@ add_psymbol_to_list (const char *name, int namelength, int copy_name,\n   append_psymbol_to_list (list, psym, objfile);\n }\n \n-/* Initialize storage for partial symbols.  */\n+/* See psympriv.h.  */\n \n void\n init_psymbol_list (struct objfile *objfile, int total_symbols)\n {\n-  /* Free any previously allocated psymbol lists.  */\n-  objfile->global_psymbols.clear ();\n-  objfile->static_psymbols.clear ();\n-\n-  /* Current best guess is that approximately a twentieth\n-     of the total symbols (in a debugging file) are global or static\n-     oriented symbols, then multiply that by slop factor of two.  */\n-  objfile->global_psymbols.reserve (total_symbols / 10);\n-  objfile->static_psymbols.reserve (total_symbols / 10);\n+  if (objfile->global_psymbols.capacity () == 0\n+      && objfile->static_psymbols.capacity () == 0)\n+    {\n+      /* Current best guess is that approximately a twentieth of the\n+\t total symbols (in a debugging file) are global or static\n+\t oriented symbols, then multiply that by slop factor of\n+\t two.  */\n+      objfile->global_psymbols.reserve (total_symbols / 10);\n+      objfile->static_psymbols.reserve (total_symbols / 10);\n+    }\n }\n \n /* See psympriv.h.  */"
    },
    {
      "sha": "50da0789755289943ac5696dbd45bf0377b0fcbf",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6eee24ce30f8e95335c2ad8586f9a64398eb2cd4/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=6eee24ce30f8e95335c2ad8586f9a64398eb2cd4",
      "patch": "@@ -2991,14 +2991,11 @@ xcoff_initial_scan (struct objfile *objfile, symfile_add_flags symfile_flags)\n   if (val != size)\n     perror_with_name (_(\"reading symbol table\"));\n \n-  /* If we are reinitializing, or if we have never loaded syms yet, init.  */\n-  if (objfile->global_psymbols.capacity () == 0\n-      && objfile->static_psymbols.capacity () == 0)\n-    /* I'm not sure how how good num_symbols is; the rule of thumb in\n-       init_psymbol_list was developed for a.out.  On the one hand,\n-       num_symbols includes auxents.  On the other hand, it doesn't\n-       include N_SLINE.  */\n-    init_psymbol_list (objfile, num_symbols);\n+  /* I'm not sure how how good num_symbols is; the rule of thumb in\n+     init_psymbol_list was developed for a.out.  On the one hand,\n+     num_symbols includes auxents.  On the other hand, it doesn't\n+     include N_SLINE.  */\n+  init_psymbol_list (objfile, num_symbols);\n \n   scoped_free_pendings free_pending;\n   minimal_symbol_reader reader (objfile);"
    }
  ]
}