{
  "sha": "fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmRiYzk4NzA3YjBhYjQ4ZmQ4Y2EzYWMzN2FjZWZhMTIwNDk2YmFmNg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-07-03T12:34:20Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-07-03T12:35:45Z"
    },
    "message": "Introduce the \"with\" command\n\n( See original discussion and prototype here:\n   https://sourceware.org/ml/gdb-patches/2019-05/msg00570.html )\n\n (gdb) help with\n Temporarily set SETTING to VALUE, run COMMAND, and restore SETTING.\n Usage: with SETTING [VALUE] [-- COMMAND]\n Usage: w SETTING [VALUE] [-- COMMAND]\n With no COMMAND, repeats the last executed command.\n SETTING is any setting you can change with the \"set\" subcommands.\n E.g.:\n   with language pascal -- print obj\n   with print elements unlimited -- print obj\n\nAs can be seen above, the \"with\" command is just like \"set\", but\ninstead of setting the setting permanently, it sets the setting, runs\na command and then restores the setting.\n\n (gdb) p g_s\n $1 = {a = 1, b = 2, c = 3}\n (gdb) with language ada -- print g_s\n $2 = (a => 1, b => 2, c => 3)\n Warning: the current language does not match this frame.\n (gdb) show language\n The current source language is \"auto; currently c\".\n (gdb) with print elements 100 -- with print object on -- print 1\n $3 = 1\n\nYou can shorten things a bit though, as long as unambiguous.  So this:\n\n (gdb) with print elements 100 -- with print object off -- print 1\n\nis the same as:\n\n (gdb) w p el 100 -- w p o 0 -- p 1\n\nNote that the patch adds a \"w\" alias for \"with\", as \"w\" is not\ncurrently taken:\n\n (gdb) w\n Ambiguous command \"w\": watch, wh, whatis, where, while, while-stepping, winheight, ws.\n\nLet me know if you'd prefer to reserve \"w\" for one of the other\ncommands above.  IMHO, this command will end up being used frequently\nenough that it deserves the \"w\" shorthand.\n\nA nice feature is that this is fully integrated with TAB-completion:\n\n (gdb) with p[TAB]\n pagination  print       prompt      python\n (gdb) with print [TAB]\n address                max-depth              static-members\n array                  max-symbolic-offset    symbol\n array-indexes          null-stop              symbol-filename\n asm-demangle           object                 symbol-loading\n demangle               pascal_static-members  thread-events\n elements               pretty                 type\n entry-values           raw                    union\n frame-arguments        repeats                vtbl\n inferior-events        sevenbit-strings\n (gdb) with print [TAB]\n\n (gdb) with print elements unlimited -- thread apply all -[TAB]\n -ascending  -c          -q          -s\n\n (gdb) with print elements unlimited -- print -[TAB]\n -address         -max-depth       -repeats         -vtbl\n -array           -null-stop       -static-members\n -array-indexes   -object          -symbol\n -elements        -pretty          -union\n\nThe main advantage of this new command compared to command options,\nlike the new \"print -OPT\", is that this command works with any\nsetting, and, it works nicely when you want to override a setting\nwhile running a user-defined command, like:\n\n (gdb) with print pretty -- usercmd\n\nThe disadvantage is that it isn't as compact or easy to type.  I think\nof command options and this command as complementary.  I think that\neven with this new command, it makes sense to continue developing the\ncommand options in the direction of exposing most-oft-used settings as\ncommand options.\n\nInspired by Philippe's \"/\" command proposal, if no command is\nspecified, then the last command is re-invoked, under the overridden\nsetting:\n\n (gdb) p g_s\n $1 = {a = 1, b = 2, c = 3}\n (gdb) with language ada\n $2 = (a => 1, b => 2, c => 3)\n Warning: the current language does not match this frame.\n\nNote: \"with\" requires \"--\" to separate the setting from the command.\nIt might be possible to do without that, but, I haven't tried it yet,\nand I think that this can go in without it.  We can always downgrade\nto making \"--\" optional if we manage to make it work.\n\nOn to the patch itself, the implementation of the command is simpler\nthan one might expect.  A few details:\n\n- I factored out a bit from pipe_command into repeat_previous\n  directly, because otherwise I'd need to copy&paste the same code and\n  same error message in the with command.\n\n- The parse_cli_var_uinteger / parse_cli_var_zuinteger_unlimited /\n  do_set_command changes are necessary since we can now pass an empty\n  string as argument.\n\n- do_show_command was split in two, as a FIXME comment suggests, but\n  for a different reason: we need to get a string version of a \"set\"\n  command's value, and we already had code for that in\n  do_show_command.  That code is now factored out to the new\n  get_setshow_command_value_string function.\n\n- There's a new \"maint with\" command added too:\n\n   (gdb) help maint with\n   Like \"with\", but works with \"maintenance set\" variables.\n   Usage: maintenance with SETTING [VALUE] [-- COMMAND]\n   With no COMMAND, repeats the last executed command.\n   SETTING is any setting you can change with the \"maintenance set\"\n   subcommands.\n\n  \"with\" and \"maint with\" share 99% of the implementation.\n\n  This might be useful on its own, but it's also useful for testing,\n  since with this, we can use the \"maint set/show test-settings\"\n  settings for exercising the \"with\" machinery with all the command\n  type variants (all enum var_types).  This is done in the new\n  gdb/base/with.exp testcase.\n\nThe documentation bits are originally based on Philippe's docs for the\n\"/\" command, hence the attribution in the ChangeLog.\n\ngdb/ChangeLog:\n2019-07-03  Pedro Alves  <palves@redhat.com>\n\n\t* NEWS (New commands): Mention \"with\" and \"maint with\".\n\t* cli/cli-cmds.c (with_command_1, with_command_completer_1)\n\t(with_command, with_command_completer): New.\n\t(pipe_command): Adjust to new repeat_previous\n\tinterface.\n\t(_initialize_cli_cmds): Install the \"with\" command and its \"w\"\n\talias.\n\t* cli/cli-cmds.h (with_command_1, with_command_completer_1): New\n\tdeclarations.\n\t* cli/cli-setshow.c (parse_cli_var_uinteger)\n\t(parse_cli_var_zuinteger_unlimited, do_set_command): Handle empty\n\targument strings for all var_types.\n\t(get_setshow_command_value_string): New, factored out from ...\n\t(do_show_command): ... this.\n\t* cli/cli-setshow.h: Include <string>.\n\t(get_setshow_command_value_string): Declare.\n\t* command.h (repeat_previous): Now returns const char *.  Adjust\n\tcomment.\n\t* maint.c: Include \"cli/cli-cmds.h\".\n\t(maintenance_with_cmd, maintenance_with_cmd_completer): New.\n\t(_initialize_maint_cmds): Register the \"maintenance with\" command.\n\t* top.c (repeat_previous): Move bits from pipe_command here:\n\tReturn the saved command line, if any; error out if there's no\n\tcommand to relaunch.\n\ngdb/doc/ChangeLog:\n2019-07-03  Pedro Alves  <palves@redhat.com>\n\t    Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* gdb.texinfo (Command Settings): New node documenting the general\n\tconcept of settings, how to change them, and the new \"with\"\n\tcommand.\n\t(Maintenance Commands): Document \"maint with\".\n\ngdb/testsuite/ChangeLog:\n2019-07-03  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.base/with.c: New file.\n\t* gdb.base/with.exp: New file.",
    "tree": {
      "sha": "5894a73e3e58bcd087918752ce0e0790ec4c14bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5894a73e3e58bcd087918752ce0e0790ec4c14bf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c6ac893109fdc2c3fce2b7457adccdc10f235354",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6ac893109fdc2c3fce2b7457adccdc10f235354",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c6ac893109fdc2c3fce2b7457adccdc10f235354"
    }
  ],
  "stats": {
    "total": 767,
    "additions": 717,
    "deletions": 50
  },
  "files": [
    {
      "sha": "adc56b498993a039825c1d491f1d0417069fae83",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -1,3 +1,30 @@\n+2019-07-03  Pedro Alves  <palves@redhat.com>\n+\n+\t* NEWS (New commands): Mention \"with\" and \"maint with\".\n+\t* cli/cli-cmds.c (with_command_1, with_command_completer_1)\n+\t(with_command, with_command_completer): New.\n+\t(pipe_command): Adjust to new repeat_previous\n+\tinterface.\n+\t(_initialize_cli_cmds): Install the \"with\" command and its \"w\"\n+\talias.\n+\t* cli/cli-cmds.h (with_command_1, with_command_completer_1): New\n+\tdeclarations.\n+\t* cli/cli-setshow.c (parse_cli_var_uinteger)\n+\t(parse_cli_var_zuinteger_unlimited, do_set_command): Handle empty\n+\targument strings for all var_types.\n+\t(get_setshow_command_value_string): New, factored out from ...\n+\t(do_show_command): ... this.\n+\t* cli/cli-setshow.h: Include <string>.\n+\t(get_setshow_command_value_string): Declare.\n+\t* command.h (repeat_previous): Now returns const char *.  Adjust\n+\tcomment.\n+\t* maint.c: Include \"cli/cli-cmds.h\".\n+\t(maintenance_with_cmd, maintenance_with_cmd_completer): New.\n+\t(_initialize_maint_cmds): Register the \"maintenance with\" command.\n+\t* top.c (repeat_previous): Move bits from pipe_command here:\n+\tReturn the saved command line, if any; error out if there's no\n+\tcommand to relaunch.\n+\n 2019-07-03  Pedro Alves  <palves@redhat.com>\n \n \t* NEWS (New commands): Mention \"maint set/show test-settings\""
    },
    {
      "sha": "34c544c3d51a315bf5cc020f415aca8a13b73895",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -46,6 +46,21 @@ pipe -d DELIM COMMAND DELIM SHELL_COMMAND\n   With no COMMAND, repeat the last executed command\n   and send its output to SHELL_COMMAND.\n \n+with SETTING [VALUE] [-- COMMAND]\n+w SETTING [VALUE] [-- COMMAND]\n+  Temporarily set SETTING, run COMMAND, and restore SETTING.\n+  Usage: with SETTING -- COMMAND\n+  With no COMMAND, repeats the last executed command.\n+  SETTING is any GDB setting you can change with the \"set\"\n+  subcommands.  For example, 'with language c -- print someobj'\n+  temporarily switches to the C language in order to print someobj.\n+  Settings can be combined: 'w lang c -- w print elements unlimited --\n+  usercmd' switches to the C language and runs usercmd with no limit\n+  of array elements to print.\n+\n+maint with SETTING [VALUE] [-- COMMAND]\n+  Like \"with\", but works with \"maintenance set\" settings.\n+\n set may-call-functions [on|off]\n show may-call-functions\n   This controls whether GDB will attempt to call functions in"
    },
    {
      "sha": "d1ecd6271ec1ce6ef00e57e10133dd68673ec71e",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 128,
      "deletions": 6,
      "changes": 134,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -211,6 +211,116 @@ show_command (const char *arg, int from_tty)\n   cmd_show_list (showlist, from_tty, \"\");\n }\n \n+/* See cli/cli-cmds.h.  */\n+\n+void\n+with_command_1 (const char *set_cmd_prefix,\n+\t\tcmd_list_element *setlist, const char *args, int from_tty)\n+{\n+  const char *delim = strstr (args, \"--\");\n+  const char *nested_cmd = nullptr;\n+\n+  if (delim == args)\n+    error (_(\"Missing setting before '--' delimiter\"));\n+\n+  if (delim == nullptr || *skip_spaces (&delim[2]) == '\\0')\n+    nested_cmd = repeat_previous ();\n+\n+  cmd_list_element *set_cmd = lookup_cmd (&args, setlist, set_cmd_prefix,\n+\t\t\t\t\t  /*allow_unknown=*/ 0,\n+\t\t\t\t\t  /*ignore_help_classes=*/ 1);\n+  gdb_assert (set_cmd != nullptr);\n+\n+  if (set_cmd->var == nullptr)\n+    error (_(\"Cannot use this setting with the \\\"with\\\" command\"));\n+\n+  std::string temp_value\n+    = (delim == nullptr ? args : std::string (args, delim - args));\n+\n+  if (nested_cmd == nullptr)\n+    nested_cmd = skip_spaces (delim + 2);\n+\n+  std::string org_value = get_setshow_command_value_string (set_cmd);\n+\n+  /* Tweak the setting to the new temporary value.  */\n+  do_set_command (temp_value.c_str (), from_tty, set_cmd);\n+\n+  try\n+    {\n+      scoped_restore save_async = make_scoped_restore (&current_ui->async, 0);\n+\n+      /* Execute the nested command.  */\n+      execute_command (nested_cmd, from_tty);\n+    }\n+  catch (const gdb_exception &ex)\n+    {\n+      /* Restore the setting and rethrow.  If restoring the setting\n+\t throws, swallow the new exception and warn.  There's nothing\n+\t else we can reasonably do.  */\n+      try\n+\t{\n+\t  do_set_command (org_value.c_str (), from_tty, set_cmd);\n+\t}\n+      catch (const gdb_exception &ex2)\n+\t{\n+\t  warning (_(\"Couldn't restore setting: %s\"), ex2.what ());\n+\t}\n+\n+      throw;\n+    }\n+\n+  /* Restore the setting.  */\n+  do_set_command (org_value.c_str (), from_tty, set_cmd);\n+}\n+\n+/* See cli/cli-cmds.h.  */\n+\n+void\n+with_command_completer_1 (const char *set_cmd_prefix,\n+\t\t\t  completion_tracker &tracker,\n+\t\t\t  const char *text)\n+{\n+  tracker.set_use_custom_word_point (true);\n+\n+  const char *delim = strstr (text, \"--\");\n+\n+  /* If we're still not past the \"--\" delimiter, complete the \"with\"\n+     command as if it was a \"set\" command.  */\n+  if (delim == text\n+      || delim == nullptr\n+      || !isspace (delim[-1])\n+      || !(isspace (delim[2]) || delim[2] == '\\0'))\n+    {\n+      std::string new_text = std::string (set_cmd_prefix) + text;\n+      tracker.advance_custom_word_point_by (-(int) strlen (set_cmd_prefix));\n+      complete_nested_command_line (tracker, new_text.c_str ());\n+      return;\n+    }\n+\n+  /* We're past the \"--\" delimiter.  Complete on the sub command.  */\n+  const char *nested_cmd = skip_spaces (delim + 2);\n+  tracker.advance_custom_word_point_by (nested_cmd - text);\n+  complete_nested_command_line (tracker, nested_cmd);\n+}\n+\n+/* The \"with\" command.  */\n+\n+static void\n+with_command (const char *args, int from_tty)\n+{\n+  with_command_1 (\"set \", setlist, args, from_tty);\n+}\n+\n+/* \"with\" command completer.  */\n+\n+static void\n+with_command_completer (struct cmd_list_element *ignore,\n+\t\t\tcompletion_tracker &tracker,\n+\t\t\tconst char *text, const char * /*word*/)\n+{\n+  with_command_completer_1 (\"set \", tracker,  text);\n+}\n+\n \f\n /* Provide documentation on command or list given by COMMAND.  FROM_TTY\n    is ignored.  */\n@@ -878,12 +988,7 @@ pipe_command (const char *arg, int from_tty)\n   arg += delim.length (); /* Skip the delimiter.  */\n \n   if (gdb_cmd.empty ())\n-    {\n-      repeat_previous ();\n-      gdb_cmd = skip_spaces (get_saved_command_line ());\n-      if (gdb_cmd.empty ())\n-\terror (_(\"No previous command to relaunch\"));\n-    }\n+    gdb_cmd = repeat_previous ();\n \n   const char *shell_command = skip_spaces (arg);\n   if (*shell_command == '\\0')\n@@ -1850,6 +1955,23 @@ Generic command for showing things about the debugger.\"),\n   /* Another way to get at the same thing.  */\n   add_info (\"set\", show_command, _(\"Show all GDB settings.\"));\n \n+  c = add_com (\"with\", class_vars, with_command, _(\"\\\n+Temporarily set SETTING to VALUE, run COMMAND, and restore SETTING.\\n\\\n+Usage: with SETTING [VALUE] [-- COMMAND]\\n\\\n+Usage: w SETTING [VALUE] [-- COMMAND]\\n\\\n+With no COMMAND, repeats the last executed command.\\n\\\n+\\n\\\n+SETTING is any setting you can change with the \\\"set\\\" subcommands.\\n\\\n+E.g.:\\n\\\n+  with language pascal -- print obj\\n\\\n+  with print elements unlimited -- print obj\\n\\\n+\\n\\\n+You can change multiple settings using nested with, and use\\n\\\n+abbreviations for commands and/or values.  E.g.:\\n\\\n+  w la p -- w p el u -- p obj\"));\n+  set_cmd_completer_handle_brkchars (c, with_command_completer);\n+  add_com_alias (\"w\", \"with\", class_vars, 1);\n+\n   add_cmd (\"commands\", no_set_class, show_commands, _(\"\\\n Show the history of commands you typed.\\n\\\n You can supply a command number to start with, or a `+' to start after\\n\\"
    },
    {
      "sha": "94e210a84ebb444445527fccf795506bead8487c",
      "filename": "gdb/cli/cli-cmds.h",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/cli/cli-cmds.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/cli/cli-cmds.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.h?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -142,4 +142,19 @@ extern gdb::optional<open_script>\n extern int source_verbose;\n extern int trace_commands;\n \n+/* Common code for the \"with\" and \"maintenance with\" commands.\n+   SET_CMD_PREFIX is the spelling of the corresponding \"set\" command\n+   prefix: i.e., \"set \" or \"maintenance set \".  SETLIST is the command\n+   element for the same \"set\" command prefix.  */\n+extern void with_command_1 (const char *set_cmd_prefix,\n+\t\t\t    cmd_list_element *setlist,\n+\t\t\t    const char *args, int from_tty);\n+\n+/* Common code for the completers of the \"with\" and \"maintenance with\"\n+   commands.  SET_CMD_PREFIX is the spelling of the corresponding\n+   \"set\" command prefix: i.e., \"set \" or \"maintenance set \".  */\n+extern void with_command_completer_1 (const char *set_cmd_prefix,\n+\t\t\t\t      completion_tracker &tracker,\n+\t\t\t\t      const char *text);\n+\n #endif /* CLI_CLI_CMDS_H */"
    },
    {
      "sha": "6fb32441acc884d3e73d6c773615d138bd7af95e",
      "filename": "gdb/cli/cli-setshow.c",
      "status": "modified",
      "additions": 39,
      "deletions": 35,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/cli/cli-setshow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/cli/cli-setshow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-setshow.c?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -190,7 +190,7 @@ parse_cli_var_uinteger (var_types var_type, const char **arg,\n {\n   LONGEST val;\n \n-  if (*arg == nullptr)\n+  if (*arg == nullptr || **arg == '\\0')\n     {\n       if (var_type == var_uinteger)\n \terror_no_arg (_(\"integer to set it to, or \\\"unlimited\\\".\"));\n@@ -225,7 +225,7 @@ parse_cli_var_zuinteger_unlimited (const char **arg, bool expression)\n {\n   LONGEST val;\n \n-  if (*arg == nullptr)\n+  if (*arg == nullptr || **arg == '\\0')\n     error_no_arg (_(\"integer to set it to, or \\\"unlimited\\\".\"));\n \n   if (is_unlimited_literal (arg, expression))\n@@ -308,6 +308,9 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n \n   gdb_assert (c->type == set_cmd);\n \n+  if (arg == NULL)\n+    arg = \"\";\n+\n   switch (c->var_type)\n     {\n     case var_string:\n@@ -317,8 +320,6 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n \tchar *q;\n \tint ch;\n \n-\tif (arg == NULL)\n-\t  arg = \"\";\n \tnewobj = (char *) xmalloc (strlen (arg) + 2);\n \tp = arg;\n \tq = newobj;\n@@ -364,9 +365,6 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n       }\n       break;\n     case var_string_noescape:\n-      if (arg == NULL)\n-\targ = \"\";\n-\n       if (*(char **) c->var == NULL || strcmp (*(char **) c->var, arg) != 0)\n \t{\n \t  xfree (*(char **) c->var);\n@@ -376,14 +374,14 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n \t}\n       break;\n     case var_filename:\n-      if (arg == NULL)\n+      if (*arg == '\\0')\n \terror_no_arg (_(\"filename to set it to.\"));\n       /* FALLTHROUGH */\n     case var_optional_filename:\n       {\n \tchar *val = NULL;\n \n-\tif (arg != NULL)\n+\tif (*arg != '\\0')\n \t  {\n \t    /* Clear trailing whitespace of filename.  */\n \t    const char *ptr = arg + strlen (arg) - 1;\n@@ -455,7 +453,7 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n       {\n \tLONGEST val;\n \n-\tif (arg == NULL)\n+\tif (*arg == '\\0')\n \t  {\n \t    if (c->var_type == var_integer)\n \t      error_no_arg (_(\"integer to set it to, or \\\"unlimited\\\".\"));\n@@ -625,24 +623,13 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n     }\n }\n \n-/* Do a \"show\" command.  ARG is NULL if no argument, or the\n-   text of the argument, and FROM_TTY is nonzero if this command is\n-   being entered directly by the user (i.e. these are just like any\n-   other command).  C is the command list element for the command.  */\n+/* See cli/cli-setshow.h.  */\n \n-void\n-do_show_command (const char *arg, int from_tty, struct cmd_list_element *c)\n+std::string\n+get_setshow_command_value_string (cmd_list_element *c)\n {\n-  struct ui_out *uiout = current_uiout;\n-\n-  gdb_assert (c->type == show_cmd);\n-\n   string_file stb;\n \n-  /* Possibly call the pre hook.  */\n-  if (c->pre_show_hook)\n-    (c->pre_show_hook) (c);\n-\n   switch (c->var_type)\n     {\n     case var_string:\n@@ -672,9 +659,7 @@ do_show_command (const char *arg, int from_tty, struct cmd_list_element *c)\n \t  stb.puts (\"auto\");\n \t  break;\n \tdefault:\n-\t  internal_error (__FILE__, __LINE__,\n-\t\t\t  _(\"do_show_command: \"\n-\t\t\t    \"invalid var_auto_boolean\"));\n+\t  gdb_assert_not_reached (\"invalid var_auto_boolean\");\n \t  break;\n \t}\n       break;\n@@ -703,23 +688,42 @@ do_show_command (const char *arg, int from_tty, struct cmd_list_element *c)\n       }\n       break;\n     default:\n-      error (_(\"gdb internal error: bad var_type in do_show_command\"));\n+      gdb_assert_not_reached (\"bad var_type\");\n     }\n \n+  return std::move (stb.string ());\n+}\n+\n+\n+/* Do a \"show\" command.  ARG is NULL if no argument, or the\n+   text of the argument, and FROM_TTY is nonzero if this command is\n+   being entered directly by the user (i.e. these are just like any\n+   other command).  C is the command list element for the command.  */\n+\n+void\n+do_show_command (const char *arg, int from_tty, struct cmd_list_element *c)\n+{\n+  struct ui_out *uiout = current_uiout;\n+\n+  gdb_assert (c->type == show_cmd);\n+\n+  /* Possibly call the pre hook.  */\n+  if (c->pre_show_hook)\n+    (c->pre_show_hook) (c);\n+\n+  std::string val = get_setshow_command_value_string (c);\n \n-  /* FIXME: cagney/2005-02-10: Need to split this in half: code to\n-     convert the value into a string (esentially the above); and\n-     code to print the value out.  For the latter there should be\n-     MI and CLI specific versions.  */\n+  /* FIXME: cagney/2005-02-10: There should be MI and CLI specific\n+     versions of code to print the value out.  */\n \n   if (uiout->is_mi_like_p ())\n-    uiout->field_stream (\"value\", stb);\n+    uiout->field_string (\"value\", val.c_str ());\n   else\n     {\n       if (c->show_value_func != NULL)\n-\tc->show_value_func (gdb_stdout, from_tty, c, stb.c_str ());\n+\tc->show_value_func (gdb_stdout, from_tty, c, val.c_str ());\n       else\n-\tdeprecated_show_value_hack (gdb_stdout, from_tty, c, stb.c_str ());\n+\tdeprecated_show_value_hack (gdb_stdout, from_tty, c, val.c_str ());\n     }\n \n   c->func (c, NULL, from_tty);"
    },
    {
      "sha": "8bfe7e89f094831cc700730d01ecc2da879c72f0",
      "filename": "gdb/cli/cli-setshow.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/cli/cli-setshow.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/cli/cli-setshow.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-setshow.h?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -17,6 +17,8 @@\n #ifndef CLI_CLI_SETSHOW_H\n #define CLI_CLI_SETSHOW_H\n \n+#include <string>\n+\n struct cmd_list_element;\n \n /* Parse ARG, an option to a boolean variable.\n@@ -55,6 +57,9 @@ extern void do_set_command (const char *arg, int from_tty,\n extern void do_show_command (const char *arg, int from_tty,\n \t\t\t     struct cmd_list_element *c);\n \n+/* Get a string version of C's current value.  */\n+extern std::string get_setshow_command_value_string (cmd_list_element *c);\n+\n extern void cmd_show_list (struct cmd_list_element *list, int from_tty,\n \t\t\t   const char *prefix);\n "
    },
    {
      "sha": "648950b5a448043cf244eca14153ca33cdc31ad1",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -461,14 +461,17 @@ extern void error_no_arg (const char *) ATTRIBUTE_NORETURN;\n \n extern void dont_repeat ();\n \n-/* Commands call repeat_previous if they want to repeat the previous command.\n-   Such commands that repeat the previous command must indicate\n-   to not repeat themselves, to avoid recursive repeat.\n-   repeat_previous will mark the current command as not repeating,\n-   and will ensure get_saved_command_line returns the previous command,\n-   so that the currently executing command can repeat it.  */\n-\n-extern void repeat_previous ();\n+/* Commands call repeat_previous if they want to repeat the previous\n+   command.  Such commands that repeat the previous command must\n+   indicate to not repeat themselves, to avoid recursive repeat.\n+   repeat_previous marks the current command as not repeating, and\n+   ensures get_saved_command_line returns the previous command, so\n+   that the currently executing command can repeat it.  If there's no\n+   previous command, throws an error.  Otherwise, returns the result\n+   of get_saved_command_line, which now points at the command to\n+   repeat.  */\n+\n+extern const char *repeat_previous ();\n \n /* Prevent dont_repeat from working, and return a cleanup that\n    restores the previous state.  */"
    },
    {
      "sha": "102591600384c7cf5e5935f729ac601c68734482",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -1,3 +1,11 @@\n+2019-07-03  Pedro Alves  <palves@redhat.com>\n+\t    Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* gdb.texinfo (Command Settings): New node documenting the general\n+\tconcept of settings, how to change them, and the new \"with\"\n+\tcommand.\n+\t(Maintenance Commands): Document \"maint with\".\n+\n 2019-07-03  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.texinfo (Maintenance Commands): Document \"maint set/show"
    },
    {
      "sha": "299c4a12a15c823eeaf28cf273f93f35899f3438",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 100,
      "deletions": 0,
      "changes": 100,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -1561,6 +1561,7 @@ show you the alternatives available, if there is more than one possibility).\n \n @menu\n * Command Syntax::              How to give commands to @value{GDBN}\n+* Command Settings::            How to change default behavior of commands\n * Completion::                  Command completion\n * Command Options::             Command options\n * Help::                        How to ask @value{GDBN} for help\n@@ -1617,6 +1618,98 @@ commands.  This command accepts the current line, like @key{RET}, and\n then fetches the next line relative to the current line from the history\n for editing.\n \n+\n+@node Command Settings\n+@section Command Settings\n+@cindex default behavior of commands, changing\n+@cindex default settings, changing\n+\n+Many commands change their behavior according to command-specific\n+variables or settings.  These settings can be changed with the\n+@code{set} subcommands.  For example, the @code{print} command\n+(@pxref{Data, ,Examining Data}) prints arrays differently depending on\n+settings changeable with the commands @code{set print elements\n+NUMBER-OF-ELEMENTS} and @code{set print array-indexes}, among others.\n+\n+You can change these settings to your preference in the gdbinit files\n+loaded at @value{GDBN} startup.  @xref{Startup}.\n+\n+The settings can also be changed interactively during the debugging\n+session.  For example, to change the limit of array elements to print,\n+you can do the following:\n+@smallexample\n+(@value{GDBN}) set print elements 10\n+(@value{GDBN}) print some_array\n+$1 = @{0, 10, 20, 30, 40, 50, 60, 70, 80, 90...@}\n+@end smallexample\n+\n+The above @code{set print elements 10} command changes the number of\n+elements to print from the default of 200 to 10.  If you only intend\n+this limit of 10 to be used for printing @code{some_array}, then you\n+must restore the limit back to 200, with @code{set print elements\n+200}.\n+\n+Some commands allow overriding settings with command options.  For\n+example, the @code{print} command supports a number of options that\n+allow overriding relevant global print settings as set by @code{set\n+print} subcommands.  @xref{print options}.  The example above could be\n+rewritten as:\n+@smallexample\n+(@value{GDBN}) print -elements 10 -- some_array\n+$1 = @{0, 10, 20, 30, 40, 50, 60, 70, 80, 90...@}\n+@end smallexample\n+\n+Alternatively, you can use the @code{with} command to change a setting\n+temporarily, for the duration of a command invocation.\n+\n+@table @code\n+@kindex with command\n+@kindex w @r{(@code{with})}\n+@cindex settings\n+@cindex temporarily change settings\n+@item with @var{setting} [@var{value}] [-- @var{command}]\n+@itemx w @var{setting} [@var{value}] [-- @var{command}]\n+Temporarily set @var{setting} to @var{value} for the duration of\n+@var{command}.\n+\n+@var{setting} is any setting you can change with the @code{set}\n+subcommands.  @var{value} is the value to assign to @code{setting}\n+while running @code{command}.\n+\n+If no @var{command} is provided, the last command executed is\n+repeated.\n+\n+If a @var{command} is provided, it must be preceded by a double dash\n+(@code{--}) separator.  This is required because some settings accept\n+free-form arguments, such as expressions or filenames.\n+\n+For example, the command\n+@smallexample\n+(@value{GDBN}) with print array on -- print some_array\n+@end smallexample\n+@noindent\n+is equivalent to the following 3 commands:\n+@smallexample\n+(@value{GDBN}) set print array on\n+(@value{GDBN}) print some_array\n+(@value{GDBN}) set print array off\n+@end smallexample\n+\n+The @code{with} command is particularly useful when you want to\n+override a setting while running user-defined commands, or commands\n+defined in Python or Guile.  @xref{Extending GDB,, Extending GDB}.\n+\n+@smallexample\n+(@value{GDBN}) with print pretty on -- my_complex_command\n+@end smallexample\n+\n+To change several settings for the same command, you can nest\n+@code{with} commands.  For example, @code{with language ada -- with\n+print elements 10} temporarily changes the language to Ada and sets a\n+limit of 10 elements to print for arrays and strings.\n+\n+@end table\n+\n @node Completion\n @section Command Completion\n \n@@ -37634,6 +37727,13 @@ support in the command options framework.\n These are representative commands for each @var{kind} of setting type\n @value{GDBN} supports.  They are used by the testsuite for exercising\n the settings infrastructure.\n+\n+@kindex maint with\n+@item maint with @var{setting} [@var{value}] [-- @var{command}]\n+Like the @code{with} command, but works with @code{maintenance set}\n+variables.  This is used by the testsuite to exercise the @code{with}\n+command's infrastructure.\n+\n @end table\n \n The following command is useful for non-interactive invocations of"
    },
    {
      "sha": "cecde84e9a205fafdbba99becfe4eae85d036528",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -43,6 +43,7 @@\n #include \"cli/cli-decode.h\"\n #include \"cli/cli-utils.h\"\n #include \"cli/cli-setshow.h\"\n+#include \"cli/cli-cmds.h\"\n \n static void maintenance_do_deprecate (const char *, int);\n \n@@ -634,6 +635,24 @@ maintenance_show_cmd (const char *args, int from_tty)\n   cmd_show_list (maintenance_show_cmdlist, from_tty, \"\");\n }\n \n+/* \"maintenance with\" command.  */\n+\n+static void\n+maintenance_with_cmd (const char *args, int from_tty)\n+{\n+  with_command_1 (\"maintenance set \", maintenance_set_cmdlist, args, from_tty);\n+}\n+\n+/* \"maintenance with\" command completer.  */\n+\n+static void\n+maintenance_with_cmd_completer (struct cmd_list_element *ignore,\n+\t\t\t\tcompletion_tracker &tracker,\n+\t\t\t\tconst char *text, const char * /*word*/)\n+{\n+  with_command_completer_1 (\"maintenance set \", tracker,  text);\n+}\n+\n /* Profiling support.  */\n \n static int maintenance_profile_p;\n@@ -1023,6 +1042,15 @@ Configure variables internal to GDB that aid in GDB's maintenance\"),\n \t\t  0/*allow-unknown*/,\n \t\t  &maintenancelist);\n \n+  cmd = add_cmd (\"with\", class_maintenance, maintenance_with_cmd, _(\"\\\n+Like \\\"with\\\", but works with \\\"maintenance set\\\" variables.\\n\\\n+Usage: maintenance with SETTING [VALUE] [-- COMMAND]\\n\\\n+With no COMMAND, repeats the last executed command.\\n\\\n+SETTING is any setting you can change with the \\\"maintenance set\\\"\\n\\\n+subcommands.\"),\n+\t\t &maintenancelist);\n+  set_cmd_completer_handle_brkchars (cmd, maintenance_with_cmd_completer);\n+\n #ifndef _WIN32\n   add_cmd (\"dump-me\", class_maintenance, maintenance_dump_me, _(\"\\\n Get fatal error; make debugger dump its core.\\n\\"
    },
    {
      "sha": "9b988dcfcc68d27644ebcabc288a2ed8fbf952d8",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-03  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.base/with.c: New file.\n+\t* gdb.base/with.exp: New file.\n+\n 2019-07-03  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.base/settings.exp: Replace all references to \"maint"
    },
    {
      "sha": "c6426625d4a19b9a6fc6e8a22572b2881850e47a",
      "filename": "gdb/testsuite/gdb.base/with.c",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/testsuite/gdb.base/with.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/testsuite/gdb.base/with.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/with.c?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -0,0 +1,41 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+int xxx1 = 123;\n+\n+struct S\n+{\n+  int a;\n+  int b;\n+  int c;\n+};\n+\n+struct S g_s = {1, 2, 3};\n+\n+static void\n+inc ()\n+{\n+  g_s.a++;;\n+}\n+\n+int\n+main ()\n+{\n+  inc ();\n+\n+  return 0;\n+}"
    },
    {
      "sha": "9ea768563a3efc7f4d91fdc73a37252813ed89af",
      "filename": "gdb/testsuite/gdb.base/with.exp",
      "status": "added",
      "additions": 289,
      "deletions": 0,
      "changes": 289,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/testsuite/gdb.base/with.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/testsuite/gdb.base/with.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/with.exp?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -0,0 +1,289 @@\n+# This testcase is part of GDB, the GNU debugger.\n+\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test the \"with\" command.\n+\n+load_lib completion-support.exp\n+\n+standard_testfile .c\n+\n+if {[build_executable \"failed to prepare\" $testfile $srcfile debug]} {\n+    return -1\n+}\n+\n+clean_restart $binfile\n+\n+# Test \"maint with\".  VALUES is a list of values.  A nested \"with\" is\n+# performed with each combination of pair of values from this list.\n+# This exercises setting a value, and restoring it too.  This is\n+# particularly important for the \"special\" values like \"unlimited\",\n+# which for example for var_uinteger maps to 0 at the user-visible\n+# level, but maps to -1 internally.\n+\n+proc test_with {setting values} {\n+    foreach val1 $values {\n+\tforeach val2 $values {\n+\t    gdb_test \\\n+\t\t\"maint with test-settings $setting $val1 -- maint with test-settings $setting $val2 -- p 1\" \\\n+\t\t\" = 1\"\n+\t}\n+    }\n+}\n+\n+# Test \"maint with\" in the error case.  SETTING is the \"maint set\n+# test-setting\" setting to exercise.  TMP_VAL is the value to set the\n+# setting to.  EXPECTED_RE is the expected GDB output, which should be\n+# an error of some kind.  Also checks that the setting's original\n+# value is preserved across the error.\n+\n+proc test_with_error {setting tmp_val expected_re} {\n+    global gdb_prompt\n+\n+    with_test_prefix \"$setting, $tmp_val\" {\n+\tset test \"save org value\"\n+\tset org_val \"\"\n+\tgdb_test_multiple \"maint show test-settings $setting\" $test {\n+\t    -re \"(.*)\\r\\n$gdb_prompt $\" {\n+\t\tset org_val $expect_out(1,string)\n+\t\tpass $test\n+\t    }\n+\t}\n+\n+\tgdb_test \\\n+\t    \"maint with test-settings $setting $tmp_val -- p 1\" \\\n+\t    $expected_re\n+\n+\tgdb_test \"maint show test-settings $setting\" \"^$org_val\" \\\n+\t    \"value hasn't changed across error\"\n+    }\n+}\n+\n+# Test \"with\" framework basics, using the internal \"maint with\n+# test-settings\" subcommands.\n+with_test_prefix \"maint\" {\n+    test_with \"auto-boolean\" {\"on\" \"off\" \"auto\"}\n+    test_with \"boolean\" {\"\" \"on\" \"off\" \"0\" \"1\" \"enable\" \"disable\"}\n+    test_with \"integer\" {\"0\" \"1\" \"-1\" \"unlimited\"}\n+    test_with \"uinteger\" {\"0\" \"1\" \"unlimited\"}\n+    test_with \"zinteger\" {\"0\" \"1\" \"-1\"}\n+    test_with \"zuinteger\" {\"0\" \"1\"}\n+    test_with \"zuinteger-unlimited\" {\"-1\" \"unlimited\" \"0\" \"1\"}\n+    test_with \"string\" {\"\" \"foo\" \"\\\"hello world\\\"\"}\n+    test_with \"string-noescape\" {\"\" \"foo\" \"\\\"hello world\\\"\"}\n+    test_with \"filename\" {\"/foo\" \"bar/x/y\"}\n+    test_with \"optional-filename\" {\"\" \"/foo\" \"bar/x/y\"}\n+    test_with \"enum\" {\"xxx\" \"yyy\"}\n+\n+    # Check the most important error conditions.  E.g., empty,\n+    # negative or \"unlimited\" values for settings that don't accept\n+    # those.  Exhaustive error coverage of the set/with value parsing\n+    # is left to \"set\" testing, in gdb.base/settings.exp.\n+    test_with_error \"auto-boolean\" \"\" \\\n+\t\"\\\"on\\\", \\\"off\\\" or \\\"auto\\\" expected\\\\.\"\n+    test_with_error \"auto-boolean\" \"xxx\" \\\n+\t\"\\\"on\\\", \\\"off\\\" or \\\"auto\\\" expected\\\\.\"\n+    test_with_error \"boolean\" \"2\" \"\\\"on\\\" or \\\"off\\\" expected\\\\.\"\n+    test_with_error \"uinteger\" \"-1\" \"integer -1 out of range\"\n+    test_with_error \"uinteger\" \"\" \\\n+\t\"Argument required \\\\(integer to set it to, or \\\"unlimited\\\"\\\\.\\\\)\\\\.\"\n+    test_with_error \"zuinteger\" \"-1\" \"integer -1 out of range\"\n+    test_with_error \"zuinteger\" \"\" \\\n+\t\"Argument required \\\\(integer to set it to\\\\.\\\\)\\\\.\"\n+    test_with_error \"zuinteger-unlimited\" \"-2\" \\\n+\t\"only -1 is allowed to set as unlimited\"\n+    test_with_error \"zuinteger-unlimited\" \"\" \\\n+\t\"Argument required \\\\(integer to set it to, or \\\"unlimited\\\"\\\\.\\\\)\\\\.\"\n+    test_with_error \"filename\" \"\" \\\n+\t\"Argument required \\\\(filename to set it to\\\\.\\\\)\\\\.\"\n+    test_with_error \"enum\" \"\" \\\n+\t\"Requires an argument\\\\. Valid arguments are xxx, yyy, zzz\\\\.\"\n+}\n+\n+# Basic/core tests using user-visible commands.\n+with_test_prefix \"basics\" {\n+    gdb_test \"print g_s\" \" = {a = 1, b = 2, c = 3}\"\n+    gdb_test \"with print pretty -- print g_s\" \\\n+\t[multi_line  \\\n+\t     \" = {\" \\\n+\t     \"  a = 1,\" \\\n+\t     \"  b = 2,\" \\\n+\t     \"  c = 3\" \\\n+\t     \"}\"]\n+\n+    # A boolean setting.\n+    gdb_test \"with non-stop on -- show non-stop\" \\\n+\t\"Controlling the inferior in non-stop mode is on\\\\.\"\n+    gdb_test \"show non-stop\" \\\n+\t\"Controlling the inferior in non-stop mode is off\\\\.\"\n+\n+    # Language.\n+    gdb_test \"with language pascal -- show language\" \\\n+\t\"The current source language is \\\"pascal\\\"\\\\.\"\n+\n+    gdb_test \"show language\" \\\n+\t\"The current source language is \\\"auto; currently c\\\"\\\\.\"\n+\n+    gdb_test \"with language ada -- print g_s\" \\\n+\t\" = \\\\(a => 1, b => 2, c => 3\\\\)\"\n+\n+    # Nested \"with\"s.\n+    gdb_test \"with language ada -- with language c -- print g_s\" \\\n+\t\" = {a = 1, b = 2, c = 3}\"\n+\n+    # \"w\" alias.\n+    gdb_test \"w language pascal -- show language\" \\\n+\t\"The current source language is \\\"pascal\\\"\\\\.\" \\\n+\t\"w alias works\"\n+\n+    # An early prototype of the \"with\" command got this wrong.\n+    gdb_test \\\n+\t\"w print repeats unlimited -- w print repeats 1 -- p \\\"1223334444\\\"\" \\\n+\t\" = \\\"1\\\", '2' <repeats 2 times>, '3' <repeats 3 times>, '4' <repeats 4 times>\"\n+}\n+\n+# Check a user-defined command.\n+with_test_prefix \"user-defined\" {\n+    # A user defined command.\n+    set test \"define usercmd\"\n+    gdb_test_multiple \"define usercmd\" $test {\n+\t-re \"End with\"  {\n+\t    gdb_test \\\n+\t\t[multi_line_input \\\n+\t\t     {print g_s} \\\n+\t\t     {end}] \\\n+\t\t\"\" \\\n+\t\t$test\n+\t}\n+    }\n+    gdb_test \"with language ada -- usercmd\" \\\n+\t\" = \\\\(a => 1, b => 2, c => 3\\\\)\"\n+}\n+\n+# Check repeating.\n+with_test_prefix \"repeat\" {\n+    clean_restart $binfile\n+\n+    # \"with\" with no command reinvokes the previous command.\n+    gdb_test \"with language ada\" \\\n+\t\"No previous command to relaunch\" \\\n+\t\"reinvoke with no previous command to relaunch\"\n+\n+    gdb_test \"print g_s\" \" = {a = 1, b = 2, c = 3}\"\n+\n+    gdb_test \"with language ada\" \\\n+\t\" = \\\\(a => 1, b => 2, c => 3\\\\)\" \\\n+\t\"reinvoke with language\"\n+\n+    # Same, but with \"--\".\n+    gdb_test \"with language fortran --\" \\\n+\t\" = \\\\( a = 1, b = 2, c = 3 \\\\)\" \\\n+\t\"reinvoke with language and --\"\n+\n+    # Repeating repeats the original \"print g_s\", not the last \"with\"\n+    # command.\n+    set test \"repeat command line\"\n+    send_gdb \"\\n\"\n+    gdb_test_multiple \"\" $test {\n+\t-re \" = {a = 1, b = 2, c = 3}\\r\\n$gdb_prompt $\" {\n+\t    pass $test\n+\t}\n+    }\n+}\n+\n+# Basic run control.\n+with_test_prefix \"run control\" {\n+    clean_restart $binfile\n+\n+    if ![runto_main] {\n+\tfail \"cannot run to main\"\n+\treturn\n+    }\n+\n+    # Check \"with\" with a synchronous execution command.\n+    gdb_test \"with disassemble-next-line on -- next\" \\\n+\t\"return 0;.*=>.*\"\n+}\n+\n+# Check errors.\n+with_test_prefix \"errors\" {\n+    # Try both an unknown root setting and an unknown prefixed\n+    # setting.  The errors come from different locations in the\n+    # sources.\n+    gdb_test \"with xxxx yyyy\" \\\n+\t\"Undefined set command: \\\"xxxx\\\".  Try \\\"help set\\\"\\\\.\"\n+    gdb_test \"with print xxxx yyyy\" \\\n+\t\"Undefined set print command: \\\"xxxx yyyy\\\".  Try \\\"help set print\\\"\\\\.\"\n+    # Try one error case for \"maint with\", to make sure the right\n+    # \"maintenance with\" prefix is shown.\n+    gdb_test \"maint with xxxx yyyy\" \\\n+\t\"Undefined maintenance set command: \\\"xxxx\\\".  Try \\\"help maintenance set\\\"\\\\.\"\n+\n+    # Try ambiguous settings.\n+    gdb_test \"with w\" \\\n+\t\"Ambiguous set command \\\"w\\\": watchdog, width, write\\\\.\"\n+    gdb_test \"with print m\" \\\n+\t\"Ambiguous set print command \\\"m\\\": max-depth, max-symbolic-offset\\\\.\"\n+\n+    gdb_test \"with variable xxx=1\" \\\n+\t\"Cannot use this setting with the \\\"with\\\" command\"\n+\n+    gdb_test \"with print elements -- p 1\" \\\n+\t\"Argument required \\\\(integer to set it to, or \\\"unlimited\\\"\\\\.\\\\)\\\\.\"\n+\n+    gdb_test \"with -- p 1\" \\\n+\t\"Missing setting before '--' delimiter\"\n+\n+    # Check that the setting is restored even if the command throws.\n+    gdb_test \"with print elements 1 -- unknowncommand\" \\\n+\t\"Undefined command: \\\"unknowncommand\\\"\\\\.  Try \\\"help\\\"\\\\.\"\n+    gdb_test \"show print elements\" \\\n+\t\"Limit on string chars or array elements to print is 200\\\\.\"\n+}\n+\n+# Check completion.\n+with_test_prefix \"completion\" {\n+    test_gdb_complete_unique \\\n+\t\"with pri\" \\\n+\t\"with print\"\n+\n+    test_gdb_complete_unique \\\n+\t\"with print ele\" \\\n+\t\"with print elements\"\n+\n+    test_gdb_complete_unique \\\n+\t\"with print elements u\" \\\n+\t\"with print elements unlimited\"\n+\n+    test_gdb_complete_none \\\n+\t\"with print elements unlimited \"\n+\n+    test_gdb_completion_offers_commands \"with print elements unlimited -- \"\n+\n+    # Check that the completer nests into the nested command line's\n+    # completer.\n+    test_gdb_complete_unique \\\n+\t\"with print elements unlimited -- with print ele\" \\\n+\t\"with print elements unlimited -- with print elements\"\n+\n+    # Check completion of \"maint with\".  \"maint with\" and \"with\"'s\n+    # completers share 99% of the code.  All we need to care about\n+    # here is that the completion word point is computed correctly, so\n+    # any simple completion is sufficient.\n+    test_gdb_complete_unique \\\n+\t\"maint with test-set\" \\\n+\t\"maint with test-settings\"\n+}"
    },
    {
      "sha": "c5fc94f82951de115dab3588343b3aaa40ee4244",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc98707b0ab48fd8ca3ac37acefa120496baf6/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=fdbc98707b0ab48fd8ca3ac37acefa120496baf6",
      "patch": "@@ -730,7 +730,7 @@ dont_repeat (void)\n \n /* See command.h  */\n \n-void\n+const char *\n repeat_previous ()\n {\n   /* Do not repeat this command, as this command is a repeating command.  */\n@@ -740,6 +740,11 @@ repeat_previous ()\n      so swap it with previous_saved_command_line.  */\n   std::swap (previous_saved_command_line, saved_command_line);\n   std::swap (previous_repeat_arguments, repeat_arguments);\n+\n+  const char *prev = skip_spaces (get_saved_command_line ());\n+  if (*prev == '\\0')\n+    error (_(\"No previous command to relaunch\"));\n+  return prev;\n }\n \n /* See command.h.  */"
    }
  ]
}