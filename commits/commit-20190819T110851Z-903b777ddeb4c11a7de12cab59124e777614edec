{
  "sha": "903b777ddeb4c11a7de12cab59124e777614edec",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTAzYjc3N2RkZWI0YzExYTdkZTEyY2FiNTkxMjRlNzc3NjE0ZWRlYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-19T08:04:03Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-19T11:08:51Z"
    },
    "message": "PowerPC64 ha/lo insn checks\n\nThese are done in ppc64_elf_edit_toc, which now also garbage collects\nunused GOT entries.  The checks for legitimate instructions weren't\nbeing done for the GOT relocs, unless the file also happened to have a\ntoc section.\n\n\t* elf64-ppc.c (struct ppc64_elf_obj_tdata): Rename has_gotrel\n\tto has_optrel.\n\t(struct _ppc64_elf_section_data): Likewise.\n\t(ppc64_elf_check_relocs): Set has_optrel for more relocs.\n\t(ppc64_elf_edit_toc): Do ha/lo insn checks in GOT loop rather\n\tthan TOC loop.  Check PLT16 insns too.",
    "tree": {
      "sha": "590cb0f578622b2f1d643a3d93c7360ce7a0bbc8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/590cb0f578622b2f1d643a3d93c7360ce7a0bbc8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/903b777ddeb4c11a7de12cab59124e777614edec",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/903b777ddeb4c11a7de12cab59124e777614edec",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/903b777ddeb4c11a7de12cab59124e777614edec",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/903b777ddeb4c11a7de12cab59124e777614edec/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "72c03e30ae783a5f38a8c124588a4536ae06e6ef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/72c03e30ae783a5f38a8c124588a4536ae06e6ef",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/72c03e30ae783a5f38a8c124588a4536ae06e6ef"
    }
  ],
  "stats": {
    "total": 181,
    "additions": 109,
    "deletions": 72
  },
  "files": [
    {
      "sha": "4c941138484093073b42ad9f19f956d4e99233fa",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/903b777ddeb4c11a7de12cab59124e777614edec/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/903b777ddeb4c11a7de12cab59124e777614edec/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=903b777ddeb4c11a7de12cab59124e777614edec",
      "patch": "@@ -1,3 +1,12 @@\n+2019-08-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf64-ppc.c (struct ppc64_elf_obj_tdata): Rename has_gotrel\n+\tto has_optrel.\n+\t(struct _ppc64_elf_section_data): Likewise.\n+\t(ppc64_elf_check_relocs): Set has_optrel for more relocs.\n+\t(ppc64_elf_edit_toc): Do ha/lo insn checks in GOT loop rather\n+\tthan TOC loop.  Check PLT16 insns too.\n+\n 2019-08-16  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/24905"
    },
    {
      "sha": "60918d91a173dded0cac234866b303566a1825cd",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 100,
      "deletions": 72,
      "changes": 172,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/903b777ddeb4c11a7de12cab59124e777614edec/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/903b777ddeb4c11a7de12cab59124e777614edec/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=903b777ddeb4c11a7de12cab59124e777614edec",
      "patch": "@@ -1780,8 +1780,9 @@ struct ppc64_elf_obj_tdata\n      instruction not one we handle.  */\n   unsigned int unexpected_toc_insn : 1;\n \n-  /* Set if got relocs that can be optimised are present in this file.  */\n-  unsigned int has_gotrel : 1;\n+  /* Set if PLT/GOT/TOC relocs that can be optimised are present in\n+     this file.  */\n+  unsigned int has_optrel : 1;\n };\n \n #define ppc64_elf_tdata(bfd) \\\n@@ -1982,8 +1983,9 @@ struct _ppc64_elf_section_data\n   /* Flag set when PLTCALL relocs are detected.  */\n   unsigned int has_pltcall:1;\n \n-  /* Flag set when section has GOT relocations that can be optimised.  */\n-  unsigned int has_gotrel:1;\n+  /* Flag set when section has PLT/GOT/TOC relocations that can be\n+     optimised.  */\n+  unsigned int has_optrel:1;\n };\n \n #define ppc64_elf_section_data(sec) \\\n@@ -4573,6 +4575,34 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  sym_addend = 0;\n \t  break;\n \t}\n+\n+      switch (r_type)\n+\t{\n+\tcase R_PPC64_PLT16_HA:\n+\tcase R_PPC64_GOT_TLSLD16_HA:\n+\tcase R_PPC64_GOT_TLSGD16_HA:\n+\tcase R_PPC64_GOT_TPREL16_HA:\n+\tcase R_PPC64_GOT_DTPREL16_HA:\n+\tcase R_PPC64_GOT16_HA:\n+\tcase R_PPC64_TOC16_HA:\n+\tcase R_PPC64_PLT16_LO:\n+\tcase R_PPC64_PLT16_LO_DS:\n+\tcase R_PPC64_GOT_TLSLD16_LO:\n+\tcase R_PPC64_GOT_TLSGD16_LO:\n+\tcase R_PPC64_GOT_TPREL16_LO_DS:\n+\tcase R_PPC64_GOT_DTPREL16_LO_DS:\n+\tcase R_PPC64_GOT16_LO:\n+\tcase R_PPC64_GOT16_LO_DS:\n+\tcase R_PPC64_TOC16_LO:\n+\tcase R_PPC64_TOC16_LO_DS:\n+\tcase R_PPC64_GOT_PCREL34:\n+\t  ppc64_elf_tdata (abfd)->has_optrel = 1;\n+\t  ppc64_elf_section_data (sec)->has_optrel = 1;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+\n       if (h != NULL)\n \t{\n \t  if (h->type == STT_GNU_IFUNC)\n@@ -4650,17 +4680,13 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  sec->has_tls_reloc = 1;\n \t  goto dogot;\n \n+\tcase R_PPC64_GOT16:\n+\tcase R_PPC64_GOT16_LO:\n+\tcase R_PPC64_GOT16_HI:\n \tcase R_PPC64_GOT16_HA:\n+\tcase R_PPC64_GOT16_DS:\n \tcase R_PPC64_GOT16_LO_DS:\n \tcase R_PPC64_GOT_PCREL34:\n-\t  ppc64_elf_tdata (abfd)->has_gotrel = 1;\n-\t  ppc64_elf_section_data (sec)->has_gotrel = 1;\n-\t  /* Fall through.  */\n-\n-\tcase R_PPC64_GOT16_DS:\n-\tcase R_PPC64_GOT16:\n-\tcase R_PPC64_GOT16_HI:\n-\tcase R_PPC64_GOT16_LO:\n \tdogot:\n \t  /* This symbol requires a global offset table entry.  */\n \t  sec->has_toc_reloc = 1;\n@@ -8604,65 +8630,8 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t\t  struct elf_link_hash_entry *h;\n \t\t  Elf_Internal_Sym *sym;\n \t\t  bfd_vma val;\n-\t\t  enum {no_check, check_lo, check_ha} insn_check;\n \n \t\t  r_type = ELF64_R_TYPE (rel->r_info);\n-\t\t  switch (r_type)\n-\t\t    {\n-\t\t    default:\n-\t\t      insn_check = no_check;\n-\t\t      break;\n-\n-\t\t    case R_PPC64_GOT_TLSLD16_HA:\n-\t\t    case R_PPC64_GOT_TLSGD16_HA:\n-\t\t    case R_PPC64_GOT_TPREL16_HA:\n-\t\t    case R_PPC64_GOT_DTPREL16_HA:\n-\t\t    case R_PPC64_GOT16_HA:\n-\t\t    case R_PPC64_TOC16_HA:\n-\t\t      insn_check = check_ha;\n-\t\t      break;\n-\n-\t\t    case R_PPC64_GOT_TLSLD16_LO:\n-\t\t    case R_PPC64_GOT_TLSGD16_LO:\n-\t\t    case R_PPC64_GOT_TPREL16_LO_DS:\n-\t\t    case R_PPC64_GOT_DTPREL16_LO_DS:\n-\t\t    case R_PPC64_GOT16_LO:\n-\t\t    case R_PPC64_GOT16_LO_DS:\n-\t\t    case R_PPC64_TOC16_LO:\n-\t\t    case R_PPC64_TOC16_LO_DS:\n-\t\t      insn_check = check_lo;\n-\t\t      break;\n-\t\t    }\n-\n-\t\t  if (insn_check != no_check)\n-\t\t    {\n-\t\t      bfd_vma off = rel->r_offset & ~3;\n-\t\t      unsigned char buf[4];\n-\t\t      unsigned int insn;\n-\n-\t\t      if (!bfd_get_section_contents (ibfd, sec, buf, off, 4))\n-\t\t\t{\n-\t\t\t  free (used);\n-\t\t\t  goto error_ret;\n-\t\t\t}\n-\t\t      insn = bfd_get_32 (ibfd, buf);\n-\t\t      if (insn_check == check_lo\n-\t\t\t  ? !ok_lo_toc_insn (insn, r_type)\n-\t\t\t  : ((insn & ((0x3f << 26) | 0x1f << 16))\n-\t\t\t     != ((15u << 26) | (2 << 16)) /* addis rt,2,imm */))\n-\t\t\t{\n-\t\t\t  char str[12];\n-\n-\t\t\t  ppc64_elf_tdata (ibfd)->unexpected_toc_insn = 1;\n-\t\t\t  sprintf (str, \"%#08x\", insn);\n-\t\t\t  info->callbacks->einfo\n-\t\t\t    /* xgettext:c-format */\n-\t\t\t    (_(\"%H: toc optimization is not supported for\"\n-\t\t\t       \" %s instruction\\n\"),\n-\t\t\t     ibfd, sec, rel->r_offset & ~3, str);\n-\t\t\t}\n-\t\t    }\n-\n \t\t  switch (r_type)\n \t\t    {\n \t\t    case R_PPC64_TOC16:\n@@ -9014,19 +8983,21 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n       if (!is_ppc64_elf (ibfd))\n \tcontinue;\n \n-      if (!ppc64_elf_tdata (ibfd)->has_gotrel)\n+      if (!ppc64_elf_tdata (ibfd)->has_optrel)\n \tcontinue;\n \n       sec = ppc64_elf_tdata (ibfd)->got;\n-      got = sec->output_section->vma + sec->output_offset + 0x8000;\n+      got = 0;\n+      if (sec != NULL)\n+\tgot = sec->output_section->vma + sec->output_offset + 0x8000;\n \n       local_syms = NULL;\n       symtab_hdr = &elf_symtab_hdr (ibfd);\n \n       for (sec = ibfd->sections; sec != NULL; sec = sec->next)\n \t{\n \t  if (sec->reloc_count == 0\n-\t      || !ppc64_elf_section_data (sec)->has_gotrel\n+\t      || !ppc64_elf_section_data (sec)->has_optrel\n \t      || discarded_section (sec))\n \t    continue;\n \n@@ -9056,8 +9027,65 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t      bfd_vma sym_addend, val, pc;\n \t      unsigned char buf[8];\n \t      unsigned int insn;\n+\t      enum {no_check, check_lo, check_ha} insn_check;\n \n \t      r_type = ELF64_R_TYPE (rel->r_info);\n+\t      switch (r_type)\n+\t\t{\n+\t\tdefault:\n+\t\t  insn_check = no_check;\n+\t\t  break;\n+\n+\t\tcase R_PPC64_PLT16_HA:\n+\t\tcase R_PPC64_GOT_TLSLD16_HA:\n+\t\tcase R_PPC64_GOT_TLSGD16_HA:\n+\t\tcase R_PPC64_GOT_TPREL16_HA:\n+\t\tcase R_PPC64_GOT_DTPREL16_HA:\n+\t\tcase R_PPC64_GOT16_HA:\n+\t\tcase R_PPC64_TOC16_HA:\n+\t\t  insn_check = check_ha;\n+\t\t  break;\n+\n+\t\tcase R_PPC64_PLT16_LO:\n+\t\tcase R_PPC64_PLT16_LO_DS:\n+\t\tcase R_PPC64_GOT_TLSLD16_LO:\n+\t\tcase R_PPC64_GOT_TLSGD16_LO:\n+\t\tcase R_PPC64_GOT_TPREL16_LO_DS:\n+\t\tcase R_PPC64_GOT_DTPREL16_LO_DS:\n+\t\tcase R_PPC64_GOT16_LO:\n+\t\tcase R_PPC64_GOT16_LO_DS:\n+\t\tcase R_PPC64_TOC16_LO:\n+\t\tcase R_PPC64_TOC16_LO_DS:\n+\t\t  insn_check = check_lo;\n+\t\t  break;\n+\t\t}\n+\n+\t      if (insn_check != no_check)\n+\t\t{\n+\t\t  bfd_vma off = rel->r_offset & ~3;\n+\n+\t\t  if (!bfd_get_section_contents (ibfd, sec, buf, off, 4))\n+\t\t    goto got_error_ret;\n+\n+\t\t  insn = bfd_get_32 (ibfd, buf);\n+\t\t  if (insn_check == check_lo\n+\t\t      ? !ok_lo_toc_insn (insn, r_type)\n+\t\t      : ((insn & ((0x3f << 26) | 0x1f << 16))\n+\t\t\t != ((15u << 26) | (2 << 16)) /* addis rt,2,imm */))\n+\t\t    {\n+\t\t      char str[12];\n+\n+\t\t      ppc64_elf_tdata (ibfd)->unexpected_toc_insn = 1;\n+\t\t      sprintf (str, \"%#08x\", insn);\n+\t\t      info->callbacks->einfo\n+\t\t\t/* xgettext:c-format */\n+\t\t\t(_(\"%H: got/toc optimization is not supported for\"\n+\t\t\t   \" %s instruction\\n\"),\n+\t\t\t ibfd, sec, rel->r_offset & ~3, str);\n+\t\t      continue;\n+\t\t    }\n+\t\t}\n+\n \t      switch (r_type)\n \t\t{\n \t\t/* Note that we don't delete GOT entries for"
    }
  ]
}