{
  "sha": "7be2bb4f47b7b25d4f60b52f6ebaade0644827f2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2JlMmJiNGY0N2I3YjI1ZDRmNjBiNTJmNmViYWFkZTA2NDQ4MjdmMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T12:48:01Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T12:48:01Z"
    },
    "message": "Fix Windows debugging regression\n\nThe updated pending stop series introduced a regression in Windows\ndebugging.  When stopped at a software breakpoint, we would adjust the\nPC each time it was requested -- however, more than a single\nadjustment is incorrect.  This patch introduces a new flag that is\nused to ensure the adjustment only happens a single time.\n\nNo similar change is needed in gdbserver, because it adjusts the PC in\na different way.\n\nI still can't run the gdb test suite on Windows, but I can run the\ninternal AdaCore test suite there; and this fixes the regressions\nthere.\n\ngdb/ChangeLog\n2020-04-24  Tom Tromey  <tromey@adacore.com>\n\n\t* nat/windows-nat.h (struct windows_thread_info)\n\t<pc_adjusted>: New member.\n\t* windows-nat.c (windows_fetch_one_register): Check\n\tpc_adjusted.\n\t(windows_nat_target::get_windows_debug_event)\n\t(windows_nat_target::wait): Set pc_adjusted.",
    "tree": {
      "sha": "193917cb4296ca3d8a8a65aafc570768398a4972",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/193917cb4296ca3d8a8a65aafc570768398a4972"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7be2bb4f47b7b25d4f60b52f6ebaade0644827f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7be2bb4f47b7b25d4f60b52f6ebaade0644827f2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7be2bb4f47b7b25d4f60b52f6ebaade0644827f2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7be2bb4f47b7b25d4f60b52f6ebaade0644827f2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "884287754e8da49581b4873b936d8eba7b1f052e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/884287754e8da49581b4873b936d8eba7b1f052e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/884287754e8da49581b4873b936d8eba7b1f052e"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 23,
    "deletions": 1
  },
  "files": [
    {
      "sha": "102edfcbc1f2e45435544c9898084a8598ddb79b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7be2bb4f47b7b25d4f60b52f6ebaade0644827f2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7be2bb4f47b7b25d4f60b52f6ebaade0644827f2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7be2bb4f47b7b25d4f60b52f6ebaade0644827f2",
      "patch": "@@ -1,3 +1,12 @@\n+2020-04-24  Tom Tromey  <tromey@adacore.com>\n+\n+\t* nat/windows-nat.h (struct windows_thread_info)\n+\t<pc_adjusted>: New member.\n+\t* windows-nat.c (windows_fetch_one_register): Check\n+\tpc_adjusted.\n+\t(windows_nat_target::get_windows_debug_event)\n+\t(windows_nat_target::wait): Set pc_adjusted.\n+\n 2020-04-24  Tom de Vries  <tdevries@suse.de>\n \n \t* contrib/cc-with-tweaks.sh: Remove <exec>.gdb-index file handling."
    },
    {
      "sha": "80c652b22a7422941ddb118ce2359d2c0d4db1a6",
      "filename": "gdb/nat/windows-nat.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7be2bb4f47b7b25d4f60b52f6ebaade0644827f2/gdb/nat/windows-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7be2bb4f47b7b25d4f60b52f6ebaade0644827f2/gdb/nat/windows-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.h?ref=7be2bb4f47b7b25d4f60b52f6ebaade0644827f2",
      "patch": "@@ -93,6 +93,11 @@ struct windows_thread_info\n      breakpoint.  This is used to offset the PC when needed.  */\n   bool stopped_at_software_breakpoint = false;\n \n+  /* True if we've adjusted the PC after hitting a software\n+     breakpoint, false otherwise.  This lets us avoid multiple\n+     adjustments if the registers are read multiple times.  */\n+  bool pc_adjusted = false;\n+\n   /* The name of the thread, allocated by xmalloc.  */\n   gdb::unique_xmalloc_ptr<char> name;\n };"
    },
    {
      "sha": "f52af9a12747aba5b4abd990d4345139c57be9ee",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7be2bb4f47b7b25d4f60b52f6ebaade0644827f2/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7be2bb4f47b7b25d4f60b52f6ebaade0644827f2/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=7be2bb4f47b7b25d4f60b52f6ebaade0644827f2",
      "patch": "@@ -604,6 +604,7 @@ windows_fetch_one_register (struct regcache *regcache,\n   else\n     {\n       if (th->stopped_at_software_breakpoint\n+\t  && !th->pc_adjusted\n \t  && r == gdbarch_pc_regnum (gdbarch))\n \t{\n \t  int size = register_size (gdbarch, r);\n@@ -622,6 +623,8 @@ windows_fetch_one_register (struct regcache *regcache,\n \t      value -= gdbarch_decr_pc_after_break (gdbarch);\n \t      memcpy (context_offset, &value, size);\n \t    }\n+\t  /* Make sure we only rewrite the PC a single time.  */\n+\t  th->pc_adjusted = true;\n \t}\n       regcache->raw_supply (r, context_offset);\n     }\n@@ -1757,6 +1760,7 @@ windows_nat_target::get_windows_debug_event (int pid,\n \t  ptid_t ptid = ptid_t (current_event.dwProcessId, thread_id, 0);\n \t  th = thread_rec (ptid, INVALIDATE_CONTEXT);\n \t  th->stopped_at_software_breakpoint = true;\n+\t  th->pc_adjusted = false;\n \t}\n       pending_stops.push_back ({thread_id, *ourstatus, current_event});\n       thread_id = 0;\n@@ -1835,7 +1839,11 @@ windows_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t\t      || (current_event.u.Exception.ExceptionRecord.ExceptionCode\n \t\t\t  == STATUS_WX86_BREAKPOINT))\n \t\t  && windows_initialization_done)\n-\t\tcurrent_windows_thread->stopped_at_software_breakpoint = true;\n+\t\t{\n+\t\t  current_windows_thread->stopped_at_software_breakpoint\n+\t\t    = true;\n+\t\t  current_windows_thread->pc_adjusted = false;\n+\t\t}\n \t    }\n \n \t  return result;"
    }
  ]
}