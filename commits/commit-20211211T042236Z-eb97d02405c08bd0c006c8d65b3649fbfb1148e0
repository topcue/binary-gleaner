{
  "sha": "eb97d02405c08bd0c006c8d65b3649fbfb1148e0",
  "node_id": "C_kwDOANOeidoAKGViOTdkMDI0MDVjMDhiZDBjMDA2YzhkNjViMzY0OWZiZmIxMTQ4ZTA",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-12-11T04:22:36Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-12-11T04:22:36Z"
    },
    "message": "[GOLD] PowerPC64 @notoc in non-power10 code\n\nGold version of commit 7aba54da42.\n\nelfcpp/\n\t* powerpc.h (R_PPC64_REL24_P9NOTOC): Define.\ngold/\n\t* powerpc.cc (Target_powerpc::maybe_skip_tls_get_addr_call,\n\tis_branch_reloc, max_branch_delta): Handle R_PPC64_REL24_P9NOTOC.\n\t(Target_powerpc::Branch_info::make_stub): Likewise.\n\t(struct Plt_stub_ent): Add p9notoc_, p9off_, tsize_.\n\t(struct Branch_stub_ent): Add p9notoc_, p9off_.\n\t(Stub_table::add_plt_call_entry): Handle R_PPC64_REL24_P9NOTOC.\n\t(Stub_table::add_long_branch_entry): Likewise.\n\t(Stub_table::add_eh_frame): Likewise.\n\t(Stub_table::plt_call_size): Return aligned size.  Adjust callers.\n\tHandle p9notoc_ sizing.\n\t(Stub_table::do_write): Write out p9notoc_ stubs.\n\t(Target_powerpc::Scan::get_reference_flags, local, global):\n\tHandle R_PPC64_REL24_P9NOTOC.\n\t(Target_powerpc::Relocate::relocate): Likewise.",
    "tree": {
      "sha": "8c220c1f9db2fbb509d2c126d6b662dbc5052c5d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8c220c1f9db2fbb509d2c126d6b662dbc5052c5d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eb97d02405c08bd0c006c8d65b3649fbfb1148e0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb97d02405c08bd0c006c8d65b3649fbfb1148e0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eb97d02405c08bd0c006c8d65b3649fbfb1148e0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb97d02405c08bd0c006c8d65b3649fbfb1148e0/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "40eb8b92a1c795cda00bf931ab9cdd74da434d54",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40eb8b92a1c795cda00bf931ab9cdd74da434d54",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/40eb8b92a1c795cda00bf931ab9cdd74da434d54"
    }
  ],
  "stats": {
    "total": 299,
    "additions": 223,
    "deletions": 76
  },
  "files": [
    {
      "sha": "3f4f79d8ab2df77607476f9e07c78eccec0b1e1a",
      "filename": "elfcpp/powerpc.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb97d02405c08bd0c006c8d65b3649fbfb1148e0/elfcpp/powerpc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb97d02405c08bd0c006c8d65b3649fbfb1148e0/elfcpp/powerpc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/powerpc.h?ref=eb97d02405c08bd0c006c8d65b3649fbfb1148e0",
      "patch": "@@ -184,6 +184,7 @@ enum\n   R_PPC64_PLTSEQ_NOTOC = 121,\n   R_PPC64_PLTCALL_NOTOC = 122,\n   R_PPC64_PCREL_OPT = 123,\n+  R_PPC64_REL24_P9NOTOC = 124,\n \n   R_PPC64_D34 = 128,\n   R_PPC64_D34_LO = 129,"
    },
    {
      "sha": "a40614cd45c5977b1cb355efc23036431e3f80d2",
      "filename": "gold/powerpc.cc",
      "status": "modified",
      "additions": 222,
      "deletions": 76,
      "changes": 298,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb97d02405c08bd0c006c8d65b3649fbfb1148e0/gold/powerpc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb97d02405c08bd0c006c8d65b3649fbfb1148e0/gold/powerpc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/powerpc.cc?ref=eb97d02405c08bd0c006c8d65b3649fbfb1148e0",
      "patch": "@@ -1329,6 +1329,7 @@ class Target_powerpc : public Sized_target<size, big_endian>\n       bool is_tls_call\n \t= ((r_type == elfcpp::R_POWERPC_REL24\n \t    || (size == 64 && r_type == elfcpp::R_PPC64_REL24_NOTOC)\n+\t    || r_type == elfcpp::R_PPC64_REL24_P9NOTOC\n \t    || r_type == elfcpp::R_PPC_PLTREL24\n \t    || is_plt16_reloc<size>(r_type)\n \t    || r_type == elfcpp::R_PPC64_PLT_PCREL34\n@@ -1891,6 +1892,7 @@ is_branch_reloc(unsigned int r_type)\n {\n   return (r_type == elfcpp::R_POWERPC_REL24\n \t  || (size == 64 && r_type == elfcpp::R_PPC64_REL24_NOTOC)\n+\t  || r_type == elfcpp::R_PPC64_REL24_P9NOTOC\n \t  || r_type == elfcpp::R_PPC_PLTREL24\n \t  || r_type == elfcpp::R_PPC_LOCAL24PC\n \t  || r_type == elfcpp::R_POWERPC_REL14\n@@ -3447,6 +3449,7 @@ max_branch_delta (unsigned int r_type)\n     return 1L << 15;\n   if (r_type == elfcpp::R_POWERPC_REL24\n       || (size == 64 && r_type == elfcpp::R_PPC64_REL24_NOTOC)\n+      || r_type == elfcpp::R_PPC64_REL24_P9NOTOC\n       || r_type == elfcpp::R_PPC_PLTREL24\n       || r_type == elfcpp::R_PPC_LOCAL24PC)\n     return 1L << 25;\n@@ -3621,12 +3624,14 @@ Target_powerpc<size, big_endian>::Branch_info::make_stub(\n \t}\n       unsigned int local_ent = 0;\n       if (size == 64\n-\t  && this->r_type_ != elfcpp::R_PPC64_REL24_NOTOC)\n+\t  && this->r_type_ != elfcpp::R_PPC64_REL24_NOTOC\n+\t  && this->r_type_ != elfcpp::R_PPC64_REL24_P9NOTOC)\n \tlocal_ent = elfcpp::ppc64_decode_local_entry(other);\n       Address delta = to + local_ent - from;\n       if (delta + max_branch_offset >= 2 * max_branch_offset\n \t  || (size == 64\n-\t      && this->r_type_ == elfcpp::R_PPC64_REL24_NOTOC\n+\t      && (this->r_type_ == elfcpp::R_PPC64_REL24_NOTOC\n+\t\t  || this->r_type_ == elfcpp::R_PPC64_REL24_P9NOTOC)\n \t      && (gsym != NULL\n \t\t  ? this->object_->ppc64_needs_toc(gsym)\n \t\t  : this->object_->ppc64_needs_toc(this->r_sym_))))\n@@ -4777,33 +4782,50 @@ class Stub_table : public Output_relaxed_input_section\n   struct Plt_stub_ent\n   {\n     Plt_stub_ent(unsigned int off, unsigned int indx)\n-      : off_(off), indx_(indx), iter_(0), notoc_(0), toc_(0),\n-\tr2save_(0), localentry0_(0), tocoff_(0)\n+      : off_(off), indx_(indx), tocoff_(0), p9off_(0), tsize_ (0), iter_(0),\n+\ttoc_(0), notoc_(0), p9notoc_(0), r2save_(0), localentry0_(0)\n     { }\n \n     unsigned int off_;\n     unsigned int indx_;\n+    // off_ points at p10 notoc stub, tocoff_ is offset from there to\n+    // toc stub, p9off_ is offset to p9notoc stub\n+    unsigned int tocoff_ : 8;\n+    unsigned int p9off_ : 8;\n+    // The size of the toc stub, used to locate blr on tls_get_addr stub.\n+    unsigned int tsize_ : 8;\n+    // Stub revision management\n     unsigned int iter_ : 1;\n-    unsigned int notoc_ : 1;\n+    // The three types of stubs.\n     unsigned int toc_ : 1;\n+    unsigned int notoc_ : 1;\n+    unsigned int p9notoc_ : 1;\n+    // Each with a possible variant saving r2 first\n     unsigned int r2save_ : 1;\n+    // Handy cached info from symbol\n     unsigned int localentry0_ : 1;\n-    unsigned int tocoff_ : 8;\n   };\n   struct Branch_stub_ent\n   {\n-    Branch_stub_ent(unsigned int off, bool notoc, bool save_res)\n-      : off_(off), iter_(0), notoc_(notoc), toc_(0), save_res_(save_res),\n-\tother_(0), tocoff_(0)\n+    Branch_stub_ent(unsigned int off)\n+      : off_(off), tocoff_(0), p9off_(0), iter_(0), toc_(0), notoc_(0),\n+\tp9notoc_(0), save_res_(0), other_(0)\n     { }\n \n     unsigned int off_;\n+    // off_ points at p10 notoc stub, tocoff_ is offset from there to\n+    // toc stub, p9off_ is offset to p9notoc stub\n+    unsigned int tocoff_ : 8;\n+    unsigned int p9off_ : 8;\n+    // Stub revision management\n     unsigned int iter_ : 1;\n-    unsigned int notoc_ : 1;\n+    // Four types of stubs.\n     unsigned int toc_ : 1;\n+    unsigned int notoc_ : 1;\n+    unsigned int p9notoc_ : 1;\n     unsigned int save_res_ : 1;\n+    // Handy cached info from symbol\n     unsigned int other_ : 3;\n-    unsigned int tocoff_ : 8;\n   };\n   typedef typename elfcpp::Elf_types<size>::Elf_Addr Address;\n   static const Address invalid_address = static_cast<Address>(0) - 1;\n@@ -5223,13 +5245,23 @@ Stub_table<size, big_endian>::add_plt_call_entry(\n \t  p.first->second.localentry0_ = 1;\n \t  this->targ_->set_has_localentry0();\n \t}\n-      if (r_type == elfcpp::R_PPC64_REL24_NOTOC)\n+      if (r_type == elfcpp::R_PPC64_REL24_NOTOC\n+\t  || r_type == elfcpp::R_PPC64_REL24_P9NOTOC)\n \t{\n-\t  if (!p.second && !p.first->second.notoc_\n-\t      && (!this->targ_->power10_stubs()\n-\t\t  || this->targ_->power10_stubs_auto()))\n-\t    this->need_resize_ = true;\n-\t  p.first->second.notoc_ = 1;\n+\t  if (this->targ_->power10_stubs()\n+\t      && (!this->targ_->power10_stubs_auto()\n+\t\t  || r_type == elfcpp::R_PPC64_REL24_NOTOC))\n+\t    {\n+\t      if (!p.second && !p.first->second.notoc_)\n+\t\tthis->need_resize_ = true;\n+\t      p.first->second.notoc_ = 1;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (!p.second && !p.first->second.p9notoc_)\n+\t\tthis->need_resize_ = true;\n+\t      p.first->second.p9notoc_ = 1;\n+\t    }\n \t}\n       else\n \t{\n@@ -5254,7 +5286,6 @@ Stub_table<size, big_endian>::add_plt_call_entry(\n       this->plt_size_ += this->plt_call_size(p.first);\n       if (this->targ_->is_tls_get_addr_opt(gsym))\n \tthis->targ_->set_has_tls_get_addr_opt();\n-      this->plt_size_ = this->plt_call_align(this->plt_size_);\n     }\n   return this->can_reach_stub(from, p.first->second.off_, r_type);\n }\n@@ -5281,13 +5312,23 @@ Stub_table<size, big_endian>::add_plt_call_entry(\n \t  p.first->second.localentry0_ = 1;\n \t  this->targ_->set_has_localentry0();\n \t}\n-      if (r_type == elfcpp::R_PPC64_REL24_NOTOC)\n+      if (r_type == elfcpp::R_PPC64_REL24_NOTOC\n+\t  || r_type == elfcpp::R_PPC64_REL24_P9NOTOC)\n \t{\n-\t  if (!p.second && !p.first->second.notoc_\n-\t      && (!this->targ_->power10_stubs()\n-\t\t  || this->targ_->power10_stubs_auto()))\n-\t    this->need_resize_ = true;\n-\t  p.first->second.notoc_ = 1;\n+\t  if (this->targ_->power10_stubs()\n+\t      && (!this->targ_->power10_stubs_auto()\n+\t\t  || r_type == elfcpp::R_PPC64_REL24_NOTOC))\n+\t    {\n+\t      if (!p.second && !p.first->second.notoc_)\n+\t\tthis->need_resize_ = true;\n+\t      p.first->second.notoc_ = 1;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (!p.second && !p.first->second.p9notoc_)\n+\t\tthis->need_resize_ = true;\n+\t      p.first->second.p9notoc_ = 1;\n+\t    }\n \t}\n       else\n \t{\n@@ -5310,7 +5351,6 @@ Stub_table<size, big_endian>::add_plt_call_entry(\n \t  p.first->second.off_ = this->plt_size_;\n \t}\n       this->plt_size_ += this->plt_call_size(p.first);\n-      this->plt_size_ = this->plt_call_align(this->plt_size_);\n     }\n   return this->can_reach_stub(from, p.first->second.off_, r_type);\n }\n@@ -5384,15 +5424,33 @@ Stub_table<size, big_endian>::add_long_branch_entry(\n     bool save_res)\n {\n   Branch_stub_key key(to);\n-  bool notoc = (size == 64 && r_type == elfcpp::R_PPC64_REL24_NOTOC);\n-  Branch_stub_ent ent(this->branch_size_, notoc, save_res);\n+  Branch_stub_ent ent(this->branch_size_);\n   std::pair<typename Branch_stub_entries::iterator, bool> p\n     = this->long_branch_stubs_.insert(std::make_pair(key, ent));\n-  if (notoc)\n+  if (save_res)\n     {\n-      if (!p.second && !p.first->second.notoc_)\n+      if (!p.second && !p.first->second.save_res_)\n \tthis->need_resize_ = true;\n-      p.first->second.notoc_ = true;\n+      p.first->second.save_res_ = true;\n+    }\n+  else if (size == 64\n+\t   && (r_type == elfcpp::R_PPC64_REL24_NOTOC\n+\t       || r_type == elfcpp::R_PPC64_REL24_P9NOTOC))\n+    {\n+      if (this->targ_->power10_stubs()\n+\t  && (!this->targ_->power10_stubs_auto()\n+\t      || r_type == elfcpp::R_PPC64_REL24_NOTOC))\n+\t{\n+\t  if (!p.second && !p.first->second.notoc_)\n+\t    this->need_resize_ = true;\n+\t  p.first->second.notoc_ = true;\n+\t}\n+      else\n+\t{\n+\t  if (!p.second && !p.first->second.p9notoc_)\n+\t    this->need_resize_ = true;\n+\t  p.first->second.p9notoc_ = true;\n+\t}\n     }\n   else\n     {\n@@ -5402,7 +5460,6 @@ Stub_table<size, big_endian>::add_long_branch_entry(\n     }\n   if (size == 64 && p.first->second.other_ == 0)\n     p.first->second.other_ = other;\n-  gold_assert(save_res == p.first->second.save_res_);\n   if (p.second || (this->resizing_ && !p.first->second.iter_))\n     {\n       if (this->resizing_)\n@@ -5500,11 +5557,11 @@ Stub_table<size, big_endian>::add_eh_frame(Layout* layout)\n     for (plt_iter cs = this->plt_call_stubs_.begin();\n \t cs != this->plt_call_stubs_.end();\n \t ++cs)\n-      if ((this->targ_->is_tls_get_addr_opt(cs->first.sym_)\n-\t   && cs->second.r2save_\n-\t   && !cs->second.localentry0_)\n-\t  || (cs->second.notoc_\n-\t      && !this->targ_->power10_stubs()))\n+      if (cs->second.p9notoc_\n+\t  || (cs->second.toc_\n+\t      && cs->second.r2save_\n+\t      && !cs->second.localentry0_\n+\t      && this->targ_->is_tls_get_addr_opt(cs->first.sym_)))\n \tcalls.push_back(cs);\n   if (calls.size() > 1)\n     std::stable_sort(calls.begin(), calls.end(),\n@@ -5540,37 +5597,42 @@ Stub_table<size, big_endian>::add_eh_frame(Layout* layout)\n       if (this->targ_->is_tls_get_addr_opt(cs->first.sym_))\n \t{\n \t  off += 7 * 4;\n-\t  if (cs->second.r2save_\n+\t  if (cs->second.toc_\n+\t      && cs->second.r2save_\n \t      && !cs->second.localentry0_)\n \t    {\n-\t      off += 2 * 4;\n+\t      off += cs->second.tocoff_ + 2 * 4;\n \t      eh_advance<big_endian>(fde, off - last_eh_loc);\n \t      fde.resize(fde.size() + 6);\n \t      unsigned char* p = &*fde.end() - 6;\n \t      *p++ = elfcpp::DW_CFA_offset_extended_sf;\n \t      *p++ = 65;\n \t      *p++ = -(this->targ_->stk_linker() / 8) & 0x7f;\n-\t      unsigned int delta = this->plt_call_size(cs) - 4 - 9 * 4;\n+\t      unsigned int delta = cs->second.tsize_ - 9 * 4 - 4;\n \t      *p++ = elfcpp::DW_CFA_advance_loc + delta / 4;\n \t      *p++ = elfcpp::DW_CFA_restore_extended;\n \t      *p++ = 65;\n \t      last_eh_loc = off + delta;\n-\t      continue;\n+\t      off = cs->second.off_ + 7 * 4;\n \t    }\n \t}\n       // notoc stubs also should describe LR changes, to support\n       // asynchronous exceptions.\n-      off += (cs->second.r2save_ ? 4 : 0) + 8;\n-      eh_advance<big_endian>(fde, off - last_eh_loc);\n-      fde.resize(fde.size() + 6);\n-      unsigned char* p = &*fde.end() - 6;\n-      *p++ = elfcpp::DW_CFA_register;\n-      *p++ = 65;\n-      *p++ = 12;\n-      *p++ = elfcpp::DW_CFA_advance_loc + 8 / 4;\n-      *p++ = elfcpp::DW_CFA_restore_extended;\n-      *p++ = 65;\n-      last_eh_loc = off + 8;\n+      if (cs->second.p9notoc_)\n+\t{\n+\t  off += cs->second.p9off_;\n+\t  off += (cs->second.r2save_ ? 4 : 0) + 8;\n+\t  eh_advance<big_endian>(fde, off - last_eh_loc);\n+\t  fde.resize(fde.size() + 6);\n+\t  unsigned char* p = &*fde.end() - 6;\n+\t  *p++ = elfcpp::DW_CFA_register;\n+\t  *p++ = 65;\n+\t  *p++ = 12;\n+\t  *p++ = elfcpp::DW_CFA_advance_loc + 8 / 4;\n+\t  *p++ = elfcpp::DW_CFA_restore_extended;\n+\t  *p++ = 65;\n+\t  last_eh_loc = off + 8;\n+\t}\n     }\n \n   for (unsigned int i = 0; i < branches.size(); i++)\n@@ -5842,7 +5904,7 @@ Stub_table<size, big_endian>::define_stub_syms(Symbol_table* symtab)\n \t  sprintf(name, \"%08x.plt_call.%s%s%s\", this->uniq_, obj, symname, add);\n \t  Address value\n \t    = this->stub_address() - this->address() + cs->second.off_;\n-\t  unsigned int stub_size = this->plt_call_align(this->plt_call_size(cs));\n+\t  unsigned int stub_size = this->plt_call_size(cs);\n \t  this->targ_->define_local(symtab, name, this, value, stub_size);\n \t}\n     }\n@@ -6108,9 +6170,10 @@ Stub_table<size, big_endian>::plt_call_size(\n {\n   if (size == 32)\n     {\n-      const Symbol* gsym = p->first.sym_;\n-      return (4 * 4\n-\t      + (this->targ_->is_tls_get_addr_opt(gsym) ? 8 * 4 : 0));\n+      unsigned int bytes = 4 * 4;\n+      if (this->targ_->is_tls_get_addr_opt(p->first.sym_))\n+\tbytes = 12 * 4;\n+      return this->plt_call_align(bytes);\n     }\n \n   const Output_data_plt_powerpc<size, big_endian>* plt;\n@@ -6135,26 +6198,50 @@ Stub_table<size, big_endian>::plt_call_size(\n \t    bytes += 8 * 4;\n \t  bytes = this->plt_call_align(bytes);\n \t}\n-      unsigned int tail = 0;\n       if (p->second.toc_)\n \t{\n \t  p->second.tocoff_ = bytes;\n \t  if (this->targ_->is_tls_get_addr_opt(p->first.sym_))\n \t    {\n \t      bytes += 7 * 4;\n \t      if (p->second.r2save_ && !p->second.localentry0_)\n-\t\t{\n-\t\t  bytes += 2 * 4;\n-\t\t  tail = 4 * 4;\n-\t\t}\n+\t\tbytes += 2 * 4 + 4 * 4;\n \t    }\n \t  if (p->second.r2save_)\n \t    bytes += 4;\n \t  uint64_t got_addr = this->targ_->toc_pointer();\n \t  uint64_t off = plt_addr - got_addr;\n \t  bytes += 3 * 4 + 4 * (ha(off) != 0);\n+\t  p->second.tsize_ = bytes - p->second.tocoff_;\n+\t  bytes = this->plt_call_align(bytes);\n \t}\n-      return bytes + tail;\n+      if (p->second.p9notoc_)\n+\t{\n+\t  p->second.p9off_ = bytes;\n+\t  if (this->targ_->is_tls_get_addr_opt(p->first.sym_))\n+\t    bytes += 7 * 4;\n+\t  uint64_t from = this->stub_address() + p->second.off_ + bytes + 2 * 4;\n+\t  uint64_t off = plt_addr - from;\n+\t  if (off + 0x8000 < 0x10000)\n+\t    bytes += 7 * 4;\n+\t  else if (off + 0x80008000ULL < 0x100000000ULL)\n+\t    bytes += 8 * 4;\n+\t  else\n+\t    {\n+\t      bytes += 8 * 4;\n+\t      if (off + 0x800000000000ULL >= 0x1000000000000ULL\n+\t\t  && ((off >> 32) & 0xffff) != 0)\n+\t\tbytes += 4;\n+\t      if (((off >> 32) & 0xffffffffULL) != 0)\n+\t\tbytes += 4;\n+\t      if (hi(off) != 0)\n+\t\tbytes += 4;\n+\t      if (l(off) != 0)\n+\t\tbytes += 4;\n+\t    }\n+\t  bytes = this->plt_call_align(bytes);\n+\t}\n+      return bytes;\n     }\n   else\n     {\n@@ -6184,10 +6271,10 @@ Stub_table<size, big_endian>::plt_call_size(\n \t    bytes += 7 * 4;\n \t  else\n \t    bytes += 8 * 4;\n-\t  return bytes + tail;\n+\t  return this->plt_call_align(bytes + tail);\n \t}\n \n-      if (p->second.notoc_)\n+      if (p->second.p9notoc_)\n \t{\n \t  uint64_t from = this->stub_address() + p->second.off_ + bytes + 2 * 4;\n \t  uint64_t off = plt_addr - from;\n@@ -6208,7 +6295,7 @@ Stub_table<size, big_endian>::plt_call_size(\n \t      if (l(off) != 0)\n \t\tbytes += 4;\n \t    }\n-\t  return bytes + tail;\n+\t  return this->plt_call_align(bytes + tail);\n \t}\n \n       uint64_t got_addr = this->targ_->toc_pointer();\n@@ -6223,7 +6310,7 @@ Stub_table<size, big_endian>::plt_call_size(\n \t\t    + 8 * thread_safe\n \t\t    + 4 * (ha(off + 8 + 8 * static_chain) != ha(off)));\n \t}\n-      return bytes + tail;\n+      return this->plt_call_align(bytes + tail);\n     }\n }\n \n@@ -6400,6 +6487,19 @@ Stub_table<size, big_endian>::do_write(Output_file* of)\n \t\t      else\n \t\t\twrite_insn<big_endian>(p, bctr);\n \t\t    }\n+\t\t  if (cs->second.p9notoc_)\n+\t\t    {\n+\t\t      if (this->targ_->is_tls_get_addr_opt(cs->first.sym_))\n+\t\t\tthis->build_tls_opt_head(&p, false);\n+\t\t      Address from = this->stub_address() + (p - oview);\n+\t\t      Address delta = plt_addr - from;\n+\t\t      p = build_notoc_offset<big_endian>(p, delta, true);\n+\t\t      write_insn<big_endian>(p, mtctr_12);\n+\t\t      p += 4;\n+\t\t      write_insn<big_endian>(p, bctr);\n+\t\t      p += 4;\n+\t\t      p = oview + this->plt_call_align(p - oview);\n+\t\t    }\n \t\t}\n \t      else\n \t\t{\n@@ -6494,6 +6594,23 @@ Stub_table<size, big_endian>::do_write(Output_file* of)\n \t\t      write_insn<big_endian>(p, bctr);\n \t\t    }\n \t\t}\n+\t      if (bs->second.p9notoc_)\n+\t\t{\n+\t\t  unsigned char* startp = p;\n+\t\t  p = build_notoc_offset<big_endian>(p, delta, false);\n+\t\t  delta -= p - startp;\n+\t\t  startp = p;\n+\t\t  if (delta + (1 << 25) < 2 << 25)\n+\t\t    write_insn<big_endian>(p, b | (delta & 0x3fffffc));\n+\t\t  else\n+\t\t    {\n+\t\t      write_insn<big_endian>(p, mtctr_12);\n+\t\t      p += 4;\n+\t\t      write_insn<big_endian>(p, bctr);\n+\t\t    }\n+\t\t  p += 4;\n+\t\t  delta -= p - startp;\n+\t\t}\n \t    }\n \t  else\n \t    {\n@@ -6544,7 +6661,7 @@ Stub_table<size, big_endian>::do_write(Output_file* of)\n \t\t  write_insn<big_endian>(p, std_2_1 + this->targ_->stk_toc());\n \t\t  p += 4;\n \t\t}\n-\t      if (cs->second.notoc_)\n+\t      if (cs->second.p9notoc_)\n \t\t{\n \t\t  Address from = this->stub_address() + (p - oview) + 8;\n \t\t  Address off = plt_addr - from;\n@@ -6722,9 +6839,9 @@ Stub_table<size, big_endian>::do_write(Output_file* of)\n \t  p = oview + off;\n \t  Address loc = this->stub_address() + off;\n \t  Address delta = bs->first.dest_ - loc;\n-\t  if (!bs->second.notoc_)\n+\t  if (!bs->second.p9notoc_)\n \t    delta += elfcpp::ppc64_decode_local_entry(bs->second.other_);\n-\t  if (bs->second.notoc_)\n+\t  if (bs->second.p9notoc_)\n \t    {\n \t      unsigned char* startp = p;\n \t      p = build_notoc_offset<big_endian>(p, off, false);\n@@ -7619,6 +7736,7 @@ Target_powerpc<size, big_endian>::Scan::get_reference_flags(\n       if (size == 32)\n \tbreak;\n       // Fall through.\n+    case elfcpp::R_PPC64_REL24_P9NOTOC:\n     case elfcpp::R_POWERPC_REL24:\n     case elfcpp::R_PPC_PLTREL24:\n     case elfcpp::R_POWERPC_REL14:\n@@ -7861,6 +7979,7 @@ Target_powerpc<size, big_endian>::Scan::reloc_needs_plt_for_ifunc(\n       if (size == 32)\n \tbreak;\n       // Fall through.\n+    case elfcpp::R_PPC64_REL24_P9NOTOC:\n     case elfcpp::R_POWERPC_ADDR24:\n     case elfcpp::R_POWERPC_ADDR14:\n     case elfcpp::R_POWERPC_ADDR14_BRTAKEN:\n@@ -8124,6 +8243,7 @@ Target_powerpc<size, big_endian>::Scan::local(\n       if (size == 32)\n \tbreak;\n       // Fall through.\n+    case elfcpp::R_PPC64_REL24_P9NOTOC:\n     case elfcpp::R_POWERPC_REL24:\n     case elfcpp::R_PPC_PLTREL24:\n     case elfcpp::R_PPC_LOCAL24PC:\n@@ -8873,6 +8993,7 @@ Target_powerpc<size, big_endian>::Scan::global(\n       if (size == 32)\n \tbreak;\n       // Fall through.\n+    case elfcpp::R_PPC64_REL24_P9NOTOC:\n     case elfcpp::R_PPC_PLTREL24:\n     case elfcpp::R_POWERPC_REL24:\n       if (!is_ifunc)\n@@ -10630,15 +10751,25 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t\t  const int reloc_size = elfcpp::Elf_sizes<size>::rela_size;\n \t\t  elfcpp::Shdr<size, big_endian> shdr(relinfo->reloc_shdr);\n \t\t  size_t reloc_count = shdr.get_sh_size() / reloc_size;\n-\t\t  if (size == 64\n-\t\t      && r_type != elfcpp::R_PPC64_REL24_NOTOC)\n-\t\t    value += ent->tocoff_;\n+\t\t  if (size == 64)\n+\t\t    {\n+\t\t      if (r_type == elfcpp::R_PPC64_REL24_NOTOC)\n+\t\t\t{\n+\t\t\t  if (!ent->notoc_)\n+\t\t\t    value += ent->p9off_;\n+\t\t\t}\n+\t\t      else if (r_type == elfcpp::R_PPC64_REL24_P9NOTOC)\n+\t\t\tvalue += ent->p9off_;\n+\t\t      else\n+\t\t\tvalue += ent->tocoff_;\n+\t\t    }\n \t\t  if (size == 64\n \t\t      && ent->r2save_\n \t\t      && !(gsym != NULL\n \t\t\t   && target->is_tls_get_addr_opt(gsym)))\n \t\t    {\n-\t\t      if (r_type == elfcpp::R_PPC64_REL24_NOTOC)\n+\t\t      if (r_type == elfcpp::R_PPC64_REL24_NOTOC\n+\t\t\t  || r_type == elfcpp::R_PPC64_REL24_P9NOTOC)\n \t\t\t{\n \t\t\t  if (!(target->power10_stubs()\n \t\t\t\t&& target->power10_stubs_auto()))\n@@ -11078,6 +11209,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t\t  unsigned int r_type2\n \t\t    = elfcpp::elf_r_type<size>(next_rela.get_r_info());\n \t\t  if ((r_type2 == elfcpp::R_PPC64_REL24_NOTOC\n+\t\t       || r_type2 == elfcpp::R_PPC64_REL24_P9NOTOC\n \t\t       || r_type2 == elfcpp::R_PPC64_PLTCALL_NOTOC)\n \t\t      && next_rela.get_r_offset() == rela.get_r_offset())\n \t\t    is_pcrel = true;\n@@ -11118,6 +11250,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t      unsigned int r_type2\n \t\t= elfcpp::elf_r_type<size>(next_rela.get_r_info());\n \t      if ((r_type2 == elfcpp::R_PPC64_REL24_NOTOC\n+\t\t   || r_type2 == elfcpp::R_PPC64_REL24_P9NOTOC\n \t\t   || r_type2 == elfcpp::R_PPC64_PLTCALL_NOTOC)\n \t\t  && next_rela.get_r_offset() == rela.get_r_offset())\n \t\tis_pcrel = true;\n@@ -11227,7 +11360,8 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       if (max_branch != 0\n \t  && (value + local_ent - address + max_branch >= 2 * max_branch\n \t      || (size == 64\n-\t\t  && r_type == elfcpp::R_PPC64_REL24_NOTOC\n+\t\t  && (r_type == elfcpp::R_PPC64_REL24_NOTOC\n+\t\t      || r_type == elfcpp::R_PPC64_REL24_NOTOC)\n \t\t  && (gsym != NULL\n \t\t      ? object->ppc64_needs_toc(gsym)\n \t\t      : object->ppc64_needs_toc(r_sym)))))\n@@ -11250,9 +11384,18 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t\t      value = (stub_table->stub_address()\n \t\t\t       + stub_table->plt_size()\n \t\t\t       + ent->off_);\n-\t\t      if (size == 64\n-\t\t\t  && r_type != elfcpp::R_PPC64_REL24_NOTOC)\n-\t\t\tvalue += ent->tocoff_;\n+\t\t      if (size == 64)\n+\t\t\t{\n+\t\t\t  if (r_type == elfcpp::R_PPC64_REL24_NOTOC)\n+\t\t\t    {\n+\t\t\t      if (!ent->notoc_)\n+\t\t\t\tvalue += ent->p9off_;\n+\t\t\t    }\n+\t\t\t  else if (r_type == elfcpp::R_PPC64_REL24_P9NOTOC)\n+\t\t\t    value += ent->p9off_;\n+\t\t\t  else\n+\t\t\t    value += ent->tocoff_;\n+\t\t\t}\n \t\t    }\n \t\t  has_stub_value = true;\n \t\t}\n@@ -11268,6 +11411,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       if (size == 32)\n \tbreak;\n       // Fall through.\n+    case elfcpp::R_PPC64_REL24_P9NOTOC:\n     case elfcpp::R_PPC64_REL64:\n     case elfcpp::R_POWERPC_REL32:\n     case elfcpp::R_POWERPC_REL24:\n@@ -11802,6 +11946,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       if (size == 32)\n \tbreak;\n       // Fall through.\n+    case elfcpp::R_PPC64_REL24_P9NOTOC:\n     case elfcpp::R_POWERPC_ADDR24:\n     case elfcpp::R_POWERPC_ADDR14:\n     case elfcpp::R_POWERPC_ADDR14_BRTAKEN:\n@@ -11905,6 +12050,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       if (size == 32)\n \tgoto unsupp; // R_PPC_EMB_RELSDA\n       // Fall through.\n+    case elfcpp::R_PPC64_REL24_P9NOTOC:\n     case elfcpp::R_POWERPC_ADDR24:\n     case elfcpp::R_POWERPC_REL24:\n     case elfcpp::R_PPC_PLTREL24:"
    }
  ]
}