{
  "sha": "0b35f123c200522998a81335dc218551ca7b3d92",
  "node_id": "C_kwDOANOeidoAKDBiMzVmMTIzYzIwMDUyMjk5OGE4MTMzNWRjMjE4NTUxY2E3YjNkOTI",
  "commit": {
    "author": {
      "name": "Lancelot SIX",
      "email": "lancelot.six@amd.com",
      "date": "2022-01-17T11:13:39Z"
    },
    "committer": {
      "name": "Lancelot SIX",
      "email": "lancelot.six@amd.com",
      "date": "2022-02-15T09:52:37Z"
    },
    "message": "gdb: Respect the DW_CC_nocall attribute\n\nIt is possible for a compiler to optimize a function in a such ways that\nthe function does not follow the calling convention of the target.  In\nsuch situation, the compiler can use the DW_AT_calling_convention\nattribute with the value DW_CC_nocall to tell the debugger that it is\nunsafe to call the function.  The DWARF5 standard states, in 3.3.1.1:\n\n  > If the value of the calling convention attribute is the constant\n  > DW_CC_nocall, the subroutine does not obey standard calling\n  > conventions, and it may not be safe for the debugger to call this\n  > subroutine.\n\nNon standard calling convention can affect GDB's assumptions in multiple\nways, including how arguments are passed to the function, how values are\nreturned, and so on.  For this reason, it is unsafe for GDB to try to do\nthe following operations on a function with marked with DW_CC_nocall:\n\n- call / print an expression requiring the function to be evaluated,\n- inspect the value a function returns using the 'finish' command,\n- force the value returned by a function using the 'return' command.\n\nThis patch ensures that if a command which relies on GDB's knowledge of\nthe target's calling convention is used on a function marked nocall, GDB\nprints an appropriate message to the user and does not proceed with the\noperation which is unreliable.\n\nNote that it is still possible for someone to use a vendor specific\nvalue for the DW_AT_calling_convention attribute for example to indicate\nthe use of an alternative calling convention.  This commit does not\nprevent this, and target dependent code can be adjusted if one wanted to\nsupport multiple calling conventions.\n\nTested on x86_64-Linux, with no regression observed.\n\nChange-Id: I72970dae68234cb83edbc0cf71aa3d6002a4a540",
    "tree": {
      "sha": "9f964fa813c131514c01b362d233e2f5e1066207",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9f964fa813c131514c01b362d233e2f5e1066207"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0b35f123c200522998a81335dc218551ca7b3d92",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b35f123c200522998a81335dc218551ca7b3d92",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0b35f123c200522998a81335dc218551ca7b3d92",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b35f123c200522998a81335dc218551ca7b3d92/comments",
  "author": {
    "login": "lancesix",
    "id": 98881381,
    "node_id": "U_kgDOBeTPZQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/98881381?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lancesix",
    "html_url": "https://github.com/lancesix",
    "followers_url": "https://api.github.com/users/lancesix/followers",
    "following_url": "https://api.github.com/users/lancesix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lancesix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lancesix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lancesix/subscriptions",
    "organizations_url": "https://api.github.com/users/lancesix/orgs",
    "repos_url": "https://api.github.com/users/lancesix/repos",
    "events_url": "https://api.github.com/users/lancesix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lancesix/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "lancesix",
    "id": 98881381,
    "node_id": "U_kgDOBeTPZQ",
    "avatar_url": "https://avatars.githubusercontent.com/u/98881381?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lancesix",
    "html_url": "https://github.com/lancesix",
    "followers_url": "https://api.github.com/users/lancesix/followers",
    "following_url": "https://api.github.com/users/lancesix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lancesix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lancesix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lancesix/subscriptions",
    "organizations_url": "https://api.github.com/users/lancesix/orgs",
    "repos_url": "https://api.github.com/users/lancesix/repos",
    "events_url": "https://api.github.com/users/lancesix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lancesix/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e6b3636709a19303859cb886f5212d5092837b27",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6b3636709a19303859cb886f5212d5092837b27",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e6b3636709a19303859cb886f5212d5092837b27"
    }
  ],
  "stats": {
    "total": 185,
    "additions": 182,
    "deletions": 3
  },
  "files": [
    {
      "sha": "a2dbe7551b54d7beee8ea0dfd3ce03a3929cb6c5",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b35f123c200522998a81335dc218551ca7b3d92/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b35f123c200522998a81335dc218551ca7b3d92/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=0b35f123c200522998a81335dc218551ca7b3d92",
      "patch": "@@ -3903,6 +3903,17 @@ type_byte_order (const struct type *type)\n   return byteorder;\n }\n \n+/* See gdbtypes.h.  */\n+\n+bool\n+is_nocall_function (const struct type *type)\n+{\n+  gdb_assert (type->code () == TYPE_CODE_FUNC\n+\t      || type->code () == TYPE_CODE_METHOD);\n+\n+  return TYPE_CALLING_CONVENTION (type) == DW_CC_nocall;\n+}\n+\n \f\n /* Overload resolution.  */\n "
    },
    {
      "sha": "bd192da4b4b50524c599c7c9ebf138836127d8ac",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b35f123c200522998a81335dc218551ca7b3d92/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b35f123c200522998a81335dc218551ca7b3d92/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=0b35f123c200522998a81335dc218551ca7b3d92",
      "patch": "@@ -2865,4 +2865,14 @@ extern enum bfd_endian type_byte_order (const struct type *type);\n \n extern unsigned int overload_debug;\n \n+/* Return whether the function type represented by TYPE is marked as unsafe\n+   to call by the debugger.\n+\n+   This usually indicates that the function does not follow the target's\n+   standard calling convention.\n+\n+   The TYPE argument must be of code TYPE_CODE_FUNC or TYPE_CODE_METHOD.  */\n+\n+extern bool is_nocall_function (const struct type *type);\n+\n #endif /* GDBTYPES_H */"
    },
    {
      "sha": "f8c812c8f611c82a6f37f8f714cbfaec3737d2ce",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b35f123c200522998a81335dc218551ca7b3d92/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b35f123c200522998a81335dc218551ca7b3d92/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=0b35f123c200522998a81335dc218551ca7b3d92",
      "patch": "@@ -812,6 +812,11 @@ call_function_by_hand_dummy (struct value *function,\n   type *values_type;\n   CORE_ADDR funaddr = find_function_addr (function, &values_type, &ftype);\n \n+  if (is_nocall_function (ftype))\n+    error (_(\"Cannot call the function '%s' which does not follow the \"\n+\t     \"target calling convention.\"),\n+\t   get_function_name (funaddr, name_buf, sizeof (name_buf)));\n+\n   if (values_type == NULL)\n     values_type = default_return_type;\n   if (values_type == NULL)"
    },
    {
      "sha": "465c8f30f12514eee434e51dbd4e7f8241c68c14",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b35f123c200522998a81335dc218551ca7b3d92/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b35f123c200522998a81335dc218551ca7b3d92/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=0b35f123c200522998a81335dc218551ca7b3d92",
      "patch": "@@ -1457,6 +1457,15 @@ get_return_value (struct symbol *func_symbol, struct value *function)\n     = check_typedef (TYPE_TARGET_TYPE (func_symbol->type ()));\n   gdb_assert (value_type->code () != TYPE_CODE_VOID);\n \n+  if (is_nocall_function (check_typedef (::value_type (function))))\n+    {\n+      warning (_(\"Function '%s' does not follow the target calling \"\n+\t\t \"convention, cannot determine its returned value.\"),\n+\t       func_symbol->print_name ());\n+\n+      return nullptr;\n+    }\n+\n   /* FIXME: 2003-09-27: When returning from a nested inferior function\n      call, it's possible (with no help from the architecture vector)\n      to locate and return/print a \"struct return\" value.  This is just"
    },
    {
      "sha": "fe243b4310efdce2d0fdd71e6b5c2174c7fd84d0",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 15,
      "deletions": 3,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b35f123c200522998a81335dc218551ca7b3d92/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b35f123c200522998a81335dc218551ca7b3d92/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=0b35f123c200522998a81335dc218551ca7b3d92",
      "patch": "@@ -2737,7 +2737,7 @@ return_command (const char *retval_exp, int from_tty)\n   struct symbol *thisfun;\n   struct value *return_value = NULL;\n   struct value *function = NULL;\n-  const char *query_prefix = \"\";\n+  std::string query_prefix;\n \n   thisframe = get_selected_frame (\"No selected frame.\");\n   thisfun = get_frame_function (thisframe);\n@@ -2793,6 +2793,17 @@ return_command (const char *retval_exp, int from_tty)\n \treturn_value = NULL;\n       else if (thisfun != NULL)\n \t{\n+\t  if (is_nocall_function (check_typedef (value_type (function))))\n+\t    {\n+\t      query_prefix =\n+\t\tstring_printf (\"Function '%s' does not follow the target \"\n+\t\t\t       \"calling convention.\\n\"\n+\t\t\t       \"If you continue, setting the return value \"\n+\t\t\t       \"will probably lead to unpredictable \"\n+\t\t\t       \"behaviors.\\n\",\n+\t\t\t       thisfun->print_name ());\n+\t    }\n+\n \t  rv_conv = struct_return_convention (gdbarch, function, return_type);\n \t  if (rv_conv == RETURN_VALUE_STRUCT_CONVENTION\n \t      || rv_conv == RETURN_VALUE_ABI_RETURNS_ADDRESS)\n@@ -2815,12 +2826,13 @@ return_command (const char *retval_exp, int from_tty)\n \n       if (thisfun == NULL)\n \tconfirmed = query (_(\"%sMake selected stack frame return now? \"),\n-\t\t\t   query_prefix);\n+\t\t\t   query_prefix.c_str ());\n       else\n \t{\n \t  if (TYPE_NO_RETURN (thisfun->type ()))\n \t    warning (_(\"Function does not return normally to caller.\"));\n-\t  confirmed = query (_(\"%sMake %s return now? \"), query_prefix,\n+\t  confirmed = query (_(\"%sMake %s return now? \"),\n+\t\t\t     query_prefix.c_str (),\n \t\t\t     thisfun->print_name ());\n \t}\n       if (!confirmed)"
    },
    {
      "sha": "0068ccdd6b4ff5d5b834a44dbb1a9e0335a2ea82",
      "filename": "gdb/testsuite/gdb.dwarf2/calling-convention.c",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b35f123c200522998a81335dc218551ca7b3d92/gdb/testsuite/gdb.dwarf2/calling-convention.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b35f123c200522998a81335dc218551ca7b3d92/gdb/testsuite/gdb.dwarf2/calling-convention.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/calling-convention.c?ref=0b35f123c200522998a81335dc218551ca7b3d92",
      "patch": "@@ -0,0 +1,35 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2022 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* Dummy foo function.  */\n+\n+int\n+foo (void)\n+{\n+  asm (\"foo_label: .globl foo_label\");\n+  return 42;\n+}\n+\n+/* Dummy main function.  */\n+\n+int\n+main (void)\n+{\n+  asm (\"main_label: .globl main_label\");\n+  foo ();\n+  return 0;\n+}"
    },
    {
      "sha": "0a11cb15c68ce0fde2a116963bebe5135a78a824",
      "filename": "gdb/testsuite/gdb.dwarf2/calling-convention.exp",
      "status": "added",
      "additions": 97,
      "deletions": 0,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b35f123c200522998a81335dc218551ca7b3d92/gdb/testsuite/gdb.dwarf2/calling-convention.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b35f123c200522998a81335dc218551ca7b3d92/gdb/testsuite/gdb.dwarf2/calling-convention.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/calling-convention.exp?ref=0b35f123c200522998a81335dc218551ca7b3d92",
      "patch": "@@ -0,0 +1,97 @@\n+# Copyright 2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This testcase checks that if a function has the DW_AT_calling_convention\n+# attribute with the value DW_CC_nocall, then GDB will not:\n+# - call the function,\n+# - try to access the value returned by the function when using the finish\n+#   command,\n+# - force a user-provided return value when using the return command.\n+#\n+# In every case, GDB prints a message to the user indicating the issue.  For\n+# the return command, GDB asks the user to confirm if the specified value\n+# should be forced.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile .c .S\n+\n+# First compile the .c file so we can ask GDB what is sizeof(int).\n+if { [prepare_for_testing ${testfile}.exp ${testfile} ${srcfile}] } {\n+    untested \"failed to compile\"\n+    return -1\n+}\n+\n+# Make some DWARF for the test.\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name \"calling-convention\"}\n+\t} {\n+\t    declare_labels int_label\n+\n+\t    int_label: base_type {\n+\t\t{byte_size [get_sizeof \"int\" 4] sdata}\n+\t\t{encoding @DW_ATE_signed}\n+\t\t{name \"int\"}\n+\t    }\n+\n+\t    subprogram {\n+\t\t{MACRO_AT_func { foo }}\n+\t\t{type :$int_label}\n+\t\t{calling_convention @DW_CC_nocall}\n+\t    }\n+\n+\t    subprogram {\n+\t\t{MACRO_AT_func { main }}\n+\t\t{type :$int_label}\n+\t    }\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if {![runto_main]} {\n+    return -1\n+}\n+\n+gdb_test \"call foo ()\" \\\n+    \"Cannot call the function 'foo' which does not follow the target calling convention.\"\n+gdb_breakpoint \"foo\"\n+gdb_continue_to_breakpoint \"foo\"\n+\n+gdb_test_multiple \"return 35\" \"\" {\n+    -re \".*Function 'foo' does not follow the target calling convention.\\r\\nIf you continue, setting the return value will probably lead to unpredictable behaviors.\\r\\nMake foo return now?.*\\\\(y or n\\\\) $\" {\n+\tsend_gdb \"n\\n\"\n+\tpass $gdb_test_name\n+    }\n+}\n+\n+gdb_test \"finish\" [multi_line \\\n+    \"Run till exit from #0  $hex in foo \\\\(\\\\)\" \\\n+    \"warning: Function 'foo' does not follow the target calling convention, cannot determine its returned value\\.\" \\\n+    \"$hex in main \\\\(\\\\)\" \\\n+    \"Value returned has type: int. Cannot determine contents\"]"
    }
  ]
}