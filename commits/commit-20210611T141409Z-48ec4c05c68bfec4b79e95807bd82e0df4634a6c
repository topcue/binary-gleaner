{
  "sha": "48ec4c05c68bfec4b79e95807bd82e0df4634a6c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDhlYzRjMDVjNjhiZmVjNGI3OWU5NTgwN2JkODJlMGRmNDYzNGE2Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-06-11T14:14:09Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-06-11T14:14:09Z"
    },
    "message": "Implement Rust raw identifiers\n\nThis patch implements Rust raw identifiers in the lexer in gdb.  There\nwas an earlier patch to do this, but the contributor didn't reply to\nmy email asking whether he had sorted out his copyright assignment.\n\nThis is relatively straightforward, but a small test suite addition\nwas needd to ensure that the new test is skipped on older versions of\nrustc -- ones that predate the introduction of raw identifiers.\n\ngdb/ChangeLog\n2021-06-11  Tom Tromey  <tom@tromey.com>\n\n\tPR rust/23427\n\t* rust-parse.c (rust_parser::lex_identifier): Handle raw\n\tidentifiers.\n\t(rust_lex_tests): Add raw identifier tests.\n\ngdb/testsuite/ChangeLog\n2021-06-11  Tom Tromey  <tom@tromey.com>\n\n\tPR rust/23427\n\t* lib/rust-support.exp (rust_compiler_version): New caching proc.\n\t* gdb.rust/rawids.exp: New file.\n\t* gdb.rust/rawids.rs: New file.",
    "tree": {
      "sha": "27c232057de54ea162dcdbfcf7466063119f19d9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/27c232057de54ea162dcdbfcf7466063119f19d9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/48ec4c05c68bfec4b79e95807bd82e0df4634a6c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48ec4c05c68bfec4b79e95807bd82e0df4634a6c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/48ec4c05c68bfec4b79e95807bd82e0df4634a6c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2748c1b17e37c5acfae9d5dbcc627350c3d38167",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2748c1b17e37c5acfae9d5dbcc627350c3d38167",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2748c1b17e37c5acfae9d5dbcc627350c3d38167"
    }
  ],
  "stats": {
    "total": 130,
    "additions": 124,
    "deletions": 6
  },
  "files": [
    {
      "sha": "30c2aa73d8731dd4c2bac01c77cda8d8105261cf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=48ec4c05c68bfec4b79e95807bd82e0df4634a6c",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-11  Tom Tromey  <tom@tromey.com>\n+\n+\tPR rust/23427\n+\t* rust-parse.c (rust_parser::lex_identifier): Handle raw\n+\tidentifiers.\n+\t(rust_lex_tests): Add raw identifier tests.\n+\n 2021-06-10  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* lib/gdb.exp (default_gdb_exit): Unset gdb_tty_name."
    },
    {
      "sha": "539e1c8256d9e4149eee0a850578598efcea046d",
      "filename": "gdb/rust-parse.c",
      "status": "modified",
      "additions": 26,
      "deletions": 6,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/rust-parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/rust-parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-parse.c?ref=48ec4c05c68bfec4b79e95807bd82e0df4634a6c",
      "patch": "@@ -747,12 +747,21 @@ rust_identifier_start_p (char c)\n int\n rust_parser::lex_identifier ()\n {\n-  const char *start = pstate->lexptr;\n   unsigned int length;\n   const struct token_info *token;\n   int i;\n   int is_gdb_var = pstate->lexptr[0] == '$';\n \n+  bool is_raw = false;\n+  if (pstate->lexptr[0] == 'r'\n+      && pstate->lexptr[1] == '#'\n+      && rust_identifier_start_p (pstate->lexptr[2]))\n+    {\n+      is_raw = true;\n+      pstate->lexptr += 2;\n+    }\n+\n+  const char *start = pstate->lexptr;\n   gdb_assert (rust_identifier_start_p (pstate->lexptr[0]));\n \n   ++pstate->lexptr;\n@@ -769,13 +778,16 @@ rust_parser::lex_identifier ()\n \n   length = pstate->lexptr - start;\n   token = NULL;\n-  for (i = 0; i < ARRAY_SIZE (identifier_tokens); ++i)\n+  if (!is_raw)\n     {\n-      if (length == strlen (identifier_tokens[i].name)\n-\t  && strncmp (identifier_tokens[i].name, start, length) == 0)\n+      for (i = 0; i < ARRAY_SIZE (identifier_tokens); ++i)\n \t{\n-\t  token = &identifier_tokens[i];\n-\t  break;\n+\t  if (length == strlen (identifier_tokens[i].name)\n+\t      && strncmp (identifier_tokens[i].name, start, length) == 0)\n+\t    {\n+\t      token = &identifier_tokens[i];\n+\t      break;\n+\t    }\n \t}\n     }\n \n@@ -789,6 +801,7 @@ rust_parser::lex_identifier ()\n \t}\n     }\n   else if (token == NULL\n+\t   && !is_raw\n \t   && (strncmp (start, \"thread\", length) == 0\n \t       || strncmp (start, \"task\", length) == 0)\n \t   && space_then_number (pstate->lexptr))\n@@ -2300,6 +2313,13 @@ rust_lex_tests (void)\n   rust_lex_stringish_test (&parser, \"hibob\", \"hibob\", IDENT);\n   rust_lex_stringish_test (&parser, \"hibob__93\", \"hibob__93\", IDENT);\n   rust_lex_stringish_test (&parser, \"thread\", \"thread\", IDENT);\n+  rust_lex_stringish_test (&parser, \"r#true\", \"true\", IDENT);\n+\n+  const int expected1[] = { IDENT, DECIMAL_INTEGER, 0 };\n+  rust_lex_test_sequence (&parser, \"r#thread 23\", ARRAY_SIZE (expected1),\n+\t\t\t  expected1);\n+  const int expected2[] = { IDENT, '#', 0 };\n+  rust_lex_test_sequence (&parser, \"r#\", ARRAY_SIZE (expected2), expected2);\n \n   rust_lex_stringish_test (&parser, \"\\\"string\\\"\", \"string\", STRING);\n   rust_lex_stringish_test (&parser, \"\\\"str\\\\ting\\\"\", \"str\\ting\", STRING);"
    },
    {
      "sha": "9168a6a4b70c4e94badee49c628517d7b7c39eef",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=48ec4c05c68bfec4b79e95807bd82e0df4634a6c",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-11  Tom Tromey  <tom@tromey.com>\n+\n+\tPR rust/23427\n+\t* lib/rust-support.exp (rust_compiler_version): New caching proc.\n+\t* gdb.rust/rawids.exp: New file.\n+\t* gdb.rust/rawids.rs: New file.\n+\n 2021-06-10  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.mi/user-selected-context-sync.c (child_sub_function, main):"
    },
    {
      "sha": "31a56d3bae68cea4e654d63d12822e2cd0b586c5",
      "filename": "gdb/testsuite/gdb.rust/rawids.exp",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/testsuite/gdb.rust/rawids.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/testsuite/gdb.rust/rawids.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/rawids.exp?ref=48ec4c05c68bfec4b79e95807bd82e0df4634a6c",
      "patch": "@@ -0,0 +1,41 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test raw identifiers.\n+\n+load_lib rust-support.exp\n+if {[skip_rust_tests]} {\n+    continue\n+}\n+\n+set v [split [rust_compiler_version] .]\n+if {[lindex $v 0] == 1 && [lindex $v 1] < 30} {\n+    untested \"raw identifiers require rust 1.30 or greater\"\n+    return -1\n+}\n+\n+standard_testfile .rs\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug rust}]} {\n+    return -1\n+}\n+\n+set line [gdb_get_line_number \"set breakpoint here\"]\n+if {![runto ${srcfile}:$line]} {\n+    untested \"could not run to breakpoint\"\n+    return -1\n+}\n+\n+gdb_test \"print r#if\" \" = 23\"\n+gdb_test \"print r#thread\" \" = 27\""
    },
    {
      "sha": "f37e862d5da2b231b13486ce489b4dfc25bd6451",
      "filename": "gdb/testsuite/gdb.rust/rawids.rs",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/testsuite/gdb.rust/rawids.rs",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/testsuite/gdb.rust/rawids.rs",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/rawids.rs?ref=48ec4c05c68bfec4b79e95807bd82e0df4634a6c",
      "patch": "@@ -0,0 +1,26 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+// This program is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3 of the License, or\n+// (at your option) any later version.\n+//\n+// This program is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+#![allow(unused_assignments)]\n+\n+\n+fn main () {\n+    let r#if = 23;\n+    let thread = 27;\n+\n+    println!(\"{}, {}\", r#if, r#thread);        // set breakpoint here\n+}"
    },
    {
      "sha": "2896ac82453655e4726320ee80dfc88f55474ffc",
      "filename": "gdb/testsuite/lib/rust-support.exp",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/testsuite/lib/rust-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ec4c05c68bfec4b79e95807bd82e0df4634a6c/gdb/testsuite/lib/rust-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/rust-support.exp?ref=48ec4c05c68bfec4b79e95807bd82e0df4634a6c",
      "patch": "@@ -54,3 +54,20 @@ gdb_caching_proc rust_llvm_version {\n     }\n     return 0.0\n }\n+\n+# Return the version of the Rust compiler.\n+gdb_caching_proc rust_compiler_version {\n+    set rustc [find_rustc]\n+    if {$rustc == \"\"} {\n+\tverbose \"could not find rustc\"\n+    } else {\n+\tset output [lindex [remote_exec host \"$rustc --version --verbose\"] 1]\n+\tforeach line [split $output \\n] {\n+\t    if {[regexp \"rustc (\\[0-9.\\]+) .*\\$\" $output ignore version]} {\n+\t\treturn $version\n+\t    }\n+\t}\n+\tverbose \"could not match rustc version output: $output\"\n+    }\n+    return 0.0\n+}"
    }
  ]
}