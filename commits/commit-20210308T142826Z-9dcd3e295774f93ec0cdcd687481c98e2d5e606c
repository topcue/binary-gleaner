{
  "sha": "9dcd3e295774f93ec0cdcd687481c98e2d5e606c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWRjZDNlMjk1Nzc0ZjkzZWMwY2RjZDY4NzQ4MWM5OGUyZDVlNjA2Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:26Z"
    },
    "message": "Implement several Fortran operations\n\nThis implements several straightforward Fortran operations, primarily\nby reusing existing template classes.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* f-lang.c (eval_op_f_abs, eval_op_f_mod, eval_op_f_ceil)\n\t(eval_op_f_floor, eval_op_f_modulo, eval_op_f_cmplx)\n\t(eval_op_f_kind): No longer static.  Add \"opcode\" parameter.\n\t(evaluate_subexp_f): Update.\n\t* f-exp.h: New file.",
    "tree": {
      "sha": "a1281e5edc4e639b412c0372ed88f04638ab194d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a1281e5edc4e639b412c0372ed88f04638ab194d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9dcd3e295774f93ec0cdcd687481c98e2d5e606c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9dcd3e295774f93ec0cdcd687481c98e2d5e606c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9dcd3e295774f93ec0cdcd687481c98e2d5e606c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9dcd3e295774f93ec0cdcd687481c98e2d5e606c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fc715eb288a8f364616c7adc16afd8ba74849d62",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc715eb288a8f364616c7adc16afd8ba74849d62",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fc715eb288a8f364616c7adc16afd8ba74849d62"
    }
  ],
  "stats": {
    "total": 145,
    "additions": 131,
    "deletions": 14
  },
  "files": [
    {
      "sha": "918a8fc41aa5666c63a51dd0c09e934bd096dcc2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dcd3e295774f93ec0cdcd687481c98e2d5e606c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dcd3e295774f93ec0cdcd687481c98e2d5e606c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9dcd3e295774f93ec0cdcd687481c98e2d5e606c",
      "patch": "@@ -1,3 +1,11 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* f-lang.c (eval_op_f_abs, eval_op_f_mod, eval_op_f_ceil)\n+\t(eval_op_f_floor, eval_op_f_modulo, eval_op_f_cmplx)\n+\t(eval_op_f_kind): No longer static.  Add \"opcode\" parameter.\n+\t(evaluate_subexp_f): Update.\n+\t* f-exp.h: New file.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* ada-lang.c (ada_ternop_range_operation::evaluate): New method."
    },
    {
      "sha": "4b3fdd4a53eebd29be08e97e7c77c5d053cf58ff",
      "filename": "gdb/f-exp.h",
      "status": "added",
      "additions": 101,
      "deletions": 0,
      "changes": 101,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dcd3e295774f93ec0cdcd687481c98e2d5e606c/gdb/f-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dcd3e295774f93ec0cdcd687481c98e2d5e606c/gdb/f-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.h?ref=9dcd3e295774f93ec0cdcd687481c98e2d5e606c",
      "patch": "@@ -0,0 +1,101 @@\n+/* Definitions for Fortran expressions\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef FORTRAN_EXP_H\n+#define FORTRAN_EXP_H\n+\n+#include \"expop.h\"\n+\n+extern struct value *eval_op_f_abs (struct type *expect_type,\n+\t\t\t\t    struct expression *exp,\n+\t\t\t\t    enum noside noside,\n+\t\t\t\t    enum exp_opcode opcode,\n+\t\t\t\t    struct value *arg1);\n+extern struct value *eval_op_f_mod (struct type *expect_type,\n+\t\t\t\t    struct expression *exp,\n+\t\t\t\t    enum noside noside,\n+\t\t\t\t    enum exp_opcode opcode,\n+\t\t\t\t    struct value *arg1, struct value *arg2);\n+extern struct value *eval_op_f_ceil (struct type *expect_type,\n+\t\t\t\t     struct expression *exp,\n+\t\t\t\t     enum noside noside,\n+\t\t\t\t     enum exp_opcode opcode,\n+\t\t\t\t     struct value *arg1);\n+extern struct value *eval_op_f_floor (struct type *expect_type,\n+\t\t\t\t      struct expression *exp,\n+\t\t\t\t      enum noside noside,\n+\t\t\t\t      enum exp_opcode opcode,\n+\t\t\t\t      struct value *arg1);\n+extern struct value *eval_op_f_modulo (struct type *expect_type,\n+\t\t\t\t       struct expression *exp,\n+\t\t\t\t       enum noside noside,\n+\t\t\t\t       enum exp_opcode opcode,\n+\t\t\t\t       struct value *arg1, struct value *arg2);\n+extern struct value *eval_op_f_cmplx (struct type *expect_type,\n+\t\t\t\t      struct expression *exp,\n+\t\t\t\t      enum noside noside,\n+\t\t\t\t      enum exp_opcode opcode,\n+\t\t\t\t      struct value *arg1, struct value *arg2);\n+extern struct value *eval_op_f_kind (struct type *expect_type,\n+\t\t\t\t     struct expression *exp,\n+\t\t\t\t     enum noside noside,\n+\t\t\t\t     enum exp_opcode opcode,\n+\t\t\t\t     struct value *arg1);\n+\n+namespace expr\n+{\n+\n+using fortran_abs_operation = unop_operation<UNOP_ABS, eval_op_f_abs>;\n+using fortran_ceil_operation = unop_operation<UNOP_FORTRAN_CEILING,\n+\t\t\t\t\t      eval_op_f_ceil>;\n+using fortran_floor_operation = unop_operation<UNOP_FORTRAN_FLOOR,\n+\t\t\t\t\t       eval_op_f_floor>;\n+using fortran_kind_operation = unop_operation<UNOP_FORTRAN_KIND,\n+\t\t\t\t\t      eval_op_f_kind>;\n+\n+using fortran_mod_operation = binop_operation<BINOP_MOD, eval_op_f_mod>;\n+using fortran_modulo_operation = binop_operation<BINOP_FORTRAN_MODULO,\n+\t\t\t\t\t\t eval_op_f_modulo>;\n+\n+/* The Fortran \"complex\" operation.  */\n+class fortran_cmplx_operation\n+  : public tuple_holding_operation<operation_up, operation_up>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *arg1 = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+    value *arg2 = std::get<1> (m_storage)->evaluate (value_type (arg1),\n+\t\t\t\t\t\t     exp, noside);\n+    return eval_op_f_cmplx (expect_type, exp, noside, BINOP_FORTRAN_CMPLX,\n+\t\t\t    arg1, arg2);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return BINOP_FORTRAN_CMPLX; }\n+};\n+\n+} /* namespace expr */\n+\n+#endif /* FORTRAN_EXP_H */"
    },
    {
      "sha": "28c483f66ff8f67914c642a11ee7df363a8cc970",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 22,
      "deletions": 14,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9dcd3e295774f93ec0cdcd687481c98e2d5e606c/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9dcd3e295774f93ec0cdcd687481c98e2d5e606c/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=9dcd3e295774f93ec0cdcd687481c98e2d5e606c",
      "patch": "@@ -38,6 +38,7 @@\n #include \"gdbarch.h\"\n #include \"gdbcmd.h\"\n #include \"f-array-walker.h\"\n+#include \"f-exp.h\"\n \n #include <math.h>\n \n@@ -993,9 +994,10 @@ fortran_associated (struct gdbarch *gdbarch, const language_defn *lang,\n \n /* A helper function for UNOP_ABS.  */\n \n-static struct value *\n+struct value *\n eval_op_f_abs (struct type *expect_type, struct expression *exp,\n \t       enum noside noside,\n+\t       enum exp_opcode opcode,\n \t       struct value *arg1)\n {\n   if (noside == EVAL_SKIP)\n@@ -1022,9 +1024,10 @@ eval_op_f_abs (struct type *expect_type, struct expression *exp,\n \n /* A helper function for BINOP_MOD.  */\n \n-static struct value *\n+struct value *\n eval_op_f_mod (struct type *expect_type, struct expression *exp,\n \t       enum noside noside,\n+\t       enum exp_opcode opcode,\n \t       struct value *arg1, struct value *arg2)\n {\n   if (noside == EVAL_SKIP)\n@@ -1060,9 +1063,10 @@ eval_op_f_mod (struct type *expect_type, struct expression *exp,\n \n /* A helper function for UNOP_FORTRAN_CEILING.  */\n \n-static struct value *\n+struct value *\n eval_op_f_ceil (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside,\n+\t\tenum exp_opcode opcode,\n \t\tstruct value *arg1)\n {\n   if (noside == EVAL_SKIP)\n@@ -1079,9 +1083,10 @@ eval_op_f_ceil (struct type *expect_type, struct expression *exp,\n \n /* A helper function for UNOP_FORTRAN_FLOOR.  */\n \n-static struct value *\n+struct value *\n eval_op_f_floor (struct type *expect_type, struct expression *exp,\n \t\t enum noside noside,\n+\t\t enum exp_opcode opcode,\n \t\t struct value *arg1)\n {\n   if (noside == EVAL_SKIP)\n@@ -1098,9 +1103,10 @@ eval_op_f_floor (struct type *expect_type, struct expression *exp,\n \n /* A helper function for BINOP_FORTRAN_MODULO.  */\n \n-static struct value *\n+struct value *\n eval_op_f_modulo (struct type *expect_type, struct expression *exp,\n \t\t  enum noside noside,\n+\t\t  enum exp_opcode opcode,\n \t\t  struct value *arg1, struct value *arg2)\n {\n   if (noside == EVAL_SKIP)\n@@ -1139,9 +1145,10 @@ eval_op_f_modulo (struct type *expect_type, struct expression *exp,\n \n /* A helper function for BINOP_FORTRAN_CMPLX.  */\n \n-static struct value *\n+struct value *\n eval_op_f_cmplx (struct type *expect_type, struct expression *exp,\n \t\t enum noside noside,\n+\t\t enum exp_opcode opcode,\n \t\t struct value *arg1, struct value *arg2)\n {\n   if (noside == EVAL_SKIP)\n@@ -1152,9 +1159,10 @@ eval_op_f_cmplx (struct type *expect_type, struct expression *exp,\n \n /* A helper function for UNOP_FORTRAN_KIND.  */\n \n-static struct value *\n+struct value *\n eval_op_f_kind (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside,\n+\t\tenum exp_opcode opcode,\n \t\tstruct value *arg1)\n {\n   struct type *type = value_type (arg1);\n@@ -1214,20 +1222,20 @@ evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n \n     case UNOP_ABS:\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n-      return eval_op_f_abs (expect_type, exp, noside, arg1);\n+      return eval_op_f_abs (expect_type, exp, noside, op, arg1);\n \n     case BINOP_MOD:\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n       arg2 = evaluate_subexp (value_type (arg1), exp, pos, noside);\n-      return eval_op_f_mod (expect_type, exp, noside, arg1, arg2);\n+      return eval_op_f_mod (expect_type, exp, noside, op, arg1, arg2);\n \n     case UNOP_FORTRAN_CEILING:\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n-      return eval_op_f_ceil (expect_type, exp, noside, arg1);\n+      return eval_op_f_ceil (expect_type, exp, noside, op, arg1);\n \n     case UNOP_FORTRAN_FLOOR:\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n-      return eval_op_f_floor (expect_type, exp, noside, arg1);\n+      return eval_op_f_floor (expect_type, exp, noside, op, arg1);\n \n     case UNOP_FORTRAN_ALLOCATED:\n       {\n@@ -1240,7 +1248,7 @@ evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n     case BINOP_FORTRAN_MODULO:\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n       arg2 = evaluate_subexp (value_type (arg1), exp, pos, noside);\n-      return eval_op_f_modulo (expect_type, exp, noside, arg1, arg2);\n+      return eval_op_f_modulo (expect_type, exp, noside, op, arg1, arg2);\n \n     case FORTRAN_LBOUND:\n     case FORTRAN_UBOUND:\n@@ -1305,11 +1313,11 @@ evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n     case BINOP_FORTRAN_CMPLX:\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n       arg2 = evaluate_subexp (value_type (arg1), exp, pos, noside);\n-      return eval_op_f_cmplx (expect_type, exp, noside, arg1, arg2);\n+      return eval_op_f_cmplx (expect_type, exp, noside, op, arg1, arg2);\n \n     case UNOP_FORTRAN_KIND:\n       arg1 = evaluate_subexp (NULL, exp, pos, EVAL_AVOID_SIDE_EFFECTS);\n-      return eval_op_f_kind (expect_type, exp, noside, arg1);\n+      return eval_op_f_kind (expect_type, exp, noside, op, arg1);\n \n     case OP_F77_UNDETERMINED_ARGLIST:\n       /* Remember that in F77, functions, substring ops and array subscript"
    }
  ]
}