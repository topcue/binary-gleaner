{
  "sha": "b2188a06e4583067a503fbc271e110e814890cc1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjIxODhhMDZlNDU4MzA2N2E1MDNmYmMyNzFlMTEwZTgxNDg5MGNjMQ==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-05-15T20:06:42Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-05-15T20:06:42Z"
    },
    "message": "update name of several Ada fixed-point type handling functions\n\nThe purpose of this patch is to prepare for the future where\nfixed point types become described using standard DWARF info,\nrather than GNAT encodings. For that, we rename a number of\nroutines manipulating Ada fixed point types to make it explicit\nfrom their new names that they rely on the GNAT encodings to work.\nThis will allow us, when we introduce support for fixed point types\nfrom standard DWARF to use names that are not ambiguous with\nthe functions that do similar work, but only for GNAT encodings.\n\ngdb/ChangeLog:\n\n        * ada-lang.h: (ada_is_gnat_encoded_fixed_point_type): Renames\n        ada_is_fixed_point_type.  Update all callers.\n        (gnat_encoded_fixed_point_delta): Renames ada_delta.  Update\n        all callers.\n        * ada-lang.c (gnat_encoded_fixed_type_info): Renames fixed_type_info.\n        Update all callers.\n        * ada-typeprint.c (print_gnat_encoded_fixed_point_type): Renames\n        print_fixed_point_type.  Update all callers.\n        * ada-valprint.c (ada_value_print_num): Replace call to\n        ada_is_fixed_point_type by ada_is_gnat_encoded_fixed_point_type.",
    "tree": {
      "sha": "121abc54859cc2e200213193d8a056f53757c827",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/121abc54859cc2e200213193d8a056f53757c827"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b2188a06e4583067a503fbc271e110e814890cc1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b2188a06e4583067a503fbc271e110e814890cc1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b2188a06e4583067a503fbc271e110e814890cc1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b2188a06e4583067a503fbc271e110e814890cc1/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "86e4e63d7cabb94a80a5ce767f670b65add5a083",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86e4e63d7cabb94a80a5ce767f670b65add5a083",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/86e4e63d7cabb94a80a5ce767f670b65add5a083"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 43,
    "deletions": 30
  },
  "files": [
    {
      "sha": "f91827e4ce0199c7f841d6b7e0ea3c4cd8732f08",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b2188a06e4583067a503fbc271e110e814890cc1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b2188a06e4583067a503fbc271e110e814890cc1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b2188a06e4583067a503fbc271e110e814890cc1",
      "patch": "@@ -1,3 +1,16 @@\n+2020-05-15  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* ada-lang.h: (ada_is_gnat_encoded_fixed_point_type): Renames\n+\tada_is_fixed_point_type.  Update all callers.\n+\t(gnat_encoded_fixed_point_delta): Renames ada_delta.  Update\n+\tall callers.\n+\t* ada-lang.c (gnat_encoded_fixed_type_info): Renames fixed_type_info.\n+\tUpdate all callers.\n+\t* ada-typeprint.c (print_gnat_encoded_fixed_point_type): Renames\n+\tprint_fixed_point_type.  Update all callers.\n+\t* ada-valprint.c (ada_value_print_num): Replace call to\n+\tada_is_fixed_point_type by ada_is_gnat_encoded_fixed_point_type.\n+\n 2020-05-14  Kevin Buettner  <kevinb@redhat.com>\n \n \t* nat/linux-btrace.c (btrace_this_cpu): Add check for AMD"
    },
    {
      "sha": "e5288e2370c9128bed0864253a5b491cb8266170",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 21,
      "deletions": 21,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b2188a06e4583067a503fbc271e110e814890cc1/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b2188a06e4583067a503fbc271e110e814890cc1/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=b2188a06e4583067a503fbc271e110e814890cc1",
      "patch": "@@ -9460,7 +9460,7 @@ cast_to_fixed (struct type *type, struct value *arg)\n     return arg;\n \n   struct value *scale = ada_scaling_factor (type);\n-  if (ada_is_fixed_point_type (value_type (arg)))\n+  if (ada_is_gnat_encoded_fixed_point_type (value_type (arg)))\n     arg = cast_from_fixed (value_type (scale), arg);\n   else\n     arg = value_cast (value_type (scale), arg);\n@@ -10008,10 +10008,10 @@ ada_value_cast (struct type *type, struct value *arg2)\n   if (type == ada_check_typedef (value_type (arg2)))\n     return arg2;\n \n-  if (ada_is_fixed_point_type (type))\n+  if (ada_is_gnat_encoded_fixed_point_type (type))\n     return cast_to_fixed (type, arg2);\n \n-  if (ada_is_fixed_point_type (value_type (arg2)))\n+  if (ada_is_gnat_encoded_fixed_point_type (value_type (arg2)))\n     return cast_from_fixed (type, arg2);\n \n   return value_cast (type, arg2);\n@@ -10411,9 +10411,9 @@ ada_evaluate_subexp (struct type *expect_type, struct expression *exp,\n \t{\n \t  /* Nothing.  */\n \t}\n-      else if (ada_is_fixed_point_type (value_type (arg1)))\n+      else if (ada_is_gnat_encoded_fixed_point_type (value_type (arg1)))\n         arg2 = cast_to_fixed (value_type (arg1), arg2);\n-      else if (ada_is_fixed_point_type (value_type (arg2)))\n+      else if (ada_is_gnat_encoded_fixed_point_type (value_type (arg2)))\n         error\n           (_(\"Fixed-point values must be assigned to fixed-point variables\"));\n       else\n@@ -10433,8 +10433,8 @@ ada_evaluate_subexp (struct type *expect_type, struct expression *exp,\n         return (value_from_longest\n                  (value_type (arg2),\n                   value_as_long (arg1) + value_as_long (arg2)));\n-      if ((ada_is_fixed_point_type (value_type (arg1))\n-           || ada_is_fixed_point_type (value_type (arg2)))\n+      if ((ada_is_gnat_encoded_fixed_point_type (value_type (arg1))\n+           || ada_is_gnat_encoded_fixed_point_type (value_type (arg2)))\n           && value_type (arg1) != value_type (arg2))\n         error (_(\"Operands of fixed-point addition must have the same type\"));\n       /* Do the addition, and cast the result to the type of the first\n@@ -10459,8 +10459,8 @@ ada_evaluate_subexp (struct type *expect_type, struct expression *exp,\n         return (value_from_longest\n                  (value_type (arg2),\n                   value_as_long (arg1) - value_as_long (arg2)));\n-      if ((ada_is_fixed_point_type (value_type (arg1))\n-           || ada_is_fixed_point_type (value_type (arg2)))\n+      if ((ada_is_gnat_encoded_fixed_point_type (value_type (arg1))\n+           || ada_is_gnat_encoded_fixed_point_type (value_type (arg2)))\n           && value_type (arg1) != value_type (arg2))\n         error (_(\"Operands of fixed-point subtraction \"\n \t\t \"must have the same type\"));\n@@ -10489,9 +10489,9 @@ ada_evaluate_subexp (struct type *expect_type, struct expression *exp,\n       else\n         {\n           type = builtin_type (exp->gdbarch)->builtin_double;\n-          if (ada_is_fixed_point_type (value_type (arg1)))\n+          if (ada_is_gnat_encoded_fixed_point_type (value_type (arg1)))\n             arg1 = cast_from_fixed (type, arg1);\n-          if (ada_is_fixed_point_type (value_type (arg2)))\n+          if (ada_is_gnat_encoded_fixed_point_type (value_type (arg2)))\n             arg2 = cast_from_fixed (type, arg2);\n           binop_promote (exp->language_defn, exp->gdbarch, &arg1, &arg2);\n           return ada_value_binop (arg1, arg2, op);\n@@ -10519,7 +10519,7 @@ ada_evaluate_subexp (struct type *expect_type, struct expression *exp,\n       arg1 = evaluate_subexp (NULL_TYPE, exp, pos, noside);\n       if (noside == EVAL_SKIP)\n         goto nosideret;\n-      else if (ada_is_fixed_point_type (value_type (arg1)))\n+      else if (ada_is_gnat_encoded_fixed_point_type (value_type (arg1)))\n         return value_cast (value_type (arg1), value_neg (arg1));\n       else\n \t{\n@@ -11391,7 +11391,7 @@ ada_evaluate_subexp (struct type *expect_type, struct expression *exp,\n    Otherwise, return NULL.  */\n \n static const char *\n-fixed_type_info (struct type *type)\n+gnat_encoded_fixed_type_info (struct type *type)\n {\n   const char *name = ada_type_name (type);\n   enum type_code code = (type == NULL) ? TYPE_CODE_UNDEF : type->code ();\n@@ -11406,17 +11406,17 @@ fixed_type_info (struct type *type)\n         return tail + 5;\n     }\n   else if (code == TYPE_CODE_RANGE && TYPE_TARGET_TYPE (type) != type)\n-    return fixed_type_info (TYPE_TARGET_TYPE (type));\n+    return gnat_encoded_fixed_type_info (TYPE_TARGET_TYPE (type));\n   else\n     return NULL;\n }\n \n /* Returns non-zero iff TYPE represents an Ada fixed-point type.  */\n \n int\n-ada_is_fixed_point_type (struct type *type)\n+ada_is_gnat_encoded_fixed_point_type (struct type *type)\n {\n-  return fixed_type_info (type) != NULL;\n+  return gnat_encoded_fixed_type_info (type) != NULL;\n }\n \n /* Return non-zero iff TYPE represents a System.Address type.  */\n@@ -11443,9 +11443,9 @@ ada_scaling_type (struct type *type)\n    delta cannot be determined.  */\n \n struct value *\n-ada_delta (struct type *type)\n+gnat_encoded_fixed_point_delta (struct type *type)\n {\n-  const char *encoding = fixed_type_info (type);\n+  const char *encoding = gnat_encoded_fixed_type_info (type);\n   struct type *scale_type = ada_scaling_type (type);\n \n   long long num, den;\n@@ -11457,13 +11457,13 @@ ada_delta (struct type *type)\n \t\t\tvalue_from_longest (scale_type, den), BINOP_DIV);\n }\n \n-/* Assuming that ada_is_fixed_point_type (TYPE), return the scaling\n-   factor ('SMALL value) associated with the type.  */\n+/* Assuming that ada_is_gnat_encoded_fixed_point_type (TYPE), return\n+   the scaling factor ('SMALL value) associated with the type.  */\n \n struct value *\n ada_scaling_factor (struct type *type)\n {\n-  const char *encoding = fixed_type_info (type);\n+  const char *encoding = gnat_encoded_fixed_type_info (type);\n   struct type *scale_type = ada_scaling_type (type);\n \n   long long num0, den0, num1, den1;"
    },
    {
      "sha": "5ba00518e6db035c03c2e3da39ba90fe73c72de7",
      "filename": "gdb/ada-lang.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b2188a06e4583067a503fbc271e110e814890cc1/gdb/ada-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b2188a06e4583067a503fbc271e110e814890cc1/gdb/ada-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.h?ref=b2188a06e4583067a503fbc271e110e814890cc1",
      "patch": "@@ -281,11 +281,11 @@ extern struct type *ada_aligned_type (struct type *);\n extern const gdb_byte *ada_aligned_value_addr (struct type *,\n \t\t\t\t\t       const gdb_byte *);\n \n-extern int ada_is_fixed_point_type (struct type *);\n+extern int ada_is_gnat_encoded_fixed_point_type (struct type *);\n \n extern int ada_is_system_address_type (struct type *);\n \n-extern struct value *ada_delta (struct type *);\n+extern struct value *gnat_encoded_fixed_point_delta (struct type *);\n \n extern struct value *ada_scaling_factor (struct type *);\n "
    },
    {
      "sha": "1b976b1fbdb8150398c30caf47e085e57ed45c40",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b2188a06e4583067a503fbc271e110e814890cc1/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b2188a06e4583067a503fbc271e110e814890cc1/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=b2188a06e4583067a503fbc271e110e814890cc1",
      "patch": "@@ -342,9 +342,9 @@ print_enum_type (struct type *type, struct ui_file *stream)\n /* Print representation of Ada fixed-point type TYPE on STREAM.  */\n \n static void\n-print_fixed_point_type (struct type *type, struct ui_file *stream)\n+print_gnat_encoded_fixed_point_type (struct type *type, struct ui_file *stream)\n {\n-  struct value *delta = ada_delta (type);\n+  struct value *delta = gnat_encoded_fixed_point_delta (type);\n   struct value *small = ada_scaling_factor (type);\n \n   if (delta == nullptr)\n@@ -1012,8 +1012,8 @@ ada_print_type (struct type *type0, const char *varstring,\n \tfprintf_filtered (stream, \"(false, true)\");\n \tbreak;\n       case TYPE_CODE_INT:\n-\tif (ada_is_fixed_point_type (type))\n-\t  print_fixed_point_type (type, stream);\n+\tif (ada_is_gnat_encoded_fixed_point_type (type))\n+\t  print_gnat_encoded_fixed_point_type (type, stream);\n \telse\n \t  {\n \t    const char *name = ada_type_name (type);\n@@ -1030,8 +1030,8 @@ ada_print_type (struct type *type0, const char *varstring,\n \t  }\n \tbreak;\n       case TYPE_CODE_RANGE:\n-\tif (ada_is_fixed_point_type (type))\n-\t  print_fixed_point_type (type, stream);\n+\tif (ada_is_gnat_encoded_fixed_point_type (type))\n+\t  print_gnat_encoded_fixed_point_type (type, stream);\n \telse if (ada_is_modular_type (type))\n \t  fprintf_filtered (stream, \"mod %s\", \n \t\t\t    int_string (ada_modulus (type), 10, 0, 0, 1));"
    },
    {
      "sha": "e11e47ee59eae35626d4fa8a99a1139bbbce2d3d",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b2188a06e4583067a503fbc271e110e814890cc1/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b2188a06e4583067a503fbc271e110e814890cc1/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=b2188a06e4583067a503fbc271e110e814890cc1",
      "patch": "@@ -793,7 +793,7 @@ ada_value_print_num (struct value *val, struct ui_file *stream, int recurse,\n   struct type *type = ada_check_typedef (value_type (val));\n   const gdb_byte *valaddr = value_contents_for_printing (val);\n \n-  if (ada_is_fixed_point_type (type))\n+  if (ada_is_gnat_encoded_fixed_point_type (type))\n     {\n       struct value *scale = ada_scaling_factor (type);\n       val = value_cast (value_type (scale), val);"
    }
  ]
}