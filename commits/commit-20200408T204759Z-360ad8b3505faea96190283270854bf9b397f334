{
  "sha": "360ad8b3505faea96190283270854bf9b397f334",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzYwYWQ4YjM1MDVmYWVhOTYxOTAyODMyNzA4NTRiZjliMzk3ZjMzNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:59Z"
    },
    "message": "Add pending stop support to gdbserver's Windows port\n\nThis changes gdbserver to also handle pending stops, the same way that\ngdb does.  This is PR gdb/22992.\n\ngdbserver/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\tPR gdb/22992\n\t* win32-low.c (child_continue): Call matching_pending_stop.\n\t(get_child_debug_event): Call fetch_pending_stop.  Push pending\n\tstop when needed.",
    "tree": {
      "sha": "2eb0eeb3d0a1e40140531d395398a8a89f5a66b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2eb0eeb3d0a1e40140531d395398a8a89f5a66b1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/360ad8b3505faea96190283270854bf9b397f334",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/360ad8b3505faea96190283270854bf9b397f334",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/360ad8b3505faea96190283270854bf9b397f334",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/360ad8b3505faea96190283270854bf9b397f334/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "523d4f80c32f43a6b009645947b94f87df35f79f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/523d4f80c32f43a6b009645947b94f87df35f79f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/523d4f80c32f43a6b009645947b94f87df35f79f"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 38,
    "deletions": 3
  },
  "files": [
    {
      "sha": "e75c475da4504dff3fdb99b1bf80b8dedce46e43",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/360ad8b3505faea96190283270854bf9b397f334/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/360ad8b3505faea96190283270854bf9b397f334/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=360ad8b3505faea96190283270854bf9b397f334",
      "patch": "@@ -1,3 +1,10 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\tPR gdb/22992\n+\t* win32-low.c (child_continue): Call matching_pending_stop.\n+\t(get_child_debug_event): Call fetch_pending_stop.  Push pending\n+\tstop when needed.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* win32-low.h  (win32_process_target::stopped_by_sw_breakpoint)"
    },
    {
      "sha": "e1226b4b0db008c491dd13c7500079364934eaa2",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 31,
      "deletions": 3,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/360ad8b3505faea96190283270854bf9b397f334/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/360ad8b3505faea96190283270854bf9b397f334/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=360ad8b3505faea96190283270854bf9b397f334",
      "patch": "@@ -430,6 +430,10 @@ continue_one_thread (thread_info *thread, int thread_id)\n static BOOL\n child_continue (DWORD continue_status, int thread_id)\n {\n+  desired_stop_thread_id = thread_id;\n+  if (matching_pending_stop (debug_threads))\n+    return TRUE;\n+\n   /* The inferior will only continue after the ContinueDebugEvent\n      call.  */\n   for_each_thread ([&] (thread_info *thread)\n@@ -1274,6 +1278,16 @@ get_child_debug_event (DWORD *continue_status,\n   else\n #endif\n     {\n+      gdb::optional<pending_stop> stop = fetch_pending_stop (debug_threads);\n+      if (stop.has_value ())\n+\t{\n+\t  *ourstatus = stop->status;\n+\t  current_event = stop->event;\n+\t  ptid = debug_event_ptid (&current_event);\n+\t  current_thread = find_thread_ptid (ptid);\n+\t  return 1;\n+\t}\n+\n       /* Keep the wait time low enough for comfortable remote\n \t interruption, but high enough so gdbserver doesn't become a\n \t bottleneck.  */\n@@ -1377,7 +1391,7 @@ get_child_debug_event (DWORD *continue_status,\n \t    ourstatus->value.sig = gdb_signal_from_host (exit_signal);\n \t  }\n       }\n-      child_continue (DBG_CONTINUE, -1);\n+      child_continue (DBG_CONTINUE, desired_stop_thread_id);\n       CloseHandle (current_process_handle);\n       current_process_handle = NULL;\n       break;\n@@ -1437,7 +1451,21 @@ get_child_debug_event (DWORD *continue_status,\n     }\n \n   ptid = debug_event_ptid (&current_event);\n-  current_thread = find_thread_ptid (ptid);\n+\n+  if (desired_stop_thread_id != -1 && desired_stop_thread_id != ptid.lwp ())\n+    {\n+      /* Pending stop.  See the comment by the definition of\n+\t \"pending_stops\" for details on why this is needed.  */\n+      OUTMSG2 ((\"get_windows_debug_event - \"\n+\t\t\"unexpected stop in 0x%x (expecting 0x%x)\\n\",\n+\t\tptid.lwp (), desired_stop_thread_id));\n+      maybe_adjust_pc ();\n+      pending_stops.push_back ({(DWORD) ptid.lwp (), *ourstatus, current_event});\n+      ourstatus->kind = TARGET_WAITKIND_SPURIOUS;\n+    }\n+  else\n+    current_thread = find_thread_ptid (ptid);\n+\n   return 1;\n }\n \n@@ -1486,7 +1514,7 @@ win32_process_target::wait (ptid_t ptid, target_waitstatus *ourstatus,\n \t  /* fall-through */\n \tcase TARGET_WAITKIND_SPURIOUS:\n \t  /* do nothing, just continue */\n-\t  child_continue (continue_status, -1);\n+\t  child_continue (continue_status, desired_stop_thread_id);\n \t  break;\n \t}\n     }"
    }
  ]
}