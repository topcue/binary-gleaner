{
  "sha": "1b6b755e91408011fa74f0a245369c1979586f9e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWI2Yjc1NWU5MTQwODAxMWZhNzRmMGEyNDUzNjljMTk3OTU4NmY5ZQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-04-14T14:20:18Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-04-16T14:14:16Z"
    },
    "message": "Print bfloat16 DWARF types correctly\n\nEven if the DWARF information contains a bfloat16 base type (__bf16), a\nvariable of such type will still be printed using the IEEE half float format,\nwhich is wrong.\n\nThis patch teaches GDB how to pick the bfloat16 format for __bf16 types in\nDWARF (based on the base type name) and uses IEEE half float for all the other\n16-bit float formats.\n\nTested on aarch64-linux/x86_64-linux.\n\nOK?\n\ngdb/ChangeLog:\n\n2021-04-16  Luis Machado  <luis.machado@linaro.org>\n\n\t* arch-utils.c (default_floatformat_for_type): Handle bfloat16.\n\ngdb/testsuite:\n\n2021-04-16  Luis Machado  <luis.machado@linaro.org>\n\n\t* gdb.dwarf2/dw2-bfloat16.exp: New file.",
    "tree": {
      "sha": "6e845854e05071e891c236777d37a8c8b573ea86",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6e845854e05071e891c236777d37a8c8b573ea86"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b6b755e91408011fa74f0a245369c1979586f9e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b6b755e91408011fa74f0a245369c1979586f9e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b6b755e91408011fa74f0a245369c1979586f9e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b6b755e91408011fa74f0a245369c1979586f9e/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6f8f6017a0c4e22c6417c597c31b0a937d148a39",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f8f6017a0c4e22c6417c597c31b0a937d148a39",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6f8f6017a0c4e22c6417c597c31b0a937d148a39"
    }
  ],
  "stats": {
    "total": 98,
    "additions": 97,
    "deletions": 1
  },
  "files": [
    {
      "sha": "c8630a43014e2ac59acaa753d450e845bbc88df2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b6b755e91408011fa74f0a245369c1979586f9e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b6b755e91408011fa74f0a245369c1979586f9e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1b6b755e91408011fa74f0a245369c1979586f9e",
      "patch": "@@ -1,3 +1,7 @@\n+2021-04-16  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* arch-utils.c (default_floatformat_for_type): Handle bfloat16.\n+\n 2021-04-15  John Baldwin  <jhb@FreeBSD.org>\n \n \t* fbsd-nat.c (fbsd_lwp_debug_printf, fbsd_nat_debug_printf): New,"
    },
    {
      "sha": "e1d5afd60391a5b9509216f080083b2e2f78178b",
      "filename": "gdb/arch-utils.c",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b6b755e91408011fa74f0a245369c1979586f9e/gdb/arch-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b6b755e91408011fa74f0a245369c1979586f9e/gdb/arch-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.c?ref=1b6b755e91408011fa74f0a245369c1979586f9e",
      "patch": "@@ -279,7 +279,13 @@ default_floatformat_for_type (struct gdbarch *gdbarch,\n {\n   const struct floatformat **format = NULL;\n \n-  if (len == gdbarch_half_bit (gdbarch))\n+  /* Check if this is a bfloat16 type.  It has the same size as the\n+     IEEE half float type, so we use the base type name to tell them\n+     apart.  */\n+  if (name != nullptr && strcmp (name, \"__bf16\") == 0\n+      && len == gdbarch_bfloat16_bit (gdbarch))\n+    format = gdbarch_bfloat16_format (gdbarch);\n+  else if (len == gdbarch_half_bit (gdbarch))\n     format = gdbarch_half_format (gdbarch);\n   else if (len == gdbarch_float_bit (gdbarch))\n     format = gdbarch_float_format (gdbarch);"
    },
    {
      "sha": "9e490aaf8b3bbfa3424f25517057f85e6daa00a7",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b6b755e91408011fa74f0a245369c1979586f9e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b6b755e91408011fa74f0a245369c1979586f9e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=1b6b755e91408011fa74f0a245369c1979586f9e",
      "patch": "@@ -1,3 +1,7 @@\n+2021-04-16  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* gdb.dwarf2/dw2-bfloat16.exp: New file.\n+\n 2021-04-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-parameter.exp: Give a test a proper name to avoid"
    },
    {
      "sha": "b7c394a3a3d5fce084667b888e7cd0381e3084df",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-bfloat16.exp",
      "status": "added",
      "additions": 82,
      "deletions": 0,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b6b755e91408011fa74f0a245369c1979586f9e/gdb/testsuite/gdb.dwarf2/dw2-bfloat16.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b6b755e91408011fa74f0a245369c1979586f9e/gdb/testsuite/gdb.dwarf2/dw2-bfloat16.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-bfloat16.exp?ref=1b6b755e91408011fa74f0a245369c1979586f9e",
      "patch": "@@ -0,0 +1,82 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+#\n+# This test checks if GDB can identify bfloat16 and IEEE half float types and\n+# print them correctly.\n+#\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile main.c -dw.S\n+\n+# Make some DWARF for the test.\n+# 0x4049 is the equivalent of 3.141 for bfloat16.\n+# 0x4248 is the equivalent of 3.1406 for IEEE half float.\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    global srcdir subdir srcfile\n+\n+    cu {} {\n+\tDW_TAG_compile_unit {\n+                {DW_AT_language @DW_LANG_C}\n+                {DW_AT_name     $srcfile}\n+                {DW_AT_comp_dir /tmp}\n+        } {\n+\t    declare_labels bf16_type fp16_type \\\n+\t\tbf16_var fp16_var\n+\n+            bf16_type: DW_TAG_base_type {\n+                {DW_AT_name __bf16}\n+\t\t{encoding @DW_ATE_float}\n+                {DW_AT_byte_size 2 DW_FORM_sdata}\n+            }\n+\n+            fp16_type: DW_TAG_base_type {\n+                {DW_AT_name __fp16}\n+\t\t{encoding @DW_ATE_float}\n+                {DW_AT_byte_size 2 DW_FORM_sdata}\n+            }\n+\n+\t    bf16_var: DW_TAG_variable {\n+\t\t{DW_AT_name \"bf16_1\"}\n+\t\t{DW_AT_type :${bf16_type}}\n+\t\t{DW_AT_const_value 0x4049 DW_FORM_sdata}\n+\t    }\n+\n+\t    fp16_var: DW_TAG_variable {\n+\t\t{DW_AT_name \"fp16_1\"}\n+\t\t{DW_AT_type :${fp16_type}}\n+\t\t{DW_AT_const_value 0x4248 DW_FORM_sdata}\n+\t    }\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+# Make sure we can print both types correctly.\n+gdb_test \"print bf16_1\" \" = 3.141\"\n+gdb_test \"print fp16_1\" \" = 3.1406\""
    }
  ]
}