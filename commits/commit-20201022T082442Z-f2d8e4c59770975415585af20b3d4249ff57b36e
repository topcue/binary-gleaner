{
  "sha": "f2d8e4c59770975415585af20b3d4249ff57b36e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjJkOGU0YzU5NzcwOTc1NDE1NTg1YWYyMGIzZDQyNDlmZjU3YjM2ZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-09-25T23:09:25Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-10-22T08:24:42Z"
    },
    "message": "gdb: rename 'enum range_type' to 'enum range_flag'\n\nTo avoid confusion with other parts of GDB relating to types and\nranges, rename this enum to make it clearer that it is a set of\nindividual flags rather than an enumeration of different types of\nrange.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* expprint.c (print_subexp_standard): Change enum range_type to\n\trange_flag and rename variables to match.\n\t(dump_subexp_body_standard): Likewise.\n\t* expression.h (enum range_type): Rename to...\n\t(enum range_flag): ...this.\n\t(range_types): Rename to...\n\t(range_flags): ...this.\n\t* f-lang.c (value_f90_subarray): Change enum range_type to\n\trange_flag and rename variables to match.\n\t* parse.c (operator_length_standard): Likewise.\n\t* rust-exp.y (rust_parser::convert_ast_to_expression): Change enum\n\trange_type to range_flag.\n\t* rust-lang.c (rust_evaluate_funcall): Likewise.\n\t(rust_range): Likewise.\n\t(rust_compute_range): Likewise.\n\t(rust_subscript): Likewise.",
    "tree": {
      "sha": "35ff51835d87fe51e123931e7efe2120eac85ad9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/35ff51835d87fe51e123931e7efe2120eac85ad9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f2d8e4c59770975415585af20b3d4249ff57b36e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f2d8e4c59770975415585af20b3d4249ff57b36e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f2d8e4c59770975415585af20b3d4249ff57b36e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f2d8e4c59770975415585af20b3d4249ff57b36e/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2f1b18db863d630b94f9454067597e0df648bf37",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f1b18db863d630b94f9454067597e0df648bf37",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2f1b18db863d630b94f9454067597e0df648bf37"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 46,
    "deletions": 27
  },
  "files": [
    {
      "sha": "d67de7c05a738fce3120d5ba4186e33f88fbf943",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f2d8e4c59770975415585af20b3d4249ff57b36e",
      "patch": "@@ -1,3 +1,22 @@\n+2020-10-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* expprint.c (print_subexp_standard): Change enum range_type to\n+\trange_flag and rename variables to match.\n+\t(dump_subexp_body_standard): Likewise.\n+\t* expression.h (enum range_type): Rename to...\n+\t(enum range_flag): ...this.\n+\t(range_types): Rename to...\n+\t(range_flags): ...this.\n+\t* f-lang.c (value_f90_subarray): Change enum range_type to\n+\trange_flag and rename variables to match.\n+\t* parse.c (operator_length_standard): Likewise.\n+\t* rust-exp.y (rust_parser::convert_ast_to_expression): Change enum\n+\trange_type to range_flag.\n+\t* rust-lang.c (rust_evaluate_funcall): Likewise.\n+\t(rust_range): Likewise.\n+\t(rust_compute_range): Likewise.\n+\t(rust_subscript): Likewise.\n+\n 2020-10-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* expprint.c (print_subexp_standard): Update to reflect changes to"
    },
    {
      "sha": "2dee2bb193285018699cbf4ae69d785b00fd9dfe",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=f2d8e4c59770975415585af20b3d4249ff57b36e",
      "patch": "@@ -579,19 +579,19 @@ print_subexp_standard (struct expression *exp, int *pos,\n \n     case OP_RANGE:\n       {\n-\tenum range_type range_type;\n+\tenum range_flag range_flag;\n \n-\trange_type = (enum range_type)\n+\trange_flag = (enum range_flag)\n \t  longest_to_int (exp->elts[pc + 1].longconst);\n \t*pos += 2;\n \n-\tif (range_type & RANGE_HIGH_BOUND_EXCLUSIVE)\n+\tif (range_flag & RANGE_HIGH_BOUND_EXCLUSIVE)\n \t  fputs_filtered (\"EXCLUSIVE_\", stream);\n \tfputs_filtered (\"RANGE(\", stream);\n-\tif (!(range_type & RANGE_LOW_BOUND_DEFAULT))\n+\tif (!(range_flag & RANGE_LOW_BOUND_DEFAULT))\n \t  print_subexp (exp, pos, stream, PREC_ABOVE_COMMA);\n \tfputs_filtered (\"..\", stream);\n-\tif (!(range_type & RANGE_HIGH_BOUND_DEFAULT))\n+\tif (!(range_flag & RANGE_HIGH_BOUND_DEFAULT))\n \t  print_subexp (exp, pos, stream, PREC_ABOVE_COMMA);\n \tfputs_filtered (\")\", stream);\n \treturn;\n@@ -1106,25 +1106,25 @@ dump_subexp_body_standard (struct expression *exp,\n       break;\n     case OP_RANGE:\n       {\n-\tenum range_type range_type;\n+\tenum range_flag range_flag;\n \n-\trange_type = (enum range_type)\n+\trange_flag = (enum range_flag)\n \t  longest_to_int (exp->elts[elt].longconst);\n \telt += 2;\n \n-\tif (range_type & RANGE_HIGH_BOUND_EXCLUSIVE)\n+\tif (range_flag & RANGE_HIGH_BOUND_EXCLUSIVE)\n \t  fputs_filtered (\"Exclusive\", stream);\n \tfputs_filtered (\"Range '\", stream);\n-\tif (!(range_type & RANGE_LOW_BOUND_DEFAULT))\n+\tif (!(range_flag & RANGE_LOW_BOUND_DEFAULT))\n \t  fputs_filtered (\"EXP\", stream);\n \tfputs_filtered (\"..\", stream);\n-\tif (!(range_type & RANGE_HIGH_BOUND_DEFAULT))\n+\tif (!(range_flag & RANGE_HIGH_BOUND_DEFAULT))\n \t  fputs_filtered (\"EXP\", stream);\n \tfputs_filtered (\"'\", stream);\n \n-\tif (!(range_type & RANGE_LOW_BOUND_DEFAULT))\n+\tif (!(range_flag & RANGE_LOW_BOUND_DEFAULT))\n \t  elt = dump_subexp (exp, stream, elt);\n-\tif (!(range_type & RANGE_HIGH_BOUND_DEFAULT))\n+\tif (!(range_flag & RANGE_HIGH_BOUND_DEFAULT))\n \t  elt = dump_subexp (exp, stream, elt);\n       }\n       break;"
    },
    {
      "sha": "fd483e5f277fd9315e3a39b4e3213d4c308c6edd",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=f2d8e4c59770975415585af20b3d4249ff57b36e",
      "patch": "@@ -185,7 +185,7 @@ extern void dump_prefix_expression (struct expression *, struct ui_file *);\n    or inclusive.  So we have six sorts of subrange.  This enumeration\n    type is to identify this.  */\n \n-enum range_type : unsigned\n+enum range_flag : unsigned\n {\n   /* This is a standard range.  Both the lower and upper bounds are\n      defined, and the bounds are inclusive.  */\n@@ -201,6 +201,6 @@ enum range_type : unsigned\n   RANGE_HIGH_BOUND_EXCLUSIVE = 1 << 2,\n };\n \n-DEF_ENUM_FLAGS_TYPE (enum range_type, range_types);\n+DEF_ENUM_FLAGS_TYPE (enum range_flag, range_flags);\n \n #endif /* !defined (EXPRESSION_H) */"
    },
    {
      "sha": "37d05b276537b2bdd36c28ee2fed93b51831cf78",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=f2d8e4c59770975415585af20b3d4249ff57b36e",
      "patch": "@@ -126,17 +126,17 @@ value_f90_subarray (struct value *array,\n   int pc = (*pos) + 1;\n   LONGEST low_bound, high_bound;\n   struct type *range = check_typedef (value_type (array)->index_type ());\n-  enum range_type range_type\n-    = (enum range_type) longest_to_int (exp->elts[pc].longconst);\n+  enum range_flag range_flag\n+    = (enum range_flag) longest_to_int (exp->elts[pc].longconst);\n \n   *pos += 3;\n \n-  if (range_type & RANGE_LOW_BOUND_DEFAULT)\n+  if (range_flag & RANGE_LOW_BOUND_DEFAULT)\n     low_bound = range->bounds ()->low.const_val ();\n   else\n     low_bound = value_as_long (evaluate_subexp (nullptr, exp, pos, noside));\n \n-  if (range_type & RANGE_HIGH_BOUND_DEFAULT)\n+  if (range_flag & RANGE_HIGH_BOUND_DEFAULT)\n     high_bound = range->bounds ()->high.const_val ();\n   else\n     high_bound = value_as_long (evaluate_subexp (nullptr, exp, pos, noside));"
    },
    {
      "sha": "4a15de8a4993ed913d5bb486eb90737c77582740",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=f2d8e4c59770975415585af20b3d4249ff57b36e",
      "patch": "@@ -774,7 +774,7 @@ operator_length_standard (const struct expression *expr, int endpos,\n {\n   int oplen = 1;\n   int args = 0;\n-  enum range_type range_type;\n+  enum range_flag range_flag;\n   int i;\n \n   if (endpos < 1)\n@@ -918,15 +918,15 @@ operator_length_standard (const struct expression *expr, int endpos,\n \n     case OP_RANGE:\n       oplen = 3;\n-      range_type = (enum range_type)\n+      range_flag = (enum range_flag)\n \tlongest_to_int (expr->elts[endpos - 2].longconst);\n \n       /* Assume the range has 2 arguments (low bound and high bound), then\n \t reduce the argument count if any bounds are set to default.  */\n       args = 2;\n-      if (range_type & RANGE_LOW_BOUND_DEFAULT)\n+      if (range_flag & RANGE_LOW_BOUND_DEFAULT)\n \t--args;\n-      if (range_type & RANGE_HIGH_BOUND_DEFAULT)\n+      if (range_flag & RANGE_HIGH_BOUND_DEFAULT)\n \t--args;\n \n       break;"
    },
    {
      "sha": "802ccc0a7f6dc8591a9c5a689820dcf85c566c83",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=f2d8e4c59770975415585af20b3d4249ff57b36e",
      "patch": "@@ -2492,7 +2492,7 @@ rust_parser::convert_ast_to_expression (const struct rust_op *operation,\n \n     case OP_RANGE:\n       {\n-\tenum range_type kind = (RANGE_HIGH_BOUND_DEFAULT\n+\tenum range_flag kind = (RANGE_HIGH_BOUND_DEFAULT\n \t\t\t\t| RANGE_LOW_BOUND_DEFAULT);\n \n \tif (operation->left.op != NULL)"
    },
    {
      "sha": "86e7289c5e6c81a2ce2bbeaea68f457e02174784",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2d8e4c59770975415585af20b3d4249ff57b36e/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=f2d8e4c59770975415585af20b3d4249ff57b36e",
      "patch": "@@ -1065,7 +1065,6 @@ rust_evaluate_funcall (struct expression *exp, int *pos, enum noside noside)\n static struct value *\n rust_range (struct expression *exp, int *pos, enum noside noside)\n {\n-  enum range_type kind;\n   struct value *low = NULL, *high = NULL;\n   struct value *addrval, *result;\n   CORE_ADDR addr;\n@@ -1074,7 +1073,8 @@ rust_range (struct expression *exp, int *pos, enum noside noside)\n   struct type *temp_type;\n   const char *name;\n \n-  kind = (enum range_type) longest_to_int (exp->elts[*pos + 1].longconst);\n+  auto kind\n+    = (enum range_flag) longest_to_int (exp->elts[*pos + 1].longconst);\n   *pos += 3;\n \n   if (!(kind & RANGE_LOW_BOUND_DEFAULT))\n@@ -1164,7 +1164,7 @@ rust_range (struct expression *exp, int *pos, enum noside noside)\n static void\n rust_compute_range (struct type *type, struct value *range,\n \t\t    LONGEST *low, LONGEST *high,\n-\t\t    range_types *kind)\n+\t\t    range_flags *kind)\n {\n   int i;\n \n@@ -1204,7 +1204,7 @@ rust_subscript (struct expression *exp, int *pos, enum noside noside,\n   struct type *rhstype;\n   LONGEST low, high_bound;\n   /* Initialized to appease the compiler.  */\n-  range_types kind = RANGE_LOW_BOUND_DEFAULT | RANGE_HIGH_BOUND_DEFAULT;\n+  range_flags kind = RANGE_LOW_BOUND_DEFAULT | RANGE_HIGH_BOUND_DEFAULT;\n   LONGEST high = 0;\n   int want_slice = 0;\n "
    }
  ]
}