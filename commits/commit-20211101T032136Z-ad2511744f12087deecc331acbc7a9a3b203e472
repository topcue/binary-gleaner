{
  "sha": "ad2511744f12087deecc331acbc7a9a3b203e472",
  "node_id": "C_kwDOANOeidoAKGFkMjUxMTc0NGYxMjA4N2RlZWNjMzMxYWNiYzdhOWEzYjIwM2U0NzI",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-01T03:21:36Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-01T03:21:36Z"
    },
    "message": "sim: mn10300: clean up pointer casts\n\nThe void *data field is used to past arbitrary data between event\nhandlers, and these are using it to pass an enum.  Fix up the casts\nto avoid using (long) to cast to/from pointers since there is no\nguarantee that's the right size.",
    "tree": {
      "sha": "5a2a9b46405ab8b044cb8f28e398eac6d7f53c75",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5a2a9b46405ab8b044cb8f28e398eac6d7f53c75"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ad2511744f12087deecc331acbc7a9a3b203e472",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad2511744f12087deecc331acbc7a9a3b203e472",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ad2511744f12087deecc331acbc7a9a3b203e472",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad2511744f12087deecc331acbc7a9a3b203e472/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c704d6e7ee44736aabec017f6ea1790fac668407",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c704d6e7ee44736aabec017f6ea1790fac668407",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c704d6e7ee44736aabec017f6ea1790fac668407"
    }
  ],
  "stats": {
    "total": 18,
    "additions": 9,
    "deletions": 9
  },
  "files": [
    {
      "sha": "d2140e22c196630c434da6341998dbe39789ff2e",
      "filename": "sim/mn10300/dv-mn103ser.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad2511744f12087deecc331acbc7a9a3b203e472/sim/mn10300/dv-mn103ser.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad2511744f12087deecc331acbc7a9a3b203e472/sim/mn10300/dv-mn103ser.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mn10300/dv-mn103ser.c?ref=ad2511744f12087deecc331acbc7a9a3b203e472",
      "patch": "@@ -238,7 +238,7 @@ do_polling_event (struct hw *me,\n {\n   SIM_DESC sd = hw_system (me);\n   struct mn103ser *serial = hw_data(me);\n-  long serial_reg = (long) data;\n+  long serial_reg = (uintptr_t) data;\n   char c;\n   int count, status;\n \n@@ -280,7 +280,7 @@ do_polling_event (struct hw *me,\n   /* Schedule next polling event */\n   serial->device[serial_reg].event\n     = hw_event_queue_schedule (me, 1000,\n-\t\t\t       do_polling_event, (void *)serial_reg);\n+\t\t\t       do_polling_event, (void *)(uintptr_t)serial_reg);\n \n }\n \n@@ -424,7 +424,7 @@ read_status_reg (struct hw *me,\n       serial->device[serial_reg].event\n \t= hw_event_queue_schedule (me, 1000,\n \t\t\t\t   do_polling_event,\n-\t\t\t\t   (void *) (long) serial_reg);\n+\t\t\t\t   (void *)(uintptr_t)serial_reg);\n     }\n \n   if ( nr_bytes == 1 )"
    },
    {
      "sha": "76f87380d1d8bc9f0ae56cf514b549a249390882",
      "filename": "sim/mn10300/dv-mn103tim.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad2511744f12087deecc331acbc7a9a3b203e472/sim/mn10300/dv-mn103tim.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad2511744f12087deecc331acbc7a9a3b203e472/sim/mn10300/dv-mn103tim.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mn10300/dv-mn103tim.c?ref=ad2511744f12087deecc331acbc7a9a3b203e472",
      "patch": "@@ -570,7 +570,7 @@ do_counter_event (struct hw *me,\n \t\t  void *data)\n {\n   struct mn103tim *timers = hw_data(me);\n-  long timer_nr = (long) data;\n+  long timer_nr = (uintptr_t) data;\n   int next_timer;\n \n   /* Check if counting is still enabled. */\n@@ -596,7 +596,7 @@ do_counter_event (struct hw *me,\n       /* FIX: Check if div_ratio has changed and if it's now 0. */\n       timers->timer[timer_nr].event\n \t= hw_event_queue_schedule (me, timers->timer[timer_nr].div_ratio,\n-\t\t\t\t   do_counter_event, (void *)timer_nr);\n+\t\t\t\t   do_counter_event, (void *)(uintptr_t)timer_nr);\n     }\n   else\n     {\n@@ -611,7 +611,7 @@ do_counter6_event (struct hw *me,\n \t\t  void *data)\n {\n   struct mn103tim *timers = hw_data(me);\n-  long timer_nr = (long) data;\n+  long timer_nr = (uintptr_t) data;\n   int next_timer;\n \n   /* Check if counting is still enabled. */\n@@ -625,7 +625,7 @@ do_counter6_event (struct hw *me,\n       /* FIX: Check if div_ratio has changed and if it's now 0. */\n       timers->timer[timer_nr].event\n \t= hw_event_queue_schedule (me, timers->timer[timer_nr].div_ratio,\n-\t\t\t\t   do_counter6_event, (void *)timer_nr);\n+\t\t\t\t   do_counter6_event, (void *)(uintptr_t)timer_nr);\n     }\n   else\n     {\n@@ -808,7 +808,7 @@ write_mode_reg (struct hw *me,\n \t      timers->timer[timer_nr].event\n \t\t= hw_event_queue_schedule(me, div_ratio,\n \t\t\t\t\t  do_counter_event,\n-\t\t\t\t\t  (void *)(timer_nr)); \n+\t\t\t\t\t  (void *)(uintptr_t)timer_nr);\n \t    }\n \t}\n     }\n@@ -908,7 +908,7 @@ write_tm6md (struct hw *me,\n \t  timers->timer[timer_nr].event\n \t    = hw_event_queue_schedule(me, div_ratio,\n \t\t\t\t      do_counter6_event,\n-\t\t\t\t      (void *)(timer_nr)); \n+\t\t\t\t      (void *)(uintptr_t)timer_nr);\n \t}\n     }\n   else"
    }
  ]
}