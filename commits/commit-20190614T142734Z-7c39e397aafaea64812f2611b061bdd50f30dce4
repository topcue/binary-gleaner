{
  "sha": "7c39e397aafaea64812f2611b061bdd50f30dce4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2MzOWUzOTdhYWZhZWE2NDgxMmYyNjExYjA2MWJkZDUwZjMwZGNlNA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-06-13T21:13:28Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-06-14T14:27:34Z"
    },
    "message": "gdb: Use scoped_restore_terminal_state in annotate.c\n\nIn a couple of places in annotate.c we are manually backing up and\nrestoring the terminal ownership, we could instead make use of\nscoped_restore_terminal_state.\n\ngdb/ChangeLog:\n\n\t* annotate.c (annotate_breakpoints_invalid): Make use of\n\tscoped_restore_terminal_state.\n\t(annotate_frames_invalid): Likewise.",
    "tree": {
      "sha": "fc2e03944a4fd0851ed307904316d1a1a93a561e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fc2e03944a4fd0851ed307904316d1a1a93a561e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7c39e397aafaea64812f2611b061bdd50f30dce4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c39e397aafaea64812f2611b061bdd50f30dce4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7c39e397aafaea64812f2611b061bdd50f30dce4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c39e397aafaea64812f2611b061bdd50f30dce4/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f411722cbc18820e5266ec4c2aadd2269eb15447",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f411722cbc18820e5266ec4c2aadd2269eb15447",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f411722cbc18820e5266ec4c2aadd2269eb15447"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 8,
    "deletions": 16
  },
  "files": [
    {
      "sha": "f4f5b54b7f562bca028ed196d7809ee9f281a580",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c39e397aafaea64812f2611b061bdd50f30dce4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c39e397aafaea64812f2611b061bdd50f30dce4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7c39e397aafaea64812f2611b061bdd50f30dce4",
      "patch": "@@ -1,3 +1,9 @@\n+2019-06-14  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* annotate.c (annotate_breakpoints_invalid): Make use of\n+\tscoped_restore_terminal_state.\n+\t(annotate_frames_invalid): Likewise.\n+\n 2019-06-14  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (ada_evaluate_subexp) <case BINOP_ASSIGN>: Always"
    },
    {
      "sha": "84940ff031a7f001f089858406f9adc9f081e249",
      "filename": "gdb/annotate.c",
      "status": "modified",
      "additions": 2,
      "deletions": 16,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c39e397aafaea64812f2611b061bdd50f30dce4/gdb/annotate.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c39e397aafaea64812f2611b061bdd50f30dce4/gdb/annotate.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/annotate.c?ref=7c39e397aafaea64812f2611b061bdd50f30dce4",
      "patch": "@@ -61,17 +61,10 @@ annotate_breakpoints_invalid (void)\n       && (!breakpoints_invalid_emitted\n \t  || current_ui->prompt_state != PROMPT_BLOCKED))\n     {\n-      /* If the inferior owns the terminal (e.g., we're resuming),\n-\t make sure to leave with the inferior still owning it.  */\n-      int was_inferior = target_terminal::is_inferior ();\n-\n+      target_terminal::scoped_restore_terminal_state term_state;\n       target_terminal::ours_for_output ();\n \n       printf_unfiltered ((\"\\n\\032\\032breakpoints-invalid\\n\"));\n-\n-      if (was_inferior)\n-\ttarget_terminal::inferior ();\n-\n       breakpoints_invalid_emitted = 1;\n     }\n }\n@@ -208,17 +201,10 @@ annotate_frames_invalid (void)\n       && (!frames_invalid_emitted\n \t  || current_ui->prompt_state != PROMPT_BLOCKED))\n     {\n-      /* If the inferior owns the terminal (e.g., we're resuming),\n-\t make sure to leave with the inferior still owning it.  */\n-      int was_inferior = target_terminal::is_inferior ();\n-\n+      target_terminal::scoped_restore_terminal_state term_state;\n       target_terminal::ours_for_output ();\n \n       printf_unfiltered ((\"\\n\\032\\032frames-invalid\\n\"));\n-\n-      if (was_inferior)\n-\ttarget_terminal::inferior ();\n-\n       frames_invalid_emitted = 1;\n     }\n }"
    }
  ]
}