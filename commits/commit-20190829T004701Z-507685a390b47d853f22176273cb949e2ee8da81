{
  "sha": "507685a390b47d853f22176273cb949e2ee8da81",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTA3Njg1YTM5MGI0N2Q4NTNmMjIxNzYyNzNjYjk0OWUyZWU4ZGE4MQ==",
  "commit": {
    "author": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2019-08-29T00:47:01Z"
    },
    "committer": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2019-08-29T00:47:01Z"
    },
    "message": "RISC-V: Fix a gp relaxation reloc overflow error.\n\nThis was broken when I changed how we compute the value for the gp register.\nIt used to be computed inside the sdata section.  Now it is computed at the\nend which makes it an abs section symbol.  There is code that tries to use\nthe alignment of the section that the gp value is in, but this does not work\nif it is in the abs section, as the abs section has alignment of 1 byte.\nThere are people using alternative linker scripts that still define it in the\nsdata section, so the code is still useful.  Thus adding a check to disable\nthis when gp is in the abs section.\n\n\tbfd/\n\t* elfnn-riscv.c (_bfd_riscv_relax_lui): Add check to exclude abs\n\tsection when setting max_alignment.  Update comment.\n\t(_bfd_riscv_relax_pc): Likewise.",
    "tree": {
      "sha": "402b0049cbe7a0fc37e1d63428085d055a1dd341",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/402b0049cbe7a0fc37e1d63428085d055a1dd341"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/507685a390b47d853f22176273cb949e2ee8da81",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/507685a390b47d853f22176273cb949e2ee8da81",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/507685a390b47d853f22176273cb949e2ee8da81",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/507685a390b47d853f22176273cb949e2ee8da81/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "09c721040c2161650fe18caf7fca5b2ffafab665",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/09c721040c2161650fe18caf7fca5b2ffafab665",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/09c721040c2161650fe18caf7fca5b2ffafab665"
    }
  ],
  "stats": {
    "total": 23,
    "additions": 16,
    "deletions": 7
  },
  "files": [
    {
      "sha": "ded28987719aaa2d36a4b36bda91986ffe193e8f",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/507685a390b47d853f22176273cb949e2ee8da81/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/507685a390b47d853f22176273cb949e2ee8da81/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=507685a390b47d853f22176273cb949e2ee8da81",
      "patch": "@@ -1,3 +1,9 @@\n+2019-08-28  Jim Wilson  <jimw@sifive.com>\n+\n+\t* elfnn-riscv.c (_bfd_riscv_relax_lui): Add check to exclude abs\n+\tsection when setting max_alignment.  Update comment.\n+\t(_bfd_riscv_relax_pc): Likewise.\n+\n 2019-08-29  Alan Modra  <amodra@gmail.com>\n \n \tPR 24891"
    },
    {
      "sha": "4729bae09ac9543f912a672513ed56ddca7e028e",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/507685a390b47d853f22176273cb949e2ee8da81/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/507685a390b47d853f22176273cb949e2ee8da81/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=507685a390b47d853f22176273cb949e2ee8da81",
      "patch": "@@ -3533,12 +3533,13 @@ _bfd_riscv_relax_lui (bfd *abfd,\n \n   if (gp)\n     {\n-      /* If gp and the symbol are in the same output section, then\n-\t consider only that section's alignment.  */\n+      /* If gp and the symbol are in the same output section, which is not the\n+\t abs section, then consider only that output section's alignment.  */\n       struct bfd_link_hash_entry *h =\n \tbfd_link_hash_lookup (link_info->hash, RISCV_GP_SYMBOL, FALSE, FALSE,\n \t\t\t      TRUE);\n-      if (h->u.def.section->output_section == sym_sec->output_section)\n+      if (h->u.def.section->output_section == sym_sec->output_section\n+\t  && sym_sec->output_section != bfd_abs_section_ptr)\n \tmax_alignment = (bfd_vma) 1 << sym_sec->output_section->alignment_power;\n     }\n \n@@ -3767,11 +3768,13 @@ _bfd_riscv_relax_pc  (bfd *abfd ATTRIBUTE_UNUSED,\n \n   if (gp)\n     {\n-      /* If gp and the symbol are in the same output section, then\n-\t consider only that section's alignment.  */\n+      /* If gp and the symbol are in the same output section, which is not the\n+\t abs section, then consider only that output section's alignment.  */\n       struct bfd_link_hash_entry *h =\n-\tbfd_link_hash_lookup (link_info->hash, RISCV_GP_SYMBOL, FALSE, FALSE, TRUE);\n-      if (h->u.def.section->output_section == sym_sec->output_section)\n+\tbfd_link_hash_lookup (link_info->hash, RISCV_GP_SYMBOL, FALSE, FALSE,\n+\t\t\t      TRUE);\n+      if (h->u.def.section->output_section == sym_sec->output_section\n+\t  && sym_sec->output_section != bfd_abs_section_ptr)\n \tmax_alignment = (bfd_vma) 1 << sym_sec->output_section->alignment_power;\n     }\n "
    }
  ]
}