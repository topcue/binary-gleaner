{
  "sha": "25c11acac349bf6e77a233c7604bf8e04b8a1424",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjVjMTFhY2FjMzQ5YmY2ZTc3YTIzM2M3NjA0YmY4ZTA0YjhhMTQyNA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-07T15:33:05Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-07T15:33:05Z"
    },
    "message": "[gdb/symtab] Add symbol with inherited DW_AT_const_value to psymtabs\n\nConsider the test-case added in this patch, with resulting dwarf (related to\nvariable aaa):\n...\n <0><d2>: Abbrev Number: 2 (DW_TAG_partial_unit)\n <1><eb>: Abbrev Number: 4 (DW_TAG_variable)\n    <ec>   DW_AT_name        : aaa\n    <f0>   DW_AT_type        : <0xe4>\n    <f4>   DW_AT_const_value : 1\n <0><10c>: Abbrev Number: 2 (DW_TAG_compile_unit)\n    <10e>   DW_AT_name        : <artificial>\n <1><11b>: Abbrev Number: 3 (DW_TAG_variable)\n    <11c>   DW_AT_abstract_origin: <0xeb>\n...\n\nWhen running the test-case, we see:\n...\n(gdb) p aaa^M\nNo symbol \"aaa\" in current context.^M\n(gdb) FAIL: gdb.dwarf2/imported-unit-abstract-const-value.exp: p aaa\n...\nwhile with target board readnow.exp, we have:\n...\n(gdb) p aaa^M\n$1 = 1^M\n...\n\nThis is due to the fact that there's no aaa symbol in the partial symtabs:\n...\nPartial symtab for source file <artificial>@0x101 (object 0x351cf40)^M\n   ...\nGlobal partial symbols:^M\n    `main', function, 0x4004a7^M\n^M\n...\nwhich is due to the fact that when attempting to add the symbol corresponding\nto DIE 0x11b in add_partial_symbol:\n...\n(gdb) p /x pdi->sect_off\n$4 = 0x11b\n(gdb) p pdi.has_const_value\n$5 = 0\n...\nit seems the DW_AT_const_value was not inherited from DIE 0xeb, and\nconsequently we leave without adding a partial symbol.\n\nFix this by making sure that partial_die_info::has_const_value is inherited\nin partial_die_info::fixup.\n\nBuild and reg-tested on x86_64-linux.\n\nTested test-case with target boards readnow, cc-with-gdb-index and\ncc-with-debug-names.  The \"print aaa\" test fails for cc-with-gdb-index, that's\nPR25791, the test passes when applying the corresponding proposed patch.\n\ngdb/ChangeLog:\n\n2020-04-07  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/25796\n\t* dwarf2/read.c (can_have_DW_AT_const_value_p): New function.\n\t(partial_die_info::fixup): Inherit has_const_value.\n\ngdb/testsuite/ChangeLog:\n\n2020-04-07  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/25796\n\t* gdb.dwarf2/imported-unit-abstract-const-value.exp: New file.",
    "tree": {
      "sha": "554b59b417a08e1b9cb3dcf1f56229eced877553",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/554b59b417a08e1b9cb3dcf1f56229eced877553"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/25c11acac349bf6e77a233c7604bf8e04b8a1424",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25c11acac349bf6e77a233c7604bf8e04b8a1424",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/25c11acac349bf6e77a233c7604bf8e04b8a1424",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25c11acac349bf6e77a233c7604bf8e04b8a1424/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a0543b0b4c9cfa0fe1f1484a0eb895243c04cc21",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a0543b0b4c9cfa0fe1f1484a0eb895243c04cc21",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a0543b0b4c9cfa0fe1f1484a0eb895243c04cc21"
    }
  ],
  "stats": {
    "total": 146,
    "additions": 146,
    "deletions": 0
  },
  "files": [
    {
      "sha": "e24011dbb0900e9a8c54ca386e17b16d72763eac",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25c11acac349bf6e77a233c7604bf8e04b8a1424/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25c11acac349bf6e77a233c7604bf8e04b8a1424/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=25c11acac349bf6e77a233c7604bf8e04b8a1424",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-07  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR symtab/25796\n+\t* dwarf2/read.c (can_have_DW_AT_const_value_p): New function.\n+\t(partial_die_info::fixup): Inherit has_const_value.\n+\n 2020-04-07  Tom de Vries  <tdevries@suse.de>\n \n \t* psymtab.c (maintenance_check_psymtabs): Skip static LOC_BLOCK"
    },
    {
      "sha": "61e288ab83aeede676bbc6e4e8863191b1dd64c1",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25c11acac349bf6e77a233c7604bf8e04b8a1424/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25c11acac349bf6e77a233c7604bf8e04b8a1424/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=25c11acac349bf6e77a233c7604bf8e04b8a1424",
      "patch": "@@ -18259,6 +18259,25 @@ guess_partial_die_structure_name (struct partial_die_info *struct_pdi,\n     }\n }\n \n+/* Return true if a DIE with TAG may have the DW_AT_const_value\n+   attribute.  */\n+\n+static bool\n+can_have_DW_AT_const_value_p (enum dwarf_tag tag)\n+{\n+  switch (tag)\n+    {\n+    case DW_TAG_constant:\n+    case DW_TAG_enumerator:\n+    case DW_TAG_formal_parameter:\n+    case DW_TAG_template_value_param:\n+    case DW_TAG_variable:\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n void\n partial_die_info::fixup (struct dwarf2_cu *cu)\n {\n@@ -18291,6 +18310,24 @@ partial_die_info::fixup (struct dwarf2_cu *cu)\n \t}\n     }\n \n+  if (!has_const_value && has_specification\n+      && can_have_DW_AT_const_value_p (tag))\n+    {\n+      struct partial_die_info *spec_die;\n+\n+      auto res = find_partial_die (spec_offset, spec_is_dwz, cu);\n+      spec_die = res.pdi;\n+      cu = res.cu;\n+\n+      spec_die->fixup (cu);\n+\n+      if (spec_die->has_const_value)\n+\t{\n+\t  /* Copy DW_AT_const_value attribute if it is set.  */\n+\t  has_const_value = spec_die->has_const_value;\n+\t}\n+    }\n+\n   /* Set default names for some unnamed DIEs.  */\n \n   if (name == NULL && tag == DW_TAG_namespace)"
    },
    {
      "sha": "8c2ace4e5383117a2b29e7fb293b68d197d04c76",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25c11acac349bf6e77a233c7604bf8e04b8a1424/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25c11acac349bf6e77a233c7604bf8e04b8a1424/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=25c11acac349bf6e77a233c7604bf8e04b8a1424",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-07  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR symtab/25796\n+\t* gdb.dwarf2/imported-unit-abstract-const-value.exp: New file.\n+\n 2020-04-07  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/check-psymtab.c: New test."
    },
    {
      "sha": "f93dc123885f7f3b7c75f6013f4036ce78f129ae",
      "filename": "gdb/testsuite/gdb.dwarf2/imported-unit-abstract-const-value.exp",
      "status": "added",
      "additions": 98,
      "deletions": 0,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25c11acac349bf6e77a233c7604bf8e04b8a1424/gdb/testsuite/gdb.dwarf2/imported-unit-abstract-const-value.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25c11acac349bf6e77a233c7604bf8e04b8a1424/gdb/testsuite/gdb.dwarf2/imported-unit-abstract-const-value.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/imported-unit-abstract-const-value.exp?ref=25c11acac349bf6e77a233c7604bf8e04b8a1424",
      "patch": "@@ -0,0 +1,98 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test that a concrete var importing an abstract var using\n+# DW_AT_abstract_origin inherits the DW_AT_const_value attribute.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+};\n+\n+standard_testfile main.c .S\n+\n+set executable ${testfile}\n+set asm_file [standard_output_file ${srcfile2}]\n+\n+# We need to know the size of integer type in order\n+# to write some of the debugging info we'd like to generate.\n+if [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] {\n+    return -1\n+}\n+\n+# Create the DWARF.\n+Dwarf::assemble $asm_file {\n+    declare_labels cu_label main_label int_label\n+    declare_labels aaa_label\n+    set int_size [get_sizeof \"int\" 4]\n+\n+    global srcdir subdir srcfile\n+\n+    extern main\n+\n+    set main_range [function_range main ${srcdir}/${subdir}/${srcfile}]\n+    set main_start [lindex $main_range 0]\n+    set main_length [lindex $main_range 1]\n+\n+    cu {} {\n+\tcu_label: partial_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name \"imported_unit.c\"}\n+\t} {\n+\t    int_label: base_type {\n+\t\t{byte_size $int_size sdata}\n+\t\t{encoding @DW_ATE_signed}\n+\t\t{name int}\n+\t    }\n+\n+\t    aaa_label: DW_TAG_variable {\n+\t\t{name aaa}\n+\t\t{type :$int_label}\n+\t\t{const_value 1 DW_FORM_sdata}\n+\t    }\n+\n+\t    main_label: subprogram {\n+\t\t{name main}\n+\t\t{type :$int_label}\n+\t\t{external 1 flag}\n+\t    }\n+\t}\n+    }\n+\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name \"<artificial>\"}\n+\t} {\n+\t    DW_TAG_variable {\n+\t\t{abstract_origin %$aaa_label}\n+\t    }\n+\t    subprogram {\n+\t\t{abstract_origin %$main_label}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc \"$main_start + $main_length\" addr}\n+\t    }\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+gdb_test \"p aaa\" \"= 1\""
    }
  ]
}