{
  "sha": "d3771fe234b74d60cfa553940bce9d047bd38e8d",
  "node_id": "C_kwDOANOeidoAKGQzNzcxZmUyMzRiNzRkNjBjZmE1NTM5NDBiY2U5ZDA0N2JkMzhlOGQ",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-10-22T16:49:19Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-10-29T13:52:31Z"
    },
    "message": "Add gdb.Architecture.integer_type Python function\n\nThis adds a new Python function, gdb.Architecture.integer_type, which\ncan be used to look up an integer type of a given size and\nsigned-ness.  This is useful to avoid dependency on debuginfo when a\nparticular integer type would be useful.\n\nv2 moves this to be a method on gdb.Architecture and addresses other\nreview comments.",
    "tree": {
      "sha": "9ad43197c7905e0f64bf6b77e526e0c34fa3035b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9ad43197c7905e0f64bf6b77e526e0c34fa3035b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d3771fe234b74d60cfa553940bce9d047bd38e8d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3771fe234b74d60cfa553940bce9d047bd38e8d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d3771fe234b74d60cfa553940bce9d047bd38e8d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3771fe234b74d60cfa553940bce9d047bd38e8d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7a72f09da5c62a213952752c9659e7686e1dd4ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a72f09da5c62a213952752c9659e7686e1dd4ab",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7a72f09da5c62a213952752c9659e7686e1dd4ab"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 89,
    "deletions": 0
  },
  "files": [
    {
      "sha": "9e950d2f80d645ea532a920441a140ffacbdb5bf",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3771fe234b74d60cfa553940bce9d047bd38e8d/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3771fe234b74d60cfa553940bce9d047bd38e8d/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=d3771fe234b74d60cfa553940bce9d047bd38e8d",
      "patch": "@@ -49,6 +49,9 @@ maint show internal-warning backtrace\n      containing all of the possible Architecture.name() values.  Each\n      entry is a string.\n \n+  ** New function gdb.Architecture.integer_type(), which returns an\n+     integer type given a size and a signed-ness.\n+\n * New features in the GDB remote stub, GDBserver\n \n   ** GDBserver is now supported on OpenRISC GNU/Linux."
    },
    {
      "sha": "9a768133f4c150f452cf58ca95b0cbf8bd1c46ea",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3771fe234b74d60cfa553940bce9d047bd38e8d/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3771fe234b74d60cfa553940bce9d047bd38e8d/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=d3771fe234b74d60cfa553940bce9d047bd38e8d",
      "patch": "@@ -1125,6 +1125,9 @@ Ordinarily, this function will return an instance of @code{gdb.Type}.\n If the named type cannot be found, it will throw an exception.\n @end defun\n \n+Integer types can be found without looking them up by name.\n+@xref{Architectures In Python}, for the @code{integer_type} method.\n+\n If the type is a structure or class type, or an enum type, the fields\n of that type can be accessed using the Python @dfn{dictionary syntax}.\n For example, if @code{some_type} is a @code{gdb.Type} instance holding\n@@ -5883,6 +5886,21 @@ instruction in bytes.\n @end table\n @end defun\n \n+@findex Architecture.integer_type\n+@defun Architecture.integer_type (size @r{[}, signed@r{]})\n+This function looks up an integer type by its @var{size}, and\n+optionally whether or not it is signed.\n+\n+@var{size} is the size, in bits, of the desired integer type.  Only\n+certain sizes are currently supported: 0, 8, 16, 24, 32, 64, and 128.\n+\n+If @var{signed} is not specified, it defaults to @code{True}.  If\n+@var{signed} is @code{False}, the returned type will be unsigned.\n+\n+If the indicated type cannot be found, this function will throw a\n+@code{ValueError} exception.\n+@end defun\n+\n @anchor{gdbpy_architecture_registers}\n @defun Architecture.registers (@r{[} @var{reggroup} @r{]})\n Return a @code{gdb.RegisterDescriptorIterator} (@pxref{Registers In"
    },
    {
      "sha": "aa9a652ef2652fb733a7bd9f1ec33ae4b727f0f4",
      "filename": "gdb/python/py-arch.c",
      "status": "modified",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3771fe234b74d60cfa553940bce9d047bd38e8d/gdb/python/py-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3771fe234b74d60cfa553940bce9d047bd38e8d/gdb/python/py-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-arch.c?ref=d3771fe234b74d60cfa553940bce9d047bd38e8d",
      "patch": "@@ -271,6 +271,55 @@ archpy_register_groups (PyObject *self, PyObject *args)\n   return gdbpy_new_reggroup_iterator (gdbarch);\n }\n \n+/* Implementation of gdb.integer_type.  */\n+static PyObject *\n+archpy_integer_type (PyObject *self, PyObject *args, PyObject *kw)\n+{\n+  static const char *keywords[] = { \"size\", \"signed\", NULL };\n+  int size, is_signed = 1;\n+\n+  if (!gdb_PyArg_ParseTupleAndKeywords (args, kw, \"i|p\", keywords,\n+\t\t\t\t\t&size, &is_signed))\n+    return nullptr;\n+\n+  struct gdbarch *gdbarch;\n+  ARCHPY_REQUIRE_VALID (self, gdbarch);\n+\n+  const struct builtin_type *builtins = builtin_type (gdbarch);\n+  struct type *type = nullptr;\n+  switch (size)\n+    {\n+    case 0:\n+      type = builtins->builtin_int0;\n+      break;\n+    case 8:\n+      type = is_signed ? builtins->builtin_int8 : builtins->builtin_uint8;\n+      break;\n+    case 16:\n+      type = is_signed ? builtins->builtin_int16 : builtins->builtin_uint16;\n+      break;\n+    case 24:\n+      type = is_signed ? builtins->builtin_int24 : builtins->builtin_uint24;\n+      break;\n+    case 32:\n+      type = is_signed ? builtins->builtin_int32 : builtins->builtin_uint32;\n+      break;\n+    case 64:\n+      type = is_signed ? builtins->builtin_int64 : builtins->builtin_uint64;\n+      break;\n+    case 128:\n+      type = is_signed ? builtins->builtin_int128 : builtins->builtin_uint128;\n+      break;\n+\n+    default:\n+      PyErr_SetString (PyExc_ValueError,\n+\t\t       _(\"no integer type of that size is available\"));\n+      return nullptr;\n+    }\n+\n+  return type_to_type_object (type);\n+}\n+\n /* Implementation of gdb.architecture_names().  Return a list of all the\n    BFD architecture names that GDB understands.  */\n \n@@ -323,6 +372,11 @@ Return the name of the architecture as a string value.\" },\n     \"disassemble (start_pc [, end_pc [, count]]) -> List.\\n\\\n Return a list of at most COUNT disassembled instructions from START_PC to\\n\\\n END_PC.\" },\n+  { \"integer_type\", (PyCFunction) archpy_integer_type,\n+    METH_VARARGS | METH_KEYWORDS,\n+    \"integer_type (size [, signed]) -> type\\n\\\n+Return an integer Type corresponding to the given bitsize and signed-ness.\\n\\\n+If not specified, the type defaults to signed.\" },\n   { \"registers\", (PyCFunction) archpy_registers,\n     METH_VARARGS | METH_KEYWORDS,\n     \"registers ([ group-name ]) -> Iterator.\\n\\"
    },
    {
      "sha": "f3bf01d28284414c4af0bc124e17a9080cfdd9e9",
      "filename": "gdb/testsuite/gdb.python/py-arch.exp",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3771fe234b74d60cfa553940bce9d047bd38e8d/gdb/testsuite/gdb.python/py-arch.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3771fe234b74d60cfa553940bce9d047bd38e8d/gdb/testsuite/gdb.python/py-arch.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-arch.exp?ref=d3771fe234b74d60cfa553940bce9d047bd38e8d",
      "patch": "@@ -63,6 +63,20 @@ if { ![is_address_zero_readable] } {\n \t\"test bad memory access\"\n }\n \n+foreach size {0 1 2 3 4 8 16} {\n+    foreach sign {\"\" \", True\" \", False\"} {\n+\tset fullsize [expr 8 * $size]\n+\tgdb_test_no_output \"python t = arch.integer_type($fullsize$sign)\" \\\n+\t    \"get integer type for $size$sign\"\n+\tgdb_test \"python print(t.sizeof)\" \"$size\" \\\n+\t    \"print size of integer type for $size$sign\"\n+    }\n+}\n+\n+gdb_test \"python arch.integer_type(95)\" \\\n+    \".*ValueError: no integer type of that size is available.*\" \\\n+    \"call integer_type with invalid size\"\n+\n # Test for gdb.architecture_names().  First we're going to grab the\n # complete list of architecture names using the 'complete' command.\n set arch_names []"
    }
  ]
}