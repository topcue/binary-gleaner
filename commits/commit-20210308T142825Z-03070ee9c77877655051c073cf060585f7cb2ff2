{
  "sha": "03070ee9c77877655051c073cf060585f7cb2ff2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDMwNzBlZTljNzc4Nzc2NTUwNTFjMDczY2YwNjA1ODVmN2NiMmZmMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:25Z"
    },
    "message": "Introduce ada_wrapped_operation\n\nThis adds class ada_wrapped_operation, which is used to wrap some\ngeneric operations with a bit of Ada-specific handling.  This\ncorresponds to the old \"default\" case in ada_evaluate_subexp.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* ada-lang.c (ada_wrapped_operation::evaluate): New method.\n\t* ada-exp.h: New file.",
    "tree": {
      "sha": "bc8dfd2a72ea6b5324ac40ca94a460d93bdfd573",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bc8dfd2a72ea6b5324ac40ca94a460d93bdfd573"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/03070ee9c77877655051c073cf060585f7cb2ff2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03070ee9c77877655051c073cf060585f7cb2ff2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/03070ee9c77877655051c073cf060585f7cb2ff2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03070ee9c77877655051c073cf060585f7cb2ff2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "821e72d77536b201b3e6b801d8f0d9c5b624ec96",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/821e72d77536b201b3e6b801d8f0d9c5b624ec96",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/821e72d77536b201b3e6b801d8f0d9c5b624ec96"
    }
  ],
  "stats": {
    "total": 81,
    "additions": 81,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ff5862ebec04c15fbd974b375b6ab2c9764c355b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03070ee9c77877655051c073cf060585f7cb2ff2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03070ee9c77877655051c073cf060585f7cb2ff2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=03070ee9c77877655051c073cf060585f7cb2ff2",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-lang.c (ada_wrapped_operation::evaluate): New method.\n+\t* ada-exp.h: New file.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class multi_subscript_operation): New."
    },
    {
      "sha": "3f780dc9ff43e7776e3eec9e4e0c8723de57374e",
      "filename": "gdb/ada-exp.h",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03070ee9c77877655051c073cf060585f7cb2ff2/gdb/ada-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03070ee9c77877655051c073cf060585f7cb2ff2/gdb/ada-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.h?ref=03070ee9c77877655051c073cf060585f7cb2ff2",
      "patch": "@@ -0,0 +1,47 @@\n+/* Definitions for Ada expressions\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef ADA_EXP_H\n+#define ADA_EXP_H\n+\n+#include \"expop.h\"\n+\n+namespace expr\n+{\n+\n+/* In Ada, some generic operations must be wrapped with a handler that\n+   handles some Ada-specific type conversions.  */\n+class ada_wrapped_operation\n+  : public tuple_holding_operation<operation_up>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return std::get<0> (m_storage)->opcode (); }\n+};\n+\n+} /* namespace expr */\n+\n+#endif /* ADA_EXP_H */"
    },
    {
      "sha": "4db5823c3e3e88982a1990baee3cbe07bf67cd87",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03070ee9c77877655051c073cf060585f7cb2ff2/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03070ee9c77877655051c073cf060585f7cb2ff2/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=03070ee9c77877655051c073cf060585f7cb2ff2",
      "patch": "@@ -57,6 +57,7 @@\n #include \"gdbsupport/function-view.h\"\n #include \"gdbsupport/byte-vector.h\"\n #include <algorithm>\n+#include \"ada-exp.h\"\n \n /* Define whether or not the C operator '/' truncates towards zero for\n    differently signed operands (truncation direction is undefined in C).\n@@ -10387,6 +10388,34 @@ ada_binop_exp (struct type *expect_type,\n     }\n }\n \n+namespace expr\n+{\n+\n+value *\n+ada_wrapped_operation::evaluate (struct type *expect_type,\n+\t\t\t\t struct expression *exp,\n+\t\t\t\t enum noside noside)\n+{\n+  value *result = std::get<0> (m_storage)->evaluate (expect_type, exp, noside);\n+  if (noside == EVAL_NORMAL)\n+    result = unwrap_value (result);\n+\n+  /* If evaluating an OP_FLOAT and an EXPECT_TYPE was provided,\n+     then we need to perform the conversion manually, because\n+     evaluate_subexp_standard doesn't do it.  This conversion is\n+     necessary in Ada because the different kinds of float/fixed\n+     types in Ada have different representations.\n+\n+     Similarly, we need to perform the conversion from OP_LONG\n+     ourselves.  */\n+  if ((opcode () == OP_FLOAT || opcode () == OP_LONG) && expect_type != NULL)\n+    result = ada_value_cast (expect_type, result);\n+\n+  return result;\n+}\n+\n+}\n+\n /* Implement the evaluate_exp routine in the exp_descriptor structure\n    for the Ada language.  */\n "
    }
  ]
}