{
  "sha": "a442cac5084e97d47223bac61cfc4d168c568ba4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTQ0MmNhYzUwODRlOTdkNDcyMjNiYWM2MWNmYzRkMTY4YzU2OGJhNA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-07T06:49:33Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-07T06:49:33Z"
    },
    "message": "ix86: wrap constants\n\nNon-64-bit code should get handled the same with or without BFD64. This\nwasn't the case though in a number of situations (and quite likely there\nare more that I haven't spotted yet).\n\nIt's not very nice to tie the check in md_apply_fix() to object_64bit,\nbut afaict at that time we have no record anymore of the mode an insn\nwas assembled in (it might also have been data). This doesn't look to be\nthe first inconsistency of this kind, though. In x86_cons() it's even\nless clear what the right approach would be: flag_code shouldn't matter\nfor data emission, but instead we'd need to know from which mode(s) the\ndata actually gets accessed. On this basis, signed_cons() also gets\nadjusted.",
    "tree": {
      "sha": "a4c81ccccf7d2bb5a3582d462dfc063f0585a642",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a4c81ccccf7d2bb5a3582d462dfc063f0585a642"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a442cac5084e97d47223bac61cfc4d168c568ba4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a442cac5084e97d47223bac61cfc4d168c568ba4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a442cac5084e97d47223bac61cfc4d168c568ba4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a442cac5084e97d47223bac61cfc4d168c568ba4/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6bee34a1dc94dcfbf84b6318a731e6b059b39977",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6bee34a1dc94dcfbf84b6318a731e6b059b39977",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6bee34a1dc94dcfbf84b6318a731e6b059b39977"
    }
  ],
  "stats": {
    "total": 171,
    "additions": 165,
    "deletions": 6
  },
  "files": [
    {
      "sha": "b1d65569ce8e9dba7fd1d6cf28ff6b301c7984c3",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=a442cac5084e97d47223bac61cfc4d168c568ba4",
      "patch": "@@ -1,3 +1,12 @@\n+2021-06-07  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (extend_to_32bit_address): New.\n+\t(x86_cons, i386_finalize_immediate, md_apply_fix): Use it.\n+\t(signed_cons): Use object_64bit.\n+\t* testsuite/gas/i386/wrap32.s, testsuite/gas/i386/wrap32-data.d,\n+\ttestsuite/gas/i386/wrap32-text.d: New.\n+\t* testsuite/gas/i386/i386.exp: Run new tests.\n+\n 2021-06-03  Alan Modra  <amodra@gmail.com>\n \n \tPR 1202"
    },
    {
      "sha": "a6bc597a3548c08744dc4544560156d2f8496637",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 28,
      "deletions": 6,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=a442cac5084e97d47223bac61cfc4d168c568ba4",
      "patch": "@@ -2457,6 +2457,19 @@ fits_in_unsigned_long (addressT num ATTRIBUTE_UNUSED)\n #endif\n }\t\t\t\t/* fits_in_unsigned_long() */\n \n+static INLINE valueT extend_to_32bit_address (addressT num)\n+{\n+#ifdef BFD64\n+  if (fits_in_unsigned_long(num))\n+    return (num ^ ((addressT) 1 << 31)) - ((addressT) 1 << 31);\n+\n+  if (!fits_in_signed_long (num))\n+    return num & 0xffffffff;\n+#endif\n+\n+  return num;\n+}\n+\n static INLINE int\n fits_in_disp8 (offsetT num)\n {\n@@ -10457,13 +10470,17 @@ x86_cons (expressionS *exp, int size)\n   if (intel_syntax)\n     i386_intel_simplify (exp);\n \n+  /* If not 64bit, massage value, to account for wraparound when !BFD64.  */\n+  if (size == 4 && exp->X_op == O_constant && !object_64bit)\n+    exp->X_add_number = extend_to_32bit_address (exp->X_add_number);\n+\n   return got_reloc;\n }\n \n static void\n signed_cons (int size)\n {\n-  if (flag_code == CODE_64BIT)\n+  if (object_64bit)\n     cons_sign = 1;\n   cons (size);\n   cons_sign = -1;\n@@ -10718,11 +10735,11 @@ i386_finalize_immediate (segT exp_seg ATTRIBUTE_UNUSED, expressionS *exp,\n     {\n       /* Size it properly later.  */\n       i.types[this_operand].bitfield.imm64 = 1;\n-      /* If not 64bit, sign extend val.  */\n-      if (flag_code != CODE_64BIT\n-\t  && (exp->X_add_number & ~(((addressT) 2 << 31) - 1)) == 0)\n-\texp->X_add_number\n-\t  = (exp->X_add_number ^ ((addressT) 1 << 31)) - ((addressT) 1 << 31);\n+\n+      /* If not 64bit, sign/zero extend val, to account for wraparound\n+\t when !BFD64.  */\n+      if (flag_code != CODE_64BIT)\n+\texp->X_add_number = extend_to_32bit_address (exp->X_add_number);\n     }\n #if (defined (OBJ_AOUT) || defined (OBJ_MAYBE_AOUT))\n   else if (OUTPUT_FLAVOR == bfd_target_aout_flavour\n@@ -12640,6 +12657,11 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n \tbreak;\n       }\n #endif /* defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)  */\n+\n+  /* If not 64bit, massage value, to account for wraparound when !BFD64.  */\n+  if (!object_64bit)\n+    value = extend_to_32bit_address (value);\n+\n   *valP = value;\n #endif /* !defined (TE_Mach)  */\n "
    },
    {
      "sha": "efcccafc0344aa438c7b97662bb55a4acdb81ad8",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=a442cac5084e97d47223bac61cfc4d168c568ba4",
      "patch": "@@ -148,6 +148,8 @@ if [gas_32_check] then {\n     run_dump_test \"addr32\"\n     run_dump_test \"code16\"\n     run_list_test \"oversized16\" \"-al\"\n+    run_dump_test \"wrap32-text\"\n+    run_dump_test \"wrap32-data\"\n     run_dump_test \"sse4_1\"\n     run_dump_test \"sse4_1-intel\"\n     run_dump_test \"sse4_2\""
    },
    {
      "sha": "bebec98933a0fbb5fd1aef3cc18015cf35309c6a",
      "filename": "gas/testsuite/gas/i386/wrap32-data.d",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/testsuite/gas/i386/wrap32-data.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/testsuite/gas/i386/wrap32-data.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/wrap32-data.d?ref=a442cac5084e97d47223bac61cfc4d168c568ba4",
      "patch": "@@ -0,0 +1,23 @@\n+#name: i386 32-bit wrapping calculations (data/ELF)\n+#source: wrap32.s\n+#objdump: -rsj .data\n+\n+.*: +file format .*\n+\n+RELOCATION RECORDS FOR \\[\\.data\\]:\n+\n+OFFSET +TYPE +VALUE *\n+0*10 (R_386_32|dir32) *sym\n+0*14 (R_386_32|dir32) *sym\n+0*18 (R_386_32|dir32) *sym\n+0*1c (R_386_32|dir32) *sym\n+0*30 (R_386_32|dir32) *sym\n+0*34 (R_386_32|dir32) *sym\n+0*38 (R_386_32|dir32) *sym\n+0*3c (R_386_32|dir32) *sym\n+\n+Contents of section .data:\n+ 0+00 f4 ?00 ?00 ?00 f4 ?00 ?00 ?00 90 ?00 ?00 ?00 90 ?00 ?00 ?00 .*\n+ 0+10 00 ?ff ?ff ?ff 00 ?ff ?ff ?ff f4 ?00 ?00 ?00 f4 ?00 ?00 ?00 .*\n+ 0+20 f4 ?02 ?00 ?70 f4 ?00 ?00 ?80 90 ?02 ?00 ?70 90 ?00 ?00 ?80 .*\n+ 0+30 00 ?01 ?00 ?70 00 ?ff ?ff ?7f f4 ?02 ?00 ?70 f4 ?00 ?00 ?80 .*"
    },
    {
      "sha": "3ebbd8582e2063780c0d27e3cf6cd1dca8093c8d",
      "filename": "gas/testsuite/gas/i386/wrap32-text.d",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/testsuite/gas/i386/wrap32-text.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/testsuite/gas/i386/wrap32-text.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/wrap32-text.d?ref=a442cac5084e97d47223bac61cfc4d168c568ba4",
      "patch": "@@ -0,0 +1,43 @@\n+#name: i386 32-bit wrapping calculations (text)\n+#source: wrap32.s\n+#objdump: -dwr\n+\n+.*: +file format .*\n+\n+Disassembly of section .text:\n+\n+0+ <wrap>:\n+[ \t]*[0-9a-f]+:[ \t]+b8 f4 00 00 00       \tmov    \\$0xf4,%eax\n+[ \t]*[0-9a-f]+:[ \t]+ba f4 00 00 00       \tmov    \\$0xf4,%edx\n+[ \t]*[0-9a-f]+:[ \t]+b8 90 00 00 00       \tmov    \\$0x90,%eax\n+[ \t]*[0-9a-f]+:[ \t]+ba 90 00 00 00       \tmov    \\$0x90,%edx\n+[ \t]*[0-9a-f]+:[ \t]+b8 00 ff ff ff       \tmov    \\$0xffffff00,%eax[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+ba 00 ff ff ff       \tmov    \\$0xffffff00,%edx[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+b8 f4 00 00 00       \tmov    \\$0xf4,%eax[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+ba f4 00 00 00       \tmov    \\$0xf4,%edx[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+c7 00 f4 00 00 00    \tmovl   \\$0xf4,\\(%eax\\)\n+[ \t]*[0-9a-f]+:[ \t]+c7 02 f4 00 00 00    \tmovl   \\$0xf4,\\(%edx\\)\n+[ \t]*[0-9a-f]+:[ \t]+c7 00 90 00 00 00    \tmovl   \\$0x90,\\(%eax\\)\n+[ \t]*[0-9a-f]+:[ \t]+c7 02 90 00 00 00    \tmovl   \\$0x90,\\(%edx\\)\n+[ \t]*[0-9a-f]+:[ \t]+c7 00 00 ff ff ff    \tmovl   \\$0xffffff00,\\(%eax\\)[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+c7 02 00 ff ff ff    \tmovl   \\$0xffffff00,\\(%edx\\)[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+c7 00 f4 00 00 00    \tmovl   \\$0xf4,\\(%eax\\)[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+c7 02 f4 00 00 00    \tmovl   \\$0xf4,\\(%edx\\)[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+81 c1 f4 00 00 00    \tadd    \\$0xf4,%ecx\n+[ \t]*[0-9a-f]+:[ \t]+81 c2 f4 00 00 00    \tadd    \\$0xf4,%edx\n+[ \t]*[0-9a-f]+:[ \t]+81 c1 90 00 00 00    \tadd    \\$0x90,%ecx\n+[ \t]*[0-9a-f]+:[ \t]+81 c2 90 00 00 00    \tadd    \\$0x90,%edx\n+[ \t]*[0-9a-f]+:[ \t]+81 c1 00 ff ff ff    \tadd    \\$0xffffff00,%ecx[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+81 c2 00 ff ff ff    \tadd    \\$0xffffff00,%edx[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+81 c1 f4 00 00 00    \tadd    \\$0xf4,%ecx[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+81 c2 f4 00 00 00    \tadd    \\$0xf4,%edx[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+81 00 f4 00 00 00    \taddl   \\$0xf4,\\(%eax\\)\n+[ \t]*[0-9a-f]+:[ \t]+81 02 f4 00 00 00    \taddl   \\$0xf4,\\(%edx\\)\n+[ \t]*[0-9a-f]+:[ \t]+81 00 90 00 00 00    \taddl   \\$0x90,\\(%eax\\)\n+[ \t]*[0-9a-f]+:[ \t]+81 02 90 00 00 00    \taddl   \\$0x90,\\(%edx\\)\n+[ \t]*[0-9a-f]+:[ \t]+81 00 00 ff ff ff    \taddl   \\$0xffffff00,\\(%eax\\)[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+81 02 00 ff ff ff    \taddl   \\$0xffffff00,\\(%edx\\)[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+81 00 f4 00 00 00    \taddl   \\$0xf4,\\(%eax\\)[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+81 02 f4 00 00 00    \taddl   \\$0xf4,\\(%edx\\)[ \t]+[0-9a-f]+: (R_386_32|dir32)[ \t]+sym\n+[ \t]*[0-9a-f]+:[ \t]+c3                   \tret *\n+#pass"
    },
    {
      "sha": "01984846441d0916d0a924abcdc3bd2b201bfe7d",
      "filename": "gas/testsuite/gas/i386/wrap32.s",
      "status": "added",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/testsuite/gas/i386/wrap32.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a442cac5084e97d47223bac61cfc4d168c568ba4/gas/testsuite/gas/i386/wrap32.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/wrap32.s?ref=a442cac5084e97d47223bac61cfc4d168c568ba4",
      "patch": "@@ -0,0 +1,60 @@\n+\t.text\n+wrap:\n+\tmov\t$500 - 0x100, %eax\n+\tmov\t$500 + 0xffffff00, %edx\n+\tmov\t$val - 0x100, %eax\n+\tmov\t$val + 0xffffff00, %edx\n+\tmov\t$sym - 0x100, %eax\n+\tmov\t$sym + 0xffffff00, %edx\n+\tmov\t$sym + 500 - 0x100, %eax\n+\tmov\t$sym + 500 + 0xffffff00, %edx\n+\n+\tmovl\t$500 - 0x100, (%eax)\n+\tmovl\t$500 + 0xffffff00, (%edx)\n+\tmovl\t$val - 0x100, (%eax)\n+\tmovl\t$val + 0xffffff00, (%edx)\n+\tmovl\t$sym - 0x100, (%eax)\n+\tmovl\t$sym + 0xffffff00, (%edx)\n+\tmovl\t$sym + 500 - 0x100, (%eax)\n+\tmovl\t$sym + 500 + 0xffffff00, (%edx)\n+\n+\tadd\t$500 - 0x100, %ecx\n+\tadd\t$500 + 0xffffff00, %edx\n+\tadd\t$val - 0x100, %ecx\n+\tadd\t$val + 0xffffff00, %edx\n+\tadd\t$sym - 0x100, %ecx\n+\tadd\t$sym + 0xffffff00, %edx\n+\tadd\t$sym + 500 - 0x100, %ecx\n+\tadd\t$sym + 500 + 0xffffff00, %edx\n+\n+\taddl\t$500 - 0x100, (%eax)\n+\taddl\t$500 + 0xffffff00, (%edx)\n+\taddl\t$val - 0x100, (%eax)\n+\taddl\t$val + 0xffffff00, (%edx)\n+\taddl\t$sym - 0x100, (%eax)\n+\taddl\t$sym + 0xffffff00, (%edx)\n+\taddl\t$sym + 500 - 0x100, (%eax)\n+\taddl\t$sym + 500 + 0xffffff00, (%edx)\n+\n+\tret\n+\n+\t.data\n+\t.long 500 - 0x100\n+\t.long 500 + 0xffffff00\n+\t.long val - 0x100\n+\t.long val + 0xffffff00\n+\t.long sym - 0x100\n+\t.long sym + 0xffffff00\n+\t.long sym + 500 - 0x100\n+\t.long sym + 500 + 0xffffff00\n+\n+\t.slong 500 - 0x8fffff00\n+\t.slong 500 + 0x7fffff00\n+\t.slong val - 0x8fffff00\n+\t.slong val + 0x7fffff00\n+\t.slong sym - 0x8fffff00\n+\t.slong sym + 0x7fffff00\n+\t.slong sym + 500 - 0x8fffff00\n+\t.slong sym + 500 + 0x7fffff00\n+\n+\t.equ val, 400"
    }
  ]
}