{
  "sha": "a8a566853a0fc7f57159e55436ff6f395e499568",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YThhNTY2ODUzYTBmYzdmNTcxNTllNTU0MzZmZjZmMzk1ZTQ5OTU2OA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-06-18T13:06:04Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-06-18T13:06:04Z"
    },
    "message": "[gdb/testsuite] Move code from gdb_init to default_gdb_init\n\nIf a baseboard file wants to override a proc foo, but also use the original\nproc, it'll have to do something like:\n...\nrename foo save_foo\nproc foo { } {\n    ...\n    set res [save_foo]\n    ...\n    return res\n}\n...\nThis adds a new proc named save_foo, which introduces the risk of clashing with\nan existing proc.\n\nThere's a pattern in the gdb testsuite procs, that facilitates this override:\n...\nproc default_foo { } {\n  ...\n}\n\nproc foo { } {\n    return [default_foo]\n}\n...\nsuch that in a baseboard file we don't need the rename:\n...\nproc foo { } {\n    ...\n    set res [default_foo]\n    ...\n    return res\n}\n...\n\nThe exception to the pattern though is gdb_init, which has a default_gdb_init\ncounterpart, but contains much more code than just the call to\ndefault_gdb_init.\n\nFix this by moving all but the call to default_gdb_init to default_gdb_init.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2020-06-18  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/gdb.exp (gdb_init): Move all but call to default_gdb_init to ...\n\t(default_gdb_init): ... here.",
    "tree": {
      "sha": "eef81586267f11a273d3ed6a97aa27cdf872e4e8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/eef81586267f11a273d3ed6a97aa27cdf872e4e8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a8a566853a0fc7f57159e55436ff6f395e499568",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8a566853a0fc7f57159e55436ff6f395e499568",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a8a566853a0fc7f57159e55436ff6f395e499568",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8a566853a0fc7f57159e55436ff6f395e499568/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d27c357a5b83773054e85ff3ea5dbfe18b9dd3c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d27c357a5b83773054e85ff3ea5dbfe18b9dd3c0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d27c357a5b83773054e85ff3ea5dbfe18b9dd3c0"
    }
  ],
  "stats": {
    "total": 251,
    "additions": 132,
    "deletions": 119
  },
  "files": [
    {
      "sha": "cd324406d75eb451621ebc4cfec8000d3e14cd76",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8a566853a0fc7f57159e55436ff6f395e499568/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8a566853a0fc7f57159e55436ff6f395e499568/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a8a566853a0fc7f57159e55436ff6f395e499568",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-18  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/gdb.exp (gdb_init): Move all but call to default_gdb_init to ...\n+\t(default_gdb_init): ... here.\n+\n 2020-06-17 Sandra Loosemore <sandra@codesourcery.com>\n \n \tFix TUI support checks in gdb.tui tests."
    },
    {
      "sha": "480af7052f7765b222a55bbb3ab3e1c6dc906439",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 127,
      "deletions": 119,
      "changes": 246,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8a566853a0fc7f57159e55436ff6f395e499568/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8a566853a0fc7f57159e55436ff6f395e499568/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=a8a566853a0fc7f57159e55436ff6f395e499568",
      "patch": "@@ -4902,13 +4902,115 @@ proc gdb_continue { function } {\n     return [gdb_test \"continue\" \".*Breakpoint $decimal, $function .*\" \"continue to $function\"]\n }\n \n+# Default implementation of gdb_init.\n proc default_gdb_init { test_file_name } {\n     global gdb_wrapper_initialized\n     global gdb_wrapper_target\n     global gdb_test_file_name\n     global cleanfiles\n     global pf_prefix\n     \n+    # Reset the timeout value to the default.  This way, any testcase\n+    # that changes the timeout value without resetting it cannot affect\n+    # the timeout used in subsequent testcases.\n+    global gdb_test_timeout\n+    global timeout\n+    set timeout $gdb_test_timeout\n+\n+    if { [regexp \".*gdb\\.reverse\\/.*\" $test_file_name]\n+\t && [target_info exists gdb_reverse_timeout] } {\n+\tset timeout [target_info gdb_reverse_timeout]\n+    }\n+\n+    # If GDB_INOTIFY is given, check for writes to '.'.  This is a\n+    # debugging tool to help confirm that the test suite is\n+    # parallel-safe.  You need \"inotifywait\" from the\n+    # inotify-tools package to use this.\n+    global GDB_INOTIFY inotify_pid\n+    if {[info exists GDB_INOTIFY] && ![info exists inotify_pid]} {\n+\tglobal outdir tool inotify_log_file\n+\n+\tset exclusions {outputs temp gdb[.](log|sum) cache}\n+\tset exclusion_re ([join $exclusions |])\n+\n+\tset inotify_log_file [standard_temp_file inotify.out]\n+\tset inotify_pid [exec inotifywait -r -m -e move,create,delete . \\\n+\t\t\t     --exclude $exclusion_re \\\n+\t\t\t     |& tee -a $outdir/$tool.log $inotify_log_file &]\n+\n+\t# Wait for the watches; hopefully this is long enough.\n+\tsleep 2\n+\n+\t# Clear the log so that we don't emit a warning the first time\n+\t# we check it.\n+\tset fd [open $inotify_log_file w]\n+\tclose $fd\n+    }\n+\n+    # Block writes to all banned variables, and invocation of all\n+    # banned procedures...\n+    global banned_variables\n+    global banned_procedures\n+    global banned_traced\n+    if (!$banned_traced) {\n+\tforeach banned_var $banned_variables {\n+            global \"$banned_var\"\n+            trace add variable \"$banned_var\" write error\n+\t}\n+\tforeach banned_proc $banned_procedures {\n+\t    global \"$banned_proc\"\n+\t    trace add execution \"$banned_proc\" enter error\n+\t}\n+\tset banned_traced 1\n+    }\n+\n+    # We set LC_ALL, LC_CTYPE, and LANG to C so that we get the same\n+    # messages as expected.\n+    setenv LC_ALL C\n+    setenv LC_CTYPE C\n+    setenv LANG C\n+\n+    # Don't let a .inputrc file or an existing setting of INPUTRC mess up\n+    # the test results.  Even if /dev/null doesn't exist on the particular\n+    # platform, the readline library will use the default setting just by\n+    # failing to open the file.  OTOH, opening /dev/null successfully will\n+    # also result in the default settings being used since nothing will be\n+    # read from this file.\n+    setenv INPUTRC \"/dev/null\"\n+\n+    # This disables style output, which would interfere with many\n+    # tests.\n+    setenv TERM \"dumb\"\n+\n+    # Ensure that GDBHISTFILE and GDBHISTSIZE are removed from the\n+    # environment, we don't want these modifications to the history\n+    # settings.\n+    unset -nocomplain ::env(GDBHISTFILE)\n+    unset -nocomplain ::env(GDBHISTSIZE)\n+\n+    # Initialize GDB's pty with a fixed size, to make sure we avoid pagination\n+    # during startup.  See \"man expect\" for details about stty_init.\n+    global stty_init\n+    set stty_init \"rows 25 cols 80\"\n+\n+    # Some tests (for example gdb.base/maint.exp) shell out from gdb to use\n+    # grep.  Clear GREP_OPTIONS to make the behavior predictable,\n+    # especially having color output turned on can cause tests to fail.\n+    setenv GREP_OPTIONS \"\"\n+\n+    # Clear $gdbserver_reconnect_p.\n+    global gdbserver_reconnect_p\n+    set gdbserver_reconnect_p 1\n+    unset gdbserver_reconnect_p\n+\n+    # Clear $last_loaded_file\n+    global last_loaded_file\n+    unset -nocomplain last_loaded_file\n+\n+    # Reset GDB number of instances\n+    global gdb_instances\n+    set gdb_instances 0\n+\n     set cleanfiles {}\n \n     gdb_clear_suppressed\n@@ -4942,6 +5044,20 @@ proc default_gdb_init { test_file_name } {\n     if [info exists use_gdb_stub] {\n \tunset use_gdb_stub\n     }\n+\n+    gdb_setup_known_globals\n+\n+    if { [info procs ::gdb_tcl_unknown] != \"\" } {\n+\t# Dejagnu overrides proc unknown.  The dejagnu version may trigger in a\n+\t# test-case but abort the entire test run.  To fix this, we install a\n+\t# local version here, which reverts dejagnu's override, and restore\n+\t# dejagnu's version in gdb_finish.\n+\trename ::unknown ::dejagnu_unknown\n+\tproc unknown { args } {\n+\t    # Use tcl's unknown.\n+\t    return [uplevel 1 ::gdb_tcl_unknown $args]\n+\t}\n+    }\n }\n \n # Return a path using GDB_PARALLEL.\n@@ -5188,127 +5304,19 @@ if { [interp eval $temp \"info procs ::unknown\"] != \"\" } {\n interp delete $temp\n unset temp\n \n-proc gdb_init { test_file_name } {\n-    # Reset the timeout value to the default.  This way, any testcase\n-    # that changes the timeout value without resetting it cannot affect\n-    # the timeout used in subsequent testcases.\n-    global gdb_test_timeout\n-    global timeout\n-    set timeout $gdb_test_timeout\n-\n-    if { [regexp \".*gdb\\.reverse\\/.*\" $test_file_name]\n-\t && [target_info exists gdb_reverse_timeout] } {\n-\tset timeout [target_info gdb_reverse_timeout]\n-    }\n-\n-    # If GDB_INOTIFY is given, check for writes to '.'.  This is a\n-    # debugging tool to help confirm that the test suite is\n-    # parallel-safe.  You need \"inotifywait\" from the\n-    # inotify-tools package to use this.\n-    global GDB_INOTIFY inotify_pid\n-    if {[info exists GDB_INOTIFY] && ![info exists inotify_pid]} {\n-\tglobal outdir tool inotify_log_file\n-\n-\tset exclusions {outputs temp gdb[.](log|sum) cache}\n-\tset exclusion_re ([join $exclusions |])\n-\n-\tset inotify_log_file [standard_temp_file inotify.out]\n-\tset inotify_pid [exec inotifywait -r -m -e move,create,delete . \\\n-\t\t\t     --exclude $exclusion_re \\\n-\t\t\t     |& tee -a $outdir/$tool.log $inotify_log_file &]\n-\n-\t# Wait for the watches; hopefully this is long enough.\n-\tsleep 2\n-\n-\t# Clear the log so that we don't emit a warning the first time\n-\t# we check it.\n-\tset fd [open $inotify_log_file w]\n-\tclose $fd\n-    }\n-\n-    # Block writes to all banned variables, and invocation of all\n-    # banned procedures...\n-    global banned_variables\n-    global banned_procedures\n-    global banned_traced\n-    if (!$banned_traced) {\n-    \tforeach banned_var $banned_variables {\n-            global \"$banned_var\"\n-            trace add variable \"$banned_var\" write error\n-\t}\n-\tforeach banned_proc $banned_procedures {\n-\t    global \"$banned_proc\"\n-\t    trace add execution \"$banned_proc\" enter error\n-\t}\n-\tset banned_traced 1\n-    }\n-\n-    # We set LC_ALL, LC_CTYPE, and LANG to C so that we get the same\n-    # messages as expected.\n-    setenv LC_ALL C\n-    setenv LC_CTYPE C\n-    setenv LANG C\n-\n-    # Don't let a .inputrc file or an existing setting of INPUTRC mess up\n-    # the test results.  Even if /dev/null doesn't exist on the particular\n-    # platform, the readline library will use the default setting just by\n-    # failing to open the file.  OTOH, opening /dev/null successfully will\n-    # also result in the default settings being used since nothing will be\n-    # read from this file.\n-    setenv INPUTRC \"/dev/null\"\n-\n-    # This disables style output, which would interfere with many\n-    # tests.\n-    setenv TERM \"dumb\"\n-\n-    # Ensure that GDBHISTFILE and GDBHISTSIZE are removed from the\n-    # environment, we don't want these modifications to the history\n-    # settings.\n-    unset -nocomplain ::env(GDBHISTFILE)\n-    unset -nocomplain ::env(GDBHISTSIZE)\n-\n-    # Initialize GDB's pty with a fixed size, to make sure we avoid pagination\n-    # during startup.  See \"man expect\" for details about stty_init.\n-    global stty_init\n-    set stty_init \"rows 25 cols 80\"\n-\n-    # Some tests (for example gdb.base/maint.exp) shell out from gdb to use\n-    # grep.  Clear GREP_OPTIONS to make the behavior predictable,\n-    # especially having color output turned on can cause tests to fail.\n-    setenv GREP_OPTIONS \"\"\n-\n-    # Clear $gdbserver_reconnect_p.\n-    global gdbserver_reconnect_p\n-    set gdbserver_reconnect_p 1\n-    unset gdbserver_reconnect_p\n-\n-    # Clear $last_loaded_file\n-    global last_loaded_file\n-    unset -nocomplain last_loaded_file\n-\n-    # Reset GDB number of instances\n-    global gdb_instances\n-    set gdb_instances 0\n-\n-    set res [default_gdb_init $test_file_name]\n-\n-    gdb_setup_known_globals\n-\n-    if { [info procs ::gdb_tcl_unknown] != \"\" } {\n-\t# Dejagnu overrides proc unknown.  The dejagnu version may trigger in a\n-\t# test-case but abort the entire test run.  To fix this, we install a\n-\t# local version here, which reverts dejagnu's override, and restore\n-\t# dejagnu's version in gdb_finish.\n-\trename ::unknown ::dejagnu_unknown\n-\tproc unknown { args } {\n-\t    # Use tcl's unknown.\n-\t    return [uplevel 1 ::gdb_tcl_unknown $args]\n-\t}\n-    }\n-\n-    return $res\n+# GDB implementation of ${tool}_init.  Called right before executing the\n+# test-case.\n+# Overridable function -- you can override this function in your\n+# baseboard file.\n+proc gdb_init { args } {\n+    # A baseboard file overriding this proc and calling the default version\n+    # should behave the same as this proc.  So, don't add code here, but to\n+    # the default version instead.\n+    return [default_gdb_init {*}$args]\n }\n \n+# GDB implementation of ${tool}_finish.  Called right after executing the\n+# test-case.\n proc gdb_finish { } {\n     global gdbserver_reconnect_p\n     global gdb_prompt"
    }
  ]
}