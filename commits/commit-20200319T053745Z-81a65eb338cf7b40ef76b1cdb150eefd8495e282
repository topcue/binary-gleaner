{
  "sha": "81a65eb338cf7b40ef76b1cdb150eefd8495e282",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODFhNjVlYjMzOGNmN2I0MGVmNzZiMWNkYjE1MGVlZmQ4NDk1ZTI4Mg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-19T05:03:03Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-19T05:37:45Z"
    },
    "message": "Don't use bfd.h in binutils/elfcomm.c\n\nBetter than warning about bfd types, just don't include bfd.h and\nwarn against including the header again.\n\n\t* elfcomm.c: Don't include bfd.h or bucomm.h.\n\t(program_name): Declare.\n\t(process_archive_index_and_symbols): Replace bfd_boolean with int,\n\tand substitute FALSE and TRUE.\n\t(setup_archive, setup_nested_archive): Likewise.\n\t* elfcomm.h: Likewise.",
    "tree": {
      "sha": "0d15be0f216b607191bdd1fbd0a43b2952548192",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0d15be0f216b607191bdd1fbd0a43b2952548192"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/81a65eb338cf7b40ef76b1cdb150eefd8495e282",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/81a65eb338cf7b40ef76b1cdb150eefd8495e282",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/81a65eb338cf7b40ef76b1cdb150eefd8495e282",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/81a65eb338cf7b40ef76b1cdb150eefd8495e282/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1cb7d8b1afc7c71cfacfe017e0692c9064bf9818",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cb7d8b1afc7c71cfacfe017e0692c9064bf9818",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1cb7d8b1afc7c71cfacfe017e0692c9064bf9818"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 39,
    "deletions": 31
  },
  "files": [
    {
      "sha": "f340593692305e2e276a47d43c8dea5e4e364749",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81a65eb338cf7b40ef76b1cdb150eefd8495e282/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81a65eb338cf7b40ef76b1cdb150eefd8495e282/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=81a65eb338cf7b40ef76b1cdb150eefd8495e282",
      "patch": "@@ -1,3 +1,12 @@\n+2020-03-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* elfcomm.c: Don't include bfd.h or bucomm.h.\n+\t(program_name): Declare.\n+\t(process_archive_index_and_symbols): Replace bfd_boolean with int,\n+\tand substitute FALSE and TRUE.\n+\t(setup_archive, setup_nested_archive): Likewise.\n+\t* elfcomm.h: Likewise.\n+\n 2020-03-19  Alan Modra  <amodra@gmail.com>\n \n \t* readelf.c (process_archive): Always return via path freeing"
    },
    {
      "sha": "5ec4690e13234b6eeed7ac45e2d32672cb9a21d0",
      "filename": "binutils/elfcomm.c",
      "status": "modified",
      "additions": 27,
      "deletions": 28,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81a65eb338cf7b40ef76b1cdb150eefd8495e282/binutils/elfcomm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81a65eb338cf7b40ef76b1cdb150eefd8495e282/binutils/elfcomm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/elfcomm.c?ref=81a65eb338cf7b40ef76b1cdb150eefd8495e282",
      "patch": "@@ -21,20 +21,19 @@\n    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA\n    02110-1301, USA.  */\n \n-/* Do not use BFD types in this file that differ in size depending on\n-   whether BFD64 is defined.  Functions in this file are used by\n-   readelf.c and elfedit.c which define BFD64, and by objdump.c which\n-   doesn't.  */\n+/* Do not include bfd.h in this file.  Functions in this file are used\n+   by readelf.c and elfedit.c which define BFD64, and by objdump.c\n+   which doesn't.  */\n \n #include \"sysdep.h\"\n #include \"libiberty.h\"\n #include \"filenames.h\"\n-#include \"bfd.h\"\n #include \"aout/ar.h\"\n-#include \"bucomm.h\"\n #include \"elfcomm.h\"\n #include <assert.h>\n \n+extern char *program_name;\n+\n void\n error (const char *message, ...)\n {\n@@ -461,13 +460,13 @@ adjust_relative_path (const char *file_name, const char *name,\n     ARCH->sym_size and ARCH->sym_table.\n    It is the caller's responsibility to free ARCH->index_array and\n     ARCH->sym_table.\n-   Returns TRUE upon success, FALSE otherwise.\n+   Returns 1 upon success, 0 otherwise.\n    If failure occurs an error message is printed.  */\n \n-static bfd_boolean\n-process_archive_index_and_symbols (struct archive_info *  arch,\n-\t\t\t\t   unsigned int           sizeof_ar_index,\n-\t\t\t\t   bfd_boolean            read_symbols)\n+static int\n+process_archive_index_and_symbols (struct archive_info *arch,\n+\t\t\t\t   unsigned int sizeof_ar_index,\n+\t\t\t\t   int read_symbols)\n {\n   size_t got;\n   unsigned long size;\n@@ -482,7 +481,7 @@ process_archive_index_and_symbols (struct archive_info *  arch,\n     {\n       error (_(\"%s: invalid archive header size: %ld\\n\"),\n \t     arch->file_name, size);\n-      return FALSE;\n+      return 0;\n     }\n \n   size = size + (size & 1);\n@@ -495,7 +494,7 @@ process_archive_index_and_symbols (struct archive_info *  arch,\n \t{\n \t  error (_(\"%s: failed to skip archive symbol table\\n\"),\n \t\t arch->file_name);\n-\t  return FALSE;\n+\t  return 0;\n \t}\n     }\n   else\n@@ -513,15 +512,15 @@ process_archive_index_and_symbols (struct archive_info *  arch,\n       if (size < sizeof_ar_index)\n \t{\n \t  error (_(\"%s: the archive index is empty\\n\"), arch->file_name);\n-\t  return FALSE;\n+\t  return 0;\n \t}\n \n       /* Read the number of entries in the archive index.  */\n       got = fread (integer_buffer, 1, sizeof_ar_index, arch->file);\n       if (got != sizeof_ar_index)\n \t{\n \t  error (_(\"%s: failed to read archive index\\n\"), arch->file_name);\n-\t  return FALSE;\n+\t  return 0;\n \t}\n \n       arch->index_num = byte_get_big_endian (integer_buffer, sizeof_ar_index);\n@@ -533,7 +532,7 @@ process_archive_index_and_symbols (struct archive_info *  arch,\n \t{\n \t  error (_(\"%s: the archive index is supposed to have 0x%lx entries of %d bytes, but the size is only 0x%lx\\n\"),\n \t\t arch->file_name, (long) arch->index_num, sizeof_ar_index, size);\n-\t  return FALSE;\n+\t  return 0;\n \t}\n \n       /* Read in the archive index.  */\n@@ -542,15 +541,15 @@ process_archive_index_and_symbols (struct archive_info *  arch,\n       if (index_buffer == NULL)\n \t{\n \t  error (_(\"Out of memory whilst trying to read archive symbol index\\n\"));\n-\t  return FALSE;\n+\t  return 0;\n \t}\n \n       got = fread (index_buffer, sizeof_ar_index, arch->index_num, arch->file);\n       if (got != arch->index_num)\n \t{\n \t  free (index_buffer);\n \t  error (_(\"%s: failed to read archive index\\n\"), arch->file_name);\n-\t  return FALSE;\n+\t  return 0;\n \t}\n \n       size -= arch->index_num * sizeof_ar_index;\n@@ -562,7 +561,7 @@ process_archive_index_and_symbols (struct archive_info *  arch,\n \t{\n \t  free (index_buffer);\n \t  error (_(\"Out of memory whilst trying to convert the archive symbol index\\n\"));\n-\t  return FALSE;\n+\t  return 0;\n \t}\n \n       for (i = 0; i < arch->index_num; i++)\n@@ -576,14 +575,14 @@ process_archive_index_and_symbols (struct archive_info *  arch,\n \t{\n \t  error (_(\"%s: the archive has an index but no symbols\\n\"),\n \t\t arch->file_name);\n-\t  return FALSE;\n+\t  return 0;\n \t}\n \n       arch->sym_table = (char *) malloc (size);\n       if (arch->sym_table == NULL)\n \t{\n \t  error (_(\"Out of memory whilst trying to read archive index symbol table\\n\"));\n-\t  return FALSE;\n+\t  return 0;\n \t}\n \n       arch->sym_size = size;\n@@ -592,7 +591,7 @@ process_archive_index_and_symbols (struct archive_info *  arch,\n \t{\n \t  error (_(\"%s: failed to read archive index symbol table\\n\"),\n \t\t arch->file_name);\n-\t  return FALSE;\n+\t  return 0;\n \t}\n     }\n \n@@ -602,18 +601,18 @@ process_archive_index_and_symbols (struct archive_info *  arch,\n     {\n       error (_(\"%s: failed to read archive header following archive index\\n\"),\n \t     arch->file_name);\n-      return FALSE;\n+      return 0;\n     }\n \n-  return TRUE;\n+  return 1;\n }\n \n /* Read the symbol table and long-name table from an archive.  */\n \n int\n setup_archive (struct archive_info *arch, const char *file_name,\n \t       FILE *file, off_t file_size,\n-\t       bfd_boolean is_thin_archive, bfd_boolean read_symbols)\n+\t       int is_thin_archive, int read_symbols)\n {\n   size_t got;\n \n@@ -627,7 +626,7 @@ setup_archive (struct archive_info *arch, const char *file_name,\n   arch->longnames_size = 0;\n   arch->nested_member_origin = 0;\n   arch->is_thin_archive = is_thin_archive;\n-  arch->uses_64bit_indices = FALSE;\n+  arch->uses_64bit_indices = 0;\n   arch->next_arhdr_offset = SARMAG;\n \n   /* Read the first archive member header.  */\n@@ -654,7 +653,7 @@ setup_archive (struct archive_info *arch, const char *file_name,\n     }\n   else if (const_strneq (arch->arhdr.ar_name, \"/SYM64/         \"))\n     {\n-      arch->uses_64bit_indices = TRUE;\n+      arch->uses_64bit_indices = 1;\n       if (! process_archive_index_and_symbols (arch, 8, read_symbols))\n \treturn 1;\n     }\n@@ -737,7 +736,7 @@ setup_nested_archive (struct archive_info *nested_arch,\n   if (fstat (fileno (member_file), &statbuf) < 0)\n     return 1;\n   return setup_archive (nested_arch, member_file_name, member_file,\n-\t\t\tstatbuf.st_size, FALSE, FALSE);\n+\t\t\tstatbuf.st_size, 0, 0);\n }\n \n /* Release the memory used for the archive information.  */"
    },
    {
      "sha": "abc7611fe3fda882c84495b738c9c6bd4fcd1e39",
      "filename": "binutils/elfcomm.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81a65eb338cf7b40ef76b1cdb150eefd8495e282/binutils/elfcomm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81a65eb338cf7b40ef76b1cdb150eefd8495e282/binutils/elfcomm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/elfcomm.h?ref=81a65eb338cf7b40ef76b1cdb150eefd8495e282",
      "patch": "@@ -64,8 +64,8 @@ struct archive_info\n   unsigned long longnames_size;         /* Size of the long file names table.  */\n   unsigned long nested_member_origin;   /* Origin in the nested archive of the current member.  */\n   unsigned long next_arhdr_offset;      /* Offset of the next archive header.  */\n-  bfd_boolean is_thin_archive;          /* TRUE if this is a thin archive.  */\n-  bfd_boolean uses_64bit_indices;       /* TRUE if the index table uses 64bit entries.  */\n+  int is_thin_archive;                  /* 1 if this is a thin archive.  */\n+  int uses_64bit_indices;               /* 1 if the index table uses 64bit entries.  */\n   struct ar_hdr arhdr;                  /* Current archive header.  */\n };\n \n@@ -74,7 +74,7 @@ extern char *adjust_relative_path (const char *, const char *, unsigned long);\n \n /* Read the symbol table and long-name table from an archive.  */\n extern int setup_archive (struct archive_info *, const char *, FILE *,\n-\t\t\t  off_t, bfd_boolean, bfd_boolean);\n+\t\t\t  off_t, int, int);\n \n /* Open and setup a nested archive, if not already open.  */\n extern int setup_nested_archive (struct archive_info *, const char *);"
    }
  ]
}