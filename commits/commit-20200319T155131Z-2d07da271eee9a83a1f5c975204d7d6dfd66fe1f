{
  "sha": "2d07da271eee9a83a1f5c975204d7d6dfd66fe1f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmQwN2RhMjcxZWVlOWE4M2ExZjVjOTc1MjA0ZDdkNmRmZDY2ZmUxZg==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-03-16T17:09:25Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-03-19T15:51:31Z"
    },
    "message": "[AArch64] When unavailable, fetch VG from ptrace.\n\nI was doing some SVE tests on system QEMU and noticed quite a few failures\nrelated to inferior function calls. Any attempt to do an inferior function\ncall would result in the following:\n\nUnable to set VG register.: Success.\n\nThis happens because, after an inferior function call, GDB attempts to restore\nthe regcache state and updates the SVE register in order. Since the Z registers\nshow up before the VG register, VG is still INVALID by the time the first Z\nregister is being updated. So when executing the following code in\naarch64_sve_set_vq:\n\nif (reg_buf->get_register_status (AARCH64_SVE_VG_REGNUM) != REG_VALID)\n  return false;\n\nBy returning false, we signal something is wrong, then we get to this:\n\n  /* First store vector length to the thread.  This is done first to ensure the\n     ptrace buffers read from the kernel are the correct size.  */\n  if (!aarch64_sve_set_vq (tid, regcache))\n    perror_with_name (_(\"Unable to set VG register.\"));\n\nIdeally we'd always have a valid VG before attempting to set the Z registers,\nbut in this case the ordering of registers doesn't make that possible.\n\nI considered reordering the registers to put VG before the Z registers, like\nthe DWARF numbering, but that would break backwards compatibility with\nexisting implementations. Also, the Z register numbering is pinned to the V\nregisters, and adding VG before Z would create a gap for non-SVE targets,\nsince we wouldn't be able to undefine VG for non-SVE targets.\n\nAs a compromise, it seems we can safely fetch the VG register value from\nptrace. The value in the kernel is likely the updated value anyway.\n\nThis patch fixed all the failures i saw in the testsuite and caused no further\nregressions.\n\ngdb/ChangeLog:\n\n2020-03-19  Luis Machado  <luis.machado@linaro.org>\n\n\t* nat/aarch64-sve-linux-ptrace.c (aarch64_sve_set_vq): If vg is not\n\tvalid, fetch vg value from ptrace.",
    "tree": {
      "sha": "5a521aedc5422af8a7080d72719c64793333bad1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5a521aedc5422af8a7080d72719c64793333bad1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2d07da271eee9a83a1f5c975204d7d6dfd66fe1f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2d07da271eee9a83a1f5c975204d7d6dfd66fe1f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2d07da271eee9a83a1f5c975204d7d6dfd66fe1f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2d07da271eee9a83a1f5c975204d7d6dfd66fe1f/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6a541707f341275fa5081ec36cc6f2551042c21e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a541707f341275fa5081ec36cc6f2551042c21e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6a541707f341275fa5081ec36cc6f2551042c21e"
    }
  ],
  "stats": {
    "total": 26,
    "additions": 23,
    "deletions": 3
  },
  "files": [
    {
      "sha": "5f6b41d7317a7b4713b86dbf5e80ccb136d2985b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2d07da271eee9a83a1f5c975204d7d6dfd66fe1f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2d07da271eee9a83a1f5c975204d7d6dfd66fe1f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2d07da271eee9a83a1f5c975204d7d6dfd66fe1f",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-19  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* nat/aarch64-sve-linux-ptrace.c (aarch64_sve_set_vq): If vg is not\n+\tvalid, fetch vg value from ptrace.\n+\n 2020-03-19  Kamil Rytarowski  <n54@gmx.com>\n \n \t* x86-bsd-nat.c (gdb_ptrace): New."
    },
    {
      "sha": "2ce90ccfd7e3c1e0fbb742508b7ee6fd96524a2b",
      "filename": "gdb/nat/aarch64-sve-linux-ptrace.c",
      "status": "modified",
      "additions": 18,
      "deletions": 3,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2d07da271eee9a83a1f5c975204d7d6dfd66fe1f/gdb/nat/aarch64-sve-linux-ptrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2d07da271eee9a83a1f5c975204d7d6dfd66fe1f/gdb/nat/aarch64-sve-linux-ptrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/aarch64-sve-linux-ptrace.c?ref=2d07da271eee9a83a1f5c975204d7d6dfd66fe1f",
      "patch": "@@ -92,11 +92,26 @@ aarch64_sve_set_vq (int tid, uint64_t vq)\n bool\n aarch64_sve_set_vq (int tid, struct reg_buffer_common *reg_buf)\n {\n+  uint64_t reg_vg = 0;\n+\n+  /* The VG register may not be valid if we've not collected any value yet.\n+     This can happen, for example,  if we're restoring the regcache after an\n+     inferior function call, and the VG register comes after the Z\n+     registers.  */\n   if (reg_buf->get_register_status (AARCH64_SVE_VG_REGNUM) != REG_VALID)\n-    return false;\n+  {\n+    /* If vg is not available yet, fetch it from ptrace.  The VG value from\n+       ptrace is likely the correct one.  */\n+    uint64_t vq = aarch64_sve_get_vq (tid);\n \n-  uint64_t reg_vg = 0;\n-  reg_buf->raw_collect (AARCH64_SVE_VG_REGNUM, &reg_vg);\n+    /* If something went wrong, just bail out.  */\n+    if (vq == 0)\n+      return false;\n+\n+    reg_vg = sve_vg_from_vq (vq);\n+  }\n+  else\n+    reg_buf->raw_collect (AARCH64_SVE_VG_REGNUM, &reg_vg);\n \n   return aarch64_sve_set_vq (tid, sve_vq_from_vg (reg_vg));\n }"
    }
  ]
}