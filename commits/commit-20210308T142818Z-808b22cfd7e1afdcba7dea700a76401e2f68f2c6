{
  "sha": "808b22cfd7e1afdcba7dea700a76401e2f68f2c6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODA4YjIyY2ZkN2UxYWZkY2JhN2RlYTcwMGE3NjQwMWUyZjY4ZjJjNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:18Z"
    },
    "message": "Introduce structop_operation\n\nThis adds class structop_base_operation and structop_operation, which\nimplement STRUCTOP_STRUCT.  The base class exists to unify the\ncompletion code between STRUCTOP_STRUCT and STRUCTOP_PTR.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class structop_base_operation)\n\t(class structop_operation): New.\n\t* eval.c (eval_op_structop_struct): No longer static.",
    "tree": {
      "sha": "0ea409776e9dbef65870525a3cb2ca6a0bbffd72",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0ea409776e9dbef65870525a3cb2ca6a0bbffd72"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/808b22cfd7e1afdcba7dea700a76401e2f68f2c6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/808b22cfd7e1afdcba7dea700a76401e2f68f2c6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/808b22cfd7e1afdcba7dea700a76401e2f68f2c6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/808b22cfd7e1afdcba7dea700a76401e2f68f2c6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8cfd3e95b7624785a47e08b430d49b3d0329a0ee",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8cfd3e95b7624785a47e08b430d49b3d0329a0ee",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8cfd3e95b7624785a47e08b430d49b3d0329a0ee"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 69,
    "deletions": 1
  },
  "files": [
    {
      "sha": "72c3df2b28020be3282d6e896ab94773b5df778d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/808b22cfd7e1afdcba7dea700a76401e2f68f2c6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/808b22cfd7e1afdcba7dea700a76401e2f68f2c6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=808b22cfd7e1afdcba7dea700a76401e2f68f2c6",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class structop_base_operation)\n+\t(class structop_operation): New.\n+\t* eval.c (eval_op_structop_struct): No longer static.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class complex_operation): New."
    },
    {
      "sha": "74aa9703c4904072e130d0b94864cf4092d5a285",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/808b22cfd7e1afdcba7dea700a76401e2f68f2c6/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/808b22cfd7e1afdcba7dea700a76401e2f68f2c6/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=808b22cfd7e1afdcba7dea700a76401e2f68f2c6",
      "patch": "@@ -1342,7 +1342,7 @@ eval_op_ternop (struct type *expect_type, struct expression *exp,\n \n /* A helper function for STRUCTOP_STRUCT.  */\n \n-static struct value *\n+struct value *\n eval_op_structop_struct (struct type *expect_type, struct expression *exp,\n \t\t\t enum noside noside,\n \t\t\t struct value *arg1, const char *string)"
    },
    {
      "sha": "9f1625ca7f70f97cd9e9d1224f8ba9d508b651a2",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/808b22cfd7e1afdcba7dea700a76401e2f68f2c6/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/808b22cfd7e1afdcba7dea700a76401e2f68f2c6/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=808b22cfd7e1afdcba7dea700a76401e2f68f2c6",
      "patch": "@@ -70,6 +70,11 @@ extern struct value *eval_op_ternop (struct type *expect_type,\n \t\t\t\t     enum noside noside,\n \t\t\t\t     struct value *array, struct value *low,\n \t\t\t\t     struct value *upper);\n+extern struct value *eval_op_structop_struct (struct type *expect_type,\n+\t\t\t\t\t      struct expression *exp,\n+\t\t\t\t\t      enum noside noside,\n+\t\t\t\t\t      struct value *arg1,\n+\t\t\t\t\t      const char *string);\n \n namespace expr\n {\n@@ -786,6 +791,63 @@ class complex_operation\n   { return OP_COMPLEX; }\n };\n \n+class structop_base_operation\n+  : public tuple_holding_operation<operation_up, std::string>\n+{\n+public:\n+\n+  /* Used for completion.  Return the field name.  */\n+  const std::string &get_string () const\n+  {\n+    return std::get<1> (m_storage);\n+  }\n+\n+  /* Used for completion.  Evaluate the LHS for type.  */\n+  value *evaluate_lhs (struct expression *exp)\n+  {\n+    return std::get<0> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t      EVAL_AVOID_SIDE_EFFECTS);\n+  }\n+\n+protected:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+};\n+\n+class structop_operation\n+  : public structop_base_operation\n+{\n+public:\n+\n+  using structop_base_operation::structop_base_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *val =std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+    return eval_op_structop_struct (expect_type, exp, noside, val,\n+\t\t\t\t    std::get<1> (m_storage).c_str ());\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return STRUCTOP_STRUCT; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override\n+  {\n+    gen_expr_structop (exp, STRUCTOP_STRUCT,\n+\t\t       std::get<0> (this->m_storage).get (),\n+\t\t       std::get<1> (this->m_storage).c_str (),\n+\t\t       ax, value);\n+  }\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}