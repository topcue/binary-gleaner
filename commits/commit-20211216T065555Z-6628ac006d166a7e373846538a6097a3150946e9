{
  "sha": "6628ac006d166a7e373846538a6097a3150946e9",
  "node_id": "C_kwDOANOeidoAKDY2MjhhYzAwNmQxNjZhN2UzNzM4NDY1MzhhNjA5N2EzMTUwOTQ2ZTk",
  "commit": {
    "author": {
      "name": "Sandra Loosemore",
      "email": "sandra@codesourcery.com",
      "date": "2021-12-15T23:05:41Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-12-16T06:55:55Z"
    },
    "message": "Adjust compare_link_order for unstable qsort\n\nIn a cross toolchain for nios2-elf target and x86_64-w64-mingw32 host\nusing binutils 2.37, we observed a failure that didn't show up on\nx86_64-linux-gnu host:  testcase pr25490-5.s was failing with\n\nC:\\path\\to\\nios2-elf-ld.exe: looping in map_segments\nFAIL: __patchable_function_entries section 5\n\n    \t* ldelfgen.c (compare_link_order): Don't use section id in\n\tsorting.  Keep original ordering instead.  Update comments.",
    "tree": {
      "sha": "8d0083348d233804bbe39811fe6099b88098ab0f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8d0083348d233804bbe39811fe6099b88098ab0f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6628ac006d166a7e373846538a6097a3150946e9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6628ac006d166a7e373846538a6097a3150946e9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6628ac006d166a7e373846538a6097a3150946e9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6628ac006d166a7e373846538a6097a3150946e9/comments",
  "author": null,
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "05f62e0c9a0b14e211c6b2b6234095b50794b20b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05f62e0c9a0b14e211c6b2b6234095b50794b20b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/05f62e0c9a0b14e211c6b2b6234095b50794b20b"
    }
  ],
  "stats": {
    "total": 11,
    "additions": 6,
    "deletions": 5
  },
  "files": [
    {
      "sha": "d86515a4892166d68603d240a3a37d2561ba006d",
      "filename": "ld/ldelfgen.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6628ac006d166a7e373846538a6097a3150946e9/ld/ldelfgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6628ac006d166a7e373846538a6097a3150946e9/ld/ldelfgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelfgen.c?ref=6628ac006d166a7e373846538a6097a3150946e9",
      "patch": "@@ -173,8 +173,9 @@ compare_link_order (const void *a, const void *b)\n \n   if (! bfd_link_relocatable (&link_info))\n     {\n-      /* The only way we should get matching LMAs is when\n-\t the first of the two sections has zero size.  */\n+      /* The only way we should get matching LMAs is when the first of\n+\t the two sections has zero size, or asec and bsec are the\n+\t same section.  */\n       if (asec->size < bsec->size)\n \treturn -1;\n       else if (asec->size > bsec->size)\n@@ -183,16 +184,16 @@ compare_link_order (const void *a, const void *b)\n \n   /* If they are both zero size then they almost certainly have the same\n      VMA and thus are not ordered with respect to each other.  Test VMA\n-     anyway, and fall back to id to make the result reproducible across\n+     anyway, and fall back to idx to make the result reproducible across\n      qsort implementations.  */\n   apos = asec->output_section->vma + asec->output_offset;\n   bpos = bsec->output_section->vma + bsec->output_offset;\n   if (apos < bpos)\n     return -1;\n   else if (apos > bpos)\n     return 1;\n-\n-  return asec->id - bsec->id;\n+  else\n+    return ai->idx - bi->idx;\n }\n \n /* Rearrange sections with SHF_LINK_ORDER into the same order as their"
    }
  ]
}