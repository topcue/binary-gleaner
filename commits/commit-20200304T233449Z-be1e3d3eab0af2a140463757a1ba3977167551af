{
  "sha": "be1e3d3eab0af2a140463757a1ba3977167551af",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmUxZTNkM2VhYjBhZjJhMTQwNDYzNzU3YTFiYTM5NzcxNjc1NTFhZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-04T23:34:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-04T23:34:49Z"
    },
    "message": "Introduce objfile::intern\n\nThis introduces a string cache on the per-BFD object, replacing the\nmacro and filename caches.  Both of these caches just store strings,\nso this consolidation by itself saves a little memory (about the size\nof a bcache per objfile).\n\nThen this patch switches some allocations on the objfile obstack to\nuse this bcache instead.  This saves more space; and turns out to be a\nbit faster as well.\n\nHere are the before and after \"maint time\" + \"maint space\" results of\n\"file ./gdb\":\n\n    Command execution time: 4.664021 (cpu), 4.728518 (wall)\n    Space used: 39190528 (+29212672 for this command)\n\n    Command execution time: 4.216209 (cpu), 4.107023 (wall)\n    Space used: 36667392 (+26689536 for this command)\n\nThe main interface to the string cache is a new pair of overloaded\nmethods, objfile::intern.\n\ngdb/ChangeLog\n2020-03-04  Tom Tromey  <tom@tromey.com>\n\n\t* symmisc.c (print_symbol_bcache_statistics)\n\t(print_objfile_statistics): Update.\n\t* symfile.c (allocate_symtab): Use intern.\n\t* psymtab.c (partial_symtab::partial_symtab): Use intern.\n\t* objfiles.h (struct objfile_per_bfd_storage) <filename_cache,\n\tmacro_cache>: Remove.\n\t<string_cache>: New member.\n\t(struct objfile) <intern>: New methods.\n\t* elfread.c (elf_symtab_read): Use intern.\n\t* dwarf2/read.c (fixup_go_packaging): Intern package name.\n\t(dwarf2_compute_name, dwarf2_physname)\n\t(create_dwo_unit_in_dwp_v1, create_dwo_unit_in_dwp_v2): Intern\n\tnames.\n\t(guess_partial_die_structure_name): Update.\n\t(partial_die_info::fixup): Intern name.\n\t(dwarf2_canonicalize_name): Change parameter to objfile.  Intern\n\tname.\n\t(dwarf2_name): Intern name.  Update.\n\t* buildsym.c (buildsym_compunit::get_macro_table): Use\n\tstring_cache.",
    "tree": {
      "sha": "585dd9c3355bd4af81c0aa4a4439450ed3932a44",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/585dd9c3355bd4af81c0aa4a4439450ed3932a44"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/be1e3d3eab0af2a140463757a1ba3977167551af",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/be1e3d3eab0af2a140463757a1ba3977167551af",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/be1e3d3eab0af2a140463757a1ba3977167551af",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/be1e3d3eab0af2a140463757a1ba3977167551af/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4e7625fde223fd0c98f09f41fe924e7317a82e1a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e7625fde223fd0c98f09f41fe924e7317a82e1a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4e7625fde223fd0c98f09f41fe924e7317a82e1a"
    }
  ],
  "stats": {
    "total": 116,
    "additions": 64,
    "deletions": 52
  },
  "files": [
    {
      "sha": "22e500c1b3cfbec68450bdf38fc22bccfa98bc5b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=be1e3d3eab0af2a140463757a1ba3977167551af",
      "patch": "@@ -1,3 +1,26 @@\n+2020-03-04  Tom Tromey  <tom@tromey.com>\n+\n+\t* symmisc.c (print_symbol_bcache_statistics)\n+\t(print_objfile_statistics): Update.\n+\t* symfile.c (allocate_symtab): Use intern.\n+\t* psymtab.c (partial_symtab::partial_symtab): Use intern.\n+\t* objfiles.h (struct objfile_per_bfd_storage) <filename_cache,\n+\tmacro_cache>: Remove.\n+\t<string_cache>: New member.\n+\t(struct objfile) <intern>: New methods.\n+\t* elfread.c (elf_symtab_read): Use intern.\n+\t* dwarf2/read.c (fixup_go_packaging): Intern package name.\n+\t(dwarf2_compute_name, dwarf2_physname)\n+\t(create_dwo_unit_in_dwp_v1, create_dwo_unit_in_dwp_v2): Intern\n+\tnames.\n+\t(guess_partial_die_structure_name): Update.\n+\t(partial_die_info::fixup): Intern name.\n+\t(dwarf2_canonicalize_name): Change parameter to objfile.  Intern\n+\tname.\n+\t(dwarf2_name): Intern name.  Update.\n+\t* buildsym.c (buildsym_compunit::get_macro_table): Use\n+\tstring_cache.\n+\n 2020-03-04  Tom Tromey  <tom@tromey.com>\n \n \t* jit.c (bfd_open_from_target_memory): Make \"target\" const."
    },
    {
      "sha": "84cb44277a4a4a9984cefcd6386d0fc9218eb4f8",
      "filename": "gdb/buildsym.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/buildsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/buildsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.c?ref=be1e3d3eab0af2a140463757a1ba3977167551af",
      "patch": "@@ -120,7 +120,7 @@ buildsym_compunit::get_macro_table ()\n {\n   if (m_pending_macros == nullptr)\n     m_pending_macros = new_macro_table (&m_objfile->per_bfd->storage_obstack,\n-\t\t\t\t\t&m_objfile->per_bfd->macro_cache,\n+\t\t\t\t\t&m_objfile->per_bfd->string_cache,\n \t\t\t\t\tm_compunit_symtab);\n   return m_pending_macros;\n }"
    },
    {
      "sha": "3556908cf5a48330d94e611c24b9296e2f7a38b5",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 16,
      "deletions": 27,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=be1e3d3eab0af2a140463757a1ba3977167551af",
      "patch": "@@ -1447,7 +1447,7 @@ static const gdb_byte *read_full_die (const struct die_reader_specs *,\n static void process_die (struct die_info *, struct dwarf2_cu *);\n \n static const char *dwarf2_canonicalize_name (const char *, struct dwarf2_cu *,\n-\t\t\t\t\t     struct obstack *);\n+\t\t\t\t\t     struct objfile *);\n \n static const char *dwarf2_name (struct die_info *die, struct dwarf2_cu *);\n \n@@ -9098,8 +9098,7 @@ fixup_go_packaging (struct dwarf2_cu *cu)\n   if (package_name != NULL)\n     {\n       struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-      const char *saved_package_name\n-\t= obstack_strdup (&objfile->per_bfd->storage_obstack, package_name.get ());\n+      const char *saved_package_name = objfile->intern (package_name.get ());\n       struct type *type = init_type (objfile, TYPE_CODE_MODULE, 0,\n \t\t\t\t     saved_package_name);\n       struct symbol *sym;\n@@ -10225,14 +10224,13 @@ dwarf2_compute_name (const char *name,\n \t  if (cu->language == language_cplus)\n \t    canonical_name\n \t      = dwarf2_canonicalize_name (intermediate_name.c_str (), cu,\n-\t\t\t\t\t  &objfile->per_bfd->storage_obstack);\n+\t\t\t\t\t  objfile);\n \n \t  /* If we only computed INTERMEDIATE_NAME, or if\n \t     INTERMEDIATE_NAME is already canonical, then we need to\n-\t     copy it to the appropriate obstack.  */\n+\t     intern it.  */\n \t  if (canonical_name == NULL || canonical_name == intermediate_name.c_str ())\n-\t    name = obstack_strdup (&objfile->per_bfd->storage_obstack,\n-\t\t\t\t   intermediate_name);\n+\t    name = objfile->intern (intermediate_name);\n \t  else\n \t    name = canonical_name;\n \t}\n@@ -10352,7 +10350,7 @@ dwarf2_physname (const char *name, struct die_info *die, struct dwarf2_cu *cu)\n     retval = canon;\n \n   if (need_copy)\n-    retval = obstack_strdup (&objfile->per_bfd->storage_obstack, retval);\n+    retval = objfile->intern (retval);\n \n   return retval;\n }\n@@ -11678,8 +11676,7 @@ create_dwo_unit_in_dwp_v1 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t      virtual_dwo_name.c_str ());\n \t}\n       dwo_file = new struct dwo_file;\n-      dwo_file->dwo_name = obstack_strdup (&objfile->objfile_obstack,\n-\t\t\t\t\t   virtual_dwo_name);\n+      dwo_file->dwo_name = objfile->intern (virtual_dwo_name);\n       dwo_file->comp_dir = comp_dir;\n       dwo_file->sections.abbrev = sections.abbrev;\n       dwo_file->sections.line = sections.line;\n@@ -11874,8 +11871,7 @@ create_dwo_unit_in_dwp_v2 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t      virtual_dwo_name.c_str ());\n \t}\n       dwo_file = new struct dwo_file;\n-      dwo_file->dwo_name = obstack_strdup (&objfile->objfile_obstack,\n-\t\t\t\t\t   virtual_dwo_name);\n+      dwo_file->dwo_name = objfile->intern (virtual_dwo_name);\n       dwo_file->comp_dir = comp_dir;\n       dwo_file->sections.abbrev =\n \tcreate_dwp_v2_section (dwarf2_per_objfile, &dwp_file->sections.abbrev,\n@@ -17993,8 +17989,7 @@ partial_die_info::read (const struct die_reader_specs *reader,\n \t\tstruct objfile *objfile = dwarf2_per_objfile->objfile;\n \n \t\tname\n-\t\t  = dwarf2_canonicalize_name (DW_STRING (&attr), cu,\n-\t\t\t\t\t      &objfile->per_bfd->storage_obstack);\n+\t\t  = dwarf2_canonicalize_name (DW_STRING (&attr), cu, objfile);\n \t      }\n \t      break;\n \t    }\n@@ -18319,9 +18314,7 @@ guess_partial_die_structure_name (struct partial_die_info *struct_pdi,\n \t  if (actual_class_name != NULL)\n \t    {\n \t      struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-\t      struct_pdi->name\n-\t\t= obstack_strdup (&objfile->per_bfd->storage_obstack,\n-\t\t\t\t  actual_class_name.get ());\n+\t      struct_pdi->name = objfile->intern (actual_class_name.get ());\n \t    }\n \t  break;\n \t}\n@@ -18401,7 +18394,7 @@ partial_die_info::fixup (struct dwarf2_cu *cu)\n \t    base = demangled.get ();\n \n \t  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-\t  name = obstack_strdup (&objfile->per_bfd->storage_obstack, base);\n+\t  name = objfile->intern (base);\n \t}\n     }\n \n@@ -21714,7 +21707,7 @@ sibling_die (struct die_info *die)\n \n static const char *\n dwarf2_canonicalize_name (const char *name, struct dwarf2_cu *cu,\n-\t\t\t  struct obstack *obstack)\n+\t\t\t  struct objfile *objfile)\n {\n   if (name && cu->language == language_cplus)\n     {\n@@ -21723,7 +21716,7 @@ dwarf2_canonicalize_name (const char *name, struct dwarf2_cu *cu,\n       if (!canon_name.empty ())\n \t{\n \t  if (canon_name != name)\n-\t    name = obstack_strdup (obstack, canon_name);\n+\t    name = objfile->intern (canon_name);\n \t}\n     }\n \n@@ -21797,10 +21790,7 @@ dwarf2_name (struct die_info *die, struct dwarf2_cu *cu)\n \n \t      const char *base;\n \n-\t      /* FIXME: we already did this for the partial symbol... */\n-\t      DW_STRING (attr)\n-\t\t= obstack_strdup (&objfile->per_bfd->storage_obstack,\n-\t\t\t\t  demangled.get ());\n+\t      DW_STRING (attr) = objfile->intern (demangled.get ());\n \t      DW_STRING_IS_CANONICAL (attr) = 1;\n \n \t      /* Strip any leading namespaces/classes, keep only the base name.\n@@ -21820,9 +21810,8 @@ dwarf2_name (struct die_info *die, struct dwarf2_cu *cu)\n \n   if (!DW_STRING_IS_CANONICAL (attr))\n     {\n-      DW_STRING (attr)\n-\t= dwarf2_canonicalize_name (DW_STRING (attr), cu,\n-\t\t\t\t    &objfile->per_bfd->storage_obstack);\n+      DW_STRING (attr) = dwarf2_canonicalize_name (DW_STRING (attr), cu,\n+\t\t\t\t\t\t   objfile);\n       DW_STRING_IS_CANONICAL (attr) = 1;\n     }\n   return DW_STRING (attr);"
    },
    {
      "sha": "42c4e77785f36f5c6aa1ec118dc1e45298a30da5",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=be1e3d3eab0af2a140463757a1ba3977167551af",
      "patch": "@@ -355,11 +355,7 @@ elf_symtab_read (minimal_symbol_reader &reader,\n       if (type == ST_DYNAMIC && !stripped)\n \tcontinue;\n       if (sym->flags & BSF_FILE)\n-\t{\n-\t  filesymname\n-\t    = ((const char *) objfile->per_bfd->filename_cache.insert\n-\t       (sym->name, strlen (sym->name) + 1));\n-\t}\n+\tfilesymname = objfile->intern (sym->name);\n       else if (sym->flags & BSF_SECTION_SYM)\n \tcontinue;\n       else if (sym->flags & (BSF_GLOBAL | BSF_LOCAL | BSF_WEAK"
    },
    {
      "sha": "a568fa4bcdac82cdaf7415755b7ecbca6a3bcbf1",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 18,
      "deletions": 6,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=be1e3d3eab0af2a140463757a1ba3977167551af",
      "patch": "@@ -275,13 +275,9 @@ struct objfile_per_bfd_storage\n \n   auto_obstack storage_obstack;\n \n-  /* Byte cache for file names.  */\n+  /* String cache.  */\n \n-  gdb::bcache filename_cache;\n-\n-  /* Byte cache for macros.  */\n-\n-  gdb::bcache macro_cache;\n+  gdb::bcache string_cache;\n \n   /* The gdbarch associated with the BFD.  Note that this gdbarch is\n      determined solely from BFD information, without looking at target\n@@ -533,6 +529,22 @@ struct objfile\n     return section_offsets[SECT_OFF_DATA (this)];\n   }\n \n+  /* Intern STRING and return the unique copy.  The copy has the same\n+     lifetime as the per-BFD object.  */\n+  const char *intern (const char *str)\n+  {\n+    return (const char *) per_bfd->string_cache.insert (str, strlen (str) + 1);\n+  }\n+\n+  /* Intern STRING and return the unique copy.  The copy has the same\n+     lifetime as the per-BFD object.  */\n+  const char *intern (const std::string &str)\n+  {\n+    return (const char *) per_bfd->string_cache.insert (str.c_str (),\n+\t\t\t\t\t\t\tstr.size () + 1);\n+  }\n+\n+\n   /* The object file's original name as specified by the user,\n      made absolute, and tilde-expanded.  However, it is not canonicalized\n      (i.e., it has not been passed through gdb_realpath)."
    },
    {
      "sha": "69176dbee47b4013095f60e5502d6eb4a974555d",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=be1e3d3eab0af2a140463757a1ba3977167551af",
      "patch": "@@ -1656,9 +1656,7 @@ partial_symtab::partial_symtab (const char *filename_, struct objfile *objfile)\n {\n   objfile->partial_symtabs->install_psymtab (this);\n \n-  filename\n-    = ((const char *) objfile->per_bfd->filename_cache.insert\n-       (filename_, strlen (filename_) + 1));\n+  filename = objfile->intern (filename_);\n \n   if (symtab_create_debug)\n     {"
    },
    {
      "sha": "3b63887ce1bda3e3df08936a9eefe2912af0c26f",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=be1e3d3eab0af2a140463757a1ba3977167551af",
      "patch": "@@ -2783,9 +2783,7 @@ allocate_symtab (struct compunit_symtab *cust, const char *filename)\n   struct symtab *symtab\n     = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct symtab);\n \n-  symtab->filename\n-    = ((const char *) objfile->per_bfd->filename_cache.insert\n-       (filename, strlen (filename) + 1));\n+  symtab->filename = objfile->intern (filename);\n   symtab->fullname = NULL;\n   symtab->language = deduce_language_from_filename (filename);\n "
    },
    {
      "sha": "1d7c3816670b3dfe15c7a448dca952254913b513",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/be1e3d3eab0af2a140463757a1ba3977167551af/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=be1e3d3eab0af2a140463757a1ba3977167551af",
      "patch": "@@ -71,9 +71,7 @@ print_symbol_bcache_statistics (void)\n \t\t\t objfile_name (objfile));\n \tobjfile->partial_symtabs->psymbol_cache.print_statistics\n \t  (\"partial symbol cache\");\n-\tobjfile->per_bfd->macro_cache.print_statistics\n-\t  (\"preprocessor macro cache\");\n-\tobjfile->per_bfd->filename_cache.print_statistics (\"file name cache\");\n+\tobjfile->per_bfd->string_cache.print_statistics (\"string cache\");\n       }\n }\n \n@@ -135,10 +133,8 @@ print_objfile_statistics (void)\n       printf_filtered\n \t(_(\"  Total memory used for psymbol cache: %d\\n\"),\n \t objfile->partial_symtabs->psymbol_cache.memory_used ());\n-      printf_filtered (_(\"  Total memory used for macro cache: %d\\n\"),\n-\t\t       objfile->per_bfd->macro_cache.memory_used ());\n-      printf_filtered (_(\"  Total memory used for file name cache: %d\\n\"),\n-\t\t       objfile->per_bfd->filename_cache.memory_used ());\n+      printf_filtered (_(\"  Total memory used for string cache: %d\\n\"),\n+\t\t       objfile->per_bfd->string_cache.memory_used ());\n     }\n }\n "
    }
  ]
}