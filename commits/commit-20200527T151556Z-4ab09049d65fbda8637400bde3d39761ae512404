{
  "sha": "4ab09049d65fbda8637400bde3d39761ae512404",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGFiMDkwNDlkNjVmYmRhODYzNzQwMGJkZTNkMzk3NjFhZTUxMjQwNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:13:59Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:56Z"
    },
    "message": "Pass dwarf2_cu objects to dwo-related functions, instead of dwarf2_per_cu_data\n\nThis allows removing references to the\ndwarf2_per_cu_data::dwarf2_per_objfile field.\n\nI am not too sure of the code flow here, but ultimately\nopen_and_init_dwo_file calls create_cus_hash_table, and passes it\nper_cu->cu.  create_cus_hash_table requires a dwarf2_cu to pass to\ncutu_reader, as the \"parent_cu\".\n\nThe dwarf2_per_cu_data::cu link is only set when in a certain context.\nIt's not easy to convince myself in which situations it's safe to use\nit.  Instead, if a function is going to use a dwarf2_cu, I think it's\nsimpler if it takes that object directly.  If it needs access to the\ncorresponding dwarf2_per_cu_data object, then it can used the\ndwarf2_cu::per_cu field, which we know is always set.\n\nThis patch adds some references to dwarf2_per_cu_data::cu in the\ncutu_reader context.  In this context, we know this field will be set,\nas it's cutu_reader that is responsible for instantiating the dwarf2_cu\nand assigning the field.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (lookup_dwo_comp_unit): Change\n\tdwarf2_per_cu_data parameter fo dwarf2_cu.\n\t(lookup_dwo_type_unit): Likewise.\n\t(read_cutu_die_from_dwo): Likewise.\n\t(lookup_dwo_unit): Likewise.\n\t(open_and_init_dwo_file): Likewise.\n\t(lookup_dwo_cutu): Likewise.\n\t(lookup_dwo_comp_unit): Likewise.\n\t(lookup_dwo_type_unit): Likewise.\n\t(cutu_reader::init_tu_and_read_dwo_dies): Update.\n\t(cutu_reader::cutu_reader): Update.\n\nChange-Id: I0406a715b0797963bde2bd86237f159cbece5839",
    "tree": {
      "sha": "1804c6345a8267627579e29511848854f479ce41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1804c6345a8267627579e29511848854f479ce41"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4ab09049d65fbda8637400bde3d39761ae512404",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ab09049d65fbda8637400bde3d39761ae512404",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4ab09049d65fbda8637400bde3d39761ae512404",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ab09049d65fbda8637400bde3d39761ae512404/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "47b14e8676aa8a4d91f9e3af02aed3a4be00186a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/47b14e8676aa8a4d91f9e3af02aed3a4be00186a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/47b14e8676aa8a4d91f9e3af02aed3a4be00186a"
    }
  ],
  "stats": {
    "total": 98,
    "additions": 53,
    "deletions": 45
  },
  "files": [
    {
      "sha": "9a0d68b1124c0f8c2fc5c535e8f1e82e88b0e640",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ab09049d65fbda8637400bde3d39761ae512404/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ab09049d65fbda8637400bde3d39761ae512404/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4ab09049d65fbda8637400bde3d39761ae512404",
      "patch": "@@ -1,3 +1,17 @@\n+2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.c (lookup_dwo_comp_unit): Change\n+\tdwarf2_per_cu_data parameter fo dwarf2_cu.\n+\t(lookup_dwo_type_unit): Likewise.\n+\t(read_cutu_die_from_dwo): Likewise.\n+\t(lookup_dwo_unit): Likewise.\n+\t(open_and_init_dwo_file): Likewise.\n+\t(lookup_dwo_cutu): Likewise.\n+\t(lookup_dwo_comp_unit): Likewise.\n+\t(lookup_dwo_type_unit): Likewise.\n+\t(cutu_reader::init_tu_and_read_dwo_dies): Update.\n+\t(cutu_reader::cutu_reader): Update.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.c (process_full_comp_unit): Add dwarf2_per_objfile"
    },
    {
      "sha": "5e3ab374289bc7e61ea2d1fa6c3d438961cf5690",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 39,
      "deletions": 45,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ab09049d65fbda8637400bde3d39761ae512404/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ab09049d65fbda8637400bde3d39761ae512404/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=4ab09049d65fbda8637400bde3d39761ae512404",
      "patch": "@@ -1672,10 +1672,11 @@ static struct dwp_file *get_dwp_file\n   (struct dwarf2_per_objfile *dwarf2_per_objfile);\n \n static struct dwo_unit *lookup_dwo_comp_unit\n-  (struct dwarf2_per_cu_data *, const char *, const char *, ULONGEST);\n+  (dwarf2_cu *cu, const char *dwo_name, const char *comp_dir,\n+   ULONGEST signature);\n \n static struct dwo_unit *lookup_dwo_type_unit\n-  (struct signatured_type *, const char *, const char *);\n+  (dwarf2_cu *cu, const char *dwo_name, const char *comp_dir);\n \n static void queue_and_load_all_dwo_tus (struct dwarf2_per_cu_data *);\n \n@@ -6688,7 +6689,7 @@ init_cu_die_reader (struct die_reader_specs *reader,\n    The result is non-zero if a valid (non-dummy) DIE was found.  */\n \n static int\n-read_cutu_die_from_dwo (struct dwarf2_per_cu_data *this_cu,\n+read_cutu_die_from_dwo (dwarf2_cu *cu,\n \t\t\tstruct dwo_unit *dwo_unit,\n \t\t\tstruct die_info *stub_comp_unit_die,\n \t\t\tconst char *stub_comp_dir,\n@@ -6697,9 +6698,9 @@ read_cutu_die_from_dwo (struct dwarf2_per_cu_data *this_cu,\n \t\t\tstruct die_info **result_comp_unit_die,\n \t\t\tabbrev_table_up *result_dwo_abbrev_table)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile = this_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n+  dwarf2_per_cu_data *per_cu = cu->per_cu;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n-  struct dwarf2_cu *cu = this_cu->cu;\n   bfd *abfd;\n   const gdb_byte *begin_info_ptr, *info_ptr;\n   struct attribute *comp_dir, *stmt_list, *low_pc, *high_pc, *ranges;\n@@ -6728,7 +6729,7 @@ read_cutu_die_from_dwo (struct dwarf2_per_cu_data *this_cu,\n     {\n       /* For TUs in DWO files, the DW_AT_stmt_list attribute lives in the\n \t DWO file.  */\n-      if (! this_cu->is_debug_types)\n+      if (!per_cu->is_debug_types)\n \tstmt_list = dwarf2_attr (stub_comp_unit_die, DW_AT_stmt_list, cu);\n       low_pc = dwarf2_attr (stub_comp_unit_die, DW_AT_low_pc, cu);\n       high_pc = dwarf2_attr (stub_comp_unit_die, DW_AT_high_pc, cu);\n@@ -6761,9 +6762,9 @@ read_cutu_die_from_dwo (struct dwarf2_per_cu_data *this_cu,\n \t\t\t       + to_underlying (dwo_unit->sect_off));\n   dwo_abbrev_section = &dwo_unit->dwo_file->sections.abbrev;\n \n-  if (this_cu->is_debug_types)\n+  if (per_cu->is_debug_types)\n     {\n-      struct signatured_type *sig_type = (struct signatured_type *) this_cu;\n+      signatured_type *sig_type = (struct signatured_type *) per_cu;\n \n       info_ptr = read_and_check_comp_unit_head (dwarf2_per_objfile,\n \t\t\t\t\t\t&cu->header, section,\n@@ -6874,11 +6875,9 @@ lookup_dwo_id (struct dwarf2_cu *cu, struct die_info* comp_unit_die)\n    Returns NULL if the specified DWO unit cannot be found.  */\n \n static struct dwo_unit *\n-lookup_dwo_unit (struct dwarf2_per_cu_data *this_cu,\n-\t\t struct die_info *comp_unit_die,\n-\t\t const char *dwo_name)\n+lookup_dwo_unit (dwarf2_cu *cu, die_info *comp_unit_die, const char *dwo_name)\n {\n-  struct dwarf2_cu *cu = this_cu->cu;\n+  dwarf2_per_cu_data *per_cu = cu->per_cu;\n   struct dwo_unit *dwo_unit;\n   const char *comp_dir;\n \n@@ -6888,24 +6887,18 @@ lookup_dwo_unit (struct dwarf2_per_cu_data *this_cu,\n   dwo_name = dwarf2_dwo_name (comp_unit_die, cu);\n   comp_dir = dwarf2_string_attr (comp_unit_die, DW_AT_comp_dir, cu);\n \n-  if (this_cu->is_debug_types)\n-    {\n-      struct signatured_type *sig_type;\n-\n-      /* Since this_cu is the first member of struct signatured_type,\n-\t we can go from a pointer to one to a pointer to the other.  */\n-      sig_type = (struct signatured_type *) this_cu;\n-      dwo_unit = lookup_dwo_type_unit (sig_type, dwo_name, comp_dir);\n-    }\n+  if (per_cu->is_debug_types)\n+    dwo_unit = lookup_dwo_type_unit (cu, dwo_name, comp_dir);\n   else\n     {\n       gdb::optional<ULONGEST> signature = lookup_dwo_id (cu, comp_unit_die);\n+\n       if (!signature.has_value ())\n \terror (_(\"Dwarf Error: missing dwo_id for dwo_name %s\"\n \t\t \" [in module %s]\"),\n-\t       dwo_name, bfd_get_filename (this_cu->per_bfd->obfd));\n-      dwo_unit = lookup_dwo_comp_unit (this_cu, dwo_name, comp_dir,\n-\t\t\t\t       *signature);\n+\t       dwo_name, bfd_get_filename (per_cu->per_bfd->obfd));\n+\n+      dwo_unit = lookup_dwo_comp_unit (cu, dwo_name, comp_dir, *signature);\n     }\n \n   return dwo_unit;\n@@ -6945,7 +6938,7 @@ cutu_reader::init_tu_and_read_dwo_dies (dwarf2_per_cu_data *this_cu,\n      abbrev table.  When reading DWOs with skeletonless TUs, all the TUs\n      could share abbrev tables.  */\n \n-  if (read_cutu_die_from_dwo (this_cu, sig_type->dwo_unit,\n+  if (read_cutu_die_from_dwo (this_cu->cu, sig_type->dwo_unit,\n \t\t\t      NULL /* stub_comp_unit_die */,\n \t\t\t      sig_type->dwo_unit->dwo_file->comp_dir,\n \t\t\t      this, &info_ptr,\n@@ -7132,10 +7125,10 @@ cutu_reader::cutu_reader (dwarf2_per_cu_data *this_cu,\n \t\t     sect_offset_str (this_cu->sect_off),\n \t\t     bfd_get_filename (abfd));\n \t}\n-      dwo_unit = lookup_dwo_unit (this_cu, comp_unit_die, dwo_name);\n+      dwo_unit = lookup_dwo_unit (cu, comp_unit_die, dwo_name);\n       if (dwo_unit != NULL)\n \t{\n-\t  if (read_cutu_die_from_dwo (this_cu, dwo_unit,\n+\t  if (read_cutu_die_from_dwo (cu, dwo_unit,\n \t\t\t\t      comp_unit_die, NULL,\n \t\t\t\t      this, &info_ptr,\n \t\t\t\t      &dwo_comp_unit_die,\n@@ -12363,10 +12356,10 @@ dwarf2_locate_dwo_sections (bfd *abfd, asection *sectp, void *dwo_sections_ptr)\n    The result is NULL if DWO_NAME can't be found.  */\n \n static struct dwo_file *\n-open_and_init_dwo_file (struct dwarf2_per_cu_data *per_cu,\n-\t\t\tconst char *dwo_name, const char *comp_dir)\n+open_and_init_dwo_file (dwarf2_cu *cu, const char *dwo_name,\n+\t\t\tconst char *comp_dir)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile = per_cu->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n \n   gdb_bfd_ref_ptr dbfd = open_dwo_file (dwarf2_per_objfile, dwo_name, comp_dir);\n   if (dbfd == NULL)\n@@ -12384,7 +12377,7 @@ open_and_init_dwo_file (struct dwarf2_per_cu_data *per_cu,\n   bfd_map_over_sections (dwo_file->dbfd.get (), dwarf2_locate_dwo_sections,\n \t\t\t &dwo_file->sections);\n \n-  create_cus_hash_table (dwarf2_per_objfile, per_cu->cu, *dwo_file,\n+  create_cus_hash_table (dwarf2_per_objfile, cu, *dwo_file,\n \t\t\t dwo_file->sections.info, dwo_file->cus);\n \n   create_debug_types_hash_table (dwarf2_per_objfile, dwo_file.get (),\n@@ -12695,11 +12688,10 @@ get_dwp_file (struct dwarf2_per_objfile *dwarf2_per_objfile)\n    (dwo_id mismatch or couldn't find the DWO/DWP file).  */\n \n static struct dwo_unit *\n-lookup_dwo_cutu (struct dwarf2_per_cu_data *this_unit,\n-\t\t const char *dwo_name, const char *comp_dir,\n+lookup_dwo_cutu (dwarf2_cu *cu, const char *dwo_name, const char *comp_dir,\n \t\t ULONGEST signature, int is_debug_types)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile = this_unit->dwarf2_per_objfile;\n+  struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   const char *kind = is_debug_types ? \"TU\" : \"CU\";\n   void **dwo_file_slot;\n@@ -12745,7 +12737,7 @@ lookup_dwo_cutu (struct dwarf2_per_cu_data *this_unit,\n       if (*dwo_file_slot == NULL)\n \t{\n \t  /* Read in the file and build a table of the CUs/TUs it contains.  */\n-\t  *dwo_file_slot = open_and_init_dwo_file (this_unit, dwo_name, comp_dir);\n+\t  *dwo_file_slot = open_and_init_dwo_file (cu, dwo_name, comp_dir);\n \t}\n       /* NOTE: This will be NULL if unable to open the file.  */\n       dwo_file = (struct dwo_file *) *dwo_file_slot;\n@@ -12810,10 +12802,8 @@ lookup_dwo_cutu (struct dwarf2_per_cu_data *this_unit,\n \n     warning (_(\"Could not find DWO %s %s(%s)%s referenced by %s at offset %s\"\n \t       \" [in module %s]\"),\n-\t     kind, dwo_name, hex_string (signature),\n-\t     dwp_text.c_str (),\n-\t     this_unit->is_debug_types ? \"TU\" : \"CU\",\n-\t     sect_offset_str (this_unit->sect_off), objfile_name (objfile));\n+\t     kind, dwo_name, hex_string (signature), dwp_text.c_str (), kind,\n+\t     sect_offset_str (cu->per_cu->sect_off), objfile_name (objfile));\n   }\n   return NULL;\n }\n@@ -12822,21 +12812,25 @@ lookup_dwo_cutu (struct dwarf2_per_cu_data *this_unit,\n    See lookup_dwo_cutu_unit for details.  */\n \n static struct dwo_unit *\n-lookup_dwo_comp_unit (struct dwarf2_per_cu_data *this_cu,\n-\t\t      const char *dwo_name, const char *comp_dir,\n+lookup_dwo_comp_unit (dwarf2_cu *cu, const char *dwo_name, const char *comp_dir,\n \t\t      ULONGEST signature)\n {\n-  return lookup_dwo_cutu (this_cu, dwo_name, comp_dir, signature, 0);\n+  gdb_assert (!cu->per_cu->is_debug_types);\n+\n+  return lookup_dwo_cutu (cu, dwo_name, comp_dir, signature, 0);\n }\n \n /* Lookup the DWO TU DWO_NAME/SIGNATURE referenced from THIS_TU.\n    See lookup_dwo_cutu_unit for details.  */\n \n static struct dwo_unit *\n-lookup_dwo_type_unit (struct signatured_type *this_tu,\n-\t\t      const char *dwo_name, const char *comp_dir)\n+lookup_dwo_type_unit (dwarf2_cu *cu, const char *dwo_name, const char *comp_dir)\n {\n-  return lookup_dwo_cutu (&this_tu->per_cu, dwo_name, comp_dir, this_tu->signature, 1);\n+  gdb_assert (cu->per_cu->is_debug_types);\n+\n+  signatured_type *sig_type = (signatured_type *) cu->per_cu;\n+\n+  return lookup_dwo_cutu (cu, dwo_name, comp_dir, sig_type->signature, 1);\n }\n \n /* Traversal function for queue_and_load_all_dwo_tus.  */"
    }
  ]
}