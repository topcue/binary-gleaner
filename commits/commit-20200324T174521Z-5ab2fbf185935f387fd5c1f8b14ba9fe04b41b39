{
  "sha": "5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWFiMmZiZjE4NTkzNWYzODdmZDVjMWY4YjE0YmE5ZmUwNGI0MWIzOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-03-24T17:44:58Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-03-24T17:45:21Z"
    },
    "message": "gdb: bool-ify follow_fork\n\nChange parameters and return value of the various follow_fork\nfunctions/methods from int to bool.\n\ngdb/ChangeLog:\n\n\t* fbsd-nat.c (fbsd_nat_target::follow_fork): Change bool to int.\n\t* fbsd-nat.h (class fbsd_nat_target) <follow_fork>: Likewise.\n\t* inf-ptrace.c (inf_ptrace_target::follow_fork): Likewise.\n\t* inf-ptrace.h (struct inf_ptrace_target) <follow_fork>: Likewise.\n\t* infrun.c (follow_fork): Likewise.\n\t(follow_fork_inferior): Likewise.\n\t* linux-nat.c (linux_nat_target::follow_fork): Likewise.\n\t* linux-nat.h (class linux_nat_target): Likewise.\n\t* remote.c (class remote_target) <follow_fork>: Likewise.\n\t(remote_target::follow_fork): Likewise.\n\t* target-delegates.c: Re-generate.\n\t* target.c (default_follow_fork): Likewise.\n\t(target_follow_fork): Likewise.\n\t* target.h (struct target_ops) <follow_fork>: Likewise.\n\t(target_follow_fork): Likewise.",
    "tree": {
      "sha": "75106f1f578d4e7a4d21019d7ae517d1c5d6c5bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/75106f1f578d4e7a4d21019d7ae517d1c5d6c5bb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e11cd7c491e4ec0cdd080c6dd45e62789a893606",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e11cd7c491e4ec0cdd080c6dd45e62789a893606",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e11cd7c491e4ec0cdd080c6dd45e62789a893606"
    }
  ],
  "stats": {
    "total": 117,
    "additions": 64,
    "deletions": 53
  },
  "files": [
    {
      "sha": "ced1b6d43fadfac9dc68a64ad4612fef499e94a7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -1,3 +1,21 @@\n+2020-03-24  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* fbsd-nat.c (fbsd_nat_target::follow_fork): Change bool to int.\n+\t* fbsd-nat.h (class fbsd_nat_target) <follow_fork>: Likewise.\n+\t* inf-ptrace.c (inf_ptrace_target::follow_fork): Likewise.\n+\t* inf-ptrace.h (struct inf_ptrace_target) <follow_fork>: Likewise.\n+\t* infrun.c (follow_fork): Likewise.\n+\t(follow_fork_inferior): Likewise.\n+\t* linux-nat.c (linux_nat_target::follow_fork): Likewise.\n+\t* linux-nat.h (class linux_nat_target): Likewise.\n+\t* remote.c (class remote_target) <follow_fork>: Likewise.\n+\t(remote_target::follow_fork): Likewise.\n+\t* target-delegates.c: Re-generate.\n+\t* target.c (default_follow_fork): Likewise.\n+\t(target_follow_fork): Likewise.\n+\t* target.h (struct target_ops) <follow_fork>: Likewise.\n+\t(target_follow_fork): Likewise.\n+\n 2020-03-24  Tom de Vries  <tdevries@suse.de>\n \n \t* psymtab.c (maintenance_info_psymtabs): Print user field."
    },
    {
      "sha": "1d189a250136525244ea0adfe8071b6500fdcdaf",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -1548,8 +1548,8 @@ fbsd_nat_target::supports_stopped_by_sw_breakpoint ()\n /* Target hook for follow_fork.  On entry and at return inferior_ptid is\n    the ptid of the followed inferior.  */\n \n-int\n-fbsd_nat_target::follow_fork (int follow_child, int detach_fork)\n+bool\n+fbsd_nat_target::follow_fork (bool follow_child, bool detach_fork)\n {\n   if (!follow_child && detach_fork)\n     {\n@@ -1592,7 +1592,7 @@ fbsd_nat_target::follow_fork (int follow_child, int detach_fork)\n #endif\n     }\n \n-  return 0;\n+  return false;\n }\n \n int"
    },
    {
      "sha": "40117177b15bbe4eec7276df7c58b04eed72534a",
      "filename": "gdb/fbsd-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/fbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/fbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.h?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -75,7 +75,7 @@ class fbsd_nat_target : public inf_ptrace_target\n #endif\n \n #ifdef TDP_RFPPWAIT\n-  int follow_fork (int, int) override;\n+  bool follow_fork (bool, bool) override;\n \n   int insert_fork_catchpoint (int) override;\n   int remove_fork_catchpoint (int) override;"
    },
    {
      "sha": "1fa7aa3f73e996024ef9df7c09477fc223b93cc4",
      "filename": "gdb/inf-ptrace.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/inf-ptrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/inf-ptrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-ptrace.c?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -73,8 +73,8 @@ inf_ptrace_target::~inf_ptrace_target ()\n /* Target hook for follow_fork.  On entry and at return inferior_ptid is\n    the ptid of the followed inferior.  */\n \n-int\n-inf_ptrace_target::follow_fork (int follow_child, int detach_fork)\n+bool\n+inf_ptrace_target::follow_fork (bool follow_child, bool detach_fork)\n {\n   if (!follow_child)\n     {\n@@ -88,7 +88,7 @@ inf_ptrace_target::follow_fork (int follow_child, int detach_fork)\n \tperror_with_name ((\"ptrace\"));\n     }\n \n-  return 0;\n+  return false;\n }\n \n int"
    },
    {
      "sha": "05c1277ec4e24789c4a9de772bb2a9e3684c3b95",
      "filename": "gdb/inf-ptrace.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/inf-ptrace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/inf-ptrace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-ptrace.h?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -44,7 +44,7 @@ struct inf_ptrace_target : public inf_child_target\n   void create_inferior (const char *, const std::string &,\n \t\t\tchar **, int) override;\n #ifdef PT_GET_PROCESS_STATE\n-  int follow_fork (int, int) override;\n+  bool follow_fork (bool, bool) override;\n \n   int insert_fork_catchpoint (int) override;\n "
    },
    {
      "sha": "1fb445aa247eee33e03b05f44bfbb07f22ce9256",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 9,
      "deletions": 14,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -73,10 +73,6 @@ static void sig_print_info (enum gdb_signal);\n \n static void sig_print_header (void);\n \n-static int follow_fork (void);\n-\n-static int follow_fork_inferior (int follow_child, int detach_fork);\n-\n static void follow_inferior_reset_breakpoints (void);\n \n static int currently_stepping (struct thread_info *tp);\n@@ -411,8 +407,8 @@ show_follow_fork_mode_string (struct ui_file *file, int from_tty,\n    the fork parent.  At return inferior_ptid is the ptid of the\n    followed inferior.  */\n \n-static int\n-follow_fork_inferior (int follow_child, int detach_fork)\n+static bool\n+follow_fork_inferior (bool follow_child, bool detach_fork)\n {\n   int has_vforked;\n   ptid_t parent_ptid, child_ptid;\n@@ -669,11 +665,11 @@ holding the child stopped.  Try \\\"set detach-on-fork\\\" or \\\n    if the inferior should be resumed; false, if the target for some\n    reason decided it's best not to resume.  */\n \n-static int\n-follow_fork (void)\n+static bool\n+follow_fork ()\n {\n-  int follow_child = (follow_fork_mode_string == follow_fork_mode_child);\n-  int should_resume = 1;\n+  bool follow_child = (follow_fork_mode_string == follow_fork_mode_child);\n+  bool should_resume = true;\n   struct thread_info *tp;\n \n   /* Copy user stepping state to the new inferior thread.  FIXME: the\n@@ -714,7 +710,7 @@ follow_fork (void)\n \t     happened.  */\n \t  thread_info *wait_thread = find_thread_ptid (wait_target, wait_ptid);\n \t  switch_to_thread (wait_thread);\n-\t  should_resume = 0;\n+\t  should_resume = false;\n \t}\n     }\n \n@@ -5428,16 +5424,15 @@ Cannot fill $_exitsignal with the correct signal number.\\n\"));\n \t watchpoints, for example, always appear in the bpstat.  */\n       if (!bpstat_causes_stop (ecs->event_thread->control.stop_bpstat))\n \t{\n-\t  int should_resume;\n-\t  int follow_child\n+\t  bool follow_child\n \t    = (follow_fork_mode_string == follow_fork_mode_child);\n \n \t  ecs->event_thread->suspend.stop_signal = GDB_SIGNAL_0;\n \n \t  process_stratum_target *targ\n \t    = ecs->event_thread->inf->process_target ();\n \n-\t  should_resume = follow_fork ();\n+\t  bool should_resume = follow_fork ();\n \n \t  /* Note that one of these may be an invalid pointer,\n \t     depending on detach_fork.  */"
    },
    {
      "sha": "133b87ca742cf00f3481673a20e8b80f41aaf746",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -440,8 +440,8 @@ typedef std::unique_ptr<struct lwp_info, lwp_deleter> lwp_info_up;\n    ptid of the followed inferior.  At return, inferior_ptid will be\n    unchanged.  */\n \n-int\n-linux_nat_target::follow_fork (int follow_child, int detach_fork)\n+bool\n+linux_nat_target::follow_fork (bool follow_child, bool detach_fork)\n {\n   if (!follow_child)\n     {\n@@ -611,7 +611,7 @@ linux_nat_target::follow_fork (int follow_child, int detach_fork)\n       check_for_thread_db ();\n     }\n \n-  return 0;\n+  return false;\n }\n \n \f"
    },
    {
      "sha": "e224f89120b01e1976281e0f9322a666a2b98044",
      "filename": "gdb/linux-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/linux-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/linux-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.h?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -133,7 +133,7 @@ class linux_nat_target : public inf_ptrace_target\n \n   void post_attach (int) override;\n \n-  int follow_fork (int, int) override;\n+  bool follow_fork (bool, bool) override;\n \n   std::vector<static_tracepoint_marker>\n     static_tracepoint_markers_by_strid (const char *id) override;"
    },
    {
      "sha": "72f1728ecbc4434e1c6e134c8a7a84ac1b2589fb",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -674,7 +674,7 @@ class remote_target : public process_stratum_target\n \n   const struct btrace_config *btrace_conf (const struct btrace_target_info *) override;\n   bool augmented_libraries_svr4_read () override;\n-  int follow_fork (int, int) override;\n+  bool follow_fork (bool, bool) override;\n   void follow_exec (struct inferior *, const char *) override;\n   int insert_fork_catchpoint (int) override;\n   int remove_fork_catchpoint (int) override;\n@@ -5766,8 +5766,8 @@ extended_remote_target::detach (inferior *inf, int from_tty)\n    it is named remote_follow_fork in anticipation of using it for the\n    remote target as well.  */\n \n-int\n-remote_target::follow_fork (int follow_child, int detach_fork)\n+bool\n+remote_target::follow_fork (bool follow_child, bool detach_fork)\n {\n   struct remote_state *rs = get_remote_state ();\n   enum target_waitkind kind = inferior_thread ()->pending_follow.kind;\n@@ -5793,7 +5793,8 @@ remote_target::follow_fork (int follow_child, int detach_fork)\n \t  remote_detach_pid (child_pid);\n \t}\n     }\n-  return 0;\n+\n+  return false;\n }\n \n /* Target follow-exec function for remote targets.  Save EXECD_PATHNAME"
    },
    {
      "sha": "c28af097183d5bd628879e92eb9824354451edd9",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -56,7 +56,7 @@ struct dummy_target : public target_ops\n   int remove_fork_catchpoint (int arg0) override;\n   int insert_vfork_catchpoint (int arg0) override;\n   int remove_vfork_catchpoint (int arg0) override;\n-  int follow_fork (int arg0, int arg1) override;\n+  bool follow_fork (bool arg0, bool arg1) override;\n   int insert_exec_catchpoint (int arg0) override;\n   int remove_exec_catchpoint (int arg0) override;\n   void follow_exec (struct inferior *arg0, const char *arg1) override;\n@@ -225,7 +225,7 @@ struct debug_target : public target_ops\n   int remove_fork_catchpoint (int arg0) override;\n   int insert_vfork_catchpoint (int arg0) override;\n   int remove_vfork_catchpoint (int arg0) override;\n-  int follow_fork (int arg0, int arg1) override;\n+  bool follow_fork (bool arg0, bool arg1) override;\n   int insert_exec_catchpoint (int arg0) override;\n   int remove_exec_catchpoint (int arg0) override;\n   void follow_exec (struct inferior *arg0, const char *arg1) override;\n@@ -1506,30 +1506,30 @@ debug_target::remove_vfork_catchpoint (int arg0)\n   return result;\n }\n \n-int\n-target_ops::follow_fork (int arg0, int arg1)\n+bool\n+target_ops::follow_fork (bool arg0, bool arg1)\n {\n   return this->beneath ()->follow_fork (arg0, arg1);\n }\n \n-int\n-dummy_target::follow_fork (int arg0, int arg1)\n+bool\n+dummy_target::follow_fork (bool arg0, bool arg1)\n {\n   return default_follow_fork (this, arg0, arg1);\n }\n \n-int\n-debug_target::follow_fork (int arg0, int arg1)\n+bool\n+debug_target::follow_fork (bool arg0, bool arg1)\n {\n-  int result;\n+  bool result;\n   fprintf_unfiltered (gdb_stdlog, \"-> %s->follow_fork (...)\\n\", this->beneath ()->shortname ());\n   result = this->beneath ()->follow_fork (arg0, arg1);\n   fprintf_unfiltered (gdb_stdlog, \"<- %s->follow_fork (\", this->beneath ()->shortname ());\n-  target_debug_print_int (arg0);\n+  target_debug_print_bool (arg0);\n   fputs_unfiltered (\", \", gdb_stdlog);\n-  target_debug_print_int (arg1);\n+  target_debug_print_bool (arg1);\n   fputs_unfiltered (\") = \", gdb_stdlog);\n-  target_debug_print_int (result);\n+  target_debug_print_bool (result);\n   fputs_unfiltered (\"\\n\", gdb_stdlog);\n   return result;\n }"
    },
    {
      "sha": "1abd8ffbc74e7090b635f1626b66e43809bc6573",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -66,9 +66,6 @@ static void default_rcmd (struct target_ops *, const char *, struct ui_file *);\n static ptid_t default_get_ada_task_ptid (struct target_ops *self,\n \t\t\t\t\t long lwp, long tid);\n \n-static int default_follow_fork (struct target_ops *self, int follow_child,\n-\t\t\t\tint detach_fork);\n-\n static void default_mourn_inferior (struct target_ops *self);\n \n static int default_search_memory (struct target_ops *ops,\n@@ -2165,9 +2162,9 @@ target_program_signals (gdb::array_view<const unsigned char> program_signals)\n   current_top_target ()->program_signals (program_signals);\n }\n \n-static int\n-default_follow_fork (struct target_ops *self, int follow_child,\n-\t\t     int detach_fork)\n+static bool\n+default_follow_fork (struct target_ops *self, bool follow_child,\n+\t\t     bool detach_fork)\n {\n   /* Some target returned a fork event, but did not know how to follow it.  */\n   internal_error (__FILE__, __LINE__,\n@@ -2177,8 +2174,8 @@ default_follow_fork (struct target_ops *self, int follow_child,\n /* Look through the list of possible targets for a target that can\n    follow forks.  */\n \n-int\n-target_follow_fork (int follow_child, int detach_fork)\n+bool\n+target_follow_fork (bool follow_child, bool detach_fork)\n {\n   return current_top_target ()->follow_fork (follow_child, detach_fork);\n }"
    },
    {
      "sha": "96e7210bfa0c212f2581ecdb2c692e0dec8d2739",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=5ab2fbf185935f387fd5c1f8b14ba9fe04b41b39",
      "patch": "@@ -622,7 +622,7 @@ struct target_ops\n       TARGET_DEFAULT_RETURN (1);\n     virtual int remove_vfork_catchpoint (int)\n       TARGET_DEFAULT_RETURN (1);\n-    virtual int follow_fork (int, int)\n+    virtual bool follow_fork (bool, bool)\n       TARGET_DEFAULT_FUNC (default_follow_fork);\n     virtual int insert_exec_catchpoint (int)\n       TARGET_DEFAULT_RETURN (1);\n@@ -1660,10 +1660,10 @@ extern void target_load (const char *arg, int from_tty);\n    necessary to continue debugging either the parent or child, as\n    requested, and releasing the other.  Information about the fork\n    or vfork event is available via get_last_target_status ().\n-   This function returns 1 if the inferior should not be resumed\n+   This function returns true if the inferior should not be resumed\n    (i.e. there is another event pending).  */\n \n-int target_follow_fork (int follow_child, int detach_fork);\n+bool target_follow_fork (bool follow_child, bool detach_fork);\n \n /* Handle the target-specific bookkeeping required when the inferior\n    makes an exec call.  INF is the exec'd inferior.  */"
    }
  ]
}