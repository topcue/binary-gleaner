{
  "sha": "fd000fb3dfd9c93e332246bf89b700ab9aac7339",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmQwMDBmYjNkZmQ5YzkzZTMzMjI0NmJmODliNzAwYWI5YWFjNzMzOQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:28Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:28Z"
    },
    "message": "gdbserver/linux-low: turn process/thread addition/deletion ops into methods\n\ngdbserver/ChangeLog:\n2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn the 'new_process', 'delete_process', 'new_thread',\n\t'delete_thread', and 'new_fork' linux target ops into methods\n\tof linux_process_target.\n\n\t* linux-low.h (struct linux_target_ops): Remove the ops.\n\t(class linux_process_target) <add_linux_process>\n\t<add_lwp>\n\t<delete_lwp>\n\t<attach_lwp>\n\t<detach_one_lwp>\n\t<check_zombie_leaders>\n\t<filter_exit_event>\n\t<low_new_process>\n\t<low_delete_process>\n\t<low_new_thread>\n\t<low_delete_thread>\n\t<low_new_fork>: Declare.\n\t* linux-low.cc (delete_lwp): Turn into...\n\t(linux_process_target::delete_lwp): ...this.\n\t(linux_process_target::low_delete_thread): Define.\n\t(linux_add_process): Turn into...\n\t(linux_process_target::add_linux_process): ...this.\n\t(linux_process_target::low_new_process): Define.\n\t(linux_process_target::low_delete_process): Define.\n\t(linux_process_target::low_new_fork): Define.\n\t(add_lwp): Turn into...\n\t(linux_process_target::add_lwp): ...this.\n\t(linux_process_target::low_new_thread): Define.\n\t(linux_attach_lwp): Turn into...\n\t(linux_process_target::attach_lwp): ...this.\n\t(linux_detach_one_lwp): Turn into...\n\t(linux_process_target::detach_one_lwp): ...this.\n\t(linux_detach_lwp_callback): Remove and inline...\n\t(linux_process_target::detach): ...here.\n\t(check_zombie_leaders): Turn into...\n\t(linux_process_target::check_zombie_leaders): ...this.\n\t(filter_exit_event): Turn into...\n\t(linux_process_target::filter_exit_event): ...this.\n\n\tUpdate the callers below.\n\n\t(linux_process_target::handle_extended_wait)\n\t(linux_process_target::create_inferior)\n\t(attach_proc_task_lwp_callback)\n\t(linux_process_target::attach)\n\t(linux_process_target::detach)\n\t(linux_process_target::mourn)\n\t* thread-db.cc (attach_thread)\n\n\t* linux-x86-low.cc (class x86_target) <low_new_process>\n\t<low_delete_process>\n\t<low_new_thread>\n\t<low_delete_thread>\n\t<low_new_fork>: Declare.\n\t(x86_linux_new_process): Turn into...\n\t(x86_target::low_new_process): ...this.\n\t(x86_linux_delete_process): Turn into...\n\t(x86_target::low_delete_process): ...this.\n\t(x86_target::low_new_thread): Define.\n\t(x86_target::low_delete_thread): Define.\n\t(x86_linux_new_fork): Turn into...\n\t(x86_target::low_new_fork): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-aarch64-low.cc (class aarch64_target) <low_new_process>\n\t<low_delete_process>\n\t<low_new_thread>\n\t<low_delete_thread>\n\t<low_new_fork>: Declare.\n\t(aarch64_linux_new_process): Turn into...\n\t(aarch64_target::low_new_process): ...this.\n\t(aarch64_linux_delete_process): Turn into...\n\t(aarch64_target::low_delete_process): ...this.\n\t(aarch64_target::low_new_thread): Define.\n\t(aarch64_target::low_delete_thread): Define.\n\t(aarch64_linux_new_fork): Turn into...\n\t(aarch64_target::low_new_fork): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-arm-low.cc (class arm_target) <low_new_process>\n\t<low_delete_process>\n\t<low_new_thread>\n\t<low_delete_thread>\n\t<low_new_fork>: Declare.\n\t(arm_new_process): Turn into...\n\t(arm_target::low_new_process): ...this.\n\t(arm_delete_process): Turn into...\n\t(arm_target::low_delete_process): ...this.\n\t(arm_new_thread): Turn into...\n\t(arm_target::low_new_thread): ...this.\n\t(arm_delete_thread): Turn into...\n\t(arm_target::low_delete_thread): ...this.\n\t(arm_new_fork): Turn into...\n\t(arm_target::low_new_fork): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-mips-low.cc (class mips_target) <low_new_process>\n\t<low_delete_process>\n\t<low_new_thread>\n\t<low_delete_thread>\n\t<low_new_fork>: Declare.\n\t(mips_linux_new_process): Turn into...\n\t(mips_target::low_new_process): ...this.\n\t(mips_linux_delete_process): Turn into...\n\t(mips_target::low_delete_process): ...this.\n\t(mips_linux_new_thread): Turn into...\n\t(mips_target::low_new_thread): ...this.\n\t(mips_linux_delete_thread): Turn into...\n\t(mips_target::low_delete_thread): ...this.\n\t(mips_linux_new_fork): Turn into...\n\t(mips_target::low_new_fork): ...this.\n\t(the_low_target): Remove the op fields.\n\t* linux-bfin-low.cc (the_low_target): Remove the op fields.\n\t* linux-crisv32-low.cc (the_low_target): Ditto.\n\t* linux-m32r-low.cc (the_low_target): Ditto.\n\t* linux-m68k-low.cc (the_low_target): Ditto.\n\t* linux-ppc-low.cc (the_low_target): Ditto.\n\t* linux-s390-low.cc (the_low_target): Ditto.\n\t* linux-sh-low.cc (the_low_target): Ditto.\n\t* linux-tic6x-low.cc (the_low_target): Ditto.\n\t* linux-tile-low.cc (the_low_target): Ditto.\n\t* linux-xtensa-low.cc (the_low_target): Ditto.",
    "tree": {
      "sha": "86076d584691276997703f46f023995d7dce1d0d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/86076d584691276997703f46f023995d7dce1d0d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fd000fb3dfd9c93e332246bf89b700ab9aac7339",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd000fb3dfd9c93e332246bf89b700ab9aac7339",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fd000fb3dfd9c93e332246bf89b700ab9aac7339",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd000fb3dfd9c93e332246bf89b700ab9aac7339/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cb63de7ca804e4178a48dc500423bcb89726d893",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb63de7ca804e4178a48dc500423bcb89726d893",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cb63de7ca804e4178a48dc500423bcb89726d893"
    }
  ],
  "stats": {
    "total": 561,
    "additions": 356,
    "deletions": 205
  },
  "files": [
    {
      "sha": "bb17a062c7bfef2f2b0585746c05def7beec2be7",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 122,
      "deletions": 0,
      "changes": 122,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -1,3 +1,125 @@\n+2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn the 'new_process', 'delete_process', 'new_thread',\n+\t'delete_thread', and 'new_fork' linux target ops into methods\n+\tof linux_process_target.\n+\n+\t* linux-low.h (struct linux_target_ops): Remove the ops.\n+\t(class linux_process_target) <add_linux_process>\n+\t<add_lwp>\n+\t<delete_lwp>\n+\t<attach_lwp>\n+\t<detach_one_lwp>\n+\t<check_zombie_leaders>\n+\t<filter_exit_event>\n+\t<low_new_process>\n+\t<low_delete_process>\n+\t<low_new_thread>\n+\t<low_delete_thread>\n+\t<low_new_fork>: Declare.\n+\t* linux-low.cc (delete_lwp): Turn into...\n+\t(linux_process_target::delete_lwp): ...this.\n+\t(linux_process_target::low_delete_thread): Define.\n+\t(linux_add_process): Turn into...\n+\t(linux_process_target::add_linux_process): ...this.\n+\t(linux_process_target::low_new_process): Define.\n+\t(linux_process_target::low_delete_process): Define.\n+\t(linux_process_target::low_new_fork): Define.\n+\t(add_lwp): Turn into...\n+\t(linux_process_target::add_lwp): ...this.\n+\t(linux_process_target::low_new_thread): Define.\n+\t(linux_attach_lwp): Turn into...\n+\t(linux_process_target::attach_lwp): ...this.\n+\t(linux_detach_one_lwp): Turn into...\n+\t(linux_process_target::detach_one_lwp): ...this.\n+\t(linux_detach_lwp_callback): Remove and inline...\n+\t(linux_process_target::detach): ...here.\n+\t(check_zombie_leaders): Turn into...\n+\t(linux_process_target::check_zombie_leaders): ...this.\n+\t(filter_exit_event): Turn into...\n+\t(linux_process_target::filter_exit_event): ...this.\n+\n+\tUpdate the callers below.\n+\n+\t(linux_process_target::handle_extended_wait)\n+\t(linux_process_target::create_inferior)\n+\t(attach_proc_task_lwp_callback)\n+\t(linux_process_target::attach)\n+\t(linux_process_target::detach)\n+\t(linux_process_target::mourn)\n+\t* thread-db.cc (attach_thread)\n+\n+\t* linux-x86-low.cc (class x86_target) <low_new_process>\n+\t<low_delete_process>\n+\t<low_new_thread>\n+\t<low_delete_thread>\n+\t<low_new_fork>: Declare.\n+\t(x86_linux_new_process): Turn into...\n+\t(x86_target::low_new_process): ...this.\n+\t(x86_linux_delete_process): Turn into...\n+\t(x86_target::low_delete_process): ...this.\n+\t(x86_target::low_new_thread): Define.\n+\t(x86_target::low_delete_thread): Define.\n+\t(x86_linux_new_fork): Turn into...\n+\t(x86_target::low_new_fork): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-aarch64-low.cc (class aarch64_target) <low_new_process>\n+\t<low_delete_process>\n+\t<low_new_thread>\n+\t<low_delete_thread>\n+\t<low_new_fork>: Declare.\n+\t(aarch64_linux_new_process): Turn into...\n+\t(aarch64_target::low_new_process): ...this.\n+\t(aarch64_linux_delete_process): Turn into...\n+\t(aarch64_target::low_delete_process): ...this.\n+\t(aarch64_target::low_new_thread): Define.\n+\t(aarch64_target::low_delete_thread): Define.\n+\t(aarch64_linux_new_fork): Turn into...\n+\t(aarch64_target::low_new_fork): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-arm-low.cc (class arm_target) <low_new_process>\n+\t<low_delete_process>\n+\t<low_new_thread>\n+\t<low_delete_thread>\n+\t<low_new_fork>: Declare.\n+\t(arm_new_process): Turn into...\n+\t(arm_target::low_new_process): ...this.\n+\t(arm_delete_process): Turn into...\n+\t(arm_target::low_delete_process): ...this.\n+\t(arm_new_thread): Turn into...\n+\t(arm_target::low_new_thread): ...this.\n+\t(arm_delete_thread): Turn into...\n+\t(arm_target::low_delete_thread): ...this.\n+\t(arm_new_fork): Turn into...\n+\t(arm_target::low_new_fork): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-mips-low.cc (class mips_target) <low_new_process>\n+\t<low_delete_process>\n+\t<low_new_thread>\n+\t<low_delete_thread>\n+\t<low_new_fork>: Declare.\n+\t(mips_linux_new_process): Turn into...\n+\t(mips_target::low_new_process): ...this.\n+\t(mips_linux_delete_process): Turn into...\n+\t(mips_target::low_delete_process): ...this.\n+\t(mips_linux_new_thread): Turn into...\n+\t(mips_target::low_new_thread): ...this.\n+\t(mips_linux_delete_thread): Turn into...\n+\t(mips_target::low_delete_thread): ...this.\n+\t(mips_linux_new_fork): Turn into...\n+\t(mips_target::low_new_fork): ...this.\n+\t(the_low_target): Remove the op fields.\n+\t* linux-bfin-low.cc (the_low_target): Remove the op fields.\n+\t* linux-crisv32-low.cc (the_low_target): Ditto.\n+\t* linux-m32r-low.cc (the_low_target): Ditto.\n+\t* linux-m68k-low.cc (the_low_target): Ditto.\n+\t* linux-ppc-low.cc (the_low_target): Ditto.\n+\t* linux-s390-low.cc (the_low_target): Ditto.\n+\t* linux-sh-low.cc (the_low_target): Ditto.\n+\t* linux-tic6x-low.cc (the_low_target): Ditto.\n+\t* linux-tile-low.cc (the_low_target): Ditto.\n+\t* linux-xtensa-low.cc (the_low_target): Ditto.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn the 'siginfo_fixup' linux target op into a method of"
    },
    {
      "sha": "3769e815216708d401827d687ce2772c03548dcb",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 32,
      "deletions": 15,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -93,6 +93,16 @@ class aarch64_target : public linux_process_target\n \n   bool low_siginfo_fixup (siginfo_t *native, gdb_byte *inf,\n \t\t\t  int direction) override;\n+\n+  arch_process_info *low_new_process () override;\n+\n+  void low_delete_process (arch_process_info *info) override;\n+\n+  void low_new_thread (lwp_info *) override;\n+\n+  void low_delete_thread (arch_lwp_info *) override;\n+\n+  void low_new_fork (process_info *parent, process_info *child) override;\n };\n \n /* The singleton target ops object.  */\n@@ -518,10 +528,10 @@ aarch64_target::low_siginfo_fixup (siginfo_t *native, gdb_byte *inf,\n   return false;\n }\n \n-/* Implementation of linux_target_ops method \"new_process\".  */\n+/* Implementation of linux target ops method \"low_new_process\".  */\n \n-static struct arch_process_info *\n-aarch64_linux_new_process (void)\n+arch_process_info *\n+aarch64_target::low_new_process ()\n {\n   struct arch_process_info *info = XCNEW (struct arch_process_info);\n \n@@ -530,19 +540,31 @@ aarch64_linux_new_process (void)\n   return info;\n }\n \n-/* Implementation of linux_target_ops method \"delete_process\".  */\n+/* Implementation of linux target ops method \"low_delete_process\".  */\n \n-static void\n-aarch64_linux_delete_process (struct arch_process_info *info)\n+void\n+aarch64_target::low_delete_process (arch_process_info *info)\n {\n   xfree (info);\n }\n \n-/* Implementation of linux_target_ops method \"linux_new_fork\".  */\n+void\n+aarch64_target::low_new_thread (lwp_info *lwp)\n+{\n+  aarch64_linux_new_thread (lwp);\n+}\n \n-static void\n-aarch64_linux_new_fork (struct process_info *parent,\n-\t\t\tstruct process_info *child)\n+void\n+aarch64_target::low_delete_thread (arch_lwp_info *arch_lwp)\n+{\n+  aarch64_linux_delete_thread (arch_lwp);\n+}\n+\n+/* Implementation of linux target ops method \"low_new_fork\".  */\n+\n+void\n+aarch64_target::low_new_fork (process_info *parent,\n+\t\t\t      process_info *child)\n {\n   /* These are allocated by linux_add_process.  */\n   gdb_assert (parent->priv != NULL\n@@ -3117,11 +3139,6 @@ aarch64_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  aarch64_linux_new_process,\n-  aarch64_linux_delete_process,\n-  aarch64_linux_new_thread,\n-  aarch64_linux_delete_thread,\n-  aarch64_linux_new_fork,\n   aarch64_linux_prepare_to_resume,\n   NULL, /* process_qsupported */\n   aarch64_supports_tracepoints,"
    },
    {
      "sha": "8ec5bc156f71b32e42150715bb59fe3114b2be0d",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 20,
      "deletions": 15,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -99,6 +99,16 @@ class arm_target : public linux_process_target\n   bool low_stopped_by_watchpoint () override;\n \n   CORE_ADDR low_stopped_data_address () override;\n+\n+  arch_process_info *low_new_process () override;\n+\n+  void low_delete_process (arch_process_info *info) override;\n+\n+  void low_new_thread (lwp_info *) override;\n+\n+  void low_delete_thread (arch_lwp_info *) override;\n+\n+  void low_new_fork (process_info *parent, process_info *child) override;\n };\n \n /* The singleton target ops object.  */\n@@ -719,24 +729,24 @@ arm_target::low_stopped_data_address ()\n }\n \n /* Called when a new process is created.  */\n-static struct arch_process_info *\n-arm_new_process (void)\n+arch_process_info *\n+arm_target::low_new_process ()\n {\n   struct arch_process_info *info = XCNEW (struct arch_process_info);\n   return info;\n }\n \n /* Called when a process is being deleted.  */\n \n-static void\n-arm_delete_process (struct arch_process_info *info)\n+void\n+arm_target::low_delete_process (arch_process_info *info)\n {\n   xfree (info);\n }\n \n /* Called when a new thread is detected.  */\n-static void\n-arm_new_thread (struct lwp_info *lwp)\n+void\n+arm_target::low_new_thread (lwp_info *lwp)\n {\n   struct arch_lwp_info *info = XCNEW (struct arch_lwp_info);\n   int i;\n@@ -751,14 +761,14 @@ arm_new_thread (struct lwp_info *lwp)\n \n /* Function to call when a thread is being deleted.  */\n \n-static void\n-arm_delete_thread (struct arch_lwp_info *arch_lwp)\n+void\n+arm_target::low_delete_thread (arch_lwp_info *arch_lwp)\n {\n   xfree (arch_lwp);\n }\n \n-static void\n-arm_new_fork (struct process_info *parent, struct process_info *child)\n+void\n+arm_target::low_new_fork (process_info *parent, process_info *child)\n {\n   struct arch_process_info *parent_proc_info;\n   struct arch_process_info *child_proc_info;\n@@ -1105,11 +1115,6 @@ arm_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  arm_new_process,\n-  arm_delete_process,\n-  arm_new_thread,\n-  arm_delete_thread,\n-  arm_new_fork,\n   arm_prepare_to_resume,\n   NULL, /* process_qsupported */\n   NULL, /* supports_tracepoints */"
    },
    {
      "sha": "c8e9d33f176e1f5e9ac0a0c31f615828512c7ef6",
      "filename": "gdbserver/linux-bfin-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-bfin-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-bfin-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-bfin-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -171,11 +171,6 @@ bfin_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* new_process */\n-  NULL, /* delete_process */\n-  NULL, /* new_thread */\n-  NULL, /* delete_thread */\n-  NULL, /* new_fork */\n   NULL, /* prepare_to_resume */\n   NULL, /* process_qsupported */\n   NULL, /* supports_tracepoints */"
    },
    {
      "sha": "e87873e8b2ab0ccdf15574011bb2664550def9f0",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -468,11 +468,6 @@ crisv32_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* new_process */\n-  NULL, /* delete_process */\n-  NULL, /* new_thread */\n-  NULL, /* delete_thread */\n-  NULL, /* new_fork */\n   NULL, /* prepare_to_resume */\n   NULL, /* process_qsupported */\n   NULL, /* supports_tracepoints */"
    },
    {
      "sha": "019b1231034253a585f09a72e02b2025f734f0e8",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 72,
      "deletions": 70,
      "changes": 142,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -268,7 +268,6 @@ int using_threads = 1;\n static int stabilizing_threads;\n \n static void unsuspend_all_lwps (struct lwp_info *except);\n-static struct lwp_info *add_lwp (ptid_t ptid);\n static void mark_lwp_dead (struct lwp_info *lwp, int wstat);\n static int lwp_is_marked_dead (struct lwp_info *lwp);\n static int finish_step_over (struct lwp_info *lwp);\n@@ -413,8 +412,8 @@ linux_pid_exe_is_elf_64_file (int pid, unsigned int *machine)\n   return elf_64_file_p (file, machine);\n }\n \n-static void\n-delete_lwp (struct lwp_info *lwp)\n+void\n+linux_process_target::delete_lwp (lwp_info *lwp)\n {\n   struct thread_info *thr = get_lwp_thread (lwp);\n \n@@ -423,31 +422,52 @@ delete_lwp (struct lwp_info *lwp)\n \n   remove_thread (thr);\n \n-  if (the_low_target.delete_thread != NULL)\n-    the_low_target.delete_thread (lwp->arch_private);\n-  else\n-    gdb_assert (lwp->arch_private == NULL);\n+  low_delete_thread (lwp->arch_private);\n \n   free (lwp);\n }\n \n-/* Add a process to the common process list, and set its private\n-   data.  */\n+void\n+linux_process_target::low_delete_thread (arch_lwp_info *info)\n+{\n+  /* Default implementation should be overridden if architecture-specific\n+     info is being used.  */\n+  gdb_assert (info == nullptr);\n+}\n \n-static struct process_info *\n-linux_add_process (int pid, int attached)\n+process_info *\n+linux_process_target::add_linux_process (int pid, int attached)\n {\n   struct process_info *proc;\n \n   proc = add_process (pid, attached);\n   proc->priv = XCNEW (struct process_info_private);\n \n-  if (the_low_target.new_process != NULL)\n-    proc->priv->arch_private = the_low_target.new_process ();\n+  proc->priv->arch_private = low_new_process ();\n \n   return proc;\n }\n \n+arch_process_info *\n+linux_process_target::low_new_process ()\n+{\n+  return nullptr;\n+}\n+\n+void\n+linux_process_target::low_delete_process (arch_process_info *info)\n+{\n+  /* Default implementation must be overridden if architecture-specific\n+     info exists.  */\n+  gdb_assert (info == nullptr);\n+}\n+\n+void\n+linux_process_target::low_new_fork (process_info *parent, process_info *child)\n+{\n+  /* Nop.  */\n+}\n+\n void\n linux_process_target::arch_setup_thread (thread_info *thread)\n {\n@@ -528,7 +548,7 @@ linux_process_target::handle_extended_wait (lwp_info **orig_event_lwp,\n \t     will be detached, since we will need the process object and the\n \t     breakpoints to remove any breakpoints from memory when we\n \t     detach, and the client side will access registers.  */\n-\t  child_proc = linux_add_process (new_pid, 0);\n+\t  child_proc = add_linux_process (new_pid, 0);\n \t  gdb_assert (child_proc != NULL);\n \t  child_lwp = add_lwp (ptid);\n \t  gdb_assert (child_lwp != NULL);\n@@ -572,8 +592,7 @@ linux_process_target::handle_extended_wait (lwp_info **orig_event_lwp,\n \t  child_proc->tdesc = tdesc;\n \n \t  /* Clone arch-specific process data.  */\n-\t  if (the_low_target.new_fork != NULL)\n-\t    the_low_target.new_fork (parent_proc, child_proc);\n+\t  low_new_fork (parent_proc, child_proc);\n \n \t  /* Save fork info in the parent thread.  */\n \t  if (event == PTRACE_EVENT_FORK)\n@@ -700,7 +719,7 @@ linux_process_target::handle_extended_wait (lwp_info **orig_event_lwp,\n       current_thread = NULL;\n \n       /* Create a new process/lwp/thread.  */\n-      proc = linux_add_process (event_pid, 0);\n+      proc = add_linux_process (event_pid, 0);\n       event_lwp = add_lwp (event_ptid);\n       event_thr = get_lwp_thread (event_lwp);\n       gdb_assert (current_thread == event_thr);\n@@ -921,8 +940,8 @@ linux_process_target::save_stop_reason (lwp_info *lwp)\n   return true;\n }\n \n-static struct lwp_info *\n-add_lwp (ptid_t ptid)\n+lwp_info *\n+linux_process_target::add_lwp (ptid_t ptid)\n {\n   struct lwp_info *lwp;\n \n@@ -932,12 +951,17 @@ add_lwp (ptid_t ptid)\n \n   lwp->thread = add_thread (ptid, lwp);\n \n-  if (the_low_target.new_thread != NULL)\n-    the_low_target.new_thread (lwp);\n+  low_new_thread (lwp);\n \n   return lwp;\n }\n \n+void\n+linux_process_target::low_new_thread (lwp_info *info)\n+{\n+  /* Nop.  */\n+}\n+\n /* Callback to be used when calling fork_inferior, responsible for\n    actually initiating the tracing of the inferior.  */\n \n@@ -994,7 +1018,7 @@ linux_process_target::create_inferior (const char *program,\n \t\t\t NULL, NULL, NULL, NULL);\n   }\n \n-  linux_add_process (pid, 0);\n+  add_linux_process (pid, 0);\n \n   ptid = ptid_t (pid, pid, 0);\n   new_lwp = add_lwp (ptid);\n@@ -1024,11 +1048,8 @@ linux_process_target::post_create_inferior ()\n     }\n }\n \n-/* Attach to an inferior process.  Returns 0 on success, ERRNO on\n-   error.  */\n-\n int\n-linux_attach_lwp (ptid_t ptid)\n+linux_process_target::attach_lwp (ptid_t ptid)\n {\n   struct lwp_info *new_lwp;\n   int lwpid = ptid.lwp ();\n@@ -1125,7 +1146,7 @@ attach_proc_task_lwp_callback (ptid_t ptid)\n       if (debug_threads)\n \tdebug_printf (\"Found new lwp %d\\n\", lwpid);\n \n-      err = linux_attach_lwp (ptid);\n+      err = the_linux_target->attach_lwp (ptid);\n \n       /* Be quiet if we simply raced with the thread exiting.  EPERM\n \t is returned if the thread's task still exists, and is marked\n@@ -1167,11 +1188,11 @@ linux_process_target::attach (unsigned long pid)\n   ptid_t ptid = ptid_t (pid, pid, 0);\n   int err;\n \n-  proc = linux_add_process (pid, 1);\n+  proc = add_linux_process (pid, 1);\n \n   /* Attach to PID.  We will check for other threads\n      soon.  */\n-  err = linux_attach_lwp (ptid);\n+  err = attach_lwp (ptid);\n   if (err != 0)\n     {\n       remove_process (proc);\n@@ -1479,10 +1500,8 @@ get_detach_signal (struct thread_info *thread)\n     }\n }\n \n-/* Detach from LWP.  */\n-\n-static void\n-linux_detach_one_lwp (struct lwp_info *lwp)\n+void\n+linux_process_target::detach_one_lwp (lwp_info *lwp)\n {\n   struct thread_info *thread = get_lwp_thread (lwp);\n   int sig;\n@@ -1564,22 +1583,6 @@ linux_detach_one_lwp (struct lwp_info *lwp)\n   delete_lwp (lwp);\n }\n \n-/* Callback for for_each_thread.  Detaches from non-leader threads of a\n-   given process.  */\n-\n-static void\n-linux_detach_lwp_callback (thread_info *thread)\n-{\n-  /* We don't actually detach from the thread group leader just yet.\n-     If the thread group exits, we must reap the zombie clone lwps\n-     before we're able to reap the leader.  */\n-  if (thread->id.pid () == thread->id.lwp ())\n-    return;\n-\n-  lwp_info *lwp = get_thread_lwp (thread);\n-  linux_detach_one_lwp (lwp);\n-}\n-\n int\n linux_process_target::detach (process_info *process)\n {\n@@ -1606,10 +1609,20 @@ linux_process_target::detach (process_info *process)\n   /* Detach from the clone lwps first.  If the thread group exits just\n      while we're detaching, we must reap the clone lwps before we're\n      able to reap the leader.  */\n-  for_each_thread (process->pid, linux_detach_lwp_callback);\n+  for_each_thread (process->pid, [this] (thread_info *thread)\n+    {\n+      /* We don't actually detach from the thread group leader just yet.\n+\t If the thread group exits, we must reap the zombie clone lwps\n+\t before we're able to reap the leader.  */\n+      if (thread->id.pid () == thread->id.lwp ())\n+\treturn;\n+\n+      lwp_info *lwp = get_thread_lwp (thread);\n+      detach_one_lwp (lwp);\n+    });\n \n   main_lwp = find_lwp_pid (ptid_t (process->pid));\n-  linux_detach_one_lwp (main_lwp);\n+  detach_one_lwp (main_lwp);\n \n   mourn (process);\n \n@@ -1630,17 +1643,14 @@ linux_process_target::mourn (process_info *process)\n   thread_db_mourn (process);\n #endif\n \n-  for_each_thread (process->pid, [] (thread_info *thread)\n+  for_each_thread (process->pid, [this] (thread_info *thread)\n     {\n       delete_lwp (get_thread_lwp (thread));\n     });\n \n   /* Freeing all private data.  */\n   priv = process->priv;\n-  if (the_low_target.delete_process != NULL)\n-    the_low_target.delete_process (priv->arch_private);\n-  else\n-    gdb_assert (priv->arch_private == NULL);\n+  low_delete_process (priv->arch_private);\n   free (priv);\n   process->priv = NULL;\n \n@@ -1832,13 +1842,10 @@ iterate_over_lwps (ptid_t filter,\n   return get_thread_lwp (thread);\n }\n \n-/* Detect zombie thread group leaders, and \"exit\" them.  We can't reap\n-   their exits until all other threads in the group have exited.  */\n-\n-static void\n-check_zombie_leaders (void)\n+void\n+linux_process_target::check_zombie_leaders ()\n {\n-  for_each_process ([] (process_info *proc) {\n+  for_each_process ([this] (process_info *proc) {\n     pid_t leader_pid = pid_of (proc);\n     struct lwp_info *leader_lp;\n \n@@ -2943,14 +2950,9 @@ ignore_event (struct target_waitstatus *ourstatus)\n   return null_ptid;\n }\n \n-/* Convenience function that is called when the kernel reports an exit\n-   event.  This decides whether to report the event to GDB as a\n-   process exit event, a thread exit event, or to suppress the\n-   event.  */\n-\n-static ptid_t\n-filter_exit_event (struct lwp_info *event_child,\n-\t\t   struct target_waitstatus *ourstatus)\n+ptid_t\n+linux_process_target::filter_exit_event (lwp_info *event_child,\n+\t\t\t\t\t target_waitstatus *ourstatus)\n {\n   client_state &cs = get_client_state ();\n   struct thread_info *thread = get_lwp_thread (event_child);"
    },
    {
      "sha": "f111945cf93a8c7e8f1009611bf66a781809c25d",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 52,
      "deletions": 21,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -131,27 +131,6 @@ struct lwp_info;\n \n struct linux_target_ops\n {\n-  /* Hook to call when a new process is created or attached to.\n-     If extra per-process architecture-specific data is needed,\n-     allocate it here.  */\n-  struct arch_process_info * (*new_process) (void);\n-\n-  /* Hook to call when a process is being deleted.  If extra per-process\n-     architecture-specific data is needed, delete it here.  */\n-  void (*delete_process) (struct arch_process_info *info);\n-\n-  /* Hook to call when a new thread is detected.\n-     If extra per-thread architecture-specific data is needed,\n-     allocate it here.  */\n-  void (*new_thread) (struct lwp_info *);\n-\n-  /* Hook to call when a thread is being deleted.  If extra per-thread\n-     architecture-specific data is needed, delete it here.  */\n-  void (*delete_thread) (struct arch_lwp_info *);\n-\n-  /* Hook to call, if any, when a new fork is attached.  */\n-  void (*new_fork) (struct process_info *parent, struct process_info *child);\n-\n   /* Hook to call prior to resuming a thread.  */\n   void (*prepare_to_resume) (struct lwp_info *);\n \n@@ -627,6 +606,37 @@ class linux_process_target : public process_stratum_target\n   void siginfo_fixup (siginfo_t *siginfo, gdb_byte *inf_siginfo,\n \t\t      int direction);\n \n+  /* Add a process to the common process list, and set its private\n+     data.  */\n+  process_info *add_linux_process (int pid, int attached);\n+\n+  /* Add a new thread.  */\n+  lwp_info *add_lwp (ptid_t ptid);\n+\n+  /* Delete a thread.  */\n+  void delete_lwp (lwp_info *lwp);\n+\n+public: /* Make this public because it's used from outside.  */\n+  /* Attach to an inferior process.  Returns 0 on success, ERRNO on\n+     error.  */\n+  int attach_lwp (ptid_t ptid);\n+\n+private: /* Back to private.  */\n+  /* Detach from LWP.  */\n+  void detach_one_lwp (lwp_info *lwp);\n+\n+  /* Detect zombie thread group leaders, and \"exit\" them.  We can't\n+     reap their exits until all other threads in the group have\n+     exited.  */\n+  void check_zombie_leaders ();\n+\n+  /* Convenience function that is called when the kernel reports an exit\n+     event.  This decides whether to report the event to GDB as a\n+     process exit event, a thread exit event, or to suppress the\n+     event.  */\n+  ptid_t filter_exit_event (lwp_info *event_child,\n+\t\t\t    target_waitstatus *ourstatus);\n+\n protected:\n   /* The architecture-specific \"low\" methods are listed below.  */\n \n@@ -689,6 +699,27 @@ class linux_process_target : public process_stratum_target\n   virtual bool low_siginfo_fixup (siginfo_t *native, gdb_byte *inf,\n \t\t\t\t  int direction);\n \n+  /* Hook to call when a new process is created or attached to.\n+     If extra per-process architecture-specific data is needed,\n+     allocate it here.  */\n+  virtual arch_process_info *low_new_process ();\n+\n+  /* Hook to call when a process is being deleted.  If extra per-process\n+     architecture-specific data is needed, delete it here.  */\n+  virtual void low_delete_process (arch_process_info *info);\n+\n+  /* Hook to call when a new thread is detected.\n+     If extra per-thread architecture-specific data is needed,\n+     allocate it here.  */\n+  virtual void low_new_thread (lwp_info *);\n+\n+  /* Hook to call when a thread is being deleted.  If extra per-thread\n+     architecture-specific data is needed, delete it here.  */\n+  virtual void low_delete_thread (arch_lwp_info *);\n+\n+  /* Hook to call, if any, when a new fork is attached.  */\n+  virtual void low_new_fork (process_info *parent, process_info *child);\n+\n   /* How many bytes the PC should be decremented after a break.  */\n   virtual int low_decr_pc_after_break ();\n };"
    },
    {
      "sha": "4d335c70eda9d6452c6d898d34b236ced0e4a88b",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -161,11 +161,6 @@ m32r_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* new_process */\n-  NULL, /* delete_process */\n-  NULL, /* new_thread */\n-  NULL, /* delete_thread */\n-  NULL, /* new_fork */\n   NULL, /* prepare_to_resume */\n   NULL, /* process_qsupported */\n   NULL, /* supports_tracepoints */"
    },
    {
      "sha": "2076f0dc8b443949305f91a4e17d83e70012fdfa",
      "filename": "gdbserver/linux-m68k-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-m68k-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-m68k-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m68k-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -265,11 +265,6 @@ m68k_supports_hardware_single_step (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* new_process */\n-  NULL, /* delete_process */\n-  NULL, /* new_thread */\n-  NULL, /* delete_thread */\n-  NULL, /* new_fork */\n   NULL, /* prepare_to_resume */\n   NULL, /* process_qsupported */\n   NULL, /* supports_tracepoints */"
    },
    {
      "sha": "c77834ebc90aba0b3e2db904d9777903b3045614",
      "filename": "gdbserver/linux-mips-low.cc",
      "status": "modified",
      "additions": 26,
      "deletions": 21,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-mips-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-mips-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-mips-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -70,6 +70,16 @@ class mips_target : public linux_process_target\n \n   void low_supply_ptrace_register (regcache *regcache, int regno,\n \t\t\t\t   const char *buf) override;\n+\n+  arch_process_info *low_new_process () override;\n+\n+  void low_delete_process (arch_process_info *info) override;\n+\n+  void low_new_thread (lwp_info *) override;\n+\n+  void low_delete_thread (arch_lwp_info *) override;\n+\n+  void low_new_fork (process_info *parent, process_info *child) override;\n };\n \n /* The singleton target ops object.  */\n@@ -377,32 +387,32 @@ update_watch_registers_callback (thread_info *thread)\n     linux_stop_lwp (lwp);\n }\n \n-/* This is the implementation of linux_target_ops method\n-   new_process.  */\n+/* This is the implementation of linux target ops method\n+   low_new_process.  */\n \n-static struct arch_process_info *\n-mips_linux_new_process (void)\n+arch_process_info *\n+mips_target::low_new_process ()\n {\n   struct arch_process_info *info = XCNEW (struct arch_process_info);\n \n   return info;\n }\n \n-/* This is the implementation of linux_target_ops method\n-   delete_process.  */\n+/* This is the implementation of linux target ops method\n+   low_delete_process.  */\n \n-static void\n-mips_linux_delete_process (struct arch_process_info *info)\n+void\n+mips_target::low_delete_process (arch_process_info *info)\n {\n   xfree (info);\n }\n \n-/* This is the implementation of linux_target_ops method new_thread.\n+/* This is the implementation of linux target ops method low_new_thread.\n    Mark the watch registers as changed, so the threads' copies will\n    be updated.  */\n \n-static void\n-mips_linux_new_thread (struct lwp_info *lwp)\n+void\n+mips_target::low_new_thread (lwp_info *lwp)\n {\n   struct arch_lwp_info *info = XCNEW (struct arch_lwp_info);\n \n@@ -413,8 +423,8 @@ mips_linux_new_thread (struct lwp_info *lwp)\n \n /* Function to call when a thread is being deleted.  */\n \n-static void\n-mips_linux_delete_thread (struct arch_lwp_info *arch_lwp)\n+void\n+mips_target::low_delete_thread (arch_lwp_info *arch_lwp)\n {\n   xfree (arch_lwp);\n }\n@@ -442,9 +452,9 @@ mips_add_watchpoint (struct arch_process_info *priv, CORE_ADDR addr, int len,\n \n /* Hook to call when a new fork is attached.  */\n \n-static void\n-mips_linux_new_fork (struct process_info *parent,\n-\t\t\tstruct process_info *child)\n+void\n+mips_target::low_new_fork (process_info *parent,\n+\t\t\t   process_info *child)\n {\n   struct arch_process_info *parent_private;\n   struct arch_process_info *child_private;\n@@ -986,11 +996,6 @@ mips_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  mips_linux_new_process,\n-  mips_linux_delete_process,\n-  mips_linux_new_thread,\n-  mips_linux_delete_thread,\n-  mips_linux_new_fork,\n   mips_linux_prepare_to_resume\n };\n "
    },
    {
      "sha": "4f3a643f18f3e69b8cdeee4324c26a1462dff66f",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -3428,11 +3428,6 @@ ppc_get_ipa_tdesc_idx (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* new_process */\n-  NULL, /* delete_process */\n-  NULL, /* new_thread */\n-  NULL, /* delete_thread */\n-  NULL, /* new_fork */\n   NULL, /* prepare_to_resume */\n   NULL, /* process_qsupported */\n   ppc_supports_tracepoints,"
    },
    {
      "sha": "be99c26c58d5ab261e53ac6b3ae1dbfdd53caf3c",
      "filename": "gdbserver/linux-s390-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-s390-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-s390-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-s390-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -2845,11 +2845,6 @@ s390_emit_ops (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* new_process */\n-  NULL, /* delete_process */\n-  NULL, /* new_thread */\n-  NULL, /* delete_thread */\n-  NULL, /* new_fork */\n   NULL, /* prepare_to_resume */\n   NULL, /* process_qsupported */\n   s390_supports_tracepoints,"
    },
    {
      "sha": "8b69521f100b023d74e29f14cd0cf4de63867572",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -192,11 +192,6 @@ sh_target::low_arch_setup ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* new_process */\n-  NULL, /* delete_process */\n-  NULL, /* new_thread */\n-  NULL, /* delete_thread */\n-  NULL, /* new_fork */\n   NULL, /* prepare_to_resume */\n   NULL, /* process_qsupported */\n   NULL, /* supports_tracepoints */"
    },
    {
      "sha": "9f62899eaf9c556e2528c90cd4fe909ce823ac4c",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -423,11 +423,6 @@ tic6x_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* new_process */\n-  NULL, /* delete_process */\n-  NULL, /* new_thread */\n-  NULL, /* delete_thread */\n-  NULL, /* new_fork */\n   NULL, /* prepare_to_resume */\n   NULL, /* process_qsupported */\n   NULL, /* supports_tracepoints */"
    },
    {
      "sha": "21650c846a186dff3b5f52faec7c6f966df93fe9",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -224,11 +224,6 @@ tile_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  NULL, /* new_process */\n-  NULL, /* delete_process */\n-  NULL, /* new_thread */\n-  NULL, /* delete_thread */\n-  NULL, /* new_fork */\n   NULL, /* prepare_to_resume */\n   NULL, /* process_qsupported */\n   NULL, /* supports_tracepoints */"
    },
    {
      "sha": "be68e005f00f368811751b11272fbe40d5f4f982",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 31,
      "deletions": 12,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -145,6 +145,16 @@ class x86_target : public linux_process_target\n   /* Need to fix up i386 siginfo if host is amd64.  */\n   bool low_siginfo_fixup (siginfo_t *native, gdb_byte *inf,\n \t\t\t  int direction) override;\n+\n+  arch_process_info *low_new_process () override;\n+\n+  void low_delete_process (arch_process_info *info) override;\n+\n+  void low_new_thread (lwp_info *) override;\n+\n+  void low_delete_thread (arch_lwp_info *) override;\n+\n+  void low_new_fork (process_info *parent, process_info *child) override;\n };\n \n /* The singleton target ops object.  */\n@@ -693,8 +703,8 @@ x86_target::low_stopped_data_address ()\n \f\n /* Called when a new process is created.  */\n \n-static struct arch_process_info *\n-x86_linux_new_process (void)\n+arch_process_info *\n+x86_target::low_new_process ()\n {\n   struct arch_process_info *info = XCNEW (struct arch_process_info);\n \n@@ -705,16 +715,30 @@ x86_linux_new_process (void)\n \n /* Called when a process is being deleted.  */\n \n-static void\n-x86_linux_delete_process (struct arch_process_info *info)\n+void\n+x86_target::low_delete_process (arch_process_info *info)\n {\n   xfree (info);\n }\n \n-/* Target routine for linux_new_fork.  */\n+void\n+x86_target::low_new_thread (lwp_info *lwp)\n+{\n+  /* This comes from nat/.  */\n+  x86_linux_new_thread (lwp);\n+}\n \n-static void\n-x86_linux_new_fork (struct process_info *parent, struct process_info *child)\n+void\n+x86_target::low_delete_thread (arch_lwp_info *alwp)\n+{\n+  /* This comes from nat/.  */\n+  x86_linux_delete_thread (alwp);\n+}\n+\n+/* Target routine for new_fork.  */\n+\n+void\n+x86_target::low_new_fork (process_info *parent, process_info *child)\n {\n   /* These are allocated by linux_add_process.  */\n   gdb_assert (parent->priv != NULL\n@@ -2930,11 +2954,6 @@ x86_get_ipa_tdesc_idx (void)\n \n struct linux_target_ops the_low_target =\n {\n-  x86_linux_new_process,\n-  x86_linux_delete_process,\n-  x86_linux_new_thread,\n-  x86_linux_delete_thread,\n-  x86_linux_new_fork,\n   x86_linux_prepare_to_resume,\n   x86_linux_process_qsupported,\n   x86_supports_tracepoints,"
    },
    {
      "sha": "dbb87a59970d4eef74ada5613acd102582391b26",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -329,11 +329,6 @@ xtensa_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* new_process */\n-  NULL, /* delete_process */\n-  NULL, /* new_thread */\n-  NULL, /* delete_thread */\n-  NULL, /* new_fork */\n   NULL, /* prepare_to_resume */\n   NULL, /* process_qsupported */\n   NULL, /* supports_tracepoints */"
    },
    {
      "sha": "89c45cd7b38464f08d138ba4a8055f2df6128756",
      "filename": "gdbserver/thread-db.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/thread-db.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd000fb3dfd9c93e332246bf89b700ab9aac7339/gdbserver/thread-db.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/thread-db.cc?ref=fd000fb3dfd9c93e332246bf89b700ab9aac7339",
      "patch": "@@ -221,7 +221,7 @@ attach_thread (const td_thrhandle_t *th_p, td_thrinfo_t *ti_p)\n   if (debug_threads)\n     debug_printf (\"Attaching to thread %ld (LWP %d)\\n\",\n \t\t  (unsigned long) ti_p->ti_tid, ti_p->ti_lid);\n-  err = linux_attach_lwp (ptid);\n+  err = the_linux_target->attach_lwp (ptid);\n   if (err != 0)\n     {\n       std::string reason = linux_ptrace_attach_fail_reason_string (ptid, err);"
    }
  ]
}