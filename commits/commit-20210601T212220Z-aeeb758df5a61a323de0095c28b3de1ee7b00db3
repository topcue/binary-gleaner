{
  "sha": "aeeb758df5a61a323de0095c28b3de1ee7b00db3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWVlYjc1OGRmNWE2MWEzMjNkZTAwOTVjMjhiM2RlMWVlN2IwMGRiMw==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-06-01T21:22:20Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-06-01T21:22:20Z"
    },
    "message": "Conditionally restore displaced stepping state after fork.\n\nThere is no default method for\ngdbarch_displaced_step_restore_all_in_ptid, so calling it\nunconditionally for fork events triggered an assertion failure on\nplatforms that do not support displaced stepping.  To fix, only invoke\nthe method if the gdbarch supports displaced stepping.\n\nNote that not all gdbarches support both displaced stepping and fork\nevents, so gdbarch validation does not require\ngdbarch_displaced_step_restore_all_in_ptid for any gdbarch supporting\ndisplaced stepping.  However, the internal assertion in\ngdbarch_displaced_step_restore_all_in_ptid should catch any gdbarches\nwhich do support both but fail to provide this method.\n\ngdb/ChangeLog:\n\n\t* infrun.c (handle_inferior_event): Only call\n\tgdbarch_displaced_step_restore_all_in_ptid if\n\tgdbarch_supports_displaced_stepping is true.",
    "tree": {
      "sha": "d94fb1f1b24af5434a2a3e98a2860e217a2633ae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d94fb1f1b24af5434a2a3e98a2860e217a2633ae"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aeeb758df5a61a323de0095c28b3de1ee7b00db3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aeeb758df5a61a323de0095c28b3de1ee7b00db3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aeeb758df5a61a323de0095c28b3de1ee7b00db3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aeeb758df5a61a323de0095c28b3de1ee7b00db3/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "906f72d454d159f0a116d0a1039616361d2160cb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/906f72d454d159f0a116d0a1039616361d2160cb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/906f72d454d159f0a116d0a1039616361d2160cb"
    }
  ],
  "stats": {
    "total": 22,
    "additions": 18,
    "deletions": 4
  },
  "files": [
    {
      "sha": "6e5e88f923175c45a87f0bec553cd2e5a57fb8c3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aeeb758df5a61a323de0095c28b3de1ee7b00db3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aeeb758df5a61a323de0095c28b3de1ee7b00db3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=aeeb758df5a61a323de0095c28b3de1ee7b00db3",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-01  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* infrun.c (handle_inferior_event): Only call\n+\tgdbarch_displaced_step_restore_all_in_ptid if\n+\tgdbarch_supports_displaced_stepping is true.\n+\n 2021-06-01  Tom Tromey  <tromey@adacore.com>\n \n \t* Makefile.in (all-data-directory): Remove."
    },
    {
      "sha": "488bcc1e10bcf3e9fd3e27e098561097766b592f",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aeeb758df5a61a323de0095c28b3de1ee7b00db3/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aeeb758df5a61a323de0095c28b3de1ee7b00db3/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=aeeb758df5a61a323de0095c28b3de1ee7b00db3",
      "patch": "@@ -5493,10 +5493,18 @@ handle_inferior_event (struct execution_control_state *ecs)\n \tstruct gdbarch *gdbarch = regcache->arch ();\n \tinferior *parent_inf = find_inferior_ptid (ecs->target, ecs->ptid);\n \n-\t/* If this is a fork (child gets its own address space copy) and some\n-\t   displaced step buffers were in use at the time of the fork, restore\n-\t   the displaced step buffer bytes in the child process.  */\n-\tif (ecs->ws.kind == TARGET_WAITKIND_FORKED)\n+\t/* If this is a fork (child gets its own address space copy)\n+\t   and some displaced step buffers were in use at the time of\n+\t   the fork, restore the displaced step buffer bytes in the\n+\t   child process.\n+\n+\t   Architectures which support displaced stepping and fork\n+\t   events must supply an implementation of\n+\t   gdbarch_displaced_step_restore_all_in_ptid.  This is not\n+\t   enforced during gdbarch validation to support architectures\n+\t   which support displaced stepping but not forks.  */\n+\tif (ecs->ws.kind == TARGET_WAITKIND_FORKED\n+\t    && gdbarch_supports_displaced_stepping (gdbarch))\n \t  gdbarch_displaced_step_restore_all_in_ptid\n \t    (gdbarch, parent_inf, ecs->ws.value.related_pid);\n "
    }
  ]
}