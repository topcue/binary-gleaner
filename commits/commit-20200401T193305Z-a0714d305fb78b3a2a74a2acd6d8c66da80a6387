{
  "sha": "a0714d305fb78b3a2a74a2acd6d8c66da80a6387",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTA3MTRkMzA1ZmI3OGIzYTJhNzRhMmFjZDZkOGM2NmRhODBhNjM4Nw==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-01T19:33:05Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-01T19:33:05Z"
    },
    "message": "gdb: define convenience function 'exists_non_stop_target'\n\nDefine a predicate function that returns true if there exists an\ninferior with a non-stop target.\n\ngdb/ChangeLog:\n2020-04-01  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* target.h (exists_non_stop_target): New function declaration.\n\t* target.c (exists_non_stop_target): New function.",
    "tree": {
      "sha": "72a23f1e24f8375d9570e2b2ab89b8453340c66f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/72a23f1e24f8375d9570e2b2ab89b8453340c66f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a0714d305fb78b3a2a74a2acd6d8c66da80a6387",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a0714d305fb78b3a2a74a2acd6d8c66da80a6387",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a0714d305fb78b3a2a74a2acd6d8c66da80a6387",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a0714d305fb78b3a2a74a2acd6d8c66da80a6387/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3ce23ca1de4c769c4b7247f0724a10ef5fb24a11",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3ce23ca1de4c769c4b7247f0724a10ef5fb24a11",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3ce23ca1de4c769c4b7247f0724a10ef5fb24a11"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 28,
    "deletions": 0
  },
  "files": [
    {
      "sha": "c7f4ac4f54f9e0f7cb06c1c656b1ce3ed47a8fd1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0714d305fb78b3a2a74a2acd6d8c66da80a6387/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0714d305fb78b3a2a74a2acd6d8c66da80a6387/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a0714d305fb78b3a2a74a2acd6d8c66da80a6387",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-01  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* target.h (exists_non_stop_target): New function declaration.\n+\t* target.c (exists_non_stop_target): New function.\n+\n 2020-04-01  Hannes Domani  <ssbssa@yahoo.de>\n \n \tPR gdb/24789"
    },
    {
      "sha": "2dc356d935f90bc56cb0c4af8415fbf7fb8b977a",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0714d305fb78b3a2a74a2acd6d8c66da80a6387/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0714d305fb78b3a2a74a2acd6d8c66da80a6387/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=a0714d305fb78b3a2a74a2acd6d8c66da80a6387",
      "patch": "@@ -3931,6 +3931,26 @@ target_is_non_stop_p (void)\n \t      && target_always_non_stop_p ()));\n }\n \n+/* See target.h.  */\n+\n+bool\n+exists_non_stop_target ()\n+{\n+  if (target_is_non_stop_p ())\n+    return true;\n+\n+  scoped_restore_current_thread restore_thread;\n+\n+  for (inferior *inf : all_inferiors ())\n+    {\n+      switch_to_inferior_no_thread (inf);\n+      if (target_is_non_stop_p ())\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n /* Controls if targets can report that they always run in non-stop\n    mode.  This is just for maintainers to use when debugging gdb.  */\n enum auto_boolean target_non_stop_enabled = AUTO_BOOLEAN_AUTO;"
    },
    {
      "sha": "9a1dd805af908fe42e5c5fa23f183b320a6308fe",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0714d305fb78b3a2a74a2acd6d8c66da80a6387/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0714d305fb78b3a2a74a2acd6d8c66da80a6387/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=a0714d305fb78b3a2a74a2acd6d8c66da80a6387",
      "patch": "@@ -1857,6 +1857,9 @@ extern enum auto_boolean target_non_stop_enabled;\n    non-stop\" is on.  */\n extern int target_is_non_stop_p (void);\n \n+/* Return true if at least one inferior has a non-stop target.  */\n+extern bool exists_non_stop_target ();\n+\n #define target_execution_direction() \\\n   (current_top_target ()->execution_direction ())\n "
    }
  ]
}