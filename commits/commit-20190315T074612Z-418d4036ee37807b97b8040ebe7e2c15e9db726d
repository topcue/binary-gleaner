{
  "sha": "418d4036ee37807b97b8040ebe7e2c15e9db726d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDE4ZDQwMzZlZTM3ODA3Yjk3YjgwNDBlYmU3ZTJjMTVlOWRiNzI2ZA==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2019-03-15T07:46:12Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2019-03-15T07:46:12Z"
    },
    "message": "x86-64: Check for corrupt input with bad relocation\n\n\tPR ld/24338\n\t* elf64-x86-64.c (elf_x86_64_relocate_section): Check for corrupt\n\tinput with bad relocation.",
    "tree": {
      "sha": "b9065616bbf18a807731d9374005dd696ffc4c69",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b9065616bbf18a807731d9374005dd696ffc4c69"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/418d4036ee37807b97b8040ebe7e2c15e9db726d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/418d4036ee37807b97b8040ebe7e2c15e9db726d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/418d4036ee37807b97b8040ebe7e2c15e9db726d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/418d4036ee37807b97b8040ebe7e2c15e9db726d/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "da0d12d2bd46730ad8327b9fac1371182996017c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/da0d12d2bd46730ad8327b9fac1371182996017c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/da0d12d2bd46730ad8327b9fac1371182996017c"
    }
  ],
  "stats": {
    "total": 176,
    "additions": 138,
    "deletions": 38
  },
  "files": [
    {
      "sha": "a072ade16b8aa0cdb90ac4a3cef87ee07f2a6fe6",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/418d4036ee37807b97b8040ebe7e2c15e9db726d/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/418d4036ee37807b97b8040ebe7e2c15e9db726d/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=418d4036ee37807b97b8040ebe7e2c15e9db726d",
      "patch": "@@ -1,5 +1,11 @@\n 2019-03-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n+\tPR ld/24338\n+\t* elf64-x86-64.c (elf_x86_64_relocate_section): Check for corrupt\n+\tinput with bad relocation.\n+\n+22019-03-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n \t* elf64-x86-64.c (elf_x86_64_relocate_section): Re-indent.\n \n 2019-03-14  Nick Clifton  <nickc@redhat.com>"
    },
    {
      "sha": "ecd4c6d03c6d8c946b0260bc18cbb165e7bbfc90",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 132,
      "deletions": 38,
      "changes": 170,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/418d4036ee37807b97b8040ebe7e2c15e9db726d/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/418d4036ee37807b97b8040ebe7e2c15e9db726d/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=418d4036ee37807b97b8040ebe7e2c15e9db726d",
      "patch": "@@ -3361,20 +3361,39 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t\t    {\n \t\t      if (contents[roff + 5] == 0xb8)\n \t\t\t{\n+\t\t\t  if (roff < 3\n+\t\t\t      || (roff - 3 + 22) > input_section->size)\n+\t\t\t    {\n+corrupt_input:\n+\t\t\t      info->callbacks->einfo\n+\t\t\t\t(_(\"%F%P: corrupt input: %pB\\n\"),\n+\t\t\t\t input_bfd);\n+\t\t\t      return FALSE;\n+\t\t\t    }\n \t\t\t  memcpy (contents + roff - 3,\n \t\t\t\t  \"\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\\0\\x48\\x8d\\x80\"\n \t\t\t\t  \"\\0\\0\\0\\0\\x66\\x0f\\x1f\\x44\\0\", 22);\n \t\t\t  largepic = 1;\n \t\t\t}\n \t\t      else\n-\t\t\tmemcpy (contents + roff - 4,\n-\t\t\t\t\"\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\\0\\x48\\x8d\\x80\\0\\0\\0\",\n-\t\t\t\t16);\n+\t\t\t{\n+\t\t\t  if (roff < 4\n+\t\t\t      || (roff - 4 + 16) > input_section->size)\n+\t\t\t    goto corrupt_input;\n+\t\t\t  memcpy (contents + roff - 4,\n+\t\t\t\t  \"\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\\0\\x48\\x8d\\x80\\0\\0\\0\",\n+\t\t\t\t  16);\n+\t\t\t}\n \t\t    }\n \t\t  else\n-\t\t    memcpy (contents + roff - 3,\n-\t\t\t    \"\\x64\\x8b\\x04\\x25\\0\\0\\0\\0\\x48\\x8d\\x80\\0\\0\\0\",\n-\t\t\t    15);\n+\t\t    {\n+\t\t      if (roff < 3\n+\t\t\t  || (roff - 3 + 15) > input_section->size)\n+\t\t\tgoto corrupt_input;\n+\t\t      memcpy (contents + roff - 3,\n+\t\t\t      \"\\x64\\x8b\\x04\\x25\\0\\0\\0\\0\\x48\\x8d\\x80\\0\\0\\0\",\n+\t\t\t      15);\n+\t\t    }\n \t\t  bfd_put_32 (output_bfd,\n \t\t\t      elf_x86_64_tpoff (info, relocation),\n \t\t\t      contents + roff + 8 + largepic);\n@@ -3395,6 +3414,8 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \n \t\t  unsigned int val, type;\n \n+\t\t  if (roff < 3)\n+\t\t    goto corrupt_input;\n \t\t  type = bfd_get_8 (input_bfd, contents + roff - 3);\n \t\t  val = bfd_get_8 (input_bfd, contents + roff - 1);\n \t\t  bfd_put_8 (output_bfd, 0x48 | ((type >> 2) & 1),\n@@ -3441,19 +3462,31 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t\t  if (roff >= 3)\n \t\t    val = bfd_get_8 (input_bfd, contents + roff - 3);\n \t\t  else\n-\t\t    val = 0;\n+\t\t    {\n+\t\t      if (roff < 2)\n+\t\t\tgoto corrupt_input;\n+\t\t      val = 0;\n+\t\t    }\n \t\t  type = bfd_get_8 (input_bfd, contents + roff - 2);\n \t\t  reg = bfd_get_8 (input_bfd, contents + roff - 1);\n \t\t  reg >>= 3;\n \t\t  if (type == 0x8b)\n \t\t    {\n \t\t      /* movq */\n \t\t      if (val == 0x4c)\n-\t\t\tbfd_put_8 (output_bfd, 0x49,\n-\t\t\t\t   contents + roff - 3);\n+\t\t\t{\n+\t\t\t  if (roff < 3)\n+\t\t\t    goto corrupt_input;\n+\t\t\t  bfd_put_8 (output_bfd, 0x49,\n+\t\t\t\t     contents + roff - 3);\n+\t\t\t}\n \t\t      else if (!ABI_64_P (output_bfd) && val == 0x44)\n-\t\t\tbfd_put_8 (output_bfd, 0x41,\n-\t\t\t\t   contents + roff - 3);\n+\t\t\t{\n+\t\t\t  if (roff < 3)\n+\t\t\t    goto corrupt_input;\n+\t\t\t  bfd_put_8 (output_bfd, 0x41,\n+\t\t\t\t     contents + roff - 3);\n+\t\t\t}\n \t\t      bfd_put_8 (output_bfd, 0xc7,\n \t\t\t\t contents + roff - 2);\n \t\t      bfd_put_8 (output_bfd, 0xc0 | reg,\n@@ -3464,11 +3497,19 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t\t      /* addq/addl -> addq/addl - addressing with %rsp/%r12\n \t\t\t is special  */\n \t\t      if (val == 0x4c)\n-\t\t\tbfd_put_8 (output_bfd, 0x49,\n-\t\t\t\t   contents + roff - 3);\n+\t\t\t{\n+\t\t\t  if (roff < 3)\n+\t\t\t    goto corrupt_input;\n+\t\t\t  bfd_put_8 (output_bfd, 0x49,\n+\t\t\t\t     contents + roff - 3);\n+\t\t\t}\n \t\t      else if (!ABI_64_P (output_bfd) && val == 0x44)\n-\t\t\tbfd_put_8 (output_bfd, 0x41,\n-\t\t\t\t   contents + roff - 3);\n+\t\t\t{\n+\t\t\t  if (roff < 3)\n+\t\t\t    goto corrupt_input;\n+\t\t\t  bfd_put_8 (output_bfd, 0x41,\n+\t\t\t\t     contents + roff - 3);\n+\t\t\t}\n \t\t      bfd_put_8 (output_bfd, 0x81,\n \t\t\t\t contents + roff - 2);\n \t\t      bfd_put_8 (output_bfd, 0xc0 | reg,\n@@ -3478,11 +3519,19 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t\t    {\n \t\t      /* addq/addl -> leaq/leal */\n \t\t      if (val == 0x4c)\n-\t\t\tbfd_put_8 (output_bfd, 0x4d,\n-\t\t\t\t   contents + roff - 3);\n+\t\t\t{\n+\t\t\t  if (roff < 3)\n+\t\t\t    goto corrupt_input;\n+\t\t\t  bfd_put_8 (output_bfd, 0x4d,\n+\t\t\t\t     contents + roff - 3);\n+\t\t\t}\n \t\t      else if (!ABI_64_P (output_bfd) && val == 0x44)\n-\t\t\tbfd_put_8 (output_bfd, 0x45,\n-\t\t\t\t   contents + roff - 3);\n+\t\t\t{\n+\t\t\t  if (roff < 3)\n+\t\t\t    goto corrupt_input;\n+\t\t\t  bfd_put_8 (output_bfd, 0x45,\n+\t\t\t\t     contents + roff - 3);\n+\t\t\t}\n \t\t      bfd_put_8 (output_bfd, 0x8d,\n \t\t\t\t contents + roff - 2);\n \t\t      bfd_put_8 (output_bfd, 0x80 | reg | (reg << 3),\n@@ -3652,20 +3701,33 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t\t    {\n \t\t      if (contents[roff + 5] == 0xb8)\n \t\t\t{\n+\t\t\t  if (roff < 3\n+\t\t\t      || (roff - 3 + 22) > input_section->size)\n+\t\t\t    goto corrupt_input;\n \t\t\t  memcpy (contents + roff - 3,\n \t\t\t\t  \"\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\\0\\x48\\x03\\x05\"\n \t\t\t\t  \"\\0\\0\\0\\0\\x66\\x0f\\x1f\\x44\\0\", 22);\n \t\t\t  largepic = 1;\n \t\t\t}\n \t\t      else\n-\t\t\tmemcpy (contents + roff - 4,\n-\t\t\t\t\"\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\\0\\x48\\x03\\x05\\0\\0\\0\",\n-\t\t\t\t16);\n+\t\t\t{\n+\t\t\t  if (roff < 4\n+\t\t\t      || (roff - 4 + 16) > input_section->size)\n+\t\t\t    goto corrupt_input;\n+\t\t\t  memcpy (contents + roff - 4,\n+\t\t\t\t  \"\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\\0\\x48\\x03\\x05\\0\\0\\0\",\n+\t\t\t\t  16);\n+\t\t\t}\n \t\t    }\n \t\t  else\n-\t\t    memcpy (contents + roff - 3,\n-\t\t\t    \"\\x64\\x8b\\x04\\x25\\0\\0\\0\\0\\x48\\x03\\x05\\0\\0\\0\",\n-\t\t\t    15);\n+\t\t    {\n+\t\t      if (roff < 3\n+\t\t\t  || (roff - 3 + 15) > input_section->size)\n+\t\t\tgoto corrupt_input;\n+\t\t      memcpy (contents + roff - 3,\n+\t\t\t      \"\\x64\\x8b\\x04\\x25\\0\\0\\0\\0\\x48\\x03\\x05\\0\\0\\0\",\n+\t\t\t      15);\n+\t\t    }\n \n \t\t  relocation = (htab->elf.sgot->output_section->vma\n \t\t\t\t+ htab->elf.sgot->output_offset + off\n@@ -3694,6 +3756,8 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t\t     turn a leaq into a movq in the form we use it, it\n \t\t     suffices to change the second byte from 0x8d to\n \t\t     0x8b.  */\n+\t\t  if (roff < 2)\n+\t\t    goto corrupt_input;\n \t\t  bfd_put_8 (output_bfd, 0x8b, contents + roff - 2);\n \n \t\t  bfd_put_32 (output_bfd,\n@@ -3762,28 +3826,58 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t      BFD_ASSERT (r_type == R_X86_64_TPOFF32);\n \t      if (ABI_64_P (output_bfd))\n \t\t{\n+\t\t  if ((rel->r_offset + 5) >= input_section->size)\n+\t\t    goto corrupt_input;\n \t\t  if (contents[rel->r_offset + 5] == 0xb8)\n-\t\t    memcpy (contents + rel->r_offset - 3,\n-\t\t\t    \"\\x66\\x66\\x66\\x66\\x2e\\x0f\\x1f\\x84\\0\\0\\0\\0\\0\"\n-\t\t\t    \"\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\", 22);\n+\t\t    {\n+\t\t      if (rel->r_offset < 3\n+\t\t\t  || (rel->r_offset - 3 + 22) > input_section->size)\n+\t\t\tgoto corrupt_input;\n+\t\t      memcpy (contents + rel->r_offset - 3,\n+\t\t\t      \"\\x66\\x66\\x66\\x66\\x2e\\x0f\\x1f\\x84\\0\\0\\0\\0\\0\"\n+\t\t\t      \"\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\", 22);\n+\t\t    }\n \t\t  else if (contents[rel->r_offset + 4] == 0xff\n \t\t\t   || contents[rel->r_offset + 4] == 0x67)\n-\t\t    memcpy (contents + rel->r_offset - 3,\n-\t\t\t    \"\\x66\\x66\\x66\\x66\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\",\n-\t\t\t    13);\n+\t\t    {\n+\t\t      if (rel->r_offset < 3\n+\t\t\t  || (rel->r_offset - 3 + 13) > input_section->size)\n+\t\t\tgoto corrupt_input;\n+\t\t      memcpy (contents + rel->r_offset - 3,\n+\t\t\t      \"\\x66\\x66\\x66\\x66\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\",\n+\t\t\t      13);\n+\n+\t\t    }\n \t\t  else\n-\t\t    memcpy (contents + rel->r_offset - 3,\n-\t\t\t    \"\\x66\\x66\\x66\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\", 12);\n+\t\t    {\n+\t\t      if (rel->r_offset < 3\n+\t\t\t  || (rel->r_offset - 3 + 12) > input_section->size)\n+\t\t\tgoto corrupt_input;\n+\t\t      memcpy (contents + rel->r_offset - 3,\n+\t\t\t      \"\\x66\\x66\\x66\\x64\\x48\\x8b\\x04\\x25\\0\\0\\0\", 12);\n+\t\t    }\n \t\t}\n \t      else\n \t\t{\n+\t\t  if ((rel->r_offset + 4) >= input_section->size)\n+\t\t    goto corrupt_input;\n \t\t  if (contents[rel->r_offset + 4] == 0xff)\n-\t\t    memcpy (contents + rel->r_offset - 3,\n-\t\t\t    \"\\x66\\x0f\\x1f\\x40\\x00\\x64\\x8b\\x04\\x25\\0\\0\\0\",\n-\t\t\t    13);\n+\t\t    {\n+\t\t      if (rel->r_offset < 3\n+\t\t\t  || (rel->r_offset - 3 + 13) > input_section->size)\n+\t\t\tgoto corrupt_input;\n+\t\t      memcpy (contents + rel->r_offset - 3,\n+\t\t\t      \"\\x66\\x0f\\x1f\\x40\\x00\\x64\\x8b\\x04\\x25\\0\\0\\0\",\n+\t\t\t      13);\n+\t\t    }\n \t\t  else\n-\t\t    memcpy (contents + rel->r_offset - 3,\n-\t\t\t    \"\\x0f\\x1f\\x40\\x00\\x64\\x8b\\x04\\x25\\0\\0\\0\", 12);\n+\t\t    {\n+\t\t      if (rel->r_offset < 3\n+\t\t\t  || (rel->r_offset - 3 + 12) > input_section->size)\n+\t\t\tgoto corrupt_input;\n+\t\t      memcpy (contents + rel->r_offset - 3,\n+\t\t\t      \"\\x0f\\x1f\\x40\\x00\\x64\\x8b\\x04\\x25\\0\\0\\0\", 12);\n+\t\t    }\n \t\t}\n \t      /* Skip R_X86_64_PC32, R_X86_64_PLT32, R_X86_64_GOTPCRELX\n \t\t and R_X86_64_PLTOFF64.  */"
    }
  ]
}