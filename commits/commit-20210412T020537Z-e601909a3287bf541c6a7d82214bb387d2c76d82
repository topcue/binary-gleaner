{
  "sha": "e601909a3287bf541c6a7d82214bb387d2c76d82",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTYwMTkwOWEzMjg3YmY1NDFjNmE3ZDgyMjE0YmIzODdkMmM3NmQ4Mg==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-04-07T04:50:19Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-04-12T02:05:37Z"
    },
    "message": "RISC-V: Support to parse the multi-letter prefix in the architecture string.\n\nThe original discussion is as follows,\nhttps://github.com/riscv/riscv-isa-manual/issues/637\n\nI never considered the prefixes may have multiple letters, like zxm.\nBut the ISA spec has been updated for a long time that I haven't noticed.\nThis patch rewrites the part of architecture parser to support parsing\nthe multi-letter prefixes.  Besides, I also improve the parser to report\nerrors in details.  One of the most obvious improvement is - Do not parse\nthe prefixed extensions according to the orders in the parse_config.\nIf we do so, then we used to get \"unexpected ISA string at end\" errors,\nbut the message is a little bit  hard to know what is happening.  I Remove\nthe confused message, and let riscv_parse_prefixed_ext to report the details.\n\nbfd/\n    * elfxx-riscv.c (riscv_std_z_ext_strtab): Moved forward.\n    (riscv_std_s_ext_strtab): Likewise.\n    (riscv_std_h_ext_strtab): Likewise.\n    (riscv_std_zxm_ext_strtab): Added for the zxm prefix.\n    (enum riscv_prefix_ext_class): Moved forward and renamed from\n    riscv_isa_ext_class.  Reorder them according to the parsing order,\n    since the enum values are used to check the orders in the\n    riscv_compare_subsets.\n    (struct riscv_parse_prefix_config): Moved forward and renamed from\n    riscv_parse_config_t.  Also removed the ext_valid_p field, the\n    related functions are replaced by riscv_valid_prefixed_ext.\n    (parse_config): Moved forward and updated.  The more letters of the\n    prefix string, the more forward it must be defined.  Otherwise, we\n    will get the wrong mapping when using strncmp in riscv_get_prefix_class.\n    (riscv_get_prefix_class): Moved forward.  Support to parse the\n    multi-letter prefix, like zxm.\n    (riscv_known_prefixed_ext): New function, check if the prefixed\n    extension is supported according to the right riscv_std_*_ext_strtab.\n    (riscv_valid_prefixed_ext): New function, used to replace the\n    riscv_ext_*_valid_p functions.\n    (riscv_init_ext_order): Do not set the values for prefix keywords\n    since they may have multiple letters for now.\n    (riscv_compare_subsets): Set the order values of prefix keywords\n    to negative numbers according to the riscv_prefix_ext_class.\n    (riscv_parse_std_ext): Call riscv_get_prefix_class to see if we\n    have parsed the prefixed extensions.\n    (riscv_parse_prefixed_ext): Updated and removed the parameter config.\n    Report error when the prefix is unknown.\n    (riscv_parse_subset): Do not parse the prefixed extensions according\n    to the orders in the parse_config.  Remove the confused message and\n    let riscv_parse_prefixed_ext to report the details.\n    * elfxx-riscv.h (enum riscv_isa_ext_class): Moved to elfxx-riscv.c.\n    (riscv_get_prefix_class): Removed to static.\ngas/\n    * testsuite/gas/riscv/march-fail-order-x-std.d: Renamed from\n    march-fail-porder-x-std.d.\n    * testsuite/gas/riscv/march-fail-order-z-std.d: Renamed from\n    march-fail-porder-z-std.d.\n    * testsuite/gas/riscv/march-fail-order-x-z.d: Renamed from\n    march-fail-porder-x-z.d.\n    * testsuite/gas/riscv/march-fail-order-zx-std.l: Added to replace\n    march-fail-porder.l.\n    * testsuite/gas/riscv/march-fail-order-x-z.l: Likewise.\n    * testsuite/gas/riscv/march-fail-order-x.l: Updated.\n    * testsuite/gas/riscv/march-fail-order-z.l: Likewise.\n    * testsuite/gas/riscv/march-fail-single-prefix-h.d: Renamed from\n    march-fail-single-char-h.d.\n    * testsuite/gas/riscv/march-fail-single-prefix-s.d: Renamed from\n    march-fail-single-char-s.d.\n    * testsuite/gas/riscv/march-fail-single-prefix-x.d: Renamed from\n    march-fail-single-char-x.d.\n    * testsuite/gas/riscv/march-fail-single-prefix-z.d: Renamed from\n    march-fail-single-char-z.d.\n    * testsuite/gas/riscv/march-fail-single-prefix-zmx.d: Added.\n    * testsuite/gas/riscv/march-fail-single-prefix.l: Added to replace\n    march-fail-single-prefix.l.\n    * testsuite/gas/riscv/march-fail-unknown-zxm.d: Added.\n    * testsuite/gas/riscv/march-fail-unknown-std.l: Updated.\n    * testsuite/gas/riscv/march-fail-unknown.l: Likewise.",
    "tree": {
      "sha": "b007c2468451cb6e85531e60b22bc9aa1cb5e94d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b007c2468451cb6e85531e60b22bc9aa1cb5e94d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e601909a3287bf541c6a7d82214bb387d2c76d82",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e601909a3287bf541c6a7d82214bb387d2c76d82",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e601909a3287bf541c6a7d82214bb387d2c76d82",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e601909a3287bf541c6a7d82214bb387d2c76d82/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "6803e1cb210ea0662afe8e783a9e8dd08a7dca9d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d"
    }
  ],
  "stats": {
    "total": 526,
    "additions": 291,
    "deletions": 235
  },
  "files": [
    {
      "sha": "266ebf3b572bbdc594acc34bc8c9f626cd4eb0c5",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -1,3 +1,39 @@\n+2021-04-12  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* elfxx-riscv.c (riscv_std_z_ext_strtab): Moved forward.\n+\t(riscv_std_s_ext_strtab): Likewise.\n+\t(riscv_std_h_ext_strtab): Likewise.\n+\t(riscv_std_zxm_ext_strtab): Added for the zxm prefix.\n+\t(enum riscv_prefix_ext_class): Moved forward and renamed from\n+\triscv_isa_ext_class.  Reorder them according to the parsing order,\n+\tsince the enum values are used to check the orders in the\n+\triscv_compare_subsets.\n+\t(struct riscv_parse_prefix_config): Moved forward and renamed from\n+\triscv_parse_config_t.  Also removed the ext_valid_p field, the\n+\trelated functions are replaced by riscv_valid_prefixed_ext.\n+\t(parse_config): Moved forward and updated.  The more letters of the\n+\tprefix string, the more forward it must be defined.  Otherwise, we\n+\twill get the wrong mapping when using strncmp in riscv_get_prefix_class.\n+\t(riscv_get_prefix_class): Moved forward.  Support to parse the\n+\tmulti-letter prefix, like zxm.\n+\t(riscv_known_prefixed_ext): New function, check if the prefixed\n+\textension is supported according to the right riscv_std_*_ext_strtab.\n+\t(riscv_valid_prefixed_ext): New function, used to replace the\n+\triscv_ext_*_valid_p functions.\n+\t(riscv_init_ext_order): Do not set the values for prefix keywords\n+\tsince they may have multiple letters for now.\n+\t(riscv_compare_subsets): Set the order values of prefix keywords\n+\tto negative numbers according to the riscv_prefix_ext_class.\n+\t(riscv_parse_std_ext): Call riscv_get_prefix_class to see if we\n+\thave parsed the prefixed extensions.\n+\t(riscv_parse_prefixed_ext): Updated and removed the parameter config.\n+\tReport error when the prefix is unknown.\n+\t(riscv_parse_subset): Do not parse the prefixed extensions according\n+\tto the orders in the parse_config.  Remove the confused message and\n+\tlet riscv_parse_prefixed_ext to report the details.\n+\t* elfxx-riscv.h (enum riscv_isa_ext_class): Moved to elfxx-riscv.c.\n+\t(riscv_get_prefix_class): Removed to static.\n+\n 2021-04-08  Mike Frysinger  <vapier@gentoo.org>\n \n \t* configure.ac (ACX_BUGURL): Use https://."
    },
    {
      "sha": "a8613d86bc468e89817f7467a3c5e1470fef04d2",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 196,
      "deletions": 199,
      "changes": 395,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -1028,16 +1028,167 @@ riscv_elf_add_sub_reloc (bfd *abfd,\n \n #define RISCV_UNKNOWN_VERSION -1\n \n-/* Array is used to compare the orders of all extensions quickly.\n+/* Lists of prefixed class extensions that binutils should know about.\n+   Whether or not a particular entry is in these lists will dictate if\n+   gas/ld will accept its presence in the architecture string.\n+\n+   Please add the extensions to the lists in lower case.  However, keep\n+   these subsets in alphabetical order in these tables is recommended,\n+   although there is no impact on the current implementation.  */\n+\n+static const char * const riscv_std_z_ext_strtab[] =\n+{\n+  \"zba\", \"zbb\", \"zbc\", \"zicsr\", \"zifencei\", \"zihintpause\", NULL\n+};\n+\n+static const char * const riscv_std_s_ext_strtab[] =\n+{\n+  NULL\n+};\n+\n+static const char * const riscv_std_h_ext_strtab[] =\n+{\n+  NULL\n+};\n+\n+static const char * const riscv_std_zxm_ext_strtab[] =\n+{\n+  NULL\n+};\n+\n+/* ISA extension prefixed name class.  Must define them in parsing order.  */\n+enum riscv_prefix_ext_class\n+{\n+  RV_ISA_CLASS_Z = 1,\n+  RV_ISA_CLASS_S,\n+  RV_ISA_CLASS_H,\n+  RV_ISA_CLASS_ZXM,\n+  RV_ISA_CLASS_X,\n+  RV_ISA_CLASS_UNKNOWN\n+};\n+\n+/* Record the strings of the prefixed extensions, and their corresponding\n+   classes.  The more letters of the prefix string, the more forward it must\n+   be defined.  Otherwise, the riscv_get_prefix_class will map it to the\n+   wrong classes.  */\n+struct riscv_parse_prefix_config\n+{\n+  /* Class of the extension. */\n+  enum riscv_prefix_ext_class class;\n+\n+  /* Prefix string for error printing and internal parser usage.  */\n+  const char *prefix;\n+};\n+static const struct riscv_parse_prefix_config parse_config[] =\n+{\n+  {RV_ISA_CLASS_ZXM, \"zxm\"},\n+  {RV_ISA_CLASS_Z, \"z\"},\n+  {RV_ISA_CLASS_S, \"s\"},\n+  {RV_ISA_CLASS_H, \"h\"},\n+  {RV_ISA_CLASS_X, \"x\"},\n+  {RV_ISA_CLASS_UNKNOWN, NULL}\n+};\n+\n+/* Get the prefixed name class for the extensions, the class also\n+   means the order of the prefixed extensions.  */\n+\n+static enum riscv_prefix_ext_class\n+riscv_get_prefix_class (const char *arch)\n+{\n+  int i = 0;\n+  while (parse_config[i].class != RV_ISA_CLASS_UNKNOWN)\n+    {\n+      if (strncmp (arch, parse_config[i].prefix,\n+\t\t   strlen (parse_config[i].prefix)) == 0)\n+\treturn parse_config[i].class;\n+      i++;\n+    }\n+  return RV_ISA_CLASS_UNKNOWN;\n+}\n+\n+/* Check KNOWN_EXTS to see if the EXT is supported.  */\n+\n+static bool\n+riscv_known_prefixed_ext (const char *ext,\n+\t\t\t  const char *const *known_exts)\n+{\n+  size_t i;\n+  for (i = 0; known_exts[i]; ++i)\n+    if (strcmp (ext, known_exts[i]) == 0)\n+      return true;\n+  return false;\n+}\n \n-   Zero value: Preserved keyword.\n-   Negative value: Prefixed keyword (s, h, x, z).\n-   Positive value: Standard extension.  */\n+/* Check whether the prefixed extension is valid or not.  Return\n+   true if valid, otehrwise return false.  */\n+\n+static bool\n+riscv_valid_prefixed_ext (const char *ext)\n+{\n+  enum riscv_prefix_ext_class class = riscv_get_prefix_class (ext);\n+  switch (class)\n+  {\n+  case RV_ISA_CLASS_Z:\n+    return riscv_known_prefixed_ext (ext, riscv_std_z_ext_strtab);\n+  case RV_ISA_CLASS_ZXM:\n+    return riscv_known_prefixed_ext (ext, riscv_std_zxm_ext_strtab);\n+  case RV_ISA_CLASS_S:\n+    return riscv_known_prefixed_ext (ext, riscv_std_s_ext_strtab);\n+  case RV_ISA_CLASS_H:\n+    return riscv_known_prefixed_ext (ext, riscv_std_h_ext_strtab);\n+  case RV_ISA_CLASS_X:\n+    /* Only the single x is invalid.  */\n+    if (strcmp (ext, \"x\") != 0)\n+      return true;\n+  default:\n+    break;\n+  }\n+  return false;\n+}\n+\n+/* Array is used to compare the orders of standard extensions quickly.  */\n static int riscv_ext_order[26] = {0};\n \n+/* Init the riscv_ext_order array.  */\n+\n+static void\n+riscv_init_ext_order (void)\n+{\n+  static bool inited = false;\n+  const char *std_base_exts = \"eig\";\n+  const char *std_remain_exts = riscv_supported_std_ext ();\n+  const char *ext;\n+  int order;\n+\n+  if (inited)\n+    return;\n+\n+  /* The orders of all standard extensions are positive.  */\n+  order = 1;\n+\n+  /* Init the standard base extensions first.  */\n+  for (ext = std_base_exts; *ext; ext++)\n+    riscv_ext_order[(*ext - 'a')] = order++;\n+\n+  /* Init the standard remaining extensions.  */\n+  for (ext = std_remain_exts; *ext; ext++)\n+    riscv_ext_order[(*ext - 'a')] = order++;\n+\n+  /* Some of the prefixed keyword are not single letter, so we set\n+     their prefixed orders in the riscv_compare_subsets directly,\n+     not through the riscv_ext_order.  */\n+\n+  inited = true;\n+}\n+\n /* Similar to the strcmp.  It returns an integer less than, equal to,\n    or greater than zero if `subset2` is found, respectively, to be less\n-   than, to match, or be greater than `subset1`.  */\n+   than, to match, or be greater than `subset1`.\n+\n+   The order values,\n+   Zero: Preserved keywords.\n+   Positive number: Standard extensions.\n+   Negative number: Prefixed keywords.  */\n \n int\n riscv_compare_subsets (const char *subset1, const char *subset2)\n@@ -1049,10 +1200,19 @@ riscv_compare_subsets (const char *subset1, const char *subset2)\n   if (order1 > 0 && order2 > 0)\n     return order1 - order2;\n \n-  if (order1 == order2 && order1 < 0)\n+  /* Set the prefixed orders to negative numbers.  */\n+  enum riscv_prefix_ext_class class1 = riscv_get_prefix_class (subset1);\n+  enum riscv_prefix_ext_class class2 = riscv_get_prefix_class (subset2);\n+\n+  if (class1 != RV_ISA_CLASS_UNKNOWN)\n+    order1 = - (int) class1;\n+  if (class2 != RV_ISA_CLASS_UNKNOWN)\n+    order2 = - (int) class2;\n+\n+  if (order1 == order2)\n     {\n       /* Compare the standard addition z extensions.  */\n-      if (*subset1 == 'z')\n+      if (class1 == RV_ISA_CLASS_Z)\n \t{\n \t  order1 = riscv_ext_order[(*++subset1 - 'a')];\n \t  order2 = riscv_ext_order[(*++subset2 - 'a')];\n@@ -1403,7 +1563,9 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \n   while (p != NULL && *p != '\\0')\n     {\n-      if (*p == 'x' || *p == 's' || *p == 'h' || *p == 'z')\n+      /* Stop when we parsed the known prefix class.  */\n+      enum riscv_prefix_ext_class class = riscv_get_prefix_class (p);\n+      if (class != RV_ISA_CLASS_UNKNOWN)\n \tbreak;\n \n       if (*p == '_')\n@@ -1419,10 +1581,10 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \n       if (std_ext != *std_exts)\n \t{\n-\t  if (strchr (all_std_exts, std_ext) == NULL)\n+\t  if (riscv_ext_order[(std_ext - 'a')] == 0)\n \t    rps->error_handler\n-\t      (_(\"-march=%s: unknown standard ISA extension `%c'\"),\n-\t       march, std_ext);\n+\t      (_(\"-march=%s: unknown standard and prefixed ISA \"\n+\t\t \"extension `%s'\"), march, p);\n \t  else\n \t    rps->error_handler\n \t      (_(\"-march=%s: standard ISA extension `%c' is not \"\n@@ -1443,38 +1605,6 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n   return p;\n }\n \n-/* Classify ARCH into one of riscv_isa_ext_class_t.  */\n-\n-riscv_isa_ext_class_t\n-riscv_get_prefix_class (const char *arch)\n-{\n-  switch (*arch)\n-    {\n-    case 's': return RV_ISA_CLASS_S;\n-    case 'h': return RV_ISA_CLASS_H;\n-    case 'x': return RV_ISA_CLASS_X;\n-    case 'z': return RV_ISA_CLASS_Z;\n-    default: return RV_ISA_CLASS_UNKNOWN;\n-    }\n-}\n-\n-/* Structure describing parameters to use when parsing a particular\n-   riscv_isa_ext_class_t.  One of these should be provided for each\n-   possible class, except RV_ISA_CLASS_UNKNOWN.  */\n-typedef struct riscv_parse_config\n-{\n-  /* Class of the extension. */\n-  riscv_isa_ext_class_t class;\n-\n-  /* Prefix string for error printing and internal parser usage.  */\n-  const char *prefix;\n-\n-  /* Predicate which is used for checking whether this is a \"known\"\n-     extension. For 'x', it always returns true since they are by\n-     definition non-standard and cannot be known.  */\n-  bool (*ext_valid_p) (const char *);\n-} riscv_parse_config_t;\n-\n /* Parsing function for prefixed extensions.\n \n    Return Value:\n@@ -1490,13 +1620,12 @@ typedef struct riscv_parse_config\n static const char *\n riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n \t\t\t  const char *march,\n-\t\t\t  const char *p,\n-\t\t\t  const riscv_parse_config_t *config)\n+\t\t\t  const char *p)\n {\n   int major_version;\n   int minor_version;\n   const char *last_name;\n-  riscv_isa_ext_class_t class;\n+  enum riscv_prefix_ext_class class;\n \n   while (*p)\n     {\n@@ -1506,12 +1635,14 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n \t  continue;\n \t}\n \n-      /* Assert that the current extension specifier matches our parsing\n-\t class.  */\n       class = riscv_get_prefix_class (p);\n-      if (class != config->class\n-\t  || class == RV_ISA_CLASS_UNKNOWN)\n-\tbreak;\n+      if (class == RV_ISA_CLASS_UNKNOWN)\n+\t{\n+\t  rps->error_handler\n+\t    (_(\"-march=%s: unknown prefix class for the ISA extension `%s'\"),\n+\t     march, p);\n+\t  return NULL;\n+\t}\n \n       char *subset = xstrdup (p);\n       char *q = subset;\n@@ -1532,18 +1663,18 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n \t  return NULL;\n \t}\n \n-      /* Check that the prefix extension is known.\n+      /* Check if the prefix extension is known.\n \t For 'x', anything goes but it cannot simply be 'x'.\n \t For 's', it must be known from a list and cannot simply be 's'.\n \t For 'h', it must be known from a list and cannot simply be 'h'.\n \t For 'z', it must be known from a list and cannot simply be 'z'.  */\n \n       /* Check that the extension name is well-formed.  */\n-      if (!config->ext_valid_p (subset))\n+      if (!riscv_valid_prefixed_ext (subset))\n \t{\n \t  rps->error_handler\n-\t    (_(\"-march=%s: unknown %s ISA extension `%s'\"),\n-\t     march, config->prefix, subset);\n+\t    (_(\"-march=%s: unknown prefixed ISA extension `%s'\"),\n+\t     march, subset);\n \t  free (subset);\n \t  return NULL;\n \t}\n@@ -1553,19 +1684,19 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n       if (!strcasecmp (last_name, subset))\n \t{\n \t  rps->error_handler\n-\t    (_(\"-march=%s: duplicate %s ISA extension `%s'\"),\n-\t     march, config->prefix, subset);\n+\t    (_(\"-march=%s: duplicate prefixed ISA extension `%s'\"),\n+\t     march, subset);\n \t  free (subset);\n \t  return NULL;\n \t}\n \n-      /* Check that the extension is in alphabetical order.  */\n+      /* Check that the extension is in expected order.  */\n       if (riscv_compare_subsets (last_name, subset) > 0)\n \t{\n \t  rps->error_handler\n-\t    (_(\"-march=%s: %s ISA extension `%s' is not in alphabetical \"\n+\t    (_(\"-march=%s: prefixed ISA extension `%s' is not in expected \"\n \t       \"order.  It must come before `%s'\"),\n-\t     march, config->prefix, subset, last_name);\n+\t     march, subset, last_name);\n \t  free (subset);\n \t  return NULL;\n \t}\n@@ -1579,141 +1710,15 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n       if (*p != '\\0' && *p != '_')\n \t{\n \t  rps->error_handler\n-\t    (_(\"-march=%s: %s ISA extension must separate with _\"),\n-\t     march, config->prefix);\n+\t    (_(\"-march=%s: prefixed ISA extension must separate with _\"),\n+\t     march);\n \t  return NULL;\n \t}\n     }\n \n   return p;\n }\n \n-/* Lists of prefixed class extensions that binutils should know about.\n-   Whether or not a particular entry is in these lists will dictate if\n-   gas/ld will accept its presence in the architecture string.\n-\n-   Please add the extensions to the lists in lower case.  However, keep\n-   these subsets in alphabetical order in these tables is recommended,\n-   although there is no impact on the current implementation.  */\n-\n-static const char * const riscv_std_z_ext_strtab[] =\n-{\n-  \"zba\", \"zbb\", \"zbc\", \"zicsr\", \"zifencei\", \"zihintpause\", NULL\n-};\n-\n-static const char * const riscv_std_s_ext_strtab[] =\n-{\n-  NULL\n-};\n-\n-static const char * const riscv_std_h_ext_strtab[] =\n-{\n-  NULL\n-};\n-\n-/* For the extension `ext`, search through the list of known extensions\n-   `known_exts` for a match, and return TRUE if found.  */\n-\n-static bool\n-riscv_multi_letter_ext_valid_p (const char *ext,\n-\t\t\t\tconst char *const *known_exts)\n-{\n-  size_t i;\n-\n-  for (i = 0; known_exts[i]; ++i)\n-    if (!strcmp (ext, known_exts[i]))\n-      return true;\n-\n-  return false;\n-}\n-\n-/* Predicator function for x-prefixed extensions.\n-   Anything goes, except the literal 'x'.  */\n-\n-static bool\n-riscv_ext_x_valid_p (const char *arg)\n-{\n-  if (!strcasecmp (arg, \"x\"))\n-    return false;\n-\n-  return true;\n-}\n-\n-/* Predicator functions for z-prefixed extensions.\n-   Only known z-extensions are permitted.  */\n-\n-static bool\n-riscv_ext_z_valid_p (const char *arg)\n-{\n-  return riscv_multi_letter_ext_valid_p (arg, riscv_std_z_ext_strtab);\n-}\n-\n-/* Predicator function for 's' prefixed extensions.\n-   Only known s-extensions are permitted.  */\n-\n-static bool\n-riscv_ext_s_valid_p (const char *arg)\n-{\n-  return riscv_multi_letter_ext_valid_p (arg, riscv_std_s_ext_strtab);\n-}\n-\n-/* Predicator function for 'h' prefixed extensions.\n-   Only known h-extensions are permitted.  */\n-\n-static bool\n-riscv_ext_h_valid_p (const char *arg)\n-{\n-  return riscv_multi_letter_ext_valid_p (arg, riscv_std_h_ext_strtab);\n-}\n-\n-/* Parsing order of the prefixed extensions that is specified by\n-   the ISA spec.  */\n-static const riscv_parse_config_t parse_config[] =\n-{\n-  {RV_ISA_CLASS_S, \"s\", riscv_ext_s_valid_p},\n-  {RV_ISA_CLASS_H, \"h\", riscv_ext_h_valid_p},\n-  {RV_ISA_CLASS_Z, \"z\", riscv_ext_z_valid_p},\n-  {RV_ISA_CLASS_X, \"x\", riscv_ext_x_valid_p},\n-  {RV_ISA_CLASS_UNKNOWN, NULL, NULL}\n-};\n-\n-/* Init the riscv_ext_order array.  */\n-\n-static void\n-riscv_init_ext_order (void)\n-{\n-  static bool inited = false;\n-  const char *std_base_exts = \"eig\";\n-  const char *std_remain_exts = riscv_supported_std_ext ();\n-  const char *ext;\n-  unsigned int i;\n-  int order;\n-\n-  if (inited)\n-    return;\n-\n-  /* The orders of all standard extensions are positive.  */\n-  order = 1;\n-\n-  /* Init the standard base extensions first.  */\n-  for (ext = std_base_exts; *ext; ext++)\n-    riscv_ext_order[(*ext - 'a')] = order++;\n-\n-  /* Init the standard remaining extensions.  */\n-  for (ext = std_remain_exts; *ext; ext++)\n-    riscv_ext_order[(*ext - 'a')] = order++;\n-\n-  /* Init the order for prefixed keywords.  The orders are negative.  */\n-  order = -1;\n-  for (i = 0; parse_config[i].class != RV_ISA_CLASS_UNKNOWN; i++)\n-    {\n-      ext = parse_config[i].prefix;\n-      riscv_ext_order[(*ext - 'a')] = order--;\n-    }\n-\n-  inited = true;\n-}\n-\n /* Add the implicit extensions.  */\n \n static void\n@@ -1787,7 +1792,6 @@ riscv_parse_subset (riscv_parse_subset_t *rps,\n {\n   riscv_subset_t *subset = NULL;\n   const char *p;\n-  size_t i;\n   bool no_conflict = true;\n \n   for (p = arch; *p != '\\0'; p++)\n@@ -1837,19 +1841,12 @@ riscv_parse_subset (riscv_parse_subset_t *rps,\n     return false;\n \n   /* Parse the different classes of extensions in the specified order.  */\n-  for (i = 0; i < ARRAY_SIZE (parse_config); ++i)\n+  while (*p != '\\0')\n     {\n-      p = riscv_parse_prefixed_ext (rps, arch, p, &parse_config[i]);\n+      p = riscv_parse_prefixed_ext (rps, arch, p);\n \n       if (p == NULL)\n-\treturn false;\n-    }\n-\n-  if (*p != '\\0')\n-    {\n-      rps->error_handler (_(\"-march=%s: unexpected ISA string at end: %s\"),\n-\t\t\t  arch, p);\n-      return false;\n+        return false;\n     }\n \n   /* Finally add implicit extensions according to the current"
    },
    {
      "sha": "2955b753fcaa628704ee157003b979838b059053",
      "filename": "bfd/elfxx-riscv.h",
      "status": "modified",
      "additions": 0,
      "deletions": 13,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/bfd/elfxx-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/bfd/elfxx-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.h?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -90,19 +90,6 @@ riscv_arch_str (unsigned, const riscv_subset_list_t *);\n extern size_t\n riscv_estimate_digit (unsigned);\n \n-/* ISA extension prefixed name class.  */\n-typedef enum riscv_isa_ext_class\n-{\n-  RV_ISA_CLASS_S,\n-  RV_ISA_CLASS_H,\n-  RV_ISA_CLASS_Z,\n-  RV_ISA_CLASS_X,\n-  RV_ISA_CLASS_UNKNOWN\n-} riscv_isa_ext_class_t;\n-\n-riscv_isa_ext_class_t\n-riscv_get_prefix_class (const char *);\n-\n extern int\n riscv_compare_subsets (const char *, const char *);\n "
    },
    {
      "sha": "15e4c071929c00b4ad210da5acb5fa1007ec4988",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -1,3 +1,31 @@\n+2021-04-12  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* testsuite/gas/riscv/march-fail-order-x-std.d: Renamed from\n+\tmarch-fail-porder-x-std.d.\n+\t* testsuite/gas/riscv/march-fail-order-z-std.d: Renamed from\n+\tmarch-fail-porder-z-std.d.\n+\t* testsuite/gas/riscv/march-fail-order-x-z.d: Renamed from\n+\tmarch-fail-porder-x-z.d.\n+\t* testsuite/gas/riscv/march-fail-order-zx-std.l: Added to replace\n+\tmarch-fail-porder.l.\n+\t* testsuite/gas/riscv/march-fail-order-x-z.l: Likewise.\n+\t* testsuite/gas/riscv/march-fail-order-x.l: Updated.\n+\t* testsuite/gas/riscv/march-fail-order-z.l: Likewise.\n+\t* testsuite/gas/riscv/march-fail-single-prefix-h.d: Renamed from\n+\tmarch-fail-single-char-h.d.\n+\t* testsuite/gas/riscv/march-fail-single-prefix-s.d: Renamed from\n+\tmarch-fail-single-char-s.d.\n+\t* testsuite/gas/riscv/march-fail-single-prefix-x.d: Renamed from\n+\tmarch-fail-single-char-x.d.\n+\t* testsuite/gas/riscv/march-fail-single-prefix-z.d: Renamed from\n+\tmarch-fail-single-char-z.d.\n+\t* testsuite/gas/riscv/march-fail-single-prefix-zmx.d: Added.\n+\t* testsuite/gas/riscv/march-fail-single-prefix.l: Added to replace\n+\tmarch-fail-single-prefix.l.\n+\t* testsuite/gas/riscv/march-fail-unknown-zxm.d: Added.\n+\t* testsuite/gas/riscv/march-fail-unknown-std.l: Updated.\n+\t* testsuite/gas/riscv/march-fail-unknown.l: Likewise.\n+\n 2021-04-09  Tejas Belagod  <tejas.belagod@arm.com>\n \n \t* config/tc-aarch64.c (warn_unpredictable_ldst): Clean-up diagnostic messages"
    },
    {
      "sha": "4762f3dd95caf72c905f329f810b00ab40646d55",
      "filename": "gas/testsuite/gas/riscv/march-fail-order-x-std.d",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-x-std.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-x-std.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-order-x-std.d?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -1,3 +1,3 @@\n #as: -march=rv32i_xargle2p0_mafd\n #source: empty.s\n-#error_output: march-fail-porder.l\n+#error_output: march-fail-order-zx-std.l",
      "previous_filename": "gas/testsuite/gas/riscv/march-fail-porder-x-std.d"
    },
    {
      "sha": "7245e68e0eaf1133fcab38f488399598db9edb2e",
      "filename": "gas/testsuite/gas/riscv/march-fail-order-x-z.d",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-x-z.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-x-z.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-order-x-z.d?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -1,3 +1,3 @@\n #as: -march=rv32i_xargle2p0_zicsr2p0\n #source: empty.s\n-#error_output: march-fail-porder.l\n+#error_output: march-fail-order-x-z.l",
      "previous_filename": "gas/testsuite/gas/riscv/march-fail-porder-x-z.d"
    },
    {
      "sha": "53ea82011875846d689d06ac10a38ebfaa69af14",
      "filename": "gas/testsuite/gas/riscv/march-fail-order-x-z.l",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-x-z.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-x-z.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-order-x-z.l?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -0,0 +1,2 @@\n+.*Assembler messages:\n+.*Error: .*prefixed ISA extension `zicsr' is not in expected order.  It must come before `xargle'"
    },
    {
      "sha": "cfb118528df536fa98a35097ddd974316cd2559f",
      "filename": "gas/testsuite/gas/riscv/march-fail-order-x.l",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-x.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-x.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-order-x.l?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -1,2 +1,2 @@\n .*Assembler messages:\n-.*Error: .*x ISA extension `xargle' is not in alphabetical order.  It must come before `xbargle'\n+.*Error: .*prefixed ISA extension `xargle' is not in expected order.  It must come before `xbargle'"
    },
    {
      "sha": "42526de3621494a371c272b42057cd0040d13657",
      "filename": "gas/testsuite/gas/riscv/march-fail-order-z-std.d",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-z-std.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-z-std.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-order-z-std.d?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -1,3 +1,3 @@\n #as: -march=rv32i_zicsr2p0_mafd\n #source: empty.s\n-#error_output: march-fail-porder.l\n+#error_output: march-fail-order-zx-std.l",
      "previous_filename": "gas/testsuite/gas/riscv/march-fail-porder-z-std.d"
    },
    {
      "sha": "468c412051f96c22e6d6d2f4c889a3e24c403baa",
      "filename": "gas/testsuite/gas/riscv/march-fail-order-z.l",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-z.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-z.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-order-z.l?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -1,2 +1,2 @@\n .*Assembler messages:\n-.*Error: .*z ISA extension `zicsr' is not in alphabetical order.  It must come before `zifencei'\n+.*Error: .*prefixed ISA extension `zicsr' is not in expected order.  It must come before `zifencei'"
    },
    {
      "sha": "4f6b98c592eb72805fbdf14995a3008f4a5d62a2",
      "filename": "gas/testsuite/gas/riscv/march-fail-order-zx-std.l",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-zx-std.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-order-zx-std.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-order-zx-std.l?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -0,0 +1,2 @@\n+.*Assembler messages:\n+.*Error: .*unknown prefix class for the ISA extension `mafd'"
    },
    {
      "sha": "c5496eab4995b9f4c4b6b4ab57acab010fd152ce",
      "filename": "gas/testsuite/gas/riscv/march-fail-porder.l",
      "status": "removed",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-porder.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-porder.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-porder.l?ref=6803e1cb210ea0662afe8e783a9e8dd08a7dca9d",
      "patch": "@@ -1,2 +0,0 @@\n-.*Assembler messages:\n-.*Error: .*unexpected ISA string at end:.*"
    },
    {
      "sha": "7fca9576bf3cc72952dc4ebe07d11d4efe720f6a",
      "filename": "gas/testsuite/gas/riscv/march-fail-single-char-h.d",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-single-char-h.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-single-char-h.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-single-char-h.d?ref=6803e1cb210ea0662afe8e783a9e8dd08a7dca9d",
      "patch": "@@ -1,3 +0,0 @@\n-#as: -march=rv32ih\n-#source: empty.s\n-#error_output: march-fail-single-char.l"
    },
    {
      "sha": "b3aace9122bce18513defd7ad5f689ef8a690374",
      "filename": "gas/testsuite/gas/riscv/march-fail-single-char-s.d",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-single-char-s.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-single-char-s.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-single-char-s.d?ref=6803e1cb210ea0662afe8e783a9e8dd08a7dca9d",
      "patch": "@@ -1,3 +0,0 @@\n-#as: -march=rv32is\n-#source: empty.s\n-#error_output: march-fail-single-char.l"
    },
    {
      "sha": "585608cb82e137545114b1de50da6e4dd07e5ad4",
      "filename": "gas/testsuite/gas/riscv/march-fail-single-char-x.d",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-single-char-x.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-single-char-x.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-single-char-x.d?ref=6803e1cb210ea0662afe8e783a9e8dd08a7dca9d",
      "patch": "@@ -1,3 +0,0 @@\n-#as: -march=rv32ix\n-#source: empty.s\n-#error_output: march-fail-single-char.l"
    },
    {
      "sha": "daf96d2124d54a4b9c4a9f420ee141868709af09",
      "filename": "gas/testsuite/gas/riscv/march-fail-single-char-z.d",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-single-char-z.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-single-char-z.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-single-char-z.d?ref=6803e1cb210ea0662afe8e783a9e8dd08a7dca9d",
      "patch": "@@ -1,3 +0,0 @@\n-#as: -march=rv32iz\n-#source: empty.s\n-#error_output: march-fail-single-char.l"
    },
    {
      "sha": "435d0b23a4fbc2a9f5d12f2c6861ddbf2900edd7",
      "filename": "gas/testsuite/gas/riscv/march-fail-single-char.l",
      "status": "removed",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-single-char.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6803e1cb210ea0662afe8e783a9e8dd08a7dca9d/gas/testsuite/gas/riscv/march-fail-single-char.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-single-char.l?ref=6803e1cb210ea0662afe8e783a9e8dd08a7dca9d",
      "patch": "@@ -1,2 +0,0 @@\n-.*Assembler messages:\n-.*Error: .*unknown (s|h|z|x) ISA extension `(s|h|z|x)'"
    },
    {
      "sha": "eb101bd71353aa14508a844746d9a57fab497bb1",
      "filename": "gas/testsuite/gas/riscv/march-fail-single-prefix-h.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix-h.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix-h.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-single-prefix-h.d?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=rv32ih\n+#source: empty.s\n+#error_output: march-fail-single-prefix.l"
    },
    {
      "sha": "8b6b0d0f34df5e74e6f3a985e55f26563f0285a4",
      "filename": "gas/testsuite/gas/riscv/march-fail-single-prefix-s.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix-s.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix-s.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-single-prefix-s.d?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=rv32is\n+#source: empty.s\n+#error_output: march-fail-single-prefix.l"
    },
    {
      "sha": "9e87801c95c082e225cc0839bc2721163c4ececb",
      "filename": "gas/testsuite/gas/riscv/march-fail-single-prefix-x.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix-x.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix-x.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-single-prefix-x.d?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=rv32ix\n+#source: empty.s\n+#error_output: march-fail-single-prefix.l"
    },
    {
      "sha": "4ae26926230d48b64eccea3b4d06e9241fdb8468",
      "filename": "gas/testsuite/gas/riscv/march-fail-single-prefix-z.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix-z.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix-z.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-single-prefix-z.d?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=rv32iz\n+#source: empty.s\n+#error_output: march-fail-single-prefix.l"
    },
    {
      "sha": "bdf6f86784a483e4177e44c71dc2986f0c3bdb6c",
      "filename": "gas/testsuite/gas/riscv/march-fail-single-prefix-zxm.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix-zxm.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix-zxm.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-single-prefix-zxm.d?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=rv32izxm\n+#source: empty.s\n+#error_output: march-fail-single-prefix.l"
    },
    {
      "sha": "13942ed666424037752001e3c952e7f2453400f2",
      "filename": "gas/testsuite/gas/riscv/march-fail-single-prefix.l",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-single-prefix.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-single-prefix.l?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -0,0 +1,2 @@\n+.*Assembler messages:\n+.*Error: .*unknown prefixed ISA extension `(s|h|z|x|zxm)'"
    },
    {
      "sha": "0e9add790565064dd0e9c872c37503bac0c7ef4c",
      "filename": "gas/testsuite/gas/riscv/march-fail-unknown-std.l",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-unknown-std.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-unknown-std.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-unknown-std.l?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -1,2 +1,2 @@\n .*Assembler messages:\n-.*Error: .*unknown standard ISA extension `[^eimafdqiglcbjtpvn]'\n+.*Error: .*unknown standard and prefixed ISA extension `y'"
    },
    {
      "sha": "b3d46032ea5e44acf68ec91622d1ab2de7b7775f",
      "filename": "gas/testsuite/gas/riscv/march-fail-unknown-zxm.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-unknown-zxm.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-unknown-zxm.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-unknown-zxm.d?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=rv32izxmfoo2p0\n+#source: empty.s\n+#error_output: march-fail-unknown.l"
    },
    {
      "sha": "0cc8096fed49278e4fd414c93743ff578baaea11",
      "filename": "gas/testsuite/gas/riscv/march-fail-unknown.l",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-unknown.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e601909a3287bf541c6a7d82214bb387d2c76d82/gas/testsuite/gas/riscv/march-fail-unknown.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-unknown.l?ref=e601909a3287bf541c6a7d82214bb387d2c76d82",
      "patch": "@@ -1,2 +1,2 @@\n .*Assembler messages:\n-.*Error: .*unknown (s|h|z) ISA extension `(s|h|z)foo'\n+.*Error: .*unknown prefixed ISA extension `(s|h|z|zxm)foo'"
    }
  ]
}