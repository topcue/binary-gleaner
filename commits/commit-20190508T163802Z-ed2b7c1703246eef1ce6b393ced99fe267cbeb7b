{
  "sha": "ed2b7c1703246eef1ce6b393ced99fe267cbeb7b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWQyYjdjMTcwMzI0NmVlZjFjZTZiMzkzY2VkOTlmZTI2N2NiZWI3Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-05-01T18:35:20Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-05-08T16:38:02Z"
    },
    "message": "Move \"watchdog\" to remote.c\n\nThe \"watchdog\" global is only used in remote.c, so this patch moves it\nthere and makes it static.\n\ngdb/ChangeLog\n2019-05-08  Tom Tromey  <tromey@adacore.com>\n\n\t* maint.c (_initialize_maint_cmds): Move initialization code to\n\tremote.c.\n\t(watchdog, show_watchdog): Move to remote.c.\n\t* remote.c (watchdog, show_watchdog): Move from maint.c.  Make\n\t\"watchdog\" static.\n\t(_initialize_remote): Move initialization code from maint.c.\n\t* defs.h (watchdog): Don't declare.",
    "tree": {
      "sha": "c45d0fb40fb4972dfba9ed4654bcab410db29810",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c45d0fb40fb4972dfba9ed4654bcab410db29810"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b0be6c912f9e901a87740c72f18be1e54ad5267d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0be6c912f9e901a87740c72f18be1e54ad5267d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b0be6c912f9e901a87740c72f18be1e54ad5267d"
    }
  ],
  "stats": {
    "total": 62,
    "additions": 34,
    "deletions": 28
  },
  "files": [
    {
      "sha": "836ed8acef04ba8e5c5cf842c1b3722209fc5972",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ed2b7c1703246eef1ce6b393ced99fe267cbeb7b",
      "patch": "@@ -1,3 +1,13 @@\n+2019-05-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* maint.c (_initialize_maint_cmds): Move initialization code to\n+\tremote.c.\n+\t(watchdog, show_watchdog): Move to remote.c.\n+\t* remote.c (watchdog, show_watchdog): Move from maint.c.  Make\n+\t\"watchdog\" static.\n+\t(_initialize_remote): Move initialization code from maint.c.\n+\t* defs.h (watchdog): Don't declare.\n+\n 2019-05-08  Tom Tromey  <tromey@adacore.com>\n \n \t* tui/tui-interp.c: Include main.h."
    },
    {
      "sha": "e95d0d434805444840edc54d19ebf8d07e193939",
      "filename": "gdb/defs.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b/gdb/defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b/gdb/defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/defs.h?ref=ed2b7c1703246eef1ce6b393ced99fe267cbeb7b",
      "patch": "@@ -578,10 +578,6 @@ extern void copy_integer_to_size (gdb_byte *dest, int dest_size,\n \t\t\t\t  const gdb_byte *source, int source_size,\n \t\t\t\t  bool is_signed, enum bfd_endian byte_order);\n \n-/* From valops.c */\n-\n-extern int watchdog;\n-\n /* Hooks for alternate command interfaces.  */\n \n struct target_waitstatus;"
    },
    {
      "sha": "328d6026a341c95798d295f786812b279e7e3c98",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 0,
      "deletions": 24,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=ed2b7c1703246eef1ce6b393ced99fe267cbeb7b",
      "patch": "@@ -46,20 +46,6 @@\n \n static void maintenance_do_deprecate (const char *, int);\n \n-/* Set this to the maximum number of seconds to wait instead of waiting forever\n-   in target_wait().  If this timer times out, then it generates an error and\n-   the command is aborted.  This replaces most of the need for timeouts in the\n-   GDB test suite, and makes it possible to distinguish between a hung target\n-   and one with slow communications.  */\n-\n-int watchdog = 0;\n-static void\n-show_watchdog (struct ui_file *file, int from_tty,\n-\t       struct cmd_list_element *c, const char *value)\n-{\n-  fprintf_filtered (file, _(\"Watchdog timer is %s.\\n\"), value);\n-}\n-\n /* Access the maintenance subcommands.  */\n \n static void\n@@ -1148,16 +1134,6 @@ If a filter is given, only the tests with that value in their name will ran.\"),\n   add_cmd (\"selftests\", class_maintenance, maintenance_info_selftests,\n \t _(\"List the registered selftests.\"), &maintenanceinfolist);\n \n-  add_setshow_zinteger_cmd (\"watchdog\", class_maintenance, &watchdog, _(\"\\\n-Set watchdog timer.\"), _(\"\\\n-Show watchdog timer.\"), _(\"\\\n-When non-zero, this timeout is used instead of waiting forever for a target\\n\\\n-to finish a low-level step or continue operation.  If the specified amount\\n\\\n-of time passes without a response from the target, an error occurs.\"),\n-\t\t\t    NULL,\n-\t\t\t    show_watchdog,\n-\t\t\t    &setlist, &showlist);\n-\n   add_setshow_boolean_cmd (\"profile\", class_maintenance,\n \t\t\t   &maintenance_profile_p, _(\"\\\n Set internal profiling.\"), _(\"\\"
    },
    {
      "sha": "0fb7404b0682a41d909a7419340a034dd71d8bcc",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed2b7c1703246eef1ce6b393ced99fe267cbeb7b/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=ed2b7c1703246eef1ce6b393ced99fe267cbeb7b",
      "patch": "@@ -9461,6 +9461,20 @@ remote_target::read_frame (gdb::char_vector *buf_p)\n     }\n }\n \n+/* Set this to the maximum number of seconds to wait instead of waiting forever\n+   in target_wait().  If this timer times out, then it generates an error and\n+   the command is aborted.  This replaces most of the need for timeouts in the\n+   GDB test suite, and makes it possible to distinguish between a hung target\n+   and one with slow communications.  */\n+\n+static int watchdog = 0;\n+static void\n+show_watchdog (struct ui_file *file, int from_tty,\n+\t       struct cmd_list_element *c, const char *value)\n+{\n+  fprintf_filtered (file, _(\"Watchdog timer is %s.\\n\"), value);\n+}\n+\n /* Read a packet from the remote machine, with error checking, and\n    store it in *BUF.  Resize *BUF if necessary to hold the result.  If\n    FOREVER, wait forever rather than timing out; this is used (in\n@@ -14752,6 +14766,16 @@ stepping is supported by the target.  The default is on.\"),\n \t\t\t   &setlist,\n \t\t\t   &showlist);\n \n+  add_setshow_zinteger_cmd (\"watchdog\", class_maintenance, &watchdog, _(\"\\\n+Set watchdog timer.\"), _(\"\\\n+Show watchdog timer.\"), _(\"\\\n+When non-zero, this timeout is used instead of waiting forever for a target\\n\\\n+to finish a low-level step or continue operation.  If the specified amount\\n\\\n+of time passes without a response from the target, an error occurs.\"),\n+\t\t\t    NULL,\n+\t\t\t    show_watchdog,\n+\t\t\t    &setlist, &showlist);\n+\n   /* Eventually initialize fileio.  See fileio.c */\n   initialize_remote_fileio (remote_set_cmdlist, remote_show_cmdlist);\n }"
    }
  ]
}