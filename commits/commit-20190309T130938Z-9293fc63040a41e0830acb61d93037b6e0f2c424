{
  "sha": "9293fc63040a41e0830acb61d93037b6e0f2c424",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTI5M2ZjNjMwNDBhNDFlMDgzMGFjYjYxZDkzMDM3YjZlMGYyYzQyNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-03-08T15:15:07Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-03-09T13:09:38Z"
    },
    "message": "Split rank_one_type_parm_ptr from rank_one_type\n\ngdb/ChangeLog:\n\n\t* gdbtypes.c (rank_one_type_parm_ptr): New function extracted\n\tfrom...\n\t(rank_one_type): ... this.",
    "tree": {
      "sha": "1fe70cb59f6c1e526cef7dbf15b2aff2640ce430",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1fe70cb59f6c1e526cef7dbf15b2aff2640ce430"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9293fc63040a41e0830acb61d93037b6e0f2c424",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9293fc63040a41e0830acb61d93037b6e0f2c424",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9293fc63040a41e0830acb61d93037b6e0f2c424",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9293fc63040a41e0830acb61d93037b6e0f2c424/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e3abbe7e9458be7a92c27bc4649295b935340699",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e3abbe7e9458be7a92c27bc4649295b935340699",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e3abbe7e9458be7a92c27bc4649295b935340699"
    }
  ],
  "stats": {
    "total": 142,
    "additions": 79,
    "deletions": 63
  },
  "files": [
    {
      "sha": "4afd9b65c59a4a291bbe2fcef88e8131893a907f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9293fc63040a41e0830acb61d93037b6e0f2c424/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9293fc63040a41e0830acb61d93037b6e0f2c424/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9293fc63040a41e0830acb61d93037b6e0f2c424",
      "patch": "@@ -1,3 +1,9 @@\n+2019-03-08  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.c (rank_one_type_parm_ptr): New function extracted\n+\tfrom...\n+\t(rank_one_type): ... this.\n+\n 2019-02-27  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* inferior.c (initialize_inferiors): Ensure 'help set/show print"
    },
    {
      "sha": "b4b9273585821877a49cda4d0e516a7d6538bf94",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 73,
      "deletions": 63,
      "changes": 136,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9293fc63040a41e0830acb61d93037b6e0f2c424/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9293fc63040a41e0830acb61d93037b6e0f2c424/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=9293fc63040a41e0830acb61d93037b6e0f2c424",
      "patch": "@@ -3785,7 +3785,78 @@ type_not_associated (const struct type *type)\n   return (prop && TYPE_DYN_PROP_KIND (prop) == PROP_CONST\n          && !TYPE_DYN_PROP_ADDR (prop));\n }\n-\f\n+\n+/* rank_one_type helper for when PARM's type code is TYPE_CODE_PTR.  */\n+\n+static struct rank\n+rank_one_type_parm_ptr (struct type *parm, struct type *arg, struct value *value)\n+{\n+  struct rank rank = {0,0};\n+\n+  switch (TYPE_CODE (arg))\n+    {\n+    case TYPE_CODE_PTR:\n+\n+      /* Allowed pointer conversions are:\n+\t (a) pointer to void-pointer conversion.  */\n+      if (TYPE_CODE (TYPE_TARGET_TYPE (parm)) == TYPE_CODE_VOID)\n+\treturn VOID_PTR_CONVERSION_BADNESS;\n+\n+      /* (b) pointer to ancestor-pointer conversion.  */\n+      rank.subrank = distance_to_ancestor (TYPE_TARGET_TYPE (parm),\n+\t\t\t\t\t   TYPE_TARGET_TYPE (arg),\n+\t\t\t\t\t   0);\n+      if (rank.subrank >= 0)\n+\treturn sum_ranks (BASE_PTR_CONVERSION_BADNESS, rank);\n+\n+      return INCOMPATIBLE_TYPE_BADNESS;\n+    case TYPE_CODE_ARRAY:\n+      {\n+\tstruct type *t1 = TYPE_TARGET_TYPE (parm);\n+\tstruct type *t2 = TYPE_TARGET_TYPE (arg);\n+\n+\tif (types_equal (t1, t2))\n+\t  {\n+\t    /* Make sure they are CV equal.  */\n+\t    if (TYPE_CONST (t1) != TYPE_CONST (t2))\n+\t      rank.subrank |= CV_CONVERSION_CONST;\n+\t    if (TYPE_VOLATILE (t1) != TYPE_VOLATILE (t2))\n+\t      rank.subrank |= CV_CONVERSION_VOLATILE;\n+\t    if (rank.subrank != 0)\n+\t      return sum_ranks (CV_CONVERSION_BADNESS, rank);\n+\t    return EXACT_MATCH_BADNESS;\n+\t  }\n+\treturn INCOMPATIBLE_TYPE_BADNESS;\n+      }\n+    case TYPE_CODE_FUNC:\n+      return rank_one_type (TYPE_TARGET_TYPE (parm), arg, NULL);\n+    case TYPE_CODE_INT:\n+      if (value != NULL && TYPE_CODE (value_type (value)) == TYPE_CODE_INT)\n+\t{\n+\t  if (value_as_long (value) == 0)\n+\t    {\n+\t      /* Null pointer conversion: allow it to be cast to a pointer.\n+\t\t [4.10.1 of C++ standard draft n3290]  */\n+\t      return NULL_POINTER_CONVERSION_BADNESS;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* If type checking is disabled, allow the conversion.  */\n+\t      if (!strict_type_checking)\n+\t\treturn NS_INTEGER_POINTER_CONVERSION_BADNESS;\n+\t    }\n+\t}\n+      /* fall through  */\n+    case TYPE_CODE_ENUM:\n+    case TYPE_CODE_FLAGS:\n+    case TYPE_CODE_CHAR:\n+    case TYPE_CODE_RANGE:\n+    case TYPE_CODE_BOOL:\n+    default:\n+      return INCOMPATIBLE_TYPE_BADNESS;\n+    }\n+}\n+\n /* Compare one type (PARM) for compatibility with another (ARG).\n  * PARM is intended to be the parameter type of a function; and\n  * ARG is the supplied argument's type.  This function tests if\n@@ -3876,68 +3947,7 @@ rank_one_type (struct type *parm, struct type *arg, struct value *value)\n   switch (TYPE_CODE (parm))\n     {\n     case TYPE_CODE_PTR:\n-      switch (TYPE_CODE (arg))\n-\t{\n-\tcase TYPE_CODE_PTR:\n-\n-\t  /* Allowed pointer conversions are:\n-\t     (a) pointer to void-pointer conversion.  */\n-\t  if (TYPE_CODE (TYPE_TARGET_TYPE (parm)) == TYPE_CODE_VOID)\n-\t    return VOID_PTR_CONVERSION_BADNESS;\n-\n-\t  /* (b) pointer to ancestor-pointer conversion.  */\n-\t  rank.subrank = distance_to_ancestor (TYPE_TARGET_TYPE (parm),\n-\t                                       TYPE_TARGET_TYPE (arg),\n-\t                                       0);\n-\t  if (rank.subrank >= 0)\n-\t    return sum_ranks (BASE_PTR_CONVERSION_BADNESS, rank);\n-\n-\t  return INCOMPATIBLE_TYPE_BADNESS;\n-\tcase TYPE_CODE_ARRAY:\n-\t  {\n-\t    struct type *t1 = TYPE_TARGET_TYPE (parm);\n-\t    struct type *t2 = TYPE_TARGET_TYPE (arg);\n-\n-\t    if (types_equal (t1, t2))\n-\t      {\n-\t\t/* Make sure they are CV equal.  */\n-\t\tif (TYPE_CONST (t1) != TYPE_CONST (t2))\n-\t\t  rank.subrank |= CV_CONVERSION_CONST;\n-\t\tif (TYPE_VOLATILE (t1) != TYPE_VOLATILE (t2))\n-\t\t  rank.subrank |= CV_CONVERSION_VOLATILE;\n-\t\tif (rank.subrank != 0)\n-\t\t  return sum_ranks (CV_CONVERSION_BADNESS, rank);\n-\t\treturn EXACT_MATCH_BADNESS;\n-\t      }\n-\t    return INCOMPATIBLE_TYPE_BADNESS;\n-\t  }\n-\tcase TYPE_CODE_FUNC:\n-\t  return rank_one_type (TYPE_TARGET_TYPE (parm), arg, NULL);\n-\tcase TYPE_CODE_INT:\n-\t  if (value != NULL && TYPE_CODE (value_type (value)) == TYPE_CODE_INT)\n-\t    {\n-\t      if (value_as_long (value) == 0)\n-\t\t{\n-\t\t  /* Null pointer conversion: allow it to be cast to a pointer.\n-\t\t     [4.10.1 of C++ standard draft n3290]  */\n-\t\t  return NULL_POINTER_CONVERSION_BADNESS;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  /* If type checking is disabled, allow the conversion.  */\n-\t\t  if (!strict_type_checking)\n-\t\t    return NS_INTEGER_POINTER_CONVERSION_BADNESS;\n-\t\t}\n-\t    }\n-\t  /* fall through  */\n-\tcase TYPE_CODE_ENUM:\n-\tcase TYPE_CODE_FLAGS:\n-\tcase TYPE_CODE_CHAR:\n-\tcase TYPE_CODE_RANGE:\n-\tcase TYPE_CODE_BOOL:\n-\tdefault:\n-\t  return INCOMPATIBLE_TYPE_BADNESS;\n-\t}\n+      return rank_one_type_parm_ptr (parm, arg, value);\n     case TYPE_CODE_ARRAY:\n       switch (TYPE_CODE (arg))\n \t{"
    }
  ]
}