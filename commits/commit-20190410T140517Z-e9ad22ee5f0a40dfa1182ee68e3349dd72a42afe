{
  "sha": "e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTlhZDIyZWU1ZjBhNDBkZmExMTgyZWU2OGUzMzQ5ZGQ3MmE0MmFmZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-10T21:37:20Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-10T14:05:17Z"
    },
    "message": "Introduce a separate debug objfile iterator\n\nThis introduces a new iterator and range adapter for iteration over\nthe separate debug files of a given objfile.  As in the current\napproach, the requested objfile is returned first, followed by the\nseparate debug objfiles.\n\ngdb/ChangeLog\n2019-04-10  Tom Tromey  <tom@tromey.com>\n\n\t* symtab.c (lookup_global_symbol_from_objfile)\n\t(lookup_symbol_in_objfile_from_linkage_name): Use the iterator.\n\t* objfiles.h (class separate_debug_iterator): New.\n\t(class separate_debug_range): New.\n\t(struct objfile) <separate_debug_objfiles>: New method.\n\t(objfile_separate_debug_iterate): Don't declare.\n\t* objfiles.c (separate_debug_iterator::operator++): Rename from\n\tobjfile_separate_debug_iterate.\n\t(objfile_relocate, objfile_rebase, objfile_has_symbols): Use the\n\titerator.\n\t* minsyms.c (lookup_minimal_symbol_by_pc_section): Use the\n\titerator.",
    "tree": {
      "sha": "5500e93752b2711677dbcd2524e1d91f067bd680",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5500e93752b2711677dbcd2524e1d91f067bd680"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ee3711344b6e0cffeb237fa6889aab04853f9004",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee3711344b6e0cffeb237fa6889aab04853f9004",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ee3711344b6e0cffeb237fa6889aab04853f9004"
    }
  ],
  "stats": {
    "total": 175,
    "additions": 121,
    "deletions": 54
  },
  "files": [
    {
      "sha": "f0797b6012c8ba06c207f9ce352a6a8e116cf314",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe",
      "patch": "@@ -1,3 +1,18 @@\n+2019-04-10  Tom Tromey  <tom@tromey.com>\n+\n+\t* symtab.c (lookup_global_symbol_from_objfile)\n+\t(lookup_symbol_in_objfile_from_linkage_name): Use the iterator.\n+\t* objfiles.h (class separate_debug_iterator): New.\n+\t(class separate_debug_range): New.\n+\t(struct objfile) <separate_debug_objfiles>: New method.\n+\t(objfile_separate_debug_iterate): Don't declare.\n+\t* objfiles.c (separate_debug_iterator::operator++): Rename from\n+\tobjfile_separate_debug_iterate.\n+\t(objfile_relocate, objfile_rebase, objfile_has_symbols): Use the\n+\titerator.\n+\t* minsyms.c (lookup_minimal_symbol_by_pc_section): Use the\n+\titerator.\n+\n 2019-04-10  Tom Tromey  <tom@tromey.com>\n \n \t* symfile.c (reread_symbols): Remove old comment."
    },
    {
      "sha": "8037329a862f020344c03a01281c755a19f099c4",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe",
      "patch": "@@ -696,7 +696,6 @@ lookup_minimal_symbol_by_pc_section (CORE_ADDR pc_in, struct obj_section *sectio\n   int lo;\n   int hi;\n   int newobj;\n-  struct objfile *objfile;\n   struct minimal_symbol *msymbol;\n   struct minimal_symbol *best_symbol = NULL;\n   struct objfile *best_objfile = NULL;\n@@ -722,9 +721,7 @@ lookup_minimal_symbol_by_pc_section (CORE_ADDR pc_in, struct obj_section *sectio\n \n   gdb_assert (section != NULL);\n \n-  for (objfile = section->objfile;\n-       objfile != NULL;\n-       objfile = objfile_separate_debug_iterate (section->objfile, objfile))\n+  for (struct objfile *objfile : section->objfile->separate_debug_objfiles ())\n     {\n       CORE_ADDR pc = pc_in;\n "
    },
    {
      "sha": "e055365d37e0de0c72c6f5593b7733cdb9668927",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 37,
      "deletions": 38,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe",
      "patch": "@@ -446,44 +446,50 @@ entry_point_address (void)\n   return retval;\n }\n \n-/* Iterator on PARENT and every separate debug objfile of PARENT.\n-   The usage pattern is:\n-     for (objfile = parent;\n-          objfile;\n-          objfile = objfile_separate_debug_iterate (parent, objfile))\n-       ...\n-*/\n-\n-struct objfile *\n-objfile_separate_debug_iterate (const struct objfile *parent,\n-                                const struct objfile *objfile)\n+separate_debug_iterator &\n+separate_debug_iterator::operator++ ()\n {\n+  gdb_assert (m_objfile != nullptr);\n+\n   struct objfile *res;\n \n   /* If any, return the first child.  */\n-  res = objfile->separate_debug_objfile;\n-  if (res)\n-    return res;\n+  res = m_objfile->separate_debug_objfile;\n+  if (res != nullptr)\n+    {\n+      m_objfile = res;\n+      return *this;\n+    }\n \n   /* Common case where there is no separate debug objfile.  */\n-  if (objfile == parent)\n-    return NULL;\n+  if (m_objfile == m_parent)\n+    {\n+      m_objfile = nullptr;\n+      return *this;\n+    }\n \n   /* Return the brother if any.  Note that we don't iterate on brothers of\n      the parents.  */\n-  res = objfile->separate_debug_objfile_link;\n-  if (res)\n-    return res;\n+  res = m_objfile->separate_debug_objfile_link;\n+  if (res != nullptr)\n+    {\n+      m_objfile = res;\n+      return *this;\n+    }\n \n-  for (res = objfile->separate_debug_objfile_backlink;\n-       res != parent;\n+  for (res = m_objfile->separate_debug_objfile_backlink;\n+       res != m_parent;\n        res = res->separate_debug_objfile_backlink)\n     {\n-      gdb_assert (res != NULL);\n-      if (res->separate_debug_objfile_link)\n-        return res->separate_debug_objfile_link;\n+      gdb_assert (res != nullptr);\n+      if (res->separate_debug_objfile_link != nullptr)\n+\t{\n+\t  m_objfile = res->separate_debug_objfile_link;\n+\t  return *this;\n+\t}\n     }\n-  return NULL;\n+  m_objfile = nullptr;\n+  return *this;\n }\n \n /* Put one object file before a specified on in the global list.\n@@ -860,15 +866,15 @@ void\n objfile_relocate (struct objfile *objfile,\n \t\t  const struct section_offsets *new_offsets)\n {\n-  struct objfile *debug_objfile;\n   int changed = 0;\n \n   changed |= objfile_relocate1 (objfile, new_offsets);\n \n-  for (debug_objfile = objfile->separate_debug_objfile;\n-       debug_objfile;\n-       debug_objfile = objfile_separate_debug_iterate (objfile, debug_objfile))\n+  for (struct objfile *debug_objfile : objfile->separate_debug_objfiles ())\n     {\n+      if (debug_objfile == objfile)\n+\tcontinue;\n+\n       section_addr_info objfile_addrs\n \t= build_section_addr_info_from_objfile (objfile);\n \n@@ -917,14 +923,9 @@ objfile_rebase1 (struct objfile *objfile, CORE_ADDR slide)\n void\n objfile_rebase (struct objfile *objfile, CORE_ADDR slide)\n {\n-  struct objfile *debug_objfile;\n   int changed = 0;\n \n-  changed |= objfile_rebase1 (objfile, slide);\n-\n-  for (debug_objfile = objfile->separate_debug_objfile;\n-       debug_objfile;\n-       debug_objfile = objfile_separate_debug_iterate (objfile, debug_objfile))\n+  for (struct objfile *debug_objfile : objfile->separate_debug_objfiles ())\n     changed |= objfile_rebase1 (debug_objfile, slide);\n \n   /* Relocate breakpoints as necessary, after things are relocated.  */\n@@ -965,9 +966,7 @@ objfile_has_full_symbols (struct objfile *objfile)\n int\n objfile_has_symbols (struct objfile *objfile)\n {\n-  struct objfile *o;\n-\n-  for (o = objfile; o; o = objfile_separate_debug_iterate (objfile, o))\n+  for (struct objfile *o : objfile->separate_debug_objfiles ())\n     if (objfile_has_partial_symbols (o) || objfile_has_full_symbols (o))\n       return 1;\n   return 0;"
    },
    {
      "sha": "168f7fc275b4fdfa3e38820b6a02a6bdc5f9a7a4",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 65,
      "deletions": 3,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe",
      "patch": "@@ -318,6 +318,63 @@ struct objfile_per_bfd_storage\n   std::bitset<nr_languages> demangled_hash_languages;\n };\n \n+/* An iterator that first returns a parent objfile, and then each\n+   separate debug objfile.  */\n+\n+class separate_debug_iterator\n+{\n+public:\n+\n+  explicit separate_debug_iterator (struct objfile *objfile)\n+    : m_objfile (objfile),\n+      m_parent (objfile)\n+  {\n+  }\n+\n+  bool operator!= (const separate_debug_iterator &other)\n+  {\n+    return m_objfile != other.m_objfile;\n+  }\n+\n+  separate_debug_iterator &operator++ ();\n+\n+  struct objfile *operator* ()\n+  {\n+    return m_objfile;\n+  }\n+\n+private:\n+\n+  struct objfile *m_objfile;\n+  struct objfile *m_parent;\n+};\n+\n+/* A range adapter wrapping separate_debug_iterator.  */\n+\n+class separate_debug_range\n+{\n+public:\n+\n+  explicit separate_debug_range (struct objfile *objfile)\n+    : m_objfile (objfile)\n+  {\n+  }\n+\n+  separate_debug_iterator begin ()\n+  {\n+    return separate_debug_iterator (m_objfile);\n+  }\n+\n+  separate_debug_iterator end ()\n+  {\n+    return separate_debug_iterator (nullptr);\n+  }\n+\n+private:\n+\n+  struct objfile *m_objfile;\n+};\n+\n /* Master structure for keeping track of each file from which\n    gdb reads symbols.  There are several ways these get allocated: 1.\n    The main symbol file, symfile_objfile, set by the symbol-file command,\n@@ -396,6 +453,14 @@ struct objfile\n     return msymbols_range (this);\n   }\n \n+  /* Return a range adapter for iterating over all the separate debug\n+     objfiles of this objfile.  */\n+\n+  separate_debug_range separate_debug_objfiles ()\n+  {\n+    return separate_debug_range (this);\n+  }\n+\n \n   /* All struct objfile's are chained together by their next pointers.\n      The program space field \"objfiles\"  (frequently referenced via\n@@ -563,9 +628,6 @@ extern CORE_ADDR entry_point_address (void);\n \n extern void build_objfile_section_table (struct objfile *);\n \n-extern struct objfile *objfile_separate_debug_iterate (const struct objfile *,\n-                                                       const struct objfile *);\n-\n extern void put_objfile_before (struct objfile *, struct objfile *);\n \n extern void add_separate_debug_objfile (struct objfile *, struct objfile *);"
    },
    {
      "sha": "16e641a830b597b2fd4879d2baf51f333c37c7cb",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 3,
      "deletions": 9,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=e9ad22ee5f0a40dfa1182ee68e3349dd72a42afe",
      "patch": "@@ -2246,11 +2246,7 @@ lookup_global_symbol_from_objfile (struct objfile *main_objfile,\n \t\t\t\t   const char *name,\n \t\t\t\t   const domain_enum domain)\n {\n-  struct objfile *objfile;\n-\n-  for (objfile = main_objfile;\n-       objfile;\n-       objfile = objfile_separate_debug_iterate (main_objfile, objfile))\n+  for (struct objfile *objfile : main_objfile->separate_debug_objfiles ())\n     {\n       struct block_symbol result\n         = lookup_symbol_in_objfile (objfile, GLOBAL_BLOCK, name, domain);\n@@ -2327,7 +2323,7 @@ lookup_symbol_in_objfile_from_linkage_name (struct objfile *objfile,\n \t\t\t\t\t    domain_enum domain)\n {\n   enum language lang = current_language->la_language;\n-  struct objfile *main_objfile, *cur_objfile;\n+  struct objfile *main_objfile;\n \n   demangle_result_storage storage;\n   const char *modified_name = demangle_for_lookup (linkage_name, lang, storage);\n@@ -2337,9 +2333,7 @@ lookup_symbol_in_objfile_from_linkage_name (struct objfile *objfile,\n   else\n     main_objfile = objfile;\n \n-  for (cur_objfile = main_objfile;\n-       cur_objfile;\n-       cur_objfile = objfile_separate_debug_iterate (main_objfile, cur_objfile))\n+  for (struct objfile *cur_objfile : main_objfile->separate_debug_objfiles ())\n     {\n       struct block_symbol result;\n "
    }
  ]
}