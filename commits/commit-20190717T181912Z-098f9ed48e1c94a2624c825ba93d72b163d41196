{
  "sha": "098f9ed48e1c94a2624c825ba93d72b163d41196",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDk4ZjllZDQ4ZTFjOTRhMjYyNGM4MjViYTkzZDcyYjE2M2Q0MTE5Ng==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-29T05:54:25Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-07-17T18:19:12Z"
    },
    "message": "Always create an execution info window for a source window\n\nA source or disassembly window will always have an \"execution info\"\nwindow (the window along the side that displays breakpoint info), but\nthis isn't immediately clear from the source.  As a result, some code\nhas checks to see whether the execution_info is NULL.\n\nThis changes the source window base class to always instantiate an\nexecution_info window, then updates the rest of the code.  It also\nsimplifies window creation in tui-layout.c.\n\ngdb/ChangeLog\n2019-07-17  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-winsource.c (tui_set_exec_info_content): Remove\n\tcondition.\n\t* tui/tui-wingeneral.c (tui_source_window_base::make_visible):\n\tRemove condition.\n\t* tui/tui-source.c (tui_source_window_base::reset): New method.\n\t* tui/tui-layout.c (make_command_window): Don't call\n\tinit_and_make_win.\n\t(make_source_window, make_disasm_window): Don't call\n\tmake_source_or_disasm_window.\n\t(make_data_window): Don't call init_and_make_win.  Change calling\n\tconvention.\n\t(show_source_disasm_command, show_data): Simplify.\n\t(make_source_or_disasm_window): Remove.\n\t(show_source_or_disasm_and_command): Simplify.\n\t* tui/tui-data.h (struct tui_gen_win_info) <reset>: Now virtual.\n\t(struct tui_source_window_base) <reset>: Likewise.\n\t<execution_info>: Remove initializer.\n\t* tui/tui-data.c (tui_source_window_base): Initialize\n\texecution_info.",
    "tree": {
      "sha": "14364d15f0a1e887535cbb4d6d40f70fcebe7d47",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/14364d15f0a1e887535cbb4d6d40f70fcebe7d47"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/098f9ed48e1c94a2624c825ba93d72b163d41196",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/098f9ed48e1c94a2624c825ba93d72b163d41196",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/098f9ed48e1c94a2624c825ba93d72b163d41196",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/098f9ed48e1c94a2624c825ba93d72b163d41196/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "801109578cd2a6ebd690dd23f0d4a1f4a67aee09",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/801109578cd2a6ebd690dd23f0d4a1f4a67aee09",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/801109578cd2a6ebd690dd23f0d4a1f4a67aee09"
    }
  ],
  "stats": {
    "total": 231,
    "additions": 105,
    "deletions": 126
  },
  "files": [
    {
      "sha": "1c56652d8a9cb0301fce256bcf6aa17aa1cb03bb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=098f9ed48e1c94a2624c825ba93d72b163d41196",
      "patch": "@@ -1,3 +1,25 @@\n+2019-07-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-winsource.c (tui_set_exec_info_content): Remove\n+\tcondition.\n+\t* tui/tui-wingeneral.c (tui_source_window_base::make_visible):\n+\tRemove condition.\n+\t* tui/tui-source.c (tui_source_window_base::reset): New method.\n+\t* tui/tui-layout.c (make_command_window): Don't call\n+\tinit_and_make_win.\n+\t(make_source_window, make_disasm_window): Don't call\n+\tmake_source_or_disasm_window.\n+\t(make_data_window): Don't call init_and_make_win.  Change calling\n+\tconvention.\n+\t(show_source_disasm_command, show_data): Simplify.\n+\t(make_source_or_disasm_window): Remove.\n+\t(show_source_or_disasm_and_command): Simplify.\n+\t* tui/tui-data.h (struct tui_gen_win_info) <reset>: Now virtual.\n+\t(struct tui_source_window_base) <reset>: Likewise.\n+\t<execution_info>: Remove initializer.\n+\t* tui/tui-data.c (tui_source_window_base): Initialize\n+\texecution_info.\n+\n 2019-07-17  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-layout.c (tui_set_layout): Remove regs_populate"
    },
    {
      "sha": "ee5b3aa3a7a8ae8c30da3d6017b7e8cf16415e9c",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=098f9ed48e1c94a2624c825ba93d72b163d41196",
      "patch": "@@ -332,7 +332,8 @@ tui_win_info::tui_win_info (enum tui_win_type type)\n }\n \n tui_source_window_base::tui_source_window_base (enum tui_win_type type)\n-  : tui_win_info (type)\n+  : tui_win_info (type),\n+    execution_info (new tui_exec_info_window ())\n {\n   gdb_assert (type == SRC_WIN || type == DISASSEM_WIN);\n   start_line_or_addr.loa = LOA_ADDRESS;"
    },
    {
      "sha": "9bcfe4cfafe9b33c0c3e2784acce78b3186fbb1c",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=098f9ed48e1c94a2624c825ba93d72b163d41196",
      "patch": "@@ -61,9 +61,9 @@ struct tui_gen_win_info\n   /* Reset this window.  WIN_TYPE must match the existing type of this\n      window (it is only passed for self-test purposes).  The other\n      parameters are used to set the window's size and position.  */\n-  void reset (enum tui_win_type win_type,\n-\t      int height, int width,\n-\t      int origin_x, int origin_y);\n+  virtual void reset (enum tui_win_type win_type,\n+\t\t      int height, int width,\n+\t\t      int origin_x, int origin_y);\n \n   /* Window handle.  */\n   WINDOW *handle = nullptr;\n@@ -395,10 +395,14 @@ struct tui_source_window_base : public tui_win_info\n      LINE_NO in this source window; false otherwise.  */\n   virtual bool location_matches_p (struct bp_location *loc, int line_no) = 0;\n \n+  void reset (enum tui_win_type win_type,\n+\t      int height, int width,\n+\t      int origin_x, int origin_y) override;\n+\n   /* Does the locator belong to this window?  */\n   bool m_has_locator = false;\n   /* Execution information window.  */\n-  struct tui_exec_info_window *execution_info = nullptr;\n+  struct tui_exec_info_window *execution_info;\n   /* Used for horizontal scroll.  */\n   int horizontal_offset = 0;\n   struct tui_line_or_address start_line_or_addr;"
    },
    {
      "sha": "23537b7f4969a9c8141767cabf9a879352526256",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 33,
      "deletions": 87,
      "changes": 120,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=098f9ed48e1c94a2624c825ba93d72b163d41196",
      "patch": "@@ -48,12 +48,9 @@ static tui_gen_win_info *init_and_make_win (tui_gen_win_info *,\n \t\t\t\t\t    int, int, int, int,\n \t\t\t\t\t    enum tui_box);\n static void show_source_or_disasm_and_command (enum tui_layout_type);\n-static struct tui_win_info *make_source_or_disasm_window (enum tui_win_type, \n-\t\t\t\t\t\t\t  int, int);\n static struct tui_win_info *make_command_window (int, int);\n static struct tui_win_info *make_source_window (int, int);\n static struct tui_win_info *make_disasm_window (int, int);\n-static void make_data_window (struct tui_win_info **, int, int);\n static void show_source_command (void);\n static void show_disasm_command (void);\n static void show_source_disasm_command (void);\n@@ -522,14 +519,9 @@ prev_layout (void)\n static struct tui_win_info *\n make_command_window (int height, int origin_y)\n {\n-  struct tui_win_info *result\n-    = (struct tui_win_info *) init_and_make_win (NULL,\n-\t\t\t\t\t\t CMD_WIN,\n-\t\t\t\t\t\t height,\n-\t\t\t\t\t\t tui_term_width (),\n-\t\t\t\t\t\t 0,\n-\t\t\t\t\t\t origin_y,\n-\t\t\t\t\t\t DONT_BOX_WINDOW);\n+  struct tui_win_info *result = new tui_cmd_window ();\n+  result->reset (CMD_WIN, height, tui_term_width (), 0, origin_y);\n+  tui_make_window (result, DONT_BOX_WINDOW);\n   return result;\n }\n \n@@ -539,31 +531,32 @@ make_command_window (int height, int origin_y)\n static struct tui_win_info *\n make_source_window (int height, int origin_y)\n {\n-  return make_source_or_disasm_window (SRC_WIN, height, origin_y);\n-}\t\t\t\t/* make_source_window */\n+  tui_win_info *result = new tui_source_window ();\n+  result->reset (SRC_WIN, height, tui_term_width (), 0, origin_y);\n+  result->make_visible (true);\n+  return result;\n+}\n \n \n /* make_disasm_window().\n  */\n static struct tui_win_info *\n make_disasm_window (int height, int origin_y)\n {\n-  return make_source_or_disasm_window (DISASSEM_WIN, height, origin_y);\n-}\t\t\t\t/* make_disasm_window */\n+  tui_win_info *result = new tui_disasm_window ();\n+  result->reset (SRC_WIN, height, tui_term_width (), 0, origin_y);\n+  result->make_visible (true);\n+  return result;\n+}\n \n \n-static void\n-make_data_window (struct tui_win_info **win_info_ptr, \n-\t\t  int height, int origin_y)\n+static tui_win_info *\n+make_data_window (int height, int origin_y)\n {\n-  *win_info_ptr\n-    = (struct tui_win_info *) init_and_make_win (*win_info_ptr,\n-\t\t\t\t\t\t DATA_WIN,\n-\t\t\t\t\t\t height,\n-\t\t\t\t\t\t tui_term_width (),\n-\t\t\t\t\t\t 0,\n-\t\t\t\t\t\t origin_y,\n-\t\t\t\t\t\t BOX_WINDOW);\n+  tui_win_info *result = new tui_data_window ();\n+  result->reset (DATA_WIN, height, tui_term_width (), 0, origin_y);\n+  result->make_visible (true);\n+  return result;\n }\n \n \n@@ -606,16 +599,10 @@ show_source_disasm_command (void)\n \t{\n \t  TUI_SRC_WIN->reset (TUI_SRC_WIN->type,\n \t\t\t      src_height,\n-\t\t\t      TUI_SRC_WIN->width,\n-\t\t\t      TUI_SRC_WIN->execution_info->width,\n+\t\t\t      tui_term_width (),\n+\t\t\t      0,\n \t\t\t      0);\n-\t  TUI_SRC_WIN->execution_info->reset (EXEC_INFO_WIN,\n-\t\t\t\t\t      src_height,\n-\t\t\t\t\t      3,\n-\t\t\t\t\t      0,\n-\t\t\t\t\t      0);\n \t  tui_make_visible (TUI_SRC_WIN);\n-\t  tui_make_visible (TUI_SRC_WIN->execution_info);\n \t  TUI_SRC_WIN->m_has_locator = false;\n \t}\n \n@@ -645,16 +632,10 @@ show_source_disasm_command (void)\n \t  TUI_DISASM_WIN->m_has_locator = true;\n \t  TUI_DISASM_WIN->reset (TUI_DISASM_WIN->type,\n \t\t\t\t asm_height,\n-\t\t\t\t TUI_DISASM_WIN->width,\n-\t\t\t\t TUI_DISASM_WIN->execution_info->width,\n+\t\t\t\t tui_term_width (),\n+\t\t\t\t 0,\n \t\t\t\t src_height - 1);\n-\t  TUI_DISASM_WIN->execution_info->reset (EXEC_INFO_WIN,\n-\t\t\t\t\t\t asm_height,\n-\t\t\t\t\t\t 3,\n-\t\t\t\t\t\t 0,\n-\t\t\t\t\t\t src_height - 1);\n \t  tui_make_visible (TUI_DISASM_WIN);\n-\t  tui_make_visible (TUI_DISASM_WIN->execution_info);\n \t}\n       TUI_SRC_WIN->m_has_locator = false;\n       TUI_DISASM_WIN->m_has_locator = true;\n@@ -695,7 +676,12 @@ show_data (enum tui_layout_type new_layout)\n   src_height = total_height - data_height;\n   tui_make_all_invisible ();\n   tui_make_invisible (locator);\n-  make_data_window (&tui_win_list[DATA_WIN], data_height, 0);\n+  if (tui_win_list[DATA_WIN] == nullptr)\n+    tui_win_list[DATA_WIN] = make_data_window (data_height, 0);\n+  else\n+    tui_win_list[DATA_WIN]->reset (data_height, tui_term_width (), 0, 0);\n+  tui_win_list[DATA_WIN]->make_visible (true);\n+\n   if (new_layout == SRC_DATA_COMMAND)\n     win_type = SRC_WIN;\n   else\n@@ -724,16 +710,10 @@ show_data (enum tui_layout_type new_layout)\n       base = (tui_source_window_base *) tui_win_list[win_type];\n       tui_win_list[win_type]->reset (tui_win_list[win_type]->type,\n \t\t\t\t     src_height,\n-\t\t\t\t     tui_win_list[win_type]->width,\n-\t\t\t\t     base->execution_info->width,\n+\t\t\t\t     tui_term_width (),\n+\t\t\t\t     0,\n \t\t\t\t     data_height - 1);\n-      base->execution_info->reset (EXEC_INFO_WIN,\n-\t\t\t\t   src_height,\n-\t\t\t\t   3,\n-\t\t\t\t   0,\n-\t\t\t\t   data_height - 1);\n       tui_make_visible (tui_win_list[win_type]);\n-      tui_make_visible (base->execution_info);\n       locator->reset (LOCATOR_WIN,\n \t\t      2 /* 1 */ ,\n \t\t      tui_term_width (),\n@@ -816,34 +796,6 @@ init_and_make_win (tui_gen_win_info *win_info,\n }\n \n \n-static struct tui_win_info *\n-make_source_or_disasm_window (enum tui_win_type type,\n-\t\t\t      int height, int origin_y)\n-{\n-  struct tui_exec_info_window *execution_info\n-    = (tui_exec_info_window *) init_and_make_win (nullptr,\n-\t\t\t\t\t\t  EXEC_INFO_WIN,\n-\t\t\t\t\t\t  height,\n-\t\t\t\t\t\t  3,\n-\t\t\t\t\t\t  0,\n-\t\t\t\t\t\t  origin_y,\n-\t\t\t\t\t\t  DONT_BOX_WINDOW);\n-\n-  /* Now create the source window.  */\n-  struct tui_source_window_base *result\n-    = ((struct tui_source_window_base *)\n-       init_and_make_win (NULL,\n-\t\t\t  type,\n-\t\t\t  height,\n-\t\t\t  tui_term_width () - execution_info->width,\n-\t\t\t  execution_info->width,\n-\t\t\t  origin_y,\n-\t\t\t  BOX_WINDOW));\n-  result->execution_info = execution_info;\n-  return result;\n-}\n-\n-\n /* Show the Source/Command or the Disassem layout.  */\n static void\n show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n@@ -893,16 +845,10 @@ show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n \t  base->m_has_locator = true;\n \t  (*win_info_ptr)->reset ((*win_info_ptr)->type,\n \t\t\t\t  src_height - 1,\n-\t\t\t\t  (*win_info_ptr)->width,\n-\t\t\t\t  base->execution_info->width,\n+\t\t\t\t  tui_term_width (),\n+\t\t\t\t  0,\n \t\t\t\t  0);\n-\t  base->execution_info->reset (EXEC_INFO_WIN,\n-\t\t\t\t       src_height - 1,\n-\t\t\t\t       3,\n-\t\t\t\t       0,\n-\t\t\t\t       0);\n \t  tui_make_visible (*win_info_ptr);\n-\t  tui_make_visible (base->execution_info);\n \t}\n \n       base->m_has_locator = true;"
    },
    {
      "sha": "873612feccee15d76afb4043201832f6e02b2cfd",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=098f9ed48e1c94a2624c825ba93d72b163d41196",
      "patch": "@@ -291,3 +291,13 @@ tui_source_window::location_matches_p (struct bp_location *loc, int line_no)\n \t  && filename_cmp (fullname,\n \t\t\t   symtab_to_fullname (loc->symtab)) == 0);\n }\n+\n+void\n+tui_source_window_base::reset (enum tui_win_type win_type,\n+\t\t\t       int height, int width,\n+\t\t\t       int origin_x, int origin_y)\n+{\n+  tui_gen_win_info::reset (win_type, height, width - 3,\n+\t\t\t   origin_x + 3, origin_y);\n+  execution_info->reset (EXEC_INFO_WIN, height, 3, origin_x, origin_y);\n+}"
    },
    {
      "sha": "3dca621b8876ae20b796c74bb33b5f646e851283",
      "filename": "gdb/tui/tui-wingeneral.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-wingeneral.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-wingeneral.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-wingeneral.c?ref=098f9ed48e1c94a2624c825ba93d72b163d41196",
      "patch": "@@ -201,8 +201,7 @@ tui_make_invisible (struct tui_gen_win_info *win_info)\n void\n tui_source_window_base::make_visible (bool visible)\n {\n-  if (execution_info != nullptr)\n-    execution_info->make_visible (visible);\n+  execution_info->make_visible (visible);\n   tui_win_info::make_visible (visible);\n }\n "
    },
    {
      "sha": "d9f642510909654e03f1a2329d2179ec00a1cf88",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 29,
      "deletions": 32,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/098f9ed48e1c94a2624c825ba93d72b163d41196/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=098f9ed48e1c94a2624c825ba93d72b163d41196",
      "patch": "@@ -469,39 +469,36 @@ tui_exec_info_window::maybe_allocate_content (int n_elements)\n void\n tui_set_exec_info_content (struct tui_source_window_base *win_info)\n {\n-  if (win_info->execution_info != NULL)\n-    {\n-      tui_exec_info_content *content\n-\t= win_info->execution_info->maybe_allocate_content (win_info->height);\n+  tui_exec_info_content *content\n+    = win_info->execution_info->maybe_allocate_content (win_info->height);\n \n-      tui_update_breakpoint_info (win_info, nullptr, true);\n-      for (int i = 0; i < win_info->content.size (); i++)\n-\t{\n-\t  tui_exec_info_content &element = content[i];\n-\t  struct tui_source_element *src_element;\n-\t  tui_bp_flags mode;\n-\n-\t  src_element = &win_info->content[i];\n-\n-\t  memset (element, ' ', sizeof (tui_exec_info_content));\n-\t  element[TUI_EXECINFO_SIZE - 1] = 0;\n-\n-\t  /* Now update the exec info content based upon the state\n-\t     of each line as indicated by the source content.  */\n-\t  mode = src_element->break_mode;\n-\t  if (mode & TUI_BP_HIT)\n-\t    element[TUI_BP_HIT_POS] = (mode & TUI_BP_HARDWARE) ? 'H' : 'B';\n-\t  else if (mode & (TUI_BP_ENABLED | TUI_BP_DISABLED))\n-\t    element[TUI_BP_HIT_POS] = (mode & TUI_BP_HARDWARE) ? 'h' : 'b';\n-\n-\t  if (mode & TUI_BP_ENABLED)\n-\t    element[TUI_BP_BREAK_POS] = '+';\n-\t  else if (mode & TUI_BP_DISABLED)\n-\t    element[TUI_BP_BREAK_POS] = '-';\n-\n-\t  if (src_element->is_exec_point)\n-\t    element[TUI_EXEC_POS] = '>';\n-\t}\n+  tui_update_breakpoint_info (win_info, nullptr, true);\n+  for (int i = 0; i < win_info->content.size (); i++)\n+    {\n+      tui_exec_info_content &element = content[i];\n+      struct tui_source_element *src_element;\n+      tui_bp_flags mode;\n+\n+      src_element = &win_info->content[i];\n+\n+      memset (element, ' ', sizeof (tui_exec_info_content));\n+      element[TUI_EXECINFO_SIZE - 1] = 0;\n+\n+      /* Now update the exec info content based upon the state\n+\t of each line as indicated by the source content.  */\n+      mode = src_element->break_mode;\n+      if (mode & TUI_BP_HIT)\n+\telement[TUI_BP_HIT_POS] = (mode & TUI_BP_HARDWARE) ? 'H' : 'B';\n+      else if (mode & (TUI_BP_ENABLED | TUI_BP_DISABLED))\n+\telement[TUI_BP_HIT_POS] = (mode & TUI_BP_HARDWARE) ? 'h' : 'b';\n+\n+      if (mode & TUI_BP_ENABLED)\n+\telement[TUI_BP_BREAK_POS] = '+';\n+      else if (mode & TUI_BP_DISABLED)\n+\telement[TUI_BP_BREAK_POS] = '-';\n+\n+      if (src_element->is_exec_point)\n+\telement[TUI_EXEC_POS] = '>';\n     }\n }\n "
    }
  ]
}