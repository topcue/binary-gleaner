{
  "sha": "51ac9db596ea9f0affa9f7db25bb179cf70beac4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTFhYzlkYjU5NmVhOWYwYWZmYTlmN2RiMjViYjE3OWNmNzBiZWFjNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-06-21T18:10:14Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-06-21T18:10:14Z"
    },
    "message": "dwarf2read: C++ify dwo_file\n\nThis patch changes dwo_file to be allocated/deallocated with new/delete,\nso that we can start using C++ features in it, and in struct\ndwo_sections.\n\nThe free_dwo_file function becomes the destructor of struct dwo_file\n(and will disappear in upcoming patches, which will use gdb_bfd_ref_ptr\nfor dbfd and an std::vector for sections.types).\n\ngdb/ChangeLog:\n\n\t* dwarf2read.h (struct dwarf2_per_objfile) <dwo_files>: Change\n\ttype to htab_up.\n\t* dwarf2read.c (struct dwo_file): Initialize fields.\n\t<~dwo_file>: New.\n\t(free_dwo_file): Remove, move content to ~dwo_file.\n\t(struct dwo_file_deleter): Remove.\n\t(dwo_file_up>: Remove custom deleter.\n\t(free_dwo_files): Remove.\n\t(dwarf2_per_objfile::~dwarf2_per_objfile): Don't explicitly free\n\tdwo_files.\n\t(process_skeletonless_type_units): Call unique_ptr::get.\n\t(allocate_dwo_file_hash_table): Add deleter to created hash\n\ttable.  Change return type to htab_up.\n\t(lookup_dwo_file_slot): Don't memset dwo_file, call\n\tunique_ptr::get.\n\t(create_dwo_unit_in_dwp_v1): Allocate dwo_file with new.\n\t(create_dwo_unit_in_dwp_v2): Likewise.\n\t(open_and_init_dwo_file): Likewise.\n\t(free_dwo_file_from_slot): Remove.",
    "tree": {
      "sha": "ca356b2b22e29b2f5d11378de8d084cf9c24853b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ca356b2b22e29b2f5d11378de8d084cf9c24853b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/51ac9db596ea9f0affa9f7db25bb179cf70beac4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/51ac9db596ea9f0affa9f7db25bb179cf70beac4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/51ac9db596ea9f0affa9f7db25bb179cf70beac4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/51ac9db596ea9f0affa9f7db25bb179cf70beac4/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "dc4ccb6f7f07e41616fd42625226229f0795d198",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dc4ccb6f7f07e41616fd42625226229f0795d198",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dc4ccb6f7f07e41616fd42625226229f0795d198"
    }
  ],
  "stats": {
    "total": 136,
    "additions": 61,
    "deletions": 75
  },
  "files": [
    {
      "sha": "ef3ddbc29a3a488ac376dffa664f6aefa2b35a8b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51ac9db596ea9f0affa9f7db25bb179cf70beac4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51ac9db596ea9f0affa9f7db25bb179cf70beac4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=51ac9db596ea9f0affa9f7db25bb179cf70beac4",
      "patch": "@@ -1,3 +1,25 @@\n+2019-06-21  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* dwarf2read.h (struct dwarf2_per_objfile) <dwo_files>: Change\n+\ttype to htab_up.\n+\t* dwarf2read.c (struct dwo_file): Initialize fields.\n+\t<~dwo_file>: New.\n+\t(free_dwo_file): Remove, move content to ~dwo_file.\n+\t(struct dwo_file_deleter): Remove.\n+\t(dwo_file_up>: Remove custom deleter.\n+\t(free_dwo_files): Remove.\n+\t(dwarf2_per_objfile::~dwarf2_per_objfile): Don't explicitly free\n+\tdwo_files.\n+\t(process_skeletonless_type_units): Call unique_ptr::get.\n+\t(allocate_dwo_file_hash_table): Add deleter to created hash\n+\ttable.  Change return type to htab_up.\n+\t(lookup_dwo_file_slot): Don't memset dwo_file, call\n+\tunique_ptr::get.\n+\t(create_dwo_unit_in_dwp_v1): Allocate dwo_file with new.\n+\t(create_dwo_unit_in_dwp_v2): Likewise.\n+\t(open_and_init_dwo_file): Likewise.\n+\t(free_dwo_file_from_slot): Remove.\n+\n 2019-06-21  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* dwarf2read.h (struct dwarf2_section_info) <readin,"
    },
    {
      "sha": "c73ab6367da917f1bac6c0199e4e02f0fac4acbb",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 38,
      "deletions": 74,
      "changes": 112,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51ac9db596ea9f0affa9f7db25bb179cf70beac4/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51ac9db596ea9f0affa9f7db25bb179cf70beac4/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=51ac9db596ea9f0affa9f7db25bb179cf70beac4",
      "patch": "@@ -703,33 +703,43 @@ enum dwp_v2_section_ids\n \n struct dwo_file\n {\n+  dwo_file () = default;\n+  DISABLE_COPY_AND_ASSIGN (dwo_file);\n+\n+  ~dwo_file ()\n+  {\n+    gdb_bfd_unref (dbfd);\n+\n+    VEC_free (dwarf2_section_info_def, sections.types);\n+  }\n+\n   /* The DW_AT_GNU_dwo_name attribute.\n      For virtual DWO files the name is constructed from the section offsets\n      of abbrev,line,loc,str_offsets so that we combine virtual DWO files\n      from related CU+TUs.  */\n-  const char *dwo_name;\n+  const char *dwo_name = nullptr;\n \n   /* The DW_AT_comp_dir attribute.  */\n-  const char *comp_dir;\n+  const char *comp_dir = nullptr;\n \n   /* The bfd, when the file is open.  Otherwise this is NULL.\n      This is unused(NULL) for virtual DWO files where we use dwp_file.dbfd.  */\n-  bfd *dbfd;\n+  bfd *dbfd = nullptr;\n \n   /* The sections that make up this DWO file.\n      Remember that for virtual DWO files in DWP V2, these are virtual\n      sections (for lack of a better name).  */\n-  struct dwo_sections sections;\n+  struct dwo_sections sections {};\n \n   /* The CUs in the file.\n      Each element is a struct dwo_unit. Multiple CUs per DWO are supported as\n      an extension to handle LLVM's Link Time Optimization output (where\n      multiple source files may be compiled into a single object/dwo pair). */\n-  htab_t cus;\n+  htab_t cus {};\n \n   /* Table of TUs in the file.\n      Each element is a struct dwo_unit.  */\n-  htab_t tus;\n+  htab_t tus {};\n };\n \n /* These sections are what may appear in a DWP file.  */\n@@ -1988,21 +1998,9 @@ static struct dwo_unit *lookup_dwo_type_unit\n \n static void queue_and_load_all_dwo_tus (struct dwarf2_per_cu_data *);\n \n-static void free_dwo_file (struct dwo_file *);\n-\n-/* A unique_ptr helper to free a dwo_file.  */\n-\n-struct dwo_file_deleter\n-{\n-  void operator() (struct dwo_file *df) const\n-  {\n-    free_dwo_file (df);\n-  }\n-};\n-\n /* A unique pointer to a dwo_file.  */\n \n-typedef std::unique_ptr<struct dwo_file, dwo_file_deleter> dwo_file_up;\n+typedef std::unique_ptr<struct dwo_file> dwo_file_up;\n \n static void process_cu_includes (struct dwarf2_per_objfile *dwarf2_per_objfile);\n \n@@ -2147,8 +2145,6 @@ dwarf2_per_objfile::dwarf2_per_objfile (struct objfile *objfile_,\n     locate_sections (obfd, sec, *names);\n }\n \n-static void free_dwo_files (htab_t dwo_files, struct objfile *objfile);\n-\n dwarf2_per_objfile::~dwarf2_per_objfile ()\n {\n   /* Cached DIE trees use xmalloc and the comp_unit_obstack.  */\n@@ -2168,9 +2164,6 @@ dwarf2_per_objfile::~dwarf2_per_objfile ()\n \n   VEC_free (dwarf2_section_info_def, types);\n \n-  if (dwo_files != NULL)\n-    free_dwo_files (dwo_files, objfile);\n-\n   /* Everything else should be on the objfile obstack.  */\n }\n \n@@ -8407,7 +8400,7 @@ process_skeletonless_type_units (struct dwarf2_per_objfile *dwarf2_per_objfile)\n   if (get_dwp_file (dwarf2_per_objfile) == NULL\n       && dwarf2_per_objfile->dwo_files != NULL)\n     {\n-      htab_traverse_noresize (dwarf2_per_objfile->dwo_files,\n+      htab_traverse_noresize (dwarf2_per_objfile->dwo_files.get (),\n \t\t\t      process_dwo_file_for_skeletonless_type_units,\n \t\t\t      dwarf2_per_objfile);\n     }\n@@ -11775,16 +11768,23 @@ eq_dwo_file (const void *item_lhs, const void *item_rhs)\n \n /* Allocate a hash table for DWO files.  */\n \n-static htab_t\n+static htab_up\n allocate_dwo_file_hash_table (struct objfile *objfile)\n {\n-  return htab_create_alloc_ex (41,\n-\t\t\t       hash_dwo_file,\n-\t\t\t       eq_dwo_file,\n-\t\t\t       NULL,\n-\t\t\t       &objfile->objfile_obstack,\n-\t\t\t       hashtab_obstack_allocate,\n-\t\t\t       dummy_obstack_deallocate);\n+  auto delete_dwo_file = [] (void *item)\n+    {\n+      struct dwo_file *dwo_file = (struct dwo_file *) item;\n+\n+      delete dwo_file;\n+    };\n+\n+  return htab_up (htab_create_alloc_ex (41,\n+\t\t\t\t\thash_dwo_file,\n+\t\t\t\t\teq_dwo_file,\n+\t\t\t\t\tdelete_dwo_file,\n+\t\t\t\t\t&objfile->objfile_obstack,\n+\t\t\t\t\thashtab_obstack_allocate,\n+\t\t\t\t\tdummy_obstack_deallocate));\n }\n \n /* Lookup DWO file DWO_NAME.  */\n@@ -11801,10 +11801,10 @@ lookup_dwo_file_slot (struct dwarf2_per_objfile *dwarf2_per_objfile,\n     dwarf2_per_objfile->dwo_files\n       = allocate_dwo_file_hash_table (dwarf2_per_objfile->objfile);\n \n-  memset (&find_entry, 0, sizeof (find_entry));\n   find_entry.dwo_name = dwo_name;\n   find_entry.comp_dir = comp_dir;\n-  slot = htab_find_slot (dwarf2_per_objfile->dwo_files, &find_entry, INSERT);\n+  slot = htab_find_slot (dwarf2_per_objfile->dwo_files.get (), &find_entry,\n+\t\t\t INSERT);\n \n   return slot;\n }\n@@ -12451,7 +12451,7 @@ create_dwo_unit_in_dwp_v1 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t  fprintf_unfiltered (gdb_stdlog, \"Creating virtual DWO: %s\\n\",\n \t\t\t      virtual_dwo_name.c_str ());\n \t}\n-      dwo_file = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct dwo_file);\n+      dwo_file = new struct dwo_file;\n       dwo_file->dwo_name\n \t= (const char *) obstack_copy0 (&objfile->objfile_obstack,\n \t\t\t\t\tvirtual_dwo_name.c_str (),\n@@ -12649,7 +12649,7 @@ create_dwo_unit_in_dwp_v2 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t  fprintf_unfiltered (gdb_stdlog, \"Creating virtual DWO: %s\\n\",\n \t\t\t      virtual_dwo_name.c_str ());\n \t}\n-      dwo_file = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct dwo_file);\n+      dwo_file = new struct dwo_file;\n       dwo_file->dwo_name\n \t= (const char *) obstack_copy0 (&objfile->objfile_obstack,\n \t\t\t\t\tvirtual_dwo_name.c_str (),\n@@ -12959,7 +12959,6 @@ open_and_init_dwo_file (struct dwarf2_per_cu_data *per_cu,\n \t\t\tconst char *dwo_name, const char *comp_dir)\n {\n   struct dwarf2_per_objfile *dwarf2_per_objfile = per_cu->dwarf2_per_objfile;\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n \n   gdb_bfd_ref_ptr dbfd (open_dwo_file (dwarf2_per_objfile, dwo_name, comp_dir));\n   if (dbfd == NULL)\n@@ -12969,10 +12968,7 @@ open_and_init_dwo_file (struct dwarf2_per_cu_data *per_cu,\n       return NULL;\n     }\n \n-  /* We use a unique pointer here, despite the obstack allocation,\n-     because a dwo_file needs some cleanup if it is abandoned.  */\n-  dwo_file_up dwo_file (OBSTACK_ZALLOC (&objfile->objfile_obstack,\n-\t\t\t\t\tstruct dwo_file));\n+  dwo_file_up dwo_file (new struct dwo_file);\n   dwo_file->dwo_name = dwo_name;\n   dwo_file->comp_dir = comp_dir;\n   dwo_file->dbfd = dbfd.release ();\n@@ -13486,38 +13482,6 @@ queue_and_load_all_dwo_tus (struct dwarf2_per_cu_data *per_cu)\n     htab_traverse_noresize (dwo_file->tus, queue_and_load_dwo_tu, per_cu);\n }\n \n-/* Free all resources associated with DWO_FILE.\n-   Close the DWO file and munmap the sections.  */\n-\n-static void\n-free_dwo_file (struct dwo_file *dwo_file)\n-{\n-  /* Note: dbfd is NULL for virtual DWO files.  */\n-  gdb_bfd_unref (dwo_file->dbfd);\n-\n-  VEC_free (dwarf2_section_info_def, dwo_file->sections.types);\n-}\n-\n-/* Traversal function for free_dwo_files.  */\n-\n-static int\n-free_dwo_file_from_slot (void **slot, void *info)\n-{\n-  struct dwo_file *dwo_file = (struct dwo_file *) *slot;\n-\n-  free_dwo_file (dwo_file);\n-\n-  return 1;\n-}\n-\n-/* Free all resources associated with DWO_FILES.  */\n-\n-static void\n-free_dwo_files (htab_t dwo_files, struct objfile *objfile)\n-{\n-  htab_traverse_noresize (dwo_files, free_dwo_file_from_slot, objfile);\n-}\n-\f\n /* Read in various DIEs.  */\n \n /* DW_AT_abstract_origin inherits whole DIEs (not just their attributes)."
    },
    {
      "sha": "4a1cd9cf00eda2acfdb7ad3d2a24fd8fbea653c4",
      "filename": "gdb/dwarf2read.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51ac9db596ea9f0affa9f7db25bb179cf70beac4/gdb/dwarf2read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51ac9db596ea9f0affa9f7db25bb179cf70beac4/gdb/dwarf2read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.h?ref=51ac9db596ea9f0affa9f7db25bb179cf70beac4",
      "patch": "@@ -197,7 +197,7 @@ struct dwarf2_per_objfile\n \n   /* A table mapping DW_AT_dwo_name values to struct dwo_file objects.\n      This is NULL if the table hasn't been allocated yet.  */\n-  htab_t dwo_files {};\n+  htab_up dwo_files;\n \n   /* True if we've checked for whether there is a DWP file.  */\n   bool dwp_checked = false;"
    }
  ]
}