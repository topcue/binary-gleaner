{
  "sha": "a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
  "node_id": "C_kwDOANOeidoAKGE0NWIxZTY2YzVkYTRiOGY1ZjljMzkyNDVhZDRlYTQ3NjllMzQyMGE",
  "commit": {
    "author": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2020-10-08T21:26:30Z"
    },
    "committer": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2021-10-28T20:22:12Z"
    },
    "message": "gdb: or1k: add native linux support\n\nThis patch adds support for running gdb natively on OpenRISC linux.\nDebugging support is provided via the linux PTRACE interface which is\nmostly handled by GDB genric code.  This patch provides the logic of how\nto read and write the ptrace registers between linux and GDB.\n\nSingle stepping is privided in a separate patch.",
    "tree": {
      "sha": "a95413bec369ebb3917037acbdec512edc77923e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a95413bec369ebb3917037acbdec512edc77923e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/comments",
  "author": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d33637719631e02e3880761b734b54a02e41b06d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d33637719631e02e3880761b734b54a02e41b06d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d33637719631e02e3880761b734b54a02e41b06d"
    }
  ],
  "stats": {
    "total": 249,
    "additions": 249,
    "deletions": 0
  },
  "files": [
    {
      "sha": "f71537f6595817cd5260c28f8ab4c0490147e166",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
      "patch": "@@ -1384,6 +1384,7 @@ HFILES_NO_SRCDIR = \\\n \tobjfiles.h \\\n \tobsd-nat.h \\\n \tobsd-tdep.h \\\n+\tor1k-linux-tdep.h \\\n \tosabi.h \\\n \tosdata.h \\\n \tp-lang.h \\\n@@ -2262,6 +2263,7 @@ ALLDEPFILES = \\\n \tnios2-tdep.c \\\n \tobsd-nat.c \\\n \tobsd-tdep.c \\\n+\tor1k-linux-nat.c \\\n \tposix-hdep.c \\\n \tppc-fbsd-nat.c \\\n \tppc-fbsd-tdep.c \\"
    },
    {
      "sha": "be40cc814fc5bad27c2c44f78bff034def83b392",
      "filename": "gdb/configure.host",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/configure.host",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/configure.host",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.host?ref=a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
      "patch": "@@ -130,6 +130,8 @@ mips*-*-netbsdaout* | mips*-*-knetbsd*-gnu)\n mips*-*-freebsd*)\tgdb_host=fbsd ;;\n mips64*-*-openbsd*)\tgdb_host=obsd64 ;;\n \n+or1k-*-linux*)\t\tgdb_host=linux ;;\n+\n powerpc-*-aix* | rs6000-*-* | powerpc64-*-aix*)\n \t\t\tgdb_host=aix ;;\n powerpc*-*-freebsd*)\tgdb_host=fbsd ;;"
    },
    {
      "sha": "d42cf13e691bd0bd1e4fe27942329454e8c2f371",
      "filename": "gdb/configure.nat",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/configure.nat",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/configure.nat",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.nat?ref=a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
      "patch": "@@ -271,6 +271,10 @@ case ${gdb_host} in\n \t\tNATDEPFILES=\"${NATDEPFILES} linux-nat-trad.o \\\n \t\tmips-linux-nat.o nat/mips-linux-watch.o\"\n \t\t;;\n+\t    or1k)\n+\t\t# Host: Linux/OpenRISC\n+\t\tNATDEPFILES=\"${NATDEPFILES} or1k-linux-nat.o\"\n+\t\t;;\n \t    pa)\n \t\t# Host: Hewlett-Packard PA-RISC machine, running Linux\n \t\tNATDEPFILES=\"${NATDEPFILES} hppa-linux-nat.o\""
    },
    {
      "sha": "1dafa922462b67e93a019d03ebc51f83161f31ec",
      "filename": "gdb/or1k-linux-nat.c",
      "status": "added",
      "additions": 210,
      "deletions": 0,
      "changes": 210,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/or1k-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/or1k-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/or1k-linux-nat.c?ref=a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
      "patch": "@@ -0,0 +1,210 @@\n+/* Native-dependent code for GNU/Linux OpenRISC.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"regcache.h\"\n+#include \"gregset.h\"\n+#include \"linux-nat.h\"\n+#include \"or1k-tdep.h\"\n+#include \"or1k-linux-tdep.h\"\n+#include \"inferior.h\"\n+\n+#include \"elf/common.h\"\n+\n+#include <sys/ptrace.h>\n+\n+/* OpenRISC Linux native additions to the default linux support.  */\n+\n+class or1k_linux_nat_target final : public linux_nat_target\n+{\n+public:\n+  /* Add our register access methods.  */\n+  void fetch_registers (struct regcache *regcache, int regnum) override;\n+  void store_registers (struct regcache *regcache, int regnum) override;\n+\n+  /* Read suitable target description.  */\n+  const struct target_desc *read_description () override;\n+};\n+\n+static or1k_linux_nat_target the_or1k_linux_nat_target;\n+\n+/* Copy general purpose register REGNUM (or all gp regs if REGNUM == -1)\n+   from regset GREGS into REGCACHE.  */\n+\n+static void\n+supply_gregset_regnum (struct regcache *regcache, const prgregset_t *gregs,\n+\t\t       int regnum)\n+{\n+  int i;\n+  const elf_greg_t *regp = *gregs;\n+\n+  /* Access all registers */\n+  if (regnum == -1)\n+    {\n+      /* We fill the general purpose registers.  */\n+      for (i = OR1K_ZERO_REGNUM + 1; i < OR1K_MAX_GPR_REGS; i++)\n+\tregcache->raw_supply (i, regp + i);\n+\n+      /* Supply OR1K_NPC_REGNUM from index 32.  */\n+      regcache->raw_supply (OR1K_NPC_REGNUM, regp + 32);\n+\n+      /* Fill the inaccessible zero register with zero.  */\n+      regcache->raw_supply_zeroed (0);\n+    }\n+  else if (regnum == OR1K_ZERO_REGNUM)\n+    regcache->raw_supply_zeroed (0);\n+  else if (regnum == OR1K_NPC_REGNUM)\n+    regcache->raw_supply (OR1K_NPC_REGNUM, regp + 32);\n+  else if (regnum > OR1K_ZERO_REGNUM && regnum < OR1K_MAX_GPR_REGS)\n+    regcache->raw_supply (regnum, regp + regnum);\n+}\n+\n+/* Copy all general purpose registers from regset GREGS into REGCACHE.  */\n+\n+void\n+supply_gregset (struct regcache *regcache, const prgregset_t *gregs)\n+{\n+  supply_gregset_regnum (regcache, gregs, -1);\n+}\n+\n+/* Copy general purpose register REGNUM (or all gp regs if REGNUM == -1)\n+   from REGCACHE into regset GREGS.  */\n+\n+void\n+fill_gregset (const struct regcache *regcache, prgregset_t *gregs, int regnum)\n+{\n+  elf_greg_t *regp = *gregs;\n+\n+  if (regnum == -1)\n+    {\n+      /* We fill the general purpose registers.  */\n+      for (int i = OR1K_ZERO_REGNUM + 1; i < OR1K_MAX_GPR_REGS; i++)\n+\tregcache->raw_collect (i, regp + i);\n+\n+      regcache->raw_collect (OR1K_NPC_REGNUM, regp + 32);\n+    }\n+  else if (regnum == OR1K_ZERO_REGNUM)\n+    /* Nothing to do here.  */\n+    ;\n+  else if (regnum > OR1K_ZERO_REGNUM && regnum < OR1K_MAX_GPR_REGS)\n+    regcache->raw_collect (regnum, regp + regnum);\n+  else if (regnum == OR1K_NPC_REGNUM)\n+    regcache->raw_collect (OR1K_NPC_REGNUM, regp + 32);\n+}\n+\n+/* Transfering floating-point registers between GDB, inferiors and cores.\n+   Since OpenRISC floating-point registers are the same as GPRs these do\n+   nothing.  */\n+\n+void\n+supply_fpregset (struct regcache *regcache, const gdb_fpregset_t *fpregs)\n+{\n+}\n+\n+void\n+fill_fpregset (const struct regcache *regcache,\n+\t       gdb_fpregset_t *fpregs, int regno)\n+{\n+}\n+\n+/* Return a target description for the current target.  */\n+\n+const struct target_desc *\n+or1k_linux_nat_target::read_description ()\n+{\n+  return tdesc_or1k_linux;\n+}\n+\n+/* Fetch REGNUM (or all registers if REGNUM == -1) from the target\n+   into REGCACHE using PTRACE_GETREGSET.  */\n+\n+void\n+or1k_linux_nat_target::fetch_registers (struct regcache *regcache, int regnum)\n+{\n+  int tid;\n+\n+  tid = get_ptrace_pid (regcache->ptid());\n+\n+  if ((regnum >= OR1K_ZERO_REGNUM && regnum < OR1K_MAX_GPR_REGS)\n+      || (regnum == OR1K_NPC_REGNUM)\n+      || (regnum == -1))\n+    {\n+      struct iovec iov;\n+      elf_gregset_t regs;\n+\n+      iov.iov_base = &regs;\n+      iov.iov_len = sizeof (regs);\n+\n+      if (ptrace (PTRACE_GETREGSET, tid, NT_PRSTATUS,\n+\t\t  (PTRACE_TYPE_ARG3) &iov) == -1)\n+\tperror_with_name (_(\"Couldn't get registers\"));\n+      else\n+\tsupply_gregset_regnum (regcache, &regs, regnum);\n+    }\n+\n+  /* Access to other SPRs has potential security issues, don't support them for\n+     now.  */\n+}\n+\n+/* Store REGNUM (or all registers if REGNUM == -1) to the target\n+   from REGCACHE using PTRACE_SETREGSET.  */\n+\n+void\n+or1k_linux_nat_target::store_registers (struct regcache *regcache, int regnum)\n+{\n+  int tid;\n+\n+  tid = get_ptrace_pid (regcache->ptid ());\n+\n+  if ((regnum >= OR1K_ZERO_REGNUM && regnum < OR1K_MAX_GPR_REGS)\n+      || (regnum == OR1K_NPC_REGNUM)\n+      || (regnum == -1))\n+    {\n+      struct iovec iov;\n+      elf_gregset_t regs;\n+\n+      iov.iov_base = &regs;\n+      iov.iov_len = sizeof (regs);\n+\n+      if (ptrace (PTRACE_GETREGSET, tid, NT_PRSTATUS,\n+\t\t  (PTRACE_TYPE_ARG3) &iov) == -1)\n+\tperror_with_name (_(\"Couldn't get registers\"));\n+      else\n+\t{\n+\t  fill_gregset (regcache, &regs, regnum);\n+\n+\t  if (ptrace (PTRACE_SETREGSET, tid, NT_PRSTATUS,\n+\t\t      (PTRACE_TYPE_ARG3) &iov) == -1)\n+\t    perror_with_name (_(\"Couldn't set registers\"));\n+\t}\n+    }\n+\n+  /* Access to SPRs has potential security issues, don't support them for\n+     now.  */\n+}\n+\n+/* Initialize OpenRISC Linux native support.  */\n+\n+void _initialize_or1k_linux_nat ();\n+void\n+_initialize_or1k_linux_nat ()\n+{\n+  /* Register the target.  */\n+  linux_target = &the_or1k_linux_nat_target;\n+  add_inf_child_target (&the_or1k_linux_nat_target);\n+}"
    },
    {
      "sha": "a71a8202b1e78bf7428becdea2a594f609739764",
      "filename": "gdb/or1k-linux-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/or1k-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/or1k-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/or1k-linux-tdep.c?ref=a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
      "patch": "@@ -27,6 +27,8 @@\n #include \"trad-frame.h\"\n #include \"gdbarch.h\"\n \n+#include \"features/or1k-linux.c\"\n+\n /* Define the general register mapping.  The kernel and GDB put registers\n    r1 to r31 in the same place.  The NPC register is stored at index 32 in\n    linux and 33 in GDB, in GDB 32 is for PPC which is not popupated from linux.\n@@ -170,4 +172,7 @@ _initialize_or1k_linux_tdep ()\n {\n   gdbarch_register_osabi (bfd_arch_or1k, 0, GDB_OSABI_LINUX,\n \t\t\t  or1k_linux_init_abi);\n+\n+  /* Initialize the standard target descriptions.  */\n+  initialize_tdesc_or1k_linux ();\n }"
    },
    {
      "sha": "19294669e64230a07d57c593266d34ab1e35c1df",
      "filename": "gdb/or1k-linux-tdep.h",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/or1k-linux-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a/gdb/or1k-linux-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/or1k-linux-tdep.h?ref=a45b1e66c5da4b8f5f9c39245ad4ea4769e3420a",
      "patch": "@@ -0,0 +1,26 @@\n+/* Target-dependent code for GNU/Linux on OpenRISC.\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef OR1K_LINUX_TDEP_H\n+#define OR1K_LINUX_TDEP_H\n+\n+/* Target descriptions.  */\n+extern struct target_desc *tdesc_or1k_linux;\n+\n+#endif /* OR1K_LINUX_TDEP_H */"
    }
  ]
}