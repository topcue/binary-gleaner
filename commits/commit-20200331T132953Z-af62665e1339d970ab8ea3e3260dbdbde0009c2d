{
  "sha": "af62665e1339d970ab8ea3e3260dbdbde0009c2d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWY2MjY2NWUxMzM5ZDk3MGFiOGVhM2UzMjYwZGJkYmRlMDAwOWMyZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-03-31T13:29:53Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-03-31T13:29:53Z"
    },
    "message": "Don't pass NULL to memcpy in gdb\n\nI compiled gdb with -fsanitize=undefined and ran the test suite.\n\nA couple of reports came from passing NULL to memcpy, e.g.:\n\n[...]btrace-common.cc:176:13: runtime error: null pointer passed as argument 2, which is declared to never be null\n\nWhile it would be better to fix this in the standard, in the meantime\nit seems easy to avoid this error.\n\ngdb/ChangeLog\n2020-03-31  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2/abbrev.c (abbrev_table::read): Conditionally call\n\tmemcpy.\n\ngdbsupport/ChangeLog\n2020-03-31  Tom Tromey  <tromey@adacore.com>\n\n\t* btrace-common.cc (btrace_data_append): Conditionally call\n\tmemcpy.",
    "tree": {
      "sha": "826edde9a32cce686cb46b1a89f7a341034a7d4b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/826edde9a32cce686cb46b1a89f7a341034a7d4b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/af62665e1339d970ab8ea3e3260dbdbde0009c2d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af62665e1339d970ab8ea3e3260dbdbde0009c2d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/af62665e1339d970ab8ea3e3260dbdbde0009c2d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af62665e1339d970ab8ea3e3260dbdbde0009c2d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "16b0db75af6b4b4d434aa84c74d58b7290e04143",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/16b0db75af6b4b4d434aa84c74d58b7290e04143",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/16b0db75af6b4b4d434aa84c74d58b7290e04143"
    }
  ],
  "stats": {
    "total": 18,
    "additions": 15,
    "deletions": 3
  },
  "files": [
    {
      "sha": "d3873da04b4f0e094d632e434b6133c754b499ae",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af62665e1339d970ab8ea3e3260dbdbde0009c2d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af62665e1339d970ab8ea3e3260dbdbde0009c2d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=af62665e1339d970ab8ea3e3260dbdbde0009c2d",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-31  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2/abbrev.c (abbrev_table::read): Conditionally call\n+\tmemcpy.\n+\n 2020-03-30  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* features/riscv/32bit-csr.xml: Regenerated."
    },
    {
      "sha": "b85018060fa30b16b338b72ac99e75e6a9b7a495",
      "filename": "gdb/dwarf2/abbrev.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af62665e1339d970ab8ea3e3260dbdbde0009c2d/gdb/dwarf2/abbrev.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af62665e1339d970ab8ea3e3260dbdbde0009c2d/gdb/dwarf2/abbrev.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/abbrev.c?ref=af62665e1339d970ab8ea3e3260dbdbde0009c2d",
      "patch": "@@ -168,8 +168,9 @@ abbrev_table::read (struct objfile *objfile,\n       cur_abbrev->attrs =\n \tXOBNEWVEC (&abbrev_table->m_abbrev_obstack, struct attr_abbrev,\n \t\t   cur_abbrev->num_attrs);\n-      memcpy (cur_abbrev->attrs, cur_attrs.data (),\n-\t      cur_abbrev->num_attrs * sizeof (struct attr_abbrev));\n+      if (!cur_attrs.empty ())\n+\tmemcpy (cur_abbrev->attrs, cur_attrs.data (),\n+\t\tcur_abbrev->num_attrs * sizeof (struct attr_abbrev));\n \n       abbrev_table->add_abbrev (abbrev_number, cur_abbrev);\n "
    },
    {
      "sha": "86233e8d0ef5a21d01d082391ad95a50a04dd52f",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af62665e1339d970ab8ea3e3260dbdbde0009c2d/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af62665e1339d970ab8ea3e3260dbdbde0009c2d/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=af62665e1339d970ab8ea3e3260dbdbde0009c2d",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-31  Tom Tromey  <tromey@adacore.com>\n+\n+\t* btrace-common.cc (btrace_data_append): Conditionally call\n+\tmemcpy.\n+\n 2020-03-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* create-version.sh: Resolve issues highlighted by shellcheck."
    },
    {
      "sha": "e8b24db7d53607f92a010100ad22f2cd52e07d5b",
      "filename": "gdbsupport/btrace-common.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/af62665e1339d970ab8ea3e3260dbdbde0009c2d/gdbsupport/btrace-common.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/af62665e1339d970ab8ea3e3260dbdbde0009c2d/gdbsupport/btrace-common.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/btrace-common.cc?ref=af62665e1339d970ab8ea3e3260dbdbde0009c2d",
      "patch": "@@ -173,7 +173,8 @@ btrace_data_append (struct btrace_data *dst,\n \t    size = src->variant.pt.size + dst->variant.pt.size;\n \t    data = (gdb_byte *) xmalloc (size);\n \n-\t    memcpy (data, dst->variant.pt.data, dst->variant.pt.size);\n+\t    if (dst->variant.pt.size > 0)\n+\t      memcpy (data, dst->variant.pt.data, dst->variant.pt.size);\n \t    memcpy (data + dst->variant.pt.size, src->variant.pt.data,\n \t\t    src->variant.pt.size);\n "
    }
  ]
}