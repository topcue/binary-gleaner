{
  "sha": "fb516a69133999df3e30fccb7c4f5759eb1090eb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmI1MTZhNjkxMzM5OTlkZjNlMzBmY2NiN2M0ZjU3NTllYjEwOTBlYg==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-14T16:41:11Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-18T01:40:50Z"
    },
    "message": "Add support for NetBSD threads in i386-bsd-nat.c\n\nNetBSD ptrace(2) accepts thread id (LWP) as the 4th argument for threads.\n\nDefine gdb_ptrace() a wrapper function for ptrace(2) that properly passes\nthe pid,lwp pair on NetBSD and the result of get_ptrace_pid() for others.\n\ngdb/ChangeLog:\n\n\t* i386-bsd-nat.c (gdb_ptrace): New.\n\t* (i386bsd_fetch_inferior_registers,\n\ti386bsd_store_inferior_registers) Switch from pid_t to ptid_t.\n\t* (i386bsd_fetch_inferior_registers,\n\ti386bsd_store_inferior_registers) Use gdb_ptrace.",
    "tree": {
      "sha": "5d2371ef4e081222b399637b4fa48fd76df03880",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5d2371ef4e081222b399637b4fa48fd76df03880"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fb516a69133999df3e30fccb7c4f5759eb1090eb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb516a69133999df3e30fccb7c4f5759eb1090eb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fb516a69133999df3e30fccb7c4f5759eb1090eb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb516a69133999df3e30fccb7c4f5759eb1090eb/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1c0aa1fbb2fb1920c12400940704ee90491b7290",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c0aa1fbb2fb1920c12400940704ee90491b7290",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1c0aa1fbb2fb1920c12400940704ee90491b7290"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 50,
    "deletions": 21
  },
  "files": [
    {
      "sha": "a89267fc27d21c2016d394993605c7f951c3d2b7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb516a69133999df3e30fccb7c4f5759eb1090eb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb516a69133999df3e30fccb7c4f5759eb1090eb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fb516a69133999df3e30fccb7c4f5759eb1090eb",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-17  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* i386-bsd-nat.c (gdb_ptrace): New.\n+\t* (i386bsd_fetch_inferior_registers,\n+\ti386bsd_store_inferior_registers) Switch from pid_t to ptid_t.\n+\t* (i386bsd_fetch_inferior_registers,\n+\ti386bsd_store_inferior_registers) Use gdb_ptrace.\n+\n 2020-03-17  Kamil Rytarowski  <n54@gmx.com>\n \n \t* amd64-bsd-nat.c (gdb_ptrace): New."
    },
    {
      "sha": "3250dab737fec2fd394c530e48912ebe2e98f07a",
      "filename": "gdb/i386-bsd-nat.c",
      "status": "modified",
      "additions": 42,
      "deletions": 21,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb516a69133999df3e30fccb7c4f5759eb1090eb/gdb/i386-bsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb516a69133999df3e30fccb7c4f5759eb1090eb/gdb/i386-bsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-bsd-nat.c?ref=fb516a69133999df3e30fccb7c4f5759eb1090eb",
      "patch": "@@ -34,6 +34,21 @@\n #include \"inf-ptrace.h\"\n \f\n \n+static int\n+gdb_ptrace (PTRACE_TYPE_ARG1 request, ptid_t ptid, PTRACE_TYPE_ARG3 addr,\n+\t    PTRACE_TYPE_ARG4 data)\n+{\n+#ifdef __NetBSD__\n+  gdb_assert (data == 0);\n+  /* Support for NetBSD threads: unlike other ptrace implementations in this\n+     file, NetBSD requires that we pass both the pid and lwp.  */\n+  return ptrace (request, ptid.pid (), addr, ptid.lwp ());\n+#else\n+  pid_t pid = get_ptrace_pid (ptid);\n+  return ptrace (request, pid, addr, data);\n+#endif\n+}\n+\n /* In older BSD versions we cannot get at some of the segment\n    registers.  FreeBSD for example didn't support the %fs and %gs\n    registers until the 3.0 release.  We have autoconf checks for their\n@@ -130,13 +145,13 @@ i386bsd_collect_gregset (const struct regcache *regcache,\n void\n i386bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n {\n-  pid_t pid = get_ptrace_pid (regcache->ptid ());\n+  ptid_t ptid = regcache->ptid ();\n \n   if (regnum == -1 || GETREGS_SUPPLIES (regnum))\n     {\n       struct reg regs;\n \n-      if (ptrace (PT_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n+      if (gdb_ptrace (PT_GETREGS, ptid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n \tperror_with_name (_(\"Couldn't get registers\"));\n \n       i386bsd_supply_gregset (regcache, &regs);\n@@ -149,7 +164,7 @@ i386bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n     {\n       register_t base;\n \n-      if (ptrace (PT_GETFSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+      if (gdb_ptrace (PT_GETFSBASE, ptid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't get segment register fs_base\"));\n \n       regcache->raw_supply (I386_FSBASE_REGNUM, &base);\n@@ -162,7 +177,7 @@ i386bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n     {\n       register_t base;\n \n-      if (ptrace (PT_GETGSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+      if (gdb_ptrace (PT_GETGSBASE, ptid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't get segment register gs_base\"));\n \n       regcache->raw_supply (I386_GSBASE_REGNUM, &base);\n@@ -184,8 +199,8 @@ i386bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n \t  void *xstateregs;\n \n \t  xstateregs = alloca (x86bsd_xsave_len);\n-\t  if (ptrace (PT_GETXSTATE, pid,\n-\t\t      (PTRACE_TYPE_ARG3) xstateregs, 0) == -1)\n+\t  if (gdb_ptrace (PT_GETXSTATE, ptid,\n+\t\t\t  (PTRACE_TYPE_ARG3) xstateregs, 0) == -1)\n \t    perror_with_name (_(\"Couldn't get extended state status\"));\n \n \t  i387_supply_xsave (regcache, -1, xstateregs);\n@@ -195,7 +210,8 @@ i386bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n       \n #ifdef HAVE_PT_GETXMMREGS\n       if (have_ptrace_xmmregs != 0\n-\t  && ptrace(PT_GETXMMREGS, pid, (PTRACE_TYPE_ARG3) xmmregs, 0) == 0)\n+\t  && gdb_ptrace(PT_GETXMMREGS, ptid,\n+\t\t\t(PTRACE_TYPE_ARG3) xmmregs, 0) == 0)\n \t{\n \t  have_ptrace_xmmregs = 1;\n \t  i387_supply_fxsave (regcache, -1, xmmregs);\n@@ -204,7 +220,8 @@ i386bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n \t{\n \t  have_ptrace_xmmregs = 0;\n #endif\n-          if (ptrace (PT_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n+          if (gdb_ptrace (PT_GETFPREGS, ptid,\n+\t\t\t  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n \t    perror_with_name (_(\"Couldn't get floating point status\"));\n \n \t  i387_supply_fsave (regcache, -1, &fpregs);\n@@ -220,18 +237,18 @@ i386bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n void\n i386bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n {\n-  pid_t pid = get_ptrace_pid (regcache->ptid ());\n+  ptid_t ptid = regcache->ptid ();\n \n   if (regnum == -1 || GETREGS_SUPPLIES (regnum))\n     {\n       struct reg regs;\n \n-      if (ptrace (PT_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n+      if (gdb_ptrace (PT_GETREGS, ptid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n         perror_with_name (_(\"Couldn't get registers\"));\n \n       i386bsd_collect_gregset (regcache, &regs, regnum);\n \n-      if (ptrace (PT_SETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n+      if (gdb_ptrace (PT_SETREGS, ptid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)\n         perror_with_name (_(\"Couldn't write registers\"));\n \n       if (regnum != -1)\n@@ -245,7 +262,7 @@ i386bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n \n       regcache->raw_collect (I386_FSBASE_REGNUM, &base);\n \n-      if (ptrace (PT_SETFSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+      if (gdb_ptrace (PT_SETFSBASE, ptid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't write segment register fs_base\"));\n       if (regnum != -1)\n \treturn;\n@@ -258,7 +275,7 @@ i386bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n \n       regcache->raw_collect (I386_GSBASE_REGNUM, &base);\n \n-      if (ptrace (PT_SETGSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+      if (gdb_ptrace (PT_SETGSBASE, ptid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't write segment register gs_base\"));\n       if (regnum != -1)\n \treturn;\n@@ -278,40 +295,44 @@ i386bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n \t  void *xstateregs;\n \n \t  xstateregs = alloca (x86bsd_xsave_len);\n-\t  if (ptrace (PT_GETXSTATE, pid,\n-\t\t      (PTRACE_TYPE_ARG3) xstateregs, 0) == -1)\n+\t  if (gdb_ptrace (PT_GETXSTATE, ptid,\n+\t\t\t  (PTRACE_TYPE_ARG3) xstateregs, 0) == -1)\n \t    perror_with_name (_(\"Couldn't get extended state status\"));\n \n \t  i387_collect_xsave (regcache, -1, xstateregs, 0);\n \n-\t  if (ptrace (PT_SETXSTATE, pid,\n-\t\t      (PTRACE_TYPE_ARG3) xstateregs, x86bsd_xsave_len) == -1)\n+\t  if (gdb_ptrace (PT_SETXSTATE, ptid, (PTRACE_TYPE_ARG3) xstateregs,\n+\t\t\t  x86bsd_xsave_len) == -1)\n \t    perror_with_name (_(\"Couldn't write extended state status\"));\n \t  return;\n \t}\n #endif\n \n #ifdef HAVE_PT_GETXMMREGS\n       if (have_ptrace_xmmregs != 0\n-\t  && ptrace(PT_GETXMMREGS, pid, (PTRACE_TYPE_ARG3) xmmregs, 0) == 0)\n+\t  && gdb_ptrace(PT_GETXMMREGS, ptid,\n+\t\t\t(PTRACE_TYPE_ARG3) xmmregs, 0) == 0)\n \t{\n \t  have_ptrace_xmmregs = 1;\n \n \t  i387_collect_fxsave (regcache, regnum, xmmregs);\n \n-\t  if (ptrace (PT_SETXMMREGS, pid, (PTRACE_TYPE_ARG3) xmmregs, 0) == -1)\n+\t  if (gdb_ptrace (PT_SETXMMREGS, ptid,\n+\t\t\t  (PTRACE_TYPE_ARG3) xmmregs, 0) == -1)\n             perror_with_name (_(\"Couldn't write XMM registers\"));\n \t}\n       else\n \t{\n \t  have_ptrace_xmmregs = 0;\n #endif\n-          if (ptrace (PT_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n+          if (gdb_ptrace (PT_GETFPREGS, ptid,\n+\t\t\t  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n \t    perror_with_name (_(\"Couldn't get floating point status\"));\n \n           i387_collect_fsave (regcache, regnum, &fpregs);\n \n-          if (ptrace (PT_SETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n+          if (gdb_ptrace (PT_SETFPREGS, ptid,\n+\t\t\t  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)\n \t    perror_with_name (_(\"Couldn't write floating point status\"));\n #ifdef HAVE_PT_GETXMMREGS\n         }"
    }
  ]
}