{
  "sha": "7f6aba03b929d3d893378760eeeca431005fc5cd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2Y2YWJhMDNiOTI5ZDNkODkzMzc4NzYwZWVlY2E0MzEwMDVmYzVjZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-03T02:00:18Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-10-01T21:12:40Z"
    },
    "message": "Introduce metadata style\n\nThis introduces a new \"metadata\" style and changes many places in gdb\nto use it.  The idea here is to let the user distinguish gdb output\nfrom output that (conceptually at least) comes directly from the\ninferior.  The newly-styled category includes text that gdb\ntraditionally surrounds in \"<...>\", like \"<unavailable>\".\n\nI only added a single test for this.  In many cases this output is\ndifficult to test.  Also, while developing this errors in the\nimplementation of the new printf formats showed up as regressions.\n\ngdb/ChangeLog\n2019-10-01  Tom Tromey  <tom@tromey.com>\n\n\t* p-lang.c (pascal_printstr): Use metadata style.\n\t* value.c (show_convenience): Use metadata style.\n\t* valprint.c (valprint_check_validity, val_print_optimized_out)\n\t(val_print_not_saved, val_print_unavailable)\n\t(val_print_invalid_address, generic_val_print, val_print)\n\t(value_check_printable, val_print_array_elements): Use metadata\n\tstyle.\n\t* ui-out.h (class ui_out) <field_fmt>: New overload.\n\t<do_field_fmt>: Add style parameter.\n\t* ui-out.c (ui_out::field_fmt): New overload.\n\t* typeprint.c (type_print_unknown_return_type)\n\t(val_print_not_allocated, val_print_not_associated): Use metadata\n\tstyle.\n\t* tui/tui-out.h (class tui_ui_out) <do_field_fmt>: Add style\n\tparameter.\n\t* tui/tui-out.c (tui_ui_out::do_field_fmt): Update.\n\t* tracepoint.c (tvariables_info_1): Use metadata style.\n\t* stack.c (print_frame_arg, print_frame_info, print_frame)\n\t(info_frame_command_core): Use metadata style.\n\t* skip.c (info_skip_command): Use metadata style.\n\t* rust-lang.c (rust_print_enum): Use metadata style.\n\t* python/py-prettyprint.c (print_stack_unless_memory_error): Use\n\tmetadata style.\n\t* python/py-framefilter.c (py_print_single_arg): Use metadata\n\tstyle.\n\t* printcmd.c (do_one_display, print_variable_and_value): Use\n\tmetadata style.\n\t* p-valprint.c (pascal_val_print)\n\t(pascal_object_print_value_fields): Use metadata style.\n\t* p-typeprint.c (pascal_type_print_base): Use metadata style.\n\t* mi/mi-out.h (class mi_ui_out) <do_field_fmt>: Add style\n\tparameter.\n\t* mi/mi-out.c (mi_ui_out::do_field_fmt): Update.\n\t* m2-valprint.c (m2_print_long_set): Use metadata style.\n\t* m2-typeprint.c (m2_print_type): Use metadata style.\n\t* infcmd.c (print_return_value_1): Use metadata style.\n\t* gnu-v3-abi.c (print_one_vtable): Use metadata style.\n\t* f-valprint.c (info_common_command_for_block): Use metadata\n\tstyle.\n\t* f-typeprint.c (f_type_print_base): Use metadata style.\n\t* expprint.c (print_subexp_standard): Use metadata style.\n\t* cp-valprint.c (cp_print_value_fields): Use metadata style.\n\t* cli/cli-style.h (class cli_style_option): Add constructor.\n\t(metadata_style): Declare.\n\t* cli/cli-style.c (metadata_style): New global.\n\t(_initialize_cli_style): Register metadata style.\n\t* cli-out.h (class cli_ui_out) <do_field_fmt>: Add style\n\tparameter.\n\t* cli-out.c (cli_ui_out::do_field_fmt): Update.\n\t* c-typeprint.c (c_type_print_base_struct_union)\n\t(c_type_print_base_1): Use metadata style.\n\t* breakpoint.c (watchpoint_value_print)\n\t(print_one_breakpoint_location): Use metadata style.\n\t* break-catch-syscall.c (print_one_catch_syscall): Use metadata\n\tstyle.\n\t* break-catch-sig.c (signal_catchpoint_print_one): Use metadata\n\tstyle.\n\t* ada-valprint.c (val_print_packed_array_elements, printstr)\n\t(print_field_values, ada_val_print_ref, ada_val_print): Use\n\tmetadata style.\n\t* ada-typeprint.c (print_array_type, ada_print_type): Use metadata\n\tstyle.\n\t* ada-tasks.c (print_ada_task_info, info_task): Use metadata\n\tstyle.\n\t* ada-lang.c (user_select_syms): Use metadata style.\n\ngdb/testsuite/ChangeLog\n2019-10-01  Tom Tromey  <tom@tromey.com>\n\n\t* lib/gdb-utils.exp (style): Handle \"metadata\" argument.\n\t* gdb.base/style.exp: Add metadata style test.",
    "tree": {
      "sha": "7c93d7d3b636872d587ed55ad39a1188e381f01d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7c93d7d3b636872d587ed55ad39a1188e381f01d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7f6aba03b929d3d893378760eeeca431005fc5cd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f6aba03b929d3d893378760eeeca431005fc5cd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7f6aba03b929d3d893378760eeeca431005fc5cd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f6aba03b929d3d893378760eeeca431005fc5cd/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "14309bb6bfe31e5ad26035cd41a46bdbaec154b0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14309bb6bfe31e5ad26035cd41a46bdbaec154b0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/14309bb6bfe31e5ad26035cd41a46bdbaec154b0"
    }
  ],
  "stats": {
    "total": 458,
    "additions": 331,
    "deletions": 127
  },
  "files": [
    {
      "sha": "9494dc4adc9ef588ee73247b376e5df29864d6c3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -1,3 +1,71 @@\n+2019-10-01  Tom Tromey  <tom@tromey.com>\n+\n+\t* p-lang.c (pascal_printstr): Use metadata style.\n+\t* value.c (show_convenience): Use metadata style.\n+\t* valprint.c (valprint_check_validity, val_print_optimized_out)\n+\t(val_print_not_saved, val_print_unavailable)\n+\t(val_print_invalid_address, generic_val_print, val_print)\n+\t(value_check_printable, val_print_array_elements): Use metadata\n+\tstyle.\n+\t* ui-out.h (class ui_out) <field_fmt>: New overload.\n+\t<do_field_fmt>: Add style parameter.\n+\t* ui-out.c (ui_out::field_fmt): New overload.\n+\t* typeprint.c (type_print_unknown_return_type)\n+\t(val_print_not_allocated, val_print_not_associated): Use metadata\n+\tstyle.\n+\t* tui/tui-out.h (class tui_ui_out) <do_field_fmt>: Add style\n+\tparameter.\n+\t* tui/tui-out.c (tui_ui_out::do_field_fmt): Update.\n+\t* tracepoint.c (tvariables_info_1): Use metadata style.\n+\t* stack.c (print_frame_arg, print_frame_info, print_frame)\n+\t(info_frame_command_core): Use metadata style.\n+\t* skip.c (info_skip_command): Use metadata style.\n+\t* rust-lang.c (rust_print_enum): Use metadata style.\n+\t* python/py-prettyprint.c (print_stack_unless_memory_error): Use\n+\tmetadata style.\n+\t* python/py-framefilter.c (py_print_single_arg): Use metadata\n+\tstyle.\n+\t* printcmd.c (do_one_display, print_variable_and_value): Use\n+\tmetadata style.\n+\t* p-valprint.c (pascal_val_print)\n+\t(pascal_object_print_value_fields): Use metadata style.\n+\t* p-typeprint.c (pascal_type_print_base): Use metadata style.\n+\t* mi/mi-out.h (class mi_ui_out) <do_field_fmt>: Add style\n+\tparameter.\n+\t* mi/mi-out.c (mi_ui_out::do_field_fmt): Update.\n+\t* m2-valprint.c (m2_print_long_set): Use metadata style.\n+\t* m2-typeprint.c (m2_print_type): Use metadata style.\n+\t* infcmd.c (print_return_value_1): Use metadata style.\n+\t* gnu-v3-abi.c (print_one_vtable): Use metadata style.\n+\t* f-valprint.c (info_common_command_for_block): Use metadata\n+\tstyle.\n+\t* f-typeprint.c (f_type_print_base): Use metadata style.\n+\t* expprint.c (print_subexp_standard): Use metadata style.\n+\t* cp-valprint.c (cp_print_value_fields): Use metadata style.\n+\t* cli/cli-style.h (class cli_style_option): Add constructor.\n+\t(metadata_style): Declare.\n+\t* cli/cli-style.c (metadata_style): New global.\n+\t(_initialize_cli_style): Register metadata style.\n+\t* cli-out.h (class cli_ui_out) <do_field_fmt>: Add style\n+\tparameter.\n+\t* cli-out.c (cli_ui_out::do_field_fmt): Update.\n+\t* c-typeprint.c (c_type_print_base_struct_union)\n+\t(c_type_print_base_1): Use metadata style.\n+\t* breakpoint.c (watchpoint_value_print)\n+\t(print_one_breakpoint_location): Use metadata style.\n+\t* break-catch-syscall.c (print_one_catch_syscall): Use metadata\n+\tstyle.\n+\t* break-catch-sig.c (signal_catchpoint_print_one): Use metadata\n+\tstyle.\n+\t* ada-valprint.c (val_print_packed_array_elements, printstr)\n+\t(print_field_values, ada_val_print_ref, ada_val_print): Use\n+\tmetadata style.\n+\t* ada-typeprint.c (print_array_type, ada_print_type): Use metadata\n+\tstyle.\n+\t* ada-tasks.c (print_ada_task_info, info_task): Use metadata\n+\tstyle.\n+\t* ada-lang.c (user_select_syms): Use metadata style.\n+\n 2019-10-01  Tom Tromey  <tom@tromey.com>\n \n \t* cli/cli-cmds.c (pwd_command): Style output."
    },
    {
      "sha": "846c9b4dec586fce1f3b3d40df2495f90459eed6",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -54,6 +54,7 @@\n #include \"gdbsupport/gdb_vecs.h\"\n #include \"typeprint.h\"\n #include \"namespace.h\"\n+#include \"cli/cli-style.h\"\n \n #include \"psymtab.h\"\n #include \"value.h\"\n@@ -3877,8 +3878,8 @@ See set/show multiple-symbol.\"));\n \t  ada_print_symbol_signature (gdb_stdout, syms[i].symbol,\n \t\t\t\t      &type_print_raw_options);\n \t  if (sal.symtab == NULL)\n-\t    printf_filtered (_(\" at <no source file available>:%d\\n\"),\n-\t\t\t     sal.line);\n+\t    printf_filtered (_(\" at %p[<no source file available>%p]:%d\\n\"),\n+\t\t\t     metadata_style.style ().ptr (), nullptr, sal.line);\n \t  else\n \t    printf_filtered (_(\" at %s:%d\\n\"),\n \t\t\t     symtab_to_filename_for_display (sal.symtab),"
    },
    {
      "sha": "e4a52976dcb791ff5d5d2527188d8713531a7487",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -25,6 +25,7 @@\n #include \"gdbthread.h\"\n #include \"progspace.h\"\n #include \"objfiles.h\"\n+#include \"cli/cli-style.h\"\n \n static int ada_build_task_list ();\n \n@@ -1163,9 +1164,14 @@ print_ada_task_info (struct ui_out *uiout,\n       /* Finally, print the task name, without quotes around it, as mi like\n \t is not expecting quotes, and in non mi-like no need for quotes\n          as there is a specific column for the name.  */\n-      uiout->field_string (\"name\",\n-                          task_info->name[0] != '\\0' ? task_info->name\n-                          : _(\"<no name>\"));\n+      uiout->field_fmt (\"name\",\n+\t\t\t(task_info->name[0] != '\\0'\n+\t\t\t ? ui_file_style ()\n+\t\t\t : metadata_style.style ()),\n+\t\t\t\"%s\",\n+\t\t\t(task_info->name[0] != '\\0'\n+\t\t\t ? task_info->name\n+\t\t\t : _(\"<no name>\")));\n \n       uiout->text (\"\\n\");\n     }\n@@ -1201,7 +1207,7 @@ info_task (struct ui_out *uiout, const char *taskno_str, struct inferior *inf)\n   if (task_info->name[0] != '\\0')\n     printf_filtered (_(\"Name: %s\\n\"), task_info->name);\n   else\n-    printf_filtered (_(\"<no name>\\n\"));\n+    fprintf_styled (gdb_stdout, metadata_style.style (), _(\"<no name>\\n\"));\n \n   /* Print the TID and LWP.  */\n   printf_filtered (_(\"Thread: %#lx\\n\"), task_info->ptid.tid ());"
    },
    {
      "sha": "c2461660ad4aff9553b41fd1172d2e3e4ccfe42f",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -393,7 +393,8 @@ print_array_type (struct type *type, struct ui_file *stream, int show,\n \n   if (type == NULL)\n     {\n-      fprintf_filtered (stream, _(\"<undecipherable array type>\"));\n+      fprintf_styled (stream, metadata_style.style (),\n+\t\t      _(\"<undecipherable array type>\"));\n       return;\n     }\n \n@@ -838,7 +839,7 @@ ada_print_type (struct type *type0, const char *varstring,\n       if (is_var_decl)\n \tfprintf_filtered (stream, \"%.*s: \",\n \t\t\t  ada_name_prefix_len (varstring), varstring);\n-      fprintf_filtered (stream, \"<null type?>\");\n+      fprintf_styled (stream, metadata_style.style (), \"<null type?>\");\n       return;\n     }\n \n@@ -894,8 +895,9 @@ ada_print_type (struct type *type0, const char *varstring,\n \t    const char *name = ada_type_name (type);\n \n \t    if (!ada_is_range_type_name (name))\n-\t      fprintf_filtered (stream, _(\"<%s-byte integer>\"),\n-\t\t\t\tpulongest (TYPE_LENGTH (type)));\n+\t      fprintf_styled (stream, metadata_style.style (),\n+\t\t\t      _(\"<%s-byte integer>\"),\n+\t\t\t      pulongest (TYPE_LENGTH (type)));\n \t    else\n \t      {\n \t\tfprintf_filtered (stream, \"range \");\n@@ -916,8 +918,9 @@ ada_print_type (struct type *type0, const char *varstring,\n \t  }\n \tbreak;\n       case TYPE_CODE_FLT:\n-\tfprintf_filtered (stream, _(\"<%s-byte float>\"),\n-\t\t\t  pulongest (TYPE_LENGTH (type)));\n+\tfprintf_styled (stream, metadata_style.style (),\n+\t\t\t_(\"<%s-byte float>\"),\n+\t\t\tpulongest (TYPE_LENGTH (type)));\n \tbreak;\n       case TYPE_CODE_ENUM:\n \tif (show < 0)"
    },
    {
      "sha": "714b6259ec0e6edd8b98b072aab26798aac387dd",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -32,6 +32,7 @@\n #include \"infcall.h\"\n #include \"objfiles.h\"\n #include \"target-float.h\"\n+#include \"cli/cli-style.h\"\n \n static int print_field_values (struct type *, const gdb_byte *,\n \t\t\t       int,\n@@ -237,7 +238,8 @@ val_print_packed_array_elements (struct type *type, const gdb_byte *valaddr,\n \t\t     value_embedded_offset (v0), 0, stream,\n \t\t     recurse + 1, v0, &opts, current_language);\n \t  annotate_elt_rep (i - i0);\n-\t  fprintf_filtered (stream, _(\" <repeats %u times>\"), i - i0);\n+\t  fprintf_filtered (stream, _(\" %p[<repeats %u times>%p]\"),\n+\t\t\t    metadata_style.style ().ptr (), i - i0, nullptr);\n \t  annotate_elt_rep_end ();\n \n \t}\n@@ -527,7 +529,8 @@ printstr (struct ui_file *stream, struct type *elttype, const gdb_byte *string,\n \t  ada_emit_char (char_at (string, i, type_len, byte_order),\n \t\t\t elttype, stream, '\\'', type_len);\n \t  fputs_filtered (\"'\", stream);\n-\t  fprintf_filtered (stream, _(\" <repeats %u times>\"), reps);\n+\t  fprintf_filtered (stream, _(\" %p[<repeats %u times>%p]\"),\n+\t\t\t    metadata_style.style ().ptr (), reps, nullptr);\n \t  i = rep1 - 1;\n \t  things_printed += options->repeat_count_threshold;\n \t  need_comma = 1;\n@@ -671,7 +674,8 @@ print_field_values (struct type *type, const gdb_byte *valaddr,\n \t     order problems.  */\n \t  if (HAVE_CPLUS_STRUCT (type) && TYPE_FIELD_IGNORE (type, i))\n \t    {\n-\t      fputs_filtered (_(\"<optimized out or zero length>\"), stream);\n+\t      fputs_styled (_(\"<optimized out or zero length>\"),\n+\t\t\t    metadata_style.style (), stream);\n \t    }\n \t  else\n \t    {\n@@ -1069,7 +1073,8 @@ ada_val_print_ref (struct type *type, const gdb_byte *valaddr,\n \n   if (TYPE_CODE (elttype) == TYPE_CODE_UNDEF)\n     {\n-      fputs_filtered (\"<ref to undefined type>\", stream);\n+      fputs_styled (\"<ref to undefined type>\", metadata_style.style (),\n+\t\t    stream);\n       return;\n     }\n \n@@ -1212,8 +1217,9 @@ ada_val_print (struct type *type,\n     }\n   catch (const gdb_exception_error &except)\n     {\n-      fprintf_filtered (stream, _(\"<error reading variable: %s>\"),\n-\t\t\texcept.what ());\n+      fprintf_styled (stream, metadata_style.style (),\n+\t\t      _(\"<error reading variable: %s>\"),\n+\t\t      except.what ());\n     }\n }\n "
    },
    {
      "sha": "c475e8aca57244b347bb0932f8f08cc672fb24a1",
      "filename": "gdb/break-catch-sig.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/break-catch-sig.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/break-catch-sig.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-sig.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -28,6 +28,7 @@\n #include \"valprint.h\"\n #include \"cli/cli-utils.h\"\n #include \"completer.h\"\n+#include \"cli/cli-style.h\"\n \n #include <string>\n \n@@ -241,7 +242,8 @@ signal_catchpoint_print_one (struct breakpoint *b,\n     }\n   else\n     uiout->field_string (\"what\",\n-\t\t\t c->catch_all ? \"<any signal>\" : \"<standard signals>\");\n+\t\t\t c->catch_all ? \"<any signal>\" : \"<standard signals>\",\n+\t\t\t metadata_style.style ());\n   uiout->text (\"\\\" \");\n \n   if (uiout->is_mi_like_p ())"
    },
    {
      "sha": "dde80b54a2fb98e946381250591368b3d99ce54b",
      "filename": "gdb/break-catch-syscall.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/break-catch-syscall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/break-catch-syscall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-syscall.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -29,6 +29,7 @@\n #include \"arch-utils.h\"\n #include \"observable.h\"\n #include \"xml-syscall.h\"\n+#include \"cli/cli-style.h\"\n \n /* An instance of this type is used to represent a syscall catchpoint.\n    A breakpoint is really of this type iff its ops pointer points to\n@@ -273,7 +274,7 @@ print_one_catch_syscall (struct breakpoint *b,\n       xfree (text);\n     }\n   else\n-    uiout->field_string (\"what\", \"<any syscall>\");\n+    uiout->field_string (\"what\", \"<any syscall>\", metadata_style.style ());\n   uiout->text (\"\\\" \");\n \n   if (uiout->is_mi_like_p ())"
    },
    {
      "sha": "0a705163386ebae7dbc5a9b96ebb6145dca548e7",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -4457,7 +4457,7 @@ static void\n watchpoint_value_print (struct value *val, struct ui_file *stream)\n {\n   if (val == NULL)\n-    fprintf_unfiltered (stream, _(\"<unreadable>\"));\n+    fprintf_styled (stream, metadata_style.style (), _(\"<unreadable>\"));\n   else\n     {\n       struct value_print_options opts;\n@@ -6055,9 +6055,11 @@ print_one_breakpoint_location (struct breakpoint *b,\n \t    {\n \t      annotate_field (4);\n \t      if (header_of_multiple)\n-\t\tuiout->field_string (\"addr\", \"<MULTIPLE>\");\n+\t\tuiout->field_string (\"addr\", \"<MULTIPLE>\",\n+\t\t\t\t     metadata_style.style ());\n \t      else if (b->loc == NULL || loc->shlib_disabled)\n-\t\tuiout->field_string (\"addr\", \"<PENDING>\");\n+\t\tuiout->field_string (\"addr\", \"<PENDING>\",\n+\t\t\t\t     metadata_style.style ());\n \t      else\n \t\tuiout->field_core_addr (\"addr\",\n \t\t\t\t\tloc->gdbarch, loc->address);"
    },
    {
      "sha": "1a37c4edfb8665f29bb0280ac44c8851828ffc9d",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 19,
      "deletions": 13,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -1116,10 +1116,12 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n \t{\n \t  if (TYPE_STUB (type))\n \t    fprintfi_filtered (level + 4, stream,\n-\t\t\t       _(\"<incomplete type>\\n\"));\n+\t\t\t       _(\"%p[<incomplete type>%p]\\n\"),\n+\t\t\t       metadata_style.style ().ptr (), nullptr);\n \t  else\n \t    fprintfi_filtered (level + 4, stream,\n-\t\t\t       _(\"<no data fields>\\n\"));\n+\t\t\t       _(\"%p[<no data fields>%p]\\n\"),\n+\t\t\t       metadata_style.style ().ptr (), nullptr);\n \t}\n \n       /* Start off with no specific section type, so we can print\n@@ -1277,7 +1279,8 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n \t\t{\n \t\t  /* Keep GDB from crashing here.  */\n \t\t  fprintf_filtered (stream,\n-\t\t\t\t    _(\"<undefined type> %s;\\n\"),\n+\t\t\t\t    _(\"%p[<undefined type>%p] %s;\\n\"),\n+\t\t\t\t    metadata_style.style ().ptr (), nullptr,\n \t\t\t\t    TYPE_FN_FIELD_PHYSNAME (f, j));\n \t\t  break;\n \t\t}\n@@ -1325,9 +1328,9 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n \t\t\t\t\t\t &local_flags);\n \t\t    }\n \t\t  else\n-\t\t    fprintf_filtered (stream,\n-\t\t\t\t      _(\"<badly mangled name '%s'>\"),\n-\t\t\t\t      mangled_name);\n+\t\t    fprintf_styled (stream, metadata_style.style (),\n+\t\t\t\t    _(\"<badly mangled name '%s'>\"),\n+\t\t\t\t    mangled_name);\n \t\t}\n \t      else\n \t\t{\n@@ -1465,7 +1468,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \n   if (type == NULL)\n     {\n-      fputs_filtered (_(\"<type unknown>\"), stream);\n+      fputs_styled (_(\"<type unknown>\"), metadata_style.style (), stream);\n       return;\n     }\n \n@@ -1511,7 +1514,8 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t couldn't resolve TYPE_TARGET_TYPE.  Not much we can do.  */\n       gdb_assert (TYPE_NAME (type) == NULL);\n       gdb_assert (TYPE_TARGET_TYPE (type) == NULL);\n-      fprintf_filtered (stream, _(\"<unnamed typedef>\"));\n+      fprintf_styled (stream, metadata_style.style (),\n+\t\t      _(\"<unnamed typedef>\"));\n       break;\n \n     case TYPE_CODE_FUNC:\n@@ -1622,10 +1626,12 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t      {\n \t\tif (TYPE_STUB (type))\n \t\t  fprintfi_filtered (level + 4, stream,\n-\t\t\t\t     _(\"<incomplete type>\\n\"));\n+\t\t\t\t     _(\"%p[<incomplete type>%p]\\n\"),\n+\t\t\t\t     metadata_style.style ().ptr (), nullptr);\n \t\telse\n \t\t  fprintfi_filtered (level + 4, stream,\n-\t\t\t\t     _(\"<no data fields>\\n\"));\n+\t\t\t\t     _(\"%p[<no data fields>%p]\\n\"),\n+\t\t\t\t     metadata_style.style ().ptr (), nullptr);\n \t      }\n \t    len = TYPE_NFIELDS (type);\n \t    for (i = 0; i < len; i++)\n@@ -1668,7 +1674,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \n     case TYPE_CODE_RANGE:\n       /* This should not occur.  */\n-      fprintf_filtered (stream, _(\"<range type>\"));\n+      fprintf_styled (stream, metadata_style.style (), _(\"<range type>\"));\n       break;\n \n     case TYPE_CODE_NAMESPACE:\n@@ -1690,8 +1696,8 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t{\n \t  /* At least for dump_symtab, it is important that this not\n \t     be an error ().  */\n-\t  fprintf_filtered (stream, _(\"<invalid type code %d>\"),\n-\t\t\t    TYPE_CODE (type));\n+\t  fprintf_styled (stream, metadata_style.style (),\n+\t\t\t  _(\"<invalid type code %d>\"), TYPE_CODE (type));\n \t}\n       break;\n     }"
    },
    {
      "sha": "702e4e4dfe2eb187f019a5e7a26ff57092984eb8",
      "filename": "gdb/cli-out.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/cli-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/cli-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli-out.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -188,16 +188,15 @@ cli_ui_out::do_field_string (int fldno, int width, ui_align align,\n \n void\n cli_ui_out::do_field_fmt (int fldno, int width, ui_align align,\n-\t\t\t  const char *fldname, const char *format,\n-\t\t\t  va_list args)\n+\t\t\t  const char *fldname, const ui_file_style &style,\n+\t\t\t  const char *format, va_list args)\n {\n   if (m_suppress_output)\n     return;\n \n   std::string str = string_vprintf (format, args);\n \n-  do_field_string (fldno, width, align, fldname, str.c_str (),\n-\t\t   ui_file_style ());\n+  do_field_string (fldno, width, align, fldname, str.c_str (), style);\n }\n \n void"
    },
    {
      "sha": "7d5b4febba5435b1c568547d4107f8e11a81b881",
      "filename": "gdb/cli-out.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/cli-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/cli-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli-out.h?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -59,9 +59,9 @@ class cli_ui_out : public ui_out\n \t\t\t\tconst char *string,\n \t\t\t\tconst ui_file_style &style) override;\n   virtual void do_field_fmt (int fldno, int width, ui_align align,\n-\t\t\t     const char *fldname, const char *format,\n-\t\t\t     va_list args)\n-    override ATTRIBUTE_PRINTF (6,0);\n+\t\t\t     const char *fldname, const ui_file_style &style,\n+\t\t\t     const char *format, va_list args)\n+    override ATTRIBUTE_PRINTF (7, 0);\n   virtual void do_spaces (int numspaces) override;\n   virtual void do_text (const char *string) override;\n   virtual void do_message (const ui_file_style &style,"
    },
    {
      "sha": "a0c5c0a950d1e31a4d47eb798da4ed339e11203a",
      "filename": "gdb/cli/cli-style.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/cli/cli-style.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/cli/cli-style.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-style.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -85,6 +85,10 @@ cli_style_option title_style (\"title\", ui_file_style::BOLD);\n \n /* See cli-style.h.  */\n \n+cli_style_option metadata_style (\"metadata\", ui_file_style::DIM);\n+\n+/* See cli-style.h.  */\n+\n cli_style_option::cli_style_option (const char *name,\n \t\t\t\t    ui_file_style::basic_color fg)\n   : m_name (name),\n@@ -372,4 +376,11 @@ Highlight display styling.\\n\\\n Configure highlight colors and display intensity\\n\\\n Some commands use the highlight style to draw the attention to a part\\n\\\n of their output.\"));\n+\n+  STYLE_ADD_SETSHOW_COMMANDS (metadata_style,\n+\t\t\t      _(\"\\\n+Metadata display styling\\n\\\n+Configure metadata colors and display intensity\\n\\\n+The \\\"metadata\\\" style is used when GDB displays information about\\n\\\n+your data, for example \\\"<unavailable>\\\"\"));\n }"
    },
    {
      "sha": "6716471dec3ff14a8bb50e2e73af65ce57647b28",
      "filename": "gdb/cli/cli-style.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/cli/cli-style.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/cli/cli-style.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-style.h?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -34,6 +34,9 @@ class cli_style_option\n   /* Construct a CLI style option with an intensity.  */\n   cli_style_option (const char *name, ui_file_style::intensity i);\n \n+  /* Construct a CLI style option with an intensity.  */\n+  cli_style_option (ui_file_style::intensity val);\n+\n   /* Return a ui_file_style corresponding to the settings in this CLI\n      style.  */\n   ui_file_style style () const;\n@@ -108,6 +111,8 @@ extern cli_style_option highlight_style;\n /* The title style.  */\n extern cli_style_option title_style;\n \n+/* The metadata style.  */\n+extern cli_style_option metadata_style;\n \n /* True if source styling is enabled.  */\n extern bool source_styling;"
    },
    {
      "sha": "e73b0e27faf45df222551eb4a443e9a61b6dd30e",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -37,6 +37,7 @@\n #include \"typeprint.h\"\n #include \"gdbsupport/byte-vector.h\"\n #include \"gdbarch.h\"\n+#include \"cli/cli-style.h\"\n \n static struct obstack dont_print_vb_obstack;\n static struct obstack dont_print_statmem_obstack;\n@@ -170,7 +171,7 @@ cp_print_value_fields (struct type *type, struct type *real_type,\n \n   /* If there are no data fields, skip this part */\n   if (len == n_baseclasses || !len)\n-    fprintf_filtered (stream, \"<No data fields>\");\n+    fprintf_styled (stream, metadata_style.style (), \"<No data fields>\");\n   else\n     {\n       size_t statmem_obstack_initial_size = 0;\n@@ -268,15 +269,17 @@ cp_print_value_fields (struct type *type, struct type *real_type,\n \t         byte order problems.  */\n \t      if (TYPE_FIELD_IGNORE (type, i))\n \t\t{\n-\t\t  fputs_filtered (\"<optimized out or zero length>\", stream);\n+\t\t  fputs_styled (\"<optimized out or zero length>\",\n+\t\t\t\tmetadata_style.style (), stream);\n \t\t}\n \t      else if (value_bits_synthetic_pointer (val,\n \t\t\t\t\t\t     TYPE_FIELD_BITPOS (type,\n \t\t\t\t\t\t\t\t\ti),\n \t\t\t\t\t\t     TYPE_FIELD_BITSIZE (type,\n \t\t\t\t\t\t\t\t\t i)))\n \t\t{\n-\t\t  fputs_filtered (_(\"<synthetic pointer>\"), stream);\n+\t\t  fputs_styled (_(\"<synthetic pointer>\"),\n+\t\t\t\tmetadata_style.style (), stream);\n \t\t}\n \t      else\n \t\t{\n@@ -292,8 +295,8 @@ cp_print_value_fields (struct type *type, struct type *real_type,\n \t    {\n \t      if (TYPE_FIELD_IGNORE (type, i))\n \t\t{\n-\t\t  fputs_filtered (\"<optimized out or zero length>\",\n-\t\t\t\t  stream);\n+\t\t  fputs_styled (\"<optimized out or zero length>\",\n+\t\t\t\tmetadata_style.style (), stream);\n \t\t}\n \t      else if (field_is_static (&TYPE_FIELD (type, i)))\n \t\t{\n@@ -307,9 +310,9 @@ cp_print_value_fields (struct type *type, struct type *real_type,\n \t\t    }\n \t\t  catch (const gdb_exception_error &ex)\n \t\t    {\n-\t\t      fprintf_filtered (stream,\n-\t\t\t\t\t_(\"<error reading variable: %s>\"),\n-\t\t\t\t\tex.what ());\n+\t\t      fprintf_styled (stream, metadata_style.style (),\n+\t\t\t\t      _(\"<error reading variable: %s>\"),\n+\t\t\t\t      ex.what ());\n \t\t    }\n \t\t}\n \t      else if (i == vptr_fieldno && type == vptr_basetype)"
    },
    {
      "sha": "c98638ab7fe9cfb0c496600bcedbc9548f2669c0",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -29,6 +29,7 @@\n #include \"block.h\"\n #include \"objfiles.h\"\n #include \"valprint.h\"\n+#include \"cli/cli-style.h\"\n \n #include <ctype.h>\n \n@@ -510,8 +511,9 @@ print_subexp_standard (struct expression *exp, int *pos,\n       if (exp->language_defn->la_name_of_this)\n \tfputs_filtered (exp->language_defn->la_name_of_this, stream);\n       else\n-\tfprintf_filtered (stream, _(\"<language %s has no 'this'>\"),\n-\t\t\t  exp->language_defn->la_name);\n+\tfprintf_styled (stream, metadata_style.style (),\n+\t\t\t_(\"<language %s has no 'this'>\"),\n+\t\t\texp->language_defn->la_name);\n       return;\n \n       /* Modula-2 ops */"
    },
    {
      "sha": "0093aebddc2c10886729f9bac5645263e0d1fb56",
      "filename": "gdb/f-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/f-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/f-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-typeprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -31,6 +31,7 @@\n #include \"target.h\"\n #include \"f-lang.h\"\n #include \"typeprint.h\"\n+#include \"cli/cli-style.h\"\n \n #if 0\t\t\t\t/* Currently unused.  */\n static void f_type_print_args (struct type *, struct ui_file *);\n@@ -325,7 +326,7 @@ f_type_print_base (struct type *type, struct ui_file *stream, int show,\n   wrap_here (\"    \");\n   if (type == NULL)\n     {\n-      fputs_filtered (\"<type unknown>\", stream);\n+      fputs_styled (\"<type unknown>\", metadata_style.style (), stream);\n       return;\n     }\n "
    },
    {
      "sha": "f9d49233fcaeb51a96a4b1ba7202282c9dc9fefa",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -33,6 +33,7 @@\n #include \"command.h\"\n #include \"block.h\"\n #include \"dictionary.h\"\n+#include \"cli/cli-style.h\"\n \n static void f77_get_dynamic_length_of_aggregate (struct type *);\n \n@@ -415,8 +416,9 @@ info_common_command_for_block (const struct block *block, const char *comname,\n \n \t    catch (const gdb_exception_error &except)\n \t      {\n-\t\tprintf_filtered (\"<error reading variable: %s>\",\n-\t\t\t\t except.what ());\n+\t\tfprintf_styled (gdb_stdout, metadata_style.style (),\n+\t\t\t\t\"<error reading variable: %s>\",\n+\t\t\t\texcept.what ());\n \t      }\n \n \t    putchar_filtered ('\\n');"
    },
    {
      "sha": "1d4e43ad7f6a367f2fd2aeee7f004896613fecab",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -28,6 +28,7 @@\n #include \"c-lang.h\"\n #include \"typeprint.h\"\n #include <algorithm>\n+#include \"cli/cli-style.h\"\n \n static struct cp_abi_ops gnu_v3_abi_ops;\n \n@@ -912,7 +913,8 @@ print_one_vtable (struct gdbarch *gdbarch, struct value *value,\n \t}\n       catch (const gdb_exception_error &ex)\n \t{\n-\t  printf_filtered (_(\"<error: %s>\"), ex.what ());\n+\t  fprintf_styled (gdb_stdout, metadata_style.style (),\n+\t\t\t  _(\"<error: %s>\"), ex.what ());\n \t  got_error = 1;\n \t}\n "
    },
    {
      "sha": "20523fed534ab4451fb5b21ac438107944b210f1",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -60,6 +60,7 @@\n #include \"interps.h\"\n #include \"gdbsupport/gdb_optional.h\"\n #include \"source.h\"\n+#include \"cli/cli-style.h\"\n \n /* Local functions: */\n \n@@ -1628,7 +1629,8 @@ print_return_value_1 (struct ui_out *uiout, struct return_value_info *rv)\n \t  uiout->field_stream (\"return-value\", stb);\n \t}\n       else\n-\tuiout->field_string (\"return-value\", _(\"<not displayed>\"));\n+\tuiout->field_string (\"return-value\", _(\"<not displayed>\"),\n+\t\t\t     metadata_style.style ());\n       uiout->text (\"\\n\");\n     }\n   else"
    },
    {
      "sha": "3c1a8d2aed392ca5bf06a5e8bf2afc1bd80513f1",
      "filename": "gdb/m2-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/m2-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/m2-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-typeprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -31,6 +31,7 @@\n #include \"c-lang.h\"\n #include \"typeprint.h\"\n #include \"cp-abi.h\"\n+#include \"cli/cli-style.h\"\n \n static void m2_print_bounds (struct type *type,\n \t\t\t     struct ui_file *stream, int show, int level,\n@@ -81,7 +82,7 @@ m2_print_type (struct type *type, const char *varstring,\n   wrap_here (\"    \");\n   if (type == NULL)\n     {\n-      fputs_filtered (_(\"<type unknown>\"), stream);\n+      fputs_styled (_(\"<type unknown>\"), metadata_style.style (), stream);\n       return;\n     }\n "
    },
    {
      "sha": "4dc0fe18e6a785864467e3aaae7ac5746cb163f5",
      "filename": "gdb/m2-valprint.c",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/m2-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/m2-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-valprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -28,6 +28,7 @@\n #include \"c-lang.h\"\n #include \"m2-lang.h\"\n #include \"target.h\"\n+#include \"cli/cli-style.h\"\n \n static int print_unpacked_pointer (struct type *type,\n \t\t\t\t   CORE_ADDR address, CORE_ADDR addr,\n@@ -92,7 +93,8 @@ m2_print_long_set (struct type *type, const gdb_byte *valaddr,\n     }\n   else\n     {\n-      fprintf_filtered (stream, \" %s }\", _(\"<unknown bounds of set>\"));\n+      fprintf_styled (stream, metadata_style.style (),\n+\t\t      \" %s }\", _(\"<unknown bounds of set>\"));\n       return;\n     }\n \n@@ -407,7 +409,8 @@ m2_val_print (struct type *type, int embedded_offset,\n       elttype = check_typedef (elttype);\n       if (TYPE_STUB (elttype))\n \t{\n-\t  fprintf_filtered (stream, _(\"<incomplete type>\"));\n+\t  fprintf_styled (stream, metadata_style.style (),\n+\t\t\t  _(\"<incomplete type>\"));\n \t  break;\n \t}\n       else\n@@ -423,7 +426,8 @@ m2_val_print (struct type *type, int embedded_offset,\n \tmaybe_bad_bstring:\n \t  if (i < 0)\n \t    {\n-\t      fputs_filtered (_(\"<error value>\"), stream);\n+\t      fputs_styled (_(\"<error value>\"), metadata_style.style (),\n+\t\t\t    stream);\n \t      goto done;\n \t    }\n "
    },
    {
      "sha": "ad4252f71228ba56cc11959b2b20299319010193",
      "filename": "gdb/mi/mi-out.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/mi/mi-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/mi/mi-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-out.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -141,8 +141,8 @@ mi_ui_out::do_field_string (int fldno, int width, ui_align align,\n \n void\n mi_ui_out::do_field_fmt (int fldno, int width, ui_align align,\n-\t\t\t const char *fldname, const char *format,\n-\t\t\t va_list args)\n+\t\t\t const char *fldname, const ui_file_style &style,\n+\t\t\t const char *format, va_list args)\n {\n   ui_file *stream = m_streams.back ();\n   field_separator ();"
    },
    {
      "sha": "c8b42c295ee7bc36f5b8e99931c09910a1565446",
      "filename": "gdb/mi/mi-out.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/mi/mi-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/mi/mi-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-out.h?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -68,8 +68,9 @@ class mi_ui_out : public ui_out\n \t\t\t\tconst char *fldname, const char *string,\n \t\t\t\tconst ui_file_style &style) override;\n   virtual void do_field_fmt (int fldno, int width, ui_align align,\n-\t\t\t  const char *fldname, const char *format, va_list args)\n-    override ATTRIBUTE_PRINTF (6,0);\n+\t\t\t     const char *fldname, const ui_file_style &style,\n+\t\t\t     const char *format, va_list args)\n+    override ATTRIBUTE_PRINTF (7,0);\n   virtual void do_spaces (int numspaces) override;\n   virtual void do_text (const char *string) override;\n   virtual void do_message (const ui_file_style &style,"
    },
    {
      "sha": "95911158d15ea9e7678964515156b099686f3a96",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -32,6 +32,7 @@\n #include <ctype.h>\n #include \"c-lang.h\"\n #include \"gdbarch.h\"\n+#include \"cli/cli-style.h\"\n \n /* All GPC versions until now (2007-09-27) also define a symbol called\n    '_p_initialize'.  Check for the presence of this symbol first.  */\n@@ -292,7 +293,9 @@ pascal_printstr (struct ui_file *stream, struct type *type,\n \t      in_quotes = 0;\n \t    }\n \t  pascal_printchar (current_char, type, stream);\n-\t  fprintf_filtered (stream, \" <repeats %u times>\", reps);\n+\t  fprintf_filtered (stream, \" %p[<repeats %u times>%p]\",\n+\t\t\t    metadata_style.style ().ptr (),\n+\t\t\t    reps, nullptr);\n \t  i = rep1 - 1;\n \t  things_printed += options->repeat_count_threshold;\n \t  need_comma = 1;"
    },
    {
      "sha": "fadc44eaee87510b0f787c665ca8e6f72804e56d",
      "filename": "gdb/p-typeprint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/p-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/p-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-typeprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -32,6 +32,7 @@\n #include \"typeprint.h\"\n #include \"gdb-demangle.h\"\n #include <ctype.h>\n+#include \"cli/cli-style.h\"\n \n static void pascal_type_print_varspec_suffix (struct type *, struct ui_file *,\n \t\t\t\t\t      int, int, int,\n@@ -470,7 +471,7 @@ pascal_type_print_base (struct type *type, struct ui_file *stream, int show,\n   wrap_here (\"    \");\n   if (type == NULL)\n     {\n-      fputs_filtered (\"<type unknown>\", stream);\n+      fputs_styled (\"<type unknown>\", metadata_style.style (), stream);\n       return;\n     }\n \n@@ -827,8 +828,9 @@ pascal_type_print_base (struct type *type, struct ui_file *stream, int show,\n \t{\n \t  /* At least for dump_symtab, it is important that this not be\n \t     an error ().  */\n-\t  fprintf_filtered (stream, \"<invalid unnamed pascal type code %d>\",\n-\t\t\t    TYPE_CODE (type));\n+\t  fprintf_styled (stream, metadata_style.style (),\n+\t\t\t  \"<invalid unnamed pascal type code %d>\",\n+\t\t\t  TYPE_CODE (type));\n \t}\n       break;\n     }"
    },
    {
      "sha": "10612f3babe8ad82121136229f39d7790fcbb408",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -39,6 +39,7 @@\n #include \"cp-support.h\"\n #include \"objfiles.h\"\n #include \"gdbsupport/byte-vector.h\"\n+#include \"cli/cli-style.h\"\n \f\n \n /* Decorations for Pascal.  */\n@@ -347,7 +348,7 @@ pascal_val_print (struct type *type,\n       elttype = check_typedef (elttype);\n       if (TYPE_STUB (elttype))\n \t{\n-\t  fprintf_filtered (stream, \"<incomplete type>\");\n+\t  fprintf_styled (stream, metadata_style.style (), \"<incomplete type>\");\n \t  break;\n \t}\n       else\n@@ -370,7 +371,7 @@ pascal_val_print (struct type *type,\n \tmaybe_bad_bstring:\n \t  if (bound_info < 0)\n \t    {\n-\t      fputs_filtered (\"<error value>\", stream);\n+\t      fputs_styled (\"<error value>\", metadata_style.style (), stream);\n \t      goto done;\n \t    }\n \n@@ -557,7 +558,7 @@ pascal_object_print_value_fields (struct type *type, const gdb_byte *valaddr,\n \t\t\t       options, dont_print_vb);\n \n   if (!len && n_baseclasses == 1)\n-    fprintf_filtered (stream, \"<No data fields>\");\n+    fprintf_styled (stream, metadata_style.style (), \"<No data fields>\");\n   else\n     {\n       struct obstack tmp_obstack = dont_print_statmem_obstack;\n@@ -622,15 +623,17 @@ pascal_object_print_value_fields (struct type *type, const gdb_byte *valaddr,\n \t         order problems.  */\n \t      if (TYPE_FIELD_IGNORE (type, i))\n \t\t{\n-\t\t  fputs_filtered (\"<optimized out or zero length>\", stream);\n+\t\t  fputs_styled (\"<optimized out or zero length>\",\n+\t\t\t\tmetadata_style.style (), stream);\n \t\t}\n \t      else if (value_bits_synthetic_pointer (val,\n \t\t\t\t\t\t     TYPE_FIELD_BITPOS (type,\n \t\t\t\t\t\t\t\t\ti),\n \t\t\t\t\t\t     TYPE_FIELD_BITSIZE (type,\n \t\t\t\t\t\t\t\t\t i)))\n \t\t{\n-\t\t  fputs_filtered (_(\"<synthetic pointer>\"), stream);\n+\t\t  fputs_styled (_(\"<synthetic pointer>\"),\n+\t\t\t\tmetadata_style.style (), stream);\n \t\t}\n \t      else\n \t\t{\n@@ -647,7 +650,8 @@ pascal_object_print_value_fields (struct type *type, const gdb_byte *valaddr,\n \t    {\n \t      if (TYPE_FIELD_IGNORE (type, i))\n \t\t{\n-\t\t  fputs_filtered (\"<optimized out or zero length>\", stream);\n+\t\t  fputs_styled (\"<optimized out or zero length>\",\n+\t\t\t\tmetadata_style.style (), stream);\n \t\t}\n \t      else if (field_is_static (&TYPE_FIELD (type, i)))\n \t\t{"
    },
    {
      "sha": "ea00f083b12d77140e894327885417d5f638bf9d",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -2001,8 +2001,9 @@ do_one_display (struct display *d)\n \t}\n       catch (const gdb_exception_error &ex)\n \t{\n-\t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\\n\"),\n-\t\t\t    ex.what ());\n+\t  fprintf_filtered (gdb_stdout, _(\"%p[<error: %s>%p]\\n\"),\n+\t\t\t    metadata_style.style ().ptr (), ex.what (),\n+\t\t\t    nullptr);\n \t}\n     }\n   else\n@@ -2035,7 +2036,8 @@ do_one_display (struct display *d)\n \t}\n       catch (const gdb_exception_error &ex)\n \t{\n-\t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\"), ex.what ());\n+\t  fprintf_styled (gdb_stdout, metadata_style.style (),\n+\t\t\t  _(\"<error: %s>\"), ex.what ());\n \t}\n \n       printf_filtered (\"\\n\");\n@@ -2237,8 +2239,9 @@ print_variable_and_value (const char *name, struct symbol *var,\n     }\n   catch (const gdb_exception_error &except)\n     {\n-      fprintf_filtered (stream, \"<error reading variable %s (%s)>\", name,\n-\t\t\texcept.what ());\n+      fprintf_styled (stream, metadata_style.style (),\n+\t\t      \"<error reading variable %s (%s)>\", name,\n+\t\t      except.what ());\n     }\n \n   fprintf_filtered (stream, \"\\n\");"
    },
    {
      "sha": "4dd6243ae99eb63fb91230b37f2f3482ec0803c0",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -397,7 +397,7 @@ py_print_single_arg (struct ui_out *out,\n \t  if (val == NULL)\n \t    {\n \t      gdb_assert (fa != NULL && fa->error != NULL);\n-\t      out->field_fmt (\"value\",\n+\t      out->field_fmt (\"value\", metadata_style.style (),\n \t\t\t      _(\"<error reading variable: %s>\"),\n \t\t\t      fa->error.get ());\n \t    }"
    },
    {
      "sha": "a4df48fe19ab08ae3e4f02efa99769cdd2065443",
      "filename": "gdb/python/py-prettyprint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/python/py-prettyprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/python/py-prettyprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-prettyprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -25,6 +25,7 @@\n #include \"extension-priv.h\"\n #include \"python.h\"\n #include \"python-internal.h\"\n+#include \"cli/cli-style.h\"\n \n /* Return type of print_string_repr.  */\n \n@@ -259,10 +260,11 @@ print_stack_unless_memory_error (struct ui_file *stream)\n       gdb::unique_xmalloc_ptr<char> msg = fetched_error.to_string ();\n \n       if (msg == NULL || *msg == '\\0')\n-\tfprintf_filtered (stream, _(\"<error reading variable>\"));\n+\tfprintf_styled (stream, metadata_style.style (),\n+\t\t\t_(\"<error reading variable>\"));\n       else\n-\tfprintf_filtered (stream, _(\"<error reading variable: %s>\"),\n-\t\t\t  msg.get ());\n+\tfprintf_styled (stream, metadata_style.style (),\n+\t\t\t_(\"<error reading variable: %s>\"), msg.get ());\n     }\n   else\n     gdbpy_print_stack ();"
    },
    {
      "sha": "cef0a9cb092e58c6a012c50660d722bf5d0092a3",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -37,6 +37,7 @@\n #include <algorithm>\n #include <string>\n #include <vector>\n+#include \"cli/cli-style.h\"\n \n /* See rust-lang.h.  */\n \n@@ -473,7 +474,9 @@ rust_print_enum (struct type *type, int embedded_offset,\n   if (rust_empty_enum_p (type))\n     {\n       /* Print the enum type name here to be more clear.  */\n-      fprintf_filtered (stream, _(\"%s {<No data fields>}\"), TYPE_NAME (type));\n+      fprintf_filtered (stream, _(\"%s {%p[<No data fields>%p]}\"),\n+\t\t\tTYPE_NAME (type),\n+\t\t\tmetadata_style.style ().ptr (), nullptr);\n       return;\n     }\n "
    },
    {
      "sha": "cc10692f4933db0157cb0b76fc1be99038787d86",
      "filename": "gdb/skip.c",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/skip.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/skip.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/skip.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -415,7 +415,9 @@ info_skip_command (const char *arg, int from_tty)\n       current_uiout->field_string (\"file\",\n \t\t\t\t   e.file ().empty () ? \"<none>\"\n \t\t\t\t   : e.file ().c_str (),\n-\t\t\t\t   file_name_style.style ()); /* 4 */\n+\t\t\t\t   e.file ().empty ()\n+\t\t\t\t   ? metadata_style.style ()\n+\t\t\t\t   : file_name_style.style ()); /* 4 */\n       if (e.function_is_regexp ())\n \tcurrent_uiout->field_string (\"regexp\", \"y\"); /* 5 */\n       else\n@@ -424,7 +426,9 @@ info_skip_command (const char *arg, int from_tty)\n       current_uiout->field_string (\"function\",\n \t\t\t\t   e.function ().empty () ? \"<none>\"\n \t\t\t\t   : e.function ().c_str (),\n-\t\t\t\t   function_name_style.style ()); /* 6 */\n+\t\t\t\t   e.function ().empty ()\n+\t\t\t\t   ? metadata_style.style ()\n+\t\t\t\t   : function_name_style.style ()); /* 6 */\n \n       current_uiout->text (\"\\n\");\n     }"
    },
    {
      "sha": "cb07e28b6714f2104380c42c74e2349aeabf338b",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 15,
      "deletions": 9,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -386,12 +386,16 @@ print_frame_arg (const frame_print_options &fp_opts,\n   annotate_arg_name_end ();\n   uiout->text (\"=\");\n \n+  ui_file_style style;\n   if (!arg->val && !arg->error)\n     uiout->text (\"...\");\n   else\n     {\n       if (arg->error)\n-\tstb.printf (_(\"<error reading variable: %s>\"), arg->error.get ());\n+\t{\n+\t  stb.printf (_(\"<error reading variable: %s>\"), arg->error.get ());\n+\t  style = metadata_style.style ();\n+\t}\n       else\n \t{\n \t  try\n@@ -428,11 +432,12 @@ print_frame_arg (const frame_print_options &fp_opts,\n \t    {\n \t      stb.printf (_(\"<error reading variable: %s>\"),\n \t\t\t  except.what ());\n+\t      style = metadata_style.style ();\n \t    }\n \t}\n     }\n \n-  uiout->field_stream (\"value\", stb);\n+  uiout->field_stream (\"value\", stb, style);\n }\n \n /* Read in inferior function local SYM at FRAME into ARGP.  Caller is\n@@ -1006,18 +1011,18 @@ print_frame_info (const frame_print_options &fp_opts,\n         {\n           annotate_function_call ();\n           uiout->field_string (\"func\", \"<function called from gdb>\",\n-\t\t\t       function_name_style.style ());\n+\t\t\t       metadata_style.style ());\n \t}\n       else if (get_frame_type (frame) == SIGTRAMP_FRAME)\n         {\n \t  annotate_signal_handler_caller ();\n           uiout->field_string (\"func\", \"<signal handler called>\",\n-\t\t\t       function_name_style.style ());\n+\t\t\t       metadata_style.style ());\n         }\n       else if (get_frame_type (frame) == ARCH_FRAME)\n         {\n           uiout->field_string (\"func\", \"<cross-architecture call>\",\n-\t\t\t       function_name_style.style ());\n+\t\t\t       metadata_style.style ());\n \t}\n       uiout->text (\"\\n\");\n       annotate_frame_end ();\n@@ -1311,7 +1316,7 @@ print_frame (const frame_print_options &fp_opts,\n \t    print_pc (uiout, gdbarch, frame, pc);\n \t  else\n \t    uiout->field_string (\"addr\", \"<unavailable>\",\n-\t\t\t\t address_style.style ());\n+\t\t\t\t metadata_style.style ());\n \t  annotate_frame_address_end ();\n \t  uiout->text (\" in \");\n \t}\n@@ -1508,7 +1513,7 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n   if (frame_pc_p)\n     fputs_filtered (paddress (gdbarch, get_frame_pc (fi)), gdb_stdout);\n   else\n-    fputs_filtered (\"<unavailable>\", gdb_stdout);\n+    fputs_styled (\"<unavailable>\", metadata_style.style (), gdb_stdout);\n \n   wrap_here (\"   \");\n   if (funname)\n@@ -1545,8 +1550,9 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n \t      val_print_not_saved (gdb_stdout);\n \t      break;\n \t    default:\n-\t      fprintf_filtered (gdb_stdout, _(\"<error: %s>\"),\n-\t\t\t\tex.what ());\n+\t      fprintf_styled (gdb_stdout, metadata_style.style (),\n+\t\t\t      _(\"<error: %s>\"),\n+\t\t\t      ex.what ());\n \t      break;\n \t    }\n \t}"
    },
    {
      "sha": "784daf2e530699d57763f6e6707809da7183defc",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -1,3 +1,8 @@\n+2019-10-01  Tom Tromey  <tom@tromey.com>\n+\n+\t* lib/gdb-utils.exp (style): Handle \"metadata\" argument.\n+\t* gdb.base/style.exp: Add metadata style test.\n+\n 2019-10-01  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.base/style.exp: Test \"pwd\"."
    },
    {
      "sha": "0f812f7f1bc03d08d48ae34b34859220a6a914ea",
      "filename": "gdb/testsuite/gdb.base/style.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/testsuite/gdb.base/style.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/testsuite/gdb.base/style.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/style.exp?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -133,4 +133,8 @@ save_vars { env(TERM) } {\n \t\"filename is styled when loading symbol file\"\n \n     gdb_test \"pwd\" \"Working directory [style .*? file].*\"\n+\n+    gdb_test_no_output \"set print repeat 3\"\n+    gdb_test \"print {0,0,0,0,0,0,0,0}\" \\\n+\t\" = \\\\{0 [style {<repeats.*8.*times>} metadata]\\\\}\"\n }"
    },
    {
      "sha": "95ca348dc3368b909bd6ab29f1b49c4abc79b99d",
      "filename": "gdb/testsuite/lib/gdb-utils.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/testsuite/lib/gdb-utils.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/testsuite/lib/gdb-utils.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb-utils.exp?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -54,6 +54,7 @@ proc style {str style} {\n \thighlight { set style 31 }\n \tvariable { set style 36 }\n \taddress { set style 34 }\n+\tmetadata { set style 2 }\n     }\n     return \"\\033\\\\\\[${style}m${str}\\033\\\\\\[m\"\n }"
    },
    {
      "sha": "843341aaae17fb12cd8f0c8631cd596b560a2cb2",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 12,
      "deletions": 5,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -436,6 +436,7 @@ tvariables_info_1 (void)\n \tuiout->field_string (\"name\", std::string (\"$\") + tsv.name);\n \tuiout->field_string (\"initial\", plongest (tsv.initial_value));\n \n+\tui_file_style style;\n \tif (tsv.value_known)\n \t  c = plongest (tsv.value);\n \telse if (uiout->is_mi_like_p ())\n@@ -444,13 +445,19 @@ tvariables_info_1 (void)\n \t     undefined does not seem important enough to represent.  */\n \t  c = NULL;\n \telse if (current_trace_status ()->running || traceframe_number >= 0)\n-\t  /* The value is/was defined, but we don't have it.  */\n-\t  c = \"<unknown>\";\n+\t  {\n+\t    /* The value is/was defined, but we don't have it.  */\n+\t    c = \"<unknown>\";\n+\t    style = metadata_style.style ();\n+\t  }\n \telse\n-\t  /* It is not meaningful to ask about the value.  */\n-\t  c = \"<undefined>\";\n+\t  {\n+\t    /* It is not meaningful to ask about the value.  */\n+\t    c = \"<undefined>\";\n+\t    style = metadata_style.style ();\n+\t  }\n \tif (c)\n-\t  uiout->field_string (\"current\", c);\n+\t  uiout->field_string (\"current\", c, style);\n \tuiout->text (\"\\n\");\n       }\n   }"
    },
    {
      "sha": "0d3f3be98803495f8f9e6e2513385ad1b3cd7357",
      "filename": "gdb/tui/tui-out.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/tui/tui-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/tui/tui-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-out.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -70,15 +70,15 @@ tui_ui_out::do_field_string (int fldno, int width, ui_align align,\n \n void\n tui_ui_out::do_field_fmt (int fldno, int width, ui_align align,\n-\t\t\t  const char *fldname, const char *format,\n-\t\t\t  va_list args)\n+\t\t\t  const char *fldname, const ui_file_style &style,\n+\t\t\t  const char *format, va_list args)\n {\n   if (suppress_output ())\n     return;\n \n   m_start_of_line++;\n \n-  cli_ui_out::do_field_fmt (fldno, width, align, fldname, format, args);\n+  cli_ui_out::do_field_fmt (fldno, width, align, fldname, style, format, args);\n }\n \n void"
    },
    {
      "sha": "2b856af48835e286a8447546ffa94432c2d9c617",
      "filename": "gdb/tui/tui-out.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/tui/tui-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/tui/tui-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-out.h?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -37,8 +37,9 @@ class tui_ui_out : public cli_ui_out\n   void do_field_string (int fldno, int width, ui_align align, const char *fldname,\n \t\t\tconst char *string, const ui_file_style &style) override;\n   void do_field_fmt (int fldno, int width, ui_align align, const char *fldname,\n-\t\t  const char *format, va_list args) override\n-    ATTRIBUTE_PRINTF (6,0);\n+\t\t     const ui_file_style &style,\n+\t\t     const char *format, va_list args) override\n+    ATTRIBUTE_PRINTF (7, 0);\n   void do_text (const char *string) override;\n \n private:"
    },
    {
      "sha": "357b88db5317031f81b996e36155c7f46109465f",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -36,6 +36,7 @@\n #include \"cli/cli-utils.h\"\n #include \"extension.h\"\n #include \"completer.h\"\n+#include \"cli/cli-style.h\"\n \n const struct type_print_options type_print_raw_options =\n {\n@@ -415,7 +416,8 @@ type_to_string (struct type *type)\n void\n type_print_unknown_return_type (struct ui_file *stream)\n {\n-  fprintf_filtered (stream, _(\"<unknown return type>\"));\n+  fprintf_styled (stream, metadata_style.style (),\n+\t\t  _(\"<unknown return type>\"));\n }\n \n /* See typeprint.h.  */\n@@ -862,13 +864,13 @@ Show the number of recursive nested type definitions to print.\"), NULL,\n void\n val_print_not_allocated (struct ui_file *stream)\n {\n-  fprintf_filtered (stream, _(\"<not allocated>\"));\n+  fprintf_styled (stream, metadata_style.style (), _(\"<not allocated>\"));\n }\n \n /* Print <not associated> status to stream STREAM.  */\n \n void\n val_print_not_associated (struct ui_file *stream)\n {\n-  fprintf_filtered (stream, _(\"<not associated>\"));\n+  fprintf_styled (stream, metadata_style.style (), _(\"<not associated>\"));\n }"
    },
    {
      "sha": "a64c79481cad9447880d68cf4043474df75b8193",
      "filename": "gdb/ui-out.c",
      "status": "modified",
      "additions": 19,
      "deletions": 1,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ui-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ui-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-out.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -545,7 +545,25 @@ ui_out::field_fmt (const char *fldname, const char *format, ...)\n \n   va_start (args, format);\n \n-  do_field_fmt (fldno, width, align, fldname, format, args);\n+  do_field_fmt (fldno, width, align, fldname, ui_file_style (), format, args);\n+\n+  va_end (args);\n+}\n+\n+void\n+ui_out::field_fmt (const char *fldname, const ui_file_style &style,\n+\t\t   const char *format, ...)\n+{\n+  va_list args;\n+  int fldno;\n+  int width;\n+  ui_align align;\n+\n+  verify_field (&fldno, &width, &align);\n+\n+  va_start (args, format);\n+\n+  do_field_fmt (fldno, width, align, fldname, style, format, args);\n \n   va_end (args);\n }"
    },
    {
      "sha": "5c96a7825be4aaeca10a9b7ae976742127010fa3",
      "filename": "gdb/ui-out.h",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ui-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/ui-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-out.h?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -194,6 +194,9 @@ class ui_out\n   void field_skip (const char *fldname);\n   void field_fmt (const char *fldname, const char *format, ...)\n     ATTRIBUTE_PRINTF (3, 4);\n+  void field_fmt (const char *fldname, const ui_file_style &style,\n+\t\t  const char *format, ...)\n+    ATTRIBUTE_PRINTF (4, 5);\n \n   void spaces (int numspaces);\n   void text (const char *string);\n@@ -291,9 +294,9 @@ class ui_out\n \t\t\t\tconst char *fldname, const char *string,\n \t\t\t\tconst ui_file_style &style) = 0;\n   virtual void do_field_fmt (int fldno, int width, ui_align align,\n-\t\t\t     const char *fldname, const char *format,\n-\t\t\t     va_list args)\n-    ATTRIBUTE_PRINTF (6,0) = 0;\n+\t\t\t     const char *fldname, const ui_file_style &style,\n+\t\t\t     const char *format, va_list args)\n+    ATTRIBUTE_PRINTF (7, 0) = 0;\n   virtual void do_spaces (int numspaces) = 0;\n   virtual void do_text (const char *string) = 0;\n   virtual void do_message (const ui_file_style &style,"
    },
    {
      "sha": "919ab9382137c1e16f7353acb1bf135c681378a9",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 18,
      "deletions": 12,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -38,6 +38,7 @@\n #include \"gdbsupport/byte-vector.h\"\n #include \"cli/cli-option.h\"\n #include \"gdbarch.h\"\n+#include \"cli/cli-style.h\"\n \n /* Maximum number of wchars returned from wchar_iterate.  */\n #define MAX_WCHARS 4\n@@ -347,7 +348,8 @@ valprint_check_validity (struct ui_file *stream,\n \t    }\n \n \t  if (!is_ref || !ref_is_addressable)\n-\t    fputs_filtered (_(\"<synthetic pointer>\"), stream);\n+\t    fputs_styled (_(\"<synthetic pointer>\"), metadata_style.style (),\n+\t\t\t  stream);\n \n \t  /* C++ references should be valid even if they're synthetic.  */\n \t  return is_ref;\n@@ -369,25 +371,25 @@ val_print_optimized_out (const struct value *val, struct ui_file *stream)\n   if (val != NULL && value_lval_const (val) == lval_register)\n     val_print_not_saved (stream);\n   else\n-    fprintf_filtered (stream, _(\"<optimized out>\"));\n+    fprintf_styled (stream, metadata_style.style (), _(\"<optimized out>\"));\n }\n \n void\n val_print_not_saved (struct ui_file *stream)\n {\n-  fprintf_filtered (stream, _(\"<not saved>\"));\n+  fprintf_styled (stream, metadata_style.style (), _(\"<not saved>\"));\n }\n \n void\n val_print_unavailable (struct ui_file *stream)\n {\n-  fprintf_filtered (stream, _(\"<unavailable>\"));\n+  fprintf_styled (stream, metadata_style.style (), _(\"<unavailable>\"));\n }\n \n void\n val_print_invalid_address (struct ui_file *stream)\n {\n-  fprintf_filtered (stream, _(\"<invalid address>\"));\n+  fprintf_styled (stream, metadata_style.style (), _(\"<invalid address>\"));\n }\n \n /* Print a pointer based on the type of its target.\n@@ -988,7 +990,7 @@ generic_val_print (struct type *type,\n       /* This happens (without TYPE_STUB set) on systems which don't use\n          dbx xrefs (NO_DBX_XREFS in gcc) if a file has a \"struct foo *bar\"\n          and no complete type for struct foo in that file.  */\n-      fprintf_filtered (stream, _(\"<incomplete type>\"));\n+      fprintf_styled (stream, metadata_style.style (), _(\"<incomplete type>\"));\n       break;\n \n     case TYPE_CODE_COMPLEX:\n@@ -1047,7 +1049,7 @@ val_print (struct type *type, LONGEST embedded_offset,\n \n   if (TYPE_STUB (real_type))\n     {\n-      fprintf_filtered (stream, _(\"<incomplete type>\"));\n+      fprintf_styled (stream, metadata_style.style (), _(\"<incomplete type>\"));\n       return;\n     }\n \n@@ -1084,7 +1086,8 @@ val_print (struct type *type, LONGEST embedded_offset,\n     }\n   catch (const gdb_exception_error &except)\n     {\n-      fprintf_filtered (stream, _(\"<error reading variable>\"));\n+      fprintf_styled (stream, metadata_style.style (),\n+\t\t      _(\"<error reading variable>\"));\n     }\n }\n \n@@ -1115,7 +1118,8 @@ value_check_printable (struct value *val, struct ui_file *stream,\n {\n   if (val == 0)\n     {\n-      fprintf_filtered (stream, _(\"<address of value unknown>\"));\n+      fprintf_styled (stream, metadata_style.style (),\n+\t\t      _(\"<address of value unknown>\"));\n       return 0;\n     }\n \n@@ -1139,8 +1143,9 @@ value_check_printable (struct value *val, struct ui_file *stream,\n \n   if (TYPE_CODE (value_type (val)) == TYPE_CODE_INTERNAL_FUNCTION)\n     {\n-      fprintf_filtered (stream, _(\"<internal function %s>\"),\n-\t\t\tvalue_internal_function_name (val));\n+      fprintf_styled (stream, metadata_style.style (),\n+\t\t      _(\"<internal function %s>\"),\n+\t\t      value_internal_function_name (val));\n       return 0;\n     }\n \n@@ -2069,7 +2074,8 @@ val_print_array_elements (struct type *type,\n \t\t     address, stream, recurse + 1, val, options,\n \t\t     current_language);\n \t  annotate_elt_rep (reps);\n-\t  fprintf_filtered (stream, \" <repeats %u times>\", reps);\n+\t  fprintf_filtered (stream, \" %p[<repeats %u times>%p]\",\n+\t\t\t    metadata_style.style ().ptr (), reps, nullptr);\n \t  annotate_elt_rep_end ();\n \n \t  i = rep1 - 1;"
    },
    {
      "sha": "67fe2f17c051a95a0cab640446a011fabba6c540",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f6aba03b929d3d893378760eeeca431005fc5cd/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=7f6aba03b929d3d893378760eeeca431005fc5cd",
      "patch": "@@ -43,6 +43,7 @@\n #include \"completer.h\"\n #include \"gdbsupport/selftest.h\"\n #include \"gdbsupport/array-view.h\"\n+#include \"cli/cli-style.h\"\n \n /* Definition of a user function.  */\n struct internal_function\n@@ -2539,7 +2540,8 @@ show_convenience (const char *ignore, int from_tty)\n \t}\n       catch (const gdb_exception_error &ex)\n \t{\n-\t  fprintf_filtered (gdb_stdout, _(\"<error: %s>\"), ex.what ());\n+\t  fprintf_styled (gdb_stdout, metadata_style.style (),\n+\t\t\t  _(\"<error: %s>\"), ex.what ());\n \t}\n \n       printf_filtered ((\"\\n\"));"
    }
  ]
}