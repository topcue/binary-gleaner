{
  "sha": "30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzAwNTZlYTA0YWUzZWNkODI4ZTJhMDZlMTJlNmYxNzRhZTY2NTljOQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-05-08T18:01:36Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-06-15T22:22:22Z"
    },
    "message": "gdb/mi: New commands to catch C++ exceptions\n\nAdds some MI commands to catch C++ exceptions.  The new commands are\n-catch-throw, -catch-rethrow, and -catch-catch, these all correspond\nto the CLI commands 'catch throw', 'catch rethrow', and 'catch catch'.\n\nEach MI command takes two optional arguments, '-t' has the effect of\ncalling 'tcatch' instead of 'catch', for example:\n\n   (gdb)\n   -catch-throw -t\n\nIs the same as:\n\n   (gdb) tcatch throw\n\nThere is also a '-r REGEXP' argument that can supply a regexp to match\nagainst the exception type, so:\n\n   (gdb)\n   -catch-catch -r PATTERN\n\nIs the same as:\n\n   (gdb) catch catch PATTERN\n\nThe change in print_mention_exception_catchpoint might seem a little\nstrange; changing the output from using ui_out::field_int and\nui_out::text to using  ui_out::message.\n\nThe print_mention_exception_catchpoint is used as the 'print_mention'\nmethod for the exception catchpoint breakpoint object.  Most of the\nother 'print_mention' methods (see breakpoint.c) use either\nprintf_filtered, of ui_out::message.  Using field_int was causing an\nunexpected field to be added to the MI output.  Here's the output\nwithout the change in print_mention_exception_catchpoint:\n\n    (gdb)\n    -catch-throw\n    ^done,bkptno=\"1\",bkpt={number=\"1\",type=\"breakpoint\",disp=\"keep\",\n                           enabled=\"y\",addr=\"0x00000000004006c0\",\n                           what=\"exception throw\",catch-type=\"throw\",\n                           thread-groups=[\"i1\"],times=\"0\"}\n\nNotice the breakpoint number appears in both the 'bkptno' field, and\nthe 'number' field within the 'bkpt' tuple.  Here's the output with\nthe change in print_mention_exception_catchpoint:\n\n    (gdb)\n    -catch-throw\n    ^done,bkpt={number=\"1\",type=\"breakpoint\",disp=\"keep\",\n                enabled=\"y\",addr=\"0x00000000004006c0\",\n                what=\"exception throw\",catch-type=\"throw\",\n                thread-groups=[\"i1\"],times=\"0\"}\n\ngdb/ChangeLog:\n\n\t* NEWS: Mention new MI commands.\n\t* break-catch-throw.c (enum exception_event_kind): Move to\n\tbreakpoint.h.\n\t(print_mention_exception_catchpoint): Output text as a single\n\tmessage.\n\t(catch_exception_command_1): Rename to...\n\t(catch_exception_event): ...this, make non-static, update header\n\tcommand, and change some parameter types.\n\t(catch_catch_command): Update for changes to\n\tcatch_exception_command_1.\n\t(catch_throw_command): Likewise.\n\t(catch_rethrow_command): Likewise.\n\t* breakpoint.c (enum exception_event_kind): Delete.\n\t* breakpoint.h (enum exception_event_kind): Moved here from\n\tbreak-catch-throw.c.\n\t(catch_exception_event): Declare.\n\t* mi/mi-cmd-catch.c (mi_cmd_catch_exception_event): New function.\n\t(mi_cmd_catch_throw): New function.\n\t(mi_cmd_catch_rethrow): New function.\n\t(mi_cmd_catch_catch): New function.\n\t* mi/mi-cmds.c (mi_cmds): Add 'catch-throw', 'catch-rethrow', and\n\t'catch-catch' entries.\n\t* mi/mi-cmds.h (mi_cmd_catch_throw): Declare.\n\t(mi_cmd_catch_rethrow): Declare.\n\t(mi_cmd_catch_catch): Declare.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (GDB/MI Catchpoint Commands): Add menu entry to new\n\tnode.\n\t(C++ Exception GDB/MI Catchpoint Commands): New node to describe\n\tnew MI commands.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.mi/mi-catch-cpp-exceptions.cc: New file.\n\t* gdb.mi/mi-catch-cpp-exceptions.exp: New file.\n\t* lib/mi-support.exp (mi_expect_stop): Handle 'exception-caught'\n\tas a stop reason.",
    "tree": {
      "sha": "0241b9853191c5363b2e5089b81ff95413df17c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0241b9853191c5363b2e5089b81ff95413df17c6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ec8e2b6d3051f0b4b2a8eee9917898e95046c62f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec8e2b6d3051f0b4b2a8eee9917898e95046c62f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ec8e2b6d3051f0b4b2a8eee9917898e95046c62f"
    }
  ],
  "stats": {
    "total": 617,
    "additions": 580,
    "deletions": 37
  },
  "files": [
    {
      "sha": "4dae9aa7cc89dc3f8a8a9c42c558f309c7e9b9a1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -1,3 +1,31 @@\n+2019-06-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* NEWS: Mention new MI commands.\n+\t* break-catch-throw.c (enum exception_event_kind): Move to\n+\tbreakpoint.h.\n+\t(print_mention_exception_catchpoint): Output text as a single\n+\tmessage.\n+\t(catch_exception_command_1): Rename to...\n+\t(catch_exception_event): ...this, make non-static, update header\n+\tcommand, and change some parameter types.\n+\t(catch_catch_command): Update for changes to\n+\tcatch_exception_command_1.\n+\t(catch_throw_command): Likewise.\n+\t(catch_rethrow_command): Likewise.\n+\t* breakpoint.c (enum exception_event_kind): Delete.\n+\t* breakpoint.h (enum exception_event_kind): Moved here from\n+\tbreak-catch-throw.c.\n+\t(catch_exception_event): Declare.\n+\t* mi/mi-cmd-catch.c (mi_cmd_catch_exception_event): New function.\n+\t(mi_cmd_catch_throw): New function.\n+\t(mi_cmd_catch_rethrow): New function.\n+\t(mi_cmd_catch_catch): New function.\n+\t* mi/mi-cmds.c (mi_cmds): Add 'catch-throw', 'catch-rethrow', and\n+\t'catch-catch' entries.\n+\t* mi/mi-cmds.h (mi_cmd_catch_throw): Declare.\n+\t(mi_cmd_catch_rethrow): Declare.\n+\t(mi_cmd_catch_catch): Declare.\n+\n 2019-06-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* annotate.c (annotate_source_line): Change return type to void,"
    },
    {
      "sha": "2cc82e86560260b2d33bd40cab504a109e064437",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -213,6 +213,10 @@ maint show test-options-completion-result\n   were to be given as a command itself.  This is intended for use by MI\n   frontends in cases when separate CLI and MI channels cannot be used.\n \n+-catch-throw, -catch-rethrow, and -catch-catch\n+  These can be used to catch C++ exceptions in a similar fashion to\n+  the CLI commands 'catch throw', 'catch rethrow', and 'catch catch'.\n+\n * Testsuite\n \n   The testsuite now creates the files gdb.cmd (containing the arguments"
    },
    {
      "sha": "107ac74f5cc62fb0911a4fe385466d7044c3bceb",
      "filename": "gdb/break-catch-throw.c",
      "status": "modified",
      "additions": 16,
      "deletions": 26,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/break-catch-throw.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/break-catch-throw.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-throw.c?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -37,14 +37,6 @@\n #include \"cp-support.h\"\n #include \"location.h\"\n \n-/* Enums for exception-handling support.  */\n-enum exception_event_kind\n-{\n-  EX_EVENT_THROW,\n-  EX_EVENT_RETHROW,\n-  EX_EVENT_CATCH\n-};\n-\n /* Each spot where we may place an exception-related catchpoint has\n    two names: the SDT probe point and the function name.  This\n    structure holds both.  */\n@@ -317,12 +309,12 @@ print_mention_exception_catchpoint (struct breakpoint *b)\n   enum exception_event_kind kind = classify_exception_breakpoint (b);\n \n   bp_temp = b->disposition == disp_del;\n-  uiout->text (bp_temp ? _(\"Temporary catchpoint \")\n-\t\t\t      : _(\"Catchpoint \"));\n-  uiout->field_int (\"bkptno\", b->number);\n-  uiout->text ((kind == EX_EVENT_THROW ? _(\" (throw)\")\n-\t\t       : (kind == EX_EVENT_CATCH ? _(\" (catch)\")\n-\t\t\t  : _(\" (rethrow)\"))));\n+  uiout->message (\"%s %d %s\",\n+\t\t  (bp_temp ? _(\"Temporary catchpoint \") : _(\"Catchpoint\")),\n+\t\t  b->number,\n+\t\t  (kind == EX_EVENT_THROW\n+\t\t   ? _(\"(throw)\") : (kind == EX_EVENT_CATCH\n+\t\t\t\t     ? _(\"(catch)\") : _(\"(rethrow)\"))));\n }\n \n /* Implement the \"print_recreate\" breakpoint_ops method for throw and\n@@ -420,13 +412,11 @@ extract_exception_regexp (const char **string)\n   return std::string ();\n }\n \n-/* Deal with \"catch catch\", \"catch throw\", and \"catch rethrow\"\n-   commands.  */\n+/* See breakpoint.h.  */\n \n-static void\n-catch_exception_command_1 (enum exception_event_kind ex_event,\n-\t\t\t   const char *arg,\n-\t\t\t   int tempflag, int from_tty)\n+void\n+catch_exception_event (enum exception_event_kind ex_event,\n+\t\t       const char *arg, bool tempflag, int from_tty)\n {\n   const char *cond_string = NULL;\n \n@@ -456,9 +446,9 @@ static void\n catch_catch_command (const char *arg, int from_tty,\n \t\t     struct cmd_list_element *command)\n {\n-  int tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n+  bool tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n \n-  catch_exception_command_1 (EX_EVENT_CATCH, arg, tempflag, from_tty);\n+  catch_exception_event (EX_EVENT_CATCH, arg, tempflag, from_tty);\n }\n \n /* Implementation of \"catch throw\" command.  */\n@@ -467,9 +457,9 @@ static void\n catch_throw_command (const char *arg, int from_tty,\n \t\t     struct cmd_list_element *command)\n {\n-  int tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n+  bool tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n \n-  catch_exception_command_1 (EX_EVENT_THROW, arg, tempflag, from_tty);\n+  catch_exception_event (EX_EVENT_THROW, arg, tempflag, from_tty);\n }\n \n /* Implementation of \"catch rethrow\" command.  */\n@@ -478,9 +468,9 @@ static void\n catch_rethrow_command (const char *arg, int from_tty,\n \t\t       struct cmd_list_element *command)\n {\n-  int tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n+  bool tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n \n-  catch_exception_command_1 (EX_EVENT_RETHROW, arg, tempflag, from_tty);\n+  catch_exception_event (EX_EVENT_RETHROW, arg, tempflag, from_tty);\n }\n \n \f"
    },
    {
      "sha": "ccd778b7a13ef8fe52d6e9dab44517d41988bf60",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -85,14 +85,6 @@\n #include \"common/array-view.h\"\n #include \"common/gdb_optional.h\"\n \n-/* Enums for exception-handling support.  */\n-enum exception_event_kind\n-{\n-  EX_EVENT_THROW,\n-  EX_EVENT_RETHROW,\n-  EX_EVENT_CATCH\n-};\n-\n /* Prototypes for local functions.  */\n \n static void map_breakpoint_numbers (const char *,"
    },
    {
      "sha": "906803132822211181278ca8e3ffe7f9f987201f",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -42,6 +42,16 @@ struct linespec_result;\n struct linespec_sals;\n struct inferior;\n \n+/* Enum for exception-handling support in 'catch throw', 'catch rethrow',\n+   'catch catch' and the MI equivalent.  */\n+\n+enum exception_event_kind\n+{\n+  EX_EVENT_THROW,\n+  EX_EVENT_RETHROW,\n+  EX_EVENT_CATCH\n+};\n+\n /* Why are we removing the breakpoint from the target?  */\n \n enum remove_bp_reason\n@@ -1675,4 +1685,14 @@ extern cmd_list_element *commands_cmd_element;\n \n extern bool fix_multi_location_breakpoint_output_globally;\n \n+/* Deal with \"catch catch\", \"catch throw\", and \"catch rethrow\" commands and\n+   the MI equivalents.  Sets up to catch events of type EX_EVENT.  When\n+   TEMPFLAG is true only the next matching event is caught after which the\n+   catch-point is deleted.  If REGEX is not NULL then only exceptions whose\n+   type name matches REGEX will trigger the event.  */\n+\n+extern void catch_exception_event (enum exception_event_kind ex_event,\n+\t\t\t\t   const char *regex, bool tempflag,\n+\t\t\t\t   int from_tty);\n+\n #endif /* !defined (BREAKPOINT_H) */"
    },
    {
      "sha": "f3142fd9ec801763163dce5d12ef563b39cce8f6",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -1,3 +1,10 @@\n+2019-06-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.texinfo (GDB/MI Catchpoint Commands): Add menu entry to new\n+\tnode.\n+\t(C++ Exception GDB/MI Catchpoint Commands): New node to describe\n+\tnew MI commands.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.texinfo (Command Completion): Mention command options too."
    },
    {
      "sha": "9a0320e5d8f826e3381424808f5c118186440981",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 140,
      "deletions": 0,
      "changes": 140,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -29793,6 +29793,7 @@ catchpoints.\n @menu\n * Shared Library GDB/MI Catchpoint Commands::\n * Ada Exception GDB/MI Catchpoint Commands::\n+* C++ Exception GDB/MI Catchpoint Commands::\n @end menu\n \n @node Shared Library GDB/MI Catchpoint Commands\n@@ -29992,6 +29993,145 @@ times=\"0\",original-location=\"__gnat_begin_handler\"@}\n (gdb)\n @end smallexample\n \n+@node C++ Exception GDB/MI Catchpoint Commands\n+@subsection C@t{++} Exception @sc{gdb/mi} Catchpoints\n+\n+The following @sc{gdb/mi} commands can be used to create catchpoints\n+that stop the execution when C@t{++} exceptions are being throw, rethrown,\n+or caught.\n+\n+@subheading The @code{-catch-throw} Command\n+@findex -catch-throw\n+\n+@subsubheading Synopsis\n+\n+@smallexample\n+ -catch-throw [ -t ] [ -r @var{regexp}]\n+@end smallexample\n+\n+Stop when the debuggee throws a C@t{++} exception.  If @var{regexp} is\n+given, then only exceptions whose type matches the regular expression\n+will be caught.\n+\n+If @samp{-t} is given, then the catchpoint is enabled only for one\n+stop, the catchpoint is automatically deleted after stopping once for\n+the event.\n+\n+@subsubheading @value{GDBN} Command\n+\n+The corresponding @value{GDBN} commands are @samp{catch throw}\n+and @samp{tcatch throw} (@pxref{Set Catchpoints}).\n+\n+@subsubheading Example\n+\n+@smallexample\n+-catch-throw -r exception_type\n+^done,bkpt=@{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",\n+  addr=\"0x00000000004006c0\",what=\"exception throw\",\n+  catch-type=\"throw\",thread-groups=[\"i1\"],\n+  regexp=\"exception_type\",times=\"0\"@}\n+(gdb)\n+-exec-run\n+^running\n+(gdb)\n+~\"\\n\"\n+~\"Catchpoint 1 (exception thrown), 0x00007ffff7ae00ed\n+  in __cxa_throw () from /lib64/libstdc++.so.6\\n\"\n+*stopped,bkptno=\"1\",reason=\"breakpoint-hit\",disp=\"keep\",\n+  frame=@{addr=\"0x00007ffff7ae00ed\",func=\"__cxa_throw\",\n+  args=[],from=\"/lib64/libstdc++.so.6\",arch=\"i386:x86-64\"@},\n+  thread-id=\"1\",stopped-threads=\"all\",core=\"6\"\n+(gdb)\n+@end smallexample\n+\n+@subheading The @code{-catch-rethrow} Command\n+@findex -catch-rethrow\n+\n+@subsubheading Synopsis\n+\n+@smallexample\n+ -catch-rethrow [ -t ] [ -r @var{regexp}]\n+@end smallexample\n+\n+Stop when a C@t{++} exception is re-thrown.  If @var{regexp} is given,\n+then only exceptions whose type matches the regular expression will be\n+caught.\n+\n+If @samp{-t} is given, then the catchpoint is enabled only for one\n+stop, the catchpoint is automatically deleted after the first event is\n+caught.\n+\n+@subsubheading @value{GDBN} Command\n+\n+The corresponding @value{GDBN} commands are @samp{catch rethrow}\n+and @samp{tcatch rethrow} (@pxref{Set Catchpoints}).\n+\n+@subsubheading Example\n+\n+@smallexample\n+-catch-rethrow -r exception_type\n+^done,bkpt=@{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",\n+  addr=\"0x00000000004006c0\",what=\"exception rethrow\",\n+  catch-type=\"rethrow\",thread-groups=[\"i1\"],\n+  regexp=\"exception_type\",times=\"0\"@}\n+(gdb)\n+-exec-run\n+^running\n+(gdb)\n+~\"\\n\"\n+~\"Catchpoint 1 (exception rethrown), 0x00007ffff7ae00ed\n+  in __cxa_rethrow () from /lib64/libstdc++.so.6\\n\"\n+*stopped,bkptno=\"1\",reason=\"breakpoint-hit\",disp=\"keep\",\n+  frame=@{addr=\"0x00007ffff7ae00ed\",func=\"__cxa_rethrow\",\n+  args=[],from=\"/lib64/libstdc++.so.6\",arch=\"i386:x86-64\"@},\n+  thread-id=\"1\",stopped-threads=\"all\",core=\"6\"\n+(gdb)\n+@end smallexample\n+\n+@subheading The @code{-catch-catch} Command\n+@findex -catch-catch\n+\n+@subsubheading Synopsis\n+\n+@smallexample\n+ -catch-catch [ -t ] [ -r @var{regexp}]\n+@end smallexample\n+\n+Stop when the debuggee catches a C@t{++} exception.  If @var{regexp}\n+is given, then only exceptions whose type matches the regular\n+expression will be caught.\n+\n+If @samp{-t} is given, then the catchpoint is enabled only for one\n+stop, the catchpoint is automatically deleted after the first event is\n+caught.\n+\n+@subsubheading @value{GDBN} Command\n+\n+The corresponding @value{GDBN} commands are @samp{catch catch}\n+and @samp{tcatch catch} (@pxref{Set Catchpoints}).\n+\n+@subsubheading Example\n+\n+@smallexample\n+-catch-catch -r exception_type\n+^done,bkpt=@{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",\n+  addr=\"0x00000000004006c0\",what=\"exception catch\",\n+  catch-type=\"catch\",thread-groups=[\"i1\"],\n+  regexp=\"exception_type\",times=\"0\"@}\n+(gdb)\n+-exec-run\n+^running\n+(gdb)\n+~\"\\n\"\n+~\"Catchpoint 1 (exception caught), 0x00007ffff7ae00ed\n+  in __cxa_begin_catch () from /lib64/libstdc++.so.6\\n\"\n+*stopped,bkptno=\"1\",reason=\"breakpoint-hit\",disp=\"keep\",\n+  frame=@{addr=\"0x00007ffff7ae00ed\",func=\"__cxa_begin_catch\",\n+  args=[],from=\"/lib64/libstdc++.so.6\",arch=\"i386:x86-64\"@},\n+  thread-id=\"1\",stopped-threads=\"all\",core=\"6\"\n+(gdb)\n+@end smallexample\n+\n @c %%%%%%%%%%%%%%%%%%%%%%%%%%%% SECTION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n @node GDB/MI Program Context\n @section @sc{gdb/mi}  Program Context"
    },
    {
      "sha": "a044fe4472c4eacc5949b39dfd26bb0f1f95310a",
      "filename": "gdb/mi/mi-cmd-catch.c",
      "status": "modified",
      "additions": 71,
      "deletions": 0,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/mi/mi-cmd-catch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/mi/mi-cmd-catch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-catch.c?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -288,3 +288,74 @@ mi_cmd_catch_unload (const char *cmd, char *argv[], int argc)\n   mi_catch_load_unload (0, argv, argc);\n }\n \n+/* Core handler for -catch-throw, -catch-rethrow, and -catch-catch\n+   commands.  The argument handling for all of these is identical, we just\n+   pass KIND through to GDB's core to select the correct event type.  */\n+\n+static void\n+mi_cmd_catch_exception_event (enum exception_event_kind kind,\n+\t\t\t      const char *cmd, char *argv[], int argc)\n+{\n+  char *regex = NULL;\n+  bool temp = false;\n+  int oind = 0;\n+  char *oarg;\n+  enum opt\n+    {\n+      OPT_TEMP,\n+      OPT_REGEX,\n+    };\n+  static const struct mi_opt opts[] =\n+    {\n+      { \"t\", OPT_TEMP, 0 },\n+      { \"r\", OPT_REGEX, 1 },\n+      { 0, 0, 0 }\n+    };\n+\n+  for (;;)\n+    {\n+      int opt = mi_getopt (cmd, argc, argv, opts,\n+                           &oind, &oarg);\n+\n+      if (opt < 0)\n+        break;\n+\n+      switch ((enum opt) opt)\n+        {\n+        case OPT_TEMP:\n+          temp = true;\n+          break;\n+        case OPT_REGEX:\n+\t  regex = oarg;\n+          break;\n+        }\n+    }\n+\n+  scoped_restore restore_breakpoint_reporting = setup_breakpoint_reporting ();\n+  catch_exception_event (kind, regex, temp, 0 /* from_tty */);\n+}\n+\n+/* Handler for -catch-throw.  */\n+\n+void\n+mi_cmd_catch_throw (const char *cmd, char *argv[], int argc)\n+{\n+  mi_cmd_catch_exception_event (EX_EVENT_THROW, cmd, argv, argc);\n+}\n+\n+/* Handler for -catch-rethrow.  */\n+\n+void\n+mi_cmd_catch_rethrow (const char *cmd, char *argv[], int argc)\n+{\n+  mi_cmd_catch_exception_event (EX_EVENT_RETHROW, cmd, argv, argc);\n+}\n+\n+/* Handler for -catch-catch.  */\n+\n+void\n+mi_cmd_catch_catch (const char *cmd, char *argv[], int argc)\n+{\n+  mi_cmd_catch_exception_event (EX_EVENT_CATCH, cmd, argv, argc);\n+}\n+"
    },
    {
      "sha": "37eab01de9e432f1cdebda23cf7faef04b03479a",
      "filename": "gdb/mi/mi-cmds.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/mi/mi-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/mi/mi-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmds.c?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -75,6 +75,12 @@ static struct mi_cmd mi_cmds[] =\n                    &mi_suppress_notification.breakpoint),\n   DEF_MI_CMD_MI_1 (\"catch-unload\", mi_cmd_catch_unload,\n                    &mi_suppress_notification.breakpoint),\n+  DEF_MI_CMD_MI_1 (\"catch-throw\", mi_cmd_catch_throw,\n+                   &mi_suppress_notification.breakpoint),\n+  DEF_MI_CMD_MI_1 (\"catch-rethrow\", mi_cmd_catch_rethrow,\n+                   &mi_suppress_notification.breakpoint),\n+  DEF_MI_CMD_MI_1 (\"catch-catch\", mi_cmd_catch_catch,\n+                   &mi_suppress_notification.breakpoint),\n   DEF_MI_CMD_MI (\"complete\", mi_cmd_complete),\n   DEF_MI_CMD_MI (\"data-disassemble\", mi_cmd_disassemble),\n   DEF_MI_CMD_MI (\"data-evaluate-expression\", mi_cmd_data_evaluate_expression),"
    },
    {
      "sha": "91ce4cd40708c9a8667d13778f59bb9b03e371e9",
      "filename": "gdb/mi/mi-cmds.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/mi/mi-cmds.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/mi/mi-cmds.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmds.h?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -44,6 +44,9 @@ extern mi_cmd_argv_ftype mi_cmd_catch_exception;\n extern mi_cmd_argv_ftype mi_cmd_catch_handlers;\n extern mi_cmd_argv_ftype mi_cmd_catch_load;\n extern mi_cmd_argv_ftype mi_cmd_catch_unload;\n+extern mi_cmd_argv_ftype mi_cmd_catch_throw;\n+extern mi_cmd_argv_ftype mi_cmd_catch_rethrow;\n+extern mi_cmd_argv_ftype mi_cmd_catch_catch;\n extern mi_cmd_argv_ftype mi_cmd_disassemble;\n extern mi_cmd_argv_ftype mi_cmd_data_evaluate_expression;\n extern mi_cmd_argv_ftype mi_cmd_data_list_register_names;"
    },
    {
      "sha": "94c7348635fafbc68b5bb1df21de73a9ae09c20e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -1,3 +1,10 @@\n+2019-06-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.mi/mi-catch-cpp-exceptions.cc: New file.\n+\t* gdb.mi/mi-catch-cpp-exceptions.exp: New file.\n+\t* lib/mi-support.exp (mi_expect_stop): Handle 'exception-caught'\n+\tas a stop reason.\n+\n 2019-06-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.base/annota1.exp: Update expected results."
    },
    {
      "sha": "cacda4653a906c7a3e2014453392b487f9754897",
      "filename": "gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.cc",
      "status": "added",
      "additions": 73,
      "deletions": 0,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.cc?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -0,0 +1,73 @@\n+/* Copyright 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+class my_exception\n+{\n+private:\n+  int m_value;\n+\n+public:\n+  my_exception (int v)\n+    : m_value (v)\n+  {\n+    /* Nothing.  */\n+  }\n+};\n+\n+void\n+bar ()\n+{\n+  my_exception ex (4);\n+  throw ex;\t/* Throw 1.  */\n+}\n+\n+void\n+foo ()\n+{\n+  for (int i = 0; i < 2; ++i)\n+    {\n+      try\n+\t{\n+\t  bar ();\n+\t}\n+      catch (const my_exception &ex)\t/* Catch 1.  */\n+\t{\n+\t  if (i == 1)\n+\t    throw;\t/* Throw 2.  */\n+\t}\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  for (int i = 0; i < 2; ++i)\n+    {\n+      try\n+\t{\n+\t  foo ();\n+\t}\n+      catch (const my_exception &ex)\t/* Catch 2.  */\n+\t{\n+\t  if (i == 1)\n+\t    return 1;\t/* Stop here.  */\n+\t}\n+    }\n+\n+  return 0;\n+}\n+"
    },
    {
      "sha": "b5dfbe68c1ac45b0b0e59aa743be069beaa4d64f",
      "filename": "gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.exp",
      "status": "added",
      "additions": 197,
      "deletions": 0,
      "changes": 197,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.exp?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -0,0 +1,197 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test the -catch-throw, -catch-rethrow, and -catch-catch MI commands.\n+\n+if { [skip_cplus_tests] } { continue }\n+\n+load_lib mi-support.exp\n+set MIFLAGS \"-i=mi\"\n+\n+standard_testfile .cc\n+\n+if  { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}\" executable {debug c++}] != \"\" } {\n+    untested \"failed to compile\"\n+    return -1\n+}\n+\n+# Grab some line numbers we'll need.\n+set catch_1_lineno [gdb_get_line_number \"Catch 1\"]\n+set catch_2_lineno [gdb_get_line_number \"Catch 2\"]\n+set throw_1_lineno [gdb_get_line_number \"Throw 1\"]\n+set throw_2_lineno [gdb_get_line_number \"Throw 2\"]\n+set main_lineno [gdb_get_line_number \"Stop here\"]\n+\n+# Restart this test, load the test binary and set a breakpoint in\n+# main.\n+proc restart_for_test {} {\n+    global srcdir subdir binfile srcfile\n+    global main_lineno\n+\n+    if {[mi_gdb_start]} {\n+\tcontinue\n+    }\n+\n+    mi_delete_breakpoints\n+    mi_gdb_reinitialize_dir $srcdir/$subdir\n+    mi_gdb_load ${binfile}\n+\n+    mi_runto main\n+\n+    mi_create_breakpoint \\\n+\t\"$srcfile:${main_lineno}\" \"break before exiting program\" \\\n+\t-disp keep -func \"main.*\" \\\n+\t-file \".*mi-catch-cpp-exceptions.cc\" -line ${main_lineno}\n+}\n+\n+# Issue an -exec-continue then wait for GDB to catch a C++ exception\n+# event in FUNC on LINE.  Use TESTNAME to make tests unique.\n+proc continue_to_next_exception { func line testname } {\n+    global hex\n+\n+    mi_send_resuming_command \"exec-continue\" \\\n+\t\"exec-continue\"\n+    mi_expect_stop \"exception-caught\" \".*\" \".*\" \".*\" \".*\" \\\n+\t{} \"run until an exception is caught: $testname\"\n+    mi_gdb_test \"-stack-list-frames 1 1\" \\\n+\t\"\\\\^done,stack=\\\\\\[frame=\\{level=\\\"1\\\",addr=\\\"$hex\\\",func=\\\"${func}\\\",.*,line=\\\"${line}\\\".*\\}\\\\\\]\" \\\n+\t\"check previous frame: $testname\"\n+}\n+\n+# Issue an -exec-continue and stop at the breakpoint in main.\n+proc continue_to_breakpoint_in_main {} {\n+    global main_lineno\n+\n+    mi_send_resuming_command \"exec-continue\" \"exec-continue to main\"\n+    mi_expect_stop \"breakpoint-hit\" \"main\" \".*\" \".*\" \"${main_lineno}\" \\\n+\t{.* disp=\"keep\"} \"run until breakpoint in main\"\n+}\n+\n+# TYPE is one of throw, rethrow, or catch.  This proc creates a catch\n+# point using -catch-TYPE.  The optional string EXTRA is any extra\n+# arguments to pass when setting up the catchpoint.\n+proc setup_catchpoint {type {extra \"\"}} {\n+    global decimal\n+    mi_gdb_test \"-catch-${type} ${extra}\" \\\n+\t\"\\\\^done,bkpt=\\{number=\\\"$decimal\\\".*what=\\\"exception ${type}\\\",catch-type=\\\"${type}\\\".*\\}\" \\\n+\t\"Setup -catch-${type}\"\n+}\n+\n+# Ensure that -catch-throw will catch only throws and nothing else.\n+with_test_prefix \"-catch-throw\" {\n+    restart_for_test\n+    setup_catchpoint \"throw\"\n+    continue_to_next_exception \"bar\" \"${throw_1_lineno}\" \"throw 1\"\n+    continue_to_next_exception \"bar\" \"${throw_1_lineno}\" \"throw 2\"\n+    continue_to_next_exception \"bar\" \"${throw_1_lineno}\" \"throw 3\"\n+    continue_to_next_exception \"bar\" \"${throw_1_lineno}\" \"throw 4\"\n+    continue_to_breakpoint_in_main\n+}\n+\n+# Ensure that -catch-rethrow catches only rethrows and nothing else.\n+with_test_prefix \"-catch-rethrow\" {\n+    restart_for_test\n+    setup_catchpoint \"rethrow\"\n+    continue_to_next_exception \"foo\" \"${throw_2_lineno}\" \"rethrow 1\"\n+    continue_to_next_exception \"foo\" \"${throw_2_lineno}\" \"rethrow 2\"\n+    continue_to_breakpoint_in_main\n+}\n+\n+# Ensure that -catch-catch catches only catch points, and nothing\n+# else.\n+with_test_prefix \"-catch-catch\" {\n+    restart_for_test\n+    setup_catchpoint \"catch\"\n+    continue_to_next_exception \"foo\" \"${catch_1_lineno}\" \"catch 1\"\n+    continue_to_next_exception \"foo\" \"${catch_1_lineno}\" \"catch 2\"\n+    continue_to_next_exception \"main\" \"${catch_2_lineno}\" \"catch 3\"\n+    continue_to_next_exception \"foo\" \"${catch_1_lineno}\" \"catch 4\"\n+    continue_to_next_exception \"foo\" \"${catch_1_lineno}\" \"catch 5\"\n+    continue_to_next_exception \"main\" \"${catch_2_lineno}\" \"catch 6\"\n+    continue_to_breakpoint_in_main\n+}\n+\n+# Now check that all of the command with a regexp that doesn't match,\n+# don't trigger.\n+with_test_prefix \"all with invalid regexp\" {\n+    restart_for_test\n+    setup_catchpoint \"throw\" \"-r blahblah\"\n+    setup_catchpoint \"rethrow\" \"-r woofwoof\"\n+    setup_catchpoint \"catch\" \"-r miowmiow\"\n+\n+    # Would like to use 'continue_to_breakpoint_in_main' here, if\n+    # there wasn't a bug that requires a use of kfail.\n+\n+    mi_send_resuming_command \"exec-continue\" \\\n+\t\"exec-continue\"\n+    set testname \"run until breakpoint in main\"\n+    gdb_expect {\n+\t-re \"could not find minimal symbol for typeinfo address.*$mi_gdb_prompt$\" {\n+\t    kfail \"gdb/24541\" \"${testname}\"\n+\t}\n+\t-re \"\\\\*stopped,reason=\\\"breakpoint-hit\\\".*func=\\\"main\\\".*line=\\\"${main_lineno}\\\".*$mi_gdb_prompt$\" {\n+\t    pass \"${testname}\"\n+\t}\n+\ttimeout {\n+\t    fail \"${testname} (timeout)\"\n+\t}\n+    }\n+}\n+\n+# Now check that all of the commands with a regexp that does match,\n+# still trigger.\n+with_test_prefix \"all with valid regexp\" {\n+    restart_for_test\n+    setup_catchpoint \"throw\" \"-r my_ex\"\n+    setup_catchpoint \"rethrow\" \"-r _except\"\n+    setup_catchpoint \"catch\" \"-r my_exception\"\n+    continue_to_next_exception \"bar\" \"${throw_1_lineno}\" \"throw 1\"\n+    continue_to_next_exception \"foo\" \"${catch_1_lineno}\" \"catch 1\"\n+    continue_to_next_exception \"bar\" \"${throw_1_lineno}\" \"throw 2\"\n+    continue_to_next_exception \"foo\" \"${catch_1_lineno}\" \"catch 2\"\n+    continue_to_next_exception \"foo\" \"${throw_2_lineno}\" \"rethrow 1\"\n+    continue_to_next_exception \"main\" \"${catch_2_lineno}\" \"catch 3\"\n+    continue_to_next_exception \"bar\" \"${throw_1_lineno}\" \"throw 3\"\n+    continue_to_next_exception \"foo\" \"${catch_1_lineno}\" \"catch 4\"\n+    continue_to_next_exception \"bar\" \"${throw_1_lineno}\" \"throw 4\"\n+    continue_to_next_exception \"foo\" \"${catch_1_lineno}\" \"catch 5\"\n+    continue_to_next_exception \"foo\" \"${throw_2_lineno}\" \"rethrow 2\"\n+    continue_to_next_exception \"main\" \"${catch_2_lineno}\" \"catch 6\"\n+    continue_to_breakpoint_in_main\n+}\n+\n+# Check that the temporary switch works on its own.\n+with_test_prefix \"all with -t\" {\n+    restart_for_test\n+    setup_catchpoint \"throw\" \"-t\"\n+    setup_catchpoint \"rethrow\" \"-t\"\n+    setup_catchpoint \"catch\" \"-t\"\n+    continue_to_next_exception \"bar\" \"${throw_1_lineno}\" \"throw 1\"\n+    continue_to_next_exception \"foo\" \"${catch_1_lineno}\" \"catch 1\"\n+    continue_to_next_exception \"foo\" \"${throw_2_lineno}\" \"rethrow 1\"\n+    continue_to_breakpoint_in_main\n+}\n+\n+# Check that the temporary switch works when used with a regexp.\n+restart_for_test\n+with_test_prefix \"all with -t and regexp\" {\n+    setup_catchpoint \"throw\" \"-t -r my_ex\"\n+    setup_catchpoint \"rethrow\" \"-t -r _except\"\n+    setup_catchpoint \"catch\" \"-t -r my_exception\"\n+    continue_to_next_exception \"bar\" \"${throw_1_lineno}\" \"throw 1\"\n+    continue_to_next_exception \"foo\" \"${catch_1_lineno}\" \"catch 1\"\n+    continue_to_next_exception \"foo\" \"${throw_2_lineno}\" \"rethrow 1\"\n+    continue_to_breakpoint_in_main\n+}"
    },
    {
      "sha": "8c2c7c84edaea34c16dc11594c95640c1bda8766",
      "filename": "gdb/testsuite/lib/mi-support.exp",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/testsuite/lib/mi-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30056ea04ae3ecd828e2a06e12e6f174ae6659c9/gdb/testsuite/lib/mi-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/mi-support.exp?ref=30056ea04ae3ecd828e2a06e12e6f174ae6659c9",
      "patch": "@@ -1221,10 +1221,15 @@ proc mi_expect_stop { reason func args file line extra test } {\n     set args \"\\\\\\[$args\\\\\\]\"\n \n     set bn \"\"\n+    set ebn \"\"\n     if { $reason == \"breakpoint-hit\" } {\n \tset bn {bkptno=\"[0-9]+\",}\n     } elseif { $reason == \"solib-event\" } {\n \tset bn \".*\"\n+    } elseif { $reason == \"exception-caught\" } {\n+\tset ebn {bkptno=\"[0-9]+\",}\n+\tset bn \".*\"\n+\tset reason \"breakpoint-hit\"\n     }\n \n     set r \"\"\n@@ -1235,17 +1240,17 @@ proc mi_expect_stop { reason func args file line extra test } {\n \n     set a $after_reason\n \n-    verbose -log \"mi_expect_stop: expecting: \\\\*stopped,${r}${a}${bn}frame=\\{addr=\\\"$hex\\\",func=\\\"$func\\\",args=$args,(?:file=\\\"$any$file\\\",fullname=\\\"${fullname_syntax}$file\\\",line=\\\"$line\\\",arch=\\\"$any\\\"|from=\\\"$file\\\")\\}$after_stopped,thread-id=\\\"$decimal\\\",stopped-threads=$any\\r\\n($thread_selected_re|$breakpoint_re)*$prompt_re\"\n+    verbose -log \"mi_expect_stop: expecting: \\\\*stopped,${ebn}${r}${a}${bn}frame=\\{addr=\\\"$hex\\\",func=\\\"$func\\\",args=$args,(?:file=\\\"$any$file\\\",fullname=\\\"${fullname_syntax}$file\\\",line=\\\"$line\\\",arch=\\\"$any\\\"|from=\\\"$file\\\")\\}$after_stopped,thread-id=\\\"$decimal\\\",stopped-threads=$any\\r\\n($thread_selected_re|$breakpoint_re)*$prompt_re\"\n     gdb_expect {\n-\t-re \"\\\\*stopped,${r}${a}${bn}frame=\\{addr=\\\"$hex\\\",func=\\\"$func\\\",args=$args,(?:file=\\\"$any$file\\\",fullname=\\\"${fullname_syntax}$file\\\",line=\\\"($line)\\\",arch=\\\"$any\\\"|from=\\\"$file\\\")\\}$after_stopped,thread-id=\\\"$decimal\\\",stopped-threads=$any\\r\\n($thread_selected_re|$breakpoint_re)*$prompt_re\" {\n+\t-re \"\\\\*stopped,${ebn}${r}${a}${bn}frame=\\{addr=\\\"$hex\\\",func=\\\"$func\\\",args=$args,(?:file=\\\"$any$file\\\",fullname=\\\"${fullname_syntax}$file\\\",line=\\\"($line)\\\",arch=\\\"$any\\\"|from=\\\"$file\\\")\\}$after_stopped,thread-id=\\\"$decimal\\\",stopped-threads=$any\\r\\n($thread_selected_re|$breakpoint_re)*$prompt_re\" {\n \t    pass \"$test\"\n \t    if {[array names expect_out \"2,string\"] != \"\"} {\n \t\treturn $expect_out(2,string)\n \t    }\n \t    # No debug info available but $file does match.\n \t    return 0\n \t}\n-\t-re \"\\\\*stopped,${r}${a}${bn}frame=\\{addr=\\\"$hex\\\",func=\\\"$any\\\",args=\\[\\\\\\[\\{\\]$any\\[\\\\\\]\\}\\],file=\\\"$any\\\",fullname=\\\"${fullname_syntax}$any\\\",line=\\\"\\[0-9\\]*\\\",arch=\\\"$any\\\"\\}$after_stopped,thread-id=\\\"$decimal\\\",stopped-threads=$any\\r\\n($thread_selected_re|$breakpoint_re)*$prompt_re\" {\n+\t-re \"\\\\*stopped,${ebn}${r}${a}${bn}frame=\\{addr=\\\"$hex\\\",func=\\\"$any\\\",args=\\[\\\\\\[\\{\\]$any\\[\\\\\\]\\}\\],file=\\\"$any\\\",fullname=\\\"${fullname_syntax}$any\\\",line=\\\"\\[0-9\\]*\\\",arch=\\\"$any\\\"\\}$after_stopped,thread-id=\\\"$decimal\\\",stopped-threads=$any\\r\\n($thread_selected_re|$breakpoint_re)*$prompt_re\" {\n \t    verbose -log \"got $expect_out(buffer)\"\n \t    fail \"$test (stopped at wrong place)\"\n \t    return -1"
    }
  ]
}