{
  "sha": "36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzZiZDhlYTdmMDYxMjZkM2U3M2Q5NjQ0MzI1YzRiYmZiZDVjODlmNA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-15T23:28:09Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-16T07:03:53Z"
    },
    "message": "ubsan: crx: left shift cannot be represented in type 'int'\n\nThe ubsan complaint is fixed by the SBM change, with similar possible\ncomplaints fixed by the EXTRACT change.  The rest is just cleanup.\n\ninclude/\n\t* opcode/crx.h (inst <match>): Make unsigned int.\nopcodes/\n\t* crx-dis.c (EXTRACT, SBM): Avoid signed overflow.\n\t(get_number_of_operands, getargtype, getbits, getregname),\n\t(getcopregname, getprocregname, gettrapstring, getcinvstring),\n\t(getregliststring, get_word_at_PC, get_words_at_PC, build_mask),\n\t(powerof2, match_opcode, make_instruction, print_arguments),\n\t(print_arg): Delete forward declarations, moving static to..\n\t(getregname, getcopregname, getregliststring): ..these definitions.\n\t(build_mask): Return unsigned int mask.\n\t(match_opcode): Use unsigned int vars.",
    "tree": {
      "sha": "77e25b9b88b4f91e648c5098376aa17f4e9796c2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/77e25b9b88b4f91e648c5098376aa17f4e9796c2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cedfc77485dbb566619dc1e2d729ce0a70d1a4ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cedfc77485dbb566619dc1e2d729ce0a70d1a4ad",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cedfc77485dbb566619dc1e2d729ce0a70d1a4ad"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 26,
    "deletions": 28
  },
  "files": [
    {
      "sha": "a9be17a76a9c341ad46b1b3896a5cebec9178fe4",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4",
      "patch": "@@ -1,3 +1,7 @@\n+2019-12-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* opcode/crx.h (inst <match>): Make unsigned int.\n+\n 2019-12-16  Alan Modra  <amodra@gmail.com>\n \n \t* opcode/nds32.h (N32_BIT): Define using 1u."
    },
    {
      "sha": "81a8c9b42182f8f21df5dea3f997068943149196",
      "filename": "include/opcode/crx.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4/include/opcode/crx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4/include/opcode/crx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/crx.h?ref=36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4",
      "patch": "@@ -260,7 +260,7 @@ typedef struct\n     /* Size (in words).  */\n     unsigned int size;\n     /* Constant prefix (matched by the disassembler).  */\n-    unsigned long match;\n+    unsigned int match;\n     /* Match size (in bits).  */\n     int match_bits;\n     /* Attributes.  */"
    },
    {
      "sha": "9cc0ba491e78faec5d1ceff30770f39baa6f10fb",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4",
      "patch": "@@ -1,3 +1,15 @@\n+2019-12-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* crx-dis.c (EXTRACT, SBM): Avoid signed overflow.\n+\t(get_number_of_operands, getargtype, getbits, getregname),\n+\t(getcopregname, getprocregname, gettrapstring, getcinvstring),\n+\t(getregliststring, get_word_at_PC, get_words_at_PC, build_mask),\n+\t(powerof2, match_opcode, make_instruction, print_arguments),\n+\t(print_arg): Delete forward declarations, moving static to..\n+\t(getregname, getcopregname, getregliststring): ..these definitions.\n+\t(build_mask): Return unsigned int mask.\n+\t(match_opcode): Use unsigned int vars.\n+\n 2019-12-16  Alan Modra  <amodra@gmail.com>\n \n \t* bfin-dis.c (fmtconst, fmtconst_val): Avoid signed overflow."
    },
    {
      "sha": "38347486169f107d74ffab7db86ed3dc176b9ce6",
      "filename": "opcodes/crx-dis.c",
      "status": "modified",
      "additions": 9,
      "deletions": 27,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4/opcodes/crx-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4/opcodes/crx-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/crx-dis.c?ref=36bd8ea7f06126d3e73d9644325c4bbfbd5c89f4",
      "patch": "@@ -31,11 +31,10 @@\n \n /* Extract 'n_bits' from 'a' starting from offset 'offs'.  */\n #define EXTRACT(a, offs, n_bits)\t    \\\n-  (n_bits == 32 ? (((a) >> (offs)) & 0xffffffffL)   \\\n-  : (((a) >> (offs)) & ((1 << (n_bits)) -1)))\n+  (((a) >> (offs)) & ((2ull << (n_bits - 1)) - 1))\n \n /* Set Bit Mask - a mask to set all bits starting from offset 'offs'.  */\n-#define SBM(offs)  ((((1 << (32 - offs)) -1) << (offs)))\n+#define SBM(offs)  ((-1u << (offs)) & 0xffffffff)\n \n typedef unsigned long dwordU;\n typedef unsigned short wordU;\n@@ -98,23 +97,6 @@ static int cst4flag;\n    incremented (escape sequence is used).  */\n static int size_changed;\n \n-static int get_number_of_operands (void);\n-static argtype getargtype     (operand_type);\n-static int getbits\t      (operand_type);\n-static char *getregname\t      (reg);\n-static char *getcopregname    (copreg, reg_type);\n-static char * getprocregname  (int);\n-static char *gettrapstring    (unsigned);\n-static char *getcinvstring    (unsigned);\n-static void getregliststring  (int, char *, enum REG_ARG_TYPE);\n-static wordU get_word_at_PC   (bfd_vma, struct disassemble_info *);\n-static void get_words_at_PC   (bfd_vma, struct disassemble_info *);\n-static unsigned long build_mask (void);\n-static int powerof2\t      (int);\n-static int match_opcode\t      (void);\n-static void make_instruction  (void);\n-static void print_arguments   (ins *, bfd_vma, struct disassemble_info *);\n-static void print_arg\t      (argument *, bfd_vma, struct disassemble_info *);\n \n /* Retrieve the number of operands for the current assembled instruction.  */\n \n@@ -183,7 +165,7 @@ getcinvstring (unsigned int num)\n \n /* Given a register enum value, retrieve its name.  */\n \n-char *\n+static char *\n getregname (reg r)\n {\n   const reg_entry * regentry = &crx_regtab[r];\n@@ -196,7 +178,7 @@ getregname (reg r)\n \n /* Given a coprocessor register enum value, retrieve its name.  */\n \n-char *\n+static char *\n getcopregname (copreg r, reg_type type)\n {\n   const reg_entry * regentry;\n@@ -241,7 +223,7 @@ powerof2 (int x)\n \n /* Transform a register bit mask to a register list.  */\n \n-void\n+static void\n getregliststring (int mask, char *string, enum REG_ARG_TYPE core_cop)\n {\n   char temp_string[16];\n@@ -315,11 +297,11 @@ makelongparameter (ULONGLONG val, int start, int end)\n /* Build a mask of the instruction's 'constant' opcode,\n    based on the instruction's printing flags.  */\n \n-static unsigned long\n+static unsigned int\n build_mask (void)\n {\n   unsigned int print_flags;\n-  unsigned long mask;\n+  unsigned int mask;\n \n   print_flags = instruction->flags & FMT_CRX;\n   switch (print_flags)\n@@ -352,10 +334,10 @@ build_mask (void)\n static int\n match_opcode (void)\n {\n-  unsigned long mask;\n+  unsigned int mask;\n \n   /* The instruction 'constant' opcode doewsn't exceed 32 bits.  */\n-  unsigned long doubleWord = (words[1] + (words[0] << 16)) & 0xffffffff;\n+  unsigned int doubleWord = (words[1] + (words[0] << 16)) & 0xffffffff;\n \n   /* Start searching from end of instruction table.  */\n   instruction = &crx_instruction[NUMOPCODES - 2];"
    }
  ]
}