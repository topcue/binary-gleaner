{
  "sha": "26f53cd385fab9dabec50b4a7be07041db929417",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjZmNTNjZDM4NWZhYjlkYWJlYzUwYjRhN2JlMDcwNDFkYjkyOTQxNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-02-18T18:23:33Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-02-18T18:23:33Z"
    },
    "message": "Introduce expression::evaluate\n\nThis introduces a new method, expression::evaluate, and changes the\ntop-level expression-evaluation functions to use it.  Stack temporary\nhandling is moved into this new method, which makes sense because that\nhandling was only done when \"*pos == 0\".\n\nThis patch avoids some temporary regressions related to stack\ntemporary in the larger expression rewrite series.  I've pulled it out\nseparately because it seems like a reasonable change in its own right,\nand because it's better to avoid making that series even longer.\n\nRegression tested on x86-64 Fedora 32.\n\ngdb/ChangeLog\n2021-02-18  Tom Tromey  <tom@tromey.com>\n\n\t* expression.h (struct expression) <evaluate>: Declare method.\n\t* eval.c (evaluate_subexp): Simplify.\n\t(expression::evaluate): New method.\n\t(evaluate_expression, evaluate_type): Use expression::evaluate.",
    "tree": {
      "sha": "6d2258f411863eef11e07cb01623db51ab7e4fed",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6d2258f411863eef11e07cb01623db51ab7e4fed"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/26f53cd385fab9dabec50b4a7be07041db929417",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26f53cd385fab9dabec50b4a7be07041db929417",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/26f53cd385fab9dabec50b4a7be07041db929417",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26f53cd385fab9dabec50b4a7be07041db929417/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8568422270e312310c47048750733652c7bd979f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8568422270e312310c47048750733652c7bd979f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8568422270e312310c47048750733652c7bd979f"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 37,
    "deletions": 22
  },
  "files": [
    {
      "sha": "0349d44851ed6b08b86c1a8c86cf51a92163b56e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26f53cd385fab9dabec50b4a7be07041db929417/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26f53cd385fab9dabec50b4a7be07041db929417/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=26f53cd385fab9dabec50b4a7be07041db929417",
      "patch": "@@ -1,3 +1,10 @@\n+2021-02-18  Tom Tromey  <tom@tromey.com>\n+\n+\t* expression.h (struct expression) <evaluate>: Declare method.\n+\t* eval.c (evaluate_subexp): Simplify.\n+\t(expression::evaluate): New method.\n+\t(evaluate_expression, evaluate_type): Use expression::evaluate.\n+\n 2021-02-17  Kevin Buettner  <kevinb@redhat.com>\n \n \t* ada-lang.c (ada_fold_name): Check for non-empty string prior"
    },
    {
      "sha": "8256fdea148995f7d17dd4034f120aa170d18432",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 25,
      "deletions": 22,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26f53cd385fab9dabec50b4a7be07041db929417/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26f53cd385fab9dabec50b4a7be07041db929417/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=26f53cd385fab9dabec50b4a7be07041db929417",
      "patch": "@@ -61,22 +61,8 @@ struct value *\n evaluate_subexp (struct type *expect_type, struct expression *exp,\n \t\t int *pos, enum noside noside)\n {\n-  struct value *retval;\n-\n-  gdb::optional<enable_thread_stack_temporaries> stack_temporaries;\n-  if (*pos == 0 && target_has_execution ()\n-      && exp->language_defn->la_language == language_cplus\n-      && !thread_stack_temporaries_enabled_p (inferior_thread ()))\n-    stack_temporaries.emplace (inferior_thread ());\n-\n-  retval = (*exp->language_defn->expression_ops ()->evaluate_exp)\n-    (expect_type, exp, pos, noside);\n-\n-  if (stack_temporaries.has_value ()\n-      && value_in_thread_stack_temporaries (retval, inferior_thread ()))\n-    retval = value_non_lval (retval);\n-\n-  return retval;\n+  return ((*exp->language_defn->expression_ops ()->evaluate_exp)\n+\t  (expect_type, exp, pos, noside));\n }\n \f\n /* Parse the string EXP as a C expression, evaluate it,\n@@ -121,14 +107,33 @@ parse_to_comma_and_eval (const char **expp)\n }\n \f\n \n+/* See expression.h.  */\n+\n+struct value *\n+expression::evaluate (struct type *expect_type, enum noside noside)\n+{\n+  gdb::optional<enable_thread_stack_temporaries> stack_temporaries;\n+  if (target_has_execution ()\n+      && language_defn->la_language == language_cplus\n+      && !thread_stack_temporaries_enabled_p (inferior_thread ()))\n+    stack_temporaries.emplace (inferior_thread ());\n+\n+  int pos = 0;\n+  struct value *retval = evaluate_subexp (expect_type, this, &pos, noside);\n+\n+  if (stack_temporaries.has_value ()\n+      && value_in_thread_stack_temporaries (retval, inferior_thread ()))\n+    retval = value_non_lval (retval);\n+\n+  return retval;\n+}\n+\n /* See value.h.  */\n \n struct value *\n evaluate_expression (struct expression *exp, struct type *expect_type)\n {\n-  int pc = 0;\n-\n-  return evaluate_subexp (expect_type, exp, &pc, EVAL_NORMAL);\n+  return exp->evaluate (expect_type, EVAL_NORMAL);\n }\n \n /* Evaluate an expression, avoiding all memory references\n@@ -137,9 +142,7 @@ evaluate_expression (struct expression *exp, struct type *expect_type)\n struct value *\n evaluate_type (struct expression *exp)\n {\n-  int pc = 0;\n-\n-  return evaluate_subexp (nullptr, exp, &pc, EVAL_AVOID_SIDE_EFFECTS);\n+  return exp->evaluate (nullptr, EVAL_AVOID_SIDE_EFFECTS);\n }\n \n /* Evaluate a subexpression, avoiding all memory references and"
    },
    {
      "sha": "397a0af9abaa668dfa3777f517fcfaf6dc07f528",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26f53cd385fab9dabec50b4a7be07041db929417/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26f53cd385fab9dabec50b4a7be07041db929417/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=26f53cd385fab9dabec50b4a7be07041db929417",
      "patch": "@@ -120,6 +120,11 @@ struct expression\n       return elts[0].opcode;\n   }\n \n+  /* Evaluate the expression.  EXPECT_TYPE is the context type of the\n+     expression; normally this should be nullptr.  NOSIDE controls how\n+     evaluation is performed.  */\n+  struct value *evaluate (struct type *expect_type, enum noside noside);\n+\n   /* Language it was entered in.  */\n   const struct language_defn *language_defn;\n   /* Architecture it was parsed in.  */"
    }
  ]
}