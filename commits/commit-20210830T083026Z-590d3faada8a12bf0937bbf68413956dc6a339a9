{
  "sha": "590d3faada8a12bf0937bbf68413956dc6a339a9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTkwZDNmYWFkYThhMTJiZjA5MzdiYmY2ODQxMzk1NmRjNmEzMzlhOQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-08-30T08:30:26Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-08-30T08:30:26Z"
    },
    "message": "[gdb/testsuite] Improve argument syntax of proc arange\n\nThe current syntax of proc arange is:\n...\n  proc arange { arange_start arange_length {comment \"\"} {seg_sel \"\"} } {\n...\nand a typical call looks like:\n...\n  arange $start $len\n...\n\nThis style is somewhat annoying because if you want to specify the last\nparameter, you need to give the default values of all the other optional ones\nbefore as well:\n...\n  arange $start $len \"\" $seg_sel\n...\n\nUpdate the syntax to:\n...\n    proc arange { options arange_start arange_length } {\n       parse_options {\n           { comment \"\" }\n           { seg_sel \"\" }\n       }\n...\nsuch that a typical call looks like:\n...\n  arange {} $start $len\n...\nand a call using seg_sel looks like:\n...\n  arange {\n    seg_sel $seg_sel\n  } $start $len\n...\n\nAlso update proc aranges, which already has an options argument, to use the\nnew proc parse_options.\n\nTested on x86_64-linux.\n\nCo-Authored-By: Simon Marchi <simon.marchi@polymtl.ca>",
    "tree": {
      "sha": "f2da67d9f0140da453dbf697d96bc5bb66282618",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f2da67d9f0140da453dbf697d96bc5bb66282618"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/590d3faada8a12bf0937bbf68413956dc6a339a9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/590d3faada8a12bf0937bbf68413956dc6a339a9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/590d3faada8a12bf0937bbf68413956dc6a339a9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/590d3faada8a12bf0937bbf68413956dc6a339a9/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cb03dd22b36b7bd21a81137005ec42dab8355b62",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb03dd22b36b7bd21a81137005ec42dab8355b62",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cb03dd22b36b7bd21a81137005ec42dab8355b62"
    }
  ],
  "stats": {
    "total": 206,
    "additions": 150,
    "deletions": 56
  },
  "files": [
    {
      "sha": "e13400ed47953bbf3a55d9d73cc7df859390471c",
      "filename": "gdb/testsuite/gdb.dlang/watch-loc.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/gdb.dlang/watch-loc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/gdb.dlang/watch-loc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dlang/watch-loc.exp?ref=590d3faada8a12bf0937bbf68413956dc6a339a9",
      "patch": "@@ -68,7 +68,7 @@ Dwarf::assemble $asm_file {\n     }\n \n     aranges {} cu_start {\n-\tarange $dmain_start $dmain_length\n+\tarange {} $dmain_start $dmain_length\n     }\n }\n "
    },
    {
      "sha": "d55b7fd150eff3d24d652873a22b70e915c1fa43",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-ranges-base.exp?ref=590d3faada8a12bf0937bbf68413956dc6a339a9",
      "patch": "@@ -125,9 +125,9 @@ Dwarf::assemble $asm_file {\n     }\n \n     aranges {} cu_label {\n-\tarange [lindex $main_func 0] [lindex $main_func 1]\n-\tarange [lindex $frame2_func 0] [lindex $frame2_func 1]\n-\tarange [lindex $frame3_func 0] [lindex $frame3_func 1]\n+\tarange {} [lindex $main_func 0] [lindex $main_func 1]\n+\tarange {} [lindex $frame2_func 0] [lindex $frame2_func 1]\n+\tarange {} [lindex $frame3_func 0] [lindex $frame3_func 1]\n     }\n }\n "
    },
    {
      "sha": "f95558dffef03a37fc1ef638fb6051ff2243cdeb",
      "filename": "gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/frame-inlined-in-outer-frame.exp?ref=590d3faada8a12bf0937bbf68413956dc6a339a9",
      "patch": "@@ -95,7 +95,7 @@ Dwarf::assemble $dwarf_asm {\n     }\n \n     aranges {} cu_label {\n-\tarange __cu_low_pc __cu_high_pc\n+\tarange {} __cu_low_pc __cu_high_pc\n     }\n }\n "
    },
    {
      "sha": "6e736f2c8ef1e4a16f8606a19f5bfc33bd461b0e",
      "filename": "gdb/testsuite/gdb.dwarf2/template-specification-full-name.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/gdb.dwarf2/template-specification-full-name.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/gdb.dwarf2/template-specification-full-name.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/template-specification-full-name.exp?ref=590d3faada8a12bf0937bbf68413956dc6a339a9",
      "patch": "@@ -69,7 +69,7 @@ Dwarf::assemble $asm_file {\n     }\n \n     aranges {} cu_start {\n-\tarange \"$main_start\" \"$main_length\"\n+\tarange {} \"$main_start\" \"$main_length\"\n     }\n }\n "
    },
    {
      "sha": "ce14fc3cd7c30090a13ab3ad5c6fbc87bcae5746",
      "filename": "gdb/testsuite/gdb.testsuite/parse_options_args.exp",
      "status": "added",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/gdb.testsuite/parse_options_args.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/gdb.testsuite/parse_options_args.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.testsuite/parse_options_args.exp?ref=590d3faada8a12bf0937bbf68413956dc6a339a9",
      "patch": "@@ -0,0 +1,59 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Testsuite self-tests for parse_options and parse_args.\n+\n+with_test_prefix parse_options {\n+    proc test1 { options a b } {\n+\tset v2 \"defval2\"\n+\tparse_options {\n+\t    { opt1 defval1 }\n+\t    { opt2 $v2 }\n+\t    { opt3 }\n+\t    { opt4 }\n+\t}\n+\n+\tgdb_assert { [string equal $a \"vala\"] }\n+\tgdb_assert { [string equal $b \"valb\"] }\n+\tgdb_assert { [string equal $opt1 \"val1\"] }\n+\tgdb_assert { [string equal $opt2 \"defval2\"] }\n+\tgdb_assert { $opt3 == 1 }\n+\tgdb_assert { $opt4 == 0 }\n+    }\n+\n+    set v1 \"val1\"\n+    test1 { opt1 $v1 opt3 } \"vala\" \"valb\"\n+}\n+\n+with_test_prefix parse_args {\n+    proc test2 { args } {\n+\tparse_args {\n+\t    { opt1 defval1 }\n+\t    { opt2 defval2 }\n+\t    { opt3 }\n+\t    { opt4 }\n+\t}\n+\tgdb_assert { [llength $args] == 2 }\n+\tlassign $args a b\n+\tgdb_assert { [string equal $a \"vala\"] }\n+\tgdb_assert { [string equal $b \"valb\"] }\n+\tgdb_assert { [string equal $opt1 \"val1\"] }\n+\tgdb_assert { [string equal $opt2 \"defval2\"] }\n+\tgdb_assert { $opt3 == 1 }\n+\tgdb_assert { $opt4 == 0 }\n+    }\n+\n+    set v1 \"val1\"\n+    test2 -opt1 $v1 -opt3 \"vala\" \"valb\"\n+}"
    },
    {
      "sha": "7fb3561a4436c9962e115f25474b620699055ded",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 14,
      "deletions": 17,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=590d3faada8a12bf0937bbf68413956dc6a339a9",
      "patch": "@@ -2212,7 +2212,12 @@ namespace eval Dwarf {\n \n     # Emit a DWARF .debug_aranges entry.\n \n-    proc arange { arange_start arange_length {comment \"\"} {seg_sel \"\"} } {\n+    proc arange { options arange_start arange_length } {\n+\tparse_options {\n+\t    { comment \"\" }\n+\t    { seg_sel \"\" }\n+\t}\n+\n \tif { $comment != \"\" } {\n \t    # Wrap\n \t    set comment \" ($comment)\"\n@@ -2270,22 +2275,14 @@ namespace eval Dwarf {\n \tvariable _addr_size\n \tvariable _seg_size\n \n-\t# Establish the defaults.\n-\tset is_64 0\n-\tset cu_is_64 0\n-\tset section_version 2\n-\tset _seg_size 0\n-\n \t# Handle options.\n-\tforeach { name value } $options {\n-\t    switch -exact -- $name {\n-\t\tis_64 { set is_64 $value }\n-\t\tcu_is_64 { set cu_is_64 $value }\n-\t\tsection_version {set section_version $value }\n-\t\tseg_size { set _seg_size $value }\n-\t\tdefault { error \"unknown option $name\" }\n-\t    }\n+\tparse_options {\n+\t    { is_64 0 }\n+\t    { cu_is_64 0 }\n+\t    { section_version 2 }\n+\t    { seg_size 0 }\n \t}\n+\tset _seg_size $seg_size\n \n \tif { [is_64_target] } {\n \t    set _addr_size 8\n@@ -2354,9 +2351,9 @@ namespace eval Dwarf {\n \t# Terminator tuple.\n \tset comment \"Terminator\"\n \tif { $_seg_size == 0 } {\n-\t    arange 0 0 $comment\n+\t    arange {comment $comment} 0 0\n \t} else {\n-\t    arange 0 0 $comment 0\n+\t    arange {comment $comment seg_sel 0} 0 0\n \t}\n \n \t# End label."
    },
    {
      "sha": "3aea7baaab097cc8c6823da358edde1d3b7a17ca",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 71,
      "deletions": 33,
      "changes": 104,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/590d3faada8a12bf0937bbf68413956dc6a339a9/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=590d3faada8a12bf0937bbf68413956dc6a339a9",
      "patch": "@@ -7293,8 +7293,8 @@ proc using_fission { } {\n     return [regexp -- \"-gsplit-dwarf\" $debug_flags]\n }\n \n-# Search the caller's ARGS list and set variables according to the list of\n-# valid options described by ARGSET.\n+# Search LISTNAME in uplevel LEVEL caller and set variables according to the\n+# list of valid options with prefix PREFIX described by ARGSET.\n #\n # The first member of each one- or two-element list in ARGSET defines the\n # name of a variable that will be added to the caller's scope.\n@@ -7305,57 +7305,95 @@ proc using_fission { } {\n #\n # If two elements are given, the second element is the default value of\n # the variable.  This is then overwritten if the option exists in ARGS.\n+# If EVAL, then subst is called on the value, which allows variables\n+# to be used.\n #\n # Any parse_args elements in (the caller's) ARGS will be removed, leaving\n # any optional components.\n-\n+#\n # Example:\n # proc myproc {foo args} {\n-#  parse_args {{bar} {baz \"abc\"} {qux}}\n+#   parse_list args 1 {{bar} {baz \"abc\"} {qux}} \"-\" false\n #    # ...\n # }\n # myproc ABC -bar -baz DEF peanut butter\n # will define the following variables in myproc:\n # foo (=ABC), bar (=1), baz (=DEF), and qux (=0)\n # args will be the list {peanut butter}\n \n-proc parse_args { argset } {\n-    upvar args args\n+proc parse_list { level listname argset prefix eval } {\n+    upvar $level $listname args\n \n     foreach argument $argset {\n-        if {[llength $argument] == 1} {\n-            # No default specified, so we assume that we should set\n-            # the value to 1 if the arg is present and 0 if it's not.\n-            # It is assumed that no value is given with the argument.\n-            set result [lsearch -exact $args \"-$argument\"]\n-            if {$result != -1} then {\n-                uplevel 1 [list set $argument 1]\n-                set args [lreplace $args $result $result]\n-            } else {\n-                uplevel 1 [list set $argument 0]\n-            }\n-        } elseif {[llength $argument] == 2} {\n-            # There are two items in the argument.  The second is a\n-            # default value to use if the item is not present.\n-            # Otherwise, the variable is set to whatever is provided\n-            # after the item in the args.\n-            set arg [lindex $argument 0]\n-            set result [lsearch -exact $args \"-[lindex $arg 0]\"]\n-            if {$result != -1} then {\n-                uplevel 1 [list set $arg [lindex $args [expr $result+1]]]\n-                set args [lreplace $args $result [expr $result+1]]\n-            } else {\n-                uplevel 1 [list set $arg [lindex $argument 1]]\n-            }\n-        } else {\n-            error \"Badly formatted argument \\\"$argument\\\" in argument set\"\n-        }\n+\tif {[llength $argument] == 1} {\n+\t    # Normalize argument, strip leading/trailing whitespace.\n+\t    # Allows us to treat {foo} and { foo } the same.\n+\t    set argument [string trim $argument]\n+\n+\t    # No default specified, so we assume that we should set\n+\t    # the value to 1 if the arg is present and 0 if it's not.\n+\t    # It is assumed that no value is given with the argument.\n+\t    set pattern \"$prefix$argument\"\n+\t    set result [lsearch -exact $args $pattern]\n+\n+\t    if {$result != -1} then {\n+\t\tset value 1\n+\t\tset args [lreplace $args $result $result]\n+\t    } else {\n+\t\tset value 0\n+\t    }\n+\t    uplevel $level [list set $argument $value]\n+\t} elseif {[llength $argument] == 2} {\n+\t    # There are two items in the argument.  The second is a\n+\t    # default value to use if the item is not present.\n+\t    # Otherwise, the variable is set to whatever is provided\n+\t    # after the item in the args.\n+\t    set arg [lindex $argument 0]\n+\t    set pattern \"$prefix[lindex $arg 0]\"\n+\t    set result [lsearch -exact $args $pattern]\n+\n+\t    if {$result != -1} then {\n+\t\tset value [lindex $args [expr $result+1]]\n+\t\tif { $eval } {\n+\t\t    set value [uplevel [expr $level + 1] [list subst $value]]\n+\t\t}\n+\t\tset args [lreplace $args $result [expr $result+1]]\n+\t    } else {\n+\t\tset value [lindex $argument 1]\n+\t\tif { $eval } {\n+\t\t    set value [uplevel $level [list subst $value]]\n+\t\t}\n+\t    }\n+\t    uplevel $level [list set $arg $value]\n+\t} else {\n+\t    error \"Badly formatted argument \\\"$argument\\\" in argument set\"\n+\t}\n     }\n+}\n+\n+# Search the caller's args variable and set variables according to the list of\n+# valid options described by ARGSET.\n+\n+proc parse_args { argset } {\n+    parse_list 2 args $argset \"-\" false\n \n     # The remaining args should be checked to see that they match the\n     # number of items expected to be passed into the procedure...\n }\n \n+# Process the caller's options variable and set variables according\n+# to the list of valid options described by OPTIONSET.\n+\n+proc parse_options { optionset } {\n+    parse_list 2 options $optionset \"\" true\n+\n+    # Require no remaining options.\n+    upvar 1 options options\n+    if { [llength $options] != 0 } {\n+\terror \"Options left unparsed: $options\"\n+    }\n+}\n+\n # Capture the output of COMMAND in a string ignoring PREFIX (a regexp);\n # return that string.\n "
    }
  ]
}