{
  "sha": "57d750026550cf3a589e3f28a0cdc303ba5ed039",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTdkNzUwMDI2NTUwY2YzYTU4OWUzZjI4YTBjZGMzMDNiYTVlZDAzOQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2020-01-08T01:10:40Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2020-01-09T19:13:04Z"
    },
    "message": "Fix memory leak of the demangled symbol name\n\ncompute_and_set_names would only free the name if we did not find the name\nin the hashtable, but it needs to always free it.  Solve this by moving the\nsmart pointer outside the if.\n\nThanks to PhilippeW for finding this.\n\ngdb/ChangeLog:\n\n2020-01-09  Christian Biesinger  <cbiesinger@google.com>\n\n\t* symtab.c (general_symbol_info::compute_and_set_names): Move the\n\tunique_xmalloc_ptr outside the if to always free the demangled name.\n\nChange-Id: Id7c6b8408432183700ccb5ff634818d6c5a3ac95",
    "tree": {
      "sha": "0f736a1162600cd6a325bde3cf012a7e0d865215",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0f736a1162600cd6a325bde3cf012a7e0d865215"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/57d750026550cf3a589e3f28a0cdc303ba5ed039",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57d750026550cf3a589e3f28a0cdc303ba5ed039",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/57d750026550cf3a589e3f28a0cdc303ba5ed039",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57d750026550cf3a589e3f28a0cdc303ba5ed039/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ffebb0bbde7deae978ab3e4d3d3d90acf52b7d69",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ffebb0bbde7deae978ab3e4d3d3d90acf52b7d69",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ffebb0bbde7deae978ab3e4d3d3d90acf52b7d69"
    }
  ],
  "stats": {
    "total": 27,
    "additions": 18,
    "deletions": 9
  },
  "files": [
    {
      "sha": "2ba163400899378fd590faa098a5e1ba88f1e1a5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/57d750026550cf3a589e3f28a0cdc303ba5ed039/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/57d750026550cf3a589e3f28a0cdc303ba5ed039/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=57d750026550cf3a589e3f28a0cdc303ba5ed039",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-09  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* symtab.c (general_symbol_info::compute_and_set_names): Move the\n+\tunique_xmalloc_ptr outside the if to always free the demangled name.\n+\n 2020-01-08  Tom Tromey  <tromey@adacore.com>\n \n \t* xcoffread.c (enter_line_range, read_xcoff_symtab)"
    },
    {
      "sha": "cdd9f2e4c12c737b74f1a7eda33111039e8a8769",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 13,
      "deletions": 9,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/57d750026550cf3a589e3f28a0cdc303ba5ed039/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/57d750026550cf3a589e3f28a0cdc303ba5ed039/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=57d750026550cf3a589e3f28a0cdc303ba5ed039",
      "patch": "@@ -892,6 +892,16 @@ general_symbol_info::compute_and_set_names (gdb::string_view linkage_name,\n           htab_find_slot_with_hash (per_bfd->demangled_names_hash.get (),\n \t\t\t\t    &entry, *hash, INSERT));\n \n+  /* The const_cast is safe because the only reason it is already\n+     initialized is if we purposefully set it from a background\n+     thread to avoid doing the work here.  However, it is still\n+     allocated from the heap and needs to be freed by us, just\n+     like if we called symbol_find_demangled_name here.  If this is\n+     nullptr, we call symbol_find_demangled_name below, but we put\n+     this smart pointer here to be sure that we don't leak this name.  */\n+  gdb::unique_xmalloc_ptr<char> demangled_name\n+    (const_cast<char *> (language_specific.demangled_name));\n+\n   /* If this name is not in the hash table, add it.  */\n   if (*slot == NULL\n       /* A C version of the symbol may have already snuck into the table.\n@@ -914,15 +924,9 @@ general_symbol_info::compute_and_set_names (gdb::string_view linkage_name,\n       else\n \tlinkage_name_copy = linkage_name;\n \n-      /* The const_cast is safe because the only reason it is already\n-         initialized is if we purposefully set it from a background\n-         thread to avoid doing the work here.  However, it is still\n-         allocated from the heap and needs to be freed by us, just\n-         like if we called symbol_find_demangled_name here.  */\n-      gdb::unique_xmalloc_ptr<char> demangled_name\n-\t(language_specific.demangled_name\n-\t ? const_cast<char *> (language_specific.demangled_name)\n-\t : symbol_find_demangled_name (this, linkage_name_copy.data ()));\n+      if (demangled_name.get () == nullptr)\n+\t demangled_name.reset\n+\t   (symbol_find_demangled_name (this, linkage_name_copy.data ()));\n \n       /* Suppose we have demangled_name==NULL, copy_name==0, and\n \t linkage_name_copy==linkage_name.  In this case, we already have the"
    }
  ]
}