{
  "sha": "cb60f4208b2b920614306937b62bf15700824ee0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2I2MGY0MjA4YjJiOTIwNjE0MzA2OTM3YjYyYmYxNTcwMDgyNGVlMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-06-26T18:47:44Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-10T18:43:35Z"
    },
    "message": "Change jit.c to use type-safe registry\n\nThis changes jit.c to use the type-safe registry.  Only one of the\nregistry keys in jit.c is converted; the other is trickier and so I've\nleft it be for now.\n\ngdb/ChangeLog\n2019-07-10  Tom Tromey  <tromey@adacore.com>\n\n\t* jit.c (jit_program_space_key): Change type.  Move lower.\n\t(get_jit_program_space_data): Update.\n\t(jit_program_space_data_cleanup): Remove.\n\t(jit_breakpoint_deleted, free_objfile_data, _initialize_jit):\n\tUpdate.\n\t(struct jit_program_space_data): Add initializers.",
    "tree": {
      "sha": "d686075cb4f43950a729d594db8fc1695532266f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d686075cb4f43950a729d594db8fc1695532266f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cb60f4208b2b920614306937b62bf15700824ee0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb60f4208b2b920614306937b62bf15700824ee0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cb60f4208b2b920614306937b62bf15700824ee0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb60f4208b2b920614306937b62bf15700824ee0/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "51df2ae3029caafd2b832e19d2978114a7e25a8a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/51df2ae3029caafd2b832e19d2978114a7e25a8a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/51df2ae3029caafd2b832e19d2978114a7e25a8a"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 19,
    "deletions": 29
  },
  "files": [
    {
      "sha": "41311c84a326293b3410d87c73c010a4eacbd450",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb60f4208b2b920614306937b62bf15700824ee0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb60f4208b2b920614306937b62bf15700824ee0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cb60f4208b2b920614306937b62bf15700824ee0",
      "patch": "@@ -1,3 +1,12 @@\n+2019-07-10  Tom Tromey  <tromey@adacore.com>\n+\n+\t* jit.c (jit_program_space_key): Change type.  Move lower.\n+\t(get_jit_program_space_data): Update.\n+\t(jit_program_space_data_cleanup): Remove.\n+\t(jit_breakpoint_deleted, free_objfile_data, _initialize_jit):\n+\tUpdate.\n+\t(struct jit_program_space_data): Add initializers.\n+\n 2019-07-10  Tom Tromey  <tromey@adacore.com>\n \n \t* solib-darwin.c (struct darwin_info): Add initializers."
    },
    {
      "sha": "ce73e3fa5b1c66f154034daa3f25b2439d12177e",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 10,
      "deletions": 29,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb60f4208b2b920614306937b62bf15700824ee0/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb60f4208b2b920614306937b62bf15700824ee0/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=cb60f4208b2b920614306937b62bf15700824ee0",
      "patch": "@@ -50,8 +50,6 @@ static const char *const jit_break_name = \"__jit_debug_register_code\";\n \n static const char *const jit_descriptor_name = \"__jit_debug_descriptor\";\n \n-static const struct program_space_data *jit_program_space_data = NULL;\n-\n static void jit_inferior_init (struct gdbarch *gdbarch);\n static void jit_inferior_exit_hook (struct inferior *inf);\n \n@@ -249,20 +247,22 @@ struct jit_program_space_data\n   /* The objfile.  This is NULL if no objfile holds the JIT\n      symbols.  */\n \n-  struct objfile *objfile;\n+  struct objfile *objfile = nullptr;\n \n   /* If this program space has __jit_debug_register_code, this is the\n      cached address from the minimal symbol.  This is used to detect\n      relocations requiring the breakpoint to be re-created.  */\n \n-  CORE_ADDR cached_code_address;\n+  CORE_ADDR cached_code_address = 0;\n \n   /* This is the JIT event breakpoint, or NULL if it has not been\n      set.  */\n \n-  struct breakpoint *jit_breakpoint;\n+  struct breakpoint *jit_breakpoint = nullptr;\n };\n \n+static program_space_key<jit_program_space_data> jit_program_space_key;\n+\n /* Per-objfile structure recording the addresses in the program space.\n    This object serves two purposes: for ordinary objfiles, it may\n    cache some symbols related to the JIT interface; and for\n@@ -316,29 +316,16 @@ add_objfile_entry (struct objfile *objfile, CORE_ADDR entry)\n    if not already present.  */\n \n static struct jit_program_space_data *\n-get_jit_program_space_data (void)\n+get_jit_program_space_data ()\n {\n   struct jit_program_space_data *ps_data;\n \n-  ps_data\n-    = ((struct jit_program_space_data *)\n-       program_space_data (current_program_space, jit_program_space_data));\n+  ps_data = jit_program_space_key.get (current_program_space);\n   if (ps_data == NULL)\n-    {\n-      ps_data = XCNEW (struct jit_program_space_data);\n-      set_program_space_data (current_program_space, jit_program_space_data,\n-\t\t\t      ps_data);\n-    }\n-\n+    ps_data = jit_program_space_key.emplace (current_program_space);\n   return ps_data;\n }\n \n-static void\n-jit_program_space_data_cleanup (struct program_space *ps, void *arg)\n-{\n-  xfree (arg);\n-}\n-\n /* Helper function for reading the global JIT descriptor from remote\n    memory.  Returns 1 if all went well, 0 otherwise.  */\n \n@@ -1008,8 +995,7 @@ jit_breakpoint_deleted (struct breakpoint *b)\n     {\n       struct jit_program_space_data *ps_data;\n \n-      ps_data = ((struct jit_program_space_data *)\n-\t\t program_space_data (iter->pspace, jit_program_space_data));\n+      ps_data = jit_program_space_key.get (iter->pspace);\n       if (ps_data != NULL && ps_data->jit_breakpoint == iter->owner)\n \t{\n \t  ps_data->cached_code_address = 0;\n@@ -1448,9 +1434,7 @@ free_objfile_data (struct objfile *objfile, void *data)\n     {\n       struct jit_program_space_data *ps_data;\n \n-      ps_data\n-\t= ((struct jit_program_space_data *)\n-\t   program_space_data (objfile->pspace, jit_program_space_data));\n+      ps_data = jit_program_space_key.get (objfile->pspace);\n       if (ps_data != NULL && ps_data->objfile == objfile)\n \t{\n \t  ps_data->objfile = NULL;\n@@ -1496,9 +1480,6 @@ _initialize_jit (void)\n \n   jit_objfile_data =\n     register_objfile_data_with_cleanup (NULL, free_objfile_data);\n-  jit_program_space_data =\n-    register_program_space_data_with_cleanup (NULL,\n-\t\t\t\t\t      jit_program_space_data_cleanup);\n   jit_gdbarch_data = gdbarch_data_register_pre_init (jit_gdbarch_data_init);\n   if (is_dl_available ())\n     {"
    }
  ]
}