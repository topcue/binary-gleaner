{
  "sha": "eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWIzNmEzZWIyZjg0NmI4ZDRiMTZjMWJiMTE0MTM2OTYxZDBjZTViZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:46Z"
    },
    "message": "Allow multiple partial symbol readers per objfile\n\nThis patch finally changes gdb so that an objfile can have multiple\nsources of partial symbols (or mixed partial symbols and other kinds\nof indices).\n\nThis is done by having each symbol reader create its own\npsymbol_functions object and add it to the 'qf' list in the objfile.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* xcoffread.c (xcoff_initial_scan): Create partial symtabs.\n\t* symfile.c (syms_from_objfile_1, reread_symbols): Update.\n\t* psymtab.h (make_psymbol_functions): Don't declare.\n\t* psymtab.c (make_psymbol_functions): Remove.\n\t(maintenance_print_psymbols): Update.\n\t* psympriv.h (struct psymbol_functions): Add no-argument\n\tconstructor.\n\t* objfiles.h (struct objfile) <reset_psymtabs>: Remove.\n\t<partial_symtabs>: Remove.\n\t* mdebugread.c (mdebug_build_psymtabs): Create partial symtabs.\n\t* elfread.c (read_partial_symbols): Update.\n\t(elf_symfile_read): Remove check for existing partial symbols.\n\tDon't clear \"qf\".\n\t* dwarf2/read.c (dwarf2_has_info): Remove check for existing\n\tpartial symbols.\n\t(dwarf2_build_psymtabs): Add psymbol_functions parameter.  Create\n\tpartial symtabs.\n\t* dwarf2/public.h (dwarf2_build_psymtabs): Add psymbol_functions\n\tparameter.\n\t* dbxread.c (dbx_symfile_read): Create partial symtabs.\n\t* ctfread.c (elfctf_build_psymtabs): Create partial symtabs.",
    "tree": {
      "sha": "66db807b35c33f6ba4ab2406e19308ecd2ac4a29",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/66db807b35c33f6ba4ab2406e19308ecd2ac4a29"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e11145903f25b7ac91dd12e6330df3faec0a3f1b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e11145903f25b7ac91dd12e6330df3faec0a3f1b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e11145903f25b7ac91dd12e6330df3faec0a3f1b"
    }
  ],
  "stats": {
    "total": 128,
    "additions": 67,
    "deletions": 61
  },
  "files": [
    {
      "sha": "03235e98d72a7c11c5ce8a4b1c1585e3fabb069a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -1,3 +1,27 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* xcoffread.c (xcoff_initial_scan): Create partial symtabs.\n+\t* symfile.c (syms_from_objfile_1, reread_symbols): Update.\n+\t* psymtab.h (make_psymbol_functions): Don't declare.\n+\t* psymtab.c (make_psymbol_functions): Remove.\n+\t(maintenance_print_psymbols): Update.\n+\t* psympriv.h (struct psymbol_functions): Add no-argument\n+\tconstructor.\n+\t* objfiles.h (struct objfile) <reset_psymtabs>: Remove.\n+\t<partial_symtabs>: Remove.\n+\t* mdebugread.c (mdebug_build_psymtabs): Create partial symtabs.\n+\t* elfread.c (read_partial_symbols): Update.\n+\t(elf_symfile_read): Remove check for existing partial symbols.\n+\tDon't clear \"qf\".\n+\t* dwarf2/read.c (dwarf2_has_info): Remove check for existing\n+\tpartial symbols.\n+\t(dwarf2_build_psymtabs): Add psymbol_functions parameter.  Create\n+\tpartial symtabs.\n+\t* dwarf2/public.h (dwarf2_build_psymtabs): Add psymbol_functions\n+\tparameter.\n+\t* dbxread.c (dbx_symfile_read): Create partial symtabs.\n+\t* ctfread.c (elfctf_build_psymtabs): Create partial symtabs.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (dwarf2_build_psymtabs): Update."
    },
    {
      "sha": "616464c77dfc9faab055cf7d2d08f718c35ee22e",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -1546,7 +1546,9 @@ elfctf_build_psymtabs (struct objfile *of)\n \t   bfd_get_filename (abfd), ctf_errmsg (err));\n   ctf_dict_key.emplace (of, fp);\n \n-  psymtab_storage *partial_symtabs = of->partial_symtabs.get ();\n+  psymbol_functions *psf = new psymbol_functions ();\n+  psymtab_storage *partial_symtabs = psf->get_partial_symtabs ().get ();\n+  of->qf.emplace_front (psf);\n   scan_partial_symbols (fp, partial_symtabs, of);\n }\n "
    },
    {
      "sha": "99a36cafa153b70ee50639e36f1e76ba7c602bf5",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -545,7 +545,9 @@ dbx_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \n   /* Read stabs data from executable file and define symbols.  */\n \n-  psymtab_storage *partial_symtabs = objfile->partial_symtabs.get ();\n+  psymbol_functions *psf = new psymbol_functions ();\n+  psymtab_storage *partial_symtabs = psf->get_partial_symtabs ().get ();\n+  objfile->qf.emplace_front (psf);\n   read_dbx_symtab (reader, partial_symtabs, objfile);\n \n   /* Install any minimal symbols that have been collected as the current"
    },
    {
      "sha": "e6653f4f38d1b99ec421ed77a49a0cbb25f2396c",
      "filename": "gdb/dwarf2/public.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/dwarf2/public.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/dwarf2/public.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/public.h?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -40,7 +40,9 @@ enum class dw_index_kind\n extern bool dwarf2_initialize_objfile (struct objfile *objfile,\n \t\t\t\t       dw_index_kind *index_kind);\n \n-extern void dwarf2_build_psymtabs (struct objfile *);\n+struct psymbol_functions;\n+extern void dwarf2_build_psymtabs (struct objfile *,\n+\t\t\t\t   psymbol_functions *psf = nullptr);\n extern void dwarf2_build_frame_info (struct objfile *);\n \n extern quick_symbol_functions_up make_dwarf_gdb_index ();"
    },
    {
      "sha": "acbc5fa1ad15e196598b231a6c9897e3b3639194",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 20,
      "deletions": 14,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -1952,10 +1952,8 @@ dwarf2_has_info (struct objfile *objfile,\n       dwarf2_per_bfd *per_bfd;\n \n       /* We can share a \"dwarf2_per_bfd\" with other objfiles if the BFD\n-\t doesn't require relocations and if there aren't partial symbols\n-\t from some other reader.  */\n-      if (!objfile->has_partial_symbols ()\n-\t  && !gdb_bfd_requires_relocations (objfile->obfd))\n+\t doesn't require relocations.  */\n+      if (!gdb_bfd_requires_relocations (objfile->obfd))\n \t{\n \t  /* See if one has been created for this BFD yet.  */\n \t  per_bfd = dwarf2_per_bfd_bfd_data_key.get (objfile->obfd);\n@@ -6118,7 +6116,7 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n /* Build a partial symbol table.  */\n \n void\n-dwarf2_build_psymtabs (struct objfile *objfile)\n+dwarf2_build_psymtabs (struct objfile *objfile, psymbol_functions *psf)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n   dwarf2_per_bfd *per_bfd = per_objfile->per_bfd;\n@@ -6127,29 +6125,37 @@ dwarf2_build_psymtabs (struct objfile *objfile)\n     {\n       /* Partial symbols were already read, so now we can simply\n \t attach them.  */\n-      objfile->partial_symtabs = per_bfd->partial_symtabs;\n-      /* This is a temporary hack to ensure that the objfile and 'qf'\n-\t psymtabs are identical.  */\n-      psymbol_functions *psf\n-\t= dynamic_cast<psymbol_functions *> (objfile->qf.front ().get ());\n-      gdb_assert (psf != nullptr);\n-      psf->set_partial_symtabs (per_bfd->partial_symtabs);\n+      if (psf == nullptr)\n+\t{\n+\t  psf = new psymbol_functions (per_bfd->partial_symtabs);\n+\t  objfile->qf.emplace_front (psf);\n+\t}\n+      else\n+\tpsf->set_partial_symtabs (per_bfd->partial_symtabs);\n       per_objfile->resize_symtabs ();\n       return;\n     }\n \n+  if (psf == nullptr)\n+    {\n+      psf = new psymbol_functions;\n+      objfile->qf.emplace_front (psf);\n+    }\n+  const std::shared_ptr<psymtab_storage> &partial_symtabs\n+    = psf->get_partial_symtabs ();\n+\n   /* Set the local reference to partial symtabs, so that we don't try\n      to read them again if reading another objfile with the same BFD.\n      If we can't in fact share, this won't make a difference anyway as\n      the dwarf2_per_bfd object won't be shared.  */\n-  per_bfd->partial_symtabs = objfile->partial_symtabs;\n+  per_bfd->partial_symtabs = partial_symtabs;\n \n   try\n     {\n       /* This isn't really ideal: all the data we allocate on the\n \t objfile's obstack is still uselessly kept around.  However,\n \t freeing it seems unsafe.  */\n-      psymtab_discarder psymtabs (objfile->partial_symtabs.get ());\n+      psymtab_discarder psymtabs (partial_symtabs.get ());\n       dwarf2_build_psymtabs_hard (per_objfile);\n       psymtabs.keep ();\n "
    },
    {
      "sha": "851008753471f9d4daaa884ab1a54eeb70b6820b",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 16,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -67,7 +67,7 @@ struct lazy_dwarf_reader : public psymbol_functions\n   void read_partial_symbols (struct objfile *objfile) override\n   {\n     if (dwarf2_has_info (objfile, nullptr))\n-      dwarf2_build_psymtabs (objfile);\n+      dwarf2_build_psymtabs (objfile, this);\n   }\n };\n \n@@ -1278,16 +1278,11 @@ elf_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n     {\n       dw_index_kind index_kind;\n \n-      /* elf_sym_fns_gdb_index cannot handle simultaneous non-DWARF\n-\t debug information present in OBJFILE.  If there is such debug\n-\t info present never use an index.  */\n-      if (!objfile->has_partial_symbols ()\n-\t  && dwarf2_initialize_objfile (objfile, &index_kind))\n+      if (dwarf2_initialize_objfile (objfile, &index_kind))\n \t{\n \t  switch (index_kind)\n \t    {\n \t    case dw_index_kind::GDB_INDEX:\n-\t      objfile->qf.clear ();\n \t      objfile->qf.push_front (make_dwarf_gdb_index ());\n \t      break;\n \t    case dw_index_kind::DEBUG_NAMES:\n@@ -1297,15 +1292,7 @@ elf_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \t    }\n \t}\n       else\n-\t{\n-\t  /* It is ok to do this even if the stabs reader made some\n-\t     partial symbols, because OBJF_PSYMTABS_READ has not been\n-\t     set, and so our lazy reader function will still be called\n-\t     when needed.  */\n-\t  objfile->qf.clear ();\n-\t  objfile->qf.emplace_front\n-\t    (new lazy_dwarf_reader (objfile->partial_symtabs));\n-\t}\n+\tobjfile->qf.emplace_front (new lazy_dwarf_reader);\n     }\n   /* If the file has its own symbol tables it has no separate debug\n      info.  `.dynsym'/`.symtab' go to MSYMBOLS, `.debug_info' goes to"
    },
    {
      "sha": "7bf4564aecbacaed9863995260bb79ef4a253537",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -360,7 +360,9 @@ mdebug_build_psymtabs (minimal_symbol_reader &reader,\n \t(*swap->swap_fdr_in) (objfile->obfd, fdr_src, fdr_ptr);\n     }\n \n-  psymtab_storage *partial_symtabs = objfile->partial_symtabs.get ();\n+  psymbol_functions *psf = new psymbol_functions ();\n+  psymtab_storage *partial_symtabs = psf->get_partial_symtabs ().get ();\n+  objfile->qf.emplace_front (psf);\n   parse_partial_symbols (reader, partial_symtabs, objfile);\n \n #if 0"
    },
    {
      "sha": "41f8fc913d852e911dfc36d9f42e82c4cf70f623",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -447,13 +447,6 @@ struct objfile\n \n   DISABLE_COPY_AND_ASSIGN (objfile);\n \n-  /* Reset the storage for the partial symbol tables.  */\n-\n-  void reset_psymtabs ()\n-  {\n-    partial_symtabs.reset (new psymtab_storage ());\n-  }\n-\n   typedef next_adapter<struct compunit_symtab> compunits_range;\n \n   /* A range adapter that makes it possible to iterate over all\n@@ -635,10 +628,6 @@ struct objfile\n \n   struct compunit_symtab *compunit_symtabs = nullptr;\n \n-  /* The partial symbol tables.  */\n-\n-  std::shared_ptr<psymtab_storage> partial_symtabs;\n-\n   /* The object file's BFD.  Can be null if the objfile contains only\n      minimal symbols, e.g. the run time common symbols for SunOS4.  */\n "
    },
    {
      "sha": "bbae2fc90e4e68fdfbb8ee74c2dc96d1efa97e86",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -495,6 +495,11 @@ struct psymbol_functions : public quick_symbol_functions\n   {\n   }\n \n+  psymbol_functions ()\n+    : m_partial_symtabs (new psymtab_storage)\n+  {\n+  }\n+\n   bool has_symbols (struct objfile *objfile) override;\n \n   struct symtab *find_last_source_symtab (struct objfile *objfile) override;"
    },
    {
      "sha": "597817269c1ac7b42b46383f78eb577105dc3849",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -1430,12 +1430,6 @@ psymbol_functions::find_compunit_symtab_by_address (struct objfile *objfile,\n   return psymtab_to_symtab (objfile, iter->second);\n }\n \n-quick_symbol_functions_up\n-make_psymbol_functions (const std::shared_ptr<psymtab_storage> &storage)\n-{\n-  return quick_symbol_functions_up (new psymbol_functions (storage));\n-}\n-\n \f\n \n /* Partially fill a partial symtab.  It will be completely filled at"
    },
    {
      "sha": "522ccf3a12a4fe6c0c6717dc313735674cc3f099",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -145,8 +145,4 @@ class psymtab_storage\n   gdb::optional<auto_obstack> m_obstack;\n };\n \n-\n-extern quick_symbol_functions_up make_psymbol_functions\n-     (const std::shared_ptr<psymtab_storage> &);\n-\n #endif /* PSYMTAB_H */"
    },
    {
      "sha": "adcdc169306bf5f589a7f7e8559331f4e33d8db1",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -902,9 +902,7 @@ syms_from_objfile_1 (struct objfile *objfile,\n   const int mainline = add_flags & SYMFILE_MAINLINE;\n \n   objfile_set_sym_fns (objfile, find_sym_fns (objfile->obfd));\n-  objfile->reset_psymtabs ();\n   objfile->qf.clear ();\n-  objfile->qf.push_front (make_psymbol_functions (objfile->partial_symtabs));\n \n   if (objfile->sf == NULL)\n     {\n@@ -2553,10 +2551,7 @@ reread_symbols (void)\n \t     based on whether .gdb_index is present, and we need it to\n \t     start over.  PR symtab/15885  */\n \t  objfile_set_sym_fns (objfile, find_sym_fns (objfile->obfd));\n-\t  objfile->reset_psymtabs ();\n \t  objfile->qf.clear ();\n-\t  objfile->qf.push_front\n-\t    (make_psymbol_functions (objfile->partial_symtabs));\n \n \t  build_objfile_section_table (objfile);\n "
    },
    {
      "sha": "30ac876e8e36520d65ab4a52d4386cc0b9886685",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=eb36a3eb2f846b8d4b16c1bb114136961d0ce5bf",
      "patch": "@@ -2946,7 +2946,9 @@ xcoff_initial_scan (struct objfile *objfile, symfile_add_flags symfile_flags)\n   /* Now that the symbol table data of the executable file are all in core,\n      process them and define symbols accordingly.  */\n \n-  psymtab_storage *partial_symtabs = objfile->partial_symtabs.get ();\n+  psymbol_functions *psf = new psymbol_functions ();\n+  psymtab_storage *partial_symtabs = psf->get_partial_symtabs ().get ();\n+  objfile->qf.emplace_front (psf);\n   scan_xcoff_symtab (reader, partial_symtabs, objfile);\n \n   /* Install any minimal symbols that have been collected as the current"
    }
  ]
}