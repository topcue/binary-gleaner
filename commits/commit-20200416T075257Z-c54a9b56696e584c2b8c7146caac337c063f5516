{
  "sha": "c54a9b56696e584c2b8c7146caac337c063f5516",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzU0YTliNTY2OTZlNTg0YzJiOGM3MTQ2Y2FhYzMzN2MwNjNmNTUxNg==",
  "commit": {
    "author": {
      "name": "David Faust",
      "email": "david.faust@oracle.com",
      "date": "2020-04-16T07:52:57Z"
    },
    "committer": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2020-04-16T07:52:57Z"
    },
    "message": "cpu,gas,opcodes: support for eBPF JMP32 instruction class\n\nAdd support for the JMP32 class of eBPF instructions.\n\ncpu/ChangeLog\n\n\t* bpf.cpu (define-cond-jump-insn): Renamed from djci.\n\t(dcji) New version with support for JMP32\n\ngas/ChangeLog\n\n\t* testsuite/gas/bpf/bpf.exp: Run jump32 tests.\n\t* testsuite/gas/bpf/jump32.s: New file.\n\t* testsuite/gas/bpf/jump32.d: Likewise.\n\nopcodes/ChangeLog\n\n\t* bpf-desc.c: Regenerate.\n\t* bpf-desc.h: Likewise.\n\t* bpf-opc.c: Regenerate.\n\t* bpf-opc.h: Likewise.",
    "tree": {
      "sha": "33205ceeca676265c2b2d4f5c049ec762d29fadd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/33205ceeca676265c2b2d4f5c049ec762d29fadd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c54a9b56696e584c2b8c7146caac337c063f5516",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c54a9b56696e584c2b8c7146caac337c063f5516",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c54a9b56696e584c2b8c7146caac337c063f5516",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c54a9b56696e584c2b8c7146caac337c063f5516/comments",
  "author": {
    "login": "dafaust",
    "id": 4460334,
    "node_id": "MDQ6VXNlcjQ0NjAzMzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dafaust",
    "html_url": "https://github.com/dafaust",
    "followers_url": "https://api.github.com/users/dafaust/followers",
    "following_url": "https://api.github.com/users/dafaust/following{/other_user}",
    "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions",
    "organizations_url": "https://api.github.com/users/dafaust/orgs",
    "repos_url": "https://api.github.com/users/dafaust/repos",
    "events_url": "https://api.github.com/users/dafaust/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dafaust/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d191d716f38b41720c4955823fe6c178cf0786f0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d191d716f38b41720c4955823fe6c178cf0786f0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d191d716f38b41720c4955823fe6c178cf0786f0"
    }
  ],
  "stats": {
    "total": 625,
    "additions": 600,
    "deletions": 25
  },
  "files": [
    {
      "sha": "2324006fb27e368d8f215285af4bd6bdd49be8c0",
      "filename": "cpu/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c54a9b56696e584c2b8c7146caac337c063f5516/cpu/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c54a9b56696e584c2b8c7146caac337c063f5516/cpu/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/ChangeLog?ref=c54a9b56696e584c2b8c7146caac337c063f5516",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-16  David Faust  <david.faust@oracle.com>\n+\n+\t* bpf.cpu (define-cond-jump-insn): Renamed from djci.\n+\t(dcji) New version with support for JMP32\n+\n 2020-02-03  Alan Modra  <amodra@gmail.com>\n \n \t* m32c.cpu (f-dsp-64-s16): Mask before shifting signed value."
    },
    {
      "sha": "89a27fe128d8813b4d9fc621333b4278ae5086d8",
      "filename": "cpu/bpf.cpu",
      "status": "modified",
      "additions": 17,
      "deletions": 12,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c54a9b56696e584c2b8c7146caac337c063f5516/cpu/bpf.cpu",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c54a9b56696e584c2b8c7146caac337c063f5516/cpu/bpf.cpu",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/bpf.cpu?ref=c54a9b56696e584c2b8c7146caac337c063f5516",
      "patch": "@@ -222,7 +222,7 @@\n (define-normal-insn-enum insn-op-class \"eBPF instruction class\"\n   (all-isas) OP_CLASS_ f-op-class\n   ((LD    #b000) (LDX   #b001) (ST    #b010) (STX   #b011)\n-   (ALU   #b100) (JMP   #b101) (ALU64 #b111)))\n+   (ALU   #b100) (JMP   #b101) (JMP32 #b110) (ALU64 #b111)))\n \n ;; For load/store instructions, the 8-bit code field is subdivided in:\n ;;\n@@ -583,25 +583,30 @@\n ;; registers.  Therefore, we need to define several variants in both\n ;; ISAs:\n ;;\n-;;   J{eq,gt,ge,lt,le,set,ne,sgt,sge,slt,sle}{i,r}le for the\n+;;   J{eq,gt,ge,lt,le,set,ne,sgt,sge,slt,sle}[32]{i,r}le for the\n ;;   little-endian ISA.\n-;;   J{eq,gt,ge,lt,le,set,ne.sgt,sge,slt,sle}{i,r}be for the\n+;;   J{eq,gt,ge,lt,le,set,ne.sgt,sge,slt,sle}[32]{i,r}be for the\n ;;   big-endian ISA.\n \n-(define-pmacro (dcji x-cond x-op-code x-endian)\n+(define-pmacro (define-cond-jump-insn x-cond x-suffix x-op-class x-op-code x-endian)\n   (begin\n-    (dni (.sym j x-cond i x-endian)\n-         (.str j x-cond \"i\")\n+    (dni (.sym j x-cond x-suffix i x-endian)\n+         (.str j x-cond x-suffix \" i\")\n          ((ISA (.sym ebpf x-endian)))\n-         (.str \"j\" x-cond \" $dst\" x-endian \",$imm32,$disp16\")\n+         (.str \"j\" x-cond x-suffix \" $dst\" x-endian \",$imm32,$disp16\")\n          (+ imm32 disp16 ((.sym f-src x-endian) 0) (.sym dst x-endian)\n-            OP_CLASS_JMP OP_SRC_K (.sym OP_CODE_ x-op-code)) () ())\n-    (dni (.sym j x-cond r x-endian)\n-         (.str j x-cond \"r\")\n+            x-op-class OP_SRC_K (.sym OP_CODE_ x-op-code)) () ())\n+    (dni (.sym j x-cond x-suffix r x-endian)\n+         (.str j x-cond x-suffix \" r\")\n          ((ISA (.sym ebpf x-endian)))\n-         (.str \"j\" x-cond \" $dst\" x-endian \",$src\" x-endian \",$disp16\")\n+         (.str \"j\" x-cond x-suffix \" $dst\" x-endian \",$src\" x-endian \",$disp16\")\n          (+ (f-imm32 0) disp16 (.sym src x-endian) (.sym dst x-endian)\n-            OP_CLASS_JMP OP_SRC_X (.sym OP_CODE_ x-op-code)) () ())))\n+            x-op-class OP_SRC_X (.sym OP_CODE_ x-op-code)) () ())))\n+\n+(define-pmacro (dcji x-cond x-op-code x-endian)\n+  (begin\n+    (define-cond-jump-insn x-cond \"\" OP_CLASS_JMP x-op-code x-endian)\n+    (define-cond-jump-insn x-cond \"32\" OP_CLASS_JMP32 x-op-code x-endian)))\n \n (define-pmacro (define-condjump-insns x-endian)\n   (begin"
    },
    {
      "sha": "09ad599c5c914a99986ee9a9fa86e9f8bfea8bf1",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c54a9b56696e584c2b8c7146caac337c063f5516/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c54a9b56696e584c2b8c7146caac337c063f5516/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=c54a9b56696e584c2b8c7146caac337c063f5516",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-16  David Faust  <david.faust@oracle.com>\n+\n+\t* testsuite/gas/bpf/bpf.exp: Run jump32 tests.\n+\t* testsuite/gas/bpf/jump32.s: New file.\n+\t* testsuite/gas/bpf/jump32.d: Likewise.\n+\n 2020-04-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* doc/c-i386.texi: Correct -mlfence-before-indirect-branch="
    },
    {
      "sha": "6225d0b3589b40ead684355a6bb980363aa91793",
      "filename": "gas/testsuite/gas/bpf/bpf.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c54a9b56696e584c2b8c7146caac337c063f5516/gas/testsuite/gas/bpf/bpf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c54a9b56696e584c2b8c7146caac337c063f5516/gas/testsuite/gas/bpf/bpf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/bpf/bpf.exp?ref=c54a9b56696e584c2b8c7146caac337c063f5516",
      "patch": "@@ -23,6 +23,7 @@ if {[istarget bpf*-*-*]} {\n     run_dump_test alu32\n     run_dump_test mem\n     run_dump_test jump\n+    run_dump_test jump32\n     run_dump_test call\n     run_dump_test exit\n     run_dump_test atomic"
    },
    {
      "sha": "4f5ae2c5aa303f336072043e0d894bc3b69f62bd",
      "filename": "gas/testsuite/gas/bpf/jump32.d",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c54a9b56696e584c2b8c7146caac337c063f5516/gas/testsuite/gas/bpf/jump32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c54a9b56696e584c2b8c7146caac337c063f5516/gas/testsuite/gas/bpf/jump32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/bpf/jump32.d?ref=c54a9b56696e584c2b8c7146caac337c063f5516",
      "patch": "@@ -0,0 +1,31 @@\n+#as: --EL\n+#objdump: -dr\n+#name: eBPF JUMP32 instructions\n+\n+.*: +file format .*bpf.*\n+\n+Disassembly of section .text:\n+\n+0+ <.text>:\n+   0:\t05 00 03 00 00 00 00 00 \tja 3\n+   8:\t0f 11 00 00 00 00 00 00 \tadd %r1,%r1\n+  10:\t16 03 01 00 03 00 00 00 \tjeq32 %r3,3,1\n+  18:\t1e 43 00 00 00 00 00 00 \tjeq32 %r3,%r4,0\n+  20:\t36 03 fd ff 03 00 00 00 \tjge32 %r3,3,-3\n+  28:\t3e 43 fc ff 00 00 00 00 \tjge32 %r3,%r4,-4\n+  30:\ta6 03 01 00 03 00 00 00 \tjlt32 %r3,3,1\n+  38:\tae 43 00 00 00 00 00 00 \tjlt32 %r3,%r4,0\n+  40:\tb6 03 01 00 03 00 00 00 \tjle32 %r3,3,1\n+  48:\tbe 43 00 00 00 00 00 00 \tjle32 %r3,%r4,0\n+  50:\t46 03 01 00 03 00 00 00 \tjset32 %r3,3,1\n+  58:\t4e 43 00 00 00 00 00 00 \tjset32 %r3,%r4,0\n+  60:\t56 03 01 00 03 00 00 00 \tjne32 %r3,3,1\n+  68:\t5e 43 00 00 00 00 00 00 \tjne32 %r3,%r4,0\n+  70:\t66 03 01 00 03 00 00 00 \tjsgt32 %r3,3,1\n+  78:\t6e 43 00 00 00 00 00 00 \tjsgt32 %r3,%r4,0\n+  80:\t76 03 01 00 03 00 00 00 \tjsge32 %r3,3,1\n+  88:\t7e 43 00 00 00 00 00 00 \tjsge32 %r3,%r4,0\n+  90:\tc6 03 01 00 03 00 00 00 \tjslt32 %r3,3,1\n+  98:\tce 43 00 00 00 00 00 00 \tjslt32 %r3,%r4,0\n+  a0:\td6 03 01 00 03 00 00 00 \tjsle32 %r3,3,1\n+  a8:\tde 43 00 00 00 00 00 00 \tjsle32 %r3,%r4,0"
    },
    {
      "sha": "ffcf4bafcdc995a26dcda7f368be0e9c82bad455",
      "filename": "gas/testsuite/gas/bpf/jump32.s",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c54a9b56696e584c2b8c7146caac337c063f5516/gas/testsuite/gas/bpf/jump32.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c54a9b56696e584c2b8c7146caac337c063f5516/gas/testsuite/gas/bpf/jump32.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/bpf/jump32.s?ref=c54a9b56696e584c2b8c7146caac337c063f5516",
      "patch": "@@ -0,0 +1,25 @@\n+# Tests for the eBPF JUMP32 instructions\n+        .text\n+        ja 2f\n+        add %r1,%r1\n+1:      jeq32 %r3,3,2f\n+        jeq32 %r3,%r4,2f\n+2:      jge32 %r3,3,1b\n+        jge32 %r3,%r4,1b\n+1:      jlt32 %r3,3,1f\n+        jlt32 %r3,%r4,1f\n+1:      jle32 %r3,3,1f\n+        jle32 %r3,%r4,1f\n+1:      jset32 %r3,3,1f\n+        jset32 %r3,%r4,1f\n+1:      jne32 %r3,3,1f\n+        jne32 %r3,%r4,1f\n+1:      jsgt32 %r3,3,1f\n+        jsgt32 %r3,%r4,1f\n+1:      jsge32 %r3,3,1f\n+        jsge32 %r3,%r4,1f\n+1:      jslt32 %r3,3,1f\n+        jslt32 %r3,%r4,1f\n+1:      jsle32 %r3,3,1f\n+        jsle32 %r3,%r4,1f\n+1:      "
    },
    {
      "sha": "1877338f550febe98011e87d06df9d8ee2b12065",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c54a9b56696e584c2b8c7146caac337c063f5516/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c54a9b56696e584c2b8c7146caac337c063f5516/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=c54a9b56696e584c2b8c7146caac337c063f5516",
      "patch": "@@ -1,3 +1,10 @@\n+2020-02-16  David Faust  <david.faust@oracle.com>\n+\n+\t* bpf-desc.c: Regenerate.\n+\t* bpf-desc.h: Likewise.\n+\t* bpf-opc.c: Regenerate.\n+\t* bpf-opc.h: Likewise.\n+\n 2020-04-07  Lili Cui  <lili.cui@intel.com>\n \n \t* i386-dis.c (enum): Add PREFIX_0F01_REG_5_MOD_3_RM_1,"
    },
    {
      "sha": "113f5457b5f3af336f8bfb930be561d9a045ecfd",
      "filename": "opcodes/bpf-desc.c",
      "status": "modified",
      "additions": 220,
      "deletions": 0,
      "changes": 220,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c54a9b56696e584c2b8c7146caac337c063f5516/opcodes/bpf-desc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c54a9b56696e584c2b8c7146caac337c063f5516/opcodes/bpf-desc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-desc.c?ref=c54a9b56696e584c2b8c7146caac337c063f5516",
      "patch": "@@ -1014,6 +1014,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JEQRLE, \"jeqrle\", \"jeq\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n   },\n+/* jeq32 $dstle,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JEQ32ILE, \"jeq32ile\", \"jeq32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n+/* jeq32 $dstle,$srcle,$disp16 */\n+  {\n+    BPF_INSN_JEQ32RLE, \"jeq32rle\", \"jeq32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n /* jgt $dstle,$imm32,$disp16 */\n   {\n     BPF_INSN_JGTILE, \"jgtile\", \"jgt\", 64,\n@@ -1024,6 +1034,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JGTRLE, \"jgtrle\", \"jgt\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n   },\n+/* jgt32 $dstle,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JGT32ILE, \"jgt32ile\", \"jgt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n+/* jgt32 $dstle,$srcle,$disp16 */\n+  {\n+    BPF_INSN_JGT32RLE, \"jgt32rle\", \"jgt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n /* jge $dstle,$imm32,$disp16 */\n   {\n     BPF_INSN_JGEILE, \"jgeile\", \"jge\", 64,\n@@ -1034,6 +1054,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JGERLE, \"jgerle\", \"jge\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n   },\n+/* jge32 $dstle,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JGE32ILE, \"jge32ile\", \"jge32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n+/* jge32 $dstle,$srcle,$disp16 */\n+  {\n+    BPF_INSN_JGE32RLE, \"jge32rle\", \"jge32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n /* jlt $dstle,$imm32,$disp16 */\n   {\n     BPF_INSN_JLTILE, \"jltile\", \"jlt\", 64,\n@@ -1044,6 +1074,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JLTRLE, \"jltrle\", \"jlt\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n   },\n+/* jlt32 $dstle,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JLT32ILE, \"jlt32ile\", \"jlt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n+/* jlt32 $dstle,$srcle,$disp16 */\n+  {\n+    BPF_INSN_JLT32RLE, \"jlt32rle\", \"jlt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n /* jle $dstle,$imm32,$disp16 */\n   {\n     BPF_INSN_JLEILE, \"jleile\", \"jle\", 64,\n@@ -1054,6 +1094,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JLERLE, \"jlerle\", \"jle\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n   },\n+/* jle32 $dstle,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JLE32ILE, \"jle32ile\", \"jle32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n+/* jle32 $dstle,$srcle,$disp16 */\n+  {\n+    BPF_INSN_JLE32RLE, \"jle32rle\", \"jle32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n /* jset $dstle,$imm32,$disp16 */\n   {\n     BPF_INSN_JSETILE, \"jsetile\", \"jset\", 64,\n@@ -1064,6 +1114,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JSETRLE, \"jsetrle\", \"jset\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n   },\n+/* jset32 $dstle,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JSET32ILE, \"jset32ile\", \"jset32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n+/* jset32 $dstle,$srcle,$disp16 */\n+  {\n+    BPF_INSN_JSET32RLE, \"jset32rle\", \"jset32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n /* jne $dstle,$imm32,$disp16 */\n   {\n     BPF_INSN_JNEILE, \"jneile\", \"jne\", 64,\n@@ -1074,6 +1134,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JNERLE, \"jnerle\", \"jne\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n   },\n+/* jne32 $dstle,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JNE32ILE, \"jne32ile\", \"jne32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n+/* jne32 $dstle,$srcle,$disp16 */\n+  {\n+    BPF_INSN_JNE32RLE, \"jne32rle\", \"jne32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n /* jsgt $dstle,$imm32,$disp16 */\n   {\n     BPF_INSN_JSGTILE, \"jsgtile\", \"jsgt\", 64,\n@@ -1084,6 +1154,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JSGTRLE, \"jsgtrle\", \"jsgt\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n   },\n+/* jsgt32 $dstle,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JSGT32ILE, \"jsgt32ile\", \"jsgt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n+/* jsgt32 $dstle,$srcle,$disp16 */\n+  {\n+    BPF_INSN_JSGT32RLE, \"jsgt32rle\", \"jsgt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n /* jsge $dstle,$imm32,$disp16 */\n   {\n     BPF_INSN_JSGEILE, \"jsgeile\", \"jsge\", 64,\n@@ -1094,6 +1174,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JSGERLE, \"jsgerle\", \"jsge\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n   },\n+/* jsge32 $dstle,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JSGE32ILE, \"jsge32ile\", \"jsge32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n+/* jsge32 $dstle,$srcle,$disp16 */\n+  {\n+    BPF_INSN_JSGE32RLE, \"jsge32rle\", \"jsge32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n /* jslt $dstle,$imm32,$disp16 */\n   {\n     BPF_INSN_JSLTILE, \"jsltile\", \"jslt\", 64,\n@@ -1104,6 +1194,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JSLTRLE, \"jsltrle\", \"jslt\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n   },\n+/* jslt32 $dstle,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JSLT32ILE, \"jslt32ile\", \"jslt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n+/* jslt32 $dstle,$srcle,$disp16 */\n+  {\n+    BPF_INSN_JSLT32RLE, \"jslt32rle\", \"jslt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n /* jsle $dstle,$imm32,$disp16 */\n   {\n     BPF_INSN_JSLEILE, \"jsleile\", \"jsle\", 64,\n@@ -1114,6 +1214,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JSLERLE, \"jslerle\", \"jsle\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n   },\n+/* jsle32 $dstle,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JSLE32ILE, \"jsle32ile\", \"jsle32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n+/* jsle32 $dstle,$srcle,$disp16 */\n+  {\n+    BPF_INSN_JSLE32RLE, \"jsle32rle\", \"jsle32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x80\" } } } }\n+  },\n /* jeq $dstbe,$imm32,$disp16 */\n   {\n     BPF_INSN_JEQIBE, \"jeqibe\", \"jeq\", 64,\n@@ -1124,6 +1234,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JEQRBE, \"jeqrbe\", \"jeq\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n   },\n+/* jeq32 $dstbe,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JEQ32IBE, \"jeq32ibe\", \"jeq32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n+/* jeq32 $dstbe,$srcbe,$disp16 */\n+  {\n+    BPF_INSN_JEQ32RBE, \"jeq32rbe\", \"jeq32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n /* jgt $dstbe,$imm32,$disp16 */\n   {\n     BPF_INSN_JGTIBE, \"jgtibe\", \"jgt\", 64,\n@@ -1134,6 +1254,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JGTRBE, \"jgtrbe\", \"jgt\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n   },\n+/* jgt32 $dstbe,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JGT32IBE, \"jgt32ibe\", \"jgt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n+/* jgt32 $dstbe,$srcbe,$disp16 */\n+  {\n+    BPF_INSN_JGT32RBE, \"jgt32rbe\", \"jgt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n /* jge $dstbe,$imm32,$disp16 */\n   {\n     BPF_INSN_JGEIBE, \"jgeibe\", \"jge\", 64,\n@@ -1144,6 +1274,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JGERBE, \"jgerbe\", \"jge\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n   },\n+/* jge32 $dstbe,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JGE32IBE, \"jge32ibe\", \"jge32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n+/* jge32 $dstbe,$srcbe,$disp16 */\n+  {\n+    BPF_INSN_JGE32RBE, \"jge32rbe\", \"jge32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n /* jlt $dstbe,$imm32,$disp16 */\n   {\n     BPF_INSN_JLTIBE, \"jltibe\", \"jlt\", 64,\n@@ -1154,6 +1294,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JLTRBE, \"jltrbe\", \"jlt\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n   },\n+/* jlt32 $dstbe,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JLT32IBE, \"jlt32ibe\", \"jlt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n+/* jlt32 $dstbe,$srcbe,$disp16 */\n+  {\n+    BPF_INSN_JLT32RBE, \"jlt32rbe\", \"jlt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n /* jle $dstbe,$imm32,$disp16 */\n   {\n     BPF_INSN_JLEIBE, \"jleibe\", \"jle\", 64,\n@@ -1164,6 +1314,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JLERBE, \"jlerbe\", \"jle\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n   },\n+/* jle32 $dstbe,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JLE32IBE, \"jle32ibe\", \"jle32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n+/* jle32 $dstbe,$srcbe,$disp16 */\n+  {\n+    BPF_INSN_JLE32RBE, \"jle32rbe\", \"jle32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n /* jset $dstbe,$imm32,$disp16 */\n   {\n     BPF_INSN_JSETIBE, \"jsetibe\", \"jset\", 64,\n@@ -1174,6 +1334,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JSETRBE, \"jsetrbe\", \"jset\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n   },\n+/* jset32 $dstbe,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JSET32IBE, \"jset32ibe\", \"jset32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n+/* jset32 $dstbe,$srcbe,$disp16 */\n+  {\n+    BPF_INSN_JSET32RBE, \"jset32rbe\", \"jset32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n /* jne $dstbe,$imm32,$disp16 */\n   {\n     BPF_INSN_JNEIBE, \"jneibe\", \"jne\", 64,\n@@ -1184,6 +1354,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JNERBE, \"jnerbe\", \"jne\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n   },\n+/* jne32 $dstbe,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JNE32IBE, \"jne32ibe\", \"jne32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n+/* jne32 $dstbe,$srcbe,$disp16 */\n+  {\n+    BPF_INSN_JNE32RBE, \"jne32rbe\", \"jne32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n /* jsgt $dstbe,$imm32,$disp16 */\n   {\n     BPF_INSN_JSGTIBE, \"jsgtibe\", \"jsgt\", 64,\n@@ -1194,6 +1374,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JSGTRBE, \"jsgtrbe\", \"jsgt\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n   },\n+/* jsgt32 $dstbe,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JSGT32IBE, \"jsgt32ibe\", \"jsgt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n+/* jsgt32 $dstbe,$srcbe,$disp16 */\n+  {\n+    BPF_INSN_JSGT32RBE, \"jsgt32rbe\", \"jsgt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n /* jsge $dstbe,$imm32,$disp16 */\n   {\n     BPF_INSN_JSGEIBE, \"jsgeibe\", \"jsge\", 64,\n@@ -1204,6 +1394,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JSGERBE, \"jsgerbe\", \"jsge\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n   },\n+/* jsge32 $dstbe,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JSGE32IBE, \"jsge32ibe\", \"jsge32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n+/* jsge32 $dstbe,$srcbe,$disp16 */\n+  {\n+    BPF_INSN_JSGE32RBE, \"jsge32rbe\", \"jsge32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n /* jslt $dstbe,$imm32,$disp16 */\n   {\n     BPF_INSN_JSLTIBE, \"jsltibe\", \"jslt\", 64,\n@@ -1214,6 +1414,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JSLTRBE, \"jsltrbe\", \"jslt\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n   },\n+/* jslt32 $dstbe,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JSLT32IBE, \"jslt32ibe\", \"jslt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n+/* jslt32 $dstbe,$srcbe,$disp16 */\n+  {\n+    BPF_INSN_JSLT32RBE, \"jslt32rbe\", \"jslt32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n /* jsle $dstbe,$imm32,$disp16 */\n   {\n     BPF_INSN_JSLEIBE, \"jsleibe\", \"jsle\", 64,\n@@ -1224,6 +1434,16 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_JSLERBE, \"jslerbe\", \"jsle\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n   },\n+/* jsle32 $dstbe,$imm32,$disp16 */\n+  {\n+    BPF_INSN_JSLE32IBE, \"jsle32ibe\", \"jsle32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n+/* jsle32 $dstbe,$srcbe,$disp16 */\n+  {\n+    BPF_INSN_JSLE32RBE, \"jsle32rbe\", \"jsle32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x40\" } } } }\n+  },\n /* ja $disp16 */\n   {\n     BPF_INSN_JA, \"ja\", \"ja\", 64,"
    },
    {
      "sha": "38cf8c8e73b57029bcdc9f1c40b7cf953997799f",
      "filename": "opcodes/bpf-desc.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c54a9b56696e584c2b8c7146caac337c063f5516/opcodes/bpf-desc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c54a9b56696e584c2b8c7146caac337c063f5516/opcodes/bpf-desc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-desc.h?ref=c54a9b56696e584c2b8c7146caac337c063f5516",
      "patch": "@@ -80,8 +80,8 @@ typedef enum insn_op_src {\n \n /* Enum declaration for eBPF instruction class.  */\n typedef enum insn_op_class {\n-  OP_CLASS_LD = 0, OP_CLASS_LDX = 1, OP_CLASS_ST = 2, OP_CLASS_STX = 3\n- , OP_CLASS_ALU = 4, OP_CLASS_JMP = 5, OP_CLASS_ALU64 = 7\n+  OP_CLASS_LD, OP_CLASS_LDX, OP_CLASS_ST, OP_CLASS_STX\n+ , OP_CLASS_ALU, OP_CLASS_JMP, OP_CLASS_JMP32, OP_CLASS_ALU64\n } INSN_OP_CLASS;\n \n /* Enum declaration for eBPF load/store instruction modes.  */"
    },
    {
      "sha": "a64da6875d912259099bcd84e028a9e3102a6ada",
      "filename": "opcodes/bpf-opc.c",
      "status": "modified",
      "additions": 264,
      "deletions": 0,
      "changes": 264,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c54a9b56696e584c2b8c7146caac337c063f5516/opcodes/bpf-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c54a9b56696e584c2b8c7146caac337c063f5516/opcodes/bpf-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-opc.c?ref=c54a9b56696e584c2b8c7146caac337c063f5516",
      "patch": "@@ -1024,6 +1024,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrle, { 0x1d }\n   },\n+/* jeq32 $dstle,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqile, { 0x16 }\n+  },\n+/* jeq32 $dstle,$srcle,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrle, { 0x1e }\n+  },\n /* jgt $dstle,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1036,6 +1048,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrle, { 0x2d }\n   },\n+/* jgt32 $dstle,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqile, { 0x26 }\n+  },\n+/* jgt32 $dstle,$srcle,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrle, { 0x2e }\n+  },\n /* jge $dstle,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1048,6 +1072,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrle, { 0x3d }\n   },\n+/* jge32 $dstle,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqile, { 0x36 }\n+  },\n+/* jge32 $dstle,$srcle,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrle, { 0x3e }\n+  },\n /* jlt $dstle,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1060,6 +1096,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrle, { 0xad }\n   },\n+/* jlt32 $dstle,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqile, { 0xa6 }\n+  },\n+/* jlt32 $dstle,$srcle,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrle, { 0xae }\n+  },\n /* jle $dstle,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1072,6 +1120,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrle, { 0xbd }\n   },\n+/* jle32 $dstle,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqile, { 0xb6 }\n+  },\n+/* jle32 $dstle,$srcle,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrle, { 0xbe }\n+  },\n /* jset $dstle,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1084,6 +1144,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrle, { 0x4d }\n   },\n+/* jset32 $dstle,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqile, { 0x46 }\n+  },\n+/* jset32 $dstle,$srcle,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrle, { 0x4e }\n+  },\n /* jne $dstle,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1096,6 +1168,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrle, { 0x5d }\n   },\n+/* jne32 $dstle,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqile, { 0x56 }\n+  },\n+/* jne32 $dstle,$srcle,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrle, { 0x5e }\n+  },\n /* jsgt $dstle,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1108,6 +1192,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrle, { 0x6d }\n   },\n+/* jsgt32 $dstle,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqile, { 0x66 }\n+  },\n+/* jsgt32 $dstle,$srcle,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrle, { 0x6e }\n+  },\n /* jsge $dstle,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1120,6 +1216,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrle, { 0x7d }\n   },\n+/* jsge32 $dstle,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqile, { 0x76 }\n+  },\n+/* jsge32 $dstle,$srcle,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrle, { 0x7e }\n+  },\n /* jslt $dstle,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1132,6 +1240,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrle, { 0xcd }\n   },\n+/* jslt32 $dstle,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqile, { 0xc6 }\n+  },\n+/* jslt32 $dstle,$srcle,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrle, { 0xce }\n+  },\n /* jsle $dstle,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1144,6 +1264,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrle, { 0xdd }\n   },\n+/* jsle32 $dstle,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqile, { 0xd6 }\n+  },\n+/* jsle32 $dstle,$srcle,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrle, { 0xde }\n+  },\n /* jeq $dstbe,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1156,6 +1288,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrbe, { 0x1d }\n   },\n+/* jeq32 $dstbe,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqibe, { 0x16 }\n+  },\n+/* jeq32 $dstbe,$srcbe,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrbe, { 0x1e }\n+  },\n /* jgt $dstbe,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1168,6 +1312,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrbe, { 0x2d }\n   },\n+/* jgt32 $dstbe,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqibe, { 0x26 }\n+  },\n+/* jgt32 $dstbe,$srcbe,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrbe, { 0x2e }\n+  },\n /* jge $dstbe,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1180,6 +1336,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrbe, { 0x3d }\n   },\n+/* jge32 $dstbe,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqibe, { 0x36 }\n+  },\n+/* jge32 $dstbe,$srcbe,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrbe, { 0x3e }\n+  },\n /* jlt $dstbe,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1192,6 +1360,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrbe, { 0xad }\n   },\n+/* jlt32 $dstbe,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqibe, { 0xa6 }\n+  },\n+/* jlt32 $dstbe,$srcbe,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrbe, { 0xae }\n+  },\n /* jle $dstbe,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1204,6 +1384,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrbe, { 0xbd }\n   },\n+/* jle32 $dstbe,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqibe, { 0xb6 }\n+  },\n+/* jle32 $dstbe,$srcbe,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrbe, { 0xbe }\n+  },\n /* jset $dstbe,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1216,6 +1408,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrbe, { 0x4d }\n   },\n+/* jset32 $dstbe,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqibe, { 0x46 }\n+  },\n+/* jset32 $dstbe,$srcbe,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrbe, { 0x4e }\n+  },\n /* jne $dstbe,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1228,6 +1432,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrbe, { 0x5d }\n   },\n+/* jne32 $dstbe,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqibe, { 0x56 }\n+  },\n+/* jne32 $dstbe,$srcbe,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrbe, { 0x5e }\n+  },\n /* jsgt $dstbe,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1240,6 +1456,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrbe, { 0x6d }\n   },\n+/* jsgt32 $dstbe,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqibe, { 0x66 }\n+  },\n+/* jsgt32 $dstbe,$srcbe,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrbe, { 0x6e }\n+  },\n /* jsge $dstbe,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1252,6 +1480,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrbe, { 0x7d }\n   },\n+/* jsge32 $dstbe,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqibe, { 0x76 }\n+  },\n+/* jsge32 $dstbe,$srcbe,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrbe, { 0x7e }\n+  },\n /* jslt $dstbe,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1264,6 +1504,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrbe, { 0xcd }\n   },\n+/* jslt32 $dstbe,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqibe, { 0xc6 }\n+  },\n+/* jslt32 $dstbe,$srcbe,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrbe, { 0xce }\n+  },\n /* jsle $dstbe,$imm32,$disp16 */\n   {\n     { 0, 0, 0, 0 },\n@@ -1276,6 +1528,18 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n     & ifmt_jeqrbe, { 0xdd }\n   },\n+/* jsle32 $dstbe,$imm32,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqibe, { 0xd6 }\n+  },\n+/* jsle32 $dstbe,$srcbe,$disp16 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), ',', OP (DISP16), 0 } },\n+    & ifmt_jeqrbe, { 0xde }\n+  },\n /* ja $disp16 */\n   {\n     { 0, 0, 0, 0 },"
    },
    {
      "sha": "2dedae476e4af47ca0d0cc3e7ccda7a4dc8387f0",
      "filename": "opcodes/bpf-opc.h",
      "status": "modified",
      "additions": 22,
      "deletions": 11,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c54a9b56696e584c2b8c7146caac337c063f5516/opcodes/bpf-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c54a9b56696e584c2b8c7146caac337c063f5516/opcodes/bpf-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-opc.h?ref=c54a9b56696e584c2b8c7146caac337c063f5516",
      "patch": "@@ -84,17 +84,28 @@ typedef enum cgen_insn_type {\n  , BPF_INSN_STXHBE, BPF_INSN_STXBBE, BPF_INSN_STXDWBE, BPF_INSN_STBLE\n  , BPF_INSN_STHLE, BPF_INSN_STWLE, BPF_INSN_STDWLE, BPF_INSN_STBBE\n  , BPF_INSN_STHBE, BPF_INSN_STWBE, BPF_INSN_STDWBE, BPF_INSN_JEQILE\n- , BPF_INSN_JEQRLE, BPF_INSN_JGTILE, BPF_INSN_JGTRLE, BPF_INSN_JGEILE\n- , BPF_INSN_JGERLE, BPF_INSN_JLTILE, BPF_INSN_JLTRLE, BPF_INSN_JLEILE\n- , BPF_INSN_JLERLE, BPF_INSN_JSETILE, BPF_INSN_JSETRLE, BPF_INSN_JNEILE\n- , BPF_INSN_JNERLE, BPF_INSN_JSGTILE, BPF_INSN_JSGTRLE, BPF_INSN_JSGEILE\n- , BPF_INSN_JSGERLE, BPF_INSN_JSLTILE, BPF_INSN_JSLTRLE, BPF_INSN_JSLEILE\n- , BPF_INSN_JSLERLE, BPF_INSN_JEQIBE, BPF_INSN_JEQRBE, BPF_INSN_JGTIBE\n- , BPF_INSN_JGTRBE, BPF_INSN_JGEIBE, BPF_INSN_JGERBE, BPF_INSN_JLTIBE\n- , BPF_INSN_JLTRBE, BPF_INSN_JLEIBE, BPF_INSN_JLERBE, BPF_INSN_JSETIBE\n- , BPF_INSN_JSETRBE, BPF_INSN_JNEIBE, BPF_INSN_JNERBE, BPF_INSN_JSGTIBE\n- , BPF_INSN_JSGTRBE, BPF_INSN_JSGEIBE, BPF_INSN_JSGERBE, BPF_INSN_JSLTIBE\n- , BPF_INSN_JSLTRBE, BPF_INSN_JSLEIBE, BPF_INSN_JSLERBE, BPF_INSN_JA\n+ , BPF_INSN_JEQRLE, BPF_INSN_JEQ32ILE, BPF_INSN_JEQ32RLE, BPF_INSN_JGTILE\n+ , BPF_INSN_JGTRLE, BPF_INSN_JGT32ILE, BPF_INSN_JGT32RLE, BPF_INSN_JGEILE\n+ , BPF_INSN_JGERLE, BPF_INSN_JGE32ILE, BPF_INSN_JGE32RLE, BPF_INSN_JLTILE\n+ , BPF_INSN_JLTRLE, BPF_INSN_JLT32ILE, BPF_INSN_JLT32RLE, BPF_INSN_JLEILE\n+ , BPF_INSN_JLERLE, BPF_INSN_JLE32ILE, BPF_INSN_JLE32RLE, BPF_INSN_JSETILE\n+ , BPF_INSN_JSETRLE, BPF_INSN_JSET32ILE, BPF_INSN_JSET32RLE, BPF_INSN_JNEILE\n+ , BPF_INSN_JNERLE, BPF_INSN_JNE32ILE, BPF_INSN_JNE32RLE, BPF_INSN_JSGTILE\n+ , BPF_INSN_JSGTRLE, BPF_INSN_JSGT32ILE, BPF_INSN_JSGT32RLE, BPF_INSN_JSGEILE\n+ , BPF_INSN_JSGERLE, BPF_INSN_JSGE32ILE, BPF_INSN_JSGE32RLE, BPF_INSN_JSLTILE\n+ , BPF_INSN_JSLTRLE, BPF_INSN_JSLT32ILE, BPF_INSN_JSLT32RLE, BPF_INSN_JSLEILE\n+ , BPF_INSN_JSLERLE, BPF_INSN_JSLE32ILE, BPF_INSN_JSLE32RLE, BPF_INSN_JEQIBE\n+ , BPF_INSN_JEQRBE, BPF_INSN_JEQ32IBE, BPF_INSN_JEQ32RBE, BPF_INSN_JGTIBE\n+ , BPF_INSN_JGTRBE, BPF_INSN_JGT32IBE, BPF_INSN_JGT32RBE, BPF_INSN_JGEIBE\n+ , BPF_INSN_JGERBE, BPF_INSN_JGE32IBE, BPF_INSN_JGE32RBE, BPF_INSN_JLTIBE\n+ , BPF_INSN_JLTRBE, BPF_INSN_JLT32IBE, BPF_INSN_JLT32RBE, BPF_INSN_JLEIBE\n+ , BPF_INSN_JLERBE, BPF_INSN_JLE32IBE, BPF_INSN_JLE32RBE, BPF_INSN_JSETIBE\n+ , BPF_INSN_JSETRBE, BPF_INSN_JSET32IBE, BPF_INSN_JSET32RBE, BPF_INSN_JNEIBE\n+ , BPF_INSN_JNERBE, BPF_INSN_JNE32IBE, BPF_INSN_JNE32RBE, BPF_INSN_JSGTIBE\n+ , BPF_INSN_JSGTRBE, BPF_INSN_JSGT32IBE, BPF_INSN_JSGT32RBE, BPF_INSN_JSGEIBE\n+ , BPF_INSN_JSGERBE, BPF_INSN_JSGE32IBE, BPF_INSN_JSGE32RBE, BPF_INSN_JSLTIBE\n+ , BPF_INSN_JSLTRBE, BPF_INSN_JSLT32IBE, BPF_INSN_JSLT32RBE, BPF_INSN_JSLEIBE\n+ , BPF_INSN_JSLERBE, BPF_INSN_JSLE32IBE, BPF_INSN_JSLE32RBE, BPF_INSN_JA\n  , BPF_INSN_CALL, BPF_INSN_EXIT, BPF_INSN_XADDDWLE, BPF_INSN_XADDWLE\n  , BPF_INSN_XADDDWBE, BPF_INSN_XADDWBE\n } CGEN_INSN_TYPE;"
    }
  ]
}