{
  "sha": "ef0478f6112ede4da9b70e07aa3124f0d2faf108",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWYwNDc4ZjYxMTJlZGU0ZGE5YjcwZTA3YWEzMTI0ZjBkMmZhZjEwOA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:23Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:23Z"
    },
    "message": "gdbserver/linux-low: start turning linux target ops into methods\n\nThis is the beginning of a series of patches that convert the linux\nlow targets into classes derived from linux_process_target.  At the\nend of the series we obtain a class hierarchy that looks like this:\n\nprocess_stratum_target\n^\n|\n|-- linux_process_target\n    ^\n    |\n    |-- x86_target (defined in linux-x86-low)\n    |-- aarch64_target (defined in linux-aarch64-low)\n    |-- ppc_target (defined in linux-ppc-low)\n    |-- ...\n\nIn several cases, linux_process_target simply forwards a target op\nrequest to a corresponding linux_target_ops function.  For these\ncases, the definition in linux_process_target will be removed and the\ndefinition will be left to the deriving linux low target class; using\ninheritance provides a nice and natural, object-oriented\nsimplification in these cases.\n\nThe series converts linux_target_ops into protected methods of\nlinux_process_target one by one.  Throughout the series, based on the\nneeds, static functions defined in linux-low.cc are converted to\nprivate methods of linux_process_target as well.  This is done either\nas separate patches or as integrated into a patch that convert a\nparticular linux_target_op into a method.\n\nThe series ends with the patch titled \"gdbserver/linux-low: delete\n'linux_target_ops' and 'the_low_target'\".\n\nBuilt and regression-tested on x86_64-linux.  The following linux low\ntargets have been built (but not tested) via cross-compilation:\naarch64, arm, m68k, mips, ppc, riscv, s390, sh, sparc.  The other\ntargets (bfin, cris, crisv32, ia64, m32r, nios2, tic6x, tile, xtensa)\nwere neither built nor tested.\n\ngdbserver/ChangeLog:\n2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* linux-low.h (the_linux_target): New extern declaration.\n\t* linux-low.cc (initialize_low): Use 'the_linux_target' to set\n\t'the_target'.\n\t(the_linux_target): Remove.\n\t* linux-x86-low.cc (class x86_target): New class.\n\t(the_x86_target): New static object.\n\t(the_linux_target): Define as pointer to the_x86_target.\n\t* linux-aarch64-low.cc (class aarch64_target): New class.\n\t(the_aarch64_target): New static object.\n\t(the_linux_target): Define as pointer to the_aarch64_target.\n\t* linux-arm-low.cc (class arm_target): New class.\n\t(the_arm_target): New static object.\n\t(the_linux_target): Define as pointer to the_arm_target.\n\t* linux-bfin-low.cc (class bfin_target): New class.\n\t(the_bfin_target): New static object.\n\t(the_linux_target): Define as pointer to the_bfin_target.\n\t* linux-cris-low.cc (class cris_target): New class.\n\t(the_cris_target): New static object.\n\t(the_linux_target): Define as pointer to the_cris_target.\n\t* linux-crisv32-low.cc (class crisv32_target): New class.\n\t(the_crisv32_target): New static object.\n\t(the_linux_target): Define as pointer to the_crisv32_target.\n\t* linux-ia64-low.cc (class ia64_target): New class.\n\t(the_ia64_target): New static object.\n\t(the_linux_target): Define as pointer to the_ia64_target.\n\t* linux-m32r-low.cc (class m32r_target): New class.\n\t(the_m32r_target): New static object.\n\t(the_linux_target): Define as pointer to the_m32r_target.\n\t* linux-m68k-low.cc (class m68k_target): New class.\n\t(the_m68k_target): New static object.\n\t(the_linux_target): Define as pointer to the_m68k_target.\n\t* linux-mips-low.cc (class mips_target): New class.\n\t(the_mips_target): New static object.\n\t(the_linux_target): Define as pointer to the_mips_target.\n\t* linux-nios2-low.cc (class nios2_target): New class.\n\t(the_nios2_target): New static object.\n\t(the_linux_target): Define as pointer to the_nios2_target.\n\t* linux-ppc-low.cc (class ppc_target): New class.\n\t(the_ppc_target): New static object.\n\t(the_linux_target): Define as pointer to the_ppc_target.\n\t* linux-riscv-low.cc (class riscv_target): New class.\n\t(the_riscv_target): New static object.\n\t(the_linux_target): Define as pointer to the_riscv_target.\n\t* linux-s390-low.cc (class s390_target): New class.\n\t(the_s390_target): New static object.\n\t(the_linux_target): Define as pointer to the_s390_target.\n\t* linux-sh-low.cc (class sh_target): New class.\n\t(the_sh_target): New static object.\n\t(the_linux_target): Define as pointer to the_sh_target.\n\t* linux-sparc-low.cc (class sparc_target): New class.\n\t(the_sparc_target): New static object.\n\t(the_linux_target): Define as pointer to the_sparc_target.\n\t* linux-tic6x-low.cc (class tic6x_target): New class.\n\t(the_tic6x_target): New static object.\n\t(the_linux_target): Define as pointer to the_tic6x_target.\n\t* linux-tile-low.cc (class tile_target): New class.\n\t(the_tile_target): New static object.\n\t(the_linux_target): Define as pointer to the_tile_target.\n\t* linux-xtensa-low.cc (class xtensa_target): New class.\n\t(the_xtensa_target): New static object.\n\t(the_linux_target): Define as pointer to the_xtensa_target.",
    "tree": {
      "sha": "b918c66646b890f6cf60acd5ac497410147d9a77",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b918c66646b890f6cf60acd5ac497410147d9a77"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ef0478f6112ede4da9b70e07aa3124f0d2faf108",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef0478f6112ede4da9b70e07aa3124f0d2faf108",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ef0478f6112ede4da9b70e07aa3124f0d2faf108",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef0478f6112ede4da9b70e07aa3124f0d2faf108/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d16f3f6c70dfc71bc239cac4f49be34c94c366ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d16f3f6c70dfc71bc239cac4f49be34c94c366ad",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d16f3f6c70dfc71bc239cac4f49be34c94c366ad"
    }
  ],
  "stats": {
    "total": 379,
    "additions": 374,
    "deletions": 5
  },
  "files": [
    {
      "sha": "b55589fcde94749a25145791072800e0b1ce7abb",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -1,3 +1,67 @@\n+2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* linux-low.h (the_linux_target): New extern declaration.\n+\t* linux-low.cc (initialize_low): Use 'the_linux_target' to set\n+\t'the_target'.\n+\t(the_linux_target): Remove.\n+\t* linux-x86-low.cc (class x86_target): New class.\n+\t(the_x86_target): New static object.\n+\t(the_linux_target): Define as pointer to the_x86_target.\n+\t* linux-aarch64-low.cc (class aarch64_target): New class.\n+\t(the_aarch64_target): New static object.\n+\t(the_linux_target): Define as pointer to the_aarch64_target.\n+\t* linux-arm-low.cc (class arm_target): New class.\n+\t(the_arm_target): New static object.\n+\t(the_linux_target): Define as pointer to the_arm_target.\n+\t* linux-bfin-low.cc (class bfin_target): New class.\n+\t(the_bfin_target): New static object.\n+\t(the_linux_target): Define as pointer to the_bfin_target.\n+\t* linux-cris-low.cc (class cris_target): New class.\n+\t(the_cris_target): New static object.\n+\t(the_linux_target): Define as pointer to the_cris_target.\n+\t* linux-crisv32-low.cc (class crisv32_target): New class.\n+\t(the_crisv32_target): New static object.\n+\t(the_linux_target): Define as pointer to the_crisv32_target.\n+\t* linux-ia64-low.cc (class ia64_target): New class.\n+\t(the_ia64_target): New static object.\n+\t(the_linux_target): Define as pointer to the_ia64_target.\n+\t* linux-m32r-low.cc (class m32r_target): New class.\n+\t(the_m32r_target): New static object.\n+\t(the_linux_target): Define as pointer to the_m32r_target.\n+\t* linux-m68k-low.cc (class m68k_target): New class.\n+\t(the_m68k_target): New static object.\n+\t(the_linux_target): Define as pointer to the_m68k_target.\n+\t* linux-mips-low.cc (class mips_target): New class.\n+\t(the_mips_target): New static object.\n+\t(the_linux_target): Define as pointer to the_mips_target.\n+\t* linux-nios2-low.cc (class nios2_target): New class.\n+\t(the_nios2_target): New static object.\n+\t(the_linux_target): Define as pointer to the_nios2_target.\n+\t* linux-ppc-low.cc (class ppc_target): New class.\n+\t(the_ppc_target): New static object.\n+\t(the_linux_target): Define as pointer to the_ppc_target.\n+\t* linux-riscv-low.cc (class riscv_target): New class.\n+\t(the_riscv_target): New static object.\n+\t(the_linux_target): Define as pointer to the_riscv_target.\n+\t* linux-s390-low.cc (class s390_target): New class.\n+\t(the_s390_target): New static object.\n+\t(the_linux_target): Define as pointer to the_s390_target.\n+\t* linux-sh-low.cc (class sh_target): New class.\n+\t(the_sh_target): New static object.\n+\t(the_linux_target): Define as pointer to the_sh_target.\n+\t* linux-sparc-low.cc (class sparc_target): New class.\n+\t(the_sparc_target): New static object.\n+\t(the_linux_target): Define as pointer to the_sparc_target.\n+\t* linux-tic6x-low.cc (class tic6x_target): New class.\n+\t(the_tic6x_target): New static object.\n+\t(the_linux_target): Define as pointer to the_tic6x_target.\n+\t* linux-tile-low.cc (class tile_target): New class.\n+\t(the_tile_target): New static object.\n+\t(the_linux_target): Define as pointer to the_tile_target.\n+\t* linux-xtensa-low.cc (class xtensa_target): New class.\n+\t(the_xtensa_target): New static object.\n+\t(the_linux_target): Define as pointer to the_xtensa_target.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn some static functions in linux-low.cc into private methods of"
    },
    {
      "sha": "102b61ef9cb1f39f7a74a12a7ad4af83be7d27e1",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -49,6 +49,18 @@\n #include <sys/reg.h>\n #endif\n \n+/* Linux target op definitions for the AArch64 architecture.  */\n+\n+class aarch64_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static aarch64_target the_aarch64_target;\n+\n /* Per-process arch-specific data we want to keep.  */\n \n struct arch_process_info\n@@ -3088,6 +3100,10 @@ struct linux_target_ops the_low_target =\n   aarch64_get_syscall_trapinfo,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_aarch64_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "7ecedb8f6efae5d4ae4265bc404d6c039cc02115",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -54,6 +54,18 @@\n #define PTRACE_SETHBPREGS 30\n #endif\n \n+/* Linux target op definitions for the ARM architecture.  */\n+\n+class arm_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static arm_target the_arm_target;\n+\n /* Information describing the hardware breakpoint capabilities.  */\n static struct\n {\n@@ -1044,6 +1056,10 @@ struct linux_target_ops the_low_target = {\n   arm_get_syscall_trapinfo,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_arm_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "c8c238abca75e169f4a9bc40a27c554a9cc9b6be",
      "filename": "gdbserver/linux-bfin-low.cc",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-bfin-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-bfin-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-bfin-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -23,6 +23,18 @@\n #include \"linux-low.h\"\n #include <asm/ptrace.h>\n \n+/* Linux target op definitions for the BFIN architecture.  */\n+\n+class bfin_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static bfin_target the_bfin_target;\n+\n /* Defined in auto-generated file reg-bfin.c.  */\n void init_registers_bfin (void);\n extern const struct target_desc *tdesc_bfin;\n@@ -151,6 +163,9 @@ struct linux_target_ops the_low_target = {\n   bfin_supports_hardware_single_step,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_bfin_target;\n \n void\n initialize_low_arch (void)"
    },
    {
      "sha": "d2735b4f4597e606eee5aef98e8443cfcdfb4b3e",
      "filename": "gdbserver/linux-cris-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-cris-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-cris-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-cris-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -20,6 +20,18 @@\n #include \"linux-low.h\"\n #include \"nat/gdb_ptrace.h\"\n \n+/* Linux target op definitions for the CRIS architecture.  */\n+\n+class cris_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static cris_target the_cris_target;\n+\n /* Defined in auto-generated file reg-cris.c.  */\n void init_registers_cris (void);\n extern const struct target_desc *tdesc_cris;\n@@ -125,6 +137,10 @@ struct linux_target_ops the_low_target = {\n   cris_breakpoint_at,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_cris_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "346e2a4219e2725a79b747bd3c97ab990c1b76d3",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -20,6 +20,18 @@\n #include \"linux-low.h\"\n #include \"nat/gdb_ptrace.h\"\n \n+/* Linux target op definitions for the CRIS architecture.  */\n+\n+class crisv32_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static crisv32_target the_crisv32_target;\n+\n /* Defined in auto-generated file reg-crisv32.c.  */\n void init_registers_crisv32 (void);\n extern const struct target_desc *tdesc_crisv32;\n@@ -431,6 +443,10 @@ struct linux_target_ops the_low_target = {\n   cris_supports_hardware_single_step,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_crisv32_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "169a567d67b5216ceef4a14787056e2f56650f68",
      "filename": "gdbserver/linux-ia64-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-ia64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-ia64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ia64-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -23,6 +23,18 @@\n #include <sys/reg.h>\n #endif\n \n+/* Linux target op definitions for the IA64 architecture.  */\n+\n+class ia64_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static ia64_target the_ia64_target;\n+\n /* Defined in auto-generated file reg-ia64.c.  */\n void init_registers_ia64 (void);\n extern const struct target_desc *tdesc_ia64;\n@@ -353,6 +365,10 @@ struct linux_target_ops the_low_target = {\n   ia64_fetch_register,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_ia64_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "d399ea5c3d8985d0fe47059313f1ac6e0b5c07fb",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -7444,10 +7444,6 @@ linux_get_hwcap2 (int wordsize)\n   return hwcap2;\n }\n \n-/* The linux target ops object.  */\n-\n-static linux_process_target the_linux_target;\n-\n #ifdef HAVE_LINUX_REGSETS\n void\n initialize_regsets_info (struct regsets_info *info)\n@@ -7465,7 +7461,7 @@ initialize_low (void)\n   struct sigaction sigchld_action;\n \n   memset (&sigchld_action, 0, sizeof (sigchld_action));\n-  set_target_ops (&the_linux_target);\n+  set_target_ops (the_linux_target);\n \n   linux_ptrace_init_warnings ();\n   linux_proc_init_warnings ();"
    },
    {
      "sha": "0af3c3cc387858b23a5d65315fe58ebc87b33728",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -563,8 +563,13 @@ class linux_process_target : public process_stratum_target\n \n   /* Move THREAD out of the jump pad.  */\n   void move_out_of_jump_pad (thread_info *thread);\n+\n+protected:\n+  /* The architecture-specific \"low\" methods are listed below.  */\n };\n \n+extern linux_process_target *the_linux_target;\n+\n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))\n #define get_lwp_thread(lwp) ((lwp)->thread)\n "
    },
    {
      "sha": "3921d450e0b7fd42c7b956a81837185f99ce8387",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -23,6 +23,18 @@\n #include <sys/reg.h>\n #endif\n \n+/* Linux target op definitions for the m32r architecture.  */\n+\n+class m32r_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static m32r_target the_m32r_target;\n+\n /* Defined in auto-generated file reg-m32r.c.  */\n void init_registers_m32r (void);\n extern const struct target_desc *tdesc_m32r;\n@@ -150,6 +162,10 @@ struct linux_target_ops the_low_target = {\n   m32r_supports_hardware_single_step,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_m32r_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "21bd5334a2b85554a64a7af23b52e5bbbbc7816d",
      "filename": "gdbserver/linux-m68k-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-m68k-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-m68k-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m68k-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -19,6 +19,18 @@\n #include \"server.h\"\n #include \"linux-low.h\"\n \n+/* Linux target op definitions for the m68k architecture.  */\n+\n+class m68k_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static m68k_target the_m68k_target;\n+\n /* Defined in auto-generated file reg-m68k.c.  */\n void init_registers_m68k (void);\n extern const struct target_desc *tdesc_m68k;\n@@ -245,6 +257,10 @@ struct linux_target_ops the_low_target = {\n   m68k_supports_hardware_single_step,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_m68k_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "debe115ea77dde5ba4bf3168b524c1bab22afd51",
      "filename": "gdbserver/linux-mips-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-mips-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-mips-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-mips-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -25,6 +25,18 @@\n #include \"nat/mips-linux-watch.h\"\n #include \"gdb_proc_service.h\"\n \n+/* Linux target op definitions for the MIPS architecture.  */\n+\n+class mips_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static mips_target the_mips_target;\n+\n /* Defined in auto-generated file mips-linux.c.  */\n void init_registers_mips_linux (void);\n extern const struct target_desc *tdesc_mips_linux;\n@@ -965,6 +977,10 @@ struct linux_target_ops the_low_target = {\n   mips_linux_prepare_to_resume\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_mips_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "09f8778f293dea693641d1dc776ddaeb32f35094",
      "filename": "gdbserver/linux-nios2-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-nios2-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-nios2-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-nios2-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -31,6 +31,18 @@\n #define PTRACE_GET_THREAD_AREA 25\n #endif\n \n+/* Linux target op definitions for the NIOS II architecture.  */\n+\n+class nios2_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static nios2_target the_nios2_target;\n+\n /* The following definition must agree with the number of registers\n    defined in \"struct user_regs\" in GLIBC\n    (sysdeps/unix/sysv/linux/nios2/sys/user.h), and also with\n@@ -250,6 +262,10 @@ struct linux_target_ops the_low_target =\n   nios2_breakpoint_at,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_nios2_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "a0f1ba09936358f0caa620ed268160a3245cc53b",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -44,6 +44,18 @@\n #define PPC_LI(insn)\t(PPC_SEXT (PPC_FIELD (insn, 6, 24), 24) << 2)\n #define PPC_BD(insn)\t(PPC_SEXT (PPC_FIELD (insn, 16, 14), 14) << 2)\n \n+/* Linux target op definitions for the PowerPC architecture.  */\n+\n+class ppc_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static ppc_target the_ppc_target;\n+\n /* Holds the AT_HWCAP auxv entry.  */\n \n static unsigned long ppc_hwcap;\n@@ -3410,6 +3422,10 @@ struct linux_target_ops the_low_target = {\n   ppc_get_ipa_tdesc_idx,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_ppc_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "04f3a99f46fdd3c9175227cb9e835a6465f081d4",
      "filename": "gdbserver/linux-riscv-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-riscv-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-riscv-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-riscv-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -30,6 +30,18 @@\n # define NFPREG 33\n #endif\n \n+/* Linux target op definitions for the RISC-V architecture.  */\n+\n+class riscv_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static riscv_target the_riscv_target;\n+\n /* Implementation of linux_target_ops method \"arch_setup\".  */\n \n static void\n@@ -270,6 +282,10 @@ struct linux_target_ops the_low_target =\n   riscv_breakpoint_at,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_riscv_target;\n+\n /* Initialize the RISC-V/Linux target.  */\n \n void"
    },
    {
      "sha": "17aa9d0231e7e62d22a40e1b0552b66aade44c4a",
      "filename": "gdbserver/linux-s390-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-s390-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-s390-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-s390-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -51,6 +51,18 @@\n \n #define s390_num_regs 52\n \n+/* Linux target op definitions for the S/390 architecture.  */\n+\n+class s390_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static s390_target the_s390_target;\n+\n static int s390_regmap[] = {\n   PT_PSWMASK, PT_PSWADDR,\n \n@@ -2830,6 +2842,10 @@ struct linux_target_ops the_low_target = {\n   s390_get_ipa_tdesc_idx,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_s390_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "ab82ee37b2cdd08704b9ec86aeacb8ec54980fd5",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -19,6 +19,18 @@\n #include \"server.h\"\n #include \"linux-low.h\"\n \n+/* Linux target op definitions for the SH architecture.  */\n+\n+class sh_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static sh_target the_sh_target;\n+\n /* Defined in auto-generated file reg-sh.c.  */\n void init_registers_sh (void);\n extern const struct target_desc *tdesc_sh;\n@@ -180,6 +192,10 @@ struct linux_target_ops the_low_target = {\n   sh_supports_hardware_single_step,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_sh_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "cc4f551123b2cf4831e94aa97cd800eafd0f18bd",
      "filename": "gdbserver/linux-sparc-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-sparc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-sparc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sparc-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -42,6 +42,18 @@\n #define sparc_num_regs \\\n   (SPARC_R_REGS_NUM + SPARC_F_REGS_NUM + SPARC_CONTROL_REGS_NUM)\n \n+/* Linux target op definitions for the SPARC architecture.  */\n+\n+class sparc_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static sparc_target the_sparc_target;\n+\n /* Each offset is multiplied by 8, because of the register size.\n    These offsets apply to the buffer sent/filled by ptrace.\n    Additionally, the array elements order corresponds to the .dat file, and the\n@@ -316,6 +328,10 @@ struct linux_target_ops the_low_target = {\n   NULL, NULL\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_sparc_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "4c621c04982ba5fdc7d6bd109d7497e5b0ba7b34",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -38,6 +38,18 @@\n \n #include <asm/ptrace.h>\n \n+/* Linux target op definitions for the TI C6x architecture.  */\n+\n+class tic6x_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static tic6x_target the_tic6x_target;\n+\n /* Defined in auto-generated file tic6x-c64xp-linux.c.  */\n void init_registers_tic6x_c64xp_linux (void);\n extern const struct target_desc *tdesc_tic6x_c64xp_linux;\n@@ -439,6 +451,10 @@ tic6x_tdesc_test ()\n }\n #endif\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_tic6x_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "807a8976fd77b7cb47ba816f58d0ebe7be3bc2b6",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -23,6 +23,18 @@\n #include <arch/abi.h>\n #include \"nat/gdb_ptrace.h\"\n \n+/* Linux target op definitions for the TILE-Gx architecture.  */\n+\n+class tile_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static tile_target the_tile_target;\n+\n /* Defined in auto-generated file reg-tilegx.c.  */\n void init_registers_tilegx (void);\n extern const struct target_desc *tdesc_tilegx;\n@@ -212,6 +224,10 @@ struct linux_target_ops the_low_target =\n   tile_supports_hardware_single_step,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_tile_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "dbfcd255325607531ce825897678167bd632e89f",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -92,6 +92,20 @@ static const char *xmltarget_amd64_linux_no_xml = \"@<target>\\\n #define ARCH_GET_GS 0x1004\n #endif\n \n+/* Linux target op definitions for the x86 architecture.\n+   This is initialized assuming an amd64 target.\n+   'low_arch_setup' will correct it for i386 or amd64 targets.  */\n+\n+class x86_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static x86_target the_x86_target;\n+\n /* Per-process arch-specific data we want to keep.  */\n \n struct arch_process_info\n@@ -2901,6 +2915,10 @@ struct linux_target_ops the_low_target =\n   x86_get_ipa_tdesc_idx,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_x86_target;\n+\n void\n initialize_low_arch (void)\n {"
    },
    {
      "sha": "32146822d4f555f34d5e790b3c966fe00be42dfc",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef0478f6112ede4da9b70e07aa3124f0d2faf108/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=ef0478f6112ede4da9b70e07aa3124f0d2faf108",
      "patch": "@@ -20,6 +20,18 @@\n #include \"server.h\"\n #include \"linux-low.h\"\n \n+/* Linux target op definitions for the Xtensa architecture.  */\n+\n+class xtensa_target : public linux_process_target\n+{\n+public:\n+\n+};\n+\n+/* The singleton target ops object.  */\n+\n+static xtensa_target the_xtensa_target;\n+\n /* Defined in auto-generated file reg-xtensa.c.  */\n void init_registers_xtensa (void);\n extern const struct target_desc *tdesc_xtensa;\n@@ -304,6 +316,9 @@ struct linux_target_ops the_low_target = {\n   xtensa_supports_hardware_single_step,\n };\n \n+/* The linux target ops object.  */\n+\n+linux_process_target *the_linux_target = &the_xtensa_target;\n \n void\n initialize_low_arch (void)"
    }
  ]
}