{
  "sha": "c559d7096b4b1b9c4e8d78cfd67b1892c1836ffb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzU1OWQ3MDk2YjRiMWI5YzRlOGQ3OGNmZDY3YjE4OTJjMTgzNmZmYg==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2019-02-14T03:13:26Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2019-02-14T03:13:26Z"
    },
    "message": "(Windows) remove thread notification for main thread of inferior\n\nThis is a followup on a recent patch which, among other things\nintroduced the exit notification of the main thread in order\nto be symetrical with the fact that a thread notification was\nemitted before signaling its creation.\n\nThis patch takes the opposite approach of removing both creation\nand exit notifications for that main thread, which is consistent\nwith what is done on other platforms such as GNU/Linux for instance.\n\ngdb/ChangeLog\n\n\t* windows-nat.c (windows_add_thread): Add new parameter\n\t\"main_thread_p\" with default value set to false.  Update\n\tfunction documentation as well as all callers.\n\t(windows_delete_thread): Likewise.\n\t(fake_create_process): Update call to windows_add_thread.\n\t(get_windows_debug_event) <CREATE_THREAD_DEBUG_EVENT>\n\t<CREATE_PROCESS_DEBUG_EVENT>: Likewise.\n\t<EXIT_THREAD_DEBUG_EVENT, EXIT_PROCESS_DEBUG_EVENT>: Update\n\tcall to windows_delete_thread.\n\nTested on x86-windows (MinGW) using AdaCore's testsuite.",
    "tree": {
      "sha": "4933cddfa84007c66fc86caa4bb6ae2ca6d581f7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4933cddfa84007c66fc86caa4bb6ae2ca6d581f7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c559d7096b4b1b9c4e8d78cfd67b1892c1836ffb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c559d7096b4b1b9c4e8d78cfd67b1892c1836ffb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c559d7096b4b1b9c4e8d78cfd67b1892c1836ffb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c559d7096b4b1b9c4e8d78cfd67b1892c1836ffb/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e6e006612f79f05454e8434ffd0715a1b6b9a6e4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6e006612f79f05454e8434ffd0715a1b6b9a6e4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e6e006612f79f05454e8434ffd0715a1b6b9a6e4"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 69,
    "deletions": 21
  },
  "files": [
    {
      "sha": "0dec9b00c0dcd47dabd758a718db5a572f404d7e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c559d7096b4b1b9c4e8d78cfd67b1892c1836ffb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c559d7096b4b1b9c4e8d78cfd67b1892c1836ffb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c559d7096b4b1b9c4e8d78cfd67b1892c1836ffb",
      "patch": "@@ -1,3 +1,15 @@\n+2019-02-14  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* windows-nat.c (windows_add_thread): Add new parameter\n+\t\"main_thread_p\" with default value set to false.  Update\n+\tfunction documentation as well as all callers.\n+\t(windows_delete_thread): Likewise.\n+\t(fake_create_process): Update call to windows_add_thread.\n+\t(get_windows_debug_event) <CREATE_THREAD_DEBUG_EVENT>\n+\t<CREATE_PROCESS_DEBUG_EVENT>: Likewise.\n+\t<EXIT_THREAD_DEBUG_EVENT, EXIT_PROCESS_DEBUG_EVENT>: Update\n+\tcall to windows_delete_thread.\n+\n 2019-02-13  Simon Marchi  <simon.marchi@ericsson.com>\n \n \t* MAINTAINERS: Add Andrew Burgess as global maintainer."
    },
    {
      "sha": "e47fcb1b40a375690345b393d543631a2c625d60",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 57,
      "deletions": 21,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c559d7096b4b1b9c4e8d78cfd67b1892c1836ffb/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c559d7096b4b1b9c4e8d78cfd67b1892c1836ffb/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=c559d7096b4b1b9c4e8d78cfd67b1892c1836ffb",
      "patch": "@@ -426,9 +426,16 @@ thread_rec (DWORD id, int get_context)\n   return NULL;\n }\n \n-/* Add a thread to the thread list.  */\n+/* Add a thread to the thread list.\n+\n+   PTID is the ptid of the thread to be added.\n+   H is its Windows handle.\n+   TLB is its thread local base.\n+   MAIN_THREAD_P should be true if the thread to be added is\n+   the main thread, false otherwise.  */\n+\n static windows_thread_info *\n-windows_add_thread (ptid_t ptid, HANDLE h, void *tlb)\n+windows_add_thread (ptid_t ptid, HANDLE h, void *tlb, bool main_thread_p)\n {\n   windows_thread_info *th;\n   DWORD id;\n@@ -446,7 +453,17 @@ windows_add_thread (ptid_t ptid, HANDLE h, void *tlb)\n   th->thread_local_base = (CORE_ADDR) (uintptr_t) tlb;\n   th->next = thread_head.next;\n   thread_head.next = th;\n-  add_thread (ptid);\n+\n+  /* Add this new thread to the list of threads.\n+\n+     To be consistent with what's done on other platforms, we add\n+     the main thread silently (in reality, this thread is really\n+     more of a process to the user than a thread).  */\n+  if (main_thread_p)\n+    add_thread_silent (ptid);\n+  else\n+    add_thread (ptid);\n+\n   /* Set the debug registers for the new thread if they are used.  */\n   if (debug_registers_used)\n     {\n@@ -483,9 +500,15 @@ windows_init_thread_list (void)\n   thread_head.next = NULL;\n }\n \n-/* Delete a thread from the list of threads.  */\n+/* Delete a thread from the list of threads.\n+\n+   PTID is the ptid of the thread to be deleted.\n+   EXIT_CODE is the thread's exit code.\n+   MAIN_THREAD_P should be true if the thread to be deleted is\n+   the main thread, false otherwise.  */\n+\n static void\n-windows_delete_thread (ptid_t ptid, DWORD exit_code)\n+windows_delete_thread (ptid_t ptid, DWORD exit_code, bool main_thread_p)\n {\n   windows_thread_info *th;\n   DWORD id;\n@@ -494,11 +517,19 @@ windows_delete_thread (ptid_t ptid, DWORD exit_code)\n \n   id = ptid.tid ();\n \n+  /* Emit a notification about the thread being deleted.\n+\n+     Note that no notification was printed when the main thread\n+     was created, and thus, unless in verbose mode, we should be\n+     symetrical, and avoid that notification for the main thread\n+     here as well.  */\n+\n   if (info_verbose)\n     printf_unfiltered (\"[Deleting %s]\\n\", target_pid_to_str (ptid));\n-  else if (print_thread_events)\n+  else if (print_thread_events && !main_thread_p)\n     printf_unfiltered (_(\"[%s exited with code %u]\\n\"),\n \t\t       target_pid_to_str (ptid), (unsigned) exit_code);\n+\n   delete_thread (find_thread_ptid (ptid));\n \n   for (th = &thread_head;\n@@ -1375,11 +1406,12 @@ fake_create_process (void)\n       /*  We can not debug anything in that case.  */\n     }\n   main_thread_id = current_event.dwThreadId;\n-  current_thread = windows_add_thread (\n-\t\t     ptid_t (current_event.dwProcessId, 0,\n-\t\t\t     current_event.dwThreadId),\n-\t\t     current_event.u.CreateThread.hThread,\n-\t\t     current_event.u.CreateThread.lpThreadLocalBase);\n+  current_thread\n+    = windows_add_thread (ptid_t (current_event.dwProcessId, 0,\n+\t\t\t\t  current_event.dwThreadId),\n+\t\t\t  current_event.u.CreateThread.hThread,\n+\t\t\t  current_event.u.CreateThread.lpThreadLocalBase,\n+\t\t\t  true /* main_thread_p */);\n   return main_thread_id;\n }\n \n@@ -1548,10 +1580,11 @@ get_windows_debug_event (struct target_ops *ops,\n \t}\n       /* Record the existence of this thread.  */\n       thread_id = current_event.dwThreadId;\n-      th = windows_add_thread (ptid_t (current_event.dwProcessId, 0,\n-\t\t\t\t       current_event.dwThreadId),\n-\t\t\t     current_event.u.CreateThread.hThread,\n-\t\t\t     current_event.u.CreateThread.lpThreadLocalBase);\n+      th = windows_add_thread\n+        (ptid_t (current_event.dwProcessId, 0, current_event.dwThreadId),\n+\t current_event.u.CreateThread.hThread,\n+\t current_event.u.CreateThread.lpThreadLocalBase,\n+\t false /* main_thread_p */);\n \n       break;\n \n@@ -1562,7 +1595,8 @@ get_windows_debug_event (struct target_ops *ops,\n \t\t     \"EXIT_THREAD_DEBUG_EVENT\"));\n       windows_delete_thread (ptid_t (current_event.dwProcessId, 0,\n \t\t\t\t     current_event.dwThreadId),\n-\t\t\t     current_event.u.ExitThread.dwExitCode);\n+\t\t\t     current_event.u.ExitThread.dwExitCode,\n+\t\t\t     false /* main_thread_p */);\n       th = &dummy_thread_info;\n       break;\n \n@@ -1578,10 +1612,12 @@ get_windows_debug_event (struct target_ops *ops,\n       current_process_handle = current_event.u.CreateProcessInfo.hProcess;\n       main_thread_id = current_event.dwThreadId;\n       /* Add the main thread.  */\n-      th = windows_add_thread (ptid_t (current_event.dwProcessId, 0,\n-\t\t\t\t       current_event.dwThreadId),\n-\t     current_event.u.CreateProcessInfo.hThread,\n-\t     current_event.u.CreateProcessInfo.lpThreadLocalBase);\n+      th = windows_add_thread\n+        (ptid_t (current_event.dwProcessId, 0,\n+\t\t current_event.dwThreadId),\n+\t current_event.u.CreateProcessInfo.hThread,\n+\t current_event.u.CreateProcessInfo.lpThreadLocalBase,\n+\t true /* main_thread_p */);\n       thread_id = current_event.dwThreadId;\n       break;\n \n@@ -1601,7 +1637,7 @@ get_windows_debug_event (struct target_ops *ops,\n \t{\n \t  windows_delete_thread (ptid_t (current_event.dwProcessId, 0,\n \t\t\t\t\t main_thread_id),\n-\t\t\t\t 0);\n+\t\t\t\t 0, true /* main_thread_p */);\n \t  ourstatus->kind = TARGET_WAITKIND_EXITED;\n \t  ourstatus->value.integer = current_event.u.ExitProcess.dwExitCode;\n \t  thread_id = main_thread_id;"
    }
  ]
}