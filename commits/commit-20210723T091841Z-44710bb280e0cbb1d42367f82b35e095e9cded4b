{
  "sha": "44710bb280e0cbb1d42367f82b35e095e9cded4b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDQ3MTBiYjI4MGUwY2JiMWQ0MjM2N2Y4MmIzNWUwOTVlOWNkZWQ0Yg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-07-22T13:07:15Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-07-23T09:18:41Z"
    },
    "message": "gdb/testsuite: don't error when trying to unset last_spawn_tty_name\n\nIn spawn_capture_tty_name (lib/gdb.exp) we either set or unset\nlast_spawn_tty_name depending on whether spawn_out(slave,name) exists\nor not.\n\nOne situation that might cause spawn_out(slave,name) to not exists is\nif the spawn function is called with the argument -leaveopen, which is\nhow it is called when processes are created as part of a pipeline, the\ncreated process has no tty, instead its output is written to a file\ndescriptor.\n\nIf a pipeline is created consisting of multiple processes then there\nwill be multiple sequential calls to spawn, all using -leaveopen.  The\nfirst of these calls is fine, spawn_out(slave,name) is not set, and so\nin spawn_capture_tty_name we unset last_spawn_tty_name.  However, on\nthe second call to spawn, spawn_out(slave,name) is still not set and\nso in spawn_capture_tty_name we again try to unset\nlast_spawn_tty_name, this now throws an error (as last_spawn_tty_name\nis already unset).\n\nFix this issue by using -nocomplain with the call to unset in\nspawn_capture_tty_name.\n\nBefore this commit I was seeing gdb.base/gnu-debugdata.exp report 1\npass, and 1 unsupported test.  After this commit I now see 16 passes\nfrom this test script.\n\nI have also improved the code that used to do this:\n\n    if { [info exists spawn_out] } {\n\tset ::last_spawn_tty_name $spawn_out(slave,name)\n    } else {\n        ...\n    }\n\nThe problem here is that we check for the existence of spawn_out, and\nthen unconditionally read spawn_out(slave,name).  A situation could\narise where some other element of spawn_out is set,\ne.g. spawn_out(foo), in which case we would enter the if block and try\nto read a non-existent variable.  After this commit we now check\nspecifically for spawn_out(slave,name).\n\nFinally, it is worth noting that before this issue was fixed runtest\nitself, or rather the expect process behind runtest, would segfault\nwhile exiting.  I haven't looked at all into what the problem is here\nthat caused expect to crash, as fixing the bug in GDB's testing\nscripts made the segfault go away.",
    "tree": {
      "sha": "e5d8b8d2d0fda387b0050382f4f27b06ab0fb531",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e5d8b8d2d0fda387b0050382f4f27b06ab0fb531"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/44710bb280e0cbb1d42367f82b35e095e9cded4b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/44710bb280e0cbb1d42367f82b35e095e9cded4b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/44710bb280e0cbb1d42367f82b35e095e9cded4b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/44710bb280e0cbb1d42367f82b35e095e9cded4b/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0e4cc77316732e67cff33e493eff2aa7feed4587",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e4cc77316732e67cff33e493eff2aa7feed4587",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0e4cc77316732e67cff33e493eff2aa7feed4587"
    }
  ],
  "stats": {
    "total": 14,
    "additions": 12,
    "deletions": 2
  },
  "files": [
    {
      "sha": "2f95989440a7e965d94eccf50e969bf2c152a4bc",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/44710bb280e0cbb1d42367f82b35e095e9cded4b/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/44710bb280e0cbb1d42367f82b35e095e9cded4b/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=44710bb280e0cbb1d42367f82b35e095e9cded4b",
      "patch": "@@ -2029,10 +2029,20 @@ proc gdb_file_cmd { arg } {\n proc spawn_capture_tty_name { args } {\n     set result [uplevel builtin_spawn $args]\n     upvar spawn_out spawn_out\n-    if { [info exists spawn_out] } {\n+    if { [info exists spawn_out(slave,name)] } {\n \tset ::last_spawn_tty_name $spawn_out(slave,name)\n     } else {\n-\tunset ::last_spawn_tty_name\n+\t# If a process is spawned as part of a pipe line (e.g. passing\n+\t# -leaveopen to the spawn proc) then the spawned process is no\n+\t# assigned a tty and spawn_out(slave,name) will not be set.\n+\t# In that case we want to ensure that last_spawn_tty_name is\n+\t# not set.\n+\t#\n+\t# If the previous process spawned was also not assigned a tty\n+\t# (e.g. multiple processed chained in a pipeline) then\n+\t# last_spawn_tty_name will already be unset, so, if we don't\n+\t# use -nocomplain here we would otherwise get an error.\n+\tunset -nocomplain ::last_spawn_tty_name\n     }\n     return $result\n }"
    }
  ]
}