{
  "sha": "4b74833d1a27478968e4179a8217521315fa9331",
  "node_id": "C_kwDOANOeidoAKDRiNzQ4MzNkMWEyNzQ3ODk2OGU0MTc5YTgyMTc1MjEzMTVmYTkzMzE",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2022-01-10T17:17:23Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2022-01-13T10:25:45Z"
    },
    "message": "gdb: don't use -Wmissing-prototypes with g++\n\nThis commit aims to not make use of -Wmissing-prototypes when\ncompiling with g++.\n\nUse of -Wmissing-prototypes was added with this commit:\n\n  commit a0761e34f054767de6d6389929d27e9015fb299b\n  Date:   Wed Mar 11 15:15:12 2020 -0400\n\n      gdb: enable -Wmissing-prototypes warning\n\nBecause clang can provide helpful warnings with this flag.\nUnfortunately, g++ doesn't accept this flag, and will give this\nwarning:\n\n  cc1plus: warning: command line option \u2018-Wmissing-prototypes\u2019 is valid for C/ObjC but not for C++\n\nIn theory the fact that this flag is not supported should be detected\nby the configure check in gdbsupport/warning.m4, but for users of\nccache, this check doesn't work due to a long standing ccache issue:\n\n  https://github.com/ccache/ccache/issues/738\n\nThe ccache problem is that -W... options are reordered on the command\nline, and so -Wmissing-prototypes is seen before -Werror.  Usually\nthis doesn't matter, but the above warning (about the flag not being\nvalid) is issued before the -Werror flag is processed, and so is not\nfatal.\n\nThere have been two previous attempts to fix this that I'm aware of.\nThe first is:\n\n  https://sourceware.org/pipermail/gdb-patches/2021-September/182148.html\n\nIn this attempt, instead of just relying on a compile to check if a\nflag is valid, the proposal was to both compile and link.  As linking\ndoesn't go through ccache, we don't suffer from the argument\nreordering problem, and the link phase will correctly fail when using\n-Wmissing-prototypes with g++.  The configure script will then disable\nthe use of this flag.\n\nThis approach was rejected, and the suggestion was to only add the\n-Wmissing-prototypes flag if we are compiling with gcc.\n\nThe second attempt, attempts this approach, and can be found here:\n\n  https://sourceware.org/pipermail/gdb-patches/2021-November/183076.html\n\nThis attempt only adds the -Wmissing-prototypes flag is the value of\nGCC is not 'yes'.  This feels like it is doing the right thing,\nunfortunately, the GCC flag is really a 'is gcc like' flag, not a\nstrict, is gcc check.  As such, GCC is set to 'yes' for clang, which\nwould mean the flag was not included for clang or gcc.  The entire\npoint of the original commit was to add this flag for clang, so\nclearly the second attempt is not sufficient either.\n\nIn this new attempt I have added gdbsupport/compiler-type.m4, this\nfile defines AM_GDB_COMPILER_TYPE.  This macro sets the variable\nGDB_COMPILER_TYPE to either 'gcc', 'clang', or 'unknown'.  In future\nthe list of values might be extended to cover other compilers, if this\nis ever useful.\n\nI've then modified gdbsupport/warning.m4 to only add the problematic\n-Wmissing-prototypes flag if GDB_COMPILER_TYPE is not 'gcc'.\n\nI've tested this with both gcc and clang and see the expected results,\ngcc no longer attempts to use the -Wmissing-prototypes flag, while\nclang continues to use it.\n\nWhen compiling using ccache, I am no longer seeing the warning.",
    "tree": {
      "sha": "e25bad83e99d2a93846dd366494930469f961127",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e25bad83e99d2a93846dd366494930469f961127"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4b74833d1a27478968e4179a8217521315fa9331",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b74833d1a27478968e4179a8217521315fa9331",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4b74833d1a27478968e4179a8217521315fa9331",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b74833d1a27478968e4179a8217521315fa9331/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "993248f4439271d7d5d3b504b851043af7495c25",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/993248f4439271d7d5d3b504b851043af7495c25",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/993248f4439271d7d5d3b504b851043af7495c25"
    }
  ],
  "stats": {
    "total": 281,
    "additions": 275,
    "deletions": 6
  },
  "files": [
    {
      "sha": "95ff2b6f35e12fa3a4ed1153e73bdc5322000197",
      "filename": "gdb/acinclude.m4",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdb/acinclude.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdb/acinclude.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/acinclude.m4?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -15,6 +15,9 @@ m4_include(acx_configure_dir.m4)\n # This gets GDB_AC_TRANSFORM.\n m4_include(transform.m4)\n \n+# This get AM_GDB_COMPILER_TYPE.\n+m4_include(../gdbsupport/compiler-type.m4)\n+\n # This gets AM_GDB_WARNINGS.\n m4_include(../gdbsupport/warning.m4)\n "
    },
    {
      "sha": "e751edc3f9a15e24eb61668bd3f910739ff68126",
      "filename": "gdb/configure",
      "status": "modified",
      "additions": 65,
      "deletions": 1,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdb/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdb/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -17000,6 +17000,64 @@ _ACEOF\n \n \n \n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking the compiler type\" >&5\n+$as_echo_n \"checking the compiler type... \" >&6; }\n+if ${gdb_cv_compiler_type+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gdb_cv_compiler_type=unknown\n+  if test \"$gdb_cv_compiler_type\" = unknown; then\n+     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+                          #if !defined __GNUC__ || defined __clang__\n+                          #error not gcc\n+                          #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  gdb_cv_compiler_type=gcc\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  fi\n+\n+  if test \"$gdb_cv_compiler_type\" = unknown; then\n+     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+                          #ifndef __clang__\n+                          #error not clang\n+                          #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  gdb_cv_compiler_type=clang\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gdb_cv_compiler_type\" >&5\n+$as_echo \"$gdb_cv_compiler_type\" >&6; }\n+\n+ GDB_COMPILER_TYPE=\"$gdb_cv_compiler_type\"\n+\n+\n # Check whether --enable-werror was given.\n if test \"${enable_werror+set}\" = set; then :\n   enableval=$enable_werror; case \"${enableval}\" in\n@@ -17036,10 +17094,16 @@ build_warnings=\"-Wall -Wpointer-arith \\\n -Wdeprecated-copy-dtor \\\n -Wredundant-move \\\n -Wmissing-declarations \\\n--Wmissing-prototypes \\\n -Wstrict-null-sentinel \\\n \"\n \n+# The -Wmissing-prototypes flag will be accepted by GCC, but results\n+# in a warning being printed about the flag not being valid for C++,\n+# this is something to do with using ccache, and argument ordering.\n+if test \"$GDB_COMPILER_TYPE\" != gcc; then\n+  build_warnings=\"$build_warnings -Wmissing-prototypes\"\n+fi\n+\n case \"${host}\" in\n   *-*-mingw32*)\n     # Enable -Wno-format by default when using gcc on mingw since many"
    },
    {
      "sha": "5a380ce38d98584461412fa2ce55584ffb3ce26a",
      "filename": "gdb/configure.ac",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdb/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdb/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.ac?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -1833,6 +1833,7 @@ GDB_AC_WITH_DIR(SYSTEM_GDBINIT_DIR, system-gdbinit-dir,\n     [automatically load system-wide gdbinit files from this directory],\n     [])\n \n+AM_GDB_COMPILER_TYPE\n AM_GDB_WARNINGS\n AM_GDB_UBSAN\n "
    },
    {
      "sha": "32d5d14ca6eeee14668b7025a6c5092184397e5c",
      "filename": "gdbserver/acinclude.m4",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdbserver/acinclude.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdbserver/acinclude.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/acinclude.m4?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -7,6 +7,9 @@ dnl system search paths.\n dnl gdb/gdbserver/configure.in uses BFD_HAVE_SYS_PROCFS_TYPE.\n m4_include(../bfd/bfd.m4)\n \n+# This get AM_GDB_COMPILER_TYPE.\n+m4_include(../gdbsupport/compiler-type.m4)\n+\n dnl This gets AM_GDB_WARNINGS.\n m4_include(../gdbsupport/warning.m4)\n "
    },
    {
      "sha": "bcb15941ed127774fbfc7a354f68ccac0f77bf23",
      "filename": "gdbserver/configure",
      "status": "modified",
      "additions": 65,
      "deletions": 1,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdbserver/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdbserver/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/configure?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -9707,6 +9707,64 @@ fi\n \n \n \n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking the compiler type\" >&5\n+$as_echo_n \"checking the compiler type... \" >&6; }\n+if ${gdb_cv_compiler_type+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gdb_cv_compiler_type=unknown\n+  if test \"$gdb_cv_compiler_type\" = unknown; then\n+     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+                          #if !defined __GNUC__ || defined __clang__\n+                          #error not gcc\n+                          #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  gdb_cv_compiler_type=gcc\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  fi\n+\n+  if test \"$gdb_cv_compiler_type\" = unknown; then\n+     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+                          #ifndef __clang__\n+                          #error not clang\n+                          #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  gdb_cv_compiler_type=clang\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gdb_cv_compiler_type\" >&5\n+$as_echo \"$gdb_cv_compiler_type\" >&6; }\n+\n+ GDB_COMPILER_TYPE=\"$gdb_cv_compiler_type\"\n+\n+\n # Check whether --enable-werror was given.\n if test \"${enable_werror+set}\" = set; then :\n   enableval=$enable_werror; case \"${enableval}\" in\n@@ -9743,10 +9801,16 @@ build_warnings=\"-Wall -Wpointer-arith \\\n -Wdeprecated-copy-dtor \\\n -Wredundant-move \\\n -Wmissing-declarations \\\n--Wmissing-prototypes \\\n -Wstrict-null-sentinel \\\n \"\n \n+# The -Wmissing-prototypes flag will be accepted by GCC, but results\n+# in a warning being printed about the flag not being valid for C++,\n+# this is something to do with using ccache, and argument ordering.\n+if test \"$GDB_COMPILER_TYPE\" != gcc; then\n+  build_warnings=\"$build_warnings -Wmissing-prototypes\"\n+fi\n+\n case \"${host}\" in\n   *-*-mingw32*)\n     # Enable -Wno-format by default when using gcc on mingw since many"
    },
    {
      "sha": "dc33f1a235b918a4ac919dfbb44c3971ba6c4433",
      "filename": "gdbserver/configure.ac",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdbserver/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdbserver/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/configure.ac?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -146,6 +146,7 @@ fi\n AC_SUBST(ustlibs)\n AC_SUBST(ustinc)\n \n+AM_GDB_COMPILER_TYPE\n AM_GDB_WARNINGS\n \n dnl dladdr is glibc-specific.  It is used by thread-db.c but only for"
    },
    {
      "sha": "c74e26aacd3f6c719e66c87042de15cc8d712414",
      "filename": "gdbsupport/Makefile.in",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/Makefile.in?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -123,8 +123,8 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/codeset.m4 \\\n \t$(top_srcdir)/../config/ax_pthread.m4 \\\n \t$(top_srcdir)/../gdb/ax_cxx_compile_stdcxx.m4 \\\n \t$(top_srcdir)/../gdb/libiberty.m4 $(top_srcdir)/selftest.m4 \\\n-\t$(top_srcdir)/ptrace.m4 $(top_srcdir)/warning.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/ptrace.m4 $(top_srcdir)/compiler-type.m4 \\\n+\t$(top_srcdir)/warning.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n DIST_COMMON = $(srcdir)/Makefile.am $(top_srcdir)/configure \\"
    },
    {
      "sha": "c6276149867e3522fe19a49587f04817faad2664",
      "filename": "gdbsupport/acinclude.m4",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/acinclude.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/acinclude.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/acinclude.m4?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -6,5 +6,8 @@ m4_include([../gdb/libiberty.m4])\n m4_include([selftest.m4])\n m4_include([ptrace.m4])\n \n+dnl This gets AM_GDB_COMPILER_TYPE.\n+m4_include(compiler-type.m4)\n+\n dnl This gets AM_GDB_WARNINGS.\n m4_include(warning.m4)"
    },
    {
      "sha": "f943a987210cfbbff9c3e351a4a3e39023354d73",
      "filename": "gdbsupport/compiler-type.m4",
      "status": "added",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/compiler-type.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/compiler-type.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/compiler-type.m4?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -0,0 +1,59 @@\n+dnl Autoconf configure script for GDB, the GNU debugger.\n+dnl Copyright (C) 2022 Free Software Foundation, Inc.\n+dnl\n+dnl This file is part of GDB.\n+dnl\n+dnl This program is free software; you can redistribute it and/or modify\n+dnl it under the terms of the GNU General Public License as published by\n+dnl the Free Software Foundation; either version 3 of the License, or\n+dnl (at your option) any later version.\n+dnl\n+dnl This program is distributed in the hope that it will be useful,\n+dnl but WITHOUT ANY WARRANTY; without even the implied warranty of\n+dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+dnl GNU General Public License for more details.\n+dnl\n+dnl You should have received a copy of the GNU General Public License\n+dnl along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Sets up GDB_COMPILER_TYPE to either 'gcc', 'clang', or 'unknown'.\n+# The autoconf compiler check will set GCC=yes for clang as well as\n+# gcc, it's really more of a \"is gcc like\" check.\n+#\n+# By contrast, this will set the GDB_COMPILER_TYPE to 'gcc' only for\n+# versions of gcc.\n+#\n+# There's no reason why this can't be extended to identify other\n+# compiler types if needed in the future, users of this variable\n+# should therefore avoid relying on the 'unknown' value, instead\n+# checks should be written in terms of the known compiler types.\n+AC_DEFUN([AM_GDB_COMPILER_TYPE],[\n+\n+  AC_CACHE_CHECK([the compiler type],\n+                 [gdb_cv_compiler_type],\n+ [gdb_cv_compiler_type=unknown\n+  if test \"$gdb_cv_compiler_type\" = unknown; then\n+     AC_COMPILE_IFELSE(\n+        [AC_LANG_PROGRAM([],\n+                         [\n+                          #if !defined __GNUC__ || defined __clang__\n+                          #error not gcc\n+                          #endif\n+                         ])],\n+        [gdb_cv_compiler_type=gcc], [])\n+  fi\n+\n+  if test \"$gdb_cv_compiler_type\" = unknown; then\n+     AC_COMPILE_IFELSE(\n+        [AC_LANG_PROGRAM([],\n+                         [\n+                          #ifndef __clang__\n+                          #error not clang\n+                          #endif\n+                         ])],\n+        [gdb_cv_compiler_type=clang], [])\n+  fi\n+ ])\n+\n+ GDB_COMPILER_TYPE=\"$gdb_cv_compiler_type\"\n+])"
    },
    {
      "sha": "afaba88ee94eebdcc3bef0f4cf9fc1ce89298b28",
      "filename": "gdbsupport/configure",
      "status": "modified",
      "additions": 65,
      "deletions": 1,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/configure?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -10192,6 +10192,64 @@ fi\n \n # Detect support warning flags.\n \n+\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking the compiler type\" >&5\n+$as_echo_n \"checking the compiler type... \" >&6; }\n+if ${gdb_cv_compiler_type+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  gdb_cv_compiler_type=unknown\n+  if test \"$gdb_cv_compiler_type\" = unknown; then\n+     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+                          #if !defined __GNUC__ || defined __clang__\n+                          #error not gcc\n+                          #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  gdb_cv_compiler_type=gcc\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  fi\n+\n+  if test \"$gdb_cv_compiler_type\" = unknown; then\n+     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+                          #ifndef __clang__\n+                          #error not clang\n+                          #endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  gdb_cv_compiler_type=clang\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gdb_cv_compiler_type\" >&5\n+$as_echo \"$gdb_cv_compiler_type\" >&6; }\n+\n+ GDB_COMPILER_TYPE=\"$gdb_cv_compiler_type\"\n+\n+\n # Check whether --enable-werror was given.\n if test \"${enable_werror+set}\" = set; then :\n   enableval=$enable_werror; case \"${enableval}\" in\n@@ -10228,10 +10286,16 @@ build_warnings=\"-Wall -Wpointer-arith \\\n -Wdeprecated-copy-dtor \\\n -Wredundant-move \\\n -Wmissing-declarations \\\n--Wmissing-prototypes \\\n -Wstrict-null-sentinel \\\n \"\n \n+# The -Wmissing-prototypes flag will be accepted by GCC, but results\n+# in a warning being printed about the flag not being valid for C++,\n+# this is something to do with using ccache, and argument ordering.\n+if test \"$GDB_COMPILER_TYPE\" != gcc; then\n+  build_warnings=\"$build_warnings -Wmissing-prototypes\"\n+fi\n+\n case \"${host}\" in\n   *-*-mingw32*)\n     # Enable -Wno-format by default when using gcc on mingw since many"
    },
    {
      "sha": "55477d55c82e9a287e1284383a5c7acabbe48681",
      "filename": "gdbsupport/configure.ac",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/configure.ac?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -57,6 +57,7 @@ AM_CONDITIONAL(SELFTEST, $enable_unittests)\n GDB_AC_PTRACE\n \n # Detect support warning flags.\n+AM_GDB_COMPILER_TYPE\n AM_GDB_WARNINGS\n \n case ${host} in"
    },
    {
      "sha": "e9025db7ece509672a1a490aebb6f7c44cba3136",
      "filename": "gdbsupport/warning.m4",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/warning.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b74833d1a27478968e4179a8217521315fa9331/gdbsupport/warning.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/warning.m4?ref=4b74833d1a27478968e4179a8217521315fa9331",
      "patch": "@@ -51,10 +51,16 @@ build_warnings=\"-Wall -Wpointer-arith \\\n -Wdeprecated-copy-dtor \\\n -Wredundant-move \\\n -Wmissing-declarations \\\n--Wmissing-prototypes \\\n -Wstrict-null-sentinel \\\n \"\n \n+# The -Wmissing-prototypes flag will be accepted by GCC, but results\n+# in a warning being printed about the flag not being valid for C++,\n+# this is something to do with using ccache, and argument ordering.\n+if test \"$GDB_COMPILER_TYPE\" != gcc; then\n+  build_warnings=\"$build_warnings -Wmissing-prototypes\"\n+fi\n+\n case \"${host}\" in\n   *-*-mingw32*)\n     # Enable -Wno-format by default when using gcc on mingw since many"
    }
  ]
}