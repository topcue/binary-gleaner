{
  "sha": "b10bae18753862874628f902796eb1cd3925f95d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjEwYmFlMTg3NTM4NjI4NzQ2MjhmOTAyNzk2ZWIxY2QzOTI1Zjk1ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-01-23T19:20:11Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-01-24T03:33:25Z"
    },
    "message": "Avoid crash when \"compile\" expression uses cooked register\n\nIf the \"compile\" command is used with an expression that happens to\nrequire a cooked register, then GDB can crash.  This patch does not\nfix the bug, but at least turns the crash into an error instead.\n\n2021-01-23  Tom Tromey  <tom@tromey.com>\n\n\tPR compile/25575\n\t* compile/compile-loc2c.c (note_register): New function.\n\t(pushf_register_address, pushf_register): Use it.",
    "tree": {
      "sha": "b2f9a8be71b6ca2276eef3ca352e280958e90bd3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b2f9a8be71b6ca2276eef3ca352e280958e90bd3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b10bae18753862874628f902796eb1cd3925f95d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b10bae18753862874628f902796eb1cd3925f95d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b10bae18753862874628f902796eb1cd3925f95d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b10bae18753862874628f902796eb1cd3925f95d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3637a558a50141676f9997979491296dc007168d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3637a558a50141676f9997979491296dc007168d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3637a558a50141676f9997979491296dc007168d"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 22,
    "deletions": 2
  },
  "files": [
    {
      "sha": "9f9681fef84389d14f22e29b43225258725737ec",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b10bae18753862874628f902796eb1cd3925f95d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b10bae18753862874628f902796eb1cd3925f95d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b10bae18753862874628f902796eb1cd3925f95d",
      "patch": "@@ -1,3 +1,9 @@\n+2021-01-23  Tom Tromey  <tom@tromey.com>\n+\n+\tPR compile/25575\n+\t* compile/compile-loc2c.c (note_register): New function.\n+\t(pushf_register_address, pushf_register): Use it.\n+\n 2021-01-23  Tom Tromey  <tom@tromey.com>\n \n \t* symtab.h (struct symbol_computed_ops) <generate_c_location>:"
    },
    {
      "sha": "ef819799eb49b6d650cd19b57d00b193bfecc083",
      "filename": "gdb/compile/compile-loc2c.c",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b10bae18753862874628f902796eb1cd3925f95d/gdb/compile/compile-loc2c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b10bae18753862874628f902796eb1cd3925f95d/gdb/compile/compile-loc2c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-loc2c.c?ref=b10bae18753862874628f902796eb1cd3925f95d",
      "patch": "@@ -505,6 +505,20 @@ print_label (string_file *stream, unsigned int scope, int target)\n   stream->printf (\"__label_%u_%s\", scope, pulongest (target));\n }\n \n+/* Note that a register was used.  */\n+\n+static void\n+note_register (int regnum, std::vector<bool> &registers_used)\n+{\n+  gdb_assert (regnum >= 0);\n+  /* If the expression uses a cooked register, then we currently can't\n+     compile it.  We would need a gdbarch method to handle this\n+     situation.  */\n+  if (regnum >= registers_used.size ())\n+    error (_(\"Expression uses \\\"cooked\\\" register and cannot be compiled.\"));\n+  registers_used[regnum] = true;\n+}\n+\n /* Emit code that pushes a register's address on the stack.\n    REGISTERS_USED is an out parameter which is updated to note which\n    register was needed by this expression.  */\n@@ -516,7 +530,7 @@ pushf_register_address (int indent, string_file *stream,\n {\n   std::string regname = compile_register_name_mangled (gdbarch, regnum);\n \n-  registers_used[regnum] = true;\n+  note_register (regnum, registers_used);\n   pushf (indent, stream,\n \t \"(\" GCC_UINTPTR \") &\" COMPILE_I_SIMPLE_REGISTER_ARG_NAME \"->%s\",\n \t regname.c_str ());\n@@ -534,7 +548,7 @@ pushf_register (int indent, string_file *stream,\n {\n   std::string regname = compile_register_name_mangled (gdbarch, regnum);\n \n-  registers_used[regnum] = true;\n+  note_register (regnum, registers_used);\n   if (offset == 0)\n     pushf (indent, stream, COMPILE_I_SIMPLE_REGISTER_ARG_NAME \"->%s\",\n \t   regname.c_str ());"
    }
  ]
}