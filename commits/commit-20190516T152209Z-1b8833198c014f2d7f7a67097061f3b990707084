{
  "sha": "1b8833198c014f2d7f7a67097061f3b990707084",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWI4ODMzMTk4YzAxNGYyZDdmN2E2NzA5NzA2MWYzYjk5MDcwNzA4NA==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-15T16:35:43Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:22:09Z"
    },
    "message": "[PATCH 10/57][Arm][GAS] Add support for MVE instructions: vcmp and vpt\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (MVE_BAD_QREG): New error message.\n\t(enum operand_parse_code): Define new operand.\n\t(parse_operands): Handle new operand.\n\t(do_mve_vpt): Change for VPT blocks.\n\t(NEON_SHAPE_DEF): New shape.\n\t(neon_logbits): Moved.\n\t(LOW4): Moved\n\t(HI1): Moved\n\t(mve_get_vcmp_vpt_cond): New function to translate vpt conditions.\n\t(do_mve_vcmp): New encoding function.\n\t(do_vfp_nsyn_cmp): Changed to support MVE variants.\n\t(insns): Change to support MVE variants of vcmp and add vpt.\n\t* testsuite/gas/arm/mve-vcmp-bad-1.d: New test.\n\t* testsuite/gas/arm/mve-vcmp-bad-1.l: New test.\n\t* testsuite/gas/arm/mve-vcmp-bad-1.s: New test.\n\t* testsuite/gas/arm/mve-vcmp-bad-2.d: New test.\n\t* testsuite/gas/arm/mve-vcmp-bad-2.l: New test.\n\t* testsuite/gas/arm/mve-vcmp-bad-2.s: New test.\n\t* testsuite/gas/arm/mve-vpt-bad-1.d: New test.\n\t* testsuite/gas/arm/mve-vpt-bad-1.l: New test.\n\t* testsuite/gas/arm/mve-vpt-bad-1.s: New test.\n\t* testsuite/gas/arm/mve-vpt-bad-2.d: New test.\n\t* testsuite/gas/arm/mve-vpt-bad-2.l: New test.\n\t* testsuite/gas/arm/mve-vpt-bad-2.s: New test.",
    "tree": {
      "sha": "5c3a465de7c71ce993f5b3a8b76d1aec7392dda0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5c3a465de7c71ce993f5b3a8b76d1aec7392dda0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b8833198c014f2d7f7a67097061f3b990707084",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b8833198c014f2d7f7a67097061f3b990707084",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b8833198c014f2d7f7a67097061f3b990707084",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b8833198c014f2d7f7a67097061f3b990707084/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "57785aa2ff465ec72baa75bbd62e321a46e0633e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57785aa2ff465ec72baa75bbd62e321a46e0633e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/57785aa2ff465ec72baa75bbd62e321a46e0633e"
    }
  ],
  "stats": {
    "total": 611,
    "additions": 585,
    "deletions": 26
  },
  "files": [
    {
      "sha": "a14aa2527da3babde33668254918116e78c418cb",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -1,3 +1,30 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (MVE_BAD_QREG): New error message.\n+\t(enum operand_parse_code): Define new operand.\n+\t(parse_operands): Handle new operand.\n+\t(do_mve_vpt): Change for VPT blocks.\n+\t(NEON_SHAPE_DEF): New shape.\n+\t(neon_logbits): Moved.\n+\t(LOW4): Moved\n+\t(HI1): Moved\n+\t(mve_get_vcmp_vpt_cond): New function to translate vpt conditions.\n+\t(do_mve_vcmp): New encoding function.\n+\t(do_vfp_nsyn_cmp): Changed to support MVE variants.\n+\t(insns): Change to support MVE variants of vcmp and add vpt.\n+\t* testsuite/gas/arm/mve-vcmp-bad-1.d: New test.\n+\t* testsuite/gas/arm/mve-vcmp-bad-1.l: New test.\n+\t* testsuite/gas/arm/mve-vcmp-bad-1.s: New test.\n+\t* testsuite/gas/arm/mve-vcmp-bad-2.d: New test.\n+\t* testsuite/gas/arm/mve-vcmp-bad-2.l: New test.\n+\t* testsuite/gas/arm/mve-vcmp-bad-2.s: New test.\n+\t* testsuite/gas/arm/mve-vpt-bad-1.d: New test.\n+\t* testsuite/gas/arm/mve-vpt-bad-1.l: New test.\n+\t* testsuite/gas/arm/mve-vpt-bad-1.s: New test.\n+\t* testsuite/gas/arm/mve-vpt-bad-2.d: New test.\n+\t* testsuite/gas/arm/mve-vpt-bad-2.l: New test.\n+\t* testsuite/gas/arm/mve-vpt-bad-2.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (struct arm_it): Expand isscalar field to be able to"
    },
    {
      "sha": "b806916cc59400c3a435ccc1718c4157273e1f50",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 293,
      "deletions": 26,
      "changes": 319,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -522,6 +522,7 @@ struct arm_it\n     unsigned isvec      : 1;  /* Is a single, double or quad VFP/Neon reg.  */\n     unsigned isquad     : 1;  /* Operand is SIMD quad register.  */\n     unsigned issingle   : 1;  /* Operand is VFP single-precision register.  */\n+    unsigned iszr\t: 1;  /* Operand is ZR register.  */\n     unsigned hasreloc\t: 1;  /* Operand has relocation suffix.  */\n     unsigned writeback\t: 1;  /* Operand has trailing !  */\n     unsigned preind\t: 1;  /* Preindexed address.  */\n@@ -646,6 +647,7 @@ enum arm_reg_type\n   REG_TYPE_MMXWCG,\n   REG_TYPE_XSCALE,\n   REG_TYPE_RNB,\n+  REG_TYPE_ZR\n };\n \n /* Structure for a hash table entry for a register.\n@@ -898,6 +900,7 @@ struct asm_opcode\n #define BAD_MVE_SRCDEST\t_(\"Warning: 32-bit element size and same destination \"\\\n \t\t\t  \"and source operands makes instruction UNPREDICTABLE\")\n #define BAD_EL_TYPE\t_(\"bad element type for instruction\")\n+#define MVE_BAD_QREG\t_(\"MVE vector register Q[0..7] expected\")\n \n static struct hash_control * arm_ops_hsh;\n static struct hash_control * arm_cond_hsh;\n@@ -6894,6 +6897,7 @@ enum operand_parse_code\n   OP_RNQ,\t/* Neon quad precision register */\n   OP_RNQMQ,\t/* Neon quad or MVE vector register.  */\n   OP_RVSD,\t/* VFP single or double precision register */\n+  OP_RVSD_COND,\t/* VFP single, double precision register or condition code.  */\n   OP_RVSDMQ,\t/* VFP single, double precision or MVE vector register.  */\n   OP_RNSD,      /* Neon single or double precision register */\n   OP_RNDQ,      /* Neon double or quad precision register */\n@@ -6917,6 +6921,7 @@ enum operand_parse_code\n   OP_RNSDQMQR,\t/* Neon single, double or quad register, MVE vector register or\n \t\t   GPR (no SP/SP)  */\n   OP_RMQ,\t/* MVE vector register.  */\n+  OP_RMQRZ,\t/* MVE vector or ARM register including ZR.  */\n \n   /* New operands for Armv8.1-M Mainline.  */\n   OP_LR,\t/* ARM LR register */\n@@ -6938,6 +6943,8 @@ enum operand_parse_code\n   OP_RNDQ_I0,   /* Neon D or Q reg, or immediate zero.  */\n   OP_RVSD_I0,\t/* VFP S or D reg, or immediate zero.  */\n   OP_RSVD_FI0, /* VFP S or D reg, or floating point immediate zero.  */\n+  OP_RSVDMQ_FI0, /* VFP S, D, MVE vector register or floating point immediate\n+\t\t    zero.  */\n   OP_RR_RNSC,   /* ARM reg or Neon scalar.  */\n   OP_RNSD_RNSC, /* Neon S or D reg, or Neon scalar.  */\n   OP_RNSDQ_RNSC, /* Vector S, D or Q reg, or Neon scalar.  */\n@@ -7028,6 +7035,8 @@ enum operand_parse_code\n   OP_oROR,\t /* ROR 0/8/16/24 */\n   OP_oBARRIER_I15, /* Option argument for a barrier instruction.  */\n \n+  OP_oRMQRZ,\t/* optional MVE vector or ARM register including ZR.  */\n+\n   /* Some pre-defined mixed (ARM/THUMB) operands.  */\n   OP_RR_npcsp\t\t= MIX_ARM_THUMB_OPERANDS (OP_RR, OP_RRnpcsp),\n   OP_RRnpc_npcsp\t= MIX_ARM_THUMB_OPERANDS (OP_RRnpc, OP_RRnpcsp),\n@@ -7077,6 +7086,7 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n       inst.operands[i].isvec = (rtype == REG_TYPE_VFS\t\t\\\n \t\t\t     || rtype == REG_TYPE_VFD\t\t\\\n \t\t\t     || rtype == REG_TYPE_NQ);\t\t\\\n+      inst.operands[i].iszr = (rtype == REG_TYPE_ZR);\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -7095,6 +7105,7 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n       inst.operands[i].isvec = (rtype == REG_TYPE_VFS\t\t\\\n \t\t\t     || rtype == REG_TYPE_VFD\t\t\\\n \t\t\t     || rtype == REG_TYPE_NQ);\t\t\\\n+      inst.operands[i].iszr = (rtype == REG_TYPE_ZR);\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -7240,6 +7251,9 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  break;\n \ttry_rvsd:\n \tcase OP_RVSD:  po_reg_or_fail (REG_TYPE_VFSD);    break;\n+\tcase OP_RVSD_COND:\n+\t  po_reg_or_goto (REG_TYPE_VFSD, try_cond);\n+\t  break;\n \tcase OP_oRNSDQ:\n \tcase OP_RNSDQ: po_reg_or_fail (REG_TYPE_NSDQ);    break;\n \tcase OP_RNSDQMQR:\n@@ -7274,6 +7288,10 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  po_reg_or_goto (REG_TYPE_VFSD, try_imm0);\n \t  break;\n \n+\tcase OP_RSVDMQ_FI0:\n+\t  po_reg_or_goto (REG_TYPE_MQ, try_rsvd_fi0);\n+\t  break;\n+\ttry_rsvd_fi0:\n \tcase OP_RSVD_FI0:\n \t  {\n \t    po_reg_or_goto (REG_TYPE_VFSD, try_ifimm0);\n@@ -7548,6 +7566,7 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \tcase OP_CPSF:\t val = parse_cps_flags (&str);\t\tbreak;\n \tcase OP_ENDI:\t val = parse_endian_specifier (&str);\tbreak;\n \tcase OP_oROR:\t val = parse_ror (&str);\t\tbreak;\n+\ttry_cond:\n \tcase OP_COND:\t val = parse_cond (&str);\t\tbreak;\n \tcase OP_oBARRIER_I15:\n \t  po_barrier_or_imm (str); break;\n@@ -7721,6 +7740,17 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  po_misc_or_fail (parse_shift (&str, i, SHIFT_LSL_OR_ASR_IMMEDIATE));\n \t  break;\n \n+\tcase OP_RMQRZ:\n+\tcase OP_oRMQRZ:\n+\t  po_reg_or_goto (REG_TYPE_MQ, try_rr_zr);\n+\t  break;\n+\ttry_rr_zr:\n+\t  po_reg_or_goto (REG_TYPE_RN, ZR);\n+\t  break;\n+\tZR:\n+\t  po_reg_or_fail (REG_TYPE_ZR);\n+\t  break;\n+\n \tdefault:\n \t  as_fatal (_(\"unhandled operand code %d\"), op_parse_code);\n \t}\n@@ -7764,10 +7794,12 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t    inst.error = BAD_PC;\n \t  break;\n \n+\tcase OP_RVSD_COND:\n \tcase OP_VLDR:\n \t  if (inst.operands[i].isreg)\n \t    break;\n \t/* fall through.  */\n+\n \tcase OP_CPSF:\n \tcase OP_ENDI:\n \tcase OP_oROR:\n@@ -7796,6 +7828,12 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t    inst.error = _(\"operand must be LR register\");\n \t  break;\n \n+\tcase OP_RMQRZ:\n+\tcase OP_oRMQRZ:\n+\t  if (!inst.operands[i].iszr && inst.operands[i].reg == REG_PC)\n+\t    inst.error = BAD_PC;\n+\t  break;\n+\n \tcase OP_RRe:\n \t  if (inst.operands[i].isreg\n \t      && (inst.operands[i].reg & 0x00000001) != 0)\n@@ -12006,18 +12044,6 @@ do_t_it (void)\n   inst.instruction |= cond << 4;\n }\n \n-static void\n-do_mve_vpt (void)\n-{\n-  /* We are dealing with a vector predicated block.  */\n-  set_pred_insn_type (VPT_INSN);\n-  now_pred.cc = 0;\n-  now_pred.mask = ((inst.instruction & 0x00400000) >> 19)\n-\t\t  | ((inst.instruction & 0xe000) >> 13);\n-  now_pred.warn_deprecated = FALSE;\n-  now_pred.type = VECTOR_PRED;\n-}\n-\n /* Helper function used for both push/pop and ldm/stm.  */\n static void\n encode_thumb2_multi (bfd_boolean do_io, int base, unsigned mask,\n@@ -14276,6 +14302,8 @@ NEON_ENC_TAB\n #define NEON_SHAPE_DEF\t\t\t\\\n   X(4, (R, R, S, S), QUAD),\t\t\\\n   X(4, (S, S, R, R), QUAD),\t\t\\\n+  X(3, (I, Q, Q), QUAD),\t\t\\\n+  X(3, (I, Q, R), QUAD),\t\t\\\n   X(3, (R, Q, Q), QUAD),\t\t\\\n   X(3, (D, D, D), DOUBLE),\t\t\\\n   X(3, (Q, Q, Q), QUAD),\t\t\\\n@@ -15314,10 +15342,239 @@ do_vfp_nsyn_nmul (void)\n \n }\n \n+/* Turn a size (8, 16, 32, 64) into the respective bit number minus 3\n+   (0, 1, 2, 3).  */\n+\n+static unsigned\n+neon_logbits (unsigned x)\n+{\n+  return ffs (x) - 4;\n+}\n+\n+#define LOW4(R) ((R) & 0xf)\n+#define HI1(R) (((R) >> 4) & 1)\n+\n+static unsigned\n+mve_get_vcmp_vpt_cond (struct neon_type_el et)\n+{\n+  switch (et.type)\n+    {\n+    default:\n+      first_error (BAD_EL_TYPE);\n+      return 0;\n+    case NT_float:\n+      switch (inst.operands[0].imm)\n+\t{\n+\tdefault:\n+\t  first_error (_(\"invalid condition\"));\n+\t  return 0;\n+\tcase 0x0:\n+\t  /* eq.  */\n+\t  return 0;\n+\tcase 0x1:\n+\t  /* ne.  */\n+\t  return 1;\n+\tcase 0xa:\n+\t  /* ge/  */\n+\t  return 4;\n+\tcase 0xb:\n+\t  /* lt.  */\n+\t  return 5;\n+\tcase 0xc:\n+\t  /* gt.  */\n+\t  return 6;\n+\tcase 0xd:\n+\t  /* le.  */\n+\t  return 7;\n+\t}\n+    case NT_integer:\n+      /* only accept eq and ne.  */\n+      if (inst.operands[0].imm > 1)\n+\t{\n+\t  first_error (_(\"invalid condition\"));\n+\t  return 0;\n+\t}\n+      return inst.operands[0].imm;\n+    case NT_unsigned:\n+      if (inst.operands[0].imm == 0x2)\n+\treturn 2;\n+      else if (inst.operands[0].imm == 0x8)\n+\treturn 3;\n+      else\n+\t{\n+\t  first_error (_(\"invalid condition\"));\n+\t  return 0;\n+\t}\n+    case NT_signed:\n+      switch (inst.operands[0].imm)\n+\t{\n+\t  default:\n+\t    first_error (_(\"invalid condition\"));\n+\t    return 0;\n+\t  case 0xa:\n+\t    /* ge.  */\n+\t    return 4;\n+\t  case 0xb:\n+\t    /* lt.  */\n+\t    return 5;\n+\t  case 0xc:\n+\t    /* gt.  */\n+\t    return 6;\n+\t  case 0xd:\n+\t    /* le.  */\n+\t    return 7;\n+\t}\n+    }\n+  /* Should be unreachable.  */\n+  abort ();\n+}\n+\n+static void\n+do_mve_vpt (void)\n+{\n+  /* We are dealing with a vector predicated block.  */\n+  if (inst.operands[0].present)\n+    {\n+      enum neon_shape rs = neon_select_shape (NS_IQQ, NS_IQR, NS_NULL);\n+      struct neon_type_el et\n+\t= neon_check_type (3, rs, N_EQK, N_KEY | N_F_MVE | N_I_MVE | N_SU_32,\n+\t\t\t   N_EQK);\n+\n+      unsigned fcond = mve_get_vcmp_vpt_cond (et);\n+\n+      constraint (inst.operands[1].reg > 14, MVE_BAD_QREG);\n+\n+      if (et.type == NT_invtype)\n+\treturn;\n+\n+      if (et.type == NT_float)\n+\t{\n+\t  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_fp_ext),\n+\t\t      BAD_FPU);\n+\t  constraint (et.size != 16 && et.size != 32, BAD_EL_TYPE);\n+\t  inst.instruction |= (et.size == 16) << 28;\n+\t  inst.instruction |= 0x3 << 20;\n+\t}\n+      else\n+\t{\n+\t  constraint (et.size != 8 && et.size != 16 && et.size != 32,\n+\t\t      BAD_EL_TYPE);\n+\t  inst.instruction |= 1 << 28;\n+\t  inst.instruction |= neon_logbits (et.size) << 20;\n+\t}\n+\n+      if (inst.operands[2].isquad)\n+\t{\n+\t  inst.instruction |= HI1 (inst.operands[2].reg) << 5;\n+\t  inst.instruction |= LOW4 (inst.operands[2].reg);\n+\t  inst.instruction |= (fcond & 0x2) >> 1;\n+\t}\n+      else\n+\t{\n+\t  if (inst.operands[2].reg == REG_SP)\n+\t    as_tsktsk (MVE_BAD_SP);\n+\t  inst.instruction |= 1 << 6;\n+\t  inst.instruction |= (fcond & 0x2) << 4;\n+\t  inst.instruction |= inst.operands[2].reg;\n+\t}\n+      inst.instruction |= LOW4 (inst.operands[1].reg) << 16;\n+      inst.instruction |= (fcond & 0x4) << 10;\n+      inst.instruction |= (fcond & 0x1) << 7;\n+\n+    }\n+    set_pred_insn_type (VPT_INSN);\n+    now_pred.cc = 0;\n+    now_pred.mask = ((inst.instruction & 0x00400000) >> 19)\n+\t\t    | ((inst.instruction & 0xe000) >> 13);\n+    now_pred.warn_deprecated = FALSE;\n+    now_pred.type = VECTOR_PRED;\n+    inst.is_neon = 1;\n+}\n+\n+static void\n+do_mve_vcmp (void)\n+{\n+  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext), BAD_FPU);\n+  if (!inst.operands[1].isreg || !inst.operands[1].isquad)\n+    first_error (_(reg_expected_msgs[REG_TYPE_MQ]));\n+  if (!inst.operands[2].present)\n+    first_error (_(\"MVE vector or ARM register expected\"));\n+  constraint (inst.operands[1].reg > 14, MVE_BAD_QREG);\n+\n+  /* Deal with 'else' conditional MVE's vcmp, it will be parsed as vcmpe.  */\n+  if ((inst.instruction & 0xffffffff) == N_MNEM_vcmpe\n+      && inst.operands[1].isquad)\n+    {\n+      inst.instruction = N_MNEM_vcmp;\n+      inst.cond = 0x10;\n+    }\n+\n+  if (inst.cond > COND_ALWAYS)\n+    inst.pred_insn_type = INSIDE_VPT_INSN;\n+  else\n+    inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+\n+  enum neon_shape rs = neon_select_shape (NS_IQQ, NS_IQR, NS_NULL);\n+  struct neon_type_el et\n+    = neon_check_type (3, rs, N_EQK, N_KEY | N_F_MVE | N_I_MVE | N_SU_32,\n+\t\t       N_EQK);\n+\n+  constraint (rs == NS_IQR && inst.operands[2].reg == REG_PC\n+\t      && !inst.operands[2].iszr, BAD_PC);\n+\n+  unsigned fcond = mve_get_vcmp_vpt_cond (et);\n+\n+  inst.instruction = 0xee010f00;\n+  inst.instruction |= LOW4 (inst.operands[1].reg) << 16;\n+  inst.instruction |= (fcond & 0x4) << 10;\n+  inst.instruction |= (fcond & 0x1) << 7;\n+  if (et.type == NT_float)\n+    {\n+      constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_fp_ext),\n+\t\t  BAD_FPU);\n+      inst.instruction |= (et.size == 16) << 28;\n+      inst.instruction |= 0x3 << 20;\n+    }\n+  else\n+    {\n+      inst.instruction |= 1 << 28;\n+      inst.instruction |= neon_logbits (et.size) << 20;\n+    }\n+  if (inst.operands[2].isquad)\n+    {\n+      inst.instruction |= HI1 (inst.operands[2].reg) << 5;\n+      inst.instruction |= (fcond & 0x2) >> 1;\n+      inst.instruction |= LOW4 (inst.operands[2].reg);\n+    }\n+  else\n+    {\n+      if (inst.operands[2].reg == REG_SP)\n+\tas_tsktsk (MVE_BAD_SP);\n+      inst.instruction |= 1 << 6;\n+      inst.instruction |= (fcond & 0x2) << 4;\n+      inst.instruction |= inst.operands[2].reg;\n+    }\n+\n+  inst.is_neon = 1;\n+  return;\n+}\n+\n static void\n do_vfp_nsyn_cmp (void)\n {\n   enum neon_shape rs;\n+  if (!inst.operands[0].isreg)\n+    {\n+      do_mve_vcmp ();\n+      return;\n+    }\n+  else\n+    {\n+      constraint (inst.operands[2].present, BAD_SYNTAX);\n+      constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_v1xd),\n+\t\t  BAD_FPU);\n+    }\n+\n   if (inst.operands[1].isreg)\n     {\n       rs = neon_select_shape (NS_HH, NS_FF, NS_DD, NS_NULL);\n@@ -15435,18 +15692,6 @@ neon_dp_fixup (struct arm_it* insn)\n   insn->instruction = i;\n }\n \n-/* Turn a size (8, 16, 32, 64) into the respective bit number minus 3\n-   (0, 1, 2, 3).  */\n-\n-static unsigned\n-neon_logbits (unsigned x)\n-{\n-  return ffs (x) - 4;\n-}\n-\n-#define LOW4(R) ((R) & 0xf)\n-#define HI1(R) (((R) >> 4) & 1)\n-\n static void\n mve_encode_qqr (int size, int fp)\n {\n@@ -21096,6 +21341,10 @@ static const struct reg_entry reg_names[] =\n   REGDEF(WR, 7,RN), REGDEF(SB, 9,RN), REGDEF(SL,10,RN), REGDEF(FP,11,RN),\n   REGDEF(IP,12,RN), REGDEF(SP,13,RN), REGDEF(LR,14,RN), REGDEF(PC,15,RN),\n \n+  /* Defining the new Zero register from ARMv8.1-M.  */\n+  REGDEF(zr,15,ZR),\n+  REGDEF(ZR,15,ZR),\n+\n   /* Coprocessor numbers.  */\n   REGSET(p, CP), REGSET(P, CP),\n \n@@ -22911,8 +23160,6 @@ static const struct asm_opcode insns[] =\n  nCE(vnmul,     _vnmul,   3, (RVSD, RVSD, RVSD), vfp_nsyn_nmul),\n  nCE(vnmla,     _vnmla,   3, (RVSD, RVSD, RVSD), vfp_nsyn_nmul),\n  nCE(vnmls,     _vnmls,   3, (RVSD, RVSD, RVSD), vfp_nsyn_nmul),\n- nCE(vcmp,      _vcmp,    2, (RVSD, RSVD_FI0),    vfp_nsyn_cmp),\n- nCE(vcmpe,     _vcmpe,   2, (RVSD, RSVD_FI0),    vfp_nsyn_cmp),\n  NCE(vpush,     0,       1, (VRSDLST),          vfp_nsyn_push),\n  NCE(vpop,      0,       1, (VRSDLST),          vfp_nsyn_pop),\n  NCE(vcvtz,     0,       2, (RVSD, RVSD),       vfp_nsyn_cvtz),\n@@ -23628,6 +23875,23 @@ static const struct asm_opcode insns[] =\n \n #undef  THUMB_VARIANT\n #define THUMB_VARIANT & mve_ext\n+\n+ ToC(\"vpt\",\tee410f00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vptt\",\tee018f00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vpte\",\tee418f00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vpttt\",\tee014f00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vptte\",\tee01cf00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vptet\",\tee41cf00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vptee\",\tee414f00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vptttt\",\tee012f00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vpttte\",\tee016f00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vpttet\",\tee01ef00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vpttee\",\tee01af00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vptett\",\tee41af00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vptete\",\tee41ef00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vpteet\",\tee416f00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+ ToC(\"vpteee\",\tee412f00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n+\n  ToC(\"vpst\",\tfe710f4d, 0, (), mve_vpt),\n  ToC(\"vpstt\",\tfe318f4d, 0, (), mve_vpt),\n  ToC(\"vpste\",\tfe718f4d, 0, (), mve_vpt),\n@@ -23707,6 +23971,9 @@ static const struct asm_opcode insns[] =\n  mCEF(vmovlt, _vmovlt,\t1, (VMOV),\t\tmve_movl),\n  mCEF(vmovlb, _vmovlb,\t1, (VMOV),\t\tmve_movl),\n \n+ mnCE(vcmp,      _vcmp,    3, (RVSD_COND, RSVDMQ_FI0, oRMQRZ),    vfp_nsyn_cmp),\n+ mnCE(vcmpe,     _vcmpe,   3, (RVSD_COND, RSVDMQ_FI0, oRMQRZ),    vfp_nsyn_cmp),\n+\n #undef  ARM_VARIANT\n #define ARM_VARIANT  & fpu_vfp_ext_v2\n "
    },
    {
      "sha": "dd2706f084f9abc8e714f35289fbe7d88c142b78",
      "filename": "gas/testsuite/gas/arm/mve-vcmp-bad-1.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmp-bad-1.d?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VCMP instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vcmp-bad-1.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "65db78ab61ed5439d09834671a4d40615d84fc65",
      "filename": "gas/testsuite/gas/arm/mve-vcmp-bad-1.l",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-1.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-1.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmp-bad-1.l?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,31 @@\n+[^:]*: Assembler messages:\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Error: selected FPU does not support instruction -- `vcmp.f32 eq,q0,q1'\n+[^:]*:25: Error: selected FPU does not support instruction -- `vcmp.f32 eq,q0,r1'\n+[^:]*:26: Error: bad type in SIMD instruction -- `vcmp.i64 eq,q0,q1'\n+[^:]*:27: Error: invalid condition -- `vcmp.s32 eq,q0,q1'\n+[^:]*:28: Error: invalid condition -- `vcmp.s16 cs,q0,q1'\n+[^:]*:29: Error: invalid condition -- `vcmp.u8 le,q0,q1'\n+[^:]*:30: Error: condition required -- `vcmp.s16 q0,q1'\n+[^:]*:31: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:33: Error: syntax error -- `vcmpeq.i32 eq,q0,q1'\n+[^:]*:34: Error: syntax error -- `vcmpeq.i32 eq,q0,q1'\n+[^:]*:36: Error: syntax error -- `vcmpeq.i32 eq,q0,q1'\n+[^:]*:37: Error: vector predicated instruction should be in VPT/VPST block -- `vcmpt.i32 eq,q0,q1'\n+[^:]*:39: Error: instruction missing MVE vector predication code -- `vcmp.i32 eq,q0,q1'\n+[^:]*:41: Error: syntax error -- `vcmpeq.i32 eq,q0,r1'\n+[^:]*:42: Error: syntax error -- `vcmpeq.i32 eq,q0,r1'\n+[^:]*:44: Error: syntax error -- `vcmpeq.i32 eq,q0,r1'\n+[^:]*:45: Error: vector predicated instruction should be in VPT/VPST block -- `vcmpt.i32 eq,q0,r1'\n+[^:]*:47: Error: instruction missing MVE vector predication code -- `vcmp.i32 eq,q0,r1'"
    },
    {
      "sha": "116e23a80979321d3e8054cc25c523e969e359d9",
      "filename": "gas/testsuite/gas/arm/mve-vcmp-bad-1.s",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmp-bad-1.s?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,47 @@\n+.macro cond1\n+.irp cond, eq, ne, gt, ge, lt, le\n+.irp size, .\n+it \\cond\n+vcmp.s32 gt, q0, q1\n+.endr\n+.endr\n+.endm\n+\n+.macro cond2\n+.irp cond, eq, ne, gt, ge, lt, le\n+.irp size, .\n+it \\cond\n+vcmp.i16 eq, q0, r1\n+.endr\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+\n+cond1\n+cond2\n+vcmp.f32 eq, q0, q1\n+vcmp.f32 eq, q0, r1\n+vcmp.i64 eq, q0, q1\n+vcmp.s32 eq, q0, q1\n+vcmp.s16 cs, q0, q1\n+vcmp.u8 le, q0, q1\n+vcmp.s16 q0, q1\n+vcmp.i32 eq, q0, sp\n+it eq\n+vcmpeq.i32 eq, q0, q1\n+vcmpeq.i32 eq, q0, q1\n+vpst\n+vcmpeq.i32 eq, q0, q1\n+vcmpt.i32 eq, q0, q1\n+vpst\n+vcmp.i32 eq, q0, q1\n+it eq\n+vcmpeq.i32 eq, q0, r1\n+vcmpeq.i32 eq, q0, r1\n+vpst\n+vcmpeq.i32 eq, q0, r1\n+vcmpt.i32 eq, q0, r1\n+vpst\n+vcmp.i32 eq, q0, r1"
    },
    {
      "sha": "7d262517cc6324f0dbc1fca3420df29baa8f8e0c",
      "filename": "gas/testsuite/gas/arm/mve-vcmp-bad-2.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmp-bad-2.d?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE FP VCMP instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vcmp-bad-2.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "1305f0697329b108c48b9e7b55e1a064ff680a88",
      "filename": "gas/testsuite/gas/arm/mve-vcmp-bad-2.l",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmp-bad-2.l?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,25 @@\n+[^:]*: Assembler messages:\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Error: bad type in SIMD instruction -- `vcmp.f64 eq,q0,q1'\n+[^:]*:25: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:27: Error: syntax error -- `vcmpeq.f32 eq,q0,q1'\n+[^:]*:28: Error: syntax error -- `vcmpeq.f32 eq,q0,q1'\n+[^:]*:30: Error: syntax error -- `vcmpeq.f32 eq,q0,q1'\n+[^:]*:31: Error: vector predicated instruction should be in VPT/VPST block -- `vcmpt.f32 eq,q0,q1'\n+[^:]*:33: Error: instruction missing MVE vector predication code -- `vcmp.f32 eq,q0,q1'\n+[^:]*:35: Error: syntax error -- `vcmpeq.f32 eq,q0,r1'\n+[^:]*:36: Error: syntax error -- `vcmpeq.f32 eq,q0,r1'\n+[^:]*:38: Error: syntax error -- `vcmpeq.f32 eq,q0,r1'\n+[^:]*:39: Error: vector predicated instruction should be in VPT/VPST block -- `vcmpt.f32 eq,q0,r1'\n+[^:]*:41: Error: instruction missing MVE vector predication code -- `vcmp.f32 eq,q0,r1'"
    },
    {
      "sha": "c54b0e94043232cecb8c6496ac41643a39c778b4",
      "filename": "gas/testsuite/gas/arm/mve-vcmp-bad-2.s",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vcmp-bad-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vcmp-bad-2.s?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,41 @@\n+.macro cond1\n+.irp cond, eq, ne, gt, ge, lt, le\n+.irp size, .\n+it \\cond\n+vcmp.f32 gt, q0, q1\n+.endr\n+.endr\n+.endm\n+\n+.macro cond2\n+.irp cond, eq, ne, gt, ge, lt, le\n+.irp size, .\n+it \\cond\n+vcmp.f16 eq, q0, r1\n+.endr\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+\n+cond1\n+cond2\n+vcmp.f64 eq, q0, q1\n+vcmp.f32 eq, q0, sp\n+it eq\n+vcmpeq.f32 eq, q0, q1\n+vcmpeq.f32 eq, q0, q1\n+vpst\n+vcmpeq.f32 eq, q0, q1\n+vcmpt.f32 eq, q0, q1\n+vpst\n+vcmp.f32 eq, q0, q1\n+it eq\n+vcmpeq.f32 eq, q0, r1\n+vcmpeq.f32 eq, q0, r1\n+vpst\n+vcmpeq.f32 eq, q0, r1\n+vcmpt.f32 eq, q0, r1\n+vpst\n+vcmp.f32 eq, q0, r1"
    },
    {
      "sha": "8a4fe5371e8084afd0fcee1dd4da042192dbdedf",
      "filename": "gas/testsuite/gas/arm/mve-vpt-bad-1.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vpt-bad-1.d?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VPT instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vpt-bad-1.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "99036d29120aede14cd66217bf0564da42817bc3",
      "filename": "gas/testsuite/gas/arm/mve-vpt-bad-1.l",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-1.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-1.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vpt-bad-1.l?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,23 @@\n+[^:]*: Assembler messages:\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:17: Error: bad type in SIMD instruction -- `vpt.i64 eq,q0,q1'\n+[^:]*:18: Error: selected FPU does not support instruction -- `vpt.f16 eq,q0,q1'\n+[^:]*:19: Error: selected FPU does not support instruction -- `vpt.f32 eq,q0,q1'\n+[^:]*:20: Error: bad type in SIMD instruction -- `vpt.f64 eq,q0,q1'\n+[^:]*:22: Error: syntax error -- `vpteq.i8 eq,q0,q1'\n+[^:]*:23: Error: syntax error -- `vpteq.i8 eq,q0,q1'\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in a VPT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in a VPT block\n+[^:]*:30: Warning: .* finished with an open VPT/VPST block."
    },
    {
      "sha": "66d9980998f7f0d44ae036a8d7a08742aa549d61",
      "filename": "gas/testsuite/gas/arm/mve-vpt-bad-1.s",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vpt-bad-1.s?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,30 @@\n+.macro cond1, lastreg\n+.irp cond, eq, ne, gt, ge, lt, le\n+.irp size, .\n+it \\cond\n+vpt.i8 eq, q0, \\lastreg\n+vaddt.i32 q0, q1, q2\n+.endr\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+cond1 q1\n+cond1 r1\n+vpt.i8 eq, q0, sp\n+vaddt.i32 q0, q1, q2\n+vpt.i64 eq, q0, q1\n+vpt.f16 eq, q0, q1\n+vpt.f32 eq, q0, q1\n+vpt.f64 eq, q0, q1\n+it eq\n+vpteq.i8 eq, q0, q1\n+vpteq.i8 eq, q0, q1\n+vaddt.i32 q0, q0, q1\n+vpst\n+vptt.i8 eq, q0, q1\n+vptt.i8 eq, q0, q1\n+vaddt.i32 q0, q0, q1\n+vaddt.i32 q0, q0, q1\n+vpt.i8 eq, q0, q1"
    },
    {
      "sha": "27a5171aa2e9c401a4fc974da998d8f1e984c614",
      "filename": "gas/testsuite/gas/arm/mve-vpt-bad-2.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vpt-bad-2.d?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE FP VPT instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vpt-bad-2.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "9f11fe890fa00e60ae2f9d1712cd0e7f8b49dcb4",
      "filename": "gas/testsuite/gas/arm/mve-vpt-bad-2.l",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vpt-bad-2.l?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,21 @@\n+[^:]*: Assembler messages:\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:13: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:17: Error: bad type in SIMD instruction -- `vpt.f64 eq,q0,q1'\n+[^:]*:19: Error: syntax error -- `vpteq.f32 eq,q0,q1'\n+[^:]*:20: Error: syntax error -- `vpteq.f32 eq,q0,q1'\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in a VPT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in a VPT block\n+[^:]*:27: Warning: .* finished with an open VPT/VPST block.\n+"
    },
    {
      "sha": "83e9fd5b38773163161df955473f9b0961af9a26",
      "filename": "gas/testsuite/gas/arm/mve-vpt-bad-2.s",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b8833198c014f2d7f7a67097061f3b990707084/gas/testsuite/gas/arm/mve-vpt-bad-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vpt-bad-2.s?ref=1b8833198c014f2d7f7a67097061f3b990707084",
      "patch": "@@ -0,0 +1,27 @@\n+.macro cond1, lastreg\n+.irp cond, eq, ne, gt, ge, lt, le\n+.irp size, .\n+it \\cond\n+vpt.f16 eq, q0, \\lastreg\n+vaddt.i32 q0, q1, q2\n+.endr\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+cond1 q1\n+cond1 r1\n+vpt.f16 eq, q0, sp\n+vaddt.i32 q0, q1, q2\n+vpt.f64 eq, q0, q1\n+it eq\n+vpteq.f32 eq, q0, q1\n+vpteq.f32 eq, q0, q1\n+vaddt.i32 q0, q0, q1\n+vpst\n+vptt.f16 eq, q0, q1\n+vptt.f16 eq, q0, q1\n+vaddt.i32 q0, q0, q1\n+vaddt.i32 q0, q0, q1\n+vpt.f32 eq, q0, q1"
    }
  ]
}