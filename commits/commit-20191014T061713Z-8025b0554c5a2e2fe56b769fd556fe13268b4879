{
  "sha": "8025b0554c5a2e2fe56b769fd556fe13268b4879",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODAyNWIwNTU0YzVhMmUyZmU1NmI3NjlmZDU1NmZlMTMyNjhiNDg3OQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-14T03:22:32Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-14T06:17:13Z"
    },
    "message": "qsort: dwarf2.c\n\nThis patch ensures qsort stability in line and function sorting done\nin dwarf2.c.  For the line sequences we make use of an existing field\nthat isn't used until later, as a monotonic counter for the qsort.\n\n\t* dwarf2.c (struct lookup_funcinfo): Add idx field.\n\t(compare_lookup_funcinfos): Perform final sort on idx.\n\t(build_lookup_funcinfo_table): Set idx.\n\t(compare_sequences): Perform final sort on num_lines.\n\t(build_line_info_table): Set num_lines and line_info_lookup earlier.\n\t(sort_line_sequences): Set num_lines for sort.",
    "tree": {
      "sha": "ed6b83bb9aa8e9e9c6eee67992c87e92b2a78ad2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ed6b83bb9aa8e9e9c6eee67992c87e92b2a78ad2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8025b0554c5a2e2fe56b769fd556fe13268b4879",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8025b0554c5a2e2fe56b769fd556fe13268b4879",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8025b0554c5a2e2fe56b769fd556fe13268b4879",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8025b0554c5a2e2fe56b769fd556fe13268b4879/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3a3f4bf76a4790e81ee186ea76731a7f67dba1c8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a3f4bf76a4790e81ee186ea76731a7f67dba1c8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3a3f4bf76a4790e81ee186ea76731a7f67dba1c8"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 24,
    "deletions": 5
  },
  "files": [
    {
      "sha": "3593fa815a938f0ee0a08782a79200a809c4645e",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8025b0554c5a2e2fe56b769fd556fe13268b4879/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8025b0554c5a2e2fe56b769fd556fe13268b4879/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=8025b0554c5a2e2fe56b769fd556fe13268b4879",
      "patch": "@@ -1,3 +1,12 @@\n+2019-10-14  Alan Modra  <amodra@gmail.com>\n+\n+\t* dwarf2.c (struct lookup_funcinfo): Add idx field.\n+\t(compare_lookup_funcinfos): Perform final sort on idx.\n+\t(build_lookup_funcinfo_table): Set idx.\n+\t(compare_sequences): Perform final sort on num_lines.\n+\t(build_line_info_table): Set num_lines and line_info_lookup earlier.\n+\t(sort_line_sequences): Set num_lines for sort.\n+\n 2019-10-14  Alan Modra  <amodra@gmail.com>\n \n \t* elflink.c (elf_sort_symbol): Sort on type and name as well."
    },
    {
      "sha": "c3d9ffc3c5f73369a3164a09431baa7645d9432f",
      "filename": "bfd/dwarf2.c",
      "status": "modified",
      "additions": 15,
      "deletions": 5,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8025b0554c5a2e2fe56b769fd556fe13268b4879/bfd/dwarf2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8025b0554c5a2e2fe56b769fd556fe13268b4879/bfd/dwarf2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/dwarf2.c?ref=8025b0554c5a2e2fe56b769fd556fe13268b4879",
      "patch": "@@ -1413,6 +1413,8 @@ struct lookup_funcinfo\n      The highest address of all prior functions after the lookup table is\n      sorted, which is used for binary search.  */\n   bfd_vma\t\thigh_addr;\n+  /* Index of this function, used to ensure qsort is stable.  */\n+  unsigned int idx;\n };\n \n struct varinfo\n@@ -1713,6 +1715,11 @@ compare_sequences (const void* a, const void* b)\n   if (seq1->last_line->op_index > seq2->last_line->op_index)\n     return -1;\n \n+  /* num_lines is initially an index, to make the sort stable.  */\n+  if (seq1->num_lines < seq2->num_lines)\n+    return -1;\n+  if (seq1->num_lines > seq2->num_lines)\n+    return 1;\n   return 0;\n }\n \n@@ -1739,12 +1746,14 @@ build_line_info_table (struct line_info_table *  table,\n   for (each_line = seq->last_line; each_line; each_line = each_line->prev_line)\n     num_lines++;\n \n+  seq->num_lines = num_lines;\n   if (num_lines == 0)\n     return TRUE;\n \n   /* Allocate space for the line information lookup table.  */\n   amt = sizeof (struct line_info*) * num_lines;\n   line_info_lookup = (struct line_info**) bfd_alloc (table->abfd, amt);\n+  seq->line_info_lookup = line_info_lookup;\n   if (line_info_lookup == NULL)\n     return FALSE;\n \n@@ -1754,10 +1763,6 @@ build_line_info_table (struct line_info_table *  table,\n     line_info_lookup[--line_index] = each_line;\n \n   BFD_ASSERT (line_index == 0);\n-\n-  seq->num_lines = num_lines;\n-  seq->line_info_lookup = line_info_lookup;\n-\n   return TRUE;\n }\n \n@@ -1793,7 +1798,7 @@ sort_line_sequences (struct line_info_table* table)\n       sequences[n].prev_sequence = NULL;\n       sequences[n].last_line = seq->last_line;\n       sequences[n].line_info_lookup = NULL;\n-      sequences[n].num_lines = 0;\n+      sequences[n].num_lines = n;\n       seq = seq->prev_sequence;\n       free (last_seq);\n     }\n@@ -2569,6 +2574,10 @@ compare_lookup_funcinfos (const void * a, const void * b)\n   if (lookup1->high_addr > lookup2->high_addr)\n     return 1;\n \n+  if (lookup1->idx < lookup2->idx)\n+    return -1;\n+  if (lookup1->idx > lookup2->idx)\n+    return 1;\n   return 0;\n }\n \n@@ -2598,6 +2607,7 @@ build_lookup_funcinfo_table (struct comp_unit * unit)\n     {\n       entry = &lookup_funcinfo_table[--func_index];\n       entry->funcinfo = each;\n+      entry->idx = func_index;\n \n       /* Calculate the lowest and highest address for this function entry.  */\n       low_addr  = entry->funcinfo->arange.low;"
    }
  ]
}