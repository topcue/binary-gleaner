{
  "sha": "46916f2bcbaf4532aab9fecb2344330710129ffa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDY5MTZmMmJjYmFmNDUzMmFhYjlmZWNiMjM0NDMzMDcxMDEyOWZmYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:20Z"
    },
    "message": "Implement binary comparison operations\n\nThis implements the binary comparison operations via a template class.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class comparison_operation): New.\n\t(equal_operation, notequal_operation, less_operation)\n\t(gtr_operation, geq_operation, leq_operation): New typedefs.\n\t* eval.c (eval_op_equal, eval_op_notequal, eval_op_less)\n\t(eval_op_gtr, eval_op_geq, eval_op_leq): No longer static.",
    "tree": {
      "sha": "bb6f37c488243ab4adeccf3a814891584f956910",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bb6f37c488243ab4adeccf3a814891584f956910"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/46916f2bcbaf4532aab9fecb2344330710129ffa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46916f2bcbaf4532aab9fecb2344330710129ffa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/46916f2bcbaf4532aab9fecb2344330710129ffa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46916f2bcbaf4532aab9fecb2344330710129ffa/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "224d6424bab021a0a8e16f07d52f8af5e153e91f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/224d6424bab021a0a8e16f07d52f8af5e153e91f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/224d6424bab021a0a8e16f07d52f8af5e153e91f"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 74,
    "deletions": 6
  },
  "files": [
    {
      "sha": "1f3287aefb3b2c038f4f666cee96edd5c5a2bc2e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46916f2bcbaf4532aab9fecb2344330710129ffa/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46916f2bcbaf4532aab9fecb2344330710129ffa/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=46916f2bcbaf4532aab9fecb2344330710129ffa",
      "patch": "@@ -1,3 +1,11 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class comparison_operation): New.\n+\t(equal_operation, notequal_operation, less_operation)\n+\t(gtr_operation, geq_operation, leq_operation): New typedefs.\n+\t* eval.c (eval_op_equal, eval_op_notequal, eval_op_less)\n+\t(eval_op_gtr, eval_op_geq, eval_op_leq): No longer static.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class subscript_operation): New."
    },
    {
      "sha": "83d0147f96e4efce3f6b291467d8b7494c1117a0",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46916f2bcbaf4532aab9fecb2344330710129ffa/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46916f2bcbaf4532aab9fecb2344330710129ffa/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=46916f2bcbaf4532aab9fecb2344330710129ffa",
      "patch": "@@ -1594,7 +1594,7 @@ eval_op_subscript (struct type *expect_type, struct expression *exp,\n \n /* A helper function for BINOP_EQUAL.  */\n \n-static struct value *\n+struct value *\n eval_op_equal (struct type *expect_type, struct expression *exp,\n \t       enum noside noside, enum exp_opcode op,\n \t       struct value *arg1, struct value *arg2)\n@@ -1617,7 +1617,7 @@ eval_op_equal (struct type *expect_type, struct expression *exp,\n \n /* A helper function for BINOP_NOTEQUAL.  */\n \n-static struct value *\n+struct value *\n eval_op_notequal (struct type *expect_type, struct expression *exp,\n \t\t  enum noside noside, enum exp_opcode op,\n \t\t  struct value *arg1, struct value *arg2)\n@@ -1640,7 +1640,7 @@ eval_op_notequal (struct type *expect_type, struct expression *exp,\n \n /* A helper function for BINOP_LESS.  */\n \n-static struct value *\n+struct value *\n eval_op_less (struct type *expect_type, struct expression *exp,\n \t      enum noside noside, enum exp_opcode op,\n \t      struct value *arg1, struct value *arg2)\n@@ -1663,7 +1663,7 @@ eval_op_less (struct type *expect_type, struct expression *exp,\n \n /* A helper function for BINOP_GTR.  */\n \n-static struct value *\n+struct value *\n eval_op_gtr (struct type *expect_type, struct expression *exp,\n \t     enum noside noside, enum exp_opcode op,\n \t     struct value *arg1, struct value *arg2)\n@@ -1686,7 +1686,7 @@ eval_op_gtr (struct type *expect_type, struct expression *exp,\n \n /* A helper function for BINOP_GEQ.  */\n \n-static struct value *\n+struct value *\n eval_op_geq (struct type *expect_type, struct expression *exp,\n \t     enum noside noside, enum exp_opcode op,\n \t     struct value *arg1, struct value *arg2)\n@@ -1709,7 +1709,7 @@ eval_op_geq (struct type *expect_type, struct expression *exp,\n \n /* A helper function for BINOP_LEQ.  */\n \n-static struct value *\n+struct value *\n eval_op_leq (struct type *expect_type, struct expression *exp,\n \t     enum noside noside, enum exp_opcode op,\n \t     struct value *arg1, struct value *arg2)"
    },
    {
      "sha": "af378d011f853d764274d0e0e979f47521350263",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46916f2bcbaf4532aab9fecb2344330710129ffa/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46916f2bcbaf4532aab9fecb2344330710129ffa/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=46916f2bcbaf4532aab9fecb2344330710129ffa",
      "patch": "@@ -105,6 +105,36 @@ extern struct value *eval_op_subscript (struct type *expect_type,\n \t\t\t\t\tenum noside noside, enum exp_opcode op,\n \t\t\t\t\tstruct value *arg1,\n \t\t\t\t\tstruct value *arg2);\n+extern struct value *eval_op_equal (struct type *expect_type,\n+\t\t\t\t    struct expression *exp,\n+\t\t\t\t    enum noside noside, enum exp_opcode op,\n+\t\t\t\t    struct value *arg1,\n+\t\t\t\t    struct value *arg2);\n+extern struct value *eval_op_notequal (struct type *expect_type,\n+\t\t\t\t       struct expression *exp,\n+\t\t\t\t       enum noside noside, enum exp_opcode op,\n+\t\t\t\t       struct value *arg1,\n+\t\t\t\t       struct value *arg2);\n+extern struct value *eval_op_less (struct type *expect_type,\n+\t\t\t\t   struct expression *exp,\n+\t\t\t\t   enum noside noside, enum exp_opcode op,\n+\t\t\t\t   struct value *arg1,\n+\t\t\t\t   struct value *arg2);\n+extern struct value *eval_op_gtr (struct type *expect_type,\n+\t\t\t\t  struct expression *exp,\n+\t\t\t\t  enum noside noside, enum exp_opcode op,\n+\t\t\t\t  struct value *arg1,\n+\t\t\t\t  struct value *arg2);\n+extern struct value *eval_op_geq (struct type *expect_type,\n+\t\t\t\t  struct expression *exp,\n+\t\t\t\t  enum noside noside, enum exp_opcode op,\n+\t\t\t\t  struct value *arg1,\n+\t\t\t\t  struct value *arg2);\n+extern struct value *eval_op_leq (struct type *expect_type,\n+\t\t\t\t  struct expression *exp,\n+\t\t\t\t  enum noside noside, enum exp_opcode op,\n+\t\t\t\t  struct value *arg1,\n+\t\t\t\t  struct value *arg2);\n \n namespace expr\n {\n@@ -1128,6 +1158,36 @@ class subscript_operation\n \t\t\t      enum noside noside) override;\n };\n \n+/* Implementation of comparison operations.  */\n+template<enum exp_opcode OP, binary_ftype FUNC>\n+class comparison_operation\n+  : public usual_ax_binop_operation<OP, FUNC>\n+{\n+public:\n+\n+  using usual_ax_binop_operation<OP, FUNC>::usual_ax_binop_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *lhs\n+      = std::get<0> (this->m_storage)->evaluate (nullptr, exp, noside);\n+    value *rhs\n+      = std::get<1> (this->m_storage)->evaluate (value_type (lhs), exp,\n+\t\t\t\t\t\t noside);\n+    return FUNC (expect_type, exp, noside, OP, lhs, rhs);\n+  }\n+};\n+\n+using equal_operation = comparison_operation<BINOP_EQUAL, eval_op_equal>;\n+using notequal_operation\n+     = comparison_operation<BINOP_NOTEQUAL, eval_op_notequal>;\n+using less_operation = comparison_operation<BINOP_LESS, eval_op_less>;\n+using gtr_operation = comparison_operation<BINOP_GTR, eval_op_gtr>;\n+using geq_operation = comparison_operation<BINOP_GEQ, eval_op_geq>;\n+using leq_operation = comparison_operation<BINOP_LEQ, eval_op_leq>;\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}