{
  "sha": "e97436b1b789dcdb6ffb502263f4c86f8bc22996",
  "node_id": "C_kwDOANOeidoAKGU5NzQzNmIxYjc4OWRjZGI2ZmZiNTAyMjYzZjRjODZmOGJjMjI5OTY",
  "commit": {
    "author": {
      "name": "Sergei Trofimovich",
      "email": "siarheit@google.com",
      "date": "2021-11-14T17:39:35Z"
    },
    "committer": {
      "name": "Sergei Trofimovich",
      "email": "siarheit@google.com",
      "date": "2021-11-16T23:32:00Z"
    },
    "message": "sim: cr16: fix build on gcc-12 (NULL comparison)\n\nOn gcc-12 build fails as:\n\n    sim/cr16/interp.c: In function 'lookup_hash':\n    sim/cr16/interp.c:89:25: error:\n      the comparison will always evaluate as 'true'\n      for the address of 'mnimonic' will never be NULL [-Werror=address]\n       89 |   if ((h->ops->mnimonic != NULL) &&\n          |                         ^~\n\n'mnimonic' is a sharr array within ops. It can never be NULL.\n\nWhile at it renamed 'mnimonic' to 'mnemonic'.",
    "tree": {
      "sha": "b9f1a2bdf5eab33e6d1fb34298b5d5383dac1c08",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b9f1a2bdf5eab33e6d1fb34298b5d5383dac1c08"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e97436b1b789dcdb6ffb502263f4c86f8bc22996",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e97436b1b789dcdb6ffb502263f4c86f8bc22996",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e97436b1b789dcdb6ffb502263f4c86f8bc22996",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e97436b1b789dcdb6ffb502263f4c86f8bc22996/comments",
  "author": {
    "login": "trofi",
    "id": 226650,
    "node_id": "MDQ6VXNlcjIyNjY1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/226650?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trofi",
    "html_url": "https://github.com/trofi",
    "followers_url": "https://api.github.com/users/trofi/followers",
    "following_url": "https://api.github.com/users/trofi/following{/other_user}",
    "gists_url": "https://api.github.com/users/trofi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trofi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trofi/subscriptions",
    "organizations_url": "https://api.github.com/users/trofi/orgs",
    "repos_url": "https://api.github.com/users/trofi/repos",
    "events_url": "https://api.github.com/users/trofi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trofi/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "trofi",
    "id": 226650,
    "node_id": "MDQ6VXNlcjIyNjY1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/226650?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/trofi",
    "html_url": "https://github.com/trofi",
    "followers_url": "https://api.github.com/users/trofi/followers",
    "following_url": "https://api.github.com/users/trofi/following{/other_user}",
    "gists_url": "https://api.github.com/users/trofi/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/trofi/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/trofi/subscriptions",
    "organizations_url": "https://api.github.com/users/trofi/orgs",
    "repos_url": "https://api.github.com/users/trofi/repos",
    "events_url": "https://api.github.com/users/trofi/events{/privacy}",
    "received_events_url": "https://api.github.com/users/trofi/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7f74204ad972f6c0d0ff846af9f1f2f7e76fa5c5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f74204ad972f6c0d0ff846af9f1f2f7e76fa5c5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7f74204ad972f6c0d0ff846af9f1f2f7e76fa5c5"
    }
  ],
  "stats": {
    "total": 7,
    "additions": 3,
    "deletions": 4
  },
  "files": [
    {
      "sha": "35a9614977c75e2db90a61888183581dcef2b3fa",
      "filename": "sim/cr16/cr16_sim.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97436b1b789dcdb6ffb502263f4c86f8bc22996/sim/cr16/cr16_sim.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97436b1b789dcdb6ffb502263f4c86f8bc22996/sim/cr16/cr16_sim.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cr16/cr16_sim.h?ref=e97436b1b789dcdb6ffb502263f4c86f8bc22996",
      "patch": "@@ -59,7 +59,7 @@ typedef uint32 creg_t;\n \n struct simops \n {\n-  char mnimonic[12];\n+  char mnemonic[12];\n   uint32 size;\n   uint32 mask;\n   uint32 opcode;"
    },
    {
      "sha": "18e1db9f73923163517bed3e720229bdf3b3cfe5",
      "filename": "sim/cr16/interp.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e97436b1b789dcdb6ffb502263f4c86f8bc22996/sim/cr16/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e97436b1b789dcdb6ffb502263f4c86f8bc22996/sim/cr16/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cr16/interp.c?ref=e97436b1b789dcdb6ffb502263f4c86f8bc22996",
      "patch": "@@ -86,8 +86,7 @@ lookup_hash (SIM_DESC sd, SIM_CPU *cpu, uint64 ins, int size)\n   mask = (((1 << (32 - h->mask)) -1) << h->mask);\n \n  /* Adjuest mask for branch with 2 word instructions.  */\n-  if ((h->ops->mnimonic != NULL) &&\n-      ((streq(h->ops->mnimonic,\"b\") && h->size == 2)))\n+  if (streq(h->ops->mnemonic,\"b\") && h->size == 2)\n     mask = 0xff0f0000;\n \n \n@@ -99,7 +98,7 @@ lookup_hash (SIM_DESC sd, SIM_CPU *cpu, uint64 ins, int size)\n \n       mask = (((1 << (32 - h->mask)) -1) << h->mask);\n      /* Adjuest mask for branch with 2 word instructions.  */\n-     if ((streq(h->ops->mnimonic,\"b\")) && h->size == 2)\n+     if ((streq(h->ops->mnemonic,\"b\")) && h->size == 2)\n        mask = 0xff0f0000;\n \n      }"
    }
  ]
}