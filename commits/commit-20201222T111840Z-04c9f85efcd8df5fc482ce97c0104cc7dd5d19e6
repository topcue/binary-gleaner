{
  "sha": "04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDRjOWY4NWVmY2Q4ZGY1ZmM0ODJjZTk3YzAxMDRjYzdkZDVkMTllNg==",
  "commit": {
    "author": {
      "name": "Anton Kolesov",
      "email": "anton.kolesov@synopsys.com",
      "date": "2014-02-14T07:56:23Z"
    },
    "committer": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2020-12-22T11:18:40Z"
    },
    "message": "gdb: Add native support for ARC in GNU/Linux\n\nWith this patch in place it is possible to build a GDB that\ncan run on ARC (GNU/Linux) hosts for debugging ARC targets.\n\nThe \"arc-linux-nat.c\" is a rather small one that mostly deals\nwith registers and a few thread related hooks.\n\nv2 [1]:\n- Remove \"void\" from the input of \"_initialize_arc_linux_nat ()\"\n\n[1] Tom's remark after the first patch\nhttps://sourceware.org/pipermail/gdb-patches/2020-November/173223.html\n\ngdb/ChangeLog:\n\n\t* Makefile.in (ALLDEPFILES): Add arc-linux-nat.c.\n\t* configure.host (host to gdb names): Add arc*-*-linux*.\n\t* configure.nat (gdb_host_cpu): Add arc.\n\t* arc-linux-nat.c: New.",
    "tree": {
      "sha": "175e2da06c71f8c43abce4c0b1802ba25795df7b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/175e2da06c71f8c43abce4c0b1802ba25795df7b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6/comments",
  "author": {
    "login": "anthony-kolesov",
    "id": 602123,
    "node_id": "MDQ6VXNlcjYwMjEyMw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/602123?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/anthony-kolesov",
    "html_url": "https://github.com/anthony-kolesov",
    "followers_url": "https://api.github.com/users/anthony-kolesov/followers",
    "following_url": "https://api.github.com/users/anthony-kolesov/following{/other_user}",
    "gists_url": "https://api.github.com/users/anthony-kolesov/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/anthony-kolesov/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/anthony-kolesov/subscriptions",
    "organizations_url": "https://api.github.com/users/anthony-kolesov/orgs",
    "repos_url": "https://api.github.com/users/anthony-kolesov/repos",
    "events_url": "https://api.github.com/users/anthony-kolesov/events{/privacy}",
    "received_events_url": "https://api.github.com/users/anthony-kolesov/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "46023bbe81355230b4e7b76d3084337823d02362",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46023bbe81355230b4e7b76d3084337823d02362",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/46023bbe81355230b4e7b76d3084337823d02362"
    }
  ],
  "stats": {
    "total": 335,
    "additions": 335,
    "deletions": 0
  },
  "files": [
    {
      "sha": "c961d72a66ccd88ef5d7e0600ee1d4b1f6c26a1a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6",
      "patch": "@@ -1,3 +1,10 @@\n+2020-12-22  Anton Kolesov  <anton.kolesov@synopsys.com>\n+\n+\t* Makefile.in (ALLDEPFILES): Add arc-linux-nat.c.\n+\t* configure.host (host to gdb names): Add arc*-*-linux*.\n+\t* configure.nat (gdb_host_cpu): Add arc.\n+\t* arc-linux-nat.c: New.\n+\n 2020-12-22  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* arc-linux-tdep.c (supply_register): New."
    },
    {
      "sha": "999b294061210738c24e8bac98e8c03fb2e12762",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6",
      "patch": "@@ -2152,6 +2152,7 @@ ALLDEPFILES = \\\n \tamd64-ravenscar-thread.c \\\n \tamd64-sol2-tdep.c \\\n \tamd64-tdep.c \\\n+\tarc-linux-nat.c \\\n \tarc-tdep.c \\\n \tarm.c \\\n \tarm-bsd-tdep.c \\"
    },
    {
      "sha": "41301fd4fededfb135f3b2b1492dc3c22da7bc4d",
      "filename": "gdb/arc-linux-nat.c",
      "status": "added",
      "additions": 320,
      "deletions": 0,
      "changes": 320,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6/gdb/arc-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6/gdb/arc-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-linux-nat.c?ref=04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6",
      "patch": "@@ -0,0 +1,320 @@\n+/* Native-dependent code for GNU/Linux ARC.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"frame.h\"\n+#include \"inferior.h\"\n+#include \"gdbcore.h\"\n+#include \"regcache.h\"\n+#include \"gdbsupport/gdb_assert.h\"\n+#include \"target.h\"\n+#include \"linux-nat.h\"\n+#include \"nat/gdb_ptrace.h\"\n+\n+#include <stdint.h>\n+#include <sys/types.h>\n+#include <sys/param.h>\n+#include <signal.h>\n+#include <sys/user.h>\n+#include <sys/ioctl.h>\n+#include \"gdbsupport/gdb_wait.h\"\n+#include <fcntl.h>\n+#include <sys/procfs.h>\n+#include <linux/elf.h>\n+\n+#include \"gregset.h\"\n+#include \"arc-tdep.h\"\n+#include \"arc-linux-tdep.h\"\n+#include \"arch/arc.h\"\n+\n+/* Defines ps_err_e, struct ps_prochandle.  */\n+#include \"gdb_proc_service.h\"\n+\n+/* Linux starting with 4.12 supports NT_ARC_V2 note type, which adds R30,\n+   R58 and R59 registers, which are specific to ARC HS and aren't\n+   available in ARC 700.  */\n+#if defined (NT_ARC_V2) && defined (__ARCHS__)\n+#define ARC_HAS_V2_REGSET\n+#endif\n+\n+class arc_linux_nat_target final : public linux_nat_target\n+{\n+public:\n+  /* Add ARC register access methods.  */\n+  void fetch_registers (struct regcache *, int) override;\n+  void store_registers (struct regcache *, int) override;\n+\n+  const struct target_desc *read_description () override;\n+\n+  /* Handle threads  */\n+  void low_prepare_to_resume (struct lwp_info *lp) override;\n+};\n+\n+static arc_linux_nat_target the_arc_linux_nat_target;\n+\n+/* Read general registers from target process/thread (via ptrace)\n+   into REGCACHE.  */\n+\n+static void\n+fetch_gregs (struct regcache *regcache, int regnum)\n+{\n+  const int tid = get_ptrace_pid (regcache->ptid ());\n+  struct iovec iov;\n+  gdb_gregset_t regs;\n+\n+  iov.iov_base = &regs;\n+  iov.iov_len = sizeof (gdb_gregset_t);\n+\n+  if (ptrace (PTRACE_GETREGSET, tid, NT_PRSTATUS, (void *) &iov) < 0)\n+    perror_with_name (_(\"Couldn't get general registers\"));\n+  else\n+    arc_linux_supply_gregset (NULL, regcache, regnum, &regs, 0);\n+}\n+\n+#ifdef ARC_HAS_V2_REGSET\n+/* Read ARC v2 registers from target process/thread (via ptrace)\n+   into REGCACHE.  */\n+\n+static void\n+fetch_v2_regs (struct regcache *regcache, int regnum)\n+{\n+  const int tid = get_ptrace_pid (regcache->ptid ());\n+  struct iovec iov;\n+  bfd_byte v2_buffer[ARC_LINUX_SIZEOF_V2_REGSET];\n+\n+  iov.iov_base = &v2_buffer;\n+  iov.iov_len = ARC_LINUX_SIZEOF_V2_REGSET;\n+\n+  if (ptrace (PTRACE_GETREGSET, tid, NT_ARC_V2, (void *) &iov) < 0)\n+    perror_with_name (_(\"Couldn't get ARC HS registers\"));\n+  else\n+    arc_linux_supply_v2_regset (NULL, regcache, regnum, v2_buffer, 0);\n+}\n+#endif\n+\n+/* Store general registers from REGCACHE into the target process/thread.  */\n+\n+static void\n+store_gregs (const struct regcache *regcache, int regnum)\n+{\n+  const int tid = get_ptrace_pid (regcache->ptid ());\n+  struct iovec iov;\n+  gdb_gregset_t regs;\n+\n+  iov.iov_base = &regs;\n+  iov.iov_len = sizeof (gdb_gregset_t);\n+\n+  if (ptrace (PTRACE_GETREGSET, tid, NT_PRSTATUS, (void *) &iov) < 0)\n+    perror_with_name (_(\"Couldn't get general registers\"));\n+  else\n+    {\n+      arc_linux_collect_gregset (NULL, regcache, regnum, regs, 0);\n+\n+      if (ptrace (PTRACE_SETREGSET, tid, NT_PRSTATUS, (void *) &iov) < 0)\n+\tperror_with_name (_(\"Couldn't write general registers\"));\n+    }\n+}\n+\n+#ifdef ARC_HAS_V2_REGSET\n+/* Store ARC v2 registers from REGCACHE into the target process/thread.  */\n+\n+static void\n+store_v2_regs (const struct regcache *regcache, int regnum)\n+{\n+  const int tid = get_ptrace_pid (regcache->ptid ());\n+  struct iovec iov;\n+  bfd_byte v2_buffer[ARC_LINUX_SIZEOF_V2_REGSET];\n+\n+  iov.iov_base = &v2_buffer;\n+  iov.iov_len = ARC_LINUX_SIZEOF_V2_REGSET;\n+\n+  if (ptrace (PTRACE_GETREGSET, tid, NT_ARC_V2, (void *) &iov) < 0)\n+    perror_with_name (_(\"Couldn't get ARC HS registers\"));\n+  else\n+    {\n+      arc_linux_collect_v2_regset (NULL, regcache, regnum, v2_buffer, 0);\n+\n+      if (ptrace (PTRACE_SETREGSET, tid, NT_ARC_V2, (void *) &iov) < 0)\n+\tperror_with_name (_(\"Couldn't write ARC HS registers\"));\n+    }\n+}\n+#endif\n+\n+/* Target operation: Read REGNUM register (all registers if REGNUM == -1)\n+   from target process into REGCACHE.  */\n+\n+void\n+arc_linux_nat_target::fetch_registers (struct regcache *regcache, int regnum)\n+{\n+\n+  if (regnum == -1 || regnum <= ARC_LAST_REGNUM)\n+    fetch_gregs (regcache, regnum);\n+\n+#ifdef ARC_HAS_V2_REGSET\n+  if (regnum == -1\n+      || regnum == ARC_R30_REGNUM\n+      || regnum == ARC_R58_REGNUM\n+      || regnum == ARC_R59_REGNUM)\n+      fetch_v2_regs (regcache, regnum);\n+#endif\n+}\n+\n+/* Target operation: Store REGNUM register (all registers if REGNUM == -1)\n+   to the target process from REGCACHE.  */\n+\n+void\n+arc_linux_nat_target::store_registers (struct regcache *regcache, int regnum)\n+{\n+  if (regnum == -1 || regnum <= ARC_LAST_REGNUM)\n+    store_gregs (regcache, regnum);\n+\n+#ifdef ARC_HAS_V2_REGSET\n+  if (regnum == -1\n+      || regnum == ARC_R30_REGNUM\n+      || regnum == ARC_R58_REGNUM\n+      || regnum == ARC_R59_REGNUM)\n+    store_v2_regs (regcache, regnum);\n+#endif\n+}\n+\n+/* Copy general purpose register(s) from REGCACHE into regset GREGS.\n+   This function is exported to proc-service.c  */\n+\n+void\n+fill_gregset (const struct regcache *regcache,\n+\t      gdb_gregset_t *gregs, int regnum)\n+{\n+  arc_linux_collect_gregset (NULL, regcache, regnum, gregs, 0);\n+}\n+\n+/* Copy all the general purpose registers from regset GREGS into REGCACHE.\n+   This function is exported to proc-service.c.  */\n+\n+void\n+supply_gregset (struct regcache *regcache, const gdb_gregset_t *gregs)\n+{\n+  arc_linux_supply_gregset (NULL, regcache, -1, gregs, 0);\n+}\n+\n+/* ARC doesn't have separate FP registers.  This function is exported\n+   to proc-service.c.  */\n+\n+void\n+fill_fpregset (const struct regcache *regcache,\n+\t       gdb_fpregset_t *fpregsetp, int regnum)\n+{\n+  if (arc_debug)\n+    debug_printf (\"arc-linux-nat: fill_fpregset called.\");\n+  return;\n+}\n+\n+/* ARC doesn't have separate FP registers.  This function is exported\n+   to proc-service.c.  */\n+\n+void\n+supply_fpregset (struct regcache *regcache, const gdb_fpregset_t *fpregsetp)\n+{\n+  if (arc_debug)\n+    debug_printf (\"arc-linux-nat: supply_fpregset called.\");\n+  return;\n+}\n+\n+/* Implement the \"read_description\" method of linux_nat_target.  */\n+\n+const struct target_desc *\n+arc_linux_nat_target::read_description ()\n+{\n+  /* This is a native target, hence description is hardcoded.  */\n+#ifdef __ARCHS__\n+  arc_arch_features features (4, ARC_ISA_ARCV2);\n+#else\n+  arc_arch_features features (4, ARC_ISA_ARCV1);\n+#endif\n+  return arc_lookup_target_description (features);\n+}\n+\n+/* As described in arc_linux_collect_gregset(), we need to write resume-PC\n+   to ERET.  However by default GDB for native targets doesn't write\n+   registers if they haven't been changed.  This is a callback called by\n+   generic GDB, and in this callback we have to rewrite PC value so it\n+   would force rewrite of register on target.  It seems that the only\n+   other arch that utilizes this hook is x86/x86-64 for HW breakpoint\n+   support.  But then, AFAIK no other arch has this stop_pc/eret\n+   complexity.\n+\n+   No better way was found, other than this fake write of register value,\n+   to force GDB into writing register to target.  Is there any?  */\n+\n+void\n+arc_linux_nat_target::low_prepare_to_resume (struct lwp_info *lwp)\n+{\n+  /* When new processes and threads are created we do not have the address\n+     space for them and calling get_thread_regcache will cause an internal\n+     error in GDB.  It looks like that checking for last_resume_kind is the\n+     sensible way to determine processes for which we cannot get regcache.\n+     Ultimately, a better way would be removing the need for\n+     low_prepare_to_resume in the first place.  */\n+  if (lwp->last_resume_kind == resume_stop)\n+    return;\n+\n+  struct regcache *regcache = get_thread_regcache (this, lwp->ptid);\n+  struct gdbarch *gdbarch = regcache->arch ();\n+\n+  /* Read current PC value, then write it back.  It is required to call\n+     invalidate(), otherwise GDB will note that new value is equal to old\n+     value and will skip write.  */\n+  ULONGEST new_pc;\n+  regcache_cooked_read_unsigned (regcache, gdbarch_pc_regnum (gdbarch),\n+\t\t\t\t &new_pc);\n+  regcache->invalidate (gdbarch_pc_regnum (gdbarch));\n+  regcache_cooked_write_unsigned (regcache, gdbarch_pc_regnum (gdbarch),\n+\t\t\t\t  new_pc);\n+}\n+\n+/* Fetch the thread-local storage pointer for libthread_db.  Note that\n+   this function is not called from GDB, but is called from libthread_db.\n+   This is required to debug multithreaded applications with NPTL.  */\n+\n+ps_err_e\n+ps_get_thread_area (struct ps_prochandle *ph, lwpid_t lwpid, int idx,\n+\t\t    void **base)\n+{\n+  if (arc_debug >= 2)\n+    debug_printf (\"arc-linux-nat: ps_get_thread_area called\");\n+\n+  if (ptrace (PTRACE_GET_THREAD_AREA, lwpid, NULL, base) != 0)\n+    return PS_ERR;\n+\n+  /* IDX is the bias from the thread pointer to the beginning of the\n+     thread descriptor.  It has to be subtracted due to implementation\n+     quirks in libthread_db.  */\n+  *base = (void *) ((char *) *base - idx);\n+\n+  return PS_OK;\n+}\n+\n+/* Suppress warning from -Wmissing-prototypes.  */\n+void _initialize_arc_linux_nat ();\n+void\n+_initialize_arc_linux_nat ()\n+{\n+  /* Register the target.  */\n+  linux_target = &the_arc_linux_nat_target;\n+  add_inf_child_target (&the_arc_linux_nat_target);\n+}"
    },
    {
      "sha": "e94a19b03326868391c7c6026c863f00cb1644a4",
      "filename": "gdb/configure.host",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6/gdb/configure.host",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6/gdb/configure.host",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.host?ref=04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6",
      "patch": "@@ -60,6 +60,7 @@ case \"${host_cpu}\" in\n \n aarch64*)\t\tgdb_host_cpu=aarch64 ;;\n alpha*)\t\t\tgdb_host_cpu=alpha ;;\n+arc*)\t\t\tgdb_host_cpu=arc ;;\n arm*)\t\t\tgdb_host_cpu=arm ;;\n hppa*)\t\t\tgdb_host_cpu=pa ;;\n i[34567]86*)\t\tgdb_host_cpu=i386 ;;\n@@ -91,6 +92,8 @@ alpha*-*-netbsd* | alpha*-*-knetbsd*-gnu)\n \t\t\tgdb_host=nbsd ;;\n alpha*-*-openbsd*)\tgdb_host=nbsd ;;\n \n+arc*-*-linux*)\t\tgdb_host=linux ;;\n+\n arm*-*-freebsd*)\tgdb_host=fbsd ;;\n arm*-*-linux*)\t\tgdb_host=linux ;;\n arm*-*-netbsdelf* | arm*-*-knetbsd*-gnu)"
    },
    {
      "sha": "0e36e09b69242e58a855e7987aa2152b82b70f79",
      "filename": "gdb/configure.nat",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6/gdb/configure.nat",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6/gdb/configure.nat",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.nat?ref=04c9f85efcd8df5fc482ce97c0104cc7dd5d19e6",
      "patch": "@@ -238,6 +238,10 @@ case ${gdb_host} in\n \t\tnat/aarch64-linux.o \\\n \t\tnat/aarch64-sve-linux-ptrace.o\"\n \t\t;;\n+\t    arc)\n+\t\t# Host: ARC based machine running GNU/Linux\n+\t\tNATDEPFILES=\"${NATDEPFILES} arc-linux-nat.o\"\n+\t\t;;\n \t    arm)\n \t\t# Host: ARM based machine running GNU/Linux\n \t\tNATDEPFILES=\"${NATDEPFILES} arm-linux-nat.o \\"
    }
  ]
}