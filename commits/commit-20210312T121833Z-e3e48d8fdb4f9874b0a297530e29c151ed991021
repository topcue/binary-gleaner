{
  "sha": "e3e48d8fdb4f9874b0a297530e29c151ed991021",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTNlNDhkOGZkYjRmOTg3NGIwYTI5NzUzMGUyOWMxNTFlZDk5MTAyMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-08T18:01:21Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-12T12:18:33Z"
    },
    "message": "gdb/testsuite: make test names unique in gdb.python/py-prompt.exp\n\nUse with_test_prefix to make test names unique.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-prompt.exp: Add with_test_prefix to make test\n\tnames unique.",
    "tree": {
      "sha": "572566a870773e9de6592ab199e6973d2a023fff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/572566a870773e9de6592ab199e6973d2a023fff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e3e48d8fdb4f9874b0a297530e29c151ed991021",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e3e48d8fdb4f9874b0a297530e29c151ed991021",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e3e48d8fdb4f9874b0a297530e29c151ed991021",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e3e48d8fdb4f9874b0a297530e29c151ed991021/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2cb60e747bc546e3f7b49c928b2a99cbfdb16206",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2cb60e747bc546e3f7b49c928b2a99cbfdb16206",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2cb60e747bc546e3f7b49c928b2a99cbfdb16206"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 51,
    "deletions": 39
  },
  "files": [
    {
      "sha": "6e74c5b00b6cb43bfa95ff689a92008902423cd4",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e3e48d8fdb4f9874b0a297530e29c151ed991021/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e3e48d8fdb4f9874b0a297530e29c151ed991021/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e3e48d8fdb4f9874b0a297530e29c151ed991021",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-12  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-prompt.exp: Add with_test_prefix to make test\n+\tnames unique.\n+\n 2021-03-12  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-block.exp: Give tests unique names."
    },
    {
      "sha": "d030ef6716839991dd7f546001e78a401316271b",
      "filename": "gdb/testsuite/gdb.python/py-prompt.exp",
      "status": "modified",
      "additions": 46,
      "deletions": 39,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e3e48d8fdb4f9874b0a297530e29c151ed991021/gdb/testsuite/gdb.python/py-prompt.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e3e48d8fdb4f9874b0a297530e29c151ed991021/gdb/testsuite/gdb.python/py-prompt.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-prompt.exp?ref=e3e48d8fdb4f9874b0a297530e29c151ed991021",
      "patch": "@@ -52,28 +52,31 @@ global gdb_prompt\n # gdb_test expects it not to be there.\n set gdb_prompt \"\\[(\\]Foo\\[)\\]\"\n \n-set GDBFLAGS [concat $tmp_gdbflags \" -ex \\\"set editing on\\\"\"]\n-prompt_gdb_start\n-gdb_test \"python x = len(p); print (gdb.execute(\\\"show prompt\\\", to_string = True))\" \\\n-\t \".*prompt is \\\"$gdb_prompt \\\".*\" \\\n-\t \"show prompt gets the correct result\"\n-gdb_test \"python print ('%d %d' % (x, len(p)))\" \"1 2\" \\\n-\t \"retrieving the prompt causes no extra prompt_hook calls\"\n-gdb_test \"python print (\\\"'\\\" + str(p\\[0\\]) + \\\"'\\\")\" \"'$gdb_prompt_fail '\" \\\n-\t \"prompt_hook argument is default prompt.\"\n-gdb_exit\n-\n+with_test_prefix \"set editing on\" {\n+    set GDBFLAGS [concat $tmp_gdbflags \" -ex \\\"set editing on\\\"\"]\n+    prompt_gdb_start\n+    gdb_test \"python x = len(p); print (gdb.execute(\\\"show prompt\\\", to_string = True))\" \\\n+\t\".*prompt is \\\"$gdb_prompt \\\".*\" \\\n+\t\"show prompt gets the correct result\"\n+    gdb_test \"python print ('%d %d' % (x, len(p)))\" \"1 2\" \\\n+\t\"retrieving the prompt causes no extra prompt_hook calls\"\n+    gdb_test \"python print (\\\"'\\\" + str(p\\[0\\]) + \\\"'\\\")\" \"'$gdb_prompt_fail '\" \\\n+\t\"prompt_hook argument is default prompt.\"\n+    gdb_exit\n+}\n \n-set GDBFLAGS [concat $tmp_gdbflags \" -ex \\\"set editing off\\\"\"]\n-prompt_gdb_start\n-gdb_test \"python x = len(p); print (gdb.execute(\\\"show prompt\\\", to_string = True))\" \\\n-\t \".*prompt is \\\"$gdb_prompt \\\".*\" \\\n-\t \"show prompt gets the correct result 2\"\n-gdb_test \"python print ('%d %d' % (x, len(p)))\" \"1 2\" \\\n-\t \"retrieving the prompt causes no extra prompt_hook calls 2\"\n-gdb_test \"python print (\\\"'\\\" + str(p\\[0\\]) + \\\"'\\\")\" \"'$gdb_prompt_fail '\" \\\n-\t \"prompt_hook argument is default prompt. 2\"\n-gdb_exit\n+with_test_prefix \"set editing off\" {\n+    set GDBFLAGS [concat $tmp_gdbflags \" -ex \\\"set editing off\\\"\"]\n+    prompt_gdb_start\n+    gdb_test \"python x = len(p); print (gdb.execute(\\\"show prompt\\\", to_string = True))\" \\\n+\t\".*prompt is \\\"$gdb_prompt \\\".*\" \\\n+\t\"show prompt gets the correct result 2\"\n+    gdb_test \"python print ('%d %d' % (x, len(p)))\" \"1 2\" \\\n+\t\"retrieving the prompt causes no extra prompt_hook calls 2\"\n+    gdb_test \"python print (\\\"'\\\" + str(p\\[0\\]) + \\\"'\\\")\" \"'$gdb_prompt_fail '\" \\\n+\t\"prompt_hook argument is default prompt. 2\"\n+    gdb_exit\n+}\n \n if {![can_spawn_for_attach]} {\n     set GDBFLAGS $saved_gdbflags\n@@ -89,31 +92,35 @@ set GDBFLAGS [concat $GDBFLAGS \" -ex \\\"attach $testpid\\\"\"]\n set GDBFLAGS [concat $GDBFLAGS \" -ex \\\"continue&\\\"\"]\n \n # sync_execution = 1 is_running = 1\n-prompt_gdb_start\n-gdb_test \"python x = len(p); print (gdb.execute(\\\"show prompt\\\", to_string = True))\" \\\n-\t \".*prompt is \\\"$gdb_prompt \\\".*\" \\\n-\t \"show prompt gets the correct result 3\"\n-gdb_test \"python print ('%d %d' % (x, len(p)))\" \"1 2\" \\\n-\t \"retrieving the prompt causes no extra prompt_hook calls 3\"\n-gdb_test \"python print (\\\"'\\\" + str(p\\[0\\]) + \\\"'\\\")\" \"'$gdb_prompt_fail '\" \\\n-\t \"prompt_hook argument is default prompt. 3\"\n-gdb_exit\n+with_test_prefix \"sync_execution = 1, is_running = 1\" {\n+    prompt_gdb_start\n+    gdb_test \"python x = len(p); print (gdb.execute(\\\"show prompt\\\", to_string = True))\" \\\n+\t\".*prompt is \\\"$gdb_prompt \\\".*\" \\\n+\t\"show prompt gets the correct result 3\"\n+    gdb_test \"python print ('%d %d' % (x, len(p)))\" \"1 2\" \\\n+\t\"retrieving the prompt causes no extra prompt_hook calls 3\"\n+    gdb_test \"python print (\\\"'\\\" + str(p\\[0\\]) + \\\"'\\\")\" \"'$gdb_prompt_fail '\" \\\n+\t\"prompt_hook argument is default prompt. 3\"\n+    gdb_exit\n+}\n \n set GDBFLAGS [concat $tmp_gdbflags \" -ex \\\"set pagination off\\\"\"]\n set GDBFLAGS [concat $GDBFLAGS \" -ex \\\"set editing on\\\"\"]\n set GDBFLAGS [concat $GDBFLAGS \" -ex \\\"attach $testpid\\\"\"]\n set GDBFLAGS [concat $GDBFLAGS \" -ex \\\"interrupt\\\"\"]\n \n # sync_execution = 1 is_running = 0\n-prompt_gdb_start\n-gdb_test \"python x = len(p); print (gdb.execute(\\\"show prompt\\\", to_string = True))\" \\\n-\t \".*prompt is \\\"$gdb_prompt \\\".*\" \\\n-\t \"show prompt gets the correct result 4\"\n-gdb_test \"python print ('%d %d' % (x, len(p)))\" \"1 2\" \\\n-\t \"retrieving the prompt causes no extra prompt_hook calls 4\"\n-gdb_test \"python print (\\\"'\\\" + str(p\\[0\\]) + \\\"'\\\")\" \"'$gdb_prompt_fail '\" \\\n-\t \"prompt_hook argument is default prompt. 4\"\n-gdb_exit\n+with_test_prefix \"sync_execution = 1, is_running = 0\" {\n+    prompt_gdb_start\n+    gdb_test \"python x = len(p); print (gdb.execute(\\\"show prompt\\\", to_string = True))\" \\\n+\t\".*prompt is \\\"$gdb_prompt \\\".*\" \\\n+\t\"show prompt gets the correct result 4\"\n+    gdb_test \"python print ('%d %d' % (x, len(p)))\" \"1 2\" \\\n+\t\"retrieving the prompt causes no extra prompt_hook calls 4\"\n+    gdb_test \"python print (\\\"'\\\" + str(p\\[0\\]) + \\\"'\\\")\" \"'$gdb_prompt_fail '\" \\\n+\t\"prompt_hook argument is default prompt. 4\"\n+    gdb_exit\n+}\n \n set GDBFLAGS $saved_gdbflags\n kill_wait_spawned_process $test_spawn_id"
    }
  ]
}