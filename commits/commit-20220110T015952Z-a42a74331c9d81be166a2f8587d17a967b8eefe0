{
  "sha": "a42a74331c9d81be166a2f8587d17a967b8eefe0",
  "node_id": "C_kwDOANOeidoAKGE0MmE3NDMzMWM5ZDgxYmUxNjZhMmY4NTg3ZDE3YTk2N2I4ZWVmZTA",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-27T04:38:34Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-10T01:59:52Z"
    },
    "message": "Reduce use of unfiltered output in Darwin code\n\nThe Darwin code uses unfiltered output liberally.  This patch changes\nthis code to send some output to gdb_stdlog (in some cases via the use\nof debug_prefixed_printf_cond_nofunc), or to gdb_stderr, or to simply\nswitch to filtered output.\n\nNote that I didn't switch inferior_debug to use\ndebug_prefixed_printf_cond_nofunc, because that would affect the\noutput by removing the information about the inferior.  I wasn't sure\nif this was important or not, so I left it in.\n\nv2 of this patch uses warning rather than prints to gdb_stderr, and\nremoves some trailing whitespace.\n\nI can't compile this patch, so it's \"best effort\".",
    "tree": {
      "sha": "1a4e273e8058eb3277dc2b45c0d8a76096f9c7d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1a4e273e8058eb3277dc2b45c0d8a76096f9c7d6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a42a74331c9d81be166a2f8587d17a967b8eefe0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a42a74331c9d81be166a2f8587d17a967b8eefe0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a42a74331c9d81be166a2f8587d17a967b8eefe0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a42a74331c9d81be166a2f8587d17a967b8eefe0/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4bb12b295ad02980e0f90571d24c64e8687e3ee9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4bb12b295ad02980e0f90571d24c64e8687e3ee9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4bb12b295ad02980e0f90571d24c64e8687e3ee9"
    }
  ],
  "stats": {
    "total": 221,
    "additions": 116,
    "deletions": 105
  },
  "files": [
    {
      "sha": "8d00d6618ca052f5a181ae2ef386957a9e7d3b13",
      "filename": "gdb/darwin-nat-info.c",
      "status": "modified",
      "additions": 64,
      "deletions": 64,
      "changes": 128,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42a74331c9d81be166a2f8587d17a967b8eefe0/gdb/darwin-nat-info.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42a74331c9d81be166a2f8587d17a967b8eefe0/gdb/darwin-nat-info.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat-info.c?ref=a42a74331c9d81be166a2f8587d17a967b8eefe0",
      "patch": "@@ -54,10 +54,10 @@\n } while (0)\n \n #define PRINT_FIELD(structure, field) \\\n-  printf_unfiltered(_(#field\":\\t%#lx\\n\"), (unsigned long) (structure)->field)\n+  printf_filtered(_(#field\":\\t%#lx\\n\"), (unsigned long) (structure)->field)\n \n #define PRINT_TV_FIELD(structure, field) \\\n-  printf_unfiltered(_(#field\":\\t%u.%06u sec\\n\"),\t\\\n+  printf_filtered(_(#field\":\\t%u.%06u sec\\n\"),\t\\\n   (unsigned) (structure)->field.seconds, \\\n   (unsigned) (structure)->field.microseconds)\n \n@@ -83,7 +83,7 @@ info_mach_tasks_command (const char *args, int from_tty)\n   sysctl (sysControl, 3, procInfo, &length, NULL, 0);\n \n   count = (length / sizeof (struct kinfo_proc));\n-  printf_unfiltered (_(\"%d processes:\\n\"), count);\n+  printf_filtered (_(\"%d processes:\\n\"), count);\n   for (index = 0; index < count; ++index)\n     {\n       kern_return_t result;\n@@ -94,15 +94,15 @@ info_mach_tasks_command (const char *args, int from_tty)\n \t\t\t  &taskPort);\n       if (KERN_SUCCESS == result)\n \t{\n-\t  printf_unfiltered (_(\"    %s is %d has task %#x\\n\"),\n-\t\t\t     procInfo[index].kp_proc.p_comm,\n-\t\t\t     procInfo[index].kp_proc.p_pid, taskPort);\n+\t  printf_filtered (_(\"    %s is %d has task %#x\\n\"),\n+\t\t\t   procInfo[index].kp_proc.p_comm,\n+\t\t\t   procInfo[index].kp_proc.p_pid, taskPort);\n \t}\n       else\n \t{\n-\t  printf_unfiltered (_(\"    %s is %d unknown task port\\n\"),\n-\t\t\t     procInfo[index].kp_proc.p_comm,\n-\t\t\t     procInfo[index].kp_proc.p_pid);\n+\t  printf_filtered (_(\"    %s is %d unknown task port\\n\"),\n+\t\t\t   procInfo[index].kp_proc.p_comm,\n+\t\t\t   procInfo[index].kp_proc.p_pid);\n \t}\n     }\n \n@@ -118,7 +118,7 @@ get_task_from_args (const char *args)\n   if (args == NULL || *args == 0)\n     {\n       if (inferior_ptid == null_ptid)\n-\tprintf_unfiltered (_(\"No inferior running\\n\"));\n+\tprintf_filtered (_(\"No inferior running\\n\"));\n \n       darwin_inferior *priv = get_darwin_inferior (current_inferior ());\n \n@@ -129,7 +129,7 @@ get_task_from_args (const char *args)\n   task = strtoul (args, &eptr, 0);\n   if (*eptr)\n     {\n-      printf_unfiltered (_(\"cannot parse task id '%s'\\n\"), args);\n+      printf_filtered (_(\"cannot parse task id '%s'\\n\"), args);\n       return TASK_NULL;\n     }\n   return task;\n@@ -153,7 +153,7 @@ info_mach_task_command (const char *args, int from_tty)\n   if (task == TASK_NULL)\n     return;\n \n-  printf_unfiltered (_(\"TASK_BASIC_INFO for 0x%x:\\n\"), task);\n+  printf_filtered (_(\"TASK_BASIC_INFO for 0x%x:\\n\"), task);\n   info_count = TASK_BASIC_INFO_COUNT;\n   result = task_info (task,\n \t\t      TASK_BASIC_INFO,\n@@ -165,7 +165,7 @@ info_mach_task_command (const char *args, int from_tty)\n   PRINT_FIELD (&task_info_data.basic, resident_size);\n   PRINT_TV_FIELD (&task_info_data.basic, user_time);\n   PRINT_TV_FIELD (&task_info_data.basic, system_time);\n-  printf_unfiltered (_(\"\\nTASK_EVENTS_INFO:\\n\"));\n+  printf_filtered (_(\"\\nTASK_EVENTS_INFO:\\n\"));\n   info_count = TASK_EVENTS_INFO_COUNT;\n   result = task_info (task,\n \t\t      TASK_EVENTS_INFO,\n@@ -181,7 +181,7 @@ info_mach_task_command (const char *args, int from_tty)\n   PRINT_FIELD (&task_info_data.events, cow_faults);\n   PRINT_FIELD (&task_info_data.events, messages_sent);\n   PRINT_FIELD (&task_info_data.events, messages_received);\n-  printf_unfiltered (_(\"\\nTASK_THREAD_TIMES_INFO:\\n\"));\n+  printf_filtered (_(\"\\nTASK_THREAD_TIMES_INFO:\\n\"));\n   info_count = TASK_THREAD_TIMES_INFO_COUNT;\n   result = task_info (task,\n \t\t      TASK_THREAD_TIMES_INFO,\n@@ -211,8 +211,8 @@ info_mach_ports_command (const char *args, int from_tty)\n \n   gdb_assert (name_count == type_count);\n \n-  printf_unfiltered (_(\"Ports for task 0x%x:\\n\"), task);\n-  printf_unfiltered (_(\"port   type\\n\"));\n+  printf_filtered (_(\"Ports for task 0x%x:\\n\"), task);\n+  printf_filtered (_(\"port   type\\n\"));\n   for (index = 0; index < name_count; ++index)\n     {\n       mach_port_t port = names[index];\n@@ -232,64 +232,64 @@ info_mach_ports_command (const char *args, int from_tty)\n \t  {MACH_PORT_TYPE_DEAD_NAME, \"dead\", MACH_PORT_RIGHT_DEAD_NAME}\n \t};\n \n-      printf_unfiltered (_(\"%04x: %08x \"), port, types[index]);\n+      printf_filtered (_(\"%04x: %08x \"), port, types[index]);\n       for (j = 0; j < sizeof(descrs) / sizeof(*descrs); j++)\n \tif (types[index] & descrs[j].type)\n \t  {\n \t    mach_port_urefs_t ref;\n \t    kern_return_t ret;\n \n-\t    printf_unfiltered (_(\" %s(\"), descrs[j].name);\n+\t    printf_filtered (_(\" %s(\"), descrs[j].name);\n \t    ret = mach_port_get_refs (task, port, descrs[j].right, &ref);\n \t    if (ret != KERN_SUCCESS)\n-\t      printf_unfiltered (_(\"??\"));\n+\t      printf_filtered (_(\"??\"));\n \t    else\n-\t      printf_unfiltered (_(\"%u\"), ref);\n-\t    printf_unfiltered (_(\" refs)\"));\n+\t      printf_filtered (_(\"%u\"), ref);\n+\t    printf_filtered (_(\" refs)\"));\n \t  }\n       \n       if (task == task_self ())\n \t{\n \t  if (port == task_self())\n-\t    printf_unfiltered (_(\" gdb-task\"));\n+\t    printf_filtered (_(\" gdb-task\"));\n \t  else if (port == darwin_host_self)\n-\t    printf_unfiltered (_(\" host-self\"));\n+\t    printf_filtered (_(\" host-self\"));\n \t  else if (port == darwin_ex_port)\n-\t    printf_unfiltered (_(\" gdb-exception\"));\n+\t    printf_filtered (_(\" gdb-exception\"));\n \t  else if (port == darwin_port_set)\n-\t    printf_unfiltered (_(\" gdb-port_set\"));\n+\t    printf_filtered (_(\" gdb-port_set\"));\n \t  else if (inferior_ptid != null_ptid)\n \t    {\n \t      struct inferior *inf = current_inferior ();\n \t      darwin_inferior *priv = get_darwin_inferior (inf);\n \n \t      if (port == priv->task)\n-\t\tprintf_unfiltered (_(\" inferior-task\"));\n+\t\tprintf_filtered (_(\" inferior-task\"));\n \t      else if (port == priv->notify_port)\n-\t\tprintf_unfiltered (_(\" inferior-notify\"));\n+\t\tprintf_filtered (_(\" inferior-notify\"));\n \t      else\n \t\t{\n \t\t  for (int k = 0; k < priv->exception_info.count; k++)\n \t\t    if (port == priv->exception_info.ports[k])\n \t\t      {\n-\t\t\tprintf_unfiltered (_(\" inferior-excp-port\"));\n+\t\t\tprintf_filtered (_(\" inferior-excp-port\"));\n \t\t\tbreak;\n \t\t      }\n \n \t\t  for (darwin_thread_t *t : priv->threads)\n \t\t    {\n \t\t      if (port == t->gdb_port)\n \t\t\t{\n-\t\t\t  printf_unfiltered (_(\" inferior-thread for 0x%x\"),\n-\t\t\t\t\t     priv->task);\n+\t\t\t  printf_filtered (_(\" inferior-thread for 0x%x\"),\n+\t\t\t\t\t   priv->task);\n \t\t\t  break;\n \t\t\t}\n \t\t    }\n \n \t\t}\n \t    }\n \t}\n-      printf_unfiltered (_(\"\\n\"));\n+      printf_filtered (_(\"\\n\"));\n     }\n \n   vm_deallocate (task_self (), (vm_address_t) names,\n@@ -310,18 +310,18 @@ darwin_debug_port_info (task_t task, mach_port_t port)\n     (task, port, MACH_PORT_RECEIVE_STATUS, (mach_port_info_t)&status, &len);\n   MACH_CHECK_ERROR (kret);\n \n-  printf_unfiltered (_(\"Port 0x%lx in task 0x%lx:\\n\"), (unsigned long) port,\n-\t\t     (unsigned long) task);\n-  printf_unfiltered (_(\"  port set: 0x%x\\n\"), status.mps_pset);\n-  printf_unfiltered (_(\"     seqno: 0x%x\\n\"), status.mps_seqno);\n-  printf_unfiltered (_(\"   mscount: 0x%x\\n\"), status.mps_mscount);\n-  printf_unfiltered (_(\"    qlimit: 0x%x\\n\"), status.mps_qlimit);\n-  printf_unfiltered (_(\"  msgcount: 0x%x\\n\"), status.mps_msgcount);\n-  printf_unfiltered (_(\"  sorights: 0x%x\\n\"), status.mps_sorights);\n-  printf_unfiltered (_(\"   srights: 0x%x\\n\"), status.mps_srights);\n-  printf_unfiltered (_(\" pdrequest: 0x%x\\n\"), status.mps_pdrequest);\n-  printf_unfiltered (_(\" nsrequest: 0x%x\\n\"), status.mps_nsrequest);\n-  printf_unfiltered (_(\"     flags: 0x%x\\n\"), status.mps_flags);\n+  printf_filtered (_(\"Port 0x%lx in task 0x%lx:\\n\"), (unsigned long) port,\n+\t\t   (unsigned long) task);\n+  printf_filtered (_(\"  port set: 0x%x\\n\"), status.mps_pset);\n+  printf_filtered (_(\"     seqno: 0x%x\\n\"), status.mps_seqno);\n+  printf_filtered (_(\"   mscount: 0x%x\\n\"), status.mps_mscount);\n+  printf_filtered (_(\"    qlimit: 0x%x\\n\"), status.mps_qlimit);\n+  printf_filtered (_(\"  msgcount: 0x%x\\n\"), status.mps_msgcount);\n+  printf_filtered (_(\"  sorights: 0x%x\\n\"), status.mps_sorights);\n+  printf_filtered (_(\"   srights: 0x%x\\n\"), status.mps_srights);\n+  printf_filtered (_(\" pdrequest: 0x%x\\n\"), status.mps_pdrequest);\n+  printf_filtered (_(\" nsrequest: 0x%x\\n\"), status.mps_nsrequest);\n+  printf_filtered (_(\"     flags: 0x%x\\n\"), status.mps_flags);\n }\n \n static void\n@@ -352,10 +352,10 @@ info_mach_threads_command (const char *args, int from_tty)\n   result = task_threads (task, &threads, &thread_count);\n   MACH_CHECK_ERROR (result);\n \n-  printf_unfiltered (_(\"Threads in task %#x:\\n\"), task);\n+  printf_filtered (_(\"Threads in task %#x:\\n\"), task);\n   for (i = 0; i < thread_count; ++i)\n     {\n-      printf_unfiltered (_(\"    %#x\\n\"), threads[i]);\n+      printf_filtered (_(\"    %#x\\n\"), threads[i]);\n       mach_port_deallocate (task_self (), threads[i]);\n     }\n \n@@ -378,7 +378,7 @@ info_mach_thread_command (const char *args, int from_tty)\n   CHECK_ARGS (_(\"Thread\"), args);\n   sscanf (args, \"0x%x\", &thread);\n \n-  printf_unfiltered (_(\"THREAD_BASIC_INFO\\n\"));\n+  printf_filtered (_(\"THREAD_BASIC_INFO\\n\"));\n   info_count = THREAD_BASIC_INFO_COUNT;\n   result = thread_info (thread,\n \t\t\tTHREAD_BASIC_INFO,\n@@ -752,39 +752,39 @@ disp_exception (const darwin_exception_info *info)\n       switch (info->behaviors[i])\n \t{\n \tcase EXCEPTION_DEFAULT:\n-\t  printf_unfiltered (_(\"default\"));\n+\t  printf_filtered (_(\"default\"));\n \t  break;\n \tcase EXCEPTION_STATE:\n-\t  printf_unfiltered (_(\"state\"));\n+\t  printf_filtered (_(\"state\"));\n \t  break;\n \tcase EXCEPTION_STATE_IDENTITY:\n-\t  printf_unfiltered (_(\"state-identity\"));\n+\t  printf_filtered (_(\"state-identity\"));\n \t  break;\n \tdefault:\n-\t  printf_unfiltered (_(\"0x%x\"), info->behaviors[i]);\n+\t  printf_filtered (_(\"0x%x\"), info->behaviors[i]);\n \t}\n-      printf_unfiltered (_(\", masks:\"));\n+      printf_filtered (_(\", masks:\"));\n       if (mask & EXC_MASK_BAD_ACCESS)\n-\tprintf_unfiltered (_(\" BAD_ACCESS\"));\n+\tprintf_filtered (_(\" BAD_ACCESS\"));\n       if (mask & EXC_MASK_BAD_INSTRUCTION)\n-\tprintf_unfiltered (_(\" BAD_INSTRUCTION\"));\n+\tprintf_filtered (_(\" BAD_INSTRUCTION\"));\n       if (mask & EXC_MASK_ARITHMETIC)\n-\tprintf_unfiltered (_(\" ARITHMETIC\"));\n+\tprintf_filtered (_(\" ARITHMETIC\"));\n       if (mask & EXC_MASK_EMULATION)\n-\tprintf_unfiltered (_(\" EMULATION\"));\n+\tprintf_filtered (_(\" EMULATION\"));\n       if (mask & EXC_MASK_SOFTWARE)\n-\tprintf_unfiltered (_(\" SOFTWARE\"));\n+\tprintf_filtered (_(\" SOFTWARE\"));\n       if (mask & EXC_MASK_BREAKPOINT)\n-\tprintf_unfiltered (_(\" BREAKPOINT\"));\n+\tprintf_filtered (_(\" BREAKPOINT\"));\n       if (mask & EXC_MASK_SYSCALL)\n-\tprintf_unfiltered (_(\" SYSCALL\"));\n+\tprintf_filtered (_(\" SYSCALL\"));\n       if (mask & EXC_MASK_MACH_SYSCALL)\n-\tprintf_unfiltered (_(\" MACH_SYSCALL\"));\n+\tprintf_filtered (_(\" MACH_SYSCALL\"));\n       if (mask & EXC_MASK_RPC_ALERT)\n-\tprintf_unfiltered (_(\" RPC_ALERT\"));\n+\tprintf_filtered (_(\" RPC_ALERT\"));\n       if (mask & EXC_MASK_CRASH)\n-\tprintf_unfiltered (_(\" CRASH\"));\n-      printf_unfiltered (_(\"\\n\"));\n+\tprintf_filtered (_(\" CRASH\"));\n+      printf_filtered (_(\"\\n\"));\n     }\n }\n \n@@ -801,7 +801,7 @@ info_mach_exceptions_command (const char *args, int from_tty)\n       if (strcmp (args, \"saved\") == 0)\n \t{\n \t  if (inferior_ptid == null_ptid)\n-\t    printf_unfiltered (_(\"No inferior running\\n\"));\n+\t    printf_filtered (_(\"No inferior running\\n\"));\n \n \t  darwin_inferior *priv = get_darwin_inferior (current_inferior ());\n \n@@ -825,7 +825,7 @@ info_mach_exceptions_command (const char *args, int from_tty)\n       struct inferior *inf;\n \n       if (inferior_ptid == null_ptid)\n-\tprintf_unfiltered (_(\"No inferior running\\n\"));\n+\tprintf_filtered (_(\"No inferior running\\n\"));\n       inf = current_inferior ();\n       \n       darwin_inferior *priv = get_darwin_inferior (inf);"
    },
    {
      "sha": "d96ce1a6c6574231a758c84eb56d3ab96120d8f9",
      "filename": "gdb/darwin-nat.c",
      "status": "modified",
      "additions": 38,
      "deletions": 27,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42a74331c9d81be166a2f8587d17a967b8eefe0/gdb/darwin-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42a74331c9d81be166a2f8587d17a967b8eefe0/gdb/darwin-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.c?ref=a42a74331c9d81be166a2f8587d17a967b8eefe0",
      "patch": "@@ -169,8 +169,8 @@ inferior_debug (int level, const char *fmt, ...)\n     return;\n \n   va_start (ap, fmt);\n-  printf_unfiltered (_(\"[%d inferior]: \"), getpid ());\n-  vprintf_unfiltered (fmt, ap);\n+  fprintf_unfiltered (gdb_stdlog, _(\"[%d inferior]: \"), getpid ());\n+  vfprintf_unfiltered (gdb_stdlog, fmt, ap);\n   va_end (ap);\n }\n \n@@ -459,13 +459,20 @@ darwin_resume_inferior (struct inferior *inf)\n static void\n darwin_dump_message (mach_msg_header_t *hdr, int disp_body)\n {\n-  printf_unfiltered (_(\"message header:\\n\"));\n-  printf_unfiltered (_(\" bits: 0x%x\\n\"), hdr->msgh_bits);\n-  printf_unfiltered (_(\" size: 0x%x\\n\"), hdr->msgh_size);\n-  printf_unfiltered (_(\" remote-port: 0x%x\\n\"), hdr->msgh_remote_port);\n-  printf_unfiltered (_(\" local-port: 0x%x\\n\"), hdr->msgh_local_port);\n-  printf_unfiltered (_(\" reserved: 0x%x\\n\"), hdr->msgh_reserved);\n-  printf_unfiltered (_(\" id: 0x%x\\n\"), hdr->msgh_id);\n+  fprintf_unfiltered (gdb_stdlog,\n+\t\t      _(\"message header:\\n\"));\n+  fprintf_unfiltered (gdb_stdlog,\n+\t\t      _(\" bits: 0x%x\\n\"), hdr->msgh_bits);\n+  fprintf_unfiltered (gdb_stdlog,\n+\t\t      _(\" size: 0x%x\\n\"), hdr->msgh_size);\n+  fprintf_unfiltered (gdb_stdlog,\n+\t\t      _(\" remote-port: 0x%x\\n\"), hdr->msgh_remote_port);\n+  fprintf_unfiltered (gdb_stdlog,\n+\t\t      _(\" local-port: 0x%x\\n\"), hdr->msgh_local_port);\n+  fprintf_unfiltered (gdb_stdlog,\n+\t\t      _(\" reserved: 0x%x\\n\"), hdr->msgh_reserved);\n+  fprintf_unfiltered (gdb_stdlog,\n+\t\t      _(\" id: 0x%x\\n\"), hdr->msgh_id);\n \n   if (disp_body)\n     {\n@@ -484,42 +491,46 @@ darwin_dump_message (mach_msg_header_t *hdr, int disp_body)\n \t    (mach_msg_port_descriptor_t *)(bod + 1);\n \t  int k;\n \t  NDR_record_t *ndr;\n-\t  printf_unfiltered (_(\"body: descriptor_count=%u\\n\"),\n-\t\t\t     bod->msgh_descriptor_count);\n+\t  fprintf_unfiltered (gdb_stdlog,\n+\t\t\t      _(\"body: descriptor_count=%u\\n\"),\n+\t\t\t      bod->msgh_descriptor_count);\n \t  data += sizeof (mach_msg_body_t);\n \t  size -= sizeof (mach_msg_body_t);\n \t  for (k = 0; k < bod->msgh_descriptor_count; k++)\n \t    switch (desc[k].type)\n \t      {\n \t      case MACH_MSG_PORT_DESCRIPTOR:\n-\t\tprintf_unfiltered\n-\t\t  (_(\" descr %d: type=%u (port) name=0x%x, dispo=%d\\n\"),\n+\t\tfprintf_unfiltered\n+\t\t  (gdb_stdlog,\n+\t\t   _(\" descr %d: type=%u (port) name=0x%x, dispo=%d\\n\"),\n \t\t   k, desc[k].type, desc[k].name, desc[k].disposition);\n \t\tbreak;\n \t      default:\n-\t\tprintf_unfiltered (_(\" descr %d: type=%u\\n\"),\n-\t\t\t\t   k, desc[k].type);\n+\t\tfprintf_unfiltered (gdb_stdlog,\n+\t\t\t\t    _(\" descr %d: type=%u\\n\"),\n+\t\t\t\t    k, desc[k].type);\n \t\tbreak;\n \t      }\n \t  data += bod->msgh_descriptor_count\n \t    * sizeof (mach_msg_port_descriptor_t);\n \t  size -= bod->msgh_descriptor_count\n \t    * sizeof (mach_msg_port_descriptor_t);\n \t  ndr = (NDR_record_t *)(desc + bod->msgh_descriptor_count);\n-\t  printf_unfiltered\n-\t    (_(\"NDR: mig=%02x if=%02x encod=%02x \"\n+\t  fprintf_unfiltered\n+\t    (gdb_stdlog,\n+\t     _(\"NDR: mig=%02x if=%02x encod=%02x \"\n \t       \"int=%02x char=%02x float=%02x\\n\"),\n \t     ndr->mig_vers, ndr->if_vers, ndr->mig_encoding,\n \t     ndr->int_rep, ndr->char_rep, ndr->float_rep);\n \t  data += sizeof (NDR_record_t);\n \t  size -= sizeof (NDR_record_t);\n \t}\n \n-      printf_unfiltered (_(\"  data:\"));\n+      fprintf_unfiltered (gdb_stdlog, _(\"  data:\"));\n       ldata = (const unsigned int *)data;\n       for (i = 0; i < size / sizeof (unsigned int); i++)\n-\tprintf_unfiltered (\" %08x\", ldata[i]);\n-      printf_unfiltered (_(\"\\n\"));\n+\tfprintf_unfiltered (gdb_stdlog, \" %08x\", ldata[i]);\n+      fprintf_unfiltered (gdb_stdlog, _(\"\\n\"));\n     }\n }\n \n@@ -977,8 +988,8 @@ darwin_nat_target::decode_message (mach_msg_header_t *hdr,\n       if (res < 0)\n \t{\n \t  /* Should not happen...  */\n-\t  printf_unfiltered\n-\t    (_(\"darwin_wait: ill-formatted message (id=0x%x)\\n\"), hdr->msgh_id);\n+\t  warning (_(\"darwin_wait: ill-formatted message (id=0x%x)\\n\"),\n+\t\t   hdr->msgh_id);\n \t  /* FIXME: send a failure reply?  */\n \t  status->set_ignore ();\n \t  return minus_one_ptid;\n@@ -1060,7 +1071,7 @@ darwin_nat_target::decode_message (mach_msg_header_t *hdr,\n       if (res < 0)\n \t{\n \t  /* Should not happen...  */\n-\t  printf_unfiltered\n+\t  warning\n \t    (_(\"darwin_wait: ill-formatted message (id=0x%x, res=%d)\\n\"),\n \t     hdr->msgh_id, res);\n \t}\n@@ -1086,8 +1097,8 @@ darwin_nat_target::decode_message (mach_msg_header_t *hdr,\n \t      res_pid = wait4 (inf->pid, &wstatus, 0, NULL);\n \t      if (res_pid < 0 || res_pid != inf->pid)\n \t\t{\n-\t\t  printf_unfiltered (_(\"wait4: res=%d: %s\\n\"),\n-\t\t\t\t     res_pid, safe_strerror (errno));\n+\t\t  warning (_(\"wait4: res=%d: %s\\n\"),\n+\t\t\t   res_pid, safe_strerror (errno));\n \t\t  status->set_ignore ();\n \t\t  return minus_one_ptid;\n \t\t}\n@@ -2056,8 +2067,8 @@ darwin_nat_target::detach (inferior *inf, int from_tty)\n     {\n       res = PTRACE (PT_DETACH, inf->pid, 0, 0);\n       if (res != 0)\n-\tprintf_unfiltered (_(\"Unable to detach from process-id %d: %s (%d)\"),\n-\t\t\t   inf->pid, safe_strerror (errno), errno);\n+\twarning (_(\"Unable to detach from process-id %d: %s (%d)\"),\n+\t\t inf->pid, safe_strerror (errno), errno);\n     }\n \n   darwin_reply_to_all_pending_messages (inf);"
    },
    {
      "sha": "b64b2b3e81b6db04eea185f5f8ca75742dc35e22",
      "filename": "gdb/i386-darwin-nat.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a42a74331c9d81be166a2f8587d17a967b8eefe0/gdb/i386-darwin-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a42a74331c9d81be166a2f8587d17a967b8eefe0/gdb/i386-darwin-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-darwin-nat.c?ref=a42a74331c9d81be166a2f8587d17a967b8eefe0",
      "patch": "@@ -77,9 +77,9 @@ i386_darwin_nat_target::fetch_registers (struct regcache *regcache, int regno)\n \t     &gp_count);\n \t  if (ret != KERN_SUCCESS)\n \t    {\n-\t      printf_unfiltered (_(\"Error calling thread_get_state for \"\n-\t\t\t\t   \"GP registers for thread 0x%lx\\n\"),\n-\t\t\t\t (unsigned long) current_thread);\n+\t      warning (_(\"Error calling thread_get_state for \"\n+\t\t\t \"GP registers for thread 0x%lx\\n\"),\n+\t\t       (unsigned long) current_thread);\n \t      MACH_CHECK_ERROR (ret);\n \t    }\n \n@@ -102,9 +102,9 @@ i386_darwin_nat_target::fetch_registers (struct regcache *regcache, int regno)\n \t     &fp_count);\n \t  if (ret != KERN_SUCCESS)\n \t    {\n-\t      printf_unfiltered (_(\"Error calling thread_get_state for \"\n-\t\t\t\t   \"float registers for thread 0x%lx\\n\"),\n-\t\t\t\t (unsigned long) current_thread);\n+\t      warning (_(\"Error calling thread_get_state for \"\n+\t\t\t \"float registers for thread 0x%lx\\n\"),\n+\t\t       (unsigned long) current_thread);\n \t      MACH_CHECK_ERROR (ret);\n \t    }\n \t  amd64_supply_fxsave (regcache, -1, &fp_regs.ufs.fs64.__fpu_fcw);\n@@ -126,9 +126,9 @@ i386_darwin_nat_target::fetch_registers (struct regcache *regcache, int regno)\n \t     &gp_count);\n \t  if (ret != KERN_SUCCESS)\n \t    {\n-\t      printf_unfiltered (_(\"Error calling thread_get_state for \"\n-\t\t\t\t   \"GP registers for thread 0x%lx\\n\"),\n-\t\t\t\t (unsigned long) current_thread);\n+\t      warning (_(\"Error calling thread_get_state for \"\n+\t\t\t \"GP registers for thread 0x%lx\\n\"),\n+\t\t       (unsigned long) current_thread);\n \t      MACH_CHECK_ERROR (ret);\n \t    }\n \t  for (i = 0; i < I386_NUM_GREGS; i++)\n@@ -150,9 +150,9 @@ i386_darwin_nat_target::fetch_registers (struct regcache *regcache, int regno)\n \t     &fp_count);\n \t  if (ret != KERN_SUCCESS)\n \t    {\n-\t      printf_unfiltered (_(\"Error calling thread_get_state for \"\n-\t\t\t\t   \"float registers for thread 0x%lx\\n\"),\n-\t\t\t\t (unsigned long) current_thread);\n+\t      warning (_(\"Error calling thread_get_state for \"\n+\t\t\t \"float registers for thread 0x%lx\\n\"),\n+\t\t       (unsigned long) current_thread);\n \t      MACH_CHECK_ERROR (ret);\n \t    }\n \t  i387_supply_fxsave (regcache, -1, &fp_regs.__fpu_fcw);\n@@ -588,8 +588,8 @@ darwin_set_sstep (thread_t thread, int enable)\n \t\t\t   (thread_state_t) &regs, &count);\n   if (kret != KERN_SUCCESS)\n     {\n-      printf_unfiltered (_(\"darwin_set_sstep: error %x, thread=%x\\n\"),\n-\t\t\t kret, thread);\n+      warning (_(\"darwin_set_sstep: error %x, thread=%x\\n\"),\n+\t       kret, thread);\n       return;\n     }\n "
    }
  ]
}