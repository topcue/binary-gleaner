{
  "sha": "37055cada860277ee53b61bb8fd57293fdfa840b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzcwNTVjYWRhODYwMjc3ZWU1M2I2MWJiOGZkNTcyOTNmZGZhODQwYg==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-10-23T18:40:02Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-10-23T18:40:02Z"
    },
    "message": "infcall: remove unused parameter in 'value_arg_coerce'\n\nRemove the unused SP parameter from the auxiliary function\n'value_arg_coerce'.\n\ngdb/ChangeLog:\n2019-10-23  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* infcall.c (value_arg_coerce): Remove an unused parameter.\n\t(call_function_by_hand_dummy): Update the call to\n\t'value_arg_coerce'.\n\nChange-Id: If324a1dda3fa5d4c145790b92bd3f656c00296f4",
    "tree": {
      "sha": "9938ad38c2ab6039f4b407b787c23c9ce399be1f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9938ad38c2ab6039f4b407b787c23c9ce399be1f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/37055cada860277ee53b61bb8fd57293fdfa840b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37055cada860277ee53b61bb8fd57293fdfa840b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/37055cada860277ee53b61bb8fd57293fdfa840b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37055cada860277ee53b61bb8fd57293fdfa840b/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39bcc47c7e94c746d5acdb52f20f9617a6473292",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39bcc47c7e94c746d5acdb52f20f9617a6473292",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/39bcc47c7e94c746d5acdb52f20f9617a6473292"
    }
  ],
  "stats": {
    "total": 14,
    "additions": 9,
    "deletions": 5
  },
  "files": [
    {
      "sha": "52aea372762d7f8bde6d8da325132807c3fb0910",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37055cada860277ee53b61bb8fd57293fdfa840b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37055cada860277ee53b61bb8fd57293fdfa840b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=37055cada860277ee53b61bb8fd57293fdfa840b",
      "patch": "@@ -1,3 +1,9 @@\n+2019-10-23  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* infcall.c (value_arg_coerce): Remove an unused parameter.\n+\t(call_function_by_hand_dummy): Update the call to\n+\t'value_arg_coerce'.\n+\n 2019-10-23  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* infcall.c (call_function_by_hand_dummy): Refactor."
    },
    {
      "sha": "b83f1bf323069816503bad4afb5be661d9fb5da0",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37055cada860277ee53b61bb8fd57293fdfa840b/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37055cada860277ee53b61bb8fd57293fdfa840b/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=37055cada860277ee53b61bb8fd57293fdfa840b",
      "patch": "@@ -145,13 +145,11 @@ show_unwind_on_terminating_exception_p (struct ui_file *file, int from_tty,\n    for arguments to be passed to C, Ada or Fortran functions.\n \n    If PARAM_TYPE is non-NULL, it is the expected parameter type.\n-   IS_PROTOTYPED is non-zero if the function declaration is prototyped.\n-   SP is the stack pointer were additional data can be pushed (updating\n-   its value as needed).  */\n+   IS_PROTOTYPED is non-zero if the function declaration is prototyped.  */\n \n static struct value *\n value_arg_coerce (struct gdbarch *gdbarch, struct value *arg,\n-\t\t  struct type *param_type, int is_prototyped, CORE_ADDR *sp)\n+\t\t  struct type *param_type, int is_prototyped)\n {\n   const struct builtin_type *builtin = builtin_type (gdbarch);\n   struct type *arg_type = check_typedef (value_type (arg));\n@@ -984,7 +982,7 @@ call_function_by_hand_dummy (struct value *function,\n \tparam_type = NULL;\n \n       args[i] = value_arg_coerce (gdbarch, args[i],\n-\t\t\t\t  param_type, prototyped, &sp);\n+\t\t\t\t  param_type, prototyped);\n \n       if (param_type != NULL && language_pass_by_reference (param_type))\n \targs[i] = value_addr (args[i]);"
    }
  ]
}