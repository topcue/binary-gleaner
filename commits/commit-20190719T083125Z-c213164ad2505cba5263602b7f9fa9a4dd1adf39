{
  "sha": "c213164ad2505cba5263602b7f9fa9a4dd1adf39",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzIxMzE2NGFkMjUwNWNiYTUyNjM2MDJiN2Y5ZmE5YTRkZDFhZGYzOQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-19T06:06:58Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-19T08:31:25Z"
    },
    "message": "[PowerPC64] pc-relative TLS relocations\n\nThis patch supports using pcrel instructions in TLS code sequences.  A\nnumber of new relocations are needed, gas operand modifiers to\ngenerate those relocations, and new TLS optimisation.  For\noptimisation it turns out that the new pcrel GD and LD sequences can\nbe distinguished from the non-pcrel GD and LD sequences by there being\ndifferent relocations on the new sequence.  The final \"add ra,rb,13\"\non IE sequences similarly needs a new relocation, or as I chose, a\nmodification of R_PPC64_TLS.  On pcrel IE code, the R_PPC64_TLS points\none byte into the \"add\" instruction rather than being on the\ninstruction boundary.\n\nGD:\n pla 3,z@got@tlsgd@pcrel\t  # R_PPC64_GOT_TLSGD34\n bl __tls_get_addr@notoc(z@tlsgd) # R_PPC64_TLSGD and R_PPC64_REL24_NOTOC\n  edited to IE\n   pld 3,z@got@tprel@pcrel\n   add 3,3,13\n  edited to LE\n   paddi 3,13,z@tprel\n   nop\n\nLD:\n pla 3,z@got@tlsld@pcrel\t  # R_PPC64_GOT_TLSLD34\n bl __tls_get_addr@notoc(z@tlsld) # R_PPC64_TLSLD and R_PPC64_REL24_NOTOC\n ..\n paddi 9,3,z2@dtprel\n pld 10,z3@got@dtprel@pcrel\n add 10,10,3\n  edited to LE\n   paddi 3,13,0x1000\n   nop\n\nIE:\n pld 9,z@got@tprel@pcrel\t  # R_PPC64_GOT_TPREL34\n add 3,9,z@tls@pcrel\t\t  # R_PPC64_TLS at insn+1\n ldx 4,9,z@tls@pcrel\n lwax 5,9,z@tls@pcrel\n stdx 5,9,z@tls@pcrel\n  edited to LE\n  paddi 9,13,z@tprel\n  nop\n  ld 4,0(9)\n  lwa 5,0(9)\n  std 5,0(9)\n\nLE:\n paddi 10,13,z@tprel\n\ninclude/\n\t* elf/ppc64.h (R_PPC64_TPREL34, R_PPC64_DTPREL34),\n\t(R_PPC64_GOT_TLSGD34, R_PPC64_GOT_TLSLD34),\n\t(R_PPC64_GOT_TPREL34, R_PPC64_GOT_DTPREL34): Define.\n\t(IS_PPC64_TLS_RELOC): Include new tls relocs.\nbfd/\n\t* reloc.c (BFD_RELOC_PPC64_TPREL34, BFD_RELOC_PPC64_DTPREL34),\n\t(BFD_RELOC_PPC64_GOT_TLSGD34, BFD_RELOC_PPC64_GOT_TLSLD34),\n\t(BFD_RELOC_PPC64_GOT_TPREL34, BFD_RELOC_PPC64_GOT_DTPREL34),\n\t(BFD_RELOC_PPC64_TLS_PCREL): New pcrel tls relocs.\n\t* elf64-ppc.c (ppc64_elf_howto_raw): Add howtos for pcrel tls relocs.\n\t(ppc64_elf_reloc_type_lookup): Translate pcrel tls relocs.\n\t(must_be_dyn_reloc, dec_dynrel_count): Add R_PPC64_TPREL64.\n\t(ppc64_elf_check_relocs): Support pcrel tls relocs.\n\t(ppc64_elf_tls_optimize, ppc64_elf_relocate_section): Likewise.\n\t* bfd-in2.h: Regenerate.\n\t* libbfd.h: Regenerate.\ngas/\n\t* config/tc-ppc.c (ppc_elf_suffix): Map \"tls@pcrel\", \"got@tlsgd@pcrel\",\n\t\"got@tlsld@pcrel\", \"got@tprel@pcrel\", and \"got@dtprel@pcrel\".\n\t(fixup_size, md_assemble): Handle pcrel tls relocs.\n\t(ppc_force_relocation, ppc_fix_adjustable): Likewise.\n\t(md_apply_fix, tc_gen_reloc): Likewise.\nld/\n\t* testsuite/ld-powerpc/tlsgd.d,\n\t* testsuite/ld-powerpc/tlsgd.s,\n\t* testsuite/ld-powerpc/tlsie.d,\n\t* testsuite/ld-powerpc/tlsie.s,\n\t* testsuite/ld-powerpc/tlsld.d,\n\t* testsuite/ld-powerpc/tlsld.s: New tests.\n\t* testsuite/ld-powerpc/powerpc.exp: Run them.",
    "tree": {
      "sha": "6ae2722172b2b22884319957004388e0402dd90a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6ae2722172b2b22884319957004388e0402dd90a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c213164ad2505cba5263602b7f9fa9a4dd1adf39",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c213164ad2505cba5263602b7f9fa9a4dd1adf39",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c213164ad2505cba5263602b7f9fa9a4dd1adf39",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c213164ad2505cba5263602b7f9fa9a4dd1adf39/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7a708984176cc2d247d7dd96d84c7d7501bae6eb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a708984176cc2d247d7dd96d84c7d7501bae6eb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7a708984176cc2d247d7dd96d84c7d7501bae6eb"
    }
  ],
  "stats": {
    "total": 669,
    "additions": 634,
    "deletions": 35
  },
  "files": [
    {
      "sha": "62e4beb66ed6ae47084ad6e0f5fd8e106be7abb0",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -1,3 +1,17 @@\n+2019-07-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* reloc.c (BFD_RELOC_PPC64_TPREL34, BFD_RELOC_PPC64_DTPREL34),\n+\t(BFD_RELOC_PPC64_GOT_TLSGD34, BFD_RELOC_PPC64_GOT_TLSLD34),\n+\t(BFD_RELOC_PPC64_GOT_TPREL34, BFD_RELOC_PPC64_GOT_DTPREL34),\n+\t(BFD_RELOC_PPC64_TLS_PCREL): New pcrel tls relocs.\n+\t* elf64-ppc.c (ppc64_elf_howto_raw): Add howtos for pcrel tls relocs.\n+\t(ppc64_elf_reloc_type_lookup): Translate pcrel tls relocs.\n+\t(must_be_dyn_reloc, dec_dynrel_count): Add R_PPC64_TPREL64.\n+\t(ppc64_elf_check_relocs): Support pcrel tls relocs.\n+\t(ppc64_elf_tls_optimize, ppc64_elf_relocate_section): Likewise.\n+\t* bfd-in2.h: Regenerate.\n+\t* libbfd.h: Regenerate.\n+\n 2019-07-18  Alan Modra  <amodra@gmail.com>\n \n \t* elf64-ppc.c (ppc64_elf_relocate_section): Don't bother selecting"
    },
    {
      "sha": "8374390e60a819bb5fba9ffd35204d9ac0a483eb",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -3563,6 +3563,13 @@ instruction.  */\n   BFD_RELOC_PPC64_DTPREL16_HIGHERA,\n   BFD_RELOC_PPC64_DTPREL16_HIGHEST,\n   BFD_RELOC_PPC64_DTPREL16_HIGHESTA,\n+  BFD_RELOC_PPC64_TPREL34,\n+  BFD_RELOC_PPC64_DTPREL34,\n+  BFD_RELOC_PPC64_GOT_TLSGD34,\n+  BFD_RELOC_PPC64_GOT_TLSLD34,\n+  BFD_RELOC_PPC64_GOT_TPREL34,\n+  BFD_RELOC_PPC64_GOT_DTPREL34,\n+  BFD_RELOC_PPC64_TLS_PCREL,\n \n /* IBM 370/390 relocations  */\n   BFD_RELOC_I370_D12,"
    },
    {
      "sha": "abbdfedfe83d279a345bad48a58fe71130d966b6",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 209,
      "deletions": 28,
      "changes": 237,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -920,6 +920,24 @@ static reloc_howto_type ppc64_elf_howto_raw[] =\n   HOW (R_PPC64_PLT_PCREL34_NOTOC, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n        ppc64_elf_unhandled_reloc),\n \n+  HOW (R_PPC64_TPREL34, 4, 34, 0x3ffff0000ffffULL, 0, FALSE, signed,\n+       ppc64_elf_unhandled_reloc),\n+\n+  HOW (R_PPC64_DTPREL34, 4, 34, 0x3ffff0000ffffULL, 0, FALSE, signed,\n+       ppc64_elf_unhandled_reloc),\n+\n+  HOW (R_PPC64_GOT_TLSGD34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+       ppc64_elf_unhandled_reloc),\n+\n+  HOW (R_PPC64_GOT_TLSLD34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+       ppc64_elf_unhandled_reloc),\n+\n+  HOW (R_PPC64_GOT_TPREL34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+       ppc64_elf_unhandled_reloc),\n+\n+  HOW (R_PPC64_GOT_DTPREL34, 4, 34, 0x3ffff0000ffffULL, 0, TRUE, signed,\n+       ppc64_elf_unhandled_reloc),\n+\n   HOW (R_PPC64_ADDR16_HIGHER34, 1, 16, 0xffff, 34, FALSE, dont,\n        bfd_elf_generic_reloc),\n \n@@ -1119,6 +1137,7 @@ ppc64_elf_reloc_type_lookup (bfd *abfd,\n       break;\n     case BFD_RELOC_PPC64_PLTGOT16_LO_DS:\tr = R_PPC64_PLTGOT16_LO_DS;\n       break;\n+    case BFD_RELOC_PPC64_TLS_PCREL:\n     case BFD_RELOC_PPC_TLS:\t\t\tr = R_PPC64_TLS;\n       break;\n     case BFD_RELOC_PPC_TLSGD:\t\t\tr = R_PPC64_TLSGD;\n@@ -1253,6 +1272,18 @@ ppc64_elf_reloc_type_lookup (bfd *abfd,\n       break;\n     case BFD_RELOC_PPC64_PLT_PCREL34:\t\tr = R_PPC64_PLT_PCREL34;\n       break;\n+    case BFD_RELOC_PPC64_TPREL34:\t\tr = R_PPC64_TPREL34;\n+      break;\n+    case BFD_RELOC_PPC64_DTPREL34:\t\tr = R_PPC64_DTPREL34;\n+      break;\n+    case BFD_RELOC_PPC64_GOT_TLSGD34:\t\tr = R_PPC64_GOT_TLSGD34;\n+      break;\n+    case BFD_RELOC_PPC64_GOT_TLSLD34:\t\tr = R_PPC64_GOT_TLSLD34;\n+      break;\n+    case BFD_RELOC_PPC64_GOT_TPREL34:\t\tr = R_PPC64_GOT_TPREL34;\n+      break;\n+    case BFD_RELOC_PPC64_GOT_DTPREL34:\t\tr = R_PPC64_GOT_DTPREL34;\n+      break;\n     case BFD_RELOC_PPC64_ADDR16_HIGHER34:\tr = R_PPC64_ADDR16_HIGHER34;\n       break;\n     case BFD_RELOC_PPC64_ADDR16_HIGHERA34:\tr = R_PPC64_ADDR16_HIGHERA34;\n@@ -2727,6 +2758,7 @@ must_be_dyn_reloc (struct bfd_link_info *info,\n     case R_PPC64_TPREL16_HIGHEST:\n     case R_PPC64_TPREL16_HIGHESTA:\n     case R_PPC64_TPREL64:\n+    case R_PPC64_TPREL34:\n       /* These relocations are relative but in a shared library the\n \t linker doesn't know the thread pointer base.  */\n       return bfd_link_dll (info);\n@@ -4514,6 +4546,8 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_D34_HI30:\n \tcase R_PPC64_D34_HA30:\n \tcase R_PPC64_D28:\n+\tcase R_PPC64_TPREL34:\n+\tcase R_PPC64_DTPREL34:\n \t  htab->powerxx_stubs = 1;\n \t  /* Fall through.  */\n \tdefault:\n@@ -4528,6 +4562,10 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n \tcase R_PPC64_PCREL34:\n \tcase R_PPC64_GOT_PCREL34:\n+\tcase R_PPC64_GOT_TLSGD34:\n+\tcase R_PPC64_GOT_TLSLD34:\n+\tcase R_PPC64_GOT_TPREL34:\n+\tcase R_PPC64_GOT_DTPREL34:\n \tcase R_PPC64_PLT_PCREL34:\n \tcase R_PPC64_PLT_PCREL34_NOTOC:\n \tcase R_PPC64_PCREL28:\n@@ -4580,20 +4618,23 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_GOT_TLSLD16_LO:\n \tcase R_PPC64_GOT_TLSLD16_HI:\n \tcase R_PPC64_GOT_TLSLD16_HA:\n+\tcase R_PPC64_GOT_TLSLD34:\n \t  tls_type = TLS_TLS | TLS_LD;\n \t  goto dogottls;\n \n \tcase R_PPC64_GOT_TLSGD16:\n \tcase R_PPC64_GOT_TLSGD16_LO:\n \tcase R_PPC64_GOT_TLSGD16_HI:\n \tcase R_PPC64_GOT_TLSGD16_HA:\n+\tcase R_PPC64_GOT_TLSGD34:\n \t  tls_type = TLS_TLS | TLS_GD;\n \t  goto dogottls;\n \n \tcase R_PPC64_GOT_TPREL16_DS:\n \tcase R_PPC64_GOT_TPREL16_LO_DS:\n \tcase R_PPC64_GOT_TPREL16_HI:\n \tcase R_PPC64_GOT_TPREL16_HA:\n+\tcase R_PPC64_GOT_TPREL34:\n \t  if (bfd_link_dll (info))\n \t    info->flags |= DF_STATIC_TLS;\n \t  tls_type = TLS_TLS | TLS_TPREL;\n@@ -4603,6 +4644,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_GOT_DTPREL16_LO_DS:\n \tcase R_PPC64_GOT_DTPREL16_HI:\n \tcase R_PPC64_GOT_DTPREL16_HA:\n+\tcase R_PPC64_GOT_DTPREL34:\n \t  tls_type = TLS_TLS | TLS_DTPREL;\n \tdogottls:\n \t  sec->has_tls_reloc = 1;\n@@ -4949,6 +4991,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_TPREL16_HIGHERA:\n \tcase R_PPC64_TPREL16_HIGHEST:\n \tcase R_PPC64_TPREL16_HIGHESTA:\n+\tcase R_PPC64_TPREL34:\n \t  if (bfd_link_dll (info))\n \t    info->flags |= DF_STATIC_TLS;\n \t  goto dodyn;\n@@ -6769,6 +6812,7 @@ dec_dynrel_count (bfd_vma r_info,\n     case R_PPC64_TPREL16_HIGHEST:\n     case R_PPC64_TPREL16_HIGHESTA:\n     case R_PPC64_TPREL64:\n+    case R_PPC64_TPREL34:\n     case R_PPC64_DTPMOD64:\n     case R_PPC64_DTPREL64:\n     case R_PPC64_ADDR64:\n@@ -7733,6 +7777,12 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t\t  value += sym_sec->output_offset;\n \t\t\t  value += sym_sec->output_section->vma;\n \t\t\t  value -= htab->elf.tls_sec->vma + TP_OFFSET;\n+\t\t\t  /* Note that even though the prefix insns\n+\t\t\t     allow a 1<<33 offset we use the same test\n+\t\t\t     as for addis;addi.  There may be a mix of\n+\t\t\t     pcrel and non-pcrel code and the decision\n+\t\t\t     to optimise is per symbol, not per TLS\n+\t\t\t     sequence.  */\n \t\t\t  ok_tprel = value + 0x80008000ULL < 1ULL << 32;\n \t\t\t}\n \t\t    }\n@@ -7764,6 +7814,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t    {\n \t\t    case R_PPC64_GOT_TLSLD16:\n \t\t    case R_PPC64_GOT_TLSLD16_LO:\n+\t\t    case R_PPC64_GOT_TLSLD34:\n \t\t      expecting_tls_get_addr = 1;\n \t\t      found_tls_get_addr_arg = 1;\n \t\t      /* Fall through.  */\n@@ -7784,6 +7835,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \n \t\t    case R_PPC64_GOT_TLSGD16:\n \t\t    case R_PPC64_GOT_TLSGD16_LO:\n+\t\t    case R_PPC64_GOT_TLSGD34:\n \t\t      expecting_tls_get_addr = 1;\n \t\t      found_tls_get_addr_arg = 1;\n \t\t      /* Fall through. */\n@@ -7800,6 +7852,7 @@ ppc64_elf_tls_optimize (struct bfd_link_info *info)\n \t\t      tls_type = TLS_TLS | TLS_GD;\n \t\t      break;\n \n+\t\t    case R_PPC64_GOT_TPREL34:\n \t\t    case R_PPC64_GOT_TPREL16_DS:\n \t\t    case R_PPC64_GOT_TPREL16_LO_DS:\n \t\t    case R_PPC64_GOT_TPREL16_HI:\n@@ -14436,29 +14489,72 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    }\n \t  break;\n \n+\tcase R_PPC64_GOT_TPREL34:\n+\t  if ((tls_mask & TLS_TLS) != 0\n+\t      && (tls_mask & TLS_TPREL) == 0)\n+\t    {\n+\t      /* pld ra,sym@got@tprel@pcrel -> paddi ra,r13,sym@tprel  */\n+\t      pinsn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n+\t      pinsn <<= 32;\n+\t      pinsn |= bfd_get_32 (input_bfd, contents + rel->r_offset + 4);\n+\t      pinsn += ((2ULL << 56) + (-1ULL << 52)\n+\t\t\t+ (14ULL << 26) - (57ULL << 26) + (13ULL << 16));\n+\t      bfd_put_32 (input_bfd, pinsn >> 32,\n+\t\t\t  contents + rel->r_offset);\n+\t      bfd_put_32 (input_bfd, pinsn & 0xffffffff,\n+\t\t\t  contents + rel->r_offset + 4);\n+\t      r_type = R_PPC64_TPREL34;\n+\t      rel->r_info = ELF64_R_INFO (r_symndx, r_type);\n+\t    }\n+\t  break;\n+\n \tcase R_PPC64_TLS:\n \t  if ((tls_mask & TLS_TLS) != 0\n \t      && (tls_mask & TLS_TPREL) == 0)\n \t    {\n-\t      insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n+\t      insn = bfd_get_32 (input_bfd, contents + (rel->r_offset & ~3));\n \t      insn = _bfd_elf_ppc_at_tls_transform (insn, 13);\n \t      if (insn == 0)\n-\t\tabort ();\n-\t      bfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n-\t      /* Was PPC64_TLS which sits on insn boundary, now\n-\t\t PPC64_TPREL16_LO which is at low-order half-word.  */\n-\t      rel->r_offset += d_offset;\n-\t      r_type = R_PPC64_TPREL16_LO;\n-\t      if (toc_symndx != 0)\n+\t\tbreak;\n+\t      if ((rel->r_offset & 3) == 0)\n \t\t{\n-\t\t  rel->r_info = ELF64_R_INFO (toc_symndx, r_type);\n-\t\t  rel->r_addend = toc_addend;\n-\t\t  /* We changed the symbol.  Start over in order to\n-\t\t     get h, sym, sec etc. right.  */\n-\t\t  goto again;\n+\t\t  bfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n+\t\t  /* Was PPC64_TLS which sits on insn boundary, now\n+\t\t     PPC64_TPREL16_LO which is at low-order half-word.  */\n+\t\t  rel->r_offset += d_offset;\n+\t\t  r_type = R_PPC64_TPREL16_LO;\n+\t\t  if (toc_symndx != 0)\n+\t\t    {\n+\t\t      rel->r_info = ELF64_R_INFO (toc_symndx, r_type);\n+\t\t      rel->r_addend = toc_addend;\n+\t\t      /* We changed the symbol.  Start over in order to\n+\t\t\t get h, sym, sec etc. right.  */\n+\t\t      goto again;\n+\t\t    }\n+\t\t  else\n+\t\t    rel->r_info = ELF64_R_INFO (r_symndx, r_type);\n+\t\t}\n+\t      else if ((rel->r_offset & 3) == 1)\n+\t\t{\n+\t\t  /* For pcrel IE to LE we already have the full\n+\t\t     offset and thus don't need an addi here.  A nop\n+\t\t     or mr will do.  */\n+\t\t  if ((insn & (0x3f << 26)) == 14 << 26)\n+\t\t    {\n+\t\t      /* Extract regs from addi rt,ra,si.  */\n+\t\t      unsigned int rt = (insn >> 21) & 0x1f;\n+\t\t      unsigned int ra = (insn >> 16) & 0x1f;\n+\t\t      if (rt == ra)\n+\t\t\tinsn = NOP;\n+\t\t      else\n+\t\t\t{\n+\t\t\t  /* Build or ra,rs,rb with rb==rs, ie. mr ra,rs.  */\n+\t\t\t  insn = (rt << 16) | (ra << 21) | (ra << 11);\n+\t\t\t  insn |= (31u << 26) | (444u << 1);\n+\t\t\t}\n+\t\t    }\n+\t\t  bfd_put_32 (input_bfd, insn, contents + rel->r_offset - 1);\n \t\t}\n-\t      else\n-\t\trel->r_info = ELF64_R_INFO (r_symndx, r_type);\n \t    }\n \t  break;\n \n@@ -14584,6 +14680,51 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    }\n \t  break;\n \n+\tcase R_PPC64_GOT_TLSGD34:\n+\t  if ((tls_mask & TLS_TLS) != 0 && (tls_mask & TLS_GD) == 0)\n+\t    {\n+\t      pinsn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n+\t      pinsn <<= 32;\n+\t      pinsn |= bfd_get_32 (input_bfd, contents + rel->r_offset + 4);\n+\t      if ((tls_mask & TLS_GDIE) != 0)\n+\t\t{\n+\t\t  /* IE, pla -> pld  */\n+\t\t  pinsn += (-2ULL << 56) + (57ULL << 26) - (14ULL << 26);\n+\t\t  r_type = R_PPC64_GOT_TPREL34;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* LE, pla pcrel -> paddi r13  */\n+\t\t  pinsn += (-1ULL << 52) + (13ULL << 16);\n+\t\t  r_type = R_PPC64_TPREL34;\n+\t\t}\n+\t      rel->r_info = ELF64_R_INFO (r_symndx, r_type);\n+\t      bfd_put_32 (input_bfd, pinsn >> 32,\n+\t\t\t  contents + rel->r_offset);\n+\t      bfd_put_32 (input_bfd, pinsn & 0xffffffff,\n+\t\t\t  contents + rel->r_offset + 4);\n+\t    }\n+\t  break;\n+\n+\tcase R_PPC64_GOT_TLSLD34:\n+\t  if ((tls_mask & TLS_TLS) != 0 && (tls_mask & TLS_LD) == 0)\n+\t    {\n+\t      pinsn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n+\t      pinsn <<= 32;\n+\t      pinsn |= bfd_get_32 (input_bfd, contents + rel->r_offset + 4);\n+\t      pinsn += (-1ULL << 52) + (13ULL << 16);\n+\t      bfd_put_32 (input_bfd, pinsn >> 32,\n+\t\t\t  contents + rel->r_offset);\n+\t      bfd_put_32 (input_bfd, pinsn & 0xffffffff,\n+\t\t\t  contents + rel->r_offset + 4);\n+\t      rel->r_addend = htab->elf.tls_sec->vma + DTP_OFFSET;\n+\t      r_symndx = STN_UNDEF;\n+\t      r_type = R_PPC64_TPREL34;\n+\t      rel->r_info = ELF64_R_INFO (r_symndx, r_type);\n+\t      goto again;\n+\t    }\n+\t  break;\n+\n \tcase R_PPC64_TLSGD:\n \t  if ((tls_mask & TLS_TLS) != 0 && (tls_mask & TLS_GD) == 0\n \t      && rel + 1 < relend)\n@@ -14619,16 +14760,27 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t      r_symndx = toc_symndx;\n \t\t      rel->r_addend = toc_addend;\n \t\t    }\n-\t\t  r_type = R_PPC64_TPREL16_LO;\n-\t\t  rel->r_offset = offset + d_offset;\n-\t\t  insn2 = 0x38630000;\t/* addi 3,3,0 */\n+\t\t  if (r_type1 == R_PPC64_REL24_NOTOC\n+\t\t      || r_type1 == R_PPC64_PLTCALL_NOTOC)\n+\t\t    {\n+\t\t      r_type = R_PPC64_NONE;\n+\t\t      insn2 = NOP;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      rel->r_offset = offset + d_offset;\n+\t\t      r_type = R_PPC64_TPREL16_LO;\n+\t\t      insn2 = 0x38630000;\t/* addi 3,3,0 */\n+\t\t    }\n \t\t}\n \t      rel->r_info = ELF64_R_INFO (r_symndx, r_type);\n \t      /* Zap the reloc on the _tls_get_addr call too.  */\n \t      BFD_ASSERT (offset == rel[1].r_offset);\n \t      rel[1].r_info = ELF64_R_INFO (STN_UNDEF, R_PPC64_NONE);\n \t      bfd_put_32 (input_bfd, insn2, contents + offset);\n-\t      if ((tls_mask & TLS_GDIE) == 0 && toc_symndx != 0)\n+\t      if ((tls_mask & TLS_GDIE) == 0\n+\t\t  && toc_symndx != 0\n+\t\t  && r_type != R_PPC64_NONE)\n \t\tgoto again;\n \t    }\n \t  break;\n@@ -14654,18 +14806,27 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      if (ELF64_R_TYPE (rel[1].r_info) == R_PPC64_PLTCALL)\n \t\tbfd_put_32 (output_bfd, NOP, contents + offset + 4);\n \n-\t      rel->r_offset = offset + d_offset;\n-\t      r_symndx = STN_UNDEF;\n-\t      r_type = R_PPC64_TPREL16_LO;\n+\t      if (r_type1 == R_PPC64_REL24_NOTOC\n+\t\t  || r_type1 == R_PPC64_PLTCALL_NOTOC)\n+\t\t{\n+\t\t  r_type = R_PPC64_NONE;\n+\t\t  insn2 = NOP;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  rel->r_offset = offset + d_offset;\n+\t\t  r_symndx = STN_UNDEF;\n+\t\t  r_type = R_PPC64_TPREL16_LO;\n+\t\t  rel->r_addend = htab->elf.tls_sec->vma + DTP_OFFSET;\n+\t\t  insn2 = 0x38630000;\t/* addi 3,3,0 */\n+\t\t}\n \t      rel->r_info = ELF64_R_INFO (r_symndx, r_type);\n-\t      rel->r_addend = htab->elf.tls_sec->vma + DTP_OFFSET;\n-\n \t      /* Zap the reloc on the _tls_get_addr call too.  */\n \t      BFD_ASSERT (offset == rel[1].r_offset);\n \t      rel[1].r_info = ELF64_R_INFO (STN_UNDEF, R_PPC64_NONE);\n-\t      insn2 = 0x38630000;\t/* addi 3,3,0 */\n \t      bfd_put_32 (input_bfd, insn2, contents + offset);\n-\t      goto again;\n+\t      if (r_type != R_PPC64_NONE)\n+\t\tgoto again;\n \t    }\n \t  break;\n \n@@ -15267,27 +15428,31 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_GOT_TLSGD16_LO:\n \tcase R_PPC64_GOT_TLSGD16_HI:\n \tcase R_PPC64_GOT_TLSGD16_HA:\n+\tcase R_PPC64_GOT_TLSGD34:\n \t  tls_type = TLS_TLS | TLS_GD;\n \t  goto dogot;\n \n \tcase R_PPC64_GOT_TLSLD16:\n \tcase R_PPC64_GOT_TLSLD16_LO:\n \tcase R_PPC64_GOT_TLSLD16_HI:\n \tcase R_PPC64_GOT_TLSLD16_HA:\n+\tcase R_PPC64_GOT_TLSLD34:\n \t  tls_type = TLS_TLS | TLS_LD;\n \t  goto dogot;\n \n \tcase R_PPC64_GOT_TPREL16_DS:\n \tcase R_PPC64_GOT_TPREL16_LO_DS:\n \tcase R_PPC64_GOT_TPREL16_HI:\n \tcase R_PPC64_GOT_TPREL16_HA:\n+\tcase R_PPC64_GOT_TPREL34:\n \t  tls_type = TLS_TLS | TLS_TPREL;\n \t  goto dogot;\n \n \tcase R_PPC64_GOT_DTPREL16_DS:\n \tcase R_PPC64_GOT_DTPREL16_LO_DS:\n \tcase R_PPC64_GOT_DTPREL16_HI:\n \tcase R_PPC64_GOT_DTPREL16_HA:\n+\tcase R_PPC64_GOT_DTPREL34:\n \t  tls_type = TLS_TLS | TLS_DTPREL;\n \t  goto dogot;\n \n@@ -15309,7 +15474,11 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    struct got_entry *ent;\n \t    bfd_vma sym_addend = orig_rel.r_addend;\n \n-\t    if (r_type == R_PPC64_GOT_PCREL34)\n+\t    if (r_type == R_PPC64_GOT_PCREL34\n+\t\t|| r_type == R_PPC64_GOT_TLSGD34\n+\t\t|| r_type == R_PPC64_GOT_TLSLD34\n+\t\t|| r_type == R_PPC64_GOT_TPREL34\n+\t\t|| r_type == R_PPC64_GOT_DTPREL34)\n \t      sym_addend = 0;\n \n \t    if (tls_type == (TLS_TLS | TLS_LD)\n@@ -15491,7 +15660,11 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      abort ();\n \n \t    relocation = got->output_section->vma + got->output_offset + off;\n-\t    if (r_type != R_PPC64_GOT_PCREL34)\n+\t    if (!(r_type == R_PPC64_GOT_PCREL34\n+\t\t  || r_type == R_PPC64_GOT_TLSGD34\n+\t\t  || r_type == R_PPC64_GOT_TLSLD34\n+\t\t  || r_type == R_PPC64_GOT_TPREL34\n+\t\t  || r_type == R_PPC64_GOT_DTPREL34))\n \t      addend = -(TOCstart + htab->sec_info[input_section->id].toc_off);\n \t  }\n \t  break;\n@@ -15644,6 +15817,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_TPREL16_HIGHERA:\n \tcase R_PPC64_TPREL16_HIGHEST:\n \tcase R_PPC64_TPREL16_HIGHESTA:\n+\tcase R_PPC64_TPREL34:\n \t  if (h != NULL\n \t      && h->elf.root.type == bfd_link_hash_undefweak\n \t      && h->elf.dynindx == -1)\n@@ -15679,6 +15853,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_DTPREL16_HIGHERA:\n \tcase R_PPC64_DTPREL16_HIGHEST:\n \tcase R_PPC64_DTPREL16_HIGHESTA:\n+\tcase R_PPC64_DTPREL34:\n \t  if (htab->elf.tls_sec != NULL)\n \t    addend -= htab->elf.tls_sec->vma + DTP_OFFSET;\n \t  break;\n@@ -16301,6 +16476,12 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_D34_HA30:\n \tcase R_PPC64_PCREL34:\n \tcase R_PPC64_GOT_PCREL34:\n+\tcase R_PPC64_TPREL34:\n+\tcase R_PPC64_DTPREL34:\n+\tcase R_PPC64_GOT_TLSGD34:\n+\tcase R_PPC64_GOT_TLSLD34:\n+\tcase R_PPC64_GOT_TPREL34:\n+\tcase R_PPC64_GOT_DTPREL34:\n \tcase R_PPC64_PLT_PCREL34:\n \tcase R_PPC64_PLT_PCREL34_NOTOC:\n \tcase R_PPC64_D28:"
    },
    {
      "sha": "fd45595f2d2905b4e950a5d59ce5bea364d4924c",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -1539,6 +1539,13 @@ static const char *const bfd_reloc_code_real_names[] = { \"@@uninitialized@@\",\n   \"BFD_RELOC_PPC64_DTPREL16_HIGHERA\",\n   \"BFD_RELOC_PPC64_DTPREL16_HIGHEST\",\n   \"BFD_RELOC_PPC64_DTPREL16_HIGHESTA\",\n+  \"BFD_RELOC_PPC64_TPREL34\",\n+  \"BFD_RELOC_PPC64_DTPREL34\",\n+  \"BFD_RELOC_PPC64_GOT_TLSGD34\",\n+  \"BFD_RELOC_PPC64_GOT_TLSLD34\",\n+  \"BFD_RELOC_PPC64_GOT_TPREL34\",\n+  \"BFD_RELOC_PPC64_GOT_DTPREL34\",\n+  \"BFD_RELOC_PPC64_TLS_PCREL\",\n   \"BFD_RELOC_I370_D12\",\n   \"BFD_RELOC_CTOR\",\n   \"BFD_RELOC_ARM_PCREL_BRANCH\","
    },
    {
      "sha": "9ca68ca61dad38bab4fb55fc20f089381fd81a5c",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -3007,6 +3007,20 @@ ENUMX\n   BFD_RELOC_PPC64_DTPREL16_HIGHEST\n ENUMX\n   BFD_RELOC_PPC64_DTPREL16_HIGHESTA\n+ENUMX\n+  BFD_RELOC_PPC64_TPREL34\n+ENUMX\n+  BFD_RELOC_PPC64_DTPREL34\n+ENUMX\n+  BFD_RELOC_PPC64_GOT_TLSGD34\n+ENUMX\n+  BFD_RELOC_PPC64_GOT_TLSLD34\n+ENUMX\n+  BFD_RELOC_PPC64_GOT_TPREL34\n+ENUMX\n+  BFD_RELOC_PPC64_GOT_DTPREL34\n+ENUMX\n+  BFD_RELOC_PPC64_TLS_PCREL\n ENUMDOC\n   PowerPC and PowerPC64 thread-local storage relocations.\n "
    },
    {
      "sha": "b445ba3f827cbf8ce8b848c77f3da84171f39e1a",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -1,3 +1,11 @@\n+2019-07-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-ppc.c (ppc_elf_suffix): Map \"tls@pcrel\", \"got@tlsgd@pcrel\",\n+\t\"got@tlsld@pcrel\", \"got@tprel@pcrel\", and \"got@dtprel@pcrel\".\n+\t(fixup_size, md_assemble): Handle pcrel tls relocs.\n+\t(ppc_force_relocation, ppc_fix_adjustable): Likewise.\n+\t(md_apply_fix, tc_gen_reloc): Likewise.\n+\n 2019-07-17  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* config/tc-bpf.c: Make .lcomm to get a third argument with the"
    },
    {
      "sha": "7d6459aa269288fc6d0bebe55efc3672c18ee5d6",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 39,
      "deletions": 5,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -2224,6 +2224,11 @@ ppc_elf_suffix (char **str_p, expressionS *exp_p)\n     MAP64 (\"pcrel\",\t\tBFD_RELOC_PPC64_PCREL34),\n     MAP64 (\"got@pcrel\",\t\tBFD_RELOC_PPC64_GOT_PCREL34),\n     MAP64 (\"plt@pcrel\",\t\tBFD_RELOC_PPC64_PLT_PCREL34),\n+    MAP64 (\"tls@pcrel\",\t\tBFD_RELOC_PPC64_TLS_PCREL),\n+    MAP64 (\"got@tlsgd@pcrel\",\tBFD_RELOC_PPC64_GOT_TLSGD34),\n+    MAP64 (\"got@tlsld@pcrel\",\tBFD_RELOC_PPC64_GOT_TLSLD34),\n+    MAP64 (\"got@tprel@pcrel\",\tBFD_RELOC_PPC64_GOT_TPREL34),\n+    MAP64 (\"got@dtprel@pcrel\",\tBFD_RELOC_PPC64_GOT_DTPREL34),\n     MAP64 (\"higher34\",\t\tBFD_RELOC_PPC64_ADDR16_HIGHER34),\n     MAP64 (\"highera34\",\t\tBFD_RELOC_PPC64_ADDR16_HIGHERA34),\n     MAP64 (\"highest34\",\t\tBFD_RELOC_PPC64_ADDR16_HIGHEST34),\n@@ -3155,6 +3160,7 @@ fixup_size (bfd_reloc_code_real_type reloc, bfd_boolean *pc_relative)\n     case BFD_RELOC_PPC_VLE_SDAREL_HI16D:\n     case BFD_RELOC_PPC_VLE_SDAREL_LO16A:\n     case BFD_RELOC_PPC_VLE_SDAREL_LO16D:\n+    case BFD_RELOC_PPC64_TLS_PCREL:\n     case BFD_RELOC_RVA:\n       size = 4;\n       break;\n@@ -3196,13 +3202,19 @@ fixup_size (bfd_reloc_code_real_type reloc, bfd_boolean *pc_relative)\n     case BFD_RELOC_PPC64_D34_LO:\n     case BFD_RELOC_PPC64_D34_HI30:\n     case BFD_RELOC_PPC64_D34_HA30:\n+    case BFD_RELOC_PPC64_TPREL34:\n+    case BFD_RELOC_PPC64_DTPREL34:\n     case BFD_RELOC_PPC64_TOC:\n       size = 8;\n       break;\n \n     case BFD_RELOC_64_PCREL:\n     case BFD_RELOC_64_PLT_PCREL:\n     case BFD_RELOC_PPC64_GOT_PCREL34:\n+    case BFD_RELOC_PPC64_GOT_TLSGD34:\n+    case BFD_RELOC_PPC64_GOT_TLSLD34:\n+    case BFD_RELOC_PPC64_GOT_TPREL34:\n+    case BFD_RELOC_PPC64_GOT_DTPREL34:\n     case BFD_RELOC_PPC64_PCREL28:\n     case BFD_RELOC_PPC64_PCREL34:\n     case BFD_RELOC_PPC64_PLT_PCREL34:\n@@ -3744,6 +3756,7 @@ md_assemble (char *str)\n \t\t  break;\n \n \t\tcase BFD_RELOC_PPC_TLS:\n+\t\tcase BFD_RELOC_PPC64_TLS_PCREL:\n \t\t  if (!_bfd_elf_ppc_at_tls_transform (opcode->opcode, 0))\n \t\t    as_bad (_(\"@tls may not be used with \\\"%s\\\" operands\"),\n \t\t\t    opcode->name);\n@@ -3756,13 +3769,19 @@ md_assemble (char *str)\n \t\t  break;\n \n \t\t  /* We'll only use the 32 (or 64) bit form of these relocations\n-\t\t     in constants.  Instructions get the 16 bit form.  */\n+\t\t     in constants.  Instructions get the 16 or 34 bit form.  */\n \t\tcase BFD_RELOC_PPC_DTPREL:\n-\t\t  reloc = BFD_RELOC_PPC_DTPREL16;\n+\t\t  if (operand->bitm == 0x3ffffffffULL)\n+\t\t    reloc = BFD_RELOC_PPC64_DTPREL34;\n+\t\t  else\n+\t\t    reloc = BFD_RELOC_PPC_DTPREL16;\n \t\t  break;\n \n \t\tcase BFD_RELOC_PPC_TPREL:\n-\t\t  reloc = BFD_RELOC_PPC_TPREL16;\n+\t\t  if (operand->bitm == 0x3ffffffffULL)\n+\t\t    reloc = BFD_RELOC_PPC64_TPREL34;\n+\t\t  else\n+\t\t    reloc = BFD_RELOC_PPC_TPREL16;\n \t\t  break;\n \n \t\tcase BFD_RELOC_PPC64_PCREL34:\n@@ -3774,6 +3793,10 @@ md_assemble (char *str)\n \t\t  /* Fall through.  */\n \t\tcase BFD_RELOC_PPC64_GOT_PCREL34:\n \t\tcase BFD_RELOC_PPC64_PLT_PCREL34:\n+\t\tcase BFD_RELOC_PPC64_GOT_TLSGD34:\n+\t\tcase BFD_RELOC_PPC64_GOT_TLSLD34:\n+\t\tcase BFD_RELOC_PPC64_GOT_TPREL34:\n+\t\tcase BFD_RELOC_PPC64_GOT_DTPREL34:\n \t\t  if (operand->bitm != 0x3ffffffffULL\n \t\t      || (operand->flags & PPC_OPERAND_NEGATIVE) != 0)\n \t\t    as_warn (_(\"%s unsupported on this instruction\"), \"@pcrel\");\n@@ -7003,7 +7026,7 @@ ppc_force_relocation (fixS *fix)\n     }\n \n   if (fix->fx_r_type >= BFD_RELOC_PPC_TLS\n-      && fix->fx_r_type <= BFD_RELOC_PPC64_DTPREL16_HIGHESTA)\n+      && fix->fx_r_type <= BFD_RELOC_PPC64_TLS_PCREL)\n     return 1;\n \n   return generic_force_reloc (fix);\n@@ -7071,7 +7094,7 @@ ppc_fix_adjustable (fixS *fix)\n \t  && fix->fx_r_type != BFD_RELOC_VTABLE_INHERIT\n \t  && fix->fx_r_type != BFD_RELOC_VTABLE_ENTRY\n \t  && !(fix->fx_r_type >= BFD_RELOC_PPC_TLS\n-\t       && fix->fx_r_type <= BFD_RELOC_PPC64_DTPREL16_HIGHESTA));\n+\t       && fix->fx_r_type <= BFD_RELOC_PPC64_TLS_PCREL));\n }\n #endif\n \n@@ -7503,6 +7526,12 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg)\n \tcase BFD_RELOC_PPC64_DTPREL16_HIGHERA:\n \tcase BFD_RELOC_PPC64_DTPREL16_HIGHEST:\n \tcase BFD_RELOC_PPC64_DTPREL16_HIGHESTA:\n+\tcase BFD_RELOC_PPC64_TPREL34:\n+\tcase BFD_RELOC_PPC64_DTPREL34:\n+\tcase BFD_RELOC_PPC64_GOT_TLSGD34:\n+\tcase BFD_RELOC_PPC64_GOT_TLSLD34:\n+\tcase BFD_RELOC_PPC64_GOT_TPREL34:\n+\tcase BFD_RELOC_PPC64_GOT_DTPREL34:\n \t  gas_assert (fixP->fx_addsy != NULL);\n \t  S_SET_THREAD_LOCAL (fixP->fx_addsy);\n \t  fieldval = 0;\n@@ -7573,6 +7602,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg)\n \tcase BFD_RELOC_PPC_TLS:\n \tcase BFD_RELOC_PPC_TLSGD:\n \tcase BFD_RELOC_PPC_TLSLD:\n+\tcase BFD_RELOC_PPC64_TLS_PCREL:\n \t  fieldval = 0;\n \t  break;\n #endif\n@@ -7826,6 +7856,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg)\n \tcase BFD_RELOC_PPC64_TPREL16_HIGHERA:\n \tcase BFD_RELOC_PPC64_TPREL16_HIGHEST:\n \tcase BFD_RELOC_PPC64_TPREL16_HIGHESTA:\n+\tcase BFD_RELOC_PPC64_TLS_PCREL:\n \t  fixP->fx_done = 0;\n \t  break;\n #endif\n@@ -7918,6 +7949,9 @@ tc_gen_reloc (asection *seg ATTRIBUTE_UNUSED, fixS *fixp)\n   reloc->sym_ptr_ptr = XNEW (asymbol *);\n   *reloc->sym_ptr_ptr = symbol_get_bfdsym (fixp->fx_addsy);\n   reloc->address = fixp->fx_frag->fr_address + fixp->fx_where;\n+  /* BFD_RELOC_PPC64_TLS_PCREL generates R_PPC64_TLS with an odd r_offset.  */\n+  if (fixp->fx_r_type == BFD_RELOC_PPC64_TLS_PCREL)\n+    reloc->address++;\n   reloc->howto = bfd_reloc_type_lookup (stdoutput, fixp->fx_r_type);\n   if (reloc->howto == (reloc_howto_type *) NULL)\n     {"
    },
    {
      "sha": "bb5abb15d1a4f59923edd5c881a70ce35fd9d649",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -1,3 +1,10 @@\n+2019-07-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf/ppc64.h (R_PPC64_TPREL34, R_PPC64_DTPREL34),\n+\t(R_PPC64_GOT_TLSGD34, R_PPC64_GOT_TLSLD34),\n+\t(R_PPC64_GOT_TPREL34, R_PPC64_GOT_DTPREL34): Define.\n+\t(IS_PPC64_TLS_RELOC): Include new tls relocs.\n+\n 2019-07-18  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-api.h (ECTF_NOTFUNC): Fix description."
    },
    {
      "sha": "226c989873ab20c079503d1dd911c9a2eabee733",
      "filename": "include/elf/ppc64.h",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/include/elf/ppc64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/include/elf/ppc64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/ppc64.h?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -181,6 +181,12 @@ START_RELOC_NUMBERS (elf_ppc64_reloc_type)\n   RELOC_NUMBER (R_PPC64_REL16_HIGHESTA34,  143)\n   RELOC_NUMBER (R_PPC64_D28,\t\t   144)\n   RELOC_NUMBER (R_PPC64_PCREL28,\t   145)\n+  RELOC_NUMBER (R_PPC64_TPREL34,\t   146)\n+  RELOC_NUMBER (R_PPC64_DTPREL34,\t   147)\n+  RELOC_NUMBER (R_PPC64_GOT_TLSGD34,\t   148)\n+  RELOC_NUMBER (R_PPC64_GOT_TLSLD34,\t   149)\n+  RELOC_NUMBER (R_PPC64_GOT_TPREL34,\t   150)\n+  RELOC_NUMBER (R_PPC64_GOT_DTPREL34,\t   151)\n \n #ifndef RELOC_MACROS_GEN_FUNC\n /* Relocation only used internally by gas or ld.  If you need to use\n@@ -218,8 +224,8 @@ END_RELOC_NUMBERS (R_PPC64_max)\n \n #define IS_PPC64_TLS_RELOC(R)\t\t\t\t\t\t\\\n   (((R) >= R_PPC64_TLS && (R) <= R_PPC64_DTPREL16_HIGHESTA)\t\t\\\n-   || ((R) >= R_PPC64_TPREL16_HIGH && (R) <= R_PPC64_DTPREL16_HIGHA))\n-\n+   || ((R) >= R_PPC64_TPREL16_HIGH && (R) <= R_PPC64_DTPREL16_HIGHA)\t\\\n+   || ((R) >= R_PPC64_TPREL34 && (R) <= R_PPC64_GOT_DTPREL34))\n \n /* e_flags bits specifying ABI.\n    1 for original function descriptor using ABI,"
    },
    {
      "sha": "9fcc55ce3c4be1b73c40c13b0c10cb7a5b7d3883",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -1,3 +1,13 @@\n+2019-07-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/ld-powerpc/tlsgd.d,\n+\t* testsuite/ld-powerpc/tlsgd.s,\n+\t* testsuite/ld-powerpc/tlsie.d,\n+\t* testsuite/ld-powerpc/tlsie.s,\n+\t* testsuite/ld-powerpc/tlsld.d,\n+\t* testsuite/ld-powerpc/tlsld.s: New tests.\n+\t* testsuite/ld-powerpc/powerpc.exp: Run them.\n+\n 2019-07-19  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/ld-powerpc/tlsldopt.d: Rename from tlsld.d."
    },
    {
      "sha": "87a7462fa01ebe016dcf64302d98347deae440be",
      "filename": "ld/testsuite/ld-powerpc/powerpc.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/powerpc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/powerpc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/powerpc.exp?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -343,6 +343,9 @@ if [ supports_ppc64 ] then {\n     run_dump_test \"pr23937\"\n     run_dump_test \"callstub-1\"\n     run_dump_test \"callstub-2\"\n+    run_dump_test \"tlsgd\"\n+    run_dump_test \"tlsld\"\n+    run_dump_test \"tlsie\"\n }\n \n run_dump_test \"tlsldopt32\""
    },
    {
      "sha": "42c9b5f5f4f766938d6337681c403dfc5776c5ee",
      "filename": "ld/testsuite/ld-powerpc/tlsgd.d",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsgd.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsgd.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/tlsgd.d?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -0,0 +1,31 @@\n+#source: tlsgd.s\n+#as: -a64 -mfuture\n+#ld: -melf64ppc\n+#objdump: -dr -Mfuture\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+.*:\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(38 6d 90 08|08 90 6d 38) \taddi    r3,r13,-28664\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(38 6d 90 10|10 90 6d 38) \taddi    r3,r13,-28656\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 03 ff ff|ff ff 03 06) \tpaddi   r3,r13,-28648\n+.*:\t(38 6d 90 18|18 90 6d 38) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(38 6d 90 20|20 90 6d 38) \taddi    r3,r13,-28640\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(38 6d 90 20|20 90 6d 38) \taddi    r3,r13,-28640\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 03 ff ff|ff ff 03 06) \tpaddi   r3,r13,-28640\n+.*:\t(38 6d 90 20|20 90 6d 38) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop"
    },
    {
      "sha": "304bd6087e80c0b749fd01bfc47b4bde01bf55a4",
      "filename": "ld/testsuite/ld-powerpc/tlsgd.s",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsgd.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsgd.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/tlsgd.s?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -0,0 +1,52 @@\n+ .section \".tbss\",\"awT\",@nobits\n+ .p2align 3\n+pad: .space 8\n+ .global a\n+a: .space 8\n+ .global b\n+b: .space 8\n+ .global c\n+c: .space 8\n+ .global d\n+d: .space 8\n+\n+ .text\n+ .globl _start\n+_start:\n+#Small model OpenPower\n+ addi 3,2,.La@toc\n+ bl __tls_get_addr(.La@tlsgd)\n+ nop\n+ .section .toc,\"aw\",@progbits\n+ .p2align 3\n+.La:\n+ .quad a@dtpmod\n+ .quad a@dtprel\n+ .text\n+\n+#Medium mode ELF\n+ addis 3,2,b@got@tlsgd@ha\n+ addi 3,3,b@got@tlsgd@l\n+ bl __tls_get_addr(b@tlsgd)\n+ nop\n+\n+#PCrel\n+ pla 3,c@got@tlsgd@pcrel\n+ bl __tls_get_addr@notoc(c@tlsgd)\n+\n+#All of the above using the same symbol\n+ addis 3,2,.Ld@toc@ha\n+ addi 3,3,.Ld@toc@l\n+ bl __tls_get_addr(.Ld@tlsgd)\n+ nop\n+ .section .toc,\"aw\",@progbits\n+.Ld:\n+ .quad d@dtpmod\n+ .quad d@dtprel\n+ .text\n+ addis 3,2,d@got@tlsgd@ha\n+ addi 3,3,d@got@tlsgd@l\n+ bl __tls_get_addr(d@tlsgd)\n+ nop\n+ pla 3,d@got@tlsgd@pcrel\n+ bl __tls_get_addr@notoc(d@tlsgd)"
    },
    {
      "sha": "79613bd224dbf34abfc05d40f83e06809466be36",
      "filename": "ld/testsuite/ld-powerpc/tlsie.d",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsie.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsie.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/tlsie.d?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -0,0 +1,54 @@\n+#source: tlsie.s\n+#as: -a64 -mfuture\n+#ld: -melf64ppc\n+#objdump: -dr -Mfuture\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+.*:\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(39 4d 90 08|08 90 4d 39) \taddi    r10,r13,-28664\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(38 6d 90 10|10 90 6d 38) \taddi    r3,r13,-28656\n+.*:\t(06 03 ff ff|ff ff 03 06) \tpaddi   r4,r13,-28648\n+.*:\t(38 8d 90 18|18 90 8d 38) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(39 4d 90 20|20 90 4d 39) \taddi    r10,r13,-28640\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(38 6d 90 20|20 90 6d 38) \taddi    r3,r13,-28640\n+.*:\t(06 03 ff ff|ff ff 03 06) \tpaddi   r30,r13,-28640\n+.*:\t(3b cd 90 20|20 90 cd 3b) \n+.*:\t(7f c3 f3 78|78 f3 c3 7f) \tmr      r3,r30\n+.*:\t(80 9e 00 00|00 00 9e 80) \tlwz     r4,0\\(r30\\)\n+.*:\t(84 9e 00 00|00 00 9e 84) \tlwzu    r4,0\\(r30\\)\n+.*:\t(88 be 00 00|00 00 be 88) \tlbz     r5,0\\(r30\\)\n+.*:\t(8c be 00 00|00 00 be 8c) \tlbzu    r5,0\\(r30\\)\n+.*:\t(90 de 00 00|00 00 de 90) \tstw     r6,0\\(r30\\)\n+.*:\t(94 de 00 00|00 00 de 94) \tstwu    r6,0\\(r30\\)\n+.*:\t(98 fe 00 00|00 00 fe 98) \tstb     r7,0\\(r30\\)\n+.*:\t(9c fe 00 00|00 00 fe 9c) \tstbu    r7,0\\(r30\\)\n+.*:\t(a1 1e 00 00|00 00 1e a1) \tlhz     r8,0\\(r30\\)\n+.*:\t(a5 1e 00 00|00 00 1e a5) \tlhzu    r8,0\\(r30\\)\n+.*:\t(a9 3e 00 00|00 00 3e a9) \tlha     r9,0\\(r30\\)\n+.*:\t(ad 3e 00 00|00 00 3e ad) \tlhau    r9,0\\(r30\\)\n+.*:\t(b1 5e 00 00|00 00 5e b1) \tsth     r10,0\\(r30\\)\n+.*:\t(b5 5e 00 00|00 00 5e b5) \tsthu    r10,0\\(r30\\)\n+.*:\t(c1 7e 00 00|00 00 7e c1) \tlfs     f11,0\\(r30\\)\n+.*:\t(c5 7e 00 00|00 00 7e c5) \tlfsu    f11,0\\(r30\\)\n+.*:\t(c9 9e 00 00|00 00 9e c9) \tlfd     f12,0\\(r30\\)\n+.*:\t(cd 9e 00 00|00 00 9e cd) \tlfdu    f12,0\\(r30\\)\n+.*:\t(d1 be 00 00|00 00 be d1) \tstfs    f13,0\\(r30\\)\n+.*:\t(d5 be 00 00|00 00 be d5) \tstfsu   f13,0\\(r30\\)\n+.*:\t(d9 de 00 00|00 00 de d9) \tstfd    f14,0\\(r30\\)\n+.*:\t(dd de 00 00|00 00 de dd) \tstfdu   f14,0\\(r30\\)\n+.*:\t(e9 fe 00 00|00 00 fe e9) \tld      r15,0\\(r30\\)\n+.*:\t(e9 fe 00 01|01 00 fe e9) \tldu     r15,0\\(r30\\)\n+.*:\t(fa 1e 00 00|00 00 1e fa) \tstd     r16,0\\(r30\\)\n+.*:\t(fa 1e 00 01|01 00 1e fa) \tstdu    r16,0\\(r30\\)\n+.*:\t(ea 3e 00 02|02 00 3e ea) \tlwa     r17,0\\(r30\\)"
    },
    {
      "sha": "384e7cedb05be1b32ba103ca093e88eee1aca0bb",
      "filename": "ld/testsuite/ld-powerpc/tlsie.s",
      "status": "added",
      "additions": 77,
      "deletions": 0,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsie.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsie.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/tlsie.s?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -0,0 +1,77 @@\n+ .section \".tbss\",\"awT\",@nobits\n+ .p2align 3\n+pad: .space 8\n+ .global a\n+a: .space 8\n+ .global b\n+b: .space 8\n+ .global c\n+c: .space 8\n+ .global d\n+d: .space 8\n+\n+ .text\n+ .globl _start\n+_start:\n+#Small model OpenPower\n+ ld 9,.La@toc(2)\n+ add 10,9,.La@tls\n+ .section .toc,\"aw\",@progbits\n+.La:\n+ .quad a@tprel\n+ .text\n+\n+#Medium model ELF\n+ addi 9,2,b@got@tprel@ha\n+ ld 10,b@got@tprel@l(9)\n+ add 3,10,b@tls\n+\n+#PCrel\n+ pld 4,c@got@tprel@pcrel\n+ add 4,4,c@tls@pcrel\n+\n+#All of the above using the same symbol\n+ addis 9,2,.Ld@toc@ha\n+ ld 9,.Ld@toc@l(9)\n+ add 10,9,.Ld@tls\n+ .section .toc,\"aw\",@progbits\n+.Ld:\n+ .quad d@tprel\n+ .text\n+ addi 9,2,d@got@tprel@ha\n+ ld 31,d@got@tprel@l(9)\n+ add 3,31,d@tls\n+ pld 30,d@got@tprel@pcrel\n+ add 3,30,d@tls@pcrel\n+#Note that after optimisation r31 and r30 above have a different value to\n+#what they would have without optimisation.  r31 may not even be written.\n+#Here are all the other insns that gas/ld accept as the final insn of an\n+#IE sequence.  The r30 value below will be different after optimisation\n+#for the non-update forms.\n+ lwzx 4,30,d@tls@pcrel\n+ lwzux 4,30,d@tls@pcrel\n+ lbzx 5,30,d@tls@pcrel\n+ lbzux 5,30,d@tls@pcrel\n+ stwx 6,30,d@tls@pcrel\n+ stwux 6,30,d@tls@pcrel\n+ stbx 7,30,d@tls@pcrel\n+ stbux 7,30,d@tls@pcrel\n+ lhzx 8,30,d@tls@pcrel\n+ lhzux 8,30,d@tls@pcrel\n+ lhax 9,30,d@tls@pcrel\n+ lhaux 9,30,d@tls@pcrel\n+ sthx 10,30,d@tls@pcrel\n+ sthux 10,30,d@tls@pcrel\n+ lfsx 11,30,d@tls@pcrel\n+ lfsux 11,30,d@tls@pcrel\n+ lfdx 12,30,d@tls@pcrel\n+ lfdux 12,30,d@tls@pcrel\n+ stfsx 13,30,d@tls@pcrel\n+ stfsux 13,30,d@tls@pcrel\n+ stfdx 14,30,d@tls@pcrel\n+ stfdux 14,30,d@tls@pcrel\n+ ldx 15,30,d@tls@pcrel\n+ ldux 15,30,d@tls@pcrel\n+ stdx 16,30,d@tls@pcrel\n+ stdux 16,30,d@tls@pcrel\n+ lwax 17,30,d@tls@pcrel"
    },
    {
      "sha": "740b15bec81fe105e17cdc0a33b8180e5a927cdb",
      "filename": "ld/testsuite/ld-powerpc/tlsld.d",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsld.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsld.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/tlsld.d?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -0,0 +1,36 @@\n+#source: tlsld.s\n+#as: -a64 -mfuture\n+#ld: -melf64ppc\n+#objdump: -dr -Mfuture\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+.*:\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(38 6d 10 00|00 10 6d 38) \taddi    r3,r13,4096\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(38 6d 10 00|00 10 6d 38) \taddi    r3,r13,4096\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 00 00 00|00 00 00 06) \tpaddi   r3,r13,4096\n+.*:\t(38 6d 10 00|00 10 6d 38) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 03 ff ff|ff ff 03 06) \tpaddi   r9,r3,-32728\n+.*:\t(39 23 80 28|28 80 23 39) \n+.*:\t(04 10 00 01|01 00 10 04) \tpld     r10,65784\n+.*:\t(e5 40 00 f8|f8 00 40 e5) \n+.*:\t(7d 4a 1a 14|14 1a 4a 7d) \tadd     r10,r10,r3\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(38 6d 10 00|00 10 6d 38) \taddi    r3,r13,4096\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(38 6d 10 00|00 10 6d 38) \taddi    r3,r13,4096\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 00 00 00|00 00 00 06) \tpaddi   r3,r13,4096\n+.*:\t(38 6d 10 00|00 10 6d 38) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop"
    },
    {
      "sha": "4ab2630f33b2e3037f2e3f0d62cf80d2752b57e6",
      "filename": "ld/testsuite/ld-powerpc/tlsld.s",
      "status": "added",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsld.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c213164ad2505cba5263602b7f9fa9a4dd1adf39/ld/testsuite/ld-powerpc/tlsld.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/tlsld.s?ref=c213164ad2505cba5263602b7f9fa9a4dd1adf39",
      "patch": "@@ -0,0 +1,58 @@\n+ .section \".tbss\",\"awT\",@nobits\n+ .p2align 3\n+pad: .space 8\n+ .global a\n+a: .space 8\n+ .global b\n+b: .space 8\n+ .global c\n+c: .space 8\n+ .global d\n+d: .space 8\n+z2: .space 8\n+z3: .space 8\n+\n+ .text\n+ .globl _start\n+_start:\n+#Small model OpenPower\n+ addi 3,2,.La@toc\n+ bl __tls_get_addr(.La@tlsld)\n+ nop\n+ .section .toc,\"aw\",@progbits\n+ .p2align 3\n+.La:\n+ .quad a@dtpmod\n+ .quad 0\n+ .text\n+\n+#Medium mode ELF\n+ addis 3,2,b@got@tlsld@ha\n+ addi 3,3,b@got@tlsld@l\n+ bl __tls_get_addr(b@tlsld)\n+ nop\n+\n+#PCrel, with dtprel access to vars\n+ pla 3,c@got@tlsld@pcrel\n+ bl __tls_get_addr@notoc(c@tlsld)\n+ paddi 9,3,z2@dtprel\n+ pld 10,z3@got@dtprel@pcrel\n+ add 10,10,3\n+\n+#All of the above using the same symbol\n+ addis 3,2,.Ld@toc@ha\n+ addi 3,3,.Ld@toc@l\n+ bl __tls_get_addr(.Ld@tlsld)\n+ nop\n+ .section .toc,\"aw\",@progbits\n+ .p2align 3\n+.Ld:\n+ .quad d@dtpmod\n+ .quad 0\n+ .text\n+ addis 3,2,d@got@tlsld@ha\n+ addi 3,3,d@got@tlsld@l\n+ bl __tls_get_addr(d@tlsld)\n+ nop\n+ pla 3,d@got@tlsld@pcrel\n+ bl __tls_get_addr@notoc(d@tlsld)"
    }
  ]
}