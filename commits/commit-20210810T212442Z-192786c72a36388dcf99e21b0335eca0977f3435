{
  "sha": "192786c72a36388dcf99e21b0335eca0977f3435",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTkyNzg2YzcyYTM2Mzg4ZGNmOTllMjFiMDMzNWVjYTA5NzdmMzQzNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-08-06T19:52:23Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-08-10T21:24:42Z"
    },
    "message": "Generalize addrmap dumping\n\nWhile debugging another patch series, I wanted to dump an addrmap.  I\ncame up with this patch, which generalizes the addrmap-dumping code\nfrom psymtab.c and moves it to addrmap.c.  psymtab.c is changed to use\nthe new code.",
    "tree": {
      "sha": "c64e73b3e1af207bbbf89b57a4a8a74168884906",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c64e73b3e1af207bbbf89b57a4a8a74168884906"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/192786c72a36388dcf99e21b0335eca0977f3435",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/192786c72a36388dcf99e21b0335eca0977f3435",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/192786c72a36388dcf99e21b0335eca0977f3435",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/192786c72a36388dcf99e21b0335eca0977f3435/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "69eadcc9eacf8d4a99ecfcb29c9fbb4eb398b9d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/69eadcc9eacf8d4a99ecfcb29c9fbb4eb398b9d8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/69eadcc9eacf8d4a99ecfcb29c9fbb4eb398b9d8"
    }
  ],
  "stats": {
    "total": 97,
    "additions": 46,
    "deletions": 51
  },
  "files": [
    {
      "sha": "d16e0aeca204ddaa7fe60c762e50d10b956f5e9d",
      "filename": "gdb/addrmap.c",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/192786c72a36388dcf99e21b0335eca0977f3435/gdb/addrmap.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/192786c72a36388dcf99e21b0335eca0977f3435/gdb/addrmap.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/addrmap.c?ref=192786c72a36388dcf99e21b0335eca0977f3435",
      "patch": "@@ -590,6 +590,41 @@ addrmap_create_mutable (struct obstack *obstack)\n   return (struct addrmap *) map;\n }\n \n+/* See addrmap.h.  */\n+\n+void\n+addrmap_dump (struct addrmap *map, struct ui_file *outfile, void *payload)\n+{\n+  /* True if the previously printed addrmap entry was for PAYLOAD.\n+     If so, we want to print the next one as well (since the next\n+     addrmap entry defines the end of the range).  */\n+  bool previous_matched = false;\n+\n+  auto callback = [&] (CORE_ADDR start_addr, void *obj)\n+  {\n+    QUIT;\n+\n+    bool matches = payload == nullptr || payload == obj;\n+    const char *addr_str = nullptr;\n+    if (matches)\n+      addr_str = host_address_to_string (obj);\n+    else if (previous_matched)\n+      addr_str = \"<ends here>\";\n+\n+    if (matches || previous_matched)\n+      fprintf_filtered (outfile, \"  %s%s %s\\n\",\n+\t\t\tpayload != nullptr ? \"  \" : \"\",\n+\t\t\tcore_addr_to_string (start_addr),\n+\t\t\taddr_str);\n+\n+    previous_matched = matches;\n+\n+    return 0;\n+  };\n+\n+  addrmap_foreach (map, callback);\n+}\n+\n #if GDB_SELF_TEST\n namespace selftests {\n "
    },
    {
      "sha": "5286a9261b0c43d0de679553d9d3a30780a37864",
      "filename": "gdb/addrmap.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/192786c72a36388dcf99e21b0335eca0977f3435/gdb/addrmap.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/192786c72a36388dcf99e21b0335eca0977f3435/gdb/addrmap.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/addrmap.h?ref=192786c72a36388dcf99e21b0335eca0977f3435",
      "patch": "@@ -104,4 +104,10 @@ typedef gdb::function_view<int (CORE_ADDR start_addr, void *obj)>\n    returns 0.  */\n int addrmap_foreach (struct addrmap *map, addrmap_foreach_fn fn);\n \n+/* Dump the addrmap to OUTFILE.  If PAYLOAD is non-NULL, only dump any\n+   components that map to PAYLOAD.  (If PAYLOAD is NULL, the entire\n+   map is dumped.)  */\n+void addrmap_dump (struct addrmap *map, struct ui_file *outfile,\n+\t\t   void *payload);\n+\n #endif /* ADDRMAP_H */"
    },
    {
      "sha": "7ffb7437785a9d7e08dd9e65350c5da532335b35",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 5,
      "deletions": 51,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/192786c72a36388dcf99e21b0335eca0977f3435/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/192786c72a36388dcf99e21b0335eca0977f3435/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=192786c72a36388dcf99e21b0335eca0977f3435",
      "patch": "@@ -1469,43 +1469,6 @@ psymtab_storage::discard_psymtab (struct partial_symtab *pst)\n \n \f\n \n-/* Helper function for dump_psymtab_addrmap to print an addrmap entry.  */\n-\n-static int\n-dump_psymtab_addrmap_1 (struct objfile *objfile,\n-\t\t\tstruct partial_symtab *psymtab,\n-\t\t\tstruct ui_file *outfile,\n-\t\t\tint *previous_matched,\n-\t\t\tCORE_ADDR start_addr,\n-\t\t\tvoid *obj)\n-{\n-  struct gdbarch *gdbarch = objfile->arch ();\n-  struct partial_symtab *addrmap_psymtab = (struct partial_symtab *) obj;\n-  const char *psymtab_address_or_end = NULL;\n-\n-  QUIT;\n-\n-  if (psymtab == NULL\n-      || psymtab == addrmap_psymtab)\n-    psymtab_address_or_end = host_address_to_string (addrmap_psymtab);\n-  else if (*previous_matched)\n-    psymtab_address_or_end = \"<ends here>\";\n-\n-  if (psymtab == NULL\n-      || psymtab == addrmap_psymtab\n-      || *previous_matched)\n-    {\n-      fprintf_filtered (outfile, \"  %s%s %s\\n\",\n-\t\t\tpsymtab != NULL ? \"  \" : \"\",\n-\t\t\tpaddress (gdbarch, start_addr),\n-\t\t\tpsymtab_address_or_end);\n-    }\n-\n-  *previous_matched = psymtab == NULL || psymtab == addrmap_psymtab;\n-\n-  return 0;\n-}\n-\n /* Helper function for maintenance_print_psymbols to print the addrmap\n    of PSYMTAB.  If PSYMTAB is NULL print the entire addrmap.  */\n \n@@ -1519,20 +1482,11 @@ dump_psymtab_addrmap (struct objfile *objfile,\n        || psymtab->psymtabs_addrmap_supported)\n       && partial_symtabs->psymtabs_addrmap != NULL)\n     {\n-      /* Non-zero if the previously printed addrmap entry was for\n-\t PSYMTAB.  If so, we want to print the next one as well (since\n-\t the next addrmap entry defines the end of the range).  */\n-      int previous_matched = 0;\n-\n-      auto callback = [&] (CORE_ADDR start_addr, void *obj)\n-      {\n-\treturn dump_psymtab_addrmap_1 (objfile, psymtab, outfile,\n-\t\t\t\t       &previous_matched, start_addr, obj);\n-      };\n-\n-      fprintf_filtered (outfile, \"%sddress map:\\n\",\n-\t\t\tpsymtab == NULL ? \"Entire a\" : \"  A\");\n-      addrmap_foreach (partial_symtabs->psymtabs_addrmap, callback);\n+      if (psymtab == nullptr)\n+\tfprintf_filtered (outfile, _(\"Entire address map:\\n\"));\n+      else\n+\tfprintf_filtered (outfile, _(\"Address map:\\n\"));\n+      addrmap_dump (partial_symtabs->psymtabs_addrmap, outfile, psymtab);\n     }\n }\n "
    }
  ]
}