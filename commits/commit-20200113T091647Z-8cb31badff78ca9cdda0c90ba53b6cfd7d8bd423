{
  "sha": "8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGNiMzFiYWRmZjc4Y2E5Y2RkYTBjOTBiYTUzYjZjZmQ3ZDhiZDQyMw==",
  "commit": {
    "author": {
      "name": "Claudiu Zissulescu",
      "email": "claziss@gmail.com",
      "date": "2020-01-13T09:16:47Z"
    },
    "committer": {
      "name": "Claudiu Zissulescu",
      "email": "claziss@gmail.com",
      "date": "2020-01-13T09:16:47Z"
    },
    "message": "[ARC][committed] Use DWARF.sc in elf linker script templates.\n\nxxxx-xx-xx  Claudiu Zissulescu  <claziss@synopsys.com>\n\n\t* elfarcv2.sc : Allow interrupt vector table to be located at an\n\tarbitrary address.  Use DWARF.sc file.\n\t* elfarc.sc: Use DWARF.sc file.",
    "tree": {
      "sha": "f8a2a5b2ec1e2472a24ca9365d60032cb7d4f185",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f8a2a5b2ec1e2472a24ca9365d60032cb7d4f185"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423/comments",
  "author": {
    "login": "claziss",
    "id": 2761368,
    "node_id": "MDQ6VXNlcjI3NjEzNjg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/claziss",
    "html_url": "https://github.com/claziss",
    "followers_url": "https://api.github.com/users/claziss/followers",
    "following_url": "https://api.github.com/users/claziss/following{/other_user}",
    "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/claziss/subscriptions",
    "organizations_url": "https://api.github.com/users/claziss/orgs",
    "repos_url": "https://api.github.com/users/claziss/repos",
    "events_url": "https://api.github.com/users/claziss/events{/privacy}",
    "received_events_url": "https://api.github.com/users/claziss/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "claziss",
    "id": 2761368,
    "node_id": "MDQ6VXNlcjI3NjEzNjg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/claziss",
    "html_url": "https://github.com/claziss",
    "followers_url": "https://api.github.com/users/claziss/followers",
    "following_url": "https://api.github.com/users/claziss/following{/other_user}",
    "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/claziss/subscriptions",
    "organizations_url": "https://api.github.com/users/claziss/orgs",
    "repos_url": "https://api.github.com/users/claziss/repos",
    "events_url": "https://api.github.com/users/claziss/events{/privacy}",
    "received_events_url": "https://api.github.com/users/claziss/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b9fe6b8aa6c7d662291764d22da09ad9f7c0288a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b9fe6b8aa6c7d662291764d22da09ad9f7c0288a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b9fe6b8aa6c7d662291764d22da09ad9f7c0288a"
    }
  ],
  "stats": {
    "total": 168,
    "additions": 70,
    "deletions": 98
  },
  "files": [
    {
      "sha": "58f9b8b44cf3a314732147da944293249ba464cf",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423",
      "patch": "@@ -1,3 +1,9 @@\n+2020-01-13  Claudiu Zissulescu  <claziss@gmail.com>\n+\n+\t* scripttempl/elfarcv2.sc : Allow interrupt vector table to be\n+\tlocated at an arbitrary address.  Use DWARF.sc file.\n+\t* scripttempl/elfarc.sc: Use DWARF.sc file.\n+\n 2020-01-07  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/ld-mips-elf/eh-frame5.s,"
    },
    {
      "sha": "8851c771f226eef1b1766068ad7eaaa62771f3d6",
      "filename": "ld/scripttempl/elfarc.sc",
      "status": "modified",
      "additions": 5,
      "deletions": 31,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423/ld/scripttempl/elfarc.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423/ld/scripttempl/elfarc.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/elfarc.sc?ref=8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423",
      "patch": "@@ -408,40 +408,14 @@ cat <<EOF\n   .stab.indexstr 0 : { *(.stab.indexstr) }\n \n   .comment       0 : { *(.comment) }\n+  .note.gnu.build-id : { *(.note.gnu.build-id) }\n+EOF\n \n-  /* DWARF debug sections.\n-     Symbols in the DWARF debugging sections are relative to the beginning\n-     of the section so we begin them at 0.  */\n-\n-  /* DWARF 1 */\n-  .debug          0 : { *(.debug) }\n-  .line           0 : { *(.line) }\n-\n-  /* GNU DWARF 1 extensions */\n-  .debug_srcinfo  0 : { *(.debug_srcinfo) }\n-  .debug_sfnames  0 : { *(.debug_sfnames) }\n-\n-  /* DWARF 1.1 and DWARF 2 */\n-  .debug_aranges  0 : { *(.debug_aranges) }\n-  .debug_pubnames 0 : { *(.debug_pubnames) }\n-\n-  /* DWARF 2 */\n-  .debug_info     0 : { *(.debug_info${RELOCATING+ .gnu.linkonce.wi.*}) }\n-  .debug_abbrev   0 : { *(.debug_abbrev) }\n-  .debug_line     0 : { *(.debug_line) }\n-  .debug_frame    0 : { *(.debug_frame) }\n-  .debug_str      0 : { *(.debug_str) }\n-  .debug_loc      0 : { *(.debug_loc) }\n-  .debug_macinfo  0 : { *(.debug_macinfo) }\n-\n-  /* SGI/MIPS DWARF 2 extensions */\n-  .debug_weaknames 0 : { *(.debug_weaknames) }\n-  .debug_funcnames 0 : { *(.debug_funcnames) }\n-  .debug_typenames 0 : { *(.debug_typenames) }\n-  .debug_varnames  0 : { *(.debug_varnames) }\n+. $srcdir/scripttempl/DWARF.sc\n \n+cat <<EOF\n   /* ARC Extension Sections */\n-  .arcextmap\t  0 : { *(.gnu.linkonce.arcextmap.*) }\n+  .arcextmap\t  0 : { *(.arcextmap.*) }\n \n   ${OTHER_SECTIONS}\n   ${RELOCATING+${OTHER_END_SYMBOLS}}"
    },
    {
      "sha": "b6cab6c5801f676de7a304d1a3392c2006285cb8",
      "filename": "ld/scripttempl/elfarcv2.sc",
      "status": "modified",
      "additions": 59,
      "deletions": 67,
      "changes": 126,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423/ld/scripttempl/elfarcv2.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423/ld/scripttempl/elfarcv2.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/elfarcv2.sc?ref=8cb31badff78ca9cdda0c90ba53b6cfd7d8bd423",
      "patch": "@@ -54,6 +54,16 @@ DTOR=\".dtors        ${CONSTRUCTING-0} :\n     ${CONSTRUCTING+${DTOR_END}}\n   } ${RELOCATING+ > ${DATA_MEMORY}}\"\n \n+IVT=\"\n+ /* If the 'ivtbase_addr' symbol is defined, it indicates  the base address of\n+    the interrupt vectors.  See description of INT_VECTOR_BASE register.  */\n+\n+ .ivt DEFINED (ivtbase_addr) ? ivtbase_addr : 0x00 :\n+ {\n+   ${RELOCATING+ PROVIDE (__ivtbase_addr = .); }\n+   KEEP (*(.ivt));\n+ } ${RELOCATING+ > ${STARTUP_MEMORY}}\"\n+\n if test -z \"${NO_SMALL_DATA}\"; then\n   SBSS=\".sbss         ${RELOCATING-0} :\n   {\n@@ -110,10 +120,6 @@ MEMORY\n     ICCM : ORIGIN = 0x00000000, LENGTH = ${ICCM_SIZE}\n     DCCM : ORIGIN = ${RAM_START_ADDR}, LENGTH = ${RAM_SIZE}\n }\n-\n-/* Setup the stack on the top of the data memory bank.  */\n-PROVIDE (__stack_top = (${RAM_START_ADDR} + ${RAM_SIZE} - 1) & -4);\n-PROVIDE (__end_heap = ${RAM_START_ADDR} + ${RAM_SIZE} - 1);\n \"\n \t;;\n esac\n@@ -129,15 +135,7 @@ ${RELOCATING+${MEMORY_DEF}}\n \n SECTIONS\n {\n-  .ivt 0x00 :\n-  {\n-   KEEP (*(.ivt));\n-  } ${RELOCATING+ > ${STARTUP_MEMORY}}\n-\n-  .startup 0x100:\n-  {\n-    KEEP (*crt0.o(.text.__startup))\n-  } ${RELOCATING+ > ${STARTUP_MEMORY}}\n+  ${RELOCATING+${IVT}}\n \n   /* Read-only sections, merged into text segment: */\n   ${TEXT_DYNAMIC+${DYNAMIC}}\n@@ -175,35 +173,21 @@ SECTIONS\n   .rel.bss      ${RELOCATING-0} : { *(.rel.bss${RELOCATING+ .rel.bss.* .rel.gnu.linkonce.b.*}) }\n   .rela.bss     ${RELOCATING-0} : { *(.rela.bss${RELOCATING+ .rela.bss.* .rela.gnu.linkonce.b.*}) }\n \n-  .jcr : { KEEP (*(.jcr)) } ${RELOCATING+> ${TEXT_MEMORY}}\n-  .eh_frame : { KEEP (*(.eh_frame)) } ${RELOCATING+> ${TEXT_MEMORY}}\n-  .gcc_except_table : { *(.gcc_except_table${RELOCATING+ .gcc_except_table.*}) } ${RELOCATING+> ${TEXT_MEMORY}}\n-  .plt : { *(.plt) } ${RELOCATING+> ${TEXT_MEMORY}}\n-  .jlitab :\n-  {\n-    ${RELOCATING+${JLI_START_TABLE}}\n-    ${RELOCATING+jlitab*.o:(.jlitab*)}\n-    *(.jlitab${RELOCATING+*})\n-  } ${RELOCATING+> ${TEXT_MEMORY}}\n-\n-  .rodata ${RELOCATING-0} :\n+  .text         ${RELOCATING-0} :\n   {\n-    *(.rodata) ${RELOCATING+*(.rodata.*)} ${RELOCATING+*(.gnu.linkonce.r.*)}\n-  } ${RELOCATING+> ${TEXT_MEMORY}}\n-\n-  .rodata1      ${RELOCATING-0} : { *(.rodata1) } ${RELOCATING+> ${TEXT_MEMORY}}\n+    ${RELOCATING+${TEXT_START_SYMBOLS}}\n \n-  .init         ${RELOCATING-0} :\n-  {\n+    ${RELOCATING+ . = ALIGN(4);}\n     ${RELOCATING+${INIT_START}}\n     KEEP (*(SORT_NONE(.init)))\n     ${RELOCATING+${INIT_END}}\n-  } ${RELOCATING+ > ${TEXT_MEMORY}}  =${NOP-0}\n \n-  .text         ${RELOCATING-0} :\n-  {\n-    ${RELOCATING+${TEXT_START_SYMBOLS}}\n+    /* Start here after reset.  */\n+    ${RELOCATING+ . = ALIGN(4);}\n+    KEEP (*crt0.o(.text.__startup))\n \n+    /* Remaining code.  */\n+    ${RELOCATING+ . = ALIGN(4);}\n     *(.text .stub${RELOCATING+ .text.* .gnu.linkonce.t.*})\n     /* .gnu.warning sections are handled specially by elf.em.  */\n     *(.gnu.warning)\n@@ -223,6 +207,39 @@ SECTIONS\n     ${RELOCATING+PROVIDE (etext = .);}\n   } ${RELOCATING+ > ${TEXT_MEMORY}} =${NOP-0}\n \n+  .jcr ${RELOCATING-0} :\n+  {\n+    KEEP (*(.jcr))\n+  } ${RELOCATING+> ${TEXT_MEMORY}}\n+\n+  .eh_frame ${RELOCATING-0} :\n+  {\n+    KEEP (*(.eh_frame))\n+  } ${RELOCATING+> ${TEXT_MEMORY}}\n+\n+  .gcc_except_table ${RELOCATING-0} :\n+  {\n+    *(.gcc_except_table) *(.gcc_except_table.*)\n+  } ${RELOCATING+> ${TEXT_MEMORY}}\n+\n+  .plt ${RELOCATING-0} :\n+  {\n+    *(.plt)\n+  } ${RELOCATING+> ${TEXT_MEMORY}}\n+\n+  .jlitab ${RELOCATING-0} :\n+  {\n+    ${RELOCATING+${JLI_START_TABLE}}\n+     jlitab*.o:(.jlitab*) *(.jlitab*)\n+  } ${RELOCATING+> ${TEXT_MEMORY}}\n+\n+  .rodata ${RELOCATING-0} :\n+  {\n+    *(.rodata) ${RELOCATING+*(.rodata.*)} ${RELOCATING+*(.gnu.linkonce.r.*)}\n+  } ${RELOCATING+> ${TEXT_MEMORY}}\n+\n+  .rodata1      ${RELOCATING-0} : { *(.rodata1) } ${RELOCATING+> ${TEXT_MEMORY}}\n+\n   ${RELOCATING+${OTHER_READONLY_SECTIONS}}\n \n   /* Start of the data section image in ROM.  */\n@@ -271,6 +288,8 @@ SECTIONS\n     ${RELOCATING+ PROVIDE (__start_heap = .) ; }\n   } ${RELOCATING+ > ${DATA_MEMORY}}\n \n+  ${RELOCATING+ PROVIDE (__stack_top = (ORIGIN (${DATA_MEMORY}) + LENGTH (${DATA_MEMORY}) - 1) & -4);}\n+  ${RELOCATING+ PROVIDE (__end_heap = ORIGIN (${DATA_MEMORY}) + LENGTH (${DATA_MEMORY}) - 1);}\n \n   /* Stabs debugging sections.  */\n   .stab          0 : { *(.stab) }\n@@ -281,40 +300,13 @@ SECTIONS\n   .stab.indexstr 0 : { *(.stab.indexstr) }\n \n   .comment       0 : { *(.comment) }\n+  .note.gnu.build-id : { *(.note.gnu.build-id) }\n+EOF\n \n-  /* DWARF debug sections.\n-     Symbols in the DWARF debugging sections are relative to the beginning\n-     of the section so we begin them at 0.  */\n-\n-  /* DWARF 1 */\n-  .debug          0 : { *(.debug) }\n-  .line           0 : { *(.line) }\n-\n-  /* GNU DWARF 1 extensions */\n-  .debug_srcinfo  0 : { *(.debug_srcinfo) }\n-  .debug_sfnames  0 : { *(.debug_sfnames) }\n-\n-  /* DWARF 1.1 and DWARF 2 */\n-  .debug_aranges  0 : { *(.debug_aranges) }\n-  .debug_pubnames 0 : { *(.debug_pubnames) }\n-\n-  /* DWARF 2 */\n-  .debug_info     0 : { *(.debug_info${RELOCATING+ .gnu.linkonce.wi.*}) }\n-  .debug_abbrev   0 : { *(.debug_abbrev) }\n-  .debug_line     0 : { *(.debug_line) }\n-  .debug_frame    0 : { *(.debug_frame) }\n-  .debug_str      0 : { *(.debug_str) }\n-  .debug_loc      0 : { *(.debug_loc) }\n-  .debug_macinfo  0 : { *(.debug_macinfo) }\n-\n-  /* DWARF 3 */\n-  .debug_pubtypes 0 : { *(.debug_pubtypes) }\n-  .debug_ranges   0 : { *(.debug_ranges) }\n-\n-  /* DWARF Extension.  */\n-  .debug_macro    0 : { *(.debug_macro) }\n+. $srcdir/scripttempl/DWARF.sc\n \n+cat <<EOF\n   /* ARC Extension Sections */\n-  .arcextmap\t  0 : { *(.gnu.linkonce.arcextmap.*) }\n+  .arcextmap\t  0 : { *(.arcextmap.*) }\n }\n EOF"
    }
  ]
}