{
  "sha": "523d4f80c32f43a6b009645947b94f87df35f79f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTIzZDRmODBjMzJmNDNhNmIwMDk2NDU5NDdiOTRmODdkZjM1Zjc5Zg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:59Z"
    },
    "message": "Implement stopped_by_sw_breakpoint for Windows gdbserver\n\nThis changes the Windows gdbserver port to implement the\nstopped_by_sw_breakpoint target method.  This is needed to support\npending stops.\n\nThis is a separate patch now, because Pedro suggested splitting it out\nfor simpler bisecting, in the case that it introduces a bug.\n\ngdbserver/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* win32-low.h  (win32_process_target::stopped_by_sw_breakpoint)\n\t(win32_process_target::supports_stopped_by_sw_breakpoint):\n\tDeclare.\n\t* win32-low.c (win32_supports_z_point_type): Always handle\n\tZ_PACKET_SW_BP.\n\t(win32_insert_point): Call insert_memory_breakpoint when needed.\n\t(win32_remove_point): Call remove_memory_breakpoint when needed.\n\t(win32_process_target::stopped_by_sw_breakpoint)\n\t(win32_process_target::supports_stopped_by_sw_breakpoint): New\n\tmethods.\n\t(win32_target_ops): Update.\n\t(maybe_adjust_pc): New function.\n\t(win32_wait): Call maybe_adjust_pc.",
    "tree": {
      "sha": "244948a1e348e64a1d3e991fd0fa011c3a18dac7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/244948a1e348e64a1d3e991fd0fa011c3a18dac7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/523d4f80c32f43a6b009645947b94f87df35f79f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/523d4f80c32f43a6b009645947b94f87df35f79f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/523d4f80c32f43a6b009645947b94f87df35f79f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/523d4f80c32f43a6b009645947b94f87df35f79f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e54e59297a747bb4f396345aa090d43f155b5576",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e54e59297a747bb4f396345aa090d43f155b5576",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e54e59297a747bb4f396345aa090d43f155b5576"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 75,
    "deletions": 12
  },
  "files": [
    {
      "sha": "36d6f29e424400067bbdb8d27919ab09d3e054cc",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/523d4f80c32f43a6b009645947b94f87df35f79f/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/523d4f80c32f43a6b009645947b94f87df35f79f/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=523d4f80c32f43a6b009645947b94f87df35f79f",
      "patch": "@@ -1,3 +1,19 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* win32-low.h  (win32_process_target::stopped_by_sw_breakpoint)\n+\t(win32_process_target::supports_stopped_by_sw_breakpoint):\n+\tDeclare.\n+\t* win32-low.c (win32_supports_z_point_type): Always handle\n+\tZ_PACKET_SW_BP.\n+\t(win32_insert_point): Call insert_memory_breakpoint when needed.\n+\t(win32_remove_point): Call remove_memory_breakpoint when needed.\n+\t(win32_process_target::stopped_by_sw_breakpoint)\n+\t(win32_process_target::supports_stopped_by_sw_breakpoint): New\n+\tmethods.\n+\t(win32_target_ops): Update.\n+\t(maybe_adjust_pc): New function.\n+\t(win32_wait): Call maybe_adjust_pc.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* win32-low.h (struct win32_target_ops) <decr_pc_after_break>: New"
    },
    {
      "sha": "4312bb3ab7cc3a8bb988febf680a09c5cb227ac8",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 55,
      "deletions": 12,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/523d4f80c32f43a6b009645947b94f87df35f79f/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/523d4f80c32f43a6b009645947b94f87df35f79f/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=523d4f80c32f43a6b009645947b94f87df35f79f",
      "patch": "@@ -236,15 +236,18 @@ child_delete_thread (DWORD pid, DWORD tid)\n bool\n win32_process_target::supports_z_point_type (char z_type)\n {\n-  return (the_low_target.supports_z_point_type != NULL\n-\t  && the_low_target.supports_z_point_type (z_type));\n+  return (z_type == Z_PACKET_SW_BP\n+\t  || (the_low_target.supports_z_point_type != NULL\n+\t      && the_low_target.supports_z_point_type (z_type)));\n }\n \n int\n win32_process_target::insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n \t\t\t\t    int size, raw_breakpoint *bp)\n {\n-  if (the_low_target.insert_point != NULL)\n+  if (type == raw_bkpt_type_sw)\n+    return insert_memory_breakpoint (bp);\n+  else if (the_low_target.insert_point != NULL)\n     return the_low_target.insert_point (type, addr, size, bp);\n   else\n     /* Unsupported (see target.h).  */\n@@ -255,7 +258,9 @@ int\n win32_process_target::remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n \t\t\t\t    int size, raw_breakpoint *bp)\n {\n-  if (the_low_target.remove_point != NULL)\n+  if (type == raw_bkpt_type_sw)\n+    return remove_memory_breakpoint (bp);\n+  else if (the_low_target.remove_point != NULL)\n     return the_low_target.remove_point (type, addr, size, bp);\n   else\n     /* Unsupported (see target.h).  */\n@@ -1189,6 +1194,32 @@ windows_nat::handle_ms_vc_exception (const EXCEPTION_RECORD *rec)\n   return false;\n }\n \n+/* A helper function that will, if needed, set\n+   'stopped_at_software_breakpoint' on the thread and adjust the\n+   PC.  */\n+\n+static void\n+maybe_adjust_pc ()\n+{\n+  struct regcache *regcache = get_thread_regcache (current_thread, 1);\n+  child_fetch_inferior_registers (regcache, -1);\n+\n+  windows_thread_info *th = thread_rec (current_thread_ptid (),\n+\t\t\t\t\tDONT_INVALIDATE_CONTEXT);\n+  th->stopped_at_software_breakpoint = false;\n+\n+  if (current_event.dwDebugEventCode == EXCEPTION_DEBUG_EVENT\n+      && (current_event.u.Exception.ExceptionRecord.ExceptionCode\n+\t  == EXCEPTION_BREAKPOINT)\n+      && child_initialization_done)\n+    {\n+      th->stopped_at_software_breakpoint = true;\n+      CORE_ADDR pc = regcache_read_pc (regcache);\n+      CORE_ADDR sw_breakpoint_pc = pc - the_low_target.decr_pc_after_break;\n+      regcache_write_pc (regcache, sw_breakpoint_pc);\n+    }\n+}\n+\n /* Get the next event from the child.  */\n \n static int\n@@ -1417,8 +1448,6 @@ ptid_t\n win32_process_target::wait (ptid_t ptid, target_waitstatus *ourstatus,\n \t\t\t    int options)\n {\n-  struct regcache *regcache;\n-\n   if (cached_status.kind != TARGET_WAITKIND_IGNORE)\n     {\n       /* The core always does a wait after creating the inferior, and\n@@ -1446,12 +1475,12 @@ win32_process_target::wait (ptid_t ptid, target_waitstatus *ourstatus,\n \tcase TARGET_WAITKIND_STOPPED:\n \tcase TARGET_WAITKIND_SIGNALLED:\n \tcase TARGET_WAITKIND_LOADED:\n-\t  OUTMSG2 ((\"Child Stopped with signal = %d \\n\",\n-\t\t    ourstatus->value.sig));\n-\n-\t  regcache = get_thread_regcache (current_thread, 1);\n-\t  child_fetch_inferior_registers (regcache, -1);\n-\t  return debug_event_ptid (&current_event);\n+\t  {\n+\t    OUTMSG2 ((\"Child Stopped with signal = %d \\n\",\n+\t\t      ourstatus->value.sig));\n+\t    maybe_adjust_pc ();\n+\t    return debug_event_ptid (&current_event);\n+\t  }\n \tdefault:\n \t  OUTMSG ((\"Ignoring unknown internal event, %d\\n\", ourstatus->kind));\n \t  /* fall-through */\n@@ -1659,6 +1688,20 @@ win32_process_target::sw_breakpoint_from_kind (int kind, int *size)\n   return the_low_target.breakpoint;\n }\n \n+bool\n+win32_process_target::stopped_by_sw_breakpoint ()\n+{\n+  windows_thread_info *th = thread_rec (current_thread_ptid (),\n+\t\t\t\t\tDONT_INVALIDATE_CONTEXT);\n+  return th == nullptr ? false : th->stopped_at_software_breakpoint;\n+}\n+\n+bool\n+win32_process_target::supports_stopped_by_sw_breakpoint ()\n+{\n+  return true;\n+}\n+\n CORE_ADDR\n win32_process_target::read_pc (struct regcache *regcache)\n {"
    },
    {
      "sha": "b3fa392dd31597437563c25cf7c89d7827ccd672",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/523d4f80c32f43a6b009645947b94f87df35f79f/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/523d4f80c32f43a6b009645947b94f87df35f79f/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=523d4f80c32f43a6b009645947b94f87df35f79f",
      "patch": "@@ -155,6 +155,10 @@ class win32_process_target : public process_stratum_target\n   CORE_ADDR read_pc (regcache *regcache) override;\n \n   void write_pc (regcache *regcache, CORE_ADDR pc) override;\n+\n+  bool stopped_by_sw_breakpoint () override;\n+\n+  bool supports_stopped_by_sw_breakpoint () override;\n };\n \n /* Retrieve the context for this thread, if not already retrieved.  */"
    }
  ]
}