{
  "sha": "7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
  "node_id": "C_kwDOANOeidoAKDdlYmFhNWY3ODIxNjgyYzQwZTc5ZWUxZmRmZTQzNTI4YjdkODczNzY",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-08-27T00:17:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-09-24T17:58:04Z"
    },
    "message": "Move value_true to value.h\n\nI noticed that value_true is declared in language.h and defined in\nlanguage.c.  However, as part of the value API, I think it would be\nbetter in one of those files.  And, because it is very short, I\nchanged it to be an inline function in value.h.  I've also removed a\ncomment from the implementation, on the basis that it seems obsolete\n-- if the change it suggests was needed, it probably would have been\ndone by now; and if it is needed in the future, odds are it would be\ndone differently anyway.\n\nFinally, this patch also changes value_true and value_logical_not to\nreturn a bool, and updates some uses.",
    "tree": {
      "sha": "e32d94cab5616bedf19aa1637eaea7e1c0df49fb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e32d94cab5616bedf19aa1637eaea7e1c0df49fb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "604386598d43e50f183aba65189354e04ffbdda3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/604386598d43e50f183aba65189354e04ffbdda3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/604386598d43e50f183aba65189354e04ffbdda3"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 20,
    "deletions": 34
  },
  "files": [
    {
      "sha": "a00fa1411564e0f05d099a28f59726b2ec7ba5ea",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
      "patch": "@@ -11765,13 +11765,13 @@ re_set_exception (struct breakpoint *b)\n    user specified a specific exception, we only want to cause a stop\n    if the program thrown that exception.  */\n \n-static int\n+static bool\n should_stop_exception (const struct bp_location *bl)\n {\n   struct ada_catchpoint *c = (struct ada_catchpoint *) bl->owner;\n   const struct ada_catchpoint_location *ada_loc\n     = (const struct ada_catchpoint_location *) bl;\n-  int stop;\n+  bool stop;\n \n   struct internalvar *var = lookup_internalvar (\"_ada_exception\");\n   if (c->m_kind == ada_catch_assert)\n@@ -11799,16 +11799,16 @@ should_stop_exception (const struct bp_location *bl)\n \n   /* With no specific exception, should always stop.  */\n   if (c->excep_string.empty ())\n-    return 1;\n+    return true;\n \n   if (ada_loc->excep_cond_expr == NULL)\n     {\n       /* We will have a NULL expression if back when we were creating\n \t the expressions, this location's had failed to parse.  */\n-      return 1;\n+      return true;\n     }\n \n-  stop = 1;\n+  stop = true;\n   try\n     {\n       struct value *mark;"
    },
    {
      "sha": "0aaa59ea65f229979180bac0d31aa69b0f9a2674",
      "filename": "gdb/cli/cli-script.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/cli/cli-script.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/cli/cli-script.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-script.c?ref=7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
      "patch": "@@ -19,7 +19,6 @@\n \n #include \"defs.h\"\n #include \"value.h\"\n-#include \"language.h\"\t\t/* For value_true */\n #include <ctype.h>\n \n #include \"ui-out.h\"\n@@ -579,7 +578,7 @@ execute_control_command_1 (struct command_line *cmd, int from_tty)\n \t/* Keep iterating so long as the expression is true.  */\n \twhile (loop == 1)\n \t  {\n-\t    int cond_result;\n+\t    bool cond_result;\n \n \t    QUIT;\n "
    },
    {
      "sha": "bfab6d8094a14d4a2d0eedc9e86f7f902f3c8e13",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
      "patch": "@@ -2204,7 +2204,7 @@ logical_and_operation::evaluate (struct type *expect_type,\n     }\n   else\n     {\n-      int tem = value_logical_not (arg1);\n+      bool tem = value_logical_not (arg1);\n       if (!tem)\n \t{\n \t  arg2 = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n@@ -2233,7 +2233,7 @@ logical_or_operation::evaluate (struct type *expect_type,\n     }\n   else\n     {\n-      int tem = value_logical_not (arg1);\n+      bool tem = value_logical_not (arg1);\n       if (tem)\n \t{\n \t  arg2 = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);"
    },
    {
      "sha": "cb28e638fc4fc9360b86e0f09f3830dfcaed2e4b",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 0,
      "deletions": 17,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
      "patch": "@@ -387,23 +387,6 @@ language_info ()\n   show_language_command (NULL, 1, NULL, NULL);\n }\n \f\n-\n-/* This page contains functions that return info about\n-   (struct value) values used in GDB.  */\n-\n-/* Returns non-zero if the value VAL represents a true value.  */\n-int\n-value_true (struct value *val)\n-{\n-  /* It is possible that we should have some sort of error if a non-boolean\n-     value is used in this context.  Possibly dependent on some kind of\n-     \"boolean-checking\" option like range checking.  But it should probably\n-     not depend on the language except insofar as is necessary to identify\n-     a \"boolean\" value (i.e. in C using a float, pointer, etc., as a boolean\n-     should be an error, probably).  */\n-  return !value_logical_not (val);\n-}\n-\f\n /* This page contains functions for the printing out of\n    error messages that occur during type- and range-\n    checking.  */"
    },
    {
      "sha": "cec3ab03ed65f1b855fa9311516b580bfe9ad0a1",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
      "patch": "@@ -778,10 +778,6 @@ extern enum language set_language (enum language);\n \n extern void range_error (const char *, ...) ATTRIBUTE_PRINTF (1, 2);\n \n-/* Data:  Does this value represent \"truth\" to the current language?  */\n-\n-extern int value_true (struct value *);\n-\n /* Misc:  The string representing a particular enum language.  */\n \n extern enum language language_enum (const char *str);"
    },
    {
      "sha": "b877de400d7b9a1c5e6c0d6fbb067581232cf237",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
      "patch": "@@ -748,7 +748,7 @@ opencl_logical_binop_operation::evaluate (struct type *expect_type,\n       /* For scalar built-in types, only evaluate the right\n \t hand operand if the left hand operand compares\n \t unequal(&&)/equal(||) to 0.  */\n-      int tmp = value_logical_not (arg1);\n+      bool tmp = value_logical_not (arg1);\n \n       if (op == BINOP_LOGICAL_OR)\n \ttmp = !tmp;"
    },
    {
      "sha": "07472ef7c8a046edac2014928bb02ec14cb51ad9",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
      "patch": "@@ -1653,9 +1653,9 @@ value_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n   return val;\n }\n \f\n-/* Simulate the C operator ! -- return 1 if ARG1 contains zero.  */\n+/* See value.h.  */\n \n-int\n+bool\n value_logical_not (struct value *arg1)\n {\n   int len;"
    },
    {
      "sha": "3f00444e7e3b227c6be1174fd0ea1414012100dd",
      "filename": "gdb/value.h",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/value.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ebaa5f7821682c40e79ee1fdfe43528b7d87376/gdb/value.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.h?ref=7ebaa5f7821682c40e79ee1fdfe43528b7d87376",
      "patch": "@@ -1022,7 +1022,15 @@ extern int value_equal_contents (struct value *arg1, struct value *arg2);\n \n extern int value_less (struct value *arg1, struct value *arg2);\n \n-extern int value_logical_not (struct value *arg1);\n+/* Simulate the C operator ! -- return true if ARG1 contains zero.  */\n+extern bool value_logical_not (struct value *arg1);\n+\n+/* Returns true if the value VAL represents a true value.  */\n+static inline bool\n+value_true (struct value *val)\n+{\n+  return !value_logical_not (val);\n+}\n \n /* C++ */\n "
    }
  ]
}