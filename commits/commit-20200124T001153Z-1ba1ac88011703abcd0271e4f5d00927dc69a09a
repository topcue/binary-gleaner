{
  "sha": "1ba1ac88011703abcd0271e4f5d00927dc69a09a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWJhMWFjODgwMTE3MDNhYmNkMDI3MWU0ZjVkMDA5MjdkYzY5YTA5YQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-19T11:17:20Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-01-24T00:11:53Z"
    },
    "message": "gdb: Enable stdin on exception in execute_gdb_command\n\nThis is an update of this patch:\n\n  https://sourceware.org/ml/gdb-patches/2018-09/msg00884.html\n\nThis patch attempts to address PR gdb/23718 by re-enabling stdin\nwhenever an exception is caught during gdb.execute().\n\nWhen Python gdb.execute() is called, an exception could occur (e.g. the\ntarget disappearing), which is then converted into a Python exception.  If\nstdin was disabled before the exception is caught, it is not re-enabled,\nbecause the exception doesn't propagate to the top level of the event loop,\nwhose catch block would otherwise enable it.\n\nThe result is that when execution of a Python script completes, GDB does\nnot prompt or accept input, and is effectively hung.\n\nThis change rectifies the issue by re-enabling stdin in the catch block of\nexecute_gdb_command, prior to converting the exception to a Python\nexception.\n\nSince this patch was originally posted I've added a test, and also I\nconverted the code to re-enable stdin from this:\n\n  SWITCH_THRU_ALL_UIS ()\n    {\n      async_enable_stdin ();\n    }\n\nto simply this:\n\n  async_enable_stdin ();\n\nMy reasoning is that we only need the SWITCH_THRU_ALL_UIS if, at the time\nthe exception is caught, the current_ui might be different than at the time\nwe called async_disable_stdin.  Within python's execute_gdb_command I think\nit should be impossible to switch current_ui, so the SWITCH_THRU_ALL_UIS\nisn't needed.\n\ngdb/ChangeLog:\n\n\tPR gdb/23718\n\t* gdb/python/python.c (execute_gdb_command): Call\n\tasync_enable_stdin in catch block.\n\ngdb/testsuite/ChangeLog:\n\n        PR gdb/23718\n\t* gdb.server/server-kill-python.exp: New file.\n\nChange-Id: I1cfc36ee9f8484cc1ed82be9be338353db6bc080",
    "tree": {
      "sha": "4a879eb157f7949da1c165e7b9b641e631997ec8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4a879eb157f7949da1c165e7b9b641e631997ec8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1ba1ac88011703abcd0271e4f5d00927dc69a09a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ba1ac88011703abcd0271e4f5d00927dc69a09a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1ba1ac88011703abcd0271e4f5d00927dc69a09a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ba1ac88011703abcd0271e4f5d00927dc69a09a/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f3364a6d0fefe44fc26a1d5025b3af55ecec5cad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f3364a6d0fefe44fc26a1d5025b3af55ecec5cad"
    }
  ],
  "stats": {
    "total": 105,
    "additions": 105,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ca2e49eb508a913b6ccc15cbce3ee2c2460fc579",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ba1ac88011703abcd0271e4f5d00927dc69a09a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ba1ac88011703abcd0271e4f5d00927dc69a09a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1ba1ac88011703abcd0271e4f5d00927dc69a09a",
      "patch": "@@ -1,3 +1,9 @@\n+2020-01-24  Graham Markall  <graham.markall@embecosm.com>\n+\n+\tPR gdb/23718\n+\t* gdb/python/python.c (execute_gdb_command): Call\n+\tasync_enable_stdin in catch block.\n+\n 2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* event-loop.c (start_event_loop): Wrap async_enable_stdin with"
    },
    {
      "sha": "27d6042c618887cf1a31546d7737bf805196824e",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ba1ac88011703abcd0271e4f5d00927dc69a09a/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ba1ac88011703abcd0271e4f5d00927dc69a09a/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=1ba1ac88011703abcd0271e4f5d00927dc69a09a",
      "patch": "@@ -624,6 +624,12 @@ execute_gdb_command (PyObject *self, PyObject *args, PyObject *kw)\n     }\n   catch (const gdb_exception &except)\n     {\n+      /* If an exception occurred then we won't hit normal_stop (), or have\n+\t an exception reach the top level of the event loop, which are the\n+\t two usual places in which stdin would be re-enabled. So, before we\n+\t convert the exception and continue back in Python, we should\n+\t re-enable stdin here.  */\n+      async_enable_stdin ();\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n "
    },
    {
      "sha": "3a97848060121a68c12498aa44e26de877319699",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ba1ac88011703abcd0271e4f5d00927dc69a09a/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ba1ac88011703abcd0271e4f5d00927dc69a09a/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=1ba1ac88011703abcd0271e4f5d00927dc69a09a",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\tPR gdb/23718\n+\t* gdb.server/server-kill-python.exp: New file.\n+\n 2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.server/multi-ui-errors.c: New file."
    },
    {
      "sha": "28064ca0a464434416846ac61034d027133a48c5",
      "filename": "gdb/testsuite/gdb.server/server-kill-python.exp",
      "status": "added",
      "additions": 88,
      "deletions": 0,
      "changes": 88,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ba1ac88011703abcd0271e4f5d00927dc69a09a/gdb/testsuite/gdb.server/server-kill-python.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ba1ac88011703abcd0271e4f5d00927dc69a09a/gdb/testsuite/gdb.server/server-kill-python.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/server-kill-python.exp?ref=1ba1ac88011703abcd0271e4f5d00927dc69a09a",
      "patch": "@@ -0,0 +1,88 @@\n+# This testcase is part of GDB, the GNU debugger.\n+#\n+# Copyright 2019-2020 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test script exposes a bug where, if gdbserver dies while GDB is\n+# sourcing a python command like 'gdb.execute (\"continue\")', then GDB\n+# will deadlock.\n+\n+load_lib gdbserver-support.exp\n+\n+standard_testfile multi-ui-errors.c\n+\n+if {[skip_gdbserver_tests]} {\n+    return 0\n+}\n+\n+if {[build_executable \"failed to prepare\" ${testfile} \\\n+\t ${srcfile}] == -1} {\n+    return -1\n+}\n+\n+# Start gdbserver.\n+set res [gdbserver_spawn \"${binfile}\"]\n+set gdbserver_protocol [lindex $res 0]\n+set gdbserver_gdbport [lindex $res 1]\n+set gdbserver_pid [exp_pid -i $server_spawn_id]\n+\n+# Generate a python script we will later source.\n+set file1 [standard_output_file file1.py]\n+set fd [open \"$file1\" w]\n+puts $fd \\\n+\"import gdb\n+\n+def do_gdb_stuff ():\n+    gdb.execute ('target $gdbserver_protocol $gdbserver_gdbport')\n+    gdb.execute ('continue')\n+\n+do_gdb_stuff()\"\n+close $fd\n+\n+# Now start GDB, sourcing the python command file we generated above.\n+# Set the height and width so we don't end up at a paging prompt.\n+if {[gdb_spawn_with_cmdline_opts \\\n+\t \"-quiet -iex \\\"set height 0\\\" -iex \\\"set width 0\\\" -ex \\\"source $file1\\\"\"] != 0} {\n+    fail \"spawn\"\n+    return\n+}\n+\n+# Wait for the inferior to start up.\n+with_spawn_id $server_spawn_id {\n+    gdb_test_multiple \"\" \"ensure inferior is running\" {\n+\t-re \"@@XX@@ Inferior Starting @@XX@@\" {\n+\t    pass $gdb_test_name\n+\t}\n+\ttimeout {\n+\t    fail $gdb_tst_name\n+\t}\n+    }\n+}\n+\n+# Now kill the gdbserver.\n+remote_exec target \"kill -9 $gdbserver_pid\"\n+\n+# Wait for GDB to return to a prompt.\n+gdb_test_multiple \"\" \"landed at prompt after gdbserver dies\" {\n+    -re \"$gdb_prompt $\" {\n+\tpass $gdb_test_name\n+    }\n+    timeout {\n+\tfail \"$gdb_test_name (timeout)\"\n+    }\n+}\n+\n+# Run a simple command to ensure we can interact with GDB.\n+gdb_test \"echo hello\\\\n\" \"hello\" \"can we interact with gdb\""
    }
  ]
}