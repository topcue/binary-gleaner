{
  "sha": "2528f8ada68f0bf26c7e978a5be76dd3ec763f8b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjUyOGY4YWRhNjhmMGJmMjZjN2U5NzhhNWJlNzZkZDNlYzc2M2Y4Yg==",
  "commit": {
    "author": {
      "name": "Mihails Strasuns",
      "email": "mihails.strasuns@intel.com",
      "date": "2020-02-18T11:30:54Z"
    },
    "committer": {
      "name": "Mihails Strasuns",
      "email": "mihails.strasuns@intel.com",
      "date": "2020-05-12T07:52:46Z"
    },
    "message": "[gdb/testsuite] add jit-elf-util.h and run jit function\n\nSplits ELF related symbols into a separate jit-elf-util.h header and\nenhances it with a few more.\n\nIntention is to make adding new JIT tests possible without repeating\nmost of the common boilerplate.\n\nAs a test enhancement, jit-elf-main.c now calls the renamed function\nafter registering the jit object and ensures it returns an expected\nresult.\n\ngdb/testsuite/ChangeLog:\n\n2020-02-18  Mihails Strasuns  <mihails.strasuns@intel.com>\n\n\t* gdb.base/jit-elf-util.h: New header file.\n\t* gdb.base/jit-elf-main.c: Use jit-elf-util.h, add a call to\n\t  the renamed JIT function to verify its result.",
    "tree": {
      "sha": "88b74e37f68b48f24d2f5fda0dce969578d28d8d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/88b74e37f68b48f24d2f5fda0dce969578d28d8d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2528f8ada68f0bf26c7e978a5be76dd3ec763f8b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2528f8ada68f0bf26c7e978a5be76dd3ec763f8b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2528f8ada68f0bf26c7e978a5be76dd3ec763f8b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2528f8ada68f0bf26c7e978a5be76dd3ec763f8b/comments",
  "author": {
    "login": "mihails-strasuns-intel",
    "id": 55576710,
    "node_id": "MDQ6VXNlcjU1NTc2NzEw",
    "avatar_url": "https://avatars.githubusercontent.com/u/55576710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mihails-strasuns-intel",
    "html_url": "https://github.com/mihails-strasuns-intel",
    "followers_url": "https://api.github.com/users/mihails-strasuns-intel/followers",
    "following_url": "https://api.github.com/users/mihails-strasuns-intel/following{/other_user}",
    "gists_url": "https://api.github.com/users/mihails-strasuns-intel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mihails-strasuns-intel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mihails-strasuns-intel/subscriptions",
    "organizations_url": "https://api.github.com/users/mihails-strasuns-intel/orgs",
    "repos_url": "https://api.github.com/users/mihails-strasuns-intel/repos",
    "events_url": "https://api.github.com/users/mihails-strasuns-intel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mihails-strasuns-intel/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mihails-strasuns-intel",
    "id": 55576710,
    "node_id": "MDQ6VXNlcjU1NTc2NzEw",
    "avatar_url": "https://avatars.githubusercontent.com/u/55576710?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mihails-strasuns-intel",
    "html_url": "https://github.com/mihails-strasuns-intel",
    "followers_url": "https://api.github.com/users/mihails-strasuns-intel/followers",
    "following_url": "https://api.github.com/users/mihails-strasuns-intel/following{/other_user}",
    "gists_url": "https://api.github.com/users/mihails-strasuns-intel/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mihails-strasuns-intel/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mihails-strasuns-intel/subscriptions",
    "organizations_url": "https://api.github.com/users/mihails-strasuns-intel/orgs",
    "repos_url": "https://api.github.com/users/mihails-strasuns-intel/repos",
    "events_url": "https://api.github.com/users/mihails-strasuns-intel/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mihails-strasuns-intel/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aff4e759b8ad54df367e38ceaf16c92f680695a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aff4e759b8ad54df367e38ceaf16c92f680695a1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aff4e759b8ad54df367e38ceaf16c92f680695a1"
    }
  ],
  "stats": {
    "total": 172,
    "additions": 133,
    "deletions": 39
  },
  "files": [
    {
      "sha": "07361e6a6b9407710e8292155fb68a41cbb1183b",
      "filename": "gdb/testsuite/gdb.base/jit-elf-main.c",
      "status": "modified",
      "additions": 15,
      "deletions": 39,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2528f8ada68f0bf26c7e978a5be76dd3ec763f8b/gdb/testsuite/gdb.base/jit-elf-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2528f8ada68f0bf26c7e978a5be76dd3ec763f8b/gdb/testsuite/gdb.base/jit-elf-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jit-elf-main.c?ref=2528f8ada68f0bf26c7e978a5be76dd3ec763f8b",
      "patch": "@@ -30,19 +30,7 @@\n #include <unistd.h>\n \n #include \"jit-protocol.h\"\n-\n-/* ElfW is coming from linux. On other platforms it does not exist.\n-   Let us define it here. */\n-#ifndef ElfW\n-# if (defined  (_LP64) || defined (__LP64__)) \n-#   define WORDSIZE 64\n-# else\n-#   define WORDSIZE 32\n-# endif /* _LP64 || __LP64__  */\n-#define ElfW(type)      _ElfW (Elf, WORDSIZE, type)\n-#define _ElfW(e,w,t)    _ElfW_1 (e, w, _##t)\n-#define _ElfW_1(e,w,t)  e##w##t\n-#endif /* !ElfW  */\n+#include \"jit-elf-util.h\"\n \n static void\n usage (void)\n@@ -95,37 +83,19 @@ MAIN (int argc, char *argv[])\n \n   for (i = 1; i < argc; ++i)\n     {\n-      struct stat st;\n-      int fd;\n-\n-      printf (\"%s:%d: libname = %s, i = %d\\n\", __FILE__, __LINE__, argv[i], i);\n-      if ((fd = open (argv[i], O_RDONLY)) == -1)\n-\t{\n-\t  fprintf (stderr, \"open (\\\"%s\\\", O_RDONLY): %s\\n\", argv[i],\n-\t\t   strerror (errno));\n-\t  exit (1);\n-\t}\n-\n-      if (fstat (fd, &st) != 0)\n-\t{\n-\t  fprintf (stderr, \"fstat (\\\"%d\\\"): %s\\n\", fd, strerror (errno));\n-\t  exit (1);\n-\t}\n-\n+      size_t obj_size;\n       void *load_addr = (void *) (size_t) (LOAD_ADDRESS + (i - 1) * LOAD_INCREMENT);\n-      const void *const addr = mmap (load_addr, st.st_size, PROT_READ|PROT_WRITE,\n-\t\t\t\t     MAP_PRIVATE | MAP_FIXED, fd, 0);\n-      struct jit_code_entry *const entry = calloc (1, sizeof (*entry));\n+      printf (\"Loading %s as JIT at %p\\n\", argv[i], load_addr);\n+      void *addr = load_elf (argv[i], &obj_size, load_addr);\n \n-      if (addr == MAP_FAILED)\n-\t{\n-\t  fprintf (stderr, \"mmap: %s\\n\", strerror (errno));\n-\t  exit (1);\n-\t}\n+      char name[32];\n+      sprintf (name, \"jit_function_%04d\", i);\n+      int (*jit_function) (void) = (int (*) (void)) load_symbol (addr, name);\n \n       /* Link entry at the end of the list.  */\n+      struct jit_code_entry *const entry = calloc (1, sizeof (*entry));\n       entry->symfile_addr = (const char *)addr;\n-      entry->symfile_size = st.st_size;\n+      entry->symfile_size = obj_size;\n       entry->prev_entry = __jit_debug_descriptor.relevant_entry;\n       __jit_debug_descriptor.relevant_entry = entry;\n \n@@ -137,6 +107,12 @@ MAIN (int argc, char *argv[])\n       /* Notify GDB.  */\n       __jit_debug_descriptor.action_flag = JIT_REGISTER;\n       __jit_debug_register_code ();\n+\n+      if (jit_function () != 42)\n+\t{\n+\t  fprintf (stderr, \"unexpected return value\\n\");\n+\t  exit (1);\n+\t}\n     }\n \n   WAIT_FOR_GDB; i = 0;  /* gdb break here 1 */"
    },
    {
      "sha": "843cf306182df30043a1d79c16357331d7298bd5",
      "filename": "gdb/testsuite/gdb.base/jit-elf-util.h",
      "status": "added",
      "additions": 118,
      "deletions": 0,
      "changes": 118,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2528f8ada68f0bf26c7e978a5be76dd3ec763f8b/gdb/testsuite/gdb.base/jit-elf-util.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2528f8ada68f0bf26c7e978a5be76dd3ec763f8b/gdb/testsuite/gdb.base/jit-elf-util.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/jit-elf-util.h?ref=2528f8ada68f0bf26c7e978a5be76dd3ec763f8b",
      "patch": "@@ -0,0 +1,118 @@\n+/* This test program is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* Simulates loading of JIT code by memory mapping a compiled\n+   shared library binary and doing minimal post-processing.  */\n+\n+#include <elf.h>\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <link.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+#include <sys/mman.h>\n+#include <sys/stat.h>\n+#include <unistd.h>\n+\n+/* ElfW is coming from linux. On other platforms it does not exist.\n+   Let us define it here. */\n+#ifndef ElfW\n+#if (defined(_LP64) || defined(__LP64__))\n+#define WORDSIZE 64\n+#else\n+#define WORDSIZE 32\n+#endif /* _LP64 || __LP64__  */\n+#define ElfW(type) _ElfW (Elf, WORDSIZE, type)\n+#define _ElfW(e, w, t) _ElfW_1 (e, w, _##t)\n+#define _ElfW_1(e, w, t) e##w##t\n+#endif /* !ElfW  */\n+\n+/* Find symbol with the name `sym_name`.  */\n+static void *\n+load_symbol (void *addr, const char *sym_name)\n+{\n+  const ElfW (Ehdr) *const ehdr = (ElfW (Ehdr) *) addr;\n+  ElfW (Shdr) *const shdr = (ElfW (Shdr) *) ((char *) addr + ehdr->e_shoff);\n+\n+  ElfW (Addr) sym_old_addr = 0;\n+  ElfW (Addr) sym_new_addr = 0;\n+\n+  /* Find `func_name` in symbol_table and return its address.  */\n+\n+  for (int i = 0; i < ehdr->e_shnum; ++i)\n+    {\n+      if (shdr[i].sh_type == SHT_SYMTAB)\n+\t{\n+\t  ElfW (Sym) *symtab = (ElfW (Sym) *) (addr + shdr[i].sh_offset);\n+\t  ElfW (Sym) *symtab_end\n+\t      = (ElfW (Sym) *) (addr + shdr[i].sh_offset + shdr[i].sh_size);\n+\t  char *const strtab\n+\t      = (char *) (addr + shdr[shdr[i].sh_link].sh_offset);\n+\n+\t  for (ElfW (Sym) *p = symtab; p < symtab_end; ++p)\n+\t    {\n+\t      const char *s = strtab + p->st_name;\n+\t      if (strcmp (s, sym_name) == 0)\n+\t        return (void *) p->st_value;\n+\t    }\n+\t}\n+    }\n+\n+  fprintf (stderr, \"symbol '%s' not found\\n\", sym_name);\n+  exit (1);\n+  return 0;\n+}\n+\n+/* Open an elf binary file and memory map it with execution flag enabled.  */\n+static void *\n+load_elf (const char *libname, size_t *size, void *load_addr)\n+{\n+  int fd;\n+  struct stat st;\n+\n+  if ((fd = open (libname, O_RDONLY)) == -1)\n+    {\n+      fprintf (stderr, \"open (\\\"%s\\\", O_RDONLY): %s\\n\", libname,\n+\t       strerror (errno));\n+      exit (1);\n+    }\n+\n+  if (fstat (fd, &st) != 0)\n+    {\n+      fprintf (stderr, \"fstat (\\\"%d\\\"): %s\\n\", fd, strerror (errno));\n+      exit (1);\n+    }\n+\n+  void *addr = mmap (load_addr, st.st_size,\n+  \t\t     PROT_READ | PROT_WRITE | PROT_EXEC,\n+\t\t     load_addr != NULL ? MAP_PRIVATE | MAP_FIXED : MAP_PRIVATE,\n+\t\t     fd, 0);\n+  close (fd);\n+\n+  if (addr == MAP_FAILED)\n+    {\n+      fprintf (stderr, \"mmap: %s\\n\", strerror (errno));\n+      exit (1);\n+    }\n+\n+  if (size != NULL)\n+    *size = st.st_size;\n+\n+  return addr;\n+}"
    }
  ]
}