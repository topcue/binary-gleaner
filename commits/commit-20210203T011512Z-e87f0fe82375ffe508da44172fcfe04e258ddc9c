{
  "sha": "e87f0fe82375ffe508da44172fcfe04e258ddc9c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTg3ZjBmZTgyMzc1ZmZlNTA4ZGE0NDE3MmZjZmUwNGUyNThkZGM5Yw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-12-13T01:35:05Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-02-03T01:15:12Z"
    },
    "message": "detach and breakpoint removal\n\nA following patch will add a testcase that has a number of threads\nconstantly stepping over a breakpoint, and then has GDB detach the\nprocess.  That testcase sometimes fails with the inferior crashing\nwith SIGTRAP after the detach because of the bug fixed by this patch,\nwhen tested with the native target.\n\nThe problem is that target_detach removes breakpoints from the target\nimmediately, and that does not work with the native GNU/Linux target\n(and probably no other native target) currently.  The test wouldn't\nfail with this issue when testing against gdbserver, because gdbserver\ndoes allow accessing memory while the current thread is running, by\ntransparently pausing all threads temporarily, without GDB noticing.\nImplementing that in gdbserver was a lot of work, so I'm not looking\nforward right now to do the same in the native target.  Instead, I\ncame up with a simpler solution -- push the breakpoints removal down\nto the targets.  The Linux target conveniently already pauses all\nthreads before detaching them, since PTRACE_DETACH only works with\nstopped threads, so we move removing breakpoints to after that.  Only\nthe remote and GNU/Linux targets support support async execution, so\nno other target should really need this.\n\ngdb/ChangeLog:\n\n\t* linux-nat.c (linux_nat_target::detach): Remove breakpoints\n\there...\n\t* remote.c (remote_target::remote_detach_1): ... and here ...\n\t* target.c (target_detach): ... instead of here.\n\t* target.h (target_ops::detach): Add comment.",
    "tree": {
      "sha": "68ef50776ce802fc617c839d03b33ddab7d89bb8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/68ef50776ce802fc617c839d03b33ddab7d89bb8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e87f0fe82375ffe508da44172fcfe04e258ddc9c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e87f0fe82375ffe508da44172fcfe04e258ddc9c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e87f0fe82375ffe508da44172fcfe04e258ddc9c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e87f0fe82375ffe508da44172fcfe04e258ddc9c/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8ff531399b7e5e391a664d089520e6d17d006ea4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ff531399b7e5e391a664d089520e6d17d006ea4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8ff531399b7e5e391a664d089520e6d17d006ea4"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 30,
    "deletions": 9
  },
  "files": [
    {
      "sha": "4113e3a6284cc3d6e8ecba622d47e350d7294576",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e87f0fe82375ffe508da44172fcfe04e258ddc9c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e87f0fe82375ffe508da44172fcfe04e258ddc9c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e87f0fe82375ffe508da44172fcfe04e258ddc9c",
      "patch": "@@ -1,3 +1,11 @@\n+2021-02-03  Pedro Alves  <pedro@palves.net>\n+\n+\t* linux-nat.c (linux_nat_target::detach): Remove breakpoints\n+\there...\n+\t* remote.c (remote_target::remote_detach_1): ... and here ...\n+\t* target.c (target_detach): ... instead of here.\n+\t* target.h (target_ops::detach): Add comment.\n+\n 2021-02-03  Pedro Alves  <pedro@palves.net>\n \n \t* infrun.c (struct wait_one_event): Move higher up."
    },
    {
      "sha": "10419dc7bb58b5bb589bee59f7d5e37f0b11f047",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e87f0fe82375ffe508da44172fcfe04e258ddc9c/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e87f0fe82375ffe508da44172fcfe04e258ddc9c/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=e87f0fe82375ffe508da44172fcfe04e258ddc9c",
      "patch": "@@ -1456,6 +1456,11 @@ linux_nat_target::detach (inferior *inf, int from_tty)\n      they're no longer running.  */\n   iterate_over_lwps (ptid_t (pid), stop_wait_callback);\n \n+  /* We can now safely remove breakpoints.  We don't this in earlier\n+     in common code because this target doesn't currently support\n+     writing memory while the inferior is running.  */\n+  remove_breakpoints_inf (current_inferior ());\n+\n   iterate_over_lwps (ptid_t (pid), detach_callback);\n \n   /* Only the initial process should be left right now.  */"
    },
    {
      "sha": "c544fe7fcece9105fd4f4f47877df54e33be8268",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e87f0fe82375ffe508da44172fcfe04e258ddc9c/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e87f0fe82375ffe508da44172fcfe04e258ddc9c/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=e87f0fe82375ffe508da44172fcfe04e258ddc9c",
      "patch": "@@ -5800,6 +5800,16 @@ remote_target::remote_detach_1 (inferior *inf, int from_tty)\n \n   target_announce_detach (from_tty);\n \n+  if (!gdbarch_has_global_breakpoints (target_gdbarch ()))\n+    {\n+      /* If we're in breakpoints-always-inserted mode, or the inferior\n+\t is running, we have to remove breakpoints before detaching.\n+\t We don't do this in common code instead because not all\n+\t targets support removing breakpoints while the target is\n+\t running.  The remote target / gdbserver does, though.  */\n+      remove_breakpoints_inf (current_inferior ());\n+    }\n+\n   /* Tell the remote target to detach.  */\n   remote_detach_pid (pid);\n "
    },
    {
      "sha": "9a8473d40e1afebcbc6af935dcc78fc5f1c3e5a6",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e87f0fe82375ffe508da44172fcfe04e258ddc9c/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e87f0fe82375ffe508da44172fcfe04e258ddc9c/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=e87f0fe82375ffe508da44172fcfe04e258ddc9c",
      "patch": "@@ -1949,15 +1949,6 @@ target_detach (inferior *inf, int from_tty)\n      assertion.  */\n   gdb_assert (inf == current_inferior ());\n \n-  if (gdbarch_has_global_breakpoints (target_gdbarch ()))\n-    /* Don't remove global breakpoints here.  They're removed on\n-       disconnection from the target.  */\n-    ;\n-  else\n-    /* If we're in breakpoints-always-inserted mode, have to remove\n-       breakpoints before detaching.  */\n-    remove_breakpoints_inf (current_inferior ());\n-\n   prepare_for_detach ();\n \n   /* Hold a strong reference because detaching may unpush the"
    },
    {
      "sha": "c97ef690e01c167667ed8ddfba962bdfa58ba514",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e87f0fe82375ffe508da44172fcfe04e258ddc9c/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e87f0fe82375ffe508da44172fcfe04e258ddc9c/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=e87f0fe82375ffe508da44172fcfe04e258ddc9c",
      "patch": "@@ -470,8 +470,15 @@ struct target_ops\n     virtual void attach (const char *, int);\n     virtual void post_attach (int)\n       TARGET_DEFAULT_IGNORE ();\n+\n+    /* Detaches from the inferior.  Note that on targets that support\n+       async execution (i.e., targets where it is possible to detach\n+       from programs with threads running), the target is responsible\n+       for removing breakpoints from the program before the actual\n+       detach, otherwise the program dies when it hits one.  */\n     virtual void detach (inferior *, int)\n       TARGET_DEFAULT_IGNORE ();\n+\n     virtual void disconnect (const char *, int)\n       TARGET_DEFAULT_NORETURN (tcomplain ());\n     virtual void resume (ptid_t,"
    }
  ]
}