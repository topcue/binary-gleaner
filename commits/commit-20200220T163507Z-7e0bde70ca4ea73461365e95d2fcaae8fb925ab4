{
  "sha": "7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2UwYmRlNzBjYTRlYTczNDYxMzY1ZTk1ZDJmY2FhZThmYjkyNWFiNA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:11:54Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:07Z"
    },
    "message": "gdbserver: turn target ops 'insert_point' and 'remove_point' into methods\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's insert_point and remove_point ops\n\tinto methods of process_target.\n\n\t* target.h (struct process_stratum_target): Remove the target ops.\n\t(class process_target): Add the target ops.\n\t* target.cc (process_target::insert_point): Define.\n\t(process_target::remove_point): Define.\n\n\tUpdate the derived classes and callers below.\n\n\t* mem-break.cc (set_raw_breakpoint_at): Update.\n\t(delete_raw_breakpoint): Update.\n\t(uninsert_raw_breakpoint): Update.\n\t(reinsert_raw_breakpoint): Update.\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_insert_point): Turn into ...\n\t(linux_process_target::insert_point): ... this.\n\t(linux_remove_point): Turn into ...\n\t(linux_process_target::remove_point): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t(nto_insert_point): Turn into ...\n\t(nto_process_target::insert_point): ... this.\n\t(nto_remove_point): Turn into ...\n\t(nto_process_target::remove_point): ... this.\n\t* nto-low.h (class nto_process_target): Update.\n\t* win32-low.cc (win32_target_ops): Update.\n\t(win32_insert_point): Turn into ...\n\t(win32_process_target::insert_point): ... this.\n\t(win32_remove_point): Turn into ...\n\t(win32_process_target::remove_point): ... this.\n\t* win32-low.h (class win32_process_target): Update.",
    "tree": {
      "sha": "8256b5a6bffcad796b759b41d77c745df25b38d1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8256b5a6bffcad796b759b41d77c745df25b38d1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a2b2297a204898fa273a825d82385ce1b48941e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2b2297a204898fa273a825d82385ce1b48941e3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a2b2297a204898fa273a825d82385ce1b48941e3"
    }
  ],
  "stats": {
    "total": 138,
    "additions": 99,
    "deletions": 39
  },
  "files": [
    {
      "sha": "2d613f61a4dacaf7a3c778b11930c9c4a91e596d",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
      "patch": "@@ -1,3 +1,39 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's insert_point and remove_point ops\n+\tinto methods of process_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target ops.\n+\t(class process_target): Add the target ops.\n+\t* target.cc (process_target::insert_point): Define.\n+\t(process_target::remove_point): Define.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* mem-break.cc (set_raw_breakpoint_at): Update.\n+\t(delete_raw_breakpoint): Update.\n+\t(uninsert_raw_breakpoint): Update.\n+\t(reinsert_raw_breakpoint): Update.\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_insert_point): Turn into ...\n+\t(linux_process_target::insert_point): ... this.\n+\t(linux_remove_point): Turn into ...\n+\t(linux_process_target::remove_point): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t(nto_insert_point): Turn into ...\n+\t(nto_process_target::insert_point): ... this.\n+\t(nto_remove_point): Turn into ...\n+\t(nto_process_target::remove_point): ... this.\n+\t* nto-low.h (class nto_process_target): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\t(win32_insert_point): Turn into ...\n+\t(win32_process_target::insert_point): ... this.\n+\t(win32_remove_point): Turn into ...\n+\t(win32_process_target::remove_point): ... this.\n+\t* win32-low.h (class win32_process_target): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's supports_z_point_type op into a"
    },
    {
      "sha": "96692cd77a793937585be885a7ce8643c6cd9258",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
      "patch": "@@ -5964,9 +5964,9 @@ linux_process_target::supports_z_point_type (char z_type)\n \t  && the_low_target.supports_z_point_type (z_type));\n }\n \n-static int\n-linux_insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n-\t\t    int size, struct raw_breakpoint *bp)\n+int\n+linux_process_target::insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t\t\t    int size, raw_breakpoint *bp)\n {\n   if (type == raw_bkpt_type_sw)\n     return insert_memory_breakpoint (bp);\n@@ -5977,9 +5977,9 @@ linux_insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n     return 1;\n }\n \n-static int\n-linux_remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n-\t\t    int size, struct raw_breakpoint *bp)\n+int\n+linux_process_target::remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t\t\t    int size, raw_breakpoint *bp)\n {\n   if (type == raw_bkpt_type_sw)\n     return remove_memory_breakpoint (bp);\n@@ -7376,8 +7376,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_insert_point,\n-  linux_remove_point,\n   linux_stopped_by_sw_breakpoint,\n   linux_supports_stopped_by_sw_breakpoint,\n   linux_stopped_by_hw_breakpoint,"
    },
    {
      "sha": "6d58d6620b6f0c32b94b26837ec05bea5d7ec047",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
      "patch": "@@ -316,6 +316,12 @@ class linux_process_target : public process_target\n \t\t unsigned int len) override;\n \n   bool supports_z_point_type (char z_type) override;\n+\n+  int insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t    int size, raw_breakpoint *bp) override;\n+\n+  int remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t    int size, raw_breakpoint *bp) override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "dc864e8bb109f41b3a73091edb00a59ed4da50cf",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
      "patch": "@@ -729,8 +729,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  NULL,  /* insert_point */\n-  NULL,  /* remove_point */\n   NULL,  /* stopped_by_sw_breakpoint */\n   NULL,  /* supports_stopped_by_sw_breakpoint */\n   NULL,  /* stopped_by_hw_breakpoint */"
    },
    {
      "sha": "682b3bc1832e066a2de12ff263d236a0265a5126",
      "filename": "gdbserver/mem-break.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/mem-break.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/mem-break.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/mem-break.cc?ref=7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
      "patch": "@@ -460,7 +460,7 @@ set_raw_breakpoint_at (enum raw_bkpt_type type, CORE_ADDR where, int kind,\n \n   if (!bp->inserted)\n     {\n-      *err = the_target->insert_point (bp->raw_type, bp->pc, bp->kind, bp);\n+      *err = the_target->pt->insert_point (bp->raw_type, bp->pc, bp->kind, bp);\n       if (*err != 0)\n \t{\n \t  if (debug_threads)\n@@ -890,8 +890,8 @@ delete_raw_breakpoint (struct process_info *proc, struct raw_breakpoint *todel)\n \n \t      *bp_link = bp->next;\n \n-\t      ret = the_target->remove_point (bp->raw_type, bp->pc, bp->kind,\n-\t\t\t\t\t      bp);\n+\t      ret = the_target->pt->remove_point (bp->raw_type, bp->pc,\n+\t\t\t\t\t\t  bp->kind, bp);\n \t      if (ret != 0)\n \t\t{\n \t\t  /* Something went wrong, relink the breakpoint.  */\n@@ -1532,7 +1532,7 @@ uninsert_raw_breakpoint (struct raw_breakpoint *bp)\n \n       bp->inserted = 0;\n \n-      err = the_target->remove_point (bp->raw_type, bp->pc, bp->kind, bp);\n+      err = the_target->pt->remove_point (bp->raw_type, bp->pc, bp->kind, bp);\n       if (err != 0)\n \t{\n \t  bp->inserted = 1;\n@@ -1621,7 +1621,7 @@ reinsert_raw_breakpoint (struct raw_breakpoint *bp)\n   if (bp->inserted)\n     return;\n \n-  err = the_target->insert_point (bp->raw_type, bp->pc, bp->kind, bp);\n+  err = the_target->pt->insert_point (bp->raw_type, bp->pc, bp->kind, bp);\n   if (err == 0)\n     bp->inserted = 1;\n   else if (debug_threads)"
    },
    {
      "sha": "56d3462666767dfe61beafc1d8de3e3a5ba26904",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
      "patch": "@@ -807,9 +807,9 @@ nto_process_target::supports_z_point_type (char z_type)\n \n /* Insert {break/watch}point at address ADDR.  SIZE is not used.  */\n \n-static int\n-nto_insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n-\t\t  int size, struct raw_breakpoint *bp)\n+int\n+nto_process_target::insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t\t\t  int size, raw_breakpoint *bp)\n {\n   int wtype = _DEBUG_BREAK_HW; /* Always request HW.  */\n \n@@ -839,9 +839,9 @@ nto_insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n \n /* Remove {break/watch}point at address ADDR.  SIZE is not used.  */\n \n-static int\n-nto_remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n-\t\t  int size, struct raw_breakpoint *bp)\n+int\n+nto_process_target::remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t\t\t  int size, raw_breakpoint *bp)\n {\n   int wtype = _DEBUG_BREAK_HW; /* Always request HW.  */\n \n@@ -950,8 +950,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  nto_insert_point,\n-  nto_remove_point,\n   NULL, /* stopped_by_sw_breakpoint */\n   NULL, /* supports_stopped_by_sw_breakpoint */\n   NULL, /* stopped_by_hw_breakpoint */"
    },
    {
      "sha": "b0b276319d2e8cf259f6a645ba7fd297f1f9db5e",
      "filename": "gdbserver/nto-low.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/nto-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/nto-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.h?ref=7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
      "patch": "@@ -86,6 +86,12 @@ class nto_process_target : public process_target\n \t\t unsigned int len) override;\n \n   bool supports_z_point_type (char z_type) override;\n+\n+  int insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t    int size, raw_breakpoint *bp) override;\n+\n+  int remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t    int size, raw_breakpoint *bp) override;\n };\n \n /* The inferior's target description.  This is a global because the"
    },
    {
      "sha": "fd443efd61e67f737c0d29bc5e71b38c5edeaaa3",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
      "patch": "@@ -433,3 +433,17 @@ process_target::supports_z_point_type (char z_type)\n {\n   return false;\n }\n+\n+int\n+process_target::insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t\t      int size, raw_breakpoint *bp)\n+{\n+  return 1;\n+}\n+\n+int\n+process_target::remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t\t      int size, raw_breakpoint *bp)\n+{\n+  return 1;\n+}"
    },
    {
      "sha": "f04c1c15bcbd2c0045028c3502c2de5d6102bb79",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
      "patch": "@@ -70,14 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Insert and remove a break or watchpoint.\n-     Returns 0 on success, -1 on failure and 1 on unsupported.  */\n-\n-  int (*insert_point) (enum raw_bkpt_type type, CORE_ADDR addr,\n-\t\t       int size, struct raw_breakpoint *bp);\n-  int (*remove_point) (enum raw_bkpt_type type, CORE_ADDR addr,\n-\t\t       int size, struct raw_breakpoint *bp);\n-\n   /* Returns 1 if the target stopped because it executed a software\n      breakpoint instruction, 0 otherwise.  */\n   int (*stopped_by_sw_breakpoint) (void);\n@@ -476,6 +468,14 @@ class process_target\n        '4' - access watchpoint\n   */\n   virtual bool supports_z_point_type (char z_type);\n+\n+  /* Insert and remove a break or watchpoint.\n+     Returns 0 on success, -1 on failure and 1 on unsupported.  */\n+  virtual int insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t\t    int size, raw_breakpoint *bp);\n+\n+  virtual int remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t\t    int size, raw_breakpoint *bp);\n };\n \n extern process_stratum_target *the_target;"
    },
    {
      "sha": "c42d8d7414cc6c7c3c133c7c27e2d1586111e508",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
      "patch": "@@ -261,9 +261,9 @@ win32_process_target::supports_z_point_type (char z_type)\n \t  && the_low_target.supports_z_point_type (z_type));\n }\n \n-static int\n-win32_insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n-\t\t    int size, struct raw_breakpoint *bp)\n+int\n+win32_process_target::insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t\t\t    int size, raw_breakpoint *bp)\n {\n   if (the_low_target.insert_point != NULL)\n     return the_low_target.insert_point (type, addr, size, bp);\n@@ -272,9 +272,9 @@ win32_insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n     return 1;\n }\n \n-static int\n-win32_remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n-\t\t    int size, struct raw_breakpoint *bp)\n+int\n+win32_process_target::remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t\t\t    int size, raw_breakpoint *bp)\n {\n   if (the_low_target.remove_point != NULL)\n     return the_low_target.remove_point (type, addr, size, bp);\n@@ -1838,8 +1838,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  win32_insert_point,\n-  win32_remove_point,\n   NULL, /* stopped_by_sw_breakpoint */\n   NULL, /* supports_stopped_by_sw_breakpoint */\n   NULL, /* stopped_by_hw_breakpoint */"
    },
    {
      "sha": "a6b27918f4c727119dc0800a504642bb5788407a",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e0bde70ca4ea73461365e95d2fcaae8fb925ab4/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=7e0bde70ca4ea73461365e95d2fcaae8fb925ab4",
      "patch": "@@ -140,6 +140,12 @@ class win32_process_target : public process_target\n   void request_interrupt () override;\n \n   bool supports_z_point_type (char z_type) override;\n+\n+  int insert_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t    int size, raw_breakpoint *bp) override;\n+\n+  int remove_point (enum raw_bkpt_type type, CORE_ADDR addr,\n+\t\t    int size, raw_breakpoint *bp) override;\n };\n \n /* Retrieve the context for this thread, if not already retrieved.  */"
    }
  ]
}