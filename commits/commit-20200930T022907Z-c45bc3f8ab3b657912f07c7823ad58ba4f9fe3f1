{
  "sha": "c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzQ1YmMzZjhhYjNiNjU3OTEyZjA3Yzc4MjNhZDU4YmE0ZjlmZTNmMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:07Z"
    },
    "message": "Add attribute::as_boolean method\n\nThis adds a new attribute::as_boolean method, and updates the reader\nto use it.  The main benefit of this change is that now the code will\nrespect the attribute's form.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_func_scope, prototyped_function_p)\n\t(read_subroutine_type, partial_die_info::read)\n\t(dwarf2_flag_true_p, new_symbol, dump_die_shallow)\n\t(dwarf2_add_member_fn): Update.\n\t* dwarf2/attribute.h (struct attribute) <as_boolean>: Declare.\n\t* dwarf2/attribute.c (attribute::as_boolean): New method.",
    "tree": {
      "sha": "55be6e129866a307e1bef72ac798a364dec32b9e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/55be6e129866a307e1bef72ac798a364dec32b9e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "23dca5c3d77252ad8000d749b4457f7e286b8367",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/23dca5c3d77252ad8000d749b4457f7e286b8367",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/23dca5c3d77252ad8000d749b4457f7e286b8367"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 40,
    "deletions": 15
  },
  "files": [
    {
      "sha": "27a77f1d52d28541c620b3b25a45b693ce659afc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1",
      "patch": "@@ -1,3 +1,12 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_func_scope, prototyped_function_p)\n+\t(read_subroutine_type, partial_die_info::read)\n+\t(dwarf2_flag_true_p, new_symbol, dump_die_shallow)\n+\t(dwarf2_add_member_fn): Update.\n+\t* dwarf2/attribute.h (struct attribute) <as_boolean>: Declare.\n+\t* dwarf2/attribute.c (attribute::as_boolean): New method.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (dwarf2_add_field, dwarf2_add_member_fn): Update."
    },
    {
      "sha": "0bbd0dad3f82d666dfbf4ce77a3f127667ebff1f",
      "filename": "gdb/dwarf2/attribute.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1/gdb/dwarf2/attribute.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1/gdb/dwarf2/attribute.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.c?ref=c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1",
      "patch": "@@ -245,3 +245,15 @@ attribute::as_virtuality () const\n \t       plongest (value));\n   return DW_VIRTUALITY_none;\n }\n+\n+/* See attribute.h.  */\n+\n+bool\n+attribute::as_boolean () const\n+{\n+  if (form == DW_FORM_flag_present)\n+    return true;\n+  else if (form == DW_FORM_flag)\n+    return u.unsnd != 0;\n+  return constant_value (0) != 0;\n+}"
    },
    {
      "sha": "f8969c90e413f98e98c304bcefc4ba07f33d14c0",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1",
      "patch": "@@ -263,6 +263,10 @@ struct attribute\n      issue a complaint and return DW_VIRTUALITY_none.  */\n   dwarf_virtuality_attribute as_virtuality () const;\n \n+  /* Return the attribute's value as a boolean.  An unrecognized form\n+     will issue a complaint and return false.  */\n+  bool as_boolean () const;\n+\n   ENUM_BITFIELD(dwarf_attribute) name : 15;\n \n   /* A boolean that is used for forms that require reprocessing.  A"
    },
    {
      "sha": "d1c4cd8e400bca00701eb96f662c1ccb26e79fc3",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=c45bc3f8ab3b657912f07c7823ad58ba4f9fe3f1",
      "patch": "@@ -13565,7 +13565,7 @@ read_func_scope (struct die_info *die, struct dwarf2_cu *cu)\n       <= PC_BOUNDS_INVALID)\n     {\n       attr = dwarf2_attr (die, DW_AT_external, cu);\n-      if (!attr || !DW_UNSND (attr))\n+      if (attr == nullptr || !attr->as_boolean ())\n \tcomplaint (_(\"cannot get low and high bounds \"\n \t\t     \"for subprogram DIE at %s\"),\n \t\t   sect_offset_str (die->sect_off));\n@@ -15642,7 +15642,7 @@ dwarf2_add_member_fn (struct field_info *fip, struct die_info *die,\n \n   /* Check for artificial methods.  */\n   attr = dwarf2_attr (die, DW_AT_artificial, cu);\n-  if (attr && DW_UNSND (attr) != 0)\n+  if (attr && attr->as_boolean ())\n     fnp->is_artificial = 1;\n \n   /* Check for defaulted methods.  */\n@@ -15652,7 +15652,7 @@ dwarf2_add_member_fn (struct field_info *fip, struct die_info *die,\n \n   /* Check for deleted methods.  */\n   attr = dwarf2_attr (die, DW_AT_deleted, cu);\n-  if (attr != nullptr && DW_UNSND (attr) != 0)\n+  if (attr != nullptr && attr->as_boolean ())\n     fnp->is_deleted = 1;\n \n   fnp->is_constructor = dwarf2_is_constructor (die, cu);\n@@ -17591,7 +17591,7 @@ prototyped_function_p (struct die_info *die, struct dwarf2_cu *cu)\n   struct attribute *attr;\n \n   attr = dwarf2_attr (die, DW_AT_prototyped, cu);\n-  if (attr && (DW_UNSND (attr) != 0))\n+  if (attr && attr->as_boolean ())\n     return 1;\n \n   /* The DWARF standard implies that the DW_AT_prototyped attribute\n@@ -17660,7 +17660,7 @@ read_subroutine_type (struct die_info *die, struct dwarf2_cu *cu)\n   /* Record whether the function returns normally to its caller or not\n      if the DWARF producer set that information.  */\n   attr = dwarf2_attr (die, DW_AT_noreturn, cu);\n-  if (attr && (DW_UNSND (attr) != 0))\n+  if (attr && attr->as_boolean ())\n     TYPE_NO_RETURN (ftype) = 1;\n \n   /* We need to add the subroutine type to the die immediately so\n@@ -17718,7 +17718,7 @@ read_subroutine_type (struct die_info *die, struct dwarf2_cu *cu)\n \t\t 4.5 does not yet generate.  */\n \t      attr = dwarf2_attr (child_die, DW_AT_artificial, cu);\n \t      if (attr != nullptr)\n-\t\tTYPE_FIELD_ARTIFICIAL (ftype, iparams) = DW_UNSND (attr);\n+\t\tTYPE_FIELD_ARTIFICIAL (ftype, iparams) = attr->as_boolean ();\n \t      else\n \t\tTYPE_FIELD_ARTIFICIAL (ftype, iparams) = 0;\n \t      arg_type = die_type (child_die, cu);\n@@ -19052,10 +19052,10 @@ partial_die_info::read (const struct die_reader_specs *reader,\n             }\n \t  break;\n \tcase DW_AT_external:\n-\t  is_external = DW_UNSND (&attr);\n+\t  is_external = attr.as_boolean ();\n \t  break;\n \tcase DW_AT_declaration:\n-\t  is_declaration = DW_UNSND (&attr);\n+\t  is_declaration = attr.as_boolean ();\n \t  break;\n \tcase DW_AT_type:\n \t  has_type = 1;\n@@ -19128,7 +19128,7 @@ partial_die_info::read (const struct die_reader_specs *reader,\n \t  break;\n \n \tcase DW_AT_main_subprogram:\n-\t  main_subprogram = DW_UNSND (&attr);\n+\t  main_subprogram = attr.as_boolean ();\n \t  break;\n \n \tcase DW_AT_ranges:\n@@ -20301,7 +20301,7 @@ dwarf2_flag_true_p (struct die_info *die, unsigned name, struct dwarf2_cu *cu)\n {\n   struct attribute *attr = dwarf2_attr (die, name, cu);\n \n-  return (attr && DW_UNSND (attr));\n+  return attr != nullptr && attr->as_boolean ();\n }\n \n static int\n@@ -21467,7 +21467,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t     finish_block.  */\n \t  SYMBOL_ACLASS_INDEX (sym) = LOC_BLOCK;\n \t  attr2 = dwarf2_attr (die, DW_AT_external, cu);\n-\t  if ((attr2 && (DW_UNSND (attr2) != 0))\n+\t  if ((attr2 != nullptr && attr2->as_boolean ())\n \t      || cu->language == language_ada\n \t      || cu->language == language_fortran)\n \t    {\n@@ -21519,7 +21519,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t      attr2 = dwarf2_attr (die, DW_AT_external, cu);\n \t      if (!suppress_add)\n \t\t{\n-\t\t  if (attr2 && (DW_UNSND (attr2) != 0))\n+\t\t  if (attr2 != nullptr && attr2->as_boolean ())\n \t\t    list_to_add = cu->get_builder ()->get_global_symbols ();\n \t\t  else\n \t\t    list_to_add = cu->list_in_scope;\n@@ -21547,7 +21547,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t\t     out, but the variable address is set to null;\n \t\t     do not add such variables into symbol table.  */\n \t\t}\n-\t      else if (attr2 && (DW_UNSND (attr2) != 0))\n+\t      else if (attr2 != nullptr && attr2->as_boolean ())\n \t\t{\n \t\t  if (SYMBOL_CLASS (sym) == LOC_STATIC\n \t\t      && (objfile->flags & OBJF_MAINLINE) == 0\n@@ -21596,7 +21596,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t\t  if (!suppress_add)\n \t\t    list_to_add = cu->list_in_scope;\n \t\t}\n-\t      else if (attr2 && (DW_UNSND (attr2) != 0)\n+\t      else if (attr2 != nullptr && attr2->as_boolean ()\n \t\t       && dwarf2_attr (die, DW_AT_type, cu) != NULL)\n \t\t{\n \t\t  /* A variable with DW_AT_external is never static, but it\n@@ -22780,7 +22780,7 @@ dump_die_shallow (struct ui_file *f, int indent, struct die_info *die)\n \t\t\t      die->attrs[i].canonical_string_p () ? \"is\" : \"not\");\n \t  break;\n \tcase DW_FORM_flag:\n-\t  if (DW_UNSND (&die->attrs[i]))\n+\t  if (die->attrs[i].as_boolean ())\n \t    fprintf_unfiltered (f, \"flag: TRUE\");\n \t  else\n \t    fprintf_unfiltered (f, \"flag: FALSE\");"
    }
  ]
}