{
  "sha": "2fd2b153a3819d3ab6b9c4cf06943d498187714c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmZkMmIxNTNhMzgxOWQzYWI2YjljNGNmMDY5NDNkNDk4MTg3NzE0Yw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-10T12:02:06Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-11T01:07:44Z"
    },
    "message": "ubsan: bfin: shift exponent is too large\n\nThis was the following in fmtconst_val, x is unsigned int.\n    x = SIGNEXTEND (x, constant_formats[cf].nbits);\nProblem is, the SIGNEXTEND macro assumed its arg was a long and sign\nextended by shifting left then shifting right, and didn't cast the\narg.  So don't do the silly shift thing.  It's not guaranteed to work\nanyway according to the C standard.  \">>\" might do a logical shift\neven if its args are signed.\n\n\t* bfin-dis.c (HOST_LONG_WORD_SIZE, XFIELD): Delete.\n\t(SIGNBIT): New.\n\t(MASKBITS, SIGNEXTEND): Rewrite.\n\t(fmtconst): Don't use ? expression now that SIGNEXTEND uses\n\tunsigned arithmetic, instead assign result of SIGNEXTEND back\n\tto x.\n\t(fmtconst_val): Use 1u in shift expression.",
    "tree": {
      "sha": "62c7e56be47841b7fff485fe599df8ea5fcd412f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/62c7e56be47841b7fff485fe599df8ea5fcd412f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2fd2b153a3819d3ab6b9c4cf06943d498187714c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2fd2b153a3819d3ab6b9c4cf06943d498187714c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2fd2b153a3819d3ab6b9c4cf06943d498187714c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2fd2b153a3819d3ab6b9c4cf06943d498187714c/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a11db3e9f3a679601f41671a9e7f54c37f2c5073",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a11db3e9f3a679601f41671a9e7f54c37f2c5073",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a11db3e9f3a679601f41671a9e7f54c37f2c5073"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 26,
    "deletions": 13
  },
  "files": [
    {
      "sha": "faa160a37b54eedfd8da44f3e10bb2200a88a7f2",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2fd2b153a3819d3ab6b9c4cf06943d498187714c/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2fd2b153a3819d3ab6b9c4cf06943d498187714c/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=2fd2b153a3819d3ab6b9c4cf06943d498187714c",
      "patch": "@@ -1,3 +1,13 @@\n+2019-12-11  Alan Modra  <amodra@gmail.com>\n+\n+\t* bfin-dis.c (HOST_LONG_WORD_SIZE, XFIELD): Delete.\n+\t(SIGNBIT): New.\n+\t(MASKBITS, SIGNEXTEND): Rewrite.\n+\t(fmtconst): Don't use ? expression now that SIGNEXTEND uses\n+\tunsigned arithmetic, instead assign result of SIGNEXTEND back\n+\tto x.\n+\t(fmtconst_val): Use 1u in shift expression.\n+\n 2019-12-11  Alan Modra  <amodra@gmail.com>\n \n \t* arc-dis.c (find_format_from_table): Use ull constant when"
    },
    {
      "sha": "711f7e1e07a5cd9e61c01005e7a2162d3594676c",
      "filename": "opcodes/bfin-dis.c",
      "status": "modified",
      "additions": 16,
      "deletions": 13,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2fd2b153a3819d3ab6b9c4cf06943d498187714c/opcodes/bfin-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2fd2b153a3819d3ab6b9c4cf06943d498187714c/opcodes/bfin-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bfin-dis.c?ref=2fd2b153a3819d3ab6b9c4cf06943d498187714c",
      "patch": "@@ -33,10 +33,9 @@\n \n typedef long TIword;\n \n-#define HOST_LONG_WORD_SIZE (sizeof (long) * 8)\n-#define XFIELD(w,p,s)       (((w) & ((1 << (s)) - 1) << (p)) >> (p))\n-#define SIGNEXTEND(v, n)    ((v << (HOST_LONG_WORD_SIZE - (n))) >> (HOST_LONG_WORD_SIZE - (n)))\n-#define MASKBITS(val, bits) (val & ((1 << bits) - 1))\n+#define SIGNBIT(bits)       (1ul << ((bits) - 1))\n+#define MASKBITS(val, bits) ((val) & ((1ul << (bits)) - 1))\n+#define SIGNEXTEND(v, n)    ((MASKBITS (v, n) ^ SIGNBIT (n)) - SIGNBIT (n))\n \n #include \"disassemble.h\"\n \n@@ -125,8 +124,11 @@ fmtconst (const_forms_t cf, TIword x, bfd_vma pc, disassemble_info *outf)\n \n   if (constant_formats[cf].reloc)\n     {\n-      bfd_vma ea = (((constant_formats[cf].pcrel ? SIGNEXTEND (x, constant_formats[cf].nbits)\n-\t\t      : x) + constant_formats[cf].offset) << constant_formats[cf].scale);\n+      bfd_vma ea;\n+\n+      if (constant_formats[cf].pcrel)\n+\tx = SIGNEXTEND (x, constant_formats[cf].nbits);\n+      ea = (x + constant_formats[cf].offset) << constant_formats[cf].scale;\n       if (constant_formats[cf].pcrel)\n \tea += pc;\n \n@@ -153,8 +155,8 @@ fmtconst (const_forms_t cf, TIword x, bfd_vma pc, disassemble_info *outf)\n       x = x | (1 << constant_formats[cf].nbits);\n       x = SIGNEXTEND (x, nb);\n     }\n-  else\n-    x = constant_formats[cf].issigned ? SIGNEXTEND (x, constant_formats[cf].nbits) : x;\n+  else if (constant_formats[cf].issigned)\n+    x = SIGNEXTEND (x, constant_formats[cf].nbits);\n \n   if (constant_formats[cf].offset)\n     x += constant_formats[cf].offset;\n@@ -180,10 +182,11 @@ fmtconst_val (const_forms_t cf, unsigned int x, unsigned int pc)\n {\n   if (0 && constant_formats[cf].reloc)\n     {\n-      bu32 ea = (((constant_formats[cf].pcrel\n-\t\t   ? SIGNEXTEND (x, constant_formats[cf].nbits)\n-\t\t   : x) + constant_formats[cf].offset)\n-\t\t << constant_formats[cf].scale);\n+      bu32 ea;\n+\n+      if (constant_formats[cf].pcrel)\n+\tx = SIGNEXTEND (x, constant_formats[cf].nbits);\n+      ea = (x + constant_formats[cf].offset) << constant_formats[cf].scale;\n       if (constant_formats[cf].pcrel)\n \tea += pc;\n \n@@ -194,7 +197,7 @@ fmtconst_val (const_forms_t cf, unsigned int x, unsigned int pc)\n   if (constant_formats[cf].negative)\n     {\n       int nb = constant_formats[cf].nbits + 1;\n-      x = x | (1 << constant_formats[cf].nbits);\n+      x = x | (1u << constant_formats[cf].nbits);\n       x = SIGNEXTEND (x, nb);\n     }\n   else if (constant_formats[cf].issigned)"
    }
  ]
}