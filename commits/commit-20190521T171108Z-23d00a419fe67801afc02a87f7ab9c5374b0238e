{
  "sha": "23d00a419fe67801afc02a87f7ab9c5374b0238e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjNkMDBhNDE5ZmU2NzgwMWFmYzAyYTg3ZjdhYjljNTM3NGIwMjM4ZQ==",
  "commit": {
    "author": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-05-21T17:11:08Z"
    },
    "committer": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-05-21T17:11:08Z"
    },
    "message": "[binutils, Arm] Add support for shift instructions in MVE\n\nThis patch adds the following instructions which are part of\nArmv8.1-M MVE:\nASRL (imm)\nASRL (reg)\nLSLL (imm)\nLSLL (reg)\nLSRL\nSQRSHRL\nSRQSHR\nSQSHLL\nSQSHL\nSRSHRL\nSRSHR\nUQRSHLL\nUQRSHL\nUQSHLL\nUQSHL\nURSHLL\nURSHL\n\n*** gas/ChangeLog ***\n\n2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n\n\t* config/tc-arm.c (operand_parse_code): New entries for\n\tOP_RRnpcsp_I32 (register or integer operands).\n\t(do_mve_scalar_shift): New.\n\t(insns): New instructions for asrl, lsll, lsrl, sqrshrl, sqrshr, sqshl\n\tsqshll, srshr, srshrl, uqrshll, uqrshl, uqshll, uqshl, urshrl and urshr.\n\t* testsuite/gas/arm/mve-shift.d: New.\n\t* testsuite/gas/arm/mve-shift.s: New.\n\t* testsuite/gas/arm/mve-shift-bad.d: New.\n\t* testsuite/gas/arm/mve-shift-bad.s: New.\n\t* testsuite/gas/arm/mve-shift-bad.l: New.\n\n*** opcodes/ChangeLog ***\n\n2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n\n\t* arm-dis.c (emun mve_instructions): Updated for new instructions.\n\t(mve_opcodes): New instructions for asrl, lsll, lsrl, sqrshrl,\n\tsqrshr, sqshl, sqshll, srshr, srshrl, uqrshll, uqrshl, uqshll,\n\tuqshl, urshrl and urshr.\n\t(is_mve_okay_in_it): Add new instructions to TRUE list.\n\t(is_mve_unpredictable): Add cases for UNPRED_R13 and UNPRED_R15.\n\t(print_insn_mve): Updated to accept new %j,\n\t%<bitfield>m and %<bitfield>n patterns.",
    "tree": {
      "sha": "cba7cb850ffd1f9e5a741ebbf0c40bb9031c89e8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cba7cb850ffd1f9e5a741ebbf0c40bb9031c89e8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/23d00a419fe67801afc02a87f7ab9c5374b0238e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/23d00a419fe67801afc02a87f7ab9c5374b0238e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/23d00a419fe67801afc02a87f7ab9c5374b0238e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/23d00a419fe67801afc02a87f7ab9c5374b0238e/comments",
  "author": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cd4797ee054654160fe6c4b6fbecd636b7961e19",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd4797ee054654160fe6c4b6fbecd636b7961e19",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cd4797ee054654160fe6c4b6fbecd636b7961e19"
    }
  ],
  "stats": {
    "total": 336,
    "additions": 336,
    "deletions": 0
  },
  "files": [
    {
      "sha": "34fee55530c3472a77d56b315ce44bcd04a4a11e",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=23d00a419fe67801afc02a87f7ab9c5374b0238e",
      "patch": "@@ -1,3 +1,16 @@\n+2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* config/tc-arm.c (operand_parse_code): New entries for\n+\tOP_RRnpcsp_I32 (register or integer operands).\n+\t(do_mve_scalar_shift): New.\n+\t(insns): New instructions for asrl, lsll, lsrl, sqrshrl, sqrshr, sqshl\n+\tsqshll, srshr, srshrl, uqrshll, uqrshl, uqshll, uqshl, urshrl and urshr.\n+\t* testsuite/gas/arm/mve-shift.d: New.\n+\t* testsuite/gas/arm/mve-shift.s: New.\n+\t* testsuite/gas/arm/mve-shift-bad.d: New.\n+\t* testsuite/gas/arm/mve-shift-bad.s: New.\n+\t* testsuite/gas/arm/mve-shift-bad.l: New.\n+\n 2019-05-21  Faraz Shahbazker  <fshahbazker@wavecomp.com>\n \n \t* testsuite/gas/mips/r6-branch-constraints.s: Rename to ..."
    },
    {
      "sha": "8826119f409da1f776390f6361693b6dde67ff72",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=23d00a419fe67801afc02a87f7ab9c5374b0238e",
      "patch": "@@ -7559,6 +7559,9 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \tcase OP_RRnpc_I0: po_reg_or_goto (REG_TYPE_RN, I0);   break;\n \tI0:\t\t  po_imm_or_fail (0, 0, FALSE);\t      break;\n \n+\tcase OP_RRnpcsp_I32: po_reg_or_goto (REG_TYPE_RN, I32);\tbreak;\n+\tI32:\t\t     po_imm_or_fail (1, 32, FALSE);\tbreak;\n+\n \tcase OP_RF_IF:    po_reg_or_goto (REG_TYPE_FN, IF);   break;\n \tIF:\n \t  if (!is_immediate_prefix (*str))\n@@ -7818,6 +7821,7 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \n \tcase OP_oRRnpcsp:\n \tcase OP_RRnpcsp:\n+\tcase OP_RRnpcsp_I32:\n \t  if (inst.operands[i].isreg)\n \t    {\n \t      if (inst.operands[i].reg == REG_PC)\n@@ -14123,6 +14127,37 @@ v8_1_loop_reloc (int is_le)\n     }\n }\n \n+/* For shifts in MVE.  */\n+static void\n+do_mve_scalar_shift (void)\n+{\n+  if (!inst.operands[2].present)\n+    {\n+      inst.operands[2] = inst.operands[1];\n+      inst.operands[1].reg = 0xf;\n+    }\n+\n+  inst.instruction |= inst.operands[0].reg << 16;\n+  inst.instruction |= inst.operands[1].reg << 8;\n+\n+  if (inst.operands[2].isreg)\n+    {\n+      /* Assuming Rm is already checked not to be 11x1.  */\n+      constraint (inst.operands[2].reg == inst.operands[0].reg, BAD_OVERLAP);\n+      constraint (inst.operands[2].reg == inst.operands[1].reg, BAD_OVERLAP);\n+      inst.instruction |= inst.operands[2].reg << 12;\n+    }\n+  else\n+    {\n+      /* Assuming imm is already checked as [1,32].  */\n+      unsigned int value = inst.operands[2].imm;\n+      inst.instruction |= (value & 0x1c) << 10;\n+      inst.instruction |= (value & 0x03) << 6;\n+      /* Change last 4 bits from 0xd to 0xf.  */\n+      inst.instruction |= 0x2;\n+    }\n+}\n+\n /* MVE instruction encoder helpers.  */\n #define M_MNEM_vabav\t0xee800f01\n #define M_MNEM_vmladav\t  0xeef00e00\n@@ -25137,6 +25172,21 @@ static const struct asm_opcode insns[] =\n \n #undef  THUMB_VARIANT\n #define THUMB_VARIANT & mve_ext\n+ ToC(\"lsll\",\tea50010d, 3, (RRe, RRo, RRnpcsp_I32), mve_scalar_shift),\n+ ToC(\"lsrl\",\tea50011f, 3, (RRe, RRo, I32),\t      mve_scalar_shift),\n+ ToC(\"asrl\",\tea50012d, 3, (RRe, RRo, RRnpcsp_I32), mve_scalar_shift),\n+ ToC(\"uqrshll\",\tea51010d, 3, (RRe, RRo, RRnpcsp),     mve_scalar_shift),\n+ ToC(\"sqrshrl\",\tea51012d, 3, (RRe, RRo, RRnpcsp),     mve_scalar_shift),\n+ ToC(\"uqshll\",\tea51010f, 3, (RRe, RRo, I32),\t      mve_scalar_shift),\n+ ToC(\"urshrl\",\tea51011f, 3, (RRe, RRo, I32),\t      mve_scalar_shift),\n+ ToC(\"srshrl\",\tea51012f, 3, (RRe, RRo, I32),\t      mve_scalar_shift),\n+ ToC(\"sqshll\",\tea51013f, 3, (RRe, RRo, I32),\t      mve_scalar_shift),\n+ ToC(\"uqrshl\",\tea500f0d, 2, (RRnpcsp, RRnpcsp),      mve_scalar_shift),\n+ ToC(\"sqrshr\",\tea500f2d, 2, (RRnpcsp, RRnpcsp),      mve_scalar_shift),\n+ ToC(\"uqshl\",\tea500f0f, 2, (RRnpcsp, I32),\t      mve_scalar_shift),\n+ ToC(\"urshr\",\tea500f1f, 2, (RRnpcsp, I32),\t      mve_scalar_shift),\n+ ToC(\"srshr\",\tea500f2f, 2, (RRnpcsp, I32),\t      mve_scalar_shift),\n+ ToC(\"sqshl\",\tea500f3f, 2, (RRnpcsp, I32),\t      mve_scalar_shift),\n \n  ToC(\"vpt\",\tee410f00, 3, (COND, RMQ, RMQRZ), mve_vpt),\n  ToC(\"vptt\",\tee018f00, 3, (COND, RMQ, RMQRZ), mve_vpt),"
    },
    {
      "sha": "f3aea25402095a184a19fd287dd3041ce910439f",
      "filename": "gas/testsuite/gas/arm/mve-shift-bad.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/testsuite/gas/arm/mve-shift-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/testsuite/gas/arm/mve-shift-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-shift-bad.d?ref=23d00a419fe67801afc02a87f7ab9c5374b0238e",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Invalid MVE shift instructions\n+#source: mve-shift-bad.s\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-shift-bad.l"
    },
    {
      "sha": "5e7bfeda997d1de7966717375953f46de0e4cee8",
      "filename": "gas/testsuite/gas/arm/mve-shift-bad.l",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/testsuite/gas/arm/mve-shift-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/testsuite/gas/arm/mve-shift-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-shift-bad.l?ref=23d00a419fe67801afc02a87f7ab9c5374b0238e",
      "patch": "@@ -0,0 +1,12 @@\n+.*: Assembler messages:\n+.*: immediate value out of range -- `asrl r2,r3,#0'\n+.*: immediate value out of range -- `asrl r2,r3,#33'\n+.*: Error: Odd register not allowed here -- `asrl r1,r3,r5'\n+.*: Error: Even register not allowed here -- `lsll r2,r4,#5'\n+.*: Error: r15 not allowed here -- `lsll r2,r15,r5'\n+.*: Warning: instruction is UNPREDICTABLE with SP operand\n+.*: Error: registers may not be the same -- `sqrshrl r2,r3,r3'\n+.*: Error: registers may not be the same -- `sqrshr r2,r2'\n+.*: Error: registers may not be the same -- `uqrshll r2,r3,r2'\n+.*: Error: thumb conditional instruction should be in IT block -- `uqshlgt r2,#32'\n+.*: Error: constant expression required -- `urshrlle r2,r3,r5'"
    },
    {
      "sha": "7b38359a7df22240e381ef20a31c5b5f419f2d6c",
      "filename": "gas/testsuite/gas/arm/mve-shift-bad.s",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/testsuite/gas/arm/mve-shift-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/testsuite/gas/arm/mve-shift-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-shift-bad.s?ref=23d00a419fe67801afc02a87f7ab9c5374b0238e",
      "patch": "@@ -0,0 +1,15 @@\n+        .syntax unified\n+        .text\n+\n+foo:\n+\tasrl\tr2, r3, #0\n+\tasrl\tr2, r3, #33\n+\tasrl\tr1, r3, r5\n+\tlsll\tr2, r4, #5\n+\tlsll\tr2, r15, r5\n+\tlsrl\tr2, r13, #5\n+\tsqrshrl\tr2, r3, r3\n+\tsqrshr\tr2, r2\n+\tuqrshll\tr2, r3, r2\n+\tuqshlgt\t\tr2, #32\n+\turshrlle\tr2, r3, r5"
    },
    {
      "sha": "be5cd4682f534ccf40d462f06089bfb13b2a6507",
      "filename": "gas/testsuite/gas/arm/mve-shift.d",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/testsuite/gas/arm/mve-shift.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/testsuite/gas/arm/mve-shift.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-shift.d?ref=23d00a419fe67801afc02a87f7ab9c5374b0238e",
      "patch": "@@ -0,0 +1,27 @@\n+#name: Valid MVE shift instructions\n+#source: mve-shift.s\n+#as: -march=armv8.1-m.main+mve\n+#objdump: -dr --prefix-addresses --show-raw-insn -marmv8.1-m.main\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section .text:\n+0[0-9a-f]+ <[^>]+> ea52 136f \tasrl\tr2, r3, #5\n+0[0-9a-f]+ <[^>]+> ea52 532d \tasrl\tr2, r3, r5\n+0[0-9a-f]+ <[^>]+> ea52 134f \tlsll\tr2, r3, #5\n+0[0-9a-f]+ <[^>]+> ea52 530d \tlsll\tr2, r3, r5\n+0[0-9a-f]+ <[^>]+> ea52 135f \tlsrl\tr2, r3, #5\n+0[0-9a-f]+ <[^>]+> ea53 532d \tsqrshrl\tr2, r3, r5\n+0[0-9a-f]+ <[^>]+> ea52 5f2d \tsqrshr\tr2, r5\n+0[0-9a-f]+ <[^>]+> ea53 137f \tsqshll\tr2, r3, #5\n+0[0-9a-f]+ <[^>]+> ea52 1f7f \tsqshl\tr2, #5\n+0[0-9a-f]+ <[^>]+> ea53 73ef \tsrshrl\tr2, r3, #31\n+0[0-9a-f]+ <[^>]+> ea52 7fef \tsrshr\tr2, #31\n+0[0-9a-f]+ <[^>]+> ea53 530d \tuqrshll\tr2, r3, r5\n+0[0-9a-f]+ <[^>]+> ea52 5f0d \tuqrshl\tr2, r5\n+0[0-9a-f]+ <[^>]+> ea53 73cf \tuqshll\tr2, r3, #31\n+0[0-9a-f]+ <[^>]+> bfce      \titee\tgt\n+0[0-9a-f]+ <[^>]+> ea52 0f0f \tuqshlgt\tr2, #32\n+0[0-9a-f]+ <[^>]+> ea53 031f \turshrlle\tr2, r3, #32\n+0[0-9a-f]+ <[^>]+> ea52 0f1f \turshrle\tr2, #32\n+#..."
    },
    {
      "sha": "267e3fbb9ac95bee6cd68aa6ed1a18312adb7a00",
      "filename": "gas/testsuite/gas/arm/mve-shift.s",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/testsuite/gas/arm/mve-shift.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23d00a419fe67801afc02a87f7ab9c5374b0238e/gas/testsuite/gas/arm/mve-shift.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-shift.s?ref=23d00a419fe67801afc02a87f7ab9c5374b0238e",
      "patch": "@@ -0,0 +1,21 @@\n+        .syntax unified\n+        .text\n+foo:\n+\tasrl\tr2, r3, #5\n+\tasrl\tr2, r3, r5\n+\tlsll\tr2, r3, #5\n+\tlsll\tr2, r3, r5\n+\tlsrl\tr2, r3, #5\n+\tsqrshrl\tr2, r3, r5\n+\tsqrshr\tr2, r5\n+\tsqshll\tr2, r3, #5\n+\tsqshl\tr2, #5\n+\tsrshrl\tr2, r3, #31\n+\tsrshr\tr2, #31\n+\tuqrshll\tr2, r3, r5\n+\tuqrshl\tr2, r5\n+\tuqshll\tr2, r3, #31\n+\titee\tgt\n+\tuqshlgt\t\tr2, #32\n+\turshrlle\tr2, r3, #32\n+\turshrle\t\tr2, #32"
    },
    {
      "sha": "e6950acc17dede894b0366a8e882ad006aeb4a33",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23d00a419fe67801afc02a87f7ab9c5374b0238e/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23d00a419fe67801afc02a87f7ab9c5374b0238e/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=23d00a419fe67801afc02a87f7ab9c5374b0238e",
      "patch": "@@ -1,3 +1,14 @@\n+2019-05-21  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* arm-dis.c (emun mve_instructions): Updated for new instructions.\n+\t(mve_opcodes): New instructions for asrl, lsll, lsrl, sqrshrl,\n+\tsqrshr, sqshl, sqshll, srshr, srshrl, uqrshll, uqrshl, uqshll,\n+\tuqshl, urshrl and urshr.\n+\t(is_mve_okay_in_it): Add new instructions to TRUE list.\n+\t(is_mve_unpredictable): Add cases for UNPRED_R13 and UNPRED_R15.\n+\t(print_insn_mve): Updated to accept new %j,\n+\t%<bitfield>m and %<bitfield>n patterns.\n+\n 2019-05-21  Faraz Shahbazker  <fshahbazker@wavecomp.com>\n \n \t* mips-opc.c (mips_builtin_opcodes): Change source register"
    },
    {
      "sha": "ab99fb7187299a1c5254ed8117f15adf0c832db6",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 183,
      "deletions": 0,
      "changes": 183,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23d00a419fe67801afc02a87f7ab9c5374b0238e/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23d00a419fe67801afc02a87f7ab9c5374b0238e/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=23d00a419fe67801afc02a87f7ab9c5374b0238e",
      "patch": "@@ -264,6 +264,23 @@ enum mve_instructions\n   MVE_VREV16,\n   MVE_VREV32,\n   MVE_VREV64,\n+  MVE_LSLL,\n+  MVE_LSLLI,\n+  MVE_LSRL,\n+  MVE_ASRL,\n+  MVE_ASRLI,\n+  MVE_SQRSHRL,\n+  MVE_SQRSHR,\n+  MVE_UQRSHL,\n+  MVE_UQRSHLL,\n+  MVE_UQSHL,\n+  MVE_UQSHLL,\n+  MVE_URSHRL,\n+  MVE_URSHR,\n+  MVE_SRSHRL,\n+  MVE_SRSHR,\n+  MVE_SQSHLL,\n+  MVE_SQSHL,\n   MVE_NONE\n };\n \n@@ -2026,6 +2043,7 @@ static const struct opcode32 neon_opcodes[] =\n    %d\t\t\tprint addr mode of MVE vldr[bhw] and vstr[bhw]\n    %u\t\t\tprint 'U' (unsigned) or 'S' for various mve instructions\n    %i\t\t\tprint MVE predicate(s) for vpt and vpst\n+   %j\t\t\tprint a 5-bit immediate from hw2[14:12,7:6]\n    %m\t\t\tprint rounding mode for vcvt and vrint\n    %n\t\t\tprint vector comparison code for predicated instruction\n    %s\t\t\tprint size for various vcvt instructions\n@@ -2046,6 +2064,8 @@ static const struct opcode32 neon_opcodes[] =\n    %<bitfield>F\t\tprint as a MVE S register\n    %<bitfield>Z\t\tas %<>r but r15 is ZR instead of PC and r13 is\n \t\t\tUNPREDICTABLE\n+\n+   %<bitfield>S\t\tas %<>r but r15 or r13 is UNPREDICTABLE\n    %<bitfield>s\t\tprint size for vector predicate & non VMOV instructions\n    %<bitfield>I\t\tprint carry flag or not\n    %<bitfield>i\t\tprint immediate for vstr/vldr reg +/- imm\n@@ -3295,6 +3315,91 @@ static const struct mopcode32 mve_opcodes[] =\n    0xee011f40, 0xff811f70,\n    \"vsub%v.i%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n \n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_ASRLI,\n+   0xea50012f, 0xfff1813f,\n+   \"asrl%c\\t%17-19l, %9-11h, %j\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_ASRL,\n+   0xea50012d, 0xfff101ff,\n+   \"asrl%c\\t%17-19l, %9-11h, %12-15S\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_LSLLI,\n+   0xea50010f, 0xfff1813f,\n+   \"lsll%c\\t%17-19l, %9-11h, %j\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_LSLL,\n+   0xea50010d, 0xfff101ff,\n+   \"lsll%c\\t%17-19l, %9-11h, %12-15S\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_LSRL,\n+   0xea50011f, 0xfff1813f,\n+   \"lsrl%c\\t%17-19l, %9-11h, %j\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_SQRSHRL,\n+   0xea51012d, 0xfff101ff,\n+   \"sqrshrl%c\\t%17-19l, %9-11h, %12-15S\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_SQRSHR,\n+   0xea500f2d, 0xfff00fff,\n+   \"sqrshr%c\\t%16-19S, %12-15S\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_SQSHLL,\n+   0xea51013f, 0xfff1813f,\n+   \"sqshll%c\\t%17-19l, %9-11h, %j\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_SQSHL,\n+   0xea500f3f, 0xfff08f3f,\n+   \"sqshl%c\\t%16-19S, %j\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_SRSHRL,\n+   0xea51012f, 0xfff1813f,\n+   \"srshrl%c\\t%17-19l, %9-11h, %j\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_SRSHR,\n+   0xea500f2f, 0xfff08f3f,\n+   \"srshr%c\\t%16-19S, %j\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_UQRSHLL,\n+   0xea51010d, 0xfff101ff,\n+   \"uqrshll%c\\t%17-19l, %9-11h, %12-15S\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_UQRSHL,\n+   0xea500f0d, 0xfff00fff,\n+   \"uqrshl%c\\t%16-19S, %12-15S\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_UQSHLL,\n+    0xea51010f, 0xfff1813f,\n+   \"uqshll%c\\t%17-19l, %9-11h, %j\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_UQSHL,\n+   0xea500f0f, 0xfff08f3f,\n+   \"uqshl%c\\t%16-19S, %j\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_URSHRL,\n+    0xea51011f, 0xfff1813f,\n+   \"urshrl%c\\t%17-19l, %9-11h, %j\"},\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_URSHR,\n+   0xea500f1f, 0xfff08f3f,\n+   \"urshr%c\\t%16-19S, %j\"},\n+\n   {ARM_FEATURE_CORE_LOW (0),\n    MVE_NONE,\n    0x00000000, 0x00000000, 0}\n@@ -5169,6 +5274,23 @@ is_mve_okay_in_it (enum mve_instructions matched_insn)\n     case MVE_VMOV2_VEC_LANE_TO_GP:\n     case MVE_VMOV2_GP_TO_VEC_LANE:\n     case MVE_VMOV_VEC_LANE_TO_GP:\n+    case MVE_LSLL:\n+    case MVE_LSLLI:\n+    case MVE_LSRL:\n+    case MVE_ASRL:\n+    case MVE_ASRLI:\n+    case MVE_SQRSHRL:\n+    case MVE_SQRSHR:\n+    case MVE_UQRSHL:\n+    case MVE_UQRSHLL:\n+    case MVE_UQSHL:\n+    case MVE_UQSHLL:\n+    case MVE_URSHRL:\n+    case MVE_URSHR:\n+    case MVE_SRSHRL:\n+    case MVE_SRSHR:\n+    case MVE_SQSHLL:\n+    case MVE_SQSHL:\n       return TRUE;\n     default:\n       return FALSE;\n@@ -5515,6 +5637,22 @@ is_mve_encoding_conflict (unsigned long given,\n     else\n       return FALSE;\n \n+    case MVE_ASRLI:\n+    case MVE_ASRL:\n+    case MVE_LSLLI:\n+    case MVE_LSLL:\n+    case MVE_LSRL:\n+    case MVE_SQRSHRL:\n+    case MVE_SQSHLL:\n+    case MVE_SRSHRL:\n+    case MVE_UQRSHLL:\n+    case MVE_UQSHLL:\n+    case MVE_URSHRL:\n+      if (arm_decode_field (given, 9, 11) == 0x7)\n+\treturn TRUE;\n+      else\n+\treturn FALSE;\n+\n     default:\n     case MVE_VADD_FP_T1:\n     case MVE_VADD_FP_T2:\n@@ -6490,6 +6628,34 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \t  return FALSE;\n       }\n \n+    case MVE_LSLL:\n+    case MVE_LSLLI:\n+    case MVE_LSRL:\n+    case MVE_ASRL:\n+    case MVE_ASRLI:\n+    case MVE_UQSHLL:\n+    case MVE_UQRSHLL:\n+    case MVE_URSHRL:\n+    case MVE_SRSHRL:\n+    case MVE_SQSHLL:\n+    case MVE_SQRSHRL:\n+      {\n+\tunsigned long gpr = arm_decode_field (given, 9, 11);\n+\tgpr = ((gpr << 1) | 1);\n+\tif (gpr == 0xd)\n+\t  {\n+\t    *unpredictable_code = UNPRED_R13;\n+\t    return TRUE;\n+\t  }\n+\telse if (gpr == 0xf)\n+\t  {\n+\t    *unpredictable_code = UNPRED_R15;\n+\t    return TRUE;\n+\t  }\n+\n+\treturn FALSE;\n+      }\n+\n     default:\n       return FALSE;\n     }\n@@ -8983,6 +9149,15 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t      }\n \t\t      break;\n \n+\t\t    case 'j':\n+\t\t      {\n+\t\t\tunsigned int imm5 = 0;\n+\t\t\timm5 |= arm_decode_field (given, 6, 7);\n+\t\t\timm5 |= (arm_decode_field (given, 12, 14) << 2);\n+\t\t\tfunc (stream, \"#%u\", (imm5 == 0) ? 32 : imm5);\n+\t\t      }\n+\t\t      break;\n+\n \t\t    case 'n':\n \t\t      print_vec_condition (info, given, insn->mve_op);\n \t\t      break;\n@@ -9088,6 +9263,14 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\t    else\n \t\t\t      func (stream, \"%s\", arm_regnames[value]);\n \t\t\t    break;\n+\n+\t\t\t  case 'S':\n+\t\t\t    if (value == 13 || value == 15)\n+\t\t\t      is_unpredictable = TRUE;\n+\t\t\t    else\n+\t\t\t      func (stream, \"%s\", arm_regnames[value]);\n+\t\t\t    break;\n+\n \t\t\t  case 's':\n \t\t\t    print_mve_size (info,\n \t\t\t\t\t    value,"
    }
  ]
}