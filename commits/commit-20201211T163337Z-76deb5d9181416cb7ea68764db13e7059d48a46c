{
  "sha": "76deb5d9181416cb7ea68764db13e7059d48a46c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzZkZWI1ZDkxODE0MTZjYjdlYTY4NzY0ZGIxM2U3MDU5ZDQ4YTQ2Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:33:36Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:33:37Z"
    },
    "message": "Change varobj.c:rootlist to a std::list\n\nThis changes varobj.c:rootlist to be a std::list.  This lets us remove\nsome code.  std::list is chosen because its iterator invalidation\napproach suits the all_root_varobjs API.\n\nI considered replacing all_root_varobjs with \"external iteration\", but\nhaven't gotten around to doing so.\n\ngdb/ChangeLog\n2020-12-11  Tom Tromey  <tom@tromey.com>\n\n\t* varobj.c (struct varobj_root) <next>: Remove.\n\t(struct vlist): Remove.\n\t(rootlist): Now a std::list.\n\t(install_variable, uninstall_variable, all_root_varobjs): Update.",
    "tree": {
      "sha": "63eee44cdb7a5fc5202f657b6c5b8b06dc2e113c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/63eee44cdb7a5fc5202f657b6c5b8b06dc2e113c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/76deb5d9181416cb7ea68764db13e7059d48a46c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76deb5d9181416cb7ea68764db13e7059d48a46c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/76deb5d9181416cb7ea68764db13e7059d48a46c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76deb5d9181416cb7ea68764db13e7059d48a46c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2c1413a98c897be397366d16f58bf54859863090",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c1413a98c897be397366d16f58bf54859863090",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2c1413a98c897be397366d16f58bf54859863090"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 18,
    "deletions": 56
  },
  "files": [
    {
      "sha": "360dddea5bf8f8110832c2e38cc5a8ba84894cae",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76deb5d9181416cb7ea68764db13e7059d48a46c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76deb5d9181416cb7ea68764db13e7059d48a46c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=76deb5d9181416cb7ea68764db13e7059d48a46c",
      "patch": "@@ -1,3 +1,10 @@\n+2020-12-11  Tom Tromey  <tom@tromey.com>\n+\n+\t* varobj.c (struct varobj_root) <next>: Remove.\n+\t(struct vlist): Remove.\n+\t(rootlist): Now a std::list.\n+\t(install_variable, uninstall_variable, all_root_varobjs): Update.\n+\n 2020-12-11  Tom Tromey  <tom@tromey.com>\n \n \t* varobj.c (VAROBJ_TABLE_SIZE): Remove."
    },
    {
      "sha": "7124e2585ba1c0b0c5d2319863280b3fa239bd3a",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 11,
      "deletions": 56,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76deb5d9181416cb7ea68764db13e7059d48a46c/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76deb5d9181416cb7ea68764db13e7059d48a46c/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=76deb5d9181416cb7ea68764db13e7059d48a46c",
      "patch": "@@ -31,6 +31,7 @@\n #include \"varobj-iter.h\"\n #include \"parser-defs.h\"\n #include \"gdbarch.h\"\n+#include <algorithm>\n \n #if HAVE_PYTHON\n #include \"python/python.h\"\n@@ -100,9 +101,6 @@ struct varobj_root\n \n   /* The varobj for this root node.  */\n   struct varobj *rootvar = NULL;\n-\n-  /* Next root variable */\n-  struct varobj_root *next = NULL;\n };\n \n /* Dynamic part of varobj.  */\n@@ -136,14 +134,6 @@ struct varobj_dynamic\n   varobj_item *saved_item = NULL;\n };\n \n-/* A list of varobjs */\n-\n-struct vlist\n-{\n-  struct varobj *var;\n-  struct vlist *next;\n-};\n-\n /* Private function prototypes */\n \n /* Helper functions for the above subcommands.  */\n@@ -197,8 +187,8 @@ static struct varobj *varobj_add_child (struct varobj *var,\n /* Mappings of varobj_display_formats enums to gdb's format codes.  */\n static int format_code[] = { 0, 't', 'd', 'x', 'o', 'z' };\n \n-/* Header of the list of root variable objects.  */\n-static struct varobj_root *rootlist;\n+/* List of root variable objects.  */\n+static std::list<struct varobj_root *> rootlist;\n \n /* Pointer to the varobj hash table (built at run time).  */\n static htab_t varobj_table;\n@@ -1790,14 +1780,7 @@ install_variable (struct varobj *var)\n \n   /* If root, add varobj to root list.  */\n   if (is_root_p (var))\n-    {\n-      /* Add to list of root variables.  */\n-      if (rootlist == NULL)\n-\tvar->root->next = NULL;\n-      else\n-\tvar->root->next = rootlist;\n-      rootlist = var->root;\n-    }\n+    rootlist.push_front (var->root);\n \n   return true;\t\t\t/* OK */\n }\n@@ -1806,9 +1789,6 @@ install_variable (struct varobj *var)\n static void\n uninstall_variable (struct varobj *var)\n {\n-  struct varobj_root *cr;\n-  struct varobj_root *prer;\n-\n   hashval_t hash = htab_hash_string (var->obj_name.c_str ());\n   htab_remove_elt_with_hash (varobj_table, var->obj_name.c_str (), hash);\n \n@@ -1818,32 +1798,9 @@ uninstall_variable (struct varobj *var)\n   /* If root, remove varobj from root list.  */\n   if (is_root_p (var))\n     {\n-      /* Remove from list of root variables.  */\n-      if (rootlist == var->root)\n-\trootlist = var->root->next;\n-      else\n-\t{\n-\t  prer = NULL;\n-\t  cr = rootlist;\n-\t  while ((cr != NULL) && (cr->rootvar != var))\n-\t    {\n-\t      prer = cr;\n-\t      cr = cr->next;\n-\t    }\n-\t  if (cr == NULL)\n-\t    {\n-\t      warning (_(\"Assertion failed: Could not find \"\n-\t\t\t \"varobj \\\"%s\\\" in root list\"),\n-\t\t       var->obj_name.c_str ());\n-\t      return;\n-\t    }\n-\t  if (prer == NULL)\n-\t    rootlist = NULL;\n-\t  else\n-\t    prer->next = cr->next;\n-\t}\n+      auto iter = std::find (rootlist.begin (), rootlist.end (), var->root);\n+      rootlist.erase (iter);\n     }\n-\n }\n \n /* Create and install a child of the parent of the given name.\n@@ -2406,15 +2363,13 @@ varobj_default_value_is_changeable_p (const struct varobj *var)\n void\n all_root_varobjs (void (*func) (struct varobj *var, void *data), void *data)\n {\n-  struct varobj_root *var_root, *var_root_next;\n-\n   /* Iterate \"safely\" - handle if the callee deletes its passed VAROBJ.  */\n-\n-  for (var_root = rootlist; var_root != NULL; var_root = var_root_next)\n+  auto iter = rootlist.begin ();\n+  auto end = rootlist.end ();\n+  while (iter != end)\n     {\n-      var_root_next = var_root->next;\n-\n-      (*func) (var_root->rootvar, data);\n+      auto self = iter++;\n+      (*func) ((*self)->rootvar, data);\n     }\n }\n "
    }
  ]
}