{
  "sha": "75e100a30d5dfdd3ac2b0391c17173645fc77633",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzVlMTAwYTMwZDVkZmRkM2FjMmIwMzkxYzE3MTczNjQ1ZmM3NzYzMw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-12T10:48:43Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-12T22:39:08Z"
    },
    "message": "PR26348, Malloc error in write_zeros\n\nThis adds a few more sanity checks on ELF objects, and a BFD flag to\ndisable objcopy and strip when fuzzed input files belong in the \"too\nhard\" basket.\n\nbfd/\n\tPR 26348\n\t* bfd.c (struct bfd): Add read_only.\n\t* elfcode.h (elf_swap_shdr_in): Test both sh_offset and sh_size.\n\tSet read_only on warning.\n\t(elf_object_p): Sanity check program header alignment.  Set\n\tread_only on warning.\n\t* bfd-in2.h: Regenerate.\nbinutils/\n\tPR 26348\n\t* objcopy.c (copy_object): Report file name with endian error.\n\tError and return on abfd->read_only.",
    "tree": {
      "sha": "a5543e1a6a43b603bc654afe5b81edcf8959b1a9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a5543e1a6a43b603bc654afe5b81edcf8959b1a9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/75e100a30d5dfdd3ac2b0391c17173645fc77633",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75e100a30d5dfdd3ac2b0391c17173645fc77633",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/75e100a30d5dfdd3ac2b0391c17173645fc77633",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75e100a30d5dfdd3ac2b0391c17173645fc77633/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 50,
    "deletions": 6
  },
  "files": [
    {
      "sha": "0e22506e02210c029b050013cfc925c63f4723d8",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75e100a30d5dfdd3ac2b0391c17173645fc77633/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75e100a30d5dfdd3ac2b0391c17173645fc77633/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=75e100a30d5dfdd3ac2b0391c17173645fc77633",
      "patch": "@@ -1,3 +1,13 @@\n+2020-08-13  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26348\n+\t* bfd.c (struct bfd): Add read_only.\n+\t* elfcode.h (elf_swap_shdr_in): Test both sh_offset and sh_size.\n+\tSet read_only on warning.\n+\t(elf_object_p): Sanity check program header alignment.  Set\n+\tread_only on warning.\n+\t* bfd-in2.h: Regenerate.\n+\n 2020-08-12  Jon Turney  <jon.turney@dronecode.org.uk>\n \n \t* elf.c (elfcore_grok_win32pstatus): Use unsigned int for"
    },
    {
      "sha": "94d3195836a4d19882f0a03b716ce795cb340e02",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75e100a30d5dfdd3ac2b0391c17173645fc77633/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75e100a30d5dfdd3ac2b0391c17173645fc77633/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=75e100a30d5dfdd3ac2b0391c17173645fc77633",
      "patch": "@@ -6678,6 +6678,10 @@ struct bfd\n   /* Set if this is a slim LTO object not loaded with a compiler plugin.  */\n   unsigned int lto_slim_object : 1;\n \n+  /* Do not attempt to modify this file.  Set when detecting errors\n+     that BFD is not prepared to handle for objcopy/strip.  */\n+  unsigned int read_only : 1;\n+\n   /* Set to dummy BFD created when claimed by a compiler plug-in\n      library.  */\n   bfd *plugin_dummy_bfd;"
    },
    {
      "sha": "ec38a0673c7ad606449a4c39ddfd75f7b08a0d89",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75e100a30d5dfdd3ac2b0391c17173645fc77633/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75e100a30d5dfdd3ac2b0391c17173645fc77633/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=75e100a30d5dfdd3ac2b0391c17173645fc77633",
      "patch": "@@ -245,6 +245,10 @@ CODE_FRAGMENT\n .  {* Set if this is a slim LTO object not loaded with a compiler plugin.  *}\n .  unsigned int lto_slim_object : 1;\n .\n+.  {* Do not attempt to modify this file.  Set when detecting errors\n+.     that BFD is not prepared to handle for objcopy/strip.  *}\n+.  unsigned int read_only : 1;\n+.\n .  {* Set to dummy BFD created when claimed by a compiler plug-in\n .     library.  *}\n .  bfd *plugin_dummy_bfd;"
    },
    {
      "sha": "84b08b57ebce9a9df05fd968ed26417a105f4419",
      "filename": "bfd/elfcode.h",
      "status": "modified",
      "additions": 17,
      "deletions": 5,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75e100a30d5dfdd3ac2b0391c17173645fc77633/bfd/elfcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75e100a30d5dfdd3ac2b0391c17173645fc77633/bfd/elfcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcode.h?ref=75e100a30d5dfdd3ac2b0391c17173645fc77633",
      "patch": "@@ -321,11 +321,14 @@ elf_swap_shdr_in (bfd *abfd,\n     {\n       ufile_ptr filesize = bfd_get_file_size (abfd);\n \n-      if (filesize != 0 && dst->sh_size > filesize)\n-\t_bfd_error_handler\n-\t  (_(\"warning: %pB has a corrupt section with a size (%\"\n-\t     BFD_VMA_FMT \"x) larger than the file size\"),\n-\t   abfd, dst->sh_size);\n+      if (filesize != 0\n+\t  && ((ufile_ptr) dst->sh_offset > filesize\n+\t      || dst->sh_size > filesize - dst->sh_offset))\n+\t{\n+\t  abfd->read_only = 1;\n+\t  _bfd_error_handler (_(\"warning: %pB has a section \"\n+\t\t\t\t\"extending past end of file\"), abfd);\n+\t}\n     }\n   dst->sh_link = H_GET_32 (abfd, src->sh_link);\n   dst->sh_info = H_GET_32 (abfd, src->sh_info);\n@@ -764,6 +767,7 @@ elf_object_p (bfd *abfd)\n \t     So we are kind, and reset the string index value to 0\n \t     so that at least some processing can be done.  */\n \t  i_ehdrp->e_shstrndx = SHN_UNDEF;\n+\t  abfd->read_only = 1;\n \t  _bfd_error_handler\n \t    (_(\"warning: %pB has a corrupt string table index - ignoring\"),\n \t     abfd);\n@@ -804,6 +808,14 @@ elf_object_p (bfd *abfd)\n \t  if (bfd_bread (&x_phdr, sizeof x_phdr, abfd) != sizeof x_phdr)\n \t    goto got_no_match;\n \t  elf_swap_phdr_in (abfd, &x_phdr, i_phdr);\n+\t  /* Too much code in BFD relies on alignment being a power of\n+\t     two, as required by the ELF spec.  */\n+\t  if (i_phdr->p_align != (i_phdr->p_align & -i_phdr->p_align))\n+\t    {\n+\t      abfd->read_only = 1;\n+\t      _bfd_error_handler (_(\"warning: %pB has a program header \"\n+\t\t\t\t    \"with invalid alignment\"), abfd);\n+\t    }\n \t}\n     }\n "
    },
    {
      "sha": "0006ad1740f510a7be08e04d7eec0475f280c813",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75e100a30d5dfdd3ac2b0391c17173645fc77633/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75e100a30d5dfdd3ac2b0391c17173645fc77633/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=75e100a30d5dfdd3ac2b0391c17173645fc77633",
      "patch": "@@ -1,3 +1,9 @@\n+2020-08-13  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26348\n+\t* objcopy.c (copy_object): Report file name with endian error.\n+\tError and return on abfd->read_only.\n+\n 2020-08-12  Tom Tromey  <tromey@adacore.com>\n \n \t* dwarf-mode.el (Version): Now 1.6."
    },
    {
      "sha": "c5af179b17e0690372cf40141ead226c2127e5f2",
      "filename": "binutils/objcopy.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75e100a30d5dfdd3ac2b0391c17173645fc77633/binutils/objcopy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75e100a30d5dfdd3ac2b0391c17173645fc77633/binutils/objcopy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objcopy.c?ref=75e100a30d5dfdd3ac2b0391c17173645fc77633",
      "patch": "@@ -2604,7 +2604,15 @@ copy_object (bfd *ibfd, bfd *obfd, const bfd_arch_info_type *input_arch)\n     {\n       /* PR 17636: Call non-fatal so that we return to our parent who\n \t may need to tidy temporary files.  */\n-      non_fatal (_(\"Unable to change endianness of input file(s)\"));\n+      non_fatal (_(\"unable to change endianness of '%s'\"),\n+\t\t bfd_get_archive_filename (ibfd));\n+      return FALSE;\n+    }\n+\n+  if (ibfd->read_only)\n+    {\n+      non_fatal (_(\"unable to modify '%s' due to errors\"),\n+\t\t bfd_get_archive_filename (ibfd));\n       return FALSE;\n     }\n "
    }
  ]
}