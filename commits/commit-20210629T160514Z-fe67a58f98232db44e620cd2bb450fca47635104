{
  "sha": "fe67a58f98232db44e620cd2bb450fca47635104",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmU2N2E1OGY5ODIzMmRiNDRlNjIwY2QyYmI0NTBmY2E0NzYzNTEwNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-29T16:05:14Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-29T16:05:14Z"
    },
    "message": "gdb: introduce FRAME_SCOPED_DEBUG_ENTER_EXIT\n\nIntroduce FRAME_SCOPED_DEBUG_ENTER_EXIT and use it to print enter/exit\nmessages in important frame-related functions.  I think this helps\nunderstand which lower-level operations are done as part of which\nhigher-level operation.  And it helps visually skip over a higher-level\noperation you are not interested in.\n\nHere's an example, combined with some py-unwind messages:\n\n    [frame] frame_unwind_find_by_frame: enter\n      [frame] frame_unwind_find_by_frame: this_frame=0\n      [frame] frame_unwind_try_unwinder: trying unwinder \"dummy\"\n      [frame] frame_unwind_try_unwinder: no\n      [frame] frame_unwind_try_unwinder: trying unwinder \"dwarf2 tailcall\"\n      [frame] frame_unwind_try_unwinder: no\n      [frame] frame_unwind_try_unwinder: trying unwinder \"inline\"\n      [frame] frame_unwind_try_unwinder: no\n      [frame] frame_unwind_try_unwinder: trying unwinder \"jit\"\n      [frame] frame_unwind_try_unwinder: no\n      [frame] frame_unwind_try_unwinder: trying unwinder \"python\"\n      [py-unwind] pyuw_sniffer: enter\n        [frame] frame_unwind_register_value: enter\n          [frame] frame_unwind_register_value: frame=-1, regnum=7(rsp)\n          [frame] frame_unwind_register_value:   -> register=7 bytes=[40ddffffff7f0000]\n        [frame] frame_unwind_register_value: exit\n        [py-unwind] pyuw_sniffer: frame=0, sp=0x7fffffffdd40, pc=0x5555555551ec\n        [frame] frame_id_p: l={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_id_p: l={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_id_eq: l={stack=<sentinel>,!code,special=0x0000000000000000}, r={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_unwind_register_value: enter\n          [frame] frame_unwind_register_value: frame=-1, regnum=6(rbp)\n          [frame] frame_unwind_register_value:   -> register=6 bytes=[50ddffffff7f0000]\n        [frame] frame_unwind_register_value: exit\n        [frame] frame_id_p: l={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_id_eq: l={stack=<sentinel>,!code,special=0x0000000000000000}, r={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] get_prev_frame: enter\n          [frame] get_prev_frame_always_1: enter\n            [frame] get_prev_frame_always_1: this_frame=-1\n            [frame] get_prev_frame_always_1:   -> {level=0,type=NORMAL_FRAME,unwind=0x5588ee3d17c0,pc=0x5555555551ec,id=<not computed>,func=<unknown>} // cached\n          [frame] get_prev_frame_always_1: exit\n        [frame] get_prev_frame: exit\n        [frame] value_fetch_lazy_register: (frame=0, regnum=6(rbp), ...) -> register=6 bytes=[50ddffffff7f0000]\n        [frame] frame_id_p: l={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_id_p: l={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_id_eq: l={stack=<sentinel>,!code,special=0x0000000000000000}, r={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_unwind_register_value: enter\n          [frame] frame_unwind_register_value: frame=-1, regnum=7(rsp)\n          [frame] frame_unwind_register_value:   -> register=7 bytes=[40ddffffff7f0000]\n        [frame] frame_unwind_register_value: exit\n        [frame] frame_id_p: l={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_id_eq: l={stack=<sentinel>,!code,special=0x0000000000000000}, r={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] get_prev_frame: enter\n          [frame] get_prev_frame_always_1: enter\n            [frame] get_prev_frame_always_1: this_frame=-1\n            [frame] get_prev_frame_always_1:   -> {level=0,type=NORMAL_FRAME,unwind=0x5588ee3d1824,pc=0x5555555551ec,id=<not computed>,func=<unknown>} // cached\n          [frame] get_prev_frame_always_1: exit\n        [frame] get_prev_frame: exit\n        [frame] value_fetch_lazy_register: (frame=0, regnum=7(rsp), ...) -> register=7 bytes=[40ddffffff7f0000]\n        [frame] frame_id_p: l={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_id_p: l={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_id_eq: l={stack=<sentinel>,!code,special=0x0000000000000000}, r={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_unwind_register_value: enter\n          [frame] frame_unwind_register_value: frame=-1, regnum=16(rip)\n          [frame] frame_unwind_register_value:   -> register=16 bytes=[ec51555555550000]\n        [frame] frame_unwind_register_value: exit\n        [frame] frame_id_p: l={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] frame_id_eq: l={stack=<sentinel>,!code,special=0x0000000000000000}, r={stack=<sentinel>,!code,special=0x0000000000000000} -> 1\n        [frame] get_prev_frame: enter\n          [frame] get_prev_frame_always_1: enter\n            [frame] get_prev_frame_always_1: this_frame=-1\n            [frame] get_prev_frame_always_1:   -> {level=0,type=NORMAL_FRAME,unwind=0x5588ee3d1888,pc=0x5555555551ec,id=<not computed>,func=<unknown>} // cached\n          [frame] get_prev_frame_always_1: exit\n        [frame] get_prev_frame: exit\n        [frame] value_fetch_lazy_register: (frame=0, regnum=16(rip), ...) -> register=16 bytes=[ec51555555550000]\n        [py-unwind] pyuw_sniffer: frame claimed by unwinder test unwinder\n      [py-unwind] pyuw_sniffer: exit\n      [frame] frame_unwind_try_unwinder: yes\n    [frame] frame_unwind_find_by_frame: exit\n\ngdb/ChangeLog:\n\n\t* frame.h (FRAME_SCOPED_DEBUG_ENTER_EXIT): New.\n\t* frame.c (compute_frame_id, get_prev_frame_always_1,\n\tget_prev_frame): Use FRAME_SCOPED_DEBUG_ENTER_EXIT.\n\t* frame-unwind.c (frame_unwind_find_by_frame): Likewise.\n\t(frame_unwind_register_value): Likewise.\n\nChange-Id: I45b69b4ed962e70572bc55b8adfb211483c1eeed",
    "tree": {
      "sha": "9d6772585c9bba60dcda35b110ff360c763b119e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9d6772585c9bba60dcda35b110ff360c763b119e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fe67a58f98232db44e620cd2bb450fca47635104",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe67a58f98232db44e620cd2bb450fca47635104",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fe67a58f98232db44e620cd2bb450fca47635104",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe67a58f98232db44e620cd2bb450fca47635104/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a154d838a70e96d888620c072e2d6ea8bdf044ca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a154d838a70e96d888620c072e2d6ea8bdf044ca",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a154d838a70e96d888620c072e2d6ea8bdf044ca"
    }
  ],
  "stats": {
    "total": 40,
    "additions": 29,
    "deletions": 11
  },
  "files": [
    {
      "sha": "699bf6fe5687b75975597f3655699dba29e7cb22",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe67a58f98232db44e620cd2bb450fca47635104/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe67a58f98232db44e620cd2bb450fca47635104/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fe67a58f98232db44e620cd2bb450fca47635104",
      "patch": "@@ -1,3 +1,11 @@\n+2021-06-29  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* frame.h (FRAME_SCOPED_DEBUG_ENTER_EXIT): New.\n+\t* frame.c (compute_frame_id, get_prev_frame_always_1,\n+\tget_prev_frame): Use FRAME_SCOPED_DEBUG_ENTER_EXIT.\n+\t* frame-unwind.c (frame_unwind_find_by_frame): Likewise.\n+\t(frame_unwind_register_value): Likewise.\n+\n 2021-06-29  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* frame-unwind.h (struct frame_unwind) <name>: New.  Update"
    },
    {
      "sha": "3dc303a49ad527c69b46e93d248f5678f595bc05",
      "filename": "gdb/frame-unwind.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe67a58f98232db44e620cd2bb450fca47635104/gdb/frame-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe67a58f98232db44e620cd2bb450fca47635104/gdb/frame-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame-unwind.c?ref=fe67a58f98232db44e620cd2bb450fca47635104",
      "patch": "@@ -178,6 +178,7 @@ frame_unwind_try_unwinder (struct frame_info *this_frame, void **this_cache,\n void\n frame_unwind_find_by_frame (struct frame_info *this_frame, void **this_cache)\n {\n+  FRAME_SCOPED_DEBUG_ENTER_EXIT;\n   frame_debug_printf (\"this_frame=%d\", frame_relative_level (this_frame));\n \n   struct gdbarch *gdbarch = get_frame_arch (this_frame);"
    },
    {
      "sha": "3f2d2700541ce3f2388a9afb7b30bece54e4b286",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe67a58f98232db44e620cd2bb450fca47635104/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe67a58f98232db44e620cd2bb450fca47635104/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=fe67a58f98232db44e620cd2bb450fca47635104",
      "patch": "@@ -560,6 +560,8 @@ skip_tailcall_frames (struct frame_info *frame)\n static void\n compute_frame_id (struct frame_info *fi)\n {\n+  FRAME_SCOPED_DEBUG_ENTER_EXIT;\n+\n   gdb_assert (fi->this_id.p == frame_id_status::NOT_COMPUTED);\n \n   unsigned int entry_generation = get_frame_cache_generation ();\n@@ -1215,12 +1217,10 @@ get_frame_register (struct frame_info *frame,\n struct value *\n frame_unwind_register_value (frame_info *next_frame, int regnum)\n {\n-  struct gdbarch *gdbarch;\n-  struct value *value;\n+  FRAME_SCOPED_DEBUG_ENTER_EXIT;\n \n   gdb_assert (next_frame != NULL);\n-  gdbarch = frame_unwind_arch (next_frame);\n-\n+  gdbarch *gdbarch = frame_unwind_arch (next_frame);\n   frame_debug_printf (\"frame=%d, regnum=%d(%s)\",\n \t\t      next_frame->level, regnum,\n \t\t      user_reg_map_regnum_to_name (gdbarch, regnum));\n@@ -1230,9 +1230,9 @@ frame_unwind_register_value (frame_info *next_frame, int regnum)\n     frame_unwind_find_by_frame (next_frame, &next_frame->prologue_cache);\n \n   /* Ask this frame to unwind its register.  */\n-  value = next_frame->unwind->prev_register (next_frame,\n-\t\t\t\t\t     &next_frame->prologue_cache,\n-\t\t\t\t\t     regnum);\n+  value *value = next_frame->unwind->prev_register (next_frame,\n+\t\t\t\t\t\t    &next_frame->prologue_cache,\n+\t\t\t\t\t\t    regnum);\n \n   if (frame_debug)\n     {\n@@ -2104,10 +2104,9 @@ get_prev_frame_if_no_cycle (struct frame_info *this_frame)\n static struct frame_info *\n get_prev_frame_always_1 (struct frame_info *this_frame)\n {\n-  struct gdbarch *gdbarch;\n+  FRAME_SCOPED_DEBUG_ENTER_EXIT;\n \n   gdb_assert (this_frame != NULL);\n-  gdbarch = get_frame_arch (this_frame);\n \n   if (frame_debug)\n     {\n@@ -2117,6 +2116,8 @@ get_prev_frame_always_1 (struct frame_info *this_frame)\n \tframe_debug_printf (\"this_frame=nullptr\");\n     }\n \n+  struct gdbarch *gdbarch = get_frame_arch (this_frame);\n+\n   /* Only try to do the unwind once.  */\n   if (this_frame->prev_p)\n     {\n@@ -2419,6 +2420,8 @@ inside_entry_func (frame_info *this_frame)\n struct frame_info *\n get_prev_frame (struct frame_info *this_frame)\n {\n+  FRAME_SCOPED_DEBUG_ENTER_EXIT;\n+\n   CORE_ADDR frame_pc;\n   int frame_pc_p;\n "
    },
    {
      "sha": "0d2bc08a47bf52d49bbed01fa893574258b42207",
      "filename": "gdb/frame.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe67a58f98232db44e620cd2bb450fca47635104/gdb/frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe67a58f98232db44e620cd2bb450fca47635104/gdb/frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.h?ref=fe67a58f98232db44e620cd2bb450fca47635104",
      "patch": "@@ -71,6 +71,7 @@\n \n #include \"language.h\"\n #include \"cli/cli-option.h\"\n+#include \"gdbsupport/common-debug.h\"\n \n struct symtab_and_line;\n struct frame_unwind;\n@@ -221,6 +222,11 @@ extern bool frame_debug;\n #define frame_debug_printf(fmt, ...) \\\n   debug_prefixed_printf_cond (frame_debug, \"frame\", fmt, ##__VA_ARGS__)\n \n+/* Print \"frame\" enter/exit debug statements.  */\n+\n+#define FRAME_SCOPED_DEBUG_ENTER_EXIT \\\n+  scoped_debug_enter_exit (frame_debug, \"frame\")\n+\n /* Construct a frame ID.  The first parameter is the frame's constant\n    stack address (typically the outer-bound), and the second the\n    frame's constant code address (typically the entry point)."
    },
    {
      "sha": "b1c28b2f41c635a54c366127b82a070cee030263",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-reg-undefined.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe67a58f98232db44e620cd2bb450fca47635104/gdb/testsuite/gdb.dwarf2/dw2-reg-undefined.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe67a58f98232db44e620cd2bb450fca47635104/gdb/testsuite/gdb.dwarf2/dw2-reg-undefined.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-reg-undefined.exp?ref=fe67a58f98232db44e620cd2bb450fca47635104",
      "patch": "@@ -79,8 +79,8 @@ for {set f 0} {$f < 3} {incr f} {\n # \"not saved\" and not \"optimized out\".\n gdb_test \"set debug frame 1\"\n gdb_test {print $rax} [multi_line \\\n-\t\t\t{\\[frame\\] frame_unwind_register_value: frame=0, regnum=0\\(rax\\)} \\\n-\t\t\t{\\[frame\\] frame_unwind_register_value:   -> <not saved>} \\\n+\t\t\t{    \\[frame\\] frame_unwind_register_value: frame=0, regnum=0\\(rax\\)} \\\n+\t\t\t{    \\[frame\\] frame_unwind_register_value:   -> <not saved>} \\\n \t\t\t{.*}]\n gdb_test \"set debug frame 0\"\n "
    }
  ]
}