{
  "sha": "c8f02daac9e367c7c2dc4c3ce08e85c733a56c7c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzhmMDJkYWFjOWUzNjdjN2MyZGM0YzNjZTA4ZTg1YzczM2E1NmM3Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-27T20:36:55Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-27T20:36:55Z"
    },
    "message": "Simplify MULTI_SUBSCRIPT implementation\n\nThe MULTI_SUBSCRIPT code in evaluate_subexp_standard has a comment\nsaying that perhaps the EVAL_SKIP handling is incorrect.  This patch\nsimplifies this code.  In particular, it precomputes all the indices\nin a separate loop and removes some complicated flow-control.\n\nTested using the gdb.modula2 and gdb.dlang test suites, as these are\nthe only parsers that emit MULTI_SUBSCRIPT.\n\ngdb/ChangeLog\n2020-12-27  Tom Tromey  <tom@tromey.com>\n\n\t* eval.c (evaluate_subexp_standard) <case MULTI_SUBSCRIPT>:\n\tSimplify.",
    "tree": {
      "sha": "c9c0eff97eb5493330f2515f10d9d79a5b1af068",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c9c0eff97eb5493330f2515f10d9d79a5b1af068"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c8f02daac9e367c7c2dc4c3ce08e85c733a56c7c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8f02daac9e367c7c2dc4c3ce08e85c733a56c7c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c8f02daac9e367c7c2dc4c3ce08e85c733a56c7c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8f02daac9e367c7c2dc4c3ce08e85c733a56c7c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9e87bc7f0fe304ba506bd26c8d818dd57b7d0eb4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e87bc7f0fe304ba506bd26c8d818dd57b7d0eb4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9e87bc7f0fe304ba506bd26c8d818dd57b7d0eb4"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 12,
    "deletions": 29
  },
  "files": [
    {
      "sha": "449afdc31db53c0ab3f0a6b261a15ba313fed308",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8f02daac9e367c7c2dc4c3ce08e85c733a56c7c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8f02daac9e367c7c2dc4c3ce08e85c733a56c7c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c8f02daac9e367c7c2dc4c3ce08e85c733a56c7c",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-27  Tom Tromey  <tom@tromey.com>\n+\n+\t* eval.c (evaluate_subexp_standard) <case MULTI_SUBSCRIPT>:\n+\tSimplify.\n+\n 2020-12-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \tPR gdb/27059"
    },
    {
      "sha": "58fa176c7c5149960771332c10efbdc20fef8a90",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 7,
      "deletions": 29,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8f02daac9e367c7c2dc4c3ce08e85c733a56c7c/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8f02daac9e367c7c2dc4c3ce08e85c733a56c7c/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=c8f02daac9e367c7c2dc4c3ce08e85c733a56c7c",
      "patch": "@@ -2142,36 +2142,14 @@ evaluate_subexp_standard (struct type *expect_type,\n       (*pos) += 2;\n       nargs = longest_to_int (exp->elts[pc + 1].longconst);\n       arg1 = evaluate_subexp_with_coercion (exp, pos, noside);\n-      while (nargs-- > 0)\n+      argvec = XALLOCAVEC (struct value *, nargs);\n+      for (ix = 0; ix < nargs; ++ix)\n+\targvec[ix] = evaluate_subexp_with_coercion (exp, pos, noside);\n+      if (noside == EVAL_SKIP)\n+\treturn arg1;\n+      for (ix = 0; ix < nargs; ++ix)\n \t{\n-\t  arg2 = evaluate_subexp_with_coercion (exp, pos, noside);\n-\t  /* FIXME:  EVAL_SKIP handling may not be correct.  */\n-\t  if (noside == EVAL_SKIP)\n-\t    {\n-\t      if (nargs > 0)\n-\t\tcontinue;\n-\t      return eval_skip_value (exp);\n-\t    }\n-\t  /* FIXME:  EVAL_AVOID_SIDE_EFFECTS handling may not be correct.  */\n-\t  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n-\t    {\n-\t      /* If the user attempts to subscript something that has no target\n-\t\t type (like a plain int variable for example), then report this\n-\t\t as an error.  */\n-\n-\t      type = TYPE_TARGET_TYPE (check_typedef (value_type (arg1)));\n-\t      if (type != NULL)\n-\t\t{\n-\t\t  arg1 = value_zero (type, VALUE_LVAL (arg1));\n-\t\t  noside = EVAL_SKIP;\n-\t\t  continue;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  error (_(\"cannot subscript something of type `%s'\"),\n-\t\t\t value_type (arg1)->name ());\n-\t\t}\n-\t    }\n+\t  arg2 = argvec[ix];\n \n \t  if (binop_user_defined_p (op, arg1, arg2))\n \t    {"
    }
  ]
}