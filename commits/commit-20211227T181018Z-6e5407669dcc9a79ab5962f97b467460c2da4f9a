{
  "sha": "6e5407669dcc9a79ab5962f97b467460c2da4f9a",
  "node_id": "C_kwDOANOeidoAKDZlNTQwNzY2OWRjYzlhNzlhYjU5NjJmOTdiNDY3NDYwYzJkYTRmOWE",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-12-27T18:06:57Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-12-27T18:10:18Z"
    },
    "message": "ld: Remove emultempl/linux.em\n\nRemove emultempl/linux.em whose last usage was removed by\n\ncommit c65c21e1ffd1e02d9970a4bca0b7e384788a50f0\nAuthor: Alan Modra <amodra@gmail.com>\nDate:   Mon Apr 16 22:14:01 2018 +0930\n\n    various i386-aout and i386-coff target removal\n\n    Also tidies some other aout leftovers in binutils-common.exp.",
    "tree": {
      "sha": "3f413c7142c93863d2ab85eda3bd5c648d9c70de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3f413c7142c93863d2ab85eda3bd5c648d9c70de"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6e5407669dcc9a79ab5962f97b467460c2da4f9a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6e5407669dcc9a79ab5962f97b467460c2da4f9a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6e5407669dcc9a79ab5962f97b467460c2da4f9a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6e5407669dcc9a79ab5962f97b467460c2da4f9a/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "67093b6e1adf1b4981b26f052b10f085a0f410c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67093b6e1adf1b4981b26f052b10f085a0f410c4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/67093b6e1adf1b4981b26f052b10f085a0f410c4"
    }
  ],
  "stats": {
    "total": 226,
    "additions": 0,
    "deletions": 226
  },
  "files": [
    {
      "sha": "e4d87bc69e0e5547d0ced725f996b5f27fb0f9ca",
      "filename": "ld/emultempl/linux.em",
      "status": "removed",
      "additions": 0,
      "deletions": 226,
      "changes": 226,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67093b6e1adf1b4981b26f052b10f085a0f410c4/ld/emultempl/linux.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67093b6e1adf1b4981b26f052b10f085a0f410c4/ld/emultempl/linux.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/linux.em?ref=67093b6e1adf1b4981b26f052b10f085a0f410c4",
      "patch": "@@ -1,226 +0,0 @@\n-# This shell script emits a C file. -*- C -*-\n-# It does some substitutions.\n-if [ -z \"$MACHINE\" ]; then\n-  OUTPUT_ARCH=${ARCH}\n-else\n-  OUTPUT_ARCH=${ARCH}:${MACHINE}\n-fi\n-fragment <<EOF\n-/* This file is is generated by a shell script.  DO NOT EDIT! */\n-\n-/* Linux a.out emulation code for ${EMULATION_NAME}\n-   Copyright (C) 1991-2021 Free Software Foundation, Inc.\n-   Written by Steve Chamberlain <sac@cygnus.com>\n-   Linux support by Eric Youngdale <ericy@cais.cais.com>\n-\n-   This file is part of the GNU Binutils.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program; if not, write to the Free Software\n-   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n-   MA 02110-1301, USA.  */\n-\n-#define TARGET_IS_${EMULATION_NAME}\n-\n-#include \"sysdep.h\"\n-#include \"bfd.h\"\n-#include \"bfdlink.h\"\n-#include \"ctf-api.h\"\n-\n-#include \"ld.h\"\n-#include \"ldmain.h\"\n-#include \"ldmisc.h\"\n-#include \"ldexp.h\"\n-#include \"ldlang.h\"\n-#include \"ldfile.h\"\n-#include \"ldemul.h\"\n-\n-static void\n-gld${EMULATION_NAME}_before_parse (void)\n-{\n-  ldfile_set_output_arch (\"${OUTPUT_ARCH}\", bfd_arch_`echo ${ARCH} | sed -e 's/:.*//'`);\n-  input_flags.dynamic = true;\n-  config.has_shared = true;\n-  link_info.check_relocs_after_open_input = true;\n-EOF\n-if test -n \"$COMMONPAGESIZE\"; then\n-fragment <<EOF\n-  link_info.relro = DEFAULT_LD_Z_RELRO;\n-EOF\n-fi\n-fragment <<EOF\n-}\n-\n-/* Try to open a dynamic archive.  This is where we know that Linux\n-   dynamic libraries have an extension of .sa.  */\n-\n-static bool\n-gld${EMULATION_NAME}_open_dynamic_archive\n-  (const char *arch, search_dirs_type *search, lang_input_statement_type *entry)\n-{\n-  char *string;\n-\n-  if (! entry->flags.maybe_archive || entry->flags.full_name_provided)\n-    return false;\n-\n-  string = (char *) xmalloc (strlen (search->name)\n-\t\t\t     + strlen (entry->filename)\n-\t\t\t     + strlen (arch)\n-\t\t\t     + sizeof \"/lib.sa\");\n-\n-  sprintf (string, \"%s/lib%s%s.sa\", search->name, entry->filename, arch);\n-\n-  if (! ldfile_try_open_bfd (string, entry))\n-    {\n-      free (string);\n-      return false;\n-    }\n-\n-  entry->filename = string;\n-\n-  return true;\n-}\n-\n-/* This is called by the create_output_section_statements routine via\n-   lang_for_each_statement.  It locates any address assignment to\n-   .text, and modifies it to include the size of the headers.  This\n-   causes -Ttext to mean the starting address of the header, rather\n-   than the starting address of .text, which is compatible with other\n-   Linux tools.  */\n-\n-static void\n-gld${EMULATION_NAME}_find_address_statement (lang_statement_union_type *s)\n-{\n-  if (s->header.type == lang_address_statement_enum\n-      && strcmp (s->address_statement.section_name, \".text\") == 0)\n-    {\n-      ASSERT (s->address_statement.address->type.node_class == etree_value);\n-      s->address_statement.address->value.value += 0x20;\n-    }\n-}\n-\n-/* This is called before opening the input BFD's.  */\n-\n-static void\n-gld${EMULATION_NAME}_create_output_section_statements (void)\n-{\n-  lang_for_each_statement (gld${EMULATION_NAME}_find_address_statement);\n-}\n-\n-/* This is called after the sections have been attached to output\n-   sections, but before any sizes or addresses have been set.  */\n-\n-static void\n-gld${EMULATION_NAME}_before_allocation (void)\n-{\n-  if (bfd_link_relocatable (&link_info))\n-    return;\n-\n-  /* Let the backend work out the sizes of any sections required by\n-     dynamic linking.  */\n-  if (! bfd_${EMULATION_NAME}_size_dynamic_sections (link_info.output_bfd,\n-\t\t\t\t\t\t     &link_info))\n-    einfo (_(\"%F%P: failed to set dynamic section sizes: %E\\n\"));\n-\n-  before_allocation_default ();\n-}\n-\n-static char *\n-gld${EMULATION_NAME}_get_script (int *isfile)\n-EOF\n-\n-if test x\"$COMPILE_IN\" = xyes\n-then\n-# Scripts compiled in.\n-\n-# sed commands to quote an ld script as a C string.\n-sc=\"-f stringify.sed\"\n-\n-fragment <<EOF\n-{\n-  *isfile = 0;\n-\n-  if (bfd_link_relocatable (&link_info) && config.build_constructors)\n-    return\n-EOF\n-sed $sc ldscripts/${EMULATION_NAME}.xu                 >> e${EMULATION_NAME}.c\n-echo '  ; else if (bfd_link_relocatable (&link_info)) return' >> e${EMULATION_NAME}.c\n-sed $sc ldscripts/${EMULATION_NAME}.xr                 >> e${EMULATION_NAME}.c\n-echo '  ; else if (!config.text_read_only) return'     >> e${EMULATION_NAME}.c\n-sed $sc ldscripts/${EMULATION_NAME}.xbn                >> e${EMULATION_NAME}.c\n-echo '  ; else if (!config.magic_demand_paged) return' >> e${EMULATION_NAME}.c\n-sed $sc ldscripts/${EMULATION_NAME}.xn                 >> e${EMULATION_NAME}.c\n-echo '  ; else return'                                 >> e${EMULATION_NAME}.c\n-sed $sc ldscripts/${EMULATION_NAME}.x                  >> e${EMULATION_NAME}.c\n-echo '; }'                                             >> e${EMULATION_NAME}.c\n-\n-else\n-# Scripts read from the filesystem.\n-\n-fragment <<EOF\n-{\n-  *isfile = 1;\n-\n-  if (bfd_link_relocatable (&link_info) && config.build_constructors)\n-    return \"ldscripts/${EMULATION_NAME}.xu\";\n-  else if (bfd_link_relocatable (&link_info))\n-    return \"ldscripts/${EMULATION_NAME}.xr\";\n-  else if (!config.text_read_only)\n-    return \"ldscripts/${EMULATION_NAME}.xbn\";\n-  else if (!config.magic_demand_paged)\n-    return \"ldscripts/${EMULATION_NAME}.xn\";\n-  else\n-    return \"ldscripts/${EMULATION_NAME}.x\";\n-}\n-EOF\n-\n-fi\n-\n-fragment <<EOF\n-\n-struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n-{\n-  gld${EMULATION_NAME}_before_parse,\n-  syslib_default,\n-  hll_default,\n-  after_parse_default,\n-  after_open_default,\n-  after_check_relocs_default,\n-  before_place_orphans_default,\n-  after_allocation_default,\n-  set_output_arch_default,\n-  ldemul_default_target,\n-  gld${EMULATION_NAME}_before_allocation,\n-  gld${EMULATION_NAME}_get_script,\n-  \"${EMULATION_NAME}\",\n-  \"${OUTPUT_FORMAT}\",\n-  finish_default,\n-  gld${EMULATION_NAME}_create_output_section_statements,\n-  gld${EMULATION_NAME}_open_dynamic_archive,\n-  NULL,\t/* place orphan */\n-  NULL,\t/* set symbols */\n-  NULL,\t/* parse args */\n-  NULL,\t/* add_options */\n-  NULL,\t/* handle_option */\n-  NULL,\t/* unrecognized file */\n-  NULL,\t/* list options */\n-  NULL,\t/* recognized file */\n-  NULL,\t/* find_potential_libraries */\n-  NULL,\t/* new_vers_pattern */\n-  NULL,\t/* extra_map_file_text */\n-  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n-  ${LDEMUL_ACQUIRE_STRINGS_FOR_CTF-NULL},\n-  ${LDEMUL_NEW_DYNSYM_FOR_CTF-NULL},\n-  ${LDEMUL_PRINT_SYMBOL-NULL}\n-};\n-EOF"
    }
  ]
}