{
  "sha": "4538d1c7c46e67b472d8d5ebf163f3dfd9c67714",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDUzOGQxYzdjNDZlNjdiNDcyZDhkNWViZjE2M2YzZGZkOWM2NzcxNA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-28T05:26:37Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-28T09:41:48Z"
    },
    "message": "PR24857, ld: error adding symbols: bad value\n\nThis fixes two cases where elf_link_add_object_symbols returns an\nerror, setting the catch-all bfd_error_bad_value without explaining\nthe error.  The second one is an internal error that can only be\ncaused by a target elf_add_symbol_hook, so make that one abort.  The\nfirst one is my PR24339 fix.  PR24339 is another of those fuzzing bugs\nand the fix I made catches the problem when loading symbols, rather\nthan when symbols are used in relocs.  While ld is correct to reject\nthe object file as not complying with the ELF standard, let's be a\nlittle more forgiving for dynamic objects.\n\n\tPR 24857\n\tPR 24339\n\t* elflink.c (elf_link_add_object_symbols): Report an informative\n\terror on finding local symbols with index equal or greater than\n\tsymbol table sh_info.  Correct comment.  Allow such symbols in\n\tdynamic objects.  Abort on NULL section for symbol.",
    "tree": {
      "sha": "04c8431d48f64a6e83c2487f86ab041df957a631",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/04c8431d48f64a6e83c2487f86ab041df957a631"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4538d1c7c46e67b472d8d5ebf163f3dfd9c67714",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4538d1c7c46e67b472d8d5ebf163f3dfd9c67714",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4538d1c7c46e67b472d8d5ebf163f3dfd9c67714",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4538d1c7c46e67b472d8d5ebf163f3dfd9c67714/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "52b75bf1dc759e8d9eda9a71caa52e458e57e4ff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/52b75bf1dc759e8d9eda9a71caa52e458e57e4ff",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/52b75bf1dc759e8d9eda9a71caa52e458e57e4ff"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 24,
    "deletions": 5
  },
  "files": [
    {
      "sha": "13649040c080a8b6aabe347b29475bba6421c42a",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4538d1c7c46e67b472d8d5ebf163f3dfd9c67714/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4538d1c7c46e67b472d8d5ebf163f3dfd9c67714/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=4538d1c7c46e67b472d8d5ebf163f3dfd9c67714",
      "patch": "@@ -1,3 +1,12 @@\n+2019-07-28  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24857\n+\tPR 24339\n+\t* elflink.c (elf_link_add_object_symbols): Report an informative\n+\terror on finding local symbols with index equal or greater than\n+\tsymbol table sh_info.  Correct comment.  Allow such symbols in\n+\tdynamic objects.  Abort on NULL section for symbol.\n+\n 2019-07-26  Alan Modra  <amodra@gmail.com>\n \n \t* elf-bfd.h (struct output_elf_obj_tdata): Delete \"linker\" field."
    },
    {
      "sha": "ad146d48fc92b073978cff054b80f72adcfb21a8",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 15,
      "deletions": 5,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4538d1c7c46e67b472d8d5ebf163f3dfd9c67714/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4538d1c7c46e67b472d8d5ebf163f3dfd9c67714/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=4538d1c7c46e67b472d8d5ebf163f3dfd9c67714",
      "patch": "@@ -4421,6 +4421,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n       bfd_boolean common;\n       bfd_boolean discarded;\n       unsigned int old_alignment;\n+      unsigned int shindex;\n       bfd *old_bfd;\n       bfd_boolean matched;\n \n@@ -4450,7 +4451,19 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t    continue;\n \n \t  /* If we aren't prepared to handle locals within the globals\n-\t     then we'll likely segfault on a NULL section.  */\n+\t     then we'll likely segfault on a NULL symbol hash if the\n+\t     symbol is ever referenced in relocations.  */\n+\t  shindex = elf_elfheader (abfd)->e_shstrndx;\n+\t  name = bfd_elf_string_from_elf_section (abfd, shindex, hdr->sh_name);\n+\t  _bfd_error_handler (_(\"%pB: %s local symbol at index %lu\"\n+\t\t\t\t\" (>= sh_info of %lu)\"),\n+\t\t\t      abfd, name, (long) (isym - isymbuf + extsymoff),\n+\t\t\t      (long) extsymoff);\n+\n+\t  /* Dynamic object relocations are not processed by ld, so\n+\t     ld won't run into the problem mentioned above.  */\n+\t  if (dynamic)\n+\t    continue;\n \t  bfd_set_error (bfd_error_bad_value);\n \t  goto error_free_vers;\n \n@@ -4550,10 +4563,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \n       /* Sanity check that all possibilities were handled.  */\n       if (sec == NULL)\n-\t{\n-\t  bfd_set_error (bfd_error_bad_value);\n-\t  goto error_free_vers;\n-\t}\n+\tabort ();\n \n       /* Silently discard TLS symbols from --just-syms.  There's\n \t no way to combine a static TLS block with a new TLS block"
    }
  ]
}