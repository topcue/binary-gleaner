{
  "sha": "0ac85db529d1077551b92c6da66044eff672c315",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGFjODVkYjUyOWQxMDc3NTUxYjkyYzZkYTY2MDQ0ZWZmNjcyYzMxNQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-22T20:42:35Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-22T20:42:36Z"
    },
    "message": "gdb/testsuite: eliminate gdb_suppress_tests mechanism\n\nThere is a lot of support code for the test suppression mechanism.  But\nas far as I know, it is not useful.  The gdb_suppress_tests proc is in\nfact disabled with this comment that has been there since forever:\n\n    return;  # fnf - disable pending review of results where\n             # testsuite ran better without this\n\nI suggest to just remove everything related to test suppression, that\nremoves some unnecessary complexity from the support code and the tests.\n\ngdb/testsuite/ChangeLog:\n\n\t* lib/gdb.exp (gdb_test_multiple): Remove things related to test\n\tsuppression.\n\t(default_gdb_exit): Likewise.\n\t(default_gdb_spawn): Likewise.\n\t(send_gdb): Likewise.\n\t(gdb_expect): Likewise.\n\t(gdb_expect_list): Likewise.\n\t(default_gdb_init): Likewise.\n\t(gdb_suppress_entire_file): Remove.\n\t(gdb_suppress_tests): Remove.\n\t(gdb_stop_suppressing_tests): Remove.\n\t(gdb_clear_suppressed): Remove.\n\t* lib/mi-support.exp (mi_uncatched_gdb_exit): Remove things\n\trelated to test suppression.\n\t(default_mi_gdb_start): Likewise.\n\t(mi_gdb_reinitialize_dir): Likewise.\n\t(mi_gdb_test): Likewise.\n\t(mi_run_cmd_full): Likewise.\n\t(mi_runto_helper): Likewise.\n\t(mi_execute_to): Likewise.\n\t* lib/prompt.exp (default_prompt_gdb_start): Likewise.\n\t* gdb.base/bitfields.exp: Likewise.\n\t* gdb.base/bitfields2.exp: Likewise.\n\t* gdb.base/break.exp: Likewise.\n\t* gdb.base/call-sc.exp: Likewise.\n\t* gdb.base/callfuncs.exp: Likewise.\n\t* gdb.base/dfp-test.exp: Likewise.\n\t* gdb.base/endian.exp: Likewise.\n\t* gdb.base/exprs.exp: Likewise.\n\t* gdb.base/funcargs.exp: Likewise.\n\t* gdb.base/hbreak2.exp: Likewise.\n\t* gdb.base/recurse.exp: Likewise.\n\t* gdb.base/scope.exp: Likewise.\n\t* gdb.base/sepdebug.exp: Likewise.\n\t* gdb.base/structs.exp: Likewise.\n\t* gdb.base/until.exp: Likewise.\n\t* gdb.cp/misc.exp: Likewise.\n\nChange-Id: Ie6d3025091691ba72010faa28b85ebd417b738f7",
    "tree": {
      "sha": "2194bfbc559e8f8df81890088f00dc8048217c31",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2194bfbc559e8f8df81890088f00dc8048217c31"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0ac85db529d1077551b92c6da66044eff672c315",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ac85db529d1077551b92c6da66044eff672c315",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0ac85db529d1077551b92c6da66044eff672c315",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ac85db529d1077551b92c6da66044eff672c315/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9d2d8a16e1ce033d6b7956d4b4f37961705bb5cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d2d8a16e1ce033d6b7956d4b4f37961705bb5cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9d2d8a16e1ce033d6b7956d4b4f37961705bb5cf"
    }
  ],
  "stats": {
    "total": 1072,
    "additions": 300,
    "deletions": 772
  },
  "files": [
    {
      "sha": "c64f3bca1c23a0538f9739d0790f698dc94020d4",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -1,3 +1,43 @@\n+2021-01-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* lib/gdb.exp (gdb_test_multiple): Remove things related to test\n+\tsuppression.\n+\t(default_gdb_exit): Likewise.\n+\t(default_gdb_spawn): Likewise.\n+\t(send_gdb): Likewise.\n+\t(gdb_expect): Likewise.\n+\t(gdb_expect_list): Likewise.\n+\t(default_gdb_init): Likewise.\n+\t(gdb_suppress_entire_file): Remove.\n+\t(gdb_suppress_tests): Remove.\n+\t(gdb_stop_suppressing_tests): Remove.\n+\t(gdb_clear_suppressed): Remove.\n+\t* lib/mi-support.exp (mi_uncatched_gdb_exit): Remove things\n+\trelated to test suppression.\n+\t(default_mi_gdb_start): Likewise.\n+\t(mi_gdb_reinitialize_dir): Likewise.\n+\t(mi_gdb_test): Likewise.\n+\t(mi_run_cmd_full): Likewise.\n+\t(mi_runto_helper): Likewise.\n+\t(mi_execute_to): Likewise.\n+\t* lib/prompt.exp (default_prompt_gdb_start): Likewise.\n+\t* gdb.base/bitfields.exp: Likewise.\n+\t* gdb.base/bitfields2.exp: Likewise.\n+\t* gdb.base/break.exp: Likewise.\n+\t* gdb.base/call-sc.exp: Likewise.\n+\t* gdb.base/callfuncs.exp: Likewise.\n+\t* gdb.base/dfp-test.exp: Likewise.\n+\t* gdb.base/endian.exp: Likewise.\n+\t* gdb.base/exprs.exp: Likewise.\n+\t* gdb.base/funcargs.exp: Likewise.\n+\t* gdb.base/hbreak2.exp: Likewise.\n+\t* gdb.base/recurse.exp: Likewise.\n+\t* gdb.base/scope.exp: Likewise.\n+\t* gdb.base/sepdebug.exp: Likewise.\n+\t* gdb.base/structs.exp: Likewise.\n+\t* gdb.base/until.exp: Likewise.\n+\t* gdb.cp/misc.exp: Likewise.\n+\n 2021-01-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \tPR cli/25956"
    },
    {
      "sha": "cf0082438691759ef0d20025a0f6b50be405272e",
      "filename": "gdb/testsuite/gdb.base/bitfields.exp",
      "status": "modified",
      "additions": 35,
      "deletions": 102,
      "changes": 137,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/bitfields.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/bitfields.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/bitfields.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -35,72 +35,33 @@ proc bitfield_uniqueness {} {\n     global srcfile\n \n     if { ! [runto break1] } {\n-\tgdb_suppress_tests\n-    }\n-\t\n-    if [gdb_test \"print flags\" \".*uc = 1 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #1\"] {\n-\tgdb_suppress_tests\n+\treturn\n     }\n+\n+    gdb_test \"print flags\" \".*uc = 1 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\"\n+    gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #1\"\n+\n     # Note that we check for s1 as either 1 or -1, so that failure to\n     # treat it correctly as a signed 1bit field (values 0 or -1) while\n     # printing its value does not cause a spurious failure.  We do the\n     # signedness preservation test later.\n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = (1|-1), u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (s1)\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #2\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 1, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (u1)\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #3\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 1, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (s2)\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #4\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 1, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (u2)\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #5\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 1, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (s3)\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #6\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 1, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (u3)\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #7\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 1, u9 = 0, sc = 0.*\" \"bitfield uniqueness (s9)\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #8\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 1, sc = 0.*\" \"bitfield uniqueness (u9)\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #9\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 1.*\" \"bitfield uniqueness (sc)\"] {\n-\tgdb_suppress_tests\n-    }\n-    # Hmmmm?\n-    gdb_stop_suppressing_tests\n+     gdb_test \"print flags\" \".*uc = 0 .*, s1 = (1|-1), u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (s1)\"\n+     gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #2\"\n+     gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 1, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (u1)\"\n+     gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #3\"\n+     gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 1, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (s2)\"\n+     gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #4\"\n+     gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 1, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (u2)\"\n+     gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #5\"\n+     gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 1, u3 = 0, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (s3)\"\n+     gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #6\"\n+     gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 1, s9 = 0, u9 = 0, sc = 0.*\" \"bitfield uniqueness (u3)\"\n+     gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #7\"\n+     gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 1, u9 = 0, sc = 0.*\" \"bitfield uniqueness (s9)\"\n+     gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #8\"\n+     gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 1, sc = 0.*\" \"bitfield uniqueness (u9)\"\n+     gdb_test \"cont\" \"Break.*break1 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break1 #9\"\n+     gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 0, s2 = 0, u2 = 0, s3 = 0, u3 = 0, s9 = 0, u9 = 0, sc = 1.*\" \"bitfield uniqueness (sc)\"\n }\n \n \n@@ -119,24 +80,16 @@ proc bitfield_containment {} {\n     delete_breakpoints\n \n     if { ![runto break2] } {\n-\tgdb_suppress_tests\n-    }\n-\n-    if [gdb_test \"print/x flags\" \"= {uc = 0xff, s1 = 0x0, u1 = 0x1, s2 = 0x0, u2 = 0x3, s3 = 0x0, u3 = 0x7, s9 = 0x0, u9 = 0x1ff, sc = 0x0}\" \"bitfield containment #1\"] {\n-\tgdb_suppress_tests\n+\treturn\n     }\n \n-    if [gdb_test \"cont\" \"Break.*break2 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break2\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"print/x flags\" \"= {uc = 0xff, s1 = 0x0, u1 = 0x1, s2 = 0x0, u2 = 0x3, s3 = 0x0, u3 = 0x7, s9 = 0x0, u9 = 0x1ff, sc = 0x0}\" \"bitfield containment #1\"\n+    gdb_test \"cont\" \"Break.*break2 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break2\"\n \n     # If program is compiled with Sun CC, then these print out as their\n     # actual sizes; if compiled with gcc, they print out as 0xffffffff\n     # (which strikes me as bogus, but accept it at least for now).\n-    if [gdb_test \"print/x flags\" \"= {uc = 0x0, s1 = 0x(1|f*), u1 = 0x0, s2 = 0x(3|f*), u2 = 0x0, s3 = 0x(7|f*), u3 = 0x0, s9 = 0x(1ff|f*), u9 = 0x0, sc = 0xff}\" \"bitfield containment #2\"] {\n-\tgdb_suppress_tests\n-    }\n-    gdb_stop_suppressing_tests\n+    gdb_test \"print/x flags\" \"= {uc = 0x0, s1 = 0x(1|f*), u1 = 0x0, s2 = 0x(3|f*), u2 = 0x0, s3 = 0x(7|f*), u3 = 0x0, s9 = 0x(1ff|f*), u9 = 0x0, sc = 0xff}\" \"bitfield containment #2\"\n }\n \n # Test unsigned bitfields for unsignedness and range.\n@@ -152,13 +105,10 @@ proc bitfield_unsignedness {} {\n     delete_breakpoints\n \n     if { ![runto break3] } {\n-\tgdb_suppress_tests\n+\treturn\n     }\n \n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 1, s2 = 0, u2 = 3, s3 = 0, u3 = 7, s9 = 0, u9 = 511, sc = 0.*\" \"unsigned bitfield ranges\"] {\n-\tgdb_suppress_tests\n-    }\n-    gdb_stop_suppressing_tests\n+    gdb_test \"print flags\" \".*uc = 0 .*, s1 = 0, u1 = 1, s2 = 0, u2 = 3, s3 = 0, u3 = 7, s9 = 0, u9 = 511, sc = 0.*\" \"unsigned bitfield ranges\"\n }\n \n #\n@@ -177,16 +127,11 @@ proc bitfield_signedness {} {\n     delete_breakpoints\n \n     if { ! [runto break4] } {\n-\tgdb_suppress_tests\n+\treturn\n     }\n \n-    if [gdb_test \"print flags\" \"= {uc = 0 .*, s1 = 0, u1 = 0, s2 = 1, u2 = 0, s3 = 3, u3 = 0, s9 = 255, u9 = 0, sc = 0 .*}\" \"signed bitfields, max positive values\"] {\n-\tgdb_suppress_tests\n-    }\n-\n-    if [gdb_test \"cont\" \"Break.*break4 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break4 #1\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"print flags\" \"= {uc = 0 .*, s1 = 0, u1 = 0, s2 = 1, u2 = 0, s3 = 3, u3 = 0, s9 = 255, u9 = 0, sc = 0 .*}\" \"signed bitfields, max positive values\"\n+    gdb_test \"cont\" \"Break.*break4 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break4 #1\"\n \n     # Determine if the target has signed bitfields so we can xfail the\n     # the signed bitfield tests if it doesn't.\n@@ -200,27 +145,15 @@ proc bitfield_signedness {} {\n \t}\n \t-re \".*$gdb_prompt $\" {\n \t    fail \"determining signed-ness of bitfields\"\n-\t    gdb_suppress_tests\n \t}\n-\tdefault { \n+\tdefault {\n \t    fail \"determining signed-ness of bitfields\"\n-\t    gdb_suppress_tests\n \t}\n     }\n \n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = -1, u1 = 0, s2 = -2, u2 = 0, s3 = -4, u3 = 0, s9 = -256, u9 = 0, sc = 0.*\" \"signed bitfields, max negative values\"] {\n-        gdb_suppress_tests\n-    }\n-\n-    if [gdb_test \"cont\" \"Break.*break4 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break4 #2\"] {\n-\tgdb_suppress_tests\n-    }\n-\n-    if [gdb_test \"print flags\" \".*uc = 0 .*, s1 = -1, u1 = 0, s2 = -1, u2 = 0, s3 = -1, u3 = 0, s9 = -1, u9 = 0, sc = 0.*\" \"signed bitfields with -1\"] {\n-\tgdb_suppress_tests\n-    }\n-    # Hmmmm???\n-    gdb_stop_suppressing_tests\n+    gdb_test \"print flags\" \".*uc = 0 .*, s1 = -1, u1 = 0, s2 = -2, u2 = 0, s3 = -4, u3 = 0, s9 = -256, u9 = 0, sc = 0.*\" \"signed bitfields, max negative values\"\n+    gdb_test \"cont\" \"Break.*break4 \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to break4 #2\"\n+    gdb_test \"print flags\" \".*uc = 0 .*, s1 = -1, u1 = 0, s2 = -1, u2 = 0, s3 = -1, u3 = 0, s9 = -1, u9 = 0, sc = 0.*\" \"signed bitfields with -1\"\n }\n \n # Test bitfields at non-zero offsets in a struct."
    },
    {
      "sha": "adc1cf5bba755d7fd74308d020a56b08cab7db24",
      "filename": "gdb/testsuite/gdb.base/bitfields2.exp",
      "status": "modified",
      "additions": 18,
      "deletions": 63,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/bitfields2.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/bitfields2.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/bitfields2.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -40,9 +40,7 @@ proc continue_test { function tag } {\n     global decimal\n     global srcfile\n \n-    if [gdb_test \"cont\" \"Break.*$function \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to $function $tag\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \"Break.*$function \\\\(\\\\) at .*$srcfile:$decimal.*\" \"continuing to $function $tag\"\n }\n \n #\n@@ -51,13 +49,9 @@ proc continue_test { function tag } {\n #\n proc start_test { function } {\n     delete_breakpoints\n-    if [gdb_test \"break tester\" \".*\" \"break tester prior to $function\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"break tester\" \".*\" \"break tester prior to $function\"\n     continue_test \"tester\" \"prior to $function\"\n-    if ![gdb_breakpoint $function] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_breakpoint $function\n     continue_test $function \"#0\"\n }\n     \n@@ -75,31 +69,18 @@ proc bitfield_uniqueness {} {\n     global srcfile\n \n     start_test break1\n-\t\n-    if [gdb_test \"print flags\" \".*u1 = 0, u2 = 0, u3 = 0, s1 = 1, s2 = 0, s3 = 0.*\" \"bitfield uniqueness; flags.s1 = 1\"] {\n-\tgdb_suppress_tests\n-    }\n+\n+    gdb_test \"print flags\" \".*u1 = 0, u2 = 0, u3 = 0, s1 = 1, s2 = 0, s3 = 0.*\" \"bitfield uniqueness; flags.s1 = 1\"\n     continue_test break1 \"#1\"\n-    if [gdb_test \"print flags\" \".*u1 = 1, u2 = 0, u3 = 0, s1 = 0, s2 = 0, s3 = 0.*\" \"bitfield uniqueness; flags.u1 = 1\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"print flags\" \".*u1 = 1, u2 = 0, u3 = 0, s1 = 0, s2 = 0, s3 = 0.*\" \"bitfield uniqueness; flags.u1 = 1\"\n     continue_test break1 \"#2\"\n-    if [gdb_test \"print flags\" \".*u1 = 0, u2 = 0, u3 = 0, s1 = 0, s2 = 1, s3 = 0.*\" \"bitfield uniqueness; flags.s2 = 1\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"print flags\" \".*u1 = 0, u2 = 0, u3 = 0, s1 = 0, s2 = 1, s3 = 0.*\" \"bitfield uniqueness; flags.s2 = 1\"\n     continue_test break1 \"#3\"\n-    if [gdb_test \"print flags\" \".*u1 = 0, u2 = 1, u3 = 0, s1 = 0, s2 = 0, s3 = 0.*\" \"bitfield uniqueness; flags.u2 = 1\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"print flags\" \".*u1 = 0, u2 = 1, u3 = 0, s1 = 0, s2 = 0, s3 = 0.*\" \"bitfield uniqueness; flags.u2 = 1\"\n     continue_test break1 \"#4\"\n-    if [gdb_test \"print flags\" \".*u1 = 0, u2 = 0, u3 = 0, s1 = 0, s2 = 0, s3 = 1.*\" \"bitfield uniqueness; flags.s3 = 1\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"print flags\" \".*u1 = 0, u2 = 0, u3 = 0, s1 = 0, s2 = 0, s3 = 1.*\" \"bitfield uniqueness; flags.s3 = 1\"\n     continue_test break1 \"#5\"\n-    if [gdb_test \"print flags\" \".*u1 = 0, u2 = 0, u3 = 1, s1 = 0, s2 = 0, s3 = 0.*\" \"bitfield uniqueness; flags.u3 = 1\"] {\n-\tgdb_suppress_tests\n-    }\n-    gdb_stop_suppressing_tests\n+    gdb_test \"print flags\" \".*u1 = 0, u2 = 0, u3 = 1, s1 = 0, s2 = 0, s3 = 0.*\" \"bitfield uniqueness; flags.u3 = 1\"\n }\n \n \n@@ -119,16 +100,11 @@ proc bitfield_containment {} {\n \n     # If program is compiled with Sun CC, signed fields print out as their\n     # actual sizes; if compiled with gcc, they print out as 0xffffffff.\n-    if [gdb_test \"print/x flags\" \"= {u1 = 0x7fff, u2 = 0x0, u3 = 0xffff, s1 = 0x0, s2 = 0x(1ffffffff|f*), s3 = 0x0}\" \"bitfield containment; flags.u1, flags.u3, and flags.s3 to all 1s\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"print/x flags\" \"= {u1 = 0x7fff, u2 = 0x0, u3 = 0xffff, s1 = 0x0, s2 = 0x(1ffffffff|f*), s3 = 0x0}\" \"bitfield containment; flags.u1, flags.u3, and flags.s3 to all 1s\"\n \n     continue_test break2 \"#1\"\n \n-    if [gdb_test \"print/x flags\" \"= {u1 = 0x0, u2 = 0x1ffffffff, u3 = 0x0, s1 = 0x(7fff|f*), s2 = 0x0, s3 = 0xf*}\" \"bitfield containment; flags.u2, flags.s1, flags.s2 to all 1s\"] {\n-\tgdb_suppress_tests\n-    }\n-    gdb_stop_suppressing_tests\n+    gdb_test \"print/x flags\" \"= {u1 = 0x0, u2 = 0x1ffffffff, u3 = 0x0, s1 = 0x(7fff|f*), s2 = 0x0, s3 = 0xf*}\" \"bitfield containment; flags.u2, flags.s1, flags.s2 to all 1s\"\n }\n \n # Test unsigned bitfields for unsignedness and range.\n@@ -143,10 +119,7 @@ proc bitfield_unsignedness {} {\n \n     start_test break3\n \n-    if [gdb_test \"print flags\" \".*u1 = 32767, u2 = 8589934591, u3 = 65535, s1 = 0, s2 = 0, s3 = 0.*\" \"maximum unsigned bitfield values\"] {\n-\tgdb_suppress_tests\n-    }\n-    gdb_stop_suppressing_tests\n+    gdb_test \"print flags\" \".*u1 = 32767, u2 = 8589934591, u3 = 65535, s1 = 0, s2 = 0, s3 = 0.*\" \"maximum unsigned bitfield values\"\n }\n \n #\n@@ -165,9 +138,7 @@ proc bitfield_signedness {} {\n \n     start_test break4\n \n-    if [gdb_test \"print flags\" \"= {.*u1 = 0, u2 = 0, u3 = 0, s1 = 16383, s2 = 4294967295, s3 = 32767.*}\" \"maximum signed bitfield values\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"print flags\" \"= {.*u1 = 0, u2 = 0, u3 = 0, s1 = 16383, s2 = 4294967295, s3 = 32767.*}\" \"maximum signed bitfield values\"\n \n     continue_test break4 \"#1\"\n \n@@ -185,15 +156,12 @@ proc bitfield_signedness {} {\n \t}\n \t-re \".*$gdb_prompt $\" {\n \t    fail \"determining signed-ness of bitfields\"\n-\t    gdb_suppress_tests\n \t}\n     }\n \n     set test \"most negative signed bitfield values\"\n     if $has_signed_bitfields then {\n-        if [gdb_test \"print flags\" \"u1 = 0, u2 = 0, u3 = 0, s1 = -16384, s2 = -4294967296, s3 = -32768.*\" $test ] {\n-            gdb_suppress_tests\n-        }\n+        gdb_test \"print flags\" \"u1 = 0, u2 = 0, u3 = 0, s1 = -16384, s2 = -4294967296, s3 = -32768.*\" $test\n     } else {\n \tunsupported $test\n     }\n@@ -202,14 +170,10 @@ proc bitfield_signedness {} {\n \n     set test \"signed bitfields containing -1\"\n     if $has_signed_bitfields then {\n-\tif [gdb_test \"print flags\" \"u1 = 0, u2 = 0, u3 = 0, s1 = -1, s2 = -1, s3 = -1.*\" $test ] {\n-\t    gdb_suppress_tests\n-\t}\n+\tgdb_test \"print flags\" \"u1 = 0, u2 = 0, u3 = 0, s1 = -1, s2 = -1, s3 = -1.*\" $test\n     } else {\n \tunsupported $test\n     }\n-\n-    gdb_stop_suppressing_tests\n }\n \n \n@@ -229,7 +193,6 @@ proc bitfield_set {} {\n     gdb_test_multiple \"print flags.u2 = 0x100000000\" $test {\n \t-re \"warning: Value does not fit.*$gdb_prompt $\" {\n \t    fail \"$test\"\n-\t    gdb_suppress_tests\n \t}\n \t-re \"= 4294967296.*$gdb_prompt $\" {\n \t    pass \"$test\"\n@@ -240,23 +203,19 @@ proc bitfield_set {} {\n     gdb_test_multiple \"print flags.s2 = 0x80000000\" $test {\n \t-re \"warning: Value does not fit.*$gdb_prompt $\" {\n \t    fail \"$test\"\n-\t    gdb_suppress_tests\n \t}\n \t-re \"= 2147483648.*$gdb_prompt $\" {\n \t    pass \"$test\"\n \t}\n     }\n \n-    if [gdb_test \"print flags\" \"u1 = 0, u2 = 4294967296, u3 = 0, s1 = 0, s2 = 2147483648, s3 = 0.*\" \"long long bitfield values after set\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"print flags\" \"u1 = 0, u2 = 4294967296, u3 = 0, s1 = 0, s2 = 2147483648, s3 = 0.*\" \"long long bitfield values after set\"\n \n     set test \"set long long signed bitfield negative\"\n     if $has_signed_bitfields then {\n \tgdb_test_multiple \"print flags.s2 = -1\" $test {\n \t    -re \"warning: Value does not fit.*$gdb_prompt $\" {\n \t\tfail \"$test\"\n-\t\tgdb_suppress_tests\n \t    }\n \t    -re \"= -1.*$gdb_prompt $\" {\n \t\tpass \"$test\"\n@@ -268,14 +227,10 @@ proc bitfield_set {} {\n \n     set test  \"long long bitfield values after set negative\"\n     if $has_signed_bitfields then {\n-\tif [gdb_test \"print flags\" \"u1 = 0, u2 = 4294967296, u3 = 0, s1 = 0, s2 = -1, s3 = 0.*\" $test] {\n-\t    gdb_suppress_tests\n-\t}\n+\tgdb_test \"print flags\" \"u1 = 0, u2 = 4294967296, u3 = 0, s1 = 0, s2 = -1, s3 = 0.*\" $test\n     } else {\n \tunsupported $test\n     }\n-\n-    gdb_stop_suppressing_tests\n }\n \n clean_restart ${binfile}"
    },
    {
      "sha": "c896a488f9478273193165bd2284fbea3bea8d92",
      "filename": "gdb/testsuite/gdb.base/break.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/break.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/break.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/break.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -687,22 +687,22 @@ proc test_next_with_recursion {} {\n \n     # Continue until we call factorial recursively with 5.\n \n-    if [gdb_test \"continue\" \\\n+    gdb_test \"continue\" \\\n \t\"Continuing.*Break.* factorial .value=5. .*\" \\\n-\t\"continue to factorial(5)\"] then { gdb_suppress_tests }\n+\t\"continue to factorial(5)\"\n \n     # Do a backtrace just to confirm how many levels deep we are.\n \n-    if [gdb_test \"backtrace\" \\\n+    gdb_test \"backtrace\" \\\n \t\"#0\\[ \\t\\]+ factorial .value=5..*\" \\\n-\t\"backtrace from factorial(5)\"] then { gdb_suppress_tests }\n+\t\"backtrace from factorial(5)\"\n \n     # Now a \"next\" should position us at the recursive call, which\n     # we will be performing with 4.\n \n-    if [gdb_test \"next\" \\\n+    gdb_test \"next\" \\\n \t\".* factorial .value - 1.;.*\" \\\n-\t\"next to recursive call\"] then { gdb_suppress_tests }\n+\t\"next to recursive call\"\n \n     # Disable the breakpoint at the entry to factorial by deleting them all.\n     # The \"next\" should run until we return to the next line from this\n@@ -734,14 +734,13 @@ proc test_next_with_recursion {} {\n     # OK, we should be back in the same stack frame we started from.\n     # Do a backtrace just to confirm.\n \n-    set result [gdb_test \"backtrace\" \\\n+    gdb_test \"backtrace\" \\\n \t    \"#0\\[ \\t\\]+ factorial .value=120.*\\r\\n#1\\[ \\t\\]+ \\[0-9a-fx\\]+ in factorial .value=6..*\" \\\n-\t    \"backtrace from factorial(5.1)\"]\n-    if { $result != 0 } { gdb_suppress_tests }\n+\t    \"backtrace from factorial(5.1)\"\n \n-    if [target_info exists gdb,noresults] { gdb_suppress_tests }\n-  gdb_continue_to_end \"recursive next test\"\n-   gdb_stop_suppressing_tests\n+    if { ![target_info exists gdb,noresults] } {\n+\tgdb_continue_to_end \"recursive next test\"\n+    }\n }\n \n test_next_with_recursion"
    },
    {
      "sha": "6b712a39ac6c9742645737ca7e95344f3dd3f733",
      "filename": "gdb/testsuite/gdb.base/call-sc.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/call-sc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/call-sc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/call-sc.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -68,7 +68,7 @@ proc start_scalars_test { type } {\n \n     # Advance to main\n     if { ![runto_main] } then {\n-\tgdb_suppress_tests\n+\treturn\n     }\n \n     # Get the debug format"
    },
    {
      "sha": "71c39daee14da6d78d71379630ad3d1eeb6e1b10",
      "filename": "gdb/testsuite/gdb.base/callfuncs.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/callfuncs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/callfuncs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/callfuncs.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -332,7 +332,7 @@ proc rerun_and_prepare {} {\n     with_test_prefix \"rerun number ${rerun_count}\" {\n \n \tif { ![runto_main] } {\n-\t    gdb_suppress_tests\n+\t    return\n \t}\n \n \tgdb_test_no_output \"set language c\""
    },
    {
      "sha": "379794a1b31b33c6663450d0a1afe571adbb5b7e",
      "filename": "gdb/testsuite/gdb.base/dfp-test.exp",
      "status": "modified",
      "additions": 24,
      "deletions": 24,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/dfp-test.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/dfp-test.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/dfp-test.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -130,24 +130,24 @@ proc d128_set_tests {} {\n # of finite numbers, infinite and NaN, and also the setting of different\n # decimal value.\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*Positive infd32.*\" \\\n-    \"next after initializing d32\"] then { gdb_suppress_tests }\n+    \"next after initializing d32\"\n gdb_test \"print d32\" \"1.2345\" \"d32 is initialized to 1.2345\"\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*Negative infd32.*\" \\\n-    \"next after assigning builtin infinity to d32\"] then { gdb_suppress_tests }\n+    \"next after assigning builtin infinity to d32\"\n gdb_test \"print d32\" \"Infinity\" \"d32 is positive Infinity\"\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*__builtin_nand32.*\" \\\n-    \"next after assigning negative builtin infinity to d32\"] then { gdb_suppress_tests }\n+    \"next after assigning negative builtin infinity to d32\"\n gdb_test \"print d32\" \"-Infinity\" \"d32 is negative Infinity\"\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*d64 = 1.2345.*\" \\\n-    \"next after assigning builtin NaN to d32\"] then { gdb_suppress_tests }\n+    \"next after assigning builtin NaN to d32\"\n gdb_test \"print d32\" \"NaN\" \"d32 is NaN\"\n \n d32_set_tests\n@@ -157,24 +157,24 @@ d32_set_tests\n # of finite number, infinite and NaN, and also the setting of different\n # decimal value.\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*Positive infd64.*\" \\\n-    \"next after initializing d64\"] then { gdb_suppress_tests }\n+    \"next after initializing d64\"\n gdb_test \"print d64\" \"1.2345\" \"d64 is initialized to 1.2345\"\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*Negative infd64.*\" \\\n-    \"next after assigning builtin infinity to d64\"] then { gdb_suppress_tests }\n+    \"next after assigning builtin infinity to d64\"\n gdb_test \"print d64\" \"Infinity\" \"d64 is positive Infinity\"\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*__builtin_nand64.*\" \\\n-    \"next after assigning negative builtin infinity to d64\"] then { gdb_suppress_tests }\n+    \"next after assigning negative builtin infinity to d64\"\n gdb_test \"print d64\" \"-Infinity\" \"d64 is negative Infinity\"\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*d128 = 1.2345.*\" \\\n-    \"next after assigning builtin NaN to d64\"] then { gdb_suppress_tests }\n+    \"next after assigning builtin NaN to d64\"\n gdb_test \"print d64\" \"NaN\" \"d64 is NaN\"\n \n d64_set_tests\n@@ -184,26 +184,26 @@ d64_set_tests\n # of finite number, infinite and NaN, and also the setting of different\n # decimal value.\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*Positive infd128.*\" \\\n-    \"next after initializing d128\"] then { gdb_suppress_tests }\n+    \"next after initializing d128\"\n gdb_test \"print d128\" \"1.2345\" \"d128 is initialized to 1.2345\"\n \n d128_set_tests\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*Negative infd128.*\" \\\n-    \"next after assigning builtin infinity to d128\"] then { gdb_suppress_tests }\n+    \"next after assigning builtin infinity to d128\"\n gdb_test \"print d128\" \"Infinity\" \"d128 is positive Infinity\"\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*__builtin_nand128.*\" \\\n-    \"next after assigning negative builtin infinity to d128\"] then { gdb_suppress_tests }\n+    \"next after assigning negative builtin infinity to d128\"\n gdb_test \"print d128\" \"-Infinity\" \"d128 is negative Infinity\"\n \n-if [gdb_test \"next\" \\\n+gdb_test \"next\" \\\n     \".*arg0_32.*\" \\\n-    \"next after assigning builtin NaN to d128\"] then { gdb_suppress_tests }\n+    \"next after assigning builtin NaN to d128\"\n gdb_test \"print d128\" \"NaN\" \"d128 is NaN\"\n \n # The following tests are intended to verify that gdb can correctly handle"
    },
    {
      "sha": "86932a575fbc5b9bff5cc911de833eda9895832a",
      "filename": "gdb/testsuite/gdb.base/endian.exp",
      "status": "modified",
      "additions": 14,
      "deletions": 22,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/endian.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/endian.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/endian.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -41,54 +41,46 @@ gdb_test \"set endian auto\" \"$en_auto \\\\\\(currently big endian\\\\\\)\\\\.\" \\\n     \"auto target endianness big\"\n \n if { [build_executable ${testfile}.exp $testfile] } {\n-    gdb_suppress_entire_file \"$pf_prefix cannot build executable\"\n+    untested \"failed to compile\"\n+    return\n }\n \n-if { [gdb_file_cmd $binfile] } {\n-    gdb_suppress_entire_file \"$pf_prefix cannot select executable\"\n-}\n+gdb_file_cmd $binfile\n+\n set test \"get target endianness\"\n if { [gdb_test_multiple \"show endian\" \"$test\" {\n     -re \"$en_auto \\\\\\(currently \\(big\\|little\\) endian\\\\\\)\\\\..*$gdb_prompt\" {\n \tset endian $expect_out(1,string)\n \tpass \"$test\"\n     }\n }] } {\n-    gdb_suppress_entire_file \\\n-\t\"$pf_prefix cannot determine executable endianness\"\n-    set endian \"\"\n+    return\n }\n \n # Now check that the automatic endianness is updated\n # according to the executable selected.\n-if { [gdb_unload] } {\n-    gdb_suppress_entire_file \"$pf_prefix cannot unselect executable\"\n-}\n+gdb_unload\n gdb_test \"set endian big\" \"$en_set big endian\\\\.\" \\\n     \"override target endianness big\"\n gdb_test \"set endian auto\" \"$en_auto \\\\\\(currently big endian\\\\\\)\\\\.\" \\\n     \"override auto target endianness big\"\n-if { [gdb_file_cmd $binfile] } {\n-    gdb_suppress_entire_file \"$pf_prefix cannot select executable\"\n-}\n+\n+gdb_file_cmd $binfile\n gdb_test \"show endian\" \"$en_auto \\\\\\(currently $endian endian\\\\\\)\\\\.\" \\\n     \"previously big default executable endianness\"\n-if { [gdb_unload] } {\n-    gdb_suppress_entire_file \"$pf_prefix cannot unselect executable\"\n-}\n+\n+gdb_unload\n gdb_test \"show endian\" \"$en_auto \\\\\\(currently $endian endian\\\\\\)\\\\.\" \\\n     \"previously big default no executable endianness\"\n gdb_test \"set endian little\" \"$en_set little endian\\\\.\" \\\n     \"override target endianness little\"\n gdb_test \"set endian auto\" \"$en_auto \\\\\\(currently little endian\\\\\\)\\\\.\" \\\n     \"override auto target endianness little\"\n-if { [gdb_file_cmd $binfile] } {\n-    gdb_suppress_entire_file \"$pf_prefix cannot select executable\"\n-}\n+\n+gdb_file_cmd $binfile\n gdb_test \"show endian\" \"$en_auto \\\\\\(currently $endian endian\\\\\\)\\\\.\" \\\n     \"previously little default executable endianness\"\n-if { [gdb_unload] } {\n-    gdb_suppress_entire_file \"$pf_prefix cannot unselect executable\"\n-}\n+\n+gdb_unload\n gdb_test \"show endian\" \"$en_auto \\\\\\(currently $endian endian\\\\\\)\\\\.\" \\\n     \"previously little default no executable endianness\""
    },
    {
      "sha": "50272d133a24e6388e0d6b4bfb82b1c463f99b89",
      "filename": "gdb/testsuite/gdb.base/exprs.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/exprs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/exprs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/exprs.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -47,15 +47,10 @@ proc test_expr { args } {\n     }\n     set last_ent [expr [llength $args] - 1]\n     set testname [lindex $args $last_ent]\n-    if [gdb_test [lindex $args 0] \".*\" \"$testname (setup)\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test [lindex $args 0] \".*\" \"$testname (setup)\"\n     for {set x 1} {$x < $last_ent} {set x [expr $x + 2]} {\n-\tif [gdb_test [lindex $args $x] [lindex $args [expr $x + 1]] \"$testname ([lindex $args $x])\"] {\n-\t    gdb_suppress_tests\n-\t}\n+\tgdb_test [lindex $args $x] [lindex $args [expr $x + 1]] \"$testname ([lindex $args $x])\"\n     }\n-    gdb_stop_suppressing_tests\n }\n #\n # test expressions with \"char\" types"
    },
    {
      "sha": "7031e02b0e5b696fb2078612165e5b2724564fd1",
      "filename": "gdb/testsuite/gdb.base/funcargs.exp",
      "status": "modified",
      "additions": 44,
      "deletions": 112,
      "changes": 156,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/funcargs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/funcargs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/funcargs.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -65,25 +65,16 @@ proc integral_args {} {\n     gdb_test \"print l \" \".* = 3\" \"print l after run to call0a\"\n \n     # Continue; should stop at call0b and print actual arguments.\n-    if [gdb_test \"cont\" \".* call0b \\\\(s=1, i=2, l=3, c=97 'a'\\\\) .*\" \"continue to call0b\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call0b \\\\(s=1, i=2, l=3, c=97 'a'\\\\) .*\" \"continue to call0b\"\n \n     # Continue; should stop at call0c and print actual arguments.\n-    if [gdb_test \"cont\" \".* call0c \\\\(i=2, l=3, c=97 'a', s=1\\\\) .*\" \"continue to call0c\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call0c \\\\(i=2, l=3, c=97 'a', s=1\\\\) .*\" \"continue to call0c\"\n \n     # Continue; should stop at call0d and print actual arguments.\n-    if [gdb_test \"cont\" \".* call0d \\\\(l=3, c=97 'a', s=1, i=2\\\\) .*\" \"continue to call0d\";] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call0d \\\\(l=3, c=97 'a', s=1, i=2\\\\) .*\" \"continue to call0d\"\n \n     # Continue; should stop at call0e and print actual arguments.\n-    if [gdb_test \"cont\" \".* call0e \\\\(c1=97 'a', l=3, c2=97 'a', i=2, c3=97 'a', s=1, c4=97 'a', c5=97 'a'\\\\) .*\" \"continue to call0e\" ] {\n-\tgdb_suppress_tests\n-    }\n-    gdb_stop_suppressing_tests\n+    gdb_test \"cont\" \".* call0e \\\\(c1=97 'a', l=3, c2=97 'a', i=2, c3=97 'a', s=1, c4=97 'a', c5=97 'a'\\\\) .*\" \"continue to call0e\"\n }\n \n #\n@@ -114,27 +105,18 @@ proc unsigned_integral_args {} {\n     gdb_test \"print us\" \".* = 6\"\n     gdb_test \"print ui\" \".* = 7\"\n     gdb_test \"print ul\" \".* = 8\"\n-    \n+\n     # Continue; should stop at call1b and print actual arguments.\n-    if [gdb_test \"cont\" \".* call1b \\\\(us=6, ui=7, ul=8, uc=98 'b'\\\\) .*\" \"continue to call1b\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call1b \\\\(us=6, ui=7, ul=8, uc=98 'b'\\\\) .*\" \"continue to call1b\"\n \n     # Continue; should stop at call1c and print actual arguments.\n-    if [gdb_test \"cont\" \".* call1c \\\\(ui=7, ul=8, uc=98 'b', us=6\\\\) .*\" \"continue to call1c\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call1c \\\\(ui=7, ul=8, uc=98 'b', us=6\\\\) .*\" \"continue to call1c\"\n \n     # Continue; should stop at call1d and print actual arguments.\n-    if [gdb_test \"cont\" \".* call1d \\\\(ul=8, uc=98 'b', us=6, ui=7\\\\) .*\" \"continue to call1d\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call1d \\\\(ul=8, uc=98 'b', us=6, ui=7\\\\) .*\" \"continue to call1d\"\n \n     # Continue; should stop at call1e and print actual arguments.\n-    if [gdb_test \"cont\" \".* call1e \\\\(uc1=98 'b', ul=8, uc2=98 'b', ui=7, uc3=98 'b', us=6, uc4=98 'b', uc5=98 'b'\\\\) .*\" \"continue to call1e\"] {\n-\tgdb_suppress_tests\n-    }\n-    gdb_stop_suppressing_tests\n+    gdb_test \"cont\" \".* call1e \\\\(uc1=98 'b', ul=8, uc2=98 'b', ui=7, uc3=98 'b', us=6, uc4=98 'b', uc5=98 'b'\\\\) .*\" \"continue to call1e\"\n }\n \n #\n@@ -183,50 +165,33 @@ proc float_and_integral_args {} {\n \n     setup_xfail \"rs6000-*-*\"\n     # Continue; should stop at call2b and print actual arguments.\n-    if [gdb_test \"cont\" \".* call2b \\\\(f1=4, s=1, d1=5, i=2, f2=4, l=3, d2=5, c=97 'a'\\\\) .*\" \"continue to call2b\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call2b \\\\(f1=4, s=1, d1=5, i=2, f2=4, l=3, d2=5, c=97 'a'\\\\) .*\" \"continue to call2b\"\n \n     # Continue; should stop at call2c and print actual arguments.\n-    if [gdb_test \"cont\" \".* call2c \\\\(s=1, d1=5, i=2, f2=4, l=3, d2=5, c=97 'a', f1=4\\\\) .*\" \"continue to call2c\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call2c \\\\(s=1, d1=5, i=2, f2=4, l=3, d2=5, c=97 'a', f1=4\\\\) .*\" \"continue to call2c\"\n \n     # Continue; should stop at call2d and print actual arguments.\n-    if [gdb_test \"cont\" \".* call2d \\\\(d1=5, i=2, f2=4, l=3, d2=5, c=97 'a', f1=4, s=1\\\\) .*\" \"continue to call2d\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call2d \\\\(d1=5, i=2, f2=4, l=3, d2=5, c=97 'a', f1=4, s=1\\\\) .*\" \"continue to call2d\"\n \n     # Continue; should stop at call2e and print actual arguments.\n-    if [gdb_test \"cont\" \".* call2e \\\\(i=2, f2=4, l=3, d2=5, c=97 'a', f1=4, s=1, d1=5\\\\) .*\" \"continue to call2e\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call2e \\\\(i=2, f2=4, l=3, d2=5, c=97 'a', f1=4, s=1, d1=5\\\\) .*\" \"continue to call2e\"\n \n     # Continue; should stop at call2f and print actual arguments.\n-    if [gdb_test \"cont\" \".* call2f \\\\(f2=4, l=3, d2=5, c=97 'a', f1=4, s=1, d1=5, i=2\\\\) .*\" \"continue to call2f\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call2f \\\\(f2=4, l=3, d2=5, c=97 'a', f1=4, s=1, d1=5, i=2\\\\) .*\" \"continue to call2f\"\n \n     # Continue; should stop at call2g and print actual arguments.\n-    if [gdb_test \"cont\" \".* call2g \\\\(l=3, d2=5, c=97 'a', f1=4, s=1, d1=5, i=2, f2=4\\\\) .*\" \"continue to call2g\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call2g \\\\(l=3, d2=5, c=97 'a', f1=4, s=1, d1=5, i=2, f2=4\\\\) .*\" \"continue to call2g\"\n \n     # Continue; should stop at call2h and print actual arguments.\n-    if [gdb_test \"cont\" \".* call2h \\\\(d2=5, c=97 'a', f1=4, s=1, d1=5, i=2, f2=4, l=3\\\\) .*\" \"continue to call2h\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call2h \\\\(d2=5, c=97 'a', f1=4, s=1, d1=5, i=2, f2=4, l=3\\\\) .*\" \"continue to call2h\"\n \n     # monitor only allows 8 breakpoints; w89k board allows 10, so\n     # break them up into two groups.\n     delete_breakpoints\n     gdb_breakpoint call2i\n \n     # Continue; should stop at call2i and print actual arguments.\n-    if [gdb_test \"cont\" \".* call2i \\\\(c1=97 'a', f1=4, c2=97 'a', c3=97 'a', d1=5, c4=97 'a', c5=97 'a', c6=97 'a', f2=4, s=1, c7=97 'a', d2=5\\\\) .*\" \"continue to call2i\"] {\n-\tgdb_suppress_tests\n-    }\n-    gdb_stop_suppressing_tests\n+    gdb_test \"cont\" \".* call2i \\\\(c1=97 'a', f1=4, c2=97 'a', c3=97 'a', d1=5, c4=97 'a', c5=97 'a', c6=97 'a', f2=4, s=1, c7=97 'a', d2=5\\\\) .*\" \"continue to call2i\"\n }\n \n \n@@ -322,9 +287,7 @@ proc pointer_args {} {\n \n     # Continue; should stop at call3b and print actual arguments.\n     # Try dereferencing the arguments.\n-    if [gdb_test \"cont\" \".* call3b \\\\(ucp=$hex <uc> \\\"b.*\\\", usp=$hex <us>, uip=$hex <ui>, ulp=$hex <ul>\\\\) .*\" \"continue to call3b\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call3b \\\\(ucp=$hex <uc> \\\"b.*\\\", usp=$hex <us>, uip=$hex <ui>, ulp=$hex <ul>\\\\) .*\" \"continue to call3b\"\n \n     gdb_test \"print *ucp\" \".* = 98 'b'\"\n     gdb_test \"print *usp\" \".* = 6\"\n@@ -333,15 +296,10 @@ proc pointer_args {} {\n \n     # Continue; should stop at call3c and print actual arguments.\n     # Try dereferencing the arguments.\n-    if [gdb_test \"cont\" \".* call3c \\\\(fp=$hex <f>, dp=$hex <d>\\\\) .*\" \"continue to call3c\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \".* call3c \\\\(fp=$hex <f>, dp=$hex <d>\\\\) .*\" \"continue to call3c\"\n \n     gdb_test \"print *fp\" \".* = 4\"\n     gdb_test \"print *dp\" \".* = 5\"\n-\n-#    pass \"locate actual args, pointer types\"\n-    gdb_stop_suppressing_tests\n }\n \n #\n@@ -391,7 +349,6 @@ proc structs_by_reference {} {\n     }\n \n     pass \"locate actual args, structs/unions passed by reference\"\n-    gdb_stop_suppressing_tests\n }\n \n #\n@@ -452,8 +409,6 @@ proc structs_by_value {} {\n     } else {\n \tfail \"print un (unknown case)\"\n     }\n-\n-    gdb_stop_suppressing_tests\n }\n \n #\n@@ -500,81 +455,72 @@ proc discard_and_shuffle {} {\n \n     gdb_continue call6b\n \n-    if [gdb_test_sequence \"backtrace 100\" \"backtrace from call6b\" {\n+    gdb_test_sequence \"backtrace 100\" \"backtrace from call6b\" {\n \t\"\\[\\r\\n\\]#0 .* call6b \\\\(s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#1 .* call6a \\\\(c=97 'a', s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#2 .* main \\\\(.*\\\\) at \"\n-    } ] {\n-\tgdb_suppress_tests\n     }\n \n     # Continue; should stop at call6c and print actual arguments.\n     # Print backtrace.\n \n     gdb_continue call6c\n \n-    if [gdb_test_sequence \"backtrace 100\" \"backtrace from call6c\" {\n+    gdb_test_sequence \"backtrace 100\" \"backtrace from call6c\" {\n \t\"\\[\\r\\n\\]#0 .* call6c \\\\(i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#1 .* call6b \\\\(s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#2 .* call6a \\\\(c=97 'a', s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#3 .* main \\\\(.*\\\\) at \"\n-    } ] {\n-\tgdb_suppress_tests\n     }\n+\n     # Continue; should stop at call6d and print actual arguments.\n     # Print backtrace.\n \n     gdb_continue call6d\n \n-    if [gdb_test_sequence \"backtrace 100\" \"backtrace from call6d\" {\n+    gdb_test_sequence \"backtrace 100\" \"backtrace from call6d\" {\n \t\"\\[\\r\\n\\]#0 .* call6d \\\\(l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#1 .* call6c \\\\(i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#2 .* call6b \\\\(s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#3 .* call6a \\\\(c=97 'a', s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#4 .* main \\\\(.*\\\\) at \"\n-    } ] {\n-\tgdb_suppress_tests\n     }\n \n     # Continue; should stop at call6e and print actual arguments.\n     # Print backtrace.\n \n     gdb_continue call6e\n \n-    if [gdb_test_sequence \"backtrace 100\" \"backtrace from call6e\" {\n+    gdb_test_sequence \"backtrace 100\" \"backtrace from call6e\" {\n \t\"\\[\\r\\n\\]#0 .* call6e \\\\(f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#1 .* call6d \\\\(l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#2 .* call6c \\\\(i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#3 .* call6b \\\\(s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#4 .* call6a \\\\(c=97 'a', s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#5 .* main \\\\(.*\\\\) at \"\n-    } ] {\n-\tgdb_suppress_tests\n     }\n \n     # Continue; should stop at call6f and print actual arguments.\n     # Print backtrace.\n \n     gdb_continue call6f\n \n-    if [gdb_test_sequence \"backtrace 100\" \"backtrace from call6f\" {\n+    gdb_test_sequence \"backtrace 100\" \"backtrace from call6f\" {\n \t\"\\[\\r\\n\\]#0 .* call6f \\\\(d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#1 .* call6e \\\\(f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#2 .* call6d \\\\(l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#3 .* call6c \\\\(i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#4 .* call6b \\\\(s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#5 .* call6a \\\\(c=97 'a', s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#6 .* main \\\\(.*\\\\) at \"\n-    } ] {\n-\tgdb_suppress_tests\n     }\n \n     # Continue; should stop at call6g and print actual arguments.\n     # Print backtrace.\n \n     gdb_continue call6g\n \n-    if [gdb_test_sequence \"backtrace 100\" \"backtrace from call6g\" {\n+    gdb_test_sequence \"backtrace 100\" \"backtrace from call6g\" {\n \t\"\\[\\r\\n\\]#0 .* call6g \\\\(uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#1 .* call6f \\\\(d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#2 .* call6e \\\\(f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n@@ -583,16 +529,14 @@ proc discard_and_shuffle {} {\n \t\"\\[\\r\\n\\]#5 .* call6b \\\\(s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#6 .* call6a \\\\(c=97 'a', s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#7 .* main \\\\(.*\\\\) at \"\n-    } ] {\n-\tgdb_suppress_tests\n     }\n \n     # Continue; should stop at call6h and print actual arguments.\n     # Print backtrace.\n \n     gdb_continue call6h\n \n-    if [gdb_test_sequence \"backtrace 100\" \"backtrace from call6h\" {\n+    gdb_test_sequence \"backtrace 100\" \"backtrace from call6h\" {\n \t\"\\[\\r\\n\\]#0 .* call6h \\\\(us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#1 .* call6g \\\\(uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#2 .* call6f \\\\(d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n@@ -602,8 +546,6 @@ proc discard_and_shuffle {} {\n \t\"\\[\\r\\n\\]#6 .* call6b \\\\(s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#7 .* call6a \\\\(c=97 'a', s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#8 .* main \\\\(.*\\\\) at \"\n-    } ] {\n-\tgdb_suppress_tests\n     }\n \n     # monitor only allows 8 breakpoints; w89k board allows 10, so\n@@ -618,7 +560,7 @@ proc discard_and_shuffle {} {\n \n     gdb_continue call6i\n \n-    if [gdb_test_sequence \"backtrace 100\" \"backtrace from call6i\" {\n+    gdb_test_sequence \"backtrace 100\" \"backtrace from call6i\" {\n \t\"\\[\\r\\n\\]#0 .* call6i \\\\(ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#1 .* call6h \\\\(us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#2 .* call6g \\\\(uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n@@ -629,16 +571,14 @@ proc discard_and_shuffle {} {\n \t\"\\[\\r\\n\\]#7 .* call6b \\\\(s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#8 .* call6a \\\\(c=97 'a', s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#9 .* main \\\\(.*\\\\) at \"\n-    } ] {\n-\tgdb_suppress_tests\n     }\n \n     # Continue; should stop at call6j and print actual arguments.\n     # Print backtrace.\n \n     gdb_continue call6j\n \n-    if [gdb_test_sequence \"backtrace 100\" \"backtrace from call6j\" {\n+    gdb_test_sequence \"backtrace 100\" \"backtrace from call6j\" {\n \t\"\\[\\r\\n\\]#0 .* call6j \\\\(ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#1 .* call6i \\\\(ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#2 .* call6h \\\\(us=6, ui=7, ul=8\\\\) \"\n@@ -650,15 +590,13 @@ proc discard_and_shuffle {} {\n \t\"\\[\\r\\n\\]#8 .* call6b \\\\(s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#9 .* call6a \\\\(c=97 'a', s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#10 .* main \\\\(.*\\\\) at \"\n-    } ] {\n-\tgdb_suppress_tests\n     }\n \n     # Continue; should stop at call6k and print actual arguments.\n     # Print backtrace.\n     gdb_continue call6k\n \n-    if [gdb_test_sequence \"backtrace 100\" \"backtrace from call6k\" {\n+    gdb_test_sequence \"backtrace 100\" \"backtrace from call6k\" {\n \t\"\\[\\r\\n\\]#0 .* call6k \\\\(\\\\) \"\n \t\"\\[\\r\\n\\]#1 .* call6j \\\\(ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#2 .* call6i \\\\(ui=7, ul=8\\\\) \"\n@@ -671,10 +609,7 @@ proc discard_and_shuffle {} {\n \t\"\\[\\r\\n\\]#9 .* call6b \\\\(s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#10 .* call6a \\\\(c=97 'a', s=1, i=2, l=3, f=4, d=5, uc=98 'b', us=6, ui=7, ul=8\\\\) \"\n \t\"\\[\\r\\n\\]#11 .* main \\\\(.*\\\\) at \"\n-    } ] {\n-\tgdb_suppress_tests\n     }\n-    gdb_stop_suppressing_tests\n }\n \n \n@@ -873,7 +808,6 @@ proc shuffle_round_robin {} {\n \t\"\\[\\r\\n\\]#10 .* call7a \\\\(c=97 'a', i=2, s=1, l=3, f=4, uc=98 'b', d=5, us=6, ul=8, ui=7\\\\) \"\n \t\"\\[\\r\\n\\]#11 .* main \\\\(.*\\\\) at \"\n     }\n-    gdb_stop_suppressing_tests\n }\n \n #\n@@ -905,7 +839,6 @@ proc recursive_structs_by_value {} {\n \t\"\\[\\r\\n\\]#6 .* test_struct_args \\\\(\\\\) \"\n \t\"\\[\\r\\n\\]#7 .* main \\\\(.*\\\\) at \"\n     }\n-    gdb_stop_suppressing_tests\n }\n \n #\n@@ -917,7 +850,9 @@ proc localvars_after_alloca { } {\n     global decimal\n     global gcc_compiled\n \n-    if { ! [ runto localvars_after_alloca ] } then { gdb_suppress_tests; }\n+    if { ![runto localvars_after_alloca] } {\n+\treturn\n+    }\n \n     # Print each arg as a double check to see if we can print\n     # them here as well as with backtrace.\n@@ -941,7 +876,6 @@ proc localvars_after_alloca { } {\n     gdb_test \"print l\" \" = 3\" \"print l in localvars_after_alloca\"\n \n     gdb_test \"backtrace 8\" \"#0.*localvars_after_alloca \\\\(c=97 'a', s=1, i=2, l=3\\\\).*#1.*main.*\" \"backtrace after alloca\"\n-    gdb_stop_suppressing_tests\n }\n \n proc call_after_alloca { } {\n@@ -950,7 +884,9 @@ proc call_after_alloca { } {\n     global decimal\n     global gcc_compiled\n \n-    if { ! [ runto call_after_alloca_subr ] } then { gdb_suppress_tests; }\n+    if { ![runto call_after_alloca_subr] } {\n+\treturn\n+    }\n \n     # Print each arg as a double check to see if we can print\n     # them here as well as with backtrace.\n@@ -964,7 +900,6 @@ proc call_after_alloca { } {\n \n     if {!$gcc_compiled} then { setup_xfail \"rs6000-*-*\" }\n     gdb_test \"backtrace 8\" \"#0.*call_after_alloca_subr \\\\(c=97 'a', s=1, i=2, l=3, uc=98 'b', us=11, ui=12, ul=13\\\\).*#1.*call_after_alloca \\\\(c=97 'a', s=1, i=2, l=3\\\\).*#2.*main.*\" \"backtrace from call_after_alloca_subr\"\n-    gdb_stop_suppressing_tests\n }\n \n #\n@@ -981,7 +916,9 @@ proc localvars_in_indirect_call { } {\n     # Can not use \"runto call0a\" as call0a is called several times\n     # during single run.  Instead stop in a marker function and\n     # take control from there.\n-    if { ! [ runto marker_indirect_call ] } then { gdb_suppress_tests; }\n+    if { ![runto marker_indirect_call] } {\n+\treturn\n+    }\n \n     # break on the next call to call0a, then delete all the breakpoints\n     # and start testing.\n@@ -1026,18 +963,15 @@ proc localvars_in_indirect_call { } {\n \t}\n \t-re \".*$gdb_prompt $\" {\n \t    fail \"finish from indirectly called function\"\n-\t    gdb_suppress_tests\n \t}\n-\tdefault { \n+\tdefault {\n \t    fail \"finish from indirectly called function\"\n-\t    gdb_suppress_tests\n \t}\n     }\n \n     if {!$gcc_compiled} then { setup_xfail \"rs6000-*-*\" }\n     gdb_test \"step\" \"call0a \\\\(c=97 'a', s=1, i=2, l=3\\\\).*\" \\\n \t\"stepping into indirectly called function\"\n-    gdb_stop_suppressing_tests\n }\n \n #\n@@ -1051,7 +985,9 @@ proc test_stepping_over_trampolines { } {\n     global decimal\n \n     # Stop in a marker function and take control from there.\n-    if { ! [ runto marker_call_with_trampolines ] } then { gdb_suppress_tests; }\n+    if { ![runto marker_call_with_trampolines] } {\n+\treturn\n+    }\n \n     # Cater for gdb stopping in midline, see comment for finish above.\n     gdb_test_multiple \"finish\" \"finish from marker_call_with_trampolines\" {\n@@ -1065,9 +1001,8 @@ proc test_stepping_over_trampolines { } {\n \t-re \".*$gdb_prompt $\" {\n \t    fail \"finish from marker_call_with_trampolines\"\n \t}\n-\tdefault { \n+\tdefault {\n \t    fail \"finish from marker_call_with_trampolines\"\n-\t    gdb_suppress_tests\n \t}\n     }\n \n@@ -1086,7 +1021,6 @@ proc test_stepping_over_trampolines { } {\n     gdb_test_multiple \"step\" \"stepping back to main from function called with trampolines\" {\n \t-re \"main .* at.*$gdb_prompt $\" {\n \t    pass \"stepping back to main from function called with trampolines\"\n-\t    gdb_suppress_tests\n \t}\n \t-re \"\\}.*End of call_with_trampolines.*$gdb_prompt $\" {\n \t    send_gdb \"step\\n\"\n@@ -1097,10 +1031,8 @@ proc test_stepping_over_trampolines { } {\n \t}\n \tdefault {\n \t    fail \"stepping back to main from function called with trampolines\"\n-\t    gdb_suppress_tests\n \t}\n     }\n-    gdb_stop_suppressing_tests\n }\n \n set prev_timeout $timeout"
    },
    {
      "sha": "cedc151027cf4938b96f8e06d46356f0873aa087",
      "filename": "gdb/testsuite/gdb.base/hbreak2.exp",
      "status": "modified",
      "additions": 13,
      "deletions": 14,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/hbreak2.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/hbreak2.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/hbreak2.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -439,28 +439,28 @@ proc test_next_with_recursion {} {\n     # Run until we call factorial with 6\n \n     gdb_run_cmd\n-    if [gdb_test \"\" \\\n+    gdb_test \"\" \\\n \t\"Break.* factorial .value=6. .*\" \\\n-\t\"run to factorial(6)\"] then { gdb_suppress_tests }\n+\t\"run to factorial(6)\"\n \n     # Continue until we call factorial recursively with 5.\n \n-    if [gdb_test \"continue\" \\\n+    gdb_test \"continue\" \\\n \t\"Continuing.*Break.* factorial .value=5. .*\" \\\n-\t\"continue to factorial(5)\"] then { gdb_suppress_tests }\n+\t\"continue to factorial(5)\"\n \n     # Do a backtrace just to confirm how many levels deep we are.\n \n-    if [gdb_test \"backtrace\" \\\n+    gdb_test \"backtrace\" \\\n \t\"#0\\[ \\t\\]+ factorial .value=5..*\" \\\n-\t\"backtrace from factorial(5)\"] then { gdb_suppress_tests }\n+\t\"backtrace from factorial(5)\"\n \n     # Now a \"next\" should position us at the recursive call, which\n     # we will be performing with 4.\n \n-    if [gdb_test \"next\" \\\n+    gdb_test \"next\" \\\n \t\".* factorial .value - 1.;.*\" \\\n-\t\"next to recursive call\"] then { gdb_suppress_tests }\n+\t\"next to recursive call\"\n \n     # Disable the breakpoint at the entry to factorial by deleting them all.\n     # The \"next\" should run until we return to the next line from this\n@@ -492,14 +492,13 @@ proc test_next_with_recursion {} {\n     # OK, we should be back in the same stack frame we started from.\n     # Do a backtrace just to confirm.\n \n-    set result [gdb_test \"backtrace\" \\\n+    gdb_test \"backtrace\" \\\n \t\"#0\\[ \\t\\]+ factorial .value=120.*\\r\\n#1\\[ \\t\\]+ \\[0-9a-fx\\]+ in factorial .value=6..*\" \\\n-\t\"backtrace from factorial(5.1)\"]\n-    if { $result != 0 } { gdb_suppress_tests }\n+\t\"backtrace from factorial(5.1)\"\n \n-    if [target_info exists gdb,noresults] { gdb_suppress_tests }\n-    gdb_continue_to_end \"recursive next test\"\n-    gdb_stop_suppressing_tests\n+    if { ![target_info exists gdb,noresults] } {\n+\tgdb_continue_to_end \"recursive next test\"\n+    }\n }\n \n test_next_with_recursion"
    },
    {
      "sha": "df854270cb07036bca876a22bbd9fb9a9e54789c",
      "filename": "gdb/testsuite/gdb.base/recurse.exp",
      "status": "modified",
      "additions": 12,
      "deletions": 25,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/recurse.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/recurse.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/recurse.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -37,11 +37,9 @@ proc recurse_tests {} {\n \t    \"set first instance watchpoint\"\n \n \t# Continue until initial set of b.\n-\tif [gdb_test \"continue\" \\\n+\tgdb_test \"continue\" \\\n \t    \"Continuing.*\\[Ww\\]atchpoint.*: b.*Old value = 0.*New value = 10.*\" \\\n-\t    \"continue to first instance watchpoint, first time\"] then {\n-\t    gdb_suppress_tests\n-\t}\n+\t    \"continue to first instance watchpoint, first time\"\n \n \t# Continue inward for a few iterations\n \tgdb_test \"continue\" \"Breakpoint.* recurse \\\\(a=9\\\\).*\" \\\n@@ -63,11 +61,9 @@ proc recurse_tests {} {\n \t    \"set second instance watchpoint\"\n \n \t# Continue until initial set of b (second instance).\n-\tif [gdb_test \"continue\" \\\n+\tgdb_test \"continue\" \\\n \t    \"Continuing.*\\[Ww\\]atchpoint.*: b.*Old value = 0.*New value = 5.*\"\\\n-\t    \"continue to second instance watchpoint, first time\"] then {\n-\tgdb_suppress_tests\n-\t}\n+\t    \"continue to second instance watchpoint, first time\"\n \n \t# Continue inward for a few iterations\n \tgdb_test \"continue\" \"Breakpoint.* recurse \\\\(a=4\\\\).*\" \\\n@@ -80,29 +76,23 @@ proc recurse_tests {} {\n \t    \"continue to recurse (a = 1)\"\n \n \t# Continue until second set of b (second instance).\n-\tif [gdb_test \"continue\" \\\n+\tgdb_test \"continue\" \\\n \t    \"Continuing.*\\[Ww\\]atchpoint.*: b.*Old value = 5.*New value = 120.*return.*\" \\\n-\t    \"continue to second instance watchpoint, second time\"] then { \n-\t    gdb_suppress_tests\n-\t}\n+\t    \"continue to second instance watchpoint, second time\"\n \n \t# Continue again.  We should have a watchpoint go out of scope now\n-\tif [gdb_test \"continue\" \\\n+\tgdb_test \"continue\" \\\n \t    \"Continuing.*\\[Ww\\]atchpoint.*deleted.*recurse \\\\(a=6\\\\) .*\" \\\n-\t    \"second instance watchpoint deleted when leaving scope\"] then {\n-\t    gdb_suppress_tests\n-\t}\n+\t    \"second instance watchpoint deleted when leaving scope\"\n \n \t# Continue until second set of b (first instance).\n \t# 24320 is allowed as the final value for b as that's the value\n \t# b would have on systems with 16bit integers.\n \t#\n \t# We could fix the test program to deal with this too.\n-\tif [gdb_test \"continue\" \\\n+\tgdb_test \"continue\" \\\n \t    \"Continuing.*\\[Ww\\]atchpoint.*b.*Old value = 10.*New value = \\(3628800|24320\\).*return.*\" \\\n-\t    \"continue to first instance watchpoint, second time\"] then {\n-\t    gdb_suppress_tests\n-\t}\n+\t    \"continue to first instance watchpoint, second time\"\n \n \t# Continue again.  We should have a watchpoint go out of scope now.\n \t#\n@@ -126,13 +116,10 @@ proc recurse_tests {} {\n \t# this basically by watching for the frame pointer to change.  When\n \t# the frame pointer changes, the test expects to be back in main, but\n \t# instead it is still in the epilogue of the callee.\n-\tif [gdb_test \"continue\" \\\n+\tgdb_test \"continue\" \\\n \t    \"Continuing.*\\[Ww\\]atchpoint.*deleted.*\\(main \\\\(\\\\) \\|21.*\\}\\).*\" \\\n-\t    \"first instance watchpoint deleted when leaving scope\"] then {\n-\t    gdb_suppress_tests\n-\t}\n+\t    \"first instance watchpoint deleted when leaving scope\"\n     }\n-    gdb_stop_suppressing_tests\n }\n \n # Preserve the old timeout, and set a new one that should be"
    },
    {
      "sha": "edf9811ad3b3076b12714930d1624335570ac1cd",
      "filename": "gdb/testsuite/gdb.base/scope.exp",
      "status": "modified",
      "additions": 56,
      "deletions": 228,
      "changes": 284,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/scope.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/scope.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/scope.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -48,107 +48,51 @@ proc test_at_main {} {\n     gdb_test \"next\" \"$decimal.*foo \\\\(\\\\);\" \"next over init0() in main\"\n \n     # Print scope0.c::filelocal, which is 1\n-\n-    if [gdb_test \"print filelocal\" \"\\\\\\$$decimal = 1\"] { \n-      gdb_suppress_tests\n-    }\n-\n-\n-    if [gdb_test \"print 'scope0.c'::filelocal\" \"\\\\\\$$decimal = 1\" \"print 'scope0.c'::filelocal at main\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print filelocal\" \"\\\\\\$$decimal = 1\"\n+    gdb_test \"print 'scope0.c'::filelocal\" \"\\\\\\$$decimal = 1\" \"print 'scope0.c'::filelocal at main\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal\"\n \n     # Print scope0.c::filelocal_bss, which is 101\n-\n-    if [gdb_test \"print filelocal_bss\" \"\\\\\\$$decimal = 101\"] { \n-      gdb_suppress_tests\n-    }\n-\n-\n-    if [gdb_test \"print 'scope0.c'::filelocal_bss\" \"\\\\\\$$decimal = 101\" \"print 'scope0.c'::filelocal_bss in test_at_main\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_bss\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print filelocal_bss\" \"\\\\\\$$decimal = 101\"\n+    gdb_test \"print 'scope0.c'::filelocal_bss\" \"\\\\\\$$decimal = 101\" \"print 'scope0.c'::filelocal_bss in test_at_main\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_bss\"\n \n     # Print scope0.c::filelocal_ro, which is 201\n \n     # No clue why the rs6000 fails this test.\n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print filelocal_ro\" \"\\\\\\$$decimal = 201\" \"print filelocal_ro in test_at_main\" ] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print filelocal_ro\" \"\\\\\\$$decimal = 201\" \"print filelocal_ro in test_at_main\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope0.c'::filelocal_ro\" \"\\\\\\$$decimal = 201\" \"print 'scope0.c'::filelocal_ro\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_ro\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope0.c'::filelocal_ro\" \"\\\\\\$$decimal = 201\" \"print 'scope0.c'::filelocal_ro\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_ro\"\n \n     # Print scope1.c::filelocal, which is 2\n-\n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::filelocal\" \"\\\\\\$$decimal = 2\" \"print 'scope1.c'::filelocal\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::filelocal\" \"\\\\\\$$decimal = 2\" \"print 'scope1.c'::filelocal\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal\"\n \n     # Print scope1.c::filelocal_bss, which is 102\n-\n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::filelocal_bss\" \"\\\\\\$$decimal = 102\" \"print 'scope1.c'::filelocal_bss\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal_bss\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::filelocal_bss\" \"\\\\\\$$decimal = 102\" \"print 'scope1.c'::filelocal_bss\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal_bss\"\n \n     # Print scope1.c::filelocal_ro, which is 202\n-\n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::filelocal_ro\" \"\\\\\\$$decimal = 202\" \"print 'scope1.c'::filelocal_ro\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal_ro\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::filelocal_ro\" \"\\\\\\$$decimal = 202\" \"print 'scope1.c'::filelocal_ro\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal_ro\"\n \n     # Print scope1.c::foo::funclocal, which is 3\n-\n-    if [gdb_test \"print foo::funclocal\" \"\\\\\\$$decimal = 3\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print foo::funclocal\" \"\\\\\\$$decimal = 3\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::foo::funclocal\" \"\\\\\\$$decimal = 3\" \"print 'scope1.c'::foo::funclocal\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::foo::funclocal\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::foo::funclocal\" \"\\\\\\$$decimal = 3\" \"print 'scope1.c'::foo::funclocal\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::foo::funclocal\"\n \n     # Print scope1.c::foo::funclocal_ro, which is 203\n-\n-    if [gdb_test \"print foo::funclocal_ro\" \"\\\\\\$$decimal = 203\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print foo::funclocal_ro\" \"\\\\\\$$decimal = 203\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::foo::funclocal_ro\" \"\\\\\\$$decimal = 203\" \"print 'scope1.c'::foo::funclocal_ro\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::foo::funclocal_ro\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::foo::funclocal_ro\" \"\\\\\\$$decimal = 203\" \"print 'scope1.c'::foo::funclocal_ro\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::foo::funclocal_ro\"\n \n     # Print scope1.c::bar::funclocal, which is 4\n-\n-    if [gdb_test \"print bar::funclocal\" \"\\\\\\$$decimal = 4\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print bar::funclocal\" \"\\\\\\$$decimal = 4\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::bar::funclocal\" \"\\\\\\$$decimal = 4\" \"print 'scope1.c'::bar::funclocal\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::bar::funclocal\"] { \n-      gdb_suppress_tests\n-    }\n-    gdb_stop_suppressing_tests\n-\n+    gdb_test \"print 'scope1.c'::bar::funclocal\" \"\\\\\\$$decimal = 4\" \"print 'scope1.c'::bar::funclocal\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::bar::funclocal\"\n }\n \n proc test_at_foo {} {\n@@ -158,42 +102,24 @@ proc test_at_foo {} {\n     global srcdir\n     global subdir\n \n-    if [gdb_test \"next\" \".*bar \\\\(\\\\);\" \"\" ] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"next\" \".*bar \\\\(\\\\);\"\n \n     # Print scope0.c::filelocal, which is 1\n-\n-    if [gdb_test \"print 'scope0.c'::filelocal\" \"\\\\\\$$decimal = 1\" \"print 'scope0.c'::filelocal at foo\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope0.c'::filelocal\" \"\\\\\\$$decimal = 1\" \"print 'scope0.c'::filelocal at foo\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal\"\n \n     # Print scope0.c::filelocal_bss, which is 101\n-\n-    if [gdb_test \"print 'scope0.c'::filelocal_bss\" \"\\\\\\$$decimal = 101\" \"print 'scope0.c'::filelocal_bss in test_at_foo\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_bss\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope0.c'::filelocal_bss\" \"\\\\\\$$decimal = 101\" \"print 'scope0.c'::filelocal_bss in test_at_foo\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_bss\"\n \n     # Print scope0.c::filelocal_ro, which is 201\n-\n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope0.c'::filelocal_ro\" \"\\\\\\$$decimal = 201\" \"print 'scope0.c'::filelocal_ro\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_ro\"] { \n-      gdb_suppress_tests\n-    }\n+    gdb_test \"print 'scope0.c'::filelocal_ro\" \"\\\\\\$$decimal = 201\" \"print 'scope0.c'::filelocal_ro\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_ro\"\n \n \n-    gdb_test \"print filelocal\" \"\\\\\\$$decimal = 2\" \"print filelocal at foo\"\n-\n     # Print scope1.c::filelocal, which is 2\n+    gdb_test \"print filelocal\" \"\\\\\\$$decimal = 2\" \"print filelocal at foo\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::filelocal\" \"\\\\\\$$decimal = 2\" \"print 'scope1.c'::filelocal at foo\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::filelocal\" \"\\\\\\$$decimal = 2\" \"print 'scope1.c'::filelocal at foo\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal\"\n \n     gdb_test \"print filelocal_bss\" \"\\\\\\$$decimal = 102\" \\\n \t\"print filelocal_bss at foo\"\n@@ -251,7 +177,6 @@ proc test_at_foo {} {\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n     gdb_test \"print 'scope1.c'::bar::funclocal\" \"\\\\\\$$decimal = 4\" \"print 'scope1.c'::bar::funclocal at foo\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::bar::funclocal\"\n-    gdb_stop_suppressing_tests\n \n }\n \n@@ -262,147 +187,67 @@ proc test_at_bar {} {\n     global srcdir\n     global subdir\n \n-    if [gdb_test \"next\" \".*\" \"\" ] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"next\"\n \n     # Print scope0.c::filelocal, which is 1\n+    gdb_test \"print 'scope0.c'::filelocal\" \"\\\\\\$$decimal = 1\" \"print 'scope0.c'::filelocal at bar\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal\"\n \n-    if [gdb_test \"print 'scope0.c'::filelocal\" \"\\\\\\$$decimal = 1\" \"print 'scope0.c'::filelocal at bar\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal\"] { \n-      gdb_suppress_tests\n-    }\n-\n-\n-   # Print scope0.c::filelocal_bss, which is 101\n-\n-    if [gdb_test \"print 'scope0.c'::filelocal_bss\" \"\\\\\\$$decimal = 101\" \"print 'scope0.c'::filelocal_bss in test_at_bar\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_bss\"] { \n-      gdb_suppress_tests\n-    }\n-\n-\n-   # Print scope0.c::filelocal_ro, which is 201\n+    # Print scope0.c::filelocal_bss, which is 101\n+    gdb_test \"print 'scope0.c'::filelocal_bss\" \"\\\\\\$$decimal = 101\" \"print 'scope0.c'::filelocal_bss in test_at_bar\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_bss\"\n \n+    # Print scope0.c::filelocal_ro, which is 201\n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope0.c'::filelocal_ro\" \"\\\\\\$$decimal = 201\" \"print 'scope0.c'::filelocal_ro at bar\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_ro\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope0.c'::filelocal_ro\" \"\\\\\\$$decimal = 201\" \"print 'scope0.c'::filelocal_ro at bar\"  \"No symbol \\\"scope0.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope0.c'::filelocal_ro\"\n \n     # Print scope1.c::filelocal, which is 2\n-\n-    if [gdb_test \"print filelocal\" \"\\\\\\$$decimal = 2\" \"print filelocal at bar\" ] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print filelocal\" \"\\\\\\$$decimal = 2\" \"print filelocal at bar\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::filelocal\" \"\\\\\\$$decimal = 2\" \"print 'scope1.c'::filelocal at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::filelocal\" \"\\\\\\$$decimal = 2\" \"print 'scope1.c'::filelocal at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal\"\n \n     # Print scope1.c::filelocal_bss, which is 102\n-\n-    if [gdb_test \"print filelocal_bss\" \"\\\\\\$$decimal = 102\" \"print filelocal_bss at bar\" ] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print filelocal_bss\" \"\\\\\\$$decimal = 102\" \"print filelocal_bss at bar\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::filelocal_bss\" \"\\\\\\$$decimal = 102\" \"print 'scope1.c'::filelocal_bss at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal_bss\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::filelocal_bss\" \"\\\\\\$$decimal = 102\" \"print 'scope1.c'::filelocal_bss at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal_bss\"\n \n     # Print scope1.c::filelocal_ro, which is 202\n-\n-    if [gdb_test \"print filelocal_ro\" \"\\\\\\$$decimal = 202\" \"print filelocal_ro in test_at_bar\" ] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print filelocal_ro\" \"\\\\\\$$decimal = 202\" \"print filelocal_ro in test_at_bar\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::filelocal_ro\" \"\\\\\\$$decimal = 202\" \"print 'scope1.c'::filelocal_ro at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal_ro\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::filelocal_ro\" \"\\\\\\$$decimal = 202\" \"print 'scope1.c'::filelocal_ro at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::filelocal_ro\"\n \n     # Print scope1.c::foo::funclocal, which is 3\n-\n-    if [gdb_test \"print foo::funclocal\" \"\\\\\\$$decimal = 3\" \"print foo::funclocal at bar\" ] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print foo::funclocal\" \"\\\\\\$$decimal = 3\" \"print foo::funclocal at bar\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::foo::funclocal\" \"\\\\\\$$decimal = 3\" \"print 'scope1.c'::foo::funclocal at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::foo::funclocal\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::foo::funclocal\" \"\\\\\\$$decimal = 3\" \"print 'scope1.c'::foo::funclocal at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::foo::funclocal\"\n \n     # Print scope1.c::foo::funclocal_bss, which is 103\n-\n-    if [gdb_test \"print foo::funclocal_bss\" \"\\\\\\$$decimal = 103\" \"print foo::funclocal_bss at bar\" ] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print foo::funclocal_bss\" \"\\\\\\$$decimal = 103\" \"print foo::funclocal_bss at bar\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::foo::funclocal_bss\" \"\\\\\\$$decimal = 103\" \"print 'scope1.c'::foo::funclocal_bss at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::foo::funclocal_bss\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::foo::funclocal_bss\" \"\\\\\\$$decimal = 103\" \"print 'scope1.c'::foo::funclocal_bss at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::foo::funclocal_bss\"\n \n     # Print scope1.c::foo::funclocal_ro, which is 203\n-\n-    if [gdb_test \"print foo::funclocal_ro\" \"\\\\\\$$decimal = 203\" \"print foo::funclocal_ro at bar\" ] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print foo::funclocal_ro\" \"\\\\\\$$decimal = 203\" \"print foo::funclocal_ro at bar\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::foo::funclocal_ro\" \"\\\\\\$$decimal = 203\" \"print 'scope1.c'::foo::funclocal_ro at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::foo::funclocal_ro\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::foo::funclocal_ro\" \"\\\\\\$$decimal = 203\" \"print 'scope1.c'::foo::funclocal_ro at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::foo::funclocal_ro\"\n \n     # Print scope1.c::bar::funclocal, which is 4\n-\n-    if [gdb_test \"print funclocal\" \"\\\\\\$$decimal = 4\" \"print funclocal at bar\" ] { \n-      gdb_suppress_tests\n-    }\n-\n-\n-    if [gdb_test \"print bar::funclocal\" \"\\\\\\$$decimal = 4\" \"print bar::funclocal at bar\" ] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print funclocal\" \"\\\\\\$$decimal = 4\" \"print funclocal at bar\"\n+    gdb_test \"print bar::funclocal\" \"\\\\\\$$decimal = 4\" \"print bar::funclocal at bar\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::bar::funclocal\" \"\\\\\\$$decimal = 4\" \"print 'scope1.c'::bar::funclocal at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::bar::funclocal\"] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print 'scope1.c'::bar::funclocal\" \"\\\\\\$$decimal = 4\" \"print 'scope1.c'::bar::funclocal at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::bar::funclocal\"\n \n     # Print scope1.c::bar::funclocal_bss, which is 104\n-\n-    if [gdb_test \"print funclocal_bss\" \"\\\\\\$$decimal = 104\" \"print funclocal_bss at bar\" ] { \n-      gdb_suppress_tests\n-    }\n-\n-\n-    if [gdb_test \"print bar::funclocal_bss\" \"\\\\\\$$decimal = 104\" \"print bar::funclocal_bss at bar\" ] { \n-      gdb_suppress_tests\n-    }\n-\n+    gdb_test \"print funclocal_bss\" \"\\\\\\$$decimal = 104\" \"print funclocal_bss at bar\"\n+    gdb_test \"print bar::funclocal_bss\" \"\\\\\\$$decimal = 104\" \"print bar::funclocal_bss at bar\"\n \n     if { [test_compiler_info gcc-*-*] } then { setup_xfail \"rs6000-*-*\" }\n-    if [gdb_test \"print 'scope1.c'::bar::funclocal_bss\" \"\\\\\\$$decimal = 104\" \"print 'scope1.c'::bar::funclocal_bss at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::bar::funclocal_bss\"] { \n-      gdb_suppress_tests\n-    }\n-    gdb_stop_suppressing_tests\n-\n+    gdb_test \"print 'scope1.c'::bar::funclocal_bss\" \"\\\\\\$$decimal = 104\" \"print 'scope1.c'::bar::funclocal_bss at bar\"  \"No symbol \\\"scope1.c\\\" in current context.*\" \"print '$srcdir/$subdir/scope1.c'::bar::funclocal_bss\"\n }\n \n # This test has little to do with local scopes, but it is in scope.exp anyway.\n@@ -418,20 +263,12 @@ proc test_at_autovars {} {\n \n     gdb_breakpoint marker1\n \n-    if [gdb_test \"cont\" \"Break.* marker1 \\\\(\\\\) at .*:$decimal.*\" \"continue to marker1\"] {\n-\tgdb_suppress_tests\n-    }\n-\n-    if [gdb_test \"up\" \".*autovars.*\" \"up from marker1 in scope.exp\" ] { \n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \"Break.* marker1 \\\\(\\\\) at .*:$decimal.*\" \"continue to marker1\"\n+    gdb_test \"up\" \".*autovars.*\" \"up from marker1 in scope.exp\"\n \n     set count 0\n     while {$count < 100} {\n-\tif [gdb_test \"print i$count\" \".* = $count\" \"\" ] { \n-\t  gdb_suppress_tests\n-\t}\n-\n+\tgdb_test \"print i$count\" \".* = $count\" \"\"\n \tset count [expr $count+1]\n     }\n     clear_xfail \"*-*-*\"\n@@ -451,12 +288,8 @@ proc test_at_localscopes {} {\n     gdb_breakpoint marker3\n     gdb_breakpoint marker4\n \n-    if [gdb_test \"cont\" \"Break.* marker2 \\\\(\\\\) at .*:$decimal.*\" \"continue to marker2\"] {\n-\tgdb_suppress_tests\n-    }\n-    if [gdb_test \"up\" \".*localscopes.*\" \"up from marker2 in scopes.exp\" ] { \n-\tgdb_suppress_tests\n-    }\n+    gdb_test \"cont\" \"Break.* marker2 \\\\(\\\\) at .*:$decimal.*\" \"continue to marker2\"\n+    gdb_test \"up\" \".*localscopes.*\" \"up from marker2 in scopes.exp\"\n \n     # Should be at first (outermost) scope.  Check values.\n \n@@ -467,11 +300,9 @@ proc test_at_localscopes {} {\n     gdb_test \"print localval3\" \"No symbol \\\"localval3\\\" in current context.\" \\\n \t\"print localval3, outer scope\"\n \n-    if [gdb_test \"cont\" \"Break.* marker3 \\\\(\\\\) at .*:$decimal.*\" \\\n-\t\"continue to marker3 in scope.exp\"] then { gdb_suppress_tests }\n-    if [gdb_test \"up\" \".*localscopes.*\" \"up from marker3 in scope.exp\"] { \n-\tgdb_suppress_tests \n-    }\n+    gdb_test \"cont\" \"Break.* marker3 \\\\(\\\\) at .*:$decimal.*\" \\\n+\t\"continue to marker3 in scope.exp\"\n+    gdb_test \"up\" \".*localscopes.*\" \"up from marker3 in scope.exp\"\n \n     # Should be at next (first nested) scope.  Check values.\n \n@@ -484,17 +315,14 @@ proc test_at_localscopes {} {\n \n     # This test will only fail if the file was compiled by gcc, but\n     # there's no way to check that.\n-    if [gdb_test \"cont\" \"Break.* marker4.*at .*:$decimal.*\" \\\n-\t\"continue to marker4 in scope.exp\"] then { gdb_suppress_tests }\n-    if [gdb_test \"up\" \".*localscopes.*\" \"up from marker4 in scope.exp\"] {\n-\tgdb_suppress_tests \n-    }\n+    gdb_test \"cont\" \"Break.* marker4.*at .*:$decimal.*\" \\\n+\t\"continue to marker4 in scope.exp\"\n+    gdb_test \"up\" \".*localscopes.*\" \"up from marker4 in scope.exp\"\n \n     gdb_test \"print localval\" \" = 30\" \"print localval, innermost scope\"\n     gdb_test \"print localval1\" \" = 11\" \"print localval1, innermost scope\"\n     gdb_test \"print localval2\" \" = 12\" \"print localval2, innermost scope\"\n     gdb_test \"print localval3\" \" = 13\" \"print localval3, innermost scope\"\n-    gdb_stop_suppressing_tests\n }\n \n # Note, we don't pass a binfile to clean_restart because we need to"
    },
    {
      "sha": "be36cc90cbfcd45f9e3eedda255cb9983200c20e",
      "filename": "gdb/testsuite/gdb.base/sepdebug.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/sepdebug.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/sepdebug.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/sepdebug.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -489,22 +489,22 @@ proc test_next_with_recursion {} {\n \n     # Continue until we call factorial recursively with 5.\n \n-    if [gdb_test \"continue\" \\\n+    gdb_test \"continue\" \\\n \t\"Continuing.*Break.* factorial .value=5. .*\" \\\n-\t\"continue to factorial(5)\"] then { gdb_suppress_tests }\n+\t\"continue to factorial(5)\"\n \n     # Do a backtrace just to confirm how many levels deep we are.\n \n-    if [gdb_test \"backtrace\" \\\n+    gdb_test \"backtrace\" \\\n \t\"#0\\[ \\t\\]+ factorial .value=5..*\" \\\n-\t\"backtrace from factorial(5)\"] then { gdb_suppress_tests }\n+\t\"backtrace from factorial(5)\"\n \n     # Now a \"next\" should position us at the recursive call, which\n     # we will be performing with 4.\n \n-    if [gdb_test \"next\" \\\n+    gdb_test \"next\" \\\n \t\".* factorial .value - 1.;.*\" \\\n-\t\"next to recursive call\"] then { gdb_suppress_tests }\n+\t\"next to recursive call\"\n \n     # Disable the breakpoint at the entry to factorial by deleting them all.\n     # The \"next\" should run until we return to the next line from this\n@@ -536,14 +536,13 @@ proc test_next_with_recursion {} {\n     # OK, we should be back in the same stack frame we started from.\n     # Do a backtrace just to confirm.\n \n-    set result [gdb_test \"backtrace\" \\\n+    gdb_test \"backtrace\" \\\n \t    \"#0\\[ \\t\\]+ factorial .value=120.*\\r\\n#1\\[ \\t\\]+ \\[0-9a-fx\\]+ in factorial .value=6..*\" \\\n-\t    \"backtrace from factorial(5.1)\"]\n-    if { $result != 0 } { gdb_suppress_tests }\n+\t    \"backtrace from factorial(5.1)\"\n \n-    if [target_info exists gdb,noresults] { gdb_suppress_tests }\n-  gdb_continue_to_end \"recursive next test\"\n-   gdb_stop_suppressing_tests\n+    if { ![target_info exists gdb,noresults] } {\n+\tgdb_continue_to_end \"recursive next test\"\n+    }\n }\n \n test_next_with_recursion"
    },
    {
      "sha": "fcdde93cdd09d6a831543f4bb064dc63561aa24a",
      "filename": "gdb/testsuite/gdb.base/structs.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/structs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/structs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/structs.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -80,7 +80,7 @@ proc start_structs_test { types } {\n \n     # Advance to main\n     if { ![runto_main] } then {\n-\tgdb_suppress_tests\n+\treturn\n     }\n \n     # Get the debug format"
    },
    {
      "sha": "446d71276e10e86bf4360f20940774446a441484",
      "filename": "gdb/testsuite/gdb.base/until.exp",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/until.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.base/until.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/until.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -44,7 +44,10 @@ gdb_test \"until 80 then stop\" \\\n     \"malformed until\"\n \n # Rerun up to factorial, outer invocation\n-if { ![runto factorial] } then { gdb_suppress_tests; }\n+if { ![runto factorial] } {\n+    return\n+}\n+\n delete_breakpoints\n \n # At this point, 'until' should continue the inferior up to when all the\n@@ -57,7 +60,10 @@ gdb_test \"until $bp_location19\" \\\n \n # Run to a function called by main\n #\n-if { ![runto marker2] } then { gdb_suppress_tests; }\n+if { ![runto marker2] } {\n+    return\n+}\n+\n delete_breakpoints\n \n # Now issue an until with another function, not called by the current"
    },
    {
      "sha": "aa830312ba1d81f75e1d040f76c81407de183c53",
      "filename": "gdb/testsuite/gdb.cp/misc.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.cp/misc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/gdb.cp/misc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/misc.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -51,15 +51,11 @@ proc test_expr { args } {\n     }\n     set last_ent [expr [llength $args] - 1]\n     set testname [lindex $args $last_ent]\n-    if [gdb_test_no_output [lindex $args 0] \"$testname (setup)\"] {\n-\tgdb_suppress_tests\n-    }\n+    gdb_test_no_output [lindex $args 0] \"$testname (setup)\"\n+\n     for {set x 1} {$x < $last_ent} {set x [expr $x + 2]} {\n-\tif [gdb_test [lindex $args $x] [lindex $args [expr $x + 1]] \"$testname ([lindex $args $x])\"] {\n-\t    gdb_suppress_tests\n-\t}\n+\tgdb_test [lindex $args $x] [lindex $args [expr $x + 1]] \"$testname ([lindex $args $x])\"\n     }\n-    gdb_stop_suppressing_tests\n }\n \n proc do_tests {} {"
    },
    {
      "sha": "3eebfa1255d30e1d2e7db131906f7b43179c9a89",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 99,
      "changes": 102,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -1029,13 +1029,7 @@ proc gdb_test_multiple { command message args } {\n \t    if { $foo < [expr $len - 1] } {\n \t\tset str [string range \"$string\" 0 $foo]\n \t\tif { [send_gdb \"$str\"] != \"\" } {\n-\t\t    global suppress_flag\n-\n-\t\t    if { ! $suppress_flag } {\n-\t\t\tperror \"Couldn't send $command to GDB.\"\n-\t\t    }\n-\t\t    fail \"$message\"\n-\t\t    return $result\n+\t\t    perror \"Couldn't send $command to GDB.\"\n \t\t}\n \t\t# since we're checking if each line of the multi-line\n \t\t# command are 'accepted' by GDB here,\n@@ -1054,13 +1048,7 @@ proc gdb_test_multiple { command message args } {\n \t}\n \tif { \"$string\" != \"\" } {\n \t    if { [send_gdb \"$string\"] != \"\" } {\n-\t\tglobal suppress_flag\n-\n-\t\tif { ! $suppress_flag } {\n-\t\t    perror \"Couldn't send $command to GDB.\"\n-\t\t}\n-\t\tfail \"$message\"\n-\t\treturn $result\n+\t\tperror \"Couldn't send $command to GDB.\"\n \t    }\n \t}\n     }\n@@ -1076,7 +1064,6 @@ proc gdb_test_multiple { command message args } {\n \t    if { $message != \"\" } {\n \t\tfail \"$message\"\n \t    }\n-\t    gdb_suppress_entire_file \"GDB died\"\n \t    set result -1\n \t}\n     }\n@@ -1804,8 +1791,6 @@ proc default_gdb_exit {} {\n     global gdb_spawn_id inferior_spawn_id\n     global inotify_log_file\n \n-    gdb_stop_suppressing_tests\n-\n     if ![info exists gdb_spawn_id] {\n \treturn\n     }\n@@ -1978,8 +1963,6 @@ proc default_gdb_spawn { } {\n     global INTERNAL_GDBFLAGS GDBFLAGS\n     global gdb_spawn_id\n \n-    gdb_stop_suppressing_tests\n-\n     # Set the default value, it may be overriden later by specific testfile.\n     #\n     # Use `set_board_info use_gdb_stub' for the board file to flag the inferior\n@@ -4611,10 +4594,6 @@ proc gdb_compile_openmp {source dest type options} {\n # For options for TYPE see gdb_stdin_log_write\n \n proc send_gdb { string {type standard}} {\n-    global suppress_flag\n-    if { $suppress_flag } {\n-\treturn \"suppressed\"\n-    }\n     gdb_stdin_log_write $string $type\n     return [remote_send host \"$string\"]\n }\n@@ -4650,25 +4629,8 @@ proc gdb_expect { args } {\n \tset tmt [get_largest_timeout]\n     }\n \n-    global suppress_flag\n-    global remote_suppress_flag\n-    if [info exists remote_suppress_flag] {\n-\tset old_val $remote_suppress_flag\n-    }\n-    if [info exists suppress_flag] {\n-\tif { $suppress_flag } {\n-\t    set remote_suppress_flag 1\n-\t}\n-    }\n     set code [catch \\\n \t{uplevel remote_expect host $tmt $expcode} string]\n-    if [info exists old_val] {\n-\tset remote_suppress_flag $old_val\n-    } else {\n-\tif [info exists remote_suppress_flag] {\n-\t    unset remote_suppress_flag\n-\t}\n-    }\n \n     if {$code == 1} {\n         global errorInfo errorCode\n@@ -4694,13 +4656,9 @@ proc gdb_expect { args } {\n \n proc gdb_expect_list {test sentinel list} {\n     global gdb_prompt\n-    global suppress_flag\n     set index 0\n     set ok 1\n-    if { $suppress_flag } {\n-\tset ok 0\n-\tunresolved \"${test}\"\n-    }\n+\n     while { ${index} < [llength ${list}] } {\n \tset pattern [lindex ${list} ${index}]\n         set index [expr ${index} + 1]\n@@ -4761,58 +4719,6 @@ proc gdb_expect_list {test sentinel list} {\n     }\n }\n \n-#\n-#\n-proc gdb_suppress_entire_file { reason } {\n-    global suppress_flag\n-\n-    warning \"$reason\\n\"\n-    set suppress_flag -1\n-}\n-\n-#\n-# Set suppress_flag, which will cause all subsequent calls to send_gdb and\n-# gdb_expect to fail immediately (until the next call to \n-# gdb_stop_suppressing_tests).\n-#\n-proc gdb_suppress_tests { args } {\n-    global suppress_flag\n-\n-    return;  # fnf - disable pending review of results where\n-             # testsuite ran better without this\n-    incr suppress_flag\n-\n-    if { $suppress_flag == 1 } {\n-\tif { [llength $args] > 0 } {\n-\t    warning \"[lindex $args 0]\\n\"\n-\t} else {\n-\t    warning \"Because of previous failure, all subsequent tests in this group will automatically fail.\\n\"\n-\t}\n-    }\n-}\n-\n-#\n-# Clear suppress_flag.\n-#\n-proc gdb_stop_suppressing_tests { } {\n-    global suppress_flag\n-\n-    if [info exists suppress_flag] {\n-\tif { $suppress_flag > 0 } {\n-\t    set suppress_flag 0\n-\t    clone_output \"Tests restarted.\\n\"\n-\t}\n-    } else {\n-\tset suppress_flag 0\n-    }\n-}\n-\n-proc gdb_clear_suppressed { } {\n-    global suppress_flag\n-\n-    set suppress_flag 0\n-}\n-\n # Spawn the gdb process.\n #\n # This doesn't expect any output or do any other initialization,\n@@ -5323,8 +5229,6 @@ proc default_gdb_init { test_file_name } {\n \n     set cleanfiles {}\n \n-    gdb_clear_suppressed\n-\n     set gdb_test_file_name [file rootname [file tail $test_file_name]]\n \n     # Make sure that the wrapper is rebuilt"
    },
    {
      "sha": "d1c87dc7517d8da1e7a08ed9eb0f5ef7657ed0f3",
      "filename": "gdb/testsuite/lib/mi-support.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 38,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/lib/mi-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/lib/mi-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/mi-support.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -61,8 +61,6 @@ proc mi_uncatched_gdb_exit {} {\n     global mi_gdb_prompt\n     global MIFLAGS\n \n-    gdb_stop_suppressing_tests\n-\n     if { [info procs sid_exit] != \"\" } {\n \tsid_exit\n     }\n@@ -232,7 +230,6 @@ proc default_mi_gdb_start { args } {\n \treturn [eval mi_gdb_start_separate_mi_tty $args]\n     }\n \n-    gdb_stop_suppressing_tests\n     set inferior_pty no-tty\n \n     # Set the default value, it may be overriden later by specific testfile.\n@@ -390,11 +387,6 @@ proc mi_gdb_reinitialize_dir { subdir } {\n     global mi_gdb_prompt\n     global MIFLAGS\n \n-    global suppress_flag\n-    if { $suppress_flag } {\n-\treturn\n-    }\n-\n     if [is_remote host] {\n \treturn \"\"\n     }\n@@ -729,13 +721,7 @@ proc mi_gdb_test { args } {\n \t    if { $foo < [expr $len - 1] } {\n \t\tset str [string range \"$string\" 0 $foo]\n \t\tif { [send_gdb \"$str\"] != \"\" } {\n-\t\t    global suppress_flag\n-\n-\t\t    if { ! $suppress_flag } {\n-\t\t\tperror \"Couldn't send $command to GDB.\"\n-\t\t    }\n-\t\t    fail \"$message\"\n-\t\t    return $result\n+\t\t    perror \"Couldn't send $command to GDB.\"\n \t\t}\n \t\tgdb_expect 2 {\n \t\t    -re \"\\[\\r\\n\\]\" { }\n@@ -748,13 +734,7 @@ proc mi_gdb_test { args } {\n \t}\n \tif { \"$string\" != \"\" } {\n \t    if { [send_gdb \"$string\"] != \"\" } {\n-\t\tglobal suppress_flag\n-\n-\t\tif { ! $suppress_flag } {\n-\t\t    perror \"Couldn't send $command to GDB.\"\n-\t\t}\n-\t\tfail \"$message\"\n-\t\treturn $result\n+\t\tperror \"Couldn't send $command to GDB.\"\n \t    }\n \t}\n     }\n@@ -780,7 +760,6 @@ proc mi_gdb_test { args } {\n \t     if { $message != \"\" } {\n \t\t fail \"$message\"\n \t     }\n-\t     gdb_suppress_entire_file \"GDB died\"\n \t     return -1\n \t }\n \t -re \"Ending remote debugging.*$mi_gdb_prompt\\[ \\]*$\" {\n@@ -940,10 +919,6 @@ proc mi_gdb_expect_cli_output {until message} {\n # If USE_MI_COMMAND is false, they are effectively arguments passed\n # to the test program.  If the global USE_GDB_STUB is true, ARGS is not used.\n proc mi_run_cmd_full {use_mi_command args} {\n-    global suppress_flag\n-    if { $suppress_flag } {\n-\treturn -1\n-    }\n     global mi_gdb_prompt use_gdb_stub\n     global thread_selected_re\n     global library_loaded_re\n@@ -1077,19 +1052,14 @@ proc mi_clean_restart { args } {\n #\n # FUNC is the linespec of the place to stop (it inserts a breakpoint here).\n # It returns:\n-#   -1  if test suppressed, failed, timedout\n+#   -1  if failed, timedout\n #    0  if test passed\n #\n # Supported options:\n #\n #  -qualified -- pass --qualified to -break-insert\n \n proc mi_runto_helper {func run_or_continue args} {\n-  global suppress_flag\n-  if { $suppress_flag } {\n-    return -1\n-  }\n-\n   global mi_gdb_prompt expect_out\n   global hex decimal fullname_syntax\n \n@@ -1359,11 +1329,6 @@ proc mi_expect_interrupt { test } {\n # after the first prompt is printed.\n \n proc mi_execute_to { cmd reason func args file line extra test } {\n-    global suppress_flag\n-    if { $suppress_flag } {\n-\treturn -1\n-    }\n-\n     mi_send_resuming_command \"$cmd\" \"$test\"\n     set r [mi_expect_stop $reason $func $args $file $line $extra $test]\n     return $r"
    },
    {
      "sha": "c13fe117662c220df785f162e1dd868ccaf35d56",
      "filename": "gdb/testsuite/lib/prompt.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/lib/prompt.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ac85db529d1077551b92c6da66044eff672c315/gdb/testsuite/lib/prompt.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/prompt.exp?ref=0ac85db529d1077551b92c6da66044eff672c315",
      "patch": "@@ -31,8 +31,6 @@ proc default_prompt_gdb_start { } {\n     global timeout\n     global gdb_spawn_id\n \n-    gdb_stop_suppressing_tests\n-\n     verbose \"Spawning $GDB $INTERNAL_GDBFLAGS $GDBFLAGS\"\n \n     if [info exists gdb_spawn_id] {"
    }
  ]
}