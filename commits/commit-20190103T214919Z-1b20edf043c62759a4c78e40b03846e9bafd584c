{
  "sha": "1b20edf043c62759a4c78e40b03846e9bafd584c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWIyMGVkZjA0M2M2Mjc1OWE0Yzc4ZTQwYjAzODQ2ZTliYWZkNTg0Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-12-27T19:08:09Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-03T21:49:19Z"
    },
    "message": "Improve reference counting in py-type.c\n\nThis improves the reference counting in py-type.c by using gdbpy_ref\nand gdbpy_ref::new_reference in more places.\n\ngdb/ChangeLog\n2019-01-03  Tom Tromey  <tom@tromey.com>\n\n\t* python/py-type.c (convert_field): Use new_reference.  Return\n\tgdbpy_ref.\n\t(make_fielditem): Return gdbpy_ref.\n\t(typy_fields): Update.\n\t(typy_getitem): Update.\n\t(field_name): Return gdbpy_ref.  Use new_reference.\n\t(typy_iterator_iternext): Update.",
    "tree": {
      "sha": "9a4c266ac7be0a336d76deda2a03afbbc06cea9c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9a4c266ac7be0a336d76deda2a03afbbc06cea9c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b20edf043c62759a4c78e40b03846e9bafd584c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b20edf043c62759a4c78e40b03846e9bafd584c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b20edf043c62759a4c78e40b03846e9bafd584c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b20edf043c62759a4c78e40b03846e9bafd584c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ea41325b7d134e91648e340d8297e8f6ee5fe26a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ea41325b7d134e91648e340d8297e8f6ee5fe26a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ea41325b7d134e91648e340d8297e8f6ee5fe26a"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 33,
    "deletions": 32
  },
  "files": [
    {
      "sha": "3e8f66b395fdaf79ba4a22f3e3e08f4b7149f1a6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b20edf043c62759a4c78e40b03846e9bafd584c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b20edf043c62759a4c78e40b03846e9bafd584c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1b20edf043c62759a4c78e40b03846e9bafd584c",
      "patch": "@@ -1,3 +1,13 @@\n+2019-01-03  Tom Tromey  <tom@tromey.com>\n+\n+\t* python/py-type.c (convert_field): Use new_reference.  Return\n+\tgdbpy_ref.\n+\t(make_fielditem): Return gdbpy_ref.\n+\t(typy_fields): Update.\n+\t(typy_getitem): Update.\n+\t(field_name): Return gdbpy_ref.  Use new_reference.\n+\t(typy_iterator_iternext): Update.\n+\n 2019-01-03  Tom Tromey  <tom@tromey.com>\n \n \t* python/py-record.c (gdbpy_stop_recording): Use Py_RETURN_NONE."
    },
    {
      "sha": "fff3d302205b7345e33ede57d688cabbd40046cf",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 23,
      "deletions": 32,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b20edf043c62759a4c78e40b03846e9bafd584c/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b20edf043c62759a4c78e40b03846e9bafd584c/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=1b20edf043c62759a4c78e40b03846e9bafd584c",
      "patch": "@@ -165,7 +165,7 @@ typy_get_code (PyObject *self, void *closure)\n /* Helper function for typy_fields which converts a single field to a\n    gdb.Field object.  Returns NULL on error.  */\n \n-static PyObject *\n+static gdbpy_ref<>\n convert_field (struct type *type, int field)\n {\n   gdbpy_ref<> result (field_new ());\n@@ -218,23 +218,21 @@ convert_field (struct type *type, int field)\n \t}\n     }\n   if (arg == NULL)\n-    {\n-      arg.reset (Py_None);\n-      Py_INCREF (arg.get ());\n-    }\n+    arg = gdbpy_ref<>::new_reference (Py_None);\n+\n   if (PyObject_SetAttrString (result.get (), \"name\", arg.get ()) < 0)\n     return NULL;\n \n-  arg.reset (TYPE_FIELD_ARTIFICIAL (type, field) ? Py_True : Py_False);\n-  Py_INCREF (arg.get ());\n+  arg = gdbpy_ref<>::new_reference (TYPE_FIELD_ARTIFICIAL (type, field)\n+\t\t\t\t    ? Py_True : Py_False);\n   if (PyObject_SetAttrString (result.get (), \"artificial\", arg.get ()) < 0)\n     return NULL;\n \n   if (TYPE_CODE (type) == TYPE_CODE_STRUCT)\n-    arg.reset (field < TYPE_N_BASECLASSES (type) ? Py_True : Py_False);\n+    arg = gdbpy_ref<>::new_reference (field < TYPE_N_BASECLASSES (type)\n+\t\t\t\t      ? Py_True : Py_False);\n   else\n-    arg.reset (Py_False);\n-  Py_INCREF (arg.get ());\n+    arg = gdbpy_ref<>::new_reference (Py_False);\n   if (PyObject_SetAttrString (result.get (), \"is_base_class\", arg.get ()) < 0)\n     return NULL;\n \n@@ -246,35 +244,30 @@ convert_field (struct type *type, int field)\n \n   /* A field can have a NULL type in some situations.  */\n   if (TYPE_FIELD_TYPE (type, field) == NULL)\n-    {\n-      arg.reset (Py_None);\n-      Py_INCREF (arg.get ());\n-    }\n+    arg = gdbpy_ref<>::new_reference (Py_None);\n   else\n     arg.reset (type_to_type_object (TYPE_FIELD_TYPE (type, field)));\n   if (arg == NULL)\n     return NULL;\n   if (PyObject_SetAttrString (result.get (), \"type\", arg.get ()) < 0)\n     return NULL;\n \n-  return result.release ();\n+  return result;\n }\n \n /* Helper function to return the name of a field, as a gdb.Field object.\n    If the field doesn't have a name, None is returned.  */\n \n-static PyObject *\n+static gdbpy_ref<>\n field_name (struct type *type, int field)\n {\n-  PyObject *result;\n+  gdbpy_ref<> result;\n \n   if (TYPE_FIELD_NAME (type, field))\n-    result = PyString_FromString (TYPE_FIELD_NAME (type, field));\n+    result.reset (PyString_FromString (TYPE_FIELD_NAME (type, field)));\n   else\n-    {\n-      result = Py_None;\n-      Py_INCREF (result);\n-    }\n+    result = gdbpy_ref<>::new_reference (Py_None);\n+\n   return result;\n }\n \n@@ -284,7 +277,7 @@ field_name (struct type *type, int field)\n    the field, or a tuple consisting of field name and gdb.Field\n    object.  */\n \n-static PyObject *\n+static gdbpy_ref<>\n make_fielditem (struct type *type, int i, enum gdbpy_iter_kind kind)\n {\n   switch (kind)\n@@ -294,15 +287,15 @@ make_fielditem (struct type *type, int i, enum gdbpy_iter_kind kind)\n \tgdbpy_ref<> key (field_name (type, i));\n \tif (key == NULL)\n \t  return NULL;\n-\tgdbpy_ref<> value (convert_field (type, i));\n+\tgdbpy_ref<> value = convert_field (type, i);\n \tif (value == NULL)\n \t  return NULL;\n \tgdbpy_ref<> item (PyTuple_New (2));\n \tif (item == NULL)\n \t  return NULL;\n \tPyTuple_SET_ITEM (item.get (), 0, key.release ());\n \tPyTuple_SET_ITEM (item.get (), 1, value.release ());\n-\treturn item.release ();\n+\treturn item;\n       }\n     case iter_keys:\n       return field_name (type, i);\n@@ -371,7 +364,7 @@ typy_fields (PyObject *self, PyObject *args)\n   /* Array type.  Handle this as a special case because the common\n      machinery wants struct or union or enum types.  Build a list of\n      one entry which is the range for the array.  */\n-  gdbpy_ref<> r (convert_field (type, 0));\n+  gdbpy_ref<> r = convert_field (type, 0);\n   if (r == NULL)\n     return NULL;\n \n@@ -1186,9 +1179,7 @@ typy_getitem (PyObject *self, PyObject *key)\n       const char *t_field_name = TYPE_FIELD_NAME (type, i);\n \n       if (t_field_name && (strcmp_iw (t_field_name, field.get ()) == 0))\n-\t{\n-\t  return convert_field (type, i);\n-\t}\n+\treturn convert_field (type, i).release ();\n     }\n   PyErr_SetObject (PyExc_KeyError, key);\n   return NULL;\n@@ -1325,14 +1316,14 @@ typy_iterator_iternext (PyObject *self)\n {\n   typy_iterator_object *iter_obj = (typy_iterator_object *) self;\n   struct type *type = iter_obj->source->type;\n-  PyObject *result;\n \n   if (iter_obj->field < TYPE_NFIELDS (type))\n     {\n-      result = make_fielditem (type, iter_obj->field, iter_obj->kind);\n+      gdbpy_ref<> result = make_fielditem (type, iter_obj->field,\n+\t\t\t\t\t   iter_obj->kind);\n       if (result != NULL)\n \titer_obj->field++;\n-      return result;\n+      return result.release ();\n     }\n \n   return NULL;"
    }
  ]
}