{
  "sha": "e35000a7f8be021459102751db7e0b7e2868b57e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTM1MDAwYTdmOGJlMDIxNDU5MTAyNzUxZGI3ZTBiN2UyODY4YjU3ZQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-12-20T16:43:06Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-12-20T16:43:06Z"
    },
    "message": "gdb: recognize new DWARF attributes: defaulted, deleted, calling conv.\n\nExtend GDB's internal representation of types to include the\nDW_AT_calling_convention, DW_AT_defaulted, and DW_AT_deleted attributes\nthat were introduced in DWARF5.\n\nThese attributes will be helpful in a future patch about infcall'ing\nfunctions with call-by-value parameters.  GDB will use the attributes\nto decide whether the type of a call-by-value parameter is implicitly\npass-by-reference.\n\ngdb/ChangeLog:\n2019-12-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* dwarf2read.c (dwarf2_add_member_fn): Read the DW_AT_defaulted\n\tand DW_AT_deleted attributes of a function.\n\t(read_structure_type): Read the DW_AT_calling_convention attribute\n\tof a type.\n\t(is_valid_DW_AT_defaulted): New function.\n\t(is_valid_DW_AT_calling_convention_for_type): New function.\n\t* gdbtypes.h: Include dwarf2.h.\n\t(struct fn_field)<defaulted>: New field to store the\n\tDW_AT_defaulted attribute.\n\t(struct fn_field)<is_deleted>: New field to store the\n\tDW_AT_deleted attribute.\n\t(struct cplus_struct_type)<calling_convention>: New field to store\n\tthe DW_AT_calling_convention attribute.\n\t(TYPE_FN_FIELD_DEFAULTED): New macro.\n\t(TYPE_FN_FIELD_DELETED): New macro.\n\t(TYPE_CPLUS_CALLING_CONVENTION): New macro.\n\t* gdbtypes.c (dump_fn_fieldlists): Update for the changes made\n\tto the .h file.\n\t(print_cplus_stuff): Likewise.\n\nChange-Id: I54192f363115b78ec7435a8563b73fcace420765",
    "tree": {
      "sha": "aa3a333c82cf88c9d3e542142cddca842f7898d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/aa3a333c82cf88c9d3e542142cddca842f7898d2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e35000a7f8be021459102751db7e0b7e2868b57e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e35000a7f8be021459102751db7e0b7e2868b57e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e35000a7f8be021459102751db7e0b7e2868b57e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e35000a7f8be021459102751db7e0b7e2868b57e/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b4b49dcbff6b437fa8b4e2fc0c3f27b457f11310",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4b49dcbff6b437fa8b4e2fc0c3f27b457f11310",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b4b49dcbff6b437fa8b4e2fc0c3f27b457f11310"
    }
  ],
  "stats": {
    "total": 112,
    "additions": 111,
    "deletions": 1
  },
  "files": [
    {
      "sha": "5175ebcc2566e08832d34fbb7667aacc10ea03d5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e35000a7f8be021459102751db7e0b7e2868b57e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e35000a7f8be021459102751db7e0b7e2868b57e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e35000a7f8be021459102751db7e0b7e2868b57e",
      "patch": "@@ -1,3 +1,25 @@\n+2019-12-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* dwarf2read.c (dwarf2_add_member_fn): Read the DW_AT_defaulted\n+\tand DW_AT_deleted attributes of a function.\n+\t(read_structure_type): Read the DW_AT_calling_convention attribute\n+\tof a type.\n+\t(is_valid_DW_AT_defaulted): New function.\n+\t(is_valid_DW_AT_calling_convention_for_type): New function.\n+\t* gdbtypes.h: Include dwarf2.h.\n+\t(struct fn_field)<defaulted>: New field to store the\n+\tDW_AT_defaulted attribute.\n+\t(struct fn_field)<is_deleted>: New field to store the\n+\tDW_AT_deleted attribute.\n+\t(struct cplus_struct_type)<calling_convention>: New field to store\n+\tthe DW_AT_calling_convention attribute.\n+\t(TYPE_FN_FIELD_DEFAULTED): New macro.\n+\t(TYPE_FN_FIELD_DELETED): New macro.\n+\t(TYPE_CPLUS_CALLING_CONVENTION): New macro.\n+\t* gdbtypes.c (dump_fn_fieldlists): Update for the changes made\n+\tto the .h file.\n+\t(print_cplus_stuff): Likewise.\n+\n 2019-12-20  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui.c (tui_show_source): Remove."
    },
    {
      "sha": "6492889666f70990c91951bca08fcba179e6efe1",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e35000a7f8be021459102751db7e0b7e2868b57e/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e35000a7f8be021459102751db7e0b7e2868b57e/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=e35000a7f8be021459102751db7e0b7e2868b57e",
      "patch": "@@ -15472,6 +15472,25 @@ dwarf2_is_constructor (struct die_info *die, struct dwarf2_cu *cu)\n \t  && (type_name[len] == '\\0' || type_name[len] == '<'));\n }\n \n+/* Check if the given VALUE is a recognized enum\n+   dwarf_defaulted_attribute constant according to DWARF5 spec,\n+   Table 7.24.  */\n+\n+static bool\n+is_valid_DW_AT_defaulted (ULONGEST value)\n+{\n+  switch (value)\n+    {\n+    case DW_DEFAULTED_no:\n+    case DW_DEFAULTED_in_class:\n+    case DW_DEFAULTED_out_of_class:\n+      return true;\n+    }\n+\n+  complaint (_(\"unrecognized DW_AT_defaulted value (%lu)\"), value);\n+  return false;\n+}\n+\n /* Add a member function to the proper fieldlist.  */\n \n static void\n@@ -15584,6 +15603,16 @@ dwarf2_add_member_fn (struct field_info *fip, struct die_info *die,\n   if (attr && DW_UNSND (attr) != 0)\n     fnp->is_artificial = 1;\n \n+  /* Check for defaulted methods.  */\n+  attr = dwarf2_attr (die, DW_AT_defaulted, cu);\n+  if (attr != nullptr && is_valid_DW_AT_defaulted (DW_UNSND (attr)))\n+    fnp->defaulted = (enum dwarf_defaulted_attribute) DW_UNSND (attr);\n+\n+  /* Check for deleted methods.  */\n+  attr = dwarf2_attr (die, DW_AT_deleted, cu);\n+  if (attr != nullptr && DW_UNSND (attr) != 0)\n+    fnp->is_deleted = 1;\n+\n   fnp->is_constructor = dwarf2_is_constructor (die, cu);\n \n   /* Get index in virtual function table if it is a virtual member\n@@ -15823,6 +15852,26 @@ maybe_set_alignment (struct dwarf2_cu *cu, struct die_info *die,\n \t       objfile_name (cu->per_cu->dwarf2_per_objfile->objfile));\n }\n \n+/* Check if the given VALUE is a valid enum dwarf_calling_convention\n+   constant for a type, according to DWARF5 spec, Table 5.5.  */\n+\n+static bool\n+is_valid_DW_AT_calling_convention_for_type (ULONGEST value)\n+{\n+  switch (value)\n+    {\n+    case DW_CC_normal:\n+    case DW_CC_pass_by_reference:\n+    case DW_CC_pass_by_value:\n+      return true;\n+\n+    default:\n+      complaint (_(\"unrecognized DW_AT_calling_convention value \"\n+\t\t   \"(%lu) for a type\"), value);\n+      return false;\n+    }\n+}\n+\n /* Called when we find the DIE that starts a structure or union scope\n    (definition) to create a type for the structure or union.  Fill in\n    the type's name and general properties; the members will not be\n@@ -15904,6 +15953,18 @@ read_structure_type (struct die_info *die, struct dwarf2_cu *cu)\n   if (cu->language == language_cplus && die->tag == DW_TAG_class_type)\n     TYPE_DECLARED_CLASS (type) = 1;\n \n+  /* Store the calling convention in the type if it's available in\n+     the die.  Otherwise the calling convention remains set to\n+     the default value DW_CC_normal.  */\n+  attr = dwarf2_attr (die, DW_AT_calling_convention, cu);\n+  if (attr != nullptr\n+      && is_valid_DW_AT_calling_convention_for_type (DW_UNSND (attr)))\n+    {\n+      ALLOCATE_CPLUS_STRUCT_TYPE (type);\n+      TYPE_CPLUS_CALLING_CONVENTION (type)\n+\t= (enum dwarf_calling_convention) (DW_UNSND (attr));\n+    }\n+\n   attr = dwarf2_attr (die, DW_AT_byte_size, cu);\n   if (attr != nullptr)\n     {"
    },
    {
      "sha": "7e80b45cf29de5fcff4e90810481d570a9d8a406",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e35000a7f8be021459102751db7e0b7e2868b57e/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e35000a7f8be021459102751db7e0b7e2868b57e/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=e35000a7f8be021459102751db7e0b7e2868b57e",
      "patch": "@@ -4494,6 +4494,10 @@ dump_fn_fieldlists (struct type *type, int spaces)\n \t\t\t    TYPE_FN_FIELD_PROTECTED (f, overload_idx));\n \t  printfi_filtered (spaces + 8, \"is_stub %d\\n\",\n \t\t\t    TYPE_FN_FIELD_STUB (f, overload_idx));\n+\t  printfi_filtered (spaces + 8, \"defaulted %d\\n\",\n+\t\t\t    TYPE_FN_FIELD_DEFAULTED (f, overload_idx));\n+\t  printfi_filtered (spaces + 8, \"is_deleted %d\\n\",\n+\t\t\t    TYPE_FN_FIELD_DELETED (f, overload_idx));\n \t  printfi_filtered (spaces + 8, \"voffset %u\\n\",\n \t\t\t    TYPE_FN_FIELD_VOFFSET (f, overload_idx));\n \t}\n@@ -4557,6 +4561,9 @@ print_cplus_stuff (struct type *type, int spaces)\n     {\n       dump_fn_fieldlists (type, spaces);\n     }\n+\n+  printfi_filtered (spaces, \"calling_convention %d\\n\",\n+\t\t    TYPE_CPLUS_CALLING_CONVENTION (type));\n }\n \n /* Print the contents of the TYPE's type_specific union, assuming that"
    },
    {
      "sha": "12fa437b00133c6cb35b80b6dccb5d263e3449eb",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 21,
      "deletions": 1,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e35000a7f8be021459102751db7e0b7e2868b57e/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e35000a7f8be021459102751db7e0b7e2868b57e/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=e35000a7f8be021459102751db7e0b7e2868b57e",
      "patch": "@@ -50,6 +50,7 @@\n #include \"gdbsupport/enum-flags.h\"\n #include \"gdbsupport/underlying.h\"\n #include \"gdbsupport/print-utils.h\"\n+#include \"dwarf2.h\"\n \n /* Forward declarations for prototypes.  */\n struct field;\n@@ -957,9 +958,18 @@ struct fn_field\n \n   unsigned int is_constructor : 1;\n \n+  /* * True if this function is deleted, false otherwise.  */\n+\n+  unsigned int is_deleted : 1;\n+\n+  /* * DW_AT_defaulted attribute for this function.  The value is one\n+     of the DW_DEFAULTED constants.  */\n+\n+  ENUM_BITFIELD (dwarf_defaulted_attribute) defaulted : 2;\n+\n   /* * Unused.  */\n \n-  unsigned int dummy:9;\n+  unsigned int dummy:6;\n \n   /* * Index into that baseclass's virtual function table, minus 2;\n      else if static: VOFFSET_STATIC; else: 0.  */\n@@ -1033,6 +1043,12 @@ struct cplus_struct_type\n \n     int is_dynamic : 2;\n \n+    /* * The calling convention for this type, fetched from the\n+       DW_AT_calling_convention attribute.  The value is one of the\n+       DW_CC constants.  */\n+\n+    ENUM_BITFIELD (dwarf_calling_convention) calling_convention : 8;\n+\n     /* * The base class which defined the virtual function table pointer.  */\n \n     struct type *vptr_basetype;\n@@ -1437,6 +1453,8 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n     ? (struct cplus_struct_type*)&cplus_struct_default \\\n     : TYPE_RAW_CPLUS_SPECIFIC(thistype))\n #define TYPE_RAW_CPLUS_SPECIFIC(thistype) TYPE_MAIN_TYPE(thistype)->type_specific.cplus_stuff\n+#define TYPE_CPLUS_CALLING_CONVENTION(thistype) \\\n+  TYPE_MAIN_TYPE(thistype)->type_specific.cplus_stuff->calling_convention\n #define TYPE_FLOATFORMAT(thistype) TYPE_MAIN_TYPE(thistype)->type_specific.floatformat\n #define TYPE_GNAT_SPECIFIC(thistype) TYPE_MAIN_TYPE(thistype)->type_specific.gnat_stuff\n #define TYPE_DESCRIPTIVE_TYPE(thistype) TYPE_GNAT_SPECIFIC(thistype)->descriptive_type\n@@ -1553,6 +1571,8 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n #define TYPE_FN_FIELD_VOFFSET(thisfn, n) ((thisfn)[n].voffset-2)\n #define TYPE_FN_FIELD_VIRTUAL_P(thisfn, n) ((thisfn)[n].voffset > 1)\n #define TYPE_FN_FIELD_STATIC_P(thisfn, n) ((thisfn)[n].voffset == VOFFSET_STATIC)\n+#define TYPE_FN_FIELD_DEFAULTED(thisfn, n) ((thisfn)[n].defaulted)\n+#define TYPE_FN_FIELD_DELETED(thisfn, n) ((thisfn)[n].is_deleted)\n \n /* Accessors for typedefs defined by a class.  */\n #define TYPE_TYPEDEF_FIELD_ARRAY(thistype) \\"
    }
  ]
}