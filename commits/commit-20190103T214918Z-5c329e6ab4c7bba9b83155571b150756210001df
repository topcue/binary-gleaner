{
  "sha": "5c329e6ab4c7bba9b83155571b150756210001df",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWMzMjllNmFiNGM3YmJhOWI4MzE1NTU3MWIxNTA3NTYyMTAwMDFkZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-12-27T18:32:01Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-03T21:49:18Z"
    },
    "message": "Use a wrapper for PyErr_Fetch\n\nThis introduces a new class that wraps PyErr_Fetch and PyErr_Restore,\nand then changes all the callers in gdb to use it.  This reduces the\namount of explicit reference counting that is done in the Python code.\nI also found and fixed a latent bug in gdbpy_print_stack -- it was not\ncorrectly checking some error conditions, nor clearing the exception\nwhen needed.\n\ngdb/ChangeLog\n2019-01-03  Tom Tromey  <tom@tromey.com>\n\n\t* python/python.c (gdbpy_enter, ~gdbpy_enter): Update.\n\t(gdbpy_print_stack): Use gdbpy_err_fetch.\n\t* python/python-internal.h (class gdbpy_err_fetch): New class.\n\t(class gdbpy_enter) <m_error_type, m_error_value,\n\tm_error_traceback>: Remove.\n\t<m_error>: New member.\n\t(gdbpy_exception_to_string): Don't declare.\n\t* python/py-varobj.c (py_varobj_iter_next): Use gdbpy_err_fetch.\n\t* python/py-value.c (convert_value_from_python): Use\n\tgdbpy_err_fetch.\n\t* python/py-utils.c (gdbpy_err_fetch::to_string): Rename from\n\tgdbpy_exception_to_string.\n\t(gdbpy_handle_exception): Use gdbpy_err_fetch.\n\t* python/py-prettyprint.c (print_stack_unless_memory_error): Use\n\tgdbpy_err_fetch.",
    "tree": {
      "sha": "35725c6442fabe48ff6f0b573eb6d4985f215618",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/35725c6442fabe48ff6f0b573eb6d4985f215618"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5c329e6ab4c7bba9b83155571b150756210001df",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c329e6ab4c7bba9b83155571b150756210001df",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5c329e6ab4c7bba9b83155571b150756210001df",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c329e6ab4c7bba9b83155571b150756210001df/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "169bb27bce3dc43b2bb5f6abf7fc21c19de5454a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/169bb27bce3dc43b2bb5f6abf7fc21c19de5454a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/169bb27bce3dc43b2bb5f6abf7fc21c19de5454a"
    }
  ],
  "stats": {
    "total": 194,
    "additions": 121,
    "deletions": 73
  },
  "files": [
    {
      "sha": "af27de2e4324b4c1c2542e8d823a1ffc9e694105",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c329e6ab4c7bba9b83155571b150756210001df/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c329e6ab4c7bba9b83155571b150756210001df/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5c329e6ab4c7bba9b83155571b150756210001df",
      "patch": "@@ -1,3 +1,21 @@\n+2019-01-03  Tom Tromey  <tom@tromey.com>\n+\n+\t* python/python.c (gdbpy_enter, ~gdbpy_enter): Update.\n+\t(gdbpy_print_stack): Use gdbpy_err_fetch.\n+\t* python/python-internal.h (class gdbpy_err_fetch): New class.\n+\t(class gdbpy_enter) <m_error_type, m_error_value,\n+\tm_error_traceback>: Remove.\n+\t<m_error>: New member.\n+\t(gdbpy_exception_to_string): Don't declare.\n+\t* python/py-varobj.c (py_varobj_iter_next): Use gdbpy_err_fetch.\n+\t* python/py-value.c (convert_value_from_python): Use\n+\tgdbpy_err_fetch.\n+\t* python/py-utils.c (gdbpy_err_fetch::to_string): Rename from\n+\tgdbpy_exception_to_string.\n+\t(gdbpy_handle_exception): Use gdbpy_err_fetch.\n+\t* python/py-prettyprint.c (print_stack_unless_memory_error): Use\n+\tgdbpy_err_fetch.\n+\n 2019-01-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* linux-nat.c (delete_lwp_cleanup): Delete."
    },
    {
      "sha": "ac0506f3e11eeb56be9252dd8ca481778d264bb8",
      "filename": "gdb/python/py-prettyprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 10,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/py-prettyprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/py-prettyprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-prettyprint.c?ref=5c329e6ab4c7bba9b83155571b150756210001df",
      "patch": "@@ -259,16 +259,8 @@ print_stack_unless_memory_error (struct ui_file *stream)\n {\n   if (PyErr_ExceptionMatches (gdbpy_gdb_memory_error))\n     {\n-      PyObject *type, *value, *trace;\n-\n-      PyErr_Fetch (&type, &value, &trace);\n-\n-      gdbpy_ref<> type_ref (type);\n-      gdbpy_ref<> value_ref (value);\n-      gdbpy_ref<> trace_ref (trace);\n-\n-      gdb::unique_xmalloc_ptr<char>\n-\tmsg (gdbpy_exception_to_string (type, value));\n+      gdbpy_err_fetch fetched_error;\n+      gdb::unique_xmalloc_ptr<char> msg = fetched_error.to_string ();\n \n       if (msg == NULL || *msg == '\\0')\n \tfprintf_filtered (stream, _(\"<error reading variable>\"));"
    },
    {
      "sha": "0f838c2baea76e1365c2f6aa07effc4dc7926ed4",
      "filename": "gdb/python/py-utils.c",
      "status": "modified",
      "additions": 25,
      "deletions": 33,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/py-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/py-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-utils.c?ref=5c329e6ab4c7bba9b83155571b150756210001df",
      "patch": "@@ -203,28 +203,33 @@ gdbpy_obj_to_string (PyObject *obj)\n   return NULL;\n }\n \n-/* Return the string representation of the exception represented by\n-   TYPE, VALUE which is assumed to have been obtained with PyErr_Fetch,\n-   i.e., the error indicator is currently clear.\n-   If the result is NULL a python error occurred, the caller must clear it.  */\n+/* See python-internal.h.  */\n \n gdb::unique_xmalloc_ptr<char>\n-gdbpy_exception_to_string (PyObject *ptype, PyObject *pvalue)\n+gdbpy_err_fetch::to_string () const\n {\n   /* There are a few cases to consider.\n      For example:\n-     pvalue is a string when PyErr_SetString is used.\n-     pvalue is not a string when raise \"foo\" is used, instead it is None\n-     and ptype is \"foo\".\n-     So the algorithm we use is to print `str (pvalue)' if it's not\n-     None, otherwise we print `str (ptype)'.\n+     value is a string when PyErr_SetString is used.\n+     value is not a string when raise \"foo\" is used, instead it is None\n+     and type is \"foo\".\n+     So the algorithm we use is to print `str (value)' if it's not\n+     None, otherwise we print `str (type)'.\n      Using str (aka PyObject_Str) will fetch the error message from\n      gdb.GdbError (\"message\").  */\n \n-  if (pvalue && pvalue != Py_None)\n-    return gdbpy_obj_to_string (pvalue);\n+  if (m_error_value && m_error_value != Py_None)\n+    return gdbpy_obj_to_string (m_error_value);\n   else\n-    return gdbpy_obj_to_string (ptype);\n+    return gdbpy_obj_to_string (m_error_type);\n+}\n+\n+/* See python-internal.h.  */\n+\n+gdb::unique_xmalloc_ptr<char>\n+gdbpy_err_fetch::type_to_string () const\n+{\n+  return gdbpy_obj_to_string (m_error_type);\n }\n \n /* Convert a GDB exception to the appropriate Python exception.\n@@ -394,16 +399,8 @@ gdb_pymodule_addobject (PyObject *module, const char *name, PyObject *object)\n void\n gdbpy_handle_exception ()\n {\n-  PyObject *ptype, *pvalue, *ptraceback;\n-\n-  PyErr_Fetch (&ptype, &pvalue, &ptraceback);\n-\n-  /* Try to fetch an error message contained within ptype, pvalue.\n-     When fetching the error message we need to make our own copy,\n-     we no longer own ptype, pvalue after the call to PyErr_Restore.  */\n-\n-  gdb::unique_xmalloc_ptr<char>\n-    msg (gdbpy_exception_to_string (ptype, pvalue));\n+  gdbpy_err_fetch fetched_error;\n+  gdb::unique_xmalloc_ptr<char> msg = fetched_error.to_string ();\n \n   if (msg == NULL)\n     {\n@@ -422,23 +419,18 @@ gdbpy_handle_exception ()\n      for user errors.  However, a missing message for gdb.GdbError\n      exceptions is arguably a bug, so we flag it as such.  */\n \n-  if (PyErr_GivenExceptionMatches (ptype, PyExc_KeyboardInterrupt))\n+  if (fetched_error.type_matches (PyExc_KeyboardInterrupt))\n     throw_quit (\"Quit\");\n-  else if (! PyErr_GivenExceptionMatches (ptype, gdbpy_gdberror_exc)\n-      || msg == NULL || *msg == '\\0')\n+  else if (! fetched_error.type_matches (gdbpy_gdberror_exc)\n+\t   || msg == NULL || *msg == '\\0')\n     {\n-      PyErr_Restore (ptype, pvalue, ptraceback);\n+      fetched_error.restore ();\n       gdbpy_print_stack ();\n       if (msg != NULL && *msg != '\\0')\n \terror (_(\"Error occurred in Python: %s\"), msg.get ());\n       else\n \terror (_(\"Error occurred in Python.\"));\n     }\n   else\n-    {\n-      Py_XDECREF (ptype);\n-      Py_XDECREF (pvalue);\n-      Py_XDECREF (ptraceback);\n-      error (\"%s\", msg.get ());\n-    }\n+    error (\"%s\", msg.get ());\n }"
    },
    {
      "sha": "9cc56e6cd1d1494a83b91cdcb9831cf14d8d271f",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=5c329e6ab4c7bba9b83155571b150756210001df",
      "patch": "@@ -1661,9 +1661,7 @@ convert_value_from_python (PyObject *obj)\n \t         ULONGEST instead.  */\n \t      if (PyErr_ExceptionMatches (PyExc_OverflowError))\n \t\t{\n-\t\t  PyObject *etype, *evalue, *etraceback;\n-\n-\t\t  PyErr_Fetch (&etype, &evalue, &etraceback);\n+\t\t  gdbpy_err_fetch fetched_error;\n \t\t  gdbpy_ref<> zero (PyInt_FromLong (0));\n \n \t\t  /* Check whether obj is positive.  */\n@@ -1676,8 +1674,10 @@ convert_value_from_python (PyObject *obj)\n \t\t\tvalue = value_from_ulongest (builtin_type_upylong, ul);\n \t\t    }\n \t\t  else\n-\t\t    /* There's nothing we can do.  */\n-\t\t    PyErr_Restore (etype, evalue, etraceback);\n+\t\t    {\n+\t\t      /* There's nothing we can do.  */\n+\t\t      fetched_error.restore ();\n+\t\t    }\n \t\t}\n \t    }\n \t  else"
    },
    {
      "sha": "274b2dedf86f2217ad5ab8e488cef0a7265bdf8d",
      "filename": "gdb/python/py-varobj.c",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/py-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/py-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-varobj.c?ref=5c329e6ab4c7bba9b83155571b150756210001df",
      "patch": "@@ -70,14 +70,8 @@ py_varobj_iter_next (struct varobj_iter *self)\n       /* If we got a memory error, just use the text as the item.  */\n       if (PyErr_ExceptionMatches (gdbpy_gdb_memory_error))\n \t{\n-\t  PyObject *type, *value, *trace;\n-\n-\t  PyErr_Fetch (&type, &value, &trace);\n-\t  gdb::unique_xmalloc_ptr<char>\n-\t    value_str (gdbpy_exception_to_string (type, value));\n-\t  Py_XDECREF (type);\n-\t  Py_XDECREF (value);\n-\t  Py_XDECREF (trace);\n+\t  gdbpy_err_fetch fetched_error;\n+\t  gdb::unique_xmalloc_ptr<char> value_str = fetched_error.to_string ();\n \t  if (value_str == NULL)\n \t    {\n \t      gdbpy_print_stack ();"
    },
    {
      "sha": "b5d9840eb74e1c78dc23725f3af10af766d81654",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 58,
      "deletions": 3,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=5c329e6ab4c7bba9b83155571b150756210001df",
      "patch": "@@ -591,6 +591,60 @@ int gdbpy_initialize_xmethods (void)\n int gdbpy_initialize_unwind (void)\n   CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n \n+/* A wrapper for PyErr_Fetch that handles reference counting for the\n+   caller.  */\n+class gdbpy_err_fetch\n+{\n+public:\n+\n+  gdbpy_err_fetch ()\n+  {\n+    PyErr_Fetch (&m_error_type, &m_error_value, &m_error_traceback);\n+  }\n+\n+  ~gdbpy_err_fetch ()\n+  {\n+    Py_XDECREF (m_error_type);\n+    Py_XDECREF (m_error_value);\n+    Py_XDECREF (m_error_traceback);\n+  }\n+\n+  /* Call PyErr_Restore using the values stashed in this object.\n+     After this call, this object is invalid and neither the to_string\n+     nor restore methods may be used again.  */\n+\n+  void restore ()\n+  {\n+    PyErr_Restore (m_error_type, m_error_value, m_error_traceback);\n+    m_error_type = nullptr;\n+    m_error_value = nullptr;\n+    m_error_traceback = nullptr;\n+  }\n+\n+  /* Return the string representation of the exception represented by\n+     this object.  If the result is NULL a python error occurred, the\n+     caller must clear it.  */\n+\n+  gdb::unique_xmalloc_ptr<char> to_string () const;\n+\n+  /* Return the string representation of the type of the exception\n+     represented by this object.  If the result is NULL a python error\n+     occurred, the caller must clear it.  */\n+\n+  gdb::unique_xmalloc_ptr<char> type_to_string () const;\n+\n+  /* Return true if the stored type matches TYPE, false otherwise.  */\n+\n+  bool type_matches (PyObject *type) const\n+  {\n+    return PyErr_GivenExceptionMatches (m_error_type, type);\n+  }\n+\n+private:\n+\n+  PyObject *m_error_type, *m_error_value, *m_error_traceback;\n+};\n+\n /* Called before entering the Python interpreter to install the\n    current language and architecture to be used for Python values.\n    Also set the active extension language for GDB so that SIGINT's\n@@ -612,7 +666,10 @@ class gdbpy_enter\n   PyGILState_STATE m_state;\n   struct gdbarch *m_gdbarch;\n   const struct language_defn *m_language;\n-  PyObject *m_error_type, *m_error_value, *m_error_traceback;\n+\n+  /* An optional is used here because we don't want to call\n+     PyErr_Fetch too early.  */\n+  gdb::optional<gdbpy_err_fetch> m_error;\n };\n \n /* Like gdbpy_enter, but takes a varobj.  This is a subclass just to\n@@ -665,8 +722,6 @@ gdb::unique_xmalloc_ptr<char> python_string_to_host_string (PyObject *obj);\n gdbpy_ref<> host_string_to_python_string (const char *str);\n int gdbpy_is_string (PyObject *obj);\n gdb::unique_xmalloc_ptr<char> gdbpy_obj_to_string (PyObject *obj);\n-gdb::unique_xmalloc_ptr<char> gdbpy_exception_to_string (PyObject *ptype,\n-\t\t\t\t\t\t\t PyObject *pvalue);\n \n int gdbpy_is_lazy_string (PyObject *result);\n void gdbpy_extract_lazy_string (PyObject *string, CORE_ADDR *addr,"
    },
    {
      "sha": "d8505e968d6f4de6e18af69222f493b7ac473411",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 11,
      "deletions": 14,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c329e6ab4c7bba9b83155571b150756210001df/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=5c329e6ab4c7bba9b83155571b150756210001df",
      "patch": "@@ -214,7 +214,7 @@ gdbpy_enter::gdbpy_enter  (struct gdbarch *gdbarch,\n   python_language = language;\n \n   /* Save it and ensure ! PyErr_Occurred () afterwards.  */\n-  PyErr_Fetch (&m_error_type, &m_error_value, &m_error_traceback);\n+  m_error.emplace ();\n }\n \n gdbpy_enter::~gdbpy_enter ()\n@@ -227,7 +227,7 @@ gdbpy_enter::~gdbpy_enter ()\n       warning (_(\"internal error: Unhandled Python exception\"));\n     }\n \n-  PyErr_Restore (m_error_type, m_error_value, m_error_traceback);\n+  m_error->restore ();\n \n   PyGILState_Release (m_state);\n   python_gdbarch = m_gdbarch;\n@@ -1234,24 +1234,25 @@ gdbpy_print_stack (void)\n   /* Print \"message\", just error print message.  */\n   else\n     {\n-      PyObject *ptype, *pvalue, *ptraceback;\n+      gdbpy_err_fetch fetched_error;\n \n-      PyErr_Fetch (&ptype, &pvalue, &ptraceback);\n-\n-      /* Fetch the error message contained within ptype, pvalue.  */\n-      gdb::unique_xmalloc_ptr<char>\n-\tmsg (gdbpy_exception_to_string (ptype, pvalue));\n-      gdb::unique_xmalloc_ptr<char> type (gdbpy_obj_to_string (ptype));\n+      gdb::unique_xmalloc_ptr<char> msg = fetched_error.to_string ();\n+      gdb::unique_xmalloc_ptr<char> type;\n+      /* Don't compute TYPE if MSG already indicates that there is an\n+\t error.  */\n+      if (msg != NULL)\n+\ttype = fetched_error.type_to_string ();\n \n       TRY\n \t{\n-\t  if (msg == NULL)\n+\t  if (msg == NULL || type == NULL)\n \t    {\n \t      /* An error occurred computing the string representation of the\n \t\t error message.  */\n \t      fprintf_filtered (gdb_stderr,\n \t\t\t\t_(\"Error occurred computing Python error\" \\\n \t\t\t\t  \"message.\\n\"));\n+\t      PyErr_Clear ();\n \t    }\n \t  else\n \t    fprintf_filtered (gdb_stderr, \"Python Exception %s %s: \\n\",\n@@ -1261,10 +1262,6 @@ gdbpy_print_stack (void)\n \t{\n \t}\n       END_CATCH\n-\n-      Py_XDECREF (ptype);\n-      Py_XDECREF (pvalue);\n-      Py_XDECREF (ptraceback);\n     }\n }\n "
    }
  ]
}