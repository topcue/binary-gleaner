{
  "sha": "ccf61261eb8cce869ae4452de547a5f3afb074e4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2NmNjEyNjFlYjhjY2U4NjlhZTQ0NTJkZTU0N2E1ZjNhZmIwNzRlNA==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-08-21T14:32:20Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-08-21T14:32:20Z"
    },
    "message": "Fix problems with the AArch64 linker exposed by testing it with sanitization enabled.\n\nbfd\t* elfnn-aarch64.c (_bfd_aarch64_erratum_835769_scan): Only sort\n\tthe data map if there are entries in it.\n\t(_bfd_aarch64_erratum_843419_scan): Likewise.\n\nopcodes\t* aarch64-dis.c (get_sym_code_type): Return FALSE for non-ELF\n\tsymbols.",
    "tree": {
      "sha": "1f084a53751b79a65fb94a37f80ef74084c76c86",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1f084a53751b79a65fb94a37f80ef74084c76c86"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ccf61261eb8cce869ae4452de547a5f3afb074e4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ccf61261eb8cce869ae4452de547a5f3afb074e4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ccf61261eb8cce869ae4452de547a5f3afb074e4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ccf61261eb8cce869ae4452de547a5f3afb074e4/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "02391b8be4fcb3366c23ed53e7e9aaeef734f78d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02391b8be4fcb3366c23ed53e7e9aaeef734f78d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/02391b8be4fcb3366c23ed53e7e9aaeef734f78d"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 26,
    "deletions": 5
  },
  "files": [
    {
      "sha": "d7853371c6a23f12a642940de5fb692b14caec13",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccf61261eb8cce869ae4452de547a5f3afb074e4/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccf61261eb8cce869ae4452de547a5f3afb074e4/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=ccf61261eb8cce869ae4452de547a5f3afb074e4",
      "patch": "@@ -1,3 +1,9 @@\n+2020-08-21  Nick Clifton  <nickc@redhat.com>\n+\n+\t* elfnn-aarch64.c (_bfd_aarch64_erratum_835769_scan): Only sort\n+\tthe data map if there are entries in it.\n+\t(_bfd_aarch64_erratum_843419_scan): Likewise.\n+\n 2020-08-21  Jan Beulich  <jbeulich@suse.com>\n \n \t* peXXigen.c (_bfd_XX_bfd_copy_private_bfd_data_common): Check"
    },
    {
      "sha": "9b0b51b4fb0199d39dd1c42a88646b4666bcdd78",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccf61261eb8cce869ae4452de547a5f3afb074e4/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccf61261eb8cce869ae4452de547a5f3afb074e4/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=ccf61261eb8cce869ae4452de547a5f3afb074e4",
      "patch": "@@ -3925,8 +3925,9 @@ _bfd_aarch64_erratum_835769_scan (bfd *input_bfd,\n \n       sec_data = elf_aarch64_section_data (section);\n \n-      qsort (sec_data->map, sec_data->mapcount,\n-\t     sizeof (elf_aarch64_section_map), elf_aarch64_compare_mapping);\n+      if (sec_data->mapcount)\n+\tqsort (sec_data->map, sec_data->mapcount,\n+\t       sizeof (elf_aarch64_section_map), elf_aarch64_compare_mapping);\n \n       for (span = 0; span < sec_data->mapcount; span++)\n \t{\n@@ -4209,8 +4210,9 @@ _bfd_aarch64_erratum_843419_scan (bfd *input_bfd, asection *section,\n \n       sec_data = elf_aarch64_section_data (section);\n \n-      qsort (sec_data->map, sec_data->mapcount,\n-\t     sizeof (elf_aarch64_section_map), elf_aarch64_compare_mapping);\n+      if (sec_data->mapcount)\n+\tqsort (sec_data->map, sec_data->mapcount,\n+\t       sizeof (elf_aarch64_section_map), elf_aarch64_compare_mapping);\n \n       for (span = 0; span < sec_data->mapcount; span++)\n \t{"
    },
    {
      "sha": "55ea7c7f78374dde6a5d33420135dee85a900a43",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccf61261eb8cce869ae4452de547a5f3afb074e4/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccf61261eb8cce869ae4452de547a5f3afb074e4/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=ccf61261eb8cce869ae4452de547a5f3afb074e4",
      "patch": "@@ -1,3 +1,8 @@\n+2020-08-21  Nick Clifton  <nickc@redhat.com>\n+\n+\t* aarch64-dis.c (get_sym_code_type): Return FALSE for non-ELF\n+\tsymbols.\n+\n 2020-08-21  Cooper Qu  <cooper.qu@linux.alibaba.com>\n \n \t* csky-opc.h (csky_v2_opcodes): Add two operands form for bloop."
    },
    {
      "sha": "326fabb71687d18d911e1de0ac4b7495b01d832f",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ccf61261eb8cce869ae4452de547a5f3afb074e4/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ccf61261eb8cce869ae4452de547a5f3afb074e4/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=ccf61261eb8cce869ae4452de547a5f3afb074e4",
      "patch": "@@ -3321,6 +3321,7 @@ static int\n get_sym_code_type (struct disassemble_info *info, int n,\n \t\t   enum map_type *map_type)\n {\n+  asymbol * as;\n   elf_symbol_type *es;\n   unsigned int type;\n   const char *name;\n@@ -3329,7 +3330,14 @@ get_sym_code_type (struct disassemble_info *info, int n,\n   if (info->section != NULL && info->section != info->symtab[n]->section)\n     return FALSE;\n \n-  es = *(elf_symbol_type **)(info->symtab + n);\n+  if (n >= info->symtab_size)\n+    return FALSE;\n+\n+  as = info->symtab[n];\n+  if (bfd_asymbol_flavour (as) != bfd_target_elf_flavour)\n+    return FALSE;\n+  es = (elf_symbol_type *) as;\n+\n   type = ELF_ST_TYPE (es->internal_elf_sym.st_info);\n \n   /* If the symbol has function type then use that.  */"
    }
  ]
}