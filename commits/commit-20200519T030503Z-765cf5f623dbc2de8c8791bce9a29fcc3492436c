{
  "sha": "765cf5f623dbc2de8c8791bce9a29fcc3492436c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzY1Y2Y1ZjYyM2RiYzJkZThjODc5MWJjZTlhMjlmY2MzNDkyNDM2Yw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-19T03:05:03Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-19T03:05:03Z"
    },
    "message": "Use bfd_get_filename throughout bfd\n\n\t* aix5ppc-core.c (xcoff64_core_file_matches_executable_p): Use\n\tbfd_get_filename rather than accessing bfd->filename directly.\n\t* aout-target.h (MY (object_p)): Likewise.\n\t* aoutx.h (aout_find_nearest_line, aout_link_write_symbols): Likewise.\n\t* archive.c (find_nested_archive, _bfd_generic_read_ar_hdr_mag),\n\t(_bfd_construct_extended_name_table, _bfd_bsd44_write_ar_hdr),\n\t(_bfd_archive_bsd44_construct_extended_name_table),\n\t(_bfd_write_archive_contents, _bfd_compute_and_write_armap),\n\t(_bfd_bsd_write_armap): Likewise.\n\t* bfd.c (bfd_errmsg, _bfd_doprnt): Likewise.\n\t* cache.c (bfd_open_file): Likewise.\n\t* ecoff.c (_bfd_ecoff_write_armap): Likewise.\n\t* ecofflink.c (bfd_ecoff_debug_accumulate_other): Likewise.\n\t* elf32-bfin.c (bfinfdpic_relocate_section): Likewise.\n\t* elf32-frv.c (elf32_frv_relocate_section): Likewise.\n\t* elf32-hppa.c (elf32_hppa_final_link): Likewise.\n\t* elf32-nds32.c (nds32_elf_output_symbol_hook),\n\t(patch_tls_desc_to_ie): Likewise.\n\t* elf32-spu.c (sort_bfds, print_one_overlay_section),\n\t(spu_elf_auto_overlay): Likewise.\n\t* elf64-hppa.c (elf_hppa_final_link): Likewise.\n\t* elf64-ia64-vms.c (elf64_ia64_size_dynamic_sections): Likewise.\n\t* elfcore.h (elf_core_file_matches_executable_p): Likewise.\n\t* elflink.c (bfd_elf_size_dynamic_sections),\n\t(elf_link_input_bfd): Likewise.\n\t* linker.c (_bfd_generic_link_output_symbols): Likewise.\n\t* mach-o.c (bfd_mach_o_follow_dsym),\n\t(bfd_mach_o_close_and_cleanup): Likewise.\n\t* opncls.c (_bfd_delete_bfd, _maybe_make_executable),\n\t(find_separate_debug_file, get_build_id_name): Likewise.\n\t* pdp11.c (aout_find_nearest_line, aout_link_write_symbols): Likewise.\n\t* plugin.c (bfd_plugin_open_input): Likewise.\n\t* rs6000-core.c (rs6000coff_core_file_matches_executable_p): Likewise.\n\t* som.c (som_write_armap): Likewise.\n\t* srec.c (srec_write_record, srec_write_symbols): Likewise.\n\t* vms-lib.c (_bfd_vms_lib_get_imagelib_file),\n\t(_bfd_vms_lib_write_archive_contents): Likewise.\n\t* xcofflink.c (xcoff_link_add_dynamic_symbols): Likewise.",
    "tree": {
      "sha": "1e87eff4df1606a321398a0a43997673ffc0a0d0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1e87eff4df1606a321398a0a43997673ffc0a0d0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/765cf5f623dbc2de8c8791bce9a29fcc3492436c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/765cf5f623dbc2de8c8791bce9a29fcc3492436c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/765cf5f623dbc2de8c8791bce9a29fcc3492436c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/765cf5f623dbc2de8c8791bce9a29fcc3492436c/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0e1d094e96739f71f5041731a1769021421a71ca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e1d094e96739f71f5041731a1769021421a71ca",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0e1d094e96739f71f5041731a1769021421a71ca"
    }
  ],
  "stats": {
    "total": 264,
    "additions": 158,
    "deletions": 106
  },
  "files": [
    {
      "sha": "d9892235721b13537f30dcbeeb8ccb2785a56ee0",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -1,3 +1,44 @@\n+2020-05-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* aix5ppc-core.c (xcoff64_core_file_matches_executable_p): Use\n+\tbfd_get_filename rather than accessing bfd->filename directly.\n+\t* aout-target.h (MY (object_p)): Likewise.\n+\t* aoutx.h (aout_find_nearest_line, aout_link_write_symbols): Likewise.\n+\t* archive.c (find_nested_archive, _bfd_generic_read_ar_hdr_mag),\n+\t(_bfd_construct_extended_name_table, _bfd_bsd44_write_ar_hdr),\n+\t(_bfd_archive_bsd44_construct_extended_name_table),\n+\t(_bfd_write_archive_contents, _bfd_compute_and_write_armap),\n+\t(_bfd_bsd_write_armap): Likewise.\n+\t* bfd.c (bfd_errmsg, _bfd_doprnt): Likewise.\n+\t* cache.c (bfd_open_file): Likewise.\n+\t* ecoff.c (_bfd_ecoff_write_armap): Likewise.\n+\t* ecofflink.c (bfd_ecoff_debug_accumulate_other): Likewise.\n+\t* elf32-bfin.c (bfinfdpic_relocate_section): Likewise.\n+\t* elf32-frv.c (elf32_frv_relocate_section): Likewise.\n+\t* elf32-hppa.c (elf32_hppa_final_link): Likewise.\n+\t* elf32-nds32.c (nds32_elf_output_symbol_hook),\n+\t(patch_tls_desc_to_ie): Likewise.\n+\t* elf32-spu.c (sort_bfds, print_one_overlay_section),\n+\t(spu_elf_auto_overlay): Likewise.\n+\t* elf64-hppa.c (elf_hppa_final_link): Likewise.\n+\t* elf64-ia64-vms.c (elf64_ia64_size_dynamic_sections): Likewise.\n+\t* elfcore.h (elf_core_file_matches_executable_p): Likewise.\n+\t* elflink.c (bfd_elf_size_dynamic_sections),\n+\t(elf_link_input_bfd): Likewise.\n+\t* linker.c (_bfd_generic_link_output_symbols): Likewise.\n+\t* mach-o.c (bfd_mach_o_follow_dsym),\n+\t(bfd_mach_o_close_and_cleanup): Likewise.\n+\t* opncls.c (_bfd_delete_bfd, _maybe_make_executable),\n+\t(find_separate_debug_file, get_build_id_name): Likewise.\n+\t* pdp11.c (aout_find_nearest_line, aout_link_write_symbols): Likewise.\n+\t* plugin.c (bfd_plugin_open_input): Likewise.\n+\t* rs6000-core.c (rs6000coff_core_file_matches_executable_p): Likewise.\n+\t* som.c (som_write_armap): Likewise.\n+\t* srec.c (srec_write_record, srec_write_symbols): Likewise.\n+\t* vms-lib.c (_bfd_vms_lib_get_imagelib_file),\n+\t(_bfd_vms_lib_write_archive_contents): Likewise.\n+\t* xcofflink.c (xcoff_link_add_dynamic_symbols): Likewise.\n+\n 2020-05-19  Alan Modra  <amodra@gmail.com>\n \n \tPR 25713"
    },
    {
      "sha": "ba8a4e0524082994bde27078a91d94ef1f406045",
      "filename": "bfd/aix5ppc-core.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/aix5ppc-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/aix5ppc-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aix5ppc-core.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -288,11 +288,11 @@ xcoff64_core_file_matches_executable_p (bfd *core_bfd, bfd *exec_bfd)\n     }\n \n   str1 = strrchr (path, '/');\n-  str2 = strrchr (exec_bfd->filename, '/');\n+  str2 = strrchr (bfd_get_filename (exec_bfd), '/');\n \n   /* Step over character '/'.  */\n   str1 = str1 != NULL ? str1 + 1 : path;\n-  str2 = str2 != NULL ? str2 + 1 : exec_bfd->filename;\n+  str2 = str2 != NULL ? str2 + 1 : bfd_get_filename (exec_bfd);\n \n   if (strcmp (str1, str2) == 0)\n     return_value = TRUE;"
    },
    {
      "sha": "214c4c5a4917aba3db99eb26ef0dda356fc57c3d",
      "filename": "bfd/aout-target.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/aout-target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/aout-target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aout-target.h?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -180,7 +180,8 @@ MY (object_p) (bfd *abfd)\n #ifndef S_IXUSR\n #define S_IXUSR 0100\t/* Execute by owner.  */\n #endif\n-      if (stat (abfd->filename, &buf) == 0 && (buf.st_mode & S_IXUSR))\n+      if (stat (bfd_get_filename (abfd), &buf) == 0\n+\t  && (buf.st_mode & S_IXUSR) != 0)\n \tabfd->flags |= EXEC_P;\n     }\n #endif /* ENTRY_CAN_BE_ZERO */"
    },
    {
      "sha": "4cf5713c355fc3c6b9d6dfee627d759de8a043fb",
      "filename": "bfd/aoutx.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/aoutx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/aoutx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aoutx.h?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -2686,7 +2686,7 @@ NAME (aout, find_nearest_line) (bfd *abfd,\n   bfd_size_type filelen, funclen;\n   char *buf;\n \n-  *filename_ptr = abfd->filename;\n+  *filename_ptr = bfd_get_filename (abfd);\n   *functionname_ptr = NULL;\n   *line_ptr = 0;\n   if (disriminator_ptr)\n@@ -4846,15 +4846,16 @@ aout_link_write_symbols (struct aout_final_link_info *flaginfo, bfd *input_bfd)\n      discarding such symbols.  */\n   if (strip != strip_all\n       && (strip != strip_some\n-\t  || bfd_hash_lookup (flaginfo->info->keep_hash, input_bfd->filename,\n+\t  || bfd_hash_lookup (flaginfo->info->keep_hash,\n+\t\t\t      bfd_get_filename (input_bfd),\n \t\t\t      FALSE, FALSE) != NULL)\n       && discard != discard_all)\n     {\n       H_PUT_8 (output_bfd, N_TEXT, outsym->e_type);\n       H_PUT_8 (output_bfd, 0, outsym->e_other);\n       H_PUT_16 (output_bfd, 0, outsym->e_desc);\n       strtab_index = add_to_stringtab (output_bfd, flaginfo->strtab,\n-\t\t\t\t       input_bfd->filename, FALSE);\n+\t\t\t\t       bfd_get_filename (input_bfd), FALSE);\n       if (strtab_index == (bfd_size_type) -1)\n \treturn FALSE;\n       PUT_WORD (output_bfd, strtab_index, outsym->e_strx);"
    },
    {
      "sha": "ff64727c44801e1f37d7eacbf8bbd8a0afdfec49",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 20,
      "deletions": 18,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -403,7 +403,7 @@ find_nested_archive (const char *filename, bfd *arch_bfd)\n   bfd *abfd;\n \n   /* PR 15140: Don't allow a nested archive pointing to itself.  */\n-  if (filename_cmp (filename, arch_bfd->filename) == 0)\n+  if (filename_cmp (filename, bfd_get_filename (arch_bfd)) == 0)\n     {\n       bfd_set_error (bfd_error_malformed_archive);\n       return NULL;\n@@ -413,7 +413,7 @@ find_nested_archive (const char *filename, bfd *arch_bfd)\n        abfd != NULL;\n        abfd = abfd->archive_next)\n     {\n-      if (filename_cmp (filename, abfd->filename) == 0)\n+      if (filename_cmp (filename, bfd_get_filename (abfd)) == 0)\n \treturn abfd;\n     }\n   abfd = open_nested_file (filename, arch_bfd);\n@@ -628,7 +628,7 @@ _bfd_generic_read_ar_hdr_mag (bfd *abfd, const char *mag)\n char *\n _bfd_append_relative_path (bfd *arch, char *elt_name)\n {\n-  const char *arch_name = arch->filename;\n+  const char *arch_name = bfd_get_filename (arch);\n   const char *base_name = lbasename (arch_name);\n   size_t prefix_len;\n   char *filename;\n@@ -1564,13 +1564,13 @@ _bfd_construct_extended_name_table (bfd *abfd,\n \n       if (bfd_is_thin_archive (abfd))\n \t{\n-\t  const char *filename = current->filename;\n+\t  const char *filename = bfd_get_filename (current);\n \n \t  /* If the element being added is a member of another archive\n \t     (i.e., we are flattening), use the containing archive's name.  */\n \t  if (current->my_archive\n \t      && ! bfd_is_thin_archive (current->my_archive))\n-\t    filename = current->my_archive->filename;\n+\t    filename = bfd_get_filename (current->my_archive);\n \n \t  /* If the path is the same as the previous path seen,\n \t     reuse it.  This can happen when flattening a thin\n@@ -1583,8 +1583,8 @@ _bfd_construct_extended_name_table (bfd *abfd,\n \t  /* If the path is relative, adjust it relative to\n \t     the containing archive. */\n \t  if (! IS_ABSOLUTE_PATH (filename)\n-\t      && ! IS_ABSOLUTE_PATH (abfd->filename))\n-\t    normal = adjust_relative_path (filename, abfd->filename);\n+\t      && ! IS_ABSOLUTE_PATH (bfd_get_filename (abfd)))\n+\t    normal = adjust_relative_path (filename, bfd_get_filename (abfd));\n \t  else\n \t    normal = filename;\n \n@@ -1598,7 +1598,7 @@ _bfd_construct_extended_name_table (bfd *abfd,\n \t  continue;\n \t}\n \n-      normal = normalize (abfd, current->filename);\n+      normal = normalize (abfd, bfd_get_filename (current));\n       if (normal == NULL)\n \treturn FALSE;\n \n@@ -1655,15 +1655,15 @@ _bfd_construct_extended_name_table (bfd *abfd,\n       const char *normal;\n       unsigned int thislen;\n       long stroff;\n-      const char *filename = current->filename;\n+      const char *filename = bfd_get_filename (current);\n \n       if (bfd_is_thin_archive (abfd))\n \t{\n \t  /* If the element being added is a member of another archive\n \t     (i.e., we are flattening), use the containing archive's name.  */\n \t  if (current->my_archive\n \t      && ! bfd_is_thin_archive (current->my_archive))\n-\t    filename = current->my_archive->filename;\n+\t    filename = bfd_get_filename (current->my_archive);\n \t  /* If the path is the same as the previous path seen,\n \t     reuse it.  This can happen when flattening a thin\n \t     archive that contains other archives.\n@@ -1672,8 +1672,8 @@ _bfd_construct_extended_name_table (bfd *abfd,\n \t  if (last_filename && filename_cmp (last_filename, filename) == 0)\n \t    normal = last_filename;\n \t  else if (! IS_ABSOLUTE_PATH (filename)\n-\t\t   && ! IS_ABSOLUTE_PATH (abfd->filename))\n-\t    normal = adjust_relative_path (filename, abfd->filename);\n+\t\t   && ! IS_ABSOLUTE_PATH (bfd_get_filename (abfd)))\n+\t    normal = adjust_relative_path (filename, bfd_get_filename (abfd));\n \t  else\n \t    normal = filename;\n \t}\n@@ -1741,7 +1741,7 @@ _bfd_archive_bsd44_construct_extended_name_table (bfd *abfd,\n        current != NULL;\n        current = current->archive_next)\n     {\n-      const char *normal = normalize (abfd, current->filename);\n+      const char *normal = normalize (abfd, bfd_get_filename (current));\n       int has_space = 0;\n       unsigned int len;\n \n@@ -1787,7 +1787,7 @@ _bfd_bsd44_write_ar_hdr (bfd *archive, bfd *abfd)\n   if (is_bsd44_extended_name (hdr->ar_name))\n     {\n       /* This is a BSD 4.4 extended name.  */\n-      const char *fullname = normalize (abfd, abfd->filename);\n+      const char *fullname = normalize (abfd, bfd_get_filename (abfd));\n       unsigned int len = strlen (fullname);\n       unsigned int padded_len = (len + 3) & ~3;\n \n@@ -2139,13 +2139,15 @@ _bfd_write_archive_contents (bfd *arch)\n       if (!current->arelt_data)\n \t{\n \t  current->arelt_data =\n-\t    bfd_ar_hdr_from_filesystem (arch, current->filename, current);\n+\t    bfd_ar_hdr_from_filesystem (arch, bfd_get_filename (current),\n+\t\t\t\t\tcurrent);\n \t  if (!current->arelt_data)\n \t    goto input_err;\n \n \t  /* Put in the file name.  */\n \t  BFD_SEND (arch, _bfd_truncate_arname,\n-\t\t    (arch, current->filename, (char *) arch_hdr (current)));\n+\t\t    (arch, bfd_get_filename (current),\n+\t\t     (char *) arch_hdr (current)));\n \t}\n \n       if (makemap && ! hasobjects)\n@@ -2294,7 +2296,7 @@ _bfd_compute_and_write_armap (bfd *arch, unsigned int elength)\n \n   /* Drop all the files called __.SYMDEF, we're going to make our own.  */\n   while (arch->archive_head\n-\t && strcmp (arch->archive_head->filename, \"__.SYMDEF\") == 0)\n+\t && strcmp (bfd_get_filename (arch->archive_head), \"__.SYMDEF\") == 0)\n     arch->archive_head = arch->archive_head->archive_next;\n \n   /* Map over each element.  */\n@@ -2495,7 +2497,7 @@ _bfd_bsd_write_armap (bfd *arch,\n     {\n       struct stat statbuf;\n \n-      if (stat (arch->filename, &statbuf) == 0)\n+      if (stat (bfd_get_filename (arch), &statbuf) == 0)\n \tbfd_ardata (arch)->armap_timestamp = (statbuf.st_mtime\n \t\t\t\t\t      + ARMAP_TIME_OFFSET);\n       uid = getuid();"
    },
    {
      "sha": "84e74a36b838599d5b9e911d449e9892cd34972a",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -787,8 +787,8 @@ bfd_errmsg (bfd_error_type error_tag)\n       char *buf;\n       const char *msg = bfd_errmsg (input_error);\n \n-      if (asprintf (&buf, _(bfd_errmsgs [error_tag]), input_bfd->filename, msg)\n-\t  != -1)\n+      if (asprintf (&buf, _(bfd_errmsgs [error_tag]),\n+\t\t    bfd_get_filename (input_bfd), msg) != -1)\n \treturn buf;\n \n       /* Ick, what to do on out of memory?  */\n@@ -1114,10 +1114,10 @@ _bfd_doprnt (FILE *stream, const char *format, union _bfd_doprnt_args *args)\n \t\t  else if (abfd->my_archive\n \t\t\t   && !bfd_is_thin_archive (abfd->my_archive))\n \t\t    result = fprintf (stream, \"%s(%s)\",\n-\t\t\t\t      abfd->my_archive->filename,\n-\t\t\t\t      abfd->filename);\n+\t\t\t\t      bfd_get_filename (abfd->my_archive),\n+\t\t\t\t      bfd_get_filename (abfd));\n \t\t  else\n-\t\t    result = fprintf (stream, \"%s\", abfd->filename);\n+\t\t    result = fprintf (stream, \"%s\", bfd_get_filename (abfd));\n \t\t}\n \t      else\n \t\tPRINT_TYPE (void *, p);"
    },
    {
      "sha": "93abff33fe21006d3d0d4b707ac5f02c5bc39089",
      "filename": "bfd/cache.c",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cache.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -592,15 +592,17 @@ bfd_open_file (bfd *abfd)\n     {\n     case read_direction:\n     case no_direction:\n-      abfd->iostream = _bfd_real_fopen (abfd->filename, FOPEN_RB);\n+      abfd->iostream = _bfd_real_fopen (bfd_get_filename (abfd), FOPEN_RB);\n       break;\n     case both_direction:\n     case write_direction:\n       if (abfd->opened_once)\n \t{\n-\t  abfd->iostream = _bfd_real_fopen (abfd->filename, FOPEN_RUB);\n+\t  abfd->iostream = _bfd_real_fopen (bfd_get_filename (abfd),\n+\t\t\t\t\t    FOPEN_RUB);\n \t  if (abfd->iostream == NULL)\n-\t    abfd->iostream = _bfd_real_fopen (abfd->filename, FOPEN_WUB);\n+\t    abfd->iostream = _bfd_real_fopen (bfd_get_filename (abfd),\n+\t\t\t\t\t      FOPEN_WUB);\n \t}\n       else\n \t{\n@@ -627,10 +629,11 @@ bfd_open_file (bfd *abfd)\n \t     the --info option.  */\n \t  struct stat s;\n \n-\t  if (stat (abfd->filename, &s) == 0 && s.st_size != 0)\n-\t    unlink_if_ordinary (abfd->filename);\n+\t  if (stat (bfd_get_filename (abfd), &s) == 0 && s.st_size != 0)\n+\t    unlink_if_ordinary (bfd_get_filename (abfd));\n #endif\n-\t  abfd->iostream = _bfd_real_fopen (abfd->filename, FOPEN_WUB);\n+\t  abfd->iostream = _bfd_real_fopen (bfd_get_filename (abfd),\n+\t\t\t\t\t    FOPEN_WUB);\n \t  abfd->opened_once = TRUE;\n \t}\n       break;"
    },
    {
      "sha": "1b0d4233e76be17583ddb8ba383c6406a6b86624",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -3106,7 +3106,7 @@ _bfd_ecoff_write_armap (bfd *abfd,\n      complain that the index is out of date.  Actually, the Ultrix\n      linker just checks the archive name; the GNU linker may check the\n      date.  */\n-  stat (abfd->filename, &statbuf);\n+  stat (bfd_get_filename (abfd), &statbuf);\n   _bfd_ar_spacepad (hdr.ar_date, sizeof (hdr.ar_date), \"%ld\",\n \t\t    (long) (statbuf.st_mtime + 60));\n "
    },
    {
      "sha": "dde5593636acd91acc0afb0590160dd282858296",
      "filename": "bfd/ecofflink.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/ecofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/ecofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecofflink.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -1112,7 +1112,7 @@ bfd_ecoff_debug_accumulate_other (void * handle,\n   fdr.issBase = output_symhdr->issMax;\n   fdr.cbSs = 0;\n   fdr.rss = ecoff_add_string (ainfo, info, output_debug, &fdr,\n-\t\t\t      input_bfd->filename);\n+\t\t\t      bfd_get_filename (input_bfd));\n   if (fdr.rss == -1)\n     return FALSE;\n   fdr.isymBase = output_symhdr->isymMax;"
    },
    {
      "sha": "a51a8e8e9f2d9fdf5dc31ca57f3c3654e2ba4063",
      "filename": "bfd/elf32-bfin.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf32-bfin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf32-bfin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-bfin.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -3015,11 +3015,11 @@ bfinfdpic_relocate_section (bfd * output_bfd,\n \t     input file basename is crt0.o only once.  */\n \t  if (silence_segment_error == 1)\n \t    silence_segment_error =\n-\t      (strlen (input_bfd->filename) == 6\n-\t       && filename_cmp (input_bfd->filename, \"crt0.o\") == 0)\n-\t      || (strlen (input_bfd->filename) > 6\n-\t\t  && filename_cmp (input_bfd->filename\n-\t\t\t\t   + strlen (input_bfd->filename) - 7,\n+\t      (strlen (bfd_get_filename (input_bfd)) == 6\n+\t       && filename_cmp (bfd_get_filename (input_bfd), \"crt0.o\") == 0)\n+\t      || (strlen (bfd_get_filename (input_bfd)) > 6\n+\t\t  && filename_cmp (bfd_get_filename (input_bfd)\n+\t\t\t\t   + strlen (bfd_get_filename (input_bfd)) - 7,\n \t\t\t     \"/crt0.o\") == 0)\n \t      ? -1 : 0;\n #endif"
    },
    {
      "sha": "51ea8fa27ed3e4493caa99a94a7eb2fb1282cb51",
      "filename": "bfd/elf32-frv.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf32-frv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf32-frv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-frv.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -3896,11 +3896,11 @@ elf32_frv_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t     input file basename is crt0.o only once.  */\n \t  if (silence_segment_error == 1)\n \t    silence_segment_error =\n-\t      (strlen (input_bfd->filename) == 6\n-\t       && filename_cmp (input_bfd->filename, \"crt0.o\") == 0)\n-\t      || (strlen (input_bfd->filename) > 6\n-\t\t  && filename_cmp (input_bfd->filename\n-\t\t\t\t   + strlen (input_bfd->filename) - 7,\n+\t      (strlen (bfd_get_filename (input_bfd)) == 6\n+\t       && filename_cmp (bfd_get_filename (input_bfd), \"crt0.o\") == 0)\n+\t      || (strlen (bfd_get_filename (input_bfd)) > 6\n+\t\t  && filename_cmp (bfd_get_filename (input_bfd)\n+\t\t\t\t   + strlen (bfd_get_filename (input_bfd)) - 7,\n \t\t\t     \"/crt0.o\") == 0)\n \t      ? -1 : 0;\n \t  if (!silence_segment_error"
    },
    {
      "sha": "4b76f941adf9d2832d7e7ea75135a7d3350e08fd",
      "filename": "bfd/elf32-hppa.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf32-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf32-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-hppa.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -3196,7 +3196,7 @@ elf32_hppa_final_link (bfd *abfd, struct bfd_link_info *info)\n   /* Do not attempt to sort non-regular files.  This is here\n      especially for configure scripts and kernel builds which run\n      tests with \"ld [...] -o /dev/null\".  */\n-  if (stat (abfd->filename, &buf) != 0\n+  if (stat (bfd_get_filename (abfd), &buf) != 0\n       || !S_ISREG(buf.st_mode))\n     return TRUE;\n "
    },
    {
      "sha": "a5a681a946d53d51726850c711da57fa29a32d4f",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -4862,7 +4862,7 @@ nds32_elf_output_symbol_hook (struct bfd_link_info *info,\n       if (bfd_is_const_section (input_sec))\n \tsource = input_sec->name;\n       else\n-\tsource = input_sec->owner->filename;\n+\tsource = bfd_get_filename (input_sec->owner);\n \n       fprintf (sym_ld_script, \"\\t%s = 0x%08lx;\\t /* %s */\\n\",\n \t       h->root.root.string,\n@@ -5047,7 +5047,7 @@ patch_tls_desc_to_ie (bfd_byte *contents, Elf_Internal_Rela *rel, bfd *ibfd)\n \n   if (!rz)\n     {\n-      printf (\"%s: %s @ 0x%08x\\n\", __func__, ibfd->filename,\n+      printf (\"%s: %s @ 0x%08x\\n\", __func__, bfd_get_filename (ibfd),\n \t      (int) rel->r_offset);\n       BFD_ASSERT(0); /* Unsupported pattern.  */\n     }"
    },
    {
      "sha": "193438c7979e1b523cb10fd88251a1996167995e",
      "filename": "bfd/elf32-spu.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf32-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf32-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-spu.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -4103,7 +4103,7 @@ sort_bfds (const void *a, const void *b)\n   bfd *const *abfd1 = a;\n   bfd *const *abfd2 = b;\n \n-  return filename_cmp ((*abfd1)->filename, (*abfd2)->filename);\n+  return filename_cmp (bfd_get_filename (*abfd1), bfd_get_filename (*abfd2));\n }\n \n static unsigned int\n@@ -4123,9 +4123,9 @@ print_one_overlay_section (FILE *script,\n \n       if (fprintf (script, \"   %s%c%s (%s)\\n\",\n \t\t   (sec->owner->my_archive != NULL\n-\t\t    ? sec->owner->my_archive->filename : \"\"),\n+\t\t    ? bfd_get_filename (sec->owner->my_archive) : \"\"),\n \t\t   info->path_separator,\n-\t\t   sec->owner->filename,\n+\t\t   bfd_get_filename (sec->owner),\n \t\t   sec->name) <= 0)\n \treturn -1;\n       if (sec->segment_mark)\n@@ -4137,9 +4137,9 @@ print_one_overlay_section (FILE *script,\n \t      sec = call_fun->sec;\n \t      if (fprintf (script, \"   %s%c%s (%s)\\n\",\n \t\t\t   (sec->owner->my_archive != NULL\n-\t\t\t    ? sec->owner->my_archive->filename : \"\"),\n+\t\t\t    ? bfd_get_filename (sec->owner->my_archive) : \"\"),\n \t\t\t   info->path_separator,\n-\t\t\t   sec->owner->filename,\n+\t\t\t   bfd_get_filename (sec->owner),\n \t\t\t   sec->name) <= 0)\n \t\treturn -1;\n \t      for (call = call_fun->call_list; call; call = call->next)\n@@ -4155,9 +4155,9 @@ print_one_overlay_section (FILE *script,\n       if (sec != NULL\n \t  && fprintf (script, \"   %s%c%s (%s)\\n\",\n \t\t      (sec->owner->my_archive != NULL\n-\t\t       ? sec->owner->my_archive->filename : \"\"),\n+\t\t       ? bfd_get_filename (sec->owner->my_archive) : \"\"),\n \t\t      info->path_separator,\n-\t\t      sec->owner->filename,\n+\t\t      bfd_get_filename (sec->owner),\n \t\t      sec->name) <= 0)\n \treturn -1;\n \n@@ -4172,9 +4172,9 @@ print_one_overlay_section (FILE *script,\n \t      if (sec != NULL\n \t\t  && fprintf (script, \"   %s%c%s (%s)\\n\",\n \t\t\t      (sec->owner->my_archive != NULL\n-\t\t\t       ? sec->owner->my_archive->filename : \"\"),\n+\t\t\t       ? bfd_get_filename (sec->owner->my_archive) : \"\"),\n \t\t\t      info->path_separator,\n-\t\t\t      sec->owner->filename,\n+\t\t\t      bfd_get_filename (sec->owner),\n \t\t\t      sec->name) <= 0)\n \t\treturn -1;\n \t      for (call = call_fun->call_list; call; call = call->next)\n@@ -4335,18 +4335,19 @@ spu_elf_auto_overlay (struct bfd_link_info *info)\n \n       qsort (bfd_arr, bfd_count, sizeof (*bfd_arr), sort_bfds);\n       for (i = 1; i < bfd_count; ++i)\n-\tif (filename_cmp (bfd_arr[i - 1]->filename, bfd_arr[i]->filename) == 0)\n+\tif (filename_cmp (bfd_get_filename (bfd_arr[i - 1]),\n+\t\t\t  bfd_get_filename (bfd_arr[i])) == 0)\n \t  {\n \t    if (bfd_arr[i - 1]->my_archive == bfd_arr[i]->my_archive)\n \t      {\n \t\tif (bfd_arr[i - 1]->my_archive && bfd_arr[i]->my_archive)\n \t\t  /* xgettext:c-format */\n \t\t  info->callbacks->einfo (_(\"%s duplicated in %s\\n\"),\n-\t\t\t\t\t  bfd_arr[i]->filename,\n-\t\t\t\t\t  bfd_arr[i]->my_archive->filename);\n+\t\t\t\t\t  bfd_get_filename (bfd_arr[i]),\n+\t\t\t\t\t  bfd_get_filename (bfd_arr[i]->my_archive));\n \t\telse\n \t\t  info->callbacks->einfo (_(\"%s duplicated\\n\"),\n-\t\t\t\t\t  bfd_arr[i]->filename);\n+\t\t\t\t\t  bfd_get_filename (bfd_arr[i]));\n \t\tok = FALSE;\n \t      }\n \t  }"
    },
    {
      "sha": "0fdbea45cce5e8cf9912d5e3b441c91c23f53ff0",
      "filename": "bfd/elf64-hppa.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf64-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf64-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-hppa.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -3040,7 +3040,7 @@ elf_hppa_final_link (bfd *abfd, struct bfd_link_info *info)\n   /* Do not attempt to sort non-regular files.  This is here\n      especially for configure scripts and kernel builds which run\n      tests with \"ld [...] -o /dev/null\".  */\n-  if (stat (abfd->filename, &buf) != 0\n+  if (stat (bfd_get_filename (abfd), &buf) != 0\n       || !S_ISREG(buf.st_mode))\n     return TRUE;\n "
    },
    {
      "sha": "6fa116f610eea6cd59e36f8e94cfca8f9e495f59",
      "filename": "bfd/elf64-ia64-vms.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf64-ia64-vms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elf64-ia64-vms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ia64-vms.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -2844,7 +2844,7 @@ elf64_ia64_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t\t\t\t\t   elf_ia64_vms_ident (abfd)))\n \t    return FALSE;\n \n-\t  soname = vms_get_module_name (abfd->filename, TRUE);\n+\t  soname = vms_get_module_name (bfd_get_filename (abfd), TRUE);\n \t  if (soname == NULL)\n \t    return FALSE;\n \t  strindex = dynstrsec->size;"
    },
    {
      "sha": "0339a671fc7fdb7371d3771581870a107ec00eeb",
      "filename": "bfd/elfcore.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elfcore.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elfcore.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcore.h?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -61,9 +61,9 @@ elf_core_file_matches_executable_p (bfd *core_bfd, bfd *exec_bfd)\n   corename = elf_tdata (core_bfd)->core->program;\n   if (corename != NULL)\n     {\n-      const char* execname = strrchr (exec_bfd->filename, '/');\n+      const char* execname = strrchr (bfd_get_filename (exec_bfd), '/');\n \n-      execname = execname ? execname + 1 : exec_bfd->filename;\n+      execname = execname ? execname + 1 : bfd_get_filename (exec_bfd);\n \n       if (strcmp (execname, corename) != 0)\n \treturn FALSE;"
    },
    {
      "sha": "90ada7a1cca0142a2dec682b11d1babd4fd91d82",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -6623,7 +6623,7 @@ bfd_elf_size_dynamic_sections (bfd *output_bfd,\n \t    {\n \t      size_t indx;\n \n-\t      name = lbasename (output_bfd->filename);\n+\t      name = lbasename (bfd_get_filename (output_bfd));\n \t      def.vd_hash = bfd_elf_hash (name);\n \t      indx = _bfd_elf_strtab_add (elf_hash_table (info)->dynstr,\n \t\t\t\t\t  name, FALSE);\n@@ -6850,7 +6850,8 @@ bfd_elf_size_dynamic_sections (bfd *output_bfd,\n \t      indx = _bfd_elf_strtab_add (elf_hash_table (info)->dynstr,\n \t\t\t\t\t  elf_dt_name (vn->vn_bfd) != NULL\n \t\t\t\t\t  ? elf_dt_name (vn->vn_bfd)\n-\t\t\t\t\t  : lbasename (vn->vn_bfd->filename),\n+\t\t\t\t\t  : lbasename (bfd_get_filename\n+\t\t\t\t\t\t       (vn->vn_bfd)),\n \t\t\t\t\t  FALSE);\n \t      if (indx == (size_t) -1)\n \t\treturn FALSE;\n@@ -10675,7 +10676,7 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n \t{\n \t  _bfd_error_handler (_(\"warning: --enable-non-contiguous-regions \"\n \t\t\t\t\"discards section `%s' from '%s'\\n\"),\n-\t\t\t      isec->name, isec->owner->filename);\n+\t\t\t      isec->name, bfd_get_filename (isec->owner));\n \t  continue;\n \t}\n \n@@ -10726,7 +10727,7 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n \t  osym.st_shndx = SHN_ABS;\n \t  if (!elf_link_output_symstrtab (flinfo,\n \t\t\t\t\t  (input_bfd->lto_output ? NULL\n-\t\t\t\t\t   : input_bfd->filename),\n+\t\t\t\t\t   : bfd_get_filename (input_bfd)),\n \t\t\t\t\t  &osym, bfd_abs_section_ptr,\n \t\t\t\t\t  NULL))\n \t    return FALSE;\n@@ -11028,7 +11029,7 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n #ifdef DEBUG\n \t\t  printf (\"Encountered a complex symbol!\");\n \t\t  printf (\" (input_bfd %s, section %s, reloc %ld\\n\",\n-\t\t\t  input_bfd->filename, o->name,\n+\t\t\t  bfd_get_filename (input_bfd), o->name,\n \t\t\t  (long) (rel - internal_relocs));\n \t\t  printf (\" symbol: idx  %8.8lx, name %s\\n\",\n \t\t\t  r_symndx, sym_name);"
    },
    {
      "sha": "3820ce14f83a7b2f591d8b7b0ee9dfa0025791f5",
      "filename": "bfd/linker.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/linker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/linker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/linker.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -1995,7 +1995,7 @@ _bfd_generic_link_output_symbols (bfd *output_bfd,\n \t      newsym = bfd_make_empty_symbol (input_bfd);\n \t      if (!newsym)\n \t\treturn FALSE;\n-\t      newsym->name = input_bfd->filename;\n+\t      newsym->name = bfd_get_filename (input_bfd);\n \t      newsym->value = 0;\n \t      newsym->flags = BSF_LOCAL | BSF_FILE;\n \t      newsym->section = sec;"
    },
    {
      "sha": "33bd81e121eb0483dd90d8ef3088f455eff41b1f",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -6075,12 +6075,12 @@ bfd_mach_o_follow_dsym (bfd *abfd)\n   if (abfd->my_archive && !bfd_is_thin_archive (abfd->my_archive))\n     base_bfd = abfd->my_archive;\n   /* BFD may have been opened from a stream. */\n-  if (base_bfd->filename == NULL)\n+  if (bfd_get_filename (base_bfd) == NULL)\n     {\n       bfd_set_error (bfd_error_invalid_operation);\n       return NULL;\n     }\n-  base_basename = lbasename (base_bfd->filename);\n+  base_basename = lbasename (bfd_get_filename (base_bfd));\n \n   uuid_cmd = bfd_mach_o_lookup_uuid_command (abfd);\n   if (uuid_cmd == NULL)\n@@ -6090,14 +6090,14 @@ bfd_mach_o_follow_dsym (bfd *abfd)\n      It seems apple's GDB checks all files in the dSYM bundle directory.\n      http://opensource.apple.com/source/gdb/gdb-1708/src/gdb/macosx/macosx-tdep.c\n   */\n-  dsym_filename = (char *)bfd_malloc (strlen (base_bfd->filename)\n+  dsym_filename = (char *)bfd_malloc (strlen (bfd_get_filename (base_bfd))\n \t\t\t\t       + strlen (dsym_subdir) + 1\n \t\t\t\t       + strlen (base_basename) + 1);\n   if (dsym_filename == NULL)\n     return NULL;\n \n   sprintf (dsym_filename, \"%s%s/%s\",\n-\t   base_bfd->filename, dsym_subdir, base_basename);\n+\t   bfd_get_filename (base_bfd), dsym_subdir, base_basename);\n \n   dsym_bfd = bfd_mach_o_find_dsym (dsym_filename, uuid_cmd,\n \t\t\t\t   bfd_get_arch_info (abfd));\n@@ -6175,8 +6175,8 @@ bfd_mach_o_close_and_cleanup (bfd *abfd)\n \t     but it is small, and happens when we are closing down, so it\n \t     should not matter too much.  */\n \t  char *dsym_filename = (char *)(fat_bfd\n-\t\t\t\t\t ? fat_bfd->filename\n-\t\t\t\t\t : mdata->dsym_bfd->filename);\n+\t\t\t\t\t ? bfd_get_filename (fat_bfd)\n+\t\t\t\t\t : bfd_get_filename (mdata->dsym_bfd));\n #endif\n \t  bfd_close (mdata->dsym_bfd);\n \t  mdata->dsym_bfd = NULL;"
    },
    {
      "sha": "5d3437d38225b7c9b47299adfa87a9d5b6bc02bb",
      "filename": "bfd/opncls.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/opncls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/opncls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/opncls.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -126,8 +126,7 @@ _bfd_delete_bfd (bfd *abfd)\n       objalloc_free ((struct objalloc *) abfd->memory);\n     }\n \n-  if (abfd->filename)\n-    free ((char *) abfd->filename);\n+  free ((char *) bfd_get_filename (abfd));\n   free (abfd->arelt_data);\n   free (abfd);\n }\n@@ -709,7 +708,7 @@ _maybe_make_executable (bfd * abfd)\n     {\n       struct stat buf;\n \n-      if (stat (abfd->filename, &buf) == 0\n+      if (stat (bfd_get_filename (abfd), &buf) == 0\n \t  /* Do not attempt to change non-regular files.  This is\n \t     here especially for configure scripts and kernel builds\n \t     which run tests with \"ld [...] -o /dev/null\".  */\n@@ -718,7 +717,7 @@ _maybe_make_executable (bfd * abfd)\n \t  unsigned int mask = umask (0);\n \n \t  umask (mask);\n-\t  chmod (abfd->filename,\n+\t  chmod (bfd_get_filename (abfd),\n \t\t (0777\n \t\t  & (buf.st_mode | ((S_IXUSR | S_IXGRP | S_IXOTH) &~ mask))));\n \t}\n@@ -1400,7 +1399,7 @@ find_separate_debug_file (bfd *\t\t  abfd,\n     debug_file_directory = \".\";\n \n   /* BFD may have been opened from a stream.  */\n-  if (abfd->filename == NULL)\n+  if (bfd_get_filename (abfd) == NULL)\n     {\n       bfd_set_error (bfd_error_invalid_operation);\n       return NULL;\n@@ -1420,8 +1419,9 @@ find_separate_debug_file (bfd *\t\t  abfd,\n \n   if (include_dirs)\n     {\n-      for (dirlen = strlen (abfd->filename); dirlen > 0; dirlen--)\n-\tif (IS_DIR_SEPARATOR (abfd->filename[dirlen - 1]))\n+      const char *fname = bfd_get_filename (abfd);\n+      for (dirlen = strlen (fname); dirlen > 0; dirlen--)\n+\tif (IS_DIR_SEPARATOR (fname[dirlen - 1]))\n \t  break;\n \n       dir = (char *) bfd_malloc (dirlen + 1);\n@@ -1430,7 +1430,7 @@ find_separate_debug_file (bfd *\t\t  abfd,\n \t  free (base);\n \t  return NULL;\n \t}\n-      memcpy (dir, abfd->filename, dirlen);\n+      memcpy (dir, fname, dirlen);\n       dir[dirlen] = '\\0';\n     }\n   else\n@@ -1442,7 +1442,7 @@ find_separate_debug_file (bfd *\t\t  abfd,\n \n   /* Compute the canonical name of the bfd object with all symbolic links\n      resolved, for use in the global debugfile directory.  */\n-  canon_dir = lrealpath (abfd->filename);\n+  canon_dir = lrealpath (bfd_get_filename (abfd));\n   for (canon_dirlen = strlen (canon_dir); canon_dirlen > 0; canon_dirlen--)\n     if (IS_DIR_SEPARATOR (canon_dir[canon_dirlen - 1]))\n       break;\n@@ -1909,7 +1909,7 @@ get_build_id_name (bfd *abfd, void *build_id_out_p)\n   bfd_size_type s;\n   bfd_byte *d;\n \n-  if (abfd == NULL || abfd->filename == NULL || build_id_out == NULL)\n+  if (abfd == NULL || bfd_get_filename (abfd) == NULL || build_id_out == NULL)\n     {\n       bfd_set_error (bfd_error_invalid_operation);\n       return NULL;"
    },
    {
      "sha": "4555b36d274cf5d228e8b06e3eefb3416d4a4f63",
      "filename": "bfd/pdp11.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/pdp11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/pdp11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pdp11.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -2225,7 +2225,7 @@ NAME (aout, find_nearest_line) (bfd *abfd,\n   size_t filelen, funclen;\n   char *buf;\n \n-  *filename_ptr = abfd->filename;\n+  *filename_ptr = bfd_get_filename (abfd);\n   *functionname_ptr = 0;\n   *line_ptr = 0;\n   if (discriminator_ptr)\n@@ -4037,13 +4037,14 @@ aout_link_write_symbols (struct aout_final_link_info *flaginfo, bfd *input_bfd)\n      discarding such symbols.  */\n   if (strip != strip_all\n       && (strip != strip_some\n-\t  || bfd_hash_lookup (flaginfo->info->keep_hash, input_bfd->filename,\n+\t  || bfd_hash_lookup (flaginfo->info->keep_hash,\n+\t\t\t      bfd_get_filename (input_bfd),\n \t\t\t      FALSE, FALSE) != NULL)\n       && discard != discard_all)\n     {\n       H_PUT_8 (output_bfd, N_TEXT, outsym->e_type);\n       strtab_index = add_to_stringtab (output_bfd, flaginfo->strtab,\n-\t\t\t\t       input_bfd->filename, FALSE);\n+\t\t\t\t       bfd_get_filename (input_bfd), FALSE);\n       if (strtab_index == (bfd_size_type) -1)\n \treturn FALSE;\n       PUT_WORD (output_bfd, strtab_index, outsym->e_strx);"
    },
    {
      "sha": "9439366f4bf42249b31d718df86955033b9b3b69",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -197,7 +197,7 @@ bfd_plugin_open_input (bfd *ibfd, struct ld_plugin_input_file *file)\n   while (iobfd->my_archive\n \t && !bfd_is_thin_archive (iobfd->my_archive))\n     iobfd = iobfd->my_archive;\n-  file->name = iobfd->filename;\n+  file->name = bfd_get_filename (iobfd);\n \n   if (!iobfd->iostream && !bfd_open_file (iobfd))\n     return 0;"
    },
    {
      "sha": "696e8fdd99105cb4b8222da76c4c19959bcc0279",
      "filename": "bfd/rs6000-core.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/rs6000-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/rs6000-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/rs6000-core.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -759,11 +759,11 @@ rs6000coff_core_file_matches_executable_p (bfd *core_bfd, bfd *exec_bfd)\n     }\n \n   str1 = strrchr (path, '/');\n-  str2 = strrchr (exec_bfd->filename, '/');\n+  str2 = strrchr (bfd_get_filename (exec_bfd), '/');\n \n   /* step over character '/' */\n   str1 = str1 != NULL ? str1 + 1 : path;\n-  str2 = str2 != NULL ? str2 + 1 : exec_bfd->filename;\n+  str2 = str2 != NULL ? str2 + 1 : bfd_get_filename (exec_bfd);\n \n   if (strcmp (str1, str2) == 0)\n     ret = TRUE;"
    },
    {
      "sha": "d36d163bb6b11910325c0581d9f1ad28fbab6045",
      "filename": "bfd/som.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/som.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/som.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/som.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -6660,7 +6660,7 @@ som_write_armap (bfd *abfd,\n   unsigned int module_count;\n \n   /* We'll use this for the archive's date and mode later.  */\n-  if (stat (abfd->filename, &statbuf) != 0)\n+  if (stat (bfd_get_filename (abfd), &statbuf) != 0)\n     {\n       bfd_set_error (bfd_error_system_call);\n       return FALSE;"
    },
    {
      "sha": "1b3ead81b23f0df8919fd8aa2e31670d11d023e2",
      "filename": "bfd/srec.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/srec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/srec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/srec.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -1015,15 +1015,15 @@ srec_write_record (bfd *abfd,\n static bfd_boolean\n srec_write_header (bfd *abfd)\n {\n-  unsigned int len = strlen (abfd->filename);\n+  unsigned int len = strlen (bfd_get_filename (abfd));\n \n   /* I'll put an arbitrary 40 char limit on header size.  */\n   if (len > 40)\n     len = 40;\n \n   return srec_write_record (abfd, 0, (bfd_vma) 0,\n-\t\t\t    (bfd_byte *) abfd->filename,\n-\t\t\t    (bfd_byte *) abfd->filename + len);\n+\t\t\t    (bfd_byte *) bfd_get_filename (abfd),\n+\t\t\t    (bfd_byte *) bfd_get_filename (abfd) + len);\n }\n \n static bfd_boolean\n@@ -1089,9 +1089,9 @@ srec_write_symbols (bfd *abfd)\n       bfd_size_type len;\n       asymbol **table = bfd_get_outsymbols (abfd);\n \n-      len = strlen (abfd->filename);\n+      len = strlen (bfd_get_filename (abfd));\n       if (bfd_bwrite (\"$$ \", (bfd_size_type) 3, abfd) != 3\n-\t  || bfd_bwrite (abfd->filename, len, abfd) != len\n+\t  || bfd_bwrite (bfd_get_filename (abfd), len, abfd) != len\n \t  || bfd_bwrite (\"\\r\\n\", (bfd_size_type) 2, abfd) != 2)\n \treturn FALSE;\n "
    },
    {
      "sha": "9504cf4976c0e839607be453d879cc62443ca329",
      "filename": "bfd/vms-lib.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/vms-lib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/vms-lib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-lib.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -1491,7 +1491,7 @@ bfd *\n _bfd_vms_lib_get_imagelib_file (bfd *el)\n {\n   bfd *archive = el->my_archive;\n-  const char *modname = el->filename;\n+  const char *modname = bfd_get_filename (el);\n   int modlen = strlen (modname);\n   char *filename;\n   int j;\n@@ -1517,7 +1517,7 @@ _bfd_vms_lib_get_imagelib_file (bfd *el)\n     {\n       /* xgettext:c-format */\n       _bfd_error_handler(_(\"could not open shared image '%s' from '%s'\"),\n-\t\t\t filename, archive->filename);\n+\t\t\t filename, bfd_get_filename (archive));\n       bfd_release (archive, filename);\n       return NULL;\n     }\n@@ -2152,7 +2152,7 @@ _bfd_vms_lib_write_archive_contents (bfd *arch)\n       unsigned int nl;\n \n       modules[i].abfd = current;\n-      modules[i].name = vms_get_module_name (current->filename, FALSE);\n+      modules[i].name = vms_get_module_name (bfd_get_filename (current), FALSE);\n       modules[i].ref = 1;\n \n       /* FIXME: silently truncate long names ?  */"
    },
    {
      "sha": "503b6ab93f1ed2fc760556a9da09008b3a7ea3a8",
      "filename": "bfd/xcofflink.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/xcofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/765cf5f623dbc2de8c8791bce9a29fcc3492436c/bfd/xcofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xcofflink.c?ref=765cf5f623dbc2de8c8791bce9a29fcc3492436c",
      "patch": "@@ -1000,7 +1000,7 @@ xcoff_link_add_dynamic_symbols (bfd *abfd, struct bfd_link_info *info)\n \n   if (abfd->my_archive == NULL || bfd_is_thin_archive (abfd->my_archive))\n     {\n-      if (!bfd_xcoff_split_import_path (abfd, abfd->filename,\n+      if (!bfd_xcoff_split_import_path (abfd, bfd_get_filename (abfd),\n \t\t\t\t\t&n->path, &n->file))\n \treturn FALSE;\n       n->member = \"\";\n@@ -1013,7 +1013,8 @@ xcoff_link_add_dynamic_symbols (bfd *abfd, struct bfd_link_info *info)\n       if (!archive_info->impfile)\n \t{\n \t  if (!bfd_xcoff_split_import_path (archive_info->archive,\n-\t\t\t\t\t    archive_info->archive->filename,\n+\t\t\t\t\t    bfd_get_filename (archive_info\n+\t\t\t\t\t\t\t      ->archive),\n \t\t\t\t\t    &archive_info->imppath,\n \t\t\t\t\t    &archive_info->impfile))\n \t    return FALSE;"
    }
  ]
}