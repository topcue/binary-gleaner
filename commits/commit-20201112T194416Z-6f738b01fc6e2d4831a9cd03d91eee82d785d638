{
  "sha": "6f738b01fc6e2d4831a9cd03d91eee82d785d638",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmY3MzhiMDFmYzZlMmQ0ODMxYTljZDAzZDkxZWVlODJkNzg1ZDYzOA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-11-12T19:43:58Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-11-12T19:44:16Z"
    },
    "message": "gdb: convert \"set debug dwarf-read\" to new style\n\nAdd dwarf_read_debug_printf and dwarf_read_debug_printf_v macros and use\nthem throughout dwarf2/read.c.  The second one is used for \"verbose\"\nprints, when the value of \"set debug dwarf-read\" is >= 2.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (dwarf_read_debug_printf,\n\tdwarf_read_debug_printf_v): New macros, use throughout the file.\n\nChange-Id: I694da69da2e1f2caa4c27a421a975790636411e2",
    "tree": {
      "sha": "4b305a7b5f0e6bec008a2b2daae0e42394424fd0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4b305a7b5f0e6bec008a2b2daae0e42394424fd0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6f738b01fc6e2d4831a9cd03d91eee82d785d638",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f738b01fc6e2d4831a9cd03d91eee82d785d638",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6f738b01fc6e2d4831a9cd03d91eee82d785d638",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f738b01fc6e2d4831a9cd03d91eee82d785d638/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1de037a0c526a3e034ca11020cf4dd89785487c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1de037a0c526a3e034ca11020cf4dd89785487c3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1de037a0c526a3e034ca11020cf4dd89785487c3"
    }
  ],
  "stats": {
    "total": 271,
    "additions": 119,
    "deletions": 152
  },
  "files": [
    {
      "sha": "d0a20302b7d6bc28cb3c0f52378e8135acf81037",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f738b01fc6e2d4831a9cd03d91eee82d785d638/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f738b01fc6e2d4831a9cd03d91eee82d785d638/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6f738b01fc6e2d4831a9cd03d91eee82d785d638",
      "patch": "@@ -1,3 +1,8 @@\n+2020-11-12  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* dwarf2/read.c (dwarf_read_debug_printf,\n+\tdwarf_read_debug_printf_v): New macros, use throughout the file.\n+\n 2020-11-12  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* arc-linux-tdep.c (collect_register): Populate \"eret\" by"
    },
    {
      "sha": "ec936e4f6b4eeba4fca51e2b91756e6b13586fae",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 114,
      "deletions": 152,
      "changes": 266,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f738b01fc6e2d4831a9cd03d91eee82d785d638/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f738b01fc6e2d4831a9cd03d91eee82d785d638/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=6f738b01fc6e2d4831a9cd03d91eee82d785d638",
      "patch": "@@ -93,6 +93,26 @@\n    This is in contrast to the low level DIE reading of dwarf_die_debug.  */\n static unsigned int dwarf_read_debug = 0;\n \n+/* Print a \"dwarf-read\" debug statement if dwarf_read_debug is >= 1.  */\n+\n+#define dwarf_read_debug_printf(fmt, ...) \\\n+  do \\\n+    { \\\n+      if (dwarf_read_debug >= 1) \\\n+\tdebug_prefixed_printf (\"dwarf-read\", __func__, fmt, ##__VA_ARGS__); \\\n+    } \\\n+  while (0)\n+\n+/* Print a \"dwarf-read\" debug statement if dwarf_read_debug is >= 2.  */\n+\n+#define dwarf_read_debug_printf_v(fmt, ...) \\\n+  do \\\n+    { \\\n+      if (dwarf_read_debug >= 2) \\\n+\tdebug_prefixed_printf (\"dwarf-read\", __func__, fmt, ##__VA_ARGS__); \\\n+    } \\\n+  while (0)\n+\n /* When non-zero, dump DIEs after they are read in.  */\n static unsigned int dwarf_die_debug = 0;\n \n@@ -6376,10 +6396,9 @@ create_debug_type_hash_table (dwarf2_per_objfile *per_objfile,\n \t\t    ? &dwo_file->sections.abbrev\n \t\t    : &per_objfile->per_bfd->abbrev);\n \n-  if (dwarf_read_debug)\n-    fprintf_unfiltered (gdb_stdlog, \"Reading %s for %s:\\n\",\n-\t\t\tsection->get_name (),\n-\t\t\tabbrev_section->get_file_name ());\n+  dwarf_read_debug_printf (\"Reading %s for %s:\",\n+\t\t\t   section->get_name (),\n+\t\t\t   abbrev_section->get_file_name ());\n \n   section->read (objfile);\n   info_ptr = section->buffer;\n@@ -6491,10 +6510,9 @@ create_debug_type_hash_table (dwarf2_per_objfile *per_objfile,\n \t}\n       *slot = dwo_file ? (void *) dwo_tu : (void *) sig_type;\n \n-      if (dwarf_read_debug > 1)\n-\tfprintf_unfiltered (gdb_stdlog, \"  offset %s, signature %s\\n\",\n-\t\t\t    sect_offset_str (sect_off),\n-\t\t\t    hex_string (header.signature));\n+      dwarf_read_debug_printf_v (\"  offset %s, signature %s\",\n+\t\t\t\t sect_offset_str (sect_off),\n+\t\t\t\t hex_string (header.signature));\n \n       info_ptr += length;\n     }\n@@ -7662,16 +7680,14 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n      and build a psymtab for each of them.  */\n   dwarf2_build_include_psymtabs (cu, comp_unit_die, pst);\n \n-  if (dwarf_read_debug)\n-    fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\"Psymtab for %s unit @%s: %s - %s\"\n-\t\t\t\", %d global, %d static syms\\n\",\n-\t\t\tper_cu->is_debug_types ? \"type\" : \"comp\",\n-\t\t\tsect_offset_str (per_cu->sect_off),\n-\t\t\tpaddress (gdbarch, pst->text_low (objfile)),\n-\t\t\tpaddress (gdbarch, pst->text_high (objfile)),\n-\t\t\t(int) pst->global_psymbols.size (),\n-\t\t\t(int) pst->static_psymbols.size ());\n+  dwarf_read_debug_printf (\"Psymtab for %s unit @%s: %s - %s\"\n+\t\t\t   \", %d global, %d static syms\",\n+\t\t\t   per_cu->is_debug_types ? \"type\" : \"comp\",\n+\t\t\t   sect_offset_str (per_cu->sect_off),\n+\t\t\t   paddress (gdbarch, pst->text_low (objfile)),\n+\t\t\t   paddress (gdbarch, pst->text_high (objfile)),\n+\t\t\t   (int) pst->global_psymbols.size (),\n+\t\t\t   (int) pst->static_psymbols.size ());\n }\n \n /* Subroutine of dwarf2_build_psymtabs_hard to simplify it.\n@@ -7837,8 +7853,7 @@ build_type_psymtabs_1 (dwarf2_per_objfile *per_objfile)\n \t  [IWBN if DWO skeletons had DW_AT_stmt_list]\n \tcall FUNC  */\n \n-  if (dwarf_read_debug)\n-    fprintf_unfiltered (gdb_stdlog, \"Building type unit groups ...\\n\");\n+  dwarf_read_debug_printf (\"Building type unit groups ...\");\n \n   /* Sort in a separate table to maintain the order of all_type_units\n      for .gdb_index: TU indices directly index all_type_units.  */\n@@ -7883,19 +7898,19 @@ print_tu_stats (dwarf2_per_objfile *per_objfile)\n {\n   struct tu_stats *tu_stats = &per_objfile->per_bfd->tu_stats;\n \n-  fprintf_unfiltered (gdb_stdlog, \"Type unit statistics:\\n\");\n-  fprintf_unfiltered (gdb_stdlog, \"  %zu TUs\\n\",\n-\t\t      per_objfile->per_bfd->all_type_units.size ());\n-  fprintf_unfiltered (gdb_stdlog, \"  %d uniq abbrev tables\\n\",\n-\t\t      tu_stats->nr_uniq_abbrev_tables);\n-  fprintf_unfiltered (gdb_stdlog, \"  %d symtabs from stmt_list entries\\n\",\n-\t\t      tu_stats->nr_symtabs);\n-  fprintf_unfiltered (gdb_stdlog, \"  %d symtab sharers\\n\",\n-\t\t      tu_stats->nr_symtab_sharers);\n-  fprintf_unfiltered (gdb_stdlog, \"  %d type units without a stmt_list\\n\",\n-\t\t      tu_stats->nr_stmt_less_type_units);\n-  fprintf_unfiltered (gdb_stdlog, \"  %d all_type_units reallocs\\n\",\n-\t\t      tu_stats->nr_all_type_units_reallocs);\n+  dwarf_read_debug_printf (\"Type unit statistics:\");\n+  dwarf_read_debug_printf (\"  %zu TUs\",\n+\t\t\t   per_objfile->per_bfd->all_type_units.size ());\n+  dwarf_read_debug_printf (\"  %d uniq abbrev tables\",\n+\t\t\t   tu_stats->nr_uniq_abbrev_tables);\n+  dwarf_read_debug_printf (\"  %d symtabs from stmt_list entries\",\n+\t\t\t   tu_stats->nr_symtabs);\n+  dwarf_read_debug_printf (\"  %d symtab sharers\",\n+\t\t\t   tu_stats->nr_symtab_sharers);\n+  dwarf_read_debug_printf (\"  %d type units without a stmt_list\",\n+\t\t\t   tu_stats->nr_stmt_less_type_units);\n+  dwarf_read_debug_printf (\"  %d all_type_units reallocs\",\n+\t\t\t   tu_stats->nr_all_type_units_reallocs);\n }\n \n /* Traversal function for build_type_psymtabs.  */\n@@ -8040,11 +8055,8 @@ dwarf2_build_psymtabs_hard (dwarf2_per_objfile *per_objfile)\n {\n   struct objfile *objfile = per_objfile->objfile;\n \n-  if (dwarf_read_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"Building psymtabs of objfile %s ...\\n\",\n-\t\t\t  objfile_name (objfile));\n-    }\n+  dwarf_read_debug_printf (\"Building psymtabs of objfile %s ...\",\n+\t\t\t   objfile_name (objfile));\n \n   scoped_restore restore_reading_psyms\n     = make_scoped_restore (&per_objfile->per_bfd->reading_partial_symbols,\n@@ -8087,7 +8099,7 @@ dwarf2_build_psymtabs_hard (dwarf2_per_objfile *per_objfile)\n \t\t\t      build_type_psymtab_dependencies, per_objfile);\n     }\n \n-  if (dwarf_read_debug)\n+  if (dwarf_read_debug > 0)\n     print_tu_stats (per_objfile);\n \n   set_partial_user (per_objfile);\n@@ -8098,9 +8110,8 @@ dwarf2_build_psymtabs_hard (dwarf2_per_objfile *per_objfile)\n   /* At this point we want to keep the address map.  */\n   save_psymtabs_addrmap.release ();\n \n-  if (dwarf_read_debug)\n-    fprintf_unfiltered (gdb_stdlog, \"Done building psymtabs of %s\\n\",\n-\t\t\tobjfile_name (objfile));\n+  dwarf_read_debug_printf (\"Done building psymtabs of %s\",\n+\t\t\t   objfile_name (objfile));\n }\n \n /* Load the partial DIEs for a secondary CU into memory.\n@@ -8137,10 +8148,9 @@ read_comp_units_from_section (dwarf2_per_objfile *per_objfile,\n   const gdb_byte *info_ptr;\n   struct objfile *objfile = per_objfile->objfile;\n \n-  if (dwarf_read_debug)\n-    fprintf_unfiltered (gdb_stdlog, \"Reading %s for %s\\n\",\n-\t\t\tsection->get_name (),\n-\t\t\tsection->get_file_name ());\n+  dwarf_read_debug_printf (\"Reading %s for %s\",\n+\t\t\t   section->get_name (),\n+\t\t\t   section->get_file_name ());\n \n   section->read (objfile);\n \n@@ -9106,12 +9116,8 @@ maybe_queue_comp_unit (struct dwarf2_cu *dependent_cu,\n static void\n process_queue (dwarf2_per_objfile *per_objfile)\n {\n-  if (dwarf_read_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog,\n-\t\t\t  \"Expanding one or more symtabs of objfile %s ...\\n\",\n-\t\t\t  objfile_name (per_objfile->objfile));\n-    }\n+  dwarf_read_debug_printf (\"Expanding one or more symtabs of objfile %s ...\",\n+\t\t\t   objfile_name (per_objfile->objfile));\n \n   /* The queue starts out with one item, but following a DIE reference\n      may load a new CU, adding it to the end of the queue.  */\n@@ -9150,27 +9156,24 @@ process_queue (dwarf2_per_objfile *per_objfile)\n \t\t}\n \n \t      if (dwarf_read_debug >= debug_print_threshold)\n-\t\tfprintf_unfiltered (gdb_stdlog, \"Expanding symtab of %s\\n\", buf);\n+\t\tdwarf_read_debug_printf (\"Expanding symtab of %s\", buf);\n \n \t      if (per_cu->is_debug_types)\n \t\tprocess_full_type_unit (cu, item.pretend_language);\n \t      else\n \t\tprocess_full_comp_unit (cu, item.pretend_language);\n \n \t      if (dwarf_read_debug >= debug_print_threshold)\n-\t\tfprintf_unfiltered (gdb_stdlog, \"Done expanding %s\\n\", buf);\n+\t\tdwarf_read_debug_printf (\"Done expanding %s\", buf);\n \t    }\n \t}\n \n       per_cu->queued = 0;\n       per_objfile->per_bfd->queue.pop ();\n     }\n \n-  if (dwarf_read_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"Done expanding symtabs of %s.\\n\",\n-\t\t\t  objfile_name (per_objfile->objfile));\n-    }\n+  dwarf_read_debug_printf (\"Done expanding symtabs of %s.\",\n+\t\t\t   objfile_name (per_objfile->objfile));\n }\n \n /* Read in full symbols for PST, and anything it depends on.  */\n@@ -11469,10 +11472,9 @@ create_dwo_cu_reader (const struct die_reader_specs *reader,\n   dwo_unit->sect_off = sect_off;\n   dwo_unit->length = cu->per_cu->length;\n \n-  if (dwarf_read_debug)\n-    fprintf_unfiltered (gdb_stdlog, \"  offset %s, dwo_id %s\\n\",\n-\t\t\tsect_offset_str (sect_off),\n-\t\t\thex_string (dwo_unit->signature));\n+  dwarf_read_debug_printf (\"  offset %s, dwo_id %s\",\n+\t\t\t   sect_offset_str (sect_off),\n+\t\t\t   hex_string (dwo_unit->signature));\n }\n \n /* Create the dwo_units for the CUs in a DWO_FILE.\n@@ -11493,12 +11495,9 @@ create_cus_hash_table (dwarf2_per_objfile *per_objfile,\n   if (info_ptr == NULL)\n     return;\n \n-  if (dwarf_read_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"Reading %s for %s:\\n\",\n-\t\t\t  section.get_name (),\n-\t\t\t  section.get_file_name ());\n-    }\n+  dwarf_read_debug_printf (\"Reading %s for %s:\",\n+\t\t\t   section.get_name (),\n+\t\t\t   section.get_file_name ());\n \n   end_ptr = info_ptr + section.size;\n   while (info_ptr < end_ptr)\n@@ -12030,13 +12029,9 @@ create_dwo_unit_in_dwp_v1 (dwarf2_per_objfile *per_objfile,\n \n   gdb_assert (dwp_file->version == 1);\n \n-  if (dwarf_read_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"Reading %s %s/%s in DWP V1 file: %s\\n\",\n-\t\t\t  kind,\n-\t\t\t  pulongest (unit_index), hex_string (signature),\n-\t\t\t  dwp_file->name);\n-    }\n+  dwarf_read_debug_printf (\"Reading %s %s/%s in DWP V1 file: %s\",\n+\t\t\t   kind, pulongest (unit_index), hex_string (signature),\n+\t\t\t   dwp_file->name);\n \n   /* Fetch the sections of this DWO unit.\n      Put a limit on the number of sections we look for so that bad data\n@@ -12115,11 +12110,9 @@ create_dwo_unit_in_dwp_v1 (dwarf2_per_objfile *per_objfile,\n   /* Create one if necessary.  */\n   if (*dwo_file_slot == NULL)\n     {\n-      if (dwarf_read_debug)\n-\t{\n-\t  fprintf_unfiltered (gdb_stdlog, \"Creating virtual DWO: %s\\n\",\n-\t\t\t      virtual_dwo_name.c_str ());\n-\t}\n+      dwarf_read_debug_printf (\"Creating virtual DWO: %s\",\n+\t\t\t       virtual_dwo_name.c_str ());\n+\n       dwo_file = new struct dwo_file;\n       dwo_file->dwo_name = per_objfile->objfile->intern (virtual_dwo_name);\n       dwo_file->comp_dir = comp_dir;\n@@ -12142,11 +12135,9 @@ create_dwo_unit_in_dwp_v1 (dwarf2_per_objfile *per_objfile,\n     }\n   else\n     {\n-      if (dwarf_read_debug)\n-\t{\n-\t  fprintf_unfiltered (gdb_stdlog, \"Using existing virtual DWO: %s\\n\",\n-\t\t\t      virtual_dwo_name.c_str ());\n-\t}\n+      dwarf_read_debug_printf (\"Using existing virtual DWO: %s\",\n+\t\t\t       virtual_dwo_name.c_str ());\n+\n       dwo_file = (struct dwo_file *) *dwo_file_slot;\n     }\n \n@@ -12227,13 +12218,9 @@ create_dwo_unit_in_dwp_v2 (dwarf2_per_objfile *per_objfile,\n \n   gdb_assert (dwp_file->version == 2);\n \n-  if (dwarf_read_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"Reading %s %s/%s in DWP V2 file: %s\\n\",\n-\t\t\t  kind,\n-\t\t\t  pulongest (unit_index), hex_string (signature),\n-\t\t\t  dwp_file->name);\n-    }\n+  dwarf_read_debug_printf (\"Reading %s %s/%s in DWP V2 file: %s\",\n+\t\t\t   kind, pulongest (unit_index), hex_string (signature),\n+\t\t\t   dwp_file->name);\n \n   /* Fetch the section offsets of this DWO unit.  */\n \n@@ -12308,11 +12295,9 @@ create_dwo_unit_in_dwp_v2 (dwarf2_per_objfile *per_objfile,\n   /* Create one if necessary.  */\n   if (*dwo_file_slot == NULL)\n     {\n-      if (dwarf_read_debug)\n-\t{\n-\t  fprintf_unfiltered (gdb_stdlog, \"Creating virtual DWO: %s\\n\",\n-\t\t\t      virtual_dwo_name.c_str ());\n-\t}\n+      dwarf_read_debug_printf (\"Creating virtual DWO: %s\",\n+\t\t\t       virtual_dwo_name.c_str ());\n+\n       dwo_file = new struct dwo_file;\n       dwo_file->dwo_name = per_objfile->objfile->intern (virtual_dwo_name);\n       dwo_file->comp_dir = comp_dir;\n@@ -12353,11 +12338,9 @@ create_dwo_unit_in_dwp_v2 (dwarf2_per_objfile *per_objfile,\n     }\n   else\n     {\n-      if (dwarf_read_debug)\n-\t{\n-\t  fprintf_unfiltered (gdb_stdlog, \"Using existing virtual DWO: %s\\n\",\n-\t\t\t      virtual_dwo_name.c_str ());\n-\t}\n+      dwarf_read_debug_printf (\"Using existing virtual DWO: %s\",\n+\t\t\t       virtual_dwo_name.c_str ());\n+\n       dwo_file = (struct dwo_file *) *dwo_file_slot;\n     }\n \n@@ -12401,13 +12384,9 @@ create_dwo_unit_in_dwp_v5 (dwarf2_per_objfile *per_objfile,\n \n   gdb_assert (dwp_file->version == 5);\n \n-  if (dwarf_read_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"Reading %s %s/%s in DWP V5 file: %s\\n\",\n-\t\t\t  kind,\n-\t\t\t  pulongest (unit_index), hex_string (signature),\n-\t\t\t  dwp_file->name);\n-    }\n+  dwarf_read_debug_printf (\"Reading %s %s/%s in DWP V5 file: %s\",\n+\t\t\t   kind, pulongest (unit_index), hex_string (signature),\n+\t\t\t   dwp_file->name);\n \n   /* Fetch the section offsets of this DWO unit.  */\n \n@@ -12488,11 +12467,9 @@ create_dwo_unit_in_dwp_v5 (dwarf2_per_objfile *per_objfile,\n   /* Create one if necessary.  */\n   if (*dwo_file_slot == NULL)\n     {\n-      if (dwarf_read_debug)\n-\t{\n-\t  fprintf_unfiltered (gdb_stdlog, \"Creating virtual DWO: %s\\n\",\n-\t\t\t      virtual_dwo_name.c_str ());\n-\t}\n+      dwarf_read_debug_printf (\"Creating virtual DWO: %s\",\n+\t\t\t       virtual_dwo_name.c_str ());\n+\n       dwo_file = new struct dwo_file;\n       dwo_file->dwo_name = per_objfile->objfile->intern (virtual_dwo_name);\n       dwo_file->comp_dir = comp_dir;\n@@ -12538,11 +12515,9 @@ create_dwo_unit_in_dwp_v5 (dwarf2_per_objfile *per_objfile,\n     }\n   else\n     {\n-      if (dwarf_read_debug)\n-\t{\n-\t  fprintf_unfiltered (gdb_stdlog, \"Using existing virtual DWO: %s\\n\",\n-\t\t\t      virtual_dwo_name.c_str ());\n-\t}\n+      dwarf_read_debug_printf (\"Using existing virtual DWO: %s\",\n+\t\t\t       virtual_dwo_name.c_str ());\n+\n       dwo_file = (struct dwo_file *) *dwo_file_slot;\n     }\n \n@@ -12822,8 +12797,8 @@ open_and_init_dwo_file (dwarf2_cu *cu, const char *dwo_name,\n   gdb_bfd_ref_ptr dbfd = open_dwo_file (per_objfile, dwo_name, comp_dir);\n   if (dbfd == NULL)\n     {\n-      if (dwarf_read_debug)\n-\tfprintf_unfiltered (gdb_stdlog, \"DWO file not found: %s\\n\", dwo_name);\n+      dwarf_read_debug_printf (\"DWO file not found: %s\", dwo_name);\n+\n       return NULL;\n     }\n \n@@ -12851,8 +12826,7 @@ open_and_init_dwo_file (dwarf2_cu *cu, const char *dwo_name,\n \t\t\t\t    rcuh_kind::TYPE);\n     }\n \n-  if (dwarf_read_debug)\n-    fprintf_unfiltered (gdb_stdlog, \"DWO file found: %s\\n\", dwo_name);\n+  dwarf_read_debug_printf (\"DWO file found: %s\", dwo_name);\n \n   return dwo_file.release ();\n }\n@@ -13114,8 +13088,8 @@ open_and_init_dwp_file (dwarf2_per_objfile *per_objfile)\n \n   if (dbfd == NULL)\n     {\n-      if (dwarf_read_debug)\n-\tfprintf_unfiltered (gdb_stdlog, \"DWP file not found: %s\\n\", dwp_name.c_str ());\n+      dwarf_read_debug_printf (\"DWP file not found: %s\", dwp_name.c_str ());\n+\n       return std::unique_ptr<dwp_file> ();\n     }\n \n@@ -13169,14 +13143,10 @@ open_and_init_dwp_file (dwarf2_per_objfile *per_objfile)\n   dwp_file->loaded_cus = allocate_dwp_loaded_cutus_table ();\n   dwp_file->loaded_tus = allocate_dwp_loaded_cutus_table ();\n \n-  if (dwarf_read_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"DWP file found: %s\\n\", dwp_file->name);\n-      fprintf_unfiltered (gdb_stdlog,\n-\t\t\t  \"    %s CUs, %s TUs\\n\",\n-\t\t\t  pulongest (dwp_file->cus ? dwp_file->cus->nr_units : 0),\n-\t\t\t  pulongest (dwp_file->tus ? dwp_file->tus->nr_units : 0));\n-    }\n+  dwarf_read_debug_printf (\"DWP file found: %s\", dwp_file->name);\n+  dwarf_read_debug_printf (\"    %s CUs, %s TUs\",\n+\t\t\t   pulongest (dwp_file->cus ? dwp_file->cus->nr_units : 0),\n+\t\t\t   pulongest (dwp_file->tus ? dwp_file->tus->nr_units : 0));\n \n   return dwp_file;\n }\n@@ -13240,13 +13210,10 @@ lookup_dwo_cutu (dwarf2_cu *cu, const char *dwo_name, const char *comp_dir,\n \n \t  if (dwo_cutu != NULL)\n \t    {\n-\t      if (dwarf_read_debug)\n-\t\t{\n-\t\t  fprintf_unfiltered (gdb_stdlog,\n-\t\t\t\t      \"Virtual DWO %s %s found: @%s\\n\",\n-\t\t\t\t      kind, hex_string (signature),\n-\t\t\t\t      host_address_to_string (dwo_cutu));\n-\t\t}\n+\t      dwarf_read_debug_printf (\"Virtual DWO %s %s found: @%s\",\n+\t\t\t\t       kind, hex_string (signature),\n+\t\t\t\t       host_address_to_string (dwo_cutu));\n+\n \t      return dwo_cutu;\n \t    }\n \t}\n@@ -13290,12 +13257,10 @@ lookup_dwo_cutu (dwarf2_cu *cu, const char *dwo_name, const char *comp_dir,\n \n \t  if (dwo_cutu != NULL)\n \t    {\n-\t      if (dwarf_read_debug)\n-\t\t{\n-\t\t  fprintf_unfiltered (gdb_stdlog, \"DWO %s %s(%s) found: @%s\\n\",\n-\t\t\t\t      kind, dwo_name, hex_string (signature),\n-\t\t\t\t      host_address_to_string (dwo_cutu));\n-\t\t}\n+\t      dwarf_read_debug_printf (\"DWO %s %s(%s) found: @%s\",\n+\t\t\t\t       kind, dwo_name, hex_string (signature),\n+\t\t\t\t       host_address_to_string (dwo_cutu));\n+\n \t      return dwo_cutu;\n \t    }\n \t}\n@@ -13305,11 +13270,8 @@ lookup_dwo_cutu (dwarf2_cu *cu, const char *dwo_name, const char *comp_dir,\n      someone deleted the DWO/DWP file, or the search path isn't set up\n      correctly to find the file.  */\n \n-  if (dwarf_read_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"DWO %s %s(%s) not found\\n\",\n-\t\t\t  kind, dwo_name, hex_string (signature));\n-    }\n+  dwarf_read_debug_printf (\"DWO %s %s(%s) not found\",\n+\t\t\t   kind, dwo_name, hex_string (signature));\n \n   /* This is a warning and not a complaint because it can be caused by\n      pilot error (e.g., user accidentally deleting the DWO).  */"
    }
  ]
}