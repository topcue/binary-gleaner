{
  "sha": "4d772ea24dac5d69d913bd0fb748b3070dc8bba6",
  "node_id": "C_kwDOANOeidoAKDRkNzcyZWEyNGRhYzVkNjlkOTEzYmQwZmI3NDhiMzA3MGRjOGJiYTY",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-11-08T21:49:21Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-11T18:28:10Z"
    },
    "message": "gdb: fix \"set scheduler-locking\" thread exit hang\n\nGDB hangs when doing this:\n\n - launch inferior with multiple threads\n - multiple threads hit some breakpoint(s)\n - one breakpoint hit is presented as a stop, the rest are saved as\n   pending wait statuses\n - \"set scheduler-locking on\"\n - resume the currently selected thread (because of scheduler-locking,\n   it's the only one resumed), let it execute until exit\n - GDB hangs, not showing the prompt, impossible to interrupt with ^C\n\nWhen the resumed thread exits, we expect the target to return a\nTARGET_WAITKIND_NO_RESUMED event, and that's what we see:\n\n    [infrun] fetch_inferior_event: enter\n      [infrun] scoped_disable_commit_resumed: reason=handling event\n      [infrun] random_pending_event_thread: None found.\n    [Thread 0x7ffff7d9c700 (LWP 309357) exited]\n      [infrun] print_target_wait_results: target_wait (-1.0.0 [process -1], status) =\n      [infrun] print_target_wait_results:   -1.0.0 [process -1],\n      [infrun] print_target_wait_results:   status->kind = no-resumed\n      [infrun] handle_inferior_event: status->kind = no-resumed\n      [infrun] handle_no_resumed: TARGET_WAITKIND_NO_RESUMED (ignoring: found resumed)\n      [infrun] prepare_to_wait: prepare_to_wait\n      [infrun] reset: reason=handling event\n      [infrun] maybe_set_commit_resumed_all_targets: not requesting commit-resumed for target native, no resumed threads\n    [infrun] fetch_inferior_event: exit\n\nThe problem is in handle_no_resumed: we check if some other thread is\nactually resumed, to see if we should ignore that event (see comments in\nthat function for more info).  If this condition is true:\n\n    (thread->executing () || thread->has_pending_waitstatus ())\n\n... then we ignore the event.  The problem is that there are some non-resumed\nthreads with a pending event, which makes us ignore the event.  But these\nthreads are not resumed, so we end up waiting while nothing executes, hence\nwaiting for ever.\n\nMy first fix was to change the condition to:\n\n    (thread->executing ()\n     || (thread->resumed () && thread->has_pending_waitstatus ()))\n\n... but then it occured to me that we could simply check for:\n\n    (thread->resumed ())\n\nSince \"executing\" implies \"resumed\", checking simply for \"resumed\"\ncovers threads that are resumed and executing, as well as threads that\nare resumed with a pending status, which is what we want.\n\nChange-Id: Ie796290f8ae7f34c026ca3a8fcef7397414f4780",
    "tree": {
      "sha": "2c9c1de2cd360adee95011386ec9bb3e434e0273",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2c9c1de2cd360adee95011386ec9bb3e434e0273"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4d772ea24dac5d69d913bd0fb748b3070dc8bba6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d772ea24dac5d69d913bd0fb748b3070dc8bba6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4d772ea24dac5d69d913bd0fb748b3070dc8bba6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d772ea24dac5d69d913bd0fb748b3070dc8bba6/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fdf95218bc08c60ef4528eb67b03643fdd16f036",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdf95218bc08c60ef4528eb67b03643fdd16f036",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fdf95218bc08c60ef4528eb67b03643fdd16f036"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 89,
    "deletions": 2
  },
  "files": [
    {
      "sha": "95c8bfb2e7de220238757e3368a4b3d09dde6f68",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d772ea24dac5d69d913bd0fb748b3070dc8bba6/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d772ea24dac5d69d913bd0fb748b3070dc8bba6/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=4d772ea24dac5d69d913bd0fb748b3070dc8bba6",
      "patch": "@@ -5138,8 +5138,7 @@ handle_no_resumed (struct execution_control_state *ecs)\n \t  swap_terminal = false;\n \t}\n \n-      if (!ignore_event\n-\t  && (thread->executing () || thread->has_pending_waitstatus ()))\n+      if (!ignore_event && thread->resumed ())\n \t{\n \t  /* Either there were no unwaited-for children left in the\n \t     target at some point, but there are now, or some target"
    },
    {
      "sha": "ea8a349ed13c1d882df9416e4cdcf2562372ebff",
      "filename": "gdb/testsuite/gdb.threads/schedlock-thread-exit.c",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d772ea24dac5d69d913bd0fb748b3070dc8bba6/gdb/testsuite/gdb.threads/schedlock-thread-exit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d772ea24dac5d69d913bd0fb748b3070dc8bba6/gdb/testsuite/gdb.threads/schedlock-thread-exit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/schedlock-thread-exit.c?ref=4d772ea24dac5d69d913bd0fb748b3070dc8bba6",
      "patch": "@@ -0,0 +1,46 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <assert.h>\n+#include <pthread.h>\n+\n+static void *\n+thread_func (void *p)\n+{\n+  return NULL;\n+}\n+\n+int\n+main (void)\n+{\n+  const int nthreads = 10;\n+  pthread_t threads[nthreads];\n+\n+  for (int i = 0; i < nthreads; ++i)\n+    {\n+      int ret = pthread_create (&threads[i], NULL, thread_func, NULL);\n+      assert (ret == 0);\n+    }\n+\n+  for (int i = 0; i < nthreads; ++i)\n+    {\n+      int ret = pthread_join (threads[i], NULL);\n+      assert (ret == 0);\n+    }\n+\n+  return 0;\n+}"
    },
    {
      "sha": "818baa781db5ed3780c3c321ca38deaf93f06024",
      "filename": "gdb/testsuite/gdb.threads/schedlock-thread-exit.exp",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d772ea24dac5d69d913bd0fb748b3070dc8bba6/gdb/testsuite/gdb.threads/schedlock-thread-exit.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d772ea24dac5d69d913bd0fb748b3070dc8bba6/gdb/testsuite/gdb.threads/schedlock-thread-exit.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/schedlock-thread-exit.exp?ref=4d772ea24dac5d69d913bd0fb748b3070dc8bba6",
      "patch": "@@ -0,0 +1,42 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test that GDB handles well a thread exiting with sched-lock on.  A buggy GDB\n+# would hang, a fixed GDB shows the \"No unwaited-for children left\" message and\n+# shows the prompt.\n+#\n+# The explanation for the original bug involved some threads with a pending\n+# wait status, so we launch multiple threads, which very likely gives us that.\n+\n+standard_testfile\n+\n+if { [build_executable \"failed to prepare\" ${testfile} ${srcfile} {debug pthreads}] } {\n+    return\n+}\n+\n+proc do_test { } {\n+    clean_restart $::binfile\n+\n+    # One of the launched threads will report a stop on thread_func.  Some\n+    # others will also stop on thread_func and have a pending status.\n+    if { ![runto \"thread_func\"] } {\n+\treturn\n+    }\n+\n+    gdb_test_no_output \"set scheduler-locking on\"\n+    gdb_test \"continue\" \"No unwaited-for children left.\"\n+}\n+\n+do_test"
    }
  ]
}