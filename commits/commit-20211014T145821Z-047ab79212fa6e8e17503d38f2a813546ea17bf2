{
  "sha": "047ab79212fa6e8e17503d38f2a813546ea17bf2",
  "node_id": "C_kwDOANOeidoAKDA0N2FiNzkyMTJmYTZlOGUxNzUwM2QzOGYyYTgxMzU0NmVhMTdiZjI",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-10-14T14:58:21Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-10-14T14:58:21Z"
    },
    "message": "[gdb/testsuite] Add .debug_loc support in dwarf assembler\n\nAdd .debug_loc support in the dwarf assembler, and use it in new test-case\ngdb.dwarf2/loc-sec-offset.exp (which is based on\ngdb.dwarf2/loclists-sec-offset.exp).\n\nTested on x86_64-linux.",
    "tree": {
      "sha": "01a8363a769bbd4d788d613b988042026240cccc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/01a8363a769bbd4d788d613b988042026240cccc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/047ab79212fa6e8e17503d38f2a813546ea17bf2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/047ab79212fa6e8e17503d38f2a813546ea17bf2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/047ab79212fa6e8e17503d38f2a813546ea17bf2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/047ab79212fa6e8e17503d38f2a813546ea17bf2/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a1251fdcb58f99644c49b65d72507706f2d40200",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1251fdcb58f99644c49b65d72507706f2d40200",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a1251fdcb58f99644c49b65d72507706f2d40200"
    }
  ],
  "stats": {
    "total": 257,
    "additions": 257,
    "deletions": 0
  },
  "files": [
    {
      "sha": "2bffbf2ac4c038db814bd1a90a8da5312f50de2a",
      "filename": "gdb/testsuite/gdb.dwarf2/loc-sec-offset.c",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/047ab79212fa6e8e17503d38f2a813546ea17bf2/gdb/testsuite/gdb.dwarf2/loc-sec-offset.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/047ab79212fa6e8e17503d38f2a813546ea17bf2/gdb/testsuite/gdb.dwarf2/loc-sec-offset.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loc-sec-offset.c?ref=047ab79212fa6e8e17503d38f2a813546ea17bf2",
      "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+static int\n+func1 (void)\n+{\n+  asm (\"func1_label: .global func1_label\\n\");\n+  return 1;\n+}\n+\n+static int\n+func2 (void)\n+{\n+  asm (\"func2_label: .global func2_label\\n\");\n+  return 2;\n+}\n+\n+int\n+main (void)\n+{\n+  func1 ();\n+  func2 ();\n+}"
    },
    {
      "sha": "2ec66b302f385568800083d100348d414a5b4564",
      "filename": "gdb/testsuite/gdb.dwarf2/loc-sec-offset.exp",
      "status": "added",
      "additions": 121,
      "deletions": 0,
      "changes": 121,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/047ab79212fa6e8e17503d38f2a813546ea17bf2/gdb/testsuite/gdb.dwarf2/loc-sec-offset.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/047ab79212fa6e8e17503d38f2a813546ea17bf2/gdb/testsuite/gdb.dwarf2/loc-sec-offset.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loc-sec-offset.exp?ref=047ab79212fa6e8e17503d38f2a813546ea17bf2",
      "patch": "@@ -0,0 +1,121 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test DW_AT_location attribute referencing the .debug_loc section using\n+# the DW_FORM_sec_offset form.\n+\n+load_lib dwarf.exp\n+\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+# Test with 32-bit and 64-bit DWARF.\n+foreach_with_prefix is_64 {false true} {\n+    if { $is_64 } {\n+\tstandard_testfile .c -dw64.S\n+\tset testfile ${testfile}-dw64\n+    } else {\n+\tstandard_testfile .c -dw32.S\n+\tset testfile ${testfile}-dw32\n+    }\n+\n+    lassign [function_range func1 $srcdir/$subdir/$srcfile] \\\n+\tfunc1_addr func1_len\n+    lassign [function_range func2 $srcdir/$subdir/$srcfile] \\\n+\tfunc2_addr func2_len\n+\n+    set asm_file [standard_output_file $srcfile2]\n+    Dwarf::assemble $asm_file {\n+\tglobal func1_addr func1_len\n+\tglobal func2_addr func2_len\n+\tglobal is_64\n+\n+\tset cu_version 4\n+\n+\tcu {\n+\t    version $cu_version\n+\t    is_64 $is_64\n+\t} {\n+\t    declare_labels int_type1\n+\t    declare_labels foo_location_list\n+\n+\t    DW_TAG_compile_unit {\n+\t    } {\n+\t\tint_type1: DW_TAG_base_type {\n+\t\t    {DW_AT_byte_size 4 DW_FORM_data1}\n+\t\t    {DW_AT_encoding @DW_ATE_signed}\n+\t\t    {DW_AT_name \"int\"}\n+\t\t}\n+\n+\t\tDW_TAG_variable {\n+\t\t    {DW_AT_name \"foo\"}\n+\t\t    {DW_AT_location $foo_location_list DW_FORM_sec_offset}\n+\t\t    {DW_AT_type :$int_type1}\n+\t\t}\n+\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"func1\"}\n+\t\t    {DW_AT_low_pc $func1_addr}\n+\t\t    {DW_AT_high_pc $func1_len DW_FORM_udata}\n+\t\t}\n+\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"func2\"}\n+\t\t    {DW_AT_low_pc $func2_addr}\n+\t\t    {DW_AT_high_pc $func2_len DW_FORM_udata}\n+\t\t}\n+\t    }\n+\t}\n+\n+\t# Generate a .debug_loc contribution.\n+\tloc {\n+\t    cu_is_64 $is_64\n+\t    cu_version $cu_version\n+\t} {\n+\t    foo_location_list:\n+\t    entry $func1_addr \"$func1_addr + $func1_len\" {\n+\t\tDW_OP_constu 0x123456\n+\t\tDW_OP_stack_value\n+\t    }\n+\t    entry $func2_addr \"$func2_addr + $func2_len\" {\n+\t\tDW_OP_constu 0x234567\n+\t\tDW_OP_stack_value\n+\t    }\n+\t}\n+    }\n+\n+    if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t      [list $srcfile $asm_file] {nodebug}] } {\n+\treturn -1\n+    }\n+\n+    if { ![runto_main] } {\n+\treturn\n+    }\n+\n+    gdb_breakpoint \"func1\"\n+    gdb_breakpoint \"func2\"\n+\n+    gdb_continue_to_breakpoint \"func1\"\n+    with_test_prefix \"at func1\" {\n+\tgdb_test \"print /x foo\" \" = 0x123456\"\n+    }\n+\n+    gdb_continue_to_breakpoint \"func2\"\n+    with_test_prefix \"at func2\" {\n+\tgdb_test \"print /x foo\" \" = 0x234567\"\n+    }\n+}"
    },
    {
      "sha": "b48cfad3b9e5da97984607332cc204996d8cc907",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 99,
      "deletions": 0,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/047ab79212fa6e8e17503d38f2a813546ea17bf2/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/047ab79212fa6e8e17503d38f2a813546ea17bf2/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=047ab79212fa6e8e17503d38f2a813546ea17bf2",
      "patch": "@@ -2369,6 +2369,105 @@ namespace eval Dwarf {\n \taranges_end:\n     }\n \n+    # Emit a .debug_loc entry.\n+\n+    proc _loc_entry { start end location_description } {\n+\t# Determine how to emit addresses.\n+\tvariable _addr_size\n+\tif { $_addr_size == 8 } {\n+\t    set addr_op .8byte\n+\t} elseif { $_addr_size == 4 } {\n+\t    set addr_op .4byte\n+\t}\n+\n+\t# Emit start and end address.\n+\t_op $addr_op $start \"Start address\"\n+\t_op $addr_op $end \"End address\"\n+\n+\tdeclare_labels location_description_start\n+\tdeclare_labels location_description_end\n+\n+\t# Emit length of location description.\n+\tset len \"$location_description_end - $location_description_start\"\n+\t_op .2byte $len \"Location description length\"\n+\n+\t# Tag start of location description.\n+\tdefine_label $location_description_start\n+\n+\t# Emit location description.\n+\tvariable _cu_version\n+\tvariable _cu_offset_size\n+\t_location $location_description $_cu_version $_addr_size \\\n+\t    $_cu_offset_size\n+\n+\t# Tag end of location description.\n+\tdefine_label $location_description_end\n+    }\n+\n+    # Emit a DWARF .debug_loc contribution.\n+    #\n+    # OPTIONS is a list with an even number of elements containing\n+    # option-name and option-value pairs.\n+    # Current options are:\n+    # cu_is_64 0|1 - boolean indicating if references from location\n+    #                descriptions refer to a 64-bit DWARF CU.\n+    #                default = 0 (32-bit)\n+    # cu_version n - section version of DWARF CU referenced from location\n+    #                descriptions.\n+    #                default = 4\n+    #\n+    # BODY is Tcl code that emits the parts which make up the body of\n+    # the debug_loc contribution.  It is evaluated in the caller's context.\n+    # The following command is available for the BODY section:\n+    #\n+    #   entry <start> <end> <location description>\n+    #     -- emit a .debug_loc entry\n+\n+    proc loc { options body } {\n+\t# Handle options.\n+\tparse_options {\n+\t    { cu_version 4 }\n+\t    { cu_is_64 0 }\n+\t}\n+\n+\t# Export for use in BODY.\n+\tvariable _addr_size\n+\tif { [is_64_target] } {\n+\t    set _addr_size 8\n+\t} else {\n+\t    set _addr_size 4\n+\t}\n+\tvariable _cu_version\n+\tset _cu_version $cu_version\n+\tvariable _cu_offset_size\n+\tif { $cu_is_64 == 1 } {\n+\t    set _cu_offset_size 8\n+\t} else {\n+\t    set _cu_offset_size 4\n+\t}\n+\n+\t# Switch to .debug_loc section.\n+\t_section .debug_loc\n+\n+\t# Introduce command 'entry'.\n+\twith_override Dwarf::entry Dwarf::_loc_entry {\n+\t    # Emit entries.\n+\t    uplevel $body\n+\t}\n+\n+\t# Determine how to emit addresses.\n+\tif { $_addr_size == 8 } {\n+\t    set addr_op .8byte\n+\t} elseif { $_addr_size == 4 } {\n+\t    set addr_op .4byte\n+\t}\n+\n+\t# Emit <End of list>.\n+\tset comment \"<End of list>\"\n+\t_op $addr_op 0 \"$comment (Part 1/2)\"\n+\t_op $addr_op 0 \"$comment (Part 2/2)\"\n+    }\n+\n     proc _empty_array {name} {\n \tupvar $name the_array\n "
    }
  ]
}