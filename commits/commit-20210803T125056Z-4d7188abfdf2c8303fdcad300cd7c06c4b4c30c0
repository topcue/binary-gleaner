{
  "sha": "4d7188abfdf2c8303fdcad300cd7c06c4b4c30c0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGQ3MTg4YWJmZGYyYzgzMDNmZGNhZDMwMGNkN2MwNmM0YjRjMzBjMA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-29T18:42:04Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-08-03T12:50:56Z"
    },
    "message": "gdbsupport: add debug assertions in gdb::optional::get\n\nThe libstdc++ version of optional contains some runtime checks enabled\nwhen _GLIBCXX_DEBUG is defined.  I think it would be useful if our\nversion contained similar checks.\n\nAdd checks in the two `get` methods, also conditional on _GLIBCXX_DEBUG.\nI think it's simpler to use that macro rather than introducing a new\nGDB-specific one, as I think that if somebody is interested in enabling\nthese runtime checks, they'll also be interested in enabling the\nlibstdc++ runtime checks (and vice-versa).\n\nI implemented these checks using gdb_assert.  Note that gdb_assert\nthrows (after querying the user), and we are in noexcept methods.  That\nmeans that std::terminate / abort will immediately be called.  I think\nthis is ok, since if those were \"real\" _GLIBCXX_DEBUG checks, abort\nwould be called straight away.\n\nIf I add a dummy failure, it looks like so:\n\n    $ ./gdb -q -nx --data-directory=data-directory\n    /home/simark/src/binutils-gdb/gdb/../gdbsupport/gdb_optional.h:206: internal-error: T& gdb::optional<T>::get() [with T = int]: Assertion `this->has_value ()' failed.\n    A problem internal to GDB has been detected,\n    further debugging may prove unreliable.\n    Quit this debugging session? (y or n) n\n    [1]    658767 abort (core dumped)  ./gdb -q -nx --data-directory=data-directory\n\nChange-Id: Iadfdcd131425bd2ca6a2de30d7b22e9b3cc67793",
    "tree": {
      "sha": "878b6c898cec28f601a4904d32881d3a3ce9f1da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/878b6c898cec28f601a4904d32881d3a3ce9f1da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4d7188abfdf2c8303fdcad300cd7c06c4b4c30c0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d7188abfdf2c8303fdcad300cd7c06c4b4c30c0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4d7188abfdf2c8303fdcad300cd7c06c4b4c30c0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d7188abfdf2c8303fdcad300cd7c06c4b4c30c0/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "748aa9b65364d72b0f9a36139e292eaf3bc86aa4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/748aa9b65364d72b0f9a36139e292eaf3bc86aa4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/748aa9b65364d72b0f9a36139e292eaf3bc86aa4"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 14,
    "deletions": 2
  },
  "files": [
    {
      "sha": "745b2ba74886595c40f6e0bbeec4964c5d33fc49",
      "filename": "gdbsupport/gdb_optional.h",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d7188abfdf2c8303fdcad300cd7c06c4b4c30c0/gdbsupport/gdb_optional.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d7188abfdf2c8303fdcad300cd7c06c4b4c30c0/gdbsupport/gdb_optional.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/gdb_optional.h?ref=4d7188abfdf2c8303fdcad300cd7c06c4b4c30c0",
      "patch": "@@ -200,8 +200,20 @@ class optional\n   }\n \n   /* The get operations have m_instantiated as a precondition.  */\n-  T &get () noexcept { return m_item; }\n-  constexpr const T &get () const noexcept { return m_item; }\n+  T &get () noexcept\n+  {\n+#if defined(_GLIBCXX_DEBUG)\n+    gdb_assert (this->has_value ());\n+#endif\n+    return m_item;\n+  }\n+  constexpr const T &get () const noexcept\n+  {\n+#if defined(_GLIBCXX_DEBUG)\n+    gdb_assert (this->has_value ());\n+#endif\n+    return m_item;\n+  }\n \n   /* The object.  */\n   union"
    }
  ]
}