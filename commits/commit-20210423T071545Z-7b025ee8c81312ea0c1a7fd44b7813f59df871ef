{
  "sha": "7b025ee8c81312ea0c1a7fd44b7813f59df871ef",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2IwMjVlZThjODEzMTJlYTBjMWE3ZmQ0NGI3ODEzZjU5ZGY4NzFlZg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-23T07:15:45Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-23T07:15:45Z"
    },
    "message": "x86: don't truncate values in diagnostics and alike\n\nTruncating an expression's X_add_number to just \"long\" can result in\nconfusing output (e.g. an apparently in-range number claimed to be out\nof range). Use the abstraction that bfd provides for this.\n\nTake the opportunity and also insert a missing \"of\".",
    "tree": {
      "sha": "fe73ddb6727cc8da6959b63802483308457df73f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fe73ddb6727cc8da6959b63802483308457df73f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7b025ee8c81312ea0c1a7fd44b7813f59df871ef",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b025ee8c81312ea0c1a7fd44b7813f59df871ef",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7b025ee8c81312ea0c1a7fd44b7813f59df871ef",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b025ee8c81312ea0c1a7fd44b7813f59df871ef/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0406545d0668c0d2900654a8ec65bdaf23d157c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0406545d0668c0d2900654a8ec65bdaf23d157c9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0406545d0668c0d2900654a8ec65bdaf23d157c9"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 9,
    "deletions": 4
  },
  "files": [
    {
      "sha": "a820eab5122290853587de65b4159f2967d5ad86",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b025ee8c81312ea0c1a7fd44b7813f59df871ef/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b025ee8c81312ea0c1a7fd44b7813f59df871ef/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=7b025ee8c81312ea0c1a7fd44b7813f59df871ef",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-23  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (pe): Don't truncate expression value.\n+\t(i386_finalize_displacement): Likewise.\n+\n 2021-04-21  Nick Clifton  <nickc@redhat.com>\n \n \t* testsuite/gas/aarch64/dwarf.d: Adjust expected output to allow"
    },
    {
      "sha": "007d774203a417b691e9fcd0e28db28eeef09856",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b025ee8c81312ea0c1a7fd44b7813f59df871ef/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b025ee8c81312ea0c1a7fd44b7813f59df871ef/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=7b025ee8c81312ea0c1a7fd44b7813f59df871ef",
      "patch": "@@ -3297,8 +3297,8 @@ static void\n pe (expressionS *e)\n {\n   fprintf (stdout, \"    operation     %d\\n\", e->X_op);\n-  fprintf (stdout, \"    add_number    %ld (%lx)\\n\",\n-\t   (long) e->X_add_number, (long) e->X_add_number);\n+  fprintf (stdout, \"    add_number    %\" BFD_VMA_FMT \"d (%\" BFD_VMA_FMT \"x)\\n\",\n+\t   e->X_add_number, e->X_add_number);\n   if (e->X_add_symbol)\n     {\n       fprintf (stdout, \"    add_symbol    \");\n@@ -10922,8 +10922,8 @@ i386_finalize_displacement (segT exp_seg ATTRIBUTE_UNUSED, expressionS *exp,\n \t  i.types[this_operand].bitfield.disp32s = 0;\n \t  if (i.types[this_operand].bitfield.baseindex)\n \t    {\n-\t      as_bad (_(\"0x%lx out range of signed 32bit displacement\"),\n-\t\t      (long) exp->X_add_number);\n+\t      as_bad (_(\"0x%\" BFD_VMA_FMT \"x out of range of signed 32bit displacement\"),\n+\t\t      exp->X_add_number);\n \t      ret = 0;\n \t    }\n \t}"
    }
  ]
}