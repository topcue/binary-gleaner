{
  "sha": "53807e9f3d83bc0f67b9b9471cc60fb37182e5ab",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTM4MDdlOWYzZDgzYmMwZjY3YjliOTQ3MWNjNjBmYjM3MTgyZTVhYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-12T19:32:15Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-03-12T19:32:15Z"
    },
    "message": "Don't use sprintf_vma for CORE_ADDR\n\nA few spots in gdb use sprintf_vma to print a CORE_ADDR.  This will\nfail on a 32-bit build once CORE_ADDR is always a 64-bit type.\n\nThis patch replaces these calls with phex instead.\n\ngdb/ChangeLog\n2020-03-12  Tom Tromey  <tom@tromey.com>\n\n\t* remote.c (remote_target::download_tracepoint)\n\t(remote_target::enable_tracepoint)\n\t(remote_target::disable_tracepoint): Use phex, not sprintf_vma.\n\t* breakpoint.c (print_recreate_masked_watchpoint): Use phex, not\n\tsprintf_vma.",
    "tree": {
      "sha": "b2e946a96a9a25df3b438fef2f3d2c7a7ef8b787",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b2e946a96a9a25df3b438fef2f3d2c7a7ef8b787"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/53807e9f3d83bc0f67b9b9471cc60fb37182e5ab",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53807e9f3d83bc0f67b9b9471cc60fb37182e5ab",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/53807e9f3d83bc0f67b9b9471cc60fb37182e5ab",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53807e9f3d83bc0f67b9b9471cc60fb37182e5ab/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "64f251023bcbd068861d4cb83b4e925083e0ea35",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64f251023bcbd068861d4cb83b4e925083e0ea35",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/64f251023bcbd068861d4cb83b4e925083e0ea35"
    }
  ],
  "stats": {
    "total": 25,
    "additions": 15,
    "deletions": 10
  },
  "files": [
    {
      "sha": "8c4487eef96080e475c8bfbd4af71e3a1d4f883d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53807e9f3d83bc0f67b9b9471cc60fb37182e5ab/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53807e9f3d83bc0f67b9b9471cc60fb37182e5ab/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=53807e9f3d83bc0f67b9b9471cc60fb37182e5ab",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-12  Tom Tromey  <tom@tromey.com>\n+\n+\t* remote.c (remote_target::download_tracepoint)\n+\t(remote_target::enable_tracepoint)\n+\t(remote_target::disable_tracepoint): Use phex, not sprintf_vma.\n+\t* breakpoint.c (print_recreate_masked_watchpoint): Use phex, not\n+\tsprintf_vma.\n+\n 2020-03-12  Tom Tromey  <tom@tromey.com>\n \n \t* symfile-mem.c: Update CORE_ADDR size assert."
    },
    {
      "sha": "e49025461babed20dfa43e60554c799ae9814b6e",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53807e9f3d83bc0f67b9b9471cc60fb37182e5ab/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53807e9f3d83bc0f67b9b9471cc60fb37182e5ab/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=53807e9f3d83bc0f67b9b9471cc60fb37182e5ab",
      "patch": "@@ -10400,7 +10400,6 @@ static void\n print_recreate_masked_watchpoint (struct breakpoint *b, struct ui_file *fp)\n {\n   struct watchpoint *w = (struct watchpoint *) b;\n-  char tmp[40];\n \n   switch (b->type)\n     {\n@@ -10418,8 +10417,8 @@ print_recreate_masked_watchpoint (struct breakpoint *b, struct ui_file *fp)\n \t\t      _(\"Invalid hardware watchpoint type.\"));\n     }\n \n-  sprintf_vma (tmp, w->hw_wp_mask);\n-  fprintf_unfiltered (fp, \" %s mask 0x%s\", w->exp_string, tmp);\n+  fprintf_unfiltered (fp, \" %s mask 0x%s\", w->exp_string,\n+\t\t      phex (w->hw_wp_mask, sizeof (CORE_ADDR)));\n   print_recreate_thread (b, fp);\n }\n "
    },
    {
      "sha": "0f78b1be1b50e5a5b548481d35b15abad8a41cbb",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53807e9f3d83bc0f67b9b9471cc60fb37182e5ab/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53807e9f3d83bc0f67b9b9471cc60fb37182e5ab/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=53807e9f3d83bc0f67b9b9471cc60fb37182e5ab",
      "patch": "@@ -12835,7 +12835,7 @@ remote_target::download_tracepoint (struct bp_location *loc)\n   encode_actions_rsp (loc, &tdp_actions, &stepping_actions);\n \n   tpaddr = loc->address;\n-  sprintf_vma (addrbuf, tpaddr);\n+  strcpy (addrbuf, phex (tpaddr, sizeof (CORE_ADDR)));\n   ret = snprintf (buf.data (), buf.size (), \"QTDP:%x:%s:%c:%lx:%x\",\n \t\t  b->number, addrbuf, /* address */\n \t\t  (b->enable_state == bp_enabled ? 'E' : 'D'),\n@@ -13097,11 +13097,10 @@ void\n remote_target::enable_tracepoint (struct bp_location *location)\n {\n   struct remote_state *rs = get_remote_state ();\n-  char addr_buf[40];\n \n-  sprintf_vma (addr_buf, location->address);\n   xsnprintf (rs->buf.data (), get_remote_packet_size (), \"QTEnable:%x:%s\",\n-\t     location->owner->number, addr_buf);\n+\t     location->owner->number,\n+\t     phex (location->address, sizeof (CORE_ADDR)));\n   putpkt (rs->buf);\n   remote_get_noisy_reply ();\n   if (rs->buf[0] == '\\0')\n@@ -13114,11 +13113,10 @@ void\n remote_target::disable_tracepoint (struct bp_location *location)\n {\n   struct remote_state *rs = get_remote_state ();\n-  char addr_buf[40];\n \n-  sprintf_vma (addr_buf, location->address);\n   xsnprintf (rs->buf.data (), get_remote_packet_size (), \"QTDisable:%x:%s\",\n-\t     location->owner->number, addr_buf);\n+\t     location->owner->number,\n+\t     phex (location->address, sizeof (CORE_ADDR)));\n   putpkt (rs->buf);\n   remote_get_noisy_reply ();\n   if (rs->buf[0] == '\\0')"
    }
  ]
}