{
  "sha": "7b9f73fad09a5ec76002625d562e32c4debc2a5e",
  "node_id": "C_kwDOANOeidoAKDdiOWY3M2ZhZDA5YTVlYzc2MDAyNjI1ZDU2MmUzMmM0ZGViYzJhNWU",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-11-08T17:58:27Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-11-09T15:30:48Z"
    },
    "message": "Correctly handle DW_LLE_start_end\n\nWhen the code to handle DW_LLE_start_end was added (as part of some\nDWARF 5 work), it was written to add the base address.  However, this\nseems incorrect -- the DWARF standard describes this as an address,\nnot an offset from the base address.\n\nThis patch changes a couple of spots in dwarf2/loc.c to fix this\nproblem.  It then changes decode_debug_loc_addresses to return\nDEBUG_LOC_OFFSET_PAIR instead, which preserves the previous semantics.\n\nThis only showed up on the RISC-V target internally, due to the\ncombination of DWARF 5 and a newer version of GCC.  I've updated a\ncouple of existing loclists test cases to demonstrate the bug.",
    "tree": {
      "sha": "294a549f0c3ec2e02c0680d26b4f059fe5d4733f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/294a549f0c3ec2e02c0680d26b4f059fe5d4733f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7b9f73fad09a5ec76002625d562e32c4debc2a5e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b9f73fad09a5ec76002625d562e32c4debc2a5e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7b9f73fad09a5ec76002625d562e32c4debc2a5e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b9f73fad09a5ec76002625d562e32c4debc2a5e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0b03c6f03d51f441d999e0cee92f81af543d9373",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b03c6f03d51f441d999e0cee92f81af543d9373",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0b03c6f03d51f441d999e0cee92f81af543d9373"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 30,
    "deletions": 7
  },
  "files": [
    {
      "sha": "b5936e13eee2971bfd701d052c85bfd12d96055f",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 12,
      "deletions": 5,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b9f73fad09a5ec76002625d562e32c4debc2a5e/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b9f73fad09a5ec76002625d562e32c4debc2a5e/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=7b9f73fad09a5ec76002625d562e32c4debc2a5e",
      "patch": "@@ -139,7 +139,9 @@ decode_debug_loc_addresses (const gdb_byte *loc_ptr, const gdb_byte *buf_end,\n   if (*low == 0 && *high == 0)\n     return DEBUG_LOC_END_OF_LIST;\n \n-  return DEBUG_LOC_START_END;\n+  /* We want the caller to apply the base address, so we must return\n+     DEBUG_LOC_OFFSET_PAIR here.  */\n+  return DEBUG_LOC_OFFSET_PAIR;\n }\n \n /* Decode the addresses in .debug_loclists entry.\n@@ -416,13 +418,15 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n \t .debug_addr which already has the DWARF \"base address\". We still add\n \t base_offset in case we're debugging a PIE executable. However, if the\n \t entry is DW_LLE_offset_pair from a DWO, add the base address as the\n-\t operands are offsets relative to the applicable base address.  */\n+\t operands are offsets relative to the applicable base address.\n+\t If the entry is DW_LLE_start_end or DW_LLE_start_length, then\n+\t it already is an address, and we don't need to add the base.  */\n       if (baton->from_dwo && kind != DEBUG_LOC_OFFSET_PAIR)\n \t{\n \t  low += base_offset;\n \t  high += base_offset;\n \t}\n-      else\n+      else if (kind == DEBUG_LOC_OFFSET_PAIR)\n \t{\n \t  low += base_address;\n \t  high += base_address;\n@@ -3983,8 +3987,11 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n \t}\n \n       /* Otherwise, a location expression entry.  */\n-      low += base_address;\n-      high += base_address;\n+      if (kind == DEBUG_LOC_OFFSET_PAIR)\n+\t{\n+\t  low += base_address;\n+\t  high += base_address;\n+\t}\n \n       low = gdbarch_adjust_dwarf2_addr (gdbarch, low);\n       high = gdbarch_adjust_dwarf2_addr (gdbarch, high);"
    },
    {
      "sha": "a7af7fd05371338709bcd5f05afdeb464c5eeb14",
      "filename": "gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b9f73fad09a5ec76002625d562e32c4debc2a5e/gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b9f73fad09a5ec76002625d562e32c4debc2a5e/gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.exp?ref=7b9f73fad09a5ec76002625d562e32c4debc2a5e",
      "patch": "@@ -1,4 +1,4 @@\n-# Copyright 2020 Free Software Foundation, Inc.\n+# Copyright 2020, 2021 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -105,6 +105,9 @@ foreach_with_prefix is_64 {false true} {\n \n \t\t# For variable foo.\n \t\tlist_ {\n+\t\t    # This should not affect the following addresses.\n+\t\t    base_address 0xffff\n+\n \t\t    # When in func1.\n \t\t    start_length $func1_addr $func1_len {\n \t\t\tDW_OP_constu 0x123456"
    },
    {
      "sha": "18ef2bfaf90e80399adef23aa3942271b9f6f5b9",
      "filename": "gdb/testsuite/gdb.dwarf2/loclists-start-end.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b9f73fad09a5ec76002625d562e32c4debc2a5e/gdb/testsuite/gdb.dwarf2/loclists-start-end.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b9f73fad09a5ec76002625d562e32c4debc2a5e/gdb/testsuite/gdb.dwarf2/loclists-start-end.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loclists-start-end.exp?ref=7b9f73fad09a5ec76002625d562e32c4debc2a5e",
      "patch": "@@ -96,6 +96,9 @@ foreach_with_prefix is_64 {false true} {\n \n \t\t# For variable foo.\n \t\tlist_ {\n+\t\t    # This should not affect the following addresses.\n+\t\t    base_address 0xffff\n+\n \t\t    # When in func1.\n \t\t    start_end $func1_addr \"$func1_addr + $func1_len\" {\n \t\t\tDW_OP_constu 0x123456"
    },
    {
      "sha": "774cac712a2043e54c3e841046b50748cd47b4a3",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b9f73fad09a5ec76002625d562e32c4debc2a5e/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b9f73fad09a5ec76002625d562e32c4debc2a5e/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=7b9f73fad09a5ec76002625d562e32c4debc2a5e",
      "patch": "@@ -1894,9 +1894,10 @@ namespace eval Dwarf {\n \tdefine_label $list_label\n \n \twith_override Dwarf::start_length Dwarf::_loclists_start_length {\n+\twith_override Dwarf::base_address Dwarf::_loclists_base_address {\n \twith_override Dwarf::start_end Dwarf::_loclists_start_end {\n \t    uplevel $body\n-\t}}\n+\t}}}\n \n \t# Emit end of list.\n \t_op .byte 0x00 \"DW_LLE_end_of_list\"\n@@ -1972,6 +1973,15 @@ namespace eval Dwarf {\n \tincr _debug_loclists_locdesc_count\n     }\n \n+    # Emit a DW_LLE_base_address entry.\n+    proc _loclists_base_address {addr} {\n+\tvariable _debug_loclists_addr_size\n+\tvariable _debug_loclists_locdesc_count\n+\t_op .byte 0x06 \"DW_LLE_base_address\"\n+\t_op .${_debug_loclists_addr_size}byte $addr \"base_address\"\n+\tincr _debug_loclists_locdesc_count\n+    }\n+\n     # Emit a DWARF .debug_line unit.\n     # OPTIONS is a list with an even number of elements containing\n     # option-name and option-value pairs."
    }
  ]
}