{
  "sha": "14d960c82a6094551a0c463973b676136e4e60de",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTRkOTYwYzgyYTYwOTQ1NTFhMGM0NjM5NzNiNjc2MTM2ZTRlNjBkZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-03T00:38:47Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-04T02:27:09Z"
    },
    "message": "gdb: make macro_expand_next return a gdb::unique_xmalloc_ptr<char>\n\nFor some reason, macro_expand_next does not return a\ngdb::unique_xmalloc_ptr<char>, like its counterparts macro_expand and\nmacro_expand_once.  This patch fixes that.\n\nmacro_buffer::release now returns a gdb::unique_xmalloc_ptr<char> too,\nwhich required updating the other callers.  The `.release (). release\n()` in macro_stringify looks a bit funny, but it's because one release\nis for the macro_buffer, and the other is for the unique ptr.\n\nI removed the ATTRIBUTE_UNUSED_RESULT on macro_buffer::release, I don't\nreally understand why it's there.  I don't see how this method could be\ncalled without using the result, that would be an obvious memory leak.\nThe commit that introduced it (4e4a8b932b7 \"Add ATTRIBUTE_UNUSED_RESULT\nto macro_buffer\") doesn't give any details.\n\ngdb/ChangeLog:\n\n\t* c-exp.y (scan_macro_expansion): Don't free `expansion`.\n\t(lex_one_token): Update.\n\t* macroexp.c (struct macro_buffer) <release>: Return\n\tgdb::unique_xmalloc_ptr<char>.\n\t(macro_stringify): Update.\n\t(macro_expand): Update.\n\t(macro_expand_next): Return gdb::unique_xmalloc_ptr<char>.\n\t* macroexp.h (macro_expand_next): Likewise.\n\nChange-Id: I67a74d0d479d2c20cdc82161ead7c54cea034f56",
    "tree": {
      "sha": "efc7275422c30ffaa44a9de146f29b4e30174968",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/efc7275422c30ffaa44a9de146f29b4e30174968"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/14d960c82a6094551a0c463973b676136e4e60de",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14d960c82a6094551a0c463973b676136e4e60de",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/14d960c82a6094551a0c463973b676136e4e60de",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14d960c82a6094551a0c463973b676136e4e60de/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "211d5b1c18eb96459289e17b58e91fad46708173",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/211d5b1c18eb96459289e17b58e91fad46708173",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/211d5b1c18eb96459289e17b58e91fad46708173"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 28,
    "deletions": 22
  },
  "files": [
    {
      "sha": "3cede90590652f5dca1a2455fe2bab2e4fffe1cc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14d960c82a6094551a0c463973b676136e4e60de/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14d960c82a6094551a0c463973b676136e4e60de/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=14d960c82a6094551a0c463973b676136e4e60de",
      "patch": "@@ -1,3 +1,14 @@\n+2020-07-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* c-exp.y (scan_macro_expansion): Don't free `expansion`.\n+\t(lex_one_token): Update.\n+\t* macroexp.c (struct macro_buffer) <release>: Return\n+\tgdb::unique_xmalloc_ptr<char>.\n+\t(macro_stringify): Update.\n+\t(macro_expand): Update.\n+\t(macro_expand_next): Return gdb::unique_xmalloc_ptr<char>.\n+\t* macroexp.h (macro_expand_next): Likewise.\n+\n 2020-07-02  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* macroexp.h (macro_lookup_ftype): Remove."
    },
    {
      "sha": "7fc23c4c8d285e0fed492a783120f68ab1bbb6d1",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14d960c82a6094551a0c463973b676136e4e60de/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14d960c82a6094551a0c463973b676136e4e60de/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=14d960c82a6094551a0c463973b676136e4e60de",
      "patch": "@@ -2551,17 +2551,13 @@ static const struct token ident_tokens[] =\n \n \n static void\n-scan_macro_expansion (char *expansion)\n+scan_macro_expansion (const char *expansion)\n {\n-  const char *copy;\n-\n   /* We'd better not be trying to push the stack twice.  */\n   gdb_assert (! cpstate->macro_original_text);\n \n-  /* Copy to the obstack, and then free the intermediate\n-     expansion.  */\n-  copy = obstack_strdup (&cpstate->expansion_obstack, expansion);\n-  xfree (expansion);\n+  /* Copy to the obstack.  */\n+  const char *copy = obstack_strdup (&cpstate->expansion_obstack, expansion);\n \n   /* Save the old lexptr value, so we can return to it when we're done\n      parsing the expanded text.  */\n@@ -2631,11 +2627,11 @@ lex_one_token (struct parser_state *par_state, bool *is_quoted_name)\n   /* Check if this is a macro invocation that we need to expand.  */\n   if (! scanning_macro_expansion ())\n     {\n-      char *expanded = macro_expand_next (&pstate->lexptr,\n-\t\t\t\t\t  *expression_macro_scope);\n+      gdb::unique_xmalloc_ptr<char> expanded\n+\t= macro_expand_next (&pstate->lexptr, *expression_macro_scope);\n \n-      if (expanded)\n-        scan_macro_expansion (expanded);\n+      if (expanded != nullptr)\n+        scan_macro_expansion (expanded.get ());\n     }\n \n   pstate->prev_lexptr = pstate->lexptr;"
    },
    {
      "sha": "e1d185d30c8e2c65faf2688752fa7cfd8d69dbe2",
      "filename": "gdb/macroexp.c",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14d960c82a6094551a0c463973b676136e4e60de/gdb/macroexp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14d960c82a6094551a0c463973b676136e4e60de/gdb/macroexp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macroexp.c?ref=14d960c82a6094551a0c463973b676136e4e60de",
      "patch": "@@ -128,15 +128,14 @@ struct macro_buffer\n       xfree (text);\n   }\n \n-  /* Release the text of the buffer to the caller, which is now\n-     responsible for freeing it.  */\n-  ATTRIBUTE_UNUSED_RESULT char *release ()\n+  /* Release the text of the buffer to the caller.  */\n+  gdb::unique_xmalloc_ptr<char> release ()\n   {\n     gdb_assert (! shared);\n     gdb_assert (size);\n     char *result = text;\n     text = NULL;\n-    return result;\n+    return gdb::unique_xmalloc_ptr<char> (result);\n   }\n \n   /* Resize the buffer to be at least N bytes long.  Raise an error if\n@@ -708,7 +707,7 @@ macro_stringify (const char *str)\n   stringify (&buffer, str, len);\n   buffer.appendc ('\\0');\n \n-  return buffer.release ();\n+  return buffer.release ().release ();\n }\n \n \f\n@@ -1429,7 +1428,7 @@ macro_expand (const char *source, const macro_scope &scope)\n \n   dest.appendc ('\\0');\n \n-  return gdb::unique_xmalloc_ptr<char> (dest.release ());\n+  return dest.release ();\n }\n \n \n@@ -1439,8 +1438,7 @@ macro_expand_once (const char *source, const macro_scope &scope)\n   error (_(\"Expand-once not implemented yet.\"));\n }\n \n-\n-char *\n+gdb::unique_xmalloc_ptr<char>\n macro_expand_next (const char **lexptr, const macro_scope &scope)\n {\n   struct macro_buffer tok;\n@@ -1454,7 +1452,7 @@ macro_expand_next (const char **lexptr, const macro_scope &scope)\n \n   /* Get the text's first preprocessing token.  */\n   if (! get_token (&tok, &src))\n-    return 0;\n+    return nullptr;\n \n   /* If it's a macro invocation, expand it.  */\n   if (maybe_expand (&dest, &tok, &src, 0, scope))\n@@ -1469,6 +1467,6 @@ macro_expand_next (const char **lexptr, const macro_scope &scope)\n   else\n     {\n       /* It wasn't a macro invocation.  */\n-      return 0;\n+      return nullptr;\n     }\n }"
    },
    {
      "sha": "511991cacd20720df59ea57791ff6d14d2d83712",
      "filename": "gdb/macroexp.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14d960c82a6094551a0c463973b676136e4e60de/gdb/macroexp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14d960c82a6094551a0c463973b676136e4e60de/gdb/macroexp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macroexp.h?ref=14d960c82a6094551a0c463973b676136e4e60de",
      "patch": "@@ -68,7 +68,8 @@ gdb::unique_xmalloc_ptr<char> macro_expand_once (const char *source,\n    much have to do tokenization to find the end of the string that\n    needs to be macro-expanded.  Our C/C++ tokenizer isn't really\n    designed to be called by anything but the yacc parser engine.  */\n-char *macro_expand_next (const char **lexptr, const macro_scope &scope);\n+gdb::unique_xmalloc_ptr<char> macro_expand_next (const char **lexptr,\n+\t\t\t\t\t\t const macro_scope &scope);\n \n /* Functions to classify characters according to cpp rules.  */\n "
    }
  ]
}