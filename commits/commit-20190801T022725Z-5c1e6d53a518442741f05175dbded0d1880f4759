{
  "sha": "5c1e6d53a518442741f05175dbded0d1880f4759",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWMxZTZkNTNhNTE4NDQyNzQxZjA1MTc1ZGJkZWQwZDE4ODBmNDc1OQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-31T07:15:14Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-01T02:27:25Z"
    },
    "message": "Rename lang_output_section_statement to lang_os_list\n\nThe idea is to make it a little easier to find uses of this list,\nso searches don't hit occurrences of lang_output_section_statement_type\nand lang_output_section_statement_enum.\n\n\t* ldlang.h (lang_os_list): Rename from lang_output_section_statement.\n\t* ldlang.c: Likewise throughout file.\n\t* emultempl/alphaelf.em: Likewise.\n\t* emultempl/elf32.em: Likewise.\n\t* emultempl/mmo.em: Likewise.\n\t* emultempl/pe.em: Likewise.\n\t* emultempl/pep.em: Likewise.\n\t* emultempl/ppc32elf.em: Likewise.\n\t* emultempl/spuelf.em: Likewise.",
    "tree": {
      "sha": "579752a5eaeb59fab201bb84adcc19ef9fb2c742",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/579752a5eaeb59fab201bb84adcc19ef9fb2c742"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5c1e6d53a518442741f05175dbded0d1880f4759",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c1e6d53a518442741f05175dbded0d1880f4759",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5c1e6d53a518442741f05175dbded0d1880f4759",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c1e6d53a518442741f05175dbded0d1880f4759/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "52b5a0c663ba7cb4f1488a7e96addc303fc6e021",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/52b5a0c663ba7cb4f1488a7e96addc303fc6e021",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/52b5a0c663ba7cb4f1488a7e96addc303fc6e021"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 47,
    "deletions": 43
  },
  "files": [
    {
      "sha": "45bea2573d81f7d5f898f09cdbeff8122cd3ba45",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c1e6d53a518442741f05175dbded0d1880f4759/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c1e6d53a518442741f05175dbded0d1880f4759/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=5c1e6d53a518442741f05175dbded0d1880f4759",
      "patch": "@@ -1,3 +1,15 @@\n+2019-08-01  Alan Modra  <amodra@gmail.com>\n+\n+\t* ldlang.h (lang_os_list): Rename from lang_output_section_statement.\n+\t* ldlang.c: Likewise throughout file.\n+\t* emultempl/alphaelf.em: Likewise.\n+\t* emultempl/elf32.em: Likewise.\n+\t* emultempl/mmo.em: Likewise.\n+\t* emultempl/pe.em: Likewise.\n+\t* emultempl/pep.em: Likewise.\n+\t* emultempl/ppc32elf.em: Likewise.\n+\t* emultempl/spuelf.em: Likewise.\n+\n 2019-07-26  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/ld-plugin/lto-3r.d: Accept D for powerpc64 descriptors."
    },
    {
      "sha": "55e01be037b17d77ccfcaa8631f00d734c912038",
      "filename": "ld/emultempl/alphaelf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/alphaelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/alphaelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/alphaelf.em?ref=5c1e6d53a518442741f05175dbded0d1880f4759",
      "patch": "@@ -47,7 +47,7 @@ alpha_after_open (void)\n       lang_output_section_statement_type *plt_os[2];\n \n       num_plt = 0;\n-      for (os = &lang_output_section_statement.head->output_section_statement;\n+      for (os = &lang_os_list.head->output_section_statement;\n \t   os != NULL;\n \t   os = os->next)\n \t{"
    },
    {
      "sha": "b3c012c46de32abddbf1eac2f5f90c33f1b61b19",
      "filename": "ld/emultempl/elf32.em",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/elf32.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/elf32.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/elf32.em?ref=5c1e6d53a518442741f05175dbded0d1880f4759",
      "patch": "@@ -1962,7 +1962,7 @@ output_rel_find (int isdyn, int rela)\n   lang_output_section_statement_type *last_rel = NULL;\n   lang_output_section_statement_type *last_rel_alloc = NULL;\n \n-  for (lookup = &lang_output_section_statement.head->output_section_statement;\n+  for (lookup = &lang_os_list.head->output_section_statement;\n        lookup != NULL;\n        lookup = lookup->next)\n     {\n@@ -2136,7 +2136,7 @@ gld${EMULATION_NAME}_place_orphan (asection *s,\n     {\n       /* Find the output mbind section with the same type, attributes\n \t and sh_info field.  */\n-      for (os = &lang_output_section_statement.head->output_section_statement;\n+      for (os = &lang_os_list.head->output_section_statement;\n \t   os != NULL;\n \t   os = os->next)\n \tif (os->bfd_section != NULL\n@@ -2315,7 +2315,7 @@ gld${EMULATION_NAME}_place_orphan (asection *s,\n \t\t\t\t\t       _bfd_elf_match_sections_by_type);\n       if (after == NULL)\n \t/* *ABS* is always the first output section statement.  */\n-\tafter = &lang_output_section_statement.head->output_section_statement;\n+\tafter = &lang_os_list.head->output_section_statement;\n     }\n \n   return lang_insert_orphan (s, secname, constraint, after, place, NULL, NULL);"
    },
    {
      "sha": "3e24e36e8736b0f94fc883711d9bf1f36ee06a33",
      "filename": "ld/emultempl/mmo.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/mmo.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/mmo.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/mmo.em?ref=5c1e6d53a518442741f05175dbded0d1880f4759",
      "patch": "@@ -166,7 +166,7 @@ mmo_place_orphan (asection *s,\n \n \t  /* We have to find the oss before this one, so we can use that as\n \t     \"after\".  */\n-\t  for (lookup = &lang_output_section_statement.head->output_section_statement;\n+\t  for (lookup = &lang_os_list.head->output_section_statement;\n \t       lookup != NULL && lookup->next != before;\n \t       lookup = lookup->next)\n \t    ;"
    },
    {
      "sha": "834215ac8505bf34ed89c39aac63a880d55b4c88",
      "filename": "ld/emultempl/pe.em",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/pe.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/pe.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pe.em?ref=5c1e6d53a518442741f05175dbded0d1880f4759",
      "patch": "@@ -2154,8 +2154,7 @@ gld_${EMULATION_NAME}_place_orphan (asection *s,\n \t\t\t\t\t\t       NULL);\n \t  if (after == NULL)\n \t    /* *ABS* is always the first output section statement.  */\n-\t    after = (&lang_output_section_statement.head\n-\t\t     ->output_section_statement);\n+\t    after = &lang_os_list.head->output_section_statement;\n \t}\n \n       /* All sections in an executable must be aligned to a page boundary."
    },
    {
      "sha": "9eb7cd7a4b538be05246711b74d4ff29893874f0",
      "filename": "ld/emultempl/pep.em",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/pep.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/pep.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pep.em?ref=5c1e6d53a518442741f05175dbded0d1880f4759",
      "patch": "@@ -1951,8 +1951,7 @@ gld_${EMULATION_NAME}_place_orphan (asection *s,\n \t\t\t\t\t\t       NULL);\n \t  if (after == NULL)\n \t    /* *ABS* is always the first output section statement.  */\n-\t    after = (&lang_output_section_statement.head\n-\t\t     ->output_section_statement);\n+\t    after = &lang_os_list.head->output_section_statement;\n \t}\n \n       /* All sections in an executable must be aligned to a page boundary."
    },
    {
      "sha": "5387ef1a6c8c3c737212e591b26ca7340b600528",
      "filename": "ld/emultempl/ppc32elf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/ppc32elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/ppc32elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/ppc32elf.em?ref=5c1e6d53a518442741f05175dbded0d1880f4759",
      "patch": "@@ -79,7 +79,7 @@ ppc_after_check_relocs (void)\n \n       num_got = 0;\n       num_plt = 0;\n-      for (os = &lang_output_section_statement.head->output_section_statement;\n+      for (os = &lang_os_list.head->output_section_statement;\n \t   os != NULL;\n \t   os = os->next)\n \t{"
    },
    {
      "sha": "f63097522fb898c9fdf36382dae25fae1d6e62e6",
      "filename": "ld/emultempl/spuelf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/spuelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c1e6d53a518442741f05175dbded0d1880f4759/ld/emultempl/spuelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/spuelf.em?ref=5c1e6d53a518442741f05175dbded0d1880f4759",
      "patch": "@@ -290,7 +290,7 @@ spu_before_allocation (void)\n \t    }\n \n \t  /* Ensure alignment of overlay sections is sufficient.  */\n-\t  for (os = &lang_output_section_statement.head->output_section_statement;\n+\t  for (os = &lang_os_list.head->output_section_statement;\n \t       os != NULL;\n \t       os = os->next)\n \t    if (os->bfd_section != NULL"
    },
    {
      "sha": "617f76919c4e6475bf9c0834f8937bf0ba6e8367",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 25,
      "deletions": 31,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c1e6d53a518442741f05175dbded0d1880f4759/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c1e6d53a518442741f05175dbded0d1880f4759/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=5c1e6d53a518442741f05175dbded0d1880f4759",
      "patch": "@@ -101,7 +101,7 @@ static void lang_do_memory_regions (void);\n /* Exported variables.  */\n const char *output_target;\n lang_output_section_statement_type *abs_output_section;\n-lang_statement_list_type lang_output_section_statement;\n+lang_statement_list_type lang_os_list;\n lang_statement_list_type *stat_ptr = &statement_list;\n /* Header for list of statements corresponding to files used in the final\n    executable.  This can be either object file specified on the command-line\n@@ -1222,19 +1222,19 @@ output_section_statement_newfunc (struct bfd_hash_entry *entry,\n   lang_statement_append (stat_ptr, &ret->s, &ret->s.header.next);\n \n   /* For every output section statement added to the list, except the\n-     first one, lang_output_section_statement.tail points to the \"next\"\n+     first one, lang_os_list.tail points to the \"next\"\n      field of the last element of the list.  */\n-  if (lang_output_section_statement.head != NULL)\n+  if (lang_os_list.head != NULL)\n     ret->s.output_section_statement.prev\n       = ((lang_output_section_statement_type *)\n-\t ((char *) lang_output_section_statement.tail\n+\t ((char *) lang_os_list.tail\n \t  - offsetof (lang_output_section_statement_type, next)));\n \n   /* GCC's strict aliasing rules prevent us from just casting the\n      address, so we store the pointer in a variable and cast that\n      instead.  */\n   nextp = &ret->s.output_section_statement.next;\n-  lang_statement_append (&lang_output_section_statement,\n+  lang_statement_append (&lang_os_list,\n \t\t\t &ret->s,\n \t\t\t (lang_statement_union_type **) nextp);\n   return &ret->root;\n@@ -1270,7 +1270,7 @@ lang_init (void)\n   lang_list_init (stat_ptr);\n \n   lang_list_init (&input_file_chain);\n-  lang_list_init (&lang_output_section_statement);\n+  lang_list_init (&lang_os_list);\n   lang_list_init (&file_chain);\n   first_file = lang_add_input_file (NULL, lang_input_file_is_marker_enum,\n \t\t\t\t    NULL);\n@@ -1548,7 +1548,7 @@ lang_output_section_find_by_flags (const asection *sec,\n \n   /* We know the first statement on this list is *ABS*.  May as well\n      skip it.  */\n-  first = &lang_output_section_statement.head->output_section_statement;\n+  first = &lang_os_list.head->output_section_statement;\n   first = first->next;\n \n   /* First try for an exact match.  */\n@@ -1776,8 +1776,7 @@ insert_os_after (lang_output_section_statement_type *after)\n   lang_statement_union_type **assign = NULL;\n   bfd_boolean ignore_first;\n \n-  ignore_first\n-    = after == &lang_output_section_statement.head->output_section_statement;\n+  ignore_first = after == &lang_os_list.head->output_section_statement;\n \n   for (where = &after->header.next;\n        *where != NULL;\n@@ -1863,8 +1862,7 @@ lang_insert_orphan (asection *s,\n       || (s->flags & (SEC_LOAD | SEC_ALLOC)) == 0)\n     address = exp_intop (0);\n \n-  os_tail = ((lang_output_section_statement_type **)\n-\t     lang_output_section_statement.tail);\n+  os_tail = (lang_output_section_statement_type **) lang_os_list.tail;\n   os = lang_enter_output_section_statement (secname, address, normal_section,\n \t\t\t\t\t    NULL, NULL, NULL, constraint, 0);\n \n@@ -1902,8 +1900,7 @@ lang_insert_orphan (asection *s,\n       /* Shuffle the bfd section list to make the output file look\n \t neater.  This is really only cosmetic.  */\n       if (place->section == NULL\n-\t  && after != (&lang_output_section_statement.head\n-\t\t       ->output_section_statement))\n+\t  && after != &lang_os_list.head->output_section_statement)\n \t{\n \t  asection *bfd_section = after->bfd_section;\n \n@@ -2177,8 +2174,7 @@ lang_insert_orphan (asection *s,\n \t     assigning *os_tail = NULL, but possibly added it back in\n \t     the same place when assigning *place->os_tail.  */\n \t  if (*os_tail == NULL)\n-\t    lang_output_section_statement.tail\n-\t      = (lang_statement_union_type **) os_tail;\n+\t    lang_os_list.tail = (lang_statement_union_type **) os_tail;\n \t}\n     }\n   return os;\n@@ -3525,7 +3521,7 @@ open_input_bfds (lang_statement_union_type *s, enum open_bfd_mode mode)\n \t\t  s->input_statement.flags.reload = TRUE;\n \t\t}\n \n-\t      os_tail = lang_output_section_statement.tail;\n+\t      os_tail = lang_os_list.tail;\n \t      lang_list_init (&add);\n \n \t      if (!load_symbols (&s->input_statement, &add))\n@@ -3539,7 +3535,7 @@ open_input_bfds (lang_statement_union_type *s, enum open_bfd_mode mode)\n \t\t     section statement list.  Very likely the user\n \t\t     forgot -T, and whatever we do here will not meet\n \t\t     naive user expectations.  */\n-\t\t  if (os_tail != lang_output_section_statement.tail)\n+\t\t  if (os_tail != lang_os_list.tail)\n \t\t    {\n \t\t      einfo (_(\"%P: warning: %s contains output sections;\"\n \t\t\t       \" did you forget -T?\\n\"),\n@@ -3933,7 +3929,7 @@ process_insert_statements (void)\n   /* \"start of list\" is actually the statement immediately after\n      the special abs_section output statement, so that it isn't\n      reordered.  */\n-  s = &lang_output_section_statement.head;\n+  s = &lang_os_list.head;\n   while (*(s = &(*s)->header.next) != NULL)\n     {\n       if ((*s)->header.type == lang_output_section_statement_enum)\n@@ -3984,8 +3980,7 @@ process_insert_statements (void)\n \t      if (last_os->next == NULL)\n \t\t{\n \t\t  next = &first_os->prev->next;\n-\t\t  lang_output_section_statement.tail\n-\t\t    = (lang_statement_union_type **) next;\n+\t\t  lang_os_list.tail = (lang_statement_union_type **) next;\n \t\t}\n \t      else\n \t\tlast_os->next->prev = first_os->prev;\n@@ -3994,8 +3989,7 @@ process_insert_statements (void)\n \t      if (where->next == NULL)\n \t\t{\n \t\t  next = &last_os->next;\n-\t\t  lang_output_section_statement.tail\n-\t\t    = (lang_statement_union_type **) next;\n+\t\t  lang_os_list.tail = (lang_statement_union_type **) next;\n \t\t}\n \t      else\n \t\twhere->next->prev = last_os;\n@@ -4058,14 +4052,14 @@ process_insert_statements (void)\n \t  /* Snip everything after the abs_section output statement we\n \t     know is at the start of the list, up to and including\n \t     the insert statement we are currently processing.  */\n-\t  first = lang_output_section_statement.head->header.next;\n-\t  lang_output_section_statement.head->header.next = (*s)->header.next;\n+\t  first = lang_os_list.head->header.next;\n+\t  lang_os_list.head->header.next = (*s)->header.next;\n \t  /* Add them back where they belong.  */\n \t  *s = *ptr;\n \t  if (*s == NULL)\n \t    statement_list.tail = s;\n \t  *ptr = first;\n-\t  s = &lang_output_section_statement.head;\n+\t  s = &lang_os_list.head;\n \t}\n     }\n \n@@ -4096,7 +4090,7 @@ strip_excluded_output_sections (void)\n       lang_reset_memory_regions ();\n     }\n \n-  for (os = &lang_output_section_statement.head->output_section_statement;\n+  for (os = &lang_os_list.head->output_section_statement;\n        os != NULL;\n        os = os->next)\n     {\n@@ -4157,7 +4151,7 @@ lang_clear_os_map (void)\n   if (map_head_is_link_order)\n     return;\n \n-  for (os = &lang_output_section_statement.head->output_section_statement;\n+  for (os = &lang_os_list.head->output_section_statement;\n        os != NULL;\n        os = os->next)\n     {\n@@ -6966,7 +6960,7 @@ lang_reset_memory_regions (void)\n       p->last_os = NULL;\n     }\n \n-  for (os = &lang_output_section_statement.head->output_section_statement;\n+  for (os = &lang_os_list.head->output_section_statement;\n        os != NULL;\n        os = os->next)\n     {\n@@ -7346,7 +7340,7 @@ lang_propagate_lma_regions (void)\n {\n   lang_output_section_statement_type *os;\n \n-  for (os = &lang_output_section_statement.head->output_section_statement;\n+  for (os = &lang_os_list.head->output_section_statement;\n        os != NULL;\n        os = os->next)\n     {\n@@ -8002,7 +7996,7 @@ lang_record_phdrs (void)\n       bfd_vma at;\n \n       c = 0;\n-      for (os = &lang_output_section_statement.head->output_section_statement;\n+      for (os = &lang_os_list.head->output_section_statement;\n \t   os != NULL;\n \t   os = os->next)\n \t{\n@@ -8088,7 +8082,7 @@ lang_record_phdrs (void)\n   free (secs);\n \n   /* Make sure all the phdr assignments succeeded.  */\n-  for (os = &lang_output_section_statement.head->output_section_statement;\n+  for (os = &lang_os_list.head->output_section_statement;\n        os != NULL;\n        os = os->next)\n     {"
    },
    {
      "sha": "2298cba82dec6c6fbfa9b20b82c85d5512c001a2",
      "filename": "ld/ldlang.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c1e6d53a518442741f05175dbded0d1880f4759/ld/ldlang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c1e6d53a518442741f05175dbded0d1880f4759/ld/ldlang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.h?ref=5c1e6d53a518442741f05175dbded0d1880f4759",
      "patch": "@@ -502,7 +502,7 @@ extern struct lang_phdr *lang_phdr_list;\n extern struct lang_nocrossrefs *nocrossref_list;\n extern const char *output_target;\n extern lang_output_section_statement_type *abs_output_section;\n-extern lang_statement_list_type lang_output_section_statement;\n+extern lang_statement_list_type lang_os_list;\n extern struct lang_input_statement_flags input_flags;\n extern bfd_boolean lang_has_input_file;\n extern lang_statement_list_type *stat_ptr;"
    }
  ]
}