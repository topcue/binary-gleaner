{
  "sha": "5ccd2fb722d1900adf799dd808fa2146cac85d0d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWNjZDJmYjcyMmQxOTAwYWRmNzk5ZGQ4MDhmYTIxNDZjYWM4NWQwZA==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-17T12:41:46Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-18T01:23:13Z"
    },
    "message": "Rename the read symbol to xread\n\nThis avoids clashes with macro read in the NetBSD headers.\n\ngdb/ChangeLog:\n\n\t* user-regs.c (user_reg::read): Rename to...\n\t(user_reg::xread): ...this.\n\t* (append_user_reg): Rename argument `read' to `xread'.\n\t* (user_reg_add_builtin): Likewise.\n\t* (user_reg_add): Likewise.\n\t* (value_of_user_reg): Likewise.",
    "tree": {
      "sha": "3d2f9700c989b4a832fe6c78dbb2aed9116d7b71",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3d2f9700c989b4a832fe6c78dbb2aed9116d7b71"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5ccd2fb722d1900adf799dd808fa2146cac85d0d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ccd2fb722d1900adf799dd808fa2146cac85d0d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5ccd2fb722d1900adf799dd808fa2146cac85d0d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ccd2fb722d1900adf799dd808fa2146cac85d0d/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fe64b263e025c5abc02738138d9283f53641ca42",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe64b263e025c5abc02738138d9283f53641ca42",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fe64b263e025c5abc02738138d9283f53641ca42"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 21,
    "deletions": 9
  },
  "files": [
    {
      "sha": "24093684000be429567c968ba56cdcce8ab03058",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ccd2fb722d1900adf799dd808fa2146cac85d0d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ccd2fb722d1900adf799dd808fa2146cac85d0d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5ccd2fb722d1900adf799dd808fa2146cac85d0d",
      "patch": "@@ -1,3 +1,12 @@\n+2020-03-17  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* user-regs.c (user_reg::read): Rename to...\n+\t(user_reg::xread): ...this.\n+\t* (append_user_reg): Rename argument `read' to `xread'.\n+\t* (user_reg_add_builtin): Likewise.\n+\t* (user_reg_add): Likewise.\n+\t* (value_of_user_reg): Likewise.\n+\n 2020-03-17  Kamil Rytarowski  <n54@gmx.com>\n \n \t* sparc-nat.c (gdb_ptrace): New."
    },
    {
      "sha": "cb922313b0c855b616ba8228022f3245882f4548",
      "filename": "gdb/user-regs.c",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ccd2fb722d1900adf799dd808fa2146cac85d0d/gdb/user-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ccd2fb722d1900adf799dd808fa2146cac85d0d/gdb/user-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/user-regs.c?ref=5ccd2fb722d1900adf799dd808fa2146cac85d0d",
      "patch": "@@ -41,7 +41,10 @@\n struct user_reg\n {\n   const char *name;\n-  struct value *(*read) (struct frame_info * frame, const void *baton);\n+  /* Avoid the \"read\" symbol name as it conflicts with a preprocessor symbol\n+     in the NetBSD header for Stack Smashing Protection, that wraps the read(2)\n+     syscall.  */\n+  struct value *(*xread) (struct frame_info * frame, const void *baton);\n   const void *baton;\n   struct user_reg *next;\n };\n@@ -60,15 +63,15 @@ struct gdb_user_regs\n \n static void\n append_user_reg (struct gdb_user_regs *regs, const char *name,\n-\t\t user_reg_read_ftype *read, const void *baton,\n+\t\t user_reg_read_ftype *xread, const void *baton,\n \t\t struct user_reg *reg)\n {\n   /* The caller is responsible for allocating memory needed to store\n      the register.  By doing this, the function can operate on a\n      register list stored in the common heap or a specific obstack.  */\n   gdb_assert (reg != NULL);\n   reg->name = name;\n-  reg->read = read;\n+  reg->xread = xread;\n   reg->baton = baton;\n   reg->next = NULL;\n   (*regs->last) = reg;\n@@ -82,10 +85,10 @@ static struct gdb_user_regs builtin_user_regs = {\n };\n \n void\n-user_reg_add_builtin (const char *name, user_reg_read_ftype *read,\n+user_reg_add_builtin (const char *name, user_reg_read_ftype *xread,\n \t\t      const void *baton)\n {\n-  append_user_reg (&builtin_user_regs, name, read, baton,\n+  append_user_reg (&builtin_user_regs, name, xread, baton,\n \t\t   XNEW (struct user_reg));\n }\n \n@@ -103,14 +106,14 @@ user_regs_init (struct gdbarch *gdbarch)\n \n   regs->last = &regs->first;\n   for (reg = builtin_user_regs.first; reg != NULL; reg = reg->next)\n-    append_user_reg (regs, reg->name, reg->read, reg->baton,\n+    append_user_reg (regs, reg->name, reg->xread, reg->baton,\n \t\t     GDBARCH_OBSTACK_ZALLOC (gdbarch, struct user_reg));\n   return regs;\n }\n \n void\n user_reg_add (struct gdbarch *gdbarch, const char *name,\n-\t      user_reg_read_ftype *read, const void *baton)\n+\t      user_reg_read_ftype *xread, const void *baton)\n {\n   struct gdb_user_regs *regs\n     = (struct gdb_user_regs *) gdbarch_data (gdbarch, user_regs_data);\n@@ -122,7 +125,7 @@ user_reg_add (struct gdbarch *gdbarch, const char *name,\n       regs = (struct gdb_user_regs *) user_regs_init (gdbarch);\n       deprecated_set_gdbarch_data (gdbarch, user_regs_data, regs);\n     }\n-  append_user_reg (regs, name, read, baton,\n+  append_user_reg (regs, name, xread, baton,\n \t\t   GDBARCH_OBSTACK_ZALLOC (gdbarch, struct user_reg));\n }\n \n@@ -214,7 +217,7 @@ value_of_user_reg (int regnum, struct frame_info *frame)\n   struct user_reg *reg = usernum_to_user_reg (gdbarch, regnum - maxregs);\n \n   gdb_assert (reg != NULL);\n-  return reg->read (frame, reg->baton);\n+  return reg->xread (frame, reg->baton);\n }\n \n static void"
    }
  ]
}