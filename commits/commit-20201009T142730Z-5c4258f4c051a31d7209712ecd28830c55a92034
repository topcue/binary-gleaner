{
  "sha": "5c4258f4c051a31d7209712ecd28830c55a92034",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWM0MjU4ZjRjMDUxYTMxZDcyMDk3MTJlY2QyODgzMGM1NWE5MjAzNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-10-09T14:27:30Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-10-09T14:27:30Z"
    },
    "message": "Return std::string from ada_encode\n\nThis changes ada_encode to return a std::string.  This simplifies it\nsomewhat, removes a use of GROW_VECT, and is also simpler for callers\nto use.\n\ngdb/ChangeLog\n2020-10-09  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.h (ada_encode): Return std::string.\n\t* ada-lang.c (ada_encode_1): Return std::string.\n\t(ada_encode): Likewise.\n\t(type_from_tag, ada_lookup_name_info::ada_lookup_name_info):\n\tUpdate.\n\t* ada-exp.y (block_lookup, write_var_or_type): Update.",
    "tree": {
      "sha": "4ca01f20c3de6dae58e62c5a3b0c34f3d78a0e10",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4ca01f20c3de6dae58e62c5a3b0c34f3d78a0e10"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5c4258f4c051a31d7209712ecd28830c55a92034",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c4258f4c051a31d7209712ecd28830c55a92034",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5c4258f4c051a31d7209712ecd28830c55a92034",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c4258f4c051a31d7209712ecd28830c55a92034/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fa40fbe484954c560ab1c0ff4bc1b2eeb1511344",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 34,
    "deletions": 40
  },
  "files": [
    {
      "sha": "01bca5c58427981f812f740031f08235265dd642",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c4258f4c051a31d7209712ecd28830c55a92034/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c4258f4c051a31d7209712ecd28830c55a92034/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5c4258f4c051a31d7209712ecd28830c55a92034",
      "patch": "@@ -1,3 +1,12 @@\n+2020-10-09  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.h (ada_encode): Return std::string.\n+\t* ada-lang.c (ada_encode_1): Return std::string.\n+\t(ada_encode): Likewise.\n+\t(type_from_tag, ada_lookup_name_info::ada_lookup_name_info):\n+\tUpdate.\n+\t* ada-exp.y (block_lookup, write_var_or_type): Update.\n+\n 2020-10-09  Hannes Domani  <ssbssa@yahoo.de>\n \n \tPR exp/26714"
    },
    {
      "sha": "d09b43ea9ca0668aac0d23c3881a43861645bad2",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c4258f4c051a31d7209712ecd28830c55a92034/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c4258f4c051a31d7209712ecd28830c55a92034/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=5c4258f4c051a31d7209712ecd28830c55a92034",
      "patch": "@@ -953,13 +953,17 @@ block_lookup (const struct block *context, const char *raw_name)\n   struct symtab *symtab;\n   const struct block *result = NULL;\n \n+  std::string name_storage;\n   if (raw_name[0] == '\\'')\n     {\n       raw_name += 1;\n       name = raw_name;\n     }\n   else\n-    name = ada_encode (raw_name);\n+    {\n+      name_storage = ada_encode (raw_name);\n+      name = name_storage.c_str ();\n+    }\n \n   nsyms = ada_lookup_symbol_list (name, context, VAR_DOMAIN, &syms);\n \n@@ -1201,9 +1205,10 @@ write_var_or_type (struct parser_state *par_state,\n   if (block == NULL)\n     block = par_state->expression_context_block;\n \n-  encoded_name = ada_encode (name0.ptr);\n-  name_len = strlen (encoded_name);\n-  encoded_name = obstack_strndup (&temp_parse_space, encoded_name, name_len);\n+  std::string name_storage = ada_encode (name0.ptr);\n+  name_len = name_storage.size ();\n+  encoded_name = obstack_strndup (&temp_parse_space, name_storage.c_str (),\n+\t\t\t\t  name_len);\n   for (depth = 0; depth < MAX_RENAMING_CHAIN_LENGTH; depth += 1)\n     {\n       int tail_index;"
    },
    {
      "sha": "fbce14bbe421af584c0a287ffb0d115d3b82a985",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 15,
      "deletions": 35,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c4258f4c051a31d7209712ecd28830c55a92034/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c4258f4c051a31d7209712ecd28830c55a92034/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=5c4258f4c051a31d7209712ecd28830c55a92034",
      "patch": "@@ -918,33 +918,21 @@ const struct ada_opname_map ada_opname_table[] = {\n   {NULL, NULL}\n };\n \n-/* The \"encoded\" form of DECODED, according to GNAT conventions.  The\n-   result is valid until the next call to ada_encode.  If\n+/* The \"encoded\" form of DECODED, according to GNAT conventions.  If\n    THROW_ERRORS, throw an error if invalid operator name is found.\n-   Otherwise, return NULL in that case.  */\n+   Otherwise, return the empty string in that case.  */\n \n-static char *\n+static std::string\n ada_encode_1 (const char *decoded, bool throw_errors)\n {\n-  static char *encoding_buffer = NULL;\n-  static size_t encoding_buffer_size = 0;\n-  const char *p;\n-  int k;\n-\n   if (decoded == NULL)\n-    return NULL;\n-\n-  GROW_VECT (encoding_buffer, encoding_buffer_size,\n-             2 * strlen (decoded) + 10);\n+    return {};\n \n-  k = 0;\n-  for (p = decoded; *p != '\\0'; p += 1)\n+  std::string encoding_buffer;\n+  for (const char *p = decoded; *p != '\\0'; p += 1)\n     {\n       if (*p == '.')\n-        {\n-          encoding_buffer[k] = encoding_buffer[k + 1] = '_';\n-          k += 2;\n-        }\n+\tencoding_buffer.append (\"__\");\n       else if (*p == '\"')\n         {\n           const struct ada_opname_map *mapping;\n@@ -958,27 +946,21 @@ ada_encode_1 (const char *decoded, bool throw_errors)\n \t      if (throw_errors)\n \t\terror (_(\"invalid Ada operator name: %s\"), p);\n \t      else\n-\t\treturn NULL;\n+\t\treturn {};\n \t    }\n-          strcpy (encoding_buffer + k, mapping->encoded);\n-          k += strlen (mapping->encoded);\n+\t  encoding_buffer.append (mapping->encoded);\n           break;\n         }\n       else\n-        {\n-          encoding_buffer[k] = *p;\n-          k += 1;\n-        }\n+\tencoding_buffer.push_back (*p);\n     }\n \n-  encoding_buffer[k] = '\\0';\n   return encoding_buffer;\n }\n \n-/* The \"encoded\" form of DECODED, according to GNAT conventions.\n-   The result is valid until the next call to ada_encode.  */\n+/* The \"encoded\" form of DECODED, according to GNAT conventions.  */\n \n-char *\n+std::string\n ada_encode (const char *decoded)\n {\n   return ada_encode_1 (decoded, true);\n@@ -6384,7 +6366,7 @@ type_from_tag (struct value *tag)\n   gdb::unique_xmalloc_ptr<char> type_name = ada_tag_name (tag);\n \n   if (type_name != NULL)\n-    return ada_find_any_type (ada_encode (type_name.get ()));\n+    return ada_find_any_type (ada_encode (type_name.get ()).c_str ());\n   return NULL;\n }\n \n@@ -13613,10 +13595,8 @@ ada_lookup_name_info::ada_lookup_name_info (const lookup_name_info &lookup_name)\n       if (!m_encoded_p)\n \t{\n \t  const char *folded = ada_fold_name (user_name);\n-\t  const char *encoded = ada_encode_1 (folded, false);\n-\t  if (encoded != NULL)\n-\t    m_encoded_name = encoded;\n-\t  else\n+\t  m_encoded_name = ada_encode_1 (folded, false);\n+\t  if (m_encoded_name.empty ())\n \t    m_encoded_name = gdb::to_string (user_name);\n \t}\n       else"
    },
    {
      "sha": "933192676547beef18bc4fed1bd5cffd2b6648d4",
      "filename": "gdb/ada-lang.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c4258f4c051a31d7209712ecd28830c55a92034/gdb/ada-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c4258f4c051a31d7209712ecd28830c55a92034/gdb/ada-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.h?ref=5c4258f4c051a31d7209712ecd28830c55a92034",
      "patch": "@@ -318,7 +318,7 @@ extern struct type *ada_get_base_type (struct type *);\n \n extern struct type *ada_check_typedef (struct type *);\n \n-extern char *ada_encode (const char *);\n+extern std::string ada_encode (const char *);\n \n extern const char *ada_enum_name (const char *);\n "
    }
  ]
}