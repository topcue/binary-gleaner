{
  "sha": "94585e7f93c9477bcf2835d8245e967053ce2b41",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTQ1ODVlN2Y5M2M5NDc3YmNmMjgzNWQ4MjQ1ZTk2NzA1M2NlMmI0MQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-04-23T20:45:30Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-05-28T16:07:19Z"
    },
    "message": "libctf: low-level list manipulation and helper utilities\n\nThese utilities are a bit of a ragbag of small things needed by more\nthan one TU: list manipulation, ELF32->64 translators, routines to look\nup strings in string tables, dynamically-allocated string appenders, and\nroutines to set the specialized errno values previously committed in\n<ctf-api.h>.\n\nWe do still need to dig around in raw ELF symbol tables in places,\nbecause libctf allows the caller to pass in the contents of string and\nsymbol sections without telling it where they come from, so we cannot\nuse BFD to get the symbols (BFD reasonably demands the entire file).  So\nextract minimal ELF definitions from glibc into a private header named\nlibctf/elf.h: later, we use those to get symbols.  (The start-of-\ncopyright range on elf.h reflects this glibc heritage.)\n\nlibctf/\n\t* ctf-util.c: New file.\n\t* elf.h: Likewise.\n\t* ctf-impl.h: Include it, and add declarations.",
    "tree": {
      "sha": "be6b9dd49c2463d5a72368ce400f19538f06bc9b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/be6b9dd49c2463d5a72368ce400f19538f06bc9b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/94585e7f93c9477bcf2835d8245e967053ce2b41",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94585e7f93c9477bcf2835d8245e967053ce2b41",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/94585e7f93c9477bcf2835d8245e967053ce2b41",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94585e7f93c9477bcf2835d8245e967053ce2b41/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "60da9d955964759b1f52690bff587ad32a198507",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60da9d955964759b1f52690bff587ad32a198507",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/60da9d955964759b1f52690bff587ad32a198507"
    }
  ],
  "stats": {
    "total": 276,
    "additions": 276,
    "deletions": 0
  },
  "files": [
    {
      "sha": "7648c268ce9dbcb6634a2ba5f3c8674e83634f18",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94585e7f93c9477bcf2835d8245e967053ce2b41/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94585e7f93c9477bcf2835d8245e967053ce2b41/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=94585e7f93c9477bcf2835d8245e967053ce2b41",
      "patch": "@@ -1,3 +1,9 @@\n+2019-05-28  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-util.c: New file.\n+\t* elf.h: Likewise.\n+\t* ctf-impl.h: Include it, and add declarations.\n+\n 2019-05-28  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-impl.h: New file."
    },
    {
      "sha": "268b2f343f7ae960f9a729c383f5c37cdd25c82b",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94585e7f93c9477bcf2835d8245e967053ce2b41/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94585e7f93c9477bcf2835d8245e967053ce2b41/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=94585e7f93c9477bcf2835d8245e967053ce2b41",
      "patch": "@@ -24,6 +24,13 @@\n #include <sys/errno.h>\n #include <ctf-api.h>\n #include <sys/types.h>\n+#include <stdlib.h>\n+#include <stdarg.h>\n+#include <stdio.h>\n+#include <stdint.h>\n+#include <limits.h>\n+#include <ctype.h>\n+#include <elf.h>\n \n #ifdef\t__cplusplus\n extern \"C\"\n@@ -51,6 +58,25 @@ extern \"C\"\n \n #endif\n \n+typedef struct ctf_list\n+{\n+  struct ctf_list *l_prev;\t/* Previous pointer or tail pointer.  */\n+  struct ctf_list *l_next;\t/* Next pointer or head pointer.  */\n+} ctf_list_t;\n+\n+#define\tctf_list_prev(elem)\t((void *)(((ctf_list_t *)(elem))->l_prev))\n+#define\tctf_list_next(elem)\t((void *)(((ctf_list_t *)(elem))->l_next))\n+\n+extern void ctf_list_append (ctf_list_t *, void *);\n+extern void ctf_list_prepend (ctf_list_t *, void *);\n+extern void ctf_list_delete (ctf_list_t *, void *);\n+\n+extern const char *ctf_strraw (ctf_file_t *, uint32_t);\n+extern const char *ctf_strptr (ctf_file_t *, uint32_t);\n+\n+extern void *ctf_set_open_errno (int *, int);\n+extern long ctf_set_errno (ctf_file_t *, int);\n+\n _libctf_malloc_\n extern void *ctf_data_alloc (size_t);\n extern void ctf_data_free (void *, size_t);\n@@ -65,10 +91,17 @@ _libctf_malloc_\n extern void *ctf_alloc (size_t);\n extern void ctf_free (void *);\n \n+_libctf_malloc_\n+extern char *ctf_strdup (const char *);\n+extern char *ctf_str_append (char *, const char *);\n+extern const char *ctf_strerror (int);\n+\n _libctf_printflike_ (1, 2)\n extern void ctf_dprintf (const char *, ...);\n extern void libctf_init_debug (void);\n \n+extern Elf64_Sym *ctf_sym_to_elf64 (const Elf32_Sym *src, Elf64_Sym *dst);\n+\n extern int _libctf_debug;\t/* debugging messages enabled */\n \n #ifdef\t__cplusplus"
    },
    {
      "sha": "44600467a7e8942aca38af2b0a1bba922af916de",
      "filename": "libctf/ctf-util.c",
      "status": "added",
      "additions": 176,
      "deletions": 0,
      "changes": 176,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94585e7f93c9477bcf2835d8245e967053ce2b41/libctf/ctf-util.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94585e7f93c9477bcf2835d8245e967053ce2b41/libctf/ctf-util.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-util.c?ref=94585e7f93c9477bcf2835d8245e967053ce2b41",
      "patch": "@@ -0,0 +1,176 @@\n+/* Miscellaneous utilities.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of libctf.\n+\n+   libctf is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   This program is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+   See the GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include <ctf-impl.h>\n+#include <string.h>\n+\n+/* Simple doubly-linked list append routine.  This implementation assumes that\n+   each list element contains an embedded ctf_list_t as the first member.\n+   An additional ctf_list_t is used to store the head (l_next) and tail\n+   (l_prev) pointers.  The current head and tail list elements have their\n+   previous and next pointers set to NULL, respectively.  */\n+\n+void\n+ctf_list_append (ctf_list_t *lp, void *newp)\n+{\n+  ctf_list_t *p = lp->l_prev;\t/* p = tail list element.  */\n+  ctf_list_t *q = newp;\t\t/* q = new list element.  */\n+\n+  lp->l_prev = q;\n+  q->l_prev = p;\n+  q->l_next = NULL;\n+\n+  if (p != NULL)\n+    p->l_next = q;\n+  else\n+    lp->l_next = q;\n+}\n+\n+/* Prepend the specified existing element to the given ctf_list_t.  The\n+   existing pointer should be pointing at a struct with embedded ctf_list_t.  */\n+\n+void\n+ctf_list_prepend (ctf_list_t * lp, void *newp)\n+{\n+  ctf_list_t *p = newp;\t\t/* p = new list element.  */\n+  ctf_list_t *q = lp->l_next;\t/* q = head list element.  */\n+\n+  lp->l_next = p;\n+  p->l_prev = NULL;\n+  p->l_next = q;\n+\n+  if (q != NULL)\n+    q->l_prev = p;\n+  else\n+    lp->l_prev = p;\n+}\n+\n+/* Delete the specified existing element from the given ctf_list_t.  The\n+   existing pointer should be pointing at a struct with embedded ctf_list_t.  */\n+\n+void\n+ctf_list_delete (ctf_list_t *lp, void *existing)\n+{\n+  ctf_list_t *p = existing;\n+\n+  if (p->l_prev != NULL)\n+    p->l_prev->l_next = p->l_next;\n+  else\n+    lp->l_next = p->l_next;\n+\n+  if (p->l_next != NULL)\n+    p->l_next->l_prev = p->l_prev;\n+  else\n+    lp->l_prev = p->l_prev;\n+}\n+\n+/* Convert a 32-bit ELF symbol into Elf64 and return a pointer to it.  */\n+\n+Elf64_Sym *\n+ctf_sym_to_elf64 (const Elf32_Sym *src, Elf64_Sym *dst)\n+{\n+  dst->st_name = src->st_name;\n+  dst->st_value = src->st_value;\n+  dst->st_size = src->st_size;\n+  dst->st_info = src->st_info;\n+  dst->st_other = src->st_other;\n+  dst->st_shndx = src->st_shndx;\n+\n+  return dst;\n+}\n+\n+/* Convert an encoded CTF string name into a pointer to a C string by looking\n+  up the appropriate string table buffer and then adding the offset.  */\n+\n+const char *\n+ctf_strraw (ctf_file_t *fp, uint32_t name)\n+{\n+  ctf_strs_t *ctsp = &fp->ctf_str[CTF_NAME_STID (name)];\n+\n+  if (ctsp->cts_strs != NULL && CTF_NAME_OFFSET (name) < ctsp->cts_len)\n+    return (ctsp->cts_strs + CTF_NAME_OFFSET (name));\n+\n+  /* String table not loaded or corrupt offset.  */\n+  return NULL;\n+}\n+\n+const char *\n+ctf_strptr (ctf_file_t *fp, uint32_t name)\n+{\n+  const char *s = ctf_strraw (fp, name);\n+  return (s != NULL ? s : \"(?)\");\n+}\n+\n+/* Same as strdup(3C), but use ctf_alloc() to do the memory allocation. */\n+\n+_libctf_malloc_ char *\n+ctf_strdup (const char *s1)\n+{\n+  char *s2 = ctf_alloc (strlen (s1) + 1);\n+\n+  if (s2 != NULL)\n+    (void) strcpy (s2, s1);\n+\n+  return s2;\n+}\n+\n+/* A string appender working on dynamic strings.  */\n+\n+char *\n+ctf_str_append (char *s, const char *append)\n+{\n+  size_t s_len = 0;\n+\n+  if (append == NULL)\n+    return s;\n+\n+  if (s != NULL)\n+    s_len = strlen (s);\n+\n+  size_t append_len = strlen (append);\n+\n+  if ((s = realloc (s, s_len + append_len + 1)) == NULL)\n+    return NULL;\n+\n+  memcpy (s + s_len, append, append_len);\n+  s[s_len + append_len] = '\\0';\n+\n+  return s;\n+}\n+\n+/* Store the specified error code into errp if it is non-NULL, and then\n+   return NULL for the benefit of the caller.  */\n+\n+void *\n+ctf_set_open_errno (int *errp, int error)\n+{\n+  if (errp != NULL)\n+    *errp = error;\n+  return NULL;\n+}\n+\n+/* Store the specified error code into the CTF container, and then return\n+   CTF_ERR for the benefit of the caller. */\n+\n+long\n+ctf_set_errno (ctf_file_t * fp, int err)\n+{\n+  fp->ctf_errno = err;\n+  return CTF_ERR;\n+}"
    },
    {
      "sha": "fee1630909c3e8aa2d437dfa1732774aec1d9e7c",
      "filename": "libctf/elf.h",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94585e7f93c9477bcf2835d8245e967053ce2b41/libctf/elf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94585e7f93c9477bcf2835d8245e967053ce2b41/libctf/elf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/elf.h?ref=94585e7f93c9477bcf2835d8245e967053ce2b41",
      "patch": "@@ -0,0 +1,61 @@\n+/* This file defines standard ELF types, structures, and macros.\n+   Copyright (C) 1995-2019 Free Software Foundation, Inc.\n+\n+   This file is part of libctf.\n+\n+   libctf is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   This program is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+   See the GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _CTF_ELF_H\n+#define _CTF_ELF_H\n+\n+#include \"config.h\"\n+#include \"ansidecl.h\"\n+#include <stdint.h>\n+#include \"elf/common.h\"\n+#include \"elf/external.h\"\n+\n+typedef uint32_t Elf32_Word;\n+typedef uint32_t Elf64_Word;\n+typedef uint32_t Elf32_Addr;\n+typedef uint64_t Elf64_Addr;\n+typedef uint64_t Elf64_Xword;\n+typedef uint16_t Elf32_Section;\n+typedef uint16_t Elf64_Section;\n+\n+#define SHN_EXTABS\t0xFFF1\t\t/* Associated symbol is absolute */\n+\n+/* Symbol table entry.  */\n+\n+typedef struct\n+{\n+  Elf32_Word\tst_name;\t\t/* Symbol name (string tbl index) */\n+  Elf32_Addr\tst_value;\t\t/* Symbol value */\n+  Elf32_Word\tst_size;\t\t/* Symbol size */\n+  unsigned char\tst_info;\t\t/* Symbol type and binding */\n+  unsigned char\tst_other;\t\t/* Symbol visibility */\n+  Elf32_Section\tst_shndx;\t\t/* Section index */\n+} Elf32_Sym;\n+\n+typedef struct\n+{\n+  Elf64_Word\tst_name;\t\t/* Symbol name (string tbl index) */\n+  unsigned char\tst_info;\t\t/* Symbol type and binding */\n+  unsigned char st_other;\t\t/* Symbol visibility */\n+  Elf64_Section\tst_shndx;\t\t/* Section index */\n+  Elf64_Addr\tst_value;\t\t/* Symbol value */\n+  Elf64_Xword\tst_size;\t\t/* Symbol size */\n+} Elf64_Sym;\n+\n+#endif\t/* _CTF_ELF_H */"
    }
  ]
}