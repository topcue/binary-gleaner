{
  "sha": "61d7f128e6ea37af805be4e365f5879b0d42bb93",
  "node_id": "C_kwDOANOeidoAKDYxZDdmMTI4ZTZlYTM3YWY4MDViZTRlMzY1ZjU4NzliMGQ0MmJiOTM",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-10-25T18:33:55Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-10-25T18:33:55Z"
    },
    "message": "gdbserver: make target_pid_to_str return std::string\n\nI wanted to write a warning that included two target_pid_to_str calls,\nlike this:\n\n    warning (_(\"Blabla %s, blabla %s\"),\n\t     target_pid_to_str (ptid1),\n\t     target_pid_to_str (ptid2));\n\nThis doesn't work, because target_pid_to_str stores its result in a\nstatic buffer, so my message would show twice the same ptid.  Change\ntarget_pid_to_str to return an std::string to avoid this.  I don't think\nwe save much by using a static buffer, but it is more error-prone.\n\nChange-Id: Ie3f649627686b84930529cc5c7c691ccf5d36dc2",
    "tree": {
      "sha": "c581803312ce6dcb9b37ef348c37367090ea293e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c581803312ce6dcb9b37ef348c37367090ea293e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/61d7f128e6ea37af805be4e365f5879b0d42bb93",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61d7f128e6ea37af805be4e365f5879b0d42bb93",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/61d7f128e6ea37af805be4e365f5879b0d42bb93",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61d7f128e6ea37af805be4e365f5879b0d42bb93/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b3a9fe6f51fd3922ce7978b6ba5ce0cbdf33885e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3a9fe6f51fd3922ce7978b6ba5ce0cbdf33885e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b3a9fe6f51fd3922ce7978b6ba5ce0cbdf33885e"
    }
  ],
  "stats": {
    "total": 101,
    "additions": 50,
    "deletions": 51
  },
  "files": [
    {
      "sha": "34ede238d19fb2393e9ea39be7a4e45e4ee36f4b",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 32,
      "deletions": 30,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=61d7f128e6ea37af805be4e365f5879b0d42bb93",
      "patch": "@@ -842,7 +842,7 @@ linux_process_target::save_stop_reason (lwp_info *lwp)\n \t  struct thread_info *thr = get_lwp_thread (lwp);\n \n \t  debug_printf (\"CSBB: %s stopped by software breakpoint\\n\",\n-\t\t\ttarget_pid_to_str (ptid_of (thr)));\n+\t\t\ttarget_pid_to_str (ptid_of (thr)).c_str ());\n \t}\n \n       /* Back up the PC if necessary.  */\n@@ -863,7 +863,7 @@ linux_process_target::save_stop_reason (lwp_info *lwp)\n \t  struct thread_info *thr = get_lwp_thread (lwp);\n \n \t  debug_printf (\"CSBB: %s stopped by hardware breakpoint\\n\",\n-\t\t\ttarget_pid_to_str (ptid_of (thr)));\n+\t\t\ttarget_pid_to_str (ptid_of (thr)).c_str ());\n \t}\n     }\n   else if (lwp->stop_reason == TARGET_STOPPED_BY_WATCHPOINT)\n@@ -873,7 +873,7 @@ linux_process_target::save_stop_reason (lwp_info *lwp)\n \t  struct thread_info *thr = get_lwp_thread (lwp);\n \n \t  debug_printf (\"CSBB: %s stopped by hardware watchpoint\\n\",\n-\t\t\ttarget_pid_to_str (ptid_of (thr)));\n+\t\t\ttarget_pid_to_str (ptid_of (thr)).c_str ());\n \t}\n     }\n   else if (lwp->stop_reason == TARGET_STOPPED_BY_SINGLE_STEP)\n@@ -883,7 +883,7 @@ linux_process_target::save_stop_reason (lwp_info *lwp)\n \t  struct thread_info *thr = get_lwp_thread (lwp);\n \n \t  debug_printf (\"CSBB: %s stopped by trace\\n\",\n-\t\t\ttarget_pid_to_str (ptid_of (thr)));\n+\t\t\ttarget_pid_to_str (ptid_of (thr)).c_str ());\n \t}\n     }\n \n@@ -1249,7 +1249,7 @@ linux_kill_one_lwp (struct lwp_info *lwp)\n       int save_errno = errno;\n \n       debug_printf (\"LKL:  kill_lwp (SIGKILL) %s, 0, 0 (%s)\\n\",\n-\t\t    target_pid_to_str (ptid_of (thr)),\n+\t\t    target_pid_to_str (ptid_of (thr)).c_str (),\n \t\t    save_errno ? safe_strerror (save_errno) : \"OK\");\n     }\n \n@@ -1260,7 +1260,7 @@ linux_kill_one_lwp (struct lwp_info *lwp)\n       int save_errno = errno;\n \n       debug_printf (\"LKL:  PTRACE_KILL %s, 0, 0 (%s)\\n\",\n-\t\t    target_pid_to_str (ptid_of (thr)),\n+\t\t    target_pid_to_str (ptid_of (thr)).c_str (),\n \t\t    save_errno ? safe_strerror (save_errno) : \"OK\");\n     }\n }\n@@ -1325,7 +1325,7 @@ kill_one_lwp_callback (thread_info *thread, int pid)\n     {\n       if (debug_threads)\n \tdebug_printf (\"lkop: is last of process %s\\n\",\n-\t\t      target_pid_to_str (thread->id));\n+\t\t      target_pid_to_str (thread->id).c_str ());\n       return;\n     }\n \n@@ -1399,7 +1399,7 @@ get_detach_signal (struct thread_info *thread)\n     {\n       if (debug_threads)\n \tdebug_printf (\"GPS: lwp %s hasn't stopped: no pending signal\\n\",\n-\t\t      target_pid_to_str (ptid_of (thread)));\n+\t\t      target_pid_to_str (ptid_of (thread)).c_str ());\n       return 0;\n     }\n \n@@ -1409,7 +1409,7 @@ get_detach_signal (struct thread_info *thread)\n       if (debug_threads)\n \tdebug_printf (\"GPS: lwp %s had stopped with extended \"\n \t\t      \"status: no pending signal\\n\",\n-\t\t      target_pid_to_str (ptid_of (thread)));\n+\t\t      target_pid_to_str (ptid_of (thread)).c_str ());\n       return 0;\n     }\n \n@@ -1419,7 +1419,7 @@ get_detach_signal (struct thread_info *thread)\n     {\n       if (debug_threads)\n \tdebug_printf (\"GPS: lwp %s had signal %s, but it is in nopass state\\n\",\n-\t\t      target_pid_to_str (ptid_of (thread)),\n+\t\t      target_pid_to_str (ptid_of (thread)).c_str (),\n \t\t      gdb_signal_to_string (signo));\n       return 0;\n     }\n@@ -1433,15 +1433,15 @@ get_detach_signal (struct thread_info *thread)\n \tdebug_printf (\"GPS: lwp %s had signal %s, \"\n \t\t      \"but we don't know if we should pass it. \"\n \t\t      \"Default to not.\\n\",\n-\t\t      target_pid_to_str (ptid_of (thread)),\n+\t\t      target_pid_to_str (ptid_of (thread)).c_str (),\n \t\t      gdb_signal_to_string (signo));\n       return 0;\n     }\n   else\n     {\n       if (debug_threads)\n \tdebug_printf (\"GPS: lwp %s has pending signal %s: delivering it.\\n\",\n-\t\t      target_pid_to_str (ptid_of (thread)),\n+\t\t      target_pid_to_str (ptid_of (thread)).c_str (),\n \t\t      gdb_signal_to_string (signo));\n \n       return WSTOPSIG (status);\n@@ -1460,7 +1460,7 @@ linux_process_target::detach_one_lwp (lwp_info *lwp)\n     {\n       if (debug_threads)\n \tdebug_printf (\"Sending SIGCONT to %s\\n\",\n-\t\t      target_pid_to_str (ptid_of (thread)));\n+\t\t      target_pid_to_str (ptid_of (thread)).c_str ());\n \n       kill_lwp (lwpid_of (thread), SIGCONT);\n       lwp->stop_expected = 0;\n@@ -1516,14 +1516,14 @@ linux_process_target::detach_one_lwp (lwp_info *lwp)\n       else\n \t{\n \t  error (_(\"Can't detach %s: %s\"),\n-\t\t target_pid_to_str (ptid_of (thread)),\n+\t\t target_pid_to_str (ptid_of (thread)).c_str (),\n \t\t safe_strerror (save_errno));\n \t}\n     }\n   else if (debug_threads)\n     {\n       debug_printf (\"PTRACE_DETACH (%s, %s, 0) (OK)\\n\",\n-\t\t    target_pid_to_str (ptid_of (thread)),\n+\t\t    target_pid_to_str (ptid_of (thread)).c_str (),\n \t\t    strsignal (sig));\n     }\n \n@@ -2410,7 +2410,7 @@ linux_process_target::filter_event (int lwpid, int wstat)\n \t     SIGSTOP as a normal event.  */\n \t  if (debug_threads)\n \t    debug_printf (\"LLW: resume_stop SIGSTOP caught for %s.\\n\",\n-\t\t\t  target_pid_to_str (ptid_of (thread)));\n+\t\t\t  target_pid_to_str (ptid_of (thread)).c_str ());\n \t}\n       else if (stopping_threads != NOT_STOPPING_THREADS)\n \t{\n@@ -2419,7 +2419,7 @@ linux_process_target::filter_event (int lwpid, int wstat)\n \t  if (debug_threads)\n \t    debug_printf (\"LLW: SIGSTOP caught for %s \"\n \t\t\t  \"while stopping threads.\\n\",\n-\t\t\t  target_pid_to_str (ptid_of (thread)));\n+\t\t\t  target_pid_to_str (ptid_of (thread)).c_str ());\n \t  return;\n \t}\n       else\n@@ -2428,7 +2428,7 @@ linux_process_target::filter_event (int lwpid, int wstat)\n \t  if (debug_threads)\n \t    debug_printf (\"LLW: %s %s, 0, 0 (discard delayed SIGSTOP)\\n\",\n \t\t\t  child->stepping ? \"step\" : \"continue\",\n-\t\t\t  target_pid_to_str (ptid_of (thread)));\n+\t\t\t  target_pid_to_str (ptid_of (thread)).c_str ());\n \n \t  resume_one_lwp (child, child->stepping, 0, NULL);\n \t  return;\n@@ -2471,7 +2471,7 @@ linux_process_target::resume_stopped_resumed_lwps (thread_info *thread)\n \n       if (debug_threads)\n \tdebug_printf (\"RSRL: resuming stopped-resumed LWP %s at %s: step=%d\\n\",\n-\t\t      target_pid_to_str (ptid_of (thread)),\n+\t\t      target_pid_to_str (ptid_of (thread)).c_str (),\n \t\t      paddress (lp->stop_pc),\n \t\t      step);\n \n@@ -2717,7 +2717,7 @@ select_event_lwp (struct lwp_info **orig_lp)\n \t{\n \t  if (debug_threads)\n \t    debug_printf (\"SEL: Select single-step %s\\n\",\n-\t\t\t  target_pid_to_str (ptid_of (event_thread)));\n+\t\t\t  target_pid_to_str (ptid_of (event_thread)).c_str ());\n \t}\n     }\n   if (event_thread == NULL)\n@@ -2952,7 +2952,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n   if (debug_threads)\n     {\n       debug_enter ();\n-      debug_printf (\"wait_1: [%s]\\n\", target_pid_to_str (ptid));\n+      debug_printf (\"wait_1: [%s]\\n\", target_pid_to_str (ptid).c_str ());\n     }\n \n   /* Translate generic target options into linux options.  */\n@@ -2989,7 +2989,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n     {\n       if (debug_threads)\n \tdebug_printf (\"step_over_bkpt set [%s], doing a blocking wait\\n\",\n-\t\t      target_pid_to_str (step_over_bkpt));\n+\t\t      target_pid_to_str (step_over_bkpt).c_str ());\n       pid = wait_for_event (step_over_bkpt, &w, options & ~WNOHANG);\n     }\n \n@@ -3034,7 +3034,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n \t    {\n \t      debug_printf (\"wait_1 ret = %s, exited with \"\n \t\t\t    \"retcode %d\\n\",\n-\t\t\t    target_pid_to_str (ptid_of (current_thread)),\n+\t\t\t    target_pid_to_str (ptid_of (current_thread)).c_str (),\n \t\t\t    WEXITSTATUS (w));\n \t      debug_exit ();\n \t    }\n@@ -3047,7 +3047,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n \t    {\n \t      debug_printf (\"wait_1 ret = %s, terminated with \"\n \t\t\t    \"signal %d\\n\",\n-\t\t\t    target_pid_to_str (ptid_of (current_thread)),\n+\t\t\t    target_pid_to_str (ptid_of (current_thread)).c_str (),\n \t\t\t    WTERMSIG (w));\n \t      debug_exit ();\n \t    }\n@@ -3085,7 +3085,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n       if (debug_threads)\n \t{\n \t  debug_printf (\"step-over for %s executed software breakpoint\\n\",\n-\t\t\ttarget_pid_to_str (ptid_of (current_thread)));\n+\t\t\ttarget_pid_to_str (ptid_of (current_thread)).c_str ());\n \t}\n \n       if (increment_pc != 0)\n@@ -3254,7 +3254,8 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n \t\t    {\n \t\t      debug_printf (\"wait_1 ret = %s, stopped \"\n \t\t\t\t    \"while stabilizing threads\\n\",\n-\t\t\t\t    target_pid_to_str (ptid_of (current_thread)));\n+\t\t\t\t    target_pid_to_str\n+\t\t\t\t      (ptid_of (current_thread)).c_str ());\n \t\t      debug_exit ();\n \t\t    }\n \n@@ -3658,7 +3659,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n   if (debug_threads)\n     {\n       debug_printf (\"wait_1 ret = %s, %d, %d\\n\",\n-\t\t    target_pid_to_str (ptid_of (current_thread)),\n+\t\t    target_pid_to_str (ptid_of (current_thread)).c_str (),\n \t\t    ourstatus->kind (), ourstatus->sig ());\n       debug_exit ();\n     }\n@@ -3969,9 +3970,10 @@ linux_process_target::stop_all_lwps (int suspend, lwp_info *except)\n       debug_enter ();\n       debug_printf (\"stop_all_lwps (%s, except=%s)\\n\",\n \t\t    suspend ? \"stop-and-suspend\" : \"stop\",\n-\t\t    except != NULL\n-\t\t    ? target_pid_to_str (ptid_of (get_lwp_thread (except)))\n-\t\t    : \"none\");\n+\t\t    (except != NULL\n+\t\t     ? target_pid_to_str\n+\t\t\t (ptid_of (get_lwp_thread (except))).c_str ()\n+\t\t     : \"none\"));\n     }\n \n   stopping_threads = (suspend"
    },
    {
      "sha": "5bc261a9c7b5b75a01f076bbcf2449a5327f5085",
      "filename": "gdbserver/remote-utils.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/remote-utils.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/remote-utils.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/remote-utils.cc?ref=61d7f128e6ea37af805be4e365f5879b0d42bb93",
      "patch": "@@ -1087,7 +1087,7 @@ prepare_resume_reply (char *buf, ptid_t ptid,\n   client_state &cs = get_client_state ();\n   if (debug_threads)\n     debug_printf (\"Writing resume reply for %s:%d\\n\",\n-\t\t  target_pid_to_str (ptid), status->kind ());\n+\t\t  target_pid_to_str (ptid).c_str (), status->kind ());\n \n   switch (status->kind ())\n     {"
    },
    {
      "sha": "c58f7e01d8da910bbed96c6cf5e8f785e11fcb65",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=61d7f128e6ea37af805be4e365f5879b0d42bb93",
      "patch": "@@ -3310,7 +3310,7 @@ queue_stop_reply_callback (thread_info *thread)\n \t\t= target_waitstatus_to_string (&thread->last_status);\n \n \t      debug_printf (\"Reporting thread %s as already stopped with %s\\n\",\n-\t\t\t    target_pid_to_str (thread->id),\n+\t\t\t    target_pid_to_str (thread->id).c_str (),\n \t\t\t    status_string.c_str ());\n \t    }\n \n@@ -4640,7 +4640,7 @@ handle_target_event (int err, gdb_client_data client_data)\n \t\tdebug_printf (\"GDB not connected; forwarding event %d for\"\n \t\t\t      \" [%s]\\n\",\n \t\t\t      (int) cs.last_status.kind (),\n-\t\t\t      target_pid_to_str (cs.last_ptid));\n+\t\t\t      target_pid_to_str (cs.last_ptid).c_str ());\n \n \t      if (cs.last_status.kind () == TARGET_WAITKIND_STOPPED)\n \t\tsignal = cs.last_status.sig ();"
    },
    {
      "sha": "bfa860546a0a96a931947ef0dab11b6775707e4a",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 10,
      "deletions": 13,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=61d7f128e6ea37af805be4e365f5879b0d42bb93",
      "patch": "@@ -276,26 +276,23 @@ set_target_ops (process_stratum_target *target)\n \n /* Convert pid to printable format.  */\n \n-const char *\n+std::string\n target_pid_to_str (ptid_t ptid)\n {\n-  static char buf[80];\n-\n   if (ptid == minus_one_ptid)\n-    xsnprintf (buf, sizeof (buf), \"<all threads>\");\n+    return string_printf(\"<all threads>\");\n   else if (ptid == null_ptid)\n-    xsnprintf (buf, sizeof (buf), \"<null thread>\");\n+    return string_printf(\"<null thread>\");\n   else if (ptid.tid () != 0)\n-    xsnprintf (buf, sizeof (buf), \"Thread %d.0x%s\",\n-\t       ptid.pid (), phex_nz (ptid.tid (), sizeof (ULONGEST)));\n+    return string_printf(\"Thread %d.0x%s\",\n+\t\t\t ptid.pid (),\n+\t\t\t phex_nz (ptid.tid (), sizeof (ULONGEST)));\n   else if (ptid.lwp () != 0)\n-    xsnprintf (buf, sizeof (buf), \"LWP %d.%ld\",\n-\t       ptid.pid (), ptid.lwp ());\n+    return string_printf(\"LWP %d.%ld\",\n+\t\t\t ptid.pid (), ptid.lwp ());\n   else\n-    xsnprintf (buf, sizeof (buf), \"Process %d\",\n-\t       ptid.pid ());\n-\n-  return buf;\n+    return string_printf(\"Process %d\",\n+\t\t\t ptid.pid ());\n }\n \n int"
    },
    {
      "sha": "6c863c84666a3544f30a84864bc00dc4655c2871",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=61d7f128e6ea37af805be4e365f5879b0d42bb93",
      "patch": "@@ -702,6 +702,6 @@ int read_inferior_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len);\n \n int set_desired_thread ();\n \n-const char *target_pid_to_str (ptid_t);\n+std::string target_pid_to_str (ptid_t);\n \n #endif /* GDBSERVER_TARGET_H */"
    },
    {
      "sha": "c01973b5e61fceaa2c14d4076a06b01338dc3383",
      "filename": "gdbserver/tracepoint.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/tracepoint.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61d7f128e6ea37af805be4e365f5879b0d42bb93/gdbserver/tracepoint.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/tracepoint.cc?ref=61d7f128e6ea37af805be4e365f5879b0d42bb93",
      "patch": "@@ -4408,7 +4408,7 @@ tracepoint_finished_step (struct thread_info *tinfo, CORE_ADDR stop_pc)\n   wstep_link = &tinfo->while_stepping;\n \n   trace_debug (\"Thread %s finished a single-step for tracepoint %d at 0x%s\",\n-\t       target_pid_to_str (tinfo->id),\n+\t       target_pid_to_str (tinfo->id).c_str (),\n \t       wstep->tp_number, paddress (wstep->tp_address));\n \n   ctx.base.type = trap_tracepoint;\n@@ -4421,7 +4421,7 @@ tracepoint_finished_step (struct thread_info *tinfo, CORE_ADDR stop_pc)\n \t{\n \t  trace_debug (\"NO TRACEPOINT %d at 0x%s FOR THREAD %s!\",\n \t\t       wstep->tp_number, paddress (wstep->tp_address),\n-\t\t       target_pid_to_str (tinfo->id));\n+\t\t       target_pid_to_str (tinfo->id).c_str ());\n \n \t  /* Unlink.  */\n \t  *wstep_link = wstep->next;\n@@ -4441,7 +4441,7 @@ tracepoint_finished_step (struct thread_info *tinfo, CORE_ADDR stop_pc)\n \t{\n \t  /* The requested numbers of steps have occurred.  */\n \t  trace_debug (\"Thread %s done stepping for tracepoint %d at 0x%s\",\n-\t\t       target_pid_to_str (tinfo->id),\n+\t\t       target_pid_to_str (tinfo->id).c_str (),\n \t\t       wstep->tp_number, paddress (wstep->tp_address));\n \n \t  /* Unlink the wstep.  */\n@@ -4588,7 +4588,7 @@ tracepoint_was_hit (struct thread_info *tinfo, CORE_ADDR stop_pc)\n \t  && tpoint->type != static_tracepoint)\n \t{\n \t  trace_debug (\"Thread %s at address of tracepoint %d at 0x%s\",\n-\t\t       target_pid_to_str (tinfo->id),\n+\t\t       target_pid_to_str (tinfo->id).c_str (),\n \t\t       tpoint->number, paddress (tpoint->address));\n \n \t  /* Test the condition if present, and collect if true.  */"
    }
  ]
}