{
  "sha": "8400a90d19c5c53f7100421c688fb896789048b9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODQwMGE5MGQxOWM1YzUzZjcxMDA0MjFjNjg4ZmI4OTY3ODkwNDhiOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-09-14T15:12:55Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:30:58Z"
    },
    "message": "gdb: change xml_fetch_another a function_view\n\nThe xml_fetch_another is currently a plain function pointer type, with a\n`void *` baton parameter.  To improve type-safety, change this to a\nfunction_view.  Any required data is captured by a lambda at the call\nsite.\n\ngdb/ChangeLog:\n\n\t* xml-support.h (xml_fetch_another): Change type to be a\n\tfunction_view.\n\t(xml_process_xincludes): Remove baton parameter.\n\t(xml_fetch_content_from_file): Change baton parameter to\n\tdirname.\n\t* xml-support.c (struct xinclude_parsing_data)\n\t<xinclude_parsing_data>: Remove baton parameter.\n\t<fetcher_baton>: Remove.\n\t(xinclude_start_include): Adjust.\n\t(xml_process_xincludes): Adjust.\n\t(xml_fetch_content_from_file): Replace baton parameter with\n\tdirname.\n\t* xml-syscall.c (syscall_parse_xml): Remove baton parameter.\n\t(xml_init_syscalls_info): Use a lambda.\n\t* xml-tdesc.c (tdesc_parse_xml): Remove baton parameter.\n\t(file_read_description_xml): Use a lambda.\n\t(fetch_available_features_from_target): Change baton parameter\n\tto target_ops.\n\t(target_read_description_xml): Use a lambda.\n\t(target_fetch_description_xml): Use a lambda.\n\t(string_read_description_xml): Update.\n\nChange-Id: I7ba4b8f5e97fc6a952c6c20ccc3be92a06cc2bd2",
    "tree": {
      "sha": "dbf3aff829ab551c14a040ac7717e187d7417300",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dbf3aff829ab551c14a040ac7717e187d7417300"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8400a90d19c5c53f7100421c688fb896789048b9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8400a90d19c5c53f7100421c688fb896789048b9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8400a90d19c5c53f7100421c688fb896789048b9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8400a90d19c5c53f7100421c688fb896789048b9/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b1766e7ce88647c8002928aeb8a9f04048c494ae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b1766e7ce88647c8002928aeb8a9f04048c494ae",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b1766e7ce88647c8002928aeb8a9f04048c494ae"
    }
  ],
  "stats": {
    "total": 109,
    "additions": 69,
    "deletions": 40
  },
  "files": [
    {
      "sha": "8451cadcd5b04ba034514c5deca66bc619175e7e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8400a90d19c5c53f7100421c688fb896789048b9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8400a90d19c5c53f7100421c688fb896789048b9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8400a90d19c5c53f7100421c688fb896789048b9",
      "patch": "@@ -1,3 +1,27 @@\n+2020-09-14  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* xml-support.h (xml_fetch_another): Change type to be a\n+\tfunction_view.\n+\t(xml_process_xincludes): Remove baton parameter.\n+\t(xml_fetch_content_from_file): Change baton parameter to\n+\tdirname.\n+\t* xml-support.c (struct xinclude_parsing_data)\n+\t<xinclude_parsing_data>: Remove baton parameter.\n+\t<fetcher_baton>: Remove.\n+\t(xinclude_start_include): Adjust.\n+\t(xml_process_xincludes): Adjust.\n+\t(xml_fetch_content_from_file): Replace baton parameter with\n+\tdirname.\n+\t* xml-syscall.c (syscall_parse_xml): Remove baton parameter.\n+\t(xml_init_syscalls_info): Use a lambda.\n+\t* xml-tdesc.c (tdesc_parse_xml): Remove baton parameter.\n+\t(file_read_description_xml): Use a lambda.\n+\t(fetch_available_features_from_target): Change baton parameter\n+\tto target_ops.\n+\t(target_read_description_xml): Use a lambda.\n+\t(target_fetch_description_xml): Use a lambda.\n+\t(string_read_description_xml): Update.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdbtypes.h (TYPE_ENDIANITY_NOT_DEFAULT): Remove, replace all"
    },
    {
      "sha": "8b698e511f12c572f79528c909b01545ef21ab34",
      "filename": "gdb/xml-support.c",
      "status": "modified",
      "additions": 7,
      "deletions": 13,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8400a90d19c5c53f7100421c688fb896789048b9/gdb/xml-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8400a90d19c5c53f7100421c688fb896789048b9/gdb/xml-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xml-support.c?ref=8400a90d19c5c53f7100421c688fb896789048b9",
      "patch": "@@ -745,13 +745,12 @@ gdb_xml_parse_attr_enum (struct gdb_xml_parser *parser,\n struct xinclude_parsing_data\n {\n   xinclude_parsing_data (std::string &output_,\n-\t\t\t xml_fetch_another fetcher_, void *fetcher_baton_,\n+\t\t\t xml_fetch_another fetcher_,\n \t\t\t int include_depth_)\n     : output (output_),\n       skip_depth (0),\n       include_depth (include_depth_),\n-      fetcher (fetcher_),\n-      fetcher_baton (fetcher_baton_)\n+      fetcher (fetcher_)\n   {}\n \n   /* Where the output goes.  */\n@@ -770,7 +769,6 @@ struct xinclude_parsing_data\n   /* A function to call to obtain additional features, and its\n      baton.  */\n   xml_fetch_another fetcher;\n-  void *fetcher_baton;\n };\n \n static void\n@@ -789,14 +787,12 @@ xinclude_start_include (struct gdb_xml_parser *parser,\n     gdb_xml_error (parser, _(\"Maximum XInclude depth (%d) exceeded\"),\n \t\t   MAX_XINCLUDE_DEPTH);\n \n-  gdb::optional<gdb::char_vector> text\n-    = data->fetcher (href, data->fetcher_baton);\n+  gdb::optional<gdb::char_vector> text = data->fetcher (href);\n   if (!text)\n     gdb_xml_error (parser, _(\"Could not load XML document \\\"%s\\\"\"), href);\n \n   if (!xml_process_xincludes (data->output, parser->name (),\n \t\t\t      text->data (), data->fetcher,\n-\t\t\t      data->fetcher_baton,\n \t\t\t      data->include_depth + 1))\n     gdb_xml_error (parser, _(\"Parsing \\\"%s\\\" failed\"), href);\n \n@@ -878,10 +874,9 @@ const struct gdb_xml_element xinclude_elements[] = {\n bool\n xml_process_xincludes (std::string &result,\n \t\t       const char *name, const char *text,\n-\t\t       xml_fetch_another fetcher, void *fetcher_baton,\n-\t\t       int depth)\n+\t\t       xml_fetch_another fetcher, int depth)\n {\n-  xinclude_parsing_data data (result, fetcher, fetcher_baton, depth);\n+  xinclude_parsing_data data (result, fetcher, depth);\n \n   gdb_xml_parser parser (name, xinclude_elements, &data);\n   parser.set_is_xinclude (true);\n@@ -968,12 +963,11 @@ show_debug_xml (struct ui_file *file, int from_tty,\n }\n \n gdb::optional<gdb::char_vector>\n-xml_fetch_content_from_file (const char *filename, void *baton)\n+xml_fetch_content_from_file (const char *filename, const char *dirname)\n {\n-  const char *dirname = (const char *) baton;\n   gdb_file_up file;\n \n-  if (dirname && *dirname)\n+  if (dirname != nullptr && *dirname != '\\0')\n     {\n       char *fullname = concat (dirname, \"/\", filename, (char *) NULL);\n "
    },
    {
      "sha": "429d9ca2e995f84d43b23cff1e7bbcdf52ce6f48",
      "filename": "gdb/xml-support.h",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8400a90d19c5c53f7100421c688fb896789048b9/gdb/xml-support.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8400a90d19c5c53f7100421c688fb896789048b9/gdb/xml-support.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xml-support.h?ref=8400a90d19c5c53f7100421c688fb896789048b9",
      "patch": "@@ -25,6 +25,7 @@\n #include \"gdbsupport/xml-utils.h\"\n #include \"gdbsupport/byte-vector.h\"\n #include \"gdbsupport/gdb_optional.h\"\n+#include \"gdbsupport/function-view.h\"\n \n struct gdb_xml_parser;\n struct gdb_xml_element;\n@@ -48,21 +49,20 @@ LONGEST xml_builtin_xfer_partial (const char *filename,\n \n /* Callback to fetch a new XML file, based on the provided HREF.  */\n \n-typedef gdb::optional<gdb::char_vector> (*xml_fetch_another) (const char *href,\n-\t\t\t\t\t\t\t      void *baton);\n+using xml_fetch_another = gdb::function_view<gdb::optional<gdb::char_vector>\n+\t\t\t\t\t     (const char * /* href */)>;\n \n /* Append the expansion of TEXT after processing <xi:include> tags in\n-   RESULT.  FETCHER will be called (with FETCHER_BATON) to retrieve\n-   any new files.  DEPTH should be zero on the initial call.\n+   RESULT.  FETCHER will be called to retrieve any new files.  DEPTH\n+   should be zero on the initial call.\n \n    On failure, this function uses NAME in a warning and returns false.\n    It may throw an exception, but does not for XML parsing\n    problems.  */\n \n bool xml_process_xincludes (std::string &result,\n \t\t\t    const char *name, const char *text,\n-\t\t\t    xml_fetch_another fetcher, void *fetcher_baton,\n-\t\t\t    int depth);\n+\t\t\t    xml_fetch_another fetcher, int depth);\n \n /* Simplified XML parser infrastructure.  */\n \n@@ -231,6 +231,6 @@ ULONGEST gdb_xml_parse_ulongest (struct gdb_xml_parser *parser,\n    and warn.  */\n \n extern gdb::optional<gdb::char_vector> xml_fetch_content_from_file\n-    (const char *filename, void *baton);\n+    (const char *filename, const char *dirname);\n \n #endif"
    },
    {
      "sha": "effb37960eea825e38309a98bb386a7c5f83aac0",
      "filename": "gdb/xml-syscall.c",
      "status": "modified",
      "additions": 8,
      "deletions": 5,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8400a90d19c5c53f7100421c688fb896789048b9/gdb/xml-syscall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8400a90d19c5c53f7100421c688fb896789048b9/gdb/xml-syscall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xml-syscall.c?ref=8400a90d19c5c53f7100421c688fb896789048b9",
      "patch": "@@ -287,8 +287,7 @@ static const struct gdb_xml_element syselements[] = {\n };\n \n static struct syscalls_info *\n-syscall_parse_xml (const char *document, xml_fetch_another fetcher,\n-                   void *fetcher_baton)\n+syscall_parse_xml (const char *document, xml_fetch_another fetcher)\n {\n   struct syscall_parsing_data data;\n   syscalls_info_up sysinfo (new syscalls_info ());\n@@ -322,9 +321,13 @@ xml_init_syscalls_info (const char *filename)\n   if (!full_file)\n     return NULL;\n \n-  return syscall_parse_xml (full_file->data (),\n-\t\t\t    xml_fetch_content_from_file,\n-\t\t\t    (void *) ldirname (filename).c_str ());\n+  const std::string dirname = ldirname (filename);\n+  auto fetch_another = [&dirname] (const char *name)\n+    {\n+      return xml_fetch_content_from_file (name, dirname.c_str ());\n+    };\n+\n+  return syscall_parse_xml (full_file->data (), fetch_another);\n }\n \n /* Initializes the syscalls_info structure according to the"
    },
    {
      "sha": "6e21ff42dafd9cdb4c23aa02bdbeb3722e7839b1",
      "filename": "gdb/xml-tdesc.c",
      "status": "modified",
      "additions": 23,
      "deletions": 15,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8400a90d19c5c53f7100421c688fb896789048b9/gdb/xml-tdesc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8400a90d19c5c53f7100421c688fb896789048b9/gdb/xml-tdesc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xml-tdesc.c?ref=8400a90d19c5c53f7100421c688fb896789048b9",
      "patch": "@@ -617,8 +617,7 @@ static const struct gdb_xml_element tdesc_elements[] = {\n /* Parse DOCUMENT into a target description and return it.  */\n \n static struct target_desc *\n-tdesc_parse_xml (const char *document, xml_fetch_another fetcher,\n-\t\t void *fetcher_baton)\n+tdesc_parse_xml (const char *document, xml_fetch_another fetcher)\n {\n   struct tdesc_parsing_data data;\n \n@@ -627,7 +626,7 @@ tdesc_parse_xml (const char *document, xml_fetch_another fetcher,\n \n   if (!xml_process_xincludes (expanded_text,\n \t\t\t      _(\"target description\"),\n-\t\t\t      document, fetcher, fetcher_baton, 0))\n+\t\t\t      document, fetcher, 0))\n     {\n       warning (_(\"Could not load XML target description; ignoring\"));\n       return NULL;\n@@ -673,8 +672,13 @@ file_read_description_xml (const char *filename)\n       return NULL;\n     }\n \n-  return tdesc_parse_xml (tdesc_str->data (), xml_fetch_content_from_file,\n-\t\t\t  (void *) ldirname (filename).c_str ());\n+  const std::string dirname = ldirname (filename);\n+  auto fetch_another = [&dirname] (const char *name)\n+    {\n+      return xml_fetch_content_from_file (name, dirname.c_str ());\n+    };\n+\n+  return tdesc_parse_xml (tdesc_str->data (), fetch_another);\n }\n \n /* Read a string representation of available features from the target,\n@@ -685,10 +689,8 @@ file_read_description_xml (const char *filename)\n    for <xi:include>.  */\n \n static gdb::optional<gdb::char_vector>\n-fetch_available_features_from_target (const char *name, void *baton_)\n+fetch_available_features_from_target (const char *name, target_ops *ops)\n {\n-  struct target_ops *ops = (struct target_ops *) baton_;\n-\n   /* Read this object as a string.  This ensures that a NUL\n      terminator is added.  */\n   return target_read_stralloc (ops,\n@@ -708,9 +710,12 @@ target_read_description_xml (struct target_ops *ops)\n   if (!tdesc_str)\n     return NULL;\n \n-  return tdesc_parse_xml (tdesc_str->data (),\n-\t\t\t  fetch_available_features_from_target,\n-\t\t\t  ops);\n+  auto fetch_another = [ops] (const char *name)\n+    {\n+      return fetch_available_features_from_target (name, ops);\n+    };\n+\n+  return tdesc_parse_xml (tdesc_str->data (), fetch_another);\n }\n \n /* Fetches an XML target description using OPS,  processing\n@@ -737,11 +742,14 @@ target_fetch_description_xml (struct target_ops *ops)\n   if (!tdesc_str)\n     return {};\n \n+  auto fetch_another = [ops] (const char *name)\n+    {\n+      return fetch_available_features_from_target (name, ops);\n+    };\n   std::string output;\n   if (!xml_process_xincludes (output,\n \t\t\t      _(\"target description\"),\n-\t\t\t      tdesc_str->data (),\n-\t\t\t      fetch_available_features_from_target, ops, 0))\n+\t\t\t      tdesc_str->data (), fetch_another, 0))\n     {\n       warning (_(\"Could not load XML target description; ignoring\"));\n       return {};\n@@ -755,9 +763,9 @@ target_fetch_description_xml (struct target_ops *ops)\n const struct target_desc *\n string_read_description_xml (const char *xml)\n {\n-  return tdesc_parse_xml (xml, [] (const char *href, void *baton)\n+  return tdesc_parse_xml (xml, [] (const char *href)\n     {\n       error (_(\"xincludes are unsupported with this method\"));\n       return gdb::optional<gdb::char_vector> ();\n-    }, nullptr);\n+    });\n }"
    }
  ]
}