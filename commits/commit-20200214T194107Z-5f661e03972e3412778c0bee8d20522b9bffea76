{
  "sha": "5f661e03972e3412778c0bee8d20522b9bffea76",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWY2NjFlMDM5NzJlMzQxMjc3OGMwYmVlOGQyMDUyMmI5YmZmZWE3Ng==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-14T19:41:07Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-14T19:41:07Z"
    },
    "message": "gnulib: import count-one-bits module and use it\n\nFor a fix I intend to submit, I would need a function that counts the\nnumber of set bits in a word.  There is  __builtin_popcount that is\nsupported by gcc and clang, but there is also a gnulib module that wraps\nthat and provides a fallback for other compilers, so I think it would be\ngood to use it.\n\nI also noticed that there is a bitcount function in arch/arm.c, so I\nthought that as a first step I would replace that one with the gnulib\ncount-one-bits module.  This is what this patch does.\n\nThe gnulib module provides multiple functions, with various parameter\nlength (unsigned int, unsigned long int, unsigned long long int), I\nchose the one that made sense for each call site based on the argument\ntype.\n\ngnulib/ChangeLog:\n\n\t* update-gnulib.sh (IMPORTED_GNULIB_MODULES): Import\n\tcount-one-bits module.\n\t* configure: Re-generate.\n\t* aclocal.m4: Re-generate.\n\t* Makefile.in: Re-generate.\n\t* import/count-one-bits.c: New file.\n\t* import/count-one-bits.h: New file.\n\t* import/Makefile.am: Re-generate.\n\t* import/Makefile.in: Re-generate.\n\t* import/m4/gnulib-cache.m4: Re-generate.\n\t* import/m4/gnulib-comp.m4: Re-generate.\n\t* import/m4/count-one-bits.m4: New file.\n\ngdb/ChangeLog:\n\n\t* arm-tdep.c: Include count-one-bits.h.\n\t(cleanup_block_store_pc): Use count_one_bits.\n\t(cleanup_block_load_pc): Use count_one_bits.\n\t(arm_copy_block_xfer): Use count_one_bits.\n\t(thumb2_copy_block_xfer): Use count_one_bits.\n\t(thumb_copy_pop_pc_16bit): Use count_one_bits.\n\t* arch/arm-get-next-pcs.c: Include count-one-bits.h.\n\t(thumb_get_next_pcs_raw): Use count_one_bits.\n\t(arm_get_next_pcs_raw): Use count_one_bits_l.\n\t* arch/arm.c (bitcount): Remove.\n\t* arch/arm.h (bitcount): Remove.",
    "tree": {
      "sha": "287495c0d6f9659408ec5becf385f73387e5cf42",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/287495c0d6f9659408ec5becf385f73387e5cf42"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5f661e03972e3412778c0bee8d20522b9bffea76",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f661e03972e3412778c0bee8d20522b9bffea76",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5f661e03972e3412778c0bee8d20522b9bffea76",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f661e03972e3412778c0bee8d20522b9bffea76/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8084e579e114e607cb65482c43566e2c5c844bf6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8084e579e114e607cb65482c43566e2c5c844bf6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8084e579e114e607cb65482c43566e2c5c844bf6"
    }
  ],
  "stats": {
    "total": 406,
    "additions": 303,
    "deletions": 103
  },
  "files": [
    {
      "sha": "5ef761179e4583dac6fdf52ab1d56accb8489e12",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -1,3 +1,17 @@\n+2020-02-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* arm-tdep.c: Include count-one-bits.h.\n+\t(cleanup_block_store_pc): Use count_one_bits.\n+\t(cleanup_block_load_pc): Use count_one_bits.\n+\t(arm_copy_block_xfer): Use count_one_bits.\n+\t(thumb2_copy_block_xfer): Use count_one_bits.\n+\t(thumb_copy_pop_pc_16bit): Use count_one_bits.\n+\t* arch/arm-get-next-pcs.c: Include count-one-bits.h.\n+\t(thumb_get_next_pcs_raw): Use count_one_bits.\n+\t(arm_get_next_pcs_raw): Use count_one_bits_l.\n+\t* arch/arm.c (bitcount): Remove.\n+\t* arch/arm.h (bitcount): Remove.\n+\n 2020-02-14  Tom Tromey  <tromey@adacore.com>\n \n \t* dwarf2/frame-tailcall.c (dwarf2_tailcall_sniffer_first):"
    },
    {
      "sha": "0c49a77245bfa796baf796ffeae5d5c6739429a2",
      "filename": "gdb/arch/arm-get-next-pcs.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gdb/arch/arm-get-next-pcs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gdb/arch/arm-get-next-pcs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/arm-get-next-pcs.c?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -22,6 +22,7 @@\n #include \"gdbsupport/common-regcache.h\"\n #include \"arm.h\"\n #include \"arm-get-next-pcs.h\"\n+#include \"count-one-bits.h\"\n \n /* See arm-get-next-pcs.h.  */\n \n@@ -408,8 +409,8 @@ thumb_get_next_pcs_raw (struct arm_get_next_pcs *self)\n \n       /* Fetch the saved PC from the stack.  It's stored above\n          all of the other registers.  */\n-      unsigned long offset = bitcount (bits (inst1, 0, 7))\n-\t\t\t     * ARM_INT_REGISTER_SIZE;\n+      unsigned long offset\n+\t= count_one_bits (bits (inst1, 0, 7)) * ARM_INT_REGISTER_SIZE;\n       sp = regcache_raw_get_unsigned (regcache, ARM_SP_REGNUM);\n       nextpc = self->ops->read_mem_uint (sp + offset, 4, byte_order);\n     }\n@@ -496,7 +497,7 @@ thumb_get_next_pcs_raw (struct arm_get_next_pcs *self)\n \t      /* LDMIA or POP */\n \t      if (!bit (inst2, 15))\n \t\tload_pc = 0;\n-\t      offset = bitcount (inst2) * 4 - 4;\n+\t      offset = count_one_bits (inst2) * 4 - 4;\n \t    }\n \t  else if (!bit (inst1, 7) && bit (inst1, 8))\n \t    {\n@@ -864,7 +865,7 @@ arm_get_next_pcs_raw (struct arm_get_next_pcs *self)\n \t\t    {\n \t\t      /* up */\n \t\t      unsigned long reglist = bits (this_instr, 0, 14);\n-\t\t      offset = bitcount (reglist) * 4;\n+\t\t      offset = count_one_bits_l (reglist) * 4;\n \t\t      if (bit (this_instr, 24))\t\t/* pre */\n \t\t\toffset += 4;\n \t\t    }"
    },
    {
      "sha": "faa2b4fbd4b21588d46c5515b96a838d9ad94553",
      "filename": "gdb/arch/arm.c",
      "status": "modified",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gdb/arch/arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gdb/arch/arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/arm.c?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -41,17 +41,6 @@ thumb_insn_size (unsigned short inst1)\n \n /* See arm.h.  */\n \n-int\n-bitcount (unsigned long val)\n-{\n-  int nbits;\n-  for (nbits = 0; val != 0; nbits++)\n-    val &= val - 1;\t\t/* Delete rightmost 1-bit in val.  */\n-  return nbits;\n-}\n-\n-/* See arm.h.  */\n-\n int\n condition_true (unsigned long cond, unsigned long status_reg)\n {"
    },
    {
      "sha": "b0eb2ae445f2c716dd21dbbb62b87ed678d93722",
      "filename": "gdb/arch/arm.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gdb/arch/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gdb/arch/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/arm.h?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -160,9 +160,6 @@ int thumb_insn_size (unsigned short inst1);\n /* Returns true if the condition evaluates to true.  */\n int condition_true (unsigned long cond, unsigned long status_reg);\n \n-/* Return number of 1-bits in VAL.  */\n-int bitcount (unsigned long val);\n-\n /* Return 1 if THIS_INSTR might change control flow, 0 otherwise.  */\n int arm_instruction_changes_pc (uint32_t this_instr);\n "
    },
    {
      "sha": "175c5b956e7ab6b5cba0da3bdc96e554e233fa48",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -45,6 +45,7 @@\n #include \"target-descriptions.h\"\n #include \"user-regs.h\"\n #include \"observable.h\"\n+#include \"count-one-bits.h\"\n \n #include \"arch/arm.h\"\n #include \"arch/arm-get-next-pcs.h\"\n@@ -5798,7 +5799,8 @@ cleanup_block_store_pc (struct gdbarch *gdbarch, struct regcache *regs,\n {\n   uint32_t status = displaced_read_reg (regs, dsc, ARM_PS_REGNUM);\n   int store_executed = condition_true (dsc->u.block.cond, status);\n-  CORE_ADDR pc_stored_at, transferred_regs = bitcount (dsc->u.block.regmask);\n+  CORE_ADDR pc_stored_at, transferred_regs\n+    = count_one_bits (dsc->u.block.regmask);\n   CORE_ADDR stm_insn_addr;\n   uint32_t pc_val;\n   long offset;\n@@ -5850,7 +5852,7 @@ cleanup_block_load_pc (struct gdbarch *gdbarch,\n   uint32_t status = displaced_read_reg (regs, dsc, ARM_PS_REGNUM);\n   int load_executed = condition_true (dsc->u.block.cond, status);\n   unsigned int mask = dsc->u.block.regmask, write_reg = ARM_PC_REGNUM;\n-  unsigned int regs_loaded = bitcount (mask);\n+  unsigned int regs_loaded = count_one_bits (mask);\n   unsigned int num_to_shuffle = regs_loaded, clobbered;\n \n   /* The method employed here will fail if the register list is fully populated\n@@ -5982,7 +5984,7 @@ arm_copy_block_xfer (struct gdbarch *gdbarch, uint32_t insn,\n \t     contiguous chunk r0...rX before doing the transfer, then shuffling\n \t     registers into the correct places in the cleanup routine.  */\n \t  unsigned int regmask = insn & 0xffff;\n-\t  unsigned int num_in_list = bitcount (regmask), new_regmask;\n+\t  unsigned int num_in_list = count_one_bits (regmask), new_regmask;\n \t  unsigned int i;\n \n \t  for (i = 0; i < num_in_list; i++)\n@@ -6084,7 +6086,7 @@ thumb2_copy_block_xfer (struct gdbarch *gdbarch, uint16_t insn1, uint16_t insn2,\n       else\n \t{\n \t  unsigned int regmask = dsc->u.block.regmask;\n-\t  unsigned int num_in_list = bitcount (regmask), new_regmask;\n+\t  unsigned int num_in_list = count_one_bits (regmask), new_regmask;\n \t  unsigned int i;\n \n \t  for (i = 0; i < num_in_list; i++)\n@@ -7102,7 +7104,7 @@ thumb_copy_pop_pc_16bit (struct gdbarch *gdbarch, uint16_t insn1,\n     }\n   else\n     {\n-      unsigned int num_in_list = bitcount (dsc->u.block.regmask);\n+      unsigned int num_in_list = count_one_bits (dsc->u.block.regmask);\n       unsigned int i;\n       unsigned int new_regmask;\n "
    },
    {
      "sha": "ea2e70c791ae2699f835089506e677e53b0b9730",
      "filename": "gnulib/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/ChangeLog?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -1,3 +1,18 @@\n+2020-02-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* update-gnulib.sh (IMPORTED_GNULIB_MODULES): Import\n+\tcount-one-bits module.\n+\t* configure: Re-generate.\n+\t* aclocal.m4: Re-generate.\n+\t* Makefile.in: Re-generate.\n+\t* import/count-one-bits.c: New file.\n+\t* import/count-one-bits.h: New file.\n+\t* import/Makefile.am: Re-generate.\n+\t* import/Makefile.in: Re-generate.\n+\t* import/m4/gnulib-cache.m4: Re-generate.\n+\t* import/m4/gnulib-comp.m4: Re-generate.\n+\t* import/m4/count-one-bits.m4: New file.\n+\n 2019-12-16  Christian Biesinger  <cbiesinger@google.com>\n \n \t* Makefile.am: Set MAKEOVERRIDES."
    },
    {
      "sha": "67045edc785c2890b654c314312eadc935ff23f9",
      "filename": "gnulib/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/Makefile.in?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -123,6 +123,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/import/m4/close.m4 \\\n \t$(top_srcdir)/import/m4/closedir.m4 \\\n \t$(top_srcdir)/import/m4/codeset.m4 \\\n+\t$(top_srcdir)/import/m4/count-one-bits.m4 \\\n \t$(top_srcdir)/import/m4/d-ino.m4 \\\n \t$(top_srcdir)/import/m4/d-type.m4 \\\n \t$(top_srcdir)/import/m4/dirent_h.m4 \\"
    },
    {
      "sha": "4ad6a3dcc867865b3138f0c9678f34f8989c8ba1",
      "filename": "gnulib/aclocal.m4",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/aclocal.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/aclocal.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/aclocal.m4?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -1195,6 +1195,7 @@ m4_include([import/m4/chdir-long.m4])\n m4_include([import/m4/close.m4])\n m4_include([import/m4/closedir.m4])\n m4_include([import/m4/codeset.m4])\n+m4_include([import/m4/count-one-bits.m4])\n m4_include([import/m4/d-ino.m4])\n m4_include([import/m4/d-type.m4])\n m4_include([import/m4/dirent_h.m4])"
    },
    {
      "sha": "90513dc143b90f0343b7f2885e10087bf0338964",
      "filename": "gnulib/configure",
      "status": "modified",
      "additions": 61,
      "deletions": 57,
      "changes": 118,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/configure?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -6234,6 +6234,7 @@ fi\n   # Code from module cloexec:\n   # Code from module close:\n   # Code from module closedir:\n+  # Code from module count-one-bits:\n   # Code from module d-ino:\n   # Code from module d-type:\n   # Code from module dirent:\n@@ -7779,6 +7780,63 @@ $as_echo \"#define HAVE_MSVC_INVALID_PARAMETER_HANDLER 1\" >>confdefs.h\n   REPLACE_FDOPENDIR=0;\n \n \n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for unsigned long long int\" >&5\n+$as_echo_n \"checking for unsigned long long int... \" >&6; }\n+if ${ac_cv_type_unsigned_long_long_int+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_cv_type_unsigned_long_long_int=yes\n+     if test \"x${ac_cv_prog_cc_c99-no}\" = xno; then\n+       cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+  /* For now, do not test the preprocessor; as of 2007 there are too many\n+         implementations with broken preprocessors.  Perhaps this can\n+         be revisited in 2012.  In the meantime, code should not expect\n+         #if to work with literals wider than 32 bits.  */\n+      /* Test literals.  */\n+      long long int ll = 9223372036854775807ll;\n+      long long int nll = -9223372036854775807LL;\n+      unsigned long long int ull = 18446744073709551615ULL;\n+      /* Test constant expressions.   */\n+      typedef int a[((-9223372036854775807LL < 0 && 0 < 9223372036854775807ll)\n+                     ? 1 : -1)];\n+      typedef int b[(18446744073709551615ULL <= (unsigned long long int) -1\n+                     ? 1 : -1)];\n+      int i = 63;\n+int\n+main ()\n+{\n+/* Test availability of runtime routines for shift and division.  */\n+      long long int llmax = 9223372036854775807ll;\n+      unsigned long long int ullmax = 18446744073709551615ull;\n+      return ((ll << 63) | (ll >> 63) | (ll < i) | (ll > i)\n+              | (llmax / ll) | (llmax % ll)\n+              | (ull << 63) | (ull >> 63) | (ull << i) | (ull >> i)\n+              | (ullmax / ull) | (ullmax % ull));\n+  ;\n+  return 0;\n+}\n+\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+\n+else\n+  ac_cv_type_unsigned_long_long_int=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+     fi\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_type_unsigned_long_long_int\" >&5\n+$as_echo \"$ac_cv_type_unsigned_long_long_int\" >&6; }\n+  if test $ac_cv_type_unsigned_long_long_int = yes; then\n+\n+$as_echo \"#define HAVE_UNSIGNED_LONG_LONG_INT 1\" >>confdefs.h\n+\n+  fi\n+\n+\n \n \n \n@@ -11015,63 +11073,6 @@ $as_echo \"$gl_cv_type_wint_t_too_small\" >&6; }\n \n \n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for unsigned long long int\" >&5\n-$as_echo_n \"checking for unsigned long long int... \" >&6; }\n-if ${ac_cv_type_unsigned_long_long_int+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  ac_cv_type_unsigned_long_long_int=yes\n-     if test \"x${ac_cv_prog_cc_c99-no}\" = xno; then\n-       cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-\n-  /* For now, do not test the preprocessor; as of 2007 there are too many\n-         implementations with broken preprocessors.  Perhaps this can\n-         be revisited in 2012.  In the meantime, code should not expect\n-         #if to work with literals wider than 32 bits.  */\n-      /* Test literals.  */\n-      long long int ll = 9223372036854775807ll;\n-      long long int nll = -9223372036854775807LL;\n-      unsigned long long int ull = 18446744073709551615ULL;\n-      /* Test constant expressions.   */\n-      typedef int a[((-9223372036854775807LL < 0 && 0 < 9223372036854775807ll)\n-                     ? 1 : -1)];\n-      typedef int b[(18446744073709551615ULL <= (unsigned long long int) -1\n-                     ? 1 : -1)];\n-      int i = 63;\n-int\n-main ()\n-{\n-/* Test availability of runtime routines for shift and division.  */\n-      long long int llmax = 9223372036854775807ll;\n-      unsigned long long int ullmax = 18446744073709551615ull;\n-      return ((ll << 63) | (ll >> 63) | (ll < i) | (ll > i)\n-              | (llmax / ll) | (llmax % ll)\n-              | (ull << 63) | (ull >> 63) | (ull << i) | (ull >> i)\n-              | (ullmax / ull) | (ullmax % ull));\n-  ;\n-  return 0;\n-}\n-\n-_ACEOF\n-if ac_fn_c_try_link \"$LINENO\"; then :\n-\n-else\n-  ac_cv_type_unsigned_long_long_int=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext conftest.$ac_ext\n-     fi\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_type_unsigned_long_long_int\" >&5\n-$as_echo \"$ac_cv_type_unsigned_long_long_int\" >&6; }\n-  if test $ac_cv_type_unsigned_long_long_int = yes; then\n-\n-$as_echo \"#define HAVE_UNSIGNED_LONG_LONG_INT 1\" >>confdefs.h\n-\n-  fi\n-\n-\n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for long long int\" >&5\n $as_echo_n \"checking for long long int... \" >&6; }\n@@ -16279,6 +16280,9 @@ $as_echo \"#define GNULIB_TEST_CLOSEDIR 1\" >>confdefs.h\n \n \n \n+\n+\n+\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for d_ino member in directory struct\" >&5\n $as_echo_n \"checking for d_ino member in directory struct... \" >&6; }\n if ${gl_cv_struct_dirent_d_ino+:} false; then :"
    },
    {
      "sha": "094447360b638b447bdc760da493e9260a690c0e",
      "filename": "gnulib/import/Makefile.am",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/Makefile.am?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -35,6 +35,7 @@\n #  --no-vc-files \\\n #  alloca \\\n #  canonicalize-lgpl \\\n+#  count-one-bits \\\n #  dirent \\\n #  dirfd \\\n #  errno \\\n@@ -236,6 +237,14 @@ EXTRA_libgnu_a_SOURCES += closedir.c\n \n ## end   gnulib module closedir\n \n+## begin gnulib module count-one-bits\n+\n+libgnu_a_SOURCES += count-one-bits.c\n+\n+EXTRA_DIST += count-one-bits.h\n+\n+## end   gnulib module count-one-bits\n+\n ## begin gnulib module dirent\n \n BUILT_SOURCES += dirent.h"
    },
    {
      "sha": "f5ad783ddb2f2513003afc441a4d95c0f040ff0f",
      "filename": "gnulib/import/Makefile.in",
      "status": "modified",
      "additions": 27,
      "deletions": 23,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/Makefile.in?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -49,6 +49,7 @@\n #  --no-vc-files \\\n #  alloca \\\n #  canonicalize-lgpl \\\n+#  count-one-bits \\\n #  dirent \\\n #  dirfd \\\n #  errno \\\n@@ -178,6 +179,7 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/import/m4/close.m4 \\\n \t$(top_srcdir)/import/m4/closedir.m4 \\\n \t$(top_srcdir)/import/m4/codeset.m4 \\\n+\t$(top_srcdir)/import/m4/count-one-bits.m4 \\\n \t$(top_srcdir)/import/m4/d-ino.m4 \\\n \t$(top_srcdir)/import/m4/d-type.m4 \\\n \t$(top_srcdir)/import/m4/dirent_h.m4 \\\n@@ -326,14 +328,15 @@ am__v_AR_1 =\n libgnu_a_AR = $(AR) $(ARFLAGS)\n am__DEPENDENCIES_1 =\n am__dirstamp = $(am__leading_dot)dirstamp\n-am_libgnu_a_OBJECTS = cloexec.$(OBJEXT) dirname-lgpl.$(OBJEXT) \\\n-\tbasename-lgpl.$(OBJEXT) stripslash.$(OBJEXT) \\\n-\texitfail.$(OBJEXT) fd-hook.$(OBJEXT) fd-safer-flag.$(OBJEXT) \\\n-\tdup-safer-flag.$(OBJEXT) filenamecat-lgpl.$(OBJEXT) \\\n-\tgetprogname.$(OBJEXT) hard-locale.$(OBJEXT) \\\n-\tlocalcharset.$(OBJEXT) glthread/lock.$(OBJEXT) \\\n-\tmalloca.$(OBJEXT) math.$(OBJEXT) openat-die.$(OBJEXT) \\\n-\tsave-cwd.$(OBJEXT) malloc/scratch_buffer_grow.$(OBJEXT) \\\n+am_libgnu_a_OBJECTS = cloexec.$(OBJEXT) count-one-bits.$(OBJEXT) \\\n+\tdirname-lgpl.$(OBJEXT) basename-lgpl.$(OBJEXT) \\\n+\tstripslash.$(OBJEXT) exitfail.$(OBJEXT) fd-hook.$(OBJEXT) \\\n+\tfd-safer-flag.$(OBJEXT) dup-safer-flag.$(OBJEXT) \\\n+\tfilenamecat-lgpl.$(OBJEXT) getprogname.$(OBJEXT) \\\n+\thard-locale.$(OBJEXT) localcharset.$(OBJEXT) \\\n+\tglthread/lock.$(OBJEXT) malloca.$(OBJEXT) math.$(OBJEXT) \\\n+\topenat-die.$(OBJEXT) save-cwd.$(OBJEXT) \\\n+\tmalloc/scratch_buffer_grow.$(OBJEXT) \\\n \tmalloc/scratch_buffer_grow_preserve.$(OBJEXT) \\\n \tmalloc/scratch_buffer_set_array_size.$(OBJEXT) \\\n \tstat-time.$(OBJEXT) strnlen1.$(OBJEXT) sys_socket.$(OBJEXT) \\\n@@ -1620,15 +1623,15 @@ noinst_LTLIBRARIES =\n EXTRA_DIST = m4/gnulib-cache.m4 alloca.c alloca.in.h arpa_inet.in.h \\\n \tassure.h openat-priv.h openat-proc.c canonicalize-lgpl.c \\\n \tchdir-long.c chdir-long.h cloexec.h close.c closedir.c \\\n-\tdirent-private.h dirent.in.h dirfd.c dirname.h dosname.h dup.c \\\n-\tdup2.c errno.in.h error.c error.h exitfail.h fchdir.c fcntl.c \\\n-\tfcntl.in.h fd-hook.h fdopendir.c filename.h filenamecat.h \\\n-\tflexmember.h float.c float.in.h itold.c fnmatch.c \\\n-\tfnmatch_loop.c fnmatch.in.h fpucw.h frexp.c frexp.c frexpl.c \\\n-\tfstat.c stat-w32.c stat-w32.h at-func.c fstatat.c getcwd.c \\\n-\tgetcwd-lgpl.c getdtablesize.c getlogin_r.c gettimeofday.c \\\n-\tglob.c glob_internal.h glob_pattern_p.c globfree.c glob-libc.h \\\n-\tglob.in.h hard-locale.h \\\n+\tdirent-private.h count-one-bits.h dirent.in.h dirfd.c \\\n+\tdirname.h dosname.h dup.c dup2.c errno.in.h error.c error.h \\\n+\texitfail.h fchdir.c fcntl.c fcntl.in.h fd-hook.h fdopendir.c \\\n+\tfilename.h filenamecat.h flexmember.h float.c float.in.h \\\n+\titold.c fnmatch.c fnmatch_loop.c fnmatch.in.h fpucw.h frexp.c \\\n+\tfrexp.c frexpl.c fstat.c stat-w32.c stat-w32.h at-func.c \\\n+\tfstatat.c getcwd.c getcwd-lgpl.c getdtablesize.c getlogin_r.c \\\n+\tgettimeofday.c glob.c glob_internal.h glob_pattern_p.c \\\n+\tglobfree.c glob-libc.h glob.in.h hard-locale.h \\\n \t$(top_srcdir)/import/extra/config.rpath inet_ntop.c intprops.h \\\n \tinttypes.in.h float+.h isnan.c isnand-nolibm.h isnand.c \\\n \tfloat+.h isnan.c isnanl-nolibm.h isnanl.c cdefs.h \\\n@@ -1682,12 +1685,12 @@ DISTCLEANFILES =\n MAINTAINERCLEANFILES = \n AM_CPPFLAGS = \n AM_CFLAGS = \n-libgnu_a_SOURCES = cloexec.c dirname-lgpl.c basename-lgpl.c \\\n-\tstripslash.c exitfail.c fd-hook.c fd-safer-flag.c \\\n-\tdup-safer-flag.c filenamecat-lgpl.c getprogname.h \\\n-\tgetprogname.c gettext.h hard-locale.c localcharset.c \\\n-\tglthread/lock.h glthread/lock.c malloca.c math.c openat-die.c \\\n-\tsave-cwd.c malloc/scratch_buffer_grow.c \\\n+libgnu_a_SOURCES = cloexec.c count-one-bits.c dirname-lgpl.c \\\n+\tbasename-lgpl.c stripslash.c exitfail.c fd-hook.c \\\n+\tfd-safer-flag.c dup-safer-flag.c filenamecat-lgpl.c \\\n+\tgetprogname.h getprogname.c gettext.h hard-locale.c \\\n+\tlocalcharset.c glthread/lock.h glthread/lock.c malloca.c \\\n+\tmath.c openat-die.c save-cwd.c malloc/scratch_buffer_grow.c \\\n \tmalloc/scratch_buffer_grow_preserve.c \\\n \tmalloc/scratch_buffer_set_array_size.c stat-time.c strnlen1.h \\\n \tstrnlen1.c sys_socket.c tempname.c glthread/threadlib.c \\\n@@ -1827,6 +1830,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cloexec.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/close.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/closedir.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/count-one-bits.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dirfd.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dirname-lgpl.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/dup-safer-flag.Po@am__quote@"
    },
    {
      "sha": "66341d77cda88e2305b5a17de8dfa2276aad5343",
      "filename": "gnulib/import/count-one-bits.c",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/count-one-bits.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/count-one-bits.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/count-one-bits.c?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -0,0 +1,7 @@\n+#include <config.h>\n+#define COUNT_ONE_BITS_INLINE _GL_EXTERN_INLINE\n+#include \"count-one-bits.h\"\n+\n+#if 1500 <= _MSC_VER && (defined _M_IX86 || defined _M_X64)\n+int popcount_support = -1;\n+#endif"
    },
    {
      "sha": "00569941885d544c2faf8edd96181b47f181bead",
      "filename": "gnulib/import/count-one-bits.h",
      "status": "added",
      "additions": 136,
      "deletions": 0,
      "changes": 136,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/count-one-bits.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/count-one-bits.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/count-one-bits.h?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -0,0 +1,136 @@\n+/* count-one-bits.h -- counts the number of 1-bits in a word.\n+   Copyright (C) 2007-2019 Free Software Foundation, Inc.\n+\n+   This program is free software: you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */\n+\n+/* Written by Ben Pfaff.  */\n+\n+#ifndef COUNT_ONE_BITS_H\n+#define COUNT_ONE_BITS_H 1\n+\n+#include <limits.h>\n+#include <stdlib.h>\n+\n+#ifndef _GL_INLINE_HEADER_BEGIN\n+ #error \"Please include config.h first.\"\n+#endif\n+_GL_INLINE_HEADER_BEGIN\n+#ifndef COUNT_ONE_BITS_INLINE\n+# define COUNT_ONE_BITS_INLINE _GL_INLINE\n+#endif\n+\n+/* Expand to code that computes the number of 1-bits of the local\n+   variable 'x' of type TYPE (an unsigned integer type) and return it\n+   from the current function.  */\n+#define COUNT_ONE_BITS_GENERIC(TYPE)                                   \\\n+    do                                                                  \\\n+      {                                                                 \\\n+        int count = 0;                                                  \\\n+        int bits;                                                       \\\n+        for (bits = 0; bits < sizeof (TYPE) * CHAR_BIT; bits += 32)     \\\n+          {                                                             \\\n+            count += count_one_bits_32 (x);                             \\\n+            x = x >> 31 >> 1;                                           \\\n+          }                                                             \\\n+        return count;                                                   \\\n+      }                                                                 \\\n+    while (0)\n+\n+/* Assuming the GCC builtin is BUILTIN and the MSC builtin is MSC_BUILTIN,\n+   expand to code that computes the number of 1-bits of the local\n+   variable 'x' of type TYPE (an unsigned integer type) and return it\n+   from the current function.  */\n+#if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)\n+# define COUNT_ONE_BITS(BUILTIN, MSC_BUILTIN, TYPE) return BUILTIN (x)\n+#else\n+\n+/* Compute and return the number of 1-bits set in the least\n+   significant 32 bits of X. */\n+COUNT_ONE_BITS_INLINE int\n+count_one_bits_32 (unsigned int x)\n+{\n+  x = ((x & 0xaaaaaaaaU) >> 1) + (x & 0x55555555U);\n+  x = ((x & 0xccccccccU) >> 2) + (x & 0x33333333U);\n+  x = (x >> 16) + (x & 0xffff);\n+  x = ((x & 0xf0f0) >> 4) + (x & 0x0f0f);\n+  return (x >> 8) + (x & 0x00ff);\n+}\n+\n+# if 1500 <= _MSC_VER && (defined _M_IX86 || defined _M_X64)\n+\n+/* While gcc falls back to its own generic code if the machine\n+   on which it's running doesn't support popcount, with Microsoft's\n+   compiler we need to detect and fallback ourselves.  */\n+#  pragma intrinsic __cpuid\n+#  pragma intrinsic __popcnt\n+#  pragma intrinsic __popcnt64\n+\n+/* Return nonzero if popcount is supported.  */\n+\n+/* 1 if supported, 0 if not supported, -1 if unknown.  */\n+extern int popcount_support;\n+\n+COUNT_ONE_BITS_INLINE int\n+popcount_supported (void)\n+{\n+  if (popcount_support < 0)\n+    {\n+      int cpu_info[4];\n+      __cpuid (cpu_info, 1);\n+      popcount_support = (cpu_info[2] >> 23) & 1;  /* See MSDN.  */\n+    }\n+  return popcount_support;\n+}\n+\n+#  define COUNT_ONE_BITS(BUILTIN, MSC_BUILTIN, TYPE)    \\\n+     do                                                 \\\n+       {                                                \\\n+         if (popcount_supported ())                     \\\n+           return MSC_BUILTIN (x);                      \\\n+         else                                           \\\n+           COUNT_ONE_BITS_GENERIC (TYPE);               \\\n+       }                                                \\\n+     while (0)\n+# else\n+#  define COUNT_ONE_BITS(BUILTIN, MSC_BUILTIN, TYPE)\t\\\n+     COUNT_ONE_BITS_GENERIC (TYPE)\n+# endif\n+#endif\n+\n+/* Compute and return the number of 1-bits set in X. */\n+COUNT_ONE_BITS_INLINE int\n+count_one_bits (unsigned int x)\n+{\n+  COUNT_ONE_BITS (__builtin_popcount, __popcnt, unsigned int);\n+}\n+\n+/* Compute and return the number of 1-bits set in X. */\n+COUNT_ONE_BITS_INLINE int\n+count_one_bits_l (unsigned long int x)\n+{\n+  COUNT_ONE_BITS (__builtin_popcountl, __popcnt, unsigned long int);\n+}\n+\n+#if HAVE_UNSIGNED_LONG_LONG_INT\n+/* Compute and return the number of 1-bits set in X. */\n+COUNT_ONE_BITS_INLINE int\n+count_one_bits_ll (unsigned long long int x)\n+{\n+  COUNT_ONE_BITS (__builtin_popcountll, __popcnt64, unsigned long long int);\n+}\n+#endif\n+\n+_GL_INLINE_HEADER_END\n+\n+#endif /* COUNT_ONE_BITS_H */"
    },
    {
      "sha": "b4721b549cc346d3653b93cee5bdb0cf453dccfb",
      "filename": "gnulib/import/m4/count-one-bits.m4",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/m4/count-one-bits.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/m4/count-one-bits.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/m4/count-one-bits.m4?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -0,0 +1,12 @@\n+# count-one-bits.m4 serial 3\n+dnl Copyright (C) 2007, 2009-2019 Free Software Foundation, Inc.\n+dnl This file is free software; the Free Software Foundation\n+dnl gives unlimited permission to copy and/or distribute it,\n+dnl with or without modifications, as long as this notice is preserved.\n+\n+AC_DEFUN([gl_COUNT_ONE_BITS],\n+[\n+  dnl We don't need (and can't compile) count_one_bits_ll\n+  dnl unless the type 'unsigned long long int' exists.\n+  AC_REQUIRE([AC_TYPE_UNSIGNED_LONG_LONG_INT])\n+])"
    },
    {
      "sha": "03101b6420700d2d62541a45e66e419a4b5e8afc",
      "filename": "gnulib/import/m4/gnulib-cache.m4",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/m4/gnulib-cache.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/m4/gnulib-cache.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/m4/gnulib-cache.m4?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -40,6 +40,7 @@\n #  --no-vc-files \\\n #  alloca \\\n #  canonicalize-lgpl \\\n+#  count-one-bits \\\n #  dirent \\\n #  dirfd \\\n #  errno \\\n@@ -79,6 +80,7 @@ gl_LOCAL_DIR([])\n gl_MODULES([\n   alloca\n   canonicalize-lgpl\n+  count-one-bits\n   dirent\n   dirfd\n   errno"
    },
    {
      "sha": "fe1da67d4c75a7fa5bb26b522ea4eef478198d7a",
      "filename": "gnulib/import/m4/gnulib-comp.m4",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/m4/gnulib-comp.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/import/m4/gnulib-comp.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/m4/gnulib-comp.m4?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -57,6 +57,7 @@ AC_DEFUN([gl_EARLY],\n   # Code from module cloexec:\n   # Code from module close:\n   # Code from module closedir:\n+  # Code from module count-one-bits:\n   # Code from module d-ino:\n   # Code from module d-type:\n   # Code from module dirent:\n@@ -250,6 +251,7 @@ AC_DEFUN([gl_INIT],\n     AC_LIBOBJ([closedir])\n   fi\n   gl_DIRENT_MODULE_INDICATOR([closedir])\n+  gl_COUNT_ONE_BITS\n   gl_CHECK_TYPE_STRUCT_DIRENT_D_INO\n   gl_CHECK_TYPE_STRUCT_DIRENT_D_TYPE\n   gl_DIRENT_H\n@@ -855,6 +857,8 @@ AC_DEFUN([gl_FILE_LIST], [\n   lib/cloexec.h\n   lib/close.c\n   lib/closedir.c\n+  lib/count-one-bits.c\n+  lib/count-one-bits.h\n   lib/dirent-private.h\n   lib/dirent.in.h\n   lib/dirfd.c\n@@ -1045,6 +1049,7 @@ AC_DEFUN([gl_FILE_LIST], [\n   m4/close.m4\n   m4/closedir.m4\n   m4/codeset.m4\n+  m4/count-one-bits.m4\n   m4/d-ino.m4\n   m4/d-type.m4\n   m4/dirent_h.m4"
    },
    {
      "sha": "5e460809686460c3deb11ca534eb2f3143373db5",
      "filename": "gnulib/update-gnulib.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/update-gnulib.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f661e03972e3412778c0bee8d20522b9bffea76/gnulib/update-gnulib.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/update-gnulib.sh?ref=5f661e03972e3412778c0bee8d20522b9bffea76",
      "patch": "@@ -32,6 +32,7 @@\n IMPORTED_GNULIB_MODULES=\"\\\n     alloca \\\n     canonicalize-lgpl \\\n+    count-one-bits \\\n     dirent \\\n     dirfd \\\n     errno \\"
    }
  ]
}