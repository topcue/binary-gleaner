{
  "sha": "54721a930e80a635d3cb47c0ad3899ed9680bd78",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTQ3MjFhOTMwZTgwYTYzNWQzY2I0N2MwYWQzODk5ZWQ5NjgwYmQ3OA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-08-28T05:15:53Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-17T22:50:11Z"
    },
    "message": "[GOLD] Output_data_got tidy\n\nSome Output_data_got methods already have support for addends, but\nwere implemented as separate methods.  This removes unnecessary code\nduplication.\n\nRelobj::local_has_got_offset and others there get a similar treatment.\nComments are removed since it should be obvious without a comment, and\nthe existing comments are not precisely what the code does.  For\nexample, a local_has_got_offset call without an addend does not return\nwhether the local symbol has *a* GOT offset of type GOT_TYPE, it\nreturns whether there is a GOT entry of type GOT_TYPE for the symbol\nwith addend of zero.\n\n\tPR 28192\n\t* output.h (Output_data_got::add_local): Make addend optional.\n\t(Output_data_got::add_local_with_rel): Likewise.\n\t(Output_data_got::add_local_pair_with_rel): Likewise.\n\t* output.cc (Output_data_got::add_local): Delete overload\n\twithout addend.\n\t(Output_data_got::add_local_with_rel): Likewise.\n\t(Output_data_got::add_local_pair_with_rel): Likewise.\n\t* object.h (Relobj::local_has_got_offset): Make addend optional.\n\tDelete overload without addend later.  Update comment.\n\t(Relobj::local_got_offset): Likewise.\n\t(Relobj::set_local_got_offset): Likewise.",
    "tree": {
      "sha": "88b5cd53e547a5a37273303eabeac5bbcc868499",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/88b5cd53e547a5a37273303eabeac5bbcc868499"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/54721a930e80a635d3cb47c0ad3899ed9680bd78",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54721a930e80a635d3cb47c0ad3899ed9680bd78",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/54721a930e80a635d3cb47c0ad3899ed9680bd78",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54721a930e80a635d3cb47c0ad3899ed9680bd78/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "973b2b402ebf660e2bbbac60e85469164d76ecfc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/973b2b402ebf660e2bbbac60e85469164d76ecfc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/973b2b402ebf660e2bbbac60e85469164d76ecfc"
    }
  ],
  "stats": {
    "total": 137,
    "additions": 14,
    "deletions": 123
  },
  "files": [
    {
      "sha": "dc089f5a417a5c5634b09a796d994459b59c3349",
      "filename": "gold/object.h",
      "status": "modified",
      "additions": 11,
      "deletions": 30,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54721a930e80a635d3cb47c0ad3899ed9680bd78/gold/object.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54721a930e80a635d3cb47c0ad3899ed9680bd78/gold/object.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/object.h?ref=54721a930e80a635d3cb47c0ad3899ed9680bd78",
      "patch": "@@ -1216,46 +1216,27 @@ class Relobj : public Object\n   local_plt_offset(unsigned int symndx) const\n   { return this->do_local_plt_offset(symndx); }\n \n-  // Return whether the local symbol SYMNDX has a GOT offset of type\n-  // GOT_TYPE.\n-  bool\n-  local_has_got_offset(unsigned int symndx, unsigned int got_type) const\n-  { return this->do_local_has_got_offset(symndx, got_type, 0); }\n-\n-  // Return whether the local symbol SYMNDX plus ADDEND has a GOT offset\n-  // of type GOT_TYPE.\n+  // Return whether there is a GOT entry of type GOT_TYPE for the\n+  // local symbol SYMNDX with given ADDEND.\n   bool\n   local_has_got_offset(unsigned int symndx, unsigned int got_type,\n-\t\t       uint64_t addend) const\n+\t\t       uint64_t addend = 0) const\n   { return this->do_local_has_got_offset(symndx, got_type, addend); }\n \n-  // Return the GOT offset of type GOT_TYPE of the local symbol\n-  // SYMNDX.  It is an error to call this if the symbol does not have\n-  // a GOT offset of the specified type.\n-  unsigned int\n-  local_got_offset(unsigned int symndx, unsigned int got_type) const\n-  { return this->do_local_got_offset(symndx, got_type, 0); }\n-\n-  // Return the GOT offset of type GOT_TYPE of the local symbol\n-  // SYMNDX plus ADDEND.  It is an error to call this if the symbol\n-  // does not have a GOT offset of the specified type.\n+  // Return the GOT offset of the GOT entry with type GOT_TYPE for the\n+  // local symbol SYMNDX with given ADDEND.  It is an error to call\n+  // this function if the symbol does not have such a GOT entry.\n   unsigned int\n   local_got_offset(unsigned int symndx, unsigned int got_type,\n-\t\t       uint64_t addend) const\n+\t\t   uint64_t addend = 0) const\n   { return this->do_local_got_offset(symndx, got_type, addend); }\n \n-  // Set the GOT offset with type GOT_TYPE of the local symbol SYMNDX\n-  // to GOT_OFFSET.\n-  void\n-  set_local_got_offset(unsigned int symndx, unsigned int got_type,\n-\t\t       unsigned int got_offset)\n-  { this->do_set_local_got_offset(symndx, got_type, got_offset, 0); }\n-\n-  // Set the GOT offset with type GOT_TYPE of the local symbol SYMNDX\n-  // plus ADDEND to GOT_OFFSET.\n+  // Set the GOT offset for a GOT entry with type GOT_TYPE for the\n+  // local symbol SYMNDX with ADDEND to GOT_OFFSET.  Create such an\n+  // entry if none exists.\n   void\n   set_local_got_offset(unsigned int symndx, unsigned int got_type,\n-\t\t       unsigned int got_offset, uint64_t addend)\n+\t\t       unsigned int got_offset, uint64_t addend = 0)\n   { this->do_set_local_got_offset(symndx, got_type, got_offset, addend); }\n \n   // Return whether the local symbol SYMNDX is a TLS symbol."
    },
    {
      "sha": "75f54f02f23605e930eaadf80dfc30dab85a96d5",
      "filename": "gold/output.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 66,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54721a930e80a635d3cb47c0ad3899ed9680bd78/gold/output.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54721a930e80a635d3cb47c0ad3899ed9680bd78/gold/output.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/output.cc?ref=54721a930e80a635d3cb47c0ad3899ed9680bd78",
      "patch": "@@ -1531,26 +1531,6 @@ Output_data_got<got_size, big_endian>::add_global_pair_with_rel(\n \t\t\t\tgot_offset + got_size / 8, 0);\n }\n \n-// Add an entry for a local symbol to the GOT.  This returns true if\n-// this is a new GOT entry, false if the symbol already has a GOT\n-// entry.\n-\n-template<int got_size, bool big_endian>\n-bool\n-Output_data_got<got_size, big_endian>::add_local(\n-    Relobj* object,\n-    unsigned int symndx,\n-    unsigned int got_type)\n-{\n-  if (object->local_has_got_offset(symndx, got_type))\n-    return false;\n-\n-  unsigned int got_offset = this->add_got_entry(Got_entry(object, symndx,\n-\t\t\t\t\t\t\t  false));\n-  object->set_local_got_offset(symndx, got_type, got_offset);\n-  return true;\n-}\n-\n // Add an entry for a local symbol plus ADDEND to the GOT.  This returns\n // true if this is a new GOT entry, false if the symbol already has a GOT\n // entry.\n@@ -1590,26 +1570,6 @@ Output_data_got<got_size, big_endian>::add_local_plt(\n   return true;\n }\n \n-// Add an entry for a local symbol to the GOT, and add a dynamic\n-// relocation of type R_TYPE for the GOT entry.\n-\n-template<int got_size, bool big_endian>\n-void\n-Output_data_got<got_size, big_endian>::add_local_with_rel(\n-    Relobj* object,\n-    unsigned int symndx,\n-    unsigned int got_type,\n-    Output_data_reloc_generic* rel_dyn,\n-    unsigned int r_type)\n-{\n-  if (object->local_has_got_offset(symndx, got_type))\n-    return;\n-\n-  unsigned int got_offset = this->add_got_entry(Got_entry());\n-  object->set_local_got_offset(symndx, got_type, got_offset);\n-  rel_dyn->add_local_generic(object, symndx, r_type, this, got_offset, 0);\n-}\n-\n // Add an entry for a local symbol plus ADDEND to the GOT, and add a dynamic\n // relocation of type R_TYPE for the GOT entry.\n \n@@ -1631,32 +1591,6 @@ Output_data_got<got_size, big_endian>::add_local_with_rel(\n                              addend);\n }\n \n-// Add a pair of entries for a local symbol to the GOT, and add\n-// a dynamic relocation of type R_TYPE using the section symbol of\n-// the output section to which input section SHNDX maps, on the first.\n-// The first got entry will have a value of zero, the second the\n-// value of the local symbol.\n-template<int got_size, bool big_endian>\n-void\n-Output_data_got<got_size, big_endian>::add_local_pair_with_rel(\n-    Relobj* object,\n-    unsigned int symndx,\n-    unsigned int shndx,\n-    unsigned int got_type,\n-    Output_data_reloc_generic* rel_dyn,\n-    unsigned int r_type)\n-{\n-  if (object->local_has_got_offset(symndx, got_type))\n-    return;\n-\n-  unsigned int got_offset =\n-      this->add_got_entry_pair(Got_entry(),\n-\t\t\t       Got_entry(object, symndx, false));\n-  object->set_local_got_offset(symndx, got_type, got_offset);\n-  Output_section* os = object->output_section(shndx);\n-  rel_dyn->add_output_section_generic(os, r_type, this, got_offset, 0);\n-}\n-\n // Add a pair of entries for a local symbol plus ADDEND to the GOT, and add\n // a dynamic relocation of type R_TYPE using the section symbol of\n // the output section to which input section SHNDX maps, on the first."
    },
    {
      "sha": "726c93beb5bfea5b3eab62610fb959cd8c042c06",
      "filename": "gold/output.h",
      "status": "modified",
      "additions": 3,
      "deletions": 27,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54721a930e80a635d3cb47c0ad3899ed9680bd78/gold/output.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54721a930e80a635d3cb47c0ad3899ed9680bd78/gold/output.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/output.h?ref=54721a930e80a635d3cb47c0ad3899ed9680bd78",
      "patch": "@@ -2488,18 +2488,12 @@ class Output_data_got : public Output_data_got_base\n \t\t\t   Output_data_reloc_generic* rel_dyn,\n \t\t\t   unsigned int r_type_1, unsigned int r_type_2);\n \n-  // Add an entry for a local symbol to the GOT.  This returns true if\n-  // this is a new GOT entry, false if the symbol already has a GOT\n-  // entry.\n-  bool\n-  add_local(Relobj* object, unsigned int sym_index, unsigned int got_type);\n-\n   // Add an entry for a local symbol plus ADDEND to the GOT.  This returns\n   // true if this is a new GOT entry, false if the symbol already has a GOT\n   // entry.\n   bool\n   add_local(Relobj* object, unsigned int sym_index, unsigned int got_type,\n-\t    uint64_t addend);\n+\t    uint64_t addend = 0);\n \n   // Like add_local, but use the PLT offset of the local symbol if it\n   // has one.\n@@ -2512,30 +2506,12 @@ class Output_data_got : public Output_data_got_base\n   add_local_tls(Relobj* object, unsigned int sym_index, unsigned int got_type)\n   { return add_local_plt(object, sym_index, got_type); }\n \n-  // Add an entry for a local symbol to the GOT, and add a dynamic\n-  // relocation of type R_TYPE for the GOT entry.\n-  void\n-  add_local_with_rel(Relobj* object, unsigned int sym_index,\n-\t\t     unsigned int got_type, Output_data_reloc_generic* rel_dyn,\n-\t\t     unsigned int r_type);\n-\n   // Add an entry for a local symbol plus ADDEND to the GOT, and add a dynamic\n   // relocation of type R_TYPE for the GOT entry.\n   void\n   add_local_with_rel(Relobj* object, unsigned int sym_index,\n \t\t     unsigned int got_type, Output_data_reloc_generic* rel_dyn,\n-\t\t     unsigned int r_type, uint64_t addend);\n-\n-  // Add a pair of entries for a local symbol to the GOT, and add\n-  // a dynamic relocation of type R_TYPE using the section symbol of\n-  // the output section to which input section SHNDX maps, on the first.\n-  // The first got entry will have a value of zero, the second the\n-  // value of the local symbol.\n-  void\n-  add_local_pair_with_rel(Relobj* object, unsigned int sym_index,\n-\t\t\t  unsigned int shndx, unsigned int got_type,\n-\t\t\t  Output_data_reloc_generic* rel_dyn,\n-\t\t\t  unsigned int r_type);\n+\t\t     unsigned int r_type, uint64_t addend = 0);\n \n   // Add a pair of entries for a local symbol plus ADDEND to the GOT, and add\n   // a dynamic relocation of type R_TYPE using the section symbol of\n@@ -2546,7 +2522,7 @@ class Output_data_got : public Output_data_got_base\n   add_local_pair_with_rel(Relobj* object, unsigned int sym_index,\n \t\t\t  unsigned int shndx, unsigned int got_type,\n \t\t\t  Output_data_reloc_generic* rel_dyn,\n-\t\t\t  unsigned int r_type, uint64_t addend);\n+\t\t\t  unsigned int r_type, uint64_t addend = 0);\n \n   // Add a pair of entries for a local symbol to the GOT, and add\n   // a dynamic relocation of type R_TYPE using STN_UNDEF on the first."
    }
  ]
}