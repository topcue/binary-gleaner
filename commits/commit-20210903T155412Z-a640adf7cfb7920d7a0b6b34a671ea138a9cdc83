{
  "sha": "a640adf7cfb7920d7a0b6b34a671ea138a9cdc83",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTY0MGFkZjdjZmI3OTIwZDdhMGI2YjM0YTY3MWVhMTM4YTljZGM4Mw==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2021-08-19T02:53:09Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2021-09-03T15:54:12Z"
    },
    "message": "Test case reproducing PR28030 bug\n\nThe original reproducer for PR28030 required use of a specific\ncompiler version - gcc-c++-11.1.1-3.fc34 is mentioned in the PR,\nthough it seems probable that other gcc versions might also be able to\nreproduce the bug as well.  This commit introduces a test case which,\nusing the DWARF assembler, provides a reproducer which is independent\nof the compiler version.  (Well, it'll work with whatever compilers\nthe DWARF assembler works with.)\n\nTo the best of my knowledge, it's also the first test case which uses\nthe DWARF assembler to provide debug info for a shared object.  That\nbeing the case, I provided more than the usual commentary which should\nallow this case to be used as a template when a combo shared\nlibrary / DWARF assembler test case is required in the future.\n\nI provide some details regarding the bug in a comment near the\nbeginning of locexpr-dml.exp.\n\nThis problem was difficult to reproduce; I found myself constantly\nreferring to the backtrace while trying to figure out what (else) I\nmight be missing while trying to create a reproducer.  Below is a\npartial backtrace which I include for posterity.\n\n #0  internal_error (\n    file=0xc50110 \"/ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/gdbtypes.c\", line=5575,\n    fmt=0xc520c0 \"Unexpected type field location kind: %d\")\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdbsupport/errors.cc:51\n #1  0x00000000006ef0c5 in copy_type_recursive (objfile=0x1635930,\n    type=0x274c260, copied_types=0x30bb290)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/gdbtypes.c:5575\n #2  0x00000000006ef382 in copy_type_recursive (objfile=0x1635930,\n    type=0x274ca10, copied_types=0x30bb290)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/gdbtypes.c:5602\n #3  0x0000000000a7409a in preserve_one_value (value=0x24269f0,\n    objfile=0x1635930, copied_types=0x30bb290)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/value.c:2529\n #4  0x000000000072012a in gdbscm_preserve_values (\n    extlang=0xc55720 <extension_language_guile>, objfile=0x1635930,\n    copied_types=0x30bb290)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/guile/scm-value.c:94\n #5  0x00000000006a3f82 in preserve_ext_lang_values (objfile=0x1635930,\n    copied_types=0x30bb290)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/extension.c:568\n #6  0x0000000000a7428d in preserve_values (objfile=0x1635930)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/value.c:2579\n #7  0x000000000082d514 in objfile::~objfile (this=0x1635930,\n    __in_chrg=<optimized out>)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/objfiles.c:549\n #8  0x0000000000831cc8 in std::_Sp_counted_ptr<objfile*, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x1654580)\n    at /usr/include/c++/11/bits/shared_ptr_base.h:348\n #9  0x00000000004e6617 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x1654580) at /usr/include/c++/11/bits/shared_ptr_base.h:168\n #10 0x00000000004e1d2f in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x190bb88, __in_chrg=<optimized out>)\n    at /usr/include/c++/11/bits/shared_ptr_base.h:705\n #11 0x000000000082feee in std::__shared_ptr<objfile, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x190bb80, __in_chrg=<optimized out>)\n    at /usr/include/c++/11/bits/shared_ptr_base.h:1154\n #12 0x000000000082ff0a in std::shared_ptr<objfile>::~shared_ptr (\n    this=0x190bb80, __in_chrg=<optimized out>)\n    at /usr/include/c++/11/bits/shared_ptr.h:122\n #13 0x000000000085ed7e in __gnu_cxx::new_allocator<std::_List_node<std::shared_ptr<objfile> > >::destroy<std::shared_ptr<objfile> > (this=0x114bc00,\n    __p=0x190bb80) at /usr/include/c++/11/ext/new_allocator.h:168\n #14 0x000000000085e88d in std::allocator_traits<std::allocator<std::_List_node<std::shared_ptr<objfile> > > >::destroy<std::shared_ptr<objfile> > (__a=...,\n    __p=0x190bb80) at /usr/include/c++/11/bits/alloc_traits.h:531\n #15 0x000000000085e50c in std::__cxx11::list<std::shared_ptr<objfile>, std::allocator<std::shared_ptr<objfile> > >::_M_erase (this=0x114bc00, __position=\n  std::shared_ptr<objfile> (expired, weak count 1) = {get() = 0x1635930})\n    at /usr/include/c++/11/bits/stl_list.h:1925\n #16 0x000000000085df0e in std::__cxx11::list<std::shared_ptr<objfile>, std::allocator<std::shared_ptr<objfile> > >::erase (this=0x114bc00, __position=\n  std::shared_ptr<objfile> (expired, weak count 1) = {get() = 0x1635930})\n    at /usr/include/c++/11/bits/list.tcc:158\n #17 0x000000000085c748 in program_space::remove_objfile (this=0x114bbc0,\n    objfile=0x1635930)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/progspace.c:210\n #18 0x000000000082d3ae in objfile::unlink (this=0x1635930)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/objfiles.c:487\n #19 0x000000000082e68c in objfile_purge_solibs ()\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/objfiles.c:875\n #20 0x000000000092dd37 in no_shared_libraries (ignored=0x0, from_tty=1)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/solib.c:1236\n #21 0x00000000009a37fe in target_pre_inferior (from_tty=1)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/target.c:2496\n #22 0x00000000007454d6 in run_command_1 (args=0x0, from_tty=1,\n    run_how=RUN_NORMAL)\n    at /ironwood1/sourceware-git/f34-pr28030/bld/../../worktree-pr28030/gdb/infcmd.c:437\n\nI'll note a few points regarding this backtrace:\n\nFrame #1 is where the internal error occurs.  It's caused by an\nunhandled case for FIELD_LOC_KIND_DWARF_BLOCK.  The fix for this bug\nadds support for this case.\n\nFrame #22 - it's a partial backtrace - shows that GDB is attempting to\n(re)run the program.  You can see the exact command sequence that was\nused for reproducing this problem in the PR (at\nhttps://sourceware.org/bugzilla/show_bug.cgi?id=28030), but in a\nnutshell, after starting the program and advancing to the appropriate\nsource line, GDB was asked to step into libstdc++; a \"finish\" command\nwas issued, returning a value.  The fact that a value was returned is\nvery important.  GDB was then used to step back into libstdc++.  A\nbreakpoint was set on a source line in the library after which a \"run\"\ncommand was issued.\n\nFrame #19 shows a call to objfile_purge_solibs.  It's aptly named.\n\nFrame #7 is a call to the destructor for one of the objfile solibs; it\nturned out to be the one for libstdc++.\n\nFrames #6 thru #3 show various value preservation frames.  If you look\nat preserve_values() in gdb/value.c, the value history is preserved\nfirst, followed by internal variables, followed by values for the\nextension languages (python and guile).",
    "tree": {
      "sha": "03b58e047f82a3ee78314d74c8bebdceaef67d99",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/03b58e047f82a3ee78314d74c8bebdceaef67d99"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7a6cb96b710257a4f5bc7e85cc103b6bf8dfc25c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a6cb96b710257a4f5bc7e85cc103b6bf8dfc25c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7a6cb96b710257a4f5bc7e85cc103b6bf8dfc25c"
    }
  ],
  "stats": {
    "total": 454,
    "additions": 454,
    "deletions": 0
  },
  "files": [
    {
      "sha": "2cfd1c613a4b55a68768c08bd67b921a67512a58",
      "filename": "gdb/testsuite/gdb.dwarf2/locexpr-data-member-location-lib.c",
      "status": "added",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location-lib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location-lib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location-lib.c?ref=a640adf7cfb7920d7a0b6b34a671ea138a9cdc83",
      "patch": "@@ -0,0 +1,48 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"locexpr-data-member-location.h\"\n+\n+struct A g_A = {3, 4};\n+struct B g_B = { {8, 9}, 10, 11 };\n+\n+B *\n+foo ()\n+{\t\t\t\t\t\t/* foo prologue */\n+  asm (\"foo_label: .globl foo_label\");\n+  return &g_B;\t\t\t\t\t/* foo return */\n+}\t\t\t\t\t\t/* foo end */\n+\n+B *\n+bar (B *v)\n+{\t\t\t\t\t\t/* bar prologue */\n+  asm (\"bar_label: .globl bar_label\");\n+  return v;\t\t\t\t\t/* bar return */\n+}\t\t\t\t\t\t/* bar end */\n+\n+/* Some of the DWARF assembler procs (e.g. function_range) compile\n+   this file, expecting it to be a complete program with a main()\n+   function.  When IS_SHAREDLIB is NOT defined, we have main() as\n+   defined below.  */\n+\n+#ifndef IS_SHAREDLIB\n+int\n+main ()\n+{\n+  B *b = foo ();\n+}\n+#endif"
    },
    {
      "sha": "62845edcdf75ead0c1613f08ce817d7210565f0b",
      "filename": "gdb/testsuite/gdb.dwarf2/locexpr-data-member-location-main.c",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location-main.c?ref=a640adf7cfb7920d7a0b6b34a671ea138a9cdc83",
      "patch": "@@ -0,0 +1,27 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"locexpr-data-member-location.h\"\n+\n+int\n+main (void)\n+{\n+  B *v1;\n+  v1 = bar (foo ());\n+\n+  return 0;\n+}"
    },
    {
      "sha": "1f70e6a34bd00433e766d26732e97638d3348f52",
      "filename": "gdb/testsuite/gdb.dwarf2/locexpr-data-member-location.exp",
      "status": "added",
      "additions": 349,
      "deletions": 0,
      "changes": 349,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location.exp?ref=a640adf7cfb7920d7a0b6b34a671ea138a9cdc83",
      "patch": "@@ -0,0 +1,349 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test case uses the DWARF assembler to reproduce the problem\n+# described by PR28030.  The bug turned out to be that\n+# FIELD_LOC_KIND_DWARF_BLOCK was not handled when recursively copying\n+# a value's type when preserving the value history during the freeing\n+# up of objfiles associated with a shared object.  (Yes, figuring out\n+# how to make this happen in a concise test case turned out to be\n+# challenging.)\n+#\n+# The following elements proved to be necessary for reproducing the\n+# problem:\n+#\n+# 1) A location expression needed to be used with\n+#    DW_AT_data_member_location rather than a simple offset.\n+#    Moreover, this location expression needed to use opcodes\n+#    which GDB's DWARF reader could not convert to a simple\n+#    offset.  (Note, however, that GDB could probably be improved\n+#    to handle the opcodes chosen for this test; if decode_locdesc()\n+#    in dwarf2/read.c is ever updated to handle both DW_OP_pick and\n+#    DW_OP_drop, then this test could end up passing even if\n+#    the bug it's intended to test has not been fixed.)\n+#\n+# 2) The debug info containing the above DWARF info needed\n+#    to be associated with a shared object since the problem\n+#    occurred while GDB was preserving values during the\n+#    purging of shared objects.\n+#\n+# 3) After performing some simple gdb commands, the program is\n+#    run again.  In the course of running the objfile destructor\n+#    associated with the shared object, values are preserved\n+#    along with their types.  As noted earlier, it was during\n+#    the recursive type copy that the bug was observed.\n+#\n+# Therefore, due to #2 above, this test case creates debug info\n+# which is then used by a shared object.\n+\n+# This test can't be run on targets lacking shared library support.\n+if [skip_shlib_tests] {\n+    return 0\n+}\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if ![dwarf2_support] {\n+    return 0\n+}\n+\n+# gdb_test_file_name is the name of this file without the .exp\n+# extension.  Use it to form basenames for the main program\n+# and shared object.\n+set main_basename ${::gdb_test_file_name}-main\n+set lib_basename ${::gdb_test_file_name}-lib\n+\n+# We're generating DWARF assembly for the shared object; therefore,\n+# the source file for the library / shared object must be listed first\n+# (in the standard_testfile invocation) since ${srcfile} is used by\n+# get_func_info (for determining the start, end, and length of a\n+# function).\n+#\n+# The output of Dwarf::assemble will be placed in $lib_basename.S\n+# which will be ${srcfile3} after the execution of standard_testfile.\n+\n+standard_testfile $lib_basename.c $main_basename.c $lib_basename.S\n+\n+set libsrc \"${::srcdir}/${::subdir}/${::srcfile}\"\n+set lib_so [standard_output_file ${lib_basename}.so]\n+set asm_file [standard_output_file ${::srcfile3}]\n+\n+# We need to know the size of some types in order to write some of the\n+# debugging info that we're about to generate.  For that, we ask GDB\n+# by debugging the shared object associated with this test case.\n+\n+# Compile the shared library: -DIS_SHAREDLIB prevents main() from\n+# being defined.  Note that debugging symbols will be present for\n+# this compilation.\n+if {[gdb_compile_shlib $libsrc $lib_so \\\n+                       {additional_flags=-DIS_SHAREDLIB debug}] != \"\"} {\n+    untested \"failed to compile shared library\"\n+    return\n+}\n+\n+# Start a fresh GDB and load the shared library.\n+clean_restart $lib_so\n+\n+# Using our running GDB session, determine sizes of several types.\n+set long_size [get_sizeof \"long\" -1]\n+set addr_size [get_sizeof \"void *\" -1]\n+set struct_A_size [get_sizeof \"g_A\" -1]\n+set struct_B_size [get_sizeof \"g_B\" -1]\n+\n+if { $long_size == -1 || $addr_size == -1 \\\n+     || $struct_A_size == -1 || $struct_B_size == -1} {\n+    perror \"Can't determine type sizes\"\n+    return\n+}\n+\n+# Retrieve struct offset of MBR in struct TP\n+proc get_offsetof { tp mbr } {\n+    return [get_integer_valueof \"&((${tp} *) 0)->${mbr}\" -1]\n+}\n+\n+# Use running GDB session to get struct offsets\n+set A_a [get_offsetof A a]\n+set A_x [get_offsetof A x]\n+set B_a [get_offsetof B a]\n+set B_b [get_offsetof B b]\n+set B_x2 [get_offsetof B x2]\n+\n+# Create the DWARF.\n+Dwarf::assemble ${asm_file} {\n+    declare_labels L\n+\n+    # Find start, end, and length of functions foo and bar.\n+    # These calls to get_func_info will create and set variables\n+    # foo_start, bar_start, foo_end, bar_end, foo_len, and\n+    # bar_len.\n+    #\n+    # In order to get the right answers, get_func_info (and,\n+    # underneath, function_range) should use the same compiler flags\n+    # as those used to make a shared object.  For any targets that get\n+    # this far, -fpic is probably correct.\n+    #\n+    # Also, it should be noted that IS_SHAREDLIB is NOT defined as one\n+    # of the additional flags.  Not defining IS_SHAREDLIB will cause a\n+    # main() to be defined for the compilation of the shared library\n+    # source file which happens as a result of using get_func_info;\n+    # this is currently required in order to this facility.\n+    set flags {additional_flags=-fpic debug}\n+    get_func_info foo $flags\n+    get_func_info bar $flags\n+\n+    cu {} {\n+\tDW_TAG_compile_unit {\n+\t    {DW_AT_language @DW_LANG_C_plus_plus}\n+\t    {name ${::srcfile}}\n+\t    {stmt_list $L DW_FORM_sec_offset}\n+        } {\n+\t    declare_labels int_label class_A_label class_B_label \\\n+\t                   B_ptr_label\n+\n+\t    int_label: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size ${::long_size} DW_FORM_udata}\n+\t\t{DW_AT_encoding @DW_ATE_signed}\n+\t\t{DW_AT_name \"int\"}\n+\t    }\n+\n+\t    class_A_label: DW_TAG_class_type {\n+\t\t{DW_AT_name \"A\"}\n+\t\t{DW_AT_byte_size ${::struct_A_size} DW_FORM_sdata}\n+\t    } {\n+\t\tDW_TAG_member {\n+\t\t    {DW_AT_name \"a\"}\n+\t\t    {DW_AT_type :$int_label}\n+\t\t    {DW_AT_data_member_location ${::A_a} DW_FORM_udata}\n+\t\t}\n+\t\tDW_TAG_member {\n+\t\t    {DW_AT_name \"x\"}\n+\t\t    {DW_AT_type :$int_label}\n+\t\t    {DW_AT_data_member_location ${::A_x} DW_FORM_udata}\n+\t\t}\n+\t    }\n+\n+\t    class_B_label: DW_TAG_class_type {\n+\t\t{DW_AT_name \"B\"}\n+\t\t{DW_AT_byte_size ${::struct_B_size} DW_FORM_sdata}\n+\t    } {\n+\t\t# While there are easier / better ways to specify an\n+\t\t# offset used by DW_AT_data_member_location than that\n+\t\t# used below, we need a location expression here in\n+\t\t# order to reproduce the bug.  Moreover, this location\n+\t\t# expression needs to use opcodes that aren't handled\n+\t\t# by decode_locdesc() in dwarf2/read.c; if we use\n+\t\t# opcodes that _are_ handled by that function, the\n+\t\t# location expression will be converted into a simple\n+\t\t# offset - which will then (again) not reproduce the\n+\t\t# bug.  At the time that this test was written,\n+\t\t# neither DW_OP_pick nor DW_OP_drop were being handled\n+\t\t# by decode_locdesc(); this is why those opcodes were\n+\t\t# chosen.\n+\t\tDW_TAG_inheritance {\n+\t\t    {DW_AT_type :$class_A_label}\n+\t\t    {DW_AT_data_member_location {\n+\t\t\tDW_OP_constu ${::B_a}\n+\t\t\tDW_OP_plus\n+\t\t\tDW_OP_pick 0\n+\t\t\tDW_OP_drop} SPECIAL_expr}\n+\t\t    {DW_AT_accessibility 1 DW_FORM_data1}\n+\t\t}\n+\t\tDW_TAG_member {\n+\t\t    {DW_AT_name \"b\"}\n+\t\t    {DW_AT_type :$int_label}\n+\t\t    {DW_AT_data_member_location ${::B_b} DW_FORM_udata}\n+\t\t}\n+\t\tDW_TAG_member {\n+\t\t    {DW_AT_name \"x2\"}\n+\t\t    {DW_AT_type :$int_label}\n+\t\t    {DW_AT_data_member_location ${::B_x2} DW_FORM_udata}\n+\t\t}\n+\t    }\n+\n+\t    B_ptr_label: DW_TAG_pointer_type {\n+\t\t{DW_AT_type :$class_B_label}\n+\t\t{DW_AT_byte_size ${::addr_size} DW_FORM_sdata}\n+\t    }\n+\n+\t    DW_TAG_variable {\n+\t\t{DW_AT_name \"g_A\"}\n+\t\t{DW_AT_type :$class_A_label}\n+\t\t{DW_AT_external 1 flag}\n+\t\t{DW_AT_location {DW_OP_addr [gdb_target_symbol \"g_A\"]} \\\n+\t\t                 SPECIAL_expr}\n+\t    }\n+\n+\t    DW_TAG_variable {\n+\t\t{DW_AT_name \"g_B\"}\n+\t\t{DW_AT_type :$class_B_label}\n+\t\t{DW_AT_external 1 flag}\n+\t\t{DW_AT_location {DW_OP_addr [gdb_target_symbol \"g_B\"]} \\\n+\t\t                 SPECIAL_expr}\n+\t    }\n+\n+\t    # We can't use MACRO_AT for the definitions of foo and bar\n+\t    # because it doesn't provide a way to pass the appropriate\n+\t    # flags.  Therefore, we list the name, low_pc, and high_pc\n+\t    # explicitly.\n+\t    DW_TAG_subprogram {\n+\t\t{DW_AT_name foo}\n+\t\t{DW_AT_low_pc $foo_start DW_FORM_addr}\n+\t\t{DW_AT_high_pc $foo_end DW_FORM_addr}\n+\t\t{DW_AT_type :${B_ptr_label}}\n+\t\t{DW_AT_external 1 flag}\n+\t    }\n+\n+\t    DW_TAG_subprogram {\n+\t\t{DW_AT_name bar}\n+\t\t{DW_AT_low_pc $bar_start DW_FORM_addr}\n+\t\t{DW_AT_high_pc $bar_end DW_FORM_addr}\n+\t\t{DW_AT_type :${B_ptr_label}}\n+\t\t{DW_AT_external 1 flag}\n+\t    } {\n+\t\tDW_TAG_formal_parameter {\n+\t\t    {DW_AT_name v}\n+\t\t    {DW_AT_type :${B_ptr_label}}\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    lines {version 2} L {\n+\tinclude_dir \"${::srcdir}/${::subdir}\"\n+\tfile_name \"${::srcfile}\" 1\n+\n+\t# Generate a line table program.\n+\tprogram {\n+\t    {DW_LNE_set_address $foo_start}\n+\t    {line [gdb_get_line_number \"foo prologue\"]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address foo_label}\n+\t    {line [gdb_get_line_number \"foo return\"]}\n+\t    {DW_LNS_copy}\n+\t    {line [gdb_get_line_number \"foo end\"]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address $foo_end}\n+\t    {DW_LNS_advance_line 1}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_end_sequence}\n+\n+\t    {DW_LNE_set_address $bar_start}\n+\t    {line [gdb_get_line_number \"bar prologue\"]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address bar_label}\n+\t    {line [gdb_get_line_number \"bar return\"]}\n+\t    {DW_LNS_copy}\n+\t    {line [gdb_get_line_number \"bar end\"]}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_set_address $bar_end}\n+\t    {DW_LNS_advance_line 1}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_end_sequence}\n+\t}\n+    }\n+}\n+\n+# Compile the shared object again, but this time include / use the\n+# DWARF info that we've created above.  Note that (again)\n+# -DIS_SHAREDLIB is used to prevent inclusion of main() in the shared\n+# object.  Also note the use of the \"nodebug\" option.  Any debugging\n+# information that we need will be provided by the DWARF info created\n+# above.\n+if {[gdb_compile_shlib [list $libsrc $asm_file] $lib_so \\\n+                       {additional_flags=-DIS_SHAREDLIB nodebug}] != \"\"} {\n+    untested \"failed to compile shared library\"\n+    return\n+}\n+\n+# Compile the main program for use with the shared object.\n+if [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+                        ${::srcfile2} [list debug shlib=$lib_so]] {\n+    return -1\n+}\n+\n+# Do whatever is necessary to make sure that the shared library is\n+# loaded for remote targets.\n+gdb_load_shlib ${lib_so}\n+\n+if ![runto_main] then {\n+    fail \"can't run to main\"\n+    return\n+}\n+\n+# Step into foo so that we can finish out of it.\n+gdb_test \"step\" \"foo .. at .* foo end.*\" \"step into foo\"\n+\n+# Finishing out of foo will create a value that will later need to\n+# be preserved when restarting the program.\n+gdb_test \"finish\" \"= \\\\(class B \\\\*\\\\) ${::hex} .*\" \"finish out of foo\"\n+\n+# Dereferencing and printing the return value isn't necessary\n+# for reproducing the bug, but we should make sure that the\n+# return value is what we expect it to be.\n+gdb_test \"p *$\" { = {<A> = {a = 8, x = 9}, b = 10, x2 = 11}} \\\n+         \"dereference return value\"\n+\n+# The original PR28030 reproducer stepped back into the shared object,\n+# so we'll do the same here:\n+gdb_test \"step\" \"bar \\\\(.*\" \"step into bar\"\n+\n+# We don't want a clean restart here since that will be too clean.\n+# The original reproducer for PR28030 set a breakpoint in the shared\n+# library and then restarted via \"run\".  The command below does roughly\n+# the same thing.  It's at this step that an internal error would\n+# occur for PR28030.  The \"message\" argument tells runto to turn on\n+# the printing of PASSes while runto is doing its job.\n+runto \"bar\" message"
    },
    {
      "sha": "81cd2b38e859380ba756441284ec80f10a8694be",
      "filename": "gdb/testsuite/gdb.dwarf2/locexpr-data-member-location.h",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a640adf7cfb7920d7a0b6b34a671ea138a9cdc83/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/locexpr-data-member-location.h?ref=a640adf7cfb7920d7a0b6b34a671ea138a9cdc83",
      "patch": "@@ -0,0 +1,30 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+typedef struct A {\n+    long a;\n+    long x;\n+} A;\n+\n+typedef struct B {\n+    A a;\n+    long b;\n+    long x2;\n+} B;\n+\n+extern B *foo ();\n+extern B *bar (B *v);"
    }
  ]
}