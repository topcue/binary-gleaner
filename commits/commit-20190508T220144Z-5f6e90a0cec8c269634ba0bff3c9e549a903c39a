{
  "sha": "5f6e90a0cec8c269634ba0bff3c9e549a903c39a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWY2ZTkwYTBjZWM4YzI2OTYzNGJhMGJmZjNjOWU1NDlhOTAzYzM5YQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-10T02:21:06Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-08T22:01:44Z"
    },
    "message": "Add a type-safe C++ interface to a registry\n\nThis changes DECLARE_REGISTRY to add a type-safe interface.  This\ninterface is a C++ class that handles the details of registering a\nkey, and provides various useful methods, including policy-based\ncleanup.\n\ngdb/ChangeLog\n2019-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* registry.h (DECLARE_REGISTRY): Define the _key class.",
    "tree": {
      "sha": "2eb7ff67d1ab10909eb80099f8cf6d76e25f7d0e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2eb7ff67d1ab10909eb80099f8cf6d76e25f7d0e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5f6e90a0cec8c269634ba0bff3c9e549a903c39a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f6e90a0cec8c269634ba0bff3c9e549a903c39a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5f6e90a0cec8c269634ba0bff3c9e549a903c39a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f6e90a0cec8c269634ba0bff3c9e549a903c39a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1bd0c6e4964f68523794aded05aa4d184db44d48",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1bd0c6e4964f68523794aded05aa4d184db44d48",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1bd0c6e4964f68523794aded05aa4d184db44d48"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 66,
    "deletions": 6
  },
  "files": [
    {
      "sha": "b5e4422da6df5fdaf9831115ac3905e2e055e86c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f6e90a0cec8c269634ba0bff3c9e549a903c39a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f6e90a0cec8c269634ba0bff3c9e549a903c39a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5f6e90a0cec8c269634ba0bff3c9e549a903c39a",
      "patch": "@@ -1,3 +1,7 @@\n+2019-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* registry.h (DECLARE_REGISTRY): Define the _key class.\n+\n 2019-05-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* NEWS: Merge two 'New commands' sections."
    },
    {
      "sha": "683d905f7636884203b6d477f18185919c5e587a",
      "filename": "gdb/registry.h",
      "status": "modified",
      "additions": 62,
      "deletions": 6,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f6e90a0cec8c269634ba0bff3c9e549a903c39a/gdb/registry.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f6e90a0cec8c269634ba0bff3c9e549a903c39a/gdb/registry.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/registry.h?ref=5f6e90a0cec8c269634ba0bff3c9e549a903c39a",
      "patch": "@@ -20,6 +20,8 @@\n #ifndef REGISTRY_H\n #define REGISTRY_H\n \n+#include <type_traits>\n+\n /* The macros here implement a template type and functions for\n    associating some user data with a container object.\n \n@@ -243,11 +245,65 @@ typedef void (*registry_ ## TAG ## _callback) (struct TAG *, void *);\t\\\n extern const struct TAG ## _data *register_ ## TAG ## _data (void);\t\\\n extern const struct TAG ## _data *register_ ## TAG ## _data_with_cleanup \\\n  (registry_ ## TAG ## _callback save, registry_ ## TAG ## _callback free); \\\n-extern void clear_ ## TAG ## _data (struct TAG *);\t\t\\\n-extern void set_ ## TAG ## _data (struct TAG *,\t\t\t\\\n-\t\t\t\t  const struct TAG ## _data *data, \\\n-\t\t\t\t  void *value);\t\t\t\\\n-extern void *TAG ## _data (struct TAG *,\t\t\t\\\n-\t\t\t   const struct TAG ## _data *data);\n+extern void clear_ ## TAG ## _data (struct TAG *);\t\t\t\\\n+extern void set_ ## TAG ## _data (struct TAG *,\t\t\t\t\\\n+\t\t\t\t  const struct TAG ## _data *data,\t\\\n+\t\t\t\t  void *value);\t\t\t\t\\\n+extern void *TAG ## _data (struct TAG *,\t\t\t\t\\\n+\t\t\t   const struct TAG ## _data *data);\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+template<typename DATA, typename Deleter = std::default_delete<DATA>>\t\\\n+class TAG ## _key\t\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+public:\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  TAG ## _key ()\t\t\t\t\t\t\t\\\n+    : m_key (register_ ## TAG ## _data_with_cleanup (nullptr,\t\t\\\n+\t\t\t\t\t\t     cleanup))\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  DATA *get (struct TAG *obj) const\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    return (DATA *) TAG ## _data (obj, m_key);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  void set (struct TAG *obj, DATA *data) const\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    set_ ## TAG ## _data (obj, m_key, data);\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  template<typename Dummy = DATA *, typename... Args>\t\t\t\\\n+  typename std::enable_if<std::is_same<Deleter,\t\t\t\t\\\n+\t\t\t\t       std::default_delete<DATA>>::value, \\\n+\t\t\t  Dummy>::type\t\t\t\t\t\\\n+  emplace (struct TAG *obj, Args &&...args) const\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    DATA *result = new DATA (std::forward<Args> (args)...);\t\t\\\n+    set (obj, result);\t\t\t\t\t\t\t\\\n+    return result;\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  void clear (struct TAG *obj) const\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    DATA *datum = get (obj);\t\t\t\t\t\t\\\n+    if (datum != nullptr)\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\t\\\n+\tcleanup (obj, datum);\t\t\t\t\t\t\\\n+\tset (obj, nullptr);\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+private:\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  static void cleanup (struct TAG *obj, void *arg)\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\t\\\n+    DATA *datum = (DATA *) arg;\t\t\t\t\t\t\\\n+    Deleter d;\t\t\t\t\t\t\t\t\\\n+    d (datum);\t\t\t\t\t\t\t\t\\\n+  }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  const struct TAG ## _data *m_key;\t\t\t\t\t\\\n+};\n \n #endif /* REGISTRY_H */"
    }
  ]
}