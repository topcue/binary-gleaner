{
  "sha": "c4dfcb3638cbdb33589e3789df45d76178b333bf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzRkZmNiMzYzOGNiZGIzMzU4OWUzNzg5ZGY0NWQ3NjE3OGIzMzNiZg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-07-13T02:58:50Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-13T02:58:50Z"
    },
    "message": "gdb: add type::bounds / type::set_bounds\n\nAdd the `bounds` and `set_bounds` methods on `struct type`, in order to\nremove the `TYPE_RANGE_DATA` macro.  In this patch, the\n`TYPE_RANGE_DATA` macro is changed to use `type::bounds`, so all the\ncall sites that are used to set a range type's bounds are changed to use\n`type::set_bounds`.  The next patch will remove `TYPE_RANGE_DATA`\ncompletely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <bounds, set_bounds>: New methods.\n\t(TYPE_RANGE_DATA): Use type::bounds.  Change all uses that\n\tare used to set the range type's bounds to use set_bounds.\n\nChange-Id: I62e15506239b98404e62bbea8120db184ed87847",
    "tree": {
      "sha": "c44705cd72d8c10eb1629f14abaa5e858de041a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c44705cd72d8c10eb1629f14abaa5e858de041a3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c4dfcb3638cbdb33589e3789df45d76178b333bf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c4dfcb3638cbdb33589e3789df45d76178b333bf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c4dfcb3638cbdb33589e3789df45d76178b333bf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c4dfcb3638cbdb33589e3789df45d76178b333bf/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "07716b63cb03c5489d243a48fef73930206d348f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/07716b63cb03c5489d243a48fef73930206d348f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/07716b63cb03c5489d243a48fef73930206d348f"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 39,
    "deletions": 12
  },
  "files": [
    {
      "sha": "09bcc670146d3b23de4a53ac50924f816dda80d2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4dfcb3638cbdb33589e3789df45d76178b333bf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4dfcb3638cbdb33589e3789df45d76178b333bf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c4dfcb3638cbdb33589e3789df45d76178b333bf",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-12  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <bounds, set_bounds>: New methods.\n+\t(TYPE_RANGE_DATA): Use type::bounds.  Change all uses that\n+\tare used to set the range type's bounds to use set_bounds.\n+\n 2020-07-11  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* exec.c (_initialize_exec): Update exec-file-mismatch help."
    },
    {
      "sha": "66f094328991b8bec58d1de25042cf55b19dadca",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 14,
      "deletions": 9,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4dfcb3638cbdb33589e3789df45d76178b333bf/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4dfcb3638cbdb33589e3789df45d76178b333bf/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=c4dfcb3638cbdb33589e3789df45d76178b333bf",
      "patch": "@@ -935,15 +935,17 @@ create_range_type (struct type *result_type, struct type *index_type,\n   else\n     TYPE_LENGTH (result_type) = TYPE_LENGTH (check_typedef (index_type));\n \n-  TYPE_RANGE_DATA (result_type) = (struct range_bounds *)\n-    TYPE_ZALLOC (result_type, sizeof (struct range_bounds));\n-  TYPE_RANGE_DATA (result_type)->low = *low_bound;\n-  TYPE_RANGE_DATA (result_type)->high = *high_bound;\n-  TYPE_RANGE_DATA (result_type)->bias = bias;\n+  range_bounds *bounds\n+    = (struct range_bounds *) TYPE_ZALLOC (result_type, sizeof (range_bounds));\n+  bounds->low = *low_bound;\n+  bounds->high = *high_bound;\n+  bounds->bias = bias;\n \n   /* Initialize the stride to be a constant, the value will already be zero\n      thanks to the use of TYPE_ZALLOC above.  */\n-  TYPE_RANGE_DATA (result_type)->stride.kind = PROP_CONST;\n+  bounds->stride.kind = PROP_CONST;\n+\n+  result_type->set_bounds (bounds);\n \n   if (low_bound->kind == PROP_CONST && low_bound->data.const_val >= 0)\n     TYPE_UNSIGNED (result_type) = 1;\n@@ -5363,9 +5365,12 @@ copy_type_recursive (struct objfile *objfile,\n   /* For range types, copy the bounds information.  */\n   if (type->code () == TYPE_CODE_RANGE)\n     {\n-      TYPE_RANGE_DATA (new_type) = (struct range_bounds *)\n-        TYPE_ALLOC (new_type, sizeof (struct range_bounds));\n-      *TYPE_RANGE_DATA (new_type) = *TYPE_RANGE_DATA (type);\n+      range_bounds *bounds\n+        = ((struct range_bounds *) TYPE_ALLOC\n+\t   (new_type, sizeof (struct range_bounds)));\n+\n+      *bounds = *type->bounds ();\n+      new_type->set_bounds (bounds);\n     }\n \n   if (type->main_type->dyn_prop_list != NULL)"
    },
    {
      "sha": "236d37b1ce2a2440456b49a6f548c5815c4e1670",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4dfcb3638cbdb33589e3789df45d76178b333bf/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4dfcb3638cbdb33589e3789df45d76178b333bf/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=c4dfcb3638cbdb33589e3789df45d76178b333bf",
      "patch": "@@ -953,6 +953,22 @@ struct type\n     this->field (0).set_type (index_type);\n   }\n \n+  /* Get the bounds bounds of this type.  The type must be a range type.  */\n+  range_bounds *bounds () const\n+  {\n+    gdb_assert (this->code () == TYPE_CODE_RANGE);\n+\n+    return this->main_type->flds_bnds.bounds;\n+  }\n+\n+  /* Set the bounds of this type.  The type must be a range type.  */\n+  void set_bounds (range_bounds *bounds)\n+  {\n+    gdb_assert (this->code () == TYPE_CODE_RANGE);\n+\n+    this->main_type->flds_bnds.bounds = bounds;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;\n@@ -1502,7 +1518,7 @@ extern unsigned type_align (struct type *);\n    space in struct type.  */\n extern bool set_type_align (struct type *, ULONGEST);\n \n-#define TYPE_RANGE_DATA(thistype) TYPE_MAIN_TYPE(thistype)->flds_bnds.bounds\n+#define TYPE_RANGE_DATA(thistype) ((thistype)->bounds ())\n #define TYPE_LOW_BOUND(range_type) \\\n   TYPE_RANGE_DATA(range_type)->low.data.const_val\n #define TYPE_HIGH_BOUND(range_type) \\"
    },
    {
      "sha": "aa0c715b054aec22998b968a8f5e365562edf2fe",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4dfcb3638cbdb33589e3789df45d76178b333bf/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4dfcb3638cbdb33589e3789df45d76178b333bf/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=c4dfcb3638cbdb33589e3789df45d76178b333bf",
      "patch": "@@ -1734,8 +1734,8 @@ parse_type (int fd, union aux_ext *ax, unsigned int aux_index, int *bs,\n   if (t->bt == btRange)\n     {\n       tp->set_num_fields (0);\n-      TYPE_RANGE_DATA (tp) = ((struct range_bounds *)\n-\t\t\t  TYPE_ZALLOC (tp, sizeof (struct range_bounds)));\n+      tp->set_bounds (((struct range_bounds *)\n+\t\t\tTYPE_ZALLOC (tp, sizeof (struct range_bounds))));\n       TYPE_LOW_BOUND (tp) = AUX_GET_DNLOW (bigend, ax);\n       ax++;\n       TYPE_HIGH_BOUND (tp) = AUX_GET_DNHIGH (bigend, ax);"
    }
  ]
}