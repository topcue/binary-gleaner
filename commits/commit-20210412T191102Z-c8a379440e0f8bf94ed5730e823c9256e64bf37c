{
  "sha": "c8a379440e0f8bf94ed5730e823c9256e64bf37c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzhhMzc5NDQwZTBmOGJmOTRlZDU3MzBlODIzYzkyNTZlNjRiZjM3Yw==",
  "commit": {
    "author": {
      "name": "Will Schmidt",
      "email": "will_schmidt@vnet.ibm.com",
      "date": "2021-04-12T19:11:02Z"
    },
    "committer": {
      "name": "Will Schmidt",
      "email": "will_schmidt@vnet.ibm.com",
      "date": "2021-04-12T19:11:02Z"
    },
    "message": "[PATCH] gdb-power10-single-step\n\nHi,\n  This is based on a patch originally written by Alan Modra.\nPowerpc / Power10 ISA 3.1 adds prefixed instructions, which\nare 8 bytes in length.  This is in contrast to powerpc previously\nalways having 4 byte instruction length.  This patch implements\nchanges to allow GDB to better detect prefixed instructions, and\nhandle single stepping across the 8 byte instructions.\n\nAdded #defines to help test for PNOP and prefix instructions.\nUpdate ppc_displaced_step_copy_insn() to handle pnop and prefixed\ninstructions whem R=0 (non-pc-relative).\n\nUpdated ppc_displaced_step_fixup() to properly handle the offset\nvalue matching the current instruction size\n\nUpdated the for-loop within ppc_deal_with_atomic_sequence() to\ncount instructions properly in case we have a mix of 4-byte and\n8-byte instructions within the atomic_sequence_length.\n\nAdded testcase and harness to exercise pc-relative load/store\ninstructions with R=0.\n\n2021-04-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n        gdb/ChangeLog:\n        * rs6000-tdep.c:  Add support for single-stepping of\n        prefixed instructions.\n\n        gdb/testsuite/ChangeLog:\n        * gdb.arch/powerpc-plxv-nonrel.s:  Testcase using\n        non-relative plxv instructions.\n        * gdb.arch/powerpc-plxv-nonrel.exp: Testcase harness.",
    "tree": {
      "sha": "60c862aedcb629281ae30b2598d1ace1156ab9e6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/60c862aedcb629281ae30b2598d1ace1156ab9e6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c8a379440e0f8bf94ed5730e823c9256e64bf37c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8a379440e0f8bf94ed5730e823c9256e64bf37c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c8a379440e0f8bf94ed5730e823c9256e64bf37c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8a379440e0f8bf94ed5730e823c9256e64bf37c/comments",
  "author": {
    "login": "willschm",
    "id": 44359,
    "node_id": "MDQ6VXNlcjQ0MzU5",
    "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/willschm",
    "html_url": "https://github.com/willschm",
    "followers_url": "https://api.github.com/users/willschm/followers",
    "following_url": "https://api.github.com/users/willschm/following{/other_user}",
    "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/willschm/subscriptions",
    "organizations_url": "https://api.github.com/users/willschm/orgs",
    "repos_url": "https://api.github.com/users/willschm/repos",
    "events_url": "https://api.github.com/users/willschm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/willschm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "willschm",
    "id": 44359,
    "node_id": "MDQ6VXNlcjQ0MzU5",
    "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/willschm",
    "html_url": "https://github.com/willschm",
    "followers_url": "https://api.github.com/users/willschm/followers",
    "following_url": "https://api.github.com/users/willschm/following{/other_user}",
    "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/willschm/subscriptions",
    "organizations_url": "https://api.github.com/users/willschm/orgs",
    "repos_url": "https://api.github.com/users/willschm/repos",
    "events_url": "https://api.github.com/users/willschm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/willschm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e3d528d7e6a6b863d30aaecf74adf8c78286f84c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e3d528d7e6a6b863d30aaecf74adf8c78286f84c"
    }
  ],
  "stats": {
    "total": 245,
    "additions": 236,
    "deletions": 9
  },
  "files": [
    {
      "sha": "5d67a9a968f40c62946a1ec6b4e228a9b0a7b087",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8a379440e0f8bf94ed5730e823c9256e64bf37c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8a379440e0f8bf94ed5730e823c9256e64bf37c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c8a379440e0f8bf94ed5730e823c9256e64bf37c",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\t* rs6000-tdep.c:  Add support for single-stepping of\n+\tprefixed instructions.\n+\n 2021-04-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \tPR gdb/27525"
    },
    {
      "sha": "2415aae342f61553df8a916c19986d4dacf8e0e1",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 49,
      "deletions": 9,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8a379440e0f8bf94ed5730e823c9256e64bf37c/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8a379440e0f8bf94ed5730e823c9256e64bf37c/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=c8a379440e0f8bf94ed5730e823c9256e64bf37c",
      "patch": "@@ -841,7 +841,7 @@ typedef BP_MANIPULATION_ENDIAN (little_breakpoint, big_breakpoint)\n   rs6000_breakpoint;\n \n /* Instruction masks for displaced stepping.  */\n-#define BRANCH_MASK 0xfc000000\n+#define OP_MASK 0xfc000000\n #define BP_MASK 0xFC0007FE\n #define B_INSN 0x48000000\n #define BC_INSN 0x40000000\n@@ -869,6 +869,11 @@ typedef BP_MANIPULATION_ENDIAN (little_breakpoint, big_breakpoint)\n #define ADDPCIS_TARGET_REGISTER 0x03F00000\n #define ADDPCIS_INSN_REGSHIFT   21\n \n+#define PNOP_MASK 0xfff3ffff\n+#define PNOP_INSN 0x07000000\n+#define R_MASK 0x00100000\n+#define R_ZERO 0x00000000\n+\n /* Check if insn is one of the Load And Reserve instructions used for atomic\n    sequences.  */\n #define IS_LOAD_AND_RESERVE_INSN(insn)\t((insn & LOAD_AND_RESERVE_MASK) == LWARX_INSTRUCTION \\\n@@ -901,10 +906,36 @@ ppc_displaced_step_copy_insn (struct gdbarch *gdbarch,\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   int insn;\n \n-  read_memory (from, buf, len);\n+  len = target_read (current_inferior()->top_target(), TARGET_OBJECT_MEMORY, NULL,\n+\t\t     buf, from, len);\n+  if ((ssize_t) len < PPC_INSN_SIZE)\n+    memory_error (TARGET_XFER_E_IO, from);\n \n   insn = extract_signed_integer (buf, PPC_INSN_SIZE, byte_order);\n \n+  /* Check for PNOP and for prefixed instructions with R=0.  Those\n+     instructions are safe to displace.  Prefixed instructions with R=1\n+     will read/write data to/from locations relative to the current PC.\n+     We would not be able to fixup after an instruction has written data\n+    into a displaced location, so decline to displace those instructions.  */\n+  if ((insn & OP_MASK) == 1 << 26)\n+    {\n+      if (((insn & PNOP_MASK) != PNOP_INSN)\n+\t  && ((insn & R_MASK) != R_ZERO))\n+\t{\n+\t  displaced_debug_printf (\"Not displacing prefixed instruction %08x at %s\",\n+\t\t\t\t  insn, paddress (gdbarch, from));\n+\t  return NULL;\n+\t}\n+    }\n+  else\n+    /* Non-prefixed instructions..  */\n+    {\n+      /* Set the instruction length to 4 to match the actual instruction\n+\t length.  */\n+      len = 4;\n+    }\n+\n   /* Assume all atomic sequences start with a Load and Reserve instruction.  */\n   if (IS_LOAD_AND_RESERVE_INSN (insn))\n     {\n@@ -918,7 +949,7 @@ ppc_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \n   displaced_debug_printf (\"copy %s->%s: %s\",\n \t\t\t  paddress (gdbarch, from), paddress (gdbarch, to),\n-\t\t\t  displaced_step_dump_bytes (buf, len).c_str ());;\n+\t\t\t  displaced_step_dump_bytes (buf, len).c_str ());\n \n   /* This is a work around for a problem with g++ 4.8.  */\n   return displaced_step_copy_insn_closure_up (closure.release ());\n@@ -938,11 +969,17 @@ ppc_displaced_step_fixup (struct gdbarch *gdbarch,\n     = (ppc_displaced_step_copy_insn_closure *) closure_;\n   ULONGEST insn  = extract_unsigned_integer (closure->buf.data (),\n \t\t\t\t\t     PPC_INSN_SIZE, byte_order);\n-  ULONGEST opcode = 0;\n+  ULONGEST opcode;\n   /* Offset for non PC-relative instructions.  */\n-  LONGEST offset = PPC_INSN_SIZE;\n+  LONGEST offset;\n \n-  opcode = insn & BRANCH_MASK;\n+  opcode = insn & OP_MASK;\n+\n+  /* Set offset to 8 if this is an 8-byte (prefixed) instruction.  */\n+  if ((opcode) == 1 << 26)\n+    offset = 2 * PPC_INSN_SIZE;\n+  else\n+    offset = PPC_INSN_SIZE;\n \n   displaced_debug_printf (\"(ppc) fixup (%s, %s)\",\n \t\t\t  paddress (gdbarch, from), paddress (gdbarch, to));\n@@ -1114,13 +1151,16 @@ ppc_deal_with_atomic_sequence (struct regcache *regcache)\n      instructions.  */\n   for (insn_count = 0; insn_count < atomic_sequence_length; ++insn_count)\n     {\n-      loc += PPC_INSN_SIZE;\n+      if ((insn & OP_MASK) == 1 << 26)\n+\tloc += 2 * PPC_INSN_SIZE;\n+      else\n+\tloc += PPC_INSN_SIZE;\n       insn = read_memory_integer (loc, PPC_INSN_SIZE, byte_order);\n \n       /* Assume that there is at most one conditional branch in the atomic\n \t sequence.  If a conditional branch is found, put a breakpoint in \n \t its destination address.  */\n-      if ((insn & BRANCH_MASK) == BC_INSN)\n+      if ((insn & OP_MASK) == BC_INSN)\n \t{\n \t  int immediate = ((insn & 0xfffc) ^ 0x8000) - 0x8000;\n \t  int absolute = insn & 2;\n@@ -7102,7 +7142,7 @@ rs6000_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   set_gdbarch_displaced_step_restore_all_in_ptid\n     (gdbarch, ppc_displaced_step_restore_all_in_ptid);\n \n-  set_gdbarch_max_insn_length (gdbarch, PPC_INSN_SIZE);\n+  set_gdbarch_max_insn_length (gdbarch, 2 * PPC_INSN_SIZE);\n \n   /* Hook in ABI-specific overrides, if they have been registered.  */\n   info.target_desc = tdesc;"
    },
    {
      "sha": "d940bfbb5e46d2d3e5f0e8dc8050b171e5407fc2",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8a379440e0f8bf94ed5730e823c9256e64bf37c/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8a379440e0f8bf94ed5730e823c9256e64bf37c/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=c8a379440e0f8bf94ed5730e823c9256e64bf37c",
      "patch": "@@ -1,5 +1,11 @@\n 2021-04-12  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n+\t* gdb.arch/powerpc-plxv-nonrel.s:  Testcase using\n+\tnon-relative plxv instructions.\n+\t* gdb.arch/powerpc-plxv-nonrel.exp: Testcase harness.\n+\n+2021-03-31  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n \tPR gdb/27525\n \t* gdb/testsuite/gdb.arch/powerpc-addpcis.exp:  Testcase harness to\n \texercise single-stepping over subpcis,lnia,addpcis instructions"
    },
    {
      "sha": "08f1a379efbafa07bbc779a541494524ea6d09a7",
      "filename": "gdb/testsuite/gdb.arch/powerpc-plxv-nonrel.exp",
      "status": "added",
      "additions": 131,
      "deletions": 0,
      "changes": 131,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8a379440e0f8bf94ed5730e823c9256e64bf37c/gdb/testsuite/gdb.arch/powerpc-plxv-nonrel.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8a379440e0f8bf94ed5730e823c9256e64bf37c/gdb/testsuite/gdb.arch/powerpc-plxv-nonrel.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/powerpc-plxv-nonrel.exp?ref=c8a379440e0f8bf94ed5730e823c9256e64bf37c",
      "patch": "@@ -0,0 +1,131 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test to see if gdb is properly single stepping over the\n+# displaced plxv instruction.\n+\n+if { ![istarget powerpc*-*] } {\n+    verbose \"Skipping powerpc plxv test.\"\n+    return\n+}\n+\n+set retval 0\n+\n+standard_testfile .s\n+\n+if { [prepare_for_testing \"failed to prepare\" $testfile \"$srcfile\" \\\n+      {debug quiet}] } {\n+    return -1\n+}\n+\n+gdb_test \"set radix 0b10000\"\n+gdb_test \"set debug displaced\"\n+\n+if ![runto_main] then {\n+      return\n+}\n+\n+gdb_test \"set debug displaced on\"\n+\n+# Proc to extract the uint128 hex value from the output of\n+# a print vector statement.\n+proc get_vector_hexadecimal_valueof { exp default {test \"\"} } {\n+\tset val \"0x0000\"\n+\tglobal gdb_prompt\n+\tif {$test == \"\"} {\n+\t\tset test \"get vector_hexadecimal valueof \\\"${exp}\\\"\"\n+\t}\n+\tgdb_test_multiple \"print $${exp}.uint128\" $test {\n+\t\t-re -wrap \"\\\\$\\[0-9\\]* = (0x\\[0-9a-zA-Z\\]+).*\" {\n+\t\t\tset val $expect_out(1,string)\n+\t\t\t\tpass \"$test\"\n+\t\t}\n+\t\t-re -wrap \".*Illegal instruction.* $\" {\n+\t\t\tfail \"Illegal instruction on print.\"\n+\t\t\tset val 0xffff\n+\t\t}\n+\t}\n+\treturn ${val}\n+}\n+\n+# Proc to do a single-step, and ensure we gently handle\n+# an illegal instruction situation.\n+proc stepi_over_instruction { xyz } {\n+\tglobal gdb_prompt\n+\tgdb_test_multiple \"stepi\" \"${xyz} \" {\n+\t\t-re -wrap \".*Illegal instruction.*\" {\n+\t\t\tfail \"Illegal instruction on single step.\"\n+\t\treturn\n+\t\t}\n+\t\t-re -wrap \".*\" {\n+\t\t pass \"stepi ${xyz}\"\n+\t\t}\n+\t}\n+}\n+\n+set check_pc [get_hexadecimal_valueof \"\\$pc\" \"default0\"]\n+\n+# set some breakpoints on the instructions below main().\n+gdb_test \"disas /r main\"\n+set bp1 *$check_pc+4\n+set bp2 *$check_pc+0d12\n+set bp3 *$check_pc+0d20\n+set bp4 *$check_pc+0d28\n+gdb_breakpoint $bp1\n+gdb_breakpoint $bp2\n+gdb_breakpoint $bp3\n+gdb_breakpoint $bp4\n+\n+# single-step through the plxv instructions, and retrieve the\n+# register values as we proceed.\n+\n+stepi_over_instruction  \"stepi over NOP\"\n+stepi_over_instruction  \"stepi over lnia\"\n+stepi_over_instruction  \"stepi over addi\"\n+\n+stepi_over_instruction  \"stepi over vs4 assignment\"\n+set check_vs4 [get_vector_hexadecimal_valueof \"vs4\" \"default0\"]\n+\n+stepi_over_instruction  \"stepi over vs5 assignment\"\n+set check_vs5 [get_vector_hexadecimal_valueof \"vs5\" \"default0\"]\n+\n+stepi_over_instruction  \"stepi over vs6 assignment\"\n+set check_vs6 [get_vector_hexadecimal_valueof \"vs6\" \"default0\"]\n+\n+stepi_over_instruction  \"stepi over vs7 assignment\"\n+set check_vs7 [get_vector_hexadecimal_valueof \"vs7\" \"default0\"]\n+\n+set vs4_expected 0xa5b5c5d5a4b4c4d4a3b3c3d3a2b2c2d2\n+set vs5_expected 0xa7b7c7d7a6b6c6d6a5b5c5d5a4b4c4d4\n+set vs6_expected 0xa9b9c9d9a8b8c8d8a7b7c7d7a6b6c6d6\n+set vs7_expected 0xabbbcbdbaabacadaa9b9c9d9a8b8c8d8\n+\n+if [expr  $check_vs4 != $vs4_expected] {\n+    fail \"unexpected value vs4;  actual:$check_vs4 expected:$vs4_expected\"\n+}\n+if [expr $check_vs5 != $vs5_expected ] {\n+    fail \"unexpected value vs5;   actual:$check_vs5 expected:$vs5_expected\"\n+}\n+if [expr $check_vs6 != $vs6_expected ] {\n+    fail \"unexpected value vs6;   actual:$check_vs6 expected:$vs6_expected\"\n+}\n+if [expr $check_vs7 != $vs7_expected ] {\n+    fail \"unexpected value vs7;   actual:$check_vs7 expected:$vs7_expected\"\n+}\n+\n+gdb_test \"info break\"\n+gdb_test \"info register vs4 vs5 vs6 vs7 \"\n+gdb_test \"disas main #2\"\n+"
    },
    {
      "sha": "4708b214bb07f0c8f11bc51e1ca199d4284b4bc2",
      "filename": "gdb/testsuite/gdb.arch/powerpc-plxv-nonrel.s",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8a379440e0f8bf94ed5730e823c9256e64bf37c/gdb/testsuite/gdb.arch/powerpc-plxv-nonrel.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8a379440e0f8bf94ed5730e823c9256e64bf37c/gdb/testsuite/gdb.arch/powerpc-plxv-nonrel.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/powerpc-plxv-nonrel.s?ref=c8a379440e0f8bf94ed5730e823c9256e64bf37c",
      "patch": "@@ -0,0 +1,45 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+\n+# test to verify that the prefixed instructions that\n+# load/store non-relative values work OK.\n+\n+.global main\n+.type main,function\n+main:\n+\tnop\n+\tlnia 4\n+\taddi 4,4,40\n+\tplxv 4,4(4),0\n+\tplxv 5,12(4),0\n+\tplxv 6,20(4),0\n+\tplxv 7,28(4),0\n+check_here:\n+\tblr\n+mydata:\n+\t.long 0xa1b1c1d1\t# <<-\n+\t.long 0xa2b2c2d2\t# <<- loaded into vs4\n+\t.long 0xa3b3c3d3\t# <<- loaded into vs4\n+\t.long 0xa4b4c4d4\t# <<- loaded into vs4, vs5\n+\t.long 0xa5b5c5d5\t# <<- loaded into vs4, vs5\n+\t.long 0xa6b6c6d6\t# <<- loaded into      vs5, vs6\n+\t.long 0xa7b7c7d7\t# <<- loaded into      vs5, vs6\n+\t.long 0xa8b8c8d8\t# <<- loaded into           vs6, vs7\n+\t.long 0xa9b9c9d9\t# <<- loaded into           vs6, vs7\n+\t.long 0xaabacada\t# <<- loaded into                vs7\n+\t.long 0xabbbcbdb\t# <<- loaded into                vs7\n+\t.long 0xacbcccdc\t# <<-\n+"
    }
  ]
}