{
  "sha": "08dedd6631efefbcba63c4dbf60ef97fb615e022",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDhkZWRkNjYzMWVmZWZiY2JhNjNjNGRiZjYwZWY5N2ZiNjE1ZTAyMg==",
  "commit": {
    "author": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2021-03-19T10:50:26Z"
    },
    "committer": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2021-03-22T10:01:43Z"
    },
    "message": "Add startswith function and use it instead of CONST_STRNEQ.\n\nbfd/ChangeLog:\n\n\t* bfd-in.h (startswith): Add startswith function.\n\t(CONST_STRNEQ): Remove.\n\t* bfd-in2.h (startswith): Regenerate with make headers.\n\t* archive.c (bfd_slurp_armap): Replace usage of CONST_STRNEQ with startswith.\n\t(_bfd_slurp_extended_name_table): Likewise.\n\t* archive64.c (_bfd_archive_64_bit_slurp_armap): Likewise.\n\t* bfd.c (bfd_get_sign_extend_vma): Likewise.\n\t(bfd_convert_section_size): Likewise.\n\t(bfd_convert_section_contents): Likewise.\n\t* coff-stgo32.c (go32exe_create_stub): Likewise.\n\t(go32exe_check_format): Likewise.\n\t* coffcode.h (styp_to_sec_flags): Likewise.\n\t(GNU_DEBUGALTLINK): Likewise.\n\t* coffgen.c (_bfd_coff_section_already_linked): Likewise.\n\t(coff_gc_sweep): Likewise.\n\t(bfd_coff_gc_sections): Likewise.\n\t* cofflink.c (coff_link_add_symbols): Likewise.\n\t(process_embedded_commands): Likewise.\n\t* compress.c (bfd_is_section_compressed_with_header): Likewise.\n\t(bfd_init_section_decompress_status): Likewise.\n\t* dwarf2.c (find_debug_info): Likewise.\n\t(place_sections): Likewise.\n\t* ecoff.c (_bfd_ecoff_slurp_armap): Likewise.\n\t* elf-m10300.c (_bfd_mn10300_elf_size_dynamic_sections): Likewise.\n\t* elf.c (_bfd_elf_make_section_from_shdr): Likewise.\n\t(assign_section_numbers): Likewise.\n\t(elfcore_grok_win32pstatus): Likewise.\n\t* elf32-arm.c (cmse_scan): Likewise.\n\t(elf32_arm_gc_mark_extra_sections): Likewise.\n\t(elf32_arm_size_dynamic_sections): Likewise.\n\t(is_arm_elf_unwind_section_name): Likewise.\n\t* elf32-bfin.c (bfin_size_dynamic_sections): Likewise.\n\t* elf32-cr16.c (_bfd_cr16_elf_size_dynamic_sections): Likewise.\n\t* elf32-cris.c (elf_cris_size_dynamic_sections): Likewise.\n\t* elf32-csky.c (csky_elf_size_dynamic_sections): Likewise.\n\t* elf32-hppa.c (elf32_hppa_size_dynamic_sections): Likewise.\n\t* elf32-iq2000.c (iq2000_elf_check_relocs): Likewise.\n\t* elf32-lm32.c (lm32_elf_size_dynamic_sections): Likewise.\n\t* elf32-m32r.c (m32r_elf_size_dynamic_sections): Likewise.\n\t* elf32-m68k.c (elf_m68k_size_dynamic_sections): Likewise.\n\t* elf32-metag.c (elf_metag_size_dynamic_sections): Likewise.\n\t* elf32-msp430.c (msp430_elf_relax_delete_bytes): Likewise.\n\t* elf32-nios2.c (nios2_elf32_size_dynamic_sections): Likewise.\n\t* elf32-or1k.c (or1k_elf_size_dynamic_sections): Likewise.\n\t* elf32-ppc.c (ppc_elf_size_dynamic_sections): Likewise.\n\t* elf32-s390.c (elf_s390_size_dynamic_sections): Likewise.\n\t* elf32-score.c (s3_bfd_score_elf_size_dynamic_sections): Likewise.\n\t* elf32-score7.c (s7_bfd_score_elf_size_dynamic_sections): Likewise.\n\t* elf32-sh.c (sh_elf_size_dynamic_sections): Likewise.\n\t* elf32-tic6x.c (is_tic6x_elf_unwind_section_name): Likewise.\n\t(elf32_tic6x_size_dynamic_sections): Likewise.\n\t* elf32-vax.c (elf_vax_size_dynamic_sections): Likewise.\n\t* elf32-xtensa.c (elf_xtensa_size_dynamic_sections): Likewise.\n\t(xtensa_is_insntable_section): Likewise.\n\t(xtensa_is_littable_section): Likewise.\n\t(xtensa_is_proptable_section): Likewise.\n\t(xtensa_property_section_name): Likewise.\n\t(xtensa_callback_required_dependence): Likewise.\n\t* elf64-alpha.c (elf64_alpha_size_dynamic_sections): Likewise.\n\t* elf64-hppa.c (elf64_hppa_size_dynamic_sections): Likewise.\n\t* elf64-ia64-vms.c (is_unwind_section_name): Likewise.\n\t(get_reloc_section): Likewise.\n\t(elf64_ia64_size_dynamic_sections): Likewise.\n\t(elf64_ia64_object_p): Likewise.\n\t* elf64-mmix.c (mmix_elf_add_symbol_hook): Likewise.\n\t* elf64-ppc.c (ppc64_elf_size_dynamic_sections): Likewise.\n\t* elf64-s390.c (elf_s390_size_dynamic_sections): Likewise.\n\t* elflink.c (elf_link_add_object_symbols): Likewise.\n\t(_bfd_elf_gc_mark_extra_sections): Likewise.\n\t(bfd_elf_parse_eh_frame_entries): Likewise.\n\t(_bfd_elf_section_already_linked): Likewise.\n\t* elfnn-aarch64.c (elfNN_aarch64_size_dynamic_sections): Likewise.\n\t* elfnn-ia64.c (is_unwind_section_name): Likewise.\n\t(elfNN_ia64_size_dynamic_sections): Likewise.\n\t(elfNN_ia64_object_p): Likewise.\n\t* elfxx-mips.c (FN_STUB_P): Likewise.\n\t(CALL_STUB_P): Likewise.\n\t(CALL_FP_STUB_P): Likewise.\n\t(_bfd_mips_elf_section_from_shdr): Likewise.\n\t(_bfd_mips_elf_fake_sections): Likewise.\n\t(_bfd_mips_elf_size_dynamic_sections): Likewise.\n\t(_bfd_mips_final_write_processing): Likewise.\n\t(_bfd_mips_elf_final_link): Likewise.\n\t* elfxx-sparc.c (_bfd_sparc_elf_size_dynamic_sections): Likewise.\n\t* elfxx-x86.c (elf_i386_is_reloc_section): Likewise.\n\t(elf_x86_64_is_reloc_section): Likewise.\n\t* hpux-core.c (thread_section_p): Likewise.\n\t* libcoff.h (bfd_pei_p): Likewise.\n\t* linker.c (REAL): Likewise.\n\t(unwrap_hash_lookup): Likewise.\n\t(_bfd_generic_link_add_one_symbol): Likewise.\n\t* mmo.c (mmo_internal_write_section): Likewise.\n\t* osf-core.c (osf_core_core_file_p): Likewise.\n\t* pef.c (bfd_pef_print_symbol): Likewise.\n\t* pei-x86_64.c (pex64_print_all_pdata_sections): Likewise.\n\t* som.c (som_slurp_symbol_table): Likewise.\n\t(som_slurp_armap): Likewise.\n\t* wasm-module.c (wasm_compute_custom_section_file_position): Likewise.\n\nbinutils/ChangeLog:\n\n\t* dlltool.c (scan_drectve_symbols): Replace usage of CONST_STRNEQ with startswith.\n\t* emul_aix.c (ar_emul_aix_parse_arg): Likewise.\n\t* objcopy.c (is_mergeable_note_section): Likewise.\n\t* objdump.c (dump_dwarf_section): Likewise.\n\t* prdbg.c (pr_method_type): Likewise.\n\t(pr_class_baseclass): Likewise.\n\t(tg_class_baseclass): Likewise.\n\t* readelf.c (process_lto_symbol_tables): Likewise.\n\t* stabs.c (ULLHIGH): Likewise.\n\t(parse_stab_argtypes): Likewise.\n\t(stab_demangle_function_name): Likewise.\n\ngas/ChangeLog:\n\n\t* config/tc-i386.c (md_parse_option): Replace usage of CONST_STRNEQ with startswith.\n\t(x86_64_section_word): Likewise.\n\t* config/tc-sparc.c (md_parse_option): Likewise.\n\ngdb/ChangeLog:\n\n\t* arm-tdep.c (show_disassembly_style_sfunc): Replace usage of CONST_STRNEQ with startswith.\n\t(_initialize_arm_tdep): Likewise.\n\nld/ChangeLog:\n\n\t* emultempl/aix.em: Replace usage of CONST_STRNEQ with startswith.\n\t* emultempl/beos.em: Likewise.\n\t* emultempl/elf.em: Likewise.\n\t* emultempl/pe.em: Likewise.\n\t* emultempl/pep.em: Likewise.\n\t* emultempl/xtensaelf.em: Likewise.\n\t* ldctor.c (ctor_prio): Likewise.\n\t* ldelf.c (ldelf_try_needed): Likewise.\n\t(ldelf_parse_ld_so_conf): Likewise.\n\t(ldelf_after_open): Likewise.\n\t(output_rel_find): Likewise.\n\t(ldelf_place_orphan): Likewise.\n\t* ldfile.c (ldfile_add_library_path): Likewise.\n\t* ldlang.c (lang_add_input_file): Likewise.\n\t* ldmain.c (get_sysroot): Likewise.\n\t(get_emulation): Likewise.\n\t(add_archive_element): Likewise.\n\t* ldwrite.c (unsplittable_name): Likewise.\n\t(clone_section): Likewise.\n\t* lexsup.c (parse_args): Likewise.\n\t* pe-dll.c (is_import): Likewise.\n\t(pe_implied_import_dll): Likewise.\n\nopcodes/ChangeLog:\n\n\t* aarch64-dis.c (parse_aarch64_dis_option): Replace usage of CONST_STRNEQ with startswith.\n\t* arc-dis.c (parse_option): Likewise.\n\t* arm-dis.c (parse_arm_disassembler_options): Likewise.\n\t* cris-dis.c (print_with_operands): Likewise.\n\t* h8300-dis.c (bfd_h8_disassemble): Likewise.\n\t* i386-dis.c (print_insn): Likewise.\n\t* ia64-gen.c (fetch_insn_class): Likewise.\n\t(parse_resource_users): Likewise.\n\t(in_iclass): Likewise.\n\t(lookup_specifier): Likewise.\n\t(insert_opcode_dependencies): Likewise.\n\t* mips-dis.c (parse_mips_ase_option): Likewise.\n\t(parse_mips_dis_option): Likewise.\n\t* s390-dis.c (disassemble_init_s390): Likewise.\n\t* wasm32-dis.c (parse_wasm32_disassembler_options): Likewise.",
    "tree": {
      "sha": "acadfab6919e8d5c761f6877d33d6f0869083567",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/acadfab6919e8d5c761f6877d33d6f0869083567"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/08dedd6631efefbcba63c4dbf60ef97fb615e022",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08dedd6631efefbcba63c4dbf60ef97fb615e022",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/08dedd6631efefbcba63c4dbf60ef97fb615e022",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08dedd6631efefbcba63c4dbf60ef97fb615e022/comments",
  "author": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1e7fcccb8d6d0a6bd295a50400c553cc595250f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1e7fcccb8d6d0a6bd295a50400c553cc595250f1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1e7fcccb8d6d0a6bd295a50400c553cc595250f1"
    }
  ],
  "stats": {
    "total": 837,
    "additions": 493,
    "deletions": 344
  },
  "files": [
    {
      "sha": "c4172ebe5e3085382704a1adf6a37c3e822b27d4",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 101,
      "deletions": 0,
      "changes": 101,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1,3 +1,104 @@\n+2021-03-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* bfd-in.h (startswith): Add startswith function.\n+\t(CONST_STRNEQ): Remove.\n+\t* bfd-in2.h (startswith): Regenerate with make headers.\n+\t* archive.c (bfd_slurp_armap): Replace usage of CONST_STRNEQ with startswith.\n+\t(_bfd_slurp_extended_name_table): Likewise.\n+\t* archive64.c (_bfd_archive_64_bit_slurp_armap): Likewise.\n+\t* bfd.c (bfd_get_sign_extend_vma): Likewise.\n+\t(bfd_convert_section_size): Likewise.\n+\t(bfd_convert_section_contents): Likewise.\n+\t* coff-stgo32.c (go32exe_create_stub): Likewise.\n+\t(go32exe_check_format): Likewise.\n+\t* coffcode.h (styp_to_sec_flags): Likewise.\n+\t(GNU_DEBUGALTLINK): Likewise.\n+\t* coffgen.c (_bfd_coff_section_already_linked): Likewise.\n+\t(coff_gc_sweep): Likewise.\n+\t(bfd_coff_gc_sections): Likewise.\n+\t* cofflink.c (coff_link_add_symbols): Likewise.\n+\t(process_embedded_commands): Likewise.\n+\t* compress.c (bfd_is_section_compressed_with_header): Likewise.\n+\t(bfd_init_section_decompress_status): Likewise.\n+\t* dwarf2.c (find_debug_info): Likewise.\n+\t(place_sections): Likewise.\n+\t* ecoff.c (_bfd_ecoff_slurp_armap): Likewise.\n+\t* elf-m10300.c (_bfd_mn10300_elf_size_dynamic_sections): Likewise.\n+\t* elf.c (_bfd_elf_make_section_from_shdr): Likewise.\n+\t(assign_section_numbers): Likewise.\n+\t(elfcore_grok_win32pstatus): Likewise.\n+\t* elf32-arm.c (cmse_scan): Likewise.\n+\t(elf32_arm_gc_mark_extra_sections): Likewise.\n+\t(elf32_arm_size_dynamic_sections): Likewise.\n+\t(is_arm_elf_unwind_section_name): Likewise.\n+\t* elf32-bfin.c (bfin_size_dynamic_sections): Likewise.\n+\t* elf32-cr16.c (_bfd_cr16_elf_size_dynamic_sections): Likewise.\n+\t* elf32-cris.c (elf_cris_size_dynamic_sections): Likewise.\n+\t* elf32-csky.c (csky_elf_size_dynamic_sections): Likewise.\n+\t* elf32-hppa.c (elf32_hppa_size_dynamic_sections): Likewise.\n+\t* elf32-iq2000.c (iq2000_elf_check_relocs): Likewise.\n+\t* elf32-lm32.c (lm32_elf_size_dynamic_sections): Likewise.\n+\t* elf32-m32r.c (m32r_elf_size_dynamic_sections): Likewise.\n+\t* elf32-m68k.c (elf_m68k_size_dynamic_sections): Likewise.\n+\t* elf32-metag.c (elf_metag_size_dynamic_sections): Likewise.\n+\t* elf32-msp430.c (msp430_elf_relax_delete_bytes): Likewise.\n+\t* elf32-nios2.c (nios2_elf32_size_dynamic_sections): Likewise.\n+\t* elf32-or1k.c (or1k_elf_size_dynamic_sections): Likewise.\n+\t* elf32-ppc.c (ppc_elf_size_dynamic_sections): Likewise.\n+\t* elf32-s390.c (elf_s390_size_dynamic_sections): Likewise.\n+\t* elf32-score.c (s3_bfd_score_elf_size_dynamic_sections): Likewise.\n+\t* elf32-score7.c (s7_bfd_score_elf_size_dynamic_sections): Likewise.\n+\t* elf32-sh.c (sh_elf_size_dynamic_sections): Likewise.\n+\t* elf32-tic6x.c (is_tic6x_elf_unwind_section_name): Likewise.\n+\t(elf32_tic6x_size_dynamic_sections): Likewise.\n+\t* elf32-vax.c (elf_vax_size_dynamic_sections): Likewise.\n+\t* elf32-xtensa.c (elf_xtensa_size_dynamic_sections): Likewise.\n+\t(xtensa_is_insntable_section): Likewise.\n+\t(xtensa_is_littable_section): Likewise.\n+\t(xtensa_is_proptable_section): Likewise.\n+\t(xtensa_property_section_name): Likewise.\n+\t(xtensa_callback_required_dependence): Likewise.\n+\t* elf64-alpha.c (elf64_alpha_size_dynamic_sections): Likewise.\n+\t* elf64-hppa.c (elf64_hppa_size_dynamic_sections): Likewise.\n+\t* elf64-ia64-vms.c (is_unwind_section_name): Likewise.\n+\t(get_reloc_section): Likewise.\n+\t(elf64_ia64_size_dynamic_sections): Likewise.\n+\t(elf64_ia64_object_p): Likewise.\n+\t* elf64-mmix.c (mmix_elf_add_symbol_hook): Likewise.\n+\t* elf64-ppc.c (ppc64_elf_size_dynamic_sections): Likewise.\n+\t* elf64-s390.c (elf_s390_size_dynamic_sections): Likewise.\n+\t* elflink.c (elf_link_add_object_symbols): Likewise.\n+\t(_bfd_elf_gc_mark_extra_sections): Likewise.\n+\t(bfd_elf_parse_eh_frame_entries): Likewise.\n+\t(_bfd_elf_section_already_linked): Likewise.\n+\t* elfnn-aarch64.c (elfNN_aarch64_size_dynamic_sections): Likewise.\n+\t* elfnn-ia64.c (is_unwind_section_name): Likewise.\n+\t(elfNN_ia64_size_dynamic_sections): Likewise.\n+\t(elfNN_ia64_object_p): Likewise.\n+\t* elfxx-mips.c (FN_STUB_P): Likewise.\n+\t(CALL_STUB_P): Likewise.\n+\t(CALL_FP_STUB_P): Likewise.\n+\t(_bfd_mips_elf_section_from_shdr): Likewise.\n+\t(_bfd_mips_elf_fake_sections): Likewise.\n+\t(_bfd_mips_elf_size_dynamic_sections): Likewise.\n+\t(_bfd_mips_final_write_processing): Likewise.\n+\t(_bfd_mips_elf_final_link): Likewise.\n+\t* elfxx-sparc.c (_bfd_sparc_elf_size_dynamic_sections): Likewise.\n+\t* elfxx-x86.c (elf_i386_is_reloc_section): Likewise.\n+\t(elf_x86_64_is_reloc_section): Likewise.\n+\t* hpux-core.c (thread_section_p): Likewise.\n+\t* libcoff.h (bfd_pei_p): Likewise.\n+\t* linker.c (REAL): Likewise.\n+\t(unwrap_hash_lookup): Likewise.\n+\t(_bfd_generic_link_add_one_symbol): Likewise.\n+\t* mmo.c (mmo_internal_write_section): Likewise.\n+\t* osf-core.c (osf_core_core_file_p): Likewise.\n+\t* pef.c (bfd_pef_print_symbol): Likewise.\n+\t* pei-x86_64.c (pex64_print_all_pdata_sections): Likewise.\n+\t* som.c (som_slurp_symbol_table): Likewise.\n+\t(som_slurp_armap): Likewise.\n+\t* wasm-module.c (wasm_compute_custom_section_file_position): Likewise.\n+\n 2021-03-22  Jan Beulich  <jbeulich@suse.com>\n \n \t* peXXigen.c (_bfd_XXi_swap_scnhdr_out): Add missing"
    },
    {
      "sha": "2a9ca56b653a2b84d2af514362ccef32df436605",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1175,12 +1175,12 @@ bfd_slurp_armap (bfd *abfd)\n   if (bfd_seek (abfd, (file_ptr) -16, SEEK_CUR) != 0)\n     return FALSE;\n \n-  if (CONST_STRNEQ (nextname, \"__.SYMDEF       \")\n-      || CONST_STRNEQ (nextname, \"__.SYMDEF/      \")) /* Old Linux archives.  */\n+  if (startswith (nextname, \"__.SYMDEF       \")\n+      || startswith (nextname, \"__.SYMDEF/      \")) /* Old Linux archives.  */\n     return do_slurp_bsd_armap (abfd);\n-  else if (CONST_STRNEQ (nextname, \"/               \"))\n+  else if (startswith (nextname, \"/               \"))\n     return do_slurp_coff_armap (abfd);\n-  else if (CONST_STRNEQ (nextname, \"/SYM64/         \"))\n+  else if (startswith (nextname, \"/SYM64/         \"))\n     {\n       /* 64bit (Irix 6) archive.  */\n #ifdef BFD64\n@@ -1190,7 +1190,7 @@ bfd_slurp_armap (bfd *abfd)\n       return FALSE;\n #endif\n     }\n-  else if (CONST_STRNEQ (nextname, \"#1/20           \"))\n+  else if (startswith (nextname, \"#1/20           \"))\n     {\n       /* Mach-O has a special name for armap when the map is sorted by name.\n \t However because this name has a space it is slightly more difficult\n@@ -1206,8 +1206,8 @@ bfd_slurp_armap (bfd *abfd)\n       if (bfd_seek (abfd, -(file_ptr) (sizeof (hdr) + 20), SEEK_CUR) != 0)\n \treturn FALSE;\n       extname[20] = 0;\n-      if (CONST_STRNEQ (extname, \"__.SYMDEF SORTED\")\n-\t  || CONST_STRNEQ (extname, \"__.SYMDEF\"))\n+      if (startswith (extname, \"__.SYMDEF SORTED\")\n+\t  || startswith (extname, \"__.SYMDEF\"))\n \treturn do_slurp_bsd_armap (abfd);\n     }\n \n@@ -1246,8 +1246,8 @@ _bfd_slurp_extended_name_table (bfd *abfd)\n       if (bfd_seek (abfd, (file_ptr) -16, SEEK_CUR) != 0)\n \treturn FALSE;\n \n-      if (! CONST_STRNEQ (nextname, \"ARFILENAMES/    \")\n-\t  && ! CONST_STRNEQ (nextname, \"//              \"))\n+      if (! startswith (nextname, \"ARFILENAMES/    \")\n+\t  && ! startswith (nextname, \"//              \"))\n \t{\n \t  bfd_ardata (abfd)->extended_names = NULL;\n \t  bfd_ardata (abfd)->extended_names_size = 0;"
    },
    {
      "sha": "6d76b4d7796e0abcec68138b43460b930a6f8a9c",
      "filename": "bfd/archive64.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/archive64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/archive64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive64.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -62,10 +62,10 @@ _bfd_archive_64_bit_slurp_armap (bfd *abfd)\n     return FALSE;\n \n   /* Archives with traditional armaps are still permitted.  */\n-  if (CONST_STRNEQ (nextname, \"/               \"))\n+  if (startswith (nextname, \"/               \"))\n     return bfd_slurp_armap (abfd);\n \n-  if (! CONST_STRNEQ (nextname, \"/SYM64/         \"))\n+  if (! startswith (nextname, \"/SYM64/         \"))\n     {\n       abfd->has_armap = FALSE;\n       return TRUE;"
    },
    {
      "sha": "fda9fe0198ebecf2a294fa9a9ce4b959e443d326",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 1,
      "deletions": 11,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -56,23 +56,14 @@ extern \"C\" {\n    comma and then the length of the string.  Doing this by hand\n    is error prone, so using this macro is safer.  */\n #define STRING_COMMA_LEN(STR) (STR), (sizeof (STR) - 1)\n-/* Unfortunately it is not possible to use the STRING_COMMA_LEN macro\n-   to create the arguments to another macro, since the preprocessor\n-   will mis-count the number of arguments to the outer macro (by not\n-   evaluating STRING_COMMA_LEN and so missing the comma).  This is a\n-   problem for example when trying to use STRING_COMMA_LEN to build\n-   the arguments to the strncmp() macro.  Hence this alternative\n-   definition of strncmp is provided here.\n-\n-   Note - these macros do NOT work if STR2 is not a constant string.  */\n+\n   /* strcpy() can have a similar problem, but since we know we are\n      copying a constant string, we can use memcpy which will be faster\n      since there is no need to check for a NUL byte inside STR.  We\n      can also save time if we do not need to copy the terminating NUL.  */\n #define LITMEMCPY(DEST,STR2) memcpy ((DEST), (STR2), sizeof (STR2) - 1)\n #define LITSTRCPY(DEST,STR2) memcpy ((DEST), (STR2), sizeof (STR2))\n \n-\n #define BFD_SUPPORTS_PLUGINS @supports_plugins@\n \n /* The word size used by BFD on the host.  This may be 64 with a 32\n@@ -571,4 +562,3 @@ startswith (const char *str, const char *prefix)\n {\n   return strncmp (str, prefix, strlen (prefix)) == 0;\n }\n-#define CONST_STRNEQ(STR1,STR2) startswith (STR1, STR2)"
    },
    {
      "sha": "8874da88afdaf60321d47beedc27fdba3799d11c",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 1,
      "deletions": 11,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -63,23 +63,14 @@ extern \"C\" {\n    comma and then the length of the string.  Doing this by hand\n    is error prone, so using this macro is safer.  */\n #define STRING_COMMA_LEN(STR) (STR), (sizeof (STR) - 1)\n-/* Unfortunately it is not possible to use the STRING_COMMA_LEN macro\n-   to create the arguments to another macro, since the preprocessor\n-   will mis-count the number of arguments to the outer macro (by not\n-   evaluating STRING_COMMA_LEN and so missing the comma).  This is a\n-   problem for example when trying to use STRING_COMMA_LEN to build\n-   the arguments to the strncmp() macro.  Hence this alternative\n-   definition of strncmp is provided here.\n-\n-   Note - these macros do NOT work if STR2 is not a constant string.  */\n+\n   /* strcpy() can have a similar problem, but since we know we are\n      copying a constant string, we can use memcpy which will be faster\n      since there is no need to check for a NUL byte inside STR.  We\n      can also save time if we do not need to copy the terminating NUL.  */\n #define LITMEMCPY(DEST,STR2) memcpy ((DEST), (STR2), sizeof (STR2) - 1)\n #define LITSTRCPY(DEST,STR2) memcpy ((DEST), (STR2), sizeof (STR2))\n \n-\n #define BFD_SUPPORTS_PLUGINS @supports_plugins@\n \n /* The word size used by BFD on the host.  This may be 64 with a 32\n@@ -578,7 +569,6 @@ startswith (const char *str, const char *prefix)\n {\n   return strncmp (str, prefix, strlen (prefix)) == 0;\n }\n-#define CONST_STRNEQ(STR1,STR2) startswith (STR1, STR2)\n /* Extracted from init.c.  */\n unsigned int bfd_init (void);\n "
    },
    {
      "sha": "757fa5f281932845ce3c5bd6fa40477b6ba5d99f",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1746,7 +1746,7 @@ bfd_get_sign_extend_vma (bfd *abfd)\n      no place to store this information in the COFF back end.\n      Should enough other COFF targets add support for DWARF2,\n      a place will have to be found.  Until then, this hack will do.  */\n-  if (CONST_STRNEQ (name, \"coff-go32\")\n+  if (startswith (name, \"coff-go32\")\n       || strcmp (name, \"pe-i386\") == 0\n       || strcmp (name, \"pei-i386\") == 0\n       || strcmp (name, \"pe-x86-64\") == 0\n@@ -1757,7 +1757,7 @@ bfd_get_sign_extend_vma (bfd *abfd)\n       || strcmp (name, \"aix5coff64-rs6000\") == 0)\n     return 1;\n \n-  if (CONST_STRNEQ (name, \"mach-o\"))\n+  if (startswith (name, \"mach-o\"))\n     return 0;\n \n   bfd_set_error (bfd_error_wrong_format);\n@@ -2660,7 +2660,7 @@ bfd_convert_section_size (bfd *ibfd, sec_ptr isec, bfd *obfd,\n     return size;\n \n   /* Convert GNU property size.  */\n-  if (CONST_STRNEQ (isec->name, NOTE_GNU_PROPERTY_SECTION_NAME))\n+  if (startswith (isec->name, NOTE_GNU_PROPERTY_SECTION_NAME))\n     return _bfd_elf_convert_gnu_property_size (ibfd, obfd);\n \n   /* Do nothing if input file will be decompressed.  */\n@@ -2718,7 +2718,7 @@ bfd_convert_section_contents (bfd *ibfd, sec_ptr isec, bfd *obfd,\n     return TRUE;\n \n   /* Convert GNU properties.  */\n-  if (CONST_STRNEQ (isec->name, NOTE_GNU_PROPERTY_SECTION_NAME))\n+  if (startswith (isec->name, NOTE_GNU_PROPERTY_SECTION_NAME))\n     return _bfd_elf_convert_gnu_properties (ibfd, isec, obfd, ptr,\n \t\t\t\t\t    ptr_size);\n "
    },
    {
      "sha": "8f75eecf4ee15546829147c1e472281f404518bb",
      "filename": "bfd/coff-stgo32.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/coff-stgo32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/coff-stgo32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-stgo32.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -176,7 +176,7 @@ go32exe_create_stub (bfd *abfd)\n \t  close (f);\n \t  goto stub_end;\n \t}\n-      if (! CONST_STRNEQ (magic, \"go32stub\"))\n+      if (! startswith (magic, \"go32stub\"))\n \t{\n \t  close (f);\n \t  goto stub_end;\n@@ -306,7 +306,7 @@ go32exe_check_format (bfd *abfd)\n   header_end = H_GET_16 (abfd, filehdr_dos.e_cparhdr) * 16UL;\n   if (go32exe_temp_stub_size < header_end\n       || go32exe_temp_stub_size - header_end < sizeof \"go32stub\" - 1\n-      || !CONST_STRNEQ (go32exe_temp_stub + header_end, \"go32stub\"))\n+      || !startswith (go32exe_temp_stub + header_end, \"go32stub\"))\n     goto fail_format;\n \n   /* Set origin to where the COFF header starts and seek there.  */"
    },
    {
      "sha": "d1ad669a6db72b2602b9b66509c93f904c1a910f",
      "filename": "bfd/coffcode.h",
      "status": "modified",
      "additions": 29,
      "deletions": 29,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/coffcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/coffcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffcode.h?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -527,22 +527,22 @@ sec_to_styp_flags (const char *sec_name, flagword sec_flags)\n       styp_flags = STYP_LIT;\n #endif /* _LIT */\n     }\n-  else if (CONST_STRNEQ (sec_name, DOT_DEBUG)\n-\t   || CONST_STRNEQ (sec_name, DOT_ZDEBUG))\n+  else if (startswith (sec_name, DOT_DEBUG)\n+\t   || startswith (sec_name, DOT_ZDEBUG))\n     {\n       /* Handle the XCOFF debug section and DWARF2 debug sections.  */\n       if (!sec_name[6])\n \tstyp_flags = STYP_XCOFF_DEBUG;\n       else\n \tstyp_flags = STYP_DEBUG_INFO;\n     }\n-  else if (CONST_STRNEQ (sec_name, \".stab\"))\n+  else if (startswith (sec_name, \".stab\"))\n     {\n       styp_flags = STYP_DEBUG_INFO;\n     }\n #ifdef COFF_LONG_SECTION_NAMES\n-  else if (CONST_STRNEQ (sec_name, GNU_LINKONCE_WI)\n-\t   || CONST_STRNEQ (sec_name, GNU_LINKONCE_WT))\n+  else if (startswith (sec_name, GNU_LINKONCE_WI)\n+\t   || startswith (sec_name, GNU_LINKONCE_WT))\n     {\n       styp_flags = STYP_DEBUG_INFO;\n     }\n@@ -642,13 +642,13 @@ sec_to_styp_flags (const char *sec_name, flagword sec_flags)\n   long styp_flags = 0;\n   bfd_boolean is_dbg = FALSE;\n \n-  if (CONST_STRNEQ (sec_name, DOT_DEBUG)\n-      || CONST_STRNEQ (sec_name, DOT_ZDEBUG)\n+  if (startswith (sec_name, DOT_DEBUG)\n+      || startswith (sec_name, DOT_ZDEBUG)\n #ifdef COFF_LONG_SECTION_NAMES\n-      || CONST_STRNEQ (sec_name, GNU_LINKONCE_WI)\n-      || CONST_STRNEQ (sec_name, GNU_LINKONCE_WT)\n+      || startswith (sec_name, GNU_LINKONCE_WI)\n+      || startswith (sec_name, GNU_LINKONCE_WT)\n #endif\n-      || CONST_STRNEQ (sec_name, \".stab\"))\n+      || startswith (sec_name, \".stab\"))\n     is_dbg = TRUE;\n \n   /* caution: there are at least three groups of symbols that have\n@@ -843,16 +843,16 @@ styp_to_sec_flags (bfd *abfd,\n #endif\n \tsec_flags |= SEC_ALLOC;\n     }\n-  else if (CONST_STRNEQ (name, DOT_DEBUG)\n-\t   || CONST_STRNEQ (name, DOT_ZDEBUG)\n+  else if (startswith (name, DOT_DEBUG)\n+\t   || startswith (name, DOT_ZDEBUG)\n #ifdef _COMMENT\n \t   || strcmp (name, _COMMENT) == 0\n #endif\n #ifdef COFF_LONG_SECTION_NAMES\n-\t   || CONST_STRNEQ (name, GNU_LINKONCE_WI)\n-\t   || CONST_STRNEQ (name, GNU_LINKONCE_WT)\n+\t   || startswith (name, GNU_LINKONCE_WI)\n+\t   || startswith (name, GNU_LINKONCE_WT)\n #endif\n-\t   || CONST_STRNEQ (name, \".stab\"))\n+\t   || startswith (name, \".stab\"))\n     {\n #ifdef COFF_PAGE_SIZE\n       sec_flags |= SEC_DEBUGGING;\n@@ -880,8 +880,8 @@ styp_to_sec_flags (bfd *abfd,\n #endif /* STYP_SDATA */\n \n   if ((bfd_applicable_section_flags (abfd) & SEC_SMALL_DATA) != 0\n-      && (CONST_STRNEQ (name, \".sbss\")\n-\t  || CONST_STRNEQ (name, \".sdata\")))\n+      && (startswith (name, \".sbss\")\n+\t  || startswith (name, \".sdata\")))\n     sec_flags |= SEC_SMALL_DATA;\n \n #if defined (COFF_LONG_SECTION_NAMES) && defined (COFF_SUPPORT_GNU_LINKONCE)\n@@ -891,7 +891,7 @@ styp_to_sec_flags (bfd *abfd,\n      The symbols will be defined as weak, so that multiple definitions\n      are permitted.  The GNU linker extension is to actually discard\n      all but one of the sections.  */\n-  if (CONST_STRNEQ (name, \".gnu.linkonce\"))\n+  if (startswith (name, \".gnu.linkonce\"))\n     sec_flags |= SEC_LINK_ONCE | SEC_LINK_DUPLICATES_DISCARD;\n #endif\n \n@@ -1203,18 +1203,18 @@ styp_to_sec_flags (bfd *abfd,\n   bfd_boolean result = TRUE;\n   bfd_boolean is_dbg = FALSE;\n \n-  if (CONST_STRNEQ (name, DOT_DEBUG)\n-      || CONST_STRNEQ (name, DOT_ZDEBUG)\n+  if (startswith (name, DOT_DEBUG)\n+      || startswith (name, DOT_ZDEBUG)\n #ifdef COFF_LONG_SECTION_NAMES\n-      || CONST_STRNEQ (name, GNU_LINKONCE_WI)\n-      || CONST_STRNEQ (name, GNU_LINKONCE_WT)\n+      || startswith (name, GNU_LINKONCE_WI)\n+      || startswith (name, GNU_LINKONCE_WT)\n       /* FIXME: These definitions ought to be in a header file.  */\n #define GNU_DEBUGLINK\t\t\".gnu_debuglink\"\n #define GNU_DEBUGALTLINK\t\".gnu_debugaltlink\"\n-      || CONST_STRNEQ (name, GNU_DEBUGLINK)\n-      || CONST_STRNEQ (name, GNU_DEBUGALTLINK)\n+      || startswith (name, GNU_DEBUGLINK)\n+      || startswith (name, GNU_DEBUGALTLINK)\n #endif\n-      || CONST_STRNEQ (name, \".stab\"))\n+      || startswith (name, \".stab\"))\n     is_dbg = TRUE;\n   /* Assume read only unless IMAGE_SCN_MEM_WRITE is specified.  */\n   sec_flags = SEC_READONLY;\n@@ -1347,8 +1347,8 @@ styp_to_sec_flags (bfd *abfd,\n     }\n \n   if ((bfd_applicable_section_flags (abfd) & SEC_SMALL_DATA) != 0\n-      && (CONST_STRNEQ (name, \".sbss\")\n-\t  || CONST_STRNEQ (name, \".sdata\")))\n+      && (startswith (name, \".sbss\")\n+\t  || startswith (name, \".sdata\")))\n     sec_flags |= SEC_SMALL_DATA;\n \n #if defined (COFF_LONG_SECTION_NAMES) && defined (COFF_SUPPORT_GNU_LINKONCE)\n@@ -1358,7 +1358,7 @@ styp_to_sec_flags (bfd *abfd,\n      The symbols will be defined as weak, so that multiple definitions\n      are permitted.  The GNU linker extension is to actually discard\n      all but one of the sections.  */\n-  if (CONST_STRNEQ (name, \".gnu.linkonce\"))\n+  if (startswith (name, \".gnu.linkonce\"))\n     sec_flags |= SEC_LINK_ONCE | SEC_LINK_DUPLICATES_DISCARD;\n #endif\n \n@@ -1679,7 +1679,7 @@ Special entry points for gdb to swap in coff symbol table parts:\n .{* Macro: Returns true if the bfd is a PE executable as opposed to a\n .   PE object file.  *}\n .#define bfd_pei_p(abfd) \\\n-.  (CONST_STRNEQ ((abfd)->xvec->name, \"pei-\"))\n+.  (startswith ((abfd)->xvec->name, \"pei-\"))\n */\n \n /* See whether the magic number matches.  */"
    },
    {
      "sha": "f493978815e0d91a94e5c45baeba2cacb37a9cc0",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2635,7 +2635,7 @@ _bfd_coff_section_already_linked (bfd *abfd,\n     key = s_comdat->name;\n   else\n     {\n-      if (CONST_STRNEQ (name, \".gnu.linkonce.\")\n+      if (startswith (name, \".gnu.linkonce.\")\n \t  && (key = strchr (name + sizeof (\".gnu.linkonce.\") - 1, '.')) != NULL)\n \tkey++;\n       else\n@@ -2995,10 +2995,10 @@ coff_gc_sweep (bfd *abfd ATTRIBUTE_UNUSED, struct bfd_link_info *info)\n \t  if ((o->flags & (SEC_DEBUGGING | SEC_LINKER_CREATED)) != 0\n \t      || (o->flags & (SEC_ALLOC | SEC_LOAD | SEC_RELOC)) == 0)\n \t    o->gc_mark = 1;\n-\t  else if (CONST_STRNEQ (o->name, \".idata\")\n-\t\t   || CONST_STRNEQ (o->name, \".pdata\")\n-\t\t   || CONST_STRNEQ (o->name, \".xdata\")\n-\t\t   || CONST_STRNEQ (o->name, \".rsrc\"))\n+\t  else if (startswith (o->name, \".idata\")\n+\t\t   || startswith (o->name, \".pdata\")\n+\t\t   || startswith (o->name, \".xdata\")\n+\t\t   || startswith (o->name, \".rsrc\"))\n \t    o->gc_mark = 1;\n \n \t  if (o->gc_mark)\n@@ -3109,9 +3109,9 @@ bfd_coff_gc_sections (bfd *abfd ATTRIBUTE_UNUSED, struct bfd_link_info *info)\n       for (o = sub->sections; o != NULL; o = o->next)\n \t{\n \t  if (((o->flags & (SEC_EXCLUDE | SEC_KEEP)) == SEC_KEEP\n-\t       || CONST_STRNEQ (o->name, \".vectors\")\n-\t       || CONST_STRNEQ (o->name, \".ctors\")\n-\t       || CONST_STRNEQ (o->name, \".dtors\"))\n+\t       || startswith (o->name, \".vectors\")\n+\t       || startswith (o->name, \".ctors\")\n+\t       || startswith (o->name, \".dtors\"))\n \t      && !o->gc_mark)\n \t    {\n \t      if (!_bfd_coff_gc_mark (info, o, _bfd_coff_gc_mark_hook))"
    },
    {
      "sha": "05c6fff746c8f371774956fa6884258cae375590",
      "filename": "bfd/cofflink.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/cofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/cofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cofflink.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -397,7 +397,7 @@ coff_link_add_symbols (bfd *abfd,\n \t\t  || classification == COFF_SYMBOL_PE_SECTION)\n \t      && coff_section_data (abfd, section) != NULL\n \t      && coff_section_data (abfd, section)->comdat != NULL\n-\t      && CONST_STRNEQ (name, \"??_\")\n+\t      && startswith (name, \"??_\")\n \t      && strcmp (name, coff_section_data (abfd, section)->comdat->name) == 0)\n \t    {\n \t      if (*sym_hash == NULL)\n@@ -546,7 +546,7 @@ coff_link_add_symbols (bfd *abfd,\n \t  asection *stab;\n \n \t  for (stab = abfd->sections; stab; stab = stab->next)\n-\t    if (CONST_STRNEQ (stab->name, \".stab\")\n+\t    if (startswith (stab->name, \".stab\")\n \t\t&& (!stab->name[5]\n \t\t    || (stab->name[5] == '.' && ISDIGIT (stab->name[6]))))\n \t    {\n@@ -1274,7 +1274,7 @@ process_embedded_commands (bfd *output_bfd,\n \t  s++;\n \t  continue;\n \t}\n-      if (CONST_STRNEQ (s, \"-attr\"))\n+      if (startswith (s, \"-attr\"))\n \t{\n \t  char *name;\n \t  char *attribs;\n@@ -1314,14 +1314,14 @@ process_embedded_commands (bfd *output_bfd,\n \t\tasec->flags |= SEC_READONLY;\n \t    }\n \t}\n-      else if (CONST_STRNEQ (s, \"-heap\"))\n+      else if (startswith (s, \"-heap\"))\n \ts = dores_com (s + 5, output_bfd, 1);\n \n-      else if (CONST_STRNEQ (s, \"-stack\"))\n+      else if (startswith (s, \"-stack\"))\n \ts = dores_com (s + 6, output_bfd, 0);\n \n       /* GNU extension for aligned commons.  */\n-      else if (CONST_STRNEQ (s, \"-aligncomm:\"))\n+      else if (startswith (s, \"-aligncomm:\"))\n \t{\n \t  /* Common symbols must be aligned on reading, as it\n \t  is too late to do anything here, after they have"
    },
    {
      "sha": "054ea08bb14fc6d4f7f42623fa6a752fca593ba1",
      "filename": "bfd/compress.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/compress.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/compress.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/compress.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -431,7 +431,7 @@ bfd_is_section_compressed_with_header (bfd *abfd, sec_ptr sec,\n       if (compression_header_size == 0)\n \t/* In this case, it should be \"ZLIB\" followed by the uncompressed\n \t   section size, 8 bytes in big-endian order.  */\n-\tcompressed = CONST_STRNEQ ((char*) header , \"ZLIB\");\n+\tcompressed = startswith ((char*) header , \"ZLIB\");\n       else\n \tcompressed = TRUE;\n     }\n@@ -536,7 +536,7 @@ bfd_init_section_decompress_status (bfd *abfd, sec_ptr sec)\n     {\n       /* In this case, it should be \"ZLIB\" followed by the uncompressed\n \t section size, 8 bytes in big-endian order.  */\n-      if (! CONST_STRNEQ ((char*) header, \"ZLIB\"))\n+      if (! startswith ((char*) header, \"ZLIB\"))\n \t{\n \t  bfd_set_error (bfd_error_wrong_format);\n \t  return FALSE;"
    },
    {
      "sha": "9f895b1a20a7b43d550180aba5df1073150b297f",
      "filename": "bfd/dwarf2.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/dwarf2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/dwarf2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/dwarf2.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -4234,7 +4234,7 @@ find_debug_info (bfd *abfd, const struct dwarf_debug_section *debug_sections,\n \t}\n \n       for (msec = abfd->sections; msec != NULL; msec = msec->next)\n-\tif (CONST_STRNEQ (msec->name, GNU_LINKONCE_INFO))\n+\tif (startswith (msec->name, GNU_LINKONCE_INFO))\n \t  return msec;\n \n       return NULL;\n@@ -4250,7 +4250,7 @@ find_debug_info (bfd *abfd, const struct dwarf_debug_section *debug_sections,\n       if (look != NULL && strcmp (msec->name, look) == 0)\n \treturn msec;\n \n-      if (CONST_STRNEQ (msec->name, GNU_LINKONCE_INFO))\n+      if (startswith (msec->name, GNU_LINKONCE_INFO))\n \treturn msec;\n     }\n \n@@ -4375,7 +4375,7 @@ place_sections (bfd *orig_bfd, struct dwarf2_debug *stash)\n \t    continue;\n \n \t  is_debug_info = (strcmp (sect->name, debug_info_name) == 0\n-\t\t\t   || CONST_STRNEQ (sect->name, GNU_LINKONCE_INFO));\n+\t\t\t   || startswith (sect->name, GNU_LINKONCE_INFO));\n \n \t  if (!((sect->flags & SEC_ALLOC) != 0 && abfd == orig_bfd)\n \t      && !is_debug_info)\n@@ -4419,7 +4419,7 @@ place_sections (bfd *orig_bfd, struct dwarf2_debug *stash)\n \t\tcontinue;\n \n \t      is_debug_info = (strcmp (sect->name, debug_info_name) == 0\n-\t\t\t       || CONST_STRNEQ (sect->name, GNU_LINKONCE_INFO));\n+\t\t\t       || startswith (sect->name, GNU_LINKONCE_INFO));\n \n \t      if (!((sect->flags & SEC_ALLOC) != 0 && abfd == orig_bfd)\n \t\t  && !is_debug_info)"
    },
    {
      "sha": "dc12b180adbf322136d3b0795687aa23bc0dd574",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2866,7 +2866,7 @@ _bfd_ecoff_slurp_armap (bfd *abfd)\n      bfd_slurp_armap, but that seems inappropriate since no other\n      target uses this format.  Instead, we check directly for a COFF\n      armap.  */\n-  if (CONST_STRNEQ (nextname, \"/               \"))\n+  if (startswith (nextname, \"/               \"))\n     return bfd_slurp_armap (abfd);\n \n   /* See if the first element is an armap.  */"
    },
    {
      "sha": "752c1210c27bba0bfb3443738af5ad00a70ebc10",
      "filename": "bfd/elf-m10300.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf-m10300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf-m10300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-m10300.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -5070,7 +5070,7 @@ _bfd_mn10300_elf_size_dynamic_sections (bfd * output_bfd,\n \t  /* Remember whether there is a PLT.  */\n \t  ;\n \t}\n-      else if (CONST_STRNEQ (name, \".rela\"))\n+      else if (startswith (name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {\n@@ -5084,7 +5084,7 @@ _bfd_mn10300_elf_size_dynamic_sections (bfd * output_bfd,\n \t      s->reloc_count = 0;\n \t    }\n \t}\n-      else if (! CONST_STRNEQ (name, \".got\")\n+      else if (! startswith (name, \".got\")\n \t       && ! streq (name, \".dynbss\"))\n \t/* It's not one of our sections, so don't allocate space.  */\n \tcontinue;"
    },
    {
      "sha": "3f9927072ef6fc05124c11eb7a28e417f3443120",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1113,7 +1113,7 @@ _bfd_elf_make_section_from_shdr (bfd *abfd,\n      The symbols will be defined as weak, so that multiple definitions\n      are permitted.  The GNU linker extension is to actually discard\n      all but one of the sections.  */\n-  if (CONST_STRNEQ (name, \".gnu.linkonce\")\n+  if (startswith (name, \".gnu.linkonce\")\n       && elf_next_in_group (newsect) == NULL)\n     flags |= SEC_LINK_ONCE | SEC_LINK_DUPLICATES_DISCARD;\n \n@@ -3942,7 +3942,7 @@ assign_section_numbers (bfd *abfd, struct bfd_link_info *link_info)\n \t     string section.  We look for a section with the same name\n \t     but without the trailing ``str'', and set its sh_link\n \t     field to point to this section.  */\n-\t  if (CONST_STRNEQ (sec->name, \".stab\")\n+\t  if (startswith (sec->name, \".stab\")\n \t      && strcmp (sec->name + strlen (sec->name) - 3, \"str\") == 0)\n \t    {\n \t      size_t len;\n@@ -10190,7 +10190,7 @@ elfcore_grok_win32pstatus (bfd *abfd, Elf_Internal_Note *note)\n   if (note->descsz < 4)\n     return TRUE;\n \n-  if (! CONST_STRNEQ (note->namedata, \"win32\"))\n+  if (! startswith (note->namedata, \"win32\"))\n     return TRUE;\n \n   type = bfd_get_32 (abfd, note->descdata);"
    },
    {
      "sha": "bf0be0c881e538a3e7c6a9bd1cba89b60cb10775",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -5961,7 +5961,7 @@ cmse_scan (bfd *input_bfd, struct elf32_arm_link_hash_table *htab,\n \t  sym_name = bfd_elf_string_from_elf_section (input_bfd,\n \t\t\t\t\t\t      symtab_hdr->sh_link,\n \t\t\t\t\t\t      cmse_sym->st_name);\n-\t  if (!sym_name || !CONST_STRNEQ (sym_name, CMSE_PREFIX))\n+\t  if (!sym_name || !startswith (sym_name, CMSE_PREFIX))\n \t    continue;\n \n \t  /* Special symbol with local binding.  */\n@@ -5971,7 +5971,7 @@ cmse_scan (bfd *input_bfd, struct elf32_arm_link_hash_table *htab,\n \t{\n \t  cmse_hash = elf32_arm_hash_entry (sym_hashes[i - ext_start]);\n \t  sym_name = (char *) cmse_hash->root.root.root.string;\n-\t  if (!CONST_STRNEQ (sym_name, CMSE_PREFIX))\n+\t  if (!startswith (sym_name, CMSE_PREFIX))\n \t    continue;\n \n \t  /* Special symbol has incorrect binding or type.  */\n@@ -15847,7 +15847,7 @@ elf32_arm_gc_mark_extra_sections (struct bfd_link_info *info,\n \n \t\t  /* Assume it is a special symbol.  If not, cmse_scan will\n \t\t     warn about it and user can do something about it.  */\n-\t\t  if (CONST_STRNEQ (cmse_hash->root.root.root.string,\n+\t\t  if (startswith (cmse_hash->root.root.root.string,\n \t\t\t\t    CMSE_PREFIX))\n \t\t    {\n \t\t      cmse_sec = cmse_hash->root.root.u.def.section;\n@@ -16902,7 +16902,7 @@ elf32_arm_size_dynamic_sections (bfd * output_bfd ATTRIBUTE_UNUSED,\n \t  /* Remember whether there is a PLT.  */\n \t  ;\n \t}\n-      else if (CONST_STRNEQ (name, \".rel\"))\n+      else if (startswith (name, \".rel\"))\n \t{\n \t  if (s->size != 0)\n \t    {\n@@ -17564,8 +17564,8 @@ elf32_arm_final_write_processing (bfd *abfd)\n static bfd_boolean\n is_arm_elf_unwind_section_name (bfd * abfd ATTRIBUTE_UNUSED, const char * name)\n {\n-  return (CONST_STRNEQ (name, ELF_STRING_ARM_unwind)\n-\t  || CONST_STRNEQ (name, ELF_STRING_ARM_unwind_once));\n+  return (startswith (name, ELF_STRING_ARM_unwind)\n+\t  || startswith (name, ELF_STRING_ARM_unwind_once));\n }\n \n "
    },
    {
      "sha": "a0cb1661b9a5dddb90bb63b958703b1fba47da2a",
      "filename": "bfd/elf32-bfin.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-bfin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-bfin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-bfin.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -5186,7 +5186,7 @@ bfin_size_dynamic_sections (bfd * output_bfd ATTRIBUTE_UNUSED,\n \n       strip = FALSE;\n \n-       if (CONST_STRNEQ (name, \".rela\"))\n+       if (startswith (name, \".rela\"))\n \t{\n \t  if (s->size == 0)\n \t    {\n@@ -5210,7 +5210,7 @@ bfin_size_dynamic_sections (bfd * output_bfd ATTRIBUTE_UNUSED,\n \t      s->reloc_count = 0;\n \t    }\n \t}\n-      else if (! CONST_STRNEQ (name, \".got\"))\n+      else if (! startswith (name, \".got\"))\n \t{\n \t  /* It's not one of our sections, so don't allocate space.  */\n \t  continue;"
    },
    {
      "sha": "4c327d511ed7c96af7b30475042a572c4d5f1473",
      "filename": "bfd/elf32-cr16.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-cr16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-cr16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-cr16.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2439,7 +2439,7 @@ _bfd_cr16_elf_size_dynamic_sections (bfd * output_bfd,\n \t  /* Remember whether there is a PLT.  */\n \t  ;\n \t}\n-      else if (CONST_STRNEQ (name, \".rela\"))\n+      else if (startswith (name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {\n@@ -2453,7 +2453,7 @@ _bfd_cr16_elf_size_dynamic_sections (bfd * output_bfd,\n \t      s->reloc_count = 0;\n \t    }\n \t}\n-      else if (! CONST_STRNEQ (name, \".got\")\n+      else if (! startswith (name, \".got\")\n \t       && strcmp (name, \".dynbss\") != 0)\n \t/* It's not one of our sections, so don't allocate space.  */\n \tcontinue;"
    },
    {
      "sha": "080f95849b065dfce6a536e94b41b5d1454e1e38",
      "filename": "bfd/elf32-cris.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-cris.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-cris.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-cris.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -3593,7 +3593,7 @@ elf_cris_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  s->size += htab->dtpmod_refcount != 0\n \t    ? 8 : 0;\n \t}\n-      else if (CONST_STRNEQ (name, \".rela\"))\n+      else if (startswith (name, \".rela\"))\n \t{\n \t  if (strcmp (name, \".rela.got\") == 0\n \t      && htab->dtpmod_refcount != 0\n@@ -3612,7 +3612,7 @@ elf_cris_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t      s->reloc_count = 0;\n \t    }\n \t}\n-      else if (! CONST_STRNEQ (name, \".got\")\n+      else if (! startswith (name, \".got\")\n \t       && strcmp (name, \".dynbss\") != 0\n \t       && s != htab->root.sdynrelro)\n \t{"
    },
    {
      "sha": "4e6db39cf409066e504394b812160524903c4e10",
      "filename": "bfd/elf32-csky.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-csky.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2045,7 +2045,7 @@ csky_elf_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  if (htab->elf.hplt != NULL)\n \t    strip_section = FALSE;\n \t}\n-      else if (CONST_STRNEQ (bfd_section_name (s), \".rel\") )\n+      else if (startswith (bfd_section_name (s), \".rel\") )\n \t{\n \t  if (s->size != 0 )\n \t    relocs = TRUE;"
    },
    {
      "sha": "ec354c88ff24696886704b6a140fbf53ee04df29",
      "filename": "bfd/elf32-hppa.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-hppa.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2232,7 +2232,7 @@ elf32_hppa_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t       || sec == htab->etab.sdynbss\n \t       || sec == htab->etab.sdynrelro)\n \t;\n-      else if (CONST_STRNEQ (bfd_section_name (sec), \".rela\"))\n+      else if (startswith (bfd_section_name (sec), \".rela\"))\n \t{\n \t  if (sec->size != 0)\n \t    {"
    },
    {
      "sha": "b29be24878e7d15a10f26bb26a347c9217ebaa9b",
      "filename": "bfd/elf32-iq2000.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-iq2000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-iq2000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-iq2000.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -507,9 +507,9 @@ iq2000_elf_check_relocs (bfd *abfd,\n \n \tcase R_IQ2000_32:\n \t  /* For debug section, change to special harvard-aware relocations.  */\n-\t  if (CONST_STRNEQ (sec->name, \".debug\")\n-\t      || CONST_STRNEQ (sec->name, \".stab\")\n-\t      || CONST_STRNEQ (sec->name, \".eh_frame\"))\n+\t  if (startswith (sec->name, \".debug\")\n+\t      || startswith (sec->name, \".stab\")\n+\t      || startswith (sec->name, \".eh_frame\"))\n \t    {\n \t      ((Elf_Internal_Rela *) rel)->r_info\n \t\t= ELF32_R_INFO (ELF32_R_SYM (rel->r_info), R_IQ2000_32_DEBUG);"
    },
    {
      "sha": "9d72150ccc1a525a09ee5bd98152988d0092256e",
      "filename": "bfd/elf32-lm32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-lm32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-lm32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-lm32.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2020,7 +2020,7 @@ lm32_elf_size_dynamic_sections (bfd *output_bfd,\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (CONST_STRNEQ (bfd_section_name (s), \".rela\"))\n+      else if (startswith (bfd_section_name (s), \".rela\"))\n \t{\n \t  if (s->size != 0 && s != htab->root.srelplt)\n \t    relocs = TRUE;"
    },
    {
      "sha": "95e0c17bc5c71dad45bda76e45e07323916594e6",
      "filename": "bfd/elf32-m32r.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32r.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2073,7 +2073,7 @@ m32r_elf_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (CONST_STRNEQ (bfd_section_name (s), \".rela\"))\n+      else if (startswith (bfd_section_name (s), \".rela\"))\n \t{\n \t  if (s->size != 0 && s != htab->srelplt)\n \t    relocs = TRUE;"
    },
    {
      "sha": "f2222d0ed68f24165407c252c666e412070cdd03",
      "filename": "bfd/elf32-m68k.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-m68k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-m68k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68k.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -3171,7 +3171,7 @@ elf_m68k_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  /* Remember whether there is a PLT.  */\n \t  ;\n \t}\n-      else if (CONST_STRNEQ (name, \".rela\"))\n+      else if (startswith (name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {\n@@ -3182,7 +3182,7 @@ elf_m68k_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t      s->reloc_count = 0;\n \t    }\n \t}\n-      else if (! CONST_STRNEQ (name, \".got\")\n+      else if (! startswith (name, \".got\")\n \t       && strcmp (name, \".dynbss\") != 0)\n \t{\n \t  /* It's not one of our sections, so don't allocate space.  */"
    },
    {
      "sha": "ac6d37977cc0565675b3440d2c6d853a9e322366",
      "filename": "bfd/elf32-metag.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-metag.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-metag.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-metag.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2847,7 +2847,7 @@ elf_metag_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (CONST_STRNEQ (bfd_section_name (s), \".rela\"))\n+      else if (startswith (bfd_section_name (s), \".rela\"))\n \t{\n \t  if (s->size != 0 && s != htab->etab.srelplt)\n \t    relocs = TRUE;"
    },
    {
      "sha": "eebe74a6791031be5fd16b364d50d22f1cac2e57",
      "filename": "bfd/elf32-msp430.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-msp430.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1855,8 +1855,8 @@ msp430_elf_relax_delete_bytes (bfd * abfd, asection * sec, bfd_vma addr,\n \t\t the start of the next section.  */\n \t      || (isym->st_value == toaddr\n \t\t  && name != NULL\n-\t\t  && (CONST_STRNEQ (name, \".Letext\")\n-\t\t      || CONST_STRNEQ (name, \".LFE\")))))\n+\t\t  && (startswith (name, \".Letext\")\n+\t\t      || startswith (name, \".LFE\")))))\n \t{\n \t  if (debug_relocs)\n \t    printf (\"      adjusting value of local symbol %s from 0x%lx \","
    },
    {
      "sha": "c925bc975e71894756ee0f01df6e0a133ec5e26c",
      "filename": "bfd/elf32-nios2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nios2.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -5825,7 +5825,7 @@ nios2_elf32_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t of the dynobj section names depend upon the input files.  */\n       name = bfd_section_name (s);\n \n-      if (CONST_STRNEQ (name, \".rela\"))\n+      if (startswith (name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {"
    },
    {
      "sha": "82a5b4ac8e255b0f54fe6ed6fde081134319a2da",
      "filename": "bfd/elf32-or1k.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-or1k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-or1k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-or1k.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -3034,7 +3034,7 @@ or1k_elf_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (CONST_STRNEQ (bfd_section_name (s), \".rela\"))\n+      else if (startswith (bfd_section_name (s), \".rela\"))\n \t{\n \t  if (s->size != 0 && s != htab->root.srelplt)\n \t    relocs = TRUE;"
    },
    {
      "sha": "fe8b6fdb7d1bfcdca27c3e6b913bdf1689e1f945",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -5812,7 +5812,7 @@ ppc_elf_size_dynamic_sections (bfd *output_bfd,\n \t{\n \t  strip_section = (s->flags & SEC_KEEP) == 0;\n \t}\n-      else if (CONST_STRNEQ (bfd_section_name (s), \".rela\"))\n+      else if (startswith (bfd_section_name (s), \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {"
    },
    {
      "sha": "55e61031a04c491262471d3dca0f6952808cbcd4",
      "filename": "bfd/elf32-s390.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-s390.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-s390.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-s390.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1919,7 +1919,7 @@ elf_s390_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (CONST_STRNEQ (bfd_section_name (s), \".rela\"))\n+      else if (startswith (bfd_section_name (s), \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    relocs = TRUE;"
    },
    {
      "sha": "e34169e989f576766993259974b9337867ceadb3",
      "filename": "bfd/elf32-score.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-score.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-score.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-score.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -3282,7 +3282,7 @@ s3_bfd_score_elf_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *i\n \t of the dynobj section names depend upon the input files.  */\n       name = bfd_section_name (s);\n \n-      if (CONST_STRNEQ (name, \".rel\"))\n+      if (startswith (name, \".rel\"))\n \t{\n \t  if (s->size == 0)\n \t    {\n@@ -3320,7 +3320,7 @@ s3_bfd_score_elf_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *i\n \t\ts->reloc_count = 0;\n \t    }\n \t}\n-      else if (CONST_STRNEQ (name, \".got\"))\n+      else if (startswith (name, \".got\"))\n \t{\n \t  /* s3_bfd_score_elf_always_size_sections() has already done\n \t     most of the work, but some symbols may have been mapped\n@@ -3333,7 +3333,7 @@ s3_bfd_score_elf_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *i\n \t     of .text section. So put a dummy. XXX  */\n \t  s->size += SCORE_FUNCTION_STUB_SIZE;\n \t}\n-      else if (! CONST_STRNEQ (name, \".init\"))\n+      else if (! startswith (name, \".init\"))\n \t{\n \t  /* It's not one of our sections, so don't allocate space.  */\n \t  continue;"
    },
    {
      "sha": "9e1b7dae0cb415f84fc2318c4816e3448cb21855",
      "filename": "bfd/elf32-score7.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-score7.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-score7.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-score7.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -3090,7 +3090,7 @@ s7_bfd_score_elf_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *i\n \t of the dynobj section names depend upon the input files.  */\n       name = bfd_section_name (s);\n \n-      if (CONST_STRNEQ (name, \".rel\"))\n+      if (startswith (name, \".rel\"))\n \t{\n \t  if (s->size == 0)\n \t    {\n@@ -3128,7 +3128,7 @@ s7_bfd_score_elf_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *i\n \t\ts->reloc_count = 0;\n \t    }\n \t}\n-      else if (CONST_STRNEQ (name, \".got\"))\n+      else if (startswith (name, \".got\"))\n \t{\n \t  /* s7_bfd_score_elf_always_size_sections() has already done\n \t     most of the work, but some symbols may have been mapped\n@@ -3141,7 +3141,7 @@ s7_bfd_score_elf_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *i\n \t     of .text section. So put a dummy. XXX  */\n \t  s->size += SCORE_FUNCTION_STUB_SIZE;\n \t}\n-      else if (! CONST_STRNEQ (name, \".init\"))\n+      else if (! startswith (name, \".init\"))\n \t{\n \t  /* It's not one of our sections, so don't allocate space.  */\n \t  continue;"
    },
    {
      "sha": "10145505c3e9e9dcfec89ef94e5fac2d1e7a2e3b",
      "filename": "bfd/elf32-sh.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-sh.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -3152,7 +3152,7 @@ sh_elf_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (CONST_STRNEQ (bfd_section_name (s), \".rela\"))\n+      else if (startswith (bfd_section_name (s), \".rela\"))\n \t{\n \t  if (s->size != 0 && s != htab->root.srelplt && s != htab->srelplt2)\n \t    relocs = TRUE;"
    },
    {
      "sha": "53ec572fab9e40fd01796269651d1dbd98732a3d",
      "filename": "bfd/elf32-tic6x.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-tic6x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-tic6x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-tic6x.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1938,8 +1938,8 @@ elf32_tic6x_gc_mark_extra_sections (struct bfd_link_info *info,\n static bfd_boolean\n is_tic6x_elf_unwind_section_name (const char *name)\n {\n-  return (CONST_STRNEQ (name, ELF_STRING_C6000_unwind)\n-\t  || CONST_STRNEQ (name, ELF_STRING_C6000_unwind_once));\n+  return (startswith (name, ELF_STRING_C6000_unwind)\n+\t  || startswith (name, ELF_STRING_C6000_unwind_once));\n }\n \n \n@@ -3284,7 +3284,7 @@ elf32_tic6x_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *info)\n \t  if (s == htab->elf.splt && s->size > 0)\n \t    s->size = (s->size + 31) & ~(bfd_vma)31;\n \t}\n-      else if (CONST_STRNEQ (bfd_section_name (s), \".rela\"))\n+      else if (startswith (bfd_section_name (s), \".rela\"))\n \t{\n \t  if (s->size != 0\n \t      && s != htab->elf.srelplt)"
    },
    {
      "sha": "ff83062a37aa6e09ff3f3cc06b1c394faa2373df",
      "filename": "bfd/elf32-vax.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-vax.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-vax.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-vax.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1082,7 +1082,7 @@ elf_vax_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *info)\n \t  /* Remember whether there is a PLT.  */\n \t  ;\n \t}\n-      else if (CONST_STRNEQ (name, \".rela\"))\n+      else if (startswith (name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {\n@@ -1094,7 +1094,7 @@ elf_vax_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *info)\n \t      s->reloc_count = 0;\n \t    }\n \t}\n-      else if (! CONST_STRNEQ (name, \".got\")\n+      else if (! startswith (name, \".got\")\n \t       && strcmp (name, \".dynbss\") != 0)\n \t{\n \t  /* It's not one of our sections, so don't allocate space.  */"
    },
    {
      "sha": "abc244c04cb0989048505af1b6e05f797a13a2de",
      "filename": "bfd/elf32-xtensa.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf32-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xtensa.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1691,7 +1691,7 @@ elf_xtensa_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t of the dynobj section names depend upon the input files.  */\n       name = bfd_section_name (s);\n \n-      if (CONST_STRNEQ (name, \".rela\"))\n+      if (startswith (name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {\n@@ -1705,8 +1705,8 @@ elf_xtensa_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t      s->reloc_count = 0;\n \t    }\n \t}\n-      else if (! CONST_STRNEQ (name, \".plt.\")\n-\t       && ! CONST_STRNEQ (name, \".got.plt.\")\n+      else if (! startswith (name, \".plt.\")\n+\t       && ! startswith (name, \".got.plt.\")\n \t       && strcmp (name, \".got\") != 0\n \t       && strcmp (name, \".plt\") != 0\n \t       && strcmp (name, \".got.plt\") != 0\n@@ -11144,8 +11144,8 @@ xtensa_is_property_section (asection *sec)\n static bfd_boolean\n xtensa_is_insntable_section (asection *sec)\n {\n-  if (CONST_STRNEQ (sec->name, XTENSA_INSN_SEC_NAME)\n-      || CONST_STRNEQ (sec->name, \".gnu.linkonce.x.\"))\n+  if (startswith (sec->name, XTENSA_INSN_SEC_NAME)\n+      || startswith (sec->name, \".gnu.linkonce.x.\"))\n     return TRUE;\n \n   return FALSE;\n@@ -11155,8 +11155,8 @@ xtensa_is_insntable_section (asection *sec)\n static bfd_boolean\n xtensa_is_littable_section (asection *sec)\n {\n-  if (CONST_STRNEQ (sec->name, XTENSA_LIT_SEC_NAME)\n-      || CONST_STRNEQ (sec->name, \".gnu.linkonce.p.\"))\n+  if (startswith (sec->name, XTENSA_LIT_SEC_NAME)\n+      || startswith (sec->name, \".gnu.linkonce.p.\"))\n     return TRUE;\n \n   return FALSE;\n@@ -11166,8 +11166,8 @@ xtensa_is_littable_section (asection *sec)\n static bfd_boolean\n xtensa_is_proptable_section (asection *sec)\n {\n-  if (CONST_STRNEQ (sec->name, XTENSA_PROP_SEC_NAME)\n-      || CONST_STRNEQ (sec->name, \".gnu.linkonce.prop.\"))\n+  if (startswith (sec->name, XTENSA_PROP_SEC_NAME)\n+      || startswith (sec->name, \".gnu.linkonce.prop.\"))\n     return TRUE;\n \n   return FALSE;\n@@ -11281,7 +11281,7 @@ xtensa_property_section_name (asection *sec, const char *base_name,\n       suffix = sec->name + linkonce_len;\n       /* For backward compatibility, replace \"t.\" instead of inserting\n \t the new linkonce_kind (but not for \"prop\" sections).  */\n-      if (CONST_STRNEQ (suffix, \"t.\") && linkonce_kind[1] == '.')\n+      if (startswith (suffix, \"t.\") && linkonce_kind[1] == '.')\n \tsuffix += 2;\n       strcat (prop_sec_name + linkonce_len, suffix);\n     }\n@@ -11396,7 +11396,7 @@ xtensa_callback_required_dependence (bfd *abfd,\n   /* \".plt*\" sections have no explicit relocations but they contain L32R\n      instructions that reference the corresponding \".got.plt*\" sections.  */\n   if ((sec->flags & SEC_LINKER_CREATED) != 0\n-      && CONST_STRNEQ (sec->name, \".plt\"))\n+      && startswith (sec->name, \".plt\"))\n     {\n       asection *sgotplt;\n "
    },
    {
      "sha": "6fffc438fc4da1b0507968610b8aebc95a322614",
      "filename": "bfd/elf64-alpha.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-alpha.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2859,7 +2859,7 @@ elf64_alpha_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t of the dynobj section names depend upon the input files.  */\n       name = bfd_section_name (s);\n \n-      if (CONST_STRNEQ (name, \".rela\"))\n+      if (startswith (name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {\n@@ -2873,7 +2873,7 @@ elf64_alpha_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t      s->reloc_count = 0;\n \t    }\n \t}\n-      else if (! CONST_STRNEQ (name, \".got\")\n+      else if (! startswith (name, \".got\")\n \t       && strcmp (name, \".plt\") != 0\n \t       && strcmp (name, \".dynbss\") != 0)\n \t{\n@@ -2890,7 +2890,7 @@ elf64_alpha_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t     linker does that before adjust_dynamic_symbol is called, and\n \t     it is that function which decides whether anything needs to\n \t     go into these sections.  */\n-\t  if (!CONST_STRNEQ (name, \".got\"))\n+\t  if (!startswith (name, \".got\"))\n \t    s->flags |= SEC_EXCLUDE;\n \t}\n       else if ((s->flags & SEC_HAS_CONTENTS) != 0)"
    },
    {
      "sha": "0ce85cced143b89870febd26ae7c0f7233736acf",
      "filename": "bfd/elf64-hppa.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-hppa.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1754,13 +1754,13 @@ elf64_hppa_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *info)\n \t  ;\n \t}\n       else if (strcmp (name, \".opd\") == 0\n-\t       || CONST_STRNEQ (name, \".dlt\")\n+\t       || startswith (name, \".dlt\")\n \t       || strcmp (name, \".stub\") == 0\n \t       || strcmp (name, \".got\") == 0)\n \t{\n \t  /* Strip this section if we don't need it; see the comment below.  */\n \t}\n-      else if (CONST_STRNEQ (name, \".rela\"))\n+      else if (startswith (name, \".rela\"))\n \t{\n \t  if (sec->size != 0)\n \t    {"
    },
    {
      "sha": "317253fb9a61696ab7762d3b6feba7bad83e64b8",
      "filename": "bfd/elf64-ia64-vms.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-ia64-vms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-ia64-vms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ia64-vms.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -809,9 +809,9 @@ elf64_ia64_relax_section (bfd *abfd, asection *sec,\n static inline bfd_boolean\n is_unwind_section_name (bfd *abfd ATTRIBUTE_UNUSED, const char *name)\n {\n-  return ((CONST_STRNEQ (name, ELF_STRING_ia64_unwind)\n-\t   && ! CONST_STRNEQ (name, ELF_STRING_ia64_unwind_info))\n-\t  || CONST_STRNEQ (name, ELF_STRING_ia64_unwind_once));\n+  return ((startswith (name, ELF_STRING_ia64_unwind)\n+\t   && ! startswith (name, ELF_STRING_ia64_unwind_info))\n+\t  || startswith (name, ELF_STRING_ia64_unwind_once));\n }\n \n \n@@ -1847,9 +1847,9 @@ get_reloc_section (bfd *abfd,\n   if (srel_name == NULL)\n     return NULL;\n \n-  BFD_ASSERT ((CONST_STRNEQ (srel_name, \".rela\")\n+  BFD_ASSERT ((startswith (srel_name, \".rela\")\n \t       && strcmp (bfd_section_name (sec), srel_name+5) == 0)\n-\t      || (CONST_STRNEQ (srel_name, \".rel\")\n+\t      || (startswith (srel_name, \".rel\")\n \t\t  && strcmp (bfd_section_name (sec), srel_name+4) == 0));\n \n   dynobj = ia64_info->root.dynobj;\n@@ -2745,7 +2745,7 @@ elf64_ia64_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \n \t  if (strcmp (name, \".got.plt\") == 0)\n \t    strip = FALSE;\n-\t  else if (CONST_STRNEQ (name, \".rel\"))\n+\t  else if (startswith (name, \".rel\"))\n \t    {\n \t      if (!strip)\n \t\t{\n@@ -4387,7 +4387,7 @@ elf64_ia64_object_p (bfd *abfd)\n       if (elf_sec_group (sec) == NULL\n \t  && ((sec->flags & (SEC_LINK_ONCE | SEC_CODE | SEC_GROUP))\n \t      == (SEC_LINK_ONCE | SEC_CODE))\n-\t  && CONST_STRNEQ (sec->name, \".gnu.linkonce.t.\"))\n+\t  && startswith (sec->name, \".gnu.linkonce.t.\"))\n \t{\n \t  name = sec->name + 16;\n "
    },
    {
      "sha": "62365e1e4f79924cad96d005a483847595ea06be",
      "filename": "bfd/elf64-mmix.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-mmix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-mmix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-mmix.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2139,7 +2139,7 @@ mmix_elf_add_symbol_hook (bfd *abfd,\n       (*secp)->flags |= SEC_LINKER_CREATED;\n     }\n   else if ((*namep)[0] == '_' && (*namep)[1] == '_' && (*namep)[2] == '.'\n-\t   && CONST_STRNEQ (*namep, MMIX_LOC_SECTION_START_SYMBOL_PREFIX))\n+\t   && startswith (*namep, MMIX_LOC_SECTION_START_SYMBOL_PREFIX))\n     {\n       /* See if we have another one.  */\n       struct bfd_link_hash_entry *h = bfd_link_hash_lookup (info->hash,"
    },
    {
      "sha": "741f510a28d8359b1a53509a727dc0e7d818b407",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -10226,7 +10226,7 @@ ppc64_elf_size_dynamic_sections (bfd *output_bfd,\n \t    /* Not sized yet.  */\n \t    continue;\n \t}\n-      else if (CONST_STRNEQ (s->name, \".rela\"))\n+      else if (startswith (s->name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {"
    },
    {
      "sha": "01dcefed48e41e5a5ccdb34fcee2c2de520e72d1",
      "filename": "bfd/elf64-s390.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-s390.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elf64-s390.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-s390.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1873,7 +1873,7 @@ elf_s390_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (CONST_STRNEQ (bfd_section_name (s), \".rela\"))\n+      else if (startswith (bfd_section_name (s), \".rela\"))\n \t{\n \t  if (s->size != 0 && s != htab->elf.srelplt)\n \t    relocs = TRUE;"
    },
    {
      "sha": "c5db406f2b4ba47568c2ec704d9a6cf05660eda3",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -4129,7 +4129,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n       const char *name;\n \n       name = bfd_section_name (s);\n-      if (CONST_STRNEQ (name, \".gnu.warning.\"))\n+      if (startswith (name, \".gnu.warning.\"))\n \t{\n \t  char *msg;\n \t  bfd_size_type sz;\n@@ -5693,7 +5693,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t  asection *stab;\n \n \t  for (stab = abfd->sections; stab; stab = stab->next)\n-\t    if (CONST_STRNEQ (stab->name, \".stab\")\n+\t    if (startswith (stab->name, \".stab\")\n \t\t&& (!stab->name[5] ||\n \t\t    (stab->name[5] == '.' && ISDIGIT (stab->name[6])))\n \t\t&& (stab->flags & SEC_MERGE) == 0\n@@ -13698,7 +13698,7 @@ _bfd_elf_gc_mark_extra_sections (struct bfd_link_info *info,\n \n \t  if (!debug_frag_seen\n \t      && (isec->flags & SEC_DEBUGGING)\n-\t      && CONST_STRNEQ (isec->name, \".debug_line.\"))\n+\t      && startswith (isec->name, \".debug_line.\"))\n \t    debug_frag_seen = TRUE;\n \t  else if (strcmp (bfd_section_name (isec),\n \t\t\t   \"__patchable_function_entries\") == 0\n@@ -14015,7 +14015,7 @@ bfd_elf_parse_eh_frame_entries (bfd *abfd ATTRIBUTE_UNUSED,\n \n       for (sec = ibfd->sections; sec; sec = sec->next)\n \t{\n-\t  if (CONST_STRNEQ (bfd_section_name (sec), \".eh_frame_entry\")\n+\t  if (startswith (bfd_section_name (sec), \".eh_frame_entry\")\n \t      && init_reloc_cookie_rels (&cookie, info, ibfd, sec))\n \t    {\n \t      _bfd_elf_parse_eh_frame_entry (info, sec, &cookie);\n@@ -14722,7 +14722,7 @@ _bfd_elf_section_already_linked (bfd *abfd,\n   else\n     {\n       /* Otherwise we should have a .gnu.linkonce.<type>.<key> section.  */\n-      if (CONST_STRNEQ (name, \".gnu.linkonce.\")\n+      if (startswith (name, \".gnu.linkonce.\")\n \t  && (key = strchr (name + sizeof (\".gnu.linkonce.\") - 1, '.')) != NULL)\n \tkey++;\n       else\n@@ -14821,10 +14821,10 @@ _bfd_elf_section_already_linked (bfd *abfd,\n      `.gnu.linkonce.r.F' section.  The order of sections in a bfd does not\n      matter as here were are looking only for cross-bfd sections.  */\n \n-  if ((flags & SEC_GROUP) == 0 && CONST_STRNEQ (name, \".gnu.linkonce.r.\"))\n+  if ((flags & SEC_GROUP) == 0 && startswith (name, \".gnu.linkonce.r.\"))\n     for (l = already_linked_list->entry; l != NULL; l = l->next)\n       if ((l->sec->flags & SEC_GROUP) == 0\n-\t  && CONST_STRNEQ (l->sec->name, \".gnu.linkonce.t.\"))\n+\t  && startswith (l->sec->name, \".gnu.linkonce.t.\"))\n \t{\n \t  if (abfd != l->sec->owner)\n \t    sec->output_section = bfd_abs_section_ptr;"
    },
    {
      "sha": "2fee93aa5f95ace156a25d6488e01d2a8c7648d9",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -9047,7 +9047,7 @@ elfNN_aarch64_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (CONST_STRNEQ (bfd_section_name (s), \".rela\"))\n+      else if (startswith (bfd_section_name (s), \".rela\"))\n \t{\n \t  if (s->size != 0 && s != htab->root.srelplt)\n \t    relocs = TRUE;"
    },
    {
      "sha": "281a8375d511c04c3c5a9e8163f49c269e73e965",
      "filename": "bfd/elfnn-ia64.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elfnn-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elfnn-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-ia64.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -893,9 +893,9 @@ is_unwind_section_name (bfd *abfd, const char *name)\n       && !strcmp (name, ELF_STRING_ia64_unwind_hdr))\n     return FALSE;\n \n-  return ((CONST_STRNEQ (name, ELF_STRING_ia64_unwind)\n-\t   && ! CONST_STRNEQ (name, ELF_STRING_ia64_unwind_info))\n-\t  || CONST_STRNEQ (name, ELF_STRING_ia64_unwind_once));\n+  return ((startswith (name, ELF_STRING_ia64_unwind)\n+\t   && ! startswith (name, ELF_STRING_ia64_unwind_info))\n+\t  || startswith (name, ELF_STRING_ia64_unwind_once));\n }\n \n /* Handle an IA-64 specific section when reading an object file.  This\n@@ -3161,7 +3161,7 @@ elfNN_ia64_size_dynamic_sections (bfd *output_bfd ATTRIBUTE_UNUSED,\n \n \t  if (strcmp (name, \".got.plt\") == 0)\n \t    strip = FALSE;\n-\t  else if (CONST_STRNEQ (name, \".rel\"))\n+\t  else if (startswith (name, \".rel\"))\n \t    {\n \t      if (!strip)\n \t\t{\n@@ -4859,7 +4859,7 @@ elfNN_ia64_object_p (bfd *abfd)\n       if (elf_sec_group (sec) == NULL\n \t  && ((sec->flags & (SEC_LINK_ONCE | SEC_CODE | SEC_GROUP))\n \t      == (SEC_LINK_ONCE | SEC_CODE))\n-\t  && CONST_STRNEQ (sec->name, \".gnu.linkonce.t.\"))\n+\t  && startswith (sec->name, \".gnu.linkonce.t.\"))\n \t{\n \t  name = sec->name + 16;\n "
    },
    {
      "sha": "41abf4954dc20ca297f4cc84e5043bcaae488da7",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 26,
      "deletions": 26,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1030,9 +1030,9 @@ static bfd *reldyn_sorting_bfd;\n #define CALL_STUB \".mips16.call.\"\n #define CALL_FP_STUB \".mips16.call.fp.\"\n \n-#define FN_STUB_P(name) CONST_STRNEQ (name, FN_STUB)\n-#define CALL_STUB_P(name) CONST_STRNEQ (name, CALL_STUB)\n-#define CALL_FP_STUB_P(name) CONST_STRNEQ (name, CALL_FP_STUB)\n+#define FN_STUB_P(name) startswith (name, FN_STUB)\n+#define CALL_STUB_P(name) startswith (name, CALL_STUB)\n+#define CALL_FP_STUB_P(name) startswith (name, CALL_FP_STUB)\n \f\n /* The format of the first PLT entry in an O32 executable.  */\n static const bfd_vma mips_o32_exec_plt0_entry[] =\n@@ -7411,7 +7411,7 @@ _bfd_mips_elf_section_from_shdr (bfd *abfd,\n \treturn FALSE;\n       break;\n     case SHT_MIPS_GPTAB:\n-      if (! CONST_STRNEQ (name, \".gptab.\"))\n+      if (! startswith (name, \".gptab.\"))\n \treturn FALSE;\n       break;\n     case SHT_MIPS_UCODE:\n@@ -7434,7 +7434,7 @@ _bfd_mips_elf_section_from_shdr (bfd *abfd,\n \treturn FALSE;\n       break;\n     case SHT_MIPS_CONTENT:\n-      if (! CONST_STRNEQ (name, \".MIPS.content\"))\n+      if (! startswith (name, \".MIPS.content\"))\n \treturn FALSE;\n       break;\n     case SHT_MIPS_OPTIONS:\n@@ -7447,17 +7447,17 @@ _bfd_mips_elf_section_from_shdr (bfd *abfd,\n       flags = (SEC_LINK_ONCE | SEC_LINK_DUPLICATES_SAME_SIZE);\n       break;\n     case SHT_MIPS_DWARF:\n-      if (! CONST_STRNEQ (name, \".debug_\")\n-\t  && ! CONST_STRNEQ (name, \".zdebug_\"))\n+      if (! startswith (name, \".debug_\")\n+\t  && ! startswith (name, \".zdebug_\"))\n \treturn FALSE;\n       break;\n     case SHT_MIPS_SYMBOL_LIB:\n       if (strcmp (name, \".MIPS.symlib\") != 0)\n \treturn FALSE;\n       break;\n     case SHT_MIPS_EVENTS:\n-      if (! CONST_STRNEQ (name, \".MIPS.events\")\n-\t  && ! CONST_STRNEQ (name, \".MIPS.post_rel\"))\n+      if (! startswith (name, \".MIPS.events\")\n+\t  && ! startswith (name, \".MIPS.post_rel\"))\n \treturn FALSE;\n       break;\n     case SHT_MIPS_XHASH:\n@@ -7594,7 +7594,7 @@ _bfd_mips_elf_fake_sections (bfd *abfd, Elf_Internal_Shdr *hdr, asection *sec)\n     }\n   else if (strcmp (name, \".conflict\") == 0)\n     hdr->sh_type = SHT_MIPS_CONFLICT;\n-  else if (CONST_STRNEQ (name, \".gptab.\"))\n+  else if (startswith (name, \".gptab.\"))\n     {\n       hdr->sh_type = SHT_MIPS_GPTAB;\n       hdr->sh_entsize = sizeof (Elf32_External_gptab);\n@@ -7651,7 +7651,7 @@ _bfd_mips_elf_fake_sections (bfd *abfd, Elf_Internal_Shdr *hdr, asection *sec)\n       hdr->sh_type = SHT_MIPS_IFACE;\n       hdr->sh_flags |= SHF_MIPS_NOSTRIP;\n     }\n-  else if (CONST_STRNEQ (name, \".MIPS.content\"))\n+  else if (startswith (name, \".MIPS.content\"))\n     {\n       hdr->sh_type = SHT_MIPS_CONTENT;\n       hdr->sh_flags |= SHF_MIPS_NOSTRIP;\n@@ -7663,20 +7663,20 @@ _bfd_mips_elf_fake_sections (bfd *abfd, Elf_Internal_Shdr *hdr, asection *sec)\n       hdr->sh_entsize = 1;\n       hdr->sh_flags |= SHF_MIPS_NOSTRIP;\n     }\n-  else if (CONST_STRNEQ (name, \".MIPS.abiflags\"))\n+  else if (startswith (name, \".MIPS.abiflags\"))\n     {\n       hdr->sh_type = SHT_MIPS_ABIFLAGS;\n       hdr->sh_entsize = sizeof (Elf_External_ABIFlags_v0);\n     }\n-  else if (CONST_STRNEQ (name, \".debug_\")\n-\t   || CONST_STRNEQ (name, \".zdebug_\"))\n+  else if (startswith (name, \".debug_\")\n+\t   || startswith (name, \".zdebug_\"))\n     {\n       hdr->sh_type = SHT_MIPS_DWARF;\n \n       /* Irix facilities such as libexc expect a single .debug_frame\n \t per executable, the system ones have NOSTRIP set and the linker\n \t doesn't merge sections with different flags so ...  */\n-      if (SGI_COMPAT (abfd) && CONST_STRNEQ (name, \".debug_frame\"))\n+      if (SGI_COMPAT (abfd) && startswith (name, \".debug_frame\"))\n \thdr->sh_flags |= SHF_MIPS_NOSTRIP;\n     }\n   else if (strcmp (name, \".MIPS.symlib\") == 0)\n@@ -7685,8 +7685,8 @@ _bfd_mips_elf_fake_sections (bfd *abfd, Elf_Internal_Shdr *hdr, asection *sec)\n       /* The sh_link and sh_info fields are set in\n \t final_write_processing.  */\n     }\n-  else if (CONST_STRNEQ (name, \".MIPS.events\")\n-\t   || CONST_STRNEQ (name, \".MIPS.post_rel\"))\n+  else if (startswith (name, \".MIPS.events\")\n+\t   || startswith (name, \".MIPS.post_rel\"))\n     {\n       hdr->sh_type = SHT_MIPS_EVENTS;\n       hdr->sh_flags |= SHF_MIPS_NOSTRIP;\n@@ -10007,7 +10007,7 @@ _bfd_mips_elf_size_dynamic_sections (bfd *output_bfd,\n       if ((s->flags & SEC_LINKER_CREATED) == 0)\n \tcontinue;\n \n-      if (CONST_STRNEQ (name, \".rel\"))\n+      if (startswith (name, \".rel\"))\n \t{\n \t  if (s->size != 0)\n \t    {\n@@ -10044,14 +10044,14 @@ _bfd_mips_elf_size_dynamic_sections (bfd *output_bfd,\n \t}\n       else if (bfd_link_executable (info)\n \t       && ! mips_elf_hash_table (info)->use_rld_obj_head\n-\t       && CONST_STRNEQ (name, \".rld_map\"))\n+\t       && startswith (name, \".rld_map\"))\n \t{\n \t  /* We add a room for __rld_map.  It will be filled in by the\n \t     rtld to contain a pointer to the _r_debug structure.  */\n \t  s->size += MIPS_ELF_RLD_MAP_SIZE (output_bfd);\n \t}\n       else if (SGI_COMPAT (output_bfd)\n-\t       && CONST_STRNEQ (name, \".compact_rel\"))\n+\t       && startswith (name, \".compact_rel\"))\n \ts->size += mips_elf_hash_table (info)->compact_rel_size;\n       else if (s == htab->root.splt)\n \t{\n@@ -10063,7 +10063,7 @@ _bfd_mips_elf_size_dynamic_sections (bfd *output_bfd,\n \t      && s->size > 0)\n \t    s->size += 4;\n \t}\n-      else if (! CONST_STRNEQ (name, \".init\")\n+      else if (! startswith (name, \".init\")\n \t       && s != htab->root.sgot\n \t       && s != htab->root.sgotplt\n \t       && s != htab->sstubs\n@@ -12422,7 +12422,7 @@ _bfd_mips_final_write_processing (bfd *abfd)\n \t  BFD_ASSERT ((*hdrpp)->bfd_section != NULL);\n \t  name = bfd_section_name ((*hdrpp)->bfd_section);\n \t  BFD_ASSERT (name != NULL\n-\t\t      && CONST_STRNEQ (name, \".gptab.\"));\n+\t\t      && startswith (name, \".gptab.\"));\n \t  sec = bfd_get_section_by_name (abfd, name + sizeof \".gptab\" - 1);\n \t  BFD_ASSERT (sec != NULL);\n \t  (*hdrpp)->sh_info = elf_section_data (sec)->this_idx;\n@@ -12432,7 +12432,7 @@ _bfd_mips_final_write_processing (bfd *abfd)\n \t  BFD_ASSERT ((*hdrpp)->bfd_section != NULL);\n \t  name = bfd_section_name ((*hdrpp)->bfd_section);\n \t  BFD_ASSERT (name != NULL\n-\t\t      && CONST_STRNEQ (name, \".MIPS.content\"));\n+\t\t      && startswith (name, \".MIPS.content\"));\n \t  sec = bfd_get_section_by_name (abfd,\n \t\t\t\t\t name + sizeof \".MIPS.content\" - 1);\n \t  BFD_ASSERT (sec != NULL);\n@@ -12452,12 +12452,12 @@ _bfd_mips_final_write_processing (bfd *abfd)\n \t  BFD_ASSERT ((*hdrpp)->bfd_section != NULL);\n \t  name = bfd_section_name ((*hdrpp)->bfd_section);\n \t  BFD_ASSERT (name != NULL);\n-\t  if (CONST_STRNEQ (name, \".MIPS.events\"))\n+\t  if (startswith (name, \".MIPS.events\"))\n \t    sec = bfd_get_section_by_name (abfd,\n \t\t\t\t\t   name + sizeof \".MIPS.events\" - 1);\n \t  else\n \t    {\n-\t      BFD_ASSERT (CONST_STRNEQ (name, \".MIPS.post_rel\"));\n+\t      BFD_ASSERT (startswith (name, \".MIPS.post_rel\"));\n \t      sec = bfd_get_section_by_name (abfd,\n \t\t\t\t\t     (name\n \t\t\t\t\t      + sizeof \".MIPS.post_rel\" - 1));\n@@ -15085,7 +15085,7 @@ _bfd_mips_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \t  mdebug_sec = o;\n \t}\n \n-      if (CONST_STRNEQ (o->name, \".gptab.\"))\n+      if (startswith (o->name, \".gptab.\"))\n \t{\n \t  const char *subname;\n \t  unsigned int c;"
    },
    {
      "sha": "c498d1cb70ba59d680cb1e708ff4273bdcf1f4b1",
      "filename": "bfd/elfxx-sparc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elfxx-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elfxx-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-sparc.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2540,7 +2540,7 @@ _bfd_sparc_elf_size_dynamic_sections (bfd *output_bfd,\n \t  /* Strip this section if we don't need it; see the\n \t     comment below.  */\n \t}\n-      else if (CONST_STRNEQ (s->name, \".rela\"))\n+      else if (startswith (s->name, \".rela\"))\n \t{\n \t  if (s->size != 0)\n \t    {"
    },
    {
      "sha": "6ff9fd56ee732a36e35fd0207bee346392d9f01a",
      "filename": "bfd/elfxx-x86.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elfxx-x86.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/elfxx-x86.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -686,13 +686,13 @@ elf_x86_link_hash_table_free (bfd *obfd)\n static bfd_boolean\n elf_i386_is_reloc_section (const char *secname)\n {\n-  return CONST_STRNEQ (secname, \".rel\");\n+  return startswith (secname, \".rel\");\n }\n \n static bfd_boolean\n elf_x86_64_is_reloc_section (const char *secname)\n {\n-  return CONST_STRNEQ (secname, \".rela\");\n+  return startswith (secname, \".rela\");\n }\n \n /* Create an x86 ELF linker hash table.  */"
    },
    {
      "sha": "d84df68c823b7422ad66fdd1c875dd5e328c0bfe",
      "filename": "bfd/hpux-core.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/hpux-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/hpux-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/hpux-core.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -145,7 +145,7 @@ thread_section_p (bfd *abfd ATTRIBUTE_UNUSED,\n \t\t  asection *sect,\n \t\t  void *obj ATTRIBUTE_UNUSED)\n {\n-  return CONST_STRNEQ (sect->name, \".reg/\");\n+  return startswith (sect->name, \".reg/\");\n }\n \n /* this function builds a bfd target if the file is a corefile."
    },
    {
      "sha": "f2ce3c5e0ca6c2fc162537af30dc967b8329993d",
      "filename": "bfd/libcoff.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/libcoff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/libcoff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libcoff.h?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -977,7 +977,7 @@ typedef struct\n /* Macro: Returns true if the bfd is a PE executable as opposed to a\n    PE object file.  */\n #define bfd_pei_p(abfd) \\\n-  (CONST_STRNEQ ((abfd)->xvec->name, \"pei-\"))\n+  (startswith ((abfd)->xvec->name, \"pei-\"))\n #ifdef __cplusplus\n }\n #endif"
    },
    {
      "sha": "6f6e68429267da83cfef0b63913b0004380f75d4",
      "filename": "bfd/linker.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/linker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/linker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/linker.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -579,7 +579,7 @@ bfd_wrapped_link_hash_lookup (bfd *abfd,\n #define REAL \"__real_\"\n \n       if (*l == '_'\n-\t  && CONST_STRNEQ (l, REAL)\n+\t  && startswith (l, REAL)\n \t  && bfd_hash_lookup (info->wrap_hash, l + sizeof REAL - 1,\n \t\t\t      FALSE, FALSE) != NULL)\n \t{\n@@ -623,7 +623,7 @@ unwrap_hash_lookup (struct bfd_link_info *info,\n       || *l == info->wrap_char)\n     ++l;\n \n-  if (CONST_STRNEQ (l, WRAP))\n+  if (startswith (l, WRAP))\n     {\n       l += sizeof WRAP - 1;\n \n@@ -964,7 +964,7 @@ _bfd_generic_link_add_archive_symbols\n \n \t  if (h == NULL\n \t      && info->pei386_auto_import\n-\t      && CONST_STRNEQ (arsym->name, \"__imp_\"))\n+\t      && startswith (arsym->name, \"__imp_\"))\n \t    h = bfd_link_hash_lookup (info->hash, arsym->name + 6,\n \t\t\t\t      FALSE, FALSE, TRUE);\n \t  if (h == NULL)\n@@ -1536,7 +1536,7 @@ _bfd_generic_link_add_one_symbol (struct bfd_link_info *info,\n \t\ts = name + 1;\n \t\twhile (*s == '_')\n \t\t  ++s;\n-\t\tif (s[0] == 'G' && CONST_STRNEQ (s, CONS_PREFIX))\n+\t\tif (s[0] == 'G' && startswith (s, CONS_PREFIX))\n \t\t  {\n \t\t    char c;\n "
    },
    {
      "sha": "53883a31843c0168e9dbd7f42eaee0c6dfef009a",
      "filename": "bfd/mmo.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/mmo.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/mmo.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mmo.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -2505,7 +2505,7 @@ mmo_internal_write_section (bfd *abfd, asection *sec)\n       bfd_set_error (bfd_error_bad_value);\n       return FALSE;\n     }\n-  else if (CONST_STRNEQ (sec->name, MMIX_OTHER_SPEC_SECTION_PREFIX))\n+  else if (startswith (sec->name, MMIX_OTHER_SPEC_SECTION_PREFIX))\n     {\n       int n = atoi (sec->name + strlen (MMIX_OTHER_SPEC_SECTION_PREFIX));\n "
    },
    {
      "sha": "999796753f5d5825cd70d49928dc750db1b58d96",
      "filename": "bfd/osf-core.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/osf-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/osf-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/osf-core.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -84,7 +84,7 @@ osf_core_core_file_p (bfd *abfd)\n   if (val != sizeof core_header)\n     return NULL;\n \n-  if (! CONST_STRNEQ (core_header.magic, \"Core\"))\n+  if (! startswith (core_header.magic, \"Core\"))\n     return NULL;\n \n   core_hdr (abfd) = (struct osf_core_struct *)"
    },
    {
      "sha": "c9304115f6d91c7b741b7dc42aa42a6d4f76997f",
      "filename": "bfd/pef.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/pef.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/pef.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pef.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -219,7 +219,7 @@ bfd_pef_print_symbol (bfd *abfd,\n     default:\n       bfd_print_symbol_vandf (abfd, (void *) file, symbol);\n       fprintf (file, \" %-5s %s\", symbol->section->name, symbol->name);\n-      if (CONST_STRNEQ (symbol->name, \"__traceback_\"))\n+      if (startswith (symbol->name, \"__traceback_\"))\n \t{\n \t  unsigned char *buf;\n \t  size_t offset = symbol->value + 4;"
    },
    {
      "sha": "85c0ca2113b4e6fe6c60ed694e80d70dc8dde264",
      "filename": "bfd/pei-x86_64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/pei-x86_64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/pei-x86_64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pei-x86_64.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -835,7 +835,7 @@ static void\n pex64_print_all_pdata_sections (bfd *abfd, asection *pdata, void *arg)\n {\n   struct pex64_paps *paps = arg;\n-  if (CONST_STRNEQ (pdata->name, \".pdata\"))\n+  if (startswith (pdata->name, \".pdata\"))\n     {\n       if (pex64_bfd_print_pdata_section (abfd, paps->obj, pdata))\n \tpaps->pdata_count++;"
    },
    {
      "sha": "01bcd16cc1eb8a0748e08977c4312c268cf024e7",
      "filename": "bfd/som.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/som.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/som.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/som.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -4803,12 +4803,12 @@ som_slurp_symbol_table (bfd *abfd)\n \t  && sym->symbol.name[strlen (sym->symbol.name) - 1] == '$'\n \t  && !strcmp (sym->symbol.name, sym->symbol.section->name))\n \tsym->symbol.flags |= BSF_SECTION_SYM;\n-      else if (CONST_STRNEQ (sym->symbol.name, \"L$0\\002\"))\n+      else if (startswith (sym->symbol.name, \"L$0\\002\"))\n \t{\n \t  sym->symbol.flags |= BSF_SECTION_SYM;\n \t  sym->symbol.name = sym->symbol.section->name;\n \t}\n-      else if (CONST_STRNEQ (sym->symbol.name, \"L$0\\001\"))\n+      else if (startswith (sym->symbol.name, \"L$0\\001\"))\n \tsym->symbol.flags |= BSF_DEBUGGING;\n \n       /* Note increment at bottom of loop, since we skip some symbols\n@@ -6186,7 +6186,7 @@ som_slurp_armap (bfd *abfd)\n     return FALSE;\n \n   /* For archives without .o files there is no symbol table.  */\n-  if (! CONST_STRNEQ (nextname, \"/               \"))\n+  if (! startswith (nextname, \"/               \"))\n     {\n       abfd->has_armap = FALSE;\n       return TRUE;"
    },
    {
      "sha": "da9616e3c97141fe2cfc6ff476ac0af62450bddb",
      "filename": "bfd/wasm-module.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/wasm-module.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/bfd/wasm-module.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/wasm-module.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -536,7 +536,7 @@ wasm_compute_custom_section_file_position (bfd *abfd,\n   if (idx != 0)\n     return;\n \n-  if (CONST_STRNEQ (asect->name, WASM_SECTION_PREFIX))\n+  if (startswith (asect->name, WASM_SECTION_PREFIX))\n     {\n       const char *name = asect->name + strlen (WASM_SECTION_PREFIX);\n       bfd_size_type payload_len = asect->size;"
    },
    {
      "sha": "461a1f5c66e83cc53947bcf66a337d104c69b97f",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1,3 +1,17 @@\n+2021-03-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* dlltool.c (scan_drectve_symbols): Replace usage of CONST_STRNEQ with startswith.\n+\t* emul_aix.c (ar_emul_aix_parse_arg): Likewise.\n+\t* objcopy.c (is_mergeable_note_section): Likewise.\n+\t* objdump.c (dump_dwarf_section): Likewise.\n+\t* prdbg.c (pr_method_type): Likewise.\n+\t(pr_class_baseclass): Likewise.\n+\t(tg_class_baseclass): Likewise.\n+\t* readelf.c (process_lto_symbol_tables): Likewise.\n+\t* stabs.c (ULLHIGH): Likewise.\n+\t(parse_stab_argtypes): Likewise.\n+\t(stab_demangle_function_name): Likewise.\n+\n 2021-03-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* readelf.c (get_machine_name): Add EM_INTELGT."
    },
    {
      "sha": "ca31df964ef53946c302831da9ad2300d38b081d",
      "filename": "binutils/dlltool.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/dlltool.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/dlltool.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dlltool.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1367,7 +1367,7 @@ scan_drectve_symbols (bfd *abfd)\n   while (p < e)\n     {\n       if (p[0] == '-'\n-\t  && CONST_STRNEQ (p, \"-export:\"))\n+\t  && startswith (p, \"-export:\"))\n \t{\n \t  char * name;\n \t  char * c;\n@@ -1399,7 +1399,7 @@ scan_drectve_symbols (bfd *abfd)\n \t      char *tag_start = ++p;\n \t      while (p < e && *p != ' ' && *p != '-')\n \t\tp++;\n-\t      if (CONST_STRNEQ (tag_start, \"data\"))\n+\t      if (startswith (tag_start, \"data\"))\n \t\tflags &= ~BSF_FUNCTION;\n \t    }\n "
    },
    {
      "sha": "c11c28bd030dec952d96def3d1bf9af9983c8a92",
      "filename": "binutils/emul_aix.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/emul_aix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/emul_aix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/emul_aix.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -91,25 +91,25 @@ ar_emul_aix_replace (bfd **after_bfd, bfd *new_bfd,\n static bfd_boolean\n ar_emul_aix_parse_arg (char *arg)\n {\n-  if (CONST_STRNEQ (arg, \"-X32_64\"))\n+  if (startswith (arg, \"-X32_64\"))\n     {\n       big_archive = TRUE;\n       X32 = TRUE;\n       X64 = TRUE;\n     }\n-  else if (CONST_STRNEQ (arg, \"-X32\"))\n+  else if (startswith (arg, \"-X32\"))\n     {\n       big_archive = TRUE;\n       X32 = TRUE;\n       X64 = FALSE;\n     }\n-  else if (CONST_STRNEQ (arg, \"-X64\"))\n+  else if (startswith (arg, \"-X64\"))\n     {\n       big_archive = TRUE;\n       X32 = FALSE;\n       X64 = TRUE;\n     }\n-  else if (CONST_STRNEQ (arg, \"-g\"))\n+  else if (startswith (arg, \"-g\"))\n     {\n       big_archive = FALSE;\n       X32 = TRUE;"
    },
    {
      "sha": "f5e48e80d08ebc46732fe1a77b22c508886dd7b5",
      "filename": "binutils/objcopy.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/objcopy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/objcopy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objcopy.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1316,7 +1316,7 @@ is_mergeable_note_section (bfd * abfd, asection * sec)\n       && elf_section_data (sec)->this_hdr.sh_type == SHT_NOTE\n       /* FIXME: We currently only support merging GNU_BUILD_NOTEs.\n \t We should add support for more note types.  */\n-      && (CONST_STRNEQ (sec->name, GNU_BUILD_ATTRS_SECTION_NAME)))\n+      && (startswith (sec->name, GNU_BUILD_ATTRS_SECTION_NAME)))\n     return TRUE;\n \n   return FALSE;"
    },
    {
      "sha": "cb5ce5b057c1d18093563ad62f20eb15a68f1030",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -3748,7 +3748,7 @@ dump_dwarf_section (bfd *abfd, asection *section,\n   const char *match;\n   int i;\n \n-  if (CONST_STRNEQ (name, \".gnu.linkonce.wi.\"))\n+  if (startswith (name, \".gnu.linkonce.wi.\"))\n     match = \".debug_info\";\n   else\n     match = name;"
    },
    {
      "sha": "614d7f918f573cecef0f7b52fa300464b11ab724",
      "filename": "binutils/prdbg.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/prdbg.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/prdbg.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/prdbg.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -937,10 +937,10 @@ pr_method_type (void *p, bfd_boolean domain, int argcount, bfd_boolean varargs)\n       domain_type = pop_type (info);\n       if (domain_type == NULL)\n \treturn FALSE;\n-      if (CONST_STRNEQ (domain_type, \"class \")\n+      if (startswith (domain_type, \"class \")\n \t  && strchr (domain_type + sizeof \"class \" - 1, ' ') == NULL)\n \tdomain_type += sizeof \"class \" - 1;\n-      else if (CONST_STRNEQ (domain_type, \"union class \")\n+      else if (startswith (domain_type, \"union class \")\n \t       && (strchr (domain_type + sizeof \"union class \" - 1, ' ')\n \t\t   == NULL))\n \tdomain_type += sizeof \"union class \" - 1;\n@@ -1349,7 +1349,7 @@ pr_class_baseclass (void *p, bfd_vma bitpos, bfd_boolean is_virtual,\n   if (t == NULL)\n     return FALSE;\n \n-  if (CONST_STRNEQ (t, \"class \"))\n+  if (startswith (t, \"class \"))\n     t += sizeof \"class \" - 1;\n \n   /* Push it back on to take advantage of the prepend_type and\n@@ -2238,7 +2238,7 @@ tg_class_baseclass (void *p, bfd_vma bitpos ATTRIBUTE_UNUSED,\n   if (t == NULL)\n     return FALSE;\n \n-  if (CONST_STRNEQ (t, \"class \"))\n+  if (startswith (t, \"class \"))\n     t += sizeof \"class \" - 1;\n \n   /* Push it back on to take advantage of the prepend_type and"
    },
    {
      "sha": "7370aa9358a6db6d254cb651775a2dbd11cdc150",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -12708,7 +12708,7 @@ process_lto_symbol_tables (Filedata * filedata)\n        i < filedata->file_header.e_shnum;\n        i++, section++)\n     if (SECTION_NAME_VALID (section)\n-\t&& CONST_STRNEQ (SECTION_NAME (section), \".gnu.lto_.symtab.\"))\n+\t&& startswith (SECTION_NAME (section), \".gnu.lto_.symtab.\"))\n       res &= display_lto_symtab (filedata, section);\n \n   return res;"
    },
    {
      "sha": "5b6842ef04cdf77ced0ad11af806ab45dd8f246f",
      "filename": "binutils/stabs.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/stabs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/binutils/stabs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/stabs.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1760,12 +1760,12 @@ parse_stab_range_type (void *                dhandle,\n #define ULLHIGH \"01777777777777777777777;\"\n       if (index_type == DEBUG_TYPE_NULL)\n \t{\n-\t  if (CONST_STRNEQ (s2, LLLOW)\n-\t      && CONST_STRNEQ (s3, LLHIGH))\n+\t  if (startswith (s2, LLLOW)\n+\t      && startswith (s3, LLHIGH))\n \t    return debug_make_int_type (dhandle, 8, FALSE);\n \t  if (! ov2\n \t      && n2 == 0\n-\t      && CONST_STRNEQ (s3, ULLHIGH))\n+\t      && startswith (s3, ULLHIGH))\n \t    return debug_make_int_type (dhandle, 8, TRUE);\n \t}\n \n@@ -2987,15 +2987,15 @@ parse_stab_argtypes (void *dhandle, struct stab_handle *info,\n \t\t\t\t   && (ISDIGIT (argtypes[2])\n \t\t\t\t       || argtypes[2] == 'Q'\n \t\t\t\t       || argtypes[2] == 't'))\n-\t\t\t\t  || CONST_STRNEQ (argtypes, \"__ct\"));\n+\t\t\t\t  || startswith (argtypes, \"__ct\"));\n \n   is_constructor = (is_full_physname_constructor\n \t\t    || (tagname != NULL\n \t\t\t&& strcmp (fieldname, tagname) == 0));\n   is_destructor = ((argtypes[0] == '_'\n \t\t    && (argtypes[1] == '$' || argtypes[1] == '.')\n \t\t    && argtypes[2] == '_')\n-\t\t   || CONST_STRNEQ (argtypes, \"__dt\"));\n+\t\t   || startswith (argtypes, \"__dt\"));\n   is_v3 = argtypes[0] == '_' && argtypes[1] == 'Z';\n \n   if (!(is_destructor || is_full_physname_constructor || is_v3))\n@@ -3995,7 +3995,7 @@ stab_demangle_function_name (struct stab_demangle_info *minfo,\n   *pp = scan + 2;\n \n   if (*pp - name >= 5\n-\t   && CONST_STRNEQ (name, \"type\")\n+\t   && startswith (name, \"type\")\n \t   && (name[4] == '$' || name[4] == '.'))\n     {\n       const char *tem;"
    },
    {
      "sha": "91bb3dd3ebe7a026336de7fdedba3e6beccba06c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* config/tc-i386.c (md_parse_option): Replace usage of CONST_STRNEQ with startswith.\n+\t(x86_64_section_word): Likewise.\n+\t* config/tc-sparc.c (md_parse_option): Likewise.\n+\n 2021-03-19  Alan Modra  <amodra@gmail.com>\n \n \t* app.c (do_scrub_chars): Don't lose spaces before a slash."
    },
    {
      "sha": "84a3f292656fc93e4cc87f08aba035275f4e62c6",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -13016,7 +13016,7 @@ md_parse_option (int c, const char *arg)\n \n \tlist = bfd_target_list ();\n \tfor (l = list; *l != NULL; l++)\n-\t  if (CONST_STRNEQ (*l, \"elf64-x86-64\")\n+\t  if (startswith (*l, \"elf64-x86-64\")\n \t      || strcmp (*l, \"coff-x86-64\") == 0\n \t      || strcmp (*l, \"pe-x86-64\") == 0\n \t      || strcmp (*l, \"pei-x86-64\") == 0\n@@ -13040,7 +13040,7 @@ md_parse_option (int c, const char *arg)\n \n \t  list = bfd_target_list ();\n \t  for (l = list; *l != NULL; l++)\n-\t    if (CONST_STRNEQ (*l, \"elf32-x86-64\"))\n+\t    if (startswith (*l, \"elf32-x86-64\"))\n \t      {\n \t\tdefault_arch = \"x86_64:32\";\n \t\tbreak;\n@@ -14366,7 +14366,7 @@ x86_64_section_letter (int letter, const char **ptr_msg)\n bfd_vma\n x86_64_section_word (char *str, size_t len)\n {\n-  if (len == 5 && flag_code == CODE_64BIT && CONST_STRNEQ (str, \"large\"))\n+  if (len == 5 && flag_code == CODE_64BIT && startswith (str, \"large\"))\n     return SHF_X86_64_LARGE;\n \n   return -1;"
    },
    {
      "sha": "61cd27d7239efb6d6e2efb99dbf21b383052c231",
      "filename": "gas/config/tc-sparc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/gas/config/tc-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/gas/config/tc-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-sparc.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -548,12 +548,12 @@ md_parse_option (int c, const char *arg)\n \t  {\n \t    if (sparc_arch_size == 32)\n \t      {\n-\t\tif (CONST_STRNEQ (*l, \"elf32-sparc\"))\n+\t\tif (startswith (*l, \"elf32-sparc\"))\n \t\t  break;\n \t      }\n \t    else\n \t      {\n-\t\tif (CONST_STRNEQ (*l, \"elf64-sparc\"))\n+\t\tif (startswith (*l, \"elf64-sparc\"))\n \t\t  break;\n \t      }\n \t  }"
    },
    {
      "sha": "8f7537e37668a5f412b9f922507ee23cd79d10e2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* arm-tdep.c (show_disassembly_style_sfunc): Replace usage of CONST_STRNEQ with startswith.\n+\t(_initialize_arm_tdep): Likewise.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* xcoffread.c (xcoff_initial_scan): Create partial symtabs."
    },
    {
      "sha": "23540092e77f12dc5d8196a4f8e4706bf21755df",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -8535,7 +8535,7 @@ show_disassembly_style_sfunc (struct ui_file *file, int from_tty,\n   const char *opt;\n \n   FOR_EACH_DISASSEMBLER_OPTION (opt, options)\n-    if (CONST_STRNEQ (opt, \"reg-names-\"))\n+    if (startswith (opt, \"reg-names-\"))\n       {\n \tstyle = &opt[strlen (\"reg-names-\")];\n \tlen = strcspn (style, \",\");\n@@ -9575,14 +9575,14 @@ _initialize_arm_tdep ()\n     = &disassembler_options_arm ()->options;\n   int num_disassembly_styles = 0;\n   for (i = 0; disasm_options->name[i] != NULL; i++)\n-    if (CONST_STRNEQ (disasm_options->name[i], \"reg-names-\"))\n+    if (startswith (disasm_options->name[i], \"reg-names-\"))\n       num_disassembly_styles++;\n \n   /* Initialize the array that will be passed to add_setshow_enum_cmd().  */\n   valid_disassembly_styles = XNEWVEC (const char *,\n \t\t\t\t      num_disassembly_styles + 1);\n   for (i = j = 0; disasm_options->name[i] != NULL; i++)\n-    if (CONST_STRNEQ (disasm_options->name[i], \"reg-names-\"))\n+    if (startswith (disasm_options->name[i], \"reg-names-\"))\n       {\n \tsize_t offset = strlen (\"reg-names-\");\n \tconst char *style = disasm_options->name[i];"
    },
    {
      "sha": "19b56f02b549bb3cff5da160b660d05de95903df",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1,3 +1,28 @@\n+2021-03-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* emultempl/aix.em: Replace usage of CONST_STRNEQ with startswith.\n+\t* emultempl/beos.em: Likewise.\n+\t* emultempl/elf.em: Likewise.\n+\t* emultempl/pe.em: Likewise.\n+\t* emultempl/pep.em: Likewise.\n+\t* emultempl/xtensaelf.em: Likewise.\n+\t* ldctor.c (ctor_prio): Likewise.\n+\t* ldelf.c (ldelf_try_needed): Likewise.\n+\t(ldelf_parse_ld_so_conf): Likewise.\n+\t(ldelf_after_open): Likewise.\n+\t(output_rel_find): Likewise.\n+\t(ldelf_place_orphan): Likewise.\n+\t* ldfile.c (ldfile_add_library_path): Likewise.\n+\t* ldlang.c (lang_add_input_file): Likewise.\n+\t* ldmain.c (get_sysroot): Likewise.\n+\t(get_emulation): Likewise.\n+\t(add_archive_element): Likewise.\n+\t* ldwrite.c (unsplittable_name): Likewise.\n+\t(clone_section): Likewise.\n+\t* lexsup.c (parse_args): Likewise.\n+\t* pe-dll.c (is_import): Likewise.\n+\t(pe_implied_import_dll): Likewise.\n+\n 2021-03-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/27590"
    },
    {
      "sha": "6fd67b2b7f8cf7d5241f1deab29ec7634bb2b18e",
      "filename": "ld/emultempl/aix.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/aix.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/aix.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/aix.em?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -287,7 +287,7 @@ gld${EMULATION_NAME}_parse_args (int argc, char **argv)\n   if (indx == 0)\n     indx = 1;\n \n-  if (indx < argc && CONST_STRNEQ (argv[indx], \"-b\"))\n+  if (indx < argc && startswith (argv[indx], \"-b\"))\n     {\n       char *s;\n "
    },
    {
      "sha": "d984d3dd198884e392ee6a7a411d930c043c591a",
      "filename": "ld/emultempl/beos.em",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/beos.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/beos.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/beos.em?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -461,8 +461,8 @@ sort_by_section_name (const void *a, const void *b)\n      FIXME stripping images with a .rsrc section still needs to be fixed.  */\n   if (i != 0)\n     {\n-      if ((CONST_STRNEQ (sna, \".stab\"))\n-\t  && (!CONST_STRNEQ (snb, \".stab\")))\n+      if ((startswith (sna, \".stab\"))\n+\t  && (!startswith (snb, \".stab\")))\n \treturn 1;\n     }\n   return i;\n@@ -536,7 +536,7 @@ sort_sections (lang_statement_union_type *s)\n \t    {\n \t      /* Is this the .idata section?  */\n \t      if (sec->spec.name != NULL\n-\t\t  && CONST_STRNEQ (sec->spec.name, \".idata\"))\n+\t\t  && startswith (sec->spec.name, \".idata\"))\n \t\t{\n \t\t  /* Sort the children.  We want to sort any objects in\n \t\t     the same archive.  In order to handle the case of"
    },
    {
      "sha": "986b77e92d9efd30fc1589e8c8df51c87f5c1d14",
      "filename": "ld/emultempl/elf.em",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/elf.em?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -712,7 +712,7 @@ fragment <<EOF\n \tlink_info.unresolved_syms_in_objects = RM_IGNORE;\n       else if (strcmp (optarg, \"muldefs\") == 0)\n \tlink_info.allow_multiple_definition = TRUE;\n-      else if (CONST_STRNEQ (optarg, \"max-page-size=\"))\n+      else if (startswith (optarg, \"max-page-size=\"))\n \t{\n \t  char *end;\n \n@@ -722,7 +722,7 @@ fragment <<EOF\n \t    einfo (_(\"%F%P: invalid maximum page size \\`%s'\\n\"),\n \t\t   optarg + 14);\n \t}\n-      else if (CONST_STRNEQ (optarg, \"common-page-size=\"))\n+      else if (startswith (optarg, \"common-page-size=\"))\n \t{\n \t  char *end;\n \t  link_info.commonpagesize = strtoul (optarg + 17, &end, 0);\n@@ -731,7 +731,7 @@ fragment <<EOF\n \t    einfo (_(\"%F%P: invalid common page size \\`%s'\\n\"),\n \t\t   optarg + 17);\n \t}\n-      else if (CONST_STRNEQ (optarg, \"stack-size=\"))\n+      else if (startswith (optarg, \"stack-size=\"))\n \t{\n \t  char *end;\n \t  link_info.stacksize = strtoul (optarg + 11, &end, 0);\n@@ -760,11 +760,11 @@ fragment <<EOF\n \t{\n \t  link_info.flags_1 |= DF_1_GLOBAUDIT;\n \t}\n-      else if (CONST_STRNEQ (optarg, \"start-stop-gc\"))\n+      else if (startswith (optarg, \"start-stop-gc\"))\n \tlink_info.start_stop_gc = TRUE;\n-      else if (CONST_STRNEQ (optarg, \"nostart-stop-gc\"))\n+      else if (startswith (optarg, \"nostart-stop-gc\"))\n \tlink_info.start_stop_gc = FALSE;\n-      else if (CONST_STRNEQ (optarg, \"start-stop-visibility=\"))\n+      else if (startswith (optarg, \"start-stop-visibility=\"))\n \t{\n \t  if (strcmp (optarg, \"start-stop-visibility=default\") == 0)\n \t    link_info.start_stop_visibility = STV_DEFAULT;"
    },
    {
      "sha": "ea11a02e7c87d1fa64feeff6662de626bea343ee",
      "filename": "ld/emultempl/pe.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/pe.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/pe.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pe.em?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1529,7 +1529,7 @@ gld_${EMULATION_NAME}_after_open (void)\n \t      {\n \t\tif (strcmp (sec->name, \".idata\\$2\") == 0)\n \t\t  idata2 = 1;\n-\t\tif (CONST_STRNEQ (sec->name, \".idata\\$\"))\n+\t\tif (startswith (sec->name, \".idata\\$\"))\n \t\t  is_imp = 1;\n \t\treloc_count += sec->reloc_count;\n \t      }"
    },
    {
      "sha": "5f539cb7a3e4e8bbcb2cf52501ab68315f7c5958",
      "filename": "ld/emultempl/pep.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/pep.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/pep.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pep.em?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1501,7 +1501,7 @@ gld_${EMULATION_NAME}_after_open (void)\n \t      {\n \t\tif (strcmp (sec->name, \".idata\\$2\") == 0)\n \t\t  idata2 = 1;\n-\t\tif (CONST_STRNEQ (sec->name, \".idata\\$\"))\n+\t\tif (startswith (sec->name, \".idata\\$\"))\n \t\t  is_imp = 1;\n \t\treloc_count += sec->reloc_count;\n \t      }"
    },
    {
      "sha": "2b0fa5af64cc94978a723dbd221b5fc378f252a3",
      "filename": "ld/emultempl/xtensaelf.em",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/xtensaelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/emultempl/xtensaelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/xtensaelf.em?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -262,7 +262,7 @@ replace_instruction_table_sections (bfd *abfd, asection *sec)\n       insn_sec_name = INSN_SEC_BASE_NAME;\n       prop_sec_name = PROP_SEC_BASE_NAME;\n     }\n-  else if (CONST_STRNEQ (sec_name, LINKONCE_SEC_OLD_TEXT_BASE_NAME))\n+  else if (startswith (sec_name, LINKONCE_SEC_OLD_TEXT_BASE_NAME))\n     {\n       insn_sec_name = sec_name;\n       owned_prop_sec_name = (char *) xmalloc (strlen (sec_name) + 20);\n@@ -1320,7 +1320,7 @@ is_inconsistent_linkonce_section (asection *sec)\n   /* Check if this is an Xtensa property section or an exception table\n      for Tensilica's XCC compiler.  */\n   name = sec_name + linkonce_len;\n-  if (CONST_STRNEQ (name, \"prop.\"))\n+  if (startswith (name, \"prop.\"))\n     name = strchr (name + 5, '.') ? strchr (name + 5, '.') + 1 : name + 5;\n   else if (name[1] == '.'\n \t   && (name[0] == 'p' || name[0] == 'e' || name[0] == 'h'))"
    },
    {
      "sha": "841ffe3b1e50f58111bcc14b0d6b72f5ea39a50a",
      "filename": "ld/ldctor.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldctor.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldctor.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldctor.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -131,7 +131,7 @@ ctor_prio (const char *name)\n   while (*name == '_')\n     ++name;\n \n-  if (!CONST_STRNEQ (name, \"GLOBAL_\"))\n+  if (!startswith (name, \"GLOBAL_\"))\n     return -1;\n \n   name += sizeof \"GLOBAL_\" - 1;"
    },
    {
      "sha": "94d775db5cd98b5bb7b7b933f69afc007dd6c0bb",
      "filename": "ld/ldelf.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelf.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -321,7 +321,7 @@ ldelf_try_needed (struct dt_needed *needed, int force, int is_linux)\n \t      struct bfd_link_needed_list *l;\n \n \t      for (l = needs; l != NULL; l = l->next)\n-\t\tif (CONST_STRNEQ (l->name, \"libc.so\"))\n+\t\tif (startswith (l->name, \"libc.so\"))\n \t\t  break;\n \t      if (l == NULL)\n \t\t{\n@@ -837,7 +837,7 @@ ldelf_parse_ld_so_conf (struct ldelf_ld_so_conf *info, const char *filename)\n       if (p[0] == '\\0')\n \tcontinue;\n \n-      if (CONST_STRNEQ (p, \"include\") && (p[7] == ' ' || p[7] == '\\t'))\n+      if (startswith (p, \"include\") && (p[7] == ' ' || p[7] == '\\t'))\n \t{\n \t  char *dir, c;\n \t  p += 8;\n@@ -1089,7 +1089,7 @@ ldelf_after_open (int use_libpath, int native, int is_linux, int is_freebsd,\n \n \t      if (bfd_is_abs_section (s->output_section))\n \t\tcontinue;\n-\t      if (CONST_STRNEQ (name, \".eh_frame_entry\"))\n+\t      if (startswith (name, \".eh_frame_entry\"))\n \t\ttype = COMPACT_EH_HDR;\n \t      else if (strcmp (name, \".eh_frame\") == 0 && s->size > 8)\n \t\ttype = DWARF2_EH_HDR;\n@@ -1820,7 +1820,7 @@ output_rel_find (int isdyn, int rela)\n        lookup = lookup->next)\n     {\n       if (lookup->constraint >= 0\n-\t  && CONST_STRNEQ (lookup->name, \".rel\"))\n+\t  && startswith (lookup->name, \".rel\"))\n \t{\n \t  int lookrela = lookup->name[4] == 'a';\n \n@@ -1971,7 +1971,7 @@ ldelf_place_orphan (asection *s, const char *secname, int constraint)\n \t  default:\n \t    break;\n \t  }\n-      else if (CONST_STRNEQ (secname, \".rel\"))\n+      else if (startswith (secname, \".rel\"))\n \t{\n \t  secname = secname[4] == 'a' ? \".rela.dyn\" : \".rel.dyn\";\n \t  isdyn = 1;\n@@ -2084,7 +2084,7 @@ ldelf_place_orphan (asection *s, const char *secname, int constraint)\n   /* If this is a final link, then always put .gnu.warning.SYMBOL\n      sections into the .text section to get them out of the way.  */\n   if (bfd_link_executable (&link_info)\n-      && CONST_STRNEQ (s->name, \".gnu.warning.\")\n+      && startswith (s->name, \".gnu.warning.\")\n       && hold[orphan_text].os != NULL)\n     {\n       os = hold[orphan_text].os;\n@@ -2124,7 +2124,7 @@ ldelf_place_orphan (asection *s, const char *secname, int constraint)\n   else if ((flags & SEC_LOAD) != 0\n \t   && (elfinput\n \t       ? sh_type == SHT_NOTE\n-\t       : CONST_STRNEQ (secname, \".note\")))\n+\t       : startswith (secname, \".note\")))\n     place = &hold[orphan_interp];\n   else if ((flags & (SEC_LOAD | SEC_HAS_CONTENTS | SEC_THREAD_LOCAL)) == 0)\n     place = &hold[orphan_bss];\n@@ -2137,7 +2137,7 @@ ldelf_place_orphan (asection *s, const char *secname, int constraint)\n   else if ((flags & SEC_LOAD) != 0\n \t   && (elfinput\n \t       ? sh_type == SHT_RELA || sh_type == SHT_REL\n-\t       : CONST_STRNEQ (secname, \".rel\")))\n+\t       : startswith (secname, \".rel\")))\n     place = &hold[orphan_rel];\n   else if ((flags & SEC_CODE) == 0)\n     place = &hold[orphan_rodata];"
    },
    {
      "sha": "c428d1487f3f8820df134d22f91be3dbb94a0fb8",
      "filename": "ld/ldfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldfile.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -113,7 +113,7 @@ ldfile_add_library_path (const char *name, bfd_boolean cmdline)\n      now.  */\n   if (name[0] == '=')\n     new_dirs->name = concat (ld_sysroot, name + 1, (const char *) NULL);\n-  else if (CONST_STRNEQ (name, \"$SYSROOT\"))\n+  else if (startswith (name, \"$SYSROOT\"))\n     new_dirs->name = concat (ld_sysroot, name + strlen (\"$SYSROOT\"), (const char *) NULL);\n   else\n     new_dirs->name = xstrdup (name);"
    },
    {
      "sha": "629be32efaf40a0b74a80f0322dba4a7c7ca8015",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1186,7 +1186,7 @@ lang_add_input_file (const char *name,\n \t\t     const char *target)\n {\n   if (name != NULL\n-      && (*name == '=' || CONST_STRNEQ (name, \"$SYSROOT\")))\n+      && (*name == '=' || startswith (name, \"$SYSROOT\")))\n     {\n       lang_input_statement_type *ret;\n       char *sysrooted_name"
    },
    {
      "sha": "aa52205daf45cd6b951aed903a56cfe940b66d30",
      "filename": "ld/ldmain.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldmain.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldmain.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmain.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -648,7 +648,7 @@ get_sysroot (int argc, char **argv)\n   const char *path = NULL;\n \n   for (i = 1; i < argc; i++)\n-    if (CONST_STRNEQ (argv[i], \"--sysroot=\"))\n+    if (startswith (argv[i], \"--sysroot=\"))\n       path = argv[i] + strlen (\"--sysroot=\");\n \n   if (!path)\n@@ -681,7 +681,7 @@ get_emulation (int argc, char **argv)\n \n   for (i = 1; i < argc; i++)\n     {\n-      if (CONST_STRNEQ (argv[i], \"-m\"))\n+      if (startswith (argv[i], \"-m\"))\n \t{\n \t  if (argv[i][2] == '\\0')\n \t    {\n@@ -935,7 +935,7 @@ add_archive_element (struct bfd_link_info *info,\n       h = bfd_link_hash_lookup (info->hash, name, FALSE, FALSE, TRUE);\n       if (h == NULL\n \t  && info->pei386_auto_import\n-\t  && CONST_STRNEQ (name, \"__imp_\"))\n+\t  && startswith (name, \"__imp_\"))\n \th = bfd_link_hash_lookup (info->hash, name + 6, FALSE, FALSE, TRUE);\n \n       if (h == NULL)"
    },
    {
      "sha": "ef1d88c6ce27f01bdcb4a93bc8de95c5cd66bd23",
      "filename": "ld/ldwrite.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldwrite.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/ldwrite.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldwrite.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -281,7 +281,7 @@ build_link_order (lang_statement_union_type *statement)\n static bfd_boolean\n unsplittable_name (const char *name)\n {\n-  if (CONST_STRNEQ (name, \".stab\"))\n+  if (startswith (name, \".stab\"))\n     {\n       /* There are several stab like string sections. We pattern match on\n \t \".stab...str\"  */\n@@ -326,7 +326,7 @@ clone_section (bfd *abfd, asection *s, const char *name, int *count)\n     {\n       /* Some section names cannot be truncated, as the name is\n \t used to locate some other section.  */\n-      if (CONST_STRNEQ (name, \".stab\")\n+      if (startswith (name, \".stab\")\n \t  || strcmp (name, \"$GDB_SYMBOLS$\") == 0)\n \t{\n \t  einfo (_ (\"%F%P: cannot create split section name for %s\\n\"), name);"
    },
    {
      "sha": "88eb79e7f693c8cbc26f9d8405a893cc1b60033b",
      "filename": "ld/lexsup.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/lexsup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/lexsup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/lexsup.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1560,7 +1560,7 @@ parse_args (unsigned argc, char **argv)\n \t  link_info.discard = discard_all;\n \t  break;\n \tcase 'Y':\n-\t  if (CONST_STRNEQ (optarg, \"P,\"))\n+\t  if (startswith (optarg, \"P,\"))\n \t    optarg += 2;\n \t  free (default_dirlist);\n \t  default_dirlist = xstrdup (optarg);"
    },
    {
      "sha": "154c6846beb8c576e57c86bab729ab2f033fcb6a",
      "filename": "ld/pe-dll.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/pe-dll.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/ld/pe-dll.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/pe-dll.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -545,7 +545,7 @@ pe_dll_add_excludes (const char *new_excludes, const exclude_type type)\n static bfd_boolean\n is_import (const char* n)\n {\n-  return (CONST_STRNEQ (n, \"__imp_\"));\n+  return (startswith (n, \"__imp_\"));\n }\n \n /* abfd is a bfd containing n (or NULL)\n@@ -3531,7 +3531,7 @@ pe_implied_import_dll (const char *filename)\n \n       /* Skip unwanted symbols, which are\n \t exported in buggy auto-import releases.  */\n-      if (! CONST_STRNEQ (erva + name_rva, \"__nm_\"))\n+      if (! startswith (erva + name_rva, \"__nm_\"))\n \t{\n \t  int is_dup = 0;\n \t  /* is_data is true if the address is in the data, rdata or bss"
    },
    {
      "sha": "bd8cfef1b9490e707e646592b970340d0029f536",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -1,3 +1,21 @@\n+2021-03-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* aarch64-dis.c (parse_aarch64_dis_option): Replace usage of CONST_STRNEQ with startswith.\n+\t* arc-dis.c (parse_option): Likewise.\n+\t* arm-dis.c (parse_arm_disassembler_options): Likewise.\n+\t* cris-dis.c (print_with_operands): Likewise.\n+\t* h8300-dis.c (bfd_h8_disassemble): Likewise.\n+\t* i386-dis.c (print_insn): Likewise.\n+\t* ia64-gen.c (fetch_insn_class): Likewise.\n+\t(parse_resource_users): Likewise.\n+\t(in_iclass): Likewise.\n+\t(lookup_specifier): Likewise.\n+\t(insert_opcode_dependencies): Likewise.\n+\t* mips-dis.c (parse_mips_ase_option): Likewise.\n+\t(parse_mips_dis_option): Likewise.\n+\t* s390-dis.c (disassemble_init_s390): Likewise.\n+\t* wasm32-dis.c (parse_wasm32_disassembler_options): Likewise.\n+\n 2021-03-16  Kuan-Lin Chen  <kuanlinchentw@gmail.com>\n \n \t* riscv-opc.c (riscv_opcodes): Add zba, zbb and zbc instructions."
    },
    {
      "sha": "349d7ea7ec07a8726fca86c493bf44801c19df0b",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -58,32 +58,32 @@ static void\n parse_aarch64_dis_option (const char *option, unsigned int len ATTRIBUTE_UNUSED)\n {\n   /* Try to match options that are simple flags */\n-  if (CONST_STRNEQ (option, \"no-aliases\"))\n+  if (startswith (option, \"no-aliases\"))\n     {\n       no_aliases = 1;\n       return;\n     }\n \n-  if (CONST_STRNEQ (option, \"aliases\"))\n+  if (startswith (option, \"aliases\"))\n     {\n       no_aliases = 0;\n       return;\n     }\n \n-  if (CONST_STRNEQ (option, \"no-notes\"))\n+  if (startswith (option, \"no-notes\"))\n     {\n       no_notes = 1;\n       return;\n     }\n \n-  if (CONST_STRNEQ (option, \"notes\"))\n+  if (startswith (option, \"notes\"))\n     {\n       no_notes = 0;\n       return;\n     }\n \n #ifdef DEBUG_AARCH64\n-  if (CONST_STRNEQ (option, \"debug_dump\"))\n+  if (startswith (option, \"debug_dump\"))\n     {\n       debug_dump = 1;\n       return;"
    },
    {
      "sha": "0c9b379bd2b7bf5741be495cc900673d9b434245",
      "filename": "opcodes/arc-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/arc-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/arc-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arc-dis.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -795,7 +795,7 @@ parse_option (const char *option)\n       add_to_decodelist (FLOAT, DP);\n       add_to_decodelist (FLOAT, CVT);\n     }\n-  else if (CONST_STRNEQ (option, \"hex\"))\n+  else if (startswith (option, \"hex\"))\n     print_hex = TRUE;\n   else\n     /* xgettext:c-format */"
    },
    {
      "sha": "9647d0019dbbe3b2f466f40c3ba89cd1d28fc6f8",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -11600,7 +11600,7 @@ parse_arm_disassembler_options (const char *options)\n \n   FOR_EACH_DISASSEMBLER_OPTION (opt, options)\n     {\n-      if (CONST_STRNEQ (opt, \"reg-names-\"))\n+      if (startswith (opt, \"reg-names-\"))\n \t{\n \t  unsigned int i;\n \t  for (i = 0; i < NUM_ARM_OPTIONS; i++)\n@@ -11615,11 +11615,11 @@ parse_arm_disassembler_options (const char *options)\n \t    opcodes_error_handler (_(\"unrecognised register name set: %s\"),\n \t\t\t\t   opt);\n \t}\n-      else if (CONST_STRNEQ (opt, \"force-thumb\"))\n+      else if (startswith (opt, \"force-thumb\"))\n \tforce_thumb = 1;\n-      else if (CONST_STRNEQ (opt, \"no-force-thumb\"))\n+      else if (startswith (opt, \"no-force-thumb\"))\n \tforce_thumb = 0;\n-      else if (CONST_STRNEQ (opt, \"coproc\"))\n+      else if (startswith (opt, \"coproc\"))\n \t{\n \t  const char *procptr = opt + sizeof (\"coproc\") - 1;\n \t  char *endptr;\n@@ -11637,10 +11637,10 @@ parse_arm_disassembler_options (const char *options)\n \t      continue;\n \t    }\n \t  endptr += 1;\n-\t  if (CONST_STRNEQ (endptr, \"generic\"))\n+\t  if (startswith (endptr, \"generic\"))\n \t    cde_coprocs &= ~(1 << coproc_number);\n-\t  else if (CONST_STRNEQ (endptr, \"cde\")\n-\t\t   || CONST_STRNEQ (endptr, \"CDE\"))\n+\t  else if (startswith (endptr, \"cde\")\n+\t\t   || startswith (endptr, \"CDE\"))\n \t    cde_coprocs |= (1 << coproc_number);\n \t  else\n \t    {"
    },
    {
      "sha": "3f98cb028b5cd91bcba541f0b68c85da1249aabc",
      "filename": "opcodes/cris-dis.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/cris-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/cris-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/cris-dis.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -786,7 +786,7 @@ print_with_operands (const struct cris_opcode *opcodep,\n      better way).  */\n   if (opcodep->name[0] == 'j')\n     {\n-      if (CONST_STRNEQ (opcodep->name, \"jsr\"))\n+      if (startswith (opcodep->name, \"jsr\"))\n \t/* It's \"jsr\" or \"jsrc\".  */\n \tinfo->insn_type = dis_jsr;\n       else\n@@ -1360,16 +1360,16 @@ print_with_operands (const struct cris_opcode *opcodep,\n      itself or in a \"move.d const,rN, sub.d rN,rM\"-like sequence.  */\n   if (TRACE_CASE && case_offset_counter == 0)\n     {\n-      if (CONST_STRNEQ (opcodep->name, \"sub\"))\n+      if (startswith (opcodep->name, \"sub\"))\n \tcase_offset = last_immediate;\n \n       /* It could also be an \"add\", if there are negative case-values.  */\n-      else if (CONST_STRNEQ (opcodep->name, \"add\"))\n+      else if (startswith (opcodep->name, \"add\"))\n \t/* The first case is the negated operand to the add.  */\n \tcase_offset = -last_immediate;\n \n       /* A bound insn will tell us the number of cases.  */\n-      else if (CONST_STRNEQ (opcodep->name, \"bound\"))\n+      else if (startswith (opcodep->name, \"bound\"))\n \tno_of_case_offsets = last_immediate + 1;\n \n       /* A jump or jsr or branch breaks the chain of insns for a"
    },
    {
      "sha": "4696235a8db5abba0abcb653eb67937b86ccd5fa",
      "filename": "opcodes/h8300-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/h8300-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/h8300-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/h8300-dis.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -655,7 +655,7 @@ bfd_h8_disassemble (bfd_vma addr, disassemble_info *info, int mach)\n \t\t   regno[1]);\n \t  return qi->length;\n \t}\n-      if (CONST_STRNEQ (q->name, \"mova\"))\n+      if (startswith (q->name, \"mova\"))\n \t{\n \t  const op_type *args = q->args.nib;\n "
    },
    {
      "sha": "9e5c412fa4adaee94a1f9e19c748b467a138405e",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -9413,38 +9413,38 @@ print_insn (bfd_vma pc, disassemble_info *info)\n \n   for (p = info->disassembler_options; p != NULL; )\n     {\n-      if (CONST_STRNEQ (p, \"amd64\"))\n+      if (startswith (p, \"amd64\"))\n \tisa64 = amd64;\n-      else if (CONST_STRNEQ (p, \"intel64\"))\n+      else if (startswith (p, \"intel64\"))\n \tisa64 = intel64;\n-      else if (CONST_STRNEQ (p, \"x86-64\"))\n+      else if (startswith (p, \"x86-64\"))\n \t{\n \t  address_mode = mode_64bit;\n \t  priv.orig_sizeflag |= AFLAG | DFLAG;\n \t}\n-      else if (CONST_STRNEQ (p, \"i386\"))\n+      else if (startswith (p, \"i386\"))\n \t{\n \t  address_mode = mode_32bit;\n \t  priv.orig_sizeflag |= AFLAG | DFLAG;\n \t}\n-      else if (CONST_STRNEQ (p, \"i8086\"))\n+      else if (startswith (p, \"i8086\"))\n \t{\n \t  address_mode = mode_16bit;\n \t  priv.orig_sizeflag &= ~(AFLAG | DFLAG);\n \t}\n-      else if (CONST_STRNEQ (p, \"intel\"))\n+      else if (startswith (p, \"intel\"))\n \t{\n \t  intel_syntax = 1;\n-\t  if (CONST_STRNEQ (p + 5, \"-mnemonic\"))\n+\t  if (startswith (p + 5, \"-mnemonic\"))\n \t    intel_mnemonic = 1;\n \t}\n-      else if (CONST_STRNEQ (p, \"att\"))\n+      else if (startswith (p, \"att\"))\n \t{\n \t  intel_syntax = 0;\n-\t  if (CONST_STRNEQ (p + 3, \"-mnemonic\"))\n+\t  if (startswith (p + 3, \"-mnemonic\"))\n \t    intel_mnemonic = 0;\n \t}\n-      else if (CONST_STRNEQ (p, \"addr\"))\n+      else if (startswith (p, \"addr\"))\n \t{\n \t  if (address_mode == mode_64bit)\n \t    {\n@@ -9461,14 +9461,14 @@ print_insn (bfd_vma pc, disassemble_info *info)\n \t\tpriv.orig_sizeflag |= AFLAG;\n \t    }\n \t}\n-      else if (CONST_STRNEQ (p, \"data\"))\n+      else if (startswith (p, \"data\"))\n \t{\n \t  if (p[4] == '1' && p[5] == '6')\n \t    priv.orig_sizeflag &= ~DFLAG;\n \t  else if (p[4] == '3' && p[5] == '2')\n \t    priv.orig_sizeflag |= DFLAG;\n \t}\n-      else if (CONST_STRNEQ (p, \"suffix\"))\n+      else if (startswith (p, \"suffix\"))\n \tpriv.orig_sizeflag |= SUFFIX_ALWAYS;\n \n       p = strchr (p, ',');"
    },
    {
      "sha": "de409bb2abd0c1d5196b84742e8760dcbef8a75c",
      "filename": "opcodes/ia64-gen.c",
      "status": "modified",
      "additions": 24,
      "deletions": 24,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/ia64-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/ia64-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ia64-gen.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -467,7 +467,7 @@ fetch_insn_class (const char *full_name, int create)\n   int ind;\n   int is_class = 0;\n \n-  if (CONST_STRNEQ (full_name, \"IC:\"))\n+  if (startswith (full_name, \"IC:\"))\n     {\n       name = xstrdup (full_name + 3);\n       is_class = 1;\n@@ -746,7 +746,7 @@ parse_resource_users (const char *ref, int **usersp, int *nusersp,\n          are read.  Only create new classes if it's *not* an insn class,\n          or if it's a composite class (which wouldn't necessarily be in the IC\n          table).  */\n-      if (! CONST_STRNEQ (name, \"IC:\") || xsect != NULL)\n+      if (! startswith (name, \"IC:\") || xsect != NULL)\n         create = 1;\n \n       iclass = fetch_insn_class (name, create);\n@@ -1039,7 +1039,7 @@ in_iclass (struct ia64_opcode *idesc, struct iclass *ic,\n \n   if (ic->comment)\n     {\n-      if (CONST_STRNEQ (ic->comment, \"Format\"))\n+      if (startswith (ic->comment, \"Format\"))\n         {\n           /* Assume that the first format seen is the most restrictive, and\n              only keep a later one if it looks like it's more restrictive.  */\n@@ -1055,7 +1055,7 @@ in_iclass (struct ia64_opcode *idesc, struct iclass *ic,\n           else\n             format = ic->comment;\n         }\n-      else if (CONST_STRNEQ (ic->comment, \"Field\"))\n+      else if (startswith (ic->comment, \"Field\"))\n         {\n           if (field)\n             warn (_(\"overlapping field %s->%s\\n\"),\n@@ -1069,7 +1069,7 @@ in_iclass (struct ia64_opcode *idesc, struct iclass *ic,\n      instructions.  */\n   if (ic->nsubs == 0 && ic->nxsubs == 0)\n     {\n-      int is_mov = CONST_STRNEQ (idesc->name, \"mov\");\n+      int is_mov = startswith (idesc->name, \"mov\");\n       int plain_mov = strcmp (idesc->name, \"mov\") == 0;\n       int len = strlen(ic->name);\n \n@@ -1128,32 +1128,32 @@ in_iclass (struct ia64_opcode *idesc, struct iclass *ic,\n \n       if (resolved && format)\n         {\n-          if (CONST_STRNEQ (idesc->name, \"dep\")\n+          if (startswith (idesc->name, \"dep\")\n                    && strstr (format, \"I13\") != NULL)\n             resolved = idesc->operands[1] == IA64_OPND_IMM8;\n-          else if (CONST_STRNEQ (idesc->name, \"chk\")\n+          else if (startswith (idesc->name, \"chk\")\n                    && strstr (format, \"M21\") != NULL)\n             resolved = idesc->operands[0] == IA64_OPND_F2;\n-          else if (CONST_STRNEQ (idesc->name, \"lfetch\"))\n+          else if (startswith (idesc->name, \"lfetch\"))\n             resolved = (strstr (format, \"M14 M15\") != NULL\n                         && (idesc->operands[1] == IA64_OPND_R2\n                             || idesc->operands[1] == IA64_OPND_IMM9b));\n-          else if (CONST_STRNEQ (idesc->name, \"br.call\")\n+          else if (startswith (idesc->name, \"br.call\")\n                    && strstr (format, \"B5\") != NULL)\n             resolved = idesc->operands[1] == IA64_OPND_B2;\n-          else if (CONST_STRNEQ (idesc->name, \"br.call\")\n+          else if (startswith (idesc->name, \"br.call\")\n                    && strstr (format, \"B3\") != NULL)\n             resolved = idesc->operands[1] == IA64_OPND_TGT25c;\n-          else if (CONST_STRNEQ (idesc->name, \"brp\")\n+          else if (startswith (idesc->name, \"brp\")\n                    && strstr (format, \"B7\") != NULL)\n             resolved = idesc->operands[0] == IA64_OPND_B2;\n           else if (strcmp (ic->name, \"invala\") == 0)\n             resolved = strcmp (idesc->name, ic->name) == 0;\n-\t  else if (CONST_STRNEQ (idesc->name, \"st\")\n+\t  else if (startswith (idesc->name, \"st\")\n \t\t   && (strstr (format, \"M5\") != NULL\n \t\t       || strstr (format, \"M10\") != NULL))\n \t    resolved = idesc->flags & IA64_OPCODE_POSTINC;\n-\t  else if (CONST_STRNEQ (idesc->name, \"ld\")\n+\t  else if (startswith (idesc->name, \"ld\")\n \t\t   && (strstr (format, \"M2 M3\") != NULL\n \t\t       || strstr (format, \"M12\") != NULL\n \t\t       || strstr (format, \"M7 M8\") != NULL))\n@@ -1166,7 +1166,7 @@ in_iclass (struct ia64_opcode *idesc, struct iclass *ic,\n          plain brl matches brl.cond.  */\n       if (!resolved\n           && (strcmp (idesc->name, \"brl\") == 0\n-              || CONST_STRNEQ (idesc->name, \"brl.\"))\n+              || startswith (idesc->name, \"brl.\"))\n           && strcmp (ic->name, \"brl.cond\") == 0)\n         {\n           resolved = 1;\n@@ -1175,7 +1175,7 @@ in_iclass (struct ia64_opcode *idesc, struct iclass *ic,\n       /* Misc br variations ('.cond' is optional).  */\n       if (!resolved\n           && (strcmp (idesc->name, \"br\") == 0\n-              || CONST_STRNEQ (idesc->name, \"br.\"))\n+              || startswith (idesc->name, \"br.\"))\n           && strcmp (ic->name, \"br.cond\") == 0)\n         {\n           if (format)\n@@ -1188,7 +1188,7 @@ in_iclass (struct ia64_opcode *idesc, struct iclass *ic,\n         }\n \n       /* probe variations.  */\n-      if (!resolved && CONST_STRNEQ (idesc->name, \"probe\"))\n+      if (!resolved && startswith (idesc->name, \"probe\"))\n         {\n           resolved = strcmp (ic->name, \"probe\") == 0\n             && !((strstr (idesc->name, \"fault\") != NULL)\n@@ -1222,7 +1222,7 @@ in_iclass (struct ia64_opcode *idesc, struct iclass *ic,\n             }\n \n           /* Some variants of mov and mov.[im].  */\n-          if (!resolved && CONST_STRNEQ (ic->name, \"mov_\"))\n+          if (!resolved && startswith (ic->name, \"mov_\"))\n \t    resolved = in_iclass_mov_x (idesc, ic, format, field);\n         }\n \n@@ -1487,13 +1487,13 @@ lookup_specifier (const char *name)\n       warn (_(\"Don't know how to specify # dependency %s\\n\"),\n \t    name);\n     }\n-  else if (CONST_STRNEQ (name, \"AR[FPSR]\"))\n+  else if (startswith (name, \"AR[FPSR]\"))\n     return IA64_RS_AR_FPSR;\n-  else if (CONST_STRNEQ (name, \"AR[\"))\n+  else if (startswith (name, \"AR[\"))\n     return IA64_RS_ARX;\n-  else if (CONST_STRNEQ (name, \"CR[\"))\n+  else if (startswith (name, \"CR[\"))\n     return IA64_RS_CRX;\n-  else if (CONST_STRNEQ (name, \"PSR.\"))\n+  else if (startswith (name, \"PSR.\"))\n     return IA64_RS_PSR;\n   else if (strcmp (name, \"InService*\") == 0)\n     return IA64_RS_INSERVICE;\n@@ -2444,7 +2444,7 @@ insert_opcode_dependencies (struct ia64_opcode *opc,\n       int j;\n \n       if (strcmp (opc->name, \"cmp.eq.and\") == 0\n-          && CONST_STRNEQ (rs->name, \"PR%\")\n+          && startswith (rs->name, \"PR%\")\n           && rs->mode == 1)\n         no_class_found = 99;\n \n@@ -2455,7 +2455,7 @@ insert_opcode_dependencies (struct ia64_opcode *opc,\n           if (in_iclass (opc, ics[rs->regs[j]], NULL, NULL, &ic_note))\n             {\n               /* We can ignore ic_note 11 for non PR resources.  */\n-              if (ic_note == 11 && ! CONST_STRNEQ (rs->name, \"PR\"))\n+              if (ic_note == 11 && ! startswith (rs->name, \"PR\"))\n                 ic_note = 0;\n \n               if (ic_note != 0 && rs->regnotes[j] != 0\n@@ -2483,7 +2483,7 @@ insert_opcode_dependencies (struct ia64_opcode *opc,\n           if (in_iclass (opc, ics[rs->chks[j]], NULL, NULL, &ic_note))\n             {\n               /* We can ignore ic_note 11 for non PR resources.  */\n-              if (ic_note == 11 && ! CONST_STRNEQ (rs->name, \"PR\"))\n+              if (ic_note == 11 && ! startswith (rs->name, \"PR\"))\n                 ic_note = 0;\n \n               if (ic_note != 0 && rs->chknotes[j] != 0"
    },
    {
      "sha": "d1f73b4d9f64c4fecaab1ed6ef3805473c893bc7",
      "filename": "opcodes/mips-dis.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/mips-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/mips-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/mips-dis.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -923,7 +923,7 @@ set_default_mips_dis_options (struct disassemble_info *info)\n static bfd_boolean\n parse_mips_ase_option (const char *option)\n {\n-  if (CONST_STRNEQ (option, \"msa\"))\n+  if (startswith (option, \"msa\"))\n     {\n       mips_ase |= ASE_MSA;\n       if ((mips_isa & INSN_ISA_MASK) == ISA_MIPS64R2\n@@ -934,7 +934,7 @@ parse_mips_ase_option (const char *option)\n       return TRUE;\n     }\n \n-  if (CONST_STRNEQ (option, \"virt\"))\n+  if (startswith (option, \"virt\"))\n     {\n       mips_ase |= ASE_VIRT;\n       if (mips_isa & ISA_MIPS64R2\n@@ -945,38 +945,38 @@ parse_mips_ase_option (const char *option)\n       return TRUE;\n     }\n \n-  if (CONST_STRNEQ (option, \"xpa\"))\n+  if (startswith (option, \"xpa\"))\n     {\n       mips_ase |= ASE_XPA;\n       return TRUE;\n     }\n \n-  if (CONST_STRNEQ (option, \"ginv\"))\n+  if (startswith (option, \"ginv\"))\n     {\n       mips_ase |= ASE_GINV;\n       return TRUE;\n     }\n \n-  if (CONST_STRNEQ (option, \"loongson-mmi\"))\n+  if (startswith (option, \"loongson-mmi\"))\n     {\n       mips_ase |= ASE_LOONGSON_MMI;\n       return TRUE;\n     }\n \n-  if (CONST_STRNEQ (option, \"loongson-cam\"))\n+  if (startswith (option, \"loongson-cam\"))\n     {\n       mips_ase |= ASE_LOONGSON_CAM;\n       return TRUE;\n     }\n   \n   /* Put here for match ext2 frist */\n-  if (CONST_STRNEQ (option, \"loongson-ext2\"))\n+  if (startswith (option, \"loongson-ext2\"))\n     {\n       mips_ase |= ASE_LOONGSON_EXT2;\n       return TRUE;\n     }\n \n-  if (CONST_STRNEQ (option, \"loongson-ext\"))\n+  if (startswith (option, \"loongson-ext\"))\n     {\n       mips_ase |= ASE_LOONGSON_EXT;\n       return TRUE;\n@@ -994,7 +994,7 @@ parse_mips_dis_option (const char *option, unsigned int len)\n   const struct mips_arch_choice *chosen_arch;\n \n   /* Try to match options that are simple flags */\n-  if (CONST_STRNEQ (option, \"no-aliases\"))\n+  if (startswith (option, \"no-aliases\"))\n     {\n       no_aliases = 1;\n       return;"
    },
    {
      "sha": "4708b094560f4568bd66379892248ea9a5c712fa",
      "filename": "opcodes/s390-dis.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/s390-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/s390-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/s390-dis.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -65,11 +65,11 @@ disassemble_init_s390 (struct disassemble_info *info)\n \n   for (p = info->disassembler_options; p != NULL; )\n     {\n-      if (CONST_STRNEQ (p, \"esa\"))\n+      if (startswith (p, \"esa\"))\n \tcurrent_arch_mask = 1 << S390_OPCODE_ESA;\n-      else if (CONST_STRNEQ (p, \"zarch\"))\n+      else if (startswith (p, \"zarch\"))\n \tcurrent_arch_mask = 1 << S390_OPCODE_ZARCH;\n-      else if (CONST_STRNEQ (p, \"insnlength\"))\n+      else if (startswith (p, \"insnlength\"))\n \toption_use_insn_len_bits_p = 1;\n       else\n \t/* xgettext:c-format */"
    },
    {
      "sha": "69266610ad317ed74d8f7009ce13b3c6468c6870",
      "filename": "opcodes/wasm32-dis.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/wasm32-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08dedd6631efefbcba63c4dbf60ef97fb615e022/opcodes/wasm32-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/wasm32-dis.c?ref=08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "patch": "@@ -120,9 +120,9 @@ parse_wasm32_disassembler_options (struct disassemble_info *info,\n \n   while (opts != NULL)\n     {\n-      if (CONST_STRNEQ (opts, \"registers\"))\n+      if (startswith (opts, \"registers\"))\n         private->print_registers = TRUE;\n-      else if (CONST_STRNEQ (opts, \"globals\"))\n+      else if (startswith (opts, \"globals\"))\n         private->print_well_known_globals = TRUE;\n \n       opts = strchr (opts, ',');"
    }
  ]
}