{
  "sha": "26503e2f5eae6019c8649a3dd204a82705efc740",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjY1MDNlMmY1ZWFlNjAxOWM4NjQ5YTNkZDIwNGE4MjcwNWVmYzc0MA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-19T12:45:18Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-19T12:45:20Z"
    },
    "message": "libctf, create: fix ctf_type_add of structs with unnamed members\n\nOur recent commit to support unnamed structure members better ditched\nthe old ctf_member_iter iterator body in favour of ctf_member_next.\nHowever, these functions treat unnamed structure members differently:\nctf_member_iter just returned whatever the internal representation\ncontained, while ctf_member_next took care to always return \"\" rather\nthan sometimes returning \"\" and sometimes NULL depending on whether the\ndict was dynamic (a product of ctf_create) or not (a product of\nctf_open).  After this commit, ctf_member_iter did the same.\n\nIt was always a bug for external callers not to treat a \"\" return from\nthese functions as if it were NULL, so only buggy callers could be\naffected -- but one of those buggy callers was ctf_add_type, which\nassumed that it could just take whatever name was returned from\nctf_member_iter and slam it directly into the internal representation of\na dynamic dict -- which expects NULL for unnamed members, not \"\".  The\nnet effect of all of this is that taking a struct containing unnamed\nmembers and ctf_add_type'ing it into a dynamic dict produced a dict\nwhose unnamed members were inaccessible to ctf_member_info (though if\nyou wrote that dict out and then ctf_open'ed it, they would magically\nreappear again).\n\nCompensate for this by suitably transforming a \"\" name into NULL in the\ninternal representation, as should have been done all along.\n\nlibctf/ChangeLog\n2021-01-19  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-create.c (membadd): Transform \"\"-named members into\n\tNULL-named ones.\n\t* testsuite/libctf-regression/type-add-unnamed-struct*: New test.",
    "tree": {
      "sha": "8fc3af414a9e4af4fb532b64a8492a1ae434142a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8fc3af414a9e4af4fb532b64a8492a1ae434142a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/26503e2f5eae6019c8649a3dd204a82705efc740",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26503e2f5eae6019c8649a3dd204a82705efc740",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/26503e2f5eae6019c8649a3dd204a82705efc740",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26503e2f5eae6019c8649a3dd204a82705efc740/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03"
    }
  ],
  "stats": {
    "total": 106,
    "additions": 106,
    "deletions": 0
  },
  "files": [
    {
      "sha": "3a7f6ab1cedf26cf3c04e3db1a3d00405416e756",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26503e2f5eae6019c8649a3dd204a82705efc740/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26503e2f5eae6019c8649a3dd204a82705efc740/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=26503e2f5eae6019c8649a3dd204a82705efc740",
      "patch": "@@ -1,3 +1,9 @@\n+2021-01-19  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-create.c (membadd): Transform \"\"-named members into\n+\tNULL-named ones.\n+\t* testsuite/libctf-regression/type-add-unnamed-struct*: New test.\n+\n 2021-01-19  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-lookup.c (ctf_lookup_by_name_internal): Do not return the"
    },
    {
      "sha": "50f48eb1bb9298bb3f8fcbf5acb0459beed112d9",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26503e2f5eae6019c8649a3dd204a82705efc740/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26503e2f5eae6019c8649a3dd204a82705efc740/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=26503e2f5eae6019c8649a3dd204a82705efc740",
      "patch": "@@ -2403,6 +2403,12 @@ membadd (const char *name, ctf_id_t type, unsigned long offset, void *arg)\n   if ((dmd = malloc (sizeof (ctf_dmdef_t))) == NULL)\n     return (ctf_set_errno (ctb->ctb_dict, EAGAIN));\n \n+  /* Unnamed members in non-dynamic dicts have a name of \"\", while dynamic dicts\n+     use NULL.  Adapt.  */\n+\n+  if (name[0] == 0)\n+    name = NULL;\n+\n   if (name != NULL && (s = strdup (name)) == NULL)\n     {\n       free (dmd);"
    },
    {
      "sha": "d319aafbac1ee26f245fb31e65da3aa8c03b0fc6",
      "filename": "libctf/testsuite/libctf-regression/type-add-unnamed-struct-ctf.c",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26503e2f5eae6019c8649a3dd204a82705efc740/libctf/testsuite/libctf-regression/type-add-unnamed-struct-ctf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26503e2f5eae6019c8649a3dd204a82705efc740/libctf/testsuite/libctf-regression/type-add-unnamed-struct-ctf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/libctf-regression/type-add-unnamed-struct-ctf.c?ref=26503e2f5eae6019c8649a3dd204a82705efc740",
      "patch": "@@ -0,0 +1,19 @@\n+struct foo\n+{\n+  union\n+  {\n+    struct\n+    {\n+      int bar;\n+    };\n+  };\n+  union\n+  {\n+    struct\n+    {\n+      int baz;\n+    };\n+  };\n+};\n+\n+struct foo *bar;"
    },
    {
      "sha": "98be257991ab4e4b3d7702a380aa89481828e261",
      "filename": "libctf/testsuite/libctf-regression/type-add-unnamed-struct.c",
      "status": "added",
      "additions": 72,
      "deletions": 0,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26503e2f5eae6019c8649a3dd204a82705efc740/libctf/testsuite/libctf-regression/type-add-unnamed-struct.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26503e2f5eae6019c8649a3dd204a82705efc740/libctf/testsuite/libctf-regression/type-add-unnamed-struct.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/libctf-regression/type-add-unnamed-struct.c?ref=26503e2f5eae6019c8649a3dd204a82705efc740",
      "patch": "@@ -0,0 +1,72 @@\n+#include <ctf-api.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  ctf_dict_t *fp;\n+  ctf_archive_t *ctf;\n+  ctf_dict_t *dyn;\n+  ctf_next_t *i = NULL;\n+  ctf_id_t type;\n+  ctf_id_t newtype;\n+  const char *memb;\n+  ctf_membinfo_t mi;\n+  const char *membs[] = { \"bar\", \"baz\", NULL };\n+  const char **walk;\n+  int err;\n+\n+  if (argc != 2)\n+    {\n+      fprintf (stderr, \"Syntax: %s PROGRAM\\n\", argv[0]);\n+      exit(1);\n+    }\n+\n+  if ((ctf = ctf_open (argv[1], NULL, &err)) == NULL)\n+    goto open_err;\n+\n+  if ((fp = ctf_dict_open (ctf, NULL, &err)) == NULL)\n+    goto open_err;\n+\n+  if ((dyn = ctf_create (&err)) == NULL)\n+    goto create_err;\n+\n+  /* Copy 'struct foo' into the dynamic dict, then make sure we can look up a\n+     member situated inside an unnamed struct.  */\n+\n+  if ((type = ctf_lookup_by_name (fp, \"struct foo\")) == CTF_ERR)\n+    {\n+      fprintf (stderr, \"Cannot look up struct foo: %s\\n\", ctf_errmsg (ctf_errno (dyn)));\n+      return 1;\n+    }\n+\n+  if ((newtype = ctf_add_type (dyn, fp, type)) == CTF_ERR)\n+    goto copy_err;\n+\n+  for (walk = membs; *walk != NULL; walk++)\n+    {\n+      if (ctf_member_info (dyn, newtype, *walk, &mi) < 0)\n+        goto lookup_err;\n+      printf (\"Looked up %s, type %lx, offset %lx\\n\", *walk, (long) mi.ctm_type, mi.ctm_offset);\n+    }\n+\n+  ctf_dict_close (dyn);\n+  ctf_dict_close (fp);\n+  ctf_close (ctf);\n+\n+  return 0;\n+\n+ open_err:\n+  fprintf (stderr, \"%s: cannot open: %s\\n\", argv[0], ctf_errmsg (err));\n+  return 1;\n+ create_err:\n+  fprintf (stderr, \"%s: cannot create: %s\\n\", argv[0], ctf_errmsg (err));\n+  return 1;\n+ copy_err:\n+  fprintf (stderr, \"Type addition failed: %s\\n\", ctf_errmsg (ctf_errno (dyn)));\n+  return 1;\n+ lookup_err:\n+  fprintf (stderr, \"Cannot look up %s: %s\\n\", *walk, ctf_errmsg (ctf_errno (dyn)));\n+  return 1;\n+}"
    },
    {
      "sha": "caa8934ed2eab8cf01c38d121336ca9ceaa1d6e0",
      "filename": "libctf/testsuite/libctf-regression/type-add-unnamed-struct.lk",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26503e2f5eae6019c8649a3dd204a82705efc740/libctf/testsuite/libctf-regression/type-add-unnamed-struct.lk",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26503e2f5eae6019c8649a3dd204a82705efc740/libctf/testsuite/libctf-regression/type-add-unnamed-struct.lk",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/libctf-regression/type-add-unnamed-struct.lk?ref=26503e2f5eae6019c8649a3dd204a82705efc740",
      "patch": "@@ -0,0 +1,3 @@\n+# source: type-add-unnamed-struct-ctf.c\n+Looked up bar, type [0-9a-f]*, offset [0-9a-f]*\n+Looked up baz, type [0-9a-f]*, offset [0-9a-f]*"
    }
  ]
}