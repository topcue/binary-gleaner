{
  "sha": "0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGIyYjBiODIyMGY0NDMwZjgzYzQ5Y2EyZGE2MmYyN2I2YjE5NjRkMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:43Z"
    },
    "message": "Remove EVAL_SKIP\n\nEVAL_SKIP was needed in the old expression implementation due to its\nlinearized tree structure.  This is not needed in the new\nimplementation, because it is trivial to not evaluate a subexpression.\nThis patch removes the last vestiges of EVAL_SKIP.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* value.h (eval_skip_value): Don't declare.\n\t* opencl-lang.c (eval_opencl_assign): Update.\n\t* m2-lang.c (eval_op_m2_high, eval_op_m2_subscript): Update.\n\t* f-lang.c (eval_op_f_abs, eval_op_f_mod, eval_op_f_ceil)\n\t(eval_op_f_floor, eval_op_f_modulo, eval_op_f_cmplx): Remove.\n\t* expression.h (enum noside) <EVAL_SKIP>: Remove.\n\t* expop.h (typeof_operation::evaluate)\n\t(decltype_operation::evaluate, unop_addr_operation::evaluate)\n\t(unop_sizeof_operation::evaluate, assign_operation::evaluate)\n\t(cxx_cast_operation::evaluate): Update.\n\t* eval.c (eval_skip_value): Remove.\n\t(eval_op_scope, eval_op_var_entry_value)\n\t(eval_op_func_static_var, eval_op_string, eval_op_objc_selector)\n\t(eval_op_concat, eval_op_ternop, eval_op_structop_struct)\n\t(eval_op_structop_ptr, eval_op_member, eval_op_add, eval_op_sub)\n\t(eval_op_binary, eval_op_subscript, eval_op_equal)\n\t(eval_op_notequal, eval_op_less, eval_op_gtr, eval_op_geq)\n\t(eval_op_leq, eval_op_repeat, eval_op_plus, eval_op_neg)\n\t(eval_op_complement, eval_op_lognot, eval_op_ind)\n\t(eval_op_memval, eval_op_preinc, eval_op_predec)\n\t(eval_op_postinc, eval_op_postdec, eval_op_type)\n\t(eval_binop_assign_modify, eval_op_objc_msgcall)\n\t(eval_multi_subscript, logical_and_operation::evaluate)\n\t(logical_or_operation::evaluate, array_operation::evaluate)\n\t(operation::evaluate_for_cast)\n\t(var_msym_value_operation::evaluate_for_cast)\n\t(var_value_operation::evaluate_for_cast): Update.\n\t* c-lang.c (c_string_operation::evaluate): Update.\n\t* c-exp.h (objc_nsstring_operation::evaluate)\n\t(objc_selector_operation::evaluate): Update.\n\t* ada-lang.c (ada_assign_operation::evaluate)\n\t(eval_ternop_in_range, ada_unop_neg, ada_unop_in_range)\n\t(ada_atr_size): Update.",
    "tree": {
      "sha": "30730559a8bdaaa247e652e664df4b886d5d774b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/30730559a8bdaaa247e652e664df4b886d5d774b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "96db551d0627d1a3dcb5d0117a8b72e6c2658e0e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96db551d0627d1a3dcb5d0117a8b72e6c2658e0e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/96db551d0627d1a3dcb5d0117a8b72e6c2658e0e"
    }
  ],
  "stats": {
    "total": 220,
    "additions": 56,
    "deletions": 164
  },
  "files": [
    {
      "sha": "7e7a2c0d1a36382734d6be705e3958bd6c1f9e5f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
      "patch": "@@ -1,3 +1,39 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* value.h (eval_skip_value): Don't declare.\n+\t* opencl-lang.c (eval_opencl_assign): Update.\n+\t* m2-lang.c (eval_op_m2_high, eval_op_m2_subscript): Update.\n+\t* f-lang.c (eval_op_f_abs, eval_op_f_mod, eval_op_f_ceil)\n+\t(eval_op_f_floor, eval_op_f_modulo, eval_op_f_cmplx): Remove.\n+\t* expression.h (enum noside) <EVAL_SKIP>: Remove.\n+\t* expop.h (typeof_operation::evaluate)\n+\t(decltype_operation::evaluate, unop_addr_operation::evaluate)\n+\t(unop_sizeof_operation::evaluate, assign_operation::evaluate)\n+\t(cxx_cast_operation::evaluate): Update.\n+\t* eval.c (eval_skip_value): Remove.\n+\t(eval_op_scope, eval_op_var_entry_value)\n+\t(eval_op_func_static_var, eval_op_string, eval_op_objc_selector)\n+\t(eval_op_concat, eval_op_ternop, eval_op_structop_struct)\n+\t(eval_op_structop_ptr, eval_op_member, eval_op_add, eval_op_sub)\n+\t(eval_op_binary, eval_op_subscript, eval_op_equal)\n+\t(eval_op_notequal, eval_op_less, eval_op_gtr, eval_op_geq)\n+\t(eval_op_leq, eval_op_repeat, eval_op_plus, eval_op_neg)\n+\t(eval_op_complement, eval_op_lognot, eval_op_ind)\n+\t(eval_op_memval, eval_op_preinc, eval_op_predec)\n+\t(eval_op_postinc, eval_op_postdec, eval_op_type)\n+\t(eval_binop_assign_modify, eval_op_objc_msgcall)\n+\t(eval_multi_subscript, logical_and_operation::evaluate)\n+\t(logical_or_operation::evaluate, array_operation::evaluate)\n+\t(operation::evaluate_for_cast)\n+\t(var_msym_value_operation::evaluate_for_cast)\n+\t(var_value_operation::evaluate_for_cast): Update.\n+\t* c-lang.c (c_string_operation::evaluate): Update.\n+\t* c-exp.h (objc_nsstring_operation::evaluate)\n+\t(objc_selector_operation::evaluate): Update.\n+\t* ada-lang.c (ada_assign_operation::evaluate)\n+\t(eval_ternop_in_range, ada_unop_neg, ada_unop_in_range)\n+\t(ada_atr_size): Update.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* eval.c: Merge \"namespace\" scopes."
    },
    {
      "sha": "323168e1b30367565376e186f805a1deba17f048",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 12,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
      "patch": "@@ -9360,7 +9360,7 @@ ada_assign_operation::evaluate (struct type *expect_type,\n   if (VALUE_LVAL (arg1) == lval_internalvar)\n     type = NULL;\n   value *arg2 = std::get<1> (m_storage)->evaluate (type, exp, noside);\n-  if (noside == EVAL_SKIP || noside == EVAL_AVOID_SIDE_EFFECTS)\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return arg1;\n   if (VALUE_LVAL (arg1) == lval_internalvar)\n     {\n@@ -9684,9 +9684,6 @@ eval_ternop_in_range (struct type *expect_type, struct expression *exp,\n \t\t      enum noside noside,\n \t\t      value *arg1, value *arg2, value *arg3)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n-\n   binop_promote (exp->language_defn, exp->gdbarch, &arg1, &arg2);\n   binop_promote (exp->language_defn, exp->gdbarch, &arg1, &arg3);\n   struct type *type = language_bool_type (exp->language_defn, exp->gdbarch);\n@@ -9706,8 +9703,6 @@ ada_unop_neg (struct type *expect_type,\n \t      enum noside noside, enum exp_opcode op,\n \t      struct value *arg1)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   unop_promote (exp->language_defn, exp->gdbarch, &arg1);\n   return value_neg (arg1);\n }\n@@ -9720,9 +9715,6 @@ ada_unop_in_range (struct type *expect_type,\n \t\t   enum noside noside, enum exp_opcode op,\n \t\t   struct value *arg1, struct type *type)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n-\n   struct value *arg2, *arg3;\n   switch (type->code ())\n     {\n@@ -9779,9 +9771,7 @@ ada_atr_size (struct type *expect_type,\n   if (type->code () == TYPE_CODE_REF)\n     type = TYPE_TARGET_TYPE (type);\n \n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n-  else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return value_zero (builtin_type (exp->gdbarch)->builtin_int, not_lval);\n   else\n     return value_from_longest (builtin_type (exp->gdbarch)->builtin_int,"
    },
    {
      "sha": "1a69b1c79600e9a61c73a11c1a63d2c089e03c20",
      "filename": "gdb/c-exp.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/c-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/c-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.h?ref=0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
      "patch": "@@ -74,8 +74,6 @@ class objc_nsstring_operation\n \t\t   struct expression *exp,\n \t\t   enum noside noside) override\n   {\n-    if (noside == EVAL_SKIP)\n-      return eval_skip_value (exp);\n     const std::string &str = std::get<0> (m_storage);\n     return value_nsstring (exp->gdbarch, str.c_str (), str.size () + 1);\n   }\n@@ -95,8 +93,6 @@ class objc_selector_operation\n \t\t   struct expression *exp,\n \t\t   enum noside noside) override\n   {\n-    if (noside == EVAL_SKIP)\n-      return eval_skip_value (exp);\n     return eval_op_objc_selector (expect_type, exp, noside,\n \t\t\t\t  std::get<0> (m_storage).c_str ());\n   }"
    },
    {
      "sha": "98f4984b020e4d735f88baa7dfad6254ef2bbcf2",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 18,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
      "patch": "@@ -637,24 +637,9 @@ c_string_operation::evaluate (struct type *expect_type,\n \n   dest_charset = charset_for_string_type (dest_type, exp->gdbarch);\n \n-  if (noside != EVAL_SKIP)\n-    {\n-      for (const std::string &item : std::get<1> (m_storage))\n-\tparse_one_string (&output, item.c_str (), item.size (),\n-\t\t\t  dest_charset, type);\n-    }\n-\n-  if (noside == EVAL_SKIP)\n-    {\n-      /* Return a dummy value of the appropriate type.  */\n-      if (expect_type != NULL)\n-\tresult = allocate_value (expect_type);\n-      else if ((dest_type & C_CHAR) != 0)\n-\tresult = allocate_value (type);\n-      else\n-\tresult = value_cstring (\"\", 0, type);\n-      return result;\n-    }\n+  for (const std::string &item : std::get<1> (m_storage))\n+    parse_one_string (&output, item.c_str (), item.size (),\n+\t\t      dest_charset, type);\n \n   if ((dest_type & C_CHAR) != 0)\n     {"
    },
    {
      "sha": "9510eee962a5fe0e59ef3390559af6dc9469bf90",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 9,
      "deletions": 94,
      "changes": 103,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
      "patch": "@@ -601,14 +601,6 @@ evaluate_var_msym_value (enum noside noside,\n     return value_at_lazy (the_type, address);\n }\n \n-/* Helper for returning a value when handling EVAL_SKIP.  */\n-\n-value *\n-eval_skip_value (expression *exp)\n-{\n-  return value_from_longest (builtin_type (exp->gdbarch)->builtin_int, 1);\n-}\n-\n /* See expression.h.  */\n \n value *\n@@ -983,8 +975,6 @@ eval_op_scope (struct type *expect_type, struct expression *exp,\n \t       enum noside noside,\n \t       struct type *type, const char *string)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   struct value *arg1 = value_aggregate_elt (type, string, expect_type,\n \t\t\t\t\t    0, noside);\n   if (arg1 == NULL)\n@@ -998,8 +988,6 @@ struct value *\n eval_op_var_entry_value (struct type *expect_type, struct expression *exp,\n \t\t\t enum noside noside, symbol *sym)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return value_zero (SYMBOL_TYPE (sym), not_lval);\n \n@@ -1035,8 +1023,6 @@ eval_op_func_static_var (struct type *expect_type, struct expression *exp,\n \t\t\t enum noside noside,\n \t\t\t value *func, const char *var)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   CORE_ADDR addr = value_address (func);\n   const block *blk = block_for_pc (addr);\n   struct block_symbol sym = lookup_symbol (var, blk, VAR_DOMAIN, NULL);\n@@ -1081,8 +1067,6 @@ struct value *\n eval_op_string (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside, int len, const char *string)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   struct type *type = language_string_char_type (exp->language_defn,\n \t\t\t\t\t\t exp->gdbarch);\n   return value_string (string, len, type);\n@@ -1095,9 +1079,6 @@ eval_op_objc_selector (struct type *expect_type, struct expression *exp,\n \t\t       enum noside noside,\n \t\t       const char *sel)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n-\n   struct type *selector_type = builtin_type (exp->gdbarch)->builtin_data_ptr;\n   return value_from_longest (selector_type,\n \t\t\t     lookup_child_selector (exp->gdbarch, sel));\n@@ -1109,8 +1090,6 @@ struct value *\n eval_op_concat (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside, struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (binop_user_defined_p (BINOP_CONCAT, arg1, arg2))\n     return value_x_binop (arg1, arg2, BINOP_CONCAT, OP_NULL, noside);\n   else\n@@ -1124,8 +1103,6 @@ eval_op_ternop (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside,\n \t\tstruct value *array, struct value *low, struct value *upper)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   int lowbound = value_as_long (low);\n   int upperbound = value_as_long (upper);\n   return value_slice (array, lowbound, upperbound - lowbound + 1);\n@@ -1138,8 +1115,6 @@ eval_op_structop_struct (struct type *expect_type, struct expression *exp,\n \t\t\t enum noside noside,\n \t\t\t struct value *arg1, const char *string)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   struct value *arg3 = value_struct_elt (&arg1, NULL, string,\n \t\t\t\t\t NULL, \"structure\");\n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n@@ -1154,9 +1129,6 @@ eval_op_structop_ptr (struct type *expect_type, struct expression *exp,\n \t\t      enum noside noside,\n \t\t      struct value *arg1, const char *string)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n-\n   /* Check to see if operator '->' has been overloaded.  If so replace\n      arg1 with the value returned by evaluating operator->().  */\n   while (unop_user_defined_p (STRUCTOP_PTR, arg1))\n@@ -1215,9 +1187,6 @@ eval_op_member (struct type *expect_type, struct expression *exp,\n {\n   long mem_offset;\n \n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n-\n   struct value *arg3;\n   struct type *type = check_typedef (value_type (arg2));\n   switch (type->code ())\n@@ -1256,8 +1225,6 @@ eval_op_add (struct type *expect_type, struct expression *exp,\n \t     enum noside noside,\n \t     struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (binop_user_defined_p (BINOP_ADD, arg1, arg2))\n     return value_x_binop (arg1, arg2, BINOP_ADD, OP_NULL, noside);\n   else if (ptrmath_type_p (exp->language_defn, value_type (arg1))\n@@ -1280,8 +1247,6 @@ eval_op_sub (struct type *expect_type, struct expression *exp,\n \t     enum noside noside,\n \t     struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (binop_user_defined_p (BINOP_SUB, arg1, arg2))\n     return value_x_binop (arg1, arg2, BINOP_SUB, OP_NULL, noside);\n   else if (ptrmath_type_p (exp->language_defn, value_type (arg1))\n@@ -1308,8 +1273,6 @@ eval_op_binary (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside, enum exp_opcode op,\n \t\tstruct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (binop_user_defined_p (op, arg1, arg2))\n     return value_x_binop (arg1, arg2, op, OP_NULL, noside);\n   else\n@@ -1355,8 +1318,6 @@ eval_op_subscript (struct type *expect_type, struct expression *exp,\n \t\t   enum noside noside, enum exp_opcode op,\n \t\t   struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (binop_user_defined_p (op, arg1, arg2))\n     return value_x_binop (arg1, arg2, op, OP_NULL, noside);\n   else\n@@ -1391,8 +1352,6 @@ eval_op_equal (struct type *expect_type, struct expression *exp,\n \t       enum noside noside, enum exp_opcode op,\n \t       struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (binop_user_defined_p (op, arg1, arg2))\n     {\n       return value_x_binop (arg1, arg2, op, OP_NULL, noside);\n@@ -1414,8 +1373,6 @@ eval_op_notequal (struct type *expect_type, struct expression *exp,\n \t\t  enum noside noside, enum exp_opcode op,\n \t\t  struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (binop_user_defined_p (op, arg1, arg2))\n     {\n       return value_x_binop (arg1, arg2, op, OP_NULL, noside);\n@@ -1437,8 +1394,6 @@ eval_op_less (struct type *expect_type, struct expression *exp,\n \t      enum noside noside, enum exp_opcode op,\n \t      struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (binop_user_defined_p (op, arg1, arg2))\n     {\n       return value_x_binop (arg1, arg2, op, OP_NULL, noside);\n@@ -1460,8 +1415,6 @@ eval_op_gtr (struct type *expect_type, struct expression *exp,\n \t     enum noside noside, enum exp_opcode op,\n \t     struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (binop_user_defined_p (op, arg1, arg2))\n     {\n       return value_x_binop (arg1, arg2, op, OP_NULL, noside);\n@@ -1483,8 +1436,6 @@ eval_op_geq (struct type *expect_type, struct expression *exp,\n \t     enum noside noside, enum exp_opcode op,\n \t     struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (binop_user_defined_p (op, arg1, arg2))\n     {\n       return value_x_binop (arg1, arg2, op, OP_NULL, noside);\n@@ -1506,8 +1457,6 @@ eval_op_leq (struct type *expect_type, struct expression *exp,\n \t     enum noside noside, enum exp_opcode op,\n \t     struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (binop_user_defined_p (op, arg1, arg2))\n     {\n       return value_x_binop (arg1, arg2, op, OP_NULL, noside);\n@@ -1529,8 +1478,6 @@ eval_op_repeat (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside, enum exp_opcode op,\n \t\tstruct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   struct type *type = check_typedef (value_type (arg2));\n   if (type->code () != TYPE_CODE_INT\n       && type->code () != TYPE_CODE_ENUM)\n@@ -1551,8 +1498,6 @@ eval_op_plus (struct type *expect_type, struct expression *exp,\n \t      enum noside noside, enum exp_opcode op,\n \t      struct value *arg1)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (unop_user_defined_p (op, arg1))\n     return value_x_unop (arg1, op, noside);\n   else\n@@ -1569,8 +1514,6 @@ eval_op_neg (struct type *expect_type, struct expression *exp,\n \t     enum noside noside, enum exp_opcode op,\n \t     struct value *arg1)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (unop_user_defined_p (op, arg1))\n     return value_x_unop (arg1, op, noside);\n   else\n@@ -1587,8 +1530,6 @@ eval_op_complement (struct type *expect_type, struct expression *exp,\n \t\t    enum noside noside, enum exp_opcode op,\n \t\t    struct value *arg1)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (unop_user_defined_p (UNOP_COMPLEMENT, arg1))\n     return value_x_unop (arg1, UNOP_COMPLEMENT, noside);\n   else\n@@ -1605,8 +1546,6 @@ eval_op_lognot (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside, enum exp_opcode op,\n \t\tstruct value *arg1)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (unop_user_defined_p (op, arg1))\n     return value_x_unop (arg1, op, noside);\n   else\n@@ -1629,8 +1568,6 @@ eval_op_ind (struct type *expect_type, struct expression *exp,\n       || type->code () == TYPE_CODE_MEMBERPTR)\n     error (_(\"Attempt to dereference pointer \"\n \t     \"to member without an object\"));\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (unop_user_defined_p (UNOP_IND, arg1))\n     return value_x_unop (arg1, UNOP_IND, noside);\n   else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n@@ -1694,8 +1631,6 @@ eval_op_memval (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside,\n \t\tstruct value *arg1, struct type *type)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return value_zero (type, lval_memory);\n   else\n@@ -1709,7 +1644,7 @@ eval_op_preinc (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside, enum exp_opcode op,\n \t\tstruct value *arg1)\n {\n-  if (noside == EVAL_SKIP || noside == EVAL_AVOID_SIDE_EFFECTS)\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return arg1;\n   else if (unop_user_defined_p (op, arg1))\n     {\n@@ -1740,7 +1675,7 @@ eval_op_predec (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside, enum exp_opcode op,\n \t\tstruct value *arg1)\n {\n-  if (noside == EVAL_SKIP || noside == EVAL_AVOID_SIDE_EFFECTS)\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return arg1;\n   else if (unop_user_defined_p (op, arg1))\n     {\n@@ -1771,7 +1706,7 @@ eval_op_postinc (struct type *expect_type, struct expression *exp,\n \t\t enum noside noside, enum exp_opcode op,\n \t\t struct value *arg1)\n {\n-  if (noside == EVAL_SKIP || noside == EVAL_AVOID_SIDE_EFFECTS)\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return arg1;\n   else if (unop_user_defined_p (op, arg1))\n     {\n@@ -1805,7 +1740,7 @@ eval_op_postdec (struct type *expect_type, struct expression *exp,\n \t\t enum noside noside, enum exp_opcode op,\n \t\t struct value *arg1)\n {\n-  if (noside == EVAL_SKIP || noside == EVAL_AVOID_SIDE_EFFECTS)\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return arg1;\n   else if (unop_user_defined_p (op, arg1))\n     {\n@@ -1838,9 +1773,7 @@ struct value *\n eval_op_type (struct type *expect_type, struct expression *exp,\n \t      enum noside noside, struct type *type)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n-  else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return allocate_value (type);\n   else\n     error (_(\"Attempt to use a type name as an expression\"));\n@@ -1853,7 +1786,7 @@ eval_binop_assign_modify (struct type *expect_type, struct expression *exp,\n \t\t\t  enum noside noside, enum exp_opcode op,\n \t\t\t  struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP || noside == EVAL_AVOID_SIDE_EFFECTS)\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return arg1;\n   if (binop_user_defined_p (op, arg1, arg2))\n     return value_x_binop (arg1, arg2, BINOP_ASSIGN_MODIFY, op, noside);\n@@ -2103,8 +2036,6 @@ eval_op_objc_msgcall (struct type *expect_type, struct expression *exp,\n \tcalled_method = msg_send;\n     }\n \n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n \n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     {\n@@ -2160,8 +2091,6 @@ eval_multi_subscript (struct type *expect_type, struct expression *exp,\n \t\t      enum noside noside, value *arg1,\n \t\t      gdb::array_view<value *> args)\n {\n-  if (noside == EVAL_SKIP)\n-    return arg1;\n   for (value *arg2 : args)\n     {\n       if (binop_user_defined_p (MULTI_SUBSCRIPT, arg1, arg2))\n@@ -2249,8 +2178,6 @@ logical_and_operation::evaluate (struct type *expect_type,\n \t\t\t\t enum noside noside)\n {\n   value *arg1 = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n \n   value *arg2 = std::get<1> (m_storage)->evaluate (nullptr, exp,\n \t\t\t\t\t\t   EVAL_AVOID_SIDE_EFFECTS);\n@@ -2280,8 +2207,6 @@ logical_or_operation::evaluate (struct type *expect_type,\n \t\t\t\tenum noside noside)\n {\n   value *arg1 = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n \n   value *arg2 = std::get<1> (m_storage)->evaluate (nullptr, exp,\n \t\t\t\t\t\t   EVAL_AVOID_SIDE_EFFECTS);\n@@ -2406,7 +2331,7 @@ array_operation::evaluate (struct type *expect_type,\n   int nargs = tem3 - tem2 + 1;\n   struct type *type = expect_type ? check_typedef (expect_type) : nullptr;\n \n-  if (expect_type != nullptr && noside != EVAL_SKIP\n+  if (expect_type != nullptr\n       && type->code () == TYPE_CODE_STRUCT)\n     {\n       struct value *rec = allocate_value (expect_type);\n@@ -2415,7 +2340,7 @@ array_operation::evaluate (struct type *expect_type,\n       return evaluate_struct_tuple (rec, exp, noside, nargs);\n     }\n \n-  if (expect_type != nullptr && noside != EVAL_SKIP\n+  if (expect_type != nullptr\n       && type->code () == TYPE_CODE_ARRAY)\n     {\n       struct type *range_type = type->index_type ();\n@@ -2451,7 +2376,7 @@ array_operation::evaluate (struct type *expect_type,\n       return array;\n     }\n \n-  if (expect_type != nullptr && noside != EVAL_SKIP\n+  if (expect_type != nullptr\n       && type->code () == TYPE_CODE_SET)\n     {\n       struct value *set = allocate_value (expect_type);\n@@ -2524,8 +2449,6 @@ array_operation::evaluate (struct type *expect_type,\n \t objects.  */\n       argvec[tem] = in_args[tem]->evaluate_with_coercion (exp, noside);\n     }\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   return value_array (tem2, tem3, argvec);\n }\n \n@@ -2564,8 +2487,6 @@ operation::evaluate_for_cast (struct type *expect_type,\n \t\t\t      enum noside noside)\n {\n   value *val = evaluate (expect_type, exp, noside);\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   return value_cast (expect_type, val);\n }\n \n@@ -2833,9 +2754,6 @@ var_msym_value_operation::evaluate_for_cast (struct type *to_type,\n \t\t\t\t\tstd::get<1> (m_storage),\n \t\t\t\t\tstd::get<0> (m_storage));\n \n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n-\n   val = value_cast (to_type, val);\n \n   /* Don't allow e.g. '&(int)var_with_no_debug_info'.  */\n@@ -2857,9 +2775,6 @@ var_value_operation::evaluate_for_cast (struct type *to_type,\n \t\t\t\t   std::get<1> (m_storage),\n \t\t\t\t   std::get<0> (m_storage));\n \n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n-\n   val = value_cast (to_type, val);\n \n   /* Don't allow e.g. '&(int)var_with_no_debug_info'.  */"
    },
    {
      "sha": "c12a55e8db38a24696ca425efee14f8ce8699e4b",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 4,
      "deletions": 15,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
      "patch": "@@ -1581,9 +1581,7 @@ class typeof_operation\n \t\t   struct expression *exp,\n \t\t   enum noside noside) override\n   {\n-    if (noside == EVAL_SKIP)\n-      return eval_skip_value (exp);\n-    else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    if (noside == EVAL_AVOID_SIDE_EFFECTS)\n       return std::get<0> (m_storage)->evaluate (nullptr, exp,\n \t\t\t\t\t\tEVAL_AVOID_SIDE_EFFECTS);\n     else\n@@ -1606,9 +1604,7 @@ class decltype_operation\n \t\t   struct expression *exp,\n \t\t   enum noside noside) override\n   {\n-    if (noside == EVAL_SKIP)\n-      return eval_skip_value (exp);\n-    else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    if (noside == EVAL_AVOID_SIDE_EFFECTS)\n       {\n \tvalue *result\n \t  = std::get<0> (m_storage)->evaluate (nullptr, exp,\n@@ -1683,10 +1679,7 @@ class unop_addr_operation\n \t\t   enum noside noside) override\n   {\n     /* C++: check for and handle pointer to members.  */\n-    if (noside == EVAL_SKIP)\n-      return eval_skip_value (exp);\n-    else\n-      return std::get<0> (m_storage)->evaluate_for_address (exp, noside);\n+    return std::get<0> (m_storage)->evaluate_for_address (exp, noside);\n   }\n \n   enum exp_opcode opcode () const override\n@@ -1724,8 +1717,6 @@ class unop_sizeof_operation\n \t\t   struct expression *exp,\n \t\t   enum noside noside) override\n   {\n-    if (noside == EVAL_SKIP)\n-      return eval_skip_value (exp);\n     return std::get<0> (m_storage)->evaluate_for_sizeof (exp, noside);\n   }\n \n@@ -1908,7 +1899,7 @@ class assign_operation\n \t\t\t  : value_type (lhs));\n     value *rhs = std::get<1> (m_storage)->evaluate (xtype, exp, noside);\n \n-    if (noside == EVAL_SKIP || noside == EVAL_AVOID_SIDE_EFFECTS)\n+    if (noside == EVAL_AVOID_SIDE_EFFECTS)\n       return lhs;\n     if (binop_user_defined_p (BINOP_ASSIGN, lhs, rhs))\n       return value_x_binop (lhs, rhs, BINOP_ASSIGN, OP_NULL, noside);\n@@ -2049,8 +2040,6 @@ class cxx_cast_operation\n \t\t\t\t\t\t    EVAL_AVOID_SIDE_EFFECTS);\n     struct type *type = value_type (val);\n     value *rhs = std::get<1> (m_storage)->evaluate (type, exp, noside);\n-    if (noside == EVAL_SKIP)\n-      return eval_skip_value (exp);\n     return FUNC (type, rhs);\n   }\n "
    },
    {
      "sha": "3f1dff11c0ab5a437e251a349c73961d697061be",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
      "patch": "@@ -54,9 +54,6 @@ enum exp_opcode : uint8_t\n enum noside\n   {\n     EVAL_NORMAL,\n-    EVAL_SKIP,\t\t\t/* Only effect is to increment pos.\n-\t\t\t\t   Return type information where\n-\t\t\t\t   possible.  */\n     EVAL_AVOID_SIDE_EFFECTS\t/* Don't modify any variables or\n \t\t\t\t   call any functions.  The value\n \t\t\t\t   returned will have the correct"
    },
    {
      "sha": "1b66ae341598605957de656f3b8b01297e81e802",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 12,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
      "patch": "@@ -586,8 +586,6 @@ eval_op_f_abs (struct type *expect_type, struct expression *exp,\n \t       enum exp_opcode opcode,\n \t       struct value *arg1)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   struct type *type = value_type (arg1);\n   switch (type->code ())\n     {\n@@ -616,8 +614,6 @@ eval_op_f_mod (struct type *expect_type, struct expression *exp,\n \t       enum exp_opcode opcode,\n \t       struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   struct type *type = value_type (arg1);\n   if (type->code () != value_type (arg2)->code ())\n     error (_(\"non-matching types for parameters to MOD ()\"));\n@@ -655,8 +651,6 @@ eval_op_f_ceil (struct type *expect_type, struct expression *exp,\n \t\tenum exp_opcode opcode,\n \t\tstruct value *arg1)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   struct type *type = value_type (arg1);\n   if (type->code () != TYPE_CODE_FLT)\n     error (_(\"argument to CEILING must be of type float\"));\n@@ -675,8 +669,6 @@ eval_op_f_floor (struct type *expect_type, struct expression *exp,\n \t\t enum exp_opcode opcode,\n \t\t struct value *arg1)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   struct type *type = value_type (arg1);\n   if (type->code () != TYPE_CODE_FLT)\n     error (_(\"argument to FLOOR must be of type float\"));\n@@ -695,8 +687,6 @@ eval_op_f_modulo (struct type *expect_type, struct expression *exp,\n \t\t  enum exp_opcode opcode,\n \t\t  struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   struct type *type = value_type (arg1);\n   if (type->code () != value_type (arg2)->code ())\n     error (_(\"non-matching types for parameters to MODULO ()\"));\n@@ -737,8 +727,6 @@ eval_op_f_cmplx (struct type *expect_type, struct expression *exp,\n \t\t enum exp_opcode opcode,\n \t\t struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   struct type *type = builtin_f_type(exp->gdbarch)->builtin_complex_s16;\n   return value_literal_complex (arg1, arg2, type);\n }"
    },
    {
      "sha": "be1a8ed143739f20b30282dc929d2f476ffebfc1",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
      "patch": "@@ -37,7 +37,7 @@ eval_op_m2_high (struct type *expect_type, struct expression *exp,\n \t\t enum noside noside,\n \t\t struct value *arg1)\n {\n-  if (noside == EVAL_SKIP || noside == EVAL_AVOID_SIDE_EFFECTS)\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return arg1;\n   else\n     {\n@@ -68,8 +68,6 @@ eval_op_m2_subscript (struct type *expect_type, struct expression *exp,\n \t\t      enum noside noside,\n \t\t      struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP)\n-    return eval_skip_value (exp);\n   /* If the user attempts to subscript something that is not an\n      array or pointer type (like a plain int variable for example),\n      then report this as an error.  */"
    },
    {
      "sha": "1d6117a928518f72103f1f5e67d65e412e748922",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
      "patch": "@@ -681,7 +681,7 @@ eval_opencl_assign (struct type *expect_type, struct expression *exp,\n \t\t    enum noside noside, enum exp_opcode op,\n \t\t    struct value *arg1, struct value *arg2)\n {\n-  if (noside == EVAL_SKIP || noside == EVAL_AVOID_SIDE_EFFECTS)\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return arg1;\n \n   struct type *type1 = value_type (arg1);"
    },
    {
      "sha": "a691f3cf3ff8dbe196a3e124941cb533c942fe6b",
      "filename": "gdb/value.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/value.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b2b0b8220f4430f83c49ca2da62f27b6b1964d1/gdb/value.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.h?ref=0b2b0b8220f4430f83c49ca2da62f27b6b1964d1",
      "patch": "@@ -921,8 +921,6 @@ extern value *evaluate_var_msym_value (enum noside noside,\n \t\t\t\t       struct objfile *objfile,\n \t\t\t\t       minimal_symbol *msymbol);\n \n-extern value *eval_skip_value (expression *exp);\n-\n namespace expr { class operation; };\n extern void fetch_subexp_value (struct expression *exp,\n \t\t\t\texpr::operation *op,"
    }
  ]
}