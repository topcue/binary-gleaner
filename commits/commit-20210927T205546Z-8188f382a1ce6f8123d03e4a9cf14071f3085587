{
  "sha": "8188f382a1ce6f8123d03e4a9cf14071f3085587",
  "node_id": "C_kwDOANOeidoAKDgxODhmMzgyYTFjZTZmODEyM2QwM2U0YTljZjE0MDcxZjMwODU1ODc",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-09-10T20:42:53Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-27T20:55:46Z"
    },
    "message": "gdb.base/foll-fork.exp: use foreach_with_prefix to handle prefixes\n\nNo behavior change in the test expected, other than in the test names.\n\nChange-Id: I111137483858ab0f23138439f2930009779a2b3d",
    "tree": {
      "sha": "601351c77e4cb9753cea619a1950d679c29e28d0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/601351c77e4cb9753cea619a1950d679c29e28d0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8188f382a1ce6f8123d03e4a9cf14071f3085587",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8188f382a1ce6f8123d03e4a9cf14071f3085587",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8188f382a1ce6f8123d03e4a9cf14071f3085587",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8188f382a1ce6f8123d03e4a9cf14071f3085587/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cfda0b5619dd5e816fd0e6be2f8e826d92e839cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cfda0b5619dd5e816fd0e6be2f8e826d92e839cc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cfda0b5619dd5e816fd0e6be2f8e826d92e839cc"
    }
  ],
  "stats": {
    "total": 165,
    "additions": 81,
    "deletions": 84
  },
  "files": [
    {
      "sha": "3a0cc2fe45685680745819e4886761a2c9b162a9",
      "filename": "gdb/testsuite/gdb.base/foll-fork.exp",
      "status": "modified",
      "additions": 81,
      "deletions": 84,
      "changes": 165,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8188f382a1ce6f8123d03e4a9cf14071f3085587/gdb/testsuite/gdb.base/foll-fork.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8188f382a1ce6f8123d03e4a9cf14071f3085587/gdb/testsuite/gdb.base/foll-fork.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/foll-fork.exp?ref=8188f382a1ce6f8123d03e4a9cf14071f3085587",
      "patch": "@@ -79,109 +79,106 @@ proc_with_prefix test_follow_fork { follow-fork-mode detach-on-fork cmd } {\n     global srcfile\n     global testfile\n \n-    with_test_prefix \"follow ${follow-fork-mode}, detach ${detach-on-fork}, command \\\"$cmd\\\"\" {\n-\n-\t# Start a new debugger session each time so defaults are legitimate.\n-\tif { ![setup] } {\n-\t    return\n-\t}\n+    # Start a new debugger session each time so defaults are legitimate.\n+    if { ![setup] } {\n+\treturn\n+    }\n \n-\t# The \"Detaching...\" and \"Attaching...\" messages may be hidden by\n-\t# default.\n-\tgdb_test_no_output \"set verbose\"\n+    # The \"Detaching...\" and \"Attaching...\" messages may be hidden by\n+    # default.\n+    gdb_test_no_output \"set verbose\"\n \n-\t# Set follow-fork-mode if we aren't using the default.\n-\tif {${follow-fork-mode} == \"default\"} {\n-\t    set follow-fork-mode \"parent\"\n-\t} else {\n-\t    gdb_test_no_output \"set follow-fork ${follow-fork-mode}\"\n-\t}\n+    # Set follow-fork-mode if we aren't using the default.\n+    if {${follow-fork-mode} == \"default\"} {\n+\tset follow-fork-mode \"parent\"\n+    } else {\n+\tgdb_test_no_output \"set follow-fork ${follow-fork-mode}\"\n+    }\n \n-\tgdb_test \"show follow-fork\" \\\n-\t\"Debugger response to a program call of fork or vfork is \\\"${follow-fork-mode}\\\".\"\n+    gdb_test \"show follow-fork\" \\\n+    \"Debugger response to a program call of fork or vfork is \\\"${follow-fork-mode}\\\".\"\n \n-\t# Set detach-on-fork mode if we aren't using the default.\n-\tif {${detach-on-fork} == \"default\"} {\n-\t    set detach-on-fork \"on\"\n-\t} else {\n-\t    gdb_test_no_output \"set detach-on-fork ${detach-on-fork}\"\n-\t}\n+    # Set detach-on-fork mode if we aren't using the default.\n+    if {${detach-on-fork} == \"default\"} {\n+\tset detach-on-fork \"on\"\n+    } else {\n+\tgdb_test_no_output \"set detach-on-fork ${detach-on-fork}\"\n+    }\n \n-\tgdb_test \"show detach-on-fork\" \\\n-\t\t \"Whether gdb will detach.* fork is ${detach-on-fork}.\"\n+    gdb_test \"show detach-on-fork\" \\\n+\t     \"Whether gdb will detach.* fork is ${detach-on-fork}.\"\n \n-\t# Set a breakpoint after the fork if we aren't single-stepping\n-\t# past the fork.\n-\tif {$cmd == \"continue\"} {\n-\t    set bp_after_fork [gdb_get_line_number \"set breakpoint here\"]\n-\t    gdb_test \"break ${srcfile}:$bp_after_fork\" \\\n-\t\t     \"Breakpoint.*, line $bp_after_fork.*\" \\\n-\t\t     \"set breakpoint after fork\"\n-\t}\n+    # Set a breakpoint after the fork if we aren't single-stepping\n+    # past the fork.\n+    if {$cmd == \"continue\"} {\n+\tset bp_after_fork [gdb_get_line_number \"set breakpoint here\"]\n+\tgdb_test \"break ${srcfile}:$bp_after_fork\" \\\n+\t\t \"Breakpoint.*, line $bp_after_fork.*\" \\\n+\t\t \"set breakpoint after fork\"\n+    }\n \n-\t# Set up the output we expect to see after we run.\n-\tset expected_re \"\"\n-\tif {${follow-fork-mode} == \"child\"} {\n-\t    set expected_re \"\\\\\\[Attaching after.* fork to.*\"\n-\t    if {${detach-on-fork} == \"on\"} {\n-\t\tappend expected_re \"\\\\\\[Detaching after fork from .*\"\n-\t    }\n-\t    append expected_re \"set breakpoint here.*\"\n-\t} elseif {${follow-fork-mode} == \"parent\" && ${detach-on-fork} == \"on\"} {\n-\t    set expected_re \"\\\\\\[Detaching after fork from .*set breakpoint here.*\"\n-\t} else {\n-\t    set expected_re \".*set breakpoint here.*\"\n+    # Set up the output we expect to see after we run.\n+    set expected_re \"\"\n+    if {${follow-fork-mode} == \"child\"} {\n+\tset expected_re \"\\\\\\[Attaching after.* fork to.*\"\n+\tif {${detach-on-fork} == \"on\"} {\n+\t    append expected_re \"\\\\\\[Detaching after fork from .*\"\n \t}\n+\tappend expected_re \"set breakpoint here.*\"\n+    } elseif {${follow-fork-mode} == \"parent\" && ${detach-on-fork} == \"on\"} {\n+\tset expected_re \"\\\\\\[Detaching after fork from .*set breakpoint here.*\"\n+    } else {\n+\tset expected_re \".*set breakpoint here.*\"\n+    }\n \n-\t# Test running past and following the fork, using the parameters\n-\t# set above.\n-\tgdb_test $cmd $expected_re \"$cmd past fork\"\n+    # Test running past and following the fork, using the parameters\n+    # set above.\n+    gdb_test $cmd $expected_re \"$cmd past fork\"\n \n-\t# Check that we have the inferiors arranged correctly after \n-\t# following the fork.\n-\tset resume_unfollowed 0\n-\tif {${follow-fork-mode} == \"parent\" && ${detach-on-fork} == \"on\"} {\n+    # Check that we have the inferiors arranged correctly after\n+    # following the fork.\n+    set resume_unfollowed 0\n+    if {${follow-fork-mode} == \"parent\" && ${detach-on-fork} == \"on\"} {\n \n-\t    # Follow parent / detach child: the only inferior is the parent.\n-\t    gdb_test \"info inferiors\" \"\\\\* 1 .* process.*\"\n+\t# Follow parent / detach child: the only inferior is the parent.\n+\tgdb_test \"info inferiors\" \"\\\\* 1 .* process.*\"\n \n-\t} elseif {${follow-fork-mode} == \"parent\" && ${detach-on-fork} == \"off\"} {\n+    } elseif {${follow-fork-mode} == \"parent\" && ${detach-on-fork} == \"off\"} {\n \n-\t    # Follow parent / keep child: two inferiors under debug, the\n-\t    # parent is the current inferior.\n-\t    gdb_test \"info inferiors\" \"\\\\* 1 .*process.* 2 .*process.*\"\n+\t# Follow parent / keep child: two inferiors under debug, the\n+\t# parent is the current inferior.\n+\tgdb_test \"info inferiors\" \"\\\\* 1 .*process.* 2 .*process.*\"\n \n-\t    gdb_test \"inferior 2\" \"Switching to inferior 2 .*\"\n-\t    set resume_unfollowed 1\n+\tgdb_test \"inferior 2\" \"Switching to inferior 2 .*\"\n+\tset resume_unfollowed 1\n \n-\t} elseif {${follow-fork-mode} == \"child\" && ${detach-on-fork} == \"on\"} {\n+    } elseif {${follow-fork-mode} == \"child\" && ${detach-on-fork} == \"on\"} {\n \n-\t    # Follow child / detach parent: the child is under debug and is\n-\t    # the current inferior.  The parent is listed but is not under\n-\t    # debug.\n-\t    gdb_test \"info inferiors\" \" 1 .*<null>.*\\\\* 2 .*process.*\"\n+\t# Follow child / detach parent: the child is under debug and is\n+\t# the current inferior.  The parent is listed but is not under\n+\t# debug.\n+\tgdb_test \"info inferiors\" \" 1 .*<null>.*\\\\* 2 .*process.*\"\n \n-\t} elseif {${follow-fork-mode} == \"child\" && ${detach-on-fork} == \"off\"} {\n+    } elseif {${follow-fork-mode} == \"child\" && ${detach-on-fork} == \"off\"} {\n \n-\t    # Follow child / keep parent: two inferiors under debug, the\n-\t    # child is the current inferior.\n-\t    gdb_test \"info inferiors\" \" 1 .*process.*\\\\* 2 .*process.*\"\n+\t# Follow child / keep parent: two inferiors under debug, the\n+\t# child is the current inferior.\n+\tgdb_test \"info inferiors\" \" 1 .*process.*\\\\* 2 .*process.*\"\n \n-\t    gdb_test \"inferior 1\" \"Switching to inferior 1 .*\"\n-\t    set resume_unfollowed 1\n-\t}\n+\tgdb_test \"inferior 1\" \"Switching to inferior 1 .*\"\n+\tset resume_unfollowed 1\n+    }\n \n-\tif {$resume_unfollowed == 1} {\n-\t    if {$cmd == \"next 2\"} {\n+    if {$resume_unfollowed == 1} {\n+\tif {$cmd == \"next 2\"} {\n \n-\t\tgdb_continue_to_end \"continue unfollowed inferior to end\"\n+\t    gdb_continue_to_end \"continue unfollowed inferior to end\"\n \n-\t    } elseif {$cmd == \"continue\"} {\n+\t} elseif {$cmd == \"continue\"} {\n \n-\t\tgdb_continue_to_breakpoint \\\n-\t\t    \"continue unfollowed inferior to bp\" \\\n-\t\t    \".* set breakpoint here.*\"\n-\t    }\n+\t    gdb_continue_to_breakpoint \\\n+\t\t\"continue unfollowed inferior to bp\" \\\n+\t\t\".* set breakpoint here.*\"\n \t}\n     }\n }\n@@ -395,14 +392,14 @@ if { ![check_fork_catchpoints] } {\n # The first loop should be sufficient to test the defaults.  There\n # is no need to test using the defaults in other permutations (e.g.\n # \"default\" \"on\", \"parent\" \"default\", etc.).\n-foreach cmd {\"next 2\" \"continue\"} {\n+foreach_with_prefix cmd {\"next 2\" \"continue\"} {\n     test_follow_fork \"default\" \"default\" $cmd\n }\n \n # Now test all explicit permutations.\n-foreach follow-fork-mode {\"parent\" \"child\"} {\n-    foreach detach-on-fork {\"on\" \"off\"} {\n-\tforeach cmd {\"next 2\" \"continue\"} {\n+foreach_with_prefix follow-fork-mode {\"parent\" \"child\"} {\n+    foreach_with_prefix detach-on-fork {\"on\" \"off\"} {\n+\tforeach_with_prefix cmd {\"next 2\" \"continue\"} {\n \t    test_follow_fork ${follow-fork-mode} ${detach-on-fork} $cmd\n \t}\n     }"
    }
  ]
}