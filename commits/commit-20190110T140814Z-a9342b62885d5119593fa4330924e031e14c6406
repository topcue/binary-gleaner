{
  "sha": "a9342b62885d5119593fa4330924e031e14c6406",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTkzNDJiNjI4ODVkNTExOTU5M2ZhNDMzMDkyNGUwMzFlMTRjNjQwNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-05-10T22:23:55Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-10T14:08:14Z"
    },
    "message": "Add psymtab_storage::allocate_dependencies\n\nThis adds a new method to psymtab_storage to allocate storage for\npsymtab dependencies, then changes the symbol readers to use it.  This\nhas the effect of moving the storage to the psymtab storage obstack.\n\ngdb/ChangeLog\n2019-01-10  Tom Tromey  <tom@tromey.com>\n\n\t* xcoffread.c (xcoff_end_psymtab): Use allocate_dependencies.\n\t* psymtab.h (psymtab_storage::allocate_dependencies): New method.\n\t* mdebugread.c (parse_partial_symbols): Use\n\tallocate_dependencies.\n\t* dwarf2read.c (dwarf2_create_include_psymtab): Use\n\tallocate_dependencies.\n\t(process_psymtab_comp_unit_reader)\n\t(build_type_psymtab_dependencies): Likewise.\n\t* dbxread.c (dbx_end_psymtab): Use allocate_dependencies.",
    "tree": {
      "sha": "c118820ae9c1187d770d85c1a44fca80dcccb60a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c118820ae9c1187d770d85c1a44fca80dcccb60a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a9342b62885d5119593fa4330924e031e14c6406",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9342b62885d5119593fa4330924e031e14c6406",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a9342b62885d5119593fa4330924e031e14c6406",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9342b62885d5119593fa4330924e031e14c6406/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5af70966484d6b26fa7824c0cda110140cd4959b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5af70966484d6b26fa7824c0cda110140cd4959b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5af70966484d6b26fa7824c0cda110140cd4959b"
    }
  ],
  "stats": {
    "total": 49,
    "additions": 33,
    "deletions": 16
  },
  "files": [
    {
      "sha": "5b7551b83e740131ec1964828ae25847c0a6c2ff",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9342b62885d5119593fa4330924e031e14c6406/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9342b62885d5119593fa4330924e031e14c6406/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a9342b62885d5119593fa4330924e031e14c6406",
      "patch": "@@ -1,3 +1,15 @@\n+2019-01-10  Tom Tromey  <tom@tromey.com>\n+\n+\t* xcoffread.c (xcoff_end_psymtab): Use allocate_dependencies.\n+\t* psymtab.h (psymtab_storage::allocate_dependencies): New method.\n+\t* mdebugread.c (parse_partial_symbols): Use\n+\tallocate_dependencies.\n+\t* dwarf2read.c (dwarf2_create_include_psymtab): Use\n+\tallocate_dependencies.\n+\t(process_psymtab_comp_unit_reader)\n+\t(build_type_psymtab_dependencies): Likewise.\n+\t* dbxread.c (dbx_end_psymtab): Use allocate_dependencies.\n+\n 2019-01-10  Tom Tromey  <tom@tromey.com>\n \n \t* psymtab.c (add_psymbol_to_bcache): Pass psymtab obstack to"
    },
    {
      "sha": "25bcc2778c57c100fc1e4c60cfef2c63f1f7f7c4",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9342b62885d5119593fa4330924e031e14c6406/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9342b62885d5119593fa4330924e031e14c6406/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=a9342b62885d5119593fa4330924e031e14c6406",
      "patch": "@@ -2023,9 +2023,8 @@ dbx_end_psymtab (struct objfile *objfile, struct partial_symtab *pst,\n   pst->number_of_dependencies = number_dependencies;\n   if (number_dependencies)\n     {\n-      pst->dependencies = XOBNEWVEC (&objfile->objfile_obstack,\n-\t\t\t\t     struct partial_symtab *,\n-\t\t\t\t     number_dependencies);\n+      pst->dependencies\n+\t= objfile->partial_symtabs->allocate_dependencies (number_dependencies);\n       memcpy (pst->dependencies, dependency_list,\n \t      number_dependencies * sizeof (struct partial_symtab *));\n     }\n@@ -2045,7 +2044,7 @@ dbx_end_psymtab (struct objfile *objfile, struct partial_symtab *pst,\n       /* We could save slight bits of space by only making one of these,\n          shared by the entire set of include files.  FIXME-someday.  */\n       subpst->dependencies =\n-\tXOBNEW (&objfile->objfile_obstack, struct partial_symtab *);\n+\tobjfile->partial_symtabs->allocate_dependencies (1);\n       subpst->dependencies[0] = pst;\n       subpst->number_of_dependencies = 1;\n "
    },
    {
      "sha": "7546c481812d3af64f6381f9b34261e5e8e24c04",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9342b62885d5119593fa4330924e031e14c6406/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9342b62885d5119593fa4330924e031e14c6406/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=a9342b62885d5119593fa4330924e031e14c6406",
      "patch": "@@ -6585,8 +6585,7 @@ dwarf2_create_include_psymtab (const char *name, struct partial_symtab *pst,\n       subpst->dirname = pst->dirname;\n     }\n \n-  subpst->dependencies\n-    = XOBNEW (&objfile->objfile_obstack, struct partial_symtab *);\n+  subpst->dependencies = objfile->partial_symtabs->allocate_dependencies (1);\n   subpst->dependencies[0] = pst;\n   subpst->number_of_dependencies = 1;\n \n@@ -8061,8 +8060,8 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n       /* Fill in 'dependencies' here; we fill in 'users' in a\n \t post-pass.  */\n       pst->number_of_dependencies = len;\n-      pst->dependencies =\n-\tXOBNEWVEC (&objfile->objfile_obstack, struct partial_symtab *, len);\n+      pst->dependencies\n+\t= objfile->partial_symtabs->allocate_dependencies (len);\n       for (i = 0;\n \t   VEC_iterate (dwarf2_per_cu_ptr, cu->per_cu->imported_symtabs,\n \t\t\ti, iter);\n@@ -8315,8 +8314,7 @@ build_type_psymtab_dependencies (void **slot, void *info)\n   gdb_assert (IS_TYPE_UNIT_GROUP (per_cu));\n \n   pst->number_of_dependencies = len;\n-  pst->dependencies =\n-    XOBNEWVEC (&objfile->objfile_obstack, struct partial_symtab *, len);\n+  pst->dependencies = objfile->partial_symtabs->allocate_dependencies (len);\n   for (i = 0;\n        VEC_iterate (sig_type_ptr, tu_group->tus, i, iter);\n        ++i)"
    },
    {
      "sha": "150cd16f3497ba036082a797aeacd32d28130fe6",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9342b62885d5119593fa4330924e031e14c6406/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9342b62885d5119593fa4330924e031e14c6406/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=a9342b62885d5119593fa4330924e031e14c6406",
      "patch": "@@ -3709,8 +3709,8 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n       /* Skip the first file indirect entry as it is a self dependency for\n          source files or a reverse .h -> .c dependency for header files.  */\n       pst->number_of_dependencies = 0;\n-      pst->dependencies = XOBNEWVEC (&objfile->objfile_obstack,\n-\t\t\t\t     partial_symtab *, (fh->crfd - 1));\n+      pst->dependencies\n+\t= objfile->partial_symtabs->allocate_dependencies (fh->crfd - 1);\n       for (s_idx = 1; s_idx < fh->crfd; s_idx++)\n \t{\n \t  RFDT rh;"
    },
    {
      "sha": "57570e3d2f41f4827692d0e37adacb70d0af31eb",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9342b62885d5119593fa4330924e031e14c6406/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9342b62885d5119593fa4330924e031e14c6406/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=a9342b62885d5119593fa4330924e031e14c6406",
      "patch": "@@ -20,6 +20,7 @@\n #ifndef PSYMTAB_H\n #define PSYMTAB_H\n \n+#include \"gdb_obstack.h\"\n #include \"symfile.h\"\n #include \"common/next-iterator.h\"\n \n@@ -62,6 +63,14 @@ class psymtab_storage\n     return m_obstack;\n   }\n \n+  /* Allocate storage for the \"dependencies\" field of a psymtab.\n+     NUMBER says how many dependencies there are.  */\n+\n+  struct partial_symtab **allocate_dependencies (int number)\n+  {\n+    return OBSTACK_CALLOC (obstack (), number, struct partial_symtab *);\n+  }\n+\n \n   /* Each objfile points to a linked list of partial symtabs derived from\n      this file, one partial symtab structure for each compilation unit"
    },
    {
      "sha": "e93a34b411f831d6ed1defa981c4b161fcc7a02c",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9342b62885d5119593fa4330924e031e14c6406/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9342b62885d5119593fa4330924e031e14c6406/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=a9342b62885d5119593fa4330924e031e14c6406",
      "patch": "@@ -2075,9 +2075,8 @@ xcoff_end_psymtab (struct objfile *objfile, struct partial_symtab *pst,\n   pst->number_of_dependencies = number_dependencies;\n   if (number_dependencies)\n     {\n-      pst->dependencies = XOBNEWVEC (&objfile->objfile_obstack,\n-\t\t\t\t     struct partial_symtab *,\n-\t\t\t\t     number_dependencies);\n+      pst->dependencies\n+\t= objfile->partial_symtabs->allocate_dependencies (number_dependencies);\n       memcpy (pst->dependencies, dependency_list,\n \t      number_dependencies * sizeof (struct partial_symtab *));\n     }\n@@ -2096,7 +2095,7 @@ xcoff_end_psymtab (struct objfile *objfile, struct partial_symtab *pst,\n       /* We could save slight bits of space by only making one of these,\n          shared by the entire set of include files.  FIXME-someday.  */\n       subpst->dependencies =\n-\t  XOBNEW (&objfile->objfile_obstack, struct partial_symtab *);\n+\tobjfile->partial_symtabs->allocate_dependencies (1);\n       subpst->dependencies[0] = pst;\n       subpst->number_of_dependencies = 1;\n "
    }
  ]
}