{
  "sha": "cc364be6ff45669150077387f22723de33d5f1b1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2MzNjRiZTZmZjQ1NjY5MTUwMDc3Mzg3ZjIyNzIzZGUzM2Q1ZjFiMQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-24T00:13:30Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-24T06:42:02Z"
    },
    "message": "Complain about mbind, ifunc, and unique in final_write\n\nIt's not as good as complaining in gas/config/obj-elf.c since you lose\nany reference to the source file.\n\nbfd/\n\t* elf-bfd.h (struct elf_backend_data): Return bfd_boolean from\n\telf_backend_final_write_processing, don't pass linker arg.\n\t(_bfd_elf_final_write_processing): Update prototype.\n\t* elf.c (_bfd_elf_write_object_contents): Adjust call.\n\t(_bfd_elf_final_write_processing): Return error on incompatible\n\tOSABI and has_gnu_osabi.  Remove linker arg.\n\t* elf-nacl.h (nacl_final_write_processing): Update prototype.\n\t* elf-vxworks.h (elf_vxworks_final_write_processing): Likewise.\n\t* elfxx-mips.h (_bfd_mips_final_write_processing): Likewise.\n\t(_bfd_mips_elf_final_write_processing): Likewise.\n\t* elf-hppa.h (elf_hppa_final_write_processing): Return status\n\tand remove linker arg.\n\t* elf-m10300.c (_bfd_mn10300_elf_final_write_processing): Likewise.\n\t* elf-nacl.c (nacl_final_write_processing): Likewise.\n\t* elf-vxworks.c (elf_vxworks_final_write_processing): Likewise.\n\t* elf32-arc.c (arc_elf_final_write_processing): Likewise.\n\t* elf32-arm.c (arm_final_write_processing): Likewise.\n\t(elf32_arm_final_write_processing): Likewise.\n\t(elf32_arm_nacl_final_write_processing): Likewise.\n\t(elf32_arm_vxworks_final_write_processing): Likewise.\n\t* elf32-avr.c (bfd_elf_avr_final_write_processing): Likewise.\n\t* elf32-bfin.c (elf32_bfin_final_write_processing): Likewise.\n\t* elf32-cr16.c (_bfd_cr16_elf_final_write_processing): Likewise.\n\t* elf32-cris.c (cris_elf_final_write_processing): Likewise.\n\t* elf32-h8300.c (elf32_h8_final_write_processing): Likewise.\n\t* elf32-lm32.c (lm32_elf_final_write_processing): Likewise.\n\t* elf32-m32r.c (m32r_elf_final_write_processing): Likewise.\n\t* elf32-m68k.c (elf_m68k_final_write_processing): Likewise.\n\t* elf32-mips.c (mips_vxworks_final_write_processing): Likewise.\n\t* elf32-msp430.c (bfd_elf_msp430_final_write_processing): Likewise.\n\t* elf32-nds32.c (nds32_elf_final_write_processing): Likewise.\n\t* elf32-or1k.c (or1k_elf_final_write_processing): Likewise.\n\t* elf32-pj.c (pj_elf_final_write_processing): Likewise.\n\t* elf32-ppc.c (ppc_final_write_processing): Likewise.\n\t(ppc_elf_final_write_processing): Likewise.\n\t(ppc_elf_vxworks_final_write_processing): Likewise.\n\t* elf32-sparc.c (sparc_final_write_processing): Likewise.\n\t(elf32_sparc_final_write_processing): Likewise.\n\t(elf32_sparc_vxworks_final_write_processing): Likewise.\n\t* elf32-v850.c (v850_elf_final_write_processing): Likewise.\n\t* elf32-xc16x.c (elf32_xc16x_final_write_processing): Likewise.\n\t* elf32-xtensa.c (elf_xtensa_final_write_processing): Likewise.\n\t* elf64-ia64-vms.c (elf64_vms_final_write_processing): Likewise.\n\t* elfnn-ia64.c (elfNN_ia64_final_write_processing): Likewise.\n\t* elfxx-mips.c (_bfd_mips_final_write_processing): Likewise.\n\t(_bfd_mips_elf_final_write_processing): Likewise.\ngas/\n\t* config/obj-elf.c (obj_elf_section, obj_elf_type): Set has_gnu_osabi.\n\t* testsuite/gas/elf/section12a.d: Update xfails.\n\t* testsuite/gas/elf/section12b.d: Likewise.",
    "tree": {
      "sha": "927f4388426d20c907ba4ada7efb51b5cf27ea29",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/927f4388426d20c907ba4ada7efb51b5cf27ea29"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cc364be6ff45669150077387f22723de33d5f1b1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc364be6ff45669150077387f22723de33d5f1b1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cc364be6ff45669150077387f22723de33d5f1b1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc364be6ff45669150077387f22723de33d5f1b1/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c5e20471be97e2dcd3498ac284487e2546715f66",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5e20471be97e2dcd3498ac284487e2546715f66",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c5e20471be97e2dcd3498ac284487e2546715f66"
    }
  ],
  "stats": {
    "total": 325,
    "additions": 198,
    "deletions": 127
  },
  "files": [
    {
      "sha": "6d7e42510aad2ac2a847175402fd9309da216d23",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1,3 +1,52 @@\n+2019-07-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf-bfd.h (struct elf_backend_data): Return bfd_boolean from\n+\telf_backend_final_write_processing, don't pass linker arg.\n+\t(_bfd_elf_final_write_processing): Update prototype.\n+\t* elf.c (_bfd_elf_write_object_contents): Adjust call.\n+\t(_bfd_elf_final_write_processing): Return error on incompatible\n+\tOSABI and has_gnu_osabi.  Remove linker arg.\n+\t* elf-nacl.h (nacl_final_write_processing): Update prototype.\n+\t* elf-vxworks.h (elf_vxworks_final_write_processing): Likewise.\n+\t* elfxx-mips.h (_bfd_mips_final_write_processing): Likewise.\n+\t(_bfd_mips_elf_final_write_processing): Likewise.\n+\t* elf-hppa.h (elf_hppa_final_write_processing): Return status\n+\tand remove linker arg.\n+\t* elf-m10300.c (_bfd_mn10300_elf_final_write_processing): Likewise.\n+\t* elf-nacl.c (nacl_final_write_processing): Likewise.\n+\t* elf-vxworks.c (elf_vxworks_final_write_processing): Likewise.\n+\t* elf32-arc.c (arc_elf_final_write_processing): Likewise.\n+\t* elf32-arm.c (arm_final_write_processing): Likewise.\n+\t(elf32_arm_final_write_processing): Likewise.\n+\t(elf32_arm_nacl_final_write_processing): Likewise.\n+\t(elf32_arm_vxworks_final_write_processing): Likewise.\n+\t* elf32-avr.c (bfd_elf_avr_final_write_processing): Likewise.\n+\t* elf32-bfin.c (elf32_bfin_final_write_processing): Likewise.\n+\t* elf32-cr16.c (_bfd_cr16_elf_final_write_processing): Likewise.\n+\t* elf32-cris.c (cris_elf_final_write_processing): Likewise.\n+\t* elf32-h8300.c (elf32_h8_final_write_processing): Likewise.\n+\t* elf32-lm32.c (lm32_elf_final_write_processing): Likewise.\n+\t* elf32-m32r.c (m32r_elf_final_write_processing): Likewise.\n+\t* elf32-m68k.c (elf_m68k_final_write_processing): Likewise.\n+\t* elf32-mips.c (mips_vxworks_final_write_processing): Likewise.\n+\t* elf32-msp430.c (bfd_elf_msp430_final_write_processing): Likewise.\n+\t* elf32-nds32.c (nds32_elf_final_write_processing): Likewise.\n+\t* elf32-or1k.c (or1k_elf_final_write_processing): Likewise.\n+\t* elf32-pj.c (pj_elf_final_write_processing): Likewise.\n+\t* elf32-ppc.c (ppc_final_write_processing): Likewise.\n+\t(ppc_elf_final_write_processing): Likewise.\n+\t(ppc_elf_vxworks_final_write_processing): Likewise.\n+\t* elf32-sparc.c (sparc_final_write_processing): Likewise.\n+\t(elf32_sparc_final_write_processing): Likewise.\n+\t(elf32_sparc_vxworks_final_write_processing): Likewise.\n+\t* elf32-v850.c (v850_elf_final_write_processing): Likewise.\n+\t* elf32-xc16x.c (elf32_xc16x_final_write_processing): Likewise.\n+\t* elf32-xtensa.c (elf_xtensa_final_write_processing): Likewise.\n+\t* elf64-ia64-vms.c (elf64_vms_final_write_processing): Likewise.\n+\t* elfnn-ia64.c (elfNN_ia64_final_write_processing): Likewise.\n+\t* elfxx-mips.c (_bfd_mips_final_write_processing): Likewise.\n+\t(_bfd_mips_elf_final_write_processing): Likewise.\n+\n 2019-07-24  Alan Modra  <amodra@gmail.com>\n \n \t* elf-vxworks.c (elf_vxworks_final_write_processing): Don't return"
    },
    {
      "sha": "8b87c66d4a1c0a35e7db8500c0010ddf779741c8",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1141,10 +1141,9 @@ struct elf_backend_data\n     (bfd *, struct bfd_link_info *);\n \n   /* A function to do any final processing needed for the ELF file\n-     before writing it out.  The LINKER argument is TRUE if this BFD\n-     was created by the ELF backend linker.  */\n-  void (*elf_backend_final_write_processing)\n-    (bfd *, bfd_boolean linker);\n+     before writing it out.  */\n+  bfd_boolean (*elf_backend_final_write_processing)\n+    (bfd *);\n \n   /* This function is called by get_program_header_size.  It should\n      return the number of additional program segments which this BFD\n@@ -2335,7 +2334,7 @@ extern struct bfd_link_hash_entry *bfd_elf_define_start_stop\n \n extern void _bfd_elf_post_process_headers (bfd *, struct bfd_link_info *);\n \n-extern void _bfd_elf_final_write_processing (bfd *, bfd_boolean);\n+extern bfd_boolean _bfd_elf_final_write_processing (bfd *);\n \n extern const bfd_target *bfd_elf32_object_p\n   (bfd *);"
    },
    {
      "sha": "cc98caeeb0b60984278a08bea066f9a9082404fd",
      "filename": "bfd/elf-hppa.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-hppa.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-hppa.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-hppa.h?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -923,8 +923,8 @@ elf_hppa_fake_sections (bfd *abfd, Elf_Internal_Shdr *hdr, asection *sec)\n   return TRUE;\n }\n \n-static void\n-elf_hppa_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf_hppa_final_write_processing (bfd *abfd)\n {\n   int mach = bfd_get_mach (abfd);\n \n@@ -947,7 +947,7 @@ elf_hppa_final_write_processing (bfd *abfd, bfd_boolean linker)\n \t\t\t\t\t a step backwards with the ELF\n \t\t\t\t\t based toolchains.  */\n \t\t\t\t      | EF_PARISC_TRAPNIL);\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Comparison function for qsort to sort unwind section during a"
    },
    {
      "sha": "acc3c54258eee10ddd98e7df51a100d6a45061a8",
      "filename": "bfd/elf-m10300.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-m10300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-m10300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-m10300.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -4667,8 +4667,8 @@ elf_mn10300_mach (flagword flags)\n    file.  This gets the MN10300 architecture right based on the machine\n    number.  */\n \n-static void\n-_bfd_mn10300_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+_bfd_mn10300_elf_final_write_processing (bfd *abfd)\n {\n   unsigned long val;\n \n@@ -4690,7 +4690,7 @@ _bfd_mn10300_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n \n   elf_elfheader (abfd)->e_flags &= ~ (EF_MN10300_MACH);\n   elf_elfheader (abfd)->e_flags |= val;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n static bfd_boolean"
    },
    {
      "sha": "58eebf6d75834b17e96f8593eb4b39d1ae924230",
      "filename": "bfd/elf-nacl.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-nacl.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-nacl.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-nacl.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -320,8 +320,8 @@ nacl_modify_program_headers (bfd *abfd, struct bfd_link_info *info)\n   return TRUE;\n }\n \n-void\n-nacl_final_write_processing (bfd *abfd, bfd_boolean linker)\n+bfd_boolean\n+nacl_final_write_processing (bfd *abfd)\n {\n   struct elf_segment_map *seg;\n   for (seg = elf_seg_map (abfd); seg != NULL; seg = seg->next)\n@@ -354,5 +354,5 @@ nacl_final_write_processing (bfd *abfd, bfd_boolean linker)\n \n \tfree (fill);\n       }\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }"
    },
    {
      "sha": "ba28c570f9418ff49280b07043e5ea99b2dd8864",
      "filename": "bfd/elf-nacl.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-nacl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-nacl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-nacl.h?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -18,4 +18,4 @@\n \n bfd_boolean nacl_modify_segment_map (bfd *, struct bfd_link_info *);\n bfd_boolean nacl_modify_program_headers (bfd *, struct bfd_link_info *);\n-void nacl_final_write_processing (bfd *, bfd_boolean linker);\n+bfd_boolean nacl_final_write_processing (bfd *);"
    },
    {
      "sha": "a7f574c2ef722124967b2d5a3f0c7b9704c2bb3b",
      "filename": "bfd/elf-vxworks.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-vxworks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-vxworks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-vxworks.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -212,8 +212,8 @@ elf_vxworks_emit_relocs (bfd *output_bfd,\n \n /* Set the sh_link and sh_info fields on the static plt relocation secton.  */\n \n-void\n-elf_vxworks_final_write_processing (bfd *abfd, bfd_boolean linker)\n+bfd_boolean\n+elf_vxworks_final_write_processing (bfd *abfd)\n {\n   asection * sec;\n   struct bfd_elf_section_data *d;\n@@ -229,7 +229,7 @@ elf_vxworks_final_write_processing (bfd *abfd, bfd_boolean linker)\n       if (sec)\n \td->this_hdr.sh_info = elf_section_data (sec)->this_idx;\n     }\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Add the dynamic entries required by VxWorks.  These point to the"
    },
    {
      "sha": "762dd8d135dedc84572d95060e2df50c2ee80475",
      "filename": "bfd/elf-vxworks.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-vxworks.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf-vxworks.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-vxworks.h?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -28,7 +28,7 @@ bfd_boolean elf_vxworks_link_output_symbol_hook\n bfd_boolean elf_vxworks_emit_relocs\n   (bfd *, asection *, Elf_Internal_Shdr *, Elf_Internal_Rela *,\n    struct elf_link_hash_entry **);\n-void elf_vxworks_final_write_processing (bfd *, bfd_boolean);\n+bfd_boolean elf_vxworks_final_write_processing (bfd *);\n bfd_boolean elf_vxworks_create_dynamic_sections\n   (bfd *, struct bfd_link_info *, asection **);\n bfd_boolean elf_vxworks_add_dynamic_entries (bfd *, struct bfd_link_info *);"
    },
    {
      "sha": "f47e88b2ac5af875445866452b5b91393f252be2",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 22,
      "deletions": 7,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -6568,7 +6568,8 @@ _bfd_elf_write_object_contents (bfd *abfd)\n \t  || !_bfd_elf_strtab_emit (abfd, elf_shstrtab (abfd))))\n     return FALSE;\n \n-  (*bed->elf_backend_final_write_processing) (abfd, elf_linker (abfd));\n+  if (!(*bed->elf_backend_final_write_processing) (abfd))\n+    return FALSE;\n \n   if (!bed->s->write_shdrs_and_ehdr (abfd))\n     return FALSE;\n@@ -12123,9 +12124,8 @@ _bfd_elf_post_process_headers (bfd *abfd ATTRIBUTE_UNUSED,\n {\n }\n \n-void\n-_bfd_elf_final_write_processing (bfd *abfd,\n-\t\t\t\t bfd_boolean linker ATTRIBUTE_UNUSED)\n+bfd_boolean\n+_bfd_elf_final_write_processing (bfd *abfd)\n {\n   Elf_Internal_Ehdr *i_ehdrp;\t/* ELF file header, internal form.  */\n \n@@ -12137,9 +12137,24 @@ _bfd_elf_final_write_processing (bfd *abfd,\n   /* Set the osabi field to ELFOSABI_GNU if the binary contains\n      SHF_GNU_MBIND sections or symbols of STT_GNU_IFUNC type or\n      STB_GNU_UNIQUE binding.  */\n-  if (i_ehdrp->e_ident[EI_OSABI] == ELFOSABI_NONE\n-      && elf_tdata (abfd)->has_gnu_osabi)\n-    i_ehdrp->e_ident[EI_OSABI] = ELFOSABI_GNU;\n+  if (elf_tdata (abfd)->has_gnu_osabi != 0)\n+    {\n+      if (i_ehdrp->e_ident[EI_OSABI] == ELFOSABI_NONE)\n+\ti_ehdrp->e_ident[EI_OSABI] = ELFOSABI_GNU;\n+      else if (i_ehdrp->e_ident[EI_OSABI] != ELFOSABI_GNU\n+\t       && i_ehdrp->e_ident[EI_OSABI] != ELFOSABI_FREEBSD)\n+\t{\n+\t  if (elf_tdata (abfd)->has_gnu_osabi & elf_gnu_osabi_mbind)\n+\t    _bfd_error_handler (_(\"GNU_MBIND section is unsupported\"));\n+\t  if (elf_tdata (abfd)->has_gnu_osabi & elf_gnu_osabi_ifunc)\n+\t    _bfd_error_handler (_(\"symbol type STT_GNU_IFUNC is unsupported\"));\n+\t  if (elf_tdata (abfd)->has_gnu_osabi & elf_gnu_osabi_unique)\n+\t    _bfd_error_handler (_(\"symbol binding STB_GNU_UNIQUE is unsupported\"));\n+\t  bfd_set_error (bfd_error_bad_value);\n+\t  return FALSE;\n+\t}\n+    }\n+  return TRUE;\n }\n \n "
    },
    {
      "sha": "c7ffc6a6f9df1d05fed79eba32ab83867af22ece",
      "filename": "bfd/elf32-arc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arc.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1016,8 +1016,8 @@ arc_elf_object_p (bfd * abfd)\n /* The final processing done just before writing out an ARC ELF object file.\n    This gets the ARC architecture right based on the machine number.  */\n \n-static void\n-arc_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+arc_elf_final_write_processing (bfd *abfd)\n {\n   unsigned long emf;\n   int osver = bfd_elf_get_obj_attr_int (abfd, OBJ_ATTR_PROC,\n@@ -1043,7 +1043,7 @@ arc_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n     e_flags |= E_ARC_OSABI_V3;\n \n   elf_elfheader (abfd)->e_flags |= e_flags;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n #ifdef ARC_ENABLE_DEBUG"
    },
    {
      "sha": "15591bee8ad9b47e73ab71abb8ec84e0303c16bf",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -17915,16 +17915,16 @@ elf32_arm_reloc_type_class (const struct bfd_link_info *info ATTRIBUTE_UNUSED,\n }\n \n static void\n-arm_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n+arm_final_write_processing (bfd *abfd)\n {\n   bfd_arm_update_notes (abfd, ARM_NOTE_SECTION);\n }\n \n-static void\n-elf32_arm_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf32_arm_final_write_processing (bfd *abfd)\n {\n-  arm_final_write_processing (abfd, linker);\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  arm_final_write_processing (abfd);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Return TRUE if this is an unwinding table entry.  */\n@@ -20600,11 +20600,11 @@ elf32_arm_nacl_modify_segment_map (bfd *abfd, struct bfd_link_info *info)\n \t  && nacl_modify_segment_map (abfd, info));\n }\n \n-static void\n-elf32_arm_nacl_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf32_arm_nacl_final_write_processing (bfd *abfd)\n {\n-  arm_final_write_processing (abfd, linker);\n-  nacl_final_write_processing (abfd, linker);\n+  arm_final_write_processing (abfd);\n+  return nacl_final_write_processing (abfd);\n }\n \n static bfd_vma\n@@ -20755,11 +20755,11 @@ elf32_arm_vxworks_link_hash_table_create (bfd *abfd)\n   return ret;\n }\n \n-static void\n-elf32_arm_vxworks_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf32_arm_vxworks_final_write_processing (bfd *abfd)\n {\n-  arm_final_write_processing (abfd, linker);\n-  elf_vxworks_final_write_processing (abfd, linker);\n+  arm_final_write_processing (abfd);\n+  return elf_vxworks_final_write_processing (abfd);\n }\n \n #undef  elf32_bed"
    },
    {
      "sha": "e75ac9fc1dbb9d56b6b703d57b49af1cee7b1b19",
      "filename": "bfd/elf32-avr.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-avr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-avr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-avr.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1536,8 +1536,8 @@ elf32_avr_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n    file.  This gets the AVR architecture right based on the machine\n    number.  */\n \n-static void\n-bfd_elf_avr_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+bfd_elf_avr_final_write_processing (bfd *abfd)\n {\n   unsigned long val;\n \n@@ -1620,7 +1620,7 @@ bfd_elf_avr_final_write_processing (bfd *abfd, bfd_boolean linker)\n   elf_elfheader (abfd)->e_machine = EM_AVR;\n   elf_elfheader (abfd)->e_flags &= ~ EF_AVR_MACH;\n   elf_elfheader (abfd)->e_flags |= val;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Set the right machine number.  */"
    },
    {
      "sha": "d73bfdaee399325858ca7468b80e447ce93d02a8",
      "filename": "bfd/elf32-bfin.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-bfin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-bfin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-bfin.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1133,14 +1133,14 @@ bfd_boolean elf32_bfin_code_in_l1 = 0;\n /* Set by ld emulation if --data-in-l1.  */\n bfd_boolean elf32_bfin_data_in_l1 = 0;\n \n-static void\n-elf32_bfin_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf32_bfin_final_write_processing (bfd *abfd)\n {\n   if (elf32_bfin_code_in_l1)\n     elf_elfheader (abfd)->e_flags |= EF_BFIN_CODE_IN_L1;\n   if (elf32_bfin_data_in_l1)\n     elf_elfheader (abfd)->e_flags |= EF_BFIN_DATA_IN_L1;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Return TRUE if the name is a local label."
    },
    {
      "sha": "7d0a0e558f1461db423e3447dd8bac88bbac200a",
      "filename": "bfd/elf32-cr16.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-cr16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-cr16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-cr16.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1673,8 +1673,8 @@ elf_cr16_mach (flagword flags)\n    file.  This gets the CR16 architecture right based on the machine\n    number.  */\n \n-static void\n-_bfd_cr16_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+_bfd_cr16_elf_final_write_processing (bfd *abfd)\n {\n   unsigned long val;\n   switch (bfd_get_mach (abfd))\n@@ -1684,8 +1684,8 @@ _bfd_cr16_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n \tval = EM_CR16;\n \tbreak;\n     }\n- elf_elfheader (abfd)->e_flags |= val;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  elf_elfheader (abfd)->e_flags |= val;\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n "
    },
    {
      "sha": "5d230562a5cefe39da657f4193b9f036b1ec2e4a",
      "filename": "bfd/elf32-cris.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-cris.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-cris.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-cris.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -3829,8 +3829,8 @@ cris_elf_object_p (bfd *abfd)\n /* Mark presence or absence of leading underscore.  Set machine type\n    flags from mach type.  */\n \n-static void\n-cris_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+cris_elf_final_write_processing (bfd *abfd)\n {\n   unsigned long e_flags = elf_elfheader (abfd)->e_flags;\n \n@@ -3858,7 +3858,7 @@ cris_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n     }\n \n   elf_elfheader (abfd)->e_flags = e_flags;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Set the mach type from e_flags value.  */"
    },
    {
      "sha": "a2f06d5a9285f8b3bfdeb45fc23c8878c463e5ef",
      "filename": "bfd/elf32-h8300.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-h8300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-h8300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-h8300.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -583,8 +583,8 @@ elf32_h8_mach (flagword flags)\n    file.  We use this opportunity to encode the BFD machine type\n    into the flags field in the object file.  */\n \n-static void\n-elf32_h8_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf32_h8_final_write_processing (bfd *abfd)\n {\n   unsigned long val;\n \n@@ -622,7 +622,7 @@ elf32_h8_final_write_processing (bfd *abfd, bfd_boolean linker)\n \n   elf_elfheader (abfd)->e_flags &= ~ (EF_H8_MACH);\n   elf_elfheader (abfd)->e_flags |= val;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Return nonzero if ABFD represents a valid H8 ELF object file; also"
    },
    {
      "sha": "5233dbbb67c94cb000ca0368e75598349e08a493",
      "filename": "bfd/elf32-lm32.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-lm32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-lm32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-lm32.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -555,8 +555,8 @@ lm32_elf_object_p (bfd *abfd)\n \n /* Set machine type flags just before file is written out. */\n \n-static void\n-lm32_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+lm32_elf_final_write_processing (bfd *abfd)\n {\n   elf_elfheader (abfd)->e_machine = EM_LATTICEMICO32;\n   elf_elfheader (abfd)->e_flags &=~ EF_LM32_MACH;\n@@ -568,7 +568,7 @@ lm32_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n       default:\n \tabort ();\n     }\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Set the GP value for OUTPUT_BFD.  Returns FALSE if this is a"
    },
    {
      "sha": "2f182e782d266e22bbb4c55fe1cd49e320728fa8",
      "filename": "bfd/elf32-m32r.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32r.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -3403,8 +3403,8 @@ m32r_elf_object_p (bfd *abfd)\n \n /* Store the machine number in the flags field.  */\n \n-static void\n-m32r_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+m32r_elf_final_write_processing (bfd *abfd)\n {\n   unsigned long val;\n \n@@ -3418,7 +3418,7 @@ m32r_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n \n   elf_elfheader (abfd)->e_flags &=~ EF_M32R_ARCH;\n   elf_elfheader (abfd)->e_flags |= val;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Function to keep M32R specific file flags.  */"
    },
    {
      "sha": "177be5d1d39bbfa78036f5d694fe134dfb0c752d",
      "filename": "bfd/elf32-m68k.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-m68k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-m68k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68k.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1053,8 +1053,8 @@ elf32_m68k_object_p (bfd *abfd)\n /* Somewhat reverse of elf32_m68k_object_p, this sets the e_flag\n    field based on the machine number.  */\n \n-static void\n-elf_m68k_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf_m68k_final_write_processing (bfd *abfd)\n {\n   int mach = bfd_get_mach (abfd);\n   unsigned long e_flags = elf_elfheader (abfd)->e_flags;\n@@ -1107,7 +1107,7 @@ elf_m68k_final_write_processing (bfd *abfd, bfd_boolean linker)\n \t}\n       elf_elfheader (abfd)->e_flags = e_flags;\n     }\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Keep m68k-specific flags in the ELF header.  */"
    },
    {
      "sha": "9f8f2bdc260d3131b85bbfeb97cc03cc6ff79066",
      "filename": "bfd/elf32-mips.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-mips.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -2643,11 +2643,11 @@ static const struct ecoff_debug_swap mips_elf32_ecoff_debug_swap = {\n #include \"elf32-target.h\"\n /* Implement elf_backend_final_write_processing for VxWorks.  */\n \n-static void\n-mips_vxworks_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+mips_vxworks_final_write_processing (bfd *abfd)\n {\n-  _bfd_mips_final_write_processing (abfd, linker);\n-  elf_vxworks_final_write_processing (abfd, linker);\n+  _bfd_mips_final_write_processing (abfd);\n+  return elf_vxworks_final_write_processing (abfd);\n }\n \n #undef TARGET_LITTLE_SYM"
    },
    {
      "sha": "fe5fd8ff8c109467be5e8b385a89089a4f2faa3b",
      "filename": "bfd/elf32-msp430.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-msp430.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1385,8 +1385,8 @@ elf32_msp430_relocate_section (bfd * output_bfd ATTRIBUTE_UNUSED,\n    file.  This gets the MSP430 architecture right based on the machine\n    number.  */\n \n-static void\n-bfd_elf_msp430_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+bfd_elf_msp430_final_write_processing (bfd *abfd)\n {\n   unsigned long val;\n \n@@ -1421,7 +1421,7 @@ bfd_elf_msp430_final_write_processing (bfd *abfd, bfd_boolean linker)\n   elf_elfheader (abfd)->e_machine = EM_MSP430;\n   elf_elfheader (abfd)->e_flags &= ~EF_MSP430_MACH;\n   elf_elfheader (abfd)->e_flags |= val;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Set the right machine number.  */"
    },
    {
      "sha": "27ffea2e69284b12c63725cdb6ac77dcb8ab5d4e",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -6672,8 +6672,8 @@ nds32_elf_object_p (bfd *abfd)\n \n /* Store the machine number in the flags field.  */\n \n-static void\n-nds32_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+nds32_elf_final_write_processing (bfd *abfd)\n {\n   unsigned long val;\n   static unsigned int cur_mach = 0;\n@@ -6710,7 +6710,7 @@ nds32_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n \n   elf_elfheader (abfd)->e_flags &= ~EF_NDS_ARCH;\n   elf_elfheader (abfd)->e_flags |= val;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Function to keep NDS32 specific file flags.  */"
    },
    {
      "sha": "c2069a3180ea5fab4bad8c66dc74ed4559ed06aa",
      "filename": "bfd/elf32-or1k.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-or1k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-or1k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-or1k.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -3156,8 +3156,8 @@ or1k_elf_object_p (bfd *abfd)\n \n /* Store the machine number in the flags field.  */\n \n-static void\n-or1k_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+or1k_elf_final_write_processing (bfd *abfd)\n {\n   switch (bfd_get_mach (abfd))\n     {\n@@ -3168,7 +3168,7 @@ or1k_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n       elf_elfheader (abfd)->e_flags |= EF_OR1K_NODELAY;\n       break;\n     }\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n static bfd_boolean"
    },
    {
      "sha": "14ccf5f7267cabc5e6f02333a66fbaeac0757f98",
      "filename": "bfd/elf32-pj.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-pj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-pj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-pj.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -336,12 +336,12 @@ pj_elf_info_to_howto (bfd *abfd,\n /* Take this moment to fill in the special picoJava bits in the\n    e_flags field.  */\n \n-static void\n-pj_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+pj_elf_final_write_processing (bfd *abfd)\n {\n   elf_elfheader (abfd)->e_flags |= EF_PICOJAVA_ARCH;\n   elf_elfheader (abfd)->e_flags |= EF_PICOJAVA_GNUCALLS;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n #define TARGET_BIG_SYM\t\tpj_elf32_vec"
    },
    {
      "sha": "e683590f417801cb6ea6d60aca4beb07e41e7b0e",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1705,7 +1705,7 @@ ppc_elf_write_section (bfd *abfd ATTRIBUTE_UNUSED,\n /* Finally we can generate the output section.  */\n \n static void\n-ppc_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n+ppc_final_write_processing (bfd *abfd)\n {\n   bfd_byte *buffer;\n   asection *asec;\n@@ -1757,11 +1757,11 @@ ppc_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n   apuinfo_list_finish ();\n }\n \n-static void\n-ppc_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+ppc_elf_final_write_processing (bfd *abfd)\n {\n-  ppc_final_write_processing (abfd, linker);\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  ppc_final_write_processing (abfd);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \f\n static bfd_boolean\n@@ -10494,11 +10494,11 @@ ppc_elf_vxworks_add_symbol_hook (bfd *abfd,\n   return ppc_elf_add_symbol_hook (abfd, info, sym, namep, flagsp, secp, valp);\n }\n \n-static void\n-ppc_elf_vxworks_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+ppc_elf_vxworks_final_write_processing (bfd *abfd)\n {\n-  ppc_final_write_processing (abfd, linker);\n-  elf_vxworks_final_write_processing (abfd, linker);\n+  ppc_final_write_processing (abfd);\n+  return elf_vxworks_final_write_processing (abfd);\n }\n \n /* On VxWorks, we emit relocations against _PROCEDURE_LINKAGE_TABLE_, so"
    },
    {
      "sha": "3304ec9fc16ffad08a13efa63242a5b4c4b8cae2",
      "filename": "bfd/elf32-sparc.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-sparc.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -117,7 +117,7 @@ elf32_sparc_merge_private_bfd_data (bfd *ibfd, struct bfd_link_info *info)\n    We need to set the e_machine field appropriately.  */\n \n static void\n-sparc_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n+sparc_final_write_processing (bfd *abfd)\n {\n   switch (bfd_get_mach (abfd))\n     {\n@@ -156,11 +156,11 @@ sparc_final_write_processing (bfd *abfd, bfd_boolean linker ATTRIBUTE_UNUSED)\n     }\n }\n \n-static void\n-elf32_sparc_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf32_sparc_final_write_processing (bfd *abfd)\n {\n-  sparc_final_write_processing (abfd, linker);\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  sparc_final_write_processing (abfd);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Used to decide how to sort relocs in an optimal manner for the\n@@ -327,11 +327,11 @@ elf32_sparc_vxworks_link_hash_table_create (bfd *abfd)\n /* A final_write_processing hook that does both the SPARC- and VxWorks-\n    specific handling.  */\n \n-static void\n-elf32_sparc_vxworks_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf32_sparc_vxworks_final_write_processing (bfd *abfd)\n {\n-  sparc_final_write_processing (abfd, linker);\n-  elf_vxworks_final_write_processing (abfd, linker);\n+  sparc_final_write_processing (abfd);\n+  return elf_vxworks_final_write_processing (abfd);\n }\n \n #undef  TARGET_BIG_SYM"
    },
    {
      "sha": "74e15463212b9d4c1842ab7cd6cda70bc34e3af6",
      "filename": "bfd/elf32-v850.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-v850.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-v850.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-v850.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -2718,8 +2718,8 @@ v850_elf_object_p (bfd *abfd)\n \n /* Store the machine number in the flags field.  */\n \n-static void\n-v850_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+v850_elf_final_write_processing (bfd *abfd)\n {\n   unsigned long val;\n \n@@ -2749,7 +2749,7 @@ v850_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n     default:\n       break;\n     }\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Function to keep V850 specific file flags.  */"
    },
    {
      "sha": "d000fd56c8544f62ec4e8f9e859ff05119b10070",
      "filename": "bfd/elf32-xc16x.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-xc16x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-xc16x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xc16x.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -416,8 +416,8 @@ elf32_xc16x_relocate_section (bfd *output_bfd,\n }\n \n \n-static void\n-elf32_xc16x_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf32_xc16x_final_write_processing (bfd *abfd)\n {\n   unsigned long val;\n \n@@ -438,7 +438,7 @@ elf32_xc16x_final_write_processing (bfd *abfd, bfd_boolean linker)\n     }\n \n   elf_elfheader (abfd)->e_flags |= val;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n static unsigned long"
    },
    {
      "sha": "93394547ce4a311c43ed3c06f4645a5c5444b06e",
      "filename": "bfd/elf32-xtensa.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf32-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xtensa.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -3462,8 +3462,8 @@ elf_xtensa_object_p (bfd *abfd)\n    file.  This gets the Xtensa architecture right based on the machine\n    number.  */\n \n-static void\n-elf_xtensa_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf_xtensa_final_write_processing (bfd *abfd)\n {\n   int mach;\n   unsigned long val = elf_elfheader (abfd)->e_flags & EF_XTENSA_MACH;\n@@ -3479,7 +3479,7 @@ elf_xtensa_final_write_processing (bfd *abfd, bfd_boolean linker)\n \n   elf_elfheader (abfd)->e_flags &= ~EF_XTENSA_MACH;\n   elf_elfheader (abfd)->e_flags |= val;\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n "
    },
    {
      "sha": "0ae9f353f48b0be1dc64fc0688143c9cc635e311",
      "filename": "bfd/elf64-ia64-vms.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf64-ia64-vms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elf64-ia64-vms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ia64-vms.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -4659,8 +4659,8 @@ elf64_vms_section_processing (bfd *abfd ATTRIBUTE_UNUSED,\n /* The final processing done just before writing out a VMS IA-64 ELF\n    object file.  */\n \n-static void\n-elf64_vms_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elf64_vms_final_write_processing (bfd *abfd)\n {\n   Elf_Internal_Shdr *hdr;\n   asection *s;\n@@ -4695,7 +4695,7 @@ elf64_vms_final_write_processing (bfd *abfd, bfd_boolean linker)\n       elf_elfheader (abfd)->e_flags = flags;\n       elf_flags_init (abfd) = TRUE;\n     }\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n static bfd_boolean"
    },
    {
      "sha": "65471dd4a49bd046a83b9c6029052a1f257b2066",
      "filename": "bfd/elfnn-ia64.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elfnn-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elfnn-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-ia64.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1002,8 +1002,8 @@ elfNN_ia64_fake_sections (bfd *abfd, Elf_Internal_Shdr *hdr,\n /* The final processing done just before writing out an IA-64 ELF\n    object file.  */\n \n-static void\n-elfNN_ia64_final_write_processing (bfd *abfd, bfd_boolean linker)\n+static bfd_boolean\n+elfNN_ia64_final_write_processing (bfd *abfd)\n {\n   Elf_Internal_Shdr *hdr;\n   asection *s;\n@@ -1035,7 +1035,7 @@ elfNN_ia64_final_write_processing (bfd *abfd, bfd_boolean linker)\n       elf_elfheader(abfd)->e_flags = flags;\n       elf_flags_init (abfd) = TRUE;\n     }\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \n /* Hook called by the linker routine which adds symbols from an object"
    },
    {
      "sha": "29ae4559266d8d43e7f99b98a5e02dafd0219e1b",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -12358,8 +12358,7 @@ _bfd_mips_elf_sort_relocs_p (asection *sec)\n    number.  This is used by both the 32-bit and the 64-bit ABI.  */\n \n void\n-_bfd_mips_final_write_processing (bfd *abfd,\n-\t\t\t\t  bfd_boolean linker ATTRIBUTE_UNUSED)\n+_bfd_mips_final_write_processing (bfd *abfd)\n {\n   unsigned int i;\n   Elf_Internal_Shdr **hdrpp;\n@@ -12439,11 +12438,11 @@ _bfd_mips_final_write_processing (bfd *abfd,\n     }\n }\n \n-void\n-_bfd_mips_elf_final_write_processing (bfd *abfd, bfd_boolean linker)\n+bfd_boolean\n+_bfd_mips_elf_final_write_processing (bfd *abfd)\n {\n-  _bfd_mips_final_write_processing (abfd, linker);\n-  _bfd_elf_final_write_processing (abfd, linker);\n+  _bfd_mips_final_write_processing (abfd);\n+  return _bfd_elf_final_write_processing (abfd);\n }\n \f\n /* When creating an IRIX5 executable, we need REGINFO and RTPROC"
    },
    {
      "sha": "0a901c6208a48275292894c354f60f73508bcd7e",
      "filename": "bfd/elfxx-mips.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elfxx-mips.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/bfd/elfxx-mips.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.h?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -70,9 +70,9 @@ extern bfd_boolean _bfd_mips_elf_finish_dynamic_sections\n extern bfd_boolean _bfd_mips_elf_sort_relocs_p\n   (asection *);\n extern void _bfd_mips_final_write_processing\n-  (bfd *, bfd_boolean);\n-extern void _bfd_mips_elf_final_write_processing\n-  (bfd *, bfd_boolean);\n+  (bfd *);\n+extern bfd_boolean _bfd_mips_elf_final_write_processing\n+  (bfd *);\n extern int _bfd_mips_elf_additional_program_headers\n   (bfd *, struct bfd_link_info *);\n extern bfd_boolean _bfd_mips_elf_modify_segment_map"
    },
    {
      "sha": "c08ccbc9b60ecbb8bba6e58c22f139ca97dbb26a",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1,3 +1,9 @@\n+2019-07-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/obj-elf.c (obj_elf_section, obj_elf_type): Set has_gnu_osabi.\n+\t* testsuite/gas/elf/section12a.d: Update xfails.\n+\t* testsuite/gas/elf/section12b.d: Likewise.\n+\n 2019-07-24  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/elf/section12a.d: xfail visium and cloudabi."
    },
    {
      "sha": "bdf3da811999b18279b7d866b2e395cef7e3a565",
      "filename": "gas/config/obj-elf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/gas/config/obj-elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/gas/config/obj-elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-elf.c?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -1242,6 +1242,7 @@ obj_elf_section (int push)\n \t       && bed->elf_osabi != ELFOSABI_FREEBSD)\n \tas_bad (_(\"GNU_MBIND section is supported only by GNU \"\n \t\t  \"and FreeBSD targets\"));\n+      elf_tdata (stdoutput)->has_gnu_osabi |= elf_gnu_osabi_mbind;\n     }\n   elf_section_flags (now_seg) |= gnu_attr;\n \n@@ -2060,6 +2061,7 @@ obj_elf_type (int ignore ATTRIBUTE_UNUSED)\n \t       && bed->elf_osabi != ELFOSABI_FREEBSD)\n \tas_bad (_(\"symbol type \\\"%s\\\" is supported only by GNU \"\n \t\t  \"and FreeBSD targets\"), type_name);\n+      elf_tdata (stdoutput)->has_gnu_osabi |= elf_gnu_osabi_ifunc;\n       type = BSF_FUNCTION | BSF_GNU_INDIRECT_FUNCTION;\n     }\n   else if (strcmp (type_name, \"gnu_unique_object\") == 0)\n@@ -2072,6 +2074,7 @@ obj_elf_type (int ignore ATTRIBUTE_UNUSED)\n       else if (bed->elf_osabi != ELFOSABI_GNU)\n \tas_bad (_(\"symbol type \\\"%s\\\" is supported only by GNU targets\"),\n \t\ttype_name);\n+      elf_tdata (stdoutput)->has_gnu_osabi |= elf_gnu_osabi_unique;\n       type = BSF_OBJECT | BSF_GNU_UNIQUE;\n     }\n #ifdef md_elf_symbol_type"
    },
    {
      "sha": "84c032f90e05cb12ebe632bff4959426c9364d35",
      "filename": "gas/testsuite/gas/elf/section12a.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/gas/testsuite/gas/elf/section12a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/gas/testsuite/gas/elf/section12a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section12a.d?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -3,7 +3,7 @@\n #readelf: -Sg --wide\n #name: mbind sections\n # A number of targets do not support SHF_GNU_MBIND\n-#xfail: msp430-*-* visium-*-*\n+#xfail: arm*-*-netbsdelf* arm*-*-nto* msp430-*-* visium-*-*\n #xfail: *-*-hpux* *-*-cloudabi\n \n #..."
    },
    {
      "sha": "847f9a8a18c79313fc1d721d8c7fadc910453118",
      "filename": "gas/testsuite/gas/elf/section12b.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc364be6ff45669150077387f22723de33d5f1b1/gas/testsuite/gas/elf/section12b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc364be6ff45669150077387f22723de33d5f1b1/gas/testsuite/gas/elf/section12b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section12b.d?ref=cc364be6ff45669150077387f22723de33d5f1b1",
      "patch": "@@ -6,7 +6,7 @@\n # expected below.\n #xfail: rx-*-*\n # A number of targets do not support SHF_GNU_MBIND\n-#xfail: msp430-*-* visium-*-*\n+#xfail: arm*-*-netbsdelf* arm*-*-nto* msp430-*-* visium-*-*\n #xfail: *-*-hpux* *-*-cloudabi\n \n #..."
    }
  ]
}