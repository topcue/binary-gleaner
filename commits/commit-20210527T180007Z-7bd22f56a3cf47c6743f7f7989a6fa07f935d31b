{
  "sha": "7bd22f56a3cf47c6743f7f7989a6fa07f935d31b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2JkMjJmNTZhM2NmNDdjNjc0M2Y3Zjc5ODlhNmZhMDdmOTM1ZDMxYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T17:59:00Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T18:00:07Z"
    },
    "message": "gdb/python: use return values of add_setshow functions in add_setshow_generic\n\nIn add_setshow_generic, we create set/show commands using add_setshow_*\nfunctions, then look up the commands by name to set the context pointer.\nIt would be simpler and more efficient to use the return values of the\nadd_setshow_* functions, do that.\n\ngdb/ChangeLog:\n\n\t* python/py-param.c (add_setshow_generic): Use return values of\n\tadd_setshow functions.\n\nChange-Id: I04d50736e1001ddb732d81e088468876df9c88ff",
    "tree": {
      "sha": "5d825ebce7ef9b3e2b75f1812451885946ae7e7e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5d825ebce7ef9b3e2b75f1812451885946ae7e7e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7bd22f56a3cf47c6743f7f7989a6fa07f935d31b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7bd22f56a3cf47c6743f7f7989a6fa07f935d31b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7bd22f56a3cf47c6743f7f7989a6fa07f935d31b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7bd22f56a3cf47c6743f7f7989a6fa07f935d31b/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9f26053690299e3a5d295d78c4ceeaf840344f0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f26053690299e3a5d295d78c4ceeaf840344f0b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9f26053690299e3a5d295d78c4ceeaf840344f0b"
    }
  ],
  "stats": {
    "total": 138,
    "additions": 71,
    "deletions": 67
  },
  "files": [
    {
      "sha": "7e06361ac6f31a10173d73cde5c883413a77502f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bd22f56a3cf47c6743f7f7989a6fa07f935d31b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bd22f56a3cf47c6743f7f7989a6fa07f935d31b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7bd22f56a3cf47c6743f7f7989a6fa07f935d31b",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* python/py-param.c (add_setshow_generic): Use return values of\n+\tadd_setshow functions.\n+\n 2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* mi/mi-main.c (_initialize_mi_main):"
    },
    {
      "sha": "d0a4850bdc04c63e5afa66973201aaabaf5c6bcc",
      "filename": "gdb/python/py-param.c",
      "status": "modified",
      "additions": 66,
      "deletions": 67,
      "changes": 133,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7bd22f56a3cf47c6743f7f7989a6fa07f935d31b/gdb/python/py-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7bd22f56a3cf47c6743f7f7989a6fa07f935d31b/gdb/python/py-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-param.c?ref=7bd22f56a3cf47c6743f7f7989a6fa07f935d31b",
      "patch": "@@ -465,113 +465,112 @@ add_setshow_generic (int parmclass, enum command_class cmdclass,\n \t\t     struct cmd_list_element **set_list,\n \t\t     struct cmd_list_element **show_list)\n {\n-  struct cmd_list_element *param = NULL;\n-  const char *tmp_name = NULL;\n+  set_show_commands commands;\n \n   switch (parmclass)\n     {\n     case var_boolean:\n-\n-      add_setshow_boolean_cmd (cmd_name.get (), cmdclass,\n-\t\t\t       &self->value.boolval, set_doc, show_doc,\n-\t\t\t       help_doc, get_set_value, get_show_value,\n-\t\t\t       set_list, show_list);\n+      commands = add_setshow_boolean_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t\t  &self->value.boolval, set_doc,\n+\t\t\t\t\t  show_doc, help_doc, get_set_value,\n+\t\t\t\t\t  get_show_value, set_list, show_list);\n \n       break;\n \n     case var_auto_boolean:\n-      add_setshow_auto_boolean_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t    &self->value.autoboolval,\n-\t\t\t\t    set_doc, show_doc, help_doc,\n-\t\t\t\t    get_set_value, get_show_value,\n-\t\t\t\t    set_list, show_list);\n+      commands = add_setshow_auto_boolean_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t\t       &self->value.autoboolval,\n+\t\t\t\t\t       set_doc, show_doc, help_doc,\n+\t\t\t\t\t       get_set_value, get_show_value,\n+\t\t\t\t\t       set_list, show_list);\n       break;\n \n     case var_uinteger:\n-      add_setshow_uinteger_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t&self->value.uintval, set_doc, show_doc,\n-\t\t\t\thelp_doc, get_set_value, get_show_value,\n-\t\t\t\tset_list, show_list);\n+      commands = add_setshow_uinteger_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t\t   &self->value.uintval, set_doc,\n+\t\t\t\t\t   show_doc, help_doc, get_set_value,\n+\t\t\t\t\t   get_show_value, set_list, show_list);\n       break;\n \n     case var_integer:\n-      add_setshow_integer_cmd (cmd_name.get (), cmdclass,\n-\t\t\t       &self->value.intval, set_doc, show_doc,\n-\t\t\t       help_doc, get_set_value, get_show_value,\n-\t\t\t       set_list, show_list); break;\n+      commands = add_setshow_integer_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t\t  &self->value.intval, set_doc,\n+\t\t\t\t\t  show_doc, help_doc, get_set_value,\n+\t\t\t\t\t  get_show_value, set_list, show_list);\n+      break;\n \n     case var_string:\n-      add_setshow_string_cmd (cmd_name.get (), cmdclass,\n-\t\t\t      &self->value.stringval, set_doc, show_doc,\n-\t\t\t      help_doc, get_set_value, get_show_value,\n-\t\t\t      set_list, show_list); break;\n+      commands = add_setshow_string_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t\t &self->value.stringval, set_doc,\n+\t\t\t\t\t show_doc, help_doc, get_set_value,\n+\t\t\t\t\t get_show_value, set_list, show_list);\n+      break;\n \n     case var_string_noescape:\n-      add_setshow_string_noescape_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t       &self->value.stringval,\n-\t\t\t\t       set_doc, show_doc, help_doc,\n-\t\t\t\t       get_set_value, get_show_value,\n-\t\t\t\t       set_list, show_list);\n-\n+      commands = add_setshow_string_noescape_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t\t\t  &self->value.stringval,\n+\t\t\t\t\t\t  set_doc, show_doc, help_doc,\n+\t\t\t\t\t\t  get_set_value, get_show_value,\n+\t\t\t\t\t\t  set_list, show_list);\n       break;\n \n     case var_optional_filename:\n-      add_setshow_optional_filename_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t\t &self->value.stringval, set_doc,\n-\t\t\t\t\t show_doc, help_doc, get_set_value,\n-\t\t\t\t\t get_show_value, set_list,\n-\t\t\t\t\t show_list);\n+      commands = add_setshow_optional_filename_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t\t\t    &self->value.stringval,\n+\t\t\t\t\t\t    set_doc, show_doc, help_doc,\n+\t\t\t\t\t\t    get_set_value,\n+\t\t\t\t\t\t    get_show_value, set_list,\n+\t\t\t\t\t\t    show_list);\n       break;\n \n     case var_filename:\n-      add_setshow_filename_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t&self->value.stringval, set_doc, show_doc,\n-\t\t\t\thelp_doc, get_set_value, get_show_value,\n-\t\t\t\tset_list, show_list); break;\n+      commands = add_setshow_filename_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t\t   &self->value.stringval, set_doc,\n+\t\t\t\t\t   show_doc, help_doc, get_set_value,\n+\t\t\t\t\t   get_show_value, set_list, show_list);\n+      break;\n \n     case var_zinteger:\n-      add_setshow_zinteger_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t&self->value.intval, set_doc, show_doc,\n-\t\t\t\thelp_doc, get_set_value, get_show_value,\n-\t\t\t\tset_list, show_list);\n+      commands = add_setshow_zinteger_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t\t   &self->value.intval, set_doc,\n+\t\t\t\t\t   show_doc, help_doc, get_set_value,\n+\t\t\t\t\t   get_show_value, set_list, show_list);\n       break;\n \n     case var_zuinteger:\n-      add_setshow_zuinteger_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t&self->value.uintval, set_doc, show_doc,\n-\t\t\t\thelp_doc, get_set_value, get_show_value,\n-\t\t\t\tset_list, show_list);\n+      commands = add_setshow_zuinteger_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t\t    &self->value.uintval, set_doc,\n+\t\t\t\t\t    show_doc, help_doc, get_set_value,\n+\t\t\t\t\t    get_show_value, set_list,\n+\t\t\t\t\t    show_list);\n       break;\n \n     case var_zuinteger_unlimited:\n-      add_setshow_zuinteger_unlimited_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t\t   &self->value.intval, set_doc,\n-\t\t\t\t\t   show_doc, help_doc, get_set_value,\n-\t\t\t\t\t   get_show_value,\n-\t\t\t\t\t   set_list, show_list);\n+      commands = add_setshow_zuinteger_unlimited_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t\t\t      &self->value.intval,\n+\t\t\t\t\t\t      set_doc, show_doc,\n+\t\t\t\t\t\t      help_doc, get_set_value,\n+\t\t\t\t\t\t      get_show_value, set_list,\n+\t\t\t\t\t\t      show_list);\n       break;\n \n     case var_enum:\n-      add_setshow_enum_cmd (cmd_name.get (), cmdclass, self->enumeration,\n-\t\t\t    &self->value.cstringval, set_doc, show_doc,\n-\t\t\t    help_doc, get_set_value, get_show_value,\n-\t\t\t    set_list, show_list);\n+      commands = add_setshow_enum_cmd (cmd_name.get (), cmdclass,\n+\t\t\t\t       self->enumeration,\n+\t\t\t\t       &self->value.cstringval, set_doc,\n+\t\t\t\t       show_doc, help_doc, get_set_value,\n+\t\t\t\t       get_show_value, set_list, show_list);\n       /* Initialize the value, just in case.  */\n       self->value.cstringval = self->enumeration[0];\n       break;\n+\n+    default:\n+      gdb_assert_not_reached (\"Unhandled parameter class.\");\n     }\n \n-  /* Lookup created parameter, and register Python object against the\n-     parameter context.  Perform this task against both lists.  */\n-  tmp_name = cmd_name.get ();\n-  param = lookup_cmd (&tmp_name, *show_list, \"\", NULL, 0, 1);\n-  if (param)\n-    set_cmd_context (param, self);\n-\n-  tmp_name = cmd_name.get ();\n-  param = lookup_cmd (&tmp_name, *set_list, \"\", NULL, 0, 1);\n-  if (param)\n-    set_cmd_context (param, self);\n+  /* Register Python objects in both commands' context.  */\n+  set_cmd_context (commands.set, self);\n+  set_cmd_context (commands.show, self);\n \n   /* We (unfortunately) currently leak the command name.  */\n   cmd_name.release ();"
    }
  ]
}