{
  "sha": "b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjZkMDNiYjJiNjVhYzVjOTE5ZjFkMDg2NzRiYmFhMmE5YmZiMmQwYw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-02-13T17:10:18Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-30T09:10:24Z"
    },
    "message": "gdb/fortran: Additional builtin procedures\n\nAdd some additional builtin procedures for Fortran, these are MOD,\nCEILING, FLOOR, MODULO, and CMPLX.\n\ngdb/ChangeLog:\n\n\t* f-exp.y (BINOP_INTRINSIC): New token.\n\t(exp): New parser rule handling BINOP_INTRINSIC.\n\t(f77_keywords): Add new builtin procedures.\n\t* f-lang.c (evaluate_subexp_f): Handle BINOP_MOD, UNOP_FORTRAN_CEILING,\n\tUNOP_FORTRAN_FLOOR, BINOP_FORTRAN_MODULO, BINOP_FORTRAN_CMPLX.\n\t(operator_length_f): Handle UNOP_FORTRAN_CEILING,\n\tUNOP_FORTRAN_FLOOR, BINOP_FORTRAN_MODULO, BINOP_FORTRAN_CMPLX.\n\t(print_unop_subexp_f): New function.\n\t(print_binop_subexp_f): New function.\n\t(print_subexp_f): Handle UNOP_FORTRAN_CEILING, UNOP_FORTRAN_FLOOR,\n\tBINOP_FORTRAN_MODULO, BINOP_FORTRAN_CMPLX.\n\t(dump_subexp_body_f): Likewise.\n\t(operator_check_f): Likewise.\n\t* fortran-operator.def: Add UNOP_FORTRAN_CEILING, UNOP_FORTRAN_FLOOR,\n\tBINOP_FORTRAN_MODULO, BINOP_FORTRAN_CMPLX\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/intrinsics.exp: Extend to cover MOD, CEILING, FLOOR,\n\tMODULO, CMPLX.",
    "tree": {
      "sha": "ba4019eaf0e387569cb2f165b226b45140fff8c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ba4019eaf0e387569cb2f165b226b45140fff8c3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "83228e93efa82f84a132f7cec44d0e760d4ad22b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/83228e93efa82f84a132f7cec44d0e760d4ad22b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/83228e93efa82f84a132f7cec44d0e760d4ad22b"
    }
  ],
  "stats": {
    "total": 258,
    "additions": 251,
    "deletions": 7
  },
  "files": [
    {
      "sha": "f6a1976defffa6939df20b7e2c942d0d4472a170",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c",
      "patch": "@@ -1,3 +1,23 @@\n+2019-04-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Chris January  <chris.january@arm.com>\n+\t    David Lecomber  <david.lecomber@arm.com>\n+\n+\t* f-exp.y (BINOP_INTRINSIC): New token.\n+\t(exp): New parser rule handling BINOP_INTRINSIC.\n+\t(f77_keywords): Add new builtin procedures.\n+\t* f-lang.c (evaluate_subexp_f): Handle BINOP_MOD, UNOP_FORTRAN_CEILING,\n+\tUNOP_FORTRAN_FLOOR, BINOP_FORTRAN_MODULO, BINOP_FORTRAN_CMPLX.\n+\t(operator_length_f): Handle UNOP_FORTRAN_CEILING,\n+\tUNOP_FORTRAN_FLOOR, BINOP_FORTRAN_MODULO, BINOP_FORTRAN_CMPLX.\n+\t(print_unop_subexp_f): New function.\n+\t(print_binop_subexp_f): New function.\n+\t(print_subexp_f): Handle UNOP_FORTRAN_CEILING, UNOP_FORTRAN_FLOOR,\n+\tBINOP_FORTRAN_MODULO, BINOP_FORTRAN_CMPLX.\n+\t(dump_subexp_body_f): Likewise.\n+\t(operator_check_f): Likewise.\n+\t* fortran-operator.def: Add UNOP_FORTRAN_CEILING, UNOP_FORTRAN_FLOOR,\n+\tBINOP_FORTRAN_MODULO, BINOP_FORTRAN_CMPLX\n+\n 2019-04-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb/expprint.c (dump_subexp_body_standard): Remove use of"
    },
    {
      "sha": "14ea3869bb2d01c5c80e77af26e3937c24353fab",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c",
      "patch": "@@ -174,7 +174,7 @@ static int parse_number (struct parser_state *, const char *, int,\n %token <voidval> DOLLAR_VARIABLE\n \n %token <opcode> ASSIGN_MODIFY\n-%token <opcode> UNOP_INTRINSIC\n+%token <opcode> UNOP_INTRINSIC BINOP_INTRINSIC\n \n %left ','\n %left ABOVE_COMMA\n@@ -263,6 +263,10 @@ exp\t:\tUNOP_INTRINSIC '(' exp ')'\n \t\t\t{ write_exp_elt_opcode (pstate, $1); }\n \t;\n \n+exp\t:\tBINOP_INTRINSIC '(' exp ',' exp ')'\n+\t\t\t{ write_exp_elt_opcode (pstate, $1); }\n+\t;\n+\n arglist\t:\n \t;\n \n@@ -959,7 +963,12 @@ static const struct token f77_keywords[] =\n   /* The following correspond to actual functions in Fortran and are case\n      insensitive.  */\n   { \"kind\", KIND, BINOP_END, false },\n-  { \"abs\", UNOP_INTRINSIC, UNOP_ABS, false }\n+  { \"abs\", UNOP_INTRINSIC, UNOP_ABS, false },\n+  { \"mod\", BINOP_INTRINSIC, BINOP_MOD, false },\n+  { \"floor\", UNOP_INTRINSIC, UNOP_FORTRAN_FLOOR, false },\n+  { \"ceiling\", UNOP_INTRINSIC, UNOP_FORTRAN_CEILING, false },\n+  { \"modulo\", BINOP_INTRINSIC, BINOP_FORTRAN_MODULO, false },\n+  { \"cmplx\", BINOP_INTRINSIC, BINOP_FORTRAN_CMPLX, false },\n };\n \n /* Implementation of a dynamically expandable buffer for processing input"
    },
    {
      "sha": "cc4e154f47ab4450f4ddb75e2e7cf9848994688f",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 175,
      "deletions": 5,
      "changes": 180,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c",
      "patch": "@@ -246,7 +246,7 @@ struct value *\n evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n \t\t   int *pos, enum noside noside)\n {\n-  struct value *arg1 = NULL;\n+  struct value *arg1 = NULL, *arg2 = NULL;\n   enum exp_opcode op;\n   int pc;\n   struct type *type;\n@@ -284,6 +284,115 @@ evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n \t}\n       error (_(\"ABS of type %s not supported\"), TYPE_SAFE_NAME (type));\n \n+    case BINOP_MOD:\n+      arg1 = evaluate_subexp (NULL_TYPE, exp, pos, noside);\n+      arg2 = evaluate_subexp (value_type (arg1), exp, pos, noside);\n+      if (noside == EVAL_SKIP)\n+\treturn eval_skip_value (exp);\n+      type = value_type (arg1);\n+      if (TYPE_CODE (type) != TYPE_CODE (value_type (arg2)))\n+\terror (_(\"non-matching types for parameters to MOD ()\"));\n+      switch (TYPE_CODE (type))\n+\t{\n+\tcase TYPE_CODE_FLT:\n+\t  {\n+\t    double d1\n+\t      = target_float_to_host_double (value_contents (arg1),\n+\t\t\t\t\t     value_type (arg1));\n+\t    double d2\n+\t      = target_float_to_host_double (value_contents (arg2),\n+\t\t\t\t\t     value_type (arg2));\n+\t    double d3 = fmod (d1, d2);\n+\t    return value_from_host_double (type, d3);\n+\t  }\n+\tcase TYPE_CODE_INT:\n+\t  {\n+\t    LONGEST v1 = value_as_long (arg1);\n+\t    LONGEST v2 = value_as_long (arg2);\n+\t    if (v2 == 0)\n+\t      error (_(\"calling MOD (N, 0) is undefined\"));\n+\t    LONGEST v3 = v1 - (v1 / v2) * v2;\n+\t    return value_from_longest (value_type (arg1), v3);\n+\t  }\n+\t}\n+      error (_(\"MOD of type %s not supported\"), TYPE_SAFE_NAME (type));\n+\n+    case UNOP_FORTRAN_CEILING:\n+      {\n+\targ1 = evaluate_subexp (NULL_TYPE, exp, pos, noside);\n+\tif (noside == EVAL_SKIP)\n+\t  return eval_skip_value (exp);\n+\ttype = value_type (arg1);\n+\tif (TYPE_CODE (type) != TYPE_CODE_FLT)\n+\t  error (_(\"argument to CEILING must be of type float\"));\n+\tdouble val\n+\t  = target_float_to_host_double (value_contents (arg1),\n+\t\t\t\t\t value_type (arg1));\n+\tval = ceil (val);\n+\treturn value_from_host_double (type, val);\n+      }\n+\n+    case UNOP_FORTRAN_FLOOR:\n+      {\n+\targ1 = evaluate_subexp (NULL_TYPE, exp, pos, noside);\n+\tif (noside == EVAL_SKIP)\n+\t  return eval_skip_value (exp);\n+\ttype = value_type (arg1);\n+\tif (TYPE_CODE (type) != TYPE_CODE_FLT)\n+\t  error (_(\"argument to FLOOR must be of type float\"));\n+\tdouble val\n+\t  = target_float_to_host_double (value_contents (arg1),\n+\t\t\t\t\t value_type (arg1));\n+\tval = floor (val);\n+\treturn value_from_host_double (type, val);\n+      }\n+\n+    case BINOP_FORTRAN_MODULO:\n+      {\n+\targ1 = evaluate_subexp (NULL_TYPE, exp, pos, noside);\n+\targ2 = evaluate_subexp (value_type (arg1), exp, pos, noside);\n+\tif (noside == EVAL_SKIP)\n+\t  return eval_skip_value (exp);\n+\ttype = value_type (arg1);\n+\tif (TYPE_CODE (type) != TYPE_CODE (value_type (arg2)))\n+\t  error (_(\"non-matching types for parameters to MODULO ()\"));\n+        /* MODULO(A, P) = A - FLOOR (A / P) * P */\n+\tswitch (TYPE_CODE (type))\n+\t  {\n+\t  case TYPE_CODE_INT:\n+\t    {\n+\t      LONGEST a = value_as_long (arg1);\n+\t      LONGEST p = value_as_long (arg2);\n+\t      LONGEST result = a - (a / p) * p;\n+\t      if (result != 0 && (a < 0) != (p < 0))\n+\t\tresult += p;\n+\t      return value_from_longest (value_type (arg1), result);\n+\t    }\n+\t  case TYPE_CODE_FLT:\n+\t    {\n+\t      double a\n+\t\t= target_float_to_host_double (value_contents (arg1),\n+\t\t\t\t\t       value_type (arg1));\n+\t      double p\n+\t\t= target_float_to_host_double (value_contents (arg2),\n+\t\t\t\t\t       value_type (arg2));\n+\t      double result = fmod (a, p);\n+\t      if (result != 0 && (a < 0.0) != (p < 0.0))\n+\t\tresult += p;\n+\t      return value_from_host_double (type, result);\n+\t    }\n+\t  }\n+\terror (_(\"MODULO of type %s not supported\"), TYPE_SAFE_NAME (type));\n+      }\n+\n+    case BINOP_FORTRAN_CMPLX:\n+      arg1 = evaluate_subexp (NULL_TYPE, exp, pos, noside);\n+      arg2 = evaluate_subexp (value_type (arg1), exp, pos, noside);\n+      if (noside == EVAL_SKIP)\n+\treturn eval_skip_value (exp);\n+      type = builtin_f_type(exp->gdbarch)->builtin_complex_s16;\n+      return value_literal_complex (arg1, arg2, type);\n+\n     case UNOP_FORTRAN_KIND:\n       arg1 = evaluate_subexp (NULL, exp, pos, EVAL_AVOID_SIDE_EFFECTS);\n       type = value_type (arg1);\n@@ -335,15 +444,55 @@ operator_length_f (const struct expression *exp, int pc, int *oplenp,\n       return;\n \n     case UNOP_FORTRAN_KIND:\n+    case UNOP_FORTRAN_FLOOR:\n+    case UNOP_FORTRAN_CEILING:\n       oplen = 1;\n       args = 1;\n       break;\n+\n+    case BINOP_FORTRAN_CMPLX:\n+    case BINOP_FORTRAN_MODULO:\n+      oplen = 1;\n+      args = 2;\n+      break;\n     }\n \n   *oplenp = oplen;\n   *argsp = args;\n }\n \n+/* Helper for PRINT_SUBEXP_F.  Arguments are as for PRINT_SUBEXP_F, except\n+   the extra argument NAME which is the text that should be printed as the\n+   name of this operation.  */\n+\n+static void\n+print_unop_subexp_f (struct expression *exp, int *pos,\n+\t\t     struct ui_file *stream, enum precedence prec,\n+\t\t     const char *name)\n+{\n+  (*pos)++;\n+  fprintf_filtered (stream, \"%s(\", name);\n+  print_subexp (exp, pos, stream, PREC_SUFFIX);\n+  fputs_filtered (\")\", stream);\n+}\n+\n+/* Helper for PRINT_SUBEXP_F.  Arguments are as for PRINT_SUBEXP_F, except\n+   the extra argument NAME which is the text that should be printed as the\n+   name of this operation.  */\n+\n+static void\n+print_binop_subexp_f (struct expression *exp, int *pos,\n+\t\t      struct ui_file *stream, enum precedence prec,\n+\t\t      const char *name)\n+{\n+  (*pos)++;\n+  fprintf_filtered (stream, \"%s(\", name);\n+  print_subexp (exp, pos, stream, PREC_SUFFIX);\n+  fputs_filtered (\",\", stream);\n+  print_subexp (exp, pos, stream, PREC_SUFFIX);\n+  fputs_filtered (\")\", stream);\n+}\n+\n /* Special expression printing for Fortran.  */\n \n static void\n@@ -360,10 +509,23 @@ print_subexp_f (struct expression *exp, int *pos,\n       return;\n \n     case UNOP_FORTRAN_KIND:\n-      (*pos)++;\n-      fputs_filtered (\"KIND(\", stream);\n-      print_subexp (exp, pos, stream, PREC_SUFFIX);\n-      fputs_filtered (\")\", stream);\n+      print_unop_subexp_f (exp, pos, stream, prec, \"KIND\");\n+      return;\n+\n+    case UNOP_FORTRAN_FLOOR:\n+      print_unop_subexp_f (exp, pos, stream, prec, \"FLOOR\");\n+      return;\n+\n+    case UNOP_FORTRAN_CEILING:\n+      print_unop_subexp_f (exp, pos, stream, prec, \"CEILING\");\n+      return;\n+\n+    case BINOP_FORTRAN_CMPLX:\n+      print_binop_subexp_f (exp, pos, stream, prec, \"CMPLX\");\n+      return;\n+\n+    case BINOP_FORTRAN_MODULO:\n+      print_binop_subexp_f (exp, pos, stream, prec, \"MODULO\");\n       return;\n     }\n }\n@@ -401,6 +563,10 @@ dump_subexp_body_f (struct expression *exp,\n       return dump_subexp_body_standard (exp, stream, elt);\n \n     case UNOP_FORTRAN_KIND:\n+    case UNOP_FORTRAN_FLOOR:\n+    case UNOP_FORTRAN_CEILING:\n+    case BINOP_FORTRAN_CMPLX:\n+    case BINOP_FORTRAN_MODULO:\n       operator_length_f (exp, (elt + 1), &oplen, &nargs);\n       break;\n     }\n@@ -425,6 +591,10 @@ operator_check_f (struct expression *exp, int pos,\n   switch (elts[pos].opcode)\n     {\n     case UNOP_FORTRAN_KIND:\n+    case UNOP_FORTRAN_FLOOR:\n+    case UNOP_FORTRAN_CEILING:\n+    case BINOP_FORTRAN_CMPLX:\n+    case BINOP_FORTRAN_MODULO:\n       /* Any references to objfiles are held in the arguments to this\n \t expression, not within the expression itself, so no additional\n \t checking is required here, the outer expression iteration code"
    },
    {
      "sha": "cb40108aa8357f217da87ffe7f0fcf60ecef44ed",
      "filename": "gdb/fortran-operator.def",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/fortran-operator.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/fortran-operator.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fortran-operator.def?ref=b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c",
      "patch": "@@ -19,4 +19,9 @@\n \n /* Single operand builtins.  */\n OP (UNOP_FORTRAN_KIND)\n+OP (UNOP_FORTRAN_FLOOR)\n+OP (UNOP_FORTRAN_CEILING)\n \n+/* Two operand builtins.  */\n+OP (BINOP_FORTRAN_CMPLX)\n+OP (BINOP_FORTRAN_MODULO)"
    },
    {
      "sha": "7489ab9ec29c1b6793e1921a86ba120295400bc0",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-30  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/intrinsics.exp: Extend to cover MOD, CEILING, FLOOR,\n+\tMODULO, CMPLX.\n+\n 2019-04-29  Andrew Burgess  <andrew.burgess@embecosm.com>\n \t    Richard Bunt  <richard.bunt@arm.com>\n "
    },
    {
      "sha": "64d9e56daabfd555d49fe341b48ce6bce2e45b30",
      "filename": "gdb/testsuite/gdb.fortran/intrinsics.exp",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/testsuite/gdb.fortran/intrinsics.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c/gdb/testsuite/gdb.fortran/intrinsics.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/intrinsics.exp?ref=b6d03bb2b65ac5c919f1d08674bbaa2a9bfb2d0c",
      "patch": "@@ -49,3 +49,38 @@ gdb_test \"p abs (11)\" \" = 11\"\n # rounding, which can vary.\n gdb_test \"p abs (-9.1)\" \" = 9.$decimal\"\n gdb_test \"p abs (9.1)\" \" = 9.$decimal\"\n+\n+# Test MOD\n+\n+gdb_test \"p mod (3.0, 2.0)\" \" = 1\"\n+gdb_test \"ptype mod (3.0, 2.0)\" \"type = real\\\\*8\"\n+gdb_test \"p mod (2.0, 3.0)\" \" = 2\"\n+gdb_test \"p mod (8, 5)\" \" = 3\"\n+gdb_test \"ptype mod (8, 5)\" \"type = int\"\n+gdb_test \"p mod (-8, 5)\" \" = -3\"\n+gdb_test \"p mod (8, -5)\" \" = 3\"\n+gdb_test \"p mod (-8, -5)\" \" = -3\"\n+\n+# Test CEILING\n+\n+gdb_test \"p ceiling (3.7)\" \" = 4\"\n+gdb_test \"p ceiling (-3.7)\" \" = -3\"\n+\n+# Test FLOOR\n+\n+gdb_test \"p floor (3.7)\" \" = 3\"\n+gdb_test \"p floor (-3.7)\" \" = -4\"\n+\n+# Test MODULO\n+\n+gdb_test \"p MODULO (8,5)\" \" = 3\"\n+gdb_test \"ptype MODULO (8,5)\" \"type = int\"\n+gdb_test \"p MODULO (-8,5)\" \" = 2\"\n+gdb_test \"p MODULO (8,-5)\" \" = -2\"\n+gdb_test \"p MODULO (-8,-5)\" \" = -3\"\n+gdb_test \"p MODULO (3.0,2.0)\" \" = 1\"\n+gdb_test \"ptype MODULO (3.0,2.0)\" \"type = real\\\\*8\"\n+\n+# Test CMPLX\n+\n+gdb_test \"p CMPLX (4.1, 2.0)\" \" = \\\\(4.$decimal,2\\\\)\""
    }
  ]
}