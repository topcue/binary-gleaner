{
  "sha": "9b8efa2cd14410cb23d8873fd8f0665155569523",
  "node_id": "C_kwDOANOeidoAKDliOGVmYTJjZDE0NDEwY2IyM2Q4ODczZmQ4ZjA2NjUxNTU1Njk1MjM",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-07-18T20:36:24Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-09-23T17:58:51Z"
    },
    "message": "Test that frame info/IDs are stable/consistent\n\nThis adds a testcase that tests that the unwinder produces consistent\nframe info and frame IDs by making sure that \"info frame\" shows the\nsame result when stopped at a function (level == 0), compared to when\nwe find the same frame in the stack at a level > 0.\n\nE.g., on x86-64, right after running to main, we see:\n\n  (gdb) info frame\n  Stack level 0, frame at 0x7fffffffd340:\n   rip = 0x555555555168 in main (gdb.base/backtrace.c:41); saved rip = 0x7ffff7dd90b3\n   source language c.\n   Arglist at 0x7fffffffd330, args:\n   Locals at 0x7fffffffd330, Previous frame's sp is 0x7fffffffd340\n   Saved registers:\n    rbp at 0x7fffffffd330, rip at 0x7fffffffd338\n  (gdb)\n\nand then after continuing to a function called by main, and selecting\nthe \"main\" frame again, we see:\n\n  (gdb) info frame\n  Stack level 3, frame at 0x7fffffffd340:\n   rip = 0x555555555172 in main (gdb.base/backtrace.c:41); saved rip = 0x7ffff7dd90b3\n   caller of frame at 0x7fffffffd330\n   source language c.\n   Arglist at 0x7fffffffd330, args:\n   Locals at 0x7fffffffd330, Previous frame's sp is 0x7fffffffd340\n   Saved registers:\n    rbp at 0x7fffffffd330, rip at 0x7fffffffd338\n  (gdb)\n\nThe only differences should be in the stack level, the 'rip = '\naddress, and the presence of the \"caller of frame at\" info.  All the\nrest should be the same.  If it isn't, it probably means that the\nframe base, the frame ID, etc. aren't stable & consistent.\n\nThe testcase exercises both the DWARF and the heuristic unwinders,\nusing \"maint set dwarf unwinder on/off\".\n\nTested on {x86-64 -m64, x86-64 -m32, Aarch64, Power8} GNU/Linux.\n\nChange-Id: I795001c82cc70d543d197415e3f80ce5dc7f3452",
    "tree": {
      "sha": "b90d4c90d8042717225e856a441c7209f05bb01e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b90d4c90d8042717225e856a441c7209f05bb01e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9b8efa2cd14410cb23d8873fd8f0665155569523",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b8efa2cd14410cb23d8873fd8f0665155569523",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9b8efa2cd14410cb23d8873fd8f0665155569523",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b8efa2cd14410cb23d8873fd8f0665155569523/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c80e29dba968beca5eee7210d2030d27fe7790c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c80e29dba968beca5eee7210d2030d27fe7790c3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c80e29dba968beca5eee7210d2030d27fe7790c3"
    }
  ],
  "stats": {
    "total": 136,
    "additions": 136,
    "deletions": 0
  },
  "files": [
    {
      "sha": "0ff269aefe913c10c42dd5a4c945328982f8363e",
      "filename": "gdb/testsuite/gdb.base/frame-info-consistent.exp",
      "status": "added",
      "additions": 136,
      "deletions": 0,
      "changes": 136,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b8efa2cd14410cb23d8873fd8f0665155569523/gdb/testsuite/gdb.base/frame-info-consistent.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b8efa2cd14410cb23d8873fd8f0665155569523/gdb/testsuite/gdb.base/frame-info-consistent.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/frame-info-consistent.exp?ref=9b8efa2cd14410cb23d8873fd8f0665155569523",
      "patch": "@@ -0,0 +1,136 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Check that the unwinder produces consistent frame info, by making\n+# sure that \"info frame\" shows the same result when stopped at a\n+# function (level == 0), compared to when we find the same frame in\n+# the stack at a level > 0.  Tests both the DWARF stack unwinder, and\n+# the fallback heuristic unwinder.\n+\n+standard_testfile backtrace.c\n+\n+if { [build_executable \"failed to prepare\" $testfile $srcfile] } {\n+    return -1\n+}\n+\n+# Unwind to each function in FRAMES, and compare \"info frame\" output\n+# to what was saved in the 'info_frame_before' array.\n+proc compare_frames {frames} {\n+    foreach_with_prefix compare_frame $frames {\n+\tif {[gdb_test \\\n+\t\t \"frame function $compare_frame\" \\\n+\t\t \" $compare_frame .*\"] != 0} {\n+\t    continue\n+\t}\n+\tset info_frame_after \"\"\n+\tgdb_test_multiple \"info frame\" \"\" {\n+\t    -re \"(.*\\r\\n$::gdb_prompt $)\" {\n+\t\tset info_frame_after $expect_out(1,string)\n+\t\tpass $gdb_test_name\n+\t    }\n+\t}\n+\n+\t# Nuke the PC address, since it'll be different.  The\n+\t# first time it's the actual PC before the call, the\n+\t# second time it's the resume address after the call\n+\t# returns.\n+\t# E.g., on x86-64:\n+\t#   rip = 0x555555555168 in main (gdb.base/backtrace.c:41); saved rip = 0x7ffff7dd90b3\n+\t# vs\n+\t#   rip = 0x555555555172 in main (gdb.base/backtrace.c:41); saved rip = 0x7ffff7dd90b3\n+\t#\n+\tset from \\\n+\t    \"= $::hex in $compare_frame \"\n+\tset to \\\n+\t    \"= \\$hex in $compare_frame \"\n+\tregsub $from $::info_frame_before($compare_frame) $to \\\n+\t    ::info_frame_before($compare_frame)\n+\tregsub $from $info_frame_after $to \\\n+\t    info_frame_after\n+\n+\t# Remove the \"caller of frame at\" line, which didn't\n+\t# appear the first time, since the frame hadn't called any\n+\t# other function yet then.\n+\tregsub \"\\r\\n caller of frame at $::hex\\r\\n\" \\\n+\t    $info_frame_after \"\\r\\n\" \\\n+\t    info_frame_after\n+\tregsub \", caller of frame at $::hex\" \\\n+\t    $info_frame_after \"\" \\\n+\t    info_frame_after\n+\n+\t# \"Stack level 0/1/2/3\" -> \"Stack level N\"\n+\tset from \\\n+\t    \"Stack level $::decimal\"\n+\tset to \\\n+\t    \"Stack level N\"\n+\tregsub $from $::info_frame_before($compare_frame) $to \\\n+\t    ::info_frame_before($compare_frame)\n+\tregsub $from $info_frame_after $to \\\n+\t    info_frame_after\n+\n+\t# For debugging.\n+\tverbose -log \"BEFORE:\\n$::info_frame_before($compare_frame)\"\n+\tverbose -log \"AFTER:\\n$info_frame_after\"\n+\n+\tgdb_assert {[string match \\\n+\t\t\t $::info_frame_before($compare_frame)\\\n+\t\t\t $info_frame_after]} \\\n+\t    \"info frame before/after match\"\n+    }\n+}\n+\n+proc test {dwarf_unwinder} {\n+\n+    clean_restart $::binfile\n+\n+    gdb_test_no_output \"maint set dwarf unwinder $dwarf_unwinder\"\n+\n+    if ![runto_main] then {\n+\tfail \"can't run to main\"\n+\treturn 0\n+    }\n+\n+    array unset ::info_frame_before\n+\n+    # Run to each function, and record \"info frame\" output in the\n+    # 'info_frame_before' array.  At each stop, unwind to each\n+    # already-recorded function, and compare \"info frame\" output to\n+    # what was saved in the 'info_frame_before' array.\n+    set funcs {\"main\" \"foo\" \"bar\" \"baz\"}\n+    set idx_funcs 0\n+    foreach_with_prefix stop_func $funcs {\n+\tif {$idx_funcs != 0} {\n+\t    gdb_breakpoint $stop_func\n+\t    gdb_continue_to_breakpoint \".*$stop_func \\(\\).*\"\n+\t}\n+\n+\tset ::info_frame_before($stop_func) \"\"\n+\tgdb_test_multiple \"info frame\" \"\" {\n+\t    -re \"(.*\\r\\n$::gdb_prompt $)\" {\n+\t\tset ::info_frame_before($stop_func) $expect_out(1,string)\n+\t\tpass $gdb_test_name\n+\t    }\n+\t}\n+\n+\tif {$idx_funcs != 0} {\n+\t    compare_frames [lreverse [lrange $funcs 0 $idx_funcs-1]]\n+\t}\n+\tincr idx_funcs\n+    }\n+}\n+\n+foreach_with_prefix dwarf {\"off\" \"on\"} {\n+    test $dwarf\n+}"
    }
  ]
}