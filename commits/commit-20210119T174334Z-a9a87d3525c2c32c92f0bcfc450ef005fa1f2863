{
  "sha": "a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTlhODdkMzUyNWMyYzMyYzkyZjBiY2ZjNDUwZWYwMDVmYTFmMjg2Mw==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-01-14T18:43:28Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-01-19T17:43:34Z"
    },
    "message": "trad-frame cleanups\n\nWith the new member functions for struct trad_frame_saved_reg, there is no\nneed to invoke some of the set/get functions anymore.  This patch removes\nthose and adjusts all callers.\n\nEven though the most natural initial state of a saved register value is\nUNKNOWN, there are target backends relying on the previous initial state\nof REALREG set to a register's own number. I noticed this in at least a\ncouple targets: aarch64 and riscv.\n\nBecause of that, I decided to keep the reset function that sets the set of\nregister values to REALREG. I can't exercise all the targets to make sure\nthe initial state change won't break things, hence why it is risky to change\nthe default.\n\nValidated with --enable-targets=all on aarch64-linux Ubuntu 18.04/20.04.\n\ngdb/ChangeLog\n\n2021-01-19  Luis Machado  <luis.machado@linaro.org>\n\n\t* trad-frame.h (trad_frame_saved_reg) <set_value_bytes>: Allocate\n\tmemory and save data.\n\t(trad_frame_set_value, trad_frame_set_realreg, trad_frame_set_addr)\n\t(trad_frame_set_unknown, trad_frame_set_value_bytes)\n\t(trad_frame_value_p, trad_frame_addr_p, trad_frame_realreg_p)\n\t(trad_frame_value_bytes_p): Remove.\n\t(trad_frame_reset_saved_regs): Adjust documentation.\n\t* trad-frame.c (trad_frame_alloc_saved_regs): Initialize via a\n\tconstructor and reset the state of the registers.\n\t(trad_frame_value_p, trad_frame_addr_p, trad_frame_realreg_p)\n\t(trad_frame_value_bytes_p, trad_frame_set_value)\n\t(trad_frame_set_realreg, trad_frame_set_addr)\n\t(trad_frame_set_unknown, trad_frame_set_value_bytes): Remove.\n\t(trad_frame_set_reg_realreg): Update to call member function.\n\t(trad_frame_set_reg_addr, trad_frame_set_reg_value_bytes): Likewise.\n\t(trad_frame_get_prev_register): Likewise.\n\n\t* aarch64-tdep.c (aarch64_analyze_prologue)\n\t(aarch64_analyze_prologue_test, aarch64_make_prologue_cache_1)\n\t(aarch64_prologue_prev_register): Update to use member functions.\n\t* alpha-mdebug-tdep.c (alpha_mdebug_frame_unwind_cache): Likewise.\n\t* alpha-tdep.c (alpha_heuristic_frame_unwind_cache): Likewise.\n\t* arc-tdep.c (arc_print_frame_cache, arc_make_frame_cache): Likewise.\n\t* arm-tdep.c (arm_make_prologue_cache, arm_exidx_fill_cache)\n\t(arm_make_epilogue_frame_cache): Likewise.\n\t* avr-tdep.c (avr_frame_unwind_cache)\n\t(avr_frame_prev_register): Likewise.\n\t* cris-tdep.c (cris_scan_prologue): Likewise.\n\t* csky-tdep.c (csky_frame_unwind_cache): Likewise.\n\t* frv-tdep.c (frv_analyze_prologue): Likewise.\n\t* hppa-tdep.c (hppa_frame_cache, hppa_fallback_frame_cache): Likewise.\n\t* lm32-tdep.c (lm32_frame_cache): Likewise.\n\t* m32r-tdep.c (m32r_frame_unwind_cache): Likewise.\n\t* m68hc11-tdep.c (m68hc11_frame_unwind_cache): Likewise.\n\t* mips-tdep.c (set_reg_offset, mips_insn16_frame_cache)\n\t(mips_micro_frame_cache, mips_insn32_frame_cache): Likewise.\n\t(reset_saved_regs): Adjust to set realreg.\n\t* riscv-tdep.c (riscv_scan_prologue, riscv_frame_cache): Adjust to\n\tcall member functions.\n\t* rs6000-tdep.c (rs6000_frame_cache, rs6000_epilogue_frame_cache)\n\t* s390-tdep.c (s390_prologue_frame_unwind_cache)\n\t(s390_backchain_frame_unwind_cache): Likewise.\n\t* score-tdep.c (score7_analyze_prologue)\n\t(score3_analyze_prologue, score_make_prologue_cache): Likewise.\n\t* sparc-netbsd-tdep.c (sparc32nbsd_sigcontext_saved_regs): Likewise.\n\t* sparc-sol2-tdep.c (sparc32_sol2_sigtramp_frame_cache): Likewise.\n\t* sparc64-netbsd-tdep.c (sparc64nbsd_sigcontext_saved_regs): Likewise.\n\t* sparc64-sol2-tdep.c (sparc64_sol2_sigtramp_frame_cache): Likewise.\n\t* tilegx-tdep.c (tilegx_analyze_prologue)\n\t(tilegx_frame_cache): Likewise.\n\t* v850-tdep.c (v850_frame_cache): Likewise.\n\t* vax-tdep.c (vax_frame_cache): Likewise.",
    "tree": {
      "sha": "96edb8ea0e7363200182efc5683c30a86408268b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/96edb8ea0e7363200182efc5683c30a86408268b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bdec2917b1e94c7198ba39919f45060067952f43",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bdec2917b1e94c7198ba39919f45060067952f43",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bdec2917b1e94c7198ba39919f45060067952f43"
    }
  ],
  "stats": {
    "total": 415,
    "additions": 183,
    "deletions": 232
  },
  "files": [
    {
      "sha": "3c8379c50dda19aaa5d04dd1067b92ecd7f673e4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -1,3 +1,58 @@\n+2021-01-19  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* trad-frame.h (trad_frame_saved_reg) <set_value_bytes>: Allocate\n+\tmemory and save data.\n+\t(trad_frame_set_value, trad_frame_set_realreg, trad_frame_set_addr)\n+\t(trad_frame_set_unknown, trad_frame_set_value_bytes)\n+\t(trad_frame_value_p, trad_frame_addr_p, trad_frame_realreg_p)\n+\t(trad_frame_value_bytes_p): Remove.\n+\t(trad_frame_reset_saved_regs): Adjust documentation.\n+\t* trad-frame.c (trad_frame_alloc_saved_regs): Initialize via a\n+\tconstructor and reset the state of the registers.\n+\t(trad_frame_value_p, trad_frame_addr_p, trad_frame_realreg_p)\n+\t(trad_frame_value_bytes_p, trad_frame_set_value)\n+\t(trad_frame_set_realreg, trad_frame_set_addr)\n+\t(trad_frame_set_unknown, trad_frame_set_value_bytes): Remove.\n+\t(trad_frame_set_reg_realreg): Update to call member function.\n+\t(trad_frame_set_reg_addr, trad_frame_set_reg_value_bytes): Likewise.\n+\t(trad_frame_get_prev_register): Likewise.\n+\n+\t* aarch64-tdep.c (aarch64_analyze_prologue)\n+\t(aarch64_analyze_prologue_test, aarch64_make_prologue_cache_1)\n+\t(aarch64_prologue_prev_register): Update to use member functions.\n+\t* alpha-mdebug-tdep.c (alpha_mdebug_frame_unwind_cache): Likewise.\n+\t* alpha-tdep.c (alpha_heuristic_frame_unwind_cache): Likewise.\n+\t* arc-tdep.c (arc_print_frame_cache, arc_make_frame_cache): Likewise.\n+\t* arm-tdep.c (arm_make_prologue_cache, arm_exidx_fill_cache)\n+\t(arm_make_epilogue_frame_cache): Likewise.\n+\t* avr-tdep.c (avr_frame_unwind_cache)\n+\t(avr_frame_prev_register): Likewise.\n+\t* cris-tdep.c (cris_scan_prologue): Likewise.\n+\t* csky-tdep.c (csky_frame_unwind_cache): Likewise.\n+\t* frv-tdep.c (frv_analyze_prologue): Likewise.\n+\t* hppa-tdep.c (hppa_frame_cache, hppa_fallback_frame_cache): Likewise.\n+\t* lm32-tdep.c (lm32_frame_cache): Likewise.\n+\t* m32r-tdep.c (m32r_frame_unwind_cache): Likewise.\n+\t* m68hc11-tdep.c (m68hc11_frame_unwind_cache): Likewise.\n+\t* mips-tdep.c (set_reg_offset, mips_insn16_frame_cache)\n+\t(mips_micro_frame_cache, mips_insn32_frame_cache): Likewise.\n+\t(reset_saved_regs): Adjust to set realreg.\n+\t* riscv-tdep.c (riscv_scan_prologue, riscv_frame_cache): Adjust to\n+\tcall member functions.\n+\t* rs6000-tdep.c (rs6000_frame_cache, rs6000_epilogue_frame_cache)\n+\t* s390-tdep.c (s390_prologue_frame_unwind_cache)\n+\t(s390_backchain_frame_unwind_cache): Likewise.\n+\t* score-tdep.c (score7_analyze_prologue)\n+\t(score3_analyze_prologue, score_make_prologue_cache): Likewise.\n+\t* sparc-netbsd-tdep.c (sparc32nbsd_sigcontext_saved_regs): Likewise.\n+\t* sparc-sol2-tdep.c (sparc32_sol2_sigtramp_frame_cache): Likewise.\n+\t* sparc64-netbsd-tdep.c (sparc64nbsd_sigcontext_saved_regs): Likewise.\n+\t* sparc64-sol2-tdep.c (sparc64_sol2_sigtramp_frame_cache): Likewise.\n+\t* tilegx-tdep.c (tilegx_analyze_prologue)\n+\t(tilegx_frame_cache): Likewise.\n+\t* v850-tdep.c (v850_frame_cache): Likewise.\n+\t* vax-tdep.c (vax_frame_cache): Likewise.\n+\n 2021-01-19  Luis Machado  <luis.machado@linaro.org>\n \n \t* frame.h (get_frame_register_bytes): Pass a gdb::array_view instead"
    },
    {
      "sha": "3e26a95a14c73b535e023f602893ad79084d23b3",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 24,
      "deletions": 22,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -518,9 +518,10 @@ aarch64_analyze_prologue (struct gdbarch *gdbarch,\n \t    }\n \n \t  if (tdep->has_pauth () && cache != nullptr)\n-\t    trad_frame_set_value (cache->saved_regs,\n-\t\t\t\t  tdep->pauth_ra_state_regnum,\n-\t\t\t\t  ra_state_val);\n+\t    {\n+\t      int regnum = tdep->pauth_ra_state_regnum;\n+\t      cache->saved_regs[regnum].set_value (ra_state_val);\n+\t    }\n \t}\n       else\n \t{\n@@ -653,15 +654,17 @@ aarch64_analyze_prologue_test (void)\n \telse if (i == AARCH64_LR_REGNUM)\n \t  SELF_CHECK (cache.saved_regs[i].addr () == -264);\n \telse\n-\t  SELF_CHECK (cache.saved_regs[i].is_realreg ());\n+\t  SELF_CHECK (cache.saved_regs[i].is_realreg ()\n+\t\t      && cache.saved_regs[i].realreg () == i);\n       }\n \n     for (int i = 0; i < AARCH64_D_REGISTER_COUNT; i++)\n       {\n-\tint regnum = gdbarch_num_regs (gdbarch);\n+\tint num_regs = gdbarch_num_regs (gdbarch);\n+\tint regnum = i + num_regs + AARCH64_D0_REGNUM;\n \n-\tSELF_CHECK (cache.saved_regs[i + regnum\n-\t\t\t\t     + AARCH64_D0_REGNUM].is_realreg ());\n+\tSELF_CHECK (cache.saved_regs[regnum].is_realreg ()\n+\t\t    && cache.saved_regs[regnum].realreg () == regnum);\n       }\n   }\n \n@@ -693,20 +696,21 @@ aarch64_analyze_prologue_test (void)\n \telse if (i == 19)\n \t  SELF_CHECK (cache.saved_regs[i].addr () == -48);\n \telse\n-\t  SELF_CHECK (cache.saved_regs[i].is_realreg ());\n+\t  SELF_CHECK (cache.saved_regs[i].is_realreg ()\n+\t\t      && cache.saved_regs[i].realreg () == i);\n       }\n \n     for (int i = 0; i < AARCH64_D_REGISTER_COUNT; i++)\n       {\n-\tint regnum = gdbarch_num_regs (gdbarch);\n+\tint num_regs = gdbarch_num_regs (gdbarch);\n+\tint regnum = i + num_regs + AARCH64_D0_REGNUM;\n+\n \n \tif (i == 0)\n-\t  SELF_CHECK (cache.saved_regs[i + regnum\n-\t\t\t\t       + AARCH64_D0_REGNUM].addr ()\n-\t\t      == -24);\n+\t  SELF_CHECK (cache.saved_regs[regnum].addr () == -24);\n \telse\n-\t  SELF_CHECK (cache.saved_regs[i + regnum\n-\t\t\t\t       + AARCH64_D0_REGNUM].is_realreg ());\n+\t  SELF_CHECK (cache.saved_regs[regnum].is_realreg ()\n+\t\t      && cache.saved_regs[regnum].realreg () == regnum);\n       }\n   }\n \n@@ -850,15 +854,14 @@ aarch64_analyze_prologue_test (void)\n \t  else if (i == AARCH64_LR_REGNUM)\n \t    SELF_CHECK (cache.saved_regs[i].addr () == -40);\n \t  else\n-\t    SELF_CHECK (cache.saved_regs[i].is_realreg ());\n+\t    SELF_CHECK (cache.saved_regs[i].is_realreg ()\n+\t\t\t&& cache.saved_regs[i].realreg () == i);\n \t}\n \n       if (tdep->has_pauth ())\n \t{\n-\t  SELF_CHECK (trad_frame_value_p (cache.saved_regs,\n-\t\t\t\t\t  tdep->pauth_ra_state_regnum));\n-\t  SELF_CHECK (cache.saved_regs[tdep->pauth_ra_state_regnum].addr ()\n-\t\t      == 1);\n+\t  int regnum = tdep->pauth_ra_state_regnum;\n+\t  SELF_CHECK (cache.saved_regs[regnum].is_value ());\n \t}\n     }\n }\n@@ -977,7 +980,7 @@ aarch64_make_prologue_cache_1 (struct frame_info *this_frame,\n   /* Calculate actual addresses of saved registers using offsets\n      determined by aarch64_analyze_prologue.  */\n   for (reg = 0; reg < gdbarch_num_regs (get_frame_arch (this_frame)); reg++)\n-    if (trad_frame_addr_p (cache->saved_regs, reg))\n+    if (cache->saved_regs[reg].is_addr ())\n       cache->saved_regs[reg].set_addr (cache->saved_regs[reg].addr ()\n \t\t\t\t       + cache->prev_sp);\n \n@@ -1076,8 +1079,7 @@ aarch64_prologue_prev_register (struct frame_info *this_frame,\n       lr = frame_unwind_register_unsigned (this_frame, AARCH64_LR_REGNUM);\n \n       if (tdep->has_pauth ()\n-\t  && trad_frame_value_p (cache->saved_regs,\n-\t\t\t\t tdep->pauth_ra_state_regnum))\n+\t  && cache->saved_regs[tdep->pauth_ra_state_regnum].is_value ())\n \tlr = aarch64_frame_unmask_lr (tdep, this_frame, lr);\n \n       return frame_unwind_got_constant (this_frame, prev_regnum, lr);"
    },
    {
      "sha": "a062ad99a9f32c6d34d113373407e7695d2b06f3",
      "filename": "gdb/alpha-mdebug-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/alpha-mdebug-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/alpha-mdebug-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/alpha-mdebug-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -254,8 +254,8 @@ alpha_mdebug_frame_unwind_cache (struct frame_info *this_frame,\n \n   /* The stack pointer of the previous frame is computed by popping\n      the current stack frame.  */\n-  if (!trad_frame_addr_p (info->saved_regs, ALPHA_SP_REGNUM))\n-   trad_frame_set_value (info->saved_regs, ALPHA_SP_REGNUM, vfp);\n+  if (!info->saved_regs[ALPHA_SP_REGNUM].is_addr ())\n+    info->saved_regs[ALPHA_SP_REGNUM].set_value (vfp);\n \n   return info;\n }"
    },
    {
      "sha": "90ff81319454a21702f99bb32b4568004b09afc2",
      "filename": "gdb/alpha-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/alpha-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/alpha-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/alpha-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -1289,7 +1289,7 @@ alpha_heuristic_frame_unwind_cache (struct frame_info *this_frame,\n \t\t All it says is that the function we are scanning reused\n \t\t that register for some computation of its own, and is now\n \t\t saving its result.  */\n-\t      if (trad_frame_addr_p(info->saved_regs, reg))\n+\t      if (info->saved_regs[reg].is_addr ())\n \t\tcontinue;\n \n \t      if (reg == 31)\n@@ -1385,14 +1385,14 @@ alpha_heuristic_frame_unwind_cache (struct frame_info *this_frame,\n   /* Convert offsets to absolute addresses.  See above about adding\n      one to the offsets to make all detected offsets non-zero.  */\n   for (reg = 0; reg < ALPHA_NUM_REGS; ++reg)\n-    if (trad_frame_addr_p(info->saved_regs, reg))\n+    if (info->saved_regs[reg].is_addr ())\n       info->saved_regs[reg].set_addr (info->saved_regs[reg].addr ()\n \t\t\t\t      + val - 1);\n \n   /* The stack pointer of the previous frame is computed by popping\n      the current stack frame.  */\n-  if (!trad_frame_addr_p (info->saved_regs, ALPHA_SP_REGNUM))\n-   trad_frame_set_value (info->saved_regs, ALPHA_SP_REGNUM, info->vfp);\n+  if (!info->saved_regs[ALPHA_SP_REGNUM].is_addr ())\n+   info->saved_regs[ALPHA_SP_REGNUM].set_value (info->vfp);\n \n   return info;\n }"
    },
    {
      "sha": "e00216e896ecb1f6fe0bbb2f800c4bbe113b4931",
      "filename": "gdb/arc-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/arc-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/arc-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -1652,7 +1652,7 @@ arc_print_frame_cache (struct gdbarch *gdbarch, const char *message,\n \n   for (int i = 0; i <= ARC_BLINK_REGNUM; i++)\n     {\n-      if (trad_frame_addr_p (cache->saved_regs, i))\n+      if (cache->saved_regs[i].is_addr ())\n \tarc_debug_printf (\"saved register %s at %s %s\",\n \t\t\t  gdbarch_register_name (gdbarch, i),\n \t\t\t  (addresses_known) ? \"address\" : \"offset\",\n@@ -1716,7 +1716,7 @@ arc_make_frame_cache (struct frame_info *this_frame)\n \n   for (int i = 0; i <= ARC_LAST_CORE_REGNUM; i++)\n     {\n-      if (trad_frame_addr_p (cache->saved_regs, i))\n+      if (cache->saved_regs[i].is_addr ())\n \tcache->saved_regs[i].set_addr (cache->saved_regs[i].addr ()\n \t\t\t\t       + cache->prev_sp);\n     }"
    },
    {
      "sha": "0184c252f1068d73a00527c647498261ce26ac0e",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -1906,7 +1906,7 @@ arm_make_prologue_cache (struct frame_info *this_frame)\n   /* Calculate actual addresses of saved registers using offsets\n      determined by arm_scan_prologue.  */\n   for (reg = 0; reg < gdbarch_num_regs (get_frame_arch (this_frame)); reg++)\n-    if (trad_frame_addr_p (cache->saved_regs, reg))\n+    if (cache->saved_regs[reg].is_addr ())\n       cache->saved_regs[reg].set_addr (cache->saved_regs[reg].addr ()\n \t\t\t\t       + cache->prev_sp);\n \n@@ -2366,7 +2366,7 @@ arm_exidx_fill_cache (struct frame_info *this_frame, gdb_byte *entry)\n \t actual value in the current frame.  */\n       if (!vsp_valid)\n \t{\n-\t  if (trad_frame_realreg_p (cache->saved_regs, ARM_SP_REGNUM))\n+\t  if (cache->saved_regs[ARM_SP_REGNUM].is_realreg ())\n \t    {\n \t      int reg = cache->saved_regs[ARM_SP_REGNUM].realreg ();\n \t      vsp = get_frame_register_unsigned (this_frame, reg);\n@@ -2452,7 +2452,7 @@ arm_exidx_fill_cache (struct frame_info *this_frame, gdb_byte *entry)\n \t{\n \t  /* We could only have updated PC by popping into it; if so, it\n \t     will show up as address.  Otherwise, copy LR into PC.  */\n-\t  if (!trad_frame_addr_p (cache->saved_regs, ARM_PC_REGNUM))\n+\t  if (!cache->saved_regs[ARM_PC_REGNUM].is_addr ())\n \t    cache->saved_regs[ARM_PC_REGNUM]\n \t      = cache->saved_regs[ARM_LR_REGNUM];\n \n@@ -2623,7 +2623,7 @@ arm_exidx_fill_cache (struct frame_info *this_frame, gdb_byte *entry)\n \n   /* If we restore SP from a register, assume this was the frame register.\n      Otherwise just fall back to SP as frame register.  */\n-  if (trad_frame_realreg_p (cache->saved_regs, ARM_SP_REGNUM))\n+  if (cache->saved_regs[ARM_SP_REGNUM].is_realreg ())\n     cache->framereg = cache->saved_regs[ARM_SP_REGNUM].realreg ();\n   else\n     cache->framereg = ARM_SP_REGNUM;\n@@ -2760,7 +2760,7 @@ arm_make_epilogue_frame_cache (struct frame_info *this_frame)\n   /* Calculate actual addresses of saved registers using offsets\n      determined by arm_scan_prologue.  */\n   for (reg = 0; reg < gdbarch_num_regs (get_frame_arch (this_frame)); reg++)\n-    if (trad_frame_addr_p (cache->saved_regs, reg))\n+    if (cache->saved_regs[reg].is_addr ())\n       cache->saved_regs[reg].set_addr (cache->saved_regs[reg].addr ()\n \t\t\t\t       + cache->prev_sp);\n "
    },
    {
      "sha": "815c6d451434db63479efc76b6e2d5df85bbfecf",
      "filename": "gdb/avr-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/avr-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/avr-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/avr-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -1050,8 +1050,8 @@ avr_frame_unwind_cache (struct frame_info *this_frame,\n   /* The previous frame's SP needed to be computed.  Save the computed\n      value.  */\n   tdep = gdbarch_tdep (gdbarch);\n-  trad_frame_set_value (info->saved_regs, AVR_SP_REGNUM,\n-\t\t\tinfo->prev_sp - 1 + tdep->call_length);\n+  info->saved_regs[AVR_SP_REGNUM].set_value (info->prev_sp\n+\t\t\t\t\t     - 1 + tdep->call_length);\n \n   return info;\n }\n@@ -1113,7 +1113,7 @@ avr_frame_prev_register (struct frame_info *this_frame,\n \n   if (regnum == AVR_PC_REGNUM || regnum == AVR_PSEUDO_PC_REGNUM)\n     {\n-      if (trad_frame_addr_p (info->saved_regs, AVR_PC_REGNUM))\n+      if (info->saved_regs[AVR_PC_REGNUM].is_addr ())\n \t{\n \t  /* Reading the return PC from the PC register is slightly\n \t     abnormal.  register_size(AVR_PC_REGNUM) says it is 4 bytes,"
    },
    {
      "sha": "e1c141865cc60b5f97d179b10889b70251485d1d",
      "filename": "gdb/cris-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/cris-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/cris-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cris-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -1259,8 +1259,7 @@ cris_scan_prologue (CORE_ADDR pc, struct frame_info *this_frame,\n \n   /* The previous frame's SP needed to be computed.  Save the computed\n      value.  */\n-  trad_frame_set_value (info->saved_regs,\n-\t\t\tgdbarch_sp_regnum (gdbarch), info->prev_sp);\n+  info->saved_regs[gdbarch_sp_regnum (gdbarch)].set_value (info->prev_sp);\n \n   if (!info->leaf_function)\n     {"
    },
    {
      "sha": "3ec18a2cf900df266fbdee0827c196fc176a9fe6",
      "filename": "gdb/csky-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/csky-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/csky-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/csky-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -1871,7 +1871,7 @@ csky_frame_unwind_cache (struct frame_info *this_frame)\n \t\t\t    func_end, this_frame, cache, lr_type);\n \n   /* gdbarch_sp_regnum contains the value and not the address.  */\n-  trad_frame_set_value (cache->saved_regs, sp_regnum, cache->prev_sp);\n+  cache->saved_regs[sp_regnum].set_value (cache->prev_sp);\n   return cache;\n }\n "
    },
    {
      "sha": "f5edfc72ce3e700dab3b1be804b632a036d169f0",
      "filename": "gdb/frv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/frv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/frv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frv-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -967,7 +967,7 @@ frv_analyze_prologue (struct gdbarch *gdbarch, CORE_ADDR pc,\n       info->saved_regs[pc_regnum] = info->saved_regs[lr_regnum];\n \n       /* Save the previous frame's computed SP value.  */\n-      trad_frame_set_value (info->saved_regs, sp_regnum, info->prev_sp);\n+      info->saved_regs[sp_regnum].set_value (info->prev_sp);\n     }\n \n   return last_prologue_pc;"
    },
    {
      "sha": "70a518ed1020077b2c840255d7a9f58d4d4ffe7d",
      "filename": "gdb/hppa-tdep.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/hppa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/hppa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -2163,7 +2163,7 @@ hppa_frame_cache (struct frame_info *this_frame, void **this_cache)\n \t\t\t      paddress (gdbarch, cache->base));\n       }\n      else if (u->Save_SP \n-\t      && trad_frame_addr_p (cache->saved_regs, HPPA_SP_REGNUM))\n+\t      && cache->saved_regs[HPPA_SP_REGNUM].is_addr ())\n       {\n \t    /* Both we're expecting the SP to be saved and the SP has been\n \t       saved.  The entry SP value is saved at this frame's SP\n@@ -2184,14 +2184,14 @@ hppa_frame_cache (struct frame_info *this_frame, void **this_cache)\n \t\t\t      paddress (gdbarch, cache->base));\n \n       }\n-    trad_frame_set_value (cache->saved_regs, HPPA_SP_REGNUM, cache->base);\n+    cache->saved_regs[HPPA_SP_REGNUM].set_value (cache->base);\n   }\n \n   /* The PC is found in the \"return register\", \"Millicode\" uses \"r31\"\n      as the return register while normal code uses \"rp\".  */\n   if (u->Millicode)\n     {\n-      if (trad_frame_addr_p (cache->saved_regs, 31))\n+      if (cache->saved_regs[31].is_addr ())\n \t{\n \t  cache->saved_regs[HPPA_PCOQ_HEAD_REGNUM] = cache->saved_regs[31];\n \t  if (hppa_debug)\n@@ -2200,14 +2200,14 @@ hppa_frame_cache (struct frame_info *this_frame, void **this_cache)\n       else\n \t{\n \t  ULONGEST r31 = get_frame_register_unsigned (this_frame, 31);\n-\t  trad_frame_set_value (cache->saved_regs, HPPA_PCOQ_HEAD_REGNUM, r31);\n+\t  cache->saved_regs[HPPA_PCOQ_HEAD_REGNUM].set_value (r31);\n \t  if (hppa_debug)\n \t    fprintf_unfiltered (gdb_stdlog, \" (pc=r31) [frame] } \");\n \t}\n     }\n   else\n     {\n-      if (trad_frame_addr_p (cache->saved_regs, HPPA_RP_REGNUM))\n+      if (cache->saved_regs[HPPA_RP_REGNUM].is_addr ())\n \t{\n \t  cache->saved_regs[HPPA_PCOQ_HEAD_REGNUM] = \n \t    cache->saved_regs[HPPA_RP_REGNUM];\n@@ -2218,7 +2218,7 @@ hppa_frame_cache (struct frame_info *this_frame, void **this_cache)\n \t{\n \t  ULONGEST rp = get_frame_register_unsigned (this_frame,\n \t\t\t\t\t\t     HPPA_RP_REGNUM);\n-\t  trad_frame_set_value (cache->saved_regs, HPPA_PCOQ_HEAD_REGNUM, rp);\n+\t  cache->saved_regs[HPPA_PCOQ_HEAD_REGNUM].set_value (rp);\n \t  if (hppa_debug)\n \t    fprintf_unfiltered (gdb_stdlog, \" (pc=rp) [frame] } \");\n \t}\n@@ -2238,19 +2238,19 @@ hppa_frame_cache (struct frame_info *this_frame, void **this_cache)\n      on the stack, but it's been overwritten.  The prologue analyzer will\n      set fp_in_r1 when it sees the copy insn so we know to get the value \n      from r1 instead.  */\n-  if (u->Save_SP && !trad_frame_addr_p (cache->saved_regs, HPPA_FP_REGNUM)\n+  if (u->Save_SP && !cache->saved_regs[HPPA_FP_REGNUM].is_addr ()\n       && fp_in_r1)\n     {\n       ULONGEST r1 = get_frame_register_unsigned (this_frame, 1);\n-      trad_frame_set_value (cache->saved_regs, HPPA_FP_REGNUM, r1);\n+      cache->saved_regs[HPPA_FP_REGNUM].set_value (r1);\n     }\n \n   {\n     /* Convert all the offsets into addresses.  */\n     int reg;\n     for (reg = 0; reg < gdbarch_num_regs (gdbarch); reg++)\n       {\n-\tif (trad_frame_addr_p (cache->saved_regs, reg))\n+\tif (cache->saved_regs[reg].is_addr ())\n \t  cache->saved_regs[reg].set_addr (cache->saved_regs[reg].addr ()\n \t\t\t\t\t   + cache->base);\n       }\n@@ -2376,9 +2376,9 @@ hppa_fallback_frame_cache (struct frame_info *this_frame, void **this_cache)\n \n   cache->base = get_frame_register_unsigned (this_frame, HPPA_SP_REGNUM);\n   cache->base -= frame_size;\n-  trad_frame_set_value (cache->saved_regs, HPPA_SP_REGNUM, cache->base);\n+  cache->saved_regs[HPPA_SP_REGNUM].set_value (cache->base);\n \n-  if (trad_frame_addr_p (cache->saved_regs, HPPA_RP_REGNUM))\n+  if (cache->saved_regs[HPPA_RP_REGNUM].is_addr ())\n     {\n       cache->saved_regs[HPPA_RP_REGNUM].set_addr (cache->saved_regs[HPPA_RP_REGNUM].addr ()\n \t\t\t\t\t\t  + cache->base);\n@@ -2389,7 +2389,7 @@ hppa_fallback_frame_cache (struct frame_info *this_frame, void **this_cache)\n     {\n       ULONGEST rp;\n       rp = get_frame_register_unsigned (this_frame, HPPA_RP_REGNUM);\n-      trad_frame_set_value (cache->saved_regs, HPPA_PCOQ_HEAD_REGNUM, rp);\n+      cache->saved_regs[HPPA_PCOQ_HEAD_REGNUM].set_value (rp);\n     }\n \n   return cache;"
    },
    {
      "sha": "0a3bd077cfabe177c84cb9e30e48d0f35e2324ce",
      "filename": "gdb/lm32-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/lm32-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/lm32-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/lm32-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -417,7 +417,7 @@ lm32_frame_cache (struct frame_info *this_frame, void **this_prologue_cache)\n   /* Convert callee save offsets into addresses.  */\n   for (i = 0; i < gdbarch_num_regs (get_frame_arch (this_frame)) - 1; i++)\n     {\n-      if (trad_frame_addr_p (info->saved_regs, i))\n+      if (info->saved_regs[i].is_addr ())\n \tinfo->saved_regs[i].set_addr (this_base + info->saved_regs[i].addr ());\n     }\n \n@@ -429,7 +429,7 @@ lm32_frame_cache (struct frame_info *this_frame, void **this_prologue_cache)\n \n   /* The previous frame's SP needed to be computed.  Save the computed\n      value.  */\n-  trad_frame_set_value (info->saved_regs, SIM_LM32_SP_REGNUM, prev_sp);\n+  info->saved_regs[SIM_LM32_SP_REGNUM].set_value (prev_sp);\n \n   return info;\n }"
    },
    {
      "sha": "e504f371d755faf99f99a83aa7ad936bdd08b7e0",
      "filename": "gdb/m32r-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/m32r-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/m32r-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m32r-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -632,7 +632,7 @@ m32r_frame_unwind_cache (struct frame_info *this_frame,\n   /* Adjust all the saved registers so that they contain addresses and\n      not offsets.  */\n   for (i = 0; i < gdbarch_num_regs (get_frame_arch (this_frame)) - 1; i++)\n-    if (trad_frame_addr_p (info->saved_regs, i))\n+    if (info->saved_regs[i].is_addr ())\n       info->saved_regs[i].set_addr (info->prev_sp\n \t\t\t\t    + info->saved_regs[i].addr ());\n \n@@ -644,7 +644,7 @@ m32r_frame_unwind_cache (struct frame_info *this_frame,\n \n   /* The previous frame's SP needed to be computed.  Save the computed\n      value.  */\n-  trad_frame_set_value (info->saved_regs, M32R_SP_REGNUM, prev_sp);\n+  info->saved_regs[M32R_SP_REGNUM].set_value (prev_sp);\n \n   return info;\n }"
    },
    {
      "sha": "4a1d077b7d858340865010b42f56b1fd99f1cef0",
      "filename": "gdb/m68hc11-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/m68hc11-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/m68hc11-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m68hc11-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -845,14 +845,14 @@ m68hc11_frame_unwind_cache (struct frame_info *this_frame,\n   /* Adjust all the saved registers so that they contain addresses and not\n      offsets.  */\n   for (i = 0; i < gdbarch_num_cooked_regs (gdbarch); i++)\n-    if (trad_frame_addr_p (info->saved_regs, i))\n+    if (info->saved_regs[i].is_addr ())\n       {\n \tinfo->saved_regs[i].set_addr (info->saved_regs[i].addr () + this_base);\n       }\n \n   /* The previous frame's SP needed to be computed.  Save the computed\n      value.  */\n-  trad_frame_set_value (info->saved_regs, HARD_SP_REGNUM, info->prev_sp);\n+  info->saved_regs[HARD_SP_REGNUM].set_value (info->prev_sp);\n \n   return info;\n }"
    },
    {
      "sha": "61545aed86c30ba9bdb627a548ef128afae226c1",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -2444,7 +2444,8 @@ set_reg_offset (struct gdbarch *gdbarch, struct mips_frame_cache *this_cache,\n \t\tint regnum, CORE_ADDR offset)\n {\n   if (this_cache != NULL\n-      && this_cache->saved_regs[regnum].is_realreg ())\n+      && this_cache->saved_regs[regnum].is_realreg ()\n+      && this_cache->saved_regs[regnum].realreg () == regnum)\n     {\n       this_cache->saved_regs[regnum + 0\n \t\t\t     * gdbarch_num_regs (gdbarch)].set_addr (offset);\n@@ -2861,9 +2862,8 @@ mips_insn16_frame_cache (struct frame_info *this_frame, void **this_cache)\n   }\n   \n   /* gdbarch_sp_regnum contains the value and not the address.  */\n-  trad_frame_set_value (cache->saved_regs,\n-\t\t\tgdbarch_num_regs (gdbarch) + MIPS_SP_REGNUM,\n-\t\t\tcache->base);\n+  cache->saved_regs[gdbarch_num_regs (gdbarch)\n+\t\t    + MIPS_SP_REGNUM].set_value (cache->base);\n \n   return (struct mips_frame_cache *) (*this_cache);\n }\n@@ -3296,9 +3296,8 @@ mips_micro_frame_cache (struct frame_info *this_frame, void **this_cache)\n   }\n \n   /* gdbarch_sp_regnum contains the value and not the address.  */\n-  trad_frame_set_value (cache->saved_regs,\n-\t\t\tgdbarch_num_regs (gdbarch) + MIPS_SP_REGNUM,\n-\t\t\tcache->base);\n+  cache->saved_regs[gdbarch_num_regs (gdbarch)\n+\t\t    + MIPS_SP_REGNUM].set_value (cache->base);\n \n   return (struct mips_frame_cache *) (*this_cache);\n }\n@@ -3388,8 +3387,10 @@ reset_saved_regs (struct gdbarch *gdbarch, struct mips_frame_cache *this_cache)\n     const int num_regs = gdbarch_num_regs (gdbarch);\n     int i;\n \n+    /* Reset the register values to their default state.  Register i's value\n+       is in register i.  */\n     for (i = 0; i < num_regs; i++)\n-      this_cache->saved_regs[i].set_addr (-1);\n+      this_cache->saved_regs[i].set_realreg (i);\n   }\n }\n \n@@ -3672,9 +3673,8 @@ mips_insn32_frame_cache (struct frame_info *this_frame, void **this_cache)\n   }\n   \n   /* gdbarch_sp_regnum contains the value and not the address.  */\n-  trad_frame_set_value (cache->saved_regs,\n-\t\t\tgdbarch_num_regs (gdbarch) + MIPS_SP_REGNUM,\n-\t\t\tcache->base);\n+  cache->saved_regs[gdbarch_num_regs (gdbarch)\n+\t\t    + MIPS_SP_REGNUM].set_value (cache->base);\n \n   return (struct mips_frame_cache *) (*this_cache);\n }"
    },
    {
      "sha": "460746a9bfe03de99b59417162f30e6e5e42f215",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -1864,7 +1864,7 @@ riscv_scan_prologue (struct gdbarch *gdbarch,\n \t\t\t\t      gdbarch_register_name (gdbarch, i),\n \t\t\t\t      plongest ((LONGEST) offset));\n \t\t}\n-\t      trad_frame_set_addr (cache->regs, i, offset);\n+\t      cache->regs[i].set_addr (offset);\n \t    }\n \t}\n     }\n@@ -3145,7 +3145,7 @@ riscv_frame_cache (struct frame_info *this_frame, void **this_cache)\n   numregs = gdbarch_num_regs (gdbarch) + gdbarch_num_pseudo_regs (gdbarch);\n   for (regno = 0; regno < numregs; ++regno)\n     {\n-      if (trad_frame_addr_p (cache->regs, regno))\n+      if (cache->regs[regno].is_addr ())\n \tcache->regs[regno].set_addr (cache->regs[regno].addr ()\n \t\t\t\t     + cache->frame_base);\n     }\n@@ -3154,14 +3154,13 @@ riscv_frame_cache (struct frame_info *this_frame, void **this_cache)\n      The previous $ra value is gone, this would have been stored be the\n      previous frame if required.  */\n   cache->regs[gdbarch_pc_regnum (gdbarch)] = cache->regs[RISCV_RA_REGNUM];\n-  trad_frame_set_unknown (cache->regs, RISCV_RA_REGNUM);\n+  cache->regs[RISCV_RA_REGNUM].set_unknown ();\n \n   /* Build the frame id.  */\n   cache->this_id = frame_id_build (cache->frame_base, start_addr);\n \n   /* The previous $sp value is the frame base value.  */\n-  trad_frame_set_value (cache->regs, gdbarch_sp_regnum (gdbarch),\n-\t\t\tcache->frame_base);\n+  cache->regs[gdbarch_sp_regnum (gdbarch)].set_value (cache->frame_base);\n \n   return cache;\n }"
    },
    {
      "sha": "b09f63137dc9ca9f8611cb190f81c450aa6ed978",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -3566,8 +3566,7 @@ rs6000_frame_cache (struct frame_info *this_frame, void **this_cache)\n \tcache->base = (CORE_ADDR) backchain;\n     }\n \n-  trad_frame_set_value (cache->saved_regs,\n-\t\t\tgdbarch_sp_regnum (gdbarch), cache->base);\n+  cache->saved_regs[gdbarch_sp_regnum (gdbarch)].set_value (cache->base);\n \n   /* if != -1, fdata.saved_fpr is the smallest number of saved_fpr.\n      All fpr's from saved_fpr to fp31 are saved.  */\n@@ -3745,8 +3744,7 @@ rs6000_epilogue_frame_cache (struct frame_info *this_frame, void **this_cache)\n       cache->base = sp;\n       cache->initial_sp = sp;\n \n-      trad_frame_set_value (cache->saved_regs,\n-\t\t\t    gdbarch_pc_regnum (gdbarch), lr);\n+      cache->saved_regs[gdbarch_pc_regnum (gdbarch)].set_value (lr);\n     }\n   catch (const gdb_exception_error &ex)\n     {"
    },
    {
      "sha": "57ddd540609a069613e5ad7f3f6688bcc0cd0ba4",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -2451,10 +2451,10 @@ s390_prologue_frame_unwind_cache (struct frame_info *this_frame,\n   /* Set up ABI call-saved/call-clobbered registers.  */\n   for (i = 0; i < S390_NUM_REGS; i++)\n     if (!s390_register_call_saved (gdbarch, i))\n-      trad_frame_set_unknown (info->saved_regs, i);\n+      info->saved_regs[i].set_unknown ();\n \n   /* CC is always call-clobbered.  */\n-  trad_frame_set_unknown (info->saved_regs, S390_PSWM_REGNUM);\n+  info->saved_regs[S390_PSWM_REGNUM].set_unknown ();\n \n   /* Record the addresses of all register spill slots the prologue parser\n      has recognized.  Consider only registers defined as call-saved by the\n@@ -2479,7 +2479,7 @@ s390_prologue_frame_unwind_cache (struct frame_info *this_frame,\n      save area, use that -- we might only think the function frameless\n      because we're in the middle of the prologue ...  */\n   if (size == 0\n-      && !trad_frame_addr_p (info->saved_regs, S390_PSWA_REGNUM))\n+      && !info->saved_regs[S390_PSWA_REGNUM].is_addr ())\n     {\n       info->saved_regs[S390_PSWA_REGNUM].set_realreg (S390_RETADDR_REGNUM);\n     }\n@@ -2490,8 +2490,8 @@ s390_prologue_frame_unwind_cache (struct frame_info *this_frame,\n      libc's thread_start routine.  */\n   if (size > 0)\n     {\n-      if (!trad_frame_addr_p (info->saved_regs, S390_SP_REGNUM)\n-\t  || !trad_frame_addr_p (info->saved_regs, S390_PSWA_REGNUM))\n+      if (!info->saved_regs[S390_SP_REGNUM].is_addr ()\n+\t  || !info->saved_regs[S390_PSWA_REGNUM].is_addr ())\n \tprev_sp = -1;\n     }\n \n@@ -2524,10 +2524,10 @@ s390_backchain_frame_unwind_cache (struct frame_info *this_frame,\n   /* Set up ABI call-saved/call-clobbered registers.  */\n   for (i = 0; i < S390_NUM_REGS; i++)\n     if (!s390_register_call_saved (gdbarch, i))\n-      trad_frame_set_unknown (info->saved_regs, i);\n+      info->saved_regs[i].set_unknown ();\n \n   /* CC is always call-clobbered.  */\n-  trad_frame_set_unknown (info->saved_regs, S390_PSWM_REGNUM);\n+  info->saved_regs[S390_PSWM_REGNUM].set_unknown ();\n \n   /* Get the backchain.  */\n   reg = get_frame_register_unsigned (this_frame, S390_SP_REGNUM);"
    },
    {
      "sha": "531b308749cd47ee220f52c7d824e083acfd460c",
      "filename": "gdb/score-tdep.c",
      "status": "modified",
      "additions": 13,
      "deletions": 5,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/score-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/score-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/score-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -1019,7 +1019,9 @@ score7_analyze_prologue (CORE_ADDR startaddr, CORE_ADDR pc,\n   /* Save RA.  */\n   if (ra_offset_p == 1)\n     {\n-      if (this_cache->saved_regs[SCORE_PC_REGNUM].is_realreg ())\n+      if (this_cache->saved_regs[SCORE_PC_REGNUM].is_realreg ()\n+\t  && this_cache->saved_regs[SCORE_PC_REGNUM].realreg ()\n+\t     == SCORE_PC_REGNUM)\n \tthis_cache->saved_regs[SCORE_PC_REGNUM].set_addr (sp + sp_offset\n \t\t\t\t\t\t\t  - ra_offset);\n     }\n@@ -1032,7 +1034,9 @@ score7_analyze_prologue (CORE_ADDR startaddr, CORE_ADDR pc,\n   /* Save FP.  */\n   if (fp_offset_p == 1)\n     {\n-      if (this_cache->saved_regs[SCORE_FP_REGNUM].is_realreg ())\n+      if (this_cache->saved_regs[SCORE_FP_REGNUM].is_realreg ()\n+\t  && this_cache->saved_regs[SCORE_FP_REGNUM].realreg ()\n+\t     == SCORE_FP_REGNUM)\n \tthis_cache->saved_regs[SCORE_FP_REGNUM].set_addr (sp + sp_offset\n \t\t\t\t\t\t\t  - fp_offset);\n     }\n@@ -1265,7 +1269,9 @@ score3_analyze_prologue (CORE_ADDR startaddr, CORE_ADDR pc,\n   /* Save RA.  */\n   if (ra_offset_p == 1)\n     {\n-      if (this_cache->saved_regs[SCORE_PC_REGNUM].is_realreg ())\n+      if (this_cache->saved_regs[SCORE_PC_REGNUM].is_realreg ()\n+\t  && this_cache->saved_regs[SCORE_PC_REGNUM].realreg ()\n+\t     == SCORE_PC_REGNUM)\n \tthis_cache->saved_regs[SCORE_PC_REGNUM].set_addr (sp + sp_offset\n \t\t\t\t\t\t\t  - ra_offset);\n     }\n@@ -1278,7 +1284,9 @@ score3_analyze_prologue (CORE_ADDR startaddr, CORE_ADDR pc,\n   /* Save FP.  */\n   if (fp_offset_p == 1)\n     {\n-      if (this_cache->saved_regs[SCORE_FP_REGNUM].is_realreg ())\n+      if (this_cache->saved_regs[SCORE_FP_REGNUM].is_realreg ()\n+\t  && this_cache->saved_regs[SCORE_FP_REGNUM].realreg ()\n+\t     == SCORE_FP_REGNUM)\n \tthis_cache->saved_regs[SCORE_FP_REGNUM].set_addr (sp + sp_offset\n \t\t\t\t\t\t\t  - fp_offset);\n     }\n@@ -1318,7 +1326,7 @@ score_make_prologue_cache (struct frame_info *this_frame, void **this_cache)\n   }\n \n   /* Save SP.  */\n-  trad_frame_set_value (cache->saved_regs, SCORE_SP_REGNUM, cache->base);\n+  cache->saved_regs[SCORE_SP_REGNUM].set_value (cache->base);\n \n   return (struct score_frame_cache *) (*this_cache);\n }"
    },
    {
      "sha": "c2de5b544c2eae583659371daca38994b8e5464e",
      "filename": "gdb/sparc-netbsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/sparc-netbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/sparc-netbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-netbsd-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -154,7 +154,7 @@ sparc32nbsd_sigcontext_saved_regs (struct frame_info *this_frame)\n \n \taddr = saved_regs[SPARC_I7_REGNUM].addr ();\n \ti7 = get_frame_memory_unsigned (this_frame, addr, 4);\n-\ttrad_frame_set_value (saved_regs, SPARC_I7_REGNUM, i7 ^ wcookie);\n+\tsaved_regs[SPARC_I7_REGNUM].set_value (i7 ^ wcookie);\n       }\n   }\n "
    },
    {
      "sha": "ce92e7b22e35fc6b5ff2b9ca41103343e3810c67",
      "filename": "gdb/sparc-sol2-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/sparc-sol2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/sparc-sol2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-sol2-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -136,7 +136,7 @@ sparc32_sol2_sigtramp_frame_cache (struct frame_info *this_frame,\n     {\n       /* The register windows haven't been flushed.  */\n       for (regnum = SPARC_L0_REGNUM; regnum <= SPARC_I7_REGNUM; regnum++)\n-\ttrad_frame_set_unknown (cache->saved_regs, regnum);\n+\tcache->saved_regs[regnum].set_unknown ();\n     }\n   else\n     {"
    },
    {
      "sha": "7fa0c1a29afa6809369422cf0be6acb273b29fb7",
      "filename": "gdb/sparc64-netbsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/sparc64-netbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/sparc64-netbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-netbsd-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -139,7 +139,7 @@ sparc64nbsd_sigcontext_saved_regs (CORE_ADDR sigcontext_addr,\n \n \taddr = saved_regs[SPARC_I7_REGNUM].addr ();\n \ti7 = get_frame_memory_unsigned (this_frame, addr, 8);\n-\ttrad_frame_set_value (saved_regs, SPARC_I7_REGNUM, i7 ^ wcookie);\n+\tsaved_regs[SPARC_I7_REGNUM].set_value (i7 ^ wcookie);\n       }\n   }\n "
    },
    {
      "sha": "c4293c938e7ceac62afabef92ac5eb83bab6b516",
      "filename": "gdb/sparc64-sol2-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/sparc64-sol2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/sparc64-sol2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-sol2-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -137,7 +137,7 @@ sparc64_sol2_sigtramp_frame_cache (struct frame_info *this_frame,\n     {\n       /* The register windows haven't been flushed.  */\n       for (regnum = SPARC_L0_REGNUM; regnum <= SPARC_I7_REGNUM; regnum++)\n-\ttrad_frame_set_unknown (cache->saved_regs, regnum);\n+\tcache->saved_regs[regnum].set_unknown ();\n     }\n   else\n     {"
    },
    {
      "sha": "9bd982f49f50f1ce0fc9895b40cf6d5f4d6c0dda",
      "filename": "gdb/tilegx-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 12,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/tilegx-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/tilegx-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tilegx-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -459,12 +459,6 @@ tilegx_analyze_prologue (struct gdbarch* gdbarch,\n \t\t  unsigned saved_register\n \t\t    = (unsigned) reverse_frame[operands[1]].value;\n \n-\t\t  /* realreg >= 0 and addr != -1 indicates that the\n-\t\t     value of saved_register is in memory location\n-\t\t     saved_address.  The value of realreg is not\n-\t\t     meaningful in this case but it must be >= 0.\n-\t\t     See trad-frame.h.  */\n-\t\t  cache->saved_regs[saved_register].set_realreg (saved_register);\n \t\t  cache->saved_regs[saved_register].set_addr (saved_address);\n \t\t} \n \t      else if (cache\n@@ -494,8 +488,7 @@ tilegx_analyze_prologue (struct gdbarch* gdbarch,\n \t\t  new_reverse_frame[i].state = REVERSE_STATE_VALUE;\n \t\t  new_reverse_frame[i].value\n \t\t    = cache->saved_regs[hopefully_sp].addr ();\n-\t\t  trad_frame_set_value (cache->saved_regs,\n-\t\t\t\t\thopefully_sp, prev_sp_value);\n+\t\t  cache->saved_regs[hopefully_sp].set_value (prev_sp_value);\n \t\t}\n \t      else\n \t\t{\n@@ -718,15 +711,14 @@ tilegx_analyze_prologue (struct gdbarch* gdbarch,\n \t      unsigned saved_register = (unsigned) reverse_frame[i].value;\n \n \t      cache->saved_regs[saved_register].set_realreg (i);\n-\t      cache->saved_regs[saved_register].set_addr ((LONGEST) -1);\n \t    }\n \t}\n     }\n \n   if (lr_saved_on_stack_p)\n     {\n-      cache->saved_regs[TILEGX_LR_REGNUM].set_realreg (TILEGX_LR_REGNUM);\n-      cache->saved_regs[TILEGX_LR_REGNUM].set_addr (cache->saved_regs[TILEGX_SP_REGNUM].addr ());\n+      CORE_ADDR addr = cache->saved_regs[TILEGX_SP_REGNUM].addr ();\n+      cache->saved_regs[TILEGX_LR_REGNUM].set_addr (addr);\n     }\n \n   return prolog_end;\n@@ -862,7 +854,7 @@ tilegx_frame_cache (struct frame_info *this_frame, void **this_cache)\n   current_pc = get_frame_pc (this_frame);\n \n   cache->base = get_frame_register_unsigned (this_frame, TILEGX_SP_REGNUM);\n-  trad_frame_set_value (cache->saved_regs, TILEGX_SP_REGNUM, cache->base);\n+  cache->saved_regs[TILEGX_SP_REGNUM].set_value (cache->base);\n \n   if (cache->start_pc)\n     tilegx_analyze_prologue (gdbarch, cache->start_pc, current_pc,"
    },
    {
      "sha": "d5ad0b9b230bf1bc28e44e5c936b618e89b4d682",
      "filename": "gdb/trad-frame.c",
      "status": "modified",
      "additions": 12,
      "deletions": 81,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/trad-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/trad-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/trad-frame.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -69,7 +69,11 @@ trad_frame_alloc_saved_regs (struct gdbarch *gdbarch)\n   trad_frame_saved_reg *this_saved_regs\n     = FRAME_OBSTACK_CALLOC (numregs, trad_frame_saved_reg);\n \n+  /* For backwards compatibility, initialize all the register values to\n+     REALREG, with register 0 stored in 0, register 1 stored in 1 and so\n+     on.  */\n   trad_frame_reset_saved_regs (gdbarch, this_saved_regs);\n+\n   return this_saved_regs;\n }\n \n@@ -86,80 +90,27 @@ trad_frame_alloc_saved_regs (struct frame_info *this_frame)\n   return trad_frame_alloc_saved_regs (gdbarch);\n }\n \n-int\n-trad_frame_value_p (trad_frame_saved_reg this_saved_regs[], int regnum)\n-{\n-  return this_saved_regs[regnum].is_value ();\n-}\n-\n-int\n-trad_frame_addr_p (trad_frame_saved_reg this_saved_regs[], int regnum)\n-{\n-  return this_saved_regs[regnum].is_addr ();\n-}\n-\n-int\n-trad_frame_realreg_p (trad_frame_saved_reg this_saved_regs[],\n-\t\t      int regnum)\n-{\n-  return this_saved_regs[regnum].is_realreg ();\n-}\n-\n-/* See trad-frame.h.  */\n-\n-bool\n-trad_frame_value_bytes_p (trad_frame_saved_reg this_saved_regs[],\n-\t\t\t  int regnum)\n-{\n-  return this_saved_regs[regnum].is_value_bytes ();\n-}\n-\n-void\n-trad_frame_set_value (trad_frame_saved_reg this_saved_regs[],\n-\t\t      int regnum, LONGEST val)\n-{\n-  this_saved_regs[regnum].set_value (val);\n-}\n-\n-/* See trad-frame.h.  */\n-\n-void\n-trad_frame_set_realreg (trad_frame_saved_reg this_saved_regs[],\n-\t\t\tint regnum, int realreg)\n-{\n-  this_saved_regs[regnum].set_realreg (realreg);\n-}\n-\n-/* See trad-frame.h.  */\n-\n-void\n-trad_frame_set_addr (trad_frame_saved_reg this_saved_regs[],\n-\t\t     int regnum, CORE_ADDR addr)\n-{\n-  this_saved_regs[regnum].set_addr (addr);\n-}\n-\n void\n trad_frame_set_reg_value (struct trad_frame_cache *this_trad_cache,\n \t\t\t  int regnum, LONGEST val)\n {\n   /* External interface for users of trad_frame_cache\n      (who cannot access the prev_regs object directly).  */\n-  trad_frame_set_value (this_trad_cache->prev_regs, regnum, val);\n+  this_trad_cache->prev_regs[regnum].set_value (val);\n }\n \n void\n trad_frame_set_reg_realreg (struct trad_frame_cache *this_trad_cache,\n \t\t\t    int regnum, int realreg)\n {\n-  trad_frame_set_realreg (this_trad_cache->prev_regs, regnum, realreg);\n+  this_trad_cache->prev_regs[regnum].set_realreg (realreg);\n }\n \n void\n trad_frame_set_reg_addr (struct trad_frame_cache *this_trad_cache,\n \t\t\t int regnum, CORE_ADDR addr)\n {\n-  trad_frame_set_addr (this_trad_cache->prev_regs, regnum, addr);\n+  this_trad_cache->prev_regs[regnum].set_addr (addr);\n }\n \n void\n@@ -218,26 +169,6 @@ trad_frame_set_reg_regmap (struct trad_frame_cache *this_trad_cache,\n     }\n }\n \n-void\n-trad_frame_set_unknown (trad_frame_saved_reg this_saved_regs[],\n-\t\t\tint regnum)\n-{\n-  this_saved_regs[regnum].set_unknown ();\n-}\n-\n-/* See trad-frame.h.  */\n-\n-void\n-trad_frame_set_value_bytes (trad_frame_saved_reg this_saved_regs[],\n-\t\t\t    int regnum,\n-\t\t\t    gdb::array_view<const gdb_byte> bytes)\n-{\n-  /* Allocate the space and copy the data bytes.  */\n-  gdb_byte *data = FRAME_OBSTACK_CALLOC (bytes.size (), gdb_byte);\n-  memcpy (data, bytes.data (), bytes.size ());\n-  this_saved_regs[regnum].set_value_bytes (data);\n-}\n-\n /* See trad-frame.h.  */\n \n void\n@@ -247,7 +178,7 @@ trad_frame_set_reg_value_bytes (struct trad_frame_cache *this_trad_cache,\n {\n   /* External interface for users of trad_frame_cache\n      (who cannot access the prev_regs object directly).  */\n-  trad_frame_set_value_bytes (this_trad_cache->prev_regs, regnum, bytes);\n+  this_trad_cache->prev_regs[regnum].set_value_bytes (bytes);\n }\n \n \n@@ -257,18 +188,18 @@ trad_frame_get_prev_register (struct frame_info *this_frame,\n \t\t\t      trad_frame_saved_reg this_saved_regs[],\n \t\t\t      int regnum)\n {\n-  if (trad_frame_addr_p (this_saved_regs, regnum))\n+  if (this_saved_regs[regnum].is_addr ())\n     /* The register was saved in memory.  */\n     return frame_unwind_got_memory (this_frame, regnum,\n \t\t\t\t    this_saved_regs[regnum].addr ());\n-  else if (trad_frame_realreg_p (this_saved_regs, regnum))\n+  else if (this_saved_regs[regnum].is_realreg ())\n     return frame_unwind_got_register (this_frame, regnum,\n \t\t\t\t      this_saved_regs[regnum].realreg ());\n-  else if (trad_frame_value_p (this_saved_regs, regnum))\n+  else if (this_saved_regs[regnum].is_value ())\n     /* The register's value is available.  */\n     return frame_unwind_got_constant (this_frame, regnum,\n \t\t\t\t      this_saved_regs[regnum].value ());\n-  else if (trad_frame_value_bytes_p (this_saved_regs, regnum))\n+  else if (this_saved_regs[regnum].is_value_bytes ())\n     /* The register's value is available as a sequence of bytes.  */\n     return frame_unwind_got_bytes (this_frame, regnum,\n \t\t\t\t   this_saved_regs[regnum].value_bytes ());"
    },
    {
      "sha": "0351441dd3690b44a2da65d04f6d9fed6543fc3b",
      "filename": "gdb/trad-frame.h",
      "status": "modified",
      "additions": 7,
      "deletions": 39,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/trad-frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/trad-frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/trad-frame.h?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -114,10 +114,14 @@ struct trad_frame_saved_reg\n   /* Encode that the saved register's value is stored as a sequence of bytes.\n      This is useful when the value is larger than what primitive types\n      can hold.  */\n-  void set_value_bytes (const gdb_byte *value_bytes)\n+  void set_value_bytes (gdb::array_view<const gdb_byte> bytes)\n   {\n+    /* Allocate the space and copy the data bytes.  */\n+    gdb_byte *data = FRAME_OBSTACK_CALLOC (bytes.size (), gdb_byte);\n+    memcpy (data, bytes.data (), bytes.size ());\n+\n     m_kind = trad_frame_saved_reg_kind::VALUE_BYTES;\n-    m_reg.value_bytes = value_bytes;\n+    m_reg.value_bytes = data;\n   }\n \n   /* Getters */\n@@ -185,43 +189,7 @@ struct trad_frame_saved_reg\n   } m_reg;\n };\n \n-/* Encode REGNUM value in the trad-frame.  */\n-void trad_frame_set_value (trad_frame_saved_reg this_saved_regs[],\n-\t\t\t   int regnum, LONGEST val);\n-\n-/* Encode REGNUM is in REALREG in the trad-frame.  */\n-void trad_frame_set_realreg (trad_frame_saved_reg this_saved_regs[],\n-\t\t\t     int regnum, int realreg);\n-\n-/* Encode REGNUM is at address ADDR in the trad-frame.  */\n-void trad_frame_set_addr (trad_frame_saved_reg this_trad_cache[],\n-\t\t\t  int regnum, CORE_ADDR addr);\n-\n-/* Mark REGNUM as unknown.  */\n-void trad_frame_set_unknown (trad_frame_saved_reg this_saved_regs[],\n-\t\t\t     int regnum);\n-\n-/* Encode REGNUM value in the trad-frame as a sequence of bytes.  This is\n-   useful when the value is larger than what primitive types can hold.  */\n-void trad_frame_set_value_bytes (trad_frame_saved_reg this_saved_regs[],\n-\t\t\t\t int regnum,\n-\t\t\t\t gdb::array_view<const gdb_byte> bytes);\n-\n-/* Convenience functions, return non-zero if the register has been\n-   encoded as specified.  */\n-int trad_frame_value_p (trad_frame_saved_reg this_saved_regs[],\n-\t\t\tint regnum);\n-int trad_frame_addr_p (trad_frame_saved_reg this_saved_regs[],\n-\t\t       int regnum);\n-int trad_frame_realreg_p (trad_frame_saved_reg this_saved_regs[],\n-\t\t\t  int regnum);\n-\n-/* Return TRUE if REGNUM is stored as a sequence of bytes, and FALSE\n-   otherwise.  */\n-bool trad_frame_value_bytes_p (trad_frame_saved_reg this_saved_regs[],\n-\t\t\t      int regnum);\n-\n-/* Reset the saved regs cache, setting register values to -1.  */\n+/* Reset the saved regs cache, setting register values to REALREG.  */\n void trad_frame_reset_saved_regs (struct gdbarch *gdbarch,\n \t\t\t\t  trad_frame_saved_reg *regs);\n "
    },
    {
      "sha": "1c46e29ebd102f7118ff73d4a26221f3d3fe1898",
      "filename": "gdb/v850-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/v850-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/v850-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/v850-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -1273,13 +1273,12 @@ v850_frame_cache (struct frame_info *this_frame, void **this_cache)\n \n   /* Now that we have the base address for the stack frame we can\n      calculate the value of sp in the calling frame.  */\n-  trad_frame_set_value (cache->saved_regs, E_SP_REGNUM,\n-  \t\t\tcache->base - cache->sp_offset);\n+  cache->saved_regs[E_SP_REGNUM].set_value (cache->base - cache->sp_offset);\n \n   /* Adjust all the saved registers such that they contain addresses\n      instead of offsets.  */\n   for (i = 0; i < gdbarch_num_regs (gdbarch); i++)\n-    if (trad_frame_addr_p (cache->saved_regs, i))\n+    if (cache->saved_regs[i].is_addr ())\n       cache->saved_regs[i].set_addr (cache->saved_regs[i].addr ()\n \t\t\t\t     + cache->base);\n "
    },
    {
      "sha": "5e6c65ae44216edb51bff0b9efd1940b356dadc0",
      "filename": "gdb/vax-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/vax-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9a87d3525c2c32c92f0bcfc450ef005fa1f2863/gdb/vax-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/vax-tdep.c?ref=a9a87d3525c2c32c92f0bcfc450ef005fa1f2863",
      "patch": "@@ -361,7 +361,7 @@ vax_frame_cache (struct frame_info *this_frame, void **this_cache)\n     }\n \n   /* Bits 1:0 of the stack pointer were saved in the control bits.  */\n-  trad_frame_set_value (cache->saved_regs, VAX_SP_REGNUM, addr + (mask >> 14));\n+  cache->saved_regs[VAX_SP_REGNUM].set_value (addr + (mask >> 14));\n \n   return cache;\n }"
    }
  ]
}