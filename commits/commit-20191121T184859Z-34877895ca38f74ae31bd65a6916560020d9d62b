{
  "sha": "34877895ca38f74ae31bd65a6916560020d9d62b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzQ4Nzc4OTVjYTM4Zjc0YWUzMWJkNjVhNjkxNjU2MDAyMGQ5ZDYyYg==",
  "commit": {
    "author": {
      "name": "Peeter Joot",
      "email": "peeter.joot@lzlabs.com",
      "date": "2017-10-06T20:13:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-11-21T18:48:59Z"
    },
    "message": "Adjust byte order variable display/change if DW_AT_endianity is present.\n\n- Rationale:\nIt is possible for compilers to indicate the desired byte order\ninterpretation of scalar variables using the DWARF attribute:\n   DW_AT_endianity\n\nA type flagged with this variable would typically use one of:\n   DW_END_big\n   DW_END_little\nwhich instructs the debugger what the desired byte order interpretation\nof the variable should be.\n\nThe GCC compiler (as of V6) has a mechanism for setting the desired byte\nordering of the fields within a structure or union.  For, example, on a\nlittle endian target, a structure declared as:\n   struct big {\n       int v;\n       short a[4];\n   } __attribute__( ( scalar_storage_order( \"big-endian\" ) ) );\ncould be used to ensure all the structure members have a big-endian\ninterpretation (the compiler would automatically insert byte swap\ninstructions before and after respective store and load instructions).\n\n- To reproduce\nGCC V8 is required to correctly emit DW_AT_endianity DWARF attributes\nin all situations when the scalar_storage_order attribute is used.\n\nA fix for (dwarf endianity instrumentation) for GCC V6-V7 can be found\nin the URL field of the following PR:\n   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82509\n\n- Test-case:\nA new test case (testsuite/gdb.base/endianity.*) is included with this\npatch.\n\nManual testing for mixed endianity code has also been done with GCC V8.\nSee:\n   https://gcc.gnu.org/bugzilla/show_bug.cgi?id=82509#c4\n\n- Observed vs. expected:\n\nWithout this change, using scalar_storage_order that doesn't match the\ntarget, such as\n\nstruct otherendian\n{\n  int v;\n} __attribute__( ( scalar_storage_order( \"big-endian\" ) ) );\n\nwould behave like the following on a little endian target:\n\n   Breakpoint 1 at 0x401135: file endianity.c, line 41.\n   (gdb) run\n   Starting program: /home/pjoot/freeware/t/a.out\n   Missing separate debuginfos, use: debuginfo-install glibc-2.17-292.el7.x86_64\n\n   Breakpoint 1, main () at endianity.c:41\n   41        struct otherendian o = {3};\n   (gdb) n\n   43        do_nothing (&o); /* START */\n   (gdb) p o\n   $1 = {v = 50331648}\n   (gdb) p /x\n   $2 = {v = 0x3000000}\n\nwhereas with this gdb enhancement we can access the variable with the user\nspecified endianity:\n\n   Breakpoint 1, main () at endianity.c:41\n   41        struct otherendian o = {3};\n   (gdb) p o\n   $1 = {v = 0}\n   (gdb) n\n   43        do_nothing (&o); /* START */\n   (gdb) p o\n   $2 = {v = 3}\n   (gdb) p o.v = 4\n   $3 = 4\n   (gdb) p o.v\n   $4 = 4\n   (gdb) x/4xb &o.v\n   0x7fffffffd90c: 0x00    0x00    0x00    0x04\n\n(observe that the 4 byte int variable has a big endian representation in the\n hex dump.)\n\ngdb/ChangeLog\n2019-11-21  Peeter Joot  <peeter.joot@lzlabs.com>\n\n\tByte reverse display of variables with DW_END_big, DW_END_little\n\t(DW_AT_endianity) dwarf attributes if different than the native\n\tbyte order.\n\t* ada-lang.c (ada_value_binop):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* ada-valprint.c (printstr):\n\t(ada_val_print_string):\n\t* ada-lang.c (value_pointer):\n\t(ada_value_binop):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* c-lang.c (c_get_string):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* c-valprint.c (c_val_print_array):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* cp-valprint.c (cp_print_class_member):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* dwarf2loc.c (rw_pieced_value):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* dwarf2read.c (read_base_type): Handle DW_END_big,\n\tDW_END_little\n\t* f-lang.c (f_get_encoding):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* findvar.c (default_read_var_value):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* gdbtypes.c (check_types_equal):\n\tRequire matching TYPE_ENDIANITY_NOT_DEFAULT if set.\n\t(recursive_dump_type): Print TYPE_ENDIANITY_BIG,\n\tand TYPE_ENDIANITY_LITTLE if set.\n\t(type_byte_order): new function.\n\t* gdbtypes.h (TYPE_ENDIANITY_NOT_DEFAULT): New macro.\n\t(struct main_type) <flag_endianity_not_default>:\n\tNew field.\n\t(type_byte_order): New function.\n\t* infcmd.c (default_print_one_register_info):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* p-lang.c (pascal_printstr):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* p-valprint.c (pascal_val_print):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* printcmd.c (print_scalar_formatted):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* solib-darwin.c (darwin_current_sos):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* solib-svr4.c (solib_svr4_r_ldsomap):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* stap-probe.c (stap_modify_semaphore):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* target-float.c (target_float_same_format_p):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* valarith.c (scalar_binop):\n\t(value_bit_index):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* valops.c (value_cast):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* valprint.c (generic_emit_char):\n\t(generic_printstr):\n\t(val_print_string):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* value.c (unpack_long):\n\t(unpack_bits_as_long):\n\t(unpack_value_bitfield):\n\t(modify_field):\n\t(pack_long):\n\t(pack_unsigned_long):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* findvar.c (unsigned_pointer_to_address):\n\t(signed_pointer_to_address):\n\t(unsigned_address_to_pointer):\n\t(address_to_signed_pointer):\n\t(default_read_var_value):\n\t(default_value_from_register):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* gnu-v3-abi.c (gnuv3_make_method_ptr):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\t* riscv-tdep.c (riscv_print_one_register_info):\n\tUse type_byte_order instead of gdbarch_byte_order.\n\ngdb/testsuite/ChangeLog\n2019-11-21  Peeter Joot  <peeter.joot@lzlabs.com>\n\n\t* gdb.base/endianity.c: New test.\n\t* gdb.base/endianity.exp: New file.\n\nChange-Id: I4bd98c1b4508c2d7c5a5dbb15d7b7b1cb4e667e2",
    "tree": {
      "sha": "c040b456c573621008afce8c847ceb3fa8bb37bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c040b456c573621008afce8c847ceb3fa8bb37bd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/34877895ca38f74ae31bd65a6916560020d9d62b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/34877895ca38f74ae31bd65a6916560020d9d62b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/34877895ca38f74ae31bd65a6916560020d9d62b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/34877895ca38f74ae31bd65a6916560020d9d62b/comments",
  "author": null,
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b52696f9e567da157b152ae641f064507f993969",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b52696f9e567da157b152ae641f064507f993969",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b52696f9e567da157b152ae641f064507f993969"
    }
  ],
  "stats": {
    "total": 327,
    "additions": 269,
    "deletions": 58
  },
  "files": [
    {
      "sha": "02490485838a19c90859e4dbcbaf9b96385edede",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 79,
      "deletions": 0,
      "changes": 79,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -1,3 +1,82 @@\n+2019-11-21  Peeter Joot  <peeter.joot@lzlabs.com>\n+\n+\tByte reverse display of variables with DW_END_big, DW_END_little\n+\t(DW_AT_endianity) dwarf attributes if different than the native\n+\tbyte order.\n+\t* ada-lang.c (ada_value_binop):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* ada-valprint.c (printstr):\n+\t(ada_val_print_string):\n+\t* ada-lang.c (value_pointer):\n+\t(ada_value_binop):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* c-lang.c (c_get_string):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* c-valprint.c (c_val_print_array):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* cp-valprint.c (cp_print_class_member):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* dwarf2loc.c (rw_pieced_value):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* dwarf2read.c (read_base_type): Handle DW_END_big,\n+\tDW_END_little\n+\t* f-lang.c (f_get_encoding):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* findvar.c (default_read_var_value):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* gdbtypes.c (check_types_equal):\n+\tRequire matching TYPE_ENDIANITY_NOT_DEFAULT if set.\n+\t(recursive_dump_type): Print TYPE_ENDIANITY_BIG,\n+\tand TYPE_ENDIANITY_LITTLE if set.\n+\t(type_byte_order): new function.\n+\t* gdbtypes.h (TYPE_ENDIANITY_NOT_DEFAULT): New macro.\n+\t(struct main_type) <flag_endianity_not_default>:\n+\tNew field.\n+\t(type_byte_order): New function.\n+\t* infcmd.c (default_print_one_register_info):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* p-lang.c (pascal_printstr):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* p-valprint.c (pascal_val_print):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* printcmd.c (print_scalar_formatted):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* solib-darwin.c (darwin_current_sos):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* solib-svr4.c (solib_svr4_r_ldsomap):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* stap-probe.c (stap_modify_semaphore):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* target-float.c (target_float_same_format_p):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* valarith.c (scalar_binop):\n+\t(value_bit_index):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* valops.c (value_cast):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* valprint.c (generic_emit_char):\n+\t(generic_printstr):\n+\t(val_print_string):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* value.c (unpack_long):\n+\t(unpack_bits_as_long):\n+\t(unpack_value_bitfield):\n+\t(modify_field):\n+\t(pack_long):\n+\t(pack_unsigned_long):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* findvar.c (unsigned_pointer_to_address):\n+\t(signed_pointer_to_address):\n+\t(unsigned_address_to_pointer):\n+\t(address_to_signed_pointer):\n+\t(default_read_var_value):\n+\t(default_value_from_register):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* gnu-v3-abi.c (gnuv3_make_method_ptr):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\t* riscv-tdep.c (riscv_print_one_register_info):\n+\tUse type_byte_order instead of gdbarch_byte_order.\n+\n 2019-11-21  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* top.c (current_ui_gdb_stdout_ptr): Spell out by hand."
    },
    {
      "sha": "36001ef323568495dc53e63053deb2f31e6ae1f2",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -4546,7 +4546,7 @@ value_pointer (struct value *value, struct type *type)\n \n   addr = value_address (value);\n   gdbarch_address_to_pointer (gdbarch, type, buf, addr);\n-  addr = extract_unsigned_integer (buf, len, gdbarch_byte_order (gdbarch));\n+  addr = extract_unsigned_integer (buf, len, type_byte_order (type));\n   return addr;\n }\n \n@@ -9678,7 +9678,7 @@ ada_value_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n   val = allocate_value (type1);\n   store_unsigned_integer (value_contents_raw (val),\n                           TYPE_LENGTH (value_type (val)),\n-\t\t\t  gdbarch_byte_order (get_type_arch (type1)), v);\n+\t\t\t  type_byte_order (type1), v);\n   return val;\n }\n "
    },
    {
      "sha": "4bb9247f519fce1ef565a9f26732d20bce24863c",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -476,7 +476,7 @@ printstr (struct ui_file *stream, struct type *elttype, const gdb_byte *string,\n \t  unsigned int length, int force_ellipses, int type_len,\n \t  const struct value_print_options *options)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (elttype));\n+  enum bfd_endian byte_order = type_byte_order (elttype);\n   unsigned int i;\n   unsigned int things_printed = 0;\n   int in_quotes = 0;\n@@ -719,7 +719,7 @@ ada_val_print_string (struct type *type, const gdb_byte *valaddr,\n \t\t      struct value *original_value,\n \t\t      const struct value_print_options *options)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (type));\n+  enum bfd_endian byte_order = type_byte_order (type);\n   struct type *elttype = TYPE_TARGET_TYPE (type);\n   unsigned int eltlen;\n   unsigned int len;"
    },
    {
      "sha": "1de44f7efb5b3f178d5a047890da91dea2aa868d",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -245,7 +245,7 @@ c_get_string (struct value *value, gdb::unique_xmalloc_ptr<gdb_byte> *buffer,\n   struct type *element_type = TYPE_TARGET_TYPE (type);\n   int req_length = *length;\n   enum bfd_endian byte_order\n-    = gdbarch_byte_order (get_type_arch (type));\n+    = type_byte_order (type);\n \n   if (element_type == NULL)\n     goto error;"
    },
    {
      "sha": "58675f6d9dffe08bfbde968c9a6ff2821a1f1e6e",
      "filename": "gdb/c-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/c-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/c-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-valprint.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -247,8 +247,7 @@ c_val_print_array (struct type *type, const gdb_byte *valaddr,\n     {\n       LONGEST low_bound, high_bound;\n       int eltlen, len;\n-      struct gdbarch *gdbarch = get_type_arch (type);\n-      enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n+      enum bfd_endian byte_order = type_byte_order (type);\n       unsigned int i = 0;\t/* Number of characters printed.  */\n \n       if (!get_array_bounds (type, &low_bound, &high_bound))"
    },
    {
      "sha": "e445d42d3fa98f2ca4d9a1e88cc6e6105ee9a88f",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -740,7 +740,7 @@ void\n cp_print_class_member (const gdb_byte *valaddr, struct type *type,\n \t\t       struct ui_file *stream, const char *prefix)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (type));\n+  enum bfd_endian byte_order = type_byte_order (type);\n \n   /* VAL is a byte offset into the structure type SELF_TYPE.\n      Find the name of the field for that offset and"
    },
    {
      "sha": "e25ee6680b46ab046c6afdbd74944a6dcb7425ab",
      "filename": "gdb/dwarf2loc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/dwarf2loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/dwarf2loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2loc.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -1601,7 +1601,7 @@ rw_pieced_value (struct value *v, struct value *from)\n       bits_to_skip += (8 * value_offset (value_parent (v))\n \t\t       + value_bitpos (v));\n       if (from != NULL\n-\t  && (gdbarch_byte_order (get_type_arch (value_type (from)))\n+\t  && (type_byte_order (value_type (from))\n \t      == BFD_ENDIAN_BIG))\n \t{\n \t  /* Use the least significant bits of FROM.  */"
    },
    {
      "sha": "d89a54138be2dd26dc4a4456f6c2263a3d5c9b1d",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 21,
      "deletions": 11,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -17661,24 +17661,24 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n   struct type *type;\n   struct attribute *attr;\n   int encoding = 0, bits = 0;\n+  int endianity = 0;\n   const char *name;\n+  gdbarch *arch;\n \n   attr = dwarf2_attr (die, DW_AT_encoding, cu);\n   if (attr != nullptr)\n-    {\n-      encoding = DW_UNSND (attr);\n-    }\n+    encoding = DW_UNSND (attr);\n   attr = dwarf2_attr (die, DW_AT_byte_size, cu);\n   if (attr != nullptr)\n-    {\n-      bits = DW_UNSND (attr) * TARGET_CHAR_BIT;\n-    }\n+    bits = DW_UNSND (attr) * TARGET_CHAR_BIT;\n   name = dwarf2_name (die, cu);\n   if (!name)\n-    {\n-      complaint (_(\"DW_AT_name missing from DW_TAG_base_type\"));\n-    }\n+    complaint (_(\"DW_AT_name missing from DW_TAG_base_type\"));\n+  attr = dwarf2_attr (die, DW_AT_endianity, cu);\n+  if (attr)\n+    endianity = DW_UNSND (attr);\n \n+  arch = get_objfile_arch (objfile);\n   switch (encoding)\n     {\n       case DW_ATE_address:\n@@ -17729,8 +17729,6 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n \tbreak;\n       case DW_ATE_UTF:\n \t{\n-\t  gdbarch *arch = get_objfile_arch (objfile);\n-\n \t  if (bits == 16)\n \t    type = builtin_type (arch)->builtin_char16;\n \t  else if (bits == 32)\n@@ -17757,6 +17755,18 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n \n   maybe_set_alignment (cu, die, type);\n \n+  switch (endianity)\n+    {\n+      case DW_END_big:\n+        if (gdbarch_byte_order (arch) == BFD_ENDIAN_LITTLE)\n+          TYPE_ENDIANITY_NOT_DEFAULT (type) = 1;\n+        break;\n+      case DW_END_little:\n+        if (gdbarch_byte_order (arch) == BFD_ENDIAN_BIG)\n+          TYPE_ENDIANITY_NOT_DEFAULT (type) = 1;\n+        break;\n+    }\n+\n   return set_die_type (die, type, cu);\n }\n "
    },
    {
      "sha": "fd4ad0f1411bcba917a01d8ea5c765473efbe2e0",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -59,7 +59,7 @@ f_get_encoding (struct type *type)\n       encoding = target_charset (get_type_arch (type));\n       break;\n     case 4:\n-      if (gdbarch_byte_order (get_type_arch (type)) == BFD_ENDIAN_BIG)\n+      if (type_byte_order (type) == BFD_ENDIAN_BIG)\n \tencoding = \"UTF-32BE\";\n       else\n \tencoding = \"UTF-32LE\";"
    },
    {
      "sha": "95cc58d83f8011f86cf4e9776edc42244ddc0523",
      "filename": "gdb/findvar.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/findvar.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/findvar.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/findvar.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -309,7 +309,7 @@ CORE_ADDR\n unsigned_pointer_to_address (struct gdbarch *gdbarch,\n \t\t\t     struct type *type, const gdb_byte *buf)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n+  enum bfd_endian byte_order = type_byte_order (type);\n \n   return extract_unsigned_integer (buf, TYPE_LENGTH (type), byte_order);\n }\n@@ -318,7 +318,7 @@ CORE_ADDR\n signed_pointer_to_address (struct gdbarch *gdbarch,\n \t\t\t   struct type *type, const gdb_byte *buf)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n+  enum bfd_endian byte_order = type_byte_order (type);\n \n   return extract_signed_integer (buf, TYPE_LENGTH (type), byte_order);\n }\n@@ -329,7 +329,7 @@ void\n unsigned_address_to_pointer (struct gdbarch *gdbarch, struct type *type,\n \t\t\t     gdb_byte *buf, CORE_ADDR addr)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n+  enum bfd_endian byte_order = type_byte_order (type);\n \n   store_unsigned_integer (buf, TYPE_LENGTH (type), byte_order, addr);\n }\n@@ -338,7 +338,7 @@ void\n address_to_signed_pointer (struct gdbarch *gdbarch, struct type *type,\n \t\t\t   gdb_byte *buf, CORE_ADDR addr)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n+  enum bfd_endian byte_order = type_byte_order (type);\n \n   store_signed_integer (buf, TYPE_LENGTH (type), byte_order, addr);\n }\n@@ -620,7 +620,7 @@ default_read_var_value (struct symbol *var, const struct block *var_block,\n       /* Put the constant back in target format. */\n       v = allocate_value (type);\n       store_signed_integer (value_contents_raw (v), TYPE_LENGTH (type),\n-\t\t\t    gdbarch_byte_order (get_type_arch (type)),\n+\t\t\t    type_byte_order (type),\n \t\t\t    (LONGEST) SYMBOL_VALUE (var));\n       VALUE_LVAL (v) = not_lval;\n       return v;\n@@ -840,7 +840,7 @@ default_value_from_register (struct gdbarch *gdbarch, struct type *type,\n      an integral number of registers.  Otherwise, you need to do\n      some fiddling with the last register copied here for little\n      endian machines.  */\n-  if (gdbarch_byte_order (gdbarch) == BFD_ENDIAN_BIG\n+  if (type_byte_order (type) == BFD_ENDIAN_BIG\n       && len < register_size (gdbarch, regnum))\n     /* Big-endian, and we want less than full size.  */\n     set_value_offset (value, register_size (gdbarch, regnum) - len);"
    },
    {
      "sha": "31c1a7b732b1627077a3b1dcd566875b4e8b1829",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -3616,6 +3616,7 @@ check_types_equal (struct type *type1, struct type *type2,\n       || TYPE_LENGTH (type1) != TYPE_LENGTH (type2)\n       || TYPE_UNSIGNED (type1) != TYPE_UNSIGNED (type2)\n       || TYPE_NOSIGN (type1) != TYPE_NOSIGN (type2)\n+      || TYPE_ENDIANITY_NOT_DEFAULT (type1) != TYPE_ENDIANITY_NOT_DEFAULT (type2)\n       || TYPE_VARARGS (type1) != TYPE_VARARGS (type2)\n       || TYPE_VECTOR (type1) != TYPE_VECTOR (type2)\n       || TYPE_NOTTEXT (type1) != TYPE_NOTTEXT (type2)\n@@ -4669,6 +4670,10 @@ recursive_dump_type (struct type *type, int spaces)\n     {\n       puts_filtered (\" TYPE_NOSIGN\");\n     }\n+  if (TYPE_ENDIANITY_NOT_DEFAULT (type))\n+    {\n+      puts_filtered (\" TYPE_ENDIANITY_NOT_DEFAULT\");\n+    }\n   if (TYPE_STUB (type))\n     {\n       puts_filtered (\" TYPE_STUB\");\n@@ -5617,3 +5622,21 @@ _initialize_gdbtypes (void)\n \t\t\t   show_strict_type_checking,\n \t\t\t   &setchecklist, &showchecklist);\n }\n+\n+/* See gdbtypes.h.  */\n+enum bfd_endian\n+type_byte_order (const struct type *type)\n+{\n+  bfd_endian byteorder = gdbarch_byte_order (get_type_arch (type));\n+  if (TYPE_ENDIANITY_NOT_DEFAULT (type))\n+    {\n+      if (byteorder == BFD_ENDIAN_BIG)\n+        return BFD_ENDIAN_LITTLE;\n+      else if (byteorder == BFD_ENDIAN_LITTLE)\n+        return BFD_ENDIAN_BIG;\n+      else\n+        return BFD_ENDIAN_UNKNOWN;\n+    }\n+\n+  return byteorder;\n+}"
    },
    {
      "sha": "8fc770c5d39ce26033b802b06640002811be14b1",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -219,6 +219,12 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n \n #define TYPE_NOSIGN(t)\t\t(TYPE_MAIN_TYPE (t)->flag_nosign)\n \n+/* * A compiler may supply dwarf instrumentation\n+   that indicates the desired endian interpretation of the variable\n+   differs from the native endian representation. */\n+\n+#define TYPE_ENDIANITY_NOT_DEFAULT(t) (TYPE_MAIN_TYPE (t)->flag_endianity_not_default)\n+\n /* * This appears in a type's flags word if it is a stub type (e.g.,\n    if someone referenced a type that wasn't defined in a source file\n    via (struct sir_not_appearing_in_this_film *)).  */\n@@ -701,6 +707,7 @@ struct main_type\n   unsigned int flag_gnu_ifunc : 1;\n   unsigned int flag_fixed_instance : 1;\n   unsigned int flag_objfile_owned : 1;\n+  unsigned int flag_endianity_not_default : 1;\n \n   /* * True if this type was declared with \"class\" rather than\n      \"struct\".  */\n@@ -2146,6 +2153,12 @@ extern int type_not_allocated (const struct type *type);\n \n extern int type_not_associated (const struct type *type);\n \n+/* * When the type includes explicit byte ordering, return that.\n+   Otherwise, the byte ordering from gdbarch_byte_order for \n+   get_type_arch is returned.  */\n+   \n+extern enum bfd_endian type_byte_order (const struct type *type);\n+\n /* A flag to enable printing of debugging information of C++\n    overloading.  */\n "
    },
    {
      "sha": "2a5486c8a10e39426c2b70cea52981b5f5eba85b",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -678,7 +678,7 @@ gnuv3_make_method_ptr (struct type *type, gdb_byte *contents,\n {\n   struct gdbarch *gdbarch = get_type_arch (type);\n   int size = TYPE_LENGTH (builtin_type (gdbarch)->builtin_data_ptr);\n-  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n+  enum bfd_endian byte_order = type_byte_order (type);\n \n   /* FIXME drow/2006-12-24: The adjustment of \"this\" is currently\n      always zero, since the method pointer is of the correct type."
    },
    {
      "sha": "eb18efab513bf9c917a9b25bd5d640f15e9b96f6",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -2216,7 +2216,7 @@ default_print_one_register_info (struct ui_file *file,\n     {\n       struct value_print_options opts;\n       const gdb_byte *valaddr = value_contents_for_printing (val);\n-      enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (regtype));\n+      enum bfd_endian byte_order = type_byte_order (regtype);\n \n       get_user_print_options (&opts);\n       opts.deref_ref = 1;"
    },
    {
      "sha": "33cb6e635d81fce07215b2128f1c84dfc57127b2",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -230,7 +230,7 @@ pascal_printstr (struct ui_file *stream, struct type *type,\n \t\t const char *encoding, int force_ellipses,\n \t\t const struct value_print_options *options)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (type));\n+  enum bfd_endian byte_order = type_byte_order (type);\n   unsigned int i;\n   unsigned int things_printed = 0;\n   int in_quotes = 0;"
    },
    {
      "sha": "c465d1455b42842fb09f1b27d64e2a36e0f0d2d2",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -67,7 +67,7 @@ pascal_val_print (struct type *type,\n \t\t  const struct value_print_options *options)\n {\n   struct gdbarch *gdbarch = get_type_arch (type);\n-  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n+  enum bfd_endian byte_order = type_byte_order (type);\n   unsigned int i = 0;\t/* Number of characters printed */\n   unsigned len;\n   struct type *elttype;"
    },
    {
      "sha": "0251d465bd9df922847bfef7b3e34e2e1437444d",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -356,7 +356,7 @@ print_scalar_formatted (const gdb_byte *valaddr, struct type *type,\n {\n   struct gdbarch *gdbarch = get_type_arch (type);\n   unsigned int len = TYPE_LENGTH (type);\n-  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n+  enum bfd_endian byte_order = type_byte_order (type);\n \n   /* String printing should go through val_print_scalar_formatted.  */\n   gdb_assert (options->format != 's');"
    },
    {
      "sha": "d262b7d07e7fae3647515e4ba1c78089ad9e7873",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -688,7 +688,7 @@ riscv_print_one_register_info (struct gdbarch *gdbarch,\n     {\n       struct value_print_options opts;\n       const gdb_byte *valaddr = value_contents_for_printing (val);\n-      enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (regtype));\n+      enum bfd_endian byte_order = type_byte_order (regtype);\n \n       get_user_print_options (&opts);\n       opts.deref_ref = 1;"
    },
    {
      "sha": "969bfd529bc20acf039d8d328f4d5b86eb362aea",
      "filename": "gdb/solib-darwin.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/solib-darwin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/solib-darwin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-darwin.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -223,7 +223,7 @@ static struct so_list *\n darwin_current_sos (void)\n {\n   struct type *ptr_type = builtin_type (target_gdbarch ())->builtin_data_ptr;\n-  enum bfd_endian byte_order = gdbarch_byte_order (target_gdbarch ());\n+  enum bfd_endian byte_order = type_byte_order (ptr_type);\n   int ptr_len = TYPE_LENGTH (ptr_type);\n   unsigned int image_info_size;\n   struct so_list *head = NULL;"
    },
    {
      "sha": "de765576d0b7fda28028b4899a79ccffb16f4fae",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -897,7 +897,7 @@ solib_svr4_r_ldsomap (struct svr4_info *info)\n {\n   struct link_map_offsets *lmo = svr4_fetch_link_map_offsets ();\n   struct type *ptr_type = builtin_type (target_gdbarch ())->builtin_data_ptr;\n-  enum bfd_endian byte_order = gdbarch_byte_order (target_gdbarch ());\n+  enum bfd_endian byte_order = type_byte_order (ptr_type);\n   ULONGEST version = 0;\n \n   try"
    },
    {
      "sha": "ba927790a5d6bb1aa33dbdf3d136dc9bf2c3954d",
      "filename": "gdb/stap-probe.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/stap-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/stap-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stap-probe.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -1435,17 +1435,16 @@ stap_modify_semaphore (CORE_ADDR address, int set, struct gdbarch *gdbarch)\n       return;\n     }\n \n-  value = extract_unsigned_integer (bytes, TYPE_LENGTH (type),\n-\t\t\t\t    gdbarch_byte_order (gdbarch));\n+  enum bfd_endian byte_order = type_byte_order (type);\n+  value = extract_unsigned_integer (bytes, TYPE_LENGTH (type), byte_order);\n   /* Note that we explicitly don't worry about overflow or\n      underflow.  */\n   if (set)\n     ++value;\n   else\n     --value;\n \n-  store_unsigned_integer (bytes, TYPE_LENGTH (type),\n-\t\t\t  gdbarch_byte_order (gdbarch), value);\n+  store_unsigned_integer (bytes, TYPE_LENGTH (type), byte_order, value);\n \n   if (target_write_memory (address, bytes, TYPE_LENGTH (type)) != 0)\n     warning (_(\"Could not write the value of a SystemTap semaphore.\"));"
    },
    {
      "sha": "caa6943395016cb19e9dcef1a3bdb5375fc1d7bb",
      "filename": "gdb/target-float.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/target-float.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/target-float.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-float.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -1753,7 +1753,7 @@ match_endianness (const gdb_byte *from, const struct type *type, gdb_byte *to)\n #define OPPOSITE_BYTE_ORDER BFD_ENDIAN_BIG\n #endif\n \n-  if (gdbarch_byte_order (get_type_arch (type)) == OPPOSITE_BYTE_ORDER)\n+  if (type_byte_order (type) == OPPOSITE_BYTE_ORDER)\n     for (i = 0; i < len; i++)\n       to[i] = from[len - i - 1];\n   else\n@@ -2160,8 +2160,8 @@ target_float_same_format_p (const struct type *type1,\n \n       case TYPE_CODE_DECFLOAT:\n \treturn (TYPE_LENGTH (type1) == TYPE_LENGTH (type2)\n-\t\t&& (gdbarch_byte_order (get_type_arch (type1))\n-\t\t    == gdbarch_byte_order (get_type_arch (type2))));\n+\t\t&& (type_byte_order (type1)\n+\t\t    == type_byte_order (type2)));\n \n       default:\n \tgdb_assert_not_reached (\"unexpected type code\");"
    },
    {
      "sha": "d4c42bd6afc31f295dbdb6135e7eb7f8c57f81da",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -1,3 +1,8 @@\n+2019-11-21  Peeter Joot  <peeter.joot@lzlabs.com>\n+\n+\t* gdb.base/endianity.c: New test.\n+\t* gdb.base/endianity.exp: New file.\n+\n 2019-11-21  Lukas Durfina  <ldurfina@tachyum.com>\n \n \t* gdb.arch/amd64-eval.exp: Skip test if target is not x86-64."
    },
    {
      "sha": "5ab090dd3d25e1dae427b38f132dbef3efb366a3",
      "filename": "gdb/testsuite/gdb.base/endianity.c",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/testsuite/gdb.base/endianity.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/testsuite/gdb.base/endianity.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/endianity.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -0,0 +1,45 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This tests the handling of dwarf attributes:\n+    DW_AT_endianity, DW_END_big, and DW_END_little.  */\n+struct otherendian\n+{\n+  int v;\n+  short w;\n+}\n+#if defined __GNUC__ && (__GNUC__ >= 6)\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+__attribute__( ( scalar_storage_order( \"big-endian\" ) ) )\n+#else\n+__attribute__( ( scalar_storage_order( \"little-endian\" ) ) )\n+#endif\n+#endif\n+;\n+\n+void\n+do_nothing (struct otherendian *c)\n+{\n+}\n+\n+int\n+main (void)\n+{\n+  struct otherendian o = {3,2};\n+\n+  do_nothing (&o); /* START */\n+}"
    },
    {
      "sha": "80df01213e485f53b3fa424b38788625fbd4bf48",
      "filename": "gdb/testsuite/gdb.base/endianity.exp",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/testsuite/gdb.base/endianity.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/testsuite/gdb.base/endianity.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/endianity.exp?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -0,0 +1,40 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+standard_testfile .c\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] } {\n+  return -1\n+}\n+\n+set bp_location [gdb_get_line_number \"START\"]\n+if ![runto \"endianity.c:$bp_location\" ] then {\n+  fail \"couldn't run to start\"\n+  return -1\n+}\n+\n+gdb_test \"print o\" \"= {v = 3, w = 2}\" \"print o before assignment\"\n+\n+gdb_test \"print o.v = 4\" \"= 4\"\n+gdb_test \"print o.w = 3\" \"= 3\"\n+\n+# scalar_storage_order requires gcc >= 6\n+if { ([test_compiler_info {gcc-[0-5]-*}] || ![test_compiler_info gcc*]) } {\n+  setup_xfail \"*-*-*\"\n+}\n+gdb_test \"x/x &o.v\" \"0x04000000\"\n+gdb_test \"x/xh &o.w\" \"0x0300\"\n+\n+gdb_test \"print o\" \"= {v = 4, w = 3}\" \"print o after assignment\""
    },
    {
      "sha": "ea999b5ba71a3a876e2f44f75f95b55225094b83",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -988,7 +988,7 @@ scalar_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n       val = allocate_value (result_type);\n       store_signed_integer (value_contents_raw (val),\n \t\t\t    TYPE_LENGTH (result_type),\n-\t\t\t    gdbarch_byte_order (get_type_arch (result_type)),\n+\t\t\t    type_byte_order (result_type),\n \t\t\t    v);\n     }\n   else\n@@ -1136,8 +1136,7 @@ scalar_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n \t  val = allocate_value (result_type);\n \t  store_unsigned_integer (value_contents_raw (val),\n \t\t\t\t  TYPE_LENGTH (value_type (val)),\n-\t\t\t\t  gdbarch_byte_order\n-\t\t\t\t    (get_type_arch (result_type)),\n+\t\t\t\t  type_byte_order (result_type),\n \t\t\t\t  v);\n \t}\n       else\n@@ -1266,8 +1265,7 @@ scalar_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n \t  val = allocate_value (result_type);\n \t  store_signed_integer (value_contents_raw (val),\n \t\t\t\tTYPE_LENGTH (value_type (val)),\n-\t\t\t\tgdbarch_byte_order\n-\t\t\t\t  (get_type_arch (result_type)),\n+\t\t\t\ttype_byte_order (result_type),\n \t\t\t\tv);\n \t}\n     }\n@@ -1712,7 +1710,7 @@ value_bit_index (struct type *type, const gdb_byte *valaddr, int index)\n     return -1;\n   rel_index = index - low_bound;\n   word = extract_unsigned_integer (valaddr + (rel_index / TARGET_CHAR_BIT), 1,\n-\t\t\t\t   gdbarch_byte_order (gdbarch));\n+\t\t\t\t   type_byte_order (type));\n   rel_index %= TARGET_CHAR_BIT;\n   if (gdbarch_bits_big_endian (gdbarch))\n     rel_index = TARGET_CHAR_BIT - 1 - rel_index;"
    },
    {
      "sha": "4597e99a0691dbbdc3bd413142f990ede4a31b22",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -483,7 +483,7 @@ value_cast (struct type *type, struct value *arg2)\n       if (code2 == TYPE_CODE_PTR)\n         longest = extract_unsigned_integer\n \t\t    (value_contents (arg2), TYPE_LENGTH (type2),\n-\t\t     gdbarch_byte_order (get_type_arch (type2)));\n+\t\t     type_byte_order (type2));\n       else\n         longest = value_as_long (arg2);\n       return value_from_longest (to_type, convert_to_boolean ?"
    },
    {
      "sha": "ced0dbcd0a60c3bcef4e97c3b10e51c60a3e0633",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -2402,7 +2402,7 @@ generic_emit_char (int c, struct type *type, struct ui_file *stream,\n \t\t   int quoter, const char *encoding)\n {\n   enum bfd_endian byte_order\n-    = gdbarch_byte_order (get_type_arch (type));\n+    = type_byte_order (type);\n   gdb_byte *c_buf;\n   int need_escape = 0;\n \n@@ -2722,7 +2722,7 @@ generic_printstr (struct ui_file *stream, struct type *type,\n \t\t  int quote_char, int c_style_terminator,\n \t\t  const struct value_print_options *options)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (type));\n+  enum bfd_endian byte_order = type_byte_order (type);\n   unsigned int i;\n   int width = TYPE_LENGTH (type);\n   int finished = 0;\n@@ -2834,7 +2834,7 @@ val_print_string (struct type *elttype, const char *encoding,\n   int bytes_read;\n   gdb::unique_xmalloc_ptr<gdb_byte> buffer;\t/* Dynamically growable fetch buffer.  */\n   struct gdbarch *gdbarch = get_type_arch (elttype);\n-  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n+  enum bfd_endian byte_order = type_byte_order (elttype);\n   int width = TYPE_LENGTH (elttype);\n \n   /* First we need to figure out the limit on the number of characters we are"
    },
    {
      "sha": "35a7a5cdce3d894f0b2d55653bbfe111c993b46f",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34877895ca38f74ae31bd65a6916560020d9d62b/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=34877895ca38f74ae31bd65a6916560020d9d62b",
      "patch": "@@ -2737,7 +2737,7 @@ value_as_address (struct value *val)\n LONGEST\n unpack_long (struct type *type, const gdb_byte *valaddr)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (type));\n+  enum bfd_endian byte_order = type_byte_order (type);\n   enum type_code code = TYPE_CODE (type);\n   int len = TYPE_LENGTH (type);\n   int nosign = TYPE_UNSIGNED (type);\n@@ -3100,7 +3100,7 @@ static LONGEST\n unpack_bits_as_long (struct type *field_type, const gdb_byte *valaddr,\n \t\t     LONGEST bitpos, LONGEST bitsize)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (field_type));\n+  enum bfd_endian byte_order = type_byte_order (field_type);\n   ULONGEST val;\n   ULONGEST valmask;\n   int lsbcount;\n@@ -3209,7 +3209,7 @@ unpack_value_bitfield (struct value *dest_val,\n   int dst_bit_offset;\n   struct type *field_type = value_type (dest_val);\n \n-  byte_order = gdbarch_byte_order (get_type_arch (field_type));\n+  byte_order = type_byte_order (field_type);\n \n   /* First, unpack and sign extend the bitfield as if it was wholly\n      valid.  Optimized out/unavailable bits are read as zero, but\n@@ -3269,7 +3269,7 @@ void\n modify_field (struct type *type, gdb_byte *addr,\n \t      LONGEST fieldval, LONGEST bitpos, LONGEST bitsize)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (type));\n+  enum bfd_endian byte_order = type_byte_order (type);\n   ULONGEST oword;\n   ULONGEST mask = (ULONGEST) -1 >> (8 * sizeof (ULONGEST) - bitsize);\n   LONGEST bytesize;\n@@ -3315,7 +3315,7 @@ modify_field (struct type *type, gdb_byte *addr,\n void\n pack_long (gdb_byte *buf, struct type *type, LONGEST num)\n {\n-  enum bfd_endian byte_order = gdbarch_byte_order (get_type_arch (type));\n+  enum bfd_endian byte_order = type_byte_order (type);\n   LONGEST len;\n \n   type = check_typedef (type);\n@@ -3363,7 +3363,7 @@ pack_unsigned_long (gdb_byte *buf, struct type *type, ULONGEST num)\n \n   type = check_typedef (type);\n   len = TYPE_LENGTH (type);\n-  byte_order = gdbarch_byte_order (get_type_arch (type));\n+  byte_order = type_byte_order (type);\n \n   switch (TYPE_CODE (type))\n     {"
    }
  ]
}