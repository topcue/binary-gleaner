{
  "sha": "24d127aa9f26445709dbd53e14e2ab636a449888",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjRkMTI3YWE5ZjI2NDQ1NzA5ZGJkNTNlMTRlMmFiNjM2YTQ0OTg4OA==",
  "commit": {
    "author": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2021-03-22T11:12:36Z"
    },
    "committer": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2021-04-01T12:58:36Z"
    },
    "message": "Replace const_strneq with startswith.\n\nbinutils/ChangeLog:\n\n\t* dwarf.c (display_debug_lines_raw): Replace const_strneq with\n\tstartswith.\n\t(display_debug_lines_decoded): Likewise.\n\t(display_debug_links): Likewise.\n\t* elfcomm.c (setup_archive): Likewise.\n\t* elfcomm.h (const_strneq): Likewise.\n\t* readelf.c (process_section_headers): Likewise.\n\t(slurp_ia64_unwind_table): Likewise.\n\t(slurp_hppa_unwind_table): Likewise.\n\t(decode_arm_unwind): Likewise.\n\t(display_debug_section): Likewise.\n\t(process_note): Likewise.",
    "tree": {
      "sha": "ab6a6cf08408f26812202c4d66128dadf35cc2a6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ab6a6cf08408f26812202c4d66128dadf35cc2a6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/24d127aa9f26445709dbd53e14e2ab636a449888",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24d127aa9f26445709dbd53e14e2ab636a449888",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/24d127aa9f26445709dbd53e14e2ab636a449888",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24d127aa9f26445709dbd53e14e2ab636a449888/comments",
  "author": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "84838a61666fbc412119f544e6973ab59dd510a4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84838a61666fbc412119f544e6973ab59dd510a4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/84838a61666fbc412119f544e6973ab59dd510a4"
    }
  ],
  "stats": {
    "total": 133,
    "additions": 74,
    "deletions": 59
  },
  "files": [
    {
      "sha": "125ac81103b2dabe571d750cbcafe44fd166abe6",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24d127aa9f26445709dbd53e14e2ab636a449888/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24d127aa9f26445709dbd53e14e2ab636a449888/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=24d127aa9f26445709dbd53e14e2ab636a449888",
      "patch": "@@ -1,3 +1,18 @@\n+2021-04-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* dwarf.c (display_debug_lines_raw): Replace const_strneq with\n+\tstartswith.\n+\t(display_debug_lines_decoded): Likewise.\n+\t(display_debug_links): Likewise.\n+\t* elfcomm.c (setup_archive): Likewise.\n+\t* elfcomm.h (const_strneq): Likewise.\n+\t* readelf.c (process_section_headers): Likewise.\n+\t(slurp_ia64_unwind_table): Likewise.\n+\t(slurp_hppa_unwind_table): Likewise.\n+\t(decode_arm_unwind): Likewise.\n+\t(display_debug_section): Likewise.\n+\t(process_note): Likewise.\n+\n 2021-03-31  Alan Modra  <amodra@gmail.com>\n \n \t* sysdep.h (POISON_BFD_BOOLEAN): Define."
    },
    {
      "sha": "293d33ec9acb849d34e7f74b0b465e06b1320194",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24d127aa9f26445709dbd53e14e2ab636a449888/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24d127aa9f26445709dbd53e14e2ab636a449888/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=24d127aa9f26445709dbd53e14e2ab636a449888",
      "patch": "@@ -4500,7 +4500,7 @@ display_debug_lines_raw (struct dwarf_section *  section,\n       unsigned char *end_of_sequence;\n       int i;\n \n-      if (const_strneq (section->name, \".debug_line.\")\n+      if (startswith (section->name, \".debug_line.\")\n \t  /* Note: the following does not apply to .debug_line.dwo sections.\n \t     These are full debug_line sections.  */\n \t  && strcmp (section->name, \".debug_line.dwo\") != 0)\n@@ -4924,7 +4924,7 @@ display_debug_lines_decoded (struct dwarf_section *  section,\n       unsigned char **directory_table = NULL;\n       dwarf_vma n_directories = 0;\n \n-      if (const_strneq (section->name, \".debug_line.\")\n+      if (startswith (section->name, \".debug_line.\")\n \t  /* Note: the following does not apply to .debug_line.dwo sections.\n \t     These are full debug_line sections.  */\n \t  && strcmp (section->name, \".debug_line.dwo\") != 0)\n@@ -10031,7 +10031,7 @@ display_debug_links (struct dwarf_section *  section,\n \n   printf (_(\"  Separate debug info file: %s\\n\"), filename);\n \n-  if (const_strneq (section->name, \".gnu_debuglink\"))\n+  if (startswith (section->name, \".gnu_debuglink\"))\n     {\n       unsigned int          crc32;\n       unsigned int          crc_offset;\n@@ -10055,7 +10055,7 @@ display_debug_links (struct dwarf_section *  section,\n \t  return 0;\n \t}\n     }\n-  else /* const_strneq (section->name, \".gnu_debugaltlink\") */\n+  else /* startswith (section->name, \".gnu_debugaltlink\") */\n     {\n       const unsigned char * build_id = section->start + filelen + 1;\n       bfd_size_type         build_id_len = section->size - (filelen + 1);"
    },
    {
      "sha": "c5092c64377a979dd9fc5981054141f682961134",
      "filename": "binutils/elfcomm.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24d127aa9f26445709dbd53e14e2ab636a449888/binutils/elfcomm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24d127aa9f26445709dbd53e14e2ab636a449888/binutils/elfcomm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/elfcomm.c?ref=24d127aa9f26445709dbd53e14e2ab636a449888",
      "patch": "@@ -27,6 +27,7 @@\n \n #include \"sysdep.h\"\n #include \"libiberty.h\"\n+#include \"bfd.h\"\n #include \"filenames.h\"\n #include \"aout/ar.h\"\n #include \"elfcomm.h\"\n@@ -611,12 +612,12 @@ setup_archive (struct archive_info *arch, const char *file_name,\n     }\n \n   /* See if this is the archive symbol table.  */\n-  if (const_strneq (arch->arhdr.ar_name, \"/               \"))\n+  if (startswith (arch->arhdr.ar_name, \"/               \"))\n     {\n       if (! process_archive_index_and_symbols (arch, 4, read_symbols))\n \treturn 1;\n     }\n-  else if (const_strneq (arch->arhdr.ar_name, \"/SYM64/         \"))\n+  else if (startswith (arch->arhdr.ar_name, \"/SYM64/         \"))\n     {\n       arch->uses_64bit_indices = 1;\n       if (! process_archive_index_and_symbols (arch, 8, read_symbols))\n@@ -625,7 +626,7 @@ setup_archive (struct archive_info *arch, const char *file_name,\n   else if (read_symbols)\n     printf (_(\"%s has no archive index\\n\"), file_name);\n \n-  if (const_strneq (arch->arhdr.ar_name, \"//              \"))\n+  if (startswith (arch->arhdr.ar_name, \"//              \"))\n     {\n       /* This is the archive string table holding long member names.  */\n       char fmag_save = arch->arhdr.ar_fmag[0];"
    },
    {
      "sha": "04e909c2da33d0452df996aa7327bd9fe0d6fb26",
      "filename": "binutils/elfcomm.h",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24d127aa9f26445709dbd53e14e2ab636a449888/binutils/elfcomm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24d127aa9f26445709dbd53e14e2ab636a449888/binutils/elfcomm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/elfcomm.h?ref=24d127aa9f26445709dbd53e14e2ab636a449888",
      "patch": "@@ -48,7 +48,6 @@ extern void byte_get_64 (const unsigned char *, elf_vma *, elf_vma *);\n /* This is just a bit of syntatic sugar.  */\n #define streq(a,b)\t  (strcmp ((a), (b)) == 0)\n #define strneq(a,b,n)\t  (strncmp ((a), (b), (n)) == 0)\n-#define const_strneq(a,b) (strncmp ((a), (b), sizeof (b) - 1) == 0)\n \n /* Structure to hold information about an archive file.  */\n "
    },
    {
      "sha": "01fba0b20e6e7da4e2c3ab65bb529b87ec940e40",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 51,
      "deletions": 51,
      "changes": 102,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24d127aa9f26445709dbd53e14e2ab636a449888/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24d127aa9f26445709dbd53e14e2ab636a449888/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=24d127aa9f26445709dbd53e14e2ab636a449888",
      "patch": "@@ -6589,44 +6589,44 @@ process_section_headers (Filedata * filedata)\n \t   || do_debug_str || do_debug_str_offsets || do_debug_loc\n \t   || do_debug_ranges\n \t   || do_debug_addr || do_debug_cu_index || do_debug_links)\n-\t  && (const_strneq (name, \".debug_\")\n-\t      || const_strneq (name, \".zdebug_\")))\n+\t  && (startswith (name, \".debug_\")\n+\t      || startswith (name, \".zdebug_\")))\n \t{\n           if (name[1] == 'z')\n             name += sizeof (\".zdebug_\") - 1;\n           else\n             name += sizeof (\".debug_\") - 1;\n \n \t  if (do_debugging\n-\t      || (do_debug_info     && const_strneq (name, \"info\"))\n-\t      || (do_debug_info     && const_strneq (name, \"types\"))\n-\t      || (do_debug_abbrevs  && const_strneq (name, \"abbrev\"))\n+\t      || (do_debug_info     && startswith (name, \"info\"))\n+\t      || (do_debug_info     && startswith (name, \"types\"))\n+\t      || (do_debug_abbrevs  && startswith (name, \"abbrev\"))\n \t      || (do_debug_lines    && strcmp (name, \"line\") == 0)\n-\t      || (do_debug_lines    && const_strneq (name, \"line.\"))\n-\t      || (do_debug_pubnames && const_strneq (name, \"pubnames\"))\n-\t      || (do_debug_pubtypes && const_strneq (name, \"pubtypes\"))\n-\t      || (do_debug_pubnames && const_strneq (name, \"gnu_pubnames\"))\n-\t      || (do_debug_pubtypes && const_strneq (name, \"gnu_pubtypes\"))\n-\t      || (do_debug_aranges  && const_strneq (name, \"aranges\"))\n-\t      || (do_debug_ranges   && const_strneq (name, \"ranges\"))\n-\t      || (do_debug_ranges   && const_strneq (name, \"rnglists\"))\n-\t      || (do_debug_frames   && const_strneq (name, \"frame\"))\n-\t      || (do_debug_macinfo  && const_strneq (name, \"macinfo\"))\n-\t      || (do_debug_macinfo  && const_strneq (name, \"macro\"))\n-\t      || (do_debug_str      && const_strneq (name, \"str\"))\n-\t      || (do_debug_links    && const_strneq (name, \"sup\"))\n-\t      || (do_debug_str_offsets && const_strneq (name, \"str_offsets\"))\n-\t      || (do_debug_loc      && const_strneq (name, \"loc\"))\n-\t      || (do_debug_loc      && const_strneq (name, \"loclists\"))\n-\t      || (do_debug_addr     && const_strneq (name, \"addr\"))\n-\t      || (do_debug_cu_index && const_strneq (name, \"cu_index\"))\n-\t      || (do_debug_cu_index && const_strneq (name, \"tu_index\"))\n+\t      || (do_debug_lines    && startswith (name, \"line.\"))\n+\t      || (do_debug_pubnames && startswith (name, \"pubnames\"))\n+\t      || (do_debug_pubtypes && startswith (name, \"pubtypes\"))\n+\t      || (do_debug_pubnames && startswith (name, \"gnu_pubnames\"))\n+\t      || (do_debug_pubtypes && startswith (name, \"gnu_pubtypes\"))\n+\t      || (do_debug_aranges  && startswith (name, \"aranges\"))\n+\t      || (do_debug_ranges   && startswith (name, \"ranges\"))\n+\t      || (do_debug_ranges   && startswith (name, \"rnglists\"))\n+\t      || (do_debug_frames   && startswith (name, \"frame\"))\n+\t      || (do_debug_macinfo  && startswith (name, \"macinfo\"))\n+\t      || (do_debug_macinfo  && startswith (name, \"macro\"))\n+\t      || (do_debug_str      && startswith (name, \"str\"))\n+\t      || (do_debug_links    && startswith (name, \"sup\"))\n+\t      || (do_debug_str_offsets && startswith (name, \"str_offsets\"))\n+\t      || (do_debug_loc      && startswith (name, \"loc\"))\n+\t      || (do_debug_loc      && startswith (name, \"loclists\"))\n+\t      || (do_debug_addr     && startswith (name, \"addr\"))\n+\t      || (do_debug_cu_index && startswith (name, \"cu_index\"))\n+\t      || (do_debug_cu_index && startswith (name, \"tu_index\"))\n \t      )\n \t    request_dump_bynumber (&filedata->dump, i, DEBUG_DUMP);\n \t}\n       /* Linkonce section to be combined with .debug_info at link time.  */\n       else if ((do_debugging || do_debug_info)\n-\t       && const_strneq (name, \".gnu.linkonce.wi.\"))\n+\t       && startswith (name, \".gnu.linkonce.wi.\"))\n \trequest_dump_bynumber (&filedata->dump, i, DEBUG_DUMP);\n       else if (do_debug_frames && streq (name, \".eh_frame\"))\n \trequest_dump_bynumber (&filedata->dump, i, DEBUG_DUMP);\n@@ -6636,7 +6636,7 @@ process_section_headers (Filedata * filedata)\n       /* Trace sections for Itanium VMS.  */\n       else if ((do_debugging || do_trace_info || do_trace_abbrevs\n                 || do_trace_aranges)\n-\t       && const_strneq (name, \".trace_\"))\n+\t       && startswith (name, \".trace_\"))\n \t{\n           name += sizeof (\".trace_\") - 1;\n \n@@ -6648,8 +6648,8 @@ process_section_headers (Filedata * filedata)\n \t    request_dump_bynumber (&filedata->dump, i, DEBUG_DUMP);\n \t}\n       else if ((do_debugging || do_debug_links)\n-\t       && (const_strneq (name, \".gnu_debuglink\")\n-\t\t   || const_strneq (name, \".gnu_debugaltlink\")))\n+\t       && (startswith (name, \".gnu_debuglink\")\n+\t\t   || startswith (name, \".gnu_debugaltlink\")))\n \trequest_dump_bynumber (&filedata->dump, i, DEBUG_DUMP);\n     }\n \n@@ -8107,7 +8107,7 @@ slurp_ia64_unwind_table (Filedata *                  filedata,\n \t      continue;\n \t    }\n \n-\t  if (! const_strneq (relname, \"R_IA64_SEGREL\"))\n+\t  if (! startswith (relname, \"R_IA64_SEGREL\"))\n \t    {\n \t      warn (_(\"Skipping unexpected relocation type: %s\\n\"), relname);\n \t      continue;\n@@ -8574,7 +8574,7 @@ slurp_hppa_unwind_table (Filedata *                  filedata,\n \t    }\n \n \t  /* R_PARISC_SEGREL32 or R_PARISC_SEGREL64.  */\n-\t  if (! const_strneq (relname, \"R_PARISC_SEGREL\"))\n+\t  if (! startswith (relname, \"R_PARISC_SEGREL\"))\n \t    {\n \t      warn (_(\"Skipping unexpected relocation type: %s\\n\"), relname);\n \t      continue;\n@@ -9476,10 +9476,10 @@ decode_arm_unwind (Filedata *                 filedata,\n \t encoding, starting with one byte giving the number of\n \t words.  */\n       if (procname != NULL\n-\t  && (const_strneq (procname, \"__gcc_personality_v0\")\n-\t      || const_strneq (procname, \"__gxx_personality_v0\")\n-\t      || const_strneq (procname, \"__gcj_personality_v0\")\n-\t      || const_strneq (procname, \"__gnu_objc_personality_v0\")))\n+\t  && (startswith (procname, \"__gcc_personality_v0\")\n+\t      || startswith (procname, \"__gxx_personality_v0\")\n+\t      || startswith (procname, \"__gcj_personality_v0\")\n+\t      || startswith (procname, \"__gnu_objc_personality_v0\")))\n \t{\n \t  remaining = 0;\n \t  more_words = 1;\n@@ -15297,7 +15297,7 @@ malformed note encountered in section %s whilst scanning for build-id note\\n\"),\n       /* Check if this is the build-id note. If so then convert the build-id\n          bytes to a hex string.  */\n       if (inote.namesz > 0\n-          && const_strneq (inote.namedata, \"GNU\")\n+          && startswith (inote.namedata, \"GNU\")\n           && inote.type == NT_GNU_BUILD_ID)\n         {\n           unsigned long j;\n@@ -15425,7 +15425,7 @@ display_debug_section (int shndx, Elf_Internal_Shdr * section, Filedata * fileda\n       return false;\n     }\n \n-  if (const_strneq (name, \".gnu.linkonce.wi.\"))\n+  if (startswith (name, \".gnu.linkonce.wi.\"))\n     name = \".debug_info\";\n \n   /* See if we know how to display the contents of this section.  */\n@@ -15436,15 +15436,15 @@ display_debug_section (int shndx, Elf_Internal_Shdr * section, Filedata * fileda\n       struct dwarf_section *           sec = & display->section;\n \n       if (streq (sec->uncompressed_name, name)\n-\t  || (id == line && const_strneq (name, \".debug_line.\"))\n+\t  || (id == line && startswith (name, \".debug_line.\"))\n \t  || streq (sec->compressed_name, name))\n \t{\n \t  bool secondary = (section != find_section (filedata, name));\n \n \t  if (secondary)\n \t    free_debug_section (id);\n \n-\t  if (i == line && const_strneq (name, \".debug_line.\"))\n+\t  if (i == line && startswith (name, \".debug_line.\"))\n \t    sec->name = name;\n \t  else if (streq (sec->uncompressed_name, name))\n \t    sec->name = sec->uncompressed_name;\n@@ -20429,23 +20429,23 @@ process_note (Elf_Internal_Note *  pnote,\n        note type strings.  */\n     nt = get_note_type (filedata, pnote->type);\n \n-  else if (const_strneq (pnote->namedata, \"GNU\"))\n+  else if (startswith (pnote->namedata, \"GNU\"))\n     /* GNU-specific object file notes.  */\n     nt = get_gnu_elf_note_type (pnote->type);\n \n-  else if (const_strneq (pnote->namedata, \"FreeBSD\"))\n+  else if (startswith (pnote->namedata, \"FreeBSD\"))\n     /* FreeBSD-specific core file notes.  */\n     nt = get_freebsd_elfcore_note_type (filedata, pnote->type);\n \n-  else if (const_strneq (pnote->namedata, \"NetBSD-CORE\"))\n+  else if (startswith (pnote->namedata, \"NetBSD-CORE\"))\n     /* NetBSD-specific core file notes.  */\n     nt = get_netbsd_elfcore_note_type (filedata, pnote->type);\n \n-  else if (const_strneq (pnote->namedata, \"NetBSD\"))\n+  else if (startswith (pnote->namedata, \"NetBSD\"))\n     /* NetBSD-specific core file notes.  */\n     return process_netbsd_elf_note (pnote);\n \n-  else if (const_strneq (pnote->namedata, \"PaX\"))\n+  else if (startswith (pnote->namedata, \"PaX\"))\n     /* NetBSD-specific core file notes.  */\n     return process_netbsd_elf_note (pnote);\n \n@@ -20456,11 +20456,11 @@ process_note (Elf_Internal_Note *  pnote,\n       name = \"SPU\";\n     }\n \n-  else if (const_strneq (pnote->namedata, \"IPF/VMS\"))\n+  else if (startswith (pnote->namedata, \"IPF/VMS\"))\n     /* VMS/ia64-specific file notes.  */\n     nt = get_ia64_vms_note_type (pnote->type);\n \n-  else if (const_strneq (pnote->namedata, \"stapsdt\"))\n+  else if (startswith (pnote->namedata, \"stapsdt\"))\n     nt = get_stapsdt_note_type (pnote->type);\n \n   else\n@@ -20470,7 +20470,7 @@ process_note (Elf_Internal_Note *  pnote,\n \n   printf (\"  \");\n \n-  if (((const_strneq (pnote->namedata, \"GA\")\n+  if (((startswith (pnote->namedata, \"GA\")\n \t&& strchr (\"*$!+\", pnote->namedata[2]) != NULL)\n        || strchr (\"*$!+\", pnote->namedata[0]) != NULL)\n       && (pnote->type == NT_GNU_BUILD_ATTRIBUTE_OPEN\n@@ -20484,15 +20484,15 @@ process_note (Elf_Internal_Note *  pnote,\n   else\n     printf (\" 0x%08lx\\t%s\\n\", pnote->descsz, nt);\n \n-  if (const_strneq (pnote->namedata, \"IPF/VMS\"))\n+  if (startswith (pnote->namedata, \"IPF/VMS\"))\n     return print_ia64_vms_note (pnote);\n-  else if (const_strneq (pnote->namedata, \"GNU\"))\n+  else if (startswith (pnote->namedata, \"GNU\"))\n     return print_gnu_note (filedata, pnote);\n-  else if (const_strneq (pnote->namedata, \"stapsdt\"))\n+  else if (startswith (pnote->namedata, \"stapsdt\"))\n     return print_stapsdt_note (pnote);\n-  else if (const_strneq (pnote->namedata, \"CORE\"))\n+  else if (startswith (pnote->namedata, \"CORE\"))\n     return print_core_note (pnote);\n-  else if (((const_strneq (pnote->namedata, \"GA\")\n+  else if (((startswith (pnote->namedata, \"GA\")\n \t     && strchr (\"*$!+\", pnote->namedata[2]) != NULL)\n \t    || strchr (\"*$!+\", pnote->namedata[0]) != NULL)\n \t   && (pnote->type == NT_GNU_BUILD_ATTRIBUTE_OPEN"
    }
  ]
}