{
  "sha": "b4f9e0034660e15d233627f9c5a732ab023b7daf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjRmOWUwMDM0NjYwZTE1ZDIzMzYyN2Y5YzVhNzMyYWIwMjNiN2RhZg==",
  "commit": {
    "author": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2019-06-13T12:27:10Z"
    },
    "committer": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2019-06-13T12:27:10Z"
    },
    "message": "sim/testsuite/or1k: Add test for 64-bit fpu operations\n\nThis is a very basic test but it ensure the machine is wired up\ncorrectly and that the assembler works.\n\nsim/testsuite/sim/or1k/ChangeLog:\n\nyyyy-mm-dd  Stafford Horne  <shorne@gmail.com>\n\n\t* fpu64a32.S: New file.",
    "tree": {
      "sha": "811cadb914c84a9c0ff335ef84127767a5976fa1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/811cadb914c84a9c0ff335ef84127767a5976fa1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b4f9e0034660e15d233627f9c5a732ab023b7daf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4f9e0034660e15d233627f9c5a732ab023b7daf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b4f9e0034660e15d233627f9c5a732ab023b7daf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4f9e0034660e15d233627f9c5a732ab023b7daf/comments",
  "author": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f1cc84f59441d59827748e47a5971a12ed1ac283",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f1cc84f59441d59827748e47a5971a12ed1ac283",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f1cc84f59441d59827748e47a5971a12ed1ac283"
    }
  ],
  "stats": {
    "total": 176,
    "additions": 176,
    "deletions": 0
  },
  "files": [
    {
      "sha": "e493f10edba7aea607884af932004e91349c2599",
      "filename": "sim/testsuite/sim/or1k/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4f9e0034660e15d233627f9c5a732ab023b7daf/sim/testsuite/sim/or1k/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4f9e0034660e15d233627f9c5a732ab023b7daf/sim/testsuite/sim/or1k/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/or1k/ChangeLog?ref=b4f9e0034660e15d233627f9c5a732ab023b7daf",
      "patch": "@@ -1,3 +1,7 @@\n+2019-06-13  Stafford Horne  <shorne@gmail.com>\n+\n+\t* fpu64a32.S: New file.\n+\n 2018-10-05  Stafford Horne  <shorne@gmail.com>\n \n \t* div.S: Fix tests to match correct overflow/carry semantics."
    },
    {
      "sha": "e977e05cf2cb9b39e0e45f078285fc538fa0cd59",
      "filename": "sim/testsuite/sim/or1k/fpu64a32.S",
      "status": "added",
      "additions": 172,
      "deletions": 0,
      "changes": 172,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4f9e0034660e15d233627f9c5a732ab023b7daf/sim/testsuite/sim/or1k/fpu64a32.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4f9e0034660e15d233627f9c5a732ab023b7daf/sim/testsuite/sim/or1k/fpu64a32.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/or1k/fpu64a32.S?ref=b4f9e0034660e15d233627f9c5a732ab023b7daf",
      "patch": "@@ -0,0 +1,172 @@\n+/* Tests some basic fpu instructions.\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+# mach: or1k\n+# output: report(0x400921f9);\\n\n+# output: report(0xf01b866e);\\n\n+# output: report(0x4005bf09);\\n\n+# output: report(0x95aaf790);\\n\n+# output: report(0x00000000);\\n\n+# output: report(0x00001234);\\n\n+# output: \\n\n+# output: report(0x40b23400);\\n\n+# output: report(0x00000000);\\n\n+# output: report(0x40b23400);\\n\n+# output: report(0x00000000);\\n\n+# output: \\n\n+# output: report(0x40177081);\\n\n+# output: report(0xc2e33eff);\\n\n+# output: report(0x400921f9);\\n\n+# output: report(0xf01b866e);\\n\n+# output: \\n\n+# output: report(0x40211456);\\n\n+# output: report(0x587dfabf);\\n\n+# output: report(0x400921f9);\\n\n+# output: report(0xf01b866d);\\n\n+# output: \\n\n+# output: report(0x00000001);\\n\n+# output: \\n\n+# output: WARNING: ignoring fpu error caught in fast mode.\\n\n+# output: report(0x00000000);\\n\n+# output: \\n\n+# output: exit(0)\\n\n+\n+#include \"or1k-asm-test-helpers.h\"\n+\n+\tSTANDARD_TEST_ENVIRONMENT\n+\n+\t.section .exception_vectors\n+\n+\t/* Floating point exception.  */\n+\t.org\t0xd00\n+\n+\t/* The handling is a bit dubious at present.  We just patch the\n+\t   instruction with l.nop and restart.  This will go wrong in branch\n+\t   delay slots.  But we don't have those in this test.  */\n+\tl.addi r1, r1, -EXCEPTION_STACK_SKIP_SIZE\n+\tPUSH r2\n+\tPUSH r3\n+\t/* Save the address of the instruction that caused the problem.  */\n+\tMOVE_FROM_SPR r2, SPR_EPCR_BASE\n+\tLOAD_IMMEDIATE r3, 0x15000000 /* Opcode for l.nop  */\n+\tl.sw\t-4(r2), r3\n+\tPOP r3\n+\tPOP r2\n+\tl.addi r1, r1, EXCEPTION_STACK_SKIP_SIZE\n+\tl.rfe\n+\n+\t.section .data\n+\t.align 4\n+\t.type   pi, @object\n+\t.size   pi, 8\n+anchor:\n+pi:\n+\t.double  3.14159\n+\n+\t.type   e, @object\n+\t.size   e, 8\n+e:\n+\t.double  2.71828\n+\n+\t.type   large, @object\n+\t.size   large, 8\n+large:\n+\t.long  0\n+\t.long  0x1234\n+\n+\t.section .text\n+start_tests:\n+\tPUSH LINK_REGISTER_R9\n+\n+\t/* Test lf.itof.d int to double conversion.  Setting up:\n+\t *  r11      pointer to data\n+\t *  r12,r13  pi as double\n+\t *  r14,r15  e  as double\n+\t *  r16,r17  a long long\n+\t */\n+\tl.ori\tr11, r0, ha(anchor)\n+\tl.addi\tr11, r11, lo(anchor)\n+\tl.lwz\tr12, 0(r11)\n+\tl.lwz\tr13, 4(r11)\n+\n+\tl.lwz\tr14, 8(r11)\n+\tl.lwz\tr15, 12(r11)\n+\n+\tl.lwz\tr16, 16(r11)\n+\tl.lwz\tr18, 20(r11)\n+\n+\t/* Output to ensure we loaded it correctly.  */\n+\tREPORT_REG_TO_CONSOLE r12\n+\tREPORT_REG_TO_CONSOLE r13\n+\n+\tREPORT_REG_TO_CONSOLE r14\n+\tREPORT_REG_TO_CONSOLE r15\n+\n+\tREPORT_REG_TO_CONSOLE r16\n+\tREPORT_REG_TO_CONSOLE r18\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\t/* Convert the big long to a double. */\n+\tlf.itof.d r16,r18, r16,r18\n+\tREPORT_REG_TO_CONSOLE r16\n+\tREPORT_REG_TO_CONSOLE r18\n+\n+\t/* Convert the double back to a long, it should match before. */\n+\tlf.ftoi.d r16,r18, r16,r18\n+\tlf.itof.d r16,r18, r16,r18\n+\n+\tREPORT_REG_TO_CONSOLE r16\n+\tREPORT_REG_TO_CONSOLE r18\n+\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\t/* Add and subtract some double values.  */\n+\tlf.add.d r12,r13, r12,r13, r14,r15\n+\tREPORT_REG_TO_CONSOLE r12\n+\tREPORT_REG_TO_CONSOLE r13\n+\n+\tlf.sub.d r12,r13, r12,r13, r14,r15\n+\tREPORT_REG_TO_CONSOLE r12\n+\tREPORT_REG_TO_CONSOLE r13\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\t/* Multiply and divide double values.  */\n+\tlf.mul.d r12,r13, r12,r13, r14,r15\n+\tREPORT_REG_TO_CONSOLE r12\n+\tREPORT_REG_TO_CONSOLE r13\n+\n+\tlf.div.d r12,r13, r12,r13, r14,r15\n+\tREPORT_REG_TO_CONSOLE r12\n+\tREPORT_REG_TO_CONSOLE r13\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\t/* Test lf.sfge.s set flag if r6 >= r10.  */\n+\tlf.sfge.d r12,r13, r14,r15\n+\tMOVE_FROM_SPR r2, SPR_SR\n+\tREPORT_BIT_TO_CONSOLE r2, SPR_SR_F\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\t/* Test raising an exception by dividing by 0.  */\n+\tMOVE_FROM_SPR r2, SPR_FPCSR\n+\tl.ori\tr2, r2, 0x1\n+\tMOVE_TO_SPR SPR_FPCSR, r2\n+div0:\tlf.div.d r2,r3, r12,r13, r0,r1\n+\tREPORT_EXCEPTION div0\n+\tPRINT_NEWLINE_TO_CONSOLE\n+\n+\tPOP LINK_REGISTER_R9\n+\tRETURN_TO_LINK_REGISTER_R9"
    }
  ]
}