{
  "sha": "3d73d29e4eff8701ae6251347d03dd6057911178",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Q3M2QyOWU0ZWZmODcwMWFlNjI1MTM0N2QwM2RkNjA1NzkxMTE3OA==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-01-28T02:45:56Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-02-18T07:09:16Z"
    },
    "message": "RISC-V: Add bfd/cpu-riscv.h to support all spec versions controlling.\n\nMake the opcode/riscv-opc.c and include/opcode/riscv.h tidy, move the\nspec versions stuff to bfd/cpu-riscv.h.  Also move the csr stuff and\next_version_table to gas/config/tc-riscv.c for internal use.  To avoid\ntoo many repeated code, define general RISCV_GET_SPEC_NAME/SPEC_CLASS\nmacros.  Therefore, assembler/dis-assembler/linker/gdb can get all spec\nversions related stuff from cpu-riscv.h and cpu-riscv.c, since the stuff\nare defined there uniformly.\n\nbfd/\n    * Makefile.am: Added cpu-riscv.h.\n    * Makefile.in: Regenerated.\n    * po/SRC-POTFILES.in: Regenerated.\n    * cpu-riscv.h: Added to support spec versions controlling.\n    Also added extern arrays and functions for cpu-riscv.c.\n    (enum riscv_spec_class): Define all spec classes here uniformly.\n    (struct riscv_spec): Added for all specs.\n    (RISCV_GET_SPEC_CLASS): Added to reduce repeated code.\n    (RISCV_GET_SPEC_NAME): Likewise.\n    (RISCV_GET_ISA_SPEC_CLASS): Added to get ISA spec class.\n    (RISCV_GET_PRIV_SPEC_CLASS): Added to get privileged spec class.\n    (RISCV_GET_PRIV_SPEC_NAME): Added to get privileged spec name.\n    * cpu-riscv.c (struct priv_spec_t): Replaced with struct riscv_spec.\n    (riscv_get_priv_spec_class): Replaced with RISCV_GET_PRIV_SPEC_CLASS.\n    (riscv_get_priv_spec_name): Replaced with RISCV_GET_PRIV_SPEC_NAME.\n    (riscv_priv_specs): Moved below.\n    (riscv_get_priv_spec_class_from_numbers): Likewise, updated.\n    (riscv_isa_specs): Moved from include/opcode/riscv.h.\n    * elfnn-riscv.c: Included cpu-riscv.h.\n    (riscv_merge_attributes): Initialize in_priv_spec and out_priv_spec.\n    * elfxx-riscv.c: Included cpu-riscv.h and opcode/riscv.h.\n    (RISCV_UNKNOWN_VERSION): Moved from include/opcode/riscv.h.\n    * elfxx-riscv.h: Removed extern functions to cpu-riscv.h.\ngas/\n    * config/tc-riscv.c: Included cpu-riscv.h.\n    (enum riscv_csr_clas): Moved from include/opcode/riscv.h.\n    (struct riscv_csr_extra): Likewise.\n    (struct riscv_ext_version): Likewise.\n    (ext_version_table): Moved from opcodes/riscv-opc.c.\n    (default_isa_spec): Updated type to riscv_spec_class.\n    (default_priv_spec): Likewise.\n    (riscv_set_default_isa_spec): Updated.\n    (init_ext_version_hash): Likewise.\n    (riscv_init_csr_hash): Likewise, also fixed indent.\ninclude/\n    * opcode/riscv.h: Moved stuff and make the file tidy.\nopcodes/\n    * riscv-dis.c: Included cpu-riscv.h, and removed elfxx-riscv.h.\n    (default_priv_spec): Updated type to riscv_spec_class.\n    (parse_riscv_dis_option): Updated.\n    * riscv-opc.c: Moved stuff and make the file tidy.",
    "tree": {
      "sha": "ce9f9774e088fdf2760261983841664b13dc1e4a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ce9f9774e088fdf2760261983841664b13dc1e4a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d73d29e4eff8701ae6251347d03dd6057911178",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d73d29e4eff8701ae6251347d03dd6057911178",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d73d29e4eff8701ae6251347d03dd6057911178",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d73d29e4eff8701ae6251347d03dd6057911178/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "6a780b6766378e3dc9610cba7e12d7eaba196f52",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a780b6766378e3dc9610cba7e12d7eaba196f52",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6a780b6766378e3dc9610cba7e12d7eaba196f52"
    }
  ],
  "stats": {
    "total": 595,
    "additions": 306,
    "deletions": 289
  },
  "files": [
    {
      "sha": "0197e7b0f0f1121c08b60dcc3d79bcee842eb28a",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -1,3 +1,29 @@\n+2021-02-18  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* Makefile.am: Added cpu-riscv.h.\n+\t* Makefile.in: Regenerated.\n+\t* po/SRC-POTFILES.in: Regenerated.\n+\t* cpu-riscv.h: Added to support spec versions controlling.\n+\tAlso added extern arrays and functions for cpu-riscv.c.\n+\t(enum riscv_spec_class): Define all spec classes here uniformly.\n+\t(struct riscv_spec): Added for all specs.\n+\t(RISCV_GET_SPEC_CLASS): Added to reduce repeated code.\n+\t(RISCV_GET_SPEC_NAME): Likewise.\n+\t(RISCV_GET_ISA_SPEC_CLASS): Added to get ISA spec class.\n+\t(RISCV_GET_PRIV_SPEC_CLASS): Added to get privileged spec class.\n+\t(RISCV_GET_PRIV_SPEC_NAME): Added to get privileged spec name.\n+\t* cpu-riscv.c (struct priv_spec_t): Replaced with struct riscv_spec.\n+\t(riscv_get_priv_spec_class): Replaced with RISCV_GET_PRIV_SPEC_CLASS.\n+\t(riscv_get_priv_spec_name): Replaced with RISCV_GET_PRIV_SPEC_NAME.\n+\t(riscv_priv_specs): Moved below.\n+\t(riscv_get_priv_spec_class_from_numbers): Likewise, updated.\n+\t(riscv_isa_specs): Moved from include/opcode/riscv.h.\n+\t* elfnn-riscv.c: Included cpu-riscv.h.\n+\t(riscv_merge_attributes): Initialize in_priv_spec and out_priv_spec.\n+\t* elfxx-riscv.c: Included cpu-riscv.h and opcode/riscv.h.\n+\t(RISCV_UNKNOWN_VERSION): Moved from include/opcode/riscv.h.\n+\t* elfxx-riscv.h: Removed extern functions to cpu-riscv.h.\n+\n 2021-02-17  Alan Modra  <amodra@gmail.com>\n \n \t* wasm-module.c: Guard include of limits.h."
    },
    {
      "sha": "3f143dc227bfe4fa037982fd6e86946d33da7d31",
      "filename": "bfd/Makefile.am",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/Makefile.am?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -675,7 +675,7 @@ CFILES = $(SOURCE_CFILES) $(BUILD_CFILES)\n SOURCE_HFILES = \\\n \taout-target.h aoutx.h arc-got.h arc-plt.h \\\n \tcoff-arm.h coff-bfd.h coffcode.h coffswap.h \\\n-\tcpu-aarch64.h cpu-arm.h cpu-h8300.h cpu-m68k.h \\\n+\tcpu-aarch64.h cpu-arm.h cpu-h8300.h cpu-m68k.h cpu-riscv.h \\\n \tecoff-bfd.h ecoffswap.h \\\n \telf32-arm.h elf32-avr.h elf32-bfin.h elf32-cr16.h elf32-csky.h \\\n \telf32-dlx.h elf32-hppa.h elf32-m68hc1x.h elf32-m68k.h \\"
    },
    {
      "sha": "bd6465833550c8ad0b5f8c1b1d0f7e976a3e3d6b",
      "filename": "bfd/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/Makefile.in?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -1099,7 +1099,7 @@ CFILES = $(SOURCE_CFILES) $(BUILD_CFILES)\n SOURCE_HFILES = \\\n \taout-target.h aoutx.h arc-got.h arc-plt.h \\\n \tcoff-arm.h coff-bfd.h coffcode.h coffswap.h \\\n-\tcpu-aarch64.h cpu-arm.h cpu-h8300.h cpu-m68k.h \\\n+\tcpu-aarch64.h cpu-arm.h cpu-h8300.h cpu-m68k.h cpu-riscv.h \\\n \tecoff-bfd.h ecoffswap.h \\\n \telf32-arm.h elf32-avr.h elf32-bfin.h elf32-cr16.h elf32-csky.h \\\n \telf32-dlx.h elf32-hppa.h elf32-m68hc1x.h elf32-m68k.h \\"
    },
    {
      "sha": "ce87ccf23801451b91f919bf3e51385fcd35ddd5",
      "filename": "bfd/cpu-riscv.c",
      "status": "modified",
      "additions": 39,
      "deletions": 84,
      "changes": 123,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/cpu-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/cpu-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-riscv.c?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -23,89 +23,7 @@\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"libbfd.h\"\n-#include \"elfxx-riscv.h\"\n-\n-/* Record the priv spec version string and the corresponding class.  */\n-\n-struct priv_spec_t\n-{\n-  const char *name;\n-  enum riscv_priv_spec_class class;\n-};\n-\n-/* List for all supported privilege versions.  */\n-\n-static const struct priv_spec_t priv_specs[] =\n-{\n-  {\"1.9.1\", PRIV_SPEC_CLASS_1P9P1},\n-  {\"1.10\",  PRIV_SPEC_CLASS_1P10},\n-  {\"1.11\",  PRIV_SPEC_CLASS_1P11},\n-\n-/* Terminate the list.  */\n-  {NULL, 0}\n-};\n-\n-/* Get the corresponding CSR version class by giving a privilege\n-   version string.  */\n-\n-int\n-riscv_get_priv_spec_class (const char *s,\n-\t\t\t   enum riscv_priv_spec_class *class)\n-{\n-  const struct priv_spec_t *version;\n-\n-  if (s == NULL)\n-    return 0;\n-\n-  for (version = &priv_specs[0]; version->name != NULL; ++version)\n-    if (strcmp (version->name, s) == 0)\n-      {\n-\t*class = version->class;\n-\treturn 1;\n-      }\n-\n-  /* Can not find the supported privilege version.  */\n-  return 0;\n-}\n-\n-/* Get the corresponding CSR version class by giving privilege\n-   version numbers.  It is usually used to convert the priv\n-   attribute numbers into the corresponding class.  */\n-\n-int\n-riscv_get_priv_spec_class_from_numbers (unsigned int major,\n-\t\t\t\t\tunsigned int minor,\n-\t\t\t\t\tunsigned int revision,\n-\t\t\t\t\tenum riscv_priv_spec_class *class)\n-{\n-  char buf[36];\n-\n-  if (major == 0 && minor == 0 && revision == 0)\n-    {\n-      *class = PRIV_SPEC_CLASS_NONE;\n-      return 1;\n-    }\n-\n-  if (revision != 0)\n-    snprintf (buf, sizeof (buf), \"%u.%u.%u\", major, minor, revision);\n-  else\n-    snprintf (buf, sizeof (buf), \"%u.%u\", major, minor);\n-\n-  return riscv_get_priv_spec_class (buf, class);\n-}\n-\n-/* Get the corresponding privilege version string by giving a CSR\n-   version class.  */\n-\n-const char *\n-riscv_get_priv_spec_name (enum riscv_priv_spec_class class)\n-{\n-  /* The first enum is PRIV_SPEC_CLASS_NONE.  */\n-  return priv_specs[class - 1].name;\n-}\n-\n-/* This routine is provided two arch_infos and returns an arch_info\n-   that is compatible with both, or NULL if none exists.  */\n+#include \"cpu-riscv.h\"\n \n static const bfd_arch_info_type *\n riscv_compatible (const bfd_arch_info_type *a, const bfd_arch_info_type *b)\n@@ -182,6 +100,43 @@ static const bfd_arch_info_type arch_info_struct[] =\n };\n \n /* The default architecture is riscv:rv64.  */\n-\n const bfd_arch_info_type bfd_riscv_arch =\n   N (64, 0, \"riscv\", TRUE, &arch_info_struct[0]);\n+\n+/* List for all supported ISA spec versions.  */\n+const struct riscv_spec riscv_isa_specs[] =\n+{\n+  {\"2.2\",      ISA_SPEC_CLASS_2P2},\n+  {\"20190608\", ISA_SPEC_CLASS_20190608},\n+  {\"20191213\", ISA_SPEC_CLASS_20191213},\n+};\n+\n+/* List for all supported privileged spec versions.  */\n+const struct riscv_spec riscv_priv_specs[] =\n+{\n+  {\"1.9.1\", PRIV_SPEC_CLASS_1P9P1},\n+  {\"1.10\",  PRIV_SPEC_CLASS_1P10},\n+  {\"1.11\",  PRIV_SPEC_CLASS_1P11},\n+};\n+\n+/* Get the corresponding CSR version class by giving privilege\n+   version numbers.  It is usually used to convert the priv\n+   attribute numbers into the corresponding class.  */\n+\n+void\n+riscv_get_priv_spec_class_from_numbers (unsigned int major,\n+\t\t\t\t\tunsigned int minor,\n+\t\t\t\t\tunsigned int revision,\n+\t\t\t\t\tenum riscv_spec_class *class)\n+{\n+  enum riscv_spec_class class_t = *class;\n+  char buf[36];\n+\n+  if (revision != 0)\n+    snprintf (buf, sizeof (buf), \"%u.%u.%u\", major, minor, revision);\n+  else\n+    snprintf (buf, sizeof (buf), \"%u.%u\", major, minor);\n+\n+  RISCV_GET_PRIV_SPEC_CLASS (buf, class_t);\n+  *class = class_t;\n+}"
    },
    {
      "sha": "cafaca23be053a3da367b090f0c934756299908c",
      "filename": "bfd/cpu-riscv.h",
      "status": "added",
      "additions": 81,
      "deletions": 0,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/cpu-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/cpu-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-riscv.h?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -0,0 +1,81 @@\n+/* RISC-V spec version controlling support.\n+   Copyright (C) 2019-2020 Free Software Foundation, Inc.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+enum riscv_spec_class\n+{\n+  /* ISA spec.  */\n+  ISA_SPEC_CLASS_NONE = 0,\n+  ISA_SPEC_CLASS_2P2,\n+  ISA_SPEC_CLASS_20190608,\n+  ISA_SPEC_CLASS_20191213,\n+  ISA_SPEC_CLASS_DRAFT,\n+\n+  /* Privileged spec.  */\n+  PRIV_SPEC_CLASS_NONE,\n+  PRIV_SPEC_CLASS_1P9P1,\n+  PRIV_SPEC_CLASS_1P10,\n+  PRIV_SPEC_CLASS_1P11,\n+  PRIV_SPEC_CLASS_DRAFT,\n+};\n+\n+struct riscv_spec\n+{\n+  const char *name;\n+  enum riscv_spec_class spec_class;\n+};\n+\n+extern const struct riscv_spec riscv_isa_specs[];\n+extern const struct riscv_spec riscv_priv_specs[];\n+\n+#define RISCV_GET_SPEC_CLASS(UTYPE, LTYPE, NAME, CLASS)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (NAME == NULL)\t\t\t\t\t\t\t\\\n+\tbreak;\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+      int i_spec = UTYPE##_SPEC_CLASS_NONE + 1;\t\t\t\t\\\n+      for (; i_spec < UTYPE##_SPEC_CLASS_DRAFT; i_spec++)\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  int j_spec = i_spec - UTYPE##_SPEC_CLASS_NONE -1;\t\t\\\n+\t  if (riscv_##LTYPE##_specs[j_spec].name\t\t\t\\\n+\t      && strcmp (riscv_##LTYPE##_specs[j_spec].name, NAME) == 0)\\\n+\t  {\t\t\t\t\t\t\t\t\\\n+\t    CLASS = riscv_##LTYPE##_specs[j_spec].spec_class;\t\t\\\n+\t    break;\t\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+#define RISCV_GET_SPEC_NAME(UTYPE, LTYPE, NAME, CLASS)\t\t\t\\\n+  (NAME) = riscv_##LTYPE##_specs[(CLASS) - UTYPE##_SPEC_CLASS_NONE - 1].name\n+\n+#define RISCV_GET_ISA_SPEC_CLASS(NAME, CLASS)\t\\\n+  RISCV_GET_SPEC_CLASS(ISA, isa, NAME, CLASS)\n+#define RISCV_GET_PRIV_SPEC_CLASS(NAME, CLASS)\t\\\n+  RISCV_GET_SPEC_CLASS(PRIV, priv, NAME, CLASS)\n+#define RISCV_GET_PRIV_SPEC_NAME(NAME, CLASS)\t\\\n+  RISCV_GET_SPEC_NAME(PRIV, priv, NAME, CLASS)\n+\n+extern void\n+riscv_get_priv_spec_class_from_numbers (unsigned int,\n+\t\t\t\t\tunsigned int,\n+\t\t\t\t\tunsigned int,\n+\t\t\t\t\tenum riscv_spec_class *);"
    },
    {
      "sha": "873967307934b8f577ff8b3ef1e9cadbb4662788",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -32,6 +32,7 @@\n #include \"elf/riscv.h\"\n #include \"opcode/riscv.h\"\n #include \"objalloc.h\"\n+#include \"cpu-riscv.h\"\n \n #ifdef HAVE_LIMITS_H\n #include <limits.h>\n@@ -3679,8 +3680,8 @@ riscv_merge_attributes (bfd *ibfd, struct bfd_link_info *info)\n \t    unsigned int Tag_a = Tag_RISCV_priv_spec;\n \t    unsigned int Tag_b = Tag_RISCV_priv_spec_minor;\n \t    unsigned int Tag_c = Tag_RISCV_priv_spec_revision;\n-\t    enum riscv_priv_spec_class in_priv_spec;\n-\t    enum riscv_priv_spec_class out_priv_spec;\n+\t    enum riscv_spec_class in_priv_spec = PRIV_SPEC_CLASS_NONE;\n+\t    enum riscv_spec_class out_priv_spec = PRIV_SPEC_CLASS_NONE;\n \n \t    /* Get the privileged spec class from elf attributes.  */\n \t    riscv_get_priv_spec_class_from_numbers (in_attr[Tag_a].i,"
    },
    {
      "sha": "d3b882b1e84455375eb9c2b916a404d987eb7209",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -25,9 +25,11 @@\n #include \"libbfd.h\"\n #include \"elf-bfd.h\"\n #include \"elf/riscv.h\"\n+#include \"opcode/riscv.h\"\n #include \"libiberty.h\"\n #include \"elfxx-riscv.h\"\n #include \"safe-ctype.h\"\n+#include \"cpu-riscv.h\"\n \n #define MINUS_ONE ((bfd_vma)0 - 1)\n \n@@ -1024,12 +1026,13 @@ riscv_elf_add_sub_reloc (bfd *abfd,\n   return bfd_reloc_ok;\n }\n \n+#define RISCV_UNKNOWN_VERSION -1\n+\n /* Array is used to compare the orders of all extensions quickly.\n \n    Zero value: Preserved keyword.\n    Negative value: Prefixed keyword (s, h, x, z).\n    Positive value: Standard extension.  */\n-\n static int riscv_ext_order[26] = {0};\n \n /* Similar to the strcmp.  It returns an integer less than, equal to,"
    },
    {
      "sha": "a7d348ca020fdd17d855ecdacedc05b989d1808d",
      "filename": "bfd/elfxx-riscv.h",
      "status": "modified",
      "additions": 0,
      "deletions": 12,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/elfxx-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/elfxx-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.h?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -103,17 +103,5 @@ typedef enum riscv_isa_ext_class\n riscv_isa_ext_class_t\n riscv_get_prefix_class (const char *);\n \n-extern int\n-riscv_get_priv_spec_class (const char *, enum riscv_priv_spec_class *);\n-\n-extern int\n-riscv_get_priv_spec_class_from_numbers (unsigned int,\n-\t\t\t\t\tunsigned int,\n-\t\t\t\t\tunsigned int,\n-\t\t\t\t\tenum riscv_priv_spec_class *);\n-\n-extern const char *\n-riscv_get_priv_spec_name (enum riscv_priv_spec_class);\n-\n extern int\n riscv_compare_subsets (const char *, const char *);"
    },
    {
      "sha": "c83b86cd66341163ef6859d582b51cc269003089",
      "filename": "bfd/po/SRC-POTFILES.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/po/SRC-POTFILES.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/bfd/po/SRC-POTFILES.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/po/SRC-POTFILES.in?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -101,6 +101,7 @@ cpu-pj.c\n cpu-powerpc.c\n cpu-pru.c\n cpu-riscv.c\n+cpu-riscv.h\n cpu-rl78.c\n cpu-rs6000.c\n cpu-rx.c"
    },
    {
      "sha": "a90ab78a822ab4aad0dbae36782270846eba3440",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -1,3 +1,16 @@\n+2021-02-18  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* config/tc-riscv.c: Included cpu-riscv.h.\n+\t(enum riscv_csr_clas): Moved from include/opcode/riscv.h.\n+\t(struct riscv_csr_extra): Likewise.\n+\t(struct riscv_ext_version): Likewise.\n+\t(ext_version_table): Moved from opcodes/riscv-opc.c.\n+\t(default_isa_spec): Updated type to riscv_spec_class.\n+\t(default_priv_spec): Likewise.\n+\t(riscv_set_default_isa_spec): Updated.\n+\t(init_ext_version_hash): Likewise.\n+\t(riscv_init_csr_hash): Likewise, also fixed indent.\n+\n 2021-02-17  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/elf/section28.d: xfail h8300."
    },
    {
      "sha": "44450d75fcace151028481f54ab9feaa1c19cbb7",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 113,
      "deletions": 24,
      "changes": 137,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -29,6 +29,7 @@\n #include \"dwarf2dbg.h\"\n #include \"dw2gencfi.h\"\n \n+#include \"bfd/cpu-riscv.h\"\n #include \"bfd/elfxx-riscv.h\"\n #include \"elf/riscv.h\"\n #include \"opcode/riscv.h\"\n@@ -55,6 +56,93 @@ struct riscv_cl_insn\n   fixS *fixp;\n };\n \n+/* All RISC-V CSR belong to one of these classes.  */\n+enum riscv_csr_class\n+{\n+  CSR_CLASS_NONE,\n+\n+  CSR_CLASS_I,\n+  CSR_CLASS_I_32, /* rv32 only */\n+  CSR_CLASS_F, /* f-ext only */\n+  CSR_CLASS_DEBUG /* debug CSR */\n+};\n+\n+/* This structure holds all restricted conditions for a CSR.  */\n+struct riscv_csr_extra\n+{\n+  /* Class to which this CSR belongs.  Used to decide whether or\n+     not this CSR is legal in the current -march context.  */\n+  enum riscv_csr_class csr_class;\n+\n+  /* CSR may have differnet numbers in the previous priv spec.  */\n+  unsigned address;\n+\n+  /* Record the CSR is defined/valid in which versions.  */\n+  enum riscv_spec_class define_version;\n+\n+  /* Record the CSR is aborted/invalid from which versions.  If it isn't\n+     aborted in the current version, then it should be CSR_CLASS_VDRAFT.  */\n+  enum riscv_spec_class abort_version;\n+\n+  /* The CSR may have more than one setting.  */\n+  struct riscv_csr_extra *next;\n+};\n+\n+/* All standard/Z* extensions defined in all supported ISA spec.  */\n+struct riscv_ext_version\n+{\n+  const char *name;\n+  enum riscv_spec_class isa_spec_class;\n+  int major_version;\n+  int minor_version;\n+};\n+\n+static const struct riscv_ext_version ext_version_table[] =\n+{\n+  {\"e\", ISA_SPEC_CLASS_20191213, 1, 9},\n+  {\"e\", ISA_SPEC_CLASS_20190608, 1, 9},\n+  {\"e\", ISA_SPEC_CLASS_2P2,      1, 9},\n+\n+  {\"i\", ISA_SPEC_CLASS_20191213, 2, 1},\n+  {\"i\", ISA_SPEC_CLASS_20190608, 2, 1},\n+  {\"i\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"m\", ISA_SPEC_CLASS_20191213, 2, 0},\n+  {\"m\", ISA_SPEC_CLASS_20190608, 2, 0},\n+  {\"m\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"a\", ISA_SPEC_CLASS_20191213, 2, 1},\n+  {\"a\", ISA_SPEC_CLASS_20190608, 2, 0},\n+  {\"a\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"f\", ISA_SPEC_CLASS_20191213, 2, 2},\n+  {\"f\", ISA_SPEC_CLASS_20190608, 2, 2},\n+  {\"f\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"d\", ISA_SPEC_CLASS_20191213, 2, 2},\n+  {\"d\", ISA_SPEC_CLASS_20190608, 2, 2},\n+  {\"d\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"q\", ISA_SPEC_CLASS_20191213, 2, 2},\n+  {\"q\", ISA_SPEC_CLASS_20190608, 2, 2},\n+  {\"q\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"c\", ISA_SPEC_CLASS_20191213, 2, 0},\n+  {\"c\", ISA_SPEC_CLASS_20190608, 2, 0},\n+  {\"c\", ISA_SPEC_CLASS_2P2,      2, 0},\n+\n+  {\"zicsr\", ISA_SPEC_CLASS_20191213, 2, 0},\n+  {\"zicsr\", ISA_SPEC_CLASS_20190608, 2, 0},\n+\n+  {\"zifencei\", ISA_SPEC_CLASS_20191213, 2, 0},\n+  {\"zifencei\", ISA_SPEC_CLASS_20190608, 2, 0},\n+\n+  {\"zihintpause\", ISA_SPEC_CLASS_DRAFT, 1, 0},\n+\n+  /* Terminate the list.  */\n+  {NULL, 0, 0, 0}\n+};\n+\n #ifndef DEFAULT_ARCH\n #define DEFAULT_ARCH \"riscv64\"\n #endif\n@@ -79,8 +167,8 @@ struct riscv_cl_insn\n \n static const char default_arch[] = DEFAULT_ARCH;\n static const char *default_arch_with_ext = DEFAULT_RISCV_ARCH_WITH_EXT;\n-static enum riscv_isa_spec_class default_isa_spec = ISA_SPEC_CLASS_NONE;\n-static enum riscv_priv_spec_class default_priv_spec = PRIV_SPEC_CLASS_NONE;\n+static enum riscv_spec_class default_isa_spec = ISA_SPEC_CLASS_NONE;\n+static enum riscv_spec_class default_priv_spec = PRIV_SPEC_CLASS_NONE;\n \n static unsigned xlen = 0; /* The width of an x-register.  */\n static unsigned abi_xlen = 0; /* The width of a pointer in the ABI.  */\n@@ -106,8 +194,9 @@ static unsigned elf_flags = 0;\n static int\n riscv_set_default_isa_spec (const char *s)\n {\n-  enum riscv_isa_spec_class class;\n-  if (!riscv_get_isa_spec_class (s, &class))\n+  enum riscv_spec_class class = ISA_SPEC_CLASS_NONE;\n+  RISCV_GET_ISA_SPEC_CLASS (s, class);\n+  if (class == ISA_SPEC_CLASS_NONE)\n     {\n       as_bad (\"unknown default ISA spec `%s' set by \"\n \t      \"-misa-spec or --with-isa-spec\", s);\n@@ -125,11 +214,12 @@ riscv_set_default_isa_spec (const char *s)\n static int\n riscv_set_default_priv_spec (const char *s)\n {\n-  enum riscv_priv_spec_class class;\n+  enum riscv_spec_class class = PRIV_SPEC_CLASS_NONE;\n   unsigned major, minor, revision;\n   obj_attribute *attr;\n \n-  if (riscv_get_priv_spec_class (s, &class))\n+  RISCV_GET_PRIV_SPEC_CLASS (s, class);\n+  if (class != PRIV_SPEC_CLASS_NONE)\n     {\n       default_priv_spec = class;\n       return 1;\n@@ -147,15 +237,13 @@ riscv_set_default_priv_spec (const char *s)\n   major = (unsigned) attr[Tag_RISCV_priv_spec].i;\n   minor = (unsigned) attr[Tag_RISCV_priv_spec_minor].i;\n   revision = (unsigned) attr[Tag_RISCV_priv_spec_revision].i;\n-  if (riscv_get_priv_spec_class_from_numbers (major,\n-\t\t\t\t\t      minor,\n-\t\t\t\t\t      revision,\n-\t\t\t\t\t      &class))\n-    {\n-      /* 0.0.0 is meaningless.  */\n-      if (class == PRIV_SPEC_CLASS_NONE)\n-\treturn 1;\n+  /* Version 0.0.0 is the default value and meningless.  */\n+  if (major == 0 && minor == 0 && revision == 0)\n+    return 1;\n \n+  riscv_get_priv_spec_class_from_numbers (major, minor, revision, &class);\n+  if (class != PRIV_SPEC_CLASS_NONE)\n+    {\n       default_priv_spec = class;\n       return 1;\n     }\n@@ -252,10 +340,11 @@ riscv_multi_subset_supports (enum riscv_insn_class insn_class)\n static htab_t ext_version_hash = NULL;\n \n static htab_t\n-init_ext_version_hash (const struct riscv_ext_version *table)\n+init_ext_version_hash (void)\n {\n-  int i = 0;\n+  const struct riscv_ext_version *table = ext_version_table;\n   htab_t hash = str_htab_create ();\n+  int i = 0;\n \n   while (table[i].name)\n     {\n@@ -687,10 +776,10 @@ hash_reg_names (enum reg_class class, const char * const names[], unsigned n)\n \n static void\n riscv_init_csr_hash (const char *name,\n-                    unsigned address,\n-                    enum riscv_csr_class class,\n-                    enum riscv_priv_spec_class define_version,\n-                    enum riscv_priv_spec_class abort_version)\n+\t\t     unsigned address,\n+\t\t     enum riscv_csr_class class,\n+\t\t     enum riscv_spec_class define_version,\n+\t\t     enum riscv_spec_class abort_version)\n {\n   struct riscv_csr_extra *entry, *pre_entry;\n   bfd_boolean need_enrty = TRUE;\n@@ -782,8 +871,8 @@ riscv_csr_address (const char *csr_name,\n      so use the newly defined value.  */\n   if (riscv_opts.csr_check)\n     {\n-      const char *priv_name = riscv_get_priv_spec_name (default_priv_spec);\n-\n+      const char *priv_name = NULL;\n+      RISCV_GET_PRIV_SPEC_NAME (priv_name, default_priv_spec);\n       if (priv_name != NULL)\n \tas_warn (_(\"invalid CSR `%s' for the privileged spec `%s'\"),\n \t\t csr_name, priv_name);\n@@ -2812,7 +2901,7 @@ riscv_after_parse_args (void)\n     default_arch_with_ext = xlen == 64 ? \"rv64g\" : \"rv32g\";\n \n   /* Initialize the hash table for extensions with default version.  */\n-  ext_version_hash = init_ext_version_hash (riscv_ext_version_table);\n+  ext_version_hash = init_ext_version_hash ();\n \n   /* Set default specs.  */\n   if (default_isa_spec == ISA_SPEC_CLASS_NONE)\n@@ -3648,7 +3737,7 @@ riscv_write_out_attrs (void)\n   if (!explicit_priv_attr)\n     return;\n \n-  priv_str = riscv_get_priv_spec_name (default_priv_spec);\n+  RISCV_GET_PRIV_SPEC_NAME (priv_str, default_priv_spec);\n   p = priv_str;\n   for (i = 0; *p; ++p)\n     {"
    },
    {
      "sha": "0f4936ebc936b4cc56762e41bd7e5372ced823d5",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -1,3 +1,7 @@\n+2021-02-18  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* opcode/riscv.h: Moved stuff and make the file tidy.\n+\n 2021-02-15  Andreas Krebbel  <krebbel@linux.ibm.com>\n \n \t* opcode/s390.h (enum s390_opcode_cpu_val): Add"
    },
    {
      "sha": "93728520393662196f42cc0501c1f3dd637197f1",
      "filename": "include/opcode/riscv.h",
      "status": "modified",
      "additions": 0,
      "deletions": 69,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/include/opcode/riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/include/opcode/riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/riscv.h?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -349,71 +349,6 @@ struct riscv_opcode\n   unsigned long pinfo;\n };\n \n-/* The current supported ISA spec versions.  */\n-enum riscv_isa_spec_class\n-{\n-  ISA_SPEC_CLASS_NONE,\n-\n-  ISA_SPEC_CLASS_2P2,\n-  ISA_SPEC_CLASS_20190608,\n-  ISA_SPEC_CLASS_20191213,\n-  ISA_SPEC_CLASS_DRAFT\n-};\n-\n-#define RISCV_UNKNOWN_VERSION -1\n-\n-/* This structure holds version information for specific ISA.  */\n-struct riscv_ext_version\n-{\n-  const char *name;\n-  enum riscv_isa_spec_class isa_spec_class;\n-  int major_version;\n-  int minor_version;\n-};\n-\n-/* All RISC-V CSR belong to one of these classes.  */\n-enum riscv_csr_class\n-{\n-  CSR_CLASS_NONE,\n-\n-  CSR_CLASS_I,\n-  CSR_CLASS_I_32, /* RV32 only.  */\n-  CSR_CLASS_F, /* F extension only.  */\n-  CSR_CLASS_DEBUG /* Debug CSR.  */\n-};\n-\n-/* The current supported privilege spec versions.  */\n-enum riscv_priv_spec_class\n-{\n-  PRIV_SPEC_CLASS_NONE,\n-\n-  PRIV_SPEC_CLASS_1P9P1,\n-  PRIV_SPEC_CLASS_1P10,\n-  PRIV_SPEC_CLASS_1P11,\n-  PRIV_SPEC_CLASS_DRAFT\n-};\n-\n-/* This structure holds all restricted conditions for a CSR.  */\n-struct riscv_csr_extra\n-{\n-  /* Class to which this CSR belongs.  Used to decide whether or\n-     not this CSR is legal in the current -march context.  */\n-  enum riscv_csr_class csr_class;\n-\n-  /* CSR may have differnet numbers in the previous priv spec.  */\n-  unsigned address;\n-\n-  /* Record the CSR is defined/valid in which versions.  */\n-  enum riscv_priv_spec_class define_version;\n-\n-  /* Record the CSR is aborted/invalid from which versions.  If it isn't\n-     aborted in the current version, then it should be CSR_CLASS_VDRAFT.  */\n-  enum riscv_priv_spec_class abort_version;\n-\n-  /* The CSR may have more than one setting.  */\n-  struct riscv_csr_extra *next;\n-};\n-\n /* Instruction is a simple alias (e.g. \"mv\" for \"addi\").  */\n #define\tINSN_ALIAS\t\t0x00000001\n \n@@ -488,9 +423,5 @@ extern const char * const riscv_fpr_names_abi[NFPR];\n \n extern const struct riscv_opcode riscv_opcodes[];\n extern const struct riscv_opcode riscv_insn_types[];\n-extern const struct riscv_ext_version riscv_ext_version_table[];\n-\n-extern int\n-riscv_get_isa_spec_class (const char *, enum riscv_isa_spec_class *);\n \n #endif /* _RISCV_H_ */"
    },
    {
      "sha": "162aafcb8bb9d09c1f320980d8061c04396c1337",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -1,3 +1,10 @@\n+2021-02-18  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* riscv-dis.c: Included cpu-riscv.h, and removed elfxx-riscv.h.\n+\t(default_priv_spec): Updated type to riscv_spec_class.\n+\t(parse_riscv_dis_option): Updated.\n+\t* riscv-opc.c: Moved stuff and make the file tidy.\n+\n 2021-02-17  Alan Modra  <amodra@gmail.com>\n \n \t* wasm32-dis.c: Include limits.h."
    },
    {
      "sha": "667dbd88c0053bff392a6e5687d3bb3d125e5fd7",
      "filename": "opcodes/riscv-dis.c",
      "status": "modified",
      "additions": 13,
      "deletions": 8,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/opcodes/riscv-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/opcodes/riscv-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-dis.c?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -27,12 +27,12 @@\n #include \"opintl.h\"\n #include \"elf-bfd.h\"\n #include \"elf/riscv.h\"\n-#include \"elfxx-riscv.h\"\n+#include \"cpu-riscv.h\"\n \n #include \"bfd_stdint.h\"\n #include <ctype.h>\n \n-static enum riscv_priv_spec_class default_priv_spec = PRIV_SPEC_CLASS_NONE;\n+static enum riscv_spec_class default_priv_spec = PRIV_SPEC_CLASS_NONE;\n \n struct riscv_private_data\n {\n@@ -99,17 +99,22 @@ parse_riscv_dis_option (const char *option)\n   value = equal + 1;\n   if (strcmp (option, \"priv-spec\") == 0)\n     {\n-      enum riscv_priv_spec_class priv_spec = PRIV_SPEC_CLASS_NONE;\n-      if (!riscv_get_priv_spec_class (value, &priv_spec))\n+      enum riscv_spec_class priv_spec = PRIV_SPEC_CLASS_NONE;\n+      const char *name = NULL;\n+\n+      RISCV_GET_PRIV_SPEC_CLASS (value, priv_spec);\n+      if (priv_spec == PRIV_SPEC_CLASS_NONE)\n \topcodes_error_handler (_(\"unknown privileged spec set by %s=%s\"),\n \t\t\t       option, value);\n       else if (default_priv_spec == PRIV_SPEC_CLASS_NONE)\n \tdefault_priv_spec = priv_spec;\n       else if (default_priv_spec != priv_spec)\n-\topcodes_error_handler (_(\"mis-matched privilege spec set by %s=%s, \"\n-\t\t\t\t \"the elf privilege attribute is %s\"),\n-\t\t\t       option, value,\n-\t\t\t       riscv_get_priv_spec_name (default_priv_spec));\n+\t{\n+\t  RISCV_GET_PRIV_SPEC_NAME (name, default_priv_spec);\n+\t  opcodes_error_handler (_(\"mis-matched privilege spec set by %s=%s, \"\n+\t\t\t\t   \"the elf privilege attribute is %s\"),\n+\t\t\t\t option, value, name);\n+\t}\n     }\n   else\n     {"
    },
    {
      "sha": "50a3f30391ebaaea8ddcba315127bb6bb2dfca1c",
      "filename": "opcodes/riscv-opc.c",
      "status": "modified",
      "additions": 0,
      "deletions": 87,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d73d29e4eff8701ae6251347d03dd6057911178/opcodes/riscv-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d73d29e4eff8701ae6251347d03dd6057911178/opcodes/riscv-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-opc.c?ref=3d73d29e4eff8701ae6251347d03dd6057911178",
      "patch": "@@ -886,90 +886,3 @@ const struct riscv_opcode riscv_insn_types[] =\n /* Terminate the list.  */\n {0, 0, INSN_CLASS_NONE, 0, 0, 0, 0, 0}\n };\n-\n-/* All standard extensions defined in all supported ISA spec.  */\n-const struct riscv_ext_version riscv_ext_version_table[] =\n-{\n-/* name, ISA spec, major version, minor version.  */\n-{\"e\", ISA_SPEC_CLASS_20191213, 1, 9},\n-{\"e\", ISA_SPEC_CLASS_20190608, 1, 9},\n-{\"e\", ISA_SPEC_CLASS_2P2,      1, 9},\n-\n-{\"i\", ISA_SPEC_CLASS_20191213, 2, 1},\n-{\"i\", ISA_SPEC_CLASS_20190608, 2, 1},\n-{\"i\", ISA_SPEC_CLASS_2P2,      2, 0},\n-\n-{\"m\", ISA_SPEC_CLASS_20191213, 2, 0},\n-{\"m\", ISA_SPEC_CLASS_20190608, 2, 0},\n-{\"m\", ISA_SPEC_CLASS_2P2,      2, 0},\n-\n-{\"a\", ISA_SPEC_CLASS_20191213, 2, 1},\n-{\"a\", ISA_SPEC_CLASS_20190608, 2, 0},\n-{\"a\", ISA_SPEC_CLASS_2P2,      2, 0},\n-\n-{\"f\", ISA_SPEC_CLASS_20191213, 2, 2},\n-{\"f\", ISA_SPEC_CLASS_20190608, 2, 2},\n-{\"f\", ISA_SPEC_CLASS_2P2,      2, 0},\n-\n-{\"d\", ISA_SPEC_CLASS_20191213, 2, 2},\n-{\"d\", ISA_SPEC_CLASS_20190608, 2, 2},\n-{\"d\", ISA_SPEC_CLASS_2P2,      2, 0},\n-\n-{\"q\", ISA_SPEC_CLASS_20191213, 2, 2},\n-{\"q\", ISA_SPEC_CLASS_20190608, 2, 2},\n-{\"q\", ISA_SPEC_CLASS_2P2,      2, 0},\n-\n-{\"c\", ISA_SPEC_CLASS_20191213, 2, 0},\n-{\"c\", ISA_SPEC_CLASS_20190608, 2, 0},\n-{\"c\", ISA_SPEC_CLASS_2P2,      2, 0},\n-\n-{\"zicsr\", ISA_SPEC_CLASS_20191213, 2, 0},\n-{\"zicsr\", ISA_SPEC_CLASS_20190608, 2, 0},\n-\n-{\"zifencei\", ISA_SPEC_CLASS_20191213, 2, 0},\n-{\"zifencei\", ISA_SPEC_CLASS_20190608, 2, 0},\n-\n-{\"zihintpause\", ISA_SPEC_CLASS_DRAFT, 1, 0},\n-\n-/* Terminate the list.  */\n-{NULL, 0, 0, 0}\n-};\n-\n-struct isa_spec_t\n-{\n-  const char *name;\n-  enum riscv_isa_spec_class class;\n-};\n-\n-/* List for all supported ISA spec versions.  */\n-static const struct isa_spec_t isa_specs[] =\n-{\n-  {\"2.2\",      ISA_SPEC_CLASS_2P2},\n-  {\"20190608\", ISA_SPEC_CLASS_20190608},\n-  {\"20191213\", ISA_SPEC_CLASS_20191213},\n-\n-  /* Terminate the list.  */\n-  {NULL, 0}\n-};\n-\n-/* Get the corresponding ISA spec class by giving a ISA spec string.  */\n-\n-int\n-riscv_get_isa_spec_class (const char *s,\n-                         enum riscv_isa_spec_class *class)\n-{\n-  const struct isa_spec_t *version;\n-\n-  if (s == NULL)\n-    return 0;\n-\n-  for (version = &isa_specs[0]; version->name != NULL; ++version)\n-    if (strcmp (version->name, s) == 0)\n-      {\n-       *class = version->class;\n-       return 1;\n-      }\n-\n-  /* Can not find the supported ISA spec.  */\n-  return 0;\n-}"
    }
  ]
}