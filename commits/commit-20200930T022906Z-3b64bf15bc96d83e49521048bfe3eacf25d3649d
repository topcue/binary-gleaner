{
  "sha": "3b64bf15bc96d83e49521048bfe3eacf25d3649d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2I2NGJmMTViYzk2ZDgzZTQ5NTIxMDQ4YmZlM2VhY2YyNWQzNjQ5ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:06Z"
    },
    "message": "Remove some uses of DW_STRING_IS_CANONICAL\n\nThis removes the rvalue uses of DW_STRING_IS_CANONICAL, replacing them\nwith an accessor method.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (anonymous_struct_prefix, dwarf2_name)\n\t(dump_die_shallow): Use canonical_string_p.\n\t* dwarf2/attribute.h (struct attribute) <canonical_string_p>: New\n\tmethod.",
    "tree": {
      "sha": "c42e458b20d687fcc1f9ae83c6da7df624266a79",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c42e458b20d687fcc1f9ae83c6da7df624266a79"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3b64bf15bc96d83e49521048bfe3eacf25d3649d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b64bf15bc96d83e49521048bfe3eacf25d3649d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3b64bf15bc96d83e49521048bfe3eacf25d3649d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b64bf15bc96d83e49521048bfe3eacf25d3649d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2c830f547588220588f2a0a876b86e3f9062f9e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c830f547588220588f2a0a876b86e3f9062f9e1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2c830f547588220588f2a0a876b86e3f9062f9e1"
    }
  ],
  "stats": {
    "total": 25,
    "additions": 21,
    "deletions": 4
  },
  "files": [
    {
      "sha": "60cba0b6ea6429ef9e37037b383c3fe24d113158",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b64bf15bc96d83e49521048bfe3eacf25d3649d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b64bf15bc96d83e49521048bfe3eacf25d3649d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3b64bf15bc96d83e49521048bfe3eacf25d3649d",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (anonymous_struct_prefix, dwarf2_name)\n+\t(dump_die_shallow): Use canonical_string_p.\n+\t* dwarf2/attribute.h (struct attribute) <canonical_string_p>: New\n+\tmethod.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (partial_die_info::read)"
    },
    {
      "sha": "a2c41f2738d525facb1b03f8ee38fb2c26ef1497",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b64bf15bc96d83e49521048bfe3eacf25d3649d/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b64bf15bc96d83e49521048bfe3eacf25d3649d/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=3b64bf15bc96d83e49521048bfe3eacf25d3649d",
      "patch": "@@ -115,6 +115,16 @@ struct attribute\n \n   LONGEST constant_value (int default_value) const;\n \n+  /* Return true if this attribute holds a canonical string.  In some\n+     cases, like C++ names, gdb will rewrite the name of a DIE to a\n+     canonical form.  This makes lookups robust when a name can be\n+     spelled different ways (e.g., \"signed\" or \"signed int\").  This\n+     flag indicates whether the value has been canonicalized.  */\n+  bool canonical_string_p () const\n+  {\n+    return string_is_canonical;\n+  }\n+\n \n   ENUM_BITFIELD(dwarf_attribute) name : 16;\n   ENUM_BITFIELD(dwarf_form) form : 15;"
    },
    {
      "sha": "f090cb3f8d0d802e50e9a27bf106bcc6f7e6ce7f",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b64bf15bc96d83e49521048bfe3eacf25d3649d/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b64bf15bc96d83e49521048bfe3eacf25d3649d/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=3b64bf15bc96d83e49521048bfe3eacf25d3649d",
      "patch": "@@ -22312,7 +22312,7 @@ anonymous_struct_prefix (struct die_info *die, struct dwarf2_cu *cu)\n     return NULL;\n \n   /* dwarf2_name had to be already called.  */\n-  gdb_assert (DW_STRING_IS_CANONICAL (attr));\n+  gdb_assert (attr->canonical_string_p ());\n \n   /* Strip the base name, keep any leading namespaces/classes.  */\n   base = strrchr (attr_name, ':');\n@@ -22638,7 +22638,7 @@ dwarf2_name (struct die_info *die, struct dwarf2_cu *cu)\n \n \t  /* Avoid demangling attr_name the second time on a second\n \t     call for the same DIE.  */\n-\t  if (!DW_STRING_IS_CANONICAL (attr))\n+\t  if (!attr->canonical_string_p ())\n \t    {\n \t      gdb::unique_xmalloc_ptr<char> demangled\n \t\t(gdb_demangle (attr_name, DMGL_TYPES));\n@@ -22664,7 +22664,7 @@ dwarf2_name (struct die_info *die, struct dwarf2_cu *cu)\n       break;\n     }\n \n-  if (!DW_STRING_IS_CANONICAL (attr))\n+  if (!attr->canonical_string_p ())\n     {\n       DW_STRING (attr) = dwarf2_canonicalize_name (attr_name, cu,\n \t\t\t\t\t\t   objfile);\n@@ -22786,7 +22786,7 @@ dump_die_shallow (struct ui_file *f, int indent, struct die_info *die)\n \t  fprintf_unfiltered (f, \"string: \\\"%s\\\" (%s canonicalized)\",\n \t\t   DW_STRING (&die->attrs[i])\n \t\t   ? DW_STRING (&die->attrs[i]) : \"\",\n-\t\t   DW_STRING_IS_CANONICAL (&die->attrs[i]) ? \"is\" : \"not\");\n+\t\t   die->attrs[i].canonical_string_p () ? \"is\" : \"not\");\n \t  break;\n \tcase DW_FORM_flag:\n \t  if (DW_UNSND (&die->attrs[i]))"
    }
  ]
}