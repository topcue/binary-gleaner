{
  "sha": "8dc0818eb2c449d553065b57e6953436896c6e5a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGRjMDgxOGViMmM0NDlkNTUzMDY1YjU3ZTY5NTM0MzY4OTZjNmU1YQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-07-17T07:16:31Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-07-17T07:16:31Z"
    },
    "message": "x86: replace \"anymem\" checks where possible\n\nOnce operand parsing has completed, the simpler check of Operand_Mem can\nbe used in places where i.types[] got passed to operand_type_check().\nNote that this has shown a couple of omissions of adjusting i.flags[]\nwhen playing with i.op[] / i.types[] / i.tm.operand_types[].  Not all of\nthem get added here, just all of the ones needed in process_operands().",
    "tree": {
      "sha": "9ccadc9976efcb97fe6eb37783e330128f706c1b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9ccadc9976efcb97fe6eb37783e330128f706c1b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8dc0818eb2c449d553065b57e6953436896c6e5a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8dc0818eb2c449d553065b57e6953436896c6e5a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8dc0818eb2c449d553065b57e6953436896c6e5a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8dc0818eb2c449d553065b57e6953436896c6e5a/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1d942ae90810156b9875ea3e11754ab447c748db",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d942ae90810156b9875ea3e11754ab447c748db",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1d942ae90810156b9875ea3e11754ab447c748db"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 22,
    "deletions": 8
  },
  "files": [
    {
      "sha": "0376e0d361ab6eda6679fd71ec1cef393b1ace77",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc0818eb2c449d553065b57e6953436896c6e5a/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc0818eb2c449d553065b57e6953436896c6e5a/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=8dc0818eb2c449d553065b57e6953436896c6e5a",
      "patch": "@@ -1,3 +1,11 @@\n+2019-07-17  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (check_hle, md_assemble, check_VecOperands,\n+\tmatch_template, check_string, build_modrm_byte): Replace\n+\toperand_type_check(..., anymem) by Operand_Mem ones.\n+\t(process_operands): Also copy i.flags[] when copying other\n+\toperand properties.\n+\n 2019-07-16  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (match_template): Adjust regmem reference."
    },
    {
      "sha": "2710dcec724d1ff386129274c71e8928f5840c0d",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 14,
      "deletions": 8,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc0818eb2c449d553065b57e6953436896c6e5a/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc0818eb2c449d553065b57e6953436896c6e5a/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=8dc0818eb2c449d553065b57e6953436896c6e5a",
      "patch": "@@ -3918,8 +3918,7 @@ check_hle (void)\n \t\t  i.tm.name);\n \t  return 0;\n \t}\n-      if (i.mem_operands == 0\n-\t  || !operand_type_check (i.types[i.operands - 1], anymem))\n+      if (i.mem_operands == 0 || !(i.flags[i.operands - 1] & Operand_Mem))\n \t{\n \t  as_bad (_(\"memory destination needed for instruction `%s'\"\n \t\t    \" after `xrelease'\"), i.tm.name);\n@@ -4358,7 +4357,7 @@ md_assemble (char *line)\n       && (!i.tm.opcode_modifier.islockable\n \t  || i.mem_operands == 0\n \t  || (i.tm.base_opcode != 0x86\n-\t      && !operand_type_check (i.types[i.operands - 1], anymem))))\n+\t      && !(i.flags[i.operands - 1] & Operand_Mem))))\n     {\n       as_bad (_(\"expecting lockable instruction after `lock'\"));\n       return;\n@@ -5473,7 +5472,7 @@ check_VecOperands (const insn_template *t)\n     {\n       /* Find memory operand.  */\n       for (op = 0; op < i.operands; op++)\n-\tif (operand_type_check (i.types[op], anymem))\n+\tif (i.flags[op] & Operand_Mem)\n \t  break;\n       gas_assert (op < i.operands);\n       /* Check size of the memory operand.  */\n@@ -5563,7 +5562,7 @@ check_VecOperands (const insn_template *t)\n \n \t  i.memshift = 0;\n \t  for (op = 0; op < i.operands; op++)\n-\t    if (operand_type_check (i.types[op], anymem))\n+\t    if (i.flags[op] & Operand_Mem)\n \t      {\n \t\tif (t->opcode_modifier.evex == EVEXLIG)\n \t\t  i.memshift = 2 + (i.suffix == QWORD_MNEM_SUFFIX);\n@@ -5892,7 +5891,7 @@ match_template (char mnem_suffix)\n \t      && i.hle_prefix\n \t      && t->base_opcode == 0xa0\n \t      && i.types[0].bitfield.acc\n-\t      && operand_type_check (i.types[1], anymem))\n+\t      && (i.flags[1] & Operand_Mem))\n \t    continue;\n \t  /* Fall through.  */\n \n@@ -6191,7 +6190,8 @@ match_template (char mnem_suffix)\n static int\n check_string (void)\n {\n-  int mem_op = operand_type_check (i.types[0], anymem) ? 0 : 1;\n+  unsigned int mem_op = i.flags[0] & Operand_Mem ? 0 : 1;\n+\n   if (i.tm.operand_types[mem_op].bitfield.esseg)\n     {\n       if (i.seg[0] != NULL && i.seg[0] != &es)\n@@ -6893,6 +6893,7 @@ process_operands (void)\n \t\t  i.op[j - 1] = i.op[j];\n \t\t  i.types[j - 1] = i.types[j];\n \t\t  i.tm.operand_types[j - 1] = i.tm.operand_types[j];\n+\t\t  i.flags[j - 1] = i.flags[j];\n \t\t}\n \t    }\n \t}\n@@ -6909,6 +6910,7 @@ process_operands (void)\n \t      i.op[j] = i.op[j - 1];\n \t      i.types[j] = i.types[j - 1];\n \t      i.tm.operand_types[j] = i.tm.operand_types[j - 1];\n+\t      i.flags[j] = i.flags[j - 1];\n \t    }\n \t  i.op[0].regs\n \t    = (const reg_entry *) hash_find (reg_hash, \"xmm0\");\n@@ -6924,6 +6926,7 @@ process_operands (void)\n \t  i.op[dupl] = i.op[dest];\n \t  i.types[dupl] = i.types[dest];\n \t  i.tm.operand_types[dupl] = i.tm.operand_types[dest];\n+\t  i.flags[dupl] = i.flags[dest];\n \t}\n       else\n \t{\n@@ -6935,6 +6938,7 @@ process_operands (void)\n \t  i.op[dupl] = i.op[dest];\n \t  i.types[dupl] = i.types[dest];\n \t  i.tm.operand_types[dupl] = i.tm.operand_types[dest];\n+\t  i.flags[dupl] = i.flags[dest];\n \t}\n \n        if (i.tm.opcode_modifier.immext)\n@@ -6953,6 +6957,8 @@ process_operands (void)\n \t  /* We need to adjust fields in i.tm since they are used by\n \t     build_modrm_byte.  */\n \t  i.tm.operand_types [j - 1] = i.tm.operand_types [j];\n+\n+\t  i.flags[j - 1] = i.flags[j];\n \t}\n \n       i.operands--;\n@@ -7358,7 +7364,7 @@ build_modrm_byte (void)\n \t  unsigned int op;\n \n \t  for (op = 0; op < i.operands; op++)\n-\t    if (operand_type_check (i.types[op], anymem))\n+\t    if (i.flags[op] & Operand_Mem)\n \t      break;\n \t  gas_assert (op < i.operands);\n "
    }
  ]
}