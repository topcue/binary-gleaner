{
  "sha": "7f92ed6b41c441ab2111c9f1212cbbc13222edcc",
  "node_id": "C_kwDOANOeidoAKDdmOTJlZDZiNDFjNDQxYWIyMTExYzlmMTIxMmNiYmMxMzIyMmVkY2M",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-27T12:10:39Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-27T12:10:39Z"
    },
    "message": "[gdb/build] Fix build with g++-4.8\n\nWhen building g++-4.8, we run into:\n...\nsrc/gdb/dwarf2/read.c:919:5: error: multiple fields in union \\\n  'partial_die_info::<anonymous union>' initialized\n...\n\nThis is due to:\n...\n    union\n    {\n      struct\n      {\n       CORE_ADDR lowpc = 0;\n       CORE_ADDR highpc = 0;\n      };\n      ULONGEST ranges_offset;\n    };\n...\n\nThe error looks incorrect, given that only one union member is initialized,\nand does not reproduce with newer g++.\n\nNevertheless, work around this by moving the initialization to a constructor.\n\n[ I considered just removing the initialization, with the idea that access\nshould be guarded by has_pc_info, but I ran into one failure in the testsuite,\nfor gdb.base/check-psymtab.exp due to add_partial_symbol using lowpc without\nchecking has_pc_info. ]\n\nTested on x86_64-linux.",
    "tree": {
      "sha": "a710067f83d4d11fd690a7cfc0d305e2689b2400",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a710067f83d4d11fd690a7cfc0d305e2689b2400"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7f92ed6b41c441ab2111c9f1212cbbc13222edcc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f92ed6b41c441ab2111c9f1212cbbc13222edcc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7f92ed6b41c441ab2111c9f1212cbbc13222edcc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f92ed6b41c441ab2111c9f1212cbbc13222edcc/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308"
    }
  ],
  "stats": {
    "total": 8,
    "additions": 6,
    "deletions": 2
  },
  "files": [
    {
      "sha": "00aa64dd0abc7b8ad27b09550195743d3e61ff60",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f92ed6b41c441ab2111c9f1212cbbc13222edcc/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f92ed6b41c441ab2111c9f1212cbbc13222edcc/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=7f92ed6b41c441ab2111c9f1212cbbc13222edcc",
      "patch": "@@ -920,8 +920,8 @@ struct partial_die_info : public allocate_on_obstack\n       /* If HAS_PC_INFO, the PC range associated with this DIE.  */\n       struct\n       {\n-\tCORE_ADDR lowpc = 0;\n-\tCORE_ADDR highpc = 0;\n+\tCORE_ADDR lowpc;\n+\tCORE_ADDR highpc;\n       };\n       /* If HAS_RANGE_INFO, the ranges offset associated with this DIE.  */\n       ULONGEST ranges_offset;\n@@ -974,6 +974,10 @@ struct partial_die_info : public allocate_on_obstack\n       is_dwz = 0;\n       spec_is_dwz = 0;\n       canonical_name = 0;\n+      /* Don't set these using NSDMI (Non-static data member initialisation),\n+\t because g++-4.8 will error out.  */\n+      lowpc = 0;\n+      highpc = 0;\n     }\n   };\n "
    }
  ]
}