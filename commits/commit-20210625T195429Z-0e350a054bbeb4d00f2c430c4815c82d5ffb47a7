{
  "sha": "0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGUzNTBhMDU0YmJlYjRkMDBmMmM0MzBjNDgxNWM4MmQ1ZmZiNDdhNw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-18T12:46:19Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-25T19:54:29Z"
    },
    "message": "gdb/mi: add regexp filtering to -file-list-exec-source-files\n\nThis commit extends the existing MI command\n-file-list-exec-source-files to provide the same regular expression\nbased filtering that the equivalent CLI command \"info sources\"\nprovides.\n\nThe new command syntax is:\n\n  -file-list-exec-source-files [--basename | --dirname] [--] [REGEXP]\n\nAll options are optional, which ensures the command is backward\ncompatible.\n\nAs part of this work I have unified the CLI and MI code.\n\nAs a result of the unified code I now provide additional information\nin the MI command output, there is now a new field 'debug-fully-read'\nincluded with each source file.  This field which has the values\n'true' or 'false', indicates if the source file is from a compilation\nunit that has had its debug information fully read.  However, as this\nis additional information, a well written front-end should just ignore\nthis field if it doesn't understand it, so things should still be\nbackward compatible.\n\ngdb/ChangeLog:\n\n\t* NEWS: Mention additions to -file-list-exec-source-files.\n\t* mi/mi-cmd-file.c (print_partial_file_name): Delete.\n\t(mi_cmd_file_list_exec_source_files): Rewrite to handle command\n\toptions, and make use of info_sources_worker.\n\t* symtab.c (struct info_sources_filter): Moved to symtab.h.\n\t(info_sources_filter::print): Take uiout argument, produce output\n\tthrough uiout.\n\t(struct output_source_filename_data)\n\t<output_source_filename_data>: Take uiout argument, store into\n\tm_uiout.  <output>: Rewrite comment, add additional arguments to\n\tdeclaration.  <operator()>: Send more arguments to\n\toutput. <m_uiout>: New member variable.\n\t(output_source_filename_data::output): Take extra arguments,\n\tproduce output through m_uiout, and structure for MI.\n\t(output_source_filename_data::print_header): Produce output\n\tthrough m_uiout.\n\t(info_sources_worker): New function, the implementation is taken\n\tfrom info_sources_command, but modified so produce output through\n\ta ui_out.\n\t(info_sources_command): The second half of this function has gone\n\tto become info_sources_worker.\n\t* symtab.h (struct info_sources_filter): Moved from symtab.c, add\n\textra parameter to print member function.\n\t(info_sources_worker): Declare.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (GDB/MI File Commands): Document extensions to\n\t-file-list-exec-source-files.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/dw2-filename.exp: Update expected results.\n\t* gdb.mi/mi-file.exp: Likewise.\n\t* gdb.mi/mi-info-sources-base.c: New file.\n\t* gdb.mi/mi-info-sources.c: New file.\n\t* gdb.mi/mi-info-sources.exp: New file.",
    "tree": {
      "sha": "079b2ed8a2344ef2b6b7c854b9ccfe8450d34137",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/079b2ed8a2344ef2b6b7c854b9ccfe8450d34137"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a0788e08cbf9e7b90640475b17afbbf5423ea9d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a0788e08cbf9e7b90640475b17afbbf5423ea9d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a0788e08cbf9e7b90640475b17afbbf5423ea9d"
    }
  ],
  "stats": {
    "total": 670,
    "additions": 521,
    "deletions": 149
  },
  "files": [
    {
      "sha": "aa1d458b2cfd9e2cfa2897b13caca07200d91872",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -1,3 +1,30 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* NEWS: Mention additions to -file-list-exec-source-files.\n+\t* mi/mi-cmd-file.c (print_partial_file_name): Delete.\n+\t(mi_cmd_file_list_exec_source_files): Rewrite to handle command\n+\toptions, and make use of info_sources_worker.\n+\t* symtab.c (struct info_sources_filter): Moved to symtab.h.\n+\t(info_sources_filter::print): Take uiout argument, produce output\n+\tthrough uiout.\n+\t(struct output_source_filename_data)\n+\t<output_source_filename_data>: Take uiout argument, store into\n+\tm_uiout.  <output>: Rewrite comment, add additional arguments to\n+\tdeclaration.  <operator()>: Send more arguments to\n+\toutput. <m_uiout>: New member variable.\n+\t(output_source_filename_data::output): Take extra arguments,\n+\tproduce output through m_uiout, and structure for MI.\n+\t(output_source_filename_data::print_header): Produce output\n+\tthrough m_uiout.\n+\t(info_sources_worker): New function, the implementation is taken\n+\tfrom info_sources_command, but modified so produce output through\n+\ta ui_out.\n+\t(info_sources_command): The second half of this function has gone\n+\tto become info_sources_worker.\n+\t* symtab.h (struct info_sources_filter): Moved from symtab.c, add\n+\textra parameter to print member function.\n+\t(info_sources_worker): Declare.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* symtab.c (struct info_sources_filter): New."
    },
    {
      "sha": "8d79c50e1be3fde4f8caea67ef147a4c6eec94ed",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -49,6 +49,24 @@\n     all locations of the selected breakpoint.  This is equivalent to\n     the '-force' flag of the CLI's \"cond\" command.\n \n+ ** '-file-list-exec-source-files [--basename | --dirname] [--] [REGEXP]'\n+\n+    The existing -file-list-exec-source-files command now takes an\n+    optional REGEXP which is used to filter the source files that are\n+    included in the results.\n+\n+    By default REGEXP is matched against the full filename of the\n+    source file. When one of --basename or --dirname is given then\n+    REGEXP is only matched against the specified part of the full\n+    source filename.\n+\n+    The results from -file-list-exec-source-files now include a\n+    'debug-fully-read' field which takes the value 'true' or 'false'.\n+    A 'true' value indicates the source file is from a compilation\n+    unit that has had its debug information fully read in by GDB, a\n+    value of 'false' indicates GDB has only performed a partial scan\n+    of the debug information so far.\n+\n * GDB now supports core file debugging for x86_64 Cygwin programs.\n \n * GDB will now look for the .gdbinit file in a config directory before"
    },
    {
      "sha": "4dc190407d4789ff92692fdef116c1799e49169d",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.texinfo (GDB/MI File Commands): Document extensions to\n+\t-file-list-exec-source-files.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python.texinfo (Breakpoints In Python): Add BP_CATCHPOINT"
    },
    {
      "sha": "1e56c3a882bac8e7d9b9eb2ef55a4eee859144d3",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 63,
      "deletions": 11,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -35623,18 +35623,49 @@ The @value{GDBN} equivalent is @samp{info source}\n \n \n @subheading The @code{-file-list-exec-source-files} Command\n+@kindex info sources\n @findex -file-list-exec-source-files\n \n @subsubheading Synopsis\n \n @smallexample\n- -file-list-exec-source-files\n-@end smallexample\n+ -file-list-exec-source-files @r{[} @var{--dirname} @r{|} @var{--basename} @r{]}\n+                              @r{[} -- @r{]}\n+                              @r{[} @var{regexp} @r{]}\n+@end smallexample\n+\n+This command returns information about the source files @value{GDBN}\n+knows about, it will output both the filename and fullname (absolute\n+file name) of a source file, though the fullname can be elided if this\n+information is not known to @value{GDBN}.\n+\n+With no arguments this command returns a list of source files.  Each\n+source file is represented by a tuple with the fields; @var{file},\n+@var{fullname}, and @var{debug-fully-read}.  The @var{file} is the\n+display name for the file, while @var{fullname} is the absolute name\n+of the file.  The @var{fullname} field can be elided if the absolute\n+name of the source file can't be computed.  The field\n+@var{debug-fully-read} will be a string, either @code{true} or\n+@code{false}.  When @code{true}, this indicates the full debug\n+information for the compilation unit describing this file has been\n+read in.  When @code{false}, the full debug information has not yet\n+been read in.  While reading in the full debug information it is\n+possible that @value{GDBN} could become aware of additional source\n+files.\n \n-List the source files for the current executable.\n+The optional @var{regexp} can be used to filter the list of source\n+files returned.  The @var{regexp} will be matched against the full\n+source file name.  The matching is case-sensitive, except on operating\n+systems that have case-insensitive filesystem (e.g.,\n+MS-Windows).  @samp{--} can be used before @var{regexp} to prevent\n+@value{GDBN} interpreting @var{regexp} as a command option (e.g.@: if\n+@var{regexp} starts with @samp{-}).\n \n-It will always output both the filename and fullname (absolute file\n-name) of a source file.\n+If @code{--dirname} is provided, then @var{regexp} is matched only\n+against the directory name of each source file.  If @code{--basename}\n+is provided, then @var{regexp} is matched against the basename of each\n+source file.  Only one of @code{--dirname} or @code{--basename} may be\n+given, and if either is given then @var{regexp} is required.\n \n @subsubheading @value{GDBN} Command\n \n@@ -35643,13 +35674,34 @@ The @value{GDBN} equivalent is @samp{info sources}.\n \n @subsubheading Example\n @smallexample\n-(gdb)\n+(@value{GDBP})\n -file-list-exec-source-files\n-^done,files=[\n-@{file=foo.c,fullname=/home/foo.c@},\n-@{file=/home/bar.c,fullname=/home/bar.c@},\n-@{file=gdb_could_not_find_fullpath.c@}]\n-(gdb)\n+^done,files=[@{file=\"foo.c\",fullname=\"/home/foo.c\",debug-fully-read=\"true\"@},\n+             @{file=\"/home/bar.c\",fullname=\"/home/bar.c\",debug-fully-read=\"true\"@},\n+             @{file=\"gdb_could_not_find_fullpath.c\",debug-fully-read=\"true\"@}]\n+(@value{GDBP})\n+-file-list-exec-source-files\n+^done,files=[@{file=\"test.c\",\n+              fullname=\"/tmp/info-sources/test.c\",\n+              debug-fully-read=\"true\"@},\n+             @{file=\"/usr/include/stdc-predef.h\",\n+              fullname=\"/usr/include/stdc-predef.h\",\n+              debug-fully-read=\"true\"@},\n+             @{file=\"header.h\",\n+              fullname=\"/tmp/info-sources/header.h\",\n+              debug-fully-read=\"true\"@},\n+             @{file=\"helper.c\",\n+              fullname=\"/tmp/info-sources/helper.c\",\n+              debug-fully-read=\"true\"@}]\n+(@value{GDBP})\n+-file-list-exec-source-files -- \\\\.c\n+^done,files=[@{file=\"test.c\",\n+              fullname=\"/tmp/info-sources/test.c\",\n+              debug-fully-read=\"true\"@},\n+             @{file=\"helper.c\",\n+              fullname=\"/tmp/info-sources/helper.c\",\n+              debug-fully-read=\"true\"@}]\n+(@value{GDBP})\n @end smallexample\n \n @subheading The @code{-file-list-shared-libraries} Command"
    },
    {
      "sha": "684f7eb3f0c6703bc06da6107f3846ca7d297152",
      "filename": "gdb/mi/mi-cmd-file.c",
      "status": "modified",
      "additions": 48,
      "deletions": 38,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/mi/mi-cmd-file.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/mi/mi-cmd-file.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-file.c?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -62,54 +62,64 @@ mi_cmd_file_list_exec_source_file (const char *command, char **argv, int argc)\n \t\t       COMPUNIT_MACRO_TABLE (SYMTAB_COMPUNIT (st.symtab)) != NULL);\n }\n \n-/* A callback for map_partial_symbol_filenames.  */\n-\n-static void\n-print_partial_file_name (const char *filename, const char *fullname)\n-{\n-  struct ui_out *uiout = current_uiout;\n-\n-  uiout->begin (ui_out_type_tuple, NULL);\n-\n-  uiout->field_string (\"file\", filename);\n-\n-  if (fullname)\n-    uiout->field_string (\"fullname\", fullname);\n-\n-  uiout->end (ui_out_type_tuple);\n-}\n+/* Implement -file-list-exec-source-files command.  */\n \n void\n mi_cmd_file_list_exec_source_files (const char *command, char **argv, int argc)\n {\n-  struct ui_out *uiout = current_uiout;\n-\n-  if (!mi_valid_noargs (\"-file-list-exec-source-files\", argc, argv))\n-    error (_(\"-file-list-exec-source-files: Usage: No args\"));\n-\n-  /* Print the table header.  */\n-  uiout->begin (ui_out_type_list, \"files\");\n-\n-  /* Look at all of the file symtabs.  */\n-  for (objfile *objfile : current_program_space->objfiles ())\n+  enum opt\n+    {\n+      MATCH_BASENAME_OPT,\n+      MATCH_DIRNAME_OPT\n+    };\n+  static const struct mi_opt opts[] =\n+  {\n+    {\"-basename\", MATCH_BASENAME_OPT, 0},\n+    {\"-dirname\", MATCH_DIRNAME_OPT, 0},\n+    { 0, 0, 0 }\n+  };\n+\n+  /* Parse arguments.  */\n+  int oind = 0;\n+  char *oarg;\n+\n+  bool match_on_basename = false;\n+  bool match_on_dirname = false;\n+\n+  while (1)\n     {\n-      for (compunit_symtab *cu : objfile->compunits ())\n+      int opt = mi_getopt (\"-file-list-exec-source-files\", argc, argv,\n+\t\t\t   opts, &oind, &oarg);\n+      if (opt < 0)\n+\tbreak;\n+      switch ((enum opt) opt)\n \t{\n-\t  for (symtab *s : compunit_filetabs (cu))\n-\t    {\n-\t      uiout->begin (ui_out_type_tuple, NULL);\n-\n-\t      uiout->field_string (\"file\", symtab_to_filename_for_display (s));\n-\t      uiout->field_string (\"fullname\", symtab_to_fullname (s));\n-\n-\t      uiout->end (ui_out_type_tuple);\n-\t    }\n+\tcase MATCH_BASENAME_OPT:\n+\t  match_on_basename = true;\n+\t  break;\n+\tcase MATCH_DIRNAME_OPT:\n+\t  match_on_dirname = true;\n+\t  break;\n \t}\n     }\n \n-  map_symbol_filenames (print_partial_file_name, true /*need_fullname*/);\n+  if ((argc - oind > 1) || (match_on_basename && match_on_dirname))\n+    error (_(\"-file-list-exec-source-files: Usage: [--basename | --dirname] [--] REGEXP\"));\n+\n+  const char *regexp = nullptr;\n+  if (argc - oind == 1)\n+    regexp = argv[oind];\n+\n+  info_sources_filter::match_on match_type;\n+  if (match_on_dirname)\n+    match_type = info_sources_filter::match_on::DIRNAME;\n+  else if (match_on_basename)\n+    match_type = info_sources_filter::match_on::BASENAME;\n+  else\n+    match_type = info_sources_filter::match_on::FULLNAME;\n \n-  uiout->end (ui_out_type_list);\n+  info_sources_filter filter (match_type, regexp);\n+  info_sources_worker (current_uiout, filter);\n }\n \n /* See mi-cmds.h.  */"
    },
    {
      "sha": "e300596be6ec5becdf1110cc574b07e485b8ee1c",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 92,
      "deletions": 98,
      "changes": 190,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -4200,58 +4200,6 @@ operator_chars (const char *p, const char **end)\n }\n \f\n \n-/* Class used to encapsulate the filename filtering for the \"info sources\"\n-   command.  */\n-struct info_sources_filter\n-{\n-  /* If filename filtering is being used (see M_C_REGEXP) then which part\n-     of the filename is being filtered against?  */\n-  enum class match_on\n-  {\n-    /* Match against the full filename.  */\n-    FULLNAME,\n-\n-    /* Match only against the directory part of the full filename.  */\n-    DIRNAME,\n-\n-    /* Match only against the basename part of the full filename.  */\n-    BASENAME\n-  };\n-\n-  /* Create a filter of MATCH_TYPE using regular expression REGEXP.  If\n-     REGEXP is nullptr then all files will match the filter and MATCH_TYPE\n-     is ignored.\n-\n-     The string pointed too by REGEXP must remain live and unchanged for\n-     this lifetime of this object as the object only retains a copy of the\n-     pointer.  */\n-  info_sources_filter (match_on match_type, const char *regexp);\n-\n-  DISABLE_COPY_AND_ASSIGN (info_sources_filter);\n-\n-  /* Does FULLNAME match the filter defined by this object, return true if\n-     it does, otherwise, return false.  If there is no filtering defined\n-     then this function will always return true.  */\n-  bool matches (const char *fullname) const;\n-\n-  /* Print a single line describing this filter, used as part of the \"info\n-     sources\" command output.  If there is no filter in place then nothing\n-     is printed.  */\n-  void print () const;\n-\n-private:\n-\n-  /* The type of filtering in place.  */\n-  match_on m_match_type;\n-\n-  /* Points to the original regexp used to create this filter.  */\n-  const char *m_regexp;\n-\n-  /* A compiled version of M_REGEXP.  This object is only given a value if\n-     M_REGEXP is not nullptr and is not the empty string.  */\n-  gdb::optional<compiled_regex> m_c_regexp;\n-};\n-\n /* See class declaration.  */\n \n info_sources_filter::info_sources_filter (match_on match_type,\n@@ -4307,7 +4255,7 @@ info_sources_filter::matches (const char *fullname) const\n /* See class declaration.  */\n \n void\n-info_sources_filter::print () const\n+info_sources_filter::print (struct ui_out *uiout) const\n {\n   if (m_c_regexp.has_value ())\n     {\n@@ -4316,12 +4264,12 @@ info_sources_filter::print () const\n       switch (m_match_type)\n \t{\n \tcase match_on::DIRNAME:\n-\t  printf_filtered (_(\"(dirname matching regular expression \\\"%s\\\")\"),\n-\t\t\t   m_regexp);\n+\t  uiout->message (_(\"(dirname matching regular expression \\\"%s\\\")\"),\n+\t\t\t  m_regexp);\n \t  break;\n \tcase match_on::BASENAME:\n-\t  printf_filtered (_(\"(basename matching regular expression \\\"%s\\\")\"),\n-\t\t\t   m_regexp);\n+\t  uiout->message (_(\"(basename matching regular expression \\\"%s\\\")\"),\n+\t\t\t  m_regexp);\n \t  break;\n \tcase match_on::FULLNAME:\n \t  printf_filtered (_(\"(filename matching regular expression \\\"%s\\\")\"),\n@@ -4337,10 +4285,12 @@ info_sources_filter::print () const\n struct output_source_filename_data\n {\n   /* Create an object for displaying the results of the 'info sources'\n-     command.  FILTER must remain valid and unchanged for the lifetime of\n-     this object as this object retains a reference to FILTER.  */\n-  output_source_filename_data (const info_sources_filter &filter)\n-    : m_filter (filter)\n+     command to UIOUT.  FILTER must remain valid and unchanged for the\n+     lifetime of this object as this object retains a reference to FILTER.  */\n+  output_source_filename_data (struct ui_out *uiout,\n+\t\t\t       const info_sources_filter &filter)\n+    : m_filter (filter),\n+      m_uiout (uiout)\n   { /* Nothing.  */ }\n \n   DISABLE_COPY_AND_ASSIGN (output_source_filename_data);\n@@ -4353,9 +4303,14 @@ struct output_source_filename_data\n     m_filename_seen_cache.clear ();\n   }\n \n-  /* Worker for sources_info.  Force line breaks at ,'s.  NAME is the name\n-     to print.  */\n-  void output (const char *name);\n+  /* Worker for sources_info, outputs the file name formatted for either\n+     cli or mi (based on the current_uiout).  In cli mode displays\n+     FULLNAME with a comma separating this name from any previously\n+     printed name (line breaks are added at the comma).  In MI mode\n+     outputs a tuple containing DISP_NAME (the files display name),\n+     FULLNAME, and EXPANDED_P (true when this file is from a fully\n+     expanded symtab, otherwise false).  */\n+  void output (const char *disp_name, const char *fullname, bool expanded_p);\n \n   /* Prints the header messages for the source files that will be printed\n      with the matching info present in the current object state.\n@@ -4367,7 +4322,9 @@ struct output_source_filename_data\n      quick_symbol_functions::map_symbol_filenames.  */\n   void operator() (const char *filename, const char *fullname)\n   {\n-    output (fullname != nullptr ? fullname : filename);\n+    /* The false here indicates that this file is from an unexpanded\n+       symtab.  */\n+    output (filename, fullname, false);\n   }\n \n private:\n@@ -4380,12 +4337,17 @@ struct output_source_filename_data\n \n   /* How source filename should be filtered.  */\n   const info_sources_filter &m_filter;\n+\n+  /* The object to which output is sent.  */\n+  struct ui_out *m_uiout;\n };\n \n /* See comment in class declaration above.  */\n \n void\n-output_source_filename_data::output (const char *name)\n+output_source_filename_data::output (const char *disp_name,\n+\t\t\t\t     const char *fullname,\n+\t\t\t\t     bool expanded_p)\n {\n   /* Since a single source file can result in several partial symbol\n      tables, we need to avoid printing it more than once.  Note: if\n@@ -4397,30 +4359,47 @@ output_source_filename_data::output (const char *name)\n      symtabs; it doesn't hurt to check.  */\n \n   /* Was NAME already seen?  If so, then don't print it again.  */\n-  if (m_filename_seen_cache.seen (name))\n+  if (m_filename_seen_cache.seen (fullname))\n     return;\n \n   /* If the filter rejects this file then don't print it.  */\n-  if (!m_filter.matches (name))\n+  if (!m_filter.matches (fullname))\n     return;\n \n+  ui_out_emit_tuple ui_emitter (m_uiout, nullptr);\n+\n   /* Print it and reset *FIRST.  */\n   if (!m_first)\n-    printf_filtered (\", \");\n+    m_uiout->text (\", \");\n   m_first = false;\n \n   wrap_here (\"\");\n-  fputs_styled (name, file_name_style.style (), gdb_stdout);\n+  if (m_uiout->is_mi_like_p ())\n+    {\n+      m_uiout->field_string (\"file\", disp_name, file_name_style.style ());\n+      if (fullname != nullptr)\n+\tm_uiout->field_string (\"fullname\", fullname,\n+\t\t\t       file_name_style.style ());\n+      m_uiout->field_string (\"debug-fully-read\",\n+\t\t\t     (expanded_p ? \"true\" : \"false\"));\n+    }\n+  else\n+    {\n+      if (fullname == nullptr)\n+\tfullname = disp_name;\n+      m_uiout->field_string (\"fullname\", fullname,\n+\t\t\t     file_name_style.style ());\n+    }\n }\n \n /* See comment is class declaration above.  */\n \n void\n output_source_filename_data::print_header (const char *symbol_msg)\n {\n-  puts_filtered (symbol_msg);\n-  m_filter.print ();\n-  puts_filtered (\"\\n\");\n+  m_uiout->text (symbol_msg);\n+  m_filter.print (m_uiout);\n+  m_uiout->text (\"\\n\");\n }\n \n /* For the 'info sources' command, what part of the file names should we be\n@@ -4476,6 +4455,42 @@ info_sources_command_completer (cmd_list_element *ignore,\n     return;\n }\n \n+/* See symtab.h.  */\n+\n+void\n+info_sources_worker (struct ui_out *uiout,\n+\t\t     const info_sources_filter &filter)\n+{\n+  output_source_filename_data data (uiout, filter);\n+\n+  ui_out_emit_list results_emitter (uiout, \"files\");\n+  gdb::optional<ui_out_emit_tuple> output_tuple;\n+  gdb::optional<ui_out_emit_list> sources_list;\n+\n+  if (!uiout->is_mi_like_p ())\n+    data.print_header (_(\"Source files for which symbols have been read in:\\n\"));\n+\n+  for (objfile *objfile : current_program_space->objfiles ())\n+    {\n+      for (compunit_symtab *cu : objfile->compunits ())\n+\t{\n+\t  for (symtab *s : compunit_filetabs (cu))\n+\t    {\n+\t      const char *file = symtab_to_filename_for_display (s);\n+\t      const char *fullname = symtab_to_fullname (s);\n+\t      data.output (file, fullname, true);\n+\t    }\n+\t}\n+    }\n+\n+  uiout->text (\"\\n\\n\");\n+  if (!uiout->is_mi_like_p ())\n+    data.print_header (_(\"Source files for which symbols will be read in on demand:\\n\"));\n+  data.reset_output ();\n+  map_symbol_filenames (data, true /*need_fullname*/);\n+  uiout->text (\"\\n\");\n+}\n+\n /* Implement the 'info sources' command.  */\n \n static void\n@@ -4493,7 +4508,7 @@ info_sources_command (const char *args, int from_tty)\n     error (_(\"You cannot give both -basename and -dirname to 'info sources'.\"));\n \n   const char *regex = nullptr;\n-  if (args != nullptr && *args != '\\000')\n+  if (args != NULL && *args != '\\000')\n     regex = args;\n \n   if ((match_opts.dirname || match_opts.basename) && regex == nullptr)\n@@ -4508,29 +4523,7 @@ info_sources_command (const char *args, int from_tty)\n     match_type = info_sources_filter::match_on::FULLNAME;\n \n   info_sources_filter filter (match_type, regex);\n-  output_source_filename_data data (filter);\n-\n-  data.print_header (_(\"Source files for which symbols have been read in:\\n\"));\n-\n-  for (objfile *objfile : current_program_space->objfiles ())\n-    {\n-      for (compunit_symtab *cu : objfile->compunits ())\n-\t{\n-\t  for (symtab *s : compunit_filetabs (cu))\n-\t    {\n-\t      const char *fullname = symtab_to_fullname (s);\n-\n-\t      data.output (fullname);\n-\t    }\n-\t}\n-    }\n-  printf_filtered (\"\\n\\n\");\n-\n-  data.print_header (_(\"Source files for which symbols will be read in on demand:\\n\"));\n-\n-  data.reset_output ();\n-  map_symbol_filenames (data, true /*need_fullname*/);\n-  printf_filtered (\"\\n\");\n+  info_sources_worker (current_uiout, filter);\n }\n \n /* Compare FILE against all the entries of FILENAMES.  If BASENAMES is\n@@ -6890,7 +6883,8 @@ Print information about all types matching REGEXP, or all types if no\\n\\\n REGEXP is given.  The optional flag -q disables printing of headers.\"));\n   set_cmd_completer_handle_brkchars (c, info_types_command_completer);\n \n-  const auto info_sources_opts = make_info_sources_options_def_group (nullptr);\n+  const auto info_sources_opts\n+    = make_info_sources_options_def_group (nullptr);\n \n   static std::string info_sources_help\n     = gdb::option::build_help (_(\"\\"
    },
    {
      "sha": "db0df5cb4bba28b9722f6aae404a7360bb5cfed5",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -2385,4 +2385,67 @@ class symbol_searcher\n   std::vector<bound_minimal_symbol> m_minimal_symbols;\n };\n \n+/* Class used to encapsulate the filename filtering for the \"info sources\"\n+   command.  */\n+\n+struct info_sources_filter\n+{\n+  /* If filename filtering is being used (see M_C_REGEXP) then which part\n+     of the filename is being filtered against?  */\n+  enum class match_on\n+  {\n+    /* Match against the full filename.  */\n+    FULLNAME,\n+\n+    /* Match only against the directory part of the full filename.  */\n+    DIRNAME,\n+\n+    /* Match only against the basename part of the full filename.  */\n+    BASENAME\n+  };\n+\n+  /* Create a filter of MATCH_TYPE using regular expression REGEXP.  If\n+     REGEXP is nullptr then all files will match the filter and MATCH_TYPE\n+     is ignored.\n+\n+     The string pointed too by REGEXP must remain live and unchanged for\n+     this lifetime of this object as the object only retains a copy of the\n+     pointer.  */\n+  info_sources_filter (match_on match_type, const char *regexp);\n+\n+  DISABLE_COPY_AND_ASSIGN (info_sources_filter);\n+\n+  /* Does FULLNAME match the filter defined by this object, return true if\n+     it does, otherwise, return false.  If there is no filtering defined\n+     then this function will always return true.  */\n+  bool matches (const char *fullname) const;\n+\n+  /* Print a single line describing this filter to UIOUT, used as part of\n+     the \"info sources\" command output.  If there is no filter in place\n+     then nothing is printed.  */\n+  void print (struct ui_out *uiout) const;\n+\n+private:\n+\n+  /* The type of filtering in place.  */\n+  match_on m_match_type;\n+\n+  /* Points to the original regexp used to create this filter.  */\n+  const char *m_regexp;\n+\n+  /* A compiled version of M_REGEXP.  This object is only given a value if\n+     M_REGEXP is not nullptr and is not the empty string.  */\n+  gdb::optional<compiled_regex> m_c_regexp;\n+};\n+\n+/* Perform the core of the 'info sources' command.\n+\n+   FILTER is used to perform regular expression based filtering on the\n+   source files that will be displayed.\n+\n+   Output is written to UIOUT in CLI or MI style as appropriate.  */\n+\n+extern void info_sources_worker (struct ui_out *uiout,\n+\t\t\t\t const info_sources_filter &filter);\n+\n #endif /* !defined(SYMTAB_H) */"
    },
    {
      "sha": "7eb13b82dfa67c4ae40f91b041c1d04759a6bf05",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -1,3 +1,11 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.dwarf2/dw2-filename.exp: Update expected results.\n+\t* gdb.mi/mi-file.exp: Likewise.\n+\t* gdb.mi/mi-info-sources-base.c: New file.\n+\t* gdb.mi/mi-info-sources.c: New file.\n+\t* gdb.mi/mi-info-sources.exp: New file.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.cp/method-call-in-c.cc (struct foo_type): Add static member"
    },
    {
      "sha": "bd303c8547b21c4f66b6906e993e457246bbc987",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-filename.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/gdb.dwarf2/dw2-filename.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/gdb.dwarf2/dw2-filename.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-filename.exp?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -37,7 +37,7 @@ clean_restart ${testfile}\n # the full path to that file.  What we want to verify, most of all,\n # is that the file and fullname fields are now inverted.\n gdb_test \"interpreter-exec mi -file-list-exec-source-files\" \\\n-         \".*{file=\\\"file1\\\\.txt\\\",fullname=\\\".+file1\\\\.txt\\\"}.*\"\n+    \".*{file=\\\"file1\\\\.txt\\\",fullname=\\\".+file1\\\\.txt\\\",debug-fully-read=\\\"\\[^\\\"\\]+\\\"}.*\"\n \n # And `info sources' should return the fullname incl. the directories.\n gdb_test \"info sources\" {[/]file1\\.txt.*}"
    },
    {
      "sha": "4cae33c017e92cf1201f6aab7cb25393a7331148",
      "filename": "gdb/testsuite/gdb.mi/mi-file.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/gdb.mi/mi-file.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/gdb.mi/mi-file.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-file.exp?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -68,7 +68,7 @@ proc test_file_list_exec_source_files {} {\n \n     # get the path and absolute path to the current executable\n     mi_gdb_test \"222-file-list-exec-source-files\" \\\n-\t    \"222\\\\\\^done,files=\\\\\\[\\{file=\\\".*${srcfile}\\\",fullname=\\\"$fullname_syntax${srcfile}\\\"\\}.*]\" \\\n+\t    \"222\\\\\\^done,files=\\\\\\[\\{file=\\\".*${srcfile}\\\",fullname=\\\"$fullname_syntax${srcfile}\\\",debug-fully-read=\\\"\\[^\\\"\\]+\\\"\\}.*]\" \\\n               \"Getting a list of source files.\"\n }\n "
    },
    {
      "sha": "cc736123600d326e701844289cb8a8571cd92b27",
      "filename": "gdb/testsuite/gdb.mi/mi-info-sources-base.c",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/gdb.mi/mi-info-sources-base.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/gdb.mi/mi-info-sources-base.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-info-sources-base.c?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -0,0 +1,23 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019-2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This file was originally copied from gdb.base/info_sources_base.c.  */\n+\n+void some_other_func (void)\n+{\n+  return;\n+}"
    },
    {
      "sha": "b91b8280c2b9c84d66e965102f4687acd09c292a",
      "filename": "gdb/testsuite/gdb.mi/mi-info-sources.c",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/gdb.mi/mi-info-sources.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/gdb.mi/mi-info-sources.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-info-sources.c?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -0,0 +1,25 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019-2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This file was originally copied from gdb.base/info_sources.c.  */\n+\n+extern void some_other_func (void);\n+int main ()\n+{\n+  some_other_func ();\n+  return 0;\n+}"
    },
    {
      "sha": "c218af4ba80da17cac3ee385e1a31cfcb6f17d0f",
      "filename": "gdb/testsuite/gdb.mi/mi-info-sources.exp",
      "status": "added",
      "additions": 147,
      "deletions": 0,
      "changes": 147,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/gdb.mi/mi-info-sources.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e350a054bbeb4d00f2c430c4815c82d5ffb47a7/gdb/testsuite/gdb.mi/mi-info-sources.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-info-sources.exp?ref=0e350a054bbeb4d00f2c430c4815c82d5ffb47a7",
      "patch": "@@ -0,0 +1,147 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test the -file-list-exec-source-files command.\n+\n+load_lib mi-support.exp\n+set MIFLAGS \"-i=mi\"\n+\n+standard_testfile .c -base.c\n+\n+if {[prepare_for_testing $testfile.exp $testfile \\\n+\t [list $srcfile $srcfile2] debug]} {\n+    untested $testfile.exp\n+    return -1\n+}\n+\n+mi_clean_restart $binfile\n+\n+mi_runto_main\n+\n+# Helper to build expected MI output pattern for a list.  NAME is the\n+# name of the list (which can be the empty string) and args is one\n+# or more strings representing the fields of the list, which will be\n+# joined with a comma.\n+#\n+# If any of the fields in args matches \".*\" then the comma before and\n+# after are dropped from the final pattern.\n+proc mi_list { name args } {\n+    set str \"\"\n+\n+    if { $name != \"\" } {\n+\tset str \"${name}=\"\n+    }\n+\n+    set pattern \"\"\n+    foreach a $args {\n+\tif { [string length $pattern] > 0 } {\n+\t    if { [string range $pattern end-1 end] != \".*\" \\\n+\t\t     && [string range $a 0 1] != \".*\" } {\n+\t\tset pattern \"${pattern},\"\n+\t    }\n+\t}\n+\tset pattern \"${pattern}${a}\"\n+    }\n+    set str \"$str\\\\\\[${pattern}\\\\\\]\"\n+    return ${str}\n+}\n+\n+# Helper to build expected MI output pattern for a tuple.  NAME is the\n+# name of the tuple (which can be the empty string) and args is one\n+# or more strings representing the fields of the tuple, which will be\n+# joined with a comma.\n+#\n+# If any of the fields in args matches \".*\" then the comma before and\n+# after are dropped from the final pattern.\n+proc mi_tuple { name args } {\n+    set str \"\"\n+\n+    if { $name != \"\" } {\n+\tset str \"${name}=\"\n+    }\n+\n+    set pattern \"\"\n+    foreach a $args {\n+\tif { [string length $pattern] > 0 } {\n+\t    if { [string range $pattern end-1 end] != \".*\" \\\n+\t\t     && [string range $a 0 1] != \".*\" } {\n+\t\tset pattern \"${pattern},\"\n+\t    }\n+\t}\n+\tset pattern \"${pattern}${a}\"\n+    }\n+    set str \"$str\\\\{${pattern}\\\\}\"\n+    return ${str}\n+}\n+\n+# Helper to build expected MI output pattern for a single field.  NAME\n+# is the name of the field, and PATTERN matches the fields contents.\n+# This proc will add quotes around PATTERN.\n+proc mi_field { name pattern } {\n+    set str \"\"\n+\n+    if { $name != \"\" } {\n+\tset str \"${name}=\"\n+    }\n+\n+    set str \"$str\\\"${pattern}\\\"\"\n+    return ${str}\n+}\n+\n+# Run tests on '-file-list-exec-source-files'.  DEBUG_FULLY_READ is either the string\n+# \"true\" or \"false\" and indicates if the GDB will have read all the\n+# debug for the test program or not yet.\n+proc check_info_sources { debug_fully_read } {\n+\n+    with_test_prefix \"debug_read=${debug_fully_read}\" {\n+\n+\tif { $debug_fully_read } {\n+\t    set p [mi_list \"files\" \\\n+\t\t       [mi_tuple \"\" \\\n+\t\t\t    [mi_field \"file\" \"\\[^\\\"\\]+/mi-info-sources-base\\\\.c\"] \\\n+\t\t\t    [mi_field \"fullname\" \"\\[^\\\"\\]+/mi-info-sources-base\\\\.c\"] \\\n+\t\t\t    [mi_field \"debug-fully-read\" \"${debug_fully_read}\"]] \\\n+\t\t       [mi_tuple \"\" \\\n+\t\t\t    [mi_field \"file\" \"\\[^\\\"\\]+/mi-info-sources\\\\.c\"] \\\n+\t\t\t    [mi_field \"fullname\" \"\\[^\\\"\\]+/mi-info-sources\\\\.c\"] \\\n+\t\t\t    [mi_field \"debug-fully-read\" \"true\"]]]\n+\t} else {\n+\t    set p [mi_list \"files\" \\\n+\t\t       [mi_tuple \"\" \\\n+\t\t\t    [mi_field \"file\" \"\\[^\\\"\\]+/mi-info-sources\\\\.c\"] \\\n+\t\t\t    [mi_field \"fullname\" \"\\[^\\\"\\]+/mi-info-sources\\\\.c\"] \\\n+\t\t\t    [mi_field \"debug-fully-read\" \"true\"]] \\\n+\t\t       [mi_tuple \"\" \\\n+\t\t\t    [mi_field \"file\" \"\\[^\\\"\\]+/mi-info-sources-base\\\\.c\"] \\\n+\t\t\t    [mi_field \"fullname\" \"\\[^\\\"\\]+/mi-info-sources-base\\\\.c\"] \\\n+\t\t\t    [mi_field \"debug-fully-read\" \"${debug_fully_read}\"]]]\n+\t}\n+\tmi_gdb_test \"-file-list-exec-source-files\" \".*\\\\^done,${p}\" \"-file-list-exec-source-files\"\n+\n+\tset p [mi_list \"files\" \\\n+\t\t   [mi_tuple \"\" \\\n+\t\t\t[mi_field \"file\" \"\\[^\\\"\\]+/mi-info-sources-base\\\\.c\"] \\\n+\t\t\t[mi_field \"fullname\" \"\\[^\\\"\\]+/mi-info-sources-base\\\\.c\"] \\\n+\t\t\t[mi_field \"debug-fully-read\" \"${debug_fully_read}\"]]]\n+\tmi_gdb_test \"-file-list-exec-source-files --basename -- base\" \".*\\\\^done,${p}\" \\\n+\t    \"-file-list-exec-source-files --basename -- base\"\n+    }\n+}\n+\n+check_info_sources \"false\"\n+\n+mi_continue_to \"some_other_func\"\n+\n+check_info_sources \"true\""
    }
  ]
}