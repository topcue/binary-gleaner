{
  "sha": "b5b591a865b3021453a47c612ece5e7574b47d04",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjViNTkxYTg2NWIzMDIxNDUzYTQ3YzYxMmVjZTVlNzU3NGI0N2QwNA==",
  "commit": {
    "author": {
      "name": "George Barrett",
      "email": "bob@bob131.so",
      "date": "2021-07-29T15:12:18Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-29T16:55:16Z"
    },
    "message": "guile: fix make-value with pointer type\n\nCalling the `make-value' procedure with an integer value and a pointer\ntype for the #:type argument triggers a failed assertion in\n`get_unsigned_type_max', as that function doesn't consider pointers to\nbe an unsigned type. This commit fixes the issue by adding a separate\ncode path for pointers.\n\nAs previously suggested, range checking is done using a new helper\nfunction in gdbtypes.\n\ngdb/ChangeLog:\n\n2021-07-30  George Barrett  <bob@bob131.so>\n\n\t* gdbtypes.h (get_pointer_type_max): Add declaration.\n\t* gdbtypes.c (get_pointer_type_max): Add definition for new\n\thelper function.\n\t* guile/scm-math.c (vlscm_convert_typed_number): Add code path\n\tfor handling conversions to pointer types without failing an\n\tassert.\n\ngdb/testsuite/ChangeLog:\n\n2021-07-30  George Barrett  <bob@bob131.so>\n\n\t* gdb.guile/scm-math.exp (test_value_numeric_ops): Add test\n\tfor creating pointers with make-value.\n\t(test_make_pointer_value, test_pointer_numeric_range): Add\n\ttest procedures containing checks for integer-to-pointer\n\tvalidation.\n\nChange-Id: I9994dd1c848840a3d995f745e6d72867732049f0",
    "tree": {
      "sha": "fd2005dd4656f5414fc395b1fa64081e1ff36933",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fd2005dd4656f5414fc395b1fa64081e1ff36933"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b5b591a865b3021453a47c612ece5e7574b47d04",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b5b591a865b3021453a47c612ece5e7574b47d04",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b5b591a865b3021453a47c612ece5e7574b47d04",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b5b591a865b3021453a47c612ece5e7574b47d04/comments",
  "author": {
    "login": "Bob131",
    "id": 4337852,
    "node_id": "MDQ6VXNlcjQzMzc4NTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4337852?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Bob131",
    "html_url": "https://github.com/Bob131",
    "followers_url": "https://api.github.com/users/Bob131/followers",
    "following_url": "https://api.github.com/users/Bob131/following{/other_user}",
    "gists_url": "https://api.github.com/users/Bob131/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Bob131/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Bob131/subscriptions",
    "organizations_url": "https://api.github.com/users/Bob131/orgs",
    "repos_url": "https://api.github.com/users/Bob131/repos",
    "events_url": "https://api.github.com/users/Bob131/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Bob131/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c3c1e6459f89167fc01de9376c6b34574d710278",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3c1e6459f89167fc01de9376c6b34574d710278",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c3c1e6459f89167fc01de9376c6b34574d710278"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 71,
    "deletions": 2
  },
  "files": [
    {
      "sha": "f76cafda8b49223ed973b68d15685c64e064d7a4",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b5b591a865b3021453a47c612ece5e7574b47d04/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b5b591a865b3021453a47c612ece5e7574b47d04/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=b5b591a865b3021453a47c612ece5e7574b47d04",
      "patch": "@@ -1924,6 +1924,21 @@ get_signed_type_minmax (struct type *type, LONGEST *min, LONGEST *max)\n   *max = ((ULONGEST) 1 << (n - 1)) - 1;\n }\n \n+/* Return the largest value representable by pointer type TYPE. */\n+\n+CORE_ADDR\n+get_pointer_type_max (struct type *type)\n+{\n+  unsigned int n;\n+\n+  type = check_typedef (type);\n+  gdb_assert (type->code () == TYPE_CODE_PTR);\n+  gdb_assert (TYPE_LENGTH (type) <= sizeof (CORE_ADDR));\n+\n+  n = TYPE_LENGTH (type) * TARGET_CHAR_BIT;\n+  return ((((CORE_ADDR) 1 << (n - 1)) - 1) << 1) | 1;\n+}\n+\n /* Internal routine called by TYPE_VPTR_FIELDNO to return the value of\n    cplus_stuff.vptr_fieldno.\n "
    },
    {
      "sha": "bfb7f2965a6e8f0d23a7fb491b3f5aee83f0b6de",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b5b591a865b3021453a47c612ece5e7574b47d04/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b5b591a865b3021453a47c612ece5e7574b47d04/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=b5b591a865b3021453a47c612ece5e7574b47d04",
      "patch": "@@ -2523,6 +2523,8 @@ extern ULONGEST get_unsigned_type_max (struct type *);\n \n extern void get_signed_type_minmax (struct type *, LONGEST *, LONGEST *);\n \n+extern CORE_ADDR get_pointer_type_max (struct type *);\n+\n /* * Resolve all dynamic values of a type e.g. array bounds to static values.\n    ADDR specifies the location of the variable the type is bound to.\n    If TYPE has no dynamic properties return TYPE; otherwise a new type with"
    },
    {
      "sha": "96d8cb4a4e4d631164620a84f953c0bcf6a12e4e",
      "filename": "gdb/guile/scm-math.c",
      "status": "modified",
      "additions": 14,
      "deletions": 2,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b5b591a865b3021453a47c612ece5e7574b47d04/gdb/guile/scm-math.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b5b591a865b3021453a47c612ece5e7574b47d04/gdb/guile/scm-math.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-math.c?ref=b5b591a865b3021453a47c612ece5e7574b47d04",
      "patch": "@@ -524,8 +524,7 @@ vlscm_convert_typed_number (const char *func_name, int obj_arg_pos, SCM obj,\n \t\t\t    int type_arg_pos, SCM type_scm, struct type *type,\n \t\t\t    struct gdbarch *gdbarch, SCM *except_scmp)\n {\n-  if (is_integral_type (type)\n-      || type->code () == TYPE_CODE_PTR)\n+  if (is_integral_type (type))\n     {\n       if (type->is_unsigned ())\n \t{\n@@ -556,6 +555,19 @@ vlscm_convert_typed_number (const char *func_name, int obj_arg_pos, SCM obj,\n \t  return value_from_longest (type, gdbscm_scm_to_longest (obj));\n \t}\n     }\n+  else if (type->code () == TYPE_CODE_PTR)\n+    {\n+      CORE_ADDR max = get_pointer_type_max (type);\n+      if (!scm_is_unsigned_integer (obj, 0, max))\n+\t{\n+\t  *except_scmp\n+\t    = gdbscm_make_out_of_range_error (func_name,\n+\t\t\t\t\t      obj_arg_pos, obj,\n+\t\t\t\t\t_(\"value out of range for type\"));\n+\t  return NULL;\n+\t}\n+      return value_from_pointer (type, gdbscm_scm_to_ulongest (obj));\n+    }\n   else if (type->code () == TYPE_CODE_FLT)\n     return value_from_host_double (type, scm_to_double (obj));\n   else"
    },
    {
      "sha": "ee428e5cc90059d22c5e4f6ef4f7c27dfbeb853f",
      "filename": "gdb/testsuite/gdb.guile/scm-math.exp",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b5b591a865b3021453a47c612ece5e7574b47d04/gdb/testsuite/gdb.guile/scm-math.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b5b591a865b3021453a47c612ece5e7574b47d04/gdb/testsuite/gdb.guile/scm-math.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-math.exp?ref=b5b591a865b3021453a47c612ece5e7574b47d04",
      "patch": "@@ -137,6 +137,15 @@ proc test_value_numeric_ops {} {\n     gdb_test \"gu (print (value-sub b a))\" \\\n \t\"= 3\" \"subtract two pointer values\"\n \n+    # Test pointer creation.\n+\n+    gdb_test_no_output \"gu (define void-pointer-type (type-pointer (arch-void-type (current-arch))))\"\n+    gdb_scm_test_silent_cmd \"gu (define null-pointer (make-value 0 #:type void-pointer-type))\" \\\n+\t\"test make-value with pointer type\"\n+    gdb_test \"gu (print null-pointer)\" \"= 0x0\"\n+    gdb_test \"gu (print (equal? (value-type null-pointer) void-pointer-type))\" \\\n+\t\"= #t\"\n+\n     # Test some invalid operations.\n \n     gdb_test_multiple \"gu (print (value-add i '()))\" \"catch error in guile type conversion\" {\n@@ -237,6 +246,36 @@ proc test_value_numeric_ranges {} {\n     }\n }\n \n+# Helper routine for test_pointer_numeric_range.\n+\n+proc test_make_pointer_value { size } {\n+    set max [get_max_uint $size]\n+    set max_hex [string repeat \"f\" [expr \"$size / 4\"]]\n+\n+    gdb_test \"gu (print (make-value $max #:type void-pointer-type))\" \\\n+\t\"= 0x$max_hex\" \"test make-value void* max\"\n+    gdb_test \"gu (print (make-value 0 #:type void-pointer-type))\" \\\n+\t\"= 0x0\" \"test make-value void* 0\"\n+\n+    gdb_test \"gu (print (make-value (+ $max 1) #:type void-pointer-type))\" \\\n+\t\"ERROR.*Out of range.*\" \"test make-value void* max+1\"\n+    gdb_test \"gu (print (make-value -1 #:type void-pointer-type))\" \\\n+\t\"ERROR.*Out of range.*\" \"test make-value void* -1\"\n+}\n+\n+proc test_pointer_numeric_range {} {\n+    # We can't assume anything about sizeof (void*) on the target.\n+    # Keep it simple for now, this will cover everything important for\n+    # the major targets.\n+    set pointer_size [get_sizeof \"void*\" 0]\n+    if { $pointer_size == 4 } {\n+\ttest_make_pointer_value 32\n+    }\n+    if { $pointer_size == 8 } {\n+\ttest_make_pointer_value 64\n+    }\n+}\n+\n proc test_value_boolean {} {\n     # Note: Boolean values print as 0,1 because they are printed in the\n     # current language (in this case C).\n@@ -305,5 +344,6 @@ if ![gdb_guile_runto_main] {\n \n test_value_numeric_ops\n test_value_numeric_ranges\n+test_pointer_numeric_range\n test_value_boolean\n test_value_compare"
    }
  ]
}