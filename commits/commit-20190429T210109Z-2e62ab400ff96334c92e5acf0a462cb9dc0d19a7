{
  "sha": "2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmU2MmFiNDAwZmY5NjMzNGM5MmU1YWNmMGE0NjJjYjlkYzBkMTlhNw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-03-21T15:13:23Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-29T21:01:09Z"
    },
    "message": "gdb: Introduce 'print max-depth' feature\n\nIntroduce a new print setting max-depth which can be set with 'set\nprint max-depth DEPTH'.  The default value of DEPTH is 20, but this\ncan also be set to unlimited.\n\nWhen GDB is printing a value containing nested structures GDB will\nstop descending at depth DEPTH.  Here is a small example:\n\n    typedef struct s1 { int a; } s1;\n    typedef struct s2 { s1 b; } s2;\n    typedef struct s3 { s2 c; } s3;\n    typedef struct s4 { s3 d; } s4;\n\n    s4 var = { { { { 3 } } } };\n\nThe following table shows how various depth settings affect printing\nof 'var':\n\n    | Depth Setting | Result of 'p var'              |\n    |---------------+--------------------------------|\n    |     Unlimited | $1 = {d = {c = {b = {a = 3}}}} |\n    |             4 | $1 = {d = {c = {b = {a = 3}}}} |\n    |             3 | $1 = {d = {c = {b = {...}}}}   |\n    |             2 | $1 = {d = {c = {...}}}         |\n    |             1 | $1 = {d = {...}}               |\n    |             0 | $1 = {...}                     |\n\nOnly structures, unions, and arrays are replaced in this way, scalars\nand strings are not replaced.\n\nThe replacement is counted from the level at which you print, not from\nthe top level of the structure.  So, consider the above example and\nthis GDB session:\n\n    (gdb) set print max-depth 2\n    (gdb) p var\n    $1 = {d = {c = {...}}}\n    (gdb) p var.d\n    $2 = {c = {b = {...}}}\n    (gdb) p var.d.c\n    $3 = {b = {a = 3}}\n\nSetting the max-depth to 2 doesn't prevent the user from exploring\ndeeper into 'var' by asking for specific sub-fields to be printed.\n\nThe motivation behind this feature is to try and give the user more\ncontrol over how much is printed when examining large, complex data\nstructures.\n\nThe default max-depth of 20 means that there is a change in GDB's\ndefault behaviour.  Someone printing a data structure with 20 levels\nof nesting will now see '{...}' instead of their data, they would need\nto adjust the max depth, or call print again naming a specific field\nin order to dig deeper into their data structure.  If this is\nconsidered a problem then we could increase the default, or even make\nthe default unlimited.\n\nThis commit relies on the previous commit, which added a new field to\nthe language structure, this new field was a string that contained the\npattern that should be used when a structure/union/array is replaced\nin the output, this allows languages to use a syntax that is more\nappropriate, mostly this will be selecting the correct types of\nbracket '(...)' or '{...}', both of which are currently in use.\n\nThis commit should have no impact on MI output, expressions are\nprinted through the MI using -var-create and then -var-list-children.\nAs each use of -var-list-children only ever displays a single level of\nan expression then the max-depth setting will have no impact.\n\nThis commit also adds the max-depth mechanism to the scripting\nlanguage pretty printers following basically the same rules as for the\nbuilt in value printing.\n\nOne quirk is that when printing a value using the display hint 'map',\nif the keys of the map are structs then GDB will hide the keys one\ndepth level after it hides the values, this ensures that GDB produces\noutput like this:\n\n  $1 = map_object = {[{key1}] = {...}, [{key2}] = {...}}\n\nInstead of this less helpful output:\n\n  $1 = map_object = {[{...}] = {...}, [{...}] = {...}}\n\nThis is covered by the new tests in gdb.python/py-nested-maps.exp.\n\ngdb/ChangeLog:\n\n\t* cp-valprint.c (cp_print_value_fields): Allow an additional level\n\tof depth when printing anonymous structs or unions.\n\t* guile/scm-pretty-print.c (gdbscm_apply_val_pretty_printer):\n\tDon't print either the top-level value, or the children if the\n\tmax-depth is exceeded.\n\t(ppscm_print_children): When printing the key of a map, allow one\n\textra level of depth.\n\t* python/py-prettyprint.c (gdbpy_apply_val_pretty_printer): Don't\n\tprint either the top-level value, or the children if the max-depth\n\tis exceeded.\n\t(print_children): When printing the key of a map, allow one extra\n\tlevel of depth.\n\t* python/py-value.c (valpy_format_string): Add max_depth keyword.\n\t* valprint.c: (PRINT_MAX_DEPTH_DEFAULT): Define.\n\t(user_print_options): Initialise max_depth field.\n\t(val_print_scalar_or_string_type_p): New function.\n\t(val_print): Check to see if the max depth has been reached.\n\t(val_print_check_max_depth): Define new function.\n\t(show_print_max_depth): New function.\n\t(_initialize_valprint): Add 'print max-depth' option.\n\t* valprint.h (struct value_print_options) <max_depth>: New field.\n\t(val_print_check_max_depth): Declare new function.\n\t* NEWS: Document new feature.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (Print Settings): Document 'print max-depth'.\n\t* guile.texi (Guile Pretty Printing API): Document that 'print\n\tmax-depth' can effect the display of a values children.\n\t* python.texi (Pretty Printing API): Likewise.\n\t(Values From Inferior): Document max_depth keyword.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/max-depth.c: New file.\n\t* gdb.base/max-depth.exp: New file.\n\t* gdb.python/py-nested-maps.c: New file.\n\t* gdb.python/py-nested-maps.exp: New file.\n\t* gdb.python/py-nested-maps.py: New file.\n\t* gdb.python/py-format-string.exp (test_max_depth): New proc.\n\t(test_all_common): Call test_max_depth.\n\t* gdb.fortran/max-depth.exp: New file.\n\t* gdb.fortran/max-depth.f90: New file.\n\t* gdb.go/max-depth.exp: New file.\n\t* gdb.go/max-depth.go: New file.\n\t* gdb.modula2/max-depth.exp: New file.\n\t* gdb.modula2/max-depth.c: New file.\n\t* lib/gdb.exp (get_print_expr_at_depths): New proc.",
    "tree": {
      "sha": "2904968bffb30b8fbac114461b987424210de56e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2904968bffb30b8fbac114461b987424210de56e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4be290b2517839872ef7de47230be8dbd291a7e5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4be290b2517839872ef7de47230be8dbd291a7e5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4be290b2517839872ef7de47230be8dbd291a7e5"
    }
  ],
  "stats": {
    "total": 1521,
    "additions": 1485,
    "deletions": 36
  },
  "files": [
    {
      "sha": "b2e6f251c663f08310872f938476bf804f1b5290",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -1,3 +1,33 @@\n+2019-04-29  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Chris January  <chris.january@arm.com>\n+\t    Daniel Everett  <daniel.everett@arm.com>\n+\t    Nick Forrington  <nick.forrington@arm.com>\n+\t    Richard Bunt  <richard.bunt@arm.com>\n+\n+\t* cp-valprint.c (cp_print_value_fields): Allow an additional level\n+\tof depth when printing anonymous structs or unions.\n+\t* guile/scm-pretty-print.c (gdbscm_apply_val_pretty_printer):\n+\tDon't print either the top-level value, or the children if the\n+\tmax-depth is exceeded.\n+\t(ppscm_print_children): When printing the key of a map, allow one\n+\textra level of depth.\n+\t* python/py-prettyprint.c (gdbpy_apply_val_pretty_printer): Don't\n+\tprint either the top-level value, or the children if the max-depth\n+\tis exceeded.\n+\t(print_children): When printing the key of a map, allow one extra\n+\tlevel of depth.\n+\t* python/py-value.c (valpy_format_string): Add max_depth keyword.\n+\t* valprint.c: (PRINT_MAX_DEPTH_DEFAULT): Define.\n+\t(user_print_options): Initialise max_depth field.\n+\t(val_print_scalar_or_string_type_p): New function.\n+\t(val_print): Check to see if the max depth has been reached.\n+\t(val_print_check_max_depth): Define new function.\n+\t(show_print_max_depth): New function.\n+\t(_initialize_valprint): Add 'print max-depth' option.\n+\t* valprint.h (struct value_print_options) <max_depth>: New field.\n+\t(val_print_check_max_depth): Declare new function.\n+\t* NEWS: Document new feature.\n+\n 2019-04-29  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_language_defn): Initialise new field."
    },
    {
      "sha": "b21b2cbb4787103d91c0fb9e7e8e47fd9c9ec9d7",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -19,6 +19,15 @@\n * Two new convernience functions $_cimag and $_creal that extract the\n   imaginary and real parts respectively from complex numbers.\n \n+* New commands\n+\n+set print max-depth\n+show print max-depth\n+  Allows deeply nested structures to be simplified when printing by\n+  replacing deeply nested parts (beyond the max-depth) with ellipses.\n+  The default max-depth is 20, but this can be set to unlimited to get\n+  the old behavior back.\n+\n * Python API\n \n   ** The gdb.Value type has a new method 'format_string' which returns a"
    },
    {
      "sha": "ff860df499a95246366d08cffd54dea5b7d43cf8",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 49,
      "deletions": 31,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -272,10 +272,23 @@ cp_print_value_fields (struct type *type, struct type *real_type,\n \t\t\t\t   current_language->la_language,\n \t\t\t\t   DMGL_PARAMS | DMGL_ANSI);\n \t  annotate_field_name_end ();\n+\n+\t  /* We tweak various options in a few cases below.  */\n+\t  value_print_options options_copy = *options;\n+\t  value_print_options *opts = &options_copy;\n+\n \t  /* Do not print leading '=' in case of anonymous\n \t     unions.  */\n \t  if (strcmp (TYPE_FIELD_NAME (type, i), \"\"))\n \t    fputs_filtered (\" = \", stream);\n+\t  else\n+\t    {\n+\t      /* If this is an anonymous field then we want to consider it\n+\t\t as though it is at its parent's depth when it comes to the\n+\t\t max print depth.  */\n+\t      if (opts->max_depth != -1 && opts->max_depth < INT_MAX)\n+\t\t++opts->max_depth;\n+\t    }\n \t  annotate_field_value ();\n \n \t  if (!field_is_static (&TYPE_FIELD (type, i))\n@@ -299,14 +312,12 @@ cp_print_value_fields (struct type *type, struct type *real_type,\n \t\t}\n \t      else\n \t\t{\n-\t\t  struct value_print_options opts = *options;\n-\n-\t\t  opts.deref_ref = 0;\n+\t\t  opts->deref_ref = 0;\n \n \t\t  v = value_field_bitfield (type, i, valaddr, offset, val);\n \n-\t\t  common_val_print (v, stream, recurse + 1, &opts,\n-\t\t\t\t    current_language);\n+\t\t  common_val_print (v, stream, recurse + 1,\n+\t\t\t\t    opts, current_language);\n \t\t}\n \t    }\n \t  else\n@@ -333,8 +344,7 @@ cp_print_value_fields (struct type *type, struct type *real_type,\n \t\t    }\n \n \t\t  cp_print_static_field (TYPE_FIELD_TYPE (type, i),\n-\t\t\t\t\t v, stream, recurse + 1,\n-\t\t\t\t\t options);\n+\t\t\t\t\t v, stream, recurse + 1, opts);\n \t\t}\n \t      else if (i == vptr_fieldno && type == vptr_basetype)\n \t\t{\n@@ -346,20 +356,18 @@ cp_print_value_fields (struct type *type, struct type *real_type,\n \t\t      CORE_ADDR addr;\n \t\t      \n \t\t      addr = extract_typed_address (valaddr + i_offset, i_type);\n-\t\t      print_function_pointer_address (options,\n+\t\t      print_function_pointer_address (opts,\n \t\t\t\t\t\t      get_type_arch (type),\n \t\t\t\t\t\t      addr, stream);\n \t\t    }\n \t\t}\n \t      else\n \t\t{\n-\t\t  struct value_print_options opts = *options;\n-\n-\t\t  opts.deref_ref = 0;\n+\t\t  opts->deref_ref = 0;\n \t\t  val_print (TYPE_FIELD_TYPE (type, i),\n \t\t\t     offset + TYPE_FIELD_BITPOS (type, i) / 8,\n \t\t\t     address,\n-\t\t\t     stream, recurse + 1, val, &opts,\n+\t\t\t     stream, recurse + 1, val, opts,\n \t\t\t     current_language);\n \t\t}\n \t    }\n@@ -575,25 +583,35 @@ cp_print_value (struct type *type, struct type *real_type,\n \t{\n \t  int result = 0;\n \n-\t  /* Attempt to run an extension language pretty-printer on the\n-\t     baseclass if possible.  */\n-\t  if (!options->raw)\n-\t    result\n-\t      = apply_ext_lang_val_pretty_printer (baseclass,\n-\t\t\t\t\t\t   thisoffset + boffset,\n-\t\t\t\t\t\t   value_address (base_val),\n-\t\t\t\t\t\t   stream, recurse,\n-\t\t\t\t\t\t   base_val, options,\n-\t\t\t\t\t\t   current_language);\n-\n-\t  if (!result)\n-\t    cp_print_value_fields (baseclass, thistype,\n-\t\t\t\t   thisoffset + boffset,\n-\t\t\t\t   value_address (base_val),\n-\t\t\t\t   stream, recurse, base_val, options,\n-\t\t\t\t   ((struct type **)\n-\t\t\t\t    obstack_base (&dont_print_vb_obstack)),\n-\t\t\t\t   0);\n+\t  if (options->max_depth > -1\n+\t      && recurse >= options->max_depth)\n+\t    {\n+\t      const struct language_defn *language = current_language;\n+\t      gdb_assert (language->la_struct_too_deep_ellipsis != NULL);\n+\t      fputs_filtered (language->la_struct_too_deep_ellipsis, stream);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Attempt to run an extension language pretty-printer on the\n+\t\t baseclass if possible.  */\n+\t      if (!options->raw)\n+\t\tresult\n+\t\t  = apply_ext_lang_val_pretty_printer (baseclass,\n+\t\t\t\t\t\t       thisoffset + boffset,\n+\t\t\t\t\t\t       value_address (base_val),\n+\t\t\t\t\t\t       stream, recurse,\n+\t\t\t\t\t\t       base_val, options,\n+\t\t\t\t\t\t       current_language);\n+\n+\t      if (!result)\n+\t\tcp_print_value_fields (baseclass, thistype,\n+\t\t\t\t       thisoffset + boffset,\n+\t\t\t\t       value_address (base_val),\n+\t\t\t\t       stream, recurse, base_val, options,\n+\t\t\t\t       ((struct type **)\n+\t\t\t\t\tobstack_base (&dont_print_vb_obstack)),\n+\t\t\t\t       0);\n+\t    }\n \t}\n       fputs_filtered (\", \", stream);\n "
    },
    {
      "sha": "4166f19ad969d7363c662f3365a07c69b947a6b9",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-29  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.texinfo (Print Settings): Document 'print max-depth'.\n+\t* guile.texi (Guile Pretty Printing API): Document that 'print\n+\tmax-depth' can effect the display of a values children.\n+\t* python.texi (Pretty Printing API): Likewise.\n+\t(Values From Inferior): Document max_depth keyword.\n+\n 2019-04-27  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* gdb.texinfo (Calling): Document the new"
    },
    {
      "sha": "2282c8009b79d85695fb57cb35d54c4c715b3256",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -10572,6 +10572,64 @@ is 10.\n Display the current threshold for printing repeated identical\n elements.\n \n+@item set print max-depth @var{depth}\n+@item set print max-depth unlimited\n+@cindex printing nested structures\n+Set the threshold after which nested structures are replaced with\n+ellipsis, this can make visualising deeply nested structures easier.\n+\n+For example, given this C code\n+\n+@smallexample\n+typedef struct s1 @{ int a; @} s1;\n+typedef struct s2 @{ s1 b; @} s2;\n+typedef struct s3 @{ s2 c; @} s3;\n+typedef struct s4 @{ s3 d; @} s4;\n+\n+s4 var = @{ @{ @{ @{ 3 @} @} @} @};\n+@end smallexample\n+\n+The following table shows how different values of @var{depth} will\n+effect how @code{var} is printed by @value{GDBN}:\n+\n+@multitable @columnfractions .3 .7\n+@headitem @var{depth} setting @tab Result of @samp{p var}\n+@item unlimited\n+@tab @code{$1 = @{d = @{c = @{b = @{a = 3@}@}@}@}}\n+@item @code{0}\n+@tab @code{$1 = @{...@}}\n+@item @code{1}\n+@tab @code{$1 = @{d = @{...@}@}}\n+@item @code{2}\n+@tab @code{$1 = @{d = @{c = @{...@}@}@}}\n+@item @code{3}\n+@tab @code{$1 = @{d = @{c = @{b = @{...@}@}@}@}}\n+@item @code{4}\n+@tab @code{$1 = @{d = @{c = @{b = @{a = 3@}@}@}@}}\n+@end multitable\n+\n+To see the contents of structures that have been hidden the user can\n+either increase the print max-depth, or they can print the elements of\n+the structure that are visible, for example\n+\n+@smallexample\n+(gdb) set print max-depth 2\n+(gdb) p var\n+$1 = @{d = @{c = @{...@}@}@}\n+(gdb) p var.d\n+$2 = @{c = @{b = @{...@}@}@}\n+(gdb) p var.d.c\n+$3 = @{b = @{a = 3@}@}\n+@end smallexample\n+\n+The pattern used to replace nested structures varies based on\n+language, for most languages @code{@{...@}} is used, but Fortran uses\n+@code{(...)}.\n+\n+@item show print max-depth\n+Display the current threshold after which nested structures are\n+replaces with ellipsis.\n+\n @item set print null-stop\n @cindex @sc{null} elements in arrays\n Cause @value{GDBN} to stop printing the characters of an array when the first"
    },
    {
      "sha": "f4c29dc3df8d07bc2ce0097b453f89bbd267f3f8",
      "filename": "gdb/doc/guile.texi",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/doc/guile.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/doc/guile.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/guile.texi?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -1469,6 +1469,9 @@ object which is convertible to a @value{GDBN} value.\n \n If @var{children} is @code{#f}, @value{GDBN} will act\n as though the value has no children.\n+\n+Children may be hidden from display based on the value of @samp{set\n+print max-depth} (@pxref{Print Settings}).\n @end table\n @end deffn\n "
    },
    {
      "sha": "b47c38deef70b3d394b9e22b839379062175afac",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -931,6 +931,11 @@ Number of array elements to print, or @code{0} to print an unlimited\n number of elements (see @code{set print elements} in @ref{Print\n Settings}).\n \n+@item max_depth\n+The maximum depth to print for nested structs and unions, or @code{-1}\n+to print an unlimited number of elements (see @code{set print\n+max-depth} in @ref{Print Settings}).\n+\n @item repeat_threshold\n Set the threshold for suppressing display of repeated array elements, or\n @code{0} to represent all elements, even if repeated.  (See @code{set\n@@ -1365,6 +1370,9 @@ object which is convertible to a @value{GDBN} value.\n \n This method is optional.  If it does not exist, @value{GDBN} will act\n as though the value has no children.\n+\n+Children may be hidden from display based on the value of @samp{set\n+print max-depth} (@pxref{Print Settings}).\n @end defun\n \n @defun pretty_printer.display_hint (self)"
    },
    {
      "sha": "630a062148e0f6cf3cc464c17342bafb03b29c2c",
      "filename": "gdb/guile/scm-pretty-print.c",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/guile/scm-pretty-print.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/guile/scm-pretty-print.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-pretty-print.c?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -897,7 +897,18 @@ ppscm_print_children (SCM printer, enum display_hint hint,\n \t      ppscm_print_exception_unless_memory_error (except_scm, stream);\n \t      break;\n \t    }\n-\t  common_val_print (value, stream, recurse + 1, options, language);\n+\t  else\n+\t    {\n+\t      /* When printing the key of a map we allow one additional\n+\t\t level of depth.  This means the key will print before the\n+\t\t value does.  */\n+\t      struct value_print_options opt = *options;\n+\t      if (is_map && i % 2 == 0\n+\t\t  && opt.max_depth != -1\n+\t\t  && opt.max_depth < INT_MAX)\n+\t\t++opt.max_depth;\n+\t      common_val_print (value, stream, recurse + 1, &opt, language);\n+\t    }\n \t}\n \n       if (is_map && i % 2 == 0)\n@@ -984,6 +995,12 @@ gdbscm_apply_val_pretty_printer (const struct extension_language_defn *extlang,\n     }\n   gdb_assert (ppscm_is_pretty_printer_worker (printer));\n \n+  if (val_print_check_max_depth (stream, recurse, options, language))\n+    {\n+      result = EXT_LANG_RC_OK;\n+      goto done;\n+    }\n+\n   /* If we are printing a map, we want some special formatting.  */\n   hint = ppscm_get_display_hint_enum (printer);\n   if (hint == HINT_ERROR)"
    },
    {
      "sha": "fdc520d84432a8bee1cfc59901176ab10914848e",
      "filename": "gdb/python/py-prettyprint.c",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/python/py-prettyprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/python/py-prettyprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-prettyprint.c?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -517,7 +517,17 @@ print_children (PyObject *printer, const char *hint,\n \t      error (_(\"Error while executing Python code.\"));\n \t    }\n \t  else\n-\t    common_val_print (value, stream, recurse + 1, options, language);\n+\t    {\n+\t      /* When printing the key of a map we allow one additional\n+\t\t level of depth.  This means the key will print before the\n+\t\t value does.  */\n+\t      struct value_print_options opt = *options;\n+\t      if (is_map && i % 2 == 0\n+\t\t  && opt.max_depth != -1\n+\t\t  && opt.max_depth < INT_MAX)\n+\t\t++opt.max_depth;\n+\t      common_val_print (value, stream, recurse + 1, &opt, language);\n+\t    }\n \t}\n \n       if (is_map && i % 2 == 0)\n@@ -590,6 +600,9 @@ gdbpy_apply_val_pretty_printer (const struct extension_language_defn *extlang,\n   if (printer == Py_None)\n     return EXT_LANG_RC_NOP;\n \n+  if (val_print_check_max_depth (stream, recurse, options, language))\n+    return EXT_LANG_RC_OK;\n+\n   /* If we are printing a map, we want some special formatting.  */\n   gdb::unique_xmalloc_ptr<char> hint (gdbpy_get_display_hint (printer.get ()));\n "
    },
    {
      "sha": "0ffd0b03d1d005844eb131e9f583765975cef008",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -623,6 +623,7 @@ valpy_format_string (PyObject *self, PyObject *args, PyObject *kw)\n       \"static_members\",\t\t/* See set print static-members on|off.  */\n       /* C non-bool options.  */\n       \"max_elements\", \t\t/* See set print elements N.  */\n+      \"max_depth\",\t\t/* See set print max-depth N.  */\n       \"repeat_threshold\",\t/* See set print repeats.  */\n       \"format\",\t\t\t/* The format passed to the print command.  */\n       NULL\n@@ -665,7 +666,7 @@ valpy_format_string (PyObject *self, PyObject *args, PyObject *kw)\n   char *format = NULL;\n   if (!gdb_PyArg_ParseTupleAndKeywords (args,\n \t\t\t\t\tkw,\n-\t\t\t\t\t\"|O!O!O!O!O!O!O!O!O!IIs\",\n+\t\t\t\t\t\"|O!O!O!O!O!O!O!O!O!IIIs\",\n \t\t\t\t\tkeywords,\n \t\t\t\t\t&PyBool_Type, &raw_obj,\n \t\t\t\t\t&PyBool_Type, &pretty_arrays_obj,\n@@ -677,6 +678,7 @@ valpy_format_string (PyObject *self, PyObject *args, PyObject *kw)\n \t\t\t\t\t&PyBool_Type, &actual_objects_obj,\n \t\t\t\t\t&PyBool_Type, &static_members_obj,\n \t\t\t\t\t&opts.print_max,\n+\t\t\t\t\t&opts.max_depth,\n \t\t\t\t\t&opts.repeat_count_threshold,\n \t\t\t\t\t&format))\n     return NULL;\n@@ -702,7 +704,8 @@ valpy_format_string (PyObject *self, PyObject *args, PyObject *kw)\n     return NULL;\n \n   /* Numeric arguments for which 0 means unlimited (which we represent as\n-     UINT_MAX).  */\n+     UINT_MAX).  Note that the max-depth numeric argument uses -1 as\n+     unlimited, and 0 is a valid choice.  */\n   if (opts.print_max == 0)\n     opts.print_max = UINT_MAX;\n   if (opts.repeat_count_threshold == 0)"
    },
    {
      "sha": "6d9ac5aa935f17c377433459004ad6e007699db1",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -1,3 +1,21 @@\n+2019-04-29  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Richard Bunt  <richard.bunt@arm.com>\n+\n+\t* gdb.base/max-depth.c: New file.\n+\t* gdb.base/max-depth.exp: New file.\n+\t* gdb.python/py-nested-maps.c: New file.\n+\t* gdb.python/py-nested-maps.exp: New file.\n+\t* gdb.python/py-nested-maps.py: New file.\n+\t* gdb.python/py-format-string.exp (test_max_depth): New proc.\n+\t(test_all_common): Call test_max_depth.\n+\t* gdb.fortran/max-depth.exp: New file.\n+\t* gdb.fortran/max-depth.f90: New file.\n+\t* gdb.go/max-depth.exp: New file.\n+\t* gdb.go/max-depth.go: New file.\n+\t* gdb.modula2/max-depth.exp: New file.\n+\t* gdb.modula2/max-depth.c: New file.\n+\t* lib/gdb.exp (get_print_expr_at_depths): New proc.\n+\n 2019-04-29  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/opencl.exp (skip_opencl_tests): Add missing \"with\" in regexp."
    },
    {
      "sha": "3c57249e699029a38daf89fe1c54c39e10f93191",
      "filename": "gdb/testsuite/gdb.base/max-depth.c",
      "status": "added",
      "additions": 232,
      "deletions": 0,
      "changes": 232,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.base/max-depth.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.base/max-depth.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/max-depth.c?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -0,0 +1,232 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+struct s1\n+{\n+  int x;\n+  int y;\n+} s1;\n+\n+struct s2\n+{\n+  int x;\n+  int y;\n+  struct\n+  {\n+    int z;\n+    int a;\n+  };\n+} s2;\n+\n+struct s3\n+{\n+  int x;\n+  int y;\n+  struct\n+  {\n+    int z;\n+    int a;\n+    struct\n+    {\n+      int b;\n+      int c;\n+    };\n+  };\n+} s3;\n+\n+struct s4\n+{\n+  int x;\n+  int y;\n+  struct\n+  {\n+    int x;\n+    int y;\n+    struct\n+    {\n+      int x;\n+      int y;\n+    } l2;\n+  } l1;\n+} s4;\n+\n+struct s5\n+{\n+  union\n+  {\n+    int raw[3];\n+    struct\n+    {\n+      int x;\n+      int y;\n+      int z;\n+    };\n+  };\n+} s5;\n+\n+typedef struct\n+{\n+  union\n+  {\n+    int raw[3];\n+    struct\n+    {\n+      int x;\n+      int y;\n+      int z;\n+    };\n+  };\n+} s6_t;\n+\n+s6_t s6;\n+\n+struct s7\n+{\n+  struct\n+  {\n+    int x;\n+    int y;\n+  };\n+  struct\n+  {\n+    int z;\n+    int a;\n+  };\n+  struct\n+  {\n+    int b;\n+    int c;\n+  };\n+} s7;\n+\n+struct s8\n+{\n+  int x;\n+  int y;\n+  struct\n+  {\n+    int z;\n+    int a;\n+    struct\n+    {\n+      int b;\n+      int c;\n+    };\n+  } d1;\n+} s8;\n+\n+struct s9\n+{\n+  int x;\n+  int y;\n+  struct\n+  {\n+    int k;\n+    int j;\n+    struct\n+    {\n+      int z;\n+      int a;\n+      struct\n+      {\n+        int b;\n+        int c;\n+      };\n+    } d1;\n+  };\n+  struct\n+  {\n+    int z;\n+    int a;\n+    struct\n+    {\n+      int b;\n+      int c;\n+    };\n+  } d2;\n+} s9;\n+\n+struct s10\n+{\n+  int x[10];\n+  int y;\n+  struct\n+  {\n+    int k[10];\n+    int j;\n+    struct\n+    {\n+      int z;\n+      int a;\n+      struct\n+      {\n+        int b[10];\n+        int c;\n+      };\n+    } d1;\n+  };\n+  struct\n+  {\n+    int z;\n+    int a;\n+    struct\n+    {\n+      int b[10];\n+      int c;\n+    };\n+  } d2;\n+} s10;\n+\n+struct s11\n+{\n+  int x;\n+  char s[10];\n+  struct\n+  {\n+    int z;\n+    int a;\n+  };\n+} s11;\n+\n+/* The following are C++ inheritance testing.  */\n+#ifdef __cplusplus\n+\n+/* This is non-virtual inheritance.  */\n+struct C1 { int c1 = 1; } c1;\n+struct C2 { int c2 = 2; } c2;\n+struct C3 : C2 { int c3 = 3; } c3;\n+struct C4 { int c4 = 4; } c4;\n+struct C5 : C4 { int c5 = 5; } c5;\n+struct C6 : C5 { int c6 = 6; } c6;\n+struct C7 : C1, C3, C6 { int c7 = 7; } c7;\n+\n+/* This is virtual inheritance.  */\n+struct V1 { int v1 = 1; } v1;\n+struct V2 : virtual V1 { int v2 = 2; } v2;\n+struct V3 : virtual V1 { int v3 = 3; } v3;\n+struct V4 : virtual V2 { int v4 = 4; } v4;\n+struct V5 : virtual V2 { int v5 = 1; } v5;\n+struct V6 : virtual V2, virtual V3 { int v6 = 1; } v6;\n+struct V7 : virtual V4, virtual V5, virtual V6 { int v7 = 1; } v7;\n+\n+#endif /* __cplusplus */\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"
    },
    {
      "sha": "b3b78762eb1e17938d95ee94f6500aaae7823c22",
      "filename": "gdb/testsuite/gdb.base/max-depth.exp",
      "status": "added",
      "additions": 165,
      "deletions": 0,
      "changes": 165,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.base/max-depth.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.base/max-depth.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/max-depth.exp?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -0,0 +1,165 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Tests GDB's handling of 'set print max-depth'.\n+\n+# Only test C++ if we are able.  Always use C.\n+if { [skip_cplus_tests] || [get_compiler_info \"c++\"] } {\n+    set lang {c}\n+} else {\n+    set lang {c c++}\n+}\n+\n+foreach l $lang {\n+    set dir \"$l\"\n+    remote_exec host \"rm -rf [standard_output_file ${dir}]\"\n+    remote_exec host \"mkdir -p [standard_output_file ${dir}]\"\n+}\n+\n+proc compile_and_run_tests { lang } {\n+    global testfile\n+    global srcfile\n+    global binfile\n+    global hex\n+\n+    standard_testfile .c\n+\n+    # Create the additional flags.\n+    set flags \"debug\"\n+    lappend flags $lang\n+\n+    set dir \"$lang\"\n+    set binfile [standard_output_file ${dir}/${testfile}]\n+    if { [prepare_for_testing \"failed to prepare\" \"${binfile}\" \"${srcfile}\" \"${flags}\"] } {\n+\treturn 0\n+    }\n+\n+    # Advance to main.\n+    if { ![runto_main] } then {\n+\tfail \"can't run to main\"\n+\treturn 0\n+    }\n+\n+    # The max-depth setting has no effect as the anonymous scopes are\n+    # ignored and the members are aggregated into the parent scope.\n+    gdb_print_expr_at_depths \"s1\" {\"{...}\" \\\n+\t\t\t\t       \"{x = 0, y = 0}\"\\\n+\t\t\t\t       \"{x = 0, y = 0}\"}\n+\n+    gdb_print_expr_at_depths \"s2\" {\"{...}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, {z = 0, a = 0}}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, {z = 0, a = 0}}\"}\n+\n+    gdb_print_expr_at_depths \"s3\" {\"{...}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, {z = 0, a = 0, {b = 0, c = 0}}}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, {z = 0, a = 0, {b = 0, c = 0}}}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, {z = 0, a = 0, {b = 0, c = 0}}}\"}\n+\n+    # Increasing max-depth unfurls more of the object.\n+    gdb_print_expr_at_depths \"s4\" {\"{...}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, l1 = {...}}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, l1 = {x = 0, y = 0, l2 = {...}}}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, l1 = {x = 0, y = 0, l2 = {x = 0, y = 0}}}\"}\n+\n+    # Check handling of unions, in this case 'raw' is printed instead of\n+    # just {...} as this is not useful.\n+    gdb_print_expr_at_depths \"s5\" {\"{...}\" \\\n+\t\t\t\t       \"{{raw = {...}, {x = 0, y = 0, z = 0}}}\" \\\n+\t\t\t\t       \"{{raw = \\\\{0, 0, 0\\\\}, {x = 0, y = 0, z = 0}}}\"}\n+\n+    # Check handling of typedefs.\n+    gdb_print_expr_at_depths \"s6\" {\"{...}\" \\\n+\t\t\t\t       \"{{raw = {...}, {x = 0, y = 0, z = 0}}}\" \\\n+\t\t\t\t       \"{{raw = \\\\{0, 0, 0\\\\}, {x = 0, y = 0, z = 0}}}\"}\n+\n+    # Multiple anonymous structures in parallel.\n+    gdb_print_expr_at_depths \"s7\" {\"{...}\" \\\n+\t\t\t\t       \"{{x = 0, y = 0}, {z = 0, a = 0}, {b = 0, c = 0}}\" \\\n+\t\t\t\t       \"{{x = 0, y = 0}, {z = 0, a = 0}, {b = 0, c = 0}}\"}\n+\n+    # Flip flop between named and anonymous.  Expected to unfurl to the\n+    # first non-anonymous type.\n+    gdb_print_expr_at_depths \"s8\" {\"{...}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, d1 = {...}}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, d1 = {z = 0, a = 0, {b = 0, c = 0}}}\"}\n+\n+    # Imbalanced tree, this will unfurl one size more than the other as\n+    # one side has more anonymous levels.\n+    gdb_print_expr_at_depths \"s9\" {\"{...}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, {k = 0, j = 0, d1 = {...}}, d2 = {...}}\" \\\n+\t\t\t\t       \"{x = 0, y = 0, {k = 0, j = 0, d1 = {z = 0, a = 0, {b = 0, c = 0}}}, d2 = {z = 0, a = 0, {b = 0, c = 0}}}\"}\n+\n+    # Arrays are treated as an extra level, while scalars are not.\n+    gdb_print_expr_at_depths \"s10\" {\"{...}\" \\\n+\t\t\t\t\t\"{x = {...}, y = 0, {k = {...}, j = 0, d1 = {...}}, d2 = {...}}\" \\\n+\t\t\t\t\t\"{x = \\\\{0, 0, 0, 0, 0, 0, 0, 0, 0, 0\\\\}, y = 0, {k = \\\\{0, 0, 0, 0, 0, 0, 0, 0, 0, 0\\\\}, j = 0, d1 = {z = 0, a = 0, {b = {...}, c = 0}}}, d2 = {z = 0, a = 0, {b = {...}, c = 0}}}\" \\\n+\t\t\t\t\t\"{x = \\\\{0, 0, 0, 0, 0, 0, 0, 0, 0, 0\\\\}, y = 0, {k = \\\\{0, 0, 0, 0, 0, 0, 0, 0, 0, 0\\\\}, j = 0, d1 = {z = 0, a = 0, {b = \\\\{0, 0, 0, 0, 0, 0, 0, 0, 0, 0\\\\}, c = 0}}}, d2 = {z = 0, a = 0, {b = \\\\{0, 0, 0, 0, 0, 0, 0, 0, 0, 0\\\\}, c = 0}}}\"}\n+\n+    # Strings are treated as scalars.\n+    gdb_print_expr_at_depths \"s11\" {\"{...}\" \\\n+\t\t\t\t\t\"{x = 0, s = \\\"\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\\\\\\000\\\", {z = 0, a = 0}}\"}\n+\n+\n+    if { $lang == \"c++\" } {\n+\tgdb_print_expr_at_depths \"c1\" {\"{...}\" \\\n+\t\t\t\t\t   \"{c1 = 1}\" }\n+\tgdb_print_expr_at_depths \"c2\" { \"{...}\" \"{c2 = 2}\" }\n+\tgdb_print_expr_at_depths \"c3\" { \"{...}\" \\\n+\t\t\t\t\t    \"{<C2> = {...}, c3 = 3}\" \\\n+\t\t\t\t\t    \"{<C2> = {c2 = 2}, c3 = 3}\" }\n+\tgdb_print_expr_at_depths \"c4\" { \"{...}\" \"{c4 = 4}\" }\n+\tgdb_print_expr_at_depths \"c5\" { \"{...}\" \\\n+\t\t\t\t\t    \"{<C4> = {...}, c5 = 5}\" \\\n+\t\t\t\t\t    \"{<C4> = {c4 = 4}, c5 = 5}\" }\n+\tgdb_print_expr_at_depths \"c6\" { \"{...}\" \\\n+\t\t\t\t\t    \"{<C5> = {...}, c6 = 6}\" \\\n+\t\t\t\t\t    \"{<C5> = {<C4> = {...}, c5 = 5}, c6 = 6}\" \\\n+\t\t\t\t\t    \"{<C5> = {<C4> = {c4 = 4}, c5 = 5}, c6 = 6}\" }\n+\tgdb_print_expr_at_depths \"c7\" { \"{...}\" \\\n+\t\t\t\t\t    \"{<C1> = {...}, <C3> = {...}, <C6> = {...}, c7 = 7}\" \\\n+\t\t\t\t\t    \"{<C1> = {c1 = 1}, <C3> = {<C2> = {...}, c3 = 3}, <C6> = {<C5> = {...}, c6 = 6}, c7 = 7}\" \\\n+\t\t\t\t\t    \"{<C1> = {c1 = 1}, <C3> = {<C2> = {c2 = 2}, c3 = 3}, <C6> = {<C5> = {<C4> = {...}, c5 = 5}, c6 = 6}, c7 = 7}\" \\\n+\t\t\t\t\t    \"{<C1> = {c1 = 1}, <C3> = {<C2> = {c2 = 2}, c3 = 3}, <C6> = {<C5> = {<C4> = {c4 = 4}, c5 = 5}, c6 = 6}, c7 = 7}\" }\n+\n+\tgdb_print_expr_at_depths \"v1\" [list \"{...}\" \"{v1 = 1}\" ]\n+\tgdb_print_expr_at_depths \"v2\" [list \"{...}\" \\\n+\t\t\t\t\t    \"{<V1> = {...}, _vptr.V2 = $hex <VTT for V2>, v2 = 2}\" \\\n+\t\t\t\t\t    \"{<V1> = {v1 = 1}, _vptr.V2 = $hex <VTT for V2>, v2 = 2}\" ]\n+\tgdb_print_expr_at_depths \"v3\" [list \"{...}\" \\\n+\t\t\t\t\t    \"{<V1> = {...}, _vptr.V3 = $hex <VTT for V3>, v3 = 3}\" \\\n+\t\t\t\t\t    \"{<V1> = {v1 = 1}, _vptr.V3 = $hex <VTT for V3>, v3 = 3}\" ]\n+\tgdb_print_expr_at_depths \"v4\" [list \"{...}\" \\\n+\t\t\t\t\t    \"{<V2> = {...}, _vptr.V4 = $hex <vtable for V4\\[^>\\]+>, v4 = 4}\" \\\n+\t\t\t\t\t    \"{<V2> = {<V1> = {...}, _vptr.V2 = $hex <VTT for V4>, v2 = 2}, _vptr.V4 = $hex <vtable for V4\\[^>\\]+>, v4 = 4}\" \\\n+\t\t\t\t\t    \"{<V2> = {<V1> = {v1 = 1}, _vptr.V2 = $hex <VTT for V4>, v2 = 2}, _vptr.V4 = $hex <vtable for V4\\[^>\\]+>, v4 = 4}\" ]\n+\tgdb_print_expr_at_depths \"v5\" [list \"{...}\" \\\n+\t\t\t\t\t    \"{<V2> = {...}, _vptr.V5 = $hex <vtable for V5\\[^>\\]+>, v5 = 1}\" \\\n+\t\t\t\t\t    \"{<V2> = {<V1> = {...}, _vptr.V2 = $hex <VTT for V5>, v2 = 2}, _vptr.V5 = $hex <vtable for V5\\[^>\\]+>, v5 = 1}\" \\\n+\t\t\t\t\t    \"{<V2> = {<V1> = {v1 = 1}, _vptr.V2 = $hex <VTT for V5>, v2 = 2}, _vptr.V5 = $hex <vtable for V5\\[^>\\]+>, v5 = 1}\" ]\n+\tgdb_print_expr_at_depths \"v6\" [list \"{...}\" \\\n+\t\t\t\t\t    \"{<V2> = {...}, <V3> = {...}, _vptr.V6 = $hex <vtable for V6\\[^>\\]+>, v6 = 1}\" \\\n+\t\t\t\t\t    \"{<V2> = {<V1> = {...}, _vptr.V2 = $hex <vtable for V6\\[^>\\]+>, v2 = 2}, <V3> = {_vptr.V3 = $hex <VTT for V6>, v3 = 3}, _vptr.V6 = $hex <vtable for V6\\[^>\\]+>, v6 = 1}\" \\\n+\t\t\t\t\t    \"{<V2> = {<V1> = {v1 = 1}, _vptr.V2 = $hex <vtable for V6\\[^>\\]+>, v2 = 2}, <V3> = {_vptr.V3 = $hex <VTT for V6>, v3 = 3}, _vptr.V6 = $hex <vtable for V6\\[^>\\]+>, v6 = 1}\" ]\n+\tgdb_print_expr_at_depths \"v7\" [list \"{...}\" \\\n+\t\t\t\t\t    \"{<V4> = {...}, <V5> = {...}, <V6> = {...}, _vptr.V7 = $hex <vtable for V7\\[^>\\]+>, v7 = 1}\" \\\n+\t\t\t\t\t    \"{<V4> = {<V2> = {...}, _vptr.V4 = $hex <vtable for V7\\[^>\\]+>, v4 = 4}, <V5> = {_vptr.V5 = $hex <vtable for V7\\[^>\\]+>, v5 = 1}, <V6> = {<V3> = {...}, _vptr.V6 = $hex <vtable for V7\\[^>\\]+>, v6 = 1}, _vptr.V7 = $hex <vtable for V7\\[^>\\]+>, v7 = 1}\" \\\n+\t\t\t\t\t    \"{<V4> = {<V2> = {<V1> = {...}, _vptr.V2 = $hex <vtable for V7\\[^>\\]+>, v2 = 2}, _vptr.V4 = $hex <vtable for V7\\[^>\\]+>, v4 = 4}, <V5> = {_vptr.V5 = $hex <vtable for V7\\[^>\\]+>, v5 = 1}, <V6> = {<V3> = {_vptr.V3 = $hex <VTT for V7>, v3 = 3}, _vptr.V6 = $hex <vtable for V7\\[^>\\]+>, v6 = 1}, _vptr.V7 = $hex <vtable for V7\\[^>\\]+>, v7 = 1}\" \\\n+\t\t\t\t\t    \"{<V4> = {<V2> = {<V1> = {v1 = 1}, _vptr.V2 = $hex <vtable for V7\\[^>\\]+>, v2 = 2}, _vptr.V4 = $hex <vtable for V7\\[^>\\]+>, v4 = 4}, <V5> = {_vptr.V5 = $hex <vtable for V7\\[^>\\]+>, v5 = 1}, <V6> = {<V3> = {_vptr.V3 = $hex <VTT for V7>, v3 = 3}, _vptr.V6 = $hex <vtable for V7\\[^>\\]+>, v6 = 1}, _vptr.V7 = $hex <vtable for V7\\[^>\\]+>, v7 = 1}\" ]\n+    }\n+}\n+\n+foreach_with_prefix l $lang {\n+    compile_and_run_tests $l\n+}"
    },
    {
      "sha": "8b0bb8058fe21eb27791c1c00e4d6fdab5f25851",
      "filename": "gdb/testsuite/gdb.fortran/max-depth.exp",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.fortran/max-depth.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.fortran/max-depth.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/max-depth.exp?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -0,0 +1,41 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file tests GDB's handling of 'set print max-depth' for nested\n+# fortran types.\n+\n+load_lib \"fortran.exp\"\n+\n+if { [skip_fortran_tests] } { continue }\n+\n+standard_testfile .f90\n+\n+if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug f90}] } {\n+    return -1\n+}\n+\n+if { ![runto MAIN__] } {\n+    perror \"Could not run to breakpoint `MAIN__'.\"\n+    continue\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"stop-here\"]\n+gdb_continue_to_breakpoint \"stop-here\" \".*stop-here.*\"\n+\n+gdb_print_expr_at_depths \"var\" {\"\\\\(\\\\.\\\\.\\\\.\\\\)\" \\\n+\t\t\t\t    \"\\\\( d = \\\\(\\\\.\\\\.\\\\.\\\\) \\\\)\" \\\n+\t\t\t\t    \"\\\\( d = \\\\( string = 'abcde', c = \\\\(\\\\.\\\\.\\\\.\\\\) \\\\) \\\\)\" \\\n+\t\t\t\t    \"\\\\( d = \\\\( string = 'abcde', c = \\\\( b = \\\\(\\\\.\\\\.\\\\.\\\\), array = \\\\(\\\\.\\\\.\\\\.\\\\) \\\\) \\\\) \\\\)\" \\\n+\t\t\t\t    \"\\\\( d = \\\\( string = 'abcde', c = \\\\( b = \\\\( a = 1 \\\\), array = \\\\(0, 0, 0, 0, 0\\\\) \\\\) \\\\) \\\\)\" }"
    },
    {
      "sha": "9b6f90c20570cfa7b059d0af043cba39d956cb2d",
      "filename": "gdb/testsuite/gdb.fortran/max-depth.f90",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.fortran/max-depth.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.fortran/max-depth.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/max-depth.f90?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -0,0 +1,42 @@\n+! Copyright 2019 Free Software Foundation, Inc.\n+!\n+! This program is free software; you can redistribute it and/or modify\n+! it under the terms of the GNU General Public License as published by\n+! the Free Software Foundation; either version 2 of the License, or\n+! (at your option) any later version.\n+!\n+! This program is distributed in the hope that it will be useful,\n+! but WITHOUT ANY WARRANTY; without even the implied warranty of\n+! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+! GNU General Public License for more details.\n+!\n+! You should have received a copy of the GNU General Public License\n+! along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+program max_depth_test\n+  type :: s1\n+     integer :: a\n+  end type s1\n+\n+  type :: s2\n+     type (s1) :: b\n+     integer :: array (5)\n+  end type s2\n+\n+  type :: s3\n+     character(5) :: string\n+     type (s2) :: c\n+  end type s3\n+\n+  type :: s4\n+     type (s3) :: d\n+  end type s4\n+\n+  logical :: l\n+  type (s4) :: var\n+\n+  var%d%c%b%a = 1\n+  var%d%c%array = 0\n+  var%d%string = \"abcde\"\n+  l = .FALSE.\t\t\t\t\t! stop-here\n+end program max_depth_test"
    },
    {
      "sha": "0f8ba9ab83f0b51511fd204fb99ce61aa3382a5c",
      "filename": "gdb/testsuite/gdb.go/max-depth.exp",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.go/max-depth.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.go/max-depth.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.go/max-depth.exp?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -0,0 +1,40 @@\n+# This testcase is part of GDB, the GNU debugger.\n+\n+# Copyright 2019 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test the use of 'set prinnt max-depth' when printing go structures.\n+\n+load_lib \"go.exp\"\n+\n+if { [skip_go_tests] } { continue }\n+\n+standard_testfile .go\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile} {debug go}] } {\n+    return -1\n+}\n+\n+if { [go_runto_main] < 0 } {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"Break here\"]\n+gdb_continue_to_breakpoint \"run to breakpoint\" \".*Break here.*\"\n+\n+gdb_print_expr_at_depths \"s1\" [list \"{...}\" \\\n+\t\t\t\t    \"{m_struct = {...}, m_string = $hex \\\"hello world\\\"}\" \\\n+\t\t\t\t    \"{m_struct = {m_a = 3, m_b = 7}, m_string = $hex \\\"hello world\\\"}\"]"
    },
    {
      "sha": "6dbfc22b84dc708b0425a92e74197a408ed65db7",
      "filename": "gdb/testsuite/gdb.go/max-depth.go",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.go/max-depth.go",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.go/max-depth.go",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.go/max-depth.go?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2019 Free Software Foundation, Inc.\n+//\n+// This program is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3 of the License, or\n+// (at your option) any later version.\n+//\n+// This program is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package main\n+\n+import \"fmt\"\n+\n+type S1 struct {\n+     m_a int\n+     m_b int\n+}\n+\n+type S2 struct {\n+     m_struct S1\n+     m_string string\n+}\n+\n+func main () {\n+  var s1 S2\n+  var i int\n+\n+  s1.m_string = \"hello world\"\n+  s1.m_struct.m_a = 3\n+  s1.m_struct.m_b = 7\n+\n+  i = 0           // Break here.\n+  fmt.Println (\"Got: %d, %d, %d, %s\", i, s1.m_struct.m_a,\n+               s1.m_struct.m_b, s1.m_string)\n+}"
    },
    {
      "sha": "c2fd70ca6326c69b526df9c2c77528d4d7f27609",
      "filename": "gdb/testsuite/gdb.modula2/max-depth.c",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.modula2/max-depth.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.modula2/max-depth.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.modula2/max-depth.c?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -0,0 +1,45 @@\n+/* Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <string.h>\n+\n+struct S1\n+{\n+  int a;\n+  int b;\n+};\n+\n+struct S2\n+{\n+  char str[10];\n+  struct S1 s1;\n+};\n+\n+struct S3\n+{\n+  struct S2 s2;\n+};\n+\n+int\n+main ()\n+{\n+  struct S3 s3;\n+\n+  memcpy (s3.s2.str, \"abcde\\0fghi\", 10);\n+  s3.s2.s1.a = 3;\n+  s3.s2.s1.b = 4;\n+\n+  return 0;\t/* Break here.  */\n+}"
    },
    {
      "sha": "ac7edfe8f72954909056177e4dfbf6c4d01215e0",
      "filename": "gdb/testsuite/gdb.modula2/max-depth.exp",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.modula2/max-depth.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.modula2/max-depth.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.modula2/max-depth.exp?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -0,0 +1,37 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test the use of 'set prinnt max-depth' when printing modula2 structures.\n+\n+standard_testfile\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug quiet}]} {\n+    return -1\n+}\n+\n+if { ![runto_main] } then {\n+    fail \"can't run to main\"\n+    return -1\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"Break here\"]\n+gdb_continue_to_breakpoint \"breakpoint\"\n+\n+gdb_test \"set lang modula-2\" \".*does not match.*\" \"switch to modula-2\"\n+\n+gdb_print_expr_at_depths \"s3\" [list \"{...}\" \\\n+\t\t\t\t    \"{s2 = {...}}\" \\\n+\t\t\t\t    \"{s2 = {str = \\\"abcde\\\\\\\\000fghi\\\", s1 = {...}}}\" \\\n+\t\t\t\t    \"{s2 = {str = \\\"abcde\\\\\\\\000fghi\\\", s1 = {a = 3, b = 4}}}\"]"
    },
    {
      "sha": "ebb2074ce87f781e4c430a3b38f5ae8bf3426e2e",
      "filename": "gdb/testsuite/gdb.python/py-format-string.exp",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.python/py-format-string.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.python/py-format-string.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-format-string.exp?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -672,6 +672,26 @@ proc test_max_elements {} {\n   }\n }\n \n+# Test the max_depth option for gdb.Value.format_string.\n+proc test_max_depth {} {\n+    set opts \"max_depth=-1\"\n+    with_test_prefix $opts {\n+\tcheck_format_string \"a_struct_with_union\" $opts\n+    }\n+    set opts \"max_depth=0\"\n+    with_test_prefix $opts {\n+\tcheck_format_string \"a_struct_with_union\" $opts \"\\\\{\\.\\.\\.\\\\}\"\n+    }\n+    set opts \"max_depth=1\"\n+    with_test_prefix $opts {\n+\tcheck_format_string \"a_struct_with_union\" $opts \"\\\\{the_union = \\\\{\\.\\.\\.\\\\}\\\\}\"\n+    }\n+    set opts \"max_depth=2\"\n+    with_test_prefix $opts {\n+\tcheck_format_string \"a_struct_with_union\" $opts\n+    }\n+}\n+\n # Test the repeat_threshold option for gdb.Value.format_string.\n proc test_repeat_threshold {} {\n   global current_lang\n@@ -925,6 +945,7 @@ proc test_all_common {} {\n   test_actual_objects\n   test_static_members\n   test_max_elements\n+  test_max_depth\n   test_repeat_threshold\n   test_format\n   # Multiple options mixed together."
    },
    {
      "sha": "94107c0180d44c9d04cc4d51df3ce74bcc8e808a",
      "filename": "gdb/testsuite/gdb.python/py-nested-maps.c",
      "status": "added",
      "additions": 130,
      "deletions": 0,
      "changes": 130,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.python/py-nested-maps.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.python/py-nested-maps.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-nested-maps.c?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -0,0 +1,130 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see  <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#define FIXED_MAP_SIZE 10\n+\n+struct key_t\n+{\n+  int a;\n+  int b;\n+};\n+\n+struct value_t\n+{\n+  int x;\n+  int y;\n+  int z;\n+};\n+\n+struct map_t\n+{\n+  const char *name;\n+  int length;\n+  struct key_t *keys;\n+  struct value_t *values;\n+\n+  /* This field is used only by the pretty printer.  */\n+  int show_header;\n+};\n+\n+struct map_map_t\n+{\n+  int length;\n+  struct map_t **values;\n+\n+  /* This field is used only by the pretty printer.  */\n+  int show_header;\n+};\n+\n+struct map_t *\n+create_map (const char *name)\n+{\n+  struct map_t *m = malloc (sizeof (struct map_t));\n+  m->name = strdup (name);\n+  m->length = 0;\n+  m->keys = NULL;\n+  m->values = NULL;\n+  m->show_header = 0;\n+}\n+\n+void\n+add_map_element (struct map_t *m, struct key_t k, struct value_t v)\n+{\n+  if (m->length == 0)\n+    {\n+      m->keys = malloc (sizeof (struct key_t) * FIXED_MAP_SIZE);\n+      m->values = malloc (sizeof (struct value_t) * FIXED_MAP_SIZE);\n+    }\n+\n+  m->keys[m->length] = k;\n+  m->values[m->length] = v;\n+  m->length++;\n+}\n+\n+struct map_map_t *\n+create_map_map (void)\n+{\n+  struct map_map_t *mm = malloc (sizeof (struct map_map_t));\n+  mm->length = 0;\n+  mm->values = NULL;\n+  mm->show_header = 0;\n+}\n+\n+void\n+add_map_map_element (struct map_map_t *mm, struct map_t *map)\n+{\n+  if (mm->length == 0)\n+    mm->values = malloc (sizeof (struct map_t *) * FIXED_MAP_SIZE);\n+\n+  mm->values[mm->length] = map;\n+  mm->length++;\n+}\n+\n+int\n+main (void)\n+{\n+  struct map_t *m1 = create_map (\"m1\");\n+  struct key_t k1 = {3, 4};\n+  struct key_t k2 = {4, 5};\n+  struct key_t k3 = {5, 6};\n+  struct key_t k4 = {6, 7};\n+  struct key_t k5 = {7, 8};\n+  struct key_t k6 = {8, 9};\n+  struct value_t v1 = {0, 1, 2};\n+  struct value_t v2 = {3, 4, 5};\n+  struct value_t v3 = {6, 7, 8};\n+  struct value_t v4 = {9, 0, 1};\n+  struct value_t v5 = {2, 3, 4};\n+  struct value_t v6 = {5, 6, 7};\n+  add_map_element (m1, k1, v1);\n+  add_map_element (m1, k2, v2);\n+  add_map_element (m1, k3, v3);\n+\n+  struct map_t *m2 = create_map (\"m2\");\n+  add_map_element (m2, k4, v4);\n+  add_map_element (m2, k5, v5);\n+  add_map_element (m2, k6, v6);\n+\n+  struct map_map_t *mm = create_map_map ();\n+  add_map_map_element (mm, m1);\n+  add_map_map_element (mm, m2);\n+\n+  return 0; /* Break here.  */\n+}"
    },
    {
      "sha": "81dd99ca2c9600eb85e4985d91862c274ed623a5",
      "filename": "gdb/testsuite/gdb.python/py-nested-maps.exp",
      "status": "added",
      "additions": 238,
      "deletions": 0,
      "changes": 238,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.python/py-nested-maps.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.python/py-nested-maps.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-nested-maps.exp?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -0,0 +1,238 @@\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This tests GDB's python pretty printing of nested map like\n+# structures using structures as keys and values, it then tests how\n+# 'set print max-depth' affects this printing.\n+\n+load_lib gdb-python.exp\n+\n+standard_testfile\n+\n+# Start with a fresh gdb.\n+gdb_exit\n+gdb_start\n+\n+# Skip all tests if Python scripting is not enabled.\n+if { [skip_python_tests] } { continue }\n+\n+standard_testfile\n+\n+if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug}] } {\n+    return -1\n+}\n+\n+if ![runto_main ] then {\n+    return -1\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"Break here\"]\n+gdb_continue_to_breakpoint \"run to testing point\" \".*Break here.*\"\n+\n+set remote_python_file [gdb_remote_download host \\\n+\t\t\t    ${srcdir}/${subdir}/${testfile}.py]\n+gdb_test_no_output \"source ${remote_python_file}\" \"load python file\"\n+\n+# Test printing with 'set print pretty off'.\n+gdb_test_no_output \"set print pretty off\"\n+with_test_prefix \"pretty=off\" {\n+    gdb_print_expr_at_depths \"*m1\" \\\n+\t[list \\\n+\t     \"\\{\\\\.\\\\.\\\\.\\}\" \\\n+\t     \"\\{\\\\\\[\\{a = 3, b = 4\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 4, b = 5\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 5, b = 6\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\\}\" \\\n+\t     \"\\{\\\\\\[\\{a = 3, b = 4\\}\\\\\\] = \\{x = 0, y = 1, z = 2\\}, \\\\\\[\\{a = 4, b = 5\\}\\\\\\] = \\{x = 3, y = 4, z = 5\\}, \\\\\\[\\{a = 5, b = 6\\}\\\\\\] = \\{x = 6, y = 7, z = 8\\}\\}\" \\\n+\t    ]\n+\n+    gdb_print_expr_at_depths \"*mm\" \\\n+\t[list \\\n+\t     \"\\{\\\\.\\\\.\\\\.\\}\" \\\n+\t     \"\\{\\\\\\[$hex \\\"m1\\\"\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[$hex \\\"m2\\\"\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\\}\" \\\n+\t     \"\\{\\\\\\[$hex \\\"m1\\\"\\\\\\] = \\{\\\\\\[\\{a = 3, b = 4\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 4, b = 5\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 5, b = 6\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\\}, \\\\\\[$hex \\\"m2\\\"\\\\\\] = \\{\\\\\\[\\{a = 6, b = 7\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 7, b = 8\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 8, b = 9\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\\}\\}\" \\\n+\t     \"\\{\\\\\\[$hex \\\"m1\\\"\\\\\\] = \\{\\\\\\[\\{a = 3, b = 4\\}\\\\\\] = \\{x = 0, y = 1, z = 2\\}, \\\\\\[\\{a = 4, b = 5\\}\\\\\\] = \\{x = 3, y = 4, z = 5\\}, \\\\\\[\\{a = 5, b = 6\\}\\\\\\] = \\{x = 6, y = 7, z = 8\\}\\}, \\\\\\[$hex \\\"m2\\\"\\\\\\] = \\{\\\\\\[\\{a = 6, b = 7\\}\\\\\\] = \\{x = 9, y = 0, z = 1\\}, \\\\\\[\\{a = 7, b = 8\\}\\\\\\] = \\{x = 2, y = 3, z = 4\\}, \\\\\\[\\{a = 8, b = 9\\}\\\\\\] = \\{x = 5, y = 6, z = 7\\}\\}\\}\" \\\n+\t    ]\n+}\n+\n+# Now again, but with 'set print pretty on'.\n+gdb_test_no_output \"set print pretty on\"\n+with_test_prefix \"pretty=on\" {\n+    gdb_print_expr_at_depths \"*m1\" \\\n+\t[list \\\n+\t     \"\\{\\\\.\\\\.\\\\.\\}\" \\\n+\t     [multi_line \\\n+\t\t  \" = \\{\" \\\n+\t\t  \"  \\\\\\[\\{\" \\\n+\t\t  \"    a = 3,\" \\\n+\t\t  \"    b = 4\" \\\n+\t\t  \"  \\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\},\" \\\n+\t\t  \"  \\\\\\[\\{\" \\\n+\t\t  \"    a = 4,\" \\\n+\t\t  \"    b = 5\" \\\n+\t\t  \"  \\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\},\" \\\n+\t\t  \"  \\\\\\[\\{\" \\\n+\t\t  \"    a = 5,\" \\\n+\t\t  \"    b = 6\" \\\n+\t\t  \"  \\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\" \\\n+\t\t  \"\\}\" ] \\\n+\t     [multi_line \\\n+\t\t  \" = \\{\" \\\n+\t\t  \"  \\\\\\[\\{\" \\\n+\t\t  \"    a = 3,\" \\\n+\t\t  \"    b = 4\" \\\n+\t\t  \"  \\}\\\\\\] = \\{\" \\\n+\t\t  \"    x = 0,\" \\\n+\t\t  \"    y = 1,\" \\\n+\t\t  \"    z = 2\" \\\n+\t\t  \"  \\},\" \\\n+\t\t  \"  \\\\\\[\\{\" \\\n+\t\t  \"    a = 4,\" \\\n+\t\t  \"    b = 5\" \\\n+\t\t  \"  \\}\\\\\\] = \\{\" \\\n+\t\t  \"    x = 3,\" \\\n+\t\t  \"    y = 4,\" \\\n+\t\t  \"    z = 5\" \\\n+\t\t  \"  \\},\" \\\n+\t\t  \"  \\\\\\[\\{\" \\\n+\t\t  \"    a = 5,\" \\\n+\t\t  \"    b = 6\" \\\n+\t\t  \"  \\}\\\\\\] = \\{\" \\\n+\t\t  \"    x = 6,\" \\\n+\t\t  \"    y = 7,\" \\\n+\t\t  \"    z = 8\" \\\n+\t\t  \"  \\}\" \\\n+\t\t  \"\\}\" ] \\\n+\t    ]\n+\n+     gdb_print_expr_at_depths \"*mm\" \\\n+\t[list \\\n+\t     \"\\{\\\\.\\\\.\\\\.\\}\" \\\n+\t     [multi_line \\\n+\t\t  \" = \\{\" \\\n+\t\t  \"  \\\\\\[$hex \\\"m1\\\"\\\\\\] = \\{\\\\.\\\\.\\\\.\\},\" \\\n+\t\t  \"  \\\\\\[$hex \\\"m2\\\"\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\" \\\n+\t\t  \"\\}\" ] \\\n+\t     [multi_line \\\n+\t\t  \" = \\{\" \\\n+\t\t  \"  \\\\\\[$hex \\\"m1\\\"\\\\\\] = \\{\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 3,\" \\\n+\t\t  \"      b = 4\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\},\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 4,\" \\\n+\t\t  \"      b = 5\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\},\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 5,\" \\\n+\t\t  \"      b = 6\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\" \\\n+\t\t  \"  \\},\" \\\n+\t\t  \"  \\\\\\[$hex \\\"m2\\\"\\\\\\] = \\{\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 6,\" \\\n+\t\t  \"      b = 7\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\},\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 7,\" \\\n+\t\t  \"      b = 8\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\},\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 8,\" \\\n+\t\t  \"      b = 9\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\" \\\n+\t\t  \"  \\}\" \\\n+\t\t  \"\\}\" ] \\\n+\t     [multi_line \\\n+\t\t  \" = \\{\" \\\n+\t\t  \"  \\\\\\[$hex \\\"m1\\\"\\\\\\] = \\{\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 3,\" \\\n+\t\t  \"      b = 4\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\" \\\n+\t\t  \"      x = 0,\" \\\n+\t\t  \"      y = 1,\" \\\n+\t\t  \"      z = 2\" \\\n+\t\t  \"    \\},\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 4,\" \\\n+\t\t  \"      b = 5\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\" \\\n+\t\t  \"      x = 3,\" \\\n+\t\t  \"      y = 4,\" \\\n+\t\t  \"      z = 5\" \\\n+\t\t  \"    \\},\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 5,\" \\\n+\t\t  \"      b = 6\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\" \\\n+\t\t  \"      x = 6,\" \\\n+\t\t  \"      y = 7,\" \\\n+\t\t  \"      z = 8\" \\\n+\t\t  \"    \\}\" \\\n+\t\t  \"  \\},\" \\\n+\t\t  \"  \\\\\\[$hex \\\"m2\\\"\\\\\\] = \\{\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 6,\" \\\n+\t\t  \"      b = 7\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\" \\\n+\t\t  \"      x = 9,\" \\\n+\t\t  \"      y = 0,\" \\\n+\t\t  \"      z = 1\" \\\n+\t\t  \"    \\},\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 7,\" \\\n+\t\t  \"      b = 8\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\" \\\n+\t\t  \"      x = 2,\" \\\n+\t\t  \"      y = 3,\" \\\n+\t\t  \"      z = 4\" \\\n+\t\t  \"    \\},\" \\\n+\t\t  \"    \\\\\\[\\{\" \\\n+\t\t  \"      a = 8,\" \\\n+\t\t  \"      b = 9\" \\\n+\t\t  \"    \\}\\\\\\] = \\{\" \\\n+\t\t  \"      x = 5,\" \\\n+\t\t  \"      y = 6,\" \\\n+\t\t  \"      z = 7\" \\\n+\t\t  \"    \\}\" \\\n+\t\t  \"  \\}\" \\\n+\t\t  \"\\}\" ] \\\n+\t    ]\n+}\n+\n+# Test printing with 'set print pretty off', but this time display a\n+# top level string (returned from the to_string method) as part of the\n+# printed value.\n+gdb_test_no_output \"set mm->show_header=1\"\n+gdb_test_no_output \"set m1->show_header=1\"\n+gdb_test_no_output \"set m2->show_header=1\"\n+with_test_prefix \"headers=on\" {\n+    gdb_test_no_output \"set print pretty off\"\n+    with_test_prefix \"pretty=off\" {\n+\tgdb_print_expr_at_depths \"*m1\" \\\n+\t    [list \\\n+\t\t \"\\{\\\\.\\\\.\\\\.\\}\" \\\n+\t\t \"pp_map = \\{\\\\\\[\\{a = 3, b = 4\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 4, b = 5\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 5, b = 6\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\\}\" \\\n+\t\t \"pp_map = \\{\\\\\\[\\{a = 3, b = 4\\}\\\\\\] = \\{x = 0, y = 1, z = 2\\}, \\\\\\[\\{a = 4, b = 5\\}\\\\\\] = \\{x = 3, y = 4, z = 5\\}, \\\\\\[\\{a = 5, b = 6\\}\\\\\\] = \\{x = 6, y = 7, z = 8\\}\\}\" \\\n+\t\t]\n+\n+\tgdb_print_expr_at_depths \"*mm\" \\\n+\t    [list \\\n+\t\t \"\\{\\\\.\\\\.\\\\.\\}\" \\\n+\t\t \"pp_map_map = \\{\\\\\\[$hex \\\"m1\\\"\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[$hex \\\"m2\\\"\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\\}\" \\\n+\t\t \"pp_map_map = \\{\\\\\\[$hex \\\"m1\\\"\\\\\\] = pp_map = \\{\\\\\\[\\{a = 3, b = 4\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 4, b = 5\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 5, b = 6\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\\}, \\\\\\[$hex \\\"m2\\\"\\\\\\] = pp_map = \\{\\\\\\[\\{a = 6, b = 7\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 7, b = 8\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}, \\\\\\[\\{a = 8, b = 9\\}\\\\\\] = \\{\\\\.\\\\.\\\\.\\}\\}\\}\" \\\n+\t\t \"pp_map_map = \\{\\\\\\[$hex \\\"m1\\\"\\\\\\] = pp_map = \\{\\\\\\[\\{a = 3, b = 4\\}\\\\\\] = \\{x = 0, y = 1, z = 2\\}, \\\\\\[\\{a = 4, b = 5\\}\\\\\\] = \\{x = 3, y = 4, z = 5\\}, \\\\\\[\\{a = 5, b = 6\\}\\\\\\] = \\{x = 6, y = 7, z = 8\\}\\}, \\\\\\[$hex \\\"m2\\\"\\\\\\] = pp_map = \\{\\\\\\[\\{a = 6, b = 7\\}\\\\\\] = \\{x = 9, y = 0, z = 1\\}, \\\\\\[\\{a = 7, b = 8\\}\\\\\\] = \\{x = 2, y = 3, z = 4\\}, \\\\\\[\\{a = 8, b = 9\\}\\\\\\] = \\{x = 5, y = 6, z = 7\\}\\}\\}\" \\\n+\t\t]\n+    }\n+}"
    },
    {
      "sha": "d3fdf59533dbe4633280329f0be8e962a03be990",
      "filename": "gdb/testsuite/gdb.python/py-nested-maps.py",
      "status": "added",
      "additions": 135,
      "deletions": 0,
      "changes": 135,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.python/py-nested-maps.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/gdb.python/py-nested-maps.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-nested-maps.py?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -0,0 +1,135 @@\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file is part of the GDB testsuite.  It tests GDB's printing of\n+# nested map like structures.\n+\n+import re\n+import gdb\n+\n+def _iterator1 (pointer, len):\n+    while len > 0:\n+        map = pointer.dereference()\n+        yield ('', map['name'])\n+        yield ('', map.dereference())\n+        pointer += 1\n+        len -= 1\n+\n+def _iterator2 (pointer1, pointer2, len):\n+    while len > 0:\n+        yield (\"\", pointer1.dereference())\n+        yield (\"\", pointer2.dereference())\n+        pointer1 += 1\n+        pointer2 += 1\n+        len -= 1\n+\n+class pp_map (object):\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        if (self.val['show_header'] == 0):\n+            return None\n+        else:\n+            return \"pp_map\"\n+\n+    def children(self):\n+        return _iterator2(self.val['keys'],\n+                          self.val['values'],\n+                          self.val['length'])\n+\n+    def display_hint (self):\n+        return 'map'\n+\n+class pp_map_map (object):\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        if (self.val['show_header'] == 0):\n+            return None\n+        else:\n+            return \"pp_map_map\"\n+\n+    def children(self):\n+        return _iterator1(self.val['values'],\n+                          self.val['length'])\n+\n+    def display_hint (self):\n+        return 'map'\n+\n+def lookup_function (val):\n+    \"Look-up and return a pretty-printer that can print val.\"\n+\n+    # Get the type.\n+    type = val.type\n+\n+    # If it points to a reference, get the reference.\n+    if type.code == gdb.TYPE_CODE_REF:\n+        type = type.target ()\n+\n+    # Get the unqualified type, stripped of typedefs.\n+    type = type.unqualified ().strip_typedefs ()\n+\n+    # Get the type name.\n+    typename = type.tag\n+\n+    if typename == None:\n+        return None\n+\n+    # Iterate over local dictionary of types to determine\n+    # if a printer is registered for that type.  Return an\n+    # instantiation of the printer if found.\n+    for function in pretty_printers_dict:\n+        if function.match (typename):\n+            return pretty_printers_dict[function] (val)\n+\n+    # Cannot find a pretty printer.  Return None.\n+    return None\n+\n+# Lookup a printer for VAL in the typedefs dict.\n+def lookup_typedefs_function (val):\n+    \"Look-up and return a pretty-printer that can print val (typedefs).\"\n+\n+    # Get the type.\n+    type = val.type\n+\n+    if type == None or type.name == None or type.code != gdb.TYPE_CODE_TYPEDEF:\n+        return None\n+\n+    # Iterate over local dictionary of typedef types to determine if a\n+    # printer is registered for that type.  Return an instantiation of\n+    # the printer if found.\n+    for function in typedefs_pretty_printers_dict:\n+        if function.match (type.name):\n+            return typedefs_pretty_printers_dict[function] (val)\n+\n+    # Cannot find a pretty printer.\n+    return None\n+\n+def register_pretty_printers ():\n+    pretty_printers_dict[re.compile ('^struct map_t$')] = pp_map\n+    pretty_printers_dict[re.compile ('^map_t$')] = pp_map\n+    pretty_printers_dict[re.compile ('^struct map_map_t$')] = pp_map_map\n+    pretty_printers_dict[re.compile ('^map_map_t$')] = pp_map_map\n+\n+# Dict for struct types with typedefs fully stripped.\n+pretty_printers_dict = {}\n+# Dict for typedef types.\n+typedefs_pretty_printers_dict = {}\n+\n+register_pretty_printers ()\n+gdb.pretty_printers.append (lookup_function)\n+gdb.pretty_printers.append (lookup_typedefs_function)"
    },
    {
      "sha": "25d370ebb52832af97287a3b9e1d807d35960bd4",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -1390,6 +1390,36 @@ proc gdb_test_stdio {command inferior_pattern {gdb_pattern \"\"} {message \"\"}} {\n     return $res\n }\n \n+# get_print_expr_at_depths EXP OUTPUTS\n+#\n+# Used for testing 'set print max-depth'.  Prints the expression EXP\n+# with 'set print max-depth' set to various depths.  OUTPUTS is a list\n+# of `n` different patterns to match at each of the depths from 0 to\n+# (`n` - 1).\n+#\n+# This proc does one final check with the max-depth set to 'unlimited'\n+# which is tested against the last pattern in the OUTPUTS list.  The\n+# OUTPUTS list is therefore required to match every depth from 0 to a\n+# depth where the whole of EXP is printed with no ellipsis.\n+#\n+# This proc leaves the 'set print max-depth' set to 'unlimited'.\n+proc gdb_print_expr_at_depths {exp outputs} {\n+    for { set depth 0 } { $depth <= [llength $outputs] } { incr depth } {\n+\tif { $depth == [llength $outputs] } {\n+\t    set expected_result [lindex $outputs [expr [llength $outputs] - 1]]\n+\t    set depth_string \"unlimited\"\n+\t} else {\n+\t    set expected_result [lindex $outputs $depth]\n+\t    set depth_string $depth\n+\t}\n+\n+\twith_test_prefix \"exp='$exp': depth=${depth_string}\" {\n+\t    gdb_test_no_output \"set print max-depth ${depth_string}\"\n+\t    gdb_test \"p $exp\" \"$expected_result\"\n+\t}\n+    }\n+}\n+\n \f\n \n # Issue a PASS and return true if evaluating CONDITION in the caller's"
    },
    {
      "sha": "b9d8878c8e44f25e707d97ff4da9dcaa59294551",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 56,
      "deletions": 1,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -88,6 +88,7 @@ static void val_print_type_code_flags (struct type *type,\n \t\t\t\t       struct ui_file *stream);\n \n #define PRINT_MAX_DEFAULT 200\t/* Start print_max off at this value.  */\n+#define PRINT_MAX_DEPTH_DEFAULT 20\t/* Start print_max_depth off at this value. */\n \n struct value_print_options user_print_options =\n {\n@@ -109,7 +110,8 @@ struct value_print_options user_print_options =\n   1,\t\t\t\t/* pascal_static_field_print */\n   0,\t\t\t\t/* raw */\n   0,\t\t\t\t/* summary */\n-  1\t\t\t\t/* symbol_print */\n+  1,\t\t\t\t/* symbol_print */\n+  PRINT_MAX_DEPTH_DEFAULT\t/* max_depth */\n };\n \n /* Initialize *OPTS to be a copy of the user print options.  */\n@@ -281,6 +283,18 @@ val_print_scalar_type_p (struct type *type)\n     }\n }\n \n+/* A helper function for val_print.  When printing with limited depth we\n+   want to print string and scalar arguments, but not aggregate arguments.\n+   This function distinguishes between the two.  */\n+\n+static bool\n+val_print_scalar_or_string_type_p (struct type *type,\n+\t\t\t\t   const struct language_defn *language)\n+{\n+  return (val_print_scalar_type_p (type)\n+\t  || language->la_is_string_type_p (type));\n+}\n+\n /* See its definition in value.h.  */\n \n int\n@@ -1054,6 +1068,11 @@ val_print (struct type *type, LONGEST embedded_offset,\n       return;\n     }\n \n+  /* If this value is too deep then don't print it.  */\n+  if (!val_print_scalar_or_string_type_p (type, language)\n+      && val_print_check_max_depth (stream, recurse, options, language))\n+    return;\n+\n   try\n     {\n       language->la_val_print (type, embedded_offset, address,\n@@ -1066,6 +1085,23 @@ val_print (struct type *type, LONGEST embedded_offset,\n     }\n }\n \n+/* See valprint.h.  */\n+\n+bool\n+val_print_check_max_depth (struct ui_file *stream, int recurse,\n+\t\t\t   const struct value_print_options *options,\n+\t\t\t   const struct language_defn *language)\n+{\n+  if (options->max_depth > -1 && recurse >= options->max_depth)\n+    {\n+      gdb_assert (language->la_struct_too_deep_ellipsis != NULL);\n+      fputs_filtered (language->la_struct_too_deep_ellipsis, stream);\n+      return true;\n+    }\n+\n+  return false;\n+}\n+\n /* Check whether the value VAL is printable.  Return 1 if it is;\n    return 0 and print an appropriate error message to STREAM according to\n    OPTIONS if it is not.  */\n@@ -2859,6 +2895,15 @@ val_print_string (struct type *elttype, const char *encoding,\n \n   return (bytes_read / width);\n }\n+\n+/* Handle 'show print max-depth'.  */\n+\n+static void\n+show_print_max_depth (struct ui_file *file, int from_tty,\n+\t\t      struct cmd_list_element *c, const char *value)\n+{\n+  fprintf_filtered (file, _(\"Maximum print depth is %s.\\n\"), value);\n+}\n \f\n \n /* The 'set input-radix' command writes to this auxiliary variable.\n@@ -3152,4 +3197,14 @@ Use 'show input-radix' or 'show output-radix' to independently show each.\"),\n Set printing of array indexes.\"), _(\"\\\n Show printing of array indexes\"), NULL, NULL, show_print_array_indexes,\n                            &setprintlist, &showprintlist);\n+\n+  add_setshow_zuinteger_unlimited_cmd (\"max-depth\", class_support,\n+                            &user_print_options.max_depth, _(\"\\\n+Set maximum print depth for nested structures, unions and arrays.\"), _(\"\\\n+Show maximum print depth for nested structures, unions, and arrays.\"), _(\"\\\n+When structures, unions, or arrays are nested beyond this depth then they\\n\\\n+will be replaced with either '{...}' or '(...)' depending on the language.\\n\\\n+Use 'set print max-depth unlimited' to print the complete structure.\"),\n+\t\t\t\t       NULL, show_print_max_depth,\n+\t\t\t\t       &setprintlist, &showprintlist);\n }"
    },
    {
      "sha": "e5cc9477987f9ee85b897b83ca9c357657172cf8",
      "filename": "gdb/valprint.h",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/valprint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e62ab400ff96334c92e5acf0a462cb9dc0d19a7/gdb/valprint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.h?ref=2e62ab400ff96334c92e5acf0a462cb9dc0d19a7",
      "patch": "@@ -92,6 +92,9 @@ struct value_print_options\n   /* If nonzero, when printing a pointer, print the symbol to which it\n      points, if any.  */\n   int symbol_print;\n+\n+  /* Maximum print depth when printing nested aggregates.  */\n+  int max_depth;\n };\n \n /* The global print options set by the user.  In general this should\n@@ -246,4 +249,13 @@ extern int build_address_symbolic (struct gdbarch *,\n \t\t\t\t   int *line,\n \t\t\t\t   int *unmapped);\n \n+/* Check to see if RECURSE is greater than or equal to the allowed\n+   printing max-depth (see 'set print max-depth').  If it is then print an\n+   ellipsis expression to STREAM and return true, otherwise return false.\n+   LANGUAGE determines what type of ellipsis expression is printed.  */\n+\n+extern bool val_print_check_max_depth (struct ui_file *stream, int recurse,\n+\t\t\t\t       const struct value_print_options *opts,\n+\t\t\t\t       const struct language_defn *language);\n+\n #endif"
    }
  ]
}