{
  "sha": "03cc72491b8139cffaf2c6ce9db84ebc17205323",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDNjYzcyNDkxYjgxMzljZmZhZjJjNmNlOWRiODRlYmMxNzIwNTMyMw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:05Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:05Z"
    },
    "message": "gdb: add type::is_gnu_ifunc / type::set_is_gnu_ifunc\n\nAdd the `is_gnu_ifunc` and `set_is_gnu_ifunc` methods on `struct type`, in\norder to remove the `TYPE_GNU_IFUNC` macro.  In this patch, the macro is\nchanged to use the getter, so all the call sites of the macro that are\nused as a setter are changed to use the setter method directly.  The\nnext patch will remove the macro completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <is_gnu_ifunc, set_is_gnu_ifunc>: New methods.\n\t(TYPE_GNU_IFUNC): Use type::is_gnu_ifunc, change all write call sites to\n\tuse type::set_is_gnu_ifunc.\n\nChange-Id: Ic23ba8c5b8e589d9fc368385111aa16a94e014e2",
    "tree": {
      "sha": "9e377bf2e96a097223f90e03ffd24d794f5720d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9e377bf2e96a097223f90e03ffd24d794f5720d2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/03cc72491b8139cffaf2c6ce9db84ebc17205323",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03cc72491b8139cffaf2c6ce9db84ebc17205323",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/03cc72491b8139cffaf2c6ce9db84ebc17205323",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03cc72491b8139cffaf2c6ce9db84ebc17205323/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3f46044c09fc5a4982f4ad99aff5b7af60d3f186",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f46044c09fc5a4982f4ad99aff5b7af60d3f186",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3f46044c09fc5a4982f4ad99aff5b7af60d3f186"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 21,
    "deletions": 3
  },
  "files": [
    {
      "sha": "0c78d2aed3b60df904a3bb2d16e58be7d58d1620",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03cc72491b8139cffaf2c6ce9db84ebc17205323/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03cc72491b8139cffaf2c6ce9db84ebc17205323/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=03cc72491b8139cffaf2c6ce9db84ebc17205323",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <is_gnu_ifunc, set_is_gnu_ifunc>: New methods.\n+\t(TYPE_GNU_IFUNC): Use type::is_gnu_ifunc, change all write call sites to\n+\tuse type::set_is_gnu_ifunc.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_STUB_SUPPORTED): Remove, replace all"
    },
    {
      "sha": "60d0cdbb8548f42cb25f0758b430cbf79fb4731a",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03cc72491b8139cffaf2c6ce9db84ebc17205323/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03cc72491b8139cffaf2c6ce9db84ebc17205323/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=03cc72491b8139cffaf2c6ce9db84ebc17205323",
      "patch": "@@ -5934,10 +5934,12 @@ objfile_type (struct objfile *objfile)\n   objfile_type->nodebug_text_symbol\n     = init_type (objfile, TYPE_CODE_FUNC, TARGET_CHAR_BIT,\n \t\t \"<text variable, no debug info>\");\n+\n   objfile_type->nodebug_text_gnu_ifunc_symbol\n     = init_type (objfile, TYPE_CODE_FUNC, TARGET_CHAR_BIT,\n \t\t \"<text gnu-indirect-function variable, no debug info>\");\n-  TYPE_GNU_IFUNC (objfile_type->nodebug_text_gnu_ifunc_symbol) = 1;\n+  objfile_type->nodebug_text_gnu_ifunc_symbol->set_is_gnu_ifunc (true);\n+\n   objfile_type->nodebug_got_plt_symbol\n     = init_pointer_type (objfile, gdbarch_addr_bit (gdbarch),\n \t\t\t \"<text from jump slot in .got.plt, no debug info>\","
    },
    {
      "sha": "4a2dc2a0794b6990a043c4302ff7f55516a5f057",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03cc72491b8139cffaf2c6ce9db84ebc17205323/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03cc72491b8139cffaf2c6ce9db84ebc17205323/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=03cc72491b8139cffaf2c6ce9db84ebc17205323",
      "patch": "@@ -238,7 +238,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    determines the final returned function type to be presented to\n    user.  */\n \n-#define TYPE_GNU_IFUNC(t)\t(TYPE_MAIN_TYPE (t)->flag_gnu_ifunc)\n+#define TYPE_GNU_IFUNC(t)\t((t)->is_gnu_ifunc ())\n \n /* * Type owner.  If TYPE_OBJFILE_OWNED is true, the type is owned by\n    the objfile retrieved as TYPE_OBJFILE.  Otherwise, the type is\n@@ -814,7 +814,7 @@ struct main_type\n   unsigned int m_flag_varargs : 1;\n   unsigned int m_flag_vector : 1;\n   unsigned int m_flag_stub_supported : 1;\n-  unsigned int flag_gnu_ifunc : 1;\n+  unsigned int m_flag_gnu_ifunc : 1;\n   unsigned int flag_fixed_instance : 1;\n   unsigned int flag_objfile_owned : 1;\n   unsigned int flag_endianity_not_default : 1;\n@@ -1133,6 +1133,16 @@ struct type\n     this->main_type->m_flag_stub_supported = stub_is_supported;\n   }\n \n+  bool is_gnu_ifunc () const\n+  {\n+    return this->main_type->m_flag_gnu_ifunc;\n+  }\n+\n+  void set_is_gnu_ifunc (bool is_gnu_ifunc)\n+  {\n+    this->main_type->m_flag_gnu_ifunc = is_gnu_ifunc;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;"
    }
  ]
}