{
  "sha": "86ef42bd7333091725991ba568807fcec0a2c1d1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODZlZjQyYmQ3MzMzMDkxNzI1OTkxYmE1Njg4MDdmY2VjMGEyYzFkMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-12-18T15:48:36Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-12-18T18:21:40Z"
    },
    "message": "Run fixed_points.exp with -fgnat-encodings=minimal\n\nThis changes the test case gdb.ada/fixed_points.exp to also be run\nwith -fgnat-encodings=minimal.  This change pointed out that the test\ncase had a few incorrect expected outputs; these are fixed as well.\n\nNote that the Overprecise_Object test only uses the non-legacy output\nwith GCC trunk.\n\ngdb/testsuite/ChangeLog\n2020-12-18  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/fixed_points.exp: Also run with\n\t-fgnat-encodings=minimal.  Update expected output.",
    "tree": {
      "sha": "d94449e78a375531fe80174390af06bed21b9c55",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d94449e78a375531fe80174390af06bed21b9c55"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/86ef42bd7333091725991ba568807fcec0a2c1d1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86ef42bd7333091725991ba568807fcec0a2c1d1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/86ef42bd7333091725991ba568807fcec0a2c1d1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86ef42bd7333091725991ba568807fcec0a2c1d1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eba7b68cb023add7bdcbcc79ac6f3ce8e50952e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eba7b68cb023add7bdcbcc79ac6f3ce8e50952e1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/eba7b68cb023add7bdcbcc79ac6f3ce8e50952e1"
    }
  ],
  "stats": {
    "total": 139,
    "additions": 78,
    "deletions": 61
  },
  "files": [
    {
      "sha": "24df95135db3d980186ea3d89456874f7eb5ee45",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86ef42bd7333091725991ba568807fcec0a2c1d1/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86ef42bd7333091725991ba568807fcec0a2c1d1/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=86ef42bd7333091725991ba568807fcec0a2c1d1",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-18  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/fixed_points.exp: Also run with\n+\t-fgnat-encodings=minimal.  Update expected output.\n+\n 2020-12-16  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdb.base/async-shell.exp: Enable non-stop through GDBFLAGS."
    },
    {
      "sha": "565f7115f442cb768b03b91654866073214d74d0",
      "filename": "gdb/testsuite/gdb.ada/fixed_points.exp",
      "status": "modified",
      "additions": 73,
      "deletions": 61,
      "changes": 134,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/86ef42bd7333091725991ba568807fcec0a2c1d1/gdb/testsuite/gdb.ada/fixed_points.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/86ef42bd7333091725991ba568807fcec0a2c1d1/gdb/testsuite/gdb.ada/fixed_points.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/fixed_points.exp?ref=86ef42bd7333091725991ba568807fcec0a2c1d1",
      "patch": "@@ -19,80 +19,92 @@ if { [skip_ada_tests] } { return -1 }\n \n standard_ada_testfile fixed_points\n \n-if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable {debug}] != \"\"} {\n-    return -1\n-}\n-\n-clean_restart ${testfile}\n-\n-set bp_location [gdb_get_line_number \"Set breakpoint here\" ${testdir}/fixed_points.adb]\n-runto \"fixed_points.adb:$bp_location\"\n-\n-# Fixed point subtypes:\n+foreach_with_prefix scenario {all minimal} {\n+    set flags [list debug additional_flags=-fgnat-encodings=$scenario]\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\"} {\n+\treturn -1\n+    }\n \n-gdb_test \"print base_object\" \\\n-         \"= -50\" \\\n-         \"p on a fixed point type\"\n+    clean_restart ${testfile}\n \n-gdb_test \"print subtype_object\" \\\n-         \"= -50\" \\\n-         \"p on a subtype fixed point type\"\n+    set bp_location [gdb_get_line_number \"Set breakpoint here\" ${testdir}/fixed_points.adb]\n+    runto \"fixed_points.adb:$bp_location\"\n \n-gdb_test \"print new_type_object\" \\\n-         \"= -50\" \\\n-         \"p on a new fixed point type\"\n+    # Fixed point subtypes:\n \n-# Overprecise delta:\n+    gdb_test \"print base_object\" \\\n+\t\"= -50\" \\\n+\t\"p on a fixed point type\"\n \n-gdb_test \"print Overprecise_Object\" \\\n-         \"= 0.13579135791\"\n+    gdb_test \"print subtype_object\" \\\n+\t\"= -50\" \\\n+\t\"p on a subtype fixed point type\"\n \n-gdb_test \"ptype Overprecise_Object\" \\\n-         \"= delta 0.135791\"\n+    gdb_test \"print new_type_object\" \\\n+\t\"= -50\" \\\n+\t\"p on a new fixed point type\"\n \n-# FP*_Var...\n+    # Overprecise delta:\n \n-gdb_test \"print fp1_var\" \\\n-         \" = 0.25\"\n+    gdb_test \"print Overprecise_Object\" \\\n+\t\"= 0.13579135791\"\n \n-gdb_test_multiple \"ptype fp1_var\" \"\" {\n-    -re \"type = <1-byte fixed point \\\\(small = 0\\\\.0625\\\\)>\\r\\n$gdb_prompt $\" {\n-        pass $gdb_test_name\n-    }\n-    -re \"type = delta 0\\\\.1 <'small = 0\\\\.0625>\\r\\n$gdb_prompt $\" {\n-        # The (legacy) output we obtain when the compiler described\n-        # our fixed point types using the GNAT encodings rather than\n-        # standard DWARF.  OK as well.\n-        pass $gdb_test_name\n+    gdb_test_multiple \"ptype Overprecise_Object\" \"\" {\n+\t-re \"type = <2-byte fixed point \\\\(small = 135791357913579/1000000000000000\\\\)>\\r\\n$gdb_prompt $\" {\n+\t    pass $gdb_test_name\n+\t}\n+\t-re \"type = delta 0.135791\\r\\n$gdb_prompt $\" {\n+\t    # The (legacy) output we obtain when the compiler described\n+\t    # our fixed point types using the GNAT encodings rather than\n+\t    # standard DWARF.  OK as well.\n+\t    pass $gdb_test_name\n+\t}\n     }\n-}\n-\n-gdb_test \"print fp2_var\" \\\n-         \" = -0.01\"\n \n-gdb_test_multiple \"ptype fp2_var\" \"\" {\n-    -re \"type = <8-byte fixed point \\\\(small = 0\\\\.01\\\\)>\\r\\n$gdb_prompt $\" {\n-        pass $gdb_test_name\n-    }\n-    -re \"type = delta 0\\\\.01\\r\\n$gdb_prompt $\" {\n-        # The (legacy) output we obtain when the compiler described\n-        # our fixed point types using the GNAT encodings rather than\n-        # standard DWARF.  OK as well.\n-        pass $gdb_test_name\n+    # FP*_Var...\n+\n+    gdb_test \"print fp1_var\" \\\n+\t\" = 0.25\"\n+\n+    gdb_test_multiple \"ptype fp1_var\" \"\" {\n+\t-re \"type = <1-byte fixed point \\\\(small = 1/16\\\\)>\\r\\n$gdb_prompt $\" {\n+\t    pass $gdb_test_name\n+\t}\n+\t-re \"type = delta 0\\\\.1 <'small = 0\\\\.0625>\\r\\n$gdb_prompt $\" {\n+\t    # The (legacy) output we obtain when the compiler described\n+\t    # our fixed point types using the GNAT encodings rather than\n+\t    # standard DWARF.  OK as well.\n+\t    pass $gdb_test_name\n+\t}\n     }\n-}\n-\n-gdb_test \"print fp3_var\" \\\n-         \" = 0.1\"\n \n-gdb_test_multiple \"ptype fp3_var\" \"\" {\n-    -re \"type = <1-byte fixed point \\\\(small = 0\\\\.0333333\\\\)>\\r\\n$gdb_prompt $\" {\n-        pass $gdb_test_name\n+    gdb_test \"print fp2_var\" \\\n+\t\" = -0.01\"\n+\n+    gdb_test_multiple \"ptype fp2_var\" \"\" {\n+\t-re \"type = <8-byte fixed point \\\\(small = 1/100\\\\)>\\r\\n$gdb_prompt $\" {\n+\t    pass $gdb_test_name\n+\t}\n+\t-re \"type = delta 0\\\\.01\\r\\n$gdb_prompt $\" {\n+\t    # The (legacy) output we obtain when the compiler described\n+\t    # our fixed point types using the GNAT encodings rather than\n+\t    # standard DWARF.  OK as well.\n+\t    pass $gdb_test_name\n+\t}\n     }\n-    -re \"type = delta 0\\\\.1 <'small = 0\\\\.0333333>\\r\\n$gdb_prompt $\" {\n-        # The (legacy) output we obtain when the compiler described\n-        # our fixed point types using the GNAT encodings rather than\n-        # standard DWARF.  OK as well.\n-        pass $gdb_test_name\n+\n+    gdb_test \"print fp3_var\" \\\n+\t\" = 0.1\"\n+\n+    gdb_test_multiple \"ptype fp3_var\" \"\" {\n+\t-re \"type = <1-byte fixed point \\\\(small = 1/30\\\\)>\\r\\n$gdb_prompt $\" {\n+\t    pass $gdb_test_name\n+\t}\n+\t-re \"type = delta 0\\\\.1 <'small = 0\\\\.0333333>\\r\\n$gdb_prompt $\" {\n+\t    # The (legacy) output we obtain when the compiler described\n+\t    # our fixed point types using the GNAT encodings rather than\n+\t    # standard DWARF.  OK as well.\n+\t    pass $gdb_test_name\n+\t}\n     }\n }"
    }
  ]
}