{
  "sha": "edc02ceb9763d414af79990a5fdb5e50aa59ceb6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWRjMDJjZWI5NzYzZDQxNGFmNzk5OTBhNWZkYjVlNTBhYTU5Y2ViNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-28T16:43:15Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-28T16:43:15Z"
    },
    "message": "Simplify DWARF reader initialization\n\nNow that the quick functions are separate from the object file format,\nthere's no need to have elfread.c push a new entry on the objfile 'qf'\nlist.  Instead, this detail can be pushed into the DWARF reader.  That\nis what this patch implements.\n\nI wasn't sure whether lazy reading still makes sense or not.  It's\nstill only used by ELF, and only in certain situations (like vfork, I\nthink).  It may not be carrying its weight, so we may want to consider\nremoving this in the future.\n\nAlso, I'm unclear on why the various indices are only used for ELF.\nThis seems sub-optimal.  However, I haven't tried to address that\nhere.\n\ngdb/ChangeLog\n2021-03-28  Tom Tromey  <tom@tromey.com>\n\n\t* elfread.c (can_lazily_read_symbols): Move to dwarf2/read.c.\n\t(elf_symfile_read): Simplify.\n\t* dwarf2/read.c (struct lazy_dwarf_reader): Move from elfread.c.\n\t(make_lazy_dwarf_reader): New function.\n\t(make_dwarf_gdb_index, make_dwarf_debug_names): Now static.\n\t(dwarf2_initialize_objfile): Return void.  Remove index_kind\n\tparameter.  Push on 'qf' list.\n\t* dwarf2/public.h (dwarf2_initialize_objfile): Change return\n\ttype.  Remove 'index_kind' parameter.\n\t(make_dwarf_gdb_index, make_dwarf_debug_names): Don't declare.",
    "tree": {
      "sha": "fec3eefb932c568bb90309ec0776b660dc96b4f3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fec3eefb932c568bb90309ec0776b660dc96b4f3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/edc02ceb9763d414af79990a5fdb5e50aa59ceb6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edc02ceb9763d414af79990a5fdb5e50aa59ceb6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/edc02ceb9763d414af79990a5fdb5e50aa59ceb6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edc02ceb9763d414af79990a5fdb5e50aa59ceb6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fff7b4f846b7f85482393dee31169b1b6bf34e4d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fff7b4f846b7f85482393dee31169b1b6bf34e4d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fff7b4f846b7f85482393dee31169b1b6bf34e4d"
    }
  ],
  "stats": {
    "total": 134,
    "additions": 66,
    "deletions": 68
  },
  "files": [
    {
      "sha": "70e8ad7ebeebe1ac43e7e8479237b41c6fb7bf23",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edc02ceb9763d414af79990a5fdb5e50aa59ceb6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edc02ceb9763d414af79990a5fdb5e50aa59ceb6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=edc02ceb9763d414af79990a5fdb5e50aa59ceb6",
      "patch": "@@ -1,3 +1,16 @@\n+2021-03-28  Tom Tromey  <tom@tromey.com>\n+\n+\t* elfread.c (can_lazily_read_symbols): Move to dwarf2/read.c.\n+\t(elf_symfile_read): Simplify.\n+\t* dwarf2/read.c (struct lazy_dwarf_reader): Move from elfread.c.\n+\t(make_lazy_dwarf_reader): New function.\n+\t(make_dwarf_gdb_index, make_dwarf_debug_names): Now static.\n+\t(dwarf2_initialize_objfile): Return void.  Remove index_kind\n+\tparameter.  Push on 'qf' list.\n+\t* dwarf2/public.h (dwarf2_initialize_objfile): Change return\n+\ttype.  Remove 'index_kind' parameter.\n+\t(make_dwarf_gdb_index, make_dwarf_debug_names): Don't declare.\n+\n 2021-03-27  Tom Tromey  <tom@tromey.com>\n \n \t* elfread.c (elf_sym_fns_lazy_psyms): Don't declare."
    },
    {
      "sha": "33bb5d48217c0ef930827c0062d153e3f36d46e6",
      "filename": "gdb/dwarf2/public.h",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edc02ceb9763d414af79990a5fdb5e50aa59ceb6/gdb/dwarf2/public.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edc02ceb9763d414af79990a5fdb5e50aa59ceb6/gdb/dwarf2/public.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/public.h?ref=edc02ceb9763d414af79990a5fdb5e50aa59ceb6",
      "patch": "@@ -34,18 +34,13 @@ enum class dw_index_kind\n   DEBUG_NAMES,\n };\n \n-/* Initialize for reading DWARF for OBJFILE.  Return false if this\n-   file will use psymtabs, or true if using an index, in which case\n-   *INDEX_KIND is set to the index variant in use.  */\n-extern bool dwarf2_initialize_objfile (struct objfile *objfile,\n-\t\t\t\t       dw_index_kind *index_kind);\n+/* Initialize for reading DWARF for OBJFILE, and push the appropriate\n+   entry on the objfile's \"qf\" list.  */\n+extern void dwarf2_initialize_objfile (struct objfile *objfile);\n \n struct psymbol_functions;\n extern void dwarf2_build_psymtabs (struct objfile *,\n \t\t\t\t   psymbol_functions *psf = nullptr);\n extern void dwarf2_build_frame_info (struct objfile *);\n \n-extern quick_symbol_functions_up make_dwarf_gdb_index ();\n-extern quick_symbol_functions_up make_dwarf_debug_names ();\n-\n #endif /* DWARF2_PUBLIC_H */"
    },
    {
      "sha": "1b98b758c350814deb40ebde1078a78a1fc440ba",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 49,
      "deletions": 24,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edc02ceb9763d414af79990a5fdb5e50aa59ceb6/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edc02ceb9763d414af79990a5fdb5e50aa59ceb6/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=edc02ceb9763d414af79990a5fdb5e50aa59ceb6",
      "patch": "@@ -2191,6 +2191,30 @@ struct dwarf2_per_cu_quick_data\n   unsigned int no_file_data : 1;\n };\n \n+/* A subclass of psymbol_functions that arranges to read the DWARF\n+   partial symbols when needed.  */\n+struct lazy_dwarf_reader : public psymbol_functions\n+{\n+  using psymbol_functions::psymbol_functions;\n+\n+  bool can_lazily_read_symbols () override\n+  {\n+    return true;\n+  }\n+\n+  void read_partial_symbols (struct objfile *objfile) override\n+  {\n+    if (dwarf2_has_info (objfile, nullptr))\n+      dwarf2_build_psymtabs (objfile, this);\n+  }\n+};\n+\n+static quick_symbol_functions_up\n+make_lazy_dwarf_reader ()\n+{\n+  return quick_symbol_functions_up (new lazy_dwarf_reader);\n+}\n+\n struct dwarf2_base_index_functions : public quick_symbol_functions\n {\n   bool has_symbols (struct objfile *objfile) override;\n@@ -2292,13 +2316,13 @@ struct dwarf2_debug_names_index : public dwarf2_base_index_functions\n      enum search_domain kind) override;\n };\n \n-quick_symbol_functions_up\n+static quick_symbol_functions_up\n make_dwarf_gdb_index ()\n {\n   return quick_symbol_functions_up (new dwarf2_gdb_index);\n }\n \n-quick_symbol_functions_up\n+static quick_symbol_functions_up\n make_dwarf_debug_names ()\n {\n   return quick_symbol_functions_up (new dwarf2_debug_names_index);\n@@ -5993,10 +6017,10 @@ get_gdb_index_contents_from_cache_dwz (objfile *obj, dwz_file *dwz)\n   return global_index_cache.lookup_gdb_index (build_id, &dwz->index_cache_res);\n }\n \n-/* See symfile.h.  */\n+/* See dwarf2/public.h.  */\n \n-bool\n-dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n+void\n+dwarf2_initialize_objfile (struct objfile *objfile)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n   dwarf2_per_bfd *per_bfd = per_objfile->per_bfd;\n@@ -6016,9 +6040,9 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n       if (per_bfd->using_index)\n \t{\n \t  dwarf_read_debug_printf (\"using_index already set\");\n-\t  *index_kind = dw_index_kind::GDB_INDEX;\n \t  per_objfile->resize_symtabs ();\n-\t  return true;\n+\t  objfile->qf.push_front (make_dwarf_gdb_index ());\n+\t  return;\n \t}\n \n       per_bfd->using_index = 1;\n@@ -6037,31 +6061,31 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n \t\t\t\t\t    struct dwarf2_per_cu_quick_data);\n \t}\n \n-      /* Return 1 so that gdb sees the \"quick\" functions.  However,\n-\t these functions will be no-ops because we will have expanded\n-\t all symtabs.  */\n-      *index_kind = dw_index_kind::GDB_INDEX;\n-      return true;\n+      /* Arrange for gdb to see the \"quick\" functions.  However, these\n+\t functions will be no-ops because we will have expanded all\n+\t symtabs.  */\n+      objfile->qf.push_front (make_dwarf_gdb_index ());\n+      return;\n     }\n \n   /* Was a debug names index already read when we processed an objfile sharing\n      PER_BFD?  */\n   if (per_bfd->debug_names_table != nullptr)\n     {\n       dwarf_read_debug_printf (\"re-using shared debug names table\");\n-      *index_kind = dw_index_kind::DEBUG_NAMES;\n       per_objfile->resize_symtabs ();\n-      return true;\n+      objfile->qf.push_front (make_dwarf_debug_names ());\n+      return;\n     }\n \n   /* Was a GDB index already read when we processed an objfile sharing\n      PER_BFD?  */\n   if (per_bfd->index_table != nullptr)\n     {\n       dwarf_read_debug_printf (\"re-using shared index table\");\n-      *index_kind = dw_index_kind::GDB_INDEX;\n       per_objfile->resize_symtabs ();\n-      return true;\n+      objfile->qf.push_front (make_dwarf_gdb_index ());\n+      return;\n     }\n \n   /* There might already be partial symtabs built for this BFD.  This happens\n@@ -6072,25 +6096,26 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n   if (per_bfd->partial_symtabs != nullptr)\n     {\n       dwarf_read_debug_printf (\"re-using shared partial symtabs\");\n-      return false;\n+      objfile->qf.push_front (make_lazy_dwarf_reader ());\n+      return;\n     }\n \n   if (dwarf2_read_debug_names (per_objfile))\n     {\n       dwarf_read_debug_printf (\"found debug names\");\n-      *index_kind = dw_index_kind::DEBUG_NAMES;\n       per_objfile->resize_symtabs ();\n-      return true;\n+      objfile->qf.push_front (make_dwarf_debug_names ());\n+      return;\n     }\n \n   if (dwarf2_read_gdb_index (per_objfile,\n \t\t\t     get_gdb_index_contents_from_section<struct dwarf2_per_bfd>,\n \t\t\t     get_gdb_index_contents_from_section<dwz_file>))\n     {\n       dwarf_read_debug_printf (\"found gdb index from file\");\n-      *index_kind = dw_index_kind::GDB_INDEX;\n       per_objfile->resize_symtabs ();\n-      return true;\n+      objfile->qf.push_front (make_dwarf_gdb_index ());\n+      return;\n     }\n \n   /* ... otherwise, try to find the index in the index cache.  */\n@@ -6100,13 +6125,13 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n     {\n       dwarf_read_debug_printf (\"found gdb index from cache\");\n       global_index_cache.hit ();\n-      *index_kind = dw_index_kind::GDB_INDEX;\n       per_objfile->resize_symtabs ();\n-      return true;\n+      objfile->qf.push_front (make_dwarf_gdb_index ());\n+      return;\n     }\n \n   global_index_cache.miss ();\n-  return false;\n+  objfile->qf.push_front (make_lazy_dwarf_reader ());\n }\n \n \f"
    },
    {
      "sha": "1dea226242db07a6158e163877a14ab287a0ca21",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 36,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edc02ceb9763d414af79990a5fdb5e50aa59ceb6/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edc02ceb9763d414af79990a5fdb5e50aa59ceb6/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=edc02ceb9763d414af79990a5fdb5e50aa59ceb6",
      "patch": "@@ -53,24 +53,6 @@\n #include \"debuginfod-support.h\"\n #include \"dwarf2/public.h\"\n \n-/* A subclass of psymbol_functions that arranges to read the DWARF\n-   partial symbols when needed.  */\n-struct lazy_dwarf_reader : public psymbol_functions\n-{\n-  using psymbol_functions::psymbol_functions;\n-\n-  bool can_lazily_read_symbols () override\n-  {\n-    return true;\n-  }\n-\n-  void read_partial_symbols (struct objfile *objfile) override\n-  {\n-    if (dwarf2_has_info (objfile, nullptr))\n-      dwarf2_build_psymtabs (objfile, this);\n-  }\n-};\n-\n /* The struct elfinfo is available only during ELF symbol table and\n    psymtab reading.  It is destroyed at the completion of psymtab-reading.\n    It's local to elf_symfile_read.  */\n@@ -1273,24 +1255,7 @@ elf_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n     }\n \n   if (dwarf2_has_info (objfile, NULL, true))\n-    {\n-      dw_index_kind index_kind;\n-\n-      if (dwarf2_initialize_objfile (objfile, &index_kind))\n-\t{\n-\t  switch (index_kind)\n-\t    {\n-\t    case dw_index_kind::GDB_INDEX:\n-\t      objfile->qf.push_front (make_dwarf_gdb_index ());\n-\t      break;\n-\t    case dw_index_kind::DEBUG_NAMES:\n-\t      objfile->qf.push_front (make_dwarf_debug_names ());\n-\t      break;\n-\t    }\n-\t}\n-      else\n-\tobjfile->qf.emplace_front (new lazy_dwarf_reader);\n-    }\n+    dwarf2_initialize_objfile (objfile);\n   /* If the file has its own symbol tables it has no separate debug\n      info.  `.dynsym'/`.symtab' go to MSYMBOLS, `.debug_info' goes to\n      SYMTABS/PSYMTABS.  `.gnu_debuglink' may no longer be present with"
    }
  ]
}