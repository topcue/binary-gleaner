{
  "sha": "298e9637305ee85f630638ba723494fb208eabad",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mjk4ZTk2MzczMDVlZTg1ZjYzMDYzOGJhNzIzNDk0ZmIyMDhlYWJhZA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-19T21:04:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-19T21:04:53Z"
    },
    "message": "gdb: dwarf2/read.c: remove unused objfile parameters/variables\n\nThis is a simple cleanup.  These functions used to use the objfile's\nobstack for allocation in the hash tables, but they don't anymore.\nRemove the unnecessary objfile parameters, which in turn allows removing\nsome local variables.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (allocate_signatured_type_table,\n\tallocate_dwo_unit_table, allocate_type_unit_groups_table,\n\tallocate_dwo_file_hash_table, allocate_dwp_loaded_cutus_table):\n\tRemove objfile parameter, update all callers.",
    "tree": {
      "sha": "bab777ff33efad69fe544a1b389dcfc614cae496",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bab777ff33efad69fe544a1b389dcfc614cae496"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/298e9637305ee85f630638ba723494fb208eabad",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/298e9637305ee85f630638ba723494fb208eabad",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/298e9637305ee85f630638ba723494fb208eabad",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/298e9637305ee85f630638ba723494fb208eabad/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "084104828cba3e80b19a4bad9538d32991312d7a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/084104828cba3e80b19a4bad9538d32991312d7a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/084104828cba3e80b19a4bad9538d32991312d7a"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 26,
    "deletions": 34
  },
  "files": [
    {
      "sha": "b4a586c333a3a0ee6a331060dc17cc46948cd8eb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/298e9637305ee85f630638ba723494fb208eabad/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/298e9637305ee85f630638ba723494fb208eabad/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=298e9637305ee85f630638ba723494fb208eabad",
      "patch": "@@ -1,3 +1,10 @@\n+2020-02-19  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.c (allocate_signatured_type_table,\n+\tallocate_dwo_unit_table, allocate_type_unit_groups_table,\n+\tallocate_dwo_file_hash_table, allocate_dwp_loaded_cutus_table):\n+\tRemove objfile parameter, update all callers.\n+\n 2020-02-19  Doug Evans  <dje@google.com>\n \n \tPR rust/25535"
    },
    {
      "sha": "4d767a59af74cb7f0348098316770f96ab0a855c",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 19,
      "deletions": 34,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/298e9637305ee85f630638ba723494fb208eabad/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/298e9637305ee85f630638ba723494fb208eabad/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=298e9637305ee85f630638ba723494fb208eabad",
      "patch": "@@ -1650,9 +1650,9 @@ struct file_and_directory\n static file_and_directory find_file_and_directory (struct die_info *die,\n \t\t\t\t\t\t   struct dwarf2_cu *cu);\n \n-static htab_up allocate_signatured_type_table (struct objfile *objfile);\n+static htab_up allocate_signatured_type_table ();\n \n-static htab_up allocate_dwo_unit_table (struct objfile *objfile);\n+static htab_up allocate_dwo_unit_table ();\n \n static struct dwo_unit *lookup_dwo_unit_in_dwp\n   (struct dwarf2_per_objfile *dwarf2_per_objfile,\n@@ -2499,7 +2499,7 @@ create_signatured_type_table_from_index\n   gdb_assert (dwarf2_per_objfile->all_type_units.empty ());\n   dwarf2_per_objfile->all_type_units.reserve (elements / 3);\n \n-  htab_up sig_types_hash = allocate_signatured_type_table (objfile);\n+  htab_up sig_types_hash = allocate_signatured_type_table ();\n \n   for (offset_type i = 0; i < elements; i += 3)\n     {\n@@ -2555,7 +2555,7 @@ create_signatured_type_table_from_debug_names\n   gdb_assert (dwarf2_per_objfile->all_type_units.empty ());\n   dwarf2_per_objfile->all_type_units.reserve (map.tu_count);\n \n-  htab_up sig_types_hash = allocate_signatured_type_table (objfile);\n+  htab_up sig_types_hash = allocate_signatured_type_table ();\n \n   for (uint32_t i = 0; i < map.tu_count; ++i)\n     {\n@@ -5973,7 +5973,7 @@ eq_signatured_type (const void *item_lhs, const void *item_rhs)\n /* Allocate a hash table for signatured types.  */\n \n static htab_up\n-allocate_signatured_type_table (struct objfile *objfile)\n+allocate_signatured_type_table ()\n {\n   return htab_up (htab_create_alloc (41,\n \t\t\t\t     hash_signatured_type,\n@@ -6068,9 +6068,9 @@ create_debug_type_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       if (types_htab == NULL)\n \t{\n \t  if (dwo_file)\n-\t    types_htab = allocate_dwo_unit_table (objfile);\n+\t    types_htab = allocate_dwo_unit_table ();\n \t  else\n-\t    types_htab = allocate_signatured_type_table (objfile);\n+\t    types_htab = allocate_signatured_type_table ();\n \t}\n \n       if (dwo_file)\n@@ -6281,7 +6281,6 @@ lookup_dwo_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n {\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = cu->per_cu->dwarf2_per_objfile;\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct dwo_file *dwo_file;\n   struct dwo_unit find_dwo_entry, *dwo_entry;\n   struct signatured_type find_sig_entry, *sig_entry;\n@@ -6292,10 +6291,7 @@ lookup_dwo_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n   /* If TU skeletons have been removed then we may not have read in any\n      TUs yet.  */\n   if (dwarf2_per_objfile->signatured_types == NULL)\n-    {\n-      dwarf2_per_objfile->signatured_types\n-\t= allocate_signatured_type_table (objfile);\n-    }\n+    dwarf2_per_objfile->signatured_types = allocate_signatured_type_table ();\n \n   /* We only ever need to read in one copy of a signatured type.\n      Use the global signatured_types array to do our own comdat-folding\n@@ -6352,7 +6348,6 @@ lookup_dwp_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n {\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = cu->per_cu->dwarf2_per_objfile;\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct dwp_file *dwp_file = get_dwp_file (dwarf2_per_objfile);\n   struct dwo_unit *dwo_entry;\n   struct signatured_type find_sig_entry, *sig_entry;\n@@ -6364,10 +6359,7 @@ lookup_dwp_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n   /* If TU skeletons have been removed then we may not have read in any\n      TUs yet.  */\n   if (dwarf2_per_objfile->signatured_types == NULL)\n-    {\n-      dwarf2_per_objfile->signatured_types\n-\t= allocate_signatured_type_table (objfile);\n-    }\n+    dwarf2_per_objfile->signatured_types = allocate_signatured_type_table ();\n \n   find_sig_entry.signature = sig;\n   slot = htab_find_slot (dwarf2_per_objfile->signatured_types.get (),\n@@ -7087,7 +7079,7 @@ eq_type_unit_group (const void *item_lhs, const void *item_rhs)\n /* Allocate a hash table for type unit groups.  */\n \n static htab_up\n-allocate_type_unit_groups_table (struct objfile *objfile)\n+allocate_type_unit_groups_table ()\n {\n   return htab_up (htab_create_alloc (3,\n \t\t\t\t     hash_type_unit_group,\n@@ -7161,10 +7153,7 @@ get_type_unit_group (struct dwarf2_cu *cu, const struct attribute *stmt_list)\n   struct type_unit_group type_unit_group_for_lookup;\n \n   if (dwarf2_per_objfile->type_unit_groups == NULL)\n-    {\n-      dwarf2_per_objfile->type_unit_groups =\n-\tallocate_type_unit_groups_table (dwarf2_per_objfile->objfile);\n-    }\n+    dwarf2_per_objfile->type_unit_groups = allocate_type_unit_groups_table ();\n \n   /* Do we need to create a new group, or can we use an existing one?  */\n \n@@ -7638,10 +7627,7 @@ process_skeletonless_type_unit (void **slot, void *info)\n   /* If this TU doesn't exist in the global table, add it and read it in.  */\n \n   if (dwarf2_per_objfile->signatured_types == NULL)\n-    {\n-      dwarf2_per_objfile->signatured_types\n-\t= allocate_signatured_type_table (dwarf2_per_objfile->objfile);\n-    }\n+    dwarf2_per_objfile->signatured_types = allocate_signatured_type_table ();\n \n   find_entry.signature = dwo_unit->signature;\n   slot = htab_find_slot (dwarf2_per_objfile->signatured_types.get (),\n@@ -10986,7 +10972,7 @@ eq_dwo_file (const void *item_lhs, const void *item_rhs)\n /* Allocate a hash table for DWO files.  */\n \n static htab_up\n-allocate_dwo_file_hash_table (struct objfile *objfile)\n+allocate_dwo_file_hash_table ()\n {\n   auto delete_dwo_file = [] (void *item)\n     {\n@@ -11013,8 +10999,7 @@ lookup_dwo_file_slot (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   void **slot;\n \n   if (dwarf2_per_objfile->dwo_files == NULL)\n-    dwarf2_per_objfile->dwo_files\n-      = allocate_dwo_file_hash_table (dwarf2_per_objfile->objfile);\n+    dwarf2_per_objfile->dwo_files = allocate_dwo_file_hash_table ();\n \n   find_entry.dwo_name = dwo_name;\n   find_entry.comp_dir = comp_dir;\n@@ -11050,7 +11035,7 @@ eq_dwo_unit (const void *item_lhs, const void *item_rhs)\n    There is one of these tables for each of CUs,TUs for each DWO file.  */\n \n static htab_up\n-allocate_dwo_unit_table (struct objfile *objfile)\n+allocate_dwo_unit_table ()\n {\n   /* Start out with a pretty small number.\n      Generally DWO files contain only one CU and maybe some TUs.  */\n@@ -11144,7 +11129,7 @@ create_cus_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \tcontinue;\n \n       if (cus_htab == NULL)\n-\tcus_htab = allocate_dwo_unit_table (objfile);\n+\tcus_htab = allocate_dwo_unit_table ();\n \n       dwo_unit = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct dwo_unit);\n       *dwo_unit = read_unit;\n@@ -12301,7 +12286,7 @@ eq_dwp_loaded_cutus (const void *a, const void *b)\n /* Allocate a hash table for dwp_file loaded CUs/TUs.  */\n \n static htab_up\n-allocate_dwp_loaded_cutus_table (struct objfile *objfile)\n+allocate_dwp_loaded_cutus_table ()\n {\n   return htab_up (htab_create_alloc (3,\n \t\t\t\t     hash_dwp_loaded_cutus,\n@@ -12434,8 +12419,8 @@ open_and_init_dwp_file (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \t\t\t   dwarf2_locate_v2_dwp_sections,\n \t\t\t   dwp_file.get ());\n \n-  dwp_file->loaded_cus = allocate_dwp_loaded_cutus_table (objfile);\n-  dwp_file->loaded_tus = allocate_dwp_loaded_cutus_table (objfile);\n+  dwp_file->loaded_cus = allocate_dwp_loaded_cutus_table ();\n+  dwp_file->loaded_tus = allocate_dwp_loaded_cutus_table ();\n \n   if (dwarf_read_debug)\n     {"
    }
  ]
}