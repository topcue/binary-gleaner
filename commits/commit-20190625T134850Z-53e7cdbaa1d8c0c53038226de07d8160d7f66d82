{
  "sha": "53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTNlN2NkYmFhMWQ4YzBjNTMwMzgyMjZkZTA3ZDgxNjBkN2Y2NmQ4Mg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-23T20:27:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:50Z"
    },
    "message": "Remove union tui_which_element\n\nThis removes union tui_which_element, instead moving the content\ndirectly into tui_source_window_base.  This allows for the deletion of\na fair amount of code.  Now the TUI window hierarchy is more\ntype-safe.  In particular, there is never any confusion now about\nwhich members are in use by which subtype.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-winsource.h (tui_update_source_window_as_is)\n\t(tui_alloc_source_buffer, tui_line_is_displayed)\n\t(tui_addr_is_displayed): Change type of win_info.\n\t* tui/tui-winsource.c (tui_update_source_window_as_is)\n\t(tui_clear_source_content, tui_show_source_line)\n\t(tui_show_source_content, tui_source_window_base::refill)\n\t(tui_source_window_base::set_is_exec_point_at)\n\t(tui_source_window_base::set_is_exec_point_at)\n\t(tui_update_breakpoint_info, tui_set_exec_info_content): Update.\n\t(tui_alloc_source_buffer, tui_line_is_displayed)\n\t(tui_addr_is_displayed): Change type of win_info.  Update.\n\t* tui/tui-win.c (tui_resize_all, tui_adjust_win_heights)\n\t(tui_source_window_base::do_make_visible_with_new_height):\n\tUpdate.\n\t* tui/tui-source.c (tui_set_source_content)\n\t(tui_set_source_content_nil)\n\t(tui_source_window::do_scroll_vertical): Update.\n\t* tui/tui-layout.c (show_layout): Update.\n\t* tui/tui-disasm.c (tui_set_disassem_content)\n\t(tui_disasm_window::do_scroll_vertical): Update.\n\t* tui/tui-data.h (tui_win_content): Remove.\n\t(struct tui_gen_win_info) <content, content_size>: Remove.\n\t(struct tui_source_element): Add initializers and destructor.\n\t(union tui_which_element, struct tui_win_element): Remove.\n\t(struct tui_source_window_base) <content>: New field.\n\t(struct tui_data_window): Remove destructor.\n\t(tui_alloc_content, tui_free_win_content)\n\t(tui_free_all_source_wins_content): Don't declare.\n\t* tui/tui-data.c (tui_initialize_static_data): Update.\n\t(init_content_element, tui_alloc_content): Remove.\n\t(~tui_gen_win_info): Update.\n\t(~tui_data_window, tui_free_all_source_wins_content)\n\t(tui_free_win_content, free_content, free_content_elements):\n\tRemove.",
    "tree": {
      "sha": "5a7bb07390157fe841fc65034a7bd7fa843a59bc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5a7bb07390157fe841fc65034a7bd7fa843a59bc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7908abbf18dde6d3163758e447d72d6d2b267927",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7908abbf18dde6d3163758e447d72d6d2b267927",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7908abbf18dde6d3163758e447d72d6d2b267927"
    }
  ],
  "stats": {
    "total": 445,
    "additions": 144,
    "deletions": 301
  },
  "files": [
    {
      "sha": "2e641249957e77326b4944b35dccda7f65d42d54",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
      "patch": "@@ -1,3 +1,40 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-winsource.h (tui_update_source_window_as_is)\n+\t(tui_alloc_source_buffer, tui_line_is_displayed)\n+\t(tui_addr_is_displayed): Change type of win_info.\n+\t* tui/tui-winsource.c (tui_update_source_window_as_is)\n+\t(tui_clear_source_content, tui_show_source_line)\n+\t(tui_show_source_content, tui_source_window_base::refill)\n+\t(tui_source_window_base::set_is_exec_point_at)\n+\t(tui_source_window_base::set_is_exec_point_at)\n+\t(tui_update_breakpoint_info, tui_set_exec_info_content): Update.\n+\t(tui_alloc_source_buffer, tui_line_is_displayed)\n+\t(tui_addr_is_displayed): Change type of win_info.  Update.\n+\t* tui/tui-win.c (tui_resize_all, tui_adjust_win_heights)\n+\t(tui_source_window_base::do_make_visible_with_new_height):\n+\tUpdate.\n+\t* tui/tui-source.c (tui_set_source_content)\n+\t(tui_set_source_content_nil)\n+\t(tui_source_window::do_scroll_vertical): Update.\n+\t* tui/tui-layout.c (show_layout): Update.\n+\t* tui/tui-disasm.c (tui_set_disassem_content)\n+\t(tui_disasm_window::do_scroll_vertical): Update.\n+\t* tui/tui-data.h (tui_win_content): Remove.\n+\t(struct tui_gen_win_info) <content, content_size>: Remove.\n+\t(struct tui_source_element): Add initializers and destructor.\n+\t(union tui_which_element, struct tui_win_element): Remove.\n+\t(struct tui_source_window_base) <content>: New field.\n+\t(struct tui_data_window): Remove destructor.\n+\t(tui_alloc_content, tui_free_win_content)\n+\t(tui_free_all_source_wins_content): Don't declare.\n+\t* tui/tui-data.c (tui_initialize_static_data): Update.\n+\t(init_content_element, tui_alloc_content): Remove.\n+\t(~tui_gen_win_info): Update.\n+\t(~tui_data_window, tui_free_all_source_wins_content)\n+\t(tui_free_win_content, free_content, free_content_elements):\n+\tRemove.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-winsource.h (tui_clear_source_content)"
    },
    {
      "sha": "a018a4bf6abf84eef5438a24cce28cf75edae081",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 0,
      "deletions": 166,
      "changes": 166,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
      "patch": "@@ -46,18 +46,6 @@ static struct tui_layout_def layout_def = {\n static int win_resized = FALSE;\n \n \n-/*********************************\n-** Static function forward decls\n-**********************************/\n-static void free_content (tui_win_content, \n-\t\t\t  int, \n-\t\t\t  enum tui_win_type);\n-static void free_content_elements (tui_win_content, \n-\t\t\t\t   int, \n-\t\t\t\t   enum tui_win_type);\n-\n-\n-\n /*********************************\n ** PUBLIC FUNCTIONS\n **********************************/\n@@ -339,43 +327,14 @@ tui_initialize_static_data ()\n     win->origin.x =\n     win->origin.y =\n     win->viewport_height =\n-    win->content_size =\n     win->last_visible_line = 0;\n   win->handle = NULL;\n-  win->content = NULL;\n   win->content_in_use = FALSE;\n   win->is_visible = false;\n   win->title = 0;\n }\n \n \n-/* init_content_element().\n- */\n-static void\n-init_content_element (struct tui_win_element *element, \n-\t\t      enum tui_win_type type)\n-{\n-  gdb_assert (type != EXEC_INFO_WIN);\n-  gdb_assert (type != LOCATOR_WIN);\n-  gdb_assert (type != CMD_WIN);\n-  gdb_assert (type != DATA_ITEM_WIN);\n-  gdb_assert (type != DATA_WIN);\n-\n-  switch (type)\n-    {\n-    case SRC_WIN:\n-    case DISASSEM_WIN:\n-      element->which_element.source.line = NULL;\n-      element->which_element.source.line_or_addr.loa = LOA_LINE;\n-      element->which_element.source.line_or_addr.u.line_no = 0;\n-      element->which_element.source.is_exec_point = false;\n-      element->which_element.source.has_break = FALSE;\n-      break;\n-    default:\n-      break;\n-    }\n-}\n-\n tui_win_info::tui_win_info (enum tui_win_type type)\n   : tui_gen_win_info (type)\n {\n@@ -389,47 +348,12 @@ tui_source_window_base::tui_source_window_base (enum tui_win_type type)\n   start_line_or_addr.u.addr = 0;\n }\n \n-/* Allocates the content and elements in a block.  */\n-tui_win_content\n-tui_alloc_content (int num_elements, enum tui_win_type type)\n-{\n-  tui_win_content content;\n-  struct tui_win_element *element_block_ptr;\n-  int i;\n-\n-  gdb_assert (type != EXEC_INFO_WIN);\n-  gdb_assert (type != LOCATOR_WIN);\n-\n-  content = XNEWVEC (struct tui_win_element *, num_elements);\n-\n-  /*\n-   * All windows, except the data window, can allocate the\n-   * elements in a chunk.  The data window cannot because items\n-   * can be added/removed from the data display by the user at any\n-   * time.\n-   */\n-  if (type != DATA_WIN)\n-    {\n-      element_block_ptr = XNEWVEC (struct tui_win_element, num_elements);\n-      for (i = 0; i < num_elements; i++)\n-\t{\n-\t  content[i] = element_block_ptr;\n-\t  init_content_element (content[i], type);\n-\t  element_block_ptr++;\n-\t}\n-    }\n-\n-  return content;\n-}\n-\n-\n tui_gen_win_info::~tui_gen_win_info ()\n {\n   if (handle != NULL)\n     {\n       tui_delete_win (handle);\n       handle = NULL;\n-      tui_free_win_content (this);\n     }\n   xfree (title);\n }\n@@ -440,103 +364,13 @@ tui_source_window_base::~tui_source_window_base ()\n   delete execution_info;\n }  \n \n-tui_data_window::~tui_data_window ()\n-{\n-  if (content != NULL)\n-    {\n-      regs_column_count = 1;\n-      display_regs = false;\n-      content = NULL;\n-      content_size = 0;\n-    }\n-}  \n-\n-void\n-tui_free_all_source_wins_content ()\n-{\n-  for (tui_source_window_base *win_info : tui_source_windows ())\n-    {\n-      tui_free_win_content (win_info);\n-      tui_free_win_content (win_info->execution_info);\n-    }\n-}\n-\n-\n-void\n-tui_free_win_content (struct tui_gen_win_info *win_info)\n-{\n-  if (win_info->content != NULL)\n-    {\n-      free_content (win_info->content,\n-\t\t   win_info->content_size,\n-\t\t   win_info->type);\n-      win_info->content = NULL;\n-    }\n-  win_info->content_size = 0;\n-}\n-\n-\n /**********************************\n ** LOCAL STATIC FUNCTIONS        **\n **********************************/\n \n \n-static void\n-free_content (tui_win_content content, \n-\t      int content_size, \n-\t      enum tui_win_type win_type)\n-{\n-  if (content != NULL)\n-    {\n-      free_content_elements (content, content_size, win_type);\n-      xfree (content);\n-    }\n-}\n-\n-\n tui_data_item_window::~tui_data_item_window ()\n {\n   xfree (value);\n   xfree (content);\n }\n-\n-/* free_content_elements().\n- */\n-static void\n-free_content_elements (tui_win_content content, \n-\t\t       int content_size, \n-\t\t       enum tui_win_type type)\n-{\n-  if (content != NULL)\n-    {\n-      int i;\n-\n-      if (type == DISASSEM_WIN)\n-\t{\n-\t  /* Free whole source block.  */\n-\t  xfree (content[0]->which_element.source.line);\n-\t}\n-      else\n-\t{\n-\t  for (i = 0; i < content_size; i++)\n-\t    {\n-\t      struct tui_win_element *element;\n-\n-\t      element = content[i];\n-\t      if (element != NULL)\n-\t\t{\n-\t\t  switch (type)\n-\t\t    {\n-\t\t    case SRC_WIN:\n-\t\t      xfree (element->which_element.source.line);\n-\t\t      break;\n-\t\t    default:\n-\t\t      break;\n-\t\t    }\n-\t\t}\n-\t    }\n-\t}\n-      if (type != DATA_WIN && type != DATA_ITEM_WIN)\n-\txfree (content[0]);\t/* Free the element block.  */\n-    }\n-}"
    },
    {
      "sha": "b7cf05c7812cb207921a3da241043126e9cb9fb8",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 16,
      "deletions": 27,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
      "patch": "@@ -31,11 +31,6 @@ struct tui_point\n   int x, y;\n };\n \n-struct tui_win_element;\n-\n-/* This describes the content of the window.  */\n-typedef struct tui_win_element **tui_win_content;\n-\n /* Generic window information.  */\n struct tui_gen_win_info\n {\n@@ -75,10 +70,6 @@ struct tui_gen_win_info\n   int height = 0;\n   /* Origin of window.  */\n   struct tui_point origin = {0, 0};\n-  /* Content of window.  */\n-  tui_win_content content = nullptr;\n-  /* Size of content (# of elements).  */\n-  int content_size = 0;\n   /* Can it be used, or is it already used?  */\n   int content_in_use = FALSE;\n   /* Viewport height.  */\n@@ -172,10 +163,21 @@ struct tui_layout_def\n /* Elements in the Source/Disassembly Window.  */\n struct tui_source_element\n {\n-  char *line;\n+  tui_source_element ()\n+  {\n+    line_or_addr.loa = LOA_LINE;\n+    line_or_addr.u.line_no = 0;\n+  }\n+\n+  ~tui_source_element ()\n+  {\n+    xfree (line);\n+  }\n+\n+  char *line = nullptr;\n   struct tui_line_or_address line_or_addr;\n-  bool is_exec_point;\n-  int has_break;\n+  bool is_exec_point = false;\n+  int has_break = 0;\n };\n \n \n@@ -200,17 +202,6 @@ struct tui_source_element\n \n typedef char tui_exec_info_content[TUI_EXECINFO_SIZE];\n \n-/* An content element in a window.  */\n-union tui_which_element\n-{\n-  struct tui_source_element source;\t/* The source elements.  */\n-};\n-\n-struct tui_win_element\n-{\n-  union tui_which_element which_element;\n-};\n-\n /* Execution info window class.  */\n \n struct tui_exec_info_window : public tui_gen_win_info\n@@ -410,6 +401,8 @@ struct tui_source_window_base : public tui_win_info\n \n   /* Architecture associated with code at this location.  */\n   struct gdbarch *gdbarch = nullptr;\n+\n+  std::vector<tui_source_element> content;\n };\n \n /* A TUI source window.  */\n@@ -461,7 +454,6 @@ struct tui_data_window : public tui_win_info\n   {\n   }\n \n-  ~tui_data_window () override;\n   DISABLE_COPY_AND_ASSIGN (tui_data_window);\n \n   void clear_detail () override;\n@@ -551,9 +543,6 @@ extern struct tui_win_info *tui_win_list[MAX_MAJOR_WINDOWS];\n \n /* Data Manipulation Functions.  */\n extern void tui_initialize_static_data (void);\n-extern tui_win_content tui_alloc_content (int, enum tui_win_type);\n-extern void tui_free_win_content (struct tui_gen_win_info *);\n-extern void tui_free_all_source_wins_content (void);\n extern struct tui_win_info *tui_partial_win_by_name (const char *);\n extern enum tui_layout_type tui_current_layout (void);\n extern void tui_set_current_layout_to (enum tui_layout_type);"
    },
    {
      "sha": "d3d53d7c607e1d90be040b82996c0a23ae8c348e",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 7,
      "deletions": 12,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
      "patch": "@@ -219,27 +219,23 @@ tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n   line = (char*) alloca (insn_pos + insn_size + 1);\n \n   /* Now construct each line.  */\n+  TUI_DISASM_WIN->content.resize (max_lines);\n   for (i = 0; i < max_lines; i++)\n     {\n-      struct tui_win_element *element;\n-      struct tui_source_element *src;\n       int cur_len;\n \n-      element = TUI_DISASM_WIN->content[i];\n-      src = &element->which_element.source;\n+      tui_source_element *src = &TUI_DISASM_WIN->content[i];\n       strcpy (line, asm_lines[i].addr_string);\n       cur_len = strlen (line);\n       memset (line + cur_len, ' ', insn_pos - cur_len);\n       strcpy (line + insn_pos, asm_lines[i].insn);\n \n       /* Now copy the line taking the offset into account.  */\n+      xfree (src->line);\n       if (strlen (line) > offset)\n-\t{\n-\t  strncpy (src->line, &line[offset], line_width);\n-\t  src->line[line_width] = '\\0';\n-\t}\n+\tsrc->line = xstrndup (&line[offset], line_width);\n       else\n-        src->line[0] = '\\0';\n+\tsrc->line = xstrdup (\"\");\n \n       src->line_or_addr.loa = LOA_ADDRESS;\n       src->line_or_addr.u.addr = asm_lines[i].addr;\n@@ -254,7 +250,6 @@ tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n       xfree (asm_lines[i].addr_string);\n       xfree (asm_lines[i].insn);\n     }\n-  TUI_DISASM_WIN->content_size = i;\n   return TUI_SUCCESS;\n }\n \n@@ -371,12 +366,12 @@ tui_get_low_disassembly_address (struct gdbarch *gdbarch,\n void\n tui_disasm_window::do_scroll_vertical (int num_to_scroll)\n {\n-  if (content != NULL)\n+  if (!content.empty ())\n     {\n       CORE_ADDR pc;\n       struct tui_line_or_address val;\n \n-      pc = content[0]->which_element.source.line_or_addr.u.addr;\n+      pc = content[0].line_or_addr.u.addr;\n       if (num_to_scroll >= 0)\n \tnum_to_scroll++;\n       else"
    },
    {
      "sha": "9dbb59959988c9cfd563906e68dfc75e91f9d61b",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
      "patch": "@@ -81,7 +81,6 @@ show_layout (enum tui_layout_type layout)\n       /* Since the new layout may cause changes in window size, we\n          should free the content and reallocate on next display of\n          source/asm.  */\n-      tui_free_all_source_wins_content ();\n       tui_clear_source_windows ();\n       if (layout == SRC_DATA_COMMAND \n \t  || layout == DISASSEM_DATA_COMMAND)"
    },
    {
      "sha": "4f82cbab2dba56f1d720d2986923e06ea9b05265",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 24,
      "deletions": 29,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
      "patch": "@@ -176,10 +176,11 @@ tui_set_source_content (struct symtab *s,\n \t  cur_line_no = src->start_line_or_addr.u.line_no = line_no;\n \n \t  const char *iter = srclines.c_str ();\n+\t  TUI_SRC_WIN->content.resize (nlines);\n \t  while (cur_line < nlines)\n \t    {\n-\t      struct tui_win_element *element\n-\t\t= TUI_SRC_WIN->content[cur_line];\n+\t      struct tui_source_element *element\n+\t\t= &TUI_SRC_WIN->content[cur_line];\n \n \t      std::string text;\n \t      if (*iter != '\\0')\n@@ -189,25 +190,20 @@ tui_set_source_content (struct symtab *s,\n \n \t      /* Set whether element is the execution point\n \t\t and whether there is a break point on it.  */\n-\t      element->which_element.source.line_or_addr.loa =\n-\t\tLOA_LINE;\n-\t      element->which_element.source.line_or_addr.u.line_no =\n-\t\tcur_line_no;\n-\t      element->which_element.source.is_exec_point =\n-\t\t(filename_cmp (locator->full_name,\n-\t\t\t       symtab_to_fullname (s)) == 0\n-\t\t && cur_line_no == locator->line_no);\n-\n-\t      xfree (TUI_SRC_WIN->content[cur_line]\n-\t\t     ->which_element.source.line);\n-\t      TUI_SRC_WIN->content[cur_line]\n-\t\t->which_element.source.line\n+\t      element->line_or_addr.loa = LOA_LINE;\n+\t      element->line_or_addr.u.line_no = cur_line_no;\n+\t      element->is_exec_point\n+\t\t= (filename_cmp (locator->full_name,\n+\t\t\t\t symtab_to_fullname (s)) == 0\n+\t\t   && cur_line_no == locator->line_no);\n+\n+\t      xfree (TUI_SRC_WIN->content[cur_line].line);\n+\t      TUI_SRC_WIN->content[cur_line].line\n \t\t= xstrdup (text.c_str ());\n \n \t      cur_line++;\n \t      cur_line_no++;\n \t    }\n-\t  TUI_SRC_WIN->content_size = nlines;\n \t  ret = TUI_SUCCESS;\n \t}\n     }\n@@ -234,21 +230,21 @@ tui_set_source_content_nil (struct tui_source_window_base *win_info,\n \n   /* Set to empty each line in the window, except for the one which\n      contains the message.  */\n-  while (curr_line < win_info->content_size)\n+  while (curr_line < win_info->content.size ())\n     {\n       /* Set the information related to each displayed line to null:\n          i.e. the line number is 0, there is no bp, it is not where\n          the program is stopped.  */\n \n-      struct tui_win_element *element = win_info->content[curr_line];\n+      struct tui_source_element *element = &win_info->content[curr_line];\n \n-      element->which_element.source.line_or_addr.loa = LOA_LINE;\n-      element->which_element.source.line_or_addr.u.line_no = 0;\n-      element->which_element.source.is_exec_point = false;\n-      element->which_element.source.has_break = FALSE;\n+      element->line_or_addr.loa = LOA_LINE;\n+      element->line_or_addr.u.line_no = 0;\n+      element->is_exec_point = false;\n+      element->has_break = FALSE;\n \n       /* Set the contents of the line to blank.  */\n-      element->which_element.source.line[0] = (char) 0;\n+      element->line[0] = (char) 0;\n \n       /* If the current line is in the middle of the screen, then we\n          want to display the 'no source available' message in it.\n@@ -269,8 +265,8 @@ tui_set_source_content_nil (struct tui_source_window_base *win_info,\n \t    xpos = (line_width - 1) / 2 - warning_length;\n \n \t  src_line = xstrprintf (\"%s%s\", n_spaces (xpos), warning_string);\n-\t  xfree (element->which_element.source.line);\n-\t  element->which_element.source.line = src_line;\n+\t  xfree (element->line);\n+\t  element->line = src_line;\n \t}\n \n       curr_line++;\n@@ -306,7 +302,7 @@ tui_source_is_displayed (const char *fullname)\n void\n tui_source_window::do_scroll_vertical (int num_to_scroll)\n {\n-  if (content != NULL)\n+  if (!content.empty ())\n     {\n       struct tui_line_or_address l;\n       struct symtab *s;\n@@ -318,13 +314,12 @@ tui_source_window::do_scroll_vertical (int num_to_scroll)\n \ts = cursal.symtab;\n \n       l.loa = LOA_LINE;\n-      l.u.line_no = content[0]->which_element.source.line_or_addr.u.line_no\n+      l.u.line_no = content[0].line_or_addr.u.line_no\n \t+ num_to_scroll;\n       if (l.u.line_no > s->nlines)\n \t/* line = s->nlines - win_info->content_size + 1; */\n \t/* elz: fix for dts 23398.  */\n-\tl.u.line_no\n-\t  = content[0]->which_element.source.line_or_addr.u.line_no;\n+\tl.u.line_no = content[0].line_or_addr.u.line_no;\n       if (l.u.line_no <= 0)\n \tl.u.line_no = 1;\n "
    },
    {
      "sha": "557f8b5d2d60cef18cc2bce4a767d3c0e2c26b1b",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
      "patch": "@@ -616,7 +616,7 @@ tui_resize_all (void)\n \t  make_invisible_and_set_new_height (TUI_CMD_WIN, new_height);\n \t  first_win->make_visible_with_new_height ();\n \t  TUI_CMD_WIN->make_visible_with_new_height ();\n-\t  if (src_win->content_size <= 0)\n+\t  if (src_win->content.empty ())\n \t    tui_erase_source_content (src_win, EMPTY_SOURCE_PROMPT);\n \t  break;\n \tdefault:\n@@ -681,7 +681,7 @@ tui_resize_all (void)\n \t  first_win->make_visible_with_new_height ();\n \t  second_win->make_visible_with_new_height ();\n \t  TUI_CMD_WIN->make_visible_with_new_height ();\n-\t  if (src_win->content_size <= 0)\n+\t  if (src_win->content.empty ())\n \t    tui_erase_source_content (src_win, EMPTY_SOURCE_PROMPT);\n \t  break;\n \t}\n@@ -1127,11 +1127,14 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t      win_info->make_visible_with_new_height ();\n \t      primary_win_info->make_visible_with_new_height ();\n \t      if ((src_win_info->type == SRC_WIN\n-\t\t   || src_win_info->type == DISASSEM_WIN)\n-\t\t  && src_win_info->content_size <= 0)\n-\t\ttui_erase_source_content\n-\t\t  ((tui_source_window_base *) src_win_info,\n-\t\t   EMPTY_SOURCE_PROMPT);\n+\t\t   || src_win_info->type == DISASSEM_WIN))\n+\t\t{\n+\t\t  tui_source_window_base *src_base\n+\t\t    = (tui_source_window_base *) src_win_info;\n+\t\t  if (src_base->content.empty ())\n+\t\t    tui_erase_source_content (src_base,\n+\t\t\t\t\t      EMPTY_SOURCE_PROMPT);\n+\t\t}\n \t    }\n \t  else\n \t    {\n@@ -1236,9 +1239,9 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t      TUI_CMD_WIN->make_visible_with_new_height ();\n \t      second_win->make_visible_with_new_height ();\n \t      first_win->make_visible_with_new_height ();\n-\t      if (src1 != nullptr && src1->content_size <= 0)\n+\t      if (src1 != nullptr && src1->content.empty ())\n \t\ttui_erase_source_content (src1, EMPTY_SOURCE_PROMPT);\n-\t      if (second_win->content_size <= 0)\n+\t      if (second_win->content.empty ())\n \t\ttui_erase_source_content (second_win, EMPTY_SOURCE_PROMPT);\n \t    }\n \t}\n@@ -1319,16 +1322,14 @@ tui_win_info::make_visible_with_new_height ()\n void\n tui_source_window_base::do_make_visible_with_new_height ()\n {\n-  tui_free_win_content (execution_info);\n   tui_make_visible (execution_info);\n-  if (content != NULL)\n+  if (!content.empty ())\n     {\n       struct tui_line_or_address line_or_addr;\n       struct symtab_and_line cursal\n \t= get_current_source_symtab_and_line ();\n \n       line_or_addr = start_line_or_addr;\n-      tui_free_win_content (this);\n       tui_update_source_window (this, gdbarch,\n \t\t\t\tcursal.symtab, line_or_addr, TRUE);\n     }"
    },
    {
      "sha": "93c6253fd658d9cbe10b4ceccdbe0cc6c233769c",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 41,
      "deletions": 48,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
      "patch": "@@ -113,7 +113,7 @@ tui_update_source_window_as_is (struct tui_source_window_base *win_info,\n \t  symtab_and_line sal;\n \n \t  sal.line = line_or_addr.u.line_no +\n-\t    (win_info->content_size - 2);\n+\t    (win_info->content.size () - 2);\n \t  sal.symtab = s;\n \t  sal.pspace = SYMTAB_PSPACE (s);\n \t  set_current_source_symtab_and_line (sal);\n@@ -213,12 +213,12 @@ tui_clear_source_content (struct tui_source_window_base *win_info,\n \n       win_info->content_in_use = FALSE;\n       tui_erase_source_content (win_info, display_prompt);\n-      for (i = 0; i < win_info->content_size; i++)\n+      for (i = 0; i < win_info->content.size (); i++)\n \t{\n-\t  struct tui_win_element *element = win_info->content[i];\n+\t  struct tui_source_element *element = &win_info->content[i];\n \n-\t  element->which_element.source.has_break = FALSE;\n-\t  element->which_element.source.is_exec_point = false;\n+\t  element->has_break = FALSE;\n+\t  element->is_exec_point = false;\n \t}\n     }\n }\n@@ -266,19 +266,19 @@ tui_erase_source_content (struct tui_source_window_base *win_info,\n \n /* Redraw the complete line of a source or disassembly window.  */\n static void\n-tui_show_source_line (struct tui_win_info *win_info, int lineno)\n+tui_show_source_line (struct tui_source_window_base *win_info, int lineno)\n {\n-  struct tui_win_element *line;\n+  struct tui_source_element *line;\n   int x;\n \n-  line = win_info->content[lineno - 1];\n-  if (line->which_element.source.is_exec_point)\n+  line = &win_info->content[lineno - 1];\n+  if (line->is_exec_point)\n     tui_set_reverse_mode (win_info->handle, true);\n \n   wmove (win_info->handle, lineno, 1);\n-  tui_puts (line->which_element.source.line,\n+  tui_puts (line->line,\n \t    win_info->handle);\n-  if (line->which_element.source.is_exec_point)\n+  if (line->is_exec_point)\n     tui_set_reverse_mode (win_info->handle, false);\n \n   /* Clear to end of line but stop before the border.  */\n@@ -293,11 +293,11 @@ tui_show_source_line (struct tui_win_info *win_info, int lineno)\n void\n tui_show_source_content (struct tui_source_window_base *win_info)\n {\n-  if (win_info->content_size > 0)\n+  if (!win_info->content.empty ())\n     {\n       int lineno;\n \n-      for (lineno = 1; lineno <= win_info->content_size; lineno++)\n+      for (lineno = 1; lineno <= win_info->content.size (); lineno++)\n         tui_show_source_line (win_info, lineno);\n     }\n   else\n@@ -324,8 +324,7 @@ tui_source_window_base::refill ()\n     }\n \n   tui_update_source_window_as_is (this, gdbarch, s,\n-\t\t\t\t  content[0]\n-\t\t\t\t    ->which_element.source.line_or_addr,\n+\t\t\t\t  content[0].line_or_addr,\n \t\t\t\t  FALSE);\n }\n \n@@ -334,7 +333,7 @@ tui_source_window_base::refill ()\n void\n tui_source_window_base::do_scroll_horizontal (int num_to_scroll)\n {\n-  if (content != NULL)\n+  if (!content.empty ())\n     {\n       int offset = horizontal_offset + num_to_scroll;\n       if (offset < 0)\n@@ -355,11 +354,11 @@ tui_source_window_base::set_is_exec_point_at (struct tui_line_or_address l)\n   int i;\n \n   i = 0;\n-  while (i < content_size)\n+  while (i < content.size ())\n     {\n       bool new_state;\n       struct tui_line_or_address content_loa =\n-\tcontent[i]->which_element.source.line_or_addr;\n+\tcontent[i].line_or_addr;\n \n       gdb_assert (l.loa == LOA_ADDRESS || l.loa == LOA_LINE);\n       gdb_assert (content_loa.loa == LOA_LINE\n@@ -370,10 +369,10 @@ tui_source_window_base::set_is_exec_point_at (struct tui_line_or_address l)\n         new_state = true;\n       else\n \tnew_state = false;\n-      if (new_state != content[i]->which_element.source.is_exec_point)\n+      if (new_state != content[i].is_exec_point)\n         {\n           changed = true;\n-          content[i]->which_element.source.is_exec_point = new_state;\n+          content[i].is_exec_point = new_state;\n           tui_show_source_line (this, i + 1);\n         }\n       i++;\n@@ -405,21 +404,21 @@ tui_update_all_breakpoint_info ()\n    refreshed.  */\n \n int\n-tui_update_breakpoint_info (struct tui_win_info *win, \n+tui_update_breakpoint_info (struct tui_source_window_base *win, \n \t\t\t    int current_only)\n {\n   int i;\n   int need_refresh = 0;\n   tui_source_window_base *src = (tui_source_window_base *) win;\n \n-  for (i = 0; i < win->content_size; i++)\n+  for (i = 0; i < win->content.size (); i++)\n     {\n       struct breakpoint *bp;\n       extern struct breakpoint *breakpoint_chain;\n       int mode;\n       struct tui_source_element *line;\n \n-      line = &win->content[i]->which_element.source;\n+      line = &win->content[i];\n       if (current_only && !line->is_exec_point)\n          continue;\n \n@@ -493,20 +492,20 @@ tui_set_exec_info_content (struct tui_source_window_base *win_info)\n \t= win_info->execution_info->maybe_allocate_content (win_info->height);\n \n       tui_update_breakpoint_info (win_info, 1);\n-      for (int i = 0; i < win_info->content_size; i++)\n+      for (int i = 0; i < win_info->content.size (); i++)\n \t{\n \t  tui_exec_info_content &element = content[i];\n-\t  struct tui_win_element *src_element;\n+\t  struct tui_source_element *src_element;\n \t  int mode;\n \n-\t  src_element = win_info->content[i];\n+\t  src_element = &win_info->content[i];\n \n \t  memset (element, ' ', sizeof (tui_exec_info_content));\n \t  element[TUI_EXECINFO_SIZE - 1] = 0;\n \n \t  /* Now update the exec info content based upon the state\n \t     of each line as indicated by the source content.  */\n-\t  mode = src_element->which_element.source.has_break;\n+\t  mode = src_element->has_break;\n \t  if (mode & TUI_BP_HIT)\n \t    element[TUI_BP_HIT_POS] = (mode & TUI_BP_HARDWARE) ? 'H' : 'B';\n \t  else if (mode & (TUI_BP_ENABLED | TUI_BP_DISABLED))\n@@ -517,7 +516,7 @@ tui_set_exec_info_content (struct tui_source_window_base *win_info)\n \t  else if (mode & TUI_BP_DISABLED)\n \t    element[TUI_BP_BREAK_POS] = '-';\n \n-\t  if (src_element->which_element.source.is_exec_point)\n+\t  if (src_element->is_exec_point)\n \t    element[TUI_EXEC_POS] = '>';\n \t}\n     }\n@@ -532,7 +531,7 @@ tui_show_exec_info_content (struct tui_source_window_base *win_info)\n \n   werase (exec_info->handle);\n   exec_info->refresh_window ();\n-  for (int cur_line = 1; (cur_line <= win_info->content_size); cur_line++)\n+  for (int cur_line = 1; cur_line <= win_info->content.size (); cur_line++)\n     mvwaddstr (exec_info->handle,\n \t       cur_line,\n \t       0,\n@@ -567,7 +566,7 @@ tui_update_exec_info (struct tui_source_window_base *win_info)\n }\n \n void\n-tui_alloc_source_buffer (struct tui_win_info *win_info)\n+tui_alloc_source_buffer (struct tui_source_window_base *win_info)\n {\n   int i, line_width, max_lines;\n \n@@ -577,13 +576,11 @@ tui_alloc_source_buffer (struct tui_win_info *win_info)\n   line_width = win_info->width - 2 + 1;\n \n   /* Allocate the buffer for the source lines.  */\n-  if (win_info->content == NULL)\n+  win_info->content.resize (max_lines);\n+  for (i = 0; i < max_lines; i++)\n     {\n-      /* Allocate the content list.  */\n-      win_info->content = tui_alloc_content (max_lines, SRC_WIN);\n-      for (i = 0; i < max_lines; i++)\n-\twin_info->content[i]->which_element.source.line\n-\t  = (char *) xmalloc (line_width);\n+      if (win_info->content[i].line == nullptr)\n+\twin_info->content[i].line = (char *) xmalloc (line_width);\n     }\n }\n \n@@ -592,7 +589,7 @@ tui_alloc_source_buffer (struct tui_win_info *win_info)\n    in the current source window.  */\n int\n tui_line_is_displayed (int line, \n-\t\t       struct tui_win_info *win_info,\n+\t\t       struct tui_source_window_base *win_info,\n \t\t       int check_threshold)\n {\n   int is_displayed = FALSE;\n@@ -603,14 +600,12 @@ tui_line_is_displayed (int line,\n   else\n     threshold = 0;\n   i = 0;\n-  while (i < win_info->content_size - threshold\n+  while (i < win_info->content.size () - threshold\n \t && !is_displayed)\n     {\n       is_displayed\n-\t= win_info->content[i]\n-\t    ->which_element.source.line_or_addr.loa == LOA_LINE\n-\t  && win_info->content[i]\n-\t       ->which_element.source.line_or_addr.u.line_no == line;\n+\t= win_info->content[i].line_or_addr.loa == LOA_LINE\n+\t  && win_info->content[i].line_or_addr.u.line_no == line;\n       i++;\n     }\n \n@@ -622,7 +617,7 @@ tui_line_is_displayed (int line,\n    in the current source window.  */\n int\n tui_addr_is_displayed (CORE_ADDR addr, \n-\t\t       struct tui_win_info *win_info,\n+\t\t       struct tui_source_window_base *win_info,\n \t\t       int check_threshold)\n {\n   int is_displayed = FALSE;\n@@ -633,14 +628,12 @@ tui_addr_is_displayed (CORE_ADDR addr,\n   else\n     threshold = 0;\n   i = 0;\n-  while (i < win_info->content_size - threshold\n+  while (i < win_info->content.size () - threshold\n \t && !is_displayed)\n     {\n       is_displayed\n-\t= win_info->content[i]\n-\t    ->which_element.source.line_or_addr.loa == LOA_ADDRESS\n-\t  && win_info->content[i]\n-\t       ->which_element.source.line_or_addr.u.addr == addr;\n+\t= win_info->content[i].line_or_addr.loa == LOA_ADDRESS\n+\t  && win_info->content[i].line_or_addr.u.addr == addr;\n       i++;\n     }\n "
    },
    {
      "sha": "adf4af45359d8a53389926508cdd04a113bf140c",
      "filename": "gdb/tui/tui-winsource.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-winsource.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53e7cdbaa1d8c0c53038226de07d8160d7f66d82/gdb/tui/tui-winsource.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.h?ref=53e7cdbaa1d8c0c53038226de07d8160d7f66d82",
      "patch": "@@ -34,7 +34,7 @@ extern void tui_update_all_breakpoint_info (void);\n /* Scan the source window and the breakpoints to update the hasBreak\n    information for each line.  Returns 1 if something changed and the\n    execution window must be refreshed.  */\n-extern int tui_update_breakpoint_info (struct tui_win_info *win,\n+extern int tui_update_breakpoint_info (struct tui_source_window_base *win,\n \t\t\t\t       int current_only);\n \n /* Function to display the \"main\" routine.  */\n@@ -59,12 +59,12 @@ extern void tui_erase_exec_info_content (struct tui_source_window_base *);\n extern void tui_clear_exec_info_content (struct tui_source_window_base *);\n extern void tui_update_exec_info (struct tui_source_window_base *);\n \n-extern void tui_alloc_source_buffer (struct tui_win_info *);\n-extern int tui_line_is_displayed (int, \n-\t\t\t\t  struct tui_win_info *, \n+extern void tui_alloc_source_buffer (struct tui_source_window_base *);\n+extern int tui_line_is_displayed (int,\n+\t\t\t\t  struct tui_source_window_base *,\n \t\t\t\t  int);\n-extern int tui_addr_is_displayed (CORE_ADDR, \n-\t\t\t\t  struct tui_win_info *, \n+extern int tui_addr_is_displayed (CORE_ADDR,\n+\t\t\t\t  struct tui_source_window_base *,\n \t\t\t\t  int);\n \n "
    }
  ]
}