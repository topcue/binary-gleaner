{
  "sha": "b91919ac8b5550451093f232a596dfe52a71536c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjkxOTE5YWM4YjU1NTA0NTEwOTNmMjMyYTU5NmRmZTUyYTcxNTM2Yw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-19T16:57:05Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-24T16:58:03Z"
    },
    "message": "gdb/testsuite: enable gdb.base/sect-cmd.exp test for all targets\n\nDuring review of the next patch (which changes the 'section' command),\na bug was pointed out.  I wondered why no tests spotted this bug and I\nfound that the 'section' command test (sect-cmd.exp) is only run on\nhppa targets!\n\nIn this commit I have given this test script a bit of a spring clean,\nbringing it up to date with current testsuite style.  I have made some\nof the patterns a little more robust, but in general my intention was\nnot to change the underlying meaning of any of these tests.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/sect-cmd.exp: Rewrite using modern testsuite\n\ttechniques.  Enable the test for all targets.",
    "tree": {
      "sha": "beb23610ed588c49d3670c12ac3cb5096e164124",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/beb23610ed588c49d3670c12ac3cb5096e164124"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b91919ac8b5550451093f232a596dfe52a71536c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b91919ac8b5550451093f232a596dfe52a71536c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b91919ac8b5550451093f232a596dfe52a71536c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b91919ac8b5550451093f232a596dfe52a71536c/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/19cf757a87d4ad1300f3de1e5c9bcb675e0ef331"
    }
  ],
  "stats": {
    "total": 141,
    "additions": 56,
    "deletions": 85
  },
  "files": [
    {
      "sha": "109ede33acc9ccb631901413bc46f744839637fb",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b91919ac8b5550451093f232a596dfe52a71536c/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b91919ac8b5550451093f232a596dfe52a71536c/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=b91919ac8b5550451093f232a596dfe52a71536c",
      "patch": "@@ -1,3 +1,8 @@\n+2021-02-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/sect-cmd.exp: Rewrite using modern testsuite\n+\ttechniques.  Enable the test for all targets.\n+\n 2021-02-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.base/maint-info-sections.exp: Add new tests."
    },
    {
      "sha": "e42f46d38ca279da241a8ef05b7d5a2cac79dd48",
      "filename": "gdb/testsuite/gdb.base/sect-cmd.exp",
      "status": "modified",
      "additions": 51,
      "deletions": 85,
      "changes": 136,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b91919ac8b5550451093f232a596dfe52a71536c/gdb/testsuite/gdb.base/sect-cmd.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b91919ac8b5550451093f232a596dfe52a71536c/gdb/testsuite/gdb.base/sect-cmd.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/sect-cmd.exp?ref=b91919ac8b5550451093f232a596dfe52a71536c",
      "patch": "@@ -13,114 +13,80 @@\n # You should have received a copy of the GNU General Public License\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n-#\n-# test running programs\n-#\n+# Test the 'section NAME ADDRESS' command.\n \n-# This test exists solely to exercise the \"section\" command for\n-# code-coverage on HP-UX.  (So far as I can tell, the \"section\"\n-# command isn't needed on HP-UX, but probably is for embedded\n-# apps.)\n-#\n-if ![istarget \"hppa*-*-hpux*\"] then {\n-  return\n+if { [prepare_for_testing \"failed to prepare\" \"sect-cmd\" \\\n+\t  {break.c break1.c} {debug nowarnings}] } {\n+    return -1\n }\n-\n-set testfile \"sect-cmd\"\n set srcfile break.c\n set srcfile1 break1.c\n-set binfile ${objdir}/${subdir}/${testfile}\n \n-if { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}0.o\" object {debug nowarnings}] != \"\" } {\n-    untested \"failed to compile\"\n-    return -1\n+if ![runto_main] then {\n+    fail \"couldn't run to main\"\n+    return\n }\n \n-if { [gdb_compile \"${srcdir}/${subdir}/${srcfile1}\" \"${binfile}1.o\" object {debug nowarnings}] != \"\" } {\n-    untested \"failed to compile\"\n-    return -1\n-}\n+# Get the address of an executable section.  This test was originally\n+# written for (and only run on) hppa targets.  For PA32 programs using\n+# the SOM file format the code section is (apparently) called $CODE$,\n+# hence why the patterns here include that as a choice.\n+#\n+set address1 \"\"\n+set address2 \"\"\n+set section_name \"\"\n \n-if { [gdb_compile \"${binfile}0.o ${binfile}1.o\" \"${binfile}\" executable {debug nowarnings}] != \"\" } {\n-    untested \"failed to compile\"\n-    return -1\n+gdb_test_multiple \"info files\" \"\" {\n+    -re -wrap \"\\\\s+($hex) - ($hex) is (\\\\\\$CODE\\\\\\$|\\\\.text\\\\S*) in .*\" {\n+\tset address1 $expect_out(1,string)\n+\tset address2 $expect_out(2,string)\n+\tset section_name $expect_out(3,string)\n+\tpass $gdb_test_name\n+    }\n }\n \n-gdb_exit\n-gdb_start\n-gdb_reinitialize_dir $srcdir/$subdir\n-gdb_load ${binfile}\n-\n-if ![runto_main] then { fail \"section command tests suppressed\" }\n-\n-# Get the $CODE$ section's starting address.\n+# If we don't have the details we need then we can't continue.\n #\n-# (Note that this works for PA32 programs, which use the SOM file\n-# format.  PA64 uses ELF, and when support for that is added, it's\n-# not clear that there'll be a section named \"$CODE$\" in such\n-# programs.)\n-#\n-\n-set address1 \"\"\n-set address2 \"\"\n-send_gdb \"info files\\n\"\n-gdb_expect {\n-  -re \".*(0x\\[0-9a-fA-F\\]*) - (0x\\[0-9a-fA-F\\]*) is .(CODE|text).*$gdb_prompt $\"\\\n-          {pass \"info files\"\n-\t   set address1 $expect_out(1,string)\n-\t   set address2 $expect_out(2,string)}\n-  -re \"$gdb_prompt $\"\\\n-          {fail \"info files\"}\n-  timeout {fail \"(timeout) info files\"}\n+if { $address1 == \"\" || $address2 == \"\" || $section_name == \"\" } {\n+    unresolved \"failed to find required section details\"\n+    return\n }\n \n # Reset the section to that same starting address, which should be\n # harmless (i.e., we just want to exercise the section command).\n #\n-if [istarget \"hppa2.0w-*-*\"] then {\n-  send_gdb \"section \\.text $address1\\n\"\n-  gdb_expect {\n-    -re \".*$address1 \\- $address2 is .text.*$gdb_prompt $\"\\\n-            {pass \"set section command\"}\n-    -re \"$gdb_prompt $\"\\\n-            {fail \"set section command\"}\n-    timeout {fail \"(timeout) set section command\"}\n-  }\n-} else {\n-  send_gdb \"section \\$CODE\\$ $address1\\n\"\n-  gdb_expect {\n-    -re \".*$address1 \\- $address2 is .CODE..*$gdb_prompt $\"\\\n-            {pass \"set section command\"}\n-    -re \"$gdb_prompt $\"\\\n-            {fail \"set section command\"}\n-    timeout {fail \"(timeout) set section command\"}\n-  }\n-}\n+set saw_section_address_line false\n+gdb_test_multiple \"section $section_name $address1\" \\\n+    \"set section $section_name to original address\" {\n+\t-re \".*$address1 \\- $address2 is $section_name.*\" {\n+\t    set saw_section_address_line true\n+\t    exp_continue\n+\t}\n+\t-re \"Section \\[^\\r\\n\\]+ not found\\r\\n\" {\n+\t    fail \"$gdb_test_name, saw not found marker\"\n+\t    exp_continue\n+\t}\n+\t-re \"$gdb_prompt $\" {\n+\t    gdb_assert { $saw_section_address_line } $gdb_test_name\n+\t}\n+    }\n \n # Verify that GDB responds gracefully to a non-existent section name.\n #\n-send_gdb \"section FOOBARBAZ 0x1234\\n\"\n-gdb_expect {\n-  -re \"Section FOOBARBAZ not found\\r\\n$gdb_prompt $\"\\\n-          {pass \"non-existent section disallowed\"}\n-  -re \"$gdb_prompt $\"\\\n-          {fail \"non-existent section disallowed\"}\n-  timeout {fail \"(timeout) non-existent section disallowed\"}\n+gdb_test_multiple \"section FOOBARBAZ 0x1234\" \"\" {\n+    -re -wrap \"Section FOOBARBAZ not found\" {\n+\tpass $gdb_test_name\n+    }\n }\n \n # We \"happen to know\" that GDB uses a fixed size character buffer to\n # parse the section name into, and the buffer is declared to be 100\n # characters in length.  Verify that GDB gracefully handles section\n # names longer than that.  (The section is also non-existent.)\n #\n-send_gdb \"section A234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123 0x1234\\n\"\n-gdb_expect {\n-  -re \"Section A23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789 not found\\r\\n$gdb_prompt $\"\\\n-          {pass \"non-existent too-long section disallowed\"}\n-  -re \"$gdb_prompt $\"\\\n-          {fail \"non-existent too-long section disallowed\"}\n-  timeout {fail \"(timeout) non-existent too-long section disallowed\"}\n-}\n-\n-gdb_exit\n-return 0\n+gdb_test_multiple \"section A234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123 0x1234\" \\\n+    \"non-existent too-long section disallowed\" {\n+\t-re -wrap \"Section A23456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789 not found\" {\n+\t    pass $gdb_test_name\n+\t}\n+    }"
    }
  ]
}