{
  "sha": "73923d7eedc7ab52144308ef7e9c12cbe4341bca",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzM5MjNkN2VlZGM3YWI1MjE0NDMwOGVmN2U5YzEyY2JlNDM0MWJjYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-24T15:01:18Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-05T01:55:10Z"
    },
    "message": "Turn parse_language into a method\n\nThis changes parse_language into a method of parser_state.  This patch\nwas written by a script.\n\ngdb/ChangeLog\n2019-04-04  Tom Tromey  <tom@tromey.com>\n\n\t* rust-exp.y: Replace \"parse_language\" with method call.\n\t* p-exp.y:\n\t(yylex): Replace \"parse_language\" with method call.\n\t* m2-exp.y:\n\t(yylex): Replace \"parse_language\" with method call.\n\t* go-exp.y (classify_name): Replace \"parse_language\" with method\n\tcall.\n\t* f-exp.y (yylex): Replace \"parse_language\" with method call.\n\t* d-exp.y (lex_one_token): Replace \"parse_language\" with method\n\tcall.\n\t* c-exp.y:\n\t(lex_one_token, classify_name, yylex): Replace \"parse_language\"\n\twith method call.\n\t* ada-exp.y (find_primitive_type, type_char)\n\t(type_system_address): Replace \"parse_language\" with method call.",
    "tree": {
      "sha": "fcee1ced0863bbfbe10f7ac06a670188b21da165",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fcee1ced0863bbfbe10f7ac06a670188b21da165"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/73923d7eedc7ab52144308ef7e9c12cbe4341bca",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/73923d7eedc7ab52144308ef7e9c12cbe4341bca",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/73923d7eedc7ab52144308ef7e9c12cbe4341bca",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/73923d7eedc7ab52144308ef7e9c12cbe4341bca/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa9f5be6830e9245ee1ad1eab9725cc039d45d07",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fa9f5be6830e9245ee1ad1eab9725cc039d45d07"
    }
  ],
  "stats": {
    "total": 147,
    "additions": 85,
    "deletions": 62
  },
  "files": [
    {
      "sha": "39bfff8b4e32c9129bd0ade2da6def6105e59f8a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "patch": "@@ -1,3 +1,21 @@\n+2019-04-04  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-exp.y: Replace \"parse_language\" with method call.\n+\t* p-exp.y: \n+\t(yylex): Replace \"parse_language\" with method call.\n+\t* m2-exp.y: \n+\t(yylex): Replace \"parse_language\" with method call.\n+\t* go-exp.y (classify_name): Replace \"parse_language\" with method\n+\tcall.\n+\t* f-exp.y (yylex): Replace \"parse_language\" with method call.\n+\t* d-exp.y (lex_one_token): Replace \"parse_language\" with method\n+\tcall.\n+\t* c-exp.y: \n+\t(lex_one_token, classify_name, yylex): Replace \"parse_language\"\n+\twith method call.\n+\t* ada-exp.y (find_primitive_type, type_char)\n+\t(type_system_address): Replace \"parse_language\" with method call.\n+\n 2019-04-04  Tom Tromey  <tom@tromey.com>\n \n \t* rust-exp.y: Replace \"parse_gdbarch\" with method call."
    },
    {
      "sha": "f1c587a9d74ab1d4910a2e70fa0687dbb14b1b1d",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "patch": "@@ -1027,7 +1027,7 @@ static struct type*\n find_primitive_type (struct parser_state *par_state, char *name)\n {\n   struct type *type;\n-  type = language_lookup_primitive_type (parse_language (par_state),\n+  type = language_lookup_primitive_type (par_state->language (),\n \t\t\t\t\t par_state->gdbarch (),\n \t\t\t\t\t name);\n   if (type == NULL && strcmp (\"system__address\", name) == 0)\n@@ -1442,7 +1442,7 @@ type_long_double (struct parser_state *par_state)\n static struct type *\n type_char (struct parser_state *par_state)\n {\n-  return language_string_char_type (parse_language (par_state),\n+  return language_string_char_type (par_state->language (),\n \t\t\t\t    par_state->gdbarch ());\n }\n \n@@ -1456,7 +1456,7 @@ static struct type *\n type_system_address (struct parser_state *par_state)\n {\n   struct type *type \n-    = language_lookup_primitive_type (parse_language (par_state),\n+    = language_lookup_primitive_type (par_state->language (),\n \t\t\t\t      par_state->gdbarch (),\n \t\t\t\t      \"system__address\");\n   return  type != NULL ? type : parse_type (par_state)->builtin_data_ptr;"
    },
    {
      "sha": "34e80bfd0bf752e660d38608f63340a6d27def21",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 46,
      "deletions": 46,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "patch": "@@ -815,7 +815,7 @@ exp\t:\tSIZEOF '(' type ')'\t%prec UNARY\n \t\t\t{ struct type *type = $3;\n \t\t\t  write_exp_elt_opcode (pstate, OP_LONG);\n \t\t\t  write_exp_elt_type (pstate, lookup_signed_typename\n-\t\t\t\t\t      (parse_language (pstate),\n+\t\t\t\t\t      (pstate->language (),\n \t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t       \"int\"));\n \t\t\t  type = check_typedef (type);\n@@ -1284,117 +1284,117 @@ typebase\n \t:\tTYPENAME\n \t\t\t{ $$ = $1.type; }\n \t|\tINT_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"int\"); }\n \t|\tLONG\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long\"); }\n \t|\tSHORT\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"short\"); }\n \t|\tLONG INT_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long\"); }\n \t|\tLONG SIGNED_KEYWORD INT_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long\"); }\n \t|\tLONG SIGNED_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long\"); }\n \t|\tSIGNED_KEYWORD LONG INT_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long\"); }\n \t|\tUNSIGNED LONG INT_KEYWORD\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long\"); }\n \t|\tLONG UNSIGNED INT_KEYWORD\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long\"); }\n \t|\tLONG UNSIGNED\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long\"); }\n \t|\tLONG LONG\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tLONG LONG INT_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tLONG LONG SIGNED_KEYWORD INT_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tLONG LONG SIGNED_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tSIGNED_KEYWORD LONG LONG\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tSIGNED_KEYWORD LONG LONG INT_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"long long\"); }\n \t|\tUNSIGNED LONG LONG\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long long\"); }\n \t|\tUNSIGNED LONG LONG INT_KEYWORD\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long long\"); }\n \t|\tLONG LONG UNSIGNED\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long long\"); }\n \t|\tLONG LONG UNSIGNED INT_KEYWORD\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"long long\"); }\n \t|\tSHORT INT_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"short\"); }\n \t|\tSHORT SIGNED_KEYWORD INT_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"short\"); }\n \t|\tSHORT SIGNED_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"short\"); }\n \t|\tUNSIGNED SHORT INT_KEYWORD\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"short\"); }\n \t|\tSHORT UNSIGNED\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"short\"); }\n \t|\tSHORT UNSIGNED INT_KEYWORD\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"short\"); }\n \t|\tDOUBLE_KEYWORD\n-\t\t\t{ $$ = lookup_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_typename (pstate->language (),\n \t\t\t\t\t\tpstate->gdbarch (),\n \t\t\t\t\t\t\"double\",\n \t\t\t\t\t\tNULL,\n \t\t\t\t\t\t0); }\n \t|\tLONG DOUBLE_KEYWORD\n-\t\t\t{ $$ = lookup_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_typename (pstate->language (),\n \t\t\t\t\t\tpstate->gdbarch (),\n \t\t\t\t\t\t\"long double\",\n \t\t\t\t\t\tNULL,\n@@ -1456,19 +1456,19 @@ typebase\n \t\t\t  $$ = NULL;\n \t\t\t}\n \t|\tUNSIGNED type_name\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t TYPE_NAME($2.type)); }\n \t|\tUNSIGNED\n-\t\t\t{ $$ = lookup_unsigned_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_unsigned_typename (pstate->language (),\n \t\t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t\t \"int\"); }\n \t|\tSIGNED_KEYWORD type_name\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       TYPE_NAME($2.type)); }\n \t|\tSIGNED_KEYWORD\n-\t\t\t{ $$ = lookup_signed_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t       pstate->gdbarch (),\n \t\t\t\t\t\t       \"int\"); }\n                 /* It appears that this rule for templates is never\n@@ -1489,23 +1489,23 @@ type_name:\tTYPENAME\n \t\t{\n \t\t  $$.stoken.ptr = \"int\";\n \t\t  $$.stoken.length = 3;\n-\t\t  $$.type = lookup_signed_typename (parse_language (pstate),\n+\t\t  $$.type = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t    pstate->gdbarch (),\n \t\t\t\t\t\t    \"int\");\n \t\t}\n \t|\tLONG\n \t\t{\n \t\t  $$.stoken.ptr = \"long\";\n \t\t  $$.stoken.length = 4;\n-\t\t  $$.type = lookup_signed_typename (parse_language (pstate),\n+\t\t  $$.type = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t    pstate->gdbarch (),\n \t\t\t\t\t\t    \"long\");\n \t\t}\n \t|\tSHORT\n \t\t{\n \t\t  $$.stoken.ptr = \"short\";\n \t\t  $$.stoken.length = 5;\n-\t\t  $$.type = lookup_signed_typename (parse_language (pstate),\n+\t\t  $$.type = lookup_signed_typename (pstate->language (),\n \t\t\t\t\t\t    pstate->gdbarch (),\n \t\t\t\t\t\t    \"short\");\n \t\t}\n@@ -2555,7 +2555,7 @@ lex_one_token (struct parser_state *par_state, bool *is_quoted_name)\n     if (strncmp (tokstart, tokentab3[i].oper, 3) == 0)\n       {\n \tif ((tokentab3[i].flags & FLAG_CXX) != 0\n-\t    && parse_language (par_state)->la_language != language_cplus)\n+\t    && par_state->language ()->la_language != language_cplus)\n \t  break;\n \n \tlexptr += 3;\n@@ -2568,7 +2568,7 @@ lex_one_token (struct parser_state *par_state, bool *is_quoted_name)\n     if (strncmp (tokstart, tokentab2[i].oper, 2) == 0)\n       {\n \tif ((tokentab2[i].flags & FLAG_CXX) != 0\n-\t    && parse_language (par_state)->la_language != language_cplus)\n+\t    && par_state->language ()->la_language != language_cplus)\n \t  break;\n \n \tlexptr += 2;\n@@ -2612,7 +2612,7 @@ lex_one_token (struct parser_state *par_state, bool *is_quoted_name)\n     case '(':\n       paren_depth++;\n       lexptr++;\n-      if (parse_language (par_state)->la_language == language_objc\n+      if (par_state->language ()->la_language == language_objc\n \t  && c == '[')\n \treturn OBJC_LBRAC;\n       return c;\n@@ -2710,7 +2710,7 @@ lex_one_token (struct parser_state *par_state, bool *is_quoted_name)\n       {\n \tconst char *p = &tokstart[1];\n \n-\tif (parse_language (par_state)->la_language == language_objc)\n+\tif (par_state->language ()->la_language == language_objc)\n \t  {\n \t    size_t len = strlen (\"selector\");\n \n@@ -2862,7 +2862,7 @@ lex_one_token (struct parser_state *par_state, bool *is_quoted_name)\n     if (strcmp (copy, ident_tokens[i].oper) == 0)\n       {\n \tif ((ident_tokens[i].flags & FLAG_CXX) != 0\n-\t    && parse_language (par_state)->la_language != language_cplus)\n+\t    && par_state->language ()->la_language != language_cplus)\n \t  break;\n \n \tif ((ident_tokens[i].flags & FLAG_SHADOW) != 0)\n@@ -2871,7 +2871,7 @@ lex_one_token (struct parser_state *par_state, bool *is_quoted_name)\n \n \t    if (lookup_symbol (copy, expression_context_block,\n \t\t\t       VAR_DOMAIN,\n-\t\t\t       (parse_language (par_state)->la_language\n+\t\t\t       (par_state->language ()->la_language\n \t\t\t        == language_cplus ? &is_a_field_of_this\n \t\t\t\t: NULL)).symbol\n \t\t!= NULL)\n@@ -2940,7 +2940,7 @@ classify_name (struct parser_state *par_state, const struct block *block,\n   memset (&is_a_field_of_this, 0, sizeof (is_a_field_of_this));\n \n   bsym = lookup_symbol (copy, block, VAR_DOMAIN,\n-\t\t\tparse_language (par_state)->la_name_of_this\n+\t\t\tpar_state->language ()->la_name_of_this\n \t\t\t? &is_a_field_of_this : NULL);\n \n   if (bsym.symbol && SYMBOL_CLASS (bsym.symbol) == LOC_BLOCK)\n@@ -2999,7 +2999,7 @@ classify_name (struct parser_state *par_state, const struct block *block,\n     }\n \n   /* See if it's an ObjC classname.  */\n-  if (parse_language (par_state)->la_language == language_objc && !bsym.symbol)\n+  if (par_state->language ()->la_language == language_objc && !bsym.symbol)\n     {\n       CORE_ADDR Class = lookup_objc_class (par_state->gdbarch (), copy);\n       if (Class)\n@@ -3038,7 +3038,7 @@ classify_name (struct parser_state *par_state, const struct block *block,\n   yylval.ssym.is_a_field_of_this = is_a_field_of_this.type != NULL;\n \n   if (bsym.symbol == NULL\n-      && parse_language (par_state)->la_language == language_cplus\n+      && par_state->language ()->la_language == language_cplus\n       && is_a_field_of_this.type == NULL\n       && lookup_minimal_symbol (copy, NULL, NULL).minsym == NULL)\n     return UNKNOWN_CPP_NAME;\n@@ -3147,7 +3147,7 @@ yylex (void)\n   if (current.token == NAME)\n     current.token = classify_name (pstate, expression_context_block,\n \t\t\t\t   is_quoted_name, last_lex_was_structop);\n-  if (parse_language (pstate)->la_language != language_cplus\n+  if (pstate->language ()->la_language != language_cplus\n       || (current.token != TYPENAME && current.token != COLONCOLON\n \t  && current.token != FILENAME))\n     return current.token;"
    },
    {
      "sha": "50c8325d46a1735460d80a6a62cd1e6691697155",
      "filename": "gdb/d-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/d-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/d-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-exp.y?ref=73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "patch": "@@ -1288,7 +1288,7 @@ lex_one_token (struct parser_state *par_state)\n     return DOLLAR_VARIABLE;\n \n   yylval.tsym.type\n-    = language_lookup_primitive_type (parse_language (par_state),\n+    = language_lookup_primitive_type (par_state->language (),\n \t\t\t\t      par_state->gdbarch (), copy);\n   if (yylval.tsym.type != NULL)\n     return TYPENAME;"
    },
    {
      "sha": "ca4077860802d40c8fe6bb3d4f5ee0198b2c8c1b",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "patch": "@@ -1276,7 +1276,7 @@ yylex (void)\n \n \tresult = lookup_symbol (tmp, expression_context_block,\n \t\t\t\tlookup_domains[i],\n-\t\t\t\tparse_language (pstate)->la_language\n+\t\t\t\tpstate->language ()->la_language\n \t\t\t\t== language_cplus\n \t\t\t\t  ? &is_a_field_of_this : NULL);\n \tif (result.symbol && SYMBOL_CLASS (result.symbol) == LOC_TYPEDEF)\n@@ -1290,7 +1290,7 @@ yylex (void)\n       }\n \n     yylval.tsym.type\n-      = language_lookup_primitive_type (parse_language (pstate),\n+      = language_lookup_primitive_type (pstate->language (),\n \t\t\t\t\tpstate->gdbarch (), tmp);\n     if (yylval.tsym.type != NULL)\n       return TYPENAME;"
    },
    {
      "sha": "3f564cf6d9038175f32911efaf25d081c5d24437",
      "filename": "gdb/go-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/go-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/go-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-exp.y?ref=73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "patch": "@@ -1400,7 +1400,7 @@ classify_name (struct parser_state *par_state, const struct block *block)\n   copy = copy_name (yylval.sval);\n \n   /* Try primitive types first so they win over bad/weird debug info.  */\n-  type = language_lookup_primitive_type (parse_language (par_state),\n+  type = language_lookup_primitive_type (par_state->language (),\n \t\t\t\t\t par_state->gdbarch (),\n \t\t\t\t\t copy);\n   if (type != NULL)"
    },
    {
      "sha": "611981fd9c28af9f332a7bfef8de1457563096eb",
      "filename": "gdb/m2-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/m2-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/m2-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-exp.y?ref=73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "patch": "@@ -596,7 +596,7 @@ variable:\tNAME\n \n type\n \t:\tTYPENAME\n-\t\t\t{ $$ = lookup_typename (parse_language (pstate),\n+\t\t\t{ $$ = lookup_typename (pstate->language (),\n \t\t\t\t\t\tpstate->gdbarch (),\n \t\t\t\t\t\tcopy_name ($1),\n \t\t\t\t\t\texpression_context_block, 0); }\n@@ -968,7 +968,7 @@ yylex (void)\n     sym = lookup_symbol (tmp, expression_context_block, VAR_DOMAIN, 0).symbol;\n     if (sym && SYMBOL_CLASS (sym) == LOC_BLOCK)\n       return BLOCKNAME;\n-    if (lookup_typename (parse_language (pstate), pstate->gdbarch (),\n+    if (lookup_typename (pstate->language (), pstate->gdbarch (),\n \t\t\t copy_name (yylval.sval),\n \t\t\t expression_context_block, 1))\n       return TYPENAME;"
    },
    {
      "sha": "79b2979f6a7f2785761fa508c59a8d03ded88b5f",
      "filename": "gdb/p-exp.y",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/p-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/p-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-exp.y?ref=73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "patch": "@@ -591,7 +591,7 @@ exp\t:\tTHIS\n \t\t\t  write_exp_elt_opcode (pstate, OP_THIS);\n \t\t\t  /* We need type of this.  */\n \t\t\t  this_val\n-\t\t\t    = value_of_this_silent (parse_language (pstate));\n+\t\t\t    = value_of_this_silent (pstate->language ());\n \t\t\t  if (this_val)\n \t\t\t    this_type = value_type (this_val);\n \t\t\t  else\n@@ -731,7 +731,7 @@ variable:\tname_not_typename\n \t\t\t      write_exp_elt_opcode (pstate, STRUCTOP_PTR);\n \t\t\t      /* We need type of this.  */\n \t\t\t      this_val\n-\t\t\t\t= value_of_this_silent (parse_language (pstate));\n+\t\t\t\t= value_of_this_silent (pstate->language ());\n \t\t\t      if (this_val)\n \t\t\t\tthis_type = value_type (this_val);\n \t\t\t      else\n@@ -1675,7 +1675,7 @@ yylex (void)\n \t  return TYPENAME;\n         }\n     yylval.tsym.type\n-      = language_lookup_primitive_type (parse_language (pstate),\n+      = language_lookup_primitive_type (pstate->language (),\n \t\t\t\t\tpstate->gdbarch (), tmp);\n     if (yylval.tsym.type != NULL)\n       {"
    },
    {
      "sha": "8fcbca36bb1ffc13375d06df2d50fa1ffcbe6476",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "patch": "@@ -32,8 +32,6 @@ struct internalvar;\n \n extern int parser_debug;\n \n-#define parse_language(ps) ((ps)->expout->language_defn)\n-\n struct parser_state\n {\n   /* Constructor.  LANG is the language used to parse the expression.\n@@ -55,6 +53,13 @@ struct parser_state\n     return expout->gdbarch;\n   }\n \n+  /* Return the language that was passed to the constructor.  */\n+\n+  const struct language_defn *language ()\n+  {\n+    return expout->language_defn;\n+  }\n+\n   /* The size of the expression above.  */\n \n   size_t expout_size;"
    },
    {
      "sha": "9b6ca1994369a4ac107493fae5221986a4f6d92c",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73923d7eedc7ab52144308ef7e9c12cbe4341bca/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "patch": "@@ -205,7 +205,7 @@ struct rust_parser\n   /* Return the parser's language.  */\n   const struct language_defn *language () const\n   {\n-    return parse_language (pstate);\n+    return pstate->language ();\n   }\n \n   /* Return the parser's gdbarch.  */\n@@ -2280,7 +2280,7 @@ rust_parser::convert_ast_to_expression (const struct rust_op *operation,\n \t{\n \t  struct type *type;\n \n-\t  type = language_lookup_primitive_type (parse_language (pstate),\n+\t  type = language_lookup_primitive_type (pstate->language (),\n \t\t\t\t\t\t pstate->gdbarch (),\n \t\t\t\t\t\t \"()\");\n "
    }
  ]
}