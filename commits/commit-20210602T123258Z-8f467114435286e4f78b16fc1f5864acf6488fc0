{
  "sha": "8f467114435286e4f78b16fc1f5864acf6488fc0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGY0NjcxMTQ0MzUyODZlNGY3OGIxNmZjMWY1ODY0YWNmNjQ4OGZjMA==",
  "commit": {
    "author": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2021-06-02T12:30:16Z"
    },
    "committer": {
      "name": "Claudiu Zissulescu",
      "email": "claziss@synopsys.com",
      "date": "2021-06-02T12:32:58Z"
    },
    "message": "arc: Construct disassembler options dynamically\n\nThe idea of this change is simple: Populate a data structure, namely\n\"disasm_option_and_arg_t\" from \"include/dis-asm.h\", to encompass the\ndisassembly options and their possible arguments.\n\nThis will make it easier to manage or extend those options by adapting\nentries in a data structure, \"arc_options\".  There will be lesser need\nto hard-code the options in the code itself.  Moreover, ARC GDB will\nuse this population function, \"disassembler_options_arc ()\", to enable\nthe \"set disassembler-option\" for ARC targets.  The gdb change will be\nin a separate patch though.\n\nThe changes in this patch can be divided into:\n\n1) Introduction of \"disassembler_options_arc ()\" that will return a\n\"disasm_option_and_arg_t\" structure representing the disassembly\noptions and their likely arguments.\n\n2) New data type \"arc_options_arg_t\" and new data \"arc_options\".\nThese are the internals for keeping track of options and arguments\nentries that can easily be extended.\n\n3) To print the options, the \"print_arc_disassembler_options ()\" has\nbeen adjusted to use this dynamically built structure instead of having\nthem hard-coded inside.\n\nTo see this in effect, one can look into the output of:\n$ ./binutils/objdump --help\n  ...\n  The following ARC specific disassembler options are...\n  ...\n\ninclude/ChangeLog:\n\n\t* dis-asm.h (disassembler_options_arc): New prototype.\n\nopcodes/ChangeLog:\n\n\t* arc-dis.c (arc_option_arg_t): New enumeration.\n\t(arc_options): New variable.\n\t(disassembler_options_arc): New function.\n\t(print_arc_disassembler_options): Reimplement in terms of\n\t\"disassembler_options_arc\".",
    "tree": {
      "sha": "f2478dacbe828a020cf9d94a39704363b57d85b3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f2478dacbe828a020cf9d94a39704363b57d85b3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8f467114435286e4f78b16fc1f5864acf6488fc0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f467114435286e4f78b16fc1f5864acf6488fc0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8f467114435286e4f78b16fc1f5864acf6488fc0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f467114435286e4f78b16fc1f5864acf6488fc0/comments",
  "author": null,
  "committer": {
    "login": "claziss",
    "id": 2761368,
    "node_id": "MDQ6VXNlcjI3NjEzNjg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2761368?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/claziss",
    "html_url": "https://github.com/claziss",
    "followers_url": "https://api.github.com/users/claziss/followers",
    "following_url": "https://api.github.com/users/claziss/following{/other_user}",
    "gists_url": "https://api.github.com/users/claziss/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/claziss/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/claziss/subscriptions",
    "organizations_url": "https://api.github.com/users/claziss/orgs",
    "repos_url": "https://api.github.com/users/claziss/repos",
    "events_url": "https://api.github.com/users/claziss/events{/privacy}",
    "received_events_url": "https://api.github.com/users/claziss/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f2d4211150abba189c4fcd2f7cf0290161474631",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f2d4211150abba189c4fcd2f7cf0290161474631",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f2d4211150abba189c4fcd2f7cf0290161474631"
    }
  ],
  "stats": {
    "total": 193,
    "additions": 166,
    "deletions": 27
  },
  "files": [
    {
      "sha": "27c5e29449707604548ba66a87e5992718456a55",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f467114435286e4f78b16fc1f5864acf6488fc0/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f467114435286e4f78b16fc1f5864acf6488fc0/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=8f467114435286e4f78b16fc1f5864acf6488fc0",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-02  Shahab Vahedi  <shahab@synopsys.com>\n+\n+\t* dis-asm.h (disassembler_options_arc): New prototype.\n+\n 2021-05-29  Maciej W. Rozycki  <macro@orcam.me.uk>\n \n \t* opcode/mips.h (cpu_is_member): Remove code for MIPSr6 ISA"
    },
    {
      "sha": "0b91ab47ff3865633815de715d3d4930eb8a74bd",
      "filename": "include/dis-asm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f467114435286e4f78b16fc1f5864acf6488fc0/include/dis-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f467114435286e4f78b16fc1f5864acf6488fc0/include/dis-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/dis-asm.h?ref=8f467114435286e4f78b16fc1f5864acf6488fc0",
      "patch": "@@ -315,6 +315,7 @@ extern void disassemble_init_powerpc (struct disassemble_info *);\n extern void disassemble_init_s390 (struct disassemble_info *);\n extern void disassemble_init_wasm32 (struct disassemble_info *);\n extern void disassemble_init_nds32 (struct disassemble_info *);\n+extern const disasm_options_and_args_t *disassembler_options_arc (void);\n extern const disasm_options_and_args_t *disassembler_options_arm (void);\n extern const disasm_options_and_args_t *disassembler_options_mips (void);\n extern const disasm_options_and_args_t *disassembler_options_powerpc (void);"
    },
    {
      "sha": "fc3dd0818dcb45335fd1ebf95ae32d49506c1e2e",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f467114435286e4f78b16fc1f5864acf6488fc0/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f467114435286e4f78b16fc1f5864acf6488fc0/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=8f467114435286e4f78b16fc1f5864acf6488fc0",
      "patch": "@@ -1,3 +1,11 @@\n+2021-06-02  Shahab Vahedi  <shahab@synopsys.com>\n+\n+\t* arc-dis.c (arc_option_arg_t): New enumeration.\n+\t(arc_options): New variable.\n+\t(disassembler_options_arc): New function.\n+\t(print_arc_disassembler_options): Reimplement in terms of\n+\t\"disassembler_options_arc\".\n+\n 2021-05-29  Alan Modra  <amodra@gmail.com>\n \n \t* ppc-dis.c (lookup_powerpc): Test deprecated field when -Many."
    },
    {
      "sha": "4abb866304d29463c62d0cad37d6666a638c7c42",
      "filename": "opcodes/arc-dis.c",
      "status": "modified",
      "additions": 153,
      "deletions": 27,
      "changes": 180,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f467114435286e4f78b16fc1f5864acf6488fc0/opcodes/arc-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f467114435286e4f78b16fc1f5864acf6488fc0/opcodes/arc-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arc-dis.c?ref=8f467114435286e4f78b16fc1f5864acf6488fc0",
      "patch": "@@ -1412,41 +1412,167 @@ arc_get_disassembler (bfd *abfd)\n   return print_insn_arc;\n }\n \n+/* Indices into option argument vector for options that do require\n+   an argument.  Use ARC_OPTION_ARG_NONE for options that don't\n+   expect an argument.  */\n+typedef enum\n+{\n+  ARC_OPTION_ARG_NONE = -1,\n+  ARC_OPTION_ARG_ARCH,\n+  ARC_OPTION_ARG_SIZE\n+} arc_option_arg_t;\n+\n+/* Valid ARC disassembler options.  */\n+static struct\n+{\n+  const char *name;\n+  const char *description;\n+  arc_option_arg_t arg;\n+} arc_options[] =\n+{\n+  { \"cpu=\",       N_(\"Enforce the designated architecture while decoding.\"),\n+\t\t  ARC_OPTION_ARG_ARCH },\n+  { \"dsp\",\t  N_(\"Recognize DSP instructions.\"),\n+\t\t  ARC_OPTION_ARG_NONE },\n+  { \"spfp\",\t  N_(\"Recognize FPX SP instructions.\"),\n+\t\t  ARC_OPTION_ARG_NONE },\n+  { \"dpfp\",\t  N_(\"Recognize FPX DP instructions.\"),\n+\t\t  ARC_OPTION_ARG_NONE },\n+  { \"quarkse_em\", N_(\"Recognize FPU QuarkSE-EM instructions.\"),\n+\t\t  ARC_OPTION_ARG_NONE },\n+  { \"fpuda\",\t  N_(\"Recognize double assist FPU instructions.\"),\n+\t\t  ARC_OPTION_ARG_NONE },\n+  { \"fpus\",\t  N_(\"Recognize single precision FPU instructions.\"),\n+\t\t  ARC_OPTION_ARG_NONE },\n+  { \"fpud\",\t  N_(\"Recognize double precision FPU instructions.\"),\n+\t\t  ARC_OPTION_ARG_NONE },\n+  { \"nps400\",\t  N_(\"Recognize NPS400 instructions.\"),\n+\t\t  ARC_OPTION_ARG_NONE },\n+  { \"hex\",\t  N_(\"Use only hexadecimal number to print immediates.\"),\n+\t\t  ARC_OPTION_ARG_NONE }\n+};\n+\n+/* Populate the structure for representing ARC's disassembly options.\n+   Such a dynamic initialization is desired, because it makes the maintenance\n+   easier and also gdb uses this to enable the \"disassembler-option\".  */\n+\n+const disasm_options_and_args_t *\n+disassembler_options_arc (void)\n+{\n+  static disasm_options_and_args_t *opts_and_args;\n+\n+  if (opts_and_args == NULL)\n+    {\n+      disasm_option_arg_t *args;\n+      disasm_options_t *opts;\n+      size_t i;\n+      const size_t nr_of_options = ARRAY_SIZE (arc_options);\n+      /* There is a null element at the end of CPU_TYPES, therefore\n+\t NR_OF_CPUS is actually 1 more and that is desired here too.  */\n+      const size_t nr_of_cpus = ARRAY_SIZE (cpu_types);\n+\n+      opts_and_args = XNEW (disasm_options_and_args_t);\n+      opts_and_args->args\n+\t= XNEWVEC (disasm_option_arg_t, ARC_OPTION_ARG_SIZE + 1);\n+      opts_and_args->options.name\n+\t= XNEWVEC (const char *, nr_of_options + 1);\n+      opts_and_args->options.description\n+\t= XNEWVEC (const char *, nr_of_options + 1);\n+      opts_and_args->options.arg\n+\t= XNEWVEC (const disasm_option_arg_t *, nr_of_options + 1);\n+\n+      /* Populate the arguments for \"cpu=\" option.  */\n+      args = opts_and_args->args;\n+      args[ARC_OPTION_ARG_ARCH].name = \"ARCH\";\n+      args[ARC_OPTION_ARG_ARCH].values = XNEWVEC (const char *, nr_of_cpus);\n+      for (i = 0; i < nr_of_cpus; ++i)\n+\targs[ARC_OPTION_ARG_ARCH].values[i] = cpu_types[i].name;\n+      args[ARC_OPTION_ARG_SIZE].name = NULL;\n+      args[ARC_OPTION_ARG_SIZE].values = NULL;\n+\n+      /* Populate the options.  */\n+      opts = &opts_and_args->options;\n+      for (i = 0; i < nr_of_options; ++i)\n+\t{\n+\t  opts->name[i] = arc_options[i].name;\n+\t  opts->description[i] = arc_options[i].description;\n+\t  if (arc_options[i].arg != ARC_OPTION_ARG_NONE)\n+\t    opts->arg[i] = &args[arc_options[i].arg];\n+\t  else\n+\t    opts->arg[i] = NULL;\n+\t}\n+      opts->name[nr_of_options] = NULL;\n+      opts->description[nr_of_options] = NULL;\n+      opts->arg[nr_of_options] = NULL;\n+    }\n+\n+  return opts_and_args;\n+}\n+\n+\n void\n print_arc_disassembler_options (FILE *stream)\n {\n-  int i;\n+  const disasm_options_and_args_t *opts_and_args;\n+  const disasm_option_arg_t *args;\n+  const disasm_options_t *opts;\n+  size_t i, j;\n+  size_t max_len = 0;\n+\n+  opts_and_args = disassembler_options_arc ();\n+  opts = &opts_and_args->options;\n+  args = opts_and_args->args;\n+\n+  fprintf (stream, _(\"\\nThe following ARC specific disassembler options are\"\n+\t\t     \" supported for use \\nwith the -M switch (multiple\"\n+\t\t     \" options should be separated by commas):\\n\"));\n+\n+  /* Find the maximum length for printing options (and their arg name).  */\n+  for (i = 0; opts->name[i] != NULL; ++i)\n+    {\n+      size_t len = strlen (opts->name[i]);\n+      len += (opts->arg[i]) ? strlen (opts->arg[i]->name) : 0;\n+      max_len = (len > max_len) ? len : max_len;\n+    }\n \n-  fprintf (stream, _(\"\\n\\\n-The following ARC specific disassembler options are supported for use \\n\\\n-with -M switch (multiple options should be separated by commas):\\n\"));\n+  /* Print the options, their arg and description, if any.  */\n+  for (i = 0, ++max_len; opts->name[i] != NULL; ++i)\n+    {\n+      fprintf (stream, \"  %s\", opts->name[i]);\n+      if (opts->arg[i] != NULL)\n+\tfprintf (stream, \"%s\", opts->arg[i]->name);\n+      if (opts->description[i] != NULL)\n+\t{\n+\t  size_t len = strlen (opts->name[i]);\n+\t  len += (opts->arg[i]) ? strlen (opts->arg[i]->name) : 0;\n+\t  fprintf (stream,\n+\t\t   \"%*c %s\", (int) (max_len - len), ' ', opts->description[i]);\n+\t}\n+      fprintf (stream, _(\"\\n\"));\n+    }\n \n-  /* cpu=... options.  */\n-  for (i = 0; cpu_types[i].name; ++i)\n+  /* Print the possible values of an argument.  */\n+  for (i = 0; args[i].name != NULL; ++i)\n     {\n-      /* As of now all value CPU values are less than 16 characters.  */\n-      fprintf (stream, \"  cpu=%-16s\\tEnforce %s ISA.\\n\",\n-\t       cpu_types[i].name, cpu_types[i].isa);\n+      size_t len = 3;\n+      fprintf (stream, _(\"\\n\\\n+  For the options above, the following values are supported for \\\"%s\\\":\\n   \"),\n+\t       args[i].name);\n+      for (j = 0; args[i].values[j] != NULL; ++j)\n+\t{\n+\t  fprintf (stream, \" %s\", args[i].values[j]);\n+\t  len += strlen (args[i].values[j]) + 1;\n+\t  /* reset line if printed too long.  */\n+\t  if (len >= 78)\n+\t    {\n+\t      fprintf (stream, _(\"\\n   \"));\n+\t      len = 3;\n+\t    }\n+\t}\n+      fprintf (stream, _(\"\\n\"));\n     }\n \n-  fprintf (stream, _(\"\\\n-  dsp             Recognize DSP instructions.\\n\"));\n-  fprintf (stream, _(\"\\\n-  spfp            Recognize FPX SP instructions.\\n\"));\n-  fprintf (stream, _(\"\\\n-  dpfp            Recognize FPX DP instructions.\\n\"));\n-  fprintf (stream, _(\"\\\n-  quarkse_em      Recognize FPU QuarkSE-EM instructions.\\n\"));\n-  fprintf (stream, _(\"\\\n-  fpuda           Recognize double assist FPU instructions.\\n\"));\n-  fprintf (stream, _(\"\\\n-  fpus            Recognize single precision FPU instructions.\\n\"));\n-  fprintf (stream, _(\"\\\n-  fpud            Recognize double precision FPU instructions.\\n\"));\n-  fprintf (stream, _(\"\\\n-  nps400          Recognize NPS400 instructions.\\n\"));\n-  fprintf (stream, _(\"\\\n-  hex             Use only hexadecimal number to print immediates.\\n\"));\n+  fprintf (stream, _(\"\\n\"));\n }\n \n void arc_insn_decode (bfd_vma addr,"
    }
  ]
}