{
  "sha": "bb32eac5a90b2b141fed4ce490aded74134f1d75",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmIzMmVhYzVhOTBiMmIxNDFmZWQ0Y2U0OTBhZGVkNzQxMzRmMWQ3NQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-16T06:55:52Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-16T06:55:52Z"
    },
    "message": "gas: fix hex float parsing from .dcb.? directives\n\nUnlike for .dc.? the parsing here failed to skip the colon before\ncalling hex_float(). To avoid both variants of parsing going out of sync\nagain, introduce a helper used by both.",
    "tree": {
      "sha": "9c3a5e48cee0a436229e28481ce896ca3c10d109",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9c3a5e48cee0a436229e28481ce896ca3c10d109"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bb32eac5a90b2b141fed4ce490aded74134f1d75",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb32eac5a90b2b141fed4ce490aded74134f1d75",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bb32eac5a90b2b141fed4ce490aded74134f1d75",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb32eac5a90b2b141fed4ce490aded74134f1d75/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4504a6346777d544a144683bd2a534b686fbac41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4504a6346777d544a144683bd2a534b686fbac41",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4504a6346777d544a144683bd2a534b686fbac41"
    }
  ],
  "stats": {
    "total": 146,
    "additions": 75,
    "deletions": 71
  },
  "files": [
    {
      "sha": "8fa1be88e816a686016d48b5b1e962d3bae09f4d",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb32eac5a90b2b141fed4ce490aded74134f1d75/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb32eac5a90b2b141fed4ce490aded74134f1d75/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=bb32eac5a90b2b141fed4ce490aded74134f1d75",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-16  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* read.c (parse_one_float): New.\n+\t(s_float_space, float_cons): Use it.\n+\t* testsuite/gas/all/float.s: Add .dc.*, .dcb.*, and .ds.* cases.\n+\n 2021-06-16  Jan Beulich  <jbeulich@suse.com>\n \n \t* read.c (emit_expr_with_reloc): Adjust overflow check. Drop"
    },
    {
      "sha": "935b1fa7bde655542a64f1646f951d315c236c59",
      "filename": "gas/read.c",
      "status": "modified",
      "additions": 53,
      "deletions": 71,
      "changes": 124,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb32eac5a90b2b141fed4ce490aded74134f1d75/gas/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb32eac5a90b2b141fed4ce490aded74134f1d75/gas/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/read.c?ref=bb32eac5a90b2b141fed4ce490aded74134f1d75",
      "patch": "@@ -3616,6 +3616,51 @@ s_nops (int ignore ATTRIBUTE_UNUSED)\n   *p = val.X_add_number;\n }\n \n+static int\n+parse_one_float (int float_type, char temp[MAXIMUM_NUMBER_OF_CHARS_FOR_FLOAT])\n+{\n+  int length;\n+\n+  SKIP_WHITESPACE ();\n+\n+  /* Skip any 0{letter} that may be present.  Don't even check if the\n+     letter is legal.  Someone may invent a \"z\" format and this routine\n+     has no use for such information. Lusers beware: you get\n+     diagnostics if your input is ill-conditioned.  */\n+  if (input_line_pointer[0] == '0'\n+      && ISALPHA (input_line_pointer[1]))\n+    input_line_pointer += 2;\n+\n+  /* Accept :xxxx, where the x's are hex digits, for a floating point\n+     with the exact digits specified.  */\n+  if (input_line_pointer[0] == ':')\n+    {\n+      ++input_line_pointer;\n+      length = hex_float (float_type, temp);\n+      if (length < 0)\n+\t{\n+\t  ignore_rest_of_line ();\n+\t  return length;\n+\t}\n+    }\n+  else\n+    {\n+      const char *err;\n+\n+      err = md_atof (float_type, temp, &length);\n+      know (length <= MAXIMUM_NUMBER_OF_CHARS_FOR_FLOAT);\n+      know (err != NULL || length > 0);\n+      if (err)\n+\t{\n+\t  as_bad (_(\"bad floating literal: %s\"), err);\n+\t  ignore_rest_of_line ();\n+\t  return -1;\n+\t}\n+    }\n+\n+  return length;\n+}\n+\n /* This is like s_space, but the value is a floating point number with\n    the given precision.  This is for the MRI dcb.s pseudo-op and\n    friends.  */\n@@ -3650,42 +3695,12 @@ s_float_space (int float_type)\n \n   ++input_line_pointer;\n \n-  SKIP_WHITESPACE ();\n-\n-  /* Skip any 0{letter} that may be present.  Don't even check if the\n-   * letter is legal.  */\n-  if (input_line_pointer[0] == '0'\n-      && ISALPHA (input_line_pointer[1]))\n-    input_line_pointer += 2;\n-\n-  /* Accept :xxxx, where the x's are hex digits, for a floating point\n-     with the exact digits specified.  */\n-  if (input_line_pointer[0] == ':')\n-    {\n-      flen = hex_float (float_type, temp);\n-      if (flen < 0)\n-\t{\n-\t  ignore_rest_of_line ();\n-\t  if (flag_mri)\n-\t    mri_comment_end (stop, stopc);\n-\t  return;\n-\t}\n-    }\n-  else\n+  flen = parse_one_float (float_type, temp);\n+  if (flen < 0)\n     {\n-      const char *err;\n-\n-      err = md_atof (float_type, temp, &flen);\n-      know (flen <= MAXIMUM_NUMBER_OF_CHARS_FOR_FLOAT);\n-      know (err != NULL || flen > 0);\n-      if (err)\n-\t{\n-\t  as_bad (_(\"bad floating literal: %s\"), err);\n-\t  ignore_rest_of_line ();\n-\t  if (flag_mri)\n-\t    mri_comment_end (stop, stopc);\n-\t  return;\n-\t}\n+      if (flag_mri)\n+\tmri_comment_end (stop, stopc);\n+      return;\n     }\n \n   while (--count >= 0)\n@@ -4909,7 +4924,6 @@ float_cons (/* Clobbers input_line-pointer, checks end-of-line.  */\n {\n   char *p;\n   int length;\t\t\t/* Number of chars in an object.  */\n-  const char *err;\t\t/* Error from scanning floating literal.  */\n   char temp[MAXIMUM_NUMBER_OF_CHARS_FOR_FLOAT];\n \n   if (is_it_end_of_statement ())\n@@ -4943,41 +4957,9 @@ float_cons (/* Clobbers input_line-pointer, checks end-of-line.  */\n \n   do\n     {\n-      /* input_line_pointer->1st char of a flonum (we hope!).  */\n-      SKIP_WHITESPACE ();\n-\n-      /* Skip any 0{letter} that may be present. Don't even check if the\n-\t letter is legal. Someone may invent a \"z\" format and this routine\n-\t has no use for such information. Lusers beware: you get\n-\t diagnostics if your input is ill-conditioned.  */\n-      if (input_line_pointer[0] == '0'\n-\t  && ISALPHA (input_line_pointer[1]))\n-\tinput_line_pointer += 2;\n-\n-      /* Accept :xxxx, where the x's are hex digits, for a floating\n-\t point with the exact digits specified.  */\n-      if (input_line_pointer[0] == ':')\n-\t{\n-\t  ++input_line_pointer;\n-\t  length = hex_float (float_type, temp);\n-\t  if (length < 0)\n-\t    {\n-\t      ignore_rest_of_line ();\n-\t      return;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  err = md_atof (float_type, temp, &length);\n-\t  know (length <= MAXIMUM_NUMBER_OF_CHARS_FOR_FLOAT);\n-\t  know (err != NULL || length > 0);\n-\t  if (err)\n-\t    {\n-\t      as_bad (_(\"bad floating literal: %s\"), err);\n-\t      ignore_rest_of_line ();\n-\t      return;\n-\t    }\n-\t}\n+      length = parse_one_float (float_type, temp);\n+      if (length < 0)\n+\treturn;\n \n       if (!need_pass_2)\n \t{"
    },
    {
      "sha": "579ca89af37f73b0e9b9b886a05c4d6325f11139",
      "filename": "gas/testsuite/gas/all/float.s",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bb32eac5a90b2b141fed4ce490aded74134f1d75/gas/testsuite/gas/all/float.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bb32eac5a90b2b141fed4ce490aded74134f1d75/gas/testsuite/gas/all/float.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/float.s?ref=bb32eac5a90b2b141fed4ce490aded74134f1d75",
      "patch": "@@ -4,3 +4,19 @@ foo:\t.single\t0r1.2345e+06\n \t.double 0r2.718282\n         .double .0000000000000000000001\n         .double 1e-22\n+\n+\t.dc.s 1\n+\t.dc.s 0f:1234\n+\t.dcb.s 1, 1\n+\t.dcb.s 1, 0s:4321\n+\t.ds.s 1, -1\n+\n+\t.dc.d 1\n+\t.dc.d 0d:1234\n+\t.dcb.d 1, 1\n+\t.dcb.d 1, 0r:4321\n+\t.ds.d 1, -1\n+\n+\t.dc.x 0x:1234\n+\t.dcb.x 1, 0x:4321\n+\t.ds.x 1, -1"
    }
  ]
}