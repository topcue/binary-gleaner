{
  "sha": "3d98c46092341c1373d960d0a66ca502d5b7ee7f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Q5OGM0NjA5MjM0MWMxMzczZDk2MGQwYTY2Y2E1MDJkNWI3ZWU3Zg==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-03-20T10:55:17Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-03-20T10:55:30Z"
    },
    "message": "plugin: Don't invoke LTO-wrapper\n\nDon't invoke LTO-wrapper since the LTO wrapper approach is not only\nslow but also unreliable.  For GCC 10 or newer, LDPT_ADD_SYMBOLS_V2\nwill be used.\n\nbfd/\n\n\t* configure.ac (HAVE_EXECUTABLE_SUFFIX): Removed.\n\t(EXECUTABLE_SUFFIX): Likewise.\n\t* config.in: Regenerated.\n\t* configure: Likewise.\n\t* plugin.c (bfd_plugin_close_and_cleanup): Defined as\n\t_bfd_generic_close_and_cleanup.\n\t(plugin_list_entry): Remove resolution_file, resolution_option,\n\treal_bfd, real_nsyms, real_syms, lto_nsyms, lto_syms, gcc,\n\tlto_wrapper, gcc_env and initialized,\n\t(need_lto_wrapper_p): Removed.\n\t(get_lto_wrapper): Likewise.\n\t(setup_lto_wrapper_env): Likewise.\n\t(register_all_symbols_read): Likewise.\n\t(egister_cleanup): Likewise.\n\t(get_symbols): Likewise.\n\t(add_input_file): Likewise.\n\t(bfd_plugin_set_program_name): Remove need_lto_wrapper.\n\t(add_symbols): Updated.\n\t(try_claim): Likewise.\n\t(try_load_plugin): Likewise.\n\t(bfd_plugin_canonicalize_symtab): Likewise.\n\t* plugin.h (bfd_plugin_set_program_name): Remove int argument.\n\t(plugin_data_struct): Remove real_bfd, real_nsyms and real_syms.\n\nbinutils/\n\n\t* ar.c (main): Update bfd_plugin_set_program_name call.\n\t* nm.c (main): Likewise.\n\nld/\n\n\t* testsuite/ld-plugin/lto.exp (lto_link_tests): Run PR ld/25355\n\ttest only for GCC 10 or newer.",
    "tree": {
      "sha": "a4a9dc215ec7af582ce3e022c56a6ccda2e48586",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a4a9dc215ec7af582ce3e022c56a6ccda2e48586"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d98c46092341c1373d960d0a66ca502d5b7ee7f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d98c46092341c1373d960d0a66ca502d5b7ee7f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d98c46092341c1373d960d0a66ca502d5b7ee7f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d98c46092341c1373d960d0a66ca502d5b7ee7f/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c3a1714ce7806002726a60c0db09371425fe3097",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3a1714ce7806002726a60c0db09371425fe3097",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c3a1714ce7806002726a60c0db09371425fe3097"
    }
  ],
  "stats": {
    "total": 535,
    "additions": 59,
    "deletions": 476
  },
  "files": [
    {
      "sha": "62e564e1dcef72a7703dd65757fd54e28c071d0a",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "patch": "@@ -1,3 +1,29 @@\n+2020-03-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* configure.ac (HAVE_EXECUTABLE_SUFFIX): Removed.\n+\t(EXECUTABLE_SUFFIX): Likewise.\n+\t* config.in: Regenerated.\n+\t* configure: Likewise.\n+\t* plugin.c (bfd_plugin_close_and_cleanup): Defined as\n+\t_bfd_generic_close_and_cleanup.\n+\t(plugin_list_entry): Remove resolution_file, resolution_option,\n+\treal_bfd, real_nsyms, real_syms, lto_nsyms, lto_syms, gcc,\n+\tlto_wrapper, gcc_env and initialized,\n+\t(need_lto_wrapper_p): Removed.\n+\t(get_lto_wrapper): Likewise.\n+\t(setup_lto_wrapper_env): Likewise.\n+\t(register_all_symbols_read): Likewise.\n+\t(egister_cleanup): Likewise.\n+\t(get_symbols): Likewise.\n+\t(add_input_file): Likewise.\n+\t(bfd_plugin_set_program_name): Remove need_lto_wrapper.\n+\t(add_symbols): Updated.\n+\t(try_claim): Likewise.\n+\t(try_load_plugin): Likewise.\n+\t(bfd_plugin_canonicalize_symtab): Likewise.\n+\t* plugin.h (bfd_plugin_set_program_name): Remove int argument.\n+\t(plugin_data_struct): Remove real_bfd, real_nsyms and real_syms.\n+\n 2020-03-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR binutils/25640"
    },
    {
      "sha": "be572969fc04ea4ab36a72e3ebf7b3823c4eb9f6",
      "filename": "bfd/config.in",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/config.in?ref=3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "patch": "@@ -18,9 +18,6 @@\n    language is requested. */\n #undef ENABLE_NLS\n \n-/* Suffix used for executables, if any. */\n-#undef EXECUTABLE_SUFFIX\n-\n /* Define to 1 if you have the <alloca.h> header file. */\n #undef HAVE_ALLOCA_H\n \n@@ -98,9 +95,6 @@\n /* Define to 1 if you have the <dlfcn.h> header file. */\n #undef HAVE_DLFCN_H\n \n-/* Does the platform use an executable suffix? */\n-#undef HAVE_EXECUTABLE_SUFFIX\n-\n /* Define to 1 if you have the `fcntl' function. */\n #undef HAVE_FCNTL\n "
    },
    {
      "sha": "a000929b4eeab3710eb5d0c97dc343ab5f308b8e",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "patch": "@@ -12813,16 +12813,6 @@ fi\n \n \n \n-if test -n \"$EXEEXT\"; then\n-\n-$as_echo \"#define HAVE_EXECUTABLE_SUFFIX 1\" >>confdefs.h\n-\n-fi\n-\n-cat >>confdefs.h <<_ACEOF\n-#define EXECUTABLE_SUFFIX \"${EXEEXT}\"\n-_ACEOF\n-\n \n host64=false\n target64=false"
    },
    {
      "sha": "84d07688ad9ca981dfb4d4cfee43d04c627af793",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "patch": "@@ -157,12 +157,6 @@ AM_MAINTAINER_MODE\n AM_CONDITIONAL(GENINSRC_NEVER, false)\n AM_INSTALL_LIBBFD\n AC_EXEEXT\n-if test -n \"$EXEEXT\"; then\n-  AC_DEFINE(HAVE_EXECUTABLE_SUFFIX, 1,\n-\t    [Does the platform use an executable suffix?])\n-fi\n-AC_DEFINE_UNQUOTED(EXECUTABLE_SUFFIX, \"${EXEEXT}\",\n-\t\t   [Suffix used for executables, if any.])\n \n host64=false\n target64=false"
    },
    {
      "sha": "48387fa53ecbee6488d38afb26571ef18e53952f",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 10,
      "deletions": 443,
      "changes": 453,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "patch": "@@ -69,6 +69,7 @@ dlerror (void)\n \n #endif /* !defined (HAVE_DLFCN_H) && defined (HAVE_WINDOWS_H)  */\n \n+#define bfd_plugin_close_and_cleanup\t\t      _bfd_generic_close_and_cleanup\n #define bfd_plugin_bfd_free_cached_info\t\t      _bfd_generic_bfd_free_cached_info\n #define bfd_plugin_new_section_hook\t\t      _bfd_generic_new_section_hook\n #define bfd_plugin_get_section_contents\t\t      _bfd_generic_get_section_contents\n@@ -129,196 +130,20 @@ struct plugin_list_entry\n   ld_plugin_claim_file_handler claim_file;\n   ld_plugin_all_symbols_read_handler all_symbols_read;\n   ld_plugin_all_symbols_read_handler cleanup_handler;\n-  char *resolution_file;\n-  char *resolution_option;\n-  bfd *real_bfd;\n-  long real_nsyms;\n-  asymbol **real_syms;\n-  int lto_nsyms;\n-  const struct ld_plugin_symbol *lto_syms;\n   bfd_boolean has_symbol_type;\n \n   struct plugin_list_entry *next;\n \n   /* These can be reused for all IR objects.  */\n   const char *plugin_name;\n-  char *gcc;\n-  char *lto_wrapper;\n-  char *gcc_env;\n-  bfd_boolean initialized;\n };\n \n static const char *plugin_program_name;\n-static int need_lto_wrapper_p;\n \n void\n-bfd_plugin_set_program_name (const char *program_name,\n-\t\t\t     int need_lto_wrapper)\n+bfd_plugin_set_program_name (const char *program_name)\n {\n   plugin_program_name = program_name;\n-  need_lto_wrapper_p = need_lto_wrapper;\n-}\n-\n-/* Use GCC LTO wrapper to covert LTO IR object to the real object.  */\n-\n-static bfd_boolean\n-get_lto_wrapper (struct plugin_list_entry *plugin)\n-{\n-  struct stat st;\n-  const char *real_name;\n-  const char *base_name;\n-  size_t length;\n-  const char *target_start = NULL;\n-  const char *target_end = NULL;\n-  size_t target_length = 0;\n-  char *gcc_name;\n-  char *wrapper_name;\n-  char *p;\n-  char dir_seperator = '\\0';\n-  char *resolution_file;\n-\n-  if (!need_lto_wrapper_p)\n-    return FALSE;\n-\n-  if (plugin->initialized)\n-    {\n-      if (plugin->lto_wrapper)\n-\t{\n-\t  resolution_file = make_temp_file (\".res\");\n-\t  if (resolution_file)\n-\t    {\n-\t      plugin->resolution_file = resolution_file;\n-\t      plugin->resolution_option = concat (\"-fresolution=\",\n-\t\t\t\t\t\t  resolution_file, NULL);\n-\t      return TRUE;\n-\t    }\n-\t  else\n-\t    {\n-\t      /* Something is wrong.  Give up.  */\n-\t      free (plugin->gcc);\n-\t      free (plugin->lto_wrapper);\n-\t      free (plugin->gcc_env);\n-\t      plugin->gcc = NULL;\n-\t      plugin->gcc_env = NULL;\n-\t      plugin->lto_wrapper = NULL;\n-\t    }\n-\t}\n-\n-      return FALSE;\n-    }\n-\n-  plugin->initialized = TRUE;\n-\n-  /* Check for PREFIX/libexec/gcc/TARGET/VERSION/liblto_plugin.so.  */\n-  real_name = lrealpath (plugin->plugin_name);\n-  base_name = lbasename (real_name);\n-\n-  /* The directory length in plugin pathname.  */\n-  length = base_name - real_name;\n-\n-  /* Skip if there is no PREFIX.  */\n-  if (!length)\n-    return FALSE;\n-\n-  p = (char *) real_name + length - 1;\n-  if (IS_DIR_SEPARATOR (*p))\n-    {\n-      int level = 0;\n-      for (; p != real_name; p--)\n-\tif (IS_DIR_SEPARATOR (*p))\n-\t  {\n-\t    level++;\n-\t    if (level == 2)\n-\t      target_end = p;\n-\t    else if (level == 3)\n-\t      {\n-\t\ttarget_start = p + 1;\n-\t\ttarget_length = target_end - target_start;\n-\t      }\n-\t    else if (level == 5)\n-\t      {\n-\t\tdir_seperator = *p;\n-\t\tbreak;\n-\t      }\n-\t  }\n-    }\n-\n-  /* Skip if there is no TARGET nor PREFIX.  */\n-  if (!target_length || !dir_seperator)\n-    return FALSE;\n-\n-#ifdef HAVE_EXECUTABLE_SUFFIX\n-# define GCC_EXECUTABLE\t\t\"gcc\" EXECUTABLE_SUFFIX\n-# define LTO_WRAPPER_EXECUTABLE\t\"lto-wrapper\" EXECUTABLE_SUFFIX\n-#else\n-# define GCC_EXECUTABLE\t\t\"gcc\"\n-# define LTO_WRAPPER_EXECUTABLE\t\"lto-wrapper\"\n-#endif\n-  gcc_name = bfd_malloc (length + target_length\n-\t\t\t + sizeof (GCC_EXECUTABLE));\n-  if (gcc_name == NULL)\n-    return FALSE;\n-  memcpy (gcc_name, real_name, length);\n-\n-  /* Get PREFIX/bin/.  */\n-  p += gcc_name - real_name;\n-  memcpy (p + 1, \"bin\", 3);\n-  p[4] = dir_seperator;\n-\n-  /* Try PREFIX/bin/TARGET-gcc first.  */\n-  memcpy (p + 5, target_start, target_length);\n-  p[5 + target_length] = '-';\n-  memcpy (p + 5 + target_length + 1, GCC_EXECUTABLE,\n-\t  sizeof (GCC_EXECUTABLE));\n-  if (stat (gcc_name, &st) != 0 || !S_ISREG (st.st_mode))\n-    {\n-      /* Then try PREFIX/bin/gcc.  */\n-      memcpy (p + 5, GCC_EXECUTABLE, sizeof (GCC_EXECUTABLE));\n-      if (stat (gcc_name, &st) != 0 || !S_ISREG (st.st_mode))\n-\t{\n-\t  free (gcc_name);\n-\t  return FALSE;\n-\t}\n-    }\n-\n-  /* lto-wrapper should be in the same directory with LTO plugin.  */\n-  wrapper_name = bfd_malloc (length + sizeof (LTO_WRAPPER_EXECUTABLE));\n-  if (wrapper_name == NULL)\n-    {\n-      free (gcc_name);\n-      return FALSE;\n-    }\n-  memcpy (wrapper_name, real_name, length);\n-  memcpy (wrapper_name + length, LTO_WRAPPER_EXECUTABLE,\n-\t  sizeof (LTO_WRAPPER_EXECUTABLE));\n-  if (stat (wrapper_name, &st) == 0 && S_ISREG (st.st_mode))\n-    {\n-      resolution_file = make_temp_file (\".res\");\n-      if (resolution_file)\n-\t{\n-\t  plugin->gcc = gcc_name;\n-\t  plugin->lto_wrapper = wrapper_name;\n-\t  plugin->gcc_env = concat (\"COLLECT_GCC=\", gcc_name, NULL);\n-\t  plugin->resolution_file = resolution_file;\n-\t  plugin->resolution_option = concat (\"-fresolution=\",\n-\t\t\t\t\t      resolution_file, NULL);\n-\t  return TRUE;\n-\t}\n-    }\n-\n-  free (gcc_name);\n-  free (wrapper_name);\n-  return FALSE;\n-}\n-\n-/* Set environment variables for GCC LTO wrapper to covert LTO IR\n-   object to the real object.  */\n-\n-static int\n-setup_lto_wrapper_env (struct plugin_list_entry *plugin)\n-{\n-  return (putenv (plugin->gcc_env)\n-\t  || putenv (\"COLLECT_GCC_OPTIONS=\"));\n }\n \n static struct plugin_list_entry *plugin_list = NULL;\n@@ -333,119 +158,6 @@ register_claim_file (ld_plugin_claim_file_handler handler)\n   return LDPS_OK;\n }\n \n-/* Register an all-symbols-read handler.  */\n-\n-static enum ld_plugin_status\n-register_all_symbols_read (ld_plugin_all_symbols_read_handler handler)\n-{\n-  current_plugin->all_symbols_read = handler;\n-  return LDPS_OK;\n-}\n-\n-/* Register a cleanup handler.  */\n-\n-static enum ld_plugin_status\n-register_cleanup (ld_plugin_all_symbols_read_handler handler)\n-{\n-  current_plugin->cleanup_handler = handler;\n-  return LDPS_OK;\n-}\n-\n-/* Get the symbol resolution info for a plugin-claimed input file.  */\n-\n-static enum ld_plugin_status\n-get_symbols (const void *handle ATTRIBUTE_UNUSED, int nsyms,\n-\t     struct ld_plugin_symbol *syms)\n-{\n-  if (syms)\n-    {\n-      int n;\n-      for (n = 0; n < nsyms; n++)\n-\t{\n-\t  switch (syms[n].def)\n-\t    {\n-\t    default:\n-\t      BFD_ASSERT (0);\n-\t      break;\n-\t    case LDPK_UNDEF:\n-\t    case LDPK_WEAKUNDEF:\n-\t      syms[n].resolution = LDPR_UNDEF;\n-\t      break;\n-\t    case LDPK_DEF:\n-\t    case LDPK_WEAKDEF:\n-\t    case LDPK_COMMON:\n-\t      /* Tell plugin that LTO symbol has references from regular\n-\t\t object code. */\n-\t      syms[n].resolution  = LDPR_PREVAILING_DEF;\n-\t      break;\n-\t    }\n-      }\n-    }\n-\n-  return LDPS_OK;\n-}\n-\n-/* Add a new (real) input file generated by a plugin.  */\n-\n-static enum ld_plugin_status\n-add_input_file (const char *pathname)\n-{\n-  /* Get symbols from the real LTO object.  */\n-  char **matching;\n-  long real_symsize;\n-  long real_nsyms;\n-  asymbol **real_syms;\n-  int lto_nsyms;\n-  bfd_boolean lto_symbol_found = FALSE;\n-  const struct ld_plugin_symbol *lto_syms;\n-  bfd *rbfd;\n-  int i, j;\n-\n-  rbfd = bfd_openr (pathname, NULL);\n-  if (!bfd_check_format_matches (rbfd, bfd_object, &matching))\n-    BFD_ASSERT (0);\n-\n-  real_symsize = bfd_get_symtab_upper_bound (rbfd);\n-  if (real_symsize < 0)\n-    BFD_ASSERT (0);\n-\n-  real_syms = (asymbol **) bfd_malloc (real_symsize);\n-  if (real_syms)\n-    {\n-      real_nsyms = bfd_canonicalize_symtab (rbfd, real_syms);\n-      if (real_nsyms < 0)\n-\tBFD_ASSERT (0);\n-\n-      /* NB: LTO plugin may generate more than one real object from one\n-\t LTO IR object.  We use the one which contains LTO symbols.  */\n-      lto_syms = current_plugin->lto_syms;\n-      lto_nsyms = current_plugin->lto_nsyms;\n-      for (i = 0; i < lto_nsyms; i++)\n-\tfor (j = 0; j < real_nsyms; j++)\n-\t  if (real_syms[j]->name\n-\t      && strcmp (lto_syms[i].name, real_syms[j]->name) == 0)\n-\t    {\n-\t      lto_symbol_found = TRUE;\n-\t      break;\n-\t    }\n-    }\n-\n-  if (lto_symbol_found)\n-    {\n-      current_plugin->real_nsyms = real_nsyms;\n-      current_plugin->real_syms = real_syms;\n-      /* NB: We can't close RBFD which own the real symbol info.  */\n-      current_plugin->real_bfd = rbfd;\n-    }\n-  else\n-    {\n-      bfd_close (rbfd);\n-      free (real_syms);\n-    }\n-\n-  return LDPS_OK;\n-}\n-\n static enum ld_plugin_status\n add_symbols (void * handle,\n \t     int nsyms,\n@@ -455,52 +167,16 @@ add_symbols (void * handle,\n   struct plugin_data_struct *plugin_data =\n     bfd_alloc (abfd, sizeof (plugin_data_struct));\n \n-  if (plugin_data)\n-    {\n-      struct ld_plugin_symbol *sym_info;\n-      char *strtab;\n-      size_t sym_info_size, name_length;\n-      int i;\n-\n-      memset (plugin_data, 0, sizeof (*plugin_data));\n-\n-      abfd->tdata.plugin_data = plugin_data;\n-\n-      /* NB: LTO symbols are owned by LTO plugin.  Create a copy so\n-\t that we can use it in bfd_plugin_canonicalize_symtab.  */\n-      sym_info_size = nsyms * sizeof (*syms);\n+  if (!plugin_data)\n+    return LDPS_ERR;\n \n-      /* Allocate a string table  */\n-      for (i = 0; i < nsyms; i++)\n-\tsym_info_size += strlen (syms[i].name) + 1;\n-\n-      sym_info = bfd_alloc (abfd, sym_info_size);\n-      if (sym_info)\n-\t{\n-\t  /* Copy symbol table.  */\n-\t  memcpy (sym_info, syms, nsyms * sizeof (*syms));\n-\n-\t  /* Copy symbol names in symbol table.  */\n-\t  strtab = (char *) (sym_info + nsyms);\n-\t  for (i = 0; i < nsyms; i++)\n-\t    {\n-\t      name_length = strlen (syms[i].name);\n-\t      memcpy (strtab, syms[i].name, name_length + 1);\n-\t      sym_info[i].name = strtab;\n-\t      strtab += name_length + 1;\n-\t    }\n-\n-\t  plugin_data->nsyms = nsyms;\n-\t  plugin_data->syms = sym_info;\n-\n-\t  current_plugin->lto_nsyms = nsyms;\n-\t  current_plugin->lto_syms = sym_info;\n-\t}\n-    }\n+  plugin_data->nsyms = nsyms;\n+  plugin_data->syms = syms;\n \n   if (nsyms != 0)\n     abfd->flags |= HAS_SYMS;\n \n+  abfd->tdata.plugin_data = plugin_data;\n   return LDPS_OK;\n }\n \n@@ -567,42 +243,9 @@ try_claim (bfd *abfd)\n       && current_plugin->claim_file)\n     {\n       current_plugin->claim_file (&file, &claimed);\n-      if (claimed)\n-\t{\n-\t  if (current_plugin->all_symbols_read\n-\t      && !current_plugin->has_symbol_type)\n-\t    {\n-\t      struct plugin_data_struct *plugin_data\n-\t\t= abfd->tdata.plugin_data;\n-\t      if (plugin_data)\n-\t\t{\n-\t\t  /* Get real symbols from LTO wrapper.  */\n-\t\t  current_plugin->all_symbols_read ();\n-\n-\t\t  /* Copy real symbols to plugin_data.  */\n-\t\t  plugin_data->real_bfd = current_plugin->real_bfd;\n-\t\t  plugin_data->real_nsyms = current_plugin->real_nsyms;\n-\t\t  plugin_data->real_syms = current_plugin->real_syms;\n-\n-\t\t  /* Clean up LTO plugin.  */\n-\t\t  if (current_plugin->cleanup_handler)\n-\t\t    current_plugin->cleanup_handler ();\n-\t\t}\n-\t    }\n-\t}\n-\n       close (file.fd);\n     }\n \n-  if (current_plugin->lto_wrapper)\n-    {\n-      /* Clean up for LTO wrapper.  NB: Resolution file and option\n-\t have been created regardless if an IR object is claimed or\n-\t not.  */\n-      unlink (current_plugin->resolution_file);\n-      free (current_plugin->resolution_option);\n-    }\n-\n   return claimed;\n }\n \n@@ -612,7 +255,7 @@ try_load_plugin (const char *pname,\n \t\t bfd *abfd, bfd_boolean build_list_p)\n {\n   void *plugin_handle;\n-  struct ld_plugin_tv tv[13];\n+  struct ld_plugin_tv tv[5];\n   int i;\n   ld_plugin_onload onload;\n   enum ld_plugin_status status;\n@@ -679,41 +322,6 @@ try_load_plugin (const char *pname,\n   tv[i].tv_tag = LDPT_ADD_SYMBOLS_V2;\n   tv[i].tv_u.tv_add_symbols = add_symbols_v2;\n \n-  if (get_lto_wrapper (plugin_list_iter))\n-    {\n-      ++i;\n-      tv[i].tv_tag = LDPT_REGISTER_ALL_SYMBOLS_READ_HOOK;\n-      tv[i].tv_u.tv_register_all_symbols_read = register_all_symbols_read;\n-\n-      ++i;\n-      tv[i].tv_tag = LDPT_REGISTER_CLEANUP_HOOK;\n-      tv[i].tv_u.tv_register_cleanup = register_cleanup;\n-\n-      ++i;\n-      tv[i].tv_tag = LDPT_GET_SYMBOLS;\n-      tv[i].tv_u.tv_get_symbols = get_symbols;\n-\n-      ++i;\n-      tv[i].tv_tag = LDPT_GET_SYMBOLS_V2;\n-      tv[i].tv_u.tv_get_symbols = get_symbols;\n-\n-      ++i;\n-      tv[i].tv_tag = LDPT_OPTION;\n-      tv[i].tv_u.tv_string = plugin_list_iter->lto_wrapper;\n-\n-      ++i;\n-      tv[i].tv_tag = LDPT_OPTION;\n-      tv[i].tv_u.tv_string = plugin_list_iter->resolution_option;\n-\n-      ++i;\n-      tv[i].tv_tag = LDPT_LINKER_OUTPUT;\n-      tv[i].tv_u.tv_val = LDPO_EXEC;\n-\n-      ++i;\n-      tv[i].tv_tag = LDPT_ADD_INPUT_FILE;\n-      tv[i].tv_u.tv_add_input_file = add_input_file;\n-    }\n-\n   ++i;\n   tv[i].tv_tag = LDPT_NULL;\n   tv[i].tv_u.tv_val = 0;\n@@ -724,10 +332,6 @@ try_load_plugin (const char *pname,\n   if (status != LDPS_OK)\n     goto short_circuit;\n \n-  if (current_plugin->lto_wrapper\n-      && setup_lto_wrapper_env (current_plugin))\n-    goto short_circuit;\n-\n   abfd->plugin_format = bfd_plugin_no;\n \n   if (!current_plugin->claim_file)\n@@ -1002,15 +606,7 @@ bfd_plugin_canonicalize_symtab (bfd *abfd,\n \t\t\tSEC_ALLOC);\n   static asection fake_common_section\n     = BFD_FAKE_SECTION (fake_common_section, NULL, \"plug\", 0, SEC_IS_COMMON);\n-  int i, j;\n-  long real_nsyms;\n-  asymbol **real_syms;\n-\n-  real_syms = plugin_data->real_syms;\n-  if (real_syms)\n-    real_nsyms = plugin_data->real_nsyms;\n-  else\n-    real_nsyms = 0;\n+  int i;\n \n   for (i = 0; i < nsyms; i++)\n     {\n@@ -1050,18 +646,7 @@ bfd_plugin_canonicalize_symtab (bfd *abfd,\n \t\tbreak;\n \t      }\n \t  else\n-\t    {\n-\t      s->section = &fake_text_section;\n-\t      if (real_nsyms)\n-\t\t/* Use real LTO symbols if possible.  */\n-\t\tfor (j = 0; j < real_nsyms; j++)\n-\t\t  if (real_syms[j]->name\n-\t\t      && strcmp (syms[i].name, real_syms[j]->name) == 0)\n-\t\t    {\n-\t\t      s->section = real_syms[j]->section;\n-\t\t      break;\n-\t\t    }\n-\t    }\n+\t    s->section = &fake_text_section;\n \t  break;\n \tdefault:\n \t  BFD_ASSERT (0);\n@@ -1110,24 +695,6 @@ bfd_plugin_sizeof_headers (bfd *a ATTRIBUTE_UNUSED,\n   return 0;\n }\n \n-static bfd_boolean\n-bfd_plugin_close_and_cleanup (bfd *abfd)\n-{\n-  struct plugin_data_struct *plugin_data;\n-\n-  if (abfd->format != bfd_archive\n-      && (plugin_data = abfd->tdata.plugin_data))\n-    {\n-      if (plugin_data->real_bfd)\n-\tbfd_close (plugin_data->real_bfd);\n-\n-      if (plugin_data->real_syms)\n-\tfree (plugin_data->real_syms);\n-    }\n-\n-  return _bfd_generic_close_and_cleanup (abfd);\n-}\n-\n const bfd_target plugin_vec =\n {\n   \"plugin\",\t\t\t/* Name.  */"
    },
    {
      "sha": "075532dca0f1defd5ad18064bd46b5fa801af966",
      "filename": "bfd/plugin.h",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/plugin.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d98c46092341c1373d960d0a66ca502d5b7ee7f/bfd/plugin.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.h?ref=3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "patch": "@@ -21,7 +21,7 @@\n #ifndef _PLUGIN_H_\n #define _PLUGIN_H_\n \n-void bfd_plugin_set_program_name (const char *, int);\n+void bfd_plugin_set_program_name (const char *);\n int bfd_plugin_open_input (bfd *, struct ld_plugin_input_file *);\n void bfd_plugin_set_plugin (const char *);\n bfd_boolean bfd_plugin_target_p (const bfd_target *);\n@@ -33,9 +33,6 @@ typedef struct plugin_data_struct\n {\n   int nsyms;\n   const struct ld_plugin_symbol *syms;\n-  bfd *real_bfd;\n-  long real_nsyms;\n-  asymbol **real_syms;\n }\n plugin_data_struct;\n "
    },
    {
      "sha": "95761e07e7ac0b0d227d1a5e500a022239d83553",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d98c46092341c1373d960d0a66ca502d5b7ee7f/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d98c46092341c1373d960d0a66ca502d5b7ee7f/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* ar.c (main): Update bfd_plugin_set_program_name call.\n+\t* nm.c (main): Likewise.\n+\n 2020-03-19  Nick Clifton  <nickc@redhat.com>\n \n \tPR 25676"
    },
    {
      "sha": "1057db9980eddc4559ce5d8c253ddf483a29e1f5",
      "filename": "binutils/ar.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d98c46092341c1373d960d0a66ca502d5b7ee7f/binutils/ar.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d98c46092341c1373d960d0a66ca502d5b7ee7f/binutils/ar.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ar.c?ref=3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "patch": "@@ -725,7 +725,7 @@ main (int argc, char **argv)\n   xmalloc_set_program_name (program_name);\n   bfd_set_error_program_name (program_name);\n #if BFD_SUPPORTS_PLUGINS\n-  bfd_plugin_set_program_name (program_name, 0);\n+  bfd_plugin_set_program_name (program_name);\n #endif\n \n   expandargv (&argc, &argv);"
    },
    {
      "sha": "0ee3f8838654adb39054f1ad64cc4eab2b4cc288",
      "filename": "binutils/nm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d98c46092341c1373d960d0a66ca502d5b7ee7f/binutils/nm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d98c46092341c1373d960d0a66ca502d5b7ee7f/binutils/nm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/nm.c?ref=3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "patch": "@@ -1701,7 +1701,7 @@ main (int argc, char **argv)\n   xmalloc_set_program_name (program_name);\n   bfd_set_error_program_name (program_name);\n #if BFD_SUPPORTS_PLUGINS\n-  bfd_plugin_set_program_name (program_name, 1);\n+  bfd_plugin_set_program_name (program_name);\n #endif\n \n   START_PROGRESS (program_name, 0);"
    },
    {
      "sha": "16c8b8b0698ed2a6c1a0936a4ad960aa91d19043",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d98c46092341c1373d960d0a66ca502d5b7ee7f/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d98c46092341c1373d960d0a66ca502d5b7ee7f/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-20  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* testsuite/ld-plugin/lto.exp (lto_link_tests): Run PR ld/25355\n+\ttest only for GCC 10 or newer.\n+\n 2020-03-20  Alan Modra  <amodra@gmail.com>\n \n \t* testplug.c (parse_symdefstr): Use %hhi to read sym->def, and"
    },
    {
      "sha": "8ffc03f01a2538fc695bc5c6079e4ef7fcbd717c",
      "filename": "ld/testsuite/ld-plugin/lto.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d98c46092341c1373d960d0a66ca502d5b7ee7f/ld/testsuite/ld-plugin/lto.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d98c46092341c1373d960d0a66ca502d5b7ee7f/ld/testsuite/ld-plugin/lto.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-plugin/lto.exp?ref=3d98c46092341c1373d960d0a66ca502d5b7ee7f",
      "patch": "@@ -234,13 +234,18 @@ set lto_link_tests [list \\\n   [list \"Build pr24406-2b.o\" \\\n    \"\" \"-O2 -fno-lto\" \\\n    {pr24406-2b.c}] \\\n-  [list \"pr25355.o\" \\\n-   \"\" \\\n-   \"-flto -fno-common $lto_no_fat\" \\\n-   {pr25355.c} \\\n-   [list [list \"nm\" \"$plug_opt\" \"pr25355.d\"]]] \\\n ]\n \n+if { [at_least_gcc_version 10 0] } {\n+    set lto_link_tests [concat $lto_link_tests [list \\\n+\t[list \"pr25355.o\" \\\n+\t \"\" \\\n+\t \"-flto -fno-common $lto_no_fat\" \\\n+\t {pr25355.c} \\\n+\t [list [list \"nm\" \"$plug_opt\" \"pr25355.d\"]]] \\\n+    ]]\n+}\n+\n if { [at_least_gcc_version 4 7] } {\n     set lto_link_tests [concat $lto_link_tests [list \\\n       [list \"Compile PR ld/12942 (1)\" \\"
    }
  ]
}