{
  "sha": "24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjRhZWJjNzliMTZhODJmYWVmNDczNmY0YWJkYzdlNGQ5NWQ0Y2M2Nw==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-04-28T10:49:09Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-04-28T10:49:09Z"
    },
    "message": "Stop the BFD library from treating annobin symbols as potential function symbols.\n\nbfd\t* elf.c (_bfd_elf_maybe_function_sym): Do not accept annobin\n\tsymbols as potential function symbols.\n\t* elfnn-aarch64.c (elfNN_aarch64_maybe_function_sym): Likewise.\n\t* elf64-ppc.c (ppc64_elf_maybe_function_sym): Likewise.\n\t* elf32-arm.c (elf32_arm_maybe_function_sym): Likewise.\n\nld\t* testsuite/ld-elf/anno-sym.s: New test source file.\n\t* testsuite/ld-elf/anno-sym.d: New test driver.\n\t* testsuite/ld-elf/anno-sym.l: New test error output.",
    "tree": {
      "sha": "ea49e9d39592b298a0ed0297a2163a77b98cbc1e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ea49e9d39592b298a0ed0297a2163a77b98cbc1e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 105,
    "deletions": 30
  },
  "files": [
    {
      "sha": "47b9c9135819b2d3a0f19b14ee5e640c5153511d",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
      "patch": "@@ -1,3 +1,11 @@\n+2021-04-28  Nick Clifton  <nickc@redhat.com>\n+\n+\t* elf.c (_bfd_elf_maybe_function_sym): Do not accept annobin\n+\tsymbols as potential function symbols.\n+\t* elfnn-aarch64.c (elfNN_aarch64_maybe_function_sym): Likewise.\n+\t* elf64-ppc.c (ppc64_elf_maybe_function_sym): Likewise.\n+\t* elf32-arm.c (elf32_arm_maybe_function_sym): Likewise.\n+\n 2021-04-26  Mike Frysinger  <vapier@gentoo.org>\n \n \t* elf-bfd.h: Include stdlib.h."
    },
    {
      "sha": "851440b765284763b373739444073f732d31f60b",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 17,
      "deletions": 6,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
      "patch": "@@ -12618,19 +12618,30 @@ _bfd_elf_maybe_function_sym (const asymbol *sym, asection *sec,\n \t\t\t     bfd_vma *code_off)\n {\n   bfd_size_type size;\n+  elf_symbol_type * elf_sym = (elf_symbol_type *) sym;\n \n   if ((sym->flags & (BSF_SECTION_SYM | BSF_FILE | BSF_OBJECT\n \t\t     | BSF_THREAD_LOCAL | BSF_RELC | BSF_SRELC)) != 0\n       || sym->section != sec)\n     return 0;\n \n+  size = (sym->flags & BSF_SYNTHETIC) ? 0 : elf_sym->internal_elf_sym.st_size;\n+  \n+  /* In theory we should check that the symbol's type satisfies\n+     _bfd_elf_is_function_type(), but there are some function-like\n+     symbols which would fail this test.  (eg _start).  Instead\n+     we check for hidden, local, notype symbols with zero size.\n+     This type of symbol is generated by the annobin plugin for gcc\n+     and clang, and should not be considered to be a function symbol.  */\n+  if (size == 0\n+      && ((sym->flags & (BSF_SYNTHETIC | BSF_LOCAL)) == BSF_LOCAL)\n+      && ELF_ST_TYPE (elf_sym->internal_elf_sym.st_info) == STT_NOTYPE\n+      && ELF_ST_VISIBILITY (elf_sym->internal_elf_sym.st_other) == STV_HIDDEN)\n+    return 0;\n+  \n   *code_off = sym->value;\n-  size = 0;\n-  if (!(sym->flags & BSF_SYNTHETIC))\n-    size = ((elf_symbol_type *) sym)->internal_elf_sym.st_size;\n-  if (size == 0)\n-    size = 1;\n-  return size;\n+  /* Do not return 0 for the function's size.  */\n+  return size ? size : 1;\n }\n \n /* Set to non-zero to enable some debug messages.  */"
    },
    {
      "sha": "79b94e836fc82296a8b48e7baeecf040bc6c86ae",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 18,
      "deletions": 9,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
      "patch": "@@ -15898,35 +15898,44 @@ elf32_arm_maybe_function_sym (const asymbol *sym, asection *sec,\n \t\t\t      bfd_vma *code_off)\n {\n   bfd_size_type size;\n+  elf_symbol_type * elf_sym = (elf_symbol_type *) sym;\n \n   if ((sym->flags & (BSF_SECTION_SYM | BSF_FILE | BSF_OBJECT\n \t\t     | BSF_THREAD_LOCAL | BSF_RELC | BSF_SRELC)) != 0\n       || sym->section != sec)\n     return 0;\n \n+  size = (sym->flags & BSF_SYNTHETIC) ? 0 : elf_sym->internal_elf_sym.st_size;\n+\n   if (!(sym->flags & BSF_SYNTHETIC))\n-    switch (ELF_ST_TYPE (((elf_symbol_type *) sym)->internal_elf_sym.st_info))\n+    switch (ELF_ST_TYPE (elf_sym->internal_elf_sym.st_info))\n       {\n+\tcase STT_NOTYPE:\n+\t  /* Ignore symbols created by the annobin plugin for gcc and clang.\n+\t     These symbols are hidden, local, notype and have a size of 0.  */\n+\t  if (size == 0\n+\t      && sym->flags & BSF_LOCAL\n+\t      && ELF_ST_VISIBILITY (elf_sym->internal_elf_sym.st_other) == STV_HIDDEN)\n+\t    return 0;\n+\t  /* Fall through.  */\n \tcase STT_FUNC:\n \tcase STT_ARM_TFUNC:\n-\tcase STT_NOTYPE:\n+\t  /* FIXME: Allow STT_GNU_IFUNC as well ?  */\n \t  break;\n \tdefault:\n \t  return 0;\n       }\n-\n+\t\t\t\t\t\t\t\t\t\t\t     \n   if ((sym->flags & BSF_LOCAL)\n       && bfd_is_arm_special_symbol_name (sym->name,\n \t\t\t\t\t BFD_ARM_SPECIAL_SYM_TYPE_ANY))\n     return 0;\n \n   *code_off = sym->value;\n-  size = 0;\n-  if (!(sym->flags & BSF_SYNTHETIC))\n-    size = ((elf_symbol_type *) sym)->internal_elf_sym.st_size;\n-  if (size == 0)\n-    size = 1;\n-  return size;\n+\n+  /* Do not return 0 for the function's size.  */\n+  return size ? size : 1;\n+\n }\n \n static bool"
    },
    {
      "sha": "ed72de27507f835bc789c01cffffccf7e1f32b9e",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 17,
      "deletions": 6,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
      "patch": "@@ -5534,14 +5534,25 @@ ppc64_elf_maybe_function_sym (const asymbol *sym, asection *sec,\n \t\t\t      bfd_vma *code_off)\n {\n   bfd_size_type size;\n+  elf_symbol_type * elf_sym = (elf_symbol_type *) sym;\n \n   if ((sym->flags & (BSF_SECTION_SYM | BSF_FILE | BSF_OBJECT\n \t\t     | BSF_THREAD_LOCAL | BSF_RELC | BSF_SRELC)) != 0)\n     return 0;\n \n-  size = 0;\n-  if (!(sym->flags & BSF_SYNTHETIC))\n-    size = ((elf_symbol_type *) sym)->internal_elf_sym.st_size;\n+  size = (sym->flags & BSF_SYNTHETIC) ? 0 : elf_sym->internal_elf_sym.st_size;\n+\n+  /* In theory we should check that the symbol's type satisfies\n+     _bfd_elf_is_function_type(), but there are some function-like\n+     symbols which would fail this test.  (eg _start).  Instead\n+     we check for hidden, local, notype symbols with zero size.\n+     This type of symbol is generated by the annobin plugin for gcc\n+     and clang, and should not be considered to be a function symbol.  */\n+  if (size == 0\n+      && ((sym->flags & (BSF_SYNTHETIC | BSF_LOCAL)) == BSF_LOCAL)\n+      && ELF_ST_TYPE (elf_sym->internal_elf_sym.st_info) == STT_NOTYPE\n+      && ELF_ST_VISIBILITY (elf_sym->internal_elf_sym.st_other) == STV_HIDDEN)\n+    return 0;\n \n   if (strcmp (sym->section->name, \".opd\") == 0)\n     {\n@@ -5585,9 +5596,9 @@ ppc64_elf_maybe_function_sym (const asymbol *sym, asection *sec,\n \treturn 0;\n       *code_off = sym->value;\n     }\n-  if (size == 0)\n-    size = 1;\n-  return size;\n+\n+  /* Do not return 0 for the function's size.  */\n+  return size ? size : 1;\n }\n \n /* Return true if symbol is a strong function defined in an ELFv2"
    },
    {
      "sha": "b6f083e430bb51e6930d4663f60362079101511c",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 17,
      "deletions": 9,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
      "patch": "@@ -8012,34 +8012,42 @@ elfNN_aarch64_maybe_function_sym (const asymbol *sym, asection *sec,\n \t\t\t\t  bfd_vma *code_off)\n {\n   bfd_size_type size;\n+  elf_symbol_type * elf_sym = (elf_symbol_type *) sym;\n \n   if ((sym->flags & (BSF_SECTION_SYM | BSF_FILE | BSF_OBJECT\n \t\t     | BSF_THREAD_LOCAL | BSF_RELC | BSF_SRELC)) != 0\n       || sym->section != sec)\n     return 0;\n \n+  size = (sym->flags & BSF_SYNTHETIC) ? 0 : elf_sym->internal_elf_sym.st_size;\n+  \n   if (!(sym->flags & BSF_SYNTHETIC))\n-    switch (ELF_ST_TYPE (((elf_symbol_type *) sym)->internal_elf_sym.st_info))\n+    switch (ELF_ST_TYPE (elf_sym->internal_elf_sym.st_info))\n       {\n-\tcase STT_FUNC:\n \tcase STT_NOTYPE:\n+\t  /* Ignore symbols created by the annobin plugin for gcc and clang.\n+\t     These symbols are hidden, local, notype and have a size of 0.  */\n+\t  if (size == 0\n+\t      && sym->flags & BSF_LOCAL\n+\t      && ELF_ST_VISIBILITY (elf_sym->internal_elf_sym.st_other) == STV_HIDDEN)\n+\t    return 0;\n+\t  /* Fall through.  */\n+\tcase STT_FUNC:\n+\t  /* FIXME: Allow STT_GNU_IFUNC as well ?  */\n \t  break;\n \tdefault:\n \t  return 0;\n       }\n-\n+  \n   if ((sym->flags & BSF_LOCAL)\n       && bfd_is_aarch64_special_symbol_name (sym->name,\n \t\t\t\t\t     BFD_AARCH64_SPECIAL_SYM_TYPE_ANY))\n     return 0;\n \n   *code_off = sym->value;\n-  size = 0;\n-  if (!(sym->flags & BSF_SYNTHETIC))\n-    size = ((elf_symbol_type *) sym)->internal_elf_sym.st_size;\n-  if (size == 0)\n-    size = 1;\n-  return size;\n+\n+  /* Do not return 0 for the function's size.  */\n+  return size ? size : 1;\n }\n \n static bool"
    },
    {
      "sha": "3c4bec58949b1dea6463c35bbcb3acecfaf0eddf",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
      "patch": "@@ -1,3 +1,9 @@\n+2021-04-28  Nick Clifton  <nickc@redhat.com>\n+\n+\t* testsuite/ld-elf/anno-sym.s: New test source file.\n+\t* testsuite/ld-elf/anno-sym.d: New test driver.\n+\t* testsuite/ld-elf/anno-sym.l: New test error output.\n+\n 2021-04-26  Jan Beulich  <jbeulich@suse.com>\n \n \t* testsuite/ld-i386/pcrel16-2.s, testsuite/ld-i386/pcrel16-2.d,"
    },
    {
      "sha": "9e53c4a9c168b73372120748af9b91052b2674a6",
      "filename": "ld/testsuite/ld-elf/anno-sym.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/ld/testsuite/ld-elf/anno-sym.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/ld/testsuite/ld-elf/anno-sym.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/anno-sym.d?ref=24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
      "patch": "@@ -0,0 +1,5 @@\n+# Check that linking anno-sym.o produces an undefined reference message referring to '_start' and not 'annobin_hello.c'\n+#ld:  -e _start\n+#error_output: anno-sym.l\n+# The mips-irix6 target fails this test because it does not find any function symbols.  Not sure why.\n+#skip: *-*-irix*"
    },
    {
      "sha": "ee9611aef4ead48e7a313dbbc108d59277ae147e",
      "filename": "ld/testsuite/ld-elf/anno-sym.l",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/ld/testsuite/ld-elf/anno-sym.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/ld/testsuite/ld-elf/anno-sym.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/anno-sym.l?ref=24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
      "patch": "@@ -0,0 +1,4 @@\n+#...\n+.*: in function `(|_)start':\n+.*: undefined reference to `foo'\n+#pass"
    },
    {
      "sha": "0e4b5aa79c3dcbb8f48c6a93541f51943e9a0bff",
      "filename": "ld/testsuite/ld-elf/anno-sym.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/ld/testsuite/ld-elf/anno-sym.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24aebc79b16a82faef4736f4abdc7e4d95d4cc67/ld/testsuite/ld-elf/anno-sym.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/anno-sym.s?ref=24aebc79b16a82faef4736f4abdc7e4d95d4cc67",
      "patch": "@@ -0,0 +1,13 @@\n+\t.text\n+\n+\t.hidden .annobin_hello.c\n+\t.type .annobin_hello.c, STT_NOTYPE\n+\t.equiv .annobin_hello.c, .\n+\t.size .annobin_hello.c, 0\n+\t\n+\t.global _start\n+_start:\n+\t.nop\n+\t.align 4\n+\t.dc.a foo\n+"
    }
  ]
}