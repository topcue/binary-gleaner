{
  "sha": "9df6f676c2c7280dc0c419c43927a07c6359814d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWRmNmY2NzZjMmM3MjgwZGMwYzQxOWM0MzkyN2EwN2M2MzU5ODE0ZA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-29T10:03:31Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-29T10:03:31Z"
    },
    "message": "x86: shrink some struct insn_template fields\n\nNow that all base opcodes are only at most 2 bytes in size, shrink its\ntemplate field to just as much. By also shrinking extension_opcode and\noperands to just what they really need, we can free up an entire 32-bit\nslot (plus 4 left bits past the bitfields themselves).\n\nAt present this alters sizeof(struct insn_template) only for 32-bit\nbuilds. In 64-bit builds it instead leaves a padding hole that will\nallow to buffer future growth of other fields (opcode_modifier,\ncpu_flags, operand_types[]).",
    "tree": {
      "sha": "ebc12d8d2d39793ca514b4f004494a17c5a6710f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ebc12d8d2d39793ca514b4f004494a17c5a6710f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9df6f676c2c7280dc0c419c43927a07c6359814d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9df6f676c2c7280dc0c419c43927a07c6359814d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9df6f676c2c7280dc0c419c43927a07c6359814d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9df6f676c2c7280dc0c419c43927a07c6359814d/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "389d00a5e5b1fa6fcd9eda747b17ef73f58eb693",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/389d00a5e5b1fa6fcd9eda747b17ef73f58eb693",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/389d00a5e5b1fa6fcd9eda747b17ef73f58eb693"
    }
  ],
  "stats": {
    "total": 14,
    "additions": 10,
    "deletions": 4
  },
  "files": [
    {
      "sha": "ff0ecf3bddc8f42d0eb164669b1ffb8e54e639c5",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9df6f676c2c7280dc0c419c43927a07c6359814d/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9df6f676c2c7280dc0c419c43927a07c6359814d/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=9df6f676c2c7280dc0c419c43927a07c6359814d",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-29  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-opc.h (struct insn_template): Shrink base_opcode to 16\n+\tbits. Shrink extension_opcode to 9 bits. Make it signed. Change\n+\tvalue of None. Shrink operands to 3 bits.\n+\n 2021-03-29  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-gen.c (process_i386_opcode_modifier): New parameter"
    },
    {
      "sha": "115895c65ed0cb5ba8b59569109611ffb69e0c87",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9df6f676c2c7280dc0c419c43927a07c6359814d/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9df6f676c2c7280dc0c419c43927a07c6359814d/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=9df6f676c2c7280dc0c419c43927a07c6359814d",
      "patch": "@@ -917,7 +917,7 @@ typedef struct insn_template\n \n   /* base_opcode is the fundamental opcode byte without optional\n      prefix(es).  */\n-  unsigned int base_opcode;\n+  unsigned int base_opcode:16;\n #define Opcode_D\t0x2 /* Direction bit:\n \t\t\t       set if Reg --> Regmem;\n \t\t\t       unset if Regmem --> Reg. */\n@@ -934,8 +934,8 @@ typedef struct insn_template\n      AMD 3DNow! instructions.\n      If this template has no extension opcode (the usual case) use None\n      Instructions */\n-  unsigned short extension_opcode;\n-#define None 0xffff\t\t/* If no extension_opcode is possible.  */\n+  signed int extension_opcode:9;\n+#define None (-1)\t\t/* If no extension_opcode is possible.  */\n \n /* Pseudo prefixes.  */\n #define Prefix_Disp8\t\t0\t/* {disp8} */\n@@ -950,7 +950,7 @@ typedef struct insn_template\n #define Prefix_NoOptimize\t9\t/* {nooptimize} */\n \n   /* how many operands */\n-  unsigned char operands;\n+  unsigned int operands:3;\n \n   /* the bits in opcode_modifier are used to generate the final opcode from\n      the base_opcode.  These bits also are used to detect alternate forms of"
    }
  ]
}