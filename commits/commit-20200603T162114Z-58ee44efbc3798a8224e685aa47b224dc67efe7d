{
  "sha": "58ee44efbc3798a8224e685aa47b224dc67efe7d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NThlZTQ0ZWZiYzM3OThhODIyNGU2ODVhYTQ3YjIyNGRjNjdlZmU3ZA==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-06-03T16:21:03Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-06-03T16:21:14Z"
    },
    "message": "nios2: Don't check relocations in non-loaded, non-alloced sections\n\nDon't do anything special with non-loaded, non-alloced sections.\nIn particular, any relocs in such sections should not affect GOT\nand PLT reference counting (ie. we don't allow them to create GOT\nor PLT entries), there's no possibility or desire to optimize TLS\nrelocs, and there's not much point in propagating relocs to shared\nlibs that the dynamic linker won't relocate.\n\n\tPR ld/26066\n\t* elf32-nios2.c (nios2_elf32_check_relocs): Skip non-loaded,\n\tnon-alloced sections.",
    "tree": {
      "sha": "1146bfed3c6169097d7069ef96c3b47a9c2f9a4c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1146bfed3c6169097d7069ef96c3b47a9c2f9a4c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/58ee44efbc3798a8224e685aa47b224dc67efe7d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/58ee44efbc3798a8224e685aa47b224dc67efe7d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/58ee44efbc3798a8224e685aa47b224dc67efe7d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/58ee44efbc3798a8224e685aa47b224dc67efe7d/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9a6896021df5997a1ea5d52b86b833920005e652",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a6896021df5997a1ea5d52b86b833920005e652",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9a6896021df5997a1ea5d52b86b833920005e652"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 15,
    "deletions": 0
  },
  "files": [
    {
      "sha": "08f8a50eede80f9391ba0d24418690b6b382bbb1",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/58ee44efbc3798a8224e685aa47b224dc67efe7d/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/58ee44efbc3798a8224e685aa47b224dc67efe7d/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=58ee44efbc3798a8224e685aa47b224dc67efe7d",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/26066\n+\t* elf32-nios2.c (nios2_elf32_check_relocs): Skip non-loaded,\n+\tnon-alloced sections.\n+\n 2020-06-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* elf32-frv.c (elf32_frv_relocate_section): Don't generate"
    },
    {
      "sha": "453b7cf5a3de86d3ab01eae39f5fd1e9baa3a37e",
      "filename": "bfd/elf32-nios2.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/58ee44efbc3798a8224e685aa47b224dc67efe7d/bfd/elf32-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/58ee44efbc3798a8224e685aa47b224dc67efe7d/bfd/elf32-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nios2.c?ref=58ee44efbc3798a8224e685aa47b224dc67efe7d",
      "patch": "@@ -4689,6 +4689,15 @@ nios2_elf32_check_relocs (bfd *abfd, struct bfd_link_info *info,\n   if (bfd_link_relocatable (info))\n     return TRUE;\n \n+  /* Don't do anything special with non-loaded, non-alloced sections.\n+     In particular, any relocs in such sections should not affect GOT\n+     and PLT reference counting (ie. we don't allow them to create GOT\n+     or PLT entries), there's no possibility or desire to optimize TLS\n+     relocs, and there's not much point in propagating relocs to shared\n+     libs that the dynamic linker won't relocate.  */\n+  if ((sec->flags & SEC_ALLOC) == 0)\n+    return TRUE;\n+\n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);\n   sym_hashes_end = (sym_hashes"
    }
  ]
}