{
  "sha": "835f2fae11e41956523df3839cd50471b708e97d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODM1ZjJmYWUxMWU0MTk1NjUyM2RmMzgzOWNkNTA0NzFiNzA4ZTk3ZA==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-03-18T14:01:25Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-03-18T14:01:25Z"
    },
    "message": "Fix section dumping so that warnings are not issued for missed sections in separate debuginfo files.\n\n\tPR 27478\n\t* readelf.c (dump_section_as_strings): Mention separate filename.\n\t(dump_section_as_bytes): Likewise.\n\t(dump_section_as_ctf): Likewise.\n\t(initialise_dumkps_byname): Only issue a warning for missing\n\tsections if processing the main file.\n\t(process_section_contents): Only issue a warning for unsumped\n\tsection numbers in the main file.\n\t(initialise_dump_sects): New function.  Contains code extracted\n\tfrom ...\n\t(process_object): ... here.  Also call initialise_dump_sects for\n\tseparate files.",
    "tree": {
      "sha": "3919da9b67926024b4de6eb232406587504f82d7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3919da9b67926024b4de6eb232406587504f82d7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/835f2fae11e41956523df3839cd50471b708e97d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/835f2fae11e41956523df3839cd50471b708e97d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/835f2fae11e41956523df3839cd50471b708e97d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/835f2fae11e41956523df3839cd50471b708e97d/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "69a284867c7c92960653cbeab6f79cd815f1342f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/69a284867c7c92960653cbeab6f79cd815f1342f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/69a284867c7c92960653cbeab6f79cd815f1342f"
    }
  ],
  "stats": {
    "total": 118,
    "additions": 75,
    "deletions": 43
  },
  "files": [
    {
      "sha": "e10e7a02f2ad21933e9b5cc24f88551a4228fe65",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/835f2fae11e41956523df3839cd50471b708e97d/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/835f2fae11e41956523df3839cd50471b708e97d/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=835f2fae11e41956523df3839cd50471b708e97d",
      "patch": "@@ -1,3 +1,18 @@\n+2021-03-18  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 27478\n+\t* readelf.c (dump_section_as_strings): Mention separate filename.\n+\t(dump_section_as_bytes): Likewise.\n+\t(dump_section_as_ctf): Likewise.\n+\t(initialise_dumkps_byname): Only issue a warning for missing\n+\tsections if processing the main file.\n+\t(process_section_contents): Only issue a warning for unsumped\n+\tsection numbers in the main file.\n+\t(initialise_dump_sects): New function.  Contains code extracted\n+\tfrom ...\n+\t(process_object): ... here.  Also call initialise_dump_sects for\n+\tseparate files.\n+\n 2021-03-16  Nick Clifton  <nickc@redhat.com>\n \n \tPR 27534"
    },
    {
      "sha": "9d7abac1bc5bdbdd0e3a998151181b31fb4480b2",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 60,
      "deletions": 43,
      "changes": 103,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/835f2fae11e41956523df3839cd50471b708e97d/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/835f2fae11e41956523df3839cd50471b708e97d/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=835f2fae11e41956523df3839cd50471b708e97d",
      "patch": "@@ -14457,7 +14457,13 @@ dump_section_as_strings (Elf_Internal_Shdr * section, Filedata * filedata)\n \n   num_bytes = section->sh_size;\n \n-  printf (_(\"\\nString dump of section '%s':\\n\"), printable_section_name (filedata, section));\n+  if (filedata->is_separate)\n+    printf (_(\"\\nString dump of section '%s' in linked file %s:\\n\"),\n+\t    printable_section_name (filedata, section),\n+\t    filedata->file_name);\n+  else\n+    printf (_(\"\\nString dump of section '%s':\\n\"),\n+\t    printable_section_name (filedata, section));\n \n   if (decompress_dumps)\n     {\n@@ -14667,7 +14673,13 @@ dump_section_as_bytes (Elf_Internal_Shdr *  section,\n \n   section_size = section->sh_size;\n \n-  printf (_(\"\\nHex dump of section '%s':\\n\"), printable_section_name (filedata, section));\n+  if (filedata->is_separate)\n+    printf (_(\"\\nHex dump of section '%s' in linked file %s:\\n\"),\n+\t    printable_section_name (filedata, section),\n+\t    filedata->file_name);\n+  else\n+    printf (_(\"\\nHex dump of section '%s':\\n\"),\n+\t    printable_section_name (filedata, section));\n \n   if (decompress_dumps)\n     {\n@@ -14956,6 +14968,7 @@ dump_section_as_ctf (Elf_Internal_Shdr * section, Filedata * filedata)\n       symsectp = shdr_to_ctf_sect (&symsect, symtab_sec, filedata);\n       symsect.cts_data = symdata;\n     }\n+\n   if (dump_ctf_strtab_name && dump_ctf_strtab_name[0] != 0)\n     {\n       if ((strtab_sec = find_section (filedata, dump_ctf_strtab_name)) == NULL)\n@@ -14972,6 +14985,7 @@ dump_section_as_ctf (Elf_Internal_Shdr * section, Filedata * filedata)\n       strsectp = shdr_to_ctf_sect (&strsect, strtab_sec, filedata);\n       strsect.cts_data = strdata;\n     }\n+\n   if (dump_ctf_parent_name)\n     {\n       if ((parent_sec = find_section (filedata, dump_ctf_parent_name)) == NULL)\n@@ -15028,8 +15042,13 @@ dump_section_as_ctf (Elf_Internal_Shdr * section, Filedata * filedata)\n \n   ret = TRUE;\n \n-  printf (_(\"\\nDump of CTF section '%s':\\n\"),\n-\t  printable_section_name (filedata, section));\n+  if (filedata->is_separate)\n+    printf (_(\"\\nDump of CTF section '%s' in linked file %s:\\n\"),\n+\t    printable_section_name (filedata, section),\n+\t    filedata->file_name);\n+  else\n+    printf (_(\"\\nDump of CTF section '%s':\\n\"),\n+\t    printable_section_name (filedata, section));\n \n   if ((err = ctf_archive_iter (ctfa, dump_ctf_archive_member, parent)) != 0)\n     {\n@@ -15479,15 +15498,9 @@ initialise_dumps_byname (Filedata * filedata)\n \t    any = TRUE;\n \t  }\n \n-      if (!any)\n-\t{\n-\t  if (filedata->is_separate)\n-\t    warn (_(\"Section '%s' in linked file '%s' was not dumped because it does not exist\\n\"),\n-\t\t  cur->name, filedata->file_name);\n-\t  else\n-\t    warn (_(\"Section '%s' was not dumped because it does not exist\\n\"),\n-\t\t  cur->name);\n-\t}\n+      if (!any && !filedata->is_separate)\n+\twarn (_(\"Section '%s' was not dumped because it does not exist\\n\"),\n+\t      cur->name);\n     }\n }\n \n@@ -15552,20 +15565,16 @@ process_section_contents (Filedata * filedata)\n #endif\n     }\n \n-  /* Check to see if the user requested a\n-     dump of a section that does not exist.  */\n-  while (i < filedata->dump.num_dump_sects)\n+  if (! filedata->is_separate)\n     {\n-      if (filedata->dump.dump_sects[i])\n-\t{\n-\t  if (filedata->is_separate)\n-\t    warn (_(\"Section %d in linked file '%s' was not dumped because it does not exist!\\n\"),\n-\t\t  i, filedata->file_name);\n-\t  else\n+      /* Check to see if the user requested a\n+\t dump of a section that does not exist.  */\n+      for (; i < filedata->dump.num_dump_sects; i++)\n+\tif (filedata->dump.dump_sects[i])\n+\t  {\n \t    warn (_(\"Section %d was not dumped because it does not exist!\\n\"), i);\n-\t  res = FALSE;\n-\t}\n-      i++;\n+\t    res = FALSE;\n+\t  }\n     }\n \n   return res;\n@@ -21119,6 +21128,29 @@ open_debug_file (const char * pathname)\n   return open_file (pathname, TRUE);\n }\n \n+static void\n+initialise_dump_sects (Filedata * filedata)\n+{\n+  /* Initialise the dump_sects array from the cmdline_dump_sects array.\n+     Note we do this even if cmdline_dump_sects is empty because we\n+     must make sure that the dump_sets array is zeroed out before each\n+     object file is processed.  */\n+  if (filedata->dump.num_dump_sects > cmdline.num_dump_sects)\n+    memset (filedata->dump.dump_sects, 0,\n+\t    filedata->dump.num_dump_sects * sizeof (*filedata->dump.dump_sects));\n+\n+  if (cmdline.num_dump_sects > 0)\n+    {\n+      if (filedata->dump.num_dump_sects == 0)\n+\t/* A sneaky way of allocating the dump_sects array.  */\n+\trequest_dump_bynumber (&filedata->dump, cmdline.num_dump_sects, 0);\n+\n+      assert (filedata->dump.num_dump_sects >= cmdline.num_dump_sects);\n+      memcpy (filedata->dump.dump_sects, cmdline.dump_sects,\n+\t      cmdline.num_dump_sects * sizeof (*filedata->dump.dump_sects));\n+    }\n+}\n+\n /* Process one ELF object file according to the command line options.\n    This file may actually be stored in an archive.  The file is\n    positioned at the start of the ELF object.  Returns TRUE if no\n@@ -21150,24 +21182,7 @@ process_object (Filedata * filedata)\n   if (show_name)\n     printf (_(\"\\nFile: %s\\n\"), filedata->file_name);\n \n-  /* Initialise the dump_sects array from the cmdline_dump_sects array.\n-     Note we do this even if cmdline_dump_sects is empty because we\n-     must make sure that the dump_sets array is zeroed out before each\n-     object file is processed.  */\n-  if (filedata->dump.num_dump_sects > cmdline.num_dump_sects)\n-    memset (filedata->dump.dump_sects, 0,\n-\t    filedata->dump.num_dump_sects * sizeof (*filedata->dump.dump_sects));\n-\n-  if (cmdline.num_dump_sects > 0)\n-    {\n-      if (filedata->dump.num_dump_sects == 0)\n-\t/* A sneaky way of allocating the dump_sects array.  */\n-\trequest_dump_bynumber (&filedata->dump, cmdline.num_dump_sects, 0);\n-\n-      assert (filedata->dump.num_dump_sects >= cmdline.num_dump_sects);\n-      memcpy (filedata->dump.dump_sects, cmdline.dump_sects,\n-\t      cmdline.num_dump_sects * sizeof (*filedata->dump.dump_sects));\n-    }\n+  initialise_dump_sects (filedata);\n \n   if (! process_file_header (filedata))\n     return FALSE;\n@@ -21221,6 +21236,8 @@ process_object (Filedata * filedata)\n \n       for (d = first_separate_info; d != NULL; d = d->next)\n \t{\n+\t  initialise_dump_sects (d->handle);\n+\n \t  if (process_links && ! process_file_header (d->handle))\n \t    res = FALSE;\n \t  else if (! process_section_headers (d->handle))"
    }
  ]
}