{
  "sha": "fa40fbe484954c560ab1c0ff4bc1b2eeb1511344",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmE0MGZiZTQ4NDk1NGM1NjBhYjFjMGZmNGJjMWIyZWViMTUxMTM0NA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-10-09T06:26:33Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-10-09T12:54:17Z"
    },
    "message": "[GOLD] Power10 segv due to wild r2\n\nCalling non-pcrel functions from pcrel code requires a stub to set up\nr2.  Gold created the stub, but an \"optimisation\" made the stub jump\nto the function local entry, ie. r2 was not initialised.\n\nThis patch fixes that long branch stub problem, and another that might\noccur for plt call stubs to local functions.\n\nbfd/\n\t* elf64-ppc.c (write_plt_relocs_for_local_syms): Don't do local\n\tentry offset optimisation.\ngold/\n\t* powerpc.cc (Powerpc_relobj::do_relocate_sections): Don't do\n\tlocal entry offset optimisation for lplt_section.\n\t(Target_powerpc::Branch_info::make_stub): Don't add local\n\tentry offset to long branch dest passed to\n\tadd_long_branch_entry.  Do pass st_other bits.\n\t(Stub_table::Branch_stub_ent): Add \"other_\" field.\n\t(Stub_table::add_long_branch_entry): Add \"other\" param, and\n\tsave.\n\t(Stub_table::branch_stub_size): Adjust long branch offset.\n\t(Stub_table::do_write): Likewise.\n\t(Target_powerpc::Relocate::relocate): Likewise.",
    "tree": {
      "sha": "2e6af9068d974acf0b43a502398d069bbe23f0ec",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2e6af9068d974acf0b43a502398d069bbe23f0ec"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4290b0ab2b65db23afc9bd8177885bfd91911c0c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4290b0ab2b65db23afc9bd8177885bfd91911c0c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4290b0ab2b65db23afc9bd8177885bfd91911c0c"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 50,
    "deletions": 18
  },
  "files": [
    {
      "sha": "3ff3b1e23959c1982b70fadb6a99d2da080ec3da",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=fa40fbe484954c560ab1c0ff4bc1b2eeb1511344",
      "patch": "@@ -1,3 +1,8 @@\n+2020-10-09  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf64-ppc.c (write_plt_relocs_for_local_syms): Don't do local\n+\tentry offset optimisation.\n+\n 2020-10-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/26703"
    },
    {
      "sha": "c30215b55070ccf4ccdadd885169f3d823ac96d9",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=fa40fbe484954c560ab1c0ff4bc1b2eeb1511344",
      "patch": "@@ -14259,8 +14259,6 @@ write_plt_relocs_for_local_syms (struct bfd_link_info *info)\n \t\t}\n \n \t      val = sym->st_value + ent->addend;\n-\t      if (ELF_ST_TYPE (sym->st_info) != STT_GNU_IFUNC)\n-\t\tval += PPC64_LOCAL_ENTRY_OFFSET (sym->st_other);\n \t      if (sym_sec != NULL && sym_sec->output_section != NULL)\n \t\tval += sym_sec->output_offset + sym_sec->output_section->vma;\n "
    },
    {
      "sha": "25248a6267a0624b574ae570ac8a4a8d5cf8dfad",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=fa40fbe484954c560ab1c0ff4bc1b2eeb1511344",
      "patch": "@@ -1,3 +1,17 @@\n+2020-10-09  Alan Modra  <amodra@gmail.com>\n+\n+\t* powerpc.cc (Powerpc_relobj::do_relocate_sections): Don't do\n+\tlocal entry offset optimisation for lplt_section.\n+\t(Target_powerpc::Branch_info::make_stub): Don't add local\n+\tentry offset to long branch dest passed to\n+\tadd_long_branch_entry.  Do pass st_other bits.\n+\t(Stub_table::Branch_stub_ent): Add \"other_\" field.\n+\t(Stub_table::add_long_branch_entry): Add \"other\" param, and\n+\tsave.\n+\t(Stub_table::branch_stub_size): Adjust long branch offset.\n+\t(Stub_table::do_write): Likewise.\n+\t(Target_powerpc::Relocate::relocate): Likewise.\n+\n 2020-10-09  Alan Modra  <amodra@gmail.com>\n \n \t* powerpc.cc (is_got_reloc): New function."
    },
    {
      "sha": "476fb4e588d85f383b4d68bd9746d9ebb6be4bba",
      "filename": "gold/powerpc.cc",
      "status": "modified",
      "additions": 31,
      "deletions": 16,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344/gold/powerpc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa40fbe484954c560ab1c0ff4bc1b2eeb1511344/gold/powerpc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/powerpc.cc?ref=fa40fbe484954c560ab1c0ff4bc1b2eeb1511344",
      "patch": "@@ -2767,8 +2767,6 @@ Powerpc_relobj<size, big_endian>::do_relocate_sections(\n \t    if (this->local_has_plt_offset(i))\n \t      {\n \t\tAddress value = this->local_symbol_value(i, 0);\n-\t\tif (size == 64)\n-\t\t  value += ppc64_local_entry_offset(i);\n \t\tsize_t off = this->local_plt_offset(i);\n \t\telfcpp::Swap<size, big_endian>::writeval(oview + off, value);\n \t\tmodified = true;\n@@ -3539,6 +3537,7 @@ Target_powerpc<size, big_endian>::Branch_info::make_stub(\n       from += (this->object_->output_section(this->shndx_)->address()\n \t       + this->offset_);\n       Address to;\n+      unsigned int other;\n       if (gsym != NULL)\n \t{\n \t  switch (gsym->source())\n@@ -3566,8 +3565,7 @@ Target_powerpc<size, big_endian>::Branch_info::make_stub(\n \t  to = symtab->compute_final_value<size>(gsym, &status);\n \t  if (status != Symbol_table::CFVS_OK)\n \t    return true;\n-\t  if (size == 64)\n-\t    to += this->object_->ppc64_local_entry_offset(gsym);\n+\t  other = gsym->nonvis() >> 3;\n \t}\n       else\n \t{\n@@ -3584,8 +3582,7 @@ Target_powerpc<size, big_endian>::Branch_info::make_stub(\n \t      || !symval.has_output_value())\n \t    return true;\n \t  to = symval.value(this->object_, 0);\n-\t  if (size == 64)\n-\t    to += this->object_->ppc64_local_entry_offset(this->r_sym_);\n+\t  other = this->object_->st_other(this->r_sym_) >> 5;\n \t}\n       if (!(size == 32 && this->r_type_ == elfcpp::R_PPC_PLTREL24))\n \tto += this->addend_;\n@@ -3598,7 +3595,11 @@ Target_powerpc<size, big_endian>::Branch_info::make_stub(\n \t\t\t\t\t &to, &dest_shndx))\n \t    return true;\n \t}\n-      Address delta = to - from;\n+      unsigned int local_ent = 0;\n+      if (size == 64\n+\t  && this->r_type_ != elfcpp::R_PPC64_REL24_NOTOC)\n+\tlocal_ent = elfcpp::ppc64_decode_local_entry(other);\n+      Address delta = to + local_ent - from;\n       if (delta + max_branch_offset >= 2 * max_branch_offset\n \t  || (size == 64\n \t      && this->r_type_ == elfcpp::R_PPC64_REL24_NOTOC\n@@ -3620,7 +3621,7 @@ Target_powerpc<size, big_endian>::Branch_info::make_stub(\n \t\t\t   && gsym->output_data() == target->savres_section());\n \t  ok = stub_table->add_long_branch_entry(this->object_,\n \t\t\t\t\t\t this->r_type_,\n-\t\t\t\t\t\t from, to, save_res);\n+\t\t\t\t\t\t from, to, other, save_res);\n \t}\n     }\n   if (!ok)\n@@ -4688,14 +4689,15 @@ class Stub_table : public Output_relaxed_input_section\n   {\n     Branch_stub_ent(unsigned int off, bool notoc, bool save_res)\n       : off_(off), iter_(0), notoc_(notoc), toc_(0), save_res_(save_res),\n-\ttocoff_(0)\n+\tother_(0), tocoff_(0)\n     { }\n \n     unsigned int off_;\n     unsigned int iter_ : 1;\n     unsigned int notoc_ : 1;\n     unsigned int toc_ : 1;\n     unsigned int save_res_ : 1;\n+    unsigned int other_ : 3;\n     unsigned int tocoff_ : 8;\n   };\n   typedef typename elfcpp::Elf_types<size>::Elf_Addr Address;\n@@ -4762,7 +4764,7 @@ class Stub_table : public Output_relaxed_input_section\n   // Add a long branch stub.\n   bool\n   add_long_branch_entry(const Powerpc_relobj<size, big_endian>*,\n-\t\t\tunsigned int, Address, Address, bool);\n+\t\t\tunsigned int, Address, Address, unsigned int, bool);\n \n   const Branch_stub_ent*\n   find_long_branch_entry(const Powerpc_relobj<size, big_endian>*,\n@@ -5282,6 +5284,7 @@ Stub_table<size, big_endian>::add_long_branch_entry(\n     unsigned int r_type,\n     Address from,\n     Address to,\n+    unsigned int other,\n     bool save_res)\n {\n   Branch_stub_key key(object, to);\n@@ -5301,6 +5304,8 @@ Stub_table<size, big_endian>::add_long_branch_entry(\n \tthis->need_resize_ = true;\n       p.first->second.toc_ = true;\n     }\n+  if (p.first->second.other_ == 0)\n+    p.first->second.other_ = other;\n   gold_assert(save_res == p.first->second.save_res_);\n   if (p.second || (this->resizing_ && !p.first->second.iter_))\n     {\n@@ -6198,6 +6203,7 @@ Stub_table<size, big_endian>::branch_stub_size(\n \t}\n     }\n \n+  off += elfcpp::ppc64_decode_local_entry(p->second.other_);\n   if (off + (1 << 25) < 2 << 25)\n     return bytes + 4;\n   if (!this->targ_->power10_stubs()\n@@ -6377,6 +6383,7 @@ Stub_table<size, big_endian>::do_write(Output_file* of)\n \t\t}\n \t      if (bs->second.toc_)\n \t\t{\n+\t\t  delta += elfcpp::ppc64_decode_local_entry(bs->second.other_);\n \t\t  if (delta + (1 << 25) >= 2 << 25)\n \t\t    {\n \t\t      Address brlt_addr\n@@ -6410,6 +6417,8 @@ Stub_table<size, big_endian>::do_write(Output_file* of)\n \t    }\n \t  else\n \t    {\n+\t      if (!bs->second.notoc_)\n+\t\tdelta += elfcpp::ppc64_decode_local_entry(bs->second.other_);\n \t      if (bs->second.notoc_ || delta + (1 << 25) >= 2 << 25)\n \t\t{\n \t\t  unsigned char* startp = p;\n@@ -6640,6 +6649,8 @@ Stub_table<size, big_endian>::do_write(Output_file* of)\n \t  p = oview + off;\n \t  Address loc = this->stub_address() + off;\n \t  Address delta = bs->first.dest_ - loc;\n+\t  if (!bs->second.notoc_)\n+\t    delta += elfcpp::ppc64_decode_local_entry(bs->second.other_);\n \t  if (bs->second.notoc_)\n \t    {\n \t      unsigned char* startp = p;\n@@ -11039,14 +11050,15 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t\t|| r_type == elfcpp::R_POWERPC_PLT16_HA)))\n \taddend = rela.get_r_addend();\n       value = psymval->value(object, addend);\n+      unsigned int local_ent = 0;\n       if (size == 64 && is_branch_reloc<size>(r_type))\n \t{\n \t  if (target->abiversion() >= 2)\n \t    {\n \t      if (gsym != NULL)\n-\t\tvalue += object->ppc64_local_entry_offset(gsym);\n+\t\tlocal_ent = object->ppc64_local_entry_offset(gsym);\n \t      else\n-\t\tvalue += object->ppc64_local_entry_offset(r_sym);\n+\t\tlocal_ent = object->ppc64_local_entry_offset(r_sym);\n \t    }\n \t  else\n \t    {\n@@ -11055,9 +11067,9 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t\t\t\t\t&value, &dest_shndx);\n \t    }\n \t}\n-      Address max_branch_offset = max_branch_delta<size>(r_type);\n-      if (max_branch_offset != 0\n-\t  && (value - address + max_branch_offset >= 2 * max_branch_offset\n+      Address max_branch = max_branch_delta<size>(r_type);\n+      if (max_branch != 0\n+\t  && (value + local_ent - address + max_branch >= 2 * max_branch\n \t      || (size == 64\n \t\t  && r_type == elfcpp::R_PPC64_REL24_NOTOC\n \t\t  && (gsym != NULL\n@@ -11082,12 +11094,15 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t\t\t       + ent->off_);\n \t\t      if (size == 64\n \t\t\t  && r_type != elfcpp::R_PPC64_REL24_NOTOC)\n-\t\t\tvalue += ent->tocoff_;\n+\t\t\tvalue += (elfcpp::ppc64_decode_local_entry(ent->other_)\n+\t\t\t\t  + ent->tocoff_);\n \t\t    }\n \t\t  has_stub_value = true;\n \t\t}\n \t    }\n \t}\n+      if (!has_stub_value)\n+\tvalue += local_ent;\n     }\n \n   switch (r_type)"
    }
  ]
}