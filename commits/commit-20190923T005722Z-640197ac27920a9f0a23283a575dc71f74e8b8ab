{
  "sha": "640197ac27920a9f0a23283a575dc71f74e8b8ab",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjQwMTk3YWMyNzkyMGE5ZjBhMjMyODNhNTc1ZGM3MWY3NGU4YjhhYg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-23T00:44:20Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-23T00:57:22Z"
    },
    "message": "linker bfd.h tidy\n\nbfd/\n\t* bfd-in.h (bfd_symbol, bfd_section_already_linked),\n\t(bfd_elf_version_tree): Delete forward declarations.\n\tMove other forward decls and remaining elf function decl later.\n\t(bfd_section_already_linked_table_init),\n\t(bfd_section_already_linked_table_free),\n\t(_bfd_handle_already_linked, _bfd_nearby_section),\n\t(_bfd_fix_excluded_sec_syms): Move to bfdlink.h.\ninclude/\n\t* bfdlink.h (struct bfd_section_already_linked): Forward declare.\n\t(bfd_section_already_linked_table_init),\n\t(bfd_section_already_linked_table_free),\n\t(_bfd_handle_already_linked, _bfd_nearby_section),\n\t(_bfd_fix_excluded_sec_syms): Declare.",
    "tree": {
      "sha": "d19442f25491344755a835f82c77bee198a35f50",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d19442f25491344755a835f82c77bee198a35f50"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/640197ac27920a9f0a23283a575dc71f74e8b8ab",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/640197ac27920a9f0a23283a575dc71f74e8b8ab",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/640197ac27920a9f0a23283a575dc71f74e8b8ab",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/640197ac27920a9f0a23283a575dc71f74e8b8ab/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0ba9378a2ad073524f20e9637dac8369ef06c639",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ba9378a2ad073524f20e9637dac8369ef06c639",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0ba9378a2ad073524f20e9637dac8369ef06c639"
    }
  ],
  "stats": {
    "total": 174,
    "additions": 88,
    "deletions": 86
  },
  "files": [
    {
      "sha": "43544743ce3b0cfcf1cf22eeada7dd86777b2ee5",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/640197ac27920a9f0a23283a575dc71f74e8b8ab/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/640197ac27920a9f0a23283a575dc71f74e8b8ab/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=640197ac27920a9f0a23283a575dc71f74e8b8ab",
      "patch": "@@ -1,3 +1,13 @@\n+2019-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* bfd-in.h (bfd_symbol, bfd_section_already_linked),\n+\t(bfd_elf_version_tree): Delete forward declarations.\n+\tMove other forward decls and remaining elf function decl later.\n+\t(bfd_section_already_linked_table_init),\n+\t(bfd_section_already_linked_table_free),\n+\t(_bfd_handle_already_linked, _bfd_nearby_section),\n+\t(_bfd_fix_excluded_sec_syms): Move to bfdlink.h.\n+\n 2019-09-23  Alan Modra  <amodra@gmail.com>\n \n \t* bfd-in.h: Move ecoff function declarations.."
    },
    {
      "sha": "d81cbb791fd6177bb624115ec4154e20e01f78f1",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 28,
      "deletions": 43,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/640197ac27920a9f0a23283a575dc71f74e8b8ab/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/640197ac27920a9f0a23283a575dc71f74e8b8ab/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=640197ac27920a9f0a23283a575dc71f74e8b8ab",
      "patch": "@@ -509,49 +509,6 @@ void bfd_putl16 (bfd_vma, void *);\n bfd_uint64_t bfd_get_bits (const void *, int, bfd_boolean);\n void bfd_put_bits (bfd_uint64_t, void *, int, bfd_boolean);\n \n-#if defined(__STDC__) || defined(ALMOST_STDC)\n-struct ecoff_debug_info;\n-struct ecoff_debug_swap;\n-struct ecoff_extr;\n-struct bfd_symbol;\n-struct bfd_link_info;\n-struct bfd_link_hash_entry;\n-struct bfd_section_already_linked;\n-struct bfd_elf_version_tree;\n-#endif\n-\n-extern bfd_boolean bfd_section_already_linked_table_init (void);\n-extern void bfd_section_already_linked_table_free (void);\n-extern bfd_boolean _bfd_handle_already_linked\n-  (struct bfd_section *, struct bfd_section_already_linked *,\n-   struct bfd_link_info *);\n-\f\n-/* Externally visible ELF routines.  */\n-\n-/* Create a new BFD as if by bfd_openr.  Rather than opening a file,\n-   reconstruct an ELF file by reading the segments out of remote\n-   memory based on the ELF file header at EHDR_VMA and the ELF program\n-   headers it points to.  If non-zero, SIZE is the known extent of the\n-   object.  If not null, *LOADBASEP is filled in with the difference\n-   between the VMAs from which the segments were read, and the VMAs\n-   the file headers (and hence BFD's idea of each section's VMA) put\n-   them at.\n-\n-   The function TARGET_READ_MEMORY is called to copy LEN bytes from\n-   the remote memory at target address VMA into the local buffer at\n-   MYADDR; it should return zero on success or an `errno' code on\n-   failure.  TEMPL must be a BFD for a target with the word size and\n-   byte order found in the remote memory.  */\n-extern bfd *bfd_elf_bfd_from_remote_memory\n-  (bfd *templ, bfd_vma ehdr_vma, bfd_size_type size, bfd_vma *loadbasep,\n-   int (*target_read_memory) (bfd_vma vma, bfd_byte *myaddr,\n-\t\t\t      bfd_size_type len));\n-\n-extern struct bfd_section *\n-_bfd_nearby_section (bfd *, struct bfd_section *, bfd_vma);\n-\n-extern void _bfd_fix_excluded_sec_syms\n-  (bfd *, struct bfd_link_info *);\n \n /* mmap hacks */\n \n@@ -579,3 +536,31 @@ extern void bfd_free_window\n   (bfd_window *);\n extern bfd_boolean bfd_get_file_window\n   (bfd *, file_ptr, bfd_size_type, bfd_window *, bfd_boolean);\n+\f\n+/* Externally visible ELF routines.  */\n+\n+/* Create a new BFD as if by bfd_openr.  Rather than opening a file,\n+   reconstruct an ELF file by reading the segments out of remote\n+   memory based on the ELF file header at EHDR_VMA and the ELF program\n+   headers it points to.  If non-zero, SIZE is the known extent of the\n+   object.  If not null, *LOADBASEP is filled in with the difference\n+   between the VMAs from which the segments were read, and the VMAs\n+   the file headers (and hence BFD's idea of each section's VMA) put\n+   them at.\n+\n+   The function TARGET_READ_MEMORY is called to copy LEN bytes from\n+   the remote memory at target address VMA into the local buffer at\n+   MYADDR; it should return zero on success or an `errno' code on\n+   failure.  TEMPL must be a BFD for a target with the word size and\n+   byte order found in the remote memory.  */\n+extern bfd *bfd_elf_bfd_from_remote_memory\n+  (bfd *templ, bfd_vma ehdr_vma, bfd_size_type size, bfd_vma *loadbasep,\n+   int (*target_read_memory) (bfd_vma vma, bfd_byte *myaddr,\n+\t\t\t      bfd_size_type len));\n+\n+/* Forward declarations.  */\n+struct ecoff_debug_info;\n+struct ecoff_debug_swap;\n+struct ecoff_extr;\n+struct bfd_link_info;\n+struct bfd_link_hash_entry;"
    },
    {
      "sha": "1c468dc68b6cb891dc71e582c1c5ddb3a701bfbb",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 28,
      "deletions": 43,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/640197ac27920a9f0a23283a575dc71f74e8b8ab/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/640197ac27920a9f0a23283a575dc71f74e8b8ab/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=640197ac27920a9f0a23283a575dc71f74e8b8ab",
      "patch": "@@ -516,49 +516,6 @@ void bfd_putl16 (bfd_vma, void *);\n bfd_uint64_t bfd_get_bits (const void *, int, bfd_boolean);\n void bfd_put_bits (bfd_uint64_t, void *, int, bfd_boolean);\n \n-#if defined(__STDC__) || defined(ALMOST_STDC)\n-struct ecoff_debug_info;\n-struct ecoff_debug_swap;\n-struct ecoff_extr;\n-struct bfd_symbol;\n-struct bfd_link_info;\n-struct bfd_link_hash_entry;\n-struct bfd_section_already_linked;\n-struct bfd_elf_version_tree;\n-#endif\n-\n-extern bfd_boolean bfd_section_already_linked_table_init (void);\n-extern void bfd_section_already_linked_table_free (void);\n-extern bfd_boolean _bfd_handle_already_linked\n-  (struct bfd_section *, struct bfd_section_already_linked *,\n-   struct bfd_link_info *);\n-\f\n-/* Externally visible ELF routines.  */\n-\n-/* Create a new BFD as if by bfd_openr.  Rather than opening a file,\n-   reconstruct an ELF file by reading the segments out of remote\n-   memory based on the ELF file header at EHDR_VMA and the ELF program\n-   headers it points to.  If non-zero, SIZE is the known extent of the\n-   object.  If not null, *LOADBASEP is filled in with the difference\n-   between the VMAs from which the segments were read, and the VMAs\n-   the file headers (and hence BFD's idea of each section's VMA) put\n-   them at.\n-\n-   The function TARGET_READ_MEMORY is called to copy LEN bytes from\n-   the remote memory at target address VMA into the local buffer at\n-   MYADDR; it should return zero on success or an `errno' code on\n-   failure.  TEMPL must be a BFD for a target with the word size and\n-   byte order found in the remote memory.  */\n-extern bfd *bfd_elf_bfd_from_remote_memory\n-  (bfd *templ, bfd_vma ehdr_vma, bfd_size_type size, bfd_vma *loadbasep,\n-   int (*target_read_memory) (bfd_vma vma, bfd_byte *myaddr,\n-\t\t\t      bfd_size_type len));\n-\n-extern struct bfd_section *\n-_bfd_nearby_section (bfd *, struct bfd_section *, bfd_vma);\n-\n-extern void _bfd_fix_excluded_sec_syms\n-  (bfd *, struct bfd_link_info *);\n \n /* mmap hacks */\n \n@@ -586,6 +543,34 @@ extern void bfd_free_window\n   (bfd_window *);\n extern bfd_boolean bfd_get_file_window\n   (bfd *, file_ptr, bfd_size_type, bfd_window *, bfd_boolean);\n+\f\n+/* Externally visible ELF routines.  */\n+\n+/* Create a new BFD as if by bfd_openr.  Rather than opening a file,\n+   reconstruct an ELF file by reading the segments out of remote\n+   memory based on the ELF file header at EHDR_VMA and the ELF program\n+   headers it points to.  If non-zero, SIZE is the known extent of the\n+   object.  If not null, *LOADBASEP is filled in with the difference\n+   between the VMAs from which the segments were read, and the VMAs\n+   the file headers (and hence BFD's idea of each section's VMA) put\n+   them at.\n+\n+   The function TARGET_READ_MEMORY is called to copy LEN bytes from\n+   the remote memory at target address VMA into the local buffer at\n+   MYADDR; it should return zero on success or an `errno' code on\n+   failure.  TEMPL must be a BFD for a target with the word size and\n+   byte order found in the remote memory.  */\n+extern bfd *bfd_elf_bfd_from_remote_memory\n+  (bfd *templ, bfd_vma ehdr_vma, bfd_size_type size, bfd_vma *loadbasep,\n+   int (*target_read_memory) (bfd_vma vma, bfd_byte *myaddr,\n+\t\t\t      bfd_size_type len));\n+\n+/* Forward declarations.  */\n+struct ecoff_debug_info;\n+struct ecoff_debug_swap;\n+struct ecoff_extr;\n+struct bfd_link_info;\n+struct bfd_link_hash_entry;\n /* Extracted from init.c.  */\n unsigned int bfd_init (void);\n "
    },
    {
      "sha": "85405429e5210702da517bc67548fde48ca2256c",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/640197ac27920a9f0a23283a575dc71f74e8b8ab/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/640197ac27920a9f0a23283a575dc71f74e8b8ab/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=640197ac27920a9f0a23283a575dc71f74e8b8ab",
      "patch": "@@ -1,3 +1,11 @@\n+2019-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* bfdlink.h (struct bfd_section_already_linked): Forward declare.\n+\t(bfd_section_already_linked_table_init),\n+\t(bfd_section_already_linked_table_free),\n+\t(_bfd_handle_already_linked, _bfd_nearby_section),\n+\t(_bfd_fix_excluded_sec_syms): Declare.\n+\n 2019-09-23  Alan Modra  <amodra@gmail.com>\n \n \t* bfdlink.h (enum notice_asneeded_action): Define."
    },
    {
      "sha": "68fc17f55e803268fdc52a2686593b231d9b0c69",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/640197ac27920a9f0a23283a575dc71f74e8b8ab/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/640197ac27920a9f0a23283a575dc71f74e8b8ab/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=640197ac27920a9f0a23283a575dc71f74e8b8ab",
      "patch": "@@ -858,6 +858,20 @@ struct bfd_link_order_reloc\n /* Allocate a new link_order for a section.  */\n extern struct bfd_link_order *bfd_new_link_order (bfd *, asection *);\n \n+struct bfd_section_already_linked;\n+\n+extern bfd_boolean bfd_section_already_linked_table_init (void);\n+extern void bfd_section_already_linked_table_free (void);\n+extern bfd_boolean _bfd_handle_already_linked\n+  (struct bfd_section *, struct bfd_section_already_linked *,\n+   struct bfd_link_info *);\n+\n+extern struct bfd_section *_bfd_nearby_section\n+  (bfd *, struct bfd_section *, bfd_vma);\n+\n+extern void _bfd_fix_excluded_sec_syms\n+  (bfd *, struct bfd_link_info *);\n+\n /* These structures are used to describe version information for the\n    ELF linker.  These structures could be manipulated entirely inside\n    BFD, but it would be a pain.  Instead, the regular linker sets up"
    }
  ]
}