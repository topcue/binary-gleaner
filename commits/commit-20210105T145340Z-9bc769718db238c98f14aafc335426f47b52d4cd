{
  "sha": "9bc769718db238c98f14aafc335426f47b52d4cd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWJjNzY5NzE4ZGIyMzhjOThmMTRhYWZjMzM1NDI2ZjQ3YjUyZDRjZA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-05T13:25:56Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-05T14:53:40Z"
    },
    "message": "libctf: new test of enum lookups with the _next iterator\n\nI had reports that this doesn't work.  This test shows it working (and\nalso shows how annoying it is to do symbol lookup by name with the\npresent API: we need a ctf_arc_lookup_symbol_name for users that don't\nalready have a symtab handy).\n\nlibctf/ChangeLog\n2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* testsuite/libctf-lookup/enum-symbol.lk: New symbol-lookup test.\n\t* testsuite/libctf-lookup/enum-symbol-ctf.c: New CTF input.\n\t* testsuite/libctf-lookup/enum-symbol.c: New lookup test.",
    "tree": {
      "sha": "9816bab19bde2c832446c0ba8b4f8c11d4bfabd6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9816bab19bde2c832446c0ba8b4f8c11d4bfabd6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9bc769718db238c98f14aafc335426f47b52d4cd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9bc769718db238c98f14aafc335426f47b52d4cd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9bc769718db238c98f14aafc335426f47b52d4cd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9bc769718db238c98f14aafc335426f47b52d4cd/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c59e30ed1727135f8efb79890f2c458f73709757",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c59e30ed1727135f8efb79890f2c458f73709757",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c59e30ed1727135f8efb79890f2c458f73709757"
    }
  ],
  "stats": {
    "total": 166,
    "additions": 166,
    "deletions": 0
  },
  "files": [
    {
      "sha": "f11b511922eefb5ffc8e978ad150e535f4ea3d26",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc769718db238c98f14aafc335426f47b52d4cd/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc769718db238c98f14aafc335426f47b52d4cd/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=9bc769718db238c98f14aafc335426f47b52d4cd",
      "patch": "@@ -1,3 +1,9 @@\n+2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* testsuite/libctf-lookup/enum-symbol.lk: New symbol-lookup test.\n+\t* testsuite/libctf-lookup/enum-symbol-ctf.c: New CTF input.\n+\t* testsuite/libctf-lookup/enum-symbol.c: New lookup test.\n+\n 2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* Makefile.am (EXPECT): New."
    },
    {
      "sha": "f7f99c67c169d51e185cd6d1f6a541640bb03c18",
      "filename": "libctf/testsuite/libctf-lookup/enum-symbol-ctf.c",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc769718db238c98f14aafc335426f47b52d4cd/libctf/testsuite/libctf-lookup/enum-symbol-ctf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc769718db238c98f14aafc335426f47b52d4cd/libctf/testsuite/libctf-lookup/enum-symbol-ctf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/libctf-lookup/enum-symbol-ctf.c?ref=9bc769718db238c98f14aafc335426f47b52d4cd",
      "patch": "@@ -0,0 +1 @@\n+enum {red1, green1, blue1} primary1;"
    },
    {
      "sha": "4f63b61b8039acb24aa7b0849028af789bac4292",
      "filename": "libctf/testsuite/libctf-lookup/enum-symbol.c",
      "status": "added",
      "additions": 153,
      "deletions": 0,
      "changes": 153,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc769718db238c98f14aafc335426f47b52d4cd/libctf/testsuite/libctf-lookup/enum-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc769718db238c98f14aafc335426f47b52d4cd/libctf/testsuite/libctf-lookup/enum-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/libctf-lookup/enum-symbol.c?ref=9bc769718db238c98f14aafc335426f47b52d4cd",
      "patch": "@@ -0,0 +1,153 @@\n+#include \"config.h\"\n+#include <bfd.h>\n+#include <elf.h>\n+#include <ctf-api.h>\n+#include <swap.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+ssize_t symidx_64 (ctf_sect_t *s, ctf_sect_t *strsect, int little_endian, const char *name)\n+{\n+  const char *strs = (const char *) strsect->cts_data;\n+  size_t i;\n+  Elf64_Sym *sym = (Elf64_Sym *) s->cts_data;\n+  for (i = 0; i < s->cts_size / s->cts_entsize; i++, sym++)\n+    {\n+      Elf64_Word nameoff = sym->st_name;\n+#ifdef WORDS_BIGENDIAN\n+      if (little_endian)\n+\tswap_thing (nameoff);\n+#else\n+      if (!little_endian)\n+\tswap_thing (nameoff);\n+#endif\n+      if (strcmp (strs + nameoff, name) == 0)\n+\treturn i;\n+    }\n+  return -1;\n+}\n+\n+ssize_t symidx_32 (ctf_sect_t *s, ctf_sect_t *strsect, int little_endian, const char *name)\n+{\n+  const char *strs = (const char *) strsect->cts_data;\n+  size_t i;\n+  Elf32_Sym *sym = (Elf32_Sym *) s->cts_data;\n+  for (i = 0; i < s->cts_size / s->cts_entsize; i++, sym++)\n+    {\n+      Elf32_Word nameoff = sym->st_name;\n+#ifdef WORDS_BIGENDIAN\n+      if (little_endian)\n+\tswap_thing (nameoff);\n+#else\n+      if (!little_endian)\n+\tswap_thing (nameoff);\n+#endif\n+      if (strcmp (strs + nameoff, name) == 0)\n+\treturn i;\n+    }\n+  return -1;\n+}\n+\n+int\n+main (int argc, char *argv[])\n+{\n+  ctf_dict_t *fp;\n+  bfd *abfd;\n+  ctf_archive_t *ctf;\n+  ctf_sect_t symsect;\n+  ctf_sect_t strsect;\n+  ssize_t symidx;\n+  int err;\n+  ctf_id_t type;\n+  ctf_next_t *i = NULL;\n+  const char *name;\n+  int val;\n+  int little_endian;\n+\n+  ssize_t (*get_sym) (ctf_sect_t *s, ctf_sect_t *strsect, int little_endian, const char *name);\n+\n+  if (argc != 2)\n+    {\n+      fprintf (stderr, \"Syntax: %s PROGRAM\\n\", argv[0]);\n+      exit(1);\n+    }\n+\n+  /* Figure out the endianness of the symtab(s).  */\n+  if ((abfd = bfd_openr (argv[1], NULL)) == NULL\n+      || !bfd_check_format (abfd, bfd_object))\n+    goto bfd_open_err;\n+  little_endian = bfd_little_endian (abfd);\n+  bfd_close_all_done (abfd);\n+\n+  if ((ctf = ctf_open (argv[1], NULL, &err)) == NULL)\n+    goto open_err;\n+\n+  if ((fp = ctf_dict_open (ctf, NULL, &err)) == NULL)\n+    goto open_err;\n+\n+  symsect = ctf_getsymsect (fp);\n+  strsect = ctf_getstrsect (fp);\n+  if (symsect.cts_data == NULL\n+      || strsect.cts_data == NULL)\n+    {\n+      fprintf (stderr, \"%s: no symtab or strtab\\n\", argv[0]);\n+      return 1;\n+    }\n+\n+  ctf_dict_close (fp);\n+\n+  if (symsect.cts_entsize != sizeof (Elf64_Sym) &&\n+      symsect.cts_entsize != sizeof (Elf32_Sym))\n+    {\n+      fprintf (stderr, \"%s: unknown symsize: %lx\\n\", argv[0],\n+\t       symsect.cts_size);\n+      return 1;\n+    }\n+\n+  switch (symsect.cts_entsize)\n+    {\n+    case sizeof (Elf64_Sym): get_sym = symidx_64; break;\n+    case sizeof (Elf32_Sym): get_sym = symidx_32; break;\n+    }\n+\n+  if ((symidx = get_sym (&symsect, &strsect, little_endian, \"primary1\")) < 0)\n+    {\n+      fprintf (stderr, \"%s: symbol not found: primary1\\n\", argv[0]);\n+      return 1;\n+    }\n+\n+  /* Fish it out, then fish out all its enumerand/value pairs.  */\n+\n+  if ((fp = ctf_arc_lookup_symbol (ctf, symidx, &type, &err)) == NULL)\n+    goto sym_err;\n+\n+  while ((name = ctf_enum_next (fp, type, &i, &val)) != NULL)\n+    {\n+      printf (\"%s has value %i\\n\", name, val);\n+    }\n+  if (ctf_errno (fp) != ECTF_NEXT_END)\n+    goto nerr;\n+\n+  ctf_dict_close (fp);\n+  ctf_close (ctf);\n+\n+  return 0;\n+\n+ bfd_open_err:\n+  fprintf (stderr, \"%s: cannot open: %s\\n\", argv[0], bfd_errmsg (bfd_get_error ()));\n+  return 1;\n+\n+ open_err:\n+  fprintf (stderr, \"%s: cannot open: %s\\n\", argv[0], ctf_errmsg (err));\n+  return 1;\n+ sym_err:\n+  fprintf (stderr, \"%s: Symbol lookup error: %s\\n\", argv[0], ctf_errmsg (err));\n+  return 1;\n+ err:\n+  fprintf (stderr, \"Lookup failed: %s\\n\", ctf_errmsg (ctf_errno (fp)));\n+  return 1;\n+ nerr:\n+  fprintf (stderr, \"iteration failed: %s\\n\", ctf_errmsg (ctf_errno (fp)));\n+  return 1;\n+}"
    },
    {
      "sha": "e83030ea28f4b03e39b79f9fbacd0b38976e2556",
      "filename": "libctf/testsuite/libctf-lookup/enum-symbol.lk",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9bc769718db238c98f14aafc335426f47b52d4cd/libctf/testsuite/libctf-lookup/enum-symbol.lk",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9bc769718db238c98f14aafc335426f47b52d4cd/libctf/testsuite/libctf-lookup/enum-symbol.lk",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/libctf-lookup/enum-symbol.lk?ref=9bc769718db238c98f14aafc335426f47b52d4cd",
      "patch": "@@ -0,0 +1,6 @@\n+# lookup: enum-symbol.c\n+# source: enum-symbol-ctf.c\n+# link: on\n+red1 has value 0\n+green1 has value 1\n+blue1 has value 2"
    }
  ]
}