{
  "sha": "9cdd0d12cc05495da96559ce80ad5b0467d33417",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWNkZDBkMTJjYzA1NDk1ZGE5NjU1OWNlODBhZDViMDQ2N2QzMzQxNw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:06Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:06Z"
    },
    "message": "gdb: add type::is_fixed_instance / type::set_is_fixed_instance\n\nAdd the `is_fixed_instance` and `set_is_fixed_instance` methods on `struct\ntype`, in order to remove the `TYPE_FIXED_INSTANCE` macro.  In this patch, the\nmacro is changed to use the getter, so all the call sites of the macro that are\nused as a setter are changed to use the setter method directly.  The next patch\nwill remove the macro completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <is_fixed_instance,\n\tset_is_fixed_instance>: New methods.\n\t(TYPE_FIXED_INSTANCE): Use type::is_fixed_instance, change all\n\twrite call sites to use type::set_is_fixed_instance.\n\nChange-Id: I4401d81512fab9eab4232bbea48ce6c7d586b94c",
    "tree": {
      "sha": "97b897147678aea3e2245118845d31962548d3ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/97b897147678aea3e2245118845d31962548d3ac"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9cdd0d12cc05495da96559ce80ad5b0467d33417",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9cdd0d12cc05495da96559ce80ad5b0467d33417",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9cdd0d12cc05495da96559ce80ad5b0467d33417",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9cdd0d12cc05495da96559ce80ad5b0467d33417/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0becda7a5a1845c7e91ccba1b27da3607de3f534",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0becda7a5a1845c7e91ccba1b27da3607de3f534",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0becda7a5a1845c7e91ccba1b27da3607de3f534"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 25,
    "deletions": 8
  },
  "files": [
    {
      "sha": "29212d996a1e3ce6cb86473f3309d35f0e0abf8b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9cdd0d12cc05495da96559ce80ad5b0467d33417/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9cdd0d12cc05495da96559ce80ad5b0467d33417/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9cdd0d12cc05495da96559ce80ad5b0467d33417",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <is_fixed_instance,\n+\tset_is_fixed_instance>: New methods.\n+\t(TYPE_FIXED_INSTANCE): Use type::is_fixed_instance, change all\n+\twrite call sites to use type::set_is_fixed_instance.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_GNU_IFUNC): Remove, replace all"
    },
    {
      "sha": "1f9c274b1d0a9febcf05374dfdf28babb6860082",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9cdd0d12cc05495da96559ce80ad5b0467d33417/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9cdd0d12cc05495da96559ce80ad5b0467d33417/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=9cdd0d12cc05495da96559ce80ad5b0467d33417",
      "patch": "@@ -2108,7 +2108,7 @@ constrained_packed_array_type (struct type *type, long *elt_bits)\n         (*elt_bits + HOST_CHAR_BIT - 1) / HOST_CHAR_BIT;\n     }\n \n-  TYPE_FIXED_INSTANCE (new_type) = 1;\n+  new_type->set_is_fixed_instance (true);\n   return new_type;\n }\n \n@@ -7820,7 +7820,7 @@ ada_template_to_fixed_record_type_1 (struct type *type,\n   rtype->set_fields\n    ((struct field *) TYPE_ZALLOC (rtype, nfields * sizeof (struct field)));\n   rtype->set_name (ada_type_name (type));\n-  TYPE_FIXED_INSTANCE (rtype) = 1;\n+  rtype->set_is_fixed_instance (true);\n \n   off = 0;\n   bit_len = 0;\n@@ -8100,7 +8100,7 @@ template_to_static_fixed_type (struct type *type0)\n \t      type->set_fields (fields);\n \n \t      type->set_name (ada_type_name (type0));\n-\t      TYPE_FIXED_INSTANCE (type) = 1;\n+\t      type->set_is_fixed_instance (true);\n \t      TYPE_LENGTH (type) = 0;\n \t    }\n \t  type->field (f).set_type (new_type);\n@@ -8151,7 +8151,7 @@ to_record_with_fixed_variant_part (struct type *type, const gdb_byte *valaddr,\n   rtype->set_fields (fields);\n \n   rtype->set_name (ada_type_name (type));\n-  TYPE_FIXED_INSTANCE (rtype) = 1;\n+  rtype->set_is_fixed_instance (true);\n   TYPE_LENGTH (rtype) = TYPE_LENGTH (type);\n \n   branch_type = to_fixed_variant_branch_type\n@@ -8223,7 +8223,7 @@ to_fixed_record_type (struct type *type0, const gdb_byte *valaddr,\n     }\n   else\n     {\n-      TYPE_FIXED_INSTANCE (type0) = 1;\n+      type0->set_is_fixed_instance (true);\n       return type0;\n     }\n \n@@ -8489,7 +8489,7 @@ to_fixed_array_type (struct type *type0, struct value *dval,\n         TYPE_LENGTH (result)++;\n     }\n \n-  TYPE_FIXED_INSTANCE (result) = 1;\n+  result->set_is_fixed_instance (true);\n   return result;\n }\n "
    },
    {
      "sha": "4bd7c341a73e57f7c5edffd7f4052e2afe9a9ea9",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9cdd0d12cc05495da96559ce80ad5b0467d33417/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9cdd0d12cc05495da96559ce80ad5b0467d33417/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=9cdd0d12cc05495da96559ce80ad5b0467d33417",
      "patch": "@@ -226,7 +226,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    further interpretation.  Optionally marks ordinary, fixed-size GDB\n    type.  */\n \n-#define TYPE_FIXED_INSTANCE(t) (TYPE_MAIN_TYPE (t)->flag_fixed_instance)\n+#define TYPE_FIXED_INSTANCE(t) ((t)->is_fixed_instance ())\n \n /* * Not textual.  By default, GDB treats all single byte integers as\n    characters (or elements of strings) unless this flag is set.  */\n@@ -808,7 +808,7 @@ struct main_type\n   unsigned int m_flag_vector : 1;\n   unsigned int m_flag_stub_supported : 1;\n   unsigned int m_flag_gnu_ifunc : 1;\n-  unsigned int flag_fixed_instance : 1;\n+  unsigned int m_flag_fixed_instance : 1;\n   unsigned int flag_objfile_owned : 1;\n   unsigned int flag_endianity_not_default : 1;\n \n@@ -1141,6 +1141,16 @@ struct type\n     this->main_type->m_flag_gnu_ifunc = is_gnu_ifunc;\n   }\n \n+  bool is_fixed_instance () const\n+  {\n+    return this->main_type->m_flag_fixed_instance;\n+  }\n+\n+  void set_is_fixed_instance (bool is_fixed_instance)\n+  {\n+    this->main_type->m_flag_fixed_instance = is_fixed_instance;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;"
    }
  ]
}