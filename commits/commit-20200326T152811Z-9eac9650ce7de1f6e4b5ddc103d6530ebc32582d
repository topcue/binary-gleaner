{
  "sha": "9eac9650ce7de1f6e4b5ddc103d6530ebc32582d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWVhYzk2NTBjZTdkZTFmNmU0YjVkZGMxMDNkNjUzMGViYzMyNTgyZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:11Z"
    },
    "message": "Split dwarf_decode_macros into two overloads\n\nThis splits dwarf_decode_macros into two overloads -- one that's\nsuitable for splitting into a separate file, and one that finds the\ncorrect section and should remain in dwarf2/read.c.\n\ngdb/ChangeLog\n2020-03-26  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dwarf_decode_macros): Split into two overloads.",
    "tree": {
      "sha": "71e9d788bad233c01071d641d0038dee25240df0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/71e9d788bad233c01071d641d0038dee25240df0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9eac9650ce7de1f6e4b5ddc103d6530ebc32582d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9eac9650ce7de1f6e4b5ddc103d6530ebc32582d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9eac9650ce7de1f6e4b5ddc103d6530ebc32582d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9eac9650ce7de1f6e4b5ddc103d6530ebc32582d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bf80d710525ba743d0046bf1f9cab6a019d7c616",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf80d710525ba743d0046bf1f9cab6a019d7c616",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bf80d710525ba743d0046bf1f9cab6a019d7c616"
    }
  ],
  "stats": {
    "total": 106,
    "additions": 63,
    "deletions": 43
  },
  "files": [
    {
      "sha": "0d58750472c538305000bd8d6308954a5972d5ed",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9eac9650ce7de1f6e4b5ddc103d6530ebc32582d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9eac9650ce7de1f6e4b5ddc103d6530ebc32582d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9eac9650ce7de1f6e4b5ddc103d6530ebc32582d",
      "patch": "@@ -1,3 +1,7 @@\n+2020-03-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dwarf_decode_macros): Split into two overloads.\n+\n 2020-03-26  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (macro_start_file): Change \"cu\" parameter to"
    },
    {
      "sha": "4a17a7ea98dcdae0bf59b024cc03ed8216f556b6",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 59,
      "deletions": 43,
      "changes": 102,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9eac9650ce7de1f6e4b5ddc103d6530ebc32582d/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9eac9650ce7de1f6e4b5ddc103d6530ebc32582d/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=9eac9650ce7de1f6e4b5ddc103d6530ebc32582d",
      "patch": "@@ -23753,56 +23753,18 @@ dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n }\n \n static void\n-dwarf_decode_macros (struct dwarf2_cu *cu, unsigned int offset,\n-                     int section_is_gnu)\n+dwarf_decode_macros (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+\t\t     buildsym_compunit *builder, dwarf2_section_info *section,\n+\t\t     struct line_header *lh, unsigned int offset_size,\n+\t\t     unsigned int offset, int section_is_gnu)\n {\n-  struct dwarf2_per_objfile *dwarf2_per_objfile\n-    = cu->per_cu->dwarf2_per_objfile;\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n-  struct line_header *lh = cu->line_header;\n   bfd *abfd;\n   const gdb_byte *mac_ptr, *mac_end;\n   struct macro_source_file *current_file = 0;\n   enum dwarf_macro_record_type macinfo_type;\n-  unsigned int offset_size = cu->header.offset_size;\n   const gdb_byte *opcode_definitions[256];\n   void **slot;\n-  struct dwarf2_section_info *section;\n-  const char *section_name;\n \n-  if (cu->dwo_unit != NULL)\n-    {\n-      if (section_is_gnu)\n-\t{\n-\t  section = &cu->dwo_unit->dwo_file->sections.macro;\n-\t  section_name = \".debug_macro.dwo\";\n-\t}\n-      else\n-\t{\n-\t  section = &cu->dwo_unit->dwo_file->sections.macinfo;\n-\t  section_name = \".debug_macinfo.dwo\";\n-\t}\n-    }\n-  else\n-    {\n-      if (section_is_gnu)\n-\t{\n-\t  section = &dwarf2_per_objfile->macro;\n-\t  section_name = \".debug_macro\";\n-\t}\n-      else\n-\t{\n-\t  section = &dwarf2_per_objfile->macinfo;\n-\t  section_name = \".debug_macinfo\";\n-\t}\n-    }\n-\n-  section->read (objfile);\n-  if (section->buffer == NULL)\n-    {\n-      complaint (_(\"missing %s section\"), section_name);\n-      return;\n-    }\n   abfd = section->get_bfd_owner ();\n \n   /* First pass: Find the name of the base filename.\n@@ -23827,7 +23789,6 @@ dwarf_decode_macros (struct dwarf2_cu *cu, unsigned int offset,\n       return;\n     }\n \n-  buildsym_compunit *builder = cu->get_builder ();\n   do\n     {\n       /* Do we at least have room for a macinfo type byte?  */\n@@ -23949,6 +23910,61 @@ dwarf_decode_macros (struct dwarf2_cu *cu, unsigned int offset,\n \t\t\t    include_hash.get ());\n }\n \n+/* An overload of dwarf_decode_macros that finds the correct section\n+   and ensures it is read in before calling the other overload.  */\n+\n+static void\n+dwarf_decode_macros (struct dwarf2_cu *cu, unsigned int offset,\n+\t\t     int section_is_gnu)\n+{\n+  struct dwarf2_per_objfile *dwarf2_per_objfile\n+    = cu->per_cu->dwarf2_per_objfile;\n+  struct objfile *objfile = dwarf2_per_objfile->objfile;\n+  struct line_header *lh = cu->line_header;\n+  unsigned int offset_size = cu->header.offset_size;\n+  struct dwarf2_section_info *section;\n+  const char *section_name;\n+\n+  if (cu->dwo_unit != nullptr)\n+    {\n+      if (section_is_gnu)\n+\t{\n+\t  section = &cu->dwo_unit->dwo_file->sections.macro;\n+\t  section_name = \".debug_macro.dwo\";\n+\t}\n+      else\n+\t{\n+\t  section = &cu->dwo_unit->dwo_file->sections.macinfo;\n+\t  section_name = \".debug_macinfo.dwo\";\n+\t}\n+    }\n+  else\n+    {\n+      if (section_is_gnu)\n+\t{\n+\t  section = &dwarf2_per_objfile->macro;\n+\t  section_name = \".debug_macro\";\n+\t}\n+      else\n+\t{\n+\t  section = &dwarf2_per_objfile->macinfo;\n+\t  section_name = \".debug_macinfo\";\n+\t}\n+    }\n+\n+  section->read (objfile);\n+  if (section->buffer == nullptr)\n+    {\n+      complaint (_(\"missing %s section\"), section_name);\n+      return;\n+    }\n+\n+  buildsym_compunit *builder = cu->get_builder ();\n+\n+  dwarf_decode_macros (dwarf2_per_objfile, builder, section, lh,\n+\t\t       offset_size, offset, section_is_gnu);\n+}\n+\n /* Return the .debug_loc section to use for CU.\n    For DWO files use .debug_loc.dwo.  */\n "
    }
  ]
}