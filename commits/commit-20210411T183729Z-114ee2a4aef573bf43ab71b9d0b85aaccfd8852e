{
  "sha": "114ee2a4aef573bf43ab71b9d0b85aaccfd8852e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTE0ZWUyYTRhZWY1NzNiZjQzYWI3MWI5ZDBiODVhYWNjZmQ4ODUyZQ==",
  "commit": {
    "author": {
      "name": "Eli Zaretskii",
      "email": "eliz@gnu.org",
      "date": "2021-04-11T18:37:29Z"
    },
    "committer": {
      "name": "Eli Zaretskii",
      "email": "eliz@gnu.org",
      "date": "2021-04-11T18:37:29Z"
    },
    "message": "Improve support for loading DLLs at run time in gdbserver.\n\nThis fixes win32-low.cc in the same way as a recent change in\nwindows-nat.c did for GDB: if the lpImageName member of the load-DLL\ndebug event doesn't allow us to find the file name of the DLL, then\nloop over all the DLLs mapped into the inferior to find the one loaded\nat the same base address as given by the lpBaseOfDll member of the\ndebug event.\n\ngdbserver/ChangeLog:\n\n2021-04-11  Eli Zaretskii  <eliz@gnu.org>\n\n\t* win32-low.cc (win32_add_dll): New function, with body almost\n\tidentical to what win32_add_all_dlls did.  Accepts one argument;\n\tif that is non-NULL, returns the file name of the DLL that is\n\tloaded at the base address equal to that argument, or NULL if not\n\tfound.  If the argument is NULL, add all the DLLs loaded by the\n\tinferior to the list of solibs and return NULL.\n\t(win32_add_all_dlls): Now a thin wrapper around win32_add_dll.\n\t(windows_nat::handle_load_dll) [!_WIN32_WCE]: If get_image_name\n\tfailed to glean the file name of the DLL, call win32_add_dll to\n\ttry harder using the lpBaseOfDll member of the load-DLL event.",
    "tree": {
      "sha": "f63578c4ffeea8b90a29241355159d22f64af262",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f63578c4ffeea8b90a29241355159d22f64af262"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/114ee2a4aef573bf43ab71b9d0b85aaccfd8852e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/114ee2a4aef573bf43ab71b9d0b85aaccfd8852e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/114ee2a4aef573bf43ab71b9d0b85aaccfd8852e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/114ee2a4aef573bf43ab71b9d0b85aaccfd8852e/comments",
  "author": {
    "login": "Eli-Zaretskii",
    "id": 20908835,
    "node_id": "MDQ6VXNlcjIwOTA4ODM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/20908835?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Eli-Zaretskii",
    "html_url": "https://github.com/Eli-Zaretskii",
    "followers_url": "https://api.github.com/users/Eli-Zaretskii/followers",
    "following_url": "https://api.github.com/users/Eli-Zaretskii/following{/other_user}",
    "gists_url": "https://api.github.com/users/Eli-Zaretskii/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Eli-Zaretskii/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Eli-Zaretskii/subscriptions",
    "organizations_url": "https://api.github.com/users/Eli-Zaretskii/orgs",
    "repos_url": "https://api.github.com/users/Eli-Zaretskii/repos",
    "events_url": "https://api.github.com/users/Eli-Zaretskii/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Eli-Zaretskii/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "Eli-Zaretskii",
    "id": 20908835,
    "node_id": "MDQ6VXNlcjIwOTA4ODM1",
    "avatar_url": "https://avatars.githubusercontent.com/u/20908835?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Eli-Zaretskii",
    "html_url": "https://github.com/Eli-Zaretskii",
    "followers_url": "https://api.github.com/users/Eli-Zaretskii/followers",
    "following_url": "https://api.github.com/users/Eli-Zaretskii/following{/other_user}",
    "gists_url": "https://api.github.com/users/Eli-Zaretskii/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Eli-Zaretskii/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Eli-Zaretskii/subscriptions",
    "organizations_url": "https://api.github.com/users/Eli-Zaretskii/orgs",
    "repos_url": "https://api.github.com/users/Eli-Zaretskii/repos",
    "events_url": "https://api.github.com/users/Eli-Zaretskii/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Eli-Zaretskii/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2cbb0a1b2e757951251b5389505d278f9322aee4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2cbb0a1b2e757951251b5389505d278f9322aee4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2cbb0a1b2e757951251b5389505d278f9322aee4"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 52,
    "deletions": 12
  },
  "files": [
    {
      "sha": "029a2e472f50a16abb18bce540c44785e3deac67",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/114ee2a4aef573bf43ab71b9d0b85aaccfd8852e/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/114ee2a4aef573bf43ab71b9d0b85aaccfd8852e/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=114ee2a4aef573bf43ab71b9d0b85aaccfd8852e",
      "patch": "@@ -1,3 +1,16 @@\n+2021-04-11  Eli Zaretskii  <eliz@gnu.org>\n+\n+\t* win32-low.cc (win32_add_dll): New function, with body almost\n+\tidentical to what win32_add_all_dlls did.  Accepts one argument;\n+\tif that is non-NULL, returns the file name of the DLL that is\n+\tloaded at the base address equal to that argument, or NULL if not\n+\tfound.  If the argument is NULL, add all the DLLs loaded by the\n+\tinferior to the list of solibs and return NULL.\n+\t(win32_add_all_dlls): Now a thin wrapper around win32_add_dll.\n+\t(windows_nat::handle_load_dll) [!_WIN32_WCE]: If get_image_name\n+\tfailed to glean the file name of the DLL, call win32_add_dll to\n+\ttry harder using the lpBaseOfDll member of the load-DLL event.\n+\n 2021-03-30  Luis Machado  <luis.machado@linaro.org>\n \n \t* server.cc (handle_general_set, handle_query): Update variable"
    },
    {
      "sha": "f6d35ca9843e2d1e417154dda37fdb5c349ceee2",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 39,
      "deletions": 12,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/114ee2a4aef573bf43ab71b9d0b85aaccfd8852e/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/114ee2a4aef573bf43ab71b9d0b85aaccfd8852e/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=114ee2a4aef573bf43ab71b9d0b85aaccfd8852e",
      "patch": "@@ -1165,11 +1165,13 @@ load_psapi (void)\n \n #ifndef _WIN32_WCE\n \n-/* Iterate over all DLLs currently mapped by our inferior, and\n-   add them to our list of solibs.  */\n+/* Iterate over all DLLs currently mapped by our inferior, looking for\n+   a DLL loaded at LOAD_ADDR; if found, return its file name,\n+   otherwise return NULL.  If LOAD_ADDR is NULL, add all mapped DLLs\n+   to our list of solibs.  */\n \n-static void\n-win32_add_all_dlls (void)\n+static char *\n+win32_add_dll (LPVOID load_addr)\n {\n   size_t i;\n   HMODULE dh_buf[1];\n@@ -1178,7 +1180,7 @@ win32_add_all_dlls (void)\n   BOOL ok;\n \n   if (!load_psapi ())\n-    return;\n+    return NULL;\n \n   cbNeeded = 0;\n #ifdef __x86_64__\n@@ -1196,11 +1198,11 @@ win32_add_all_dlls (void)\n \t\t\t\t      &cbNeeded);\n \n   if (!ok || !cbNeeded)\n-    return;\n+    return NULL;\n \n   DllHandle = (HMODULE *) alloca (cbNeeded);\n   if (!DllHandle)\n-    return;\n+    return NULL;\n \n #ifdef __x86_64__\n   if (wow64_process)\n@@ -1216,7 +1218,7 @@ win32_add_all_dlls (void)\n \t\t\t\t      cbNeeded,\n \t\t\t\t      &cbNeeded);\n   if (!ok)\n-    return;\n+    return NULL;\n \n   char system_dir[MAX_PATH];\n   char syswow_dir[MAX_PATH];\n@@ -1252,7 +1254,7 @@ win32_add_all_dlls (void)\n   for (i = 1; i < ((size_t) cbNeeded / sizeof (HMODULE)); i++)\n     {\n       MODULEINFO mi;\n-      char dll_name[MAX_PATH];\n+      static char dll_name[MAX_PATH];\n \n       if (!(*win32_GetModuleInformation) (current_process_handle,\n \t\t\t\t\t  DllHandle[i],\n@@ -1265,6 +1267,9 @@ win32_add_all_dlls (void)\n \t\t\t\t\t MAX_PATH) == 0)\n \tcontinue;\n \n+      if (load_addr != nullptr && mi.lpBaseOfDll != load_addr)\n+\tcontinue;\n+\n       const char *name = dll_name;\n       /* Convert the DLL path of 32bit processes returned by\n \t GetModuleFileNameEx from the 64bit system directory to the\n@@ -1279,10 +1284,27 @@ win32_add_all_dlls (void)\n \t  name = syswow_dll_path.c_str();\n \t}\n \n-      win32_add_one_solib (name, (CORE_ADDR) (uintptr_t) mi.lpBaseOfDll);\n+      if (load_addr != nullptr)\n+\t{\n+\t  if (name != dll_name)\n+\t    strcpy (dll_name, name);\n+\t  return dll_name;\n+\t}\n+      else\n+\twin32_add_one_solib (name, (CORE_ADDR) (uintptr_t) mi.lpBaseOfDll);\n     }\n+  return NULL;\n }\n-#endif\n+\n+/* Iterate over all DLLs currently mapped by our inferior, and\n+   add them to our list of solibs.  */\n+\n+static void\n+win32_add_all_dlls (void)\n+{\n+  win32_add_dll (NULL);\n+}\n+#endif\t/* !_WIN32_WCE */\n \n typedef HANDLE (WINAPI *winapi_CreateToolhelp32Snapshot) (DWORD, DWORD);\n typedef BOOL (WINAPI *winapi_Module32First) (HANDLE, LPMODULEENTRY32);\n@@ -1298,7 +1320,12 @@ windows_nat::handle_load_dll ()\n \n   dll_name = get_image_name (current_process_handle,\n \t\t\t     event->lpImageName, event->fUnicode);\n-  if (!dll_name)\n+#ifndef _WIN32_WCE\n+  if (dll_name == nullptr\n+      && event->lpBaseOfDll != nullptr)\n+    dll_name = win32_add_dll (event->lpBaseOfDll);\n+#endif\n+  if (dll_name == nullptr)\n     return;\n \n   win32_add_one_solib (dll_name, (CORE_ADDR) (uintptr_t) event->lpBaseOfDll);"
    }
  ]
}