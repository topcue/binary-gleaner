{
  "sha": "4e317a765bbe1c47fb9d461b7effa40f34220c85",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGUzMTdhNzY1YmJlMWM0N2ZiOWQ0NjFiN2VmZmE0MGYzNDIyMGM4NQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-22T18:16:01Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-22T18:47:10Z"
    },
    "message": "gdb/python: print name of unwinder that claimed frame in debug message\n\nIf we have multiple registered unwinders, this will helps identify which\nunwinder was chosen and make it easier to track down potential problems.\nUnwinders have a mandatory name argument, which we can use in the\nmessage.\n\nFirst, make gdb._execute_unwinders return a tuple containing the name,\nin addition to the UnwindInfo.  Then, make pyuw_sniffer include the name\nin the debug message.\n\nI moved the debug message earlier.  I think it's good to print it as\nearly as possible, so that we see it in case an assert is hit in the\nloop below, for example.\n\ngdb/ChangeLog:\n\n\t* python/lib/gdb/__init__.py (_execute_unwinders): Return tuple\n\twith name of chosen unwinder.\n\t* python/py-unwind.c (pyuw_sniffer): Print name of chosen\n\tunwinder in debug message.\n\nChange-Id: Id603545b44a97df2a39dd1872fe1f38ad5059f03",
    "tree": {
      "sha": "2b3b5d3b0e1461e238904472b72a6e8e6b99fc93",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2b3b5d3b0e1461e238904472b72a6e8e6b99fc93"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4e317a765bbe1c47fb9d461b7effa40f34220c85",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e317a765bbe1c47fb9d461b7effa40f34220c85",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4e317a765bbe1c47fb9d461b7effa40f34220c85",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e317a765bbe1c47fb9d461b7effa40f34220c85/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "80d1206d7fea6eb756183e2825abdfd0f00cd976",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80d1206d7fea6eb756183e2825abdfd0f00cd976",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/80d1206d7fea6eb756183e2825abdfd0f00cd976"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 46,
    "deletions": 11
  },
  "files": [
    {
      "sha": "995c8a1a3756aedc5cd55e83d78dbafc34cb43ea",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e317a765bbe1c47fb9d461b7effa40f34220c85/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e317a765bbe1c47fb9d461b7effa40f34220c85/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4e317a765bbe1c47fb9d461b7effa40f34220c85",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* python/lib/gdb/__init__.py (_execute_unwinders): Return tuple\n+\twith name of chosen unwinder.\n+\t* python/py-unwind.c (pyuw_sniffer): Print name of chosen\n+\tunwinder in debug message.\n+\n 2021-06-22  Andreas Schwab  <schwab@suse.de>\n \n \tPR symtab/27999"
    },
    {
      "sha": "f2f38b32af9604886919d9943fc0d3c389e3a0c0",
      "filename": "gdb/python/lib/gdb/__init__.py",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e317a765bbe1c47fb9d461b7effa40f34220c85/gdb/python/lib/gdb/__init__.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e317a765bbe1c47fb9d461b7effa40f34220c85/gdb/python/lib/gdb/__init__.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/lib/gdb/__init__.py?ref=4e317a765bbe1c47fb9d461b7effa40f34220c85",
      "patch": "@@ -90,27 +90,33 @@ def _execute_unwinders(pending_frame):\n \n     Arguments:\n         pending_frame: gdb.PendingFrame instance.\n+\n     Returns:\n-        gdb.UnwindInfo instance or None.\n+        Tuple with:\n+\n+\t  [0] gdb.UnwindInfo instance\n+\t  [1] Name of unwinder that claimed the frame (type `str`)\n+\n+\tor None, if no unwinder has claimed the frame.\n     \"\"\"\n     for objfile in objfiles():\n         for unwinder in objfile.frame_unwinders:\n             if unwinder.enabled:\n                 unwind_info = unwinder(pending_frame)\n                 if unwind_info is not None:\n-                    return unwind_info\n+                    return (unwind_info, unwinder.name)\n \n     for unwinder in current_progspace().frame_unwinders:\n         if unwinder.enabled:\n             unwind_info = unwinder(pending_frame)\n             if unwind_info is not None:\n-                return unwind_info\n+                return (unwind_info, unwinder.name)\n \n     for unwinder in frame_unwinders:\n         if unwinder.enabled:\n             unwind_info = unwinder(pending_frame)\n             if unwind_info is not None:\n-                return unwind_info\n+                return (unwind_info, unwinder.name)\n \n     return None\n "
    },
    {
      "sha": "18ea2434f87e63e495f7a403800c8e6346f06d8e",
      "filename": "gdb/python/py-unwind.c",
      "status": "modified",
      "additions": 29,
      "deletions": 7,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e317a765bbe1c47fb9d461b7effa40f34220c85/gdb/python/py-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e317a765bbe1c47fb9d461b7effa40f34220c85/gdb/python/py-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-unwind.c?ref=4e317a765bbe1c47fb9d461b7effa40f34220c85",
      "patch": "@@ -556,33 +556,56 @@ pyuw_sniffer (const struct frame_unwind *self, struct frame_info *this_frame,\n     }\n   gdbpy_ref<> pyo_execute (PyObject_GetAttrString (gdb_python_module,\n \t\t\t\t\t\t   \"_execute_unwinders\"));\n-  if (pyo_execute == NULL)\n+  if (pyo_execute == nullptr)\n     {\n       gdbpy_print_stack ();\n       return 0;\n     }\n \n-  gdbpy_ref<> pyo_unwind_info\n+  /* A (gdb.UnwindInfo, str) tuple, or None.  */\n+  gdbpy_ref<> pyo_execute_ret\n     (PyObject_CallFunctionObjArgs (pyo_execute.get (),\n \t\t\t\t   pyo_pending_frame.get (), NULL));\n-  if (pyo_unwind_info == NULL)\n+  if (pyo_execute_ret == nullptr)\n     {\n       /* If the unwinder is cancelled due to a Ctrl-C, then propagate\n \t the Ctrl-C as a GDB exception instead of swallowing it.  */\n       gdbpy_print_stack_or_quit ();\n       return 0;\n     }\n-  if (pyo_unwind_info == Py_None)\n+  if (pyo_execute_ret == Py_None)\n     return 0;\n \n+  /* Verify the return value of _execute_unwinders is a tuple of size 2.  */\n+  gdb_assert (PyTuple_Check (pyo_execute_ret.get ()));\n+  gdb_assert (PyTuple_GET_SIZE (pyo_execute_ret.get ()) == 2);\n+\n+  if (pyuw_debug)\n+    {\n+      PyObject *pyo_unwinder_name = PyTuple_GET_ITEM (pyo_execute_ret.get (), 1);\n+      gdb::unique_xmalloc_ptr<char> name\n+\t= python_string_to_host_string (pyo_unwinder_name);\n+\n+      /* This could happen if the user passed something else than a string\n+\t as the unwinder's name.  */\n+      if (name == nullptr)\n+\t{\n+\t  gdbpy_print_stack ();\n+\t  name = make_unique_xstrdup (\"<failed to get unwinder name>\");\n+\t}\n+\n+      pyuw_debug_printf (\"frame claimed by unwinder %s\", name.get ());\n+    }\n+\n   /* Received UnwindInfo, cache data.  */\n-  if (PyObject_IsInstance (pyo_unwind_info.get (),\n+  PyObject *pyo_unwind_info = PyTuple_GET_ITEM (pyo_execute_ret.get (), 0);\n+  if (PyObject_IsInstance (pyo_unwind_info,\n \t\t\t   (PyObject *) &unwind_info_object_type) <= 0)\n     error (_(\"A Unwinder should return gdb.UnwindInfo instance.\"));\n \n   {\n     unwind_info_object *unwind_info =\n-      (unwind_info_object *) pyo_unwind_info.get ();\n+      (unwind_info_object *) pyo_unwind_info;\n     int reg_count = unwind_info->saved_regs->size ();\n \n     cached_frame\n@@ -613,7 +636,6 @@ pyuw_sniffer (const struct frame_unwind *self, struct frame_info *this_frame,\n   }\n \n   *cache_ptr = cached_frame;\n-  pyuw_debug_printf (\"frame claimed\");\n   return 1;\n }\n "
    }
  ]
}