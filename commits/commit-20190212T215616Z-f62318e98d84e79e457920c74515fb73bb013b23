{
  "sha": "f62318e98d84e79e457920c74515fb73bb013b23",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjYyMzE4ZTk4ZDg0ZTc5ZTQ1NzkyMGM3NDUxNWZiNzNiYjAxM2IyMw==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-02-12T21:56:16Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-02-12T21:56:16Z"
    },
    "message": "Try to use the canonical version of a sysroot for debug file links.\n\nObject file paths passed to find_separate_debug_file are always\ncanonical paths with symbolic links resolved.  If a sysroot path\ntraverses a symbolic link, it will not match the object file paths.\nGenerate a canonical version of the sysroot directory.  If it is\nvalid, use it instead of gdb_sysroot with child_path to determine if\nan object file is under a system root.\n\ngdb/ChangeLog:\n\n\t* symfile.c (find_separate_debug_file): Use canonical path of\n\tsysroot with child_path instead of gdb_sysroot if it is valid.",
    "tree": {
      "sha": "f17470deb486f84be16a1e1c6eec0927a0926164",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f17470deb486f84be16a1e1c6eec0927a0926164"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f62318e98d84e79e457920c74515fb73bb013b23",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f62318e98d84e79e457920c74515fb73bb013b23",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f62318e98d84e79e457920c74515fb73bb013b23",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f62318e98d84e79e457920c74515fb73bb013b23/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cd4b78483c3b0e4bd7737b67ed5074b7c252faa4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd4b78483c3b0e4bd7737b67ed5074b7c252faa4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cd4b78483c3b0e4bd7737b67ed5074b7c252faa4"
    }
  ],
  "stats": {
    "total": 18,
    "additions": 15,
    "deletions": 3
  },
  "files": [
    {
      "sha": "191863e4912e749a391e53c64d2afea5bf86051b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f62318e98d84e79e457920c74515fb73bb013b23/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f62318e98d84e79e457920c74515fb73bb013b23/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f62318e98d84e79e457920c74515fb73bb013b23",
      "patch": "@@ -1,3 +1,8 @@\n+2019-02-12  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* symfile.c (find_separate_debug_file): Use canonical path of\n+\tsysroot with child_path instead of gdb_sysroot if it is valid.\n+\n 2019-02-12  John Baldwin  <jhb@FreeBSD.org>\n \n \t* symfile.c (find_separate_debug_file): Use child_path to"
    },
    {
      "sha": "61483824f63409b6fbf0fbd91908add235e35e9b",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f62318e98d84e79e457920c74515fb73bb013b23/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f62318e98d84e79e457920c74515fb73bb013b23/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=f62318e98d84e79e457920c74515fb73bb013b23",
      "patch": "@@ -1441,6 +1441,7 @@ find_separate_debug_file (const char *dir,\n   const char *dir_notarget = target_prefix ? dir + strlen (\"target:\") : dir;\n   std::vector<gdb::unique_xmalloc_ptr<char>> debugdir_vec\n     = dirnames_to_char_ptr_vec (debug_file_directory);\n+  gdb::unique_xmalloc_ptr<char> canon_sysroot = gdb_realpath (gdb_sysroot);\n \n   for (const gdb::unique_xmalloc_ptr<char> &debugdir : debugdir_vec)\n     {\n@@ -1453,9 +1454,15 @@ find_separate_debug_file (const char *dir,\n       if (separate_debug_file_exists (debugfile, crc32, objfile))\n \treturn debugfile;\n \n-      const char *base_path;\n-      if (canon_dir != NULL\n-\t  && (base_path = child_path (gdb_sysroot, canon_dir)) != NULL)\n+      const char *base_path = NULL;\n+      if (canon_dir != NULL)\n+\t{\n+\t  if (canon_sysroot.get () != NULL)\n+\t    base_path = child_path (canon_sysroot.get (), canon_dir);\n+\t  else\n+\t    base_path = child_path (gdb_sysroot, canon_dir);\n+\t}\n+      if (base_path != NULL)\n \t{\n \t  /* If the file is in the sysroot, try using its base path in\n \t     the global debugfile directory.  */"
    }
  ]
}