{
  "sha": "0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGY4MzAxMmVhMGZiODRkODZkMmE4NGE1ZmViNTFjMGQ2M2YwYjdlYg==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-25T16:48:03Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-25T16:50:38Z"
    },
    "message": "Add linux_get_hwcap\n\nTidy up calls to read HWCAP (and HWCAP2) by adding common functions,\nremoving the PPC and AArch64 specific versions.\n\nThe only function difference is in aarch64_linux_core_read_description - if\nthe hwcap read fails it now return a valid description instead of nullptr.\n\ngdb/ChangeLog:\n\n2019-03-25  Alan Hayward  <alan.hayward@arm.com>\n\n\t* aarch64-linux-nat.c (aarch64_linux_nat_target::read_description):\n\tCall linux_get_hwcap.\n\t* aarch64-linux-tdep.c (aarch64_linux_core_read_description):\n\tLikewise.\n\t(aarch64_linux_get_hwcap): Remove function.\n\t* aarch64-linux-tdep.h (aarch64_linux_get_hwcap): Remove\n\tdeclaration.\n\t* arm-linux-nat.c (arm_linux_nat_target::read_description):Call\n\tlinux_get_hwcap.\n\t* arm-linux-tdep.c (arm_linux_core_read_description): Likewise.\n\t* linux-tdep.c (linux_get_hwcap): Add function.\n\t(linux_get_hwcap2): Likewise.\n\t* linux-tdep.h (linux_get_hwcap): Add declaration.\n\t(linux_get_hwcap2): Likewise.\n\t* ppc-linux-nat.c (ppc_linux_get_hwcap): Remove function.\n\t(ppc_linux_get_hwcap2): Likewise.\n\t(ppc_linux_nat_target::region_ok_for_hw_watchpoint): Call\n\tlinux_get_hwcap.\n\t(ppc_linux_nat_target::insert_watchpoint): Likewise.\n\t(ppc_linux_nat_target::watchpoint_addr_within_range): Likewise.\n\t(ppc_linux_nat_target::read_description): Likewise.\n\t* ppc-linux-tdep.c (ppc_linux_core_read_description): Likewise.\n\t* s390-linux-nat.c: Likewise.\n\t* s390-linux-tdep.c (s390_core_read_description): Likewise.",
    "tree": {
      "sha": "cb3bc9d4001b27d418fdb2f45f18ad3997e37547",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cb3bc9d4001b27d418fdb2f45f18ad3997e37547"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "796d6298bb11deab06814cc38cfe74a1bfc57551",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/796d6298bb11deab06814cc38cfe74a1bfc57551",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/796d6298bb11deab06814cc38cfe74a1bfc57551"
    }
  ],
  "stats": {
    "total": 146,
    "additions": 75,
    "deletions": 71
  },
  "files": [
    {
      "sha": "38a1fdba1f2a92d8c3dd8081b7aa045b74929083",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -1,3 +1,30 @@\n+2019-03-25  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* aarch64-linux-nat.c (aarch64_linux_nat_target::read_description):\n+\tCall linux_get_hwcap.\n+\t* aarch64-linux-tdep.c (aarch64_linux_core_read_description):\n+\tLikewise.\n+\t(aarch64_linux_get_hwcap): Remove function.\n+\t* aarch64-linux-tdep.h (aarch64_linux_get_hwcap): Remove\n+\tdeclaration.\n+\t* arm-linux-nat.c (arm_linux_nat_target::read_description):Call\n+\tlinux_get_hwcap.\n+\t* arm-linux-tdep.c (arm_linux_core_read_description): Likewise.\n+\t* linux-tdep.c (linux_get_hwcap): Add function.\n+\t(linux_get_hwcap2): Likewise.\n+\t* linux-tdep.h (linux_get_hwcap): Add declaration.\n+\t(linux_get_hwcap2): Likewise.\n+\t* ppc-linux-nat.c (ppc_linux_get_hwcap): Remove function.\n+\t(ppc_linux_get_hwcap2): Likewise.\n+\t(ppc_linux_nat_target::region_ok_for_hw_watchpoint): Call\n+\tlinux_get_hwcap.\n+\t(ppc_linux_nat_target::insert_watchpoint): Likewise.\n+\t(ppc_linux_nat_target::watchpoint_addr_within_range): Likewise.\n+\t(ppc_linux_nat_target::read_description): Likewise.\n+\t* ppc-linux-tdep.c (ppc_linux_core_read_description): Likewise.\n+\t* s390-linux-nat.c: Likewise.\n+\t* s390-linux-tdep.c (s390_core_read_description): Likewise.\n+\n 2019-03-24  Tom Tromey  <tom@tromey.com>\n \n \t* ada-lang.c (standard_lookup): Simplify initialization."
    },
    {
      "sha": "6d43eb7070f17768f324fe950bc7a0f278d190d8",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -42,6 +42,7 @@\n #include <asm/ptrace.h>\n \n #include \"gregset.h\"\n+#include \"linux-tdep.h\"\n \n /* Defines ps_err_e, struct ps_prochandle.  */\n #include \"gdb_proc_service.h\"\n@@ -641,11 +642,10 @@ aarch64_linux_nat_target::read_description ()\n   if (ret == 0)\n     return tdesc_arm_with_neon;\n \n-  CORE_ADDR hwcap = 0;\n-  bool pauth_p = aarch64_linux_get_hwcap (this, &hwcap)\n-\t\t && (hwcap & AARCH64_HWCAP_PACA);\n+  CORE_ADDR hwcap = linux_get_hwcap (this);\n \n-  return aarch64_read_description (aarch64_sve_get_vq (tid), pauth_p);\n+  return aarch64_read_description (aarch64_sve_get_vq (tid),\n+\t\t\t\t   hwcap & AARCH64_HWCAP_PACA);\n }\n \n /* Convert a native/host siginfo object, into/from the siginfo in the"
    },
    {
      "sha": "7f2193f2fa5781ef4ee1f78828f749efa5671f8b",
      "filename": "gdb/aarch64-linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 14,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/aarch64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/aarch64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-tdep.c?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -655,13 +655,10 @@ static const struct target_desc *\n aarch64_linux_core_read_description (struct gdbarch *gdbarch,\n \t\t\t\t     struct target_ops *target, bfd *abfd)\n {\n-  CORE_ADDR aarch64_hwcap = 0;\n-\n-  if (!aarch64_linux_get_hwcap (target, &aarch64_hwcap))\n-    return nullptr;\n+  CORE_ADDR hwcap = linux_get_hwcap (target);\n \n   return aarch64_read_description (aarch64_linux_core_read_vq (gdbarch, abfd),\n-\t\t\t\t   aarch64_hwcap & AARCH64_HWCAP_PACA);\n+\t\t\t\t   hwcap & AARCH64_HWCAP_PACA);\n }\n \n /* Implementation of `gdbarch_stap_is_single_operand', as defined in\n@@ -1439,15 +1436,6 @@ aarch64_linux_gcc_target_options (struct gdbarch *gdbarch)\n   return NULL;\n }\n \n-/* See aarch64-linux-tdep.h.  */\n-\n-bool\n-aarch64_linux_get_hwcap (struct target_ops *target, CORE_ADDR *hwcap)\n-{\n-  *hwcap = 0;\n-  return target_auxv_search (target, AT_HWCAP, hwcap) == 1;\n-}\n-\n static void\n aarch64_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {"
    },
    {
      "sha": "f075f0acd94bb54b0aa518c0e1f8bf1e164a556e",
      "filename": "gdb/aarch64-linux-tdep.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/aarch64-linux-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/aarch64-linux-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-tdep.h?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -42,7 +42,4 @@ extern const struct regset aarch64_linux_fpregset;\n /* Matches HWCAP_PACA in kernel header arch/arm64/include/uapi/asm/hwcap.h.  */\n #define AARCH64_HWCAP_PACA (1 << 30)\n \n-/* Fetch the AT_HWCAP entry from the auxv vector for the given TARGET.  */\n-bool aarch64_linux_get_hwcap (struct target_ops *target, CORE_ADDR *hwcap);\n-\n #endif /* AARCH64_LINUX_TDEP_H */"
    },
    {
      "sha": "b54bd5afe9a88449965968911b083d1b123881a4",
      "filename": "gdb/arm-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/arm-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/arm-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-nat.c?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -533,7 +533,7 @@ ps_get_thread_area (struct ps_prochandle *ph,\n const struct target_desc *\n arm_linux_nat_target::read_description ()\n {\n-  CORE_ADDR arm_hwcap = 0;\n+  CORE_ADDR arm_hwcap = linux_get_hwcap (this);\n \n   if (have_ptrace_getregset == TRIBOOL_UNKNOWN)\n     {\n@@ -551,11 +551,6 @@ arm_linux_nat_target::read_description ()\n \thave_ptrace_getregset = TRIBOOL_TRUE;\n     }\n \n-  if (target_auxv_search (this, AT_HWCAP, &arm_hwcap) != 1)\n-    {\n-      return this->beneath ()->read_description ();\n-    }\n-\n   if (arm_hwcap & HWCAP_IWMMXT)\n     return tdesc_arm_with_iwmmxt;\n "
    },
    {
      "sha": "a5ad06434c230ed2e0af42ec5aa3694d28361b7d",
      "filename": "gdb/arm-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/arm-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/arm-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-tdep.c?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -730,10 +730,7 @@ arm_linux_core_read_description (struct gdbarch *gdbarch,\n                                  struct target_ops *target,\n                                  bfd *abfd)\n {\n-  CORE_ADDR arm_hwcap = 0;\n-\n-  if (target_auxv_search (target, AT_HWCAP, &arm_hwcap) != 1)\n-    return NULL;\n+  CORE_ADDR arm_hwcap = linux_get_hwcap (target);\n \n   if (arm_hwcap & HWCAP_VFP)\n     {"
    },
    {
      "sha": "f6c4f7b2081d727874d60d4f382121e600324cbe",
      "filename": "gdb/linux-tdep.c",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.c?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -2462,6 +2462,28 @@ linux_displaced_step_location (struct gdbarch *gdbarch)\n   return addr;\n }\n \n+/* See linux-tdep.h.  */\n+\n+CORE_ADDR\n+linux_get_hwcap (struct target_ops *target)\n+{\n+  CORE_ADDR field;\n+  if (target_auxv_search (target, AT_HWCAP, &field) != 1)\n+    return 0;\n+  return field;\n+}\n+\n+/* See linux-tdep.h.  */\n+\n+CORE_ADDR\n+linux_get_hwcap2 (struct target_ops *target)\n+{\n+  CORE_ADDR field;\n+  if (target_auxv_search (target, AT_HWCAP2, &field) != 1)\n+    return 0;\n+  return field;\n+}\n+\n /* Display whether the gcore command is using the\n    /proc/PID/coredump_filter file.  */\n "
    },
    {
      "sha": "913045a954e6d97a40811f3b12ae56af291b9d2c",
      "filename": "gdb/linux-tdep.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/linux-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/linux-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.h?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -61,4 +61,12 @@ extern void linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch);\n \n extern int linux_is_uclinux (void);\n \n+/* Fetch the AT_HWCAP entry from the auxv vector for the given TARGET.  On\n+   error, 0 is returned.  */\n+extern CORE_ADDR linux_get_hwcap (struct target_ops *target);\n+\n+/* Fetch the AT_HWCAP2 entry from the auxv vector for the given TARGET.  On\n+   error, 0 is returned.  */\n+extern CORE_ADDR linux_get_hwcap2 (struct target_ops *target);\n+\n #endif /* linux-tdep.h */"
    },
    {
      "sha": "3a6bbf416356bbe59c4fcc2c3b2148ba8ed0724a",
      "filename": "gdb/ppc-linux-nat.c",
      "status": "modified",
      "additions": 7,
      "deletions": 32,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/ppc-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/ppc-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-nat.c?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -1554,31 +1554,6 @@ store_ppc_registers (const struct regcache *regcache, int tid)\n      function to fail most of the time, so we ignore them.  */\n }\n \n-/* Fetch the AT_HWCAP entry from the aux vector.  */\n-static CORE_ADDR\n-ppc_linux_get_hwcap (void)\n-{\n-  CORE_ADDR field;\n-\n-  if (target_auxv_search (current_top_target (), AT_HWCAP, &field) != 1)\n-    return 0;\n-\n-  return field;\n-}\n-\n-/* Fetch the AT_HWCAP2 entry from the aux vector.  */\n-\n-static CORE_ADDR\n-ppc_linux_get_hwcap2 (void)\n-{\n-  CORE_ADDR field;\n-\n-  if (target_auxv_search (current_top_target (), AT_HWCAP2, &field) != 1)\n-    return 0;\n-\n-  return field;\n-}\n-\n /* The cached DABR value, to install in new threads.\n    This variable is used when the PowerPC HWDEBUG ptrace\n    interface is not available.  */\n@@ -1735,7 +1710,7 @@ ppc_linux_nat_target::region_ok_for_hw_watchpoint (CORE_ADDR addr, int len)\n          takes two hardware watchpoints though.  */\n       if (len > 1\n \t  && hwdebug_info.features & PPC_DEBUG_FEATURE_DATA_BP_RANGE\n-\t  && ppc_linux_get_hwcap () & PPC_FEATURE_BOOKE)\n+\t  && linux_get_hwcap (current_top_target ()) & PPC_FEATURE_BOOKE)\n \treturn 2;\n       /* Check if the processor provides DAWR interface.  */\n       if (hwdebug_info.features & PPC_DEBUG_FEATURE_DATA_BP_DAWR)\n@@ -1755,7 +1730,7 @@ ppc_linux_nat_target::region_ok_for_hw_watchpoint (CORE_ADDR addr, int len)\n      ptrace interface, DAC-based processors (i.e., embedded processors) will\n      use addresses aligned to 4-bytes due to the way the read/write flags are\n      passed in the old ptrace interface.  */\n-  else if (((ppc_linux_get_hwcap () & PPC_FEATURE_BOOKE)\n+  else if (((linux_get_hwcap (current_top_target ()) & PPC_FEATURE_BOOKE)\n \t   && (addr + len) > (addr & ~3) + 4)\n \t   || (addr + len) > (addr & ~7) + 8)\n     return 0;\n@@ -2294,7 +2269,7 @@ ppc_linux_nat_target::insert_watchpoint (CORE_ADDR addr, int len,\n       long dabr_value;\n       long read_mode, write_mode;\n \n-      if (ppc_linux_get_hwcap () & PPC_FEATURE_BOOKE)\n+      if (linux_get_hwcap (current_top_target ()) & PPC_FEATURE_BOOKE)\n \t{\n \t  /* PowerPC 440 requires only the read/write flags to be passed\n \t     to the kernel.  */\n@@ -2497,9 +2472,9 @@ ppc_linux_nat_target::watchpoint_addr_within_range (CORE_ADDR addr,\n   int mask;\n \n   if (have_ptrace_hwdebug_interface ()\n-      && ppc_linux_get_hwcap () & PPC_FEATURE_BOOKE)\n+      && linux_get_hwcap (current_top_target ()) & PPC_FEATURE_BOOKE)\n     return start <= addr && start + length >= addr;\n-  else if (ppc_linux_get_hwcap () & PPC_FEATURE_BOOKE)\n+  else if (linux_get_hwcap (current_top_target ()) & PPC_FEATURE_BOOKE)\n     mask = 3;\n   else\n     mask = 7;\n@@ -2637,8 +2612,8 @@ ppc_linux_nat_target::read_description ()\n \n   features.wordsize = ppc_linux_target_wordsize (tid);\n \n-  CORE_ADDR hwcap = ppc_linux_get_hwcap ();\n-  CORE_ADDR hwcap2 = ppc_linux_get_hwcap2 ();\n+  CORE_ADDR hwcap = linux_get_hwcap (current_top_target ());\n+  CORE_ADDR hwcap2 = linux_get_hwcap2 (current_top_target ());\n \n   if (have_ptrace_getsetvsxregs\n       && (hwcap & PPC_FEATURE_HAS_VSX))"
    },
    {
      "sha": "19435602b5a1fc8e9336d0cc1b2f86a6b176d92f",
      "filename": "gdb/ppc-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/ppc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/ppc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-tdep.c?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -1601,10 +1601,7 @@ ppc_linux_core_read_description (struct gdbarch *gdbarch,\n   if (vsx)\n     features.vsx = true;\n \n-  CORE_ADDR hwcap;\n-\n-  if (target_auxv_search (target, AT_HWCAP, &hwcap) != 1)\n-    hwcap = 0;\n+  CORE_ADDR hwcap = linux_get_hwcap (target);\n \n   features.isa205 = ppc_linux_has_isa205 (hwcap);\n "
    },
    {
      "sha": "3a3afae7a6ea7569ec8cf4dbabc681ab39f7ae92",
      "filename": "gdb/s390-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/s390-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/s390-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-linux-nat.c?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -1016,9 +1016,8 @@ s390_linux_nat_target::read_description ()\n      that mode, report s390 architecture with 64-bit GPRs.  */\n #ifdef __s390x__\n   {\n-    CORE_ADDR hwcap = 0;\n+    CORE_ADDR hwcap = linux_get_hwcap (current_top_target ());\n \n-    target_auxv_search (current_top_target (), AT_HWCAP, &hwcap);\n     have_regset_tdb = (hwcap & HWCAP_S390_TE)\n       && check_regset (tid, NT_S390_TDB, s390_sizeof_tdbregset);\n "
    },
    {
      "sha": "02ae28b4ea7675b23b3c4cd24d3caf7b99bcf8a9",
      "filename": "gdb/s390-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/s390-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb/gdb/s390-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-linux-tdep.c?ref=0f83012ea0fb84d86d2a84a5feb51c0d63f0b7eb",
      "patch": "@@ -332,10 +332,9 @@ s390_core_read_description (struct gdbarch *gdbarch,\n \t\t\t    struct target_ops *target, bfd *abfd)\n {\n   asection *section = bfd_get_section_by_name (abfd, \".reg\");\n-  CORE_ADDR hwcap = 0;\n+  CORE_ADDR hwcap = linux_get_hwcap (target);\n   bool high_gprs, v1, v2, te, vx, gs;\n \n-  target_auxv_search (target, AT_HWCAP, &hwcap);\n   if (!section)\n     return NULL;\n "
    }
  ]
}