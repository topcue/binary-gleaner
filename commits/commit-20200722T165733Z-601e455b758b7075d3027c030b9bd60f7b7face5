{
  "sha": "601e455b758b7075d3027c030b9bd60f7b7face5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjAxZTQ1NWI3NThiNzA3NWQzMDI3YzAzMGI5YmQ2MGY3YjdmYWNlNQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-02T19:55:05Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T16:57:33Z"
    },
    "message": "libctf, archive: stop ctf_arc_bufopen triggering crazy unmaps\n\nThe archive machinery mmap()s its archives when possible: so it arranges\nto do appropriately-sized unmaps by recording the unmap length in the\nctfa_magic value and unmapping that.\n\nThis brilliant (horrible) trick works less well when ctf_arc_bufopen is\ncalled with an existing buffer (which might be a readonly mapping).\nctf_arc_bufopen always returns a ctf_archive_t wrapper, so record in\nthere the necessity to not unmap anything when a bufopen'ed archive is\nclosed again.\n\nlibctf/\n\t* ctf-impl.h (struct ctf_archive_internal)\n\t<ctfi_unmap_on_close>: New.\n\t(ctf_new_archive_internal): Adjust.\n\t* ctf-archive.c (ctf_new_archive_internal): Likewise.\n\tInitialize ctfi_unmap_on_close.  Adjust error path.\n\t(ctf_arc_bufopen): Adjust ctf_new_archive_internal call\n\t(unmap_on_close is 0).\n\t(ctf_arc_close): Only unmap if ctfi_unmap_on_close.\n\t* ctf-open-bfd.c (ctf_fdopen): Adjust.",
    "tree": {
      "sha": "655696f41764e9a7e7b6a5e76b5a87b52ffe6f42",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/655696f41764e9a7e7b6a5e76b5a87b52ffe6f42"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/601e455b758b7075d3027c030b9bd60f7b7face5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/601e455b758b7075d3027c030b9bd60f7b7face5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/601e455b758b7075d3027c030b9bd60f7b7face5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/601e455b758b7075d3027c030b9bd60f7b7face5/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "96e3ec29664810995d6d7d3b6fd6ae2d19c532bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96e3ec29664810995d6d7d3b6fd6ae2d19c532bd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/96e3ec29664810995d6d7d3b6fd6ae2d19c532bd"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 40,
    "deletions": 12
  },
  "files": [
    {
      "sha": "da285022dc136b46ebe8153a029c38178b044b9e",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/601e455b758b7075d3027c030b9bd60f7b7face5/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/601e455b758b7075d3027c030b9bd60f7b7face5/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=601e455b758b7075d3027c030b9bd60f7b7face5",
      "patch": "@@ -1,3 +1,15 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-impl.h (struct ctf_archive_internal)\n+\t<ctfi_unmap_on_close>: New.\n+\t(ctf_new_archive_internal): Adjust.\n+\t* ctf-archive.c (ctf_new_archive_internal): Likewise.\n+\tInitialize ctfi_unmap_on_close.  Adjust error path.\n+\t(ctf_arc_bufopen): Adjust ctf_new_archive_internal call\n+\t(unmap_on_close is 0).\n+\t(ctf_arc_close): Only unmap if ctfi_unmap_on_close.\n+\t* ctf-open-bfd.c (ctf_fdopen): Adjust.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-types.c (ctf_type_aname): Return ECTF_CORRUPT if"
    },
    {
      "sha": "3c14d7d12f917850a18ff2f6366ad75abdbcab61",
      "filename": "libctf/ctf-archive.c",
      "status": "modified",
      "additions": 20,
      "deletions": 6,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/601e455b758b7075d3027c030b9bd60f7b7face5/libctf/ctf-archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/601e455b758b7075d3027c030b9bd60f7b7face5/libctf/ctf-archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-archive.c?ref=601e455b758b7075d3027c030b9bd60f7b7face5",
      "patch": "@@ -336,10 +336,11 @@ search_modent_by_name (const void *key, const void *ent, void *arg)\n \n /* Make a new struct ctf_archive_internal wrapper for a ctf_archive or a\n    ctf_file.  Closes ARC and/or FP on error.  Arrange to free the SYMSECT or\n-   STRSECT, as needed, on close.  */\n+   STRSECT, as needed, on close.  Possibly do not unmap on close.  */\n \n struct ctf_archive_internal *\n-ctf_new_archive_internal (int is_archive, struct ctf_archive *arc,\n+ctf_new_archive_internal (int is_archive, int unmap_on_close,\n+\t\t\t  struct ctf_archive *arc,\n \t\t\t  ctf_file_t *fp, const ctf_sect_t *symsect,\n \t\t\t  const ctf_sect_t *strsect,\n \t\t\t  int *errp)\n@@ -349,7 +350,10 @@ ctf_new_archive_internal (int is_archive, struct ctf_archive *arc,\n   if ((arci = calloc (1, sizeof (struct ctf_archive_internal))) == NULL)\n     {\n       if (is_archive)\n-\tctf_arc_close_internal (arc);\n+\t{\n+\t  if (unmap_on_close)\n+\t    ctf_arc_close_internal (arc);\n+\t}\n       else\n \tctf_file_close (fp);\n       return (ctf_set_open_errno (errp, errno));\n@@ -364,6 +368,7 @@ ctf_new_archive_internal (int is_archive, struct ctf_archive *arc,\n   if (strsect)\n      memcpy (&arci->ctfi_strsect, strsect, sizeof (struct ctf_sect));\n   arci->ctfi_free_symsect = 0;\n+  arci->ctfi_unmap_on_close = unmap_on_close;\n \n   return arci;\n }\n@@ -382,7 +387,13 @@ ctf_arc_bufopen (const ctf_sect_t *ctfsect, const ctf_sect_t *symsect,\n   if (ctfsect->cts_size > sizeof (uint64_t) &&\n       ((*(uint64_t *) ctfsect->cts_data) == CTFA_MAGIC))\n     {\n-      /* The archive is mmappable, so this operation is trivial.  */\n+      /* The archive is mmappable, so this operation is trivial.\n+\n+\t This buffer is nonmodifiable, so the trick involving mmapping only part\n+\t of it and storing the length in the magic number is not applicable: so\n+\t record this fact in the archive-wrapper header.  (We cannot record it\n+\t in the archive, because the archive may very well be a read-only\n+\t mapping.)  */\n \n       is_archive = 1;\n       arc = (struct ctf_archive *) ctfsect->cts_data;\n@@ -397,7 +408,7 @@ ctf_arc_bufopen (const ctf_sect_t *ctfsect, const ctf_sect_t *symsect,\n \t  return NULL;\n \t}\n     }\n-  return ctf_new_archive_internal (is_archive, arc, fp, symsect, strsect,\n+  return ctf_new_archive_internal (is_archive, 0, arc, fp, symsect, strsect,\n \t\t\t\t   errp);\n }\n \n@@ -474,7 +485,10 @@ ctf_arc_close (ctf_archive_t *arc)\n     return;\n \n   if (arc->ctfi_is_archive)\n-    ctf_arc_close_internal (arc->ctfi_archive);\n+    {\n+      if (arc->ctfi_unmap_on_close)\n+\tctf_arc_close_internal (arc->ctfi_archive);\n+    }\n   else\n     ctf_file_close (arc->ctfi_file);\n   if (arc->ctfi_free_symsect)"
    },
    {
      "sha": "4661aa8c7a9cf9c56dab969eed72c4afe9276f65",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/601e455b758b7075d3027c030b9bd60f7b7face5/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/601e455b758b7075d3027c030b9bd60f7b7face5/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=601e455b758b7075d3027c030b9bd60f7b7face5",
      "patch": "@@ -312,6 +312,7 @@ struct ctf_file\n struct ctf_archive_internal\n {\n   int ctfi_is_archive;\n+  int ctfi_unmap_on_close;\n   ctf_file_t *ctfi_file;\n   struct ctf_archive *ctfi_archive;\n   ctf_sect_t ctfi_symsect;\n@@ -443,10 +444,11 @@ extern void ctf_str_rollback (ctf_file_t *, ctf_snapshot_id_t);\n extern void ctf_str_purge_refs (ctf_file_t *);\n extern ctf_strs_writable_t ctf_str_write_strtab (ctf_file_t *);\n \n-extern struct ctf_archive_internal *ctf_new_archive_internal\n-\t(int is_archive, struct ctf_archive *arc,\n-\t ctf_file_t *fp, const ctf_sect_t *symsect,\n-\t const ctf_sect_t *strsect, int *errp);\n+extern struct ctf_archive_internal *\n+ctf_new_archive_internal (int is_archive, int unmap_on_close,\n+\t\t\t  struct ctf_archive *, ctf_file_t *,\n+\t\t\t  const ctf_sect_t *symsect,\n+\t\t\t  const ctf_sect_t *strsect, int *errp);\n extern struct ctf_archive *ctf_arc_open_internal (const char *, int *);\n extern void ctf_arc_close_internal (struct ctf_archive *);\n extern void *ctf_set_open_errno (int *, int);"
    },
    {
      "sha": "2d2d572c88fe75110688edfe000a35887b65c8e1",
      "filename": "libctf/ctf-open-bfd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/601e455b758b7075d3027c030b9bd60f7b7face5/libctf/ctf-open-bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/601e455b758b7075d3027c030b9bd60f7b7face5/libctf/ctf-open-bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open-bfd.c?ref=601e455b758b7075d3027c030b9bd60f7b7face5",
      "patch": "@@ -230,7 +230,7 @@ ctf_fdopen (int fd, const char *filename, const char *target, int *errp)\n       fp->ctf_data_mmapped = data;\n       fp->ctf_data_mmapped_len = (size_t) st.st_size;\n \n-      return ctf_new_archive_internal (0, NULL, fp, NULL, NULL, errp);\n+      return ctf_new_archive_internal (0, 1, NULL, fp, NULL, NULL, errp);\n     }\n \n   if ((nbytes = ctf_pread (fd, &arc_magic, sizeof (arc_magic), 0)) <= 0)\n@@ -243,7 +243,7 @@ ctf_fdopen (int fd, const char *filename, const char *target, int *errp)\n       if ((arc = ctf_arc_open_internal (filename, errp)) == NULL)\n \treturn NULL;\t\t\t/* errno is set for us.  */\n \n-      return ctf_new_archive_internal (1, arc, NULL, NULL, NULL, errp);\n+      return ctf_new_archive_internal (1, 1, arc, NULL, NULL, NULL, errp);\n     }\n \n   /* Attempt to open the file with BFD.  We must dup the fd first, since bfd"
    }
  ]
}