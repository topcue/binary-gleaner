{
  "sha": "c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzJmZDdmYWVhOGYyYzNhMjY3ZjI3NmNlYjZhOTVmOWY1MzdlYTdjMQ==",
  "commit": {
    "author": {
      "name": "Alok Kumar Sharma",
      "email": "AlokKumar.Sharma@amd.com",
      "date": "2020-08-20T05:05:27Z"
    },
    "committer": {
      "name": "Alok Kumar Sharma",
      "email": "AlokKumar.Sharma@amd.com",
      "date": "2020-08-20T05:08:59Z"
    },
    "message": "Fix for incorrect breakpoint set in case of flang compiled binary\n\n  Currently, GDB is not able to set a breakpoint at subprogram post\nprologue for flang generated binaries. This is due to clang having\ntwo line notes one before and another after the prologue.\n  Now the end of prologue is determined using symbol table, which was\nthe way for clang generated binaries already. Since clang and flang\nboth share same back-end it is true for flang as well.\n\ngdb/ChangeLog\n\n      * amd64-tdep.c (amd64_skip_prologue): Using symbol table\n      to find the end of prologue for flang compiled binaries.\n      * arm-tdep.c (arm_skip_prologue): Likewise.\n      * i386-tdep.c (i386_skip_prologue): Likewise.\n      * producer.c (producer_is_llvm): New function.\n      (producer_parsing_tests): Added new tests for clang/flang.\n      * producer.h (producer_is_llvm): New declaration.\n\ngdb/testsuite/ChangeLog\n\n      * gdb.fortran/vla-type.exp: Skip commands not required for\n      the Flang compiled binaries after prologue fix.",
    "tree": {
      "sha": "13ba6ecf6e6cb212269d5d01a0b97ea0112b307f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/13ba6ecf6e6cb212269d5d01a0b97ea0112b307f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/comments",
  "author": {
    "login": "alokkrsharma",
    "id": 60725621,
    "node_id": "MDQ6VXNlcjYwNzI1NjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/60725621?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alokkrsharma",
    "html_url": "https://github.com/alokkrsharma",
    "followers_url": "https://api.github.com/users/alokkrsharma/followers",
    "following_url": "https://api.github.com/users/alokkrsharma/following{/other_user}",
    "gists_url": "https://api.github.com/users/alokkrsharma/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alokkrsharma/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alokkrsharma/subscriptions",
    "organizations_url": "https://api.github.com/users/alokkrsharma/orgs",
    "repos_url": "https://api.github.com/users/alokkrsharma/repos",
    "events_url": "https://api.github.com/users/alokkrsharma/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alokkrsharma/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "alokkrsharma",
    "id": 60725621,
    "node_id": "MDQ6VXNlcjYwNzI1NjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/60725621?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alokkrsharma",
    "html_url": "https://github.com/alokkrsharma",
    "followers_url": "https://api.github.com/users/alokkrsharma/followers",
    "following_url": "https://api.github.com/users/alokkrsharma/following{/other_user}",
    "gists_url": "https://api.github.com/users/alokkrsharma/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alokkrsharma/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alokkrsharma/subscriptions",
    "organizations_url": "https://api.github.com/users/alokkrsharma/orgs",
    "repos_url": "https://api.github.com/users/alokkrsharma/repos",
    "events_url": "https://api.github.com/users/alokkrsharma/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alokkrsharma/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a0522545b6ef4dd43f976d6acb4fd2b0aa964b27"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 62,
    "deletions": 9
  },
  "files": [
    {
      "sha": "aee25787b0fff2475c10b20d50d1baf70b68ef86",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
      "patch": "@@ -1,3 +1,13 @@\n+2020-08-19  Alok Kumar Sharma  <AlokKumar.Sharma@amd.com>\n+\n+\t* amd64-tdep.c (amd64_skip_prologue): Using symbol table\n+\tto find the end of prologue for flang compiled binaries.\n+\t* arm-tdep.c (arm_skip_prologue): Likewise.\n+\t* i386-tdep.c (i386_skip_prologue): Likewise.\n+\t* producer.c (producer_is_llvm): New function.\n+\t(producer_parsing_tests): Added new tests for clang/flang.\n+\t* producer.h (producer_is_llvm): New declaration.\n+\n 2020-08-18  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* linux-nat.c (linux_nat_debug_printf): New function."
    },
    {
      "sha": "59f7c9f885f446cbc5ae6cec427bfcd5b524df36",
      "filename": "gdb/amd64-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/amd64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/amd64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.c?ref=c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
      "patch": "@@ -2547,12 +2547,13 @@ amd64_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR start_pc)\n \t= skip_prologue_using_sal (gdbarch, func_addr);\n       struct compunit_symtab *cust = find_pc_compunit_symtab (func_addr);\n \n-      /* Clang always emits a line note before the prologue and another\n-\t one after.  We trust clang to emit usable line notes.  */\n+      /* LLVM backend (Clang/Flang) always emits a line note before the\n+         prologue and another one after.  We trust clang to emit usable\n+         line notes.  */\n       if (post_prologue_pc\n \t  && (cust != NULL\n \t      && COMPUNIT_PRODUCER (cust) != NULL\n-\t      && startswith (COMPUNIT_PRODUCER (cust), \"clang \")))\n+\t      && producer_is_llvm (COMPUNIT_PRODUCER (cust))))\n         return std::max (start_pc, post_prologue_pc);\n     }\n "
    },
    {
      "sha": "074eedb48005829ba366802bdeda27571b922e49",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
      "patch": "@@ -60,6 +60,8 @@\n #include \"record-full.h\"\n #include <algorithm>\n \n+#include \"producer.h\"\n+\n #if GDB_SELF_TEST\n #include \"gdbsupport/selftest.h\"\n #endif\n@@ -1351,7 +1353,7 @@ arm_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n \t  && (cust == NULL\n \t      || COMPUNIT_PRODUCER (cust) == NULL\n \t      || startswith (COMPUNIT_PRODUCER (cust), \"GNU \")\n-\t      || startswith (COMPUNIT_PRODUCER (cust), \"clang \")))\n+\t      || producer_is_llvm (COMPUNIT_PRODUCER (cust))))\n \treturn post_prologue_pc;\n \n       if (post_prologue_pc != 0)"
    },
    {
      "sha": "d9fa2b926499e4297a543d40177e5b5cddf8abc6",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
      "patch": "@@ -65,6 +65,7 @@\n #include <ctype.h>\n #include <algorithm>\n #include <unordered_set>\n+#include \"producer.h\"\n \n /* Register names.  */\n \n@@ -1847,12 +1848,13 @@ i386_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR start_pc)\n \t= skip_prologue_using_sal (gdbarch, func_addr);\n       struct compunit_symtab *cust = find_pc_compunit_symtab (func_addr);\n \n-      /* Clang always emits a line note before the prologue and another\n-\t one after.  We trust clang to emit usable line notes.  */\n+      /* LLVM backend (Clang/Flang) always emits a line note before the\n+         prologue and another one after.  We trust clang to emit usable\n+         line notes.  */\n       if (post_prologue_pc\n \t  && (cust != NULL\n \t      && COMPUNIT_PRODUCER (cust) != NULL\n-\t      && startswith (COMPUNIT_PRODUCER (cust), \"clang \")))\n+\t      && producer_is_llvm (COMPUNIT_PRODUCER (cust))))\n         return std::max (start_pc, post_prologue_pc);\n     }\n  "
    },
    {
      "sha": "d25d93fcced4ee47857fa7738db01318a5e31163",
      "filename": "gdb/producer.c",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/producer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/producer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/producer.c?ref=c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
      "patch": "@@ -125,6 +125,15 @@ producer_is_icc (const char *producer, int *major, int *minor)\n   return false;\n }\n \n+/* See producer.h.  */\n+\n+bool\n+producer_is_llvm (const char *producer)\n+{\n+  return ((producer != NULL) && (startswith (producer, \"clang \")\n+                                 || startswith (producer, \" F90 Flang \")));\n+}\n+\n #if defined GDB_SELF_TEST\n namespace selftests {\n namespace producer {\n@@ -203,6 +212,22 @@ Version 18.0 Beta\";\n     SELF_CHECK (producer_is_gcc (gnu_exp, &major, &minor)\n \t\t&& major == 5 && minor == 0);\n   }\n+\n+  {\n+    static const char clang_llvm_exp[] = \"clang version 12.0.0 (CLANG: bld#8)\";\n+    int major = 0, minor = 0;\n+    SELF_CHECK (!producer_is_icc (clang_llvm_exp, NULL, NULL));\n+    SELF_CHECK (!producer_is_gcc (clang_llvm_exp, &major, &minor));\n+    SELF_CHECK (producer_is_llvm (clang_llvm_exp));\n+  }\n+\n+  {\n+    static const char flang_llvm_exp[] = \" F90 Flang - 1.5 2017-05-01\";\n+    int major = 0, minor = 0;\n+    SELF_CHECK (!producer_is_icc (flang_llvm_exp, NULL, NULL));\n+    SELF_CHECK (!producer_is_gcc (flang_llvm_exp, &major, &minor));\n+    SELF_CHECK (producer_is_llvm (flang_llvm_exp));\n+  }\n }\n }\n }"
    },
    {
      "sha": "e9bc309b0c8b88b662cfc30a7ae776aa6ed12c05",
      "filename": "gdb/producer.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/producer.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/producer.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/producer.h?ref=c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
      "patch": "@@ -52,4 +52,8 @@ extern int producer_is_gcc (const char *producer, int *major, int *minor);\n        running on Intel(R) 64, Version 18.0 Beta ....\".  */\n extern bool producer_is_icc (const char *producer, int *major, int *minor);\n \n+/* Returns true if the given PRODUCER string is LLVM (clang/flang) or\n+   false otherwise.*/\n+extern bool producer_is_llvm (const char *producer);\n+\n #endif"
    },
    {
      "sha": "0e4f6a5ce903fa3e14e9688194fd191528ca2029",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
      "patch": "@@ -1,3 +1,8 @@\n+2020-08-19  Alok Kumar Sharma  <AlokKumar.Sharma@amd.com>\n+\n+\t* gdb.fortran/vla-type.exp: Skip commands not required for\n+\tthe Flang compiled binaries after prologue fix.\n+\n 2020-08-17  Tom de Vries  <tdevries@suse.de>\n \t    Tom Tromey  <tromey@adacore.com>\n "
    },
    {
      "sha": "e2b8d71b4cba8431c6fc61bfe4340cd6355cf8bd",
      "filename": "gdb/testsuite/gdb.fortran/vla-type.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/testsuite/gdb.fortran/vla-type.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1/gdb/testsuite/gdb.fortran/vla-type.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/vla-type.exp?ref=c2fd7faea8f2c3a267f276ceb6a95f9f537ea7c1",
      "patch": "@@ -33,8 +33,12 @@ set int [fortran_int4]\n \n # Check if not allocated VLA in type does not break\n # the debugger when accessing it.\n-gdb_breakpoint [gdb_get_line_number \"before-allocated\"]\n-gdb_continue_to_breakpoint \"before-allocated\"\n+# break main for Flang compiler already breaks here\n+if ![test_compiler_info \"clang-*\"] {\n+    gdb_breakpoint [gdb_get_line_number \"before-allocated\"]\n+    gdb_continue_to_breakpoint \"before-allocated\"\n+}\n+\n gdb_test \"print twov\" \" = \\\\\\( ivla1 = <not allocated>, ivla2 = <not allocated> \\\\\\)\" \\\n   \"print twov before allocated\"\n gdb_test \"print twov%ivla1\" \" = <not allocated>\" \\"
    }
  ]
}