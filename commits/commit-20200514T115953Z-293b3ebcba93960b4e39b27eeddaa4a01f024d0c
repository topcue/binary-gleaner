{
  "sha": "293b3ebcba93960b4e39b27eeddaa4a01f024d0c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjkzYjNlYmNiYTkzOTYwYjRlMzliMjdlZWRkYWE0YTAxZjAyNGQwYw==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-05-14T11:59:53Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-05-14T11:59:53Z"
    },
    "message": "gdb/infrun: extract out a code piece into 'mark_non_executing_threads' function\n\nThis is a refactoring.  The extracted function is placed deliberately\nbefore 'stop_all_threads' because the function will be re-used there\nin a subsequent patch for handling an exit status kind received from\na thread that GDB attempted to stop.\n\ngdb/ChangeLog:\n2020-05-14  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* infrun.c (handle_inferior_event): Extract out a piece of code\n\tinto...\n\t(mark_non_executing_threads): ...this new function.\n\nChange-Id: I2b088f4a724f4260cb37068264964525cf62a118",
    "tree": {
      "sha": "f3aa0332d2141f8e7cb096ac73216023fb0154f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f3aa0332d2141f8e7cb096ac73216023fb0154f2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/293b3ebcba93960b4e39b27eeddaa4a01f024d0c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/293b3ebcba93960b4e39b27eeddaa4a01f024d0c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/293b3ebcba93960b4e39b27eeddaa4a01f024d0c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/293b3ebcba93960b4e39b27eeddaa4a01f024d0c/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7ca9b62a2b63ae04d554053c2a2053d13a9d8c92",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ca9b62a2b63ae04d554053c2a2053d13a9d8c92",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7ca9b62a2b63ae04d554053c2a2053d13a9d8c92"
    }
  ],
  "stats": {
    "total": 83,
    "additions": 48,
    "deletions": 35
  },
  "files": [
    {
      "sha": "c27876b5c81044b0c47ac68c202af19f884f5797",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/293b3ebcba93960b4e39b27eeddaa4a01f024d0c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/293b3ebcba93960b4e39b27eeddaa4a01f024d0c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=293b3ebcba93960b4e39b27eeddaa4a01f024d0c",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-14  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* infrun.c (handle_inferior_event): Extract out a piece of code\n+\tinto...\n+\t(mark_non_executing_threads): ...this new function.\n+\n 2020-05-14  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* infrun.c (resume_1): Move a 'regcache_read_pc' call down to first"
    },
    {
      "sha": "c5bf2d0ad741b7c6ea5da06daf3cfa391a44db12",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 42,
      "deletions": 35,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/293b3ebcba93960b4e39b27eeddaa4a01f024d0c/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/293b3ebcba93960b4e39b27eeddaa4a01f024d0c/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=293b3ebcba93960b4e39b27eeddaa4a01f024d0c",
      "patch": "@@ -4712,6 +4712,47 @@ save_waitstatus (struct thread_info *tp, const target_waitstatus *ws)\n     }\n }\n \n+/* Mark the non-executing threads accordingly.  In all-stop, all\n+   threads of all processes are stopped when we get any event\n+   reported.  In non-stop mode, only the event thread stops.  */\n+\n+static void\n+mark_non_executing_threads (process_stratum_target *target,\n+\t\t\t    ptid_t event_ptid,\n+\t\t\t    struct target_waitstatus ws)\n+{\n+  ptid_t mark_ptid;\n+\n+  if (!target_is_non_stop_p ())\n+    mark_ptid = minus_one_ptid;\n+  else if (ws.kind == TARGET_WAITKIND_SIGNALLED\n+\t   || ws.kind == TARGET_WAITKIND_EXITED)\n+    {\n+      /* If we're handling a process exit in non-stop mode, even\n+\t though threads haven't been deleted yet, one would think\n+\t that there is nothing to do, as threads of the dead process\n+\t will be soon deleted, and threads of any other process were\n+\t left running.  However, on some targets, threads survive a\n+\t process exit event.  E.g., for the \"checkpoint\" command,\n+\t when the current checkpoint/fork exits, linux-fork.c\n+\t automatically switches to another fork from within\n+\t target_mourn_inferior, by associating the same\n+\t inferior/thread to another fork.  We haven't mourned yet at\n+\t this point, but we must mark any threads left in the\n+\t process as not-executing so that finish_thread_state marks\n+\t them stopped (in the user's perspective) if/when we present\n+\t the stop to the user.  */\n+      mark_ptid = ptid_t (event_ptid.pid ());\n+    }\n+  else\n+    mark_ptid = event_ptid;\n+\n+  set_executing (target, mark_ptid, false);\n+\n+  /* Likewise the resumed flag.  */\n+  set_resumed (target, mark_ptid, false);\n+}\n+\n /* See infrun.h.  */\n \n void\n@@ -5145,41 +5186,7 @@ handle_inferior_event (struct execution_control_state *ecs)\n \t}\n     }\n \n-  /* Mark the non-executing threads accordingly.  In all-stop, all\n-     threads of all processes are stopped when we get any event\n-     reported.  In non-stop mode, only the event thread stops.  */\n-  {\n-    ptid_t mark_ptid;\n-\n-    if (!target_is_non_stop_p ())\n-      mark_ptid = minus_one_ptid;\n-    else if (ecs->ws.kind == TARGET_WAITKIND_SIGNALLED\n-\t     || ecs->ws.kind == TARGET_WAITKIND_EXITED)\n-      {\n-\t/* If we're handling a process exit in non-stop mode, even\n-\t   though threads haven't been deleted yet, one would think\n-\t   that there is nothing to do, as threads of the dead process\n-\t   will be soon deleted, and threads of any other process were\n-\t   left running.  However, on some targets, threads survive a\n-\t   process exit event.  E.g., for the \"checkpoint\" command,\n-\t   when the current checkpoint/fork exits, linux-fork.c\n-\t   automatically switches to another fork from within\n-\t   target_mourn_inferior, by associating the same\n-\t   inferior/thread to another fork.  We haven't mourned yet at\n-\t   this point, but we must mark any threads left in the\n-\t   process as not-executing so that finish_thread_state marks\n-\t   them stopped (in the user's perspective) if/when we present\n-\t   the stop to the user.  */\n-\tmark_ptid = ptid_t (ecs->ptid.pid ());\n-      }\n-    else\n-      mark_ptid = ecs->ptid;\n-\n-    set_executing (ecs->target, mark_ptid, false);\n-\n-    /* Likewise the resumed flag.  */\n-    set_resumed (ecs->target, mark_ptid, false);\n-  }\n+  mark_non_executing_threads (ecs->target, ecs->ptid, ecs->ws);\n \n   switch (ecs->ws.kind)\n     {"
    }
  ]
}