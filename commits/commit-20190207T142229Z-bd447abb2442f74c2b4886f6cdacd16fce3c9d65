{
  "sha": "bd447abb2442f74c2b4886f6cdacd16fce3c9d65",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmQ0NDdhYmIyNDQyZjc0YzJiNDg4NmY2Y2RhY2QxNmZjZTNjOWQ2NQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-02-07T14:22:29Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-02-07T14:22:29Z"
    },
    "message": "Make gdb.base/corefile.exp work on terminals with few rows\n\nWhen creating a pty to spawn a subprocess (such as gdb), Expect\ncopies the settings of its own controlling terminal, including the\nnumber of rows and columns.  If you \"make check\" on a terminal with just\na few rows (e.g. 4), GDB will paginate before reaching the initial\nprompt.  In default_gdb_start, used by most tests, this is already\nhandled: if we see the pagination prompt, we sent \\n to continue.\n\nPhilippe reported that gdb.base/corefile.exp didn't work in terminals\nwith just a few rows.  This test spawns GDB by hand, because it needs to\ncheck things before the initial prompt, which it couldn't do if it used\ndefault_gdb_start.\n\nIn this case I think it's not safe to use the same technique as in\ndefault_gdb_start.  Even if we could send a \\n if we see a pagination\nprompt, we match some multiline regexes in there.  So if a pagination\nslips in there, it might make the regexes not match and fail the test.\n\nIt's also not possible to use -ex \"set height 0\" or -iex \"set height 0\",\nit is handled after the introduction text is shown.\n\nThe simplest way I found to avoid showing the pagination completely is\nto set stty_init (documented in expect's man page) to initialize gdb's\npty with a fixed number of rows.\n\nAnd actually, if we set stty_init in gdb_init, it works nicely as a\ngeneral solution applicable to all tests.  We can therefore remove the\nsolution introduced in e882ef3cfc3 (\"testsuite: expect possible\npagination when starting gdb\") where we matched the pagination prompt\nduring startup.\n\ngdb/testsuite/ChangeLog:\n\n\t* lib/gdb.exp (default_gdb_start): Don't match pagination\n\tprompt.\n\t(gdb_init): Set stty_init.",
    "tree": {
      "sha": "47f976f046a99638a1abdb8d45e0e750ae5cc8db",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/47f976f046a99638a1abdb8d45e0e750ae5cc8db"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bd447abb2442f74c2b4886f6cdacd16fce3c9d65",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd447abb2442f74c2b4886f6cdacd16fce3c9d65",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bd447abb2442f74c2b4886f6cdacd16fce3c9d65",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd447abb2442f74c2b4886f6cdacd16fce3c9d65/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "46e3ed7ff94dc2d65f3d937d483c459b4cee6a0a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46e3ed7ff94dc2d65f3d937d483c459b4cee6a0a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/46e3ed7ff94dc2d65f3d937d483c459b4cee6a0a"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 26,
    "deletions": 24
  },
  "files": [
    {
      "sha": "d4ab609612fac33275194112dc7e68cc5aa5075a",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd447abb2442f74c2b4886f6cdacd16fce3c9d65/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd447abb2442f74c2b4886f6cdacd16fce3c9d65/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=bd447abb2442f74c2b4886f6cdacd16fce3c9d65",
      "patch": "@@ -1,3 +1,9 @@\n+2019-02-07  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* lib/gdb.exp (default_gdb_start): Don't match pagination\n+\tprompt.\n+\t(gdb_init): Set stty_init.\n+\n 2019-01-27  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.python/py-finish-breakpoint.exp: Remove duplicate call to"
    },
    {
      "sha": "d05854329d8026386785fd66783ec4858e9965bc",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 20,
      "deletions": 24,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd447abb2442f74c2b4886f6cdacd16fce3c9d65/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd447abb2442f74c2b4886f6cdacd16fce3c9d65/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=bd447abb2442f74c2b4886f6cdacd16fce3c9d65",
      "patch": "@@ -1638,7 +1638,7 @@ proc default_gdb_spawn { } {\n # Default gdb_start procedure.\n \n proc default_gdb_start { } {\n-    global gdb_prompt pagination_prompt\n+    global gdb_prompt\n     global gdb_spawn_id\n     global inferior_spawn_id\n \n@@ -1659,29 +1659,20 @@ proc default_gdb_start { } {\n     # When running over NFS, particularly if running many simultaneous\n     # tests on different hosts all using the same server, things can\n     # get really slow.  Give gdb at least 3 minutes to start up.\n-    set loop_again 1\n-    while { $loop_again } {\n-\tset loop_again 0\n-\tgdb_expect 360 {\n-\t    -re \"$pagination_prompt\" {\n-\t\tverbose \"Hit pagination during startup. Pressing enter to continue.\"\n-\t\tsend_gdb \"\\n\"\n-\t\tset loop_again 1\n-\t    }\n-\t    -re \"\\[\\r\\n\\]$gdb_prompt $\" {\n-\t\tverbose \"GDB initialized.\"\n-\t    }\n-\t    -re \"$gdb_prompt $\"\t{\n-\t\tperror \"GDB never initialized.\"\n-\t\tunset gdb_spawn_id\n-\t\treturn -1\n-\t    }\n-\t    timeout\t{\n-\t\tperror \"(timeout) GDB never initialized after 10 seconds.\"\n-\t\tremote_close host\n-\t\tunset gdb_spawn_id\n-\t\treturn -1\n-\t    }\n+    gdb_expect 360 {\n+\t-re \"\\[\\r\\n\\]$gdb_prompt $\" {\n+\t    verbose \"GDB initialized.\"\n+\t}\n+\t-re \"$gdb_prompt $\"\t{\n+\t    perror \"GDB never initialized.\"\n+\t    unset gdb_spawn_id\n+\t    return -1\n+\t}\n+\ttimeout\t{\n+\t    perror \"(timeout) GDB never initialized after 10 seconds.\"\n+\t    remote_close host\n+\t    unset gdb_spawn_id\n+\t    return -1\n \t}\n     }\n \n@@ -4752,6 +4743,11 @@ proc gdb_init { test_file_name } {\n     # tests.\n     setenv TERM \"dumb\"\n \n+    # Initialize GDB's pty with a fixed size, to make sure we avoid pagination\n+    # during startup.  See \"man expect\" for details about stty_init.\n+    global stty_init\n+    set stty_init \"rows 25 cols 80\"\n+\n     # Some tests (for example gdb.base/maint.exp) shell out from gdb to use\n     # grep.  Clear GREP_OPTIONS to make the behavior predictable,\n     # especially having color output turned on can cause tests to fail."
    }
  ]
}