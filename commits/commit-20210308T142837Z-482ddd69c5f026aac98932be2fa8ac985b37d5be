{
  "sha": "482ddd69c5f026aac98932be2fa8ac985b37d5be",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDgyZGRkNjljNWYwMjZhYWM5ODkzMmJlMmZhOGFjOTg1YjM3ZDViZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:37Z"
    },
    "message": "Convert dtrace probes to use operations\n\nThis changes dtrace to use the new operation type.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* gdbarch.sh (dtrace_parse_probe_argument): Change return type.\n\t* gdbarch.h: Rebuild.\n\t* gdbarch.c: Rebuild.\n\t* dtrace-probe.c (dtrace_probe::build_arg_exprs): Update.\n\t* amd64-linux-tdep.c (amd64_dtrace_parse_probe_argument): Change\n\treturn type.\n\t(amd64_dtrace_parse_probe_argument): Update.",
    "tree": {
      "sha": "3bcf09d59c5cc1108c3a5127f263c215adf8be1a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3bcf09d59c5cc1108c3a5127f263c215adf8be1a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/482ddd69c5f026aac98932be2fa8ac985b37d5be",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/482ddd69c5f026aac98932be2fa8ac985b37d5be",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/482ddd69c5f026aac98932be2fa8ac985b37d5be",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/482ddd69c5f026aac98932be2fa8ac985b37d5be/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8227d9e2f4af14c7e36f1792747bd5d7edf71d6a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8227d9e2f4af14c7e36f1792747bd5d7edf71d6a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8227d9e2f4af14c7e36f1792747bd5d7edf71d6a"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 36,
    "deletions": 38
  },
  "files": [
    {
      "sha": "87c5615858815902ca4303a4582575e29c1e332a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=482ddd69c5f026aac98932be2fa8ac985b37d5be",
      "patch": "@@ -1,3 +1,13 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdbarch.sh (dtrace_parse_probe_argument): Change return type.\n+\t* gdbarch.h: Rebuild.\n+\t* gdbarch.c: Rebuild.\n+\t* dtrace-probe.c (dtrace_probe::build_arg_exprs): Update.\n+\t* amd64-linux-tdep.c (amd64_dtrace_parse_probe_argument): Change\n+\treturn type.\n+\t(amd64_dtrace_parse_probe_argument): Update.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* parser-defs.h (struct parser_state) <push, push_new,"
    },
    {
      "sha": "ac6843c1fdd36238cd8753fc3fe1180fb372fe38",
      "filename": "gdb/amd64-linux-tdep.c",
      "status": "modified",
      "additions": 14,
      "deletions": 25,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/amd64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/amd64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-linux-tdep.c?ref=482ddd69c5f026aac98932be2fa8ac985b37d5be",
      "patch": "@@ -41,6 +41,7 @@\n #include \"glibc-tdep.h\"\n #include \"arch/amd64.h\"\n #include \"target-descriptions.h\"\n+#include \"expop.h\"\n \n /* The syscall's XML filename for i386.  */\n #define XML_SYSCALL_FILENAME_AMD64 \"syscalls/amd64-linux.xml\"\n@@ -1733,17 +1734,16 @@ amd64_dtrace_disable_probe (struct gdbarch *gdbarch, CORE_ADDR addr)\n /* Implementation of `gdbarch_dtrace_parse_probe_argument', as defined\n    in gdbarch.h.  */\n \n-static void\n+static expr::operation_up\n amd64_dtrace_parse_probe_argument (struct gdbarch *gdbarch,\n-\t\t\t\t   struct expr_builder *builder,\n \t\t\t\t   int narg)\n {\n-  struct stoken str;\n-\n   /* DTrace probe arguments can be found on the ABI-defined places for\n      regular arguments at the current PC.  The probe abstraction\n      currently supports up to 12 arguments for probes.  */\n \n+  using namespace expr;\n+\n   if (narg < 6)\n     {\n       static const int arg_reg_map[6] =\n@@ -1757,40 +1757,29 @@ amd64_dtrace_parse_probe_argument (struct gdbarch *gdbarch,\n \t};\n       int regno = arg_reg_map[narg];\n       const char *regname = user_reg_map_regnum_to_name (gdbarch, regno);\n-\n-      write_exp_elt_opcode (builder, OP_REGISTER);\n-      str.ptr = regname;\n-      str.length = strlen (regname);\n-      write_exp_string (builder, str);\n-      write_exp_elt_opcode (builder, OP_REGISTER);\n+      return make_operation<register_operation> (regname);\n     }\n   else\n     {\n       /* Additional arguments are passed on the stack.  */\n       const char *regname = user_reg_map_regnum_to_name (gdbarch, AMD64_RSP_REGNUM);\n \n       /* Displacement.  */\n-      write_exp_elt_opcode (builder, OP_LONG);\n-      write_exp_elt_type (builder, builtin_type (gdbarch)->builtin_long);\n-      write_exp_elt_longcst (builder, narg - 6);\n-      write_exp_elt_opcode (builder, OP_LONG);\n+      struct type *long_type = builtin_type (gdbarch)->builtin_long;\n+      operation_up disp\t= make_operation<long_const_operation> (long_type,\n+\t\t\t\t\t\t\t\tnarg - 6);\n \n       /* Register: SP.  */\n-      write_exp_elt_opcode (builder, OP_REGISTER);\n-      str.ptr = regname;\n-      str.length = strlen (regname);\n-      write_exp_string (builder, str);\n-      write_exp_elt_opcode (builder, OP_REGISTER);\n+      operation_up reg = make_operation<register_operation> (regname);\n \n-      write_exp_elt_opcode (builder, BINOP_ADD);\n+      operation_up add = make_operation<add_operation> (std::move (disp),\n+\t\t\t\t\t\t\tstd::move (reg));\n \n       /* Cast to long. */\n-      write_exp_elt_opcode (builder, UNOP_CAST);\n-      write_exp_elt_type (builder,\n-\t\t\t  lookup_pointer_type (builtin_type (gdbarch)->builtin_long));\n-      write_exp_elt_opcode (builder, UNOP_CAST);\n+      operation_up cast = make_operation<unop_cast_operation> (std::move (add),\n+\t\t\t\t\t\t\t       long_type);\n \n-      write_exp_elt_opcode (builder, UNOP_IND);\n+      return make_operation<unop_ind_operation> (std::move (cast));\n     }\n }\n "
    },
    {
      "sha": "3fa02ddaebec7170ee3d589ac13143edf9dac232",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=482ddd69c5f026aac98932be2fa8ac985b37d5be",
      "patch": "@@ -32,6 +32,7 @@\n #include \"language.h\"\n #include \"parser-defs.h\"\n #include \"inferior.h\"\n+#include \"expop.h\"\n \n /* The type of the ELF sections where we will find the DOF programs\n    with information about probes.  */\n@@ -629,20 +630,18 @@ dtrace_probe::build_arg_exprs (struct gdbarch *gdbarch)\n \n       /* The argument value, which is ABI dependent and casted to\n \t `long int'.  */\n-      gdbarch_dtrace_parse_probe_argument (gdbarch, &builder, argc);\n+      expr::operation_up op = gdbarch_dtrace_parse_probe_argument (gdbarch,\n+\t\t\t\t\t\t\t\t   argc);\n \n       /* Casting to the expected type, but only if the type was\n \t recognized at probe load time.  Otherwise the argument will\n \t be evaluated as the long integer passed to the probe.  */\n       if (arg.type != NULL)\n-\t{\n-\t  write_exp_elt_opcode (&builder, UNOP_CAST);\n-\t  write_exp_elt_type (&builder, arg.type);\n-\t  write_exp_elt_opcode (&builder, UNOP_CAST);\n-\t}\n+\top = expr::make_operation<expr::unop_cast_operation> (std::move (op),\n+\t\t\t\t\t\t\t      arg.type);\n \n+      builder.set_operation (std::move (op));\n       arg.expr = builder.release ();\n-      prefixify_expression (arg.expr.get ());\n       ++argc;\n     }\n }"
    },
    {
      "sha": "a233501f5b231b04c8e6d52a98b015a7895d21d8",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=482ddd69c5f026aac98932be2fa8ac985b37d5be",
      "patch": "@@ -4637,14 +4637,14 @@ gdbarch_dtrace_parse_probe_argument_p (struct gdbarch *gdbarch)\n   return gdbarch->dtrace_parse_probe_argument != NULL;\n }\n \n-void\n-gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, struct expr_builder *builder, int narg)\n+expr::operation_up\n+gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, int narg)\n {\n   gdb_assert (gdbarch != NULL);\n   gdb_assert (gdbarch->dtrace_parse_probe_argument != NULL);\n   if (gdbarch_debug >= 2)\n     fprintf_unfiltered (gdb_stdlog, \"gdbarch_dtrace_parse_probe_argument called\\n\");\n-  gdbarch->dtrace_parse_probe_argument (gdbarch, builder, narg);\n+  return gdbarch->dtrace_parse_probe_argument (gdbarch, narg);\n }\n \n void"
    },
    {
      "sha": "3b9d8da4f6185f04ea7c628449f5f79e8cd76318",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=482ddd69c5f026aac98932be2fa8ac985b37d5be",
      "patch": "@@ -1386,8 +1386,8 @@ extern void set_gdbarch_stap_adjust_register (struct gdbarch *gdbarch, gdbarch_s\n \n extern bool gdbarch_dtrace_parse_probe_argument_p (struct gdbarch *gdbarch);\n \n-typedef void (gdbarch_dtrace_parse_probe_argument_ftype) (struct gdbarch *gdbarch, struct expr_builder *builder, int narg);\n-extern void gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, struct expr_builder *builder, int narg);\n+typedef expr::operation_up (gdbarch_dtrace_parse_probe_argument_ftype) (struct gdbarch *gdbarch, int narg);\n+extern expr::operation_up gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, int narg);\n extern void set_gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, gdbarch_dtrace_parse_probe_argument_ftype *dtrace_parse_probe_argument);\n \n /* True if the given ADDR does not contain the instruction sequence"
    },
    {
      "sha": "d68d3b7a42577e276ac8df42afd1dfaa211237ba",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/482ddd69c5f026aac98932be2fa8ac985b37d5be/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=482ddd69c5f026aac98932be2fa8ac985b37d5be",
      "patch": "@@ -1025,7 +1025,7 @@ M;std::string;stap_adjust_register;struct stap_parse_info *p, const std::string\n \n # The expression to compute the NARTGth+1 argument to a DTrace USDT probe.\n # NARG must be >= 0.\n-M;void;dtrace_parse_probe_argument;struct expr_builder *builder, int narg;builder, narg\n+M;expr::operation_up;dtrace_parse_probe_argument;int narg;narg\n \n # True if the given ADDR does not contain the instruction sequence\n # corresponding to a disabled DTrace is-enabled probe."
    }
  ]
}