{
  "sha": "fbedd54644116109834c0e0546e6c32ae3c482f9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmJlZGQ1NDY0NDExNjEwOTgzNGMwZTA1NDZlNmMzMmFlM2M0ODJmOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-06T16:26:39Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-06T16:26:39Z"
    },
    "message": "Change section_is_p to a method on dwarf2_section_names\n\nThis replaces section_is_p with a method on dwarf2_section_names.\n\ngdb/ChangeLog\n2021-03-06  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/sect-names.h (struct dwarf2_section_names) <matches>: New\n\tmethod.\n\t* dwarf2/read.c (section_is_p): Remove.\n\t(dwarf2_per_bfd::locate_sections)\n\t(dwarf2_per_bfd::locate_sections, locate_dwz_sections)\n\t(locate_v1_virtual_dwo_sections, dwarf2_locate_dwo_sections)\n\t(dwarf2_locate_common_dwp_sections)\n\t(dwarf2_locate_v2_dwp_sections, dwarf2_locate_v5_dwp_sections):\n\tUpdate.",
    "tree": {
      "sha": "107ffc8f08893b768ce9091f32a0404a20fa20af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/107ffc8f08893b768ce9091f32a0404a20fa20af"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fbedd54644116109834c0e0546e6c32ae3c482f9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbedd54644116109834c0e0546e6c32ae3c482f9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fbedd54644116109834c0e0546e6c32ae3c482f9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbedd54644116109834c0e0546e6c32ae3c482f9/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c2a62a3d8833b824e8f0e36b6a03f348d7d1cd5a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2a62a3d8833b824e8f0e36b6a03f348d7d1cd5a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c2a62a3d8833b824e8f0e36b6a03f348d7d1cd5a"
    }
  ],
  "stats": {
    "total": 161,
    "additions": 82,
    "deletions": 79
  },
  "files": [
    {
      "sha": "9032dd60ff9adff421a2d020bb2e7b7e6a7212fb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbedd54644116109834c0e0546e6c32ae3c482f9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbedd54644116109834c0e0546e6c32ae3c482f9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fbedd54644116109834c0e0546e6c32ae3c482f9",
      "patch": "@@ -1,3 +1,15 @@\n+2021-03-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/sect-names.h (struct dwarf2_section_names) <matches>: New\n+\tmethod.\n+\t* dwarf2/read.c (section_is_p): Remove.\n+\t(dwarf2_per_bfd::locate_sections)\n+\t(dwarf2_per_bfd::locate_sections, locate_dwz_sections)\n+\t(locate_v1_virtual_dwo_sections, dwarf2_locate_dwo_sections)\n+\t(dwarf2_locate_common_dwp_sections)\n+\t(dwarf2_locate_v2_dwp_sections, dwarf2_locate_v5_dwp_sections):\n+\tUpdate.\n+\n 2021-03-06  Tom Tromey  <tom@tromey.com>\n \n \t* xcoffread.c: Include sect-names.h."
    },
    {
      "sha": "e9cd9293a468cf682006a06f24302b04ab78402e",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 63,
      "deletions": 79,
      "changes": 142,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbedd54644116109834c0e0546e6c32ae3c482f9/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbedd54644116109834c0e0546e6c32ae3c482f9/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=fbedd54644116109834c0e0546e6c32ae3c482f9",
      "patch": "@@ -1983,22 +1983,6 @@ dwarf2_has_info (struct objfile *objfile,\n \t  && per_objfile->per_bfd->abbrev.s.section != NULL);\n }\n \n-/* When loading sections, we look either for uncompressed section or for\n-   compressed section names.  */\n-\n-static int\n-section_is_p (const char *section_name,\n-\t      const struct dwarf2_section_names *names)\n-{\n-  if (names->normal != NULL\n-      && strcmp (section_name, names->normal) == 0)\n-    return 1;\n-  if (names->compressed != NULL\n-      && strcmp (section_name, names->compressed) == 0)\n-    return 1;\n-  return 0;\n-}\n-\n /* See declaration.  */\n \n void\n@@ -2019,82 +2003,82 @@ dwarf2_per_bfd::locate_sections (bfd *abfd, asection *sectp,\n \t       bfd_section_name (sectp), phex_nz (size, sizeof (size)),\n \t       bfd_get_filename (abfd));\n     }\n-  else if (section_is_p (sectp->name, &names.info))\n+  else if (names.info.matches (sectp->name))\n     {\n       this->info.s.section = sectp;\n       this->info.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.abbrev))\n+  else if (names.abbrev.matches (sectp->name))\n     {\n       this->abbrev.s.section = sectp;\n       this->abbrev.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.line))\n+  else if (names.line.matches (sectp->name))\n     {\n       this->line.s.section = sectp;\n       this->line.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.loc))\n+  else if (names.loc.matches (sectp->name))\n     {\n       this->loc.s.section = sectp;\n       this->loc.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.loclists))\n+  else if (names.loclists.matches (sectp->name))\n     {\n       this->loclists.s.section = sectp;\n       this->loclists.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.macinfo))\n+  else if (names.macinfo.matches (sectp->name))\n     {\n       this->macinfo.s.section = sectp;\n       this->macinfo.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.macro))\n+  else if (names.macro.matches (sectp->name))\n     {\n       this->macro.s.section = sectp;\n       this->macro.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.str))\n+  else if (names.str.matches (sectp->name))\n     {\n       this->str.s.section = sectp;\n       this->str.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.str_offsets))\n+  else if (names.str_offsets.matches (sectp->name))\n     {\n       this->str_offsets.s.section = sectp;\n       this->str_offsets.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.line_str))\n+  else if (names.line_str.matches (sectp->name))\n     {\n       this->line_str.s.section = sectp;\n       this->line_str.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.addr))\n+  else if (names.addr.matches (sectp->name))\n     {\n       this->addr.s.section = sectp;\n       this->addr.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.frame))\n+  else if (names.frame.matches (sectp->name))\n     {\n       this->frame.s.section = sectp;\n       this->frame.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.eh_frame))\n+  else if (names.eh_frame.matches (sectp->name))\n     {\n       this->eh_frame.s.section = sectp;\n       this->eh_frame.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.ranges))\n+  else if (names.ranges.matches (sectp->name))\n     {\n       this->ranges.s.section = sectp;\n       this->ranges.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.rnglists))\n+  else if (names.rnglists.matches (sectp->name))\n     {\n       this->rnglists.s.section = sectp;\n       this->rnglists.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.types))\n+  else if (names.types.matches (sectp->name))\n     {\n       struct dwarf2_section_info type_section;\n \n@@ -2104,17 +2088,17 @@ dwarf2_per_bfd::locate_sections (bfd *abfd, asection *sectp,\n \n       this->types.push_back (type_section);\n     }\n-  else if (section_is_p (sectp->name, &names.gdb_index))\n+  else if (names.gdb_index.matches (sectp->name))\n     {\n       this->gdb_index.s.section = sectp;\n       this->gdb_index.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.debug_names))\n+  else if (names.debug_names.matches (sectp->name))\n     {\n       this->debug_names.s.section = sectp;\n       this->debug_names.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names.debug_aranges))\n+  else if (names.debug_aranges.matches (sectp->name))\n     {\n       this->debug_aranges.s.section = sectp;\n       this->debug_aranges.size = bfd_section_size (sectp);\n@@ -2172,37 +2156,37 @@ locate_dwz_sections (bfd *abfd, asection *sectp, dwz_file *dwz_file)\n {\n   /* Note that we only support the standard ELF names, because .dwz\n      is ELF-only (at the time of writing).  */\n-  if (section_is_p (sectp->name, &dwarf2_elf_names.abbrev))\n+  if (dwarf2_elf_names.abbrev.matches (sectp->name))\n     {\n       dwz_file->abbrev.s.section = sectp;\n       dwz_file->abbrev.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &dwarf2_elf_names.info))\n+  else if (dwarf2_elf_names.info.matches (sectp->name))\n     {\n       dwz_file->info.s.section = sectp;\n       dwz_file->info.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &dwarf2_elf_names.str))\n+  else if (dwarf2_elf_names.str.matches (sectp->name))\n     {\n       dwz_file->str.s.section = sectp;\n       dwz_file->str.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &dwarf2_elf_names.line))\n+  else if (dwarf2_elf_names.line.matches (sectp->name))\n     {\n       dwz_file->line.s.section = sectp;\n       dwz_file->line.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &dwarf2_elf_names.macro))\n+  else if (dwarf2_elf_names.macro.matches (sectp->name))\n     {\n       dwz_file->macro.s.section = sectp;\n       dwz_file->macro.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &dwarf2_elf_names.gdb_index))\n+  else if (dwarf2_elf_names.gdb_index.matches (sectp->name))\n     {\n       dwz_file->gdb_index.s.section = sectp;\n       dwz_file->gdb_index.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &dwarf2_elf_names.debug_names))\n+  else if (dwarf2_elf_names.debug_names.matches (sectp->name))\n     {\n       dwz_file->debug_names.s.section = sectp;\n       dwz_file->debug_names.size = bfd_section_size (sectp);\n@@ -12105,56 +12089,56 @@ locate_v1_virtual_dwo_sections (asection *sectp,\n {\n   const struct dwop_section_names *names = &dwop_section_names;\n \n-  if (section_is_p (sectp->name, &names->abbrev_dwo))\n+  if (names->abbrev_dwo.matches (sectp->name))\n     {\n       /* There can be only one.  */\n       if (sections->abbrev.s.section != NULL)\n \treturn 0;\n       sections->abbrev.s.section = sectp;\n       sections->abbrev.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->info_dwo)\n-\t   || section_is_p (sectp->name, &names->types_dwo))\n+  else if (names->info_dwo.matches (sectp->name)\n+\t   || names->types_dwo.matches (sectp->name))\n     {\n       /* There can be only one.  */\n       if (sections->info_or_types.s.section != NULL)\n \treturn 0;\n       sections->info_or_types.s.section = sectp;\n       sections->info_or_types.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->line_dwo))\n+  else if (names->line_dwo.matches (sectp->name))\n     {\n       /* There can be only one.  */\n       if (sections->line.s.section != NULL)\n \treturn 0;\n       sections->line.s.section = sectp;\n       sections->line.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->loc_dwo))\n+  else if (names->loc_dwo.matches (sectp->name))\n     {\n       /* There can be only one.  */\n       if (sections->loc.s.section != NULL)\n \treturn 0;\n       sections->loc.s.section = sectp;\n       sections->loc.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->macinfo_dwo))\n+  else if (names->macinfo_dwo.matches (sectp->name))\n     {\n       /* There can be only one.  */\n       if (sections->macinfo.s.section != NULL)\n \treturn 0;\n       sections->macinfo.s.section = sectp;\n       sections->macinfo.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->macro_dwo))\n+  else if (names->macro_dwo.matches (sectp->name))\n     {\n       /* There can be only one.  */\n       if (sections->macro.s.section != NULL)\n \treturn 0;\n       sections->macro.s.section = sectp;\n       sections->macro.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->str_offsets_dwo))\n+  else if (names->str_offsets_dwo.matches (sectp->name))\n     {\n       /* There can be only one.  */\n       if (sections->str_offsets.s.section != NULL)\n@@ -12889,57 +12873,57 @@ dwarf2_locate_dwo_sections (bfd *abfd, asection *sectp,\n {\n   const struct dwop_section_names *names = &dwop_section_names;\n \n-  if (section_is_p (sectp->name, &names->abbrev_dwo))\n+  if (names->abbrev_dwo.matches (sectp->name))\n     {\n       dwo_sections->abbrev.s.section = sectp;\n       dwo_sections->abbrev.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->info_dwo))\n+  else if (names->info_dwo.matches (sectp->name))\n     {\n       dwo_sections->info.s.section = sectp;\n       dwo_sections->info.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->line_dwo))\n+  else if (names->line_dwo.matches (sectp->name))\n     {\n       dwo_sections->line.s.section = sectp;\n       dwo_sections->line.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->loc_dwo))\n+  else if (names->loc_dwo.matches (sectp->name))\n     {\n       dwo_sections->loc.s.section = sectp;\n       dwo_sections->loc.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->loclists_dwo))\n+  else if (names->loclists_dwo.matches (sectp->name))\n     {\n       dwo_sections->loclists.s.section = sectp;\n       dwo_sections->loclists.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->macinfo_dwo))\n+  else if (names->macinfo_dwo.matches (sectp->name))\n     {\n       dwo_sections->macinfo.s.section = sectp;\n       dwo_sections->macinfo.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->macro_dwo))\n+  else if (names->macro_dwo.matches (sectp->name))\n     {\n       dwo_sections->macro.s.section = sectp;\n       dwo_sections->macro.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->rnglists_dwo))\n+  else if (names->rnglists_dwo.matches (sectp->name))\n     {\n       dwo_sections->rnglists.s.section = sectp;\n       dwo_sections->rnglists.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->str_dwo))\n+  else if (names->str_dwo.matches (sectp->name))\n     {\n       dwo_sections->str.s.section = sectp;\n       dwo_sections->str.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->str_offsets_dwo))\n+  else if (names->str_offsets_dwo.matches (sectp->name))\n     {\n       dwo_sections->str_offsets.s.section = sectp;\n       dwo_sections->str_offsets.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->types_dwo))\n+  else if (names->types_dwo.matches (sectp->name))\n     {\n       struct dwarf2_section_info type_section;\n \n@@ -13014,17 +12998,17 @@ dwarf2_locate_common_dwp_sections (bfd *abfd, asection *sectp,\n   dwp_file->elf_sections[elf_section_nr] = sectp;\n \n   /* Look for specific sections that we need.  */\n-  if (section_is_p (sectp->name, &names->str_dwo))\n+  if (names->str_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.str.s.section = sectp;\n       dwp_file->sections.str.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->cu_index))\n+  else if (names->cu_index.matches (sectp->name))\n     {\n       dwp_file->sections.cu_index.s.section = sectp;\n       dwp_file->sections.cu_index.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->tu_index))\n+  else if (names->tu_index.matches (sectp->name))\n     {\n       dwp_file->sections.tu_index.s.section = sectp;\n       dwp_file->sections.tu_index.size = bfd_section_size (sectp);\n@@ -13049,42 +13033,42 @@ dwarf2_locate_v2_dwp_sections (bfd *abfd, asection *sectp, void *dwp_file_ptr)\n   dwp_file->elf_sections[elf_section_nr] = sectp;\n \n   /* Look for specific sections that we need.  */\n-  if (section_is_p (sectp->name, &names->abbrev_dwo))\n+  if (names->abbrev_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.abbrev.s.section = sectp;\n       dwp_file->sections.abbrev.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->info_dwo))\n+  else if (names->info_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.info.s.section = sectp;\n       dwp_file->sections.info.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->line_dwo))\n+  else if (names->line_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.line.s.section = sectp;\n       dwp_file->sections.line.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->loc_dwo))\n+  else if (names->loc_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.loc.s.section = sectp;\n       dwp_file->sections.loc.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->macinfo_dwo))\n+  else if (names->macinfo_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.macinfo.s.section = sectp;\n       dwp_file->sections.macinfo.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->macro_dwo))\n+  else if (names->macro_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.macro.s.section = sectp;\n       dwp_file->sections.macro.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->str_offsets_dwo))\n+  else if (names->str_offsets_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.str_offsets.s.section = sectp;\n       dwp_file->sections.str_offsets.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->types_dwo))\n+  else if (names->types_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.types.s.section = sectp;\n       dwp_file->sections.types.size = bfd_section_size (sectp);\n@@ -13109,37 +13093,37 @@ dwarf2_locate_v5_dwp_sections (bfd *abfd, asection *sectp, void *dwp_file_ptr)\n   dwp_file->elf_sections[elf_section_nr] = sectp;\n \n   /* Look for specific sections that we need.  */\n-  if (section_is_p (sectp->name, &names->abbrev_dwo))\n+  if (names->abbrev_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.abbrev.s.section = sectp;\n       dwp_file->sections.abbrev.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->info_dwo))\n+  else if (names->info_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.info.s.section = sectp;\n       dwp_file->sections.info.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->line_dwo))\n+  else if (names->line_dwo.matches (sectp->name))\n    {\n      dwp_file->sections.line.s.section = sectp;\n      dwp_file->sections.line.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->loclists_dwo))\n+  else if (names->loclists_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.loclists.s.section = sectp;\n       dwp_file->sections.loclists.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->macro_dwo))\n+  else if (names->macro_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.macro.s.section = sectp;\n       dwp_file->sections.macro.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->rnglists_dwo))\n+  else if (names->rnglists_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.rnglists.s.section = sectp;\n       dwp_file->sections.rnglists.size = bfd_section_size (sectp);\n     }\n-  else if (section_is_p (sectp->name, &names->str_offsets_dwo))\n+  else if (names->str_offsets_dwo.matches (sectp->name))\n     {\n       dwp_file->sections.str_offsets.s.section = sectp;\n       dwp_file->sections.str_offsets.size = bfd_section_size (sectp);"
    },
    {
      "sha": "b75328358c2ed5c3eef2d0a674758fe35c935bcf",
      "filename": "gdb/dwarf2/sect-names.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbedd54644116109834c0e0546e6c32ae3c482f9/gdb/dwarf2/sect-names.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbedd54644116109834c0e0546e6c32ae3c482f9/gdb/dwarf2/sect-names.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/sect-names.h?ref=fbedd54644116109834c0e0546e6c32ae3c482f9",
      "patch": "@@ -31,6 +31,13 @@\n struct dwarf2_section_names {\n   const char *normal;\n   const char *compressed;\n+\n+  /* Return true if NAME matches either of this section's names.  */\n+  bool matches (const char *name) const\n+  {\n+    return ((normal != nullptr && strcmp (name, normal) == 0)\n+\t    || (compressed != nullptr && strcmp (name, compressed) == 0));\n+  }\n };\n \n /* List of names for dward2 debugging sections.  Also most object file formats"
    }
  ]
}