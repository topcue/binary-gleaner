{
  "sha": "4cec0c66899aed1eff0c5ef844e9bf658ab2b2af",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGNlYzBjNjY4OTlhZWQxZWZmMGM1ZWY4NDRlOWJmNjU4YWIyYjJhZg==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2020-07-22T00:28:16Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2020-07-22T00:28:16Z"
    },
    "message": "Retire the now-unused gdbarch handle_segmentation_fault hook.\n\n\t* gdbarch.c: Regenerate.\n\t* gdbarch.h: Regenerate.\n\t* gdbarch.sh (handle_segmentation_fault): Remove method.\n\t* infrun.c (handle_segmentation_fault): Remove.\n\t(print_signal_received_reason): Remove call to\n\thandle_segmentation_fault.",
    "tree": {
      "sha": "fb51ce33b1511395c6d3864236e0ba5900f49766",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fb51ce33b1511395c6d3864236e0ba5900f49766"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0e42f66a30d06654b47147e885f35e56211bc3c2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e42f66a30d06654b47147e885f35e56211bc3c2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0e42f66a30d06654b47147e885f35e56211bc3c2"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 9,
    "deletions": 66
  },
  "files": [
    {
      "sha": "05e43901ae1a5f216f53dd28874986d72a17c66d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4cec0c66899aed1eff0c5ef844e9bf658ab2b2af",
      "patch": "@@ -1,3 +1,12 @@\n+2020-07-21  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* gdbarch.c: Regenerate.\n+\t* gdbarch.h: Regenerate.\n+\t* gdbarch.sh (handle_segmentation_fault): Remove method.\n+\t* infrun.c (handle_segmentation_fault): Remove.\n+\t(print_signal_received_reason): Remove call to\n+\thandle_segmentation_fault.\n+\n 2020-07-21  John Baldwin  <jhb@FreeBSD.org>\n \n \t* sparc64-linux-tdep.c (sparc64_linux_handle_segmentation_fault):"
    },
    {
      "sha": "fd5b0301ab031be837a68114d141990e9a18e42c",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 0,
      "deletions": 32,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=4cec0c66899aed1eff0c5ef844e9bf658ab2b2af",
      "patch": "@@ -191,7 +191,6 @@ struct gdbarch\n   int num_pseudo_regs;\n   gdbarch_ax_pseudo_register_collect_ftype *ax_pseudo_register_collect;\n   gdbarch_ax_pseudo_register_push_stack_ftype *ax_pseudo_register_push_stack;\n-  gdbarch_handle_segmentation_fault_ftype *handle_segmentation_fault;\n   gdbarch_report_signal_info_ftype *report_signal_info;\n   int sp_regnum;\n   int pc_regnum;\n@@ -556,7 +555,6 @@ verify_gdbarch (struct gdbarch *gdbarch)\n   /* Skip verify of num_pseudo_regs, invalid_p == 0 */\n   /* Skip verify of ax_pseudo_register_collect, has predicate.  */\n   /* Skip verify of ax_pseudo_register_push_stack, has predicate.  */\n-  /* Skip verify of handle_segmentation_fault, has predicate.  */\n   /* Skip verify of report_signal_info, has predicate.  */\n   /* Skip verify of sp_regnum, invalid_p == 0 */\n   /* Skip verify of pc_regnum, invalid_p == 0 */\n@@ -1088,12 +1086,6 @@ gdbarch_dump (struct gdbarch *gdbarch, struct ui_file *file)\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: half_format = %s\\n\",\n                       pformat (gdbarch->half_format));\n-  fprintf_unfiltered (file,\n-                      \"gdbarch_dump: gdbarch_handle_segmentation_fault_p() = %d\\n\",\n-                      gdbarch_handle_segmentation_fault_p (gdbarch));\n-  fprintf_unfiltered (file,\n-                      \"gdbarch_dump: handle_segmentation_fault = <%s>\\n\",\n-                      host_address_to_string (gdbarch->handle_segmentation_fault));\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: has_dos_based_file_system = %s\\n\",\n                       plongest (gdbarch->has_dos_based_file_system));\n@@ -2097,30 +2089,6 @@ set_gdbarch_ax_pseudo_register_push_stack (struct gdbarch *gdbarch,\n   gdbarch->ax_pseudo_register_push_stack = ax_pseudo_register_push_stack;\n }\n \n-int\n-gdbarch_handle_segmentation_fault_p (struct gdbarch *gdbarch)\n-{\n-  gdb_assert (gdbarch != NULL);\n-  return gdbarch->handle_segmentation_fault != NULL;\n-}\n-\n-void\n-gdbarch_handle_segmentation_fault (struct gdbarch *gdbarch, struct ui_out *uiout)\n-{\n-  gdb_assert (gdbarch != NULL);\n-  gdb_assert (gdbarch->handle_segmentation_fault != NULL);\n-  if (gdbarch_debug >= 2)\n-    fprintf_unfiltered (gdb_stdlog, \"gdbarch_handle_segmentation_fault called\\n\");\n-  gdbarch->handle_segmentation_fault (gdbarch, uiout);\n-}\n-\n-void\n-set_gdbarch_handle_segmentation_fault (struct gdbarch *gdbarch,\n-                                       gdbarch_handle_segmentation_fault_ftype handle_segmentation_fault)\n-{\n-  gdbarch->handle_segmentation_fault = handle_segmentation_fault;\n-}\n-\n int\n gdbarch_report_signal_info_p (struct gdbarch *gdbarch)\n {"
    },
    {
      "sha": "6c125d10aea77a17ff6e5323cce03990a458dbb4",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=4cec0c66899aed1eff0c5ef844e9bf658ab2b2af",
      "patch": "@@ -321,17 +321,6 @@ typedef int (gdbarch_ax_pseudo_register_push_stack_ftype) (struct gdbarch *gdbar\n extern int gdbarch_ax_pseudo_register_push_stack (struct gdbarch *gdbarch, struct agent_expr *ax, int reg);\n extern void set_gdbarch_ax_pseudo_register_push_stack (struct gdbarch *gdbarch, gdbarch_ax_pseudo_register_push_stack_ftype *ax_pseudo_register_push_stack);\n \n-/* Some targets/architectures can do extra processing/display of\n-   segmentation faults.  E.g., Intel MPX boundary faults.\n-   Call the architecture dependent function to handle the fault.\n-   UIOUT is the output stream where the handler will place information. */\n-\n-extern int gdbarch_handle_segmentation_fault_p (struct gdbarch *gdbarch);\n-\n-typedef void (gdbarch_handle_segmentation_fault_ftype) (struct gdbarch *gdbarch, struct ui_out *uiout);\n-extern void gdbarch_handle_segmentation_fault (struct gdbarch *gdbarch, struct ui_out *uiout);\n-extern void set_gdbarch_handle_segmentation_fault (struct gdbarch *gdbarch, gdbarch_handle_segmentation_fault_ftype *handle_segmentation_fault);\n-\n /* Some architectures can display additional information for specific\n    signals.\n    UIOUT is the output stream where the handler will place information. */"
    },
    {
      "sha": "5adfd29ad4d07eea52b5e13eec3429212dc2ebe3",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=4cec0c66899aed1eff0c5ef844e9bf658ab2b2af",
      "patch": "@@ -414,12 +414,6 @@ M;int;ax_pseudo_register_collect;struct agent_expr *ax, int reg;ax, reg\n # Return -1 if something goes wrong, 0 otherwise.\n M;int;ax_pseudo_register_push_stack;struct agent_expr *ax, int reg;ax, reg\n \n-# Some targets/architectures can do extra processing/display of\n-# segmentation faults.  E.g., Intel MPX boundary faults.\n-# Call the architecture dependent function to handle the fault.\n-# UIOUT is the output stream where the handler will place information.\n-M;void;handle_segmentation_fault;struct ui_out *uiout;uiout\n-\n # Some architectures can display additional information for specific\n # signals.\n # UIOUT is the output stream where the handler will place information."
    },
    {
      "sha": "ca850f81c43ba6f2ac34309a6feddc3d2d7a9acf",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 0,
      "deletions": 17,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4cec0c66899aed1eff0c5ef844e9bf658ab2b2af/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=4cec0c66899aed1eff0c5ef844e9bf658ab2b2af",
      "patch": "@@ -8243,20 +8243,6 @@ print_exited_reason (struct ui_out *uiout, int exitstatus)\n     }\n }\n \n-/* Some targets/architectures can do extra processing/display of\n-   segmentation faults.  E.g., Intel MPX boundary faults.\n-   Call the architecture dependent function to handle the fault.  */\n-\n-static void\n-handle_segmentation_fault (struct ui_out *uiout)\n-{\n-  struct regcache *regcache = get_current_regcache ();\n-  struct gdbarch *gdbarch = regcache->arch ();\n-\n-  if (gdbarch_handle_segmentation_fault_p (gdbarch))\n-    gdbarch_handle_segmentation_fault (gdbarch, uiout);\n-}\n-\n void\n print_signal_received_reason (struct ui_out *uiout, enum gdb_signal siggnal)\n {\n@@ -8304,9 +8290,6 @@ print_signal_received_reason (struct ui_out *uiout, enum gdb_signal siggnal)\n       if (gdbarch_report_signal_info_p (gdbarch))\n \tgdbarch_report_signal_info (gdbarch, uiout, siggnal);\n \n-      if (siggnal == GDB_SIGNAL_SEGV)\n-\thandle_segmentation_fault (uiout);\n-\n       annotate_signal_string_end ();\n     }\n   uiout->text (\".\\n\");"
    }
  ]
}