{
  "sha": "53cccef118b80913d76c0737108f6c32471cd09e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTNjY2NlZjExOGI4MDkxM2Q3NmMwNzM3MTA4ZjZjMzI0NzFjZDA5ZQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-01T19:33:06Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-01T19:33:06Z"
    },
    "message": "gdb/infrun: stop all threads if there exists a non-stop target\n\nStop all threads not only if the current target is non-stop, but also\nif there exists a non-stop target.\n\nThe multi-target patch (5b6d1e4fa4f \"Multi-target support\") made the\nfollowing change to gdb/inf-child.c:\n\nvoid\n inf_child_target::maybe_unpush_target ()\n {\n-  if (!inf_child_explicitly_opened && !have_inferiors ())\n+  if (!inf_child_explicitly_opened)\n     unpush_target (this);\n }\n\nIf we are in all-stop mode with multiple inferiors, and an exit event\nis received from an inferior, target_mourn_inferior() gets to this\npoint and without the have_inferiors() check, the target is unpushed.\nThis leads to having exec_ops as the top target.\n\nHere is a test scenario.  Two executables, ./a.out returns\nimmediately; ./sleepy just sleeps.\n\n  $ gdb ./sleepy\n  (gdb) start\n  ...\n  (gdb) add-inferior -exec ./a.out\n  ...\n  (gdb) inferior 2\n  [Switching to inferior 2..\n  (gdb) start\n  ...\n  (gdb) set schedule-multiple on\n  (gdb) set debug infrun 1\n  (gdb) continue\n\nAt this point, the exit event is received from ./a.out.  Normally,\nthis would lead to stop_all_threads() to also stop ./sleepy, but this\ndoesn't happen, because target_is_non_stop_p() returns false.  And it\nreturns false because the top target is no longer the process target;\nit is the exec_ops.\n\nThis patch modifies 'stop_waiting' to call 'stop_all_threads' if there\nexists a non-stop target, not just when the current top target is\nnon-stop.\n\nTested on X86_64 Linux.\n\ngdb/ChangeLog:\n2020-04-01  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* infrun.c (stop_all_threads): Update assertion, plus when\n\tstopping threads, take into account that we might be trying\n\tto stop an all-stop target.\n\t(stop_waiting): Call 'stop_all_threads' if there exists a\n\tnon-stop target.\n\ngdb/testsuite/ChangeLog:\n2020-04-01  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* gdb.multi/stop-all-on-exit.c: New test.\n\t* gdb.multi/stop-all-on-exit.exp: New file.",
    "tree": {
      "sha": "66f06bd80be81a4c93fda5ed54769bf87aca481a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/66f06bd80be81a4c93fda5ed54769bf87aca481a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/53cccef118b80913d76c0737108f6c32471cd09e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53cccef118b80913d76c0737108f6c32471cd09e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/53cccef118b80913d76c0737108f6c32471cd09e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53cccef118b80913d76c0737108f6c32471cd09e/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a0714d305fb78b3a2a74a2acd6d8c66da80a6387",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a0714d305fb78b3a2a74a2acd6d8c66da80a6387",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a0714d305fb78b3a2a74a2acd6d8c66da80a6387"
    }
  ],
  "stats": {
    "total": 122,
    "additions": 118,
    "deletions": 4
  },
  "files": [
    {
      "sha": "ef62216e0adb8425ea56d1585292c9fbe1125dca",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53cccef118b80913d76c0737108f6c32471cd09e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53cccef118b80913d76c0737108f6c32471cd09e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=53cccef118b80913d76c0737108f6c32471cd09e",
      "patch": "@@ -1,3 +1,11 @@\n+2020-04-01  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* infrun.c (stop_all_threads): Update assertion, plus when\n+\tstopping threads, take into account that we might be trying\n+\tto stop an all-stop target.\n+\t(stop_waiting): Call 'stop_all_threads' if there exists a\n+\tnon-stop target.\n+\n 2020-04-01  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* target.h (exists_non_stop_target): New function declaration."
    },
    {
      "sha": "8ff34c382d6397276abe99d186d18c40d7c3b549",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 14,
      "deletions": 4,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53cccef118b80913d76c0737108f6c32471cd09e/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53cccef118b80913d76c0737108f6c32471cd09e/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=53cccef118b80913d76c0737108f6c32471cd09e",
      "patch": "@@ -4711,7 +4711,7 @@ stop_all_threads (void)\n   int pass;\n   int iterations = 0;\n \n-  gdb_assert (target_is_non_stop_p ());\n+  gdb_assert (exists_non_stop_target ());\n \n   if (debug_infrun)\n     fprintf_unfiltered (gdb_stdlog, \"infrun: stop_all_threads\\n\");\n@@ -4742,6 +4742,17 @@ stop_all_threads (void)\n \t     to tell the target to stop.  */\n \t  for (thread_info *t : all_non_exited_threads ())\n \t    {\n+\t      /* For a single-target setting with an all-stop target,\n+\t\t we would not even arrive here.  For a multi-target\n+\t\t setting, until GDB is able to handle a mixture of\n+\t\t all-stop and non-stop targets, simply skip all-stop\n+\t\t targets' threads.  This should be fine due to the\n+\t\t protection of 'check_multi_target_resumption'.  */\n+\n+\t      switch_to_thread_no_regs (t);\n+\t      if (!target_is_non_stop_p ())\n+\t\tcontinue;\n+\n \t      if (t->executing)\n \t\t{\n \t\t  /* If already stopping, don't request a stop again.\n@@ -4753,7 +4764,6 @@ stop_all_threads (void)\n \t\t\t\t\t    \"infrun:   %s executing, \"\n \t\t\t\t\t    \"need stop\\n\",\n \t\t\t\t\t    target_pid_to_str (t->ptid).c_str ());\n-\t\t      switch_to_thread_no_regs (t);\n \t\t      target_stop (t->ptid);\n \t\t      t->stop_requested = 1;\n \t\t    }\n@@ -7894,9 +7904,9 @@ stop_waiting (struct execution_control_state *ecs)\n   /* Let callers know we don't want to wait for the inferior anymore.  */\n   ecs->wait_some_more = 0;\n \n-  /* If all-stop, but the target is always in non-stop mode, stop all\n+  /* If all-stop, but there exists a non-stop target, stop all\n      threads now that we're presenting the stop to the user.  */\n-  if (!non_stop && target_is_non_stop_p ())\n+  if (!non_stop && exists_non_stop_target ())\n     stop_all_threads ();\n }\n "
    },
    {
      "sha": "28d1bcfb1b09e1ea6b53c33bfa6542e77eafd210",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53cccef118b80913d76c0737108f6c32471cd09e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53cccef118b80913d76c0737108f6c32471cd09e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=53cccef118b80913d76c0737108f6c32471cd09e",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-01  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* gdb.multi/stop-all-on-exit.c: New test.\n+\t* gdb.multi/stop-all-on-exit.exp: New file.\n+\n 2020-04-01  Hannes Domani  <ssbssa@yahoo.de>\n \n \tPR gdb/24789"
    },
    {
      "sha": "bca0c98e0210b70dfe5e3702630ebc657535b8fa",
      "filename": "gdb/testsuite/gdb.multi/stop-all-on-exit.c",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53cccef118b80913d76c0737108f6c32471cd09e/gdb/testsuite/gdb.multi/stop-all-on-exit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53cccef118b80913d76c0737108f6c32471cd09e/gdb/testsuite/gdb.multi/stop-all-on-exit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/stop-all-on-exit.c?ref=53cccef118b80913d76c0737108f6c32471cd09e",
      "patch": "@@ -0,0 +1,27 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <unistd.h>\n+\n+static unsigned int duration = 1;\n+\n+int\n+main ()\n+{\n+  sleep (duration);\n+  return 0;\n+}"
    },
    {
      "sha": "61deb564e6aef44cd2363f7d0e18d19ee179c579",
      "filename": "gdb/testsuite/gdb.multi/stop-all-on-exit.exp",
      "status": "added",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53cccef118b80913d76c0737108f6c32471cd09e/gdb/testsuite/gdb.multi/stop-all-on-exit.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53cccef118b80913d76c0737108f6c32471cd09e/gdb/testsuite/gdb.multi/stop-all-on-exit.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/stop-all-on-exit.exp?ref=53cccef118b80913d76c0737108f6c32471cd09e",
      "patch": "@@ -0,0 +1,64 @@\n+# This testcase is part of GDB, the GNU debugger.\n+\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test that in all-stop mode with multiple inferiors, GDB stops all\n+# threads upon receiving an exit event from one of the inferiors.\n+\n+standard_testfile\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile]} {\n+    return -1\n+}\n+\n+if {![runto_main]} {\n+    fail \"starting inferior 1\"\n+    return -1\n+}\n+\n+# This is a test specific for a native target, where we use the\n+# \"-exec\" argument to \"add-inferior\" and we explicitly don't do\n+# \"maint set target-non-stop on\".\n+if {![gdb_is_target_native]} {\n+    untested \"the test is aimed at a native target\"\n+    return 0\n+}\n+\n+# Add a second inferior that will sleep longer.\n+gdb_test \"add-inferior -exec $binfile\" \"Added inferior 2.*\" \\\n+    \"add the second inferior\"\n+gdb_test \"inferior 2\" \".*Switching to inferior 2.*\"\n+if {![runto_main]} {\n+    fail \"starting inferior 2\"\n+    return -1\n+}\n+gdb_test \"print duration=10\" \"= 10\"\n+\n+# Now continue both processes.  We should get the exit event from the\n+# first inferior.\n+gdb_test_no_output \"set schedule-multiple on\"\n+gdb_continue_to_end\n+\n+# GDB is expected to have stopped the other inferior.  Switch to the\n+# slow inferior's thread.  It should not be running.\n+gdb_test_multiple \"thread 2.1\" \"check thread 2.1 is not running\" {\n+    -re \"\\\\(running\\\\)\\[\\r\\n\\]+$gdb_prompt\" {\n+\tfail $gdb_test_name\n+    }\n+    -re \"$gdb_prompt\" {\n+\tpass $gdb_test_name\n+    }\n+}"
    }
  ]
}