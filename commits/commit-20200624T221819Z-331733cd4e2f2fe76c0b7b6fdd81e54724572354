{
  "sha": "331733cd4e2f2fe76c0b7b6fdd81e54724572354",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzMxNzMzY2Q0ZTJmMmZlNzZjMGI3YjZmZGQ4MWU1NDcyNDU3MjM1NA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-24T22:18:19Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-24T22:18:19Z"
    },
    "message": "W/ Clang, compile C/C++ testcases with -Wno-unknown-warning-option\n\nSome C/C++ testcases unconditionally pass -Wno-foo as additional\noptions to disable some warning.  That is OK with GCC, because GCC\naccepts -Wno-foo silently even if it doesn't support -Wfoo.  This is a\nfeature which allows disabling warnings with newer compilers without\nbreaking builds with older compilers.  Clang however warns about\nunknown -Wno-foo by default, unless you pass\n-Wno-unknown-warning-option as well:\n\n $ gcc -Wno-foo test.c\n * nothing, compiles successfuly *\n\n $ clang -Wno-foo test.c\n warning: unknown warning option '-Wno-foo [-Wunknown-warning-option]\n\nThis commit adds -Wunknown-warning-option centrally in gdb_compile, so\nthat individual testcases don't have to worry about breaking older\nClangs.\n\nIOW, this avoids this problematic scenario:\n\n#1 - A testcase compiles successfully with Clang version X.\n#2 - Clang version \"X + 1\" adds a new warning, enabled by default,\n     which breaks the test.\n#3 - We add -Wno-newwarning to the testcase, fixing the testcase with\n     clang \"X + 1\".\n#4 - Now building the test with Clang version X no longer works, due\n     to \"unknown warning option\".\n\ngdb/testsuite/ChangeLog:\n2020-06-24  Pedro Alves  <palves@redhat.com>\n\n\t* lib/gdb.exp (gdb_compile): Update intro comment.  If C/C++ with\n\tClang, add \"-Wno-unknown-warning-option\" to the options.",
    "tree": {
      "sha": "4a86f24cb20610f3934dcac2409a1cd5a049b11e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4a86f24cb20610f3934dcac2409a1cd5a049b11e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/331733cd4e2f2fe76c0b7b6fdd81e54724572354",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/331733cd4e2f2fe76c0b7b6fdd81e54724572354",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/331733cd4e2f2fe76c0b7b6fdd81e54724572354",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/331733cd4e2f2fe76c0b7b6fdd81e54724572354/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a8654e7d784980cb4596f685964200fcc1164c78",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8654e7d784980cb4596f685964200fcc1164c78",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a8654e7d784980cb4596f685964200fcc1164c78"
    }
  ],
  "stats": {
    "total": 25,
    "additions": 24,
    "deletions": 1
  },
  "files": [
    {
      "sha": "6f4d99d39023c266377bec4ef6bbea74134ff517",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/331733cd4e2f2fe76c0b7b6fdd81e54724572354/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/331733cd4e2f2fe76c0b7b6fdd81e54724572354/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=331733cd4e2f2fe76c0b7b6fdd81e54724572354",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-24  Pedro Alves  <palves@redhat.com>\n+\n+\t* lib/gdb.exp (gdb_compile): Update intro comment.  If C/C++ with\n+\tClang, add \"-Wno-unknown-warning-option\" to the options.\n+\n 2020-06-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.xml/tdesc-reload.c: New file."
    },
    {
      "sha": "6b4f71be58822bac0ef87eb938c8fbc2d0c30694",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 19,
      "deletions": 1,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/331733cd4e2f2fe76c0b7b6fdd81e54724572354/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/331733cd4e2f2fe76c0b7b6fdd81e54724572354/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=331733cd4e2f2fe76c0b7b6fdd81e54724572354",
      "patch": "@@ -3826,7 +3826,8 @@ set gdb_saved_set_unbuffered_mode_obj \"\"\n #   - ldflags=flag: Add FLAG to the linker flags.\n #   - incdir=path: Add PATH to the searched include directories.\n #   - libdir=path: Add PATH to the linker searched directories.\n-#   - ada, c++, f77: Compile the file as Ada, C++ or Fortran.\n+#   - ada, c++, f77, f90, go, rust: Compile the file as Ada, C++,\n+#     Fortran 77, Fortran 90, Go or Rust.\n #   - debug: Build with debug information.\n #   - optimize: Build with optimization.\n \n@@ -3850,6 +3851,23 @@ proc gdb_compile {source dest type options} {\n \tset new_options [universal_compile_options]\n     }\n \n+    # Some C/C++ testcases unconditionally pass -Wno-foo as additional\n+    # options to disable some warning.  That is OK with GCC, because\n+    # by design, GCC accepts any -Wno-foo option, even if it doesn't\n+    # support -Wfoo.  Clang however warns about unknown -Wno-foo by\n+    # default, unless you pass -Wno-unknown-warning-option as well.\n+    # We do that here, so that individual testcases don't have to\n+    # worry about it.\n+    if {[lsearch -exact $options getting_compiler_info] == -1\n+\t&& [lsearch -exact $options rust] == -1\n+\t&& [lsearch -exact $options ada] == -1\n+\t&& [lsearch -exact $options f77] == -1\n+\t&& [lsearch -exact $options f90] == -1\n+\t&& [lsearch -exact $options go] == -1\n+\t&& [test_compiler_info \"clang-*\"]} {\n+\tlappend new_options \"additional_flags=-Wno-unknown-warning-option\"\n+    }\n+\n     # Place (and look for) Fortran `.mod` files in the output\n     # directory for this specific test.\n     if {[lsearch -exact $options f77] != -1 \\"
    }
  ]
}