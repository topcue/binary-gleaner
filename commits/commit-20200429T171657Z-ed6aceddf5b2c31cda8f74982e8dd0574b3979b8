{
  "sha": "ed6aceddf5b2c31cda8f74982e8dd0574b3979b8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWQ2YWNlZGRmNWIyYzMxY2RhOGY3NDk4MmU4ZGQwNTc0YjM5NzliOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-29T17:16:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-29T17:16:57Z"
    },
    "message": "Fix Ada crash with .debug_types\n\nPR ada/25875 concerns a gdb crash when gdb.ada/arr_enum_idx_w_gap.exp\nis run using the .debug_types board.\n\nThe problem turns out to be caused by weird compiler output.  In this\ntest, the compiler emits a top-level type that refers to an\nenumeration type which is nested in a function.  However, this\nfunction is just a declaration.\n\nThis results in gdb calling read_enumeration_type for the enum type,\nbut process_enumeration_scope is never called, yielding an enum with\nno fields.  This causes the crash.\n\nThis patch fixes the problem by arranging to create the enum fields in\nread_enumeration_type.\n\nTested on x86-64 Fedora 30.\n\ngdb/ChangeLog\n2020-04-29  Tom Tromey  <tromey@adacore.com>\n\n\tPR ada/25875:\n\t* dwarf2/read.c (update_enumeration_type_from_children): Compute\n\ttype fields here.\n\t(read_enumeration_type): Call\n\tupdate_enumeration_type_from_children later.  Update comments.\n\t(process_enumeration_scope): Don't create type fields.",
    "tree": {
      "sha": "8b550d0c1b9131604fc5149406b5d973f01ec30f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8b550d0c1b9131604fc5149406b5d973f01ec30f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ed6aceddf5b2c31cda8f74982e8dd0574b3979b8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed6aceddf5b2c31cda8f74982e8dd0574b3979b8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ed6aceddf5b2c31cda8f74982e8dd0574b3979b8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed6aceddf5b2c31cda8f74982e8dd0574b3979b8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b68b1b58d687584f7177678146e4c7def22e9699",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b68b1b58d687584f7177678146e4c7def22e9699",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b68b1b58d687584f7177678146e4c7def22e9699"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 36,
    "deletions": 34
  },
  "files": [
    {
      "sha": "bbe50bfe550711e47fa18b6003bedbac1cddf7b9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed6aceddf5b2c31cda8f74982e8dd0574b3979b8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed6aceddf5b2c31cda8f74982e8dd0574b3979b8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ed6aceddf5b2c31cda8f74982e8dd0574b3979b8",
      "patch": "@@ -1,3 +1,12 @@\n+2020-04-29  Tom Tromey  <tromey@adacore.com>\n+\n+\tPR ada/25875:\n+\t* dwarf2/read.c (update_enumeration_type_from_children): Compute\n+\ttype fields here.\n+\t(read_enumeration_type): Call\n+\tupdate_enumeration_type_from_children later.  Update comments.\n+\t(process_enumeration_scope): Don't create type fields.\n+\n 2020-04-29  Kamil Rytarowski  <n54@gmx.com>\n \n \t* nbsd-tdep.c: Include \"xml-syscall.h\"."
    },
    {
      "sha": "1813085d0d7a0bfe34a23b86287e1deef0a9e611",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 27,
      "deletions": 34,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed6aceddf5b2c31cda8f74982e8dd0574b3979b8/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed6aceddf5b2c31cda8f74982e8dd0574b3979b8/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=ed6aceddf5b2c31cda8f74982e8dd0574b3979b8",
      "patch": "@@ -15790,8 +15790,9 @@ process_structure_scope (struct die_info *die, struct dwarf2_cu *cu)\n     }\n }\n \n-/* Assuming DIE is an enumeration type, and TYPE is its associated type,\n-   update TYPE using some information only available in DIE's children.  */\n+/* Assuming DIE is an enumeration type, and TYPE is its associated\n+   type, update TYPE using some information only available in DIE's\n+   children.  In particular, the fields are computed.  */\n \n static void\n update_enumeration_type_from_children (struct die_info *die,\n@@ -15803,6 +15804,7 @@ update_enumeration_type_from_children (struct die_info *die,\n   int flag_enum = 1;\n \n   auto_obstack obstack;\n+  std::vector<struct field> fields;\n \n   for (child_die = die->child;\n        child_die != NULL && child_die->tag;\n@@ -15838,10 +15840,19 @@ update_enumeration_type_from_children (struct die_info *die,\n \t    flag_enum = 0;\n \t}\n \n-      /* If we already know that the enum type is neither unsigned, nor\n-\t a flag type, no need to look at the rest of the enumerates.  */\n-      if (!unsigned_enum && !flag_enum)\n-\tbreak;\n+      fields.emplace_back ();\n+      struct field &field = fields.back ();\n+      FIELD_NAME (field) = dwarf2_physname (name, child_die, cu);\n+      SET_FIELD_ENUMVAL (field, value);\n+    }\n+\n+  if (!fields.empty ())\n+    {\n+      TYPE_NFIELDS (type) = fields.size ();\n+      TYPE_FIELDS (type) = (struct field *)\n+\tTYPE_ALLOC (type, sizeof (struct field) * fields.size ());\n+      memcpy (TYPE_FIELDS (type), fields.data (),\n+\t      sizeof (struct field) * fields.size ());\n     }\n \n   if (unsigned_enum)\n@@ -15909,11 +15920,6 @@ read_enumeration_type (struct die_info *die, struct dwarf2_cu *cu)\n   if (die_is_declaration (die, cu))\n     TYPE_STUB (type) = 1;\n \n-  /* Finish the creation of this type by using the enum's children.\n-     We must call this even when the underlying type has been provided\n-     so that we can determine if we're looking at a \"flag\" enum.  */\n-  update_enumeration_type_from_children (die, type, cu);\n-\n   /* If this type has an underlying type that is not a stub, then we\n      may use its attributes.  We always use the \"unsigned\" attribute\n      in this situation, because ordinarily we guess whether the type\n@@ -15935,7 +15941,15 @@ read_enumeration_type (struct die_info *die, struct dwarf2_cu *cu)\n \n   TYPE_DECLARED_CLASS (type) = dwarf2_flag_true_p (die, DW_AT_enum_class, cu);\n \n-  return set_die_type (die, type, cu);\n+  set_die_type (die, type, cu);\n+\n+  /* Finish the creation of this type by using the enum's children.\n+     Note that, as usual, this must come after set_die_type to avoid\n+     infinite recursion when trying to compute the names of the\n+     enumerators.  */\n+  update_enumeration_type_from_children (die, type, cu);\n+\n+  return type;\n }\n \n /* Given a pointer to a die which begins an enumeration, process all\n@@ -15956,8 +15970,6 @@ process_enumeration_scope (struct die_info *die, struct dwarf2_cu *cu)\n   if (die->child != NULL)\n     {\n       struct die_info *child_die;\n-      struct symbol *sym;\n-      std::vector<struct field> fields;\n       const char *name;\n \n       child_die = die->child;\n@@ -15971,30 +15983,11 @@ process_enumeration_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t    {\n \t      name = dwarf2_name (child_die, cu);\n \t      if (name)\n-\t\t{\n-\t\t  sym = new_symbol (child_die, this_type, cu);\n-\n-\t\t  fields.emplace_back ();\n-\t\t  struct field &field = fields.back ();\n-\n-\t\t  FIELD_NAME (field) = sym->linkage_name ();\n-\t\t  FIELD_TYPE (field) = NULL;\n-\t\t  SET_FIELD_ENUMVAL (field, SYMBOL_VALUE (sym));\n-\t\t  FIELD_BITSIZE (field) = 0;\n-\t\t}\n+\t\tnew_symbol (child_die, this_type, cu);\n \t    }\n \n \t  child_die = child_die->sibling;\n \t}\n-\n-      if (!fields.empty ())\n-\t{\n-\t  TYPE_NFIELDS (this_type) = fields.size ();\n-\t  TYPE_FIELDS (this_type) = (struct field *)\n-\t    TYPE_ALLOC (this_type, sizeof (struct field) * fields.size ());\n-\t  memcpy (TYPE_FIELDS (this_type), fields.data (),\n-\t\t  sizeof (struct field) * fields.size ());\n-\t}\n     }\n \n   /* If we are reading an enum from a .debug_types unit, and the enum"
    }
  ]
}