{
  "sha": "91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTFlN2NlMmZkN2I4MmYzOTgyYjQ1M2QxYzZmNDU3NjYyMWJjMWMyZA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-05T13:25:56Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-05T14:53:39Z"
    },
    "message": "libctf, ld: more dumper improvements\n\nDump more details about the types found in data object and function info\nsections (the type ID and recursive info on the type itself, but not on\nits members).  Before now, this was being dumped for entries in the\nvariable section, but not for the closely-related function info and data\nobject sections, which is inconsistent and makes finding the\ncorresponding types in the type section unnecessarily hard.  (This also\ngets rid of code in which bugs have already been found in favour of the\nsame code everything else in the dumper uses to dump types.)\n\nWhile we're doing that, change the recursive type dumper in question to\nrecursively dump info on arrays' element type, just as we do for all\ntypes that reference other types. (Arrays are not a kind of reference\ntype in libctf, but perhaps we should change that in future and make\nctf_type_reference return the element type.)\n\nld/ChangeLog\n2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* testsuite/ld-ctf/array.d: Adjust for dumper changes.\n\t* testsuite/ld-ctf/data-func-conflicted.d: Likewise.\n\t* testsuite/ld-ctf/diag-cttname-null.d: Likewise.\n\t* testsuite/ld-ctf/diag-cuname.d: Likewise.\n\t* testsuite/ld-ctf/diag-parlabel.d: Likewise.\n\t* testsuite/ld-ctf/function.d: Likewise.\n\t* testsuite/ld-ctf/slice.d: Likewise.\n\nlibctf/ChangeLog\n2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-dump.c (ctf_dump_objts): Dump by calling ctf_dump_format_type.\n\t(ctf_dump_format_type): Don't emit the size for function objects.\n\tDump the element type of arrays like we dump the pointed-to type of\n\tpointers, etc.",
    "tree": {
      "sha": "62dcc9d77cb96f81c943367fec427b5c550639c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/62dcc9d77cb96f81c943367fec427b5c550639c9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "57f97d0e6dd4dfbb54f2f39c5e59d5860040d0b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/57f97d0e6dd4dfbb54f2f39c5e59d5860040d0b6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/57f97d0e6dd4dfbb54f2f39c5e59d5860040d0b6"
    }
  ],
  "stats": {
    "total": 125,
    "additions": 69,
    "deletions": 56
  },
  "files": [
    {
      "sha": "a130c6c06d26cfc36159c06e79d19a982f3cb6ca",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "patch": "@@ -1,3 +1,13 @@\n+2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* testsuite/ld-ctf/array.d: Adjust for dumper changes.\n+\t* testsuite/ld-ctf/data-func-conflicted.d: Likewise.\n+\t* testsuite/ld-ctf/diag-cttname-null.d: Likewise.\n+\t* testsuite/ld-ctf/diag-cuname.d: Likewise.\n+\t* testsuite/ld-ctf/diag-parlabel.d: Likewise.\n+\t* testsuite/ld-ctf/function.d: Likewise.\n+\t* testsuite/ld-ctf/slice.d: Likewise.\n+\n 2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* testsuite/ld-ctf/array.d: Adjust for dumper changes."
    },
    {
      "sha": "6c3915a7cf8f97a44e4b501ab6ff3a38424f6494",
      "filename": "ld/testsuite/ld-ctf/array.d",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/array.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/array.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/array.d?ref=91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "patch": "@@ -20,8 +20,8 @@ Contents of CTF section .ctf:\n   Labels:\n \n   Data objects:\n-    digits -> int \\[10\\]\n-    digits_names -> char \\*\\[10\\]\n+    digits -> 0x[0-9a-f]*: int \\[10\\] .*\n+    digits_names -> 0x[0-9a-f]*: char \\*\\[10\\] .*\n \n   Function objects:\n "
    },
    {
      "sha": "e51bb763af125fcd4609d7c8068420ac75ae9a24",
      "filename": "ld/testsuite/ld-ctf/data-func-conflicted.d",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/data-func-conflicted.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/data-func-conflicted.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/data-func-conflicted.d?ref=91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "patch": "@@ -20,12 +20,12 @@ Contents of CTF section \\.ctf:\n     String section:\t.*\n #...\n   Data objects:\n-    bar -> struct var_3\n-    var_1 -> foo_t\n-    var_666 -> foo_t \\*\n+    bar -> 0x[0-9a-f]*: struct var_3 \\(size 0x[0-9a-f]*\\)\n+    var_1 -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n+    var_666 -> 0x[0-9a-f]*: foo_t \\* \\(size 0x[0-9a-f]*\\) -> .*\n \n   Function objects:\n-    func_[0-9]* -> void \\*\\(\\*\\) \\(const char \\*restrict, int \\(\\*\\)\\(\\*\\) \\(const char \\*\\)\\)\n+    func_[0-9]* -> 0x[0-9a-f]*: void \\*\\(\\*\\) \\(const char \\*restrict, int \\(\\*\\)\\(\\*\\) \\(const char \\*\\)\\)\n #...\n   Types:\n #...\n@@ -46,13 +46,13 @@ CTF archive member: .*/data-func-1\\.c:\n   Labels:\n \n   Data objects:\n-    var_[0-9]* -> foo_t\n-    var_[0-9]* -> foo_t\n-    var_[0-9]* -> foo_t\n-    var_[0-9]* -> foo_t\n-    var_[0-9]* -> foo_t\n-    var_[0-9]* -> foo_t\n-    var_[0-9]* -> foo_t\n+    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n+    var_[0-9]* -> 0x[0-9a-f]*: foo_t \\(size 0x[0-9a-f]*\\) -> .*\n #...\n   Function objects:\n "
    },
    {
      "sha": "86a7fd12da6f0e9312fcd77ae755fc241b2135f1",
      "filename": "ld/testsuite/ld-ctf/diag-cttname-null.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/diag-cttname-null.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/diag-cttname-null.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/diag-cttname-null.d?ref=91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "patch": "@@ -13,7 +13,7 @@ Contents of CTF section .ctf:\n     Version: 4 \\(CTF_VERSION_3\\)\n #...\n   Data objects:\n-    a -> struct \n+    a -> 0x[0-9a-f]*: struct  \\(size 0x[0-9a-f]*\\)\n #...\n   Types:\n #..."
    },
    {
      "sha": "20624fd8b7b94ea02811cd497deebac4841fc824",
      "filename": "ld/testsuite/ld-ctf/diag-cuname.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/diag-cuname.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/diag-cuname.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/diag-cuname.d?ref=91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "patch": "@@ -21,7 +21,7 @@ Contents of CTF section .ctf:\n   Labels:\n \n   Data objects:\n-    a -> struct A\n+    a -> 0x[0-9a-f]*: struct A \\(size 0x[0-9a-f]*\\)\n #...\n   Function objects:\n "
    },
    {
      "sha": "5ad58706b0e996f16a586e12065a86e1b9901652",
      "filename": "ld/testsuite/ld-ctf/diag-parlabel.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/diag-parlabel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/diag-parlabel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/diag-parlabel.d?ref=91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "patch": "@@ -20,7 +20,7 @@ Contents of CTF section .ctf:\n   Labels:\n \n   Data objects:\n-    a -> struct A\n+    a -> 0x[0-9a-f]*: struct A \\(size 0x[0-9a-f]*\\)\n #...\n   Function objects:\n "
    },
    {
      "sha": "9bf26a48928e4a3089ebd7c82146db8bf0e43d05",
      "filename": "ld/testsuite/ld-ctf/function.d",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/function.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/function.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/function.d?ref=91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "patch": "@@ -18,10 +18,10 @@ Contents of CTF section .ctf:\n     String section:\t.*\n #...\n   Function objects:\n-    foo -> int \\(\\*\\) \\(char, int, float, void \\*, void \\(\\*\\)\\(\\*\\) \\(int\\)\\)\n+    foo -> 0x[0-9a-f]*: int \\(\\*\\) \\(char, int, float, void \\*, void \\(\\*\\)\\(\\*\\) \\(int\\)\\)\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: int \\(\\*\\) \\(char, int, float, void \\*, void \\(\\*\\)\\(\\*\\) \\(int\\)\\) \\(size 0x0\\)\n+     0x[0-9a-f]*: int \\(\\*\\) \\(char, int, float, void \\*, void \\(\\*\\)\\(\\*\\) \\(int\\)\\)\n            *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 5\\) int \\(\\*\\) \\(char, int[0-9]*, float, void \\*, void \\(\\*\\)\\(\\*\\) \\(int\\)\\) \\(aligned at 0x[0-9a-f]*\\)\n #..."
    },
    {
      "sha": "3967a2db537a42f1487723fc53604f19848c776c",
      "filename": "ld/testsuite/ld-ctf/slice.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/slice.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/ld/testsuite/ld-ctf/slice.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/slice.d?ref=91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "patch": "@@ -19,7 +19,7 @@ Contents of CTF section .ctf:\n     String section:\t.*\n #...\n   Data objects:\n-    slices -> struct slices\n+    slices -> 0x[0-9a-f]*: struct slices \\(size 0x[0-9a-f]*\\)\n #...\n   Types:\n #..."
    },
    {
      "sha": "80f05e90ff6920e6c98068dcfc12e7e7243488de",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "patch": "@@ -1,3 +1,10 @@\n+2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-dump.c (ctf_dump_objts): Dump by calling ctf_dump_format_type.\n+\t(ctf_dump_format_type): Don't emit the size for function objects.\n+\tDump the element type of arrays like we dump the pointed-to type of\n+\tpointers, etc.\n+\n 2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-dump.c (ctf_dump_format_type): Add 0x to hex type IDs."
    },
    {
      "sha": "f01f225d4326e4100e93e1c1b07117e453dbd3fa",
      "filename": "libctf/ctf-dump.c",
      "status": "modified",
      "additions": 33,
      "deletions": 37,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/libctf/ctf-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d/libctf/ctf-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dump.c?ref=91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "patch": "@@ -93,6 +93,8 @@ ctf_dump_format_type (ctf_dict_t *fp, ctf_id_t id, int flag)\n   do\n     {\n       ctf_encoding_t enc;\n+      ctf_arinfo_t ar;\n+      int kind, unsliced_kind;\n       const char *nonroot_leader = \"\";\n       const char *nonroot_trailer = \"\";\n \n@@ -123,43 +125,53 @@ ctf_dump_format_type (ctf_dict_t *fp, ctf_id_t id, int flag)\n       bit = NULL;\n \n       if (buf[0] != '\\0')\n-\t{\n-\t  str = str_append (str, buf);\n-\t  str = str_append (str, \" \");\n-\t}\n+\tstr = str_append (str, buf);\n \n       free (buf);\n       buf = NULL;\n+      unsliced_kind = ctf_type_kind_unsliced (fp, id);\n+      kind = ctf_type_kind (fp, id);\n \n       /* Slices get a different print representation.  */\n-      if (ctf_type_kind_unsliced (fp, id) == CTF_K_SLICE)\n+      if (unsliced_kind == CTF_K_SLICE)\n \t{\n \t  ctf_type_encoding (fp, id, &enc);\n-\t  if (asprintf (&bit, \"[slice 0x%x:0x%x] \",\n+\t  if (asprintf (&bit, \" [slice 0x%x:0x%x]\",\n \t\t\tenc.cte_offset, enc.cte_bits) < 0)\n \t    goto oom;\n \t}\n-      else if (ctf_type_kind (fp, id) == CTF_K_INTEGER)\n+      else if (kind == CTF_K_INTEGER)\n \t{\n \t  ctf_type_encoding (fp, id, &enc);\n-\t  if (asprintf (&bit, \"[0x%x:0x%x] \",\n+\t  if (asprintf (&bit, \" [0x%x:0x%x]\",\n \t\t\tenc.cte_offset, enc.cte_bits) < 0)\n \t    goto oom;\n \t}\n       str = str_append (str, bit);\n       free (bit);\n       bit = NULL;\n \n-      if (asprintf (&bit, \"(size 0x%lx)%s\",\n-\t\t    (unsigned long) ctf_type_size (fp, id),\n-\t\t    nonroot_trailer) < 0)\n-\tgoto oom;\n+      if (kind != CTF_K_FUNCTION)\n+\tif (asprintf (&bit, \" (size 0x%lx)%s\",\n+\t\t      (unsigned long) ctf_type_size (fp, id),\n+\t\t      nonroot_trailer) < 0)\n+\t  goto oom;\n \n       str = str_append (str, bit);\n       free (bit);\n       bit = NULL;\n \n-      new_id = ctf_type_reference (fp, id);\n+      /* Keep going as long as this type references another.  We consider arrays\n+\t to \"reference\" their element type. */\n+\n+      if (kind == CTF_K_ARRAY)\n+\t{\n+\t  if (ctf_array_info (fp, id, &ar) < 0)\n+\t    goto err;\n+\t  new_id = ar.ctr_contents;\n+\t}\n+      else\n+\tnew_id = ctf_type_reference (fp, id);\n       if (new_id != CTF_ERR)\n \tstr = str_append (str, \" ->\");\n     } while (new_id != CTF_ERR);\n@@ -383,49 +395,33 @@ ctf_dump_objts (ctf_dict_t *fp, ctf_dump_state_t *state, int functions)\n   while ((id = ctf_symbol_next (fp, &i, &name, functions)) != CTF_ERR)\n     {\n       char *typestr = NULL;\n-      int err = 0;\n \n-      /* Emit the name, if we know it.  */\n+      /* Emit the name, if we know it.  No trailing space: ctf_dump_format_type\n+\t has a leading one.   */\n       if (name)\n \t{\n-\t  if (asprintf (&str, \"%s -> \", name) < 0)\n+\t  if (asprintf (&str, \"%s ->\", name) < 0)\n \t    goto oom;\n \t}\n       else\n \tstr = xstrdup (\"\");\n \n-      if ((typestr = ctf_type_aname (fp, id)) == NULL)\n+      if ((typestr = ctf_dump_format_type (state->cds_fp, id,\n+\t\t\t\t\t   CTF_ADD_ROOT)) == NULL)\n \t{\n-\t  if (id == 0 || ctf_errno (fp) == ECTF_NONREPRESENTABLE)\n-\t    {\n-\t      if (asprintf (&typestr, \" (%s)\", _(\"type not represented in CTF\")) < 0)\n-\t\tgoto oom;\n-\n-\t      goto out;\n-\t    }\n-\n-\t  if (asprintf (&typestr, _(\"error: %s\"), ctf_errmsg (ctf_errno (fp))) < 0)\n-\t    goto oom;\n-\n-\t  err = -1;\n-\t  goto out;\n+\t  ctf_dump_append (state, str);\n+\t  continue;\t\t\t\t/* Swallow the error.  */\n \t}\n \n       str = str_append (str, typestr);\n-      str = str_append (str, \"\\n\");\n+      free (typestr);\n       ctf_dump_append (state, str);\n       continue;\n \n     oom:\n       ctf_set_errno (fp, ENOMEM);\n       ctf_next_destroy (i);\n       return -1;\n-    out:\n-      str = str_append (str, typestr);\n-      free (typestr);\n-      ctf_dump_append (state, str);\n-      ctf_next_destroy (i);\n-      return err;\t\t\t\t/* errno is set for us.  */\n     }\n   return 0;\n }"
    }
  ]
}