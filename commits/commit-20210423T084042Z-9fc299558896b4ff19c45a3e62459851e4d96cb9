{
  "sha": "9fc299558896b4ff19c45a3e62459851e4d96cb9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWZjMjk5NTU4ODk2YjRmZjE5YzQ1YTNlNjI0NTk4NTFlNGQ5NmNiOQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-19T12:14:41Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-23T08:40:42Z"
    },
    "message": "gdb: remove some caching from the dwarf reader\n\nWhile working on some changes to 'info sources' I ran into a situation\nwhere I was seeing the same source files reported twice in the output\nof the 'info sources' command when using either .gdb_index or the\n.debug_name index.\n\nI traced the problem back to some caching in\ndwarf2_base_index_functions::map_symbol_filenames; when called GDB\ncaches the set of filenames, but, filesnames are not removed as the\nindex entries are expanded into full symtabs.  As a result we can end\nup seeing filenames reported both from a full symtab _and_ from\na (stale) previously cached index entry.\n\nNow, obviously, when seeing a problem like this the \"correct\" fix is\nto remove the stale entries from the cache, however, I ran a few\nexperiments to see why this wasn't really hitting us anywhere, and, as\nfar as I can tell, ::map_symbol_filenames is only called from three\nplaces:\n\n  1. The mi command -file-list-exec-source-files,\n  2. The 'info sources' command, and\n  3. Filename completion\n\nHowever, the result of this \"bug\" is that we will see duplicate\nfilenames, and readline's completion mechanism already removes\nduplicates, so for case #3 we will never see any problems.\n\nCases #1 and #2 are basically the same, and in each case, to see a\nproblem we need to ensure we craft the test in a particular way, start\nup ensuring we have some unexpected symtabs, then run one of the\ncommands to populate the cache, then expand one of the symtabs, and\nlist the sources again.  At this point you'll see duplicate entries in\nthe results.  Hardly surprising we haven't randomly hit this situation\nin testing.\n\nSo, considering that use cases #1 and #2 are certainly not \"high\nperformance\" code (i.e. I don't think these justify the need for\ncaching) this leaves use case #3.  Does this use justify the need for\ncaching?  Well the psymbol_functions::map_symbol_filenames function\ndoesn't seem to do any extra caching, and within\ndwarf2_base_index_functions::map_symbol_filenames, the only expensive\nbit appears to be the call to dw2_get_file_names, and this already\ndoes its own caching via this_cu->v.quick->file_names.\n\nThe upshot of all this analysis was that I'm not convinced the need\nfor the additional caching is justified, and so, I propose that to fix\nthe bug in GDB, I just remove the extra caching (for now).\n\nIf we later find that the caching _was_ useful, then we can\nreintroduce it, but add it back such that it doesn't reintroduce this\nbug.\n\nAs I was changing dwarf2_base_index_functions::map_symbol_filenames I\nreplaced the use of htab_up with std::unordered_set.\n\nTested using target_boards cc-with-debug-names and dwarf4-gdb-index.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c: Add 'unordered_set' include.\n\t(dwarf2_base_index_functions::map_symbol_filenames): Replace\n\t'visited' hash table with 'qfn_cache' unordered_set.  Remove use\n\tof per_Bfd->filenames_cache cache, and use function local\n\tfilenames_cache instead.  Reindent.\n\t* dwarf2/read.h (struct dwarf2_per_bfd) <filenames_cache>: Delete.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/info_sources.exp: Add new tests.",
    "tree": {
      "sha": "0af699b88a9261fbec735e25b2e59038f7fa36a9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0af699b88a9261fbec735e25b2e59038f7fa36a9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9fc299558896b4ff19c45a3e62459851e4d96cb9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9fc299558896b4ff19c45a3e62459851e4d96cb9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9fc299558896b4ff19c45a3e62459851e4d96cb9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9fc299558896b4ff19c45a3e62459851e4d96cb9/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c21346c5e224ace15a3ba8b7f56cd375e30e29a8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c21346c5e224ace15a3ba8b7f56cd375e30e29a8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c21346c5e224ace15a3ba8b7f56cd375e30e29a8"
    }
  ],
  "stats": {
    "total": 105,
    "additions": 53,
    "deletions": 52
  },
  "files": [
    {
      "sha": "5013d730f35cef58903a3aae2d70bfa5a8d05af6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9fc299558896b4ff19c45a3e62459851e4d96cb9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9fc299558896b4ff19c45a3e62459851e4d96cb9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9fc299558896b4ff19c45a3e62459851e4d96cb9",
      "patch": "@@ -1,3 +1,12 @@\n+2021-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* dwarf2/read.c: Add 'unordered_set' include.\n+\t(dwarf2_base_index_functions::map_symbol_filenames): Replace\n+\t'visited' hash table with 'qfn_cache' unordered_set.  Remove use\n+\tof per_Bfd->filenames_cache cache, and use function local\n+\tfilenames_cache instead.  Reindent.\n+\t* dwarf2/read.h (struct dwarf2_per_bfd) <filenames_cache>: Delete.\n+\n 2021-04-22  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* breakpoint.c (iterate_over_bp_locations): Change callback to"
    },
    {
      "sha": "306971ef1b75aea0fc965d890a1de742183ec8d1",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 29,
      "deletions": 42,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9fc299558896b4ff19c45a3e62459851e4d96cb9/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9fc299558896b4ff19c45a3e62459851e4d96cb9/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=9fc299558896b4ff19c45a3e62459851e4d96cb9",
      "patch": "@@ -88,6 +88,7 @@\n #include \"rust-lang.h\"\n #include \"gdbsupport/pathstuff.h\"\n #include \"count-one-bits.h\"\n+#include <unordered_set>\n \n /* When == 1, print basic high level tracing messages.\n    When > 1, be more verbose.\n@@ -4713,58 +4714,44 @@ dwarf2_base_index_functions::map_symbol_filenames\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n \n-  if (!per_objfile->per_bfd->filenames_cache)\n-    {\n-      per_objfile->per_bfd->filenames_cache.emplace ();\n-\n-      htab_up visited (htab_create_alloc (10,\n-\t\t\t\t\t  htab_hash_pointer, htab_eq_pointer,\n-\t\t\t\t\t  NULL, xcalloc, xfree));\n+  /* Use caches to ensure we only call FUN once for each filename.  */\n+  filename_seen_cache filenames_cache;\n+  std::unordered_set<quick_file_names *> qfn_cache;\n \n-      /* The rule is CUs specify all the files, including those used\n-\t by any TU, so there's no need to scan TUs here.  We can\n-\t ignore file names coming from already-expanded CUs.  */\n+  /* The rule is CUs specify all the files, including those used by any TU,\n+     so there's no need to scan TUs here.  We can ignore file names coming\n+     from already-expanded CUs.  It is possible that an expanded CU might\n+     reuse the file names data from a currently unexpanded CU, in this\n+     case we don't want to report the files from the unexpanded CU.  */\n \n-      for (dwarf2_per_cu_data *per_cu : per_objfile->per_bfd->all_comp_units)\n+  for (dwarf2_per_cu_data *per_cu : per_objfile->per_bfd->all_comp_units)\n+    {\n+      if (per_objfile->symtab_set_p (per_cu))\n \t{\n-\t  if (per_objfile->symtab_set_p (per_cu))\n-\t    {\n-\t      void **slot = htab_find_slot (visited.get (),\n-\t\t\t\t\t    per_cu->v.quick->file_names,\n-\t\t\t\t\t    INSERT);\n-\n-\t      *slot = per_cu->v.quick->file_names;\n-\t    }\n+\t  if (per_cu->v.quick->file_names != nullptr)\n+\t    qfn_cache.insert (per_cu->v.quick->file_names);\n \t}\n+    }\n \n-      for (dwarf2_per_cu_data *per_cu : per_objfile->per_bfd->all_comp_units)\n-\t{\n-\t  /* We only need to look at symtabs not already expanded.  */\n-\t  if (per_objfile->symtab_set_p (per_cu))\n-\t    continue;\n-\n-\t  quick_file_names *file_data\n-\t    = dw2_get_file_names (per_cu, per_objfile);\n-\t  if (file_data == NULL)\n-\t    continue;\n+  for (dwarf2_per_cu_data *per_cu : per_objfile->per_bfd->all_comp_units)\n+    {\n+      /* We only need to look at symtabs not already expanded.  */\n+      if (per_objfile->symtab_set_p (per_cu))\n+\tcontinue;\n \n-\t  void **slot = htab_find_slot (visited.get (), file_data, INSERT);\n-\t  if (*slot)\n-\t    {\n-\t      /* Already visited.  */\n-\t      continue;\n-\t    }\n-\t  *slot = file_data;\n+      quick_file_names *file_data = dw2_get_file_names (per_cu, per_objfile);\n+      if (file_data == nullptr\n+\t  || qfn_cache.find (file_data) != qfn_cache.end ())\n+\tcontinue;\n \n-\t  for (int j = 0; j < file_data->num_file_names; ++j)\n-\t    {\n-\t      const char *filename = file_data->file_names[j];\n-\t      per_objfile->per_bfd->filenames_cache->seen (filename);\n-\t    }\n+      for (int j = 0; j < file_data->num_file_names; ++j)\n+\t{\n+\t  const char *filename = file_data->file_names[j];\n+\t  filenames_cache.seen (filename);\n \t}\n     }\n \n-  per_objfile->per_bfd->filenames_cache->traverse ([&] (const char *filename)\n+  filenames_cache.traverse ([&] (const char *filename)\n     {\n       gdb::unique_xmalloc_ptr<char> this_real_name;\n "
    },
    {
      "sha": "dc25ff16f517d60687f682b1e89ea93ad55186f6",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9fc299558896b4ff19c45a3e62459851e4d96cb9/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9fc299558896b4ff19c45a3e62459851e4d96cb9/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=9fc299558896b4ff19c45a3e62459851e4d96cb9",
      "patch": "@@ -235,10 +235,6 @@ struct dwarf2_per_bfd\n   /* The CUs we recently read.  */\n   std::vector<dwarf2_per_cu_data *> just_read_cus;\n \n-  /* Table containing all filenames.  This is an optional because the\n-     table is lazily constructed on first access.  */\n-  gdb::optional<filename_seen_cache> filenames_cache;\n-\n   /* If we loaded the index from an external file, this contains the\n      resources associated to the open file, memory mapping, etc.  */\n   std::unique_ptr<index_cache_resource> index_cache_res;"
    },
    {
      "sha": "73f95b9a719d4fb430731ffc238729690a96e537",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9fc299558896b4ff19c45a3e62459851e4d96cb9/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9fc299558896b4ff19c45a3e62459851e4d96cb9/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=9fc299558896b4ff19c45a3e62459851e4d96cb9",
      "patch": "@@ -1,3 +1,7 @@\n+2021-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.base/info_sources.exp: Add new tests.\n+\n 2021-04-22  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.base/ptype-offsets.cc (struct empty_member): New."
    },
    {
      "sha": "a4f7d1966e665907623945de221d31165d3cb3aa",
      "filename": "gdb/testsuite/gdb.base/info_sources.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9fc299558896b4ff19c45a3e62459851e4d96cb9/gdb/testsuite/gdb.base/info_sources.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9fc299558896b4ff19c45a3e62459851e4d96cb9/gdb/testsuite/gdb.base/info_sources.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/info_sources.exp?ref=9fc299558896b4ff19c45a3e62459851e4d96cb9",
      "patch": "@@ -28,18 +28,18 @@ if {[prepare_for_testing $testfile.exp $testfile \\\n # in the output.  Similarly, EXPECT_SEEN_INFO_SOURCES_BASE indicates that the source file\n # info_sources_base.c must be seen in the output.\n proc test_info_sources {args expect_seen_info_sources expect_seen_info_sources_base} {\n-    global gdb_prompt\n+    global gdb_prompt srcfile srcfile2\n \n     set seen_info_sources 0\n     set seen_info_sources_base 0\n     set cmd [concat \"info sources \" $args]\n     gdb_test_multiple $cmd $cmd {\n-\t-re \"^\\[^,\\]*info_sources.c(, |\\[\\r\\n\\]+)\" {\n-\t    set seen_info_sources 1\n+\t-re \"^\\[^,\\]*${srcfile}(, |\\[\\r\\n\\]+)\" {\n+\t    incr seen_info_sources\n \t    exp_continue\n \t}\n-\t-re \"^\\[^,\\]*info_sources_base.c(, |\\[\\r\\n\\]+)\" {\n-\t    set seen_info_sources_base 1\n+\t-re \"^\\[^,\\]*${srcfile2}(, |\\[\\r\\n\\]+)\" {\n+\t    incr seen_info_sources_base 1\n \t    exp_continue\n \t}\n \t-re \", \" {\n@@ -60,8 +60,13 @@ if ![runto_main] {\n     untested $testfile.exp\n     return -1\n }\n-gdb_test \"break some_other_func\" \"\"\n \n+# List both files with no regexp:\n+with_test_prefix \"in main\" {\n+    test_info_sources \"\" 1 1\n+}\n+\n+gdb_test \"break some_other_func\" \"\"\n gdb_test \"continue\"\n \n # List both files with no regexp:"
    }
  ]
}