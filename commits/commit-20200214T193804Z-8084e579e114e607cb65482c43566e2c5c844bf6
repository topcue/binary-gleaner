{
  "sha": "8084e579e114e607cb65482c43566e2c5c844bf6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODA4NGU1NzllMTE0ZTYwN2NiNjU0ODJjNDM1NjZlMmM1Yzg0NGJmNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-02-14T16:24:42Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-02-14T19:38:04Z"
    },
    "message": "Return unique_xmalloc_ptr from call_site_find_chain\n\ncall_site_find_chain returns a pointer that the caller must\ndeallocate.  It seemed better here to return a unique_xmalloc_ptr\ninstead.\n\ngdb/ChangeLog\n2020-02-14  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2/frame-tailcall.c (dwarf2_tailcall_sniffer_first):\n\tUpdate.\n\t* dwarf2/loc.h (call_site_find_chain): Return unique_xmalloc_ptr.\n\t* dwarf2/loc.c (call_site_find_chain_1): Return\n\tunique_xmalloc_ptr.\n\t(call_site_find_chain): Likewise.",
    "tree": {
      "sha": "c0edbce2fa66e260c02c6d50cc8e9a41a8e7448a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c0edbce2fa66e260c02c6d50cc8e9a41a8e7448a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8084e579e114e607cb65482c43566e2c5c844bf6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8084e579e114e607cb65482c43566e2c5c844bf6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8084e579e114e607cb65482c43566e2c5c844bf6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8084e579e114e607cb65482c43566e2c5c844bf6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "07d9838745fa0fcd4e4a92a090bdc467ff12cf0a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/07d9838745fa0fcd4e4a92a090bdc467ff12cf0a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/07d9838745fa0fcd4e4a92a090bdc467ff12cf0a"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 22,
    "deletions": 19
  },
  "files": [
    {
      "sha": "0999ae237515af3f0f2a1ee44803f3d866ccc32c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8084e579e114e607cb65482c43566e2c5c844bf6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8084e579e114e607cb65482c43566e2c5c844bf6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8084e579e114e607cb65482c43566e2c5c844bf6",
      "patch": "@@ -1,3 +1,12 @@\n+2020-02-14  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2/frame-tailcall.c (dwarf2_tailcall_sniffer_first):\n+\tUpdate.\n+\t* dwarf2/loc.h (call_site_find_chain): Return unique_xmalloc_ptr.\n+\t* dwarf2/loc.c (call_site_find_chain_1): Return\n+\tunique_xmalloc_ptr.\n+\t(call_site_find_chain): Likewise.\n+\n 2020-02-14  Richard Biener  <rguenther@suse.de>\n \n \t* dwarf2/read.c (lnp_state_machine::handle_special_opcode): Apply CSE"
    },
    {
      "sha": "2d219f13f9dddabd7b247de214b3e3a600202e99",
      "filename": "gdb/dwarf2/frame-tailcall.c",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8084e579e114e607cb65482c43566e2c5c844bf6/gdb/dwarf2/frame-tailcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8084e579e114e607cb65482c43566e2c5c844bf6/gdb/dwarf2/frame-tailcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame-tailcall.c?ref=8084e579e114e607cb65482c43566e2c5c844bf6",
      "patch": "@@ -368,7 +368,7 @@ dwarf2_tailcall_sniffer_first (struct frame_info *this_frame,\n   int prev_sp_p = 0;\n   CORE_ADDR this_pc;\n   struct gdbarch *prev_gdbarch;\n-  struct call_site_chain *chain = NULL;\n+  gdb::unique_xmalloc_ptr<call_site_chain> chain;\n   struct tailcall_cache *cache;\n \n   gdb_assert (*tailcall_cachep == NULL);\n@@ -409,16 +409,13 @@ dwarf2_tailcall_sniffer_first (struct frame_info *this_frame,\n \n   /* Ambiguous unwind or unambiguous unwind verified as matching.  */\n   if (chain == NULL || chain->length == 0)\n-    {\n-      xfree (chain);\n-      return;\n-    }\n+    return;\n \n   cache = cache_new_ref1 (this_frame);\n   *tailcall_cachep = cache;\n-  cache->chain = chain;\n+  cache->chain = chain.release ();\n   cache->prev_pc = prev_pc;\n-  cache->chain_levels = pretended_chain_levels (chain);\n+  cache->chain_levels = pretended_chain_levels (cache->chain);\n   cache->prev_sp_p = prev_sp_p;\n   if (cache->prev_sp_p)\n     {"
    },
    {
      "sha": "a9523e9f7ee400a4505443ad489cacba8dc976fa",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8084e579e114e607cb65482c43566e2c5c844bf6/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8084e579e114e607cb65482c43566e2c5c844bf6/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=8084e579e114e607cb65482c43566e2c5c844bf6",
      "patch": "@@ -1091,11 +1091,10 @@ chain_candidate (struct gdbarch *gdbarch,\n /* Create and return call_site_chain for CALLER_PC and CALLEE_PC.  All the\n    assumed frames between them use GDBARCH.  Use depth first search so we can\n    keep single CHAIN of call_site's back to CALLER_PC.  Function recursion\n-   would have needless GDB stack overhead.  Caller is responsible for xfree of\n-   the returned result.  Any unreliability results in thrown\n-   NO_ENTRY_VALUE_ERROR.  */\n+   would have needless GDB stack overhead.  Any unreliability results\n+   in thrown NO_ENTRY_VALUE_ERROR.  */\n \n-static struct call_site_chain *\n+static gdb::unique_xmalloc_ptr<call_site_chain>\n call_site_find_chain_1 (struct gdbarch *gdbarch, CORE_ADDR caller_pc,\n \t\t\tCORE_ADDR callee_pc)\n {\n@@ -1210,19 +1209,18 @@ call_site_find_chain_1 (struct gdbarch *gdbarch, CORE_ADDR caller_pc,\n \t\t   paddress (gdbarch, callee_pc));\n     }\n \n-  return retval.release ();\n+  return retval;\n }\n \n /* Create and return call_site_chain for CALLER_PC and CALLEE_PC.  All the\n    assumed frames between them use GDBARCH.  If valid call_site_chain cannot be\n-   constructed return NULL.  Caller is responsible for xfree of the returned\n-   result.  */\n+   constructed return NULL.  */\n \n-struct call_site_chain *\n+gdb::unique_xmalloc_ptr<call_site_chain>\n call_site_find_chain (struct gdbarch *gdbarch, CORE_ADDR caller_pc,\n \t\t      CORE_ADDR callee_pc)\n {\n-  struct call_site_chain *retval = NULL;\n+  gdb::unique_xmalloc_ptr<call_site_chain> retval;\n \n   try\n     {"
    },
    {
      "sha": "8fff663ebf9cd85a21997e36f7b5e1e859e2a29d",
      "filename": "gdb/dwarf2/loc.h",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8084e579e114e607cb65482c43566e2c5c844bf6/gdb/dwarf2/loc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8084e579e114e607cb65482c43566e2c5c844bf6/gdb/dwarf2/loc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.h?ref=8084e579e114e607cb65482c43566e2c5c844bf6",
      "patch": "@@ -277,9 +277,8 @@ struct call_site_chain\n   };\n \n struct call_site_stuff;\n-extern struct call_site_chain *call_site_find_chain (struct gdbarch *gdbarch,\n-\t\t\t\t\t\t     CORE_ADDR caller_pc,\n-\t\t\t\t\t\t     CORE_ADDR callee_pc);\n+extern gdb::unique_xmalloc_ptr<call_site_chain> call_site_find_chain\n+  (struct gdbarch *gdbarch, CORE_ADDR caller_pc, CORE_ADDR callee_pc);\n \n /* A helper function to convert a DWARF register to an arch register.\n    ARCH is the architecture."
    }
  ]
}