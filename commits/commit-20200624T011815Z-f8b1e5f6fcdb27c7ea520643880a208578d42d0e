{
  "sha": "f8b1e5f6fcdb27c7ea520643880a208578d42d0e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjhiMWU1ZjZmY2RiMjdjN2VhNTIwNjQzODgwYTIwODU3OGQ0MmQwZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-24T00:54:32Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-24T01:18:15Z"
    },
    "message": "ubsan: alpha-vms: shift exponent 536874240 is too large\n\nC_OPR_ASH is supposed to be an arithmetic shift.  By the look of it,\nthis operator implemented logical shifts since the original binutils\nsupport was added.  This patch corrects that and avoids some nonsense\nubsan complaints.  I chose to implement infinite precision shifts\nrather than masking shift counts to the word size as the spec I had is\nsilent on what is supposed to happen with overlarge shift counts.\n\n\t* vms-alpha.c (_bfd_vms_slurp_etir <ETIR__C_OPR_ASH>): Implement\n\tshifts without undefined behaviour.",
    "tree": {
      "sha": "429b4a7bb209434c48541f9744761370ba3de3de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/429b4a7bb209434c48541f9744761370ba3de3de"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f8b1e5f6fcdb27c7ea520643880a208578d42d0e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8b1e5f6fcdb27c7ea520643880a208578d42d0e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f8b1e5f6fcdb27c7ea520643880a208578d42d0e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8b1e5f6fcdb27c7ea520643880a208578d42d0e/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d5722d3be21d05f8735da36bfa3d03f8bad06079",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d5722d3be21d05f8735da36bfa3d03f8bad06079",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d5722d3be21d05f8735da36bfa3d03f8bad06079"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 30,
    "deletions": 4
  },
  "files": [
    {
      "sha": "9c202b27fc0635008510c6160158794bb8106f0e",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8b1e5f6fcdb27c7ea520643880a208578d42d0e/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8b1e5f6fcdb27c7ea520643880a208578d42d0e/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=f8b1e5f6fcdb27c7ea520643880a208578d42d0e",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* vms-alpha.c (_bfd_vms_slurp_etir <ETIR__C_OPR_ASH>): Implement\n+\tshifts without undefined behaviour.\n+\n 2020-06-23  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* elf-bfd.h (elf_link_hash_table): Add dt_pltgot_required and"
    },
    {
      "sha": "5bf32d67803e38830d321a812b37ab9578c6999f",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 25,
      "deletions": 4,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f8b1e5f6fcdb27c7ea520643880a208578d42d0e/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f8b1e5f6fcdb27c7ea520643880a208578d42d0e/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=f8b1e5f6fcdb27c7ea520643880a208578d42d0e",
      "patch": "@@ -34,6 +34,7 @@\n */\n \n #include \"sysdep.h\"\n+#include <limits.h>\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n #include \"libbfd.h\"\n@@ -71,6 +72,9 @@\n \f\n \n #define MIN(a,b) ((a) < (b) ? (a) : (b))\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n+#endif\n \n /* The r_type field in a reloc is one of the following values.  */\n #define ALPHA_R_IGNORE\t\t0\n@@ -2520,10 +2524,27 @@ _bfd_vms_slurp_etir (bfd *abfd, struct bfd_link_info *info)\n \t\t\t\t  _bfd_vms_etir_name (cmd));\n \t      return FALSE;\n \t    }\n-\t  if ((int)op2 < 0)\t\t/* Shift right.  */\n-\t    op1 >>= -(int)op2;\n-\t  else\t\t\t/* Shift left.  */\n-\t    op1 <<= (int)op2;\n+\t  if ((bfd_signed_vma) op2 < 0)\n+\t    {\n+\t      /* Shift right.  */\n+\t      bfd_vma sign;\n+\t      op2 = -op2;\n+\t      if (op2 >= CHAR_BIT * sizeof (op1))\n+\t\top2 = CHAR_BIT * sizeof (op1) - 1;\n+\t      /* op1 = (bfd_signed_vma) op1 >> op2; */\n+\t      sign = op1 & ((bfd_vma) 1 << (CHAR_BIT * sizeof (op1) - 1));\n+\t      op1 >>= op2;\n+\t      sign >>= op2;\n+\t      op1 = (op1 ^ sign) - sign;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Shift left.  */\n+\t      if (op2 >= CHAR_BIT * sizeof (op1))\n+\t\top1 = 0;\n+\t      else\n+\t\top1 <<= op2;\n+\t    }\n \t  if (!_bfd_vms_push (abfd, op1, RELC_NONE)) /* FIXME: sym.  */\n \t    return FALSE;\n \t  break;"
    }
  ]
}