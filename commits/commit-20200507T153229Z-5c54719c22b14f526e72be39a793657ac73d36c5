{
  "sha": "5c54719c22b14f526e72be39a793657ac73d36c5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWM1NDcxOWMyMmIxNGY1MjZlNzJiZTM5YTc5MzY1N2FjNzNkMzZjNQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-07T15:17:33Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-07T15:32:29Z"
    },
    "message": "gdb: make add_dyn_prop a method of struct type\n\nMove add_dyn_prop, currently a free function, to be a method of struct\ntype.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <add_dyn_prop>: New method.\n\t(add_dyn_prop): Remove.  Update all users to use\n\ttype::add_dyn_prop.\n\t* gdbtypes.c (add_dyn_prop): Rename to...\n\t(type::add_dyn_prop): ... this.",
    "tree": {
      "sha": "339567d0f226aa8d56b356d606dec359be1c86e6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/339567d0f226aa8d56b356d606dec359be1c86e6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5c54719c22b14f526e72be39a793657ac73d36c5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c54719c22b14f526e72be39a793657ac73d36c5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5c54719c22b14f526e72be39a793657ac73d36c5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c54719c22b14f526e72be39a793657ac73d36c5/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24e99c6c3c78e38a9919c9f8e8b831713f8303a3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/24e99c6c3c78e38a9919c9f8e8b831713f8303a3"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 26,
    "deletions": 21
  },
  "files": [
    {
      "sha": "857897f8f88ed1a81f7b997bc18f1f900f62d78e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c54719c22b14f526e72be39a793657ac73d36c5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c54719c22b14f526e72be39a793657ac73d36c5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5c54719c22b14f526e72be39a793657ac73d36c5",
      "patch": "@@ -1,3 +1,11 @@\n+2020-05-07  Simon Marchi via Gdb-patches  <gdb-patches@sourceware.org>\n+\n+\t* gdbtypes.h (struct type) <add_dyn_prop>: New method.\n+\t(add_dyn_prop): Remove.  Update all users to use\n+\ttype::add_dyn_prop.\n+\t* gdbtypes.c (add_dyn_prop): Rename to...\n+\t(type::add_dyn_prop): ... this.\n+\n 2020-05-07  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <get_dyn_prop>: New method."
    },
    {
      "sha": "ac208991ff775f00a8e6060961adcd89c1c3a55d",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c54719c22b14f526e72be39a793657ac73d36c5/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c54719c22b14f526e72be39a793657ac73d36c5/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=5c54719c22b14f526e72be39a793657ac73d36c5",
      "patch": "@@ -9218,7 +9218,7 @@ alloc_rust_variant (struct obstack *obstack, struct type *type,\n   prop.kind = PROP_VARIANT_PARTS;\n   prop.data.variant_parts = prop_value;\n \n-  add_dyn_prop (DYN_PROP_VARIANT_PARTS, prop, type);\n+  type->add_dyn_prop (DYN_PROP_VARIANT_PARTS, prop);\n }\n \n /* Some versions of rustc emitted enums in an unusual way.\n@@ -14706,7 +14706,7 @@ add_variant_property (struct field_info *fip, struct type *type,\n     = ((gdb::array_view<variant_part> *)\n        obstack_copy (&objfile->objfile_obstack, &parts, sizeof (parts)));\n \n-  add_dyn_prop (DYN_PROP_VARIANT_PARTS, prop, type);\n+  type->add_dyn_prop (DYN_PROP_VARIANT_PARTS, prop);\n }\n \n /* Create the vector of fields, and attach it to the type.  */\n@@ -15355,7 +15355,7 @@ read_structure_type (struct die_info *die, struct dwarf2_cu *cu)\n \t  struct dynamic_prop prop;\n \t  if (attr_to_dynamic_prop (attr, die, cu, &prop,\n \t\t\t\t    cu->per_cu->addr_type ()))\n-\t    add_dyn_prop (DYN_PROP_BYTE_SIZE, prop, type);\n+\t    type->add_dyn_prop (DYN_PROP_BYTE_SIZE, prop);\n           TYPE_LENGTH (type) = 0;\n \t}\n     }\n@@ -23605,7 +23605,7 @@ set_die_type (struct die_info *die, struct type *type, struct dwarf2_cu *cu)\n     {\n       struct type *prop_type = cu->per_cu->addr_sized_int_type (false);\n       if (attr_to_dynamic_prop (attr, die, cu, &prop, prop_type))\n-        add_dyn_prop (DYN_PROP_ALLOCATED, prop, type);\n+        type->add_dyn_prop (DYN_PROP_ALLOCATED, prop);\n     }\n   else if (attr != NULL)\n     {\n@@ -23620,7 +23620,7 @@ set_die_type (struct die_info *die, struct type *type, struct dwarf2_cu *cu)\n     {\n       struct type *prop_type = cu->per_cu->addr_sized_int_type (false);\n       if (attr_to_dynamic_prop (attr, die, cu, &prop, prop_type))\n-        add_dyn_prop (DYN_PROP_ASSOCIATED, prop, type);\n+        type->add_dyn_prop (DYN_PROP_ASSOCIATED, prop);\n     }\n   else if (attr != NULL)\n     {\n@@ -23633,7 +23633,7 @@ set_die_type (struct die_info *die, struct type *type, struct dwarf2_cu *cu)\n   attr = dwarf2_attr (die, DW_AT_data_location, cu);\n   if (attr_to_dynamic_prop (attr, die, cu, &prop,\n \t\t\t    cu->per_cu->addr_type ()))\n-    add_dyn_prop (DYN_PROP_DATA_LOCATION, prop, type);\n+    type->add_dyn_prop (DYN_PROP_DATA_LOCATION, prop);\n \n   if (dwarf2_per_objfile->die_type_hash == NULL)\n     dwarf2_per_objfile->die_type_hash"
    },
    {
      "sha": "1444351c518f03c1f1700bf25ab1d37064221eb6",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c54719c22b14f526e72be39a793657ac73d36c5/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c54719c22b14f526e72be39a793657ac73d36c5/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=5c54719c22b14f526e72be39a793657ac73d36c5",
      "patch": "@@ -1286,7 +1286,7 @@ create_array_type_with_stride (struct type *result_type,\n     (struct field *) TYPE_ZALLOC (result_type, sizeof (struct field));\n   TYPE_INDEX_TYPE (result_type) = range_type;\n   if (byte_stride_prop != NULL)\n-    add_dyn_prop (DYN_PROP_BYTE_STRIDE, *byte_stride_prop, result_type);\n+    result_type->add_dyn_prop (DYN_PROP_BYTE_STRIDE, *byte_stride_prop);\n   else if (bit_stride > 0)\n     TYPE_FIELD_BITSIZE (result_type, 0) = bit_stride;\n \n@@ -2668,20 +2668,19 @@ type::dyn_prop (dynamic_prop_node_kind prop_kind) const\n /* See gdbtypes.h  */\n \n void\n-add_dyn_prop (enum dynamic_prop_node_kind prop_kind, struct dynamic_prop prop,\n-              struct type *type)\n+type::add_dyn_prop (dynamic_prop_node_kind prop_kind, dynamic_prop prop)\n {\n   struct dynamic_prop_list *temp;\n \n-  gdb_assert (TYPE_OBJFILE_OWNED (type));\n+  gdb_assert (TYPE_OBJFILE_OWNED (this));\n \n-  temp = XOBNEW (&TYPE_OBJFILE (type)->objfile_obstack,\n+  temp = XOBNEW (&TYPE_OBJFILE (this)->objfile_obstack,\n \t\t struct dynamic_prop_list);\n   temp->prop_kind = prop_kind;\n   temp->prop = prop;\n-  temp->next = TYPE_DYN_PROP_LIST (type);\n+  temp->next = TYPE_DYN_PROP_LIST (this);\n \n-  TYPE_DYN_PROP_LIST (type) = temp;\n+  TYPE_DYN_PROP_LIST (this) = temp;\n }\n \n /* Remove dynamic property from TYPE in case it exists.  */"
    },
    {
      "sha": "ef991f3c8daf20ea975019e73d1bebdc8c9596e1",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5c54719c22b14f526e72be39a793657ac73d36c5/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5c54719c22b14f526e72be39a793657ac73d36c5/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=5c54719c22b14f526e72be39a793657ac73d36c5",
      "patch": "@@ -878,6 +878,12 @@ struct type\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;\n \n+  /* * Given a dynamic property PROP of a given KIND, add this dynamic\n+     property to this type.\n+\n+     This function assumes that this type is objfile-owned.  */\n+  void add_dyn_prop (dynamic_prop_node_kind kind, dynamic_prop prop);\n+\n   /* * Type that is a pointer to this type.\n      NULL if no such pointer-to type is known yet.\n      The debugger may add the address of such a type\n@@ -2097,14 +2103,6 @@ extern struct type *resolve_dynamic_type\n /* * Predicate if the type has dynamic values, which are not resolved yet.  */\n extern int is_dynamic_type (struct type *type);\n \n-/* * Given a dynamic property PROP of a given KIND, add this dynamic\n-   property to the given TYPE.\n-\n-   This function assumes that TYPE is objfile-owned.  */\n-extern void add_dyn_prop\n-  (enum dynamic_prop_node_kind kind, struct dynamic_prop prop,\n-   struct type *type);\n-\n extern void remove_dyn_prop (enum dynamic_prop_node_kind prop_kind,\n                              struct type *type);\n "
    }
  ]
}