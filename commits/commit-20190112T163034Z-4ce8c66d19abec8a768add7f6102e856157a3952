{
  "sha": "4ce8c66d19abec8a768add7f6102e856157a3952",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGNlOGM2NmQxOWFiZWM4YTc2OGFkZDdmNjEwMmU4NTYxNTdhMzk1Mg==",
  "commit": {
    "author": {
      "name": "Yoshinori Sato",
      "email": "ysato@users.sourceforge.jp",
      "date": "2019-01-05T15:06:49Z"
    },
    "committer": {
      "name": "Yoshinori Sato",
      "email": "ysato@users.sourceforge.jp",
      "date": "2019-01-12T16:30:34Z"
    },
    "message": "Add RXv3 instructions.\n\n        * rx-decode.opc (DSIZE): New. double size.\n        (_ld): New. dmov size attribute.\n        (PSCALE): Add double size.\n        (DCR, DDR, DDRH, DDRL, DCND): New. Double FPU registers.\n        (SCR, SDR, SDRH, SDRL): Likewise.\n        (S2DR, S2CR): Likewise.\n        (SDD): New. double displacement.\n        (DL): New. Set dmov size attribute.\n        (rx_decode_opcode): Add RXv3 instructions.\n        * rx-decode.c: Regenerate.\n        * rx-dis.c (size_names): Add double entry.\n        (opsize_names): Likewise.\n        (double_register_names): New. Double FPU registers.\n        (double_register_high_names): Likewise.\n        (double_register_low_names): Likewise.\n        (double_register_control_names): Likewise.\n        (double_condition_names): dcmp condition.\n        (print_insn_rx): Add  bfmov / bfmovz output.\n        Add double FPU output.",
    "tree": {
      "sha": "7916922b4b643268e14c8d5536e0acfe826e4d41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7916922b4b643268e14c8d5536e0acfe826e4d41"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4ce8c66d19abec8a768add7f6102e856157a3952",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ce8c66d19abec8a768add7f6102e856157a3952",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4ce8c66d19abec8a768add7f6102e856157a3952",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ce8c66d19abec8a768add7f6102e856157a3952/comments",
  "author": {
    "login": "ysat0",
    "id": 390647,
    "node_id": "MDQ6VXNlcjM5MDY0Nw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/390647?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ysat0",
    "html_url": "https://github.com/ysat0",
    "followers_url": "https://api.github.com/users/ysat0/followers",
    "following_url": "https://api.github.com/users/ysat0/following{/other_user}",
    "gists_url": "https://api.github.com/users/ysat0/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ysat0/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ysat0/subscriptions",
    "organizations_url": "https://api.github.com/users/ysat0/orgs",
    "repos_url": "https://api.github.com/users/ysat0/repos",
    "events_url": "https://api.github.com/users/ysat0/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ysat0/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ysat0",
    "id": 390647,
    "node_id": "MDQ6VXNlcjM5MDY0Nw==",
    "avatar_url": "https://avatars.githubusercontent.com/u/390647?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ysat0",
    "html_url": "https://github.com/ysat0",
    "followers_url": "https://api.github.com/users/ysat0/followers",
    "following_url": "https://api.github.com/users/ysat0/following{/other_user}",
    "gists_url": "https://api.github.com/users/ysat0/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ysat0/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ysat0/subscriptions",
    "organizations_url": "https://api.github.com/users/ysat0/orgs",
    "repos_url": "https://api.github.com/users/ysat0/repos",
    "events_url": "https://api.github.com/users/ysat0/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ysat0/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "60a90376792474224f3d22b1d9813844a3b3589a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60a90376792474224f3d22b1d9813844a3b3589a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/60a90376792474224f3d22b1d9813844a3b3589a"
    }
  ],
  "stats": {
    "total": 13769,
    "additions": 8821,
    "deletions": 4948
  },
  "files": [
    {
      "sha": "6c1e1bd2ff2ad7cecb7f2109892de29c6db7ff9c",
      "filename": "opcodes/rx-decode.c",
      "status": "modified",
      "additions": 8599,
      "deletions": 4944,
      "changes": 13543,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ce8c66d19abec8a768add7f6102e856157a3952/opcodes/rx-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ce8c66d19abec8a768add7f6102e856157a3952/opcodes/rx-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/rx-decode.c?ref=4ce8c66d19abec8a768add7f6102e856157a3952"
    },
    {
      "sha": "59d4338400e88f466b1c0a75f2271414015234b7",
      "filename": "opcodes/rx-decode.opc",
      "status": "modified",
      "additions": 160,
      "deletions": 2,
      "changes": 162,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ce8c66d19abec8a768add7f6102e856157a3952/opcodes/rx-decode.opc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ce8c66d19abec8a768add7f6102e856157a3952/opcodes/rx-decode.opc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/rx-decode.opc?ref=4ce8c66d19abec8a768add7f6102e856157a3952",
      "patch": "@@ -43,6 +43,7 @@ static int trace = 0;\n #define BSIZE 0\n #define WSIZE 1\n #define LSIZE 2\n+#define DSIZE 3\n \n /* These are for when the upper bits are \"don't care\" or \"undefined\".  */\n static int bwl[4] =\n@@ -77,6 +78,12 @@ static int memex[4] =\n   RX_UWord\n };\n \n+static int _ld[2] =\n+{\n+  RX_Long,\n+  RX_Double\n+};\n+\n #define ID(x) rx->id = RXO_##x\n #define OP(n,t,r,a) (rx->op[n].type = t, \\\n \t\t     rx->op[n].reg = r,\t     \\\n@@ -87,7 +94,7 @@ static int memex[4] =\n /* This is for the BWL and BW bitfields.  */\n static int SCALE[] = { 1, 2, 4, 0 };\n /* This is for the prefix size enum.  */\n-static int PSCALE[] = { 4, 1, 1, 1, 2, 2, 2, 3, 4 };\n+static int PSCALE[] = { 4, 1, 1, 1, 2, 2, 2, 3, 4, 8 };\n \n #define GET_SCALE(_indx)  ((unsigned)(_indx) < ARRAY_SIZE (SCALE) ? SCALE[(_indx)] : 0)\n #define GET_PSCALE(_indx) ((unsigned)(_indx) < ARRAY_SIZE (PSCALE) ? PSCALE[(_indx)] : 0)\n@@ -113,6 +120,11 @@ static int dsp3map[] = { 8, 9, 10, 3, 4, 5, 6, 7 };\n #define DIs(r,a,s)  OP (0, RX_Operand_Indirect,  r, (a) * GET_SCALE (s))\n #define DD(t,r,s)   rx_disp (0, t, r, bwl[s], ld);\n #define DF(r)       OP (0, RX_Operand_Flag,  flagmap[r], 0)\n+#define DCR(r)      OP (0, RX_Operand_DoubleCReg, r, 0)\n+#define DDR(r)      OP (0, RX_Operand_DoubleReg,  r, 0)\n+#define DDRH(r)     OP (0, RX_Operand_DoubleRegH,  r, 0)\n+#define DDRL(r)     OP (0, RX_Operand_DoubleRegL,  r, 0)\n+#define DCND(r)     OP (0, RX_Operand_DoubleCond, r, 0)\n \n #define SC(i)       OP (1, RX_Operand_Immediate, 0, i)\n #define SR(r)       OP (1, RX_Operand_Register,  r, 0)\n@@ -123,6 +135,10 @@ static int dsp3map[] = { 8, 9, 10, 3, 4, 5, 6, 7 };\n #define SP(t,r)     rx_disp (1, t, r, (t!=3) ? RX_UByte : RX_Long, ld); P(t, 1);\n #define SPm(t,r,m)  rx_disp (1, t, r, memex[m], ld); rx->op[1].size = memex[m];\n #define Scc(cc)     OP (1, RX_Operand_Condition,  cc, 0)\n+#define SCR(r)      OP (1, RX_Operand_DoubleCReg, r, 0)\n+#define SDR(r)      OP (1, RX_Operand_DoubleReg,  r, 0)\n+#define SDRH(r)      OP (1, RX_Operand_DoubleRegH,  r, 0)\n+#define SDRL(r)      OP (1, RX_Operand_DoubleRegL,  r, 0)\n \n #define S2C(i)      OP (2, RX_Operand_Immediate, 0, i)\n #define S2R(r)      OP (2, RX_Operand_Register,  r, 0)\n@@ -132,11 +148,16 @@ static int dsp3map[] = { 8, 9, 10, 3, 4, 5, 6, 7 };\n #define S2P(t,r)    rx_disp (2, t, r, (t!=3) ? RX_UByte : RX_Long, ld); P(t, 2);\n #define S2Pm(t,r,m) rx_disp (2, t, r, memex[m], ld); rx->op[2].size = memex[m];\n #define S2cc(cc)    OP (2, RX_Operand_Condition,  cc, 0)\n+#define S2DR(r)     OP (2, RX_Operand_DoubleReg,  r, 0)\n+#define S2CR(r)     OP (2, RX_Operand_DoubleCReg, r, 0)\n+\n+#define SDD(t,r,s)  rx_disp (1, t, r, bwl, ld);\n \n #define BWL(sz)     rx->op[0].size = rx->op[1].size = rx->op[2].size = rx->size = bwl[sz]\n #define sBWL(sz)    rx->op[0].size = rx->op[1].size = rx->op[2].size = rx->size = sbwl[sz]\n #define uBW(sz)     rx->op[0].size = rx->op[1].size = rx->op[2].size = rx->size = ubw[sz]\n #define P(t, n)\t    rx->op[n].size = (t!=3) ? RX_UByte : RX_Long;\n+#define DL(sz)      rx->op[0].size = rx->op[1].size = rx->op[2].size = rx->size = _ld[sz]\n \n #define F(f) store_flags(rx, f)\n \n@@ -1044,7 +1065,7 @@ rx_decode_opcode (unsigned long pc AU,\n   ID(sccnd); BWL(sz); DD (sd, rdst, sz); Scc(cond);\n \n /*----------------------------------------------------------------------*/\n-/* RXv2 enhanced\t\t\t\t\t\t\t\t*/\n+/* RXv2 enhanced\t\t\t\t\t\t\t*/\n \n /** 1111 1101 0010 0111 rdst rsrc\tmovco\t%1, [%0] */\n    ID(movco); SR(rsrc); DR(rdst); F_____;\n@@ -1118,6 +1139,143 @@ rx_decode_opcode (unsigned long pc AU,\n /** 0000 0110 mx10 00sd 0001 0101 rsrc rdst\tutof\t%1%S1, %0 */\n   ID(utof); DR (rdst); SPm(sd, rsrc, mx); F__SZ_;\n \n+/*----------------------------------------------------------------------*/\n+/* RXv3 enhanced\t\t\t\t\t\t\t*/\n+\n+/** 1111 1111 0110 rdst srca srcb\txor\t%2, %1, %0 */\n+  ID(xor); DR(rdst); SR(srcb); S2R(srca); F__SZ_;\n+\n+/** 1111 1100 0101 1110 rsrc rdst\tbfmov\t%bf */\n+  ID(bfmov); DR(rdst); SR(rsrc); S2C(IMM(2)); F_____;\n+\n+/** 1111 1100 0101 1010 rsrc rdst\tbfmovz\t%bf */\n+  ID(bfmovz); DR(rdst); SR(rsrc); S2C(IMM(2)); F_____;\n+\n+/** 1111 1101 0111 0110 1101 rsrc 0000 0000 \trstr\t%1 */\n+  ID(rstr); SR(rsrc); F_____;\n+\n+/** 1111 1101 0111 0110 1111 0000 \trstr\t#%1 */\n+  ID(rstr); SC(IMM(1)); F_____;\n+\n+/** 1111 1101 0111 0110 1100 rsrc 0000 0000 \tsave\t%1 */\n+  ID(save); SR(rsrc); F_____;\n+\n+/** 1111 1101 0111 0110 1110 0000\tsave\t#%1 */\n+  ID(save); SC(IMM(1)); F_____;\n+\n+/** 1111 1101 0111 0111 1000 rsrc rdst 001s\tdmov%s\t%1, %0 */\n+  ID(dmov); DDRH(rdst); SR(rsrc); DL(s); F_____;\n+\n+/** 1111 1101 0111 0111 1000 rsrc rdst 0000\tdmov.l\t%1, %0 */\n+  ID(dmov); DDRL(rdst); SR(rsrc); F_____;\n+\n+/** 1111 1101 0111 0101 1000 rdst rsrc 0010\tdmov.l\t%1, %0 */\n+  ID(dmov); DR(rdst); SDRH(rsrc); F_____;\n+\n+/** 1111 1101 0111 0101 1000 rdst rsrc 0000\tdmov.l\t%1, %0 */\n+  ID(dmov); DR(rdst); SDRL(rsrc); F_____;\n+\n+/** 0111 0110 1001 0000 rsrc 1100 rdst 0000\tdmov.d\t%1, %0 */\n+  ID(dmov); DDR(rdst); SDR(rsrc); F_____;\n+\n+/** 1111 1100 0111 1000 rdst 1000 rsrc 0000\tdmov.d\t%1, %0 */\n+  ID(dmov); DD(0, rdst, 0); SDR(rsrc); F_____;\n+\n+/** 1111 1100 0111 10sz rdst 1000\tdmov.d\t%1, %0 */\n+  int rsrc;\n+  rx_disp(0, sz, rdst, RX_Double, ld);\n+  rsrc = GETBYTE();\n+  if (rsrc & 0x0f)\n+    UNSUPPORTED();\n+  else {\n+    ID(dmov); SDR(rsrc >> 4); F_____;\n+  }\n+\n+/** 1111 1100 1100 1000 rsrc 1000 rdst 0000\tdmov.d\t%1, %0 */\n+  ID(dmov); SD(sd, rsrc, 0) ; DDR(rdst); F_____;\n+\n+/** 1111 1100 1100 10sz rsrc 1000\tdmov.d\t%1, %0 */\n+  int rdst;\n+  rx_disp(1, sz, rsrc, RX_Double, ld);\n+  rdst = GETBYTE();\n+  if (rdst & 0x0f)\n+    UNSUPPORTED();\n+  else {\n+    ID(dmov); DDR(rdst >> 4); F_____;\n+  }\n+\n+/** 1111 1001 0000 0011 rdst 001s\tdmov%s\t#%1, %0 */\n+  ID(dmov); DDRH(rdst); DL(s); SC(IMMex(0)); F_____;\n+\n+/** 1111 1001 0000 0011 rdst 0000\tdmov.l\t#%1, %0 */\n+  ID(dmov); DDRL(rdst); SC(IMMex(0)); F_____;\n+\n+/** 0111 0101 1011 1000 rdst rnum\tdpopm.d\t%1-%2 */\n+  ID(dpopm); SDR(rdst); S2DR(rdst + rnum); F_____;\n+\n+/** 0111 0101 1010 1000 rdst rnum\tdpopm.l\t%1-%2 */\n+  ID(dpopm); SCR(rdst); S2CR(rdst + rnum); F_____;\n+\n+/** 0111 0101 1011 0000 rdst rnum\tdpushm.d\t%1-%2 */\n+  ID(dpushm); SDR(rdst); S2DR(rdst + rnum); F_____;\n+\n+/** 0111 0101 1010 0000 rdst rnum\tdpushm.l\t%1-%2 */\n+  ID(dpushm); SCR(rdst); S2CR(rdst + rnum); F_____;\n+\n+/** 1111 1101 0111 0101 1000 rdst rsrc 0100\tmvfdc\t%1, %0 */\n+  ID(mvfdc); DR(rdst); SCR(rsrc); F_____;\n+\n+/** 0111 0101 1001 0000 0001 1011\tmvfdr */\n+  ID(mvfdr); F_____;\n+\n+/** 1111 1101 0111 0111 1000 rdst rsrc 0100\tmvtdc\t%1, %0 */\n+  ID(mvtdc); DCR(rdst); SR(rsrc); F_____;\n+\n+/** 0111 0110 1001 0000 rsrc 1100 rdst 0001\tdabs\t%1, %0 */\n+  ID(dabs); DDR(rdst); SDR(rsrc); F_____;\n+\n+/** 0111 0110 1001 0000 srcb 0000 rdst srca\tdadd\t%1, %2, %0 */\n+  ID(dadd); DDR(rdst); SDR(srca); S2DR(srcb); F_____;\n+\n+/** 0111 0110 1001 0000 srcb 1000 cond srca\tdcmp%0\t%1, %2 */\n+  ID(dcmp); DCND(cond); SDR(srca); S2DR(srcb); F_____;\n+\n+/** 0111 0110 1001 0000 srcb 0101 rdst srca\tddiv\t%1, %2, %0 */\n+  ID(ddiv); DDR(rdst); SDR(srca); S2DR(srcb); F_____;\n+\n+/** 0111 0110 1001 0000 srcb 0010 rdst srca\tdmul\t%1, %2, %0 */\n+  ID(dmul); DDR(rdst); SDR(srca); S2DR(srcb); F_____;\n+\n+/** 0111 0110 1001 0000 rsrc 1100 rdst 0010\tdneg\t%1, %0 */\n+  ID(dneg); DDR(rdst); SDR(rsrc); F_____;\n+\n+/** 0111 0110 1001 0000 rsrc 1101 rdst 1101\tdround\t%1, %0 */\n+  ID(dround); DDR(rdst); SDR(rsrc); F_____;\n+\n+/** 0111 0110 1001 0000 rsrc 1101 rdst 0000\tdsqrt\t%1, %0 */\n+  ID(dsqrt); DDR(rdst); SDR(rsrc); F_____;\n+\n+/** 0111 0110 1001 0000 srcb 0001 rdst srca\tdsub\t%1, %2, %0 */\n+  ID(dsub); DDR(rdst); SDR(srca); S2DR(srcb); F_____;\n+\n+/** 0111 0110 1001 0000 rsrc 1101 rdst 1100\tdtof\t%1, %0 */\n+  ID(dtof); DDR(rdst); SDR(rsrc); F_____;\n+\n+/** 0111 0110 1001 0000 rsrc 1101 rdst 1000\tdtoi\t%1, %0 */\n+  ID(dtoi); DDR(rdst); SDR(rsrc); F_____;\n+\n+/** 0111 0110 1001 0000 rsrc 1101 rdst 1001\tdtou\t%1, %0 */\n+  ID(dtou); DDR(rdst); SDR(rsrc); F_____;\n+\n+/** 1111 1101 0111 0111 1000 rsrc rdst 1010\tftod\t%1, %0 */\n+  ID(ftod); DDR(rdst); SR(rsrc); F_____;\n+\n+/** 1111 1101 0111 0111 1000 rsrc rdst 1001\titod\t%1, %0 */\n+  ID(itod); DDR(rdst); SR(rsrc); F_____;\n+\n+/** 1111 1101 0111 0111 1000 rsrc rdst 1101\tutod\t%1, %0 */\n+  ID(dsqrt); DDR(rdst); SR(rsrc); F_____;\n+\n /** */\n \n   return rx->n_bytes;"
    },
    {
      "sha": "1147d6438f492b054ab047e3e2899bc10741feb1",
      "filename": "opcodes/rx-dis.c",
      "status": "modified",
      "additions": 62,
      "deletions": 2,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ce8c66d19abec8a768add7f6102e856157a3952/opcodes/rx-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ce8c66d19abec8a768add7f6102e856157a3952/opcodes/rx-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/rx-dis.c?ref=4ce8c66d19abec8a768add7f6102e856157a3952",
      "patch": "@@ -66,12 +66,12 @@ rx_get_byte (void * vdata)\n \n static char const * size_names[RX_MAX_SIZE] =\n {\n-  \"\", \".b\", \".ub\", \".b\", \".w\", \".uw\", \".w\", \".a\", \".l\", \"<error>\"\n+  \"\", \".b\", \".ub\", \".b\", \".w\", \".uw\", \".w\", \".a\", \".l\", \"\", \"<error>\"\n };\n \n static char const * opsize_names[RX_MAX_SIZE] =\n {\n-  \"\", \".b\", \".b\", \".b\", \".w\", \".w\", \".w\", \".a\", \".l\", \"<error>\"\n+  \"\", \".b\", \".b\", \".b\", \".w\", \".w\", \".w\", \".a\", \".l\", \".d\", \"<error>\"\n };\n \n static char const * register_names[] =\n@@ -101,6 +101,34 @@ static const char * flag_names[] =\n   \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n };\n \n+static const char * double_register_names[] =\n+{\n+  \"dr0\", \"dr1\", \"dr2\", \"dr3\", \"dr4\", \"dr5\", \"dr6\", \"dr7\",\n+  \"dr8\", \"dr9\", \"dr10\", \"dr11\", \"dr12\", \"dr13\", \"dr14\", \"dr15\",\n+};\n+\n+static const char * double_register_high_names[] =\n+{\n+  \"drh0\", \"drh1\", \"drh2\", \"drh3\", \"drh4\", \"drh5\", \"drh6\", \"drh7\",\n+  \"drh8\", \"drh9\", \"drh10\", \"drh11\", \"drh12\", \"drh13\", \"drh14\", \"drh15\",\n+};\n+\n+static const char * double_register_low_names[] =\n+{\n+  \"drl0\", \"drl1\", \"drl2\", \"drl3\", \"drl4\", \"drl5\", \"drl6\", \"drl7\",\n+  \"drl8\", \"drl9\", \"drl10\", \"drl11\", \"drl12\", \"drl13\", \"drl14\", \"drl15\",\n+};\n+\n+static const char * double_control_register_names[] =\n+{\n+  \"dpsw\", \"dcmr\", \"decnt\", \"depc\",\n+};\n+\n+static const char * double_condition_names[] =\n+{\n+  \"\", \"un\", \"eq\", \"\", \"lt\", \"\", \"le\",\n+};\n+\n int\n print_insn_rx (bfd_vma addr, disassemble_info * dis)\n {\n@@ -186,6 +214,23 @@ print_insn_rx (bfd_vma addr, disassemble_info * dis)\n \t      PR (PS, \"%s\", opsize_names[opcode.size]);\n \t      break;\n \n+\t    case 'b':\n+\t      s ++;\n+\t      if (*s == 'f') {\n+\t\tint imm = opcode.op[2].addend;\n+\t\tint slsb, dlsb, width;\n+\t\tdlsb = (imm >> 5) & 0x1f;\n+\t\tslsb = (imm & 0x1f);\n+\t\tslsb = (slsb >= 0x10?(slsb ^ 0x1f) + 1:slsb);\n+\t\tslsb = dlsb - slsb;\n+\t\tslsb = (slsb < 0?-slsb:slsb);\n+\t\twidth = ((imm >> 10) & 0x1f) - dlsb;\n+\t\tPR (PS, \"#%d, #%d, #%d, %s, %s\",\n+\t\t    slsb, dlsb, width,\n+\t\t    register_names[opcode.op[1].reg],\n+\t\t    register_names[opcode.op[0].reg]);\n+\t      }\n+\t      break;\n \t    case '0':\n \t    case '1':\n \t    case '2':\n@@ -230,6 +275,21 @@ print_insn_rx (bfd_vma addr, disassemble_info * dis)\n \t\t  case RX_Operand_Flag:\n \t\t    PR (PS, \"%s\", flag_names[oper->reg]);\n \t\t    break;\n+\t\t  case RX_Operand_DoubleReg:\n+\t\t    PR (PS, \"%s\", double_register_names[oper->reg]);\n+\t\t    break;\n+\t\t  case RX_Operand_DoubleRegH:\n+\t\t    PR (PS, \"%s\", double_register_high_names[oper->reg]);\n+\t\t    break;\n+\t\t  case RX_Operand_DoubleRegL:\n+\t\t    PR (PS, \"%s\", double_register_low_names[oper->reg]);\n+\t\t    break;\n+\t\t  case RX_Operand_DoubleCReg:\n+\t\t    PR (PS, \"%s\", double_control_register_names[oper->reg]);\n+\t\t    break;\n+\t\t  case RX_Operand_DoubleCond:\n+\t\t    PR (PS, \"%s\", double_condition_names[oper->reg]);\n+\t\t    break;\n \t\t  default:\n \t\t    PR (PS, \"[???]\");\n \t\t    break;"
    }
  ]
}