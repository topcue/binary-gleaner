{
  "sha": "43182c09c6f90ebd46c3980e788c751efda8b1a9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDMxODJjMDljNmY5MGViZDQ2YzM5ODBlNzg4Yzc1MWVmZGE4YjFhOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:13:58Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:55Z"
    },
    "message": "Add dwarf2_per_objfile parameter to recursively_compute_inclusions\n\nThis allows removing dwarf2_per_cu_data::dwarf2_per_objfile references\nin recursively_compute_inclusions and compute_compunit_symtab_includes.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (recursively_compute_inclusions): Add\n\tdwarf2_per_objfile parameter.\n\t(compute_compunit_symtab_includes): Likewise.\n\t(process_cu_includes): Update.\n\nChange-Id: I1ee7f8dfc07b39763985e6764e8ce04dcc943ec5",
    "tree": {
      "sha": "dac9967e3eeb50b77974c1b4916542405da2de0e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dac9967e3eeb50b77974c1b4916542405da2de0e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/43182c09c6f90ebd46c3980e788c751efda8b1a9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43182c09c6f90ebd46c3980e788c751efda8b1a9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/43182c09c6f90ebd46c3980e788c751efda8b1a9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43182c09c6f90ebd46c3980e788c751efda8b1a9/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7aa104c423d935656d81ba6612586e98ee9babb5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7aa104c423d935656d81ba6612586e98ee9babb5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7aa104c423d935656d81ba6612586e98ee9babb5"
    }
  ],
  "stats": {
    "total": 25,
    "additions": 18,
    "deletions": 7
  },
  "files": [
    {
      "sha": "4b7898309ec9d32f90cf6aa26fc96f0ada270572",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43182c09c6f90ebd46c3980e788c751efda8b1a9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43182c09c6f90ebd46c3980e788c751efda8b1a9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=43182c09c6f90ebd46c3980e788c751efda8b1a9",
      "patch": "@@ -1,3 +1,10 @@\n+2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.c (recursively_compute_inclusions): Add\n+\tdwarf2_per_objfile parameter.\n+\t(compute_compunit_symtab_includes): Likewise.\n+\t(process_cu_includes): Update.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.c (create_partial_symtab): Add dwarf2_per_objfile"
    },
    {
      "sha": "070d8809bda7330760192048023f4906db3fad36",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43182c09c6f90ebd46c3980e788c751efda8b1a9/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43182c09c6f90ebd46c3980e788c751efda8b1a9/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=43182c09c6f90ebd46c3980e788c751efda8b1a9",
      "patch": "@@ -9629,7 +9629,8 @@ rust_union_quirks (struct dwarf2_cu *cu)\n static void\n recursively_compute_inclusions (std::vector<compunit_symtab *> *result,\n \t\t\t\thtab_t all_children, htab_t all_type_symtabs,\n-\t\t\t\tstruct dwarf2_per_cu_data *per_cu,\n+\t\t\t\tdwarf2_per_cu_data *per_cu,\n+\t\t\t\tdwarf2_per_objfile *per_objfile,\n \t\t\t\tstruct compunit_symtab *immediate_parent)\n {\n   void **slot = htab_find_slot (all_children, per_cu, INSERT);\n@@ -9642,7 +9643,7 @@ recursively_compute_inclusions (std::vector<compunit_symtab *> *result,\n   *slot = per_cu;\n \n   /* Only add a CU if it has a symbol table.  */\n-  compunit_symtab *cust = per_cu->dwarf2_per_objfile->get_symtab (per_cu);\n+  compunit_symtab *cust = per_objfile->get_symtab (per_cu);\n   if (cust != NULL)\n     {\n       /* If this is a type unit only add its symbol table if we haven't\n@@ -9670,15 +9671,17 @@ recursively_compute_inclusions (std::vector<compunit_symtab *> *result,\n     for (dwarf2_per_cu_data *ptr : *per_cu->imported_symtabs)\n       {\n \trecursively_compute_inclusions (result, all_children,\n-\t\t\t\t\tall_type_symtabs, ptr, cust);\n+\t\t\t\t\tall_type_symtabs, ptr, per_objfile,\n+\t\t\t\t\tcust);\n       }\n }\n \n /* Compute the compunit_symtab 'includes' fields for the compunit_symtab of\n    PER_CU.  */\n \n static void\n-compute_compunit_symtab_includes (struct dwarf2_per_cu_data *per_cu)\n+compute_compunit_symtab_includes (dwarf2_per_cu_data *per_cu,\n+\t\t\t\t  dwarf2_per_objfile *per_objfile)\n {\n   gdb_assert (! per_cu->is_debug_types);\n \n@@ -9687,7 +9690,7 @@ compute_compunit_symtab_includes (struct dwarf2_per_cu_data *per_cu)\n       int len;\n       std::vector<compunit_symtab *> result_symtabs;\n       htab_t all_children, all_type_symtabs;\n-      compunit_symtab *cust = per_cu->dwarf2_per_objfile->get_symtab (per_cu);\n+      compunit_symtab *cust = per_objfile->get_symtab (per_cu);\n \n       /* If we don't have a symtab, we can just skip this case.  */\n       if (cust == NULL)\n@@ -9701,7 +9704,8 @@ compute_compunit_symtab_includes (struct dwarf2_per_cu_data *per_cu)\n       for (dwarf2_per_cu_data *ptr : *per_cu->imported_symtabs)\n \t{\n \t  recursively_compute_inclusions (&result_symtabs, all_children,\n-\t\t\t\t\t  all_type_symtabs, ptr, cust);\n+\t\t\t\t\t  all_type_symtabs, ptr, per_objfile,\n+\t\t\t\t\t  cust);\n \t}\n \n       /* Now we have a transitive closure of all the included symtabs.  */\n@@ -9727,7 +9731,7 @@ process_cu_includes (struct dwarf2_per_objfile *dwarf2_per_objfile)\n   for (dwarf2_per_cu_data *iter : dwarf2_per_objfile->per_bfd->just_read_cus)\n     {\n       if (! iter->is_debug_types)\n-\tcompute_compunit_symtab_includes (iter);\n+\tcompute_compunit_symtab_includes (iter, dwarf2_per_objfile);\n     }\n \n   dwarf2_per_objfile->per_bfd->just_read_cus.clear ();"
    }
  ]
}