{
  "sha": "6f2f06bea87613a6851607829e5893d74007f5bf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmYyZjA2YmVhODc2MTNhNjg1MTYwNzgyOWU1ODkzZDc0MDA3ZjViZg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-14T07:47:03Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-14T07:47:03Z"
    },
    "message": "x86: make JumpAbsolute an insn attribute\n\n... instead of an operand one: There's only ever one operand here\nanyway.",
    "tree": {
      "sha": "5ec0036f1cdfa57127f3cfa8d173e6b7c0afcf28",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5ec0036f1cdfa57127f3cfa8d173e6b7c0afcf28"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6f2f06bea87613a6851607829e5893d74007f5bf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f2f06bea87613a6851607829e5893d74007f5bf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6f2f06bea87613a6851607829e5893d74007f5bf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f2f06bea87613a6851607829e5893d74007f5bf/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "601e8564220b94b991ce1729edfc04fd9da52906",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/601e8564220b94b991ce1729edfc04fd9da52906",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/601e8564220b94b991ce1729edfc04fd9da52906"
    }
  ],
  "stats": {
    "total": 53034,
    "additions": 26532,
    "deletions": 26502
  },
  "files": [
    {
      "sha": "e2db6fd8edb8e32a738da9d6cd52b69f45f37c78",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f2f06bea87613a6851607829e5893d74007f5bf/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f2f06bea87613a6851607829e5893d74007f5bf/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=6f2f06bea87613a6851607829e5893d74007f5bf",
      "patch": "@@ -1,3 +1,13 @@\n+2019-11-14  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (struct _i386_insn): Add jumpabsolute field.\n+\t(operand_type_match): Drop jumpabsolute use.\n+\t(type_names): Remove OPERAND_TYPE_JUMPABSOLUTE entry.\n+\t(process_suffix, i386_displacement): Adjust jumpabsolute uses.\n+\t(match_template, i386_att_operand): Adjust jumpabsolute\n+\thandling.\t\n+\t* config/tc-i386-intel.c (i386_intel_operand): Likewise.\n+\n 2019-11-14  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (operand_size_match): Adjust anysize use."
    },
    {
      "sha": "fd71afb75bdf9cdd7c2bb60e3dcefca65058b047",
      "filename": "gas/config/tc-i386-intel.c",
      "status": "modified",
      "additions": 12,
      "deletions": 7,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f2f06bea87613a6851607829e5893d74007f5bf/gas/config/tc-i386-intel.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f2f06bea87613a6851607829e5893d74007f5bf/gas/config/tc-i386-intel.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386-intel.c?ref=6f2f06bea87613a6851607829e5893d74007f5bf",
      "patch": "@@ -743,17 +743,19 @@ i386_intel_operand (char *operand_string, int got_a_float)\n       || current_templates->start->opcode_modifier.jumpdword\n       || current_templates->start->opcode_modifier.jumpintersegment)\n     {\n+      bfd_boolean jumpabsolute = FALSE;\n+\n       if (i.op[this_operand].regs\n \t  || intel_state.base\n \t  || intel_state.index\n \t  || intel_state.is_mem > 1)\n-\ti.types[this_operand].bitfield.jumpabsolute = 1;\n+\tjumpabsolute = TRUE;\n       else\n \tswitch (intel_state.op_modifier)\n \t  {\n \t  case O_near_ptr:\n \t    if (intel_state.seg)\n-\t      i.types[this_operand].bitfield.jumpabsolute = 1;\n+\t      jumpabsolute = TRUE;\n \t    else\n \t      intel_state.is_mem = 1;\n \t    break;\n@@ -765,14 +767,14 @@ i386_intel_operand (char *operand_string, int got_a_float)\n \t\tif (intel_state.op_modifier == O_absent)\n \t\t  {\n \t\t    if (intel_state.is_indirect == 1)\n-\t\t      i.types[this_operand].bitfield.jumpabsolute = 1;\n+\t\t      jumpabsolute = TRUE;\n \t\t    break;\n \t\t  }\n \t\tas_bad (_(\"cannot infer the segment part of the operand\"));\n \t\treturn 0;\n \t      }\n \t    else if (S_GET_SEGMENT (intel_state.seg) == reg_section)\n-\t      i.types[this_operand].bitfield.jumpabsolute = 1;\n+\t      jumpabsolute = TRUE;\n \t    else\n \t      {\n \t\ti386_operand_type types;\n@@ -806,11 +808,14 @@ i386_intel_operand (char *operand_string, int got_a_float)\n \t      }\n \t    break;\n \t  default:\n-\t    i.types[this_operand].bitfield.jumpabsolute = 1;\n+\t    jumpabsolute = TRUE;\n \t    break;\n \t  }\n-      if (i.types[this_operand].bitfield.jumpabsolute)\n-\tintel_state.is_mem |= 1;\n+      if (jumpabsolute)\n+\t{\n+\t  i.jumpabsolute = TRUE;\n+\t  intel_state.is_mem |= 1;\n+\t}\n     }\n   else if (intel_state.seg)\n     intel_state.is_mem |= 1;"
    },
    {
      "sha": "fcd6215a26a8b908ad0171e8064bd134b39cb2e6",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 23,
      "deletions": 14,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f2f06bea87613a6851607829e5893d74007f5bf/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f2f06bea87613a6851607829e5893d74007f5bf/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=6f2f06bea87613a6851607829e5893d74007f5bf",
      "patch": "@@ -353,6 +353,9 @@ struct _i386_insn\n     unsigned int prefixes;\n     unsigned char prefix[MAX_PREFIXES];\n \n+    /* The operand to a branch insn indicates an absolute branch.  */\n+    bfd_boolean jumpabsolute;\n+\n     /* Has MMX register operands.  */\n     bfd_boolean has_regmmx;\n \n@@ -2147,7 +2150,6 @@ operand_type_match (i386_operand_type overlap,\n {\n   i386_operand_type temp = overlap;\n \n-  temp.bitfield.jumpabsolute = 0;\n   temp.bitfield.unspecified = 0;\n   temp.bitfield.byte = 0;\n   temp.bitfield.word = 0;\n@@ -2161,8 +2163,7 @@ operand_type_match (i386_operand_type overlap,\n   if (operand_type_all_zero (&temp))\n     goto mismatch;\n \n-  if (given.bitfield.baseindex == overlap.bitfield.baseindex\n-      && given.bitfield.jumpabsolute == overlap.bitfield.jumpabsolute)\n+  if (given.bitfield.baseindex == overlap.bitfield.baseindex)\n     return 1;\n \n mismatch:\n@@ -3155,7 +3156,6 @@ const type_names[] =\n   { OPERAND_TYPE_FLOATREG, \"FReg\" },\n   { OPERAND_TYPE_FLOATACC, \"FAcc\" },\n   { OPERAND_TYPE_SREG, \"SReg\" },\n-  { OPERAND_TYPE_JUMPABSOLUTE, \"Jump Absolute\" },\n   { OPERAND_TYPE_REGMMX, \"rMMX\" },\n   { OPERAND_TYPE_REGXMM, \"rXMM\" },\n   { OPERAND_TYPE_REGYMM, \"rYMM\" },\n@@ -5743,6 +5743,18 @@ match_template (char mnem_suffix)\n       if (!size_match)\n \tcontinue;\n \n+      /* This is intentionally not\n+\n+\t if (i.jumpabsolute != t->opcode_modifier.jumpabsolute)\n+\n+\t as the case of a missing * on the operand is accepted (perhaps with\n+\t a warning, issued further down).  */\n+      if (i.jumpabsolute && !t->opcode_modifier.jumpabsolute)\n+\t{\n+\t  i.error = operand_type_mismatch;\n+\t  continue;\n+\t}\n+\n       for (j = 0; j < MAX_OPERANDS; j++)\n \toperand_types[j] = t->operand_types[j];\n \n@@ -6120,11 +6132,8 @@ match_template (char mnem_suffix)\n   if (!quiet_warnings)\n     {\n       if (!intel_syntax\n-\t  && (i.types[0].bitfield.jumpabsolute\n-\t      != operand_types[0].bitfield.jumpabsolute))\n-\t{\n-\t  as_warn (_(\"indirect %s without `*'\"), t->name);\n-\t}\n+\t  && (i.jumpabsolute != t->opcode_modifier.jumpabsolute))\n+\tas_warn (_(\"indirect %s without `*'\"), t->name);\n \n       if (t->opcode_modifier.isprefix\n \t  && t->opcode_modifier.ignoresize)\n@@ -6322,7 +6331,7 @@ process_suffix (void)\n     }\n   else if (intel_syntax\n \t   && !i.suffix\n-\t   && (i.tm.operand_types[0].bitfield.jumpabsolute\n+\t   && (i.tm.opcode_modifier.jumpabsolute\n \t       || i.tm.opcode_modifier.jumpbyte\n \t       || i.tm.opcode_modifier.jumpintersegment\n \t       || (i.tm.base_opcode == 0x0f01 /* [ls][gi]dt */\n@@ -9464,7 +9473,7 @@ i386_displacement (char *disp_start, char *disp_end)\n     }\n \n   operand_type_set (&bigdisp, 0);\n-  if ((i.types[this_operand].bitfield.jumpabsolute)\n+  if (i.jumpabsolute\n       || (!current_templates->start->opcode_modifier.jump\n \t  && !current_templates->start->opcode_modifier.jumpdword))\n     {\n@@ -9995,7 +10004,7 @@ i386_att_operand (char *operand_string)\n       ++op_string;\n       if (is_space_char (*op_string))\n \t++op_string;\n-      i.types[this_operand].bitfield.jumpabsolute = 1;\n+      i.jumpabsolute = TRUE;\n     }\n \n   /* Check if operand is a register.  */\n@@ -10051,7 +10060,7 @@ i386_att_operand (char *operand_string)\n \t      ++op_string;\n \t      if (is_space_char (*op_string))\n \t\t++op_string;\n-\t      i.types[this_operand].bitfield.jumpabsolute = 1;\n+\t      i.jumpabsolute = TRUE;\n \t    }\n \t  goto do_memory_reference;\n \t}\n@@ -10085,7 +10094,7 @@ i386_att_operand (char *operand_string)\n   else if (*op_string == IMMEDIATE_PREFIX)\n     {\n       ++op_string;\n-      if (i.types[this_operand].bitfield.jumpabsolute)\n+      if (i.jumpabsolute)\n \t{\n \t  as_bad (_(\"immediate operand illegal with absolute jump\"));\n \t  return 0;"
    },
    {
      "sha": "37a25b45d2c53bc54b305e85b48026cbaa3691f1",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=6f2f06bea87613a6851607829e5893d74007f5bf",
      "patch": "@@ -1,3 +1,15 @@\n+2019-11-14  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (operand_type_init): Remove\n+\tOPERAND_TYPE_JUMPABSOLUTE entry.\n+\t(opcode_modifiers): Add JumpAbsolute entry.\n+\t(operand_types): Remove JumpAbsolute entry.\n+\t* i386-opc.h (JumpAbsolute): Move between enums.\n+\t(struct i386_opcode_modifier): Add jumpabsolute field.\n+\t(union i386_operand_type): Remove jumpabsolute field.\n+\t* i386-opc.tbl (call, lcall, jmp, ljmp): Move JumpAbsolute.\n+\t* i386-init.h, i386-tbl.h: Re-generate.\n+\n 2019-11-14  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-gen.c (opcode_modifiers): Add AnySize entry."
    },
    {
      "sha": "a38513b1cb533a4c2ac884694d032860de30eb57",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=6f2f06bea87613a6851607829e5893d74007f5bf",
      "patch": "@@ -437,8 +437,6 @@ static initializer operand_type_init[] =\n     \"Instance=Accum|Tbyte\" },\n   { \"OPERAND_TYPE_SREG\",\n     \"Class=SReg\" },\n-  { \"OPERAND_TYPE_JUMPABSOLUTE\",\n-    \"JumpAbsolute\" },\n   { \"OPERAND_TYPE_REGMMX\",\n     \"Class=RegMMX\" },\n   { \"OPERAND_TYPE_REGXMM\",\n@@ -620,6 +618,7 @@ static bitfield opcode_modifiers[] =\n   BITFIELD (JumpDword),\n   BITFIELD (JumpByte),\n   BITFIELD (JumpInterSegment),\n+  BITFIELD (JumpAbsolute),\n   BITFIELD (FloatMF),\n   BITFIELD (FloatR),\n   BITFIELD (Size),\n@@ -723,7 +722,6 @@ static bitfield operand_types[] =\n   BITFIELD (Disp32),\n   BITFIELD (Disp32S),\n   BITFIELD (Disp64),\n-  BITFIELD (JumpAbsolute),\n   BITFIELD (Byte),\n   BITFIELD (Word),\n   BITFIELD (Dword),"
    },
    {
      "sha": "f5af732d7586f67da6b29c23ecfe23dadba3c36e",
      "filename": "opcodes/i386-init.h",
      "status": "modified",
      "additions": 57,
      "deletions": 61,
      "changes": 118,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/i386-init.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/i386-init.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-init.h?ref=6f2f06bea87613a6851607829e5893d74007f5bf",
      "patch": "@@ -1365,192 +1365,188 @@\n \n #define OPERAND_TYPE_NONE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG8 \\\n-  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG16 \\\n-  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG32 \\\n-  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG64 \\\n-  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      1, 0, 0, 0, 0, 0, 0 } }\n+  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM1 \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8 \\\n   { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8S \\\n   { { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16 \\\n   { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32S \\\n   { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_BASEINDEX \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP8 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32S \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_INOUTPORTREG \\\n-  { { 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SHIFTCOUNT \\\n-  { { 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_CONTROL \\\n   { { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_TEST \\\n   { { 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DEBUG \\\n   { { 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATREG \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0 } }\n+      1, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATACC \\\n   { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0 } }\n+      1, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SREG \\\n   { { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n-\n-#define OPERAND_TYPE_JUMPABSOLUTE \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGMMX \\\n   { { 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGXMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 1, 0, 0, 0, 0 } }\n+      0, 1, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGYMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 1, 0, 0, 0 } }\n+      0, 0, 1, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGZMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 1, 0, 0 } }\n+      0, 0, 0, 1, 0, 0 } }\n \n #define OPERAND_TYPE_REGMASK \\\n   { { 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGBND \\\n   { { 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC8 \\\n-  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC16 \\\n-  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC32 \\\n-  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC64 \\\n-  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      1, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16_32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYDISP \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32 \\\n   { { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32S \\\n   { { 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32_32S \\\n   { { 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_64 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64_DISP64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32_64 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYIMM \\\n   { { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0 } }"
    },
    {
      "sha": "f5938f507aad4da18b234902a1847e07580ae494",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=6f2f06bea87613a6851607829e5893d74007f5bf",
      "patch": "@@ -411,6 +411,8 @@ enum\n   JumpByte,\n   /* special case for intersegment leaps/calls */\n   JumpInterSegment,\n+  /* absolute address for jump */\n+  JumpAbsolute,\n   /* FP insn memory format bit, sized by 0x4 */\n   FloatMF,\n   /* src/dest swap for floats. */\n@@ -654,6 +656,7 @@ typedef struct i386_opcode_modifier\n   unsigned int jumpdword:1;\n   unsigned int jumpbyte:1;\n   unsigned int jumpintersegment:1;\n+  unsigned int jumpabsolute:1;\n   unsigned int floatmf:1;\n   unsigned int floatr:1;\n   unsigned int size:2;\n@@ -777,8 +780,6 @@ enum\n   Disp64,\n   /* Register which can be used for base or index in memory operand.  */\n   BaseIndex,\n-  /* Absolute address for jump.  */\n-  JumpAbsolute,\n   /* BYTE size. */\n   Byte,\n   /* WORD size. 2 byte */\n@@ -832,7 +833,6 @@ typedef union i386_operand_type\n       unsigned int disp32s:1;\n       unsigned int disp64:1;\n       unsigned int baseindex:1;\n-      unsigned int jumpabsolute:1;\n       unsigned int byte:1;\n       unsigned int word:1;\n       unsigned int dword:1;"
    },
    {
      "sha": "52c40b1add173f4fc67c96ed5cfc776ce3c4d37b",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=6f2f06bea87613a6851607829e5893d74007f5bf",
      "patch": "@@ -371,28 +371,28 @@ shrd, 2, 0xfad, None, 2, Cpu386, Modrm|CheckRegSize|No_bSuf|No_sSuf|No_ldSuf, {\n call, 1, 0xe8, None, 1, CpuNo64, JumpDword|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp16|Disp32 }\n call, 1, 0xe8, None, 1, Cpu64, AMD64|JumpDword|DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64|BNDPrefixOk, { Disp16|Disp32S }\n call, 1, 0xe8, None, 1, Cpu64, Intel64|JumpDword|DefaultSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64|BNDPrefixOk, { Disp32S }\n-call, 1, 0xff, 0x2, 1, CpuNo64, Modrm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk|NoTrackPrefixOk, { Reg16|Reg32|Word|Dword|Unspecified|BaseIndex|JumpAbsolute }\n-call, 1, 0xff, 0x2, 1, Cpu64, AMD64|Modrm|DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64|BNDPrefixOk|NoTrackPrefixOk, { Reg16|Reg64|Word|Qword|Unspecified|BaseIndex|JumpAbsolute }\n-call, 1, 0xff, 0x2, 1, Cpu64, Intel64|Modrm|DefaultSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64|BNDPrefixOk|NoTrackPrefixOk, { Reg64|Qword|Unspecified|BaseIndex|JumpAbsolute }\n+call, 1, 0xff, 0x2, 1, CpuNo64, Modrm|JumpAbsolute|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk|NoTrackPrefixOk, { Reg16|Reg32|Unspecified|BaseIndex }\n+call, 1, 0xff, 0x2, 1, Cpu64, AMD64|Modrm|JumpAbsolute|DefaultSize|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64|BNDPrefixOk|NoTrackPrefixOk, { Reg16|Reg64|Unspecified|BaseIndex }\n+call, 1, 0xff, 0x2, 1, Cpu64, Intel64|Modrm|JumpAbsolute|DefaultSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64|BNDPrefixOk|NoTrackPrefixOk, { Reg64|Unspecified|BaseIndex }\n // Intel Syntax\n call, 2, 0x9a, None, 1, CpuNo64, JumpInterSegment|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm16, Imm16|Imm32 }\n // Intel Syntax\n-call, 1, 0xff, 0x3, 1, 0, Modrm|DefaultSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf, { Dword|Fword|Unspecified|BaseIndex|JumpAbsolute }\n+call, 1, 0xff, 0x3, 1, 0, Modrm|JumpAbsolute|DefaultSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf, { Dword|Fword|Unspecified|BaseIndex }\n lcall, 2, 0x9a, None, 1, CpuNo64, JumpInterSegment|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm16, Imm16|Imm32 }\n-lcall, 1, 0xff, 0x3, 1, 0, Modrm|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Unspecified|BaseIndex|JumpAbsolute }\n+lcall, 1, 0xff, 0x3, 1, 0, Modrm|JumpAbsolute|DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Unspecified|BaseIndex }\n \n jmp, 1, 0xeb, None, 1, CpuNo64, Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32 }\n jmp, 1, 0xeb, None, 1, Cpu64, AMD64|Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp16|Disp32S }\n jmp, 1, 0xeb, None, 1, Cpu64, Intel64|Jump|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk, { Disp8|Disp32S }\n-jmp, 1, 0xff, 0x4, 1, CpuNo64, Modrm|No_bSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk|NoTrackPrefixOk, { Reg16|Reg32|Word|Dword|Unspecified|BaseIndex|JumpAbsolute }\n-jmp, 1, 0xff, 0x4, 1, Cpu64, AMD64|Modrm|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64|BNDPrefixOk|NoTrackPrefixOk, { Reg16|Reg64|Word|Qword|Unspecified|BaseIndex|JumpAbsolute }\n-jmp, 1, 0xff, 0x4, 1, Cpu64, Intel64|Modrm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64|BNDPrefixOk|NoTrackPrefixOk, { Reg64|Qword|Unspecified|BaseIndex|JumpAbsolute }\n+jmp, 1, 0xff, 0x4, 1, CpuNo64, Modrm|JumpAbsolute|No_bSuf|No_sSuf|No_qSuf|No_ldSuf|BNDPrefixOk|NoTrackPrefixOk, { Reg16|Reg32|Unspecified|BaseIndex }\n+jmp, 1, 0xff, 0x4, 1, Cpu64, AMD64|Modrm|JumpAbsolute|No_bSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64|BNDPrefixOk|NoTrackPrefixOk, { Reg16|Reg64|Unspecified|BaseIndex }\n+jmp, 1, 0xff, 0x4, 1, Cpu64, Intel64|Modrm|JumpAbsolute|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_ldSuf|NoRex64|BNDPrefixOk|NoTrackPrefixOk, { Reg64|Unspecified|BaseIndex }\n // Intel Syntax.\n jmp, 2, 0xea, None, 1, CpuNo64, JumpInterSegment|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm16, Imm16|Imm32 }\n // Intel Syntax.\n-jmp, 1, 0xff, 0x5, 1, 0, Modrm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf, { Dword|Fword|Unspecified|BaseIndex|JumpAbsolute }\n+jmp, 1, 0xff, 0x5, 1, 0, Modrm|JumpAbsolute|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf, { Dword|Fword|Unspecified|BaseIndex }\n ljmp, 2, 0xea, None, 1, CpuNo64, JumpInterSegment|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm16, Imm16|Imm32 }\n-ljmp, 1, 0xff, 0x5, 1, 0, Modrm|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Unspecified|BaseIndex|JumpAbsolute }\n+ljmp, 1, 0xff, 0x5, 1, 0, Modrm|JumpAbsolute|No_bSuf|No_sSuf|No_qSuf|No_ldSuf, { Unspecified|BaseIndex }\n \n ret, 0, 0xc3, None, 1, CpuNo64, DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf|RepPrefixOk|BNDPrefixOk, { 0 }\n ret, 1, 0xc2, None, 1, CpuNo64, DefaultSize|No_bSuf|No_sSuf|No_qSuf|No_ldSuf|RepPrefixOk|BNDPrefixOk, { Imm16 }"
    },
    {
      "sha": "bb406a534e587357bd1916118a3470d3ee8639af",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 26404,
      "deletions": 26404,
      "changes": 52808,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f2f06bea87613a6851607829e5893d74007f5bf/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=6f2f06bea87613a6851607829e5893d74007f5bf"
    }
  ]
}