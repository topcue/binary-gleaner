{
  "sha": "b596a3c77da2387d7e5a3855717d65ce33bdfb58",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjU5NmEzYzc3ZGEyMzg3ZDdlNWEzODU1NzE3ZDY1Y2UzM2JkZmI1OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-05-10T22:23:56Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-10T14:08:14Z"
    },
    "message": "Make psymtab_storage::free_psymtabs private\n\nThis adds a new psymtab allocation method to psymtab_storage and\nchanges the free_psymtabs member to be private.  While not strictly\nnecessary, this seems like a decent cleanup, and also makes it simpler\nto move psymtabs off of obstacks entirely, should that prove\ndesirable.\n\ngdb/ChangeLog\n2019-01-10  Tom Tromey  <tom@tromey.com>\n\n\t* psymtab.h (psymtab_storage::allocate_psymtab): New method.\n\t<free_psymtabs>: Now private.\n\t* psymtab.c (psymtab_storage::allocate_psymtab): Implement.\n\t(allocate_psymtab): Use new method.",
    "tree": {
      "sha": "8031414899706c82056f981b6811beb2c06e8e3f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8031414899706c82056f981b6811beb2c06e8e3f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b596a3c77da2387d7e5a3855717d65ce33bdfb58",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b596a3c77da2387d7e5a3855717d65ce33bdfb58",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b596a3c77da2387d7e5a3855717d65ce33bdfb58",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b596a3c77da2387d7e5a3855717d65ce33bdfb58/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a9342b62885d5119593fa4330924e031e14c6406",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9342b62885d5119593fa4330924e031e14c6406",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a9342b62885d5119593fa4330924e031e14c6406"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 42,
    "deletions": 21
  },
  "files": [
    {
      "sha": "4eeea5c12fb7096f1ebae67dfed9e5394bccec27",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b596a3c77da2387d7e5a3855717d65ce33bdfb58/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b596a3c77da2387d7e5a3855717d65ce33bdfb58/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b596a3c77da2387d7e5a3855717d65ce33bdfb58",
      "patch": "@@ -1,3 +1,10 @@\n+2019-01-10  Tom Tromey  <tom@tromey.com>\n+\n+\t* psymtab.h (psymtab_storage::allocate_psymtab): New method.\n+\t<free_psymtabs>: Now private.\n+\t* psymtab.c (psymtab_storage::allocate_psymtab): Implement.\n+\t(allocate_psymtab): Use new method.\n+\n 2019-01-10  Tom Tromey  <tom@tromey.com>\n \n \t* xcoffread.c (xcoff_end_psymtab): Use allocate_dependencies."
    },
    {
      "sha": "7ead0eb81ade8cb88813afc5c6248e0def2ea1b0",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 25,
      "deletions": 17,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b596a3c77da2387d7e5a3855717d65ce33bdfb58/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b596a3c77da2387d7e5a3855717d65ce33bdfb58/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=b596a3c77da2387d7e5a3855717d65ce33bdfb58",
      "patch": "@@ -78,6 +78,29 @@ psymtab_storage::~psymtab_storage ()\n   psymbol_bcache_free (psymbol_cache);\n }\n \n+/* See psymtab.h.  */\n+\n+struct partial_symtab *\n+psymtab_storage::allocate_psymtab ()\n+{\n+  struct partial_symtab *psymtab;\n+\n+  if (free_psymtabs != nullptr)\n+    {\n+      psymtab = free_psymtabs;\n+      free_psymtabs = psymtab->next;\n+    }\n+  else\n+    psymtab = XOBNEW (obstack (), struct partial_symtab);\n+\n+  memset (psymtab, 0, sizeof (struct partial_symtab));\n+\n+  psymtab->next = psymtabs;\n+  psymtabs = psymtab;\n+\n+  return psymtab;\n+}\n+\n \f\n \n /* See psymtab.h.  */\n@@ -1715,29 +1738,14 @@ init_psymbol_list (struct objfile *objfile, int total_symbols)\n struct partial_symtab *\n allocate_psymtab (const char *filename, struct objfile *objfile)\n {\n-  struct partial_symtab *psymtab;\n-\n-  if (objfile->partial_symtabs->free_psymtabs)\n-    {\n-      psymtab = objfile->partial_symtabs->free_psymtabs;\n-      objfile->partial_symtabs->free_psymtabs = psymtab->next;\n-    }\n-  else\n-    psymtab = XOBNEW (objfile->partial_symtabs->obstack (), partial_symtab);\n+  struct partial_symtab *psymtab\n+    = objfile->partial_symtabs->allocate_psymtab ();\n \n-  memset (psymtab, 0, sizeof (struct partial_symtab));\n   psymtab->filename\n     = (const char *) bcache (filename, strlen (filename) + 1,\n \t\t\t     objfile->per_bfd->filename_cache);\n   psymtab->compunit_symtab = NULL;\n \n-  /* Prepend it to the psymtab list for the objfile it belongs to.\n-     Psymtabs are searched in most recent inserted -> least recent\n-     inserted order.  */\n-\n-  psymtab->next = objfile->partial_symtabs->psymtabs;\n-  objfile->partial_symtabs->psymtabs = psymtab;\n-\n   if (symtab_create_debug)\n     {\n       /* Be a bit clever with debugging messages, and don't print objfile"
    },
    {
      "sha": "a21e88fd0a083c3e3b6478d0b86b9c52a5e11bad",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 10,
      "deletions": 4,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b596a3c77da2387d7e5a3855717d65ce33bdfb58/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b596a3c77da2387d7e5a3855717d65ce33bdfb58/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=b596a3c77da2387d7e5a3855717d65ce33bdfb58",
      "patch": "@@ -71,6 +71,12 @@ class psymtab_storage\n     return OBSTACK_CALLOC (obstack (), number, struct partial_symtab *);\n   }\n \n+  /* Allocate a new psymtab on the psymtab obstack.  The new psymtab\n+     will be linked in to the \"psymtabs\" list, but otherwise all other\n+     fields will be zero.  */\n+\n+  struct partial_symtab *allocate_psymtab ();\n+\n \n   /* Each objfile points to a linked list of partial symtabs derived from\n      this file, one partial symtab structure for each compilation unit\n@@ -85,10 +91,6 @@ class psymtab_storage\n \n   struct addrmap *psymtabs_addrmap = nullptr;\n \n-  /* List of freed partial symtabs, available for re-use.  */\n-\n-  struct partial_symtab *free_psymtabs = nullptr;\n-\n   /* A byte cache where we can stash arbitrary \"chunks\" of bytes that\n      will not change.  */\n \n@@ -102,6 +104,10 @@ class psymtab_storage\n \n private:\n \n+  /* List of freed partial symtabs, available for re-use.  */\n+\n+  struct partial_symtab *free_psymtabs = nullptr;\n+\n   /* The obstack where allocations are made.  */\n \n   struct obstack *m_obstack;"
    }
  ]
}