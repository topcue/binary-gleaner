{
  "sha": "e8b2f0d952184fac8a230db181a4b9810729cd7b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZThiMmYwZDk1MjE4NGZhYzhhMjMwZGIxODFhNGI5ODEwNzI5Y2Q3Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-11-14T02:40:29Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-11-14T02:42:50Z"
    },
    "message": "Use const more in c-lang.c\n\nThis changes a few functions in c-lang.c to add \"const\" to parameters\nand return types.  Tested by rebuilding.\n\ngdb/ChangeLog\n2020-11-13  Tom Tromey  <tom@tromey.com>\n\n\t* c-lang.c (convert_ucn, convert_octal, convert_hex)\n\t(convert_escape, parse_one_string): Constify.",
    "tree": {
      "sha": "5d9208680d527e63b9196055a440b73726c56bf3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5d9208680d527e63b9196055a440b73726c56bf3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e8b2f0d952184fac8a230db181a4b9810729cd7b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8b2f0d952184fac8a230db181a4b9810729cd7b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e8b2f0d952184fac8a230db181a4b9810729cd7b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8b2f0d952184fac8a230db181a4b9810729cd7b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1aa9981f1c2e226692d7117952199e51196e83c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1aa9981f1c2e226692d7117952199e51196e83c9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1aa9981f1c2e226692d7117952199e51196e83c9"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 19,
    "deletions": 14
  },
  "files": [
    {
      "sha": "2ae57d2d42d2f5e9fdcba26d29ea23928c565b52",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8b2f0d952184fac8a230db181a4b9810729cd7b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8b2f0d952184fac8a230db181a4b9810729cd7b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e8b2f0d952184fac8a230db181a4b9810729cd7b",
      "patch": "@@ -1,3 +1,8 @@\n+2020-11-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* c-lang.c (convert_ucn, convert_octal, convert_hex)\n+\t(convert_escape, parse_one_string): Constify.\n+\n 2020-11-13  Keith Seitz  <keiths@redhat.com>\n \n \thttps://bugzilla.redhat.com/show_bug.cgi?id=1553086"
    },
    {
      "sha": "624aea52f774284a1b23f44eb92d562ab65d2cac",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8b2f0d952184fac8a230db181a4b9810729cd7b/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8b2f0d952184fac8a230db181a4b9810729cd7b/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=e8b2f0d952184fac8a230db181a4b9810729cd7b",
      "patch": "@@ -398,8 +398,8 @@ c_get_string (struct value *value, gdb::unique_xmalloc_ptr<gdb_byte> *buffer,\n    OUTPUT.  LENGTH is the maximum length of the UCN, either 4 or 8.\n    Returns a pointer to just after the final digit of the UCN.  */\n \n-static char *\n-convert_ucn (char *p, char *limit, const char *dest_charset,\n+static const char *\n+convert_ucn (const char *p, const char *limit, const char *dest_charset,\n \t     struct obstack *output, int length)\n {\n   unsigned long result = 0;\n@@ -440,9 +440,9 @@ emit_numeric_character (struct type *type, unsigned long value,\n    farther than LIMIT.  The result is written to OUTPUT.  Returns a\n    pointer to just after the final digit of the escape sequence.  */\n \n-static char *\n-convert_octal (struct type *type, char *p, \n-\t       char *limit, struct obstack *output)\n+static const char *\n+convert_octal (struct type *type, const char *p,\n+\t       const char *limit, struct obstack *output)\n {\n   int i;\n   unsigned long value = 0;\n@@ -465,9 +465,9 @@ convert_octal (struct type *type, char *p,\n    than LIMIT.  The result is written to OUTPUT.  Returns a pointer to\n    just after the final digit of the escape sequence.  */\n \n-static char *\n-convert_hex (struct type *type, char *p,\n-\t     char *limit, struct obstack *output)\n+static const char *\n+convert_hex (struct type *type, const char *p,\n+\t     const char *limit, struct obstack *output)\n {\n   unsigned long value = 0;\n \n@@ -496,9 +496,9 @@ convert_hex (struct type *type, char *p,\n    written to OUTPUT.  Returns a pointer to just past the final\n    character of the escape sequence.  */\n \n-static char *\n+static const char *\n convert_escape (struct type *type, const char *dest_charset,\n-\t\tchar *p, char *limit, struct obstack *output)\n+\t\tconst char *p, const char *limit, struct obstack *output)\n {\n   /* Skip the backslash.  */\n   ADVANCE;\n@@ -550,24 +550,24 @@ convert_escape (struct type *type, const char *dest_charset,\n    and TYPE is the type of target character to use.  */\n \n static void\n-parse_one_string (struct obstack *output, char *data, int len,\n+parse_one_string (struct obstack *output, const char *data, int len,\n \t\t  const char *dest_charset, struct type *type)\n {\n-  char *limit;\n+  const char *limit;\n \n   limit = data + len;\n \n   while (data < limit)\n     {\n-      char *p = data;\n+      const char *p = data;\n \n       /* Look for next escape, or the end of the input.  */\n       while (p < limit && *p != '\\\\')\n \t++p;\n       /* If we saw a run of characters, convert them all.  */\n       if (p > data)\n \tconvert_between_encodings (host_charset (), dest_charset,\n-\t\t\t\t   (gdb_byte *) data, p - data, 1,\n+\t\t\t\t   (const gdb_byte *) data, p - data, 1,\n \t\t\t\t   output, translit_none);\n       /* If we saw an escape, convert it.  */\n       if (p < limit)"
    }
  ]
}