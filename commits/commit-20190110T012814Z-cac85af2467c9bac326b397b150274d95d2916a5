{
  "sha": "cac85af2467c9bac326b397b150274d95d2916a5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2FjODVhZjI0NjdjOWJhYzMyNmIzOTdiMTUwMjc0ZDk1ZDI5MTZhNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-11-24T00:09:34Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-10T01:28:14Z"
    },
    "message": "Remove ALL_OBJFILES_SAFE\n\nThis removes the ALL_OBJFILES_SAFE macro, replacing the uses with\nranged for loops.\n\ngdb/ChangeLog\n2019-01-09  Tom Tromey  <tom@tromey.com>\n\n\t* common/next-iterator.h (next_adapter): Add Iterator template\n\tparameter.\n\t* objfiles.h (ALL_OBJFILES_SAFE): Remove.\n\t(class all_objfiles_safe): New.\n\t* jit.c (jit_inferior_exit_hook): Use all_objfiles_safe.\n\t* objfiles.c (put_objfile_before): Update comment.\n\t(add_separate_debug_objfile): Likewise.\n\t(free_all_objfiles): Use all_objfiles_safe.\n\t(objfile_purge_solibs): Likewise.",
    "tree": {
      "sha": "1e9c3722cd2e1592218f8dc5c7e31a154d848a3e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1e9c3722cd2e1592218f8dc5c7e31a154d848a3e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cac85af2467c9bac326b397b150274d95d2916a5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cac85af2467c9bac326b397b150274d95d2916a5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cac85af2467c9bac326b397b150274d95d2916a5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cac85af2467c9bac326b397b150274d95d2916a5/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aed57c537116ae91f553ac835b3f96d1f87b3bb0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aed57c537116ae91f553ac835b3f96d1f87b3bb0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aed57c537116ae91f553ac835b3f96d1f87b3bb0"
    }
  ],
  "stats": {
    "total": 79,
    "additions": 49,
    "deletions": 30
  },
  "files": [
    {
      "sha": "e51c19c1faae0acd50d5c6606679e2c55f29b26b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cac85af2467c9bac326b397b150274d95d2916a5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cac85af2467c9bac326b397b150274d95d2916a5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cac85af2467c9bac326b397b150274d95d2916a5",
      "patch": "@@ -1,3 +1,15 @@\n+2019-01-09  Tom Tromey  <tom@tromey.com>\n+\n+\t* common/next-iterator.h (next_adapter): Add Iterator template\n+\tparameter.\n+\t* objfiles.h (ALL_OBJFILES_SAFE): Remove.\n+\t(class all_objfiles_safe): New.\n+\t* jit.c (jit_inferior_exit_hook): Use all_objfiles_safe.\n+\t* objfiles.c (put_objfile_before): Update comment.\n+\t(add_separate_debug_objfile): Likewise.\n+\t(free_all_objfiles): Use all_objfiles_safe.\n+\t(objfile_purge_solibs): Likewise.\n+\n 2019-01-09  Tom Tromey  <tom@tromey.com>\n \n \t* symtab.c (iterate_over_symtabs, matching_obj_sections)"
    },
    {
      "sha": "b61b253bd9d6ea69b06a14ee62150a9b21aa677f",
      "filename": "gdb/common/next-iterator.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cac85af2467c9bac326b397b150274d95d2916a5/gdb/common/next-iterator.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cac85af2467c9bac326b397b150274d95d2916a5/gdb/common/next-iterator.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/next-iterator.h?ref=cac85af2467c9bac326b397b150274d95d2916a5",
      "patch": "@@ -72,7 +72,7 @@ struct next_iterator\n \n /* A range adapter that allows iterating over a linked list.  */\n \n-template<typename T>\n+template<typename T, typename Iterator = next_iterator<T>>\n class next_adapter\n {\n public:\n@@ -82,7 +82,7 @@ class next_adapter\n   {\n   }\n \n-  using iterator = next_iterator<T>;\n+  using iterator = Iterator;\n \n   iterator begin () const\n   {"
    },
    {
      "sha": "8b7f715824c25308f18a076c6ef6dd0249b9a358",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cac85af2467c9bac326b397b150274d95d2916a5/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cac85af2467c9bac326b397b150274d95d2916a5/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=cac85af2467c9bac326b397b150274d95d2916a5",
      "patch": "@@ -1393,10 +1393,7 @@ jit_breakpoint_re_set (void)\n static void\n jit_inferior_exit_hook (struct inferior *inf)\n {\n-  struct objfile *objf;\n-  struct objfile *temp;\n-\n-  ALL_OBJFILES_SAFE (objf, temp)\n+  for (objfile *objf : all_objfiles_safe (current_program_space))\n     {\n       struct jit_objfile_data *objf_data\n \t= (struct jit_objfile_data *) objfile_data (objf, jit_objfile_data);"
    },
    {
      "sha": "5d46e69dc316a3ec63bf84426f5d0b80546a099a",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 10,
      "deletions": 16,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cac85af2467c9bac326b397b150274d95d2916a5/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cac85af2467c9bac326b397b150274d95d2916a5/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=cac85af2467c9bac326b397b150274d95d2916a5",
      "patch": "@@ -514,7 +514,7 @@ objfile_separate_debug_iterate (const struct objfile *parent,\n \n /* Put one object file before a specified on in the global list.\n    This can be used to make sure an object file is destroyed before\n-   another when using ALL_OBJFILES_SAFE to free all objfiles.  */\n+   another when using all_objfiles_safe to free all objfiles.  */\n void\n put_objfile_before (struct objfile *objfile, struct objfile *before_this)\n {\n@@ -587,7 +587,7 @@ add_separate_debug_objfile (struct objfile *objfile, struct objfile *parent)\n   parent->separate_debug_objfile = objfile;\n \n   /* Put the separate debug object before the normal one, this is so that\n-     usage of the ALL_OBJFILES_SAFE macro will stay safe.  */\n+     usage of all_objfiles_safe will stay safe.  */\n   put_objfile_before (objfile, parent);\n }\n \n@@ -730,17 +730,14 @@ objfile::~objfile ()\n void\n free_all_objfiles (void)\n {\n-  struct objfile *objfile, *temp;\n   struct so_list *so;\n \n   /* Any objfile referencewould become stale.  */\n   for (so = master_so_list (); so; so = so->next)\n     gdb_assert (so->objfile == NULL);\n \n-  ALL_OBJFILES_SAFE (objfile, temp)\n-  {\n+  for (objfile *objfile : all_objfiles_safe (current_program_space))\n     delete objfile;\n-  }\n   clear_symtab_users (0);\n }\n \f\n@@ -1047,17 +1044,14 @@ have_full_symbols (void)\n void\n objfile_purge_solibs (void)\n {\n-  struct objfile *objf;\n-  struct objfile *temp;\n-\n-  ALL_OBJFILES_SAFE (objf, temp)\n-  {\n-    /* We assume that the solib package has been purged already, or will\n-       be soon.  */\n+  for (objfile *objf : all_objfiles_safe (current_program_space))\n+    {\n+      /* We assume that the solib package has been purged already, or will\n+\t be soon.  */\n \n-    if (!(objf->flags & OBJF_USERLOADED) && (objf->flags & OBJF_SHARED))\n-      delete objf;\n-  }\n+      if (!(objf->flags & OBJF_USERLOADED) && (objf->flags & OBJF_SHARED))\n+\tdelete objf;\n+    }\n }\n \n "
    },
    {
      "sha": "cb3668aff651f4f2b631d04f0d3202f2d739a557",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 24,
      "deletions": 8,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cac85af2467c9bac326b397b150274d95d2916a5/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cac85af2467c9bac326b397b150274d95d2916a5/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=cac85af2467c9bac326b397b150274d95d2916a5",
      "patch": "@@ -29,6 +29,7 @@\n #include \"gdb_bfd.h\"\n #include <vector>\n #include \"common/next-iterator.h\"\n+#include \"common/safe-iterator.h\"\n \n struct bcache;\n struct htab;\n@@ -581,21 +582,36 @@ class all_objfiles : public next_adapter<struct objfile>\n   }\n };\n \n+/* An iterarable object that can be used to iterate over all\n+   objfiles.  The basic use is in a foreach, like:\n \n-/* Traverse all object files in the current program space.\n-   ALL_OBJFILES_SAFE works even if you delete the objfile during the\n-   traversal.  */\n+   for (objfile *objf : all_objfiles_safe (pspace)) { ... }\n+\n+   This variant uses a basic_safe_iterator so that objfiles can be\n+   deleted during iteration.  */\n+\n+class all_objfiles_safe\n+  : public next_adapter<struct objfile,\n+\t\t\tbasic_safe_iterator<next_iterator<objfile>>>\n+{\n+public:\n+\n+  explicit all_objfiles_safe (struct program_space *pspace)\n+    : next_adapter<struct objfile,\n+\t\t   basic_safe_iterator<next_iterator<objfile>>>\n+        (pspace->objfiles)\n+  {\n+  }\n+};\n+\n+\n+/* Traverse all object files in the current program space.  */\n \n #define ALL_OBJFILES(obj)\t\t\t    \\\n   for ((obj) = current_program_space->objfiles; \\\n        (obj) != NULL;\t\t\t\t    \\\n        (obj) = (obj)->next)\n \n-#define ALL_OBJFILES_SAFE(obj,nxt)\t\t\t\\\n-  for ((obj) = current_program_space->objfiles;\t\\\n-       (obj) != NULL? ((nxt)=(obj)->next,1) :0;\t\\\n-       (obj) = (nxt))\n-\n /* Traverse all symtabs in one objfile.  */\n \n #define ALL_OBJFILE_FILETABS(objfile, cu, s) \\"
    }
  ]
}