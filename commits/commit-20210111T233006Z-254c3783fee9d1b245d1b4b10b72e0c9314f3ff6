{
  "sha": "254c3783fee9d1b245d1b4b10b72e0c9314f3ff6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjU0YzM3ODNmZWU5ZDFiMjQ1ZDFiNGIxMGI3MmUwYzkzMTRmM2ZmNg==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-01-09T22:57:48Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-01-11T23:30:06Z"
    },
    "message": "sim: tests: get common tests working again\n\nThese were written with 32-bit host assumptions baked into it.\nSimplify the printf formats to use ll length modifier as it's\nin C11 rather than trying to manually break it up into two,\nand cleanup some of the casts to stop assuming sizeof(long) is\nthe same as sizeof(int).\n\nWe also have to add a few more includes for the various funcs\nused in here.\n\nThe tests aren't compiled automatically still.  We can figure\nthat out later with more work.",
    "tree": {
      "sha": "9fc99a67370a0c9df56eacbdb63c0bfab04c1ebe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9fc99a67370a0c9df56eacbdb63c0bfab04c1ebe"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c6185dce03deb07b4c824d04969ab88abaf63460",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6185dce03deb07b4c824d04969ab88abaf63460",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c6185dce03deb07b4c824d04969ab88abaf63460"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 46,
    "deletions": 41
  },
  "files": [
    {
      "sha": "a32672a46beacf45a8e83b0c3c62ecfd2eeda9e6",
      "filename": "sim/testsuite/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6/sim/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6/sim/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/ChangeLog?ref=254c3783fee9d1b245d1b4b10b72e0c9314f3ff6",
      "patch": "@@ -1,3 +1,18 @@\n+2021-01-11  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* common/alu-tst.c: Include stdlib.h.\n+\t(PACKAGE): Define.\n+\t(print_hex): Change printf to use %llx.\n+\t* common/bits-gen.c: Include stdlib.h, string.h, and unistd.h.\n+\t(gen_struct): Change long long to unsigned64.\n+\t(gen_bit): Change bit cast to bit mask.  Change printf to use %llx.\n+\t(gen_mask): Likewise.\n+\t(usage): Delete default case.\n+\t(main): Change WITH_HOST_WORD_BITSIZE printf from %d to %zu.  Emit\n+\tPACKAGE define and stdlib.h & string.h includes.\n+\t* common/bits-tst.c (calc): Change printf to use %llx.\n+\t(check_sext, check_rot, check_extract, check_bits): Likewise.\n+\n 2021-01-09  Mike Frysinger  <vapier@gentoo.org>\n \n \t* configure: Regenerate.\n@@ -368,4 +383,3 @@ Mon Sep  1 16:43:55 1997  Andrew Cagney  <cagney@b1.cygnus.com>\n \n \t* configure.in (configdirs): Test for the target directory instead\n  \tof matching on a target.\n-"
    },
    {
      "sha": "110427f62d8ac56124b37e283aa74b81dde4c679",
      "filename": "sim/testsuite/common/alu-tst.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6/sim/testsuite/common/alu-tst.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6/sim/testsuite/common/alu-tst.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/common/alu-tst.c?ref=254c3783fee9d1b245d1b4b10b72e0c9314f3ff6",
      "patch": "@@ -14,8 +14,11 @@\n \n #define SIM_BITS_INLINE (INCLUDE_MODULE | INCLUDED_BY_MODULE)\n \n+#include <stdlib.h>\n #include <string.h>\n \n+#define PACKAGE \"sim\"\n+\n #include \"sim-basics.h\"\n \n #include \"sim-alu.h\"\n@@ -62,9 +65,7 @@ print_hex (unsigned64 val, int nr_bits)\n       printf (\"0x%08lx\", (long) (unsigned32) (val));\n       break;\n     case 64:\n-      printf (\"0x%08lx%08lx\",\n-\t      (long) (unsigned32) (val >> 32),\n-\t      (long) (unsigned32) (val));\n+      printf (\"0x%016llx\", (long long) (unsigned64) (val));\n       break;\n     default:\n       abort ();"
    },
    {
      "sha": "a85b807bb19604de46a8c5d3409fe38ce8db256a",
      "filename": "sim/testsuite/common/bits-gen.c",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6/sim/testsuite/common/bits-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6/sim/testsuite/common/bits-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/common/bits-gen.c?ref=254c3783fee9d1b245d1b4b10b72e0c9314f3ff6",
      "patch": "@@ -17,9 +17,10 @@ GNU General Public License for more details.\n You should have received a copy of the GNU General Public License\n along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n-\n #include <stdio.h>\n-\n+#include <stdlib.h>\n+#include <string.h>\n+#include <unistd.h>\n \n void\n gen_struct (void)\n@@ -29,8 +30,8 @@ gen_struct (void)\n   printf (\"  int line;\\n\");\n   printf (\"  int row;\\n\");\n   printf (\"  int col;\\n\");\n-  printf (\"  long long val;\\n\");\n-  printf (\"  long long check;\\n\");\n+  printf (\"  unsigned64 val;\\n\");\n+  printf (\"  unsigned64 check;\\n\");\n   printf (\"} test_tuples;\\n\");\n   printf (\"\\n\");\n   printf (\"typedef struct _test_spec {\\n\");\n@@ -62,13 +63,12 @@ gen_bit (int bitsize,\n       else\n \tbit <<= i;\n       if (bitsize == 32)\n-\tbit = (unsigned) bit; /* truncate it! */\n+\tbit &= 0xffffffff; /* truncate it! */\n       /* write it out */\n       printf (\"  { __LINE__, \");\n       printf (\"%d, %2d, \", -1, i);\n       printf (\"%s (%2d), \", macro, i);\n-      printf (\"UNSIGNED64 (0x%08lx%08lx), \",\n-\t      (long) (bit >> 32), (long) bit);\n+      printf (\"UNSIGNED64 (0x%016llx), \", bit);\n       printf (\"},\\n\");\n     }\n   printf (\"};\\n\");\n@@ -141,11 +141,10 @@ gen_mask (int bitsize,\n \t\t  mask |= bit;\n \t\t}\n \t      if (bitsize == 32)\n-\t\tmask = (unsigned long) mask;\n+\t\tmask &= 0xffffffff;\n \t      printf (\"%d, %d, \", l, h);\n \t      printf (\"%s%s (%2d, %2d), \", msb, macro, l, h);\n-\t      printf (\"UNSIGNED64 (0x%08lx%08lx), \",\n-\t\t      (long) (mask >> 32), (long) mask);\n+\t      printf (\"UNSIGNED64 (0x%llx), \", mask);\n \t    }\n \t  else\n \t    printf (\"-1, -1, \");\n@@ -184,7 +183,6 @@ usage (int reason)\n     case 4:\n       fprintf (stderr, \"Invalid <byte-order> argument\\n\");\n       break;\n-    default:\n     }\n \n   exit (1);\n@@ -232,13 +230,16 @@ main (int argc, char *argv[])\n \n   printf (\"#define WITH_TARGET_WORD_BITSIZE %d\\n\", bitsize);\n   printf (\"#define WITH_TARGET_WORD_MSB %d\\n\", msb);\n-  printf (\"#define WITH_HOST_WORD_BITSIZE %d\\n\", sizeof (int) * 8);\n+  printf (\"#define WITH_HOST_WORD_BITSIZE %zu\\n\", sizeof (int) * 8);\n   printf (\"#define WITH_TARGET_BYTE_ORDER %s\\n\", big_endian ? \"BFD_ENDIAN_BIG\" : \"BFD_ENDIAN_LITTLE\");\n   printf (\"\\n\");\n   printf (\"#define SIM_BITS_INLINE (ALL_H_INLINE)\\n\");\n   printf (\"\\n\");\n   printf (\"#define ASSERT(X) do { if (!(X)) abort(); } while (0)\\n\");\n   printf (\"\\n\");\n+  printf (\"#define PACKAGE \\\"sim\\\"\\n\");\n+  printf (\"#include <stdlib.h>\\n\");\n+  printf (\"#include <string.h>\\n\");\n   printf (\"#include \\\"sim-basics.h\\\"\\n\");\n \n   gen_struct ();"
    },
    {
      "sha": "bcdee1070b9dfa516c9d976d79b16f335544b11b",
      "filename": "sim/testsuite/common/bits-tst.c",
      "status": "modified",
      "additions": 14,
      "deletions": 25,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6/sim/testsuite/common/bits-tst.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/254c3783fee9d1b245d1b4b10b72e0c9314f3ff6/sim/testsuite/common/bits-tst.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/common/bits-tst.c?ref=254c3783fee9d1b245d1b4b10b72e0c9314f3ff6",
      "patch": "@@ -153,8 +153,8 @@ calc (const char *call,\n   else\n     {\n       fprintf (stderr,\n-\t       \"Unknown call passed to calc (%s, 0x%08lx%08lx, %d, %d)\\n\",\n-\t       call, (long)(val >> 32), (long)val, row, col);\n+\t       \"Unknown call passed to calc (%s, 0x%016llx, %d, %d)\\n\",\n+\t       call, val, row, col);\n       abort ();\n       return val;\n     }\n@@ -185,32 +185,26 @@ check_sext (int nr_bits,\n \t  fprintf (stderr,\n \t\t   \"%s:%d: \", __FILE__, __LINE__);\n \t  fprintf (stderr,\n-\t\t   \" %s(0x%08lx%08lx,%d) == 0x%08lx%08lx wrong, != 0x%08lx%08lx\\n\",\n-\t\t   sexted, (long)(mask_0 >> 32), (long)mask_0, col,\n-\t\t   (long)(sext_0 >> 32), (long)sext_0,\n-\t\t   (long)(mask_1 >> 32), (long)mask_1);\n+\t\t   \" %s(0x%016llx,%d) == 0x%016llx wrong, != 0x%016llx\\n\",\n+\t\t   sexted, mask_0, col, sext_0, mask_1);\n \t  errors ++;\n \t}\n       if (sext_1 != mask_1)\n \t{\n \t  fprintf (stderr,\n \t\t   \"%s:%d: \", __FILE__, __LINE__);\n \t  fprintf (stderr,\n-\t\t   \" %s(0x%08lx%08lx,%d) == 0x%08lx%08lx wrong, != 0x%08lx%08lx\\n\",\n-\t\t   sexted, (long)(mask_1 >> 32), (long)mask_1, col,\n-\t\t   (long)(sext_1 >> 32), (long)sext_1,\n-\t\t   (long)(mask_1 >> 32), (long)mask_1);\n+\t\t   \" %s(0x%016llx,%d) == 0x%016llx wrong, != 0x%016llx\\n\",\n+\t\t   sexted, mask_1, col, sext_1, mask_1);\n \t  errors ++;\n \t}\n       if (sext != msmask)\n \t{\n \t  fprintf (stderr,\n \t\t   \"%s:%d: \", __FILE__, __LINE__);\n \t  fprintf (stderr,\n-\t\t   \" %s(0x%08lx%08lx,%d) == 0x%08lx%08lx wrong, != 0x%08lx%08lx (%s(%d,%d))\\n\",\n-\t\t   sexted, (long)(mask >> 32), (long)mask, col,\n-\t\t   (long)(sext >> 32), (long)sext,\n-\t\t   (long)(msmask >> 32), (long)msmask,\n+\t\t   \" %s(0x%016llx,%d) == 0x%016llx wrong, != 0x%016llx (%s(%d,%d))\\n\",\n+\t\t   sexted, mask, col, sext, msmask,\n \t\t   msmasked, 0, (msb_nr ? nr_bits - col - 1 : col));\n \t  errors ++;\n \t}\n@@ -244,10 +238,8 @@ check_rot (int nr_bits,\n \t\t  || (shift != 0 && rot == mask && abs(row - col) != (nr_bits - 1)))\n \t\t{\n \t\t  fprintf (stderr, \"%s:%d: \", __FILE__, __LINE__);\n-\t\t  fprintf (stderr, \" %s(%s(0x%08lx%08lx,%d) == 0x%08lx%08lx, %d) failed\\n\",\n-\t\t\t   roted, roted,\n-\t\t\t   (long)(mask >> 32), (long)mask, shift,\n-\t\t\t   (long)(urot >> 32), (long)urot, -shift);\n+\t\t  fprintf (stderr, \" %s(%s(0x%016llx,%d) == 0x%016llx, %d) failed\\n\",\n+\t\t\t   roted, roted, mask, shift, urot, -shift);\n \t\t  errors ++;\n \t\t}\n \t    }\n@@ -276,10 +268,8 @@ check_extract (int nr_bits,\n \t  if (mask != inst)\n \t    {\n \t      fprintf (stderr, \"%s:%d: \", __FILE__, __LINE__);\n-\t      fprintf (stderr, \" %s(%d,%d)=0x%08lx%08lx -> %s=0x%08lx%08lx -> %s=0x%08lx%08lx failed\\n\",\n-\t\t       masked, row, col, (long)(mask >> 32), (long)mask,\n-\t\t       extracted, (long)(extr >> 32), (long)extr,\n-\t\t       inserted, (long)(inst >> 32), (long)inst);\n+\t      fprintf (stderr, \" %s(%d,%d)=0x%016llx -> %s=0x%016llx -> %s=0x%016llx failed\\n\",\n+\t\t       masked, row, col, mask, extracted, extr, inserted, inst);\n \t      errors ++;\n \t    }\n \t}\n@@ -317,9 +307,8 @@ check_bits (int call,\n \t\t      fprintf (stderr, \" (%d, %d)\", tuple->row, tuple->col);\n \t\t    else\n \t\t      fprintf (stderr, \" (%d)\", tuple->col);\n-\t\t    fprintf (stderr, \" == 0x%08lx%08lx wrong, != 0x%08lx%08lx\\n\",\n-\t\t\t     (long) (val >> 32), (long) val,\n-\t\t\t     (long) (check >> 32), (long) check);\n+\t\t    fprintf (stderr, \" == 0x%016llx wrong, != 0x%016llx\\n\",\n+\t\t\t     val, check);\n \t\t    errors ++;\n \t\t  }\n \t      }"
    }
  ]
}