{
  "sha": "4e962e74e45f2b0365e5b21504f33480c468ff00",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGU5NjJlNzRlNDVmMmIwMzY1ZTViMjE1MDRmMzM0ODBjNDY4ZmYwMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-05-13T19:21:48Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-09-03T16:20:40Z"
    },
    "message": "Handle biased types\n\nIn Ada, the programmer can request that a range type with a non-zero\nbase be stored in the minimal number of bits required for the range.\nThis is done by biasing the values; so, for example, a range of -7..-4\nmay be stored as two bits with a bias of -7.\n\nThis patch implements this for gdb.  It is done by adding a bias to\nstruct range_bounds and then adjusting a few spots to handle this.\n\nThe test case is written to use -fgnat-encodings=minimal, but a future\ncompiler patch will change the compiler to emit DW_AT_GNU_bias with\n-fgnat-encodings=gdb.  It seemed good to get the gdb patch in first.\n\nTested on x86-64 Fedora 29; plus a variety of targets using AdaCore's\ninternal test suite.\n\ngdb/ChangeLog\n2019-09-03  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-valprint.c (ada_val_print_num): Don't recurse for range\n\ttypes.\n\t(has_negatives): Unbias a range type bound.\n\t* dwarf2read.c (read_subrange_type): Handle DW_AT_GNU_bias.\n\t* gdbtypes.c (operator==): Handle new field.\n\t(create_range_type): Add \"bias\" parameter.\n\t(create_static_range_type, resolve_dynamic_range): Update.\n\t* gdbtypes.h (struct range_bounds) <bias>: New member.\n\t(create_range_type): Add bias parameter.\n\t* printcmd.c (print_scalar_formatted): Unbias range types.\n\t* value.c (unpack_long): Unbias range types.\n\t(pack_long): Bias range types.\n\ngdb/testsuite/ChangeLog\n2019-09-03  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/bias.exp: New file.\n\t* gdb.ada/bias/bias.adb: New file.\n\t* gdb.ada/print_chars.exp: Add regression test.\n\t* gdb.ada/print_chars/foo.adb (My_Character): New type.\n\t(MC): New variable.",
    "tree": {
      "sha": "7f20b55fbf46c379db243e1bcbf8a84ccd55c028",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7f20b55fbf46c379db243e1bcbf8a84ccd55c028"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4e962e74e45f2b0365e5b21504f33480c468ff00",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e962e74e45f2b0365e5b21504f33480c468ff00",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4e962e74e45f2b0365e5b21504f33480c468ff00",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e962e74e45f2b0365e5b21504f33480c468ff00/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f44b758d3133ef0a7f3131c1e12ed20feb33ee61",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f44b758d3133ef0a7f3131c1e12ed20feb33ee61",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f44b758d3133ef0a7f3131c1e12ed20feb33ee61"
    }
  ],
  "stats": {
    "total": 285,
    "additions": 251,
    "deletions": 34
  },
  "files": [
    {
      "sha": "5d88be8a7256e9cb2ea0cf927f626b5f349b9b85",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -1,3 +1,18 @@\n+2019-09-03  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-valprint.c (ada_val_print_num): Don't recurse for range\n+\ttypes.\n+\t(has_negatives): Unbias a range type bound.\n+\t* dwarf2read.c (read_subrange_type): Handle DW_AT_GNU_bias.\n+\t* gdbtypes.c (operator==): Handle new field.\n+\t(create_range_type): Add \"bias\" parameter.\n+\t(create_static_range_type, resolve_dynamic_range): Update.\n+\t* gdbtypes.h (struct range_bounds) <bias>: New member.\n+\t(create_range_type): Add bias parameter.\n+\t* printcmd.c (print_scalar_formatted): Unbias range types.\n+\t* value.c (unpack_long): Unbias range types.\n+\t(pack_long): Bias range types.\n+\n 2019-09-02  Alan Hayward  <alan.hayward@arm.com>\n \n \t* solib-svr4.c (svr4_find_and_create_probe_breakpoints): Check all"
    },
    {
      "sha": "347c67f95c52e7c24dcedb58ce91f06da3ed0272",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -2361,7 +2361,7 @@ has_negatives (struct type *type)\n     case TYPE_CODE_INT:\n       return !TYPE_UNSIGNED (type);\n     case TYPE_CODE_RANGE:\n-      return TYPE_LOW_BOUND (type) < 0;\n+      return TYPE_LOW_BOUND (type) - TYPE_RANGE_DATA (type)->bias < 0;\n     }\n }\n "
    },
    {
      "sha": "3060eb676b6f923f294ecc2a1ca7dd25be2ba5e5",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -841,8 +841,15 @@ ada_val_print_num (struct type *type, const gdb_byte *valaddr,\n       fputs_filtered (str.c_str (), stream);\n       return;\n     }\n-  else if (TYPE_CODE (type) == TYPE_CODE_RANGE)\n+  else if (TYPE_CODE (type) == TYPE_CODE_RANGE\n+\t   && (TYPE_CODE (TYPE_TARGET_TYPE (type)) == TYPE_CODE_ENUM\n+\t       || TYPE_CODE (TYPE_TARGET_TYPE (type)) == TYPE_CODE_BOOL\n+\t       || TYPE_CODE (TYPE_TARGET_TYPE (type)) == TYPE_CODE_CHAR))\n     {\n+      /* For enum-valued ranges, we want to recurse, because we'll end\n+\t up printing the constant's name rather than its numeric\n+\t value.  Character and fixed-point types are also printed\n+\t differently, so recuse for those as well.  */\n       struct type *target_type = TYPE_TARGET_TYPE (type);\n \n       if (TYPE_LENGTH (type) != TYPE_LENGTH (target_type))"
    },
    {
      "sha": "fb888da7b8e3fee1c725a64d905538dd70304ab7",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -17901,6 +17901,11 @@ read_subrange_type (struct die_info *die, struct dwarf2_cu *cu)\n \t}\n     }\n \n+  LONGEST bias = 0;\n+  struct attribute *bias_attr = dwarf2_attr (die, DW_AT_GNU_bias, cu);\n+  if (bias_attr != nullptr && attr_form_is_constant (bias_attr))\n+    bias = dwarf2_get_attr_constant_value (bias_attr, 0);\n+\n   /* Normally, the DWARF producers are expected to use a signed\n      constant form (Eg. DW_FORM_sdata) to express negative bounds.\n      But this is unfortunately not always the case, as witnessed\n@@ -17917,7 +17922,7 @@ read_subrange_type (struct die_info *die, struct dwarf2_cu *cu)\n       && !TYPE_UNSIGNED (base_type) && (high.data.const_val & negative_mask))\n     high.data.const_val |= negative_mask;\n \n-  range_type = create_range_type (NULL, orig_base_type, &low, &high);\n+  range_type = create_range_type (NULL, orig_base_type, &low, &high, bias);\n \n   if (high_bound_is_count)\n     TYPE_RANGE_DATA (range_type)->flag_upper_bound_is_count = 1;"
    },
    {
      "sha": "4bc02e08f96127455ba62f1536d3e72823f9945b",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -901,7 +901,8 @@ operator== (const range_bounds &l, const range_bounds &r)\n   return (FIELD_EQ (low)\n \t  && FIELD_EQ (high)\n \t  && FIELD_EQ (flag_upper_bound_is_count)\n-\t  && FIELD_EQ (flag_bound_evaluated));\n+\t  && FIELD_EQ (flag_bound_evaluated)\n+\t  && FIELD_EQ (bias));\n \n #undef FIELD_EQ\n }\n@@ -912,7 +913,8 @@ operator== (const range_bounds &l, const range_bounds &r)\n struct type *\n create_range_type (struct type *result_type, struct type *index_type,\n \t\t   const struct dynamic_prop *low_bound,\n-\t\t   const struct dynamic_prop *high_bound)\n+\t\t   const struct dynamic_prop *high_bound,\n+\t\t   LONGEST bias)\n {\n   /* The INDEX_TYPE should be a type capable of holding the upper and lower\n      bounds, as such a zero sized, or void type makes no sense.  */\n@@ -932,6 +934,7 @@ create_range_type (struct type *result_type, struct type *index_type,\n     TYPE_ZALLOC (result_type, sizeof (struct range_bounds));\n   TYPE_RANGE_DATA (result_type)->low = *low_bound;\n   TYPE_RANGE_DATA (result_type)->high = *high_bound;\n+  TYPE_RANGE_DATA (result_type)->bias = bias;\n \n   if (low_bound->kind == PROP_CONST && low_bound->data.const_val >= 0)\n     TYPE_UNSIGNED (result_type) = 1;\n@@ -968,7 +971,7 @@ create_static_range_type (struct type *result_type, struct type *index_type,\n   high.kind = PROP_CONST;\n   high.data.const_val = high_bound;\n \n-  result_type = create_range_type (result_type, index_type, &low, &high);\n+  result_type = create_range_type (result_type, index_type, &low, &high, 0);\n \n   return result_type;\n }\n@@ -2015,9 +2018,10 @@ resolve_dynamic_range (struct type *dyn_range_type,\n   static_target_type\n     = resolve_dynamic_type_internal (TYPE_TARGET_TYPE (dyn_range_type),\n \t\t\t\t     addr_stack, 0);\n+  LONGEST bias = TYPE_RANGE_DATA (dyn_range_type)->bias;\n   static_range_type = create_range_type (copy_type (dyn_range_type),\n \t\t\t\t\t static_target_type,\n-\t\t\t\t\t &low_bound, &high_bound);\n+\t\t\t\t\t &low_bound, &high_bound, bias);\n   TYPE_RANGE_DATA (static_range_type)->flag_bound_evaluated = 1;\n   return static_range_type;\n }"
    },
    {
      "sha": "c62b8a31ba784347b394d55f27f9d50c15a5e2c4",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -617,6 +617,11 @@ struct range_bounds\n \n   struct dynamic_prop high;\n \n+  /* * The bias.  Sometimes a range value is biased before storage.\n+     The bias is added to the stored bits to form the true value.  */\n+\n+  LONGEST bias;\n+\n   /* True if HIGH range bound contains the number of elements in the\n      subrange.  This affects how the final high bound is computed.  */\n \n@@ -1951,7 +1956,8 @@ extern struct type *create_array_type_with_stride\n \n extern struct type *create_range_type (struct type *, struct type *,\n \t\t\t\t       const struct dynamic_prop *,\n-\t\t\t\t       const struct dynamic_prop *);\n+\t\t\t\t       const struct dynamic_prop *,\n+\t\t\t\t       LONGEST);\n \n extern struct type *create_array_type (struct type *, struct type *,\n \t\t\t\t       struct type *);"
    },
    {
      "sha": "22356bfd6dbda27c563482421f281b0024b92d83",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 30,
      "deletions": 20,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -405,21 +405,30 @@ print_scalar_formatted (const gdb_byte *valaddr, struct type *type,\n \n   /* Historically gdb has printed floats by first casting them to a\n      long, and then printing the long.  PR cli/16242 suggests changing\n-     this to using C-style hex float format.  */\n-  gdb::byte_vector converted_float_bytes;\n-  if (TYPE_CODE (type) == TYPE_CODE_FLT\n-      && (options->format == 'o'\n-\t  || options->format == 'x'\n-\t  || options->format == 't'\n-\t  || options->format == 'z'\n-\t  || options->format == 'd'\n-\t  || options->format == 'u'))\n-    {\n-      LONGEST val_long = unpack_long (type, valaddr);\n-      converted_float_bytes.resize (TYPE_LENGTH (type));\n-      store_signed_integer (converted_float_bytes.data (), TYPE_LENGTH (type),\n-\t\t\t    byte_order, val_long);\n-      valaddr = converted_float_bytes.data ();\n+     this to using C-style hex float format.\n+\n+     Biased range types must also be unbiased here; the unbiasing is\n+     done by unpack_long.  */\n+  gdb::byte_vector converted_bytes;\n+  /* Some cases below will unpack the value again.  In the biased\n+     range case, we want to avoid this, so we store the unpacked value\n+     here for possible use later.  */\n+  gdb::optional<LONGEST> val_long;\n+  if ((TYPE_CODE (type) == TYPE_CODE_FLT\n+       && (options->format == 'o'\n+\t   || options->format == 'x'\n+\t   || options->format == 't'\n+\t   || options->format == 'z'\n+\t   || options->format == 'd'\n+\t   || options->format == 'u'))\n+      || (TYPE_CODE (type) == TYPE_CODE_RANGE\n+\t  && TYPE_RANGE_DATA (type)->bias != 0))\n+    {\n+      val_long.emplace (unpack_long (type, valaddr));\n+      converted_bytes.resize (TYPE_LENGTH (type));\n+      store_signed_integer (converted_bytes.data (), TYPE_LENGTH (type),\n+\t\t\t    byte_order, *val_long);\n+      valaddr = converted_bytes.data ();\n     }\n \n   /* Printing a non-float type as 'f' will interpret the data as if it were\n@@ -469,23 +478,24 @@ print_scalar_formatted (const gdb_byte *valaddr, struct type *type,\n       {\n \tstruct value_print_options opts = *options;\n \n-\tLONGEST val_long = unpack_long (type, valaddr);\n+\tif (!val_long.has_value ())\n+\t  val_long.emplace (unpack_long (type, valaddr));\n \n \topts.format = 0;\n \tif (TYPE_UNSIGNED (type))\n \t  type = builtin_type (gdbarch)->builtin_true_unsigned_char;\n  \telse\n \t  type = builtin_type (gdbarch)->builtin_true_char;\n \n-\tvalue_print (value_from_longest (type, val_long), stream, &opts);\n+\tvalue_print (value_from_longest (type, *val_long), stream, &opts);\n       }\n       break;\n \n     case 'a':\n       {\n-\tCORE_ADDR addr = unpack_pointer (type, valaddr);\n-\n-\tprint_address (gdbarch, addr, stream);\n+\tif (!val_long.has_value ())\n+\t  val_long.emplace (unpack_long (type, valaddr));\n+\tprint_address (gdbarch, *val_long, stream);\n       }\n       break;\n "
    },
    {
      "sha": "d2dc356148f9a6997be6d8d397f9b385e7bfa1a4",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -1,3 +1,11 @@\n+2019-09-03  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/bias.exp: New file.\n+\t* gdb.ada/bias/bias.adb: New file.\n+\t* gdb.ada/print_chars.exp: Add regression test.\n+\t* gdb.ada/print_chars/foo.adb (My_Character): New type.\n+\t(MC): New variable.\n+\n 2019-08-29  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* gdb.base/argv0-symlink.exp: Run only on native target"
    },
    {
      "sha": "76ca6c08c63dedd75de4e16300f1ca2bcbfbbfa9",
      "filename": "gdb/testsuite/gdb.ada/bias.exp",
      "status": "added",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/bias.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/bias.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/bias.exp?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -0,0 +1,56 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+standard_ada_testfile bias\n+\n+if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable \\\n+\t {debug additional_flags=-fgnat-encodings=minimal}] != \"\" } {\n+  return -1\n+}\n+\n+clean_restart ${testfile}\n+\n+set bp_location [gdb_get_line_number \"STOP\" ${testdir}/bias.adb]\n+runto \"bias.adb:$bp_location\"\n+\n+gdb_test \"print x\" \" = 64\"\n+gdb_test \"print y\" \" = -5\"\n+\n+gdb_test \"print cval\" \" = 65\"\n+gdb_test \"print/c cval\" \" = 65 'A'\"\n+\n+# Some binary arithmetic checks.\n+gdb_test \"print y < y1\" \" = false\"\n+gdb_test \"print y <= y1\" \" = false\"\n+gdb_test \"print y > y1\" \" = true\"\n+gdb_test \"print y >= y1\" \" = true\"\n+gdb_test \"print y = y\" \" = true\"\n+gdb_test \"print y /= y\" \" = false\"\n+gdb_test \"print y /= y1\" \" = true\"\n+\n+gdb_test \"print x + x1\" \" = 65\"\n+gdb_test \"ptype x + x1\" \"type = range 1 \\\\.\\\\. 64\"\n+gdb_test \"print x / x1\" \" = 64\"\n+gdb_test \"print x * x1\" \" = 64\"\n+gdb_test \"print x - x1\" \" = 63\"\n+\n+# Test that storing un-biases.\n+gdb_test \"print x := 5\" \" = 5\"\n+gdb_test \"print x\" \" = 5\" \"re-read x after storing\"\n+\n+gdb_test \"print spr\" \" = \\\\(r => -4, s => -5\\\\)\"\n+gdb_test \"print a\" \" = \\\\(-7, -5, -4\\\\)\""
    },
    {
      "sha": "ad46d20dd20e7787d4f61cff791e9d5211408307",
      "filename": "gdb/testsuite/gdb.ada/bias/bias.adb",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/bias/bias.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/bias/bias.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/bias/bias.adb?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -0,0 +1,52 @@\n+--  Copyright 2019 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with Pck; use Pck;\n+\n+procedure Bias is\n+   type Small is range -7 .. -4;\n+   for Small'Size use 2;\n+   Y : Small := -5;\n+   Y1 : Small := -7;\n+\n+   type Repeat_Count_T is range 1 .. 2 ** 6;\n+   for Repeat_Count_T'Size use 6;\n+   X : Repeat_Count_T := 64;\n+   X1 : Repeat_Count_T := 1;\n+\n+   type Char_Range is range 65 .. 68;\n+   for Char_Range'Size use 2;\n+   Cval : Char_Range := 65;\n+\n+   type Some_Packed_Record is record\n+      R: Small;\n+      S: Small;\n+   end record;\n+   pragma Pack (Some_Packed_Record);\n+   SPR : Some_Packed_Record := (R => -4, S => -5);\n+\n+   type Packed_Array is array (1 .. 3) of Small;\n+   pragma pack (Packed_Array);\n+   A : Packed_Array := (-7, -5, -4);\n+\n+begin\n+   Do_Nothing (Y'Address);\t\t--  STOP\n+   Do_Nothing (Y1'Address);\n+   Do_Nothing (X'Address);\n+   Do_Nothing (X1'Address);\n+   Do_Nothing (Cval'Address);\n+   Do_Nothing (SPR'Address);\n+   Do_Nothing (A'Address);\n+end Bias;"
    },
    {
      "sha": "fb433861df0a1a0779d0005f032e4c612d64f96c",
      "filename": "gdb/testsuite/gdb.ada/bias/pck.adb",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/bias/pck.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/bias/pck.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/bias/pck.adb?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -0,0 +1,23 @@\n+--  Copyright 2012-2019 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with System;\n+\n+package body Pck is\n+   procedure Do_Nothing (A : System.Address) is\n+   begin\n+      null;\n+   end Do_Nothing;\n+end Pck;"
    },
    {
      "sha": "a40fa62c8eb252042b8f02ea2550753bcef3f67e",
      "filename": "gdb/testsuite/gdb.ada/bias/pck.ads",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/bias/pck.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/bias/pck.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/bias/pck.ads?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -0,0 +1,20 @@\n+--  Copyright 2012-2019 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with System;\n+\n+package Pck is\n+   procedure Do_Nothing (A : System.Address);\n+end Pck;"
    },
    {
      "sha": "9a0e2157844a958304e84810b4b9c24b73af1277",
      "filename": "gdb/testsuite/gdb.ada/print_chars.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/print_chars.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/print_chars.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/print_chars.exp?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -39,4 +39,4 @@ gdb_test \"print WWC\" \\\n          \"= 99 'c'\"  \\\n          \"print WWC\"\n \n-\n+gdb_test \"print MC\" \" = 77 'M'\""
    },
    {
      "sha": "c89c0d3cef945fede62e3dbb4fbd861f495a6130",
      "filename": "gdb/testsuite/gdb.ada/print_chars/foo.adb",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/print_chars/foo.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/testsuite/gdb.ada/print_chars/foo.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/print_chars/foo.adb?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -19,6 +19,9 @@ procedure Foo is\n    C : Character := 'a';\n    WC : Wide_Character := 'b';\n    WWC : Wide_Wide_Character := 'c';\n+\n+   type My_Character is new Character;\n+   MC : My_Character := 'M';\n begin\n    Do_Nothing (C'Address);  -- START\n    Do_Nothing (WC'Address);"
    },
    {
      "sha": "d58a964649be80bc2ff079d4bf2bf68fda289e04",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 13,
      "deletions": 5,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e962e74e45f2b0365e5b21504f33480c468ff00/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=4e962e74e45f2b0365e5b21504f33480c468ff00",
      "patch": "@@ -2751,10 +2751,16 @@ unpack_long (struct type *type, const gdb_byte *valaddr)\n     case TYPE_CODE_CHAR:\n     case TYPE_CODE_RANGE:\n     case TYPE_CODE_MEMBERPTR:\n-      if (nosign)\n-\treturn extract_unsigned_integer (valaddr, len, byte_order);\n-      else\n-\treturn extract_signed_integer (valaddr, len, byte_order);\n+      {\n+\tLONGEST result;\n+\tif (nosign)\n+\t  result = extract_unsigned_integer (valaddr, len, byte_order);\n+\telse\n+\t  result = extract_signed_integer (valaddr, len, byte_order);\n+\tif (code == TYPE_CODE_RANGE)\n+\t  result += TYPE_RANGE_DATA (type)->bias;\n+\treturn result;\n+      }\n \n     case TYPE_CODE_FLT:\n     case TYPE_CODE_DECFLOAT:\n@@ -3315,12 +3321,14 @@ pack_long (gdb_byte *buf, struct type *type, LONGEST num)\n \n   switch (TYPE_CODE (type))\n     {\n+    case TYPE_CODE_RANGE:\n+      num -= TYPE_RANGE_DATA (type)->bias;\n+      /* Fall through.  */\n     case TYPE_CODE_INT:\n     case TYPE_CODE_CHAR:\n     case TYPE_CODE_ENUM:\n     case TYPE_CODE_FLAGS:\n     case TYPE_CODE_BOOL:\n-    case TYPE_CODE_RANGE:\n     case TYPE_CODE_MEMBERPTR:\n       store_signed_integer (buf, len, byte_order, num);\n       break;"
    }
  ]
}