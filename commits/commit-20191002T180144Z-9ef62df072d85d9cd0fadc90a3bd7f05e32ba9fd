{
  "sha": "9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWVmNjJkZjA3MmQ4NWQ5Y2QwZmFkYzkwYTNiZDdmMDVlMzJiYTlmZA==",
  "commit": {
    "author": {
      "name": "Andreas Arnez",
      "email": "arnez@linux.ibm.com",
      "date": "2019-10-02T18:01:44Z"
    },
    "committer": {
      "name": "Andreas Arnez",
      "email": "arnez@linux.ibm.com",
      "date": "2019-10-02T18:01:44Z"
    },
    "message": "gdb/testsuite: Fix py-format-string.exp on big-endian platforms\n\nGDB's py-format-string test case depends on endianness.  In particular it\nrelies on the first byte of the machine representation of 42 (as an int)\nto be 42 as well.  While this is indeed the case for little-endian\nmachines, big-endian machines store a zero in the first byte instead.  The\nwrong assumption leads to lots of FAILs on such architectures.\n\nFix this by filling the affected union with bytes of the same value, such\nthat endianness does not matter.  Use the value 42, to keep the character\nin the first byte unchanged.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-format-string.c (string.h): New include.\n\t(main): Fill a_struct_with_union.the_union.an_int with bytes of\n\tthe same value, for endianness-independence.\n\t* gdb.python/py-format-string.exp (default_regexp_dict)\n\t(test_pretty_structs, test_format): Adjust expected output to the\n\tchanged initialization.",
    "tree": {
      "sha": "0ef2aa87e970152cbb3d55fa92ec03dd9afbdbf2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0ef2aa87e970152cbb3d55fa92ec03dd9afbdbf2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd/comments",
  "author": {
    "login": "aarnez",
    "id": 32961398,
    "node_id": "MDQ6VXNlcjMyOTYxMzk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/32961398?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aarnez",
    "html_url": "https://github.com/aarnez",
    "followers_url": "https://api.github.com/users/aarnez/followers",
    "following_url": "https://api.github.com/users/aarnez/following{/other_user}",
    "gists_url": "https://api.github.com/users/aarnez/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aarnez/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aarnez/subscriptions",
    "organizations_url": "https://api.github.com/users/aarnez/orgs",
    "repos_url": "https://api.github.com/users/aarnez/repos",
    "events_url": "https://api.github.com/users/aarnez/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aarnez/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "aarnez",
    "id": 32961398,
    "node_id": "MDQ6VXNlcjMyOTYxMzk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/32961398?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aarnez",
    "html_url": "https://github.com/aarnez",
    "followers_url": "https://api.github.com/users/aarnez/followers",
    "following_url": "https://api.github.com/users/aarnez/following{/other_user}",
    "gists_url": "https://api.github.com/users/aarnez/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aarnez/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aarnez/subscriptions",
    "organizations_url": "https://api.github.com/users/aarnez/orgs",
    "repos_url": "https://api.github.com/users/aarnez/repos",
    "events_url": "https://api.github.com/users/aarnez/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aarnez/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "37f6a7f456a8da051698dcd753cc0b026f92e054",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37f6a7f456a8da051698dcd753cc0b026f92e054",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/37f6a7f456a8da051698dcd753cc0b026f92e054"
    }
  ],
  "stats": {
    "total": 23,
    "additions": 18,
    "deletions": 5
  },
  "files": [
    {
      "sha": "8f01b878f8aeac737720153ddc49c2d29d8a2248",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd",
      "patch": "@@ -1,3 +1,12 @@\n+2019-10-02  Andreas Arnez  <arnez@linux.ibm.com>\n+\n+\t* gdb.python/py-format-string.c (string.h): New include.\n+\t(main): Fill a_struct_with_union.the_union.an_int with bytes of\n+\tthe same value, for endianness-independence.\n+\t* gdb.python/py-format-string.exp (default_regexp_dict)\n+\t(test_pretty_structs, test_format): Adjust expected output to the\n+\tchanged initialization.\n+\n 2019-10-02  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/catch_ex_std.exp: Add $_ada_exception test."
    },
    {
      "sha": "017f92080b6c85d72c972743d9942876ac727026",
      "filename": "gdb/testsuite/gdb.python/py-format-string.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd/gdb/testsuite/gdb.python/py-format-string.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd/gdb/testsuite/gdb.python/py-format-string.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-format-string.c?ref=9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd",
      "patch": "@@ -15,6 +15,8 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n+#include <string.h>\n+\n typedef struct point\n {\n   int x;\n@@ -84,7 +86,9 @@ main ()\n   struct point another_point = { 123, 456 };\n \n   struct_union_t a_struct_with_union;\n-  a_struct_with_union.the_union.an_int = 42;\n+  /* Fill the union in an endianness-independent way.  */\n+  memset (&a_struct_with_union.the_union, 42,\n+\t  sizeof (a_struct_with_union.the_union));\n \n   enum_t an_enum = ENUM_BAR;\n "
    },
    {
      "sha": "ad71fe0e51b69ff5312d3c39d179a8792e8efd49",
      "filename": "gdb/testsuite/gdb.python/py-format-string.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd/gdb/testsuite/gdb.python/py-format-string.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd/gdb/testsuite/gdb.python/py-format-string.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-format-string.exp?ref=9ef62df072d85d9cd0fadc90a3bd7f05e32ba9fd",
      "patch": "@@ -124,7 +124,7 @@ set default_regexp_dict [dict create \\\n   \"a_point_t_pointer\"\t\t$default_pointer_regexp \\\n   \"a_point_t_ref\"\t\t\"Pretty Point \\\\(42, 12\\\\)\" \\\n   \"another_point\"\t\t\"Pretty Point \\\\(123, 456\\\\)\" \\\n-  \"a_struct_with_union\"\t\t\"\\\\{the_union = \\\\{an_int = 42, a_char = 42 '\\\\*'\\\\}\\\\}\" \\\n+  \"a_struct_with_union\"\t\t\"\\\\{the_union = \\\\{an_int = 707406378, a_char = 42 '\\\\*'\\\\}\\\\}\" \\\n   \"an_enum\"\t\t\t\"ENUM_BAR\" \\\n   \"a_string\"\t\t\t\"${default_pointer_regexp} \\\"hello world\\\"\" \\\n   \"a_binary_string\"\t\t\"${default_pointer_regexp} \\\"hello\\\"\" \\\n@@ -333,7 +333,7 @@ proc test_pretty_structs {} {\n   global current_lang\n \n   set a_struct_with_union_pretty \\\n-    \"\\\\{\\[\\r\\n\\]+  the_union = \\\\{\\[\\r\\n\\]+    an_int = 42,\\[\\r\\n\\]+    a_char = 42 '\\\\*'\\[\\r\\n\\]+  \\\\}\\[\\r\\n\\]+\\\\}\"\n+    \"\\\\{\\[\\r\\n\\]+  the_union = \\\\{\\[\\r\\n\\]+    an_int = 707406378,\\[\\r\\n\\]+    a_char = 42 '\\\\*'\\[\\r\\n\\]+  \\\\}\\[\\r\\n\\]+\\\\}\"\n \n   check_var_with_bool_opt \"pretty_structs\" \"a_point_t\"\n   check_var_with_bool_opt \"pretty_structs\" \"a_point_t_pointer\"\n@@ -814,7 +814,7 @@ proc test_format {} {\n     check_format_string \"a_point_t_pointer\" $opts\n     check_format_string \"another_point\" $opts\n     check_format_string \"a_struct_with_union\" $opts \\\n-      \"\\\\{the_union = \\\\{an_int = 0x2a, a_char = 0x2a\\\\}\\\\}\"\n+      \"\\\\{the_union = \\\\{an_int = 0x2a2a2a2a, a_char = 0x2a\\\\}\\\\}\"\n     check_format_string \"an_enum\" $opts \\\n       \"0x1\"\n     check_format_string \"a_string\" $opts \\\n@@ -851,7 +851,7 @@ proc test_format {} {\n       $decimal_pointer_regexp\n     check_format_string \"another_point\" $opts\n     check_format_string \"a_struct_with_union\" $opts \\\n-      \"\\\\{the_union = \\\\{an_int = 42, a_char = 42\\\\}\\\\}\"\n+      \"\\\\{the_union = \\\\{an_int = 707406378, a_char = 42\\\\}\\\\}\"\n     check_format_string \"an_enum\" $opts \\\n       \"1\"\n     check_format_string \"a_string\" $opts \\"
    }
  ]
}