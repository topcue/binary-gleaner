{
  "sha": "f4382c45a4de31b654c063d1ae70d932bde1c2f2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjQzODJjNDVhNGRlMzFiNjU0YzA2M2QxYWU3MGQ5MzJiZGUxYzJmMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "message": "Create dwarf2/leb.[ch]\n\nThis moves some scalar-unpacking code into a couple of new files,\ndwarf2/leb.h and dwarf2/leb.c.\n\ngdb/ChangeLog\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2read.h (read_unsigned_leb128): Don't declare.\n\t* dwarf2read.c (read_1_byte, read_1_signed_byte, read_2_bytes)\n\t(read_2_signed_bytes, read_3_bytes, read_4_bytes)\n\t(read_4_signed_bytes, read_8_bytes): Move to dwarf2/leb.h.\n\t(read_unsigned_leb128, read_signed_leb128): Move to dwarf2/leb.c.\n\t* dwarf2/leb.h: New file, from dwarf2read.c.\n\t* dwarf2/leb.c: New file, from dwarf2read.c.\n\t* dwarf2-frame.c (read_1_byte, read_4_bytes, read_8_bytes):\n\tRemove.\n\t* Makefile.in (CONFIG_SRC_SUBDIR): Add dwarf2.\n\t(COMMON_SFILES): Add dwarf2/leb.c.\n\nChange-Id: Idd19647686c8f959d226a95fdfca4db47c6e96d0",
    "tree": {
      "sha": "914254afcd1620342bac6ac4f5603a635a946f35",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/914254afcd1620342bac6ac4f5603a635a946f35"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f4382c45a4de31b654c063d1ae70d932bde1c2f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f4382c45a4de31b654c063d1ae70d932bde1c2f2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f4382c45a4de31b654c063d1ae70d932bde1c2f2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f4382c45a4de31b654c063d1ae70d932bde1c2f2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "01840b7a09722330ff36038001ea72dd7525c67e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01840b7a09722330ff36038001ea72dd7525c67e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/01840b7a09722330ff36038001ea72dd7525c67e"
    }
  ],
  "stats": {
    "total": 345,
    "additions": 196,
    "deletions": 149
  },
  "files": [
    {
      "sha": "d0c5d4a0fdefafc6fdd7ae801f0f8bb4920bd580",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f4382c45a4de31b654c063d1ae70d932bde1c2f2",
      "patch": "@@ -1,3 +1,17 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2read.h (read_unsigned_leb128): Don't declare.\n+\t* dwarf2read.c (read_1_byte, read_1_signed_byte, read_2_bytes)\n+\t(read_2_signed_bytes, read_3_bytes, read_4_bytes)\n+\t(read_4_signed_bytes, read_8_bytes): Move to dwarf2/leb.h.\n+\t(read_unsigned_leb128, read_signed_leb128): Move to dwarf2/leb.c.\n+\t* dwarf2/leb.h: New file, from dwarf2read.c.\n+\t* dwarf2/leb.c: New file, from dwarf2read.c.\n+\t* dwarf2-frame.c (read_1_byte, read_4_bytes, read_8_bytes):\n+\tRemove.\n+\t* Makefile.in (CONFIG_SRC_SUBDIR): Add dwarf2.\n+\t(COMMON_SFILES): Add dwarf2/leb.c.\n+\n 2020-02-08  Joel Brobecker  <brobecker@adacore.com>\n \n \tGDB 9.1 released."
    },
    {
      "sha": "b30ab54afa7766e54907bd570c5532c8967f761e",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=f4382c45a4de31b654c063d1ae70d932bde1c2f2",
      "patch": "@@ -551,7 +551,7 @@ CONFIG_INSTALL = @CONFIG_INSTALL@\n CONFIG_UNINSTALL = @CONFIG_UNINSTALL@\n HAVE_NATIVE_GCORE_TARGET = @HAVE_NATIVE_GCORE_TARGET@\n \n-CONFIG_SRC_SUBDIR = arch cli mi compile tui unittests guile python \\\n+CONFIG_SRC_SUBDIR = arch cli dwarf2 mi compile tui unittests guile python \\\n \ttarget nat\n CONFIG_DEP_SUBDIR = $(addsuffix /$(DEPDIR),$(CONFIG_SRC_SUBDIR))\n \n@@ -1002,6 +1002,7 @@ COMMON_SFILES = \\\n \tdwarf2expr.c \\\n \tdwarf2loc.c \\\n \tdwarf2read.c \\\n+\tdwarf2/leb.c \\\n \teval.c \\\n \tevent-loop.c \\\n \tevent-top.c \\"
    },
    {
      "sha": "2bf827148ac1c765f7bea3848b8576a7eaf6262b",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 17,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=f4382c45a4de31b654c063d1ae70d932bde1c2f2",
      "patch": "@@ -22,6 +22,7 @@\n #include \"defs.h\"\n #include \"dwarf2expr.h\"\n #include \"dwarf2.h\"\n+#include \"dwarf2/leb.h\"\n #include \"frame.h\"\n #include \"frame-base.h\"\n #include \"frame-unwind.h\"\n@@ -1474,23 +1475,6 @@ const struct objfile_key<dwarf2_fde_table,\n \t\t\t gdb::noop_deleter<dwarf2_fde_table>>\n   dwarf2_frame_objfile_data;\n \n-static unsigned int\n-read_1_byte (bfd *abfd, const gdb_byte *buf)\n-{\n-  return bfd_get_8 (abfd, buf);\n-}\n-\n-static unsigned int\n-read_4_bytes (bfd *abfd, const gdb_byte *buf)\n-{\n-  return bfd_get_32 (abfd, buf);\n-}\n-\n-static ULONGEST\n-read_8_bytes (bfd *abfd, const gdb_byte *buf)\n-{\n-  return bfd_get_64 (abfd, buf);\n-}\n \n static ULONGEST\n read_initial_length (bfd *abfd, const gdb_byte *buf,"
    },
    {
      "sha": "d26b48b381cd35caab22f6ad9e834aae76939eb3",
      "filename": "gdb/dwarf2/leb.c",
      "status": "added",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2/leb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2/leb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/leb.c?ref=f4382c45a4de31b654c063d1ae70d932bde1c2f2",
      "patch": "@@ -0,0 +1,85 @@\n+/* Low-level DWARF 2 reading code\n+\n+   Copyright (C) 1994-2020 Free Software Foundation, Inc.\n+\n+   Adapted by Gary Funck (gary@intrepid.com), Intrepid Technology,\n+   Inc.  with support from Florida State University (under contract\n+   with the Ada Joint Program Office), and Silicon Graphics, Inc.\n+   Initial contribution by Brent Benson, Harris Computer Systems, Inc.,\n+   based on Fred Fish's (Cygnus Support) implementation of DWARF 1\n+   support.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"dwarf2/leb.h\"\n+\n+ULONGEST\n+read_unsigned_leb128 (bfd *abfd, const gdb_byte *buf,\n+\t\t\t  unsigned int *bytes_read_ptr)\n+{\n+  ULONGEST result;\n+  unsigned int num_read;\n+  int shift;\n+  unsigned char byte;\n+\n+  result = 0;\n+  shift = 0;\n+  num_read = 0;\n+  while (1)\n+    {\n+      byte = bfd_get_8 (abfd, buf);\n+      buf++;\n+      num_read++;\n+      result |= ((ULONGEST) (byte & 127) << shift);\n+      if ((byte & 128) == 0)\n+\t{\n+\t  break;\n+\t}\n+      shift += 7;\n+    }\n+  *bytes_read_ptr = num_read;\n+  return result;\n+}\n+\n+LONGEST\n+read_signed_leb128 (bfd *abfd, const gdb_byte *buf,\n+\t\t    unsigned int *bytes_read_ptr)\n+{\n+  ULONGEST result;\n+  int shift, num_read;\n+  unsigned char byte;\n+\n+  result = 0;\n+  shift = 0;\n+  num_read = 0;\n+  while (1)\n+    {\n+      byte = bfd_get_8 (abfd, buf);\n+      buf++;\n+      num_read++;\n+      result |= ((ULONGEST) (byte & 127) << shift);\n+      shift += 7;\n+      if ((byte & 128) == 0)\n+\t{\n+\t  break;\n+\t}\n+    }\n+  if ((shift < 8 * sizeof (result)) && (byte & 0x40))\n+    result |= -(((ULONGEST) 1) << shift);\n+  *bytes_read_ptr = num_read;\n+  return result;\n+}"
    },
    {
      "sha": "b17ab881ba2dc76f13ef77d71a1793128e798646",
      "filename": "gdb/dwarf2/leb.h",
      "status": "added",
      "additions": 92,
      "deletions": 0,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2/leb.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2/leb.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/leb.h?ref=f4382c45a4de31b654c063d1ae70d932bde1c2f2",
      "patch": "@@ -0,0 +1,92 @@\n+/* Low-level DWARF 2 reading code\n+\n+   Copyright (C) 1994-2020 Free Software Foundation, Inc.\n+\n+   Adapted by Gary Funck (gary@intrepid.com), Intrepid Technology,\n+   Inc.  with support from Florida State University (under contract\n+   with the Ada Joint Program Office), and Silicon Graphics, Inc.\n+   Initial contribution by Brent Benson, Harris Computer Systems, Inc.,\n+   based on Fred Fish's (Cygnus Support) implementation of DWARF 1\n+   support.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GDB_DWARF2_LEB_H\n+#define GDB_DWARF2_LEB_H\n+\n+/* Read dwarf information from a buffer.  */\n+\n+static inline unsigned int\n+read_1_byte (bfd *abfd, const gdb_byte *buf)\n+{\n+  return bfd_get_8 (abfd, buf);\n+}\n+\n+static inline int\n+read_1_signed_byte (bfd *abfd, const gdb_byte *buf)\n+{\n+  return bfd_get_signed_8 (abfd, buf);\n+}\n+\n+static inline unsigned int\n+read_2_bytes (bfd *abfd, const gdb_byte *buf)\n+{\n+  return bfd_get_16 (abfd, buf);\n+}\n+\n+static inline int\n+read_2_signed_bytes (bfd *abfd, const gdb_byte *buf)\n+{\n+  return bfd_get_signed_16 (abfd, buf);\n+}\n+\n+/* Read the next three bytes (little-endian order) as an unsigned integer.  */\n+static inline unsigned int\n+read_3_bytes (bfd *abfd, const gdb_byte *buf)\n+{\n+  unsigned int result = 0;\n+  for (int i = 0; i < 3; ++i)\n+    {\n+      unsigned char byte = bfd_get_8 (abfd, buf);\n+      buf++;\n+      result |= ((unsigned int) byte << (i * 8));\n+    }\n+  return result;\n+}\n+\n+static inline unsigned int\n+read_4_bytes (bfd *abfd, const gdb_byte *buf)\n+{\n+  return bfd_get_32 (abfd, buf);\n+}\n+\n+static inline int\n+read_4_signed_bytes (bfd *abfd, const gdb_byte *buf)\n+{\n+  return bfd_get_signed_32 (abfd, buf);\n+}\n+\n+static inline ULONGEST\n+read_8_bytes (bfd *abfd, const gdb_byte *buf)\n+{\n+  return bfd_get_64 (abfd, buf);\n+}\n+\n+extern LONGEST read_signed_leb128 (bfd *, const gdb_byte *, unsigned int *);\n+\n+extern ULONGEST read_unsigned_leb128 (bfd *, const gdb_byte *, unsigned int *);\n+\n+#endif /* GDB_DWARF2_LEB_H */"
    },
    {
      "sha": "9cfc852c9e1bdedf297918b522d5c9042c1c591d",
      "filename": "gdb/dwarf2loc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2loc.c?ref=f4382c45a4de31b654c063d1ae70d932bde1c2f2",
      "patch": "@@ -38,6 +38,7 @@\n #include \"dwarf2loc.h\"\n #include \"dwarf2read.h\"\n #include \"dwarf2-frame.h\"\n+#include \"dwarf2/leb.h\"\n #include \"compile/compile.h\"\n #include \"gdbsupport/selftest.h\"\n #include <algorithm>"
    },
    {
      "sha": "fe26fc33d6ef04e55dde4ea190b29ac966d28657",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 129,
      "changes": 130,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=f4382c45a4de31b654c063d1ae70d932bde1c2f2",
      "patch": "@@ -32,6 +32,7 @@\n #include \"dwarf2read.h\"\n #include \"dwarf-index-cache.h\"\n #include \"dwarf-index-common.h\"\n+#include \"dwarf2/leb.h\"\n #include \"bfd.h\"\n #include \"elf-bfd.h\"\n #include \"symtab.h\"\n@@ -1551,19 +1552,6 @@ static void read_attribute_reprocess (const struct die_reader_specs *reader,\n \n static CORE_ADDR read_addr_index (struct dwarf2_cu *cu, unsigned int addr_index);\n \n-static unsigned int read_1_byte (bfd *, const gdb_byte *);\n-\n-static int read_1_signed_byte (bfd *, const gdb_byte *);\n-\n-static unsigned int read_2_bytes (bfd *, const gdb_byte *);\n-\n-/* Read the next three bytes (little-endian order) as an unsigned integer.  */\n-static unsigned int read_3_bytes (bfd *, const gdb_byte *);\n-\n-static unsigned int read_4_bytes (bfd *, const gdb_byte *);\n-\n-static ULONGEST read_8_bytes (bfd *, const gdb_byte *);\n-\n static CORE_ADDR read_address (bfd *, const gdb_byte *ptr, struct dwarf2_cu *,\n \t\t\t       unsigned int *);\n \n@@ -1602,8 +1590,6 @@ static const char *read_indirect_string_at_offset\n static const char *read_indirect_string_from_dwz\n   (struct objfile *objfile, struct dwz_file *, LONGEST);\n \n-static LONGEST read_signed_leb128 (bfd *, const gdb_byte *, unsigned int *);\n-\n static CORE_ADDR read_addr_index_from_leb128 (struct dwarf2_cu *,\n \t\t\t\t\t      const gdb_byte *,\n \t\t\t\t\t      unsigned int *);\n@@ -19685,63 +19671,6 @@ read_attribute (const struct die_reader_specs *reader,\n \t\t\t       need_reprocess);\n }\n \n-/* Read dwarf information from a buffer.  */\n-\n-static unsigned int\n-read_1_byte (bfd *abfd, const gdb_byte *buf)\n-{\n-  return bfd_get_8 (abfd, buf);\n-}\n-\n-static int\n-read_1_signed_byte (bfd *abfd, const gdb_byte *buf)\n-{\n-  return bfd_get_signed_8 (abfd, buf);\n-}\n-\n-static unsigned int\n-read_2_bytes (bfd *abfd, const gdb_byte *buf)\n-{\n-  return bfd_get_16 (abfd, buf);\n-}\n-\n-static int\n-read_2_signed_bytes (bfd *abfd, const gdb_byte *buf)\n-{\n-  return bfd_get_signed_16 (abfd, buf);\n-}\n-\n-static unsigned int\n-read_3_bytes (bfd *abfd, const gdb_byte *buf)\n-{\n-  unsigned int result = 0;\n-  for (int i = 0; i < 3; ++i)\n-    {\n-      unsigned char byte = bfd_get_8 (abfd, buf);\n-      buf++;\n-      result |= ((unsigned int) byte << (i * 8));\n-    }\n-  return result;\n-}\n-\n-static unsigned int\n-read_4_bytes (bfd *abfd, const gdb_byte *buf)\n-{\n-  return bfd_get_32 (abfd, buf);\n-}\n-\n-static int\n-read_4_signed_bytes (bfd *abfd, const gdb_byte *buf)\n-{\n-  return bfd_get_signed_32 (abfd, buf);\n-}\n-\n-static ULONGEST\n-read_8_bytes (bfd *abfd, const gdb_byte *buf)\n-{\n-  return bfd_get_64 (abfd, buf);\n-}\n-\n static CORE_ADDR\n read_address (bfd *abfd, const gdb_byte *buf, struct dwarf2_cu *cu,\n \t      unsigned int *bytes_read)\n@@ -20051,63 +19980,6 @@ read_indirect_line_string (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t\t\t      str_offset);\n }\n \n-ULONGEST\n-read_unsigned_leb128 (bfd *abfd, const gdb_byte *buf,\n-\t\t\t  unsigned int *bytes_read_ptr)\n-{\n-  ULONGEST result;\n-  unsigned int num_read;\n-  int shift;\n-  unsigned char byte;\n-\n-  result = 0;\n-  shift = 0;\n-  num_read = 0;\n-  while (1)\n-    {\n-      byte = bfd_get_8 (abfd, buf);\n-      buf++;\n-      num_read++;\n-      result |= ((ULONGEST) (byte & 127) << shift);\n-      if ((byte & 128) == 0)\n-\t{\n-\t  break;\n-\t}\n-      shift += 7;\n-    }\n-  *bytes_read_ptr = num_read;\n-  return result;\n-}\n-\n-static LONGEST\n-read_signed_leb128 (bfd *abfd, const gdb_byte *buf,\n-\t\t    unsigned int *bytes_read_ptr)\n-{\n-  ULONGEST result;\n-  int shift, num_read;\n-  unsigned char byte;\n-\n-  result = 0;\n-  shift = 0;\n-  num_read = 0;\n-  while (1)\n-    {\n-      byte = bfd_get_8 (abfd, buf);\n-      buf++;\n-      num_read++;\n-      result |= ((ULONGEST) (byte & 127) << shift);\n-      shift += 7;\n-      if ((byte & 128) == 0)\n-\t{\n-\t  break;\n-\t}\n-    }\n-  if ((shift < 8 * sizeof (result)) && (byte & 0x40))\n-    result |= -(((ULONGEST) 1) << shift);\n-  *bytes_read_ptr = num_read;\n-  return result;\n-}\n-\n /* Given index ADDR_INDEX in .debug_addr, fetch the value.\n    ADDR_BASE is the DW_AT_addr_base (DW_AT_GNU_addr_base) attribute or zero.\n    ADDR_SIZE is the size of addresses from the CU header.  */"
    },
    {
      "sha": "5aa9421bbe5ba490b235bd60bd51df3ee7da2aad",
      "filename": "gdb/dwarf2read.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4382c45a4de31b654c063d1ae70d932bde1c2f2/gdb/dwarf2read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.h?ref=f4382c45a4de31b654c063d1ae70d932bde1c2f2",
      "patch": "@@ -463,8 +463,6 @@ struct signatured_type\n   struct dwo_unit *dwo_unit;\n };\n \n-ULONGEST read_unsigned_leb128 (bfd *, const gdb_byte *, unsigned int *);\n-\n /* This represents a '.dwz' file.  */\n \n struct dwz_file"
    }
  ]
}