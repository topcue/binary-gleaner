{
  "sha": "9b8ffbf410f4482a51a443872758aa51ae20426f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWI4ZmZiZjQxMGY0NDgyYTUxYTQ0Mzg3Mjc1OGFhNTFhZTIwNDI2Zg==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-24T14:12:46Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-29T14:59:50Z"
    },
    "message": "Don't pass empty options to GCC\n\nOn aarch64-linux, I noticed the compile command didn't work at all.  It\nalways gave the following error:\n\naarch64-linux-gnu-g++: error: : No such file or directory\n\nTurns out we're passing an empty argv entry to GCC (because aarch64 doesn't\nhave a -m64 option), and GCC's behavior is to think that is a file it needs\nto open.  One can reproduce it like so:\n\ngcc \"\" \"\" \"\" \"\"\ngcc: error: : No such file or directory\ngcc: error: : No such file or directory\ngcc: error: : No such file or directory\ngcc: error: : No such file or directory\ngcc: fatal error: no input files\ncompilation terminated.\n\nThe solution is to check for an empty string and skip adding that to argv.\n\nRegression tested on aarch64-linux/Ubuntu 18.04/20.04.\n\ngdb/ChangeLog:\n\n2021-03-29  Luis Machado  <luis.machado@linaro.org>\n\n\t* compile/compile.c (get_args): Don't add empty argv entries.",
    "tree": {
      "sha": "54122f29d46d8d7dbc38f0f67ebf8f8e3f6c136b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/54122f29d46d8d7dbc38f0f67ebf8f8e3f6c136b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9b8ffbf410f4482a51a443872758aa51ae20426f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b8ffbf410f4482a51a443872758aa51ae20426f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9b8ffbf410f4482a51a443872758aa51ae20426f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b8ffbf410f4482a51a443872758aa51ae20426f/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fa167b002fd7c02adf63bf7b5dbf60ca625ec9b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa167b002fd7c02adf63bf7b5dbf60ca625ec9b5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fa167b002fd7c02adf63bf7b5dbf60ca625ec9b5"
    }
  ],
  "stats": {
    "total": 12,
    "additions": 11,
    "deletions": 1
  },
  "files": [
    {
      "sha": "938b0ac43fb39d52c2e77e523840210a8c9597c4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b8ffbf410f4482a51a443872758aa51ae20426f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b8ffbf410f4482a51a443872758aa51ae20426f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9b8ffbf410f4482a51a443872758aa51ae20426f",
      "patch": "@@ -1,3 +1,7 @@\n+2021-03-29  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* compile/compile.c (get_args): Don't add empty argv entries.\n+\n 2021-03-29  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \tgdb:"
    },
    {
      "sha": "5c5d51782c902e05a0bd33412089bfa7b290f9c2",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b8ffbf410f4482a51a443872758aa51ae20426f/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b8ffbf410f4482a51a443872758aa51ae20426f/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=9b8ffbf410f4482a51a443872758aa51ae20426f",
      "patch": "@@ -600,8 +600,14 @@ static gdb_argv\n get_args (const compile_instance *compiler, struct gdbarch *gdbarch)\n {\n   const char *cs_producer_options;\n+  gdb_argv result;\n \n-  gdb_argv result (gdbarch_gcc_target_options (gdbarch).c_str ());\n+  std::string gcc_options = gdbarch_gcc_target_options (gdbarch);\n+\n+  /* Make sure we have a non-empty set of options, otherwise GCC will\n+     error out trying to look for a filename that is an empty string.  */\n+  if (!gcc_options.empty ())\n+    result = gdb_argv (gcc_options.c_str ());\n \n   cs_producer_options = get_selected_pc_producer_options ();\n   if (cs_producer_options != NULL)"
    }
  ]
}