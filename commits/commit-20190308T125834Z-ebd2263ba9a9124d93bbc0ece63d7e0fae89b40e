{
  "sha": "ebd2263ba9a9124d93bbc0ece63d7e0fae89b40e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWJkMjI2M2JhOWE5MTI0ZDkzYmJjMGVjZTYzZDdlMGZhZTg5YjQwZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-03-08T12:11:55Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-03-08T12:58:34Z"
    },
    "message": "PR24311, FAIL: S-records with constructors\n\nNot padding string merge section output to its alignment can cause\nfailures of the S-record tests when input string merge sections are\npadded, since the ELF linker output for the single string section\nwould shrink compared to the SREC linker output.  That might result in\nfollowing sections having different addresses.\nOn the other hand, padding string merge section output when input\nstring merge sections are *not* padded can also cause failures, in\nthis case due to the ELF linker output for the string section being\nlarger (due to padding) than the SREC linker output.\n\nIt would be better to write a more robust test, but it is also nice\nto leave input unchanged when no string merges occur.\n\n\tPR 24311\n\t* merge.c (merge_strings): Return secinfo.  Don't pad section\n\tto alignment here.\n\t(_bfd_merge_sections): Pad section to alignment here, if input\n\tsections contributing to merged output all pad to alignment.\n\tFormatting.",
    "tree": {
      "sha": "20eb508b47ec3c8ae1e30ecaaf247776d0e6b933",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/20eb508b47ec3c8ae1e30ecaaf247776d0e6b933"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ebd2263ba9a9124d93bbc0ece63d7e0fae89b40e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ebd2263ba9a9124d93bbc0ece63d7e0fae89b40e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ebd2263ba9a9124d93bbc0ece63d7e0fae89b40e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ebd2263ba9a9124d93bbc0ece63d7e0fae89b40e/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "65d8004072ccb15441c143c380949d785a8446cd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/65d8004072ccb15441c143c380949d785a8446cd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/65d8004072ccb15441c143c380949d785a8446cd"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 39,
    "deletions": 22
  },
  "files": [
    {
      "sha": "18f180453d452153f8ccec4a9ed4075ba4219c1b",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebd2263ba9a9124d93bbc0ece63d7e0fae89b40e/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebd2263ba9a9124d93bbc0ece63d7e0fae89b40e/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=ebd2263ba9a9124d93bbc0ece63d7e0fae89b40e",
      "patch": "@@ -1,3 +1,12 @@\n+2019-03-08  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24311\n+\t* merge.c (merge_strings): Return secinfo.  Don't pad section\n+\tto alignment here.\n+\t(_bfd_merge_sections): Pad section to alignment here, if input\n+\tsections contributing to merged output all pad to alignment.\n+\tFormatting.\n+\n 2019-03-06  Nick Clifton  <nickc@redhat.com>\n \n \t* dwarf2.c (_bfd_dwarf2_find_symbol_bias): Check for a NULL symbol"
    },
    {
      "sha": "632c852390355829f95e149b7d72f0982a1a0b2b",
      "filename": "bfd/merge.c",
      "status": "modified",
      "additions": 30,
      "deletions": 22,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebd2263ba9a9124d93bbc0ece63d7e0fae89b40e/bfd/merge.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebd2263ba9a9124d93bbc0ece63d7e0fae89b40e/bfd/merge.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/merge.c?ref=ebd2263ba9a9124d93bbc0ece63d7e0fae89b40e",
      "patch": "@@ -621,7 +621,7 @@ is_suffix (const struct sec_merge_hash_entry *A,\n \n /* This is a helper function for _bfd_merge_sections.  It attempts to\n    merge strings matching suffixes of longer strings.  */\n-static bfd_boolean\n+static struct sec_merge_sec_info *\n merge_strings (struct sec_merge_info *sinfo)\n {\n   struct sec_merge_hash_entry **array, **a, *e;\n@@ -633,7 +633,7 @@ merge_strings (struct sec_merge_info *sinfo)\n   amt = sinfo->htab->size * sizeof (struct sec_merge_hash_entry *);\n   array = (struct sec_merge_hash_entry **) bfd_malloc (amt);\n   if (array == NULL)\n-    return FALSE;\n+    return NULL;\n \n   for (e = sinfo->htab->first, a = array; e; e = e->next)\n     if (e->alignment)\n@@ -703,11 +703,6 @@ merge_strings (struct sec_merge_info *sinfo)\n \t}\n     }\n   secinfo->sec->size = size;\n-  if (secinfo->sec->alignment_power != 0)\n-    {\n-      bfd_size_type align = (bfd_size_type) 1 << secinfo->sec->alignment_power;\n-      secinfo->sec->size = (secinfo->sec->size + align - 1) & -align;\n-    }\n \n   /* And now adjust the rest, removing them from the chain (but not hashtable)\n      at the same time.  */\n@@ -724,7 +719,7 @@ merge_strings (struct sec_merge_info *sinfo)\n \t    e->u.index = e->u.suffix->u.index + (e->u.suffix->len - e->len);\n \t  }\n       }\n-  return TRUE;\n+  return secinfo;\n }\n \n /* This function is called once after all SEC_MERGE sections are registered\n@@ -740,7 +735,8 @@ _bfd_merge_sections (bfd *abfd,\n \n   for (sinfo = (struct sec_merge_info *) xsinfo; sinfo; sinfo = sinfo->next)\n     {\n-      struct sec_merge_sec_info * secinfo;\n+      struct sec_merge_sec_info *secinfo;\n+      bfd_size_type align;\n \n       if (! sinfo->chain)\n \tcontinue;\n@@ -751,25 +747,33 @@ _bfd_merge_sections (bfd *abfd,\n       secinfo->next = NULL;\n \n       /* Record the sections into the hash table.  */\n+      align = 1;\n       for (secinfo = sinfo->chain; secinfo; secinfo = secinfo->next)\n \tif (secinfo->sec->flags & SEC_EXCLUDE)\n \t  {\n \t    *secinfo->psecinfo = NULL;\n \t    if (remove_hook)\n \t      (*remove_hook) (abfd, secinfo->sec);\n \t  }\n-\telse if (! record_section (sinfo, secinfo))\n-\t  return FALSE;\n-\n-      if (secinfo)\n-\tcontinue;\n+\telse\n+\t  {\n+\t    if (!record_section (sinfo, secinfo))\n+\t      return FALSE;\n+\t    if (align)\n+\t      {\n+\t\talign = (bfd_size_type) 1 << secinfo->sec->alignment_power;\n+\t\tif ((secinfo->sec->size & (align - 1)) != 0)\n+\t\t  align = 0;\n+\t      }\n+\t  }\n \n       if (sinfo->htab->first == NULL)\n \tcontinue;\n \n       if (sinfo->htab->strings)\n \t{\n-\t  if (!merge_strings (sinfo))\n+\t  secinfo = merge_strings (sinfo);\n+\t  if (!secinfo)\n \t    return FALSE;\n \t}\n       else\n@@ -789,20 +793,24 @@ _bfd_merge_sections (bfd *abfd,\n \t\t  e->secinfo->first_str = e;\n \t\t  size = 0;\n \t\t}\n-\t      size = (size + e->alignment - 1)\n-\t\t     & ~((bfd_vma) e->alignment - 1);\n+\t      size = (size + e->alignment - 1) & ~((bfd_vma) e->alignment - 1);\n \t      e->u.index = size;\n \t      size += e->len;\n \t      secinfo = e->secinfo;\n \t    }\n \t  secinfo->sec->size = size;\n \t}\n \n-\t/* Finally remove all input sections which have not made it into\n-\t   the hash table at all.  */\n-\tfor (secinfo = sinfo->chain; secinfo; secinfo = secinfo->next)\n-\t  if (secinfo->first_str == NULL)\n-\t    secinfo->sec->flags |= SEC_EXCLUDE | SEC_KEEP;\n+      /* If the input sections were padded according to their alignments,\n+\t then pad the output too.  */\n+      if (align)\n+\tsecinfo->sec->size = (secinfo->sec->size + align - 1) & -align;\n+\n+      /* Finally remove all input sections which have not made it into\n+\t the hash table at all.  */\n+      for (secinfo = sinfo->chain; secinfo; secinfo = secinfo->next)\n+\tif (secinfo->first_str == NULL)\n+\t  secinfo->sec->flags |= SEC_EXCLUDE | SEC_KEEP;\n     }\n \n   return TRUE;"
    }
  ]
}