{
  "sha": "fdbc5215e756e75cdda894b4d84150de35438061",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmRiYzUyMTVlNzU2ZTc1Y2RkYTg5NGI0ZDg0MTUwZGUzNTQzODA2MQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-02-04T18:35:37Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-02-04T18:35:37Z"
    },
    "message": "gdb: make record-full clear async handler in wait\n\nFor the same reason explained in the previous patch (which was for the\nrecord-btrace target), move clearing of the async event handler of the\nrecord-full target to the wait method.\n\nI'm not sure if/where that target needs to re-set its async event\nhandler in the wait method.  Since it only supports a single thread,\nthere probably can't be multiple events to report at the same time.\n\ngdb/ChangeLog:\n\n\t* record-full.c (record_full_async_inferior_event_handler):\n\tDon't clear async event handler.\n\t(record_full_base_target::wait): Clear async event handler at\n\tbeginning.\n\nChange-Id: I146fbdb53d99e3a32766ac7cd337ac5ed7fd9adf",
    "tree": {
      "sha": "43ead1a124f2327f2befe458ee2196f77f0ea62c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/43ead1a124f2327f2befe458ee2196f77f0ea62c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fdbc5215e756e75cdda894b4d84150de35438061",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdbc5215e756e75cdda894b4d84150de35438061",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fdbc5215e756e75cdda894b4d84150de35438061",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdbc5215e756e75cdda894b4d84150de35438061/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "85d3ad8e0b44832e7726d20eaf456051b5262b43",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85d3ad8e0b44832e7726d20eaf456051b5262b43",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/85d3ad8e0b44832e7726d20eaf456051b5262b43"
    }
  ],
  "stats": {
    "total": 10,
    "additions": 9,
    "deletions": 1
  },
  "files": [
    {
      "sha": "c73a8cd9df3962fe23729fdd009c377717c77150",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc5215e756e75cdda894b4d84150de35438061/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc5215e756e75cdda894b4d84150de35438061/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fdbc5215e756e75cdda894b4d84150de35438061",
      "patch": "@@ -1,3 +1,10 @@\n+2021-02-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* record-full.c (record_full_async_inferior_event_handler):\n+\tDon't clear async event handler.\n+\t(record_full_base_target::wait): Clear async event handler at\n+\tbeginning.\n+\n 2021-02-04  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* record-btrace.c (record_btrace_handle_async_inferior_event):"
    },
    {
      "sha": "2373741470c45deb46d9e48b7dc7fc8925f5341d",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fdbc5215e756e75cdda894b4d84150de35438061/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fdbc5215e756e75cdda894b4d84150de35438061/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=fdbc5215e756e75cdda894b4d84150de35438061",
      "patch": "@@ -903,7 +903,6 @@ static struct async_event_handler *record_full_async_inferior_event_token;\n static void\n record_full_async_inferior_event_handler (gdb_client_data data)\n {\n-  clear_async_event_handler (record_full_async_inferior_event_token);\n   inferior_event_handler (INF_REG_EVENT);\n }\n \n@@ -1454,6 +1453,8 @@ record_full_base_target::wait (ptid_t ptid, struct target_waitstatus *status,\n {\n   ptid_t return_ptid;\n \n+  clear_async_event_handler (record_full_async_inferior_event_token);\n+\n   return_ptid = record_full_wait_1 (this, ptid, status, options);\n   if (status->kind != TARGET_WAITKIND_IGNORE)\n     {"
    }
  ]
}