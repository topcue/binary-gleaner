{
  "sha": "004eecfdc7d9b47e8364719667c64edb22d12d44",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDA0ZWVjZmRjN2Q5YjQ3ZTgzNjQ3MTk2NjdjNjRlZGIyMmQxMmQ0NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-29T21:04:33Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-29T21:04:38Z"
    },
    "message": "Change program_space_empty_p to method on program_space\n\nThis changes program_space_empty_p to be a method on program_space.\nIt also changes it to return bool.  I removed the \"_p\" suffix because\n\"empty\" is a \"well-known\" C++ method name.\n\ngdb/ChangeLog\n2020-10-29  Tom Tromey  <tom@tromey.com>\n\n\t* inferior.c (delete_inferior): Update.\n\t* progspace.c (program_space::empty): Rename from\n\tprogram_space_empty_p.  Return bool.\n\t* progspace.h (struct program_space) <empty>: New method.\n\t(program_space_empty_p): Don't declare.",
    "tree": {
      "sha": "e07c8b72a4dacff3b87850f2711ea06163c087be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e07c8b72a4dacff3b87850f2711ea06163c087be"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/004eecfdc7d9b47e8364719667c64edb22d12d44",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/004eecfdc7d9b47e8364719667c64edb22d12d44",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/004eecfdc7d9b47e8364719667c64edb22d12d44",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/004eecfdc7d9b47e8364719667c64edb22d12d44/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e39fb97114f28dbc0f38a9851437437bfc5c43a0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e39fb97114f28dbc0f38a9851437437bfc5c43a0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e39fb97114f28dbc0f38a9851437437bfc5c43a0"
    }
  ],
  "stats": {
    "total": 26,
    "additions": 16,
    "deletions": 10
  },
  "files": [
    {
      "sha": "1286d579505bffe5b76e280650e90fba06d9e74c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/004eecfdc7d9b47e8364719667c64edb22d12d44/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/004eecfdc7d9b47e8364719667c64edb22d12d44/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=004eecfdc7d9b47e8364719667c64edb22d12d44",
      "patch": "@@ -1,3 +1,11 @@\n+2020-10-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* inferior.c (delete_inferior): Update.\n+\t* progspace.c (program_space::empty): Rename from\n+\tprogram_space_empty_p.  Return bool.\n+\t* progspace.h (struct program_space) <empty>: New method.\n+\t(program_space_empty_p): Don't declare.\n+\n 2020-10-29  Tom Tromey  <tom@tromey.com>\n \n \t* progspace.c (program_space::~program_space): Don't call"
    },
    {
      "sha": "12f4de487c451e8880db0538335ec512c6e0b6c5",
      "filename": "gdb/inferior.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/004eecfdc7d9b47e8364719667c64edb22d12d44/gdb/inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/004eecfdc7d9b47e8364719667c64edb22d12d44/gdb/inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.c?ref=004eecfdc7d9b47e8364719667c64edb22d12d44",
      "patch": "@@ -175,7 +175,7 @@ delete_inferior (struct inferior *todel)\n   gdb::observers::inferior_removed.notify (inf);\n \n   /* If this program space is rendered useless, remove it. */\n-  if (program_space_empty_p (inf->pspace))\n+  if (inf->pspace->empty ())\n     delete inf->pspace;\n \n   delete inf;"
    },
    {
      "sha": "70c0f7ec2a2300ce336e4498a57c31101f5a8db8",
      "filename": "gdb/progspace.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/004eecfdc7d9b47e8364719667c64edb22d12d44/gdb/progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/004eecfdc7d9b47e8364719667c64edb22d12d44/gdb/progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.c?ref=004eecfdc7d9b47e8364719667c64edb22d12d44",
      "patch": "@@ -280,13 +280,10 @@ set_current_program_space (struct program_space *pspace)\n \n /* Returns true iff there's no inferior bound to PSPACE.  */\n \n-int\n-program_space_empty_p (struct program_space *pspace)\n+bool\n+program_space::empty ()\n {\n-  if (find_inferior_for_program_space (pspace) != NULL)\n-      return 0;\n-\n-  return 1;\n+  return find_inferior_for_program_space (this) == nullptr;\n }\n \n /* Prints the list of program spaces and their details on UIOUT.  If"
    },
    {
      "sha": "fa5247f8ac209778474da073346019ce87292fab",
      "filename": "gdb/progspace.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/004eecfdc7d9b47e8364719667c64edb22d12d44/gdb/progspace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/004eecfdc7d9b47e8364719667c64edb22d12d44/gdb/progspace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.h?ref=004eecfdc7d9b47e8364719667c64edb22d12d44",
      "patch": "@@ -293,6 +293,10 @@ struct program_space\n      later be printed.  */\n   void clear_solib_cache ();\n \n+  /* Returns true iff there's no inferior bound to this program\n+     space.  */\n+  bool empty ();\n+\n   /* Unique ID number.  */\n   int num = 0;\n \n@@ -383,9 +387,6 @@ extern std::vector<struct program_space *>program_spaces;\n /* The current program space.  This is always non-null.  */\n extern struct program_space *current_program_space;\n \n-/* Returns true iff there's no inferior bound to PSPACE.  */\n-extern int program_space_empty_p (struct program_space *pspace);\n-\n /* Copies program space SRC to DEST.  Copies the main executable file,\n    and the main symbol file.  Returns DEST.  */\n extern struct program_space *clone_program_space (struct program_space *dest,"
    }
  ]
}