{
  "sha": "f2478a7e8b145a55c343bc7a62c53b021062229e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjI0NzhhN2U4YjE0NWE1NWMzNDNiYzdhNjJjNTNiMDIxMDYyMjI5ZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-07-11T01:20:38Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-07-11T01:20:50Z"
    },
    "message": "breakpoint: Make is_*point functions return bool\n\nThis includes changing the FILTER parameters of two functions\naccordingly.  I also tried to normalize the function comments to our\ncurrent standards.\n\ngdb/ChangeLog:\n\n\t* breakpoint.c (is_hardware_watchpoint): Remove\n\tforward-declaration.\n\t(is_masked_watchpoint): Change return type to bool.\n\t(is_tracepoint): Likewise.\n\t(is_breakpoint): Likewise.\n\t(is_hardware_watchpoint): Likewise.\n\t(is_watchpoint): Likewise.\n\t(is_no_memory_software_watchpoint): Likewise.\n\t(is_catchpoint): Likewise.\n\t(breakpoint_1): Make FILTER parameter's return type bool.\n\tis_masked_watchpoint): Change return type to bool.\n\t(save_breakpoints): Make FILTER parameter's return type bool.\n\t* breakpoint.h (is_breakpoint): Change return type to bool.\n\t(is_watchpoint): Likewise.\n\t(is_catchpoint): Likewise.\n\t(is_tracepoint): Likewise.",
    "tree": {
      "sha": "91e96966b2af7dd53b5ae709f96d5c56eac1d304",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/91e96966b2af7dd53b5ae709f96d5c56eac1d304"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f2478a7e8b145a55c343bc7a62c53b021062229e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f2478a7e8b145a55c343bc7a62c53b021062229e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f2478a7e8b145a55c343bc7a62c53b021062229e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f2478a7e8b145a55c343bc7a62c53b021062229e/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2ee0a9b7bcd86721bd44d8a8fc967b2a8cbe18e0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2ee0a9b7bcd86721bd44d8a8fc967b2a8cbe18e0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2ee0a9b7bcd86721bd44d8a8fc967b2a8cbe18e0"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 47,
    "deletions": 30
  },
  "files": [
    {
      "sha": "0121791a22b22c0b44387d113e36c180c8aef4d6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2478a7e8b145a55c343bc7a62c53b021062229e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2478a7e8b145a55c343bc7a62c53b021062229e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f2478a7e8b145a55c343bc7a62c53b021062229e",
      "patch": "@@ -1,3 +1,22 @@\n+2019-07-10  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* breakpoint.c (is_hardware_watchpoint): Remove\n+\tforward-declaration.\n+\t(is_masked_watchpoint): Change return type to bool.\n+\t(is_tracepoint): Likewise.\n+\t(is_breakpoint): Likewise.\n+\t(is_hardware_watchpoint): Likewise.\n+\t(is_watchpoint): Likewise.\n+\t(is_no_memory_software_watchpoint): Likewise.\n+\t(is_catchpoint): Likewise.\n+\t(breakpoint_1): Make FILTER parameter's return type bool.\n+\tis_masked_watchpoint): Change return type to bool.\n+\t(save_breakpoints): Make FILTER parameter's return type bool.\n+\t* breakpoint.h (is_breakpoint): Change return type to bool.\n+\t(is_watchpoint): Likewise.\n+\t(is_catchpoint): Likewise.\n+\t(is_tracepoint): Likewise.\n+\n 2019-07-10  Tom Tromey  <tom@tromey.com>\n \n \t* defs.h: Don't include gdbarch.h."
    },
    {
      "sha": "87ec7b81e329fcffef87d49b64a53421a7a905fa",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 18,
      "deletions": 24,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2478a7e8b145a55c343bc7a62c53b021062229e/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2478a7e8b145a55c343bc7a62c53b021062229e/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=f2478a7e8b145a55c343bc7a62c53b021062229e",
      "patch": "@@ -217,15 +217,13 @@ static void update_global_location_list (enum ugll_insert_mode);\n \n static void update_global_location_list_nothrow (enum ugll_insert_mode);\n \n-static int is_hardware_watchpoint (const struct breakpoint *bpt);\n-\n static void insert_breakpoint_locations (void);\n \n static void trace_pass_command (const char *, int);\n \n static void set_tracepoint_count (int num);\n \n-static int is_masked_watchpoint (const struct breakpoint *b);\n+static bool is_masked_watchpoint (const struct breakpoint *b);\n \n static struct bp_location **get_first_locp_gte_addr (CORE_ADDR address);\n \n@@ -1037,7 +1035,9 @@ is_longjmp_type (bptype type)\n   return type == bp_longjmp || type == bp_exception;\n }\n \n-int\n+/* See breakpoint.h.  */\n+\n+bool\n is_tracepoint (const struct breakpoint *b)\n {\n   return is_tracepoint_type (b->type);\n@@ -1493,12 +1493,9 @@ breakpoint_xfer_memory (gdb_byte *readbuf, gdb_byte *writebuf,\n   }\n }\n \n-\f\n-\n-/* Return true if BPT is either a software breakpoint or a hardware\n-   breakpoint.  */\n+/* See breakpoint.h.  */\n \n-int\n+bool\n is_breakpoint (const struct breakpoint *bpt)\n {\n   return (bpt->type == bp_breakpoint\n@@ -1508,18 +1505,17 @@ is_breakpoint (const struct breakpoint *bpt)\n \n /* Return true if BPT is of any hardware watchpoint kind.  */\n \n-static int\n+static bool\n is_hardware_watchpoint (const struct breakpoint *bpt)\n {\n   return (bpt->type == bp_hardware_watchpoint\n \t  || bpt->type == bp_read_watchpoint\n \t  || bpt->type == bp_access_watchpoint);\n }\n \n-/* Return true if BPT is of any watchpoint kind, hardware or\n-   software.  */\n+/* See breakpoint.h.  */\n \n-int\n+bool\n is_watchpoint (const struct breakpoint *bpt)\n {\n   return (is_hardware_watchpoint (bpt)\n@@ -1604,7 +1600,7 @@ software_watchpoint_add_no_memory_location (struct breakpoint *b,\n /* Returns true if B is a software watchpoint that is not watching any\n    memory (e.g., \"watch $pc\").  */\n \n-static int\n+static bool\n is_no_memory_software_watchpoint (struct breakpoint *b)\n {\n   return (b->type == bp_watchpoint\n@@ -4130,15 +4126,13 @@ hardware_watchpoint_inserted_in_range (const address_space *aspace,\n     }\n   return 0;\n }\n-\f\n \n-/* bpstat stuff.  External routines' interfaces are documented\n-   in breakpoint.h.  */\n+/* See breakpoint.h.  */\n \n-int\n-is_catchpoint (struct breakpoint *ep)\n+bool\n+is_catchpoint (struct breakpoint *b)\n {\n-  return (ep->type == bp_catchpoint);\n+  return (b->type == bp_catchpoint);\n }\n \n /* Frees any storage that is part of a bpstat.  Does not walk the\n@@ -6418,7 +6412,7 @@ pending_breakpoint_p (struct breakpoint *b)\n \n static int\n breakpoint_1 (const char *bp_num_list, bool show_internal,\n-\t      int (*filter) (const struct breakpoint *))\n+\t      bool (*filter) (const struct breakpoint *))\n {\n   struct breakpoint *b;\n   struct bp_location *last_loc = NULL;\n@@ -10437,7 +10431,7 @@ static struct breakpoint_ops masked_watchpoint_breakpoint_ops;\n \n /* Tell whether the given watchpoint is a masked hardware watchpoint.  */\n \n-static int\n+static bool\n is_masked_watchpoint (const struct breakpoint *b)\n {\n   return b->ops == &masked_watchpoint_breakpoint_ops;\n@@ -14903,11 +14897,11 @@ print_recreate_thread (struct breakpoint *b, struct ui_file *fp)\n /* Save information on user settable breakpoints (watchpoints, etc) to\n    a new script file named FILENAME.  If FILTER is non-NULL, call it\n    on each breakpoint and only include the ones for which it returns\n-   non-zero.  */\n+   true.  */\n \n static void\n save_breakpoints (const char *filename, int from_tty,\n-\t\t  int (*filter) (const struct breakpoint *))\n+\t\t  bool (*filter) (const struct breakpoint *))\n {\n   struct breakpoint *tp;\n   int any = 0;"
    },
    {
      "sha": "a825be72228f2552826770d732f1b9defb3faab6",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2478a7e8b145a55c343bc7a62c53b021062229e/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2478a7e8b145a55c343bc7a62c53b021062229e/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=f2478a7e8b145a55c343bc7a62c53b021062229e",
      "patch": "@@ -866,11 +866,12 @@ extern struct breakpoint *breakpoint_find_if\n /* Return true if BPT is either a software breakpoint or a hardware\n    breakpoint.  */\n \n-extern int is_breakpoint (const struct breakpoint *bpt);\n+extern bool is_breakpoint (const struct breakpoint *bpt);\n \n-/* Returns true if BPT is really a watchpoint.  */\n+/* Return true if BPT is of any watchpoint kind, hardware or\n+   software.  */\n \n-extern int is_watchpoint (const struct breakpoint *bpt);\n+extern bool is_watchpoint (const struct breakpoint *bpt);\n \n /* Return true if BPT is a C++ exception catchpoint (catch\n    catch/throw/rethrow).  */\n@@ -1554,8 +1555,9 @@ extern void remove_solib_event_breakpoints_at_next_stop (void);\n \n extern void disable_breakpoints_in_shlibs (void);\n \n-/* This function returns TRUE if ep is a catchpoint.  */\n-extern int is_catchpoint (struct breakpoint *);\n+/* This function returns true if B is a catchpoint.  */\n+\n+extern bool is_catchpoint (struct breakpoint *b);\n \n /* Shared helper function (MI and CLI) for creating and installing\n    a shared object event catchpoint.  */\n@@ -1634,7 +1636,9 @@ extern struct tracepoint *\n /* Return a vector of all tracepoints currently defined.  */\n extern std::vector<breakpoint *> all_tracepoints (void);\n \n-extern int is_tracepoint (const struct breakpoint *b);\n+/* Return true if B is of tracepoint kind.  */\n+\n+extern bool is_tracepoint (const struct breakpoint *b);\n \n /* Return a vector of all static tracepoints defined at ADDR.  */\n extern std::vector<breakpoint *> static_tracepoints_here (CORE_ADDR addr);"
    }
  ]
}