{
  "sha": "b01175fc46bbb9103bde88ec93236bcb6719c696",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjAxMTc1ZmM0NmJiYjkxMDNiZGU4OGVjOTMyMzZiY2I2NzE5YzY5Ng==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-08-06T10:14:37Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-10-23T09:57:13Z"
    },
    "message": "gdb: Merge auto and unknown language implementations\n\nThe auto_language and unknown_language classes are basically the same\nexcept for the language names and store_sym_names_in_linkage_form_p\nwhich the unknown_language overrides to return true, while\nauto_language returns the default false.\n\nThis commit creates a new parent class from which both of these\nlanguages can inherit.  The two base classes are now greatly reduced.\n\nSome of the static helper functions which previously were called from\nboth of these languages are now only called from one place, and so\nI've inlined them into the new class.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* language.c (default_is_string_type_p): Delete, implementation\n\tmoved into auto_or_unknown_language::is_string_type_p.\n\t(unk_op_print_tab): Moved into\n\tauto_or_unknown_language::opcode_print_table.\n\t(unknown_language_arch_info): Delete, implementation moved into\n\tauto_or_unknown_language::language_arch_info.\n\t(class auto_or_unknown_language): New class, member functions\n\tcopied from unknown_language class, with some updates.\n\t(class unknown_language): Most member functions moved into\n\tauto_or_unknown_language class.  Inherit from\n\tauto_or_unknown_language class.\n\t(class auto_language): Inherit from auto_or_unknown_language.\n\tDelete most member functions.",
    "tree": {
      "sha": "99cd85540b79968319d8579877bb98c200c57133",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/99cd85540b79968319d8579877bb98c200c57133"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b01175fc46bbb9103bde88ec93236bcb6719c696",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b01175fc46bbb9103bde88ec93236bcb6719c696",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b01175fc46bbb9103bde88ec93236bcb6719c696",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b01175fc46bbb9103bde88ec93236bcb6719c696/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a948551942824947baaf6a077745fb5480d264a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a948551942824947baaf6a077745fb5480d264a7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a948551942824947baaf6a077745fb5480d264a7"
    }
  ],
  "stats": {
    "total": 231,
    "additions": 76,
    "deletions": 155
  },
  "files": [
    {
      "sha": "8de837632a643e3700041db7d0a4c4b0fc1e4e19",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b01175fc46bbb9103bde88ec93236bcb6719c696/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b01175fc46bbb9103bde88ec93236bcb6719c696/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b01175fc46bbb9103bde88ec93236bcb6719c696",
      "patch": "@@ -1,3 +1,19 @@\n+2020-10-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* language.c (default_is_string_type_p): Delete, implementation\n+\tmoved into auto_or_unknown_language::is_string_type_p.\n+\t(unk_op_print_tab): Moved into\n+\tauto_or_unknown_language::opcode_print_table.\n+\t(unknown_language_arch_info): Delete, implementation moved into\n+\tauto_or_unknown_language::language_arch_info.\n+\t(class auto_or_unknown_language): New class, member functions\n+\tcopied from unknown_language class, with some updates.\n+\t(class unknown_language): Most member functions moved into\n+\tauto_or_unknown_language class.  Inherit from\n+\tauto_or_unknown_language class.\n+\t(class auto_language): Inherit from auto_or_unknown_language.\n+\tDelete most member functions.\n+\n 2020-10-22  Hannes Domani  <ssbssa@yahoo.de>\n \n \t* stabsread.c (read_member_functions): Remove gdb_assert."
    },
    {
      "sha": "ffc1e85503a91ff10224ca64a5b7046943f4a5fe",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 60,
      "deletions": 155,
      "changes": 215,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b01175fc46bbb9103bde88ec93236bcb6719c696/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b01175fc46bbb9103bde88ec93236bcb6719c696/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=b01175fc46bbb9103bde88ec93236bcb6719c696",
      "patch": "@@ -782,60 +782,25 @@ language_defn::expression_ops () const\n   return &exp_descriptor_standard;\n }\n \n-/* Return true if TYPE is a string type, otherwise return false.  This\n-   default implementation only detects TYPE_CODE_STRING.  */\n+/* Parent class for both the \"auto\" and \"unknown\" languages.  These two\n+   pseudo-languages are very similar so merging their implementations like\n+   this makes sense.  */\n \n-static bool\n-default_is_string_type_p (struct type *type)\n-{\n-  type = check_typedef (type);\n-  while (type->code () == TYPE_CODE_REF)\n-    {\n-      type = TYPE_TARGET_TYPE (type);\n-      type = check_typedef (type);\n-    }\n-  return (type->code ()  == TYPE_CODE_STRING);\n-}\n-\n-static const struct op_print unk_op_print_tab[] =\n-{\n-  {NULL, OP_NULL, PREC_NULL, 0}\n-};\n-\n-static void\n-unknown_language_arch_info (struct gdbarch *gdbarch,\n-\t\t\t    struct language_arch_info *lai)\n-{\n-  lai->string_char_type = builtin_type (gdbarch)->builtin_char;\n-  lai->bool_type_default = builtin_type (gdbarch)->builtin_int;\n-  lai->primitive_type_vector = GDBARCH_OBSTACK_CALLOC (gdbarch, 1,\n-\t\t\t\t\t\t       struct type *);\n-}\n-\n-/* Class representing the unknown language.  */\n-\n-class unknown_language : public language_defn\n+class auto_or_unknown_language : public language_defn\n {\n public:\n-  unknown_language ()\n-    : language_defn (language_unknown)\n+  auto_or_unknown_language (enum language lang)\n+    : language_defn (lang)\n   { /* Nothing.  */ }\n \n-  /* See language.h.  */\n-\n-  const char *name () const override\n-  { return \"unknown\"; }\n-\n-  /* See language.h.  */\n-\n-  const char *natural_name () const override\n-  { return \"Unknown\"; }\n-\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override\n   {\n-    unknown_language_arch_info (gdbarch, lai);\n+    lai->string_char_type = builtin_type (gdbarch)->builtin_char;\n+    lai->bool_type_default = builtin_type (gdbarch)->builtin_int;\n+    lai->primitive_type_vector = GDBARCH_OBSTACK_CALLOC (gdbarch, 1,\n+\t\t\t\t\t\t       struct type *);\n   }\n \n   /* See language.h.  */\n@@ -844,14 +809,15 @@ class unknown_language : public language_defn\n \t\t   struct ui_file *stream, int show, int level,\n \t\t   const struct type_print_options *flags) const override\n   {\n-    error (_(\"unimplemented unknown_language::print_type called\"));\n+    error (_(\"type printing not implemented for language \\\"%s\\\"\"),\n+\t   natural_name ());\n   }\n \n   /* See language.h.  */\n \n   char *demangle (const char *mangled, int options) const override\n   {\n-    /* The unknown language just uses the C++ demangler.  */\n+    /* The auto language just uses the C++ demangler.  */\n     return gdb_demangle (mangled, options);\n   }\n \n@@ -860,7 +826,8 @@ class unknown_language : public language_defn\n   void value_print (struct value *val, struct ui_file *stream,\n \t\t    const struct value_print_options *options) const override\n   {\n-    error (_(\"unimplemented unknown_language::value_print called\"));\n+    error (_(\"value printing not implemented for language \\\"%s\\\"\"),\n+\t   natural_name ());\n   }\n \n   /* See language.h.  */\n@@ -869,7 +836,8 @@ class unknown_language : public language_defn\n \t(struct value *val, struct ui_file *stream, int recurse,\n \t const struct value_print_options *options) const override\n   {\n-    error (_(\"unimplemented unknown_language::value_print_inner called\"));\n+    error (_(\"inner value printing not implemented for language \\\"%s\\\"\"),\n+\t   natural_name ());\n   }\n \n   /* See language.h.  */\n@@ -885,15 +853,17 @@ class unknown_language : public language_defn\n   void emitchar (int ch, struct type *chtype,\n \t\t struct ui_file *stream, int quoter) const override\n   {\n-    error (_(\"unimplemented unknown_language::emitchar called\"));\n+    error (_(\"emit character not implemented for language \\\"%s\\\"\"),\n+\t   natural_name ());\n   }\n \n   /* See language.h.  */\n \n   void printchar (int ch, struct type *chtype,\n \t\t  struct ui_file *stream) const override\n   {\n-    error (_(\"unimplemented unknown_language::printchar called\"));\n+    error (_(\"print character not implemented for language \\\"%s\\\"\"),\n+\t   natural_name ());\n   }\n \n   /* See language.h.  */\n@@ -903,22 +873,30 @@ class unknown_language : public language_defn\n \t\t const char *encoding, int force_ellipses,\n \t\t const struct value_print_options *options) const override\n   {\n-    error (_(\"unimplemented unknown_language::printstr called\"));\n+    error (_(\"print string not implemented for language \\\"%s\\\"\"),\n+\t   natural_name ());\n   }\n \n   /* See language.h.  */\n \n   void print_typedef (struct type *type, struct symbol *new_symbol,\n \t\t      struct ui_file *stream) const override\n   {\n-    error (_(\"unimplemented unknown_language::print_typedef called\"));\n+    error (_(\"print typedef not implemented for language \\\"%s\\\"\"),\n+\t   natural_name ());\n   }\n \n   /* See language.h.  */\n \n   bool is_string_type_p (struct type *type) const override\n   {\n-    return default_is_string_type_p (type);\n+    type = check_typedef (type);\n+    while (type->code () == TYPE_CODE_REF)\n+      {\n+\ttype = TYPE_TARGET_TYPE (type);\n+\ttype = check_typedef (type);\n+      }\n+    return (type->code () == TYPE_CODE_STRING);\n   }\n \n   /* See language.h.  */\n@@ -928,26 +906,24 @@ class unknown_language : public language_defn\n \n   /* See language.h.  */\n \n-  bool store_sym_names_in_linkage_form_p () const override\n-  { return true; }\n-\n-  /* See language.h.  */\n-\n   const struct op_print *opcode_print_table () const override\n-  { return unk_op_print_tab; }\n-};\n-\n-/* Single instance of the unknown language class.  */\n+  {\n+    static const struct op_print unk_op_print_tab[] =\n+      {\n+\t{NULL, OP_NULL, PREC_NULL, 0}\n+      };\n \n-static unknown_language unknown_language_defn;\n+    return unk_op_print_tab;\n+  }\n+};\n \n /* Class representing the fake \"auto\" language.  */\n \n-class auto_language : public language_defn\n+class auto_language : public auto_or_unknown_language\n {\n public:\n   auto_language ()\n-    : language_defn (language_auto)\n+    : auto_or_unknown_language (language_auto)\n   { /* Nothing.  */ }\n \n   /* See language.h.  */\n@@ -959,111 +935,40 @@ class auto_language : public language_defn\n \n   const char *natural_name () const override\n   { return \"Auto\"; }\n+};\n \n-  /* See language.h.  */\n-  void language_arch_info (struct gdbarch *gdbarch,\n-\t\t\t   struct language_arch_info *lai) const override\n-  {\n-    unknown_language_arch_info (gdbarch, lai);\n-  }\n-\n-  /* See language.h.  */\n-\n-  void print_type (struct type *type, const char *varstring,\n-\t\t   struct ui_file *stream, int show, int level,\n-\t\t   const struct type_print_options *flags) const override\n-  {\n-    error (_(\"unimplemented auto_language::print_type called\"));\n-  }\n-\n-  /* See language.h.  */\n-\n-  char *demangle (const char *mangled, int options) const override\n-  {\n-    /* The auto language just uses the C++ demangler.  */\n-    return gdb_demangle (mangled, options);\n-  }\n-\n-  /* See language.h.  */\n-\n-  void value_print (struct value *val, struct ui_file *stream,\n-\t\t    const struct value_print_options *options) const override\n-  {\n-    error (_(\"unimplemented auto_language::value_print called\"));\n-  }\n-\n-  /* See language.h.  */\n-\n-  void value_print_inner\n-\t(struct value *val, struct ui_file *stream, int recurse,\n-\t const struct value_print_options *options) const override\n-  {\n-    error (_(\"unimplemented auto_language::value_print_inner called\"));\n-  }\n-\n-  /* See language.h.  */\n-\n-  int parser (struct parser_state *ps) const override\n-  {\n-    /* No parsing is done, just claim success.  */\n-    return 1;\n-  }\n-\n-  /* See language.h.  */\n-\n-  void emitchar (int ch, struct type *chtype,\n-\t\t struct ui_file *stream, int quoter) const override\n-  {\n-    error (_(\"unimplemented auto_language::emitchar called\"));\n-  }\n-\n-  /* See language.h.  */\n-\n-  void printchar (int ch, struct type *chtype,\n-\t\t  struct ui_file *stream) const override\n-  {\n-    error (_(\"unimplemented auto_language::printchar called\"));\n-  }\n-\n-  /* See language.h.  */\n+/* Single instance of the fake \"auto\" language.  */\n \n-  void printstr (struct ui_file *stream, struct type *elttype,\n-\t\t const gdb_byte *string, unsigned int length,\n-\t\t const char *encoding, int force_ellipses,\n-\t\t const struct value_print_options *options) const override\n-  {\n-    error (_(\"unimplemented auto_language::printstr called\"));\n-  }\n+static auto_language auto_language_defn;\n \n-  /* See language.h.  */\n+/* Class representing the unknown language.  */\n \n-  void print_typedef (struct type *type, struct symbol *new_symbol,\n-\t\t      struct ui_file *stream) const override\n-  {\n-    error (_(\"unimplemented auto_language::print_typedef called\"));\n-  }\n+class unknown_language : public auto_or_unknown_language\n+{\n+public:\n+  unknown_language ()\n+    : auto_or_unknown_language (language_unknown)\n+  { /* Nothing.  */ }\n \n   /* See language.h.  */\n \n-  bool is_string_type_p (struct type *type) const override\n-  {\n-    return default_is_string_type_p (type);\n-  }\n+  const char *name () const override\n+  { return \"unknown\"; }\n \n   /* See language.h.  */\n \n-  const char *name_of_this () const override\n-  { return \"this\"; }\n+  const char *natural_name () const override\n+  { return \"Unknown\"; }\n \n   /* See language.h.  */\n \n-  const struct op_print *opcode_print_table () const override\n-  { return unk_op_print_tab; }\n+  bool store_sym_names_in_linkage_form_p () const override\n+  { return true; }\n };\n \n-/* Single instance of the fake \"auto\" language.  */\n+/* Single instance of the unknown language class.  */\n \n-static auto_language auto_language_defn;\n+static unknown_language unknown_language_defn;\n \n \f\n /* Per-architecture language information.  */"
    }
  ]
}