{
  "sha": "e2558df32b83c2e3b41829d46c0b3d09732d7176",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTI1NThkZjMyYjgzYzJlM2I0MTgyOWQ0NmMwYjNkMDk3MzJkNzE3Ng==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:11:53Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:05Z"
    },
    "message": "gdbserver: turn target ops 'read_memory' and 'write_memory' into methods\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's read_memory and write_memory\n\tops into methods of process_target.\n\n\t* target.h (struct process_stratum_target): Remove the target ops.\n\t(class process_target): Add the target ops.\n\n\tUpdate the derived classes and callers below.\n\n\t* linux-aarch32-low.cc (arm_breakpoint_at): Update.\n\t* linux-aarch64-low.cc (aarch64_breakpoint_at): Update.\n\t* linux-arm-low.cc (arm_sigreturn_next_pc): Update.\n\t(arm_get_syscall_trapinfo): Update.\n\t* linux-cris-low.cc (cris_breakpoint_at): Update.\n\t* linux-crisv32-low.cc (cris_breakpoint_at): Update.\n\t* linux-m32r-low.cc (m32r_breakpoint_at): Update.\n\t* linux-mips-low.cc (mips_breakpoint_at): Update.\n\t* linux-nios2-low.cc (nios2_breakpoint_at): Update.\n\t* linux-ppc-low.cc (ppc_breakpoint_at): Update.\n\t* linux-sh-low.cc (sh_breakpoint_at): Update.\n\t* linux-sparc-low.cc (sparc_fill_gregset_to_stack): Update.\n\t(sparc_store_gregset_from_stack): Update.\n\t(sparc_breakpoint_at): Update.\n\t* linux-tic6x-low.cc (tic6x_breakpoint_at): Update.\n\t* linux-tile-low.cc (tile_breakpoint_at): Update.\n\t* linux-x86-low.cc (x86_breakpoint_at): Update.\n\t* linux-xtensa-low.cc (xtensa_breakpoint_at): Update.\n\t* mem-brea.cc (insert_memory_breakpoint): Update.\n\t(validate_inserted_breakpoint): Update.\n\t* target.cc (read_inferior_memory): Update.\n\t(target_write_memory): Update.\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_read_memory): Make a wrapper around the read_memory target\n\top call.\n\t(linux_process_target::read_memory): Rename from linux_read_memory.\n\t(linux_write_memory): Turn into ...\n\t(linux_process_target::write_memory): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t(lynx_read_memory): Turn into ...\n\t(lynx_process_target::read_memory): ... this.\n\t(lynx_write_memory): Turn into ...\n\t(lynx_process_target::write_memory): ... this.\n\t* lynx-low.h (class lynx_process_target): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t(nto_read_memory): Turn into ...\n\t(nto_process_target::read_memory): ... this.\n\t(nto_write_memory): Turn into ...\n\t(nto_process_target::write_memory): ... this.\n\t* nto-low.h (class nto_process_target): Update.\n\t* win32-low.cc (win32_target_ops): Update.\n\t(win32_read_inferior_memory): Turn into ...\n\t(win32_process_target::read_memory): ... this.\n\t(win32_write_inferior_memory): Turn into ...\n\t(win32_process_target::write_memory): ... this.\n\t* win32-low.h (class win32_process_target): Update.",
    "tree": {
      "sha": "bca1d3be31edd11a17b7e9c0055cce0beac4ec43",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bca1d3be31edd11a17b7e9c0055cce0beac4ec43"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e2558df32b83c2e3b41829d46c0b3d09732d7176",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2558df32b83c2e3b41829d46c0b3d09732d7176",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e2558df32b83c2e3b41829d46c0b3d09732d7176",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2558df32b83c2e3b41829d46c0b3d09732d7176/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "79b4408780b27eeb60de7f3fe10bc654dddcf067",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79b4408780b27eeb60de7f3fe10bc654dddcf067",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/79b4408780b27eeb60de7f3fe10bc654dddcf067"
    }
  ],
  "stats": {
    "total": 244,
    "additions": 166,
    "deletions": 78
  },
  "files": [
    {
      "sha": "3617c1ba214eafe89e254d0744c77da46be61cf5",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -1,3 +1,61 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's read_memory and write_memory\n+\tops into methods of process_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target ops.\n+\t(class process_target): Add the target ops.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* linux-aarch32-low.cc (arm_breakpoint_at): Update.\n+\t* linux-aarch64-low.cc (aarch64_breakpoint_at): Update.\n+\t* linux-arm-low.cc (arm_sigreturn_next_pc): Update.\n+\t(arm_get_syscall_trapinfo): Update.\n+\t* linux-cris-low.cc (cris_breakpoint_at): Update.\n+\t* linux-crisv32-low.cc (cris_breakpoint_at): Update.\n+\t* linux-m32r-low.cc (m32r_breakpoint_at): Update.\n+\t* linux-mips-low.cc (mips_breakpoint_at): Update.\n+\t* linux-nios2-low.cc (nios2_breakpoint_at): Update.\n+\t* linux-ppc-low.cc (ppc_breakpoint_at): Update.\n+\t* linux-sh-low.cc (sh_breakpoint_at): Update.\n+\t* linux-sparc-low.cc (sparc_fill_gregset_to_stack): Update.\n+\t(sparc_store_gregset_from_stack): Update.\n+\t(sparc_breakpoint_at): Update.\n+\t* linux-tic6x-low.cc (tic6x_breakpoint_at): Update.\n+\t* linux-tile-low.cc (tile_breakpoint_at): Update.\n+\t* linux-x86-low.cc (x86_breakpoint_at): Update.\n+\t* linux-xtensa-low.cc (xtensa_breakpoint_at): Update.\n+\t* mem-brea.cc (insert_memory_breakpoint): Update.\n+\t(validate_inserted_breakpoint): Update.\n+\t* target.cc (read_inferior_memory): Update.\n+\t(target_write_memory): Update.\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_read_memory): Make a wrapper around the read_memory target\n+\top call.\n+\t(linux_process_target::read_memory): Rename from linux_read_memory.\n+\t(linux_write_memory): Turn into ...\n+\t(linux_process_target::write_memory): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t(lynx_read_memory): Turn into ...\n+\t(lynx_process_target::read_memory): ... this.\n+\t(lynx_write_memory): Turn into ...\n+\t(lynx_process_target::write_memory): ... this.\n+\t* lynx-low.h (class lynx_process_target): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t(nto_read_memory): Turn into ...\n+\t(nto_process_target::read_memory): ... this.\n+\t(nto_write_memory): Turn into ...\n+\t(nto_process_target::write_memory): ... this.\n+\t* nto-low.h (class nto_process_target): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\t(win32_read_inferior_memory): Turn into ...\n+\t(win32_process_target::read_memory): ... this.\n+\t(win32_write_inferior_memory): Turn into ...\n+\t(win32_process_target::write_memory): ... this.\n+\t* win32-low.h (class win32_process_target): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's prepare_to_access_memory and"
    },
    {
      "sha": "41e018ab528dba9b6f386fb053674ea74cddba53",
      "filename": "gdbserver/linux-aarch32-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-aarch32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-aarch32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch32-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -192,13 +192,13 @@ arm_breakpoint_at (CORE_ADDR where)\n       /* Thumb mode.  */\n       unsigned short insn;\n \n-      (*the_target->read_memory) (where, (unsigned char *) &insn, 2);\n+      the_target->pt->read_memory (where, (unsigned char *) &insn, 2);\n       if (insn == thumb_breakpoint)\n \treturn 1;\n \n       if (insn == thumb2_breakpoint[0])\n \t{\n-\t  (*the_target->read_memory) (where + 2, (unsigned char *) &insn, 2);\n+\t  the_target->pt->read_memory (where + 2, (unsigned char *) &insn, 2);\n \t  if (insn == thumb2_breakpoint[1])\n \t    return 1;\n \t}\n@@ -208,7 +208,7 @@ arm_breakpoint_at (CORE_ADDR where)\n       /* ARM mode.  */\n       unsigned long insn;\n \n-      (*the_target->read_memory) (where, (unsigned char *) &insn, 4);\n+      the_target->pt->read_memory (where, (unsigned char *) &insn, 4);\n       if (insn == arm_abi_breakpoint)\n \treturn 1;\n "
    },
    {
      "sha": "97117f05780a378cbbf88e33e9e06d4f063adc08",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -192,8 +192,8 @@ aarch64_breakpoint_at (CORE_ADDR where)\n     {\n       gdb_byte insn[aarch64_breakpoint_len];\n \n-      (*the_target->read_memory) (where, (unsigned char *) &insn,\n-\t\t\t\t  aarch64_breakpoint_len);\n+      the_target->pt->read_memory (where, (unsigned char *) &insn,\n+\t\t\t\t   aarch64_breakpoint_len);\n       if (memcmp (insn, aarch64_breakpoint, aarch64_breakpoint_len) == 0)\n \treturn 1;\n "
    },
    {
      "sha": "e7cc119685740017b2e4ee8d76b77ad7f1b20e80",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -779,15 +779,15 @@ arm_sigreturn_next_pc (struct regcache *regcache, int svc_number,\n   gdb_assert (svc_number == __NR_sigreturn || svc_number == __NR_rt_sigreturn);\n \n   collect_register_by_name (regcache, \"sp\", &sp);\n-  (*the_target->read_memory) (sp, (unsigned char *) &sp_data, 4);\n+  the_target->pt->read_memory (sp, (unsigned char *) &sp_data, 4);\n \n   pc_offset = arm_linux_sigreturn_next_pc_offset\n     (sp, sp_data, svc_number, __NR_sigreturn == svc_number ? 1 : 0);\n \n-  (*the_target->read_memory) (sp + pc_offset, (unsigned char *) &next_pc, 4);\n+  the_target->pt->read_memory (sp + pc_offset, (unsigned char *) &next_pc, 4);\n \n   /* Set IS_THUMB according the CPSR saved on the stack.  */\n-  (*the_target->read_memory) (sp + pc_offset + 4, (unsigned char *) &cpsr, 4);\n+  the_target->pt->read_memory (sp + pc_offset + 4, (unsigned char *) &cpsr, 4);\n   *is_thumb = ((cpsr & CPSR_T) != 0);\n \n   return next_pc;\n@@ -939,7 +939,7 @@ arm_get_syscall_trapinfo (struct regcache *regcache, int *sysno)\n \n       collect_register_by_name (regcache, \"pc\", &pc);\n \n-      if ((*the_target->read_memory) (pc - 4, (unsigned char *) &insn, 4))\n+      if (the_target->pt->read_memory (pc - 4, (unsigned char *) &insn, 4))\n \t*sysno = UNKNOWN_SYSCALL;\n       else\n \t{"
    },
    {
      "sha": "6a4e8b1946a01cf46842addb4b8b1d68c9051572",
      "filename": "gdbserver/linux-cris-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-cris-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-cris-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-cris-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -76,8 +76,8 @@ cris_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  (*the_target->read_memory) (where, (unsigned char *) &insn,\n-\t\t\t      cris_breakpoint_len);\n+  the_target->pt->read_memory (where, (unsigned char *) &insn,\n+\t\t\t       cris_breakpoint_len);\n   if (insn == cris_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "fe12624c3b657307a878884fb7acfc27a7ac3498",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -72,8 +72,8 @@ cris_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  (*the_target->read_memory) (where, (unsigned char *) &insn,\n-\t\t\t      cris_breakpoint_len);\n+  the_target->pt->read_memory (where, (unsigned char *) &insn,\n+\t\t\t       cris_breakpoint_len);\n   if (insn == cris_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "1a790e5eae913ef417fa5559daa67e9b9548379d",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -5709,11 +5709,20 @@ linux_process_target::store_registers (regcache *regcache, int regno)\n }\n \n \n-/* Copy LEN bytes from inferior's memory starting at MEMADDR\n-   to debugger memory starting at MYADDR.  */\n+/* A wrapper for the read_memory target op.  */\n \n static int\n linux_read_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n+{\n+  return the_target->pt->read_memory (memaddr, myaddr, len);\n+}\n+\n+/* Copy LEN bytes from inferior's memory starting at MEMADDR\n+   to debugger memory starting at MYADDR.  */\n+\n+int\n+linux_process_target::read_memory (CORE_ADDR memaddr,\n+\t\t\t\t   unsigned char *myaddr, int len)\n {\n   int pid = lwpid_of (current_thread);\n   PTRACE_XFER_TYPE *buffer;\n@@ -5801,8 +5810,9 @@ linux_read_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n    memory at MEMADDR.  On failure (cannot write to the inferior)\n    returns the value of errno.  Always succeeds if LEN is zero.  */\n \n-static int\n-linux_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr, int len)\n+int\n+linux_process_target::write_memory (CORE_ADDR memaddr,\n+\t\t\t\t    const unsigned char *myaddr, int len)\n {\n   int i;\n   /* Round starting address down to longword boundary.  */\n@@ -7359,8 +7369,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_read_memory,\n-  linux_write_memory,\n   linux_look_up_symbols,\n   linux_request_interrupt,\n   linux_read_auxv,"
    },
    {
      "sha": "b8b10143dec5721344f3216b435be9bd85bf39b2",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -299,6 +299,12 @@ class linux_process_target : public process_target\n   int prepare_to_access_memory () override;\n \n   void done_accessing_memory () override;\n+\n+  int read_memory (CORE_ADDR memaddr, unsigned char *myaddr,\n+\t\t   int len) override;\n+\n+  int write_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n+\t\t    int len) override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "8fe8389618fa75806c4e2e01b6ea2e3198b10293",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -70,8 +70,8 @@ m32r_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  (*the_target->read_memory) (where, (unsigned char *) &insn,\n-\t\t\t      m32r_breakpoint_len);\n+  the_target->pt->read_memory (where, (unsigned char *) &insn,\n+\t\t\t       m32r_breakpoint_len);\n   if (insn == m32r_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "cb7eb53e3ebf81d258f01f2912f2d20d189d2f6e",
      "filename": "gdbserver/linux-mips-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-mips-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-mips-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-mips-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -302,7 +302,7 @@ mips_breakpoint_at (CORE_ADDR where)\n {\n   unsigned int insn;\n \n-  (*the_target->read_memory) (where, (unsigned char *) &insn, 4);\n+  the_target->pt->read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == mips_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "6e5d3084dad4172be9ef17508c6d47a898b85727",
      "filename": "gdbserver/linux-nios2-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-nios2-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-nios2-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-nios2-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -131,12 +131,12 @@ nios2_breakpoint_at (CORE_ADDR where)\n \n   /* For R2, first check for the 2-byte CDX trap.n breakpoint encoding.  */\n #if defined(__nios2_arch__) && __nios2_arch__ == 2\n-  (*the_target->read_memory) (where, (unsigned char *) &insn, 2);\n+  the_target->pt->read_memory (where, (unsigned char *) &insn, 2);\n   if (insn == CDX_BREAKPOINT)\n     return 1;\n #endif\n \n-  (*the_target->read_memory) (where, (unsigned char *) &insn, 4);\n+  the_target->pt->read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == nios2_breakpoint)\n     return 1;\n   return 0;"
    },
    {
      "sha": "93b3511a2e116c58ca580bef29c8cf3a8b08eed1",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -277,7 +277,7 @@ ppc_breakpoint_at (CORE_ADDR where)\n {\n   unsigned int insn;\n \n-  (*the_target->read_memory) (where, (unsigned char *) &insn, 4);\n+  the_target->pt->read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == ppc_breakpoint)\n     return 1;\n   /* If necessary, recognize more trap instructions here.  GDB only uses"
    },
    {
      "sha": "06ce8118ebff01eb34597c80a5d6ed370039207c",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -76,7 +76,7 @@ sh_breakpoint_at (CORE_ADDR where)\n {\n   unsigned short insn;\n \n-  (*the_target->read_memory) (where, (unsigned char *) &insn, 2);\n+  the_target->pt->read_memory (where, (unsigned char *) &insn, 2);\n   if (insn == sh_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "b0b6c96b3de5352a46d756306d97c9dffe154aab",
      "filename": "gdbserver/linux-sparc-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-sparc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-sparc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sparc-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -133,7 +133,7 @@ sparc_fill_gregset_to_stack (struct regcache *regcache, const void *buf)\n   for (i = l0_regno; i <= i7_regno; i++)\n     {\n       collect_register (regcache, i, tmp_reg_buf);\n-      (*the_target->write_memory) (addr, tmp_reg_buf, sizeof (tmp_reg_buf));\n+      the_target->pt->write_memory (addr, tmp_reg_buf, sizeof (tmp_reg_buf));\n       addr += sizeof (tmp_reg_buf);\n     }\n }\n@@ -184,7 +184,7 @@ sparc_store_gregset_from_stack (struct regcache *regcache, const void *buf)\n \n   for (i = l0_regno; i <= i7_regno; i++)\n     {\n-      (*the_target->read_memory) (addr, tmp_reg_buf, sizeof (tmp_reg_buf));\n+      the_target->pt->read_memory (addr, tmp_reg_buf, sizeof (tmp_reg_buf));\n       supply_register (regcache, i, tmp_reg_buf);\n       addr += sizeof (tmp_reg_buf);\n     }\n@@ -242,7 +242,7 @@ sparc_breakpoint_at (CORE_ADDR where)\n {\n   unsigned char insn[INSN_SIZE];\n \n-  (*the_target->read_memory) (where, (unsigned char *) insn, sizeof (insn));\n+  the_target->pt->read_memory (where, (unsigned char *) insn, sizeof (insn));\n \n   if (memcmp (sparc_breakpoint, insn, sizeof (insn)) == 0)\n     return 1;"
    },
    {
      "sha": "b57f8c57710796d76c08075f08cfa788fe412963",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -241,7 +241,7 @@ tic6x_breakpoint_at (CORE_ADDR where)\n {\n   unsigned int insn;\n \n-  (*the_target->read_memory) (where, (unsigned char *) &insn, 4);\n+  the_target->pt->read_memory (where, (unsigned char *) &insn, 4);\n   if (insn == tic6x_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "baee93a5c24cfe64fe5e579bbddd3d5d9b4d5df6",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -85,7 +85,7 @@ tile_breakpoint_at (CORE_ADDR where)\n {\n   uint64_t insn;\n \n-  (*the_target->read_memory) (where, (unsigned char *) &insn, 8);\n+  the_target->pt->read_memory (where, (unsigned char *) &insn, 8);\n   if (insn == tile_breakpoint)\n     return 1;\n "
    },
    {
      "sha": "cb2d3f5958077cd14978d1914594483dc4b72156",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -515,7 +515,7 @@ x86_breakpoint_at (CORE_ADDR pc)\n {\n   unsigned char c;\n \n-  (*the_target->read_memory) (pc, &c, 1);\n+  the_target->pt->read_memory (pc, &c, 1);\n   if (c == 0xCC)\n     return 1;\n "
    },
    {
      "sha": "31e7bad36b814cf6a7b4afacca0d35fc14aaba57",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -207,8 +207,8 @@ xtensa_breakpoint_at (CORE_ADDR where)\n {\n     unsigned long insn;\n \n-    (*the_target->read_memory) (where, (unsigned char *) &insn,\n-\t\t\t\txtensa_breakpoint_len);\n+    the_target->pt->read_memory (where, (unsigned char *) &insn,\n+\t\t\t\t xtensa_breakpoint_len);\n     return memcmp((char *) &insn,\n \t\t  xtensa_breakpoint, xtensa_breakpoint_len) == 0;\n }"
    },
    {
      "sha": "eb5147d907b0f3350719f3f4cd9d982c95019ad9",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -638,8 +638,9 @@ lynx_process_target::store_registers (regcache *regcache, int regno)\n \n /* Implement the read_memory target_ops method.  */\n \n-static int\n-lynx_read_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n+int\n+lynx_process_target::read_memory (CORE_ADDR memaddr, unsigned char *myaddr,\n+\t\t\t\t  int len)\n {\n   /* On LynxOS, memory reads needs to be performed in chunks the size\n      of int types, and they should also be aligned accordingly.  */\n@@ -671,8 +672,9 @@ lynx_read_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n \n /* Implement the write_memory target_ops method.  */\n \n-static int\n-lynx_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr, int len)\n+int\n+lynx_process_target::write_memory (CORE_ADDR memaddr,\n+\t\t\t\t   const unsigned char *myaddr, int len)\n {\n   /* On LynxOS, memory writes needs to be performed in chunks the size\n      of int types, and they should also be aligned accordingly.  */\n@@ -694,7 +696,7 @@ lynx_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr, int len)\n \t{\n \t  /* We need to read the memory at this address in order to preserve\n \t     the data that we are not overwriting.  */\n-\t  lynx_read_memory (addr, (unsigned char *) &buf, xfer_size);\n+\t  read_memory (addr, (unsigned char *) &buf, xfer_size);\n \t  if (errno)\n \t    return errno;\n \t}\n@@ -727,8 +729,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  lynx_read_memory,\n-  lynx_write_memory,\n   NULL,  /* look_up_symbols */\n   lynx_request_interrupt,\n   NULL,  /* read_auxv */"
    },
    {
      "sha": "9036eb3eff0deae9f72aa7726d3d7ad7d6fa10a3",
      "filename": "gdbserver/lynx-low.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/lynx-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/lynx-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.h?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -81,6 +81,12 @@ class lynx_process_target : public process_target\n   void fetch_registers (regcache *regcache, int regno) override;\n \n   void store_registers (regcache *regcache, int regno) override;\n+\n+  int read_memory (CORE_ADDR memaddr, unsigned char *myaddr,\n+\t\t   int len) override;\n+\n+  int write_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n+\t\t    int len) override;\n };\n \n /* The inferior's target description.  This is a global because the"
    },
    {
      "sha": "43a07c390d1b7a142753058975b023853e22d12f",
      "filename": "gdbserver/mem-break.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/mem-break.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/mem-break.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/mem-break.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -380,8 +380,8 @@ insert_memory_breakpoint (struct raw_breakpoint *bp)\n     {\n       memcpy (bp->old_data, buf, bp_size (bp));\n \n-      err = (*the_target->write_memory) (bp->pc, bp_opcode (bp),\n-\t\t\t\t\t bp_size (bp));\n+      err = the_target->pt->write_memory (bp->pc, bp_opcode (bp),\n+\t\t\t\t\t  bp_size (bp));\n       if (err != 0)\n \t{\n \t  if (debug_threads)\n@@ -1857,7 +1857,7 @@ validate_inserted_breakpoint (struct raw_breakpoint *bp)\n   gdb_assert (bp->raw_type == raw_bkpt_type_sw);\n \n   buf = (unsigned char *) alloca (bp_size (bp));\n-  err = (*the_target->read_memory) (bp->pc, buf, bp_size (bp));\n+  err = the_target->pt->read_memory (bp->pc, buf, bp_size (bp));\n   if (err || memcmp (buf, bp_opcode (bp), bp_size (bp)) != 0)\n     {\n       /* Tag it as gone.  */"
    },
    {
      "sha": "d56f247acb4155cebc12e2878cb432734ab324de",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -706,8 +706,9 @@ nto_process_target::store_registers (regcache *regcache, int regno)\n \n    Return 0 on success -1 otherwise.  */\n \n-static int\n-nto_read_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n+int\n+nto_process_target::read_memory (CORE_ADDR memaddr, unsigned char *myaddr,\n+\t\t\t\t int len)\n {\n   TRACE (\"%s memaddr:0x%08lx, len:%d\\n\", __func__, memaddr, len);\n \n@@ -725,8 +726,9 @@ nto_read_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n \n    Return 0 on success -1 otherwise.  */\n \n-static int\n-nto_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr, int len)\n+int\n+nto_process_target::write_memory (CORE_ADDR memaddr,\n+\t\t\t\t  const unsigned char *myaddr, int len)\n {\n   int len_written;\n \n@@ -941,8 +943,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  nto_read_memory,\n-  nto_write_memory,\n   NULL, /* nto_look_up_symbols */\n   nto_request_interrupt,\n   nto_read_auxv,"
    },
    {
      "sha": "0f4bb434483fa5b74840c879ce3a005a9e01bd02",
      "filename": "gdbserver/nto-low.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/nto-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/nto-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.h?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -71,6 +71,12 @@ class nto_process_target : public process_target\n   void fetch_registers (regcache *regcache, int regno) override;\n \n   void store_registers (regcache *regcache, int regno) override;\n+\n+  int read_memory (CORE_ADDR memaddr, unsigned char *myaddr,\n+\t\t   int len) override;\n+\n+  int write_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n+\t\t    int len) override;\n };\n \n /* The inferior's target description.  This is a global because the"
    },
    {
      "sha": "49302f61dfb3657fd122f38004c945a2f48387f8",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -120,7 +120,7 @@ int\n read_inferior_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n {\n   int res;\n-  res = (*the_target->read_memory) (memaddr, myaddr, len);\n+  res = the_target->pt->read_memory (memaddr, myaddr, len);\n   check_mem_read (memaddr, myaddr, len);\n   return res;\n }\n@@ -151,7 +151,7 @@ target_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n      update it.  */\n   gdb::byte_vector buffer (myaddr, myaddr + len);\n   check_mem_write (memaddr, buffer.data (), myaddr, len);\n-  return (*the_target->write_memory) (memaddr, buffer.data (), len);\n+  return the_target->pt->write_memory (memaddr, buffer.data (), len);\n }\n \n ptid_t"
    },
    {
      "sha": "ead4a613e906934799113486c4802597c1bffcdf",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 18,
      "deletions": 19,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -70,25 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Read memory from the inferior process.  This should generally be\n-     called through read_inferior_memory, which handles breakpoint shadowing.\n-\n-     Read LEN bytes at MEMADDR into a buffer at MYADDR.\n-  \n-     Returns 0 on success and errno on failure.  */\n-\n-  int (*read_memory) (CORE_ADDR memaddr, unsigned char *myaddr, int len);\n-\n-  /* Write memory to the inferior process.  This should generally be\n-     called through target_write_memory, which handles breakpoint shadowing.\n-\n-     Write LEN bytes from the buffer at MYADDR to MEMADDR.\n-\n-     Returns 0 on success and errno on failure.  */\n-\n-  int (*write_memory) (CORE_ADDR memaddr, const unsigned char *myaddr,\n-\t\t       int len);\n-\n   /* Query GDB for the values of any symbols we're interested in.\n      This function is called whenever we receive a \"qSymbols::\"\n      query, which corresponds to every time more symbols (might)\n@@ -478,6 +459,24 @@ class process_target\n \n   /* Undo the effects of prepare_to_access_memory.  */\n   virtual void done_accessing_memory ();\n+\n+  /* Read memory from the inferior process.  This should generally be\n+     called through read_inferior_memory, which handles breakpoint shadowing.\n+\n+     Read LEN bytes at MEMADDR into a buffer at MYADDR.\n+\n+     Returns 0 on success and errno on failure.  */\n+  virtual int read_memory (CORE_ADDR memaddr, unsigned char *myaddr,\n+\t\t\t   int len) = 0;\n+\n+  /* Write memory to the inferior process.  This should generally be\n+     called through target_write_memory, which handles breakpoint shadowing.\n+\n+     Write LEN bytes from the buffer at MYADDR to MEMADDR.\n+\n+     Returns 0 on success and errno on failure.  */\n+  virtual int write_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n+\t\t\t    int len) = 0;\n };\n \n extern process_stratum_target *the_target;"
    },
    {
      "sha": "ef0d6035e93a090ea59346286b0c2080129587d7",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -1676,8 +1676,9 @@ win32_process_target::store_registers (regcache *regcache, int regno)\n /* Read memory from the inferior process.  This should generally be\n    called through read_inferior_memory, which handles breakpoint shadowing.\n    Read LEN bytes at MEMADDR into a buffer at MYADDR.  */\n-static int\n-win32_read_inferior_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n+int\n+win32_process_target::read_memory (CORE_ADDR memaddr, unsigned char *myaddr,\n+\t\t\t\t   int len)\n {\n   return child_xfer_memory (memaddr, (char *) myaddr, len, 0, 0) != len;\n }\n@@ -1686,9 +1687,9 @@ win32_read_inferior_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n    called through write_inferior_memory, which handles breakpoint shadowing.\n    Write LEN bytes from the buffer at MYADDR to MEMADDR.\n    Returns 0 on success and errno on failure.  */\n-static int\n-win32_write_inferior_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n-\t\t\t     int len)\n+int\n+win32_process_target::write_memory (CORE_ADDR memaddr,\n+\t\t\t\t    const unsigned char *myaddr, int len)\n {\n   return child_xfer_memory (memaddr, (char *) myaddr, len, 1, 0) != len;\n }\n@@ -1837,8 +1838,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  win32_read_inferior_memory,\n-  win32_write_inferior_memory,\n   NULL, /* lookup_symbols */\n   win32_request_interrupt,\n   NULL, /* read_auxv */"
    },
    {
      "sha": "0ecb2f8ebb5a54fd190ced673863788da297d47a",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2558df32b83c2e3b41829d46c0b3d09732d7176/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=e2558df32b83c2e3b41829d46c0b3d09732d7176",
      "patch": "@@ -130,6 +130,12 @@ class win32_process_target : public process_target\n   void fetch_registers (regcache *regcache, int regno) override;\n \n   void store_registers (regcache *regcache, int regno) override;\n+\n+  int read_memory (CORE_ADDR memaddr, unsigned char *myaddr,\n+\t\t   int len) override;\n+\n+  int write_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n+\t\t    int len) override;\n };\n \n /* Retrieve the context for this thread, if not already retrieved.  */"
    }
  ]
}