{
  "sha": "783c187b8ce8a2b414ca0145e27ae9747d857e98",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzgzYzE4N2I4Y2U4YTJiNDE0Y2EwMTQ1ZTI3YWU5NzQ3ZDg1N2U5OA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-30T12:05:10Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-30T12:05:10Z"
    },
    "message": "x86: make swap_2_operands() have unsigned parameters\n\nAll callers pass unsigned values (in some cases by virtue of passing\nnon-negative literal numbers).\n\nThis in turn requires struct {Mask,RC,Broadcast}_Operation's \"operand\"\nfields to become unsigned, in turn allowing to reduce the amount of\ncasting needed (the two new casts that are necessary cast _to_\n\"unsigned\" instead of _from_, as that's the form that'll never case\nundefined behavior).",
    "tree": {
      "sha": "97f6182c301e9ba4e75c527c60c1ef0d6b5731df",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/97f6182c301e9ba4e75c527c60c1ef0d6b5731df"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/783c187b8ce8a2b414ca0145e27ae9747d857e98",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/783c187b8ce8a2b414ca0145e27ae9747d857e98",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/783c187b8ce8a2b414ca0145e27ae9747d857e98",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/783c187b8ce8a2b414ca0145e27ae9747d857e98/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d1cbe0076a4b6442793121413a0d3b52ae19727e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d1cbe0076a4b6442793121413a0d3b52ae19727e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d1cbe0076a4b6442793121413a0d3b52ae19727e"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 25,
    "deletions": 12
  },
  "files": [
    {
      "sha": "49cbc6b433d4bb267b16c073af0f3c64736a38d9",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/783c187b8ce8a2b414ca0145e27ae9747d857e98/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/783c187b8ce8a2b414ca0145e27ae9747d857e98/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=783c187b8ce8a2b414ca0145e27ae9747d857e98",
      "patch": "@@ -1,3 +1,16 @@\n+2021-03-30  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (swap_2_operands): Switch parameters to\n+\tunsigned.\n+\t(struct RC_Operation): Switch operand field to unsigned.\n+\t(struct Mask_Operation): Likewise.\n+\t(struct Broadcast_Operation): Likewise.\n+\t(build_evex_prefix): Drop cast.\n+\t(check_VecOperands): Likewise.\n+\t(build_modrm_byte): Likewise.\n+\t(output_imm): Likewise.\n+\t(check_VecOperations): Add casts to unsigned.\n+\n 2021-03-29  Jan Beulich  <jbeulich@suse.com>\n \n \t* testsuite/gas/i386/x86-64-sse2avx.s: Add vpsadbw case."
    },
    {
      "sha": "03bd7b6d3142baf3b0cee307d09845d14aad7717",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/783c187b8ce8a2b414ca0145e27ae9747d857e98/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/783c187b8ce8a2b414ca0145e27ae9747d857e98/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=783c187b8ce8a2b414ca0145e27ae9747d857e98",
      "patch": "@@ -177,7 +177,7 @@ static const reg_entry *parse_register (char *, char **);\n static char *parse_insn (char *, char *);\n static char *parse_operands (char *, const char *);\n static void swap_operands (void);\n-static void swap_2_operands (int, int);\n+static void swap_2_operands (unsigned int, unsigned int);\n static enum flag_code i386_addressing_mode (void);\n static void optimize_imm (void);\n static void optimize_disp (void);\n@@ -225,7 +225,7 @@ struct RC_Operation\n       rz,\n       saeonly\n     } type;\n-  int operand;\n+  unsigned int operand;\n };\n \n static struct RC_Operation rc_op;\n@@ -238,7 +238,7 @@ struct Mask_Operation\n   const reg_entry *mask;\n   unsigned int zeroing;\n   /* The operand where this operation is associated.  */\n-  int operand;\n+  unsigned int operand;\n };\n \n static struct Mask_Operation mask_op;\n@@ -251,7 +251,7 @@ struct Broadcast_Operation\n   int type;\n \n   /* Index of broadcasted operand.  */\n-  int operand;\n+  unsigned int operand;\n \n   /* Number of bytes to broadcast.  */\n   int bytes;\n@@ -3907,7 +3907,7 @@ build_evex_prefix (void)\n \t\t    i.tm.opcode_modifier.evex = EVEX128;\n \t\t    break;\n \t\t  }\n-\t\telse if (i.broadcast && (int) op == i.broadcast->operand)\n+\t\telse if (i.broadcast && op == i.broadcast->operand)\n \t\t  {\n \t\t    switch (i.broadcast->bytes)\n \t\t      {\n@@ -5438,7 +5438,7 @@ parse_operands (char *l, const char *mnemonic)\n }\n \n static void\n-swap_2_operands (int xchg1, int xchg2)\n+swap_2_operands (unsigned int xchg1, unsigned int xchg2)\n {\n   union i386_op temp_op;\n   i386_operand_type temp_type;\n@@ -6018,7 +6018,7 @@ check_VecOperands (const insn_template *t)\n     }\n \n   /* Check if masking is applied to dest operand.  */\n-  if (i.mask && (i.mask->operand != (int) (i.operands - 1)))\n+  if (i.mask && (i.mask->operand != i.operands - 1))\n     {\n       i.error = mask_not_on_destination;\n       return 1;\n@@ -6037,7 +6037,7 @@ check_VecOperands (const insn_template *t)\n \t them is rounding, the rounding operand should be the last\n \t immediate operand.  */\n       if (i.imm_operands > 1\n-\t  && i.rounding->operand != (int) (i.imm_operands - 1))\n+\t  && i.rounding->operand != i.imm_operands - 1)\n \t{\n \t  i.error = rc_sae_operand_not_last_imm;\n \t  return 1;\n@@ -7965,7 +7965,7 @@ build_modrm_byte (void)\n \t  /* RC/SAE operand could be between DEST and SRC.  That happens\n \t     when one operand is GPR and the other one is XMM/YMM/ZMM\n \t     register.  */\n-\t  if (i.rounding && i.rounding->operand == (int) dest)\n+\t  if (i.rounding && i.rounding->operand == dest)\n \t    dest++;\n \n \t  if (i.tm.opcode_modifier.vexvvvv == VEXXDS)\n@@ -9865,7 +9865,7 @@ output_imm (fragS *insn_start_frag, offsetT insn_start_off)\n   for (n = 0; n < i.operands; n++)\n     {\n       /* Skip SAE/RC Imm operand in EVEX.  They are already handled.  */\n-      if (i.rounding && (int) n == i.rounding->operand)\n+      if (i.rounding && n == i.rounding->operand)\n \tcontinue;\n \n       if (operand_type_check (i.types[n], imm))\n@@ -10447,7 +10447,7 @@ check_VecOperations (char *op_string, char *op_end)\n \n \t\t  /* Only \"{z}\" is allowed here.  No need to check\n \t\t     zeroing mask explicitly.  */\n-\t\t  if (i.mask->operand != this_operand)\n+\t\t  if (i.mask->operand != (unsigned int) this_operand)\n \t\t    {\n \t\t      as_bad (_(\"invalid write mask `%s'\"), saved);\n \t\t      return NULL;\n@@ -10479,7 +10479,7 @@ check_VecOperations (char *op_string, char *op_end)\n \n \t\t  /* Only \"{%k}\" is allowed here.  No need to check mask\n \t\t     register explicitly.  */\n-\t\t  if (i.mask->operand != this_operand)\n+\t\t  if (i.mask->operand != (unsigned int) this_operand)\n \t\t    {\n \t\t      as_bad (_(\"invalid zeroing-masking `%s'\"),\n \t\t\t      saved);"
    }
  ]
}