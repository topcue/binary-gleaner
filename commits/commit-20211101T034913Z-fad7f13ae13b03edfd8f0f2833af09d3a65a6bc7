{
  "sha": "fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
  "node_id": "C_kwDOANOeidoAKGZhZDdmMTNhZTEzYjAzZWRmZDhmMGYyODMzYWYwOWQzYTY1YTZiYzc",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-01T03:32:26Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-01T03:49:13Z"
    },
    "message": "sim: ppc: clean up printf format handling\n\nDon't blindly cast every possible type to (long).  Change to the right\nprintf format specifier whether it be a 64-bit type or a pointer.",
    "tree": {
      "sha": "52e8ac1196a7dc98dbdcff164bd20c33d16a75f5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/52e8ac1196a7dc98dbdcff164bd20c33d16a75f5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7b83db6a74c6cb68b3804890ab9037460e21fedf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b83db6a74c6cb68b3804890ab9037460e21fedf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7b83db6a74c6cb68b3804890ab9037460e21fedf"
    }
  ],
  "stats": {
    "total": 233,
    "additions": 116,
    "deletions": 117
  },
  "files": [
    {
      "sha": "47fa7518f7e8763054379e753362a977032850e3",
      "filename": "sim/ppc/device.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/device.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/device.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/device.c?ref=fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
      "patch": "@@ -1034,8 +1034,8 @@ device_find_ihandle_runtime_property(device *me,\n {\n   device_property_entry *entry = find_property_entry(me, property);\n   TRACE(trace_devices,\n-\t(\"device_find_ihandle_runtime_property(me=0x%lx, property=%s)\\n\",\n-\t (long)me, property));\n+\t(\"device_find_ihandle_runtime_property(me=%p, property=%s)\\n\",\n+\t me, property));\n   if (entry == NULL\n       || entry->value->type != ihandle_property\n       || entry->value->disposition != permenant_object)\n@@ -1104,8 +1104,8 @@ device_find_integer_property(device *me,\n   const device_property *node;\n   signed_cell integer;\n   TRACE(trace_devices,\n-\t(\"device_find_integer(me=0x%lx, property=%s)\\n\",\n-\t (long)me, property));\n+\t(\"device_find_integer(me=%p, property=%s)\\n\",\n+\t me, property));\n   node = device_find_property(me, property);\n   if (node == (device_property*)0\n       || node->type != integer_property)\n@@ -1126,8 +1126,8 @@ device_find_integer_array_property(device *me,\n   int sizeof_integer = sizeof(*integer);\n   signed_cell *cell;\n   TRACE(trace_devices,\n-\t(\"device_find_integer(me=0x%lx, property=%s)\\n\",\n-\t (long)me, property));\n+\t(\"device_find_integer(me=%p, property=%s)\\n\",\n+\t me, property));\n \n   /* check things sane */\n   node = device_find_property(me, property);\n@@ -1495,8 +1495,8 @@ device_add_duplicate_property(device *me,\n {\n   device_property_entry *master;\n   TRACE(trace_devices,\n-\t(\"device_add_duplicate_property(me=0x%lx, property=%s, ...)\\n\",\n-\t (long)me, property));\n+\t(\"device_add_duplicate_property(me=%p, property=%s, ...)\\n\",\n+\t me, property));\n   if (original->disposition != permenant_object)\n     device_error(me, \"Can only duplicate permenant objects\");\n   /* find the original's master */"
    },
    {
      "sha": "2c9316cf280be1113aed4794b5be7a1f75aa0c1a",
      "filename": "sim/ppc/emul_chirp.c",
      "status": "modified",
      "additions": 42,
      "deletions": 42,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/emul_chirp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/emul_chirp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/emul_chirp.c?ref=fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
      "patch": "@@ -260,9 +260,9 @@ chirp_emul_peer(os_emul_data *data,\n   if (chirp_read_t2h_args(&args, sizeof(args), 1, 1, data, processor, cia))\n     return -1;\n   phandle = external_to_device(data->root, args.phandle);\n-  TRACE(trace_os_emul, (\"peer - in - phandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"peer - in - phandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)args.phandle,\n-\t\t\t(unsigned long)phandle,\n+\t\t\tphandle,\n \t\t\t(phandle == NULL ? \"\" : device_name(phandle))));\n   /* find the peer */\n   if (args.phandle == 0) {\n@@ -281,9 +281,9 @@ chirp_emul_peer(os_emul_data *data,\n       args.sibling_phandle = device_to_external(sibling_phandle);\n   }\n   /* write the arguments back out */\n-  TRACE(trace_os_emul, (\"peer - out - sibling_phandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"peer - out - sibling_phandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)args.sibling_phandle,\n-\t\t\t(unsigned long)sibling_phandle,\n+\t\t\tsibling_phandle,\n \t\t\t(sibling_phandle == NULL ? \"\" : device_name(sibling_phandle))));\n   chirp_write_h2t_args(&args,\n \t\t       sizeof(args),\n@@ -309,9 +309,9 @@ chirp_emul_child(os_emul_data *data,\n   if (chirp_read_t2h_args(&args, sizeof(args), 1, 1, data, processor, cia))\n     return -1;\n   phandle = external_to_device(data->root, args.phandle);\n-  TRACE(trace_os_emul, (\"child - in - phandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"child - in - phandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)args.phandle,\n-\t\t\t(unsigned long)phandle,\n+\t\t\tphandle,\n \t\t\t(phandle == NULL ? \"\" : device_name(phandle))));\n   /* find a child */\n   if (args.phandle == 0\n@@ -327,9 +327,9 @@ chirp_emul_child(os_emul_data *data,\n       args.child_phandle = device_to_external(child_phandle);\n   }\n   /* write the result out */\n-  TRACE(trace_os_emul, (\"child - out - child_phandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"child - out - child_phandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)args.child_phandle,\n-\t\t\t(unsigned long)child_phandle,\n+\t\t\tchild_phandle,\n \t\t\t(child_phandle == NULL ? \"\" : device_name(child_phandle))));\n   chirp_write_h2t_args(&args,\n \t\t       sizeof(args),\n@@ -355,9 +355,9 @@ chirp_emul_parent(os_emul_data *data,\n   if (chirp_read_t2h_args(&args, sizeof(args), 1, 1, data, processor, cia))\n     return -1;\n   phandle = external_to_device(data->root, args.phandle);\n-  TRACE(trace_os_emul, (\"parent - in - phandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"parent - in - phandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)args.phandle,\n-\t\t\t(unsigned long)phandle,\n+\t\t\tphandle,\n \t\t\t(phandle == NULL ? \"\" : device_name(phandle))));\n   /* find a parent */\n   if (args.phandle == 0\n@@ -373,9 +373,9 @@ chirp_emul_parent(os_emul_data *data,\n       args.parent_phandle = device_to_external(parent_phandle);\n   }\n   /* return the result */\n-  TRACE(trace_os_emul, (\"parent - out - parent_phandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"parent - out - parent_phandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)args.parent_phandle,\n-\t\t\t(unsigned long)parent_phandle,\n+\t\t\tparent_phandle,\n \t\t\t(parent_phandle == NULL ? \"\" : device_name(parent_phandle))));\n   chirp_write_h2t_args(&args,\n \t\t       sizeof(args),\n@@ -401,9 +401,9 @@ chirp_emul_instance_to_package(os_emul_data *data,\n   if (chirp_read_t2h_args(&args, sizeof(args), 1, 1, data, processor, cia))\n     return -1;\n   ihandle = external_to_device_instance(data->root, args.ihandle);\n-  TRACE(trace_os_emul, (\"instance-to-package - in - ihandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"instance-to-package - in - ihandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)args.ihandle,\n-\t\t\t(unsigned long)ihandle,\n+\t\t\tihandle,\n \t\t\tihandle_name(ihandle)));\n   /* find the corresponding phandle */\n   if (ihandle == NULL) {\n@@ -415,9 +415,9 @@ chirp_emul_instance_to_package(os_emul_data *data,\n     args.phandle = device_to_external(phandle);\n   }\n   /* return the result */\n-  TRACE(trace_os_emul, (\"instance-to-package - out - phandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"instance-to-package - out - phandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)args.phandle,\n-\t\t\t(unsigned long)phandle,\n+\t\t\tphandle,\n \t\t\t(phandle == NULL ? \"\" : device_name(phandle))));\n   chirp_write_h2t_args(&args,\n \t\t       sizeof(args),\n@@ -448,9 +448,9 @@ chirp_emul_getproplen(os_emul_data *data,\n \t\t   args.name,\n \t\t   sizeof(name),\n \t\t   processor, cia);\n-  TRACE(trace_os_emul, (\"getproplen - in - phandle=0x%lx(0x%lx`%s') name=`%s'\\n\",\n+  TRACE(trace_os_emul, (\"getproplen - in - phandle=0x%lx(%p`%s') name=`%s'\\n\",\n \t\t\t(unsigned long)args.phandle,\n-\t\t\t(unsigned long)phandle,\n+\t\t\tphandle,\n \t\t\t(phandle == NULL ? \"\" : device_name(phandle)),\n \t\t\tname));\n   /* find our prop and get its length */\n@@ -501,9 +501,9 @@ chirp_emul_getprop(os_emul_data *data,\n \t\t   args.name,\n \t\t   sizeof(name),\n \t\t   processor, cia);\n-  TRACE(trace_os_emul, (\"getprop - in - phandle=0x%lx(0x%lx`%s') name=`%s' buf=0x%lx buflen=%ld\\n\",\n+  TRACE(trace_os_emul, (\"getprop - in - phandle=0x%lx(%p`%s') name=`%s' buf=0x%lx buflen=%ld\\n\",\n \t\t\t(unsigned long)args.phandle,\n-\t\t\t(unsigned long)phandle,\n+\t\t\tphandle,\n \t\t\t(phandle == NULL ? \"\" : device_name(phandle)),\n \t\t\tname,\n \t\t\t(unsigned long)args.buf,\n@@ -532,9 +532,9 @@ chirp_emul_getprop(os_emul_data *data,\n \t\t\t      device_find_string_property(phandle, name)));\n \tbreak;\n       case ihandle_property:\n-\tTRACE(trace_os_emul, (\"getprop - ihandle=0x%lx(0x%lx`%s')\\n\",\n+\tTRACE(trace_os_emul, (\"getprop - ihandle=0x%lx(%p`%s')\\n\",\n \t\t\t      (unsigned long)BE2H_cell(*(unsigned_cell*)prop->array),\n-\t\t\t      (unsigned long)device_find_ihandle_property(phandle, name),\n+\t\t\t      device_find_ihandle_property(phandle, name),\n \t\t\t      ihandle_name(device_find_ihandle_property(phandle, name))));\n \tbreak;\n       default:\n@@ -585,9 +585,9 @@ chirp_emul_nextprop(os_emul_data *data,\n     /* If previous is NULL, make it look like the empty string.  The\n        next property after the empty string is the first property.  */\n     strcpy (previous, \"\");\n-  TRACE(trace_os_emul, (\"nextprop - in - phandle=0x%lx(0x%lx`%s') previous=`%s' buf=0x%lx\\n\",\n+  TRACE(trace_os_emul, (\"nextprop - in - phandle=0x%lx(%p`%s') previous=`%s' buf=0x%lx\\n\",\n \t\t\t(unsigned long)args.phandle,\n-\t\t\t(unsigned long)phandle,\n+\t\t\tphandle,\n \t\t\t(phandle == NULL ? \"\" : device_name(phandle)),\n \t\t\tprevious,\n \t\t\t(unsigned long)args.buf));\n@@ -728,9 +728,9 @@ chirp_emul_finddevice(os_emul_data *data,\n   else\n     args.phandle = device_to_external(phandle);\n   /* return its phandle */\n-  TRACE(trace_os_emul, (\"finddevice - out - phandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"finddevice - out - phandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)args.phandle,\n-\t\t\t(unsigned long)phandle,\n+\t\t\tphandle,\n \t\t\t(phandle == NULL ? \"\" : device_name(phandle))));\n   chirp_write_h2t_args(&args,\n \t\t       sizeof(args),\n@@ -759,9 +759,9 @@ chirp_emul_instance_to_path(os_emul_data *data,\n   if (chirp_read_t2h_args(&args, sizeof(args), 3, 1, data, processor, cia))\n     return -1;\n   ihandle = external_to_device_instance(data->root, args.ihandle);\n-  TRACE(trace_os_emul, (\"instance-to-path - in - ihandle=0x%lx(0x%lx`%s') buf=0x%lx buflen=%ld\\n\",\n+  TRACE(trace_os_emul, (\"instance-to-path - in - ihandle=0x%lx(%p`%s') buf=0x%lx buflen=%ld\\n\",\n \t\t\t(unsigned long)args.ihandle,\n-\t\t\t(unsigned long)ihandle,\n+\t\t\tihandle,\n \t\t\tihandle_name(ihandle),\n \t\t\t(unsigned long)args.buf,\n \t\t\t(unsigned long)args.buflen));\n@@ -809,9 +809,9 @@ chirp_emul_package_to_path(os_emul_data *data,\n   if (chirp_read_t2h_args(&args, sizeof(args), 3, 1, data, processor, cia))\n     return -1;\n   phandle = external_to_device(data->root, args.phandle);\n-  TRACE(trace_os_emul, (\"package-to-path - in - phandle=0x%lx(0x%lx`%s') buf=0x%lx buflen=%ld\\n\",\n+  TRACE(trace_os_emul, (\"package-to-path - in - phandle=0x%lx(%p`%s') buf=0x%lx buflen=%ld\\n\",\n \t\t\t(unsigned long)args.phandle,\n-\t\t\t(unsigned long)phandle,\n+\t\t\tphandle,\n \t\t\t(phandle == NULL ? \"\" : device_name(phandle)),\n \t\t\t(unsigned long)args.buf,\n \t\t\t(unsigned long)args.buflen));\n@@ -872,12 +872,12 @@ chirp_emul_call_method(os_emul_data *data,\n   n_stack_returns = data->n_returns - 1;\n   stack_catch_result = n_stack_args;\n   stack_returns = stack_catch_result + 1;\n-  TRACE(trace_os_emul, (\"call-method - in - n_args=%ld n_returns=%ld method=`%s' ihandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"call-method - in - n_args=%ld n_returns=%ld method=`%s' ihandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)data->n_args,\n \t\t\t(unsigned long)data->n_returns,\n \t\t\tmethod,\n \t\t\t(unsigned long)args.ihandle,\n-\t\t\t(unsigned long)ihandle,\n+\t\t\tihandle,\n \t\t\tihandle_name(ihandle)));\n   /* see if we can emulate this method */\n   if (ihandle == NULL) {\n@@ -935,9 +935,9 @@ chirp_emul_open(os_emul_data *data,\n   else\n     args.ihandle = device_instance_to_external(ihandle);\n   /* return the ihandle result */\n-  TRACE(trace_os_emul, (\"open - out - ihandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"open - out - ihandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)args.ihandle,\n-\t\t\t(unsigned long)ihandle,\n+\t\t\tihandle,\n \t\t\tihandle_name(ihandle)));\n   chirp_write_h2t_args(&args,\n \t\t       sizeof(args),\n@@ -961,9 +961,9 @@ chirp_emul_close(os_emul_data *data,\n   if (chirp_read_t2h_args(&args, sizeof(args), 1, 0, data, processor, cia))\n     return -1;\n   ihandle = external_to_device_instance(data->root, args.ihandle);\n-  TRACE(trace_os_emul, (\"close - in - ihandle=0x%lx(0x%lx`%s')\\n\",\n+  TRACE(trace_os_emul, (\"close - in - ihandle=0x%lx(%p`%s')\\n\",\n \t\t\t(unsigned long)args.ihandle,\n-\t\t\t(unsigned long)ihandle,\n+\t\t\tihandle,\n \t\t\tihandle_name(ihandle)));\n   /* close the device */\n   if (ihandle == NULL) {\n@@ -1001,9 +1001,9 @@ chirp_emul_read(os_emul_data *data,\n   if (chirp_read_t2h_args(&args, sizeof(args), 3, 1, data, processor, cia))\n     return -1;\n   ihandle = external_to_device_instance(data->root, args.ihandle);\n-  TRACE(trace_os_emul, (\"read - in - ihandle=0x%lx(0x%lx`%s') addr=0x%lx len=%ld\\n\",\n+  TRACE(trace_os_emul, (\"read - in - ihandle=0x%lx(%p`%s') addr=0x%lx len=%ld\\n\",\n \t\t\t(unsigned long)args.ihandle,\n-\t\t\t(unsigned long)ihandle,\n+\t\t\tihandle,\n \t\t\tihandle_name(ihandle),\n \t\t\t(unsigned long)args.addr,\n \t\t\t(unsigned long)args.len));\n@@ -1093,9 +1093,9 @@ chirp_emul_write(os_emul_data *data,\n \t\t   processor, cia);\n   buf[actual] = '\\0';\n   ihandle = external_to_device_instance(data->root, args.ihandle);\n-  TRACE(trace_os_emul, (\"write - in - ihandle=0x%lx(0x%lx`%s') `%s' (%ld)\\n\",\n+  TRACE(trace_os_emul, (\"write - in - ihandle=0x%lx(%p`%s') `%s' (%ld)\\n\",\n \t\t\t(unsigned long)args.ihandle,\n-\t\t\t(unsigned long)ihandle,\n+\t\t\tihandle,\n \t\t\tihandle_name(ihandle),\n \t\t\tbuf, (long)actual));\n   if (ihandle == NULL) {\n@@ -1139,9 +1139,9 @@ chirp_emul_seek(os_emul_data *data,\n   if (chirp_read_t2h_args(&args, sizeof(args), 3, 1, data, processor, cia))\n     return -1;\n   ihandle = external_to_device_instance(data->root, args.ihandle);\n-  TRACE(trace_os_emul, (\"seek - in - ihandle=0x%lx(0x%lx`%s') pos.hi=0x%lx pos.lo=0x%lx\\n\",\n+  TRACE(trace_os_emul, (\"seek - in - ihandle=0x%lx(%p`%s') pos.hi=0x%lx pos.lo=0x%lx\\n\",\n \t\t\t(unsigned long)args.ihandle,\n-\t\t\t(unsigned long)ihandle,\n+\t\t\tihandle,\n \t\t\tihandle_name(ihandle),\n \t\t\t(unsigned long)args.pos_hi,\n \t\t\t(unsigned long)args.pos_lo));"
    },
    {
      "sha": "e40e1b4d56c5f38038e28a58421d6a9107d67714",
      "filename": "sim/ppc/events.c",
      "status": "modified",
      "additions": 34,
      "deletions": 34,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/events.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/events.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/events.c?ref=fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
      "patch": "@@ -169,14 +169,14 @@ update_time_from_event(event_queue *events)\n \t   event != NULL;\n \t   event = event->next, i++)\n \t{\n-\t  TRACE(trace_events, (\"event time-from-event - time %ld, delta %ld - event %d, tag 0x%lx, time %ld, handler 0x%lx, data 0x%lx\\n\",\n-\t\t\t       (long)current_time,\n-\t\t\t       (long)events->time_from_event,\n+\t  TRACE(trace_events, (\"event time-from-event - time %\" PRIi64 \", delta %ld - event %d, tag %p, time %\" PRIi64 \", handler %p, data %p\\n\",\n+\t\t\t       current_time,\n+\t\t\t       events->time_from_event,\n \t\t\t       i,\n-\t\t\t       (long)event,\n-\t\t\t       (long)event->time_of_event,\n-\t\t\t       (long)event->handler,\n-\t\t\t       (long)event->data));\n+\t\t\t       event,\n+\t\t\t       event->time_of_event,\n+\t\t\t       event->handler,\n+\t\t\t       event->data));\n \t}\n     }\n   ASSERT(current_time == event_queue_time(events));\n@@ -229,12 +229,12 @@ event_queue_schedule(event_queue *events,\n   new_event->data = data;\n   new_event->handler = handler;\n   insert_event_entry(events, new_event, delta_time);\n-  TRACE(trace_events, (\"event scheduled at %ld - tag 0x%lx - time %ld, handler 0x%lx, data 0x%lx\\n\",\n-\t\t       (long)event_queue_time(events),\n-\t\t       (long)new_event,\n-\t\t       (long)new_event->time_of_event,\n-\t\t       (long)new_event->handler,\n-\t\t       (long)new_event->data));\n+  TRACE(trace_events, (\"event scheduled at %\" PRIi64 \" - tag %p - time %\" PRIi64 \", handler %p, data %p\\n\",\n+\t\t       event_queue_time(events),\n+\t\t       new_event,\n+\t\t       new_event->time_of_event,\n+\t\t       new_event->handler,\n+\t\t       new_event->data));\n   return (event_entry_tag)new_event;\n }\n \n@@ -272,12 +272,12 @@ event_queue_schedule_after_signal(event_queue *events,\n #endif\n   }\n \n-  TRACE(trace_events, (\"event scheduled at %ld - tag 0x%lx - time %ld, handler 0x%lx, data 0x%lx\\n\",\n-\t\t       (long)event_queue_time(events),\n-\t\t       (long)new_event,\n-\t\t       (long)new_event->time_of_event,\n-\t\t       (long)new_event->handler,\n-\t\t       (long)new_event->data));\n+  TRACE(trace_events, (\"event scheduled at %\" PRIi64 \" - tag %p - time %\" PRIi64 \", handler %p, data %p\\n\",\n+\t\t       event_queue_time(events),\n+\t\t       new_event,\n+\t\t       new_event->time_of_event,\n+\t\t       new_event->handler,\n+\t\t       new_event->data));\n \n   return (event_entry_tag)new_event;\n }\n@@ -298,19 +298,19 @@ event_queue_deschedule(event_queue *events,\n \t ptr_to_current = &current->next, current = *ptr_to_current);\n     if (current == to_remove) {\n       *ptr_to_current = current->next;\n-      TRACE(trace_events, (\"event descheduled at %ld - tag 0x%lx - time %ld, handler 0x%lx, data 0x%lx\\n\",\n-\t\t\t   (long)event_queue_time(events),\n-\t\t\t   (long)event_to_remove,\n-\t\t\t   (long)current->time_of_event,\n-\t\t\t   (long)current->handler,\n-\t\t\t   (long)current->data));\n+      TRACE(trace_events, (\"event descheduled at %\" PRIi64 \" - tag %p - time %\" PRIi64 \", handler %p, data %p\\n\",\n+\t\t\t   event_queue_time(events),\n+\t\t\t   event_to_remove,\n+\t\t\t   current->time_of_event,\n+\t\t\t   current->handler,\n+\t\t\t   current->data));\n       free(current);\n       update_time_from_event(events);\n     }\n     else {\n-      TRACE(trace_events, (\"event descheduled at %ld - tag 0x%lx - not found\\n\",\n-\t\t\t   (long)event_queue_time(events),\n-\t\t\t   (long)event_to_remove));\n+      TRACE(trace_events, (\"event descheduled at %\" PRIi64 \" - tag %p - not found\\n\",\n+\t\t\t   event_queue_time(events),\n+\t\t\t   event_to_remove));\n     }\n   }\n   ASSERT((events->time_from_event >= 0) == (events->queue != NULL));\n@@ -386,12 +386,12 @@ event_queue_process(event_queue *events)\n     event_handler *handler = to_do->handler;\n     void *data = to_do->data;\n     events->queue = to_do->next;\n-    TRACE(trace_events, (\"event issued at %ld - tag 0x%lx - time %ld, handler 0x%lx, data 0x%lx\\n\",\n-\t\t\t (long)event_time,\n-\t\t\t (long)to_do,\n-\t\t\t (long)to_do->time_of_event,\n-\t\t\t (long)handler,\n-\t\t\t (long)data));\n+    TRACE(trace_events, (\"event issued at %\" PRIi64 \" - tag %p - time %\" PRIi64 \", handler %p, data %p\\n\",\n+\t\t\t event_time,\n+\t\t\t to_do,\n+\t\t\t to_do->time_of_event,\n+\t\t\t handler,\n+\t\t\t data));\n     free(to_do);\n     /* Always re-compute the time to the next event so that HANDLER()\n        can safely insert new events into the queue. */"
    },
    {
      "sha": "0025024eb03d6fec2c2b794630797f13496c68e1",
      "filename": "sim/ppc/gdb-sim.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/gdb-sim.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/gdb-sim.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/gdb-sim.c?ref=fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
      "patch": "@@ -1276,8 +1276,8 @@ sim_fetch_register (SIM_DESC sd, int regno, unsigned char *buf, int length)\n   if (simulator == NULL || regname == NULL)\n     return -1;\n \n-  TRACE(trace_gdb, (\"sim_fetch_register(regno=%d(%s), buf=0x%lx)\\n\",\n-\t\t    regno, regname, (long)buf));\n+  TRACE(trace_gdb, (\"sim_fetch_register(regno=%d(%s), buf=%p)\\n\",\n+\t\t    regno, regname, buf));\n   return psim_read_register(simulator, MAX_NR_PROCESSORS,\n \t\t\t    buf, regname, raw_transfer);\n }\n@@ -1291,8 +1291,8 @@ sim_store_register (SIM_DESC sd, int regno, unsigned char *buf, int length)\n   if (simulator == NULL || regname == NULL)\n     return 0;\n \n-  TRACE(trace_gdb, (\"sim_store_register(regno=%d(%s), buf=0x%lx)\\n\",\n-\t\t    regno, regname, (long)buf));\n+  TRACE(trace_gdb, (\"sim_store_register(regno=%d(%s), buf=%p)\\n\",\n+\t\t    regno, regname, buf));\n   return psim_write_register(simulator, MAX_NR_PROCESSORS,\n \t\t\t     buf, regname, raw_transfer);\n }"
    },
    {
      "sha": "3d58833bb3d40ac358fe7ac2bdc501b13ad849d5",
      "filename": "sim/ppc/hw_init.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/hw_init.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/hw_init.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/hw_init.c?ref=fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
      "patch": "@@ -517,8 +517,8 @@ write_stack_arguments(device *me,\n \t\t      unsigned_word end_arg)\n {\n   DTRACE(stack,\n-\t(\"write_stack_arguments(device=%s, arg=0x%lx, start_block=0x%lx, end_block=0x%lx, start_arg=0x%lx, end_arg=0x%lx)\\n\",\n-\t device_name(me), (long)arg, (long)start_block, (long)end_block, (long)start_arg, (long)end_arg));\n+\t(\"write_stack_arguments(device=%s, arg=%p, start_block=0x%lx, end_block=0x%lx, start_arg=0x%lx, end_arg=0x%lx)\\n\",\n+\t device_name(me), arg, (long)start_block, (long)end_block, (long)start_arg, (long)end_arg));\n   if (arg == NULL)\n     device_error(me, \"Attempt to write a null array onto the stack\\n\");\n   /* only copy in arguments, memory is already zero */\n@@ -671,12 +671,12 @@ hw_stack_ioctl(device *me,\n       char **envp = va_arg(ap, char **);\n       const char *stack_type;\n       DTRACE(stack,\n-\t     (\"stack_ioctl_callback(me=0x%lx:%s processor=0x%lx cia=0x%lx argv=0x%lx envp=0x%lx)\\n\",\n-\t      (long)me, device_name(me),\n-\t      (long)processor,\n+\t     (\"stack_ioctl_callback(me=%p:%s processor=%p cia=0x%lx argv=%p envp=%p)\\n\",\n+\t      me, device_name(me),\n+\t      processor,\n \t      (long)cia,\n-\t      (long)argv,\n-\t      (long)envp));\n+\t      argv,\n+\t      envp));\n       stack_type = device_find_string_property(me, \"stack-type\");\n       if (strcmp(stack_type, \"ppc-elf\") == 0)\n \tcreate_ppc_elf_stack_frame(me, stack_pointer, argv, envp);"
    },
    {
      "sha": "34291b40cf8f026c798f5f1961e8711b163d81bc",
      "filename": "sim/ppc/psim.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/psim.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/psim.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/psim.c?ref=fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
      "patch": "@@ -882,9 +882,8 @@ psim_read_register(psim *system,\n #endif\n \n   default:\n-    printf_filtered(\"psim_read_register(processor=0x%lx,buf=0x%lx,reg=%s) %s\\n\",\n-\t\t    (unsigned long)processor, (unsigned long)buf, reg,\n-\t\t    \"read of this register unimplemented\");\n+    printf_filtered(\"psim_read_register(processor=%p,buf=%p,reg=%s) %s\\n\",\n+\t\t    processor, buf, reg, \"read of this register unimplemented\");\n     break;\n \n   }\n@@ -1070,8 +1069,8 @@ psim_write_register(psim *system,\n #endif\n \n   default:\n-    printf_filtered(\"psim_write_register(processor=0x%lx,cooked_buf=0x%lx,reg=%s) %s\\n\",\n-\t\t    (unsigned long)processor, (unsigned long)cooked_buf, reg,\n+    printf_filtered(\"psim_write_register(processor=%p,cooked_buf=%p,reg=%s) %s\\n\",\n+\t\t    processor, cooked_buf, reg,\n \t\t    \"read of this register unimplemented\");\n     break;\n "
    },
    {
      "sha": "fbc327c94e0996abb56a2fa84904d97f4c26d664",
      "filename": "sim/ppc/sim_calls.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/sim_calls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/sim_calls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/sim_calls.c?ref=fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
      "patch": "@@ -129,8 +129,8 @@ sim_read (SIM_DESC sd, SIM_ADDR mem, unsigned char *buf, int length)\n {\n   int result = psim_read_memory(simulator, MAX_NR_PROCESSORS,\n \t\t\t\tbuf, mem, length);\n-  TRACE(trace_gdb, (\"sim_read(mem=0x%lx, buf=0x%lx, length=%d) = %d\\n\",\n-\t\t    (long)mem, (long)buf, length, result));\n+  TRACE(trace_gdb, (\"sim_read(mem=0x%lx, buf=%p, length=%d) = %d\\n\",\n+\t\t    (long)mem, buf, length, result));\n   return result;\n }\n \n@@ -141,8 +141,8 @@ sim_write (SIM_DESC sd, SIM_ADDR mem, const unsigned char *buf, int length)\n   int result = psim_write_memory(simulator, MAX_NR_PROCESSORS,\n \t\t\t\t buf, mem, length,\n \t\t\t\t 1/*violate_ro*/);\n-  TRACE(trace_gdb, (\"sim_write(mem=0x%lx, buf=0x%lx, length=%d) = %d\\n\",\n-\t\t    (long)mem, (long)buf, length, result));\n+  TRACE(trace_gdb, (\"sim_write(mem=0x%lx, buf=%p, length=%d) = %d\\n\",\n+\t\t    (long)mem, buf, length, result));\n   return result;\n }\n \n@@ -208,8 +208,8 @@ sim_stop_reason (SIM_DESC sd, enum sim_stop *reason, int *sigrc)\n     break;\n   }\n \n-  TRACE(trace_gdb, (\"sim_stop_reason(reason=0x%lx(%ld), sigrc=0x%lx(%ld))\\n\",\n-\t\t    (long)reason, (long)*reason, (long)sigrc, (long)*sigrc));\n+  TRACE(trace_gdb, (\"sim_stop_reason(reason=%p(%ld), sigrc=%p(%ld))\\n\",\n+\t\t    reason, (long)*reason, sigrc, (long)*sigrc));\n }\n \n "
    },
    {
      "sha": "4df862bb2867ce55fe035ffc739276022f39c434",
      "filename": "sim/ppc/tree.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/tree.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/tree.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/tree.c?ref=fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
      "patch": "@@ -392,9 +392,9 @@ INLINE_TREE\\\n tree_init(device *root,\n \t  psim *system)\n {\n-  TRACE(trace_device_tree, (\"tree_init(root=0x%lx, system=0x%lx)\\n\",\n-\t\t\t    (long)root,\n-\t\t\t    (long)system));\n+  TRACE(trace_device_tree, (\"tree_init(root=%p, system=%p)\\n\",\n+\t\t\t    root,\n+\t\t\t    system));\n   /* remove the old, rebuild the new */\n   tree_traverse(root, device_clean, NULL, system);\n   tree_traverse(root, device_init_static_properties, NULL, system);"
    },
    {
      "sha": "b5ef75876973966c9aa249e3883870160b364253",
      "filename": "sim/ppc/vm.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/vm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7/sim/ppc/vm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/vm.c?ref=fad7f13ae13b03edfd8f0f2833af09d3a65a6bc7",
      "patch": "@@ -610,8 +610,8 @@ om_virtual_to_real(om_map *map,\n        == segment_tlb_entry->masked_virtual_segment_id)\n       && (page_tlb_entry->masked_page\n \t  == om_ea_masked_page(ea))) {\n-    TRACE(trace_vm, (\"ea=0x%lx - tlb hit - tlb=0x%lx\\n\",\n-\t       (long)ea, (long)page_tlb_entry));\n+    TRACE(trace_vm, (\"ea=0x%lx - tlb hit - tlb=%p\\n\",\n+\t\t     (long)ea, page_tlb_entry));\n     return page_tlb_entry;\n   }\n       \n@@ -662,13 +662,13 @@ om_virtual_to_real(om_map *map,\n \t\t\t  pte_1 | BIT(55),\n \t\t\t  processor, cia);\n \t    TRACE(trace_vm,\n-\t\t  (\"ea=0x%lx - htab hit - set ref - tlb=0x%lx &pte1=0x%lx\\n\",\n-\t\t   (long)ea, (long)page_tlb_entry, (long)real_address_of_pte_1));\n+\t\t  (\"ea=0x%lx - htab hit - set ref - tlb=%p &pte1=0x%lx\\n\",\n+\t\t   (long)ea, page_tlb_entry, (long)real_address_of_pte_1));\n \t  }\n \t  else {\n \t    TRACE(trace_vm,\n-\t\t  (\"ea=0x%lx - htab hit - tlb=0x%lx &pte1=0x%lx\\n\",\n-\t\t   (long)ea, (long)page_tlb_entry, (long)real_address_of_pte_1));\n+\t\t  (\"ea=0x%lx - htab hit - tlb=%p &pte1=0x%lx\\n\",\n+\t\t   (long)ea, page_tlb_entry, (long)real_address_of_pte_1));\n \t  }\n \t  return page_tlb_entry;\n \t}\n@@ -798,8 +798,8 @@ om_translate_effective_to_real(om_map *map,\n \t\t  page_tlb_entry->real_address_of_pte_1,\n \t\t  pte_1 | BIT(56),\n \t\t  processor, cia);\n-    TRACE(trace_vm, (\"ea=0x%lx - set change bit - tlb=0x%lx &pte1=0x%lx\\n\",\n-\t\t     (long)ea, (long)page_tlb_entry,\n+    TRACE(trace_vm, (\"ea=0x%lx - set change bit - tlb=%p &pte1=0x%lx\\n\",\n+\t\t     (long)ea, page_tlb_entry,\n \t\t     (long)page_tlb_entry->real_address_of_pte_1));\n   }\n "
    }
  ]
}