{
  "sha": "9f6148cb8538a11f39eb938d4d8bf1eaba31f6af",
  "node_id": "C_kwDOANOeidoAKDlmNjE0OGNiODUzOGExMWYzOWViOTM4ZDRkOGJmMWVhYmEzMWY2YWY",
  "commit": {
    "author": {
      "name": "Jan (janneke) Nieuwenhuizen",
      "email": "janneke@gnu.org",
      "date": "2021-11-22T07:30:57Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-23T02:35:24Z"
    },
    "message": "gdb: more compile fixes for gnu-nat.c\n\nThis fixes compile errors like\n\n    ../../gdb-11.1/gdb/gnu-nat.c: In function void add_task_commands():\n    ../../gdb-11.1/gdb/gnu-nat.c:3204:17: error: no matching function for call to add_cmd(const char [8], command_class, cmd_list_element*&, char*, cmd_list_element**)\n     3204 |         &setlist);\n          |                 ^\n    In file included from ../../gdb-11.1/gdb/completer.h:21,\n                     from ../../gdb-11.1/gdb/symtab.h:36,\n                     from ../../gdb-11.1/gdb/infrun.h:21,\n                     from ../../gdb-11.1/gdb/target.h:42,\n                     from ../../gdb-11.1/gdb/inf-child.h:23,\n                     from ../../gdb-11.1/gdb/gnu-nat.h:38,\n                     from ../../gdb-11.1/gdb/gnu-nat.c:24:\n    ../../gdb-11.1/gdb/command.h:160:33: note: candidate: cmd_list_element* add_cmd(const char*, command_class, void (*)(const char*, int), const char*, cmd_list_element**)\n      160 | extern struct cmd_list_element *add_cmd (const char *, enum command_class,\n          |                                 ^~~~~~~\n    ../../gdb-11.1/gdb/command.h:161:30: note:   no known conversion for argument 3 from cmd_list_element* to void (*)(const char*, int)\n      161 |       cmd_const_cfunc_ftype *fun,\n          |       ~~~~~~~~~~~~~~~~~~~~~~~^~~\n    ../../gdb-11.1/gdb/command.h:167:33: note: candidate: cmd_list_element* add_cmd(const char*, command_class, const char*, cmd_list_element**)\n      167 | extern struct cmd_list_element *add_cmd (const char *, enum command_class,\n          |                                 ^~~~~~~\n    ../../gdb-11.1/gdb/command.h:167:33: note:   candidate expects 4 arguments, 5 provided\n    ../../gdb-11.1/gdb/gnu-nat.c:3210:18: error: no matching function for call to add_cmd(const char [8], command_class, cmd_list_element*&, char*, cmd_list_element**)\n     3210 |         &showlist);\n          |                  ^\n\nChange-Id: Ie9029363d3fb40e34e8f5b1ab503745bc44bfe3f",
    "tree": {
      "sha": "d48ba51083eb5a5a4e6b2712fde1e77a933070a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d48ba51083eb5a5a4e6b2712fde1e77a933070a1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9f6148cb8538a11f39eb938d4d8bf1eaba31f6af",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f6148cb8538a11f39eb938d4d8bf1eaba31f6af",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9f6148cb8538a11f39eb938d4d8bf1eaba31f6af",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f6148cb8538a11f39eb938d4d8bf1eaba31f6af/comments",
  "author": {
    "login": "janneke",
    "id": 44080482,
    "node_id": "MDQ6VXNlcjQ0MDgwNDgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/44080482?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/janneke",
    "html_url": "https://github.com/janneke",
    "followers_url": "https://api.github.com/users/janneke/followers",
    "following_url": "https://api.github.com/users/janneke/following{/other_user}",
    "gists_url": "https://api.github.com/users/janneke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/janneke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/janneke/subscriptions",
    "organizations_url": "https://api.github.com/users/janneke/orgs",
    "repos_url": "https://api.github.com/users/janneke/repos",
    "events_url": "https://api.github.com/users/janneke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/janneke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e1fbfba5a58a76c4f99925149e2d5fe8f487d191",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e1fbfba5a58a76c4f99925149e2d5fe8f487d191",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e1fbfba5a58a76c4f99925149e2d5fe8f487d191"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 17,
    "deletions": 16
  },
  "files": [
    {
      "sha": "13127cd82461068e6b7ea20e4170b81d7f1a5437",
      "filename": "gdb/gnu-nat.c",
      "status": "modified",
      "additions": 17,
      "deletions": 16,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f6148cb8538a11f39eb938d4d8bf1eaba31f6af/gdb/gnu-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f6148cb8538a11f39eb938d4d8bf1eaba31f6af/gdb/gnu-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-nat.c?ref=9f6148cb8538a11f39eb938d4d8bf1eaba31f6af",
      "patch": "@@ -3191,31 +3191,31 @@ Show whether new threads are allowed to run (once gdb has noticed them).\"),\n \t   _(\"Show the default detach-suspend-count value for new threads.\"),\n \t   &show_thread_default_cmd_list);\n \n-  cmd_list_element *set_signals_cmd\n+  cmd_list_element *set_signals_cmd_\n     = add_cmd (\"signals\", class_run, set_signals_cmd, _(\"\\\n Set whether the inferior process's signals will be intercepted.\\n\\\n Mach exceptions (such as breakpoint traps) are not affected.\"),\n \t       &setlist);\n-  add_alias_cmd (\"sigs\", set_signals_cmd, class_run, 1, &setlist);\n+  add_alias_cmd (\"sigs\", set_signals_cmd_, class_run, 1, &setlist);\n \n-  cmd_list_element *show_signals_cmd\n+  cmd_list_element *show_signals_cmd_\n     = add_cmd (\"signals\", no_class, show_signals_cmd, _(\"\\\n Show whether the inferior process's signals will be intercepted.\"),\n \t       &showlist);\n-  add_alias_cmd (\"sigs\", show_signals_cmd, no_class, 1, &showlist);\n+  add_alias_cmd (\"sigs\", show_signals_cmd_, no_class, 1, &showlist);\n \n-  cmd_list_element *set_signal_thread_cmd\n+  cmd_list_element *set_signal_thread_cmd_\n     = add_cmd (\"signal-thread\", class_run, set_sig_thread_cmd, _(\"\\\n Set the thread that gdb thinks is the libc signal thread.\\n\\\n This thread is run when delivering a signal to a non-stopped process.\"),\n \t       &setlist);\n-  add_alias_cmd (\"sigthread\", set_signal_thread_cmd, class_run, 1, &setlist);\n+  add_alias_cmd (\"sigthread\", set_signal_thread_cmd_, class_run, 1, &setlist);\n \n-  cmd_list_element *show_signal_thread_cmd\n+  cmd_list_element *show_signal_thread_cmd_\n     = add_cmd (\"signal-thread\", no_class, show_sig_thread_cmd, _(\"\\\n Set the thread that gdb thinks is the libc signal thread.\"),\n \t       &showlist);\n-  add_alias_cmd (\"sigthread\", show_signal_thread_cmd, no_class, 1, &showlist);\n+  add_alias_cmd (\"sigthread\", show_signal_thread_cmd_, no_class, 1, &showlist);\n \n   add_cmd (\"stopped\", class_run, set_stopped_cmd, _(\"\\\n Set whether gdb thinks the inferior process is stopped as with SIGSTOP.\\n\\\n@@ -3225,13 +3225,13 @@ Stopped process will be continued by sending them a signal.\"),\n Show whether gdb thinks the inferior process is stopped as with SIGSTOP.\"),\n \t   &showlist);\n \n-  cmd_list_element *set_exceptions_cmd\n+  cmd_list_element *set_exceptions_cmd_\n     = add_cmd (\"exceptions\", class_run, set_exceptions_cmd, _(\"\\\n Set whether exceptions in the inferior process will be trapped.\\n\\\n When exceptions are turned off, neither breakpoints nor single-stepping\\n\\\n will work.\"), &setlist);\n   /* Allow `set exc' despite conflict with `set exception-port'.  */\n-  add_alias_cmd (\"exc\", set_exceptions_cmd, class_run, 1, &setlist);\n+  add_alias_cmd (\"exc\", set_exceptions_cmd_, class_run, 1, &setlist);\n \n   add_cmd (\"exceptions\", no_class, show_exceptions_cmd, _(\"\\\n Show whether exceptions in the inferior process will be trapped.\"),\n@@ -3263,14 +3263,14 @@ used to pause individual threads by default instead.\"),\n \t     \"on the thread when detaching.\"),\n \t   &show_task_cmd_list);\n \n-  cmd_list_element *set_task_exception_port_cmd\n+  cmd_list_element *set_task_exception_port_cmd_\n     = add_cmd (\"exception-port\", no_class, set_task_exc_port_cmd, _(\"\\\n Set the task exception port to which we forward exceptions.\\n\\\n The argument should be the value of the send right in the task.\"),\n \t       &set_task_cmd_list);\n-  add_alias_cmd (\"excp\", set_task_exception_port_cmd, no_class, 1,\n+  add_alias_cmd (\"excp\", set_task_exception_port_cmd_, no_class, 1,\n \t\t &set_task_cmd_list);\n-  add_alias_cmd (\"exc-port\", set_task_exception_port_cmd, no_class, 1,\n+  add_alias_cmd (\"exc-port\", set_task_exception_port_cmd_, no_class, 1,\n \t\t &set_task_cmd_list);\n \n   /* A convenient way of turning on all options require to noninvasively\n@@ -3458,14 +3458,15 @@ Note that this is relative to suspend count when gdb noticed the thread;\\n\\\n use the `thread takeover-suspend-count' to force it to an absolute value.\"),\n \t   &show_thread_cmd_list);\n \n-  add_cmd (\"exception-port\", no_class, set_thread_exc_port_cmd, _(\"\\\n+  cmd_list_element *set_thread_exception_port_cmd_\n+    = add_cmd (\"exception-port\", no_class, set_thread_exc_port_cmd, _(\"\\\n Set the thread exception port to which we forward exceptions.\\n\\\n This overrides the task exception port.\\n\\\n The argument should be the value of the send right in the task.\"),\n \t   &set_thread_cmd_list);\n-  add_alias_cmd (\"excp\", set_thread_exception_port_cmd, no_class, 1,\n+  add_alias_cmd (\"excp\", set_thread_exception_port_cmd_, no_class, 1,\n \t\t &set_thread_cmd_list);\n-  add_alias_cmd (\"exc-port\", set_thread_exception_port_cmd, no_class, 1,\n+  add_alias_cmd (\"exc-port\", set_thread_exception_port_cmd_, no_class, 1,\n \t\t &set_thread_cmd_list);\n \n   add_cmd (\"takeover-suspend-count\", no_class, thread_takeover_sc_cmd, _(\"\\"
    }
  ]
}