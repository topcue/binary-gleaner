{
  "sha": "814cf43a1f16157fcbe2c662f567d064393a0fcb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODE0Y2Y0M2ExZjE2MTU3ZmNiZTJjNjYyZjU2N2QwNjQzOTNhMGZjYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-01T05:47:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-08T22:01:51Z"
    },
    "message": "Convert probes to type-safe registry API\n\nThis changes the probes code in elfread.c to use the type-safe\nregistry API.  While doing this, I saw that the caller of get_probes\nowns the probes, so I went through the code and changed the vectors to\nstore unique_ptrs, making the ownership relationship more clear.\n\ngdb/ChangeLog\n2019-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* symfile.h (struct sym_probe_fns) <sym_get_probes>: Change type.\n\t* symfile-debug.c (debug_sym_get_probes): Change type.\n\t* stap-probe.c (handle_stap_probe):\n\t(stap_static_probe_ops::get_probes): Change type.\n\t* probe.h (class static_probe_ops) <get_probes>: Change type.\n\t* probe.c (class any_static_probe_ops) <get_probes>: Change type.\n\t(parse_probes_in_pspace): Update.\n\t(find_probes_in_objfile, find_probe_by_pc, collect_probes):\n\tUpdate.\n\t(any_static_probe_ops::get_probes): Change type.\n\t* elfread.c (elfread_data): New typedef.\n\t(probe_key): Change type.\n\t(elf_get_probes): Likewise.  Update.\n\t(probe_key_free): Remove.\n\t(_initialize_elfread): Update.\n\t* dtrace-probe.c (class dtrace_static_probe_ops) <get_probes>:\n\tChange type.\n\t(dtrace_process_dof_probe, dtrace_process_dof)\n\t(dtrace_static_probe_ops::get_probe): Change type.",
    "tree": {
      "sha": "66d0d0c948fdf020cd7a31849db9edc26ea138ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/66d0d0c948fdf020cd7a31849db9edc26ea138ac"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/814cf43a1f16157fcbe2c662f567d064393a0fcb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/814cf43a1f16157fcbe2c662f567d064393a0fcb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/814cf43a1f16157fcbe2c662f567d064393a0fcb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/814cf43a1f16157fcbe2c662f567d064393a0fcb/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "02dc647ed65b1429b9af4986ed467f90fbe0c33b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02dc647ed65b1429b9af4986ed467f90fbe0c33b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/02dc647ed65b1429b9af4986ed467f90fbe0c33b"
    }
  ],
  "stats": {
    "total": 117,
    "additions": 64,
    "deletions": 53
  },
  "files": [
    {
      "sha": "bf44b765ad2efcf81e997c9b3487cf4fbdbd4d73",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=814cf43a1f16157fcbe2c662f567d064393a0fcb",
      "patch": "@@ -1,3 +1,25 @@\n+2019-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* symfile.h (struct sym_probe_fns) <sym_get_probes>: Change type.\n+\t* symfile-debug.c (debug_sym_get_probes): Change type.\n+\t* stap-probe.c (handle_stap_probe):\n+\t(stap_static_probe_ops::get_probes): Change type.\n+\t* probe.h (class static_probe_ops) <get_probes>: Change type.\n+\t* probe.c (class any_static_probe_ops) <get_probes>: Change type.\n+\t(parse_probes_in_pspace): Update.\n+\t(find_probes_in_objfile, find_probe_by_pc, collect_probes):\n+\tUpdate.\n+\t(any_static_probe_ops::get_probes): Change type.\n+\t* elfread.c (elfread_data): New typedef.\n+\t(probe_key): Change type.\n+\t(elf_get_probes): Likewise.  Update.\n+\t(probe_key_free): Remove.\n+\t(_initialize_elfread): Update.\n+\t* dtrace-probe.c (class dtrace_static_probe_ops) <get_probes>:\n+\tChange type.\n+\t(dtrace_process_dof_probe, dtrace_process_dof)\n+\t(dtrace_static_probe_ops::get_probe): Change type.\n+\n 2019-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* xcoffread.c (struct xcoff_symfile_info): Rename from"
    },
    {
      "sha": "52973784e9aa2353fd855481683883762c8dfb9f",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=814cf43a1f16157fcbe2c662f567d064393a0fcb",
      "patch": "@@ -81,7 +81,7 @@ class dtrace_static_probe_ops : public static_probe_ops\n   bool is_linespec (const char **linespecp) const override;\n \n   /* See probe.h.  */\n-  void get_probes (std::vector<probe *> *probesp,\n+  void get_probes (std::vector<std::unique_ptr<probe>> *probesp,\n \t\t   struct objfile *objfile) const override;\n \n   /* See probe.h.  */\n@@ -380,7 +380,7 @@ struct dtrace_dof_probe\n static void\n dtrace_process_dof_probe (struct objfile *objfile,\n \t\t\t  struct gdbarch *gdbarch,\n-\t\t\t  std::vector<probe *> *probesp,\n+\t\t\t  std::vector<std::unique_ptr<probe>> *probesp,\n \t\t\t  struct dtrace_dof_hdr *dof,\n \t\t\t  struct dtrace_dof_probe *probe,\n \t\t\t  struct dtrace_dof_provider *provider,\n@@ -507,7 +507,7 @@ dtrace_process_dof_probe (struct objfile *objfile,\n \t\t\t\t\t    std::move (enablers_copy));\n \n       /* Successfully created probe.  */\n-      probesp->push_back (ret);\n+      probesp->emplace_back (ret);\n     }\n }\n \n@@ -518,7 +518,8 @@ dtrace_process_dof_probe (struct objfile *objfile,\n \n static void\n dtrace_process_dof (asection *sect, struct objfile *objfile,\n-\t\t    std::vector<probe *> *probesp, struct dtrace_dof_hdr *dof)\n+\t\t    std::vector<std::unique_ptr<probe>> *probesp,\n+\t\t    struct dtrace_dof_hdr *dof)\n {\n   struct gdbarch *gdbarch = get_objfile_arch (objfile);\n   struct dtrace_dof_sect *section;\n@@ -833,8 +834,9 @@ dtrace_static_probe_ops::is_linespec (const char **linespecp) const\n /* Implementation of the get_probes method.  */\n \n void\n-dtrace_static_probe_ops::get_probes (std::vector<probe *> *probesp,\n-\t\t\t\t     struct objfile *objfile) const\n+dtrace_static_probe_ops::get_probes\n+  (std::vector<std::unique_ptr<probe>> *probesp,\n+   struct objfile *objfile) const\n {\n   bfd *abfd = objfile->obfd;\n   asection *sect = NULL;"
    },
    {
      "sha": "deee6f0baab5b59727700080793d51e9a5484e1e",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 8,
      "deletions": 24,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=814cf43a1f16157fcbe2c662f567d064393a0fcb",
      "patch": "@@ -64,9 +64,13 @@ struct elfinfo\n     asection *mdebugsect;\t/* Section pointer for .mdebug section */\n   };\n \n+/* Type for per-BFD data.  */\n+\n+typedef std::vector<std::unique_ptr<probe>> elfread_data;\n+\n /* Per-BFD data for probe info.  */\n \n-static const struct bfd_data *probe_key = NULL;\n+static const struct bfd_key<elfread_data> probe_key;\n \n /* Minimal symbols located at the GOT entries for .plt - that is the real\n    pointer where the given entry will jump to.  It gets updated by the real\n@@ -1347,43 +1351,24 @@ elf_symfile_init (struct objfile *objfile)\n \n /* Implementation of `sym_get_probes', as documented in symfile.h.  */\n \n-static const std::vector<probe *> &\n+static const elfread_data &\n elf_get_probes (struct objfile *objfile)\n {\n-  std::vector<probe *> *probes_per_bfd;\n-\n-  /* Have we parsed this objfile's probes already?  */\n-  probes_per_bfd = (std::vector<probe *> *) bfd_data (objfile->obfd, probe_key);\n+  elfread_data *probes_per_bfd = probe_key.get (objfile->obfd);\n \n   if (probes_per_bfd == NULL)\n     {\n-      probes_per_bfd = new std::vector<probe *>;\n+      probes_per_bfd = probe_key.emplace (objfile->obfd);\n \n       /* Here we try to gather information about all types of probes from the\n \t objfile.  */\n       for (const static_probe_ops *ops : all_static_probe_ops)\n \tops->get_probes (probes_per_bfd, objfile);\n-\n-      set_bfd_data (objfile->obfd, probe_key, probes_per_bfd);\n     }\n \n   return *probes_per_bfd;\n }\n \n-/* Helper function used to free the space allocated for storing SystemTap\n-   probe information.  */\n-\n-static void\n-probe_key_free (bfd *abfd, void *d)\n-{\n-  std::vector<probe *> *probes = (std::vector<probe *> *) d;\n-\n-  for (probe *p : *probes)\n-    delete p;\n-\n-  delete probes;\n-}\n-\n \f\n \n /* Implementation `sym_probe_fns', as documented in symfile.h.  */\n@@ -1475,7 +1460,6 @@ static const struct gnu_ifunc_fns elf_gnu_ifunc_fns =\n void\n _initialize_elfread (void)\n {\n-  probe_key = register_bfd_data_with_cleanup (NULL, probe_key_free);\n   add_symtab_fns (bfd_target_elf_flavour, &elf_sym_fns);\n \n   elf_objfile_gnu_ifunc_cache_data = register_objfile_data ();"
    },
    {
      "sha": "7bc75d8e879bd8cd0932827716cec46c1d13f6d1",
      "filename": "gdb/probe.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/probe.c?ref=814cf43a1f16157fcbe2c662f567d064393a0fcb",
      "patch": "@@ -47,7 +47,7 @@ class any_static_probe_ops : public static_probe_ops\n   bool is_linespec (const char **linespecp) const override;\n \n   /* See probe.h.  */\n-  void get_probes (std::vector<probe *> *probesp,\n+  void get_probes (std::vector<std::unique_ptr<probe>> *probesp,\n \t\t   struct objfile *objfile) const override;\n \n   /* See probe.h.  */\n@@ -84,10 +84,10 @@ parse_probes_in_pspace (const static_probe_ops *spops,\n \t\t\t   objfile_namestr) != 0)\n \tcontinue;\n \n-      const std::vector<probe *> &probes\n+      const std::vector<std::unique_ptr<probe>> &probes\n \t= objfile->sf->sym_probe_fns->sym_get_probes (objfile);\n \n-      for (probe *p : probes)\n+      for (auto &p : probes)\n \t{\n \t  if (spops != &any_static_probe_ops && p->get_static_ops () != spops)\n \t    continue;\n@@ -103,7 +103,7 @@ parse_probes_in_pspace (const static_probe_ops *spops,\n \t  sal.explicit_pc = 1;\n \t  sal.section = find_pc_overlay (sal.pc);\n \t  sal.pspace = search_pspace;\n-\t  sal.prob = p;\n+\t  sal.prob = p.get ();\n \t  sal.objfile = objfile;\n \n \t  result->push_back (std::move (sal));\n@@ -223,17 +223,17 @@ find_probes_in_objfile (struct objfile *objfile, const char *provider,\n   if (!objfile->sf || !objfile->sf->sym_probe_fns)\n     return result;\n \n-  const std::vector<probe *> &probes\n+  const std::vector<std::unique_ptr<probe>> &probes\n     = objfile->sf->sym_probe_fns->sym_get_probes (objfile);\n-  for (probe *p : probes)\n+  for (auto &p : probes)\n     {\n       if (p->get_provider () != provider)\n \tcontinue;\n \n       if (p->get_name () != name)\n \tcontinue;\n \n-      result.push_back (p);\n+      result.push_back (p.get ());\n     }\n \n   return result;\n@@ -256,13 +256,13 @@ find_probe_by_pc (CORE_ADDR pc)\n \tcontinue;\n \n       /* If this proves too inefficient, we can replace with a hash.  */\n-      const std::vector<probe *> &probes\n+      const std::vector<std::unique_ptr<probe>> &probes\n \t= objfile->sf->sym_probe_fns->sym_get_probes (objfile);\n-      for (probe *p : probes)\n+      for (auto &p : probes)\n \tif (p->get_relocated_address (objfile) == pc)\n \t  {\n \t    result.objfile = objfile;\n-\t    result.prob = p;\n+\t    result.prob = p.get ();\n \t    return result;\n \t  }\n     }\n@@ -305,10 +305,10 @@ collect_probes (const std::string &objname, const std::string &provider,\n \t    continue;\n \t}\n \n-      const std::vector<probe *> &probes\n+      const std::vector<std::unique_ptr<probe>> &probes\n \t= objfile->sf->sym_probe_fns->sym_get_probes (objfile);\n \n-      for (probe *p : probes)\n+      for (auto &p : probes)\n \t{\n \t  if (spops != &any_static_probe_ops && p->get_static_ops () != spops)\n \t    continue;\n@@ -321,7 +321,7 @@ collect_probes (const std::string &objname, const std::string &provider,\n \t      && probe_pat->exec (p->get_name ().c_str (), 0, NULL, 0) != 0)\n \t    continue;\n \n-\t  result.emplace_back (p, objfile);\n+\t  result.emplace_back (p.get (), objfile);\n \t}\n     }\n \n@@ -750,7 +750,7 @@ any_static_probe_ops::is_linespec (const char **linespecp) const\n /* Implementation of 'get_probes' method.  */\n \n void\n-any_static_probe_ops::get_probes (std::vector<probe *> *probesp,\n+any_static_probe_ops::get_probes (std::vector<std::unique_ptr<probe>> *probesp,\n \t\t\t\t  struct objfile *objfile) const\n {\n   /* No probes can be provided by this dummy backend.  */"
    },
    {
      "sha": "5c83f49471485dcaaedd304abd6478b166a44fc7",
      "filename": "gdb/probe.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/probe.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/probe.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/probe.h?ref=814cf43a1f16157fcbe2c662f567d064393a0fcb",
      "patch": "@@ -62,7 +62,7 @@ class static_probe_ops\n   virtual bool is_linespec (const char **linespecp) const = 0;\n \n   /* Function that should fill PROBES with known probes from OBJFILE.  */\n-  virtual void get_probes (std::vector<probe *> *probes,\n+  virtual void get_probes (std::vector<std::unique_ptr<probe>> *probes,\n \t\t\t    struct objfile *objfile) const = 0;\n \n   /* Return a pointer to a name identifying the probe type.  This is"
    },
    {
      "sha": "e70940c4878b578d499a56944e0220c294f1c46b",
      "filename": "gdb/stap-probe.c",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/stap-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/stap-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stap-probe.c?ref=814cf43a1f16157fcbe2c662f567d064393a0fcb",
      "patch": "@@ -106,7 +106,7 @@ class stap_static_probe_ops : public static_probe_ops\n   bool is_linespec (const char **linespecp) const override;\n \n   /* See probe.h.  */\n-  void get_probes (std::vector<probe *> *probesp,\n+  void get_probes (std::vector<std::unique_ptr<probe>> *probesp,\n \t\t   struct objfile *objfile) const override;\n \n   /* See probe.h.  */\n@@ -1497,7 +1497,8 @@ stap_probe::gen_info_probes_table_values () const\n \n static void\n handle_stap_probe (struct objfile *objfile, struct sdt_note *el,\n-\t\t   std::vector<probe *> *probesp, CORE_ADDR base)\n+\t\t   std::vector<std::unique_ptr<probe>> *probesp,\n+\t\t   CORE_ADDR base)\n {\n   bfd *abfd = objfile->obfd;\n   int size = bfd_get_arch_size (abfd) / 8;\n@@ -1561,7 +1562,7 @@ handle_stap_probe (struct objfile *objfile, struct sdt_note *el,\n \t\t\t\t    address, gdbarch, sem_addr, probe_args);\n \n   /* Successfully created probe.  */\n-  probesp->push_back (ret);\n+  probesp->emplace_back (ret);\n }\n \n /* Helper function which tries to find the base address of the SystemTap\n@@ -1615,8 +1616,9 @@ stap_static_probe_ops::is_linespec (const char **linespecp) const\n /* Implementation of the 'get_probes' method.  */\n \n void\n-stap_static_probe_ops::get_probes (std::vector<probe *> *probesp,\n-\t\t\t\t   struct objfile *objfile) const\n+stap_static_probe_ops::get_probes\n+  (std::vector<std::unique_ptr<probe>> *probesp,\n+   struct objfile *objfile) const\n {\n   /* If we are here, then this is the first time we are parsing the\n      SystemTap probe's information.  We basically have to count how many"
    },
    {
      "sha": "0f9da66e536fab169e68fdd06545a6deead170eb",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=814cf43a1f16157fcbe2c662f567d064393a0fcb",
      "patch": "@@ -382,13 +382,13 @@ static const struct quick_symbol_functions debug_sym_quick_functions =\n \f\n /* Debugging version of struct sym_probe_fns.  */\n \n-static const std::vector<probe *> &\n+static const std::vector<std::unique_ptr<probe>> &\n debug_sym_get_probes (struct objfile *objfile)\n {\n   const struct debug_sym_fns_data *debug_data\n     = symfile_debug_objfile_data_key.get (objfile);\n \n-  const std::vector<probe *> &retval\n+  const std::vector<std::unique_ptr<probe>> &retval\n     = debug_data->real_sf->sym_probe_fns->sym_get_probes (objfile);\n \n   fprintf_filtered (gdb_stdlog,"
    },
    {
      "sha": "daddd2e21abe55134815871637849a46764e4b2f",
      "filename": "gdb/symfile.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/symfile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/814cf43a1f16157fcbe2c662f567d064393a0fcb/gdb/symfile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.h?ref=814cf43a1f16157fcbe2c662f567d064393a0fcb",
      "patch": "@@ -292,7 +292,8 @@ struct quick_symbol_functions\n struct sym_probe_fns\n {\n   /* If non-NULL, return a reference to vector of probe objects.  */\n-  const std::vector<probe *> &(*sym_get_probes) (struct objfile *);\n+  const std::vector<std::unique_ptr<probe>> &(*sym_get_probes)\n+    (struct objfile *);\n };\n \n /* Structure to keep track of symbol reading functions for various"
    }
  ]
}