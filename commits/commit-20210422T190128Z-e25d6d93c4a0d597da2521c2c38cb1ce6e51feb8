{
  "sha": "e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTI1ZDZkOTNjNGEwZDU5N2RhMjUyMWMyYzM4Y2IxY2U2ZTUxZmViOA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-22T19:01:28Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-22T19:01:28Z"
    },
    "message": "gdb: fix getting range of flexible array member in Python\n\nAs reported in bug 27757, we get an internal error when doing:\n\n    $ cat test.c\n    struct foo {\n        int len;\n        int items[];\n    };\n\n    struct foo *p;\n\n    int main() {\n        return 0;\n    }\n    $ gcc test.c -g -O0 -o test\n    $ ./gdb -q -nx --data-directory=data-directory ./test -ex 'python gdb.parse_and_eval(\"p\").type.target()[\"items\"].type.range()'\n    Reading symbols from ./test...\n    /home/simark/src/binutils-gdb/gdb/gdbtypes.h:435: internal-error: LONGEST dynamic_prop::const_val() const: Assertion `m_kind == PROP_CONST' failed.\n    A problem internal to GDB has been detected,\n    further debugging may prove unreliable.\n    Quit this debugging session? (y or n)\n\nThis is because the Python code (typy_range) blindly reads the high\nbound of the type of `items` as a constant value.  Since it is a\nflexible array member, it has no high bound, the property is undefined.\nSince commit 8c2e4e0689 (\"gdb: add accessors to struct dynamic_prop\"),\nthe getters check that you are not getting a property value of the wrong\nkind, so this causes a failed assertion.\n\nFix it by checking if the property is indeed a constant value before\naccessing it as such.  Otherwise, use 0.  This restores the previous GDB\nbehavior: because the structure was zero-initialized, this is what was\nreturned before.  But now this behavior is explicit and not accidental.\n\nAdd a test, gdb.python/flexible-array-member.exp, that is derived from\ngdb.base/flexible-array-member.exp.  It tests the same things, but\nthrough the Python API.  It also specifically tests getting the range\nfrom the various kinds of flexible array member types (AFAIK it wasn't\npossible to do the equivalent through the CLI).\n\ngdb/ChangeLog:\n\n\tPR gdb/27757\n\t* python/py-type.c (typy_range): Check that bounds are constant\n\tbefore accessing them as such.\n\t* guile/scm-type.c (gdbscm_type_range): Likewise.\n\ngdb/testsuite/ChangeLog:\n\n\tPR gdb/27757\n\t* gdb.python/flexible-array-member.c: New test.\n\t* gdb.python/flexible-array-member.exp: New test.\n\t* gdb.guile/scm-type.exp (test_range): Add test for flexible\n\tarray member.\n\t* gdb.guile/scm-type.c (struct flex_member): New.\n\t(main): Use it.\n\nChange-Id: Ibef92ee5fd871ecb7c791db2a788f203dff2b841",
    "tree": {
      "sha": "a969eadcbae435fade7ceaf03a5816cf1385cc4c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a969eadcbae435fade7ceaf03a5816cf1385cc4c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2f63213381e3b073f169ee776043486b44ea2e68",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f63213381e3b073f169ee776043486b44ea2e68",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2f63213381e3b073f169ee776043486b44ea2e68"
    }
  ],
  "stats": {
    "total": 214,
    "additions": 210,
    "deletions": 4
  },
  "files": [
    {
      "sha": "67de5ca80bb34e071a7106a527841fddec2022aa",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
      "patch": "@@ -1,3 +1,10 @@\n+2021-04-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR gdb/27757\n+\t* python/py-type.c (typy_range): Check that bounds are constant\n+\tbefore accessing them as such.\n+\t* guile/scm-type.c (gdbscm_type_range): Likewise.\n+\n 2021-04-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* Makefile.in (COMMON_SFILES): Remove continuations.c."
    },
    {
      "sha": "11693844edcb85b8fa47cfd9a0e6dd6f05666264",
      "filename": "gdb/guile/scm-type.c",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/guile/scm-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/guile/scm-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-type.c?ref=e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
      "patch": "@@ -823,8 +823,15 @@ gdbscm_type_range (SCM self)\n     case TYPE_CODE_ARRAY:\n     case TYPE_CODE_STRING:\n     case TYPE_CODE_RANGE:\n-      low = type->bounds ()->low.const_val ();\n-      high = type->bounds ()->high.const_val ();\n+      if (type->bounds ()->low.kind () == PROP_CONST)\n+\tlow = type->bounds ()->low.const_val ();\n+      else\n+\tlow = 0;\n+\n+      if (type->bounds ()->high.kind () == PROP_CONST)\n+\thigh = type->bounds ()->high.const_val ();\n+      else\n+\thigh = 0;\n       break;\n     }\n "
    },
    {
      "sha": "148e4a6aa3a0987bb225c2ca375cd0a7669b3bce",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
      "patch": "@@ -592,8 +592,15 @@ typy_range (PyObject *self, PyObject *args)\n     case TYPE_CODE_ARRAY:\n     case TYPE_CODE_STRING:\n     case TYPE_CODE_RANGE:\n-      low = type->bounds ()->low.const_val ();\n-      high = type->bounds ()->high.const_val ();;\n+      if (type->bounds ()->low.kind () == PROP_CONST)\n+\tlow = type->bounds ()->low.const_val ();\n+      else\n+\tlow = 0;\n+\n+      if (type->bounds ()->high.kind () == PROP_CONST)\n+\thigh = type->bounds ()->high.const_val ();\n+      else\n+\thigh = 0;\n       break;\n     }\n "
    },
    {
      "sha": "9730658299bf16ec15ba87e46d6bd1701a5849c4",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
      "patch": "@@ -1,3 +1,13 @@\n+2021-04-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR gdb/27757\n+\t* gdb.python/flexible-array-member.c: New test.\n+\t* gdb.python/flexible-array-member.exp: New test.\n+\t* gdb.guile/scm-type.exp (test_range): Add test for flexible\n+\tarray member.\n+\t* gdb.guile/scm-type.c (struct flex_member): New.\n+\t(main): Use it.\n+\n 2021-04-22  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.rust/modules.exp: Add checks for syntax errors."
    },
    {
      "sha": "64f5f02efedcf2818756f8834a7bbd490389da82",
      "filename": "gdb/testsuite/gdb.guile/scm-type.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/testsuite/gdb.guile/scm-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/testsuite/gdb.guile/scm-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-type.c?ref=e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
      "patch": "@@ -15,6 +15,8 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n+#include <stdlib.h>\n+\n struct s\n {\n   int a;\n@@ -53,6 +55,12 @@ enum E\n struct s vec_data_1 = {1, 1};\n struct s vec_data_2 = {1, 2};\n \n+struct flex_member\n+{\n+  int n;\n+  int items[];\n+};\n+\n int\n main ()\n {\n@@ -72,6 +80,10 @@ main ()\n   st.b = 5;\n \n   e = v2;\n+\n+  struct flex_member *f = (struct flex_member *) malloc (100);\n+  f->items[0] = 111;\n+  f->items[1] = 222;\n   \n   return 0;      /* break to inspect struct and array.  */\n }"
    },
    {
      "sha": "517c99f8369d69b6b8b7304f665f8b4489208fdc",
      "filename": "gdb/testsuite/gdb.guile/scm-type.exp",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/testsuite/gdb.guile/scm-type.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/testsuite/gdb.guile/scm-type.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-type.exp?ref=e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
      "patch": "@@ -261,6 +261,18 @@ proc test_range {} {\n \t\t\"ERROR: .*: Wrong type argument in position 1 \\\\(expecting ranged type\\\\): .*\" \\\n \t\t\"check range for non ranged type\"\n \t}\n+\n+\twith_test_prefix \"on flexible array member\" {\n+\t    gdb_scm_test_silent_cmd \"print f\" \"print value (f)\"\n+\t    gdb_scm_test_silent_cmd \"guile (define f (history-ref 0))\" \\\n+\t\t\"get value (f) from history\"\n+\t    gdb_test \"guile (print (type-range (field-type (type-field (value-type (value-dereference f)) \\\"items\\\"))))\" \\\n+\t\t\"= \\\\(0 0\\\\)\"\n+\t    gdb_test \"guile (print (value-subscript (value-field (value-dereference f) \\\"items\\\") 0))\" \\\n+\t\t\"= 111\"\n+\t    gdb_test \"guile (print (value-subscript (value-field (value-dereference f) \\\"items\\\") 1))\" \\\n+\t\t\"= 222\"\n+\t}\n     }\n }\n "
    },
    {
      "sha": "79815e2d38e02d5f9fdc629dd5a058da96c78787",
      "filename": "gdb/testsuite/gdb.python/flexible-array-member.c",
      "status": "added",
      "additions": 70,
      "deletions": 0,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/testsuite/gdb.python/flexible-array-member.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/testsuite/gdb.python/flexible-array-member.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/flexible-array-member.c?ref=e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
      "patch": "@@ -0,0 +1,70 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020-2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdlib.h>\n+\n+struct no_size\n+{\n+  int n;\n+  int items[];\n+};\n+\n+struct zero_size\n+{\n+  int n;\n+  int items[0];\n+};\n+\n+struct zero_size_only\n+{\n+  int items[0];\n+};\n+\n+struct no_size *ns;\n+struct zero_size *zs;\n+struct zero_size_only *zso;\n+\n+static void\n+break_here (void)\n+{\n+}\n+\n+int\n+main (void)\n+{\n+  ns = (struct no_size *) malloc (sizeof (*ns) + 3 * sizeof (int));\n+  zs = (struct zero_size *) malloc (sizeof (*zs) + 3 * sizeof (int));\n+  zso = (struct zero_size_only *) malloc (sizeof (*zso) + 3 * sizeof (int));\n+\n+  ns->n = 3;\n+  ns->items[0] = 101;\n+  ns->items[1] = 102;\n+  ns->items[2] = 103;\n+\n+  zs->n = 3;\n+  zs->items[0] = 201;\n+  zs->items[1] = 202;\n+  zs->items[2] = 203;\n+\n+  zso->items[0] = 301;\n+  zso->items[1] = 302;\n+  zso->items[2] = 303;\n+\n+  break_here ();\n+\n+  return 0;\n+}"
    },
    {
      "sha": "3739c9a9e5c0d49f2b17d2452b42686abeacefc1",
      "filename": "gdb/testsuite/gdb.python/flexible-array-member.exp",
      "status": "added",
      "additions": 81,
      "deletions": 0,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/testsuite/gdb.python/flexible-array-member.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8/gdb/testsuite/gdb.python/flexible-array-member.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/flexible-array-member.exp?ref=e25d6d93c4a0d597da2521c2c38cb1ce6e51feb8",
      "patch": "@@ -0,0 +1,81 @@\n+# Copyright 2020-2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test getting the range of flexible array members in Python.\n+\n+standard_testfile\n+\n+if { [prepare_for_testing \"failed to prepare\" \\\n+\t${testfile} ${srcfile}] } {\n+    return\n+}\n+\n+if { ![runto break_here] } {\n+    untested \"could not run to break_here\"\n+    return\n+}\n+\n+# The various cases are:\n+#\n+#  - ns: flexible array member with no size\n+#  - zs: flexible array member with size 0 (GNU C extension that predates the\n+#    standardization of the feature, but widely supported)\n+#  - zso: zero-size only, a corner case where the array is the sole member of\n+#    the structure\n+\n+gdb_test \"python ns = gdb.parse_and_eval('ns').dereference()\"\n+gdb_test \"python zs = gdb.parse_and_eval('zs').dereference()\"\n+gdb_test \"python zso = gdb.parse_and_eval('zso').dereference()\"\n+\n+# Print the whole structure.\n+\n+gdb_test \"python print(ns)\" \"{n = 3, items = $hex}\"\n+gdb_test \"python print(zs)\" \"{n = 3, items = $hex}\"\n+gdb_test \"python print(zso)\" \"{items = $hex}\"\n+\n+# Print all items.\n+\n+gdb_test \"python print(ns\\['items'\\])\" \"$hex\"\n+gdb_test \"python print(ns\\['items'\\]\\[0\\])\" \"101\"\n+gdb_test \"python print(ns\\['items'\\]\\[1\\])\" \"102\"\n+gdb_test \"python print(ns\\['items'\\]\\[2\\])\" \"103\"\n+\n+gdb_test \"python print(zs\\['items'\\])\" \"$hex\"\n+gdb_test \"python print(zs\\['items'\\]\\[0\\])\" \"201\"\n+gdb_test \"python print(zs\\['items'\\]\\[1\\])\" \"202\"\n+gdb_test \"python print(zs\\['items'\\]\\[2\\])\" \"203\"\n+\n+gdb_test \"python print(zso\\['items'\\])\" \"$hex\"\n+gdb_test \"python print(zso\\['items'\\]\\[0\\])\" \"301\"\n+gdb_test \"python print(zso\\['items'\\]\\[1\\])\" \"302\"\n+gdb_test \"python print(zso\\['items'\\]\\[2\\])\" \"303\"\n+\n+# Check taking the address of array elements (how PR 28675 was originally\n+# reported).\n+\n+gdb_test \"python print(ns\\['items'\\] == ns\\['items'\\]\\[0\\].address)\" \"True\"\n+gdb_test \"python print(ns\\['items'\\]\\[0\\].address + 1 == ns\\['items'\\]\\[1\\].address)\" \"True\"\n+gdb_test \"python print(zs\\['items'\\] == zs\\['items'\\]\\[0\\].address)\" \"True\"\n+gdb_test \"python print(zs\\['items'\\]\\[0\\].address + 1 == zs\\['items'\\]\\[1\\].address)\" \"True\"\n+gdb_test \"python print(zso\\['items'\\] == zso\\['items'\\]\\[0\\].address)\" \"True\"\n+gdb_test \"python print(zso\\['items'\\]\\[0\\].address + 1 == zso\\['items'\\]\\[1\\].address)\" \"True\"\n+\n+# Verify the range attribute.  It looks a bit inconsistent that the high bound\n+# is sometimes 0, sometimes -1, but that's what GDB produces today, so that's\n+# what we test.\n+\n+gdb_test \"python print(ns\\['items'\\].type.range())\" \"\\\\(0, 0\\\\)\"\n+gdb_test \"python print(zs\\['items'\\].type.range())\" \"\\\\(0, -1\\\\)\"\n+gdb_test \"python print(zso\\['items'\\].type.range())\" \"\\\\(0, -1\\\\)\""
    }
  ]
}