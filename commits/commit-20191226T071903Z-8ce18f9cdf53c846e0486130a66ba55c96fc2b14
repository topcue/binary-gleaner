{
  "sha": "8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGNlMThmOWNkZjUzYzg0NmUwNDg2MTMwYTY2YmE1NWM5NmZjMmIxNA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-26T06:19:44Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-26T07:19:03Z"
    },
    "message": "Avoid ubsan bug complaining about &p->field\n\nI reckon it's quite OK to write &p->field in C when p might be NULL,\nand lots of old C programmers probably agree with me.  However, ubsan\ndisagrees and so do some people I respect.  I suspect C++ influence is\nto blame for the ubsan behaviour.  See\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=92634.  So far no one has\neducated me as to why I'm wrong to claim that there isn't anything in\nthe C standard to say that p->field is always (*p).field.  Note 79\ndoesn't quite do that because it doesn't cover null pointers.  If\nthere was such an equivalence then you could claim &p->field has a\nnull pointer reference when p is NULL, even though no C compiler would\never dereference p.\n\nAnyway, to silence ubsan I'm going to apply the following though I\nprefer to avoid casts when possible.  And I'm using (void *)\ndeliberately because this is C, not C++!\n\n\t* ldlang.c (lang_output_section_find_by_flags): Don't use &p->field\n\twhen p might be NULL.\n\t* ldelf.c (output_rel_find, ldelf_place_orphan): Likewise.\n\t(insert_os_after, lang_insert_orphan, lookup_name): Likewise.\n\t(strip_excluded_output_sections, lang_clear_os_map): Likewise.\n\t(lang_check, lang_for_each_input_file): Likewise.\n\t(lang_reset_memory_regions, find_replacements_insert_point): Likewise.\n\t(find_rescan_insertion, lang_propagate_lma_regions): Likewise.\n\t(lang_record_phdrs): Likewise.\n\t* emultempl/alphaelf.em (alpha_after_open): Likewise.\n\t* emultempl/mmo.em (mmo_place_orphan): Likewise.\n\t* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Likewise.\n\t* emultempl/pep.em (gld_${EMULATION_NAME}_place_orphan): Likewise.\n\t* emultempl/ppc32elf.em (ppc_after_check_relocs): Likewise.\n\t* emultempl/spuelf.em (spu_before_allocation): Likewise.\n\t(embedded_spu_file): Likewise.",
    "tree": {
      "sha": "00869e348fe72b0b9165e3858861254b9489fc37",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/00869e348fe72b0b9165e3858861254b9489fc37"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "100b122fc125bdf1fe768a3331a0cd413c3d1261",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/100b122fc125bdf1fe768a3331a0cd413c3d1261",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/100b122fc125bdf1fe768a3331a0cd413c3d1261"
    }
  ],
  "stats": {
    "total": 69,
    "additions": 44,
    "deletions": 25
  },
  "files": [
    {
      "sha": "f29913e9cf924adeb9ffb5f9acb567a780427d14",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
      "patch": "@@ -1,3 +1,22 @@\n+2019-12-26  Alan Modra  <amodra@gmail.com>\n+\n+\t* ldlang.c (lang_output_section_find_by_flags): Don't use &p->field\n+\twhen p might be NULL.\n+\t* ldelf.c (output_rel_find, ldelf_place_orphan): Likewise.\n+\t(insert_os_after, lang_insert_orphan, lookup_name): Likewise.\n+\t(strip_excluded_output_sections, lang_clear_os_map): Likewise.\n+\t(lang_check, lang_for_each_input_file): Likewise.\n+\t(lang_reset_memory_regions, find_replacements_insert_point): Likewise.\n+\t(find_rescan_insertion, lang_propagate_lma_regions): Likewise.\n+\t(lang_record_phdrs): Likewise.\n+\t* emultempl/alphaelf.em (alpha_after_open): Likewise.\n+\t* emultempl/mmo.em (mmo_place_orphan): Likewise.\n+\t* emultempl/pe.em (gld_${EMULATION_NAME}_place_orphan): Likewise.\n+\t* emultempl/pep.em (gld_${EMULATION_NAME}_place_orphan): Likewise.\n+\t* emultempl/ppc32elf.em (ppc_after_check_relocs): Likewise.\n+\t* emultempl/spuelf.em (spu_before_allocation): Likewise.\n+\t(embedded_spu_file): Likewise.\n+\n 2019-12-19  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/lib/ld-lib.exp (uses_genelf): Remove moxie."
    },
    {
      "sha": "db53d515edbb0d76a2dec66f0620b6b298f5022d",
      "filename": "ld/emultempl/alphaelf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/alphaelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/alphaelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/alphaelf.em?ref=8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
      "patch": "@@ -47,7 +47,7 @@ alpha_after_open (void)\n       lang_output_section_statement_type *plt_os[2];\n \n       num_plt = 0;\n-      for (os = &lang_os_list.head->output_section_statement;\n+      for (os = (void *) lang_os_list.head;\n \t   os != NULL;\n \t   os = os->next)\n \t{"
    },
    {
      "sha": "247d8a8c0bf3f0452773c33d29f0078d6b7c516e",
      "filename": "ld/emultempl/mmo.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/mmo.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/mmo.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/mmo.em?ref=8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
      "patch": "@@ -163,7 +163,7 @@ mmo_place_orphan (asection *s,\n \n \t  /* We have to find the oss before this one, so we can use that as\n \t     \"after\".  */\n-\t  for (lookup = &lang_os_list.head->output_section_statement;\n+\t  for (lookup = (void *) lang_os_list.head;\n \t       lookup != NULL && lookup->next != before;\n \t       lookup = lookup->next)\n \t    ;"
    },
    {
      "sha": "7e85ede3e2330f6fb4caf47ff1244bae7adb7021",
      "filename": "ld/emultempl/pe.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/pe.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/pe.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pe.em?ref=8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
      "patch": "@@ -2151,7 +2151,7 @@ gld_${EMULATION_NAME}_place_orphan (asection *s,\n \t\t\t\t\t\t       NULL);\n \t  if (after == NULL)\n \t    /* *ABS* is always the first output section statement.  */\n-\t    after = &lang_os_list.head->output_section_statement;\n+\t    after = (void *) lang_os_list.head;\n \t}\n \n       /* All sections in an executable must be aligned to a page boundary."
    },
    {
      "sha": "f9f6a8e98db4430c291c058614bf343cc5759782",
      "filename": "ld/emultempl/pep.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/pep.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/pep.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pep.em?ref=8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
      "patch": "@@ -1950,7 +1950,7 @@ gld_${EMULATION_NAME}_place_orphan (asection *s,\n \t\t\t\t\t\t       NULL);\n \t  if (after == NULL)\n \t    /* *ABS* is always the first output section statement.  */\n-\t    after = &lang_os_list.head->output_section_statement;\n+\t    after = (void *) lang_os_list.head;\n \t}\n \n       /* All sections in an executable must be aligned to a page boundary."
    },
    {
      "sha": "78a2eb1cfacb45e528ea5eaecf56b9c9ff4e6097",
      "filename": "ld/emultempl/ppc32elf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/ppc32elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/ppc32elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/ppc32elf.em?ref=8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
      "patch": "@@ -79,7 +79,7 @@ ppc_after_check_relocs (void)\n \n       num_got = 0;\n       num_plt = 0;\n-      for (os = &lang_os_list.head->output_section_statement;\n+      for (os = (void *) lang_os_list.head;\n \t   os != NULL;\n \t   os = os->next)\n \t{"
    },
    {
      "sha": "96ac86f3f24ab65014afde9305eeebd9c61544dc",
      "filename": "ld/emultempl/spuelf.em",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/spuelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/emultempl/spuelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/spuelf.em?ref=8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
      "patch": "@@ -290,7 +290,7 @@ spu_before_allocation (void)\n \t    }\n \n \t  /* Ensure alignment of overlay sections is sufficient.  */\n-\t  for (os = &lang_os_list.head->output_section_statement;\n+\t  for (os = (void *) lang_os_list.head;\n \t       os != NULL;\n \t       os = os->next)\n \t    if (os->bfd_section != NULL\n@@ -512,7 +512,7 @@ embedded_spu_file (lang_input_statement_type *entry, const char *flags)\n     return FALSE;\n   close (fd);\n \n-  for (search = &input_file_chain.head->input_statement;\n+  for (search = (void *) input_file_chain.head;\n        search != NULL;\n        search = search->next_real_file)\n     if (search->filename != NULL)"
    },
    {
      "sha": "19ec9085e6f0b968eb8bc1dcb83125308389aeb2",
      "filename": "ld/ldelf.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/ldelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/ldelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelf.c?ref=8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
      "patch": "@@ -1780,7 +1780,7 @@ output_rel_find (int isdyn, int rela)\n   lang_output_section_statement_type *last_rel = NULL;\n   lang_output_section_statement_type *last_rel_alloc = NULL;\n \n-  for (lookup = &lang_os_list.head->output_section_statement;\n+  for (lookup = (void *) lang_os_list.head;\n        lookup != NULL;\n        lookup = lookup->next)\n     {\n@@ -1952,7 +1952,7 @@ ldelf_place_orphan (asection *s, const char *secname, int constraint)\n     {\n       /* Find the output mbind section with the same type, attributes\n \t and sh_info field.  */\n-      for (os = &lang_os_list.head->output_section_statement;\n+      for (os = (void *) lang_os_list.head;\n \t   os != NULL;\n \t   os = os->next)\n \tif (os->bfd_section != NULL\n@@ -2129,7 +2129,7 @@ ldelf_place_orphan (asection *s, const char *secname, int constraint)\n \t\t\t\t\t       _bfd_elf_match_sections_by_type);\n       if (after == NULL)\n \t/* *ABS* is always the first output section statement.  */\n-\tafter = &lang_os_list.head->output_section_statement;\n+\tafter = (void *) lang_os_list.head;\n     }\n \n   return lang_insert_orphan (s, secname, constraint, after, place, NULL, NULL);"
    },
    {
      "sha": "1106ab145fd67ca9bb158cd806a84bd552a27f21",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8ce18f9cdf53c846e0486130a66ba55c96fc2b14/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=8ce18f9cdf53c846e0486130a66ba55c96fc2b14",
      "patch": "@@ -1552,7 +1552,7 @@ lang_output_section_find_by_flags (const asection *sec,\n \n   /* We know the first statement on this list is *ABS*.  May as well\n      skip it.  */\n-  first = &lang_os_list.head->output_section_statement;\n+  first = (void *) lang_os_list.head;\n   first = first->next;\n \n   /* First try for an exact match.  */\n@@ -1780,7 +1780,7 @@ insert_os_after (lang_output_section_statement_type *after)\n   lang_statement_union_type **assign = NULL;\n   bfd_boolean ignore_first;\n \n-  ignore_first = after == &lang_os_list.head->output_section_statement;\n+  ignore_first = after == (void *) lang_os_list.head;\n \n   for (where = &after->header.next;\n        *where != NULL;\n@@ -1904,7 +1904,7 @@ lang_insert_orphan (asection *s,\n       /* Shuffle the bfd section list to make the output file look\n \t neater.  This is really only cosmetic.  */\n       if (place->section == NULL\n-\t  && after != &lang_os_list.head->output_section_statement)\n+\t  && after != (void *) lang_os_list.head)\n \t{\n \t  asection *bfd_section = after->bfd_section;\n \n@@ -2846,7 +2846,7 @@ lookup_name (const char *name)\n {\n   lang_input_statement_type *search;\n \n-  for (search = &input_file_chain.head->input_statement;\n+  for (search = (void *) input_file_chain.head;\n        search != NULL;\n        search = search->next_real_file)\n     {\n@@ -4329,7 +4329,7 @@ strip_excluded_output_sections (void)\n       lang_reset_memory_regions ();\n     }\n \n-  for (os = &lang_os_list.head->output_section_statement;\n+  for (os = (void *) lang_os_list.head;\n        os != NULL;\n        os = os->next)\n     {\n@@ -4390,7 +4390,7 @@ lang_clear_os_map (void)\n   if (map_head_is_link_order)\n     return;\n \n-  for (os = &lang_os_list.head->output_section_statement;\n+  for (os = (void *) lang_os_list.head;\n        os != NULL;\n        os = os->next)\n     {\n@@ -6728,7 +6728,7 @@ lang_check (void)\n   bfd *input_bfd;\n   const bfd_arch_info_type *compatible;\n \n-  for (file = &file_chain.head->input_statement;\n+  for (file = (void *) file_chain.head;\n        file != NULL;\n        file = file->next)\n     {\n@@ -7070,7 +7070,7 @@ lang_for_each_input_file (void (*func) (lang_input_statement_type *))\n {\n   lang_input_statement_type *f;\n \n-  for (f = &input_file_chain.head->input_statement;\n+  for (f = (void *) input_file_chain.head;\n        f != NULL;\n        f = f->next_real_file)\n     if (f->flags.real)\n@@ -7196,7 +7196,7 @@ lang_reset_memory_regions (void)\n       p->last_os = NULL;\n     }\n \n-  for (os = &lang_os_list.head->output_section_statement;\n+  for (os = (void *) lang_os_list.head;\n        os != NULL;\n        os = os->next)\n     {\n@@ -7433,8 +7433,8 @@ static lang_input_statement_type *\n find_replacements_insert_point (bfd_boolean *before)\n {\n   lang_input_statement_type *claim1, *lastobject;\n-  lastobject = &input_file_chain.head->input_statement;\n-  for (claim1 = &file_chain.head->input_statement;\n+  lastobject = (void *) input_file_chain.head;\n+  for (claim1 = (void *) file_chain.head;\n        claim1 != NULL;\n        claim1 = claim1->next)\n     {\n@@ -7476,7 +7476,7 @@ find_rescan_insertion (lang_input_statement_type *add)\n      file chain if it is full of archive elements.  Archives don't\n      appear on the file chain, but if an element has been extracted\n      then their input_statement->next points at it.  */\n-  for (f = &input_file_chain.head->input_statement;\n+  for (f = (void *) input_file_chain.head;\n        f != NULL;\n        f = f->next_real_file)\n     {\n@@ -7609,7 +7609,7 @@ lang_propagate_lma_regions (void)\n {\n   lang_output_section_statement_type *os;\n \n-  for (os = &lang_os_list.head->output_section_statement;\n+  for (os = (void *) lang_os_list.head;\n        os != NULL;\n        os = os->next)\n     {\n@@ -8286,7 +8286,7 @@ lang_record_phdrs (void)\n       bfd_vma at;\n \n       c = 0;\n-      for (os = &lang_os_list.head->output_section_statement;\n+      for (os = (void *) lang_os_list.head;\n \t   os != NULL;\n \t   os = os->next)\n \t{\n@@ -8372,7 +8372,7 @@ lang_record_phdrs (void)\n   free (secs);\n \n   /* Make sure all the phdr assignments succeeded.  */\n-  for (os = &lang_os_list.head->output_section_statement;\n+  for (os = (void *) lang_os_list.head;\n        os != NULL;\n        os = os->next)\n     {"
    }
  ]
}