{
  "sha": "1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWIyY2I4ZTJlZTU3OGU2ODM4OWM5MjAxYmZkZmE4Y2Q2N2MzYjQxNg==",
  "commit": {
    "author": {
      "name": "Cl\u00e9ment Chigot",
      "email": "clement.chigot@atos.net",
      "date": "2021-03-11T10:08:19Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-12T12:17:33Z"
    },
    "message": "aix: implement TLS relocation for gas and ld\n\nAdd support for TLS in XCOFF. Amongst the things done by this commit:\n - Update XCOFF auxialiary header to match new version and allow TLS\n   sections.\n - Add TLS sections (.tdata and .tbss) support in gas and ld.\n - Add support for the TLS relocations in gas and ld.\n   Two different types BFD_RELOC are created for PPC and PPC64 as\n   the size is a pointer, thus distinct in 32 or 64bit.\n\nThe addresses given by ld to .tdata and .tbss is a bit special. In\nXCOFF, these addresses are actually offsets from the TLS pointer\ncomputed at runtime. AIX assembly and linker does the same. In\ntop of that, the .tdata must be before .data (this is mandatory for AIX\nloader). Thus, the aix ld script is recomputing \".\" before .data to restore\nits original value. There might be a simpler way, but this one is working.\n\nOptimisation linked to TLS relocations aren't yet implemented.\n\nbfd/\n\t* reloc.c (BFD_RELOC_PPC_TLS_LE, BFD_RELOC_PPC_TLS_IE,\n\tBFD_RELOC_PPC_TLS_M, BFD_RELOC_PPC_TLS_ML, BFD_RELOC_PPC64_TLS_GD,\n\tBFD_RELOC_PPC64_TLS_LD, BFD_RELOC_PPC64_TLS_LE,\n\tBFD_RELOC_PPC64_TLS_IE, BFD_RELOC_PPC64_TLS_M,\n\tBFD_RELOC_PPC64_TLS_ML): New relocations.\n\t* bfd-in2.h: Regenerate.\n\t* libbfd.h: Regenerate.\n\t* coff-rs6000.c (xcoff_calculate_relocation): Call\n\txcoff_reloc_type_tls for TLS relocations.\n\t(xcoff_howto_table): Implement TLS relocations.\n\t(_bfd_xcoff_reloc_type_lookup): Add cases TLS relocations.\n\t(xcoff_reloc_type_tls): New function.\n\t* coff64-rs6000.c (xcoff_calculate_relocation): Likewise.\n\t(xcoff_howto_table): Likewise.\n\t(_bfd_xcoff_reloc_type_lookup): Likewise.\n\t* coffcode.h (sec_to_styp_flags): Handle TLS sections.\n\t(styp_to_sec_flags): Likewise.\n\t(coff_compute_section_file_positions): Avoid file offset\n\toptimisation for .data when the previous section is .tdata.\n\t(coff_write_object_contents): Handle TLS sections.\n\t* coffswap.h (coff_swap_aouthdr_out): Add support for\n\tnew fields in aouthdr.\n\t* libxcoff.h (xcoff_reloc_type_tls): Add prototype.\n\t* xcofflink.c (xcoff_link_add_symbols): Handle XMC_UL.\n\t(xcoff_need_ldrel_p): Add cases for TLS relocations.\n\t(xcoff_create_ldrel): Add l_symndx for TLS sections.\ngas/\n\t* config/tc-ppc.c (ppc_xcoff_text_section, ppc_xcoff_data_section,\n\t(ppc_xcoff_bss_section, ppc_xcoff_tdata_section,\n\t(ppc_xcoff_tbss_section): New variables.\n\t(ppc_text_subsegment, ppc_text_csects, ppc_data_subgments,\n\t(ppc_data_csects): Removed.\n\t(ppc_xcoff_section_is_initialized, ppc_init_xcoff_section,\n\tppc_xcoff_parse_cons): New functions.\n\t(md_being): Initialize XCOFF sections.\n\t(ppc_xcoff_suffix): Add support for TLS relocations\n\t(fixup_size, md_apply_fix): Add support for new BFD_RELOC.\n\t(ppc_change_csect): Handle XMC_TL, XMC_UL.  Correctly, add XMC_BS\n\tto .bss section.  Handle new XCOFF section variables.\n\t(ppc_comm): Likewise.\n\t(ppc_toc): Likewise.\n\t(ppc_symbol_new_hook): Likewise.\n\t(ppc_frob_symbol): Likewise.\n\t(ppc_fix_adjustable): Add tbss support.\n\t* config/tc-ppc.h (TC_PARSE_CONS_EXPRESSION): New define.\n\t(ppc_xcoff_parse_cons): Add prototype.\n\t(struct ppc_xcoff_section): New structure.\nld/\n\t* emultempl/aix.em: Ensure .tdata section is removed\n\tif empty, even with -r flag.\n\t* scripttempl/aix.sc: Handle TLS sections.\n\t* testsuite/ld-powerpc/aix52.exp: Add new tests.\n\t* testsuite/ld-powerpc/aix-tls-reloc-32.d: New test.\n\t* testsuite/ld-powerpc/aix-tls-reloc-64.d: New test.\n\t* testsuite/ld-powerpc/aix-tls-reloc.ex: New test.\n\t* testsuite/ld-powerpc/aix-tls-reloc.s: New test.\n\t* testsuite/ld-powerpc/aix-tls-section-32.d: New test.\n\t* testsuite/ld-powerpc/aix-tls-section-64.d: New test.\n\t* testsuite/ld-powerpc/aix-tls-section.ex: New test.\n\t* testsuite/ld-powerpc/aix-tls-section.s: New test.\ninclude/\n\t* coff/internal.h (struct internal_aouthdr): Add new fields.\n\t* coff/rs6000.h (AOUTHDR\u00c3): Add new fields.\n\t* coff/rs6k64.h (struct external_filehdr): Likewise.\n\t* coff/xcoff.h (_TDATA), _TBSS): New defines\n\t(RS6K_AOUTHDR_TLS_LE, RS6K_AOUTHDR_RAS, RS6K_AOUTHDR_ALGNTDATA,\n\tRS6K_AOUTHDR_SHR_SYMTAB, RS6K_AOUTHDR_FORK_POLICY,\n\tRS6K_AOUTHDR_FORK_COR): New defines.\n\t(XMC_TU): Removed.\n\t(XMC_UL): New define.",
    "tree": {
      "sha": "9eb377958bf1f1c763cca583f314a8dc9d9249c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9eb377958bf1f1c763cca583f314a8dc9d9249c6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/comments",
  "author": {
    "login": "Helflym",
    "id": 23002587,
    "node_id": "MDQ6VXNlcjIzMDAyNTg3",
    "avatar_url": "https://avatars.githubusercontent.com/u/23002587?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Helflym",
    "html_url": "https://github.com/Helflym",
    "followers_url": "https://api.github.com/users/Helflym/followers",
    "following_url": "https://api.github.com/users/Helflym/following{/other_user}",
    "gists_url": "https://api.github.com/users/Helflym/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Helflym/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Helflym/subscriptions",
    "organizations_url": "https://api.github.com/users/Helflym/orgs",
    "repos_url": "https://api.github.com/users/Helflym/repos",
    "events_url": "https://api.github.com/users/Helflym/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Helflym/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a403be0c1b4540e22c8c608ea0bfecbf0f85e51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a403be0c1b4540e22c8c608ea0bfecbf0f85e51",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a403be0c1b4540e22c8c608ea0bfecbf0f85e51"
    }
  ],
  "stats": {
    "total": 1172,
    "additions": 1039,
    "deletions": 133
  },
  "files": [
    {
      "sha": "6d61abeb74b91785d0b128c9159b9107519a11a2",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -1,3 +1,32 @@\n+2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* reloc.c (BFD_RELOC_PPC_TLS_LE, BFD_RELOC_PPC_TLS_IE,\n+\tBFD_RELOC_PPC_TLS_M, BFD_RELOC_PPC_TLS_ML, BFD_RELOC_PPC64_TLS_GD,\n+\tBFD_RELOC_PPC64_TLS_LD, BFD_RELOC_PPC64_TLS_LE,\n+\tBFD_RELOC_PPC64_TLS_IE, BFD_RELOC_PPC64_TLS_M,\n+\tBFD_RELOC_PPC64_TLS_ML): New relocations.\n+\t* bfd-in2.h: Regenerate.\n+\t* libbfd.h: Regenerate.\n+\t* coff-rs6000.c (xcoff_calculate_relocation): Call\n+\txcoff_reloc_type_tls for TLS relocations.\n+\t(xcoff_howto_table): Implement TLS relocations.\n+\t(_bfd_xcoff_reloc_type_lookup): Add cases TLS relocations.\n+\t(xcoff_reloc_type_tls): New function.\n+\t* coff64-rs6000.c (xcoff_calculate_relocation): Likewise.\n+\t(xcoff_howto_table): Likewise.\n+\t(_bfd_xcoff_reloc_type_lookup): Likewise.\n+\t* coffcode.h (sec_to_styp_flags): Handle TLS sections.\n+\t(styp_to_sec_flags): Likewise.\n+\t(coff_compute_section_file_positions): Avoid file offset\n+\toptimisation for .data when the previous section is .tdata.\n+\t(coff_write_object_contents): Handle TLS sections.\n+\t* coffswap.h (coff_swap_aouthdr_out): Add support for\n+\tnew fields in aouthdr.\n+\t* libxcoff.h (xcoff_reloc_type_tls): Add prototype.\n+\t* xcofflink.c (xcoff_link_add_symbols): Handle XMC_UL.\n+\t(xcoff_need_ldrel_p): Add cases for TLS relocations.\n+\t(xcoff_create_ldrel): Add l_symndx for TLS sections.\n+\n 2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n \n \t* reloc.c (BFD_RELOC_PPC_TOC16_HI, BFD_RELOC_PPC_TOC16_LO):"
    },
    {
      "sha": "54c1c9a6b6443b503e93d231637b043d3b9fc542",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -3003,6 +3003,10 @@ instruction.  */\n   BFD_RELOC_PPC_TLS,\n   BFD_RELOC_PPC_TLSGD,\n   BFD_RELOC_PPC_TLSLD,\n+  BFD_RELOC_PPC_TLSLE,\n+  BFD_RELOC_PPC_TLSIE,\n+  BFD_RELOC_PPC_TLSM,\n+  BFD_RELOC_PPC_TLSML,\n   BFD_RELOC_PPC_DTPMOD,\n   BFD_RELOC_PPC_TPREL16,\n   BFD_RELOC_PPC_TPREL16_LO,\n@@ -3030,6 +3034,12 @@ instruction.  */\n   BFD_RELOC_PPC_GOT_DTPREL16_LO,\n   BFD_RELOC_PPC_GOT_DTPREL16_HI,\n   BFD_RELOC_PPC_GOT_DTPREL16_HA,\n+  BFD_RELOC_PPC64_TLSGD,\n+  BFD_RELOC_PPC64_TLSLD,\n+  BFD_RELOC_PPC64_TLSLE,\n+  BFD_RELOC_PPC64_TLSIE,\n+  BFD_RELOC_PPC64_TLSM,\n+  BFD_RELOC_PPC64_TLSML,\n   BFD_RELOC_PPC64_TPREL16_DS,\n   BFD_RELOC_PPC64_TPREL16_LO_DS,\n   BFD_RELOC_PPC64_TPREL16_HIGH,"
    },
    {
      "sha": "a29cf5b958d1f8b4e04f3df32d7eaad5cb81c6a9",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 198,
      "deletions": 19,
      "changes": 217,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -190,12 +190,12 @@ xcoff_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION] =\n   xcoff_reloc_type_fail, /*           (0x1d) */\n   xcoff_reloc_type_fail, /*           (0x1e) */\n   xcoff_reloc_type_fail, /*           (0x1f) */\n-  xcoff_reloc_type_fail, /* R_TLS     (0x20) */\n-  xcoff_reloc_type_fail, /* R_TLS_IE  (0x21) */\n-  xcoff_reloc_type_fail, /* R_TLS_LD  (0x22) */\n-  xcoff_reloc_type_fail, /* R_TLS_LE  (0x23) */\n-  xcoff_reloc_type_fail, /* R_TLSM    (0x24) */\n-  xcoff_reloc_type_fail, /* R_TLSML   (0x25) */\n+  xcoff_reloc_type_tls,  /* R_TLS     (0x20) */\n+  xcoff_reloc_type_tls,  /* R_TLS_IE  (0x21) */\n+  xcoff_reloc_type_tls,  /* R_TLS_LD  (0x22) */\n+  xcoff_reloc_type_tls,  /* R_TLS_LE  (0x23) */\n+  xcoff_reloc_type_tls,  /* R_TLSM    (0x24) */\n+  xcoff_reloc_type_tls,  /* R_TLSML   (0x25) */\n   xcoff_reloc_type_fail, /*           (0x26) */\n   xcoff_reloc_type_fail, /*           (0x27) */\n   xcoff_reloc_type_fail, /*           (0x28) */\n@@ -1064,22 +1064,95 @@ reloc_howto_type xcoff_howto_table[] =\n   EMPTY_HOWTO (0x1f),\n \n   /* 0x20: General-dynamic TLS relocation.  */\n-  EMPTY_HOWTO (R_TLS),\n+  HOWTO (R_TLS,\t\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLS\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t 0xffffffff,\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x21: Initial-exec TLS relocation.  */\n-  EMPTY_HOWTO (R_TLS_IE),\n+  HOWTO (R_TLS_IE,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLS_IE\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t 0xffffffff,\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x22: Local-dynamic TLS relocation.  */\n-  EMPTY_HOWTO (R_TLS_LD),\n+  HOWTO (R_TLS_LD,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLS_LD\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t 0xffffffff,\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x23: Local-exec TLS relocation.  */\n-  EMPTY_HOWTO (R_TLS_LE),\n+  HOWTO (R_TLS_LE,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLS_LE\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t 0xffffffff,\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x24: TLS relocation.  */\n-  EMPTY_HOWTO(R_TLSM),\n+  HOWTO (R_TLSM,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLSM\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t 0xffffffff,\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n+\n \n   /* 0x25: TLS module relocation.  */\n-  EMPTY_HOWTO(R_TLSML),\n+  HOWTO (R_TLSML,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLSM\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t 0xffffffff,\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n \n   EMPTY_HOWTO(0x26),\n   EMPTY_HOWTO(0x27),\n@@ -1180,6 +1253,18 @@ _bfd_xcoff_reloc_type_lookup (bfd *abfd ATTRIBUTE_UNUSED,\n       return &xcoff_howto_table[0];\n     case BFD_RELOC_NONE:\n       return &xcoff_howto_table[0xf];\n+    case BFD_RELOC_PPC_TLSGD:\n+      return &xcoff_howto_table[0x20];\n+    case BFD_RELOC_PPC_TLSIE:\n+      return &xcoff_howto_table[0x21];\n+    case BFD_RELOC_PPC_TLSLD:\n+      return &xcoff_howto_table[0x22];\n+    case BFD_RELOC_PPC_TLSLE:\n+      return &xcoff_howto_table[0x23];\n+    case BFD_RELOC_PPC_TLSM:\n+      return &xcoff_howto_table[0x24];\n+    case BFD_RELOC_PPC_TLSML:\n+      return &xcoff_howto_table[0x25];\n     default:\n       return NULL;\n     }\n@@ -3127,6 +3212,88 @@ xcoff_reloc_type_crel (bfd *input_bfd ATTRIBUTE_UNUSED,\n   return TRUE;\n }\n \n+bfd_boolean\n+xcoff_reloc_type_tls (bfd *input_bfd ATTRIBUTE_UNUSED,\n+\t\t      asection *input_section ATTRIBUTE_UNUSED,\n+\t\t      bfd *output_bfd ATTRIBUTE_UNUSED,\n+\t\t      struct internal_reloc *rel ATTRIBUTE_UNUSED,\n+\t\t      struct internal_syment *sym ATTRIBUTE_UNUSED,\n+\t\t      struct reloc_howto_struct *howto,\n+\t\t      bfd_vma val,\n+\t\t      bfd_vma addend,\n+\t\t      bfd_vma *relocation,\n+\t\t      bfd_byte *contents ATTRIBUTE_UNUSED)\n+{\n+  struct xcoff_link_hash_entry *h;\n+\n+  if (0 > rel->r_symndx)\n+    return FALSE;\n+\n+  h = obj_xcoff_sym_hashes (input_bfd)[rel->r_symndx];\n+\n+  /* FIXME: R_TLSML is targeting a internal TOC symbol, which will\n+     make the following checks failing. It should be moved with\n+     R_TLSM bellow once it works.  */\n+  if (howto->type == R_TLSML)\n+    {\n+      *relocation = 0;\n+      return TRUE;\n+    }\n+\n+  /* FIXME: h is sometimes null, if the TLS symbol is not exported.  */\n+  if (!h)\n+    {\n+      _bfd_error_handler\n+\t(_(\"%pB: TLS relocation at (0x%\" BFD_VMA_FMT \"x) over \"\n+\t   \"internal symbols (C_HIDEXT) not yet possible\\n\"),\n+\t input_bfd, rel->r_vaddr);\n+      return FALSE;\n+    }\n+\n+\n+  /* TLS relocations must target a TLS symbol.  */\n+  if (h->smclas != XMC_TL && h->smclas != XMC_UL)\n+    {\n+      _bfd_error_handler\n+\t(_(\"%pB: TLS relocation at (0x%\" BFD_VMA_FMT \"x) over \"\n+\t   \"non-TLS symbol %s (0x%x)\\n\"),\n+\t input_bfd, rel->r_vaddr, h->root.root.string, h->smclas);\n+      return FALSE;\n+    }\n+\n+  /* Local TLS relocations must target a local symbol, ie\n+     non-imported. */\n+  if ((rel->r_type == R_TLS_LD || rel->r_type == R_TLS_LE)\n+      && (((h->flags & XCOFF_DEF_REGULAR) == 0\n+       && (h->flags & XCOFF_DEF_DYNAMIC) != 0)\n+\t  || (h->flags & XCOFF_IMPORT) != 0))\n+    {\n+      _bfd_error_handler\n+\t(_(\"%pB: TLS local relocation at (0x%\" BFD_VMA_FMT \"x) over \"\n+\t   \"imported symbol %s\\n\"),\n+\t input_bfd, rel->r_vaddr, h->root.root.string);\n+      return FALSE;\n+    }\n+\n+  /* R_TLSM and R_TLSML are relocations used by the loader.\n+     The value must be 0.\n+     FIXME: move R_TLSML here.  */\n+  if (howto->type == R_TLSM)\n+    {\n+      *relocation = 0;\n+      return TRUE;\n+    }\n+\n+  /* Other TLS relocations aims to put offsets from TLS pointers\n+     starting at -0x7c00 (or -0x7800 in XCOFF64).  It becomes a\n+     simple R_POS relocation as long as .tdata and .tbss addresses\n+     start at the same value. This is done in aix ld scripts.\n+     TODO: implement optimization when tls size is < 62K.  */\n+  *relocation = val + addend;\n+\n+  return TRUE;\n+}\n+\n static bfd_boolean\n xcoff_complain_overflow_dont_func (bfd *input_bfd ATTRIBUTE_UNUSED,\n \t\t\t\t   bfd_vma val ATTRIBUTE_UNUSED,\n@@ -3335,13 +3502,6 @@ xcoff_complain_overflow_unsigned_func (bfd *input_bfd,\n    quite figure out when this is useful.  These relocs are\n    not defined by the PowerOpen ABI.\n \n-   R_TLS\n-   R_TLS_IE\n-   R_TLS_LD\n-   R_TLSLE\n-\n-   Not yet implemented.\n-\n    Supported r_type's\n \n    R_POS:\n@@ -3437,6 +3597,25 @@ xcoff_complain_overflow_unsigned_func (bfd *input_bfd,\n    fixed address which may be modified to a relative branch.\n    The PowerOpen ABI does not define this relocation type.\n \n+   R_TLS:\n+   Thread-local storage relocation using general-dynamic\n+   model.\n+\n+   R_TLS_IE:\n+   Thread-local storage relocation using initial-exec model.\n+\n+   R_TLS_LD:\n+   Thread-local storage relocation using local-dynamic model.\n+\n+   R_TLS_LE:\n+   Thread-local storage relocation using local-exec model.\n+\n+   R_TLS:\n+   Tread-local storage relocation used by the loader.\n+\n+   R_TLSM:\n+   Tread-local storage relocation used by the loader.\n+\n    R_TOCU:\n    Upper TOC relative relocation. The value is the\n    high-order 16 bit of a TOC relative relocation."
    },
    {
      "sha": "f8e68498a399e0b792bad9e60dedb0c2e5deddf2",
      "filename": "bfd/coff64-rs6000.c",
      "status": "modified",
      "additions": 96,
      "deletions": 13,
      "changes": 109,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/coff64-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/coff64-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff64-rs6000.c?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -212,12 +212,12 @@ xcoff64_calculate_relocation[XCOFF_MAX_CALCULATE_RELOCATION] =\n   xcoff_reloc_type_fail, /*           (0x1d) */\n   xcoff_reloc_type_fail, /*           (0x1e) */\n   xcoff_reloc_type_fail, /*           (0x1f) */\n-  xcoff_reloc_type_fail, /* R_TLS     (0x20) */\n-  xcoff_reloc_type_fail, /* R_TLS_IE  (0x21) */\n-  xcoff_reloc_type_fail, /* R_TLS_LD  (0x22) */\n-  xcoff_reloc_type_fail, /* R_TLS_LE  (0x23) */\n-  xcoff_reloc_type_fail, /* R_TLSM    (0x24) */\n-  xcoff_reloc_type_fail, /* R_TLSML   (0x25) */\n+  xcoff_reloc_type_tls,  /* R_TLS     (0x20) */\n+  xcoff_reloc_type_tls,  /* R_TLS_IE  (0x21) */\n+  xcoff_reloc_type_tls,  /* R_TLS_LD  (0x22) */\n+  xcoff_reloc_type_tls,  /* R_TLS_LE  (0x23) */\n+  xcoff_reloc_type_tls,  /* R_TLSM    (0x24) */\n+  xcoff_reloc_type_tls,  /* R_TLSML   (0x25) */\n   xcoff_reloc_type_fail, /*           (0x26) */\n   xcoff_reloc_type_fail, /*           (0x27) */\n   xcoff_reloc_type_fail, /*           (0x28) */\n@@ -1230,24 +1230,95 @@ reloc_howto_type xcoff64_howto_table[] =\n \t 0xffff,\t\t/* dst_mask */\n \t FALSE),\t\t/* pcrel_offset */\n \n-\n   /* 0x20: General-dynamic TLS relocation.  */\n-  EMPTY_HOWTO (R_TLS),\n+  HOWTO (R_TLS,\t\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLS\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t MINUS_ONE,\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x21: Initial-exec TLS relocation.  */\n-  EMPTY_HOWTO (R_TLS_IE),\n+  HOWTO (R_TLS_IE,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLS_IE\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t MINUS_ONE,\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x22: Local-dynamic TLS relocation.  */\n-  EMPTY_HOWTO (R_TLS_LD),\n+  HOWTO (R_TLS_LD,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLS_LD\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t MINUS_ONE,\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x23: Local-exec TLS relocation.  */\n-  EMPTY_HOWTO (R_TLS_LE),\n+  HOWTO (R_TLS_LE,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLS_LE\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t MINUS_ONE,\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x24: TLS relocation.  */\n-  EMPTY_HOWTO(R_TLSM),\n+  HOWTO (R_TLSM,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLSM\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t MINUS_ONE,\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n \n   /* 0x25: TLS module relocation.  */\n-  EMPTY_HOWTO(R_TLSML),\n+  HOWTO (R_TLSML,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t 0,\t\t\t/* special_function */\n+\t \"R_TLSM\",\t\t/* name */\n+\t TRUE,\t\t\t/* partial_inplace */\n+\t MINUS_ONE,\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n \n   EMPTY_HOWTO(0x26),\n   EMPTY_HOWTO(0x27),\n@@ -1355,6 +1426,18 @@ xcoff64_reloc_type_lookup (bfd *abfd ATTRIBUTE_UNUSED,\n       return &xcoff64_howto_table[0];\n     case BFD_RELOC_NONE:\n       return &xcoff64_howto_table[0xf];\n+    case BFD_RELOC_PPC64_TLSGD:\n+      return &xcoff64_howto_table[0x20];\n+    case BFD_RELOC_PPC64_TLSIE:\n+      return &xcoff64_howto_table[0x21];\n+    case BFD_RELOC_PPC64_TLSLD:\n+      return &xcoff64_howto_table[0x22];\n+    case BFD_RELOC_PPC64_TLSLE:\n+      return &xcoff64_howto_table[0x23];\n+    case BFD_RELOC_PPC64_TLSM:\n+      return &xcoff64_howto_table[0x24];\n+    case BFD_RELOC_PPC64_TLSML:\n+      return &xcoff64_howto_table[0x25];\n     default:\n       return NULL;\n     }"
    },
    {
      "sha": "bcd34d469b63435a3868cdbc1a0abc4525f9b5c3",
      "filename": "bfd/coffcode.h",
      "status": "modified",
      "additions": 65,
      "deletions": 2,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/coffcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/coffcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffcode.h?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -548,6 +548,14 @@ sec_to_styp_flags (const char *sec_name, flagword sec_flags)\n     }\n #endif\n #ifdef RS6000COFF_C\n+  else if (!strcmp (sec_name, _TDATA))\n+    {\n+      styp_flags = STYP_TDATA;\n+    }\n+  else if (!strcmp (sec_name, _TBSS))\n+    {\n+      styp_flags = STYP_TBSS;\n+    }\n   else if (!strcmp (sec_name, _PAD))\n     {\n       styp_flags = STYP_PAD;\n@@ -787,6 +795,22 @@ styp_to_sec_flags (bfd *abfd,\n   else if (styp_flags & STYP_PAD)\n     sec_flags = 0;\n #ifdef RS6000COFF_C\n+  else if (styp_flags & STYP_TDATA)\n+    {\n+      if (sec_flags & SEC_NEVER_LOAD)\n+\tsec_flags |= SEC_DATA | SEC_THREAD_LOCAL | SEC_COFF_SHARED_LIBRARY;\n+      else\n+\tsec_flags |= SEC_DATA | SEC_THREAD_LOCAL | SEC_LOAD | SEC_ALLOC;\n+    }\n+  else if (styp_flags & STYP_TBSS)\n+    {\n+#ifdef BSS_NOLOAD_IS_SHARED_LIBRARY\n+      if (sec_flags & SEC_NEVER_LOAD)\n+\tsec_flags |= SEC_ALLOC | SEC_THREAD_LOCAL | SEC_COFF_SHARED_LIBRARY;\n+      else\n+#endif\n+\tsec_flags |= SEC_ALLOC | SEC_THREAD_LOCAL;\n+    }\n   else if (styp_flags & STYP_EXCEPT)\n     sec_flags |= SEC_LOAD;\n   else if (styp_flags & STYP_LOADER)\n@@ -3168,10 +3192,15 @@ coff_compute_section_file_positions (bfd * abfd)\n \n \t     0 .text\t     000054cc  10000128\t 10000128  00000128  2**5\n \t\t\t     CONTENTS, ALLOC, LOAD, CODE\n+\n+\t     Don't perform the above tweak if the previous one is .tdata,\n+\t     as it will increase the memory allocated for every threads\n+\t     created and not just improve performances with gdb.\n \t  */\n \n-\t  if (!strcmp (current->name, _TEXT)\n-\t      || !strcmp (current->name, _DATA))\n+\t  if ((!strcmp (current->name, _TEXT)\n+\t       || !strcmp (current->name, _DATA))\n+\t      && (previous == NULL || strcmp(previous->name, _TDATA)))\n \t    {\n \t      bfd_vma align = 4096;\n \t      bfd_vma sofar_off = sofar % align;\n@@ -3381,6 +3410,10 @@ coff_write_object_contents (bfd * abfd)\n   asection *text_sec = NULL;\n   asection *data_sec = NULL;\n   asection *bss_sec = NULL;\n+#ifdef RS6000COFF_C\n+  asection *tdata_sec = NULL;\n+  asection *tbss_sec = NULL;\n+#endif\n   struct internal_filehdr internal_f;\n   struct internal_aouthdr internal_a;\n #ifdef COFF_LONG_SECTION_NAMES\n@@ -3603,6 +3636,13 @@ coff_write_object_contents (bfd * abfd)\n \tdata_sec = current;\n       else if (!strcmp (current->name, _BSS))\n \tbss_sec = current;\n+#ifdef RS6000COFF_C\n+      else if (!strcmp (current->name, _TDATA))\n+\ttdata_sec = current;\n+      else if (!strcmp (current->name, _TBSS))\n+\ttbss_sec = current;\n+#endif\n+\n \n #ifdef COFF_ENCODE_ALIGNMENT\n       COFF_ENCODE_ALIGNMENT(section, current->alignment_power);\n@@ -4041,6 +4081,29 @@ coff_write_object_contents (bfd * abfd)\n       else\n \tinternal_a.o_snbss = 0;\n \n+      if (tdata_sec != NULL)\n+\t{\n+\t  internal_a.o_sntdata = tdata_sec->target_index;\n+\t  /* TODO: o_flags should be set to RS6K_AOUTHDR_TLS_LE\n+\t     if there is at least one R_TLS_LE relocations.  */\n+\t  internal_a.o_flags = 0;\n+#ifdef XCOFF64\n+\t  internal_a.o_x64flags = 0;\n+#endif\n+\t}\n+      else\n+\t{\n+\t  internal_a.o_sntdata = 0;\n+\t  internal_a.o_flags = 0;\n+#ifdef XCOFF64\n+\t  internal_a.o_x64flags = 0;\n+#endif\n+\t}\n+      if (tbss_sec != NULL)\n+\t  internal_a.o_sntbss = tbss_sec->target_index;\n+      else\n+\t  internal_a.o_sntbss = 0;\n+\n       toc = xcoff_data (abfd)->toc;\n       internal_a.o_toc = toc;\n       internal_a.o_sntoc = xcoff_data (abfd)->sntoc;"
    },
    {
      "sha": "63a0026a66998df66cf3cf0d2436e0ef8a555b47",
      "filename": "bfd/coffswap.h",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/coffswap.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/coffswap.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffswap.h?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -695,9 +695,16 @@ coff_swap_aouthdr_out (bfd * abfd, void * in, void * out)\n   H_PUT_32 (abfd, aouthdr_in->o_maxstack, aouthdr_out->o_maxstack);\n   H_PUT_32 (abfd, aouthdr_in->o_maxdata, aouthdr_out->o_maxdata);\n #endif\n-  memset (aouthdr_out->o_resv2, 0, sizeof aouthdr_out->o_resv2);\n+  /* TODO: set o_*psize dynamically */\n+  H_PUT_8 (abfd, 0, aouthdr_out->o_textpsize);\n+  H_PUT_8 (abfd, 0, aouthdr_out->o_datapsize);\n+  H_PUT_8 (abfd, 0, aouthdr_out->o_stackpsize);\n+  H_PUT_8 (abfd, aouthdr_in->o_flags, aouthdr_out->o_flags);\n+  H_PUT_16 (abfd, aouthdr_in->o_sntdata, aouthdr_out->o_sntdata);\n+  H_PUT_16 (abfd, aouthdr_in->o_sntbss, aouthdr_out->o_sntbss);\n+  H_PUT_32 (abfd, 0, aouthdr_out->o_debugger);\n #ifdef XCOFF64\n-  memset (aouthdr_out->o_debugger, 0, sizeof aouthdr_out->o_debugger);\n+  H_PUT_16 (abfd, aouthdr_in->o_x64flags, aouthdr_out->o_x64flags);\n   memset (aouthdr_out->o_resv3, 0, sizeof aouthdr_out->o_resv3);\n #endif\n #endif"
    },
    {
      "sha": "9cb079e8302f0a827126f92eabd8820b10587005",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -1564,6 +1564,10 @@ static const char *const bfd_reloc_code_real_names[] = { \"@@uninitialized@@\",\n   \"BFD_RELOC_PPC_TLS\",\n   \"BFD_RELOC_PPC_TLSGD\",\n   \"BFD_RELOC_PPC_TLSLD\",\n+  \"BFD_RELOC_PPC_TLSLE\",\n+  \"BFD_RELOC_PPC_TLSIE\",\n+  \"BFD_RELOC_PPC_TLSM\",\n+  \"BFD_RELOC_PPC_TLSML\",\n   \"BFD_RELOC_PPC_DTPMOD\",\n   \"BFD_RELOC_PPC_TPREL16\",\n   \"BFD_RELOC_PPC_TPREL16_LO\",\n@@ -1591,6 +1595,12 @@ static const char *const bfd_reloc_code_real_names[] = { \"@@uninitialized@@\",\n   \"BFD_RELOC_PPC_GOT_DTPREL16_LO\",\n   \"BFD_RELOC_PPC_GOT_DTPREL16_HI\",\n   \"BFD_RELOC_PPC_GOT_DTPREL16_HA\",\n+  \"BFD_RELOC_PPC64_TLSGD\",\n+  \"BFD_RELOC_PPC64_TLSLD\",\n+  \"BFD_RELOC_PPC64_TLSLE\",\n+  \"BFD_RELOC_PPC64_TLSIE\",\n+  \"BFD_RELOC_PPC64_TLSM\",\n+  \"BFD_RELOC_PPC64_TLSML\",\n   \"BFD_RELOC_PPC64_TPREL16_DS\",\n   \"BFD_RELOC_PPC64_TPREL16_LO_DS\",\n   \"BFD_RELOC_PPC64_TPREL16_HIGH\","
    },
    {
      "sha": "bffdee2559cefcfed5ff7571a79b09ce9ed68ec2",
      "filename": "bfd/libxcoff.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/libxcoff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/libxcoff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libxcoff.h?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -234,6 +234,7 @@ extern xcoff_reloc_function xcoff_reloc_type_rel;\n extern xcoff_reloc_function xcoff_reloc_type_toc;\n extern xcoff_reloc_function xcoff_reloc_type_ba;\n extern xcoff_reloc_function xcoff_reloc_type_crel;\n+extern xcoff_reloc_function xcoff_reloc_type_tls;\n \n /* Structure to describe dwarf sections.\n    Useful to convert from XCOFF section name to flag and vice-versa."
    },
    {
      "sha": "6fae17760f0738cf60d43ec3e8ceb3fd651ee024",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -2943,6 +2943,14 @@ ENUMX\n   BFD_RELOC_PPC_TLSGD\n ENUMX\n   BFD_RELOC_PPC_TLSLD\n+ENUMX\n+  BFD_RELOC_PPC_TLSLE\n+ENUMX\n+  BFD_RELOC_PPC_TLSIE\n+ENUMX\n+  BFD_RELOC_PPC_TLSM\n+ENUMX\n+  BFD_RELOC_PPC_TLSML\n ENUMX\n   BFD_RELOC_PPC_DTPMOD\n ENUMX\n@@ -2997,6 +3005,18 @@ ENUMX\n   BFD_RELOC_PPC_GOT_DTPREL16_HI\n ENUMX\n   BFD_RELOC_PPC_GOT_DTPREL16_HA\n+ENUMX\n+  BFD_RELOC_PPC64_TLSGD\n+ENUMX\n+  BFD_RELOC_PPC64_TLSLD\n+ENUMX\n+  BFD_RELOC_PPC64_TLSLE\n+ENUMX\n+  BFD_RELOC_PPC64_TLSIE\n+ENUMX\n+  BFD_RELOC_PPC64_TLSM\n+ENUMX\n+  BFD_RELOC_PPC64_TLSML\n ENUMX\n   BFD_RELOC_PPC64_TPREL16_DS\n ENUMX"
    },
    {
      "sha": "f0dd0e9d672557a1b7dc3c9fb4a1db90cf16361c",
      "filename": "bfd/xcofflink.c",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/xcofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/bfd/xcofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xcofflink.c?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -1814,6 +1814,12 @@ xcoff_link_add_symbols (bfd *abfd, struct bfd_link_info *info)\n \t      csect = bfd_make_section_anyway_with_flags (abfd, \".td\",\n \t\t\t\t\t\t\t  SEC_ALLOC);\n \t    }\n+\t  else if (aux.x_csect.x_smclas == XMC_UL)\n+\t    {\n+\t      /* This is a thread-local unitialized csect.  */\n+\t      csect = bfd_make_section_anyway_with_flags (abfd, \".tbss\",\n+\t\t\t\t\t\t\t  SEC_ALLOC | SEC_THREAD_LOCAL);\n+\t    }\n \t  else\n \t    csect = bfd_make_section_anyway_with_flags (abfd, \".bss\",\n \t\t\t\t\t\t\tSEC_ALLOC);\n@@ -2697,6 +2703,14 @@ xcoff_need_ldrel_p (struct bfd_link_info *info, struct internal_reloc *rel,\n \t    return FALSE;\n \t}\n       return TRUE;\n+\n+    case R_TLS:\n+    case R_TLS_LE:\n+    case R_TLS_IE:\n+    case R_TLS_LD:\n+    case R_TLSM:\n+    case R_TLSML:\n+      return TRUE;\n     }\n }\n \f\n@@ -4060,6 +4074,10 @@ xcoff_create_ldrel (bfd *output_bfd, struct xcoff_final_link_info *flinfo,\n \tldrel.l_symndx = 1;\n       else if (strcmp (secname, \".bss\") == 0)\n \tldrel.l_symndx = 2;\n+      else if (strcmp (secname, \".tdata\") == 0)\n+\tldrel.l_symndx = -1;\n+      else if (strcmp (secname, \".tbss\") == 0)\n+\tldrel.l_symndx = -2;\n       else\n \t{\n \t  _bfd_error_handler"
    },
    {
      "sha": "01161d5000ca23cde4085567712dfc90051b660b",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -1,3 +1,26 @@\n+2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* config/tc-ppc.c (ppc_xcoff_text_section, ppc_xcoff_data_section,\n+\t(ppc_xcoff_bss_section, ppc_xcoff_tdata_section,\n+\t(ppc_xcoff_tbss_section): New variables.\n+\t(ppc_text_subsegment, ppc_text_csects, ppc_data_subgments,\n+\t(ppc_data_csects): Removed.\n+\t(ppc_xcoff_section_is_initialized, ppc_init_xcoff_section,\n+\tppc_xcoff_parse_cons): New functions.\n+\t(md_being): Initialize XCOFF sections.\n+\t(ppc_xcoff_suffix): Add support for TLS relocations\n+\t(fixup_size, md_apply_fix): Add support for new BFD_RELOC.\n+\t(ppc_change_csect): Handle XMC_TL, XMC_UL.  Correctly, add XMC_BS\n+\tto .bss section.  Handle new XCOFF section variables.\n+\t(ppc_comm): Likewise.\n+\t(ppc_toc): Likewise.\n+\t(ppc_symbol_new_hook): Likewise.\n+\t(ppc_frob_symbol): Likewise.\n+\t(ppc_fix_adjustable): Add tbss support.\n+\t* config/tc-ppc.h (TC_PARSE_CONS_EXPRESSION): New define.\n+\t(ppc_xcoff_parse_cons): Add prototype.\n+\t(struct ppc_xcoff_section): New structure.\n+\n 2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n \n \t* config/tc-ppc.c (ppc_xcoff_suffix): New function."
    },
    {
      "sha": "0c78b93977a32c7b119cfb447b86293763569c4b",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 186,
      "deletions": 45,
      "changes": 231,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -992,21 +992,41 @@ static bfd_boolean msolaris = SOLARIS_P;\n \n /* The RS/6000 assembler uses the .csect pseudo-op to generate code\n    using a bunch of different sections.  These assembler sections,\n-   however, are all encompassed within the .text or .data sections of\n-   the final output file.  We handle this by using different\n-   subsegments within these main segments.  */\n-\n-/* Next subsegment to allocate within the .text segment.  */\n-static subsegT ppc_text_subsegment = 2;\n-\n-/* Linked list of csects in the text section.  */\n-static symbolS *ppc_text_csects;\n-\n-/* Next subsegment to allocate within the .data segment.  */\n-static subsegT ppc_data_subsegment = 2;\n+   however, are all encompassed within the .text, .data or .bss sections\n+   of the final output file.  We handle this by using different\n+   subsegments within these main segments.\n+   .tdata and .tbss sections only have one type of csects for now,\n+   but it's better to follow the same construction like the others.  */\n+\n+struct ppc_xcoff_section ppc_xcoff_text_section;\n+struct ppc_xcoff_section ppc_xcoff_data_section;\n+struct ppc_xcoff_section ppc_xcoff_bss_section;\n+struct ppc_xcoff_section ppc_xcoff_tdata_section;\n+struct ppc_xcoff_section ppc_xcoff_tbss_section;\n+\n+/* Return true if the ppc_xcoff_section structure is already\n+   initialized.  */\n+static bfd_boolean\n+ppc_xcoff_section_is_initialized (struct ppc_xcoff_section *section)\n+{\n+  return section->segment != NULL;\n+}\n \n-/* Linked list of csects in the data section.  */\n-static symbolS *ppc_data_csects;\n+/* Initialize a ppc_xcoff_section.\n+   Dummy symbols are used to ensure the position of .text over .data\n+   and .tdata.  These symbols won't be output.  */\n+static void\n+ppc_init_xcoff_section (struct ppc_xcoff_section *s, segT seg,\n+\t\t\tbfd_boolean need_dummy)\n+{\n+  s->segment = seg;\n+  s->next_subsegment = 2;\n+  if (need_dummy)\n+    {\n+      s->csects = symbol_make (\"dummy\\001\");\n+      symbol_get_tc (s->csects)->within = s->csects;\n+    }\n+}\n \n /* The current csect.  */\n static symbolS *ppc_current_csect;\n@@ -1858,13 +1878,12 @@ md_begin (void)\n #ifdef OBJ_XCOFF\n   ppc_coff_debug_section = coff_section_from_bfd_index (stdoutput, N_DEBUG);\n \n-  /* Create dummy symbols to serve as initial csects.  This forces the\n-     text csects to precede the data csects.  These symbols will not\n-     be output.  */\n-  ppc_text_csects = symbol_make (\"dummy\\001\");\n-  symbol_get_tc (ppc_text_csects)->within = ppc_text_csects;\n-  ppc_data_csects = symbol_make (\"dummy\\001\");\n-  symbol_get_tc (ppc_data_csects)->within = ppc_data_csects;\n+  /* Create XCOFF sections with .text in first, as it's creating dummy symbols\n+     to serve as initial csects.  This forces the text csects to precede the\n+     data csects.  These symbols will not be output.  */\n+  ppc_init_xcoff_section (&ppc_xcoff_text_section, text_section, TRUE);\n+  ppc_init_xcoff_section (&ppc_xcoff_data_section, data_section, TRUE);\n+  ppc_init_xcoff_section (&ppc_xcoff_bss_section, bss_section, FALSE);\n #endif\n }\n \n@@ -2674,6 +2693,16 @@ ppc_xcoff_suffix (char **str_p)\n   static const struct map_bfd mapping[] = {\n     MAP (\"l\",\t\t\tBFD_RELOC_PPC_TOC16_LO),\n     MAP (\"u\",\t\t\tBFD_RELOC_PPC_TOC16_HI),\n+    MAP32 (\"ie\",\t\tBFD_RELOC_PPC_TLSIE),\n+    MAP32 (\"ld\",\t\tBFD_RELOC_PPC_TLSLD),\n+    MAP32 (\"le\",\t\tBFD_RELOC_PPC_TLSLE),\n+    MAP32 (\"m\", \t\tBFD_RELOC_PPC_TLSM),\n+    MAP32 (\"ml\",\t\tBFD_RELOC_PPC_TLSML),\n+    MAP64 (\"ie\",\t\tBFD_RELOC_PPC64_TLSIE),\n+    MAP64 (\"ld\",\t\tBFD_RELOC_PPC64_TLSLD),\n+    MAP64 (\"le\",\t\tBFD_RELOC_PPC64_TLSLE),\n+    MAP64 (\"m\", \t\tBFD_RELOC_PPC64_TLSM),\n+    MAP64 (\"ml\",\t\tBFD_RELOC_PPC64_TLSML),\n   };\n \n   if (*str++ != '@')\n@@ -2726,6 +2755,24 @@ ppc_xcoff_fixup_addis (char *rt_e, char *d_e, char *ra_e)\n   free (save_ra);\n }\n \n+/* Support @ie, etc. on constants emitted via .short, .int etc.  */\n+\n+bfd_reloc_code_real_type\n+ppc_xcoff_parse_cons (expressionS *exp, unsigned int nbytes)\n+{\n+  expression (exp);\n+  if (nbytes >= 2 && *input_line_pointer == '@')\n+    return ppc_xcoff_suffix (&input_line_pointer);\n+\n+  /* There isn't any @ symbol for default TLS relocations (R_TLS).  */\n+  if (exp->X_add_symbol != NULL\n+      && (symbol_get_tc (exp->X_add_symbol)->symbol_class == XMC_TL\n+\t  || symbol_get_tc (exp->X_add_symbol)->symbol_class == XMC_UL))\n+      return (ppc_obj64 ? BFD_RELOC_PPC64_TLSGD: BFD_RELOC_PPC_TLSGD);\n+\n+  return BFD_RELOC_NONE;\n+}\n+\n #endif /* OBJ_XCOFF */\n \f\n #if defined (OBJ_XCOFF) || defined (OBJ_ELF)\n@@ -3052,6 +3099,10 @@ fixup_size (bfd_reloc_code_real_type reloc, bfd_boolean *pc_relative)\n     case BFD_RELOC_PPC_TLS:\n     case BFD_RELOC_PPC_TLSGD:\n     case BFD_RELOC_PPC_TLSLD:\n+    case BFD_RELOC_PPC_TLSLE:\n+    case BFD_RELOC_PPC_TLSIE:\n+    case BFD_RELOC_PPC_TLSM:\n+    case BFD_RELOC_PPC_TLSML:\n     case BFD_RELOC_PPC_VLE_HA16A:\n     case BFD_RELOC_PPC_VLE_HA16D:\n     case BFD_RELOC_PPC_VLE_HI16A:\n@@ -3111,6 +3162,12 @@ fixup_size (bfd_reloc_code_real_type reloc, bfd_boolean *pc_relative)\n     case BFD_RELOC_PPC64_TPREL34:\n     case BFD_RELOC_PPC64_DTPREL34:\n     case BFD_RELOC_PPC64_TOC:\n+    case BFD_RELOC_PPC64_TLSGD:\n+    case BFD_RELOC_PPC64_TLSLD:\n+    case BFD_RELOC_PPC64_TLSLE:\n+    case BFD_RELOC_PPC64_TLSIE:\n+    case BFD_RELOC_PPC64_TLSM:\n+    case BFD_RELOC_PPC64_TLSML:\n       size = 8;\n       break;\n \n@@ -4205,7 +4262,9 @@ static bfd_boolean ppc_stab_symbol;\n /* The .comm and .lcomm pseudo-ops for XCOFF.  XCOFF puts common\n    symbols in the .bss segment as though they were local common\n    symbols, and uses a different smclas.  The native Aix 4.3.3 assembler\n-   aligns .comm and .lcomm to 4 bytes.  */\n+   aligns .comm and .lcomm to 4 bytes.\n+   Symbols having a XMC_UL storage class are uninialized thread-local\n+   data.  */\n \n static void\n ppc_comm (int lcomm)\n@@ -4220,6 +4279,7 @@ ppc_comm (int lcomm)\n   symbolS *lcomm_sym = NULL;\n   symbolS *sym;\n   char *pfrag;\n+  struct ppc_xcoff_section *section;\n \n   endc = get_symbol_name (&name);\n   end_name = input_line_pointer;\n@@ -4312,7 +4372,23 @@ ppc_comm (int lcomm)\n       return;\n     }\n \n-  record_alignment (bss_section, align);\n+  if (symbol_get_tc (sym)->symbol_class == XMC_UL\n+      || (lcomm && symbol_get_tc (lcomm_sym)->symbol_class == XMC_UL))\n+    {\n+      section = &ppc_xcoff_tbss_section;\n+      if (!ppc_xcoff_section_is_initialized (section))\n+\t{\n+\t  ppc_init_xcoff_section (section,\n+\t\t\t\t  subseg_new (\".tbss\", 0), FALSE);\n+\t  bfd_set_section_flags (section->segment,\n+\t\t\t\t SEC_ALLOC | SEC_THREAD_LOCAL);\n+\t  seg_info (section->segment)->bss = 1;\n+\t}\n+    }\n+  else\n+    section = &ppc_xcoff_bss_section;\n+\n+  record_alignment (section->segment, align);\n \n   if (! lcomm\n       || ! S_IS_DEFINED (lcomm_sym))\n@@ -4333,14 +4409,14 @@ ppc_comm (int lcomm)\n \t  def_size = 0;\n \t}\n \n-      subseg_set (bss_section, 1);\n+      subseg_set (section->segment, 1);\n       frag_align (align, 0, 0);\n \n       symbol_set_frag (def_sym, frag_now);\n       pfrag = frag_var (rs_org, 1, 1, (relax_substateT) 0, def_sym,\n \t\t\tdef_size, (char *) NULL);\n       *pfrag = 0;\n-      S_SET_SEGMENT (def_sym, bss_section);\n+      S_SET_SEGMENT (def_sym, section->segment);\n       symbol_get_tc (def_sym)->align = align;\n     }\n   else if (lcomm)\n@@ -4356,7 +4432,7 @@ ppc_comm (int lcomm)\n   if (lcomm)\n     {\n       /* Make sym an offset from lcomm_sym.  */\n-      S_SET_SEGMENT (sym, bss_section);\n+      S_SET_SEGMENT (sym, section->segment);\n       symbol_set_frag (sym, symbol_get_frag (lcomm_sym));\n       S_SET_VALUE (sym, symbol_get_frag (lcomm_sym)->fr_offset);\n       symbol_get_frag (lcomm_sym)->fr_offset += size;\n@@ -4414,7 +4490,7 @@ ppc_change_csect (symbolS *sym, offsetT align)\n     subseg_set (S_GET_SEGMENT (sym), symbol_get_tc (sym)->subseg);\n   else\n     {\n-      symbolS **list_ptr;\n+      struct ppc_xcoff_section *section;\n       int after_toc;\n       int hold_chunksize;\n       symbolS *list;\n@@ -4436,10 +4512,7 @@ ppc_change_csect (symbolS *sym, offsetT align)\n \tcase XMC_SV:\n \tcase XMC_TI:\n \tcase XMC_TB:\n-\t  S_SET_SEGMENT (sym, text_section);\n-\t  symbol_get_tc (sym)->subseg = ppc_text_subsegment;\n-\t  ++ppc_text_subsegment;\n-\t  list_ptr = &ppc_text_csects;\n+\t  section = &ppc_xcoff_text_section;\n \t  is_code = 1;\n \t  break;\n \tcase XMC_RW:\n@@ -4448,21 +4521,48 @@ ppc_change_csect (symbolS *sym, offsetT align)\n \tcase XMC_TE:\n \tcase XMC_DS:\n \tcase XMC_UA:\n-\tcase XMC_BS:\n \tcase XMC_UC:\n+\t  section = &ppc_xcoff_data_section;\n \t  if (ppc_toc_csect != NULL\n \t      && (symbol_get_tc (ppc_toc_csect)->subseg + 1\n-\t\t  == ppc_data_subsegment))\n+\t\t  == section->next_subsegment))\n \t    after_toc = 1;\n-\t  S_SET_SEGMENT (sym, data_section);\n-\t  symbol_get_tc (sym)->subseg = ppc_data_subsegment;\n-\t  ++ppc_data_subsegment;\n-\t  list_ptr = &ppc_data_csects;\n+\t  break;\n+\tcase XMC_BS:\n+\t  section = &ppc_xcoff_bss_section;\n+\t  break;\n+\tcase XMC_TL:\n+\t  section = &ppc_xcoff_tdata_section;\n+\t  /* Create .tdata section if not yet done.  */\n+\t  if (!ppc_xcoff_section_is_initialized (section))\n+\t    {\n+\t      ppc_init_xcoff_section (section, subseg_new (\".tdata\", 0),\n+\t\t\t\t\tTRUE);\n+\t      bfd_set_section_flags (section->segment, SEC_ALLOC\n+\t\t\t\t     | SEC_LOAD | SEC_RELOC | SEC_DATA\n+\t\t\t\t     | SEC_THREAD_LOCAL);\n+\t    }\n+\t  break;\n+\tcase XMC_UL:\n+\t  section = &ppc_xcoff_tbss_section;\n+\t  /* Create .tbss section if not yet done.  */\n+\t  if (!ppc_xcoff_section_is_initialized (section))\n+\t    {\n+\t      ppc_init_xcoff_section (section, subseg_new (\".tbss\", 0),\n+\t\t\t\t      FALSE);\n+\t      bfd_set_section_flags (section->segment, SEC_ALLOC |\n+\t\t\t\t     SEC_THREAD_LOCAL);\n+\t      seg_info (section->segment)->bss = 1;\n+\t    }\n \t  break;\n \tdefault:\n \t  abort ();\n \t}\n \n+      S_SET_SEGMENT (sym, section->segment);\n+      symbol_get_tc (sym)->subseg = section->next_subsegment;\n+      ++section->next_subsegment;\n+\n       /* We set the obstack chunk size to a small value before\n \t changing subsegments, so that we don't use a lot of memory\n \t space for what may be a small section.  */\n@@ -4490,7 +4590,7 @@ ppc_change_csect (symbolS *sym, offsetT align)\n       symbol_get_tc (sym)->output = 1;\n       symbol_get_tc (sym)->within = sym;\n \n-      for (list = *list_ptr;\n+      for (list = section->csects;\n \t   symbol_get_tc (list)->next != (symbolS *) NULL;\n \t   list = symbol_get_tc (list)->next)\n \t;\n@@ -5329,8 +5429,8 @@ ppc_toc (int ignore ATTRIBUTE_UNUSED)\n       symbolS *sym;\n       symbolS *list;\n \n-      subseg = ppc_data_subsegment;\n-      ++ppc_data_subsegment;\n+      subseg = ppc_xcoff_data_section.next_subsegment;\n+      ++ppc_xcoff_data_section.next_subsegment;\n \n       subseg_new (segment_name (data_section), subseg);\n       ppc_toc_frag = frag_now;\n@@ -5345,7 +5445,7 @@ ppc_toc (int ignore ATTRIBUTE_UNUSED)\n \n       ppc_toc_csect = sym;\n \n-      for (list = ppc_data_csects;\n+      for (list = ppc_xcoff_data_section.csects;\n \t   symbol_get_tc (list)->next != (symbolS *) NULL;\n \t   list = symbol_get_tc (list)->next)\n \t;\n@@ -5711,12 +5811,16 @@ ppc_symbol_new_hook (symbolS *sym)\n \ttc->symbol_class = XMC_TC0;\n       else if (strcmp (s, \"TE]\") == 0)\n \ttc->symbol_class = XMC_TE;\n+      else if (strcmp (s, \"TL]\") == 0)\n+\ttc->symbol_class = XMC_TL;\n       break;\n     case 'U':\n       if (strcmp (s, \"UA]\") == 0)\n \ttc->symbol_class = XMC_UA;\n       else if (strcmp (s, \"UC]\") == 0)\n \ttc->symbol_class = XMC_UC;\n+      else if (strcmp (s, \"UL]\") == 0)\n+\ttc->symbol_class = XMC_UL;\n       break;\n     case 'X':\n       if (strcmp (s, \"XO]\") == 0)\n@@ -5858,12 +5962,15 @@ ppc_frob_symbol (symbolS *sym)\n \t    }\n \t  a->x_csect.x_smtyp = (symbol_get_tc (sym)->align << 3) | XTY_SD;\n \t}\n-      else if (S_GET_SEGMENT (sym) == bss_section)\n+      else if (S_GET_SEGMENT (sym) == bss_section\n+\t       || S_GET_SEGMENT (sym) == ppc_xcoff_tbss_section.segment)\n \t{\n \t  /* This is a common symbol.  */\n \t  a->x_csect.x_scnlen.l = symbol_get_frag (sym)->fr_offset;\n \t  a->x_csect.x_smtyp = (symbol_get_tc (sym)->align << 3) | XTY_CM;\n-\t  if (S_IS_EXTERNAL (sym))\n+\t  if (S_GET_SEGMENT (sym) == ppc_xcoff_tbss_section.segment)\n+\t    symbol_get_tc (sym)->symbol_class = XMC_UL;\n+\t  else if (S_IS_EXTERNAL (sym))\n \t    symbol_get_tc (sym)->symbol_class = XMC_RW;\n \t  else\n \t    symbol_get_tc (sym)->symbol_class = XMC_BS;\n@@ -5917,9 +6024,11 @@ ppc_frob_symbol (symbolS *sym)\n \t  /* This is a normal symbol definition.  x_scnlen is the\n \t     symbol index of the containing csect.  */\n \t  if (S_GET_SEGMENT (sym) == text_section)\n-\t    csect = ppc_text_csects;\n+\t    csect = ppc_xcoff_text_section.csects;\n \t  else if (S_GET_SEGMENT (sym) == data_section)\n-\t    csect = ppc_data_csects;\n+\t    csect = ppc_xcoff_data_section.csects;\n+\t  else if (S_GET_SEGMENT (sym) == ppc_xcoff_tdata_section.segment)\n+\t    csect = ppc_xcoff_tdata_section.csects;\n \t  else\n \t    abort ();\n \n@@ -6201,6 +6310,7 @@ ppc_fix_adjustable (fixS *fix)\n       && tc->symbol_class != XMC_TC\n       && tc->symbol_class != XMC_TE\n       && symseg != bss_section\n+      && symseg != ppc_xcoff_tbss_section.segment\n       /* Don't adjust if this is a reloc in the toc section.  */\n       && (symseg != data_section\n \t  || ppc_toc_csect == NULL\n@@ -7134,6 +7244,37 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg)\n #endif\n \n #ifdef OBJ_XCOFF\n+\tcase BFD_RELOC_PPC_TLSGD:\n+\tcase BFD_RELOC_PPC_TLSLD:\n+\tcase BFD_RELOC_PPC_TLSLE:\n+\tcase BFD_RELOC_PPC_TLSIE:\n+\tcase BFD_RELOC_PPC_TLSM:\n+\tcase BFD_RELOC_PPC64_TLSGD:\n+\tcase BFD_RELOC_PPC64_TLSLD:\n+\tcase BFD_RELOC_PPC64_TLSLE:\n+\tcase BFD_RELOC_PPC64_TLSIE:\n+\tcase BFD_RELOC_PPC64_TLSM:\n+\t  gas_assert (fixP->fx_addsy != NULL);\n+\t  S_SET_THREAD_LOCAL (fixP->fx_addsy);\n+\t  fieldval = 0;\n+\t  break;\n+\n+\t  /* TLSML relocations are targeting a XMC_TC symbol named\n+\t     \"_$TLSML\". We can't check earlier because the relocation\n+\t     can target any symbol name which will be latter .rename\n+\t     to \"_$TLSML\".  */\n+\tcase BFD_RELOC_PPC_TLSML:\n+\tcase BFD_RELOC_PPC64_TLSML:\n+\t  gas_assert (fixP->fx_addsy != NULL);\n+\t  if (strcmp (symbol_get_tc (fixP->fx_addsy)->real_name, \"_$TLSML\") != 0)\n+\t    {\n+\t      as_bad_where (fixP->fx_file, fixP->fx_line,\n+\t\t\t    _(\"R_TLSML relocation doesn't target a \"\n+\t\t\t      \"symbol named \\\"_$TLSML\\\". %s\"), S_GET_NAME(fixP->fx_addsy));\n+\t    }\n+\t  fieldval = 0;\n+\t  break;\n+\n \tcase BFD_RELOC_NONE:\n #endif\n \tcase BFD_RELOC_CTOR:"
    },
    {
      "sha": "d38c7d47080ace73838b9fea680880903c23c5e6",
      "filename": "gas/config/tc-ppc.h",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/gas/config/tc-ppc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/gas/config/tc-ppc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.h?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -189,6 +189,23 @@ do {\t\t\t\t\t\t\t\t\\\n extern void ppc_xcoff_end (void);\n #define md_end ppc_xcoff_end\n \n+#define TC_PARSE_CONS_EXPRESSION(EXP, NBYTES)\t\\\n+  ppc_xcoff_parse_cons (EXP, NBYTES)\n+extern bfd_reloc_code_real_type ppc_xcoff_parse_cons (expressionS *,\n+\t\t\t\t\t\t    unsigned int);\n+/* XCOFF format allows only few predefined sections. Gather all\n+   information in a common structure.  */\n+struct ppc_xcoff_section {\n+  /* Main segment of the section.  */\n+  segT segment;\n+\n+  /* Next subsegment to allocate within the segment.  */\n+  subsegT next_subsegment;\n+\n+  /* Linked list of csects in the section.  */\n+  symbolS *csects;\n+};\n+\n #endif /* OBJ_XCOFF */\n \n #define tc_new_dot_label(sym) ppc_new_dot_label (sym)"
    },
    {
      "sha": "3a40b16358dfe4135c6bc0d282bb10457d6978c8",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -1,3 +1,15 @@\n+2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* coff/internal.h (struct internal_aouthdr): Add new fields.\n+\t* coff/rs6000.h (AOUTHDR\u00c3): Add new fields.\n+\t* coff/rs6k64.h (struct external_filehdr): Likewise.\n+\t* coff/xcoff.h (_TDATA), _TBSS): New defines\n+\t(RS6K_AOUTHDR_TLS_LE, RS6K_AOUTHDR_RAS, RS6K_AOUTHDR_ALGNTDATA,\n+\tRS6K_AOUTHDR_SHR_SYMTAB, RS6K_AOUTHDR_FORK_POLICY,\n+\tRS6K_AOUTHDR_FORK_COR): New defines.\n+\t(XMC_TU): Removed.\n+\t(XMC_UL): New define.\n+\n 2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n \n \t* coff/xcoff.h (R_RTB): Remove."
    },
    {
      "sha": "1b5b45c226661cd48a3755f04016f00f1e3f4e5a",
      "filename": "include/coff/internal.h",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/include/coff/internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/include/coff/internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/internal.h?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -263,8 +263,13 @@ struct internal_aouthdr\n   short o_algndata;\t\t/* max alignment for data\t*/\n   short o_modtype;\t\t/* Module type field, 1R,RE,RO\t*/\n   short o_cputype;\t\t/* Encoded CPU type\t\t*/\n-  bfd_vma o_maxstack;\t/* max stack size allowed.\t*/\n-  bfd_vma o_maxdata;\t/* max data size allowed.\t*/\n+  bfd_vma o_maxstack;\t\t/* max stack size allowed.\t*/\n+  bfd_vma o_maxdata;\t\t/* max data size allowed.\t*/\n+  char o_flags;\t\t\t/* Flags and TLS alignment\t*/\n+  short o_sntdata;\t\t/* section number for tdata\t*/\n+  short o_sntbss;\t\t/* section number for tbss\t*/\n+  short o_x64flags;\t\t/* XCOFF64 flags\t\t*/\n+\n \n   /* ECOFF stuff */\n   bfd_vma bss_start;\t\t/* Base of bss section.\t\t*/"
    },
    {
      "sha": "ff2de530b8ede27efa8d91427bdcdf94567334c9",
      "filename": "include/coff/rs6000.h",
      "status": "modified",
      "additions": 28,
      "deletions": 22,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/include/coff/rs6000.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/include/coff/rs6000.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/rs6000.h?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -48,28 +48,34 @@ struct external_filehdr {\n \n typedef struct\n {\n-  unsigned char\tmagic[2];\t/* type of file\t\t\t*/\n-  unsigned char\tvstamp[2];\t/* version stamp\t\t*/\n-  unsigned char\ttsize[4];\t/* text size in bytes, padded to FW bdry */\n-  unsigned char\tdsize[4];\t/* initialized data \"  \"\t*/\n-  unsigned char\tbsize[4];\t/* uninitialized data \"   \"\t*/\n-  unsigned char\tentry[4];\t/* entry pt.\t\t\t*/\n-  unsigned char\ttext_start[4];\t/* base of text used for this file */\n-  unsigned char\tdata_start[4];\t/* base of data used for this file */\n-  unsigned char\to_toc[4];\t/* address of TOC */\n-  unsigned char\to_snentry[2];\t/* section number of entry point */\n-  unsigned char\to_sntext[2];\t/* section number of .text section */\n-  unsigned char\to_sndata[2];\t/* section number of .data section */\n-  unsigned char\to_sntoc[2];\t/* section number of TOC */\n-  unsigned char\to_snloader[2];\t/* section number of .loader section */\n-  unsigned char\to_snbss[2];\t/* section number of .bss section */\n-  unsigned char\to_algntext[2];\t/* .text alignment */\n-  unsigned char\to_algndata[2];\t/* .data alignment */\n-  unsigned char\to_modtype[2];\t/* module type (??) */\n-  unsigned char o_cputype[2];\t/* cpu type */\n-  unsigned char\to_maxstack[4];\t/* max stack size (??) */\n-  unsigned char o_maxdata[4];\t/* max data size (??) */\n-  unsigned char\to_resv2[12];\t/* reserved */\n+  unsigned char magic[2];\t\t/* type of file\t\t\t*/\n+  unsigned char vstamp[2];\t\t/* version stamp\t\t*/\n+  unsigned char tsize[4];\t\t/* text size in bytes, padded to FW bdry */\n+  unsigned char dsize[4];\t\t/* initialized data \"\t \"\t*/\n+  unsigned char bsize[4];\t\t/* uninitialized data \"\t  \"\t*/\n+  unsigned char entry[4];\t\t/* entry pt.\t\t\t*/\n+  unsigned char text_start[4];\t\t/* base of text used for this file */\n+  unsigned char data_start[4];\t\t/* base of data used for this file */\n+  unsigned char o_toc[4];\t\t/* address of TOC */\n+  unsigned char o_snentry[2];\t\t/* section number of entry point */\n+  unsigned char o_sntext[2];\t\t/* section number of .text section */\n+  unsigned char o_sndata[2];\t\t/* section number of .data section */\n+  unsigned char o_sntoc[2];\t\t/* section number of TOC */\n+  unsigned char o_snloader[2];\t\t/* section number of .loader section */\n+  unsigned char o_snbss[2];\t\t/* section number of .bss section */\n+  unsigned char o_algntext[2];\t\t/* .text alignment */\n+  unsigned char o_algndata[2];\t\t/* .data alignment */\n+  unsigned char o_modtype[2];\t\t/* module type (??) */\n+  unsigned char o_cputype[2];\t\t/* cpu type */\n+  unsigned char o_maxstack[4];\t\t/* max stack size (??) */\n+  unsigned char o_maxdata[4];\t\t/* max data size (??) */\n+  unsigned char o_debugger[4];\t\t/* reserved */\n+  unsigned char o_textpsize[1]; \t/* text page size */\n+  unsigned char o_datapsize[1]; \t/* data page size */\n+  unsigned char o_stackpsize[1];\t/* stack page size */\n+  unsigned char o_flags[1];\t\t/* Flags and TLS alignment */\n+  unsigned char o_sntdata[2];\t\t/* section number of .tdata section */\n+  unsigned char o_sntbss[2];\t\t/* section number of .tbss section */\n }\n AOUTHDR;\n "
    },
    {
      "sha": "53adf4be49ab9e631bee3185a502e15ad8c4050e",
      "filename": "include/coff/rs6k64.h",
      "status": "modified",
      "additions": 30,
      "deletions": 24,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/include/coff/rs6k64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/include/coff/rs6k64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/rs6k64.h?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -39,32 +39,38 @@ struct external_filehdr\n \n /********************** AOUT \"OPTIONAL HEADER\" **********************/\n \n-typedef struct \n+typedef struct\n {\n-  unsigned char\tmagic[2];\t\t/* type of file\t\t\t*/\n-  unsigned char\tvstamp[2];\t\t/* version stamp\t\t*/\n-  unsigned char\to_debugger[4];\t\t/* reserved \t\t\t*/\n-  unsigned char\ttext_start[8];\t\t/* base of text used for this file */\n-  unsigned char\tdata_start[8];\t\t/* base of data used for this file */\n-  unsigned char\to_toc[8];\t\t/* address of TOC */\n-  unsigned char\to_snentry[2];\t\t/* section number of entry point */\n-  unsigned char\to_sntext[2];\t\t/* section number of .text section */\n-  unsigned char\to_sndata[2];\t\t/* section number of .data section */\n-  unsigned char\to_sntoc[2];\t\t/* section number of TOC */\n-  unsigned char\to_snloader[2];\t\t/* section number of .loader section */\n-  unsigned char\to_snbss[2];\t\t/* section number of .bss section */\n-  unsigned char\to_algntext[2];\t\t/* .text alignment */\n-  unsigned char\to_algndata[2];\t\t/* .data alignment */\n-  unsigned char\to_modtype[2];\t\t/* module type (??) */\n+  unsigned char magic[2];\t\t/* type of file\t\t\t*/\n+  unsigned char vstamp[2];\t\t/* version stamp\t\t*/\n+  unsigned char o_debugger[4];\t\t/* reserved\t\t\t*/\n+  unsigned char text_start[8];\t\t/* base of text used for this file */\n+  unsigned char data_start[8];\t\t/* base of data used for this file */\n+  unsigned char o_toc[8];\t\t/* address of TOC */\n+  unsigned char o_snentry[2];\t\t/* section number of entry point */\n+  unsigned char o_sntext[2];\t\t/* section number of .text section */\n+  unsigned char o_sndata[2];\t\t/* section number of .data section */\n+  unsigned char o_sntoc[2];\t\t/* section number of TOC */\n+  unsigned char o_snloader[2];\t\t/* section number of .loader section */\n+  unsigned char o_snbss[2];\t\t/* section number of .bss section */\n+  unsigned char o_algntext[2];\t\t/* .text alignment */\n+  unsigned char o_algndata[2];\t\t/* .data alignment */\n+  unsigned char o_modtype[2];\t\t/* module type (??) */\n   unsigned char o_cputype[2];\t\t/* cpu type */\n-  unsigned char\to_resv2[4];\t\t/* reserved \t\t\t*/\n-  unsigned char\ttsize[8];\t\t/* text size bytes, padded to FW bdry */\n-  unsigned char\tdsize[8];\t\t/* initialized data \"  \"\t*/\n-  unsigned char\tbsize[8];\t\t/* uninitialized data \"   \"\t*/\n-  unsigned char\tentry[8];\t\t/* entry pt.\t\t\t*/\n-  unsigned char\to_maxstack[8];\t\t/* max stack size (??) \t\t*/\n-  unsigned char o_maxdata[8];\t\t/* max data size (??) \t\t*/\n-  unsigned char\to_resv3[16];\t\t/* reserved \t\t\t*/\n+  unsigned char o_textpsize[1]; \t/* text page size */\n+  unsigned char o_datapsize[1]; \t/* data page size */\n+  unsigned char o_stackpsize[1];\t/* stack page size */\n+  unsigned char o_flags[1];\t\t/* Flags and TLS alignment */\n+  unsigned char tsize[8];\t\t/* text size bytes, padded to FW bdry */\n+  unsigned char dsize[8];\t\t/* initialized data \"  \"\t*/\n+  unsigned char bsize[8];\t\t/* uninitialized data \"\t  \"\t*/\n+  unsigned char entry[8];\t\t/* entry pt.\t\t\t*/\n+  unsigned char o_maxstack[8];\t\t/* max stack size (??)\t\t*/\n+  unsigned char o_maxdata[8];\t\t/* max data size (??)\t\t*/\n+  unsigned char o_sntdata[2];\t\t/* section number of .tdata section */\n+  unsigned char o_sntbss[2];\t\t/* section number of .tbss section */\n+  unsigned char o_x64flags[2];\t\t/* XCOFF64 flags */\n+  unsigned char o_resv3[10];\t\t/* reserved\t\t\t*/\n }\n AOUTHDR;\n "
    },
    {
      "sha": "05e9160c08ff03b9050107646a5f32f8d10d1ef8",
      "filename": "include/coff/xcoff.h",
      "status": "modified",
      "additions": 16,
      "deletions": 3,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/include/coff/xcoff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/include/coff/xcoff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/xcoff.h?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -46,6 +46,8 @@\n #define _TEXT\t\".text\"\n #define _DATA\t\".data\"\n #define _BSS\t\".bss\"\n+#define _TDATA\t\".tdata\"\n+#define _TBSS\t\".tbss\"\n #define _PAD\t\".pad\"\n #define _LOADER\t\".loader\"\n #define _EXCEPT \".except\"\n@@ -93,8 +95,19 @@\n #define\tRS6K_AOUTHDR_NMAGIC 0x0108 /* new: text r/o, data r/w */\n #define\tRS6K_AOUTHDR_ZMAGIC 0x010B /* paged: text r/o, both page-aligned */\n \n-/* XCOFF relocation types.  \n-   The relocations are described in the function  \n+/* Flags for aouthdr o_flags */\n+#define RS6K_AOUTHDR_TLS_LE    0x80  /* TLS local-exec code was generated */\n+#define RS6K_AOUTHDR_RAS       0x40  /* kernel module is key & recovery safe */\n+#define RS6K_AOUTHDR_ALGNTDATA 0xf   /* TLS alignment */\n+\n+/* Flags for aouthdr o_x64flags */\n+#define RS6K_AOUTHDR_SHR_SYMTAB  0x8000\n+#define RS6K_AOUTHDR_FORK_POLICY 0x4000\n+#define RS6K_AOUTHDR_FORK_COR    0x2000\n+\n+\n+/* XCOFF relocation types.\n+   The relocations are described in the function\n    xcoff[64]_ppc_relocate_section in coff64-rs6000.c and coff-rs6000.c  */\n \n #define R_POS    (0x00)\n@@ -171,7 +184,7 @@\n #define\tXMC_SV3264 18\t\t/* Read-only 32 or 64 bit supervisor call */\n /*                19   ??? */\n #define XMC_TL     20          /* Read-write initialized TLS data */\n-#define XMC_TU     21          /* Read-write uninitialized TLS data */\n+#define XMC_UL     21          /* Read-write uninitialized TLS data */\n #define XMC_TE     22          /* Same as XMC_TC but mapped after it */\n \n /* The ldhdr structure.  This appears at the start of the .loader"
    },
    {
      "sha": "35c5e203f5d17f8b488db8484c51421da85efd0d",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -1,3 +1,18 @@\n+2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n+\n+\t* emultempl/aix.em: Ensure .tdata section is removed\n+\tif empty, even with -r flag.\n+\t* scripttempl/aix.sc: Handle TLS sections.\n+\t* testsuite/ld-powerpc/aix52.exp: Add new tests.\n+\t* testsuite/ld-powerpc/aix-tls-reloc-32.d: New test.\n+\t* testsuite/ld-powerpc/aix-tls-reloc-64.d: New test.\n+\t* testsuite/ld-powerpc/aix-tls-reloc.ex: New test.\n+\t* testsuite/ld-powerpc/aix-tls-reloc.s: New test.\n+\t* testsuite/ld-powerpc/aix-tls-section-32.d: New test.\n+\t* testsuite/ld-powerpc/aix-tls-section-64.d: New test.\n+\t* testsuite/ld-powerpc/aix-tls-section.ex: New test.\n+\t* testsuite/ld-powerpc/aix-tls-section.s: New test.\n+\n 2021-03-12  Cl\u00e9ment Chigot  <clement.chigot@atos.net>\n \n \t* scripttempl/aix.sc: Add .te to .data section."
    },
    {
      "sha": "e098f2a8850641914c369304b6eed9f2aa346241",
      "filename": "ld/emultempl/aix.em",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/emultempl/aix.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/emultempl/aix.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/aix.em?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -969,6 +969,44 @@ gld${EMULATION_NAME}_before_allocation (void)\n \t  sec->flags |= SEC_KEEP;\n       }\n \n+  /* Make sure .tdata is removed if empty, even with -r flag.\n+     .tdata is always being generated because its size is needed\n+     to cumpute .data address.  */\n+  if (bfd_link_relocatable (&link_info))\n+    {\n+      static const char *const thread_sections[] = {\n+\t\".tdata\",\n+\t\".tbss\"\n+      };\n+\n+      /* Run lang_size_sections (if not already done).  */\n+      if (expld.phase != lang_mark_phase_enum)\n+\t{\n+\t  expld.phase = lang_mark_phase_enum;\n+\t  expld.dataseg.phase = exp_seg_none;\n+\t  one_lang_size_sections_pass (NULL, FALSE);\n+\t  lang_reset_memory_regions ();\n+\t}\n+\n+      for (i = 0; i < ARRAY_SIZE (thread_sections); i++)\n+\t{\n+\t  asection *sec;\n+\n+\t  sec = bfd_get_section_by_name (link_info.output_bfd,\n+\t\t\t\t\t thread_sections[i]);\n+\n+\t  if (sec != NULL && sec->rawsize == 0\n+\t      && (sec->flags & SEC_KEEP) == 0\n+\t      && !bfd_section_removed_from_list (link_info.output_bfd,\n+\t\t\t\t\t\t sec))\n+\t    {\n+\t      sec->flags |= SEC_EXCLUDE;\n+\t      bfd_section_list_remove (link_info.output_bfd, sec);\n+\t      link_info.output_bfd->section_count--;\n+\t    }\n+\t}\n+    }\n+\n   before_allocation_default ();\n }\n "
    },
    {
      "sha": "3e4d7c0ae95271427009dd6fcc9fcbaaccb45792",
      "filename": "ld/scripttempl/aix.sc",
      "status": "modified",
      "additions": 29,
      "deletions": 1,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/scripttempl/aix.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/scripttempl/aix.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/aix.sc?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -37,7 +37,35 @@ SECTIONS\n     ${RELOCATING+PROVIDE (_etext = .);}\n   }\n \n-  . = ALIGN (ALIGN (0x10000000) + (. & 0xfff), 32);\n+  /* .tdata and .tbss addresses are representing the offset from\n+     the TLS pointer. It starts at -0x7800 for 64bit and -0x7c00\n+     for 32bit.\n+     TODO: 32bit should have -0x7c00 but it works like this for\n+     now.\n+     The other particularity is that they must be before .data\n+     sections. But .data must be aligned correctly as if the\n+     addresses were contiguous. This means that the correct\n+     address must be restored, taking into account: the size of\n+     .text, its alignment 2^5, the size of .tdata and its\n+     aligment 2^4.  */\n+  .tdata -0x7800 : {\n+    *(.tdata)\n+    *(.tl)\n+  }\n+\n+  .tbss : {\n+    *(.tbss)\n+    *(.ul)\n+  }\n+\n+  . = ${RELOCATING+(ALIGN (0x10000000 + SIZEOF_HEADERS, 32)) + }SIZEOF(.text);\n+  . = ALIGN (.,32);\n+  . = . + SIZEOF(.tdata);\n+  . = ALIGN (.,16);\n+\n+  /* .data starting address must be in a different segment than\n+     the .text addresses. Thus, 0x10000000 is added.  */\n+  . = ALIGN (0x10000000) + (. & 0xfff);\n   .data . : {\n     ${RELOCATING+PROVIDE (_data = .);}\n     *(.data)"
    },
    {
      "sha": "5103de50618031420e61e92bd9edb9cccbeeef95",
      "filename": "ld/testsuite/ld-powerpc/aix-tls-reloc-32.d",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-reloc-32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-reloc-32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/aix-tls-reloc-32.d?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -0,0 +1,35 @@\n+#source: aix-tls-reloc.s\n+#as: -a32\n+#ld: -b32 -shared -bE:aix-tls-reloc.ex\n+#objdump: -dr\n+#target: [is_xcoff_format]\n+\n+.*\n+\n+Disassembly of section \\.text:\n+\n+.* <\\.foo>:\n+.*:\t80 82 00 00 \tl       r4,0\\(r2\\)\n+.*: R_TOC\tgd-.*\n+.*:\t80 62 00 04 \tl       r3,4\\(r2\\)\n+.*: R_TOC\t.gd-.*\n+.*:\t48 00 00 03 \tbla     0 <\\.foo-.*>\n+.*: R_BA_26\t__tls_get_addr\n+.*:\t80 62 00 0c \tl       r3,12\\(r2\\)\n+.*: R_TOC\t_\\$TLSML-.*\n+.*:\t48 00 00 03 \tbla     0 <\\.foo-.*>\n+.*: R_BA_26\t__tls_get_mod\n+.*:\t80 82 00 08 \tl       r4,8\\(r2\\)\n+.*: R_TOC\tld-.*\n+.*:\t7c a3 22 14 \tcax     r5,r3,r4\n+.*:\t48 00 00 03 \tbla     0 <\\.foo-.*>\n+.*: R_BA_26\t__get_tpointer\n+.*:\t80 82 00 10 \tl       r4,16\\(r2\\)\n+.*: R_TOC\tie-.*\n+.*:\t7c a3 22 14 \tcax     r5,r3,r4\n+.*:\t48 00 00 03 \tbla     0 <\\.foo-.*>\n+.*: R_BA_26\t__get_tpointer\n+.*:\t80 82 00 14 \tl       r4,20\\(r2\\)\n+.*: R_TOC\tle-.*\n+.*:\t7c a3 22 14 \tcax     r5,r3,r4\n+.*"
    },
    {
      "sha": "71f6302ec4d00065916966b6672ea8cf5f5af981",
      "filename": "ld/testsuite/ld-powerpc/aix-tls-reloc-64.d",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-reloc-64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-reloc-64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/aix-tls-reloc-64.d?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -0,0 +1,31 @@\n+#source: aix-tls-reloc.s\n+#as: -a32\n+#ld: -b32 -shared -bE:aix-tls-reloc.ex\n+#objdump: -dr\n+#target: [is_xcoff_format]\n+\n+.*\n+\n+Disassembly of section \\.text:\n+\n+.* <\\.foo>:\n+.*:\te8 82 00 00 \tld      r4,0\\(r2\\)\n+.*: R_TOC\tgd-.*\n+.*:\te8 62 00 08 \tld      r3,8\\(r2\\)\n+.*: R_TOC\t.gd-.*\n+.*:\t48 00 00 03 \tbla     0 <\\.foo-.*>\n+.*: R_BA_26\t__tls_get_addr\n+.*:\te8 62 00 18 \tld      r3,24\\(r2\\)\n+.*: R_TOC\t_\\$TLSML-.*\n+.*:\t48 00 00 03 \tbla     0 <\\.foo-.*>\n+.*: R_BA_26\t__tls_get_mod\n+.*:\t80 82 00 10 \tlwz     r4,16\\(r2\\)\n+.*: R_TOC\tld-.*\n+.*:\t7c a3 22 14 \tadd     r5,r3,r4\n+.*:\te8 82 00 20 \tld      r4,32\\(r2\\)\n+.*: R_TOC\tie-.*\n+.*:\t7c a4 6a 14 \tadd     r5,r4,r13\n+.*:\te8 82 00 28 \tld      r4,40\\(r2\\)\n+.*: R_TOC\tle-.*\n+.*:\t7c a3 6a 14 \tadd     r5,r3,r13\n+.*"
    },
    {
      "sha": "257cc5642cb1a054f08cc83f2d943e56fd3ebe99",
      "filename": "ld/testsuite/ld-powerpc/aix-tls-reloc.ex",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-reloc.ex",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-reloc.ex",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/aix-tls-reloc.ex?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -0,0 +1 @@\n+foo"
    },
    {
      "sha": "62ef73cdc34366634b3fab18d9e71bd9903a4891",
      "filename": "ld/testsuite/ld-powerpc/aix-tls-reloc.s",
      "status": "added",
      "additions": 65,
      "deletions": 0,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-reloc.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-reloc.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/aix-tls-reloc.s?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -0,0 +1,65 @@\n+  .globl bar[TL]\n+  .csect bar[TL]\n+  .long 1\n+\n+  .toc\n+  .tc gd[TC],bar[TL]\n+  .tc .gd[TC],bar[TL]@m\n+  .tc ld[TC],bar[TL]@ld\n+  .tc mh[TC],mh[TC]@ml\n+  .tc ie[TC],bar[TL]@ie\n+  .tc le[TC],bar[TL]@le\n+\n+  .globl foo\n+  .globl .foo\n+  .csect foo[DS],3\n+foo:\n+  .if size == 32\n+  .long\t.foo, TOC[tc0], 0\n+  .else\n+  .llong .foo, TOC[tc0], 0\n+  .endif\n+\n+  .csect foo[PR]\n+.foo:\n+  #GD\n+  .if size == 32\n+  lwz 4, gd[TC](2)\n+  lwz 3, .gd[TC](2)\n+  .else\n+  ld 4, gd[TC](2)\n+  ld 3, .gd[TC](2)\n+  .endif\n+  bla __tls_get_addr\n+\n+  #LD\n+  .if size == 32\n+  lwz 3, mh[TC](2)\n+  .else\n+  ld 3, mh[TC](2)\n+  .endif\n+  bla __tls_get_mod\n+  lwz 4, ld[TC](2)\n+  add 5,3,4\n+\n+  #IE\n+  .if size == 32\n+  bla __get_tpointer\n+  lwz 4, ie[TC](2)\n+  add 5,3,4\n+  .else\n+  ld 4, ie[TC](2)\n+  add 5,4,13\n+  .endif\n+\n+  #LE\n+  .if size == 32\n+  bla __get_tpointer\n+  lwz 4, le[TC](2)\n+  add 5,3,4\n+  .else\n+  ld 4, le[TC](2)\n+  add 5,3,13\n+  .endif\n+\n+.rename mh[TC], \"_$TLSML\" # Symbol for the module handle"
    },
    {
      "sha": "16b9686dfe76a86360e036574de8bab940f88c8d",
      "filename": "ld/testsuite/ld-powerpc/aix-tls-section-32.d",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-section-32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-section-32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/aix-tls-section-32.d?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -0,0 +1,15 @@\n+#source: aix-tls-section.s\n+#as: -a32\n+#ld: -b32 -shared -bE:aix-tls-section.ex\n+#objdump: -hw\n+#target: [is_xcoff_format]\n+\n+.*\n+\n+Sections:\n+.*\n+  0 \\.text         .*  .*  .*  .*  .*  ALLOC, LOAD, CODE\n+  1 \\.tdata        00000008  ffff8800  ffff8800  .*  .*  CONTENTS, ALLOC, LOAD, DATA, THREAD_LOCAL\n+  2 \\.tbss         00000008  ffff8808  ffff8808  .*  .*  ALLOC, THREAD_LOCAL\n+  3 \\.data         .*  .*  .*  .*  .*  ALLOC, LOAD, DATA\n+#..."
    },
    {
      "sha": "dceeaaff77e70218efac0521a74d6fe94d741a92",
      "filename": "ld/testsuite/ld-powerpc/aix-tls-section-64.d",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-section-64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-section-64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/aix-tls-section-64.d?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -0,0 +1,15 @@\n+#source: aix-tls-section.s\n+#as: -a64\n+#ld: -b64 -shared -bE:aix-tls-section.ex\n+#objdump: -hw\n+#target: [is_xcoff_format]\n+\n+.*\n+\n+Sections\\:\n+.*\n+  0 \\.text         .*  .*  .*  .*  .*  ALLOC, LOAD, CODE\n+  1 \\.tdata        00000008  ffffffffffff8800  ffffffffffff8800  .*  .*  CONTENTS, ALLOC, LOAD, DATA, THREAD_LOCAL\n+  2 \\.tbss         00000008  ffffffffffff8808  ffffffffffff8808  .*  .*  ALLOC, THREAD_LOCAL\n+  3 \\.data         .* .* .*  .*  .*  ALLOC, LOAD, DATA\n+#..."
    },
    {
      "sha": "3bd1f0e29744a1f32b08d5650e62e2e62afb177c",
      "filename": "ld/testsuite/ld-powerpc/aix-tls-section.ex",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-section.ex",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-section.ex",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/aix-tls-section.ex?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -0,0 +1,2 @@\n+foo\n+bar"
    },
    {
      "sha": "30c328f88aaa1521018c8ca5870ea9acb7991943",
      "filename": "ld/testsuite/ld-powerpc/aix-tls-section.s",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-section.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix-tls-section.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/aix-tls-section.s?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -0,0 +1,8 @@\n+  /* .tbss */\n+  .comm foo[UL],8\n+  .lcomm foo2_l,8,foo2[UL]\n+\n+  /* .tdata */\n+  .globl bar[TL]\n+  .csect bar[TL]\n+  .long 1"
    },
    {
      "sha": "0e68b6a4a785da56ab05dbf2e79ca8dbe2aed9d9",
      "filename": "ld/testsuite/ld-powerpc/aix52.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix52.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416/ld/testsuite/ld-powerpc/aix52.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/aix52.exp?ref=1b2cb8e2ee578e68389c9201bfdfa8cd67c3b416",
      "patch": "@@ -275,6 +275,16 @@ set aix7tests {\n \t\"\" {aix-largetoc-1.s}\n \t{{objdump -dr aix-largetoc-1-SIZE.d}}\n \t\"aix-largetoc-1.so\"}\n+\n+    {\"TLS relocations\" \"-shared -bE:aix-tls-reloc.ex\"\n+\t\"\" {aix-tls-reloc.s}\n+\t{{objdump -dr aix-tls-reloc-SIZE.d}}\n+\t\"aix-tls-reloc.so\"}\n+\n+    {\"TLS section\" \"-shared -bE:aix-tls-section.ex\"\n+\t\"\" {aix-tls-section.s}\n+\t{{objdump -hw aix-tls-section-SIZE.d}}\n+\t\"aix-tls-section.so\"}\n }\n \n foreach test $aix7tests {"
    }
  ]
}