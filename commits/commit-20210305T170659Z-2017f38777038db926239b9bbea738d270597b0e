{
  "sha": "2017f38777038db926239b9bbea738d270597b0e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjAxN2YzODc3NzAzOGRiOTI2MjM5YjliYmVhNzM4ZDI3MDU5N2IwZQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-03-05T17:06:59Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-03-05T17:06:59Z"
    },
    "message": "Add support for the DW_FORM_strx* forms to the BFD library.\n\n\tPR 27521\n\t* dwarf2.c (is_str_attr): Add DW_FORM_strx* forms.\n\t(read_indexed_string): Placeholder function.\n\t(read_attribute_value): Handle DW_FORM_strx* and DW_FORM_addrx*\n\tforms.",
    "tree": {
      "sha": "e4ef9f7d8d4b7d793d5f73f74b0c42ca57b935e6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e4ef9f7d8d4b7d793d5f73f74b0c42ca57b935e6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2017f38777038db926239b9bbea738d270597b0e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2017f38777038db926239b9bbea738d270597b0e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2017f38777038db926239b9bbea738d270597b0e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2017f38777038db926239b9bbea738d270597b0e/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d296b73620d0ea069b8a30c0bb77f52e32618c6a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d296b73620d0ea069b8a30c0bb77f52e32618c6a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d296b73620d0ea069b8a30c0bb77f52e32618c6a"
    }
  ],
  "stats": {
    "total": 113,
    "additions": 75,
    "deletions": 38
  },
  "files": [
    {
      "sha": "d4525f1e69673d2895126fd24dacfbf51249776a",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2017f38777038db926239b9bbea738d270597b0e/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2017f38777038db926239b9bbea738d270597b0e/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=2017f38777038db926239b9bbea738d270597b0e",
      "patch": "@@ -1,3 +1,11 @@\n+2021-03-05  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 27521\n+\t* dwarf2.c (is_str_attr): Add DW_FORM_strx* forms.\n+\t(read_indexed_string): Placeholder function.\n+\t(read_attribute_value): Handle DW_FORM_strx* and DW_FORM_addrx*\n+\tforms.\n+\n 2021-03-05  Alan Modra  <amodra@gmail.com>\n \n \t* reloc.c (bfd_perform_relocation): Revert 2021-01-12 and"
    },
    {
      "sha": "b42e641aa3b9247cb5aa323ee90f4efd18f60022",
      "filename": "bfd/dwarf2.c",
      "status": "modified",
      "additions": 67,
      "deletions": 38,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2017f38777038db926239b9bbea738d270597b0e/bfd/dwarf2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2017f38777038db926239b9bbea738d270597b0e/bfd/dwarf2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/dwarf2.c?ref=2017f38777038db926239b9bbea738d270597b0e",
      "patch": "@@ -1160,8 +1160,23 @@ read_abbrevs (bfd *abfd, bfd_uint64_t offset, struct dwarf2_debug *stash,\n static inline bfd_boolean\n is_str_attr (enum dwarf_form form)\n {\n-  return (form == DW_FORM_string || form == DW_FORM_strp\n-\t  || form == DW_FORM_line_strp || form == DW_FORM_GNU_strp_alt);\n+  return (form == DW_FORM_string\n+\t  || form == DW_FORM_strp\n+\t  || form == DW_FORM_strx\n+\t  || form == DW_FORM_strx1\n+\t  || form == DW_FORM_strx2\n+\t  || form == DW_FORM_strx3\n+\t  || form == DW_FORM_strx4\n+\t  || form == DW_FORM_line_strp\n+\t  || form == DW_FORM_GNU_strp_alt);\n+}\n+\n+static const char *\n+read_indexed_string (bfd_uint64_t index ATTRIBUTE_UNUSED,\n+\t\t     struct comp_unit * unit ATTRIBUTE_UNUSED)\n+{\n+  /* FIXME: Add support for indexed strings.  */\n+  return \"<indexed strings not yet supported>\";\n }\n \n /* Read and fill in the value of attribute ATTR as described by FORM.\n@@ -1192,6 +1207,9 @@ read_attribute_value (struct attribute *  attr,\n \n   switch (form)\n     {\n+    case DW_FORM_flag_present:\n+      attr->u.val = 1;\n+      break;\n     case DW_FORM_ref_addr:\n       /* DW_FORM_ref_addr is an address in DWARF2, and an offset in\n \t DWARF3.  */\n@@ -1237,15 +1255,32 @@ read_attribute_value (struct attribute *  attr,\n       info_ptr = read_n_bytes (info_ptr, info_ptr_end, blk);\n       attr->u.blk = blk;\n       break;\n+    case DW_FORM_ref1:\n+    case DW_FORM_flag:\n+    case DW_FORM_data1:\n+    case DW_FORM_addrx1:\n+      attr->u.val = read_1_byte (abfd, info_ptr, info_ptr_end);\n+      info_ptr += 1;\n+      break;\n     case DW_FORM_data2:\n+    case DW_FORM_ref2:\n       attr->u.val = read_2_bytes (abfd, info_ptr, info_ptr_end);\n       info_ptr += 2;\n       break;\n+    case DW_FORM_addrx3:\n+      attr->u.val = read_4_bytes (abfd, info_ptr, info_ptr_end);\n+      attr->u.val &= 0xffffff;\n+      info_ptr += 3;\n+      break;\n+    case DW_FORM_ref4:\n     case DW_FORM_data4:\n+    case DW_FORM_addrx4:\n       attr->u.val = read_4_bytes (abfd, info_ptr, info_ptr_end);\n       info_ptr += 4;\n       break;\n     case DW_FORM_data8:\n+    case DW_FORM_ref8:\n+    case DW_FORM_ref_sig8:\n       attr->u.val = read_8_bytes (abfd, info_ptr, info_ptr_end);\n       info_ptr += 8;\n       break;\n@@ -1265,6 +1300,33 @@ read_attribute_value (struct attribute *  attr,\n       attr->u.str = read_alt_indirect_string (unit, info_ptr, info_ptr_end, &bytes_read);\n       info_ptr += bytes_read;\n       break;\n+    case DW_FORM_strx1:\n+      attr->u.val = read_1_byte (abfd, info_ptr, info_ptr_end);\n+      info_ptr += 1;\n+      attr->u.str = (char *) read_indexed_string (attr->u.val, unit);\n+      break;\n+    case DW_FORM_strx2:\n+      attr->u.val = read_2_bytes (abfd, info_ptr, info_ptr_end);\n+      info_ptr += 2;\n+      attr->u.str = (char *) read_indexed_string (attr->u.val, unit);\n+      break;\n+    case DW_FORM_strx3:\n+      attr->u.val = read_4_bytes (abfd, info_ptr, info_ptr_end);\n+      info_ptr += 3;\n+      attr->u.val &= 0xffffff;\n+      attr->u.str = (char *) read_indexed_string (attr->u.val, unit);\n+      break;\n+    case DW_FORM_strx4:\n+      attr->u.val = read_4_bytes (abfd, info_ptr, info_ptr_end);\n+      info_ptr += 4;\n+      attr->u.str = (char *) read_indexed_string (attr->u.val, unit);\n+      break;\n+    case DW_FORM_strx:\n+      attr->u.val = _bfd_safe_read_leb128 (abfd, info_ptr, &bytes_read,\n+\t\t\t\t\t FALSE, info_ptr_end);\n+      info_ptr += bytes_read;\n+      attr->u.str = (char *) read_indexed_string (attr->u.val, unit);\n+      break;\n     case DW_FORM_exprloc:\n     case DW_FORM_block:\n       amt = sizeof (struct dwarf_block);\n@@ -1287,48 +1349,14 @@ read_attribute_value (struct attribute *  attr,\n       info_ptr = read_n_bytes (info_ptr, info_ptr_end, blk);\n       attr->u.blk = blk;\n       break;\n-    case DW_FORM_data1:\n-      attr->u.val = read_1_byte (abfd, info_ptr, info_ptr_end);\n-      info_ptr += 1;\n-      break;\n-    case DW_FORM_flag:\n-      attr->u.val = read_1_byte (abfd, info_ptr, info_ptr_end);\n-      info_ptr += 1;\n-      break;\n-    case DW_FORM_flag_present:\n-      attr->u.val = 1;\n-      break;\n     case DW_FORM_sdata:\n       attr->u.sval = _bfd_safe_read_leb128 (abfd, info_ptr, &bytes_read,\n \t\t\t\t\t    TRUE, info_ptr_end);\n       info_ptr += bytes_read;\n       break;\n-    case DW_FORM_udata:\n-      attr->u.val = _bfd_safe_read_leb128 (abfd, info_ptr, &bytes_read,\n-\t\t\t\t\t   FALSE, info_ptr_end);\n-      info_ptr += bytes_read;\n-      break;\n-    case DW_FORM_ref1:\n-      attr->u.val = read_1_byte (abfd, info_ptr, info_ptr_end);\n-      info_ptr += 1;\n-      break;\n-    case DW_FORM_ref2:\n-      attr->u.val = read_2_bytes (abfd, info_ptr, info_ptr_end);\n-      info_ptr += 2;\n-      break;\n-    case DW_FORM_ref4:\n-      attr->u.val = read_4_bytes (abfd, info_ptr, info_ptr_end);\n-      info_ptr += 4;\n-      break;\n-    case DW_FORM_ref8:\n-      attr->u.val = read_8_bytes (abfd, info_ptr, info_ptr_end);\n-      info_ptr += 8;\n-      break;\n-    case DW_FORM_ref_sig8:\n-      attr->u.val = read_8_bytes (abfd, info_ptr, info_ptr_end);\n-      info_ptr += 8;\n-      break;\n     case DW_FORM_ref_udata:\n+    case DW_FORM_udata:\n+    case DW_FORM_addrx:\n       attr->u.val = _bfd_safe_read_leb128 (abfd, info_ptr, &bytes_read,\n \t\t\t\t\t   FALSE, info_ptr_end);\n       info_ptr += bytes_read;\n@@ -1361,6 +1389,7 @@ read_attribute_value (struct attribute *  attr,\n       info_ptr = read_n_bytes (info_ptr, info_ptr_end, blk);\n       attr->u.blk = blk;\n       break;\n+\n     default:\n       _bfd_error_handler (_(\"DWARF error: invalid or unhandled FORM value: %#x\"),\n \t\t\t  form);"
    }
  ]
}