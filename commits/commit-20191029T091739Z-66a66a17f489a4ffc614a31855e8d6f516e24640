{
  "sha": "66a66a17f489a4ffc614a31855e8d6f516e24640",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjZhNjZhMTdmNDg5YTRmZmM2MTRhMzE4NTVlOGQ2ZjUxNmUyNDY0MA==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-10-29T09:17:39Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-10-29T09:17:39Z"
    },
    "message": "Fix array overruns in the S12Z disassembler.\n\n\t* s12z-dis.c (opr_emit_disassembly): Check for illegal register\n\tvalues.\n\t(shift_size_table): Use a fixed size defined as S12Z_N_SIZES.\n\t(print_insn_s12z):  Check for illegal size values.",
    "tree": {
      "sha": "05d7f8980ceded5a6c341b4bee01813e86c02e7d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/05d7f8980ceded5a6c341b4bee01813e86c02e7d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/66a66a17f489a4ffc614a31855e8d6f516e24640",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/66a66a17f489a4ffc614a31855e8d6f516e24640",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/66a66a17f489a4ffc614a31855e8d6f516e24640",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/66a66a17f489a4ffc614a31855e8d6f516e24640/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2f1575ea6f93a3f0c2b439ac6bf5fe34ef42a1ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f1575ea6f93a3f0c2b439ac6bf5fe34ef42a1ad",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2f1575ea6f93a3f0c2b439ac6bf5fe34ef42a1ad"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 56,
    "deletions": 16
  },
  "files": [
    {
      "sha": "d83b5bab853ee25c01267d7b9eea3defe4febee9",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/66a66a17f489a4ffc614a31855e8d6f516e24640/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/66a66a17f489a4ffc614a31855e8d6f516e24640/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=66a66a17f489a4ffc614a31855e8d6f516e24640",
      "patch": "@@ -1,3 +1,10 @@\n+2019-10-29  Nick Clifton  <nickc@redhat.com>\n+\n+\t* s12z-dis.c (opr_emit_disassembly): Check for illegal register\n+\tvalues.\n+\t(shift_size_table): Use a fixed size defined as S12Z_N_SIZES.\n+\t(print_insn_s12z):  Check for illegal size values.\n+\n 2019-10-28  Nick Clifton  <nickc@redhat.com>\n \n \t* csky-dis.c (csky_chars_to_number): Check for a negative"
    },
    {
      "sha": "5930ab4ef6698b42d2ffd2f5ccd90c8f9270d0e6",
      "filename": "opcodes/s12z-dis.c",
      "status": "modified",
      "additions": 39,
      "deletions": 14,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/66a66a17f489a4ffc614a31855e8d6f516e24640/opcodes/s12z-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/66a66a17f489a4ffc614a31855e8d6f516e24640/opcodes/s12z-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/s12z-dis.c?ref=66a66a17f489a4ffc614a31855e8d6f516e24640",
      "patch": "@@ -25,13 +25,11 @@\n #include <assert.h>\n \n #include \"opcode/s12z.h\"\n-\n #include \"bfd.h\"\n #include \"dis-asm.h\"\n-\n #include \"disassemble.h\"\n-\n #include \"s12z-opc.h\"\n+#include \"opintl.h\"\n \n struct mem_read_abstraction\n {\n@@ -255,7 +253,11 @@ opr_emit_disassembly (const struct operand *opr,\n     case OPND_CL_REGISTER:\n       {\n         int r = ((struct register_operand*) opr)->reg;\n-\t(*info->fprintf_func) (info->stream, \"%s\", registers[r].name);\n+\n+\tif (r < 0 || r >= S12Z_N_REGISTERS)\n+\t  (*info->fprintf_func) (info->stream, _(\"<illegal reg num>\"));\n+\telse\n+\t  (*info->fprintf_func) (info->stream, \"%s\", registers[r].name);\n       }\n       break;\n     case OPND_CL_REGISTER_ALL16:\n@@ -306,14 +308,25 @@ opr_emit_disassembly (const struct operand *opr,\n \t    break;\n \t  }\n \tif (mo->n_regs > 0)\n-\t  (*info->fprintf_func) (info->stream, fmt,\n-\t\t\t\t registers[mo->regs[0]].name);\n+\t  {\n+\t    int r = mo->regs[0];\n+\n+\t    if (r < 0 || r >= S12Z_N_REGISTERS)\n+\t      (*info->fprintf_func) (info->stream, fmt, _(\"<illegal reg num>\"));\n+\t    else\n+\t      (*info->fprintf_func) (info->stream, fmt, registers[r].name);\n+\t  }\n \tused_reg = 1;\n \n         if (mo->n_regs > used_reg)\n           {\n-            (*info->fprintf_func) (info->stream, \",%s\",\n-\t\t\t\t   registers[mo->regs[used_reg]].name);\n+\t    int r = mo->regs[used_reg];\n+\n+\t    if (r < 0 || r >= S12Z_N_REGISTERS)\n+\t      (*info->fprintf_func) (info->stream, _(\"<illegal reg num>\"));\n+\t    else\n+\t      (*info->fprintf_func) (info->stream, \",%s\",\n+\t\t\t\t     registers[r].name);\n           }\n \n \t(*info->fprintf_func) (info->stream, \"%c\",\n@@ -323,7 +336,9 @@ opr_emit_disassembly (const struct operand *opr,\n     };\n }\n \n-static const char shift_size_table[] = {\n+#define S12Z_N_SIZES 4\n+static const char shift_size_table[S12Z_N_SIZES] =\n+{\n   'b', 'w', 'p', 'l'\n };\n \n@@ -357,6 +372,7 @@ print_insn_s12z (bfd_vma memaddr, struct disassemble_info* info)\n   if (osize == -1)\n     {\n       bool suffix = false;\n+\n       for (o = 0; o < n_operands; ++o)\n \t{\n \t  if (operands[o] && operands[o]->osize != -1)\n@@ -366,18 +382,27 @@ print_insn_s12z (bfd_vma memaddr, struct disassemble_info* info)\n \t\t  (*mra.info->fprintf_func) (mra.info->stream, \"%c\", '.');\n \t\t  suffix = true;\n \t\t}\n-\t      (*mra.info->fprintf_func) (mra.info->stream, \"%c\",\n-\t\t\t\t     shift_size_table[operands[o]->osize]);\n+\n+\t      osize = operands[o]->osize;\n+\n+\t      if (osize < 0 || osize >= S12Z_N_SIZES)\n+\t\t(*mra.info->fprintf_func) (mra.info->stream, _(\"<bad>\"));\n+\t      else\n+\t\t(*mra.info->fprintf_func) (mra.info->stream, \"%c\",\n+\t\t\t\t\t   shift_size_table[osize]);\n+\t\t\n \t    }\n \t}\n     }\n   else\n     {\n-      (*mra.info->fprintf_func) (mra.info->stream, \".%c\",\n-\t\t\t     shift_size_table[osize]);\n+      if (osize < 0 || osize >= S12Z_N_SIZES)\n+\t(*mra.info->fprintf_func) (mra.info->stream, _(\".<bad>\"));\n+      else\n+\t(*mra.info->fprintf_func) (mra.info->stream, \".%c\",\n+\t\t\t\t   shift_size_table[osize]);\n     }\n \n-\n   /* Ship out the operands.  */\n   for (o = 0; o < n_operands; ++o)\n     {"
    },
    {
      "sha": "e7a3577ef7d5e70aaeaaf7268ea30d9f79a3e3bc",
      "filename": "opcodes/s12z-opc.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/66a66a17f489a4ffc614a31855e8d6f516e24640/opcodes/s12z-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/66a66a17f489a4ffc614a31855e8d6f516e24640/opcodes/s12z-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/s12z-opc.c?ref=66a66a17f489a4ffc614a31855e8d6f516e24640",
      "patch": "@@ -2205,8 +2205,16 @@ exg_sex_discrim (struct mem_read_abstraction_base *mra, enum optr hint ATTRIBUTE\n   struct operand *op0 = create_register_operand ((eb & 0xf0) >> 4);\n   struct operand *op1 = create_register_operand (eb & 0xf);\n \n-  const struct reg *r0 = registers + ((struct register_operand *) op0)->reg;\n-  const struct reg *r1 = registers + ((struct register_operand *) op1)->reg;\n+  int reg0 = ((struct register_operand *) op0)->reg;\n+  if (reg0 < 0 || reg0 >= S12Z_N_REGISTERS)\n+    return OP_INVALID;\n+\n+  int reg1 = ((struct register_operand *) op1)->reg;\n+  if (reg1 < 0 || reg1 >= S12Z_N_REGISTERS)\n+    return OP_INVALID;\n+\n+  const struct reg *r0 = registers + reg0;\n+  const struct reg *r1 = registers + reg1;\n \n   enum optr operator = (r0->bytes < r1->bytes) ? OP_sex : OP_exg;\n "
    }
  ]
}