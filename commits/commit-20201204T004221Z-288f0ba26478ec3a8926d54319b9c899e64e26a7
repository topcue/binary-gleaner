{
  "sha": "288f0ba26478ec3a8926d54319b9c899e64e26a7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mjg4ZjBiYTI2NDc4ZWMzYTg5MjZkNTQzMTliOWM4OTllNjRlMjZhNw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-03T05:40:37Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-04T00:42:21Z"
    },
    "message": "asan: readelf: memory leaks\n\nThis tidies some code used by readelf, hopefully fixing some\nintermittent oss-fuzz bug reports that likely could only be reproduced\nby feeding readelf two or more object files on the command line.  The\nsecond and subsequent file may see non-zero state in .bss variables,\nand non-initial values in .data variables.  This patch fixes some of\nthose, and moves some .data variables to .rodata.\n\n\t* dwarf.c (frame_display_row): Do without static variable \"sloc\".\n\t(cu_tu_indexes_read): Move to file scope.\n\t(free_debug_memory): Reset it here, along with level_type_signed.\n\tFree and clear a number of other static variables.\n\t* readelf.c (arm_attr_public_tag <table>): Constify, updating..\n\t(arm_attr_tag_*): ..all these uses.\n\t(process_mips_specific): Free \"rels\" on error path.",
    "tree": {
      "sha": "85c201688e41ebb65db77e9f3d579c90601f507b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/85c201688e41ebb65db77e9f3d579c90601f507b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/288f0ba26478ec3a8926d54319b9c899e64e26a7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/288f0ba26478ec3a8926d54319b9c899e64e26a7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/288f0ba26478ec3a8926d54319b9c899e64e26a7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/288f0ba26478ec3a8926d54319b9c899e64e26a7/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/726d7d1ecfd1fc0966983e1d5e59b527b90cf7c5"
    }
  ],
  "stats": {
    "total": 105,
    "additions": 65,
    "deletions": 40
  },
  "files": [
    {
      "sha": "ccb9da5ef873f67209c5a3885f1225ef9d62dce8",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/288f0ba26478ec3a8926d54319b9c899e64e26a7/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/288f0ba26478ec3a8926d54319b9c899e64e26a7/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=288f0ba26478ec3a8926d54319b9c899e64e26a7",
      "patch": "@@ -1,3 +1,13 @@\n+2020-12-04  Alan Modra  <amodra@gmail.com>\n+\n+\t* dwarf.c (frame_display_row): Do without static variable \"sloc\".\n+\t(cu_tu_indexes_read): Move to file scope.\n+\t(free_debug_memory): Reset it here, along with level_type_signed.\n+\tFree and clear a number of other static variables.\n+\t* readelf.c (arm_attr_public_tag <table>): Constify, updating..\n+\t(arm_attr_tag_*): ..all these uses.\n+\t(process_mips_specific): Free \"rels\" on error path.\n+\n 2020-11-27  Nick Clifton  <nickc@redhat.com>\n \n \tPR 26865"
    },
    {
      "sha": "96b7a57f061b40f0cfaf4bf62ed78fe569ace79e",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 17,
      "deletions": 5,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/288f0ba26478ec3a8926d54319b9c899e64e26a7/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/288f0ba26478ec3a8926d54319b9c899e64e26a7/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=288f0ba26478ec3a8926d54319b9c899e64e26a7",
      "patch": "@@ -8187,11 +8187,9 @@ frame_display_row (Frame_Chunk *fc, int *need_col_headers, unsigned int *max_reg\n \n   if (*need_col_headers)\n     {\n-      static const char *sloc = \"   LOC\";\n-\n       *need_col_headers = 0;\n \n-      printf (\"%-*s CFA      \", eh_addr_size * 2, sloc);\n+      printf (\"%-*s CFA      \", eh_addr_size * 2, \"   LOC\");\n \n       for (r = 0; r < *max_regs; r++)\n \tif (fc->col_type[r] != DW_CFA_unreferenced)\n@@ -10467,15 +10465,15 @@ process_cu_tu_index (struct dwarf_section *section, int do_display)\n   return 1;\n }\n \n+static int cu_tu_indexes_read = -1; /* Tri-state variable.  */\n+\n /* Load the CU and TU indexes if present.  This will build a list of\n    section sets that we can use to associate a .debug_info.dwo section\n    with its associated .debug_abbrev.dwo section in a .dwp file.  */\n \n static bfd_boolean\n load_cu_tu_indexes (void *file)\n {\n-  static int cu_tu_indexes_read = -1; /* Tri-state variable.  */\n-\n   /* If we have already loaded (or tried to load) the CU and TU indexes\n      then do not bother to repeat the task.  */\n   if (cu_tu_indexes_read == -1)\n@@ -11249,6 +11247,20 @@ free_debug_memory (void)\n   cu_abbrev_map = NULL;\n   next_free_abbrev_map_entry = 0;\n \n+  free (shndx_pool);\n+  shndx_pool = NULL;\n+  shndx_pool_size = 0;\n+  shndx_pool_used = 0;\n+  free (cu_sets);\n+  cu_sets = NULL;\n+  cu_count = 0;\n+  free (tu_sets);\n+  tu_sets = NULL;\n+  tu_count = 0;\n+\n+  memset (level_type_signed, 0, sizeof level_type_signed);\n+  cu_tu_indexes_read = -1;\n+\n   for (i = 0; i < max; i++)\n     free_debug_section ((enum dwarf_section_display_enum) i);\n "
    },
    {
      "sha": "7f634d94bf386498bdc0567a65cc3b125fb7431e",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 38,
      "deletions": 35,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/288f0ba26478ec3a8926d54319b9c899e64e26a7/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/288f0ba26478ec3a8926d54319b9c899e64e26a7/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=288f0ba26478ec3a8926d54319b9c899e64e26a7",
      "patch": "@@ -15570,77 +15570,77 @@ typedef struct\n   const char * name;\n   /* 0 = special, 1 = string, 2 = uleb123, > 0x80 == table lookup.  */\n   unsigned int type;\n-  const char ** table;\n+  const char *const *table;\n } arm_attr_public_tag;\n \n-static const char * arm_attr_tag_CPU_arch[] =\n+static const char *const arm_attr_tag_CPU_arch[] =\n   {\"Pre-v4\", \"v4\", \"v4T\", \"v5T\", \"v5TE\", \"v5TEJ\", \"v6\", \"v6KZ\", \"v6T2\",\n    \"v6K\", \"v7\", \"v6-M\", \"v6S-M\", \"v7E-M\", \"v8\", \"v8-R\", \"v8-M.baseline\",\n    \"v8-M.mainline\", \"\", \"\", \"\", \"v8.1-M.mainline\"};\n-static const char * arm_attr_tag_ARM_ISA_use[] = {\"No\", \"Yes\"};\n-static const char * arm_attr_tag_THUMB_ISA_use[] =\n+static const char *const arm_attr_tag_ARM_ISA_use[] = {\"No\", \"Yes\"};\n+static const char *const arm_attr_tag_THUMB_ISA_use[] =\n   {\"No\", \"Thumb-1\", \"Thumb-2\", \"Yes\"};\n-static const char * arm_attr_tag_FP_arch[] =\n+static const char *const arm_attr_tag_FP_arch[] =\n   {\"No\", \"VFPv1\", \"VFPv2\", \"VFPv3\", \"VFPv3-D16\", \"VFPv4\", \"VFPv4-D16\",\n    \"FP for ARMv8\", \"FPv5/FP-D16 for ARMv8\"};\n-static const char * arm_attr_tag_WMMX_arch[] = {\"No\", \"WMMXv1\", \"WMMXv2\"};\n-static const char * arm_attr_tag_Advanced_SIMD_arch[] =\n+static const char *const arm_attr_tag_WMMX_arch[] = {\"No\", \"WMMXv1\", \"WMMXv2\"};\n+static const char *const arm_attr_tag_Advanced_SIMD_arch[] =\n   {\"No\", \"NEONv1\", \"NEONv1 with Fused-MAC\", \"NEON for ARMv8\",\n    \"NEON for ARMv8.1\"};\n-static const char * arm_attr_tag_PCS_config[] =\n+static const char *const arm_attr_tag_PCS_config[] =\n   {\"None\", \"Bare platform\", \"Linux application\", \"Linux DSO\", \"PalmOS 2004\",\n    \"PalmOS (reserved)\", \"SymbianOS 2004\", \"SymbianOS (reserved)\"};\n-static const char * arm_attr_tag_ABI_PCS_R9_use[] =\n+static const char *const arm_attr_tag_ABI_PCS_R9_use[] =\n   {\"V6\", \"SB\", \"TLS\", \"Unused\"};\n-static const char * arm_attr_tag_ABI_PCS_RW_data[] =\n+static const char *const arm_attr_tag_ABI_PCS_RW_data[] =\n   {\"Absolute\", \"PC-relative\", \"SB-relative\", \"None\"};\n-static const char * arm_attr_tag_ABI_PCS_RO_data[] =\n+static const char *const arm_attr_tag_ABI_PCS_RO_data[] =\n   {\"Absolute\", \"PC-relative\", \"None\"};\n-static const char * arm_attr_tag_ABI_PCS_GOT_use[] =\n+static const char *const arm_attr_tag_ABI_PCS_GOT_use[] =\n   {\"None\", \"direct\", \"GOT-indirect\"};\n-static const char * arm_attr_tag_ABI_PCS_wchar_t[] =\n+static const char *const arm_attr_tag_ABI_PCS_wchar_t[] =\n   {\"None\", \"??? 1\", \"2\", \"??? 3\", \"4\"};\n-static const char * arm_attr_tag_ABI_FP_rounding[] = {\"Unused\", \"Needed\"};\n-static const char * arm_attr_tag_ABI_FP_denormal[] =\n+static const char *const arm_attr_tag_ABI_FP_rounding[] = {\"Unused\", \"Needed\"};\n+static const char *const arm_attr_tag_ABI_FP_denormal[] =\n   {\"Unused\", \"Needed\", \"Sign only\"};\n-static const char * arm_attr_tag_ABI_FP_exceptions[] = {\"Unused\", \"Needed\"};\n-static const char * arm_attr_tag_ABI_FP_user_exceptions[] = {\"Unused\", \"Needed\"};\n-static const char * arm_attr_tag_ABI_FP_number_model[] =\n+static const char *const arm_attr_tag_ABI_FP_exceptions[] = {\"Unused\", \"Needed\"};\n+static const char *const arm_attr_tag_ABI_FP_user_exceptions[] = {\"Unused\", \"Needed\"};\n+static const char *const arm_attr_tag_ABI_FP_number_model[] =\n   {\"Unused\", \"Finite\", \"RTABI\", \"IEEE 754\"};\n-static const char * arm_attr_tag_ABI_enum_size[] =\n+static const char *const arm_attr_tag_ABI_enum_size[] =\n   {\"Unused\", \"small\", \"int\", \"forced to int\"};\n-static const char * arm_attr_tag_ABI_HardFP_use[] =\n+static const char *const arm_attr_tag_ABI_HardFP_use[] =\n   {\"As Tag_FP_arch\", \"SP only\", \"Reserved\", \"Deprecated\"};\n-static const char * arm_attr_tag_ABI_VFP_args[] =\n+static const char *const arm_attr_tag_ABI_VFP_args[] =\n   {\"AAPCS\", \"VFP registers\", \"custom\", \"compatible\"};\n-static const char * arm_attr_tag_ABI_WMMX_args[] =\n+static const char *const arm_attr_tag_ABI_WMMX_args[] =\n   {\"AAPCS\", \"WMMX registers\", \"custom\"};\n-static const char * arm_attr_tag_ABI_optimization_goals[] =\n+static const char *const arm_attr_tag_ABI_optimization_goals[] =\n   {\"None\", \"Prefer Speed\", \"Aggressive Speed\", \"Prefer Size\",\n     \"Aggressive Size\", \"Prefer Debug\", \"Aggressive Debug\"};\n-static const char * arm_attr_tag_ABI_FP_optimization_goals[] =\n+static const char *const arm_attr_tag_ABI_FP_optimization_goals[] =\n   {\"None\", \"Prefer Speed\", \"Aggressive Speed\", \"Prefer Size\",\n     \"Aggressive Size\", \"Prefer Accuracy\", \"Aggressive Accuracy\"};\n-static const char * arm_attr_tag_CPU_unaligned_access[] = {\"None\", \"v6\"};\n-static const char * arm_attr_tag_FP_HP_extension[] =\n+static const char *const arm_attr_tag_CPU_unaligned_access[] = {\"None\", \"v6\"};\n+static const char *const arm_attr_tag_FP_HP_extension[] =\n   {\"Not Allowed\", \"Allowed\"};\n-static const char * arm_attr_tag_ABI_FP_16bit_format[] =\n+static const char *const arm_attr_tag_ABI_FP_16bit_format[] =\n   {\"None\", \"IEEE 754\", \"Alternative Format\"};\n-static const char * arm_attr_tag_DSP_extension[] =\n+static const char *const arm_attr_tag_DSP_extension[] =\n   {\"Follow architecture\", \"Allowed\"};\n-static const char * arm_attr_tag_MPextension_use[] =\n+static const char *const arm_attr_tag_MPextension_use[] =\n   {\"Not Allowed\", \"Allowed\"};\n-static const char * arm_attr_tag_DIV_use[] =\n+static const char *const arm_attr_tag_DIV_use[] =\n   {\"Allowed in Thumb-ISA, v7-R or v7-M\", \"Not allowed\",\n     \"Allowed in v7-A with integer division extension\"};\n-static const char * arm_attr_tag_T2EE_use[] = {\"Not Allowed\", \"Allowed\"};\n-static const char * arm_attr_tag_Virtualization_use[] =\n+static const char *const arm_attr_tag_T2EE_use[] = {\"Not Allowed\", \"Allowed\"};\n+static const char *const arm_attr_tag_Virtualization_use[] =\n   {\"Not Allowed\", \"TrustZone\", \"Virtualization Extensions\",\n     \"TrustZone and Virtualization Extensions\"};\n-static const char * arm_attr_tag_MPextension_use_legacy[] =\n+static const char *const arm_attr_tag_MPextension_use_legacy[] =\n   {\"Not Allowed\", \"Allowed\"};\n \n-static const char * arm_attr_tag_MVE_arch[] =\n+static const char *const arm_attr_tag_MVE_arch[] =\n   {\"No MVE\", \"MVE Integer only\", \"MVE Integer and FP\"};\n \n #define LOOKUP(id, name) \\\n@@ -18038,7 +18038,10 @@ process_mips_specific (Filedata * filedata)\n       data = (unsigned char *) get_data (NULL, filedata, offset, end - mips_pltgot,\n                                          1, _(\"Procedure Linkage Table data\"));\n       if (data == NULL)\n-\treturn FALSE;\n+\t{\n+\t  free (rels);\n+\t  return FALSE;\n+\t}\n \n       printf (\"\\nPLT GOT:\\n\\n\");\n       printf (_(\" Reserved entries:\\n\"));"
    }
  ]
}