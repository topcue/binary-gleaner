{
  "sha": "403b0b61f6d4358aee8493cb1d11814e368942c9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDAzYjBiNjFmNmQ0MzU4YWVlODQ5M2NiMWQxMTgxNGUzNjg5NDJjOQ==",
  "commit": {
    "author": {
      "name": "Max Filippov",
      "email": "jcmvbkbc@gmail.com",
      "date": "2019-04-02T21:32:42Z"
    },
    "committer": {
      "name": "Max Filippov",
      "email": "jcmvbkbc@gmail.com",
      "date": "2019-04-03T17:24:15Z"
    },
    "message": "gas: use literals/const16 for xtensa loop relaxation\n\nLoop opcode relaxation that uses addi/addmi doesn't work well with other\nrelaxations that may cause code movement. Instead of encoding fixed loop\nend offset in the relaxed sequence use l32r or a pair of const16 to load\nloop end address. This way the address of the loop end gets a relocation\nrecord and it gets updated appropriately.\n\ngas/\n2019-04-03  Max Filippov  <jcmvbkbc@gmail.com>\n\n\t* config/tc-xtensa.c (convert_frag_immed): Drop\n\tconvert_frag_immed_finish_loop invocation.\n\t(convert_frag_immed_finish_loop): Drop declaration and\n\tdefinition.\n\t* config/xtensa-relax.c (widen_spec_list): Replace loop\n\twidening that uses addi/addmi with widening that uses l32r\n\tand const16.",
    "tree": {
      "sha": "ad564c6c9f423c3a756aead6577a242c46da5e1e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ad564c6c9f423c3a756aead6577a242c46da5e1e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/403b0b61f6d4358aee8493cb1d11814e368942c9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/403b0b61f6d4358aee8493cb1d11814e368942c9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/403b0b61f6d4358aee8493cb1d11814e368942c9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/403b0b61f6d4358aee8493cb1d11814e368942c9/comments",
  "author": {
    "login": "jcmvbkbc",
    "id": 166731,
    "node_id": "MDQ6VXNlcjE2NjczMQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jcmvbkbc",
    "html_url": "https://github.com/jcmvbkbc",
    "followers_url": "https://api.github.com/users/jcmvbkbc/followers",
    "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}",
    "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions",
    "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs",
    "repos_url": "https://api.github.com/users/jcmvbkbc/repos",
    "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jcmvbkbc",
    "id": 166731,
    "node_id": "MDQ6VXNlcjE2NjczMQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jcmvbkbc",
    "html_url": "https://github.com/jcmvbkbc",
    "followers_url": "https://api.github.com/users/jcmvbkbc/followers",
    "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}",
    "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions",
    "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs",
    "repos_url": "https://api.github.com/users/jcmvbkbc/repos",
    "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1c6aafe894645ca1da5c0dd0661bca19caf37ad0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c6aafe894645ca1da5c0dd0661bca19caf37ad0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1c6aafe894645ca1da5c0dd0661bca19caf37ad0"
    }
  ],
  "stats": {
    "total": 207,
    "additions": 65,
    "deletions": 142
  },
  "files": [
    {
      "sha": "b91da2a2154e4a57a25c0e95f2e1f0626cc6f067",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403b0b61f6d4358aee8493cb1d11814e368942c9/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403b0b61f6d4358aee8493cb1d11814e368942c9/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=403b0b61f6d4358aee8493cb1d11814e368942c9",
      "patch": "@@ -1,3 +1,13 @@\n+2019-04-03  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/tc-xtensa.c (convert_frag_immed): Drop\n+\tconvert_frag_immed_finish_loop invocation.\n+\t(convert_frag_immed_finish_loop): Drop declaration and\n+\tdefinition.\n+\t* config/xtensa-relax.c (widen_spec_list): Replace loop\n+\twidening that uses addi/addmi with widening that uses l32r\n+\tand const16.\n+\n 2019-04-01  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (arm_ext_table): New struct type."
    },
    {
      "sha": "0cc06361cf6fd3218470dd3b0387f998a48c3147",
      "filename": "gas/config/tc-xtensa.c",
      "status": "modified",
      "additions": 0,
      "deletions": 120,
      "changes": 120,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403b0b61f6d4358aee8493cb1d11814e368942c9/gas/config/tc-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403b0b61f6d4358aee8493cb1d11814e368942c9/gas/config/tc-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-xtensa.c?ref=403b0b61f6d4358aee8493cb1d11814e368942c9",
      "patch": "@@ -10668,7 +10668,6 @@ convert_frag_fill_nop (fragS *fragP)\n static fixS *fix_new_exp_in_seg\n   (segT, subsegT, fragS *, int, int, expressionS *, int,\n    bfd_reloc_code_real_type);\n-static void convert_frag_immed_finish_loop (segT, fragS *, TInsn *);\n \n static void\n convert_frag_immed (segT segP,\n@@ -10910,9 +10909,6 @@ convert_frag_immed (segT segP,\n \t}\n     }\n \n-  if (expanded && xtensa_opcode_is_loop (isa, orig_tinsn.opcode) == 1)\n-    convert_frag_immed_finish_loop (segP, fragP, &orig_tinsn);\n-\n   if (expanded && is_direct_call_opcode (orig_tinsn.opcode))\n     {\n       /* Add an expansion note on the expanded instruction.  */\n@@ -10949,122 +10945,6 @@ fix_new_exp_in_seg (segT new_seg,\n }\n \n \n-/* Relax a loop instruction so that it can span loop >256 bytes.\n-\n-                  loop    as, .L1\n-          .L0:\n-                  rsr     as, LEND\n-                  wsr     as, LBEG\n-                  addi    as, as, lo8 (label-.L1)\n-                  addmi   as, as, mid8 (label-.L1)\n-                  wsr     as, LEND\n-                  isync\n-                  rsr     as, LCOUNT\n-                  addi    as, as, 1\n-          .L1:\n-                  <<body>>\n-          label:\n-*/\n-\n-static void\n-convert_frag_immed_finish_loop (segT segP, fragS *fragP, TInsn *tinsn)\n-{\n-  TInsn loop_insn;\n-  TInsn addi_insn;\n-  TInsn addmi_insn;\n-  unsigned long target;\n-  static xtensa_insnbuf insnbuf = NULL;\n-  unsigned int loop_length, loop_length_hi, loop_length_lo;\n-  xtensa_isa isa = xtensa_default_isa;\n-  addressT loop_offset;\n-  addressT addi_offset = 9;\n-  addressT addmi_offset = 12;\n-  fragS *next_fragP;\n-  int target_count;\n-\n-  if (!insnbuf)\n-    insnbuf = xtensa_insnbuf_alloc (isa);\n-\n-  /* Get the loop offset.  */\n-  loop_offset = get_expanded_loop_offset (tinsn->opcode);\n-\n-  /* Validate that there really is a LOOP at the loop_offset.  Because\n-     loops are not bundleable, we can assume that the instruction will be\n-     in slot 0.  */\n-  tinsn_from_chars (&loop_insn, fragP->fr_opcode + loop_offset, 0);\n-  tinsn_immed_from_frag (&loop_insn, fragP, 0);\n-\n-  gas_assert (xtensa_opcode_is_loop (isa, loop_insn.opcode) == 1);\n-  addi_offset += loop_offset;\n-  addmi_offset += loop_offset;\n-\n-  gas_assert (tinsn->ntok == 2);\n-  if (tinsn->tok[1].X_op == O_constant)\n-    target = tinsn->tok[1].X_add_number;\n-  else if (tinsn->tok[1].X_op == O_symbol)\n-    {\n-      /* Find the fragment.  */\n-      symbolS *sym = tinsn->tok[1].X_add_symbol;\n-      gas_assert (S_GET_SEGMENT (sym) == segP\n-\t      || S_GET_SEGMENT (sym) == absolute_section);\n-      target = (S_GET_VALUE (sym) + tinsn->tok[1].X_add_number);\n-    }\n-  else\n-    {\n-      as_bad (_(\"invalid expression evaluation type %d\"), tinsn->tok[1].X_op);\n-      target = 0;\n-    }\n-\n-  loop_length = target - (fragP->fr_address + fragP->fr_fix);\n-  loop_length_hi = loop_length & ~0x0ff;\n-  loop_length_lo = loop_length & 0x0ff;\n-  if (loop_length_lo >= 128)\n-    {\n-      loop_length_lo -= 256;\n-      loop_length_hi += 256;\n-    }\n-\n-  /* Because addmi sign-extends the immediate, 'loop_length_hi' can be at most\n-     32512.  If the loop is larger than that, then we just fail.  */\n-  if (loop_length_hi > 32512)\n-    as_bad_where (fragP->fr_file, fragP->fr_line,\n-\t\t  _(\"loop too long for LOOP instruction\"));\n-\n-  tinsn_from_chars (&addi_insn, fragP->fr_opcode + addi_offset, 0);\n-  gas_assert (addi_insn.opcode == xtensa_addi_opcode);\n-\n-  tinsn_from_chars (&addmi_insn, fragP->fr_opcode + addmi_offset, 0);\n-  gas_assert (addmi_insn.opcode == xtensa_addmi_opcode);\n-\n-  set_expr_const (&addi_insn.tok[2], loop_length_lo);\n-  tinsn_to_insnbuf (&addi_insn, insnbuf);\n-\n-  fragP->tc_frag_data.is_insn = TRUE;\n-  xtensa_insnbuf_to_chars\n-    (isa, insnbuf, (unsigned char *) fragP->fr_opcode + addi_offset, 0);\n-\n-  set_expr_const (&addmi_insn.tok[2], loop_length_hi);\n-  tinsn_to_insnbuf (&addmi_insn, insnbuf);\n-  xtensa_insnbuf_to_chars\n-    (isa, insnbuf, (unsigned char *) fragP->fr_opcode + addmi_offset, 0);\n-\n-  /* Walk through all of the frags from here to the loop end\n-     and mark them as no_transform to keep them from being modified\n-     by the linker.  If we ever have a relocation for the\n-     addi/addmi of the difference of two symbols we can remove this.  */\n-\n-  target_count = 0;\n-  for (next_fragP = fragP; next_fragP != NULL;\n-       next_fragP = next_fragP->fr_next)\n-    {\n-      next_fragP->tc_frag_data.is_no_transform = TRUE;\n-      if (next_fragP->tc_frag_data.is_loop_target)\n-\ttarget_count++;\n-      if (target_count == 2)\n-\tbreak;\n-    }\n-}\n-\n \f\n /* A map that keeps information on a per-subsegment basis.  This is\n    maintained during initial assembly, but is invalid once the"
    },
    {
      "sha": "daf15d52c259ef7d2f257bebd3d26b6b316ccf45",
      "filename": "gas/config/xtensa-relax.c",
      "status": "modified",
      "additions": 55,
      "deletions": 22,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/403b0b61f6d4358aee8493cb1d11814e368942c9/gas/config/xtensa-relax.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/403b0b61f6d4358aee8493cb1d11814e368942c9/gas/config/xtensa-relax.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/xtensa-relax.c?ref=403b0b61f6d4358aee8493cb1d11814e368942c9",
      "patch": "@@ -87,13 +87,7 @@\n    when the first and second operands are not the same as specified\n    by the \"| %at!=%as\" precondition clause.\n    {\"l32i %at,%as,%imm | %at!=%as\",\n-   \"LITERAL %imm; l32r %at,%LITERAL; add %at,%at,%as; l32i %at,%at,0\"}\n-\n-   There is special case for loop instructions here, but because we do\n-   not currently have the ability to represent the difference of two\n-   symbols, the conversion requires special code in the assembler to\n-   write the operands of the addi/addmi pair representing the\n-   difference of the old and new loop end label.  */\n+   \"LITERAL %imm; l32r %at,%LITERAL; add %at,%at,%as; l32i %at,%at,0\"}  */\n \n #include \"as.h\"\n #include \"xtensa-isa.h\"\n@@ -306,44 +300,83 @@ static string_pattern_pair widen_spec_list[] =\n   {\"l32i %at,%as,%imm | %at!=%as ? IsaUseConst16\",\n    \"const16 %at,HI16U(%imm); const16 %at,LOW16U(%imm); add %at,%at,%as; l32i %at,%at,0\"},\n \n-  /* This is only PART of the loop instruction.  In addition,\n-     hardcoded into its use is a modification of the final operand in\n-     the instruction in bytes 9 and 12.  */\n-  {\"loop %as,%label | %as!=1 ? IsaUseLoops\",\n+  /* Widening loops with literals.  */\n+  {\"loop %as,%label | %as!=1 ? IsaUseLoops ? IsaUseL32R\",\n+   \"loop %as,%LABEL;\"\n+   \"rsr.lend    %as;\"\t\t/* LEND */\n+   \"wsr.lbeg    %as;\"\t\t/* LBEG */\n+   \"LITERAL     %label;\"\n+   \"l32r        %as, %LITERAL;\"\n+   \"nop;\"\n+   \"wsr.lend    %as;\"\n+   \"isync;\"\n+   \"rsr.lcount    %as;\"\t\t/* LCOUNT */\n+   \"addi    %as, %as, 1;\"\n+   \"LABEL\"},\n+  {\"loopgtz %as,%label | %as!=1 ? IsaUseLoops ? IsaUseL32R\",\n+   \"beqz    %as,%label;\"\n+   \"bltz    %as,%label;\"\n+   \"loopgtz %as,%LABEL;\"\n+   \"rsr.lend    %as;\"\t\t/* LEND */\n+   \"wsr.lbeg    %as;\"\t\t/* LBEG */\n+   \"LITERAL     %label;\"\n+   \"l32r        %as, %LITERAL;\"\n+   \"nop;\"\n+   \"wsr.lend    %as;\"\n+   \"isync;\"\n+   \"rsr.lcount    %as;\"\t\t/* LCOUNT */\n+   \"addi    %as, %as, 1;\"\n+   \"LABEL\"},\n+  {\"loopnez %as,%label | %as!=1 ? IsaUseLoops ? IsaUseL32R\",\n+   \"beqz     %as,%label;\"\n+   \"loopnez %as,%LABEL;\"\n+   \"rsr.lend    %as;\"\t\t/* LEND */\n+   \"wsr.lbeg    %as;\"\t\t/* LBEG */\n+   \"LITERAL     %label;\"\n+   \"l32r        %as, %LITERAL;\"\n+   \"nop;\"\n+   \"wsr.lend    %as;\"\n+   \"isync;\"\n+   \"rsr.lcount    %as;\"\t\t/* LCOUNT */\n+   \"addi    %as, %as, 1;\"\n+   \"LABEL\"},\n+\n+  /* Widening loops with const16.  */\n+  {\"loop %as,%label | %as!=1 ? IsaUseLoops ? IsaUseConst16\",\n    \"loop %as,%LABEL;\"\n    \"rsr.lend    %as;\"\t\t/* LEND */\n    \"wsr.lbeg    %as;\"\t\t/* LBEG */\n-   \"addi    %as, %as, 0;\"\t/* lo8(%label-%LABEL1) */\n-   \"addmi   %as, %as, 0;\"\t/* mid8(%label-%LABEL1) */\n+   \"const16     %as,HI16U(%label);\"\n+   \"const16     %as,LOW16U(%label);\"\n    \"wsr.lend    %as;\"\n    \"isync;\"\n    \"rsr.lcount    %as;\"\t\t/* LCOUNT */\n-   \"addi    %as, %as, 1;\"\t/* density -> addi.n %as, %as, 1 */\n+   \"addi    %as, %as, 1;\"\n    \"LABEL\"},\n-  {\"loopgtz %as,%label | %as!=1 ? IsaUseLoops\",\n+  {\"loopgtz %as,%label | %as!=1 ? IsaUseLoops ? IsaUseConst16\",\n    \"beqz    %as,%label;\"\n    \"bltz    %as,%label;\"\n    \"loopgtz %as,%LABEL;\"\n    \"rsr.lend    %as;\"\t\t/* LEND */\n    \"wsr.lbeg    %as;\"\t\t/* LBEG */\n-   \"addi    %as, %as, 0;\"\t/* lo8(%label-%LABEL1) */\n-   \"addmi   %as, %as, 0;\"\t/* mid8(%label-%LABEL1) */\n+   \"const16     %as,HI16U(%label);\"\n+   \"const16     %as,LOW16U(%label);\"\n    \"wsr.lend    %as;\"\n    \"isync;\"\n    \"rsr.lcount    %as;\"\t\t/* LCOUNT */\n-   \"addi    %as, %as, 1;\"\t/* density -> addi.n %as, %as, 1 */\n+   \"addi    %as, %as, 1;\"\n    \"LABEL\"},\n-  {\"loopnez %as,%label | %as!=1 ? IsaUseLoops\",\n+  {\"loopnez %as,%label | %as!=1 ? IsaUseLoops ? IsaUseConst16\",\n    \"beqz     %as,%label;\"\n    \"loopnez %as,%LABEL;\"\n    \"rsr.lend    %as;\"\t\t/* LEND */\n    \"wsr.lbeg    %as;\"\t\t/* LBEG */\n-   \"addi    %as, %as, 0;\"\t/* lo8(%label-%LABEL1) */\n-   \"addmi   %as, %as, 0;\"\t/* mid8(%label-%LABEL1) */\n+   \"const16     %as,HI16U(%label);\"\n+   \"const16     %as,LOW16U(%label);\"\n    \"wsr.lend    %as;\"\n    \"isync;\"\n    \"rsr.lcount    %as;\"\t\t/* LCOUNT */\n-   \"addi    %as, %as, 1;\"\t/* density -> addi.n %as, %as, 1 */\n+   \"addi    %as, %as, 1;\"\n    \"LABEL\"},\n \n   /* Relaxing to wide branches.  Order is important here.  With wide"
    }
  ]
}