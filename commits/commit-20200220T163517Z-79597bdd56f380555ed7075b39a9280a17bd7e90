{
  "sha": "79597bdd56f380555ed7075b39a9280a17bd7e90",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Nzk1OTdiZGQ1NmYzODA1NTVlZDcwNzViMzlhOTI4MGExN2JkN2U5MA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:12:01Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:17Z"
    },
    "message": "gdbserver: turn btrace-related target ops into methods\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's btrace-related ops (enable_btrace,\n\tdisable_btrace, read_btrace, read_btrace_conf) into methods of\n\tprocess_target.\n\n\t* target.h (struct process_stratum_target): Remove the target ops.\n\t(class process_target): Add the target ops.\n\t(target_enable_btrace): Update.\n\t(target_disable_btrace): Update.\n\t(target_read_btrace): Update.\n\t(target_read_btrace_conf): Update.\n\t* target.cc (process_target::enable_btrace): Define.\n\t(process_target::disable_btrace): Define.\n\t(process_target::read_btrace): Define.\n\t(process_target::read_btrace_conf): Define.\n\n\tUpdate the derived classes and callers below.\n\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_process_target:enable_btrace): Define as a wrapper around\n\tlinux_enable_btrace.\n\t(linux_low_disable_btrace): Turn into ...\n\t(linux_process_target::disable_btrace): ... this.\n\t(linux_low_read_btrace): Turn into ...\n\t(linux_process_target::read_btrace): ... this.\n\t(linux_low_btrace_conf): Turn into ...\n\t(linux_process_target::read_btrace_conf): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t* win32-low.cc (win32_target_ops): Update.",
    "tree": {
      "sha": "596147d06b37580578c6cd27b4e5ac245201f193",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/596147d06b37580578c6cd27b4e5ac245201f193"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/79597bdd56f380555ed7075b39a9280a17bd7e90",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79597bdd56f380555ed7075b39a9280a17bd7e90",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/79597bdd56f380555ed7075b39a9280a17bd7e90",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79597bdd56f380555ed7075b39a9280a17bd7e90/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c0245cb999ec9692db1947240e865988a0c19c82",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0245cb999ec9692db1947240e865988a0c19c82",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c0245cb999ec9692db1947240e865988a0c19c82"
    }
  ],
  "stats": {
    "total": 181,
    "additions": 114,
    "deletions": 67
  },
  "files": [
    {
      "sha": "3898eca0d205980d85e92bd7bec598ca22aacbe4",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=79597bdd56f380555ed7075b39a9280a17bd7e90",
      "patch": "@@ -1,3 +1,36 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's btrace-related ops (enable_btrace,\n+\tdisable_btrace, read_btrace, read_btrace_conf) into methods of\n+\tprocess_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target ops.\n+\t(class process_target): Add the target ops.\n+\t(target_enable_btrace): Update.\n+\t(target_disable_btrace): Update.\n+\t(target_read_btrace): Update.\n+\t(target_read_btrace_conf): Update.\n+\t* target.cc (process_target::enable_btrace): Define.\n+\t(process_target::disable_btrace): Define.\n+\t(process_target::read_btrace): Define.\n+\t(process_target::read_btrace_conf): Define.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_process_target:enable_btrace): Define as a wrapper around\n+\tlinux_enable_btrace.\n+\t(linux_low_disable_btrace): Turn into ...\n+\t(linux_process_target::disable_btrace): ... this.\n+\t(linux_low_read_btrace): Turn into ...\n+\t(linux_process_target::read_btrace): ... this.\n+\t(linux_low_btrace_conf): Turn into ...\n+\t(linux_process_target::read_btrace_conf): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's supports_agent op into a method of"
    },
    {
      "sha": "1cd5bfcd3c4a0d9fd3300774d2360e6363b1a388",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 19,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=79597bdd56f380555ed7075b39a9280a17bd7e90",
      "patch": "@@ -7153,10 +7153,17 @@ linux_process_target::qxfer_libraries_svr4 (const char *annex,\n \n #ifdef HAVE_LINUX_BTRACE\n \n+btrace_target_info *\n+linux_process_target::enable_btrace (ptid_t ptid,\n+\t\t\t\t     const btrace_config *conf)\n+{\n+  return linux_enable_btrace (ptid, conf);\n+}\n+\n /* See to_disable_btrace target method.  */\n \n-static int\n-linux_low_disable_btrace (struct btrace_target_info *tinfo)\n+int\n+linux_process_target::disable_btrace (btrace_target_info *tinfo)\n {\n   enum btrace_error err;\n \n@@ -7215,9 +7222,10 @@ linux_low_encode_raw (struct buffer *buffer, const gdb_byte *data,\n \n /* See to_read_btrace target method.  */\n \n-static int\n-linux_low_read_btrace (struct btrace_target_info *tinfo, struct buffer *buffer,\n-\t\t       enum btrace_read_type type)\n+int\n+linux_process_target::read_btrace (btrace_target_info *tinfo,\n+\t\t\t\t   buffer *buffer,\n+\t\t\t\t   enum btrace_read_type type)\n {\n   struct btrace_data btrace;\n   enum btrace_error err;\n@@ -7274,9 +7282,9 @@ linux_low_read_btrace (struct btrace_target_info *tinfo, struct buffer *buffer,\n \n /* See to_btrace_conf target method.  */\n \n-static int\n-linux_low_btrace_conf (const struct btrace_target_info *tinfo,\n-\t\t       struct buffer *buffer)\n+int\n+linux_process_target::read_btrace_conf (const btrace_target_info *tinfo,\n+\t\t\t\t\tbuffer *buffer)\n {\n   const struct btrace_config *conf;\n \n@@ -7463,17 +7471,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-#ifdef HAVE_LINUX_BTRACE\n-  linux_enable_btrace,\n-  linux_low_disable_btrace,\n-  linux_low_read_btrace,\n-  linux_low_btrace_conf,\n-#else\n-  NULL,\n-  NULL,\n-  NULL,\n-  NULL,\n-#endif\n   linux_supports_range_stepping,\n   linux_proc_pid_to_exec_file,\n   linux_mntns_open_cloexec,"
    },
    {
      "sha": "8c33dccc67808d7f7c1cf6b7b98615d16aace31e",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=79597bdd56f380555ed7075b39a9280a17bd7e90",
      "patch": "@@ -433,6 +433,19 @@ class linux_process_target : public process_target\n \t\t\t    CORE_ADDR offset, int len) override;\n \n   bool supports_agent () override;\n+\n+#ifdef HAVE_LINUX_BTRACE\n+  btrace_target_info *enable_btrace (ptid_t ptid,\n+\t\t\t\t     const btrace_config *conf) override;\n+\n+  int disable_btrace (btrace_target_info *tinfo) override;\n+\n+  int read_btrace (btrace_target_info *tinfo, buffer *buf,\n+\t\t   enum btrace_read_type type) override;\n+\n+  int read_btrace_conf (const btrace_target_info *tinfo,\n+\t\t\tbuffer *buf) override;\n+#endif\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "a890b660bb1a52185b4a3555fc33b70f33033e05",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=79597bdd56f380555ed7075b39a9280a17bd7e90",
      "patch": "@@ -735,10 +735,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  NULL,  /* enable_btrace */\n-  NULL,  /* disable_btrace */\n-  NULL,  /* read_btrace */\n-  NULL,  /* read_btrace_conf */\n   NULL,  /* supports_range_stepping */\n   NULL,  /* pid_to_exec_file */\n   NULL,  /* multifs_open */"
    },
    {
      "sha": "ef79105877b9f3297e57eb547e6cdd120498924e",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=79597bdd56f380555ed7075b39a9280a17bd7e90",
      "patch": "@@ -947,10 +947,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  NULL, /* enable_btrace */\n-  NULL, /* disable_btrace */\n-  NULL, /* read_btrace */\n-  NULL, /* read_btrace_conf */\n   NULL, /* supports_range_stepping */\n   NULL, /* pid_to_exec_file */\n   NULL, /* multifs_open */"
    },
    {
      "sha": "e2ce7ff086981695189eb38e5190634ba0751d33",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=79597bdd56f380555ed7075b39a9280a17bd7e90",
      "patch": "@@ -726,3 +726,30 @@ process_target::supports_agent ()\n {\n   return false;\n }\n+\n+btrace_target_info *\n+process_target::enable_btrace (ptid_t ptid, const btrace_config *conf)\n+{\n+  error (_(\"Target does not support branch tracing.\"));\n+}\n+\n+int\n+process_target::disable_btrace (btrace_target_info *tinfo)\n+{\n+  error (_(\"Target does not support branch tracing.\"));\n+}\n+\n+int\n+process_target::read_btrace (btrace_target_info *tinfo,\n+\t\t\t     buffer *buffer,\n+\t\t\t     enum btrace_read_type type)\n+{\n+  error (_(\"Target does not support branch tracing.\"));\n+}\n+\n+int\n+process_target::read_btrace_conf (const btrace_target_info *tinfo,\n+\t\t\t\t  buffer *buffer)\n+{\n+  error (_(\"Target does not support branch tracing.\"));\n+}"
    },
    {
      "sha": "9d7c599b1e60cb79b8f702f9ae50feca05836148",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 25,
      "deletions": 36,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=79597bdd56f380555ed7075b39a9280a17bd7e90",
      "patch": "@@ -70,26 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Enable branch tracing for PTID based on CONF and allocate a branch trace\n-     target information struct for reading and for disabling branch trace.  */\n-  struct btrace_target_info *(*enable_btrace)\n-    (ptid_t ptid, const struct btrace_config *conf);\n-\n-  /* Disable branch tracing.\n-     Returns zero on success, non-zero otherwise.  */\n-  int (*disable_btrace) (struct btrace_target_info *tinfo);\n-\n-  /* Read branch trace data into buffer.\n-     Return 0 on success; print an error message into BUFFER and return -1,\n-     otherwise.  */\n-  int (*read_btrace) (struct btrace_target_info *, struct buffer *,\n-\t\t      enum btrace_read_type type);\n-\n-  /* Read the branch trace configuration into BUFFER.\n-     Return 0 on success; print an error message into BUFFER and return -1\n-     otherwise.  */\n-  int (*read_btrace_conf) (const struct btrace_target_info *, struct buffer *);\n-\n   /* Return true if target supports range stepping.  */\n   int (*supports_range_stepping) (void);\n \n@@ -497,6 +477,27 @@ class process_target\n \n   /* Return true if target supports debugging agent.  */\n   virtual bool supports_agent ();\n+\n+  /* Enable branch tracing for PTID based on CONF and allocate a branch trace\n+     target information struct for reading and for disabling branch trace.  */\n+  virtual btrace_target_info *enable_btrace (ptid_t ptid,\n+\t\t\t\t\t     const btrace_config *conf);\n+\n+  /* Disable branch tracing.\n+     Returns zero on success, non-zero otherwise.  */\n+  virtual int disable_btrace (btrace_target_info *tinfo);\n+\n+  /* Read branch trace data into buffer.\n+     Return 0 on success; print an error message into BUFFER and return -1,\n+     otherwise.  */\n+  virtual int read_btrace (btrace_target_info *tinfo, buffer *buf,\n+\t\t\t   enum btrace_read_type type);\n+\n+  /* Read the branch trace configuration into BUFFER.\n+     Return 0 on success; print an error message into BUFFER and return -1\n+     otherwise.  */\n+  virtual int read_btrace_conf (const btrace_target_info *tinfo,\n+\t\t\t\tbuffer *buf);\n };\n \n extern process_stratum_target *the_target;\n@@ -612,40 +613,28 @@ int kill_inferior (process_info *proc);\n static inline struct btrace_target_info *\n target_enable_btrace (ptid_t ptid, const struct btrace_config *conf)\n {\n-  if (the_target->enable_btrace == nullptr)\n-    error (_(\"Target does not support branch tracing.\"));\n-\n-  return (*the_target->enable_btrace) (ptid, conf);\n+  return the_target->pt->enable_btrace (ptid, conf);\n }\n \n static inline int\n target_disable_btrace (struct btrace_target_info *tinfo)\n {\n-  if (the_target->disable_btrace == nullptr)\n-    error (_(\"Target does not support branch tracing.\"));\n-\n-  return (*the_target->disable_btrace) (tinfo);\n+  return the_target->pt->disable_btrace (tinfo);\n }\n \n static inline int\n target_read_btrace (struct btrace_target_info *tinfo,\n \t\t    struct buffer *buffer,\n \t\t    enum btrace_read_type type)\n {\n-  if (the_target->read_btrace == nullptr)\n-    error (_(\"Target does not support branch tracing.\"));\n-\n-  return (*the_target->read_btrace) (tinfo, buffer, type);\n+  return the_target->pt->read_btrace (tinfo, buffer, type);\n }\n \n static inline int\n target_read_btrace_conf (struct btrace_target_info *tinfo,\n \t\t\t struct buffer *buffer)\n {\n-  if (the_target->read_btrace_conf == nullptr)\n-    error (_(\"Target does not support branch tracing.\"));\n-\n-  return (*the_target->read_btrace_conf) (tinfo, buffer);\n+  return the_target->pt->read_btrace_conf (tinfo, buffer);\n }\n \n #define target_supports_range_stepping() \\"
    },
    {
      "sha": "7fdc90feff161da3a7a65f8fcb420c94b63031b9",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79597bdd56f380555ed7075b39a9280a17bd7e90/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=79597bdd56f380555ed7075b39a9280a17bd7e90",
      "patch": "@@ -1858,10 +1858,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  NULL, /* enable_btrace */\n-  NULL, /* disable_btrace */\n-  NULL, /* read_btrace */\n-  NULL, /* read_btrace_conf */\n   NULL, /* supports_range_stepping */\n   NULL, /* pid_to_exec_file */\n   NULL, /* multifs_open */"
    }
  ]
}