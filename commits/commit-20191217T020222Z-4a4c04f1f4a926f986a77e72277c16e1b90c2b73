{
  "sha": "4a4c04f1f4a926f986a77e72277c16e1b90c2b73",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGE0YzA0ZjFmNGE5MjZmOTg2YTc3ZTcyMjc3YzE2ZTFiOTBjMmI3Mw==",
  "commit": {
    "author": {
      "name": "Bernd Edlinger",
      "email": "bernd.edlinger@hotmail.de",
      "date": "2019-10-18T12:28:45Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-12-17T02:02:22Z"
    },
    "message": "Check all inline frames if they are marked for skip\n\nThis makes the skip command work in optimized builds, where skipped\nfunctions may be inlined.  Previously that was only working when\nstepping into a non-inlined function.",
    "tree": {
      "sha": "b01e7e192667a386842233108969fa735a7166ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b01e7e192667a386842233108969fa735a7166ac"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4a4c04f1f4a926f986a77e72277c16e1b90c2b73",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a4c04f1f4a926f986a77e72277c16e1b90c2b73",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4a4c04f1f4a926f986a77e72277c16e1b90c2b73",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a4c04f1f4a926f986a77e72277c16e1b90c2b73/comments",
  "author": {
    "login": "bernd-edlinger",
    "id": 17638929,
    "node_id": "MDQ6VXNlcjE3NjM4OTI5",
    "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bernd-edlinger",
    "html_url": "https://github.com/bernd-edlinger",
    "followers_url": "https://api.github.com/users/bernd-edlinger/followers",
    "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions",
    "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs",
    "repos_url": "https://api.github.com/users/bernd-edlinger/repos",
    "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "43a599b56c6651aad9f21a6e38d99a029e28440b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43a599b56c6651aad9f21a6e38d99a029e28440b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/43a599b56c6651aad9f21a6e38d99a029e28440b"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 75,
    "deletions": 5
  },
  "files": [
    {
      "sha": "6f193c378b633f8a0803c362901c8175e94fa5e1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a4c04f1f4a926f986a77e72277c16e1b90c2b73/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a4c04f1f4a926f986a77e72277c16e1b90c2b73/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4a4c04f1f4a926f986a77e72277c16e1b90c2b73",
      "patch": "@@ -1,3 +1,9 @@\n+2019-12-16  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* infcmd.c (prepare_one_step): Step over skipped inline functions.\n+\t* infrun.c (inline_frame_is_marked_for_skip): New helper function.\n+\t(process_event_stop_test): Keep stepping over skipped inline functions.\n+\n 2019-12-16  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* jit.c (struct gdb_block) <next>: Remove field."
    },
    {
      "sha": "af66eaffd8a4d3813a9e8bb0a0586f9dea29e351",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a4c04f1f4a926f986a77e72277c16e1b90c2b73/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a4c04f1f4a926f986a77e72277c16e1b90c2b73/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=4a4c04f1f4a926f986a77e72277c16e1b90c2b73",
      "patch": "@@ -52,6 +52,7 @@\n #include \"thread-fsm.h\"\n #include \"top.h\"\n #include \"interps.h\"\n+#include \"skip.h\"\n #include \"gdbsupport/gdb_optional.h\"\n #include \"source.h\"\n #include \"cli/cli-style.h\"\n@@ -1106,14 +1107,29 @@ prepare_one_step (struct step_command_fsm *sm)\n \t      && inline_skipped_frames (tp))\n \t    {\n \t      ptid_t resume_ptid;\n+\t      const char *fn = NULL;\n+\t      symtab_and_line sal;\n+\t      struct symbol *sym;\n \n \t      /* Pretend that we've ran.  */\n \t      resume_ptid = user_visible_resume_ptid (1);\n \t      set_running (resume_ptid, 1);\n \n \t      step_into_inline_frame (tp);\n-\t      sm->count--;\n-\t      return prepare_one_step (sm);\n+\n+\t      frame = get_current_frame ();\n+\t      sal = find_frame_sal (frame);\n+\t      sym = get_frame_function (frame);\n+\n+\t      if (sym != NULL)\n+\t\tfn = sym->print_name ();\n+\n+\t      if (sal.line == 0\n+\t\t  || !function_name_is_marked_for_skip (fn, sal))\n+\t\t{\n+\t\t  sm->count--;\n+\t\t  return prepare_one_step (sm);\n+\t\t}\n \t    }\n \n \t  pc = get_frame_pc (frame);"
    },
    {
      "sha": "7ddd21dd09977c8340cb7037108789307481177d",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 51,
      "deletions": 3,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a4c04f1f4a926f986a77e72277c16e1b90c2b73/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a4c04f1f4a926f986a77e72277c16e1b90c2b73/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=4a4c04f1f4a926f986a77e72277c16e1b90c2b73",
      "patch": "@@ -4034,6 +4034,45 @@ stepped_in_from (struct frame_info *frame, struct frame_id step_frame_id)\n   return 0;\n }\n \n+/* Look for an inline frame that is marked for skip.\n+   If PREV_FRAME is TRUE start at the previous frame,\n+   otherwise start at the current frame.  Stop at the\n+   first non-inline frame, or at the frame where the\n+   step started.  */\n+\n+static bool\n+inline_frame_is_marked_for_skip (bool prev_frame, struct thread_info *tp)\n+{\n+  struct frame_info *frame = get_current_frame ();\n+\n+  if (prev_frame)\n+    frame = get_prev_frame (frame);\n+\n+  for (; frame != NULL; frame = get_prev_frame (frame))\n+    {\n+      const char *fn = NULL;\n+      symtab_and_line sal;\n+      struct symbol *sym;\n+\n+      if (frame_id_eq (get_frame_id (frame), tp->control.step_frame_id))\n+\tbreak;\n+      if (get_frame_type (frame) != INLINE_FRAME)\n+\tbreak;\n+\n+      sal = find_frame_sal (frame);\n+      sym = get_frame_function (frame);\n+\n+      if (sym != NULL)\n+\tfn = sym->print_name ();\n+\n+      if (sal.line != 0\n+\t  && function_name_is_marked_for_skip (fn, sal))\n+\treturn true;\n+    }\n+\n+  return false;\n+}\n+\n /* If the event thread has the stop requested flag set, pretend it\n    stopped for a GDB_SIGNAL_0 (i.e., as if it stopped due to\n    target_stop).  */\n@@ -6524,7 +6563,8 @@ process_event_stop_test (struct execution_control_state *ecs)\n \ttmp_sal = find_pc_line (ecs->stop_func_start, 0);\n \tif (tmp_sal.line != 0\n \t    && !function_name_is_marked_for_skip (ecs->stop_func_name,\n-\t\t\t\t\t\t  tmp_sal))\n+\t\t\t\t\t\t  tmp_sal)\n+\t    && !inline_frame_is_marked_for_skip (true, ecs->event_thread))\n \t  {\n \t    if (execution_direction == EXEC_REVERSE)\n \t      handle_step_into_function_backward (gdbarch, ecs);\n@@ -6690,7 +6730,14 @@ process_event_stop_test (struct execution_control_state *ecs)\n \n \t  if (call_sal.line == ecs->event_thread->current_line\n \t      && call_sal.symtab == ecs->event_thread->current_symtab)\n-\t    step_into_inline_frame (ecs->event_thread);\n+\t    {\n+\t      step_into_inline_frame (ecs->event_thread);\n+\t      if (inline_frame_is_marked_for_skip (false, ecs->event_thread))\n+\t\t{\n+\t\t  keep_going (ecs);\n+\t\t  return;\n+\t\t}\n+\t    }\n \n \t  end_stepping_range (ecs);\n \t  return;\n@@ -6724,7 +6771,8 @@ process_event_stop_test (struct execution_control_state *ecs)\n \tfprintf_unfiltered (gdb_stdlog,\n \t\t\t    \"infrun: stepping through inlined function\\n\");\n \n-      if (ecs->event_thread->control.step_over_calls == STEP_OVER_ALL)\n+      if (ecs->event_thread->control.step_over_calls == STEP_OVER_ALL\n+\t  || inline_frame_is_marked_for_skip (false, ecs->event_thread))\n \tkeep_going (ecs);\n       else\n \tend_stepping_range (ecs);"
    }
  ]
}