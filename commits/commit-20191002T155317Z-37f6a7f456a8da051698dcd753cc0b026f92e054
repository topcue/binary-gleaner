{
  "sha": "37f6a7f456a8da051698dcd753cc0b026f92e054",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzdmNmE3ZjQ1NmE4ZGEwNTE2OThkY2Q3NTNjYzBiMDI2ZjkyZTA1NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-05-31T20:50:23Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-10-02T15:53:17Z"
    },
    "message": "Add $_ada_exception convenience variable\n\nThis adds the $_ada_exception convenience variable.  It is set by the\nAda exception catchpoints, and holds the address of the exception\ncurrently being thrown.  This is useful because it allows more\nfine-grained filtering of exceptions than is possible using the\nexisting \"catch\" syntax.\n\nThis also simplifies Ada catchpoints somewhat; because the catchpoint\nmust now carry the \"kind\", it's possible to remove many helper\nfunctions.\n\ngdb/ChangeLog\n2019-10-02  Tom Tromey  <tromey@adacore.com>\n\n\t* NEWS: Add $_ada_exception entry.\n\t* ada-lang.c (struct ada_catchpoint): Add constructor.\n\t<m_kind>: New member.\n\t(allocate_location_exception, re_set_exception): Remove\n\t\"ex\" parameter.\n\t(should_stop_exception): Compute $_ada_exception.\n\t(check_status_exception, print_it_exception)\n\t(print_one_exception, print_mention_exception): Remove\n\t\"ex\" parameter.\n\t(allocate_location_catch_exception, re_set_catch_exception)\n\t(check_status_exception, print_it_catch_exception)\n\t(print_one_catch_exception, print_mention_catch_exception)\n\t(print_recreate_catch_exception)\n\t(allocate_location_catch_exception_unhandled)\n\t(re_set_catch_exception_unhandled)\n\t(check_status_exception, print_it_catch_exception_unhandled)\n\t(print_one_catch_exception_unhandled)\n\t(print_mention_catch_exception_unhandled)\n\t(print_recreate_catch_exception_unhandled)\n\t(allocate_location_catch_assert, re_set_catch_assert)\n\t(check_status_assert, print_it_catch_assert)\n\t(print_one_catch_assert, print_mention_catch_assert)\n\t(print_recreate_catch_assert)\n\t(allocate_location_catch_handlers, re_set_catch_handlers)\n\t(check_status_handlers, print_it_catch_handlers)\n\t(print_one_catch_handlers, print_mention_catch_handlers)\n\t(print_recreate_catch_handlers): Remove.\n\t(create_ada_exception_catchpoint): Update.\n\t(initialize_ada_catchpoint_ops): Update.\n\ngdb/doc/ChangeLog\n2019-10-02  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.texinfo (Set Catchpoints, Convenience Vars): Document\n\t$_ada_exception.\n\ngdb/testsuite/ChangeLog\n2019-10-02  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/catch_ex_std.exp: Add $_ada_exception test.",
    "tree": {
      "sha": "2bb33381b3da98477f726ce03998e045bc0a9e3b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2bb33381b3da98477f726ce03998e045bc0a9e3b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/37f6a7f456a8da051698dcd753cc0b026f92e054",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37f6a7f456a8da051698dcd753cc0b026f92e054",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/37f6a7f456a8da051698dcd753cc0b026f92e054",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37f6a7f456a8da051698dcd753cc0b026f92e054/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fccf9de11fe6757afd3ad2dca4e0ea781b50ae37",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fccf9de11fe6757afd3ad2dca4e0ea781b50ae37",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fccf9de11fe6757afd3ad2dca4e0ea781b50ae37"
    }
  ],
  "stats": {
    "total": 374,
    "additions": 142,
    "deletions": 232
  },
  "files": [
    {
      "sha": "cb450e2873007007f43d84808e0eb4e6951f8e46",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=37f6a7f456a8da051698dcd753cc0b026f92e054",
      "patch": "@@ -1,3 +1,35 @@\n+2019-10-02  Tom Tromey  <tromey@adacore.com>\n+\n+\t* NEWS: Add $_ada_exception entry.\n+\t* ada-lang.c (struct ada_catchpoint): Add constructor.\n+\t<m_kind>: New member.\n+\t(allocate_location_exception, re_set_exception): Remove\n+\t\"ex\" parameter.\n+\t(should_stop_exception): Compute $_ada_exception.\n+\t(check_status_exception, print_it_exception)\n+\t(print_one_exception, print_mention_exception): Remove\n+\t\"ex\" parameter.\n+\t(allocate_location_catch_exception, re_set_catch_exception)\n+\t(check_status_exception, print_it_catch_exception)\n+\t(print_one_catch_exception, print_mention_catch_exception)\n+\t(print_recreate_catch_exception)\n+\t(allocate_location_catch_exception_unhandled)\n+\t(re_set_catch_exception_unhandled)\n+\t(check_status_exception, print_it_catch_exception_unhandled)\n+\t(print_one_catch_exception_unhandled)\n+\t(print_mention_catch_exception_unhandled)\n+\t(print_recreate_catch_exception_unhandled)\n+\t(allocate_location_catch_assert, re_set_catch_assert)\n+\t(check_status_assert, print_it_catch_assert)\n+\t(print_one_catch_assert, print_mention_catch_assert)\n+\t(print_recreate_catch_assert)\n+\t(allocate_location_catch_handlers, re_set_catch_handlers)\n+\t(check_status_handlers, print_it_catch_handlers)\n+\t(print_one_catch_handlers, print_mention_catch_handlers)\n+\t(print_recreate_catch_handlers): Remove.\n+\t(create_ada_exception_catchpoint): Update.\n+\t(initialize_ada_catchpoint_ops): Update.\n+\n 2019-10-02  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (ada_lookup_simple_minsyms): Remove."
    },
    {
      "sha": "3211ec9542c00f53628ada2939ad0775e027df3d",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=37f6a7f456a8da051698dcd753cc0b026f92e054",
      "patch": "@@ -34,6 +34,9 @@\n \n * GDB can now be compiled with Python 3 on Windows.\n \n+* New convenience variable $_ada_exception holds the address of the\n+  Ada exception being thrown.  This is set by Ada-related catchpoints.\n+\n * Python API\n \n   ** The gdb.Value type has a new method 'format_string' which returns a"
    },
    {
      "sha": "154f9850e27e7fe373706ef2f0da1dbeb5f83ac8",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 77,
      "deletions": 230,
      "changes": 307,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=37f6a7f456a8da051698dcd753cc0b026f92e054",
      "patch": "@@ -12314,8 +12314,16 @@ class ada_catchpoint_location : public bp_location\n \n struct ada_catchpoint : public breakpoint\n {\n+  explicit ada_catchpoint (enum ada_exception_catchpoint_kind kind)\n+    : m_kind (kind)\n+  {\n+  }\n+\n   /* The name of the specific exception the user specified.  */\n   std::string excep_string;\n+\n+  /* What kind of catchpoint this is.  */\n+  enum ada_exception_catchpoint_kind m_kind;\n };\n \n /* Parse the exception condition string in the context of each of the\n@@ -12375,8 +12383,7 @@ create_excep_cond_exprs (struct ada_catchpoint *c,\n    structure for all exception catchpoint kinds.  */\n \n static struct bp_location *\n-allocate_location_exception (enum ada_exception_catchpoint_kind ex,\n-\t\t\t     struct breakpoint *self)\n+allocate_location_exception (struct breakpoint *self)\n {\n   return new ada_catchpoint_location (self);\n }\n@@ -12385,7 +12392,7 @@ allocate_location_exception (enum ada_exception_catchpoint_kind ex,\n    exception catchpoint kinds.  */\n \n static void\n-re_set_exception (enum ada_exception_catchpoint_kind ex, struct breakpoint *b)\n+re_set_exception (struct breakpoint *b)\n {\n   struct ada_catchpoint *c = (struct ada_catchpoint *) b;\n \n@@ -12395,7 +12402,7 @@ re_set_exception (enum ada_exception_catchpoint_kind ex, struct breakpoint *b)\n \n   /* Reparse the exception conditional expressions.  One for each\n      location.  */\n-  create_excep_cond_exprs (c, ex);\n+  create_excep_cond_exprs (c, c->m_kind);\n }\n \n /* Returns true if we should stop for this breakpoint hit.  If the\n@@ -12410,6 +12417,30 @@ should_stop_exception (const struct bp_location *bl)\n     = (const struct ada_catchpoint_location *) bl;\n   int stop;\n \n+  struct internalvar *var = lookup_internalvar (\"_ada_exception\");\n+  if (c->m_kind == ada_catch_assert)\n+    clear_internalvar (var);\n+  else\n+    {\n+      try\n+\t{\n+\t  const char *expr;\n+\n+\t  if (c->m_kind == ada_catch_handlers)\n+\t    expr = (\"GNAT_GCC_exception_Access(gcc_exception)\"\n+\t\t    \".all.occurrence.id\");\n+\t  else\n+\t    expr = \"e\";\n+\n+\t  struct value *exc = parse_and_eval (expr);\n+\t  set_internalvar (var, exc);\n+\t}\n+      catch (const gdb_exception_error &ex)\n+\t{\n+\t  clear_internalvar (var);\n+\t}\n+    }\n+\n   /* With no specific exception, should always stop.  */\n   if (c->excep_string.empty ())\n     return 1;\n@@ -12443,7 +12474,7 @@ should_stop_exception (const struct bp_location *bl)\n    for all exception catchpoint kinds.  */\n \n static void\n-check_status_exception (enum ada_exception_catchpoint_kind ex, bpstat bs)\n+check_status_exception (bpstat bs)\n {\n   bs->stop = should_stop_exception (bs->bp_location_at);\n }\n@@ -12452,7 +12483,7 @@ check_status_exception (enum ada_exception_catchpoint_kind ex, bpstat bs)\n    for all exception catchpoint kinds.  */\n \n static enum print_stop_action\n-print_it_exception (enum ada_exception_catchpoint_kind ex, bpstat bs)\n+print_it_exception (bpstat bs)\n {\n   struct ui_out *uiout = current_uiout;\n   struct breakpoint *b = bs->breakpoint_at;\n@@ -12478,13 +12509,14 @@ print_it_exception (enum ada_exception_catchpoint_kind ex, bpstat bs)\n      ada_find_printable_frame).  */\n   select_frame (get_current_frame ());\n \n-  switch (ex)\n+  struct ada_catchpoint *c = (struct ada_catchpoint *) b;\n+  switch (c->m_kind)\n     {\n       case ada_catch_exception:\n       case ada_catch_exception_unhandled:\n       case ada_catch_handlers:\n \t{\n-\t  const CORE_ADDR addr = ada_exception_name_addr (ex, b);\n+\t  const CORE_ADDR addr = ada_exception_name_addr (c->m_kind, b);\n \t  char exception_name[256];\n \n \t  if (addr != 0)\n@@ -12508,7 +12540,7 @@ print_it_exception (enum ada_exception_catchpoint_kind ex, bpstat bs)\n \t     it clearer to the user which kind of catchpoint just got\n \t     hit.  We used ui_out_text to make sure that this extra\n \t     info does not pollute the exception name in the MI case.  */\n-\t  if (ex == ada_catch_exception_unhandled)\n+\t  if (c->m_kind == ada_catch_exception_unhandled)\n \t    uiout->text (\"unhandled \");\n \t  uiout->field_string (\"exception-name\", exception_name);\n \t}\n@@ -12541,8 +12573,7 @@ print_it_exception (enum ada_exception_catchpoint_kind ex, bpstat bs)\n    for all exception catchpoint kinds.  */\n \n static void\n-print_one_exception (enum ada_exception_catchpoint_kind ex,\n-                     struct breakpoint *b, struct bp_location **last_loc)\n+print_one_exception (struct breakpoint *b, struct bp_location **last_loc)\n { \n   struct ui_out *uiout = current_uiout;\n   struct ada_catchpoint *c = (struct ada_catchpoint *) b;\n@@ -12554,7 +12585,7 @@ print_one_exception (enum ada_exception_catchpoint_kind ex,\n     uiout->field_skip (\"addr\");\n \n   annotate_field (5);\n-  switch (ex)\n+  switch (c->m_kind)\n     {\n       case ada_catch_exception:\n         if (!c->excep_string.empty ())\n@@ -12598,8 +12629,7 @@ print_one_exception (enum ada_exception_catchpoint_kind ex,\n    for all exception catchpoint kinds.  */\n \n static void\n-print_mention_exception (enum ada_exception_catchpoint_kind ex,\n-                         struct breakpoint *b)\n+print_mention_exception (struct breakpoint *b)\n {\n   struct ada_catchpoint *c = (struct ada_catchpoint *) b;\n   struct ui_out *uiout = current_uiout;\n@@ -12609,7 +12639,7 @@ print_mention_exception (enum ada_exception_catchpoint_kind ex,\n   uiout->field_signed (\"bkptno\", b->number);\n   uiout->text (\": \");\n \n-  switch (ex)\n+  switch (c->m_kind)\n     {\n       case ada_catch_exception:\n         if (!c->excep_string.empty ())\n@@ -12652,12 +12682,11 @@ print_mention_exception (enum ada_exception_catchpoint_kind ex,\n    for all exception catchpoint kinds.  */\n \n static void\n-print_recreate_exception (enum ada_exception_catchpoint_kind ex,\n-\t\t\t  struct breakpoint *b, struct ui_file *fp)\n+print_recreate_exception (struct breakpoint *b, struct ui_file *fp)\n {\n   struct ada_catchpoint *c = (struct ada_catchpoint *) b;\n \n-  switch (ex)\n+  switch (c->m_kind)\n     {\n       case ada_catch_exception:\n \tfprintf_filtered (fp, \"catch exception\");\n@@ -12683,192 +12712,10 @@ print_recreate_exception (enum ada_exception_catchpoint_kind ex,\n   print_recreate_thread (b, fp);\n }\n \n-/* Virtual table for \"catch exception\" breakpoints.  */\n-\n-static struct bp_location *\n-allocate_location_catch_exception (struct breakpoint *self)\n-{\n-  return allocate_location_exception (ada_catch_exception, self);\n-}\n-\n-static void\n-re_set_catch_exception (struct breakpoint *b)\n-{\n-  re_set_exception (ada_catch_exception, b);\n-}\n-\n-static void\n-check_status_catch_exception (bpstat bs)\n-{\n-  check_status_exception (ada_catch_exception, bs);\n-}\n-\n-static enum print_stop_action\n-print_it_catch_exception (bpstat bs)\n-{\n-  return print_it_exception (ada_catch_exception, bs);\n-}\n-\n-static void\n-print_one_catch_exception (struct breakpoint *b, struct bp_location **last_loc)\n-{\n-  print_one_exception (ada_catch_exception, b, last_loc);\n-}\n-\n-static void\n-print_mention_catch_exception (struct breakpoint *b)\n-{\n-  print_mention_exception (ada_catch_exception, b);\n-}\n-\n-static void\n-print_recreate_catch_exception (struct breakpoint *b, struct ui_file *fp)\n-{\n-  print_recreate_exception (ada_catch_exception, b, fp);\n-}\n-\n+/* Virtual tables for various breakpoint types.  */\n static struct breakpoint_ops catch_exception_breakpoint_ops;\n-\n-/* Virtual table for \"catch exception unhandled\" breakpoints.  */\n-\n-static struct bp_location *\n-allocate_location_catch_exception_unhandled (struct breakpoint *self)\n-{\n-  return allocate_location_exception (ada_catch_exception_unhandled, self);\n-}\n-\n-static void\n-re_set_catch_exception_unhandled (struct breakpoint *b)\n-{\n-  re_set_exception (ada_catch_exception_unhandled, b);\n-}\n-\n-static void\n-check_status_catch_exception_unhandled (bpstat bs)\n-{\n-  check_status_exception (ada_catch_exception_unhandled, bs);\n-}\n-\n-static enum print_stop_action\n-print_it_catch_exception_unhandled (bpstat bs)\n-{\n-  return print_it_exception (ada_catch_exception_unhandled, bs);\n-}\n-\n-static void\n-print_one_catch_exception_unhandled (struct breakpoint *b,\n-\t\t\t\t     struct bp_location **last_loc)\n-{\n-  print_one_exception (ada_catch_exception_unhandled, b, last_loc);\n-}\n-\n-static void\n-print_mention_catch_exception_unhandled (struct breakpoint *b)\n-{\n-  print_mention_exception (ada_catch_exception_unhandled, b);\n-}\n-\n-static void\n-print_recreate_catch_exception_unhandled (struct breakpoint *b,\n-\t\t\t\t\t  struct ui_file *fp)\n-{\n-  print_recreate_exception (ada_catch_exception_unhandled, b, fp);\n-}\n-\n static struct breakpoint_ops catch_exception_unhandled_breakpoint_ops;\n-\n-/* Virtual table for \"catch assert\" breakpoints.  */\n-\n-static struct bp_location *\n-allocate_location_catch_assert (struct breakpoint *self)\n-{\n-  return allocate_location_exception (ada_catch_assert, self);\n-}\n-\n-static void\n-re_set_catch_assert (struct breakpoint *b)\n-{\n-  re_set_exception (ada_catch_assert, b);\n-}\n-\n-static void\n-check_status_catch_assert (bpstat bs)\n-{\n-  check_status_exception (ada_catch_assert, bs);\n-}\n-\n-static enum print_stop_action\n-print_it_catch_assert (bpstat bs)\n-{\n-  return print_it_exception (ada_catch_assert, bs);\n-}\n-\n-static void\n-print_one_catch_assert (struct breakpoint *b, struct bp_location **last_loc)\n-{\n-  print_one_exception (ada_catch_assert, b, last_loc);\n-}\n-\n-static void\n-print_mention_catch_assert (struct breakpoint *b)\n-{\n-  print_mention_exception (ada_catch_assert, b);\n-}\n-\n-static void\n-print_recreate_catch_assert (struct breakpoint *b, struct ui_file *fp)\n-{\n-  print_recreate_exception (ada_catch_assert, b, fp);\n-}\n-\n static struct breakpoint_ops catch_assert_breakpoint_ops;\n-\n-/* Virtual table for \"catch handlers\" breakpoints.  */\n-\n-static struct bp_location *\n-allocate_location_catch_handlers (struct breakpoint *self)\n-{\n-  return allocate_location_exception (ada_catch_handlers, self);\n-}\n-\n-static void\n-re_set_catch_handlers (struct breakpoint *b)\n-{\n-  re_set_exception (ada_catch_handlers, b);\n-}\n-\n-static void\n-check_status_catch_handlers (bpstat bs)\n-{\n-  check_status_exception (ada_catch_handlers, bs);\n-}\n-\n-static enum print_stop_action\n-print_it_catch_handlers (bpstat bs)\n-{\n-  return print_it_exception (ada_catch_handlers, bs);\n-}\n-\n-static void\n-print_one_catch_handlers (struct breakpoint *b,\n-\t\t\t  struct bp_location **last_loc)\n-{\n-  print_one_exception (ada_catch_handlers, b, last_loc);\n-}\n-\n-static void\n-print_mention_catch_handlers (struct breakpoint *b)\n-{\n-  print_mention_exception (ada_catch_handlers, b);\n-}\n-\n-static void\n-print_recreate_catch_handlers (struct breakpoint *b,\n-\t\t\t       struct ui_file *fp)\n-{\n-  print_recreate_exception (ada_catch_handlers, b, fp);\n-}\n-\n static struct breakpoint_ops catch_handlers_breakpoint_ops;\n \n /* See ada-lang.h.  */\n@@ -13142,7 +12989,7 @@ create_ada_exception_catchpoint (struct gdbarch *gdbarch,\n   const struct breakpoint_ops *ops = NULL;\n   struct symtab_and_line sal = ada_exception_sal (ex_kind, &addr_string, &ops);\n \n-  std::unique_ptr<ada_catchpoint> c (new ada_catchpoint ());\n+  std::unique_ptr<ada_catchpoint> c (new ada_catchpoint (ex_kind));\n   init_ada_exception_breakpoint (c.get (), gdbarch, sal, addr_string.c_str (),\n \t\t\t\t ops, tempflag, disabled, from_tty);\n   c->excep_string = excep_string;\n@@ -14333,43 +14180,43 @@ initialize_ada_catchpoint_ops (void)\n \n   ops = &catch_exception_breakpoint_ops;\n   *ops = bkpt_breakpoint_ops;\n-  ops->allocate_location = allocate_location_catch_exception;\n-  ops->re_set = re_set_catch_exception;\n-  ops->check_status = check_status_catch_exception;\n-  ops->print_it = print_it_catch_exception;\n-  ops->print_one = print_one_catch_exception;\n-  ops->print_mention = print_mention_catch_exception;\n-  ops->print_recreate = print_recreate_catch_exception;\n+  ops->allocate_location = allocate_location_exception;\n+  ops->re_set = re_set_exception;\n+  ops->check_status = check_status_exception;\n+  ops->print_it = print_it_exception;\n+  ops->print_one = print_one_exception;\n+  ops->print_mention = print_mention_exception;\n+  ops->print_recreate = print_recreate_exception;\n \n   ops = &catch_exception_unhandled_breakpoint_ops;\n   *ops = bkpt_breakpoint_ops;\n-  ops->allocate_location = allocate_location_catch_exception_unhandled;\n-  ops->re_set = re_set_catch_exception_unhandled;\n-  ops->check_status = check_status_catch_exception_unhandled;\n-  ops->print_it = print_it_catch_exception_unhandled;\n-  ops->print_one = print_one_catch_exception_unhandled;\n-  ops->print_mention = print_mention_catch_exception_unhandled;\n-  ops->print_recreate = print_recreate_catch_exception_unhandled;\n+  ops->allocate_location = allocate_location_exception;\n+  ops->re_set = re_set_exception;\n+  ops->check_status = check_status_exception;\n+  ops->print_it = print_it_exception;\n+  ops->print_one = print_one_exception;\n+  ops->print_mention = print_mention_exception;\n+  ops->print_recreate = print_recreate_exception;\n \n   ops = &catch_assert_breakpoint_ops;\n   *ops = bkpt_breakpoint_ops;\n-  ops->allocate_location = allocate_location_catch_assert;\n-  ops->re_set = re_set_catch_assert;\n-  ops->check_status = check_status_catch_assert;\n-  ops->print_it = print_it_catch_assert;\n-  ops->print_one = print_one_catch_assert;\n-  ops->print_mention = print_mention_catch_assert;\n-  ops->print_recreate = print_recreate_catch_assert;\n+  ops->allocate_location = allocate_location_exception;\n+  ops->re_set = re_set_exception;\n+  ops->check_status = check_status_exception;\n+  ops->print_it = print_it_exception;\n+  ops->print_one = print_one_exception;\n+  ops->print_mention = print_mention_exception;\n+  ops->print_recreate = print_recreate_exception;\n \n   ops = &catch_handlers_breakpoint_ops;\n   *ops = bkpt_breakpoint_ops;\n-  ops->allocate_location = allocate_location_catch_handlers;\n-  ops->re_set = re_set_catch_handlers;\n-  ops->check_status = check_status_catch_handlers;\n-  ops->print_it = print_it_catch_handlers;\n-  ops->print_one = print_one_catch_handlers;\n-  ops->print_mention = print_mention_catch_handlers;\n-  ops->print_recreate = print_recreate_catch_handlers;\n+  ops->allocate_location = allocate_location_exception;\n+  ops->re_set = re_set_exception;\n+  ops->check_status = check_status_exception;\n+  ops->print_it = print_it_exception;\n+  ops->print_one = print_one_exception;\n+  ops->print_mention = print_mention_exception;\n+  ops->print_recreate = print_recreate_exception;\n }\n \n /* This module's 'new_objfile' observer.  */"
    },
    {
      "sha": "7ab8b1df81d32dce822b899be86c0e4535604fe5",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=37f6a7f456a8da051698dcd753cc0b026f92e054",
      "patch": "@@ -1,3 +1,8 @@\n+2019-10-02  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.texinfo (Set Catchpoints, Convenience Vars): Document\n+\t$_ada_exception.\n+\n 2019-09-20  Ulrich Weigand  <uweigand@de.ibm.com>\n \n \t* doc/gdb.texinfo (Remote Configuration): Remove documentation for"
    },
    {
      "sha": "78d382846937ae2865935a18edee37221672e0fc",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=37f6a7f456a8da051698dcd753cc0b026f92e054",
      "patch": "@@ -4788,9 +4788,16 @@ called @code{Constraint_Error} is defined in package @code{Pck}, then\n the command to use to catch such exceptions is @kbd{catch exception\n Pck.Constraint_Error}.\n \n+@vindex $_ada_exception@r{, convenience variable}\n+The convenience variable @code{$_ada_exception} holds the address of\n+the exception being thrown.  This can be useful when setting a\n+condition for such a catchpoint.\n+\n @item exception unhandled\n @kindex catch exception unhandled\n-An exception that was raised but is not handled by the program.\n+An exception that was raised but is not handled by the program.  The\n+convenience variable @code{$_ada_exception} is set as for @code{catch\n+exception}.\n \n @item handlers @r{[}@var{name}@r{]}\n @kindex catch handlers\n@@ -4812,9 +4819,13 @@ user-defined one.  For instance, assuming an exception called\n command to use to catch such exceptions handling is\n @kbd{catch handlers Pck.Constraint_Error}.\n \n+The convenience variable @code{$_ada_exception} is set as for\n+@code{catch exception}.\n+\n @item assert\n @kindex catch assert\n-A failed Ada assertion.\n+A failed Ada assertion.  Note that the convenience variable\n+@code{$_ada_exception} is @emph{not} set by this catchpoint.\n \n @item exec\n @kindex catch exec\n@@ -11823,6 +11834,11 @@ The program has exited\n The variable @code{$_exception} is set to the exception object being\n thrown at an exception-related catchpoint.  @xref{Set Catchpoints}.\n \n+@item $_ada_exception\n+The variable @code{$_ada_exception} is set to the address of the\n+exception being caught or thrown at an Ada exception-related\n+catchpoint.  @xref{Set Catchpoints}.\n+\n @item $_probe_argc\n @itemx $_probe_arg0@dots{}$_probe_arg11\n Arguments to a static probe.  @xref{Static Probe Points}."
    },
    {
      "sha": "b6667f0df73fccbcd3f7f33213fc942a756a0c5e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=37f6a7f456a8da051698dcd753cc0b026f92e054",
      "patch": "@@ -1,3 +1,7 @@\n+2019-10-02  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/catch_ex_std.exp: Add $_ada_exception test.\n+\n 2019-10-02  Pedro Alves  <palves@redhat.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n "
    },
    {
      "sha": "839d0bb092f81ad545d817715086e3cb93822b6e",
      "filename": "gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37f6a7f456a8da051698dcd753cc0b026f92e054/gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/catch_ex_std.exp?ref=37f6a7f456a8da051698dcd753cc0b026f92e054",
      "patch": "@@ -101,3 +101,6 @@ gdb_test \"catch exception some_kind_of_error\" \\\n gdb_test \"cont\" \\\n     \"Catchpoint \\[0-9\\]+, .* at .*foo\\.adb:\\[0-9\\]+.*\" \\\n     \"caught the exception\"\n+\n+gdb_test \"print \\$_ada_exception = some_package.some_kind_of_error'Address\" \\\n+    \" = true\""
    }
  ]
}