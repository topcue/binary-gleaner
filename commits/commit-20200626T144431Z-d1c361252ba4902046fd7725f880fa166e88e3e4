{
  "sha": "d1c361252ba4902046fd7725f880fa166e88e3e4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDFjMzYxMjUyYmE0OTAyMDQ2ZmQ3NzI1Zjg4MGZhMTY2ZTg4ZTNlNA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-26T14:44:31Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-26T14:44:31Z"
    },
    "message": "x86: make I disassembler macro available for new use\n\nThe {Q|Q} construct on lgdt/lidt and the slightly different {Q|IQ}\nstruck me as odd when encountering. Realizing they both have the same\neffect, let's free up the I macro by using the former form of construct\nwhere needed (there aren't that many uses overall).\n\nWith there now being several multi-character macros also re-do \"alt\"\nhandling slightly: Terminate it when finding the closing brace, rather\nthan after the next single character. Also set the flag only when\nactually in Intel syntax mode.",
    "tree": {
      "sha": "93c559d124592fb11853c2c30c1db8a75bcd8116",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/93c559d124592fb11853c2c30c1db8a75bcd8116"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d1c361252ba4902046fd7725f880fa166e88e3e4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d1c361252ba4902046fd7725f880fa166e88e3e4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d1c361252ba4902046fd7725f880fa166e88e3e4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d1c361252ba4902046fd7725f880fa166e88e3e4/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "198e1db737e636c8defe2c7300396330650c2967",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/198e1db737e636c8defe2c7300396330650c2967",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/198e1db737e636c8defe2c7300396330650c2967"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 17,
    "deletions": 13
  },
  "files": [
    {
      "sha": "8cb59605217b417c80a6ccd530e7c82ada6f328b",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1c361252ba4902046fd7725f880fa166e88e3e4/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1c361252ba4902046fd7725f880fa166e88e3e4/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=d1c361252ba4902046fd7725f880fa166e88e3e4",
      "patch": "@@ -1,3 +1,10 @@\n+2020-06-26  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c: Adjust description of I macro.\n+\t(x86_64_table): Drop use of I.\n+\t(float_mem): Replace use of I.\n+\t(putop): Remove handling of I. Adjust setting/clearing of \"alt\".\n+\n 2020-06-26  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c: (print_insn): Avoid straight assignment to"
    },
    {
      "sha": "e1ebb485535a84b2a03aa68a9fbba175149cf69e",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 10,
      "deletions": 13,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1c361252ba4902046fd7725f880fa166e88e3e4/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1c361252ba4902046fd7725f880fa166e88e3e4/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=d1c361252ba4902046fd7725f880fa166e88e3e4",
      "patch": "@@ -2250,8 +2250,7 @@ struct dis386 {\n    'F' => print 'w' or 'l' depending on address size prefix (loop insns)\n    'G' => print 'w' or 'l' depending on operand size prefix (i/o insns)\n    'H' => print \",pt\" or \",pn\" branch hint\n-   'I' => honor following macro letter even in Intel mode (implemented only\n-\t  for some of the macro letters)\n+   'I' unused.\n    'J' unused.\n    'K' => print 'd' or 'q' if rex prefix is present.\n    'L' => print 'l' if suffix_always is true\n@@ -6918,13 +6917,13 @@ static const struct dis386 x86_64_table[][2] = {\n \n   /* X86_64_0F01_REG_0 */\n   {\n-    { \"sgdt{Q|IQ}\", { M }, 0 },\n+    { \"sgdt{Q|Q}\", { M }, 0 },\n     { \"sgdt\", { M }, 0 },\n   },\n \n   /* X86_64_0F01_REG_1 */\n   {\n-    { \"sidt{Q|IQ}\", { M }, 0 },\n+    { \"sidt{Q|Q}\", { M }, 0 },\n     { \"sidt\", { M }, 0 },\n   },\n \n@@ -12323,9 +12322,9 @@ static const char *float_mem[] = {\n   \"(bad)\",\n   \"fst{s|}\",\n   \"fstp{s|}\",\n-  \"fldenvIC\",\n+  \"fldenv{C|C}\",\n   \"fldcw\",\n-  \"fNstenvIC\",\n+  \"fNstenv{C|C}\",\n   \"fNstcw\",\n   /* da */\n   \"fiadd{l|}\",\n@@ -12359,9 +12358,9 @@ static const char *float_mem[] = {\n   \"fisttp{ll|}\",\n   \"fst{l||}\",\n   \"fstp{l|}\",\n-  \"frstorIC\",\n+  \"frstor{C|C}\",\n   \"(bad)\",\n-  \"fNsaveIC\",\n+  \"fNsave{C|C}\",\n   \"fNstsw\",\n   /* de */\n   \"fiadd{s|}\",\n@@ -12735,11 +12734,9 @@ putop (const char *in_template, int sizeflag)\n \t      while (*++p != '|')\n \t\tif (*p == '}' || *p == '\\0')\n \t\t  abort ();\n+\t      alt = 1;\n \t    }\n-\t  /* Fall through.  */\n-\tcase 'I':\n-\t  alt = 1;\n-\t  continue;\n+\t  break;\n \tcase '|':\n \t  while (*++p != '}')\n \t    {\n@@ -12748,6 +12745,7 @@ putop (const char *in_template, int sizeflag)\n \t    }\n \t  break;\n \tcase '}':\n+\t  alt = 0;\n \t  break;\n \tcase 'A':\n \t  if (intel_syntax)\n@@ -13283,7 +13281,6 @@ putop (const char *in_template, int sizeflag)\n \t    }\n \t  break;\n \t}\n-      alt = 0;\n     }\n   *obufp = 0;\n   mnemonicendp = obufp;"
    }
  ]
}