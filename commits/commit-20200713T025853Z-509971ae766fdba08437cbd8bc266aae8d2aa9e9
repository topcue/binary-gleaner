{
  "sha": "509971ae766fdba08437cbd8bc266aae8d2aa9e9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTA5OTcxYWU3NjZmZGJhMDg0MzdjYmQ4YmMyNjZhYWU4ZDJhYTllOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-07-13T02:58:53Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-13T02:58:53Z"
    },
    "message": "gdb: remove TYPE_ARRAY_BIT_STRIDE\n\nRemove it and update all callers to use the equivalent accessor methods.\nA subsequent patch will make type::bit_stride work for array types\n(effectively replacing this macro), but I wanted to keep this patch a\nsimple mechanical change.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.c (TYPE_ARRAY_BIT_STRIDE): Remove.  Update all\n\tcallers to use the equivalent accessor methods.\n\nChange-Id: I09e14bd45075f98567adce8a0b93edea7722f812",
    "tree": {
      "sha": "9f8e98dc0370c62f8ff8739f60ed8ef199769660",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9f8e98dc0370c62f8ff8739f60ed8ef199769660"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/509971ae766fdba08437cbd8bc266aae8d2aa9e9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/509971ae766fdba08437cbd8bc266aae8d2aa9e9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/509971ae766fdba08437cbd8bc266aae8d2aa9e9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/509971ae766fdba08437cbd8bc266aae8d2aa9e9/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "107406b7380489559c70702b8e6e9b3395c2662a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/107406b7380489559c70702b8e6e9b3395c2662a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/107406b7380489559c70702b8e6e9b3395c2662a"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 8,
    "deletions": 9
  },
  "files": [
    {
      "sha": "0d54f5eb7292411f18ed7ad908699c3cda473f82",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/509971ae766fdba08437cbd8bc266aae8d2aa9e9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/509971ae766fdba08437cbd8bc266aae8d2aa9e9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=509971ae766fdba08437cbd8bc266aae8d2aa9e9",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-12  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.c (TYPE_ARRAY_BIT_STRIDE): Remove.  Update all\n+\tcallers to use the equivalent accessor methods.\n+\n 2020-07-12  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct range_bounds) <bit_stride>: New method."
    },
    {
      "sha": "17e15f9bdff651ae6d17e4bcb9475af211af1652",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/509971ae766fdba08437cbd8bc266aae8d2aa9e9/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/509971ae766fdba08437cbd8bc266aae8d2aa9e9/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=509971ae766fdba08437cbd8bc266aae8d2aa9e9",
      "patch": "@@ -124,7 +124,8 @@ f77_print_array_1 (int nss, int ndimensions, struct type *type,\n       struct gdbarch *gdbarch = get_type_arch (type);\n       size_t dim_size = type_length_units (TYPE_TARGET_TYPE (type));\n       int unit_size = gdbarch_addressable_memory_unit_size (gdbarch);\n-      size_t byte_stride = TYPE_ARRAY_BIT_STRIDE (type) / (unit_size * 8);\n+      size_t byte_stride\n+\t= type->index_type ()->bounds ()->bit_stride () / (unit_size * 8);\n       if (byte_stride == 0)\n \tbyte_stride = dim_size;\n       size_t offs = 0;"
    },
    {
      "sha": "d8ddc41613914a78064b0165e4737ac68276bfb9",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/509971ae766fdba08437cbd8bc266aae8d2aa9e9/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/509971ae766fdba08437cbd8bc266aae8d2aa9e9/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=509971ae766fdba08437cbd8bc266aae8d2aa9e9",
      "patch": "@@ -1633,13 +1633,6 @@ extern bool set_type_align (struct type *, ULONGEST);\n #define TYPE_DYN_PROP_KIND(dynprop) \\\n   (dynprop->kind ())\n \n-\n-/* Accessors for struct range_bounds data attached to an array type's\n-   index type.  */\n-\n-#define TYPE_ARRAY_BIT_STRIDE(arraytype) \\\n-  ((arraytype)->index_type ()->bounds ()->bit_stride ())\n-\n /* C++ */\n \n #define TYPE_SELF_TYPE(thistype) internal_type_self_type (thistype)"
    },
    {
      "sha": "775c603a8c32b4559e37869681ca0d4c31a34af2",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/509971ae766fdba08437cbd8bc266aae8d2aa9e9/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/509971ae766fdba08437cbd8bc266aae8d2aa9e9/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=509971ae766fdba08437cbd8bc266aae8d2aa9e9",
      "patch": "@@ -191,7 +191,7 @@ value_subscripted_rvalue (struct value *array, LONGEST index, LONGEST lowerbound\n \n   /* Fetch the bit stride and convert it to a byte stride, assuming 8 bits\n      in a byte.  */\n-  LONGEST stride = TYPE_ARRAY_BIT_STRIDE (array_type);\n+  LONGEST stride = array_type->index_type ()->bounds ()->bit_stride ();\n   if (stride != 0)\n     {\n       struct gdbarch *arch = get_type_arch (elt_type);"
    }
  ]
}