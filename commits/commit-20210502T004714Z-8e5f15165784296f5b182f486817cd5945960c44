{
  "sha": "8e5f15165784296f5b182f486817cd5945960c44",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGU1ZjE1MTY1Nzg0Mjk2ZjViMTgyZjQ4NjgxN2NkNTk0NTk2MGM0NA==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2016-01-02T15:50:46Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-05-02T00:47:14Z"
    },
    "message": "sim: add framework for declaring init callbacks locally\n\nTo facilitate decentralized module initialization/registration with an\neye towards multi-target support, add a framework to detect init calls\ndeclared in the source and automatically call them.  This is akin to\ngdb's _initialize_xxx framework for letting modules autodiscover.",
    "tree": {
      "sha": "f3d50c796ae717a3242514848a6d49e92f21be5f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f3d50c796ae717a3242514848a6d49e92f21be5f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8e5f15165784296f5b182f486817cd5945960c44",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e5f15165784296f5b182f486817cd5945960c44",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8e5f15165784296f5b182f486817cd5945960c44",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e5f15165784296f5b182f486817cd5945960c44/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d113096b47e4cce45e0f2ea4bb588b8a86835648",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d113096b47e4cce45e0f2ea4bb588b8a86835648",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d113096b47e4cce45e0f2ea4bb588b8a86835648"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 74,
    "deletions": 16
  },
  "files": [
    {
      "sha": "d00696354ddb78d61d72a66d860661e71bd86434",
      "filename": "sim/common/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e5f15165784296f5b182f486817cd5945960c44/sim/common/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e5f15165784296f5b182f486817cd5945960c44/sim/common/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/ChangeLog?ref=8e5f15165784296f5b182f486817cd5945960c44",
      "patch": "@@ -1,3 +1,17 @@\n+2021-05-01  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* Make-common.in (LIB_OBJS): Add modules.o.\n+\t(generated_files): Add modules.c.\n+\t(modules.c): New target.\n+\t* sim-module.c (modules): Rename to ...\n+\t(early_modules): ... this.  Delete 0 sentinel.\n+\t(early_modules_len): Define.\n+\t(sim_modules_detected, sim_modules_detected_len): Declare.\n+\t(sim_pre_argv_init): Call sim_module_install_list.\n+\t(sim_module_install): New function.\n+\t(sim_module_install_list): New function.\n+\t* sim-module.h (sim_module_install_list): Declare.\n+\n 2021-05-01  Mike Frysinger  <vapier@gentoo.org>\n \n \t* nrun.c (strsignal): New prototype."
    },
    {
      "sha": "0f87749050980a9bbbe7278b790b1c5081e80128",
      "filename": "sim/common/Make-common.in",
      "status": "modified",
      "additions": 23,
      "deletions": 1,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e5f15165784296f5b182f486817cd5945960c44/sim/common/Make-common.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e5f15165784296f5b182f486817cd5945960c44/sim/common/Make-common.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/Make-common.in?ref=8e5f15165784296f5b182f486817cd5945960c44",
      "patch": "@@ -250,7 +250,8 @@ LIBDEPS = $(BFD_LIB) $(OPCODES_LIB) $(LIBINTL_DEP) $(LIBIBERTY_LIB)\n EXTRA_LIBS = $(BFD_LIB) $(OPCODES_LIB) $(LIBINTL) $(LIBIBERTY_LIB) \\\n \t$(CONFIG_LIBS) $(SIM_EXTRA_LIBS) $(LIBDL)\n \n-LIB_OBJS = callback.o syscall.o targ-map.o version.o $(SIM_OBJS)\n+LIB_OBJS = callback.o modules.o syscall.o targ-map.o version.o \\\n+\t$(SIM_OBJS)\n \n COMPILE_FOR_BUILD = $(CC_FOR_BUILD) $(BUILD_CFLAGS)\n LINK_FOR_BUILD = $(CC_FOR_BUILD) $(BUILD_CFLAGS) $(LDFLAGS_FOR_BUILD) -o $@\n@@ -420,6 +421,7 @@ all_object_files = $(LIB_OBJS) $(SIM_RUN_OBJS)\n generated_files = \\\n \t$(SIM_EXTRA_DEPS) \\\n \thw-config.h \\\n+\tmodules.c \\\n \ttarg-map.c \\\n \ttarg-vals.h \\\n \tversion.c\n@@ -459,6 +461,26 @@ test-hw-events: $(srccom)/hw-events.c libsim.a\n \t$(CC) $(ALL_CFLAGS) -DMAIN -o test-hw-events$(EXEEXT) \\\n \t\t$(srccom)/hw-events.c libsim.a $(EXTRA_LIBS)\n \n+# See sim_pre_argv_init and sim_module_install in sim-module.c for more details.\n+modules.c: Makefile $(SIM_OBJS:.o=.c)\n+\t@echo Generating $@\n+\t@LANG=C ; export LANG ; \\\n+\tLC_ALL=C ; export LC_ALL ; \\\n+\tsed -n -e '/^sim_install_/{s/^\\(sim_install_[a-z_0-9A-Z]*\\).*/\\1/;p}' $^ | sort >$@.l-tmp\n+\t@set -e; (\\\n+\techo '/* Do not modify this file.  */'; \\\n+\techo '/* It is created automatically by the Makefile.  */'; \\\n+\techo '#include \"libiberty.h\"'; \\\n+\techo '#include \"sim-module.h\"'; \\\n+\tsed -e 's:\\(.*\\):extern __attribute__((__weak__)) MODULE_INIT_FN \\1;:' $@.l-tmp; \\\n+\techo 'MODULE_INSTALL_FN * const sim_modules_detected[] = {'; \\\n+\tsed -e 's:\\(.*\\):  \\1,:' $@.l-tmp; \\\n+\techo '};'; \\\n+\techo 'const int sim_modules_detected_len = ARRAY_SIZE (sim_modules_detected);'; \\\n+\t) >$@.tmp\n+\t$(SHELL) $(srcroot)/move-if-change $@.tmp $@\n+\t@rm -f $@.l-tmp $@.tmp\n+\n # CGEN support.\n \n # For use in Makefile.in for cpu-specific files."
    },
    {
      "sha": "a776a082176f337f0ef3428a0ed346a6bf14aca9",
      "filename": "sim/common/sim-module.c",
      "status": "modified",
      "additions": 36,
      "deletions": 15,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e5f15165784296f5b182f486817cd5945960c44/sim/common/sim-module.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e5f15165784296f5b182f486817cd5945960c44/sim/common/sim-module.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-module.c?ref=8e5f15165784296f5b182f486817cd5945960c44",
      "patch": "@@ -38,8 +38,9 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include <stdlib.h>\n \n-/* List of all modules.  */\n-static MODULE_INSTALL_FN * const modules[] = {\n+/* List of all early/core modules.\n+   TODO: Should trim this list by converting to sim_install_* framework.  */\n+static MODULE_INSTALL_FN * const early_modules[] = {\n   standard_install,\n   sim_events_install,\n   sim_model_install,\n@@ -63,8 +64,12 @@ static MODULE_INSTALL_FN * const modules[] = {\n   /* TODO: Shouldn't have device models here.  */\n   dv_sockser_install,\n #endif\n-  0\n };\n+static int early_modules_len = ARRAY_SIZE (early_modules);\n+\n+/* List of dynamically detected modules.  Declared in generated modules.c.  */\n+extern MODULE_INSTALL_FN * const sim_modules_detected[];\n+extern const int sim_modules_detected_len;\n \f\n /* Functions called from sim_open.  */\n \n@@ -92,11 +97,13 @@ sim_pre_argv_init (SIM_DESC sd, const char *myname)\n \n   sim_config_default (sd);\n \n-  /* Install all configured in modules.  */\n+  /* Install all early configured-in modules.  */\n   if (sim_module_install (sd) != SIM_RC_OK)\n     return SIM_RC_FAIL;\n \n-  return SIM_RC_OK;\n+  /* Install all remaining dynamically detected modules.  */\n+  return sim_module_install_list (sd, sim_modules_detected,\n+\t\t\t\t  sim_modules_detected_len);\n }\n \n /* Initialize common parts after argument processing.  */\n@@ -121,30 +128,44 @@ sim_post_argv_init (SIM_DESC sd)\n   return SIM_RC_OK;\n }\n \f\n-/* Install all modules.\n+/* Install a list of modules.\n    If this fails, no modules are left installed.  */\n-\n SIM_RC\n-sim_module_install (SIM_DESC sd)\n+sim_module_install_list (SIM_DESC sd, MODULE_INSTALL_FN * const *modules,\n+\t\t\t size_t modules_len)\n {\n-  MODULE_INSTALL_FN * const *modp;\n+  size_t i;\n \n-  SIM_ASSERT (STATE_MAGIC (sd) == SIM_MAGIC_NUMBER);\n-  SIM_ASSERT (STATE_MODULES (sd) == NULL);\n-\n-  STATE_MODULES (sd) = ZALLOC (struct module_list);\n-  for (modp = modules; *modp != NULL; ++modp)\n+  for (i = 0; i < modules_len; ++i)\n     {\n-      if ((*modp) (sd) != SIM_RC_OK)\n+      MODULE_INSTALL_FN *modp = modules[i];\n+\n+      if (modp != NULL && modp (sd) != SIM_RC_OK)\n \t{\n \t  sim_module_uninstall (sd);\n \t  SIM_ASSERT (STATE_MODULES (sd) == NULL);\n \t  return SIM_RC_FAIL;\n \t}\n     }\n+\n   return SIM_RC_OK;\n }\n \n+/* Install all modules.\n+   If this fails, no modules are left installed.  */\n+\n+SIM_RC\n+sim_module_install (SIM_DESC sd)\n+{\n+  MODULE_INSTALL_FN * const *modp;\n+\n+  SIM_ASSERT (STATE_MAGIC (sd) == SIM_MAGIC_NUMBER);\n+  SIM_ASSERT (STATE_MODULES (sd) == NULL);\n+\n+  STATE_MODULES (sd) = ZALLOC (struct module_list);\n+  return sim_module_install_list (sd, early_modules, early_modules_len);\n+}\n+\n /* Called after all modules have been installed and after argv\n    has been processed.  */\n "
    },
    {
      "sha": "dad557194318c8a1ff1c0abaef18ba18b8ed1a95",
      "filename": "sim/common/sim-module.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e5f15165784296f5b182f486817cd5945960c44/sim/common/sim-module.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e5f15165784296f5b182f486817cd5945960c44/sim/common/sim-module.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-module.h?ref=8e5f15165784296f5b182f486817cd5945960c44",
      "patch": "@@ -73,6 +73,7 @@ typedef struct module_info_list {\n /* Functions to register module with various handler lists */\n \n SIM_RC sim_module_install (SIM_DESC);\n+SIM_RC sim_module_install_list (SIM_DESC, MODULE_INSTALL_FN * const[], size_t);\n void sim_module_uninstall (SIM_DESC);\n void sim_module_add_init_fn (SIM_DESC sd, MODULE_INIT_FN fn);\n void sim_module_add_resume_fn (SIM_DESC sd, MODULE_RESUME_FN fn);"
    }
  ]
}