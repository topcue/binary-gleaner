{
  "sha": "4b5e8d19afe4accc3dd87aeba58d6704e71c610d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGI1ZThkMTlhZmU0YWNjYzNkZDg3YWViYTU4ZDY3MDRlNzFjNjEwZA==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-05-04T21:40:56Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-07-29T19:42:29Z"
    },
    "message": "Implement 'set print frame-info|frame-arguments presence'.\n\nNew settings allow to better control what frame information is printed.\n\n'set print frame-info' allows to override the default frame information\nprinted when a GDB command prints a frame.\nThe backtrace command has a new option -frame-info to override\nthis global setting.\n\nIt is now possible to have very short frame information by using the\nnew 'set print frame-arguments presence' and\n'set print frame-info short-location'.\n\nCombined with 'set print address off', a backtrace will only show\nthe essential information to see the function call chain, e.g.:\n  (gdb) set print address off\n  (gdb) set print frame-arguments presence\n  (gdb) set print frame-info short-location\n  (gdb) bt\n  #0  break_me ()\n  #1  call_me (...)\n  #2  main ()\n  (gdb)\n\nThis is handy in particular for big backtraces with functions having\nmany arguments.\n\nPython frame filter printing logic has been updated to respect the new\nsetting in non MI mode.\n\nAlso, the default frame information printed was inconsistent when\nbacktrace was printing the frame information itself, or when the python\nframe filtering code was printing the frame information.\nThis patch changes the default of python frame filtering to have a\nconsistent behaviour regarding printed frame-information, whatever\nthe presence/activity/matches of python filters.\n\n2019-07-29  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* frame.h (enum print_what): New value 'SHORT_LOCATION', update\n\tcomments.\n\t(print_frame_info_auto, print_frame_info_source_line,\n\tprint_frame_info_location, print_frame_info_source_and_location,\n\tprint_frame_info_location_and_address, print_frame_info_short_location):\n\tNew declarations.\n\t(struct frame_print_options): New member print_frame_info.\n\t* extension.h (enum ext_lang_frame_args): New value CLI_PRESENCE.\n\t* stack.h (get_user_print_what_frame_info): New declaration.\n\t(frame_show_address): New declaration.\n\t* stack.c (print_frame_arguments_choices): New value 'presence'.\n\t(print_frame_info_auto, print_frame_info_source_line,\n\tprint_frame_info_location, print_frame_info_source_and_location,\n\tprint_frame_info_location_and_address, print_frame_info_short_location,\n\tprint_frame_info_choices, print_frame_info_print_what): New definitions.\n\t(print_frame_args): Only print dots for args if print frame-arguments\n\tis 'presence'.\n\t(frame_print_option_defs): New element for \"frame-info\".\n\t(get_user_print_what_frame_info): New function.\n\t(frame_show_address): Make non static.  Move comment to stack.h.\n\t(print_frame_info_to_print_what): New function.\n\t(print_frame_info): Update comment.  Use fp_opts.print_frame_info\n\tto decide what to print.\n\t(backtrace_command_1): Handle the new print_frame_arguments_presence\n\tvalue.\n\t(_initialize_stack): Call add_setshow_enum_cmd for frame-info.\n\t* python/py-framefilter.c (py_print_args): Handle CLI_PRESENCE.\n\t(py_print_frame): In non-mi mode, use LOCATION as default for\n\tprint_what, similarly to frame information printed directly by\n\tbacktrace command. Handle frame-info user option in non MI mode.",
    "tree": {
      "sha": "2f90b99e8e2aad6b7cb9acceda0ae8dcef3f7cad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2f90b99e8e2aad6b7cb9acceda0ae8dcef3f7cad"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4b5e8d19afe4accc3dd87aeba58d6704e71c610d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b5e8d19afe4accc3dd87aeba58d6704e71c610d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4b5e8d19afe4accc3dd87aeba58d6704e71c610d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "de28a3b72e4e85233c6ece9063696b13ef170c00",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de28a3b72e4e85233c6ece9063696b13ef170c00",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/de28a3b72e4e85233c6ece9063696b13ef170c00"
    }
  ],
  "stats": {
    "total": 303,
    "additions": 263,
    "deletions": 40
  },
  "files": [
    {
      "sha": "4cd32d4b91314e0ad7a6491a2f7d9489e501ad2b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4b5e8d19afe4accc3dd87aeba58d6704e71c610d",
      "patch": "@@ -1,3 +1,36 @@\n+2019-07-29  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* frame.h (enum print_what): New value 'SHORT_LOCATION', update\n+\tcomments.\n+\t(print_frame_info_auto, print_frame_info_source_line,\n+\tprint_frame_info_location, print_frame_info_source_and_location,\n+\tprint_frame_info_location_and_address, print_frame_info_short_location):\n+\tNew declarations.\n+\t(struct frame_print_options): New member print_frame_info.\n+\t* extension.h (enum ext_lang_frame_args): New value CLI_PRESENCE.\n+\t* stack.h (get_user_print_what_frame_info): New declaration.\n+\t(frame_show_address): New declaration.\n+\t* stack.c (print_frame_arguments_choices): New value 'presence'.\n+\t(print_frame_info_auto, print_frame_info_source_line,\n+\tprint_frame_info_location, print_frame_info_source_and_location,\n+\tprint_frame_info_location_and_address, print_frame_info_short_location,\n+\tprint_frame_info_choices, print_frame_info_print_what): New definitions.\n+\t(print_frame_args): Only print dots for args if print frame-arguments\n+\tis 'presence'.\n+\t(frame_print_option_defs): New element for \"frame-info\".\n+\t(get_user_print_what_frame_info): New function.\n+\t(frame_show_address): Make non static.  Move comment to stack.h.\n+\t(print_frame_info_to_print_what): New function.\n+\t(print_frame_info): Update comment.  Use fp_opts.print_frame_info\n+\tto decide what to print.\n+\t(backtrace_command_1): Handle the new print_frame_arguments_presence\n+\tvalue.\n+\t(_initialize_stack): Call add_setshow_enum_cmd for frame-info.\n+\t* python/py-framefilter.c (py_print_args): Handle CLI_PRESENCE.\n+\t(py_print_frame): In non-mi mode, use LOCATION as default for\n+\tprint_what, similarly to frame information printed directly by\n+\tbacktrace command. Handle frame-info user option in non MI mode.\n+\n 2019-07-27  Kevin Buettner  <kevinb@redhat.com>\n \n \t* linux-thread-db.c (thread_db_target::thread_handle_to_thread_info):"
    },
    {
      "sha": "581afc282dc71a0193c31215aa2933d95589d38c",
      "filename": "gdb/extension.h",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/extension.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/extension.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/extension.h?ref=4b5e8d19afe4accc3dd87aeba58d6704e71c610d",
      "patch": "@@ -125,7 +125,10 @@ enum ext_lang_frame_args\n     CLI_SCALAR_VALUES,\n \n     /* Print all values for arguments when invoked from the CLI. */\n-    CLI_ALL_VALUES\n+    CLI_ALL_VALUES,\n+\n+    /* Only indicate the presence of arguments when invoked from the CLI.  */\n+    CLI_PRESENCE\n   };\n \n /* The possible results of"
    },
    {
      "sha": "ccc285005aaf8e3b2f6fdb85a46b1056ec39fa8d",
      "filename": "gdb/frame.h",
      "status": "modified",
      "additions": 28,
      "deletions": 9,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.h?ref=4b5e8d19afe4accc3dd87aeba58d6704e71c610d",
      "patch": "@@ -677,18 +677,28 @@ extern struct gdbarch *frame_unwind_arch (frame_info *next_frame);\n extern struct gdbarch *frame_unwind_caller_arch (struct frame_info *frame);\n \n \n-/* Values for the source flag to be used in print_frame_info_base().  */\n+/* Values for the source flag to be used in print_frame_info ().\n+   For all the cases below, the address is never printed if\n+   'set print address' is off.  When 'set print address' is on,\n+   the address is printed if the program counter is not at the\n+   beginning of the source line of the frame\n+   and PRINT_WHAT is != LOC_AND_ADDRESS.  */\n enum print_what\n-  { \n-    /* Print only the source line, like in stepi.  */\n-    SRC_LINE = -1, \n-    /* Print only the location, i.e. level, address (sometimes)\n-       function, args, file, line, line num.  */\n+  {\n+    /* Print only the address, source line, like in stepi.  */\n+    SRC_LINE = -1,\n+    /* Print only the location, i.e. level, address,\n+       function, args (as controlled by 'set print frame-arguments'),\n+       file, line, line num.  */\n     LOCATION,\n     /* Print both of the above.  */\n-    SRC_AND_LOC, \n-    /* Print location only, but always include the address.  */\n-    LOC_AND_ADDRESS \n+    SRC_AND_LOC,\n+    /* Print location only, print the address even if the program counter\n+       is at the beginning of the source line.  */\n+    LOC_AND_ADDRESS,\n+    /* Print only level and function,\n+       i.e. location only, without address, file, line, line num.  */\n+    SHORT_LOCATION\n   };\n \n /* Allocate zero initialized memory from the frame cache obstack.\n@@ -772,6 +782,14 @@ extern const char print_frame_arguments_all[];\n extern const char print_frame_arguments_scalars[];\n extern const char print_frame_arguments_none[];\n \n+/* The possible choices of \"set print frame-info\".  */\n+extern const char print_frame_info_auto[];\n+extern const char print_frame_info_source_line[];\n+extern const char print_frame_info_location[];\n+extern const char print_frame_info_source_and_location[];\n+extern const char print_frame_info_location_and_address[];\n+extern const char print_frame_info_short_location[];\n+\n /* The possible choices of \"set print entry-values\".  */\n extern const char print_entry_values_no[];\n extern const char print_entry_values_only[];\n@@ -787,6 +805,7 @@ extern const char print_entry_values_default[];\n struct frame_print_options\n {\n   const char *print_frame_arguments = print_frame_arguments_scalars;\n+  const char *print_frame_info = print_frame_info_auto;\n   const char *print_entry_values = print_entry_values_default;\n \n   /* If non-zero, don't invoke pretty-printers for frame"
    },
    {
      "sha": "a2a96ac0d39eb50b6cfa7abdaa9e01cf2b216e83",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 78,
      "deletions": 12,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=4b5e8d19afe4accc3dd87aeba58d6704e71c610d",
      "patch": "@@ -25,6 +25,8 @@\n #include \"python.h\"\n #include \"ui-out.h\"\n #include \"valprint.h\"\n+#include \"stack.h\"\n+#include \"source.h\"\n #include \"annotate.h\"\n #include \"hashtab.h\"\n #include \"demangle.h\"\n@@ -713,9 +715,21 @@ py_print_args (PyObject *filter,\n   annotate_frame_args ();\n   out->text (\" (\");\n \n-  if (args_iter != Py_None\n-      && (enumerate_args (args_iter.get (), out, args_type, 0, frame)\n-\t  == EXT_LANG_BT_ERROR))\n+  if (args_type == CLI_PRESENCE)\n+    {\n+      if (args_iter != Py_None)\n+\t{\n+\t  gdbpy_ref<> item (PyIter_Next (args_iter.get ()));\n+\n+\t  if (item != NULL)\n+\t    out->text (\"...\");\n+\t  else if (PyErr_Occurred ())\n+\t    return EXT_LANG_BT_ERROR;\n+\t}\n+    }\n+  else if (args_iter != Py_None\n+\t   && (enumerate_args (args_iter.get (), out, args_type, 0, frame)\n+\t       == EXT_LANG_BT_ERROR))\n     return EXT_LANG_BT_ERROR;\n \n   out->text (\")\");\n@@ -748,7 +762,16 @@ py_print_frame (PyObject *filter, frame_filter_flags flags,\n   struct gdbarch *gdbarch = NULL;\n   struct frame_info *frame = NULL;\n   struct value_print_options opts;\n+\n   int print_level, print_frame_info, print_args, print_locals;\n+  /* Note that the below default in non-mi mode is the same as the\n+     default value for the backtrace command (see the call to print_frame_info\n+     in backtrace_command_1).\n+     Having the same default ensures that 'bt' and 'bt no-filters'\n+     have the same behaviour when some filters exist but do not apply\n+     to a frame.  */\n+  enum print_what print_what\n+    = out->is_mi_like_p () ? LOC_AND_ADDRESS : LOCATION;\n   gdb::unique_xmalloc_ptr<char> function_to_free;\n \n   /* Extract print settings from FLAGS.  */\n@@ -758,6 +781,17 @@ py_print_frame (PyObject *filter, frame_filter_flags flags,\n   print_locals = (flags & PRINT_LOCALS) ? 1 : 0;\n \n   get_user_print_options (&opts);\n+  if (print_frame_info)\n+  {\n+    gdb::optional<enum print_what> user_frame_info_print_what;\n+\n+    get_user_print_what_frame_info (&user_frame_info_print_what);\n+    if (!out->is_mi_like_p () && user_frame_info_print_what.has_value ())\n+      {\n+\t/* Use the specific frame information desired by the user.  */\n+\tprint_what = *user_frame_info_print_what;\n+      }\n+  }\n \n   /* Get the underlying frame.  This is needed to determine GDB\n   architecture, and also, in the cases of frame variables/arguments to\n@@ -771,6 +805,8 @@ py_print_frame (PyObject *filter, frame_filter_flags flags,\n   if (frame == NULL)\n     return EXT_LANG_BT_ERROR;\n \n+  symtab_and_line sal = find_frame_sal (frame);\n+\n   gdbarch = get_frame_arch (frame);\n \n   /* stack-list-variables.  */\n@@ -815,9 +851,19 @@ py_print_frame (PyObject *filter, frame_filter_flags flags,\n \t}\n     }\n \n+  /* For MI, each piece is controlled individually.  */\n+  bool location_print = (print_frame_info\n+\t\t\t && !out->is_mi_like_p ()\n+\t\t\t && (print_what == LOCATION\n+\t\t\t     || print_what == SRC_AND_LOC\n+\t\t\t     || print_what == LOC_AND_ADDRESS\n+\t\t\t     || print_what == SHORT_LOCATION));\n+\n   /* Print frame level.  MI does not require the level if\n      locals/variables only are being printed.  */\n-  if ((print_frame_info || print_args) && print_level)\n+  if (print_level\n+      && (location_print\n+\t  || (out->is_mi_like_p () && (print_frame_info || print_args))))\n     {\n       struct frame_info **slot;\n       int level;\n@@ -843,16 +889,21 @@ py_print_frame (PyObject *filter, frame_filter_flags flags,\n \t}\n     }\n \n-  if (print_frame_info)\n+  if (location_print || (out->is_mi_like_p () && print_frame_info))\n     {\n       /* Print address to the address field.  If an address is not provided,\n \t print nothing.  */\n       if (opts.addressprint && has_addr)\n \t{\n-\t  annotate_frame_address ();\n-\t  out->field_core_addr (\"addr\", gdbarch, address);\n-\t  annotate_frame_address_end ();\n-\t  out->text (\" in \");\n+\t  if (!sal.symtab\n+\t      || frame_show_address (frame, sal)\n+\t      || print_what == LOC_AND_ADDRESS)\n+\t    {\n+\t      annotate_frame_address ();\n+\t      out->field_core_addr (\"addr\", gdbarch, address);\n+\t      annotate_frame_address_end ();\n+\t      out->text (\" in \");\n+\t    }\n \t}\n \n       /* Print frame function name.  */\n@@ -904,14 +955,17 @@ py_print_frame (PyObject *filter, frame_filter_flags flags,\n \n   /* Frame arguments.  Check the result, and error if something went\n      wrong.  */\n-  if (print_args)\n+  if (print_args && (location_print || out->is_mi_like_p ()))\n     {\n       if (py_print_args (filter, out, args_type, frame) == EXT_LANG_BT_ERROR)\n \treturn EXT_LANG_BT_ERROR;\n     }\n \n   /* File name/source/line number information.  */\n-  if (print_frame_info)\n+  bool print_location_source\n+    = ((location_print && print_what != SHORT_LOCATION)\n+       || (out->is_mi_like_p () && print_frame_info));\n+  if (print_location_source)\n     {\n       annotate_frame_source_begin ();\n \n@@ -963,12 +1017,24 @@ py_print_frame (PyObject *filter, frame_filter_flags flags,\n                            (gdbarch_bfd_arch_info (gdbarch))->printable_name);\n     }\n \n+  bool source_print\n+    = (! out->is_mi_like_p ()\n+       && (print_what == SRC_LINE || print_what == SRC_AND_LOC));\n+  if (source_print)\n+    {\n+      if (print_location_source)\n+\tout->text (\"\\n\"); /* Newline after the location source.  */\n+      print_source_lines (sal.symtab, sal.line, sal.line + 1, 0);\n+    }\n+\n   /* For MI we need to deal with the \"children\" list population of\n      elided frames, so if MI output detected do not send newline.  */\n   if (! out->is_mi_like_p ())\n     {\n       annotate_frame_end ();\n-      out->text (\"\\n\");\n+      /* print_source_lines has already printed a newline.  */\n+      if (!source_print)\n+\tout->text (\"\\n\");\n     }\n \n   if (print_locals)"
    },
    {
      "sha": "7833ca4aeb61cd9b205ac9936021c2ef5a718266",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 108,
      "deletions": 18,
      "changes": 126,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=4b5e8d19afe4accc3dd87aeba58d6704e71c610d",
      "patch": "@@ -61,15 +61,44 @@\n const char print_frame_arguments_all[] = \"all\";\n const char print_frame_arguments_scalars[] = \"scalars\";\n const char print_frame_arguments_none[] = \"none\";\n+const char print_frame_arguments_presence[] = \"presence\";\n \n static const char *const print_frame_arguments_choices[] =\n {\n   print_frame_arguments_all,\n   print_frame_arguments_scalars,\n   print_frame_arguments_none,\n+  print_frame_arguments_presence,\n   NULL\n };\n \n+/* The possible choices of \"set print frame-info\", and the value\n+   of this setting.  */\n+\n+const char print_frame_info_auto[] = \"auto\";\n+const char print_frame_info_source_line[] = \"source-line\";\n+const char print_frame_info_location[] = \"location\";\n+const char print_frame_info_source_and_location[] = \"source-and-location\";\n+const char print_frame_info_location_and_address[] = \"location-and-address\";\n+const char print_frame_info_short_location[] = \"short-location\";\n+\n+static const char *const print_frame_info_choices[] =\n+{\n+  print_frame_info_auto,\n+  print_frame_info_source_line,\n+  print_frame_info_location,\n+  print_frame_info_source_and_location,\n+  print_frame_info_location_and_address,\n+  print_frame_info_short_location,\n+  NULL\n+};\n+\n+/* print_frame_info_print_what[i] maps a choice to the corresponding\n+   print_what enum.  */\n+static const gdb::optional<enum print_what> print_frame_info_print_what[] =\n+  {{}, /* Empty value for \"auto\".  */\n+   SRC_LINE, LOCATION, SRC_AND_LOC, LOC_AND_ADDRESS, SHORT_LOCATION};\n+\n /* The possible choices of \"set print entry-values\", and the value\n    of this setting.  */\n \n@@ -137,6 +166,17 @@ or both.  Note that one or both of these values may be <optimized out>.\"),\n     N_(\"If set, frame arguments are printed in raw form, bypassing any\\n\\\n pretty-printers for that value.\")\n   },\n+\n+  enum_option_def {\n+    \"frame-info\",\n+    print_frame_info_choices,\n+    [] (frame_print_options *opt) { return &opt->print_frame_info; },\n+    NULL, /* show_cmd_cb */\n+    N_(\"Set printing of frame information.\"),\n+    N_(\"Show printing of frame information.\"),\n+    NULL /* help_doc */\n+  }\n+\n };\n \n /* Options for the \"backtrace\" command.  */\n@@ -209,10 +249,9 @@ static struct symtab *last_displayed_symtab = 0;\n static int last_displayed_line = 0;\n \f\n \n-/* Return 1 if we should display the address in addition to the location,\n-   because we are in the middle of a statement.  */\n+/* See stack.h.  */\n \n-static int\n+int\n frame_show_address (struct frame_info *frame,\n \t\t    struct symtab_and_line sal)\n {\n@@ -631,9 +670,14 @@ print_frame_args (const frame_print_options &fp_opts,\n   long highest_offset = -1;\n   /* Number of ints of arguments that we have printed so far.  */\n   int args_printed = 0;\n+  /* True if we should print arg names.  If false, we only indicate\n+     the presence of arguments by printing ellipsis.  */\n+  bool print_names\n+    = fp_opts.print_frame_arguments != print_frame_arguments_presence;\n   /* True if we should print arguments, false otherwise.  */\n   bool print_args\n-    = fp_opts.print_frame_arguments != print_frame_arguments_none;\n+    = (print_names\n+       && fp_opts.print_frame_arguments != print_frame_arguments_none);\n \n   if (func)\n     {\n@@ -653,6 +697,13 @@ print_frame_args (const frame_print_options &fp_opts,\n \t  if (!SYMBOL_IS_ARGUMENT (sym))\n \t    continue;\n \n+\t  if (!print_names)\n+\t    {\n+\t      uiout->text (\"...\");\n+\t      first = 0;\n+\t      break;\n+\t    }\n+\n \t  switch (SYMBOL_CLASS (sym))\n \t    {\n \t    case LOC_ARG:\n@@ -801,8 +852,11 @@ print_frame_args (const frame_print_options &fp_opts,\n       else\n \tstart = highest_offset;\n \n-      print_frame_nameless_args (frame, start, num - args_printed,\n-\t\t\t\t first, stream);\n+      if (!print_names && !first && num > 0)\n+\tuiout->text (\"...\");\n+      else\n+\tprint_frame_nameless_args (frame, start, num - args_printed,\n+\t\t\t\t   first, stream);\n     }\n }\n \n@@ -859,13 +913,37 @@ do_gdb_disassembly (struct gdbarch *gdbarch,\n     }\n }\n \n+/* Converts the PRINT_FRAME_INFO choice to an optional enum print_what.\n+   Value not present indicates to the caller to use default values\n+   specific to the command being executed.  */\n+\n+static gdb::optional<enum print_what>\n+print_frame_info_to_print_what (const char *print_frame_info)\n+{\n+  for (int i = 0; print_frame_info_choices[i] != NULL; i++)\n+    if (print_frame_info == print_frame_info_choices[i])\n+      return print_frame_info_print_what[i];\n+\n+  internal_error (__FILE__, __LINE__,\n+\t\t  \"Unexpected print frame-info value `%s'.\",\n+\t\t  print_frame_info);\n+}\n+\n+/* See stack.h.  */\n+\n+void\n+get_user_print_what_frame_info (gdb::optional<enum print_what> *what)\n+{\n+  *what\n+    = print_frame_info_to_print_what\n+        (user_frame_print_options.print_frame_info);\n+}\n+\n /* Print information about frame FRAME.  The output is format according\n-   to PRINT_LEVEL and PRINT_WHAT and PRINT_ARGS.  The meaning of\n-   PRINT_WHAT is:\n-   \n-   SRC_LINE: Print only source line.\n-   LOCATION: Print only location.\n-   SRC_AND_LOC: Print location and source line.\n+   to PRINT_LEVEL and PRINT_WHAT and PRINT_ARGS.  For the meaning of\n+   PRINT_WHAT, see enum print_what comments in frame.h.\n+   Note that PRINT_WHAT is overriden if FP_OPTS.print_frame_info\n+   != print_frame_info_auto.\n \n    Used in \"where\" output, and to emit breakpoint or step\n    messages.  */\n@@ -881,6 +959,13 @@ print_frame_info (const frame_print_options &fp_opts,\n   int location_print;\n   struct ui_out *uiout = current_uiout;\n \n+  if (!current_uiout->is_mi_like_p ()\n+      && fp_opts.print_frame_info != print_frame_info_auto)\n+    {\n+      /* Use the specific frame information desired by the user.  */\n+      print_what = *print_frame_info_to_print_what (fp_opts.print_frame_info);\n+    }\n+\n   if (get_frame_type (frame) == DUMMY_FRAME\n       || get_frame_type (frame) == SIGTRAMP_FRAME\n       || get_frame_type (frame) == ARCH_FRAME)\n@@ -944,10 +1029,10 @@ print_frame_info (const frame_print_options &fp_opts,\n      to get the line containing FRAME->pc.  */\n   symtab_and_line sal = find_frame_sal (frame);\n \n-  location_print = (print_what == LOCATION \n+  location_print = (print_what == LOCATION\n+\t\t    || print_what == SRC_AND_LOC\n \t\t    || print_what == LOC_AND_ADDRESS\n-\t\t    || print_what == SRC_AND_LOC);\n-\n+\t\t    || print_what == SHORT_LOCATION);\n   if (location_print || !sal.symtab)\n     print_frame (fp_opts, frame, print_level, print_what, print_args, sal);\n \n@@ -1258,7 +1343,7 @@ print_frame (const frame_print_options &fp_opts,\n \tQUIT;\n       }\n     uiout->text (\")\");\n-    if (sal.symtab)\n+    if (print_what != SHORT_LOCATION && sal.symtab)\n       {\n \tconst char *filename_display;\n       \n@@ -1281,7 +1366,8 @@ print_frame (const frame_print_options &fp_opts,\n \tannotate_frame_source_end ();\n       }\n \n-    if (pc_p && (funname == NULL || sal.symtab == NULL))\n+    if (print_what != SHORT_LOCATION\n+\t&& pc_p && (funname == NULL || sal.symtab == NULL))\n       {\n \tchar *lib = solib_name_from_address (get_frame_program_space (frame),\n \t\t\t\t\t     get_frame_pc (frame));\n@@ -1891,8 +1977,12 @@ backtrace_command_1 (const frame_print_options &fp_opts,\n \targ_type = CLI_SCALAR_VALUES;\n       else if (fp_opts.print_frame_arguments == print_frame_arguments_all)\n \targ_type = CLI_ALL_VALUES;\n-      else\n+      else if (fp_opts.print_frame_arguments == print_frame_arguments_presence)\n+\targ_type = CLI_PRESENCE;\n+      else if (fp_opts.print_frame_arguments == print_frame_arguments_none)\n \targ_type = NO_VALUES;\n+      else\n+\tgdb_assert (0);\n \n       result = apply_ext_lang_frame_filter (get_current_frame (), flags,\n \t\t\t\t\t    arg_type, current_uiout,"
    },
    {
      "sha": "dda4fc9f6629674b07f0203e7e33144ae7ad3383",
      "filename": "gdb/stack.h",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/stack.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b5e8d19afe4accc3dd87aeba58d6704e71c610d/gdb/stack.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.h?ref=4b5e8d19afe4accc3dd87aeba58d6704e71c610d",
      "patch": "@@ -42,6 +42,18 @@ void iterate_over_block_local_vars (const struct block *block,\n \t\t\t\t    iterate_over_block_arg_local_vars_cb cb,\n \t\t\t\t    void *cb_data);\n \n+/* Initialize *WHAT to be a copy of the user desired print what frame info.\n+   If !WHAT.has_value (), the printing function chooses a default set of\n+   information to print, otherwise the printing function should print\n+   the relevant information.  */\n+\n+void get_user_print_what_frame_info (gdb::optional<enum print_what> *what);\n+\n+/* Return 1 if we should display the address in addition to the location,\n+   because we are in the middle of a statement.  */\n+\n+int frame_show_address (struct frame_info *frame, struct symtab_and_line sal);\n+\n /* Get or set the last displayed symtab and line, which is, e.g. where we set a\n  * breakpoint when `break' is supplied with no arguments.  */\n void clear_last_displayed_sal (void);"
    }
  ]
}