{
  "sha": "cecb19129054860e40d14c78af5c5ab06873e0ab",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2VjYjE5MTI5MDU0ODYwZTQwZDE0Yzc4YWY1YzVhYjA2ODczZTBhYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-18T05:46:13Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-18T05:46:13Z"
    },
    "message": "gdb: const-ify unpack_* functions in remote.c\n\nConst-ify the unpack_* functions, and then adjust the callers\naccordingly.\n\ngdb/ChangeLog:\n\n\t* remote.c (class remote_target)\n\t<remote_unpack_thread_info_response,\n\tparse_threadlist_response>: Constify parameter and/or return\n\tvalue and or local variable.\n\t(stub_unpack_int): Likewise.\n\t(unpack_nibble): Likewise.\n\t(unpack_byte): Likewise.\n\t(unpack_int): Likewise.\n\t(unpack_string): Likewise.\n\t(unpack_threadid): Likewise.\n\t(remote_target::remote_unpack_thread_info_response): Likewise.\n\t(remote_target::parse_threadlist_response): Likewise.\n\nChange-Id: Ibda75f664d6e3452df00f85af7134533049171b7",
    "tree": {
      "sha": "16f778b4f339b9dd58dbc2c037e09ebc7a432e06",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/16f778b4f339b9dd58dbc2c037e09ebc7a432e06"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cecb19129054860e40d14c78af5c5ab06873e0ab",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cecb19129054860e40d14c78af5c5ab06873e0ab",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cecb19129054860e40d14c78af5c5ab06873e0ab",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cecb19129054860e40d14c78af5c5ab06873e0ab/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "44365e88c0e021a7f734e44aa845f1e96cd83389",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/44365e88c0e021a7f734e44aa845f1e96cd83389",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/44365e88c0e021a7f734e44aa845f1e96cd83389"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 39,
    "deletions": 25
  },
  "files": [
    {
      "sha": "e1bf15666ceb1a3c4c00f361082e5bd9850cff54",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cecb19129054860e40d14c78af5c5ab06873e0ab/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cecb19129054860e40d14c78af5c5ab06873e0ab/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cecb19129054860e40d14c78af5c5ab06873e0ab",
      "patch": "@@ -1,3 +1,18 @@\n+2021-01-18  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* remote.c (class remote_target)\n+\t<remote_unpack_thread_info_response,\n+\tparse_threadlist_response>: Constify parameter and/or return\n+\tvalue and or local variable.\n+\t(stub_unpack_int): Likewise.\n+\t(unpack_nibble): Likewise.\n+\t(unpack_byte): Likewise.\n+\t(unpack_int): Likewise.\n+\t(unpack_string): Likewise.\n+\t(unpack_threadid): Likewise.\n+\t(remote_target::remote_unpack_thread_info_response): Likewise.\n+\t(remote_target::parse_threadlist_response): Likewise.\n+\n 2021-01-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* tui/tui.c (tui_is_window_visible): Compare to nullptr, not 0."
    },
    {
      "sha": "1df05e6cc70623517bce78283339c3d3ee0c0ab9",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 24,
      "deletions": 25,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cecb19129054860e40d14c78af5c5ab06873e0ab/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cecb19129054860e40d14c78af5c5ab06873e0ab/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=cecb19129054860e40d14c78af5c5ab06873e0ab",
      "patch": "@@ -793,12 +793,12 @@ class remote_target : public process_stratum_target\n \n   char *write_ptid (char *buf, const char *endbuf, ptid_t ptid);\n \n-  int remote_unpack_thread_info_response (char *pkt, threadref *expectedref,\n+  int remote_unpack_thread_info_response (const char *pkt, threadref *expectedref,\n \t\t\t\t\t  gdb_ext_thread_info *info);\n   int remote_get_threadinfo (threadref *threadid, int fieldset,\n \t\t\t     gdb_ext_thread_info *info);\n \n-  int parse_threadlist_response (char *pkt, int result_limit,\n+  int parse_threadlist_response (const char *pkt, int result_limit,\n \t\t\t\t threadref *original_echo,\n \t\t\t\t threadref *resultlist,\n \t\t\t\t int *doneflag);\n@@ -1017,7 +1017,7 @@ static CORE_ADDR remote_address_masked (CORE_ADDR);\n \n static void print_packet (const char *);\n \n-static int stub_unpack_int (char *buff, int fieldlength);\n+static int stub_unpack_int (const char *buff, int fieldlength);\n \n struct packet_config;\n \n@@ -2999,19 +2999,19 @@ struct gdb_ext_thread_info\n \n #define BUF_THREAD_ID_SIZE (OPAQUETHREADBYTES * 2)\n \n-static char *unpack_nibble (char *buf, int *val);\n+static const char *unpack_nibble (const char *buf, int *val);\n \n-static char *unpack_byte (char *buf, int *value);\n+static const char *unpack_byte (const char *buf, int *value);\n \n static char *pack_int (char *buf, int value);\n \n-static char *unpack_int (char *buf, int *value);\n+static const char *unpack_int (const char *buf, int *value);\n \n-static char *unpack_string (char *src, char *dest, int length);\n+static const char *unpack_string (const char *src, char *dest, int length);\n \n static char *pack_threadid (char *pkt, threadref *id);\n \n-static char *unpack_threadid (char *inbuf, threadref *id);\n+static const char *unpack_threadid (const char *inbuf, threadref *id);\n \n void int_to_threadref (threadref *id, int value);\n \n@@ -3121,7 +3121,7 @@ stubhex (int ch)\n }\n \n static int\n-stub_unpack_int (char *buff, int fieldlength)\n+stub_unpack_int (const char *buff, int fieldlength)\n {\n   int nibble;\n   int retval = 0;\n@@ -3137,15 +3137,15 @@ stub_unpack_int (char *buff, int fieldlength)\n   return retval;\n }\n \n-static char *\n-unpack_nibble (char *buf, int *val)\n+static const char *\n+unpack_nibble (const char *buf, int *val)\n {\n   *val = fromhex (*buf++);\n   return buf;\n }\n \n-static char *\n-unpack_byte (char *buf, int *value)\n+static const char *\n+unpack_byte (const char *buf, int *value)\n {\n   *value = stub_unpack_int (buf, 2);\n   return buf + 2;\n@@ -3161,8 +3161,8 @@ pack_int (char *buf, int value)\n   return buf;\n }\n \n-static char *\n-unpack_int (char *buf, int *value)\n+static const char *\n+unpack_int (const char *buf, int *value)\n {\n   *value = stub_unpack_int (buf, 8);\n   return buf + 8;\n@@ -3192,8 +3192,8 @@ pack_string (char *pkt, char *string)\n }\n #endif /* 0 (unused) */\n \n-static char *\n-unpack_string (char *src, char *dest, int length)\n+static const char *\n+unpack_string (const char *src, char *dest, int length)\n {\n   while (length--)\n     *dest++ = *src++;\n@@ -3215,11 +3215,11 @@ pack_threadid (char *pkt, threadref *id)\n }\n \n \n-static char *\n-unpack_threadid (char *inbuf, threadref *id)\n+static const char *\n+unpack_threadid (const char *inbuf, threadref *id)\n {\n   char *altref;\n-  char *limit = inbuf + BUF_THREAD_ID_SIZE;\n+  const char *limit = inbuf + BUF_THREAD_ID_SIZE;\n   int x, y;\n \n   altref = (char *) id;\n@@ -3334,15 +3334,15 @@ pack_threadinfo_request (char *pkt, int mode, threadref *id)\n \t\t\t\t   the process.  */\n \n int\n-remote_target::remote_unpack_thread_info_response (char *pkt,\n+remote_target::remote_unpack_thread_info_response (const char *pkt,\n \t\t\t\t\t\t   threadref *expectedref,\n \t\t\t\t\t\t   gdb_ext_thread_info *info)\n {\n   struct remote_state *rs = get_remote_state ();\n   int mask, length;\n   int tag;\n   threadref ref;\n-  char *limit = pkt + rs->buf.size (); /* Plausible parsing limit.  */\n+  const char *limit = pkt + rs->buf.size (); /* Plausible parsing limit.  */\n   int retval = 1;\n \n   /* info->threadid = 0; FIXME: implement zero_threadref.  */\n@@ -3465,18 +3465,17 @@ pack_threadlist_request (char *pkt, int startflag, int threadcount,\n /* Encoding:   'q':8,'M':8,count:16,done:8,argthreadid:64,(threadid:64)* */\n \n int\n-remote_target::parse_threadlist_response (char *pkt, int result_limit,\n+remote_target::parse_threadlist_response (const char *pkt, int result_limit,\n \t\t\t\t\t  threadref *original_echo,\n \t\t\t\t\t  threadref *resultlist,\n \t\t\t\t\t  int *doneflag)\n {\n   struct remote_state *rs = get_remote_state ();\n-  char *limit;\n   int count, resultcount, done;\n \n   resultcount = 0;\n   /* Assume the 'q' and 'M chars have been stripped.  */\n-  limit = pkt + (rs->buf.size () - BUF_THREAD_ID_SIZE);\n+  const char *limit = pkt + (rs->buf.size () - BUF_THREAD_ID_SIZE);\n   /* done parse past here */\n   pkt = unpack_byte (pkt, &count);\t/* count field */\n   pkt = unpack_nibble (pkt, &done);"
    }
  ]
}