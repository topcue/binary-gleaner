{
  "sha": "c83004d526c9f5e203926a979d405f7b720b9ede",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzgzMDA0ZDUyNmM5ZjVlMjAzOTI2YTk3OWQ0MDVmN2I3MjBiOWVkZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-28T02:19:30Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-28T05:08:08Z"
    },
    "message": "m68k linker segmentation faults\n\nThis doesn't fix the underlying bug, but an abort is better than a\nsegfault.\n\n\tPR 24596\n\t* elf32-m68k.c (elf_m68k_get_got_entry): Don't create a new\n\tentry when MUST_FIND.  Abort when MUST_FIND not found.\n\t(elf_m68k_get_bfd2got_entry): Likewise.\n\t(elf_m68k_relocate_section): Remove now useless assert.",
    "tree": {
      "sha": "f96259309cf3e9126aab52eb09c60f1d222280f7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f96259309cf3e9126aab52eb09c60f1d222280f7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c83004d526c9f5e203926a979d405f7b720b9ede",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c83004d526c9f5e203926a979d405f7b720b9ede",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c83004d526c9f5e203926a979d405f7b720b9ede",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c83004d526c9f5e203926a979d405f7b720b9ede/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "586338b839d3f65d22eb3baef41f7395974f1f11",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/586338b839d3f65d22eb3baef41f7395974f1f11",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/586338b839d3f65d22eb3baef41f7395974f1f11"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 31,
    "deletions": 12
  },
  "files": [
    {
      "sha": "fd0dfcb420251d59d717814234695963ab4e5563",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c83004d526c9f5e203926a979d405f7b720b9ede/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c83004d526c9f5e203926a979d405f7b720b9ede/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=c83004d526c9f5e203926a979d405f7b720b9ede",
      "patch": "@@ -1,3 +1,11 @@\n+2019-05-28  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24596\n+\t* elf32-m68k.c (elf_m68k_get_got_entry): Don't create a new\n+\tentry when MUST_FIND.  Abort when MUST_FIND not found.\n+\t(elf_m68k_get_bfd2got_entry): Likewise.\n+\t(elf_m68k_relocate_section): Remove now useless assert.\n+\n 2019-05-28  Alan Modra  <amodra@gmail.com>\n \n \tPR 24596"
    },
    {
      "sha": "4efac790d6995e101e2bd526bf86fd723fb1e793",
      "filename": "bfd/elf32-m68k.c",
      "status": "modified",
      "additions": 23,
      "deletions": 12,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c83004d526c9f5e203926a979d405f7b720b9ede/bfd/elf32-m68k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c83004d526c9f5e203926a979d405f7b720b9ede/bfd/elf32-m68k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68k.c?ref=c83004d526c9f5e203926a979d405f7b720b9ede",
      "patch": "@@ -1519,14 +1519,18 @@ elf_m68k_get_got_entry (struct elf_m68k_got *got,\n     }\n \n   entry_.key_ = *key;\n-  ptr = htab_find_slot (got->entries, &entry_, (howto != SEARCH\n-\t\t\t\t\t\t? INSERT : NO_INSERT));\n+  ptr = htab_find_slot (got->entries, &entry_,\n+\t\t\t(howto == SEARCH || howto == MUST_FIND ? NO_INSERT\n+\t\t\t : INSERT));\n   if (ptr == NULL)\n     {\n       if (howto == SEARCH)\n \t/* Entry not found.  */\n \treturn NULL;\n \n+      if (howto == MUST_FIND)\n+\tabort ();\n+\n       /* We're out of memory.  */\n       bfd_set_error (bfd_error_no_memory);\n       return NULL;\n@@ -1535,7 +1539,10 @@ elf_m68k_get_got_entry (struct elf_m68k_got *got,\n   if (*ptr == NULL)\n     /* We didn't find the entry and we're asked to create a new one.  */\n     {\n-      BFD_ASSERT (howto != MUST_FIND && howto != SEARCH);\n+      if (howto == MUST_FIND)\n+\tabort ();\n+\n+      BFD_ASSERT (howto != SEARCH);\n \n       entry = bfd_alloc (elf_hash_table (info)->dynobj, sizeof (*entry));\n       if (entry == NULL)\n@@ -1750,14 +1757,18 @@ elf_m68k_get_bfd2got_entry (struct elf_m68k_multi_got *multi_got,\n     }\n \n   entry_.bfd = abfd;\n-  ptr = htab_find_slot (multi_got->bfd2got, &entry_, (howto != SEARCH\n-\t\t\t\t\t\t      ? INSERT : NO_INSERT));\n+  ptr = htab_find_slot (multi_got->bfd2got, &entry_,\n+\t\t\t(howto == SEARCH || howto == MUST_FIND ? NO_INSERT\n+\t\t\t : INSERT));\n   if (ptr == NULL)\n     {\n       if (howto == SEARCH)\n \t/* Entry not found.  */\n \treturn NULL;\n \n+      if (howto == MUST_FIND)\n+\tabort ();\n+\n       /* We're out of memory.  */\n       bfd_set_error (bfd_error_no_memory);\n       return NULL;\n@@ -1766,7 +1777,10 @@ elf_m68k_get_bfd2got_entry (struct elf_m68k_multi_got *multi_got,\n   if (*ptr == NULL)\n     /* Entry was not found.  Create new one.  */\n     {\n-      BFD_ASSERT (howto != MUST_FIND && howto != SEARCH);\n+      if (howto == MUST_FIND)\n+\tabort ();\n+\n+      BFD_ASSERT (howto != SEARCH);\n \n       entry = ((struct elf_m68k_bfd2got_entry *)\n \t       bfd_alloc (elf_hash_table (info)->dynobj, sizeof (*entry)));\n@@ -3562,12 +3576,9 @@ elf_m68k_relocate_section (bfd *output_bfd,\n \t    BFD_ASSERT (sgot != NULL);\n \n \t    if (got == NULL)\n-\t      {\n-\t\tgot = elf_m68k_get_bfd2got_entry (elf_m68k_multi_got (info),\n-\t\t\t\t\t\t  input_bfd, MUST_FIND,\n-\t\t\t\t\t\t  NULL)->got;\n-\t\tBFD_ASSERT (got != NULL);\n-\t      }\n+\t      got = elf_m68k_get_bfd2got_entry (elf_m68k_multi_got (info),\n+\t\t\t\t\t\tinput_bfd, MUST_FIND,\n+\t\t\t\t\t\tNULL)->got;\n \n \t    /* Get GOT offset for this symbol.  */\n \t    elf_m68k_init_got_entry_key (&key_, h, input_bfd, r_symndx,"
    }
  ]
}