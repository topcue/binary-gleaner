{
  "sha": "f601a00c4c70f396defc66d592c4786135616545",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjYwMWEwMGM0YzcwZjM5NmRlZmM2NmQ1OTJjNDc4NjEzNTYxNjU0NQ==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-15T16:40:06Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:22:13Z"
    },
    "message": "[PATCH 13/57][Arm][GAS] Add support for MVE instructions: vand, vbic, vorr, vorn and veor\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (enum operand_parse_code): New operands.\n\t(parse_operands): Handle new operands.\n\t(enum vfp_or_neon_is_neon_bits): Moved\n\t(vfp_or_neon_is_neon): Moved\n\t(check_simd_pred_availability): Moved.\n\t(do_neon_logic): Change to accept MVE variants.\n\t(insns): Changed to accept MVE variants.\n\t* testsuite/gas/arm/mve-vand-bad.d: New test.\n\t* testsuite/gas/arm/mve-vand-bad.l: New test.\n\t* testsuite/gas/arm/mve-vand-bad.s: New test.\n\t* testsuite/gas/arm/mve-vbic-bad.d: New test.\n\t* testsuite/gas/arm/mve-vbic-bad.l: New test.\n\t* testsuite/gas/arm/mve-vbic-bad.s: New test.\n\t* testsuite/gas/arm/mve-veor-bad.d: New test.\n\t* testsuite/gas/arm/mve-veor-bad.l: New test.\n\t* testsuite/gas/arm/mve-veor-bad.s: New test.\n\t* testsuite/gas/arm/mve-vorn-bad.d: New test.\n\t* testsuite/gas/arm/mve-vorn-bad.l: New test.\n\t* testsuite/gas/arm/mve-vorn-bad.s: New test.\n\t* testsuite/gas/arm/mve-vorr-bad.d: New test.\n\t* testsuite/gas/arm/mve-vorr-bad.l: New test.\n\t* testsuite/gas/arm/mve-vorr-bad.s: New test.",
    "tree": {
      "sha": "ea769c56c251fc21049a7cb28668f0f4021fb70d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ea769c56c251fc21049a7cb28668f0f4021fb70d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f601a00c4c70f396defc66d592c4786135616545",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f601a00c4c70f396defc66d592c4786135616545",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f601a00c4c70f396defc66d592c4786135616545",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f601a00c4c70f396defc66d592c4786135616545/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "26c1e780920096772b5735250fa31a4184d2253c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26c1e780920096772b5735250fa31a4184d2253c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/26c1e780920096772b5735250fa31a4184d2253c"
    }
  ],
  "stats": {
    "total": 558,
    "additions": 464,
    "deletions": 94
  },
  "files": [
    {
      "sha": "cb111071c4ea844ad07ba50fc1678020bfd89c93",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -1,3 +1,28 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (enum operand_parse_code): New operands.\n+\t(parse_operands): Handle new operands.\n+\t(enum vfp_or_neon_is_neon_bits): Moved\n+\t(vfp_or_neon_is_neon): Moved\n+\t(check_simd_pred_availability): Moved.\n+\t(do_neon_logic): Change to accept MVE variants.\n+\t(insns): Changed to accept MVE variants.\n+\t* testsuite/gas/arm/mve-vand-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vand-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vand-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vbic-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vbic-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vbic-bad.s: New test.\n+\t* testsuite/gas/arm/mve-veor-bad.d: New test.\n+\t* testsuite/gas/arm/mve-veor-bad.l: New test.\n+\t* testsuite/gas/arm/mve-veor-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vorn-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vorn-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vorn-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vorr-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vorr-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vorr-bad.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (M_MNEM_vaddlv, M_MNEM_vaddlva, M_MNEM_vaddv,"
    },
    {
      "sha": "9510d7d742bf2d89b748725bc6da23cbcc83ec63",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 123,
      "deletions": 94,
      "changes": 217,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -6954,6 +6954,8 @@ enum operand_parse_code\n   OP_RND_RNSC,  /* Neon D reg, or Neon scalar.  */\n   OP_VMOV,      /* Neon VMOV operands.  */\n   OP_RNDQ_Ibig,\t/* Neon D or Q reg, or big immediate for logic and VMVN.  */\n+  /* Neon D, Q or MVE vector register, or big immediate for logic and VMVN.  */\n+  OP_RNDQMQ_Ibig,\n   OP_RNDQ_I63b, /* Neon D or Q reg, or immediate for shift.  */\n   OP_RIWR_I32z, /* iWMMXt wR register, or immediate 0 .. 32 for iWMMXt2.  */\n   OP_VLDR,\t/* VLDR operand.  */\n@@ -7368,6 +7370,10 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  po_misc_or_fail (parse_neon_mov (&str, &i) == FAIL);\n \t  break;\n \n+\tcase OP_RNDQMQ_Ibig:\n+\t  po_reg_or_goto (REG_TYPE_MQ, try_rndq_ibig);\n+\t  break;\n+\ttry_rndq_ibig:\n \tcase OP_RNDQ_Ibig:\n \t  {\n \t    po_reg_or_goto (REG_TYPE_NDQ, try_immbig);\n@@ -16002,12 +16008,104 @@ neon_cmode_for_logic_imm (unsigned immediate, unsigned *immbits, int size)\n   return FAIL;\n }\n \n+enum vfp_or_neon_is_neon_bits\n+{\n+NEON_CHECK_CC = 1,\n+NEON_CHECK_ARCH = 2,\n+NEON_CHECK_ARCH8 = 4\n+};\n+\n+/* Call this function if an instruction which may have belonged to the VFP or\n+ Neon instruction sets, but turned out to be a Neon instruction (due to the\n+ operand types involved, etc.). We have to check and/or fix-up a couple of\n+ things:\n+\n+   - Make sure the user hasn't attempted to make a Neon instruction\n+     conditional.\n+   - Alter the value in the condition code field if necessary.\n+   - Make sure that the arch supports Neon instructions.\n+\n+ Which of these operations take place depends on bits from enum\n+ vfp_or_neon_is_neon_bits.\n+\n+ WARNING: This function has side effects! If NEON_CHECK_CC is used and the\n+ current instruction's condition is COND_ALWAYS, the condition field is\n+ changed to inst.uncond_value.  This is necessary because instructions shared\n+ between VFP and Neon may be conditional for the VFP variants only, and the\n+ unconditional Neon version must have, e.g., 0xF in the condition field.  */\n+\n+static int\n+vfp_or_neon_is_neon (unsigned check)\n+{\n+/* Conditions are always legal in Thumb mode (IT blocks).  */\n+if (!thumb_mode && (check & NEON_CHECK_CC))\n+  {\n+    if (inst.cond != COND_ALWAYS)\n+      {\n+\tfirst_error (_(BAD_COND));\n+\treturn FAIL;\n+      }\n+    if (inst.uncond_value != -1)\n+      inst.instruction |= inst.uncond_value << 28;\n+  }\n+\n+\n+  if (((check & NEON_CHECK_ARCH) && !mark_feature_used (&fpu_neon_ext_v1))\n+      || ((check & NEON_CHECK_ARCH8)\n+\t  && !mark_feature_used (&fpu_neon_ext_armv8)))\n+    {\n+      first_error (_(BAD_FPU));\n+      return FAIL;\n+    }\n+\n+return SUCCESS;\n+}\n+\n+static int\n+check_simd_pred_availability (int fp, unsigned check)\n+{\n+if (inst.cond > COND_ALWAYS)\n+  {\n+    if (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+      {\n+\tinst.error = BAD_FPU;\n+\treturn 1;\n+      }\n+    inst.pred_insn_type = INSIDE_VPT_INSN;\n+  }\n+else if (inst.cond < COND_ALWAYS)\n+  {\n+    if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+      inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+    else if (vfp_or_neon_is_neon (check) == FAIL)\n+      return 2;\n+  }\n+else\n+  {\n+    if (!ARM_CPU_HAS_FEATURE (cpu_variant, fp ? mve_fp_ext : mve_ext)\n+\t&& vfp_or_neon_is_neon (check) == FAIL)\n+      return 3;\n+\n+    if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+      inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+  }\n+return 0;\n+}\n+\n static void\n do_neon_logic (void)\n {\n   if (inst.operands[2].present && inst.operands[2].isreg)\n     {\n       enum neon_shape rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n+      if (rs == NS_QQQ\n+\t  && check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC)\n+\t  == FAIL)\n+\treturn;\n+      else if (rs != NS_QQQ\n+\t       && !ARM_CPU_HAS_FEATURE (cpu_variant, fpu_neon_ext_v1))\n+\tfirst_error (BAD_FPU);\n+\n       neon_check_type (3, rs, N_IGNORE_TYPE);\n       /* U bit and size field were set as part of the bitmask.  */\n       NEON_ENCODE (INTEGER, inst);\n@@ -16021,14 +16119,29 @@ do_neon_logic (void)\n       enum neon_shape rs = (three_ops_form\n \t\t\t    ? neon_select_shape (NS_DDI, NS_QQI, NS_NULL)\n \t\t\t    : neon_select_shape (NS_DI, NS_QI, NS_NULL));\n-      struct neon_type_el et = neon_check_type (2, rs,\n-\tN_I8 | N_I16 | N_I32 | N_I64 | N_F32 | N_KEY, N_EQK);\n+      /* Because neon_select_shape makes the second operand a copy of the first\n+\t if the second operand is not present.  */\n+      if (rs == NS_QQI\n+\t  && check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC)\n+\t  == FAIL)\n+\treturn;\n+      else if (rs != NS_QQI\n+\t       && !ARM_CPU_HAS_FEATURE (cpu_variant, fpu_neon_ext_v1))\n+\tfirst_error (BAD_FPU);\n+\n+      struct neon_type_el et;\n+      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+\tet = neon_check_type (2, rs, N_I32 | N_I16 | N_KEY, N_EQK);\n+      else\n+\tet = neon_check_type (2, rs, N_I8 | N_I16 | N_I32 | N_I64 | N_F32\n+\t\t\t      | N_KEY, N_EQK);\n+\n+      if (et.type == NT_invtype)\n+\treturn;\n       enum neon_opc opcode = (enum neon_opc) inst.instruction & 0x0fffffff;\n       unsigned immbits;\n       int cmode;\n \n-      if (et.type == NT_invtype)\n-\treturn;\n \n       if (three_ops_form)\n \tconstraint (inst.operands[0].reg != inst.operands[1].reg,\n@@ -16138,90 +16251,6 @@ do_neon_dyadic_if_i_d (void)\n   neon_dyadic_misc (NT_untyped, N_IF_32, 0);\n }\n \n-enum vfp_or_neon_is_neon_bits\n-{\n-  NEON_CHECK_CC = 1,\n-  NEON_CHECK_ARCH = 2,\n-  NEON_CHECK_ARCH8 = 4\n-};\n-\n-/* Call this function if an instruction which may have belonged to the VFP or\n-   Neon instruction sets, but turned out to be a Neon instruction (due to the\n-   operand types involved, etc.). We have to check and/or fix-up a couple of\n-   things:\n-\n-     - Make sure the user hasn't attempted to make a Neon instruction\n-       conditional.\n-     - Alter the value in the condition code field if necessary.\n-     - Make sure that the arch supports Neon instructions.\n-\n-   Which of these operations take place depends on bits from enum\n-   vfp_or_neon_is_neon_bits.\n-\n-   WARNING: This function has side effects! If NEON_CHECK_CC is used and the\n-   current instruction's condition is COND_ALWAYS, the condition field is\n-   changed to inst.uncond_value. This is necessary because instructions shared\n-   between VFP and Neon may be conditional for the VFP variants only, and the\n-   unconditional Neon version must have, e.g., 0xF in the condition field.  */\n-\n-static int\n-vfp_or_neon_is_neon (unsigned check)\n-{\n-  /* Conditions are always legal in Thumb mode (IT blocks).  */\n-  if (!thumb_mode && (check & NEON_CHECK_CC))\n-    {\n-      if (inst.cond != COND_ALWAYS)\n-\t{\n-\t  first_error (_(BAD_COND));\n-\t  return FAIL;\n-\t}\n-      if (inst.uncond_value != -1)\n-\tinst.instruction |= inst.uncond_value << 28;\n-    }\n-\n-\n-    if (((check & NEON_CHECK_ARCH) && !mark_feature_used (&fpu_neon_ext_v1))\n-\t|| ((check & NEON_CHECK_ARCH8)\n-\t    && !mark_feature_used (&fpu_neon_ext_armv8)))\n-      {\n-\tfirst_error (_(BAD_FPU));\n-\treturn FAIL;\n-      }\n-\n-  return SUCCESS;\n-}\n-\n-static int\n-check_simd_pred_availability (int fp, unsigned check)\n-{\n-  if (inst.cond > COND_ALWAYS)\n-    {\n-      if (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n-\t{\n-\t  inst.error = BAD_FPU;\n-\t  return 1;\n-\t}\n-      inst.pred_insn_type = INSIDE_VPT_INSN;\n-    }\n-  else if (inst.cond < COND_ALWAYS)\n-    {\n-      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n-\tinst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n-      else if (vfp_or_neon_is_neon (check) == FAIL)\n-\treturn 2;\n-    }\n-  else\n-    {\n-      if (!ARM_CPU_HAS_FEATURE (cpu_variant, fp ? mve_fp_ext : mve_ext)\n-\t  && vfp_or_neon_is_neon (check) == FAIL)\n-\treturn 3;\n-\n-      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n-\tinst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n-    }\n-  return 0;\n-}\n-\n static void\n do_mve_vstr_vldr_QI (int size, int elsize, int load)\n {\n@@ -23347,15 +23376,10 @@ static const struct asm_opcode insns[] =\n  nUF(vqshl,     _vqshl,   3, (RNDQ, oRNDQ, RNDQ_I63b), neon_qshl_imm),\n  nUF(vqshlq,    _vqshl,   3, (RNQ,  oRNQ,  RNDQ_I63b), neon_qshl_imm),\n   /* Logic ops, types optional & ignored.  */\n- nUF(vand,      _vand,    3, (RNDQ, oRNDQ, RNDQ_Ibig), neon_logic),\n  nUF(vandq,     _vand,    3, (RNQ,  oRNQ,  RNDQ_Ibig), neon_logic),\n- nUF(vbic,      _vbic,    3, (RNDQ, oRNDQ, RNDQ_Ibig), neon_logic),\n  nUF(vbicq,     _vbic,    3, (RNQ,  oRNQ,  RNDQ_Ibig), neon_logic),\n- nUF(vorr,      _vorr,    3, (RNDQ, oRNDQ, RNDQ_Ibig), neon_logic),\n  nUF(vorrq,     _vorr,    3, (RNQ,  oRNQ,  RNDQ_Ibig), neon_logic),\n- nUF(vorn,      _vorn,    3, (RNDQ, oRNDQ, RNDQ_Ibig), neon_logic),\n  nUF(vornq,     _vorn,    3, (RNQ,  oRNQ,  RNDQ_Ibig), neon_logic),\n- nUF(veor,      _veor,    3, (RNDQ, oRNDQ, RNDQ),      neon_logic),\n  nUF(veorq,     _veor,    3, (RNQ,  oRNQ,  RNQ),       neon_logic),\n   /* Bitfield ops, untyped.  */\n  NUF(vbsl,      1100110, 3, (RNDQ, RNDQ, RNDQ), neon_bitfield),\n@@ -24108,10 +24132,15 @@ static const struct asm_opcode insns[] =\n \n #undef\tARM_VARIANT\n #define ARM_VARIANT & fpu_neon_ext_v1\n- mnUF(vabd,      _vabd,    3, (RNDQMQ, oRNDQMQ, RNDQMQ), neon_dyadic_if_su),\n+ mnUF(vabd,      _vabd,\t\t  3, (RNDQMQ, oRNDQMQ, RNDQMQ), neon_dyadic_if_su),\n  mnUF(vabdl,     _vabdl,\t  3, (RNQMQ, RNDMQ, RNDMQ),   neon_dyadic_long),\n  mnUF(vaddl,     _vaddl,\t  3, (RNQMQ, RNDMQ, RNDMQR),  neon_dyadic_long),\n  mnUF(vsubl,     _vsubl,\t  3, (RNQMQ, RNDMQ, RNDMQR),  neon_dyadic_long),\n+ mnUF(vand,      _vand,\t\t  3, (RNDQMQ, oRNDQMQ, RNDQMQ_Ibig), neon_logic),\n+ mnUF(vbic,      _vbic,\t\t  3, (RNDQMQ, oRNDQMQ, RNDQMQ_Ibig), neon_logic),\n+ mnUF(vorr,      _vorr,\t\t  3, (RNDQMQ, oRNDQMQ, RNDQMQ_Ibig), neon_logic),\n+ mnUF(vorn,      _vorn,\t\t  3, (RNDQMQ, oRNDQMQ, RNDQMQ_Ibig), neon_logic),\n+ mnUF(veor,      _veor,\t\t  3, (RNDQMQ, oRNDQMQ, RNDQMQ),      neon_logic),\n };\n #undef ARM_VARIANT\n #undef THUMB_VARIANT"
    },
    {
      "sha": "1889759d344b460b8e1e7d54359fe989a4940bf1",
      "filename": "gas/testsuite/gas/arm/mve-vand-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vand-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vand-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vand-bad.d?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VAND instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vand-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "f6044b123ee0e61d05657765abc974aaa7083194",
      "filename": "gas/testsuite/gas/arm/mve-vand-bad.l",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vand-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vand-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vand-bad.l?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,27 @@\n+[^:]*: Assembler messages:\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Error: syntax error -- `vandeq q0,q1,q2'\n+[^:]*:20: Error: syntax error -- `vandeq q0,q1,q2'\n+[^:]*:22: Error: syntax error -- `vandeq q0,q1,q2'\n+[^:]*:24: Error: instruction missing MVE vector predication code -- `vand q0,q1,q2'\n+[^:]*:25: Error: vector predicated instruction should be in VPT/VPST block -- `vandt q0,q1,q2'\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Error: syntax error -- `vandeq.i16 q0,#255'\n+[^:]*:29: Error: syntax error -- `vandeq.i16 q0,#255'\n+[^:]*:31: Error: syntax error -- `vandeq.i16 q0,#255'\n+[^:]*:33: Error: instruction missing MVE vector predication code -- `vand.i16 q0,#255'\n+[^:]*:34: Error: vector predicated instruction should be in VPT/VPST block -- `vandt.i16 q0,#255'\n+[^:]*:35: Error: bad type in SIMD instruction -- `vand.i8 q0,#255'\n+[^:]*:36: Error: bad type in SIMD instruction -- `vand.i64 q0,#255'\n+[^:]*:37: Error: immediate value out of range -- `vand.i16 q0,#0'\n+[^:]*:38: Error: immediate value out of range -- `vand.i32 q0,#0'"
    },
    {
      "sha": "77f27bdc4db8c190c41d3f94a824878aae9fdbcc",
      "filename": "gas/testsuite/gas/arm/mve-vand-bad.s",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vand-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vand-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vand-bad.s?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,38 @@\n+.macro cond1\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vand q0, q1, q2\n+.endr\n+.endm\n+\n+.macro cond2\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vand.i16 q0, #255\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+cond1\n+it eq\n+vandeq q0, q1, q2\n+vandeq q0, q1, q2\n+vpst\n+vandeq q0, q1, q2\n+vpst\n+vand q0, q1, q2\n+vandt q0, q1, q2\n+cond2\n+it eq\n+vandeq.i16 q0, #255\n+vandeq.i16 q0, #255\n+vpst\n+vandeq.i16 q0, #255\n+vpst\n+vand.i16 q0, #255\n+vandt.i16 q0, #255\n+vand.i8 q0, #255\n+vand.i64 q0, #255\n+vand.i16 q0, #0\n+vand.i32 q0, #0"
    },
    {
      "sha": "5c17bf47589d7bbfd8140126ddcb69cecaa98297",
      "filename": "gas/testsuite/gas/arm/mve-vbic-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vbic-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vbic-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vbic-bad.d?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VBIC instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vbic-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "10deb9dcd02aca1d870fac04273815b600cd0180",
      "filename": "gas/testsuite/gas/arm/mve-vbic-bad.l",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vbic-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vbic-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vbic-bad.l?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,28 @@\n+[^:]*: Assembler messages:\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Error: syntax error -- `vbiceq q0,q1,q2'\n+[^:]*:20: Error: syntax error -- `vbiceq q0,q1,q2'\n+[^:]*:22: Error: syntax error -- `vbiceq q0,q1,q2'\n+[^:]*:24: Error: instruction missing MVE vector predication code -- `vbic q0,q1,q2'\n+[^:]*:25: Error: vector predicated instruction should be in VPT/VPST block -- `vbict q0,q1,q2'\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Error: syntax error -- `vbiceq.i16 q0,#255'\n+[^:]*:29: Error: syntax error -- `vbiceq.i16 q0,#255'\n+[^:]*:31: Error: syntax error -- `vbiceq.i16 q0,#255'\n+[^:]*:33: Error: instruction missing MVE vector predication code -- `vbic.i16 q0,#255'\n+[^:]*:34: Error: vector predicated instruction should be in VPT/VPST block -- `vbict.i16 q0,#255'\n+[^:]*:35: Error: bad type in SIMD instruction -- `vbic.i8 q0,#255'\n+[^:]*:36: Error: bad type in SIMD instruction -- `vbic.i64 q0,#255'\n+[^:]*:37: Error: immediate value out of range -- `vbic.i16 q0,#257'\n+[^:]*:38: Error: immediate value out of range -- `vbic.i32 q0,#257'\n+"
    },
    {
      "sha": "4f35158e05bcf7a5e29705dce15fe76e870841a3",
      "filename": "gas/testsuite/gas/arm/mve-vbic-bad.s",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vbic-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vbic-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vbic-bad.s?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,38 @@\n+.macro cond1\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vbic q0, q1, q2\n+.endr\n+.endm\n+\n+.macro cond2\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vbic.i16 q0, #255\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+cond1\n+it eq\n+vbiceq q0, q1, q2\n+vbiceq q0, q1, q2\n+vpst\n+vbiceq q0, q1, q2\n+vpst\n+vbic q0, q1, q2\n+vbict q0, q1, q2\n+cond2\n+it eq\n+vbiceq.i16 q0, #255\n+vbiceq.i16 q0, #255\n+vpst\n+vbiceq.i16 q0, #255\n+vpst\n+vbic.i16 q0, #255\n+vbict.i16 q0, #255\n+vbic.i8 q0, #255\n+vbic.i64 q0, #255\n+vbic.i16 q0, #257\n+vbic.i32 q0, #257"
    },
    {
      "sha": "e51228660bb45955cc131a8f1993255ad361b008",
      "filename": "gas/testsuite/gas/arm/mve-veor-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-veor-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-veor-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-veor-bad.d?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VEOR instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-veor-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "3da9c7170ee7051a6a983f89df1f720ef921d42c",
      "filename": "gas/testsuite/gas/arm/mve-veor-bad.l",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-veor-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-veor-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-veor-bad.l?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,12 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:10: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:12: Error: syntax error -- `veoreq q0,q1,q2'\n+[^:]*:13: Error: syntax error -- `veoreq q0,q1,q2'\n+[^:]*:15: Error: syntax error -- `veoreq q0,q1,q2'\n+[^:]*:17: Error: instruction missing MVE vector predication code -- `veor q0,q1,q2'\n+[^:]*:18: Error: vector predicated instruction should be in VPT/VPST block -- `veort q0,q1,q2'"
    },
    {
      "sha": "ffc1a0095055ca72b5a567bebab3db0454034e01",
      "filename": "gas/testsuite/gas/arm/mve-veor-bad.s",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-veor-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-veor-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-veor-bad.s?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,18 @@\n+.macro cond\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+veor q0, q1, q2\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+cond\n+it eq\n+veoreq q0, q1, q2\n+veoreq q0, q1, q2\n+vpst\n+veoreq q0, q1, q2\n+vpst\n+veor q0, q1, q2\n+veort q0, q1, q2"
    },
    {
      "sha": "e78957f9ece3bf063cc3aa8c6b103b99a4f0fe3d",
      "filename": "gas/testsuite/gas/arm/mve-vorn-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorn-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorn-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vorn-bad.d?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VORN instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vorn-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "69e479b847989b231a685491ae46c28def8a217b",
      "filename": "gas/testsuite/gas/arm/mve-vorn-bad.l",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorn-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorn-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vorn-bad.l?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,27 @@\n+[^:]*: Assembler messages:\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Error: syntax error -- `vorneq q0,q1,q2'\n+[^:]*:20: Error: syntax error -- `vorneq q0,q1,q2'\n+[^:]*:22: Error: syntax error -- `vorneq q0,q1,q2'\n+[^:]*:24: Error: instruction missing MVE vector predication code -- `vorn q0,q1,q2'\n+[^:]*:25: Error: vector predicated instruction should be in VPT/VPST block -- `vornt q0,q1,q2'\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Error: syntax error -- `vorneq.i16 q0,#255'\n+[^:]*:29: Error: syntax error -- `vorneq.i16 q0,#255'\n+[^:]*:31: Error: syntax error -- `vorneq.i16 q0,#255'\n+[^:]*:33: Error: instruction missing MVE vector predication code -- `vorn.i16 q0,#255'\n+[^:]*:34: Error: vector predicated instruction should be in VPT/VPST block -- `vornt.i16 q0,#255'\n+[^:]*:35: Error: bad type in SIMD instruction -- `vorn.i8 q0,#255'\n+[^:]*:36: Error: bad type in SIMD instruction -- `vorn.i64 q0,#255'\n+[^:]*:37: Error: immediate value out of range -- `vorn.i16 q0,#0'\n+[^:]*:38: Error: immediate value out of range -- `vorn.i32 q0,#0'"
    },
    {
      "sha": "9a2edb0cfcbd4a137cb3027599a954c8e69b537c",
      "filename": "gas/testsuite/gas/arm/mve-vorn-bad.s",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorn-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorn-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vorn-bad.s?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,38 @@\n+.macro cond1\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vorn q0, q1, q2\n+.endr\n+.endm\n+\n+.macro cond2\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vorn.i16 q0, #255\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+cond1\n+it eq\n+vorneq q0, q1, q2\n+vorneq q0, q1, q2\n+vpst\n+vorneq q0, q1, q2\n+vpst\n+vorn q0, q1, q2\n+vornt q0, q1, q2\n+cond2\n+it eq\n+vorneq.i16 q0, #255\n+vorneq.i16 q0, #255\n+vpst\n+vorneq.i16 q0, #255\n+vpst\n+vorn.i16 q0, #255\n+vornt.i16 q0, #255\n+vorn.i8 q0, #255\n+vorn.i64 q0, #255\n+vorn.i16 q0, #0\n+vorn.i32 q0, #0"
    },
    {
      "sha": "4e94b8a4d460b5844ad7919d58f6e5261f34bc29",
      "filename": "gas/testsuite/gas/arm/mve-vorr-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorr-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorr-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vorr-bad.d?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VORR instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vorr-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "19a0ab8d09c6c964997a1f3d69e25c5b2762a72b",
      "filename": "gas/testsuite/gas/arm/mve-vorr-bad.l",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorr-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorr-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vorr-bad.l?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,27 @@\n+[^:]*: Assembler messages:\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Error: syntax error -- `vorreq q0,q1,q2'\n+[^:]*:20: Error: syntax error -- `vorreq q0,q1,q2'\n+[^:]*:22: Error: syntax error -- `vorreq q0,q1,q2'\n+[^:]*:24: Error: instruction missing MVE vector predication code -- `vorr q0,q1,q2'\n+[^:]*:25: Error: vector predicated instruction should be in VPT/VPST block -- `vorrt q0,q1,q2'\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Error: syntax error -- `vorreq.i16 q0,#255'\n+[^:]*:29: Error: syntax error -- `vorreq.i16 q0,#255'\n+[^:]*:31: Error: syntax error -- `vorreq.i16 q0,#255'\n+[^:]*:33: Error: instruction missing MVE vector predication code -- `vorr.i16 q0,#255'\n+[^:]*:34: Error: vector predicated instruction should be in VPT/VPST block -- `vorrt.i16 q0,#255'\n+[^:]*:35: Error: bad type in SIMD instruction -- `vorr.i8 q0,#255'\n+[^:]*:36: Error: bad type in SIMD instruction -- `vorr.i64 q0,#255'\n+[^:]*:37: Error: immediate value out of range -- `vorr.i16 q0,#257'\n+[^:]*:38: Error: immediate value out of range -- `vorr.i32 q0,#257'"
    },
    {
      "sha": "671e35f71026b3ec8a5d1efd4d7eab7162ac5ace",
      "filename": "gas/testsuite/gas/arm/mve-vorr-bad.s",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorr-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f601a00c4c70f396defc66d592c4786135616545/gas/testsuite/gas/arm/mve-vorr-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vorr-bad.s?ref=f601a00c4c70f396defc66d592c4786135616545",
      "patch": "@@ -0,0 +1,38 @@\n+.macro cond1\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vorr q0, q1, q2\n+.endr\n+.endm\n+\n+.macro cond2\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vorr.i16 q0, #255\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+cond1\n+it eq\n+vorreq q0, q1, q2\n+vorreq q0, q1, q2\n+vpst\n+vorreq q0, q1, q2\n+vpst\n+vorr q0, q1, q2\n+vorrt q0, q1, q2\n+cond2\n+it eq\n+vorreq.i16 q0, #255\n+vorreq.i16 q0, #255\n+vpst\n+vorreq.i16 q0, #255\n+vpst\n+vorr.i16 q0, #255\n+vorrt.i16 q0, #255\n+vorr.i8 q0, #255\n+vorr.i64 q0, #255\n+vorr.i16 q0, #257\n+vorr.i32 q0, #257"
    }
  ]
}