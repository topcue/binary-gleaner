{
  "sha": "a50187b2c6c28be79a32332e06a572cf08683de3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTUwMTg3YjJjNmMyOGJlNzlhMzIzMzJlMDZhNTcyY2YwODY4M2RlMw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-15T05:59:44Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-15T05:59:44Z"
    },
    "message": "x86: harmonize disp with imm handling\n\nCertain disp values may trigger \"... shortened to ...\" warnings when\nequivalent imm ones don't. In some of the cases there are also\ndifferences (for non-64-bit code) between BFD64 and !BFD64 builds. The\nresulting encodings (i.e. use [or not] of the shorter disp8 / imm8\nforms) are also different in some cases. Make this handling consistent.\n\nNote that using equivalent 16-bit mode displacements / immediates\ncontinues to expose entirely different behavior (see the disp-imm-16\ntestcase added by an earlier patch). This may want to be the subject of\nfurther changes, but it'll then quickly become obvious that e.g. keying\nuse of extend_to_32bit_address() to non-64-bit mode isn't appropriate\neither: Once we allow wrapping operands, we would better do so\nconsistently, in which case all of this would need to become dependent\nupon address or operand size instead of mode.",
    "tree": {
      "sha": "0e7b6cce1e8a7723756955f6d62de2df3f0950c5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0e7b6cce1e8a7723756955f6d62de2df3f0950c5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a50187b2c6c28be79a32332e06a572cf08683de3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a50187b2c6c28be79a32332e06a572cf08683de3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a50187b2c6c28be79a32332e06a572cf08683de3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a50187b2c6c28be79a32332e06a572cf08683de3/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "86f041462ec31a02efbcecdce8ee52ed2f340a68",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/86f041462ec31a02efbcecdce8ee52ed2f340a68",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/86f041462ec31a02efbcecdce8ee52ed2f340a68"
    }
  ],
  "stats": {
    "total": 102,
    "additions": 79,
    "deletions": 23
  },
  "files": [
    {
      "sha": "0a59cd74d6ab8669cda171b7c2f6a77397e956b1",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a50187b2c6c28be79a32332e06a572cf08683de3/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a50187b2c6c28be79a32332e06a572cf08683de3/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=a50187b2c6c28be79a32332e06a572cf08683de3",
      "patch": "@@ -1,3 +1,13 @@\n+2021-06-15  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (optimize_disp): Generalize disp32 part of\n+\tthe BFD64-only logic to also apply to non-64-bit code.\n+\t(i386_finalize_displacement): Use extend_to_32bit_address for\n+\tnon-64-bit code. Drop now redundant O_constant checks.\n+\t* testsuite/gas/i386/disp-imm-32.s,\n+\ttestsuite/gas/i386/disp-imm-32.d: New.\n+\t* testsuite/gas/i386/i386.exp: Run new test.\n+\n 2021-06-15  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (offset_in_range): Replace uses of"
    },
    {
      "sha": "e6276dcab5c46991b612865fd75ef7f91b1b33c5",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 28,
      "deletions": 23,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a50187b2c6c28be79a32332e06a572cf08683de3/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a50187b2c6c28be79a32332e06a572cf08683de3/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=a50187b2c6c28be79a32332e06a572cf08683de3",
      "patch": "@@ -5905,26 +5905,24 @@ optimize_disp (void)\n \t      }\n \n #ifdef BFD64\n-\t    if (flag_code == CODE_64BIT)\n+\t    /* Optimize 64-bit displacement to 32-bit for 64-bit BFD.  */\n+\t    if ((i.types[op].bitfield.disp32\n+\t\t || (flag_code == CODE_64BIT\n+\t\t     && want_disp32 (current_templates->start)))\n+\t\t&& fits_in_unsigned_long (op_disp))\n \t      {\n-\t\t/* Optimize 64-bit displacement to 32-bit for 64-bit BFD.  */\n-\t\tif ((i.types[op].bitfield.disp32\n-\t\t     || want_disp32 (current_templates->start))\n-\t\t    && fits_in_unsigned_long (op_disp))\n-\t\t  {\n-\t\t    /* If this operand is at most 32 bits, convert\n-\t\t       to a signed 32 bit number and don't use 64bit\n-\t\t       displacement.  */\n-\t\t    op_disp = (op_disp ^ ((offsetT) 1 << 31)) - ((addressT) 1 << 31);\n-\t\t    i.types[op].bitfield.disp64 = 0;\n-\t\t    i.types[op].bitfield.disp32 = 1;\n-\t\t  }\n+\t\t/* If this operand is at most 32 bits, convert\n+\t\t   to a signed 32 bit number and don't use 64bit\n+\t\t   displacement.  */\n+\t\top_disp = (op_disp ^ ((offsetT) 1 << 31)) - ((addressT) 1 << 31);\n+\t\ti.types[op].bitfield.disp64 = 0;\n+\t\ti.types[op].bitfield.disp32 = 1;\n+\t      }\n \n-\t\tif (fits_in_signed_long (op_disp))\n-\t\t  {\n-\t\t    i.types[op].bitfield.disp64 = 0;\n-\t\t    i.types[op].bitfield.disp32s = 1;\n-\t\t  }\n+\t    if (flag_code == CODE_64BIT && fits_in_signed_long (op_disp))\n+\t      {\n+\t\ti.types[op].bitfield.disp64 = 0;\n+\t\ti.types[op].bitfield.disp32s = 1;\n \t      }\n #endif\n \t    if ((i.types[op].bitfield.disp32\n@@ -11019,9 +11017,18 @@ i386_finalize_displacement (segT exp_seg ATTRIBUTE_UNUSED, expressionS *exp,\n       ret = 0;\n     }\n \n+  else if (exp->X_op == O_constant)\n+    {\n+      /* Sizing gets taken care of by optimize_disp().\n+\n+\t If not 64bit, sign/zero extend val, to account for wraparound\n+\t when !BFD64.  */\n+      if (flag_code != CODE_64BIT)\n+\texp->X_add_number = extend_to_32bit_address (exp->X_add_number);\n+    }\n+\n #if (defined (OBJ_AOUT) || defined (OBJ_MAYBE_AOUT))\n-  else if (exp->X_op != O_constant\n-\t   && OUTPUT_FLAVOR == bfd_target_aout_flavour\n+  else if (OUTPUT_FLAVOR == bfd_target_aout_flavour\n \t   && exp_seg != absolute_section\n \t   && exp_seg != text_section\n \t   && exp_seg != data_section\n@@ -11034,9 +11041,7 @@ i386_finalize_displacement (segT exp_seg ATTRIBUTE_UNUSED, expressionS *exp,\n     }\n #endif\n \n-  if (current_templates->start->opcode_modifier.jump == JUMP_BYTE\n-      /* Constants get taken care of by optimize_disp().  */\n-      && exp->X_op != O_constant)\n+  else if (current_templates->start->opcode_modifier.jump == JUMP_BYTE)\n     i.types[this_operand].bitfield.disp8 = 1;\n \n   /* Check if this is a displacement only operand.  */"
    },
    {
      "sha": "dc712b9626989793ca5c4771f1678546a9e17a07",
      "filename": "gas/testsuite/gas/i386/disp-imm-32.d",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a50187b2c6c28be79a32332e06a572cf08683de3/gas/testsuite/gas/i386/disp-imm-32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a50187b2c6c28be79a32332e06a572cf08683de3/gas/testsuite/gas/i386/disp-imm-32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/disp-imm-32.d?ref=a50187b2c6c28be79a32332e06a572cf08683de3",
      "patch": "@@ -0,0 +1,21 @@\n+#objdump: -dw\n+#name: i386 displacements / immediates (32-bit)\n+\n+.*: +file format .*\n+\n+Disassembly of section .text:\n+\n+0+ <disp_imm>:\n+[ \t]*[a-f0-9]+:\t8b 40 01             \tmov    0x1\\(%eax\\),%eax\n+[ \t]*[a-f0-9]+:\t62 f1 7c 48 28 40 01 \tvmovaps 0x40\\(%eax\\),%zmm0\n+[ \t]*[a-f0-9]+:\t83 c1 01             \tadd    \\$0x1,%ecx\n+[ \t]*[a-f0-9]+:\t8b 00                \tmov    \\(%eax\\),%eax\n+[ \t]*[a-f0-9]+:\t62 f1 7c 48 28 00    \tvmovaps \\(%eax\\),%zmm0\n+[ \t]*[a-f0-9]+:\t83 c1 00             \tadd    \\$0x0,%ecx\n+[ \t]*[a-f0-9]+:\t8b 40 ff             \tmov    -0x1\\(%eax\\),%eax\n+[ \t]*[a-f0-9]+:\t62 f1 7c 48 28 40 ff \tvmovaps -0x40\\(%eax\\),%zmm0\n+[ \t]*[a-f0-9]+:\t83 c1 ff             \tadd    \\$0xffffffff,%ecx\n+[ \t]*[a-f0-9]+:\t8b 40 01             \tmov    0x1\\(%eax\\),%eax\n+[ \t]*[a-f0-9]+:\t62 f1 7c 48 28 40 01 \tvmovaps 0x40\\(%eax\\),%zmm0\n+[ \t]*[a-f0-9]+:\t83 c1 01             \tadd    \\$0x1,%ecx\n+#pass"
    },
    {
      "sha": "5145d605a42c9fce09ad301642a7d189ff478b4c",
      "filename": "gas/testsuite/gas/i386/disp-imm-32.s",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a50187b2c6c28be79a32332e06a572cf08683de3/gas/testsuite/gas/i386/disp-imm-32.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a50187b2c6c28be79a32332e06a572cf08683de3/gas/testsuite/gas/i386/disp-imm-32.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/disp-imm-32.s?ref=a50187b2c6c28be79a32332e06a572cf08683de3",
      "patch": "@@ -0,0 +1,17 @@\n+\t.text\n+disp_imm:\n+\tmov\t-0xffffffff(%eax), %eax\n+\tvmovaps\t-0xffffffc0(%eax), %zmm0\n+\tadd\t$-0xffffffff, %ecx\n+\n+\tmov\t-0xffffffff-1(%eax), %eax\n+\tvmovaps\t-0xffffffc0-0x40(%eax), %zmm0\n+\tadd\t$-0xffffffff-1, %ecx\n+\n+\tmov\t-0xffffffff-2(%eax), %eax\n+\tvmovaps\t-0xffffffc0-0x80(%eax), %zmm0\n+\tadd\t$-0xffffffff-2, %ecx\n+\n+\tmov\t-0x1ffffffff(%eax), %eax\n+\tvmovaps\t-0x1ffffffc0(%eax), %zmm0\n+\tadd\t$-0x1ffffffff, %ecx"
    },
    {
      "sha": "8f41778034c5a1897c6b52c11df1a37e1d919952",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a50187b2c6c28be79a32332e06a572cf08683de3/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a50187b2c6c28be79a32332e06a572cf08683de3/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=a50187b2c6c28be79a32332e06a572cf08683de3",
      "patch": "@@ -88,6 +88,9 @@ if [gas_32_check] then {\n     run_dump_test \"disp-intel\"\n     run_dump_test \"disp32\"\n     run_list_test \"disp-imm-16\"\n+    if { [gas_bfd64_check] } {\n+\trun_dump_test \"disp-imm-32\"\n+    }\n     run_dump_test \"vmx\"\n     run_dump_test \"vmfunc\"\n     run_dump_test \"smx\""
    }
  ]
}