{
  "sha": "fb8819867993ee942aacd8ea6d5027b16cecda48",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmI4ODE5ODY3OTkzZWU5NDJhYWNkOGVhNmQ1MDI3YjE2Y2VjZGE0OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-07T22:32:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-19T20:29:34Z"
    },
    "message": "Remove common/queue.h\n\ngdb no longer needs common/queue.h, so this removes it.\n\ngdb/ChangeLog\n2019-04-19  Tom Tromey  <tom@tromey.com>\n\n\t* common/queue.h: Remove.",
    "tree": {
      "sha": "d91d7f91a4a52413be198f33596fbd5a0b64bba4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d91d7f91a4a52413be198f33596fbd5a0b64bba4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fb8819867993ee942aacd8ea6d5027b16cecda48",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb8819867993ee942aacd8ea6d5027b16cecda48",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fb8819867993ee942aacd8ea6d5027b16cecda48",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb8819867993ee942aacd8ea6d5027b16cecda48/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8732db6ceb3d5d352685199a15306dbb69c086d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8732db6ceb3d5d352685199a15306dbb69c086d6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8732db6ceb3d5d352685199a15306dbb69c086d6"
    }
  ],
  "stats": {
    "total": 302,
    "additions": 4,
    "deletions": 298
  },
  "files": [
    {
      "sha": "80f18cd4c7fde5209264d0390e2a623c50c6543a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb8819867993ee942aacd8ea6d5027b16cecda48/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb8819867993ee942aacd8ea6d5027b16cecda48/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fb8819867993ee942aacd8ea6d5027b16cecda48",
      "patch": "@@ -1,3 +1,7 @@\n+2019-04-19  Tom Tromey  <tom@tromey.com>\n+\n+\t* common/queue.h: Remove.\n+\n 2019-04-19  Tom Tromey  <tom@tromey.com>\n \n \t* event-loop.c: Don't include \"common/queue.h\"."
    },
    {
      "sha": "3bc9c7e212a59f8a06d7b8ca529a99d8812bf66d",
      "filename": "gdb/common/queue.h",
      "status": "removed",
      "additions": 0,
      "deletions": 298,
      "changes": 298,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8732db6ceb3d5d352685199a15306dbb69c086d6/gdb/common/queue.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8732db6ceb3d5d352685199a15306dbb69c086d6/gdb/common/queue.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/queue.h?ref=8732db6ceb3d5d352685199a15306dbb69c086d6",
      "patch": "@@ -1,298 +0,0 @@\n-/* General queue data structure for GDB, the GNU debugger.\n-\n-   Copyright (C) 2012-2019 Free Software Foundation, Inc.\n-\n-   This file is part of GDB.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n-\n-#ifndef COMMON_QUEUE_H\n-#define COMMON_QUEUE_H\n-\n-/* These macros implement functions and structs for a general queue.\n-   Macro 'DEFINE_QUEUE_P(TYPEDEF)' is to define the new queue type for\n-   TYPEDEF', and macro 'DECLARE_QUEUE_P' is to declare external queue\n-   APIs.  The character P indicates TYPEDEF is a pointer (P).  The\n-   counterpart on object (O) and integer (I) are not implemented.\n-\n-   An example of their use would be,\n-\n-   typedef struct foo\n-   {} *foo_p;\n-\n-   DEFINE_QUEUE_P (foo_p);\n-   // A pointer to a queue of foo pointers.  FOO_XFREE is a destructor\n-   // function for foo instances in queue.\n-   QUEUE(foo_p) *foo_queue = QUEUE_alloc (foo_p, foo_xfree);\n-\n-   foo_p foo_var_p;\n-   // Enqueue and Dequeue\n-   QUEUE_enque (foo_p, foo_queue, foo_var_p);\n-   foo_var_p = QUEUE_deque (foo_p, foo_queue);\n-\n-   static int visit_foo (QUEUE (foo_p) *q, QUEUE_ITER (foo_p) *iter,\n-\t\t\tfoo_p f, void *data)\n-   {\n-     return 1;\n-   }\n-   // Iterate over queue.\n-   QUEUE_iterate (foo_p, foo_queue, visit_foo, &param);\n-\n-   QUEUE_free (foo_p, foo_queue);  // Free queue.  */\n-\n-/* Typical enqueue operation.  Put V into queue Q.  */\n-#define QUEUE_enque(TYPE, Q, V) queue_ ## TYPE ## _enque ((Q), (V))\n-\n-/* Typical dequeue operation.  Return head element of queue Q and\n-   remove it.  Q must not be empty.  */\n-#define QUEUE_deque(TYPE, Q) queue_ ## TYPE ## _deque (Q)\n-\n-/* Return the head element, but don't remove it from the queue.\n-   Q must not be empty.  */\n-#define QUEUE_peek(TYPE, Q) queue_ ## TYPE ## _peek (Q)\n-\n-/* Return true if queue Q is empty.  */\n-#define QUEUE_is_empty(TYPE, Q) queue_ ## TYPE ## _is_empty (Q)\n-\n-/* Allocate memory for queue.  FREE_FUNC is a function to release the\n-   data put in each queue element.  */\n-#define QUEUE_alloc(TYPE, FREE_FUNC) queue_ ## TYPE ## _alloc (FREE_FUNC)\n-\n-/* Length of queue Q.  */\n-#define QUEUE_length(TYPE, Q) queue_ ## TYPE ## _length (Q)\n-\n-/* Free queue Q.  Q's free_func is called once for each element.  */\n-#define QUEUE_free(TYPE, Q) queue_ ## TYPE ## _free (Q)\n-\n-/* Iterate over elements in the queue Q and call function OPERATE on\n-   each element.  It is allowed to remove element by OPERATE.  OPERATE\n-   returns false to terminate the iteration and true to continue the\n-   iteration.  Return false if iteration is terminated by function\n-   OPERATE, otherwise return true.  */\n-#define QUEUE_iterate(TYPE, Q, OPERATE, PARAM)\t\\\n-  queue_ ## TYPE ## _iterate ((Q), (OPERATE), (PARAM))\n-\n-/* Remove the element per the state of iterator ITER from queue Q.\n-   Leave the caller to release the data in the queue element.  */\n-#define QUEUE_remove_elem(TYPE, Q, ITER) \\\n-  queue_ ## TYPE ## _remove_elem ((Q), (ITER))\n-\n-/* Define a new queue implementation.  */\n-\n-#define QUEUE(TYPE) struct queue_ ## TYPE\n-#define QUEUE_ELEM(TYPE) struct queue_elem_ ## TYPE\n-#define QUEUE_ITER(TYPE) struct queue_iter_ ## TYPE\n-#define QUEUE_ITER_FUNC(TYPE) queue_ ## TYPE ## _operate_func\n-\n-#define DEFINE_QUEUE_P(TYPE)\t\t\t\\\n-QUEUE_ELEM (TYPE)\t\t\t\t\\\n-{\t\t\t\t\t\t\\\n-  QUEUE_ELEM (TYPE) *next;\t\t\t\\\n-\t\t\t\t\t\t\\\n-  TYPE data;\t\t\t\t\t\\\n-};\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-/* Queue iterator.  */\t\t\t\t\\\n-QUEUE_ITER (TYPE)\t\t\t\t\\\n-{\t\t\t\t\t\t\\\n-  /* The current element during traverse.  */\t\\\n-  QUEUE_ELEM (TYPE) *p;\t\t\t\\\n-  /* The previous element of P.  */\t\t\\\n-  QUEUE_ELEM (TYPE) *prev;\t\t\t\\\n-};\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-QUEUE(TYPE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\\\n-  /*  The head and tail of the queue.  */\t\\\n-  QUEUE_ELEM (TYPE) *head;\t\t\t\\\n-  QUEUE_ELEM (TYPE) *tail;\t\t\t\\\n-  /* Function to release the data put in each\t\\\n-     queue element.  */\t\t\t\\\n-  void (*free_func) (TYPE);\t\t\t\\\n-};\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-queue_ ## TYPE ## _enque (QUEUE (TYPE) *q, TYPE v)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  QUEUE_ELEM (TYPE) *p = XNEW (QUEUE_ELEM (TYPE));\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  gdb_assert (q != NULL);\t\t\t\t\t\t\\\n-  p->data = v;\t\t\t\t\t\t\t\t\\\n-  p->next = NULL;\t\t\t\t\t\t\t\\\n-  if (q->tail == NULL)\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      q->tail = p;\t\t\t\t\t\t\t\\\n-      q->head = p;\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      q->tail->next = p;\t\t\t\t\t\t\\\n-      q->tail = p;\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-TYPE\t\t\t\t\t\t\t\t\t\\\n-queue_ ## TYPE ## _deque (QUEUE (TYPE) *q)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  QUEUE_ELEM (TYPE) *p;\t\t\t\t\t\t\\\n-  TYPE v;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  gdb_assert (q != NULL);\t\t\t\t\t\t\\\n-  p = q->head;\t\t\t\t\t\t\t\t\\\n-  gdb_assert (p != NULL);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (q->head == q->tail)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      q->head = NULL;\t\t\t\t\t\t\t\\\n-      q->tail = NULL;\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    q->head = q->head->next;\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  v = p->data;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  xfree (p);\t\t\t\t\t\t\t\t\\\n-  return v;\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-TYPE\t\t\t\t\t\t\t\t\t\\\n-queue_ ## TYPE ## _peek (QUEUE (TYPE) *q)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  gdb_assert (q != NULL);\t\t\t\t\t\t\\\n-  gdb_assert (q->head != NULL);\t\t\t\t\t\\\n-  return q->head->data;\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-int\t\t\t\t\t\t\t\t\t\\\n-queue_ ## TYPE ## _is_empty (QUEUE (TYPE) *q)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  gdb_assert (q != NULL);\t\t\t\t\t\t\\\n-  return q->head == NULL;\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-queue_ ## TYPE ## _remove_elem (QUEUE (TYPE) *q,\t\t\t\\\n-\t\t\t\tQUEUE_ITER (TYPE) *iter)\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  gdb_assert (q != NULL);\t\t\t\t\t\t\\\n-  gdb_assert (iter != NULL && iter->p != NULL);\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  if (iter->p == q->head || iter->p == q->tail)\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (iter->p == q->head)\t\t\t\t\t\t\\\n-\tq->head = iter->p->next;\t\t\t\t\t\\\n-      if (iter->p == q->tail)\t\t\t\t\t\t\\\n-\tq->tail = iter->prev;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    iter->prev->next = iter->p->next;\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  xfree (iter->p);\t\t\t\t\t\t\t\\\n-  /* Indicate that ITER->p has been deleted from QUEUE q.  */\t\t\\\n-  iter->p = NULL;\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-int\t\t\t\t\t\t\t\t\t\\\n-queue_ ## TYPE ## _iterate (QUEUE (TYPE) *q,\t\t\t\t\\\n-\t\t\t    QUEUE_ITER_FUNC (TYPE) operate,\t\t\\\n-\t\t\t    void *data)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  QUEUE_ELEM (TYPE) *next = NULL;\t\t\t\t\t\\\n-  QUEUE_ITER (TYPE) iter = { NULL, NULL };\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  gdb_assert (q != NULL);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  for (iter.p = q->head; iter.p != NULL; iter.p = next)\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      next = iter.p->next;\t\t\t\t\t\t\\\n-      if (!operate (q, &iter, iter.p->data, data))\t\t\t\\\n-\treturn 0;\t\t\t\t\t\t\t\\\n-      /* ITER.P was not deleted by function OPERATE.  */\t\t\\\n-      if (iter.p != NULL)\t\t\t\t\t\t\\\n-\titer.prev = iter.p;\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  return 1;\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-QUEUE (TYPE) *\t\t\t\t\t\t\t\t\\\n-queue_ ## TYPE ## _alloc (void (*free_func) (TYPE))\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  QUEUE (TYPE) *q = XNEW (QUEUE (TYPE));\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  q->head = NULL;\t\t\t\t\t\t\t\\\n-  q->tail = NULL;\t\t\t\t\t\t\t\\\n-  q->free_func = free_func;\t\t\t\t\t\t\\\n-  return q;\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-int\t\t\t\t\t\t\t\t\t\\\n-queue_ ## TYPE ## _length (QUEUE (TYPE) *q)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  QUEUE_ELEM (TYPE) *p;\t\t\t\t\t\t\\\n-  int len = 0;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  gdb_assert (q != NULL);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  for (p = q->head; p != NULL; p = p->next)\t\t\t\t\\\n-    len++;\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  return len;\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-void\t\t\t\t\t\t\t\t\t\\\n-queue_ ## TYPE ## _free (QUEUE (TYPE) *q)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  QUEUE_ELEM (TYPE) *p, *next;\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  gdb_assert (q != NULL);\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-  for (p = q->head; p != NULL; p = next)\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      next = p->next;\t\t\t\t\t\t\t\\\n-      if (q->free_func)\t\t\t\t\t\t\\\n-\tq->free_func (p->data);\t\t\t\t\t\\\n-      xfree (p);\t\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  xfree (q);\t\t\t\t\t\t\t\t\\\n-}\t\t\t\t\t\t\t\t\t\\\n-\n-/* External declarations for queue functions.  */\n-#define DECLARE_QUEUE_P(TYPE)\t\t\t\t\t\\\n-QUEUE (TYPE);\t\t\t\t\t\t\t\\\n-QUEUE_ELEM (TYPE);\t\t\t\t\t\t\\\n-QUEUE_ITER (TYPE);\t\t\t\t\t\t\\\n-extern void\t\t\t\t\t\t\t\\\n-  queue_ ## TYPE ## _enque (QUEUE (TYPE) *q, TYPE v);\t\t\\\n-extern TYPE\t\t\t\t\t\t\t\\\n-  queue_ ## TYPE ## _deque (QUEUE (TYPE) *q);\t\t\t\\\n-extern int queue_ ## TYPE ## _is_empty (QUEUE (TYPE) *q);\t\\\n-extern QUEUE (TYPE) *\t\t\t\t\t\t\\\n-  queue_ ## TYPE ## _alloc (void (*free_func) (TYPE));\t\t\\\n-extern int queue_ ## TYPE ## _length (QUEUE (TYPE) *q);\t\\\n-extern TYPE\t\t\t\t\t\t\t\\\n-  queue_ ## TYPE ## _peek (QUEUE (TYPE) *q);\t\t\t\\\n-extern void queue_ ## TYPE ## _free (QUEUE (TYPE) *q);\t\t\\\n-typedef int QUEUE_ITER_FUNC(TYPE) (QUEUE (TYPE) *,\t\t\\\n-\t\t\t\t   QUEUE_ITER (TYPE) *,\t\\\n-\t\t\t\t   TYPE,\t\t\t\\\n-\t\t\t\t   void *);\t\t\t\\\n-extern int\t\t\t\t\t\t\t\\\n-  queue_ ## TYPE ## _iterate (QUEUE (TYPE) *q,\t\t\t\\\n-\t\t\t      QUEUE_ITER_FUNC (TYPE) operate,\t\\\n-\t\t\t      void *);\t\t\t\t\\\n-extern void\t\t\t\t\t\t\t\\\n-  queue_ ## TYPE ## _remove_elem (QUEUE (TYPE) *q,\t\t\\\n-\t\t\t\t  QUEUE_ITER (TYPE) *iter);\t\\\n-\n-#endif /* COMMON_QUEUE_H */"
    }
  ]
}