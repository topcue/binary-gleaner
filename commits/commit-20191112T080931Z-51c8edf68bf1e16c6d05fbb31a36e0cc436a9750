{
  "sha": "51c8edf68bf1e16c6d05fbb31a36e0cc436a9750",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTFjOGVkZjY4YmYxZTE2YzZkMDVmYmIzMWEzNmUwY2M0MzZhOTc1MA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-12T08:09:31Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-12T08:09:31Z"
    },
    "message": "x86: fold EsSeg into IsString\n\nEsSeg (a per-operand bit) is used with IsString (a per-insn attribute)\nonly. Extend the attribute to 2 bits, thus allowing to encode\n- not a string insn,\n- string insn with neither operand requiring use of %es:,\n- string insn with 1st operand requiring use of %es:,\n- string insn with 2nd operand requiring use of %es:,\nwhich covers all possible cases, allowing to drop EsSeg.\n\nThe (transient) need to comment out the OTUnused #define did uncover an\noversight in the earlier OTMax -> OTNum conversion, which is being taken\ncare of here.",
    "tree": {
      "sha": "ca465dc8565167792ae44eb3f95b338720c813e0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ca465dc8565167792ae44eb3f95b338720c813e0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "474da251bf92a11a08583080af77fa197570767f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/474da251bf92a11a08583080af77fa197570767f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/474da251bf92a11a08583080af77fa197570767f"
    }
  ],
  "stats": {
    "total": 22624,
    "additions": 11318,
    "deletions": 11306
  },
  "files": [
    {
      "sha": "223ea8d9ba8b595dfc469bc487341459fed73e50",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=51c8edf68bf1e16c6d05fbb31a36e0cc436a9750",
      "patch": "@@ -1,3 +1,11 @@\n+2019-11-12  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (type_names): Remove OPERAND_TYPE_ESSEG\n+\tentry.\n+\t(md_assemble): Adjust isstring field use. Add assertion.\n+\t(check_string): Mostly re-write.\n+\t(i386_index_check): Adjust isstring field use and related code.\n+\n 2019-11-12  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (process_immext): Remove SSE3, SVME, and"
    },
    {
      "sha": "c55904165a4b6b7c1ceb5cb1c84371aced7e7d7b",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 23,
      "deletions": 34,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=51c8edf68bf1e16c6d05fbb31a36e0cc436a9750",
      "patch": "@@ -3161,7 +3161,6 @@ const type_names[] =\n   { OPERAND_TYPE_REGYMM, \"rYMM\" },\n   { OPERAND_TYPE_REGZMM, \"rZMM\" },\n   { OPERAND_TYPE_REGMASK, \"Mask reg\" },\n-  { OPERAND_TYPE_ESSEG, \"es\" },\n };\n \n static void\n@@ -4386,8 +4385,9 @@ md_assemble (char *line)\n     }\n \n   /* Check string instruction segment overrides.  */\n-  if (i.tm.opcode_modifier.isstring && i.mem_operands != 0)\n+  if (i.tm.opcode_modifier.isstring >= IS_STRING_ES_OP0)\n     {\n+      gas_assert (i.mem_operands);\n       if (!check_string ())\n \treturn;\n       i.disp_operands = 0;\n@@ -6168,35 +6168,24 @@ match_template (char mnem_suffix)\n static int\n check_string (void)\n {\n-  unsigned int mem_op = i.flags[0] & Operand_Mem ? 0 : 1;\n+  unsigned int es_op = i.tm.opcode_modifier.isstring - IS_STRING_ES_OP0;\n+  unsigned int op = i.tm.operand_types[0].bitfield.baseindex ? es_op : 0;\n \n-  if (i.tm.operand_types[mem_op].bitfield.esseg)\n+  if (i.seg[op] != NULL && i.seg[op] != &es)\n     {\n-      if (i.seg[0] != NULL && i.seg[0] != &es)\n-\t{\n-\t  as_bad (_(\"`%s' operand %d must use `%ses' segment\"),\n-\t\t  i.tm.name,\n-\t\t  intel_syntax ? i.tm.operands - mem_op : mem_op + 1,\n-\t\t  register_prefix);\n-\t  return 0;\n-\t}\n-      /* There's only ever one segment override allowed per instruction.\n-\t This instruction possibly has a legal segment override on the\n-\t second operand, so copy the segment to where non-string\n-\t instructions store it, allowing common code.  */\n-      i.seg[0] = i.seg[1];\n-    }\n-  else if (i.tm.operand_types[mem_op + 1].bitfield.esseg)\n-    {\n-      if (i.seg[1] != NULL && i.seg[1] != &es)\n-\t{\n-\t  as_bad (_(\"`%s' operand %d must use `%ses' segment\"),\n-\t\t  i.tm.name,\n-\t\t  intel_syntax ? i.tm.operands - mem_op - 1 : mem_op + 2,\n-\t\t  register_prefix);\n-\t  return 0;\n-\t}\n+      as_bad (_(\"`%s' operand %u must use `%ses' segment\"),\n+\t      i.tm.name,\n+\t      intel_syntax ? i.tm.operands - es_op : es_op + 1,\n+\t      register_prefix);\n+      return 0;\n     }\n+\n+  /* There's only ever one segment override allowed per instruction.\n+     This instruction possibly has a legal segment override on the\n+     second operand, so copy the segment to where non-string\n+     instructions store it, allowing common code.  */\n+  i.seg[op] = i.seg[1];\n+\n   return 1;\n }\n \n@@ -9780,16 +9769,16 @@ i386_index_check (const char *operand_string)\n \n       if (current_templates->start->opcode_modifier.repprefixok)\n \t{\n-\t  i386_operand_type type = current_templates->end[-1].operand_types[0];\n+\t  int es_op = current_templates->end[-1].opcode_modifier.isstring\n+\t\t      - IS_STRING_ES_OP0;\n+\t  int op = 0;\n \n-\t  if (!type.bitfield.baseindex\n+\t  if (!current_templates->end[-1].operand_types[0].bitfield.baseindex\n \t      || ((!i.mem_operands != !intel_syntax)\n \t\t  && current_templates->end[-1].operand_types[1]\n \t\t     .bitfield.baseindex))\n-\t    type = current_templates->end[-1].operand_types[1];\n-\t  expected_reg = hash_find (reg_hash,\n-\t\t\t\t    di_si[addr_mode][type.bitfield.esseg]);\n-\n+\t    op = 1;\n+\t  expected_reg = hash_find (reg_hash, di_si[addr_mode][op == es_op]);\n \t}\n       else\n \texpected_reg = hash_find (reg_hash, bx[addr_mode]);"
    },
    {
      "sha": "454231ed3f2ec6331ab974579cc1ff80107b03e6",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=51c8edf68bf1e16c6d05fbb31a36e0cc436a9750",
      "patch": "@@ -1,3 +1,20 @@\n+2019-11-12  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (operand_type_init): Remove OPERAND_TYPE_ESSEG\n+\tentry.\n+\t(operand_types): Remove EsSeg entry.\n+\t(main): Replace stale use of OTMax.\n+\t* i386-opc.h (IS_STRING_ES_OP0, IS_STRING_ES_OP1): Define.\n+\t(struct i386_opcode_modifier): Expand isstring field to 2 bits.\n+\t(EsSeg): Delete.\n+\t(OTUnused): Comment out.\n+\t(union i386_operand_type): Remove esseg field.\n+\t* i386-opc.tbl (IsStringEsOp0, IsStringEsOp1): Define.\n+\t(cmps, scmp, scas, ssca, cmpsd): Add IsStringEsOp0.\n+\t(ins, movs, smov, movsd): Add IsStringEsOpOp1.\n+\t(stos, ssto): Add IsStringEsOp0/IsStringEsOpOp1.\n+\t* i386-init.h, i386-tbl.h: Re-generate.\n+\n 2019-11-12  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-gen.c (operand_instances): Add RegB entry."
    },
    {
      "sha": "2838fa463d62672762a2a78810836386c6709ce8",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=51c8edf68bf1e16c6d05fbb31a36e0cc436a9750",
      "patch": "@@ -451,8 +451,6 @@ static initializer operand_type_init[] =\n     \"Class=RegMask\" },\n   { \"OPERAND_TYPE_REGBND\",\n     \"Class=RegBND\" },\n-  { \"OPERAND_TYPE_ESSEG\",\n-    \"EsSeg\" },\n   { \"OPERAND_TYPE_ACC8\",\n     \"Instance=Accum|Byte\" },\n   { \"OPERAND_TYPE_ACC16\",\n@@ -725,7 +723,6 @@ static bitfield operand_types[] =\n   BITFIELD (Disp32S),\n   BITFIELD (Disp64),\n   BITFIELD (JumpAbsolute),\n-  BITFIELD (EsSeg),\n   BITFIELD (Byte),\n   BITFIELD (Word),\n   BITFIELD (Dword),\n@@ -1747,7 +1744,7 @@ main (int argc, char **argv)\n   static_assert (ARRAY_SIZE (operand_types) + CLASS_WIDTH + INSTANCE_WIDTH\n \t\t == OTNum);\n \n-  c = OTNumOfBits - OTMax - 1;\n+  c = OTNumOfBits - OTNum;\n   if (c)\n     fail (_(\"%d unused bits in i386_operand_type.\\n\"), c);\n #endif"
    },
    {
      "sha": "13b563832e12be9b2ffe021ce95036b1fe2da412",
      "filename": "opcodes/i386-init.h",
      "status": "modified",
      "additions": 56,
      "deletions": 60,
      "changes": 116,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/i386-init.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/i386-init.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-init.h?ref=51c8edf68bf1e16c6d05fbb31a36e0cc436a9750",
      "patch": "@@ -1365,196 +1365,192 @@\n \n #define OPERAND_TYPE_NONE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG8 \\\n-  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG16 \\\n-  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG32 \\\n-  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG64 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n+      1, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM1 \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8 \\\n   { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8S \\\n   { { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16 \\\n   { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32S \\\n   { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_BASEINDEX \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP8 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32S \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_INOUTPORTREG \\\n-  { { 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SHIFTCOUNT \\\n-  { { 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_CONTROL \\\n   { { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_TEST \\\n   { { 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DEBUG \\\n   { { 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATREG \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n+      0, 1, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATACC \\\n   { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n+      0, 1, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SREG \\\n   { { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_JUMPABSOLUTE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGMMX \\\n   { { 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGXMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 1, 0, 0, 0, 0, 0 } }\n+      0, 0, 1, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGYMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 1, 0, 0, 0, 0 } }\n+      0, 0, 0, 1, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGZMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 1, 0, 0, 0 } }\n+      0, 0, 0, 0, 1, 0, 0 } }\n \n #define OPERAND_TYPE_REGMASK \\\n   { { 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGBND \\\n   { { 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n-\n-#define OPERAND_TYPE_ESSEG \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC8 \\\n-  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC16 \\\n-  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC32 \\\n-  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC64 \\\n   { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n+      1, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16_32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYDISP \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32 \\\n   { { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32S \\\n   { { 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32_32S \\\n   { { 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_64 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64_DISP64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32_64 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYIMM \\\n   { { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }"
    },
    {
      "sha": "fe201424d1a44e16d36b5cd84e9b7381e014b5ed",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=51c8edf68bf1e16c6d05fbb31a36e0cc436a9750",
      "patch": "@@ -443,7 +443,11 @@ enum\n   No_ldSuf,\n   /* instruction needs FWAIT */\n   FWait,\n-  /* quick test for string instructions */\n+  /* IsString provides for a quick test for string instructions, and\n+     its actual value also indicates which of the operands (if any)\n+     requires use of the %es segment.  */\n+#define IS_STRING_ES_OP0 2\n+#define IS_STRING_ES_OP1 3\n   IsString,\n   /* RegMem is for instructions with a modrm byte where the register\n      destination operand should be encoded in the mod and regmem fields.\n@@ -661,7 +665,7 @@ typedef struct i386_opcode_modifier\n   unsigned int no_qsuf:1;\n   unsigned int no_ldsuf:1;\n   unsigned int fwait:1;\n-  unsigned int isstring:1;\n+  unsigned int isstring:2;\n   unsigned int regmem:1;\n   unsigned int bndprefixok:1;\n   unsigned int notrackprefixok:1;\n@@ -772,8 +776,6 @@ enum\n   BaseIndex,\n   /* Absolute address for jump.  */\n   JumpAbsolute,\n-  /* String insn operand with fixed es segment */\n-  EsSeg,\n   /* BYTE size. */\n   Byte,\n   /* WORD size. 2 byte */\n@@ -807,8 +809,9 @@ enum\n   (OTNumOfUints * sizeof (unsigned int) * CHAR_BIT)\n \n /* If you get a compiler error for zero width of the unused field,\n-   comment it out.  */\n+   comment it out.\n #define OTUnused\t\tOTNum\n+*/\n \n typedef union i386_operand_type\n {\n@@ -830,7 +833,6 @@ typedef union i386_operand_type\n       unsigned int disp64:1;\n       unsigned int baseindex:1;\n       unsigned int jumpabsolute:1;\n-      unsigned int esseg:1;\n       unsigned int byte:1;\n       unsigned int word:1;\n       unsigned int dword:1;"
    },
    {
      "sha": "406ac65ea25e132f9d36d7c11da1fa49791c18ec",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 18,
      "deletions": 15,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=51c8edf68bf1e16c6d05fbb31a36e0cc436a9750",
      "patch": "@@ -60,6 +60,9 @@\n // RegMem implies a ModR/M byte\n #define RegMem Modrm|RegMem\n \n+#define IsStringEsOp0 IsString=IS_STRING_ES_OP0\n+#define IsStringEsOp1 IsString=IS_STRING_ES_OP1\n+\n #define VexW0 VexW=VEXW0\n #define VexW1 VexW=VEXW1\n #define VexWIG VexW=VEXWIG\n@@ -492,11 +495,11 @@ setg, 1, 0xf9f, 0x0, 2, Cpu386, Modrm|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf,\n \n // String manipulation.\n cmps, 0, 0xa6, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n-cmps, 2, 0xa6, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg, Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n+cmps, 2, 0xa6, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp0|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex, Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n scmp, 0, 0xa6, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n-scmp, 2, 0xa6, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg, Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n+scmp, 2, 0xa6, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp0|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex, Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n ins, 0, 0x6c, None, 1, Cpu186, W|No_sSuf|No_qSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n-ins, 2, 0x6c, None, 1, Cpu186, W|No_sSuf|No_qSuf|No_ldSuf|IsString|RepPrefixOk, { InOutPortReg, Byte|Word|Dword|Unspecified|BaseIndex|EsSeg }\n+ins, 2, 0x6c, None, 1, Cpu186, W|No_sSuf|No_qSuf|No_ldSuf|IsStringEsOp1|RepPrefixOk, { InOutPortReg, Byte|Word|Dword|Unspecified|BaseIndex }\n outs, 0, 0x6e, None, 1, Cpu186, W|No_sSuf|No_qSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n outs, 2, 0x6e, None, 1, Cpu186, W|No_sSuf|No_qSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Unspecified|BaseIndex, InOutPortReg }\n lods, 0, 0xac, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n@@ -506,21 +509,21 @@ slod, 0, 0xac, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n slod, 1, 0xac, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n slod, 2, 0xac, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex, Acc|Byte|Word|Dword|Qword }\n movs, 0, 0xa4, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n-movs, 2, 0xa4, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex, Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg }\n+movs, 2, 0xa4, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp1|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex, Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n smov, 0, 0xa4, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n-smov, 2, 0xa4, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex, Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg }\n+smov, 2, 0xa4, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp1|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex, Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n scas, 0, 0xae, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n-scas, 1, 0xae, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg }\n-scas, 2, 0xae, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg, Acc|Byte|Word|Dword|Qword }\n+scas, 1, 0xae, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp0|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n+scas, 2, 0xae, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp0|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex, Acc|Byte|Word|Dword|Qword }\n ssca, 0, 0xae, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n-ssca, 1, 0xae, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg }\n-ssca, 2, 0xae, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg, Acc|Byte|Word|Dword|Qword }\n+ssca, 1, 0xae, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp0|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n+ssca, 2, 0xae, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp0|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex, Acc|Byte|Word|Dword|Qword }\n stos, 0, 0xaa, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n-stos, 1, 0xaa, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg }\n-stos, 2, 0xaa, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Acc|Byte|Word|Dword|Qword, Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg }\n+stos, 1, 0xaa, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp0|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n+stos, 2, 0xaa, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp1|RepPrefixOk, { Acc|Byte|Word|Dword|Qword, Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n ssto, 0, 0xaa, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n-ssto, 1, 0xaa, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg }\n-ssto, 2, 0xaa, None, 1, 0, W|No_sSuf|No_ldSuf|IsString|RepPrefixOk, { Acc|Byte|Word|Dword|Qword, Byte|Word|Dword|Qword|Unspecified|BaseIndex|EsSeg }\n+ssto, 1, 0xaa, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp0|RepPrefixOk, { Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n+ssto, 2, 0xaa, None, 1, 0, W|No_sSuf|No_ldSuf|IsStringEsOp1|RepPrefixOk, { Acc|Byte|Word|Dword|Qword, Byte|Word|Dword|Qword|Unspecified|BaseIndex }\n xlat, 0, 0xd7, None, 1, 0, No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IsString, { 0 }\n xlat, 1, 0xd7, None, 1, 0, No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IsString, { Byte|Unspecified|BaseIndex }\n \n@@ -1413,7 +1416,7 @@ cmppd, 3, 0x66c2, None, 1, CpuAVX, Modrm|Vex|VexOpcode=0|VexVVVV=1|VexW=1|No_bSu\n cmppd, 3, 0x660fc2, None, 2, CpuSSE2, Modrm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, RegXMM|Unspecified|BaseIndex, RegXMM }\n // Intel mode string compare.\n cmpsd, 0, 0xa7, None, 1, 0, Size32|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n-cmpsd, 2, 0xa7, None, 1, 0, Size32|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IsString|RepPrefixOk, { Dword|Unspecified|BaseIndex|EsSeg, Dword|Unspecified|BaseIndex }\n+cmpsd, 2, 0xa7, None, 1, 0, Size32|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IsStringEsOp0|RepPrefixOk, { Dword|Unspecified|BaseIndex, Dword|Unspecified|BaseIndex }\n cmpsd, 3, 0xf2c2, None, 1, CpuAVX, Modrm|Vex=3|VexOpcode=0|VexVVVV=1|VexW=1|IgnoreSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|SSE2AVX, { Imm8, Qword|Unspecified|BaseIndex|RegXMM, RegXMM }\n cmpsd, 3, 0xf20fc2, None, 2, CpuSSE2, Modrm|IgnoreSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Imm8, Qword|Unspecified|BaseIndex|RegXMM, RegXMM }\n comisd, 2, 0x662f, None, 1, CpuAVX, Modrm|Vex=3|VexOpcode=0|VexW=1|IgnoreSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|SSE2AVX, { Qword|Unspecified|BaseIndex|RegXMM, RegXMM }\n@@ -1449,7 +1452,7 @@ movntpd, 2, 0x662b, None, 1, CpuAVX, Modrm|Vex|VexOpcode=0|VexW=1|No_bSuf|No_wSu\n movntpd, 2, 0x660f2b, None, 2, CpuSSE2, Modrm|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { RegXMM, Xmmword|Unspecified|BaseIndex }\n // Intel mode string move.\n movsd, 0, 0xa5, None, 1, 0, Size32|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IsString|RepPrefixOk, { 0 }\n-movsd, 2, 0xa5, None, 1, 0, Size32|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IsString|RepPrefixOk, { Dword|Unspecified|BaseIndex, Dword|Unspecified|BaseIndex|EsSeg }\n+movsd, 2, 0xa5, None, 1, 0, Size32|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|IsStringEsOp1|RepPrefixOk, { Dword|Unspecified|BaseIndex, Dword|Unspecified|BaseIndex }\n movsd, 2, 0xf210, None, 1, CpuAVX, D|Modrm|Vex=3|VexOpcode=0|VexW=1|IgnoreSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|SSE2AVX, { Qword|Unspecified|BaseIndex, RegXMM }\n movsd, 2, 0xf210, None, 1, CpuAVX, D|Modrm|Vex=3|VexOpcode=0|VexVVVV=1|VexW=1|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf|SSE2AVX, { RegXMM, RegXMM }\n movsd, 2, 0xf20f10, None, 2, CpuSSE2, D|Modrm|IgnoreSize|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Qword|Unspecified|BaseIndex|RegXMM, RegXMM }"
    },
    {
      "sha": "517d9e656e26ff80bc67fabecd47c45f7bcf7a39",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 11187,
      "deletions": 11187,
      "changes": 22374,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51c8edf68bf1e16c6d05fbb31a36e0cc436a9750/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=51c8edf68bf1e16c6d05fbb31a36e0cc436a9750"
    }
  ]
}