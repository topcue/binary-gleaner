{
  "sha": "75f03fa77434ad49f1e7d333e0c93048639806e3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzVmMDNmYTc3NDM0YWQ0OWYxZTdkMzMzZTBjOTMwNDg2Mzk4MDZlMw==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-05-14T05:30:02Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-05-14T08:14:00Z"
    },
    "message": "RISC-V: Check the overflow for %pcrel_lo addend more strictly.\n\nThe %pcrel_lo addend may causes the overflow, and need more than one\n%pcrel_hi values.  But there may be only one auipc, shared by those\n%pcrel_lo with addends.  However, the existing check method in the\nriscv_resolve_pcrel_lo_relocs, may not be able to work for some\nspecial/corner cases.\n\nConsider the testcases pcrel-lo-addend-2b.  Before applying this patch,\nI can compile it successfully.  But in fact the addend cause the value\nof %pcrel_hi to be different.  This patch try to check the value of\n%pcrel_hi directly, to make sure it won't be changed.  Otherwise, linker\nwill report the following errors,\n\n(.text+0xa): dangerous relocation: %pcrel_lo overflow with an addend,\nthe value of %pcrel_hi is 0x1000 without any addend, but may be 0x2000\nafter adding the %pcrel_lo addend\n\nThe toolchain regressions, rv64gc-linux/rv64gc-elf/rv32gc-linux/rv32i-elf,\npass expectedly and looks fine.\n\nbfd/\n    * elfnn-riscv.c (riscv_resolve_pcrel_lo_relocs): Check the values\n    of %pcrel_hi, before and after adding the addend.  Make sure the\n    value won't be changed, otherwise, report dangerous error.\nld/\n    * testsuite/ld-riscv-elf/ld-riscv-elf.exp: Updated.\n    * testsuite/ld-riscv-elf/pcrel-lo-addend-2a.d: Renamed from\n    pcrel-lo-addend-2.\n    * testsuite/ld-riscv-elf/pcrel-lo-addend-2a.s: Likewise.\n    * testsuite/ld-riscv-elf/pcrel-lo-addend-2b.d: New testcase.\n    * testsuite/ld-riscv-elf/pcrel-lo-addend-2b.s: Likewise.",
    "tree": {
      "sha": "255bbdb4f7134576323f89dd232753eb22fb6048",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/255bbdb4f7134576323f89dd232753eb22fb6048"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/75f03fa77434ad49f1e7d333e0c93048639806e3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75f03fa77434ad49f1e7d333e0c93048639806e3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/75f03fa77434ad49f1e7d333e0c93048639806e3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75f03fa77434ad49f1e7d333e0c93048639806e3/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "ecf25064e87a3d2d59871b3ea7126fa0dee0001d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ecf25064e87a3d2d59871b3ea7126fa0dee0001d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ecf25064e87a3d2d59871b3ea7126fa0dee0001d"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 60,
    "deletions": 13
  },
  "files": [
    {
      "sha": "b399aefd120efcfa7e5ef3e5a946156ab26ddf31",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75f03fa77434ad49f1e7d333e0c93048639806e3/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75f03fa77434ad49f1e7d333e0c93048639806e3/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=75f03fa77434ad49f1e7d333e0c93048639806e3",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-14  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* elfnn-riscv.c (riscv_resolve_pcrel_lo_relocs): Check the values\n+\tof %pcrel_hi, before and after adding the addend.  Make sure the\n+\tvalue won't be changed, otherwise, report dangerous error.\n+\n 2021-05-13  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* elfxx-riscv.c (check_implicit_always): The check_func, always add"
    },
    {
      "sha": "2068edebdb6aa98cd61f395460d58a2ab125ebbe",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75f03fa77434ad49f1e7d333e0c93048639806e3/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75f03fa77434ad49f1e7d333e0c93048639806e3/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=75f03fa77434ad49f1e7d333e0c93048639806e3",
      "patch": "@@ -1883,13 +1883,23 @@ riscv_resolve_pcrel_lo_relocs (riscv_pcrel_relocs *p)\n       riscv_pcrel_hi_reloc search = {r->addr, 0};\n       riscv_pcrel_hi_reloc *entry = htab_find (p->hi_relocs, &search);\n       if (entry == NULL\n-\t  /* Check for overflow into bit 11 when adding reloc addend.  */\n-\t  || (!(entry->value & 0x800)\n-\t      && ((entry->value + r->reloc->r_addend) & 0x800)))\n+\t  /* Check the overflow when adding reloc addend.  */\n+\t  || (RISCV_CONST_HIGH_PART (entry->value)\n+\t      != RISCV_CONST_HIGH_PART (entry->value + r->reloc->r_addend)))\n \t{\n-\t  char *string = (entry == NULL\n-\t\t\t  ? \"%pcrel_lo missing matching %pcrel_hi\"\n-\t\t\t  : \"%pcrel_lo overflow with an addend\");\n+\t  char *string;\n+\t  if (entry == NULL)\n+\t    string = _(\"%pcrel_lo missing matching %pcrel_hi\");\n+\t  else if (asprintf (&string,\n+\t\t\t     _(\"%%pcrel_lo overflow with an addend, the \"\n+\t\t\t       \"value of %%pcrel_hi is 0x%\" PRIx64 \" without \"\n+\t\t\t       \"any addend, but may be 0x%\" PRIx64 \" after \"\n+\t\t\t       \"adding the %%pcrel_lo addend\"),\n+\t\t\t     (int64_t) RISCV_CONST_HIGH_PART (entry->value),\n+\t\t\t     (int64_t) RISCV_CONST_HIGH_PART\n+\t\t\t\t(entry->value + r->reloc->r_addend)) == -1)\n+\t    string = _(\"%pcrel_lo overflow with an addend\");\n+\n \t  (*r->info->callbacks->reloc_dangerous)\n \t    (r->info, string, input_bfd, r->input_section, r->reloc->r_offset);\n \t  return true;"
    },
    {
      "sha": "3969b8c80fa288861976e4b43c047c3068ce4ae1",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=75f03fa77434ad49f1e7d333e0c93048639806e3",
      "patch": "@@ -1,3 +1,12 @@\n+2021-05-14  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* testsuite/ld-riscv-elf/ld-riscv-elf.exp: Updated.\n+\t* testsuite/ld-riscv-elf/pcrel-lo-addend-2a.d: Renamed from\n+\tpcrel-lo-addend-2.\n+\t* testsuite/ld-riscv-elf/pcrel-lo-addend-2a.s: Likewise.\n+\t* testsuite/ld-riscv-elf/pcrel-lo-addend-2b.d: New testcase.\n+\t* testsuite/ld-riscv-elf/pcrel-lo-addend-2b.s: Likewise.\n+\n 2021-05-13  Fangrui Song  <maskray@google.com>\n \n \tPR 27834"
    },
    {
      "sha": "319ac7e2b836ee0cdc10a2bb08f8f538df9395a7",
      "filename": "ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp?ref=75f03fa77434ad49f1e7d333e0c93048639806e3",
      "patch": "@@ -85,7 +85,8 @@ if [istarget \"riscv*-*-*\"] {\n     run_dump_test \"c-lui-2\"\n     run_dump_test \"disas-jalr\"\n     run_dump_test \"pcrel-lo-addend\"\n-    run_dump_test \"pcrel-lo-addend-2\"\n+    run_dump_test \"pcrel-lo-addend-2a\"\n+    run_dump_test \"pcrel-lo-addend-2b\"\n     run_dump_test \"restart-relax\"\n     run_dump_test \"attr-merge-arch-01\"\n     run_dump_test \"attr-merge-arch-02\""
    },
    {
      "sha": "895c6cc5814cbb7b51d3d09e9a6f6ce28642cd1d",
      "filename": "ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2.d",
      "status": "removed",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecf25064e87a3d2d59871b3ea7126fa0dee0001d/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecf25064e87a3d2d59871b3ea7126fa0dee0001d/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2.d?ref=ecf25064e87a3d2d59871b3ea7126fa0dee0001d",
      "patch": "@@ -1,5 +0,0 @@\n-#name: %pcrel_lo overflow with an addend\n-#source: pcrel-lo-addend-2.s\n-#as: -march=rv32ic\n-#ld: -m[riscv_choose_ilp32_emul] --no-relax\n-#error: .*dangerous relocation: %pcrel_lo overflow with an addend"
    },
    {
      "sha": "cd50cbfd2629f26a353ddd4314e2da2c7dff2ffc",
      "filename": "ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2a.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2a.d?ref=75f03fa77434ad49f1e7d333e0c93048639806e3",
      "patch": "@@ -0,0 +1,5 @@\n+#name: %pcrel_lo overflow with an addend (2a)\n+#source: pcrel-lo-addend-2a.s\n+#as: -march=rv32ic\n+#ld: -m[riscv_choose_ilp32_emul] --no-relax\n+#error: .*dangerous relocation: %pcrel_lo overflow with an addend, the value of %pcrel_hi is 0x1000 without any addend, but may be 0x2000 after adding the %pcrel_lo addend"
    },
    {
      "sha": "1e367741d54983f360c3b6dc428b5d3a499214f3",
      "filename": "ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2a.s",
      "status": "renamed",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2a.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2a.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2a.s?ref=75f03fa77434ad49f1e7d333e0c93048639806e3",
      "patch": "@@ -5,7 +5,7 @@ _start:\n \tnop\n \t.LA0: auipc\ta5,%pcrel_hi(ll)\n \tlw\ta0,%pcrel_lo(.LA0)(a5)\n-\tlw\ta0,%pcrel_lo(.LA0+4)(a5)\n+\tlw\ta0,%pcrel_lo(.LA0+0x4)(a5)\n \tret\n \t.globl ll\n \t.data",
      "previous_filename": "ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2.s"
    },
    {
      "sha": "d20f8c1bc87578d6ae98e1ded99fabf302e399f8",
      "filename": "ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2b.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2b.d?ref=75f03fa77434ad49f1e7d333e0c93048639806e3",
      "patch": "@@ -0,0 +1,5 @@\n+#name: %pcrel_lo overflow with an addend (2b)\n+#source: pcrel-lo-addend-2b.s\n+#as: -march=rv32ic\n+#ld: -m[riscv_choose_ilp32_emul] --no-relax\n+#error: .*dangerous relocation: %pcrel_lo overflow with an addend, the value of %pcrel_hi is 0x1000 without any addend, but may be 0x2000 after adding the %pcrel_lo addend"
    },
    {
      "sha": "9fd063f93e5aa88b9178598cad3e6a070d2b727a",
      "filename": "ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2b.s",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2b.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75f03fa77434ad49f1e7d333e0c93048639806e3/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2b.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/pcrel-lo-addend-2b.s?ref=75f03fa77434ad49f1e7d333e0c93048639806e3",
      "patch": "@@ -0,0 +1,16 @@\n+\t.text\n+\t.globl _start\n+\t.align 3\n+_start:\n+\tnop\n+\t.LA0: auipc\ta5,%pcrel_hi(ll)\n+\tlw\ta0,%pcrel_lo(.LA0)(a5)\n+\tlw\ta0,%pcrel_lo(.LA0+0x1000)(a5)\n+\tret\n+\t.globl ll\n+\t.data\n+\t.align 3\n+\t.zero 2024\n+ll:\n+\t.word 0\n+\t.word 0"
    }
  ]
}