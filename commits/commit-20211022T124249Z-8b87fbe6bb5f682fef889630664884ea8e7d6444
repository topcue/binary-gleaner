{
  "sha": "8b87fbe6bb5f682fef889630664884ea8e7d6444",
  "node_id": "C_kwDOANOeidoAKDhiODdmYmU2YmI1ZjY4MmZlZjg4OTYzMDY2NDg4NGVhOGU3ZDY0NDQ",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-09-15T12:34:14Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-10-22T12:42:49Z"
    },
    "message": "gdb/python: new gdb.architecture_names function\n\nAdd a new function to the Python API, gdb.architecture_names().  This\nfunction returns a list containing all of the supported architecture\nnames within the current build of GDB.\n\nThe values returned in this list are all of the possible values that\ncan be returned from gdb.Architecture.name().",
    "tree": {
      "sha": "c6e54c9f2311f10a9195ffb80f059eb26899ddfd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c6e54c9f2311f10a9195ffb80f059eb26899ddfd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8b87fbe6bb5f682fef889630664884ea8e7d6444",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b87fbe6bb5f682fef889630664884ea8e7d6444",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8b87fbe6bb5f682fef889630664884ea8e7d6444",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b87fbe6bb5f682fef889630664884ea8e7d6444/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "431be556b0bdd0733dedec2368d8d6a72cacea72",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/431be556b0bdd0733dedec2368d8d6a72cacea72",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/431be556b0bdd0733dedec2368d8d6a72cacea72"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 92,
    "deletions": 0
  },
  "files": [
    {
      "sha": "d001a03145d98014867b37df0ab093c4a063ade4",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=8b87fbe6bb5f682fef889630664884ea8e7d6444",
      "patch": "@@ -45,6 +45,10 @@ maint show internal-warning backtrace\n      event is triggered once GDB decides it is going to exit, but\n      before GDB starts to clean up its internal state.\n \n+  ** New function gdb.architecture_names(), which returns a list\n+     containing all of the possible Architecture.name() values.  Each\n+     entry is a string.\n+\n *** Changes in GDB 11\n \n * The 'set disassembler-options' command now supports specifying options"
    },
    {
      "sha": "90214f24238c989c8ab343b974d09d0fb987ea31",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=8b87fbe6bb5f682fef889630664884ea8e7d6444",
      "patch": "@@ -557,6 +557,14 @@ such as those used by readline for command input, and annotation\n related prompts are prohibited from being changed.\n @end defun\n \n+@defun gdb.architecture_names ()\n+Return a list containing all of the architecture names that the\n+current build of @value{GDBN} supports.  Each architecture name is a\n+string.  The names returned in this list are the same names as are\n+returned from @code{gdb.Architecture.name}\n+(@pxref{gdbpy_architecture_name,,Architecture.name}).\n+@end defun\n+\n @node Exception Handling\n @subsubsection Exception Handling\n @cindex python exceptions\n@@ -5834,6 +5842,7 @@ by an instance of the @code{gdb.Architecture} class.\n \n A @code{gdb.Architecture} class has the following methods:\n \n+@anchor{gdbpy_architecture_name}\n @defun Architecture.name ()\n Return the name (string value) of the architecture.\n @end defun"
    },
    {
      "sha": "3e7970ab76428d6f9f0b0874c9d0961460f14e95",
      "filename": "gdb/python/py-arch.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/python/py-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/python/py-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-arch.c?ref=8b87fbe6bb5f682fef889630664884ea8e7d6444",
      "patch": "@@ -271,6 +271,29 @@ archpy_register_groups (PyObject *self, PyObject *args)\n   return gdbpy_new_reggroup_iterator (gdbarch);\n }\n \n+/* Implementation of gdb.architecture_names().  Return a list of all the\n+   BFD architecture names that GDB understands.  */\n+\n+PyObject *\n+gdbpy_all_architecture_names (PyObject *self, PyObject *args)\n+{\n+  gdbpy_ref<> list (PyList_New (0));\n+  if (list == nullptr)\n+    return nullptr;\n+\n+  std::vector<const char *> name_list = gdbarch_printable_names ();\n+  for (const char *name : name_list)\n+    {\n+      gdbpy_ref <> py_name (PyString_FromString (name));\n+      if (py_name == nullptr)\n+\treturn nullptr;\n+      if (PyList_Append (list.get (), py_name.get ()) < 0)\n+\treturn nullptr;\n+    }\n+\n+ return list.release ();\n+}\n+\n void _initialize_py_arch ();\n void\n _initialize_py_arch ()"
    },
    {
      "sha": "2ad3bc944a76e578665cadc048c597fd7c617a66",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=8b87fbe6bb5f682fef889630664884ea8e7d6444",
      "patch": "@@ -469,6 +469,7 @@ PyObject *objfpy_get_xmethods (PyObject *, void *);\n PyObject *gdbpy_lookup_objfile (PyObject *self, PyObject *args, PyObject *kw);\n \n PyObject *gdbarch_to_arch_object (struct gdbarch *gdbarch);\n+PyObject *gdbpy_all_architecture_names (PyObject *self, PyObject *args);\n \n PyObject *gdbpy_new_register_descriptor_iterator (struct gdbarch *gdbarch,\n \t\t\t\t\t\t  const char *group_name);"
    },
    {
      "sha": "5b1c295fff62960c9087a4cd9581336ae8db8e6d",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=8b87fbe6bb5f682fef889630664884ea8e7d6444",
      "patch": "@@ -2324,6 +2324,10 @@ Set the value of the convenience variable $NAME.\" },\n Register a TUI window constructor.\" },\n #endif\t/* TUI */\n \n+  { \"architecture_names\", gdbpy_all_architecture_names, METH_NOARGS,\n+    \"architecture_names () -> List.\\n\\\n+Return a list of all the architecture names GDB understands.\" },\n+\n   {NULL, NULL, 0, NULL}\n };\n "
    },
    {
      "sha": "415fbd475b06eb8b313a87c38c7ad660a27bb857",
      "filename": "gdb/testsuite/gdb.python/py-arch.exp",
      "status": "modified",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/testsuite/gdb.python/py-arch.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8b87fbe6bb5f682fef889630664884ea8e7d6444/gdb/testsuite/gdb.python/py-arch.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-arch.exp?ref=8b87fbe6bb5f682fef889630664884ea8e7d6444",
      "patch": "@@ -62,3 +62,54 @@ if { ![is_address_zero_readable] } {\n     gdb_test \"python arch.disassemble(0, 0)\" \".*gdb\\.MemoryError.*\" \\\n \t\"test bad memory access\"\n }\n+\n+# Test for gdb.architecture_names().  First we're going to grab the\n+# complete list of architecture names using the 'complete' command.\n+set arch_names []\n+gdb_test_no_output \"set max-completions unlimited\"\n+gdb_test_multiple \"complete set architecture \" \"\" {\n+    -re \"complete set architecture\\[^\\r\\n\\]+\\r\\n\" {\n+\texp_continue\n+    }\n+    -re \"^set architecture \\(\\[^\\r\\n\\]+\\)\\r\\n\" {\n+\tset arch $expect_out(1,string)\n+\tif { \"$arch\" != \"auto\" } {\n+\t    set arch_names [lappend arch_names $arch]\n+\t}\n+\texp_continue\n+    }\n+    -re \"^$gdb_prompt $\" {\n+\tgdb_assert { [llength $arch_names] > 0 }\n+    }\n+}\n+\n+# Now find all of the architecture names using Python.\n+set py_arch_names []\n+gdb_test_no_output \"python all_arch = gdb.architecture_names()\"\n+gdb_test_no_output \"python all_arch.sort()\"\n+gdb_test_multiple \"python print(\\\"\\\\n\\\".join((\\\"Arch: %s\\\" % a) for a in all_arch))\" \"\" {\n+    -re \"python \\[^\\r\\n\\]+\\r\\n\" {\n+\texp_continue\n+    }\n+    -re \"^Arch: \\(\\[^\\r\\n\\]+\\)\\r\\n\" {\n+\tset arch $expect_out(1,string)\n+\tset py_arch_names [lappend py_arch_names $arch]\n+\texp_continue\n+    }\n+    -re \"$gdb_prompt $\" {\n+\tgdb_assert { [llength $py_arch_names] > 0 }\n+    }\n+}\n+\n+# Check the two lists of architecture names are the same length, and\n+# that the list contents all match.\n+gdb_assert { [llength $arch_names] == [llength $py_arch_names] }\n+set lists_match true\n+foreach a $arch_names b $py_arch_names {\n+    if { $a != $b } {\n+\tset lists_match false\n+\tverbose -log \"Mismatch is architecture list '$a' != '$b'\"\n+\tbreak\n+    }\n+}\n+gdb_assert { $lists_match }"
    }
  ]
}