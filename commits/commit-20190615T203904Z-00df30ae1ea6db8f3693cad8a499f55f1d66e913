{
  "sha": "00df30ae1ea6db8f3693cad8a499f55f1d66e913",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDBkZjMwYWUxZWE2ZGI4ZjM2OTNjYWQ4YTQ5OWY1NWYxZDY2ZTkxMw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-06-14T21:16:52Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-06-15T20:39:04Z"
    },
    "message": "gdb: New function to open source file and compute line charpos data\n\nEvery place that a symtab's line_charpos data is loaded always follows\nthe same pattern, so create a new function to contain this logic and\nmake use of it throughout GDB.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* source-cache.c (source_cache::get_plain_source_lines): Use\n\topen_source_file_with_line_charpos instead of just\n\topen_source_file, remove call to find_source_lines.\n\t(source_cache::get_source_lines): Likewise.\n\t* source.c (find_source_lines): Make static.\n\t(get_filename_and_charpos): Renamed into...\n\t(open_source_file_with_line_charpos): ..this along with changes to\n\treturn a scoped_fd, and some other minor clean ups.\n\t(identify_source_line): Use open_source_file_with_line_charpos.\n\t(search_command_helper): Use open_source_file_with_line_charpos\n\tinstead of just open_source_file, remove call to\n\tfind_source_lines.\n\t* source.h (open_source_file_with_line_charpos): Declare new\n\tfunction.\n\t(find_source_lines): Delete declaration.",
    "tree": {
      "sha": "39181f1204ddee4a04f5768a42271742da31bc59",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/39181f1204ddee4a04f5768a42271742da31bc59"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/00df30ae1ea6db8f3693cad8a499f55f1d66e913",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/00df30ae1ea6db8f3693cad8a499f55f1d66e913",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/00df30ae1ea6db8f3693cad8a499f55f1d66e913",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/00df30ae1ea6db8f3693cad8a499f55f1d66e913/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "afda45a206f83389782a400f86668714400a1cb7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/afda45a206f83389782a400f86668714400a1cb7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/afda45a206f83389782a400f86668714400a1cb7"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 41,
    "deletions": 29
  },
  "files": [
    {
      "sha": "cb81983a1da6c465861122c39a9c251ff4391537",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00df30ae1ea6db8f3693cad8a499f55f1d66e913/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00df30ae1ea6db8f3693cad8a499f55f1d66e913/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=00df30ae1ea6db8f3693cad8a499f55f1d66e913",
      "patch": "@@ -1,3 +1,21 @@\n+2019-06-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* source-cache.c (source_cache::get_plain_source_lines): Use\n+\topen_source_file_with_line_charpos instead of just\n+\topen_source_file, remove call to find_source_lines.\n+\t(source_cache::get_source_lines): Likewise.\n+\t* source.c (find_source_lines): Make static.\n+\t(get_filename_and_charpos): Renamed into...\n+\t(open_source_file_with_line_charpos): ..this along with changes to\n+\treturn a scoped_fd, and some other minor clean ups.\n+\t(identify_source_line): Use open_source_file_with_line_charpos.\n+\t(search_command_helper): Use open_source_file_with_line_charpos\n+\tinstead of just open_source_file, remove call to\n+\tfind_source_lines.\n+\t* source.h (open_source_file_with_line_charpos): Declare new\n+\tfunction.\n+\t(find_source_lines): Delete declaration.\n+\n 2019-06-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* source.c (get_filename_and_charpos): Remove fullname"
    },
    {
      "sha": "2d5b549d97171014ea3c99fae5f438da45f92f14",
      "filename": "gdb/source-cache.c",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00df30ae1ea6db8f3693cad8a499f55f1d66e913/gdb/source-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00df30ae1ea6db8f3693cad8a499f55f1d66e913/gdb/source-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source-cache.c?ref=00df30ae1ea6db8f3693cad8a499f55f1d66e913",
      "patch": "@@ -49,13 +49,10 @@ bool\n source_cache::get_plain_source_lines (struct symtab *s, int first_line,\n \t\t\t\t      int last_line, std::string *lines)\n {\n-  scoped_fd desc (open_source_file (s));\n+  scoped_fd desc (open_source_file_with_line_charpos (s));\n   if (desc.get () < 0)\n     return false;\n \n-  if (s->line_charpos == 0)\n-    find_source_lines (s, desc.get ());\n-\n   if (first_line < 1 || first_line > s->nlines || last_line < 1)\n     return false;\n \n@@ -202,10 +199,9 @@ source_cache::get_source_lines (struct symtab *s, int first_line,\n \t    {\n \t      if (s->line_charpos == 0)\n \t\t{\n-\t\t  scoped_fd desc = open_source_file (s);\n+\t\t  scoped_fd desc (open_source_file_with_line_charpos (s));\n \t\t  if (desc.get () < 0)\n \t\t    return false;\n-\t\t  find_source_lines (s, desc.get ());\n \n \t\t  /* FULLNAME points to a value owned by the symtab\n \t\t     (symtab::fullname).  Calling open_source_file reallocates"
    },
    {
      "sha": "dae1801c1369c6950b115d0914efaed08ffb1004",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 16,
      "deletions": 17,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00df30ae1ea6db8f3693cad8a499f55f1d66e913/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00df30ae1ea6db8f3693cad8a499f55f1d66e913/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=00df30ae1ea6db8f3693cad8a499f55f1d66e913",
      "patch": "@@ -1129,7 +1129,7 @@ symtab_to_filename_for_display (struct symtab *symtab)\n    to be open on descriptor DESC.\n    All set S->nlines to the number of such lines.  */\n \n-void\n+static void\n find_source_lines (struct symtab *s, int desc)\n {\n   struct stat st;\n@@ -1196,28 +1196,30 @@ find_source_lines (struct symtab *s, int desc)\n \n \f\n \n-/* Get full pathname and line number positions for a symtab.\n-   Set *FULLNAME to actual name of the file as found by `openp',\n-   or to 0 if the file is not found.  */\n+/* See source.h.  */\n \n-static void\n-get_filename_and_charpos (struct symtab *s)\n+scoped_fd\n+open_source_file_with_line_charpos (struct symtab *s)\n {\n-  scoped_fd desc = open_source_file (s);\n-  if (desc.get () < 0)\n-    return;\n-  if (s->line_charpos == 0)\n-    find_source_lines (s, desc.get ());\n+  scoped_fd fd (open_source_file (s));\n+  if (fd.get () < 0)\n+    return fd;\n+\n+  if (s->line_charpos == nullptr)\n+    find_source_lines (s, fd.get ());\n+  return fd;\n }\n \n+\f\n+\n /* See source.h.  */\n \n int\n identify_source_line (struct symtab *s, int line, int mid_statement,\n \t\t      CORE_ADDR pc)\n {\n-  if (s->line_charpos == 0)\n-    get_filename_and_charpos (s);\n+  if (s->line_charpos == nullptr)\n+    open_source_file_with_line_charpos (s);\n   if (s->fullname == 0)\n     return 0;\n   if (line > s->nlines)\n@@ -1545,13 +1547,10 @@ search_command_helper (const char *regex, int from_tty, bool forward)\n   if (current_source_symtab == 0)\n     select_source_symtab (0);\n \n-  scoped_fd desc = open_source_file (current_source_symtab);\n+  scoped_fd desc (open_source_file_with_line_charpos (current_source_symtab));\n   if (desc.get () < 0)\n     perror_with_name (symtab_to_filename_for_display (current_source_symtab));\n \n-  if (current_source_symtab->line_charpos == 0)\n-    find_source_lines (current_source_symtab, desc.get ());\n-\n   int line = (forward\n \t      ? last_line_listed + 1\n \t      : last_line_listed - 1);"
    },
    {
      "sha": "7ea826acae5a01b265c0e9292c24e506ff4ac247",
      "filename": "gdb/source.h",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/00df30ae1ea6db8f3693cad8a499f55f1d66e913/gdb/source.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/00df30ae1ea6db8f3693cad8a499f55f1d66e913/gdb/source.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.h?ref=00df30ae1ea6db8f3693cad8a499f55f1d66e913",
      "patch": "@@ -76,6 +76,11 @@ extern scoped_fd find_and_open_source (const char *filename,\n    negative number for error.  */\n extern scoped_fd open_source_file (struct symtab *s);\n \n+/* Open a source file given a symtab S (by calling open_source_file), then\n+   ensure the line_charpos data is initialised for symtab S before\n+   returning.  */\n+extern scoped_fd open_source_file_with_line_charpos (struct symtab *s);\n+\n extern gdb::unique_xmalloc_ptr<char> rewrite_source_path (const char *path);\n \n extern const char *symtab_to_fullname (struct symtab *s);\n@@ -84,12 +89,6 @@ extern const char *symtab_to_fullname (struct symtab *s);\n    filename.  It depends on 'set filename-display' value.  */\n extern const char *symtab_to_filename_for_display (struct symtab *symtab);\n \n-/* Create and initialize the table S->line_charpos that records the\n-   positions of the lines in the source file, which is assumed to be\n-   open on descriptor DESC.  All set S->nlines to the number of such\n-   lines.  */\n-extern void find_source_lines (struct symtab *s, int desc);\n-\n /* Return the first line listed by print_source_lines.  Used by\n    command interpreters to request listing from a previous point.  If\n    0, then no source lines have yet been listed since the last time"
    }
  ]
}