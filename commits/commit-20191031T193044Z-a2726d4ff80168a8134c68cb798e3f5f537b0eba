{
  "sha": "a2726d4ff80168a8134c68cb798e3f5f537b0eba",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTI3MjZkNGZmODAxNjhhODEzNGM2OGNiNzk4ZTNmNWY1MzdiMGViYQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2019-10-31T19:30:44Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2019-10-31T19:30:44Z"
    },
    "message": "[ARM] Store exception handling information per-bfd instead of per-objfile\n\nBased on feedback from Tromey, update the use of objfile_key in gdb/arm-tdep.c\nto use bfd_key instead. That way we don't have to re-create the exception\nhandling data all over again if it was done before for the same BFD.\n\ngdb/ChangeLog:\n\n2019-10-31  Luis Machado  <luis.machado@linaro.org>\n\n\t* arm-tdep.c (arm_exidx_data_key): Use bfd_key instead of\n\tobjfile_key.\n\t(arm_exidx_new_objfile): Adjust to use objfile->obfd instead of\n\tobjfile to fetch per-bfd data.\n\t(arm_find_exidx_entry): Likewise.\n\nChange-Id: Ia7b3208ea8d788414600fa6d770ac76db0562859",
    "tree": {
      "sha": "512800576a989ce7797d8cba2c664752638d8392",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/512800576a989ce7797d8cba2c664752638d8392"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a2726d4ff80168a8134c68cb798e3f5f537b0eba",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2726d4ff80168a8134c68cb798e3f5f537b0eba",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a2726d4ff80168a8134c68cb798e3f5f537b0eba",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2726d4ff80168a8134c68cb798e3f5f537b0eba/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "75cafaa61a0244016a2c2ee1d0b2742d674d7373",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75cafaa61a0244016a2c2ee1d0b2742d674d7373",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/75cafaa61a0244016a2c2ee1d0b2742d674d7373"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 13,
    "deletions": 4
  },
  "files": [
    {
      "sha": "7abe20ee59c0507a461b5856298f72ebb2c71f97",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2726d4ff80168a8134c68cb798e3f5f537b0eba/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2726d4ff80168a8134c68cb798e3f5f537b0eba/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a2726d4ff80168a8134c68cb798e3f5f537b0eba",
      "patch": "@@ -1,3 +1,11 @@\n+2019-10-31  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* arm-tdep.c (arm_exidx_data_key): Use bfd_key instead of\n+\tobjfile_key.\n+\t(arm_exidx_new_objfile): Adjust to use objfile->obfd instead of\n+\tobjfile to fetch per-bfd data.\n+\t(arm_find_exidx_entry): Likewise.\n+\n 2019-10-31  Christian Biesinger  <cbiesinger@google.com>\n \n \t* gdbsupport/agent.c (debug_agent): Change type to bool."
    },
    {
      "sha": "48772d7b3804d7f9b50f2f6721252af0d3c4842f",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2726d4ff80168a8134c68cb798e3f5f537b0eba/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2726d4ff80168a8134c68cb798e3f5f537b0eba/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=a2726d4ff80168a8134c68cb798e3f5f537b0eba",
      "patch": "@@ -1999,7 +1999,8 @@ struct arm_exidx_data\n   std::vector<std::vector<arm_exidx_entry>> section_maps;\n };\n \n-static const struct objfile_key<arm_exidx_data> arm_exidx_data_key;\n+/* Per-BFD key to store exception handling information.  */\n+static const struct bfd_key<arm_exidx_data> arm_exidx_data_key;\n \n static struct obj_section *\n arm_obj_section_from_vma (struct objfile *objfile, bfd_vma vma)\n@@ -2043,7 +2044,7 @@ arm_exidx_new_objfile (struct objfile *objfile)\n   LONGEST i;\n \n   /* If we've already touched this file, do nothing.  */\n-  if (!objfile || arm_exidx_data_key.get (objfile) != NULL)\n+  if (!objfile || arm_exidx_data_key.get (objfile->obfd) != NULL)\n     return;\n \n   /* Read contents of exception table and index.  */\n@@ -2074,7 +2075,7 @@ arm_exidx_new_objfile (struct objfile *objfile)\n     }\n \n   /* Allocate exception table data structure.  */\n-  data = arm_exidx_data_key.emplace (objfile);\n+  data = arm_exidx_data_key.emplace (objfile->obfd);\n   data->section_maps.resize (objfile->obfd->section_count);\n \n   /* Fill in exception table.  */\n@@ -2246,7 +2247,7 @@ arm_find_exidx_entry (CORE_ADDR memaddr, CORE_ADDR *start)\n       struct arm_exidx_data *data;\n       struct arm_exidx_entry map_key = { memaddr - obj_section_addr (sec), 0 };\n \n-      data = arm_exidx_data_key.get (sec->objfile);\n+      data = arm_exidx_data_key.get (sec->objfile->obfd);\n       if (data != NULL)\n \t{\n \t  std::vector<arm_exidx_entry> &map"
    }
  ]
}