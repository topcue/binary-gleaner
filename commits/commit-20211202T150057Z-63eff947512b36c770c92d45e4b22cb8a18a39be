{
  "sha": "63eff947512b36c770c92d45e4b22cb8a18a39be",
  "node_id": "C_kwDOANOeidoAKDYzZWZmOTQ3NTEyYjM2Yzc3MGM5MmQ0NWU0YjIyY2I4YTE4YTM5YmU",
  "commit": {
    "author": {
      "name": "Richard Sandiford",
      "email": "richard.sandiford@arm.com",
      "date": "2021-12-02T15:00:57Z"
    },
    "committer": {
      "name": "Richard Sandiford",
      "email": "richard.sandiford@arm.com",
      "date": "2021-12-02T15:00:57Z"
    },
    "message": "aarch64: Enforce P/M/E order for MOPS instructions\n\nThe MOPS instructions should be used as a triple, such as:\n\n       cpyfp [x0]!, [x1]!, x2!\n       cpyfm [x0]!, [x1]!, x2!\n       cpyfe [x0]!, [x1]!, x2!\n\nThe registers should also be the same for each writeback operand.\nThis patch adds a warning for code that doesn't follow this rule,\nalong similar lines to the warning that we already emit for\ninvalid uses of MOVPRFX.\n\ninclude/\n\t* opcode/aarch64.h (C_SCAN_MOPS_P, C_SCAN_MOPS_M, C_SCAN_MOPS_E)\n\t(C_SCAN_MOPS_PME): New macros.\n\t(AARCH64_OPDE_A_SHOULD_FOLLOW_B): New aarch64_operand_error_kind.\n\t(AARCH64_OPDE_EXPECTED_A_AFTER_B): Likewise.\n\t(aarch64_operand_error): Make each data value a union between\n\tan int and a string.\n\nopcodes/\n\t* aarch64-tbl.h (MOPS_CPY_OP1_OP2_INSN): Add scan flags.\n\t(MOPS_SET_OP1_OP2_INSN): Likewise.\n\t* aarch64-opc.c (set_out_of_range_error): Update after change to\n\taarch64_operand_error.\n\t(set_unaligned_error, set_reg_list_error): Likewise.\n\t(init_insn_sequence): Use a 3-instruction sequence for\n\tMOPS P instructions.\n\t(verify_mops_pme_sequence): New function.\n\t(verify_constraints): Call it.\n\t* aarch64-dis.c (print_verifier_notes): Handle\n\tAARCH64_OPDE_A_SHOULD_FOLLOW_B and AARCH64_OPDE_EXPECTED_A_AFTER_B.\n\ngas/\n\t* config/tc-aarch64.c (operand_mismatch_kind_names): Add entries\n\tfor AARCH64_OPDE_A_SHOULD_FOLLOW_B and AARCH64_OPDE_EXPECTED_A_AFTER_B.\n\t(operand_error_higher_severity_p): Check that\n\tAARCH64_OPDE_A_SHOULD_FOLLOW_B and AARCH64_OPDE_EXPECTED_A_AFTER_B\n\tcome between AARCH64_OPDE_RECOVERABLE and AARCH64_OPDE_SYNTAX_ERROR;\n\ttheir relative order is not significant.\n\t(record_operand_error_with_data): Update after change to\n\taarch64_operand_error.\n\t(output_operand_error_record): Likewise.  Handle\n\tAARCH64_OPDE_A_SHOULD_FOLLOW_B and AARCH64_OPDE_EXPECTED_A_AFTER_B.\n\t* testsuite/gas/aarch64/mops_invalid_2.s,\n\ttestsuite/gas/aarch64/mops_invalid_2.d,\n\ttestsuite/gas/aarch64/mops_invalid_2.l: New test.",
    "tree": {
      "sha": "336e8d9a01ee6665d9ec7b8148155ee7cab992a0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/336e8d9a01ee6665d9ec7b8148155ee7cab992a0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/63eff947512b36c770c92d45e4b22cb8a18a39be",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63eff947512b36c770c92d45e4b22cb8a18a39be",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/63eff947512b36c770c92d45e4b22cb8a18a39be",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63eff947512b36c770c92d45e4b22cb8a18a39be/comments",
  "author": {
    "login": "rsandifo-arm",
    "id": 28043039,
    "node_id": "MDQ6VXNlcjI4MDQzMDM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rsandifo-arm",
    "html_url": "https://github.com/rsandifo-arm",
    "followers_url": "https://api.github.com/users/rsandifo-arm/followers",
    "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs",
    "repos_url": "https://api.github.com/users/rsandifo-arm/repos",
    "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "rsandifo-arm",
    "id": 28043039,
    "node_id": "MDQ6VXNlcjI4MDQzMDM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rsandifo-arm",
    "html_url": "https://github.com/rsandifo-arm",
    "followers_url": "https://api.github.com/users/rsandifo-arm/followers",
    "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs",
    "repos_url": "https://api.github.com/users/rsandifo-arm/repos",
    "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6327658ee73502ffb55dfb6b28a20d1dde15a4dc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6327658ee73502ffb55dfb6b28a20d1dde15a4dc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6327658ee73502ffb55dfb6b28a20d1dde15a4dc"
    }
  ],
  "stats": {
    "total": 386,
    "additions": 354,
    "deletions": 32
  },
  "files": [
    {
      "sha": "ea65da580deeb7091b19a885d3678d93e471ea5f",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 28,
      "deletions": 10,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63eff947512b36c770c92d45e4b22cb8a18a39be/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63eff947512b36c770c92d45e4b22cb8a18a39be/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=63eff947512b36c770c92d45e4b22cb8a18a39be",
      "patch": "@@ -5019,6 +5019,8 @@ const char* operand_mismatch_kind_names[] =\n {\n   \"AARCH64_OPDE_NIL\",\n   \"AARCH64_OPDE_RECOVERABLE\",\n+  \"AARCH64_OPDE_A_SHOULD_FOLLOW_B\",\n+  \"AARCH64_OPDE_EXPECTED_A_AFTER_B\",\n   \"AARCH64_OPDE_SYNTAX_ERROR\",\n   \"AARCH64_OPDE_FATAL_SYNTAX_ERROR\",\n   \"AARCH64_OPDE_INVALID_VARIANT\",\n@@ -5040,7 +5042,10 @@ operand_error_higher_severity_p (enum aarch64_operand_error_kind lhs,\n \t\t\t\t enum aarch64_operand_error_kind rhs)\n {\n   gas_assert (AARCH64_OPDE_RECOVERABLE > AARCH64_OPDE_NIL);\n-  gas_assert (AARCH64_OPDE_SYNTAX_ERROR > AARCH64_OPDE_RECOVERABLE);\n+  gas_assert (AARCH64_OPDE_A_SHOULD_FOLLOW_B > AARCH64_OPDE_RECOVERABLE);\n+  gas_assert (AARCH64_OPDE_EXPECTED_A_AFTER_B > AARCH64_OPDE_RECOVERABLE);\n+  gas_assert (AARCH64_OPDE_SYNTAX_ERROR > AARCH64_OPDE_A_SHOULD_FOLLOW_B);\n+  gas_assert (AARCH64_OPDE_SYNTAX_ERROR > AARCH64_OPDE_EXPECTED_A_AFTER_B);\n   gas_assert (AARCH64_OPDE_FATAL_SYNTAX_ERROR > AARCH64_OPDE_SYNTAX_ERROR);\n   gas_assert (AARCH64_OPDE_INVALID_VARIANT > AARCH64_OPDE_FATAL_SYNTAX_ERROR);\n   gas_assert (AARCH64_OPDE_OUT_OF_RANGE > AARCH64_OPDE_INVALID_VARIANT);\n@@ -5233,9 +5238,9 @@ record_operand_error_with_data (const aarch64_opcode *opcode, int idx,\n   info.index = idx;\n   info.kind = kind;\n   info.error = error;\n-  info.data[0] = extra_data[0];\n-  info.data[1] = extra_data[1];\n-  info.data[2] = extra_data[2];\n+  info.data[0].i = extra_data[0];\n+  info.data[1].i = extra_data[1];\n+  info.data[2].i = extra_data[2];\n   info.non_fatal = false;\n   record_operand_error_info (opcode, &info);\n }\n@@ -5410,6 +5415,19 @@ output_operand_error_record (const operand_error_record *record, char *str)\n     case AARCH64_OPDE_NIL:\n       gas_assert (0);\n       break;\n+\n+    case AARCH64_OPDE_A_SHOULD_FOLLOW_B:\n+      handler (_(\"this `%s' should have an immediately preceding `%s'\"\n+\t\t \" -- `%s'\"),\n+\t       detail->data[0].s, detail->data[1].s, str);\n+      break;\n+\n+    case AARCH64_OPDE_EXPECTED_A_AFTER_B:\n+      handler (_(\"the preceding `%s' should be followed by `%s` rather\"\n+\t\t \" than `%s` -- `%s'\"),\n+\t       detail->data[1].s, detail->data[0].s, opcode->name, str);\n+      break;\n+\n     case AARCH64_OPDE_SYNTAX_ERROR:\n     case AARCH64_OPDE_RECOVERABLE:\n     case AARCH64_OPDE_FATAL_SYNTAX_ERROR:\n@@ -5541,31 +5559,31 @@ output_operand_error_record (const operand_error_record *record, char *str)\n       break;\n \n     case AARCH64_OPDE_OUT_OF_RANGE:\n-      if (detail->data[0] != detail->data[1])\n+      if (detail->data[0].i != detail->data[1].i)\n \thandler (_(\"%s out of range %d to %d at operand %d -- `%s'\"),\n \t\t detail->error ? detail->error : _(\"immediate value\"),\n-\t\t detail->data[0], detail->data[1], idx + 1, str);\n+\t\t detail->data[0].i, detail->data[1].i, idx + 1, str);\n       else\n \thandler (_(\"%s must be %d at operand %d -- `%s'\"),\n \t\t detail->error ? detail->error : _(\"immediate value\"),\n-\t\t detail->data[0], idx + 1, str);\n+\t\t detail->data[0].i, idx + 1, str);\n       break;\n \n     case AARCH64_OPDE_REG_LIST:\n-      if (detail->data[0] == 1)\n+      if (detail->data[0].i == 1)\n \thandler (_(\"invalid number of registers in the list; \"\n \t\t   \"only 1 register is expected at operand %d -- `%s'\"),\n \t\t idx + 1, str);\n       else\n \thandler (_(\"invalid number of registers in the list; \"\n \t\t   \"%d registers are expected at operand %d -- `%s'\"),\n-\t       detail->data[0], idx + 1, str);\n+\t       detail->data[0].i, idx + 1, str);\n       break;\n \n     case AARCH64_OPDE_UNALIGNED:\n       handler (_(\"immediate value must be a multiple of \"\n \t\t \"%d at operand %d -- `%s'\"),\n-\t       detail->data[0], idx + 1, str);\n+\t       detail->data[0].i, idx + 1, str);\n       break;\n \n     default:"
    },
    {
      "sha": "f5e7228f6e7d5ebec3ba376a513756de8c177aa4",
      "filename": "gas/testsuite/gas/aarch64/mops_invalid_2.d",
      "status": "added",
      "additions": 72,
      "deletions": 0,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63eff947512b36c770c92d45e4b22cb8a18a39be/gas/testsuite/gas/aarch64/mops_invalid_2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63eff947512b36c770c92d45e4b22cb8a18a39be/gas/testsuite/gas/aarch64/mops_invalid_2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/mops_invalid_2.d?ref=63eff947512b36c770c92d45e4b22cb8a18a39be",
      "patch": "@@ -0,0 +1,72 @@\n+# warning_output: mops_invalid_2.l\n+# objdump: -dr -M notes\n+\n+.*\n+\n+\n+Disassembly of section \\.text:\n+\n+0+ <\\.text>:\n+[^:]*:\t1901d440 \tcpyfpwtn\t\\[x0\\]!, \\[x1\\]!, x2!\n+[^:]*:\t1981d440 \tcpyfewtn\t\\[x0\\]!, \\[x1\\]!, x2!  // note: expected `cpyfmwtn' after previous `cpyfpwtn'\n+[^:]*:\t1941d440 \tcpyfmwtn\t\\[x0\\]!, \\[x1\\]!, x2!  // note: this `cpyfmwtn' should have an immediately preceding `cpyfpwtn'\n+[^:]*:\t1901d440 \tcpyfpwtn\t\\[x0\\]!, \\[x1\\]!, x2!\n+[^:]*:\t1941f440 \tcpyfmtn\t\\[x0\\]!, \\[x1\\]!, x2!  // note: expected `cpyfmwtn' after previous `cpyfpwtn'\n+[^:]*:\t1981f440 \tcpyfetn\t\\[x0\\]!, \\[x1\\]!, x2!\n+[^:]*:\t1d010440 \tcpyp\t\\[x0\\]!, \\[x1\\]!, x2!\n+[^:]*:\t19c24420 \tsetm\t\\[x0\\]!, x1!, x2  // note: expected `cpym' after previous `cpyp'\n+[^:]*:\t19c28420 \tsete\t\\[x0\\]!, x1!, x2\n+[^:]*:\t19011440 \tcpyfpwt\t\\[x0\\]!, \\[x1\\]!, x2!\n+[^:]*:\t19411443 \tcpyfmwt\t\\[x3\\]!, \\[x1\\]!, x2!  // note: destination register differs from preceding instruction at operand 1\n+[^:]*:\t19811444 \tcpyfewt\t\\[x4\\]!, \\[x1\\]!, x2!  // note: destination register differs from preceding instruction at operand 1\n+[^:]*:\t19011440 \tcpyfpwt\t\\[x0\\]!, \\[x1\\]!, x2!\n+[^:]*:\t19431440 \tcpyfmwt\t\\[x0\\]!, \\[x3\\]!, x2!  // note: source register differs from preceding instruction at operand 2\n+[^:]*:\t19841440 \tcpyfewt\t\\[x0\\]!, \\[x4\\]!, x2!  // note: source register differs from preceding instruction at operand 2\n+[^:]*:\t19011440 \tcpyfpwt\t\\[x0\\]!, \\[x1\\]!, x2!\n+[^:]*:\t19411460 \tcpyfmwt\t\\[x0\\]!, \\[x1\\]!, x3!  // note: size register differs from preceding instruction at operand 3\n+[^:]*:\t19811480 \tcpyfewt\t\\[x0\\]!, \\[x1\\]!, x4!  // note: size register differs from preceding instruction at operand 3\n+[^:]*:\t1901d440 \tcpyfpwtn\t\\[x0\\]!, \\[x1\\]!, x2!\n+[^:]*:\t8b020020 \tadd\tx0, x1, x2  // note: expected `cpyfmwtn' after previous `cpyfpwtn'\n+[^:]*:\t1901e440 \tcpyfprtn\t\\[x0\\]!, \\[x1\\]!, x2!\n+[^:]*:\t1941e440 \tcpyfmrtn\t\\[x0\\]!, \\[x1\\]!, x2!\n+\n+Disassembly of section \\.text2:\n+\n+0+ <\\.text2>:\n+[^:]*:\t1901d440 \tcpyfpwtn\t\\[x0\\]!, \\[x1\\]!, x2!  // note: instruction opens new dependency sequence without ending previous one\n+\n+Disassembly of section \\.text3:\n+\n+0+ <\\.text3>:\n+[^:]*:\t1941d440 \tcpyfmwtn\t\\[x0\\]!, \\[x1\\]!, x2!  // note: this `cpyfmwtn' should have an immediately preceding `cpyfpwtn'\n+\n+Disassembly of section \\.text4:\n+\n+0+ <\\.text4>:\n+[^:]*:\t1981d440 \tcpyfewtn\t\\[x0\\]!, \\[x1\\]!, x2!  // note: this `cpyfewtn' should have an immediately preceding `cpyfmwtn'\n+[^:]*:\t19014440 \tcpyfpwn\t\\[x0\\]!, \\[x1\\]!, x2!\n+\n+Disassembly of section \\.text5:\n+\n+0+ <\\.text5>:\n+[^:]*:\t91000020 \tadd\tx0, x1, #0x0  // note: expected `cpyfmwn' after previous `cpyfpwn'\n+[^:]*:\t19c20420 \tsetp\t\\[x0\\]!, x1!, x2\n+[^:]*:\t19c28420 \tsete\t\\[x0\\]!, x1!, x2  // note: expected `setm' after previous `setp'\n+[^:]*:\t19c24420 \tsetm\t\\[x0\\]!, x1!, x2  // note: this `setm' should have an immediately preceding `setp'\n+[^:]*:\t19c20420 \tsetp\t\\[x0\\]!, x1!, x2\n+[^:]*:\t19c24423 \tsetm\t\\[x3\\]!, x1!, x2  // note: destination register differs from preceding instruction at operand 1\n+[^:]*:\t19c28424 \tsete\t\\[x4\\]!, x1!, x2  // note: destination register differs from preceding instruction at operand 1\n+[^:]*:\t19c20420 \tsetp\t\\[x0\\]!, x1!, x2\n+[^:]*:\t19c24460 \tsetm\t\\[x0\\]!, x3!, x2  // note: size register differs from preceding instruction at operand 2\n+[^:]*:\t19c28480 \tsete\t\\[x0\\]!, x4!, x2  // note: size register differs from preceding instruction at operand 2\n+[^:]*:\t19c20420 \tsetp\t\\[x0\\]!, x1!, x2\n+[^:]*:\t19c44420 \tsetm\t\\[x0\\]!, x1!, x4\n+[^:]*:\t19c38420 \tsete\t\\[x0\\]!, x1!, x3\n+[^:]*:\t0420bc20 \tmovprfx\tz0, z1\n+[^:]*:\t19c24420 \tsetm\t\\[x0\\]!, x1!, x2  // note: SVE instruction expected after `movprfx'\n+[^:]*:\t19c20420 \tsetp\t\\[x0\\]!, x1!, x2\n+[^:]*:\t0420bc20 \tmovprfx\tz0, z1  // note: instruction opens new dependency sequence without ending previous one\n+[^:]*:\t65808080 \tfadd\tz0\\.s, p0/m, z0\\.s, z4\\.s\n+[^:]*:\t19c20420 \tsetp\t\\[x0\\]!, x1!, x2\n+[^:]*:\t0420bc20 \tmovprfx\tz0, z1  // note: instruction opens new dependency sequence without ending previous one\n+[^:]*:\t65808082 \tfadd\tz2\\.s, p0/m, z2\\.s, z4\\.s  // note: output register of preceding `movprfx' not used in current instruction at operand 1"
    },
    {
      "sha": "4f757530fb541eef4ed3058517a2e3db716f0ad7",
      "filename": "gas/testsuite/gas/aarch64/mops_invalid_2.l",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63eff947512b36c770c92d45e4b22cb8a18a39be/gas/testsuite/gas/aarch64/mops_invalid_2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63eff947512b36c770c92d45e4b22cb8a18a39be/gas/testsuite/gas/aarch64/mops_invalid_2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/mops_invalid_2.l?ref=63eff947512b36c770c92d45e4b22cb8a18a39be",
      "patch": "@@ -0,0 +1,27 @@\n+[^:]*: Assembler messages:\n+[^:]*:4: Warning: the preceding `cpyfpwtn' should be followed by `cpyfmwtn` rather than `cpyfewtn` -- `cpyfewtn \\[x0\\]!,\\[x1\\]!,x2!'\n+[^:]*:5: Warning: this `cpyfmwtn' should have an immediately preceding `cpyfpwtn' -- `cpyfmwtn \\[x0\\]!,\\[x1\\]!,x2!'\n+[^:]*:8: Warning: the preceding `cpyfpwtn' should be followed by `cpyfmwtn` rather than `cpyfmtn` -- `cpyfmtn \\[x0\\]!,\\[x1\\]!,x2!'\n+[^:]*:12: Warning: the preceding `cpyp' should be followed by `cpym` rather than `setm` -- `setm \\[x0\\]!,x1!,x2'\n+[^:]*:16: Warning: destination register differs from preceding instruction at operand 1 -- `cpyfmwt \\[x3\\]!,\\[x1\\]!,x2!'\n+[^:]*:17: Warning: destination register differs from preceding instruction at operand 1 -- `cpyfewt \\[x4\\]!,\\[x1\\]!,x2!'\n+[^:]*:20: Warning: source register differs from preceding instruction at operand 2 -- `cpyfmwt \\[x0\\]!,\\[x3\\]!,x2!'\n+[^:]*:21: Warning: source register differs from preceding instruction at operand 2 -- `cpyfewt \\[x0\\]!,\\[x4\\]!,x2!'\n+[^:]*:24: Warning: size register differs from preceding instruction at operand 3 -- `cpyfmwt \\[x0\\]!,\\[x1\\]!,x3!'\n+[^:]*:25: Warning: size register differs from preceding instruction at operand 3 -- `cpyfewt \\[x0\\]!,\\[x1\\]!,x4!'\n+[^:]*:28: Warning: the preceding `cpyfpwtn' should be followed by `cpyfmwtn` rather than `add` -- `add x0,x1,x2'\n+[^:]*:39: Warning: this `cpyfmwtn' should have an immediately preceding `cpyfpwtn' -- `cpyfmwtn \\[x0\\]!,\\[x1\\]!,x2!'\n+[^:]*:43: Warning: this `cpyfewtn' should have an immediately preceding `cpyfmwtn' -- `cpyfewtn \\[x0\\]!,\\[x1\\]!,x2!'\n+[^:]*:51: Warning: the preceding `setp' should be followed by `setm` rather than `sete` -- `sete \\[x0\\]!,x1!,x2'\n+[^:]*:52: Warning: this `setm' should have an immediately preceding `setp' -- `setm \\[x0\\]!,x1!,x2'\n+[^:]*:55: Warning: destination register differs from preceding instruction at operand 1 -- `setm \\[x3\\]!,x1!,x2'\n+[^:]*:56: Warning: destination register differs from preceding instruction at operand 1 -- `sete \\[x4\\]!,x1!,x2'\n+[^:]*:59: Warning: size register differs from preceding instruction at operand 2 -- `setm \\[x0\\]!,x3!,x2'\n+[^:]*:60: Warning: size register differs from preceding instruction at operand 2 -- `sete \\[x0\\]!,x4!,x2'\n+[^:]*:67: Warning: SVE instruction expected after `movprfx' -- `setm \\[x0\\]!,x1!,x2'\n+[^:]*:70: Warning: instruction opens new dependency sequence without ending previous one -- `movprfx z0,z1'\n+[^:]*:74: Warning: instruction opens new dependency sequence without ending previous one -- `movprfx z0,z1'\n+[^:]*:75: Warning: output register of preceding `movprfx' not used in current instruction at operand 1 -- `fadd z2\\.s,p0/m,z2\\.s,z4\\.s'\n+[^:]*:31: Warning: previous `cpyfprtn' sequence has not been closed\n+[^:]*:35: Warning: previous `cpyfpwtn' sequence has not been closed\n+[^:]*:44: Warning: previous `cpyfpwn' sequence has not been closed"
    },
    {
      "sha": "f78ca54e84f70169a5327d231b2a55f7b5842320",
      "filename": "gas/testsuite/gas/aarch64/mops_invalid_2.s",
      "status": "added",
      "additions": 75,
      "deletions": 0,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63eff947512b36c770c92d45e4b22cb8a18a39be/gas/testsuite/gas/aarch64/mops_invalid_2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63eff947512b36c770c92d45e4b22cb8a18a39be/gas/testsuite/gas/aarch64/mops_invalid_2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/mops_invalid_2.s?ref=63eff947512b36c770c92d45e4b22cb8a18a39be",
      "patch": "@@ -0,0 +1,75 @@\n+\t.arch\tarmv8.8-a+sve\n+\n+\tcpyfpwtn [x0]!, [x1]!, x2!\n+\tcpyfewtn [x0]!, [x1]!, x2!\n+\tcpyfmwtn [x0]!, [x1]!, x2!\n+\n+\tcpyfpwtn [x0]!, [x1]!, x2!\n+\tcpyfmtn [x0]!, [x1]!, x2!\n+\tcpyfetn [x0]!, [x1]!, x2!\n+\n+\tcpyp [x0]!, [x1]!, x2!\n+\tsetm [x0]!, x1!, x2\n+\tsete [x0]!, x1!, x2\n+\n+\tcpyfpwt [x0]!, [x1]!, x2!\n+\tcpyfmwt [x3]!, [x1]!, x2!\n+\tcpyfewt [x4]!, [x1]!, x2!\n+\n+\tcpyfpwt [x0]!, [x1]!, x2!\n+\tcpyfmwt [x0]!, [x3]!, x2!\n+\tcpyfewt [x0]!, [x4]!, x2!\n+\n+\tcpyfpwt [x0]!, [x1]!, x2!\n+\tcpyfmwt [x0]!, [x1]!, x3!\n+\tcpyfewt [x0]!, [x1]!, x4!\n+\n+\tcpyfpwtn [x0]!, [x1]!, x2!\n+\tadd x0, x1, x2\n+\n+\tcpyfprtn [x0]!, [x1]!, x2!\n+\tcpyfmrtn [x0]!, [x1]!, x2!\n+\n+\t.section .text2, \"ax\", @progbits\n+\n+\tcpyfpwtn [x0]!, [x1]!, x2!\n+\n+\t.section .text3, \"ax\", @progbits\n+\n+\tcpyfmwtn [x0]!, [x1]!, x2!\n+\n+\t.section .text4, \"ax\", @progbits\n+\n+\tcpyfewtn [x0]!, [x1]!, x2!\n+\tcpyfpwn [x0]!, [x1]!, x2!\n+\n+\t.section .text5, \"ax\", @progbits\n+\n+\tadd x0, x1, #0\n+\n+\tsetp [x0]!, x1!, x2\n+\tsete [x0]!, x1!, x2\n+\tsetm [x0]!, x1!, x2\n+\n+\tsetp [x0]!, x1!, x2\n+\tsetm [x3]!, x1!, x2\n+\tsete [x4]!, x1!, x2\n+\n+\tsetp [x0]!, x1!, x2\n+\tsetm [x0]!, x3!, x2\n+\tsete [x0]!, x4!, x2\n+\n+\tsetp [x0]!, x1!, x2\n+\tsetm [x0]!, x1!, x4 // OK\n+\tsete [x0]!, x1!, x3 // OK\n+\n+\tmovprfx z0, z1\n+\tsetm [x0]!, x1!, x2\n+\n+\tsetp [x0]!, x1!, x2\n+\tmovprfx z0, z1\n+\tfadd z0.s, p0/m, z0.s, z4.s\n+\n+\tsetp [x0]!, x1!, x2\n+\tmovprfx z0, z1\n+\tfadd z2.s, p0/m, z2.s, z4.s"
    },
    {
      "sha": "21ba0bf0074914f6664732257121a57cc688b951",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 25,
      "deletions": 7,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63eff947512b36c770c92d45e4b22cb8a18a39be/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63eff947512b36c770c92d45e4b22cb8a18a39be/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=63eff947512b36c770c92d45e4b22cb8a18a39be",
      "patch": "@@ -927,7 +927,11 @@ extern const aarch64_opcode aarch64_opcode_table[];\n /* This instruction's operation width is determined by the operand with the\n    largest element size.  */\n #define C_MAX_ELEM (1U << 1)\n-/* Next bit is 2.  */\n+#define C_SCAN_MOPS_P (1U << 2)\n+#define C_SCAN_MOPS_M (2U << 2)\n+#define C_SCAN_MOPS_E (3U << 2)\n+#define C_SCAN_MOPS_PME (3U << 2)\n+/* Next bit is 4.  */\n \n static inline bool\n alias_opcode_p (const aarch64_opcode *opcode)\n@@ -1221,6 +1225,17 @@ struct aarch64_inst\n      Less severe error found during the parsing, very possibly because that\n      GAS has picked up a wrong instruction template for the parsing.\n \n+   AARCH64_OPDE_A_SHOULD_FOLLOW_B\n+     The instruction forms (or is expected to form) part of a sequence,\n+     but the preceding instruction in the sequence wasn't the expected one.\n+     The message refers to two strings: the name of the current instruction,\n+     followed by the name of the expected preceding instruction.\n+\n+   AARCH64_OPDE_EXPECTED_A_AFTER_B\n+     Same as AARCH64_OPDE_A_SHOULD_FOLLOW_B, but shifting the focus\n+     so that the current instruction is assumed to be the incorrect one:\n+     \"since the previous instruction was B, the current one should be A\".\n+\n    AARCH64_OPDE_SYNTAX_ERROR\n      General syntax error; it can be either a user error, or simply because\n      that GAS is trying a wrong instruction template.\n@@ -1255,11 +1270,8 @@ struct aarch64_inst\n      Error of the highest severity and used for any severe issue that does not\n      fall into any of the above categories.\n \n-   The enumerators are only interesting to GAS.  They are declared here (in\n-   libopcodes) because that some errors are detected (and then notified to GAS)\n-   by libopcodes (rather than by GAS solely).\n-\n-   The first three errors are only deteced by GAS while the\n+   AARCH64_OPDE_RECOVERABLE, AARCH64_OPDE_SYNTAX_ERROR and\n+   AARCH64_OPDE_FATAL_SYNTAX_ERROR are only deteced by GAS while the\n    AARCH64_OPDE_INVALID_VARIANT error can only be spotted by libopcodes as\n    only libopcodes has the information about the valid variants of each\n    instruction.\n@@ -1273,6 +1285,8 @@ enum aarch64_operand_error_kind\n {\n   AARCH64_OPDE_NIL,\n   AARCH64_OPDE_RECOVERABLE,\n+  AARCH64_OPDE_A_SHOULD_FOLLOW_B,\n+  AARCH64_OPDE_EXPECTED_A_AFTER_B,\n   AARCH64_OPDE_SYNTAX_ERROR,\n   AARCH64_OPDE_FATAL_SYNTAX_ERROR,\n   AARCH64_OPDE_INVALID_VARIANT,\n@@ -1290,7 +1304,11 @@ struct aarch64_operand_error\n   enum aarch64_operand_error_kind kind;\n   int index;\n   const char *error;\n-  int data[3];\t/* Some data for extra information.  */\n+  /* Some data for extra information.  */\n+  union {\n+    int i;\n+    const char *s;\n+  } data[3];\n   bool non_fatal;\n };\n "
    },
    {
      "sha": "fdb87b4526f7458be1efd41b8da02ef443b72371",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 23,
      "deletions": 4,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63eff947512b36c770c92d45e4b22cb8a18a39be/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63eff947512b36c770c92d45e4b22cb8a18a39be/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=63eff947512b36c770c92d45e4b22cb8a18a39be",
      "patch": "@@ -3388,10 +3388,29 @@ print_verifier_notes (aarch64_operand_error *detail,\n   assert (detail->non_fatal);\n   assert (detail->error);\n \n-  /* If there are multiple verifier messages, concat them up to 1k.  */\n-  (*info->fprintf_func) (info->stream, \"  // note: %s\", detail->error);\n-  if (detail->index >= 0)\n-     (*info->fprintf_func) (info->stream, \" at operand %d\", detail->index + 1);\n+  (*info->fprintf_func) (info->stream, \"  // note: \");\n+  switch (detail->kind)\n+    {\n+    case AARCH64_OPDE_A_SHOULD_FOLLOW_B:\n+      (*info->fprintf_func) (info->stream,\n+\t\t\t     _(\"this `%s' should have an immediately\"\n+\t\t\t       \" preceding `%s'\"),\n+\t\t\t     detail->data[0].s, detail->data[1].s);\n+      break;\n+\n+    case AARCH64_OPDE_EXPECTED_A_AFTER_B:\n+      (*info->fprintf_func) (info->stream,\n+\t\t\t     _(\"expected `%s' after previous `%s'\"),\n+\t\t\t     detail->data[0].s, detail->data[1].s);\n+      break;\n+\n+    default:\n+      (*info->fprintf_func) (info->stream, \"%s\", detail->error);\n+      if (detail->index >= 0)\n+\t(*info->fprintf_func) (info->stream, \" at operand %d\",\n+\t\t\t       detail->index + 1);\n+      break;\n+    }\n }\n \n /* Print the instruction according to *INST.  */"
    },
    {
      "sha": "49dfe98769a0b90d975ec103c1d5f3b87b279573",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 90,
      "deletions": 5,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63eff947512b36c770c92d45e4b22cb8a18a39be/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63eff947512b36c770c92d45e4b22cb8a18a39be/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=63eff947512b36c770c92d45e4b22cb8a18a39be",
      "patch": "@@ -1351,8 +1351,8 @@ set_out_of_range_error (aarch64_operand_error *mismatch_detail,\n   if (mismatch_detail == NULL)\n     return;\n   set_error (mismatch_detail, AARCH64_OPDE_OUT_OF_RANGE, idx, error);\n-  mismatch_detail->data[0] = lower_bound;\n-  mismatch_detail->data[1] = upper_bound;\n+  mismatch_detail->data[0].i = lower_bound;\n+  mismatch_detail->data[1].i = upper_bound;\n }\n \n static inline void\n@@ -1424,7 +1424,7 @@ set_unaligned_error (aarch64_operand_error *mismatch_detail, int idx,\n   if (mismatch_detail == NULL)\n     return;\n   set_error (mismatch_detail, AARCH64_OPDE_UNALIGNED, idx, NULL);\n-  mismatch_detail->data[0] = alignment;\n+  mismatch_detail->data[0].i = alignment;\n }\n \n static inline void\n@@ -1434,7 +1434,7 @@ set_reg_list_error (aarch64_operand_error *mismatch_detail, int idx,\n   if (mismatch_detail == NULL)\n     return;\n   set_error (mismatch_detail, AARCH64_OPDE_REG_LIST, idx, NULL);\n-  mismatch_detail->data[0] = expected_num;\n+  mismatch_detail->data[0].i = expected_num;\n }\n \n static inline void\n@@ -5480,6 +5480,8 @@ init_insn_sequence (const struct aarch64_inst *inst,\n      best.  */\n   if (inst && inst->opcode->constraints & C_SCAN_MOVPRFX)\n     num_req_entries = 1;\n+  if (inst && (inst->opcode->constraints & C_SCAN_MOPS_PME) == C_SCAN_MOPS_P)\n+    num_req_entries = 2;\n \n   insn_sequence->num_added_insns = 0;\n   insn_sequence->num_allocated_insns = num_req_entries;\n@@ -5491,6 +5493,80 @@ init_insn_sequence (const struct aarch64_inst *inst,\n     }\n }\n \n+/* Subroutine of verify_constraints.  Check whether the instruction\n+   is part of a MOPS P/M/E sequence and, if so, whether sequencing\n+   expectations are met.  Return true if the check passes, otherwise\n+   describe the problem in MISMATCH_DETAIL.\n+\n+   IS_NEW_SECTION is true if INST is assumed to start a new section.\n+   The other arguments are as for verify_constraints.  */\n+\n+static bool\n+verify_mops_pme_sequence (const struct aarch64_inst *inst,\n+\t\t\t  bool is_new_section,\n+\t\t\t  aarch64_operand_error *mismatch_detail,\n+\t\t\t  aarch64_instr_sequence *insn_sequence)\n+{\n+  const struct aarch64_opcode *opcode;\n+  const struct aarch64_inst *prev_insn;\n+  int i;\n+\n+  opcode = inst->opcode;\n+  if (insn_sequence->instr)\n+    prev_insn = insn_sequence->instr + (insn_sequence->num_added_insns - 1);\n+  else\n+    prev_insn = NULL;\n+\n+  if (prev_insn\n+      && (prev_insn->opcode->constraints & C_SCAN_MOPS_PME)\n+      && prev_insn->opcode != opcode - 1)\n+    {\n+      mismatch_detail->kind = AARCH64_OPDE_EXPECTED_A_AFTER_B;\n+      mismatch_detail->index = -1;\n+      mismatch_detail->data[0].s = prev_insn->opcode[1].name;\n+      mismatch_detail->data[1].s = prev_insn->opcode->name;\n+      mismatch_detail->non_fatal = true;\n+      return false;\n+    }\n+\n+  if (opcode->constraints & C_SCAN_MOPS_PME)\n+    {\n+      if (is_new_section || !prev_insn || prev_insn->opcode != opcode - 1)\n+\t{\n+\t  mismatch_detail->kind = AARCH64_OPDE_A_SHOULD_FOLLOW_B;\n+\t  mismatch_detail->index = -1;\n+\t  mismatch_detail->data[0].s = opcode->name;\n+\t  mismatch_detail->data[1].s = opcode[-1].name;\n+\t  mismatch_detail->non_fatal = true;\n+\t  return false;\n+\t}\n+\n+      for (i = 0; i < 3; ++i)\n+\t/* There's no specific requirement for the data register to be\n+\t   the same between consecutive SET* instructions.  */\n+\tif ((opcode->operands[i] == AARCH64_OPND_MOPS_ADDR_Rd\n+\t     || opcode->operands[i] == AARCH64_OPND_MOPS_ADDR_Rs\n+\t     || opcode->operands[i] == AARCH64_OPND_MOPS_WB_Rn)\n+\t    && prev_insn->operands[i].reg.regno != inst->operands[i].reg.regno)\n+\t  {\n+\t    mismatch_detail->kind = AARCH64_OPDE_SYNTAX_ERROR;\n+\t    if (opcode->operands[i] == AARCH64_OPND_MOPS_ADDR_Rd)\n+\t      mismatch_detail->error = _(\"destination register differs from \"\n+\t\t\t\t\t \"preceding instruction\");\n+\t    else if (opcode->operands[i] == AARCH64_OPND_MOPS_ADDR_Rs)\n+\t      mismatch_detail->error = _(\"source register differs from \"\n+\t\t\t\t\t \"preceding instruction\");\n+\t    else\n+\t      mismatch_detail->error = _(\"size register differs from \"\n+\t\t\t\t\t \"preceding instruction\");\n+\t    mismatch_detail->index = i;\n+\t    mismatch_detail->non_fatal = true;\n+\t    return false;\n+\t  }\n+    }\n+\n+  return true;\n+}\n \n /*  This function verifies that the instruction INST adheres to its specified\n     constraints.  If it does then ERR_OK is returned, if not then ERR_VFI is\n@@ -5540,13 +5616,22 @@ verify_constraints (const struct aarch64_inst *inst,\n       return res;\n     }\n \n+  bool is_new_section = (!encoding && pc == 0);\n+  if (!verify_mops_pme_sequence (inst, is_new_section, mismatch_detail,\n+\t\t\t\t insn_sequence))\n+    {\n+      res = ERR_VFI;\n+      if ((opcode->constraints & C_SCAN_MOPS_PME) != C_SCAN_MOPS_M)\n+\tinit_insn_sequence (NULL, insn_sequence);\n+    }\n+\n   /* Verify constraints on an existing sequence.  */\n   if (insn_sequence->instr)\n     {\n       const struct aarch64_opcode* inst_opcode = insn_sequence->instr->opcode;\n       /* If we're decoding and we hit PC=0 with an open sequence then we haven't\n \t closed a previous one that we should have.  */\n-      if (!encoding && pc == 0)\n+      if (is_new_section && res == ERR_OK)\n \t{\n \t  mismatch_detail->kind = AARCH64_OPDE_SYNTAX_ERROR;\n \t  mismatch_detail->error = _(\"previous `movprfx' sequence not closed\");"
    },
    {
      "sha": "51d8532b8f296041b6fa4256ba6ed6806cfffe46",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63eff947512b36c770c92d45e4b22cb8a18a39be/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63eff947512b36c770c92d45e4b22cb8a18a39be/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=63eff947512b36c770c92d45e4b22cb8a18a39be",
      "patch": "@@ -2687,10 +2687,15 @@ static const aarch64_feature_set aarch64_feature_mops_memtag =\n \t     OP3 (MOPS_ADDR_Rd, MOPS_ADDR_Rs, MOPS_WB_Rn), QL_I3SAMEX, \\\n \t     FLAGS, CONSTRAINTS, VERIFIER (three_different_regs))\n \n+/* These instructions must remain consecutive, since we rely on the order\n+   when detecting invalid sequences.  */\n #define MOPS_CPY_OP1_OP2_INSN(NAME, SUFFIX, OPCODE, MASK) \\\n-  MOPS_CPY_OP1_OP2_PME_INSN (NAME \"p\" SUFFIX, OPCODE, MASK, F_SCAN, 0), \\\n-  MOPS_CPY_OP1_OP2_PME_INSN (NAME \"m\" SUFFIX, OPCODE | 0x400000, MASK, 0, 0), \\\n-  MOPS_CPY_OP1_OP2_PME_INSN (NAME \"e\" SUFFIX, OPCODE | 0x800000, MASK, 0, 0)\n+  MOPS_CPY_OP1_OP2_PME_INSN (NAME \"p\" SUFFIX, OPCODE, MASK, F_SCAN, \\\n+\t\t\t     C_SCAN_MOPS_P), \\\n+  MOPS_CPY_OP1_OP2_PME_INSN (NAME \"m\" SUFFIX, OPCODE | 0x400000, MASK, \\\n+\t\t\t     0, C_SCAN_MOPS_M), \\\n+  MOPS_CPY_OP1_OP2_PME_INSN (NAME \"e\" SUFFIX, OPCODE | 0x800000, MASK, \\\n+\t\t\t     0, C_SCAN_MOPS_E)\n \n #define MOPS_CPY_OP1_INSN(NAME, SUFFIX, OPCODE, MASK) \\\n   MOPS_CPY_OP1_OP2_INSN (NAME, SUFFIX, OPCODE, MASK), \\\n@@ -2709,12 +2714,15 @@ static const aarch64_feature_set aarch64_feature_mops_memtag =\n        OP3 (MOPS_ADDR_Rd, MOPS_WB_Rn, Rm), QL_I3SAMEX, FLAGS, \\\n        CONSTRAINTS, VERIFIER (three_different_regs))\n \n+/* These instructions must remain consecutive, since we rely on the order\n+   when detecting invalid sequences.  */\n #define MOPS_SET_OP1_OP2_INSN(NAME, SUFFIX, OPCODE, MASK, ISA) \\\n-  MOPS_SET_OP1_OP2_PME_INSN (NAME \"p\" SUFFIX, OPCODE, MASK, 0, 0, ISA), \\\n+  MOPS_SET_OP1_OP2_PME_INSN (NAME \"p\" SUFFIX, OPCODE, MASK, \\\n+\t\t\t     F_SCAN, C_SCAN_MOPS_P, ISA), \\\n   MOPS_SET_OP1_OP2_PME_INSN (NAME \"m\" SUFFIX, OPCODE | 0x4000, MASK, \\\n-\t\t\t     0, 0, ISA), \\\n+\t\t\t     0, C_SCAN_MOPS_M, ISA), \\\n   MOPS_SET_OP1_OP2_PME_INSN (NAME \"e\" SUFFIX, OPCODE | 0x8000, MASK, \\\n-\t\t\t     0, 0, ISA)\n+\t\t\t     0, C_SCAN_MOPS_E, ISA)\n \n #define MOPS_SET_INSN(NAME, OPCODE, MASK, ISA) \\\n   MOPS_SET_OP1_OP2_INSN (NAME, \"\", OPCODE, MASK, ISA), \\"
    }
  ]
}