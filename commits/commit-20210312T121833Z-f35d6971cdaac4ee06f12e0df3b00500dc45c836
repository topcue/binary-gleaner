{
  "sha": "f35d6971cdaac4ee06f12e0df3b00500dc45c836",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjM1ZDY5NzFjZGFhYzRlZTA2ZjEyZTBkZjNiMDA1MDBkYzQ1YzgzNg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-08T17:02:16Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-12T12:18:33Z"
    },
    "message": "gdb/testsuite: make test names unique in gdb.python/py-finish-breakpoint.exp\n\nMake test names unique by just adding additional text to the test\nnames.  As this is a Python test that repeatedly imports the Python\nscript I've just numbered the test names in this case rather than\ntrying to come up with anything better, hence we have:\n\n  import python scripts, 1\n  import python scripts, 2\n  ...\n  import python scripts, 6\n\nNot great, but hopefully good enough.  Everything else has a slightly\nmore descriptive test name.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-finish-breakpoint.exp: Make test names unique.",
    "tree": {
      "sha": "a6a71facb0011e6bf1e11858d533fbbc6dcd06c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a6a71facb0011e6bf1e11858d533fbbc6dcd06c0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f35d6971cdaac4ee06f12e0df3b00500dc45c836",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f35d6971cdaac4ee06f12e0df3b00500dc45c836",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f35d6971cdaac4ee06f12e0df3b00500dc45c836",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f35d6971cdaac4ee06f12e0df3b00500dc45c836/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "22d3e7f62936a8ccaa528bbb818f16f1f6e39c3b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22d3e7f62936a8ccaa528bbb818f16f1f6e39c3b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/22d3e7f62936a8ccaa528bbb818f16f1f6e39c3b"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 19,
    "deletions": 13
  },
  "files": [
    {
      "sha": "a4ad101369f8a87f3a8a65802782ea29ef0ef5e8",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f35d6971cdaac4ee06f12e0df3b00500dc45c836/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f35d6971cdaac4ee06f12e0df3b00500dc45c836/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f35d6971cdaac4ee06f12e0df3b00500dc45c836",
      "patch": "@@ -1,3 +1,7 @@\n+2021-03-12  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-finish-breakpoint.exp: Make test names unique.\n+\n 2021-03-12  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-strfns.exp: Use with_test_prefix to make test"
    },
    {
      "sha": "456d14b9633549ab55936fb6d26429c465906a5c",
      "filename": "gdb/testsuite/gdb.python/py-finish-breakpoint.exp",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f35d6971cdaac4ee06f12e0df3b00500dc45c836/gdb/testsuite/gdb.python/py-finish-breakpoint.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f35d6971cdaac4ee06f12e0df3b00500dc45c836/gdb/testsuite/gdb.python/py-finish-breakpoint.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-finish-breakpoint.exp?ref=f35d6971cdaac4ee06f12e0df3b00500dc45c836",
      "patch": "@@ -63,7 +63,7 @@ set python_file [gdb_remote_download host \\\n \n gdb_test_no_output \"set confirm off\" \"disable confirmation\"\n gdb_test \"source $python_file\" \"Python script imported.*\" \\\n-         \"import python scripts\"\n+         \"import python scripts, 1\"\n gdb_breakpoint \"increase_1\"\n gdb_test \"continue\" \"Breakpoint .*at.*\" \"continue to the function to finish\"\n \n@@ -101,7 +101,7 @@ clean_restart ${testfile}\n gdb_load_shlib ${lib_sl}\n \n gdb_test \"source $python_file\" \"Python script imported.*\" \\\n-         \"import python scripts\"\n+         \"import python scripts, 2\"\n set cond_line [gdb_get_line_number \"Condition Break.\"]\n \n if ![runto_main] then {\n@@ -116,7 +116,7 @@ gdb_test \"continue\" \"Temporary breakpoint .*in \\\\.?do_nothing.*\" \\\n \n gdb_test \"python finishBP = SimpleFinishBreakpoint(gdb.newest_frame())\" \\\n          \"SimpleFinishBreakpoint init\" \\\n-         \"set finish breakpoint\"\n+         \"set finish breakpoint for no debug symbol test\"\n gdb_test \"continue\" \"SimpleFinishBreakpoint stop.*\" \"check FinishBreakpoint hit\"\n gdb_test \"python print (finishBP.return_value)\" \"None\" \"check return value without debug symbol\"\n \n@@ -128,7 +128,7 @@ clean_restart ${testfile}\n gdb_load_shlib ${lib_sl}\n \n gdb_test \"source $python_file\" \"Python script imported.*\" \\\n-         \"import python scripts\"\n+         \"import python scripts, 3\"\n \n if ![runto call_longjmp_1] then {\n     perror \"couldn't run to breakpoint call_longjmp\"\n@@ -137,7 +137,7 @@ if ![runto call_longjmp_1] then {\n \n gdb_test \"python finishbp = SimpleFinishBreakpoint(gdb.newest_frame())\" \\\n          \"SimpleFinishBreakpoint init\" \\\n-         \"set finish breakpoint\" \n+         \"set finish breakpoint for longjmp test\"\n gdb_test \"break [gdb_get_line_number \"after longjmp.\"]\" \"Breakpoint.* at .*\" \\\n          \"set BP after the jump\"\n gdb_test \"continue\" \"SimpleFinishBreakpoint out of scope.*\" \\\n@@ -154,7 +154,7 @@ clean_restart ${testfile}\n gdb_load_shlib ${lib_sl}\n \n gdb_test \"source $python_file\" \"Python script imported.*\" \\\n-         \"import python scripts\"\n+         \"import python scripts, 4\"\n \n \n if ![runto_main] then {\n@@ -169,7 +169,8 @@ gdb_test \"python TestBreakpoint()\" \"TestBreakpoint init\" \\\n gdb_test \"continue\" \\\n          \"\\\"FinishBreakpoint\\\" cannot be set on a dummy frame.*\" \\\n          \"don't allow FinishBreakpoint on dummy frames\"\n-gdb_test \"print i\" \"8\" \"check stopped location\"\n+gdb_test \"print i\" \"8\" \\\n+    \"check stopped location for stop in dummy frame case\"\n \n #\n # Test FinishBreakpoint in BP condition evaluation \n@@ -180,7 +181,7 @@ clean_restart ${testfile}\n gdb_load_shlib ${lib_sl}\n \n gdb_test \"source $python_file\" \"Python script imported.*\" \\\n-         \"import python scripts\"\n+         \"import python scripts, 5\"\n \n if ![runto_main] then {\n     fail \"cannot run to main.\"\n@@ -197,7 +198,8 @@ gdb_test \"continue\" \\\n \n gdb_test \"continue\" \"Continuing.*\" \"finish condition evaluation\"\n gdb_test \"continue\" \"Breakpoint.*\" \"stop at conditional breakpoint\"\n-gdb_test \"print i\" \"8\" \"check stopped location\"\n+gdb_test \"print i\" \"8\" \\\n+    \"check stopped location for stop in normal frame case\"\n \n #\n # Test FinishBreakpoint in explicit inferior function call\n@@ -207,7 +209,7 @@ clean_restart ${testfile}\n gdb_load_shlib ${lib_sl}\n \n gdb_test \"source $python_file\" \"Python script imported.*\" \\\n-         \"import python scripts\"\n+         \"import python scripts, 6\"\n \n if ![runto_main] then {\n     fail \"cannot run to main.\"\n@@ -217,16 +219,16 @@ if ![runto_main] then {\n # return address in dummy frame\n \n gdb_test \"python TestExplicitBreakpoint('increase_1')\" \"Breakpoint.*at.*\" \\\n-         \"prepare TestExplicitBreakpoint\"\n+         \"prepare TestExplicitBreakpoint, return addr in dummy frame\"\n gdb_test \"print increase_1(&i)\" \\\n          \"\\\"FinishBreakpoint\\\" cannot be set on a dummy frame.*\" \\\n-         \"don't allow FinishBreakpoint on dummy frames\"\n+         \"don't allow FinishBreakpoint on dummy frames, return address in dummy frame\"\n \n # return address in normal frame\n \n delete_breakpoints\n gdb_test \"python TestExplicitBreakpoint(\\\"increase_1\\\")\" \"Breakpoint.*at.*\" \\\n-         \"prepare TestExplicitBreakpoint\"\n+         \"prepare TestExplicitBreakpoint, return addr in normal frame\"\n gdb_test \"print increase(&i)\" \\\n          \"SimpleFinishBreakpoint init.*SimpleFinishBreakpoint stop.*The program being debugged stopped while in a function called from GDB.*\" \\\n          \"FinishBP stop at during explicit function call\""
    }
  ]
}