{
  "sha": "550fd7bf6858cd708c54ec90412ffb653a932c3d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTUwZmQ3YmY2ODU4Y2Q3MDhjNTRlYzkwNDEyZmZiNjUzYTkzMmMzZA==",
  "commit": {
    "author": {
      "name": "Sudi Das",
      "email": "sudi.das@arm.com",
      "date": "2019-01-25T13:57:14Z"
    },
    "committer": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-01-25T14:49:51Z"
    },
    "message": "AArch64: Remove ldgv and stgv instructions from Armv8.5-A Memory Tagging Extension.\n\nThis patch is part of a series of patches to introduce a few changes to the\nArmv8.5-A Memory Tagging Extension. This patch removes the LDGV and STGV\ninstructions. These instructions needed special infrastructure to support\n[base]! style for addressing mode. That is also removed now.\n\nCommitted on behalf of Sudakshina Das.\n\n*** gas/ChangeLog ***\n\n\t* config/tc-aarch64.c (parse_address_main): Remove support for\n\t[base]! address expression.\n\t(parse_operands): Remove support for AARCH64_OPND_ADDR_SIMPLE_2.\n\t(warn_unpredictable_ldst): Remove support for ldstgv_indexed.\n\t* testsuite/gas/aarch64/armv8_5-a-memtag.d: Remove tests for ldgv\n\tand stgv.\n\t* testsuite/gas/aarch64/armv8_5-a-memtag.s: Likewise.\n\t* testsuite/gas/aarch64/illegal-memtag.l: Likewise.\n\t* testsuite/gas/aarch64/illegal-memtag.s: Likewise.\n\n*** include/ChangeLog ***\n\n\t* opcode/aarch64.h (enum aarch64_opnd): Remove\n\tAARCH64_OPND_ADDR_SIMPLE_2.\n\t(enum aarch64_insn_class): Remove ldstgv_indexed.\n\n*** opcodes/ChangeLog ***\n\n\t* aarch64-asm.c (aarch64_ins_addr_simple_2): Remove.\n\t* aarch64-asm.h (ins_addr_simple_2): Likeiwse.\n\t* aarch64-dis.c (aarch64_ext_addr_simple_2): Likewise.\n\t* aarch64-dis.h (ext_addr_simple_2): Likewise.\n\t* aarch64-opc.c (operand_general_constraint_met_p): Remove\n\tcase for ldstgv_indexed.\n\t(aarch64_print_operand): Remove case for AARCH64_OPND_ADDR_SIMPLE_2.\n\t* aarch64-tbl.h (struct aarch64_opcode): Remove ldgv and stgv.\n\t(AARCH64_OPERANDS): Remove ADDR_SIMPLE_2.\n\t* aarch64-asm-2.c: Regenerated.\n\t* aarch64-dis-2.c: Regenerated.\n\t* aarch64-opc-2.c: Regenerated.",
    "tree": {
      "sha": "f840ab8ecfb8f9464264e25430d43551a9101b77",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f840ab8ecfb8f9464264e25430d43551a9101b77"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/550fd7bf6858cd708c54ec90412ffb653a932c3d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/550fd7bf6858cd708c54ec90412ffb653a932c3d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/550fd7bf6858cd708c54ec90412ffb653a932c3d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/550fd7bf6858cd708c54ec90412ffb653a932c3d/comments",
  "author": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "183445093ebd6be285e29f75b877e62a723918c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/183445093ebd6be285e29f75b877e62a723918c6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/183445093ebd6be285e29f75b877e62a723918c6"
    }
  ],
  "stats": {
    "total": 3451,
    "additions": 1681,
    "deletions": 1770
  },
  "files": [
    {
      "sha": "bd62c7553af3379ed5a1d5f0f767f06a0434e7d2",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -1,3 +1,16 @@\n+2019-01-25  Sudakshina Das  <sudi.das@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* config/tc-aarch64.c (parse_address_main): Remove support for\n+\t[base]! address expression.\n+\t(parse_operands): Remove support for AARCH64_OPND_ADDR_SIMPLE_2.\n+\t(warn_unpredictable_ldst): Remove support for ldstgv_indexed.\n+\t* testsuite/gas/aarch64/armv8_5-a-memtag.d: Remove tests for ldgv\n+\tand stgv.\n+\t* testsuite/gas/aarch64/armv8_5-a-memtag.s: Likewise.\n+\t* testsuite/gas/aarch64/illegal-memtag.l: Likewise.\n+\t* testsuite/gas/aarch64/illegal-memtag.s: Likewise.\n+\n 2019-01-25  Wu Heng  <wu.heng@zte.com.cn>\n \n \tPR gas/23940"
    },
    {
      "sha": "537f00ceb271872316c86317153097cecb5dec20",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 3,
      "deletions": 16,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -3381,7 +3381,6 @@ parse_shifter_operand_reloc (char **str, aarch64_opnd_info *operand,\n      [base,Wm,(S|U)XTW {#imm}]\n    Pre-indexed\n      [base,#imm]!\n-     [base]!\t\t\t// in ld/stgv\n    Post-indexed\n      [base],#imm\n      [base],Xm\t\t\t // in SIMD ld/st structure\n@@ -3690,11 +3689,10 @@ parse_address_main (char **str, aarch64_opnd_info *operand,\n     }\n \n   /* If at this point neither .preind nor .postind is set, we have a\n-     bare [Rn]{!}; reject [Rn]! except for ld/stgv but accept [Rn]\n-     as a shorthand for [Rn,#0].  */\n+     bare [Rn]{!}; reject [Rn]! accept [Rn] as a shorthand for [Rn,#0].  */\n   if (operand->addr.preind == 0 && operand->addr.postind == 0)\n     {\n-      if (operand->type != AARCH64_OPND_ADDR_SIMPLE_2 && operand->addr.writeback)\n+      if (operand->addr.writeback)\n \t{\n \t  /* Reject [Rn]!   */\n \t  set_syntax_error (_(\"missing offset in the pre-indexed address\"));\n@@ -6148,7 +6146,6 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t  break;\n \n \tcase AARCH64_OPND_ADDR_SIMPLE:\n-\tcase AARCH64_OPND_ADDR_SIMPLE_2:\n \tcase AARCH64_OPND_SIMD_ADDR_SIMPLE:\n \t  {\n \t    /* [<Xn|SP>{, #<simm>}]  */\n@@ -6158,8 +6155,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t    po_misc_or_fail (parse_address (&str, info));\n \t    if (info->addr.pcrel || info->addr.offset.is_reg\n \t\t|| !info->addr.preind || info->addr.postind\n-\t\t|| (info->addr.writeback\n-\t\t   && operands[i] != AARCH64_OPND_ADDR_SIMPLE_2))\n+\t\t|| info->addr.writeback)\n \t      {\n \t\tset_syntax_error (_(\"invalid addressing mode\"));\n \t\tgoto failure;\n@@ -6182,8 +6178,6 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t\t  }\n \t      }\n \t    po_char_or_fail (']');\n-\t    if (operands[i] == AARCH64_OPND_ADDR_SIMPLE_2)\n-\t      po_char_or_fail ('!');\n \t    break;\n \t  }\n \n@@ -6782,13 +6776,6 @@ warn_unpredictable_ldst (aarch64_instruction *instr, char *str)\n \tas_warn (_(\"unpredictable transfer with writeback -- `%s'\"), str);\n       break;\n \n-    case ldstgv_indexed:\n-      /* Load operations must load different registers.  */\n-      if ((opcode->opcode & (1 << 22))\n-\t  && opnds[0].reg.regno == opnds[1].addr.base_regno)\n-\t    as_warn (_(\"unpredictable load of register -- `%s'\"), str);\n-      break;\n-\n     case ldstpair_off:\n     case ldstnapair_offs:\n     case ldstpair_indexed:"
    },
    {
      "sha": "363bbe2eb3b1da373737c7d6efce9eba3b6bb6a1",
      "filename": "gas/testsuite/gas/aarch64/armv8_5-a-memtag.d",
      "status": "modified",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/testsuite/gas/aarch64/armv8_5-a-memtag.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/testsuite/gas/aarch64/armv8_5-a-memtag.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/armv8_5-a-memtag.d?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -121,14 +121,3 @@ Disassembly of section \\.text:\n .*:\td960001f \tldg\txzr, \\[x0\\]\n .*:\td96ff000 \tldg\tx0, \\[x0, #4080\\]\n .*:\td9700000 \tldg\tx0, \\[x0, #-4096\\]\n-.*:\td9e0001b \tldgv\tx27, \\[x0\\]!\n-.*:\td9e00360 \tldgv\tx0, \\[x27\\]!\n-.*:\td9e00379 \tldgv\tx25, \\[x27\\]!\n-.*:\td9e003e0 \tldgv\tx0, \\[sp\\]!\n-.*:\td9e0001f \tldgv\txzr, \\[x0\\]!\n-.*:\td9a00000 \tstgv\tx0, \\[x0\\]!\n-.*:\td9a0001b \tstgv\tx27, \\[x0\\]!\n-.*:\td9a00360 \tstgv\tx0, \\[x27\\]!\n-.*:\td9a00379 \tstgv\tx25, \\[x27\\]!\n-.*:\td9a003e0 \tstgv\tx0, \\[sp\\]!\n-.*:\td9a0001f \tstgv\txzr, \\[x0\\]!"
    },
    {
      "sha": "62c9436d78fea63a8ac45126c5f85416a1487822",
      "filename": "gas/testsuite/gas/aarch64/armv8_5-a-memtag.s",
      "status": "modified",
      "additions": 0,
      "deletions": 13,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/testsuite/gas/aarch64/armv8_5-a-memtag.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/testsuite/gas/aarch64/armv8_5-a-memtag.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/armv8_5-a-memtag.s?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -30,14 +30,6 @@ func:\n \t\\op [sp], #-4096\n \t.endm\n \n-\t.macro expand_ldg_bulk op\n-\t\\op x27, [x0]!\n-\t\\op x0, [x27]!\n-\t\\op x25, [x27]!\n-\t\\op x0, [sp]!\n-\t\\op xzr, [x0]!\n-\t.endm\n-\n \t# IRG\n \texpand_3_reg irg\n \tirg sp, x0\n@@ -106,8 +98,3 @@ func:\n \tldg xzr, [x0, #0]\n \tldg x0, [x0, #4080]\n \tldg x0, [x0, #-4096]\n-\n-\texpand_ldg_bulk ldgv\n-\n-\tstgv x0, [x0]!\n-\texpand_ldg_bulk stgv"
    },
    {
      "sha": "dfdf00aba1ea3e21c29ca602de30336b3f00859b",
      "filename": "gas/testsuite/gas/aarch64/illegal-memtag.l",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/testsuite/gas/aarch64/illegal-memtag.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/testsuite/gas/aarch64/illegal-memtag.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/illegal-memtag.l?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -12,9 +12,6 @@\n [^:]*:[0-9]+: Error: immediate offset out of range -1024 to 1008 at operand 3 -- `stgp x1,x2,\\[x3,#1009\\]'\n [^:]*:[0-9]+: Error: immediate value must be a multiple of 16 at operand 3 -- `stgp x1,x2,\\[x3,#33\\]'\n [^:]*:[0-9]+: Error: immediate offset out of range -1024 to 1008 at operand 3 -- `stgp x1,x2,\\[x3,#-1025\\]'\n-[^:]*:[0-9]+: Warning: unpredictable load of register -- `ldgv x1,\\[x1\\]!'\n-[^:]*:[0-9]+: Error: operand 2 must be a writeback address with base register \\(no offset\\) -- `ldgv x1,\\[x2\\]'\n-[^:]*:[0-9]+: Error: operand 2 must be a writeback address with base register \\(no offset\\) -- `stgv x1,\\[x2\\]'\n [^:]*:[0-9]+: Error: operand 1 must be an integer or stack pointer register -- `irg xzr,x2,x3'\n [^:]*:[0-9]+: Error: operand 2 must be an integer or stack pointer register -- `irg x1,xzr,x3'\n [^:]*:[0-9]+: Error: operand 3 must be an integer register -- `irg x1,x2,sp'\n@@ -40,7 +37,3 @@\n [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 3 -- `stgp x0,x0,\\[xzr\\]'\n [^:]*:[0-9]+: Error: operand 1 must be an integer register -- `ldg sp,\\[x0,#16\\]'\n [^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `ldg x0,\\[xzr,#16\\]'\n-[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `ldgv sp,\\[x1\\]!'\n-[^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `ldgv x0,\\[xzr\\]!'\n-[^:]*:[0-9]+: Error: operand 1 must be an integer register -- `stgv sp,\\[x1\\]!'\n-[^:]*:[0-9]+: Error: 64-bit integer or SP register expected at operand 2 -- `stgv x0,\\[xzr\\]!'"
    },
    {
      "sha": "35d1b12870bee105ede52d86b392afc68c8190d0",
      "filename": "gas/testsuite/gas/aarch64/illegal-memtag.s",
      "status": "modified",
      "additions": 0,
      "deletions": 12,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/testsuite/gas/aarch64/illegal-memtag.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/gas/testsuite/gas/aarch64/illegal-memtag.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/illegal-memtag.s?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -20,14 +20,6 @@ func:\n \tstgp x1, x2, [x3, #33]\n \tstgp x1, x2, [x3, #-1025]\n \n-\t# LDGV : Warn for Xt == Xn\n-\t# STGV : Sould not warn for above\n-\tldgv x1, [x1]!\n-\tstgv x1, [x1]!\n-\t# Error for no writeback\n-\tldgv x1, [x2]\n-\tstgv x1, [x2]\n-\n \t# Illegal SP/XZR registers\n \tirg xzr, x2, x3\n \tirg x1, xzr, x3\n@@ -54,7 +46,3 @@ func:\n \tstgp x0, x0, [xzr]\n \tldg sp, [x0, #16]\n \tldg x0, [xzr, #16]\n-\tldgv sp, [x1]!\n-\tldgv x0, [xzr]!\n-\tstgv sp, [x1]!\n-\tstgv x0, [xzr]!"
    },
    {
      "sha": "c14276b0d12ff98b7163590a2bbd6552f45b5401",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -1,3 +1,10 @@\n+2019-01-25  Sudakshina Das  <sudi.das@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* opcode/aarch64.h (enum aarch64_opnd): Remove\n+\tAARCH64_OPND_ADDR_SIMPLE_2.\n+\t(enum aarch64_insn_class): Remove ldstgv_indexed.\n+\n 2019-01-22  Tom Tromey  <tom@tromey.com>\n \n \t* coff/ecoff.h: Include coff/sym.h."
    },
    {
      "sha": "0c0234ab20925dbfe2e008387268bb0b335fe049",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -275,7 +275,6 @@ enum aarch64_opnd\n   AARCH64_OPND_ADDR_PCREL26,\t/* 26-bit PC-relative address for e.g. BL.  */\n \n   AARCH64_OPND_ADDR_SIMPLE,\t/* Address of ld/st exclusive.  */\n-  AARCH64_OPND_ADDR_SIMPLE_2,\t/* Address of ld/stgv.  */\n   AARCH64_OPND_ADDR_REGOFF,\t/* Address of register offset.  */\n   AARCH64_OPND_ADDR_SIMM7,\t/* Address of signed 7-bit immediate.  */\n   AARCH64_OPND_ADDR_SIMM9,\t/* Address of signed 9-bit immediate.  */\n@@ -562,7 +561,6 @@ enum aarch64_insn_class\n   ldstnapair_offs,\n   ldstpair_off,\n   ldstpair_indexed,\n-  ldstgv_indexed,\n   loadlit,\n   log_imm,\n   log_shift,"
    },
    {
      "sha": "23a0d7fd291029737bd554d829363ca32e776bd0",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -1,3 +1,19 @@\n+2019-01-25  Sudakshina Das  <sudi.das@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\n+\t* aarch64-asm.c (aarch64_ins_addr_simple_2): Remove.\n+\t* aarch64-asm.h (ins_addr_simple_2): Likeiwse.\n+\t* aarch64-dis.c (aarch64_ext_addr_simple_2): Likewise.\n+\t* aarch64-dis.h (ext_addr_simple_2): Likewise.\n+\t* aarch64-opc.c (operand_general_constraint_met_p): Remove\n+\tcase for ldstgv_indexed.\n+\t(aarch64_print_operand): Remove case for AARCH64_OPND_ADDR_SIMPLE_2.\n+\t* aarch64-tbl.h (struct aarch64_opcode): Remove ldgv and stgv.\n+\t(AARCH64_OPERANDS): Remove ADDR_SIMPLE_2.\n+\t* aarch64-asm-2.c: Regenerated.\n+\t* aarch64-dis-2.c: Regenerated.\n+\t* aarch64-opc-2.c: Regenerated.\n+\n 2019-01-23  Nick Clifton  <nickc@redhat.com>\n \n \t* po/pt_BR.po: Updated Brazilian Portuguese translation."
    },
    {
      "sha": "dad36a31017c8ed9abd6915b810be469d03c1320",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 346,
      "deletions": 348,
      "changes": 694,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -201,390 +201,390 @@ aarch64_find_real_opcode (const aarch64_opcode *opcode)\n     case 757:\t/* extr */\n       value = 757;\t/* --> extr.  */\n       break;\n-    case 990:\t/* bic */\n-    case 989:\t/* and */\n-      value = 989;\t/* --> and.  */\n-      break;\n-    case 992:\t/* mov */\n-    case 991:\t/* orr */\n-      value = 991;\t/* --> orr.  */\n-      break;\n-    case 995:\t/* tst */\n-    case 994:\t/* ands */\n-      value = 994;\t/* --> ands.  */\n-      break;\n-    case 1000:\t/* uxtw */\n-    case 999:\t/* mov */\n-    case 998:\t/* orr */\n-      value = 998;\t/* --> orr.  */\n+    case 988:\t/* bic */\n+    case 987:\t/* and */\n+      value = 987;\t/* --> and.  */\n+      break;\n+    case 990:\t/* mov */\n+    case 989:\t/* orr */\n+      value = 989;\t/* --> orr.  */\n+      break;\n+    case 993:\t/* tst */\n+    case 992:\t/* ands */\n+      value = 992;\t/* --> ands.  */\n+      break;\n+    case 998:\t/* uxtw */\n+    case 997:\t/* mov */\n+    case 996:\t/* orr */\n+      value = 996;\t/* --> orr.  */\n       break;\n-    case 1002:\t/* mvn */\n-    case 1001:\t/* orn */\n-      value = 1001;\t/* --> orn.  */\n+    case 1000:\t/* mvn */\n+    case 999:\t/* orn */\n+      value = 999;\t/* --> orn.  */\n       break;\n-    case 1006:\t/* tst */\n-    case 1005:\t/* ands */\n-      value = 1005;\t/* --> ands.  */\n+    case 1004:\t/* tst */\n+    case 1003:\t/* ands */\n+      value = 1003;\t/* --> ands.  */\n       break;\n-    case 1132:\t/* staddb */\n-    case 1036:\t/* ldaddb */\n-      value = 1036;\t/* --> ldaddb.  */\n+    case 1130:\t/* staddb */\n+    case 1034:\t/* ldaddb */\n+      value = 1034;\t/* --> ldaddb.  */\n       break;\n-    case 1133:\t/* staddh */\n-    case 1037:\t/* ldaddh */\n-      value = 1037;\t/* --> ldaddh.  */\n+    case 1131:\t/* staddh */\n+    case 1035:\t/* ldaddh */\n+      value = 1035;\t/* --> ldaddh.  */\n       break;\n-    case 1134:\t/* stadd */\n-    case 1038:\t/* ldadd */\n-      value = 1038;\t/* --> ldadd.  */\n+    case 1132:\t/* stadd */\n+    case 1036:\t/* ldadd */\n+      value = 1036;\t/* --> ldadd.  */\n       break;\n-    case 1135:\t/* staddlb */\n-    case 1040:\t/* ldaddlb */\n-      value = 1040;\t/* --> ldaddlb.  */\n+    case 1133:\t/* staddlb */\n+    case 1038:\t/* ldaddlb */\n+      value = 1038;\t/* --> ldaddlb.  */\n       break;\n-    case 1136:\t/* staddlh */\n-    case 1043:\t/* ldaddlh */\n-      value = 1043;\t/* --> ldaddlh.  */\n+    case 1134:\t/* staddlh */\n+    case 1041:\t/* ldaddlh */\n+      value = 1041;\t/* --> ldaddlh.  */\n       break;\n-    case 1137:\t/* staddl */\n-    case 1046:\t/* ldaddl */\n-      value = 1046;\t/* --> ldaddl.  */\n+    case 1135:\t/* staddl */\n+    case 1044:\t/* ldaddl */\n+      value = 1044;\t/* --> ldaddl.  */\n       break;\n-    case 1138:\t/* stclrb */\n-    case 1048:\t/* ldclrb */\n-      value = 1048;\t/* --> ldclrb.  */\n+    case 1136:\t/* stclrb */\n+    case 1046:\t/* ldclrb */\n+      value = 1046;\t/* --> ldclrb.  */\n       break;\n-    case 1139:\t/* stclrh */\n-    case 1049:\t/* ldclrh */\n-      value = 1049;\t/* --> ldclrh.  */\n+    case 1137:\t/* stclrh */\n+    case 1047:\t/* ldclrh */\n+      value = 1047;\t/* --> ldclrh.  */\n       break;\n-    case 1140:\t/* stclr */\n-    case 1050:\t/* ldclr */\n-      value = 1050;\t/* --> ldclr.  */\n+    case 1138:\t/* stclr */\n+    case 1048:\t/* ldclr */\n+      value = 1048;\t/* --> ldclr.  */\n       break;\n-    case 1141:\t/* stclrlb */\n-    case 1052:\t/* ldclrlb */\n-      value = 1052;\t/* --> ldclrlb.  */\n+    case 1139:\t/* stclrlb */\n+    case 1050:\t/* ldclrlb */\n+      value = 1050;\t/* --> ldclrlb.  */\n       break;\n-    case 1142:\t/* stclrlh */\n-    case 1055:\t/* ldclrlh */\n-      value = 1055;\t/* --> ldclrlh.  */\n+    case 1140:\t/* stclrlh */\n+    case 1053:\t/* ldclrlh */\n+      value = 1053;\t/* --> ldclrlh.  */\n       break;\n-    case 1143:\t/* stclrl */\n-    case 1058:\t/* ldclrl */\n-      value = 1058;\t/* --> ldclrl.  */\n+    case 1141:\t/* stclrl */\n+    case 1056:\t/* ldclrl */\n+      value = 1056;\t/* --> ldclrl.  */\n       break;\n-    case 1144:\t/* steorb */\n-    case 1060:\t/* ldeorb */\n-      value = 1060;\t/* --> ldeorb.  */\n+    case 1142:\t/* steorb */\n+    case 1058:\t/* ldeorb */\n+      value = 1058;\t/* --> ldeorb.  */\n       break;\n-    case 1145:\t/* steorh */\n-    case 1061:\t/* ldeorh */\n-      value = 1061;\t/* --> ldeorh.  */\n+    case 1143:\t/* steorh */\n+    case 1059:\t/* ldeorh */\n+      value = 1059;\t/* --> ldeorh.  */\n       break;\n-    case 1146:\t/* steor */\n-    case 1062:\t/* ldeor */\n-      value = 1062;\t/* --> ldeor.  */\n+    case 1144:\t/* steor */\n+    case 1060:\t/* ldeor */\n+      value = 1060;\t/* --> ldeor.  */\n       break;\n-    case 1147:\t/* steorlb */\n-    case 1064:\t/* ldeorlb */\n-      value = 1064;\t/* --> ldeorlb.  */\n+    case 1145:\t/* steorlb */\n+    case 1062:\t/* ldeorlb */\n+      value = 1062;\t/* --> ldeorlb.  */\n       break;\n-    case 1148:\t/* steorlh */\n-    case 1067:\t/* ldeorlh */\n-      value = 1067;\t/* --> ldeorlh.  */\n+    case 1146:\t/* steorlh */\n+    case 1065:\t/* ldeorlh */\n+      value = 1065;\t/* --> ldeorlh.  */\n       break;\n-    case 1149:\t/* steorl */\n-    case 1070:\t/* ldeorl */\n-      value = 1070;\t/* --> ldeorl.  */\n+    case 1147:\t/* steorl */\n+    case 1068:\t/* ldeorl */\n+      value = 1068;\t/* --> ldeorl.  */\n       break;\n-    case 1150:\t/* stsetb */\n-    case 1072:\t/* ldsetb */\n-      value = 1072;\t/* --> ldsetb.  */\n+    case 1148:\t/* stsetb */\n+    case 1070:\t/* ldsetb */\n+      value = 1070;\t/* --> ldsetb.  */\n       break;\n-    case 1151:\t/* stseth */\n-    case 1073:\t/* ldseth */\n-      value = 1073;\t/* --> ldseth.  */\n+    case 1149:\t/* stseth */\n+    case 1071:\t/* ldseth */\n+      value = 1071;\t/* --> ldseth.  */\n       break;\n-    case 1152:\t/* stset */\n-    case 1074:\t/* ldset */\n-      value = 1074;\t/* --> ldset.  */\n+    case 1150:\t/* stset */\n+    case 1072:\t/* ldset */\n+      value = 1072;\t/* --> ldset.  */\n       break;\n-    case 1153:\t/* stsetlb */\n-    case 1076:\t/* ldsetlb */\n-      value = 1076;\t/* --> ldsetlb.  */\n+    case 1151:\t/* stsetlb */\n+    case 1074:\t/* ldsetlb */\n+      value = 1074;\t/* --> ldsetlb.  */\n       break;\n-    case 1154:\t/* stsetlh */\n-    case 1079:\t/* ldsetlh */\n-      value = 1079;\t/* --> ldsetlh.  */\n+    case 1152:\t/* stsetlh */\n+    case 1077:\t/* ldsetlh */\n+      value = 1077;\t/* --> ldsetlh.  */\n       break;\n-    case 1155:\t/* stsetl */\n-    case 1082:\t/* ldsetl */\n-      value = 1082;\t/* --> ldsetl.  */\n+    case 1153:\t/* stsetl */\n+    case 1080:\t/* ldsetl */\n+      value = 1080;\t/* --> ldsetl.  */\n       break;\n-    case 1156:\t/* stsmaxb */\n-    case 1084:\t/* ldsmaxb */\n-      value = 1084;\t/* --> ldsmaxb.  */\n+    case 1154:\t/* stsmaxb */\n+    case 1082:\t/* ldsmaxb */\n+      value = 1082;\t/* --> ldsmaxb.  */\n       break;\n-    case 1157:\t/* stsmaxh */\n-    case 1085:\t/* ldsmaxh */\n-      value = 1085;\t/* --> ldsmaxh.  */\n+    case 1155:\t/* stsmaxh */\n+    case 1083:\t/* ldsmaxh */\n+      value = 1083;\t/* --> ldsmaxh.  */\n       break;\n-    case 1158:\t/* stsmax */\n-    case 1086:\t/* ldsmax */\n-      value = 1086;\t/* --> ldsmax.  */\n+    case 1156:\t/* stsmax */\n+    case 1084:\t/* ldsmax */\n+      value = 1084;\t/* --> ldsmax.  */\n       break;\n-    case 1159:\t/* stsmaxlb */\n-    case 1088:\t/* ldsmaxlb */\n-      value = 1088;\t/* --> ldsmaxlb.  */\n+    case 1157:\t/* stsmaxlb */\n+    case 1086:\t/* ldsmaxlb */\n+      value = 1086;\t/* --> ldsmaxlb.  */\n       break;\n-    case 1160:\t/* stsmaxlh */\n-    case 1091:\t/* ldsmaxlh */\n-      value = 1091;\t/* --> ldsmaxlh.  */\n+    case 1158:\t/* stsmaxlh */\n+    case 1089:\t/* ldsmaxlh */\n+      value = 1089;\t/* --> ldsmaxlh.  */\n       break;\n-    case 1161:\t/* stsmaxl */\n-    case 1094:\t/* ldsmaxl */\n-      value = 1094;\t/* --> ldsmaxl.  */\n+    case 1159:\t/* stsmaxl */\n+    case 1092:\t/* ldsmaxl */\n+      value = 1092;\t/* --> ldsmaxl.  */\n       break;\n-    case 1162:\t/* stsminb */\n-    case 1096:\t/* ldsminb */\n-      value = 1096;\t/* --> ldsminb.  */\n+    case 1160:\t/* stsminb */\n+    case 1094:\t/* ldsminb */\n+      value = 1094;\t/* --> ldsminb.  */\n       break;\n-    case 1163:\t/* stsminh */\n-    case 1097:\t/* ldsminh */\n-      value = 1097;\t/* --> ldsminh.  */\n+    case 1161:\t/* stsminh */\n+    case 1095:\t/* ldsminh */\n+      value = 1095;\t/* --> ldsminh.  */\n       break;\n-    case 1164:\t/* stsmin */\n-    case 1098:\t/* ldsmin */\n-      value = 1098;\t/* --> ldsmin.  */\n+    case 1162:\t/* stsmin */\n+    case 1096:\t/* ldsmin */\n+      value = 1096;\t/* --> ldsmin.  */\n       break;\n-    case 1165:\t/* stsminlb */\n-    case 1100:\t/* ldsminlb */\n-      value = 1100;\t/* --> ldsminlb.  */\n+    case 1163:\t/* stsminlb */\n+    case 1098:\t/* ldsminlb */\n+      value = 1098;\t/* --> ldsminlb.  */\n       break;\n-    case 1166:\t/* stsminlh */\n-    case 1103:\t/* ldsminlh */\n-      value = 1103;\t/* --> ldsminlh.  */\n+    case 1164:\t/* stsminlh */\n+    case 1101:\t/* ldsminlh */\n+      value = 1101;\t/* --> ldsminlh.  */\n       break;\n-    case 1167:\t/* stsminl */\n-    case 1106:\t/* ldsminl */\n-      value = 1106;\t/* --> ldsminl.  */\n+    case 1165:\t/* stsminl */\n+    case 1104:\t/* ldsminl */\n+      value = 1104;\t/* --> ldsminl.  */\n       break;\n-    case 1168:\t/* stumaxb */\n-    case 1108:\t/* ldumaxb */\n-      value = 1108;\t/* --> ldumaxb.  */\n+    case 1166:\t/* stumaxb */\n+    case 1106:\t/* ldumaxb */\n+      value = 1106;\t/* --> ldumaxb.  */\n       break;\n-    case 1169:\t/* stumaxh */\n-    case 1109:\t/* ldumaxh */\n-      value = 1109;\t/* --> ldumaxh.  */\n+    case 1167:\t/* stumaxh */\n+    case 1107:\t/* ldumaxh */\n+      value = 1107;\t/* --> ldumaxh.  */\n       break;\n-    case 1170:\t/* stumax */\n-    case 1110:\t/* ldumax */\n-      value = 1110;\t/* --> ldumax.  */\n+    case 1168:\t/* stumax */\n+    case 1108:\t/* ldumax */\n+      value = 1108;\t/* --> ldumax.  */\n       break;\n-    case 1171:\t/* stumaxlb */\n-    case 1112:\t/* ldumaxlb */\n-      value = 1112;\t/* --> ldumaxlb.  */\n+    case 1169:\t/* stumaxlb */\n+    case 1110:\t/* ldumaxlb */\n+      value = 1110;\t/* --> ldumaxlb.  */\n       break;\n-    case 1172:\t/* stumaxlh */\n-    case 1115:\t/* ldumaxlh */\n-      value = 1115;\t/* --> ldumaxlh.  */\n+    case 1170:\t/* stumaxlh */\n+    case 1113:\t/* ldumaxlh */\n+      value = 1113;\t/* --> ldumaxlh.  */\n       break;\n-    case 1173:\t/* stumaxl */\n-    case 1118:\t/* ldumaxl */\n-      value = 1118;\t/* --> ldumaxl.  */\n+    case 1171:\t/* stumaxl */\n+    case 1116:\t/* ldumaxl */\n+      value = 1116;\t/* --> ldumaxl.  */\n       break;\n-    case 1174:\t/* stuminb */\n-    case 1120:\t/* lduminb */\n-      value = 1120;\t/* --> lduminb.  */\n+    case 1172:\t/* stuminb */\n+    case 1118:\t/* lduminb */\n+      value = 1118;\t/* --> lduminb.  */\n       break;\n-    case 1175:\t/* stuminh */\n-    case 1121:\t/* lduminh */\n-      value = 1121;\t/* --> lduminh.  */\n+    case 1173:\t/* stuminh */\n+    case 1119:\t/* lduminh */\n+      value = 1119;\t/* --> lduminh.  */\n       break;\n-    case 1176:\t/* stumin */\n-    case 1122:\t/* ldumin */\n-      value = 1122;\t/* --> ldumin.  */\n+    case 1174:\t/* stumin */\n+    case 1120:\t/* ldumin */\n+      value = 1120;\t/* --> ldumin.  */\n       break;\n-    case 1177:\t/* stuminlb */\n-    case 1124:\t/* lduminlb */\n-      value = 1124;\t/* --> lduminlb.  */\n+    case 1175:\t/* stuminlb */\n+    case 1122:\t/* lduminlb */\n+      value = 1122;\t/* --> lduminlb.  */\n       break;\n-    case 1178:\t/* stuminlh */\n-    case 1127:\t/* lduminlh */\n-      value = 1127;\t/* --> lduminlh.  */\n+    case 1176:\t/* stuminlh */\n+    case 1125:\t/* lduminlh */\n+      value = 1125;\t/* --> lduminlh.  */\n       break;\n-    case 1179:\t/* stuminl */\n-    case 1130:\t/* lduminl */\n-      value = 1130;\t/* --> lduminl.  */\n+    case 1177:\t/* stuminl */\n+    case 1128:\t/* lduminl */\n+      value = 1128;\t/* --> lduminl.  */\n+      break;\n+    case 1179:\t/* mov */\n+    case 1178:\t/* movn */\n+      value = 1178;\t/* --> movn.  */\n       break;\n     case 1181:\t/* mov */\n-    case 1180:\t/* movn */\n-      value = 1180;\t/* --> movn.  */\n-      break;\n-    case 1183:\t/* mov */\n-    case 1182:\t/* movz */\n-      value = 1182;\t/* --> movz.  */\n-      break;\n-    case 1229:\t/* autibsp */\n-    case 1228:\t/* autibz */\n-    case 1227:\t/* autiasp */\n-    case 1226:\t/* autiaz */\n-    case 1225:\t/* pacibsp */\n-    case 1224:\t/* pacibz */\n-    case 1223:\t/* paciasp */\n-    case 1222:\t/* paciaz */\n-    case 1203:\t/* psb */\n-    case 1202:\t/* esb */\n-    case 1201:\t/* autib1716 */\n-    case 1200:\t/* autia1716 */\n-    case 1199:\t/* pacib1716 */\n-    case 1198:\t/* pacia1716 */\n-    case 1197:\t/* xpaclri */\n-    case 1196:\t/* sevl */\n-    case 1195:\t/* sev */\n-    case 1194:\t/* wfi */\n-    case 1193:\t/* wfe */\n-    case 1192:\t/* yield */\n-    case 1191:\t/* bti */\n-    case 1190:\t/* csdb */\n-    case 1189:\t/* nop */\n-    case 1188:\t/* hint */\n-      value = 1188;\t/* --> hint.  */\n-      break;\n-    case 1207:\t/* pssbb */\n-    case 1206:\t/* ssbb */\n-    case 1205:\t/* dsb */\n-      value = 1205;\t/* --> dsb.  */\n-      break;\n-    case 1218:\t/* cpp */\n-    case 1217:\t/* dvp */\n-    case 1216:\t/* cfp */\n-    case 1215:\t/* tlbi */\n-    case 1214:\t/* ic */\n-    case 1213:\t/* dc */\n-    case 1212:\t/* at */\n-    case 1211:\t/* sys */\n-      value = 1211;\t/* --> sys.  */\n-      break;\n-    case 2027:\t/* bic */\n+    case 1180:\t/* movz */\n+      value = 1180;\t/* --> movz.  */\n+      break;\n+    case 1227:\t/* autibsp */\n+    case 1226:\t/* autibz */\n+    case 1225:\t/* autiasp */\n+    case 1224:\t/* autiaz */\n+    case 1223:\t/* pacibsp */\n+    case 1222:\t/* pacibz */\n+    case 1221:\t/* paciasp */\n+    case 1220:\t/* paciaz */\n+    case 1201:\t/* psb */\n+    case 1200:\t/* esb */\n+    case 1199:\t/* autib1716 */\n+    case 1198:\t/* autia1716 */\n+    case 1197:\t/* pacib1716 */\n+    case 1196:\t/* pacia1716 */\n+    case 1195:\t/* xpaclri */\n+    case 1194:\t/* sevl */\n+    case 1193:\t/* sev */\n+    case 1192:\t/* wfi */\n+    case 1191:\t/* wfe */\n+    case 1190:\t/* yield */\n+    case 1189:\t/* bti */\n+    case 1188:\t/* csdb */\n+    case 1187:\t/* nop */\n+    case 1186:\t/* hint */\n+      value = 1186;\t/* --> hint.  */\n+      break;\n+    case 1205:\t/* pssbb */\n+    case 1204:\t/* ssbb */\n+    case 1203:\t/* dsb */\n+      value = 1203;\t/* --> dsb.  */\n+      break;\n+    case 1216:\t/* cpp */\n+    case 1215:\t/* dvp */\n+    case 1214:\t/* cfp */\n+    case 1213:\t/* tlbi */\n+    case 1212:\t/* ic */\n+    case 1211:\t/* dc */\n+    case 1210:\t/* at */\n+    case 1209:\t/* sys */\n+      value = 1209;\t/* --> sys.  */\n+      break;\n+    case 2025:\t/* bic */\n+    case 1275:\t/* and */\n+      value = 1275;\t/* --> and.  */\n+      break;\n+    case 1258:\t/* mov */\n     case 1277:\t/* and */\n       value = 1277;\t/* --> and.  */\n       break;\n-    case 1260:\t/* mov */\n-    case 1279:\t/* and */\n-      value = 1279;\t/* --> and.  */\n+    case 1262:\t/* movs */\n+    case 1278:\t/* ands */\n+      value = 1278;\t/* --> ands.  */\n       break;\n-    case 1264:\t/* movs */\n-    case 1280:\t/* ands */\n-      value = 1280;\t/* --> ands.  */\n+    case 2026:\t/* cmple */\n+    case 1313:\t/* cmpge */\n+      value = 1313;\t/* --> cmpge.  */\n       break;\n-    case 2028:\t/* cmple */\n-    case 1315:\t/* cmpge */\n-      value = 1315;\t/* --> cmpge.  */\n+    case 2029:\t/* cmplt */\n+    case 1316:\t/* cmpgt */\n+      value = 1316;\t/* --> cmpgt.  */\n       break;\n-    case 2031:\t/* cmplt */\n-    case 1318:\t/* cmpgt */\n-      value = 1318;\t/* --> cmpgt.  */\n+    case 2027:\t/* cmplo */\n+    case 1318:\t/* cmphi */\n+      value = 1318;\t/* --> cmphi.  */\n       break;\n-    case 2029:\t/* cmplo */\n-    case 1320:\t/* cmphi */\n-      value = 1320;\t/* --> cmphi.  */\n+    case 2028:\t/* cmpls */\n+    case 1321:\t/* cmphs */\n+      value = 1321;\t/* --> cmphs.  */\n       break;\n-    case 2030:\t/* cmpls */\n-    case 1323:\t/* cmphs */\n-      value = 1323;\t/* --> cmphs.  */\n+    case 1255:\t/* mov */\n+    case 1343:\t/* cpy */\n+      value = 1343;\t/* --> cpy.  */\n       break;\n     case 1257:\t/* mov */\n+    case 1344:\t/* cpy */\n+      value = 1344;\t/* --> cpy.  */\n+      break;\n+    case 2036:\t/* fmov */\n+    case 1260:\t/* mov */\n     case 1345:\t/* cpy */\n       value = 1345;\t/* --> cpy.  */\n       break;\n-    case 1259:\t/* mov */\n-    case 1346:\t/* cpy */\n-      value = 1346;\t/* --> cpy.  */\n-      break;\n-    case 2038:\t/* fmov */\n-    case 1262:\t/* mov */\n-    case 1347:\t/* cpy */\n-      value = 1347;\t/* --> cpy.  */\n+    case 1250:\t/* mov */\n+    case 1357:\t/* dup */\n+      value = 1357;\t/* --> dup.  */\n       break;\n     case 1252:\t/* mov */\n-    case 1359:\t/* dup */\n-      value = 1359;\t/* --> dup.  */\n+    case 1249:\t/* mov */\n+    case 1358:\t/* dup */\n+      value = 1358;\t/* --> dup.  */\n       break;\n+    case 2035:\t/* fmov */\n     case 1254:\t/* mov */\n-    case 1251:\t/* mov */\n-    case 1360:\t/* dup */\n-      value = 1360;\t/* --> dup.  */\n+    case 1359:\t/* dup */\n+      value = 1359;\t/* --> dup.  */\n       break;\n-    case 2037:\t/* fmov */\n-    case 1256:\t/* mov */\n-    case 1361:\t/* dup */\n-      value = 1361;\t/* --> dup.  */\n+    case 1253:\t/* mov */\n+    case 1360:\t/* dupm */\n+      value = 1360;\t/* --> dupm.  */\n       break;\n-    case 1255:\t/* mov */\n-    case 1362:\t/* dupm */\n-      value = 1362;\t/* --> dupm.  */\n+    case 2030:\t/* eon */\n+    case 1362:\t/* eor */\n+      value = 1362;\t/* --> eor.  */\n       break;\n-    case 2032:\t/* eon */\n+    case 1263:\t/* not */\n     case 1364:\t/* eor */\n       value = 1364;\t/* --> eor.  */\n       break;\n-    case 1265:\t/* not */\n-    case 1366:\t/* eor */\n-      value = 1366;\t/* --> eor.  */\n+    case 1264:\t/* nots */\n+    case 1365:\t/* eors */\n+      value = 1365;\t/* --> eors.  */\n       break;\n-    case 1266:\t/* nots */\n-    case 1367:\t/* eors */\n-      value = 1367;\t/* --> eors.  */\n+    case 2031:\t/* facle */\n+    case 1370:\t/* facge */\n+      value = 1370;\t/* --> facge.  */\n       break;\n-    case 2033:\t/* facle */\n-    case 1372:\t/* facge */\n-      value = 1372;\t/* --> facge.  */\n+    case 2032:\t/* faclt */\n+    case 1371:\t/* facgt */\n+      value = 1371;\t/* --> facgt.  */\n       break;\n-    case 2034:\t/* faclt */\n-    case 1373:\t/* facgt */\n-      value = 1373;\t/* --> facgt.  */\n+    case 2033:\t/* fcmle */\n+    case 1384:\t/* fcmge */\n+      value = 1384;\t/* --> fcmge.  */\n       break;\n-    case 2035:\t/* fcmle */\n-    case 1386:\t/* fcmge */\n-      value = 1386;\t/* --> fcmge.  */\n+    case 2034:\t/* fcmlt */\n+    case 1386:\t/* fcmgt */\n+      value = 1386;\t/* --> fcmgt.  */\n       break;\n-    case 2036:\t/* fcmlt */\n-    case 1388:\t/* fcmgt */\n-      value = 1388;\t/* --> fcmgt.  */\n+    case 1247:\t/* fmov */\n+    case 1392:\t/* fcpy */\n+      value = 1392;\t/* --> fcpy.  */\n       break;\n-    case 1249:\t/* fmov */\n-    case 1394:\t/* fcpy */\n-      value = 1394;\t/* --> fcpy.  */\n+    case 1246:\t/* fmov */\n+    case 1415:\t/* fdup */\n+      value = 1415;\t/* --> fdup.  */\n       break;\n-    case 1248:\t/* fmov */\n-    case 1417:\t/* fdup */\n-      value = 1417;\t/* --> fdup.  */\n+    case 1248:\t/* mov */\n+    case 1746:\t/* orr */\n+      value = 1746;\t/* --> orr.  */\n       break;\n-    case 1250:\t/* mov */\n-    case 1748:\t/* orr */\n-      value = 1748;\t/* --> orr.  */\n+    case 2037:\t/* orn */\n+    case 1747:\t/* orr */\n+      value = 1747;\t/* --> orr.  */\n       break;\n-    case 2039:\t/* orn */\n+    case 1251:\t/* mov */\n     case 1749:\t/* orr */\n       value = 1749;\t/* --> orr.  */\n       break;\n-    case 1253:\t/* mov */\n-    case 1751:\t/* orr */\n-      value = 1751;\t/* --> orr.  */\n-      break;\n-    case 1263:\t/* movs */\n-    case 1752:\t/* orrs */\n-      value = 1752;\t/* --> orrs.  */\n+    case 1261:\t/* movs */\n+    case 1750:\t/* orrs */\n+      value = 1750;\t/* --> orrs.  */\n       break;\n-    case 1258:\t/* mov */\n-    case 1814:\t/* sel */\n-      value = 1814;\t/* --> sel.  */\n+    case 1256:\t/* mov */\n+    case 1812:\t/* sel */\n+      value = 1812;\t/* --> sel.  */\n       break;\n-    case 1261:\t/* mov */\n-    case 1815:\t/* sel */\n-      value = 1815;\t/* --> sel.  */\n+    case 1259:\t/* mov */\n+    case 1813:\t/* sel */\n+      value = 1813;\t/* --> sel.  */\n       break;\n     default: return NULL;\n     }\n@@ -627,6 +627,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 27:\n     case 28:\n     case 29:\n+    case 159:\n     case 160:\n     case 161:\n     case 162:\n@@ -636,7 +637,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 166:\n     case 167:\n     case 168:\n-    case 169:\n+    case 181:\n     case 182:\n     case 183:\n     case 184:\n@@ -645,9 +646,8 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 187:\n     case 188:\n     case 189:\n-    case 190:\n-    case 194:\n-    case 197:\n+    case 193:\n+    case 196:\n       return aarch64_ins_regno (self, info, code, inst, errors);\n     case 13:\n       return aarch64_ins_reg_extended (self, info, code, inst, errors);\n@@ -659,7 +659,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 31:\n     case 32:\n     case 33:\n-    case 199:\n+    case 198:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 34:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -693,16 +693,16 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 79:\n     case 80:\n     case 81:\n-    case 157:\n-    case 159:\n+    case 156:\n+    case 158:\n+    case 173:\n     case 174:\n     case 175:\n     case 176:\n     case 177:\n     case 178:\n     case 179:\n     case 180:\n-    case 181:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 42:\n     case 43:\n@@ -712,10 +712,10 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 46:\n       return aarch64_ins_advsimd_imm_modified (self, info, code, inst, errors);\n     case 50:\n-    case 148:\n+    case 147:\n       return aarch64_ins_fpimm (self, info, code, inst, errors);\n     case 67:\n-    case 155:\n+    case 154:\n       return aarch64_ins_limm (self, info, code, inst, errors);\n     case 68:\n       return aarch64_ins_aimm (self, info, code, inst, errors);\n@@ -725,69 +725,68 @@ aarch64_insert_operand (const aarch64_operand *self,\n       return aarch64_ins_fbits (self, info, code, inst, errors);\n     case 72:\n     case 73:\n-    case 153:\n+    case 152:\n       return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);\n     case 74:\n-    case 152:\n+    case 151:\n       return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);\n     case 75:\n     case 76:\n       return aarch64_ins_cond (self, info, code, inst, errors);\n     case 82:\n-    case 92:\n+    case 91:\n       return aarch64_ins_addr_simple (self, info, code, inst, errors);\n     case 83:\n-      return aarch64_ins_addr_simple_2 (self, info, code, inst, errors);\n-    case 84:\n       return aarch64_ins_addr_regoff (self, info, code, inst, errors);\n+    case 84:\n     case 85:\n     case 86:\n-    case 87:\n-    case 89:\n-    case 91:\n-      return aarch64_ins_addr_simm (self, info, code, inst, errors);\n     case 88:\n-      return aarch64_ins_addr_simm10 (self, info, code, inst, errors);\n     case 90:\n+      return aarch64_ins_addr_simm (self, info, code, inst, errors);\n+    case 87:\n+      return aarch64_ins_addr_simm10 (self, info, code, inst, errors);\n+    case 89:\n       return aarch64_ins_addr_uimm12 (self, info, code, inst, errors);\n-    case 93:\n+    case 92:\n       return aarch64_ins_addr_offset (self, info, code, inst, errors);\n-    case 94:\n+    case 93:\n       return aarch64_ins_simd_addr_post (self, info, code, inst, errors);\n-    case 95:\n+    case 94:\n       return aarch64_ins_sysreg (self, info, code, inst, errors);\n-    case 96:\n+    case 95:\n       return aarch64_ins_pstatefield (self, info, code, inst, errors);\n+    case 96:\n     case 97:\n     case 98:\n     case 99:\n     case 100:\n-    case 101:\n       return aarch64_ins_sysins_op (self, info, code, inst, errors);\n+    case 101:\n     case 102:\n-    case 103:\n       return aarch64_ins_barrier (self, info, code, inst, errors);\n-    case 104:\n+    case 103:\n       return aarch64_ins_prfop (self, info, code, inst, errors);\n+    case 104:\n     case 105:\n-    case 106:\n       return aarch64_ins_hint (self, info, code, inst, errors);\n-    case 107:\n+    case 106:\n       return aarch64_ins_sve_addr_ri_s4 (self, info, code, inst, errors);\n+    case 107:\n     case 108:\n     case 109:\n     case 110:\n-    case 111:\n       return aarch64_ins_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n-    case 112:\n+    case 111:\n       return aarch64_ins_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n-    case 113:\n+    case 112:\n       return aarch64_ins_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n+    case 113:\n     case 114:\n     case 115:\n     case 116:\n-    case 117:\n       return aarch64_ins_sve_addr_ri_u6 (self, info, code, inst, errors);\n+    case 117:\n     case 118:\n     case 119:\n     case 120:\n@@ -800,58 +799,57 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 127:\n     case 128:\n     case 129:\n-    case 130:\n       return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n+    case 130:\n     case 131:\n     case 132:\n     case 133:\n     case 134:\n     case 135:\n     case 136:\n     case 137:\n-    case 138:\n       return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n+    case 138:\n     case 139:\n     case 140:\n     case 141:\n-    case 142:\n       return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n-    case 143:\n+    case 142:\n       return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n-    case 144:\n+    case 143:\n       return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n-    case 145:\n+    case 144:\n       return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n-    case 146:\n+    case 145:\n       return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n-    case 147:\n+    case 146:\n       return aarch64_ins_sve_asimm (self, info, code, inst, errors);\n-    case 149:\n+    case 148:\n       return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n-    case 150:\n+    case 149:\n       return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n-    case 151:\n+    case 150:\n       return aarch64_ins_sve_float_zero_one (self, info, code, inst, errors);\n-    case 154:\n+    case 153:\n       return aarch64_ins_inv_limm (self, info, code, inst, errors);\n-    case 156:\n+    case 155:\n       return aarch64_ins_sve_limm_mov (self, info, code, inst, errors);\n-    case 158:\n+    case 157:\n       return aarch64_ins_sve_scale (self, info, code, inst, errors);\n+    case 169:\n     case 170:\n-    case 171:\n       return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n+    case 171:\n     case 172:\n-    case 173:\n       return aarch64_ins_sve_shrimm (self, info, code, inst, errors);\n+    case 190:\n     case 191:\n     case 192:\n-    case 193:\n       return aarch64_ins_sve_quad_index (self, info, code, inst, errors);\n-    case 195:\n+    case 194:\n       return aarch64_ins_sve_index (self, info, code, inst, errors);\n-    case 196:\n-    case 198:\n+    case 195:\n+    case 197:\n       return aarch64_ins_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "2424b66d9662718fb7a5475972ba57c9595954dd",
      "filename": "opcodes/aarch64-asm.c",
      "status": "modified",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.c?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -618,17 +618,6 @@ aarch64_ins_addr_simple (const aarch64_operand *self ATTRIBUTE_UNUSED,\n   return TRUE;\n }\n \n-/* Encode the address operand for e.g. STGV <Xt>, [<Xn|SP>]!.  */\n-bfd_boolean\n-aarch64_ins_addr_simple_2 (const aarch64_operand *self,\n-\t\t\t   const aarch64_opnd_info *info, aarch64_insn *code,\n-\t\t\t   const aarch64_inst *inst,\n-\t\t\t   aarch64_operand_error *errors)\n-\n-{\n-  return aarch64_ins_addr_simple (self, info, code, inst, errors);\n-}\n-\n /* Encode the address operand for e.g.\n      STR <Qt>, [<Xn|SP>, <R><m>{, <extend> {<amount>}}].  */\n bfd_boolean"
    },
    {
      "sha": "e9520e78fca5b98b48f0eebe05b70fc3a0d7f833",
      "filename": "opcodes/aarch64-asm.h",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.h?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -59,7 +59,6 @@ AARCH64_DECL_OPD_INSERTER (ins_limm);\n AARCH64_DECL_OPD_INSERTER (ins_inv_limm);\n AARCH64_DECL_OPD_INSERTER (ins_ft);\n AARCH64_DECL_OPD_INSERTER (ins_addr_simple);\n-AARCH64_DECL_OPD_INSERTER (ins_addr_simple_2);\n AARCH64_DECL_OPD_INSERTER (ins_addr_offset);\n AARCH64_DECL_OPD_INSERTER (ins_addr_regoff);\n AARCH64_DECL_OPD_INSERTER (ins_addr_simm);"
    },
    {
      "sha": "3279cc038863e4d1bf0d09dec2a0a586e64b2d02",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 1281,
      "deletions": 1305,
      "changes": 2586,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d"
    },
    {
      "sha": "4c31f57451d20d8029624e601b15e41cf56f5a19",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 0,
      "deletions": 17,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -985,23 +985,6 @@ aarch64_ext_addr_simple (const aarch64_operand *self ATTRIBUTE_UNUSED,\n   return TRUE;\n }\n \n-\n-\n-/* Decode the address operand for e.g. STGV <Xt>, [<Xn|SP>]!.  */\n-bfd_boolean\n-aarch64_ext_addr_simple_2 (const aarch64_operand *self ATTRIBUTE_UNUSED,\n-\t\t\t   aarch64_opnd_info *info,\n-\t\t\t   aarch64_insn code,\n-\t\t\t   const aarch64_inst *inst ATTRIBUTE_UNUSED,\n-\t\t\t   aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n-{\n-  /* Rn */\n-  info->addr.base_regno = extract_field (FLD_Rn, code, 0);\n-  info->addr.writeback = 1;\n-  info->addr.preind = 1;\n-  return TRUE;\n-}\n-\n /* Decode the address operand for e.g.\n      stlur <Xt>, [<Xn|SP>{, <amount>}].  */\n bfd_boolean"
    },
    {
      "sha": "6df78d9c8c4101fc0154f982e0801e8187705229",
      "filename": "opcodes/aarch64-dis.h",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-dis.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-dis.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.h?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -82,7 +82,6 @@ AARCH64_DECL_OPD_EXTRACTOR (ext_limm);\n AARCH64_DECL_OPD_EXTRACTOR (ext_inv_limm);\n AARCH64_DECL_OPD_EXTRACTOR (ext_ft);\n AARCH64_DECL_OPD_EXTRACTOR (ext_addr_simple);\n-AARCH64_DECL_OPD_EXTRACTOR (ext_addr_simple_2);\n AARCH64_DECL_OPD_EXTRACTOR (ext_addr_offset);\n AARCH64_DECL_OPD_EXTRACTOR (ext_addr_regoff);\n AARCH64_DECL_OPD_EXTRACTOR (ext_addr_simm);"
    },
    {
      "sha": "bab875ce14ba8e7b4d6265bebd7ac22229c2f339",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 15,
      "deletions": 16,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -107,7 +107,6 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_PCREL21\", OPD_F_SEXT | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_immhi,FLD_immlo}, \"21-bit PC-relative address\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_PCREL26\", OPD_F_SEXT | OPD_F_SHIFT_BY_2 | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm26}, \"26-bit PC-relative address\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_SIMPLE\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"an address with base register (no offset)\"},\n-  {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_SIMPLE_2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"a writeback address with base register (no offset)\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_REGOFF\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {}, \"an address with register offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_SIMM7\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm7,FLD_index2}, \"an address with 7-bit signed immediate offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"ADDR_SIMM9\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm9,FLD_index}, \"an address with 9-bit signed immediate offset\"},\n@@ -257,24 +256,24 @@ static const unsigned op_enum_table [] =\n   925,\n   931,\n   932,\n+  983,\n+  984,\n   985,\n   986,\n-  987,\n-  988,\n   12,\n   636,\n   637,\n+  1178,\n   1180,\n   1182,\n-  1184,\n-  992,\n-  1183,\n+  990,\n   1181,\n+  1179,\n   318,\n   624,\n   635,\n   634,\n-  990,\n+  988,\n   631,\n   628,\n   620,\n@@ -284,7 +283,7 @@ static const unsigned op_enum_table [] =\n   630,\n   632,\n   633,\n-  1000,\n+  998,\n   664,\n   667,\n   670,\n@@ -301,17 +300,17 @@ static const unsigned op_enum_table [] =\n   391,\n   413,\n   415,\n-  1253,\n-  1258,\n   1251,\n-  1250,\n-  1254,\n+  1256,\n+  1249,\n+  1248,\n+  1252,\n+  1259,\n   1261,\n-  1263,\n+  1262,\n+  1258,\n   1264,\n-  1260,\n-  1266,\n-  1265,\n+  1263,\n   131,\n };\n "
    },
    {
      "sha": "22839ca72451152db3950b6d9b298a76ece234c4",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -1602,7 +1602,6 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \t  break;\n \tcase ldst_imm9:\n \tcase ldstpair_indexed:\n-\tcase ldstgv_indexed:\n \tcase asisdlsep:\n \tcase asisdlsop:\n \t  if (opnd->addr.writeback == 0)\n@@ -3557,11 +3556,6 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n \tsnprintf (buf, size, \"[%s]\", name);\n       break;\n \n-    case AARCH64_OPND_ADDR_SIMPLE_2:\n-      name = get_64bit_int_reg_name (opnd->addr.base_regno, 1);\n-      snprintf (buf, size, \"[%s]!\", name);\n-      break;\n-\n     case AARCH64_OPND_ADDR_REGOFF:\n     case AARCH64_OPND_SVE_ADDR_R:\n     case AARCH64_OPND_SVE_ADDR_RR:"
    },
    {
      "sha": "d4ecd6df42033cf05a333e81890c602c1ae7e2a6",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/550fd7bf6858cd708c54ec90412ffb653a932c3d/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=550fd7bf6858cd708c54ec90412ffb653a932c3d",
      "patch": "@@ -3324,8 +3324,6 @@ struct aarch64_opcode aarch64_opcode_table[] =\n   RCPC_INSN (\"ldaprb\", 0x38bfc000, 0xfffffc00, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_W1_LDST_EXC, 0),\n   RCPC_INSN (\"ldaprh\", 0x78bfc000, 0xfffffc00, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_W1_LDST_EXC, 0),\n   RCPC_INSN (\"ldapr\", 0xb8bfc000, 0xbffffc00, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_R1NIL, F_GPRSIZE_IN_Q),\n-  MEMTAG_INSN (\"ldgv\", 0xd9e00000, 0xfffffc00, ldstgv_indexed, OP2 (Rt, ADDR_SIMPLE_2), QL_STLX, 0),\n-  MEMTAG_INSN (\"stgv\", 0xd9a00000, 0xfffffc00, ldstgv_indexed, OP2 (Rt, ADDR_SIMPLE_2), QL_STLX, 0),\n   /* Limited Ordering Regions load/store instructions.  */\n   _LOR_INSN (\"ldlar\",  0x88df7c00, 0xbfe08000, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_R1NIL,       F_GPRSIZE_IN_Q),\n   _LOR_INSN (\"ldlarb\", 0x08df7c00, 0xffe08000, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_W1_LDST_EXC, 0),\n@@ -4650,8 +4648,6 @@ struct aarch64_opcode aarch64_opcode_table[] =\n       F(FLD_imm26), \"26-bit PC-relative address\")\t\t\t\\\n     Y(ADDRESS, addr_simple, \"ADDR_SIMPLE\", 0, F(),\t\t\t\\\n       \"an address with base register (no offset)\")\t\t\t\\\n-    Y(ADDRESS, addr_simple_2, \"ADDR_SIMPLE_2\", 0, F(),\t\t\t\\\n-      \"a writeback address with base register (no offset)\")\t\t\\\n     Y(ADDRESS, addr_regoff, \"ADDR_REGOFF\", 0, F(),\t\t\t\\\n       \"an address with register offset\")\t\t\t\t\\\n     Y(ADDRESS, addr_simm, \"ADDR_SIMM7\", 0, F(FLD_imm7,FLD_index2),\t\\"
    }
  ]
}