{
  "sha": "d3ecddab5fc036fb57588a9bfff73575dc419052",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDNlY2RkYWI1ZmMwMzZmYjU3NTg4YTliZmZmNzM1NzVkYzQxOTA1Mg==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-12-12T00:50:43Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-12-16T06:44:58Z"
    },
    "message": "Use a member function to set a symbol's language\n\nThis removes symbol_set_language and SYMBOL_SET_LANGUAGE in favor of\na new function general_symbol_info::set_language. symbol and minimal_symbol\nalready inherit from that struct so this works naturally.\n\ngdb/ChangeLog:\n\n2019-12-15  Christian Biesinger  <cbiesinger@google.com>\n\n\t* ada-exp.y (write_ambiguous_var): Update.\n\t* coffread.c (process_coff_symbol): Update.\n\t* ctfread.c (ctf_add_enum_member_cb): Update.\n\t(new_symbol): Update.\n\t* dwarf2read.c (fixup_go_packaging): Update.\n\t(new_symbol): Update.\n\t* language.c (language_alloc_type_symbol): Update.\n\t* mdebugread.c (new_symbol): Update.\n\t* minsyms.c (minimal_symbol_reader::record_full): Update.\n\t* psymtab.c (add_psymbol_to_bcache): Update.\n\t* stabsread.c (define_symbol): Update.\n\t(read_enum_type): Update.\n\t* symtab.c (symbol_set_language): Make this a member function...\n\t(general_symbol_info::set_language): ... here.\n\t* symtab.h (struct general_symbol_info) <set_language>: New function.\n\t(SYMBOL_SET_LANGUAGE): Remove.\n\t(symbol_set_language): Remove.\n\nChange-Id: Ideafb6c384004b9adef793a1192735c501da41d5",
    "tree": {
      "sha": "c8f55940571566a15e9ecec31841d9ee038835b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c8f55940571566a15e9ecec31841d9ee038835b6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d3ecddab5fc036fb57588a9bfff73575dc419052",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3ecddab5fc036fb57588a9bfff73575dc419052",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d3ecddab5fc036fb57588a9bfff73575dc419052",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3ecddab5fc036fb57588a9bfff73575dc419052/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c1b5c1ebc938b6dc0277363b8c47d75b0b5a621f"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 47,
    "deletions": 35
  },
  "files": [
    {
      "sha": "f3b27bd73b27810a3283a2ef5125ae564ef00746",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -1,3 +1,23 @@\n+2019-12-15  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* ada-exp.y (write_ambiguous_var): Update.\n+\t* coffread.c (process_coff_symbol): Update.\n+\t* ctfread.c (ctf_add_enum_member_cb): Update.\n+\t(new_symbol): Update.\n+\t* dwarf2read.c (fixup_go_packaging): Update.\n+\t(new_symbol): Update.\n+\t* language.c (language_alloc_type_symbol): Update.\n+\t* mdebugread.c (new_symbol): Update.\n+\t* minsyms.c (minimal_symbol_reader::record_full): Update.\n+\t* psymtab.c (add_psymbol_to_bcache): Update.\n+\t* stabsread.c (define_symbol): Update.\n+\t(read_enum_type): Update.\n+\t* symtab.c (symbol_set_language): Make this a member function...\n+\t(general_symbol_info::set_language): ... here.\n+\t* symtab.h (struct general_symbol_info) <set_language>: New function.\n+\t(SYMBOL_SET_LANGUAGE): Remove.\n+\t(symbol_set_language): Remove.\n+\n 2019-12-15  Christian Biesinger  <cbiesinger@google.com>\n \n \t* ada-lang.c (ada_add_block_symbols): Update."
    },
    {
      "sha": "a02e22dafabbd040fa2d95b4c7e29698e4d84667",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -1106,7 +1106,7 @@ write_ambiguous_var (struct parser_state *par_state,\n \n   SYMBOL_DOMAIN (sym) = UNDEF_DOMAIN;\n   sym->set_linkage_name (obstack_strndup (&temp_parse_space, name, len));\n-  symbol_set_language (sym, language_ada, nullptr);\n+  sym->set_language (language_ada, nullptr);\n \n   write_exp_elt_opcode (par_state, OP_VAR_VALUE);\n   write_exp_elt_block (par_state, block);"
    },
    {
      "sha": "e591651df37b59e65518a8750dae4aac69a654f3",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -1566,8 +1566,8 @@ process_coff_symbol (struct coff_symbol *cs,\n \n   name = cs->c_name;\n   name = EXTERNAL_NAME (name, objfile->obfd);\n-  SYMBOL_SET_LANGUAGE (sym, get_current_subfile ()->language,\n-\t\t       &objfile->objfile_obstack);\n+  sym->set_language (get_current_subfile ()->language,\n+\t\t     &objfile->objfile_obstack);\n   SYMBOL_SET_NAMES (sym, name, true, objfile);\n \n   /* default assumptions */"
    },
    {
      "sha": "06a4bc2f1beab676fbd912de8920a8e00bc39b2b",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -379,7 +379,7 @@ ctf_add_enum_member_cb (const char *name, int enum_value, void *arg)\n       struct symbol *sym = allocate_symbol (ccp->of);\n       OBJSTAT (ccp->of, n_syms++);\n \n-      SYMBOL_SET_LANGUAGE (sym, language_c, &ccp->of->objfile_obstack);\n+      sym->set_language (language_c, &ccp->of->objfile_obstack);\n       SYMBOL_SET_NAMES (sym, name, false, ccp->of);\n       SYMBOL_ACLASS_INDEX (sym) = LOC_CONST;\n       SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n@@ -408,7 +408,7 @@ new_symbol (ctf_context_t *ccp, struct type *type, ctf_id_t tid)\n       sym = allocate_symbol (objfile);\n       OBJSTAT (objfile, n_syms++);\n \n-      SYMBOL_SET_LANGUAGE (sym, language_c, &objfile->objfile_obstack);\n+      sym->set_language (language_c, &objfile->objfile_obstack);\n       SYMBOL_SET_NAMES (sym, name.get (), true, objfile);\n       SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n       SYMBOL_ACLASS_INDEX (sym) = LOC_OPTIMIZED_OUT;"
    },
    {
      "sha": "ecfae68427716333ab060ef1c44b3a25df9d7ac0",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -9952,7 +9952,7 @@ fixup_go_packaging (struct dwarf2_cu *cu)\n       struct symbol *sym;\n \n       sym = allocate_symbol (objfile);\n-      SYMBOL_SET_LANGUAGE (sym, language_go, &objfile->objfile_obstack);\n+      sym->set_language (language_go, &objfile->objfile_obstack);\n       SYMBOL_SET_NAMES (sym, saved_package_name, false, objfile);\n       /* This is not VAR_DOMAIN because we want a way to ensure a lookup of,\n \t e.g., \"main\" finds the \"main\" module and not C's main().  */\n@@ -21782,7 +21782,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n       OBJSTAT (objfile, n_syms++);\n \n       /* Cache this symbol's name and the name's demangled form (if any).  */\n-      SYMBOL_SET_LANGUAGE (sym, cu->language, &objfile->objfile_obstack);\n+      sym->set_language (cu->language, &objfile->objfile_obstack);\n       linkagename = dwarf2_physname (name, die, cu);\n       SYMBOL_SET_NAMES (sym, linkagename, false, objfile);\n "
    },
    {
      "sha": "76efc497379bf479aba7abdeeed1137ba3c95189",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -1051,7 +1051,7 @@ language_alloc_type_symbol (enum language lang, struct type *type)\n   symbol = new (gdbarch_obstack (gdbarch)) struct symbol ();\n \n   symbol->name = TYPE_NAME (type);\n-  symbol_set_language (symbol, lang, nullptr);\n+  symbol->set_language (lang, nullptr);\n   symbol->owner.arch = gdbarch;\n   SYMBOL_OBJFILE_OWNED (symbol) = 0;\n   SYMBOL_TYPE (symbol) = type;"
    },
    {
      "sha": "8d896d5392d50a08679bf5de039074ddb29c7b6a",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -4761,8 +4761,7 @@ new_symbol (const char *name)\n {\n   struct symbol *s = allocate_symbol (mdebugread_objfile);\n \n-  SYMBOL_SET_LANGUAGE (s, psymtab_language,\n-\t\t       &mdebugread_objfile->objfile_obstack);\n+  s->set_language (psymtab_language, &mdebugread_objfile->objfile_obstack);\n   SYMBOL_SET_NAMES (s, name, true, mdebugread_objfile);\n   return s;\n }"
    },
    {
      "sha": "8bbffc7803aac149aa3c8da415437ae0c1088377",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -1128,8 +1128,8 @@ minimal_symbol_reader::record_full (gdb::string_view name,\n       m_msym_bunch = newobj;\n     }\n   msymbol = &m_msym_bunch->contents[m_msym_bunch_index];\n-  symbol_set_language (msymbol, language_auto,\n-\t\t       &m_objfile->per_bfd->storage_obstack);\n+  msymbol->set_language (language_auto,\n+\t\t\t &m_objfile->per_bfd->storage_obstack);\n \n   if (copy_name)\n     msymbol->name = obstack_strndup (&m_objfile->per_bfd->storage_obstack,"
    },
    {
      "sha": "ba403ae24865a0f0b303729a8a83d2f3efb09b8d",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -1584,8 +1584,7 @@ add_psymbol_to_bcache (gdb::string_view name, bool copy_name,\n   psymbol.ginfo.section = section;\n   psymbol.domain = domain;\n   psymbol.aclass = theclass;\n-  symbol_set_language (&psymbol.ginfo, language,\n-\t\t       objfile->partial_symtabs->obstack ());\n+  psymbol.ginfo.set_language (language, objfile->partial_symtabs->obstack ());\n   symbol_set_names (&psymbol.ginfo, name, copy_name,\n \t\t    objfile->per_bfd);\n "
    },
    {
      "sha": "5828ddd2c5d77f32d62ad6b3e67ced3452cf97d4",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -700,8 +700,8 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       SYMBOL_LINE (sym) = 0;\t/* unknown */\n     }\n \n-  SYMBOL_SET_LANGUAGE (sym, get_current_subfile ()->language,\n-\t\t       &objfile->objfile_obstack);\n+  sym->set_language (get_current_subfile ()->language,\n+\t\t     &objfile->objfile_obstack);\n \n   if (is_cplus_marker (string[0]))\n     {\n@@ -3638,8 +3638,8 @@ read_enum_type (const char **pp, struct type *type,\n \n       sym = allocate_symbol (objfile);\n       sym->set_linkage_name (name);\n-      SYMBOL_SET_LANGUAGE (sym, get_current_subfile ()->language,\n-\t\t\t   &objfile->objfile_obstack);\n+      sym->set_language (get_current_subfile ()->language,\n+\t\t\t &objfile->objfile_obstack);\n       SYMBOL_ACLASS_INDEX (sym) = LOC_CONST;\n       SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n       SYMBOL_VALUE (sym) = n;"
    },
    {
      "sha": "26551372cbb1d5e8ccb55ea7a77a60265cebbe82",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -712,28 +712,26 @@ symbol_get_demangled_name (const struct general_symbol_info *gsymbol)\n    depending upon the language for the symbol.  */\n \n void\n-symbol_set_language (struct general_symbol_info *gsymbol,\n-                     enum language language,\n-\t\t     struct obstack *obstack)\n+general_symbol_info::set_language (enum language language,\n+\t\t\t\t   struct obstack *obstack)\n {\n-  gsymbol->m_language = language;\n+  m_language = language;\n   if (language == language_cplus\n       || language == language_d\n       || language == language_go\n       || language == language_objc\n       || language == language_fortran)\n     {\n-      symbol_set_demangled_name (gsymbol, NULL, obstack);\n+      symbol_set_demangled_name (this, NULL, obstack);\n     }\n   else if (language == language_ada)\n     {\n-      gdb_assert (gsymbol->ada_mangled == 0);\n-      gsymbol->language_specific.obstack = obstack;\n+      gdb_assert (ada_mangled == 0);\n+      language_specific.obstack = obstack;\n     }\n   else\n     {\n-      memset (&gsymbol->language_specific, 0,\n-\t      sizeof (gsymbol->language_specific));\n+      memset (&language_specific, 0, sizeof (language_specific));\n     }\n }\n "
    },
    {
      "sha": "e18cd65a3539eb2d3a65812f5844bcbad14e628b",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ecddab5fc036fb57588a9bfff73575dc419052/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=d3ecddab5fc036fb57588a9bfff73575dc419052",
      "patch": "@@ -428,6 +428,10 @@ struct general_symbol_info\n   enum language language () const\n   { return m_language; }\n \n+  /* Initializes the language dependent portion of a symbol\n+     depending upon the language for the symbol.  */\n+  void set_language (enum language language, struct obstack *obstack);\n+\n   /* Name of the symbol.  This is a required field.  Storage for the\n      name is allocated on the objfile_obstack for the associated\n      objfile.  For languages like C++ that make a distinction between\n@@ -531,14 +535,6 @@ extern CORE_ADDR get_symbol_address (const struct symbol *sym);\n    ? (&(((objfile)->sections)[(symbol)->section]))\t\\\n    : NULL)\n \n-/* Initializes the language dependent portion of a symbol\n-   depending upon the language for the symbol.  */\n-#define SYMBOL_SET_LANGUAGE(symbol,language,obstack)\t\\\n-  (symbol_set_language ((symbol), (language), (obstack)))\n-extern void symbol_set_language (struct general_symbol_info *symbol,\n-                                 enum language language,\n-\t\t\t\t struct obstack *obstack);\n-\n /* Try to determine the demangled name for a symbol, based on the\n    language of that symbol.  If the language is set to language_auto,\n    it will attempt to find any demangling algorithm that works and"
    }
  ]
}