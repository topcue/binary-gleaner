{
  "sha": "6b95f5ad9684530960eb828c76755a7b27a44e43",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmI5NWY1YWQ5Njg0NTMwOTYwZWI4MjhjNzY3NTVhN2IyN2E0NGU0Mw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-05T14:26:28Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-25T17:22:07Z"
    },
    "message": "gdb/python: allow for catchpoint type breakpoints in python\n\nThis commit adds initial support for catchpoints to the python\nbreakpoint API.\n\nThis commit adds a BP_CATCHPOINT constant which corresponds to\nGDB's internal bp_catchpoint.  The new constant is documented in the\nmanual.\n\nThe user can't create breakpoints with type BP_CATCHPOINT after this\ncommit, but breakpoints that already exist, obtained with the\n`gdb.breakpoints` function, can now have this type.  Additionally,\nwhen a stop event is reported for hitting a catchpoint, GDB will now\nreport a BreakpointEvent with the attached breakpoint being of type\nBP_CATCHPOINT - previously GDB would report a generic StopEvent in\nthis situation.\n\ngdb/ChangeLog:\n\n\t* NEWS: Mention Python BP_CATCHPOINT feature.\n\t* python/py-breakpoint.c (pybp_codes): Add bp_catchpoint support.\n\t(bppy_init): Likewise.\n\t(gdbpy_breakpoint_created): Likewise.\n\ngdb/doc/ChangeLog:\n\n\t* python.texinfo (Breakpoints In Python): Add BP_CATCHPOINT\n\tdescription.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-breakpoint.c (do_throw): New function.\n\t(main): Call do_throw.\n\t* gdb.python/py-breakpoint.exp (test_catchpoints): New proc.",
    "tree": {
      "sha": "6773652e729a43cf304ff4354ff18ef6c81088bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6773652e729a43cf304ff4354ff18ef6c81088bb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6b95f5ad9684530960eb828c76755a7b27a44e43",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b95f5ad9684530960eb828c76755a7b27a44e43",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6b95f5ad9684530960eb828c76755a7b27a44e43",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b95f5ad9684530960eb828c76755a7b27a44e43/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "08080f9744094772e935204a9d59a101da83a801",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08080f9744094772e935204a9d59a101da83a801",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/08080f9744094772e935204a9d59a101da83a801"
    }
  ],
  "stats": {
    "total": 109,
    "additions": 108,
    "deletions": 1
  },
  "files": [
    {
      "sha": "5045e713a64f65889eeb8eb9fd88bb1fbed141e3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6b95f5ad9684530960eb828c76755a7b27a44e43",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* NEWS: Mention Python BP_CATCHPOINT feature.\n+\t* python/py-breakpoint.c (pybp_codes): Add bp_catchpoint support.\n+\t(bppy_init): Likewise.\n+\t(gdbpy_breakpoint_created): Likewise.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* guile/scm-breakpoint.c (bpscm_type_to_string): Handle"
    },
    {
      "sha": "aae3b49b40821f412326cd786670c2a34cc61c8c",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=6b95f5ad9684530960eb828c76755a7b27a44e43",
      "patch": "@@ -231,6 +231,10 @@ QMemTags\n   ** New method gdb.PendingFrame.level() which returns the stack level\n      of the frame object.\n \n+  ** When hitting a catchpoint, the Python API will now emit a\n+     gdb.BreakpointEvent rather than a gdb.StopEvent.  The\n+     gdb.Breakpoint attached to the event will have type BP_CATCHPOINT.\n+\n *** Changes in GDB 10\n \n * There are new feature names for ARC targets: \"org.gnu.gdb.arc.core\""
    },
    {
      "sha": "fc16fc5f2a7d378c3447dc8110f5804309d2adea",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=6b95f5ad9684530960eb828c76755a7b27a44e43",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python.texinfo (Breakpoints In Python): Add BP_CATCHPOINT\n+\tdescription.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* guile.texinfo (Breakpoints In Guile): Add BP_CATCHPOINT"
    },
    {
      "sha": "f4865b3d6a6bb68a4e8c86c5209a44fe3ef7bb4a",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=6b95f5ad9684530960eb828c76755a7b27a44e43",
      "patch": "@@ -5517,6 +5517,13 @@ Hardware assisted read watchpoint.\n @vindex BP_ACCESS_WATCHPOINT\n @item gdb.BP_ACCESS_WATCHPOINT\n Hardware assisted access watchpoint.\n+\n+@vindex BP_CATCHPOINT\n+@item gdb.BP_CATCHPOINT\n+Catchpoint.  Currently, this type can't be used when creating\n+@code{gdb.Breakpoint} objects, but will be present in\n+@code{gdb.Breakpoint} objects reported from\n+@code{gdb.BreakpointEvent}s (@pxref{Events In Python}).\n @end vtable\n \n The available watchpoint types are represented by constants defined in the"
    },
    {
      "sha": "edff03282a1ec09d360231851de2ed194d2a4ca0",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=6b95f5ad9684530960eb828c76755a7b27a44e43",
      "patch": "@@ -86,6 +86,7 @@ static struct pybp_code pybp_codes[] =\n   { \"BP_HARDWARE_WATCHPOINT\", bp_hardware_watchpoint},\n   { \"BP_READ_WATCHPOINT\", bp_read_watchpoint},\n   { \"BP_ACCESS_WATCHPOINT\", bp_access_watchpoint},\n+  { \"BP_CATCHPOINT\", bp_catchpoint},\n   {NULL} /* Sentinel.  */\n };\n \n@@ -883,6 +884,8 @@ bppy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n \t      error(_(\"Cannot understand watchpoint access type.\"));\n \t    break;\n \t  }\n+\tcase bp_catchpoint:\n+\t  error (_(\"BP_CATCHPOINT not supported\"));\n \tdefault:\n \t  error(_(\"Do not understand breakpoint type to set.\"));\n \t}\n@@ -1038,7 +1041,8 @@ gdbpy_breakpoint_created (struct breakpoint *bp)\n       && bp->type != bp_watchpoint\n       && bp->type != bp_hardware_watchpoint\n       && bp->type != bp_read_watchpoint\n-      && bp->type != bp_access_watchpoint)\n+      && bp->type != bp_access_watchpoint\n+      && bp->type != bp_catchpoint)\n     {\n       pybp_debug_printf (\"is not a breakpoint or watchpoint\");\n       return;"
    },
    {
      "sha": "567c1342870ac8d328af86deb626292418fb2cda",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=6b95f5ad9684530960eb828c76755a7b27a44e43",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-breakpoint.c (do_throw): New function.\n+\t(main): Call do_throw.\n+\t* gdb.python/py-breakpoint.exp (test_catchpoints): New proc.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.guile/scm-breakpoint.exp (test_catchpoints): New proc."
    },
    {
      "sha": "dca668d6c225dcc0a295dbcd83b31669206e7dff",
      "filename": "gdb/testsuite/gdb.python/py-breakpoint.c",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/testsuite/gdb.python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/testsuite/gdb.python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-breakpoint.c?ref=6b95f5ad9684530960eb828c76755a7b27a44e43",
      "patch": "@@ -39,13 +39,27 @@ int add (int i)\n   return i + i;  /* Break at function add.  */\n }\n \n+void\n+do_throw ()\n+{\n+  throw 123;\n+}\n \n int main (int argc, char *argv[])\n {\n   int foo = 5;\n   int bar = 42;\n   int i;\n \n+  try\n+    {\n+      do_throw ();\n+    }\n+  catch (...)\n+    {\n+      /* Nothing.  */\n+    }\n+\n   for (i = 0; i < 10; i++)\n     {\n       result += multiply (foo);  /* Break at multiply. */"
    },
    {
      "sha": "d8fb85b784c119145a65cda7ae83068332dfca7f",
      "filename": "gdb/testsuite/gdb.python/py-breakpoint.exp",
      "status": "modified",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/testsuite/gdb.python/py-breakpoint.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6b95f5ad9684530960eb828c76755a7b27a44e43/gdb/testsuite/gdb.python/py-breakpoint.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-breakpoint.exp?ref=6b95f5ad9684530960eb828c76755a7b27a44e43",
      "patch": "@@ -737,11 +737,71 @@ proc_with_prefix test_bkpt_probe {} {\n \t\"-probe in spec string\"\n }\n \n+proc_with_prefix test_catchpoints {} {\n+    global srcfile testfile\n+    global gdb_prompt decimal\n+\n+    # Start with a fresh gdb.\n+    clean_restart ${testfile}\n+\n+    if ![runto_main] then {\n+\tfail \"cannot run to main.\"\n+\treturn 0\n+    }\n+\n+    # Try to create a catchpoint, currently this isn't supported via\n+    # the python api.\n+    gdb_test \"python gdb.Breakpoint (\\\"syscall\\\", type=gdb.BP_CATCHPOINT)\" \\\n+\t[multi_line \\\n+\t     \"gdb.error: BP_CATCHPOINT not supported\" \\\n+\t     \"Error while executing Python code\\\\.\"] \\\n+\t\"create a catchpoint via the api\"\n+\n+    # Setup a catchpoint.\n+    set num \"XXX\"\n+    gdb_test_multiple \"catch throw\" \"\" {\n+\t-re \"The feature \\'catch throw\\' is not supported.*\\r\\n$gdb_prompt $\" {\n+\t    unsupported \"catch syscall isn't supported\"\n+\t    return -1\n+\t}\n+\t-re \"Catchpoint ($decimal) \\\\(throw\\\\)\\r\\n$gdb_prompt $\" {\n+\t    set num $expect_out(1,string)\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+\n+    # Look for the catchpoint in the breakpoint list.\n+    gdb_test_multiline \"scan breakpoint list for BP_CATCHPOINT\" \\\n+\t\"python\" \"\" \\\n+\t\"def scan_bp_list ():\" \"\" \\\n+\t\"  for b in gdb.breakpoints():\" \"\" \\\n+\t\"    if b.type == gdb.BP_CATCHPOINT:\" \"\" \\\n+\t\"      print(\\\"breakpoint #%d, type BP_CATCHPOINT\\\" % b.number)\" \"\" \\\n+\t\"end\" \"\"\n+    gdb_test \"python scan_bp_list ()\" \\\n+\t\"breakpoint #${num}, type BP_CATCHPOINT\" \\\n+\t\"scan breakpoint for BP_CATCHPOINT\"\n+\n+    # Arrange to print something when GDB stops, then continue to the\n+    # catchpoint and check we get the expected event.\n+    gdb_test_multiline \"setup stop event handler\" \\\n+\t\"python\" \"\" \\\n+\t\"def stop_handler (event):\" \"\" \\\n+\t\"  if (isinstance (event, gdb.BreakpointEvent)\" \"\" \\\n+\t\"      and isinstance (event.breakpoint, gdb.Breakpoint)\" \"\" \\\n+\t\"      and event.breakpoint.type == gdb.BP_CATCHPOINT):\" \"\" \\\n+\t\"    print (\\\"Stopped at catchpoint event: %d\\\" % event.breakpoint.number)\" \"\" \\\n+\t\"end\" \"\" \\\n+\t\"python gdb.events.stop.connect (stop_handler)\" \"\"\n+    gdb_test \"continue\" \"Stopped at catchpoint event: ${num}\"\n+}\n+\n test_bkpt_basic\n test_bkpt_deletion\n test_bkpt_cond_and_cmds\n test_bkpt_invisible\n test_hardware_breakpoints\n+test_catchpoints\n test_watchpoints\n test_bkpt_internal\n test_bkpt_eval_funcs"
    }
  ]
}