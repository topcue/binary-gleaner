{
  "sha": "9baccff6ae259e74ba1f172008a377dbe2107318",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWJhY2NmZjZhZTI1OWU3NGJhMWYxNzIwMDhhMzc3ZGJlMjEwNzMxOA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:03Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:03Z"
    },
    "message": "gdb: add type::stub_is_supported / type::set_stub_is_supported\n\nAdd the `stub_is_supported` and `set_stub_is_supported` methods on `struct type`, in\norder to remove the `TYPE_STUB_SUPPORTED` macro.  In this patch, the macro is\nchanged to use the getter, so all the call sites of the macro that are\nused as a setter are changed to use the setter method directly.  The\nnext patch will remove the macro completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <stub_is_supported, set_stub_is_supported>: New methods.\n\t(TYPE_STUB_SUPPORTED): Use type::stub_is_supported, change all write call sites to\n\tuse type::set_stub_is_supported.\n\nChange-Id: I4dfecf2b5df9c2b7bb8db1e9252082140adf3028",
    "tree": {
      "sha": "30a6c58553f6d58939c3907b754458d0fb51db78",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/30a6c58553f6d58939c3907b754458d0fb51db78"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9baccff6ae259e74ba1f172008a377dbe2107318",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9baccff6ae259e74ba1f172008a377dbe2107318",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9baccff6ae259e74ba1f172008a377dbe2107318",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9baccff6ae259e74ba1f172008a377dbe2107318/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bd63c870088388fc55efbf50f2dfc0592fe874e5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd63c870088388fc55efbf50f2dfc0592fe874e5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bd63c870088388fc55efbf50f2dfc0592fe874e5"
    }
  ],
  "stats": {
    "total": 22,
    "additions": 19,
    "deletions": 3
  },
  "files": [
    {
      "sha": "881429df6f1c5f6365ed9050bc6fb9d08aef213e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9baccff6ae259e74ba1f172008a377dbe2107318/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9baccff6ae259e74ba1f172008a377dbe2107318/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9baccff6ae259e74ba1f172008a377dbe2107318",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <stub_is_supported, set_stub_is_supported>: New methods.\n+\t(TYPE_STUB_SUPPORTED): Use type::stub_is_supported, change all write call sites to\n+\tuse type::set_stub_is_supported.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_VECTOR): Remove, replace all"
    },
    {
      "sha": "410e4c8c6778e706d3367b29e099f17466b9fdf6",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9baccff6ae259e74ba1f172008a377dbe2107318/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9baccff6ae259e74ba1f172008a377dbe2107318/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=9baccff6ae259e74ba1f172008a377dbe2107318",
      "patch": "@@ -16084,7 +16084,7 @@ read_structure_type (struct die_info *die, struct dwarf2_cu *cu)\n       type->set_is_stub (true);\n     }\n   else\n-    TYPE_STUB_SUPPORTED (type) = 1;\n+    type->set_stub_is_supported (true);\n \n   if (die_is_declaration (die, cu))\n     type->set_is_stub (true);"
    },
    {
      "sha": "6f1bdfd49d66ebcf23fcd49c533f935371508b40",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9baccff6ae259e74ba1f172008a377dbe2107318/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9baccff6ae259e74ba1f172008a377dbe2107318/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=9baccff6ae259e74ba1f172008a377dbe2107318",
      "patch": "@@ -233,7 +233,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    TYPE_STUB(t) with !TYPE_STUB_SUPPORTED(t) may exist if we only\n    guessed the TYPE_STUB(t) value (see dwarfread.c).  */\n \n-#define TYPE_STUB_SUPPORTED(t)   (TYPE_MAIN_TYPE (t)->flag_stub_supported)\n+#define TYPE_STUB_SUPPORTED(t)   ((t)->stub_is_supported ())\n \n /* * Not textual.  By default, GDB treats all single byte integers as\n    characters (or elements of strings) unless this flag is set.  */\n@@ -820,7 +820,7 @@ struct main_type\n   unsigned int m_flag_prototyped : 1;\n   unsigned int m_flag_varargs : 1;\n   unsigned int m_flag_vector : 1;\n-  unsigned int flag_stub_supported : 1;\n+  unsigned int m_flag_stub_supported : 1;\n   unsigned int flag_gnu_ifunc : 1;\n   unsigned int flag_fixed_instance : 1;\n   unsigned int flag_objfile_owned : 1;\n@@ -1125,6 +1125,16 @@ struct type\n     this->main_type->m_flag_vector = is_vector;\n   }\n \n+  bool stub_is_supported () const\n+  {\n+    return this->main_type->m_flag_stub_supported;\n+  }\n+\n+  void set_stub_is_supported (bool stub_is_supported)\n+  {\n+    this->main_type->m_flag_stub_supported = stub_is_supported;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;"
    }
  ]
}