{
  "sha": "4c937052c13b13053559a5aa2b1345545a185ca5",
  "node_id": "C_kwDOANOeidoAKDRjOTM3MDUyYzEzYjEzMDUzNTU5YTVhYTJiMTM0NTU0NWExODVjYTU",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-02-24T16:01:42Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-02-24T21:38:08Z"
    },
    "message": "Fix crash in Fortran code\n\nPR fortran/28801 points out a gdb crash that can be provoked by\ncertain Fortran code.  The bug is that f77_get_upperbound assumes the\nproperty is either a constant or undefined, but in this case it is\nPROP_LOCEXPR.\n\nThis patch fixes the crash by making this function (and the\nlower-bound one as well) do the correct check before calling\n'const_val'.\n\nThanks to Andrew for writing the test case.\n\nCo-authored-by: Andrew Burgess <aburgess@redhat.com>\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=28801",
    "tree": {
      "sha": "da1c7680fef3345636fffc45b22592a59150f0f4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/da1c7680fef3345636fffc45b22592a59150f0f4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4c937052c13b13053559a5aa2b1345545a185ca5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c937052c13b13053559a5aa2b1345545a185ca5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4c937052c13b13053559a5aa2b1345545a185ca5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c937052c13b13053559a5aa2b1345545a185ca5/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7124770976d3f051532faf864013b76ab36249bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7124770976d3f051532faf864013b76ab36249bf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7124770976d3f051532faf864013b76ab36249bf"
    }
  ],
  "stats": {
    "total": 210,
    "additions": 208,
    "deletions": 2
  },
  "files": [
    {
      "sha": "b64750bac7b4ad6c97bc509ea6fbc1db7195323f",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c937052c13b13053559a5aa2b1345545a185ca5/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c937052c13b13053559a5aa2b1345545a185ca5/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=4c937052c13b13053559a5aa2b1345545a185ca5",
      "patch": "@@ -43,7 +43,7 @@ static void f77_get_dynamic_length_of_aggregate (struct type *);\n LONGEST\n f77_get_lowerbound (struct type *type)\n {\n-  if (type->bounds ()->low.kind () == PROP_UNDEFINED)\n+  if (type->bounds ()->low.kind () != PROP_CONST)\n     error (_(\"Lower bound may not be '*' in F77\"));\n \n   return type->bounds ()->low.const_val ();\n@@ -52,7 +52,7 @@ f77_get_lowerbound (struct type *type)\n LONGEST\n f77_get_upperbound (struct type *type)\n {\n-  if (type->bounds ()->high.kind () == PROP_UNDEFINED)\n+  if (type->bounds ()->high.kind () != PROP_CONST)\n     {\n       /* We have an assumed size array on our hands.  Assume that\n \t upper_bound == lower_bound so that we show at least 1 element."
    },
    {
      "sha": "a677b7e65505eaa319b18a408b919ee93c1a6668",
      "filename": "gdb/testsuite/gdb.dwarf2/fortran-var-string.c",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c937052c13b13053559a5aa2b1345545a185ca5/gdb/testsuite/gdb.dwarf2/fortran-var-string.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c937052c13b13053559a5aa2b1345545a185ca5/gdb/testsuite/gdb.dwarf2/fortran-var-string.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fortran-var-string.c?ref=4c937052c13b13053559a5aa2b1345545a185ca5",
      "patch": "@@ -0,0 +1,31 @@\n+/* Copyright 2022 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* In the generated DWARF, we'll pretend that ARG is a string with dynamic\n+   length.  */\n+int\n+main_helper (void *arg)\n+{\n+  asm (\"main_helper_label: .globl main_helper_label\");\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  asm (\"main_label: .globl main_label\");\n+  main_helper (0);\n+  return 0;\n+}"
    },
    {
      "sha": "793c4418fd614d6267cd62623410809425324c14",
      "filename": "gdb/testsuite/gdb.dwarf2/fortran-var-string.exp",
      "status": "added",
      "additions": 175,
      "deletions": 0,
      "changes": 175,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c937052c13b13053559a5aa2b1345545a185ca5/gdb/testsuite/gdb.dwarf2/fortran-var-string.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c937052c13b13053559a5aa2b1345545a185ca5/gdb/testsuite/gdb.dwarf2/fortran-var-string.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/fortran-var-string.exp?ref=4c937052c13b13053559a5aa2b1345545a185ca5",
      "patch": "@@ -0,0 +1,175 @@\n+# Copyright 2022 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile .c -dw.S\n+\n+# We need to know the size of integer and address types in order\n+# to write some of the debugging info we'd like to generate.\n+#\n+# For that, we ask GDB by debugging our dynarr-ptr.c program.\n+# Any program would do, but since we already have dynarr-ptr.c\n+# specifically for this testcase, might as well use that.\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] } {\n+    return -1\n+}\n+\n+# Make some DWARF for the test.\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    set int_size [get_sizeof \"int\" 4]\n+\n+    get_func_info main\n+    get_func_info main_helper\n+\n+    cu {} {\n+\tDW_TAG_compile_unit {\n+                {DW_AT_language @DW_LANG_Fortran90}\n+                {DW_AT_name     fortran-var-string.f90}\n+                {DW_AT_comp_dir /tmp}\n+        } {\n+\t    declare_labels integer_label string_label array_lb_label \\\n+\t\tarray_ub_label\n+\n+\t    DW_TAG_subprogram {\n+\t\t{name main}\n+\t\t{low_pc $main_helper_start addr}\n+\t\t{high_pc $main_helper_len data8}\n+\t\t{DW_AT_type :$integer_label}\n+\t\t{DW_AT_decl_file 1 data1}\n+\t\t{DW_AT_decl_line 1 data1}\n+\t    }\n+\n+\t    DW_TAG_subprogram {\n+\t\t{name test_1_func}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc $main_len data8}\n+\t\t{DW_AT_type :$integer_label}\n+\t\t{DW_AT_decl_file 1 data1}\n+\t\t{DW_AT_decl_line 2 data1}\n+\t    } {\n+\t\tformal_parameter {\n+\t\t    {name arg1}\n+\t\t    {type :$string_label}\n+\t\t}\n+\t    }\n+\n+\t    DW_TAG_subprogram {\n+\t\t{name test_2_func}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc $main_len data8}\n+\t\t{DW_AT_type :$integer_label}\n+\t\t{DW_AT_decl_file 1 data1}\n+\t\t{DW_AT_decl_line 3 data1}\n+\t    } {\n+\t\tformal_parameter {\n+\t\t    {name arg1}\n+\t\t    {type :$array_ub_label}\n+\t\t}\n+\t    }\n+\n+\t    DW_TAG_subprogram {\n+\t\t{name test_3_func}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc $main_len data8}\n+\t\t{DW_AT_type :$integer_label}\n+\t\t{DW_AT_decl_file 1 data1}\n+\t\t{DW_AT_decl_line 4 data1}\n+\t    } {\n+\t\tformal_parameter {\n+\t\t    {name arg1}\n+\t\t    {type :$array_lb_label}\n+\t\t}\n+\t    }\n+\n+\t    integer_label: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size $int_size DW_FORM_sdata}\n+\t\t{DW_AT_encoding  @DW_ATE_signed}\n+\t\t{DW_AT_name      integer}\n+\t    }\n+\n+\t    string_label: DW_TAG_string_type {\n+\t\t{DW_AT_byte_size $int_size DW_FORM_sdata}\n+\t\t{DW_AT_name      .str.arg}\n+\t\t{DW_AT_string_length {} DW_FORM_block1}\n+\t    }\n+\n+\t    array_lb_label: DW_TAG_array_type {\n+\t\t{DW_AT_ordering 1 data1}\n+\t\t{DW_AT_type :$integer_label}\n+\t    } {\n+\t\tDW_TAG_subrange_type {\n+\t\t    {DW_AT_lower_bound {} DW_FORM_block1}\n+\t\t    {DW_AT_upper_bound 10 DW_FORM_data1}\n+\t\t}\n+\t    }\n+\n+\t    array_ub_label: DW_TAG_array_type {\n+\t\t{DW_AT_ordering 1 data1}\n+\t\t{DW_AT_type :$integer_label}\n+\t    } {\n+\t\tDW_TAG_subrange_type {\n+\t\t    {DW_AT_upper_bound {} DW_FORM_block1}\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n+# Now that we've generated the DWARF debugging info, rebuild our\n+# program using our debug info instead of the info generated by\n+# the compiler.\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+gdb_test_no_output \"set language fortran\"\n+\n+gdb_test \"info functions test_1_func\" \\\n+    \"2:\\\\s+integer test_1_func\\\\(character\\\\*\\\\(\\\\*\\\\)\\\\);\"\n+\n+# We print `1` here as the bound because GDB treats this as an assumed\n+# size array, and just reports the lower bound value for the upper\n+# bound.\n+#\n+# We might, in the future, decide that there's a better way we could\n+# tell the user about the type of this array argument, when that\n+# happens it's OK to change the expected results here.\n+gdb_test \"info functions test_2_func\" \\\n+    \"3:\\\\s+integer test_2_func\\\\(integer \\\\(1\\\\)\\\\);\"\n+\n+# It's not completely clear that this error is correct here.  Why\n+# can't the lower bound be a dynamic expression?\n+#\n+# This test was initially added to guard against the case where GDB\n+# was crashing if/when it saw this situation.\n+#\n+# If later on, GDB's handling of array types with a dynamic loewr\n+# bound changes, then it is possible that the expected result here\n+# should change.\n+gdb_test \"info functions test_3_func\" \\\n+    \"4:\\\\s+Lower bound may not be '\\\\*' in F77\""
    }
  ]
}