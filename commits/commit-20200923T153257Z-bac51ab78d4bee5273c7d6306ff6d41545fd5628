{
  "sha": "bac51ab78d4bee5273c7d6306ff6d41545fd5628",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmFjNTFhYjc4ZDRiZWU1MjczYzdkNjMwNmZmNmQ0MTU0NWZkNTYyOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-23T15:32:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-23T15:32:57Z"
    },
    "message": "Avoid manual memory management of argv arrays in gdb/compile\n\nThis changes gdb/compile to use gdb_argv directly, rather than\nmanually managing the arrays itself.  A few new helpers are added to\ngdb_argv.\n\ngdb/ChangeLog\n2020-09-23  Tom Tromey  <tom@tromey.com>\n\n\t* utils.h (class gdb_argv): Add move operators.\n\t<append>: New methods.\n\t* compile/compile.c (build_argc_argv): Remove.\n\t(compile_args_argc): Remove.\n\t(compile_args_argv): Change type.\n\t(set_compile_args): Simplify.\n\t(append_args): Remove.\n\t(filter_args): Remove argcp parameter.\n\t(get_args): Return gdb_argv.  Simplify.\n\t(compile_to_object): Update.",
    "tree": {
      "sha": "19aa6c2685b02c8409979bd3d34698dc4d4b6860",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/19aa6c2685b02c8409979bd3d34698dc4d4b6860"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bac51ab78d4bee5273c7d6306ff6d41545fd5628",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bac51ab78d4bee5273c7d6306ff6d41545fd5628",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bac51ab78d4bee5273c7d6306ff6d41545fd5628",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bac51ab78d4bee5273c7d6306ff6d41545fd5628/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "92677124d90f0690ec5ffb6ee0a7b5097f95b135",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/92677124d90f0690ec5ffb6ee0a7b5097f95b135",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/92677124d90f0690ec5ffb6ee0a7b5097f95b135"
    }
  ],
  "stats": {
    "total": 131,
    "additions": 73,
    "deletions": 58
  },
  "files": [
    {
      "sha": "7b9b7d4e35a67513e2368a0893a1e4786893a990",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac51ab78d4bee5273c7d6306ff6d41545fd5628/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac51ab78d4bee5273c7d6306ff6d41545fd5628/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bac51ab78d4bee5273c7d6306ff6d41545fd5628",
      "patch": "@@ -1,3 +1,16 @@\n+2020-09-23  Tom Tromey  <tom@tromey.com>\n+\n+\t* utils.h (class gdb_argv): Add move operators.\n+\t<append>: New methods.\n+\t* compile/compile.c (build_argc_argv): Remove.\n+\t(compile_args_argc): Remove.\n+\t(compile_args_argv): Change type.\n+\t(set_compile_args): Simplify.\n+\t(append_args): Remove.\n+\t(filter_args): Remove argcp parameter.\n+\t(get_args): Return gdb_argv.  Simplify.\n+\t(compile_to_object): Update.\n+\n 2020-09-23  Tom Tromey  <tom@tromey.com>\n \n \t* compile/compile-object-run.c (do_module_cleanup)"
    },
    {
      "sha": "82ffb8e5e98507f054ef50a1d67851ae142bd22b",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 17,
      "deletions": 58,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac51ab78d4bee5273c7d6306ff6d41545fd5628/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac51ab78d4bee5273c7d6306ff6d41545fd5628/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=bac51ab78d4bee5273c7d6306ff6d41545fd5628",
      "patch": "@@ -493,33 +493,18 @@ get_expr_block_and_pc (CORE_ADDR *pc)\n   return block;\n }\n \n-/* Call buildargv (via gdb_argv), set its result for S into *ARGVP but\n-   calculate also the number of parsed arguments into *ARGCP.  If\n-   buildargv has returned NULL then *ARGCP is set to zero.  */\n-\n-static void\n-build_argc_argv (const char *s, int *argcp, char ***argvp)\n-{\n-  gdb_argv args (s);\n-\n-  *argcp = args.count ();\n-  *argvp = args.release ();\n-}\n-\n /* String for 'set compile-args' and 'show compile-args'.  */\n static char *compile_args;\n \n-/* Parsed form of COMPILE_ARGS.  COMPILE_ARGS_ARGV is NULL terminated.  */\n-static int compile_args_argc;\n-static char **compile_args_argv;\n+/* Parsed form of COMPILE_ARGS.  */\n+static gdb_argv compile_args_argv;\n \n /* Implement 'set compile-args'.  */\n \n static void\n set_compile_args (const char *args, int from_tty, struct cmd_list_element *c)\n {\n-  freeargv (compile_args_argv);\n-  build_argc_argv (compile_args, &compile_args_argc, &compile_args_argv);\n+  compile_args_argv = gdb_argv (compile_args);\n }\n \n /* Implement 'show compile-args'.  */\n@@ -533,21 +518,6 @@ show_compile_args (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n-/* Append ARGC and ARGV (as parsed by build_argc_argv) to *ARGCP and *ARGVP.\n-   ARGCP+ARGVP can be zero+NULL and also ARGC+ARGV can be zero+NULL.  */\n-\n-static void\n-append_args (int *argcp, char ***argvp, int argc, char **argv)\n-{\n-  int argi;\n-\n-  *argvp = XRESIZEVEC (char *, *argvp, (*argcp + argc + 1));\n-\n-  for (argi = 0; argi < argc; argi++)\n-    (*argvp)[(*argcp)++] = xstrdup (argv[argi]);\n-  (*argvp)[(*argcp)] = NULL;\n-}\n-\n /* String for 'set compile-gcc' and 'show compile-gcc'.  */\n static char *compile_gcc;\n \n@@ -586,10 +556,10 @@ get_selected_pc_producer_options (void)\n   return cs;\n }\n \n-/* Filter out unwanted options from *ARGCP and ARGV.  */\n+/* Filter out unwanted options from ARGV.  */\n \n static void\n-filter_args (int *argcp, char **argv)\n+filter_args (char **argv)\n {\n   char **destv;\n \n@@ -599,7 +569,6 @@ filter_args (int *argcp, char **argv)\n       if (strcmp (*argv, \"-fpreprocessed\") == 0)\n \t{\n \t  xfree (*argv);\n-\t  (*argcp)--;\n \t  continue;\n \t}\n       *destv++ = *argv;\n@@ -627,35 +596,26 @@ filter_args (int *argcp, char **argv)\n    appended last so as to override any of the arguments automatically\n    generated above.  */\n \n-static void\n-get_args (const compile_instance *compiler, struct gdbarch *gdbarch,\n-\t  int *argcp, char ***argvp)\n+static gdb_argv\n+get_args (const compile_instance *compiler, struct gdbarch *gdbarch)\n {\n   const char *cs_producer_options;\n-  int argc_compiler;\n-  char **argv_compiler;\n \n-  build_argc_argv (gdbarch_gcc_target_options (gdbarch).c_str (),\n-\t\t   argcp, argvp);\n+  gdb_argv result (gdbarch_gcc_target_options (gdbarch).c_str ());\n \n   cs_producer_options = get_selected_pc_producer_options ();\n   if (cs_producer_options != NULL)\n     {\n-      int argc_producer;\n-      char **argv_producer;\n+      gdb_argv argv_producer (cs_producer_options);\n+      filter_args (argv_producer.get ());\n \n-      build_argc_argv (cs_producer_options, &argc_producer, &argv_producer);\n-      filter_args (&argc_producer, argv_producer);\n-      append_args (argcp, argvp, argc_producer, argv_producer);\n-      freeargv (argv_producer);\n+      result.append (std::move (argv_producer));\n     }\n \n-  build_argc_argv (compiler->gcc_target_options ().c_str (),\n-\t\t   &argc_compiler, &argv_compiler);\n-  append_args (argcp, argvp, argc_compiler, argv_compiler);\n-  freeargv (argv_compiler);\n+  result.append (gdb_argv (compiler->gcc_target_options ().c_str ()));\n+  result.append (compile_args_argv);\n \n-  append_args (argcp, argvp, compile_args_argc, compile_args_argv);\n+  return result;\n }\n \n /* A helper function suitable for use as the \"print_callback\" in the\n@@ -677,8 +637,6 @@ compile_to_object (struct command_line *cmd, const char *cmd_string,\n {\n   const struct block *expr_block;\n   CORE_ADDR trash_pc, expr_pc;\n-  int argc;\n-  char **argv;\n   int ok;\n   struct gdbarch *gdbarch = get_current_arch ();\n   std::string triplet_rx;\n@@ -750,8 +708,9 @@ compile_to_object (struct command_line *cmd, const char *cmd_string,\n     }\n \n   /* Set compiler command-line arguments.  */\n-  get_args (compiler.get (), gdbarch, &argc, &argv);\n-  gdb_argv argv_holder (argv);\n+  gdb_argv argv_holder = get_args (compiler.get (), gdbarch);\n+  int argc = argv_holder.count ();\n+  char **argv = argv_holder.get ();\n \n   gdb::unique_xmalloc_ptr<char> error_message;\n   error_message.reset (compiler->set_arguments (argc, argv,"
    },
    {
      "sha": "6948908a317259647c2053bc5d18a9ebe2bec586",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bac51ab78d4bee5273c7d6306ff6d41545fd5628/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bac51ab78d4bee5273c7d6306ff6d41545fd5628/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=bac51ab78d4bee5273c7d6306ff6d41545fd5628",
      "patch": "@@ -165,6 +165,20 @@ class gdb_argv\n   gdb_argv (const gdb_argv &) = delete;\n   gdb_argv &operator= (const gdb_argv &) = delete;\n \n+  gdb_argv &operator= (gdb_argv &&other)\n+  {\n+    freeargv (m_argv);\n+    m_argv = other.m_argv;\n+    other.m_argv = nullptr;\n+    return *this;\n+  }\n+\n+  gdb_argv (gdb_argv &&other)\n+  {\n+    m_argv = other.m_argv;\n+    other.m_argv = nullptr;\n+  }\n+\n   ~gdb_argv ()\n   {\n     freeargv (m_argv);\n@@ -218,6 +232,35 @@ class gdb_argv\n     return gdb::array_view<char *> (this->get (), this->count ());\n   }\n \n+  /* Append arguments to this array.  */\n+  void append (gdb_argv &&other)\n+  {\n+    int size = count ();\n+    int argc = other.count ();\n+    m_argv = XRESIZEVEC (char *, m_argv, (size + argc + 1));\n+\n+    for (int argi = 0; argi < argc; argi++)\n+      {\n+\t/* Transfer ownership of the string.  */\n+\tm_argv[size++] = other.m_argv[argi];\n+\t/* Ensure that destruction of OTHER works correctly.  */\n+\tother.m_argv[argi] = nullptr;\n+      }\n+    m_argv[size] = nullptr;\n+  }\n+\n+  /* Append arguments to this array.  */\n+  void append (const gdb_argv &other)\n+  {\n+    int size = count ();\n+    int argc = other.count ();\n+    m_argv = XRESIZEVEC (char *, m_argv, (size + argc + 1));\n+\n+    for (int argi = 0; argi < argc; argi++)\n+      m_argv[size++] = xstrdup (other.m_argv[argi]);\n+    m_argv[size] = nullptr;\n+  }\n+\n   /* The iterator type.  */\n \n   typedef char **iterator;"
    }
  ]
}