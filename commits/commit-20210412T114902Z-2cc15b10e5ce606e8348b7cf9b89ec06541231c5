{
  "sha": "2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmNjMTViMTBlNWNlNjA2ZTgzNDhiN2NmOWI4OWVjMDY1NDEyMzFjNQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-04-12T07:46:03Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-04-12T11:49:02Z"
    },
    "message": "convert elf_link_hash macros to inline functions\n\nInvolves a bit of editing as we now need to be more precise in pointer\ntypes.\n\nbfd/\n\t* elf-bfd.h (is_elf_hash_table): Convert macro to inline function.\n\t(elf_link_hash_lookup, elf_link_hash_traverse): Likewise.\n\t(elf_hash_table, elf_hash_table_id): Likewise.\n\t* elf32-arm.c (elf32_arm_setup_section_lists): Delete redundant\n\tis_elf_hash_table check.\n\t* elf32-csky.c (elf32_csky_setup_section_lists): Likewise.\n\t* elf32-hppa.c (clobber_millicode_symbols): Correct param types.\n\t* elf64-alpha.c (elf64_alpha_output_extsym): Likewise.\n\t* elfnn-ia64.c (elfNN_ia64_global_dyn_info_free: Likewise.\n\t(elfNN_ia64_global_dyn_sym_thunk: Likewise.\n\t* elf64-ia64-vms.c (elf64_ia64_global_dyn_info_free): Likewise.\n\t(elf64_ia64_global_dyn_sym_thunk): Likewise.\n\t(elf64_vms_link_add_object_symbols): Pass base type of hash table\n\tto is_elf_hash_table.\n\t* elflink.c (_bfd_elf_dynamic_symbol_p): Likewise.\n\t(_bfd_elf_symbol_refs_local_p, _bfd_elf_add_dynamic_entry): Likewise.\n\t(_bfd_elf_strip_zero_sized_dynamic_sections): Likewise.\n\t(_bfd_elf_link_check_relocs, elf_link_add_object_symbols): Likewise.\n\t(bfd_elf_final_link): Likewise.\n\t* elfnn-aarch64.c (elfNN_aarch64_setup_section_lists): Likewise.\n\t* elf64-ppc.c (ppc64_elf_set_toc): Likewise.  Use bfd_link_hash_lookup.\nld/\n\t* emultempl/mipself.em (mips_create_output_section_statements):\n\tPass base type of hash table to is_elf_hash_table.\n\t* ldelf.c (ldelf_after_open): Likewise.",
    "tree": {
      "sha": "583cb501aed91a00ff9d41c3ce46a3eef8e3e843",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/583cb501aed91a00ff9d41c3ce46a3eef8e3e843"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b585e899960202fbe3c137cbf765f75b088592fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b585e899960202fbe3c137cbf765f75b088592fe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b585e899960202fbe3c137cbf765f75b088592fe"
    }
  ],
  "stats": {
    "total": 157,
    "additions": 101,
    "deletions": 56
  },
  "files": [
    {
      "sha": "84f16fc21768d8f52a90016bf7cea3a957dceec9",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -1,3 +1,27 @@\n+2021-04-12  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf-bfd.h (is_elf_hash_table): Convert macro to inline function.\n+\t(elf_link_hash_lookup, elf_link_hash_traverse): Likewise.\n+\t(elf_hash_table, elf_hash_table_id): Likewise.\n+\t* elf32-arm.c (elf32_arm_setup_section_lists): Delete redundant\n+\tis_elf_hash_table check.\n+\t* elf32-csky.c (elf32_csky_setup_section_lists): Likewise.\n+\t* elf32-hppa.c (clobber_millicode_symbols): Correct param types.\n+\t* elf64-alpha.c (elf64_alpha_output_extsym): Likewise.\n+\t* elfnn-ia64.c (elfNN_ia64_global_dyn_info_free: Likewise.\n+\t(elfNN_ia64_global_dyn_sym_thunk: Likewise.\n+\t* elf64-ia64-vms.c (elf64_ia64_global_dyn_info_free): Likewise.\n+\t(elf64_ia64_global_dyn_sym_thunk): Likewise.\n+\t(elf64_vms_link_add_object_symbols): Pass base type of hash table\n+\tto is_elf_hash_table.\n+\t* elflink.c (_bfd_elf_dynamic_symbol_p): Likewise.\n+\t(_bfd_elf_symbol_refs_local_p, _bfd_elf_add_dynamic_entry): Likewise.\n+\t(_bfd_elf_strip_zero_sized_dynamic_sections): Likewise.\n+\t(_bfd_elf_link_check_relocs, elf_link_add_object_symbols): Likewise.\n+\t(bfd_elf_final_link): Likewise.\n+\t* elfnn-aarch64.c (elfNN_aarch64_setup_section_lists): Likewise.\n+\t* elf64-ppc.c (ppc64_elf_set_toc): Likewise.  Use bfd_link_hash_lookup.\n+\n 2021-04-12  Alan Modra  <amodra@gmail.com>\n \n \t* elf-bfd.h (struct elf_backend_data): Return bfd_link_hash_entry*"
    },
    {
      "sha": "e0b7e5759ad5553385bfe2fc89aa82dc5475f156",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 34,
      "deletions": 15,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -707,30 +707,49 @@ struct elf_link_hash_table\n   asection *dynsym;\n };\n \n+/* Returns TRUE if the hash table is a struct elf_link_hash_table.  */\n+\n+static inline bool\n+is_elf_hash_table (const struct bfd_link_hash_table *htab)\n+{\n+  return htab->type == bfd_link_elf_hash_table;\n+}\n+\n /* Look up an entry in an ELF linker hash table.  */\n \n-#define elf_link_hash_lookup(table, string, create, copy, follow)\t\\\n-  ((struct elf_link_hash_entry *)\t\t\t\t\t\\\n-   bfd_link_hash_lookup (&(table)->root, (string), (create),\t\t\\\n-\t\t\t (copy), (follow)))\n+static inline struct elf_link_hash_entry *\n+elf_link_hash_lookup (struct elf_link_hash_table *table, const char *string,\n+\t\t      bool create, bool copy, bool follow)\n+{\n+  return (struct elf_link_hash_entry *)\n+    bfd_link_hash_lookup (&table->root, string, create, copy, follow);\n+}\n \n /* Traverse an ELF linker hash table.  */\n \n-#define elf_link_hash_traverse(table, func, info)\t\t\t\\\n-  (bfd_link_hash_traverse\t\t\t\t\t\t\\\n-   (&(table)->root,\t\t\t\t\t\t\t\\\n-    (bool (*) (struct bfd_link_hash_entry *, void *)) (func),\t\t\\\n-    (info)))\n+static inline void\n+elf_link_hash_traverse (struct elf_link_hash_table *table,\n+\t\t\tbool (*f) (struct elf_link_hash_entry *, void *),\n+\t\t\tvoid *info)\n+{\n+  bfd_link_hash_traverse (&table->root,\n+\t\t\t  (bool (*) (struct bfd_link_hash_entry *, void *)) f,\n+\t\t\t  info);\n+}\n \n /* Get the ELF linker hash table from a link_info structure.  */\n \n-#define elf_hash_table(p) ((struct elf_link_hash_table *) ((p)->hash))\n-\n-#define elf_hash_table_id(table)\t((table) -> hash_table_id)\n+static inline struct elf_link_hash_table *\n+elf_hash_table (const struct bfd_link_info *info)\n+{\n+  return (struct elf_link_hash_table *) info->hash;\n+}\n \n-/* Returns TRUE if the hash table is a struct elf_link_hash_table.  */\n-#define is_elf_hash_table(htab)\t\t\t\t\t\t\\\n-  (((struct bfd_link_hash_table *) (htab))->type == bfd_link_elf_hash_table)\n+static inline enum elf_target_id\n+elf_hash_table_id (const struct elf_link_hash_table *table)\n+{\n+  return table->hash_table_id;\n+}\n \f\n /* Constant information held for an ELF backend.  */\n "
    },
    {
      "sha": "29656a7ab63405a0cd29fdf693563bca3b768657",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -5262,8 +5262,6 @@ elf32_arm_setup_section_lists (bfd *output_bfd,\n \n   if (htab == NULL)\n     return 0;\n-  if (! is_elf_hash_table (htab))\n-    return 0;\n \n   /* Count the number of input BFDs and find the top input section id.  */\n   for (input_bfd = info->input_bfds, bfd_count = 0, top_id = 0;"
    },
    {
      "sha": "f8209a4a7da46bd9b144a3e0dc7d2b7dc5c95384",
      "filename": "bfd/elf32-csky.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf32-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf32-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-csky.c?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -3865,8 +3865,6 @@ elf32_csky_setup_section_lists (bfd *output_bfd,\n \n   if (!htab)\n     return 0;\n-  if (! is_elf_hash_table (htab))\n-    return 0;\n \n   /* Count the number of input BFDs and find the top input section id.  */\n   for (input_bfd = info->input_bfds, bfd_count = 0, top_id = 0;"
    },
    {
      "sha": "77170dd4ea65639657e1998d7951b531ec509cef",
      "filename": "bfd/elf32-hppa.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf32-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf32-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-hppa.c?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -2031,13 +2031,11 @@ allocate_dynrelocs (struct elf_link_hash_entry *eh, void *inf)\n \n static bool\n clobber_millicode_symbols (struct elf_link_hash_entry *eh,\n-\t\t\t   struct bfd_link_info *info)\n+\t\t\t   void *info)\n {\n   if (eh->type == STT_PARISC_MILLI\n       && !eh->forced_local)\n-    {\n-      elf32_hppa_hide_symbol (info, eh, true);\n-    }\n+    elf32_hppa_hide_symbol ((struct bfd_link_info *) info, eh, true);\n   return true;\n }\n "
    },
    {
      "sha": "6f5eeadf256b21c6ca562564a72bc367c384cb4a",
      "filename": "bfd/elf64-alpha.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf64-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf64-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-alpha.c?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -1558,8 +1558,9 @@ struct extsym_info\n };\n \n static bool\n-elf64_alpha_output_extsym (struct alpha_elf_link_hash_entry *h, void * data)\n+elf64_alpha_output_extsym (struct elf_link_hash_entry *x, void * data)\n {\n+  struct alpha_elf_link_hash_entry *h = (struct alpha_elf_link_hash_entry *) x;\n   struct extsym_info *einfo = (struct extsym_info *) data;\n   bool strip;\n   asection *sec, *output_section;"
    },
    {
      "sha": "c72015b450c570187e08664f9f78ab727a3292d5",
      "filename": "bfd/elf64-ia64-vms.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf64-ia64-vms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf64-ia64-vms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ia64-vms.c?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -990,7 +990,7 @@ elf64_ia64_local_htab_eq (const void *ptr1, const void *ptr2)\n /* Free the global elf64_ia64_dyn_sym_info array.  */\n \n static bool\n-elf64_ia64_global_dyn_info_free (void **xentry,\n+elf64_ia64_global_dyn_info_free (struct elf_link_hash_entry *xentry,\n \t\t\t\t void * unused ATTRIBUTE_UNUSED)\n {\n   struct elf64_ia64_link_hash_entry *entry\n@@ -1090,7 +1090,7 @@ struct elf64_ia64_dyn_sym_traverse_data\n };\n \n static bool\n-elf64_ia64_global_dyn_sym_thunk (struct bfd_hash_entry *xentry,\n+elf64_ia64_global_dyn_sym_thunk (struct elf_link_hash_entry *xentry,\n \t\t\t\t void * xdata)\n {\n   struct elf64_ia64_link_hash_entry *entry\n@@ -4767,7 +4767,7 @@ elf64_vms_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t hope of using a dynamic object which does not exactly match\n \t the format of the output file.  */\n       if (bfd_link_relocatable (info)\n-\t  || !is_elf_hash_table (htab)\n+\t  || !is_elf_hash_table (&htab->root)\n \t  || info->output_bfd->xvec != abfd->xvec)\n \t{\n \t  if (bfd_link_relocatable (info))\n@@ -4786,15 +4786,15 @@ elf64_vms_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t format.  FIXME: If there are no input BFD's of the same\n \t format as the output, we can't make a shared library.  */\n       if (bfd_link_pic (info)\n-\t  && is_elf_hash_table (htab)\n+\t  && is_elf_hash_table (&htab->root)\n \t  && info->output_bfd->xvec == abfd->xvec\n \t  && !htab->dynamic_sections_created)\n \t{\n \t  if (! elf64_ia64_create_dynamic_sections (abfd, info))\n \t    goto error_return;\n \t}\n     }\n-  else if (!is_elf_hash_table (htab))\n+  else if (!is_elf_hash_table (&htab->root))\n     goto error_return;\n   else\n     {\n@@ -5034,7 +5034,7 @@ elf64_vms_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \n       *sym_hash = h;\n \n-      if (is_elf_hash_table (htab))\n+      if (is_elf_hash_table (&htab->root))\n \t{\n \t  while (h->root.type == bfd_link_hash_indirect\n \t\t || h->root.type == bfd_link_hash_warning)\n@@ -5103,7 +5103,7 @@ elf64_vms_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t    h->root.u.c.p->alignment_power = old_alignment;\n \t}\n \n-      if (is_elf_hash_table (htab))\n+      if (is_elf_hash_table (&htab->root))\n \t{\n \t  /* Check the alignment when a common symbol is involved. This\n \t     can change when a common symbol is overridden by a normal\n@@ -5257,7 +5257,7 @@ elf64_vms_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n      I have no idea how to handle linking PIC code into a file of a\n      different format.  It probably can't be done.  */\n   if (! dynamic\n-      && is_elf_hash_table (htab)\n+      && is_elf_hash_table (&htab->root)\n       && bed->check_relocs != NULL\n       && (*bed->relocs_compatible) (abfd->xvec, info->output_bfd->xvec))\n     {"
    },
    {
      "sha": "08227f0e43ab5b2e98aaff5ac56822970bfed162",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -13955,19 +13955,20 @@ ppc64_elf_set_toc (struct bfd_link_info *info, bfd *obfd)\n       struct elf_link_hash_entry *h;\n       struct elf_link_hash_table *htab = elf_hash_table (info);\n \n-      if (is_elf_hash_table (htab)\n+      if (is_elf_hash_table (&htab->root)\n \t  && htab->hgot != NULL)\n \th = htab->hgot;\n       else\n \t{\n-\t  h = elf_link_hash_lookup (htab, \".TOC.\", false, false, true);\n-\t  if (is_elf_hash_table (htab))\n+\t  h = (struct elf_link_hash_entry *)\n+\t    bfd_link_hash_lookup (&htab->root, \".TOC.\", false, false, true);\n+\t  if (is_elf_hash_table (&htab->root))\n \t    htab->hgot = h;\n \t}\n       if (h != NULL\n \t  && h->root.type == bfd_link_hash_defined\n \t  && !h->root.linker_def\n-\t  && (!is_elf_hash_table (htab)\n+\t  && (!is_elf_hash_table (&htab->root)\n \t      || h->def_regular))\n \t{\n \t  TOCstart = defined_sym_val (h) - TOC_BASE_OFF;"
    },
    {
      "sha": "cb38a025349bb44fede8f1bf11e98e23a0046446",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -3244,7 +3244,7 @@ _bfd_elf_dynamic_symbol_p (struct elf_link_hash_entry *h,\n \n     case STV_PROTECTED:\n       hash_table = elf_hash_table (info);\n-      if (!is_elf_hash_table (hash_table))\n+      if (!is_elf_hash_table (&hash_table->root))\n \treturn false;\n \n       bed = get_elf_backend_data (hash_table->dynobj);\n@@ -3328,7 +3328,7 @@ _bfd_elf_symbol_refs_local_p (struct elf_link_hash_entry *h,\n     return false;\n \n   hash_table = elf_hash_table (info);\n-  if (!is_elf_hash_table (hash_table))\n+  if (!is_elf_hash_table (&hash_table->root))\n     return true;\n \n   bed = get_elf_backend_data (hash_table->dynobj);\n@@ -3522,7 +3522,7 @@ _bfd_elf_add_dynamic_entry (struct bfd_link_info *info,\n   Elf_Internal_Dyn dyn;\n \n   hash_table = elf_hash_table (info);\n-  if (! is_elf_hash_table (hash_table))\n+  if (! is_elf_hash_table (&hash_table->root))\n     return false;\n \n   if (tag == DT_RELA || tag == DT_REL)\n@@ -3566,7 +3566,7 @@ _bfd_elf_strip_zero_sized_dynamic_sections (struct bfd_link_info *info)\n     return true;\n \n   hash_table = elf_hash_table (info);\n-  if (!is_elf_hash_table (hash_table))\n+  if (!is_elf_hash_table (&hash_table->root))\n     return false;\n \n   if (!hash_table->dynobj)\n@@ -3997,7 +3997,7 @@ _bfd_elf_link_check_relocs (bfd *abfd, struct bfd_link_info *info)\n      I have no idea how to handle linking PIC code into a file of a\n      different format.  It probably can't be done.  */\n   if ((abfd->flags & DYNAMIC) == 0\n-      && is_elf_hash_table (htab)\n+      && is_elf_hash_table (&htab->root)\n       && bed->check_relocs != NULL\n       && elf_object_id (abfd) == elf_hash_table_id (htab)\n       && (*bed->relocs_compatible) (abfd->xvec, info->output_bfd->xvec))\n@@ -4094,7 +4094,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t hope of using a dynamic object which does not exactly match\n \t the format of the output file.  */\n       if (bfd_link_relocatable (info)\n-\t  || !is_elf_hash_table (htab)\n+\t  || !is_elf_hash_table (&htab->root)\n \t  || info->output_bfd->xvec != abfd->xvec)\n \t{\n \t  if (bfd_link_relocatable (info))\n@@ -4202,15 +4202,15 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t      || (!bfd_link_relocatable (info)\n \t\t  && info->nointerp\n \t\t  && (info->export_dynamic || info->dynamic)))\n-\t  && is_elf_hash_table (htab)\n+\t  && is_elf_hash_table (&htab->root)\n \t  && info->output_bfd->xvec == abfd->xvec\n \t  && !htab->dynamic_sections_created)\n \t{\n \t  if (! _bfd_elf_link_create_dynamic_sections (abfd, info))\n \t    goto error_return;\n \t}\n     }\n-  else if (!is_elf_hash_table (htab))\n+  else if (!is_elf_hash_table (&htab->root))\n     goto error_return;\n   else\n     {\n@@ -4794,7 +4794,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n       old_bfd = NULL;\n       new_sec = sec;\n \n-      if (is_elf_hash_table (htab))\n+      if (is_elf_hash_table (&htab->root))\n \t{\n \t  Elf_Internal_Versym iver;\n \t  unsigned int vernum = 0;\n@@ -4970,15 +4970,15 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \n       /* Setting the index to -3 tells elf_link_output_extsym that\n \t this symbol is defined in a discarded section.  */\n-      if (discarded && is_elf_hash_table (htab))\n+      if (discarded && is_elf_hash_table (&htab->root))\n \th->indx = -3;\n \n       new_weak = (flags & BSF_WEAK) != 0;\n       if (dynamic\n \t  && definition\n \t  && new_weak\n \t  && !bed->is_function_type (ELF_ST_TYPE (isym->st_info))\n-\t  && is_elf_hash_table (htab)\n+\t  && is_elf_hash_table (&htab->root)\n \t  && h->u.alias == NULL)\n \t{\n \t  /* Keep a list of all weak defined non function symbols from\n@@ -5017,7 +5017,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t    h->root.u.c.p->alignment_power = old_alignment;\n \t}\n \n-      if (is_elf_hash_table (htab))\n+      if (is_elf_hash_table (&htab->root))\n \t{\n \t  /* Set a flag in the hash table entry indicating the type of\n \t     reference or definition we just found.  A dynamic symbol\n@@ -5679,7 +5679,7 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n      of the .stab/.stabstr sections.  */\n   if (! dynamic\n       && ! info->traditional_format\n-      && is_elf_hash_table (htab)\n+      && is_elf_hash_table (&htab->root)\n       && (info->strip != strip_all && info->strip != strip_debugger))\n     {\n       asection *stabstr;\n@@ -12074,7 +12074,7 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n   bool sections_removed;\n   bool ret;\n \n-  if (!is_elf_hash_table (htab))\n+  if (!is_elf_hash_table (&htab->root))\n     return false;\n \n   if (bfd_link_pic (info))"
    },
    {
      "sha": "0a1d7a617c83c4c8c9dcc33fe2ac7fd7722d7f0b",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -3423,7 +3423,7 @@ elfNN_aarch64_setup_section_lists (bfd *output_bfd,\n   struct elf_aarch64_link_hash_table *htab =\n     elf_aarch64_hash_table (info);\n \n-  if (!is_elf_hash_table (htab))\n+  if (!is_elf_hash_table (&htab->root.root))\n     return 0;\n \n   /* Count the number of input BFDs and find the top input section id.  */"
    },
    {
      "sha": "d469925697d97d0b8fd1dfb2daa55a55f5502f5b",
      "filename": "bfd/elfnn-ia64.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elfnn-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/bfd/elfnn-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-ia64.c?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -1391,8 +1391,8 @@ elfNN_ia64_local_htab_eq (const void *ptr1, const void *ptr2)\n /* Free the global elfNN_ia64_dyn_sym_info array.  */\n \n static bool\n-elfNN_ia64_global_dyn_info_free (void **xentry,\n-\t\t\t\t void * unused ATTRIBUTE_UNUSED)\n+elfNN_ia64_global_dyn_info_free (struct elf_link_hash_entry *xentry,\n+\t\t\t\t void *unused ATTRIBUTE_UNUSED)\n {\n   struct elfNN_ia64_link_hash_entry *entry\n     = (struct elfNN_ia64_link_hash_entry *) xentry;\n@@ -1489,7 +1489,7 @@ struct elfNN_ia64_dyn_sym_traverse_data\n };\n \n static bool\n-elfNN_ia64_global_dyn_sym_thunk (struct bfd_hash_entry *xentry,\n+elfNN_ia64_global_dyn_sym_thunk (struct elf_link_hash_entry *xentry,\n \t\t\t\t void * xdata)\n {\n   struct elfNN_ia64_link_hash_entry *entry"
    },
    {
      "sha": "244f286a0a3cd604d7f7d2f422bfeb455542aabc",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -1,3 +1,9 @@\n+2021-04-12  Alan Modra  <amodra@gmail.com>\n+\n+\t* emultempl/mipself.em (mips_create_output_section_statements):\n+\tPass base type of hash table to is_elf_hash_table.\n+\t* ldelf.c (ldelf_after_open): Likewise.\n+\n 2021-04-12  Alan Modra  <amodra@gmail.com>\n \n \tPR 27719"
    },
    {
      "sha": "a31ad4466df3c2f07764ef99474481db58835d82",
      "filename": "ld/emultempl/mipself.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/ld/emultempl/mipself.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/ld/emultempl/mipself.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/mipself.em?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -197,7 +197,7 @@ mips_create_output_section_statements (void)\n   struct elf_link_hash_table *htab;\n \n   htab = elf_hash_table (&link_info);\n-  if (is_elf_hash_table (htab) && is_mips_elf (link_info.output_bfd))\n+  if (is_elf_hash_table (&htab->root) && is_mips_elf (link_info.output_bfd))\n     _bfd_mips_elf_linker_flags (&link_info, insn32, ignore_branch_isa,\n \t\t\t\t${gnu_target});\n "
    },
    {
      "sha": "4d4d9ca051796a07b8b67f8a658b86a5c9092670",
      "filename": "ld/ldelf.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/ld/ldelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2cc15b10e5ce606e8348b7cf9b89ec06541231c5/ld/ldelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelf.c?ref=2cc15b10e5ce606e8348b7cf9b89ec06541231c5",
      "patch": "@@ -1001,7 +1001,7 @@ ldelf_after_open (int use_libpath, int native, int is_linux, int is_freebsd,\n   after_open_default ();\n \n   htab = elf_hash_table (&link_info);\n-  if (!is_elf_hash_table (htab))\n+  if (!is_elf_hash_table (&htab->root))\n     return;\n \n   if (command_line.out_implib_filename)"
    }
  ]
}