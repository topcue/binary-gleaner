{
  "sha": "2554f6f564097e4e3a4132d3af8ef78d588d13d1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjU1NGY2ZjU2NDA5N2U0ZTNhNDEzMmQzYWY4ZWY3OGQ1ODhkMTNkMQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-10-02T18:45:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-10-02T18:46:56Z"
    },
    "message": "gdb: give names to event loop file handlers\n\nAssign names to event loop file handlers.  They will be used in debug\nmessages when file handlers are invoked.\n\nIn GDB, each UI used to get its own unique number, until commit\ncbe256847e19 (\"Remove ui::num\").  Re-introduce this field, and use it to\nmake a unique name for the handler.\n\nI'm not too sure what goes on in ser-base.c, all I know is that it's\nwhat is used when debugging remotely.  I've just named the main handler\n\"serial\".  It would be good to have unique names there too.  For instance\nwhen debugging with two different remote connections, we'd ideally want\nthe handlers to have unique names.  I didn't do it in this patch though.\n\ngdb/ChangeLog:\n\n\t* async-event.c (initialize_async_signal_handlers): Pass name to\n\tadd_file_handler\n\t* event-top.c (ui_register_input_event_handler): Likewise.\n\t* linux-nat.c (linux_nat_target::async): Likewise.\n\t* run-on-main-thread.c (_initialize_run_on_main_thread):\n\tLikewise\n\t* ser-base.c (reschedule): Likewise.\n\t(ser_base_async): Likewise.\n\t* tui/tui-io.c: Likewise.\n\t* top.h (struct ui) <num>: New field.\n\t* top.c (highest_ui_num): New variable.\n\t(ui::ui): Initialize num.\n\ngdbserver/ChangeLog:\n\n\t* linux-low.cc (linux_process_target::async): Pass name to\n\tadd_file_handler.\n\t* remote-utils.cc (handle_accept_event): Likewise.\n\t(remote_open): Likewise.\n\ngdbsupport/ChangeLog:\n\n\t* event-loop.h (add_file_handler): Add \"name\" parameter.\n\t* event-loop.cc (struct file_handler) <name>: New field.\n\t(create_file_handler): Add \"name\" parameter, assign it to file\n\thandler.\n\t(add_file_handler): Add \"name\" parameter.\n\nChange-Id: I9f1545f73888ebb6778eb653a618ca44d105f92c",
    "tree": {
      "sha": "296af2f219dd484543ed7b43156cf347e4f6de36",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/296af2f219dd484543ed7b43156cf347e4f6de36"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2554f6f564097e4e3a4132d3af8ef78d588d13d1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2554f6f564097e4e3a4132d3af8ef78d588d13d1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2554f6f564097e4e3a4132d3af8ef78d588d13d1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2554f6f564097e4e3a4132d3af8ef78d588d13d1/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a7aba2668a7b392182e296392d8e19516e1a6ec5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7aba2668a7b392182e296392d8e19516e1a6ec5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a7aba2668a7b392182e296392d8e19516e1a6ec5"
    }
  ],
  "stats": {
    "total": 115,
    "additions": 85,
    "deletions": 30
  },
  "files": [
    {
      "sha": "48caf1e9057910e449d4d2f5c7af4a6c534cb179",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -1,3 +1,18 @@\n+2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* async-event.c (initialize_async_signal_handlers): Pass name to\n+\tadd_file_handler\n+\t* event-top.c (ui_register_input_event_handler): Likewise.\n+\t* linux-nat.c (linux_nat_target::async): Likewise.\n+\t* run-on-main-thread.c (_initialize_run_on_main_thread):\n+\tLikewise\n+\t* ser-base.c (reschedule): Likewise.\n+\t(ser_base_async): Likewise.\n+\t* tui/tui-io.c: Likewise.\n+\t* top.h (struct ui) <num>: New field.\n+\t* top.c (highest_ui_num): New variable.\n+\t(ui::ui): Initialize num.\n+\n 2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* observable.h <inferior_created>: Remove parameters.  Update all"
    },
    {
      "sha": "e5cd63e309e4c20195425e1498bec35d6911a208",
      "filename": "gdb/async-event.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/async-event.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/async-event.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/async-event.c?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -114,7 +114,7 @@ initialize_async_signal_handlers (void)\n   async_signal_handlers_serial_event = make_serial_event ();\n \n   add_file_handler (serial_event_fd (async_signal_handlers_serial_event),\n-\t\t    async_signals_handler, NULL);\n+\t\t    async_signals_handler, NULL, \"async-signals\");\n }\n \n \f"
    },
    {
      "sha": "c96f10450dda89d77d49227506d7488e4b44072f",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -524,7 +524,8 @@ stdin_event_handler (int error, gdb_client_data client_data)\n void\n ui_register_input_event_handler (struct ui *ui)\n {\n-  add_file_handler (ui->input_fd, stdin_event_handler, ui);\n+  add_file_handler (ui->input_fd, stdin_event_handler, ui,\n+\t\t    string_printf (\"ui-%d\", ui->num));\n }\n \n /* See top.h.  */"
    },
    {
      "sha": "7b9b267fc73f0d37a9d4ac3f2f6af44b31a6d23f",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -4123,7 +4123,8 @@ linux_nat_target::async (int enable)\n       if (!linux_async_pipe (1))\n \t{\n \t  add_file_handler (linux_nat_event_pipe[0],\n-\t\t\t    handle_target_event, NULL);\n+\t\t\t    handle_target_event, NULL,\n+\t\t\t    \"linux-nat\");\n \t  /* There may be pending events to handle.  Tell the event loop\n \t     to poll them.  */\n \t  async_file_mark ();"
    },
    {
      "sha": "1e7bb5f5f8e34e8019b31a8ef560d09afaac0505",
      "filename": "gdb/run-on-main-thread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/run-on-main-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/run-on-main-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/run-on-main-thread.c?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -94,5 +94,6 @@ void\n _initialize_run_on_main_thread ()\n {\n   runnable_event = make_serial_event ();\n-  add_file_handler (serial_event_fd (runnable_event), run_events, nullptr);\n+  add_file_handler (serial_event_fd (runnable_event), run_events, nullptr,\n+\t\t    \"run-on-main-thread\");\n }"
    },
    {
      "sha": "cb503f6141bf68d51a96963589e393a1c5fb979c",
      "filename": "gdb/ser-base.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/ser-base.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/ser-base.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ser-base.c?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -83,7 +83,7 @@ reschedule (struct serial *scb)\n \tcase NOTHING_SCHEDULED:\n \t  if (scb->bufcnt == 0)\n \t    {\n-\t      add_file_handler (scb->fd, fd_event, scb);\n+\t      add_file_handler (scb->fd, fd_event, scb, \"serial\");\n \t      next_state = FD_SCHEDULED;\n \t    }\n \t  else\n@@ -95,7 +95,7 @@ reschedule (struct serial *scb)\n \t  if (scb->bufcnt == 0)\n \t    {\n \t      delete_timer (scb->async_state);\n-\t      add_file_handler (scb->fd, fd_event, scb);\n+\t      add_file_handler (scb->fd, fd_event, scb, \"serial\");\n \t      next_state = FD_SCHEDULED;\n \t    }\n \t  else\n@@ -597,7 +597,7 @@ ser_base_async (struct serial *scb,\n       reschedule (scb);\n \n       if (scb->error_fd != -1)\n-\tadd_file_handler (scb->error_fd, handle_error_fd, scb);\n+\tadd_file_handler (scb->error_fd, handle_error_fd, scb, \"serial-error\");\n     }\n   else\n     {"
    },
    {
      "sha": "6233575eed68f55a35cbf6c0f8da6b5e2bd82ca9",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -270,10 +270,14 @@ void (*deprecated_call_command_hook) (struct cmd_list_element * c,\n \n void (*deprecated_context_hook) (int id);\n \n+/* The highest UI number ever assigned.  */\n+static int highest_ui_num;\n+\n /* See top.h.  */\n \n ui::ui (FILE *instream_, FILE *outstream_, FILE *errstream_)\n   : next (nullptr),\n+    num (++highest_ui_num),\n     call_readline (nullptr),\n     input_handler (nullptr),\n     command_editing (0),"
    },
    {
      "sha": "fd992977155f139f962244dad1c171a46420c175",
      "filename": "gdb/top.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/top.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/top.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.h?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -65,6 +65,9 @@ struct ui\n   /* Pointer to next in singly-linked list.  */\n   struct ui *next;\n \n+  /* Convenient handle (UI number).  Unique across all UIs.  */\n+  int num;\n+\n   /* The UI's command line buffer.  This is to used to accumulate\n      input until we have a whole command line.  */\n   struct buffer line_buffer;"
    },
    {
      "sha": "a4f931784161d7c2c2239f76750adfbb8a3e5035",
      "filename": "gdb/tui/tui-io.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/tui/tui-io.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdb/tui/tui-io.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-io.c?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -921,7 +921,7 @@ tui_initialize_io (void)\n   (void) fcntl (tui_readline_pipe[0], F_SETFL, O_NDELAY);\n #endif\n #endif\n-  add_file_handler (tui_readline_pipe[0], tui_readline_output, 0);\n+  add_file_handler (tui_readline_pipe[0], tui_readline_output, 0, \"tui\");\n #else\n   tui_rl_outstream = stdout;\n #endif"
    },
    {
      "sha": "9ed90bacd008afc18f3d9b744ff1c218c4b000fa",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -1,3 +1,10 @@\n+2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* linux-low.cc (linux_process_target::async): Pass name to\n+\tadd_file_handler.\n+\t* remote-utils.cc (handle_accept_event): Likewise.\n+\t(remote_open): Likewise.\n+\n 2020-10-01  Kamil Rytarowski  <n54@gmx.com>\n \n \t* netbsd-i386-low.cc: Add."
    },
    {
      "sha": "1ae72a21d6c65cdfd35e6455aed6aec799685f1a",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -6092,7 +6092,8 @@ linux_process_target::async (bool enable)\n \n \t  /* Register the event loop handler.  */\n \t  add_file_handler (linux_event_pipe[0],\n-\t\t\t    handle_target_event, NULL);\n+\t\t\t    handle_target_event, NULL,\n+\t\t\t    \"linux-low\");\n \n \t  /* Always trigger a linux_wait.  */\n \t  async_file_mark ();"
    },
    {
      "sha": "5a6ceb1d9a109b8c9df75eb605e226dd9ce993aa",
      "filename": "gdbserver/remote-utils.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbserver/remote-utils.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbserver/remote-utils.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/remote-utils.cc?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -194,7 +194,7 @@ handle_accept_event (int err, gdb_client_data client_data)\n   enable_async_notification (remote_desc);\n \n   /* Register the event loop handler.  */\n-  add_file_handler (remote_desc, handle_serial_event, NULL);\n+  add_file_handler (remote_desc, handle_serial_event, NULL, \"remote-net\");\n \n   /* We have a new GDB connection now.  If we were disconnected\n      tracing, there's a window where the target could report a stop\n@@ -331,7 +331,7 @@ remote_open (const char *name)\n       enable_async_notification (remote_desc);\n \n       /* Register the event loop handler.  */\n-      add_file_handler (remote_desc, handle_serial_event, NULL);\n+      add_file_handler (remote_desc, handle_serial_event, NULL, \"remote-stdio\");\n     }\n #ifndef USE_WIN32API\n   else if (port_str == NULL)\n@@ -372,7 +372,8 @@ remote_open (const char *name)\n       enable_async_notification (remote_desc);\n \n       /* Register the event loop handler.  */\n-      add_file_handler (remote_desc, handle_serial_event, NULL);\n+      add_file_handler (remote_desc, handle_serial_event, NULL,\n+\t\t\t\"remote-device\");\n     }\n #endif /* USE_WIN32API */\n   else\n@@ -398,7 +399,8 @@ remote_open (const char *name)\n       fflush (stderr);\n \n       /* Register the event loop handler.  */\n-      add_file_handler (listen_desc, handle_accept_event, NULL);\n+      add_file_handler (listen_desc, handle_accept_event, NULL,\n+\t\t\t\"remote-listen\");\n     }\n }\n "
    },
    {
      "sha": "b54bfb945ad93ad2437ca425b9619a83b40de5fb",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -1,3 +1,11 @@\n+2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* event-loop.h (add_file_handler): Add \"name\" parameter.\n+\t* event-loop.cc (struct file_handler) <name>: New field.\n+\t(create_file_handler): Add \"name\" parameter, assign it to file\n+\thandler.\n+\t(add_file_handler): Add \"name\" parameter.\n+\n 2020-10-01  Kamil Rytarowski  <n54@gmx.com>\n \n \t* agent.cc (gdb_connect_sync_socket): Preinitialize addr with zeros."
    },
    {
      "sha": "0d78122e0cc3f01c1c0f2ab21f175dc00a31bbfd",
      "filename": "gdbsupport/event-loop.cc",
      "status": "modified",
      "additions": 17,
      "deletions": 15,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbsupport/event-loop.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbsupport/event-loop.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/event-loop.cc?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -61,6 +61,9 @@ struct file_handler\n   /* Argument to pass to proc.  */\n   gdb_client_data client_data;\n \n+  /* User-friendly name of this handler.  Heap-allocated, owned by this.*/\n+  std::string *name;\n+\n   /* Was an error detected on this fd?  */\n   int error;\n \n@@ -160,7 +163,8 @@ static struct\n timer_list;\n \n static void create_file_handler (int fd, int mask, handler_func *proc,\n-\t\t\t\t gdb_client_data client_data);\n+\t\t\t\t gdb_client_data client_data,\n+\t\t\t\t std::string &&name);\n static int gdb_wait_for_event (int);\n static int update_wait_timeout (void);\n static int poll_timers (void);\n@@ -231,13 +235,11 @@ gdb_do_one_event (void)\n   return 1;\n }\n \n-\f\n+/* See event-loop.h  */\n \n-/* Wrapper function for create_file_handler, so that the caller\n-   doesn't have to know implementation details about the use of poll\n-   vs. select.  */\n void\n-add_file_handler (int fd, handler_func * proc, gdb_client_data client_data)\n+add_file_handler (int fd, handler_func *proc, gdb_client_data client_data,\n+\t\t  std::string &&name)\n {\n #ifdef HAVE_POLL\n   struct pollfd fds;\n@@ -263,21 +265,18 @@ add_file_handler (int fd, handler_func * proc, gdb_client_data client_data)\n   if (use_poll)\n     {\n #ifdef HAVE_POLL\n-      create_file_handler (fd, POLLIN, proc, client_data);\n+      create_file_handler (fd, POLLIN, proc, client_data, std::move (name));\n #else\n       internal_error (__FILE__, __LINE__,\n \t\t      _(\"use_poll without HAVE_POLL\"));\n #endif\n     }\n   else\n-    create_file_handler (fd, GDB_READABLE | GDB_EXCEPTION, \n-\t\t\t proc, client_data);\n+    create_file_handler (fd, GDB_READABLE | GDB_EXCEPTION,\n+\t\t\t proc, client_data, std::move (name));\n }\n \n-/* Add a file handler/descriptor to the list of descriptors we are\n-   interested in.\n-\n-   FD is the file descriptor for the file/stream to be listened to.\n+/* Helper for add_file_handler.\n \n    For the poll case, MASK is a combination (OR) of POLLIN,\n    POLLRDNORM, POLLRDBAND, POLLPRI, POLLOUT, POLLWRNORM, POLLWRBAND:\n@@ -289,8 +288,8 @@ add_file_handler (int fd, handler_func * proc, gdb_client_data client_data)\n    occurs for FD.  CLIENT_DATA is the argument to pass to PROC.  */\n \n static void\n-create_file_handler (int fd, int mask, handler_func * proc, \n-\t\t     gdb_client_data client_data)\n+create_file_handler (int fd, int mask, handler_func * proc,\n+\t\t     gdb_client_data client_data, std::string &&name)\n {\n   file_handler *file_ptr;\n \n@@ -358,6 +357,7 @@ create_file_handler (int fd, int mask, handler_func * proc,\n   file_ptr->proc = proc;\n   file_ptr->client_data = client_data;\n   file_ptr->mask = mask;\n+  file_ptr->name = new std::string (std::move (name));\n }\n \n /* Return the next file handler to handle, and advance to the next\n@@ -489,6 +489,8 @@ delete_file_handler (int fd)\n \t;\n       prev_ptr->next_file = file_ptr->next_file;\n     }\n+\n+  delete file_ptr->name;\n   xfree (file_ptr);\n }\n "
    },
    {
      "sha": "d7478b037a9c1465eebf0c57ef8b54ede3512e7f",
      "filename": "gdbsupport/event-loop.h",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbsupport/event-loop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2554f6f564097e4e3a4132d3af8ef78d588d13d1/gdbsupport/event-loop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/event-loop.h?ref=2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "patch": "@@ -78,8 +78,18 @@ typedef void (timer_handler_func) (gdb_client_data);\n \n extern int gdb_do_one_event (void);\n extern void delete_file_handler (int fd);\n-extern void add_file_handler (int fd, handler_func *proc, \n-\t\t\t      gdb_client_data client_data);\n+\n+/* Add a file handler/descriptor to the list of descriptors we are\n+   interested in.\n+\n+   FD is the file descriptor for the file/stream to be listened to.\n+\n+   NAME is a user-friendly name for the handler.  */\n+\n+extern void add_file_handler (int fd, handler_func *proc,\n+\t\t\t      gdb_client_data client_data,\n+\t\t\t      std::string &&name);\n+\n extern int create_timer (int milliseconds, \n \t\t\t timer_handler_func *proc, \n \t\t\t gdb_client_data client_data);"
    }
  ]
}