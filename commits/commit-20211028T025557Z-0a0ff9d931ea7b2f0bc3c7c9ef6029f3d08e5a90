{
  "sha": "0a0ff9d931ea7b2f0bc3c7c9ef6029f3d08e5a90",
  "node_id": "C_kwDOANOeidoAKDBhMGZmOWQ5MzFlYTdiMmYwYmMzYzdjOWVmNjAyOWYzZDA4ZTVhOTA",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-28T02:46:04Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-28T02:55:57Z"
    },
    "message": "asan: mmo: NULL dereferenc in mmo_xore_32\n\nmmo_get_loc can return NULL.  It's commented even, and that the caller\nthen must handle a split field.  mmo_xore_* don't handle split fields,\ninstead just segfault.  Stop that happening, and refuse to recognise\nfuzzed mmo files that trigger this problem.\n\n\t* mmo.c (mmo_get_loc): Don't declare inline.\n\t(mmo_xore_64, mmo_xore_32, mmo_xore_16): Remove forward decls.\n\tReturn pointer, don't dereference NULL.\n\t(mmo_scan): Return error on mmo_get_loc returning NULL.",
    "tree": {
      "sha": "dea3af14c54f3e21c2087cbdf27335f2aaab5157",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dea3af14c54f3e21c2087cbdf27335f2aaab5157"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0a0ff9d931ea7b2f0bc3c7c9ef6029f3d08e5a90",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a0ff9d931ea7b2f0bc3c7c9ef6029f3d08e5a90",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0a0ff9d931ea7b2f0bc3c7c9ef6029f3d08e5a90",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a0ff9d931ea7b2f0bc3c7c9ef6029f3d08e5a90/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "42eec46f230cb05873fdc7561057a6ae63d17ce4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42eec46f230cb05873fdc7561057a6ae63d17ce4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/42eec46f230cb05873fdc7561057a6ae63d17ce4"
    }
  ],
  "stats": {
    "total": 78,
    "additions": 56,
    "deletions": 22
  },
  "files": [
    {
      "sha": "2ee386662a425cc2d071e6d453c2e0ecddd7985c",
      "filename": "bfd/mmo.c",
      "status": "modified",
      "additions": 56,
      "deletions": 22,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a0ff9d931ea7b2f0bc3c7c9ef6029f3d08e5a90/bfd/mmo.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a0ff9d931ea7b2f0bc3c7c9ef6029f3d08e5a90/bfd/mmo.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mmo.c?ref=0a0ff9d931ea7b2f0bc3c7c9ef6029f3d08e5a90",
      "patch": "@@ -382,10 +382,7 @@ static bool mmo_scan (bfd *);\n static asection *mmo_decide_section (bfd *, bfd_vma);\n static asection *mmo_get_generic_spec_data_section (bfd *, int);\n static asection *mmo_get_spec_section (bfd *, int);\n-static inline bfd_byte *mmo_get_loc (asection *, bfd_vma, int);\n-static void mmo_xore_64 (asection *, bfd_vma vma, bfd_vma value);\n-static void mmo_xore_32 (asection *, bfd_vma vma, unsigned int);\n-static void mmo_xore_16 (asection *, bfd_vma vma, unsigned int);\n+static bfd_byte *mmo_get_loc (asection *, bfd_vma, int);\n static bfd_cleanup mmo_object_p (bfd *);\n static void mmo_map_set_sizes (bfd *, asection *, void *);\n static bool mmo_get_symbols (bfd *);\n@@ -741,38 +738,50 @@ mmo_decide_section (bfd *abfd, bfd_vma vma)\n \n /* Xor in a 64-bit value VALUE at VMA.  */\n \n-static inline void\n+static inline bfd_byte *\n mmo_xore_64 (asection *sec, bfd_vma vma, bfd_vma value)\n {\n   bfd_byte *loc = mmo_get_loc (sec, vma, 8);\n-  bfd_vma prev = bfd_get_64 (sec->owner, loc);\n+  if (loc)\n+    {\n+      bfd_vma prev = bfd_get_64 (sec->owner, loc);\n \n-  value ^= prev;\n-  bfd_put_64 (sec->owner, value, loc);\n+      value ^= prev;\n+      bfd_put_64 (sec->owner, value, loc);\n+    }\n+  return loc;\n }\n \n /* Xor in a 32-bit value VALUE at VMA.  */\n \n-static inline void\n+static inline bfd_byte *\n mmo_xore_32 (asection *sec, bfd_vma vma, unsigned int value)\n {\n   bfd_byte *loc = mmo_get_loc (sec, vma, 4);\n-  unsigned int prev = bfd_get_32 (sec->owner, loc);\n+  if (loc)\n+    {\n+      unsigned int prev = bfd_get_32 (sec->owner, loc);\n \n-  value ^= prev;\n-  bfd_put_32 (sec->owner, value, loc);\n+      value ^= prev;\n+      bfd_put_32 (sec->owner, value, loc);\n+    }\n+  return loc;\n }\n \n /* Xor in a 16-bit value VALUE at VMA.  */\n \n-static inline void\n+static inline bfd_byte *\n mmo_xore_16 (asection *sec, bfd_vma vma, unsigned int value)\n {\n   bfd_byte *loc = mmo_get_loc (sec, vma, 2);\n-  unsigned int prev = bfd_get_16 (sec->owner, loc);\n+  if (loc)\n+    {\n+      unsigned int prev = bfd_get_16 (sec->owner, loc);\n \n-  value ^= prev;\n-  bfd_put_16 (sec->owner, value, loc);\n+      value ^= prev;\n+      bfd_put_16 (sec->owner, value, loc);\n+    }\n+  return loc;\n }\n \n /* Write a 32-bit word to output file, no lop_quote generated.  */\n@@ -1472,7 +1481,7 @@ SUBSECTION\n    If there's new contents, allocate to the next multiple of\n    MMO_SEC_CONTENTS_CHUNK_SIZE.  */\n \n-static inline bfd_byte *\n+static bfd_byte *\n mmo_get_loc (asection *sec, bfd_vma vma, int size)\n {\n   bfd_size_type allocated_size;\n@@ -1647,7 +1656,11 @@ mmo_scan (bfd *abfd)\n \t      vma &= ~3;\n \t      if (sec == NULL)\n \t\tsec = bfd_make_section_old_way (abfd, MMO_TEXT_SECTION_NAME);\n-\t      mmo_xore_32 (sec, vma, bfd_get_32 (abfd, buf));\n+\t      if (!mmo_xore_32 (sec, vma, bfd_get_32 (abfd, buf)))\n+\t\t{\n+\t\t  bfd_set_error (bfd_error_bad_value);\n+\t\t  goto error_return;\n+\t\t}\n \t      vma += 4;\n \t      lineno++;\n \t      break;\n@@ -1738,7 +1751,11 @@ mmo_scan (bfd *abfd)\n \t\tfixosec = mmo_decide_section (abfd, p);\n \t\tif (fixosec == NULL)\n \t\t  goto error_return;\n-\t\tmmo_xore_64 (fixosec, p, vma);\n+\t\tif (!mmo_xore_64 (fixosec, p, vma))\n+\t\t  {\n+\t\t    bfd_set_error (bfd_error_bad_value);\n+\t\t    goto error_return;\n+\t\t  }\n \t      }\n \t    break;\n \n@@ -1750,7 +1767,11 @@ mmo_scan (bfd *abfd)\n \t\tasection *fixrsec = mmo_decide_section (abfd, p);\n \t\tif (fixrsec == NULL)\n \t\t  goto error_return;\n-\t\tmmo_xore_16 (fixrsec, p, yz);\n+\t\tif (!mmo_xore_16 (fixrsec, p, yz))\n+\t\t  {\n+\t\t    bfd_set_error (bfd_error_bad_value);\n+\t\t    goto error_return;\n+\t\t  }\n \t      }\n \t    break;\n \n@@ -1813,7 +1834,11 @@ mmo_scan (bfd *abfd)\n \t\tfixrsec = mmo_decide_section (abfd, vma);\n \t\tif (fixrsec == NULL)\n \t\t  goto error_return;\n-\t\tmmo_xore_32 (fixrsec, p, delta);\n+\t\tif (!mmo_xore_32 (fixrsec, p, delta))\n+\t\t  {\n+\t\t    bfd_set_error (bfd_error_bad_value);\n+\t\t    goto error_return;\n+\t\t  }\n \t      }\n \t    break;\n \n@@ -1937,6 +1962,11 @@ mmo_scan (bfd *abfd)\n \t\t    rsec->flags |= SEC_LINKER_CREATED;\n \t\t    rsec->vma = z * 8;\n \t\t    loc = mmo_get_loc (rsec, z * 8, (255 - z) * 8);\n+\t\t    if (!loc)\n+\t\t      {\n+\t\t\tbfd_set_error (bfd_error_bad_value);\n+\t\t\tgoto error_return;\n+\t\t      }\n \t\t    bfd_put_64 (abfd, first_octa, loc);\n \n \t\t    for (i = z + 1; i < 255; i++)\n@@ -2041,7 +2071,11 @@ mmo_scan (bfd *abfd)\n \t  /* This wasn't a lopcode, so store it in the current section.  */\n \t  if (sec == NULL)\n \t    sec = bfd_make_section_old_way (abfd, MMO_TEXT_SECTION_NAME);\n-\t  mmo_xore_32 (sec, vma & ~3, bfd_get_32 (abfd, buf));\n+\t  if (!mmo_xore_32 (sec, vma & ~3, bfd_get_32 (abfd, buf)))\n+\t    {\n+\t      bfd_set_error (bfd_error_bad_value);\n+\t      goto error_return;\n+\t    }\n \t  vma += 4;\n \t  vma &= ~3;\n \t  lineno++;"
    }
  ]
}