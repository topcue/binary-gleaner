{
  "sha": "9e51d549d7901be8b999f8dac86c5efd6a7edef2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWU1MWQ1NDlkNzkwMWJlOGI5OTlmOGRhYzg2YzVlZmQ2YTdlZGVmMg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-26T10:13:18Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-26T13:53:45Z"
    },
    "message": "PR 26484-26488, 26490 UBSAN &h->elf null pointer\n\n\tPR 26484\n\tPR 26485\n\tPR 26486\n\tPR 26487\n\tPR 26488\n\tPR 26490\n\t* elf64-ppc.c (is_tls_get_addr): Avoid UB &h->elf when h is NULL.\n\t(ppc64_elf_tls_setup): Likewise.\n\t(branch_reloc_hash_match): Likewise.\n\t(build_plt_stub): Likewise.\n\t(ppc64_elf_relocate_section): Likewise.",
    "tree": {
      "sha": "2c5b08c02706d4df63a1f2f01e70a58962937a37",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2c5b08c02706d4df63a1f2f01e70a58962937a37"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9e51d549d7901be8b999f8dac86c5efd6a7edef2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e51d549d7901be8b999f8dac86c5efd6a7edef2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9e51d549d7901be8b999f8dac86c5efd6a7edef2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e51d549d7901be8b999f8dac86c5efd6a7edef2/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "00bc5e68b2c02fd2b1daacc37850840498595fb0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/00bc5e68b2c02fd2b1daacc37850840498595fb0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/00bc5e68b2c02fd2b1daacc37850840498595fb0"
    }
  ],
  "stats": {
    "total": 58,
    "additions": 40,
    "deletions": 18
  },
  "files": [
    {
      "sha": "cbce5be495a1969e05973f04bb00642a71888702",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e51d549d7901be8b999f8dac86c5efd6a7edef2/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e51d549d7901be8b999f8dac86c5efd6a7edef2/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=9e51d549d7901be8b999f8dac86c5efd6a7edef2",
      "patch": "@@ -1,3 +1,17 @@\n+2020-08-26  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26484\n+\tPR 26485\n+\tPR 26486\n+\tPR 26487\n+\tPR 26488\n+\tPR 26490\n+\t* elf64-ppc.c (is_tls_get_addr): Avoid UB &h->elf when h is NULL.\n+\t(ppc64_elf_tls_setup): Likewise.\n+\t(branch_reloc_hash_match): Likewise.\n+\t(build_plt_stub): Likewise.\n+\t(ppc64_elf_relocate_section): Likewise.\n+\n 2020-08-26  Alan Modra  <amodra@gmail.com>\n \n \tPR 26478"
    },
    {
      "sha": "06202c94a3ca6c53bcab9282b394298b8b1ab327",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 26,
      "deletions": 18,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e51d549d7901be8b999f8dac86c5efd6a7edef2/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e51d549d7901be8b999f8dac86c5efd6a7edef2/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=9e51d549d7901be8b999f8dac86c5efd6a7edef2",
      "patch": "@@ -5650,8 +5650,10 @@ static bfd_boolean\n is_tls_get_addr (struct elf_link_hash_entry *h,\n \t\t struct ppc_link_hash_table *htab)\n {\n-  return (h == &htab->tls_get_addr_fd->elf || h == &htab->tga_desc_fd->elf\n-\t  || h == &htab->tls_get_addr->elf || h == &htab->tga_desc->elf);\n+  return (h == (struct elf_link_hash_entry *) htab->tls_get_addr_fd\n+\t  || h == (struct elf_link_hash_entry *) htab->tga_desc_fd\n+\t  || h == (struct elf_link_hash_entry *) htab->tls_get_addr\n+\t  || h == (struct elf_link_hash_entry *) htab->tga_desc);\n }\n \n static bfd_boolean func_desc_adjust (struct elf_link_hash_entry *, void *);\n@@ -7830,7 +7832,7 @@ ppc64_elf_tls_setup (struct bfd_link_info *info)\n \t\t  if (tga_fd != NULL)\n \t\t    {\n \t\t      htab->tls_get_addr_fd = ppc_elf_hash_entry (opt_fd);\n-\t\t      tga = &htab->tls_get_addr->elf;\n+\t\t      tga = (struct elf_link_hash_entry *) htab->tls_get_addr;\n \t\t      if (opt != NULL && tga != NULL)\n \t\t\t{\n \t\t\t  tga->root.type = bfd_link_hash_indirect;\n@@ -7909,8 +7911,10 @@ branch_reloc_hash_match (const bfd *ibfd,\n \n       h = sym_hashes[r_symndx - symtab_hdr->sh_info];\n       h = elf_follow_link (h);\n-      if (h == &hash1->elf || h == &hash2->elf\n-\t  || h == &hash3->elf || h == &hash4->elf)\n+      if (h == (struct elf_link_hash_entry *) hash1\n+\t  || h == (struct elf_link_hash_entry *) hash2\n+\t  || h == (struct elf_link_hash_entry *) hash3\n+\t  || h == (struct elf_link_hash_entry *) hash4)\n \treturn TRUE;\n     }\n   return FALSE;\n@@ -10945,7 +10949,8 @@ build_plt_stub (struct ppc_link_hash_table *htab,\n   if (!ALWAYS_USE_FAKE_DEP\n       && plt_load_toc\n       && plt_thread_safe\n-      && !(is_tls_get_addr (&stub_entry->h->elf, htab)\n+      && !(stub_entry->h != NULL\n+\t   && is_tls_get_addr (&stub_entry->h->elf, htab)\n \t   && htab->params->tls_get_addr_opt))\n     {\n       bfd_vma pltoff = stub_entry->plt_ent->plt.offset & ~1;\n@@ -15686,6 +15691,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      if (stub_entry->stub_type == ppc_stub_plt_call\n \t\t  && !htab->opd_abi\n \t\t  && htab->params->plt_localentry0 != 0\n+\t\t  && h != NULL\n \t\t  && is_elfv2_localentry0 (&h->elf))\n \t\t{\n \t\t  /* The function doesn't use or change r2.  */\n@@ -15948,7 +15954,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    break;\n \t  from = TOCstart + htab->sec_info[input_section->id].toc_off;\n \t  if (relocation + addend - from + 0x8000 < 0x10000\n-\t      && SYMBOL_REFERENCES_LOCAL (info, &h->elf))\n+\t      && (h == NULL || SYMBOL_REFERENCES_LOCAL (info, &h->elf)))\n \t    {\n \t      insn = bfd_get_32 (input_bfd, contents + (rel->r_offset & ~3));\n \t      if ((insn & (0x3fu << 26 | 0x3)) == 58u << 26 /* ld */)\n@@ -15968,7 +15974,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    break;\n \t  from = TOCstart + htab->sec_info[input_section->id].toc_off;\n \t  if (relocation + addend - from + 0x80008000ULL < 0x100000000ULL\n-\t      && SYMBOL_REFERENCES_LOCAL (info, &h->elf))\n+\t      && (h == NULL || SYMBOL_REFERENCES_LOCAL (info, &h->elf)))\n \t    {\n \t      insn = bfd_get_32 (input_bfd, contents + (rel->r_offset & ~3));\n \t      if ((insn & (0x3fu << 26 | 0x3)) == 58u << 26 /* ld */)\n@@ -15994,7 +16000,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t  + input_section->output_section->vma\n \t\t  + input_section->output_offset);\n \t  if (!(relocation - from + (1ULL << 33) < 1ULL << 34\n-\t\t&& SYMBOL_REFERENCES_LOCAL (info, &h->elf)))\n+\t\t&& (h == NULL || SYMBOL_REFERENCES_LOCAL (info, &h->elf))))\n \t    break;\n \n \t  offset = rel->r_offset;\n@@ -16018,7 +16024,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      && rel + 1 < relend\n \t      && rel[1].r_offset == rel->r_offset\n \t      && rel[1].r_info == ELF64_R_INFO (0, R_PPC64_PCREL_OPT)\n-\t      && SYMBOL_REFERENCES_LOCAL (info, &h->elf))\n+\t      && (h == NULL || SYMBOL_REFERENCES_LOCAL (info, &h->elf)))\n \t    {\n \t      offset = rel->r_offset;\n \t      pinsn = bfd_get_32 (input_bfd, contents + offset);\n@@ -16144,7 +16150,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    struct got_entry *ent;\n \n \t    if (tls_type == (TLS_TLS | TLS_LD)\n-\t\t&& SYMBOL_REFERENCES_LOCAL (info, &h->elf))\n+\t\t&& (h == NULL || SYMBOL_REFERENCES_LOCAL (info, &h->elf)))\n \t      ent = ppc64_tlsld_got (input_bfd);\n \t    else\n \t      {\n@@ -16220,7 +16226,9 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t\t\t || !UNDEFWEAK_NO_DYNAMIC_RELOC (info, &h->elf))\n \t\t\t     && !(tls_type != 0\n \t\t\t\t  && bfd_link_executable (info)\n-\t\t\t\t  && SYMBOL_REFERENCES_LOCAL (info, &h->elf))))\n+\t\t\t\t  && (h == NULL\n+\t\t\t\t      || SYMBOL_REFERENCES_LOCAL (info,\n+\t\t\t\t\t\t\t\t  &h->elf)))))\n \t\t  relgot = ppc64_elf_tdata (ent->owner)->relgot;\n \t\tif (relgot != NULL)\n \t\t  {\n@@ -16619,7 +16627,8 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \n \t      if (skip)\n \t\tmemset (&outrel, 0, sizeof outrel);\n-\t      else if (!SYMBOL_REFERENCES_LOCAL (info, &h->elf)\n+\t      else if (h != NULL\n+\t\t       && !SYMBOL_REFERENCES_LOCAL (info, &h->elf)\n \t\t       && !is_opd\n \t\t       && r_type != R_PPC64_TOC)\n \t\t{\n@@ -17220,11 +17229,10 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t\t   && (h->elf.root.type == bfd_link_hash_undefweak\n \t\t\t       || h->elf.root.type == bfd_link_hash_undefined)\n \t\t\t   && is_branch_reloc (r_type))))\n-\t\tinfo->callbacks->reloc_overflow (info, &h->elf.root,\n-\t\t\t\t\t\t sym_name, reloc_name,\n-\t\t\t\t\t\t orig_rel.r_addend,\n-\t\t\t\t\t\t input_bfd, input_section,\n-\t\t\t\t\t\t rel->r_offset);\n+\t\tinfo->callbacks->reloc_overflow\n+\t\t  (info, (struct bfd_link_hash_entry *) h, sym_name,\n+\t\t   reloc_name, orig_rel.r_addend, input_bfd, input_section,\n+\t\t   rel->r_offset);\n \t    }\n \t  else\n \t    {"
    }
  ]
}