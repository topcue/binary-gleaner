{
  "sha": "e11daf7a2e0e08e0820f528175113134151a1a14",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTExZGFmN2EyZTBlMDhlMDgyMGY1MjgxNzUxMTMxMzQxNTFhMWExNA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-18T12:40:18Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-18T12:40:18Z"
    },
    "message": "Split gdb.multi/multi-target.exp into separate testcases\n\ngdb.multi/multi-target.exp sets up a debug environment with multiple\ngdbservers, multiple native processes, and multiple cores, which has\nproved useful for exercising a number of multi-target scenarios.\n\nBut, as we add more tests to gdb.base/multi-target.exp, it is growing\na bit too large (making a bit cumbersome to debug) and too slow to run\n(if you have glibc debug info).\n\nThis commit thus splits the multi-target.exp into several testcases,\none per use case.  The common setup code is moved to a new\nmulti-target.exp.tcl file that is included by all the resulting\nmulti-target testcases.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.multi/multi-target-continue.exp: New file, factored out from\n\tmulti-target.exp.\n\t* gdb.multi/multi-target-info-inferiors.exp: New file, factored out from\n\tmulti-target.exp.\n\t* gdb.multi/multi-target-interrupt.exp: New file, factored out from\n\tmulti-target.exp.\n\t* gdb.multi/multi-target-no-resumed.exp: New file, factored out from\n\tmulti-target.exp.\n\t* gdb.multi/multi-target-ping-pong-next.exp: New file, factored out from\n\tmulti-target.exp.\n\t* gdb.multi/multi-target.exp.tcl: New file, factored out from\n\tmulti-target.exp.\n\t* gdb.multi/multi-target.exp: Delete.",
    "tree": {
      "sha": "66d1b8c0ed4ef15c5f7f04344bd4c2c1a0bb7cce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/66d1b8c0ed4ef15c5f7f04344bd4c2c1a0bb7cce"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e11daf7a2e0e08e0820f528175113134151a1a14",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e11daf7a2e0e08e0820f528175113134151a1a14",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e11daf7a2e0e08e0820f528175113134151a1a14",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e11daf7a2e0e08e0820f528175113134151a1a14/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5947daaf7545b2887abb977af6700b4cc9a807be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5947daaf7545b2887abb977af6700b4cc9a807be",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5947daaf7545b2887abb977af6700b4cc9a807be"
    }
  ],
  "stats": {
    "total": 1216,
    "additions": 670,
    "deletions": 546
  },
  "files": [
    {
      "sha": "5b495c5ee3700fa8a6b4c0c96e7e2f0279d67923",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e11daf7a2e0e08e0820f528175113134151a1a14",
      "patch": "@@ -1,3 +1,19 @@\n+2020-09-18  Pedro Alves  <pedro@palves.net>\n+\n+\t* gdb.multi/multi-target-continue.exp: New file, factored out from\n+\tmulti-target.exp.\n+\t* gdb.multi/multi-target-info-inferiors.exp: New file, factored out from\n+\tmulti-target.exp.\n+\t* gdb.multi/multi-target-interrupt.exp: New file, factored out from\n+\tmulti-target.exp.\n+\t* gdb.multi/multi-target-no-resumed.exp: New file, factored out from\n+\tmulti-target.exp.\n+\t* gdb.multi/multi-target-ping-pong-next.exp: New file, factored out from\n+\tmulti-target.exp.\n+\t* gdb.multi/multi-target.exp.tcl: New file, factored out from\n+\tmulti-target.exp.\n+\t* gdb.multi/multi-target.exp: Delete.\n+\n 2020-09-18  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.fortran/array-slices.exp: Add missing message data."
    },
    {
      "sha": "a4a2cb78d11eea696673480f092e12cd61c668e9",
      "filename": "gdb/testsuite/gdb.multi/multi-target-continue.exp",
      "status": "added",
      "additions": 105,
      "deletions": 0,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target-continue.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target-continue.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target-continue.exp?ref=e11daf7a2e0e08e0820f528175113134151a1a14",
      "patch": "@@ -0,0 +1,105 @@\n+# Copyright 2017-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test \"continue\" to breakpoints in different targets.  In non-stop\n+# mode, also tests \"interrupt -a\".\n+\n+source $srcdir/$subdir/multi-target.exp.tcl\n+\n+if {![multi_target_prepare]} {\n+    return\n+}\n+\n+proc test_continue {non-stop} {\n+    if {![setup ${non-stop}]} {\n+\tuntested \"setup failed\"\n+\treturn\n+    }\n+\n+    proc set_break {inf} {\n+\tgdb_test \"break function${inf} thread ${inf}.1\" \\\n+\t\"Breakpoint .* function${inf}\\\\..*\"\n+    }\n+\n+    # Select inferior INF, and then run to a breakpoint on inferior\n+    # INF+1.\n+    proc test_continue_inf {inf} {\n+\tupvar 1 non-stop non-stop\n+\n+\tglobal gdb_prompt\n+\tdelete_breakpoints\n+\n+\tset next_inf [next_live_inferior $inf]\n+\n+\tgdb_test \"inferior $inf\" \"Switching to inferior $inf.*\"\n+\tset_break $next_inf\n+\n+\tif {${non-stop} == \"off\"} {\n+\t    gdb_test \"continue\" \"hit Breakpoint .* function${next_inf}.*\"\n+\t} else {\n+\t    set msg \"continue\"\n+\t    gdb_test_multiple \"continue -a&\" $msg {\n+\t\t-re \"Continuing.*$gdb_prompt \" {\n+\t\t    pass $msg\n+\t\t}\n+\t    }\n+\n+\t    set msg \"hit bp\"\n+\t    gdb_test_multiple \"\" $msg {\n+\t\t-re \"hit Breakpoint .* function${next_inf}\" {\n+\t\t    pass $msg\n+\t\t}\n+\t    }\n+\n+\t    set msg \"stop all threads\"\n+\t    gdb_test_multiple \"interrupt -a\" $msg {\n+\t\t-re \"$gdb_prompt \" {\n+\t\t    for {set i 0} {$i < 7} {incr i} {\n+\t\t\tset ok 0\n+\t\t\tgdb_test_multiple \"\" $msg {\n+\t\t\t    -re \"Thread\\[^\\r\\n\\]*stopped\\\\.\" {\n+\t\t\t\tset ok 1\n+\t\t\t    }\n+\t\t\t}\n+\t\t\tif {!$ok} {\n+\t\t\t    break\n+\t\t\t}\n+\t\t    }\n+\t\t    gdb_assert $ok $msg\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    for {set i 1} {$i <= 5} {incr i} {\n+\tif {$i == 3} {\n+\t    # This is a core inferior.\n+\t    continue\n+\t}\n+\n+\twith_test_prefix \"inf$i\" {\n+\t    test_continue_inf $i\n+\t}\n+    }\n+}\n+\n+# Some basic \"continue\" + breakpoints tests.\n+with_test_prefix \"continue\" {\n+    foreach_with_prefix non-stop {\"off\" \"on\"} {\n+\ttest_continue ${non-stop}\n+    }\n+}\n+\n+multi_target_cleanup"
    },
    {
      "sha": "30b0013ac3eeb6f2b4c52add8074b4f61dd4cf37",
      "filename": "gdb/testsuite/gdb.multi/multi-target-info-inferiors.exp",
      "status": "added",
      "additions": 110,
      "deletions": 0,
      "changes": 110,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target-info-inferiors.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target-info-inferiors.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target-info-inferiors.exp?ref=e11daf7a2e0e08e0820f528175113134151a1a14",
      "patch": "@@ -0,0 +1,110 @@\n+# Copyright 2017-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test \"info inferiors\" and \"info connections\" with multiple targets.\n+\n+source $srcdir/$subdir/multi-target.exp.tcl\n+\n+if {![multi_target_prepare]} {\n+    return\n+}\n+\n+# Test \"info inferiors\" and \"info connections\".  MULTI_PROCESS\n+# indicates whether the multi-process feature of remote targets is\n+# turned off or on.\n+proc test_info_inferiors {multi_process} {\n+    setup \"off\"\n+\n+    gdb_test_no_output \\\n+\t\"set remote multiprocess-feature-packet $multi_process\"\n+\n+    # Get the description for inferior INF for when the current\n+    # inferior id is CURRENT.\n+    proc inf_desc {inf current} {\n+\tset ws \"\\[ \\t\\]+\"\n+\tglobal decimal\n+\tupvar multi_process multi_process\n+\n+\tif {($multi_process == \"off\") && ($inf == 2 || $inf == 5)} {\n+\t    set desc \"Remote target\"\n+\t} else {\n+\t    set desc \"process ${decimal}\"\n+\t}\n+\n+\tset desc \"${inf}${ws}${desc}${ws}\"\n+\tif {$inf == $current} {\n+\t    return \"\\\\* $desc\"\n+\t} else {\n+\t    return \"  $desc\"\n+\t}\n+    }\n+\n+    # Get the \"Num\" column for CONNECTION for when the current\n+    # inferior id is CURRENT_INF.\n+    proc connection_num {connection current_inf} {\n+\tswitch $current_inf {\n+\t    \"4\" { set current_connection \"1\"}\n+\t    \"5\" { set current_connection \"4\"}\n+\t    \"6\" { set current_connection \"5\"}\n+\t    default { set current_connection $current_inf}\n+\t}\n+\tif {$connection == $current_connection} {\n+\t    return \"\\\\* $connection\"\n+\t} else {\n+\t    return \"  $connection\"\n+\t}\n+    }\n+\n+    set ws \"\\[ \\t\\]+\"\n+    global decimal binfile\n+\n+    # Test \"info connections\" and \"info inferior\" by switching to each\n+    # inferior one by one.\n+    for {set inf 1} {$inf <= 6} {incr inf} {\n+\twith_test_prefix \"inferior $inf\" {\n+\t    gdb_test \"inferior $inf\" \"Switching to inferior $inf.*\"\n+\n+\t    gdb_test \"info connections\" \\\n+\t\t[multi_line \\\n+\t\t     \"Num${ws}What${ws}Description${ws}\" \\\n+\t\t     \"[connection_num 1 $inf]${ws}native${ws}Native process${ws}\" \\\n+\t\t     \"[connection_num 2 $inf]${ws}extended-remote localhost:$decimal${ws}Extended remote serial target in gdb-specific protocol${ws}\" \\\n+\t\t     \"[connection_num 3 $inf]${ws}core${ws}Local core dump file${ws}\" \\\n+\t\t     \"[connection_num 4 $inf]${ws}extended-remote localhost:$decimal${ws}Extended remote serial target in gdb-specific protocol${ws}\" \\\n+\t\t     \"[connection_num 5 $inf]${ws}core${ws}Local core dump file${ws}\" \\\n+\t\t    ]\n+\n+\t    gdb_test \"info inferiors\" \\\n+\t\t[multi_line \\\n+\t\t     \"Num${ws}Description${ws}Connection${ws}Executable${ws}\" \\\n+\t\t     \"[inf_desc 1 $inf]1 \\\\(native\\\\)${ws}${binfile}${ws}\" \\\n+\t\t     \"[inf_desc 2 $inf]2 \\\\(extended-remote localhost:$decimal\\\\)${ws}${binfile}${ws}\" \\\n+\t\t     \"[inf_desc 3 $inf]3 \\\\(core\\\\)${ws}${binfile}${ws}\" \\\n+\t\t     \"[inf_desc 4 $inf]1 \\\\(native\\\\)${ws}${binfile}${ws}\" \\\n+\t\t     \"[inf_desc 5 $inf]4 \\\\(extended-remote localhost:$decimal\\\\)${ws}${binfile}${ws}\" \\\n+\t\t     \"[inf_desc 6 $inf]5 \\\\(core\\\\)${ws}${binfile}${ws}\" \\\n+\t\t    ]\n+\t}\n+    }\n+}\n+\n+# Test \"info inferiors\" and \"info connections\" commands.\n+with_test_prefix \"info-inferiors\" {\n+    foreach_with_prefix multi_process {\"on\" \"off\"} {\n+\ttest_info_inferiors $multi_process\n+    }\n+}\n+\n+multi_target_cleanup"
    },
    {
      "sha": "ccf557a4ac82e34e895307a4e9f493433278c51f",
      "filename": "gdb/testsuite/gdb.multi/multi-target-interrupt.exp",
      "status": "added",
      "additions": 79,
      "deletions": 0,
      "changes": 79,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target-interrupt.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target-interrupt.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target-interrupt.exp?ref=e11daf7a2e0e08e0820f528175113134151a1a14",
      "patch": "@@ -0,0 +1,79 @@\n+# Copyright 2017-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test interrupting multiple targets with Ctrl-C.\n+\n+source $srcdir/$subdir/multi-target.exp.tcl\n+\n+if {![multi_target_prepare]} {\n+    return\n+}\n+\n+proc test_ctrlc {} {\n+    if {![setup \"off\"]} {\n+\tuntested \"setup failed\"\n+\treturn\n+    }\n+\n+    delete_breakpoints\n+\n+    # Select inferior INF, continue all inferiors, and then Ctrl-C.\n+    proc test_ctrlc_inf {inf} {\n+\tglobal gdb_prompt\n+\n+\tgdb_test \"inferior $inf\" \"Switching to inferior $inf.*\"\n+\n+\tset msg \"continue\"\n+\tgdb_test_multiple \"continue\" $msg {\n+\t    -re \"Continuing\" {\n+\t\tpass $msg\n+\t    }\n+\t}\n+\n+\tafter 200 { send_gdb \"\\003\" }\n+\n+\tset msg \"send_gdb control C\"\n+\tgdb_test_multiple \"\" $msg {\n+\t    -re \"received signal SIGINT.*$gdb_prompt $\" {\n+\t\tpass $msg\n+\t    }\n+\t}\n+\n+\tset msg \"all threads stopped\"\n+\tgdb_test_multiple \"info threads\" \"$msg\" {\n+\t    -re \"\\\\\\(running\\\\\\).*$gdb_prompt $\" {\n+\t\tfail $msg\n+\t    }\n+\t    -re \"$gdb_prompt $\" {\n+\t\tpass $msg\n+\t    }\n+\t}\n+    }\n+\n+    for {set i 1} {$i <= 5} {incr i} {\n+\tif {$i == 3} {\n+\t    # This is a core inferior.\n+\t    continue\n+\t}\n+\n+\twith_test_prefix \"inf$i\" {\n+\t    test_ctrlc_inf $i\n+\t}\n+    }\n+}\n+\n+test_ctrlc\n+\n+multi_target_cleanup"
    },
    {
      "sha": "6b06215eea918c537020da62580f4a30027590f1",
      "filename": "gdb/testsuite/gdb.multi/multi-target-no-resumed.exp",
      "status": "added",
      "additions": 90,
      "deletions": 0,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target-no-resumed.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target-no-resumed.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target-no-resumed.exp?ref=e11daf7a2e0e08e0820f528175113134151a1a14",
      "patch": "@@ -0,0 +1,90 @@\n+# Copyright 2017-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test that when there's a foreground execution command in progress, a\n+# TARGET_WAITKIND_NO_RESUMED for a particular target is ignored when\n+# other targets are still resumed.\n+\n+source $srcdir/$subdir/multi-target.exp.tcl\n+\n+if {![multi_target_prepare]} {\n+    return\n+}\n+\n+proc test_no_resumed_infs {inf_A inf_B} {\n+    global gdb_prompt\n+\n+    if {![setup \"off\"]} {\n+\tuntested \"setup failed\"\n+\treturn\n+    }\n+\n+    gdb_test \"thread $inf_A.2\" \"Switching to thread $inf_A\\.2 .*\" \\\n+\t\"select thread of target A\"\n+\n+    gdb_test_no_output \"set scheduler-locking on\"\n+\n+    gdb_test_multiple \"continue &\" \"\" {\n+\t-re \"Continuing.*$gdb_prompt \" {\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+\n+    gdb_test \"thread $inf_B.2\" \"Switching to thread $inf_B\\.2 .*\" \\\n+\t\"select thread of target B\"\n+    gdb_test \"p exit_thread = 1\" \" = 1\" \\\n+\t\"set the thread to exit on resumption\"\n+\n+    # Wait 3 seconds.  If we see any response from GDB, such as\n+    # \"No unwaited-for children left.\" it's a bug.\n+    gdb_test_multiple \"continue\" \"continue\" {\n+\t-timeout 3\n+\ttimeout {\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+\n+    # Now stop the program (all targets).\n+    send_gdb \"\\003\"\n+    gdb_test_multiple \"\" \"send_gdb control C\" {\n+\t-re \"received signal SIGINT.*$gdb_prompt $\" {\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+\n+    gdb_test_multiple \"info threads\" \"all threads stopped\" {\n+\t-re \"\\\\\\(running\\\\\\).*$gdb_prompt $\" {\n+\t    fail $gdb_test_name\n+\t}\n+\t-re \"$gdb_prompt $\" {\n+\t    pass $gdb_test_name\n+\t}\n+    }\n+}\n+\n+# inferior 1 -> native\n+# inferior 2 -> extended-remote 1\n+# inferior 5 -> extended-remote 2\n+set inferiors {1 2 5}\n+foreach_with_prefix inf_A $inferiors {\n+    foreach_with_prefix inf_B $inferiors {\n+\tif {$inf_A == $inf_B} {\n+\t    continue\n+\t}\n+\ttest_no_resumed_infs $inf_A $inf_B\n+    }\n+}\n+\n+multi_target_cleanup"
    },
    {
      "sha": "094de0f8ef410b1e6ebbe2899c20662195af4362",
      "filename": "gdb/testsuite/gdb.multi/multi-target-ping-pong-next.exp",
      "status": "added",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target-ping-pong-next.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target-ping-pong-next.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target-ping-pong-next.exp?ref=e11daf7a2e0e08e0820f528175113134151a1a14",
      "patch": "@@ -0,0 +1,85 @@\n+# Copyright 2017-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test \"next\" bouncing between two breakpoints in two threads running\n+# in different targets.\n+\n+source $srcdir/$subdir/multi-target.exp.tcl\n+\n+if {![multi_target_prepare]} {\n+    return\n+}\n+\n+proc test_ping_pong_next {} {\n+    global srcfile\n+\n+    if {![setup \"off\"]} {\n+\tuntested \"setup failed\"\n+\treturn\n+    }\n+\n+    # Block/unblock inferiors 1 and 2 according to INF1 and INF2.\n+    proc block {inf1 inf2} {\n+\tgdb_test \"thread apply 1.1 p wait_for_gdb = $inf1\" \" = $inf1\"\n+\tgdb_test \"thread apply 2.1 p wait_for_gdb = $inf2\" \" = $inf2\"\n+    }\n+\n+    # We'll use inferiors 1 and 2.  Make sure they're really connected\n+    # to different targets.\n+    gdb_test \"thread apply 1.1 maint print target-stack\" \\\n+\t\"- native.*\"\n+    gdb_test \"thread apply 2.1 maint print target-stack\" \\\n+\t\"- extended-remote.*\"\n+\n+    # Set two breakpoints, one for each of inferior 1 and 2.  Inferior\n+    # 1 is running on the native target, and inferior 2 is running on\n+    # extended-gdbserver.  Run to breakpoint 1 to gets things started.\n+    set line1 [gdb_get_line_number \"set break 1 here\"]\n+    set line2 [gdb_get_line_number \"set break 2 here\"]\n+\n+    gdb_test \"thread 1.1\" \"Switching to thread 1.1 .*\"\n+\n+    gdb_test \"break $srcfile:$line1 thread 1.1\" \\\n+\t\"Breakpoint .*$srcfile:$line1\\\\..*\"\n+\n+    gdb_test \"continue\" \"hit Breakpoint .*\"\n+\n+    gdb_test \"break $srcfile:$line2 thread 2.1\" \\\n+\t\"Breakpoint .*$srcfile:$line2\\\\..*\"\n+\n+    # Now block inferior 1 and issue \"next\".  We should stop at the\n+    # breakpoint for inferior 2, given schedlock off.\n+    with_test_prefix \"next inf 1\" {\n+\tblock 1 0\n+\tgdb_test \"next\" \"Thread 2.1 .*hit Breakpoint .*$srcfile:$line2.*\"\n+    }\n+\n+    # Now unblock inferior 2 and block inferior 1.  \"next\" should run\n+    # into the breakpoint in inferior 1.\n+    with_test_prefix \"next inf 2\" {\n+\tblock 0 1\n+\tgdb_test \"next\" \"Thread 1.1 .*hit Breakpoint .*$srcfile:$line1.*\"\n+    }\n+\n+    # Try nexting inferior 1 again.\n+    with_test_prefix \"next inf 1 again\" {\n+\tblock 1 0\n+\tgdb_test \"next\" \"Thread 2.1 .*hit Breakpoint .*$srcfile:$line2.*\"\n+    }\n+}\n+\n+test_ping_pong_next\n+\n+multi_target_cleanup"
    },
    {
      "sha": "d19cee6595a024c8a7707a124eadf0649881403f",
      "filename": "gdb/testsuite/gdb.multi/multi-target.exp",
      "status": "removed",
      "additions": 0,
      "deletions": 546,
      "changes": 546,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5947daaf7545b2887abb977af6700b4cc9a807be/gdb/testsuite/gdb.multi/multi-target.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5947daaf7545b2887abb977af6700b4cc9a807be/gdb/testsuite/gdb.multi/multi-target.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target.exp?ref=5947daaf7545b2887abb977af6700b4cc9a807be",
      "patch": "@@ -1,546 +0,0 @@\n-# Copyright 2017-2020 Free Software Foundation, Inc.\n-\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3 of the License, or\n-# (at your option) any later version.\n-#\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-\n-# Test multi-target features.\n-\n-load_lib gdbserver-support.exp\n-\n-if { [skip_gdbserver_tests] } {\n-    return 0\n-}\n-\n-standard_testfile\n-\n-# The plain remote target can't do multiple inferiors.\n-if {[target_info gdb_protocol] != \"\"} {\n-    return\n-}\n-\n-if { [prepare_for_testing \"failed to prepare\" ${binfile} \"${srcfile}\" \\\n-\t  {debug pthreads}] } {\n-    return\n-}\n-\n-# Keep a list of (inferior ID, spawn ID).\n-set server_spawn_ids [list]\n-\n-proc connect_target_extended_remote {binfile num} {\n-    set res [gdbserver_start \"--multi\" \"\"]\n-    global server_spawn_ids server_spawn_id\n-    lappend server_spawn_ids $num $server_spawn_id\n-    set gdbserver_gdbport [lindex $res 1]\n-    return [gdb_target_cmd \"extended-remote\" $gdbserver_gdbport]\n-}\n-\n-# Add and start inferior number NUM.  Returns true on success, false\n-# otherwise.\n-proc add_inferior {num target binfile {gcorefile \"\"}} {\n-    # Start another inferior.\n-    gdb_test \"add-inferior -no-connection\" \"Added inferior $num\" \\\n-\t\"add empty inferior $num\"\n-    gdb_test \"inferior $num\" \"Switching to inferior $num.*\" \\\n-\t\"switch to inferior $num\"\n-    gdb_test \"file ${binfile}\" \".*\" \"load file in inferior $num\"\n-    gdb_test_no_output \"set remote exec-file ${binfile}\" \\\n-\t\"set remote-exec file in inferior $num\"\n-\n-    if {$target == \"core\"} {\n-\tgdb_test \"core $gcorefile\" \"Core was generated by.*\" \\\n-\t    \"core [file tail $gcorefile], inf $num\"\n-\treturn 1\n-    }\n-\n-    if {$target == \"extended-remote\"} {\n-\tif {[connect_target_extended_remote $binfile $num]} {\n-\t    return 0\n-\t}\n-    }\n-    if ![runto \"all_started\"] then {\n-\treturn 0\n-    }\n-    delete_breakpoints\n-\n-    return 1\n-}\n-\n-proc prepare_core {} {\n-    global gcorefile gcore_created\n-    global binfile\n-\n-    clean_restart ${binfile}\n-\n-    if ![runto all_started] then {\n-\treturn -1\n-    }\n-\n-    global testfile\n-    set gcorefile [standard_output_file $testfile.gcore]\n-    set gcore_created [gdb_gcore_cmd $gcorefile \"save a core file\"]\n-}\n-\n-proc next_live_inferior {inf} {\n-    incr inf\n-    if {$inf == 3} {\n-\t# 3 is a core.\n-\treturn 4\n-    }\n-    if {$inf > 5} {\n-\t# 6 is a core.\n-\treturn 1\n-    }\n-\n-    return $inf\n-}\n-\n-# Clean up the server_spawn_ids.\n-proc cleanup_gdbservers { } {\n-    global server_spawn_id\n-    global server_spawn_ids\n-    foreach { inferior_id spawn_id } $server_spawn_ids {\n-\tset server_spawn_id $spawn_id\n-\tgdb_test \"inferior $inferior_id\"\n-\tgdbserver_exit 0\n-    }\n-    set server_spawn_ids [list]\n-}\n-\n-# Return true on success, false otherwise.\n-\n-proc setup {non-stop} {\n-    global gcorefile gcore_created\n-    global binfile\n-\n-    cleanup_gdbservers\n-    clean_restart ${binfile}\n-\n-    # multi-target depends on target running in non-stop mode.  Force\n-    # it on for remote targets, until this is the default.\n-    gdb_test_no_output \"maint set target-non-stop on\"\n-\n-    gdb_test_no_output \"set non-stop ${non-stop}\"\n-\n-    if ![runto all_started] then {\n-\treturn 0\n-    }\n-\n-    delete_breakpoints\n-\n-    # inferior 1 -> native\n-    # inferior 2 -> extended-remote\n-    # inferior 3 -> core\n-    # inferior 4 -> native\n-    # inferior 5 -> extended-remote\n-    # inferior 6 -> core\n-    if {![add_inferior 2 \"extended-remote\" $binfile]} {\n-\treturn 0\n-    }\n-    if {![add_inferior 3 \"core\" $binfile $gcorefile]} {\n-\treturn 0\n-    }\n-    if {![add_inferior 4 \"native\" $binfile]} {\n-\treturn 0\n-    }\n-    if {![add_inferior 5 \"extended-remote\" $binfile]} {\n-\treturn 0\n-    }\n-    if {![add_inferior 6 \"core\" $binfile $gcorefile]} {\n-\treturn 0\n-    }\n-\n-    # For debugging.\n-    gdb_test \"info threads\" \".*\"\n-\n-    # Make \"continue\" resume all inferiors.\n-    if {${non-stop} == \"off\"} {\n-\tgdb_test_no_output \"set schedule-multiple on\"\n-    }\n-\n-    return 1\n-}\n-\n-# Test \"continue\" to breakpoints in different targets.  In non-stop\n-# mode, also tests \"interrupt -a\".\n-proc test_continue {non-stop} {\n-    if {![setup ${non-stop}]} {\n-\tuntested \"setup failed\"\n-\treturn\n-    }\n-\n-    proc set_break {inf} {\n-\tgdb_test \"break function${inf} thread ${inf}.1\" \\\n-\t\"Breakpoint .* function${inf}\\\\..*\"\n-    }\n-\n-    # Select inferior INF, and then run to a breakpoint on inferior\n-    # INF+1.\n-    proc test_continue_inf {inf} {\n-\tupvar 1 non-stop non-stop\n-\n-\tglobal gdb_prompt\n-\tdelete_breakpoints\n-\n-\tset next_inf [next_live_inferior $inf]\n-\n-\tgdb_test \"inferior $inf\" \"Switching to inferior $inf.*\"\n-\tset_break $next_inf\n-\n-\tif {${non-stop} == \"off\"} {\n-\t    gdb_test \"continue\" \"hit Breakpoint .* function${next_inf}.*\"\n-\t} else {\n-\t    set msg \"continue\"\n-\t    gdb_test_multiple \"continue -a&\" $msg {\n-\t\t-re \"Continuing.*$gdb_prompt \" {\n-\t\t    pass $msg\n-\t\t}\n-\t    }\n-\n-\t    set msg \"hit bp\"\n-\t    gdb_test_multiple \"\" $msg {\n-\t\t-re \"hit Breakpoint .* function${next_inf}\" {\n-\t\t    pass $msg\n-\t\t}\n-\t    }\n-\n-\t    set msg \"stop all threads\"\n-\t    gdb_test_multiple \"interrupt -a\" $msg {\n-\t\t-re \"$gdb_prompt \" {\n-\t\t    for {set i 0} {$i < 7} {incr i} {\n-\t\t\tset ok 0\n-\t\t\tgdb_test_multiple \"\" $msg {\n-\t\t\t    -re \"Thread\\[^\\r\\n\\]*stopped\\\\.\" {\n-\t\t\t\tset ok 1\n-\t\t\t    }\n-\t\t\t}\n-\t\t\tif {!$ok} {\n-\t\t\t    break\n-\t\t\t}\n-\t\t    }\n-\t\t    gdb_assert $ok $msg\n-\t\t}\n-\t    }\n-\t}\n-    }\n-\n-    for {set i 1} {$i <= 5} {incr i} {\n-\tif {$i == 3} {\n-\t    # This is a core inferior.\n-\t    continue\n-\t}\n-\n-\twith_test_prefix \"inf$i\" {\n-\t    test_continue_inf $i\n-\t}\n-    }\n-}\n-\n-# Test interrupting multiple targets with Ctrl-C.\n-\n-proc test_ctrlc {} {\n-    if {![setup \"off\"]} {\n-\tuntested \"setup failed\"\n-\treturn\n-    }\n-\n-    delete_breakpoints\n-\n-    # Select inferior INF, continue all inferiors, and then Ctrl-C.\n-    proc test_ctrlc_inf {inf} {\n-\tglobal gdb_prompt\n-\n-\tgdb_test \"inferior $inf\" \"Switching to inferior $inf.*\"\n-\n-\tset msg \"continue\"\n-\tgdb_test_multiple \"continue\" $msg {\n-\t    -re \"Continuing\" {\n-\t\tpass $msg\n-\t    }\n-\t}\n-\n-\tafter 200 { send_gdb \"\\003\" }\n-\n-\tset msg \"send_gdb control C\"\n-\tgdb_test_multiple \"\" $msg {\n-\t    -re \"received signal SIGINT.*$gdb_prompt $\" {\n-\t\tpass $msg\n-\t    }\n-\t}\n-\n-\tset msg \"all threads stopped\"\n-\tgdb_test_multiple \"info threads\" \"$msg\" {\n-\t    -re \"\\\\\\(running\\\\\\).*$gdb_prompt $\" {\n-\t\tfail $msg\n-\t    }\n-\t    -re \"$gdb_prompt $\" {\n-\t\tpass $msg\n-\t    }\n-\t}\n-    }\n-\n-    for {set i 1} {$i <= 5} {incr i} {\n-\tif {$i == 3} {\n-\t    # This is a core inferior.\n-\t    continue\n-\t}\n-\n-\twith_test_prefix \"inf$i\" {\n-\t    test_ctrlc_inf $i\n-\t}\n-    }\n-}\n-\n-# Test \"next\" bouncing between two breakpoints in two threads running\n-# in different targets.\n-proc test_ping_pong_next {} {\n-    global srcfile\n-\n-    if {![setup \"off\"]} {\n-\tuntested \"setup failed\"\n-\treturn\n-    }\n-\n-    # block/unblock inferiors 1 and 2 according to INF1 and INF2.\n-    proc block {inf1 inf2} {\n-\tgdb_test \"thread apply 1.1 p wait_for_gdb = $inf1\" \" = $inf1\"\n-\tgdb_test \"thread apply 2.1 p wait_for_gdb = $inf2\" \" = $inf2\"\n-    }\n-\n-    # We're use inferiors 1 and 2.  Make sure they're really connected\n-    # to different targets.\n-    gdb_test \"thread apply 1.1 maint print target-stack\" \\\n-\t\"- native.*\"\n-    gdb_test \"thread apply 2.1 maint print target-stack\" \\\n-\t\"- extended-remote.*\"\n-\n-    # Set two breakpoints, one for each of inferior 1 and 2.  Inferior\n-    # 1 is running on the native target, and inferior 2 is running on\n-    # extended-gdbserver.  Run to breakpoint 1 to gets things started.\n-    set line1 [gdb_get_line_number \"set break 1 here\"]\n-    set line2 [gdb_get_line_number \"set break 2 here\"]\n-\n-    gdb_test \"thread 1.1\" \"Switching to thread 1.1 .*\"\n-\n-    gdb_test \"break $srcfile:$line1 thread 1.1\" \\\n-\t\"Breakpoint .*$srcfile:$line1\\\\..*\"\n-\n-    gdb_test \"continue\" \"hit Breakpoint .*\"\n-\n-    gdb_test \"break $srcfile:$line2 thread 2.1\" \\\n-\t\"Breakpoint .*$srcfile:$line2\\\\..*\"\n-\n-    # Now block inferior 1 and issue \"next\".  We should stop at the\n-    # breakpoint for inferior 2, given schedlock off.\n-    with_test_prefix \"next inf 1\" {\n-\tblock 1 0\n-\tgdb_test \"next\" \"Thread 2.1 .*hit Breakpoint .*$srcfile:$line2.*\"\n-    }\n-\n-    # Now unblock inferior 2 and block inferior 1.  \"next\" should run\n-    # into the breakpoint in inferior 1.\n-    with_test_prefix \"next inf 2\" {\n-\tblock 0 1\n-\tgdb_test \"next\" \"Thread 1.1 .*hit Breakpoint .*$srcfile:$line1.*\"\n-    }\n-\n-    # Try nexting inferior 1 again.\n-    with_test_prefix \"next inf 1 again\" {\n-\tblock 1 0\n-\tgdb_test \"next\" \"Thread 2.1 .*hit Breakpoint .*$srcfile:$line2.*\"\n-    }\n-}\n-\n-# Test \"info inferiors\" and \"info connections\".  MULTI_PROCESS\n-# indicates whether the multi-process feature of remote targets is\n-# turned off or on.\n-proc test_info_inferiors {multi_process} {\n-    setup \"off\"\n-\n-    gdb_test_no_output \\\n-\t\"set remote multiprocess-feature-packet $multi_process\"\n-\n-    # Get the description for inferior INF for when the current\n-    # inferior id is CURRENT.\n-    proc inf_desc {inf current} {\n-\tset ws \"\\[ \\t\\]+\"\n-\tglobal decimal\n-\tupvar multi_process multi_process\n-\n-\tif {($multi_process == \"off\") && ($inf == 2 || $inf == 5)} {\n-\t    set desc \"Remote target\"\n-\t} else {\n-\t    set desc \"process ${decimal}\"\n-\t}\n-\n-\tset desc \"${inf}${ws}${desc}${ws}\"\n-\tif {$inf == $current} {\n-\t    return \"\\\\* $desc\"\n-\t} else {\n-\t    return \"  $desc\"\n-\t}\n-    }\n-\n-    # Get the \"Num\" column for CONNECTION for when the current\n-    # inferior id is CURRENT_INF.\n-    proc connection_num {connection current_inf} {\n-\tswitch $current_inf {\n-\t    \"4\" { set current_connection \"1\"}\n-\t    \"5\" { set current_connection \"4\"}\n-\t    \"6\" { set current_connection \"5\"}\n-\t    default { set current_connection $current_inf}\n-\t}\n-\tif {$connection == $current_connection} {\n-\t    return \"\\\\* $connection\"\n-\t} else {\n-\t    return \"  $connection\"\n-\t}\n-    }\n-\n-    set ws \"\\[ \\t\\]+\"\n-    global decimal binfile\n-\n-    # Test \"info connections\" and \"info inferior\" by switching to each\n-    # inferior one by one.\n-    for {set inf 1} {$inf <= 6} {incr inf} {\n-\twith_test_prefix \"inferior $inf\" {\n-\t    gdb_test \"inferior $inf\" \"Switching to inferior $inf.*\"\n-\n-\t    gdb_test \"info connections\" \\\n-\t\t[multi_line \\\n-\t\t     \"Num${ws}What${ws}Description${ws}\" \\\n-\t\t     \"[connection_num 1 $inf]${ws}native${ws}Native process${ws}\" \\\n-\t\t     \"[connection_num 2 $inf]${ws}extended-remote localhost:$decimal${ws}Extended remote serial target in gdb-specific protocol${ws}\" \\\n-\t\t     \"[connection_num 3 $inf]${ws}core${ws}Local core dump file${ws}\" \\\n-\t\t     \"[connection_num 4 $inf]${ws}extended-remote localhost:$decimal${ws}Extended remote serial target in gdb-specific protocol${ws}\" \\\n-\t\t     \"[connection_num 5 $inf]${ws}core${ws}Local core dump file${ws}\" \\\n-\t\t    ]\n-\n-\t    gdb_test \"info inferiors\" \\\n-\t\t[multi_line \\\n-\t\t     \"Num${ws}Description${ws}Connection${ws}Executable${ws}\" \\\n-\t\t     \"[inf_desc 1 $inf]1 \\\\(native\\\\)${ws}${binfile}${ws}\" \\\n-\t\t     \"[inf_desc 2 $inf]2 \\\\(extended-remote localhost:$decimal\\\\)${ws}${binfile}${ws}\" \\\n-\t\t     \"[inf_desc 3 $inf]3 \\\\(core\\\\)${ws}${binfile}${ws}\" \\\n-\t\t     \"[inf_desc 4 $inf]1 \\\\(native\\\\)${ws}${binfile}${ws}\" \\\n-\t\t     \"[inf_desc 5 $inf]4 \\\\(extended-remote localhost:$decimal\\\\)${ws}${binfile}${ws}\" \\\n-\t\t     \"[inf_desc 6 $inf]5 \\\\(core\\\\)${ws}${binfile}${ws}\" \\\n-\t\t    ]\n-\t}\n-    }\n-}\n-\n-# Test that when there's a foreground execution command in progress, a\n-# TARGET_WAITKIND_NO_RESUMED for a particular target is ignored when\n-# other targets are still resumed.\n-\n-proc test_no_resumed {} {\n-    proc test_no_resumed_infs {inf_A inf_B} {\n-\tglobal gdb_prompt\n-\n-\tif {![setup \"off\"]} {\n-\t    untested \"setup failed\"\n-\t    return\n-\t}\n-\n-\tgdb_test \"thread $inf_A.2\" \"Switching to thread $inf_A\\.2 .*\" \\\n-\t    \"select thread of target A\"\n-\n-\tgdb_test_no_output \"set scheduler-locking on\"\n-\n-\tgdb_test_multiple \"continue &\" \"\" {\n-\t    -re \"Continuing.*$gdb_prompt \" {\n-\t\tpass $gdb_test_name\n-\t    }\n-\t}\n-\n-\tgdb_test \"thread $inf_B.2\" \"Switching to thread $inf_B\\.2 .*\" \\\n-\t    \"select thread of target B\"\n-\tgdb_test \"p exit_thread = 1\" \" = 1\" \\\n-\t    \"set the thread to exit on resumption\"\n-\n-\t# Wait 3 seconds.  If we see any response from GDB, such as\n-\t# \"No unwaited-for children left.\" it's a bug.\n-\tgdb_test_multiple \"continue\" \"continue\" {\n-\t    -timeout 3\n-\t    timeout {\n-\t\tpass $gdb_test_name\n-\t    }\n-\t}\n-\n-\t# Now stop the program (all targets).\n-\tsend_gdb \"\\003\"\n-\tgdb_test_multiple \"\" \"send_gdb control C\" {\n-\t    -re \"received signal SIGINT.*$gdb_prompt $\" {\n-\t\tpass $gdb_test_name\n-\t    }\n-\t}\n-\n-\tgdb_test_multiple \"info threads\" \"all threads stopped\" {\n-\t    -re \"\\\\\\(running\\\\\\).*$gdb_prompt $\" {\n-\t\tfail $gdb_test_name\n-\t    }\n-\t    -re \"$gdb_prompt $\" {\n-\t\tpass $gdb_test_name\n-\t    }\n-\t}\n-    }\n-\n-    # inferior 1 -> native\n-    # inferior 2 -> extended-remote 1\n-    # inferior 5 -> extended-remote 2\n-    set inferiors {1 2 5}\n-    foreach_with_prefix inf_A $inferiors {\n-\tforeach_with_prefix inf_B $inferiors {\n-\t    if {$inf_A == $inf_B} {\n-\t\tcontinue\n-\t    }\n-\t    test_no_resumed_infs $inf_A $inf_B\n-\t}\n-    }\n-}\n-\n-\n-# Make a core file with two threads upfront.  Several tests load the\n-# same core file.\n-prepare_core\n-\n-# Some basic \"continue\" + breakpoints tests.\n-with_test_prefix \"continue\" {\n-    foreach_with_prefix non-stop {\"off\" \"on\"} {\n-\ttest_continue ${non-stop}\n-    }\n-}\n-\n-# Some basic all-stop Ctrl-C tests.\n-with_test_prefix \"interrupt\" {\n-    test_ctrlc\n-}\n-\n-# Test ping-ponging between two targets with \"next\".\n-with_test_prefix \"ping-pong\" {\n-    test_ping_pong_next\n-}\n-\n-# Test \"info inferiors\" and \"info connections\" commands.\n-with_test_prefix \"info-inferiors\" {\n-    foreach_with_prefix multi_process {\"on\" \"off\"} {\n-\ttest_info_inferiors $multi_process\n-    }\n-}\n-\n-# Test TARGET_WAITKIND_NO_RESUMED handling with multiple targets.\n-with_test_prefix \"no-resumed\" {\n-    test_no_resumed\n-}\n-\n-cleanup_gdbservers"
    },
    {
      "sha": "8dcd413f58c1ad8b2203d19f8790fd6b810611fc",
      "filename": "gdb/testsuite/gdb.multi/multi-target.exp.tcl",
      "status": "added",
      "additions": 185,
      "deletions": 0,
      "changes": 185,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target.exp.tcl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e11daf7a2e0e08e0820f528175113134151a1a14/gdb/testsuite/gdb.multi/multi-target.exp.tcl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target.exp.tcl?ref=e11daf7a2e0e08e0820f528175113134151a1a14",
      "patch": "@@ -0,0 +1,185 @@\n+# Copyright 2017-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Common routines for testing multi-target features.\n+\n+load_lib gdbserver-support.exp\n+\n+standard_testfile multi-target.c\n+\n+# Keep a list of (inferior ID, spawn ID).\n+set server_spawn_ids [list]\n+\n+proc connect_target_extended_remote {binfile num} {\n+    set res [gdbserver_start \"--multi\" \"\"]\n+    global server_spawn_ids server_spawn_id\n+    lappend server_spawn_ids $num $server_spawn_id\n+    set gdbserver_gdbport [lindex $res 1]\n+    return [gdb_target_cmd \"extended-remote\" $gdbserver_gdbport]\n+}\n+\n+# Add and start inferior number NUM.  Returns true on success, false\n+# otherwise.\n+proc add_inferior {num target binfile {gcorefile \"\"}} {\n+    # Start another inferior.\n+    gdb_test \"add-inferior -no-connection\" \"Added inferior $num\" \\\n+\t\"add empty inferior $num\"\n+    gdb_test \"inferior $num\" \"Switching to inferior $num.*\" \\\n+\t\"switch to inferior $num\"\n+    gdb_test \"file ${binfile}\" \".*\" \"load file in inferior $num\"\n+    gdb_test_no_output \"set remote exec-file ${binfile}\" \\\n+\t\"set remote-exec file in inferior $num\"\n+\n+    if {$target == \"core\"} {\n+\tgdb_test \"core $gcorefile\" \"Core was generated by.*\" \\\n+\t    \"core [file tail $gcorefile], inf $num\"\n+\treturn 1\n+    }\n+\n+    if {$target == \"extended-remote\"} {\n+\tif {[connect_target_extended_remote $binfile $num]} {\n+\t    return 0\n+\t}\n+    }\n+    if ![runto \"all_started\"] then {\n+\treturn 0\n+    }\n+    delete_breakpoints\n+\n+    return 1\n+}\n+\n+proc prepare_core {} {\n+    global gcorefile gcore_created\n+    global binfile\n+\n+    clean_restart ${binfile}\n+\n+    if ![runto all_started] then {\n+\treturn -1\n+    }\n+\n+    global testfile\n+    set gcorefile [standard_output_file $testfile.gcore]\n+    set gcore_created [gdb_gcore_cmd $gcorefile \"save a core file\"]\n+}\n+\n+proc next_live_inferior {inf} {\n+    incr inf\n+    if {$inf == 3} {\n+\t# 3 is a core.\n+\treturn 4\n+    }\n+    if {$inf > 5} {\n+\t# 6 is a core.\n+\treturn 1\n+    }\n+\n+    return $inf\n+}\n+\n+# Clean up the server_spawn_ids.\n+proc cleanup_gdbservers { } {\n+    global server_spawn_id\n+    global server_spawn_ids\n+    foreach { inferior_id spawn_id } $server_spawn_ids {\n+\tset server_spawn_id $spawn_id\n+\tgdb_test \"inferior $inferior_id\"\n+\tgdbserver_exit 0\n+    }\n+    set server_spawn_ids [list]\n+}\n+\n+# Return true on success, false otherwise.\n+\n+proc setup {non-stop} {\n+    global gcorefile gcore_created\n+    global binfile\n+\n+    cleanup_gdbservers\n+    clean_restart ${binfile}\n+\n+    # multi-target depends on target running in non-stop mode.  Force\n+    # it on for remote targets, until this is the default.\n+    gdb_test_no_output \"maint set target-non-stop on\"\n+\n+    gdb_test_no_output \"set non-stop ${non-stop}\"\n+\n+    if ![runto all_started] then {\n+\treturn 0\n+    }\n+\n+    delete_breakpoints\n+\n+    # inferior 1 -> native\n+    # inferior 2 -> extended-remote\n+    # inferior 3 -> core\n+    # inferior 4 -> native\n+    # inferior 5 -> extended-remote\n+    # inferior 6 -> core\n+    if {![add_inferior 2 \"extended-remote\" $binfile]} {\n+\treturn 0\n+    }\n+    if {![add_inferior 3 \"core\" $binfile $gcorefile]} {\n+\treturn 0\n+    }\n+    if {![add_inferior 4 \"native\" $binfile]} {\n+\treturn 0\n+    }\n+    if {![add_inferior 5 \"extended-remote\" $binfile]} {\n+\treturn 0\n+    }\n+    if {![add_inferior 6 \"core\" $binfile $gcorefile]} {\n+\treturn 0\n+    }\n+\n+    # For debugging.\n+    gdb_test \"info threads\" \".*\"\n+\n+    # Make \"continue\" resume all inferiors.\n+    if {${non-stop} == \"off\"} {\n+\tgdb_test_no_output \"set schedule-multiple on\"\n+    }\n+\n+    return 1\n+}\n+\n+proc multi_target_prepare {} {\n+    global binfile srcfile\n+\n+    if { [skip_gdbserver_tests] } {\n+\treturn 0\n+    }\n+\n+    # The plain remote target can't do multiple inferiors.\n+    if {[target_info gdb_protocol] != \"\"} {\n+\treturn 0\n+    }\n+\n+    if { [prepare_for_testing \"failed to prepare\" ${binfile} \"${srcfile}\" \\\n+\t      {debug pthreads}] } {\n+\treturn 0\n+    }\n+\n+    # Make a core file with two threads upfront.  Several tests load\n+    # the same core file.\n+    prepare_core\n+\n+    return 1\n+}\n+\n+proc multi_target_cleanup {} {\n+    cleanup_gdbservers\n+}"
    }
  ]
}