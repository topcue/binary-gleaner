{
  "sha": "94cb3754118669d46c8ad87c986d8d9c59fac65a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTRjYjM3NTQxMTg2NjlkNDZjOGFkODdjOTg2ZDhkOWM1OWZhYzY1YQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-10-21T13:08:54Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-10-21T13:08:54Z"
    },
    "message": "[gdb/testsuite] Compile infcall-nested-structs.exp with -O2\n\nAs mentioned in commit 745ff14e6e1 \"[gdb/tdep] Fix 'Unexpected register class'\nassert in amd64_push_arguments\", of the 12 KFAILs added there, 3 are KPASSing\nwith g++ 4.8.5.\n\nThe KPASSes are due to:\n- gdb incorrectly expecting the second half of the result of function\n  rtn_str_struct_02_01 in register %rdx.\n- rtn_str_struct_02_01 using %rdx as a temporary, thereby accidentally setting\n  it to the expected value.\n\nReduce the chance of hiding errors due accidental register settings by\ncompiling the test-case with -O2.\n\nThis fixes the KPASSes when applied on top of commit 745ff14e6e1.\n\nTested on x86_64-linux.\n\nTested with g++ 4.8.5, 7.4.1, 8.3.1, 9.2.1.\n\ngdb/testsuite/ChangeLog:\n\n2019-10-21  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.base/infcall-nested-structs.c: Add\n\t__attribute__((noinline,noclone)) to all functions.\n\t(call_all): Add missing variable initialization.  Simplify return value.\n\t(breakpt): Increment volatile variable, to prevent call from being\n\toptimized out.\n\t* gdb.base/infcall-nested-structs.exp: Compile with -O2.\n\nChange-Id: Ic027e1c957fecd6686345639db99f5eaee3cdf05",
    "tree": {
      "sha": "854f019d56306ec76d180b79e1a352a6fbf4d183",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/854f019d56306ec76d180b79e1a352a6fbf4d183"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/94cb3754118669d46c8ad87c986d8d9c59fac65a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94cb3754118669d46c8ad87c986d8d9c59fac65a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/94cb3754118669d46c8ad87c986d8d9c59fac65a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94cb3754118669d46c8ad87c986d8d9c59fac65a/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "95cc7c169c4bbb6f10e630184f527b20b83fc5c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/95cc7c169c4bbb6f10e630184f527b20b83fc5c3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/95cc7c169c4bbb6f10e630184f527b20b83fc5c3"
    }
  ],
  "stats": {
    "total": 98,
    "additions": 63,
    "deletions": 35
  },
  "files": [
    {
      "sha": "9f826a6290a72f77428fbe6ff1b9dbb78c8c142c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94cb3754118669d46c8ad87c986d8d9c59fac65a/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94cb3754118669d46c8ad87c986d8d9c59fac65a/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=94cb3754118669d46c8ad87c986d8d9c59fac65a",
      "patch": "@@ -1,3 +1,12 @@\n+2019-10-21  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.base/infcall-nested-structs.c: Add\n+\t__attribute__((noinline,noclone)) to all functions.\n+\t(call_all): Add missing variable initialization.  Simplify return value.\n+\t(breakpt): Increment volatile variable, to prevent call from being\n+\toptimized out.\n+\t* gdb.base/infcall-nested-structs.exp: Compile with -O2.\n+\n 2019-10-17  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.fortran/module.exp: Allow info variables to print info for files"
    },
    {
      "sha": "f2a42945cee6ce3b389391bd5e55ecde3665c7df",
      "filename": "gdb/testsuite/gdb.base/infcall-nested-structs.c",
      "status": "modified",
      "additions": 53,
      "deletions": 35,
      "changes": 88,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94cb3754118669d46c8ad87c986d8d9c59fac65a/gdb/testsuite/gdb.base/infcall-nested-structs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94cb3754118669d46c8ad87c986d8d9c59fac65a/gdb/testsuite/gdb.base/infcall-nested-structs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/infcall-nested-structs.c?ref=94cb3754118669d46c8ad87c986d8d9c59fac65a",
      "patch": "@@ -51,13 +51,13 @@ typedef long double _Complex tldc;\n #endif /* TEST_COMPLEX */\n \n #define MAKE_CHECK_FUNCS(TYPE)\t\t\t\t\t\\\n-  int\t\t\t\t\t\t\t\t\\\n+  int __attribute__((noinline,noclone))\t\t\t\t\\\n   check_arg_ ## TYPE (struct TYPE arg)\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n     return cmp_ ## TYPE (arg, ref_val_ ## TYPE);\t\t\\\n   }\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n-  struct TYPE\t\t\t\t\t\t\t\\\n+  struct TYPE __attribute__((noinline,noclone))\t\t\t\\\n   rtn_str_ ## TYPE (void)\t\t\t\t\t\\\n   {\t\t\t\t\t\t\t\t\\\n     return (ref_val_ ## TYPE);\t\t\t\t\t\\\n@@ -128,125 +128,141 @@ struct struct_static_06_04 { ES(es1); ES(es2); static tA a; ES(es3); static tB b\n \n #endif\n \n-int cmp_struct_01_01 (struct struct_01_01 a, struct struct_01_01 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_01_01 (struct struct_01_01 a, struct struct_01_01 b)\n { return a.s2.s1.a == b.s2.s1.a; }\n \n-int cmp_struct_01_02 (struct struct_01_02 a, struct struct_01_02 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_01_02 (struct struct_01_02 a, struct struct_01_02 b)\n { return a.a == b.a; }\n \n-int cmp_struct_01_03 (struct struct_01_03 a, struct struct_01_03 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_01_03 (struct struct_01_03 a, struct struct_01_03 b)\n { return a.s4.s3.a == b.s4.s3.a; }\n \n-int cmp_struct_01_04 (struct struct_01_04 a, struct struct_01_04 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_01_04 (struct struct_01_04 a, struct struct_01_04 b)\n { return a.a == b.a; }\n \n-int cmp_struct_02_01 (struct struct_02_01 a, struct struct_02_01 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_02_01 (struct struct_02_01 a, struct struct_02_01 b)\n { return a.s2.s1.a == b.s2.s1.a && a.s2.s1.b == b.s2.s1.b; }\n \n-int cmp_struct_02_02 (struct struct_02_02 a, struct struct_02_02 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_02_02 (struct struct_02_02 a, struct struct_02_02 b)\n { return a.a == b.a && a.b == b.b; }\n \n-int cmp_struct_02_03 (struct struct_02_03 a, struct struct_02_03 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_02_03 (struct struct_02_03 a, struct struct_02_03 b)\n { return a.s4.s3.a == b.s4.s3.a && a.s6.s5.b == b.s6.s5.b; }\n \n-int cmp_struct_02_04 (struct struct_02_04 a, struct struct_02_04 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_02_04 (struct struct_02_04 a, struct struct_02_04 b)\n { return a.a == b.a && a.b == b.b; }\n \n-int cmp_struct_04_01 (struct struct_04_01 a, struct struct_04_01 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_04_01 (struct struct_04_01 a, struct struct_04_01 b)\n { return a.s2.s1.a == b.s2.s1.a && a.s2.s1.b == b.s2.s1.b\n \t && a.s2.s1.c == b.s2.s1.c && a.s2.s1.d == b.s2.s1.d; }\n \n-int cmp_struct_04_02 (struct struct_04_02 a, struct struct_04_02 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_04_02 (struct struct_04_02 a, struct struct_04_02 b)\n { return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d; }\n \n-int cmp_struct_04_03 (struct struct_04_03 a, struct struct_04_03 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_04_03 (struct struct_04_03 a, struct struct_04_03 b)\n { return a.s4.s3.a == b.s4.s3.a && a.s6.s5.b == b.s6.s5.b\n \t && a.s8.s7.c == b.s8.s7.c && a.s10.s9.d == b.s10.s9.d; }\n \n-int cmp_struct_04_04 (struct struct_04_04 a, struct struct_04_04 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_04_04 (struct struct_04_04 a, struct struct_04_04 b)\n { return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d; }\n \n-int cmp_struct_05_01 (struct struct_05_01 a, struct struct_05_01 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_05_01 (struct struct_05_01 a, struct struct_05_01 b)\n { return a.s2.s1.a == b.s2.s1.a && a.s2.s1.b == b.s2.s1.b\n \t && a.s2.s1.c == b.s2.s1.c && a.s2.s1.d == b.s2.s1.d\n \t && a.s2.s1.e == b.s2.s1.e; }\n \n-int cmp_struct_05_02 (struct struct_05_02 a, struct struct_05_02 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_05_02 (struct struct_05_02 a, struct struct_05_02 b)\n { return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d && a.e == b.e; }\n \n-int cmp_struct_05_03 (struct struct_05_03 a, struct struct_05_03 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_05_03 (struct struct_05_03 a, struct struct_05_03 b)\n { return a.s4.s3.a == b.s4.s3.a && a.s6.s5.b == b.s6.s5.b\n \t && a.s8.s7.c == b.s8.s7.c && a.s10.s9.d == b.s10.s9.d\n \t && a.s12.s11.e == b.s12.s11.e; }\n \n-int cmp_struct_05_04 (struct struct_05_04 a, struct struct_05_04 b)\n+int __attribute__((noinline,noclone))\n+cmp_struct_05_04 (struct struct_05_04 a, struct struct_05_04 b)\n { return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d && a.e == b.e; }\n \n #ifdef __cplusplus\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_02_01 (struct struct_static_02_01 a,\n \t\t\t struct struct_static_02_01 b)\n { return a.s2.s1.a == b.s2.s1.a && a.s2.s1.b == b.s2.s1.b; }\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_02_02 (struct struct_static_02_02 a,\n \t\t\t struct struct_static_02_02 b)\n { return a.a == b.a && a.b == b.b; }\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_02_03 (struct struct_static_02_03 a,\n \t\t\t struct struct_static_02_03 b)\n { return a.s4.s3.a == b.s4.s3.a && a.s6.s5.b == b.s6.s5.b; }\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_02_04 (struct struct_static_02_04 a,\n \t\t\t     struct struct_static_02_04 b)\n { return a.a == b.a && a.b == b.b; }\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_04_01 (struct struct_static_04_01 a,\n \t\t\t struct struct_static_04_01 b)\n { return a.s2.s1.a == b.s2.s1.a && a.s2.s1.b == b.s2.s1.b\n \t && a.s2.s1.c == b.s2.s1.c && a.s2.s1.d == b.s2.s1.d; }\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_04_02 (struct struct_static_04_02 a,\n \t\t\t struct struct_static_04_02 b)\n { return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d; }\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_04_03 (struct struct_static_04_03 a,\n \t\t\t struct struct_static_04_03 b)\n { return a.s4.s3.a == b.s4.s3.a && a.s6.s5.b == b.s6.s5.b\n \t && a.s8.s7.c == b.s8.s7.c && a.s10.s9.d == b.s10.s9.d; }\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_04_04 (struct struct_static_04_04 a,\n \t\t\t struct struct_static_04_04 b)\n { return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d; }\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_06_01 (struct struct_static_06_01 a,\n \t\t\t struct struct_static_06_01 b)\n { return a.s2.s1.a == b.s2.s1.a && a.s2.s1.b == b.s2.s1.b\n \t && a.s2.s1.c == b.s2.s1.c && a.s2.s1.d == b.s2.s1.d\n \t && a.s2.s1.e == b.s2.s1.e && a.f == b.f; }\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_06_02 (struct struct_static_06_02 a,\n \t\t\t struct struct_static_06_02 b)\n { return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d && a.e == b.e\n \t && a.f == b.f; }\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_06_03 (struct struct_static_06_03 a,\n \t\t\t struct struct_static_06_03 b)\n { return a.s4.s3.a == b.s4.s3.a && a.s6.s5.b == b.s6.s5.b\n \t && a.s8.s7.c == b.s8.s7.c && a.s10.s9.d == b.s10.s9.d\n \t && a.s12.s11.e == b.s12.s11.e && a.s12.s11.f == b.s12.s11.f; }\n \n-int\n+int __attribute__((noinline,noclone))\n cmp_struct_static_06_04 (struct struct_static_06_04 a,\n \t\t\t struct struct_static_06_04 b)\n { return a.a == b.a && a.b == b.b && a.c == b.c && a.d == b.d && a.e == b.e\n@@ -350,10 +366,10 @@ MAKE_CHECK_FUNCS(struct_static_06_04)\n \n #define CALL_LINE(NAME) val += check_arg_ ## NAME (rtn_str_ ## NAME ())\n \n-int\n+int __attribute__((noinline,noclone))\n call_all ()\n {\n-  int val;\n+  int val = 0;\n \n   CALL_LINE(struct_01_01);\n   CALL_LINE(struct_01_02);\n@@ -386,13 +402,15 @@ call_all ()\n   CALL_LINE(struct_static_06_04);\n #endif\n \n-  return (val != 4);\n+  return val;\n }\n \n-void\n+int volatile v = 1;\n+\n+void __attribute__((noinline, noclone))\n breakpt (void)\n {\n-  /* Nothing.  */\n+  v++;\n }\n \n int"
    },
    {
      "sha": "e3045d9243b75034457a36493a53db51b2195835",
      "filename": "gdb/testsuite/gdb.base/infcall-nested-structs.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94cb3754118669d46c8ad87c986d8d9c59fac65a/gdb/testsuite/gdb.base/infcall-nested-structs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94cb3754118669d46c8ad87c986d8d9c59fac65a/gdb/testsuite/gdb.base/infcall-nested-structs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/infcall-nested-structs.exp?ref=94cb3754118669d46c8ad87c986d8d9c59fac65a",
      "patch": "@@ -73,6 +73,7 @@ proc start_nested_structs_test { lang types } {\n     # Create the additional flags\n     set flags $compile_flags\n     lappend flags $lang\n+    lappend flags \"additional_flags=-O2\"\n \n     for {set n 0} {$n<[llength ${types}]} {incr n} {\n \tset m [I2A ${n}]"
    }
  ]
}