{
  "sha": "e76b224615f88255a3fd20d613983dde6cc240b3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTc2YjIyNDYxNWY4ODI1NWEzZmQyMGQ2MTM5ODNkZGU2Y2MyNDBiMw==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-03T18:05:06Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-11-27T21:36:59Z"
    },
    "message": "Precompute hash value for symbol_set_names\n\nWe can also compute the hash for the mangled name on a background\nthread so make this function even faster (about a 7% speedup).\n\ngdb/ChangeLog:\n\n2019-11-27  Christian Biesinger  <cbiesinger@google.com>\n\n\t* minsyms.c (minimal_symbol_reader::install): Also compute the hash\n\tof the mangled name on the background thread.\n\t* symtab.c (symbol_set_names): Allow passing in the hash of the\n\tlinkage_name.\n\t* symtab.h (symbol_set_names): Likewise.\n\nChange-Id: I044449e7eb60cffc1c43efd3412f2b485bd9faac",
    "tree": {
      "sha": "054769222cac115cdeaa6a89e46d5172a9e64ce6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/054769222cac115cdeaa6a89e46d5172a9e64ce6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e76b224615f88255a3fd20d613983dde6cc240b3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e76b224615f88255a3fd20d613983dde6cc240b3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e76b224615f88255a3fd20d613983dde6cc240b3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e76b224615f88255a3fd20d613983dde6cc240b3/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "640ab94712483457b99bd1039b52821c510b28a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/640ab94712483457b99bd1039b52821c510b28a7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/640ab94712483457b99bd1039b52821c510b28a7"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 42,
    "deletions": 6
  },
  "files": [
    {
      "sha": "c278a7746c6764d78233311f4f1579af824280c2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e76b224615f88255a3fd20d613983dde6cc240b3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e76b224615f88255a3fd20d613983dde6cc240b3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e76b224615f88255a3fd20d613983dde6cc240b3",
      "patch": "@@ -1,3 +1,11 @@\n+2019-11-27  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* minsyms.c (minimal_symbol_reader::install): Also compute the hash\n+\tof the mangled name on the background thread.\n+\t* symtab.c (symbol_set_names): Allow passing in the hash of the\n+\tlinkage_name.\n+\t* symtab.h (symbol_set_names): Likewise.\n+\n 2019-11-27  Kevin Buettner  <kevinb@redhat.com>\n \n \t* dwarf2read.c (inherit_abstract_dies): Ensure that delayed"
    },
    {
      "sha": "141c3d2193537cf69bb04e84efff349f03da097c",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 25,
      "deletions": 2,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e76b224615f88255a3fd20d613983dde6cc240b3/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e76b224615f88255a3fd20d613983dde6cc240b3/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=e76b224615f88255a3fd20d613983dde6cc240b3",
      "patch": "@@ -1258,6 +1258,16 @@ clear_minimal_symbol_hash_tables (struct objfile *objfile)\n     }\n }\n \n+/* This struct is used to store values we compute for msymbols on the\n+   background threads but don't need to keep around long term.  */\n+struct computed_hash_values\n+{\n+  /* Length of the linkage_name of the symbol.  */\n+  size_t name_length;\n+  /* Hash code (using fast_hash) of the linkage_name.  */\n+  hashval_t mangled_name_hash;\n+};\n+\n /* Build (or rebuild) the minimal symbol hash tables.  This is necessary\n    after compacting or sorting the table since the entries move around\n    thus causing the internal minimal_symbol pointers to become jumbled.  */\n@@ -1370,13 +1380,17 @@ minimal_symbol_reader::install ()\n       std::mutex demangled_mutex;\n #endif\n \n+      std::vector<computed_hash_values> hash_values (mcount);\n+\n       msymbols = m_objfile->per_bfd->msymbols.get ();\n       gdb::parallel_for_each\n \t(&msymbols[0], &msymbols[mcount],\n \t [&] (minimal_symbol *start, minimal_symbol *end)\n \t {\n \t   for (minimal_symbol *msym = start; msym < end; ++msym)\n \t     {\n+\t       size_t idx = msym - msymbols;\n+\t       hash_values[idx].name_length = strlen (msym->name);\n \t       if (!msym->name_set)\n \t\t {\n \t\t   /* This will be freed later, by symbol_set_names.  */\n@@ -1386,6 +1400,9 @@ minimal_symbol_reader::install ()\n \t\t     (msym, demangled_name,\n \t\t      &m_objfile->per_bfd->storage_obstack);\n \t\t   msym->name_set = 1;\n+\n+\t\t   hash_values[idx].mangled_name_hash\n+\t\t     = fast_hash (msym->name, hash_values[idx].name_length);\n \t\t }\n \t     }\n \t   {\n@@ -1396,8 +1413,14 @@ minimal_symbol_reader::install ()\n #endif\n \t     for (minimal_symbol *msym = start; msym < end; ++msym)\n \t       {\n-\t\t symbol_set_names (msym, msym->name, false,\n-\t\t\t\t   m_objfile->per_bfd);\n+\t\t size_t idx = msym - msymbols;\n+\t\t symbol_set_names\n+\t\t   (msym,\n+\t\t    gdb::string_view(msym->name,\n+\t\t\t\t     hash_values[idx].name_length),\n+\t\t    false,\n+\t\t    m_objfile->per_bfd,\n+\t\t    hash_values[idx].mangled_name_hash);\n \t       }\n \t   }\n \t });"
    },
    {
      "sha": "894a3230038eb312e7e593f531dd698acef4cc0a",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e76b224615f88255a3fd20d613983dde6cc240b3/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e76b224615f88255a3fd20d613983dde6cc240b3/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=e76b224615f88255a3fd20d613983dde6cc240b3",
      "patch": "@@ -836,7 +836,8 @@ symbol_find_demangled_name (struct general_symbol_info *gsymbol,\n void\n symbol_set_names (struct general_symbol_info *gsymbol,\n \t\t  gdb::string_view linkage_name, bool copy_name,\n-\t\t  struct objfile_per_bfd_storage *per_bfd)\n+\t\t  struct objfile_per_bfd_storage *per_bfd,\n+\t\t  gdb::optional<hashval_t> hash)\n {\n   struct demangled_name_entry **slot;\n \n@@ -864,9 +865,11 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n     create_demangled_names_hash (per_bfd);\n \n   struct demangled_name_entry entry (linkage_name);\n+  if (!hash.has_value ())\n+    hash = hash_demangled_name_entry (&entry);\n   slot = ((struct demangled_name_entry **)\n-\t  htab_find_slot (per_bfd->demangled_names_hash.get (),\n-\t\t\t  &entry, INSERT));\n+          htab_find_slot_with_hash (per_bfd->demangled_names_hash.get (),\n+\t\t\t\t    &entry, *hash, INSERT));\n \n   /* If this name is not in the hash table, add it.  */\n   if (*slot == NULL"
    },
    {
      "sha": "4cfdf06b4a80a35faa5c2c64e7bc2bbfee9c12c9",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e76b224615f88255a3fd20d613983dde6cc240b3/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e76b224615f88255a3fd20d613983dde6cc240b3/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=e76b224615f88255a3fd20d613983dde6cc240b3",
      "patch": "@@ -553,7 +553,9 @@ extern char *symbol_find_demangled_name (struct general_symbol_info *gsymbol,\n \t\t    (objfile)->per_bfd)\n extern void symbol_set_names (struct general_symbol_info *symbol,\n \t\t\t      gdb::string_view linkage_name, bool copy_name,\n-\t\t\t      struct objfile_per_bfd_storage *per_bfd);\n+\t\t\t      struct objfile_per_bfd_storage *per_bfd,\n+\t\t\t      gdb::optional<hashval_t> hash\n+\t\t\t        = gdb::optional<hashval_t> ());\n \n /* Return true if NAME matches the \"search\" name of SYMBOL, according\n    to the symbol's language.  */"
    }
  ]
}