{
  "sha": "46fec6428ef7504be486ebd57e2509bde4382918",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDZmZWM2NDI4ZWY3NTA0YmU0ODZlYmQ1N2UyNTA5YmRlNDM4MjkxOA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-15T17:50:28Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-22T10:07:37Z"
    },
    "message": "gdb/objc: make objc_demangle a member function of objc_language\n\nMakes the objc_demangle helper function a member function of\nobjc_language (by renaming it to be the demangle_symbol member\nfunction).\n\nI also fixed some of the obvious coding standard violations in\nobj_demangle, so the '&&' operators are now at the start of the line,\nnot the end.  Comparison to nullptr are now made explicit, as are\ncomparisons to the null character.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* objc-lang.c (objc_demangle): Renamed to\n\tobjc_language::demangle_symbol, and moved later in the file.\n\t(objc_language::sniff_from_mangled_name): Call demangle_symbol\n\tmember function.\n\t(objc_language::demangle_symbol): Defined outside of class\n\tdeclaration.  The definition is the old objc_demangle with NULL\n\tchanged to nullptr, and if conditions relating to nullptr pointers\n\tor null character checks made explicit.\n\t* objc-lang.h (objc_demangle): Delete declaration.",
    "tree": {
      "sha": "1b5854ccb1d9b0b1ec03a0ad8c844d233b1e8e58",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1b5854ccb1d9b0b1ec03a0ad8c844d233b1e8e58"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/46fec6428ef7504be486ebd57e2509bde4382918",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46fec6428ef7504be486ebd57e2509bde4382918",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/46fec6428ef7504be486ebd57e2509bde4382918",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46fec6428ef7504be486ebd57e2509bde4382918/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08dedd6631efefbcba63c4dbf60ef97fb615e022",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/08dedd6631efefbcba63c4dbf60ef97fb615e022"
    }
  ],
  "stats": {
    "total": 153,
    "additions": 80,
    "deletions": 73
  },
  "files": [
    {
      "sha": "f3e7f3f8c594b30c24d99c36ae6f2b6587f0b202",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46fec6428ef7504be486ebd57e2509bde4382918/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46fec6428ef7504be486ebd57e2509bde4382918/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=46fec6428ef7504be486ebd57e2509bde4382918",
      "patch": "@@ -1,3 +1,15 @@\n+2021-03-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* objc-lang.c (objc_demangle): Renamed to\n+\tobjc_language::demangle_symbol, and moved later in the file.\n+\t(objc_language::sniff_from_mangled_name): Call demangle_symbol\n+\tmember function.\n+\t(objc_language::demangle_symbol): Defined outside of class\n+\tdeclaration.  The definition is the old objc_demangle with NULL\n+\tchanged to nullptr, and if conditions relating to nullptr pointers\n+\tor null character checks made explicit.\n+\t* objc-lang.h (objc_demangle): Delete declaration.\n+\n 2021-03-22  Martin Liska  <mliska@suse.cz>\n \n \t* arm-tdep.c (show_disassembly_style_sfunc): Replace usage of CONST_STRNEQ with startswith."
    },
    {
      "sha": "1d440128a3d255ae1d3ea3cf5e1efa843afdbff2",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 68,
      "deletions": 71,
      "changes": 139,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46fec6428ef7504be486ebd57e2509bde4382918/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46fec6428ef7504be486ebd57e2509bde4382918/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=46fec6428ef7504be486ebd57e2509bde4382918",
      "patch": "@@ -216,72 +216,6 @@ value_nsstring (struct gdbarch *gdbarch, const char *ptr, int len)\n   return nsstringValue;\n }\n \n-/* Objective-C name demangling.  */\n-\n-char *\n-objc_demangle (const char *mangled, int options)\n-{\n-  char *demangled, *cp;\n-\n-  if (mangled[0] == '_' &&\n-     (mangled[1] == 'i' || mangled[1] == 'c') &&\n-      mangled[2] == '_')\n-    {\n-      cp = demangled = (char *) xmalloc (strlen (mangled) + 2);\n-\n-      if (mangled[1] == 'i')\n-\t*cp++ = '-';\t\t/* for instance method */\n-      else\n-\t*cp++ = '+';\t\t/* for class    method */\n-\n-      *cp++ = '[';\t\t/* opening left brace  */\n-      strcpy(cp, mangled+3);\t/* Tack on the rest of the mangled name.  */\n-\n-      while (*cp && *cp == '_')\n-\tcp++;\t\t\t/* Skip any initial underbars in class\n-\t\t\t\t   name.  */\n-\n-      cp = strchr(cp, '_');\n-      if (!cp)\t                /* Find first non-initial underbar.  */\n-\t{\n-\t  xfree(demangled);\t/* not mangled name */\n-\t  return NULL;\n-\t}\n-      if (cp[1] == '_')\t\t/* Easy case: no category name.    */\n-\t{\n-\t  *cp++ = ' ';\t\t/* Replace two '_' with one ' '.   */\n-\t  strcpy(cp, mangled + (cp - demangled) + 2);\n-\t}\n-      else\n-\t{\n-\t  *cp++ = '(';\t\t/* Less easy case: category name.  */\n-\t  cp = strchr(cp, '_');\n-\t  if (!cp)\n-\t    {\n-\t      xfree(demangled);\t/* not mangled name */\n-\t      return NULL;\n-\t    }\n-\t  *cp++ = ')';\n-\t  *cp++ = ' ';\t\t/* Overwriting 1st char of method name...  */\n-\t  strcpy(cp, mangled + (cp - demangled));\t/* Get it back.  */\n-\t}\n-\n-      while (*cp && *cp == '_')\n-\tcp++;\t\t\t/* Skip any initial underbars in\n-\t\t\t\t   method name.  */\n-\n-      for (; *cp; cp++)\n-\tif (*cp == '_')\n-\t  *cp = ':';\t\t/* Replace remaining '_' with ':'.  */\n-\n-      *cp++ = ']';\t\t/* closing right brace */\n-      *cp++ = 0;\t\t/* string terminator */\n-      return demangled;\n-    }\n-  else\n-    return NULL;\t/* Not an objc mangled name.  */\n-}\n-\n /* Class representing the Objective-C language.  */\n \n class objc_language : public language_defn\n@@ -320,16 +254,13 @@ class objc_language : public language_defn\n   bool sniff_from_mangled_name (const char *mangled,\n \t\t\t\tchar **demangled) const override\n   {\n-    *demangled = objc_demangle (mangled, 0);\n+    *demangled = demangle_symbol (mangled, 0);\n     return *demangled != NULL;\n   }\n \n   /* See language.h.  */\n \n-  char *demangle_symbol (const char *mangled, int options) const override\n-  {\n-    return objc_demangle (mangled, options);\n-  }\n+  char *demangle_symbol (const char *mangled, int options) const override;\n \n   /* See language.h.  */\n \n@@ -385,6 +316,72 @@ class objc_language : public language_defn\n   { return macro_expansion_c; }\n };\n \n+/* See declaration of objc_language::demangle_symbol above.  */\n+\n+char *\n+objc_language::demangle_symbol (const char *mangled, int options) const\n+{\n+  char *demangled, *cp;\n+\n+  if (mangled[0] == '_'\n+      && (mangled[1] == 'i' || mangled[1] == 'c')\n+      && mangled[2] == '_')\n+    {\n+      cp = demangled = (char *) xmalloc (strlen (mangled) + 2);\n+\n+      if (mangled[1] == 'i')\n+\t*cp++ = '-';\t\t/* for instance method */\n+      else\n+\t*cp++ = '+';\t\t/* for class    method */\n+\n+      *cp++ = '[';\t\t/* opening left brace  */\n+      strcpy(cp, mangled+3);\t/* Tack on the rest of the mangled name.  */\n+\n+      while (*cp != '\\0' && *cp == '_')\n+\tcp++;\t\t\t/* Skip any initial underbars in class\n+\t\t\t\t   name.  */\n+\n+      cp = strchr(cp, '_');\n+      if (cp == nullptr)\t/* Find first non-initial underbar.  */\n+\t{\n+\t  xfree(demangled);\t/* not mangled name */\n+\t  return nullptr;\n+\t}\n+      if (cp[1] == '_')\t\t/* Easy case: no category name.    */\n+\t{\n+\t  *cp++ = ' ';\t\t/* Replace two '_' with one ' '.   */\n+\t  strcpy(cp, mangled + (cp - demangled) + 2);\n+\t}\n+      else\n+\t{\n+\t  *cp++ = '(';\t\t/* Less easy case: category name.  */\n+\t  cp = strchr(cp, '_');\n+\t  if (cp == nullptr)\n+\t    {\n+\t      xfree(demangled);\t/* not mangled name */\n+\t      return nullptr;\n+\t    }\n+\t  *cp++ = ')';\n+\t  *cp++ = ' ';\t\t/* Overwriting 1st char of method name...  */\n+\t  strcpy(cp, mangled + (cp - demangled));\t/* Get it back.  */\n+\t}\n+\n+      while (*cp != '\\0' && *cp == '_')\n+\tcp++;\t\t\t/* Skip any initial underbars in\n+\t\t\t\t   method name.  */\n+\n+      for (; *cp != '\\0'; cp++)\n+\tif (*cp == '_')\n+\t  *cp = ':';\t\t/* Replace remaining '_' with ':'.  */\n+\n+      *cp++ = ']';\t\t/* closing right brace */\n+      *cp++ = 0;\t\t/* string terminator */\n+      return demangled;\n+    }\n+  else\n+    return nullptr;\t/* Not an objc mangled name.  */\n+}\n+\n /* Single instance of the class representing the Objective-C language.  */\n \n static objc_language objc_language_defn;"
    },
    {
      "sha": "9d3e26d18a09ae6100032cdd933baf3538e20b19",
      "filename": "gdb/objc-lang.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/46fec6428ef7504be486ebd57e2509bde4382918/gdb/objc-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/46fec6428ef7504be486ebd57e2509bde4382918/gdb/objc-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.h?ref=46fec6428ef7504be486ebd57e2509bde4382918",
      "patch": "@@ -31,8 +31,6 @@ extern CORE_ADDR lookup_objc_class     (struct gdbarch *gdbarch,\n extern CORE_ADDR lookup_child_selector (struct gdbarch *gdbarch,\n \t\t\t\t\tconst char *methodname);\n \n-extern char *objc_demangle (const char *mangled, int options);\n-\n extern int find_objc_msgcall (CORE_ADDR pc, CORE_ADDR *new_pc);\n \n extern const char *find_imps (const char *method,"
    }
  ]
}