{
  "sha": "c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzBiM2IzYmRjNjFjZDYzMmIwZWFmNjUwZjZhYTdkZDYwNjZjMjhjZA==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2020-06-22T19:56:59Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2020-06-26T20:04:46Z"
    },
    "message": "Make test names unique in python.exp and guile.exp\n\nVersion 2, handles the comments of Simon and Pedro.\n\nNote that gdb_test_multiline and gdb_py_test_multiple are using\nthe \"input line\" as the test name, and so when there is a duplicated\ninput line (such as a line containing \"end\"), we have duplicated test\nnames => as gdb_test_multiline and gdb_py_test_multiple are identical,\nas indicated in FIXME, move this to gdb.exp, and make the test name unique\nby adding the inputnr to the pass message for each input.\n\n2020-06-26  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* lib/gdb.exp (gdb_test_multiline): New, moved from gdb-guile.exp,\n\thave a input seq nr in each pass message.\n        * lib/gdb-guile.exp (gdb_test_multiline): Move to gdb.exp.\n\t* lib/gdb-python.exp (gdb_py_test_multiple): Remove.\n\t* gdb.python/python.exp: Make test names unique,\n\tuse gdb_test_multiline instead of gdb_py_test_multiple,\n\tuse $gdb_test_name.\n\t* gdb.guile/guile.exp: Make test names unique, use $gdb_test_name",
    "tree": {
      "sha": "30cf6acc3d5e2729ec3a8d43bce6b5c4059bba1e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/30cf6acc3d5e2729ec3a8d43bce6b5c4059bba1e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "b6cd5d100a3ecc80f35d667063f94c98bdfbf20a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6cd5d100a3ecc80f35d667063f94c98bdfbf20a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b6cd5d100a3ecc80f35d667063f94c98bdfbf20a"
    }
  ],
  "stats": {
    "total": 190,
    "additions": 95,
    "deletions": 95
  },
  "files": [
    {
      "sha": "adb5349b8040035bd48ea35d8a2180c6ec6c4132",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd",
      "patch": "@@ -1,3 +1,14 @@\n+2020-06-26  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* lib/gdb.exp (gdb_test_multiline): New, moved from gdb-guile.exp,\n+\thave a input seq nr in each pass message.\n+        * lib/gdb-guile.exp (gdb_test_multiline): Move to gdb.exp.\n+\t* lib/gdb-python.exp (gdb_py_test_multiple): Remove.\n+\t* gdb.python/python.exp: Make test names unique,\n+\tuse gdb_test_multiline instead of gdb_py_test_multiple,\n+\tuse $gdb_test_name.\n+\t* gdb.guile/guile.exp: Make test names unique, use $gdb_test_name\n+\n 2020-06-26  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* configure.ac: Add --enable-libctf."
    },
    {
      "sha": "a031ea5a189a1db5131c02f876d1af94fcdb9033",
      "filename": "gdb/testsuite/gdb.python/python.exp",
      "status": "modified",
      "additions": 62,
      "deletions": 56,
      "changes": 118,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd/gdb/testsuite/gdb.python/python.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd/gdb/testsuite/gdb.python/python.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/python.exp?ref=c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd",
      "patch": "@@ -46,7 +46,7 @@ gdb_test_multiple \"python print (23)\" \"verify python support\" {\n \t  \"source source2.py when python disabled\"\n \n       # Verify multi-line python commands cause an error.\n-      gdb_py_test_multiple \"multi-line python command\" \\\n+      gdb_test_multiline \"multi-line python command\" \\\n \t  \"python\" \"\" \\\n \t  \"print (23)\" \"\" \\\n \t  \"end\" \"not supported.*\"\n@@ -56,7 +56,7 @@ gdb_test_multiple \"python print (23)\" \"verify python support\" {\n     -re \"$gdb_prompt $\"\t{}\n }\n \n-gdb_py_test_multiple \"multi-line python command\" \\\n+gdb_test_multiline \"multi-line python command\" \\\n   \"python\" \"\" \\\n   \"print (23)\" \"\" \\\n   \"end\" \"23\"\n@@ -77,15 +77,15 @@ with_test_prefix \"python interactive help\" {\n     }\n }\n \n-gdb_py_test_multiple \"show python command\" \\\n+gdb_test_multiline \"show python command\" \\\n   \"define zzq\" \"Type commands for definition of .* just \\\"end\\\"\\\\.*\" \\\n   \"python\" \"\" \\\n   \"print (23)\" \"\" \\\n   \"end\" \"\" \\\n   \"end\" \"\" \\\n   \"show user zzq\" \"User command \\\"zzq\\\":.*  python.*print \\\\(23\\\\).*  end\"\n \n-gdb_py_test_multiple \"indented multi-line python command\" \\\n+gdb_test_multiline \"indented multi-line python command\" \\\n   \"python\" \"\" \\\n   \"def foo ():\" \"\" \\\n   \"  print ('hello, world!')\" \"\" \\\n@@ -124,7 +124,7 @@ gdb_test \"python gdb.execute('echo 2\\\\necho 3\\\\\\\\n\\\\n')\" \"23\" \\\n gdb_test \" \" \"23\" \"gdb.execute does not affect repeat history\"\n \n # Test post_event.\n-gdb_py_test_multiple \"post event insertion\" \\\n+gdb_test_multiline \"post event insertion\" \\\n   \"python\" \"\" \\\n   \"someVal = 0\" \"\" \\\n   \"class Foo(object):\" \"\" \\\n@@ -194,7 +194,7 @@ gdb_test \"python print (a)\" \".*aliases -- User-defined aliases of other commands\n gdb_py_test_silent_cmd \"python nothread = gdb.selected_thread()\" \"Attempt to aquire thread with no inferior\" 1\n gdb_test \"python print (nothread == None)\" \"True\" \"ensure that no threads are returned\"\n \n-gdb_py_test_multiple \"register atexit function\" \\\n+gdb_test_multiline \"register atexit function\" \\\n     \"python\" \"\" \\\n     \"import atexit\" \"\" \\\n     \"def printit(arg):\" \"\" \\\n@@ -229,10 +229,12 @@ runto $lineno\n gdb_test \"python gdb.decode_line(\\\"main.c:43\\\")\" \\\n     \"gdb.error: No source file named main.c.*\" \"test decode_line no source named main\"\n \n-gdb_py_test_silent_cmd \"python symtab = gdb.decode_line()\" \"test decode_line current location\" 1\n-gdb_test \"python print (len(symtab))\" \"2\" \"test decode_line current location\"\n-gdb_test \"python print (symtab\\[0\\])\" \"None\" \"test decode_line expression parse\"\n-gdb_test \"python print (len(symtab\\[1\\]))\" \"1\" \"test decode_line current location\"\n+with_test_prefix \"test decode_line current location\" {\n+    gdb_py_test_silent_cmd \"python symtab = gdb.decode_line()\" \"decode current line\" 1\n+    gdb_test \"python print (len(symtab))\" \"2\" \"length of result\"\n+    gdb_test \"python print (symtab\\[0\\])\" \"None\" \"no unparsed text\"\n+    gdb_test \"python print (len(symtab\\[1\\]))\" \"1\" \"length of result locations\"\n+}\n \n # Test that decode_line with an empty string argument does not crash.\n gdb_py_test_silent_cmd \"python symtab2 = gdb.decode_line('')\" \\\n@@ -243,21 +245,23 @@ if { [is_remote host] } {\n } else {\n     set python_c [string_to_regexp \"gdb.python/python.c\"]\n }\n-gdb_test \"python print (symtab\\[1\\]\\[0\\].symtab)\" \".*${python_c}\" \"test decode_line current location filename\"\n-gdb_test \"python print (symtab\\[1\\]\\[0\\].line)\" \"$lineno\" \"test decode_line current location line number\"\n-\n-gdb_py_test_silent_cmd \"python symtab = gdb.decode_line(\\\"python.c:26 if foo\\\")\" \"test decode_line python.c:26\" 1\n-gdb_test \"python print (len(symtab))\" \"2\" \"test decode_line python.c:26 length\"\n-gdb_test \"python print (symtab\\[0\\])\" \"if foo\" \"test decode_line expression parse\"\n-gdb_test \"python print (len(symtab\\[1\\]))\" \"1\" \"test decode_line python.c:26 length\"\n-gdb_test \"python print (symtab\\[1\\]\\[0\\].symtab)\" \".*${python_c}\" \"test decode_line python.c:26 filename\"\n-gdb_test \"python print (symtab\\[1\\]\\[0\\].line)\" \"26\" \"test decode_line python.c:26 line number\"\n-\n-gdb_test \"python gdb.decode_line(\\\"randomfunc\\\")\" \\\n-    \"gdb.error: Function \\\"randomfunc\\\" not defined.*\" \"test decode_line randomfunc\"\n-gdb_py_test_silent_cmd \"python symtab = gdb.decode_line(\\\"func1\\\")\" \"test decode_line func1()\" 1\n-gdb_test \"python print (len(symtab))\" \"2\" \"test decode_line func1 length\"\n-gdb_test \"python print (len(symtab\\[1\\]))\" \"1\" \"test decode_line func1 length\"\n+with_test_prefix \"test decode_line\" {\n+    gdb_test \"python print (symtab\\[1\\]\\[0\\].symtab)\" \".*${python_c}\" \"current location filename\"\n+    gdb_test \"python print (symtab\\[1\\]\\[0\\].line)\" \"$lineno\" \"current location line number\"\n+\n+    gdb_py_test_silent_cmd \"python symtab = gdb.decode_line(\\\"python.c:26 if foo\\\")\" \"python.c:26 decode\" 1\n+    gdb_test \"python print (len(symtab))\" \"2\" \"python.c:26 length 2\"\n+    gdb_test \"python print (symtab\\[0\\])\" \"if foo\" \"expression parse\"\n+    gdb_test \"python print (len(symtab\\[1\\]))\" \"1\" \"python.c:26 length 1\"\n+    gdb_test \"python print (symtab\\[1\\]\\[0\\].symtab)\" \".*${python_c}\" \"python.c:26 filename\"\n+    gdb_test \"python print (symtab\\[1\\]\\[0\\].line)\" \"26\" \"python.c:26 line number\"\n+\n+    gdb_test \"python gdb.decode_line(\\\"randomfunc\\\")\" \\\n+\t\"gdb.error: Function \\\"randomfunc\\\" not defined.*\" \"randomfunc\"\n+    gdb_py_test_silent_cmd \"python symtab = gdb.decode_line(\\\"func1\\\")\" \"func1()\" 1\n+    gdb_test \"python print (len(symtab))\" \"2\" \"func1 length 2\"\n+    gdb_test \"python print (len(symtab\\[1\\]))\" \"1\" \"func1 length 1\"\n+}\n \n if { [is_remote host] } {\n     set python_1_c [string_to_regexp \"python-1.c\"]\n@@ -284,12 +288,14 @@ gdb_py_test_silent_cmd {python symtab = gdb.decode_line (\"func1,func2\")} \\\n     \"test decode_line func1,func2\" 1\n gdb_test {python print (symtab[0])} \",func2\" \"stop at comma in linespec\"\n \n-gdb_py_test_silent_cmd \"python symtab = gdb.decode_line(\\\"*0\\\")\" \"Test decode_line *0\" 1\n-gdb_test \"python print (len(symtab))\" \"2\" \"test decode_line *0 result length\"\n-gdb_test \"python print (symtab\\[0\\])\" \"None\" \"test decode_line *0 unparsed\"\n-gdb_test \"python print (len(symtab\\[1\\]))\" \"1\" \"test decode_line *0 locations length\"\n-gdb_test \"python print (symtab\\[1\\]\\[0\\].symtab)\" \"None\" \"test decode_line *0 filename\"\n-gdb_test \"python print (symtab\\[1\\]\\[0\\].pc)\" \"0\" \"test decode_line *0 pc\"\n+with_test_prefix \"test decode_line\" {\n+    gdb_py_test_silent_cmd \"python symtab = gdb.decode_line(\\\"*0\\\")\" \"*0\" 1\n+    gdb_test \"python print (len(symtab))\" \"2\" \"*0 result length\"\n+    gdb_test \"python print (symtab\\[0\\])\" \"None\" \"*0 unparsed\"\n+    gdb_test \"python print (len(symtab\\[1\\]))\" \"1\" \"*0 locations length\"\n+    gdb_test \"python print (symtab\\[1\\]\\[0\\].symtab)\" \"None\" \"*0 filename\"\n+    gdb_test \"python print (symtab\\[1\\]\\[0\\].pc)\" \"0\" \"*0 pc\"\n+}\n \n # gdb.write\n gdb_test \"python print (sys.stderr)\" \".*gdb._GdbOutputErrorFile (instance|object) at.*\" \"test stderr location\"\n@@ -308,7 +314,7 @@ gdb_py_test_silent_cmd \"set python print-stack full\" \\\n \n # Test prompt substituion\n \n-gdb_py_test_multiple \"prompt substitution\" \\\n+gdb_test_multiline \"prompt substitution\" \\\n   \"python\" \"\" \\\n   \"someCounter = 0\" \"\" \\\n   \"def prompt(current):\" \"\" \\\n@@ -319,7 +325,7 @@ gdb_py_test_multiple \"prompt substitution\" \\\n   \"   return \\\"py prompt \\\" + str (someCounter) + \\\" \\\"\" \"\" \\\n   \"end\" \"\"\n \n-gdb_py_test_multiple \"prompt substitution readline\" \\\n+gdb_test_multiline \"prompt substitution readline\" \\\n   \"python\" \"\" \\\n   \"pCounter = 0\" \"\" \\\n   \"def program_prompt(current):\" \"\" \\\n@@ -334,39 +340,39 @@ set newprompt \"py prompt 1\"\n set newprompt2 \"py prompt 2\"\n set testfake \"testfake\"\n \n-gdb_test_multiple \"python gdb.prompt_hook = prompt\" \"set the hook\" {\n+gdb_test_multiple \"python gdb.prompt_hook = prompt\" \"set the hook = prompt\" {\n     -re \"\\[\\r\\n\\]$newprompt $\" {\n-\tpass \"set hook\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_test_multiple \"set prompt testfake \" \"set testfake prompt in GDB\" {\n     -re \"\\[\\r\\n\\]$testfake $\" {\n-\tpass \"set prompt testfake\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_test_multiple \"show prompt\" \"show testfake prompt\" {\n     -re \"Gdb's prompt is \\\"$testfake \\\"..* $\" {\n-\tpass \"show prompt shows guarded prompt\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_test_multiple \"set prompt blah \" \"set blah in GDB\" {\n     -re \"\\[\\r\\n\\]$newprompt2 $\" {\n-\tpass \"set prompt blah overriden\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_test_multiple \"python gdb.prompt_hook = None\" \"delete hook\" {\n     -re \"\\[\\r\\n\\]$newprompt2 $\" {\n-\tpass \"delete old hook\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_test_multiple \"set prompt $gdb_prompt \" \"set default prompt\" {\n     -re \"\\[\\r\\n\\]$gdb_prompt $\" {\n-\tpass \"set default prompt\"\n+\tpass $gdb_test_name\n     }\n }\n \n@@ -377,47 +383,47 @@ gdb_test_multiple \"pwd\" \"pwd\" {\n     }\n }\n \n-gdb_test_multiple \"python gdb.prompt_hook = program_prompt\" \"set the hook\" {\n+gdb_test_multiple \"python gdb.prompt_hook = program_prompt\" \"set the programming hook\" {\n     -re \"\\[\\r\\n\\]$gdb_prompt $\" {\n-\tpass \"set programming hook\"\n+\tpass $gdb_test_name\n     }\n }\n \n-gdb_test_multiple \"python\" \"test we ignore substituion for seconday prompts\" {\n+gdb_test_multiple \"python\" \"test we ignore substitution for seconday prompts\" {\n     -re \"\\r\\n>$\" {\n-\tpass \"readline secondary are not substituted\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_test_multiple \"end\" \"end programming\" {\n     -re \"\\[\\r\\n\\]$gdb_prompt $\" {\n-\tpass \"end programming\"\n+\tpass $gdb_test_name\n     }\n }\n \n-gdb_py_test_multiple \"prompt substitution readline\" \\\n+gdb_test_multiline \"prompt substitution readline import\" \\\n   \"python\" \"\" \\\n   \"import gdb.command.prompt\" \"\" \\\n   \"end\" \"\"\n \n gdb_test_multiple \"set extended-prompt one two three \" \\\n     \"set basic extended prompt\" {\n     -re \"\\[\\r\\n\\]one two three $\" {\n-\tpass \"set basic extended prompt\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_test_multiple \"set extended-prompt \\\\w \" \\\n     \"set extended prompt working directory\" {\n     -re \"\\[\\r\\n\\][string_to_regexp $working_dir] $\" {\n-\tpass \"set extended prompt working directory\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_test_multiple \"set extended-prompt some param \\\\p{python print-stack} \" \\\n     \"set extended prompt parameter\" {\n     -re \"\\[\\r\\n\\]some param full $\" {\n-\tpass \"set extended prompt parameter\"\n+\tpass $gdb_test_name\n     }\n }\n \n@@ -449,33 +455,33 @@ gdb_test \"show python print-stack\" \\\n gdb_py_test_silent_cmd \"set python print-stack message\" \\\n     \"Test print-stack set setting to message\" 1\n \n-gdb_py_test_multiple \"prompt substitution readline\" \\\n+gdb_test_multiline \"prompt substitution readline error_prompt\" \\\n   \"python\" \"\" \\\n   \"pCounter = 0\" \"\" \\\n   \"def error_prompt(current):\" \"\" \\\n   \"   raise RuntimeError(\\\"Python exception called\\\")\" \"\" \\\n   \"end\" \"\"\n \n-gdb_test_multiple \"python gdb.prompt_hook = error_prompt\" \"set the hook\" {\n+gdb_test_multiple \"python gdb.prompt_hook = error_prompt\" \"set the hook error_prompt\" {\n     -re \"Python Exception (exceptions.RuntimeError|<(type 'exceptions.|class ')RuntimeError'>) Python exception called.*$gdb_prompt $\" {\n-\tpass \"set hook\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_py_test_silent_cmd \"python gdb.prompt_hook = None\" \\\n-    \"set the hook to default\" 1\n+    \"set the hook to default 1\" 1\n \n gdb_py_test_silent_cmd \"set python print-stack full\" \\\n     \"set print-stack full for prompt error test\" 1\n \n-gdb_test_multiple \"python gdb.prompt_hook = error_prompt\" \"set the hook\" {\n+gdb_test_multiple \"python gdb.prompt_hook = error_prompt\" \"set the hook error_prompt traceback\" {\n     -re \"Traceback.*File.*line.*RuntimeError.*Python exception called.*$gdb_prompt $\" {\n-\tpass \"set hook\"\n+\tpass $gdb_test_name\n     }\n }\n \n gdb_py_test_silent_cmd \"python gdb.prompt_hook = None\" \\\n-    \"set the hook to default\" 1\n+    \"set the hook to default 2\" 1\n \n # Start with a fresh gdb.\n clean_restart ${testfile}"
    },
    {
      "sha": "ab6277b45ad911cb26e6af6dfe9bae555839a0f3",
      "filename": "gdb/testsuite/lib/gdb-guile.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 20,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd/gdb/testsuite/lib/gdb-guile.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd/gdb/testsuite/lib/gdb-guile.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb-guile.exp?ref=c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd",
      "patch": "@@ -54,26 +54,6 @@ proc gdb_scm_test_silent_cmd { cmd name {report_pass 1} } {\n     }\n }\n \n-# Usage: gdb_test_multiline NAME INPUT RESULT {INPUT RESULT} ...\n-# Run a test named NAME, consisting of multiple lines of input.\n-# After each input line INPUT, search for result line RESULT.\n-# Succeed if all results are seen; fail otherwise.\n-# FIXME: Move to gdb.exp and remove Python's gdb_py_test_multiple.\n-\n-proc gdb_test_multiline { name args } {\n-    global gdb_prompt\n-    foreach {input result} $args {\n-\tif {[gdb_test_multiple $input \"$name - $input\" {\n-\t    -re \"\\[\\r\\n\\]*($result)\\[\\r\\n\\]+($gdb_prompt | *>)$\" {\n-\t\tpass \"$name - $input\"\n-\t    }\n-\t}]} {\n-\t    return 1\n-\t}\n-    }\n-    return 0\n-}\n-\n # Load Scheme file FILE_NAME.\n # TEST_NAME can be used to specify the name of the test,\n # otherwise a standard test name is provided."
    },
    {
      "sha": "b41032feb27a9178f6b646d865ca0c85e67d4e3e",
      "filename": "gdb/testsuite/lib/gdb-python.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 19,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd/gdb/testsuite/lib/gdb-python.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd/gdb/testsuite/lib/gdb-python.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb-python.exp?ref=c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd",
      "patch": "@@ -27,25 +27,6 @@ proc gdb_py_test_silent_cmd { cmd name report_pass } {\n     }\n }\n \n-# Usage: gdb_py_test_multiple NAME INPUT RESULT {INPUT RESULT}...\n-# Run a test named NAME, consisting of multiple lines of input.\n-# After each input line INPUT, search for result line RESULT.\n-# Succeed if all results are seen; fail otherwise.\n-\n-proc gdb_py_test_multiple { name args } {\n-    global gdb_prompt\n-    foreach {input result} $args {\n-\tif {[gdb_test_multiple $input \"$name - $input\" {\n-\t    -re \"\\[\\r\\n\\]*($result)\\[\\r\\n\\]+($gdb_prompt | *>)$\" {\n-\t\tpass \"$name - $input\"\n-\t    }\n-\t}]} {\n-\t    return 1\n-\t}\n-    }\n-    return 0\n-}\n-\n # Return the result of python expression EXPR.  DEFAULT is returned if\n # there's an error.  TEST is the test message to use.  It can be\n # omitted, in which case a test message is built from EXP.  This is"
    },
    {
      "sha": "af3e02dac58fc84ac667e889db6d6e9f2dfafcba",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=c0b3b3bdc61cd632b0eaf650f6aa7dd6066c28cd",
      "patch": "@@ -1236,6 +1236,28 @@ proc gdb_test_multiple { command message args } {\n     return $result\n }\n \n+# Usage: gdb_test_multiline NAME INPUT RESULT {INPUT RESULT} ...\n+# Run a test named NAME, consisting of multiple lines of input.\n+# After each input line INPUT, search for result line RESULT.\n+# Succeed if all results are seen; fail otherwise.\n+\n+proc gdb_test_multiline { name args } {\n+    global gdb_prompt\n+    set inputnr 0\n+    foreach {input result} $args {\n+\tincr inputnr\n+\tif {[gdb_test_multiple $input \"$name: input $inputnr: $input\" {\n+\t    -re \"\\[\\r\\n\\]*($result)\\[\\r\\n\\]+($gdb_prompt | *>)$\" {\n+\t\tpass $gdb_test_name\n+\t    }\n+\t}]} {\n+\t    return 1\n+\t}\n+    }\n+    return 0\n+}\n+\n+\n # gdb_test COMMAND PATTERN MESSAGE QUESTION RESPONSE\n # Send a command to gdb; test the result.\n #"
    }
  ]
}