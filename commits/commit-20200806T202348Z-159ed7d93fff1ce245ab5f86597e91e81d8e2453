{
  "sha": "159ed7d93fff1ce245ab5f86597e91e81d8e2453",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTU5ZWQ3ZDkzZmZmMWNlMjQ1YWI1Zjg2NTk3ZTkxZTgxZDhlMjQ1Mw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-08-06T20:23:48Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-06T20:23:48Z"
    },
    "message": "gdb: move regcache::regcaches to regcache.c\n\nI don't really understand why `regcache_thread_ptid_changed` is a static\nmethod of `struct regcache` instead of being a static free function in\nregcache.c.  And I don't understand why `current_regcache` is a static\nmember of `struct regcache` instead of being a static global in\nregcache.c.  It's not wrong per-se, but there's no other place where we\ndo it like this in GDB (as far as I remember) and it just exposes things\nunnecessarily in the .h.\n\nMove them to be just static in regcache.c.  As a result,\nregisters_changed_ptid doesn't need to be friend of the regcache class\nanymore.\n\nRemoving the include of forward_list in regcache.h showed that we were\nmissing an include for it in dwarf2/index-write.c, record-btrace.c and\nsparc64-tdep.c.\n\ngdb/ChangeLog:\n\n\t* regcache.h (class regcache): Remove friend\n\tregisters_changed_ptid.\n\t<regcache_thread_ptid_changed>: Remove.\n\t<regcaches>: Remove.\n\t* regcache.c (regcache::regcaches): Rename to...\n\t(regcaches): ... this.  Make static.\n\t(get_thread_arch_aspace_regcache): Update.\n\t(regcache::regcache_thread_ptid_changed): Rename to...\n\t(regcache_thread_ptid_changed): ... this.  Update.\n\t(class regcache_access): Remove.\n\t(regcaches_test): Update.\n\t(_initialize_regcache): Update.\n\t* sparc64-tdep.c, dwarf2/index-write.c, record-btrace.c: Include\n\t<forward_list>.\n\nChange-Id: Iabc25759848010cfbb7ee7e27f60eaca17d61c12",
    "tree": {
      "sha": "d0319f072572fd6702e5731c803b5dedc13abc2b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d0319f072572fd6702e5731c803b5dedc13abc2b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/159ed7d93fff1ce245ab5f86597e91e81d8e2453",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/159ed7d93fff1ce245ab5f86597e91e81d8e2453",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/159ed7d93fff1ce245ab5f86597e91e81d8e2453",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/159ed7d93fff1ce245ab5f86597e91e81d8e2453/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "174981ae1f95f2de534d5da77d0057144ba65066",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/174981ae1f95f2de534d5da77d0057144ba65066",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/174981ae1f95f2de534d5da77d0057144ba65066"
    }
  ],
  "stats": {
    "total": 102,
    "additions": 52,
    "deletions": 50
  },
  "files": [
    {
      "sha": "9963f4397ea9183fab95b3065461676c6f5d43a0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=159ed7d93fff1ce245ab5f86597e91e81d8e2453",
      "patch": "@@ -1,3 +1,20 @@\n+2020-08-06  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* regcache.h (class regcache): Remove friend\n+\tregisters_changed_ptid.\n+\t<regcache_thread_ptid_changed>: Remove.\n+\t<regcaches>: Remove.\n+\t* regcache.c (regcache::regcaches): Rename to...\n+\t(regcaches): ... this.  Make static.\n+\t(get_thread_arch_aspace_regcache): Update.\n+\t(regcache::regcache_thread_ptid_changed): Rename to...\n+\t(regcache_thread_ptid_changed): ... this.  Update.\n+\t(class regcache_access): Remove.\n+\t(regcaches_test): Update.\n+\t(_initialize_regcache): Update.\n+\t* sparc64-tdep.c, dwarf2/index-write.c, record-btrace.c: Include\n+\t<forward_list>.\n+\n 2020-08-06  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* regcache.h (class regcache) <current_regcache>: Rename to..."
    },
    {
      "sha": "aa7a37e4ef2a4a05ed6dc8b7c3eea5e36154347c",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=159ed7d93fff1ce245ab5f86597e91e81d8e2453",
      "patch": "@@ -41,6 +41,7 @@\n \n #include <algorithm>\n #include <cmath>\n+#include <forward_list>\n #include <set>\n #include <unordered_map>\n #include <unordered_set>"
    },
    {
      "sha": "a1a3efc3d681404c5ed2f7edd9f95e379e291915",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=159ed7d93fff1ce245ab5f86597e91e81d8e2453",
      "patch": "@@ -43,6 +43,7 @@\n #include \"gdbarch.h\"\n #include \"cli/cli-style.h\"\n #include \"async-event.h\"\n+#include <forward_list>\n \n static const target_info record_btrace_target_info = {\n   \"record-btrace\","
    },
    {
      "sha": "3c460f255fd35796d226c4a4a5250c09bb156a39",
      "filename": "gdb/regcache.c",
      "status": "modified",
      "additions": 32,
      "deletions": 42,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/regcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/regcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.c?ref=159ed7d93fff1ce245ab5f86597e91e81d8e2453",
      "patch": "@@ -319,7 +319,7 @@ reg_buffer::assert_regnum (int regnum) const\n    recording if the register values have been changed (eg. by the\n    user).  Therefore all registers must be written back to the\n    target when appropriate.  */\n-std::forward_list<regcache *> regcache::regcaches;\n+static std::forward_list<regcache *> regcaches;\n \n struct regcache *\n get_thread_arch_aspace_regcache (process_stratum_target *target,\n@@ -328,15 +328,15 @@ get_thread_arch_aspace_regcache (process_stratum_target *target,\n {\n   gdb_assert (target != nullptr);\n \n-  for (const auto &regcache : regcache::regcaches)\n+  for (const auto &regcache : regcaches)\n     if (regcache->target () == target\n \t&& regcache->ptid () == ptid\n \t&& regcache->arch () == gdbarch)\n       return regcache;\n \n   regcache *new_regcache = new regcache (target, gdbarch, aspace);\n \n-  regcache::regcaches.push_front (new_regcache);\n+  regcaches.push_front (new_regcache);\n   new_regcache->set_ptid (ptid);\n \n   return new_regcache;\n@@ -412,12 +412,11 @@ regcache_observer_target_changed (struct target_ops *target)\n   registers_changed ();\n }\n \n-/* Update global variables old ptids to hold NEW_PTID if they were\n-   holding OLD_PTID.  */\n-void\n-regcache::regcache_thread_ptid_changed (ptid_t old_ptid, ptid_t new_ptid)\n+/* Update regcaches related to OLD_PTID to now use NEW_PTID.  */\n+static void\n+regcache_thread_ptid_changed (ptid_t old_ptid, ptid_t new_ptid)\n {\n-  for (auto &regcache : regcache::regcaches)\n+  for (auto &regcache : regcaches)\n     {\n       if (regcache->ptid () == old_ptid)\n \tregcache->set_ptid (new_ptid);\n@@ -438,15 +437,15 @@ regcache::regcache_thread_ptid_changed (ptid_t old_ptid, ptid_t new_ptid)\n void\n registers_changed_ptid (process_stratum_target *target, ptid_t ptid)\n {\n-  for (auto oit = regcache::regcaches.before_begin (), it = std::next (oit);\n-       it != regcache::regcaches.end (); )\n+  for (auto oit = regcaches.before_begin (), it = std::next (oit);\n+       it != regcaches.end (); )\n     {\n       struct regcache *regcache = *it;\n       if ((target == nullptr || regcache->target () == target)\n \t  && regcache->ptid ().matches (ptid))\n \t{\n \t  delete regcache;\n-\t  it = regcache::regcaches.erase_after (oit);\n+\t  it = regcaches.erase_after (oit);\n \t}\n       else\n \toit = it++;\n@@ -1431,19 +1430,12 @@ register_dump::dump (ui_file *file)\n \n namespace selftests {\n \n-class regcache_access : public regcache\n+static size_t\n+regcaches_size ()\n {\n-public:\n-\n-  /* Return the number of elements in regcache::regcaches.  */\n-\n-  static size_t\n-  regcaches_size ()\n-  {\n-    return std::distance (regcache::regcaches.begin (),\n-\t\t\t  regcache::regcaches.end ());\n-  }\n-};\n+  return std::distance (regcaches.begin (),\n+\t\t\t  regcaches.end ());\n+}\n \n /* Wrapper around get_thread_arch_aspace_regcache that does some self checks.  */\n \n@@ -1464,65 +1456,64 @@ static void\n regcaches_test ()\n {\n   /* It is empty at the start.  */\n-  SELF_CHECK (regcache_access::regcaches_size () == 0);\n+  SELF_CHECK (regcaches_size () == 0);\n \n   ptid_t ptid1 (1), ptid2 (2), ptid3 (3);\n \n   test_target_ops test_target1;\n   test_target_ops test_target2;\n \n   /* Get regcache from (target1,ptid1), a new regcache is added to\n-     regcache::regcaches.  */\n+     REGCACHES.  */\n   test_get_thread_arch_aspace_regcache (&test_target1, ptid1,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::regcaches_size () == 1);\n+  SELF_CHECK (regcaches_size () == 1);\n \n   /* Get regcache from (target1,ptid2), a new regcache is added to\n-     regcache::regcaches.  */\n+     REGCACHES.  */\n   test_get_thread_arch_aspace_regcache (&test_target1, ptid2,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::regcaches_size () == 2);\n+  SELF_CHECK (regcaches_size () == 2);\n \n   /* Get regcache from (target1,ptid3), a new regcache is added to\n-     regcache::regcaches.  */\n+     REGCACHES.  */\n   test_get_thread_arch_aspace_regcache (&test_target1, ptid3,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::regcaches_size () == 3);\n+  SELF_CHECK (regcaches_size () == 3);\n \n   /* Get regcache from (target1,ptid2) again, nothing is added to\n-     regcache::regcaches.  */\n+     REGCACHES.  */\n   test_get_thread_arch_aspace_regcache (&test_target1, ptid2,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::regcaches_size () == 3);\n+  SELF_CHECK (regcaches_size () == 3);\n \n   /* Get regcache from (target2,ptid2), a new regcache is added to\n-     regcache::regcaches, since this time we're using a differen\n-     target.  */\n+     REGCACHES, since this time we're using a different target.  */\n   test_get_thread_arch_aspace_regcache (&test_target2, ptid2,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::regcaches_size () == 4);\n+  SELF_CHECK (regcaches_size () == 4);\n \n   /* Mark that (target1,ptid2) changed.  The regcache of (target1,\n-     ptid2) should be removed from regcache::regcaches.  */\n+     ptid2) should be removed from REGCACHES.  */\n   registers_changed_ptid (&test_target1, ptid2);\n-  SELF_CHECK (regcache_access::regcaches_size () == 3);\n+  SELF_CHECK (regcaches_size () == 3);\n \n   /* Get the regcache from (target2,ptid2) again, confirming the\n      registers_changed_ptid call above did not delete it.  */\n   test_get_thread_arch_aspace_regcache (&test_target2, ptid2,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::regcaches_size () == 3);\n+  SELF_CHECK (regcaches_size () == 3);\n \n   /* Confirm that marking all regcaches of all targets as changed\n-     clears regcache::regcaches.  */\n+     clears REGCACHES.  */\n   registers_changed_ptid (nullptr, minus_one_ptid);\n-  SELF_CHECK (regcache_access::regcaches_size () == 0);\n+  SELF_CHECK (regcaches_size () == 0);\n }\n \n class target_ops_no_register : public test_target_ops\n@@ -1837,8 +1828,7 @@ _initialize_regcache ()\n     = gdbarch_data_register_post_init (init_regcache_descr);\n \n   gdb::observers::target_changed.attach (regcache_observer_target_changed);\n-  gdb::observers::thread_ptid_changed.attach\n-    (regcache::regcache_thread_ptid_changed);\n+  gdb::observers::thread_ptid_changed.attach (regcache_thread_ptid_changed);\n \n   add_com (\"flushregs\", class_maintenance, reg_flush_command,\n \t   _(\"Force gdb to flush its register cache (maintainer command).\"));"
    },
    {
      "sha": "dd0c2f27f95ad03beecf3ecf5b35b9507e258f18",
      "filename": "gdb/regcache.h",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/regcache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/regcache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.h?ref=159ed7d93fff1ce245ab5f86597e91e81d8e2453",
      "patch": "@@ -22,7 +22,6 @@\n \n #include \"gdbsupport/common-regcache.h\"\n #include \"gdbsupport/function-view.h\"\n-#include <forward_list>\n \n struct regcache;\n struct regset;\n@@ -397,13 +396,10 @@ class regcache : public detached_regcache\n    debug.  */\n   void debug_print_register (const char *func, int regno);\n \n-  static void regcache_thread_ptid_changed (ptid_t old_ptid, ptid_t new_ptid);\n protected:\n   regcache (process_stratum_target *target, gdbarch *gdbarch,\n \t    const address_space *aspace);\n \n-  static std::forward_list<regcache *> regcaches;\n-\n private:\n \n   /* Helper function for transfer_regset.  Copies across a single register.  */\n@@ -437,9 +433,6 @@ class regcache : public detached_regcache\n   get_thread_arch_aspace_regcache (process_stratum_target *target, ptid_t ptid,\n \t\t\t\t   struct gdbarch *gdbarch,\n \t\t\t\t   struct address_space *aspace);\n-\n-  friend void\n-  registers_changed_ptid (process_stratum_target *target, ptid_t ptid);\n };\n \n class readonly_detached_regcache : public readable_regcache"
    },
    {
      "sha": "95979ab76f507b207096eb2b3b2eba814be5fd39",
      "filename": "gdb/sparc64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/sparc64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/159ed7d93fff1ce245ab5f86597e91e81d8e2453/gdb/sparc64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-tdep.c?ref=159ed7d93fff1ce245ab5f86597e91e81d8e2453",
      "patch": "@@ -33,8 +33,8 @@\n #include \"target-descriptions.h\"\n #include \"target.h\"\n #include \"value.h\"\n-\n #include \"sparc64-tdep.h\"\n+#include <forward_list>\n \n /* This file implements the SPARC 64-bit ABI as defined by the\n    section \"Low-Level System Information\" of the SPARC Compliance"
    }
  ]
}