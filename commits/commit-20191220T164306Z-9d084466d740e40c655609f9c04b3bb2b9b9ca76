{
  "sha": "9d084466d740e40c655609f9c04b3bb2b9b9ca76",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWQwODQ0NjZkNzQwZTQwYzY1NTYwOWY5YzA0YjNiYjJiOWI5Y2E3Ng==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-12-20T16:43:06Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-12-20T16:43:06Z"
    },
    "message": "infcall, c++: allow more info to be computed for pass-by-reference values\n\nIn C++, call-by-value arguments that cannot be trivially copied are\nimplicitly passed by reference.  When making an infcall, GDB needs to\nfind out if an argument is pass-by-reference or not, so that the\ncorrect semantics can be followed.  This patch enriches the\ninformation computed by the language ops for pass-by-reference\narguments.  Instead of a plain binary result, the computed information\nnow includes whether the argument is\n\n  - copy constructible\n  - destructible\n  - trivially copyable\n  - trivially copy constructible\n  - trivially destructible\n\nThis information is stored in a struct named 'language_pass_by_ref_info'.\n\nThis patch paves the way for GDB's infcall mechanism to call the copy\nctor and the destructor of a pass-by-ref argument appropriately.\n\ngdb/ChangeLog:\n2019-12-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* language.h (struct language_pass_by_ref_info): New struct.\n\t(struct language_defn)<la_pass_by_reference>: Change the signature\n\tto return a language_pass_by_ref_info instead of an int.\n\t(language_pass_by_reference): Ditto.\n\t(default_pass_by_reference): Ditto.\n\tAdjust the users listed below.\n\t* arch-utils.c (default_return_in_first_hidden_param_p):\n\tUpdate.\n\t* cp-abi.c (cp_pass_by_reference): Update.\n\t* cp-abi.h (cp_pass_by_reference): Update declaration.\n\t(struct cp_abi_ops)<pass_by_reference>: Update.\n\t* gnu-v3-abi.c (gnuv3_pass_by_reference): Update.\n\t* infcall.c (call_function_by_hand_dummy): Update.\n\t* language.c (language_pass_by_reference): Update.\n\t(default_pass_by_reference): Update.\n\t* tic6x-tdep.c (tic6x_return_value): Update.\n\nChange-Id: Ib1c1f87f2490a5737c469f7b7185ddc7f6a164cb",
    "tree": {
      "sha": "210f4ac3ac14359576fce5bda16bd3522a43c1b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/210f4ac3ac14359576fce5bda16bd3522a43c1b1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9d084466d740e40c655609f9c04b3bb2b9b9ca76",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d084466d740e40c655609f9c04b3bb2b9b9ca76",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9d084466d740e40c655609f9c04b3bb2b9b9ca76",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d084466d740e40c655609f9c04b3bb2b9b9ca76/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e35000a7f8be021459102751db7e0b7e2868b57e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e35000a7f8be021459102751db7e0b7e2868b57e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e35000a7f8be021459102751db7e0b7e2868b57e"
    }
  ],
  "stats": {
    "total": 171,
    "additions": 131,
    "deletions": 40
  },
  "files": [
    {
      "sha": "3e88754f80154e518704a4c2e111838297e888d0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9d084466d740e40c655609f9c04b3bb2b9b9ca76",
      "patch": "@@ -1,3 +1,22 @@\n+2019-12-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* language.h (struct language_pass_by_ref_info): New struct.\n+\t(struct language_defn)<la_pass_by_reference>: Change the signature\n+\tto return a language_pass_by_ref_info instead of an int.\n+\t(language_pass_by_reference): Ditto.\n+\t(default_pass_by_reference): Ditto.\n+\tAdjust the users listed below.\n+\t* arch-utils.c (default_return_in_first_hidden_param_p):\n+\tUpdate.\n+\t* cp-abi.c (cp_pass_by_reference): Update.\n+\t* cp-abi.h (cp_pass_by_reference): Update declaration.\n+\t(struct cp_abi_ops)<pass_by_reference>: Update.\n+\t* gnu-v3-abi.c (gnuv3_pass_by_reference): Update.\n+\t* infcall.c (call_function_by_hand_dummy): Update.\n+\t* language.c (language_pass_by_reference): Update.\n+\t(default_pass_by_reference): Update.\n+\t* tic6x-tdep.c (tic6x_return_value): Update.\n+\n 2019-12-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* dwarf2read.c (dwarf2_add_member_fn): Read the DW_AT_defaulted"
    },
    {
      "sha": "a1a003f91f1c812abd3597753d771ac5381e6e90",
      "filename": "gdb/arch-utils.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/arch-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/arch-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.c?ref=9d084466d740e40c655609f9c04b3bb2b9b9ca76",
      "patch": "@@ -858,7 +858,7 @@ default_return_in_first_hidden_param_p (struct gdbarch *gdbarch,\n   /* Usually, the return value's address is stored the in the \"first hidden\"\n      parameter if the return value should be passed by reference, as\n      specified in ABI.  */\n-  return language_pass_by_reference (type);\n+  return !(language_pass_by_reference (type).trivially_copyable);\n }\n \n int default_insn_is_call (struct gdbarch *gdbarch, CORE_ADDR addr)"
    },
    {
      "sha": "6503b4c160bb377447749a42b3dd904f724a2261",
      "filename": "gdb/cp-abi.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/cp-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/cp-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-abi.c?ref=9d084466d740e40c655609f9c04b3bb2b9b9ca76",
      "patch": "@@ -220,11 +220,13 @@ cplus_typename_from_type_info (struct value *value)\n   return (*current_cp_abi.get_typename_from_type_info) (value);\n }\n \n-int\n+/* See cp-abi.h.  */\n+\n+struct language_pass_by_ref_info\n cp_pass_by_reference (struct type *type)\n {\n   if ((current_cp_abi.pass_by_reference) == NULL)\n-    return 0;\n+    return default_pass_by_reference (type);\n   return (*current_cp_abi.pass_by_reference) (type);\n }\n "
    },
    {
      "sha": "cc77e0b06328a2ef9b089bce182187508e55c09d",
      "filename": "gdb/cp-abi.h",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/cp-abi.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/cp-abi.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-abi.h?ref=9d084466d740e40c655609f9c04b3bb2b9b9ca76",
      "patch": "@@ -207,9 +207,11 @@ extern std::string cplus_typename_from_type_info (struct value *value);\n CORE_ADDR cplus_skip_trampoline (struct frame_info *frame,\n \t\t\t\t CORE_ADDR stop_pc);\n \n-/* Return non-zero if an argument of type TYPE should be passed by\n-   reference instead of value.  */\n-extern int cp_pass_by_reference (struct type *type);\n+/* Return a struct that provides pass-by-reference information\n+   about the given TYPE.  */\n+\n+extern struct language_pass_by_ref_info cp_pass_by_reference\n+  (struct type *type);\n \n struct cp_abi_ops\n {\n@@ -246,7 +248,7 @@ struct cp_abi_ops\n   struct type *(*get_type_from_type_info) (struct value *value);\n   std::string (*get_typename_from_type_info) (struct value *value);\n   CORE_ADDR (*skip_trampoline) (struct frame_info *, CORE_ADDR);\n-  int (*pass_by_reference) (struct type *type);\n+  struct language_pass_by_ref_info (*pass_by_reference) (struct type *type);\n };\n \n "
    },
    {
      "sha": "35197e56334799afed24b45b28e7bbb677fefb53",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 36,
      "deletions": 13,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=9d084466d740e40c655609f9c04b3bb2b9b9ca76",
      "patch": "@@ -1230,7 +1230,7 @@ gnuv3_skip_trampoline (struct frame_info *frame, CORE_ADDR stop_pc)\n   return real_stop_pc;\n }\n \n-/* Return nonzero if a type should be passed by reference.\n+/* Return pass-by-reference information for the given TYPE.\n \n    The rule in the v3 ABI document comes from section 3.1.1.  If the\n    type has a non-trivial copy constructor or destructor, then the\n@@ -1248,22 +1248,33 @@ gnuv3_skip_trampoline (struct frame_info *frame, CORE_ADDR stop_pc)\n \n    We don't do anything with the constructors or destructors,\n    but we have to get the argument passing right anyway.  */\n-static int\n+\n+static struct language_pass_by_ref_info\n gnuv3_pass_by_reference (struct type *type)\n {\n   int fieldnum, fieldelem;\n \n   type = check_typedef (type);\n \n+  /* Start with the default values.  */\n+  struct language_pass_by_ref_info info\n+    = default_pass_by_reference (type);\n+\n+  /* FIXME: Currently, this implementation only fills in the\n+     'trivially-copyable' field to preserve GDB's existing behavior.  */\n+\n   /* We're only interested in things that can have methods.  */\n   if (TYPE_CODE (type) != TYPE_CODE_STRUCT\n       && TYPE_CODE (type) != TYPE_CODE_UNION)\n-    return 0;\n+    return info;\n \n   /* A dynamic class has a non-trivial copy constructor.\n      See c++98 section 12.8 Copying class objects [class.copy].  */\n   if (gnuv3_dynamic_class (type))\n-    return 1;\n+    {\n+      info.trivially_copyable = false;\n+      return info;\n+    }\n \n   for (fieldnum = 0; fieldnum < TYPE_NFN_FIELDS (type); fieldnum++)\n     for (fieldelem = 0; fieldelem < TYPE_FN_FIELDLIST_LENGTH (type, fieldnum);\n@@ -1280,7 +1291,10 @@ gnuv3_pass_by_reference (struct type *type)\n \n \t/* If we've found a destructor, we must pass this by reference.  */\n \tif (name[0] == '~')\n-\t  return 1;\n+\t  {\n+\t    info.trivially_copyable = false;\n+\t    return info;\n+\t  }\n \n \t/* If the mangled name of this method doesn't indicate that it\n \t   is a constructor, we're not interested.\n@@ -1302,11 +1316,13 @@ gnuv3_pass_by_reference (struct type *type)\n \n \t    if (TYPE_CODE (arg_type) == TYPE_CODE_REF)\n \t      {\n-\t\tstruct type *arg_target_type;\n-\n-\t        arg_target_type = check_typedef (TYPE_TARGET_TYPE (arg_type));\n+\t\tstruct type *arg_target_type\n+\t\t  = check_typedef (TYPE_TARGET_TYPE (arg_type));\n \t\tif (class_types_same_p (arg_target_type, type))\n-\t\t  return 1;\n+\t\t  {\n+\t\t    info.trivially_copyable = false;\n+\t\t    return info;\n+\t\t  }\n \t      }\n \t  }\n       }\n@@ -1319,11 +1335,18 @@ gnuv3_pass_by_reference (struct type *type)\n      about recursive loops here, since we are only looking at members\n      of complete class type.  Also ignore any static members.  */\n   for (fieldnum = 0; fieldnum < TYPE_NFIELDS (type); fieldnum++)\n-    if (! field_is_static (&TYPE_FIELD (type, fieldnum))\n-        && gnuv3_pass_by_reference (TYPE_FIELD_TYPE (type, fieldnum)))\n-      return 1;\n+    if (!field_is_static (&TYPE_FIELD (type, fieldnum)))\n+      {\n+\tstruct language_pass_by_ref_info field_info\n+\t  = gnuv3_pass_by_reference (TYPE_FIELD_TYPE (type, fieldnum));\n+\tif (!field_info.trivially_copyable)\n+\t  {\n+\t    info.trivially_copyable = false;\n+\t    return info;\n+\t  }\n+      }\n \n-  return 0;\n+  return info;\n }\n \n static void"
    },
    {
      "sha": "f3664d508041496def13634fdc962bf075fc8fcb",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=9d084466d740e40c655609f9c04b3bb2b9b9ca76",
      "patch": "@@ -1020,7 +1020,8 @@ call_function_by_hand_dummy (struct value *function,\n       args[i] = value_arg_coerce (gdbarch, args[i],\n \t\t\t\t  param_type, prototyped);\n \n-      if (param_type != NULL && language_pass_by_reference (param_type))\n+      if (param_type != NULL\n+\t  && !(language_pass_by_reference (param_type).trivially_copyable))\n \targs[i] = value_addr (args[i]);\n     }\n "
    },
    {
      "sha": "ac74c7ffa3143a9e7e4be6a6cbc8318b420ac268",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=9d084466d740e40c655609f9c04b3bb2b9b9ca76",
      "patch": "@@ -652,21 +652,23 @@ language_class_name_from_physname (const struct language_defn *lang,\n   return NULL;\n }\n \n-/* Return non-zero if TYPE should be passed (and returned) by\n-   reference at the language level.  */\n-int\n+/* Return information about whether TYPE should be passed\n+   (and returned) by reference at the language level.  */\n+\n+struct language_pass_by_ref_info\n language_pass_by_reference (struct type *type)\n {\n   return current_language->la_pass_by_reference (type);\n }\n \n-/* Return zero; by default, types are passed by value at the language\n-   level.  The target ABI may pass or return some structs by reference\n-   independent of this.  */\n-int\n+/* Return a default struct that provides pass-by-reference information\n+   about the given TYPE.  Languages should update the default values\n+   as appropriate.  */\n+\n+struct language_pass_by_ref_info\n default_pass_by_reference (struct type *type)\n {\n-  return 0;\n+  return {};\n }\n \n /* Return the default string containing the list of characters"
    },
    {
      "sha": "f6cd29b6709c271aed446c135f6eebb0f9e0ed46",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 52,
      "deletions": 10,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=9d084466d740e40c655609f9c04b3bb2b9b9ca76",
      "patch": "@@ -128,6 +128,47 @@ struct language_arch_info\n   struct type *bool_type_default;\n };\n \n+/* In a language (particularly C++) a function argument of an aggregate\n+   type (i.e.  class/struct/union) may be implicitly passed by reference\n+   even though it is declared a call-by-value argument in the source.\n+   The struct below puts together necessary information for GDB to be\n+   able to detect and carry out pass-by-reference semantics for a\n+   particular type.  This type is referred as T in the inlined comments\n+   below.\n+\n+   The default values of the fields are chosen to give correct semantics\n+   for primitive types and for simple aggregate types, such as\n+\n+   class T {\n+     int x;\n+   };  */\n+\n+struct language_pass_by_ref_info\n+{\n+  /* True if an argument of type T can be passed to a function by value\n+     (i.e.  not through an implicit reference).  False, otherwise.  */\n+  bool trivially_copyable = true;\n+\n+  /* True if a copy of a value of type T can be initialized by\n+     memcpy'ing the value bit-by-bit.  False, otherwise.\n+     E.g.  If T has a user-defined copy ctor, this should be false.  */\n+  bool trivially_copy_constructible = true;\n+\n+  /* True if a value of type T can be destructed simply by reclaiming\n+     the memory area occupied by the value.  False, otherwise.\n+     E.g.  If T has a user-defined destructor, this should be false.  */\n+  bool trivially_destructible = true;\n+\n+  /* True if it is allowed to create a copy of a value of type T.\n+     False, otherwise.\n+     E.g.  If T has a deleted copy ctor, this should be false.  */\n+  bool copy_constructible = true;\n+\n+  /* True if a value of type T can be destructed.  False, otherwise.\n+     E.g.  If T has a deleted destructor, this should be false.  */\n+  bool destructible = true;\n+};\n+\n /* Structure tying together assorted information about a language.  */\n \n struct language_defn\n@@ -356,9 +397,10 @@ struct language_defn\n                                   struct ui_file *stream,\n                                   const struct value_print_options *options);\n \n-    /* Return non-zero if TYPE should be passed (and returned) by\n-       reference at the language level.  */\n-    int (*la_pass_by_reference) (struct type *type);\n+    /* Return information about whether TYPE should be passed\n+       (and returned) by reference at the language level.  */\n+    struct language_pass_by_ref_info (*la_pass_by_reference)\n+      (struct type *type);\n \n     /* Return an expression that can be used for a location\n        watchpoint.  TYPE is a pointer type that points to the memory\n@@ -613,14 +655,14 @@ extern void default_print_array_index (struct value *index_value,\n                                        struct ui_file *stream,\n \t\t\t\t       const struct value_print_options *options);\n \n-/* Return non-zero if TYPE should be passed (and returned) by\n-   reference at the language level.  */\n-int language_pass_by_reference (struct type *type);\n+/* Return information about whether TYPE should be passed\n+   (and returned) by reference at the language level.  */\n+struct language_pass_by_ref_info language_pass_by_reference (struct type *type);\n \n-/* Return zero; by default, types are passed by value at the language\n-   level.  The target ABI may pass or return some structs by reference\n-   independent of this.  */\n-int default_pass_by_reference (struct type *type);\n+/* Return a default struct that provides pass-by-reference information\n+   about the given TYPE.  Languages should update the default values\n+   as appropriate.  */\n+struct language_pass_by_ref_info default_pass_by_reference (struct type *type);\n \n /* The default implementation of la_print_typedef.  */\n void default_print_typedef (struct type *type, struct symbol *new_symbol,"
    },
    {
      "sha": "ca059f91b58032c20acccdae5a994e7faba05cf5",
      "filename": "gdb/tic6x-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/tic6x-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d084466d740e40c655609f9c04b3bb2b9b9ca76/gdb/tic6x-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tic6x-tdep.c?ref=9d084466d740e40c655609f9c04b3bb2b9b9ca76",
      "patch": "@@ -784,7 +784,7 @@ tic6x_return_value (struct gdbarch *gdbarch, struct value *function,\n       if (type != NULL)\n \t{\n \t  type = check_typedef (type);\n-\t  if (language_pass_by_reference (type))\n+\t  if (!(language_pass_by_reference (type).trivially_copyable))\n \t    return RETURN_VALUE_STRUCT_CONVENTION;\n \t}\n     }"
    }
  ]
}