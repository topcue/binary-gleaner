{
  "sha": "07bc701d03167b8006835da583a03d98177cd4b6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDdiYzcwMWQwMzE2N2I4MDA2ODM1ZGE1ODNhMDNkOTgxNzdjZDRiNg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-02-22T20:09:23Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@ericsson.com",
      "date": "2019-02-22T20:49:57Z"
    },
    "message": "Look for build-id-based separate debug files under the sysroot\n\nWhen looking for a separate debug file that matches a given build-id,\nGDB only looks in the host's debug dir (typically /usr/lib/debug).  This\npatch makes it look in the sysroot as well.  This is to match the\nbehavior of GDB when using debuglink-based separate debug files,\nintroduced in :\n\n402d2bfec42 (\"Look for separate debug files in debug directories under a sysroot.\")\n\nIn the following example, my sysroot is \"/tmp/sysroot\" and I am trying\nto load symbols for\n/tmp/sysroot/usr/lib/arm-linux-gnueabihf/gconv/EBCDIC-AT-DE.so.  This is\nthe current behavior:\n\n    (gdb) file /tmp/sysroot/usr/lib/arm-linux-gnueabihf/gconv/EBCDIC-AT-DE.so\n    Reading symbols from /tmp/sysroot/usr/lib/arm-linux-gnueabihf/gconv/EBCDIC-AT-DE.so...\n\n    Looking for separate debug info (build-id) for /tmp/sysroot/usr/lib/arm-linux-gnueabihf/gconv/EBCDIC-AT-DE.so\n      Trying /usr/lib/debug/.build-id/f3/d6594d2600e985812cd4ba2ad083ac2aceae22.debug... no, unable to compute real path\n\n    <snip>\n    (No debugging symbols found in /tmp/sysroot/usr/lib/arm-linux-gnueabihf/gconv/EBCDIC-AT-DE.so)\n\nWith this patch:\n\n    (gdb) file /tmp/sysroot/usr/lib/arm-linux-gnueabihf/gconv/EBCDIC-AT-DE.so\n    Reading symbols from /tmp/sysroot/usr/lib/arm-linux-gnueabihf/gconv/EBCDIC-AT-DE.so...\n\n    Looking for separate debug info (build-id) for /tmp/sysroot/usr/lib/arm-linux-gnueabihf/gconv/EBCDIC-AT-DE.so\n      Trying /usr/lib/debug/.build-id/f3/d6594d2600e985812cd4ba2ad083ac2aceae22.debug... no, unable to compute real path\n      Trying /tmp/sysroot/usr/lib/debug/.build-id/f3/d6594d2600e985812cd4ba2ad083ac2aceae22.debug... yes!\n    Reading symbols from /tmp/sysroot/usr/lib/debug/.build-id/f3/d6594d2600e985812cd4ba2ad083ac2aceae22.debug...\n\nIn the original code, there is a suspicious \"abfd.release ()\" in\nbuild_id_to_debug_bfd, that I don't understand.  If a file with the\nright name exists but its build-id note doesn't match, we release (leak)\nour reference, meaning the file will stay open?  I removed it in the new\ncode, so that the reference is dropped if we end up not using that file.\nI tested briefly by corrupting a separate debug file to trigger this\ncode, nothing exploded.\n\ngdb/ChangeLog:\n\n\t* build-id.c (build_id_to_debug_bfd_1): New function.\n\t(build_id_to_debug_bfd): Look for separate debug file in\n\tsysroot.",
    "tree": {
      "sha": "1581a3c9499b225762fabd76823acd4a8151a11f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1581a3c9499b225762fabd76823acd4a8151a11f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/07bc701d03167b8006835da583a03d98177cd4b6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/07bc701d03167b8006835da583a03d98177cd4b6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/07bc701d03167b8006835da583a03d98177cd4b6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/07bc701d03167b8006835da583a03d98177cd4b6/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "c6f4a5d0ed1ff54b5d46bdbadaa4ad811de1b715",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6f4a5d0ed1ff54b5d46bdbadaa4ad811de1b715",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c6f4a5d0ed1ff54b5d46bdbadaa4ad811de1b715"
    }
  ],
  "stats": {
    "total": 121,
    "additions": 78,
    "deletions": 43
  },
  "files": [
    {
      "sha": "6a7974482e191b2fbec145e3b68e986434fa03a9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07bc701d03167b8006835da583a03d98177cd4b6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07bc701d03167b8006835da583a03d98177cd4b6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=07bc701d03167b8006835da583a03d98177cd4b6",
      "patch": "@@ -1,3 +1,9 @@\n+2019-02-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* build-id.c (build_id_to_debug_bfd_1): New function.\n+\t(build_id_to_debug_bfd): Look for separate debug file in\n+\tsysroot.\n+\n 2019-02-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdbarch.sh: Update the copyright year range that is placed into"
    },
    {
      "sha": "27f29cd044234430dd8e2565c13bf260920386dd",
      "filename": "gdb/build-id.c",
      "status": "modified",
      "additions": 72,
      "deletions": 43,
      "changes": 115,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/07bc701d03167b8006835da583a03d98177cd4b6/gdb/build-id.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/07bc701d03167b8006835da583a03d98177cd4b6/gdb/build-id.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/build-id.c?ref=07bc701d03167b8006835da583a03d98177cd4b6",
      "patch": "@@ -65,13 +65,63 @@ build_id_verify (bfd *abfd, size_t check_len, const bfd_byte *check)\n   return retval;\n }\n \n+/* Helper for build_id_to_debug_bfd.  LINK is a path to a potential\n+   build-id-based separate debug file, potentially a symlink to the real file.\n+   If the file exists and matches BUILD_ID, return a BFD reference to it.  */\n+\n+static gdb_bfd_ref_ptr\n+build_id_to_debug_bfd_1 (const std::string &link, size_t build_id_len,\n+\t\t\t const bfd_byte *build_id)\n+{\n+  if (separate_debug_file_debug)\n+    {\n+      printf_unfiltered (_(\"  Trying %s...\"), link.c_str ());\n+      gdb_flush (gdb_stdout);\n+    }\n+\n+  /* lrealpath() is expensive even for the usually non-existent files.  */\n+  gdb::unique_xmalloc_ptr<char> filename;\n+  if (access (link.c_str (), F_OK) == 0)\n+    filename.reset (lrealpath (link.c_str ()));\n+\n+  if (filename == NULL)\n+    {\n+      if (separate_debug_file_debug)\n+\tprintf_unfiltered (_(\" no, unable to compute real path\\n\"));\n+\n+      return {};\n+    }\n+\n+  /* We expect to be silent on the non-existing files.  */\n+  gdb_bfd_ref_ptr debug_bfd = gdb_bfd_open (filename.get (), gnutarget, -1);\n+\n+  if (debug_bfd == NULL)\n+    {\n+      if (separate_debug_file_debug)\n+\tprintf_unfiltered (_(\" no, unable to open.\\n\"));\n+\n+      return {};\n+    }\n+\n+  if (!build_id_verify (debug_bfd.get(), build_id_len, build_id))\n+    {\n+      if (separate_debug_file_debug)\n+\tprintf_unfiltered (_(\" no, build-id does not match.\\n\"));\n+\n+      return {};\n+    }\n+\n+  if (separate_debug_file_debug)\n+    printf_unfiltered (_(\" yes!\\n\"));\n+\n+  return debug_bfd;\n+}\n+\n /* See build-id.h.  */\n \n gdb_bfd_ref_ptr\n build_id_to_debug_bfd (size_t build_id_len, const bfd_byte *build_id)\n {\n-  gdb_bfd_ref_ptr abfd;\n-\n   /* Keep backward compatibility so that DEBUG_FILE_DIRECTORY being \"\" will\n      cause \"/.build-id/...\" lookups.  */\n \n@@ -83,6 +133,10 @@ build_id_to_debug_bfd (size_t build_id_len, const bfd_byte *build_id)\n       const gdb_byte *data = build_id;\n       size_t size = build_id_len;\n \n+      /* Compute where the file named after the build-id would be.\n+\n+\t If debugdir is \"/usr/lib/debug\" and the build-id is abcdef, this will\n+         give \"/usr/lib/debug/.build-id/ab/cdef.debug\".  */\n       std::string link = debugdir.get ();\n       link += \"/.build-id/\";\n \n@@ -97,53 +151,28 @@ build_id_to_debug_bfd (size_t build_id_len, const bfd_byte *build_id)\n \n       link += \".debug\";\n \n-      if (separate_debug_file_debug)\n-\t{\n-\t  printf_unfiltered (_(\"  Trying %s...\"), link.c_str ());\n-\t  gdb_flush (gdb_stdout);\n-\t}\n+      gdb_bfd_ref_ptr debug_bfd\n+\t= build_id_to_debug_bfd_1 (link, build_id_len, build_id);\n+      if (debug_bfd != NULL)\n+\treturn debug_bfd;\n \n-      /* lrealpath() is expensive even for the usually non-existent files.  */\n-      gdb::unique_xmalloc_ptr<char> filename;\n-      if (access (link.c_str (), F_OK) == 0)\n-\tfilename.reset (lrealpath (link.c_str ()));\n+      /* Try to look under the sysroot as well.  If the sysroot is\n+         \"/the/sysroot\", it will give\n+         \"/the/sysroot/usr/lib/debug/.build-id/ab/cdef.debug\".\n \n-      if (filename == NULL)\n+         Don't do it if the sysroot is the target system (\"target:\").  It\n+         could work in theory, but the lrealpath in build_id_to_debug_bfd_1\n+         only works with local paths.  */\n+      if (strcmp (gdb_sysroot, TARGET_SYSROOT_PREFIX) != 0)\n \t{\n-\t  if (separate_debug_file_debug)\n-\t    printf_unfiltered (_(\" no, unable to compute real path\\n\"));\n-\n-\t  continue;\n+\t  link = gdb_sysroot + link;\n+\t  debug_bfd = build_id_to_debug_bfd_1 (link, build_id_len, build_id);\n+\t  if (debug_bfd != NULL)\n+\t    return debug_bfd;\n \t}\n-\n-      /* We expect to be silent on the non-existing files.  */\n-      abfd = gdb_bfd_open (filename.get (), gnutarget, -1);\n-\n-      if (abfd == NULL)\n-\t{\n-\t  if (separate_debug_file_debug)\n-\t    printf_unfiltered (_(\" no, unable to open.\\n\"));\n-\n-\t  continue;\n-\t}\n-\n-      if (build_id_verify (abfd.get(), build_id_len, build_id))\n-\t{\n-\t  if (separate_debug_file_debug)\n-\t    printf_unfiltered (_(\" yes!\\n\"));\n-\n-\t  break;\n-\t}\n-      else\n-\t{\n-\t  if (separate_debug_file_debug)\n-\t    printf_unfiltered (_(\" no, build-id does not match.\\n\"));\n-\t}\n-\n-      abfd.release ();\n     }\n \n-  return abfd;\n+  return {};\n }\n \n /* See build-id.h.  */"
    }
  ]
}