{
  "sha": "ef8f595f73a6b42f745bc76a716f45079eae1075",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWY4ZjU5NWY3M2E2YjQyZjc0NWJjNzZhNzE2ZjQ1MDc5ZWFlMTA3NQ==",
  "commit": {
    "author": {
      "name": "Mihail Ionescu",
      "email": "mihail.ionescu@arm.com",
      "date": "2019-11-12T13:57:20Z"
    },
    "committer": {
      "name": "Kyrylo Tkachov",
      "email": "kyrylo.tkachov@arm.com",
      "date": "2019-11-12T14:01:10Z"
    },
    "message": "[gas][arm] Enable VLDM, VSTM, VPUSH, VPOP for MVE\n\nThis patch enables a few instructions for Armv8.1-M MVE. Currently VLDM,\nVSTM, VSTR, VLDR, VPUSH and VPOP are enabled only when the Armv8-M\nFloating-point Extension is enabled.  According to the ARMv8.1-M ARM,\nsection A.1.4.2[1], they can be enabled by having \"Armv8-M Floating-point\nExtension and/or Armv8.1-M MVE\".\n\n[1]https://developer.arm.com/docs/ddi0553/bh/armv81-m-architecture-reference-manual\n\n2019-11-12  Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/tc-arm.c (do_vfp_nsyn_push): Move in order to enable it for\n\tboth fpu_vfp_ext_v1xd and mve_ext and add call to the aliased vstm\n\tinstruction for mve_ext.\n\t(do_vfp_nsyn_pop): Move in order to enable it for both\n\tfpu_vfp_ext_v1xd and mve_ext and add call to the aliased vldm\n\tinstruction for mve_ext.\n\t(do_neon_ldm_stm): Add fpu_vfp_ext_v1 and mve_ext checks.\n\t(insns): Enable vldm, vldmia, vldmdb, vstm, vstmia, vstmdb, vpop,\n\tvpush, and fldd, fstd, flds, fsts for arm_ext_v6t2 instead\n\tof fpu_vfp_ext_v1xd.\n\t* testsuite/gas/arm/v8_1m-mve.s: New.\n\t* testsuite/gas/arm/v8_1m-mve.d: New.",
    "tree": {
      "sha": "718987e71df5f0b8198b8b9dfef3ab9839d5ecdf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/718987e71df5f0b8198b8b9dfef3ab9839d5ecdf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ef8f595f73a6b42f745bc76a716f45079eae1075",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef8f595f73a6b42f745bc76a716f45079eae1075",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ef8f595f73a6b42f745bc76a716f45079eae1075",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef8f595f73a6b42f745bc76a716f45079eae1075/comments",
  "author": null,
  "committer": {
    "login": "ktkachov-arm",
    "id": 74917949,
    "node_id": "MDQ6VXNlcjc0OTE3OTQ5",
    "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ktkachov-arm",
    "html_url": "https://github.com/ktkachov-arm",
    "followers_url": "https://api.github.com/users/ktkachov-arm/followers",
    "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs",
    "repos_url": "https://api.github.com/users/ktkachov-arm/repos",
    "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ce760a762093d59a3faab07fff895b484071977c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce760a762093d59a3faab07fff895b484071977c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ce760a762093d59a3faab07fff895b484071977c"
    }
  ],
  "stats": {
    "total": 175,
    "additions": 131,
    "deletions": 44
  },
  "files": [
    {
      "sha": "d0ce992223c1bfaabf7d6efd169771137b44cc93",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef8f595f73a6b42f745bc76a716f45079eae1075/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef8f595f73a6b42f745bc76a716f45079eae1075/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=ef8f595f73a6b42f745bc76a716f45079eae1075",
      "patch": "@@ -1,3 +1,18 @@\n+2019-11-12  Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/tc-arm.c (do_vfp_nsyn_push): Move in order to enable it for\n+\tboth fpu_vfp_ext_v1xd and mve_ext and add call to the aliased vstm\n+\tinstruction for mve_ext.\n+\t(do_vfp_nsyn_pop): Move in order to enable it for both\n+\tfpu_vfp_ext_v1xd and mve_ext and add call to the aliased vldm\n+\tinstruction for mve_ext.\n+\t(do_neon_ldm_stm): Add fpu_vfp_ext_v1 and mve_ext checks.\n+\t(insns): Enable vldm, vldmia, vldmdb, vstm, vstmia, vstmdb, vpop,\n+\tvpush, and fldd, fstd, flds, fsts for arm_ext_v6t2 instead\n+\tof fpu_vfp_ext_v1xd.\n+\t* testsuite/gas/arm/v8_1m-mve.s: New.\n+\t* testsuite/gas/arm/v8_1m-mve.d: New.\n+\n 2019-11-12  Mihail Ionescu  <mihail.ionescu@arm.com>\n \n \t* gas/config/tc-arm.c (do_neon_mvn): Allow mve_ext cmode=0xd."
    },
    {
      "sha": "641ce7e3a64f0cfc6b4ac8c7adb426992cac26ac",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 65,
      "deletions": 44,
      "changes": 109,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef8f595f73a6b42f745bc76a716f45079eae1075/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef8f595f73a6b42f745bc76a716f45079eae1075/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=ef8f595f73a6b42f745bc76a716f45079eae1075",
      "patch": "@@ -16527,36 +16527,6 @@ nsyn_insert_sp (void)\n   inst.operands[0].present = 1;\n }\n \n-static void\n-do_vfp_nsyn_push (void)\n-{\n-  nsyn_insert_sp ();\n-\n-  constraint (inst.operands[1].imm < 1 || inst.operands[1].imm > 16,\n-\t      _(\"register list must contain at least 1 and at most 16 \"\n-\t\t\"registers\"));\n-\n-  if (inst.operands[1].issingle)\n-    do_vfp_nsyn_opcode (\"fstmdbs\");\n-  else\n-    do_vfp_nsyn_opcode (\"fstmdbd\");\n-}\n-\n-static void\n-do_vfp_nsyn_pop (void)\n-{\n-  nsyn_insert_sp ();\n-\n-  constraint (inst.operands[1].imm < 1 || inst.operands[1].imm > 16,\n-\t      _(\"register list must contain at least 1 and at most 16 \"\n-\t\t\"registers\"));\n-\n-  if (inst.operands[1].issingle)\n-    do_vfp_nsyn_opcode (\"fldmias\");\n-  else\n-    do_vfp_nsyn_opcode (\"fldmiad\");\n-}\n-\n /* Fix up Neon data-processing instructions, ORing in the correct bits for\n    ARM mode or Thumb mode and moving the encoded bit 24 to bit 28.  */\n \n@@ -20638,6 +20608,9 @@ do_neon_tbl_tbx (void)\n static void\n do_neon_ldm_stm (void)\n {\n+  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_v1xd)\n+\t      && !ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext),\n+\t      _(BAD_FPU));\n   /* P, U and L bits are part of bitmask.  */\n   int is_dbmode = (inst.instruction & (1 << 24)) != 0;\n   unsigned offsetbits = inst.operands[1].imm * 2;\n@@ -20665,6 +20638,49 @@ do_neon_ldm_stm (void)\n   do_vfp_cond_or_thumb ();\n }\n \n+static void\n+do_vfp_nsyn_pop (void)\n+{\n+  nsyn_insert_sp ();\n+  if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext)) {\n+    return do_vfp_nsyn_opcode (\"vldm\");\n+  }\n+\n+  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_v1xd),\n+\t      _(BAD_FPU));\n+\n+  constraint (inst.operands[1].imm < 1 || inst.operands[1].imm > 16,\n+\t      _(\"register list must contain at least 1 and at most 16 \"\n+\t\t\"registers\"));\n+\n+  if (inst.operands[1].issingle)\n+    do_vfp_nsyn_opcode (\"fldmias\");\n+  else\n+    do_vfp_nsyn_opcode (\"fldmiad\");\n+}\n+\n+static void\n+do_vfp_nsyn_push (void)\n+{\n+  nsyn_insert_sp ();\n+  if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext)) {\n+    return do_vfp_nsyn_opcode (\"vstmdb\");\n+  }\n+\n+  constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, fpu_vfp_ext_v1xd),\n+\t      _(BAD_FPU));\n+\n+  constraint (inst.operands[1].imm < 1 || inst.operands[1].imm > 16,\n+\t      _(\"register list must contain at least 1 and at most 16 \"\n+\t\t\"registers\"));\n+\n+  if (inst.operands[1].issingle)\n+    do_vfp_nsyn_opcode (\"fstmdbs\");\n+  else\n+    do_vfp_nsyn_opcode (\"fstmdbd\");\n+}\n+\n+\n static void\n do_neon_ldr_str (void)\n {\n@@ -20745,7 +20761,8 @@ do_vldr_vstr (void)\n   /* VLDR/VSTR.  */\n   else\n     {\n-      if (!mark_feature_used (&fpu_vfp_ext_v1xd))\n+      if (!mark_feature_used (&fpu_vfp_ext_v1xd)\n+\t  && !ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n \tas_bad (_(\"Instruction not permitted on this architecture\"));\n       do_neon_ldr_str ();\n     }\n@@ -24966,6 +24983,10 @@ static const struct asm_opcode insns[] =\n #define THUMB_VARIANT  & arm_ext_v6t2\n  mcCE(vmrs,\tef00a10, 2, (APSR_RR, RVC),   vmrs),\n  mcCE(vmsr,\tee00a10, 2, (RVC, RR),        vmsr),\n+ mcCE(fldd,\td100b00, 2, (RVD, ADDRGLDC),  vfp_dp_ldst),\n+ mcCE(fstd,\td000b00, 2, (RVD, ADDRGLDC),  vfp_dp_ldst),\n+ mcCE(flds,\td100a00, 2, (RVS, ADDRGLDC),  vfp_sp_ldst),\n+ mcCE(fsts,\td000a00, 2, (RVS, ADDRGLDC),  vfp_sp_ldst),\n #undef THUMB_VARIANT\n \n   /* Moves and type conversions.  */\n@@ -24980,8 +25001,6 @@ static const struct asm_opcode insns[] =\n  cCE(\"fmxr\",\tee00a10, 2, (RVC, RR),\t      rn_rd),\n \n   /* Memory operations.\t */\n- cCE(\"flds\",\td100a00, 2, (RVS, ADDRGLDC),  vfp_sp_ldst),\n- cCE(\"fsts\",\td000a00, 2, (RVS, ADDRGLDC),  vfp_sp_ldst),\n  cCE(\"fldmias\",\tc900a00, 2, (RRnpctw, VRSLST),    vfp_sp_ldstmia),\n  cCE(\"fldmfds\",\tc900a00, 2, (RRnpctw, VRSLST),    vfp_sp_ldstmia),\n  cCE(\"fldmdbs\",\td300a00, 2, (RRnpctw, VRSLST),    vfp_sp_ldstmdb),\n@@ -25023,8 +25042,6 @@ static const struct asm_opcode insns[] =\n \n  /* Double precision load/store are still present on single precision\n     implementations.  */\n- cCE(\"fldd\",\td100b00, 2, (RVD, ADDRGLDC),  vfp_dp_ldst),\n- cCE(\"fstd\",\td000b00, 2, (RVD, ADDRGLDC),  vfp_dp_ldst),\n  cCE(\"fldmiad\",\tc900b00, 2, (RRnpctw, VRDLST),    vfp_dp_ldstmia),\n  cCE(\"fldmfdd\",\tc900b00, 2, (RRnpctw, VRDLST),    vfp_dp_ldstmia),\n  cCE(\"fldmdbd\",\td300b00, 2, (RRnpctw, VRDLST),    vfp_dp_ldstmdb),\n@@ -25077,6 +25094,19 @@ static const struct asm_opcode insns[] =\n    Individual encoder functions perform additional architecture checks.  */\n #undef  ARM_VARIANT\n #define ARM_VARIANT    & fpu_vfp_ext_v1xd\n+#undef  THUMB_VARIANT\n+#define THUMB_VARIANT  & arm_ext_v6t2\n+\n+ NCE(vldm,      c900b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n+ NCE(vldmia,    c900b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n+ NCE(vldmdb,    d100b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n+ NCE(vstm,      c800b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n+ NCE(vstmia,    c800b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n+ NCE(vstmdb,    d000b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n+\n+ NCE(vpop,      0,       1, (VRSDLST),          vfp_nsyn_pop),\n+ NCE(vpush,     0,       1, (VRSDLST),          vfp_nsyn_push),\n+\n #undef  THUMB_VARIANT\n #define THUMB_VARIANT  & fpu_vfp_ext_v1xd\n \n@@ -25086,20 +25116,11 @@ static const struct asm_opcode insns[] =\n  nCE(vnmul,     _vnmul,   3, (RVSD, RVSD, RVSD), vfp_nsyn_nmul),\n  nCE(vnmla,     _vnmla,   3, (RVSD, RVSD, RVSD), vfp_nsyn_nmul),\n  nCE(vnmls,     _vnmls,   3, (RVSD, RVSD, RVSD), vfp_nsyn_nmul),\n- NCE(vpush,     0,       1, (VRSDLST),          vfp_nsyn_push),\n- NCE(vpop,      0,       1, (VRSDLST),          vfp_nsyn_pop),\n  NCE(vcvtz,     0,       2, (RVSD, RVSD),       vfp_nsyn_cvtz),\n \n   /* Mnemonics shared by Neon and VFP.  */\n  nCEF(vmls,     _vmls,    3, (RNSDQ, oRNSDQ, RNSDQ_RNSC), neon_mac_maybe_scalar),\n \n- NCE(vldm,      c900b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n- NCE(vldmia,    c900b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n- NCE(vldmdb,    d100b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n- NCE(vstm,      c800b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n- NCE(vstmia,    c800b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n- NCE(vstmdb,    d000b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n-\n  mnCEF(vcvt,     _vcvt,   3, (RNSDQMQ, RNSDQMQ, oI32z), neon_cvt),\n  nCEF(vcvtr,    _vcvt,   2, (RNSDQ, RNSDQ), neon_cvtr),\n  MNCEF(vcvtb,\teb20a40, 3, (RVSDMQ, RVSDMQ, oI32b), neon_cvtb),"
    },
    {
      "sha": "4c528de073fdc2a52c5bfbb77c41bdd0c0bc2161",
      "filename": "gas/testsuite/gas/arm/v8_1m-mve.d",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef8f595f73a6b42f745bc76a716f45079eae1075/gas/testsuite/gas/arm/v8_1m-mve.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef8f595f73a6b42f745bc76a716f45079eae1075/gas/testsuite/gas/arm/v8_1m-mve.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/v8_1m-mve.d?ref=ef8f595f73a6b42f745bc76a716f45079eae1075",
      "patch": "@@ -0,0 +1,27 @@\n+# name: V8.1-m FP register instructions enabled by +mve\n+# as: -march=armv8.1-m.main+mve\n+# objdump: -dr --show-raw-insn -marmv8.1-m.main\n+\n+.*: +file format .*arm.*\n+\n+\n+Disassembly of section .text:\n+\n+00000000 <\\.text>:\n+ *[0-9a-f]+:\tec80 0b08 \tvstmia\tr0, {d0-d3}\n+ *[0-9a-f]+:\tecb7 3b04 \tvldmia\tr7!, {d3-d4}\n+ *[0-9a-f]+:\tecbd 0b06 \tvpop\t{d0-d2}\n+ *[0-9a-f]+:\ted2d 0b06 \tvpush\t{d0-d2}\n+ *[0-9a-f]+:\tecbd 2b08 \tvpop\t{d2-d5}\n+ *[0-9a-f]+:\ted2d 1b0c \tvpush\t{d1-d6}\n+ *[0-9a-f]+:\tfe71 0f4d \tvpst\n+ *[0-9a-f]+:\tfd00 3e01 \tvstrwt\\.32\tq1, \\[q0, #-4\\]\n+ *[0-9a-f]+:\ted82 2f80 \tvstr\tFPSCR, \\[r2\\]\n+ *[0-9a-f]+:\ted80 0b00 \tvstr\td0, \\[r0\\]\n+ *[0-9a-f]+:\ted90 0b00 \tvldr\td0, \\[r0\\]\n+ *[0-9a-f]+:\ted80 0a00 \tvstr\ts0, \\[r0\\]\n+ *[0-9a-f]+:\ted90 0a00 \tvldr\ts0, \\[r0\\]\n+ *[0-9a-f]+:\ted81 fb00 \tvstr\td15, \\[r1\\]\n+ *[0-9a-f]+:\ted91 fb00 \tvldr\td15, \\[r1\\]\n+ *[0-9a-f]+:\tedc1 fa00 \tvstr\ts31, \\[r1\\]\n+ *[0-9a-f]+:\tedd1 fa00 \tvldr\ts31, \\[r1\\]"
    },
    {
      "sha": "cae1f93c1581c4cfc61191f4e4815a20b50378d1",
      "filename": "gas/testsuite/gas/arm/v8_1m-mve.s",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef8f595f73a6b42f745bc76a716f45079eae1075/gas/testsuite/gas/arm/v8_1m-mve.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef8f595f73a6b42f745bc76a716f45079eae1075/gas/testsuite/gas/arm/v8_1m-mve.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/v8_1m-mve.s?ref=ef8f595f73a6b42f745bc76a716f45079eae1075",
      "patch": "@@ -0,0 +1,24 @@\n+.syntax unified\n+\n+vstmia r0,{d0-d3}\n+vldmia    r7!, {d3-d4}\n+\n+vpop {d0-d2}\n+vpush {d0-d2}\n+vpop {d2-d5}\n+vpush {d1-d6}\n+\n+vpst\n+vstrwt.u32 q1, [q0, #-4]\n+\n+vstr FPSCR, [r2] @ Accepts offset variant without immediate\n+\n+vstr d0,[r0]\n+vldr d0,[r0]\n+vstr s0,[r0]\n+vldr s0,[r0]\n+\n+vstr d15,[r1]\n+vldr d15,[r1]\n+vstr s31,[r1]\n+vldr s31,[r1]"
    }
  ]
}