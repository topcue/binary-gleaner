{
  "sha": "87c66b2e70e421983a826518ff5e03d17eaa8f4c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODdjNjZiMmU3MGU0MjE5ODNhODI2NTE4ZmY1ZTAzZDE3ZWFhOGY0Yw==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-04-29T21:25:36Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-04-29T21:25:36Z"
    },
    "message": "Sync config and libiberty with GCC\n\nconfig/\n\n2020-04-29  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tSync with GCC\n\t2020-04-28  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR bootstrap/94739\n\t* cet.m4 (GCC_CET_HOST_FLAGS): Add -fcf-protection=none to\n\t-Wl,-z,ibt,-z,shstk.  Check whether -fcf-protection=none\n\t-Wl,-z,ibt,-z,shstk works first.\n\n\t2020-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR bootstrap/94739\n\t* cet.m4 (GCC_CET_HOST_FLAGS): New.\n\n\t2020-04-22  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libfortran/94694\n\tPR libfortran/94586\n\t* math.m4 (GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1,\n\tGCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK2): New.\n\nlibiberty/\n\n2020-04-28  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR bootstrap/94739\n\t* configure: Regenerated.",
    "tree": {
      "sha": "404effb0becdaa86f5a132dddf48d70815f6d1de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/404effb0becdaa86f5a132dddf48d70815f6d1de"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/87c66b2e70e421983a826518ff5e03d17eaa8f4c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/87c66b2e70e421983a826518ff5e03d17eaa8f4c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/87c66b2e70e421983a826518ff5e03d17eaa8f4c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/87c66b2e70e421983a826518ff5e03d17eaa8f4c/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "42e165c30c2f0602a73d301bd62a49a2290360c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42e165c30c2f0602a73d301bd62a49a2290360c4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/42e165c30c2f0602a73d301bd62a49a2290360c4"
    }
  ],
  "stats": {
    "total": 322,
    "additions": 273,
    "deletions": 49
  },
  "files": [
    {
      "sha": "ece21f28fbee3eeab3de3f49bb420ec523658156",
      "filename": "config/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c66b2e70e421983a826518ff5e03d17eaa8f4c/config/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c66b2e70e421983a826518ff5e03d17eaa8f4c/config/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/config/ChangeLog?ref=87c66b2e70e421983a826518ff5e03d17eaa8f4c",
      "patch": "@@ -1,3 +1,25 @@\n+2020-04-29  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tSync with GCC\n+\t2020-04-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94739\n+\t* cet.m4 (GCC_CET_HOST_FLAGS): Add -fcf-protection=none to\n+\t-Wl,-z,ibt,-z,shstk.  Check whether -fcf-protection=none\n+\t-Wl,-z,ibt,-z,shstk works first.\n+\n+\t2020-04-25  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94739\n+\t* cet.m4 (GCC_CET_HOST_FLAGS): New.\n+\n+\t2020-04-22  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libfortran/94694\n+\tPR libfortran/94586\n+\t* math.m4 (GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1,\n+\tGCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK2): New.\n+\n 2020-02-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ax_count_cpus.m4: New file, backported from GCC."
    },
    {
      "sha": "ea616b728a99095a08e4818e6f047d653e61e21f",
      "filename": "config/cet.m4",
      "status": "modified",
      "additions": 105,
      "deletions": 0,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c66b2e70e421983a826518ff5e03d17eaa8f4c/config/cet.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c66b2e70e421983a826518ff5e03d17eaa8f4c/config/cet.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/config/cet.m4?ref=87c66b2e70e421983a826518ff5e03d17eaa8f4c",
      "patch": "@@ -48,3 +48,108 @@ else\n   AC_MSG_RESULT([no])\n fi\n ])\n+\n+dnl\n+dnl GCC_CET_HOST_FLAGS\n+dnl    (SHELL-CODE_HANDLER)\n+dnl\n+AC_DEFUN([GCC_CET_HOST_FLAGS],[dnl\n+GCC_ENABLE(cet, auto, ,[enable Intel CET in host libraries],\n+\t   permit yes|no|auto)\n+AC_MSG_CHECKING([for CET support])\n+\n+case \"$host\" in\n+  i[[34567]]86-*-linux* | x86_64-*-linux*)\n+    may_have_cet=yes\n+    save_CFLAGS=\"$CFLAGS\"\n+    CFLAGS=\"$CFLAGS -fcf-protection\"\n+    case \"$enable_cet\" in\n+      auto)\n+\t# Check if target supports multi-byte NOPs\n+\t# and if assembler supports CET insn.\n+\tAC_COMPILE_IFELSE(\n+\t [AC_LANG_PROGRAM(\n+\t  [],\n+\t  [\n+#if !defined(__SSE2__)\n+#error target does not support multi-byte NOPs\n+#else\n+asm (\"setssbsy\");\n+#endif\n+\t  ])],\n+\t [enable_cet=yes],\n+\t [enable_cet=no])\n+\t;;\n+      yes)\n+\t# Check if assembler supports CET.\n+\tAC_COMPILE_IFELSE(\n+\t [AC_LANG_PROGRAM(\n+\t  [],\n+\t  [asm (\"setssbsy\");])],\n+\t [],\n+\t [AC_MSG_ERROR([assembler with CET support is required for --enable-cet])])\n+\t;;\n+    esac\n+    CFLAGS=\"$save_CFLAGS\"\n+    ;;\n+  *)\n+    may_have_cet=no\n+    enable_cet=no\n+    ;;\n+esac\n+\n+save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"$CFLAGS -fcf-protection=none\"\n+save_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+if test x$may_have_cet = xyes; then\n+  # Check whether -fcf-protection=none -Wl,-z,ibt,-z,shstk work.\n+  AC_TRY_LINK(\n+    [],[return 0;],\n+    [may_have_cet=yes],\n+    [may_have_cet=no])\n+fi\n+\n+if test x$may_have_cet = xyes; then\n+  AC_TRY_RUN([\n+static void\n+foo (void)\n+{\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+xxx (void (*f) (void))\n+{\n+  f ();\n+}\n+\n+static void\n+__attribute__ ((noinline, noclone))\n+bar (void)\n+{\n+  xxx (foo);\n+}\n+\n+int\n+main ()\n+{\n+  bar ();\n+  return 0;\n+}\n+  ],\n+  [have_cet=no],\n+  [have_cet=yes])\n+  if test x$enable_cet = xno -a x$have_cet = xyes; then\n+    AC_MSG_ERROR([Intel CET must be enabled on Intel CET enabled host])\n+  fi\n+fi\n+if test x$enable_cet = xyes; then\n+  $1=\"-fcf-protection\"\n+  AC_MSG_RESULT([yes])\n+else\n+  AC_MSG_RESULT([no])\n+fi\n+CFLAGS=\"$save_CFLAGS\"\n+LDFLAGS=\"$save_LDFLAGS\"\n+])"
    },
    {
      "sha": "e1e88d075edeec4ac7eb731878750596b14dc37c",
      "filename": "config/math.m4",
      "status": "modified",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c66b2e70e421983a826518ff5e03d17eaa8f4c/config/math.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c66b2e70e421983a826518ff5e03d17eaa8f4c/config/math.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/config/math.m4?ref=87c66b2e70e421983a826518ff5e03d17eaa8f4c",
      "patch": "@@ -48,3 +48,67 @@ main ()\n                        [Define to 1 if you have the `$1' function.])\n   fi\n ])\n+\n+dnl GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1([name], [type])\n+dnl\n+dnl Check if math function NAME fallback for function with single\n+dnl TYPE argument and TYPE result can be implemented using\n+dnl __builtin_NAME expanded inline without needing unavailable math\n+dnl library function.\n+AC_DEFUN([GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK1],\n+[\n+  AC_REQUIRE([GCC_CHECK_LIBM])\n+if test $gcc_cv_math_func_$1 = no; then\n+  AC_CACHE_CHECK([for inline __builtin_$1], [gcc_cv_math_inline_builtin_$1],\n+\t\t [AC_LINK_IFELSE([AC_LANG_SOURCE([\n+$2\n+$1_fallback ($2 x)\n+{\n+  return __builtin_$1 (x);\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+])],\n+[gcc_cv_math_inline_builtin_$1=yes],\n+[gcc_cv_math_inline_builtin_$1=no])])\n+  if test $gcc_cv_math_inline_builtin_$1 = yes; then\n+    AC_DEFINE_UNQUOTED(AS_TR_CPP(HAVE_INLINE_BUILTIN_$1),[1],\n+\t      [Define to 1 if `__builtin_$1' is expanded inline.])\n+  fi\n+fi])\n+\n+dnl GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK2([name], [type])\n+dnl\n+dnl Check if math function NAME fallback for function with two\n+dnl TYPE arguments and TYPE result can be implemented using\n+dnl __builtin_NAME expanded inline without needing unavailable math\n+dnl library function.\n+AC_DEFUN([GCC_CHECK_MATH_INLINE_BUILTIN_FALLBACK2],\n+[\n+  AC_REQUIRE([GCC_CHECK_LIBM])\n+if test $gcc_cv_math_func_$1 = no; then\n+  AC_CACHE_CHECK([for inline __builtin_$1], [gcc_cv_math_inline_builtin_$1],\n+\t\t [AC_LINK_IFELSE([AC_LANG_SOURCE([\n+$2\n+$1_fallback ($2 x, $2 y)\n+{\n+  return __builtin_$1 (x, y);\n+}\n+\n+int\n+main ()\n+{\n+  return 0;\n+}\n+])],\n+[gcc_cv_math_inline_builtin_$1=yes],\n+[gcc_cv_math_inline_builtin_$1=no])])\n+  if test $gcc_cv_math_inline_builtin_$1 = yes; then\n+    AC_DEFINE_UNQUOTED(AS_TR_CPP(HAVE_INLINE_BUILTIN_$1),[1],\n+\t      [Define to 1 if `__builtin_$1' is expanded inline.])\n+  fi\n+fi])"
    },
    {
      "sha": "a757715850999f44dc2e620db428ec6c66444bd2",
      "filename": "libiberty/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c66b2e70e421983a826518ff5e03d17eaa8f4c/libiberty/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c66b2e70e421983a826518ff5e03d17eaa8f4c/libiberty/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/ChangeLog?ref=87c66b2e70e421983a826518ff5e03d17eaa8f4c",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-28  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR bootstrap/94739\n+\t* configure: Regenerated.\n+\n 2020-04-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR demangler/94797"
    },
    {
      "sha": "bb76cf1b823c104314d1af4ea2d11304b9e212f8",
      "filename": "libiberty/configure",
      "status": "modified",
      "additions": 77,
      "deletions": 49,
      "changes": 126,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/87c66b2e70e421983a826518ff5e03d17eaa8f4c/libiberty/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/87c66b2e70e421983a826518ff5e03d17eaa8f4c/libiberty/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/configure?ref=87c66b2e70e421983a826518ff5e03d17eaa8f4c",
      "patch": "@@ -1674,6 +1674,52 @@ $as_echo \"$ac_res\" >&6; }\n \n } # ac_fn_c_check_header_compile\n \n+# ac_fn_c_try_link LINENO\n+# -----------------------\n+# Try to link conftest.$ac_ext, and return whether this succeeded.\n+ac_fn_c_try_link ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  rm -f conftest.$ac_objext conftest$ac_exeext\n+  if { { ac_try=\"$ac_link\"\n+case \"(($ac_try\" in\n+  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n+  *) ac_try_echo=$ac_try;;\n+esac\n+eval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n+$as_echo \"$ac_try_echo\"; } >&5\n+  (eval \"$ac_link\") 2>conftest.err\n+  ac_status=$?\n+  if test -s conftest.err; then\n+    grep -v '^ *+' conftest.err >conftest.er1\n+    cat conftest.er1 >&5\n+    mv -f conftest.er1 conftest.err\n+  fi\n+  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n+  test $ac_status = 0; } && {\n+\t test -z \"$ac_c_werror_flag\" ||\n+\t test ! -s conftest.err\n+       } && test -s conftest$ac_exeext && {\n+\t test \"$cross_compiling\" = yes ||\n+\t test -x conftest$ac_exeext\n+       }; then :\n+  ac_retval=0\n+else\n+  $as_echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+\tac_retval=1\n+fi\n+  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information\n+  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would\n+  # interfere with the next link command; also delete a directory that is\n+  # left behind by Apple's compiler.  We do this before executing the actions.\n+  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+  as_fn_set_status $ac_retval\n+\n+} # ac_fn_c_try_link\n+\n # ac_fn_c_check_header_preproc LINENO HEADER VAR\n # ----------------------------------------------\n # Tests whether HEADER is present, setting the cache variable VAR accordingly.\n@@ -1940,52 +1986,6 @@ $as_echo \"$ac_res\" >&6; }\n \n } # ac_fn_c_check_type\n \n-# ac_fn_c_try_link LINENO\n-# -----------------------\n-# Try to link conftest.$ac_ext, and return whether this succeeded.\n-ac_fn_c_try_link ()\n-{\n-  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n-  rm -f conftest.$ac_objext conftest$ac_exeext\n-  if { { ac_try=\"$ac_link\"\n-case \"(($ac_try\" in\n-  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n-  *) ac_try_echo=$ac_try;;\n-esac\n-eval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n-$as_echo \"$ac_try_echo\"; } >&5\n-  (eval \"$ac_link\") 2>conftest.err\n-  ac_status=$?\n-  if test -s conftest.err; then\n-    grep -v '^ *+' conftest.err >conftest.er1\n-    cat conftest.er1 >&5\n-    mv -f conftest.er1 conftest.err\n-  fi\n-  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n-  test $ac_status = 0; } && {\n-\t test -z \"$ac_c_werror_flag\" ||\n-\t test ! -s conftest.err\n-       } && test -s conftest$ac_exeext && {\n-\t test \"$cross_compiling\" = yes ||\n-\t test -x conftest$ac_exeext\n-       }; then :\n-  ac_retval=0\n-else\n-  $as_echo \"$as_me: failed program was:\" >&5\n-sed 's/^/| /' conftest.$ac_ext >&5\n-\n-\tac_retval=1\n-fi\n-  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information\n-  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would\n-  # interfere with the next link command; also delete a directory that is\n-  # left behind by Apple's compiler.  We do this before executing the actions.\n-  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n-  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n-  as_fn_set_status $ac_retval\n-\n-} # ac_fn_c_try_link\n-\n # ac_fn_c_check_func LINENO FUNC VAR\n # ----------------------------------\n # Tests whether FUNC exists, setting the cache variable VAR accordingly\n@@ -5345,9 +5345,36 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     ;;\n esac\n \n+save_CFLAGS=\"$CFLAGS\"\n+CFLAGS=\"$CFLAGS -fcf-protection=none\"\n+save_LDFLAGS=\"$LDFLAGS\"\n+LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n+if test x$may_have_cet = xyes; then\n+  # Check whether -fcf-protection=none -Wl,-z,ibt,-z,shstk work.\n+  if test x$gcc_no_link = xyes; then\n+  as_fn_error $? \"Link tests are not allowed after GCC_NO_EXECUTABLES.\" \"$LINENO\" 5\n+fi\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  may_have_cet=yes\n+else\n+  may_have_cet=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+\n if test x$may_have_cet = xyes; then\n-  save_LDFLAGS=\"$LDFLAGS\"\n-  LDFLAGS=\"$LDFLAGS -Wl,-z,ibt,-z,shstk\"\n   if test \"$cross_compiling\" = yes; then :\n   { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n $as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n@@ -5393,7 +5420,6 @@ rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n   conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n-  LDFLAGS=\"$save_LDFLAGS\"\n   if test x$enable_cet = xno -a x$have_cet = xyes; then\n     as_fn_error $? \"Intel CET must be enabled on Intel CET enabled host\" \"$LINENO\" 5\n   fi\n@@ -5406,6 +5432,8 @@ else\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n $as_echo \"no\" >&6; }\n fi\n+CFLAGS=\"$save_CFLAGS\"\n+LDFLAGS=\"$save_LDFLAGS\"\n \n \n "
    }
  ]
}