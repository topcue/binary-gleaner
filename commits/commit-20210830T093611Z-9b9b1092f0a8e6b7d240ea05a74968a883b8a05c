{
  "sha": "9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWI5YjEwOTJmMGE4ZTZiN2QyNDBlYTA1YTc0OTY4YTg4M2I4YTA1Yw==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-07-13T10:09:38Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-08-30T09:36:11Z"
    },
    "message": "RISC-V: PR27916, Support mapping symbols.\n\nSimilar to ARM/AARCH64, we add mapping symbols in the symbol table,\nto mark the start addresses of data and instructions.  The $d means\ndata, and the $x means instruction.  Then the disassembler uses these\nsymbols to decide whether we should dump data or instruction.\n\nConsider the mapping-04 test case,\n$ cat tmp.s\n  .text\n  .option norelax\n  .option norvc\n  .fill 2, 4, 0x1001\n  .byte 1\n  .word 0\n  .balign 8\n  add a0, a0, a0\n  .fill 5, 2, 0x2002\n  add a1, a1, a1\n  .data\n  .word 0x1             # No need to add mapping symbols.\n  .word 0x2\n\n$ riscv64-unknown-elf-as tmp.s -o tmp.o\n$ riscv64-unknown-elf-objdump -d tmp.o\n\nDisassembly of section .text:\n\n0000000000000000 <.text>:\n   0:   00001001         .word   0x00001001  # Marked $d, .fill directive.\n   4:   00001001         .word   0x00001001\n   8:   00000001         .word   0x00000001  # .byte + part of .word.\n   c:   00               .byte   0x00        # remaining .word.\n   d:   00               .byte   0x00        # Marked $d, odd byte of alignment.\n   e:   0001             nop                 # Marked $x, nops for alignment.\n  10:   00a50533         add     a0,a0,a0\n  14:   20022002         .word   0x20022002  # Marked $d, .fill directive.\n  18:   20022002         .word   0x20022002\n  1c:   2002             .short  0x2002\n  1e:   00b585b3         add     a1,a1,a1    # Marked $x.\n  22:   0001             nop                 # Section tail alignment.\n  24:   00000013         nop\n\n* Use $d and $x to mark the distribution of data and instructions.\n  Alignments of code are recognized as instructions, since we usually\n  fill nops for them.\n\n* If the alignment have odd bytes, then we cannot just fill the nops\n  into the spaces.  We always fill an odd byte 0x00 at the start of\n  the spaces.  Therefore, add a $d mapping symbol for the odd byte,\n  to tell disassembler that it isn't an instruction.  The behavior\n  is same as Arm and Aarch64.\n\nThe elf/linux toolchain regressions all passed.  Besides, I also\ndisable the mapping symbols internally, but use the new objudmp, the\nregressions passed, too.  Therefore, the new objudmp should dump\nthe objects corretly, even if they don't have any mapping symbols.\n\nbfd/\n\tpr 27916\n\t* cpu-riscv.c (riscv_elf_is_mapping_symbols): Define mapping symbols.\n\t* cpu-riscv.h: extern riscv_elf_is_mapping_symbols.\n\t* elfnn-riscv.c (riscv_maybe_function_sym): Do not choose mapping\n\tsymbols as a function name.\n\t(riscv_elf_is_target_special_symbol): Add mapping symbols.\nbinutils/\n\tpr 27916\n\t* testsuite/binutils-all/readelf.s: Updated.\n\t* testsuite/binutils-all/readelf.s-64: Likewise.\n\t* testsuite/binutils-all/readelf.s-64-unused: Likewise.\n\t* testsuite/binutils-all/readelf.ss: Likewise.\n\t* testsuite/binutils-all/readelf.ss-64: Likewise.\n\t* testsuite/binutils-all/readelf.ss-64-unused: Likewise.\ngas/\n\tpr 27916\n\t* config/tc-riscv.c (make_mapping_symbol): Create a new mapping symbol.\n\t(riscv_mapping_state): Decide whether to create mapping symbol for\n\tfrag_now.  Only add the mapping symbols to text sections.\n\t(riscv_add_odd_padding_symbol): Add the mapping symbols for the\n\triscv_handle_align, which have odd bytes spaces.\n\t(riscv_check_mapping_symbols): Remove any excess mapping symbols.\n\t(md_assemble): Marked as MAP_INSN.\n\t(riscv_frag_align_code): Marked as MAP_INSN.\n\t(riscv_init_frag): Add mapping symbols for frag, it usually called\n\tby frag_var.  Marked as MAP_DATA for rs_align and rs_fill, and\n\tmarked as MAP_INSN for rs_align_code.\n\t(s_riscv_insn): Marked as MAP_INSN.\n\t(riscv_adjust_symtab): Call riscv_check_mapping_symbols.\n\t* config/tc-riscv.h (md_cons_align): Defined to riscv_mapping_state\n\twith MAP_DATA.\n\t(TC_SEGMENT_INFO_TYPE): Record mapping state for each segment.\n\t(TC_FRAG_TYPE): Record the first and last mapping symbols for the\n\tfragments.  The first mapping symbol must be placed at the start\n\tof the fragment.\n\t(TC_FRAG_INIT): Defined to riscv_init_frag.\n\t* testsuite/gas/riscv/mapping-01.s: New testcase.\n\t* testsuite/gas/riscv/mapping-01a.d: Likewise.\n\t* testsuite/gas/riscv/mapping-01b.d: Likewise.\n\t* testsuite/gas/riscv/mapping-02.s: Likewise.\n\t* testsuite/gas/riscv/mapping-02a.d: Likewise.\n\t* testsuite/gas/riscv/mapping-02b.d: Likewise.\n\t* testsuite/gas/riscv/mapping-03.s: Likewise.\n\t* testsuite/gas/riscv/mapping-03a.d: Likewise.\n\t* testsuite/gas/riscv/mapping-03b.d: Likewise.\n\t* testsuite/gas/riscv/mapping-04.s: Likewise.\n\t* testsuite/gas/riscv/mapping-04a.d: Likewise.\n\t* testsuite/gas/riscv/mapping-04b.d: Likewise.\n\t* testsuite/gas/riscv/mapping-norelax-04a.d: Likewise.\n\t* testsuite/gas/riscv/mapping-norelax-04b.d: Likewise.\n\t* testsuite/gas/riscv/no-relax-align.d: Updated.\n\t* testsuite/gas/riscv/no-relax-align-2.d: Likewise.\ninclude/\n\tpr 27916\n\t* opcode/riscv.h (enum riscv_seg_mstate): Added.\n\nopcodes/\n\tpr 27916\n\t* riscv-dis.c (last_map_symbol, last_stop_offset, last_map_state):\n\tAdded to dump sections with mapping symbols.\n\t(riscv_get_map_state): Get the mapping state from the symbol.\n\t(riscv_search_mapping_symbol): Check the sorted symbol table, and\n\tthen find the suitable mapping symbol.\n\t(riscv_data_length): Decide which data size we should print.\n\t(riscv_disassemble_data): Dump the data contents.\n\t(print_insn_riscv): Handle the mapping symbols.\n\t(riscv_symbol_is_valid): Marked mapping symbols as invalid.",
    "tree": {
      "sha": "dc5a9df30faf6439ec510b2462fc98e04beb1e3a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dc5a9df30faf6439ec510b2462fc98e04beb1e3a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "590d3faada8a12bf0937bbf68413956dc6a339a9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/590d3faada8a12bf0937bbf68413956dc6a339a9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/590d3faada8a12bf0937bbf68413956dc6a339a9"
    }
  ],
  "stats": {
    "total": 835,
    "additions": 807,
    "deletions": 28
  },
  "files": [
    {
      "sha": "813f2c3df8d95a8d39e1584b57986921d44c0e2d",
      "filename": "bfd/cpu-riscv.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/bfd/cpu-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/bfd/cpu-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-riscv.c?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -140,3 +140,12 @@ riscv_get_priv_spec_class_from_numbers (unsigned int major,\n   RISCV_GET_PRIV_SPEC_CLASS (buf, class_t);\n   *class = class_t;\n }\n+\n+/* Define mapping symbols for riscv.  */\n+\n+bool\n+riscv_elf_is_mapping_symbols (const char *name)\n+{\n+  return (!strncmp (name, \"$d\", 2)\n+\t  || !strncmp (name, \"$x\", 2));\n+}"
    },
    {
      "sha": "ed5ee7e60d582d7827d7bcf16bb7490dd6ff4211",
      "filename": "bfd/cpu-riscv.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/bfd/cpu-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/bfd/cpu-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-riscv.h?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -79,3 +79,6 @@ riscv_get_priv_spec_class_from_numbers (unsigned int,\n \t\t\t\t\tunsigned int,\n \t\t\t\t\tunsigned int,\n \t\t\t\t\tenum riscv_spec_class *);\n+\n+extern bool\n+riscv_elf_is_mapping_symbols (const char *);"
    },
    {
      "sha": "a10384cd4d3695415c5b5ed416c236afc329ace1",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 22,
      "deletions": 3,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -5150,14 +5150,32 @@ riscv_elf_obj_attrs_arg_type (int tag)\n   return (tag & 1) != 0 ? ATTR_TYPE_FLAG_STR_VAL : ATTR_TYPE_FLAG_INT_VAL;\n }\n \n-/* PR27584, Omit local and empty symbols since they usually generated\n-   for pcrel relocations.  */\n+/* Do not choose mapping symbols as a function name.  */\n+\n+static bfd_size_type\n+riscv_maybe_function_sym (const asymbol *sym,\n+\t\t\t  asection *sec,\n+\t\t\t  bfd_vma *code_off)\n+{\n+  if (sym->flags & BSF_LOCAL\n+      && riscv_elf_is_mapping_symbols (sym->name))\n+    return 0;\n+\n+  return _bfd_elf_maybe_function_sym (sym, sec, code_off);\n+}\n+\n+/* Treat the following cases as target special symbols, they are\n+   usually omitted.  */\n \n static bool\n riscv_elf_is_target_special_symbol (bfd *abfd, asymbol *sym)\n {\n+  /* PR27584, local and empty symbols.  Since they are usually\n+     generated for pcrel relocations.  */\n   return (!strcmp (sym->name, \"\")\n-\t  || _bfd_elf_is_local_label_name (abfd, sym->name));\n+\t  || _bfd_elf_is_local_label_name (abfd, sym->name)\n+\t  /* PR27916, mapping symbols.  */\n+\t  || riscv_elf_is_mapping_symbols (sym->name));\n }\n \n static int\n@@ -5245,6 +5263,7 @@ riscv_elf_modify_segment_map (bfd *abfd,\n #define elf_backend_grok_psinfo\t\t\triscv_elf_grok_psinfo\n #define elf_backend_object_p\t\t\triscv_elf_object_p\n #define elf_backend_write_core_note\t\triscv_write_core_note\n+#define elf_backend_maybe_function_sym\t\triscv_maybe_function_sym\n #define elf_info_to_howto_rel\t\t\tNULL\n #define elf_info_to_howto\t\t\triscv_info_to_howto_rela\n #define bfd_elfNN_bfd_relax_section\t\t_bfd_riscv_relax_section"
    },
    {
      "sha": "4d33768e2bcc3fac91d8d200bf62798713f8329a",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -20304,7 +20304,7 @@ get_symbol_for_build_attribute (Filedata *filedata,\n \tif (ba_cache.strtab[sym->st_name] == 0)\n \t  continue;\n \n-\t/* The AArch64 and ARM architectures define mapping symbols\n+\t/* The AArch64, ARM and RISC-V architectures define mapping symbols\n \t   (eg $d, $x, $t) which we want to ignore.  */\n \tif (ba_cache.strtab[sym->st_name] == '$'\n \t    && ba_cache.strtab[sym->st_name + 1] != 0"
    },
    {
      "sha": "e0037a569547011528152d520c054d2f2b8a8cea",
      "filename": "binutils/testsuite/binutils-all/readelf.s-64",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.s-64",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.s-64",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.s-64?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -19,8 +19,8 @@ Section Headers:\n  +\\[ .\\] .symtab +SYMTAB +0000000000000000 +0+.*\n # aarch64-elf targets have one more data symbol.\n # x86 targets may have .note.gnu.property.\n-# riscv targets have .riscv.attributes.\n- +0+.* +0000000000000018 +(6|7) +(3|4) +8\n+# riscv targets have two more symbols, data symbol and .riscv.attributes.\n+ +0+.* +0000000000000018 +(6|7) +(3|4|5) +8\n  +\\[ .\\] .strtab +STRTAB +0000000000000000 +0+.*\n  +0+.* +0000000000000000 .* +0 +0 +1\n  +\\[ .\\] .shstrtab +STRTAB +0000000000000000 +[0-9a-f]+"
    },
    {
      "sha": "45b24eb22cb5f05409b8e7636ed69f9d388a4b54",
      "filename": "binutils/testsuite/binutils-all/readelf.s-64-unused",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.s-64-unused",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.s-64-unused",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.s-64-unused?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -19,8 +19,8 @@ Section Headers:\n  +\\[ .\\] .symtab +SYMTAB +0000000000000000 +0+.*\n # aarch64-elf targets have one more data symbol.\n # x86 targets may have .note.gnu.property.\n-# riscv targets have .riscv.attributes.\n- +0+.* +0000000000000018 +(6|7) +(6|7) +8\n+# riscv targets have two more symbols, data symbol and .riscv.attributes.\n+ +0+.* +0000000000000018 +(6|7) +(6|7|8) +8\n  +\\[ .\\] .strtab +STRTAB +0000000000000000 +0+.*\n  +0+.* +0000000000000000 .* +0 +0 +1\n  +\\[ .\\] .shstrtab +STRTAB +0000000000000000 +[0-9a-f]+"
    },
    {
      "sha": "1e1f40c9831f83da25132ed700ef80086318fc49",
      "filename": "binutils/testsuite/binutils-all/readelf.ss",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.ss",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.ss",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.ss?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -5,8 +5,10 @@ Symbol table '.symtab' contains .* entries:\n  +1: 00000000 +0 +NOTYPE +LOCAL +DEFAULT +1 static_text_symbol\n # ARM targets add the $d mapping symbol here...\n # NDS32 targets add the $d2 mapping symbol here...\n+# riscv targets add the $d mapping symbol here...\n #...\n  +.: 00000000 +0 +NOTYPE +LOCAL +DEFAULT +[34] static_data_symbol\n+# ... or here ...\n # v850 targets include extra SECTION symbols here for the .call_table_data\n # and .call_table_text sections.\n # riscv targets add .riscv.attribute symbol here..."
    },
    {
      "sha": "c8c26dc92be3e1d708f093875a7bb23104c37058",
      "filename": "binutils/testsuite/binutils-all/readelf.ss-64",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.ss-64",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.ss-64",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.ss-64?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -4,13 +4,14 @@ Symbol table '.symtab' contains .* entries:\n  +0: 0000000000000000 +0 +NOTYPE +LOCAL +DEFAULT +UND \n  +1: 0000000000000000 +0 +NOTYPE +LOCAL +DEFAULT +1 static_text_symbol\n # aarch64-elf targets add the $d mapping symbol here...\n+# riscv targets add the $d mapping symbol here...\n #...\n  +.: 0000000000000000 +0 +NOTYPE +LOCAL +DEFAULT +3 static_data_symbol\n # ... or here ...\n # riscv targets add .riscv.attribute symbol here...\n #...\n-.* +.: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +1 text_symbol\n- +.: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +UND external_symbol\n- +.: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +3 data_symbol\n+.* +[0-9]+: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +1 text_symbol\n+ +[0-9]+: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +UND external_symbol\n+ +[0-9]+: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +3 data_symbol\n  +[0-9]+: 0000000000000004 +4 +(COMMON|OBJECT) +GLOBAL +DEFAULT +COM common_symbol\n #pass"
    },
    {
      "sha": "80a289c76a424f9ae46818b9bbc012a0c9e1a1c6",
      "filename": "binutils/testsuite/binutils-all/readelf.ss-64-unused",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.ss-64-unused",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.ss-64-unused",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.ss-64-unused?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -7,13 +7,14 @@ Symbol table '.symtab' contains .* entries:\n  +3: 0000000000000000 +0 +SECTION +LOCAL +DEFAULT +4.*\n  +4: 0000000000000000 +0 +NOTYPE +LOCAL +DEFAULT +1 static_text_symbol\n # aarch64-elf targets add the $d mapping symbol here...\n+# riscv targets add the $d mapping symbol here...\n #...\n  +.: 0000000000000000 +0 +NOTYPE +LOCAL +DEFAULT +3 static_data_symbol\n # ... or here ...\n # riscv targets add .riscv.attribute symbol here...\n #...\n-.* +.: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +1 text_symbol\n- +.: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +UND external_symbol\n- +.: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +3 data_symbol\n+.* +[0-9]+: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +1 text_symbol\n+ +[0-9]+: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +UND external_symbol\n+ +[0-9]+: 0000000000000000 +0 +NOTYPE +GLOBAL +DEFAULT +3 data_symbol\n  +[0-9]+: 0000000000000004 +4 +(COMMON|OBJECT) +GLOBAL +DEFAULT +COM common_symbol\n #pass"
    },
    {
      "sha": "944ab45cc4664189f65581a1032c45974a14624c",
      "filename": "binutils/testsuite/binutils-all/readelf.ss-unused",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.ss-unused",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/binutils/testsuite/binutils-all/readelf.ss-unused",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.ss-unused?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -8,8 +8,10 @@ Symbol table '.symtab' contains .* entries:\n  +4: 00000000 +0 +NOTYPE +LOCAL +DEFAULT +1 static_text_symbol\n # ARM targets add the $d mapping symbol here...\n # NDS32 targets add the $d2 mapping symbol here...\n+# riscv targets add the $d4 mapping symbols here...\n #...\n  +.: 00000000 +0 +NOTYPE +LOCAL +DEFAULT +[34] static_data_symbol\n+# ... or here ...\n # v850 targets include extra SECTION symbols here for the .call_table_data\n # and .call_table_text sections.\n #..."
    },
    {
      "sha": "bb6b063ed85e2b3c00dc32d10b081a05e82a53a6",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 200,
      "deletions": 1,
      "changes": 201,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -561,6 +561,157 @@ static bool explicit_priv_attr = false;\n \n static char *expr_end;\n \n+/* Create a new mapping symbol for the transition to STATE.  */\n+\n+static void\n+make_mapping_symbol (enum riscv_seg_mstate state,\n+\t\t     valueT value,\n+\t\t     fragS *frag)\n+{\n+  const char *name;\n+  switch (state)\n+    {\n+    case MAP_DATA:\n+      name = \"$d\";\n+      break;\n+    case MAP_INSN:\n+      name = \"$x\";\n+      break;\n+    default:\n+      abort ();\n+    }\n+\n+  symbolS *symbol = symbol_new (name, now_seg, frag, value);\n+  symbol_get_bfdsym (symbol)->flags |= (BSF_NO_FLAGS | BSF_LOCAL);\n+\n+  /* If .fill or other data filling directive generates zero sized data,\n+     or we are adding odd alignemnts, then the mapping symbol for the\n+     following code will have the same value.  */\n+  if (value == 0)\n+    {\n+       if (frag->tc_frag_data.first_map_symbol != NULL)\n+\t{\n+\t  know (S_GET_VALUE (frag->tc_frag_data.first_map_symbol)\n+\t\t== S_GET_VALUE (symbol));\n+\t  /* Remove the old one.  */\n+\t  symbol_remove (frag->tc_frag_data.first_map_symbol,\n+\t\t\t &symbol_rootP, &symbol_lastP);\n+\t}\n+      frag->tc_frag_data.first_map_symbol = symbol;\n+    }\n+  if (frag->tc_frag_data.last_map_symbol != NULL)\n+    {\n+      /* The mapping symbols should be added in offset order.  */\n+      know (S_GET_VALUE (frag->tc_frag_data.last_map_symbol)\n+\t\t\t <= S_GET_VALUE (symbol));\n+      /* Remove the old one.  */\n+      if (S_GET_VALUE (frag->tc_frag_data.last_map_symbol)\n+\t  == S_GET_VALUE (symbol))\n+\tsymbol_remove (frag->tc_frag_data.last_map_symbol,\n+\t\t       &symbol_rootP, &symbol_lastP);\n+    }\n+  frag->tc_frag_data.last_map_symbol = symbol;\n+}\n+\n+/* Set the mapping state for frag_now.  */\n+\n+void\n+riscv_mapping_state (enum riscv_seg_mstate to_state,\n+\t\t     int max_chars)\n+{\n+  enum riscv_seg_mstate from_state =\n+\tseg_info (now_seg)->tc_segment_info_data.map_state;\n+\n+  if (!SEG_NORMAL (now_seg)\n+      /* For now I only add the mapping symbols to text sections.\n+\t Therefore, the dis-assembler only show the actual contents\n+\t distribution for text.  Other sections will be shown as\n+\t data without the details.  */\n+      || !subseg_text_p (now_seg))\n+    return;\n+\n+  /* The mapping symbol should be emitted if not in the right\n+     mapping state  */\n+  if (from_state == to_state)\n+    return;\n+\n+  valueT value = (valueT) (frag_now_fix () - max_chars);\n+  seg_info (now_seg)->tc_segment_info_data.map_state = to_state;\n+  make_mapping_symbol (to_state, value, frag_now);\n+}\n+\n+/* Add the odd bytes of paddings for riscv_handle_align.  */\n+\n+static void\n+riscv_add_odd_padding_symbol (fragS *frag)\n+{\n+  /* If there was already a mapping symbol, it should be\n+     removed in the make_mapping_symbol.  */\n+  make_mapping_symbol (MAP_DATA, frag->fr_fix, frag);\n+  make_mapping_symbol (MAP_INSN, frag->fr_fix + 1, frag);\n+}\n+\n+/* Remove any excess mapping symbols generated for alignment frags in\n+   SEC.  We may have created a mapping symbol before a zero byte\n+   alignment; remove it if there's a mapping symbol after the\n+   alignment.  */\n+\n+static void\n+riscv_check_mapping_symbols (bfd *abfd ATTRIBUTE_UNUSED,\n+\t\t\t     asection *sec,\n+\t\t\t     void *dummy ATTRIBUTE_UNUSED)\n+{\n+  segment_info_type *seginfo = seg_info (sec);\n+  fragS *fragp;\n+\n+  if (seginfo == NULL || seginfo->frchainP == NULL)\n+    return;\n+\n+  for (fragp = seginfo->frchainP->frch_root;\n+       fragp != NULL;\n+       fragp = fragp->fr_next)\n+    {\n+      symbolS *last = fragp->tc_frag_data.last_map_symbol;\n+      fragS *next = fragp->fr_next;\n+\n+      if (last == NULL || next == NULL)\n+\tcontinue;\n+\n+      /* Check the last mapping symbol if it is at the boundary of\n+\t fragment.  */\n+      if (S_GET_VALUE (last) < next->fr_address)\n+\tcontinue;\n+      know (S_GET_VALUE (last) == next->fr_address);\n+\n+      do\n+\t{\n+\t  if (next->tc_frag_data.first_map_symbol != NULL)\n+\t    {\n+\t      /* The last mapping symbol overlaps with another one\n+\t\t which at the start of the next frag.  */\n+\t      symbol_remove (last, &symbol_rootP, &symbol_lastP);\n+\t      break;\n+\t    }\n+\n+\t  if (next->fr_next == NULL)\n+\t    {\n+\t      /* The last mapping symbol is at the end of the section.  */\n+\t      know (next->fr_fix == 0 && next->fr_var == 0);\n+\t      symbol_remove (last, &symbol_rootP, &symbol_lastP);\n+\t      break;\n+\t    }\n+\n+\t  /* Since we may have empty frags without any mapping symbols,\n+\t     keep looking until the non-empty frag.  */\n+\t  if (next->fr_address != next->fr_next->fr_address)\n+\t    break;\n+\n+\t  next = next->fr_next;\n+\t}\n+      while (next != NULL);\n+    }\n+}\n+\n /* The default target format to use.  */\n \n const char *\n@@ -2767,6 +2918,8 @@ md_assemble (char *str)\n        return;\n     }\n \n+  riscv_mapping_state (MAP_INSN, 0);\n+\n   const char *error = riscv_ip (str, &insn, &imm_expr, &imm_reloc, op_hash);\n \n   if (error)\n@@ -3421,6 +3574,8 @@ riscv_frag_align_code (int n)\n   fix_new_exp (frag_now, nops - frag_now->fr_literal, 0,\n \t       &ex, false, BFD_RELOC_RISCV_ALIGN);\n \n+  riscv_mapping_state (MAP_INSN, worst_case_bytes);\n+\n   return true;\n }\n \n@@ -3440,6 +3595,7 @@ riscv_handle_align (fragS *fragP)\n \t  /* We have 4 byte uncompressed nops.  */\n \t  bfd_signed_vma size = 4;\n \t  bfd_signed_vma excess = bytes % size;\n+\t  bfd_boolean odd_padding = (excess % 2 == 1);\n \t  char *p = fragP->fr_literal + fragP->fr_fix;\n \n \t  if (bytes <= 0)\n@@ -3448,12 +3604,20 @@ riscv_handle_align (fragS *fragP)\n \t  /* Insert zeros or compressed nops to get 4 byte alignment.  */\n \t  if (excess)\n \t    {\n+\t      if (odd_padding)\n+\t\triscv_add_odd_padding_symbol (fragP);\n \t      riscv_make_nops (p, excess);\n \t      fragP->fr_fix += excess;\n \t      p += excess;\n \t    }\n \n-\t  /* Insert variable number of 4 byte uncompressed nops.  */\n+\t  /* The frag will be changed to `rs_fill` later.  The function\n+\t     `write_contents` will try to fill the remaining spaces\n+\t     according to the patterns we give.  In this case, we give\n+\t     a 4 byte uncompressed nop as the pattern, and set the size\n+\t     of the pattern into `fr_var`.  The nop will be output to the\n+\t     file `fr_offset` times.  However, `fr_offset` could be zero\n+\t     if we don't need to pad the boundary finally.  */\n \t  riscv_make_nops (p, size);\n \t  fragP->fr_var = size;\n \t}\n@@ -3464,6 +3628,30 @@ riscv_handle_align (fragS *fragP)\n     }\n }\n \n+/* This usually called from frag_var.  */\n+\n+void\n+riscv_init_frag (fragS * fragP, int max_chars)\n+{\n+  /* Do not add mapping symbol to debug sections.  */\n+  if (bfd_section_flags (now_seg) & SEC_DEBUGGING)\n+    return;\n+\n+  switch (fragP->fr_type)\n+    {\n+    case rs_fill:\n+    case rs_align:\n+    case rs_align_test:\n+      riscv_mapping_state (MAP_DATA, max_chars);\n+      break;\n+    case rs_align_code:\n+      riscv_mapping_state (MAP_INSN, max_chars);\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n int\n md_estimate_size_before_relax (fragS *fragp, asection *segtype)\n {\n@@ -3720,6 +3908,8 @@ s_riscv_insn (int x ATTRIBUTE_UNUSED)\n   save_c = *input_line_pointer;\n   *input_line_pointer = '\\0';\n \n+  riscv_mapping_state (MAP_INSN, 0);\n+\n   const char *error = riscv_ip (str, &insn, &imm_expr,\n \t\t\t\t&imm_reloc, insn_type_hash);\n \n@@ -3810,6 +4000,15 @@ riscv_md_end (void)\n   riscv_set_public_attributes ();\n }\n \n+/* Adjust the symbol table.  */\n+\n+void\n+riscv_adjust_symtab (void)\n+{\n+  bfd_map_over_sections (stdoutput, riscv_check_mapping_symbols, (char *) 0);\n+  elf_adjust_symtab ();\n+}\n+\n /* Given a symbolic attribute NAME, return the proper integer value.\n    Returns -1 if the attribute is not known.  */\n "
    },
    {
      "sha": "d035eed8a93eb9a484d582d6a9377ad3970abedc",
      "filename": "gas/config/tc-riscv.h",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/config/tc-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/config/tc-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.h?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -128,4 +128,28 @@ extern void riscv_elf_final_processing (void);\n extern void riscv_md_end (void);\n extern int riscv_convert_symbolic_attribute (const char *);\n \n+/* Set mapping symbol states.  */\n+#define md_cons_align(nbytes) riscv_mapping_state (MAP_DATA, 0)\n+void riscv_mapping_state (enum riscv_seg_mstate, int);\n+\n+/* Define target segment type.  */\n+#define TC_SEGMENT_INFO_TYPE struct riscv_segment_info_type\n+struct riscv_segment_info_type\n+{\n+  enum riscv_seg_mstate map_state;\n+};\n+\n+/* Define target fragment type.  */\n+#define TC_FRAG_TYPE struct riscv_frag_type\n+struct riscv_frag_type\n+{\n+  symbolS *first_map_symbol, *last_map_symbol;\n+};\n+\n+#define TC_FRAG_INIT(fragp, max_bytes) riscv_init_frag (fragp, max_bytes)\n+extern void riscv_init_frag (struct frag *, int);\n+\n+#define obj_adjust_symtab() riscv_adjust_symtab ()\n+extern void riscv_adjust_symtab (void);\n+\n #endif /* TC_RISCV */"
    },
    {
      "sha": "000209886e21f910aa9943c13945012d4b5d1da2",
      "filename": "gas/testsuite/gas/riscv/mapping-01.s",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-01.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-01.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-01.s?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,17 @@\n+\t.option norvc\n+\t.text\n+\t.global\tfuncA\n+funcA:\n+\tadd\ta0, a0, a0\n+\tj\tfuncB\n+\t.global\tfuncB\n+funcB:\n+\tadd\ta1, a1, a1\n+\tbne\ta0, a1, funcB\n+\n+\t.data\n+\t.word 0x123456\n+\n+\t.section\t.foo, \"ax\"\n+foo:\n+\tadd\ta2, a2, a2"
    },
    {
      "sha": "32e0027a13dd879ea7ef9b068e23ab83e6d67fbe",
      "filename": "gas/testsuite/gas/riscv/mapping-01a.d",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-01a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-01a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-01a.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,17 @@\n+#as:\n+#source: mapping-01.s\n+#objdump: --syms --special-syms\n+\n+.*file format.*riscv.*\n+\n+SYMBOL TABLE:\n+0+00 l    d  .text\t0+00 .text\n+0+00 l    d  .data\t0+00 .data\n+0+00 l    d  .bss\t0+00 .bss\n+0+00 l       .text\t0+00 \\$x\n+0+00 l    d  .foo\t0+00 .foo\n+0+00 l       .foo\t0+00 foo\n+0+00 l       .foo\t0+00 \\$x\n+0+00 l    d  .riscv.attributes\t0+00 .riscv.attributes\n+0+00 g       .text\t0+00 funcA\n+0+08 g       .text\t0+00 funcB"
    },
    {
      "sha": "e84b3d608f535e547cd4a1b167d54fb5a89aa457",
      "filename": "gas/testsuite/gas/riscv/mapping-01b.d",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-01b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-01b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-01b.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,21 @@\n+#as:\n+#source: mapping-01.s\n+#objdump: -d\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <funcA>:\n+[ \t]+0:[ \t]+00a50533[ \t]+add[ \t]+a0,a0,a0\n+[ \t]+4:[ \t]+0040006f[ \t]+j[ \t]+8 <funcB>\n+\n+0+008 <funcB>:\n+[ \t]+8:[ \t]+00b585b3[ \t]+add[ \t]+a1,a1,a1\n+[ \t]+c:[ \t]+feb51ee3[ \t]+bne[ \t]+a0,a1,8 <funcB>\n+\n+Disassembly of section .foo:\n+\n+0+000 <foo>:\n+[ \t]+0:[ \t]+00c60633[ \t]+add[ \t]+a2,a2,a2"
    },
    {
      "sha": "f8306d0643e55ebdcf6aa98257e8456daf14d9fb",
      "filename": "gas/testsuite/gas/riscv/mapping-02.s",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-02.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-02.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-02.s?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,12 @@\n+\t.option norvc\n+\t.text\n+\t.word\t1\n+\tadd\ta0, a0, a0\n+\n+\t.data\n+\t.word\t2\n+\n+\t.text\n+\tadd\ta1, a1, a1\n+\t.short\t3\n+\tadd\ta2, a2, a2"
    },
    {
      "sha": "333f12cd343208e02a1968a6fc9fdbfb9a540cf1",
      "filename": "gas/testsuite/gas/riscv/mapping-02a.d",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-02a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-02a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-02a.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,15 @@\n+#as:\n+#source: mapping-02.s\n+#objdump: --syms --special-syms\n+\n+.*file format.*riscv.*\n+\n+SYMBOL TABLE:\n+0+00 l    d  .text\t0+00 .text\n+0+00 l    d  .data\t0+00 .data\n+0+00 l    d  .bss\t0+00 .bss\n+0+00 l       .text\t0+00 \\$d\n+0+04 l       .text\t0+00 \\$x\n+0+0c l       .text\t0+00 \\$d\n+0+0e l       .text\t0+00 \\$x\n+0+00 l    d  .riscv.attributes\t0+00 .riscv.attributes"
    },
    {
      "sha": "1ed6c081cf7d62674a2b6786556a852e32b9d077",
      "filename": "gas/testsuite/gas/riscv/mapping-02b.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-02b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-02b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-02b.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,16 @@\n+#as:\n+#source: mapping-02.s\n+#objdump: -d\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <.text>:\n+[ \t]+0:[ \t]+00000001[ \t]+.word[ \t]+0x00000001\n+[ \t]+4:[ \t]+00a50533[ \t]+add[ \t]+a0,a0,a0\n+[ \t]+8:[ \t]+00b585b3[ \t]+add[ \t]+a1,a1,a1\n+[ \t]+c:[ \t]+0003[ \t]+.short[ \t]+0x0003\n+[ \t]+e:[ \t]+00c60633[ \t]+add[ \t]+a2,a2,a2\n+#..."
    },
    {
      "sha": "a099eacc7f756cc93a45999c469bed5640d0bed3",
      "filename": "gas/testsuite/gas/riscv/mapping-03.s",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-03.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-03.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-03.s?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,11 @@\n+\t.option norvc\n+\t.text\n+\tadd\ta0, a0, a0\n+\t.long\t0\n+\t.balign\t16\n+\t.word\t1\n+\tadd\ta1, a1, a1\n+\t.byte\t2\n+\t.long\t3\n+\t.balign\t16\n+\t.word\t5"
    },
    {
      "sha": "d3663b663aa6f263f3a97114faad4c5a9a8f0282",
      "filename": "gas/testsuite/gas/riscv/mapping-03a.d",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-03a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-03a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-03a.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,20 @@\n+#as:\n+#source: mapping-03.s\n+#objdump: --syms --special-syms\n+\n+.*file format.*riscv.*\n+\n+SYMBOL TABLE:\n+0+00 l    d  .text\t0+00 .text\n+0+00 l    d  .data\t0+00 .data\n+0+00 l    d  .bss\t0+00 .bss\n+0+00 l       .text\t0+00 \\$x\n+0+04 l       .text\t0+00 \\$d\n+0+08 l       .text\t0+00 \\$x\n+0+14 l       .text\t0+00 \\$d\n+0+18 l       .text\t0+00 \\$x\n+0+1c l       .text\t0+00 \\$d\n+0+21 l       .text\t0+00 \\$x\n+0+2d l       .text\t0+00 \\$d\n+0+31 l       .text\t0+00 \\$x\n+0+00 l    d  .riscv.attributes\t0+00 .riscv.attributes"
    },
    {
      "sha": "f4f672699813958b59eab8e6c6c71a75035c2310",
      "filename": "gas/testsuite/gas/riscv/mapping-03b.d",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-03b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-03b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-03b.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,24 @@\n+#as:\n+#source: mapping-03.s\n+#objdump: -d\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <.text>:\n+[ \t]+0:[ \t]+00a50533[ \t]+add[ \t]+a0,a0,a0\n+[ \t]+4:[ \t]+00000000[ \t]+.word[ \t]+0x00000000\n+[ \t]+8:[ \t]+00000013[ \t]+nop\n+[ \t]+c:[ \t]+00000013[ \t]+nop\n+[ \t]+10:[ \t]+00000013[ \t]+nop\n+[ \t]+14:[ \t]+00000001[ \t]+.word[ \t]+0x00000001\n+[ \t]+18:[ \t]+00b585b3[ \t]+add[ \t]+a1,a1,a1\n+[ \t]+1c:[ \t]+00000302[ \t]+.word[ \t]+0x00000302\n+[ \t]+20:[ \t]+00[ \t]+.byte[ \t]+0x00\n+[ \t]+21:[ \t]+00000013[ \t]+nop\n+[ \t]+25:[ \t]+00000013[ \t]+nop\n+[ \t]+29:[ \t]+00000013[ \t]+nop\n+[ \t]+2d:[ \t]+00000005[ \t]+.word[ \t]+0x00000005\n+#..."
    },
    {
      "sha": "c597495b9152c317a2d9995586569235a0768564",
      "filename": "gas/testsuite/gas/riscv/mapping-04.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-04.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-04.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-04.s?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,13 @@\n+\t.text\n+\t.option\tnorvc\n+\t.fill\t2, 4, 0x1001\n+\t.byte\t1\n+\t.word\t0\n+\t.balign\t8\n+\tadd\ta0, a0, a0\n+\t.fill\t5, 2, 0x2002\n+\tadd\ta1, a1, a1\n+\n+\t.data\n+\t.word\t0x1\n+\t.word\t0x2"
    },
    {
      "sha": "1ae9653212b81ac0ae2a7fee1bcd10946dca185b",
      "filename": "gas/testsuite/gas/riscv/mapping-04a.d",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-04a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-04a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-04a.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,15 @@\n+#as:\n+#source: mapping-04.s\n+#objdump: --syms --special-syms\n+\n+.*file format.*riscv.*\n+\n+SYMBOL TABLE:\n+0+00 l    d  .text\t0+00 .text\n+0+00 l    d  .data\t0+00 .data\n+0+00 l    d  .bss\t0+00 .bss\n+0+00 l       .text\t0+00 \\$d\n+0+0d l       .text\t0+00 \\$x\n+0+15 l       .text\t0+00 \\$d\n+0+1f l       .text\t0+00 \\$x\n+0+00 l    d  .riscv.attributes\t0+00 .riscv.attributes"
    },
    {
      "sha": "97354989e840baf856ada58c21c03da6706afc28",
      "filename": "gas/testsuite/gas/riscv/mapping-04b.d",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-04b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-04b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-04b.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,23 @@\n+#as:\n+#source: mapping-04.s\n+#objdump: -d\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <.text>:\n+[ \t]+0:[ \t]+00001001[ \t]+.word[ \t]+0x00001001\n+[ \t]+4:[ \t]+00001001[ \t]+.word[ \t]+0x00001001\n+[ \t]+8:[ \t]+00000001[ \t]+.word[ \t]+0x00000001\n+[ \t]+c:[ \t]+00[ \t]+.byte[ \t]+0x00\n+[ \t]+d:[ \t]+00000013[ \t]+nop\n+[ \t]+11:[ \t]+00a50533[ \t]+add[ \t]+a0,a0,a0\n+[ \t]+15:[ \t]+20022002[ \t]+.word[ \t]+0x20022002\n+[ \t]+19:[ \t]+20022002[ \t]+.word[ \t]+0x20022002\n+[ \t]+1d:[ \t]+2002[ \t]+.short[ \t]+0x2002\n+[ \t]+1f:[ \t]+00b585b3[ \t]+add[ \t]+a1,a1,a1\n+[ \t]+23:[ \t]+0000[ \t]+unimp\n+[ \t]+25:[ \t]+0000[ \t]+unimp\n+#..."
    },
    {
      "sha": "916f732b7f7e4042d400a329b0b9112e7706ad76",
      "filename": "gas/testsuite/gas/riscv/mapping-norelax-03a.d",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-norelax-03a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-norelax-03a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-norelax-03a.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,21 @@\n+#as: -mno-relax\n+#source: mapping-03.s\n+#objdump: --syms --special-syms\n+\n+.*file format.*riscv.*\n+\n+SYMBOL TABLE:\n+0+00 l    d  .text\t0+00 .text\n+0+00 l    d  .data\t0+00 .data\n+0+00 l    d  .bss\t0+00 .bss\n+0+00 l       .text\t0+00 \\$x\n+0+04 l       .text\t0+00 \\$d\n+0+08 l       .text\t0+00 \\$x\n+0+10 l       .text\t0+00 \\$d\n+0+14 l       .text\t0+00 \\$x\n+0+18 l       .text\t0+00 \\$d\n+0+20 l       .text\t0+00 \\$d\n+0+24 l       .text\t0+00 \\$x\n+0+1d l       .text\t0+00 \\$d\n+0+1e l       .text\t0+00 \\$x\n+0+00 l    d  .riscv.attributes\t0+00 .riscv.attributes"
    },
    {
      "sha": "ad88888d266b5c2bc0d39736cbc372256befb060",
      "filename": "gas/testsuite/gas/riscv/mapping-norelax-03b.d",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-norelax-03b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-norelax-03b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-norelax-03b.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,25 @@\n+#as: -mno-relax\n+#source: mapping-03.s\n+#objdump: -d\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <.text>:\n+[ \t]+0:[ \t]+00a50533[ \t]+add[ \t]+a0,a0,a0\n+[ \t]+4:[ \t]+00000000[ \t]+.word[ \t]+0x00000000\n+[ \t]+8:[ \t]+00000013[ \t]+nop\n+[ \t]+c:[ \t]+00000013[ \t]+nop\n+[ \t]+10:[ \t]+00000001[ \t]+.word[ \t]+0x00000001\n+[ \t]+14:[ \t]+00b585b3[ \t]+add[ \t]+a1,a1,a1\n+[ \t]+18:[ \t]+00000302[ \t]+.word[ \t]+0x00000302\n+[ \t]+1c:[ \t]+00[ \t]+.byte[ \t]+0x00\n+[ \t]+1d:[ \t]+00[ \t]+.byte[ \t]+0x00\n+[ \t]+1e:[ \t]+0001[ \t]+nop\n+[ \t]+20:[ \t]+00000005[ \t]+.word[ \t]+0x00000005\n+[ \t]+24:[ \t]+00000013[ \t]+nop\n+[ \t]+28:[ \t]+00000013[ \t]+nop\n+[ \t]+2c:[ \t]+00000013[ \t]+nop\n+#..."
    },
    {
      "sha": "d552a7f632a1ac9639dc466f6b4ec14bdc1cc059",
      "filename": "gas/testsuite/gas/riscv/mapping-norelax-04a.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-norelax-04a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-norelax-04a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-norelax-04a.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,16 @@\n+#as: -mno-relax\n+#source: mapping-04.s\n+#objdump: --syms --special-syms\n+\n+.*file format.*riscv.*\n+\n+SYMBOL TABLE:\n+0+00 l    d  .text\t0+00 .text\n+0+00 l    d  .data\t0+00 .data\n+0+00 l    d  .bss\t0+00 .bss\n+0+00 l       .text\t0+00 \\$d\n+0+14 l       .text\t0+00 \\$d\n+0+1e l       .text\t0+00 \\$x\n+0+0d l       .text\t0+00 \\$d\n+0+0e l       .text\t0+00 \\$x\n+0+00 l    d  .riscv.attributes\t0+00 .riscv.attributes"
    },
    {
      "sha": "824a898419fbeba7ff5888a2a3ed0a97636bc483",
      "filename": "gas/testsuite/gas/riscv/mapping-norelax-04b.d",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-norelax-04b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/mapping-norelax-04b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/mapping-norelax-04b.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -0,0 +1,24 @@\n+#as: -mno-relax\n+#source: mapping-04.s\n+#objdump: -d\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section .text:\n+\n+0+000 <.text>:\n+[ \t]+0:[ \t]+00001001[ \t]+.word[ \t]+0x00001001\n+[ \t]+4:[ \t]+00001001[ \t]+.word[ \t]+0x00001001\n+[ \t]+8:[ \t]+00000001[ \t]+.word[ \t]+0x00000001\n+[ \t]+c:[ \t]+00[ \t]+.byte[ \t]+0x00\n+[ \t]+d:[ \t]+00[ \t]+.byte[ \t]+0x00\n+[ \t]+e:[ \t]+0001[ \t]+nop\n+[ \t]+10:[ \t]+00a50533[ \t]+add[ \t]+a0,a0,a0\n+[ \t]+14:[ \t]+20022002[ \t]+.word[ \t]+0x20022002\n+[ \t]+18:[ \t]+20022002[ \t]+.word[ \t]+0x20022002\n+[ \t]+1c:[ \t]+2002[ \t]+.short[ \t]+0x2002\n+[ \t]+1e:[ \t]+00b585b3[ \t]+add[ \t]+a1,a1,a1\n+[ \t]+22:[ \t]+0001[ \t]+nop\n+[ \t]+24:[ \t]+00000013[ \t]+nop\n+#..."
    },
    {
      "sha": "19edf137ba8ae8de4e03488cff3e294420d00d24",
      "filename": "gas/testsuite/gas/riscv/no-relax-align-2.d",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/no-relax-align-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/gas/testsuite/gas/riscv/no-relax-align-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/no-relax-align-2.d?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -7,7 +7,8 @@\n Disassembly of section .text:\n \n 0+000 <.text>:\n-[ \t]+0:[ \t]+0000[ \t]+unimp\n+[ \t]+0:[ \t]+00[ \t]+.byte[ \t]+0x00\n+[ \t]+1:[ \t]+00[ \t]+.byte[ \t]+0x00\n [ \t]+2:[ \t]+0001[ \t]+nop\n [ \t]+4:[ \t]+00000013[ \t]+nop\n [ \t]+8:[ \t]+00000013[ \t]+nop"
    },
    {
      "sha": "a8f47419f750cee756d1312601924a340a86a156",
      "filename": "include/opcode/riscv.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/include/opcode/riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/include/opcode/riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/riscv.h?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -425,6 +425,13 @@ enum\n   M_NUM_MACROS\n };\n \n+/* The mapping symbol states.  */\n+enum riscv_seg_mstate\n+{\n+  MAP_NONE = 0,\t\t/* Must be zero, for seginfo in new sections.  */\n+  MAP_DATA,\t\t/* Data.  */\n+  MAP_INSN,\t\t/* Instructions.  */\n+};\n \n extern const char * const riscv_gpr_names_numeric[NGPR];\n extern const char * const riscv_gpr_names_abi[NGPR];"
    },
    {
      "sha": "30b42ef3aec771ca4b2ed3f969e0e3b76e131454",
      "filename": "opcodes/riscv-dis.c",
      "status": "modified",
      "additions": 233,
      "deletions": 12,
      "changes": 245,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/opcodes/riscv-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b9b1092f0a8e6b7d240ea05a74968a883b8a05c/opcodes/riscv-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-dis.c?ref=9b9b1092f0a8e6b7d240ea05a74968a883b8a05c",
      "patch": "@@ -41,6 +41,11 @@ struct riscv_private_data\n   bfd_vma hi_addr[OP_MASK_RD + 1];\n };\n \n+/* Used for mapping symbols.  */\n+static int last_map_symbol = -1;\n+static bfd_vma last_stop_offset = 0;\n+enum riscv_seg_mstate last_map_state;\n+\n static const char * const *riscv_gpr_names;\n static const char * const *riscv_fpr_names;\n \n@@ -556,13 +561,209 @@ riscv_disassemble_insn (bfd_vma memaddr, insn_t word, disassemble_info *info)\n   return insnlen;\n }\n \n+/* Return true if we find the suitable mapping symbol,\n+   and also update the STATE.  Otherwise, return false.  */\n+\n+static bool\n+riscv_get_map_state (int n,\n+\t\t     enum riscv_seg_mstate *state,\n+\t\t     struct disassemble_info *info)\n+{\n+  const char *name;\n+\n+  /* If the symbol is in a different section, ignore it.  */\n+  if (info->section != NULL\n+      && info->section != info->symtab[n]->section)\n+    return false;\n+\n+  name = bfd_asymbol_name(info->symtab[n]);\n+  if (strcmp (name, \"$x\") == 0)\n+    *state = MAP_INSN;\n+  else if (strcmp (name, \"$d\") == 0)\n+    *state = MAP_DATA;\n+  else\n+    return false;\n+\n+  return true;\n+}\n+\n+/* Check the sorted symbol table (sorted by the symbol value), find the\n+   suitable mapping symbols.  */\n+\n+static enum riscv_seg_mstate\n+riscv_search_mapping_symbol (bfd_vma memaddr,\n+\t\t\t     struct disassemble_info *info)\n+{\n+  enum riscv_seg_mstate mstate;\n+  bool from_last_map_symbol;\n+  bool found = false;\n+  int symbol = -1;\n+  int n;\n+\n+  /* Decide whether to print the data or instruction by default, in case\n+     we can not find the corresponding mapping symbols.  */\n+  mstate = MAP_DATA;\n+  if ((info->section\n+       && info->section->flags & SEC_CODE)\n+      || !info->section)\n+    mstate = MAP_INSN;\n+\n+  if (info->symtab_size == 0\n+      || bfd_asymbol_flavour (*info->symtab) != bfd_target_elf_flavour)\n+    return mstate;\n+\n+  /* Reset the last_map_symbol if we start to dump a new section.  */\n+  if (memaddr <= 0)\n+    last_map_symbol = -1;\n+\n+  /* If the last stop offset is different from the current one, then\n+     don't use the last_map_symbol to search.  We usually reset the\n+     info->stop_offset when handling a new section.  */\n+  from_last_map_symbol = (last_map_symbol >= 0\n+\t\t\t  && info->stop_offset == last_stop_offset);\n+\n+  /* Start scanning at the start of the function, or wherever\n+     we finished last time.  */\n+  n = info->symtab_pos + 1;\n+  if (from_last_map_symbol && n >= last_map_symbol)\n+    n = last_map_symbol;\n+\n+  /* Find the suitable mapping symbol to dump.  */\n+  for (; n < info->symtab_size; n++)\n+    {\n+      bfd_vma addr = bfd_asymbol_value (info->symtab[n]);\n+      /* We have searched all possible symbols in the range.  */\n+      if (addr > memaddr)\n+\tbreak;\n+      if (riscv_get_map_state (n, &mstate, info))\n+\t{\n+\t  symbol = n;\n+\t  found = true;\n+\t  /* Do not stop searching, in case there are some mapping\n+\t     symbols have the same value, but have different names.\n+\t     Use the last one.  */\n+\t}\n+    }\n+\n+  /* We can not find the suitable mapping symbol above.  Therefore, we\n+     look forwards and try to find it again, but don't go pass the start\n+     of the section.  Otherwise a data section without mapping symbols\n+     can pick up a text mapping symbol of a preceeding section.  */\n+  if (!found)\n+    {\n+      n = info->symtab_pos;\n+      if (from_last_map_symbol && n >= last_map_symbol)\n+\tn = last_map_symbol;\n+\n+      for (; n >= 0; n--)\n+\t{\n+\t  bfd_vma addr = bfd_asymbol_value (info->symtab[n]);\n+\t  /* We have searched all possible symbols in the range.  */\n+\t  if (addr < (info->section ? info->section->vma : 0))\n+\t    break;\n+\t  /* Stop searching once we find the closed mapping symbol.  */\n+\t  if (riscv_get_map_state (n, &mstate, info))\n+\t    {\n+\t      symbol = n;\n+\t      found = true;\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  /* Save the information for next use.  */\n+  last_map_symbol = symbol;\n+  last_stop_offset = info->stop_offset;\n+\n+  return mstate;\n+}\n+\n+/* Decide which data size we should print.  */\n+\n+static bfd_vma\n+riscv_data_length (bfd_vma memaddr,\n+\t\t   disassemble_info *info)\n+{\n+  bfd_vma length;\n+  bool found = false;\n+\n+  length = 4;\n+  if (info->symtab_size != 0\n+      && bfd_asymbol_flavour (*info->symtab) == bfd_target_elf_flavour\n+      && last_map_symbol >= 0)\n+    {\n+      int n;\n+      enum riscv_seg_mstate m = MAP_NONE;\n+      for (n = last_map_symbol + 1; n < info->symtab_size; n++)\n+\t{\n+\t  bfd_vma addr = bfd_asymbol_value (info->symtab[n]);\n+\t  if (addr > memaddr\n+\t      && riscv_get_map_state (n, &m, info))\n+\t    {\n+\t      if (addr - memaddr < length)\n+\t\tlength = addr - memaddr;\n+\t      found = true;\n+\t      break;\n+\t    }\n+\t}\n+    }\n+  if (!found)\n+    {\n+      /* Do not set the length which exceeds the section size.  */\n+      bfd_vma offset = info->section->vma + info->section->size;\n+      offset -= memaddr;\n+      length = (offset < length) ? offset : length;\n+    }\n+  length = length == 3 ? 2 : length;\n+  return length;\n+}\n+\n+/* Dump the data contents.  */\n+\n+static int\n+riscv_disassemble_data (bfd_vma memaddr ATTRIBUTE_UNUSED,\n+\t\t\tinsn_t data,\n+\t\t\tdisassemble_info *info)\n+{\n+  info->display_endian = info->endian;\n+\n+  switch (info->bytes_per_chunk)\n+    {\n+    case 1:\n+      info->bytes_per_line = 6;\n+      (*info->fprintf_func) (info->stream, \".byte\\t0x%02llx\",\n+\t\t\t     (unsigned long long) data);\n+      break;\n+    case 2:\n+      info->bytes_per_line = 8;\n+      (*info->fprintf_func) (info->stream, \".short\\t0x%04llx\",\n+\t\t\t     (unsigned long long) data);\n+      break;\n+    case 4:\n+      info->bytes_per_line = 8;\n+      (*info->fprintf_func) (info->stream, \".word\\t0x%08llx\",\n+\t\t\t     (unsigned long long) data);\n+      break;\n+    case 8:\n+      info->bytes_per_line = 8;\n+      (*info->fprintf_func) (info->stream, \".dword\\t0x%016llx\",\n+\t\t\t     (unsigned long long) data);\n+      break;\n+    default:\n+      abort ();\n+    }\n+  return info->bytes_per_chunk;\n+}\n+\n int\n print_insn_riscv (bfd_vma memaddr, struct disassemble_info *info)\n {\n-  bfd_byte packet[2];\n+  bfd_byte packet[8];\n   insn_t insn = 0;\n-  bfd_vma n;\n+  bfd_vma dump_size;\n   int status;\n+  enum riscv_seg_mstate mstate;\n+  int (*riscv_disassembler) (bfd_vma, insn_t, struct disassemble_info *);\n \n   if (info->disassembler_options != NULL)\n     {\n@@ -573,23 +774,42 @@ print_insn_riscv (bfd_vma memaddr, struct disassemble_info *info)\n   else if (riscv_gpr_names == NULL)\n     set_default_riscv_dis_options ();\n \n-  /* Instructions are a sequence of 2-byte packets in little-endian order.  */\n-  for (n = 0; n < sizeof (insn) && n < riscv_insn_length (insn); n += 2)\n+  mstate = riscv_search_mapping_symbol (memaddr, info);\n+  /* Save the last mapping state.  */\n+  last_map_state = mstate;\n+\n+  /* Set the size to dump.  */\n+  if (mstate == MAP_DATA\n+      && (info->flags & DISASSEMBLE_DATA) == 0)\n+    {\n+      dump_size = riscv_data_length (memaddr, info);\n+      info->bytes_per_chunk = dump_size;\n+      riscv_disassembler = riscv_disassemble_data;\n+    }\n+  else\n     {\n-      status = (*info->read_memory_func) (memaddr + n, packet, 2, info);\n+      /* Get the first 2-bytes to check the lenghth of instruction.  */\n+      status = (*info->read_memory_func) (memaddr, packet, 2, info);\n       if (status != 0)\n \t{\n-\t  /* Don't fail just because we fell off the end.  */\n-\t  if (n > 0)\n-\t    break;\n \t  (*info->memory_error_func) (status, memaddr, info);\n-\t  return status;\n+\t  return 1;\n \t}\n+      insn = (insn_t) bfd_getl16 (packet);\n+      dump_size = riscv_insn_length (insn);\n+      riscv_disassembler = riscv_disassemble_insn;\n+    }\n \n-      insn |= ((insn_t) bfd_getl16 (packet)) << (8 * n);\n+  /* Fetch the instruction to dump.  */\n+  status = (*info->read_memory_func) (memaddr, packet, dump_size, info);\n+  if (status != 0)\n+    {\n+      (*info->memory_error_func) (status, memaddr, info);\n+      return 1;\n     }\n+  insn = (insn_t) bfd_get_bits (packet, dump_size * 8, false);\n \n-  return riscv_disassemble_insn (memaddr, insn, info);\n+  return (*riscv_disassembler) (memaddr, insn, info);\n }\n \n disassembler_ftype\n@@ -631,7 +851,8 @@ riscv_symbol_is_valid (asymbol * sym,\n \n   name = bfd_asymbol_name (sym);\n \n-  return (strcmp (name, RISCV_FAKE_LABEL_NAME) != 0);\n+  return (strcmp (name, RISCV_FAKE_LABEL_NAME) != 0\n+\t  && !riscv_elf_is_mapping_symbols (name));\n }\n \n void"
    }
  ]
}