{
  "sha": "b60cea74de13b944ad7d40c315f61f5e6bc2a932",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjYwY2VhNzRkZTEzYjk0NGFkN2Q0MGMzMTVmNjFmNWU2YmMyYTkzMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-09-18T20:20:44Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-09-18T20:20:44Z"
    },
    "message": "Make target_wait options use enum flags\n\nThis changes TARGET_WNOHANG to be a member of an enum, rather than a\ndefine, and also adds a DEF_ENUM_FLAGS_TYPE for this type.  Then, it\nchanges target_wait and the various target wait methods to use this\ntype rather than \"int\".\n\nThis didn't catch any bugs, but it seems like a decent cleanup\nnevertheless.\n\nI did not change deprecated_target_wait_hook, since that's only used\nout-of-tree (by Insight), and there didn't seem to be a need.\n\nI can't build some of these targets, so I modified them on a\nbest-effort basis.  I don't think this patch should go in before the\nrelease branch is made.\n\ngdb/ChangeLog\n2020-09-18  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (struct windows_nat_target) <wait>: Update.\n\t(windows_nat_target::wait): Update.\n\t* target/wait.h (enum target_wait_flag): New.  Use\n\tDEF_ENUM_FLAGS_TYPE.\n\t* target/target.h (target_wait): Change type of options.\n\t* target.h (target_options_to_string, default_target_wait):\n\tUpdate.\n\t(struct target_ops) <wait>: Change type of options.\n\t* target.c (target_wait, default_target_wait, do_option): Change\n\ttype of \"options\".\n\t(target_options_to_string): Likewise.\n\t* target-delegates.c: Rebuild.\n\t* target-debug.h (target_debug_print_target_wait_flags): Rename\n\tfrom target_debug_print_options.\n\t* sol-thread.c (class sol_thread_target) <wait>: Update.\n\t(sol_thread_target::wait): Update.\n\t* rs6000-nat.c (class rs6000_nat_target) <wait>: Update.\n\t(rs6000_nat_target::wait): Update.\n\t* remote.c (class remote_target) <wait, wait_ns, wait_as>:\n\tUpdate.\n\t(remote_target::wait_ns, remote_target::wait_as): Change type of\n\t\"options\".\n\t(remote_target::wait): Update.\n\t* remote-sim.c (struct gdbsim_target) <wait>: Update.\n\t(gdbsim_target::wait): Update.\n\t* record-full.c (class record_full_base_target) <wait>: Update.\n\t(record_full_wait_1): Change type of \"options\".\n\t(record_full_base_target::wait): Update.\n\t* record-btrace.c (class record_btrace_target) <wait>: Update.\n\t(record_btrace_target::wait): Update.\n\t* ravenscar-thread.c (struct ravenscar_thread_target) <wait>:\n\tUpdate.\n\t(ravenscar_thread_target::wait): Update.\n\t* procfs.c (class procfs_target) <wait>: Update.\n\t(procfs_target::wait): Update.\n\t* obsd-nat.h (class obsd_nat_target) <wait>: Update.\n\t* obsd-nat.c (obsd_nat_target::wait): Update.\n\t* nto-procfs.c (struct nto_procfs_target) <wait>: Update.\n\t(nto_procfs_target::wait): Update.\n\t* nbsd-nat.h (struct nbsd_nat_target) <wait>: Update.\n\t* nbsd-nat.c (nbsd_wait): Change type of \"options\".\n\t(nbsd_nat_target::wait): Update.\n\t* linux-thread-db.c (class thread_db_target) <wait>: Update.\n\t(thread_db_target::wait): Update.\n\t* linux-nat.h (class linux_nat_target) <wait>: Update.\n\t* linux-nat.c (linux_nat_target::wait): Update.\n\t(linux_nat_wait_1): Update.\n\t* infrun.c (do_target_wait_1, do_target_wait): Change type of\n\t\"options\".\n\t* inf-ptrace.h (struct inf_ptrace_target) <wait>: Update.\n\t* inf-ptrace.c (inf_ptrace_target::wait): Update.\n\t* go32-nat.c (struct go32_nat_target) <wait>: Update.\n\t(go32_nat_target::wait): Update.\n\t* gnu-nat.h (struct gnu_nat_target) <wait>: Update.\n\t* gnu-nat.c (gnu_nat_target::wait): Update.\n\t* fbsd-nat.h (class fbsd_nat_target) <wait>: Update.\n\t* fbsd-nat.c (fbsd_nat_target::wait): Update.\n\t* darwin-nat.h (class darwin_nat_target) <wait>: Update.\n\t* darwin-nat.c (darwin_nat_target::wait): Update.\n\t* bsd-uthread.c (struct bsd_uthread_target) <wait>: Update.\n\t(bsd_uthread_target::wait): Update.\n\t* aix-thread.c (class aix_thread_target) <wait>: Update.\n\t(aix_thread_target::wait): Update.\n\ngdbserver/ChangeLog\n2020-09-18  Tom Tromey  <tromey@adacore.com>\n\n\t* netbsd-low.h (class netbsd_process_target) <wait>: Update.\n\t* netbsd-low.cc (netbsd_waitpid, netbsd_wait)\n\t(netbsd_process_target::wait): Change type of target_options.\n\t* win32-low.h (class win32_process_target) <wait>: Update.\n\t* win32-low.cc (win32_process_target::wait): Update.\n\t* target.h (class process_stratum_target) <wait>: Update.\n\t(mywait): Update.\n\t* target.cc (mywait, target_wait): Change type of \"options\".\n\t* linux-low.h (class linux_process_target) <wait, wait_1>:\n\tUpdate.\n\t* linux-low.cc (linux_process_target::wait)\n\t(linux_process_target::wait_1): Update.",
    "tree": {
      "sha": "8cf6ba183646cf0bdeac4d20f9df5b1ae7727fbb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8cf6ba183646cf0bdeac4d20f9df5b1ae7727fbb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b60cea74de13b944ad7d40c315f61f5e6bc2a932",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b60cea74de13b944ad7d40c315f61f5e6bc2a932",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b60cea74de13b944ad7d40c315f61f5e6bc2a932",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b60cea74de13b944ad7d40c315f61f5e6bc2a932/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0295dde6551b898295bd6a2ef7dab425643c4c1e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0295dde6551b898295bd6a2ef7dab425643c4c1e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0295dde6551b898295bd6a2ef7dab425643c4c1e"
    }
  ],
  "stats": {
    "total": 277,
    "additions": 189,
    "deletions": 88
  },
  "files": [
    {
      "sha": "a052d4f5e50e92752bc3fb2aeb09eb67a5399654",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 66,
      "deletions": 0,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -1,3 +1,69 @@\n+2020-09-18  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (struct windows_nat_target) <wait>: Update.\n+\t(windows_nat_target::wait): Update.\n+\t* target/wait.h (enum target_wait_flag): New.  Use\n+\tDEF_ENUM_FLAGS_TYPE.\n+\t* target/target.h (target_wait): Change type of options.\n+\t* target.h (target_options_to_string, default_target_wait):\n+\tUpdate.\n+\t(struct target_ops) <wait>: Change type of options.\n+\t* target.c (target_wait, default_target_wait, do_option): Change\n+\ttype of \"options\".\n+\t(target_options_to_string): Likewise.\n+\t* target-delegates.c: Rebuild.\n+\t* target-debug.h (target_debug_print_target_wait_flags): Rename\n+\tfrom target_debug_print_options.\n+\t* sol-thread.c (class sol_thread_target) <wait>: Update.\n+\t(sol_thread_target::wait): Update.\n+\t* rs6000-nat.c (class rs6000_nat_target) <wait>: Update.\n+\t(rs6000_nat_target::wait): Update.\n+\t* remote.c (class remote_target) <wait, wait_ns, wait_as>:\n+\tUpdate.\n+\t(remote_target::wait_ns, remote_target::wait_as): Change type of\n+\t\"options\".\n+\t(remote_target::wait): Update.\n+\t* remote-sim.c (struct gdbsim_target) <wait>: Update.\n+\t(gdbsim_target::wait): Update.\n+\t* record-full.c (class record_full_base_target) <wait>: Update.\n+\t(record_full_wait_1): Change type of \"options\".\n+\t(record_full_base_target::wait): Update.\n+\t* record-btrace.c (class record_btrace_target) <wait>: Update.\n+\t(record_btrace_target::wait): Update.\n+\t* ravenscar-thread.c (struct ravenscar_thread_target) <wait>:\n+\tUpdate.\n+\t(ravenscar_thread_target::wait): Update.\n+\t* procfs.c (class procfs_target) <wait>: Update.\n+\t(procfs_target::wait): Update.\n+\t* obsd-nat.h (class obsd_nat_target) <wait>: Update.\n+\t* obsd-nat.c (obsd_nat_target::wait): Update.\n+\t* nto-procfs.c (struct nto_procfs_target) <wait>: Update.\n+\t(nto_procfs_target::wait): Update.\n+\t* nbsd-nat.h (struct nbsd_nat_target) <wait>: Update.\n+\t* nbsd-nat.c (nbsd_wait): Change type of \"options\".\n+\t(nbsd_nat_target::wait): Update.\n+\t* linux-thread-db.c (class thread_db_target) <wait>: Update.\n+\t(thread_db_target::wait): Update.\n+\t* linux-nat.h (class linux_nat_target) <wait>: Update.\n+\t* linux-nat.c (linux_nat_target::wait): Update.\n+\t(linux_nat_wait_1): Update.\n+\t* infrun.c (do_target_wait_1, do_target_wait): Change type of\n+\t\"options\".\n+\t* inf-ptrace.h (struct inf_ptrace_target) <wait>: Update.\n+\t* inf-ptrace.c (inf_ptrace_target::wait): Update.\n+\t* go32-nat.c (struct go32_nat_target) <wait>: Update.\n+\t(go32_nat_target::wait): Update.\n+\t* gnu-nat.h (struct gnu_nat_target) <wait>: Update.\n+\t* gnu-nat.c (gnu_nat_target::wait): Update.\n+\t* fbsd-nat.h (class fbsd_nat_target) <wait>: Update.\n+\t* fbsd-nat.c (fbsd_nat_target::wait): Update.\n+\t* darwin-nat.h (class darwin_nat_target) <wait>: Update.\n+\t* darwin-nat.c (darwin_nat_target::wait): Update.\n+\t* bsd-uthread.c (struct bsd_uthread_target) <wait>: Update.\n+\t(bsd_uthread_target::wait): Update.\n+\t* aix-thread.c (class aix_thread_target) <wait>: Update.\n+\t(aix_thread_target::wait): Update.\n+\n 2020-09-18  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* compile/compile-object-run.c (create_copied_type_recursive): New"
    },
    {
      "sha": "ed30df5f3f626d8934bd59edc82a457db0fa0a11",
      "filename": "gdb/aix-thread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/aix-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/aix-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aix-thread.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -124,7 +124,7 @@ class aix_thread_target final : public target_ops\n \n   void detach (inferior *, int) override;\n   void resume (ptid_t, int, enum gdb_signal) override;\n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void fetch_registers (struct regcache *, int) override;\n   void store_registers (struct regcache *, int) override;\n@@ -1077,7 +1077,7 @@ aix_thread_target::resume (ptid_t ptid, int step, enum gdb_signal sig)\n \n ptid_t\n aix_thread_target::wait (ptid_t ptid, struct target_waitstatus *status,\n-\t\t\t int options)\n+\t\t\t target_wait_flags options)\n {\n   {\n     scoped_restore save_inferior_ptid = make_scoped_restore (&inferior_ptid);"
    },
    {
      "sha": "144e8b920fa9f62096d1f76d3e2c427f2d3f7310",
      "filename": "gdb/bsd-uthread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/bsd-uthread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/bsd-uthread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bsd-uthread.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -53,7 +53,7 @@ struct bsd_uthread_target final : public target_ops\n   void fetch_registers (struct regcache *, int) override;\n   void store_registers (struct regcache *, int) override;\n \n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n   void resume (ptid_t, int, enum gdb_signal) override;\n \n   bool thread_alive (ptid_t ptid) override;\n@@ -377,7 +377,7 @@ bsd_uthread_target::store_registers (struct regcache *regcache, int regnum)\n \n ptid_t\n bsd_uthread_target::wait (ptid_t ptid, struct target_waitstatus *status,\n-\t\t\t  int options)\n+\t\t\t  target_wait_flags options)\n {\n   enum bfd_endian byte_order = gdbarch_byte_order (target_gdbarch ());\n   CORE_ADDR addr;"
    },
    {
      "sha": "76d0fe87a85635899fac542cfd3b9409401f2c63",
      "filename": "gdb/darwin-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/darwin-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/darwin-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -1285,7 +1285,7 @@ darwin_nat_target::wait_1 (ptid_t ptid, struct target_waitstatus *status)\n \n ptid_t\n darwin_nat_target::wait (ptid_t ptid, struct target_waitstatus *status,\n-\t\t\t int options)\n+\t\t\t target_wait_flags options)\n {\n   return wait_1 (ptid, status);\n }"
    },
    {
      "sha": "8a84cdc83dd142ecb7e06e05dfe50fd6344eec2d",
      "filename": "gdb/darwin-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/darwin-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/darwin-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -86,7 +86,7 @@ class darwin_nat_target : public inf_child_target\n \n   void detach (inferior *, int) override;\n \n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void mourn_inferior () override;\n "
    },
    {
      "sha": "8a071e44a1fd97a3865eeeaf59d827efcf922668",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -1166,7 +1166,7 @@ fbsd_handle_debug_trap (fbsd_nat_target *target, ptid_t ptid,\n \n ptid_t\n fbsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t       int target_options)\n+\t\t       target_wait_flags target_options)\n {\n   ptid_t wptid;\n "
    },
    {
      "sha": "94824bd36550e597120e4c1c000b018c9b2fee7f",
      "filename": "gdb/fbsd-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/fbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/fbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -69,7 +69,7 @@ class fbsd_nat_target : public inf_ptrace_target\n \n   void resume (ptid_t, int, enum gdb_signal) override;\n \n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void post_startup_inferior (ptid_t) override;\n   void post_attach (int) override;"
    },
    {
      "sha": "32af0bf3192534704a83ce4adf62d555cbafc579",
      "filename": "gdb/gnu-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/gnu-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/gnu-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-nat.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -1436,7 +1436,7 @@ static struct inf *waiting_inf;\n \n ptid_t\n gnu_nat_target::wait (ptid_t ptid, struct target_waitstatus *status,\n-\t\t      int options)\n+\t\t      target_wait_flags options)\n {\n   struct msg\n     {"
    },
    {
      "sha": "28c08108265c94df267082b4696a2b550407e481",
      "filename": "gdb/gnu-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/gnu-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/gnu-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-nat.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -124,7 +124,7 @@ struct gnu_nat_target : public inf_child_target\n   void detach (inferior *, int) override;\n   void resume (ptid_t, int, enum gdb_signal) override;\n \n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n   enum target_xfer_status xfer_partial (enum target_object object,\n \t\t\t\t\tconst char *annex,\n \t\t\t\t\tgdb_byte *readbuf,"
    },
    {
      "sha": "4ea2dd8714fc15b1d6b46d5f7d75c74ae463f6d2",
      "filename": "gdb/go32-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/go32-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/go32-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go32-nat.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -342,7 +342,7 @@ struct go32_nat_target final : public x86_nat_target<inf_child_target>\n \n   void resume (ptid_t, int, enum gdb_signal) override;\n \n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void fetch_registers (struct regcache *, int) override;\n   void store_registers (struct regcache *, int) override;\n@@ -419,7 +419,7 @@ static char child_cwd[FILENAME_MAX];\n \n ptid_t\n go32_nat_target::wait (ptid_t ptid, struct target_waitstatus *status,\n-\t\t       int options)\n+\t\t       target_wait_flags options)\n {\n   int i;\n   unsigned char saved_opcode;"
    },
    {
      "sha": "d5a062163c7aabb028ab28c0b392cc9ab5519ca0",
      "filename": "gdb/inf-ptrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/inf-ptrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/inf-ptrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-ptrace.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -316,7 +316,7 @@ inf_ptrace_target::resume (ptid_t ptid, int step, enum gdb_signal signal)\n \n ptid_t\n inf_ptrace_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t\t int options)\n+\t\t\t target_wait_flags options)\n {\n   pid_t pid;\n   int status, save_errno;"
    },
    {
      "sha": "d3c59e6d46a7a62559749b2fa100d06dfb830cc5",
      "filename": "gdb/inf-ptrace.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/inf-ptrace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/inf-ptrace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-ptrace.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -35,7 +35,7 @@ struct inf_ptrace_target : public inf_child_target\n \n   void resume (ptid_t, int, enum gdb_signal) override;\n \n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void files_info () override;\n "
    },
    {
      "sha": "6532b06ae52efc0264b5d2112f4e130c9f91825a",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -3423,7 +3423,7 @@ random_pending_event_thread (inferior *inf, ptid_t waiton_ptid)\n \n static ptid_t\n do_target_wait_1 (inferior *inf, ptid_t ptid,\n-\t\t  target_waitstatus *status, int options)\n+\t\t  target_waitstatus *status, target_wait_flags options)\n {\n   ptid_t event_ptid;\n   struct thread_info *tp;\n@@ -3546,7 +3546,8 @@ do_target_wait_1 (inferior *inf, ptid_t ptid,\n    more events.  Polls for events from all inferiors/targets.  */\n \n static bool\n-do_target_wait (ptid_t wait_ptid, execution_control_state *ecs, int options)\n+do_target_wait (ptid_t wait_ptid, execution_control_state *ecs,\n+\t\ttarget_wait_flags options)\n {\n   int num_inferiors = 0;\n   int random_selector;"
    },
    {
      "sha": "44b59485d7b98355d4c16a875a025359d1f2666e",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -3131,7 +3131,7 @@ filter_exit_event (struct lwp_info *event_child,\n \n static ptid_t\n linux_nat_wait_1 (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t  int target_options)\n+\t\t  target_wait_flags target_options)\n {\n   sigset_t prev_mask;\n   enum resume_kind last_resume_kind;\n@@ -3411,7 +3411,7 @@ resume_stopped_resumed_lwps (struct lwp_info *lp, const ptid_t wait_ptid)\n \n ptid_t\n linux_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t\tint target_options)\n+\t\t\ttarget_wait_flags target_options)\n {\n   ptid_t event_ptid;\n "
    },
    {
      "sha": "caaeff85207f69b1c0f7b3bb4c42d4eca55dffd1",
      "filename": "gdb/linux-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/linux-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/linux-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -46,7 +46,7 @@ class linux_nat_target : public inf_ptrace_target\n \n   void resume (ptid_t, int, enum gdb_signal) override;\n \n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void pass_signals (gdb::array_view<const unsigned char>) override;\n "
    },
    {
      "sha": "fbddfed3c592719340b5d0e6f78c269b44773381",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -92,7 +92,7 @@ class thread_db_target final : public target_ops\n   strata stratum () const override { return thread_stratum; }\n \n   void detach (inferior *, int) override;\n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n   void resume (ptid_t, int, enum gdb_signal) override;\n   void mourn_inferior () override;\n   void update_thread_list () override;\n@@ -1379,7 +1379,7 @@ thread_db_target::detach (inferior *inf, int from_tty)\n \n ptid_t\n thread_db_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t\tint options)\n+\t\t\ttarget_wait_flags options)\n {\n   struct thread_db_info *info;\n "
    },
    {
      "sha": "7a07fbf6d8a74f377dea82ebc20d035bd0437836",
      "filename": "gdb/nbsd-nat.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -540,7 +540,8 @@ nbsd_nat_target::resume (ptid_t ptid, int step, enum gdb_signal signal)\n /* Implement a safe wrapper around waitpid().  */\n \n static pid_t\n-nbsd_wait (ptid_t ptid, struct target_waitstatus *ourstatus, int options)\n+nbsd_wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n+\t   target_wait_flags options)\n {\n   pid_t pid;\n   int status;\n@@ -569,7 +570,7 @@ nbsd_wait (ptid_t ptid, struct target_waitstatus *ourstatus, int options)\n \n ptid_t\n nbsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t       int target_options)\n+\t\t       target_wait_flags target_options)\n {\n   pid_t pid = nbsd_wait (ptid, ourstatus, target_options);\n   ptid_t wptid = ptid_t (pid);"
    },
    {
      "sha": "7461667cefb4c4a41a3803125a6153bbdd2a3e09",
      "filename": "gdb/nbsd-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/nbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/nbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -41,7 +41,7 @@ struct nbsd_nat_target : public inf_ptrace_target\n   bool info_proc (const char *, enum info_proc_what) override;\n \n   void resume (ptid_t, int, enum gdb_signal) override;\n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n   int insert_exec_catchpoint (int pid) override;\n   int remove_exec_catchpoint (int pid) override;\n   int set_syscall_catchpoint (int pid, bool needed, int any_count,"
    },
    {
      "sha": "ef1615df3e2cbea63569491f9ef6f5337f37569c",
      "filename": "gdb/nto-procfs.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/nto-procfs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/nto-procfs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nto-procfs.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -69,7 +69,7 @@ struct nto_procfs_target : public inf_child_target\n \n   void resume (ptid_t, int, enum gdb_signal) override;\n \n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void fetch_registers (struct regcache *, int) override;\n   void store_registers (struct regcache *, int) override;\n@@ -795,7 +795,7 @@ nto_handle_sigint (int signo)\n \n sptid_t\n nto_procfs_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t\t int options)\n+\t\t\t target_wait_flags options)\n {\n   sigset_t set;\n   siginfo_t info;"
    },
    {
      "sha": "310e2b72fcd2f3623a564225697e328c7b8c65b5",
      "filename": "gdb/obsd-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/obsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/obsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-nat.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -74,7 +74,7 @@ obsd_nat_target::update_thread_list ()\n \n ptid_t\n obsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t       int options)\n+\t\t       target_wait_flags options)\n {\n   pid_t pid;\n   int status, save_errno;"
    },
    {
      "sha": "3d3e50c57ecdb74ff5f5fff508d183f2ac3967f4",
      "filename": "gdb/obsd-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/obsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/obsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-nat.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -27,7 +27,7 @@ class obsd_nat_target : public inf_ptrace_target\n   /* Override some methods to support threads.  */\n   std::string pid_to_str (ptid_t) override;\n   void update_thread_list () override;\n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n #ifdef PT_GET_PROCESS_STATE\n   bool follow_fork (bool, bool) override;"
    },
    {
      "sha": "a06f0357ec3e5351091c8f7e8d81383b9528eb90",
      "filename": "gdb/procfs.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/procfs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/procfs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/procfs.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -105,7 +105,7 @@ class procfs_target final : public inf_child_target\n   void detach (inferior *inf, int) override;\n \n   void resume (ptid_t, int, enum gdb_signal) override;\n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void fetch_registers (struct regcache *, int) override;\n   void store_registers (struct regcache *, int) override;\n@@ -2033,7 +2033,7 @@ procfs_target::store_registers (struct regcache *regcache, int regnum)\n \n ptid_t\n procfs_target::wait (ptid_t ptid, struct target_waitstatus *status,\n-\t\t     int options)\n+\t\t     target_wait_flags options)\n {\n   /* First cut: loosely based on original version 2.1.  */\n   procinfo *pi;"
    },
    {
      "sha": "cc94ff8e1ea37729f9a5f932bdea023f6a9892a3",
      "filename": "gdb/ravenscar-thread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ravenscar-thread.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -87,7 +87,7 @@ struct ravenscar_thread_target final : public target_ops\n \n   strata stratum () const override { return thread_stratum; }\n \n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n   void resume (ptid_t, int, enum gdb_signal) override;\n \n   void fetch_registers (struct regcache *, int) override;\n@@ -385,7 +385,7 @@ ravenscar_thread_target::resume (ptid_t ptid, int step,\n ptid_t\n ravenscar_thread_target::wait (ptid_t ptid,\n \t\t\t       struct target_waitstatus *status,\n-\t\t\t       int options)\n+\t\t\t       target_wait_flags options)\n {\n   process_stratum_target *beneath\n     = as_process_stratum_target (this->beneath ());"
    },
    {
      "sha": "c1430e9b5335e05faf144042d7c80670f6f3ba3b",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -118,7 +118,7 @@ class record_btrace_target final : public target_ops\n \n   void commit_resume () override;\n   void resume (ptid_t, int, enum gdb_signal) override;\n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void stop (ptid_t) override;\n   void update_thread_list () override;\n@@ -2537,12 +2537,13 @@ record_btrace_maybe_mark_async_event\n \n ptid_t\n record_btrace_target::wait (ptid_t ptid, struct target_waitstatus *status,\n-\t\t\t    int options)\n+\t\t\t    target_wait_flags options)\n {\n   std::vector<thread_info *> moving;\n   std::vector<thread_info *> no_history;\n \n-  DEBUG (\"wait %s (0x%x)\", target_pid_to_str (ptid).c_str (), options);\n+  DEBUG (\"wait %s (0x%x)\", target_pid_to_str (ptid).c_str (),\n+\t (unsigned) options);\n \n   /* As long as we're not replaying, just forward the request.  */\n   if ((::execution_direction != EXEC_REVERSE)"
    },
    {
      "sha": "1c8b791ffb9e99da2c6f971707599cac3447d9ec",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -225,7 +225,7 @@ class record_full_base_target : public target_ops\n \n   void close () override;\n   void async (int) override;\n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n   bool stopped_by_watchpoint () override;\n   bool stopped_data_address (CORE_ADDR *) override;\n \n@@ -1155,7 +1155,7 @@ record_full_sig_handler (int signo)\n static ptid_t\n record_full_wait_1 (struct target_ops *ops,\n \t\t    ptid_t ptid, struct target_waitstatus *status,\n-\t\t    int options)\n+\t\t    target_wait_flags options)\n {\n   scoped_restore restore_operation_disable\n     = record_full_gdb_operation_disable_set ();\n@@ -1468,7 +1468,7 @@ record_full_wait_1 (struct target_ops *ops,\n \n ptid_t\n record_full_base_target::wait (ptid_t ptid, struct target_waitstatus *status,\n-\t\t\t       int options)\n+\t\t\t       target_wait_flags options)\n {\n   ptid_t return_ptid;\n "
    },
    {
      "sha": "9e1c2b151c8552075a28727ce7ce4ccb21be0886",
      "filename": "gdb/remote-sim.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/remote-sim.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/remote-sim.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-sim.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -131,7 +131,7 @@ struct gdbsim_target final\n   void detach (inferior *inf, int) override;\n \n   void resume (ptid_t, int, enum gdb_signal) override;\n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void fetch_registers (struct regcache *, int) override;\n   void store_registers (struct regcache *, int) override;\n@@ -927,7 +927,8 @@ gdbsim_cntrl_c (int signo)\n }\n \n ptid_t\n-gdbsim_target::wait (ptid_t ptid, struct target_waitstatus *status, int options)\n+gdbsim_target::wait (ptid_t ptid, struct target_waitstatus *status,\n+\t\t     target_wait_flags options)\n {\n   struct sim_inferior_data *sim_data;\n   static sighandler_t prev_sigint;"
    },
    {
      "sha": "5fc80ebc8f76af15737aaedf64ca8edfa21fd5d8",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -422,7 +422,7 @@ class remote_target : public process_stratum_target\n \n   void commit_resume () override;\n   void resume (ptid_t, int, enum gdb_signal) override;\n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void fetch_registers (struct regcache *, int) override;\n   void store_registers (struct regcache *, int) override;\n@@ -739,9 +739,9 @@ class remote_target : public process_stratum_target\n   void add_current_inferior_and_thread (char *wait_status);\n \n   ptid_t wait_ns (ptid_t ptid, struct target_waitstatus *status,\n-\t\t  int options);\n+\t\t  target_wait_flags options);\n   ptid_t wait_as (ptid_t ptid, target_waitstatus *status,\n-\t\t  int options);\n+\t\t  target_wait_flags options);\n \n   ptid_t process_stop_reply (struct stop_reply *stop_reply,\n \t\t\t     target_waitstatus *status);\n@@ -7771,7 +7771,8 @@ remote_target::process_stop_reply (struct stop_reply *stop_reply,\n /* The non-stop mode version of target_wait.  */\n \n ptid_t\n-remote_target::wait_ns (ptid_t ptid, struct target_waitstatus *status, int options)\n+remote_target::wait_ns (ptid_t ptid, struct target_waitstatus *status,\n+\t\t\ttarget_wait_flags options)\n {\n   struct remote_state *rs = get_remote_state ();\n   struct stop_reply *stop_reply;\n@@ -7839,7 +7840,8 @@ first_remote_resumed_thread (remote_target *target)\n    STATUS just as `wait' would.  */\n \n ptid_t\n-remote_target::wait_as (ptid_t ptid, target_waitstatus *status, int options)\n+remote_target::wait_as (ptid_t ptid, target_waitstatus *status,\n+\t\t\ttarget_wait_flags options)\n {\n   struct remote_state *rs = get_remote_state ();\n   ptid_t event_ptid = null_ptid;\n@@ -7992,7 +7994,8 @@ remote_target::wait_as (ptid_t ptid, target_waitstatus *status, int options)\n    STATUS just as `wait' would.  */\n \n ptid_t\n-remote_target::wait (ptid_t ptid, struct target_waitstatus *status, int options)\n+remote_target::wait (ptid_t ptid, struct target_waitstatus *status,\n+\t\t     target_wait_flags options)\n {\n   ptid_t event_ptid;\n "
    },
    {
      "sha": "29154cfc2e7d3d06c748b2b857f451c222875ff6",
      "filename": "gdb/rs6000-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/rs6000-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/rs6000-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-nat.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -90,7 +90,7 @@ class rs6000_nat_target final : public inf_ptrace_target\n   void create_inferior (const char *, const std::string &,\n \t\t\tchar **, int) override;\n \n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n private:\n   enum target_xfer_status\n@@ -495,7 +495,7 @@ rs6000_nat_target::xfer_partial (enum target_object object,\n \n ptid_t\n rs6000_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t\t int options)\n+\t\t\t target_wait_flags options)\n {\n   pid_t pid;\n   int status, save_errno;"
    },
    {
      "sha": "bb33a20ea5227f552cd4e1cd835e71cfc1a92482",
      "filename": "gdb/sol-thread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/sol-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/sol-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sol-thread.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -84,7 +84,7 @@ class sol_thread_target final : public target_ops\n   strata stratum () const override { return thread_stratum; }\n \n   void detach (inferior *, int) override;\n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n   void resume (ptid_t, int, enum gdb_signal) override;\n   void mourn_inferior () override;\n   std::string pid_to_str (ptid_t) override;\n@@ -425,7 +425,7 @@ sol_thread_target::resume (ptid_t ptid, int step, enum gdb_signal signo)\n \n ptid_t\n sol_thread_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t\t int options)\n+\t\t\t target_wait_flags options)\n {\n   if (ptid.pid () != -1)\n     {"
    },
    {
      "sha": "1b2feb2c7fbc1416f28484c76a79c03b181cbe17",
      "filename": "gdb/target-debug.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target-debug.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target-debug.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-debug.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -205,7 +205,7 @@ target_debug_print_struct_target_waitstatus_p (struct target_waitstatus *status)\n   target_debug_do_print ((X) ? \"step\" : \"continue\")\n \n static void\n-target_debug_print_options (int options)\n+target_debug_print_target_wait_flags (target_wait_flags options)\n {\n   std::string str = target_options_to_string (options);\n "
    },
    {
      "sha": "c0968e2040ebda3b2383d4f696c124d4ede69f92",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -15,7 +15,7 @@ struct dummy_target : public target_ops\n   void disconnect (const char *arg0, int arg1) override;\n   void resume (ptid_t arg0, int arg1, enum gdb_signal arg2) override;\n   void commit_resume () override;\n-  ptid_t wait (ptid_t arg0, struct target_waitstatus *arg1, int arg2) override;\n+  ptid_t wait (ptid_t arg0, struct target_waitstatus *arg1, target_wait_flags arg2) override;\n   void fetch_registers (struct regcache *arg0, int arg1) override;\n   void store_registers (struct regcache *arg0, int arg1) override;\n   void prepare_to_store (struct regcache *arg0) override;\n@@ -186,7 +186,7 @@ struct debug_target : public target_ops\n   void disconnect (const char *arg0, int arg1) override;\n   void resume (ptid_t arg0, int arg1, enum gdb_signal arg2) override;\n   void commit_resume () override;\n-  ptid_t wait (ptid_t arg0, struct target_waitstatus *arg1, int arg2) override;\n+  ptid_t wait (ptid_t arg0, struct target_waitstatus *arg1, target_wait_flags arg2) override;\n   void fetch_registers (struct regcache *arg0, int arg1) override;\n   void store_registers (struct regcache *arg0, int arg1) override;\n   void prepare_to_store (struct regcache *arg0) override;\n@@ -461,19 +461,19 @@ debug_target::commit_resume ()\n }\n \n ptid_t\n-target_ops::wait (ptid_t arg0, struct target_waitstatus *arg1, int arg2)\n+target_ops::wait (ptid_t arg0, struct target_waitstatus *arg1, target_wait_flags arg2)\n {\n   return this->beneath ()->wait (arg0, arg1, arg2);\n }\n \n ptid_t\n-dummy_target::wait (ptid_t arg0, struct target_waitstatus *arg1, int arg2)\n+dummy_target::wait (ptid_t arg0, struct target_waitstatus *arg1, target_wait_flags arg2)\n {\n   return default_target_wait (this, arg0, arg1, arg2);\n }\n \n ptid_t\n-debug_target::wait (ptid_t arg0, struct target_waitstatus *arg1, int arg2)\n+debug_target::wait (ptid_t arg0, struct target_waitstatus *arg1, target_wait_flags arg2)\n {\n   ptid_t result;\n   fprintf_unfiltered (gdb_stdlog, \"-> %s->wait (...)\\n\", this->beneath ()->shortname ());\n@@ -483,7 +483,7 @@ debug_target::wait (ptid_t arg0, struct target_waitstatus *arg1, int arg2)\n   fputs_unfiltered (\", \", gdb_stdlog);\n   target_debug_print_struct_target_waitstatus_p (arg1);\n   fputs_unfiltered (\", \", gdb_stdlog);\n-  target_debug_print_options (arg2);\n+  target_debug_print_target_wait_flags (arg2);\n   fputs_unfiltered (\") = \", gdb_stdlog);\n   target_debug_print_ptid_t (result);\n   fputs_unfiltered (\"\\n\", gdb_stdlog);"
    },
    {
      "sha": "9fd6b4ba9e13d0c9f86504cc5d015c6fdf694cf8",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -2007,7 +2007,8 @@ target_disconnect (const char *args, int from_tty)\n /* See target/target.h.  */\n \n ptid_t\n-target_wait (ptid_t ptid, struct target_waitstatus *status, int options)\n+target_wait (ptid_t ptid, struct target_waitstatus *status,\n+\t     target_wait_flags options)\n {\n   return current_top_target ()->wait (ptid, status, options);\n }\n@@ -2017,7 +2018,7 @@ target_wait (ptid_t ptid, struct target_waitstatus *status, int options)\n ptid_t\n default_target_wait (struct target_ops *ops,\n \t\t     ptid_t ptid, struct target_waitstatus *status,\n-\t\t     int options)\n+\t\t     target_wait_flags options)\n {\n   status->kind = TARGET_WAITKIND_IGNORE;\n   return minus_one_ptid;\n@@ -3360,8 +3361,8 @@ str_comma_list_concat_elem (std::string *list, const char *elem)\n    OPT is removed from TARGET_OPTIONS.  */\n \n static void\n-do_option (int *target_options, std::string *ret,\n-\t   int opt, const char *opt_str)\n+do_option (target_wait_flags *target_options, std::string *ret,\n+\t   target_wait_flag opt, const char *opt_str)\n {\n   if ((*target_options & opt) != 0)\n     {\n@@ -3373,7 +3374,7 @@ do_option (int *target_options, std::string *ret,\n /* See target.h.  */\n \n std::string\n-target_options_to_string (int target_options)\n+target_options_to_string (target_wait_flags target_options)\n {\n   std::string ret;\n "
    },
    {
      "sha": "0cb92fa8ea885c3ed8e479e53c93315c52bc3abf",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -117,7 +117,7 @@ struct syscall\n   };\n \n /* Return a pretty printed form of TARGET_OPTIONS.  */\n-extern std::string target_options_to_string (int target_options);\n+extern std::string target_options_to_string (target_wait_flags target_options);\n \n /* Possible types of events that the inferior handler will have to\n    deal with.  */\n@@ -488,7 +488,7 @@ struct target_ops\n        current target.  inferior_ptid may also be null_ptid on\n        entry.  */\n     virtual ptid_t wait (ptid_t, struct target_waitstatus *,\n-\t\t\t int TARGET_DEBUG_PRINTER (target_debug_print_options))\n+\t\t\t target_wait_flags options)\n       TARGET_DEFAULT_FUNC (default_target_wait);\n     virtual void fetch_registers (struct regcache *, int)\n       TARGET_DEFAULT_IGNORE ();\n@@ -1456,7 +1456,7 @@ extern scoped_restore_tmpl<int> make_scoped_defer_target_commit_resume ();\n extern ptid_t default_target_wait (struct target_ops *ops,\n \t\t\t\t   ptid_t ptid,\n \t\t\t\t   struct target_waitstatus *status,\n-\t\t\t\t   int options);\n+\t\t\t\t   target_wait_flags options);\n \n /* Fetch at least register REGNO, or all regs if regno == -1.  No result.  */\n "
    },
    {
      "sha": "393272b327370f20d7cd3f7f8bfc10d9f0def0cf",
      "filename": "gdb/target/target.h",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target/target.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -21,6 +21,8 @@\n #define TARGET_TARGET_H\n \n #include \"target/waitstatus.h\"\n+#include \"target/wait.h\"\n+\n /* This header is a stopgap until more code is shared.  */\n \n /* Read LEN bytes of target memory at address MEMADDR, placing the\n@@ -84,7 +86,7 @@ extern void target_continue (ptid_t ptid, enum gdb_signal signal);\n    options.  */\n \n extern ptid_t target_wait (ptid_t ptid, struct target_waitstatus *status,\n-\t\t\t   int options);\n+\t\t\t   target_wait_flags options);\n \n /* The inferior process has died.  Do what is right.  */\n "
    },
    {
      "sha": "ee623bb7310364b9d5037b28fe8f07b525f9e7b6",
      "filename": "gdb/target/wait.h",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target/wait.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/target/wait.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target/wait.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -20,11 +20,18 @@\n #ifndef TARGET_WAIT_H\n #define TARGET_WAIT_H\n \n+#include \"gdbsupport/enum-flags.h\"\n+\n /* Options that can be passed to target_wait.  */\n \n-/* Return immediately if there's no event already queued.  If this\n-   options is not requested, target_wait blocks waiting for an\n-   event.  */\n-#define TARGET_WNOHANG 1\n+enum target_wait_flag : unsigned\n+{\n+  /* Return immediately if there's no event already queued.  If this\n+     options is not requested, target_wait blocks waiting for an\n+     event.  */\n+  TARGET_WNOHANG = 1,\n+};\n+\n+DEF_ENUM_FLAGS_TYPE (enum target_wait_flag, target_wait_flags);\n \n #endif /* TARGET_WAIT_H */"
    },
    {
      "sha": "ba88c33cac3835d2d66852872ce3d3b31810016e",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -312,7 +312,7 @@ struct windows_nat_target final : public x86_nat_target<inf_child_target>\n \n   void resume (ptid_t, int , enum gdb_signal) override;\n \n-  ptid_t wait (ptid_t, struct target_waitstatus *, int) override;\n+  ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n   void fetch_registers (struct regcache *, int) override;\n   void store_registers (struct regcache *, int) override;\n@@ -1803,7 +1803,7 @@ windows_nat_target::get_windows_debug_event (int pid,\n /* Wait for interesting events to occur in the target process.  */\n ptid_t\n windows_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t\t  int options)\n+\t\t\t  target_wait_flags options)\n {\n   int pid = -1;\n "
    },
    {
      "sha": "d47fcfd300aeaf465ef97444792bd43b0ed6c36a",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -1,3 +1,18 @@\n+2020-09-18  Tom Tromey  <tromey@adacore.com>\n+\n+\t* netbsd-low.h (class netbsd_process_target) <wait>: Update.\n+\t* netbsd-low.cc (netbsd_waitpid, netbsd_wait)\n+\t(netbsd_process_target::wait): Change type of target_options.\n+\t* win32-low.h (class win32_process_target) <wait>: Update.\n+\t* win32-low.cc (win32_process_target::wait): Update.\n+\t* target.h (class process_stratum_target) <wait>: Update.\n+\t(mywait): Update.\n+\t* target.cc (mywait, target_wait): Change type of \"options\".\n+\t* linux-low.h (class linux_process_target) <wait, wait_1>:\n+\tUpdate.\n+\t* linux-low.cc (linux_process_target::wait)\n+\t(linux_process_target::wait_1): Update.\n+\n 2020-09-15  Tom Tromey  <tromey@adacore.com>\n \n \t* linux-x86-low.cc (xmltarget_i386_linux_no_xml)"
    },
    {
      "sha": "70d5521d4421b93f07da0776c4ca6dc4b9a845ac",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -2948,7 +2948,7 @@ linux_process_target::gdb_catch_this_syscall (lwp_info *event_child)\n \n ptid_t\n linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n-\t\t\t      int target_options)\n+\t\t\t      target_wait_flags target_options)\n {\n   client_state &cs = get_client_state ();\n   int w;\n@@ -3710,7 +3710,7 @@ async_file_mark (void)\n ptid_t\n linux_process_target::wait (ptid_t ptid,\n \t\t\t    target_waitstatus *ourstatus,\n-\t\t\t    int target_options)\n+\t\t\t    target_wait_flags target_options)\n {\n   ptid_t event_ptid;\n "
    },
    {
      "sha": "56c353319c2cf6b9f9f226ccc3fd08596c4957d0",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -157,7 +157,7 @@ class linux_process_target : public process_stratum_target\n   void resume (thread_resume *resume_info, size_t n) override;\n \n   ptid_t wait (ptid_t ptid, target_waitstatus *status,\n-\t       int options) override;\n+\t       target_wait_flags options) override;\n \n   void fetch_registers (regcache *regcache, int regno) override;\n \n@@ -356,7 +356,7 @@ class linux_process_target : public process_stratum_target\n \n   /* Wait for process, returns status.  */\n   ptid_t wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n-\t\t int target_options);\n+\t\t target_wait_flags target_options);\n \n   /* Stop all lwps that aren't stopped yet, except EXCEPT, if not NULL.\n      If SUSPEND, then also increase the suspend count of every LWP,"
    },
    {
      "sha": "3eb2c0f25f6e27a5eedc1f76d2320c78ca0f29fe",
      "filename": "gdbserver/netbsd-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/netbsd-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/netbsd-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/netbsd-low.cc?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -236,9 +236,11 @@ netbsd_store_waitstatus (struct target_waitstatus *ourstatus, int hoststatus)\n /* Implement a safe wrapper around waitpid().  */\n \n static pid_t\n-netbsd_waitpid (ptid_t ptid, struct target_waitstatus *ourstatus, int options)\n+netbsd_waitpid (ptid_t ptid, struct target_waitstatus *ourstatus,\n+\t\ttarget_wait_flags target_options)\n {\n   int status;\n+  int options = (target_options & TARGET_WNOHANG) ? WNOHANG : 0;\n \n   pid_t pid\n     = gdb::handle_eintr<int> (-1, ::waitpid, ptid.pid (), &status, options);\n@@ -259,7 +261,7 @@ netbsd_waitpid (ptid_t ptid, struct target_waitstatus *ourstatus, int options)\n \n static ptid_t\n netbsd_wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t     int target_options)\n+\t     target_wait_flags target_options)\n {\n   pid_t pid = netbsd_waitpid (ptid, ourstatus, target_options);\n   ptid_t wptid = ptid_t (pid);\n@@ -398,7 +400,7 @@ netbsd_wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \n ptid_t\n netbsd_process_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t\t     int target_options)\n+\t\t\t     target_wait_flags target_options)\n {\n   while (true)\n     {"
    },
    {
      "sha": "96ad6d92474781cf3246580542cca8f0d4d074dd",
      "filename": "gdbserver/netbsd-low.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/netbsd-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/netbsd-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/netbsd-low.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -76,7 +76,7 @@ class netbsd_process_target : public process_stratum_target\n   void resume (thread_resume *resume_info, size_t n) override;\n \n   ptid_t wait (ptid_t ptid, target_waitstatus *status,\n-\t       int options) override;\n+\t       target_wait_flags options) override;\n \n   void fetch_registers (regcache *regcache, int regno) override;\n "
    },
    {
      "sha": "921d26fcf79ca992dedde3213a65250867a5aaf8",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -160,8 +160,8 @@ target_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr,\n }\n \n ptid_t\n-mywait (ptid_t ptid, struct target_waitstatus *ourstatus, int options,\n-\tint connected_wait)\n+mywait (ptid_t ptid, struct target_waitstatus *ourstatus,\n+\ttarget_wait_flags options, int connected_wait)\n {\n   ptid_t ret;\n \n@@ -220,7 +220,8 @@ target_stop_and_wait (ptid_t ptid)\n /* See target/target.h.  */\n \n ptid_t\n-target_wait (ptid_t ptid, struct target_waitstatus *status, int options)\n+target_wait (ptid_t ptid, struct target_waitstatus *status,\n+\t     target_wait_flags options)\n {\n   return the_target->wait (ptid, status, options);\n }"
    },
    {
      "sha": "c2245ebfe85aeb627d09cb9d8ee3e08d0a5277e2",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -128,7 +128,7 @@ class process_stratum_target\n      no child stop to report, return is\n      null_ptid/TARGET_WAITKIND_IGNORE.  */\n   virtual ptid_t wait (ptid_t ptid, target_waitstatus *status,\n-\t\t       int options) = 0;\n+\t\t       target_wait_flags options) = 0;\n \n   /* Fetch registers from the inferior process.\n \n@@ -663,8 +663,8 @@ target_read_btrace_conf (struct btrace_target_info *tinfo,\n #define target_supports_software_single_step() \\\n   the_target->supports_software_single_step ()\n \n-ptid_t mywait (ptid_t ptid, struct target_waitstatus *ourstatus, int options,\n-\t       int connected_wait);\n+ptid_t mywait (ptid_t ptid, struct target_waitstatus *ourstatus,\n+\t       target_wait_flags options, int connected_wait);\n \n /* Prepare to read or write memory from the inferior process.  See the\n    corresponding process_stratum_target methods for more details.  */"
    },
    {
      "sha": "9980986c739229eacf100c3c6b45f66c4c3517df",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -1610,7 +1610,7 @@ get_child_debug_event (DWORD *continue_status,\n    Returns the signal which caused the process to stop. */\n ptid_t\n win32_process_target::wait (ptid_t ptid, target_waitstatus *ourstatus,\n-\t\t\t    int options)\n+\t\t\t    target_wait_flags options)\n {\n   if (cached_status.kind != TARGET_WAITKIND_IGNORE)\n     {"
    },
    {
      "sha": "d4ad5d83d29185458828861132edc7d82e57ba3d",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b60cea74de13b944ad7d40c315f61f5e6bc2a932/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=b60cea74de13b944ad7d40c315f61f5e6bc2a932",
      "patch": "@@ -116,7 +116,7 @@ class win32_process_target : public process_stratum_target\n   void resume (thread_resume *resume_info, size_t n) override;\n \n   ptid_t wait (ptid_t ptid, target_waitstatus *status,\n-\t       int options) override;\n+\t       target_wait_flags options) override;\n \n   void fetch_registers (regcache *regcache, int regno) override;\n "
    }
  ]
}