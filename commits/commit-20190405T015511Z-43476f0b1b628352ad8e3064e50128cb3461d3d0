{
  "sha": "43476f0b1b628352ad8e3064e50128cb3461d3d0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDM0NzZmMGIxYjYyODM1MmFkOGUzMDY0ZTUwMTI4Y2IzNDYxZDNkMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-25T03:38:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-05T01:55:11Z"
    },
    "message": "Move arglist_len et al to parser_state\n\nThis moves arglist_len, start_arglist, and end_arglist to\nparser_state.\n\ngdb/ChangeLog\n2019-04-04  Tom Tromey  <tom@tromey.com>\n\n\t* parser-defs.h (struct parser_state) <start_arglist,\n\tend_arglist>: New methods.\n\t<arglist_len, m_funcall_chain>: New members.\n\t(arglist_len, start_arglist, end_arglist): Don't declare.\n\t* parse.c (arglist_len, funcall_chain): Remove global.\n\t(start_arglist, end_arglist): Remove functions.\n\t(parse_exp_in_context): Update.\n\t* p-exp.y: Update rules.\n\t* m2-exp.y: Update rules.\n\t* go-exp.y: Update rules.\n\t* f-exp.y: Update rules.\n\t* d-exp.y: Update rules.\n\t* c-exp.y: Update rules.",
    "tree": {
      "sha": "5d836e9a33199397d2aeba188216a6478688ca94",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5d836e9a33199397d2aeba188216a6478688ca94"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/43476f0b1b628352ad8e3064e50128cb3461d3d0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43476f0b1b628352ad8e3064e50128cb3461d3d0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/43476f0b1b628352ad8e3064e50128cb3461d3d0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43476f0b1b628352ad8e3064e50128cb3461d3d0/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5776fca307b8af3d852525b77e9b917a9aa97370",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5776fca307b8af3d852525b77e9b917a9aa97370",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5776fca307b8af3d852525b77e9b917a9aa97370"
    }
  ],
  "stats": {
    "total": 169,
    "additions": 89,
    "deletions": 80
  },
  "files": [
    {
      "sha": "7fc73d21e324d301038b8f9413cf2214b75ecc0c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=43476f0b1b628352ad8e3064e50128cb3461d3d0",
      "patch": "@@ -1,3 +1,19 @@\n+2019-04-04  Tom Tromey  <tom@tromey.com>\n+\n+\t* parser-defs.h (struct parser_state) <start_arglist,\n+\tend_arglist>: New methods.\n+\t<arglist_len, m_funcall_chain>: New members.\n+\t(arglist_len, start_arglist, end_arglist): Don't declare.\n+\t* parse.c (arglist_len, funcall_chain): Remove global.\n+\t(start_arglist, end_arglist): Remove functions.\n+\t(parse_exp_in_context): Update.\n+\t* p-exp.y: Update rules.\n+\t* m2-exp.y: Update rules.\n+\t* go-exp.y: Update rules.\n+\t* f-exp.y: Update rules.\n+\t* d-exp.y: Update rules.\n+\t* c-exp.y: Update rules.\n+\n 2019-04-04  Tom Tromey  <tom@tromey.com>\n \n \t* rust-exp.y (struct rust_parser) <lex_hex, lex_escape,"
    },
    {
      "sha": "cab5cd55dbd5b8559355531fb6802bd572aad5ec",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=43476f0b1b628352ad8e3064e50128cb3461d3d0",
      "patch": "@@ -534,22 +534,22 @@ msgarg\t:\tname ':' exp\n exp\t:\texp '('\n \t\t\t/* This is to save the value of arglist_len\n \t\t\t   being accumulated by an outer function call.  */\n-\t\t\t{ start_arglist (); }\n+\t\t\t{ pstate->start_arglist (); }\n \t\targlist ')'\t%prec ARROW\n \t\t\t{ write_exp_elt_opcode (pstate, OP_FUNCALL);\n \t\t\t  write_exp_elt_longcst (pstate,\n-\t\t\t\t\t\t (LONGEST) end_arglist ());\n+\t\t\t\t\t\t pstate->end_arglist ());\n \t\t\t  write_exp_elt_opcode (pstate, OP_FUNCALL); }\n \t;\n \n /* This is here to disambiguate with the production for\n    \"func()::static_var\" further below, which uses\n    function_method_void.  */\n exp\t:\texp '(' ')' %prec ARROW\n-\t\t\t{ start_arglist ();\n+\t\t\t{ pstate->start_arglist ();\n \t\t\t  write_exp_elt_opcode (pstate, OP_FUNCALL);\n \t\t\t  write_exp_elt_longcst (pstate,\n-\t\t\t\t\t\t (LONGEST) end_arglist ());\n+\t\t\t\t\t\t pstate->end_arglist ());\n \t\t\t  write_exp_elt_opcode (pstate, OP_FUNCALL); }\n \t;\n \n@@ -569,30 +569,30 @@ exp\t:\tUNKNOWN_CPP_NAME '('\n \t\t\t/* This is to save the value of arglist_len\n \t\t\t   being accumulated by an outer function call.  */\n \n-\t\t\t  start_arglist ();\n+\t\t\t  pstate->start_arglist ();\n \t\t\t}\n \t\targlist ')'\t%prec ARROW\n \t\t\t{\n \t\t\t  write_exp_elt_opcode (pstate, OP_FUNCALL);\n \t\t\t  write_exp_elt_longcst (pstate,\n-\t\t\t\t\t\t (LONGEST) end_arglist ());\n+\t\t\t\t\t\t pstate->end_arglist ());\n \t\t\t  write_exp_elt_opcode (pstate, OP_FUNCALL);\n \t\t\t}\n \t;\n \n lcurly\t:\t'{'\n-\t\t\t{ start_arglist (); }\n+\t\t\t{ pstate->start_arglist (); }\n \t;\n \n arglist\t:\n \t;\n \n arglist\t:\texp\n-\t\t\t{ arglist_len = 1; }\n+\t\t\t{ pstate->arglist_len = 1; }\n \t;\n \n arglist\t:\targlist ',' exp   %prec ABOVE_COMMA\n-\t\t\t{ arglist_len++; }\n+\t\t\t{ pstate->arglist_len++; }\n \t;\n \n function_method:       exp '(' parameter_typelist ')' const_or_volatile\n@@ -645,7 +645,7 @@ exp     :       function_method_void_or_typelist COLONCOLON name\n \t;\n \n rcurly\t:\t'}'\n-\t\t\t{ $$ = end_arglist () - 1; }\n+\t\t\t{ $$ = pstate->end_arglist () - 1; }\n \t;\n exp\t:\tlcurly arglist rcurly\t%prec ARROW\n \t\t\t{ write_exp_elt_opcode (pstate, OP_ARRAY);"
    },
    {
      "sha": "c14c2d6fd6f5f2fa271f18eca4f3ac2292c6c793",
      "filename": "gdb/d-exp.y",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/d-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/d-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-exp.y?ref=43476f0b1b628352ad8e3064e50128cb3461d3d0",
      "patch": "@@ -366,32 +366,32 @@ PostfixExpression:\n \n ArgumentList:\n \tAssignExpression\n-\t\t{ arglist_len = 1; }\n+\t\t{ pstate->arglist_len = 1; }\n |\tArgumentList ',' AssignExpression\n-\t\t{ arglist_len++; }\n+\t\t{ pstate->arglist_len++; }\n ;\n \n ArgumentList_opt:\n \t/* EMPTY */\n-\t\t{ arglist_len = 0; }\n+\t\t{ pstate->arglist_len = 0; }\n |\tArgumentList\n ;\n \n CallExpression:\n \tPostfixExpression '('\n-\t\t{ start_arglist (); }\n+\t\t{ pstate->start_arglist (); }\n \tArgumentList_opt ')'\n \t\t{ write_exp_elt_opcode (pstate, OP_FUNCALL);\n-\t\t  write_exp_elt_longcst (pstate, (LONGEST) end_arglist ());\n+\t\t  write_exp_elt_longcst (pstate, pstate->end_arglist ());\n \t\t  write_exp_elt_opcode (pstate, OP_FUNCALL); }\n ;\n \n IndexExpression:\n \tPostfixExpression '[' ArgumentList ']'\n-\t\t{ if (arglist_len > 0)\n+\t\t{ if (pstate->arglist_len > 0)\n \t\t    {\n \t\t      write_exp_elt_opcode (pstate, MULTI_SUBSCRIPT);\n-\t\t      write_exp_elt_longcst (pstate, (LONGEST) arglist_len);\n+\t\t      write_exp_elt_longcst (pstate, pstate->arglist_len);\n \t\t      write_exp_elt_opcode (pstate, MULTI_SUBSCRIPT);\n \t\t    }\n \t\t  else\n@@ -558,7 +558,7 @@ PrimaryExpression:\n \n ArrayLiteral:\n \t'[' ArgumentList_opt ']'\n-\t\t{ $$ = arglist_len; }\n+\t\t{ $$ = pstate->arglist_len; }\n ;\n \n IdentifierExp:"
    },
    {
      "sha": "da4732237d344f1b178bb9259037e7e1ea78b38a",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=43476f0b1b628352ad8e3064e50128cb3461d3d0",
      "patch": "@@ -245,12 +245,12 @@ exp\t:\tKIND '(' exp ')'       %prec UNARY\n    later in eval.c.  */\n \n exp\t:\texp '(' \n-\t\t\t{ start_arglist (); }\n+\t\t\t{ pstate->start_arglist (); }\n \t\targlist ')'\t\n \t\t\t{ write_exp_elt_opcode (pstate,\n \t\t\t\t\t\tOP_F77_UNDETERMINED_ARGLIST);\n \t\t\t  write_exp_elt_longcst (pstate,\n-\t\t\t\t\t\t (LONGEST) end_arglist ());\n+\t\t\t\t\t\t pstate->end_arglist ());\n \t\t\t  write_exp_elt_opcode (pstate,\n \t\t\t\t\t      OP_F77_UNDETERMINED_ARGLIST); }\n \t;\n@@ -263,15 +263,15 @@ arglist\t:\n \t;\n \n arglist\t:\texp\n-\t\t\t{ arglist_len = 1; }\n+\t\t\t{ pstate->arglist_len = 1; }\n \t;\n \n arglist :\tsubrange\n-\t\t\t{ arglist_len = 1; }\n+\t\t\t{ pstate->arglist_len = 1; }\n \t;\n    \n arglist\t:\targlist ',' exp   %prec ABOVE_COMMA\n-\t\t\t{ arglist_len++; }\n+\t\t\t{ pstate->arglist_len++; }\n \t;\n \n /* There are four sorts of subrange types in F90.  */"
    },
    {
      "sha": "358fd530918a5e42ed94d0d1201a078507990d95",
      "filename": "gdb/go-exp.y",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/go-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/go-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-exp.y?ref=43476f0b1b628352ad8e3064e50128cb3461d3d0",
      "patch": "@@ -269,31 +269,31 @@ exp\t:\texp '[' exp1 ']'\n exp\t:\texp '('\n \t\t\t/* This is to save the value of arglist_len\n \t\t\t   being accumulated by an outer function call.  */\n-\t\t\t{ start_arglist (); }\n+\t\t\t{ pstate->start_arglist (); }\n \t\targlist ')'\t%prec LEFT_ARROW\n \t\t\t{ write_exp_elt_opcode (pstate, OP_FUNCALL);\n \t\t\t  write_exp_elt_longcst (pstate,\n-\t\t\t\t\t\t (LONGEST) end_arglist ());\n+\t\t\t\t\t\t pstate->end_arglist ());\n \t\t\t  write_exp_elt_opcode (pstate, OP_FUNCALL); }\n \t;\n \n lcurly\t:\t'{'\n-\t\t\t{ start_arglist (); }\n+\t\t\t{ pstate->start_arglist (); }\n \t;\n \n arglist\t:\n \t;\n \n arglist\t:\texp\n-\t\t\t{ arglist_len = 1; }\n+\t\t\t{ pstate->arglist_len = 1; }\n \t;\n \n arglist\t:\targlist ',' exp   %prec ABOVE_COMMA\n-\t\t\t{ arglist_len++; }\n+\t\t\t{ pstate->arglist_len++; }\n \t;\n \n rcurly\t:\t'}'\n-\t\t\t{ $$ = end_arglist () - 1; }\n+\t\t\t{ $$ = pstate->end_arglist () - 1; }\n \t;\n \n exp\t:\tlcurly type rcurly exp  %prec UNARY"
    },
    {
      "sha": "3e4bc07380129b156187e8952019cc66baa9cbde",
      "filename": "gdb/m2-exp.y",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/m2-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/m2-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-exp.y?ref=43476f0b1b628352ad8e3064e50128cb3461d3d0",
      "patch": "@@ -298,11 +298,11 @@ exp     :       exp '['\n                         /* This function just saves the number of arguments\n \t\t\t   that follow in the list.  It is *not* specific to\n \t\t\t   function types */\n-                        { start_arglist(); }\n+                        { pstate->start_arglist(); }\n                 non_empty_arglist ']'  %prec DOT\n                         { write_exp_elt_opcode (pstate, MULTI_SUBSCRIPT);\n \t\t\t  write_exp_elt_longcst (pstate,\n-\t\t\t\t\t\t (LONGEST) end_arglist());\n+\t\t\t\t\t\t pstate->end_arglist());\n \t\t\t  write_exp_elt_opcode (pstate, MULTI_SUBSCRIPT); }\n         ;\n \n@@ -313,33 +313,33 @@ exp\t:\texp '[' exp ']'\n exp\t:\texp '('\n \t\t\t/* This is to save the value of arglist_len\n \t\t\t   being accumulated by an outer function call.  */\n-\t\t\t{ start_arglist (); }\n+\t\t\t{ pstate->start_arglist (); }\n \t\targlist ')'\t%prec DOT\n \t\t\t{ write_exp_elt_opcode (pstate, OP_FUNCALL);\n \t\t\t  write_exp_elt_longcst (pstate,\n-\t\t\t\t\t\t (LONGEST) end_arglist ());\n+\t\t\t\t\t\t pstate->end_arglist ());\n \t\t\t  write_exp_elt_opcode (pstate, OP_FUNCALL); }\n \t;\n \n arglist\t:\n \t;\n \n arglist\t:\texp\n-\t\t\t{ arglist_len = 1; }\n+\t\t\t{ pstate->arglist_len = 1; }\n \t;\n \n arglist\t:\targlist ',' exp   %prec ABOVE_COMMA\n-\t\t\t{ arglist_len++; }\n+\t\t\t{ pstate->arglist_len++; }\n \t;\n \n non_empty_arglist\n         :       exp\n-                        { arglist_len = 1; }\n+                        { pstate->arglist_len = 1; }\n \t;\n \n non_empty_arglist\n         :       non_empty_arglist ',' exp %prec ABOVE_COMMA\n-     \t       \t    \t{ arglist_len++; }\n+     \t       \t    \t{ pstate->arglist_len++; }\n      \t;\n \n /* GDB construct */"
    },
    {
      "sha": "0f78126222c91ab1a4750004337bd71921023556",
      "filename": "gdb/p-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/p-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/p-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-exp.y?ref=43476f0b1b628352ad8e3064e50128cb3461d3d0",
      "patch": "@@ -334,11 +334,11 @@ exp\t:\texp '('\n \t\t\t/* This is to save the value of arglist_len\n \t\t\t   being accumulated by an outer function call.  */\n \t\t\t{ push_current_type ();\n-\t\t\t  start_arglist (); }\n+\t\t\t  pstate->start_arglist (); }\n \t\targlist ')'\t%prec ARROW\n \t\t\t{ write_exp_elt_opcode (pstate, OP_FUNCALL);\n \t\t\t  write_exp_elt_longcst (pstate,\n-\t\t\t\t\t\t (LONGEST) end_arglist ());\n+\t\t\t\t\t\t pstate->end_arglist ());\n \t\t\t  write_exp_elt_opcode (pstate, OP_FUNCALL);\n \t\t\t  pop_current_type ();\n \t\t\t  if (current_type)\n@@ -348,9 +348,9 @@ exp\t:\texp '('\n \n arglist\t:\n          | exp\n-\t\t\t{ arglist_len = 1; }\n+\t\t\t{ pstate->arglist_len = 1; }\n \t | arglist ',' exp   %prec ABOVE_COMMA\n-\t\t\t{ arglist_len++; }\n+\t\t\t{ pstate->arglist_len++; }\n \t;\n \n exp\t:\ttype '(' exp ')' %prec UNARY"
    },
    {
      "sha": "6ee61577068a2693af469041fbe35b8f0afaa0bb",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 0,
      "deletions": 32,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=43476f0b1b628352ad8e3064e50128cb3461d3d0",
      "patch": "@@ -67,7 +67,6 @@ const struct exp_descriptor exp_descriptor_standard =\n \f\n /* Global variables declared in parser-defs.h (and commented there).  */\n innermost_block_tracker innermost_block;\n-int arglist_len;\n static struct type_stack type_stack;\n \n /* True if parsing an expression to attempt completion.  */\n@@ -128,33 +127,6 @@ innermost_block_tracker::update (const struct block *b,\n     m_innermost_block = b;\n }\n \n-/* Data structure for saving values of arglist_len for function calls whose\n-   arguments contain other function calls.  */\n-\n-static std::vector<int> *funcall_chain;\n-\n-/* Begin counting arguments for a function call,\n-   saving the data about any containing call.  */\n-\n-void\n-start_arglist (void)\n-{\n-  funcall_chain->push_back (arglist_len);\n-  arglist_len = 0;\n-}\n-\n-/* Return the number of arguments in a function call just terminated,\n-   and restore the data for the containing function call.  */\n-\n-int\n-end_arglist (void)\n-{\n-  int val = arglist_len;\n-  arglist_len = funcall_chain->back ();\n-  funcall_chain->pop_back ();\n-  return val;\n-}\n-\n \f\n \n /* See definition in parser-defs.h.  */\n@@ -1119,10 +1091,6 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n   if (*stringptr == 0 || **stringptr == 0)\n     error_no_arg (_(\"expression to compute\"));\n \n-  std::vector<int> funcalls;\n-  scoped_restore save_funcall_chain = make_scoped_restore (&funcall_chain,\n-\t\t\t\t\t\t\t   &funcalls);\n-\n   const struct block *expression_context_block = block;\n   CORE_ADDR expression_context_pc = 0;\n "
    },
    {
      "sha": "a01511584d7b53af4dc8959bb8be1165382fd5b7",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 32,
      "deletions": 7,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43476f0b1b628352ad8e3064e50128cb3461d3d0/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=43476f0b1b628352ad8e3064e50128cb3461d3d0",
      "patch": "@@ -101,6 +101,27 @@ struct parser_state : public expr_builder\n \n   DISABLE_COPY_AND_ASSIGN (parser_state);\n \n+  /* Begin counting arguments for a function call,\n+     saving the data about any containing call.  */\n+\n+  void start_arglist ()\n+  {\n+    m_funcall_chain.push_back (arglist_len);\n+    arglist_len = 0;\n+  }\n+\n+  /* Return the number of arguments in a function call just terminated,\n+     and restore the data for the containing function call.  */\n+\n+  int end_arglist ()\n+  {\n+    int val = arglist_len;\n+    arglist_len = m_funcall_chain.back ();\n+    m_funcall_chain.pop_back ();\n+    return val;\n+  }\n+\n+\n   /* If this is nonzero, this block is used as the lexical context for\n      symbol names.  */\n \n@@ -125,6 +146,17 @@ struct parser_state : public expr_builder\n   /* After a token has been recognized, this variable points to it.\n      Currently used only for error reporting.  */\n   const char *prev_lexptr = nullptr;\n+\n+  /* Number of arguments seen so far in innermost function call.  */\n+\n+  int arglist_len = 0;\n+\n+private:\n+\n+  /* Data structure for saving values of arglist_len for function calls whose\n+     arguments contain other function calls.  */\n+\n+  std::vector<int> m_funcall_chain;\n };\n \n /* When parsing expressions we track the innermost block that was\n@@ -185,9 +217,6 @@ class innermost_block_tracker\n    once the parse is complete.  */\n extern innermost_block_tracker innermost_block;\n \n-/* Number of arguments seen so far in innermost function call.  */\n-extern int arglist_len;\n-\n /* A string token, either a char-string or bit-string.  Char-strings are\n    used, for example, for the names of symbols.  */\n \n@@ -311,10 +340,6 @@ extern void mark_struct_expression (struct expr_builder *);\n \n extern const char *find_template_name_end (const char *);\n \n-extern void start_arglist (void);\n-\n-extern int end_arglist (void);\n-\n extern char *copy_name (struct stoken);\n \n extern void insert_type (enum type_pieces);"
    }
  ]
}