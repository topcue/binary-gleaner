{
  "sha": "e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTdlZWU2NjVhMTUyNGNjNDU2OWQwYzJmNWM5ZDRhYTJiZTY0YzllOA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-23T19:55:50Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-23T19:55:50Z"
    },
    "message": "gdb: fix darwin-nat.c build / adapt to multi-target\n\nThe darwin-nat.c file doesn't build since the multi-target changes\n(5b6d1e4f, \"Multi-target support\").  This patch makes it build.  I have\naccess to a macOS vm, so I am able to build it, but I wasn't able to\nsuccessfully codesign it and try to actually debug something, so I don't\nknow if it works.  I don't have much more time to put on this to figure\nit out, so I thought I'd sent the patch anyway, as it's at least a step\nin the right direction.\n\nThe bulk of the patch is to change a bunch of functions to be methods of\nthe darwin_nat_target object, so that this can pass `this` to\nfind_inferior_ptid and other functions that now require a\nprocess_stratum_target pointer.\n\nThe darwin_ptrace_him function (renamed to darwin_nat_target::ptrace_him\nin this patch) is passed to fork_inferior as the `init_trace_fun`\nparameter.  Since the method can't be passed as a plain function pointer\n(we need the `this` pointer), I changed the `init_trace_fun` parameter\nof fork_inferior to be a gdb::function_view, so we can pass a lambda and\ncapture `this`.\n\nThe changes in darwin-nat.h are only to move definition higher in the\nfile, so that forward declarations are not needed.\n\ngdb/ChangeLog:\n\n\t* darwin-nat.h (struct darwin_exception_msg, enum\n\tdarwin_msg_state, struct darwin_thread_info, darwin_thread_t):\n\tMove up.\n\t(class darwin_nat_target) <wait_1, check_new_threads,\n\tdecode_exception_message, decode_message, stop_inferior,\n\tinit_thread_list, ptrace_him, cancel_breakpoint>: Declare.\n\t* darwin-nat.c (darwin_check_new_threads): Rename to...\n\t(darwin_nat_target::check_new_threads): ... this.\n\t(darwin_suspend_inferior_it): Remove.\n\t(darwin_decode_exception_message): Rename to...\n\t(darwin_nat_target::decode_exception_message): ... this.\n\t(darwin_nat_target::resume): Pass target to find_inferior_ptid.\n\t(darwin_decode_message): Rename to...\n\t(darwin_nat_target::decode_message): ... this.\n\t(cancel_breakpoint): Rename to...\n\t(darwin_nat_target::cancel_breakpoint): ... this.\n\t(darwin_wait): Rename to...\n\t(darwin_nat_target::wait_1): ... this.  Use range-based for loop\n\tinstead of iterate_over_inferiors.\n\t(darwin_nat_target::wait): Call wait_1 instead of darwin_wait.\n\t(darwin_stop_inferior): Rename to...\n\t(darwin_nat_target::stop_inferior): ... this.\n\t(darwin_nat_target::kill): Call wait_1 instead of darwin_wait.\n\t(darwin_init_thread_list): Rename to...\n\t(darwin_nat_target::init_thread_list): ... this.\n\t(darwin_ptrace_him): Rename to...\n\t(darwin_nat_target::ptrace_him): ... this.\n\t(darwin_nat_target::create_inferior): Pass lambda function to\n\tfork_inferior.\n\t(darwin_nat_target::detach): Call stop_inferior instead of\n\tdarwin_stop_inferior.\n\t* fork-inferior.h (fork_inferior): Change init_trace_fun\n\tparameter to gdb::function_view.\n\t* fork-inferior.c (fork_inferior): Likewise.",
    "tree": {
      "sha": "3a6604516329537f266caad46f6e5ced02e5ecb4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3a6604516329537f266caad46f6e5ced02e5ecb4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c162ed3e66aa985fa2e79d0e7ccd2da80a532c1e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c162ed3e66aa985fa2e79d0e7ccd2da80a532c1e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c162ed3e66aa985fa2e79d0e7ccd2da80a532c1e"
    }
  ],
  "stats": {
    "total": 269,
    "additions": 160,
    "deletions": 109
  },
  "files": [
    {
      "sha": "b1c437bfd27496b3a29a1f23192a8232143dc33b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8",
      "patch": "@@ -1,3 +1,40 @@\n+2020-01-23  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* darwin-nat.h (struct darwin_exception_msg, enum\n+\tdarwin_msg_state, struct darwin_thread_info, darwin_thread_t):\n+\tMove up.\n+\t(class darwin_nat_target) <wait_1, check_new_threads,\n+\tdecode_exception_message, decode_message, stop_inferior,\n+\tinit_thread_list, ptrace_him, cancel_breakpoint>: Declare.\n+\t* darwin-nat.c (darwin_check_new_threads): Rename to...\n+\t(darwin_nat_target::check_new_threads): ... this.\n+\t(darwin_suspend_inferior_it): Remove.\n+\t(darwin_decode_exception_message): Rename to...\n+\t(darwin_nat_target::decode_exception_message): ... this.\n+\t(darwin_nat_target::resume): Pass target to find_inferior_ptid.\n+\t(darwin_decode_message): Rename to...\n+\t(darwin_nat_target::decode_message): ... this.\n+\t(cancel_breakpoint): Rename to...\n+\t(darwin_nat_target::cancel_breakpoint): ... this.\n+\t(darwin_wait): Rename to...\n+\t(darwin_nat_target::wait_1): ... this.  Use range-based for loop\n+\tinstead of iterate_over_inferiors.\n+\t(darwin_nat_target::wait): Call wait_1 instead of darwin_wait.\n+\t(darwin_stop_inferior): Rename to...\n+\t(darwin_nat_target::stop_inferior): ... this.\n+\t(darwin_nat_target::kill): Call wait_1 instead of darwin_wait.\n+\t(darwin_init_thread_list): Rename to...\n+\t(darwin_nat_target::init_thread_list): ... this.\n+\t(darwin_ptrace_him): Rename to...\n+\t(darwin_nat_target::ptrace_him): ... this.\n+\t(darwin_nat_target::create_inferior): Pass lambda function to\n+\tfork_inferior.\n+\t(darwin_nat_target::detach): Call stop_inferior instead of\n+\tdarwin_stop_inferior.\n+\t* fork-inferior.h (fork_inferior): Change init_trace_fun\n+\tparameter to gdb::function_view.\n+\t* fork-inferior.c (fork_inferior): Likewise.\n+\n 2020-01-23  Hannes Domani  <ssbssa@yahoo.de>\n \n \t* i386-cygwin-tdep.c (core_process_module_section): Update."
    },
    {
      "sha": "27677d16eae17fa2977356404ce57be9ffaf2fa5",
      "filename": "gdb/darwin-nat.c",
      "status": "modified",
      "additions": 50,
      "deletions": 53,
      "changes": 103,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8/gdb/darwin-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8/gdb/darwin-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.c?ref=e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8",
      "patch": "@@ -89,12 +89,8 @@\n #define PTRACE(CMD, PID, ADDR, SIG) \\\n  darwin_ptrace(#CMD, CMD, (PID), (ADDR), (SIG))\n \n-static ptid_t darwin_wait (ptid_t ptid, struct target_waitstatus *status);\n-\n static void darwin_ptrace_me (void);\n \n-static void darwin_ptrace_him (int pid);\n-\n static void darwin_encode_reply (mig_reply_error_t *reply,\n \t\t\t\t mach_msg_header_t *hdr, integer_t code);\n \n@@ -258,8 +254,8 @@ cmp_thread_t (const void *l, const void *r)\n   return (int)(tl - tr);\n }\n \n-static void\n-darwin_check_new_threads (struct inferior *inf)\n+void\n+darwin_nat_target::check_new_threads (inferior *inf)\n {\n   kern_return_t kret;\n   thread_array_t thread_list;\n@@ -355,7 +351,7 @@ darwin_check_new_threads (struct inferior *inf)\n \t  pti->msg_state = DARWIN_RUNNING;\n \n \t  /* Add the new thread.  */\n-\t  add_thread_with_info (ptid_t (inf->pid, 0, new_id), pti);\n+\t  add_thread_with_info (this, ptid_t (inf->pid, 0, new_id), pti);\n \t  new_thread_vec.push_back (pti);\n \t  new_ix++;\n \t  continue;\n@@ -364,7 +360,7 @@ darwin_check_new_threads (struct inferior *inf)\n \t{\n \t  /* A thread was removed.  */\n \t  struct thread_info *thr\n-\t    = find_thread_ptid (ptid_t (inf->pid, 0, old_id));\n+\t    = find_thread_ptid (this, ptid_t (inf->pid, 0, old_id));\n \t  delete_thread (thr);\n \t  kret = mach_port_deallocate (gdb_task, old_id);\n \t  MACH_CHECK_ERROR (kret);\n@@ -464,14 +460,6 @@ darwin_resume_inferior (struct inferior *inf)\n \n /* Iterator functions.  */\n \n-static int\n-darwin_suspend_inferior_it (struct inferior *inf, void *arg)\n-{\n-  darwin_suspend_inferior (inf);\n-  darwin_check_new_threads (inf);\n-  return 0;\n-}\n-\n static int\n darwin_resume_inferior_it (struct inferior *inf, void *arg)\n {\n@@ -611,10 +599,10 @@ darwin_check_message_ndr (NDR_record_t *ndr)\n \n /* Decode an exception message.  */\n \n-static int\n-darwin_decode_exception_message (mach_msg_header_t *hdr,\n-\t\t\t\t struct inferior **pinf,\n-\t\t\t\t darwin_thread_t **pthread)\n+int\n+darwin_nat_target::decode_exception_message (mach_msg_header_t *hdr,\n+\t\t\t\t\t     inferior **pinf,\n+\t\t\t\t\t     darwin_thread_t **pthread)\n {\n   mach_msg_body_t *bod = (mach_msg_body_t*)(hdr + 1);\n   mach_msg_port_descriptor_t *desc = (mach_msg_port_descriptor_t *)(bod + 1);\n@@ -712,7 +700,7 @@ darwin_decode_exception_message (mach_msg_header_t *hdr,\n   /* Find thread by port.  */\n   /* Check for new threads.  Do it early so that the port in the exception\n      message can be deallocated.  */\n-  darwin_check_new_threads (inf);\n+  check_new_threads (inf);\n \n   /* Free the thread port (as gdb knows the thread, it has already has a right\n      for it, so this just decrement a reference counter).  */\n@@ -975,7 +963,7 @@ darwin_nat_target::resume (ptid_t ptid, int step, enum gdb_signal signal)\n     }\n   else\n     {\n-      struct inferior *inf = find_inferior_ptid (ptid);\n+      inferior *inf = find_inferior_ptid (this, ptid);\n       long tid = ptid.tid ();\n \n       /* Stop the inferior (should be useless).  */\n@@ -1001,11 +989,11 @@ darwin_nat_target::resume (ptid_t ptid, int step, enum gdb_signal signal)\n     }\n }\n \n-static ptid_t\n-darwin_decode_message (mach_msg_header_t *hdr,\n-\t\t       darwin_thread_t **pthread,\n-\t\t       struct inferior **pinf,\n-\t\t       struct target_waitstatus *status)\n+ptid_t\n+darwin_nat_target::decode_message (mach_msg_header_t *hdr,\n+\t\t\t\t   darwin_thread_t **pthread,\n+\t\t\t\t   inferior **pinf,\n+\t\t\t\t   target_waitstatus *status)\n {\n   darwin_thread_t *thread;\n   struct inferior *inf;\n@@ -1016,7 +1004,7 @@ darwin_decode_message (mach_msg_header_t *hdr,\n       int res;\n \n       /* Decode message.  */\n-      res = darwin_decode_exception_message (hdr, &inf, &thread);\n+      res = decode_exception_message (hdr, &inf, &thread);\n \n       if (res < 0)\n \t{\n@@ -1172,8 +1160,8 @@ darwin_decode_message (mach_msg_header_t *hdr,\n   return minus_one_ptid;\n }\n \n-static int\n-cancel_breakpoint (ptid_t ptid)\n+int\n+darwin_nat_target::cancel_breakpoint (ptid_t ptid)\n {\n   /* Arrange for a breakpoint to be hit again later.  We will handle\n      the current event, eventually we will resume this thread, and this\n@@ -1183,7 +1171,7 @@ cancel_breakpoint (ptid_t ptid)\n      delete or disable the breakpoint, but the thread will have already\n      tripped on it.  */\n \n-  struct regcache *regcache = get_thread_regcache (ptid);\n+  struct regcache *regcache = get_thread_regcache (this, ptid);\n   struct gdbarch *gdbarch = regcache->arch ();\n   CORE_ADDR pc;\n \n@@ -1202,8 +1190,8 @@ cancel_breakpoint (ptid_t ptid)\n   return 0;\n }\n \n-static ptid_t\n-darwin_wait (ptid_t ptid, struct target_waitstatus *status)\n+ptid_t\n+darwin_nat_target::wait_1 (ptid_t ptid, struct target_waitstatus *status)\n {\n   kern_return_t kret;\n   union\n@@ -1262,7 +1250,7 @@ darwin_wait (ptid_t ptid, struct target_waitstatus *status)\n       if (darwin_debug_flag > 10)\n \tdarwin_dump_message (hdr, darwin_debug_flag > 11);\n \n-      res = darwin_decode_message (hdr, &thread, &inf, status);\n+      res = decode_message (hdr, &thread, &inf, status);\n       if (res == minus_one_ptid)\n \tcontinue;\n \n@@ -1273,7 +1261,11 @@ darwin_wait (ptid_t ptid, struct target_waitstatus *status)\n   while (status->kind == TARGET_WAITKIND_IGNORE);\n \n   /* Stop all tasks.  */\n-  iterate_over_inferiors (darwin_suspend_inferior_it, NULL);\n+  for (inferior *inf : all_inferiors (this))\n+    {\n+      darwin_suspend_inferior (inf);\n+      check_new_threads (inf);\n+    }\n \n   /* Read pending messages.  */\n   while (1)\n@@ -1298,7 +1290,7 @@ darwin_wait (ptid_t ptid, struct target_waitstatus *status)\n       if (darwin_debug_flag > 10)\n \tdarwin_dump_message (hdr, darwin_debug_flag > 11);\n \n-      ptid2 = darwin_decode_message (hdr, &thread, &inf, &status2);\n+      ptid2 = decode_message (hdr, &thread, &inf, &status2);\n \n       if (inf != NULL && thread != NULL\n \t  && thread->event.ex_type == EXC_BREAKPOINT)\n@@ -1325,7 +1317,7 @@ ptid_t\n darwin_nat_target::wait (ptid_t ptid, struct target_waitstatus *status,\n \t\t\t int options)\n {\n-  return darwin_wait (ptid, status);\n+  return wait_1 (ptid, status);\n }\n \n void\n@@ -1415,8 +1407,8 @@ darwin_reply_to_all_pending_messages (struct inferior *inf)\n     }\n }\n \n-static void\n-darwin_stop_inferior (struct inferior *inf)\n+void\n+darwin_nat_target::stop_inferior (inferior *inf)\n {\n   struct target_waitstatus wstatus;\n   ptid_t ptid;\n@@ -1432,14 +1424,14 @@ darwin_stop_inferior (struct inferior *inf)\n   if (priv->no_ptrace)\n     return;\n \n-  res = kill (inf->pid, SIGSTOP);\n+  res = ::kill (inf->pid, SIGSTOP);\n   if (res != 0)\n     warning (_(\"cannot kill: %s\"), safe_strerror (errno));\n \n   /* Wait until the process is really stopped.  */\n   while (1)\n     {\n-      ptid = darwin_wait (inferior_ptid, &wstatus);\n+      ptid = wait_1 (inferior_ptid, &wstatus);\n       if (wstatus.kind == TARGET_WAITKIND_STOPPED\n \t  && wstatus.value.sig == GDB_SIGNAL_STOP)\n \tbreak;\n@@ -1564,7 +1556,7 @@ darwin_nat_target::kill ()\n \n       darwin_resume_inferior (inf);\n \n-      ptid = darwin_wait (inferior_ptid, &wstatus);\n+      ptid = wait_1 (inferior_ptid, &wstatus);\n     }\n   else if (errno != ESRCH)\n     warning (_(\"Failed to kill inferior: kill (%d, 9) returned [%s]\"),\n@@ -1716,10 +1708,10 @@ thread_info_from_private_thread_info (darwin_thread_info *pti)\n   gdb_assert_not_reached (\"did not find gdb thread for darwin thread\");\n }\n \n-static void\n-darwin_init_thread_list (struct inferior *inf)\n+void\n+darwin_nat_target::init_thread_list (inferior *inf)\n {\n-  darwin_check_new_threads (inf);\n+  check_new_threads (inf);\n \n   darwin_inferior *priv = get_darwin_inferior (inf);\n \n@@ -1783,21 +1775,21 @@ darwin_pre_ptrace (void)\n   mark_fd_no_cloexec (ptrace_fds[1]);\n }\n \n-static void\n-darwin_ptrace_him (int pid)\n+void\n+darwin_nat_target::ptrace_him (int pid)\n {\n   struct inferior *inf = current_inferior ();\n \n   darwin_attach_pid (inf);\n \n   /* Let's the child run.  */\n-  close (ptrace_fds[0]);\n-  close (ptrace_fds[1]);\n+  ::close (ptrace_fds[0]);\n+  ::close (ptrace_fds[1]);\n \n   unmark_fd_no_cloexec (ptrace_fds[0]);\n   unmark_fd_no_cloexec (ptrace_fds[1]);\n \n-  darwin_init_thread_list (inf);\n+  init_thread_list (inf);\n \n   gdb_startup_inferior (pid, START_INFERIOR_TRAPS_EXPECTED);\n }\n@@ -1986,6 +1978,7 @@ darwin_nat_target::create_inferior (const char *exec_file,\n \t\t\t\t    char **env, int from_tty)\n {\n   gdb::optional<scoped_restore_tmpl<bool>> restore_startup_with_shell;\n+  darwin_nat_target *the_target = this;\n \n   if (startup_with_shell && may_have_sip ())\n     {\n@@ -1998,7 +1991,11 @@ darwin_nat_target::create_inferior (const char *exec_file,\n \n   /* Do the hard work.  */\n   fork_inferior (exec_file, allargs, env, darwin_ptrace_me,\n-\t\t darwin_ptrace_him, darwin_pre_ptrace, copied_shell,\n+\t\t [the_target] (int pid)\n+\t\t   {\n+\t\t     the_target->ptrace_him (pid);\n+\t\t   },\n+\t\t darwin_pre_ptrace, copied_shell,\n \t\t darwin_execvp);\n }\n \f\n@@ -2068,7 +2065,7 @@ darwin_nat_target::attach (const char *args, int from_tty)\n \n   darwin_suspend_inferior (inf);\n \n-  darwin_init_thread_list (inf);\n+  init_thread_list (inf);\n \n   darwin_inferior *priv = get_darwin_inferior (inf);\n \n@@ -2099,7 +2096,7 @@ darwin_nat_target::detach (inferior *inf, int from_tty)\n \n   /* If ptrace() is in use, stop the process.  */\n   if (!priv->no_ptrace)\n-    darwin_stop_inferior (inf);\n+    stop_inferior (inf);\n \n   kret = darwin_restore_exception_ports (priv);\n   MACH_CHECK_ERROR (kret);"
    },
    {
      "sha": "86bb338921220593e2461b8efb0f99f8089f42f2",
      "filename": "gdb/darwin-nat.h",
      "status": "modified",
      "additions": 68,
      "deletions": 53,
      "changes": 121,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8/gdb/darwin-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8/gdb/darwin-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.h?ref=e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8",
      "patch": "@@ -21,6 +21,59 @@\n #include <mach/mach.h>\n #include \"gdbthread.h\"\n \n+struct darwin_exception_msg\n+{\n+  mach_msg_header_t header;\n+\n+  /* Thread and task taking the exception.  */\n+  mach_port_t thread_port;\n+  mach_port_t task_port;\n+\n+  /* Type of the exception.  */\n+  exception_type_t ex_type;\n+\n+  /* Machine dependent details.  */\n+  mach_msg_type_number_t data_count;\n+  integer_t ex_data[2];\n+};\n+\n+enum darwin_msg_state\n+{\n+  /* The thread is running.  */\n+  DARWIN_RUNNING,\n+\n+  /* The thread is stopped.  */\n+  DARWIN_STOPPED,\n+\n+  /* The thread has sent a message and waits for a reply.  */\n+  DARWIN_MESSAGE\n+};\n+\n+struct darwin_thread_info : public private_thread_info\n+{\n+  /* The thread port from a GDB point of view.  */\n+  thread_t gdb_port = 0;\n+\n+  /* The thread port from the inferior point of view.  Not to be used inside\n+     gdb except for get_ada_task_ptid.  */\n+  thread_t inf_port = 0;\n+\n+  /* Current message state.\n+     If the kernel has sent a message it expects a reply and the inferior\n+     can't be killed before.  */\n+  enum darwin_msg_state msg_state = DARWIN_RUNNING;\n+\n+  /* True if this thread is single-stepped.  */\n+  bool single_step = false;\n+\n+  /* True if a signal was manually sent to the thread.  */\n+  bool signaled = false;\n+\n+  /* The last exception received.  */\n+  struct darwin_exception_msg event {};\n+};\n+typedef struct darwin_thread_info darwin_thread_t;\n+\n /* This needs to be overridden by the platform specific nat code.  */\n \n class darwin_nat_target : public inf_child_target\n@@ -59,6 +112,21 @@ class darwin_nat_target : public inf_child_target\n   bool supports_multi_process () override;\n \n   ptid_t get_ada_task_ptid (long lwp, long thread) override;\n+\n+private:\n+  ptid_t wait_1 (ptid_t, struct target_waitstatus *);\n+  void check_new_threads (inferior *inf);\n+  int decode_exception_message (mach_msg_header_t *hdr,\n+\t\t\t        inferior **pinf,\n+\t\t\t\tdarwin_thread_t **pthread);\n+  ptid_t decode_message (mach_msg_header_t *hdr,\n+\t\t\t darwin_thread_t **pthread,\n+\t\t\t inferior **pinf,\n+\t\t\t target_waitstatus *status);\n+  void stop_inferior (inferior *inf);\n+  void init_thread_list (inferior *inf);\n+  void ptrace_him (int pid);\n+  int cancel_breakpoint (ptid_t ptid);\n };\n \n /* Describe the mach exception handling state for a task.  This state is saved\n@@ -83,59 +151,6 @@ struct darwin_exception_info\n   mach_msg_type_number_t count = 0;\n };\n \n-struct darwin_exception_msg\n-{\n-  mach_msg_header_t header;\n-\n-  /* Thread and task taking the exception.  */\n-  mach_port_t thread_port;\n-  mach_port_t task_port;\n-\n-  /* Type of the exception.  */\n-  exception_type_t ex_type;\n-\n-  /* Machine dependent details.  */\n-  mach_msg_type_number_t data_count;\n-  integer_t ex_data[2];\n-};\n-\n-enum darwin_msg_state\n-{\n-  /* The thread is running.  */\n-  DARWIN_RUNNING,\n-\n-  /* The thread is stopped.  */\n-  DARWIN_STOPPED,\n-\n-  /* The thread has sent a message and waits for a reply.  */\n-  DARWIN_MESSAGE\n-};\n-\n-struct darwin_thread_info : public private_thread_info\n-{\n-  /* The thread port from a GDB point of view.  */\n-  thread_t gdb_port = 0;\n-\n-  /* The thread port from the inferior point of view.  Not to be used inside\n-     gdb except for get_ada_task_ptid.  */\n-  thread_t inf_port = 0;\n-\n-  /* Current message state.\n-     If the kernel has sent a message it expects a reply and the inferior\n-     can't be killed before.  */\n-  enum darwin_msg_state msg_state = DARWIN_RUNNING;\n-\n-  /* True if this thread is single-stepped.  */\n-  bool single_step = false;\n-\n-  /* True if a signal was manually sent to the thread.  */\n-  bool signaled = false;\n-\n-  /* The last exception received.  */\n-  struct darwin_exception_msg event {};\n-};\n-typedef struct darwin_thread_info darwin_thread_t;\n-\n static inline darwin_thread_info *\n get_darwin_thread_info (class thread_info *thread)\n {"
    },
    {
      "sha": "1185ef8998b760d8d152582d9527d34895932a20",
      "filename": "gdb/nat/fork-inferior.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8/gdb/nat/fork-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8/gdb/nat/fork-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/fork-inferior.c?ref=e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8",
      "patch": "@@ -267,7 +267,8 @@ execv_argv::init_for_shell (const char *exec_file,\n pid_t\n fork_inferior (const char *exec_file_arg, const std::string &allargs,\n \t       char **env, void (*traceme_fun) (),\n-\t       void (*init_trace_fun) (int), void (*pre_trace_fun) (),\n+\t       gdb::function_view<void (int)> init_trace_fun,\n+\t       void (*pre_trace_fun) (),\n \t       const char *shell_file_arg,\n                void (*exec_fun)(const char *file, char * const *argv,\n                                 char * const *env))\n@@ -439,7 +440,7 @@ fork_inferior (const char *exec_file_arg, const std::string &allargs,\n      initialize anything target-vector-specific that needs\n      initializing.  */\n   if (init_trace_fun)\n-    (*init_trace_fun) (pid);\n+    init_trace_fun (pid);\n \n   /* We are now in the child process of interest, having exec'd the\n      correct program, and are poised at the first instruction of the"
    },
    {
      "sha": "cf6f137edd1b738493012c792688757fac191333",
      "filename": "gdb/nat/fork-inferior.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8/gdb/nat/fork-inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8/gdb/nat/fork-inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/fork-inferior.h?ref=e7eee665a1524cc4569d0c2f5c9d4aa2be64c9e8",
      "patch": "@@ -21,6 +21,7 @@\n #define NAT_FORK_INFERIOR_H\n \n #include <string>\n+#include \"gdbsupport/function-view.h\"\n \n struct process_stratum_target;\n \n@@ -42,7 +43,7 @@ struct process_stratum_target;\n extern pid_t fork_inferior (const char *exec_file_arg,\n \t\t\t    const std::string &allargs,\n \t\t\t    char **env, void (*traceme_fun) (),\n-\t\t\t    void (*init_trace_fun) (int),\n+\t\t\t    gdb::function_view<void (int)> init_trace_fun,\n \t\t\t    void (*pre_trace_fun) (),\n \t\t\t    const char *shell_file_arg,\n \t\t\t    void (*exec_fun) (const char *file,"
    }
  ]
}