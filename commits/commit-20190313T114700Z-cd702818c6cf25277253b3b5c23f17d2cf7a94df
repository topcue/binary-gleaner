{
  "sha": "cd702818c6cf25277253b3b5c23f17d2cf7a94df",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2Q3MDI4MThjNmNmMjUyNzcyNTNiM2I1YzIzZjE3ZDJjZjdhOTRkZg==",
  "commit": {
    "author": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-03-13T10:42:27Z"
    },
    "committer": {
      "name": "Sudakshina Das",
      "email": "sudi.das@arm.com",
      "date": "2019-03-13T11:47:00Z"
    },
    "message": "[BFD, LD, AArch64, 1/3] Add support for GNU PROPERTIES in AArch64 for BTI and PAC\n\nThis is part of the patch series to add support for BTI and\nPAC in AArch64 linker.\n\nThis patch implements the following:\n1) This extends in the gnu property support in the linker for\nAArch64 by defining backend hooks for elf_backend_setup_gnu_properties,\nelf_backend_merge_gnu_properties and elf_backend_parse_gnu_properties.\n2) It defines AArch64 specific GNU property\nGNU_PROPERTY_AARCH64_FEATURE_1_AND and 2 bit for BTI and PAC in it.\n3) It also adds support in readelf.c to read and print these new\nGNU properties in AArch64.\nAll these are made according to the new AArch64 ELF ABI\nhttps://developer.arm.com/docs/ihi0056/latest/elf-for-the-arm-64-bit-architecture-aarch64-abi-2018q4\n\n*** bfd/ChangeLog ***\n\n2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n\n\t* elf-properties.c (_bfd_elf_link_setup_gnu_properties): Exclude\n\tlinker created inputs from merge.\n\t* elfnn-aarch64.c (struct elf_aarch64_obj_tdata): Add field for\n\tGNU_PROPERTY_AARCH64_FEATURE_1_AND properties.\n\t(elfNN_aarch64_link_setup_gnu_properties): New.\n\t(elfNN_aarch64_merge_gnu_properties): New.\n\t(elf_backend_setup_gnu_properties): Define for AArch64.\n\t(elf_backend_merge_gnu_properties): Likewise.\n\t* elfxx-aarch64.c (_bfd_aarch64_elf_link_setup_gnu_properties): Define.\n\t(_bfd_aarch64_elf_parse_gnu_properties): Define.\n\t(_bfd_aarch64_elf_merge_gnu_properties): Define.\n\t* elfxx-aarch64.h (_bfd_aarch64_elf_link_setup_gnu_properties): Declare.\n\t(_bfd_aarch64_elf_parse_gnu_properties): Declare.\n\t(_bfd_aarch64_elf_merge_gnu_properties): Declare.\n\t(elf_backend_parse_gnu_properties): Define for AArch64.\n\n*** binutils/ChangeLog ***\n\n2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n\n\t* readelf.c (decode_aarch64_feature_1_and): New.\n\t(print_gnu_property_note): Add case for AArch64 gnu notes.\n\n*** include/ChangeLog ***\n\n2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n\n\t* elf/common.h (GNU_PROPERTY_AARCH64_FEATURE_1_AND): New.\n\t(GNU_PROPERTY_AARCH64_FEATURE_1_BTI): New.\n\t(GNU_PROPERTY_AARCH64_FEATURE_1_PAC): New.\n\n*** ld/ChangeLog ***\n\n2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n\n\t* NEWS: Document GNU_PROPERTY_AARCH64_FEATURE_1_BTI and\n\tGNU_PROPERTY_AARCH64_FEATURE_1_PAC.\n\t* testsuite/ld-aarch64/aarch64-elf.exp: Add run commands for new tests.\n\t* testsuite/ld-aarch64/property-bti-pac1.d: New test.\n\t* testsuite/ld-aarch64/property-bti-pac1.s: New test.\n\t* testsuite/ld-aarch64/property-bti-pac2.d: New test.\n\t* testsuite/ld-aarch64/property-bti-pac2.s: New test.\n\t* testsuite/ld-aarch64/property-bti-pac3.d: New test.",
    "tree": {
      "sha": "adf2c3ce998dc047a9f77fe8e4d2765dae5812bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/adf2c3ce998dc047a9f77fe8e4d2765dae5812bd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cd702818c6cf25277253b3b5c23f17d2cf7a94df",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd702818c6cf25277253b3b5c23f17d2cf7a94df",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cd702818c6cf25277253b3b5c23f17d2cf7a94df",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd702818c6cf25277253b3b5c23f17d2cf7a94df/comments",
  "author": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "sudakshina-das-arm",
    "id": 28538945,
    "node_id": "MDQ6VXNlcjI4NTM4OTQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/28538945?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/sudakshina-das-arm",
    "html_url": "https://github.com/sudakshina-das-arm",
    "followers_url": "https://api.github.com/users/sudakshina-das-arm/followers",
    "following_url": "https://api.github.com/users/sudakshina-das-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/sudakshina-das-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/sudakshina-das-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/sudakshina-das-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/sudakshina-das-arm/orgs",
    "repos_url": "https://api.github.com/users/sudakshina-das-arm/repos",
    "events_url": "https://api.github.com/users/sudakshina-das-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/sudakshina-das-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "44b27f959abf267fc9ec228f4131c932597b01d4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/44b27f959abf267fc9ec228f4131c932597b01d4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/44b27f959abf267fc9ec228f4131c932597b01d4"
    }
  ],
  "stats": {
    "total": 454,
    "additions": 453,
    "deletions": 1
  },
  "files": [
    {
      "sha": "3e5c7c25c5687c4632567e5f39533ef991b896a3",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -1,3 +1,21 @@\n+2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* elf-properties.c (_bfd_elf_link_setup_gnu_properties): Exclude\n+\tlinker created inputs from merge.\n+\t* elfnn-aarch64.c (struct elf_aarch64_obj_tdata): Add field for\n+\tGNU_PROPERTY_AARCH64_FEATURE_1_AND properties.\n+\t(elfNN_aarch64_link_setup_gnu_properties): New.\n+\t(elfNN_aarch64_merge_gnu_properties): New.\n+\t(elf_backend_setup_gnu_properties): Define for AArch64.\n+\t(elf_backend_merge_gnu_properties): Likewise.\n+\t* elfxx-aarch64.c (_bfd_aarch64_elf_link_setup_gnu_properties): Define.\n+\t(_bfd_aarch64_elf_parse_gnu_properties): Define.\n+\t(_bfd_aarch64_elf_merge_gnu_properties): Define.\n+\t* elfxx-aarch64.h (_bfd_aarch64_elf_link_setup_gnu_properties): Declare.\n+\t(_bfd_aarch64_elf_parse_gnu_properties): Declare.\n+\t(_bfd_aarch64_elf_merge_gnu_properties): Declare.\n+\t(elf_backend_parse_gnu_properties): Define for AArch64.\n+\n 2019-03-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/24322"
    },
    {
      "sha": "0c3f19ce56a36bb18d9afd2e140d735eeaf9c6a9",
      "filename": "bfd/elf-properties.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/bfd/elf-properties.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/bfd/elf-properties.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-properties.c?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -555,7 +555,7 @@ _bfd_elf_link_setup_gnu_properties (struct bfd_link_info *info)\n \n   for (abfd = info->input_bfds; abfd != NULL; abfd = abfd->link.next)\n     if (abfd != first_pbfd\n-\t&& (abfd->flags & (DYNAMIC | BFD_PLUGIN)) == 0)\n+\t&& (abfd->flags & (DYNAMIC | BFD_PLUGIN | BFD_LINKER_CREATED)) == 0)\n       {\n \telf_property_list *null_ptr = NULL;\n \telf_property_list **listp = &null_ptr;"
    },
    {
      "sha": "5b8cc4c9701feacd0deb5c998c89d17d97864646",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -2435,6 +2435,9 @@ struct elf_aarch64_obj_tdata\n \n   /* Zero to warn when linking objects with incompatible wchar_t sizes.  */\n   int no_wchar_size_warning;\n+\n+  /* All GNU_PROPERTY_AARCH64_FEATURE_1_AND properties.  */\n+  uint32_t gnu_and_prop;\n };\n \n #define elf_aarch64_tdata(bfd)\t\t\t\t\\\n@@ -9615,6 +9618,32 @@ elfNN_aarch64_backend_symbol_processing (bfd *abfd, asymbol *sym)\n     sym->flags |= BSF_KEEP;\n }\n \n+/* Implement elf_backend_setup_gnu_properties for AArch64.  It serves as a\n+   wrapper function for _bfd_aarch64_elf_link_setup_gnu_properties to account\n+   for the effect of GNU properties of the output_bfd.  */\n+static bfd *\n+elfNN_aarch64_link_setup_gnu_properties (struct bfd_link_info *info)\n+{\n+  uint32_t prop = elf_aarch64_tdata (info->output_bfd)->gnu_and_prop;\n+  bfd *pbfd = _bfd_aarch64_elf_link_setup_gnu_properties (info, &prop);\n+  elf_aarch64_tdata (info->output_bfd)->gnu_and_prop = prop;\n+  return pbfd;\n+}\n+\n+/* Implement elf_backend_merge_gnu_properties for AArch64.  It serves as a\n+   wrapper function for _bfd_aarch64_elf_merge_gnu_properties to account\n+   for the effect of GNU properties of the output_bfd.  */\n+static bfd_boolean\n+elfNN_aarch64_merge_gnu_properties (struct bfd_link_info *info,\n+\t\t\t\t       bfd *abfd,\n+\t\t\t\t       elf_property *aprop,\n+\t\t\t\t       elf_property *bprop)\n+{\n+  uint32_t prop\n+    = elf_aarch64_tdata (info->output_bfd)->gnu_and_prop;\n+  return  _bfd_aarch64_elf_merge_gnu_properties (info, abfd, aprop,\n+\t\t\t\t\t\t bprop, prop);\n+}\n \n /* We use this so we can override certain functions\n    (though currently we don't).  */\n@@ -9754,6 +9783,12 @@ const struct elf_size_info elfNN_aarch64_size_info =\n #define elf_backend_symbol_processing\t\t\\\n   elfNN_aarch64_backend_symbol_processing\n \n+#define elf_backend_setup_gnu_properties\t\\\n+  elfNN_aarch64_link_setup_gnu_properties\n+\n+#define elf_backend_merge_gnu_properties\t\\\n+  elfNN_aarch64_merge_gnu_properties\n+\n #define elf_backend_can_refcount       1\n #define elf_backend_can_gc_sections    1\n #define elf_backend_plt_readonly       1"
    },
    {
      "sha": "cae94d03e8453de0cceee1619668fff71a609edf",
      "filename": "bfd/elfxx-aarch64.c",
      "status": "modified",
      "additions": 180,
      "deletions": 0,
      "changes": 180,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/bfd/elfxx-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/bfd/elfxx-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-aarch64.c?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -683,3 +683,183 @@ _bfd_aarch64_elf_write_core_note (bfd *abfd, char *buf, int *bufsiz, int note_ty\n       }\n     }\n }\n+\n+/* Find the first input bfd with GNU property and merge it with GPROP.  If no\n+   such input is found, add it to a new section at the last input.  Update\n+   GPROP accordingly.  */\n+bfd *\n+_bfd_aarch64_elf_link_setup_gnu_properties (struct bfd_link_info *info,\n+\t\t\t\t\t    uint32_t *gprop)\n+{\n+  asection *sec;\n+  bfd *pbfd;\n+  bfd *ebfd = NULL;\n+  elf_property *prop;\n+\n+  uint32_t gnu_prop = *gprop;\n+\n+  /* Find a normal input file with GNU property note.  */\n+  for (pbfd = info->input_bfds;\n+       pbfd != NULL;\n+       pbfd = pbfd->link.next)\n+    if (bfd_get_flavour (pbfd) == bfd_target_elf_flavour\n+\t&& bfd_count_sections (pbfd) != 0)\n+      {\n+\tebfd = pbfd;\n+\n+\tif (elf_properties (pbfd) != NULL)\n+\t  break;\n+      }\n+\n+  /* If ebfd != NULL it is either an input with property note or the last\n+     input.  Either way if we have gnu_prop, we should add it (by creating\n+     a section if needed).  */\n+  if (ebfd != NULL && gnu_prop)\n+    {\n+      prop = _bfd_elf_get_property (ebfd,\n+\t\t\t\t    GNU_PROPERTY_AARCH64_FEATURE_1_AND,\n+\t\t\t\t    4);\n+      prop->u.number |= gnu_prop;\n+      prop->pr_kind = property_number;\n+\n+      /* pbfd being NULL implies ebfd is the last input.  Create the GNU\n+\t property note section.  */\n+      if (pbfd == NULL)\n+\t{\n+\t  sec = bfd_make_section_with_flags (ebfd,\n+\t\t\t\t\t     NOTE_GNU_PROPERTY_SECTION_NAME,\n+\t\t\t\t\t     (SEC_ALLOC\n+\t\t\t\t\t      | SEC_LOAD\n+\t\t\t\t\t      | SEC_IN_MEMORY\n+\t\t\t\t\t      | SEC_READONLY\n+\t\t\t\t\t      | SEC_HAS_CONTENTS\n+\t\t\t\t\t      | SEC_DATA));\n+\t  if (sec == NULL)\n+\t    info->callbacks->einfo (\n+\t      _(\"%F%P: failed to create GNU property section\\n\"));\n+\n+\t  elf_section_type (sec) = SHT_NOTE;\n+\t}\n+    }\n+\n+  pbfd = _bfd_elf_link_setup_gnu_properties (info);\n+\n+  if (bfd_link_relocatable (info))\n+    return pbfd;\n+\n+  /* If pbfd has any GNU_PROPERTY_AARCH64_FEATURE_1_AND properties, update\n+     gnu_prop accordingly.  */\n+  if (pbfd != NULL)\n+    {\n+      elf_property_list *p;\n+\n+      /* The property list is sorted in order of type.  */\n+      for (p = elf_properties (pbfd); p; p = p->next)\n+\t{\n+\t  /* Check for all GNU_PROPERTY_AARCH64_FEATURE_1_AND.  */\n+\t  if (GNU_PROPERTY_AARCH64_FEATURE_1_AND == p->property.pr_type)\n+\t    {\n+\t      gnu_prop = (p->property.u.number\n+\t\t\t  & (GNU_PROPERTY_AARCH64_FEATURE_1_PAC\n+\t\t\t      | GNU_PROPERTY_AARCH64_FEATURE_1_BTI));\n+\t      break;\n+\t    }\n+\t  else if (GNU_PROPERTY_AARCH64_FEATURE_1_AND < p->property.pr_type)\n+\t    break;\n+\t}\n+    }\n+  *gprop = gnu_prop;\n+  return pbfd;\n+}\n+\n+/* Define elf_backend_parse_gnu_properties for AArch64.  */\n+enum elf_property_kind\n+_bfd_aarch64_elf_parse_gnu_properties (bfd *abfd, unsigned int type,\n+\t\t\t\t       bfd_byte *ptr, unsigned int datasz)\n+{\n+  elf_property *prop;\n+\n+  switch (type)\n+    {\n+    case GNU_PROPERTY_AARCH64_FEATURE_1_AND:\n+      if (datasz != 4)\n+\t{\n+\t  _bfd_error_handler\n+\t    ( _(\"error: %pB: <corrupt AArch64 used size: 0x%x>\"),\n+\t     abfd, datasz);\n+\t  return property_corrupt;\n+\t}\n+      prop = _bfd_elf_get_property (abfd, type, datasz);\n+      /* Combine properties of the same type.  */\n+      prop->u.number |= bfd_h_get_32 (abfd, ptr);\n+      prop->pr_kind = property_number;\n+      break;\n+\n+    default:\n+      return property_ignored;\n+    }\n+\n+  return property_number;\n+}\n+\n+/* Merge AArch64 GNU property BPROP with APROP also accounting for PROP.\n+   If APROP isn't NULL, merge it with BPROP and/or PROP.  Vice-versa if BROP\n+   isn't NULL.  Return TRUE if there is any update to APROP or if BPROP should\n+   be merge with ABFD.  */\n+bfd_boolean\n+_bfd_aarch64_elf_merge_gnu_properties (struct bfd_link_info *info\n+\t\t\t\t       ATTRIBUTE_UNUSED,\n+\t\t\t\t       bfd *abfd ATTRIBUTE_UNUSED,\n+\t\t\t\t       elf_property *aprop,\n+\t\t\t\t       elf_property *bprop,\n+\t\t\t\t       uint32_t prop)\n+{\n+  unsigned int orig_number;\n+  bfd_boolean updated = FALSE;\n+  unsigned int pr_type = aprop != NULL ? aprop->pr_type : bprop->pr_type;\n+\n+  switch (pr_type)\n+    {\n+    case GNU_PROPERTY_AARCH64_FEATURE_1_AND:\n+      {\n+\tif (aprop != NULL && bprop != NULL)\n+\t  {\n+\t    orig_number = aprop->u.number;\n+\t    aprop->u.number = (orig_number & bprop->u.number) | prop;\n+\t    updated = orig_number != aprop->u.number;\n+\t    /* Remove the property if all feature bits are cleared.  */\n+\t    if (aprop->u.number == 0)\n+\t      aprop->pr_kind = property_remove;\n+\t    break;\n+\t  }\n+\t/* If either is NULL, the AND would be 0 so, if there is\n+\t   any PROP, asign it to the input that is not NULL.  */\n+\tif (prop)\n+\t  {\n+\t    if (aprop != NULL)\n+\t      {\n+\t\torig_number = aprop->u.number;\n+\t\taprop->u.number = prop;\n+\t\tupdated = orig_number != aprop->u.number;\n+\t      }\n+\t    else\n+\t      {\n+\t\tbprop->u.number = prop;\n+\t\tupdated = TRUE;\n+\t      }\n+\t  }\n+\t/* No PROP and BPROP is NULL, so remove APROP.  */\n+\telse if (aprop != NULL)\n+\t  {\n+\t    aprop->pr_kind = property_remove;\n+\t    updated = TRUE;\n+\t  }\n+      }\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+\n+  return updated;\n+}"
    },
    {
      "sha": "a6d1792687cf39a68beb3235f5875d50bfc3ad4e",
      "filename": "bfd/elfxx-aarch64.h",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/bfd/elfxx-aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/bfd/elfxx-aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-aarch64.h?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -55,3 +55,19 @@ _bfd_aarch64_elf_write_core_note (bfd *, char *, int *, int, ...);\n #define elf_backend_grok_prstatus\t_bfd_aarch64_elf_grok_prstatus\n #define elf_backend_grok_psinfo\t\t_bfd_aarch64_elf_grok_psinfo\n #define elf_backend_write_core_note\t_bfd_aarch64_elf_write_core_note\n+\n+extern bfd *\n+_bfd_aarch64_elf_link_setup_gnu_properties (struct bfd_link_info *,\n+\t\t\t\t\t    uint32_t *);\n+\n+extern enum elf_property_kind\n+_bfd_aarch64_elf_parse_gnu_properties (bfd *, unsigned int,\n+\t\t\t\t       bfd_byte *, unsigned int);\n+\n+extern bfd_boolean\n+_bfd_aarch64_elf_merge_gnu_properties (struct bfd_link_info *, bfd *,\n+\t\t\t\t       elf_property *, elf_property *,\n+\t\t\t\t       uint32_t);\n+\n+#define elf_backend_parse_gnu_properties\t\\\n+  _bfd_aarch64_elf_parse_gnu_properties"
    },
    {
      "sha": "894eb5590648da1bc07d2a8a943896806915c36d",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -1,3 +1,8 @@\n+2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* readelf.c (decode_aarch64_feature_1_and): New.\n+\t(print_gnu_property_note): Add case for AArch64 gnu notes.\n+\n 2019-03-12  Alan Modra  <amodra@gmail.com>\n \n \t* objdump.c (load_specific_debug_section): Don't compare section"
    },
    {
      "sha": "7446ffeee21961bf56b12ff16afbf52e5cd35387",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -17341,6 +17341,33 @@ decode_x86_feature_2 (unsigned int bitmask)\n     }\n }\n \n+static void\n+decode_aarch64_feature_1_and (unsigned int bitmask)\n+{\n+  while (bitmask)\n+    {\n+      unsigned int bit = bitmask & (- bitmask);\n+\n+      bitmask &= ~ bit;\n+      switch (bit)\n+\t{\n+\tcase GNU_PROPERTY_AARCH64_FEATURE_1_BTI:\n+\t  printf (\"BTI\");\n+\t  break;\n+\n+\tcase GNU_PROPERTY_AARCH64_FEATURE_1_PAC:\n+\t  printf (\"PAC\");\n+\t  break;\n+\n+\tdefault:\n+\t  printf (_(\"<unknown: %x>\"), bit);\n+\t  break;\n+\t}\n+      if (bitmask)\n+\tprintf (\", \");\n+    }\n+}\n+\n static void\n print_gnu_property_note (Filedata * filedata, Elf_Internal_Note * pnote)\n {\n@@ -17475,6 +17502,18 @@ print_gnu_property_note (Filedata * filedata, Elf_Internal_Note * pnote)\n \t\t  break;\n \t\t}\n \t    }\n+\t  else if (filedata->file_header.e_machine == EM_AARCH64)\n+\t    {\n+\t      if (type == GNU_PROPERTY_AARCH64_FEATURE_1_AND)\n+\t\t{\n+\t\t  printf (\"AArch64 feature: \");\n+\t\t  if (datasz != 4)\n+\t\t    printf (_(\"<corrupt length: %#x> \"), datasz);\n+\t\t  else\n+\t\t    decode_aarch64_feature_1_and (byte_get (ptr, 4));\n+\t\t  goto next;\n+\t\t}\n+\t    }\n \t}\n       else\n \t{"
    },
    {
      "sha": "cf4353c9f500d6c9f6024a2ae3c82e32c5e064a9",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -1,3 +1,9 @@\n+2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* elf/common.h (GNU_PROPERTY_AARCH64_FEATURE_1_AND): New.\n+\t(GNU_PROPERTY_AARCH64_FEATURE_1_BTI): New.\n+\t(GNU_PROPERTY_AARCH64_FEATURE_1_PAC): New.\n+\n 2019-02-20  Alan Hayward  <alan.hayward@arm.com>\n \n \t* elf/common.h (NT_ARM_PAC_MASK): Add define."
    },
    {
      "sha": "ebdb8212d118ed02132b8f94f26b628c1e1f681d",
      "filename": "include/elf/common.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/include/elf/common.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/include/elf/common.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/common.h?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -841,6 +841,12 @@\n #define GNU_PROPERTY_X86_FEATURE_2_XSAVEOPT\t(1U << 8)\n #define GNU_PROPERTY_X86_FEATURE_2_XSAVEC\t(1U << 9)\n \n+/* AArch64 specific GNU PROPERTY.  */\n+#define GNU_PROPERTY_AARCH64_FEATURE_1_AND\t0xc0000000\n+\n+#define GNU_PROPERTY_AARCH64_FEATURE_1_BTI\t(1U << 0)\n+#define GNU_PROPERTY_AARCH64_FEATURE_1_PAC\t(1U << 1)\n+\n /* Values used in GNU .note.ABI-tag notes (NT_GNU_ABI_TAG).  */\n #define GNU_ABI_TAG_LINUX\t0\n #define GNU_ABI_TAG_HURD\t1"
    },
    {
      "sha": "32b53878508de1fd195ce2a02d4b6525afdaff41",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -1,3 +1,14 @@\n+2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* NEWS: Document GNU_PROPERTY_AARCH64_FEATURE_1_BTI and\n+\tGNU_PROPERTY_AARCH64_FEATURE_1_PAC.\n+\t* testsuite/ld-aarch64/aarch64-elf.exp: Add run commands for new tests.\n+\t* testsuite/ld-aarch64/property-bti-pac1.d: New test.\n+\t* testsuite/ld-aarch64/property-bti-pac1.s: New test.\n+\t* testsuite/ld-aarch64/property-bti-pac2.d: New test.\n+\t* testsuite/ld-aarch64/property-bti-pac2.s: New test.\n+\t* testsuite/ld-aarch64/property-bti-pac3.d: New test.\n+\n 2019-03-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/24322"
    },
    {
      "sha": "dcf11854f528028820cbe1983bbcdd5753d97eaf",
      "filename": "ld/NEWS",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/NEWS?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -1,5 +1,15 @@\n -*- text -*-\n \n+Changes in 2.33:\n+\n+* Add target handlers for AArch64 for ELF GNU program properties.\n+\n+* Add support for GNU_PROPERTY_AARCH64_FEATURE_1_BTI in ELF GNU program\n+  properties in the AArch64 ELF linker.\n+\n+* Add support for GNU_PROPERTY_AARCH64_FEATURE_1_PAC in ELF GNU program\n+  properties in the AArch64 ELF linker.\n+\n Changes in 2.32:\n \n * Report property change in linker map file when merging GNU properties."
    },
    {
      "sha": "c6fefbbd5c3f7e5516086c7eca0e056ae243d36d",
      "filename": "ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/aarch64-elf.exp?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -371,6 +371,10 @@ run_dump_test_lp64 \"rela-abs-relative-opt\"\n \n run_dump_test_lp64 \"pie-bind-locally\"\n \n+run_dump_test \"property-bti-pac1\"\n+run_dump_test \"property-bti-pac2\"\n+run_dump_test \"property-bti-pac3\"\n+\n set aarch64elflinktests {\n   {\"ld-aarch64/so with global symbol\" \"-shared\" \"\" \"\" {copy-reloc-so.s}\n     {} \"copy-reloc-so.so\"}"
    },
    {
      "sha": "a681ad94f885506da7831230a93e26eecb800c8a",
      "filename": "ld/testsuite/ld-aarch64/property-bti-pac1.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/property-bti-pac1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/property-bti-pac1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/property-bti-pac1.d?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -0,0 +1,11 @@\n+#name: GNU Property (single input, combine section)\n+#source: property-bti-pac1.s\n+#as: -march=armv8.5-a -defsym __mult__=0\n+#ld: -shared\n+#readelf: -n\n+#target: *linux*\n+\n+Displaying notes found in: .note.gnu.property\n+  Owner                 Data size\tDescription\n+  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: AArch64 feature: BTI, PAC"
    },
    {
      "sha": "414c9277f1dabc5fdc08b8b71716c44ea8bc8343",
      "filename": "ld/testsuite/ld-aarch64/property-bti-pac1.s",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/property-bti-pac1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/property-bti-pac1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/property-bti-pac1.s?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -0,0 +1,37 @@\n+\t.text\n+\t.globl _start\n+\t.type _start,@function\n+_start:\n+\tmov x1, #2\n+.ifndef __mult__\n+\tbl foo\n+.endif\n+\t.section \".note.gnu.property\", \"a\"\n+\t.p2align 3\n+\t.long 1f - 0f\t\t/* name length */\n+\t.long 5f - 2f\t\t/* data length */\n+\t.long 5\t\t\t/* note type */\n+0:\t.asciz \"GNU\"\t\t/* vendor name */\n+1:\n+\t.p2align 3\n+2:\t.long 0xc0000000\t/* pr_type.  */\n+\t.long 4f - 3f\t\t/* pr_datasz.  */\n+3:\n+\t.long 0x2\t\t/* PAC.  */\n+4:\n+\t.p2align 3\n+5:\n+\t.p2align 3\n+\t.long 1f - 0f\t\t/* name length */\n+\t.long 5f - 2f\t\t/* data length */\n+\t.long 5\t\t\t/* note type */\n+0:\t.asciz \"GNU\"\t\t/* vendor name */\n+1:\n+\t.p2align 3\n+2:\t.long 0xc0000000\t/* pr_type.  */\n+\t.long 4f - 3f\t\t/* pr_datasz.  */\n+3:\n+\t.long 0x1\t\t/* BTI.  */\n+4:\n+\t.p2align 3\n+5:"
    },
    {
      "sha": "bc2eaada9ecdb952efd1c9c57d715773ed216852",
      "filename": "ld/testsuite/ld-aarch64/property-bti-pac2.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/property-bti-pac2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/property-bti-pac2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/property-bti-pac2.d?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -0,0 +1,12 @@\n+#name: GNU Property (combine multiple with BTI)\n+#source: property-bti-pac1.s\n+#source: property-bti-pac2.s\n+#as: -mabi=lp64 -defsym __property_bti__=1\n+#ld: -e _start\n+#readelf: -n\n+#target: *linux*\n+\n+Displaying notes found in: .note.gnu.property\n+  Owner                 Data size\tDescription\n+  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: AArch64 feature: BTI"
    },
    {
      "sha": "cdec8d998724e67bcc778bba77eac7bf85c05626",
      "filename": "ld/testsuite/ld-aarch64/property-bti-pac2.s",
      "status": "added",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/property-bti-pac2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/property-bti-pac2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/property-bti-pac2.s?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -0,0 +1,50 @@\n+\t.text\n+\t.global\tfoo\n+\t.type\tfoo, %function\n+foo:\n+\tsub\tsp, sp, #16\n+\tmov\tw0, 9\n+\tstr\tw0, [sp, 12]\n+\tldr\tw0, [sp, 12]\n+\tadd\tw0, w0, 4\n+\tstr\tw0, [sp, 12]\n+\tnop\n+\tadd\tsp, sp, 16\n+\tret\n+\t.size\tfoo, .-foo\n+\t.global\tbar\n+\t.type\tbar, %function\n+.ifdef __property_bti__\n+\t.section \".note.gnu.property\", \"a\"\n+\t.p2align 3\n+\t.long 1f - 0f\t\t/* name length */\n+\t.long 5f - 2f\t\t/* data length */\n+\t.long 5\t\t\t/* note type */\n+0:\t.asciz \"GNU\"\t\t/* vendor name */\n+1:\n+\t.p2align 3\n+2:\t.long 0xc0000000\t/* pr_type.  */\n+\t.long 4f - 3f\t\t/* pr_datasz.  */\n+3:\n+\t.long 0x1\t\t/* BTI.  */\n+4:\n+\t.p2align 3\n+5:\n+.endif\n+.ifdef __property_pac__\n+\t.section \".note.gnu.property\", \"a\"\n+\t.p2align 3\n+\t.long 1f - 0f\t\t/* name length */\n+\t.long 5f - 2f\t\t/* data length */\n+\t.long 5\t\t\t/* note type */\n+0:\t.asciz \"GNU\"\t\t/* vendor name */\n+1:\n+\t.p2align 3\n+2:\t.long 0xc0000000\t/* pr_type.  */\n+\t.long 4f - 3f\t\t/* pr_datasz.  */\n+3:\n+\t.long 0x2\t\t/* PAC.  */\n+4:\n+\t.p2align 3\n+5:\n+.endif"
    },
    {
      "sha": "5290f4bd8110d127e19712ce8891bb54bdfbc352",
      "filename": "ld/testsuite/ld-aarch64/property-bti-pac3.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/property-bti-pac3.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd702818c6cf25277253b3b5c23f17d2cf7a94df/ld/testsuite/ld-aarch64/property-bti-pac3.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/property-bti-pac3.d?ref=cd702818c6cf25277253b3b5c23f17d2cf7a94df",
      "patch": "@@ -0,0 +1,12 @@\n+#name: GNU Property (combine multiple with PAC)\n+#source: property-bti-pac1.s\n+#source: property-bti-pac2.s\n+#as: -mabi=lp64 -defsym __property_pac__=1\n+#ld: -e _start\n+#readelf: -n\n+#target: *linux*\n+\n+Displaying notes found in: .note.gnu.property\n+  Owner                 Data size\tDescription\n+  GNU                  0x00000010\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: AArch64 feature: PAC"
    }
  ]
}