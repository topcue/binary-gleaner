{
  "sha": "5cacf1c88f8afa5a3a1fb6d88c297e19d99f21e0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWNhY2YxYzg4ZjhhZmE1YTNhMWZiNmQ4OGMyOTdlMTlkOTlmMjFlMA==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-02-21T10:54:12Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-02-21T10:54:12Z"
    },
    "message": "Fix illegal memory accesses by readelf when parsing corrupt IA64 unwind information.\n\n\tPR 24247\n\t* unwind-ia64.c: Include sysdep.h.\n\t(unw_decode_x1): Check current pointer against end pointer before\n\taccessing memory.\n\t(unw_decode_x2): Likewise.\n\t(unw_decode_x3): Likewise.\n\t(unw_decode_x4): Likewise.\n\t(unw_decode_r2): Likewise.\n\t(unw_decode_p2_p5): Likewise.\n\t(unw_decode_p7_p10): Likewise.\n\t(unw_decode): Likewise.",
    "tree": {
      "sha": "83c3255c51f9a89979f3aba347a5e513cb114b81",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/83c3255c51f9a89979f3aba347a5e513cb114b81"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5cacf1c88f8afa5a3a1fb6d88c297e19d99f21e0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5cacf1c88f8afa5a3a1fb6d88c297e19d99f21e0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5cacf1c88f8afa5a3a1fb6d88c297e19d99f21e0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5cacf1c88f8afa5a3a1fb6d88c297e19d99f21e0/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "160eba9301df423116377113f2d4189d785c7dde",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/160eba9301df423116377113f2d4189d785c7dde",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/160eba9301df423116377113f2d4189d785c7dde"
    }
  ],
  "stats": {
    "total": 100,
    "additions": 94,
    "deletions": 6
  },
  "files": [
    {
      "sha": "980bc54c3f76ab176cfacc257b63295fa5a35d1c",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5cacf1c88f8afa5a3a1fb6d88c297e19d99f21e0/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5cacf1c88f8afa5a3a1fb6d88c297e19d99f21e0/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=5cacf1c88f8afa5a3a1fb6d88c297e19d99f21e0",
      "patch": "@@ -1,3 +1,17 @@\n+2019-02-21  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 24247\n+\t* unwind-ia64.c: Include sysdep.h.\n+\t(unw_decode_x1): Check current pointer against end pointer before\n+\taccessing memory.\n+\t(unw_decode_x2): Likewise.\n+\t(unw_decode_x3): Likewise.\n+\t(unw_decode_x4): Likewise.\n+\t(unw_decode_r2): Likewise.\n+\t(unw_decode_p2_p5): Likewise.\n+\t(unw_decode_p7_p10): Likewise.\n+\t(unw_decode): Likewise.\n+\n 2019-02-20  Nick Clifton  <nickc@redhat.com>\n \n \tPR 24246"
    },
    {
      "sha": "f6f73ce83ea895fa95a64b9cc0b05e8d7eeb7c53",
      "filename": "binutils/unwind-ia64.c",
      "status": "modified",
      "additions": 80,
      "deletions": 6,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5cacf1c88f8afa5a3a1fb6d88c297e19d99f21e0/binutils/unwind-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5cacf1c88f8afa5a3a1fb6d88c297e19d99f21e0/binutils/unwind-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/unwind-ia64.c?ref=5cacf1c88f8afa5a3a1fb6d88c297e19d99f21e0",
      "patch": "@@ -21,9 +21,8 @@\n    MA 02110-1301, USA.  */\n \n #include \"config.h\"\n+#include \"sysdep.h\"\n #include \"unwind-ia64.h\"\n-#include <stdio.h>\n-#include <string.h>\n \n #if __GNUC__ >= 2\n /* Define BFD64 here, even if our default architecture is 32 bit ELF\n@@ -174,7 +173,7 @@ unw_print_xyreg (char *cp, unsigned int x, unsigned int ytreg)\n typedef bfd_vma unw_word;\n \n #define UNW_DEC_BAD_CODE(code)\t\t\t\\\n-    printf (\"Unknown code 0x%02x\\n\", code)\n+  printf (_(\"Unknown code 0x%02x\\n\"), code)\n \n #define UNW_DEC_PROLOGUE(fmt, body, rlen, arg)\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\t\\\n@@ -360,7 +359,7 @@ typedef bfd_vma unw_word;\n       /* PR 18420.  */\t\t\t\t\t\t\t\\\n       if ((dp + (unw_rlen / 4)) > end)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  printf (\"\\nERROR: unwind length too long (0x%lx > 0x%lx)\\n\\n\",\\\n+\t  printf (_(\"\\nERROR: unwind length too long (0x%lx > 0x%lx)\\n\\n\"), \\\n \t\t  (long) (unw_rlen / 4), (long)(end - dp));\t\t\\\n \t  /* FIXME: Should we reset unw_rlen ?  */\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n@@ -571,6 +570,12 @@ unw_decode_x1 (const unsigned char *dp, unsigned int code ATTRIBUTE_UNUSED,\n   unsigned char byte1, abreg;\n   unw_word t, off;\n \n+  if ((end - dp) < 3)\n+    {\n+      printf (_(\"\\t<corrupt X1>\\n\"));\n+      return end;\n+    }\n+\n   byte1 = *dp++;\n   t = unw_decode_uleb128 (&dp, end);\n   off = unw_decode_uleb128 (&dp, end);\n@@ -589,6 +594,12 @@ unw_decode_x2 (const unsigned char *dp, unsigned int code ATTRIBUTE_UNUSED,\n   unsigned char byte1, byte2, abreg, x, ytreg;\n   unw_word t;\n \n+  if ((end - dp) < 3)\n+    {\n+      printf (_(\"\\t<corrupt X2>\\n\"));\n+      return end;\n+    }\n+\n   byte1 = *dp++;\n   byte2 = *dp++;\n   t = unw_decode_uleb128 (&dp, end);\n@@ -609,6 +620,12 @@ unw_decode_x3 (const unsigned char *dp, unsigned int code ATTRIBUTE_UNUSED,\n   unsigned char byte1, byte2, abreg, qp;\n   unw_word t, off;\n \n+  if ((end - dp) < 4)\n+    {\n+      printf (_(\"\\t<corrupt X3>\\n\"));\n+      return end;\n+    }\n+\n   byte1 = *dp++;\n   byte2 = *dp++;\n   t = unw_decode_uleb128 (&dp, end);\n@@ -631,6 +648,12 @@ unw_decode_x4 (const unsigned char *dp, unsigned int code ATTRIBUTE_UNUSED,\n   unsigned char byte1, byte2, byte3, qp, abreg, x, ytreg;\n   unw_word t;\n \n+  if ((end - dp) < 4)\n+    {\n+      printf (_(\"\\t<corrupt X4>\\n\"));\n+      return end;\n+    }\n+\n   byte1 = *dp++;\n   byte2 = *dp++;\n   byte3 = *dp++;\n@@ -667,6 +690,12 @@ unw_decode_r2 (const unsigned char *dp, unsigned int code, void *arg,\n   unsigned char byte1, mask, grsave;\n   unw_word rlen;\n \n+  if ((end - dp) < 2)\n+    {\n+      printf (_(\"\\t<corrupt R2>\\n\"));\n+      return end;\n+    }\n+\n   byte1 = *dp++;\n \n   mask = ((code & 0x7) << 1) | ((byte1 >> 7) & 1);\n@@ -705,14 +734,30 @@ unw_decode_p2_p5 (const unsigned char *dp, unsigned int code,\n {\n   if ((code & 0x10) == 0)\n     {\n-      unsigned char byte1 = *dp++;\n+      unsigned char byte1;\n+\n+      if ((end - dp) < 1)\n+\t{\n+\t  printf (_(\"\\t<corrupt P2>\\n\"));\n+\t  return end;\n+\t}\n+\n+      byte1 = *dp++;\n \n       UNW_DEC_BR_GR (\"P2\", ((code & 0xf) << 1) | ((byte1 >> 7) & 1),\n \t\t     (byte1 & 0x7f), arg);\n     }\n   else if ((code & 0x08) == 0)\n     {\n-      unsigned char byte1 = *dp++, r, dst;\n+      unsigned char byte1, r, dst;\n+\n+      if ((end - dp) < 1)\n+\t{\n+\t  printf (_(\"\\t<corrupt P3>\\n\"));\n+\t  return end;\n+\t}\n+\n+      byte1 = *dp++;\n \n       r = ((code & 0x7) << 1) | ((byte1 >> 7) & 1);\n       dst = (byte1 & 0x7f);\n@@ -765,6 +810,11 @@ unw_decode_p2_p5 (const unsigned char *dp, unsigned int code,\n     {\n       unw_word grmask, frmask, byte1, byte2, byte3;\n \n+      if ((end - dp) < 3)\n+\t{\n+\t  printf (_(\"\\t<corrupt P5>\\n\"));\n+\t  return end;\n+\t}\n       byte1 = *dp++;\n       byte2 = *dp++;\n       byte3 = *dp++;\n@@ -867,6 +917,12 @@ unw_decode_p7_p10 (const unsigned char *dp, unsigned int code, void *arg,\n \t{\n \tcase 0x0:\t\t/* p8 */\n \t  {\n+\t    if ((end - dp) < 2)\n+\t      {\n+\t\tprintf (_(\"\\t<corrupt P8>\\n\"));\n+\t\treturn end;\n+\t      }\n+\n \t    r = *dp++;\n \t    t = unw_decode_uleb128 (&dp, end);\n \t    switch (r)\n@@ -936,12 +992,24 @@ unw_decode_p7_p10 (const unsigned char *dp, unsigned int code, void *arg,\n \t  break;\n \n \tcase 0x1:\n+\t  if ((end - dp) < 2)\n+\t    {\n+\t      printf (_(\"\\t<corrupt P9>\\n\"));\n+\t      return end;\n+\t    }\n+\n \t  byte1 = *dp++;\n \t  byte2 = *dp++;\n \t  UNW_DEC_GR_GR (\"P9\", (byte1 & 0xf), (byte2 & 0x7f), arg);\n \t  break;\n \n \tcase 0xf:\t\t/* p10 */\n+\t  if ((end - dp) < 2)\n+\t    {\n+\t      printf (_(\"\\t<corrupt P10>\\n\"));\n+\t      return end;\n+\t    }\n+\n \t  byte1 = *dp++;\n \t  byte2 = *dp++;\n \t  UNW_DEC_ABI (\"P10\", byte1, byte2, arg);\n@@ -1067,6 +1135,12 @@ unw_decode (const unsigned char *dp, int inside_body,\n   unw_decoder decoder;\n   unsigned char code;\n \n+  if ((end - dp) < 1)\n+    {\n+      printf (_(\"\\t<corrupt IA64 descriptor>\\n\"));\n+      return end;\n+    }\n+\n   code = *dp++;\n   decoder = unw_decode_table[inside_body][code >> 5];\n   return (*decoder) (dp, code, ptr_inside_body, end);"
    }
  ]
}