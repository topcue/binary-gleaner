{
  "sha": "1ed0032b40063795d6c3ce89eab3101a8fd67569",
  "node_id": "C_kwDOANOeidoAKDFlZDAwMzJiNDAwNjM3OTVkNmMzY2U4OWVhYjMxMDFhOGZkNjc1Njk",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-24T09:57:06Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-24T11:35:51Z"
    },
    "message": "asan: c4x, c54x coff_canonicalize_reloc buffer overflow\n\nSometimes the investigation of a fuzzing bug report leads into areas\nyou'd rather not go.  In this instance by the time I'd figured out the\nreal cause was a target variant that had never been properly supported\nin binutils, the time needed to fix it was less than the time needed\nto rip it out.\n\n\t* coffcode.h (coff_set_alignment_hook): Call bfd_coff_swap_reloc_in\n\tnot coff_swap_reloc_in.\n\t(coff_slurp_reloc_table): Likewise.  Don't use RELOC type.\n\t(ticoff0_swap_table): Use coff_swap_reloc_v0_out and\n\tcoff_swap_reloc_v0_in.\n\t* coffswap.h (coff_swap_reloc_v0_in, coff_swap_reloc_v0_out): New.\n\t* coff-tic54x.c (tic54x_lookup_howto): Don't abort.\n\t* coffgen.c (coff_get_normalized_symtab): Use PTR_ADD.\n\t* bfd-in.h (PTR_ADD, NPTR_ADD): Avoid warnings when passing an\n\texpression.\n\t* bfd-in2.h: Regenerate.",
    "tree": {
      "sha": "8b934260c43ee41d117c8c9fb5e12062654b23ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8b934260c43ee41d117c8c9fb5e12062654b23ad"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1ed0032b40063795d6c3ce89eab3101a8fd67569",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ed0032b40063795d6c3ce89eab3101a8fd67569",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1ed0032b40063795d6c3ce89eab3101a8fd67569",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ed0032b40063795d6c3ce89eab3101a8fd67569/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e02812494254b70fec6fa432f7f668956711133b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e02812494254b70fec6fa432f7f668956711133b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e02812494254b70fec6fa432f7f668956711133b"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 44,
    "deletions": 17
  },
  "files": [
    {
      "sha": "286afc607a3a18cbf54c8c15ef0c8be9d8fccdd8",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=1ed0032b40063795d6c3ce89eab3101a8fd67569",
      "patch": "@@ -114,9 +114,9 @@ typedef struct bfd bfd;\n #endif\n \n /* Silence \"applying zero offset to null pointer\" UBSAN warnings.  */\n-#define PTR_ADD(P,A) ((A) ? (P) + (A) : (P))\n+#define PTR_ADD(P,A) ((A) != 0 ? (P) + (A) : (P))\n /* Also prevent non-zero offsets from being applied to a null pointer.  */\n-#define NPTR_ADD(P,A) ((P) ? (P) + (A) : (P))\n+#define NPTR_ADD(P,A) ((P) != NULL ? (P) + (A) : (P))\n \n #ifdef BFD64\n "
    },
    {
      "sha": "669f250d0e52f896a62adb324cf7a826dc14ab29",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=1ed0032b40063795d6c3ce89eab3101a8fd67569",
      "patch": "@@ -121,9 +121,9 @@ typedef struct bfd bfd;\n #endif\n \n /* Silence \"applying zero offset to null pointer\" UBSAN warnings.  */\n-#define PTR_ADD(P,A) ((A) ? (P) + (A) : (P))\n+#define PTR_ADD(P,A) ((A) != 0 ? (P) + (A) : (P))\n /* Also prevent non-zero offsets from being applied to a null pointer.  */\n-#define NPTR_ADD(P,A) ((P) ? (P) + (A) : (P))\n+#define NPTR_ADD(P,A) ((P) != NULL ? (P) + (A) : (P))\n \n #ifdef BFD64\n "
    },
    {
      "sha": "86156711741ab787a92be22926d71c4c03febf33",
      "filename": "bfd/coff-tic54x.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/coff-tic54x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/coff-tic54x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-tic54x.c?ref=1ed0032b40063795d6c3ce89eab3101a8fd67569",
      "patch": "@@ -278,7 +278,7 @@ tic54x_lookup_howto (bfd *abfd,\n \n   _bfd_error_handler (_(\"%pB: unsupported relocation type %#x\"),\n \t\t      abfd, (unsigned int) dst->r_type);\n-  abort ();\n+  internal->howto = NULL;\n }\n \n #define RELOC_PROCESSING(RELENT,RELOC,SYMS,ABFD,SECT)\\"
    },
    {
      "sha": "7967cedf918b086a129c1c918af6520b29ab2034",
      "filename": "bfd/coffcode.h",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/coffcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/coffcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffcode.h?ref=1ed0032b40063795d6c3ce89eab3101a8fd67569",
      "patch": "@@ -1948,7 +1948,7 @@ coff_set_alignment_hook (bfd * abfd ATTRIBUTE_UNUSED,\n       if (bfd_bread (& dst, relsz, abfd) != relsz)\n \treturn;\n \n-      coff_swap_reloc_in (abfd, &dst, &n);\n+      bfd_coff_swap_reloc_in (abfd, &dst, &n);\n       if (bfd_seek (abfd, oldpos, 0) != 0)\n \treturn;\n       if (n.r_vaddr < 0x10000)\n@@ -2019,7 +2019,7 @@ coff_set_alignment_hook (bfd * abfd, asection * section, void * scnhdr)\n       if (bfd_bread (& dst, relsz, abfd) != relsz)\n \treturn;\n \n-      coff_swap_reloc_in (abfd, &dst, &n);\n+      bfd_coff_swap_reloc_in (abfd, &dst, &n);\n       if (bfd_seek (abfd, oldpos, 0) != 0)\n \treturn;\n       section->reloc_count = hdr->s_nreloc = n.r_vaddr - 1;\n@@ -5070,7 +5070,7 @@ SUBSUBSECTION\n static bool\n coff_slurp_reloc_table (bfd * abfd, sec_ptr asect, asymbol ** symbols)\n {\n-  RELOC *native_relocs;\n+  bfd_byte *native_relocs;\n   arelent *reloc_cache;\n   arelent *cache_ptr;\n   unsigned int idx;\n@@ -5085,9 +5085,9 @@ coff_slurp_reloc_table (bfd * abfd, sec_ptr asect, asymbol ** symbols)\n   if (!coff_slurp_symbol_table (abfd))\n     return false;\n \n-  native_relocs = (RELOC *) buy_and_read (abfd, asect->rel_filepos,\n-\t\t\t\t\t  asect->reloc_count,\n-\t\t\t\t\t  bfd_coff_relsz (abfd));\n+  native_relocs = (bfd_byte *) buy_and_read (abfd, asect->rel_filepos,\n+\t\t\t\t\t     asect->reloc_count,\n+\t\t\t\t\t     bfd_coff_relsz (abfd));\n   if (native_relocs == NULL)\n     return false;\n \n@@ -5106,16 +5106,16 @@ coff_slurp_reloc_table (bfd * abfd, sec_ptr asect, asymbol ** symbols)\n   for (idx = 0; idx < asect->reloc_count; idx++)\n     {\n       struct internal_reloc dst;\n-      struct external_reloc *src;\n+      void *src;\n #ifndef RELOC_PROCESSING\n       asymbol *ptr;\n #endif\n \n       cache_ptr = reloc_cache + idx;\n-      src = native_relocs + idx;\n+      src = native_relocs + idx * (size_t) bfd_coff_relsz (abfd);\n \n       dst.r_offset = 0;\n-      coff_swap_reloc_in (abfd, src, &dst);\n+      bfd_coff_swap_reloc_in (abfd, src, &dst);\n \n #ifdef RELOC_PROCESSING\n       RELOC_PROCESSING (cache_ptr, &dst, symbols, abfd, asect);\n@@ -5444,7 +5444,7 @@ static bfd_coff_backend_data ticoff0_swap_table =\n {\n   coff_SWAP_aux_in, coff_SWAP_sym_in, coff_SWAP_lineno_in,\n   coff_SWAP_aux_out, coff_SWAP_sym_out,\n-  coff_SWAP_lineno_out, coff_SWAP_reloc_out,\n+  coff_SWAP_lineno_out, coff_swap_reloc_v0_out,\n   coff_SWAP_filehdr_out, coff_SWAP_aouthdr_out,\n   coff_SWAP_scnhdr_out,\n   FILHSZ_V0, AOUTSZ, SCNHSZ_V01, SYMESZ, AUXESZ, RELSZ_V0, LINESZ, FILNMLEN,\n@@ -5467,7 +5467,7 @@ static bfd_coff_backend_data ticoff0_swap_table =\n #endif\n   32768,\n   coff_SWAP_filehdr_in, coff_SWAP_aouthdr_in, coff_SWAP_scnhdr_in,\n-  coff_SWAP_reloc_in, ticoff0_bad_format_hook, coff_set_arch_mach_hook,\n+  coff_swap_reloc_v0_in, ticoff0_bad_format_hook, coff_set_arch_mach_hook,\n   coff_mkobject_hook, styp_to_sec_flags, coff_set_alignment_hook,\n   coff_slurp_symbol_table, symname_in_debug_hook, coff_pointerize_aux_hook,\n   coff_print_aux, coff_reloc16_extra_cases, coff_reloc16_estimate,"
    },
    {
      "sha": "6627a9af4b6607849432bca258971d8d7980f58d",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=1ed0032b40063795d6c3ce89eab3101a8fd67569",
      "patch": "@@ -1807,7 +1807,7 @@ coff_get_normalized_symtab (bfd *abfd)\n \n   /* Mark the end of the symbols.  */\n   symesz = bfd_coff_symesz (abfd);\n-  raw_end = (char *) raw_src + obj_raw_syment_count (abfd) * symesz;\n+  raw_end = PTR_ADD (raw_src, obj_raw_syment_count (abfd) * symesz);\n \n   /* FIXME SOMEDAY.  A string table size of zero is very weird, but\n      probably possible.  If one shows up, it will probably kill us.  */"
    },
    {
      "sha": "e0dbd04f399611997198bfde66c79d3b2a95f10d",
      "filename": "bfd/coffswap.h",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/coffswap.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ed0032b40063795d6c3ce89eab3101a8fd67569/bfd/coffswap.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffswap.h?ref=1ed0032b40063795d6c3ce89eab3101a8fd67569",
      "patch": "@@ -246,6 +246,33 @@ coff_swap_reloc_out (bfd * abfd, void * src, void * dst)\n   return bfd_coff_relsz (abfd);\n }\n \n+#ifdef TICOFF\n+static void\n+coff_swap_reloc_v0_in (bfd *abfd, void *src, void *dst)\n+{\n+  struct external_reloc_v0 *reloc_src = (struct external_reloc_v0 *) src;\n+  struct internal_reloc *reloc_dst = (struct internal_reloc *) dst;\n+\n+  reloc_dst->r_vaddr  = GET_RELOC_VADDR (abfd, reloc_src->r_vaddr);\n+  reloc_dst->r_symndx = H_GET_16 (abfd, reloc_src->r_symndx);\n+  reloc_dst->r_type   = H_GET_16 (abfd, reloc_src->r_type);\n+}\n+\n+static unsigned int\n+coff_swap_reloc_v0_out (bfd *abfd, void *src, void *dst)\n+{\n+  struct internal_reloc *reloc_src = (struct internal_reloc *) src;\n+  struct external_reloc_v0 *reloc_dst = (struct external_reloc_v0 *) dst;\n+\n+  PUT_RELOC_VADDR (abfd, reloc_src->r_vaddr, reloc_dst->r_vaddr);\n+  H_PUT_16 (abfd, reloc_src->r_symndx, reloc_dst->r_symndx);\n+  H_PUT_16 (abfd, reloc_src->r_type, reloc_dst->r_type);\n+  SWAP_OUT_RELOC_EXTRA (abfd, reloc_src, reloc_dst);\n+\n+  return bfd_coff_relsz (abfd);\n+}\n+#endif\n+\n #endif /* NO_COFF_RELOCS */\n \n static void"
    }
  ]
}