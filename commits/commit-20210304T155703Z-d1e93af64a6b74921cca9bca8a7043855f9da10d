{
  "sha": "d1e93af64a6b74921cca9bca8a7043855f9da10d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDFlOTNhZjY0YTZiNzQ5MjFjY2E5YmNhOGE3MDQzODU1ZjlkYTEwZA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-03-04T15:57:03Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-03-04T15:57:03Z"
    },
    "message": "gdb: set current thread in sparc_{fetch,collect}_inferior_registers (PR gdb/27147)\n\nPR 27147 shows that on sparc64, GDB is unable to properly unwind:\n\nExpected result (from GDB 9.2):\n\n    #0  0x0000000000108de4 in puts ()\n    #1  0x0000000000100950 in hello () at gdb-test.c:4\n    #2  0x0000000000100968 in main () at gdb-test.c:8\n\nActual result (from GDB latest git):\n\n    #0  0x0000000000108de4 in puts ()\n    #1  0x0000000000100950 in hello () at gdb-test.c:4\n    Backtrace stopped: previous frame inner to this frame (corrupt stack?)\n\nThe first failing commit is 5b6d1e4fa4fc (\"Multi-target support\").  The cause\nof the change in behavior is due to (thanks for Andrew Burgess for finding\nthis):\n\n - inferior_ptid is no longer set on entry of target_ops::wait, whereas\n   it was set to something valid previously\n - deep down in linux_nat_target::wait (see stack trace below), we fetch\n   the registers of the event thread\n - on sparc64, fetching registers involves reading memory (in\n   sparc_supply_rwindow, see stack trace below)\n - reading memory (target_ops::xfer_partial) relies on inferior_ptid\n   being set to the thread from which we want to read memory\n\nThis is where things go wrong:\n\n    #0  linux_nat_target::xfer_partial (this=0x10000fa2c40 <the_sparc64_linux_nat_target>, object=TARGET_OBJECT_MEMORY, annex=0x0, readbuf=0x7feffe3b000 \"\", writebuf=0x0, offset=8791798050744, len=8, xfered_len=0x7feffe3ae88) at /home/simark/src/binutils-gdb/gdb/linux-nat.c:3697\n    #1  0x00000100007f5b10 in raw_memory_xfer_partial (ops=0x10000fa2c40 <the_sparc64_linux_nat_target>, readbuf=0x7feffe3b000 \"\", writebuf=0x0, memaddr=8791798050744, len=8, xfered_len=0x7feffe3ae88) at /home/simark/src/binutils-gdb/gdb/target.c:912\n    #2  0x00000100007f60e8 in memory_xfer_partial_1 (ops=0x10000fa2c40 <the_sparc64_linux_nat_target>, object=TARGET_OBJECT_MEMORY, readbuf=0x7feffe3b000 \"\", writebuf=0x0, memaddr=8791798050744, len=8, xfered_len=0x7feffe3ae88) at /home/simark/src/binutils-gdb/gdb/target.c:1043\n    #3  0x00000100007f61b4 in memory_xfer_partial (ops=0x10000fa2c40 <the_sparc64_linux_nat_target>, object=TARGET_OBJECT_MEMORY, readbuf=0x7feffe3b000 \"\", writebuf=0x0, memaddr=8791798050744, len=8, xfered_len=0x7feffe3ae88) at /home/simark/src/binutils-gdb/gdb/target.c:1072\n    #4  0x00000100007f6538 in target_xfer_partial (ops=0x10000fa2c40 <the_sparc64_linux_nat_target>, object=TARGET_OBJECT_MEMORY, annex=0x0, readbuf=0x7feffe3b000 \"\", writebuf=0x0, offset=8791798050744, len=8, xfered_len=0x7feffe3ae88) at /home/simark/src/binutils-gdb/gdb/target.c:1129\n    #5  0x00000100007f7094 in target_read_partial (ops=0x10000fa2c40 <the_sparc64_linux_nat_target>, object=TARGET_OBJECT_MEMORY, annex=0x0, buf=0x7feffe3b000 \"\", offset=8791798050744, len=8, xfered_len=0x7feffe3ae88) at /home/simark/src/binutils-gdb/gdb/target.c:1375\n    #6  0x00000100007f721c in target_read (ops=0x10000fa2c40 <the_sparc64_linux_nat_target>, object=TARGET_OBJECT_MEMORY, annex=0x0, buf=0x7feffe3b000 \"\", offset=8791798050744, len=8) at /home/simark/src/binutils-gdb/gdb/target.c:1415\n    #7  0x00000100007f69d4 in target_read_memory (memaddr=8791798050744, myaddr=0x7feffe3b000 \"\", len=8) at /home/simark/src/binutils-gdb/gdb/target.c:1218\n    #8  0x0000010000758520 in sparc_supply_rwindow (regcache=0x10000fea4f0, sp=8791798050736, regnum=-1) at /home/simark/src/binutils-gdb/gdb/sparc-tdep.c:1960\n    #9  0x000001000076208c in sparc64_supply_gregset (gregmap=0x10000be3190 <sparc64_linux_ptrace_gregmap>, regcache=0x10000fea4f0, regnum=-1, gregs=0x7feffe3b230) at /home/simark/src/binutils-gdb/gdb/sparc64-tdep.c:1974\n    #10 0x0000010000751b64 in sparc_fetch_inferior_registers (regcache=0x10000fea4f0, regnum=80) at /home/simark/src/binutils-gdb/gdb/sparc-nat.c:170\n    #11 0x0000010000759d68 in sparc64_linux_nat_target::fetch_registers (this=0x10000fa2c40 <the_sparc64_linux_nat_target>, regcache=0x10000fea4f0, regnum=80) at /home/simark/src/binutils-gdb/gdb/sparc64-linux-nat.c:38\n    #12 0x00000100008146ec in target_fetch_registers (regcache=0x10000fea4f0, regno=80) at /home/simark/src/binutils-gdb/gdb/target.c:3287\n    #13 0x00000100006a8c5c in regcache::raw_update (this=0x10000fea4f0, regnum=80) at /home/simark/src/binutils-gdb/gdb/regcache.c:584\n    #14 0x00000100006a8d94 in readable_regcache::raw_read (this=0x10000fea4f0, regnum=80, buf=0x7feffe3b7c0 \"\") at /home/simark/src/binutils-gdb/gdb/regcache.c:598\n    #15 0x00000100006a93b8 in readable_regcache::cooked_read (this=0x10000fea4f0, regnum=80, buf=0x7feffe3b7c0 \"\") at /home/simark/src/binutils-gdb/gdb/regcache.c:690\n    #16 0x00000100006b288c in readable_regcache::cooked_read<unsigned long, void> (this=0x10000fea4f0, regnum=80, val=0x7feffe3b948) at /home/simark/src/binutils-gdb/gdb/regcache.c:777\n    #17 0x00000100006a9b44 in regcache_cooked_read_unsigned (regcache=0x10000fea4f0, regnum=80, val=0x7feffe3b948) at /home/simark/src/binutils-gdb/gdb/regcache.c:791\n    #18 0x00000100006abf3c in regcache_read_pc (regcache=0x10000fea4f0) at /home/simark/src/binutils-gdb/gdb/regcache.c:1295\n    #19 0x0000010000507920 in save_stop_reason (lp=0x10000fc5b10) at /home/simark/src/binutils-gdb/gdb/linux-nat.c:2612\n    #20 0x00000100005095a4 in linux_nat_filter_event (lwpid=520983, status=1407) at /home/simark/src/binutils-gdb/gdb/linux-nat.c:3050\n    #21 0x0000010000509f9c in linux_nat_wait_1 (ptid=..., ourstatus=0x7feffe3c8f0, target_options=...) at /home/simark/src/binutils-gdb/gdb/linux-nat.c:3194\n    #22 0x000001000050b1d0 in linux_nat_target::wait (this=0x10000fa2c40 <the_sparc64_linux_nat_target>, ptid=..., ourstatus=0x7feffe3c8f0, target_options=...) at /home/simark/src/binutils-gdb/gdb/linux-nat.c:3432\n    #23 0x00000100007f8ac0 in target_wait (ptid=..., status=0x7feffe3c8f0, options=...) at /home/simark/src/binutils-gdb/gdb/target.c:2000\n    #24 0x00000100004ac17c in do_target_wait_1 (inf=0x1000116d280, ptid=..., status=0x7feffe3c8f0, options=...) at /home/simark/src/binutils-gdb/gdb/infrun.c:3464\n    #25 0x00000100004ac3b8 in operator() (__closure=0x7feffe3c678, inf=0x1000116d280) at /home/simark/src/binutils-gdb/gdb/infrun.c:3527\n    #26 0x00000100004ac7cc in do_target_wait (wait_ptid=..., ecs=0x7feffe3c8c8, options=...) at /home/simark/src/binutils-gdb/gdb/infrun.c:3540\n    #27 0x00000100004ad8c4 in fetch_inferior_event () at /home/simark/src/binutils-gdb/gdb/infrun.c:3880\n    #28 0x0000010000485568 in inferior_event_handler (event_type=INF_REG_EVENT) at /home/simark/src/binutils-gdb/gdb/inf-loop.c:42\n    #29 0x000001000050d394 in handle_target_event (error=0, client_data=0x0) at /home/simark/src/binutils-gdb/gdb/linux-nat.c:4060\n    #30 0x0000010000ab5c8c in handle_file_event (file_ptr=0x10001207270, ready_mask=1) at /home/simark/src/binutils-gdb/gdbsupport/event-loop.cc:575\n    #31 0x0000010000ab6334 in gdb_wait_for_event (block=0) at /home/simark/src/binutils-gdb/gdbsupport/event-loop.cc:701\n    #32 0x0000010000ab487c in gdb_do_one_event () at /home/simark/src/binutils-gdb/gdbsupport/event-loop.cc:212\n    #33 0x0000010000542668 in start_event_loop () at /home/simark/src/binutils-gdb/gdb/main.c:348\n    #34 0x000001000054287c in captured_command_loop () at /home/simark/src/binutils-gdb/gdb/main.c:408\n    #35 0x0000010000544e84 in captured_main (data=0x7feffe3d188) at /home/simark/src/binutils-gdb/gdb/main.c:1242\n    #36 0x0000010000544f2c in gdb_main (args=0x7feffe3d188) at /home/simark/src/binutils-gdb/gdb/main.c:1257\n    #37 0x00000100000c1f14 in main (argc=4, argv=0x7feffe3d548) at /home/simark/src/binutils-gdb/gdb/gdb.c:32\n\nThere is a target_read_memory call in sparc_supply_rwindow, whose return\nvalue is not checked.  That call fails, because inferior_ptid does not\ncontain a valid ptid, and uninitialized buffer contents is used.\nUltimately it results in a corrupt stop_pc.\n\ntarget_ops::fetch_registers can be (and should remain, in my opinion)\nindependent of inferior_ptid, because the ptid of the thread from which\nto fetch registers can be obtained from the regcache.  In other words,\nimplementations of target_ops::fetch_registers should not rely on\ninferior_ptid having a sensible value on entry.\n\nThe sparc64_linux_nat_target::fetch_registers case is special, because it calls\na target method that is dependent on the inferior_ptid value\n(target_read_inferior, and ultimately target_ops::xfer_partial).  So I would\nsay it's the responsibility of sparc64_linux_nat_target::fetch_registers to set\nup inferior_ptid correctly prior to calling target_read_inferior.\n\nThis patch makes sparc64_linux_nat_target::fetch_registers (and\nstore_registers, since it works the same) temporarily set inferior_ptid.  If we\never make target_ops::xfer_partial independent of inferior_ptid, setting\ninferior_ptid won't be necessary, we'll simply pass down the ptid as a\nparameter in some way.\n\nI chose to set/restore inferior_ptid in sparc_fetch_inferior_registers, because\nI am not convinced that doing so in an inner location (in sparc_supply_rwindow\nfor instance) would always be correct.  We have access to the ptid in\nsparc_supply_rwindow (from the regcache), so we _could_ set inferior_ptid\nthere.  However, I don't want to just set inferior_ptid, as that would make it\nnot desync'ed with `current_thread ()` and `current_inferior ()`.  It's\npreferable to use switch_to_thread instead, as that switches all the global\n\"current\" stuff in a coherent way.  But doing so requires a `thread_info *`,\nand getting a `thread_info *` from a ptid requires a `process_stratum_target\n*`.  We could use `current_inferior()->process_target()` in\nsparc_supply_rwindow for this (using target_read_memory uses the current\ninferior's target stack anyway).  However, sparc_supply_rwindow is also used in\nthe context of BSD uthreads, where a thread stratum target defines threads.  I\npresume the ptid in the regcache would be the ptid of the uthread, defined by\nthe thread stratum target (bsd_uthread_target).  Using\n`current_inferior()->process_target()` would look up a ptid defined by the\nthread stratum target using the process stratum target.  I don't think it would\ngive good results.  So I prefer playing it safe and looking up the thread\nearlier, in sparc_fetch_inferior_registers.\n\nI added some assertions (in sparc_supply_rwindow and others) to verify\nthat the regcache's ptid matches inferior_ptid.  That verifies that the\ncaller has properly set the correct global context.  This would have\ncaught (though a failed assertion) the current problem.\n\ngdb/ChangeLog:\n\n\tPR gdb/27147\n\t* sparc-nat.h (sparc_fetch_inferior_registers): Add\n\tprocess_stratum_target parameter,\n\tsparc_store_inferior_registers): update callers.\n\t* sparc-nat.c (sparc_fetch_inferior_registers,\n\tsparc_store_inferior_registers): Add process_stratum_target\n\tparameter.  Switch current thread before calling\n\tsparc_supply_gregset / sparc_collect_rwindow.\n\t(sparc_store_inferior_registers): Likewise.\n\t* sparc-obsd-tdep.c (sparc32obsd_supply_uthread): Add assertion.\n\t(sparc32obsd_collect_uthread): Likewise.\n\t* sparc-tdep.c (sparc_supply_rwindow, sparc_collect_rwindow):\n\tAdd assertion.\n\t* sparc64-obsd-tdep.c (sparc64obsd_collect_uthread,\n\tsparc64obsd_supply_uthread): Add assertion.\n\nChange-Id: I16c658cd70896cea604516714f7e2428fbaf4301",
    "tree": {
      "sha": "8c2c2f47fe9a9ffa4224454e2801b244da9a8b87",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8c2c2f47fe9a9ffa4224454e2801b244da9a8b87"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d1e93af64a6b74921cca9bca8a7043855f9da10d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d1e93af64a6b74921cca9bca8a7043855f9da10d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d1e93af64a6b74921cca9bca8a7043855f9da10d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d1e93af64a6b74921cca9bca8a7043855f9da10d/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d4e5db4e5031f1b4050620e2b5a4599ace52a29f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4e5db4e5031f1b4050620e2b5a4599ace52a29f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d4e5db4e5031f1b4050620e2b5a4599ace52a29f"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 63,
    "deletions": 8
  },
  "files": [
    {
      "sha": "cfdf5305eed61ad742479c49784d02a75d94c845",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d1e93af64a6b74921cca9bca8a7043855f9da10d",
      "patch": "@@ -1,3 +1,21 @@\n+2021-03-04  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR gdb/27147\n+\t* sparc-nat.h (sparc_fetch_inferior_registers): Add\n+\tprocess_stratum_target parameter,\n+\tsparc_store_inferior_registers): update callers.\n+\t* sparc-nat.c (sparc_fetch_inferior_registers,\n+\tsparc_store_inferior_registers): Add process_stratum_target\n+\tparameter.  Switch current thread before calling\n+\tsparc_supply_gregset / sparc_collect_rwindow.\n+\t(sparc_store_inferior_registers): Likewise.\n+\t* sparc-obsd-tdep.c (sparc32obsd_supply_uthread): Add assertion.\n+\t(sparc32obsd_collect_uthread): Likewise.\n+\t* sparc-tdep.c (sparc_supply_rwindow, sparc_collect_rwindow):\n+\tAdd assertion.\n+\t* sparc64-obsd-tdep.c (sparc64obsd_collect_uthread,\n+\tsparc64obsd_supply_uthread): Add assertion.\n+\n 2021-03-04  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (struct match_data) <found_sym>: Now bool."
    },
    {
      "sha": "fa3b32cee18427ad89480ae9d45c1a663790aafc",
      "filename": "gdb/sparc-nat.c",
      "status": "modified",
      "additions": 17,
      "deletions": 2,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-nat.c?ref=d1e93af64a6b74921cca9bca8a7043855f9da10d",
      "patch": "@@ -147,7 +147,8 @@ sparc32_fpregset_supplies_p (struct gdbarch *gdbarch, int regnum)\n    for all registers (including the floating-point registers).  */\n \n void\n-sparc_fetch_inferior_registers (struct regcache *regcache, int regnum)\n+sparc_fetch_inferior_registers (process_stratum_target *proc_target,\n+\t\t\t\tregcache *regcache, int regnum)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n   ptid_t ptid = regcache->ptid ();\n@@ -167,6 +168,12 @@ sparc_fetch_inferior_registers (struct regcache *regcache, int regnum)\n       if (gdb_ptrace (PTRACE_GETREGS, ptid, (PTRACE_TYPE_ARG3) &regs) == -1)\n \tperror_with_name (_(\"Couldn't get registers\"));\n \n+      /* Deep down, sparc_supply_rwindow reads memory, so needs the global\n+\t thread context to be set.  */\n+      thread_info *thread = find_thread_ptid (proc_target, ptid);\n+      scoped_restore_current_thread restore_thread;\n+      switch_to_thread (thread);\n+\n       sparc_supply_gregset (sparc_gregmap, regcache, -1, &regs);\n       if (regnum != -1)\n \treturn;\n@@ -184,7 +191,8 @@ sparc_fetch_inferior_registers (struct regcache *regcache, int regnum)\n }\n \n void\n-sparc_store_inferior_registers (struct regcache *regcache, int regnum)\n+sparc_store_inferior_registers (process_stratum_target *proc_target,\n+\t\t\t\tregcache *regcache, int regnum)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n   ptid_t ptid = regcache->ptid ();\n@@ -208,6 +216,13 @@ sparc_store_inferior_registers (struct regcache *regcache, int regnum)\n \t  ULONGEST sp;\n \n \t  regcache_cooked_read_unsigned (regcache, SPARC_SP_REGNUM, &sp);\n+\n+\t  /* Deep down, sparc_collect_rwindow writes memory, so needs the global\n+\t     thread context to be set.  */\n+\t  thread_info *thread = find_thread_ptid (proc_target, ptid);\n+\t  scoped_restore_current_thread restore_thread;\n+\t  switch_to_thread (thread);\n+\n \t  sparc_collect_rwindow (regcache, sp, regnum);\n \t}\n "
    },
    {
      "sha": "9d0c24f731f60a2cb229d1b20849b31228fee05e",
      "filename": "gdb/sparc-nat.h",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-nat.h?ref=d1e93af64a6b74921cca9bca8a7043855f9da10d",
      "patch": "@@ -41,8 +41,10 @@ extern int (*sparc_fpregset_supplies_p) (struct gdbarch *gdbarch, int);\n extern int sparc32_gregset_supplies_p (struct gdbarch *gdbarch, int regnum);\n extern int sparc32_fpregset_supplies_p (struct gdbarch *gdbarch, int regnum);\n \n-extern void sparc_fetch_inferior_registers (struct regcache *, int);\n-extern void sparc_store_inferior_registers (struct regcache *, int);\n+extern void sparc_fetch_inferior_registers (process_stratum_target *proc_target,\n+\t\t\t\t\t    regcache *, int);\n+extern void sparc_store_inferior_registers (process_stratum_target *proc_target,\n+\t\t\t\t\t    regcache *, int);\n \n extern target_xfer_status sparc_xfer_wcookie (enum target_object object,\n \t\t\t\t\t      const char *annex,\n@@ -59,10 +61,10 @@ template<typename BaseTarget>\n struct sparc_target : public BaseTarget\n {\n   void fetch_registers (struct regcache *regcache, int regnum) override\n-  { sparc_fetch_inferior_registers (regcache, regnum); }\n+  { sparc_fetch_inferior_registers (this, regcache, regnum); }\n \n   void store_registers (struct regcache *regcache, int regnum) override\n-  { sparc_store_inferior_registers (regcache, regnum); }\n+  { sparc_store_inferior_registers (this, regcache, regnum); }\n \n   enum target_xfer_status xfer_partial (enum target_object object,\n \t\t\t\t\tconst char *annex,"
    },
    {
      "sha": "e198e9702cdb07a37ab08f1cc06609680357d980",
      "filename": "gdb/sparc-obsd-tdep.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc-obsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc-obsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-obsd-tdep.c?ref=d1e93af64a6b74921cca9bca8a7043855f9da10d",
      "patch": "@@ -25,6 +25,7 @@\n #include \"regcache.h\"\n #include \"symtab.h\"\n #include \"trad-frame.h\"\n+#include \"inferior.h\"\n \n #include \"obsd-tdep.h\"\n #include \"sparc-tdep.h\"\n@@ -158,6 +159,9 @@ sparc32obsd_supply_uthread (struct regcache *regcache,\n   CORE_ADDR fp, fp_addr = addr + SPARC32OBSD_UTHREAD_FP_OFFSET;\n   gdb_byte buf[4];\n \n+  /* This function calls functions that depend on the global current thread.  */\n+  gdb_assert (regcache->ptid () == inferior_ptid);\n+\n   gdb_assert (regnum >= -1);\n \n   fp = read_memory_unsigned_integer (fp_addr, 4, byte_order);\n@@ -203,6 +207,9 @@ sparc32obsd_collect_uthread(const struct regcache *regcache,\n   CORE_ADDR sp;\n   gdb_byte buf[4];\n \n+  /* This function calls functions that depend on the global current thread.  */\n+  gdb_assert (regcache->ptid () == inferior_ptid);\n+\n   gdb_assert (regnum >= -1);\n \n   if (regnum == SPARC_SP_REGNUM || regnum == -1)"
    },
    {
      "sha": "34f22879737a91e68058928d7eb7a173b9a49a16",
      "filename": "gdb/sparc-tdep.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-tdep.c?ref=d1e93af64a6b74921cca9bca8a7043855f9da10d",
      "patch": "@@ -1948,6 +1948,9 @@ sparc_supply_rwindow (struct regcache *regcache, CORE_ADDR sp, int regnum)\n   gdb_byte buf[8];\n   int i;\n \n+  /* This function calls functions that depend on the global current thread.  */\n+  gdb_assert (regcache->ptid () == inferior_ptid);\n+\n   if (sp & 1)\n     {\n       /* Registers are 64-bit.  */\n@@ -2022,6 +2025,9 @@ sparc_collect_rwindow (const struct regcache *regcache,\n   gdb_byte buf[8];\n   int i;\n \n+  /* This function calls functions that depend on the global current thread.  */\n+  gdb_assert (regcache->ptid () == inferior_ptid);\n+\n   if (sp & 1)\n     {\n       /* Registers are 64-bit.  */"
    },
    {
      "sha": "b741d0216c325a22670eef4af3e2f67a41deba64",
      "filename": "gdb/sparc64-linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-linux-nat.c?ref=d1e93af64a6b74921cca9bca8a7043855f9da10d",
      "patch": "@@ -35,10 +35,10 @@ class sparc64_linux_nat_target final : public linux_nat_target\n public:\n   /* Add our register access methods.  */\n   void fetch_registers (struct regcache *regcache, int regnum) override\n-  { sparc_fetch_inferior_registers (regcache, regnum); }\n+  { sparc_fetch_inferior_registers (this, regcache, regnum); }\n \n   void store_registers (struct regcache *regcache, int regnum) override\n-  { sparc_store_inferior_registers (regcache, regnum); }\n+  { sparc_store_inferior_registers (this, regcache, regnum); }\n \n   /* Override linux_nat_target low methods.  */\n "
    },
    {
      "sha": "cf3138a7ab149bbf185a60b4f6f3a02847e289f6",
      "filename": "gdb/sparc64-obsd-tdep.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc64-obsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d1e93af64a6b74921cca9bca8a7043855f9da10d/gdb/sparc64-obsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-obsd-tdep.c?ref=d1e93af64a6b74921cca9bca8a7043855f9da10d",
      "patch": "@@ -27,6 +27,7 @@\n #include \"symtab.h\"\n #include \"objfiles.h\"\n #include \"trad-frame.h\"\n+#include \"inferior.h\"\n \n #include \"obsd-tdep.h\"\n #include \"sparc64-tdep.h\"\n@@ -328,6 +329,9 @@ sparc64obsd_supply_uthread (struct regcache *regcache,\n   CORE_ADDR fp, fp_addr = addr + SPARC64OBSD_UTHREAD_FP_OFFSET;\n   gdb_byte buf[8];\n \n+  /* This function calls functions that depend on the global current thread.  */\n+  gdb_assert (regcache->ptid () == inferior_ptid);\n+\n   gdb_assert (regnum >= -1);\n \n   fp = read_memory_unsigned_integer (fp_addr, 8, byte_order);\n@@ -373,6 +377,9 @@ sparc64obsd_collect_uthread(const struct regcache *regcache,\n   CORE_ADDR sp;\n   gdb_byte buf[8];\n \n+  /* This function calls functions that depend on the global current thread.  */\n+  gdb_assert (regcache->ptid () == inferior_ptid);\n+\n   gdb_assert (regnum >= -1);\n \n   if (regnum == SPARC_SP_REGNUM || regnum == -1)"
    }
  ]
}