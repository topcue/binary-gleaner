{
  "sha": "ab4ee6147eb2e8fafd1fb96c945029c789182d3b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWI0ZWU2MTQ3ZWIyZThmYWZkMWZiOTZjOTQ1MDI5Yzc4OTE4MmQzYg==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2019-04-30T21:00:19Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2019-04-30T21:00:19Z"
    },
    "message": "gdb/windows-nat.c: Get rid of main_thread_id global\n\nThis global is meant to point to the \"main\" thread of execution of\nthe program we are debugging. It is set when attaching to a process\nor when receiving a CREATE_PROCESS_DEBUG_EVENT event. The theory at\nthe time was that this was also going to be the thread receiving\nthe EXIT_PROCESS_DEBUG_EVENT event.\n\nUnfortunately, we have discovered since then that this is actually\nnot guaranteed. What this means in practice is that there is moderate\nrisk that main_thread_id refers to a thread which no longer exists.\n\nThis global is used in 3 situations:\n  - OUTPUT_DEBUG_STRING_EVENT\n  - LOAD_DLL_DEBUG_EVENT\n  - UNLOAD_DLL_DEBUG_EVENT\n\nIt's not clear why we would need to use the main_thread_id in those cases\ninstead of using the thread ID provided by the kernel events itself.\nSo this patch implements this approach, which then allows us to delete\nthe main_thread_id global.\n\ngdb/testsuite:\n\n\t* windows-nat.c (main_thread_id): Delete.\n\t(handle_output_debug_string): Replace main_thread_id by\n\tcurrent_event.dwThreadId.\n\t(fake_create_process): Likewise.\n\t(get_windows_debug_event) <CREATE_PROCESS_DEBUG_EVENT>:\n\tDo not set main_thread_id.\n\t<LOAD_DLL_DEBUG_EVENT>: Replace main_thread_id by\n\tcurrent_event.dwThreadId.\n\t<UNLOAD_DLL_DEBUG_EVENT>: Likewise.",
    "tree": {
      "sha": "467cc690e1dc3c7e557145c272e84451606554fa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/467cc690e1dc3c7e557145c272e84451606554fa"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ab4ee6147eb2e8fafd1fb96c945029c789182d3b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab4ee6147eb2e8fafd1fb96c945029c789182d3b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ab4ee6147eb2e8fafd1fb96c945029c789182d3b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab4ee6147eb2e8fafd1fb96c945029c789182d3b/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8ed5b76ea2de370265382dab1d538a919e2603ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ed5b76ea2de370265382dab1d538a919e2603ab",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8ed5b76ea2de370265382dab1d538a919e2603ab"
    }
  ],
  "stats": {
    "total": 23,
    "additions": 16,
    "deletions": 7
  },
  "files": [
    {
      "sha": "126343ce99b6ec14217b615c1aea168feb8efcf2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab4ee6147eb2e8fafd1fb96c945029c789182d3b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab4ee6147eb2e8fafd1fb96c945029c789182d3b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ab4ee6147eb2e8fafd1fb96c945029c789182d3b",
      "patch": "@@ -1,3 +1,15 @@\n+2019-04-30  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* windows-nat.c (main_thread_id): Delete.\n+\t(handle_output_debug_string): Replace main_thread_id by\n+\tcurrent_event.dwThreadId.\n+\t(fake_create_process): Likewise.\n+\t(get_windows_debug_event) <CREATE_PROCESS_DEBUG_EVENT>:\n+\tDo not set main_thread_id.\n+\t<LOAD_DLL_DEBUG_EVENT>: Replace main_thread_id by\n+\tcurrent_event.dwThreadId.\n+\t<UNLOAD_DLL_DEBUG_EVENT>: Likewise.\n+\n 2019-04-30  Joel Brobecker  <brobecker@adacore.com>\n \n \t* windows-nat.c (get_windows_debug_event) <EXIT_PROCESS_DEBUG_EVENT>:"
    },
    {
      "sha": "ae4e3d55b308149b17e9606b0c6b9621498fbdf3",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab4ee6147eb2e8fafd1fb96c945029c789182d3b/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab4ee6147eb2e8fafd1fb96c945029c789182d3b/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=ab4ee6147eb2e8fafd1fb96c945029c789182d3b",
      "patch": "@@ -237,7 +237,6 @@ static DEBUG_EVENT current_event;\t/* The current debug event from\n \t\t\t\t\t   WaitForDebugEvent */\n static HANDLE current_process_handle;\t/* Currently executing process */\n static windows_thread_info *current_thread;\t/* Info on currently selected thread */\n-static DWORD main_thread_id;\t\t/* Thread ID of the main thread */\n \n /* Counts of things.  */\n static int exception_count = 0;\n@@ -1030,7 +1029,7 @@ handle_output_debug_string (struct target_waitstatus *ourstatus)\n \t  ourstatus->kind = TARGET_WAITKIND_STOPPED;\n \t  retval = strtoul (p, &p, 0);\n \t  if (!retval)\n-\t    retval = main_thread_id;\n+\t    retval = current_event.dwThreadId;\n \t  else if ((x = (LPCVOID) (uintptr_t) strtoull (p, NULL, 0))\n \t\t   && ReadProcessMemory (current_process_handle, x,\n \t\t\t\t\t &saved_context,\n@@ -1406,14 +1405,13 @@ fake_create_process (void)\n        (unsigned) GetLastError ());\n       /*  We can not debug anything in that case.  */\n     }\n-  main_thread_id = current_event.dwThreadId;\n   current_thread\n     = windows_add_thread (ptid_t (current_event.dwProcessId, 0,\n \t\t\t\t  current_event.dwThreadId),\n \t\t\t  current_event.u.CreateThread.hThread,\n \t\t\t  current_event.u.CreateThread.lpThreadLocalBase,\n \t\t\t  true /* main_thread_p */);\n-  return main_thread_id;\n+  return current_event.dwThreadId;\n }\n \n void\n@@ -1611,7 +1609,6 @@ get_windows_debug_event (struct target_ops *ops,\n \tbreak;\n \n       current_process_handle = current_event.u.CreateProcessInfo.hProcess;\n-      main_thread_id = current_event.dwThreadId;\n       /* Add the main thread.  */\n       th = windows_add_thread\n         (ptid_t (current_event.dwProcessId, 0,\n@@ -1656,7 +1653,7 @@ get_windows_debug_event (struct target_ops *ops,\n       catch_errors (handle_load_dll);\n       ourstatus->kind = TARGET_WAITKIND_LOADED;\n       ourstatus->value.integer = 0;\n-      thread_id = main_thread_id;\n+      thread_id = current_event.dwThreadId;\n       break;\n \n     case UNLOAD_DLL_DEBUG_EVENT:\n@@ -1669,7 +1666,7 @@ get_windows_debug_event (struct target_ops *ops,\n       catch_errors (handle_unload_dll);\n       ourstatus->kind = TARGET_WAITKIND_LOADED;\n       ourstatus->value.integer = 0;\n-      thread_id = main_thread_id;\n+      thread_id = current_event.dwThreadId;\n       break;\n \n     case EXCEPTION_DEBUG_EVENT:"
    }
  ]
}