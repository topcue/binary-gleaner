{
  "sha": "d4eff4c122e06e913452e2039e29e8db6b15b1dd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDRlZmY0YzEyMmUwNmU5MTM0NTJlMjAzOWUyOWU4ZGI2YjE1YjFkZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:20Z"
    },
    "message": "Introduce repeat_operation\n\nThis adds class repeat_operation, which implements BINOP_REPEAT.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class repeat_operation): New.\n\t* eval.c (eval_op_repeat): No longer static.  Remove \"op\"\n\tparameter.\n\t(evaluate_subexp_standard): Update.\n\t* ax-gdb.c (repeat_operation::do_generate_ax): New method.",
    "tree": {
      "sha": "947f955e0c6857fae0edb7d26cb9d0e86f594daf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/947f955e0c6857fae0edb7d26cb9d0e86f594daf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d4eff4c122e06e913452e2039e29e8db6b15b1dd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4eff4c122e06e913452e2039e29e8db6b15b1dd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d4eff4c122e06e913452e2039e29e8db6b15b1dd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4eff4c122e06e913452e2039e29e8db6b15b1dd/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "46916f2bcbaf4532aab9fecb2344330710129ffa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46916f2bcbaf4532aab9fecb2344330710129ffa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/46916f2bcbaf4532aab9fecb2344330710129ffa"
    }
  ],
  "stats": {
    "total": 84,
    "additions": 81,
    "deletions": 3
  },
  "files": [
    {
      "sha": "b93ca086eb541ffc0ff01a8bdf7790657f0053e0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4eff4c122e06e913452e2039e29e8db6b15b1dd/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4eff4c122e06e913452e2039e29e8db6b15b1dd/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d4eff4c122e06e913452e2039e29e8db6b15b1dd",
      "patch": "@@ -1,3 +1,11 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class repeat_operation): New.\n+\t* eval.c (eval_op_repeat): No longer static.  Remove \"op\"\n+\tparameter.\n+\t(evaluate_subexp_standard): Update.\n+\t* ax-gdb.c (repeat_operation::do_generate_ax): New method.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class comparison_operation): New."
    },
    {
      "sha": "332840456fea07cf14ae4ed3abb07d5a5e417d70",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4eff4c122e06e913452e2039e29e8db6b15b1dd/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4eff4c122e06e913452e2039e29e8db6b15b1dd/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=d4eff4c122e06e913452e2039e29e8db6b15b1dd",
      "patch": "@@ -2419,6 +2419,56 @@ ternop_cond_operation::do_generate_ax (struct expression *exp,\n   value->kind = value2.kind;\n }\n \n+/* Generate code for GDB's magical `repeat' operator.\n+   LVALUE @ INT creates an array INT elements long, and whose elements\n+   have the same type as LVALUE, located in memory so that LVALUE is\n+   its first element.  For example, argv[0]@argc gives you the array\n+   of command-line arguments.\n+\n+   Unfortunately, because we have to know the types before we actually\n+   have a value for the expression, we can't implement this perfectly\n+   without changing the type system, having values that occupy two\n+   stack slots, doing weird things with sizeof, etc.  So we require\n+   the right operand to be a constant expression.  */\n+void\n+repeat_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t  struct agent_expr *ax,\n+\t\t\t\t  struct axs_value *value,\n+\t\t\t\t  struct type *cast_type)\n+{\n+  struct axs_value value1;\n+\n+  /* We don't want to turn this into an rvalue, so no conversions\n+     here.  */\n+  std::get<0> (m_storage)->generate_ax (exp, ax, &value1);\n+  if (value1.kind != axs_lvalue_memory)\n+    error (_(\"Left operand of `@' must be an object in memory.\"));\n+\n+  /* Evaluate the length; it had better be a constant.  */\n+  if (!std::get<1> (m_storage)->constant_p ())\n+    error (_(\"Right operand of `@' must be a \"\n+\t     \"constant, in agent expressions.\"));\n+\n+  struct value *v\n+    = std::get<1> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t EVAL_AVOID_SIDE_EFFECTS);\n+  if (value_type (v)->code () != TYPE_CODE_INT)\n+    error (_(\"Right operand of `@' must be an integer.\"));\n+  int length = value_as_long (v);\n+  if (length <= 0)\n+    error (_(\"Right operand of `@' must be positive.\"));\n+\n+  /* The top of the stack is already the address of the object, so\n+     all we need to do is frob the type of the lvalue.  */\n+  /* FIXME-type-allocation: need a way to free this type when we are\n+     done with it.  */\n+  struct type *array\n+    = lookup_array_range_type (value1.type, 0, length - 1);\n+\n+  value->kind = axs_lvalue_memory;\n+  value->type = array;\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "2d2f881746c1dbbaefe86b0ae2b172472c9361d3",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4eff4c122e06e913452e2039e29e8db6b15b1dd/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4eff4c122e06e913452e2039e29e8db6b15b1dd/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=d4eff4c122e06e913452e2039e29e8db6b15b1dd",
      "patch": "@@ -1732,9 +1732,9 @@ eval_op_leq (struct type *expect_type, struct expression *exp,\n \n /* A helper function for BINOP_REPEAT.  */\n \n-static struct value *\n+struct value *\n eval_op_repeat (struct type *expect_type, struct expression *exp,\n-\t\tenum noside noside,\n+\t\tenum noside noside, enum exp_opcode op,\n \t\tstruct value *arg1, struct value *arg2)\n {\n   if (noside == EVAL_SKIP)\n@@ -2946,7 +2946,7 @@ evaluate_subexp_standard (struct type *expect_type,\n     case BINOP_REPEAT:\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n       arg2 = evaluate_subexp (nullptr, exp, pos, noside);\n-      return eval_op_repeat (expect_type, exp, noside, arg1, arg2);\n+      return eval_op_repeat (expect_type, exp, noside, op, arg1, arg2);\n \n     case BINOP_COMMA:\n       evaluate_subexp (nullptr, exp, pos, noside);"
    },
    {
      "sha": "4bf32f538e168a5ba8acd77304ed8fd00cd276fe",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4eff4c122e06e913452e2039e29e8db6b15b1dd/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4eff4c122e06e913452e2039e29e8db6b15b1dd/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=d4eff4c122e06e913452e2039e29e8db6b15b1dd",
      "patch": "@@ -135,6 +135,11 @@ extern struct value *eval_op_leq (struct type *expect_type,\n \t\t\t\t  enum noside noside, enum exp_opcode op,\n \t\t\t\t  struct value *arg1,\n \t\t\t\t  struct value *arg2);\n+extern struct value *eval_op_repeat (struct type *expect_type,\n+\t\t\t\t     struct expression *exp,\n+\t\t\t\t     enum noside noside, enum exp_opcode op,\n+\t\t\t\t     struct value *arg1,\n+\t\t\t\t     struct value *arg2);\n \n namespace expr\n {\n@@ -1188,6 +1193,21 @@ using gtr_operation = comparison_operation<BINOP_GTR, eval_op_gtr>;\n using geq_operation = comparison_operation<BINOP_GEQ, eval_op_geq>;\n using leq_operation = comparison_operation<BINOP_LEQ, eval_op_leq>;\n \n+/* Implement the GDB '@' repeat operator.  */\n+class repeat_operation\n+  : public binop_operation<BINOP_REPEAT, eval_op_repeat>\n+{\n+  using binop_operation<BINOP_REPEAT, eval_op_repeat>::binop_operation;\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}