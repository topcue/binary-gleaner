{
  "sha": "53b2f36bf6aa939feab6f82f05d7dad52f82660d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTNiMmYzNmJmNmFhOTM5ZmVhYjZmODJmMDVkN2RhZDUyZjgyNjYwZA==",
  "commit": {
    "author": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-03-25T12:08:53Z"
    },
    "committer": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-03-25T15:05:53Z"
    },
    "message": "AArch64: Fix disassembler bug with out-of-order sections\n\nThe AArch64 disassembler has an optimization that it uses to reduce the amount\nit has to search for mapping symbols during disassembly.  This optimization\nassumes that sections are listed in the section header in monotonic increasing\nVMAs.  However this is not a requirement for the ELF specification.\n\nBecause of this when such \"out of order\" sections occur the disassembler would\npick the wrong mapping symbol to disassemble the section with.\n\nThis fixes it by explicitly passing along the stop offset for the current\ndisassembly glob and when this changes compared to the previous one we've seen\nthe optimization won't be performed.  In effect this restarts the search from\na well defined starting point.  Usually the symbol's address.\n\nThe existing stop_vma can't be used for this as it is allowed to be unset and\nsetting this unconditionally would change the semantics of this field.\n\nbinutils/ChangeLog:\n\n\t* objdump.c (disassemble_bytes): Pass stop_offset.\n\t* testsuite/binutils-all/aarch64/out-of-order.T: New test.\n\t* testsuite/binutils-all/aarch64/out-of-order.d: New test.\n\t* testsuite/binutils-all/aarch64/out-of-order.s: New test.\n\ninclude/ChangeLog:\n\n\t* dis-asm.h (struct disassemble_info): Add stop_offset.\n\nopcodes/ChangeLog:\n\n\t* aarch64-dis.c (last_stop_offset): New.\n\t(print_insn_aarch64): Use stop_offset.",
    "tree": {
      "sha": "3ea5018d4dee6a17be4eae4bacbcb70f0bbbbb51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3ea5018d4dee6a17be4eae4bacbcb70f0bbbbb51"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/53b2f36bf6aa939feab6f82f05d7dad52f82660d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53b2f36bf6aa939feab6f82f05d7dad52f82660d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/53b2f36bf6aa939feab6f82f05d7dad52f82660d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53b2f36bf6aa939feab6f82f05d7dad52f82660d/comments",
  "author": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9a93502fa81734d39f213ccb33b497bc40e1423d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a93502fa81734d39f213ccb33b497bc40e1423d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9a93502fa81734d39f213ccb33b497bc40e1423d"
    }
  ],
  "stats": {
    "total": 99,
    "additions": 98,
    "deletions": 1
  },
  "files": [
    {
      "sha": "121c54d9919bea8bf1fca800071f8cb1f3a08639",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53b2f36bf6aa939feab6f82f05d7dad52f82660d/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53b2f36bf6aa939feab6f82f05d7dad52f82660d/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=53b2f36bf6aa939feab6f82f05d7dad52f82660d",
      "patch": "@@ -1,3 +1,10 @@\n+2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* objdump.c (disassemble_bytes): Pass stop_offset.\n+\t* testsuite/binutils-all/aarch64/out-of-order.T: New test.\n+\t* testsuite/binutils-all/aarch64/out-of-order.d: New test.\n+\t* testsuite/binutils-all/aarch64/out-of-order.s: New test.\n+\n 2019-03-19  Nick Clifton  <nickc@redhat.com>\n \n \tPR 24360"
    },
    {
      "sha": "d80b3f5a8890063baf567e850ed73162788dc702",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53b2f36bf6aa939feab6f82f05d7dad52f82660d/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53b2f36bf6aa939feab6f82f05d7dad52f82660d/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=53b2f36bf6aa939feab6f82f05d7dad52f82660d",
      "patch": "@@ -1991,6 +1991,7 @@ disassemble_bytes (struct disassemble_info * inf,\n \t\t   disassembling code of course, and when -D is in effect.  */\n \t\tinf->stop_vma = section->vma + stop_offset;\n \n+\t      inf->stop_offset = stop_offset;\n \t      octets = (*disassemble_fn) (section->vma + addr_offset, inf);\n \n \t      inf->stop_vma = 0;"
    },
    {
      "sha": "489ae80190e785f25e77a3db34e532db57b03da7",
      "filename": "binutils/testsuite/binutils-all/aarch64/out-of-order.T",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53b2f36bf6aa939feab6f82f05d7dad52f82660d/binutils/testsuite/binutils-all/aarch64/out-of-order.T",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53b2f36bf6aa939feab6f82f05d7dad52f82660d/binutils/testsuite/binutils-all/aarch64/out-of-order.T",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/aarch64/out-of-order.T?ref=53b2f36bf6aa939feab6f82f05d7dad52f82660d",
      "patch": "@@ -0,0 +1,14 @@\n+ENTRY(v1)\n+SECTIONS\n+{\n+  . = 0xffe00000;\n+  .global : { *(.global) }\n+  . = 0x4018280;\n+  .func2 : { *(.func2) }\n+  . = 0x4005000;\n+  .func1 : { *(.func1) }\n+  . = 0x4015000;\n+  .func3 : { *(.func3) }\n+  .data : { *(.data) }\n+  .rodata : { *(.rodata) }\n+}\n\\ No newline at end of file"
    },
    {
      "sha": "410f37f68ea21f9e16e2319b5048c123cec99910",
      "filename": "binutils/testsuite/binutils-all/aarch64/out-of-order.d",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53b2f36bf6aa939feab6f82f05d7dad52f82660d/binutils/testsuite/binutils-all/aarch64/out-of-order.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53b2f36bf6aa939feab6f82f05d7dad52f82660d/binutils/testsuite/binutils-all/aarch64/out-of-order.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/aarch64/out-of-order.d?ref=53b2f36bf6aa939feab6f82f05d7dad52f82660d",
      "patch": "@@ -0,0 +1,27 @@\n+#PROG: objcopy\n+#ld: -T out-of-order.T\n+#objdump: -d\n+#name: Check if disassembler can handle sections in different order than header\n+\n+.*: +file format .*aarch64.*\n+\n+Disassembly of section \\.func2:\n+\n+0000000004018280 <\\.func2>:\n+ 4018280:\t8b010000 \tadd\tx0, x0, x1\n+\n+Disassembly of section \\.func1:\n+\n+0000000004005000 <v1>:\n+ 4005000:\t8b010000 \tadd\tx0, x0, x1\n+ 4005004:\t00000000 \t\\.word\t0x00000000\n+\n+Disassembly of section \\.func3:\n+\n+0000000004015000 <\\.func3>:\n+ 4015000:\t8b010000 \tadd\tx0, x0, x1\n+ 4015004:\t8b010000 \tadd\tx0, x0, x1\n+ 4015008:\t8b010000 \tadd\tx0, x0, x1\n+ 401500c:\t8b010000 \tadd\tx0, x0, x1\n+ 4015010:\t8b010000 \tadd\tx0, x0, x1\n+ 4015014:\t00000000 \t\\.word\t0x00000000"
    },
    {
      "sha": "6c52e857df485f71ca650338ead40ee387459e87",
      "filename": "binutils/testsuite/binutils-all/aarch64/out-of-order.s",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53b2f36bf6aa939feab6f82f05d7dad52f82660d/binutils/testsuite/binutils-all/aarch64/out-of-order.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53b2f36bf6aa939feab6f82f05d7dad52f82660d/binutils/testsuite/binutils-all/aarch64/out-of-order.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/aarch64/out-of-order.s?ref=53b2f36bf6aa939feab6f82f05d7dad52f82660d",
      "patch": "@@ -0,0 +1,28 @@\n+\t.text\n+\t.global v1\n+\t.section .func1,\"ax\",@progbits\n+\t.type v1 %function\n+\t.size v1, 4\n+v1:\n+\tadd x0, x0, x1\n+\t.word 0\n+\n+\t.section .func2,\"ax\",@progbits\n+\tadd x0, x0, x1\n+\n+\t.section .func3,\"ax\",@progbits\n+\tadd x0, x0, x1\n+\tadd x0, x0, x1\n+\tadd x0, x0, x1\n+\tadd x0, x0, x1\n+\tadd x0, x0, x1\n+\t.word 0\n+\n+\t.data\n+\t.section .global,\"aw\",@progbits\n+\t.xword 1\n+\t.xword 1\n+\t.xword 1\n+\n+\t.section .rodata\n+\t.word 4"
    },
    {
      "sha": "ae79b9f47fcf2b20f512823777486ff42f5b0800",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53b2f36bf6aa939feab6f82f05d7dad52f82660d/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53b2f36bf6aa939feab6f82f05d7dad52f82660d/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=53b2f36bf6aa939feab6f82f05d7dad52f82660d",
      "patch": "@@ -1,3 +1,7 @@\n+2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* dis-asm.h (struct disassemble_info): Add stop_offset.\n+\n 2019-03-13  Sudakshina Das  <sudi.das@arm.com>\n \n \t* elf/aarch64.h (DT_AARCH64_PAC_PLT): New."
    },
    {
      "sha": "4e1263c90e3bed06195ad3481d0a4d1885f744e5",
      "filename": "include/dis-asm.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53b2f36bf6aa939feab6f82f05d7dad52f82660d/include/dis-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53b2f36bf6aa939feab6f82f05d7dad52f82660d/include/dis-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/dis-asm.h?ref=53b2f36bf6aa939feab6f82f05d7dad52f82660d",
      "patch": "@@ -221,6 +221,12 @@ typedef struct disassemble_info\n      file being disassembled.  */\n   bfd_vma stop_vma;\n \n+  /* The end range of the current range being disassembled.  This is required\n+     in order to notify the disassembler when it's currently handling a\n+     different range than it was before.  This prevent unsafe optimizations when\n+     disassembling such as the way mapping symbols are found on AArch64.  */\n+  bfd_vma stop_offset;\n+\n } disassemble_info;\n \n /* This struct is used to pass information about valid disassembler"
    },
    {
      "sha": "81fe9f00b2b62b8adb7ffbc7d8530e2d9828c434",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53b2f36bf6aa939feab6f82f05d7dad52f82660d/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53b2f36bf6aa939feab6f82f05d7dad52f82660d/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=53b2f36bf6aa939feab6f82f05d7dad52f82660d",
      "patch": "@@ -1,3 +1,8 @@\n+2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* aarch64-dis.c (last_stop_offset): New.\n+\t(print_insn_aarch64): Use stop_offset.\n+\n 2019-03-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/24359"
    },
    {
      "sha": "fc7e95d066807f2909d1a1c891d7a89a5f31204b",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53b2f36bf6aa939feab6f82f05d7dad52f82660d/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53b2f36bf6aa939feab6f82f05d7dad52f82660d/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=53b2f36bf6aa939feab6f82f05d7dad52f82660d",
      "patch": "@@ -37,6 +37,7 @@ enum map_type\n \n static enum map_type last_type;\n static int last_mapping_sym = -1;\n+static bfd_vma last_stop_offset = 0;\n static bfd_vma last_mapping_addr = 0;\n \n /* Other options */\n@@ -3333,7 +3334,10 @@ print_insn_aarch64 (bfd_vma pc,\n       /* Start scanning at the start of the function, or wherever\n \t we finished last time.  */\n       n = info->symtab_pos + 1;\n-      if (n < last_mapping_sym)\n+      /* If the last stop offset is different from the current one it means we\n+\t are disassembling a different glob of bytes.  As such the optimization\n+\t would not be safe and we should start over.  */\n+      if (n < last_mapping_sym && info->stop_offset == last_stop_offset)\n \tn = last_mapping_sym;\n \n       /* Scan up to the location being disassembled.  */\n@@ -3370,6 +3374,7 @@ print_insn_aarch64 (bfd_vma pc,\n \n       last_mapping_sym = last_sym;\n       last_type = type;\n+      last_stop_offset = info->stop_offset;\n \n       /* Look a little bit ahead to see if we should print out\n \t less than four bytes of data.  If there's a symbol,"
    }
  ]
}