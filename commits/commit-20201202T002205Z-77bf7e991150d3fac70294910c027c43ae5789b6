{
  "sha": "77bf7e991150d3fac70294910c027c43ae5789b6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzdiZjdlOTkxMTUwZDNmYWM3MDI5NDkxMGMwMjdjNDNhZTU3ODliNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-02T00:22:05Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-02T00:22:05Z"
    },
    "message": "Use new+delete for struct expression\n\nIn another series I'm working on, it is necessary to manage\n\"struct expression\" with new and delete.  Because the patch is\nstraightforward and could be extracted, I've done so here.\n\ngdb/ChangeLog\n2020-12-01  Tom Tromey  <tom@tromey.com>\n\n\t* parse.c (expr_builder::expr_builder): Initialize expout.\n\t(expr_builder::release): Use expression::resize.\n\t(expression::expression, expression::~expression)\n\t(expression::resize): New methods.\n\t(write_exp_elt): Use expression::resize.\n\t(prefixify_expression): Update.\n\t(increase_expout_size): Use expression::resize.\n\t* expression.h (struct expression): Add constructor, destructor.\n\t<resize>: New method.\n\t(expression_up): Change type.",
    "tree": {
      "sha": "058346ea2f9e4daafe97d4d1784aaabca585b216",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/058346ea2f9e4daafe97d4d1784aaabca585b216"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/77bf7e991150d3fac70294910c027c43ae5789b6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/77bf7e991150d3fac70294910c027c43ae5789b6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/77bf7e991150d3fac70294910c027c43ae5789b6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/77bf7e991150d3fac70294910c027c43ae5789b6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e89b3d52936a0492f2886c2a1fc53dd87aaf94a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e89b3d52936a0492f2886c2a1fc53dd87aaf94a3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e89b3d52936a0492f2886c2a1fc53dd87aaf94a3"
    }
  ],
  "stats": {
    "total": 85,
    "additions": 56,
    "deletions": 29
  },
  "files": [
    {
      "sha": "635435cbdeae41bcc0483797f01cf179eb193048",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/77bf7e991150d3fac70294910c027c43ae5789b6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/77bf7e991150d3fac70294910c027c43ae5789b6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=77bf7e991150d3fac70294910c027c43ae5789b6",
      "patch": "@@ -1,3 +1,16 @@\n+2020-12-01  Tom Tromey  <tom@tromey.com>\n+\n+\t* parse.c (expr_builder::expr_builder): Initialize expout.\n+\t(expr_builder::release): Use expression::resize.\n+\t(expression::expression, expression::~expression)\n+\t(expression::resize): New methods.\n+\t(write_exp_elt): Use expression::resize.\n+\t(prefixify_expression): Update.\n+\t(increase_expout_size): Use expression::resize.\n+\t* expression.h (struct expression): Add constructor, destructor.\n+\t<resize>: New method.\n+\t(expression_up): Change type.\n+\n 2020-12-01  Rogerio A. Cardoso  <rcardoso@linux.ibm.com>\n \t* ppc-linux-nat.c: (PPC_DEBUG_FEATURE_DATA_BP_ARCH_31): New define.\n \t(region_ok_for_hw_watchpoint): Check if 2nd DAWR is avaliable before"
    },
    {
      "sha": "684274b90b8ae42b0f94072ba6f424778d651f19",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 15,
      "deletions": 8,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/77bf7e991150d3fac70294910c027c43ae5789b6/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/77bf7e991150d3fac70294910c027c43ae5789b6/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=77bf7e991150d3fac70294910c027c43ae5789b6",
      "patch": "@@ -93,15 +93,22 @@ union exp_element\n   };\n \n struct expression\n-  {\n-    const struct language_defn *language_defn;\t/* language it was\n-\t\t\t\t\t\t   entered in.  */\n-    struct gdbarch *gdbarch;  /* architecture it was parsed in.  */\n-    int nelts;\n-    union exp_element elts[1];\n-  };\n+{\n+  expression (const struct language_defn *, struct gdbarch *, size_t);\n+  ~expression ();\n+  DISABLE_COPY_AND_ASSIGN (expression);\n+\n+  void resize (size_t);\n+\n+  /* Language it was entered in.  */\n+  const struct language_defn *language_defn;\n+  /* Architecture it was parsed in.  */\n+  struct gdbarch *gdbarch;\n+  int nelts = 0;\n+  union exp_element *elts;\n+};\n \n-typedef gdb::unique_xmalloc_ptr<expression> expression_up;\n+typedef std::unique_ptr<expression> expression_up;\n \n /* Macros for converting between number of expression elements and bytes\n    to store that many expression elements.  */"
    },
    {
      "sha": "73d82e64a87a6a12d07a3df73ef3b1824cc452e0",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 28,
      "deletions": 21,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/77bf7e991150d3fac70294910c027c43ae5789b6/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/77bf7e991150d3fac70294910c027c43ae5789b6/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=77bf7e991150d3fac70294910c027c43ae5789b6",
      "patch": "@@ -114,13 +114,9 @@ innermost_block_tracker::update (const struct block *b,\n expr_builder::expr_builder (const struct language_defn *lang,\n \t\t\t    struct gdbarch *gdbarch)\n   : expout_size (10),\n-    expout (XNEWVAR (expression,\n-\t\t     (sizeof (expression)\n-\t\t      + EXP_ELEM_TO_BYTES (expout_size)))),\n+    expout (new expression (lang, gdbarch, expout_size)),\n     expout_ptr (0)\n {\n-  expout->language_defn = lang;\n-  expout->gdbarch = gdbarch;\n }\n \n expression_up\n@@ -131,13 +127,31 @@ expr_builder::release ()\n      excess elements.  */\n \n   expout->nelts = expout_ptr;\n-  expout.reset (XRESIZEVAR (expression, expout.release (),\n-\t\t\t    (sizeof (expression)\n-\t\t\t     + EXP_ELEM_TO_BYTES (expout_ptr))));\n+  expout->resize (expout_ptr);\n \n   return std::move (expout);\n }\n \n+expression::expression (const struct language_defn *lang, struct gdbarch *arch,\n+\t\t\tsize_t n)\n+  : language_defn (lang),\n+    gdbarch (arch),\n+    elts (nullptr)\n+{\n+  resize (n);\n+}\n+\n+expression::~expression ()\n+{\n+  xfree (elts);\n+}\n+\n+void\n+expression::resize (size_t n)\n+{\n+  elts = XRESIZEVAR (union exp_element, elts, EXP_ELEM_TO_BYTES (n));\n+}\n+\n /* This page contains the functions for adding data to the struct expression\n    being constructed.  */\n \n@@ -152,9 +166,7 @@ write_exp_elt (struct expr_builder *ps, const union exp_element *expelt)\n   if (ps->expout_ptr >= ps->expout_size)\n     {\n       ps->expout_size *= 2;\n-      ps->expout.reset (XRESIZEVAR (expression, ps->expout.release (),\n-\t\t\t\t    (sizeof (expression)\n-\t\t\t\t     + EXP_ELEM_TO_BYTES (ps->expout_size))));\n+      ps->expout->resize (ps->expout_size);\n     }\n   ps->expout->elts[ps->expout_ptr++] = *expelt;\n }\n@@ -721,16 +733,14 @@ int\n prefixify_expression (struct expression *expr, int last_struct)\n {\n   gdb_assert (expr->nelts > 0);\n-  int len = sizeof (struct expression) + EXP_ELEM_TO_BYTES (expr->nelts);\n-  struct expression *temp;\n+  int len = EXP_ELEM_TO_BYTES (expr->nelts);\n+  struct expression temp (expr->language_defn, expr->gdbarch, expr->nelts);\n   int inpos = expr->nelts, outpos = 0;\n \n-  temp = (struct expression *) alloca (len);\n-\n   /* Copy the original expression into temp.  */\n-  memcpy (temp, expr, len);\n+  memcpy (temp.elts, expr->elts, len);\n \n-  return prefixify_subexp (temp, expr, inpos, outpos, last_struct);\n+  return prefixify_subexp (&temp, expr, inpos, outpos, last_struct);\n }\n \n /* Return the number of exp_elements in the postfix subexpression \n@@ -1412,10 +1422,7 @@ increase_expout_size (struct expr_builder *ps, size_t lenelt)\n     {\n       ps->expout_size = std::max (ps->expout_size * 2,\n \t\t\t\t  ps->expout_ptr + lenelt + 10);\n-      ps->expout.reset (XRESIZEVAR (expression,\n-\t\t\t\t    ps->expout.release (),\n-\t\t\t\t    (sizeof (struct expression)\n-\t\t\t\t     + EXP_ELEM_TO_BYTES (ps->expout_size))));\n+      ps->expout->resize (ps->expout_size);\n     }\n }\n "
    }
  ]
}