{
  "sha": "8a4f140205d1fb7240b154fd2f9074d7b42330b7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGE0ZjE0MDIwNWQxZmI3MjQwYjE1NGZkMmY5MDc0ZDdiNDIzMzBiNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-29T21:04:33Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-29T21:04:34Z"
    },
    "message": "Change exec_close to be a method on program_space\n\nexec_close uses the current program space, so it seemed cleaner to\nchange it to be a method on program_space.  This patch makes this\nchange.\n\ngdb/ChangeLog\n2020-10-29  Tom Tromey  <tom@tromey.com>\n\n\t* progspace.c (program_space::exec_close): New method, from\n\texec_close in exec.c.\n\t* exec.c (exec_close): Move to progspace.c.\n\t(exec_target::close, exec_file_attach): Update.\n\t* progspace.h (struct program_space) <exec_close>: Declare\n\tmethod.",
    "tree": {
      "sha": "871e1273de3a465496fcf4d037904c756ea48375",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/871e1273de3a465496fcf4d037904c756ea48375"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8a4f140205d1fb7240b154fd2f9074d7b42330b7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a4f140205d1fb7240b154fd2f9074d7b42330b7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8a4f140205d1fb7240b154fd2f9074d7b42330b7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8a4f140205d1fb7240b154fd2f9074d7b42330b7/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c20cb6860c27d6ef15a1e561f4be78e7b85952ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c20cb6860c27d6ef15a1e561f4be78e7b85952ac",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c20cb6860c27d6ef15a1e561f4be78e7b85952ac"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 35,
    "deletions": 28
  },
  "files": [
    {
      "sha": "d06ea4760971dd4fc0f0fc730d31ad6e46e3a267",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a4f140205d1fb7240b154fd2f9074d7b42330b7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a4f140205d1fb7240b154fd2f9074d7b42330b7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8a4f140205d1fb7240b154fd2f9074d7b42330b7",
      "patch": "@@ -1,3 +1,12 @@\n+2020-10-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* progspace.c (program_space::exec_close): New method, from\n+\texec_close in exec.c.\n+\t* exec.c (exec_close): Move to progspace.c.\n+\t(exec_target::close, exec_file_attach): Update.\n+\t* progspace.h (struct program_space) <exec_close>: Declare\n+\tmethod.\n+\n 2020-10-29  Tom Tromey  <tom@tromey.com>\n \n \t* progspace.h (struct program_space) <exec_filename>: Rename from"
    },
    {
      "sha": "6459688ad6d929fce092c0a92295572c14cc2200",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 3,
      "deletions": 26,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a4f140205d1fb7240b154fd2f9074d7b42330b7/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a4f140205d1fb7240b154fd2f9074d7b42330b7/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=8a4f140205d1fb7240b154fd2f9074d7b42330b7",
      "patch": "@@ -148,29 +148,6 @@ exec_target_open (const char *args, int from_tty)\n   exec_file_attach (args, from_tty);\n }\n \n-/* Close and clear exec_bfd.  If we end up with no target sections to\n-   read memory from, this unpushes the exec_ops target.  */\n-\n-void\n-exec_close (void)\n-{\n-  if (exec_bfd)\n-    {\n-      bfd *abfd = exec_bfd;\n-\n-      gdb_bfd_unref (abfd);\n-\n-      /* Removing target sections may close the exec_ops target.\n-\t Clear exec_bfd before doing so to prevent recursion.  */\n-      exec_bfd = NULL;\n-      exec_bfd_mtime = 0;\n-\n-      remove_target_sections (&exec_bfd);\n-\n-      current_program_space->exec_filename.reset (nullptr);\n-    }\n-}\n-\n /* This is the target_close implementation.  Clears all target\n    sections and closes all executable bfds from all program spaces.  */\n \n@@ -183,7 +160,7 @@ exec_target::close ()\n     {\n       set_current_program_space (ss);\n       current_target_sections->clear ();\n-      exec_close ();\n+      ss->exec_close ();\n     }\n }\n \n@@ -396,7 +373,7 @@ exec_file_attach (const char *filename, int from_tty)\n   gdb_bfd_ref_ptr exec_bfd_holder = gdb_bfd_ref_ptr::new_reference (exec_bfd);\n \n   /* Remove any previous exec file.  */\n-  exec_close ();\n+  current_program_space->exec_close ();\n \n   /* Now open and digest the file the user requested, if any.  */\n \n@@ -497,7 +474,7 @@ exec_file_attach (const char *filename, int from_tty)\n \t{\n \t  /* Make sure to close exec_bfd, or else \"run\" might try to use\n \t     it.  */\n-\t  exec_close ();\n+\t  current_program_space->exec_close ();\n \t  error (_(\"\\\"%ps\\\": not in executable format: %s\"),\n \t\t styled_string (file_name_style.style (), scratch_pathname),\n \t\t gdb_bfd_errmsg (bfd_get_error (), matching).c_str ());"
    },
    {
      "sha": "f98dd83da215812285ec67b645b3f5554f109233",
      "filename": "gdb/exec.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a4f140205d1fb7240b154fd2f9074d7b42330b7/gdb/exec.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a4f140205d1fb7240b154fd2f9074d7b42330b7/gdb/exec.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.h?ref=8a4f140205d1fb7240b154fd2f9074d7b42330b7",
      "patch": "@@ -117,8 +117,6 @@ extern void add_target_sections_of_objfile (struct objfile *objfile);\n extern void print_section_info (target_section_table *table,\n \t\t\t\tbfd *abfd);\n \n-extern void exec_close (void);\n-\n /* Helper function that attempts to open the symbol file at EXEC_FILE_HOST.\n    If successful, it proceeds to add the symbol file as the main symbol file.\n "
    },
    {
      "sha": "8a15c402c28e66d529f637ba0841439a5a90e2cc",
      "filename": "gdb/progspace.c",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a4f140205d1fb7240b154fd2f9074d7b42330b7/gdb/progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a4f140205d1fb7240b154fd2f9074d7b42330b7/gdb/progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.c?ref=8a4f140205d1fb7240b154fd2f9074d7b42330b7",
      "patch": "@@ -223,6 +223,26 @@ program_space::solibs () const\n   return next_adapter<struct so_list> (this->so_list);\n }\n \n+/* See progspace.h.  */\n+\n+void\n+program_space::exec_close ()\n+{\n+  if (ebfd)\n+    {\n+      gdb_bfd_unref (ebfd);\n+\n+      /* Removing target sections may close the exec_ops target.\n+\t Clear exec_bfd before doing so to prevent recursion.  */\n+      ebfd = NULL;\n+      ebfd_mtime = 0;\n+\n+      remove_target_sections (&ebfd);\n+\n+      exec_filename.reset (nullptr);\n+    }\n+}\n+\n /* Copies program space SRC to DEST.  Copies the main executable file,\n    and the main symbol file.  Returns DEST.  */\n "
    },
    {
      "sha": "6dcec9c96f7728b25227de383728b254e8b3c7c8",
      "filename": "gdb/progspace.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8a4f140205d1fb7240b154fd2f9074d7b42330b7/gdb/progspace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8a4f140205d1fb7240b154fd2f9074d7b42330b7/gdb/progspace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.h?ref=8a4f140205d1fb7240b154fd2f9074d7b42330b7",
      "patch": "@@ -272,6 +272,9 @@ struct program_space\n      for (so_list *so : pspace->solibs ()) { ... }  */\n   next_adapter<struct so_list> solibs () const;\n \n+  /* Close and clear exec_bfd.  If we end up with no target sections\n+     to read memory from, this unpushes the exec_ops target.  */\n+  void exec_close ();\n \n   /* Unique ID number.  */\n   int num = 0;"
    }
  ]
}