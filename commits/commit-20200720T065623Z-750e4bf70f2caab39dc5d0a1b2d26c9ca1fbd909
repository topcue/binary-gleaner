{
  "sha": "750e4bf70f2caab39dc5d0a1b2d26c9ca1fbd909",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzUwZTRiZjcwZjJjYWFiMzlkYzVkMGExYjJkMjZjOWNhMWZiZDkwOQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-20T06:56:23Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-20T06:56:23Z"
    },
    "message": "gas: generalize comment character escaping recognition\n\nPR gas/4572\n\nGeneralize what ab1fadc6b2f0 (\"PR22714, Assembler preprocessor loses\ntrack of \\@\") did to always honor escaped comment chars. Use this then\nto support escaped /, %, and * operators on x86, when / is a comment\nchar (to match the Sun assembler's behavior).",
    "tree": {
      "sha": "be3d6d2b89bbb851fb2ba3701cc6814c00e62e18",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/be3d6d2b89bbb851fb2ba3701cc6814c00e62e18"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/750e4bf70f2caab39dc5d0a1b2d26c9ca1fbd909",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/750e4bf70f2caab39dc5d0a1b2d26c9ca1fbd909",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/750e4bf70f2caab39dc5d0a1b2d26c9ca1fbd909",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/750e4bf70f2caab39dc5d0a1b2d26c9ca1fbd909/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "48ef937e913d31bbd24a7ae568d30b499a6b3477",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48ef937e913d31bbd24a7ae568d30b499a6b3477",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/48ef937e913d31bbd24a7ae568d30b499a6b3477"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 15,
    "deletions": 18
  },
  "files": [
    {
      "sha": "67fabb9eabb161474638daeab3b5bbde6ed891ea",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/750e4bf70f2caab39dc5d0a1b2d26c9ca1fbd909/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/750e4bf70f2caab39dc5d0a1b2d26c9ca1fbd909/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=750e4bf70f2caab39dc5d0a1b2d26c9ca1fbd909",
      "patch": "@@ -1,3 +1,13 @@\n+2020-07-20  Jan Beulich  <jbeulich@suse.com>\n+\n+\tPR gas/4572\n+\t* app.c (last_char): Drop TC_ARM conditional around it.\n+\t(struct app_save): Drop TC_ARM conditional around last_char.\n+\t(app_push, app_pop): Drop TC_ARM conditional from last_char\n+\taccesses.\n+\t(do_scrub_chars): Likewise. Drop TC_ARM conditional from\n+\tbackslash-precedes-comment-character check.\n+\n 2020-07-20  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (frag_opcode_byte): New."
    },
    {
      "sha": "4e5a08341e46d22ebd3038c07d8ae8d77eb6e6ed",
      "filename": "gas/app.c",
      "status": "modified",
      "additions": 5,
      "deletions": 18,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/750e4bf70f2caab39dc5d0a1b2d26c9ca1fbd909/gas/app.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/750e4bf70f2caab39dc5d0a1b2d26c9ca1fbd909/gas/app.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/app.c?ref=750e4bf70f2caab39dc5d0a1b2d26c9ca1fbd909",
      "patch": "@@ -55,9 +55,8 @@ static const char mri_pseudo[] = \".mri 0\";\n static const char   symver_pseudo[] = \".symver\";\n static const char * symver_state;\n #endif\n-#ifdef TC_ARM\n+\n static char last_char;\n-#endif\n \n static char lex[256];\n static const char symbol_chars[] =\n@@ -244,9 +243,7 @@ struct app_save\n #if defined TC_ARM && defined OBJ_ELF\n   const char * symver_state;\n #endif\n-#ifdef TC_ARM\n-  char last_char;\n-#endif\n+  char         last_char;\n };\n \n char *\n@@ -276,9 +273,7 @@ app_push (void)\n #if defined TC_ARM && defined OBJ_ELF\n   saved->symver_state = symver_state;\n #endif\n-#ifdef TC_ARM\n   saved->last_char = last_char;\n-#endif\n \n   /* do_scrub_begin() is not useful, just wastes time.  */\n \n@@ -318,9 +313,7 @@ app_pop (char *arg)\n #if defined TC_ARM && defined OBJ_ELF\n   symver_state = saved->symver_state;\n #endif\n-#ifdef TC_ARM\n   last_char = saved->last_char;\n-#endif\n \n   free (arg);\n }\n@@ -1289,13 +1282,11 @@ do_scrub_chars (size_t (*get) (char *, size_t), char *tostart, size_t tolen)\n \t    goto de_fault;\n #endif\n \n-#ifdef TC_ARM\n-\t  /* For the ARM, care is needed not to damage occurrences of \\@\n-\t     by stripping the @ onwards.  Yuck.  */\n+\t  /* Care is needed not to damage occurrences of \\<comment-char>\n+\t     by stripping the <comment-char> onwards.  Yuck.  */\n \t  if ((to > tostart ? to[-1] : last_char) == '\\\\')\n-\t    /* Do not treat the @ as a start-of-comment.  */\n+\t    /* Do not treat the <comment-char> as a start-of-comment.  */\n \t    goto de_fault;\n-#endif\n \n #ifdef WARN_COMMENTS\n \t  if (!found_comment)\n@@ -1472,10 +1463,8 @@ do_scrub_chars (size_t (*get) (char *, size_t), char *tostart, size_t tolen)\n \n  fromeof:\n   /* We have reached the end of the input.  */\n-#ifdef TC_ARM\n   if (to > tostart)\n     last_char = to[-1];\n-#endif\n   return to - tostart;\n \n  tofull:\n@@ -1489,9 +1478,7 @@ do_scrub_chars (size_t (*get) (char *, size_t), char *tostart, size_t tolen)\n   else\n     saved_input = NULL;\n \n-#ifdef TC_ARM\n   if (to > tostart)\n     last_char = to[-1];\n-#endif\n   return to - tostart;\n }"
    }
  ]
}