{
  "sha": "ea3e7446dcac18abb68772ce4e04b72815f49745",
  "node_id": "C_kwDOANOeidoAKGVhM2U3NDQ2ZGNhYzE4YWJiNjg3NzJjZTRlMDRiNzI4MTVmNDk3NDU",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-02-22T19:22:14Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-02-22T19:22:14Z"
    },
    "message": "gdbsupport: Add an event-pipe class.\n\nThis pulls out the implementation of an event pipe used to implement\ntarget async support in both linux-low.cc (gdbserver) and linux-nat.c\n(gdb).\n\nThis will be used to replace the existing event pipe in linux-low.cc\nand linux-nat.c in future commits.\n\nCo-Authored-By: Lancelot SIX <lsix@lancelotsix.com>",
    "tree": {
      "sha": "a06b1acf42f288af38f4b98d24542e415183c5c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a06b1acf42f288af38f4b98d24542e415183c5c0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ea3e7446dcac18abb68772ce4e04b72815f49745",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ea3e7446dcac18abb68772ce4e04b72815f49745",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ea3e7446dcac18abb68772ce4e04b72815f49745",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ea3e7446dcac18abb68772ce4e04b72815f49745/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6a8fe63330c922255a4ced4b6491d35f6c384bba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a8fe63330c922255a4ced4b6491d35f6c384bba",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6a8fe63330c922255a4ced4b6491d35f6c384bba"
    }
  ],
  "stats": {
    "total": 193,
    "additions": 190,
    "deletions": 3
  },
  "files": [
    {
      "sha": "1416027e1c9fd9c990ac710943138c3c4b261f56",
      "filename": "gdbsupport/Makefile.am",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/Makefile.am?ref=ea3e7446dcac18abb68772ce4e04b72815f49745",
      "patch": "@@ -35,6 +35,10 @@ if SELFTEST\n selftest = selftest.cc\n endif\n \n+if HAVE_PIPE_OR_PIPE2\n+eventpipe = event-pipe.cc\n+endif\n+\n libgdbsupport_a_SOURCES = \\\n     agent.cc \\\n     btrace-common.cc \\\n@@ -74,6 +78,7 @@ libgdbsupport_a_SOURCES = \\\n     tdesc.cc \\\n     thread-pool.cc \\\n     xml-utils.cc \\\n+    ${eventpipe} \\\n     $(selftest)\n \n # Double-check that no defines are missing from our configury."
    },
    {
      "sha": "bdceff3b56af632634ec64037de183bc1db2a48f",
      "filename": "gdbsupport/Makefile.in",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/Makefile.in?ref=ea3e7446dcac18abb68772ce4e04b72815f49745",
      "patch": "@@ -144,7 +144,8 @@ am__v_AR_0 = @echo \"  AR      \" $@;\n am__v_AR_1 = \n libgdbsupport_a_AR = $(AR) $(ARFLAGS)\n libgdbsupport_a_LIBADD =\n-@SELFTEST_TRUE@am__objects_1 = selftest.$(OBJEXT)\n+@HAVE_PIPE_OR_PIPE2_TRUE@am__objects_1 = event-pipe.$(OBJEXT)\n+@SELFTEST_TRUE@am__objects_2 = selftest.$(OBJEXT)\n am_libgdbsupport_a_OBJECTS = agent.$(OBJEXT) btrace-common.$(OBJEXT) \\\n \tbuffer.$(OBJEXT) cleanups.$(OBJEXT) common-debug.$(OBJEXT) \\\n \tcommon-exceptions.$(OBJEXT) common-inferior.$(OBJEXT) \\\n@@ -160,7 +161,7 @@ am_libgdbsupport_a_OBJECTS = agent.$(OBJEXT) btrace-common.$(OBJEXT) \\\n \tsafe-strerror.$(OBJEXT) scoped_mmap.$(OBJEXT) search.$(OBJEXT) \\\n \tsignals.$(OBJEXT) signals-state-save-restore.$(OBJEXT) \\\n \ttdesc.$(OBJEXT) thread-pool.$(OBJEXT) xml-utils.$(OBJEXT) \\\n-\t$(am__objects_1)\n+\t$(am__objects_1) $(am__objects_2)\n libgdbsupport_a_OBJECTS = $(am_libgdbsupport_a_OBJECTS)\n AM_V_P = $(am__v_P_@AM_V@)\n am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)\n@@ -338,7 +339,6 @@ pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n-runstatedir = @runstatedir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@\n@@ -361,6 +361,7 @@ AM_CPPFLAGS = -I$(srcdir)/../include -I$(srcdir)/../gdb \\\n AM_CXXFLAGS = $(WARN_CFLAGS) $(WERROR_CFLAGS)\n noinst_LIBRARIES = libgdbsupport.a\n @SELFTEST_TRUE@selftest = selftest.cc\n+@HAVE_PIPE_OR_PIPE2_TRUE@eventpipe = event-pipe.cc\n libgdbsupport_a_SOURCES = \\\n     agent.cc \\\n     btrace-common.cc \\\n@@ -400,6 +401,7 @@ libgdbsupport_a_SOURCES = \\\n     tdesc.cc \\\n     thread-pool.cc \\\n     xml-utils.cc \\\n+    ${eventpipe} \\\n     $(selftest)\n \n all: config.h\n@@ -482,6 +484,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/environ.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/errors.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/event-loop.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/event-pipe.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fileio.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/filestuff.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/format.Po@am__quote@"
    },
    {
      "sha": "2070a39fbb70895a8731d8e13466c2983f603058",
      "filename": "gdbsupport/configure",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/configure?ref=ea3e7446dcac18abb68772ce4e04b72815f49745",
      "patch": "@@ -626,6 +626,8 @@ LTLIBOBJS\n LIBOBJS\n WERROR_CFLAGS\n WARN_CFLAGS\n+HAVE_PIPE_OR_PIPE2_FALSE\n+HAVE_PIPE_OR_PIPE2_TRUE\n SELFTEST_FALSE\n SELFTEST_TRUE\n LTLIBIPT\n@@ -10002,6 +10004,15 @@ else\n fi\n \n \n+ if test x$ac_cv_func_pipe = xyes -o x$ac_cv_func_pipe2 = xyes ; then\n+  HAVE_PIPE_OR_PIPE2_TRUE=\n+  HAVE_PIPE_OR_PIPE2_FALSE='#'\n+else\n+  HAVE_PIPE_OR_PIPE2_TRUE='#'\n+  HAVE_PIPE_OR_PIPE2_FALSE=\n+fi\n+\n+\n # Check the return and argument types of ptrace.\n \n \n@@ -10597,6 +10608,10 @@ if test -z \"${SELFTEST_TRUE}\" && test -z \"${SELFTEST_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"SELFTEST\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${HAVE_PIPE_OR_PIPE2_TRUE}\" && test -z \"${HAVE_PIPE_OR_PIPE2_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"HAVE_PIPE_OR_PIPE2\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n \n : \"${CONFIG_STATUS=./config.status}\"\n ac_write_fail=0"
    },
    {
      "sha": "1f794605f3c2b4bf92bdce0d5540e0d173cff5df",
      "filename": "gdbsupport/configure.ac",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/configure.ac?ref=ea3e7446dcac18abb68772ce4e04b72815f49745",
      "patch": "@@ -53,6 +53,9 @@ GDB_AC_COMMON\n GDB_AC_SELFTEST\n AM_CONDITIONAL(SELFTEST, $enable_unittests)\n \n+AM_CONDITIONAL(HAVE_PIPE_OR_PIPE2,\n+   [test x$ac_cv_func_pipe = xyes -o x$ac_cv_func_pipe2 = xyes ])\n+\n # Check the return and argument types of ptrace.\n GDB_AC_PTRACE\n "
    },
    {
      "sha": "2b56b2fac8ec92aad597f52c437157b5b497c2be",
      "filename": "gdbsupport/event-pipe.cc",
      "status": "added",
      "additions": 101,
      "deletions": 0,
      "changes": 101,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/event-pipe.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/event-pipe.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/event-pipe.cc?ref=ea3e7446dcac18abb68772ce4e04b72815f49745",
      "patch": "@@ -0,0 +1,101 @@\n+/* Event pipe for GDB, the GNU debugger.\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"gdbsupport/common-defs.h\"\n+#include \"gdbsupport/event-pipe.h\"\n+#include \"gdbsupport/filestuff.h\"\n+\n+#include <errno.h>\n+#include <fcntl.h>\n+#include <unistd.h>\n+\n+event_pipe::~event_pipe ()\n+{\n+  if (is_open ())\n+    close ();\n+}\n+\n+/* See event-pipe.h.  */\n+\n+bool\n+event_pipe::open ()\n+{\n+  if (is_open ())\n+    return false;\n+\n+  if (gdb_pipe_cloexec (m_fds) == -1)\n+    return false;\n+\n+  if (fcntl (m_fds[0], F_SETFL, O_NONBLOCK) == -1\n+      || fcntl (m_fds[1], F_SETFL, O_NONBLOCK) == -1)\n+    {\n+      close ();\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n+/* See event-pipe.h.  */\n+\n+void\n+event_pipe::close ()\n+{\n+  ::close (m_fds[0]);\n+  ::close (m_fds[1]);\n+  m_fds[0] = -1;\n+  m_fds[1] = -1;\n+}\n+\n+/* See event-pipe.h.  */\n+\n+void\n+event_pipe::flush ()\n+{\n+  int ret;\n+  char buf;\n+\n+  do\n+    {\n+      ret = read (m_fds[0], &buf, 1);\n+    }\n+  while (ret >= 0 || (ret == -1 && errno == EINTR));\n+}\n+\n+/* See event-pipe.h.  */\n+\n+void\n+event_pipe::mark ()\n+{\n+  int ret;\n+\n+  /* It doesn't really matter what the pipe contains, as long we end\n+     up with something in it.  Might as well flush the previous\n+     left-overs.  */\n+  flush ();\n+\n+  do\n+    {\n+      ret = write (m_fds[1], \"+\", 1);\n+    }\n+  while (ret == -1 && errno == EINTR);\n+\n+  /* Ignore EAGAIN.  If the pipe is full, the event loop will already\n+     be awakened anyway.  */\n+}"
    },
    {
      "sha": "50679e470e40a599c49be6a2460c8b2955731823",
      "filename": "gdbsupport/event-pipe.h",
      "status": "added",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/event-pipe.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ea3e7446dcac18abb68772ce4e04b72815f49745/gdbsupport/event-pipe.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/event-pipe.h?ref=ea3e7446dcac18abb68772ce4e04b72815f49745",
      "patch": "@@ -0,0 +1,60 @@\n+/* Event pipe for GDB, the GNU debugger.\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef COMMON_EVENT_PIPE_H\n+#define COMMON_EVENT_PIPE_H\n+\n+/* An event pipe used as a waitable file in the event loop in place of\n+   some other event associated with a signal.  The handler for the\n+   signal marks the event pipe to force a wakeup in the event loop.\n+   This uses the well-known self-pipe trick.  */\n+\n+class event_pipe\n+{\n+public:\n+  event_pipe() = default;\n+  ~event_pipe();\n+\n+  DISABLE_COPY_AND_ASSIGN (event_pipe);\n+\n+  /* Create a new pipe.  */\n+  bool open ();\n+\n+  /* Close the pipe.  */\n+  void close ();\n+\n+  /* True if the event pipe has been opened.  */\n+  bool is_open () const\n+  { return m_fds[0] != -1; }\n+\n+  /* The file descriptor of the waitable file to use in the event\n+     loop.  */\n+  int event_fd () const\n+  { return m_fds[0]; }\n+\n+  /* Flush the event pipe.  */\n+  void flush ();\n+\n+  /* Put something in the pipe, so the event loop wakes up.  */\n+  void mark ();\n+private:\n+  int m_fds[2] = { -1, -1 };\n+};\n+\n+#endif /* COMMON_EVENT_PIPE_H */"
    }
  ]
}