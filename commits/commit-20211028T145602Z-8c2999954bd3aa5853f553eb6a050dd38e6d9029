{
  "sha": "8c2999954bd3aa5853f553eb6a050dd38e6d9029",
  "node_id": "C_kwDOANOeidoAKDhjMjk5OTk1NGJkM2FhNTg1M2Y1NTNlYjZhMDUwZGQzOGU2ZDkwMjk",
  "commit": {
    "author": {
      "name": "Tejas Belagod",
      "email": "Tejas.Belagod@arm.com",
      "date": "2021-10-28T14:44:42Z"
    },
    "committer": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-10-28T14:56:02Z"
    },
    "message": "arm: add unwinder encoding support for PACBTI\n\nThis patch adds support for encoding the Return Address Authentication pseudo\nregister - '.save {ra_auth_code}' as defined by the DWARF ABI - in the\nexception tables where the opcode is defined by the EHABI\n\ngas/Changelog:\n\n\t* config/tc-arm.c (arm_reg_type): Add new type REG_TYPE_PSEUDO.\n\t(reg_expected_msgs): Add message for pseudo reg type.\n\t(reg_list_els): Add new reg list type REGLIST_PSEUDO.\n\t(parse_reg_list): Handle new REGLIST_PSEUDO type.\n\t(s_arm_unwind_save_pseudo): Encode pseudo reg list save in exception\n\ttables.\n\t(s_arm_unwind_save): Handle new REG_TYPE_PSEUDO.\n\t(reg_names): Add ra_auth_code pseudo register.\n\t* testsuite/gas/arm/unwind-pacbti-m.s: New test.\n\t* testsuite/gas/arm/unwind-pacbti-m.d: New test.\n\t* testsuite/gas/arm/unwind-pacbti-m-readelf.d: New test.",
    "tree": {
      "sha": "87d057cb1110b7568980730308d0545df3c26ca3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/87d057cb1110b7568980730308d0545df3c26ca3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8c2999954bd3aa5853f553eb6a050dd38e6d9029",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c2999954bd3aa5853f553eb6a050dd38e6d9029",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8c2999954bd3aa5853f553eb6a050dd38e6d9029",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c2999954bd3aa5853f553eb6a050dd38e6d9029/comments",
  "author": {
    "login": "tejas-belagod-arm",
    "id": 92718852,
    "node_id": "U_kgDOBYbHBA",
    "avatar_url": "https://avatars.githubusercontent.com/u/92718852?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tejas-belagod-arm",
    "html_url": "https://github.com/tejas-belagod-arm",
    "followers_url": "https://api.github.com/users/tejas-belagod-arm/followers",
    "following_url": "https://api.github.com/users/tejas-belagod-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/tejas-belagod-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tejas-belagod-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tejas-belagod-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/tejas-belagod-arm/orgs",
    "repos_url": "https://api.github.com/users/tejas-belagod-arm/repos",
    "events_url": "https://api.github.com/users/tejas-belagod-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tejas-belagod-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a1ff87d77ca7fa851170702fd972ae3d31f2e378",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1ff87d77ca7fa851170702fd972ae3d31f2e378",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a1ff87d77ca7fa851170702fd972ae3d31f2e378"
    }
  ],
  "stats": {
    "total": 121,
    "additions": 116,
    "deletions": 5
  },
  "files": [
    {
      "sha": "302a18f4a1ea63b39c612a706c542aa3fc9dd500",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 57,
      "deletions": 5,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c2999954bd3aa5853f553eb6a050dd38e6d9029/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c2999954bd3aa5853f553eb6a050dd38e6d9029/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=8c2999954bd3aa5853f553eb6a050dd38e6d9029",
      "patch": "@@ -688,7 +688,8 @@ enum arm_reg_type\n   REG_TYPE_MMXWCG,\n   REG_TYPE_XSCALE,\n   REG_TYPE_RNB,\n-  REG_TYPE_ZR\n+  REG_TYPE_ZR,\n+  REG_TYPE_PSEUDO\n };\n \n /* Structure for a hash table entry for a register.\n@@ -733,6 +734,7 @@ const char * const reg_expected_msgs[] =\n   [REG_TYPE_MQ]\t    = N_(\"MVE vector register expected\"),\n   [REG_TYPE_RNB]    = \"\",\n   [REG_TYPE_ZR]     = N_(\"ZR register expected\"),\n+  [REG_TYPE_PSEUDO] = N_(\"Pseudo register expected\"),\n };\n \n /* Some well known registers that we refer to directly elsewhere.  */\n@@ -1893,6 +1895,7 @@ parse_scalar (char **ccp, int elsize, struct neon_type_el *type, enum\n enum reg_list_els\n {\n   REGLIST_RN,\n+  REGLIST_PSEUDO,\n   REGLIST_CLRM,\n   REGLIST_VFP_S,\n   REGLIST_VFP_S_VPR,\n@@ -1910,7 +1913,8 @@ parse_reg_list (char ** strp, enum reg_list_els etype)\n   long range = 0;\n   int another_range;\n \n-  gas_assert (etype == REGLIST_RN || etype == REGLIST_CLRM);\n+  gas_assert (etype == REGLIST_RN || etype == REGLIST_CLRM\n+\t      || etype == REGLIST_PSEUDO);\n \n   /* We come back here if we get ranges concatenated by '+' or '|'.  */\n   do\n@@ -1930,8 +1934,14 @@ parse_reg_list (char ** strp, enum reg_list_els etype)\n \t      int reg;\n \t      const char apsr_str[] = \"apsr\";\n \t      int apsr_str_len = strlen (apsr_str);\n+\t      enum arm_reg_type rt;\n \n-\t      reg = arm_reg_parse (&str, REG_TYPE_RN);\n+\t      if (etype == REGLIST_RN || etype == REGLIST_CLRM)\n+\t\trt = REG_TYPE_RN;\n+\t      else\n+\t\trt = REG_TYPE_PSEUDO;\n+\n+\t      reg = arm_reg_parse (&str, rt);\n \t      if (etype == REGLIST_CLRM)\n \t\t{\n \t\t  if (reg == REG_SP || reg == REG_PC)\n@@ -1950,6 +1960,14 @@ parse_reg_list (char ** strp, enum reg_list_els etype)\n \t\t      return FAIL;\n \t\t    }\n \t\t}\n+\t      else if (etype == REGLIST_PSEUDO)\n+\t\t{\n+\t\t  if (reg == FAIL)\n+\t\t    {\n+\t\t      first_error (_(reg_expected_msgs[REG_TYPE_PSEUDO]));\n+\t\t      return FAIL;\n+\t\t    }\n+\t\t}\n \t      else /* etype == REGLIST_RN.  */\n \t\t{\n \t\t  if (reg == FAIL)\n@@ -4258,6 +4276,32 @@ s_arm_unwind_personality (int ignored ATTRIBUTE_UNUSED)\n   demand_empty_rest_of_line ();\n }\n \n+/* Parse a directive saving pseudo registers.  */\n+\n+static void\n+s_arm_unwind_save_pseudo (void)\n+{\n+  valueT op;\n+  long range;\n+\n+  range = parse_reg_list (&input_line_pointer, REGLIST_PSEUDO);\n+  if (range == FAIL)\n+    {\n+      as_bad (_(\"expected pseudo register list\"));\n+      ignore_rest_of_line ();\n+      return;\n+    }\n+\n+  demand_empty_rest_of_line ();\n+\n+  if (range & (1 << 9))\n+    {\n+      /* Opcode for restoring RA_AUTH_CODE.  */\n+      op = 0xb4;\n+      add_unwind_opcode (op, 1);\n+    }\n+}\n+\n \n /* Parse a directive saving core registers.  */\n \n@@ -4725,6 +4769,10 @@ s_arm_unwind_save (int arch_v6)\n       s_arm_unwind_save_core ();\n       return;\n \n+    case REG_TYPE_PSEUDO:\n+      s_arm_unwind_save_pseudo ();\n+      return;\n+\n     case REG_TYPE_VFD:\n       if (arch_v6)\n \ts_arm_unwind_save_vfp_armv6 ();\n@@ -23915,8 +23963,12 @@ static const struct reg_entry reg_names[] =\n   /* XScale accumulator registers.  */\n   REGNUM(acc,0,XSCALE), REGNUM(ACC,0,XSCALE),\n \n-  /* Alias 'ra_auth_code' to r12 for pacbti.  */\n-  REGDEF(ra_auth_code,12,RN),\n+  /* DWARF ABI defines RA_AUTH_CODE to 143. It also reserves 134-142 for future\n+     expansion.  RA_AUTH_CODE here is given the value 143 % 134 to make it easy\n+     for tc_arm_regname_to_dw2regnum to translate to DWARF reg number using\n+     134 + reg_number should the range 134 to 142 be used for more pseudo regs\n+     in the future.  This also helps fit RA_AUTH_CODE into a bitmask.  */\n+  REGDEF(ra_auth_code,9,PSEUDO),\n };\n #undef REGDEF\n #undef REGNUM"
    },
    {
      "sha": "ba1d76dd18fbe0ca2c391c12ddcb180d1de3b32b",
      "filename": "unwind-pacbti-m-readelf.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c2999954bd3aa5853f553eb6a050dd38e6d9029/unwind-pacbti-m-readelf.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c2999954bd3aa5853f553eb6a050dd38e6d9029/unwind-pacbti-m-readelf.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/unwind-pacbti-m-readelf.d?ref=8c2999954bd3aa5853f553eb6a050dd38e6d9029",
      "patch": "@@ -0,0 +1,16 @@\n+#readelf: -u\n+#source: unwind-pacbti-m.s\n+#name: Unwind table information for Armv8.1-M.Mainline PACBTI extension\n+# This test is only valid on ELF based ports.\n+#notarget: *-*-pe *-*-wince\n+# VxWorks needs a special variant of this file.\n+#skip: *-*-vxworks*\n+\n+Unwind section '.ARM.exidx' at offset 0x40 contains 1 entry:\n+\n+0x0 <foo>: 0x80b4a8b0\n+  Compact model index: 0\n+  0xb4      pop {ra_auth_code}\n+  0xa8      pop {r4, r14}\n+  0xb0      finish\n+"
    },
    {
      "sha": "584b12037b30136decb15da75a3e2641bd010827",
      "filename": "unwind-pacbti-m.d",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c2999954bd3aa5853f553eb6a050dd38e6d9029/unwind-pacbti-m.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c2999954bd3aa5853f553eb6a050dd38e6d9029/unwind-pacbti-m.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/unwind-pacbti-m.d?ref=8c2999954bd3aa5853f553eb6a050dd38e6d9029",
      "patch": "@@ -0,0 +1,23 @@\n+#objdump: -sr\n+#name: Unwind information for Armv8.1-M.Mainline PACBTI extension\n+# This test is only valid on ELF based ports.\n+#notarget: *-*-pe *-*-wince\n+# VxWorks needs a special variant of this file.\n+#skip: *-*-vxworks*\n+\n+.*:     file format.*\n+\n+RELOCATION RECORDS FOR \\[.ARM.exidx\\]:\n+OFFSET   TYPE              VALUE \n+00000000 R_ARM_PREL31      .text\n+00000000 R_ARM_NONE        __aeabi_unwind_cpp_pr0\n+\n+\n+Contents of section .text:\n+ 0000 10b54df8 04cd5df8 04cb10bd  .*\n+Contents of section .ARM.exidx:\n+ 0000 00000000 b0a8b480  .*\n+Contents of section .ARM.attributes:\n+ 0000 41290000 00616561 62690001 1f000000  .*\n+ 0010 05382e31 2d4d2e4d 41494e00 0615074d  .*\n+ 0020 09033202 34024a01 4c01               .*"
    },
    {
      "sha": "5a6ea2eec2b8e48dd49963f0a4b93fa29c3c3a49",
      "filename": "unwind-pacbti-m.s",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8c2999954bd3aa5853f553eb6a050dd38e6d9029/unwind-pacbti-m.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8c2999954bd3aa5853f553eb6a050dd38e6d9029/unwind-pacbti-m.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/unwind-pacbti-m.s?ref=8c2999954bd3aa5853f553eb6a050dd38e6d9029",
      "patch": "@@ -0,0 +1,20 @@\n+\n+\t.arch armv8.1-m.main\n+\t.arch_extension pacbti\n+\t.eabi_attribute 50, 2\n+\t.eabi_attribute 52, 2\n+\t.eabi_attribute 74, 1\n+\t.eabi_attribute 76, 1\n+\t.text\n+\t.syntax unified\n+\t.thumb\n+\t.thumb_func\n+foo:\n+\t.fnstart\n+\tpush\t{r4, lr}\n+\t.save {r4, lr}\n+\tpush\t{r12}\n+\t.save {ra_auth_code}\n+\tpop\t{r12}\n+\tpop\t{r4, pc}\n+\t.fnend"
    }
  ]
}