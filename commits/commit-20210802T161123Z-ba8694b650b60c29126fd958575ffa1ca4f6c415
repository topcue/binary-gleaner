{
  "sha": "ba8694b650b60c29126fd958575ffa1ca4f6c415",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmE4Njk0YjY1MGI2MGMyOTEyNmZkOTU4NTc1ZmZhMWNhNGY2YzQxNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-07-01T14:55:15Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-08-02T16:11:23Z"
    },
    "message": "Handle type qualifier for enumeration name\n\nPierre-Marie noticed that the Ada expression \"TYPE'(NAME)\" resolved\nincorrectly when \"TYPE\" was an enumeration type.  Here, \"NAME\" should\nbe unambiguous.\n\nThis patch fixes this problem.  Note that the patch is not perfect --\nit does not give an error if TYPE is an enumeration type but NAME is\nnot an enumerator but does have some other meaning in scope.  Fixing\nthis proved difficult, and so I've left it out.",
    "tree": {
      "sha": "a4f420223e3b0da8bd2b1608694b70bfe8eeac3b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a4f420223e3b0da8bd2b1608694b70bfe8eeac3b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ba8694b650b60c29126fd958575ffa1ca4f6c415",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ba8694b650b60c29126fd958575ffa1ca4f6c415",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ba8694b650b60c29126fd958575ffa1ca4f6c415",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ba8694b650b60c29126fd958575ffa1ca4f6c415/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "17a3da839932b79dcccfdf41867965892b756540",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17a3da839932b79dcccfdf41867965892b756540",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/17a3da839932b79dcccfdf41867965892b756540"
    }
  ],
  "stats": {
    "total": 114,
    "additions": 112,
    "deletions": 2
  },
  "files": [
    {
      "sha": "caf8780fe7c5cfa8c25306bc71e44575e40f8c0e",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 31,
      "deletions": 2,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba8694b650b60c29126fd958575ffa1ca4f6c415/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba8694b650b60c29126fd958575ffa1ca4f6c415/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=ba8694b650b60c29126fd958575ffa1ca4f6c415",
      "patch": "@@ -3425,6 +3425,29 @@ ada_resolve_funcall (struct symbol *sym, const struct block *block,\n   return candidates[i];\n }\n \n+/* Resolve a mention of a name where the context type is an\n+   enumeration type.  */\n+\n+static int\n+ada_resolve_enum (std::vector<struct block_symbol> &syms,\n+\t\t  const char *name, struct type *context_type,\n+\t\t  bool parse_completion)\n+{\n+  gdb_assert (context_type->code () == TYPE_CODE_ENUM);\n+  context_type = ada_check_typedef (context_type);\n+\n+  for (int i = 0; i < syms.size (); ++i)\n+    {\n+      /* We already know the name matches, so we're just looking for\n+\t an element of the correct enum type.  */\n+      if (ada_check_typedef (SYMBOL_TYPE (syms[i].symbol)) == context_type)\n+\treturn i;\n+    }\n+\n+  error (_(\"No name '%s' in enumeration type '%s'\"), name,\n+\t ada_type_name (context_type));\n+}\n+\n /* See ada-lang.h.  */\n \n block_symbol\n@@ -3474,6 +3497,10 @@ ada_resolve_variable (struct symbol *sym, const struct block *block,\n     error (_(\"No definition found for %s\"), sym->print_name ());\n   else if (candidates.size () == 1)\n     i = 0;\n+  else if (context_type != nullptr\n+\t   && context_type->code () == TYPE_CODE_ENUM)\n+    i = ada_resolve_enum (candidates, sym->linkage_name (), context_type,\n+\t\t\t  parse_completion);\n   else if (deprocedure_p && !is_nonfunction (candidates))\n     {\n       i = ada_resolve_function\n@@ -4937,8 +4964,10 @@ ada_add_local_symbols (std::vector<struct block_symbol> &result,\n     {\n       ada_add_block_symbols (result, block, lookup_name, domain, NULL);\n \n-      /* If we found a non-function match, assume that's the one.  */\n-      if (is_nonfunction (result))\n+      /* If we found a non-function match, assume that's the one.  We\n+\t only check this when finding a function boundary, so that we\n+\t can accumulate all results from intervening blocks first.  */\n+      if (BLOCK_FUNCTION (block) != nullptr && is_nonfunction (result))\n \treturn;\n \n       block = BLOCK_SUPERBLOCK (block);"
    },
    {
      "sha": "783574a6dcf3a16d72a9708c298c6fa32511a3c1",
      "filename": "gdb/testsuite/gdb.ada/enum_qual.exp",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba8694b650b60c29126fd958575ffa1ca4f6c415/gdb/testsuite/gdb.ada/enum_qual.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba8694b650b60c29126fd958575ffa1ca4f6c415/gdb/testsuite/gdb.ada/enum_qual.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/enum_qual.exp?ref=ba8694b650b60c29126fd958575ffa1ca4f6c415",
      "patch": "@@ -0,0 +1,32 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+if { [skip_ada_tests] } { return -1 }\n+\n+standard_ada_testfile qual\n+\n+if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable debug] != \"\"} {\n+    return -1\n+}\n+\n+clean_restart ${testfile}\n+\n+set bp_location [gdb_get_line_number \"STOP\" ${testdir}/qual.adb]\n+runto \"qual.adb:$bp_location\"\n+\n+gdb_test \"print kind'(no_element)\" \" = no_element\" \\\n+    \"print qualified no_element\""
    },
    {
      "sha": "882185a3fa82a0fde0bdd8d1ec57b1b615957cdb",
      "filename": "gdb/testsuite/gdb.ada/enum_qual/gener.ads",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba8694b650b60c29126fd958575ffa1ca4f6c415/gdb/testsuite/gdb.ada/enum_qual/gener.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba8694b650b60c29126fd958575ffa1ca4f6c415/gdb/testsuite/gdb.ada/enum_qual/gener.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/enum_qual/gener.ads?ref=ba8694b650b60c29126fd958575ffa1ca4f6c415",
      "patch": "@@ -0,0 +1,22 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+generic\n+  type Component_T is private;\n+package Gener is\n+\n+  No_Element : Component_T;\n+\n+end Gener;"
    },
    {
      "sha": "a6eff245e40115a9846f90aa62d6d74531060d6a",
      "filename": "gdb/testsuite/gdb.ada/enum_qual/qual.adb",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ba8694b650b60c29126fd958575ffa1ca4f6c415/gdb/testsuite/gdb.ada/enum_qual/qual.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ba8694b650b60c29126fd958575ffa1ca4f6c415/gdb/testsuite/gdb.ada/enum_qual/qual.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/enum_qual/qual.adb?ref=ba8694b650b60c29126fd958575ffa1ca4f6c415",
      "patch": "@@ -0,0 +1,27 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with Gener;\n+\n+procedure Qual is\n+\n+   package P is new Gener (Integer);\n+\n+   type Kind is (Present, No_Element);\n+   K : Kind := No_Element;\n+\n+begin\n+   null;  -- STOP\n+end Qual;"
    }
  ]
}