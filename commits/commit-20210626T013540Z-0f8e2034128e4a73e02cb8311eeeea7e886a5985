{
  "sha": "0f8e2034128e4a73e02cb8311eeeea7e886a5985",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGY4ZTIwMzQxMjhlNGE3M2UwMmNiODMxMWVlZWVhN2U4ODZhNTk4NQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-26T01:35:40Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-26T01:35:40Z"
    },
    "message": "gdb: add context getter/setter to cmd_list_element\n\nStraightforward replacement of get_cmd_context / set_cmd_context with\ncmd_list_element methods.\n\ngdb/ChangeLog:\n\n\t* cli/cli-decode.h (struct cmd_list_element) <set_context,\n\tcontext>: New.\n\t<context>: Rename to...\n\t<m_context>: ... this.\n\t* cli/cli-decode.c (set_cmd_context, get_cmd_context): Remove.\n\t* command.h (set_cmd_context, get_cmd_context): Remove, use\n\tcmd_list_element::set_context and cmd_list_element::context\n\teverywhere instead.\n\nChange-Id: I5016b0079014e3f17d1aa449ada7954473bf2b5d",
    "tree": {
      "sha": "609b9baf7a5f167daa28b0341743aa650677f28a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/609b9baf7a5f167daa28b0341743aa650677f28a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0f8e2034128e4a73e02cb8311eeeea7e886a5985",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f8e2034128e4a73e02cb8311eeeea7e886a5985",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0f8e2034128e4a73e02cb8311eeeea7e886a5985",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f8e2034128e4a73e02cb8311eeeea7e886a5985/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ac2d77c6a102ca785aae565aec93a3478a9f4544",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ac2d77c6a102ca785aae565aec93a3478a9f4544",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ac2d77c6a102ca785aae565aec93a3478a9f4544"
    }
  ],
  "stats": {
    "total": 131,
    "additions": 69,
    "deletions": 62
  },
  "files": [
    {
      "sha": "c523186cdd7986cad4521cb94c269a5ad4cc3018",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -1,3 +1,14 @@\n+2021-06-25  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* cli/cli-decode.h (struct cmd_list_element) <set_context,\n+\tcontext>: New.\n+\t<context>: Rename to...\n+\t<m_context>: ... this.\n+\t* cli/cli-decode.c (set_cmd_context, get_cmd_context): Remove.\n+\t* command.h (set_cmd_context, get_cmd_context): Remove, use\n+\tcmd_list_element::set_context and cmd_list_element::context\n+\teverywhere instead.\n+\n 2021-06-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* NEWS: Mention changes to 'info sources'."
    },
    {
      "sha": "b098991612d08ae9db1cf9050ac18df700117885",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -49,6 +49,7 @@\n #include \"typeprint.h\"\n #include \"namespace.h\"\n #include \"cli/cli-style.h\"\n+#include \"cli/cli-decode.h\"\n \n #include \"value.h\"\n #include \"mi/mi-common.h\"\n@@ -12229,7 +12230,7 @@ catch_ada_exception_command (const char *arg_entry, int from_tty,\n   std::string excep_string;\n   std::string cond_string;\n \n-  tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n+  tempflag = command->context () == CATCH_TEMPORARY;\n \n   if (!arg)\n     arg = \"\";\n@@ -12254,7 +12255,7 @@ catch_ada_handlers_command (const char *arg_entry, int from_tty,\n   std::string excep_string;\n   std::string cond_string;\n \n-  tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n+  tempflag = command->context () == CATCH_TEMPORARY;\n \n   if (!arg)\n     arg = \"\";\n@@ -12322,7 +12323,7 @@ catch_assert_command (const char *arg_entry, int from_tty,\n   int tempflag;\n   std::string cond_string;\n \n-  tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n+  tempflag = command->context () == CATCH_TEMPORARY;\n \n   if (!arg)\n     arg = \"\";"
    },
    {
      "sha": "5c7d62fe1ecd741400ddc0902bb1752c35410548",
      "filename": "gdb/break-catch-sig.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/break-catch-sig.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/break-catch-sig.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-sig.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -29,6 +29,7 @@\n #include \"cli/cli-utils.h\"\n #include \"completer.h\"\n #include \"cli/cli-style.h\"\n+#include \"cli/cli-decode.h\"\n \n #include <string>\n \n@@ -389,7 +390,7 @@ catch_signal_command (const char *arg, int from_tty,\n   bool catch_all = false;\n   std::vector<gdb_signal> filter;\n \n-  tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n+  tempflag = command->context () == CATCH_TEMPORARY;\n \n   arg = skip_spaces (arg);\n "
    },
    {
      "sha": "78e7079a831b8f3163b9f1686161bfc3dd44fbfc",
      "filename": "gdb/break-catch-syscall.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/break-catch-syscall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/break-catch-syscall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-syscall.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -30,6 +30,7 @@\n #include \"observable.h\"\n #include \"xml-syscall.h\"\n #include \"cli/cli-style.h\"\n+#include \"cli/cli-decode.h\"\n \n /* An instance of this type is used to represent a syscall catchpoint.\n    A breakpoint is really of this type iff its ops pointer points to\n@@ -439,7 +440,7 @@ catch_syscall_command_1 (const char *arg, int from_tty,\n     error (_(\"The feature 'catch syscall' is not supported on \\\n this architecture yet.\"));\n \n-  tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n+  tempflag = command->context () == CATCH_TEMPORARY;\n \n   arg = skip_spaces (arg);\n "
    },
    {
      "sha": "f05c2f8a64807071ddc77158bd28641794546967",
      "filename": "gdb/break-catch-throw.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/break-catch-throw.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/break-catch-throw.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-throw.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -36,6 +36,7 @@\n #include \"gdb_regex.h\"\n #include \"cp-support.h\"\n #include \"location.h\"\n+#include \"cli/cli-decode.h\"\n \n /* Each spot where we may place an exception-related catchpoint has\n    two names: the SDT probe point and the function name.  This\n@@ -456,7 +457,7 @@ static void\n catch_catch_command (const char *arg, int from_tty,\n \t\t     struct cmd_list_element *command)\n {\n-  bool tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n+  bool tempflag = command->context () == CATCH_TEMPORARY;\n \n   catch_exception_event (EX_EVENT_CATCH, arg, tempflag, from_tty);\n }\n@@ -467,7 +468,7 @@ static void\n catch_throw_command (const char *arg, int from_tty,\n \t\t     struct cmd_list_element *command)\n {\n-  bool tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n+  bool tempflag = command->context () == CATCH_TEMPORARY;\n \n   catch_exception_event (EX_EVENT_THROW, arg, tempflag, from_tty);\n }\n@@ -478,7 +479,7 @@ static void\n catch_rethrow_command (const char *arg, int from_tty,\n \t\t       struct cmd_list_element *command)\n {\n-  bool tempflag = get_cmd_context (command) == CATCH_TEMPORARY;\n+  bool tempflag = command->context () == CATCH_TEMPORARY;\n \n   catch_exception_event (EX_EVENT_RETHROW, arg, tempflag, from_tty);\n }"
    },
    {
      "sha": "dbbea6b8bff79016e25c0d92ec4b3f59477e184b",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -67,6 +67,7 @@\n #include \"thread-fsm.h\"\n #include \"tid-parse.h\"\n #include \"cli/cli-style.h\"\n+#include \"cli/cli-decode.h\"\n \n /* readline include files */\n #include \"readline/tilde.h\"\n@@ -8196,7 +8197,7 @@ catch_load_or_unload (const char *arg, int from_tty, int is_load,\n \t\t      struct cmd_list_element *command)\n {\n   const int enabled = 1;\n-  bool temp = get_cmd_context (command) == CATCH_TEMPORARY;\n+  bool temp = command->context () == CATCH_TEMPORARY;\n \n   add_solib_catchpoint (arg, is_load, temp, enabled);\n }\n@@ -11280,7 +11281,7 @@ catch_fork_command_1 (const char *arg, int from_tty,\n   const char *cond_string = NULL;\n   catch_fork_kind fork_kind;\n \n-  fork_kind = (catch_fork_kind) (uintptr_t) get_cmd_context (command);\n+  fork_kind = (catch_fork_kind) (uintptr_t) command->context ();\n   bool temp = (fork_kind == catch_fork_temporary\n \t       || fork_kind == catch_vfork_temporary);\n \n@@ -11324,7 +11325,7 @@ catch_exec_command_1 (const char *arg, int from_tty,\n {\n   struct gdbarch *gdbarch = get_current_arch ();\n   const char *cond_string = NULL;\n-  bool temp = get_cmd_context (command) == CATCH_TEMPORARY;\n+  bool temp = command->context () == CATCH_TEMPORARY;\n \n   if (!arg)\n     arg = \"\";\n@@ -15214,13 +15215,13 @@ add_catch_command (const char *name, const char *docstring,\n   command = add_cmd (name, class_breakpoint, docstring,\n \t\t     &catch_cmdlist);\n   set_cmd_sfunc (command, sfunc);\n-  set_cmd_context (command, user_data_catch);\n+  command->set_context (user_data_catch);\n   set_cmd_completer (command, completer);\n \n   command = add_cmd (name, class_breakpoint, docstring,\n \t\t     &tcatch_cmdlist);\n   set_cmd_sfunc (command, sfunc);\n-  set_cmd_context (command, user_data_tcatch);\n+  command->set_context (user_data_tcatch);\n   set_cmd_completer (command, completer);\n }\n "
    },
    {
      "sha": "f2fdeb03a285554c24aa223a612832246cd47e3d",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 4,
      "deletions": 15,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -134,18 +134,6 @@ cmd_cfunc_eq (struct cmd_list_element *cmd, cmd_const_cfunc_ftype *cfunc)\n   return cmd->func == do_const_cfunc && cmd->function.const_cfunc == cfunc;\n }\n \n-void\n-set_cmd_context (struct cmd_list_element *cmd, void *context)\n-{\n-  cmd->context = context;\n-}\n-\n-void *\n-get_cmd_context (struct cmd_list_element *cmd)\n-{\n-  return cmd->context;\n-}\n-\n void\n set_cmd_completer (struct cmd_list_element *cmd, completer_ftype *completer)\n {\n@@ -593,8 +581,8 @@ add_setshow_enum_cmd (const char *name,\n \t\t\t     set_list, show_list);\n   commands.set->enums = enumlist;\n \n-  set_cmd_context (commands.set, context);\n-  set_cmd_context (commands.show, context);\n+  commands.set->set_context (context);\n+  commands.show->set_context (context);\n \n   return commands;\n }\n@@ -920,7 +908,8 @@ delete_cmd (const char *name, struct cmd_list_element **list,\n       if (strcmp (iter->name, name) == 0)\n \t{\n \t  if (iter->destroyer)\n-\t    iter->destroyer (iter, iter->context);\n+\t    iter->destroyer (iter, iter->context ());\n+\n \t  if (iter->hookee_pre)\n \t    iter->hookee_pre->hook_pre = 0;\n \t  *prehook = iter->hook_pre;"
    },
    {
      "sha": "1692a6e28352042f085e2e0ade5b7c196ef14b80",
      "filename": "gdb/cli/cli-decode.h",
      "status": "modified",
      "additions": 10,
      "deletions": 3,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/cli/cli-decode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/cli/cli-decode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.h?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -93,6 +93,12 @@ struct cmd_list_element\n   bool is_command_class_help () const\n   { return this->func == nullptr; }\n \n+  void set_context (void *context)\n+  { m_context = context; }\n+\n+  void *context () const\n+  { return m_context; }\n+\n   /* Points to next command in this list.  */\n   struct cmd_list_element *next = nullptr;\n \n@@ -173,9 +179,6 @@ struct cmd_list_element\n     }\n   function;\n \n-  /* Local state (context) for this command.  This can be anything.  */\n-  void *context = nullptr;\n-\n   /* Documentation of this command (or help topic).\n      First line is brief documentation; remaining lines form, with it,\n      the full documentation.  First line should end with a period.\n@@ -256,6 +259,10 @@ struct cmd_list_element\n      when this command is being executed.  It will be set back to false\n      when the command has been executed.  */\n   int *suppress_notification = nullptr;\n+\n+private:\n+  /* Local state (context) for this command.  This can be anything.  */\n+  void *m_context = nullptr;\n };\n \n /* Functions that implement commands about CLI commands.  */"
    },
    {
      "sha": "efb400418042fc8c67cc2a74d3c33979edff051b",
      "filename": "gdb/cli/cli-dump.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/cli/cli-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/cli/cli-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-dump.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -333,7 +333,7 @@ struct dump_context\n static void\n call_dump_func (struct cmd_list_element *c, const char *args, int from_tty)\n {\n-  struct dump_context *d = (struct dump_context *) get_cmd_context (c);\n+  struct dump_context *d = (struct dump_context *) c->context ();\n \n   d->func (args, d->mode);\n }\n@@ -352,15 +352,15 @@ add_dump_command (const char *name,\n   d = XNEW (struct dump_context);\n   d->func = func;\n   d->mode = FOPEN_WB;\n-  set_cmd_context (c, d);\n+  c->set_context (d);\n   c->func = call_dump_func;\n \n   c = add_cmd (name, all_commands, descr, &append_cmdlist);\n   c->completer =  filename_completer;\n   d = XNEW (struct dump_context);\n   d->func = func;\n   d->mode = FOPEN_AB;\n-  set_cmd_context (c, d);\n+  c->set_context (d);\n   c->func = call_dump_func;\n \n   /* Replace \"Dump \" at start of docstring with \"Append \" (borrowed"
    },
    {
      "sha": "0b88dba562278a3fcae38282e23e6efb74ce85a8",
      "filename": "gdb/cli/cli-style.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/cli/cli-style.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/cli/cli-style.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-style.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -19,6 +19,7 @@\n \n #include \"defs.h\"\n #include \"cli/cli-cmds.h\"\n+#include \"cli/cli-decode.h\"\n #include \"cli/cli-setshow.h\"\n #include \"cli/cli-style.h\"\n #include \"source-cache.h\"\n@@ -167,7 +168,7 @@ void\n cli_style_option::do_set_value (const char *ignore, int from_tty,\n \t\t\t\tstruct cmd_list_element *cmd)\n {\n-  cli_style_option *cso = (cli_style_option *) get_cmd_context (cmd);\n+  cli_style_option *cso = (cli_style_option *) cmd->context ();\n   cso->changed.notify ();\n }\n \n@@ -180,7 +181,7 @@ do_show (const char *what, struct ui_file *file,\n \t struct cmd_list_element *cmd,\n \t const char *value)\n {\n-  cli_style_option *cso = (cli_style_option *) get_cmd_context (cmd);\n+  cli_style_option *cso = (cli_style_option *) cmd->context ();\n   fputs_filtered (_(\"The \"), file);\n   fprintf_styled (file, cso->style (), _(\"\\\"%s\\\" style\"), cso->name ());\n   fprintf_filtered (file, _(\" %s is: %s\\n\"), what, value);"
    },
    {
      "sha": "9413a50c297144c8b8ea4d706c39120d410fcad6",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -253,12 +253,6 @@ extern void set_cmd_completer_handle_brkchars (struct cmd_list_element *,\n extern int cmd_cfunc_eq (struct cmd_list_element *cmd,\n \t\t\t cmd_const_cfunc_ftype *cfun);\n \n-/* Each command object has a local context attached to it.  */\n-extern void set_cmd_context (struct cmd_list_element *cmd,\n-\t\t\t     void *context);\n-extern void *get_cmd_context (struct cmd_list_element *cmd);\n-\n-\n /* Execute CMD's pre/post hook.  Throw an error if the command fails.\n    If already executing this pre/post hook, or there is no pre/post\n    hook, the call is silently ignored.  */"
    },
    {
      "sha": "ab3dad7483ccccc2579a1a3d6b78c97b5653706d",
      "filename": "gdb/guile/scm-cmd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/guile/scm-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/guile/scm-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-cmd.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -294,7 +294,7 @@ static void\n cmdscm_function (struct cmd_list_element *command,\n \t\t const char *args, int from_tty)\n {\n-  command_smob *c_smob/*obj*/ = (command_smob *) get_cmd_context (command);\n+  command_smob *c_smob/*obj*/ = (command_smob *) command->context ();\n   SCM arg_scm, tty_scm, result;\n \n   gdb_assert (c_smob != NULL);\n@@ -383,7 +383,7 @@ cmdscm_completer (struct cmd_list_element *command,\n \t\t  completion_tracker &tracker,\n \t\t  const char *text, const char *word)\n {\n-  command_smob *c_smob/*obj*/ = (command_smob *) get_cmd_context (command);\n+  command_smob *c_smob/*obj*/ = (command_smob *) command->context ();\n   SCM completer_result_scm;\n   SCM text_scm, word_scm;\n \n@@ -788,7 +788,7 @@ gdbscm_register_command_x (SCM self)\n   cmd->destroyer = cmdscm_destroyer;\n \n   c_smob->command = cmd;\n-  set_cmd_context (cmd, c_smob);\n+  cmd->set_context (c_smob);\n \n   if (gdbscm_is_true (c_smob->complete))\n     {"
    },
    {
      "sha": "86f61057a32f843c96921ee3102505fd6056bbbe",
      "filename": "gdb/guile/scm-param.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/guile/scm-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/guile/scm-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-param.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -274,7 +274,7 @@ pascm_signal_setshow_error (SCM exception, const char *msg)\n static void\n pascm_set_func (const char *args, int from_tty, struct cmd_list_element *c)\n {\n-  param_smob *p_smob = (param_smob *) get_cmd_context (c);\n+  param_smob *p_smob = (param_smob *) c->context ();\n   SCM self, result, exception;\n \n   gdb_assert (gdbscm_is_procedure (p_smob->set_func));\n@@ -314,7 +314,7 @@ static void\n pascm_show_func (struct ui_file *file, int from_tty,\n \t\t struct cmd_list_element *c, const char *value)\n {\n-  param_smob *p_smob = (param_smob *) get_cmd_context (c);\n+  param_smob *p_smob = (param_smob *) c->context ();\n   SCM value_scm, self, result, exception;\n \n   gdb_assert (gdbscm_is_procedure (p_smob->show_func));\n@@ -468,13 +468,13 @@ add_setshow_generic (enum var_types param_type, enum command_class cmd_class,\n   tmp_name = cmd_name;\n   param = lookup_cmd (&tmp_name, *show_list, \"\", NULL, 0, 1);\n   gdb_assert (param != NULL);\n-  set_cmd_context (param, self);\n+  param->set_context (self);\n   *set_cmd = param;\n \n   tmp_name = cmd_name;\n   param = lookup_cmd (&tmp_name, *set_list, \"\", NULL, 0, 1);\n   gdb_assert (param != NULL);\n-  set_cmd_context (param, self);\n+  param->set_context (self);\n   *show_cmd = param;\n }\n "
    },
    {
      "sha": "0467ebd673490fea333c099bf74598f7f96cb5b5",
      "filename": "gdb/python/py-cmd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/python/py-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/python/py-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-cmd.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -103,7 +103,7 @@ static void\n cmdpy_function (struct cmd_list_element *command,\n \t\tconst char *args, int from_tty)\n {\n-  cmdpy_object *obj = (cmdpy_object *) get_cmd_context (command);\n+  cmdpy_object *obj = (cmdpy_object *) command->context ();\n \n   gdbpy_enter enter_py (get_current_arch (), current_language);\n \n@@ -172,7 +172,7 @@ static gdbpy_ref<>\n cmdpy_completer_helper (struct cmd_list_element *command,\n \t\t\tconst char *text, const char *word)\n {\n-  cmdpy_object *obj = (cmdpy_object *) get_cmd_context (command);\n+  cmdpy_object *obj = (cmdpy_object *) command->context ();\n \n   if (obj == NULL)\n     error (_(\"Invalid invocation of Python command object.\"));\n@@ -532,7 +532,7 @@ cmdpy_init (PyObject *self, PyObject *args, PyObject *kw)\n       cmd->name_allocated = 1;\n \n       obj->command = cmd;\n-      set_cmd_context (cmd, self_ref.release ());\n+      cmd->set_context (self_ref.release ());\n       set_cmd_completer (cmd, ((completetype == -1) ? cmdpy_completer\n \t\t\t       : completers[completetype].completer));\n       if (completetype == -1)"
    },
    {
      "sha": "f9dcb076c60396de56a4dd52bfd147dad9145b67",
      "filename": "gdb/python/py-param.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/python/py-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/python/py-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-param.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -376,7 +376,7 @@ static void\n get_set_value (const char *args, int from_tty,\n \t       struct cmd_list_element *c)\n {\n-  PyObject *obj = (PyObject *) get_cmd_context (c);\n+  PyObject *obj = (PyObject *) c->context ();\n   gdb::unique_xmalloc_ptr<char> set_doc_string;\n \n   gdbpy_enter enter_py (get_current_arch (), current_language);\n@@ -411,7 +411,7 @@ get_show_value (struct ui_file *file, int from_tty,\n \t\tstruct cmd_list_element *c,\n \t\tconst char *value)\n {\n-  PyObject *obj = (PyObject *) get_cmd_context (c);\n+  PyObject *obj = (PyObject *) c->context ();\n   gdb::unique_xmalloc_ptr<char> show_doc_string;\n \n   gdbpy_enter enter_py (get_current_arch (), current_language);\n@@ -569,8 +569,8 @@ add_setshow_generic (int parmclass, enum command_class cmdclass,\n     }\n \n   /* Register Python objects in both commands' context.  */\n-  set_cmd_context (commands.set, self);\n-  set_cmd_context (commands.show, self);\n+  commands.set->set_context (self);\n+  commands.show->set_context (self);\n \n   /* We (unfortunately) currently leak the command name.  */\n   cmd_name.release ();"
    },
    {
      "sha": "767685fbca39bf9906bf10f1c480371e62b9fd89",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -52,6 +52,7 @@\n #include <unordered_map>\n #include \"target-connection.h\"\n #include \"valprint.h\"\n+#include \"cli/cli-decode.h\"\n \n static void generic_tls_error (void) ATTRIBUTE_NORETURN;\n \n@@ -837,7 +838,7 @@ target_log_command (const char *p)\n static void\n open_target (const char *args, int from_tty, struct cmd_list_element *command)\n {\n-  auto *ti = static_cast<target_info *> (get_cmd_context (command));\n+  auto *ti = static_cast<target_info *> (command->context ());\n   target_open_ftype *func = target_factories[ti];\n \n   if (targetdebug)\n@@ -874,7 +875,7 @@ information on the arguments for a particular protocol, type\\n\\\n `help target ' followed by the protocol name.\"),\n \t\t\t  &targetlist, 0, &cmdlist);\n   c = add_cmd (t.shortname, no_class, t.doc, &targetlist);\n-  set_cmd_context (c, (void *) &t);\n+  c->set_context ((void *) &t);\n   set_cmd_sfunc (c, open_target);\n   if (completer != NULL)\n     set_cmd_completer (c, completer);\n@@ -892,7 +893,7 @@ add_deprecated_target_alias (const target_info &tinfo, const char *alias)\n      see PR cli/15104.  */\n   c = add_cmd (alias, no_class, tinfo.doc, &targetlist);\n   set_cmd_sfunc (c, open_target);\n-  set_cmd_context (c, (void *) &tinfo);\n+  c->set_context ((void *) &tinfo);\n   alt = xstrprintf (\"target %s\", tinfo.shortname);\n   deprecate_cmd (c, alt);\n }"
    },
    {
      "sha": "f9c94dea96cd46b863c029f253c51ec4fcc3a453",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f8e2034128e4a73e02cb8311eeeea7e886a5985/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=0f8e2034128e4a73e02cb8311eeeea7e886a5985",
      "patch": "@@ -172,8 +172,7 @@ static void\n tui_apply_layout (struct cmd_list_element *command,\n \t\t  const char *args, int from_tty)\n {\n-  tui_layout_split *layout\n-    = (tui_layout_split *) get_cmd_context (command);\n+  tui_layout_split *layout = (tui_layout_split *) command->context ();\n \n   /* Make sure the curses mode is enabled.  */\n   tui_enable ();\n@@ -858,7 +857,7 @@ This layout was created using:\\n\\\n \t\t name, name, spec.c_str ()));\n \n   cmd = add_cmd (name, class_tui, nullptr, doc.get (), &layout_list);\n-  set_cmd_context (cmd, layout);\n+  cmd->set_context (layout);\n   /* There is no API to set this.  */\n   cmd->func = tui_apply_layout;\n   cmd->destroyer = destroy_layout;"
    }
  ]
}