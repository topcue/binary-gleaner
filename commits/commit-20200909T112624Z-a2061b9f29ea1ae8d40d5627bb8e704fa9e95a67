{
  "sha": "a2061b9f29ea1ae8d40d5627bb8e704fa9e95a67",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTIwNjFiOWYyOWVhMWFlOGQ0MGQ1NjI3YmI4ZTcwNGZhOWU5NWE2Nw==",
  "commit": {
    "author": {
      "name": "Cooper Qu",
      "email": "cooper.qu@linux.alibaba.com",
      "date": "2020-09-07T09:25:02Z"
    },
    "committer": {
      "name": "Lifang Xia",
      "email": "lifang_xia@c-sky.com",
      "date": "2020-09-09T11:26:24Z"
    },
    "message": "CSKY: Support option -mfloat-abi.\n\nThe option corresponds to GCC to control the float calling conversion,\nand the value will be stored in .csky.attributes section.\n\nCo-Authored-By: Lifang Xia <lifang_xia@c-sky.com>\n\ngas/\n\t* config/tc-csky.c (float_abi): New.\n\t(md_longopts): Add mfloat-abi.\n\t(struct sky_option_value_table): New.\n\t(csky_float_abis): New, the possible values for -mfloat-abi.\n\t(parse_float_abi): New funtion.\n\t(md_show_usage): Show help information for -mfloat-abi.\n\t(set_csky_attribute): Store float-abi value.",
    "tree": {
      "sha": "ccdbb7acf81d35bb3c09bd08d4fb92f46b789941",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ccdbb7acf81d35bb3c09bd08d4fb92f46b789941"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a2061b9f29ea1ae8d40d5627bb8e704fa9e95a67",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2061b9f29ea1ae8d40d5627bb8e704fa9e95a67",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a2061b9f29ea1ae8d40d5627bb8e704fa9e95a67",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2061b9f29ea1ae8d40d5627bb8e704fa9e95a67/comments",
  "author": {
    "login": "Cooper-Qu",
    "id": 68842787,
    "node_id": "MDQ6VXNlcjY4ODQyNzg3",
    "avatar_url": "https://avatars.githubusercontent.com/u/68842787?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Cooper-Qu",
    "html_url": "https://github.com/Cooper-Qu",
    "followers_url": "https://api.github.com/users/Cooper-Qu/followers",
    "following_url": "https://api.github.com/users/Cooper-Qu/following{/other_user}",
    "gists_url": "https://api.github.com/users/Cooper-Qu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Cooper-Qu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Cooper-Qu/subscriptions",
    "organizations_url": "https://api.github.com/users/Cooper-Qu/orgs",
    "repos_url": "https://api.github.com/users/Cooper-Qu/repos",
    "events_url": "https://api.github.com/users/Cooper-Qu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Cooper-Qu/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "Lifang-XIA",
    "id": 22215568,
    "node_id": "MDQ6VXNlcjIyMjE1NTY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/22215568?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Lifang-XIA",
    "html_url": "https://github.com/Lifang-XIA",
    "followers_url": "https://api.github.com/users/Lifang-XIA/followers",
    "following_url": "https://api.github.com/users/Lifang-XIA/following{/other_user}",
    "gists_url": "https://api.github.com/users/Lifang-XIA/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Lifang-XIA/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Lifang-XIA/subscriptions",
    "organizations_url": "https://api.github.com/users/Lifang-XIA/orgs",
    "repos_url": "https://api.github.com/users/Lifang-XIA/repos",
    "events_url": "https://api.github.com/users/Lifang-XIA/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Lifang-XIA/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1feede9b384ef80a268ffe0b18e75bd60574f7c7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1feede9b384ef80a268ffe0b18e75bd60574f7c7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1feede9b384ef80a268ffe0b18e75bd60574f7c7"
    }
  ],
  "stats": {
    "total": 67,
    "additions": 67,
    "deletions": 0
  },
  "files": [
    {
      "sha": "897d42b2445b74b4eb9a15c5aeb769d5e6d698d3",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2061b9f29ea1ae8d40d5627bb8e704fa9e95a67/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2061b9f29ea1ae8d40d5627bb8e704fa9e95a67/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=a2061b9f29ea1ae8d40d5627bb8e704fa9e95a67",
      "patch": "@@ -1,3 +1,13 @@\n+2020-09-07  Cooper Qu  <cooper.qu@linux.alibaba.com>\n+\n+\t* config/tc-csky.c (float_abi): New.\n+\t(md_longopts): Add mfloat-abi.\n+\t(struct sky_option_value_table): New.\n+\t(csky_float_abis): New, the possible values for -mfloat-abi.\n+\t(parse_float_abi): New funtion.\n+\t(md_show_usage): Show help information for -mfloat-abi.\n+\t(set_csky_attribute): Store float-abi value.\n+\n 2020-09-07  Cooper Qu  <cooper.qu@linux.alibaba.com>\n \n \t* config/tc-csky.c (float_work_fpuv3_fmovi): New function,"
    },
    {
      "sha": "25f77131d34fb5af159671b497bf87250ac6d90a",
      "filename": "gas/config/tc-csky.c",
      "status": "modified",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2061b9f29ea1ae8d40d5627bb8e704fa9e95a67/gas/config/tc-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2061b9f29ea1ae8d40d5627bb8e704fa9e95a67/gas/config/tc-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-csky.c?ref=a2061b9f29ea1ae8d40d5627bb8e704fa9e95a67",
      "patch": "@@ -463,6 +463,7 @@ static int do_func_dump = 0;      /* dump literals after every function.  */\n static int do_br_dump = 1;        /* work for -mabr/-mno-abr, control the literals dump.  */\n static int do_intr_stack = -1;    /* control interrupt stack module, 801&802&803\n \t\t\t\t     default on, 807&810, default off.  */\n+static int float_abi = 0;\n \n #ifdef INCLUDE_BRANCH_STUB\n static int do_use_branchstub = -1;\n@@ -750,6 +751,8 @@ struct option md_longopts[] = {\n   {\"march\", required_argument, NULL, OPTION_MARCH},\n #define OPTION_MCPU (OPTION_MD_BASE + 1)\n   {\"mcpu\", required_argument, NULL, OPTION_MCPU},\n+#define OPTION_FLOAT_ABI (OPTION_MD_BASE + 2)\n+  {\"mfloat-abi\", required_argument, NULL, OPTION_FLOAT_ABI},\n \n   /* Remaining options just set boolean flags.  */\n   {\"EL\", no_argument, &target_big_endian, 0},\n@@ -960,6 +963,35 @@ parse_arch (const char *str)\n   as_bad (_(\"unknown architecture `%s'\"), str);\n }\n \n+struct csky_option_value_table\n+{\n+  const char *name;\n+  long value;\n+};\n+\n+static const struct csky_option_value_table csky_float_abis[] =\n+{\n+  {\"hard\",\tVAL_CSKY_FPU_ABI_HARD},\n+  {\"softfp\",\tVAL_CSKY_FPU_ABI_SOFTFP},\n+  {\"soft\",\tVAL_CSKY_FPU_ABI_SOFT},\n+  {NULL,\t0}\n+};\n+\n+static bfd_boolean\n+parse_float_abi (const char *str)\n+{\n+  const struct csky_option_value_table * opt;\n+\n+  for (opt = csky_float_abis; opt->name != NULL; opt++)\n+    if (strcasecmp (opt->name, str) == 0)\n+      {\n+\tfloat_abi = opt->value;\n+\treturn TRUE;\n+      }\n+\n+  as_bad (_(\"unknown floating point abi `%s'\\n\"), str);\n+  return FALSE;\n+}\n \n #ifdef OBJ_ELF\n /* Implement the TARGET_FORMAT macro.  */\n@@ -1141,6 +1173,25 @@ md_show_usage (FILE *fp)\n     }\n   fprintf (fp, \"\\n\");\n \n+  fprintf (fp, _(\"\\\n+  -mfloat-abi=ABI\t\tselect float ABI:\"));\n+  for (i = 0, n = margin; csky_float_abis[i].name != NULL; i++)\n+    {\n+      int l = strlen (csky_float_abis[i].name);\n+      if (n + l >= margin)\n+\t{\n+\t  fprintf (fp, \"\\n\\t\\t\\t\\t\");\n+\t  n = l;\n+\t}\n+      else\n+\t{\n+\t  fprintf (fp, \" \");\n+\t  n += l + 1;\n+\t}\n+      fprintf (fp, \"%s\", csky_float_abis[i].name);\n+    }\n+  fprintf (fp, \"\\n\");\n+\n   fprintf (fp, _(\"\\\n   -EL  -mlittle-endian\t\tgenerate little-endian output\\n\"));\n   fprintf (fp, _(\"\\\n@@ -1271,6 +1322,9 @@ static void set_csky_attribute (void)\n \t  bfd_elf_add_obj_attr_string (stdoutput, OBJ_ATTR_PROC,\n \t\t\t\t    Tag_CSKY_FPU_NUMBER_MODULE,\n \t\t\t\t    \"IEEE 754\");\n+\t  bfd_elf_add_obj_attr_int (stdoutput, OBJ_ATTR_PROC,\n+\t\t\t\t    Tag_CSKY_FPU_ABI,\n+\t\t\t\t    float_abi);\n \t}\n     }\n \n@@ -4506,6 +4560,9 @@ md_parse_option (int c, const char *arg)\n     case OPTION_MCPU:\n       parse_cpu (arg);\n       break;\n+    case OPTION_FLOAT_ABI:\n+      parse_float_abi (arg);\n+      break;\n     default:\n       return 0;\n     }"
    }
  ]
}