{
  "sha": "4e93ea6e67fd7260ef842b9eeb20f071648c056e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGU5M2VhNmU2N2ZkNzI2MGVmODQyYjllZWIyMGYwNzE2NDhjMDU2ZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-28T20:32:00Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-23T19:38:54Z"
    },
    "message": "gdb: make inferior::m_terminal an std::string\n\nSame idea as the previous patch, but for m_terminal.\n\nChange-Id: If9367d5db8c976a4336680adca4ea5bc31ab64d2",
    "tree": {
      "sha": "c7644fe22a2d10f95ee5abb9d461be96d34cc23a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c7644fe22a2d10f95ee5abb9d461be96d34cc23a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4e93ea6e67fd7260ef842b9eeb20f071648c056e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e93ea6e67fd7260ef842b9eeb20f071648c056e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4e93ea6e67fd7260ef842b9eeb20f071648c056e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e93ea6e67fd7260ef842b9eeb20f071648c056e/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "11bd012ed256688f43d71dcc531c2f105a9c55dd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/11bd012ed256688f43d71dcc531c2f105a9c55dd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/11bd012ed256688f43d71dcc531c2f105a9c55dd"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 41,
    "deletions": 51
  },
  "files": [
    {
      "sha": "c183b60e81a85ea1bb92603a4a8ab9cf4524fced",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=4e93ea6e67fd7260ef842b9eeb20f071648c056e",
      "patch": "@@ -115,13 +115,11 @@ show_inferior_tty_command (struct ui_file *file, int from_tty,\n {\n   /* Note that we ignore the passed-in value in favor of computing it\n      directly.  */\n-  const char *inferior_tty = current_inferior ()->tty ();\n+  const std::string &inferior_tty = current_inferior ()->tty ();\n \n-  if (inferior_tty == nullptr)\n-    inferior_tty = \"\";\n   fprintf_filtered (gdb_stdout,\n \t\t    _(\"Terminal for future runs of program being debugged \"\n-\t\t      \"is \\\"%s\\\".\\n\"), inferior_tty);\n+\t\t      \"is \\\"%s\\\".\\n\"), inferior_tty.c_str ());\n }\n \n void"
    },
    {
      "sha": "40ab3e7e90b9e5d8979fcf634fa6af197ea7e6d4",
      "filename": "gdb/inferior.c",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.c?ref=4e93ea6e67fd7260ef842b9eeb20f071648c056e",
      "patch": "@@ -111,18 +111,15 @@ inferior::unpush_target (struct target_ops *t)\n }\n \n void\n-inferior::set_tty (const char *terminal_name)\n+inferior::set_tty (std::string terminal_name)\n {\n-  if (terminal_name != nullptr && *terminal_name != '\\0')\n-    m_terminal = make_unique_xstrdup (terminal_name);\n-  else\n-    m_terminal = NULL;\n+  m_terminal = std::move (terminal_name);\n }\n \n-const char *\n+const std::string &\n inferior::tty ()\n {\n-  return m_terminal.get ();\n+  return m_terminal;\n }\n \n void"
    },
    {
      "sha": "e9210b1258d8ecc1354c22154d6f5c8faaa379f8",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=4e93ea6e67fd7260ef842b9eeb20f071648c056e",
      "patch": "@@ -434,13 +434,15 @@ class inferior : public refcounted_object,\n   void add_continuation (std::function<void ()> &&cont);\n   void do_all_continuations ();\n \n-  /* Set/get file name for default use for standard in/out in the\n-     inferior.  On Unix systems, we try to make TERMINAL_NAME the\n-     inferior's controlling terminal.  If TERMINAL_NAME is nullptr or\n-     the empty string, then the inferior inherits GDB's terminal (or\n-     GDBserver's if spawning a remote process).  */\n-  void set_tty (const char *terminal_name);\n-  const char *tty ();\n+  /* Set/get file name for default use for standard in/out in the inferior.\n+\n+     On Unix systems, we try to make TERMINAL_NAME the inferior's controlling\n+     terminal.\n+\n+     If TERMINAL_NAME is the empty string, then the inferior inherits GDB's\n+     terminal (or GDBserver's if spawning a remote process).  */\n+  void set_tty (std::string terminal_name);\n+  const std::string &tty ();\n \n   /* Set the argument string to use when running this inferior.\n \n@@ -587,7 +589,7 @@ class inferior : public refcounted_object,\n   target_stack m_target_stack;\n \n   /* The name of terminal device to use for I/O.  */\n-  gdb::unique_xmalloc_ptr<char> m_terminal;\n+  std::string m_terminal;\n \n   /* The list of continuations.  */\n   std::list<std::function<void ()>> m_continuations;"
    },
    {
      "sha": "74dda702a8a9a71ea1fe5e368b4422359698c189",
      "filename": "gdb/inflow.c",
      "status": "modified",
      "additions": 18,
      "deletions": 28,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/inflow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/inflow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inflow.c?ref=4e93ea6e67fd7260ef842b9eeb20f071648c056e",
      "patch": "@@ -65,7 +65,7 @@ struct terminal_info\n \n   /* The name of the tty (from the `tty' command) that we gave to the\n      inferior when it was started.  */\n-  char *run_terminal = nullptr;\n+  std::string run_terminal;\n \n   /* TTY state.  We save it whenever the inferior stops, and restore\n      it when it resumes in the foreground.  */\n@@ -123,7 +123,7 @@ static sighandler_t sigquit_ours;\n    be) used as a transient global by new_tty_prefork,\n    create_tty_session, new_tty and new_tty_postfork, all called from\n    fork_inferior, while forking a new child.  */\n-static const char *inferior_thisrun_terminal;\n+static std::string inferior_thisrun_terminal;\n \n /* Track who owns GDB's terminal (is it GDB or some inferior?).  While\n    target_terminal::is_ours() etc. tracks the core's intention and is\n@@ -303,8 +303,8 @@ sharing_input_terminal (inferior *inf)\n \t output was redirected to our terminal), and with a false\n \t positive we just end up trying to save/restore terminal\n \t settings when we didn't need to or we actually can't.  */\n-      if (tinfo->run_terminal != NULL)\n-\tres = is_gdb_terminal (tinfo->run_terminal);\n+      if (!tinfo->run_terminal.empty ())\n+\tres = is_gdb_terminal (tinfo->run_terminal.c_str ());\n \n       /* If we still can't determine, assume yes.  */\n       if (res == TRIBOOL_UNKNOWN)\n@@ -603,7 +603,6 @@ static const struct inferior_key<terminal_info> inflow_inferior_data;\n \n terminal_info::~terminal_info ()\n {\n-  xfree (run_terminal);\n   xfree (ttystate);\n }\n \n@@ -643,15 +642,10 @@ copy_terminal_info (struct inferior *to, struct inferior *from)\n   tinfo_to = get_inflow_inferior_data (to);\n   tinfo_from = get_inflow_inferior_data (from);\n \n-  xfree (tinfo_to->run_terminal);\n   xfree (tinfo_to->ttystate);\n \n   *tinfo_to = *tinfo_from;\n \n-  if (tinfo_from->run_terminal)\n-    tinfo_to->run_terminal\n-      = xstrdup (tinfo_from->run_terminal);\n-\n   if (tinfo_from->ttystate)\n     tinfo_to->ttystate\n       = serial_copy_tty_state (stdin_serial, tinfo_from->ttystate);\n@@ -765,19 +759,19 @@ child_terminal_info (struct target_ops *self, const char *args, int from_tty)\n \f\n /* NEW_TTY_PREFORK is called before forking a new child process,\n    so we can record the state of ttys in the child to be formed.\n-   TTYNAME is null if we are to share the terminal with gdb;\n-   or points to a string containing the name of the desired tty.\n+   TTYNAME is empty if we are to share the terminal with gdb;\n+   otherwise it contains the name of the desired tty.\n \n    NEW_TTY is called in new child processes under Unix, which will\n    become debugger target processes.  This actually switches to\n    the terminal specified in the NEW_TTY_PREFORK call.  */\n \n void\n-new_tty_prefork (const char *ttyname)\n+new_tty_prefork (std::string ttyname)\n {\n   /* Save the name for later, for determining whether we and the child\n      are sharing a tty.  */\n-  inferior_thisrun_terminal = ttyname;\n+  inferior_thisrun_terminal = std::move (ttyname);\n }\n \n #if !defined(__GO32__) && !defined(_WIN32)\n@@ -798,7 +792,7 @@ check_syscall (const char *msg, int result)\n void\n new_tty (void)\n {\n-  if (inferior_thisrun_terminal == 0)\n+  if (inferior_thisrun_terminal.empty ())\n     return;\n #if !defined(__GO32__) && !defined(_WIN32)\n   int tty;\n@@ -818,8 +812,8 @@ new_tty (void)\n #endif\n \n   /* Now open the specified new terminal.  */\n-  tty = open (inferior_thisrun_terminal, O_RDWR | O_NOCTTY);\n-  check_syscall (inferior_thisrun_terminal, tty);\n+  tty = open (inferior_thisrun_terminal.c_str (), O_RDWR | O_NOCTTY);\n+  check_syscall (inferior_thisrun_terminal.c_str (), tty);\n \n   /* Avoid use of dup2; doesn't exist on all systems.  */\n   if (tty != 0)\n@@ -854,23 +848,19 @@ new_tty (void)\n \n /* NEW_TTY_POSTFORK is called after forking a new child process, and\n    adding it to the inferior table, to store the TTYNAME being used by\n-   the child, or null if it sharing the terminal with gdb.  */\n+   the child, or empty if it sharing the terminal with gdb.  */\n \n void\n new_tty_postfork (void)\n {\n   /* Save the name for later, for determining whether we and the child\n      are sharing a tty.  */\n \n-  if (inferior_thisrun_terminal)\n-    {\n-      struct inferior *inf = current_inferior ();\n-      struct terminal_info *tinfo = get_inflow_inferior_data (inf);\n-\n-      tinfo->run_terminal = xstrdup (inferior_thisrun_terminal);\n-    }\n+  struct inferior *inf = current_inferior ();\n+  struct terminal_info *tinfo = get_inflow_inferior_data (inf);\n \n-  inferior_thisrun_terminal = NULL;\n+  tinfo->run_terminal = std::move (inferior_thisrun_terminal);\n+  inferior_thisrun_terminal.clear ();\n }\n \n \f\n@@ -894,7 +884,7 @@ set_sigint_trap (void)\n   struct inferior *inf = current_inferior ();\n   struct terminal_info *tinfo = get_inflow_inferior_data (inf);\n \n-  if (inf->attach_flag || tinfo->run_terminal)\n+  if (inf->attach_flag || !tinfo->run_terminal.empty ())\n     {\n       osig = signal (SIGINT, pass_signal);\n       osig_set = 1;\n@@ -927,7 +917,7 @@ create_tty_session (void)\n #ifdef HAVE_SETSID\n   pid_t ret;\n \n-  if (!job_control || inferior_thisrun_terminal == 0)\n+  if (!job_control || inferior_thisrun_terminal.empty ())\n     return 0;\n \n   ret = setsid ();"
    },
    {
      "sha": "703c63251fd33f592ac1fab6f90e66390f25e6e4",
      "filename": "gdb/mi/mi-cmd-env.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/mi/mi-cmd-env.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/mi/mi-cmd-env.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-env.c?ref=4e93ea6e67fd7260ef842b9eeb20f071648c056e",
      "patch": "@@ -244,7 +244,10 @@ mi_cmd_env_dir (const char *command, char **argv, int argc)\n void\n mi_cmd_inferior_tty_set (const char *command, char **argv, int argc)\n {\n-  current_inferior ()->set_tty (argv[0]);\n+  if (argc > 0)\n+    current_inferior ()->set_tty (argv[0]);\n+  else\n+    current_inferior ()->set_tty (\"\");\n }\n \n /* Print the inferior terminal device name.  */\n@@ -255,8 +258,8 @@ mi_cmd_inferior_tty_show (const char *command, char **argv, int argc)\n   if ( !mi_valid_noargs (\"-inferior-tty-show\", argc, argv))\n     error (_(\"-inferior-tty-show: Usage: No args\"));\n \n-  const char *inferior_tty = current_inferior ()->tty ();\n-  if (inferior_tty != NULL)\n+  const std::string &inferior_tty = current_inferior ()->tty ();\n+  if (!inferior_tty.empty ())\n     current_uiout->field_string (\"inferior_tty_terminal\", inferior_tty);\n }\n "
    },
    {
      "sha": "186295e18f78466e122eb943e17acf5ae9e82df1",
      "filename": "gdb/terminal.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/terminal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4e93ea6e67fd7260ef842b9eeb20f071648c056e/gdb/terminal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/terminal.h?ref=4e93ea6e67fd7260ef842b9eeb20f071648c056e",
      "patch": "@@ -21,7 +21,7 @@\n \n struct inferior;\n \n-extern void new_tty_prefork (const char *);\n+extern void new_tty_prefork (std::string ttyname);\n \n extern void new_tty (void);\n "
    }
  ]
}