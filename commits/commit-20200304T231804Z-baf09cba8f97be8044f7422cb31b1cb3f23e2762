{
  "sha": "baf09cba8f97be8044f7422cb31b1cb3f23e2762",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmFmMDljYmE4Zjk3YmU4MDQ0Zjc0MjJjYjMxYjFjYjNmMjNlMjc2Mg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-04T10:44:19Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-04T23:18:04Z"
    },
    "message": "PR25570, ld duplicate \"warning: changing start of section\"\n\nNote that because we should report a signed delta from the previous\nVMA it isn't possible to use ngettext.  ngettext only supports\nunsigned long values.  So byte/bytes goes from the message.\n\n\tPR 25570\n\t* ldlang.c (lang_sizing_iteration): New static var.\n\t(lang_size_sections_1): Warn about no memory region only on first\n\titeration.  Warn about changing start address on first iteration\n\tthen any delta from that on subsequent iterations.  Report a signed\n\tdelta.\n\t(one_lang_size_sections_pass): Increment lang_sizing_iteration.",
    "tree": {
      "sha": "c77d7fde7e0d7150e2ecc75753c616de57bb74bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c77d7fde7e0d7150e2ecc75753c616de57bb74bd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/baf09cba8f97be8044f7422cb31b1cb3f23e2762",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/baf09cba8f97be8044f7422cb31b1cb3f23e2762",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/baf09cba8f97be8044f7422cb31b1cb3f23e2762",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/baf09cba8f97be8044f7422cb31b1cb3f23e2762/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "46f9f93119daaa8eceb7233a17759e10e858c9fd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46f9f93119daaa8eceb7233a17759e10e858c9fd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/46f9f93119daaa8eceb7233a17759e10e858c9fd"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 30,
    "deletions": 13
  },
  "files": [
    {
      "sha": "b634dd8732efb1f325c70ad7f988aa6727eb3b30",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baf09cba8f97be8044f7422cb31b1cb3f23e2762/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baf09cba8f97be8044f7422cb31b1cb3f23e2762/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=baf09cba8f97be8044f7422cb31b1cb3f23e2762",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-05  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 25570\n+\t* ldlang.c (lang_sizing_iteration): New static var.\n+\t(lang_size_sections_1): Warn about no memory region only on first\n+\titeration.  Warn about changing start address on first iteration\n+\tthen any delta from that on subsequent iterations.  Report a signed\n+\tdelta.\n+\t(one_lang_size_sections_pass): Increment lang_sizing_iteration.\n+\n 2020-03-03  Nick Clifton  <nickc@redhat.com>\n \n \tPR 25588"
    },
    {
      "sha": "6ffa7af5754bb66fcb972147e64b87b1aa331fee",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 20,
      "deletions": 13,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baf09cba8f97be8044f7422cb31b1cb3f23e2762/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baf09cba8f97be8044f7422cb31b1cb3f23e2762/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=baf09cba8f97be8044f7422cb31b1cb3f23e2762",
      "patch": "@@ -131,10 +131,13 @@ struct lang_nocrossrefs *nocrossref_list;\n struct asneeded_minfo **asneeded_list_tail;\n static ctf_file_t *ctf_output;\n \n- /* Functions that traverse the linker script and might evaluate\n-    DEFINED() need to increment this at the start of the traversal.  */\n+/* Functions that traverse the linker script and might evaluate\n+   DEFINED() need to increment this at the start of the traversal.  */\n int lang_statement_iteration = 0;\n \n+/* Count times through one_lang_size_sections_pass after mark phase.  */\n+static int lang_sizing_iteration = 0;\n+\n /* Return TRUE if the PATTERN argument is a wildcard pattern.\n    Although backslashes are treated specially if a pattern contains\n    wildcards, we do not consider the mere presence of a backslash to\n@@ -5554,7 +5557,7 @@ lang_size_sections_1\n \t\t\t&& (strcmp (lang_memory_region_list->name_list.name,\n \t\t\t\t    DEFAULT_MEMORY_REGION) != 0\n \t\t\t    || lang_memory_region_list->next != NULL)\n-\t\t\t&& expld.phase != lang_mark_phase_enum)\n+\t\t\t&& lang_sizing_iteration == 1)\n \t\t      {\n \t\t\t/* By default this is an error rather than just a\n \t\t\t   warning because if we allocate the section to the\n@@ -5586,19 +5589,21 @@ lang_size_sections_1\n \t\tif (section_alignment > 0)\n \t\t  {\n \t\t    bfd_vma savedot = newdot;\n-\t\t    newdot = align_power (newdot, section_alignment);\n+\t\t    bfd_vma diff = 0;\n \n+\t\t    newdot = align_power (newdot, section_alignment);\n \t\t    dotdelta = newdot - savedot;\n-\t\t    if (dotdelta != 0\n+\n+\t\t    if (lang_sizing_iteration == 1)\n+\t\t      diff = dotdelta;\n+\t\t    else if (lang_sizing_iteration > 1)\n+\t\t      diff = newdot - os->bfd_section->vma;\n+\t\t    if (diff != 0\n \t\t\t&& (config.warn_section_align\n-\t\t\t    || os->addr_tree != NULL)\n-\t\t\t&& expld.phase != lang_mark_phase_enum)\n-\t\t      einfo (ngettext (\"%P: warning: changing start of \"\n-\t\t\t\t       \"section %s by %lu byte\\n\",\n-\t\t\t\t       \"%P: warning: changing start of \"\n-\t\t\t\t       \"section %s by %lu bytes\\n\",\n-\t\t\t\t       (unsigned long) dotdelta),\n-\t\t\t     os->name, (unsigned long) dotdelta);\n+\t\t\t    || os->addr_tree != NULL))\n+\t\t      einfo (_(\"%P: warning: \"\n+\t\t\t       \"start of section %s changed by %ld\\n\"),\n+\t\t\t     os->name, (long) diff);\n \t\t  }\n \n \t\tbfd_set_section_vma (os->bfd_section, newdot);\n@@ -6036,6 +6041,8 @@ void\n one_lang_size_sections_pass (bfd_boolean *relax, bfd_boolean check_regions)\n {\n   lang_statement_iteration++;\n+  if (expld.phase != lang_mark_phase_enum)\n+    lang_sizing_iteration++;\n   lang_size_sections_1 (&statement_list.head, abs_output_section,\n \t\t\t0, 0, relax, check_regions);\n }"
    }
  ]
}