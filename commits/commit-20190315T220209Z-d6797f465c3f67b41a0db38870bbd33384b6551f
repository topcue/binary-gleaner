{
  "sha": "d6797f465c3f67b41a0db38870bbd33384b6551f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDY3OTdmNDY1YzNmNjdiNDFhMGRiMzg4NzBiYmQzMzM4NGI2NTUxZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-02T19:11:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-15T22:02:09Z"
    },
    "message": "Simplify per-BFD storage management\n\nThere's no reason that the objfile_per_bfd_storage must be allocated\nvia bfd_alloc.  This patch changes objfile_per_bfd_storage to be\nmanaged more simply, via ordinary new and delete; and moves some code\ninto its (new) destructor.\n\nWhile doing this I also noticed an extra initialization of\nlanguage_of_main, and removed it.\n\ngdb/ChangeLog\n2019-03-15  Tom Tromey  <tom@tromey.com>\n\n\t* objfiles.h (struct objfile_per_bfd_storage): Declare\n\tdestructor.\n\t* objfiles.c (objfile_per_bfd_storage::~objfile_per_bfd_storage):\n\tNew.\n\t(get_objfile_bfd_data): Use new.  Don't initialize\n\tlanguage_of_main.\n\t(free_objfile_per_bfd_storage): Remove.\n\t(objfile_bfd_data_free, objfile::~objfile): Use delete.",
    "tree": {
      "sha": "170543bd51da158cd4fd08805038d8973e9e6b1c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/170543bd51da158cd4fd08805038d8973e9e6b1c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d6797f465c3f67b41a0db38870bbd33384b6551f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d6797f465c3f67b41a0db38870bbd33384b6551f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d6797f465c3f67b41a0db38870bbd33384b6551f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d6797f465c3f67b41a0db38870bbd33384b6551f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "741d7538b7540fea1086fe6ab962227d2cf7418e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/741d7538b7540fea1086fe6ab962227d2cf7418e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/741d7538b7540fea1086fe6ab962227d2cf7418e"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 27,
    "deletions": 32
  },
  "files": [
    {
      "sha": "13c207d195cad985b8ead9f78751f402790eb3ad",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d6797f465c3f67b41a0db38870bbd33384b6551f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d6797f465c3f67b41a0db38870bbd33384b6551f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d6797f465c3f67b41a0db38870bbd33384b6551f",
      "patch": "@@ -1,3 +1,14 @@\n+2019-03-15  Tom Tromey  <tom@tromey.com>\n+\n+\t* objfiles.h (struct objfile_per_bfd_storage): Declare\n+\tdestructor.\n+\t* objfiles.c (objfile_per_bfd_storage::~objfile_per_bfd_storage):\n+\tNew.\n+\t(get_objfile_bfd_data): Use new.  Don't initialize\n+\tlanguage_of_main.\n+\t(free_objfile_per_bfd_storage): Remove.\n+\t(objfile_bfd_data_free, objfile::~objfile): Use delete.\n+\n 2019-03-15  Tom Tromey  <tom@tromey.com>\n \n \t* symfile.c (reread_symbols): Update."
    },
    {
      "sha": "ff8b6fc72cffee439719797edb5116b6b6690ab9",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 14,
      "deletions": 32,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d6797f465c3f67b41a0db38870bbd33384b6551f/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d6797f465c3f67b41a0db38870bbd33384b6551f/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=d6797f465c3f67b41a0db38870bbd33384b6551f",
      "patch": "@@ -117,13 +117,17 @@ get_objfile_pspace_data (struct program_space *pspace)\n \n static const struct bfd_data *objfiles_bfd_data;\n \n+objfile_per_bfd_storage::~objfile_per_bfd_storage ()\n+{\n+  if (demangled_names_hash)\n+    htab_delete (demangled_names_hash);\n+}\n+\n /* Create the per-BFD storage object for OBJFILE.  If ABFD is not\n    NULL, and it already has a per-BFD storage object, use that.\n-   Otherwise, allocate a new per-BFD storage object.  If ABFD is not\n-   NULL, the object is allocated on the BFD; otherwise it is allocated\n-   on OBJFILE's obstack.  Note that it is not safe to call this\n-   multiple times for a given OBJFILE -- it can only be called when\n-   allocating or re-initializing OBJFILE.  */\n+   Otherwise, allocate a new per-BFD storage object.  Note that it is\n+   not safe to call this multiple times for a given OBJFILE -- it can\n+   only be called when allocating or re-initializing OBJFILE.  */\n \n static struct objfile_per_bfd_storage *\n get_objfile_bfd_data (struct objfile *objfile, struct bfd *abfd)\n@@ -136,50 +140,28 @@ get_objfile_bfd_data (struct objfile *objfile, struct bfd *abfd)\n \n   if (storage == NULL)\n     {\n+      storage = new objfile_per_bfd_storage;\n       /* If the object requires gdb to do relocations, we simply fall\n \t back to not sharing data across users.  These cases are rare\n \t enough that this seems reasonable.  */\n       if (abfd != NULL && !gdb_bfd_requires_relocations (abfd))\n-\t{\n-\t  storage\n-\t    = ((struct objfile_per_bfd_storage *)\n-\t       bfd_alloc (abfd, sizeof (struct objfile_per_bfd_storage)));\n-\t  /* objfile_per_bfd_storage is not trivially constructible, must\n-\t     call the ctor manually.  */\n-\t  storage = new (storage) objfile_per_bfd_storage ();\n-\t  set_bfd_data (abfd, objfiles_bfd_data, storage);\n-\t}\n-      else\n-\tstorage\n-\t  = obstack_new<objfile_per_bfd_storage> (&objfile->objfile_obstack);\n+\tset_bfd_data (abfd, objfiles_bfd_data, storage);\n \n       /* Look up the gdbarch associated with the BFD.  */\n       if (abfd != NULL)\n \tstorage->gdbarch = gdbarch_from_bfd (abfd);\n-\n-      storage->language_of_main = language_unknown;\n     }\n \n   return storage;\n }\n \n-/* Free STORAGE.  */\n-\n-static void\n-free_objfile_per_bfd_storage (struct objfile_per_bfd_storage *storage)\n-{\n-  if (storage->demangled_names_hash)\n-    htab_delete (storage->demangled_names_hash);\n-  storage->~objfile_per_bfd_storage ();\n-}\n-\n-/* A wrapper for free_objfile_per_bfd_storage that can be passed as a\n+/* A deleter for objfile_per_bfd_storage that can be passed as a\n    cleanup function to the BFD registry.  */\n \n static void\n objfile_bfd_data_free (struct bfd *unused, void *d)\n {\n-  free_objfile_per_bfd_storage ((struct objfile_per_bfd_storage *) d);\n+  delete (struct objfile_per_bfd_storage *) d;\n }\n \n /* See objfiles.h.  */\n@@ -670,7 +652,7 @@ objfile::~objfile ()\n   if (obfd)\n     gdb_bfd_unref (obfd);\n   else\n-    free_objfile_per_bfd_storage (per_bfd);\n+    delete per_bfd;\n \n   /* Remove it from the chain of all objfiles.  */\n "
    },
    {
      "sha": "6f8eb7f9ef891af11ecf77a9df3b2e803c32a85c",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d6797f465c3f67b41a0db38870bbd33384b6551f/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d6797f465c3f67b41a0db38870bbd33384b6551f/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=d6797f465c3f67b41a0db38870bbd33384b6551f",
      "patch": "@@ -235,6 +235,8 @@ struct objfile_per_bfd_storage\n     : minsyms_read (false)\n   {}\n \n+  ~objfile_per_bfd_storage ();\n+\n   /* The storage has an obstack of its own.  */\n \n   auto_obstack storage_obstack;"
    }
  ]
}