{
  "sha": "b71702f1c01052b70b4fd8157982eadc2132fc24",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjcxNzAyZjFjMDEwNTJiNzBiNGZkODE1Nzk4MmVhZGMyMTMyZmMyNA==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-10-05T09:40:07Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-10-05T09:40:07Z"
    },
    "message": "GAS: Update the .section directive so that a numeric section index can be provided when the \"o\" flag is used.\n\n\tPR 26253\ngas\t* config/obj-elf.c (obj_elf_section): Accept a numeric value for\n\tthe \"o\" section flag.  Interpret it as a section index.  Allow an\n\tindex of zero.\n\t* doc/as.texi: Document the new behaviour.\n\t* NEWS: Mention the new feature.  Tidy entries.\n\t* testsuite/gas/elf/sh-link-zero.s: New test.\n\t* testsuite/gas/elf/sh-link-zero.d: New test driver.\n\t* testsuite/gas/elf/elf.exp: Run the new test.\n\t* testsuite/gas/elf/section21.l: Updated expected assembler\n\toutput.\n\nbfd\t* elf.c (_bfd_elf_setup_sections): Do not complain about an\n\tsh_link value of zero when the SLF_LINK_ORDER flag is set.\n\t(assign_section_numbers): Likewise.",
    "tree": {
      "sha": "55fbf234a5e3fc887375ce3c3bcec983dce38417",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/55fbf234a5e3fc887375ce3c3bcec983dce38417"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b71702f1c01052b70b4fd8157982eadc2132fc24",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b71702f1c01052b70b4fd8157982eadc2132fc24",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b71702f1c01052b70b4fd8157982eadc2132fc24",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b71702f1c01052b70b4fd8157982eadc2132fc24/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1ba0655539bcbde49171691582d5e804c3e4f975",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ba0655539bcbde49171691582d5e804c3e4f975",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1ba0655539bcbde49171691582d5e804c3e4f975"
    }
  ],
  "stats": {
    "total": 158,
    "additions": 103,
    "deletions": 55
  },
  "files": [
    {
      "sha": "659d8d4bd62deb330a311589dbdae33f2bd68b62",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b71702f1c01052b70b4fd8157982eadc2132fc24/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b71702f1c01052b70b4fd8157982eadc2132fc24/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=b71702f1c01052b70b4fd8157982eadc2132fc24",
      "patch": "@@ -1,3 +1,10 @@\n+2020-10-05  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 26253\n+\t* elf.c (_bfd_elf_setup_sections): Do not complain about an\n+\tsh_link value of zero when the SLF_LINK_ORDER flag is set.\n+\t(assign_section_numbers): Likewise.\n+\n 2020-10-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR 26681"
    },
    {
      "sha": "9d7cbd52e024e312bdc10c700c47d05da85d4267",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 10,
      "deletions": 22,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b71702f1c01052b70b4fd8157982eadc2132fc24/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b71702f1c01052b70b4fd8157982eadc2132fc24/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=b71702f1c01052b70b4fd8157982eadc2132fc24",
      "patch": "@@ -848,16 +848,14 @@ _bfd_elf_setup_sections (bfd *abfd)\n       if ((this_hdr->sh_flags & SHF_LINK_ORDER) != 0)\n \t{\n \t  unsigned int elfsec = this_hdr->sh_link;\n-\t  /* FIXME: The old Intel compiler and old strip/objcopy may\n-\t     not set the sh_link or sh_info fields.  Hence we could\n-\t     get the situation where elfsec is 0.  */\n+\t  /* An sh_link value of 0 is now allowed.  It indicates that linked\n+\t     to section has already been discarded, but that the current\n+\t     section has been retained for some other reason.  This linking\n+\t     section is still a candidate for later garbage collection\n+\t     however.  */\n \t  if (elfsec == 0)\n \t    {\n-\t      const struct elf_backend_data *bed = get_elf_backend_data (abfd);\n-\t      bed->link_order_error_handler\n-\t\t/* xgettext:c-format */\n-\t\t(_(\"%pB: warning: sh_link not set for section `%pA'\"),\n-\t\t abfd, s);\n+\t      elf_linked_to_section (s) = NULL;\n \t    }\n \t  else\n \t    {\n@@ -3888,6 +3886,10 @@ assign_section_numbers (bfd *abfd, struct bfd_link_info *link_info)\n       if ((d->this_hdr.sh_flags & SHF_LINK_ORDER) != 0)\n \t{\n \t  s = elf_linked_to_section (sec);\n+\t  /* We can now have a NULL linked section pointer.\n+\t     This happens when the sh_link field is 0, which is done\n+\t     when a linked to section is discarded but the linking\n+\t     section has been retained for some reason.  */\n \t  if (s)\n \t    {\n \t      /* Check discarded linkonce section.  */\n@@ -3923,20 +3925,6 @@ assign_section_numbers (bfd *abfd, struct bfd_link_info *link_info)\n \t      s = s->output_section;\n \t      d->this_hdr.sh_link = elf_section_data (s)->this_idx;\n \t    }\n-\t  else\n-\t    {\n-\t      /* PR 290:\n-\t\t The Intel C compiler generates SHT_IA_64_UNWIND with\n-\t\t SHF_LINK_ORDER.  But it doesn't set the sh_link or\n-\t\t sh_info fields.  Hence we could get the situation\n-\t\t where s is NULL.  */\n-\t      const struct elf_backend_data *bed\n-\t\t= get_elf_backend_data (abfd);\n-\t      bed->link_order_error_handler\n-\t\t/* xgettext:c-format */\n-\t\t(_(\"%pB: warning: sh_link not set for section `%pA'\"),\n-\t\t abfd, sec);\n-\t    }\n \t}\n \n       switch (d->this_hdr.sh_type)"
    },
    {
      "sha": "56796ff9485abe1d9b25aa430e23bf0821c54862",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=b71702f1c01052b70b4fd8157982eadc2132fc24",
      "patch": "@@ -1,3 +1,17 @@\n+2020-10-05  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 26253\n+\t* config/obj-elf.c (obj_elf_section): Accept a numeric value for\n+\tthe \"o\" section flag.  Interpret it as a section index.  Allow an\n+\tindex of zero.\n+\t* doc/as.texi: Document the new behaviour.\n+\t* NEWS: Mention the new feature.  Tidy entries.\n+\t* testsuite/gas/elf/sh-link-zero.s: New test.\n+\t* testsuite/gas/elf/sh-link-zero.d: New test driver.\n+\t* testsuite/gas/elf/elf.exp: Run the new test.\n+\t* testsuite/gas/elf/section21.l: Updated expected assembler\n+\toutput.\n+\n 2020-10-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/26685"
    },
    {
      "sha": "8f83beb15b2fa6675e38b9b472e81a3d7c7335ed",
      "filename": "gas/NEWS",
      "status": "modified",
      "additions": 6,
      "deletions": 15,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/NEWS?ref=b71702f1c01052b70b4fd8157982eadc2132fc24",
      "patch": "@@ -1,21 +1,12 @@\n -*- text -*-\n-* Add support for Cortex-A78 and Cortex-A78AE for ARM.\n+* When setting the link order attribute of ELF sections, it is now possible to\n+  use a numeric section index instead of symbol name.\n \n-* Add support for Cortex-A78 and Cortex-A78AE for AArch64.\n+* Add support for Cortex-A78, Cortex-A78AE and Cortex-X1 for AArch64 and ARM.\n+  Add support for Cortex-R82, Neoverse V1, and Neoverse N2 for ARM.\n \n-* Add support for ETMv4 (Embedded Trace Macrocell) system registers for\n-  AArch64.\n-\n-* Add support for ETE (Embedded Trace Extension) system registers for AArch64.\n-\n-* Add support for TRBE (Trace Buffer Extension) system registers for AArch64.\n-\n-* Add support for Cortex-X1 for AArch64.\n-\n-* Add support for Cortex-X1 for ARM.\n-\n-* Add support for Arm's Cortex-R82, Neoverse V1, and Neoverse N2\n-  processors.\n+* Add support for ETMv4 (Embedded Trace Macrocell), ETE (Embedded Trace\n+  Extension) and TRBE (Trace Buffer Extension) system registers for AArch64.\n \n * Add support for Armv8-R AArch64.\n "
    },
    {
      "sha": "f061ea61f3e0e554d7c554c5c8a55b43c4df535b",
      "filename": "gas/config/obj-elf.c",
      "status": "modified",
      "additions": 30,
      "deletions": 9,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/config/obj-elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/config/obj-elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-elf.c?ref=b71702f1c01052b70b4fd8157982eadc2132fc24",
      "patch": "@@ -519,8 +519,10 @@ struct section_stack\n \n static struct section_stack *section_stack;\n \n+/* Return TRUE iff SEC matches the section info INF.  */\n+\n static bfd_boolean\n-get_section (bfd *abfd ATTRIBUTE_UNUSED, asection *sec, void *inf)\n+get_section_by_match (bfd *abfd ATTRIBUTE_UNUSED, asection *sec, void *inf)\n {\n   struct elf_section_match *match = (struct elf_section_match *) inf;\n   const char *gname = match->group_name;\n@@ -602,7 +604,7 @@ obj_elf_change_section (const char *name,\n   previous_section = now_seg;\n   previous_subsection = now_subseg;\n \n-  old_sec = bfd_get_section_by_name_if (stdoutput, name, get_section,\n+  old_sec = bfd_get_section_by_name_if (stdoutput, name, get_section_by_match,\n \t\t\t\t\t(void *) match_p);\n   if (old_sec)\n     {\n@@ -1076,6 +1078,7 @@ obj_elf_section (int push)\n   int linkonce;\n   subsegT new_subsection = -1;\n   struct elf_section_match match;\n+  unsigned long linked_to_section_index = -1UL;\n \n   if (flag_mri)\n     {\n@@ -1215,22 +1218,32 @@ obj_elf_section (int push)\n \n \t  if ((attr & SHF_LINK_ORDER) != 0 && *input_line_pointer == ',')\n \t    {\n-\t      char c;\n-\t      unsigned int length;\n \t      ++input_line_pointer;\n \t      SKIP_WHITESPACE ();\n-\t      c = get_symbol_name (& beg);\n-\t      (void) restore_line_pointer (c);\n-\t      length = input_line_pointer - beg;\n-\t      if (length)\n-\t\tmatch.linked_to_symbol_name = xmemdup0 (beg, length);\n+\t      /* Check for a numeric section index, rather than a symbol name.  */\n+\t      if (ISDIGIT (* input_line_pointer))\n+\t\t{\n+\t\t  linked_to_section_index = strtoul (input_line_pointer, & input_line_pointer, 0);\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  char c;\n+\t\t  unsigned int length;\n+\n+\t\t  c = get_symbol_name (& beg);\n+\t\t  (void) restore_line_pointer (c);\n+\t\t  length = input_line_pointer - beg;\n+\t\t  if (length)\n+\t\t    match.linked_to_symbol_name = xmemdup0 (beg, length);\n+\t\t}\n \t    }\n \n \t  if ((attr & SHF_GROUP) != 0 && is_clone)\n \t    {\n \t      as_warn (_(\"? section flag ignored with G present\"));\n \t      is_clone = FALSE;\n \t    }\n+\n \t  if ((attr & SHF_GROUP) != 0 && *input_line_pointer == ',')\n \t    {\n \t      ++input_line_pointer;\n@@ -1289,6 +1302,7 @@ obj_elf_section (int push)\n \t  if (*input_line_pointer == ',')\n \t    {\n \t      char *save = input_line_pointer;\n+\n \t      ++input_line_pointer;\n \t      SKIP_WHITESPACE ();\n \t      if (strncmp (input_line_pointer, \"unique\", 6) == 0)\n@@ -1394,6 +1408,13 @@ obj_elf_section (int push)\n     }\n   elf_section_flags (now_seg) |= gnu_attr;\n \n+  if (linked_to_section_index != -1UL)\n+    {\n+      elf_section_flags (now_seg) |= SHF_LINK_ORDER;\n+      elf_section_data (now_seg)->this_hdr.sh_link = linked_to_section_index;\n+      /* FIXME: Should we perform some sanity checking on the section index ?  */\n+    }\n+\n   if (push && new_subsection != -1)\n     subseg_set (now_seg, new_subsection);\n }"
    },
    {
      "sha": "4f29572eef70f8b6219d59b80ec8a1c673ad5da7",
      "filename": "gas/config/obj-elf.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/config/obj-elf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/config/obj-elf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-elf.h?ref=b71702f1c01052b70b4fd8157982eadc2132fc24",
      "patch": "@@ -104,11 +104,11 @@ struct elf_obj_sy\n    field.  */\n struct elf_section_match\n {\n-  const char *group_name;\n-  const char *linked_to_symbol_name;\n-  unsigned int info;\n-  unsigned int section_id;\n-  flagword flags;\n+  const char *   group_name;\n+  const char *   linked_to_symbol_name;\n+  unsigned int   info;\n+  unsigned int   section_id;\n+  flagword       flags;\n };\n \n #define OBJ_SYMFIELD_TYPE struct elf_obj_sy"
    },
    {
      "sha": "2ba101ce8d6558839a03e1ebaa3cf48a9bc37900",
      "filename": "gas/doc/as.texi",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/doc/as.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/doc/as.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/as.texi?ref=b71702f1c01052b70b4fd8157982eadc2132fc24",
      "patch": "@@ -6728,11 +6728,14 @@ If @var{flags} contains the @code{o} flag, then the @var{type} argument\n must be present along with an additional field like this:\n \n @smallexample\n-.section @var{name},\"@var{flags}\"o,@@@var{type},@var{SymbolName}\n+.section @var{name},\"@var{flags}\"o,@@@var{type},@var{SymbolName}|@var{SectionIndex}\n @end smallexample\n \n The @var{SymbolName} field specifies the symbol name which the section\n-references.\n+references.  Alternatively a numeric @var{SectionIndex} can be provided.  This\n+is not generally a good idea as section indicies are rarely known at assembly\n+time, but the facility is provided for testing purposes.  An index of zero is\n+allowed.  It indicates that the linked-to section has already been discarded.\n \n Note: If both the @var{M} and @var{o} flags are present, then the fields\n for the Merge flag should come first, like this:"
    },
    {
      "sha": "9d751544830b0f9f473cb37f786902fe4a315599",
      "filename": "gas/testsuite/gas/elf/elf.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/testsuite/gas/elf/elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/testsuite/gas/elf/elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/elf.exp?ref=b71702f1c01052b70b4fd8157982eadc2132fc24",
      "patch": "@@ -142,7 +142,7 @@ if { [is_elf_format] } then {\n \n     run_dump_test \"attach-1\"\n     run_dump_test \"attach-err\"\n-    \n+\n     switch -glob $target_triplet {\n \thppa64*-*-hpux* { }\n \triscv*-*-* { }\n@@ -261,6 +261,8 @@ if { [is_elf_format] } then {\n     run_dump_test \"section19\"\n     run_dump_test \"section20\"\n     run_dump_test \"section21\"\n+    run_dump_test \"sh-link-zero\"\n+\n     run_dump_test \"dwarf2-1\" $dump_opts\n     run_dump_test \"dwarf2-2\" $dump_opts\n     run_dump_test \"dwarf2-3\" $dump_opts"
    },
    {
      "sha": "53f04151d33e2735765527edecefbf8010784f7c",
      "filename": "gas/testsuite/gas/elf/section21.l",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/testsuite/gas/elf/section21.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/testsuite/gas/elf/section21.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section21.l?ref=b71702f1c01052b70b4fd8157982eadc2132fc24",
      "patch": "@@ -1,5 +1,5 @@\n [^:]*: Assembler messages:\n-[^:]*:11: Error: junk at end of line, first unrecognized character is `1'\n+[^:]*:11: Error: junk at end of line, first unrecognized character is `f'\n #...\n [^:]*: Error: undefined linked-to symbol `bar' on section `__patchable_function_entries'\n [^:]*: Error: undefined linked-to symbol `foo' on section `__patchable_function_entries'"
    },
    {
      "sha": "243d50c613b96219d9b6728fa4368025e19f658d",
      "filename": "gas/testsuite/gas/elf/sh-link-zero.d",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/testsuite/gas/elf/sh-link-zero.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/testsuite/gas/elf/sh-link-zero.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/sh-link-zero.d?ref=b71702f1c01052b70b4fd8157982eadc2132fc24",
      "patch": "@@ -0,0 +1,9 @@\n+#readelf: --wide --sections\n+#name: Setting the sh_link field to 0\n+#source: sh-link-zero.s\n+\n+#...\n+.*\\.meta1.*WAL[ \t]+0.*\n+#...\n+.*\\.meta2.*WAL[ \t]+[1-9].*\n+#pass"
    },
    {
      "sha": "9e907928d85fe727a5a4a97e2fbca59d53aa854e",
      "filename": "gas/testsuite/gas/elf/sh-link-zero.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/testsuite/gas/elf/sh-link-zero.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b71702f1c01052b70b4fd8157982eadc2132fc24/gas/testsuite/gas/elf/sh-link-zero.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/sh-link-zero.s?ref=b71702f1c01052b70b4fd8157982eadc2132fc24",
      "patch": "@@ -0,0 +1,13 @@\n+.section .meta1,\"awo\",%progbits,0\n+1:\n+\t.dc.b 0\n+\n+.section .meta2,\"awo\",%progbits,foo\n+2:\n+\t.dc.b 1\n+\n+.section foo, \"aw\"\n+\t.dc.b 2\n+\n+.section .gc_root,\"a\",%progbits\n+\t.dc.a 1b"
    }
  ]
}