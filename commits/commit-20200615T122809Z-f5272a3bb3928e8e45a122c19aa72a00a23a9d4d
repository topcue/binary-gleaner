{
  "sha": "f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjUyNzJhM2JiMzkyOGU4ZTQ1YTEyMmMxOWFhNzJhMDBhMjNhOWQ0ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-06-15T12:28:09Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-06-15T12:28:09Z"
    },
    "message": "Remove read_memory_string\n\nread_memory_string is redundant and only called in a couple of spots.\nThis patch removes it in favor of target_read_string.\n\ngdb/ChangeLog\n2020-06-15  Tom Tromey  <tromey@adacore.com>\n\n\t* corefile.c (read_memory_string): Remove.\n\t* ada-valprint.c (ada_value_print_ptr): Update.\n\t* ada-lang.h (ada_tag_name): Change return type.\n\t* ada-lang.c (type_from_tag): Update.\n\t(ada_tag_name_from_tsd): Change return type.  Use\n\ttarget_read_string.\n\t(ada_tag_name): Likewise.\n\t* gdbcore.h (read_memory_string): Don't declare.",
    "tree": {
      "sha": "99e7e7b4f363afdc8929b9557860af4bfed3f23a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/99e7e7b4f363afdc8929b9557860af4bfed3f23a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ff08abb8a2cdb449314b68ebc6ba8edf475fb415",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ff08abb8a2cdb449314b68ebc6ba8edf475fb415",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ff08abb8a2cdb449314b68ebc6ba8edf475fb415"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 39,
    "deletions": 54
  },
  "files": [
    {
      "sha": "1ebe8f3f894571b70a3e53335b54b0d463539787",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
      "patch": "@@ -1,3 +1,14 @@\n+2020-06-15  Tom Tromey  <tromey@adacore.com>\n+\n+\t* corefile.c (read_memory_string): Remove.\n+\t* ada-valprint.c (ada_value_print_ptr): Update.\n+\t* ada-lang.h (ada_tag_name): Change return type.\n+\t* ada-lang.c (type_from_tag): Update.\n+\t(ada_tag_name_from_tsd): Change return type.  Use\n+\ttarget_read_string.\n+\t(ada_tag_name): Likewise.\n+\t* gdbcore.h (read_memory_string): Don't declare.\n+\n 2020-06-14  Hannes Domani  <ssbssa@yahoo.de>\n \n \t* symtab.c (rbreak_command): Ignore Windows drive colon."
    },
    {
      "sha": "ee8d3f5589cb5efd6cd0b9e3313c184874895a80",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 25,
      "deletions": 18,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
      "patch": "@@ -6567,10 +6567,10 @@ value_tag_from_contents_and_address (struct type *type,\n static struct type *\n type_from_tag (struct value *tag)\n {\n-  const char *type_name = ada_tag_name (tag);\n+  gdb::unique_xmalloc_ptr<char> type_name = ada_tag_name (tag);\n \n   if (type_name != NULL)\n-    return ada_find_any_type (ada_encode (type_name));\n+    return ada_find_any_type (ada_encode (type_name.get ()));\n   return NULL;\n }\n \n@@ -6718,37 +6718,42 @@ ada_get_tsd_from_tag (struct value *tag)\n /* Given the TSD of a tag (type-specific data), return a string\n    containing the name of the associated type.\n \n-   The returned value is good until the next call.  May return NULL\n-   if we are unable to determine the tag name.  */\n+   May return NULL if we are unable to determine the tag name.  */\n \n-static char *\n+static gdb::unique_xmalloc_ptr<char>\n ada_tag_name_from_tsd (struct value *tsd)\n {\n-  static char name[1024];\n   char *p;\n   struct value *val;\n \n   val = ada_value_struct_elt (tsd, \"expanded_name\", 1);\n   if (val == NULL)\n     return NULL;\n-  read_memory_string (value_as_address (val), name, sizeof (name) - 1);\n-  for (p = name; *p != '\\0'; p += 1)\n-    if (isalpha (*p))\n-      *p = tolower (*p);\n-  return name;\n+  gdb::unique_xmalloc_ptr<char> buffer;\n+  int err;\n+  if (target_read_string (value_as_address (val), &buffer, INT_MAX, &err) == 0\n+      || err != 0)\n+    return nullptr;\n+\n+  for (p = buffer.get (); *p != '\\0'; ++p)\n+    {\n+      if (isalpha (*p))\n+\t*p = tolower (*p);\n+    }\n+\n+  return buffer;\n }\n \n /* The type name of the dynamic type denoted by the 'tag value TAG, as\n    a C string.\n \n    Return NULL if the TAG is not an Ada tag, or if we were unable to\n-   determine the name of that tag.  The result is good until the next\n-   call.  */\n+   determine the name of that tag.  */\n \n-const char *\n+gdb::unique_xmalloc_ptr<char>\n ada_tag_name (struct value *tag)\n {\n-  char *name = NULL;\n+  gdb::unique_xmalloc_ptr<char> name;\n \n   if (!ada_is_tag_type (value_type (tag)))\n     return NULL;\n@@ -12104,9 +12109,11 @@ ada_exception_message_1 (void)\n   if (e_msg_len <= 0)\n     return NULL;\n \n-  gdb::unique_xmalloc_ptr<char> e_msg ((char *) xmalloc (e_msg_len + 1));\n-  read_memory_string (value_address (e_msg_val), e_msg.get (), e_msg_len + 1);\n-  e_msg.get ()[e_msg_len] = '\\0';\n+  gdb::unique_xmalloc_ptr<char> e_msg;\n+  int err;\n+  if (target_read_string (value_address (e_msg_val), &e_msg, INT_MAX, &err) == 0\n+      || err != 0)\n+    return nullptr;\n \n   return e_msg;\n }"
    },
    {
      "sha": "9be597942fdb2fec216187d5ebf10973628dbcb8",
      "filename": "gdb/ada-lang.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/ada-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/ada-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.h?ref=f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
      "patch": "@@ -260,7 +260,7 @@ extern int ada_is_tagged_type (struct type *, int);\n \n extern int ada_is_tag_type (struct type *);\n \n-extern const char *ada_tag_name (struct value *);\n+extern gdb::unique_xmalloc_ptr<char> ada_tag_name (struct value *);\n \n extern struct value *ada_tag_value_at_base_address (struct value *obj);\n "
    },
    {
      "sha": "61893d5cad3fe2dbfcef0582101e51a03de8b911",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
      "patch": "@@ -754,10 +754,10 @@ ada_value_print_ptr (struct value *val,\n   struct type *type = ada_check_typedef (value_type (val));\n   if (ada_is_tag_type (type))\n     {\n-      const char *name = ada_tag_name (val);\n+      gdb::unique_xmalloc_ptr<char> name = ada_tag_name (val);\n \n       if (name != NULL)\n-\tfprintf_filtered (stream, \" (%s)\", name);\n+\tfprintf_filtered (stream, \" (%s)\", name.get ());\n     }\n }\n "
    },
    {
      "sha": "fed0e4fe8ade8cb4d28eeebc2c3845fd29552595",
      "filename": "gdb/corefile.c",
      "status": "modified",
      "additions": 0,
      "deletions": 27,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/corefile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/corefile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corefile.c?ref=f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
      "patch": "@@ -328,33 +328,6 @@ read_code_unsigned_integer (CORE_ADDR memaddr, int len,\n   return extract_unsigned_integer (buf, len, byte_order);\n }\n \n-void\n-read_memory_string (CORE_ADDR memaddr, char *buffer, int max_len)\n-{\n-  char *cp;\n-  int i;\n-  int cnt;\n-\n-  cp = buffer;\n-  while (1)\n-    {\n-      if (cp - buffer >= max_len)\n-\t{\n-\t  buffer[max_len - 1] = '\\0';\n-\t  break;\n-\t}\n-      cnt = max_len - (cp - buffer);\n-      if (cnt > 8)\n-\tcnt = 8;\n-      read_memory (memaddr + (int) (cp - buffer), (gdb_byte *) cp, cnt);\n-      for (i = 0; i < cnt && *cp; i++, cp++)\n-\t;\t\t\t/* null body */\n-\n-      if (i < cnt && !*cp)\n-\tbreak;\n-    }\n-}\n-\n CORE_ADDR\n read_memory_typed_address (CORE_ADDR addr, struct type *type)\n {"
    },
    {
      "sha": "58566d587859ae1f3136390a4c41a3847f1c46f4",
      "filename": "gdb/gdbcore.h",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/gdbcore.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f5272a3bb3928e8e45a122c19aa72a00a23a9d4d/gdb/gdbcore.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbcore.h?ref=f5272a3bb3928e8e45a122c19aa72a00a23a9d4d",
      "patch": "@@ -87,12 +87,6 @@ extern ULONGEST read_code_unsigned_integer (CORE_ADDR memaddr,\n \t\t\t\t\t    int len,\n \t\t\t\t\t    enum bfd_endian byte_order);\n \n-/* Read a null-terminated string from the debuggee's memory, given\n-   address, a buffer into which to place the string, and the maximum\n-   available space.  */\n-\n-extern void read_memory_string (CORE_ADDR, char *, int);\n-\n /* Read the pointer of type TYPE at ADDR, and return the address it\n    represents.  */\n "
    }
  ]
}