{
  "sha": "6ba4cb845bd319f11d1caf42de5156daed28ff9d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmJhNGNiODQ1YmQzMTlmMTFkMWNhZjQyZGU1MTU2ZGFlZDI4ZmY5ZA==",
  "commit": {
    "author": {
      "name": "Carl Love",
      "email": "cel@us.ibm.com",
      "date": "2021-03-26T21:54:47Z"
    },
    "committer": {
      "name": "Carl Love",
      "email": "cel@us.ibm.com",
      "date": "2021-04-12T15:36:10Z"
    },
    "message": "RS6000 Add support to print vector register contents as float128\n\nThis patch adds a floating point 128-bit composite field to the vsx\nregister type.  When printing the register with p/f the float128 field will\nbe printed as a 128-bit floating point value.  A test case to verify the new\nvsx register field is visible and correctly prints out the value of a 128-bit\nfloating point value is also added.\n\ngdb/ChangeLog:\n\n\t* rs6000-tdep.c (rs6000_builtin_type_vec128): Add t_float128 variable.\n\t(rs6000_builtin_type_vec128): Add append_composite_type_field for\n\tfloat128.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.arch/vsx-vsr-float128.c: New test file.\n\t* gdb.arch/vsx-vsr-float128.exp: New expect file.",
    "tree": {
      "sha": "673ad94f5aadc261324dd51894c61e2d1c7348cd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/673ad94f5aadc261324dd51894c61e2d1c7348cd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6ba4cb845bd319f11d1caf42de5156daed28ff9d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ba4cb845bd319f11d1caf42de5156daed28ff9d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6ba4cb845bd319f11d1caf42de5156daed28ff9d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ba4cb845bd319f11d1caf42de5156daed28ff9d/comments",
  "author": {
    "login": "carlelove",
    "id": 86435705,
    "node_id": "MDQ6VXNlcjg2NDM1NzA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carlelove",
    "html_url": "https://github.com/carlelove",
    "followers_url": "https://api.github.com/users/carlelove/followers",
    "following_url": "https://api.github.com/users/carlelove/following{/other_user}",
    "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions",
    "organizations_url": "https://api.github.com/users/carlelove/orgs",
    "repos_url": "https://api.github.com/users/carlelove/repos",
    "events_url": "https://api.github.com/users/carlelove/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carlelove/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "carlelove",
    "id": 86435705,
    "node_id": "MDQ6VXNlcjg2NDM1NzA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carlelove",
    "html_url": "https://github.com/carlelove",
    "followers_url": "https://api.github.com/users/carlelove/followers",
    "following_url": "https://api.github.com/users/carlelove/following{/other_user}",
    "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions",
    "organizations_url": "https://api.github.com/users/carlelove/orgs",
    "repos_url": "https://api.github.com/users/carlelove/repos",
    "events_url": "https://api.github.com/users/carlelove/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carlelove/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d4717483730cd8b9d28fd1f0741cd005e9a129e2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4717483730cd8b9d28fd1f0741cd005e9a129e2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d4717483730cd8b9d28fd1f0741cd005e9a129e2"
    }
  ],
  "stats": {
    "total": 138,
    "additions": 138,
    "deletions": 0
  },
  "files": [
    {
      "sha": "67a3b6cff442e6bf3026c9fb497a0ec15992551d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ba4cb845bd319f11d1caf42de5156daed28ff9d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ba4cb845bd319f11d1caf42de5156daed28ff9d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6ba4cb845bd319f11d1caf42de5156daed28ff9d",
      "patch": "@@ -1,3 +1,9 @@\n+2021-4-12  Carl Love  <cel@us.ibm.com>\n+\n+\t* rs6000-tdep.c (rs6000_builtin_type_vec128): Add t_float128 variable.\n+\t(rs6000_builtin_type_vec128): Add append_composite_type_field for\n+\tfloat128.\n+\n 2021-04-12  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* nat/windows-nat.c: Remove all code guarded by _WIN32_WCE."
    },
    {
      "sha": "276b4fa55830301acee49db60d0e71d64b6bd826",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ba4cb845bd319f11d1caf42de5156daed28ff9d/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ba4cb845bd319f11d1caf42de5156daed28ff9d/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=6ba4cb845bd319f11d1caf42de5156daed28ff9d",
      "patch": "@@ -2355,6 +2355,7 @@ rs6000_builtin_type_vec128 (struct gdbarch *gdbarch)\n       /* The type we're building is this\n \n \t type = union __ppc_builtin_type_vec128 {\n+\t     float128_t float128;\n \t     uint128_t uint128;\n \t     double v2_double[2];\n \t     float v4_float[4];\n@@ -2364,10 +2365,15 @@ rs6000_builtin_type_vec128 (struct gdbarch *gdbarch)\n \t }\n       */\n \n+      /* PPC specific type for IEEE 128-bit float field */\n+      struct type *t_float128\n+\t= arch_float_type (gdbarch, 128, \"float128_t\", floatformats_ia64_quad);\n+\n       struct type *t;\n \n       t = arch_composite_type (gdbarch,\n \t\t\t       \"__ppc_builtin_type_vec128\", TYPE_CODE_UNION);\n+      append_composite_type_field (t, \"float128\", t_float128);\n       append_composite_type_field (t, \"uint128\", bt->builtin_uint128);\n       append_composite_type_field (t, \"v2_double\",\n \t\t\t\t   init_vector_type (bt->builtin_double, 2));"
    },
    {
      "sha": "f833782555d5ce6da1b2cd0804a644da8166ab43",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ba4cb845bd319f11d1caf42de5156daed28ff9d/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ba4cb845bd319f11d1caf42de5156daed28ff9d/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=6ba4cb845bd319f11d1caf42de5156daed28ff9d",
      "patch": "@@ -1,3 +1,8 @@\n+2021-4-12  Carl Love  <cel@us.ibm.com>\n+\n+\t* gdb.arch/vsx-vsr-float128.c: New test file.\n+\t* gdb.arch/vsx-vsr-float128.exp: New expect file.\n+\n 2021-04-12  Markus Metzger  <markus.t.metzger@intel.com>\n \n \t* gdb.btrace/reconnect.exp: Relax expected stepi output."
    },
    {
      "sha": "8e1f88afb158a284911b21c466bd9de5bc46314c",
      "filename": "gdb/testsuite/gdb.arch/vsx-vsr-float28.c",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ba4cb845bd319f11d1caf42de5156daed28ff9d/gdb/testsuite/gdb.arch/vsx-vsr-float28.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ba4cb845bd319f11d1caf42de5156daed28ff9d/gdb/testsuite/gdb.arch/vsx-vsr-float28.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/vsx-vsr-float28.c?ref=6ba4cb845bd319f11d1caf42de5156daed28ff9d",
      "patch": "@@ -0,0 +1,31 @@\n+/* This file is part of GDB, the GNU debugger.\n+\n+   Copyright 2008-2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <altivec.h>\n+#include <stdio.h>\n+\n+int\n+main ()\n+{\n+  __float128 x, y, z;\n+\n+  x = -2.25;\n+  y = 3.5;\n+  z = x * y;\n+\n+  return 0;\n+}"
    },
    {
      "sha": "cefe43ccab757d1ff9b0ad075448ab8abbc99935",
      "filename": "gdb/testsuite/gdb.arch/vsx-vsr-float28.exp",
      "status": "added",
      "additions": 90,
      "deletions": 0,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ba4cb845bd319f11d1caf42de5156daed28ff9d/gdb/testsuite/gdb.arch/vsx-vsr-float28.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ba4cb845bd319f11d1caf42de5156daed28ff9d/gdb/testsuite/gdb.arch/vsx-vsr-float28.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/vsx-vsr-float28.exp?ref=6ba4cb845bd319f11d1caf42de5156daed28ff9d",
      "patch": "@@ -0,0 +1,90 @@\n+# Copyright (C) 2008-2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+#\n+\n+#\n+# Test the vsr registers print values in float128 bit format.\n+#\n+\n+\n+if {![istarget \"powerpc*\"] || [skip_vsx_tests]} then {\n+    verbose \"Skipping vsr float128 field tests.\"\n+    return\n+}\n+\n+standard_testfile\n+\n+set compile_flags {debug nowarnings quiet}\n+if [get_compiler_info] {\n+    warning \"get_compiler failed\"\n+    return -1\n+}\n+\n+if [test_compiler_info gcc*] {\n+    set compile_flags \"$compile_flags additional_flags=-maltivec additional_flags=-mabi=altivec\"\n+} elseif [test_compiler_info xlc*] {\n+    set compile_flags \"$compile_flags additional_flags=-qaltivec\"\n+} else {\n+    warning \"unknown compiler\"\n+    return -1\n+}\n+\n+if  { [gdb_compile ${srcdir}/${subdir}/${srcfile} ${binfile} executable $compile_flags] != \"\" } {\n+     untested \"failed to compile\"\n+     return -1\n+}\n+\n+gdb_start\n+gdb_reinitialize_dir $srcdir/$subdir\n+gdb_load ${binfile}\n+\n+# Run to `main' where we begin our tests.\n+\n+if ![runto_main] then {\n+    fail \"can't run to main\"\n+    return 0\n+}\n+\n+set endianness [get_endianness]\n+\n+# Data sets used throughout the test\n+\n+set vector_field \".*float128 = -2.25,.*\"\n+\n+# The vsx registers now contain a 128-bit floating point field.  The following tests\n+# setting a vsr register with a 128-bit floating point value and then printing the\n+# register contents using the float format to verify the value is correctly printed\n+# as a 128-bit value.\n+\n+# the following corresponds to a 128-bit float value of -2.25\n+if {$endianness == \"big\"} {\n+    gdb_test_no_output \"set \\$vs1.v4_int32\\[3\\] = 0x0\"\n+    gdb_test_no_output \"set \\$vs1.v4_int32\\[2\\] = 0x0\"\n+    gdb_test_no_output \"set \\$vs1.v4_int32\\[1\\] = 0x0\"\n+    gdb_test_no_output \"set \\$vs1.v4_int32\\[0\\] = 0xc0002000\"\n+} else {\n+    gdb_test_no_output \"set \\$vs1.v4_int32\\[0\\] = 0x0\"\n+    gdb_test_no_output \"set \\$vs1.v4_int32\\[1\\] = 0x0\"\n+    gdb_test_no_output \"set \\$vs1.v4_int32\\[2\\] = 0x0\"\n+    gdb_test_no_output \"set \\$vs1.v4_int32\\[3\\] = 0xc0002000\"\n+}\n+\n+# check the contents of the register\n+gdb_test \"p/f \\$vs1\" \"$vector_field\"\n+\n+gdb_exit\n+\n+\n+"
    }
  ]
}