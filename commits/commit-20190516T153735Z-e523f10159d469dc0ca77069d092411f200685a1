{
  "sha": "e523f10159d469dc0ca77069d092411f200685a1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTUyM2YxMDE1OWQ0NjlkYzBjYTc3MDY5ZDA5MjQxMWYyMDA2ODVhMQ==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T13:44:19Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:37:35Z"
    },
    "message": "[PATCH 53/57][Arm][OBJDUMP] Add support for MVE instructions: vand, vbrsr, vcls, vclz and vctp\n\nopcodes/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* arm-dis.c (thumb32_opcodes): Add new instructions.\n\t(enum mve_instructions): Likewise.\n\t(is_mve_encoding_conflict): Handle new instructions.\n\t(is_mve_undefined): Likewise.\n\t(is_mve_unpredictable): Likewise.\n\t(print_mve_size): Likewise.",
    "tree": {
      "sha": "90f14cffb1f1fe8cc99b7b438f8514b9e15dc690",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/90f14cffb1f1fe8cc99b7b438f8514b9e15dc690"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e523f10159d469dc0ca77069d092411f200685a1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e523f10159d469dc0ca77069d092411f200685a1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e523f10159d469dc0ca77069d092411f200685a1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e523f10159d469dc0ca77069d092411f200685a1/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "66dcaa5d55eb39471d962bb949df009a9ea3f959",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/66dcaa5d55eb39471d962bb949df009a9ea3f959",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/66dcaa5d55eb39471d962bb949df009a9ea3f959"
    }
  ],
  "stats": {
    "total": 76,
    "additions": 76,
    "deletions": 0
  },
  "files": [
    {
      "sha": "d271c6ccdb2c285709e4323f52642e5c98ba01ba",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e523f10159d469dc0ca77069d092411f200685a1/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e523f10159d469dc0ca77069d092411f200685a1/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=e523f10159d469dc0ca77069d092411f200685a1",
      "patch": "@@ -1,3 +1,13 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* arm-dis.c (thumb32_opcodes): Add new instructions.\n+\t(enum mve_instructions): Likewise.\n+\t(is_mve_encoding_conflict): Handle new instructions.\n+\t(is_mve_undefined): Likewise.\n+\t(is_mve_unpredictable): Likewise.\n+\t(print_mve_size): Likewise.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "
    },
    {
      "sha": "3d4ed4356532aa725cdc7dba6f861dfe5161fe82",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 66,
      "deletions": 0,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e523f10159d469dc0ca77069d092411f200685a1/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e523f10159d469dc0ca77069d092411f200685a1/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=e523f10159d469dc0ca77069d092411f200685a1",
      "patch": "@@ -223,6 +223,11 @@ enum mve_instructions\n   MVE_VSUB_FP_T2,\n   MVE_VSUB_VEC_T1,\n   MVE_VSUB_VEC_T2,\n+  MVE_VAND,\n+  MVE_VBRSR,\n+  MVE_VCLS,\n+  MVE_VCLZ,\n+  MVE_VCTP,\n   MVE_NONE\n };\n \n@@ -2147,6 +2152,18 @@ static const struct mopcode32 mve_opcodes[] =\n    0xee300f00, 0xffb10f51,\n    \"vadc%12I%v.i32\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n \n+  /* Vector VAND.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VAND,\n+   0xef000150, 0xffb11f51,\n+   \"vand%v\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VBRSR register.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VBRSR,\n+   0xfe011e60, 0xff811f70,\n+   \"vbrsr%v.%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n   /* Vector VCADD floating point.  */\n   {ARM_FEATURE_COPROC (FPU_MVE_FP),\n    MVE_VCADD_FP,\n@@ -2159,6 +2176,18 @@ static const struct mopcode32 mve_opcodes[] =\n    0xfe000f00, 0xff810f51,\n    \"vcadd%v.i%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q, #%12o\"},\n \n+  /* Vector VCLS.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VCLS,\n+   0xffb00440, 0xffb31fd1,\n+   \"vcls%v.s%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n+\n+  /* Vector VCLZ.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VCLZ,\n+   0xffb004c0, 0xffb31fd1,\n+   \"vclz%v.i%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n+\n   /* Vector VCMLA.  */\n   {ARM_FEATURE_COPROC (FPU_MVE_FP),\n    MVE_VCMLA_FP,\n@@ -2274,6 +2303,12 @@ static const struct mopcode32 mve_opcodes[] =\n    0xee300e00, 0xefb10f50,\n    \"vcmul%v.f%28s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q, #%0,12o\"},\n \n+   /* Vector VCTP.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VCTP,\n+   0xf000e801, 0xffc0ffff,\n+   \"vctp%v.%20-21s\\t%16-19r\"},\n+\n   /* Vector VDUP.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VDUP,\n@@ -5029,6 +5064,7 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VBRSR:\n     case MVE_VADD_VEC_T2:\n     case MVE_VSUB_VEC_T2:\n     case MVE_VABAV:\n@@ -5206,6 +5242,12 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VCTP:\n+    if (arm_decode_field (given, 16, 19) == 0xf)\n+      return TRUE;\n+    else\n+      return FALSE;\n+\n     default:\n     case MVE_VADD_FP_T1:\n     case MVE_VADD_FP_T2:\n@@ -5650,6 +5692,16 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n \telse\n \t  return FALSE;\n \n+    case MVE_VCLS:\n+    case MVE_VCLZ:\n+      if (arm_decode_field (given, 18, 19) == 3)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_3;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n     }\n@@ -5709,6 +5761,7 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \treturn FALSE;\n       }\n \n+    case MVE_VBRSR:\n     case MVE_VADD_FP_T2:\n     case MVE_VSUB_FP_T2:\n     case MVE_VADD_VEC_T2:\n@@ -6097,6 +6150,15 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \n       }\n \n+    case MVE_VCTP:\n+      if (arm_decode_field (given, 16, 19) == 0xd)\n+\t{\n+\t  *unpredictable_code = UNPRED_R13;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n     }\n@@ -6780,13 +6842,17 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VADD_VEC_T1:\n     case MVE_VADD_VEC_T2:\n     case MVE_VADDV:\n+    case MVE_VBRSR:\n     case MVE_VCADD_VEC:\n+    case MVE_VCLS:\n+    case MVE_VCLZ:\n     case MVE_VCMP_VEC_T1:\n     case MVE_VCMP_VEC_T2:\n     case MVE_VCMP_VEC_T3:\n     case MVE_VCMP_VEC_T4:\n     case MVE_VCMP_VEC_T5:\n     case MVE_VCMP_VEC_T6:\n+    case MVE_VCTP:\n     case MVE_VDDUP:\n     case MVE_VDWDUP:\n     case MVE_VHADD_T1:"
    }
  ]
}