{
  "sha": "7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2MzMmVlYmI4N2E1MDA0ZDU3ZjljN2U4NGNmYWY2Y2FjN2IyMGIxOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-13T16:41:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-13T16:41:05Z"
    },
    "message": "Constify abbrev_table::lookup_abbrev\n\nThis changes abbrev_table::lookup_abbrev to return a pointer to const,\nthen fixes up the affected code.\n\ngdb/ChangeLog\n2021-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (struct partial_die_info): Update.\n\t(peek_die_abbrev, skip_children, skip_one_die, read_full_die_1)\n\t(load_partial_dies, partial_die_info::partial_die_info): Update.\n\t* dwarf2/abbrev.h (lookup_abbrev): Constify.",
    "tree": {
      "sha": "504870f3e358c046e91e4eed40302c2d0b78b0c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/504870f3e358c046e91e4eed40302c2d0b78b0c9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "27012aba8a638a636940c2813f191383ccd713fd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/27012aba8a638a636940c2813f191383ccd713fd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/27012aba8a638a636940c2813f191383ccd713fd"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 20,
    "deletions": 10
  },
  "files": [
    {
      "sha": "b42a391b3f9a88fd1e46f6a8a69e44aec5319a9d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (struct partial_die_info): Update.\n+\t(peek_die_abbrev, skip_children, skip_one_die, read_full_die_1)\n+\t(load_partial_dies, partial_die_info::partial_die_info): Update.\n+\t* dwarf2/abbrev.h (lookup_abbrev): Constify.\n+\n 2021-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/abbrev.c (abbrev_table::read): Remove Irix 6 workaround."
    },
    {
      "sha": "50f2ed460835b87092686bebdd10a8aabd2f833e",
      "filename": "gdb/dwarf2/abbrev.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18/gdb/dwarf2/abbrev.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18/gdb/dwarf2/abbrev.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/abbrev.h?ref=7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18",
      "patch": "@@ -71,7 +71,7 @@ struct abbrev_table\n   /* Look up an abbrev in the table.\n      Returns NULL if the abbrev is not found.  */\n \n-  struct abbrev_info *lookup_abbrev (unsigned int abbrev_number)\n+  const struct abbrev_info *lookup_abbrev (unsigned int abbrev_number) const\n   {\n     struct abbrev_info search;\n     search.number = abbrev_number;"
    },
    {
      "sha": "3b72a96affe3fcaa6f2c131c15694b2e93a04032",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=7c32eebb87a5004d57f9c7e84cfaf6cac7b20b18",
      "patch": "@@ -1024,7 +1024,7 @@ class cutu_reader : public die_reader_specs\n    need this much information.  */\n struct partial_die_info : public allocate_on_obstack\n   {\n-    partial_die_info (sect_offset sect_off, struct abbrev_info *abbrev);\n+    partial_die_info (sect_offset sect_off, const struct abbrev_info *abbrev);\n \n     /* Disable assign but still keep copy ctor, which is needed\n        load_partial_dies.   */\n@@ -1624,7 +1624,7 @@ static void dwarf2_symbol_mark_computed (const struct attribute *attr,\n \n static const gdb_byte *skip_one_die (const struct die_reader_specs *reader,\n \t\t\t\t     const gdb_byte *info_ptr,\n-\t\t\t\t     struct abbrev_info *abbrev);\n+\t\t\t\t     const struct abbrev_info *abbrev);\n \n static hashval_t partial_die_hash (const void *item);\n \n@@ -8697,7 +8697,7 @@ peek_abbrev_code (bfd *abfd, const gdb_byte *info_ptr)\n    an empty DIE).  In either case *BYTES_READ will be set to the length of\n    the initial number.  */\n \n-static struct abbrev_info *\n+static const struct abbrev_info *\n peek_die_abbrev (const die_reader_specs &reader,\n \t\t const gdb_byte *info_ptr, unsigned int *bytes_read)\n {\n@@ -8709,7 +8709,8 @@ peek_die_abbrev (const die_reader_specs &reader,\n   if (abbrev_number == 0)\n     return NULL;\n \n-  abbrev_info *abbrev = reader.abbrev_table->lookup_abbrev (abbrev_number);\n+  const abbrev_info *abbrev\n+    = reader.abbrev_table->lookup_abbrev (abbrev_number);\n   if (!abbrev)\n     {\n       error (_(\"Dwarf Error: Could not find abbrev number %d in %s\"\n@@ -8731,7 +8732,8 @@ skip_children (const struct die_reader_specs *reader, const gdb_byte *info_ptr)\n   while (1)\n     {\n       unsigned int bytes_read;\n-      abbrev_info *abbrev = peek_die_abbrev (*reader, info_ptr, &bytes_read);\n+      const abbrev_info *abbrev = peek_die_abbrev (*reader, info_ptr,\n+\t\t\t\t\t\t   &bytes_read);\n \n       if (abbrev == NULL)\n \treturn info_ptr + bytes_read;\n@@ -8748,7 +8750,7 @@ skip_children (const struct die_reader_specs *reader, const gdb_byte *info_ptr)\n \n static const gdb_byte *\n skip_one_die (const struct die_reader_specs *reader, const gdb_byte *info_ptr,\n-\t      struct abbrev_info *abbrev)\n+\t      const struct abbrev_info *abbrev)\n {\n   unsigned int bytes_read;\n   struct attribute attr;\n@@ -19169,7 +19171,7 @@ read_full_die_1 (const struct die_reader_specs *reader,\n \t\t int num_extra_attrs)\n {\n   unsigned int abbrev_number, bytes_read, i;\n-  struct abbrev_info *abbrev;\n+  const struct abbrev_info *abbrev;\n   struct die_info *die;\n   struct dwarf2_cu *cu = reader->cu;\n   bfd *abfd = reader->abfd;\n@@ -19333,7 +19335,8 @@ load_partial_dies (const struct die_reader_specs *reader,\n \n   while (1)\n     {\n-      abbrev_info *abbrev = peek_die_abbrev (*reader, info_ptr, &bytes_read);\n+      const abbrev_info *abbrev = peek_die_abbrev (*reader, info_ptr,\n+\t\t\t\t\t\t   &bytes_read);\n \n       /* A NULL abbrev means the end of a series of children.  */\n       if (abbrev == NULL)\n@@ -19565,7 +19568,7 @@ load_partial_dies (const struct die_reader_specs *reader,\n }\n \n partial_die_info::partial_die_info (sect_offset sect_off_,\n-\t\t\t\t    struct abbrev_info *abbrev)\n+\t\t\t\t    const struct abbrev_info *abbrev)\n   : partial_die_info (sect_off_, abbrev->tag, abbrev->has_children)\n {\n }"
    }
  ]
}