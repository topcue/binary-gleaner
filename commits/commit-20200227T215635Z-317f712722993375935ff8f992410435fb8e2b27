{
  "sha": "317f712722993375935ff8f992410435fb8e2b27",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzE3ZjcxMjcyMjk5MzM3NTkzNWZmOGY5OTI0MTA0MzVmYjhlMmIyNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-02-27T21:05:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-02-27T21:56:35Z"
    },
    "message": "Remove field_info::nfields member\n\nI noticed that there's no real reason to have field_info::nfields in\nthe DWARF reader.  It simply mirrors information that is already\navailable.  This patch removes it, in favor of a convenience method.\n\ngdb/ChangeLog\n2020-02-27  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2/read.c (struct field_info) <nfields>: Now a method, not a\n\tmember.\n\t(dwarf2_add_field): Don't update nfields.\n\t(dwarf2_attach_fields_to_type, process_structure_scope): Update.",
    "tree": {
      "sha": "26e6a11a42a0409fdc52231aabd3010c10613104",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/26e6a11a42a0409fdc52231aabd3010c10613104"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/317f712722993375935ff8f992410435fb8e2b27",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/317f712722993375935ff8f992410435fb8e2b27",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/317f712722993375935ff8f992410435fb8e2b27",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/317f712722993375935ff8f992410435fb8e2b27/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5f6028029146629b5fd5732e20c600b5837c20a9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f6028029146629b5fd5732e20c600b5837c20a9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5f6028029146629b5fd5732e20c600b5837c20a9"
    }
  ],
  "stats": {
    "total": 22,
    "additions": 15,
    "deletions": 7
  },
  "files": [
    {
      "sha": "d99c1784f8b7a87eaa4d0be83205f5b37b320637",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/317f712722993375935ff8f992410435fb8e2b27/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/317f712722993375935ff8f992410435fb8e2b27/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=317f712722993375935ff8f992410435fb8e2b27",
      "patch": "@@ -1,3 +1,10 @@\n+2020-02-27  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2/read.c (struct field_info) <nfields>: Now a method, not a\n+\tmember.\n+\t(dwarf2_add_field): Don't update nfields.\n+\t(dwarf2_attach_fields_to_type, process_structure_scope): Update.\n+\n 2020-02-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdbtypes.c (create_array_type_with_stride): Use std::abs not"
    },
    {
      "sha": "f52b1dd3150b61c685e8db3b29bf774c1fe22dd8",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/317f712722993375935ff8f992410435fb8e2b27/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/317f712722993375935ff8f992410435fb8e2b27/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=317f712722993375935ff8f992410435fb8e2b27",
      "patch": "@@ -1129,9 +1129,6 @@ struct field_info\n     std::vector<struct nextfield> fields;\n     std::vector<struct nextfield> baseclasses;\n \n-    /* Number of fields (including baseclasses).  */\n-    int nfields = 0;\n-\n     /* Set if the accessibility of one of the fields is not public.  */\n     int non_public_fields = 0;\n \n@@ -1147,6 +1144,12 @@ struct field_info\n     /* Nested types defined by this class and the number of elements in this\n        list.  */\n     std::vector<struct decl_field> nested_types_list;\n+\n+    /* Return the total number of fields (including baseclasses).  */\n+    int nfields () const\n+    {\n+      return fields.size () + baseclasses.size ();\n+    }\n   };\n \n /* Loaded secondary compilation units are kept in memory until they\n@@ -14207,8 +14210,6 @@ dwarf2_add_field (struct field_info *fip, struct die_info *die,\n       new_field = &fip->fields.back ();\n     }\n \n-  fip->nfields++;\n-\n   attr = dwarf2_attr (die, DW_AT_accessibility, cu);\n   if (attr != nullptr)\n     new_field->accessibility = DW_UNSND (attr);\n@@ -14468,7 +14469,7 @@ static void\n dwarf2_attach_fields_to_type (struct field_info *fip, struct type *type,\n \t\t\t      struct dwarf2_cu *cu)\n {\n-  int nfields = fip->nfields;\n+  int nfields = fip->nfields ();\n \n   /* Record the field count, allocate space for the array of fields,\n      and create blank accessibility bitfields if necessary.  */\n@@ -15336,7 +15337,7 @@ process_structure_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t}\n \n       /* Attach fields and member functions to the type.  */\n-      if (fi.nfields)\n+      if (fi.nfields () > 0)\n \tdwarf2_attach_fields_to_type (&fi, type, cu);\n       if (!fi.fnfieldlists.empty ())\n \t{"
    }
  ]
}