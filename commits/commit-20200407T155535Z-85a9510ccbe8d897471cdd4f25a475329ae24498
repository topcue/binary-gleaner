{
  "sha": "85a9510ccbe8d897471cdd4f25a475329ae24498",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODVhOTUxMGNjYmU4ZDg5NzQ3MWNkZDRmMjVhNDc1MzI5YWUyNDQ5OA==",
  "commit": {
    "author": {
      "name": "nitachra",
      "email": "Nitika.Achra@amd.com",
      "date": "2020-04-07T13:06:00Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-07T15:55:35Z"
    },
    "message": "DWARFv5: Info address command error in gdb with DWARFfv5.\n\nGDB throws the error 'Unrecognized DWARF opcode 0x02 at 2' when running\nInfo address command with the executable file compiled with -gdwarf-5 flag.\nThis patch fixes this error.\n\nTested by running the testsuite before and after the patch and there is\nno increase in the number of test cases that fails. Tested with both\n-gdwarf-4 and -gdwarf-5 flags. Also tested -gslit-dwarf along with\n-gdwarf-4 as well as -gdwarf-5 flags. Used clang version 10.0.0.\nThis is the test case used-\n\nvoid bar(int arr[], int l, int m, int r) {\n    int i, j, k, n1= m - l + 1, n2= r - m, L[n1], R[n2];\n    for (i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (j = 0; j < n2; j++)\n        R[j] = arr[m + 1+ j];\n}\n\nint main()\n{\n    int arr[] = {12, 11};\n    bar(arr,0,1,2);\n    return 0;\n}\n\nclang -gdwarf-5 test.c -o test.out\n\ngdb test.out\ngdb> start\ngdb> step\ngdb> step\ngdb> step\ngdb> step\ngdb> info address L\nSymbol \"L\" is multi-location:\n  Range 0x7c04007902bc5084-0x67fb876440700: a complex DWARF expression:\n     0: DW_OP_breg16 1 [$rip]\nUnrecognized DWARF opcode 0x02 at 2\n\ngdb/ChangeLog:\n2020-04-07  Nitika Achra  <Nitika.Achra@amd.com>\n\n\t* dwarf2/loc.c (loclist_describe_location): Call the function decode_debug_loclists_\n\taddresses if DWARF version is 5 or more because DW_LLE_start* or DW_LLE_offset_pair\n\twith DW_LLE_base_addressx are being emitted in DWARFv5.\n\tAdd the newly added kind DW_LOC_OFFSET_PAIR also.\n\tThe length of location description is an unsigned ULEB integer in DWARFv5 instead of\n\tunsigned integer.",
    "tree": {
      "sha": "76da9db2dbd208d751edc9bd3c6689b2b80cd35f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/76da9db2dbd208d751edc9bd3c6689b2b80cd35f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/85a9510ccbe8d897471cdd4f25a475329ae24498",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85a9510ccbe8d897471cdd4f25a475329ae24498",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/85a9510ccbe8d897471cdd4f25a475329ae24498",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85a9510ccbe8d897471cdd4f25a475329ae24498/comments",
  "author": null,
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9fc3eaae69b2a60c5688d6bfe334829a3964b17f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9fc3eaae69b2a60c5688d6bfe334829a3964b17f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9fc3eaae69b2a60c5688d6bfe334829a3964b17f"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 28,
    "deletions": 4
  },
  "files": [
    {
      "sha": "019b4d3e1d77eecd9c6a5aafb1b5f60f9ebc06bc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85a9510ccbe8d897471cdd4f25a475329ae24498/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85a9510ccbe8d897471cdd4f25a475329ae24498/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=85a9510ccbe8d897471cdd4f25a475329ae24498",
      "patch": "@@ -1,3 +1,12 @@\n+2020-04-07  Nitika Achra  <Nitika.Achra@amd.com>\n+\n+\t* dwarf2/loc.c (loclist_describe_location): Call the function decode_debug_loclists_\n+\taddresses if DWARF version is 5 or more because DW_LLE_start* or DW_LLE_offset_pair\n+\twith DW_LLE_base_addressx are being emitted in DWARFv5.\n+\tAdd the newly added kind DW_LOC_OFFSET_PAIR also.\n+\tThe length of location description is an unsigned ULEB integer in DWARFv5 instead of\n+\tunsigned integer.\n+\n 2020-04-07  Nitika Achra  <Nitika.Achra@amd.com>\n \n \t* dwarf2/loc.c (enum debug_loc_kind): Add a new kind DEBUG_LOC_OFFSET_PAIR."
    },
    {
      "sha": "2ec4626b17cc7e5a57c4357ab67bf2ef1d1944e0",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 19,
      "deletions": 4,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85a9510ccbe8d897471cdd4f25a475329ae24498/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85a9510ccbe8d897471cdd4f25a475329ae24498/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=85a9510ccbe8d897471cdd4f25a475329ae24498",
      "patch": "@@ -4459,15 +4459,20 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n       enum debug_loc_kind kind;\n       const gdb_byte *new_ptr = NULL; /* init for gcc -Wall */\n \n-      if (dlbaton->from_dwo)\n+      if (dlbaton->per_cu->version () < 5 && dlbaton->from_dwo)\n \tkind = decode_debug_loc_dwo_addresses (dlbaton->per_cu,\n \t\t\t\t\t       loc_ptr, buf_end, &new_ptr,\n \t\t\t\t\t       &low, &high, byte_order);\n-      else\n+      else if (dlbaton->per_cu->version () < 5)\n \tkind = decode_debug_loc_addresses (loc_ptr, buf_end, &new_ptr,\n \t\t\t\t\t   &low, &high,\n \t\t\t\t\t   byte_order, addr_size,\n \t\t\t\t\t   signed_addr_p);\n+      else\n+\tkind = decode_debug_loclists_addresses (dlbaton->per_cu,\n+\t\t\t\t\t\tloc_ptr, buf_end, &new_ptr,\n+\t\t\t\t\t\t&low, &high, byte_order,\n+\t\t\t\t\t\taddr_size, signed_addr_p);\n       loc_ptr = new_ptr;\n       switch (kind)\n \t{\n@@ -4481,6 +4486,7 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n \t  continue;\n \tcase DEBUG_LOC_START_END:\n \tcase DEBUG_LOC_START_LENGTH:\n+\tcase DEBUG_LOC_OFFSET_PAIR:\n \t  break;\n \tcase DEBUG_LOC_BUFFER_OVERFLOW:\n \tcase DEBUG_LOC_INVALID_ENTRY:\n@@ -4497,8 +4503,17 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n       low = gdbarch_adjust_dwarf2_addr (gdbarch, low);\n       high = gdbarch_adjust_dwarf2_addr (gdbarch, high);\n \n-      length = extract_unsigned_integer (loc_ptr, 2, byte_order);\n-      loc_ptr += 2;\n+      if (dlbaton->per_cu->version () < 5)\n+\t {\n+\t   length = extract_unsigned_integer (loc_ptr, 2, byte_order);\n+\t   loc_ptr += 2;\n+\t }\n+      else\n+\t {\n+\t   unsigned int bytes_read;\n+\t   length = read_unsigned_leb128 (NULL, loc_ptr, &bytes_read);\n+\t   loc_ptr += bytes_read;\n+\t }\n \n       /* (It would improve readability to print only the minimum\n \t necessary digits of the second number of the range.)  */"
    }
  ]
}