{
  "sha": "2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmEzYzExNzRjM2MwZGIxMTQwMTgwZmIzZmM1NmFjMzI0ZDFjMGE3Yw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-05T08:17:16Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-10-01T21:12:38Z"
    },
    "message": "Introduce gdb-specific %p format suffixes\n\nThis introduces a few gdb-specific %p format suffixes.  This is useful\nfor emitting gdb-specific output in an ergonomic way.  It also yields\ncode that is more i18n-friendly.\n\nThe comment before ui_out::message explains the details.\n\nNote that the tests had to change a little.  When using one of the gdb\nprintf functions with styling, there can be spurious style changes\nemitted to the output.  This did not seem worthwhile to fix, as the\nlow-level output functions are rather spaghetti-ish already, and I\ndidn't want to make them even worse.\n\nThis change also necessitated adding support for \"*\" as precision and\nwidth in format_pieces.  These are used in various spots in gdb, and\nit seemed better to me to implement them than to remove the uses.\n\ngdb/ChangeLog\n2019-10-01  Pedro Alves  <palves@redhat.com>\n\t    Tom Tromey  <tom@tromey.com>\n\n\t* unittests/format_pieces-selftests.c: Add gdb_format parameter.\n\t(test_gdb_formats): New function.\n\t(run_tests): Call it.\n\t(test_format_specifier): Update.\n\t* utils.h (fputs_filtered): Update comment.\n\t(vfprintf_styled, vfprintf_styled_no_gdbfmt)\n\t(fputs_styled_unfiltered): Declare.\n\t* utils.c (fputs_styled_unfiltered): New function.\n\t(vfprintf_maybe_filtered): Add gdbfmt parameter.\n\t(vfprintf_filtered): Update.\n\t(vfprintf_unfiltered, vprintf_filtered): Update.\n\t(vfprintf_styled, vfprintf_styled_no_gdbfmt): New functions.\n\t* ui-out.h (enum ui_out_flag) <unfiltered_output,\n\tdisallow_ui_out_field>: New constants.\n\t(enum class field_kind): New.\n\t(struct base_field_s, struct signed_field_s): New.\n\t(signed_field): New function.\n\t(struct string_field_s): New.\n\t(string_field): New function.\n\t(struct styled_string_s): New.\n\t(styled_string): New function.\n\t(class ui_out) <message>: Add comment.\n\t<vmessage, call_do_message>: New methods.\n\t<do_message>: Add style parameter.\n\t* ui-out.c (ui_out::call_do_message, ui_out::vmessage): New\n\tmethods.\n\t(ui_out::message): Rewrite.\n\t* mi/mi-out.h (class mi_ui_out) <do_message>: Add style\n\tparameter.\n\t* mi/mi-out.c (mi_ui_out::do_message): Add style parameter.\n\t* gdbsupport/format.h (class format_pieces) <format_pieces>: Add\n\tgdb_extensions parameter.\n\t(class format_piece): Add parameter to constructor.\n\t(n_int_args): New field.\n\t* gdbsupport/format.c (format_pieces::format_pieces): Add\n\tgdb_extensions parameter.  Handle '*'.\n\t* cli-out.h (class cli_ui_out) <do_message>: Add style parameter.\n\t* cli-out.c (cli_ui_out::do_message): Add style parameter.  Call\n\tvfprintf_styled_no_gdbfmt.\n\t(cli_ui_out::do_field_string, cli_ui_out::do_spaces)\n\t(cli_ui_out::do_text, cli_ui_out::field_separator): Allow\n\tunfiltered output.\n\t* ui-style.h (struct ui_file_style) <ptr>: New method.\n\ngdb/testsuite/ChangeLog\n2019-10-01  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.base/style.exp: Update tests.",
    "tree": {
      "sha": "174cd0bf2a3a09ac1f910d32d8700e947399b955",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/174cd0bf2a3a09ac1f910d32d8700e947399b955"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0dfe5bfbb7e7a3e55c57d1b59c265dc1a3cd9fc7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0dfe5bfbb7e7a3e55c57d1b59c265dc1a3cd9fc7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0dfe5bfbb7e7a3e55c57d1b59c265dc1a3cd9fc7"
    }
  ],
  "stats": {
    "total": 753,
    "additions": 646,
    "deletions": 107
  },
  "files": [
    {
      "sha": "ff336c86f0e6b23e9a5ba3cb71e27b4766778b3a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -1,3 +1,50 @@\n+2019-10-01  Pedro Alves  <palves@redhat.com>\n+\t    Tom Tromey  <tom@tromey.com>\n+\n+\t* unittests/format_pieces-selftests.c: Add gdb_format parameter.\n+\t(test_gdb_formats): New function.\n+\t(run_tests): Call it.\n+\t(test_format_specifier): Update.\n+\t* utils.h (fputs_filtered): Update comment.\n+\t(vfprintf_styled, vfprintf_styled_no_gdbfmt)\n+\t(fputs_styled_unfiltered): Declare.\n+\t* utils.c (fputs_styled_unfiltered): New function.\n+\t(vfprintf_maybe_filtered): Add gdbfmt parameter.\n+\t(vfprintf_filtered): Update.\n+\t(vfprintf_unfiltered, vprintf_filtered): Update.\n+\t(vfprintf_styled, vfprintf_styled_no_gdbfmt): New functions.\n+\t* ui-out.h (enum ui_out_flag) <unfiltered_output,\n+\tdisallow_ui_out_field>: New constants.\n+\t(enum class field_kind): New.\n+\t(struct base_field_s, struct signed_field_s): New.\n+\t(signed_field): New function.\n+\t(struct string_field_s): New.\n+\t(string_field): New function.\n+\t(struct styled_string_s): New.\n+\t(styled_string): New function.\n+\t(class ui_out) <message>: Add comment.\n+\t<vmessage, call_do_message>: New methods.\n+\t<do_message>: Add style parameter.\n+\t* ui-out.c (ui_out::call_do_message, ui_out::vmessage): New\n+\tmethods.\n+\t(ui_out::message): Rewrite.\n+\t* mi/mi-out.h (class mi_ui_out) <do_message>: Add style\n+\tparameter.\n+\t* mi/mi-out.c (mi_ui_out::do_message): Add style parameter.\n+\t* gdbsupport/format.h (class format_pieces) <format_pieces>: Add\n+\tgdb_extensions parameter.\n+\t(class format_piece): Add parameter to constructor.\n+\t(n_int_args): New field.\n+\t* gdbsupport/format.c (format_pieces::format_pieces): Add\n+\tgdb_extensions parameter.  Handle '*'.\n+\t* cli-out.h (class cli_ui_out) <do_message>: Add style parameter.\n+\t* cli-out.c (cli_ui_out::do_message): Add style parameter.  Call\n+\tvfprintf_styled_no_gdbfmt.\n+\t(cli_ui_out::do_field_string, cli_ui_out::do_spaces)\n+\t(cli_ui_out::do_text, cli_ui_out::field_separator): Allow\n+\tunfiltered output.\n+\t* ui-style.h (struct ui_file_style) <ptr>: New method.\n+\n 2019-10-01  Tom Tromey  <tom@tromey.com>\n \n \t* unittests/format_pieces-selftests.c: Update.  Add final format."
    },
    {
      "sha": "c713607e06800201b6b25149ff44ea95360b6fb7",
      "filename": "gdb/cli-out.c",
      "status": "modified",
      "additions": 25,
      "deletions": 6,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/cli-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/cli-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli-out.c?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -170,7 +170,12 @@ cli_ui_out::do_field_string (int fldno, int width, ui_align align,\n     spaces (before);\n \n   if (string)\n-    fputs_styled (string, style, m_streams.back ());\n+    {\n+      if (test_flags (unfiltered_output))\n+\tfputs_styled_unfiltered (string, style, m_streams.back ());\n+      else\n+\tfputs_styled (string, style, m_streams.back ());\n+    }\n \n   if (after)\n     spaces (after);\n@@ -201,7 +206,10 @@ cli_ui_out::do_spaces (int numspaces)\n   if (m_suppress_output)\n     return;\n \n-  print_spaces_filtered (numspaces, m_streams.back ());\n+  if (test_flags (unfiltered_output))\n+    print_spaces (numspaces, m_streams.back ());\n+  else\n+    print_spaces_filtered (numspaces, m_streams.back ());\n }\n \n void\n@@ -210,16 +218,24 @@ cli_ui_out::do_text (const char *string)\n   if (m_suppress_output)\n     return;\n \n-  fputs_filtered (string, m_streams.back ());\n+  if (test_flags (unfiltered_output))\n+    fputs_unfiltered (string, m_streams.back ());\n+  else\n+    fputs_filtered (string, m_streams.back ());\n }\n \n void\n-cli_ui_out::do_message (const char *format, va_list args)\n+cli_ui_out::do_message (const ui_file_style &style,\n+\t\t\tconst char *format, va_list args)\n {\n   if (m_suppress_output)\n     return;\n \n-  vfprintf_unfiltered (m_streams.back (), format, args);\n+  /* Use the \"no_gdbfmt\" variant here to avoid recursion.\n+     vfprintf_styled calls into cli_ui_out::message to handle the\n+     gdb-specific printf formats.  */\n+  vfprintf_styled_no_gdbfmt (m_streams.back (), style,\n+\t\t\t     !test_flags (unfiltered_output), format, args);\n }\n \n void\n@@ -255,7 +271,10 @@ cli_ui_out::do_redirect (ui_file *outstream)\n void\n cli_ui_out::field_separator ()\n {\n-  fputc_filtered (' ', m_streams.back ());\n+  if (test_flags (unfiltered_output))\n+    fputc_unfiltered (' ', m_streams.back ());\n+  else\n+    fputc_filtered (' ', m_streams.back ());\n }\n \n /* Constructor for cli_ui_out.  */"
    },
    {
      "sha": "d7bd23b0ef22ae7560866dc82452bfd0f4091f63",
      "filename": "gdb/cli-out.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/cli-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/cli-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli-out.h?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -64,8 +64,9 @@ class cli_ui_out : public ui_out\n     override ATTRIBUTE_PRINTF (6,0);\n   virtual void do_spaces (int numspaces) override;\n   virtual void do_text (const char *string) override;\n-  virtual void do_message (const char *format, va_list args) override\n-    ATTRIBUTE_PRINTF (2,0);\n+  virtual void do_message (const ui_file_style &style,\n+\t\t\t   const char *format, va_list args) override\n+    ATTRIBUTE_PRINTF (3,0);\n   virtual void do_wrap_hint (const char *identstring) override;\n   virtual void do_flush () override;\n   virtual void do_redirect (struct ui_file *outstream) override;"
    },
    {
      "sha": "1e803501ae67ea965812149175e357b2bb1c22f2",
      "filename": "gdb/gdbsupport/format.c",
      "status": "modified",
      "additions": 103,
      "deletions": 63,
      "changes": 166,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/gdbsupport/format.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/gdbsupport/format.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/format.c?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -20,81 +20,90 @@\n #include \"common-defs.h\"\n #include \"format.h\"\n \n-format_pieces::format_pieces (const char **arg)\n+format_pieces::format_pieces (const char **arg, bool gdb_extensions)\n {\n   const char *s;\n-  char *f, *string;\n+  const char *string;\n   const char *prev_start;\n   const char *percent_loc;\n   char *sub_start, *current_substring;\n   enum argclass this_argclass;\n \n   s = *arg;\n \n-  /* Parse the format-control string and copy it into the string STRING,\n-     processing some kinds of escape sequence.  */\n+  if (gdb_extensions)\n+    {\n+      string = *arg;\n+      *arg += strlen (*arg);\n+    }\n+  else\n+    {\n+      /* Parse the format-control string and copy it into the string STRING,\n+\t processing some kinds of escape sequence.  */\n \n-  f = string = (char *) alloca (strlen (s) + 1);\n+      char *f = (char *) alloca (strlen (s) + 1);\n+      string = f;\n \n-  while (*s != '\"' && *s != '\\0')\n-    {\n-      int c = *s++;\n-      switch (c)\n+      while ((gdb_extensions || *s != '\"') && *s != '\\0')\n \t{\n-\tcase '\\0':\n-\t  continue;\n-\n-\tcase '\\\\':\n-\t  switch (c = *s++)\n+\t  int c = *s++;\n+\t  switch (c)\n \t    {\n+\t    case '\\0':\n+\t      continue;\n+\n \t    case '\\\\':\n-\t      *f++ = '\\\\';\n-\t      break;\n-\t    case 'a':\n-\t      *f++ = '\\a';\n-\t      break;\n-\t    case 'b':\n-\t      *f++ = '\\b';\n-\t      break;\n-\t    case 'e':\n-\t      *f++ = '\\e';\n-\t      break;\n-\t    case 'f':\n-\t      *f++ = '\\f';\n-\t      break;\n-\t    case 'n':\n-\t      *f++ = '\\n';\n-\t      break;\n-\t    case 'r':\n-\t      *f++ = '\\r';\n-\t      break;\n-\t    case 't':\n-\t      *f++ = '\\t';\n-\t      break;\n-\t    case 'v':\n-\t      *f++ = '\\v';\n-\t      break;\n-\t    case '\"':\n-\t      *f++ = '\"';\n+\t      switch (c = *s++)\n+\t\t{\n+\t\tcase '\\\\':\n+\t\t  *f++ = '\\\\';\n+\t\t  break;\n+\t\tcase 'a':\n+\t\t  *f++ = '\\a';\n+\t\t  break;\n+\t\tcase 'b':\n+\t\t  *f++ = '\\b';\n+\t\t  break;\n+\t\tcase 'e':\n+\t\t  *f++ = '\\e';\n+\t\t  break;\n+\t\tcase 'f':\n+\t\t  *f++ = '\\f';\n+\t\t  break;\n+\t\tcase 'n':\n+\t\t  *f++ = '\\n';\n+\t\t  break;\n+\t\tcase 'r':\n+\t\t  *f++ = '\\r';\n+\t\t  break;\n+\t\tcase 't':\n+\t\t  *f++ = '\\t';\n+\t\t  break;\n+\t\tcase 'v':\n+\t\t  *f++ = '\\v';\n+\t\t  break;\n+\t\tcase '\"':\n+\t\t  *f++ = '\"';\n+\t\t  break;\n+\t\tdefault:\n+\t\t  /* ??? TODO: handle other escape sequences.  */\n+\t\t  error (_(\"Unrecognized escape character \\\\%c in format string.\"),\n+\t\t\t c);\n+\t\t}\n \t      break;\n+\n \t    default:\n-\t      /* ??? TODO: handle other escape sequences.  */\n-\t      error (_(\"Unrecognized escape character \\\\%c in format string.\"),\n-\t\t     c);\n+\t      *f++ = c;\n \t    }\n-\t  break;\n-\n-\tdefault:\n-\t  *f++ = c;\n \t}\n-    }\n \n-  /* Terminate our escape-processed copy.  */\n-  *f++ = '\\0';\n+      /* Terminate our escape-processed copy.  */\n+      *f++ = '\\0';\n \n-  /* Whether the format string ended with double-quote or zero, we're\n-     done with it; it's up to callers to complain about syntax.  */\n-  *arg = s;\n+      /* Whether the format string ended with double-quote or zero, we're\n+\t done with it; it's up to callers to complain about syntax.  */\n+      *arg = s;\n+    }\n \n   /* Need extra space for the '\\0's.  Doubling the size is sufficient.  */\n \n@@ -105,7 +114,7 @@ format_pieces::format_pieces (const char **arg)\n      argclass classifies the %-specs so we can give printf-type functions\n      something of the right size.  */\n \n-  f = string;\n+  const char *f = string;\n   prev_start = string;\n   while (*f)\n     if (*f++ == '%')\n@@ -115,6 +124,7 @@ format_pieces::format_pieces (const char **arg)\n \tint seen_big_l = 0, seen_h = 0, seen_big_h = 0;\n \tint seen_big_d = 0, seen_double_big_d = 0;\n \tint bad = 0;\n+\tint n_int_args = 0;\n \n \t/* Skip over \"%%\", it will become part of a literal piece.  */\n \tif (*f == '%')\n@@ -130,7 +140,7 @@ format_pieces::format_pieces (const char **arg)\n \t*current_substring++ = '\\0';\n \n \tif (*sub_start != '\\0')\n-\t  m_pieces.emplace_back (sub_start, literal_piece);\n+\t  m_pieces.emplace_back (sub_start, literal_piece, 0);\n \n \tpercent_loc = f - 1;\n \n@@ -155,16 +165,32 @@ format_pieces::format_pieces (const char **arg)\n \t  }\n \n \t/* The next part of a format specifier is a width.  */\n-\twhile (*f != '\\0' && strchr (\"0123456789\", *f))\n-\t  f++;\n+\tif (gdb_extensions && *f == '*')\n+\t  {\n+\t    ++f;\n+\t    ++n_int_args;\n+\t  }\n+\telse\n+\t  {\n+\t    while (*f != '\\0' && strchr (\"0123456789\", *f))\n+\t      f++;\n+\t  }\n \n \t/* The next part of a format specifier is a precision.  */\n \tif (*f == '.')\n \t  {\n \t    seen_prec = 1;\n \t    f++;\n-\t    while (*f != '\\0' && strchr (\"0123456789\", *f))\n-\t      f++;\n+\t    if (gdb_extensions && *f == '*')\n+\t      {\n+\t\t++f;\n+\t\t++n_int_args;\n+\t      }\n+\t    else\n+\t      {\n+\t\twhile (*f != '\\0' && strchr (\"0123456789\", *f))\n+\t\t  f++;\n+\t      }\n \t  }\n \n \t/* The next part of a format specifier is a length modifier.  */\n@@ -252,6 +278,20 @@ format_pieces::format_pieces (const char **arg)\n \t      bad = 1;\n \t    if (seen_hash || seen_zero || seen_space || seen_plus)\n \t      bad = 1;\n+\n+\t    if (gdb_extensions)\n+\t      {\n+\t\tswitch (f[1])\n+\t\t  {\n+\t\t  case 's':\n+\t\t  case 'F':\n+\t\t  case '[':\n+\t\t  case ']':\n+\t\t    f++;\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\n \t    break;\n \n \t  case 's':\n@@ -336,7 +376,7 @@ format_pieces::format_pieces (const char **arg)\n \n \tprev_start = f;\n \n-\tm_pieces.emplace_back (sub_start, this_argclass);\n+\tm_pieces.emplace_back (sub_start, this_argclass, n_int_args);\n       }\n \n   /* Record the remainder of the string.  */\n@@ -349,6 +389,6 @@ format_pieces::format_pieces (const char **arg)\n       current_substring += f - prev_start;\n       *current_substring++ = '\\0';\n \n-      m_pieces.emplace_back (sub_start, literal_piece);\n+      m_pieces.emplace_back (sub_start, literal_piece, 0);\n     }\n }"
    },
    {
      "sha": "e2a47ba5187d951c91e318af4ea1224c5b5fecd2",
      "filename": "gdb/gdbsupport/format.h",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/gdbsupport/format.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/gdbsupport/format.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/format.h?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -50,9 +50,10 @@ enum argclass\n \n struct format_piece\n {\n-  format_piece (const char *str, enum argclass argc)\n+  format_piece (const char *str, enum argclass argc, int n)\n     : string (str),\n-      argclass (argc)\n+      argclass (argc),\n+      n_int_args (n)\n   {\n   }\n \n@@ -64,13 +65,17 @@ struct format_piece\n \n   const char *string;\n   enum argclass argclass;\n+  /* Count the number of preceding 'int' arguments that must be passed\n+     along.  This is used for a width or precision of '*'.  Note that\n+     this feature is only available in \"gdb_extensions\" mode.  */\n+  int n_int_args;\n };\n \n class format_pieces\n {\n public:\n \n-  format_pieces (const char **arg);\n+  format_pieces (const char **arg, bool gdb_extensions = false);\n   ~format_pieces () = default;\n \n   DISABLE_COPY_AND_ASSIGN (format_pieces);"
    },
    {
      "sha": "71af4865e9745e2f3cad112552c02ef389a6cdbf",
      "filename": "gdb/mi/mi-out.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/mi/mi-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/mi/mi-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-out.c?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -166,7 +166,8 @@ mi_ui_out::do_text (const char *string)\n }\n \n void\n-mi_ui_out::do_message (const char *format, va_list args)\n+mi_ui_out::do_message (const ui_file_style &style,\n+\t\t       const char *format, va_list args)\n {\n }\n "
    },
    {
      "sha": "9393809b5f20c296afe93b308fb1834ae5bd95bb",
      "filename": "gdb/mi/mi-out.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/mi/mi-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/mi/mi-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-out.h?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -72,8 +72,9 @@ class mi_ui_out : public ui_out\n     override ATTRIBUTE_PRINTF (6,0);\n   virtual void do_spaces (int numspaces) override;\n   virtual void do_text (const char *string) override;\n-  virtual void do_message (const char *format, va_list args) override\n-    ATTRIBUTE_PRINTF (2,0);\n+  virtual void do_message (const ui_file_style &style,\n+\t\t\t   const char *format, va_list args) override\n+    ATTRIBUTE_PRINTF (3,0);\n   virtual void do_wrap_hint (const char *identstring) override;\n   virtual void do_flush () override;\n   virtual void do_redirect (struct ui_file *outstream) override;"
    },
    {
      "sha": "b9a320c981151f4dd58793fcb4e907ffcdea5eef",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -1,3 +1,7 @@\n+2019-10-01  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.base/style.exp: Update tests.\n+\n 2019-10-01  Andreas Arnez  <arnez@linux.ibm.com>\n \n \t* gdb.base/pretty-print.c (struct s1_t): Change fields 'three' and"
    },
    {
      "sha": "d2c3105bb9fd8d72547c8f983266adcf124b744b",
      "filename": "gdb/testsuite/gdb.base/style.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/testsuite/gdb.base/style.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/testsuite/gdb.base/style.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/style.exp?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -94,13 +94,13 @@ save_vars { env(TERM) } {\n     gdb_test \"\" \"${vers}.*\" \\\n \t\"version is styled\"\n \n-    set address_style_expr [style \"\\\"address\\\" style\" address]\n+    set address_style_expr [style \".*\\\".*address.*\\\".*style.*\" address]\n     gdb_test \"show style address foreground\" \\\n \t\"The ${address_style_expr} foreground color is: blue\" \\\n \t\"style name and style word styled using its own style in show style\"\n \n-    set aliases_expr [style \"aliases\" title]\n-    set breakpoints_expr [style \"breakpoints\" title]\n+    set aliases_expr [style \".*aliases.*\" title]\n+    set breakpoints_expr [style \".*breakpoints.*\" title]\n     gdb_test \"help\" \\\n \t[multi_line \\\n \t     \"List of classes of commands:\" \\\n@@ -111,8 +111,8 @@ save_vars { env(TERM) } {\n \t    ] \\\n \t\"help classes of commands styled with title\"\n \n-    set taas_expr  [style \"taas\" title]\n-    set tfaas_expr  [style \"tfaas\" title]\n+    set taas_expr  [style \".*taas.*\" title]\n+    set tfaas_expr  [style \".*tfaas.*\" title]\n     set cut_for_thre_expr [style \"cut for 'thre\" highlight]\n     gdb_test \"apropos -v cut for 'thre\" \\\n \t[multi_line \\"
    },
    {
      "sha": "8cbaa4e0bc19a42010544cf2a3b2cdbf1b0ea9f2",
      "filename": "gdb/ui-out.c",
      "status": "modified",
      "additions": 180,
      "deletions": 2,
      "changes": 182,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/ui-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/ui-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-out.c?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -563,12 +563,190 @@ ui_out::text (const char *string)\n }\n \n void\n-ui_out::message (const char *format, ...)\n+ui_out::call_do_message (const ui_file_style &style, const char *format,\n+\t\t\t ...)\n {\n   va_list args;\n \n   va_start (args, format);\n-  do_message (format, args);\n+  do_message (style, format, args);\n+  va_end (args);\n+}\n+\n+void\n+ui_out::vmessage (const ui_file_style &in_style, const char *format,\n+\t\t  va_list args)\n+{\n+  format_pieces fpieces (&format, true);\n+\n+  ui_file_style style = in_style;\n+\n+  for (auto &&piece : fpieces)\n+    {\n+      const char *current_substring = piece.string;\n+\n+      gdb_assert (piece.n_int_args >= 0 && piece.n_int_args <= 2);\n+      int intvals[2] = { 0, 0 };\n+      for (int i = 0; i < piece.n_int_args; ++i)\n+\tintvals[i] = va_arg (args, int);\n+\n+      /* The only ones we support for now.  */\n+      gdb_assert (piece.n_int_args == 0\n+\t\t  || piece.argclass == string_arg\n+\t\t  || piece.argclass == int_arg\n+\t\t  || piece.argclass == long_arg);\n+\n+      switch (piece.argclass)\n+\t{\n+\tcase string_arg:\n+\t  {\n+\t    const char *str = va_arg (args, const char *);\n+\t    switch (piece.n_int_args)\n+\t      {\n+\t      case 0:\n+\t\tcall_do_message (style, current_substring, str);\n+\t\tbreak;\n+\t      case 1:\n+\t\tcall_do_message (style, current_substring, intvals[0], str);\n+\t\tbreak;\n+\t      case 2:\n+\t\tcall_do_message (style, current_substring,\n+\t\t\t\t intvals[0], intvals[1], str);\n+\t\tbreak;\n+\t      }\n+\t  }\n+\t  break;\n+\tcase wide_string_arg:\n+\t  gdb_assert_not_reached (_(\"wide_string_arg not supported in vmessage\"));\n+\t  break;\n+\tcase wide_char_arg:\n+\t  gdb_assert_not_reached (_(\"wide_char_arg not supported in vmessage\"));\n+\t  break;\n+\tcase long_long_arg:\n+\t  call_do_message (style, current_substring, va_arg (args, long long));\n+\t  break;\n+\tcase int_arg:\n+\t  {\n+\t    int val = va_arg (args, int);\n+\t    switch (piece.n_int_args)\n+\t      {\n+\t      case 0:\n+\t\tcall_do_message (style, current_substring, val);\n+\t\tbreak;\n+\t      case 1:\n+\t\tcall_do_message (style, current_substring, intvals[0], val);\n+\t\tbreak;\n+\t      case 2:\n+\t\tcall_do_message (style, current_substring,\n+\t\t\t\t intvals[0], intvals[1], val);\n+\t\tbreak;\n+\t      }\n+\t  }\n+\t  break;\n+\tcase long_arg:\n+\t  {\n+\t    long val = va_arg (args, long);\n+\t    switch (piece.n_int_args)\n+\t      {\n+\t      case 0:\n+\t\tcall_do_message (style, current_substring, val);\n+\t\tbreak;\n+\t      case 1:\n+\t\tcall_do_message (style, current_substring, intvals[0], val);\n+\t\tbreak;\n+\t      case 2:\n+\t\tcall_do_message (style, current_substring,\n+\t\t\t\t intvals[0], intvals[1], val);\n+\t\tbreak;\n+\t      }\n+\t  }\n+\t  break;\n+\tcase double_arg:\n+\t  call_do_message (style, current_substring, va_arg (args, double));\n+\t  break;\n+\tcase long_double_arg:\n+\t  gdb_assert_not_reached (_(\"long_double_arg not supported in vmessage\"));\n+\t  break;\n+\tcase dec32float_arg:\n+\t  gdb_assert_not_reached (_(\"dec32float_arg not supported in vmessage\"));\n+\t  break;\n+\tcase dec64float_arg:\n+\t  gdb_assert_not_reached (_(\"dec64float_arg not supported in vmessage\"));\n+\t  break;\n+\tcase dec128float_arg:\n+\t  gdb_assert_not_reached (_(\"dec128float_arg not supported in vmessage\"));\n+\t  break;\n+\tcase ptr_arg:\n+\t  switch (current_substring[2])\n+\t    {\n+\t    case 'F':\n+\t      {\n+\t\tgdb_assert (!test_flags (disallow_ui_out_field));\n+\t\tbase_field_s *bf = va_arg (args, base_field_s *);\n+\t\tswitch (bf->kind)\n+\t\t  {\n+\t\t  case field_kind::SIGNED:\n+\t\t    {\n+\t\t      auto *f = (signed_field_s *) bf;\n+\t\t      field_signed (f->name, f->val);\n+\t\t    }\n+\t\t    break;\n+\t\t  case field_kind::STRING:\n+\t\t    {\n+\t\t      auto *f = (string_field_s *) bf;\n+\t\t      field_string (f->name, f->str);\n+\t\t    }\n+\t\t    break;\n+\t\t  }\n+\t      }\n+\t      break;\n+\t    case 's':\n+\t      {\n+\t\tstyled_string_s *ss = va_arg (args, styled_string_s *);\n+\t\tcall_do_message (ss->style, \"%s\", ss->str);\n+\t      }\n+\t      break;\n+\t    case '[':\n+\t      style = *va_arg (args, const ui_file_style *);\n+\t      break;\n+\t    case ']':\n+\t      {\n+\t\tvoid *arg = va_arg (args, void *);\n+\t\tgdb_assert (arg == nullptr);\n+\n+\t\tstyle = {};\n+\t      }\n+\t      break;\n+\t    default:\n+\t      call_do_message (style, current_substring, va_arg (args, void *));\n+\t      break;\n+\t    }\n+\t  break;\n+\tcase literal_piece:\n+\t  /* Print a portion of the format string that has no\n+\t     directives.  Note that this will not include any ordinary\n+\t     %-specs, but it might include \"%%\".  That is why we use\n+\t     call_do_message here.  Also, we pass a dummy argument\n+\t     because some platforms have modified GCC to include\n+\t     -Wformat-security by default, which will warn here if\n+\t     there is no argument.  */\n+\t  call_do_message (style, current_substring, 0);\n+\t  break;\n+\tdefault:\n+\t  internal_error (__FILE__, __LINE__,\n+\t\t\t  _(\"failed internal consistency check\"));\n+\t}\n+    }\n+}\n+\n+void\n+ui_out::message (const char *format, ...)\n+{\n+  va_list args;\n+  va_start (args, format);\n+\n+  vmessage (ui_file_style (), format, args);\n+\n   va_end (args);\n }\n "
    },
    {
      "sha": "0bba1280fcc672ed05121dde597b14409223fb8c",
      "filename": "gdb/ui-out.h",
      "status": "modified",
      "additions": 140,
      "deletions": 2,
      "changes": 142,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/ui-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/ui-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-out.h?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -53,6 +53,12 @@ enum ui_out_flag\n {\n   ui_source_list = (1 << 0),\n   fix_multi_location_breakpoint_output = (1 << 1),\n+  /* For CLI output, this flag is set if unfiltered output is desired.\n+     This should only be used by low-level formatting functions.  */\n+  unfiltered_output = (1 << 2),\n+  /* This indicates that %pF should be disallowed in a printf format\n+     string.  */\n+  disallow_ui_out_field = (1 << 3)\n };\n \n DEF_ENUM_FLAGS_TYPE (ui_out_flag, ui_out_flags);\n@@ -68,6 +74,87 @@ enum ui_out_type\n     ui_out_type_list\n   };\n \n+/* The possible kinds of fields.  */\n+enum class field_kind\n+  {\n+    SIGNED,\n+    STRING,\n+  };\n+\n+/* The base type of all fields that can be emitted using %pF.  */\n+\n+struct base_field_s\n+{\n+  const char *name;\n+  field_kind kind;\n+};\n+\n+/* A signed integer field, to be passed to %pF in format strings.  */\n+\n+struct signed_field_s : base_field_s\n+{\n+  LONGEST val;\n+};\n+\n+/* Construct a temporary signed_field_s on the caller's stack and\n+   return a pointer to the constructed object.  We use this because\n+   it's not possible to pass a reference via va_args.  */\n+\n+static inline signed_field_s *\n+signed_field (const char *name, LONGEST val,\n+\t      signed_field_s &&tmp = {})\n+{\n+  tmp.name = name;\n+  tmp.kind = field_kind::SIGNED;\n+  tmp.val = val;\n+  return &tmp;\n+}\n+\n+/* A string field, to be passed to %pF in format strings.  */\n+\n+struct string_field_s : base_field_s\n+{\n+  const char *str;\n+};\n+\n+/* Construct a temporary string_field_s on the caller's stack and\n+   return a pointer to the constructed object.  We use this because\n+   it's not possible to pass a reference via va_args.  */\n+\n+static inline string_field_s *\n+string_field (const char *name, const char *str,\n+\t      string_field_s &&tmp = {})\n+{\n+  tmp.name = name;\n+  tmp.kind = field_kind::STRING;\n+  tmp.str = str;\n+  return &tmp;\n+}\n+\n+/* A styled string.  */\n+\n+struct styled_string_s\n+{\n+  /* The style.  */\n+  ui_file_style style;\n+\n+  /* The string.  */\n+  const char *str;\n+};\n+\n+/* Construct a temporary styled_string_s on the caller's stack and\n+   return a pointer to the constructed object.  We use this because\n+   it's not possible to pass a reference via va_args.  */\n+\n+static inline styled_string_s *\n+styled_string (const ui_file_style &style, const char *str,\n+\t       styled_string_s &&tmp = {})\n+{\n+  tmp.style = style;\n+  tmp.str = str;\n+  return &tmp;\n+}\n+\n class ui_out\n {\n  public:\n@@ -110,7 +197,55 @@ class ui_out\n \n   void spaces (int numspaces);\n   void text (const char *string);\n+\n+  /* Output a printf-style formatted string.  In addition to the usual\n+     printf format specs, this supports a few GDB-specific\n+     formatters:\n+\n+     - '%pF' - output a field.\n+\n+       The argument is a field, wrapped in any of the base_field_s\n+       subclasses.  signed_field for integer fields, string_field for\n+       string fields.  This is preferred over separate\n+       uiout->field_signed(), uiout_>field_string() etc. calls when\n+       the formatted message is translatable.  E.g.:\n+\n+         uiout->message (_(\"\\nWatchpoint %pF deleted because the program has \"\n+                         \"left the block in\\n\"\n+                         \"which its expression is valid.\\n\"),\n+                         signed_field (\"wpnum\", b->number));\n+\n+     - '%p[' - output the following text in a specified style.\n+       '%p]' - output the following text in the default style.\n+\n+       The argument to '%p[' is a ui_file_style pointer.  The argument\n+       to '%p]' must be nullptr.\n+\n+       This is useful when you want to output some portion of a string\n+       literal in some style.  E.g.:\n+\n+\t uiout->message (_(\" %p[<repeats %u times>%p]\"),\n+\t\t\t metadata_style.style ().ptr (),\n+\t\t\t reps, repeats, nullptr);\n+\n+     - '%ps' - output a styled string.\n+\n+       The argument is the result of a call to styled_string.  This is\n+       useful when you want to output some runtime-generated string in\n+       some style.  E.g.:\n+\n+\t uiout->message (_(\"this is a target address %ps.\\n\"),\n+\t\t\t styled_string (address_style.style (),\n+\t\t\t\t\tpaddress (gdbarch, pc)));\n+\n+     Note that these all \"abuse\" the %p printf format spec, in order\n+     to be compatible with GCC's printf format checking.  This is OK\n+     because code in GDB that wants to print a host address should use\n+     host_address_to_string instead of %p.  */\n   void message (const char *format, ...) ATTRIBUTE_PRINTF (2, 3);\n+  void vmessage (const ui_file_style &in_style,\n+\t\t const char *format, va_list args) ATTRIBUTE_PRINTF (3, 0);\n+\n   void wrap_hint (const char *identstring);\n \n   void flush ();\n@@ -161,8 +296,9 @@ class ui_out\n     ATTRIBUTE_PRINTF (6,0) = 0;\n   virtual void do_spaces (int numspaces) = 0;\n   virtual void do_text (const char *string) = 0;\n-  virtual void do_message (const char *format, va_list args)\n-    ATTRIBUTE_PRINTF (2,0) = 0;\n+  virtual void do_message (const ui_file_style &style,\n+\t\t\t   const char *format, va_list args)\n+    ATTRIBUTE_PRINTF (3,0) = 0;\n   virtual void do_wrap_hint (const char *identstring) = 0;\n   virtual void do_flush () = 0;\n   virtual void do_redirect (struct ui_file *outstream) = 0;\n@@ -174,6 +310,8 @@ class ui_out\n   { return false; }\n \n  private:\n+  void call_do_message (const ui_file_style &style, const char *format,\n+\t\t\t...);\n \n   ui_out_flags m_flags;\n "
    },
    {
      "sha": "d2e9c1362631ac872c9b423c0f682a95ff15443f",
      "filename": "gdb/ui-style.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/ui-style.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/ui-style.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-style.h?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -223,6 +223,12 @@ struct ui_file_style\n      BUF.  */\n   bool parse (const char *buf, size_t *n_read);\n \n+  /* We need this because we can't pass a reference via va_args.  */\n+  const ui_file_style *ptr () const\n+  {\n+    return this;\n+  }\n+\n private:\n \n   color m_foreground = NONE;"
    },
    {
      "sha": "ed83d9670fd1d36c33bb07497fb46e68fea94314",
      "filename": "gdb/unittests/format_pieces-selftests.c",
      "status": "modified",
      "additions": 26,
      "deletions": 9,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/unittests/format_pieces-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/unittests/format_pieces-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/format_pieces-selftests.c?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -27,9 +27,10 @@ namespace format_pieces {\n /* Verify that parsing STR gives pieces equal to EXPECTED_PIECES.  */\n \n static void\n-check (const char *str, const std::vector<format_piece> &expected_pieces)\n+check (const char *str, const std::vector<format_piece> &expected_pieces,\n+       bool gdb_format = false)\n {\n-  ::format_pieces pieces (&str);\n+  ::format_pieces pieces (&str, gdb_format);\n \n   SELF_CHECK ((pieces.end () - pieces.begin ()) == expected_pieces.size ());\n   SELF_CHECK (std::equal (pieces.begin (), pieces.end (),\n@@ -41,7 +42,7 @@ test_escape_sequences ()\n {\n   check (\"This is an escape sequence: \\\\e\",\n     {\n-      format_piece (\"This is an escape sequence: \\e\", literal_piece),\n+      format_piece (\"This is an escape sequence: \\e\", literal_piece, 0),\n     });\n }\n \n@@ -50,21 +51,37 @@ test_format_specifier ()\n {\n   /* The format string here ends with a % sequence, to ensure we don't\n      see a trailing empty literal piece.  */\n-  check (\"Hello %d%llx%%d%d\", /* ARI: %ll */\n+  check (\"Hello\\\\t %d%llx%%d%d\", /* ARI: %ll */\n     {\n-      format_piece (\"Hello \", literal_piece),\n-      format_piece (\"%d\", int_arg),\n-      format_piece (\"%llx\", long_long_arg), /* ARI: %ll */\n-      format_piece (\"%%d\", literal_piece),\n-      format_piece (\"%d\", int_arg),\n+      format_piece (\"Hello\\t \", literal_piece, 0),\n+      format_piece (\"%d\", int_arg, 0),\n+      format_piece (\"%llx\", long_long_arg, 0), /* ARI: %ll */\n+      format_piece (\"%%d\", literal_piece, 0),\n+      format_piece (\"%d\", int_arg, 0),\n     });\n }\n \n+static void\n+test_gdb_formats ()\n+{\n+  check (\"Hello\\\\t \\\"%p[%pF%ps%*.*d%p]\\\"\",\n+    {\n+      format_piece (\"Hello\\\\t \\\"\", literal_piece, 0),\n+      format_piece (\"%p[\", ptr_arg, 0),\n+      format_piece (\"%pF\", ptr_arg, 0),\n+      format_piece (\"%ps\", ptr_arg, 0),\n+      format_piece (\"%*.*d\", int_arg, 2),\n+      format_piece (\"%p]\", ptr_arg, 0),\n+      format_piece (\"\\\"\", literal_piece, 0),\n+    }, true);\n+}\n+\n static void\n run_tests ()\n {\n   test_escape_sequences ();\n   test_format_specifier ();\n+  test_gdb_formats ();\n }\n \n } /* namespace format_pieces */"
    },
    {
      "sha": "e685cc2084733b3411489f80d23242f7556d20a4",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 70,
      "deletions": 11,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -73,13 +73,15 @@\n #include \"cli/cli-style.h\"\n #include \"gdbsupport/scope-exit.h\"\n #include \"gdbarch.h\"\n+#include \"cli-out.h\"\n \n void (*deprecated_error_begin_hook) (void);\n \n /* Prototypes for local functions */\n \n static void vfprintf_maybe_filtered (struct ui_file *, const char *,\n-\t\t\t\t     va_list, int) ATTRIBUTE_PRINTF (2, 0);\n+\t\t\t\t     va_list, bool, bool)\n+  ATTRIBUTE_PRINTF (2, 0);\n \n static void fputs_maybe_filtered (const char *, struct ui_file *, int);\n \n@@ -1854,6 +1856,24 @@ fputs_styled (const char *linebuffer, const ui_file_style &style,\n \n /* See utils.h.  */\n \n+void\n+fputs_styled_unfiltered (const char *linebuffer, const ui_file_style &style,\n+\t\t\t struct ui_file *stream)\n+{\n+  /* This just makes it so we emit somewhat fewer escape\n+     sequences.  */\n+  if (style.is_default ())\n+    fputs_maybe_filtered (linebuffer, stream, 0);\n+  else\n+    {\n+      set_output_style (stream, style);\n+      fputs_maybe_filtered (linebuffer, stream, 0);\n+      set_output_style (stream, ui_file_style ());\n+    }\n+}\n+\n+/* See utils.h.  */\n+\n void\n fputs_highlighted (const char *str, const compiled_regex &highlight,\n \t\t   struct ui_file *stream)\n@@ -2021,34 +2041,46 @@ puts_debug (char *prefix, char *string, char *suffix)\n    We implement three variants, vfprintf (takes a vararg list and stream),\n    fprintf (takes a stream to write on), and printf (the usual).\n \n-   Note also that a longjmp to top level may occur in this routine\n-   (since prompt_for_continue may do so) so this routine should not be\n-   called when cleanups are not in place.  */\n+   Note also that this may throw a quit (since prompt_for_continue may\n+   do so).  */\n \n static void\n vfprintf_maybe_filtered (struct ui_file *stream, const char *format,\n-\t\t\t va_list args, int filter)\n+\t\t\t va_list args, bool filter, bool gdbfmt)\n {\n-  std::string linebuffer = string_vprintf (format, args);\n-  fputs_maybe_filtered (linebuffer.c_str (), stream, filter);\n+  if (gdbfmt)\n+    {\n+      ui_out_flags flags = disallow_ui_out_field;\n+      if (!filter)\n+\tflags |= unfiltered_output;\n+      cli_ui_out (stream, flags).vmessage (applied_style, format, args);\n+    }\n+  else\n+    {\n+      std::string str = string_vprintf (format, args);\n+      fputs_maybe_filtered (str.c_str (), stream, filter);\n+    }\n }\n \n \n void\n vfprintf_filtered (struct ui_file *stream, const char *format, va_list args)\n {\n-  vfprintf_maybe_filtered (stream, format, args, 1);\n+  vfprintf_maybe_filtered (stream, format, args, true, true);\n }\n \n void\n vfprintf_unfiltered (struct ui_file *stream, const char *format, va_list args)\n {\n-  std::string linebuffer = string_vprintf (format, args);\n   if (debug_timestamp && stream == gdb_stdlog)\n     {\n       using namespace std::chrono;\n       int len, need_nl;\n \n+      string_file sfile;\n+      cli_ui_out (&sfile, 0).vmessage (ui_file_style (), format, args);\n+      std::string linebuffer = std::move (sfile.string ());\n+\n       steady_clock::time_point now = steady_clock::now ();\n       seconds s = duration_cast<seconds> (now.time_since_epoch ());\n       microseconds us = duration_cast<microseconds> (now.time_since_epoch () - s);\n@@ -2064,13 +2096,13 @@ vfprintf_unfiltered (struct ui_file *stream, const char *format, va_list args)\n       fputs_unfiltered (timestamp.c_str (), stream);\n     }\n   else\n-    fputs_unfiltered (linebuffer.c_str (), stream);\n+    vfprintf_maybe_filtered (stream, format, args, false, true);\n }\n \n void\n vprintf_filtered (const char *format, va_list args)\n {\n-  vfprintf_maybe_filtered (gdb_stdout, format, args, 1);\n+  vfprintf_maybe_filtered (gdb_stdout, format, args, true, false);\n }\n \n void\n@@ -2130,6 +2162,33 @@ fprintf_styled (struct ui_file *stream, const ui_file_style &style,\n   set_output_style (stream, ui_file_style ());\n }\n \n+/* See utils.h.  */\n+\n+void\n+vfprintf_styled (struct ui_file *stream, const ui_file_style &style,\n+\t\t const char *format, va_list args)\n+{\n+  set_output_style (stream, style);\n+  vfprintf_filtered (stream, format, args);\n+  set_output_style (stream, ui_file_style ());\n+}\n+\n+/* See utils.h.  */\n+\n+void\n+vfprintf_styled_no_gdbfmt (struct ui_file *stream, const ui_file_style &style,\n+\t\t\t   bool filter, const char *format, va_list args)\n+{\n+  std::string str = string_vprintf (format, args);\n+  if (!str.empty ())\n+    {\n+      if (!style.is_default ())\n+\tset_output_style (stream, style);\n+      fputs_maybe_filtered (str.c_str (), stream, filter);\n+      if (!style.is_default ())\n+\tset_output_style (stream, ui_file_style ());\n+    }\n+}\n \n void\n printf_filtered (const char *format, ...)"
    },
    {
      "sha": "76f0da69f712bce7f5559a37c4182d83d5352d8c",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 24,
      "deletions": 1,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "patch": "@@ -350,7 +350,10 @@ extern struct ui_file *gdb_stdtargin;\n extern void set_screen_width_and_height (int width, int height);\n \n /* More generic printf like operations.  Filtered versions may return\n-   non-locally on error.  */\n+   non-locally on error.  As an extension over plain printf, these\n+   support some GDB-specific format specifiers.  Particularly useful\n+   here are the styling formatters: '%p[', '%p]' and '%ps'.  See\n+   ui_out::message for details.  */\n \n extern void fputs_filtered (const char *, struct ui_file *);\n \n@@ -430,13 +433,33 @@ extern void fprintf_styled (struct ui_file *stream,\n \t\t\t    ...)\n   ATTRIBUTE_PRINTF (3, 4);\n \n+extern void vfprintf_styled (struct ui_file *stream,\n+\t\t\t     const ui_file_style &style,\n+\t\t\t     const char *fmt,\n+\t\t\t     va_list args)\n+  ATTRIBUTE_PRINTF (3, 0);\n+\n+/* Like vfprintf_styled, but do not process gdb-specific format\n+   specifiers.  */\n+extern void vfprintf_styled_no_gdbfmt (struct ui_file *stream,\n+\t\t\t\t       const ui_file_style &style,\n+\t\t\t\t       bool filter,\n+\t\t\t\t       const char *fmt, va_list args)\n+  ATTRIBUTE_PRINTF (4, 0);\n+\n /* Like fputs_filtered, but styles the output according to STYLE, when\n    appropriate.  */\n \n extern void fputs_styled (const char *linebuffer,\n \t\t\t  const ui_file_style &style,\n \t\t\t  struct ui_file *stream);\n \n+/* Unfiltered variant of fputs_styled.  */\n+\n+extern void fputs_styled_unfiltered (const char *linebuffer,\n+\t\t\t\t     const ui_file_style &style,\n+\t\t\t\t     struct ui_file *stream);\n+\n /* Like fputs_styled, but uses highlight_style to highlight the\n    parts of STR that match HIGHLIGHT.  */\n "
    }
  ]
}