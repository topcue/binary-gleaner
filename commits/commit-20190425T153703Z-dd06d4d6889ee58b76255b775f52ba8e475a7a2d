{
  "sha": "dd06d4d6889ee58b76255b775f52ba8e475a7a2d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGQwNmQ0ZDY4ODllZTU4Yjc2MjU1Yjc3NWY1MmJhOGU0NzVhN2EyZA==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-04-12T15:36:51Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-04-25T15:37:03Z"
    },
    "message": "testsuite: Add option to capture gdbserver debug\n\nAdd both board option and environment variable which enables gdbserver\ndebug and sends it to the file gdbserver.debug, located in the output\ndirectory for the current test.  Document this.\n\nAdd support for the environment variable in the Makefile.\n\nThe testsuite can be run with gdbserver debug enabled in the following way:\n\n\tmake check GDBSERVER_DEBUG=all\n\nDisable tspeed.exp when debugging to prevent the log file filling\nmany gigabytes then timing out.\n\ngdb/testsuite/ChangeLog:\n\n\t* Makefile.in: Pass through GDBSERVER_DEBUG.\n        * README (Testsuite Parameters): Add GDBSERVER_DEBUG.\n        (gdbserver,debug): Add board setting.\n        * gdb.trace/tspeed.exp: Skip when debugging.\n\t* lib/gdb.exp (gdbserver_debug_enabled): New procedure.\n\t* lib/gdbserver-support.exp: Likewise",
    "tree": {
      "sha": "76beeb6ca041398cc0e7d01c7f96af3d940e13d1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/76beeb6ca041398cc0e7d01c7f96af3d940e13d1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dd06d4d6889ee58b76255b775f52ba8e475a7a2d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd06d4d6889ee58b76255b775f52ba8e475a7a2d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dd06d4d6889ee58b76255b775f52ba8e475a7a2d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6fe014bcd33686cb75e6355f9c36ce483a64ec62",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6fe014bcd33686cb75e6355f9c36ce483a64ec62",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6fe014bcd33686cb75e6355f9c36ce483a64ec62"
    }
  ],
  "stats": {
    "total": 84,
    "additions": 82,
    "deletions": 2
  },
  "files": [
    {
      "sha": "ce3ebbc4c77f5b46ad5220d7cbcd90925a382cac",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=dd06d4d6889ee58b76255b775f52ba8e475a7a2d",
      "patch": "@@ -1,3 +1,12 @@\n+2019-04-25  Alan Hayward  <alan.hayward@arm.com>\n+\n+        * Makefile.in: Pass through GDBSERVER_DEBUG.\n+        * README (Testsuite Parameters): Add GDBSERVER_DEBUG.\n+        (gdbserver,debug): Add board setting.\n+        * gdb.trace/tspeed.exp: Skip when debugging.\n+        * lib/gdb.exp (gdbserver_debug_enabled): New procedure.\n+        * lib/gdbserver-support.exp: Likewise\n+\n 2019-04-24  Tom Tromey  <tromey@adacore.com>\n \n \t* lib/gdb.exp (gdb_compile): Don't add -fno-stack-protector for"
    },
    {
      "sha": "8d46fe15be4128af4cb7bd260c3563b7b11737f6",
      "filename": "gdb/testsuite/Makefile.in",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/Makefile.in?ref=dd06d4d6889ee58b76255b775f52ba8e475a7a2d",
      "patch": "@@ -52,6 +52,8 @@ RUNTESTFLAGS =\n \n FORCE_PARALLEL =\n \n+GDBSERVER_DEBUG =\n+\n # Default number of iterations that we will use to run the testsuite\n # if the user does not specify the RACY_ITER environment variable\n # (e.g., when the user calls the make rule directly from the command\n@@ -162,13 +164,15 @@ check-read1:\n # status.\n TIMESTAMP = $(if $(TS),| $(srcdir)/print-ts.py $(if $(TS_FORMAT),$(TS_FORMAT),),)\n \n+gdbserver_debug = $(if $(GDBSERVER_DEBUG),GDBSERVER_DEBUG=$(GDBSERVER_DEBUG) ; export GDBSERVER_DEBUG ;,)\n+\n # All the hair to invoke dejagnu.  A given invocation can just append\n # $(RUNTESTFLAGS)\n DO_RUNTEST = \\\n \trootme=`pwd`; export rootme; \\\n \tsrcdir=${srcdir} ; export srcdir ; \\\n \tEXPECT=${EXPECT} ; export EXPECT ; \\\n-\tEXEEXT=${EXEEXT} ; export EXEEXT ; \\\n+\tEXEEXT=${EXEEXT} ; export EXEEXT ; $(gdbserver_debug) \\\n         $(RPATH_ENVVAR)=$$rootme/../../expect:$$rootme/../../libstdc++:$$rootme/../../tk/unix:$$rootme/../../tcl/unix:$$rootme/../../bfd:$$rootme/../../opcodes:$$$(RPATH_ENVVAR); \\\n \texport $(RPATH_ENVVAR); \\\n \tif [ -f $${rootme}/../../expect/expect ] ; then  \\"
    },
    {
      "sha": "99d574511d2a14d18828e7382c0395c1e1089325",
      "filename": "gdb/testsuite/README",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/README",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/README",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/README?ref=dd06d4d6889ee58b76255b775f52ba8e475a7a2d",
      "patch": "@@ -293,6 +293,17 @@ can do:\n \n \tmake check TS=1 TS_FORMAT='[%b %H:%S]'\n \n+GDBSERVER_DEBUG\n+\n+When set gdbserver debug is sent to the file gdbserver.debug in the test\n+output directory.  Valid values are:\n+\tdebug  - turn on gdbserver debug.\n+\tremote - turn on gdbserver remote debug.\n+\tall - turn on all the above debug options.\n+For example, to turn on all gdbserver debugging, you can do:\n+\n+\tmake check GDBSERVER_DEBUG=all\n+\n Race detection\n **************\n \n@@ -497,6 +508,14 @@ gdb,nopie_flag\n   The flag required to force the compiler to produce non-position-independent\n   executables.\n \n+gdbserver,debug\n+\n+  When set gdbserver debug is sent to the file gdbserver.debug in the test\n+  output directory.  Valid values are:\n+  \"debug\"  - turn on gdbserver debug.\n+  \"remote\" - turn on gdbserver remote debug.\n+  \"all\" - turn on all the above debug options.\n+\n Testsuite Organization\n **********************\n "
    },
    {
      "sha": "9afec64acf8d401d2aa97ed7f2a6ad36187620fa",
      "filename": "gdb/testsuite/gdb.trace/tspeed.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/gdb.trace/tspeed.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/gdb.trace/tspeed.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.trace/tspeed.exp?ref=dd06d4d6889ee58b76255b775f52ba8e475a7a2d",
      "patch": "@@ -19,6 +19,11 @@ if {[skip_shlib_tests]} {\n     return 0\n }\n \n+# Do not run if gdbsever debug is enabled - the output file is many Gb.\n+if [gdbserver_debug_enabled] {\n+    return 0\n+}\n+\n standard_testfile\n set executable $testfile\n "
    },
    {
      "sha": "f0f43342e62ee5365468b59dbccb2c2730f6c599",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=dd06d4d6889ee58b76255b775f52ba8e475a7a2d",
      "patch": "@@ -6362,5 +6362,12 @@ proc gdb_supported_languages {} {\n \t\topencl rust minimal ada]\n }\n \n+# Check if debugging is enabled for gdbserver.\n+\n+proc gdbserver_debug_enabled { } {\n+    # Always disabled for GDB only setups.\n+    return 0\n+}\n+\n # Always load compatibility stuff.\n load_lib future.exp"
    },
    {
      "sha": "164a1d1d3cd80c2ca213e3a545925908e77eedf2",
      "filename": "gdb/testsuite/lib/gdbserver-support.exp",
      "status": "modified",
      "additions": 37,
      "deletions": 1,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/lib/gdbserver-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd06d4d6889ee58b76255b775f52ba8e475a7a2d/gdb/testsuite/lib/gdbserver-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdbserver-support.exp?ref=dd06d4d6889ee58b76255b775f52ba8e475a7a2d",
      "patch": "@@ -283,12 +283,26 @@ proc gdbserver_start { options arguments } {\n \t# If gdbserver_reconnect will be called $gdbserver_reconnect_p must be\n \t# set to true already during gdbserver_start.\n \tglobal gdbserver_reconnect_p\n+\tglobal srcdir\n+\tglobal subdir\n \tif {![info exists gdbserver_reconnect_p] || !$gdbserver_reconnect_p} {\n \t    # GDB client could accidentally connect to a stale server.\n-\t    # append gdbserver_command \" --debug --once\"\n \t    append gdbserver_command \" --once\"\n \t}\n \n+\t# Enable debug if set.\n+\tif [gdbserver_debug_enabled] {\n+\t    global gdbserverdebug\n+\t    set debugfile [standard_output_file gdbserver.debug]\n+\t    if { $gdbserverdebug == \"debug\" } {\n+\t\tappend gdbserver_command \" --debug --debug-file=$debugfile\"\n+\t    } elseif { $gdbserverdebug == \"remote\" } {\n+\t\tappend gdbserver_command \" --remote-debug --debug-file=$debugfile\"\n+\t    } elseif { $gdbserverdebug == \"all\" } {\n+\t\tappend gdbserver_command \" --debug --remote-debug --debug-file=$debugfile\"\n+\t    }\n+\t}\n+\n \tif { $options != \"\" } {\n \t    append gdbserver_command \" $options\"\n \t}\n@@ -561,3 +575,25 @@ proc mi_gdbserver_start_multi { } {\n \n     return [mi_gdb_target_cmd $gdbserver_protocol $gdbserver_gdbport]\n }\n+\n+# Check if debugging is enabled for gdbserver.\n+\n+proc gdbserver_debug_enabled { } {\n+    global gdbserverdebug\n+\n+    # If not already read, get the debug setting from environment or board setting.\n+    if ![info exists gdbserverdebug] {\n+\tglobal env\n+\tif [info exists env(GDBSERVER_DEBUG)] {\n+\t    set gdbserverdebug $env(GDBSERVER_DEBUG)\n+\t} elseif [target_info exists gdbserver,debug] {\n+\t    set gdbserverdebug [target_info gdbserver,debug]\n+\t} else {\n+\t    return 0\n+\t}\n+    }\n+\n+    # Only return success on valid values.\n+    return [expr { $gdbserverdebug == \"debug\" || $gdbserverdebug == \"remote\"\n+\t\t   || $gdbserverdebug == \"all\" }]\n+}"
    }
  ]
}