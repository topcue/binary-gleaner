{
  "sha": "804de1faf4f667bbca5b9ff38dcfe37493052098",
  "node_id": "C_kwDOANOeidoAKDgwNGRlMWZhZjRmNjY3YmJjYTViOWZmMzhkY2ZlMzc0OTMwNTIwOTg",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-26T05:04:31Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-29T02:55:15Z"
    },
    "message": "sim: testsuite: support parallel execution\n\nBreak up the dejagnu logic so that we can parallelize the testsuite.\nThis takes a page from gcc & gdb where each .exp is run in isolation\ninstead of in serial.\n\nFor most targets, this doesn't make much of a difference as they only\nhave a single .exp.  A few (like cris & frv) have multiple .exp though\nand will see a bit of a speed up.\n\nThe real gain is when testing a multitarget build.  This way we can\nrun all the targets in parallel and cut the execution time a bit.\nOn my system, it goes from ~155sec to ~100sec.\n\nWe can gain further speedups by splitting up some of the larger .exp\nfiles into smaller groups.  We'll do that in a followup though.",
    "tree": {
      "sha": "be018afc522a301d9518ff9f0e776b17cd52505e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/be018afc522a301d9518ff9f0e776b17cd52505e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/804de1faf4f667bbca5b9ff38dcfe37493052098",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/804de1faf4f667bbca5b9ff38dcfe37493052098",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/804de1faf4f667bbca5b9ff38dcfe37493052098",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/804de1faf4f667bbca5b9ff38dcfe37493052098/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7a259895bb2d92a6e44a1ca5b8729afed88ed579",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a259895bb2d92a6e44a1ca5b8729afed88ed579",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7a259895bb2d92a6e44a1ca5b8729afed88ed579"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 80,
    "deletions": 10
  },
  "files": [
    {
      "sha": "ff36e2d3186ba36d1554f86e54c02c2b167eccee",
      "filename": "sim/Makefile.in",
      "status": "modified",
      "additions": 40,
      "deletions": 5,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/804de1faf4f667bbca5b9ff38dcfe37493052098/sim/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/804de1faf4f667bbca5b9ff38dcfe37493052098/sim/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/Makefile.in?ref=804de1faf4f667bbca5b9ff38dcfe37493052098",
      "patch": "@@ -1442,8 +1442,14 @@ EXTRA_DEJAGNU_SITE_CONFIG = site-sim-config.exp\n # Custom verbose test variables that automake doesn't provide (yet?).\n AM_V_RUNTEST = $(AM_V_RUNTEST_@AM_V@)\n AM_V_RUNTEST_ = $(AM_V_RUNTEST_@AM_DEFAULT_V@)\n-AM_V_RUNTEST_0 = @echo \"  RUNTEST  $(RUNTESTFLAGS)\";\n+AM_V_RUNTEST_0 = @echo \"  RUNTEST  $(RUNTESTFLAGS) $*\";\n AM_V_RUNTEST_1 = \n+DO_RUNTEST = \\\n+\tLC_ALL=C; export LC_ALL; \\\n+\tEXPECT=${EXPECT} ; export EXPECT ; \\\n+\truntest=$(RUNTEST); \\\n+\t$$runtest $(RUNTESTFLAGS)\n+\n testsuite_common_CPPFLAGS = \\\n \t-I$(srcdir)/common \\\n \t-I$(srcroot)/include \\\n@@ -2802,14 +2808,43 @@ site-sim-config.exp: Makefile\n \t$(foreach V,$(SIM_TOOLCHAIN_VARS),echo \"set $(V) \\\"$($(V))\\\"\";) \\\n \t) > $@\n \n+# Ignore dirs that only contain configuration settings.\n+check/./config/%.exp: ; @true\n+check/./lib/%.exp: ; @true\n+\n+check/%.exp:\n+\t$(AM_V_at)mkdir -p testsuite/$*\n+\t$(AM_V_RUNTEST)$(DO_RUNTEST) --objdir testsuite/$* --outdir testsuite/$* $*.exp\n+\n+check-DEJAGNU-parallel:\n+\t$(AM_V_at)( \\\n+\t$(MAKE) -k \\\n+\t  `cd $(srcdir)/testsuite && find . -name '*.exp' -printf 'check/%p '`; \\\n+\tret=$$?; \\\n+\t$(SHELL) $(srcroot)/contrib/dg-extract-results.sh \\\n+\t  `find testsuite/ -maxdepth 4 -name testrun.sum | sort` > testrun.sum; \\\n+\t$(SHELL) $(srcroot)/contrib/dg-extract-results.sh -L \\\n+\t  `find testsuite/ -maxdepth 4 -name testrun.log | sort` > testrun.log; \\\n+\techo; \\\n+\t$(SED) -n '/^.*===.*Summary.*===/,$$p' testrun.sum; \\\n+\texit $$ret)\n+\n+check-DEJAGNU-single:\n+\t$(AM_V_RUNTEST)$(DO_RUNTEST)\n+\n+# If running a single job, invoking runtest once is faster & has nicer output.\n check-DEJAGNU: site.exp\n-\t$(AM_V_RUNTEST)LC_ALL=C; export LC_ALL; \\\n+\t$(AM_V_at)(set -e; \\\n \tEXPECT=${EXPECT} ; export EXPECT ; \\\n \truntest=$(RUNTEST); \\\n \tif $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n-\t  $$runtest $(RUNTESTFLAGS); \\\n-\telse echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n-\tfi\n+\t  case \"$(MAKEFLAGS)\" in \\\n+\t  *-j*) $(MAKE) check-DEJAGNU-parallel;; \\\n+\t  *)    $(MAKE) check-DEJAGNU-single;; \\\n+\t  esac; \\\n+\telse \\\n+\t  echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n+\tfi)\n \n # These tests are build-time only tools.  Override the default rules for them.\n testsuite/common/%.o: testsuite/common/%.c"
    },
    {
      "sha": "5061a677e323db4a33135d3453b39d6f10721b6f",
      "filename": "sim/testsuite/local.mk",
      "status": "modified",
      "additions": 40,
      "deletions": 5,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/804de1faf4f667bbca5b9ff38dcfe37493052098/sim/testsuite/local.mk",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/804de1faf4f667bbca5b9ff38dcfe37493052098/sim/testsuite/local.mk",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/local.mk?ref=804de1faf4f667bbca5b9ff38dcfe37493052098",
      "patch": "@@ -21,7 +21,7 @@ EXTRA_DEJAGNU_SITE_CONFIG = site-sim-config.exp\n # Custom verbose test variables that automake doesn't provide (yet?).\n AM_V_RUNTEST = $(AM_V_RUNTEST_@AM_V@)\n AM_V_RUNTEST_ = $(AM_V_RUNTEST_@AM_DEFAULT_V@)\n-AM_V_RUNTEST_0 =  @echo \"  RUNTEST  $(RUNTESTFLAGS)\";\n+AM_V_RUNTEST_0 =  @echo \"  RUNTEST  $(RUNTESTFLAGS) $*\";\n AM_V_RUNTEST_1 =\n \n site-sim-config.exp: Makefile\n@@ -32,14 +32,49 @@ site-sim-config.exp: Makefile\n \t$(foreach V,$(SIM_TOOLCHAIN_VARS),echo \"set $(V) \\\"$($(V))\\\"\";) \\\n \t) > $@\n \n+DO_RUNTEST = \\\n+\tLC_ALL=C; export LC_ALL; \\\n+\tEXPECT=${EXPECT} ; export EXPECT ; \\\n+\truntest=$(RUNTEST); \\\n+\t$$runtest $(RUNTESTFLAGS)\n+\n+# Ignore dirs that only contain configuration settings.\n+check/./config/%.exp: ; @true\n+check/./lib/%.exp: ; @true\n+\n+check/%.exp:\n+\t$(AM_V_at)mkdir -p testsuite/$*\n+\t$(AM_V_RUNTEST)$(DO_RUNTEST) --objdir testsuite/$* --outdir testsuite/$* $*.exp\n+\n+check-DEJAGNU-parallel:\n+\t$(AM_V_at)( \\\n+\t$(MAKE) -k \\\n+\t  `cd $(srcdir)/testsuite && find . -name '*.exp' -printf 'check/%p '`; \\\n+\tret=$$?; \\\n+\t$(SHELL) $(srcroot)/contrib/dg-extract-results.sh \\\n+\t  `find testsuite/ -maxdepth 4 -name testrun.sum | sort` > testrun.sum; \\\n+\t$(SHELL) $(srcroot)/contrib/dg-extract-results.sh -L \\\n+\t  `find testsuite/ -maxdepth 4 -name testrun.log | sort` > testrun.log; \\\n+\techo; \\\n+\t$(SED) -n '/^.*===.*Summary.*===/,$$p' testrun.sum; \\\n+\texit $$ret)\n+\n+check-DEJAGNU-single:\n+\t$(AM_V_RUNTEST)$(DO_RUNTEST)\n+\n+# If running a single job, invoking runtest once is faster & has nicer output.\n check-DEJAGNU: site.exp\n-\t$(AM_V_RUNTEST)LC_ALL=C; export LC_ALL; \\\n+\t$(AM_V_at)(set -e; \\\n \tEXPECT=${EXPECT} ; export EXPECT ; \\\n \truntest=$(RUNTEST); \\\n \tif $(SHELL) -c \"$$runtest --version\" > /dev/null 2>&1; then \\\n-\t  $$runtest $(RUNTESTFLAGS); \\\n-\telse echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n-\tfi\n+\t  case \"$(MAKEFLAGS)\" in \\\n+\t  *-j*) $(MAKE) check-DEJAGNU-parallel;; \\\n+\t  *)    $(MAKE) check-DEJAGNU-single;; \\\n+\t  esac; \\\n+\telse \\\n+\t  echo \"WARNING: could not find \\`runtest'\" 1>&2; :;\\\n+\tfi)\n \n MOSTLYCLEANFILES += \\\n \tsite-sim-config.exp testrun.log testrun.sum"
    }
  ]
}