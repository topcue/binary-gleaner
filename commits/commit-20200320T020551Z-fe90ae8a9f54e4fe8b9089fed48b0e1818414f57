{
  "sha": "fe90ae8a9f54e4fe8b9089fed48b0e1818414f57",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmU5MGFlOGE5ZjU0ZTRmZThiOTA4OWZlZDQ4YjBlMTgxODQxNGY1Nw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-20T00:21:14Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-20T02:05:51Z"
    },
    "message": "NDS32 disassembly of odd sized sections\n\n\t* nds32-dis.c (print_insn_nds32): Remove unnecessary casts.\n\tInitialize parts of buffer not written when handling a possible\n\t2-byte insn at end of section.  Don't attempt decoding of such\n\tan insn by the 4-byte machinery.",
    "tree": {
      "sha": "a1fdf46178a5f8b89534c1d88194d50332f03470",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a1fdf46178a5f8b89534c1d88194d50332f03470"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fe90ae8a9f54e4fe8b9089fed48b0e1818414f57",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe90ae8a9f54e4fe8b9089fed48b0e1818414f57",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fe90ae8a9f54e4fe8b9089fed48b0e1818414f57",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe90ae8a9f54e4fe8b9089fed48b0e1818414f57/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "833d919c93d52644173d587a6fc8e4dd36edc49e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/833d919c93d52644173d587a6fc8e4dd36edc49e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/833d919c93d52644173d587a6fc8e4dd36edc49e"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 22,
    "deletions": 9
  },
  "files": [
    {
      "sha": "2d6af2b5a0c59ece1789262e9e8937e1355e6f15",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe90ae8a9f54e4fe8b9089fed48b0e1818414f57/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe90ae8a9f54e4fe8b9089fed48b0e1818414f57/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=fe90ae8a9f54e4fe8b9089fed48b0e1818414f57",
      "patch": "@@ -1,3 +1,10 @@\n+2020-03-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* nds32-dis.c (print_insn_nds32): Remove unnecessary casts.\n+\tInitialize parts of buffer not written when handling a possible\n+\t2-byte insn at end of section.  Don't attempt decoding of such\n+\tan insn by the 4-byte machinery.\n+\n 2020-03-20  Alan Modra  <amodra@gmail.com>\n \n \t* ppc-dis.c (print_insn_powerpc): Only clear needed bytes of"
    },
    {
      "sha": "35e4ba029176cb4c832dbce82554ba1da3d0bc93",
      "filename": "opcodes/nds32-dis.c",
      "status": "modified",
      "additions": 15,
      "deletions": 9,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe90ae8a9f54e4fe8b9089fed48b0e1818414f57/opcodes/nds32-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe90ae8a9f54e4fe8b9089fed48b0e1818414f57/opcodes/nds32-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/nds32-dis.c?ref=fe90ae8a9f54e4fe8b9089fed48b0e1818414f57",
      "patch": "@@ -985,7 +985,7 @@ print_insn_nds32 (bfd_vma pc, disassemble_info *info)\n   int is_data = FALSE;\n   bfd_boolean found = FALSE;\n   struct nds32_private_data *private_data;\n-  unsigned int size = 16;\n+  unsigned int size;\n   enum map_type mapping_type = MAP_CODE;\n \n   if (info->private_data == NULL)\n@@ -1063,6 +1063,7 @@ print_insn_nds32 (bfd_vma pc, disassemble_info *info)\n \n       /* Fix corner case: there is no next mapping symbol,\n \t let mapping type decides size */\n+      size = 16;\n       if (last_symbol_index + 1 >= info->symtab_size)\n \t{\n \t  if (mapping_type == MAP_DATA0)\n@@ -1096,7 +1097,7 @@ print_insn_nds32 (bfd_vma pc, disassemble_info *info)\n \tsize = (pc & 1) ? 1 : 2;\n \n       /* Read bytes from BFD.  */\n-      info->read_memory_func (pc, (bfd_byte *) buf_data, size, info);\n+      info->read_memory_func (pc, buf_data, size, info);\n       given = 0;\n       given1 = 0;\n       /* Start assembling data.  */\n@@ -1153,16 +1154,20 @@ print_insn_nds32 (bfd_vma pc, disassemble_info *info)\n       return size;\n     }\n \n-  status = info->read_memory_func (pc, (bfd_byte *) buf, 4, info);\n+  size = 4;\n+  status = info->read_memory_func (pc, buf, 4, info);\n   if (status)\n     {\n       /* For the last 16-bit instruction.  */\n-      status = info->read_memory_func (pc, (bfd_byte *) buf, 2, info);\n+      size = 2;\n+      status = info->read_memory_func (pc, buf, 2, info);\n       if (status)\n \t{\n-\t  (*info->memory_error_func)(status, pc, info);\n+\t  (*info->memory_error_func) (status, pc, info);\n \t  return -1;\n \t}\n+      buf[2] = 0;\n+      buf[3] = 0;\n     }\n \n   insn = bfd_getb32 (buf);\n@@ -1174,11 +1179,12 @@ print_insn_nds32 (bfd_vma pc, disassemble_info *info)\n     }\n \n   /* 32-bit instructions.  */\n+  if (size == 4)\n+    print_insn32 (pc, info, insn, NDS32_PARSE_INSN32);\n   else\n-    {\n-      print_insn32 (pc, info, insn, NDS32_PARSE_INSN32);\n-      return 4;\n-    }\n+    info->fprintf_func (info->stream,\n+\t\t\t_(\"insufficient data to decode instruction\"));\n+  return 4;\n }\n \n /* Ignore disassembling unnecessary name.  */"
    }
  ]
}