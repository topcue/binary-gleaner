{
  "sha": "1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWZmNmRlMDMxMjQxYzU5ZDBmZjlmYTAxZDNjMGE0MDQ5YjBlOTdjOQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-07-13T21:38:00Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-10-03T16:04:56Z"
    },
    "message": "bfd, ld: add CTF section linking\n\nThis is quite complicated because the CTF section's contents depend on\nthe final contents of the symtab and strtab, because it has two sections\nwhose contents are shuffled to be in 1:1 correspondence with the symtab,\nand an internal strtab that gets deduplicated against the ELF strtab\n(with offsets adjusted to point into the ELF strtab instead).  It is\nalso compressed if large enough, so its size depends on its contents!\n\nSo we cannot construct it as early as most sections: we cannot even\n*begin* construction until after the symtab and strtab are finalized.\nThankfully there is already one section treated similarly: compressed\ndebugging sections: the only differences are that compressed debugging\nsections have extra handling to deal with their changing name if\ncompressed (CTF sections are always called \".ctf\" for now, though we\nhave reserved \".ctf.*\" against future use), and that compressed\ndebugging sections have previously-uncompressed content which has to be\nstashed away for later compression, while CTF sections have no content\nat all until we generate it (very late).\n\nBFD also cannot do the link itself: libctf knows how to do it, and BFD\ncannot call libctf directly because libctf already depends on bfd for\nfile I/O.  So we have to use a pair of callbacks, one, examine_strtab,\nwhich allows a caller to examine the symtab and strtab after\nfinalization (called from elf_link_swap_symbols_out(), right before the\nsymtabs are written, and after the strtab has been finalized), and one\nwhich actually does the emission (called emit_ctf simply because it is\ngrouped with a bunch of section-specific late-emission function calls at\nthe bottom of bfd_elf_final_link, and a section-specific name seems best\nfor that).  emit_ctf is actually called *twice*: once from lang_process\nif the emulation suggests that this bfd target does not examine the\nsymtab or strtab, and once via a bfd callback if it does.  (This means\nthat non-ELF targets still get CTF emitted, even though the late CTF\nemission stage is never called for them).\n\nv2: merged with non-ELF support patch: slight commit message\n    adjustments.\nv3: do not spend time merging CTF, or crash, if the CTF section is\n    explicitly discarded.  Do not try to merge or compress CTF unless\n    linking.\nv4: add CTF_COMPRESSION_THRESHOLD.  Annul the freed input ctf_file_t's\n    after writeout: set SEC_IN_MEMORY on the output contents so a future\n    bfd enhancement knows it could free it.  Add SEC_LINKER_CREATED |\n    SEC_KEEP to avoid having to add .ctf to the linker script.  Drop\n    now-unnecessary ldlang.h-level elf-bfd.h include and hackery around\n    it.  Adapt to elf32.em->elf.em and elf-generic.em->ldelf*.c\n    changes.\nv5: fix tabdamage.  Drop #inclusions in .h files: include in .c files,\n    .em files, and use struct forwards instead.  Use bfd_section_is_ctf\n    inline function rather than SECTION_IS_CTF macro.  Move a few\n    comments.\n\n\t* Makefile.def (dependencies): all-ld depends on all-libctf.\n\t* Makefile.in: Regenerated.\n\ninclude/\n\t* bfdlink.h (elf_strtab_hash): New forward.\n\t(elf_sym_strtab): Likewise.\n\t(struct bfd_link_callbacks <examine_strtab>): New.\n\t(struct bfd_link_callbacks <emit_ctf>): Likewise.\n\nbfd/\n\t* elf-bfd.h (bfd_section_is_ctf): New inline function.\n\t* elf.c (special_sections_c): Add \".ctf\".\n\t(assign_file_positions_for_non_load_sections): Note that\n\tcompressed debugging sections etc are not assigned here.  Treat\n\tCTF sections like SEC_ELF_COMPRESS sections when is_linker_output:\n\tsh_offset -1.\n\t(assign_file_positions_except_relocs): Likewise.\n\t(find_section_in_list): Note that debugging and CTF sections, as\n\twell as reloc sections, are assigned later.\n\t(_bfd_elf_assign_file_positions_for_non_load): CTF sections get\n\ttheir size and contents updated.\n\t(_bfd_elf_set_section_contents): Skip CTF sections: unlike\n\tcompressed sections, they have no uncompressed content to copy at\n\tthis stage.\n\t* elflink.c (elf_link_swap_symbols_out): Call the examine_strtab\n\tcallback right before the strtab is written out.\n\t(bfd_elf_final_link): Don't cache the section contents of CTF\n\tsections: they are not populated yet.  Call the emit_ctf callback\n\tright at the end, after all the symbols and strings are flushed\n\tout.\n\nld/\n\t* ldlang.h: (struct lang_input_statement_struct): Add the_ctf.\n\t(struct elf_sym_strtab): Add forward.\n\t(struct elf_strtab_hash): Likewise.\n\t(ldlang_ctf_apply_strsym): Declare.\n\t(ldlang_write_ctf_late): Likewise.\n\t* ldemul.h (ldemul_emit_ctf_early): New.\n\t(ldemul_examine_strtab_for_ctf): Likewise.\n\t(ld_emulation_xfer_type) <emit_ctf_early>: Likewise.\n\t(ld_emulation_xfer_type) <examine_strtab_for_ctf>: Likewise.\n\t* ldemul.c (ldemul_emit_ctf_early): New.\n\t(ldemul_examine_strtab_for_ctf): Likewise.\n\t* ldlang.c: Include ctf-api.h.\n\t(CTF_COMPRESSION_THRESHOLD): New.\n\t(ctf_output): New. Initialized in...\n\t(ldlang_open_ctf): ... this new function.  Open all the CTF\n\tsections in the input files: mark them non-loaded and empty\n\tso as not to copy their contents to the output, but linker-created\n\tso the section gets created in the target.\n\t(ldlang_merge_ctf): New, merge types via ctf_link_add_ctf and\n\tctf_link.\n\t(ldlang_ctf_apply_strsym): New, an examine_strtab callback: wrap\n\tldemul_examine_strtab_for_ctf.\n\t(lang_write_ctf): New, write out the CTF section.\n\t(ldlang_write_ctf_late): New, late call via bfd's emit_ctf hook.\n\t(lang_process): Call ldlang_open_ctf, ldlang_merge_ctf, and\n\tlang_write_ctf.\n\t* ldmain.c (link_callbacks): Add ldlang_ctf_apply_strsym,\n\tldlang_write_ctf_late.\n\t* emultempl/aix.em: Add ctf-api.h.\n\t* emultempl/armcoff.em: Likewise.\n\t* emultempl/beos.em: Likewise.\n\t* emultempl/elf.em: Likewise.\n\t* emultempl/generic.em: Likewise.\n\t* emultempl/linux.em: Likewise.\n\t* emultempl/msp430.em: Likewise.\n\t* emultempl/pe.em: Likewise.\n\t* emultempl/pep.em: Likewise.\n\t* emultempl/ticoff.em: Likewise.\n\t* emultempl/vanilla.em: Likewise.\n\t* ldcref.c: Likewise.\n\t* ldctor.c: Likewise.\n\t* ldelf.c: Likewise.\n\t* ldelfgen.c: Likewise.\n\t* ldemul.c: Likewise.\n\t* ldexp.c: Likewise.\n\t* ldfile.c: Likewise.\n\t* ldgram.c: Likewise.\n\t* ldlex.l: Likewise.\n\t* ldmain.c: Likewise.\n\t* ldmisc.c: Likewise.\n\t* ldver.c: Likewise.\n\t* ldwrite.c: Likewise.\n\t* lexsup.c: Likewise.\n\t* mri.c: Likewise.\n\t* pe-dll.c: Likewise.\n\t* plugin.c: Likewise.\n\n\t* ldelfgen.c (ldelf_emit_ctf_early): New.\n\t(ldelf_examine_strtab_for_ctf): tell libctf about the symtab and\n\tstrtab.\n\t(struct ctf_strsym_iter_cb_arg): New, state to do so.\n\t(ldelf_ctf_strtab_iter_cb): New: tell libctf about\n\teach string in the strtab in turn.\n\t(ldelf_ctf_symbols_iter_cb): New, tell libctf\n\tabout each symbol in the symtab in turn.\n\t* ldelfgen.h (struct elf_sym_strtab): Add forward.\n\t(struct elf_strtab_hash): Likewise.\n\t(struct ctf_file): Likewise.\n\t(ldelf_emit_ctf_early): Declare.\n\t(ldelf_examine_strtab_for_ctf): Likewise.\n\t* emultempl/elf-generic.em (LDEMUL_EMIT_CTF_EARLY): Set it.\n\t(LDEMUL_EXAMINE_STRTAB_FOR_CTF): Likewise.\n\t* emultempl/aix.em (ld_${EMULATION_NAME}_emulation): Add\n\temit_ctf_early and examine_strtab_for_ctf, NULL by default.\n\t* emultempl/armcoff.em (ld_${EMULATION_NAME}_emulation): Likewise.\n\t* emultempl/beos.em (ld_${EMULATION_NAME}_emulation): Likewise.\n\t* emultempl/elf.em (ld_${EMULATION_NAME}_emulation): Likewise.\n\t* emultempl/generic.em (ld_${EMULATION_NAME}_emulation): Likewise.\n\t* emultempl/linux.em (ld_${EMULATION_NAME}_emulation): Likewise.\n\t* emultempl/msp430.em (ld_${EMULATION_NAME}_emulation): Likewise.\n\t* emultempl/pe.em (ld_${EMULATION_NAME}_emulation): Likewise.\n\t* emultempl/pep.em (ld_${EMULATION_NAME}_emulation): Likewise.\n\t* emultempl/ticoff.em (ld_${EMULATION_NAME}_emulation): Likewise.\n\t* emultempl/vanilla.em (ld_vanilla_emulation): Likewise.\n\n\t* Makefile.am: Pull in libctf (and zlib, a transitive requirement\n\tfor compressed CTF section emission).  Pass it on to DejaGNU.\n\t* configure.ac: Add AM_ZLIB.\n\t* aclocal.m4: Added zlib.m4.\n\t* Makefile.in: Regenerated.\n\t* testsuite/ld-bootstrap/bootstrap.exp: Use it when relinking ld.",
    "tree": {
      "sha": "734b9336ece9bb2d281c68f0596ba0d1b3b0a8ff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/734b9336ece9bb2d281c68f0596ba0d1b3b0a8ff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "22ccb8495447fa2ea31b1f1dea7e94eecf97475d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22ccb8495447fa2ea31b1f1dea7e94eecf97475d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/22ccb8495447fa2ea31b1f1dea7e94eecf97475d"
    }
  ],
  "stats": {
    "total": 757,
    "additions": 710,
    "deletions": 47
  },
  "files": [
    {
      "sha": "daa456380b2e92a4e380e1bdc7610501b93b31c1",
      "filename": "ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ChangeLog?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* Makefile.def (dependencies): all-ld depends on all-libctf.\n+\t* Makefile.in: Regenerated.\n+\n 2019-09-09  Phil Blundell  <pb@pbcl.net>\n \n \tbinutils 2.33 branch created"
    },
    {
      "sha": "e887f498f4b45476bf31a710760734146a39b0a9",
      "filename": "Makefile.def",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/Makefile.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/Makefile.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/Makefile.def?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -432,6 +432,7 @@ dependencies = { module=all-binutils; on=all-build-bison; };\n dependencies = { module=all-binutils; on=all-intl; };\n dependencies = { module=all-binutils; on=all-gas; };\n dependencies = { module=all-binutils; on=all-libctf; };\n+dependencies = { module=all-ld; on=all-libctf; };\n \n // We put install-opcodes before install-binutils because the installed\n // binutils might be on PATH, and they might need the shared opcodes"
    },
    {
      "sha": "eeba51e8297596254790f73c1c034167fef23621",
      "filename": "Makefile.in",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/Makefile.in?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -51159,6 +51159,13 @@ all-stage3-binutils: maybe-all-stage3-libctf\n all-stage4-binutils: maybe-all-stage4-libctf\n all-stageprofile-binutils: maybe-all-stageprofile-libctf\n all-stagefeedback-binutils: maybe-all-stagefeedback-libctf\n+all-ld: maybe-all-libctf\n+all-stage1-ld: maybe-all-stage1-libctf\n+all-stage2-ld: maybe-all-stage2-libctf\n+all-stage3-ld: maybe-all-stage3-libctf\n+all-stage4-ld: maybe-all-stage4-libctf\n+all-stageprofile-ld: maybe-all-stageprofile-libctf\n+all-stagefeedback-ld: maybe-all-stagefeedback-libctf\n install-binutils: maybe-install-opcodes\n install-strip-binutils: maybe-install-strip-opcodes\n install-opcodes: maybe-install-bfd"
    },
    {
      "sha": "fcb645b16967a35b2eb0e62f097eeed06bb3f8c2",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -1,3 +1,26 @@\n+2019-09-30  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* elf-bfd.h (bfd_section_is_ctf): New inline function.\n+\t* elf.c (special_sections_c): Add \".ctf\".\n+\t(assign_file_positions_for_non_load_sections): Note that\n+\tcompressed debugging sections etc are not assigned here.  Treat\n+\tCTF sections like SEC_ELF_COMPRESS sections when is_linker_output:\n+\tsh_offset -1.\n+\t(assign_file_positions_except_relocs): Likewise.\n+\t(find_section_in_list): Note that debugging and CTF sections, as\n+\twell as reloc sections, are assigned later.\n+\t(_bfd_elf_assign_file_positions_for_non_load): CTF sections get\n+\ttheir size and contents updated.\n+\t(_bfd_elf_set_section_contents): Skip CTF sections: unlike\n+\tcompressed sections, they have no uncompressed content to copy at\n+\tthis stage.\n+\t* elflink.c (elf_link_swap_symbols_out): Call the examine_strtab\n+\tcallback right before the strtab is written out.\n+\t(bfd_elf_final_link): Don't cache the section contents of CTF\n+\tsections: they are not populated yet.  Call the emit_ctf callback\n+\tright at the end, after all the symbols and strings are flushed\n+\tout.\n+\n 2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* elf-strtab.c (_bfd_elf_strtab_len): New."
    },
    {
      "sha": "ccd2c35f871f2b32fe09f3d312d3339b84872545",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -2257,7 +2257,7 @@ extern bfd_size_type _bfd_elf_strtab_len\n extern bfd_size_type _bfd_elf_strtab_offset\n   (struct elf_strtab_hash *, size_t);\n extern const char * _bfd_elf_strtab_str\n-  (struct elf_strtab_hash *, size_t idx, size_t *offset);\n+  (struct elf_strtab_hash *, size_t idx, bfd_size_type *offset);\n extern bfd_boolean _bfd_elf_strtab_emit\n   (bfd *, struct elf_strtab_hash *);\n extern void _bfd_elf_strtab_finalize\n@@ -2965,6 +2965,14 @@ extern asection _bfd_elf_large_com_section;\n \t || (H)->start_stop \\\n \t || ((INFO)->dynamic && !(H)->dynamic)))\n \n+/* Determine if a section contains CTF data, using its name.  */\n+static inline bfd_boolean\n+bfd_section_is_ctf (const asection *sec)\n+{\n+  const char *name = bfd_section_name (sec);\n+  return strncmp (name, \".ctf\", 4) == 0 && (name[4] == 0 || name[4] == '.');\n+}\n+\n #ifdef __cplusplus\n }\n #endif"
    },
    {
      "sha": "cbec4269cf0788431a6a0dc799bc92132673f5ce",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 34,
      "deletions": 11,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -2671,6 +2671,7 @@ static const struct bfd_elf_special_section special_sections_b[] =\n static const struct bfd_elf_special_section special_sections_c[] =\n {\n   { STRING_COMMA_LEN (\".comment\"), 0, SHT_PROGBITS, 0 },\n+  { STRING_COMMA_LEN (\".ctf\"),\t0, SHT_PROGBITS,    0 },\n   { NULL,\t\t\t0, 0, 0,\t    0 }\n };\n \n@@ -5893,7 +5894,8 @@ is_debuginfo_file (bfd *abfd)\n   return TRUE;\n }\n \n-/* Assign file positions for the other sections.  */\n+/* Assign file positions for the other sections, except for compressed debugging\n+   and other sections assigned in _bfd_elf_assign_file_positions_for_non_load().  */\n \n static bfd_boolean\n assign_file_positions_for_non_load_sections (bfd *abfd,\n@@ -5952,9 +5954,12 @@ assign_file_positions_for_non_load_sections (bfd *abfd,\n \t}\n       else if (((hdr->sh_type == SHT_REL || hdr->sh_type == SHT_RELA)\n \t\t&& hdr->bfd_section == NULL)\n+\t       /* We don't know the offset of these sections yet: their size has\n+\t\t  not been decided.  */\n \t       || (hdr->bfd_section != NULL\n-\t\t   && (hdr->bfd_section->flags & SEC_ELF_COMPRESS))\n-\t\t   /* Compress DWARF debug sections.  */\n+\t\t   && (hdr->bfd_section->flags & SEC_ELF_COMPRESS\n+\t\t       || (bfd_section_is_ctf (hdr->bfd_section)\n+\t\t\t   && abfd->is_linker_output)))\n \t       || hdr == i_shdrpp[elf_onesymtab (abfd)]\n \t       || (elf_symtab_shndx_list (abfd) != NULL\n \t\t   && hdr == i_shdrpp[elf_symtab_shndx_list (abfd)->ndx])\n@@ -6222,11 +6227,12 @@ find_section_in_list (unsigned int i, elf_section_list * list)\n    VMAs must be known before this is called.\n \n    Reloc sections come in two flavours: Those processed specially as\n-   \"side-channel\" data attached to a section to which they apply, and\n-   those that bfd doesn't process as relocations.  The latter sort are\n-   stored in a normal bfd section by bfd_section_from_shdr.   We don't\n-   consider the former sort here, unless they form part of the loadable\n-   image.  Reloc sections not assigned here will be handled later by\n+   \"side-channel\" data attached to a section to which they apply, and those that\n+   bfd doesn't process as relocations.  The latter sort are stored in a normal\n+   bfd section by bfd_section_from_shdr.  We don't consider the former sort\n+   here, unless they form part of the loadable image.  Reloc sections not\n+   assigned here (and compressed debugging sections and CTF sections which\n+   nothing else in the file can rely upon) will be handled later by\n    assign_file_positions_for_relocs.\n \n    We also don't set the positions of the .symtab and .strtab here.  */\n@@ -6261,9 +6267,12 @@ assign_file_positions_except_relocs (bfd *abfd,\n \t  hdr = *hdrpp;\n \t  if (((hdr->sh_type == SHT_REL || hdr->sh_type == SHT_RELA)\n \t       && hdr->bfd_section == NULL)\n+\t      /* Do not assign offsets for these sections yet: we don't know\n+\t\t their sizes.  */\n \t      || (hdr->bfd_section != NULL\n-\t\t  && (hdr->bfd_section->flags & SEC_ELF_COMPRESS))\n-\t\t  /* Compress DWARF debug sections.  */\n+\t\t  && (hdr->bfd_section->flags & SEC_ELF_COMPRESS\n+\t\t      || (bfd_section_is_ctf (hdr->bfd_section)\n+\t\t\t  && abfd->is_linker_output)))\n \t      || i == elf_onesymtab (abfd)\n \t      || (elf_symtab_shndx_list (abfd) != NULL\n \t\t  && hdr == i_shdrpp[elf_symtab_shndx_list (abfd)->ndx])\n@@ -6471,10 +6480,12 @@ _bfd_elf_assign_file_positions_for_non_load (bfd *abfd)\n \t  asection *sec = shdrp->bfd_section;\n \t  bfd_boolean is_rel = (shdrp->sh_type == SHT_REL\n \t\t\t\t|| shdrp->sh_type == SHT_RELA);\n+\t  bfd_boolean is_ctf = sec && bfd_section_is_ctf (sec);\n \t  if (is_rel\n+\t      || is_ctf\n \t      || (sec != NULL && (sec->flags & SEC_ELF_COMPRESS)))\n \t    {\n-\t      if (!is_rel)\n+\t      if (!is_rel && !is_ctf)\n \t\t{\n \t\t  const char *name = sec->name;\n \t\t  struct bfd_elf_section_data *d;\n@@ -6520,6 +6531,13 @@ _bfd_elf_assign_file_positions_for_non_load (bfd *abfd)\n \t\t  shdrp->contents = sec->contents;\n \t\t  shdrp->bfd_section->contents = NULL;\n \t\t}\n+\t      else if (is_ctf)\n+\t\t{\n+\t\t  /* Update section size and contents.\t*/\n+\t\t  shdrp->sh_size = sec->size;\n+\t\t  shdrp->contents = sec->contents;\n+\t\t}\n+\n \t      off = _bfd_elf_assign_file_position_for_section (shdrp,\n \t\t\t\t\t\t\t       off,\n \t\t\t\t\t\t\t       TRUE);\n@@ -9099,6 +9117,11 @@ _bfd_elf_set_section_contents (bfd *abfd,\n   hdr = &elf_section_data (section)->this_hdr;\n   if (hdr->sh_offset == (file_ptr) -1)\n     {\n+      if (bfd_section_is_ctf (section))\n+\t/* Nothing to do with this section: the contents are generated\n+\t   later.  */\n+\treturn TRUE;\n+\n       /* We must compress this section.  Write output to the buffer.  */\n       unsigned char *contents = hdr->contents;\n       if ((offset + count) > hdr->sh_size"
    },
    {
      "sha": "371c0969e611b5a36992dbfdf8fc1eb99de4348f",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 18,
      "deletions": 6,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -9539,6 +9539,14 @@ elf_link_swap_symbols_out (struct elf_final_link_info *flinfo)\n \t\t\t\t+ elfsym->destshndx_index));\n     }\n \n+  /* Allow the linker to examine the strtab and symtab now they are\n+     populated.  */\n+\n+  if (flinfo->info->callbacks->examine_strtab)\n+    flinfo->info->callbacks->examine_strtab (hash_table->strtab,\n+\t\t\t\t\t     hash_table->strtabcount,\n+\t\t\t\t\t     flinfo->symstrtab);\n+\n   hdr = &elf_tdata (flinfo->output_bfd)->symtab_hdr;\n   pos = hdr->sh_offset + hdr->sh_size;\n   amt = hash_table->strtabcount * bed->s->sizeof_sym;\n@@ -11810,7 +11818,7 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \n   /* The object attributes have been merged.  Remove the input\n      sections from the link, and set the contents of the output\n-     secton.  */\n+     section.  */\n   std_attrs_section = get_elf_backend_data (abfd)->obj_attrs_section;\n   for (o = abfd->sections; o != NULL; o = o->next)\n     {\n@@ -12032,7 +12040,8 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n       esdo->rel.count = 0;\n       esdo->rela.count = 0;\n \n-      if (esdo->this_hdr.sh_offset == (file_ptr) -1)\n+      if ((esdo->this_hdr.sh_offset == (file_ptr) -1)\n+\t  && !bfd_section_is_ctf (o))\n \t{\n \t  /* Cache the section contents so that they can be compressed\n \t     later.  Use bfd_malloc since it will be freed by\n@@ -12048,10 +12057,10 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \t}\n     }\n \n-  /* We have now assigned file positions for all the sections except\n-     .symtab, .strtab, and non-loaded reloc sections.  We start the\n-     .symtab section at the current file position, and write directly\n-     to it.  We build the .strtab section in memory.  */\n+  /* We have now assigned file positions for all the sections except .symtab,\n+     .strtab, and non-loaded reloc and compressed debugging sections.  We start\n+     the .symtab section at the current file position, and write directly to it.\n+     We build the .strtab section in memory.  */\n   abfd->symcount = 0;\n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   /* sh_name is set in prep_headers.  */\n@@ -12837,6 +12846,9 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n   if (! _bfd_elf_write_section_eh_frame_hdr (abfd, info))\n     goto error_return;\n \n+  if (info->callbacks->emit_ctf)\n+      info->callbacks->emit_ctf ();\n+\n   elf_final_link_free (abfd, &flinfo);\n \n   if (attr_section)"
    },
    {
      "sha": "184cbce1371d8df52b38beac58869bf6a7010e22",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -1,3 +1,10 @@\n+2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* bfdlink.h (elf_strtab_hash): New forward.\n+\t(elf_sym_strtab): Likewise.\n+\t(struct bfd_link_callbacks <examine_strtab>): New.\n+\t(struct bfd_link_callbacks <emit_ctf>): Likewise.\n+\n 2019-07-13  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-api.h (includes): No longer include <sys/param.h>."
    },
    {
      "sha": "76355a3b9537b398d8dc210102a2c0c2514ca710",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -636,6 +636,11 @@ struct bfd_link_info\n   struct bfd_elf_version_tree *version_info;\n };\n \n+/* Some forward-definitions used by some callbacks.  */\n+\n+struct elf_strtab_hash;\n+struct elf_sym_strtab;\n+\n /* This structures holds a set of callback functions.  These are called\n    by the BFD linker routines.  */\n \n@@ -757,6 +762,16 @@ struct bfd_link_callbacks\n     (struct bfd_link_info *, bfd * abfd,\n      asection * current_section, asection * previous_section,\n      bfd_boolean new_segment);\n+  /* This callback provides a chance for callers of the BFD to examine the\n+     ELF string table and symbol table once they are complete and indexes and\n+     offsets assigned.  */\n+  void (*examine_strtab)\n+    (struct elf_sym_strtab *syms, bfd_size_type symcount,\n+     struct elf_strtab_hash *symstrtab);\n+  /* This callback should emit the CTF section into a non-loadable section in\n+     the output BFD named .ctf or a name beginning with \".ctf.\".  */\n+  void (*emit_ctf)\n+    (void);\n };\n \f\n /* The linker builds link_order structures which tell the code how to"
    },
    {
      "sha": "dd0ba4198149f00005214141de5a86124c99ffe3",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 94,
      "deletions": 0,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -1,3 +1,97 @@\n+2019-09-30  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ldlang.h: (struct lang_input_statement_struct): Add the_ctf.\n+\t(struct elf_sym_strtab): Add forward.\n+\t(struct elf_strtab_hash): Likewise.\n+\t(ldlang_ctf_apply_strsym): Declare.\n+\t(ldlang_write_ctf_late): Likewise.\n+\t* ldemul.h (ldemul_emit_ctf_early): New.\n+\t(ldemul_examine_strtab_for_ctf): Likewise.\n+\t(ld_emulation_xfer_type) <emit_ctf_early>: Likewise.\n+\t(ld_emulation_xfer_type) <examine_strtab_for_ctf>: Likewise.\n+\t* ldemul.c (ldemul_emit_ctf_early): New.\n+\t(ldemul_examine_strtab_for_ctf): Likewise.\n+\t* ldlang.c: Include ctf-api.h.\n+\t(CTF_COMPRESSION_THRESHOLD): New.\n+\t(ctf_output): New. Initialized in...\n+\t(ldlang_open_ctf): ... this new function.  Open all the CTF\n+\tsections in the input files: mark them non-loaded and empty\n+\tso as not to copy their contents to the output, but linker-created\n+\tso the section gets created in the target.\n+\t(ldlang_merge_ctf): New, merge types via ctf_link_add_ctf and\n+\tctf_link.\n+\t(ldlang_ctf_apply_strsym): New, an examine_strtab callback: wrap\n+\tldemul_examine_strtab_for_ctf.\n+\t(lang_write_ctf): New, write out the CTF section.\n+\t(ldlang_write_ctf_late): New, late call via bfd's emit_ctf hook.\n+\t(lang_process): Call ldlang_open_ctf, ldlang_merge_ctf, and\n+\tlang_write_ctf.\n+\t* ldmain.c (link_callbacks): Add ldlang_ctf_apply_strsym,\n+\tldlang_write_ctf_late.\n+\t* emultempl/aix.em: Add ctf-api.h.\n+\t* emultempl/armcoff.em: Likewise.\n+\t* emultempl/beos.em: Likewise.\n+\t* emultempl/elf.em: Likewise.\n+\t* emultempl/generic.em: Likewise.\n+\t* emultempl/linux.em: Likewise.\n+\t* emultempl/msp430.em: Likewise.\n+\t* emultempl/pe.em: Likewise.\n+\t* emultempl/pep.em: Likewise.\n+\t* emultempl/ticoff.em: Likewise.\n+\t* emultempl/vanilla.em: Likewise.\n+\t* ldcref.c: Likewise.\n+\t* ldctor.c: Likewise.\n+\t* ldelf.c: Likewise.\n+\t* ldelfgen.c: Likewise.\n+\t* ldemul.c: Likewise.\n+\t* ldexp.c: Likewise.\n+\t* ldfile.c: Likewise.\n+\t* ldgram.c: Likewise.\n+\t* ldlex.l: Likewise.\n+\t* ldmain.c: Likewise.\n+\t* ldmisc.c: Likewise.\n+\t* ldver.c: Likewise.\n+\t* ldwrite.c: Likewise.\n+\t* lexsup.c: Likewise.\n+\t* mri.c: Likewise.\n+\t* pe-dll.c: Likewise.\n+\t* plugin.c: Likewise.\n+\n+\t* ldelfgen.c (ldelf_emit_ctf_early): New.\n+\t(ldelf_examine_strtab_for_ctf): tell libctf about the symtab and\n+\tstrtab.\n+\t(struct ctf_strsym_iter_cb_arg): New, state to do so.\n+\t(ldelf_ctf_strtab_iter_cb): New: tell libctf about\n+\teach string in the strtab in turn.\n+\t(ldelf_ctf_symbols_iter_cb): New, tell libctf\n+\tabout each symbol in the symtab in turn.\n+\t* ldelfgen.h (struct elf_sym_strtab): Add forward.\n+\t(struct elf_strtab_hash): Likewise.\n+\t(struct ctf_file): Likewise.\n+\t(ldelf_emit_ctf_early): Declare.\n+\t(ldelf_examine_strtab_for_ctf): Likewise.\n+\t* emultempl/elf-generic.em (LDEMUL_EMIT_CTF_EARLY): Set it.\n+\t(LDEMUL_EXAMINE_STRTAB_FOR_CTF): Likewise.\n+\t* emultempl/aix.em (ld_${EMULATION_NAME}_emulation): Add\n+\temit_ctf_early and examine_strtab_for_ctf, NULL by default.\n+\t* emultempl/armcoff.em (ld_${EMULATION_NAME}_emulation): Likewise.\n+\t* emultempl/beos.em (ld_${EMULATION_NAME}_emulation): Likewise.\n+\t* emultempl/elf.em (ld_${EMULATION_NAME}_emulation): Likewise.\n+\t* emultempl/generic.em (ld_${EMULATION_NAME}_emulation): Likewise.\n+\t* emultempl/linux.em (ld_${EMULATION_NAME}_emulation): Likewise.\n+\t* emultempl/msp430.em (ld_${EMULATION_NAME}_emulation): Likewise.\n+\t* emultempl/pe.em (ld_${EMULATION_NAME}_emulation): Likewise.\n+\t* emultempl/pep.em (ld_${EMULATION_NAME}_emulation): Likewise.\n+\t* emultempl/ticoff.em (ld_${EMULATION_NAME}_emulation): Likewise.\n+\t* emultempl/vanilla.em (ld_vanilla_emulation): Likewise.\n+\n+\t* Makefile.am: Pull in libctf (and zlib, a transitive requirement\n+\tfor compressed CTF section emission).  Pass it on to DejaGNU.\n+\t* configure.ac: Add AM_ZLIB.\n+\t* aclocal.m4: Added zlib.m4.\n+\t* Makefile.in: Regenerated.\n+\t* testsuite/ld-bootstrap/bootstrap.exp: Use it when relinking ld.\n+\n 2019-10-02  Alan Modra  <amodra@gmail.com>\n \n \t* ld.texi (-Bsymbolic, -Bsymbolic-functions): Don't mention PIEs."
    },
    {
      "sha": "00a2dc946c8c7af2383eea8424bb1457e2ac8153",
      "filename": "ld/Makefile.am",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/Makefile.am?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -34,6 +34,12 @@ LEX = `if [ -f ../flex/flex ]; then echo ../flex/flex; else echo @LEX@; fi`\n am__skiplex =\n am__skipyacc =\n \n+# This is where we get zlib from.  zlibdir is -L../zlib and zlibinc is\n+# -I../zlib, unless we were configured with --with-system-zlib, in which\n+# case both are empty.\n+ZLIB = @zlibdir@ -lz\n+ZLIBINC = @zlibinc@\n+\n ELF_CLFAGS=-DELF_LIST_OPTIONS=@elf_list_options@ \\\n \t   -DELF_SHLIB_LIST_OPTIONS=@elf_shlib_list_options@ \\\n \t   -DELF_PLT_UNWIND_LIST_OPTIONS=@elf_plt_unwind_list_options@\n@@ -145,12 +151,13 @@ AM_MAKEINFOFLAGS = -I $(srcdir) -I $(BFDDIR)/doc -I ../bfd/doc \\\n TEXI2DVI = texi2dvi -I $(srcdir) -I $(BFDDIR)/doc -I ../bfd/doc \\\n \t\t    -I $(top_srcdir)/../libiberty\n \n-AM_CPPFLAGS = -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) \\\n+AM_CPPFLAGS = -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) @zlibinc@ \\\n \t@INCINTL@ $(HDEFINES) $(CFLAGS) $(PLUGIN_CFLAGS) \\\n \t-DLOCALEDIR=\"\\\"$(datadir)/locale\\\"\"\n \n BFDLIB = ../bfd/libbfd.la\n LIBIBERTY = ../libiberty/libiberty.a\n+LIBCTF = ../libctf/libctf.a\n \n # These all start with e so 'make clean' can find them.\n ALL_EMULATION_SOURCES = \\\n@@ -959,8 +966,8 @@ ld_new_SOURCES = ldgram.y ldlex-wrapper.c lexsup.c ldlang.c mri.c ldctor.c ldmai\n \tldwrite.c ldexp.c ldemul.c ldver.c ldmisc.c ldfile.c ldcref.c $(PLUGIN_C) \\\n \tldbuildid.c\n ld_new_DEPENDENCIES = $(EMULATION_OFILES) $(EMUL_EXTRA_OFILES) \\\n-\t\t      $(BFDLIB) $(LIBIBERTY) $(LIBINTL_DEP)\n-ld_new_LDADD = $(EMULATION_OFILES) $(EMUL_EXTRA_OFILES) $(BFDLIB) $(LIBIBERTY) $(LIBINTL)\n+\t\t      $(BFDLIB) $(LIBCTF) $(LIBIBERTY) $(LIBINTL_DEP)\n+ld_new_LDADD = $(EMULATION_OFILES) $(EMUL_EXTRA_OFILES) $(BFDLIB) $(LIBCTF) $(LIBIBERTY) $(LIBINTL) $(ZLIB)\n \n # Dependency tracking for the generated emulation files.\n EXTRA_ld_new_SOURCES += $(ALL_EMULATION_SOURCES) $(ALL_64_EMULATION_SOURCES)\n@@ -979,7 +986,7 @@ check-DEJAGNU: site.exp\n \t\tCC=\"$(CC_FOR_TARGET)\" CFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n \t\tCXX=\"$(CXX_FOR_TARGET)\" CXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n \t\tCC_FOR_HOST=\"$(CC)\" CFLAGS_FOR_HOST=\"$(CFLAGS)\" \\\n-\t\tOFILES=\"$(OFILES)\" BFDLIB=\"$(TESTBFDLIB)\" \\\n+\t\tOFILES=\"$(OFILES)\" BFDLIB=\"$(TESTBFDLIB)\" CTFLIB=\"$(LIBCTF) $(ZLIB)\" \\\n \t\tLIBIBERTY=\"$(LIBIBERTY) $(LIBINTL)\" LIBS=\"$(LIBS)\" \\\n \t\tDO_COMPARE=\"`echo '$(do_compare)' | sed -e 's,\\\\$$,,g'`\" \\\n \t\t$(RUNTESTFLAGS); \\"
    },
    {
      "sha": "8b4753b808bb92f8b1384472f442d5bbfe9d28e9",
      "filename": "ld/Makefile.in",
      "status": "modified",
      "additions": 16,
      "deletions": 7,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/Makefile.in?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -122,9 +122,9 @@ am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../config/plugins.m4 \\\n \t$(top_srcdir)/../config/po.m4 \\\n \t$(top_srcdir)/../config/progtest.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/../ltoptions.m4 \\\n-\t$(top_srcdir)/../ltsugar.m4 $(top_srcdir)/../ltversion.m4 \\\n-\t$(top_srcdir)/../lt~obsolete.m4 \\\n+\t$(top_srcdir)/../config/zlib.m4 $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/../ltoptions.m4 $(top_srcdir)/../ltsugar.m4 \\\n+\t$(top_srcdir)/../ltversion.m4 $(top_srcdir)/../lt~obsolete.m4 \\\n \t$(top_srcdir)/../bfd/version.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n@@ -534,6 +534,8 @@ top_build_prefix = @top_build_prefix@\n top_builddir = @top_builddir@\n top_srcdir = @top_srcdir@\n use_sysroot = @use_sysroot@\n+zlibdir = @zlibdir@\n+zlibinc = @zlibinc@\n AUTOMAKE_OPTIONS = dejagnu no-texinfo.tex no-dist foreign info-in-builddir\n ACLOCAL_AMFLAGS = -I .. -I ../config -I ../bfd\n TEXINFO_TEX = ../texinfo/texinfo.tex\n@@ -544,6 +546,12 @@ tooldir = $(exec_prefix)/$(target_alias)\n # maintainer mode is disabled.  Avoid this.\n am__skiplex = \n am__skipyacc = \n+\n+# This is where we get zlib from.  zlibdir is -L../zlib and zlibinc is\n+# -I../zlib, unless we were configured with --with-system-zlib, in which\n+# case both are empty.\n+ZLIB = @zlibdir@ -lz\n+ZLIBINC = @zlibinc@\n ELF_CLFAGS = -DELF_LIST_OPTIONS=@elf_list_options@ \\\n \t   -DELF_SHLIB_LIST_OPTIONS=@elf_shlib_list_options@ \\\n \t   -DELF_PLT_UNWIND_LIST_OPTIONS=@elf_plt_unwind_list_options@\n@@ -632,12 +640,13 @@ AM_MAKEINFOFLAGS = -I $(srcdir) -I $(BFDDIR)/doc -I ../bfd/doc \\\n TEXI2DVI = texi2dvi -I $(srcdir) -I $(BFDDIR)/doc -I ../bfd/doc \\\n \t\t    -I $(top_srcdir)/../libiberty\n \n-AM_CPPFLAGS = -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) \\\n+AM_CPPFLAGS = -I. -I$(srcdir) -I../bfd -I$(BFDDIR) -I$(INCDIR) @zlibinc@ \\\n \t@INCINTL@ $(HDEFINES) $(CFLAGS) $(PLUGIN_CFLAGS) \\\n \t-DLOCALEDIR=\"\\\"$(datadir)/locale\\\"\"\n \n BFDLIB = ../bfd/libbfd.la\n LIBIBERTY = ../libiberty/libiberty.a\n+LIBCTF = ../libctf/libctf.a\n \n # These all start with e so 'make clean' can find them.\n ALL_EMULATION_SOURCES = \\\n@@ -1001,9 +1010,9 @@ ld_new_SOURCES = ldgram.y ldlex-wrapper.c lexsup.c ldlang.c mri.c ldctor.c ldmai\n \tldbuildid.c\n \n ld_new_DEPENDENCIES = $(EMULATION_OFILES) $(EMUL_EXTRA_OFILES) \\\n-\t\t      $(BFDLIB) $(LIBIBERTY) $(LIBINTL_DEP)\n+\t\t      $(BFDLIB) $(LIBCTF) $(LIBIBERTY) $(LIBINTL_DEP)\n \n-ld_new_LDADD = $(EMULATION_OFILES) $(EMUL_EXTRA_OFILES) $(BFDLIB) $(LIBIBERTY) $(LIBINTL)\n+ld_new_LDADD = $(EMULATION_OFILES) $(EMUL_EXTRA_OFILES) $(BFDLIB) $(LIBCTF) $(LIBIBERTY) $(LIBINTL) $(ZLIB)\n #\n #\n # Build a dummy plugin using libtool.\n@@ -2565,7 +2574,7 @@ check-DEJAGNU: site.exp\n \t\tCC=\"$(CC_FOR_TARGET)\" CFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n \t\tCXX=\"$(CXX_FOR_TARGET)\" CXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n \t\tCC_FOR_HOST=\"$(CC)\" CFLAGS_FOR_HOST=\"$(CFLAGS)\" \\\n-\t\tOFILES=\"$(OFILES)\" BFDLIB=\"$(TESTBFDLIB)\" \\\n+\t\tOFILES=\"$(OFILES)\" BFDLIB=\"$(TESTBFDLIB)\" CTFLIB=\"$(LIBCTF) $(ZLIB)\" \\\n \t\tLIBIBERTY=\"$(LIBIBERTY) $(LIBINTL)\" LIBS=\"$(LIBS)\" \\\n \t\tDO_COMPARE=\"`echo '$(do_compare)' | sed -e 's,\\\\$$,,g'`\" \\\n \t\t$(RUNTESTFLAGS); \\"
    },
    {
      "sha": "7df8bf68f196d1b022b38091c81b1f05cc46c65b",
      "filename": "ld/aclocal.m4",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/aclocal.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/aclocal.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/aclocal.m4?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -1198,6 +1198,7 @@ m4_include([../config/override.m4])\n m4_include([../config/plugins.m4])\n m4_include([../config/po.m4])\n m4_include([../config/progtest.m4])\n+m4_include([../config/zlib.m4])\n m4_include([../libtool.m4])\n m4_include([../ltoptions.m4])\n m4_include([../ltsugar.m4])"
    },
    {
      "sha": "9ae333f03ea01e12281e2ea62e7aac232ae1315c",
      "filename": "ld/configure",
      "status": "modified",
      "additions": 26,
      "deletions": 2,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/configure?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -645,6 +645,8 @@ elf_plt_unwind_list_options\n elf_shlib_list_options\n elf_list_options\n STRINGIFY\n+zlibinc\n+zlibdir\n enable_initfini_array\n ENABLE_PLUGINS_FALSE\n ENABLE_PLUGINS_TRUE\n@@ -834,6 +836,7 @@ enable_werror\n enable_build_warnings\n enable_nls\n enable_initfini_array\n+with_system_zlib\n '\n       ac_precious_vars='build_alias\n host_alias\n@@ -1510,6 +1513,7 @@ Optional Packages:\n   --with-gnu-ld           assume the C compiler uses GNU ld [default=no]\n   --with-lib-path=dir1:dir2...  set default LIB_PATH\n   --with-sysroot=DIR Search for usr/lib et al within DIR.\n+  --with-system-zlib      use installed libz\n \n Some influential environment variables:\n   CC          C compiler command\n@@ -12027,7 +12031,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12030 \"configure\"\n+#line 12034 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12133,7 +12137,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12136 \"configure\"\n+#line 12140 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -17385,6 +17389,26 @@ cat >>confdefs.h <<_ACEOF\n _ACEOF\n \n \n+# Link in zlib if we can.  This allows us to read and write\n+# compressed CTF sections.\n+\n+  # Use the system's zlib library.\n+  zlibdir=\"-L\\$(top_builddir)/../zlib\"\n+  zlibinc=\"-I\\$(top_srcdir)/../zlib\"\n+\n+# Check whether --with-system-zlib was given.\n+if test \"${with_system_zlib+set}\" = set; then :\n+  withval=$with_system_zlib; if test x$with_system_zlib = xyes ; then\n+    zlibdir=\n+    zlibinc=\n+  fi\n+\n+fi\n+\n+\n+\n+\n+\n # When converting linker scripts into strings for use in emulation\n # files, use astring.sed if the compiler supports ANSI string\n # concatenation, or ostring.sed otherwise.  This is to support the"
    },
    {
      "sha": "200d9d4fe9144d9fabaab6df96214ecc67e8e8db",
      "filename": "ld/configure.ac",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/configure.ac?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -293,6 +293,10 @@ BFD_BINARY_FOPEN\n \n AC_CHECK_DECLS([strstr, free, sbrk, getenv, environ])\n \n+# Link in zlib if we can.  This allows us to read and write\n+# compressed CTF sections.\n+AM_ZLIB\n+\n # When converting linker scripts into strings for use in emulation\n # files, use astring.sed if the compiler supports ANSI string\n # concatenation, or ostring.sed otherwise.  This is to support the"
    },
    {
      "sha": "f4441109d23466cd589a47bdc41825c0524061a8",
      "filename": "ld/emultempl/aix.em",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/aix.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/aix.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/aix.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -40,6 +40,7 @@ fragment <<EOF\n #include \"getopt.h\"\n #include \"obstack.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n \n #include \"ld.h\"\n #include \"ldmain.h\"\n@@ -1560,6 +1561,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation = {\n   NULL,\t\t\t\t/* recognized_file */\n   NULL,\t\t\t\t/* find potential_libraries */\n   NULL,\t\t\t\t/* new_vers_pattern */\n-  NULL\t\t\t\t/* extra_map_file_text */\n+  NULL,\t\t\t\t/* extra_map_file_text */\n+  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n+  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL}\n };\n EOF"
    },
    {
      "sha": "0eda136c8371a4bdc9cde759d676a27116d4afe9",
      "filename": "ld/emultempl/armcoff.em",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/armcoff.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/armcoff.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/armcoff.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -29,6 +29,7 @@ fragment <<EOF\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"getopt.h\"\n \n #include \"ld.h\"\n@@ -282,6 +283,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   NULL,\t/* recognized file */\n   NULL,\t/* find_potential_libraries */\n   NULL,\t/* new_vers_pattern */\n-  NULL\t/* extra_map_file_text */\n+  NULL,\t/* extra_map_file_text */\n+  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n+  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL}\n };\n EOF"
    },
    {
      "sha": "4dbccf16de2a8a568b880450a44c80933a103677",
      "filename": "ld/emultempl/beos.em",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/beos.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/beos.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/beos.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -37,6 +37,7 @@ fragment <<EOF\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"getopt.h\"\n #include \"libiberty.h\"\n #include \"filenames.h\"\n@@ -782,6 +783,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   NULL,\t/* recognized file */\n   NULL,\t/* find_potential_libraries */\n   NULL,\t/* new_vers_pattern */\n-  NULL\t/* extra_map_file_text */\n+  NULL,\t/* extra_map_file_text */\n+  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n+  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL}\n };\n EOF"
    },
    {
      "sha": "9ff544a3b747e93774714a4588833a09c07c98f4",
      "filename": "ld/emultempl/elf-generic.em",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/elf-generic.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/elf-generic.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/elf-generic.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -25,3 +25,7 @@\n fragment <<EOF\n \n EOF\n+# Put these extra routines in ld${EMULATION_NAME}_emulation\n+#\n+LDEMUL_EMIT_CTF_EARLY=ldelf_emit_ctf_early\n+LDEMUL_EXAMINE_STRTAB_FOR_CTF=ldelf_examine_strtab_for_ctf"
    },
    {
      "sha": "dcd9523900c566bc0ed65e16b0bb628fe5bc45a7",
      "filename": "ld/emultempl/elf.em",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/elf.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -38,6 +38,7 @@ fragment <<EOF\n #include \"libiberty.h\"\n #include \"getopt.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"ld.h\"\n #include \"ldmain.h\"\n #include \"ldmisc.h\"\n@@ -899,6 +900,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   ${LDEMUL_RECOGNIZED_FILE-ldelf_load_symbols},\n   ${LDEMUL_FIND_POTENTIAL_LIBRARIES-NULL},\n   ${LDEMUL_NEW_VERS_PATTERN-NULL},\n-  ${LDEMUL_EXTRA_MAP_FILE_TEXT-NULL}\n+  ${LDEMUL_EXTRA_MAP_FILE_TEXT-NULL},\n+  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n+  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL}\n };\n EOF"
    },
    {
      "sha": "17c9eb11d59154e6345cf6d0b0be0c30ee5f6829",
      "filename": "ld/emultempl/generic.em",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/generic.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/generic.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/generic.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -29,6 +29,7 @@ fragment <<EOF\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n \n #include \"ld.h\"\n #include \"ldmain.h\"\n@@ -157,6 +158,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   ${LDEMUL_RECOGNIZED_FILE-NULL},\n   ${LDEMUL_FIND_POTENTIAL_LIBRARIES-NULL},\n   ${LDEMUL_NEW_VERS_PATTERN-NULL},\n-  ${LDEMUL_EXTRA_MAP_FILE_TEXT-NULL}\n+  ${LDEMUL_EXTRA_MAP_FILE_TEXT-NULL},\n+  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n+  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL}\n };\n EOF"
    },
    {
      "sha": "e32c74a5461bea831a32cc01a60b62aac6a68669",
      "filename": "ld/emultempl/linux.em",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/linux.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/linux.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/linux.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -35,6 +35,7 @@ fragment <<EOF\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n \n #include \"ld.h\"\n #include \"ldmain.h\"\n@@ -209,6 +210,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   NULL,\t/* recognized file */\n   NULL,\t/* find_potential_libraries */\n   NULL,\t/* new_vers_pattern */\n-  NULL\t/* extra_map_file_text */\n+  NULL,\t/* extra_map_file_text */\n+  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n+  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL}\n };\n EOF"
    },
    {
      "sha": "96d42c8a16d7b005e3db0783f338ced1ac560de6",
      "filename": "ld/emultempl/msp430.em",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/msp430.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/msp430.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/msp430.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -30,6 +30,7 @@ fragment <<EOF\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n \n #include \"ld.h\"\n #include \"getopt.h\"\n@@ -844,7 +845,9 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   ${LDEMUL_RECOGNIZED_FILE-NULL},\n   ${LDEMUL_FIND_POTENTIAL_LIBRARIES-NULL},\n   ${LDEMUL_NEW_VERS_PATTERN-NULL},\n-  ${LDEMUL_EXTRA_MAP_FILE_TEXT-NULL}\n+  ${LDEMUL_EXTRA_MAP_FILE_TEXT-NULL},\n+  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n+  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL}\n };\n EOF\n # \f"
    },
    {
      "sha": "c4c6464c3c01a7b5e2da39fc62fa084565df0abf",
      "filename": "ld/emultempl/pe.em",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/pe.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/pe.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pe.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -40,6 +40,7 @@ fragment <<EOF\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"getopt.h\"\n #include \"libiberty.h\"\n #include \"filenames.h\"\n@@ -2366,6 +2367,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   gld_${EMULATION_NAME}_recognized_file,\n   gld_${EMULATION_NAME}_find_potential_libraries,\n   NULL,\t/* new_vers_pattern.  */\n-  NULL\t/* extra_map_file_text.  */\n+  NULL,\t/* extra_map_file_text.  */\n+  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n+  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL}\n };\n EOF"
    },
    {
      "sha": "ec2d83fa633527589a60ff03ed5eb36b8c57f068",
      "filename": "ld/emultempl/pep.em",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/pep.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/pep.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pep.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -51,6 +51,7 @@ fragment <<EOF\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"getopt.h\"\n #include \"libiberty.h\"\n #include \"filenames.h\"\n@@ -2165,6 +2166,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   gld_${EMULATION_NAME}_recognized_file,\n   gld_${EMULATION_NAME}_find_potential_libraries,\n   NULL,\t/* new_vers_pattern.  */\n-  NULL\t/* extra_map_file_text */\n+  NULL,\t/* extra_map_file_text */\n+  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n+  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL}\n };\n EOF"
    },
    {
      "sha": "09f1953a4a25651d64f63217001cdb1d6364e563",
      "filename": "ld/emultempl/ticoff.em",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/ticoff.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/ticoff.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/ticoff.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -30,6 +30,7 @@ fragment <<EOF\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"getopt.h\"\n \n #include \"ld.h\"\n@@ -182,6 +183,8 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   NULL, /* recognized file */\n   NULL,\t/* find_potential_libraries */\n   NULL,\t/* new_vers_pattern */\n-  NULL  /* extra_map_file_text */\n+  NULL,  /* extra_map_file_text */\n+  ${LDEMUL_EMIT_CTF_EARLY-NULL},\n+  ${LDEMUL_EXAMINE_STRTAB_FOR_CTF-NULL}\n };\n EOF"
    },
    {
      "sha": "1e2955ff0de929d066a10011158279dbe60220a0",
      "filename": "ld/emultempl/vanilla.em",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/vanilla.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/emultempl/vanilla.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/vanilla.em?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -25,6 +25,7 @@ fragment <<EOF\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n \n #include \"ld.h\"\n #include \"ldmisc.h\"\n@@ -83,6 +84,8 @@ struct ld_emulation_xfer_struct ld_vanilla_emulation =\n   NULL,\t/* recognized file */\n   NULL,\t/* find_potential_libraries */\n   NULL,\t/* new_vers_pattern */\n-  NULL\t/* extra_map_file_text */\n+  NULL,\t/* extra_map_file_text */\n+  NULL, /* emit_ctf_early */\n+  NULL  /* examine_strtab_for_ctf */\n };\n EOF"
    },
    {
      "sha": "367b5bad6bb0da75ba36d9b6734c51fc26592440",
      "filename": "ld/ldcref.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldcref.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldcref.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldcref.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -27,6 +27,7 @@\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"libiberty.h\"\n #include \"demangle.h\"\n #include \"objalloc.h\""
    },
    {
      "sha": "ba8cac1e353dd7503ce44968878aace90a3b5b3f",
      "filename": "ld/ldctor.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldctor.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldctor.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldctor.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -23,6 +23,7 @@\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n #include \"safe-ctype.h\"\n+#include \"ctf-api.h\"\n \n #include \"ld.h\"\n #include \"ldexp.h\""
    },
    {
      "sha": "b27917c5fcd0e7d0b25043b869df735e302917d2",
      "filename": "ld/ldelf.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelf.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -24,6 +24,7 @@\n #include \"filenames.h\"\n #include \"safe-ctype.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"ld.h\"\n #include \"ldmain.h\"\n #include \"ldmisc.h\""
    },
    {
      "sha": "682872f9dcad6e596269804b5b3f7f08036c2af9",
      "filename": "ld/ldelfgen.c",
      "status": "modified",
      "additions": 111,
      "deletions": 0,
      "changes": 111,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldelfgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldelfgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelfgen.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -21,6 +21,7 @@\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"ld.h\"\n #include \"ldmain.h\"\n #include \"ldmisc.h\"\n@@ -73,3 +74,113 @@ ldelf_map_segments (bfd_boolean need_layout)\n   if (tries == 0)\n     einfo (_(\"%F%P: looping in map_segments\"));\n }\n+\n+/* We want to emit CTF early if and only if we are not targetting ELF with this\n+   invocation.  */\n+\n+int\n+ldelf_emit_ctf_early (void)\n+{\n+  if (bfd_get_flavour (link_info.output_bfd) == bfd_target_elf_flavour)\n+    return 0;\n+  return 1;\n+}\n+\n+/* Callbacks used to map from bfd types to libctf types, under libctf's\n+   control.  */\n+\n+struct ctf_strsym_iter_cb_arg\n+{\n+  struct elf_sym_strtab *syms;\n+  bfd_size_type symcount;\n+  struct elf_strtab_hash *symstrtab;\n+  size_t next_i;\n+  size_t next_idx;\n+};\n+\n+/* Return strings from the strtab to libctf, one by one.  Returns NULL when\n+   iteration is complete.  */\n+\n+static const char *\n+ldelf_ctf_strtab_iter_cb (uint32_t *offset, void *arg_)\n+{\n+  bfd_size_type off;\n+  const char *ret;\n+\n+  struct ctf_strsym_iter_cb_arg *arg =\n+    (struct ctf_strsym_iter_cb_arg *) arg_;\n+\n+  /* There is no zeroth string.  */\n+  if (arg->next_i == 0)\n+    arg->next_i = 1;\n+\n+  if (arg->next_i >= _bfd_elf_strtab_len (arg->symstrtab))\n+    {\n+      arg->next_i = 0;\n+      return NULL;\n+    }\n+\n+  ret = _bfd_elf_strtab_str (arg->symstrtab, arg->next_i++, &off);\n+  *offset = off;\n+\n+  /* If we've overflowed, we cannot share any further strings: the CTF\n+     format cannot encode strings with such high offsets.  */\n+  if (*offset != off)\n+    return NULL;\n+\n+  return ret;\n+}\n+\n+/* Return symbols from the symbol table to libctf, one by one.  We assume (and\n+   assert) that the symbols in the elf_link_hash_table are in strictly ascending\n+   order, and that none will be added in between existing ones.  Returns NULL\n+   when iteration is complete.  */\n+\n+static struct ctf_link_sym *\n+ldelf_ctf_symbols_iter_cb (struct ctf_link_sym *dest,\n+\t\t\t\t\t   void *arg_)\n+{\n+  struct ctf_strsym_iter_cb_arg *arg =\n+    (struct ctf_strsym_iter_cb_arg *) arg_;\n+\n+  if (arg->next_i > arg->symcount)\n+    {\n+      arg->next_i = 0;\n+      arg->next_idx = 0;\n+      return NULL;\n+    }\n+\n+  ASSERT (arg->syms[arg->next_i].dest_index == arg->next_idx);\n+  dest->st_name = _bfd_elf_strtab_str (arg->symstrtab, arg->next_i, NULL);\n+  dest->st_shndx = arg->syms[arg->next_i].sym.st_shndx;\n+  dest->st_type = ELF_ST_TYPE (arg->syms[arg->next_i].sym.st_info);\n+  dest->st_value = arg->syms[arg->next_i].sym.st_value;\n+  arg->next_i++;\n+  return dest;\n+}\n+\n+void\n+ldelf_examine_strtab_for_ctf\n+  (struct ctf_file *ctf_output, struct elf_sym_strtab *syms,\n+   bfd_size_type symcount, struct elf_strtab_hash *symstrtab)\n+{\n+  struct ctf_strsym_iter_cb_arg args = { syms, symcount, symstrtab,\n+\t\t\t\t\t  0, 0 };\n+   if (!ctf_output)\n+     return;\n+\n+   if (bfd_get_flavour (link_info.output_bfd) == bfd_target_elf_flavour\n+       && !bfd_link_relocatable (&link_info))\n+    {\n+      if (ctf_link_add_strtab (ctf_output, ldelf_ctf_strtab_iter_cb,\n+\t\t\t       &args) < 0)\n+\teinfo (_(\"%F%P: warning: CTF strtab association failed; strings will \"\n+\t\t \"not be shared: %s\\n\"),\n+\t       ctf_errmsg (ctf_errno (ctf_output)));\n+\n+      if (ctf_link_shuffle_syms (ctf_output, ldelf_ctf_symbols_iter_cb,\n+\t\t\t\t &args) < 0)\n+\teinfo (_(\"%F%P: warning: CTF symbol shuffling failed; slight space \"\n+\t\t \"cost: %s\\n\"), ctf_errmsg (ctf_errno (ctf_output)));\n+    }\n+}"
    },
    {
      "sha": "1ec6b662a50f1064c82fe85264dca41701dc0214",
      "filename": "ld/ldelfgen.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldelfgen.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldelfgen.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelfgen.h?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -18,4 +18,12 @@\n    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n    MA 02110-1301, USA.  */\n \n+struct elf_sym_strtab;\n+struct elf_strtab_hash;\n+struct ctf_file;\n+\n extern void ldelf_map_segments (bfd_boolean);\n+extern int ldelf_emit_ctf_early (void);\n+extern void ldelf_examine_strtab_for_ctf\n+  (struct ctf_file *ctf_output, struct elf_sym_strtab *syms,\n+   bfd_size_type symcount, struct elf_strtab_hash *symstrtab);"
    },
    {
      "sha": "ab23dee41b67eba9ccca48d4bae6f11d180785c0",
      "filename": "ld/ldemul.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldemul.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldemul.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldemul.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -22,6 +22,7 @@\n #include \"bfd.h\"\n #include \"getopt.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n \n #include \"ld.h\"\n #include \"ldmisc.h\"\n@@ -371,3 +372,25 @@ ldemul_extra_map_file_text (bfd *abfd, struct bfd_link_info *info, FILE *mapf)\n   if (ld_emulation->extra_map_file_text)\n     ld_emulation->extra_map_file_text (abfd, info, mapf);\n }\n+\n+int\n+ldemul_emit_ctf_early (void)\n+{\n+  if (ld_emulation->emit_ctf_early)\n+    return ld_emulation->emit_ctf_early ();\n+  /* If the emulation doesn't know if it wants to emit CTF early, it is going\n+     to do so.  */\n+  return 1;\n+}\n+\n+void\n+ldemul_examine_strtab_for_ctf (struct ctf_file *ctf_output,\n+\t\t\t       struct elf_sym_strtab *syms,\n+\t\t\t       bfd_size_type symcount,\n+\t\t\t       struct elf_strtab_hash *symstrtab)\n+\n+{\n+  if (ld_emulation->examine_strtab_for_ctf)\n+    ld_emulation->examine_strtab_for_ctf (ctf_output, syms,\n+\t\t\t\t\t  symcount, symstrtab);\n+}"
    },
    {
      "sha": "bc12b3e277061b39f21774403b9b3f7bb4fdf3d2",
      "filename": "ld/ldemul.h",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldemul.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldemul.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldemul.h?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -100,6 +100,14 @@ extern struct bfd_elf_version_expr *ldemul_new_vers_pattern\n   (struct bfd_elf_version_expr *);\n extern void ldemul_extra_map_file_text\n   (bfd *, struct bfd_link_info *, FILE *);\n+/* Return 1 if we are emitting CTF early, and 0 if ldemul_examine_strtab_for_ctf\n+   will be called by the target.  */\n+extern int ldemul_emit_ctf_early\n+  (void);\n+/* Called from per-target code to examine the strtab and symtab.  */\n+extern void ldemul_examine_strtab_for_ctf\n+  (struct ctf_file *, struct elf_sym_strtab *, bfd_size_type,\n+   struct elf_strtab_hash *);\n \n typedef struct ld_emulation_xfer_struct {\n   /* Run before parsing the command line and script file.\n@@ -208,6 +216,19 @@ typedef struct ld_emulation_xfer_struct {\n   void (*extra_map_file_text)\n     (bfd *, struct bfd_link_info *, FILE *);\n \n+  /* If this returns true, we emit CTF as early as possible: if false, we emit\n+     CTF once the strtab and symtab are laid out.  */\n+  int (*emit_ctf_early)\n+    (void);\n+\n+  /* Called to examine the string and symbol table late enough in linking that\n+     they are finally laid out.  If emit_ctf_early returns true, this is not\n+     called and ldemul_maybe_emit_ctf() emits CTF in 'early' mode: otherwise, it\n+     waits until 'late'. (Late mode needs explicit support at per-target link\n+     time to get called at all).  If set, called by ld when the examine_strtab\n+     bfd_link_callback is invoked by per-target code.  */\n+  void (*examine_strtab_for_ctf) (struct ctf_file *, struct elf_sym_strtab *,\n+\t\t\t\t  bfd_size_type, struct elf_strtab_hash *);\n } ld_emulation_xfer_type;\n \n typedef enum {"
    },
    {
      "sha": "23ee5c59c280128e22efac5232a18fc730431420",
      "filename": "ld/ldexp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldexp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldexp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldexp.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -30,6 +30,7 @@\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n \n #include \"ld.h\"\n #include \"ldmain.h\""
    },
    {
      "sha": "9f0398a41e6453fc0ad2900217df342baf932f5c",
      "filename": "ld/ldfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldfile.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -21,6 +21,7 @@\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"safe-ctype.h\"\n #include \"ld.h\"\n #include \"ldmisc.h\""
    },
    {
      "sha": "595b89f0ba3d46a60ef4446f15f099a9b12716c6",
      "filename": "ld/ldgram.y",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldgram.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldgram.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldgram.y?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -29,6 +29,7 @@\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"ld.h\"\n #include \"ldexp.h\"\n #include \"ldver.h\""
    },
    {
      "sha": "2f72a7cdfdb8af46430dec925f677501233229e5",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 198,
      "deletions": 0,
      "changes": 198,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -26,6 +26,7 @@\n #include \"safe-ctype.h\"\n #include \"obstack.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n \n #include \"ld.h\"\n #include \"ldmain.h\"\n@@ -128,6 +129,7 @@ bfd_boolean delete_output_file_on_failure = FALSE;\n struct lang_phdr *lang_phdr_list;\n struct lang_nocrossrefs *nocrossref_list;\n struct asneeded_minfo **asneeded_list_tail;\n+static ctf_file_t *ctf_output;\n \n  /* Functions that traverse the linker script and might evaluate\n     DEFINED() need to increment this at the start of the traversal.  */\n@@ -151,6 +153,12 @@ int lang_statement_iteration = 0;\n \n #define SECTION_NAME_MAP_LENGTH (16)\n \n+/* CTF sections smaller than this are not compressed: compression of\n+   dictionaries this small doesn't gain much, and this lets consumers mmap the\n+   sections directly out of the ELF file and use them with no decompression\n+   overhead if they want to.  */\n+#define CTF_COMPRESSION_THRESHOLD 4096\n+\n void *\n stat_alloc (size_t size)\n {\n@@ -3597,6 +3605,186 @@ open_input_bfds (lang_statement_union_type *s, enum open_bfd_mode mode)\n     einfo (\"%F\");\n }\n \n+/* Open the CTF sections in the input files with libctf: if any were opened,\n+   create a fake input file that we'll write the merged CTF data to later\n+   on.  */\n+\n+static void\n+ldlang_open_ctf (void)\n+{\n+  int any_ctf = 0;\n+  int err;\n+\n+  LANG_FOR_EACH_INPUT_STATEMENT (file)\n+    {\n+      asection *sect;\n+\n+      /* Incoming files from the compiler have a single ctf_file_t in them\n+\t (which is presented to us by the libctf API in a ctf_archive_t\n+\t wrapper): files derived from a previous relocatable link have a CTF\n+\t archive containing possibly many CTF files.  */\n+\n+      if ((file->the_ctf = ctf_bfdopen (file->the_bfd, &err)) == NULL)\n+\t{\n+\t  if (err != ECTF_NOCTFDATA)\n+\t    einfo (_(\"%P: warning: CTF section in `%pI' not loaded: \"\n+\t\t     \"its types will be discarded: `%s'\\n\"), file,\n+\t\t     ctf_errmsg (err));\n+\t  continue;\n+\t}\n+\n+      /* Prevent the contents of this section from being written, while\n+\t requiring the section itself to be duplicated in the output.  */\n+      /* This section must exist if ctf_bfdopen() succeeded.  */\n+      sect = bfd_get_section_by_name (file->the_bfd, \".ctf\");\n+      sect->size = 0;\n+      sect->flags |= SEC_NEVER_LOAD | SEC_HAS_CONTENTS | SEC_LINKER_CREATED;\n+\n+      any_ctf = 1;\n+    }\n+\n+  if (!any_ctf)\n+    {\n+      ctf_output = NULL;\n+      return;\n+    }\n+\n+  if ((ctf_output = ctf_create (&err)) != NULL)\n+    return;\n+\n+  einfo (_(\"%P: warning: CTF output not created: `s'\\n\"),\n+\t ctf_errmsg (err));\n+\n+  LANG_FOR_EACH_INPUT_STATEMENT (errfile)\n+    ctf_close (errfile->the_ctf);\n+}\n+\n+/* Merge together CTF sections.  After this, only the symtab-dependent\n+   function and data object sections need adjustment.  */\n+\n+static void\n+lang_merge_ctf (void)\n+{\n+  asection *output_sect;\n+\n+  if (!ctf_output)\n+    return;\n+\n+  output_sect = bfd_get_section_by_name (link_info.output_bfd, \".ctf\");\n+\n+  /* If the section was discarded, don't waste time merging.  */\n+  if (output_sect == NULL)\n+    {\n+      ctf_file_close (ctf_output);\n+      ctf_output = NULL;\n+\n+      LANG_FOR_EACH_INPUT_STATEMENT (file)\n+\t{\n+\t  ctf_close (file->the_ctf);\n+\t  file->the_ctf = NULL;\n+\t}\n+      return;\n+    }\n+\n+  LANG_FOR_EACH_INPUT_STATEMENT (file)\n+    {\n+      if (!file->the_ctf)\n+\tcontinue;\n+\n+      /* Takes ownership of file->u.the_ctfa.  */\n+      if (ctf_link_add_ctf (ctf_output, file->the_ctf, file->filename) < 0)\n+\t{\n+\t  einfo (_(\"%F%P: cannot link with CTF in %pB: %s\\n\"), file->the_bfd,\n+\t\t ctf_errmsg (ctf_errno (ctf_output)));\n+\t  ctf_close (file->the_ctf);\n+\t  file->the_ctf = NULL;\n+\t  continue;\n+\t}\n+    }\n+\n+  if (ctf_link (ctf_output, CTF_LINK_SHARE_UNCONFLICTED) < 0)\n+    {\n+      einfo (_(\"%F%P: CTF linking failed; output will have no CTF section: %s\\n\"),\n+\t     ctf_errmsg (ctf_errno (ctf_output)));\n+      if (output_sect)\n+\t{\n+\t  output_sect->size = 0;\n+\t  output_sect->flags |= SEC_EXCLUDE;\n+\t}\n+    }\n+}\n+\n+/* Let the emulation examine the symbol table and strtab to help it optimize the\n+   CTF, if supported.  */\n+\n+void\n+ldlang_ctf_apply_strsym (struct elf_sym_strtab *syms, bfd_size_type symcount,\n+\t\t\t struct elf_strtab_hash *symstrtab)\n+{\n+  ldemul_examine_strtab_for_ctf (ctf_output, syms, symcount, symstrtab);\n+}\n+\n+/* Write out the CTF section.  Called early, if the emulation isn't going to\n+   need to dedup against the strtab and symtab, then possibly called from the\n+   target linker code if the dedup has happened.  */\n+static void\n+lang_write_ctf (int late)\n+{\n+  size_t output_size;\n+  asection *output_sect;\n+\n+  if (!ctf_output)\n+    return;\n+\n+  if (late)\n+    {\n+      /* Emit CTF late if this emulation says it can do so.  */\n+      if (ldemul_emit_ctf_early ())\n+\treturn;\n+    }\n+  else\n+    {\n+      if (!ldemul_emit_ctf_early ())\n+\treturn;\n+    }\n+\n+  /* Emit CTF.  */\n+\n+  output_sect = bfd_get_section_by_name (link_info.output_bfd, \".ctf\");\n+  if (output_sect)\n+    {\n+      output_sect->contents = ctf_link_write (ctf_output, &output_size,\n+\t\t\t\t\t      CTF_COMPRESSION_THRESHOLD);\n+      output_sect->size = output_size;\n+      output_sect->flags |= SEC_IN_MEMORY | SEC_KEEP;\n+\n+      if (!output_sect->contents)\n+\t{\n+\t  einfo (_(\"%F%P: CTF section emission failed; output will have no \"\n+\t\t   \"CTF section: %s\\n\"), ctf_errmsg (ctf_errno (ctf_output)));\n+\t  output_sect->size = 0;\n+\t  output_sect->flags |= SEC_EXCLUDE;\n+\t}\n+    }\n+\n+  /* This also closes every CTF input file used in the link.  */\n+  ctf_file_close (ctf_output);\n+  ctf_output = NULL;\n+\n+  LANG_FOR_EACH_INPUT_STATEMENT (file)\n+    file->the_ctf = NULL;\n+}\n+\n+/* Write out the CTF section late, if the emulation needs that.  */\n+\n+void\n+ldlang_write_ctf_late (void)\n+{\n+  /* Trigger a \"late call\", if the emulation needs one.  */\n+\n+  lang_write_ctf (1);\n+}\n+\n /* Add the supplied name to the symbol table as an undefined reference.\n    This is a two step process as the symbol table doesn't even exist at\n    the time the ld command line is processed.  First we put the name\n@@ -7585,6 +7773,8 @@ lang_process (void)\n   if (config.map_file != NULL)\n     lang_print_asneeded ();\n \n+  ldlang_open_ctf ();\n+\n   bfd_section_already_linked_table_free ();\n \n   /* Make sure that we're not mixing architectures.  We call this\n@@ -7661,6 +7851,14 @@ lang_process (void)\n \t}\n     }\n \n+  /* Merge together CTF sections.  After this, only the symtab-dependent\n+     function and data object sections need adjustment.  */\n+  lang_merge_ctf ();\n+\n+  /* Emit the CTF, iff the emulation doesn't need to do late emission after\n+     examining things laid out late, like the strtab.  */\n+  lang_write_ctf (0);\n+\n   /* Copy forward lma regions for output sections in same lma region.  */\n   lang_propagate_lma_regions ();\n "
    },
    {
      "sha": "8cc5cf7f900670de68e76a784bc8011a8027bce2",
      "filename": "ld/ldlang.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldlang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldlang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.h?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -296,6 +296,8 @@ typedef struct lang_input_statement_struct\n \n   bfd *the_bfd;\n \n+  ctf_archive_t *the_ctf;\n+\n   struct flag_info *section_flag_list;\n \n   /* Next pointer for file_chain statement list.  */\n@@ -677,6 +679,12 @@ extern void add_excluded_libs (const char *);\n extern bfd_boolean load_symbols\n   (lang_input_statement_type *, lang_statement_list_type *);\n \n+struct elf_sym_strtab;\n+struct elf_strtab_hash;\n+extern void ldlang_ctf_apply_strsym\n+  (struct elf_sym_strtab *, bfd_size_type, struct elf_strtab_hash *);\n+extern void ldlang_write_ctf_late\n+  (void);\n extern bfd_boolean\n ldlang_override_segment_assignment\n   (struct bfd_link_info *, bfd *, asection *, asection *, bfd_boolean);"
    },
    {
      "sha": "44148cef3cfa40744c1b1199e381bba5bcbff74a",
      "filename": "ld/ldlex.l",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldlex.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldlex.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlex.l?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -25,6 +25,7 @@\n #include \"bfd.h\"\n #include \"safe-ctype.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"ld.h\"\n #include \"ldmisc.h\"\n #include \"ldexp.h\""
    },
    {
      "sha": "2fbd8b9da956b6d8c437833f2831f18f45194e89",
      "filename": "ld/ldmain.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldmain.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldmain.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmain.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -25,6 +25,7 @@\n #include \"libiberty.h\"\n #include \"progress.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"filenames.h\"\n \n #include \"ld.h\"\n@@ -148,7 +149,9 @@ static struct bfd_link_callbacks link_callbacks =\n   einfo,\n   info_msg,\n   minfo,\n-  ldlang_override_segment_assignment\n+  ldlang_override_segment_assignment,\n+  ldlang_ctf_apply_strsym,\n+  ldlang_write_ctf_late\n };\n \n static bfd_assert_handler_type default_bfd_assert_handler;"
    },
    {
      "sha": "848e227b0523bc610e2f1bf237632af79614ea4c",
      "filename": "ld/ldmisc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmisc.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -23,6 +23,7 @@\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n #include \"libiberty.h\"\n+#include \"ctf-api.h\"\n #include \"safe-ctype.h\"\n #include \"filenames.h\"\n #include \"demangle.h\""
    },
    {
      "sha": "0e01d9b2d0025afb4843e61ef5853b00cb98904d",
      "filename": "ld/ldver.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldver.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldver.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldver.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -22,6 +22,7 @@\n #include \"bfd.h\"\n #include \"bfdver.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"ld.h\"\n #include \"ldver.h\"\n #include \"ldexp.h\""
    },
    {
      "sha": "f2d695063ca2e47606f99e16bea1d808663a8d6d",
      "filename": "ld/ldwrite.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldwrite.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/ldwrite.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldwrite.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -23,6 +23,7 @@\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n #include \"libiberty.h\"\n+#include \"ctf-api.h\"\n #include \"safe-ctype.h\"\n \n #include \"ld.h\""
    },
    {
      "sha": "d7766c3c557cb751a70754818dd3938f020f0079",
      "filename": "ld/lexsup.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/lexsup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/lexsup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/lexsup.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -27,6 +27,7 @@\n #include \"safe-ctype.h\"\n #include \"getopt.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"ld.h\"\n #include \"ldmain.h\"\n #include \"ldmisc.h\""
    },
    {
      "sha": "70fdcabb6a280356ca5cb5fbe1b663b189583532",
      "filename": "ld/mri.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/mri.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/mri.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/mri.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -26,6 +26,7 @@\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n+#include \"ctf-api.h\"\n #include \"ld.h\"\n #include \"ldexp.h\"\n #include \"ldlang.h\""
    },
    {
      "sha": "6daf984b0f7ba5ded9adc789e5cbab0201d7a8b0",
      "filename": "ld/pe-dll.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/pe-dll.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/pe-dll.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/pe-dll.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -25,6 +25,7 @@\n #include \"libiberty.h\"\n #include \"filenames.h\"\n #include \"safe-ctype.h\"\n+#include \"ctf-api.h\"\n \n #include <time.h>\n "
    },
    {
      "sha": "e253e1aea4261b8a0a5a7fef877b6f709fda723b",
      "filename": "ld/plugin.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/plugin.c?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -23,6 +23,7 @@\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n #include \"bfdver.h\"\n+#include \"ctf-api.h\"\n #include \"ld.h\"\n #include \"ldmain.h\"\n #include \"ldmisc.h\""
    },
    {
      "sha": "7ab4a6a5302260e4be6c9028ebcaf55ba5edf821",
      "filename": "ld/testsuite/ld-bootstrap/bootstrap.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/testsuite/ld-bootstrap/bootstrap.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9/ld/testsuite/ld-bootstrap/bootstrap.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bootstrap/bootstrap.exp?ref=1ff6de031241c59d0ff9fa01d3c0a4049b0e97c9",
      "patch": "@@ -160,7 +160,7 @@ foreach flags $test_flags {\n \tsetup_xfail \"mips*-*-irix5*\"\n     }\n \n-    if ![ld_link $CC tmpdir/ld1 \"$flags tmpdir/ld-partial.o $BFDLIB $LIBIBERTY $extralibs\"] {\n+    if ![ld_link $CC tmpdir/ld1 \"$flags tmpdir/ld-partial.o $CTFLIB $BFDLIB $LIBIBERTY $extralibs\"] {\n \tfail $testname\n \tcontinue\n     }\n@@ -177,13 +177,13 @@ foreach flags $test_flags {\n     }\n \n     regsub /tmpdir/ld/ $gcc_B_opt_save /tmpdir/gccld1/ gcc_B_opt\n-    if ![ld_link $CC tmpdir/ld2 \"$flags $OFILES $BFDLIB $LIBIBERTY $extralibs\"] {\n+    if ![ld_link $CC tmpdir/ld2 \"$flags $OFILES $CTFLIB $BFDLIB $LIBIBERTY $extralibs\"] {\n \tfail $testname\n \tcontinue\n     }\n \n     regsub /tmpdir/ld/ $gcc_B_opt_save /tmpdir/gccld2/ gcc_B_opt\n-    if ![ld_link $CC tmpdir/ld3 \"$flags $OFILES $BFDLIB $LIBIBERTY $extralibs\"] {\n+    if ![ld_link $CC tmpdir/ld3 \"$flags $OFILES $CTFLIB $BFDLIB $LIBIBERTY $extralibs\"] {\n \tfail $testname\n \tcontinue\n     }\n@@ -196,7 +196,7 @@ foreach flags $test_flags {\n \t# generated by different linkers, tmpdir/ld1 and tmpdir/ld2.\n \t# So we rebuild tmpdir/ld2 with tmpdir/ld3.\n \tregsub /tmpdir/ld/ $gcc_B_opt_save /tmpdir/gccld3/ gcc_B_opt\n-\tif ![ld_link $CC tmpdir/ld2 \"$flags $OFILES $BFDLIB $LIBIBERTY $extralibs\"] {\n+\tif ![ld_link $CC tmpdir/ld2 \"$flags $OFILES $CTFLIB $BFDLIB $LIBIBERTY $extralibs\"] {\n \t    fail $testname\n \t    continue\n \t}"
    }
  ]
}