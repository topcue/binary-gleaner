{
  "sha": "bfbe4b84606cb9b8ac6f51b473b1d351924080aa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmZiZTRiODQ2MDZjYjliOGFjNmY1MWI0NzNiMWQzNTE5MjQwODBhYQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-12-14T14:40:01Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-12-16T13:08:47Z"
    },
    "message": "Record FPSR for SIMD/FP data instructions\n\nI noticed this failure in gdb.reverse/reverse-insn.exp:\n\nFAIL: gdb.reverse/insn-reverse.exp: adv_simd_vect_shift: compare registers on insn 0:fcvtzs     s0, s0, #1\n\nTurns out we're not recording changes to the FPSR.  The SIMD/FP data\ninstructions may set bits in the FPSR, so it needs to be recorded for\nproper reverse operations.\n\ngdb/ChangeLog:\n\n2020-12-16  Luis Machado  <luis.machado@linaro.org>\n\n\t* aarch64-tdep.c (aarch64_record_data_proc_simd_fp): Record FPSR.",
    "tree": {
      "sha": "e9b72f8b18021826665379be53fb25a1ebb67b7c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e9b72f8b18021826665379be53fb25a1ebb67b7c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bfbe4b84606cb9b8ac6f51b473b1d351924080aa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bfbe4b84606cb9b8ac6f51b473b1d351924080aa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bfbe4b84606cb9b8ac6f51b473b1d351924080aa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bfbe4b84606cb9b8ac6f51b473b1d351924080aa/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "19007d955670a183fdf79408301d403b43eb7db1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19007d955670a183fdf79408301d403b43eb7db1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/19007d955670a183fdf79408301d403b43eb7db1"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 12,
    "deletions": 1
  },
  "files": [
    {
      "sha": "d621e22e9d93ed7e1fa0f0d9490aea4877555fa1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bfbe4b84606cb9b8ac6f51b473b1d351924080aa/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bfbe4b84606cb9b8ac6f51b473b1d351924080aa/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bfbe4b84606cb9b8ac6f51b473b1d351924080aa",
      "patch": "@@ -1,3 +1,7 @@\n+2020-12-16  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* aarch64-tdep.c (aarch64_record_data_proc_simd_fp): Record FPSR.\n+\n 2020-12-16  Luis Machado  <luis.machado@linaro.org>\n \n \t* aarch64-linux-nat.c"
    },
    {
      "sha": "5858b64970b103b86d347adb61b2ba59f49bd8b3",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bfbe4b84606cb9b8ac6f51b473b1d351924080aa/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bfbe4b84606cb9b8ac6f51b473b1d351924080aa/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=bfbe4b84606cb9b8ac6f51b473b1d351924080aa",
      "patch": "@@ -4470,8 +4470,15 @@ aarch64_record_data_proc_simd_fp (insn_decode_record *aarch64_insn_r)\n   if (record_debug)\n     debug_printf (\"\\n\");\n \n+  /* Record the V/X register.  */\n   aarch64_insn_r->reg_rec_count++;\n-  gdb_assert (aarch64_insn_r->reg_rec_count == 1);\n+\n+  /* Some of these instructions may set bits in the FPSR, so record it\n+     too.  */\n+  record_buf[1] = AARCH64_FPSR_REGNUM;\n+  aarch64_insn_r->reg_rec_count++;\n+\n+  gdb_assert (aarch64_insn_r->reg_rec_count == 2);\n   REG_ALLOC (aarch64_insn_r->aarch64_regs, aarch64_insn_r->reg_rec_count,\n \t     record_buf);\n   return AARCH64_RECORD_SUCCESS;"
    }
  ]
}