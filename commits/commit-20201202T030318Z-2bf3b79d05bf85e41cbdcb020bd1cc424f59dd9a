{
  "sha": "2bf3b79d05bf85e41cbdcb020bd1cc424f59dd9a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmJmM2I3OWQwNWJmODVlNDFjYmRjYjAyMGJkMWNjNDI0ZjU5ZGQ5YQ==",
  "commit": {
    "author": {
      "name": "Sergio Durigan Junior",
      "email": "sergiodj@sergiodj.net",
      "date": "2020-11-14T22:42:46Z"
    },
    "committer": {
      "name": "Sergio Durigan Junior",
      "email": "sergiodj@sergiodj.net",
      "date": "2020-12-02T03:03:18Z"
    },
    "message": "Search for DWZ files in debug-file-directories as well\n\nWhen Debian (and Ubuntu) builds its binaries, it (still) doesn't use\ndwz's \"--relative\" option.  This causes their debuginfo files to\ncarry a .gnu_debugaltlink section containing a full pathname to the\nDWZ alt debug file, like this:\n\n  $ readelf -wk /usr/bin/cat\n  Contents of the .gnu_debugaltlink section:\n\n    Separate debug info file: /usr/lib/debug/.dwz/x86_64-linux-gnu/coreutils.debug\n    Build-ID (0x14 bytes):\n   ee 76 5d 71 97 37 ce 46 99 44 32 bb e8 a9 1a ef 99 96 88 db\n\n  Contents of the .gnu_debuglink section:\n\n    Separate debug info file: 06d3bee37b8c7e67b31cb2689cb351102ae73b.debug\n    CRC value: 0x53267655\n\nThis usually works OK, because most of the debuginfo files installed\nvia apt will be present in /usr/lib/debug anyway.  However, imagine\nthe following scenario:\n\n- You are using /usr/bin/cat, it crashes on you and generates a\n  corefile.\n\n- You don't want/need to \"apt install\" the debuginfo file for\n  coreutils from the repositories.  Instead, you already have the\n  debuginfo files in a separate directory (e.g., $HOME/dbgsym).\n\n- You start GDB and \"set debug-file-directory $HOME/dbgsym/usr/lib/debug\".\n  You then get the following message:\n\n  $ gdb -ex 'set debug-file-directory ./dbgsym/usr/lib/debug' -ex 'file /bin/cat' -ex 'core-file ./cat.core'\n  GNU gdb (Ubuntu 10.1-0ubuntu1) 10.1\n  ...\n  Reading symbols from /bin/cat...\n  Reading symbols from /home/sergio/gdb/dbgsym/usr/lib/debug/.build-id/bc/06d3bee37b8c7e67b31cb2689cb351102ae73b.debug...\n  could not find '.gnu_debugaltlink' file for /home/sergio/gdb/dbgsym/usr/lib/debug/.build-id/bc/06d3bee37b8c7e67b31cb2689cb351102ae73b.debug\n\nThis error happens because GDB is trying to locate the build-id\nlink (inside /home/sergio/gdb/dbgsym/usr/lib/debug/.build-id) for the\nDWZ alt debug file, which doesn't exist.  Arguably, this is a problem\nwith how dh_dwz works in Debian, and it's something I'm also planning\nto tackle.  But, back at the problem at hand.\n\nBesides not being able to find the build-id link in the directory\nmentioned above, GDB also tried to open the DWZ alt file using its\nfilename.  The problem here is that, since we don't have the distro's\ndebuginfo installed, it can't find anything under /usr/lib/debug that\nsatisfies it.\n\nIt occurred to me that a good way to workaround this problem is to\nactually try to locate the DWZ alt debug file inside the\ndebug-file-directories (that were likely provided by the user).  So\nthis is what the proposed patch does.\n\nThe idea here is simple: get the filename extracted from the\n.gnu_debugaltlink section, and manipulate it in order to replace the\ninitial part of the path (everything before \"/.dwz/\") by whatever\ndebug-file-directories the user might have provided.\n\nI talked with Mark Wielaard and he agrees this is a sensible approach.\nIn fact, apparently this is something that eu-readelf also does.\n\nI regtested this code, and no regressions were found.\n\n2020-12-01  Sergio Durigan Junior  <sergiodj@sergiodj.net>\n\n\t* dwarf2/read.c (dwz_search_other_debugdirs): New function.\n\t(dwarf2_get_dwz_file): Convert 'filename' to a\n\tstd::string.  Use dwz_search_other_debugdirs to search for DWZ\n\tfiles in the debug-file-directories provided by the user as well.",
    "tree": {
      "sha": "0885f67f968e107a8e50816dc89ba7e476c7b45c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0885f67f968e107a8e50816dc89ba7e476c7b45c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2bf3b79d05bf85e41cbdcb020bd1cc424f59dd9a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2bf3b79d05bf85e41cbdcb020bd1cc424f59dd9a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2bf3b79d05bf85e41cbdcb020bd1cc424f59dd9a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2bf3b79d05bf85e41cbdcb020bd1cc424f59dd9a/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "77bf7e991150d3fac70294910c027c43ae5789b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/77bf7e991150d3fac70294910c027c43ae5789b6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/77bf7e991150d3fac70294910c027c43ae5789b6"
    }
  ],
  "stats": {
    "total": 114,
    "additions": 107,
    "deletions": 7
  },
  "files": [
    {
      "sha": "4946a522df885b474d2188a8396f82b78be944a3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bf3b79d05bf85e41cbdcb020bd1cc424f59dd9a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bf3b79d05bf85e41cbdcb020bd1cc424f59dd9a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2bf3b79d05bf85e41cbdcb020bd1cc424f59dd9a",
      "patch": "@@ -1,3 +1,10 @@\n+2020-12-01  Sergio Durigan Junior  <sergiodj@sergiodj.net>\n+\n+\t* dwarf2/read.c (dwz_search_other_debugdirs): New function.\n+\t(dwarf2_get_dwz_file): Convert 'filename' to a\n+\tstd::string.  Use dwz_search_other_debugdirs to search for DWZ\n+\tfiles in the debug-file-directories provided by the user as well.\n+\n 2020-12-01  Tom Tromey  <tom@tromey.com>\n \n \t* parse.c (expr_builder::expr_builder): Initialize expout."
    },
    {
      "sha": "9468b9144e68a4090e0c111a45f9a000d38f1c1d",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 100,
      "deletions": 7,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2bf3b79d05bf85e41cbdcb020bd1cc424f59dd9a/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2bf3b79d05bf85e41cbdcb020bd1cc424f59dd9a/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=2bf3b79d05bf85e41cbdcb020bd1cc424f59dd9a",
      "patch": "@@ -2185,12 +2185,100 @@ locate_dwz_sections (bfd *abfd, asection *sectp, dwz_file *dwz_file)\n     }\n }\n \n+/* Attempt to find a .dwz file (whose full path is represented by\n+   FILENAME) in all of the specified debug file directories provided.\n+\n+   Return the equivalent gdb_bfd_ref_ptr of the .dwz file found, or\n+   nullptr if it could not find anything.  */\n+\n+static gdb_bfd_ref_ptr\n+dwz_search_other_debugdirs (std::string &filename, bfd_byte *buildid,\n+\t\t\t    size_t buildid_len)\n+{\n+  /* Let's assume that the path represented by FILENAME has the\n+     \"/.dwz/\" subpath in it.  This is what (most) GNU/Linux\n+     distributions do, anyway.  */\n+  size_t dwz_pos = filename.find (\"/.dwz/\");\n+\n+  if (dwz_pos == std::string::npos)\n+    return nullptr;\n+\n+  /* This is an obvious assertion, but it's here more to educate\n+     future readers of this code that FILENAME at DWZ_POS *must*\n+     contain a directory separator.  */\n+  gdb_assert (IS_DIR_SEPARATOR (filename[dwz_pos]));\n+\n+  gdb_bfd_ref_ptr dwz_bfd;\n+  std::vector<gdb::unique_xmalloc_ptr<char>> debugdir_vec\n+    = dirnames_to_char_ptr_vec (debug_file_directory);\n+\n+  for (const gdb::unique_xmalloc_ptr<char> &debugdir : debugdir_vec)\n+    {\n+      /* The idea is to iterate over the\n+\t debug file directories provided by the user and\n+\t replace the hard-coded path in the \"filename\" by each\n+\t debug-file-directory.\n+\n+\t For example, suppose that filename is:\n+\n+\t   /usr/lib/debug/.dwz/foo.dwz\n+\n+\t And suppose that we have \"$HOME/bar\" as the\n+\t debug-file-directory.  We would then adjust filename\n+\t to look like:\n+\n+\t   $HOME/bar/.dwz/foo.dwz\n+\n+\t which would hopefully allow us to find the alt debug\n+\t file.  */\n+      std::string ddir = debugdir.get ();\n+\n+      if (ddir.empty ())\n+\tcontinue;\n+\n+      /* Make sure the current debug-file-directory ends with a\n+\t directory separator.  This is needed because, if FILENAME\n+\t contains something like \"/usr/lib/abcde/.dwz/foo.dwz\" and\n+\t DDIR is \"/usr/lib/abc\", then could wrongfully skip it\n+\t below.  */\n+      if (!IS_DIR_SEPARATOR (ddir.back ()))\n+\tddir += SLASH_STRING;\n+\n+      /* Check whether the beginning of FILENAME is DDIR.  If it is,\n+\t then we are dealing with a file which we already attempted to\n+\t open before, so we just skip it and continue processing the\n+\t remaining debug file directories.  */\n+      if (filename.size () > ddir.size ()\n+\t  && filename.compare (0, ddir.size (), ddir) == 0)\n+\tcontinue;\n+\n+      /* Replace FILENAME's default debug-file-directory with\n+\t DDIR.  */\n+      std::string new_filename = ddir + &filename[dwz_pos + 1];\n+\n+      dwz_bfd = gdb_bfd_open (new_filename.c_str (), gnutarget);\n+\n+      if (dwz_bfd == nullptr)\n+\tcontinue;\n+\n+      if (!build_id_verify (dwz_bfd.get (), buildid_len, buildid))\n+\t{\n+\t  dwz_bfd.reset (nullptr);\n+\t  continue;\n+\t}\n+\n+      /* Found it.  */\n+      break;\n+    }\n+\n+  return dwz_bfd;\n+}\n+\n /* See dwarf2read.h.  */\n \n struct dwz_file *\n dwarf2_get_dwz_file (dwarf2_per_bfd *per_bfd)\n {\n-  const char *filename;\n   bfd_size_type buildid_len_arg;\n   size_t buildid_len;\n   bfd_byte *buildid;\n@@ -2214,21 +2302,19 @@ dwarf2_get_dwz_file (dwarf2_per_bfd *per_bfd)\n \n   buildid_len = (size_t) buildid_len_arg;\n \n-  filename = data.get ();\n+  std::string filename = data.get ();\n \n-  std::string abs_storage;\n-  if (!IS_ABSOLUTE_PATH (filename))\n+  if (!IS_ABSOLUTE_PATH (filename.c_str ()))\n     {\n       gdb::unique_xmalloc_ptr<char> abs\n \t= gdb_realpath (bfd_get_filename (per_bfd->obfd));\n \n-      abs_storage = ldirname (abs.get ()) + SLASH_STRING + filename;\n-      filename = abs_storage.c_str ();\n+      filename = ldirname (abs.get ()) + SLASH_STRING + filename;\n     }\n \n   /* First try the file name given in the section.  If that doesn't\n      work, try to use the build-id instead.  */\n-  gdb_bfd_ref_ptr dwz_bfd (gdb_bfd_open (filename, gnutarget));\n+  gdb_bfd_ref_ptr dwz_bfd (gdb_bfd_open (filename.c_str (), gnutarget));\n   if (dwz_bfd != NULL)\n     {\n       if (!build_id_verify (dwz_bfd.get (), buildid_len, buildid))\n@@ -2238,6 +2324,13 @@ dwarf2_get_dwz_file (dwarf2_per_bfd *per_bfd)\n   if (dwz_bfd == NULL)\n     dwz_bfd = build_id_to_debug_bfd (buildid_len, buildid);\n \n+  if (dwz_bfd == nullptr)\n+    {\n+      /* If the user has provided us with different\n+\t debug file directories, we can try them in order.  */\n+      dwz_bfd = dwz_search_other_debugdirs (filename, buildid, buildid_len);\n+    }\n+\n   if (dwz_bfd == nullptr)\n     {\n       gdb::unique_xmalloc_ptr<char> alt_filename;"
    }
  ]
}