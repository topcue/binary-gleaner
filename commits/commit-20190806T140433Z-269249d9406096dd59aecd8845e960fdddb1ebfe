{
  "sha": "269249d9406096dd59aecd8845e960fdddb1ebfe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjY5MjQ5ZDk0MDYwOTZkZDU5YWVjZDg4NDVlOTYwZmRkZGIxZWJmZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-23T14:22:50Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-08-06T14:04:33Z"
    },
    "message": "Fix latent bug in source cache\n\nThe source cache was not returning the final \\n of the requested range\nof lines.  This caused regressions with later patches in this series,\nso this patch pre-emptively fixes the bug.\n\nThis adds a self-test of \"extract_lines\" to the source cache code.  To\nmake it simpler to test, I changed extract_lines to be a static\nfunction, and changed it's API a bit.\n\ngdb/ChangeLog\n2019-08-06  Tom Tromey  <tromey@adacore.com>\n\n\t* source-cache.c (extract_lines): No longer a method.\n\tChanged type of parameter.  Include final newline.\n\t(selftests::extract_lines_test): New function.\n\t(_initialize_source_cache): Likewise.\n\t* source-cache.h (class source_cache)\n\t<extract_lines>: Don't declare.",
    "tree": {
      "sha": "8a74c5a0650640b8a702853502b3bda2be844f55",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8a74c5a0650640b8a702853502b3bda2be844f55"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/269249d9406096dd59aecd8845e960fdddb1ebfe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/269249d9406096dd59aecd8845e960fdddb1ebfe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/269249d9406096dd59aecd8845e960fdddb1ebfe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/269249d9406096dd59aecd8845e960fdddb1ebfe/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c0e8dcd87101119806c5bbca4c7b649c1b8c0996",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0e8dcd87101119806c5bbca4c7b649c1b8c0996",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c0e8dcd87101119806c5bbca4c7b649c1b8c0996"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 47,
    "deletions": 17
  },
  "files": [
    {
      "sha": "9fb0abb2175f9611993943797a5e58f27d594a8b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/269249d9406096dd59aecd8845e960fdddb1ebfe/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/269249d9406096dd59aecd8845e960fdddb1ebfe/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=269249d9406096dd59aecd8845e960fdddb1ebfe",
      "patch": "@@ -1,3 +1,12 @@\n+2019-08-06  Tom Tromey  <tromey@adacore.com>\n+\n+\t* source-cache.c (extract_lines): No longer a method.\n+\tChanged type of parameter.  Include final newline.\n+\t(selftests::extract_lines_test): New function.\n+\t(_initialize_source_cache): Likewise.\n+\t* source-cache.h (class source_cache)\n+\t<extract_lines>: Don't declare.\n+\n 2019-08-06  Tom Tromey  <tromey@adacore.com>\n \n \t* breakpoint.c (init_breakpoint_sal): Update."
    },
    {
      "sha": "f0cb6b80059e58ad4240f192e2e64aff016c03e9",
      "filename": "gdb/source-cache.c",
      "status": "modified",
      "additions": 38,
      "deletions": 11,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/269249d9406096dd59aecd8845e960fdddb1ebfe/gdb/source-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/269249d9406096dd59aecd8845e960fdddb1ebfe/gdb/source-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source-cache.c?ref=269249d9406096dd59aecd8845e960fdddb1ebfe",
      "patch": "@@ -22,6 +22,7 @@\n #include \"source.h\"\n #include \"cli/cli-style.h\"\n #include \"symtab.h\"\n+#include \"gdbsupport/selftest.h\"\n \n #ifdef HAVE_SOURCE_HIGHLIGHT\n /* If Gnulib redirects 'open' and 'close' to its replacements\n@@ -80,19 +81,20 @@ source_cache::get_plain_source_lines (struct symtab *s, int first_line,\n   return true;\n }\n \n-/* See source-cache.h.  */\n-\n-std::string\n-source_cache::extract_lines (const struct source_text &text, int first_line,\n-\t\t\t     int last_line)\n+/* A helper function for get_plain_source_lines that extracts the\n+   desired source lines from TEXT, putting them into LINES_OUT.  The\n+   arguments are as for get_source_lines.  The return value is the\n+   desired lines.  */\n+static std::string\n+extract_lines (const std::string &text, int first_line, int last_line)\n {\n   int lineno = 1;\n   std::string::size_type pos = 0;\n   std::string::size_type first_pos = std::string::npos;\n \n   while (pos != std::string::npos && lineno <= last_line)\n     {\n-      std::string::size_type new_pos = text.contents.find ('\\n', pos);\n+      std::string::size_type new_pos = text.find ('\\n', pos);\n \n       if (lineno == first_line)\n \tfirst_pos = pos;\n@@ -103,8 +105,10 @@ source_cache::extract_lines (const struct source_text &text, int first_line,\n \t  if (first_pos == std::string::npos)\n \t    return {};\n \t  if (pos == std::string::npos)\n-\t    pos = text.contents.size ();\n-\t  return text.contents.substr (first_pos, pos - first_pos);\n+\t    pos = text.size ();\n+\t  else\n+\t    ++pos;\n+\t  return text.substr (first_pos, pos - first_pos);\n \t}\n       ++lineno;\n       ++pos;\n@@ -187,7 +191,7 @@ source_cache::get_source_lines (struct symtab *s, int first_line,\n \t{\n \t  if (item.fullname == fullname)\n \t    {\n-\t      *lines = extract_lines (item, first_line, last_line);\n+\t      *lines = extract_lines (item.contents, first_line, last_line);\n \t      return true;\n \t    }\n \t}\n@@ -233,8 +237,8 @@ source_cache::get_source_lines (struct symtab *s, int first_line,\n \t      if (m_source_map.size () > MAX_ENTRIES)\n \t\tm_source_map.erase (m_source_map.begin ());\n \n-\t      *lines = extract_lines (m_source_map.back (), first_line,\n-\t\t\t\t      last_line);\n+\t      *lines = extract_lines (m_source_map.back ().contents,\n+\t\t\t\t      first_line, last_line);\n \t      return true;\n \t    }\n \t}\n@@ -243,3 +247,26 @@ source_cache::get_source_lines (struct symtab *s, int first_line,\n \n   return get_plain_source_lines (s, first_line, last_line, lines);\n }\n+\n+#if GDB_SELF_TEST\n+namespace selftests\n+{\n+static void extract_lines_test ()\n+{\n+  std::string input_text = \"abc\\ndef\\nghi\\njkl\\n\";\n+\n+  SELF_CHECK (extract_lines (input_text, 1, 1) == \"abc\\n\");\n+  SELF_CHECK (extract_lines (input_text, 2, 1) == \"\");\n+  SELF_CHECK (extract_lines (input_text, 1, 2) == \"abc\\ndef\\n\");\n+  SELF_CHECK (extract_lines (\"abc\", 1, 1) == \"abc\");\n+}\n+}\n+#endif\n+\n+void\n+_initialize_source_cache ()\n+{\n+#if GDB_SELF_TEST\n+  selftests::register_test (\"source-cache\", selftests::extract_lines_test);\n+#endif\n+}"
    },
    {
      "sha": "a00efbf3fba26ffc0360aaac13b113c4dd9931a8",
      "filename": "gdb/source-cache.h",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/269249d9406096dd59aecd8845e960fdddb1ebfe/gdb/source-cache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/269249d9406096dd59aecd8845e960fdddb1ebfe/gdb/source-cache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source-cache.h?ref=269249d9406096dd59aecd8845e960fdddb1ebfe",
      "patch": "@@ -63,12 +63,6 @@ class source_cache\n      are as for get_source_lines.  */\n   bool get_plain_source_lines (struct symtab *s, int first_line,\n \t\t\t       int last_line, std::string *lines_out);\n-  /* A helper function for get_plain_source_lines that extracts the\n-     desired source lines from TEXT, putting them into LINES_OUT.  The\n-     arguments are as for get_source_lines.  The return value is the\n-     desired lines.  */\n-  std::string extract_lines (const struct source_text &text, int first_line,\n-\t\t\t     int last_line);\n \n   /* The contents of the cache.  */\n   std::vector<source_text> m_source_map;"
    }
  ]
}