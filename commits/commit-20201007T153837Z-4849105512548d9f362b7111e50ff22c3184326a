{
  "sha": "4849105512548d9f362b7111e50ff22c3184326a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDg0OTEwNTUxMjU0OGQ5ZjM2MmI3MTExZTUwZmYyMmMzMTg0MzI2YQ==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-10-07T14:32:11Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-10-07T15:38:37Z"
    },
    "message": "Stop passing netbsd_process_target to local functions\n\nSwitch from target->read_memory to netbsd_nat::read_memory and\ncleanup the code.\n\nNo functional change.\n\ngdbserver/ChangeLog:\n\n        * netbsd-low.cc (get_dynamic, get_r_debug, read_one_ptr)\n        (netbsd_qxfer_libraries_svr4): Remove \"target\" argument and update.\n        (netbsd_process_target::qxfer_libraries_svr4): Update.",
    "tree": {
      "sha": "562d3c4f15ad7de4d1757757c3a4c95eedd798bc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/562d3c4f15ad7de4d1757757c3a4c95eedd798bc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4849105512548d9f362b7111e50ff22c3184326a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4849105512548d9f362b7111e50ff22c3184326a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4849105512548d9f362b7111e50ff22c3184326a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4849105512548d9f362b7111e50ff22c3184326a/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b68bef998c81f01d73c02e7a8fb41ad8db685db1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b68bef998c81f01d73c02e7a8fb41ad8db685db1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b68bef998c81f01d73c02e7a8fb41ad8db685db1"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 29,
    "deletions": 22
  },
  "files": [
    {
      "sha": "d53d326915fb08a3bdab4538c41892daa6e23602",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4849105512548d9f362b7111e50ff22c3184326a/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4849105512548d9f362b7111e50ff22c3184326a/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=4849105512548d9f362b7111e50ff22c3184326a",
      "patch": "@@ -1,3 +1,9 @@\n+2020-10-07  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* netbsd-low.cc (get_dynamic, get_r_debug, read_one_ptr)\n+\t(netbsd_qxfer_libraries_svr4): Remove \"target\" argument and update.\n+\t(netbsd_process_target::qxfer_libraries_svr4): Update.\n+\n 2020-10-07  Kamil Rytarowski  <n54@gmx.com>\n \n \t* netbsd-low.cc: Fix whitespace formatting."
    },
    {
      "sha": "30028d3a384a50bec07869b5f45479330fd0eb32",
      "filename": "gdbserver/netbsd-low.cc",
      "status": "modified",
      "additions": 23,
      "deletions": 22,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4849105512548d9f362b7111e50ff22c3184326a/gdbserver/netbsd-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4849105512548d9f362b7111e50ff22c3184326a/gdbserver/netbsd-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/netbsd-low.cc?ref=4849105512548d9f362b7111e50ff22c3184326a",
      "patch": "@@ -814,7 +814,7 @@ int get_phdr_phnum_from_proc_auxv (const pid_t pid,\n \n template <typename T>\n static CORE_ADDR\n-get_dynamic (netbsd_process_target *target, const pid_t pid)\n+get_dynamic (const pid_t pid)\n {\n   typedef typename std::conditional<sizeof(T) == sizeof(int64_t),\n \t\t\t\t    Elf64_Phdr, Elf32_Phdr>::type phdr_type;\n@@ -828,7 +828,8 @@ get_dynamic (netbsd_process_target *target, const pid_t pid)\n   std::vector<unsigned char> phdr_buf;\n   phdr_buf.resize (num_phdr * phdr_size);\n \n-  if (target->read_memory (phdr_memaddr, phdr_buf.data (), phdr_buf.size ()))\n+  if (netbsd_nat::read_memory (pid, phdr_buf.data (), phdr_memaddr,\n+\t\t\t       phdr_buf.size (), nullptr))\n     return 0;\n \n   /* Compute relocation: it is expected to be 0 for \"regular\" executables,\n@@ -875,19 +876,20 @@ get_dynamic (netbsd_process_target *target, const pid_t pid)\n \n template <typename T>\n static CORE_ADDR\n-get_r_debug (netbsd_process_target *target, const int pid)\n+get_r_debug (const pid_t pid)\n {\n   typedef typename std::conditional<sizeof(T) == sizeof(int64_t),\n \t\t\t\t    Elf64_Dyn, Elf32_Dyn>::type dyn_type;\n   const int dyn_size = sizeof (dyn_type);\n   unsigned char buf[sizeof (dyn_type)];  /* The larger of the two.  */\n   CORE_ADDR map = -1;\n \n-  CORE_ADDR dynamic_memaddr = get_dynamic<T> (target, pid);\n+  CORE_ADDR dynamic_memaddr = get_dynamic<T> (pid);\n   if (dynamic_memaddr == 0)\n     return map;\n \n-  while (target->read_memory (dynamic_memaddr, buf, dyn_size) == 0)\n+  while (netbsd_nat::read_memory (pid, buf, dynamic_memaddr, dyn_size, nullptr)\n+\t == 0)\n     {\n       dyn_type *const dyn = (dyn_type *) buf;\n #if defined DT_MIPS_RLD_MAP\n@@ -900,8 +902,8 @@ get_r_debug (netbsd_process_target *target, const int pid)\n \n       if (dyn->d_tag == DT_MIPS_RLD_MAP)\n \t{\n-\t  if (read_memory (dyn->d_un.d_val,\n-\t\t\t   rld_map.buf, sizeof (rld_map.buf)) == 0)\n+\t  if (netbsd_nat::read_memory (pid, rld_map.buf, dyn->d_un.d_val,\n+\t\t\t\t       sizeof (rld_map.buf), nullptr) == 0)\n \t    return rld_map.map;\n \t  else\n \t    break;\n@@ -923,8 +925,7 @@ get_r_debug (netbsd_process_target *target, const int pid)\n /* Read one pointer from MEMADDR in the inferior.  */\n \n static int\n-read_one_ptr (netbsd_process_target *target, CORE_ADDR memaddr, CORE_ADDR *ptr,\n-\t      int ptr_size)\n+read_one_ptr (const pid_t pid, CORE_ADDR memaddr, CORE_ADDR *ptr, int ptr_size)\n {\n   /* Go through a union so this works on either big or little endian\n      hosts, when the inferior's pointer size is smaller than the size\n@@ -938,7 +939,7 @@ read_one_ptr (netbsd_process_target *target, CORE_ADDR memaddr, CORE_ADDR *ptr,\n     unsigned char uc;\n   } addr;\n \n-  int ret = target->read_memory (memaddr, &addr.uc, ptr_size);\n+  int ret = netbsd_nat::read_memory (pid, &addr.uc, memaddr, ptr_size, nullptr);\n   if (ret == 0)\n     {\n       if (ptr_size == sizeof (CORE_ADDR))\n@@ -955,8 +956,7 @@ read_one_ptr (netbsd_process_target *target, CORE_ADDR memaddr, CORE_ADDR *ptr,\n \n template <typename T>\n int\n-netbsd_qxfer_libraries_svr4 (netbsd_process_target *target,\n-\t\t\t     const pid_t pid, const char *annex,\n+netbsd_qxfer_libraries_svr4 (const pid_t pid, const char *annex,\n \t\t\t     unsigned char *readbuf,\n \t\t\t     unsigned const char *writebuf,\n \t\t\t     CORE_ADDR offset, int len)\n@@ -1042,7 +1042,7 @@ netbsd_qxfer_libraries_svr4 (netbsd_process_target *target,\n \n   if (lm_addr == 0)\n     {\n-      CORE_ADDR r_debug = get_r_debug<T> (target, pid);\n+      CORE_ADDR r_debug = get_r_debug<T> (pid);\n \n       /* We failed to find DT_DEBUG.  Such situation will not change\n \t for this inferior - do not retry it.  Report it to GDB as\n@@ -1053,7 +1053,7 @@ netbsd_qxfer_libraries_svr4 (netbsd_process_target *target,\n       if (r_debug != 0)\n \t{\n \t  CORE_ADDR map_offset = r_debug + lmo->r_map_offset;\n-\t  if (read_one_ptr (target, map_offset, &lm_addr, ptr_size) != 0)\n+\t  if (read_one_ptr (pid, map_offset, &lm_addr, ptr_size) != 0)\n \t    warning (\"unable to read r_map from %s\",\n \t\t     core_addr_to_string (map_offset));\n \t}\n@@ -1062,15 +1062,15 @@ netbsd_qxfer_libraries_svr4 (netbsd_process_target *target,\n   std::string document = \"<library-list-svr4 version=\\\"1.0\\\"\";\n \n   while (lm_addr\n-\t && read_one_ptr (target, lm_addr + lmo->l_name_offset,\n+\t && read_one_ptr (pid, lm_addr + lmo->l_name_offset,\n \t\t\t  &l_name, ptr_size) == 0\n-\t && read_one_ptr (target, lm_addr + lmo->l_addr_offset,\n+\t && read_one_ptr (pid, lm_addr + lmo->l_addr_offset,\n \t\t\t  &l_addr, ptr_size) == 0\n-\t && read_one_ptr (target, lm_addr + lmo->l_ld_offset,\n+\t && read_one_ptr (pid, lm_addr + lmo->l_ld_offset,\n \t\t\t  &l_ld, ptr_size) == 0\n-\t && read_one_ptr (target, lm_addr + lmo->l_prev_offset,\n+\t && read_one_ptr (pid, lm_addr + lmo->l_prev_offset,\n \t\t\t  &l_prev, ptr_size) == 0\n-\t && read_one_ptr (target, lm_addr + lmo->l_next_offset,\n+\t && read_one_ptr (pid, lm_addr + lmo->l_next_offset,\n \t\t\t  &l_next, ptr_size) == 0)\n     {\n       if (lm_prev != l_prev)\n@@ -1096,7 +1096,8 @@ netbsd_qxfer_libraries_svr4 (netbsd_process_target *target,\n \t  /* Not checking for error because reading may stop before\n \t     we've got PATH_MAX worth of characters.  */\n \t  libname[0] = '\\0';\n-\t  target->read_memory (l_name, libname, sizeof (libname) - 1);\n+\t  netbsd_nat::read_memory (pid, libname, l_name, sizeof (libname) - 1,\n+\t\t\t\t   nullptr);\n \t  libname[sizeof (libname) - 1] = '\\0';\n \t  if (libname[0] != '\\0')\n \t    {\n@@ -1187,10 +1188,10 @@ netbsd_process_target::qxfer_libraries_svr4 (const char *annex,\n   bool is_elf64 = elf_64_file_p (netbsd_nat::pid_to_exec_file (pid));\n \n   if (is_elf64)\n-    return netbsd_qxfer_libraries_svr4<int64_t> (this, pid, annex, readbuf,\n+    return netbsd_qxfer_libraries_svr4<int64_t> (pid, annex, readbuf,\n \t\t\t\t\t\t writebuf, offset, len);\n   else\n-    return netbsd_qxfer_libraries_svr4<int32_t> (this, pid, annex, readbuf,\n+    return netbsd_qxfer_libraries_svr4<int32_t> (pid, annex, readbuf,\n \t\t\t\t\t\t writebuf, offset, len);\n }\n "
    }
  ]
}