{
  "sha": "48ef937e913d31bbd24a7ae568d30b499a6b3477",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDhlZjkzN2U5MTNkMzFiYmQyNGE3YWU1NjhkMzBiNDk5YTZiMzQ3Nw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-20T06:55:48Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-20T06:55:48Z"
    },
    "message": "x86: honor absolute section when emitting code\n\nVarious provisions exist for insns to be placed in the absolute section,\nyet actually trying to do so didn't work. While data emission (of non-\nzero values) is not allowed by generic code, I think this functionality\nis useful for the programmer to be able to determine the size of insns.\nTherefore, rather than turning the silnet failure into a verbose one,\nmake things mostly work; the one class of insns not supported (yet) are\nbranches (JMP and Jcc) with dynamically determined displacement widths.\nIn this one case, an error now gets reported instead of silently\nignoring the code.\n\nAlso avoid recording ISA / feature usage for insns emitted to the\nabsolute section.",
    "tree": {
      "sha": "1756069c86fa289c0c1490160997871bd03f1723",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1756069c86fa289c0c1490160997871bd03f1723"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/48ef937e913d31bbd24a7ae568d30b499a6b3477",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48ef937e913d31bbd24a7ae568d30b499a6b3477",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/48ef937e913d31bbd24a7ae568d30b499a6b3477",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48ef937e913d31bbd24a7ae568d30b499a6b3477/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "693bec1ed63fcd4dc00ce13a702a256955f8cc6f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/693bec1ed63fcd4dc00ce13a702a256955f8cc6f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/693bec1ed63fcd4dc00ce13a702a256955f8cc6f"
    }
  ],
  "stats": {
    "total": 221,
    "additions": 189,
    "deletions": 32
  },
  "files": [
    {
      "sha": "f63af2efc1641f8d00424bb48c71a9b2201d4d1d",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=48ef937e913d31bbd24a7ae568d30b499a6b3477",
      "patch": "@@ -1,3 +1,16 @@\n+2020-07-20  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (frag_opcode_byte): New.\n+\t(output_branch): Emit error when in absolute section.\n+\t(output_jump, output_insn): Use frag_opcode_byte. Handle being\n+\tin absolute section.\n+\t(output_interseg_jump, output_disp, output_imm): Handle being in\n+\tabsolute section.\n+\t* testsuite/gas/i386/sizing.s,\n+\ttestsuite/gas/i386/sizing32.d,\n+\ttestsuite/gas/i386/sizing64.d: New.\n+\t* testsuite/gas/i386/i386.exp: Run new tests.\n+\n 2020-07-20  Jan Beulich  <jbeulich@suse.com>\n \n \t* testsuite/gas/i386/i386.exp: Include *-*-vxworks alongside"
    },
    {
      "sha": "5b0a014eaab39ba5276ced2049e7d6b0b498f22a",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 76,
      "deletions": 32,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=48ef937e913d31bbd24a7ae568d30b499a6b3477",
      "patch": "@@ -8426,6 +8426,15 @@ build_modrm_byte (void)\n   return default_seg;\n }\n \n+static INLINE void\n+frag_opcode_byte (unsigned char byte)\n+{\n+  if (now_seg != absolute_section)\n+    FRAG_APPEND_1_CHAR (byte);\n+  else\n+    ++abs_section_offset;\n+}\n+\n static unsigned int\n flip_code16 (unsigned int code16)\n {\n@@ -8449,6 +8458,12 @@ output_branch (void)\n   symbolS *sym;\n   offsetT off;\n \n+  if (now_seg == absolute_section)\n+    {\n+      as_bad (_(\"relaxable branches not supported in absolute section\"));\n+      return;\n+    }\n+\n   code16 = flag_code == CODE_16BIT ? CODE16 : 0;\n   size = i.disp_encoding == disp_encoding_32bit ? BIG : SMALL;\n \n@@ -8578,14 +8593,14 @@ output_jump (void)\n       size = 1;\n       if (i.prefix[ADDR_PREFIX] != 0)\n \t{\n-\t  FRAG_APPEND_1_CHAR (ADDR_PREFIX_OPCODE);\n+\t  frag_opcode_byte (ADDR_PREFIX_OPCODE);\n \t  i.prefixes -= 1;\n \t}\n       /* Pentium4 branch hints.  */\n       if (i.prefix[SEG_PREFIX] == CS_PREFIX_OPCODE /* not taken */\n \t  || i.prefix[SEG_PREFIX] == DS_PREFIX_OPCODE /* taken */)\n \t{\n-\t  FRAG_APPEND_1_CHAR (i.prefix[SEG_PREFIX]);\n+\t  frag_opcode_byte (i.prefix[SEG_PREFIX]);\n \t  i.prefixes--;\n \t}\n     }\n@@ -8599,7 +8614,7 @@ output_jump (void)\n \n       if (i.prefix[DATA_PREFIX] != 0)\n \t{\n-\t  FRAG_APPEND_1_CHAR (DATA_PREFIX_OPCODE);\n+\t  frag_opcode_byte (DATA_PREFIX_OPCODE);\n \t  i.prefixes -= 1;\n \t  code16 ^= flip_code16(code16);\n \t}\n@@ -8612,19 +8627,25 @@ output_jump (void)\n   /* BND prefixed jump.  */\n   if (i.prefix[BND_PREFIX] != 0)\n     {\n-      FRAG_APPEND_1_CHAR (i.prefix[BND_PREFIX]);\n+      frag_opcode_byte (i.prefix[BND_PREFIX]);\n       i.prefixes -= 1;\n     }\n \n   if (i.prefix[REX_PREFIX] != 0)\n     {\n-      FRAG_APPEND_1_CHAR (i.prefix[REX_PREFIX]);\n+      frag_opcode_byte (i.prefix[REX_PREFIX]);\n       i.prefixes -= 1;\n     }\n \n   if (i.prefixes != 0)\n     as_warn (_(\"skipping prefixes on `%s'\"), i.tm.name);\n \n+  if (now_seg == absolute_section)\n+    {\n+      abs_section_offset += i.tm.opcode_length + size;\n+      return;\n+    }\n+\n   p = frag_more (i.tm.opcode_length + size);\n   switch (i.tm.opcode_length)\n     {\n@@ -8686,6 +8707,12 @@ output_interseg_jump (void)\n   if (i.prefixes != 0)\n     as_warn (_(\"skipping prefixes on `%s'\"), i.tm.name);\n \n+  if (now_seg == absolute_section)\n+    {\n+      abs_section_offset += prefix + 1 + 2 + size;\n+      return;\n+    }\n+\n   /* 1 opcode; 2 segment; offset  */\n   p = frag_more (prefix + 1 + 2 + size);\n \n@@ -9098,7 +9125,7 @@ output_insn (void)\n   enum mf_jcc_kind mf_jcc = mf_jcc_jo;\n \n #if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)\n-  if (IS_ELF && x86_used_note)\n+  if (IS_ELF && x86_used_note && now_seg != absolute_section)\n     {\n       if (i.tm.cpu_flags.bitfield.cpucmov)\n \tx86_isa_1_used |= GNU_PROPERTY_X86_ISA_1_CMOV;\n@@ -9237,14 +9264,20 @@ output_insn (void)\n \t  && (i.tm.base_opcode == 0xfaee8\n \t      || i.tm.base_opcode == 0xfaef0\n \t      || i.tm.base_opcode == 0xfaef8))\n-        {\n-          /* Encode lfence, mfence, and sfence as\n-             f0 83 04 24 00   lock addl $0x0, (%{re}sp).  */\n-          offsetT val = 0x240483f0ULL;\n-          p = frag_more (5);\n-          md_number_to_chars (p, val, 5);\n-          return;\n-        }\n+\t{\n+\t  /* Encode lfence, mfence, and sfence as\n+\t     f0 83 04 24 00   lock addl $0x0, (%{re}sp).  */\n+\t  if (now_seg != absolute_section)\n+\t    {\n+\t      offsetT val = 0x240483f0ULL;\n+\n+\t      p = frag_more (5);\n+\t      md_number_to_chars (p, val, 5);\n+\t    }\n+\t  else\n+\t    abs_section_offset += 5;\n+\t  return;\n+\t}\n \n       /* Some processors fail on LOCK prefix. This options makes\n \t assembler ignore LOCK prefix and serves as a workaround.  */\n@@ -9343,7 +9376,7 @@ output_insn (void)\n \t  /* The prefix bytes.  */\n \t  for (j = ARRAY_SIZE (i.prefix), q = i.prefix; j > 0; j--, q++)\n \t    if (*q)\n-\t      FRAG_APPEND_1_CHAR (*q);\n+\t      frag_opcode_byte (*q);\n \t}\n       else\n \t{\n@@ -9353,7 +9386,7 @@ output_insn (void)\n \t\t{\n \t\tcase SEG_PREFIX:\n \t\tcase ADDR_PREFIX:\n-\t\t  FRAG_APPEND_1_CHAR (*q);\n+\t\t  frag_opcode_byte (*q);\n \t\t  break;\n \t\tdefault:\n \t\t  /* There should be no other prefixes for instructions\n@@ -9367,13 +9400,20 @@ output_insn (void)\n \t  if (i.vrex)\n \t    abort ();\n \t  /* Now the VEX prefix.  */\n-\t  p = frag_more (i.vex.length);\n-\t  for (j = 0; j < i.vex.length; j++)\n-\t    p[j] = i.vex.bytes[j];\n+\t  if (now_seg != absolute_section)\n+\t    {\n+\t      p = frag_more (i.vex.length);\n+\t      for (j = 0; j < i.vex.length; j++)\n+\t\tp[j] = i.vex.bytes[j];\n+\t    }\n+\t  else\n+\t    abs_section_offset += i.vex.length;\n \t}\n \n       /* Now the opcode; be careful about word order here!  */\n-      if (i.tm.opcode_length == 1)\n+      if (now_seg == absolute_section)\n+\tabs_section_offset += i.tm.opcode_length;\n+      else if (i.tm.opcode_length == 1)\n \t{\n \t  FRAG_APPEND_1_CHAR (i.tm.base_opcode);\n \t}\n@@ -9406,19 +9446,19 @@ output_insn (void)\n       /* Now the modrm byte and sib byte (if present).  */\n       if (i.tm.opcode_modifier.modrm)\n \t{\n-\t  FRAG_APPEND_1_CHAR ((i.rm.regmem << 0\n-\t\t\t       | i.rm.reg << 3\n-\t\t\t       | i.rm.mode << 6));\n+\t  frag_opcode_byte ((i.rm.regmem << 0)\n+\t\t\t     | (i.rm.reg << 3)\n+\t\t\t     | (i.rm.mode << 6));\n \t  /* If i.rm.regmem == ESP (4)\n \t     && i.rm.mode != (Register mode)\n \t     && not 16 bit\n \t     ==> need second modrm byte.  */\n \t  if (i.rm.regmem == ESCAPE_TO_TWO_BYTE_ADDRESSING\n \t      && i.rm.mode != 3\n \t      && !(i.base_reg && i.base_reg->reg_type.bitfield.word))\n-\t    FRAG_APPEND_1_CHAR ((i.sib.base << 0\n-\t\t\t\t | i.sib.index << 3\n-\t\t\t\t | i.sib.scale << 6));\n+\t    frag_opcode_byte ((i.sib.base << 0)\n+\t\t\t      | (i.sib.index << 3)\n+\t\t\t      | (i.sib.scale << 6));\n \t}\n \n       if (i.disp_operands)\n@@ -9586,9 +9626,12 @@ output_disp (fragS *insn_start_frag, offsetT insn_start_off)\n     {\n       if (operand_type_check (i.types[n], disp))\n \t{\n-\t  if (i.op[n].disps->X_op == O_constant)\n+\t  int size = disp_size (n);\n+\n+\t  if (now_seg == absolute_section)\n+\t    abs_section_offset += size;\n+\t  else if (i.op[n].disps->X_op == O_constant)\n \t    {\n-\t      int size = disp_size (n);\n \t      offsetT val = i.op[n].disps->X_add_number;\n \n \t      val = offset_in_range (val >> (size == 1 ? i.memshift : 0),\n@@ -9599,7 +9642,6 @@ output_disp (fragS *insn_start_frag, offsetT insn_start_off)\n \t  else\n \t    {\n \t      enum bfd_reloc_code_real reloc_type;\n-\t      int size = disp_size (n);\n \t      int sign = i.types[n].bitfield.disp32s;\n \t      int pcrel = (i.flags[n] & Operand_PCrel) != 0;\n \t      fixS *fixP;\n@@ -9732,9 +9774,12 @@ output_imm (fragS *insn_start_frag, offsetT insn_start_off)\n \n       if (operand_type_check (i.types[n], imm))\n \t{\n-\t  if (i.op[n].imms->X_op == O_constant)\n+\t  int size = imm_size (n);\n+\n+\t  if (now_seg == absolute_section)\n+\t    abs_section_offset += size;\n+\t  else if (i.op[n].imms->X_op == O_constant)\n \t    {\n-\t      int size = imm_size (n);\n \t      offsetT val;\n \n \t      val = offset_in_range (i.op[n].imms->X_add_number,\n@@ -9749,7 +9794,6 @@ output_imm (fragS *insn_start_frag, offsetT insn_start_off)\n \t\t non-absolute imms).  Try to support other\n \t\t sizes ...  */\n \t      enum bfd_reloc_code_real reloc_type;\n-\t      int size = imm_size (n);\n \t      int sign;\n \n \t      if (i.types[n].bitfield.imm32s"
    },
    {
      "sha": "f4017322cb596e61ca0f917de6897339a951e0bb",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=48ef937e913d31bbd24a7ae568d30b499a6b3477",
      "patch": "@@ -139,6 +139,7 @@ if [expr ([istarget \"i*86-*-*\"] ||  [istarget \"x86_64-*-*\"]) && [gas_32_check]]\n     run_dump_test \"noreg32-data16\"\n     run_list_test \"movx16\" \"-I${srcdir}/$subdir -al\"\n     run_list_test \"movx32\" \"-al\"\n+    run_dump_test \"sizing32\"\n     run_dump_test \"addr16\"\n     run_dump_test \"addr32\"\n     run_dump_test \"code16\"\n@@ -1236,5 +1237,9 @@ if [expr ([istarget \"i*86-*-*\"] || [istarget \"x86_64-*-*\"]) && [gas_64_check]] t\n \n     }\n \n+    set ASFLAGS \"$old_ASFLAGS --64\"\n+\n+    run_dump_test \"sizing64\"\n+\n     set ASFLAGS \"$old_ASFLAGS\"\n }"
    },
    {
      "sha": "c9b9820e4dec8b638b12ed6bbf5697ee441d303a",
      "filename": "gas/testsuite/gas/i386/sizing.s",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/testsuite/gas/i386/sizing.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/testsuite/gas/i386/sizing.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/sizing.s?ref=48ef937e913d31bbd24a7ae568d30b499a6b3477",
      "patch": "@@ -0,0 +1,55 @@\n+\t.macro insn, mnem:req, opnds:vararg\n+\t.struct\n+\t\\mnem\t\\opnds\n+\t.equiv\t\\mnem, .\n+\t.endm\n+\n+\tinsn\tinc\t%eax\n+\n+\t.equiv .Lis_64bit, inc > 1\n+\n+\tinsn\tadd\t$1, %al\n+\n+\tinsn\tadc\t$1, %cl\n+\n+\tinsn\tsub\t$0x12345678, %eax\n+\n+\tinsn\tsbb\t$0x12345678, %ecx\n+\n+\tinsn\tand\t$1, %eax\n+\n+\tinsn\tcall\t.\n+\n+\tinsn\tjecxz\t.\n+\n+\tinsn\tpextrw\t$0, %xmm0, %eax\n+\n+\t.macro pextrw_store opnds:vararg\n+\t{store} pextrw \\opnds\n+\t.endm\n+\tinsn\tpextrw_store $0, %xmm0, %eax\n+\n+\tinsn\tvpextrw\t$0, %xmm0, %eax\n+\n+\t.macro vpextrw_evex opnds:vararg\n+\t{evex} vpextrw \\opnds\n+\t.endm\n+\tinsn\tvpextrw_evex $0, %xmm0, %eax\n+\n+\t.if .Lis_64bit\n+\n+\tinsn\tmov\t$0x876543210, %rcx\n+\n+\tinsn\tmovq\t0x876543210, %rax\n+\n+\t.else\n+\n+\tinsn\tlcall\t$0, $0\n+\n+\t.code16\n+\n+\tinsn\tljmp\t$0, $0\n+\n+\t.endif\n+\n+\tinsn\tbextr\t$0x11223344, %fs:(,%eax,2), %eax"
    },
    {
      "sha": "3fe8ed80c5d04378037b21920b66170074980822",
      "filename": "gas/testsuite/gas/i386/sizing32.d",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/testsuite/gas/i386/sizing32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/testsuite/gas/i386/sizing32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/sizing32.d?ref=48ef937e913d31bbd24a7ae568d30b499a6b3477",
      "patch": "@@ -0,0 +1,20 @@\n+#name: ix86 insn sizing\n+#nm: -B\n+#source: sizing.s\n+\n+#...\n+0+03 a adc\n+0+02 a add\n+0+03 a and\n+0+10 a bextr\n+0+05 a call\n+0+01 a inc\n+0+02 a jecxz\n+0+07 a lcall\n+0+05 a ljmp\n+0+05 a pextrw\n+0+06 a pextrw_store\n+0+06 a sbb\n+0+05 a sub\n+0+05 a vpextrw\n+0+07 a vpextrw_evex"
    },
    {
      "sha": "d337885f738a51432aa2766813096702ee869f6d",
      "filename": "gas/testsuite/gas/i386/sizing64.d",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/testsuite/gas/i386/sizing64.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48ef937e913d31bbd24a7ae568d30b499a6b3477/gas/testsuite/gas/i386/sizing64.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/sizing64.d?ref=48ef937e913d31bbd24a7ae568d30b499a6b3477",
      "patch": "@@ -0,0 +1,20 @@\n+#name: x86-64 insn sizing\n+#nm: -B\n+#source: sizing.s\n+\n+#...\n+0+03 a adc\n+0+02 a add\n+0+03 a and\n+0+10 a bextr\n+0+05 a call\n+0+02 a inc\n+0+03 a jecxz\n+0+0a a mov\n+0+0a a movq\n+0+05 a pextrw\n+0+06 a pextrw_store\n+0+06 a sbb\n+0+05 a sub\n+0+05 a vpextrw\n+0+07 a vpextrw_evex"
    }
  ]
}