{
  "sha": "fcef6471ed3c07d6eac2d9e0010552994f0891aa",
  "node_id": "C_kwDOANOeidoAKGZjZWY2NDcxZWQzYzA3ZDZlYWMyZDllMDAxMDU1Mjk5NGYwODkxYWE",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-10-31T16:02:03Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-04T19:48:57Z"
    },
    "message": "gdb: pass/return setting setter/getter scalar values by value\n\nThe getter and setter in struct setting always receive and return values\nby const reference.  This is not necessary for scalar values (like bool\nand int), but more importantly it makes it a bit annoying to write a\ngetter, you have to use a scratch static variable or something similar\nthat you can refer to:\n\n  const bool &\n  my_getter ()\n  {\n    static bool value;\n    value = function_returning_bool ();\n    return value;\n  }\n\nChange the getter and setter function signatures to receive and return\nvalue by value instead of by reference, when the underlying data type is\nscalar.  This means that string-based settings will still use\nreferences, but all others will be by value.  The getter above would\nthen be re-written as:\n\n  bool\n  my_getter ()\n  {\n    return function_returning_bool ();\n  }\n\nThis is useful for a patch later in this series that defines a boolean\nsetting with a getter and a setter.\n\nChange-Id: Ieca3a2419fcdb75a6f75948b2c920b548a0af0fd",
    "tree": {
      "sha": "22738befcaa3ea4f3f4533b733fe5a2ae17ca5bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/22738befcaa3ea4f3f4533b733fe5a2ae17ca5bf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fcef6471ed3c07d6eac2d9e0010552994f0891aa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fcef6471ed3c07d6eac2d9e0010552994f0891aa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fcef6471ed3c07d6eac2d9e0010552994f0891aa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fcef6471ed3c07d6eac2d9e0010552994f0891aa/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7ead06a8b65ef038abd65344ff6aea76054ea1d5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ead06a8b65ef038abd65344ff6aea76054ea1d5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7ead06a8b65ef038abd65344ff6aea76054ea1d5"
    }
  ],
  "stats": {
    "total": 142,
    "additions": 81,
    "deletions": 61
  },
  "files": [
    {
      "sha": "667d15585752d7d8b0ccd51e4bac91f7957ab8fa",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 26,
      "deletions": 26,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fcef6471ed3c07d6eac2d9e0010552994f0891aa/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fcef6471ed3c07d6eac2d9e0010552994f0891aa/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=fcef6471ed3c07d6eac2d9e0010552994f0891aa",
      "patch": "@@ -572,8 +572,8 @@ add_setshow_cmd_full (const char *name,\n \t\t      var_types var_type, T *var,\n \t\t      const char *set_doc, const char *show_doc,\n \t\t      const char *help_doc,\n-\t\t      setting_setter_ftype<T> set_setting_func,\n-\t\t      setting_getter_ftype<T> get_setting_func,\n+\t\t      typename setting_func_types<T>::set set_setting_func,\n+\t\t      typename setting_func_types<T>::get get_setting_func,\n \t\t      cmd_func_ftype *set_func,\n \t\t      show_value_ftype *show_func,\n \t\t      struct cmd_list_element **set_list,\n@@ -628,8 +628,8 @@ set_show_commands\n add_setshow_enum_cmd (const char *name, command_class theclass,\n \t\t      const char *const *enumlist, const char *set_doc,\n \t\t      const char *show_doc, const char *help_doc,\n-\t\t      setting_setter_ftype<const char *> set_func,\n-\t\t      setting_getter_ftype<const char *> get_func,\n+\t\t      setting_func_types<const char *>::set set_func,\n+\t\t      setting_func_types<const char *>::get get_func,\n \t\t      show_value_ftype *show_func,\n \t\t      cmd_list_element **set_list,\n \t\t      cmd_list_element **show_list)\n@@ -682,8 +682,8 @@ set_show_commands\n add_setshow_auto_boolean_cmd (const char *name, command_class theclass,\n \t\t\t      const char *set_doc, const char *show_doc,\n \t\t\t      const char *help_doc,\n-\t\t\t      setting_setter_ftype<enum auto_boolean> set_func,\n-\t\t\t      setting_getter_ftype<enum auto_boolean> get_func,\n+\t\t\t      setting_func_types<enum auto_boolean>::set set_func,\n+\t\t\t      setting_func_types<enum auto_boolean>::get get_func,\n \t\t\t      show_value_ftype *show_func,\n \t\t\t      cmd_list_element **set_list,\n \t\t\t      cmd_list_element **show_list)\n@@ -737,8 +737,8 @@ set_show_commands\n add_setshow_boolean_cmd (const char *name, command_class theclass,\n \t\t\t const char *set_doc, const char *show_doc,\n \t\t\t const char *help_doc,\n-\t\t\t setting_setter_ftype<bool> set_func,\n-\t\t\t setting_getter_ftype<bool> get_func,\n+\t\t\t setting_func_types<bool>::set set_func,\n+\t\t\t setting_func_types<bool>::get get_func,\n \t\t\t show_value_ftype *show_func,\n \t\t\t cmd_list_element **set_list,\n \t\t\t cmd_list_element **show_list)\n@@ -784,8 +784,8 @@ set_show_commands\n add_setshow_filename_cmd (const char *name, command_class theclass,\n \t\t\t  const char *set_doc, const char *show_doc,\n \t\t\t  const char *help_doc,\n-\t\t\t  setting_setter_ftype<std::string> set_func,\n-\t\t\t  setting_getter_ftype<std::string> get_func,\n+\t\t\t  setting_func_types<std::string>::set set_func,\n+\t\t\t  setting_func_types<std::string>::get get_func,\n \t\t\t  show_value_ftype *show_func,\n \t\t\t  cmd_list_element **set_list,\n \t\t\t  cmd_list_element **show_list)\n@@ -833,8 +833,8 @@ set_show_commands\n add_setshow_string_cmd (const char *name, command_class theclass,\n \t\t\tconst char *set_doc, const char *show_doc,\n \t\t\tconst char *help_doc,\n-\t\t\tsetting_setter_ftype<std::string> set_func,\n-\t\t\tsetting_getter_ftype<std::string> get_func,\n+\t\t\tsetting_func_types<std::string>::set set_func,\n+\t\t\tsetting_func_types<std::string>::get get_func,\n \t\t\tshow_value_ftype *show_func,\n \t\t\tcmd_list_element **set_list,\n \t\t\tcmd_list_element **show_list)\n@@ -883,8 +883,8 @@ set_show_commands\n add_setshow_string_noescape_cmd (const char *name, command_class theclass,\n \t\t\t\t const char *set_doc, const char *show_doc,\n \t\t\t\t const char *help_doc,\n-\t\t\t\t setting_setter_ftype<std::string> set_func,\n-\t\t\t\t setting_getter_ftype<std::string> get_func,\n+\t\t\t\t setting_func_types<std::string>::set set_func,\n+\t\t\t\t setting_func_types<std::string>::get get_func,\n \t\t\t\t show_value_ftype *show_func,\n \t\t\t\t cmd_list_element **set_list,\n \t\t\t\t cmd_list_element **show_list)\n@@ -933,8 +933,8 @@ set_show_commands\n add_setshow_optional_filename_cmd (const char *name, command_class theclass,\n \t\t\t\t   const char *set_doc, const char *show_doc,\n \t\t\t\t   const char *help_doc,\n-\t\t\t\t   setting_setter_ftype<std::string> set_func,\n-\t\t\t\t   setting_getter_ftype<std::string> get_func,\n+\t\t\t\t   setting_func_types<std::string>::set set_func,\n+\t\t\t\t   setting_func_types<std::string>::get get_func,\n \t\t\t\t   show_value_ftype *show_func,\n \t\t\t\t   cmd_list_element **set_list,\n \t\t\t\t   cmd_list_element **show_list)\n@@ -1001,8 +1001,8 @@ set_show_commands\n add_setshow_integer_cmd (const char *name, command_class theclass,\n \t\t\t const char *set_doc, const char *show_doc,\n \t\t\t const char *help_doc,\n-\t\t\t setting_setter_ftype<int> set_func,\n-\t\t\t setting_getter_ftype<int> get_func,\n+\t\t\t setting_func_types<int>::set set_func,\n+\t\t\t setting_func_types<int>::get get_func,\n \t\t\t show_value_ftype *show_func,\n \t\t\t cmd_list_element **set_list,\n \t\t\t cmd_list_element **show_list)\n@@ -1050,8 +1050,8 @@ set_show_commands\n add_setshow_uinteger_cmd (const char *name, command_class theclass,\n \t\t\t  const char *set_doc, const char *show_doc,\n \t\t\t  const char *help_doc,\n-\t\t\t  setting_setter_ftype<unsigned int> set_func,\n-\t\t\t  setting_getter_ftype<unsigned int> get_func,\n+\t\t\t  setting_func_types<unsigned int>::set set_func,\n+\t\t\t  setting_func_types<unsigned int>::get get_func,\n \t\t\t  show_value_ftype *show_func,\n \t\t\t  cmd_list_element **set_list,\n \t\t\t  cmd_list_element **show_list)\n@@ -1095,8 +1095,8 @@ set_show_commands\n add_setshow_zinteger_cmd (const char *name, command_class theclass,\n \t\t\t  const char *set_doc, const char *show_doc,\n \t\t\t  const char *help_doc,\n-\t\t\t  setting_setter_ftype<int> set_func,\n-\t\t\t  setting_getter_ftype<int> get_func,\n+\t\t\t  setting_func_types<int>::set set_func,\n+\t\t\t  setting_func_types<int>::get get_func,\n \t\t\t  show_value_ftype *show_func,\n \t\t\t  cmd_list_element **set_list,\n \t\t\t  cmd_list_element **show_list)\n@@ -1137,8 +1137,8 @@ set_show_commands\n add_setshow_zuinteger_unlimited_cmd (const char *name, command_class theclass,\n \t\t\t\t     const char *set_doc, const char *show_doc,\n \t\t\t\t     const char *help_doc,\n-\t\t\t\t     setting_setter_ftype<int> set_func,\n-\t\t\t\t     setting_getter_ftype<int> get_func,\n+\t\t\t\t     setting_func_types<int>::set set_func,\n+\t\t\t\t     setting_func_types<int>::get get_func,\n \t\t\t\t     show_value_ftype *show_func,\n \t\t\t\t     cmd_list_element **set_list,\n \t\t\t\t     cmd_list_element **show_list)\n@@ -1182,8 +1182,8 @@ set_show_commands\n add_setshow_zuinteger_cmd (const char *name, command_class theclass,\n \t\t\t   const char *set_doc, const char *show_doc,\n \t\t\t   const char *help_doc,\n-\t\t\t   setting_setter_ftype<unsigned int> set_func,\n-\t\t\t   setting_getter_ftype<unsigned int> get_func,\n+\t\t\t   setting_func_types<unsigned int>::set set_func,\n+\t\t\t   setting_func_types<unsigned int>::get get_func,\n \t\t\t   show_value_ftype *show_func,\n \t\t\t   cmd_list_element **set_list,\n \t\t\t   cmd_list_element **show_list)"
    },
    {
      "sha": "bcd3882f8116684754d4d9d1f8ec57d0a4ca1952",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 50,
      "deletions": 34,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fcef6471ed3c07d6eac2d9e0010552994f0891aa/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fcef6471ed3c07d6eac2d9e0010552994f0891aa/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=fcef6471ed3c07d6eac2d9e0010552994f0891aa",
      "patch": "@@ -180,15 +180,31 @@ inline bool var_type_uses<const char *> (var_types t)\n   return t == var_enum;\n }\n \n-/* Function signature for a callback used to get a value from a setting.  */\n+template<bool is_scalar, typename T> struct setting_func_types_1;\n \n template<typename T>\n-using setting_getter_ftype = const T &(*) ();\n+struct setting_func_types_1<true, T>\n+{\n+  using type = T;\n+  using set = void (*) (type);\n+  using get = type (*) ();\n+};\n \n-/* Function signature for a callback used to set a value to a setting.  */\n+template<typename T>\n+struct setting_func_types_1<false, T>\n+{\n+  using type = const T &;\n+  using set = void (*) (type);\n+  using get = type (*) ();\n+};\n \n template<typename T>\n-using setting_setter_ftype = void (*) (const T &);\n+struct setting_func_types\n+{\n+  using type = typename setting_func_types_1<std::is_scalar<T>::value, T>::type;\n+  using set = typename setting_func_types_1<std::is_scalar<T>::value, T>::set;\n+  using get = typename setting_func_types_1<std::is_scalar<T>::value, T>::get;\n+};\n \n /* Generic/type-erased function pointer.  */\n \n@@ -224,8 +240,8 @@ struct setting\n   template<typename T>\n   static erased_args erase_args (var_types var_type,\n \t\t\t\t T *var,\n-\t\t\t\t setting_setter_ftype<T> set_setting_func,\n-\t\t\t\t setting_getter_ftype<T> get_setting_func)\n+\t\t\t\t typename setting_func_types<T>::set set_setting_func,\n+\t\t\t\t typename setting_func_types<T>::get get_setting_func)\n   {\n     gdb_assert (var_type_uses<T> (var_type));\n   /* The getter and the setter must be both provided or both omitted.  */\n@@ -259,8 +275,8 @@ struct setting\n      Type T must match the var type VAR_TYPE (see VAR_TYPE_USES).  */\n   template<typename T>\n   setting (var_types var_type,\n-\t   setting_setter_ftype<T> setter,\n-\t   setting_getter_ftype<T> getter)\n+\t   typename setting_func_types<T>::set setter,\n+\t   typename setting_func_types<T>::get getter)\n     : m_var_type (var_type)\n   {\n     gdb_assert (var_type_uses<T> (var_type));\n@@ -284,14 +300,14 @@ struct setting\n      The template parameter T is the type of the variable used to store the\n      setting.  */\n   template<typename T>\n-  const T &get () const\n+  typename setting_func_types<T>::type get () const\n   {\n     gdb_assert (var_type_uses<T> (m_var_type));\n \n     if (m_var == nullptr)\n       {\n \tgdb_assert (m_getter != nullptr);\n-\tauto getter = reinterpret_cast<setting_getter_ftype<T>> (m_getter);\n+\tauto getter = reinterpret_cast<typename setting_func_types<T>::get> (m_getter);\n \treturn getter ();\n       }\n     else\n@@ -321,7 +337,7 @@ struct setting\n     if (m_var == nullptr)\n       {\n \tgdb_assert (m_setter != nullptr);\n-\tauto setter = reinterpret_cast<setting_setter_ftype<T>> (m_setter);\n+\tauto setter = reinterpret_cast<typename setting_func_types<T>::set> (m_setter);\n \tsetter (v);\n       }\n     else\n@@ -643,8 +659,8 @@ extern set_show_commands add_setshow_enum_cmd\n extern set_show_commands add_setshow_enum_cmd\n   (const char *name, command_class theclass, const char *const *enumlist,\n    const char *set_doc, const char *show_doc,\n-   const char *help_doc, setting_setter_ftype<const char *> set_func,\n-   setting_getter_ftype<const char *> get_func, show_value_ftype *show_func,\n+   const char *help_doc, setting_func_types<const char *>::set set_func,\n+   setting_func_types<const char *>::get get_func, show_value_ftype *show_func,\n    cmd_list_element **set_list, cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_auto_boolean_cmd\n@@ -656,8 +672,8 @@ extern set_show_commands add_setshow_auto_boolean_cmd\n extern set_show_commands add_setshow_auto_boolean_cmd\n   (const char *name, command_class theclass, const char *set_doc,\n    const char *show_doc, const char *help_doc,\n-   setting_setter_ftype<enum auto_boolean> set_func,\n-   setting_getter_ftype<enum auto_boolean> get_func,\n+   setting_func_types<enum auto_boolean>::set set_func,\n+   setting_func_types<enum auto_boolean>::get get_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n@@ -670,8 +686,8 @@ extern set_show_commands add_setshow_boolean_cmd\n extern set_show_commands add_setshow_boolean_cmd\n   (const char *name, command_class theclass, const char *set_doc,\n    const char *show_doc, const char *help_doc,\n-   setting_setter_ftype<bool> set_func,\n-   setting_getter_ftype<bool> get_func, show_value_ftype *show_func,\n+   setting_func_types<bool>::set set_func,\n+   setting_func_types<bool>::get get_func, show_value_ftype *show_func,\n    cmd_list_element **set_list, cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_filename_cmd\n@@ -683,8 +699,8 @@ extern set_show_commands add_setshow_filename_cmd\n extern set_show_commands add_setshow_filename_cmd\n   (const char *name, command_class theclass, const char *set_doc,\n    const char *show_doc, const char *help_doc,\n-   setting_setter_ftype<std::string> set_func,\n-   setting_getter_ftype<std::string> get_func, show_value_ftype *show_func,\n+   setting_func_types<std::string>::set set_func,\n+   setting_func_types<std::string>::get get_func, show_value_ftype *show_func,\n    cmd_list_element **set_list, cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_string_cmd\n@@ -696,8 +712,8 @@ extern set_show_commands add_setshow_string_cmd\n extern set_show_commands add_setshow_string_cmd\n   (const char *name, command_class theclass, const char *set_doc,\n    const char *show_doc, const char *help_doc,\n-   setting_setter_ftype<std::string> set_func,\n-   setting_getter_ftype<std::string> get_func,\n+   setting_func_types<std::string>::set set_func,\n+   setting_func_types<std::string>::get get_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n@@ -710,8 +726,8 @@ extern set_show_commands add_setshow_string_noescape_cmd\n extern set_show_commands add_setshow_string_noescape_cmd\n   (const char *name, command_class theclass, const char *set_doc,\n    const char *show_doc, const char *help_doc,\n-   setting_setter_ftype<std::string> set_func,\n-   setting_getter_ftype<std::string> get_func, show_value_ftype *show_func,\n+   setting_func_types<std::string>::set set_func,\n+   setting_func_types<std::string>::get get_func, show_value_ftype *show_func,\n    cmd_list_element **set_list, cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_optional_filename_cmd\n@@ -723,8 +739,8 @@ extern set_show_commands add_setshow_optional_filename_cmd\n extern set_show_commands add_setshow_optional_filename_cmd\n   (const char *name, command_class theclass, const char *set_doc,\n    const char *show_doc, const char *help_doc,\n-   setting_setter_ftype<std::string> set_func,\n-   setting_getter_ftype<std::string> get_func,\n+   setting_func_types<std::string>::set set_func,\n+   setting_func_types<std::string>::get get_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n@@ -737,8 +753,8 @@ extern set_show_commands add_setshow_integer_cmd\n extern set_show_commands add_setshow_integer_cmd\n   (const char *name, command_class theclass, const char *set_doc,\n    const char *show_doc, const char *help_doc,\n-   setting_setter_ftype<int> set_func,\n-   setting_getter_ftype<int> get_func, show_value_ftype *show_func,\n+   setting_func_types<int>::set set_func,\n+   setting_func_types<int>::get get_func, show_value_ftype *show_func,\n    cmd_list_element **set_list, cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_uinteger_cmd\n@@ -750,8 +766,8 @@ extern set_show_commands add_setshow_uinteger_cmd\n extern set_show_commands add_setshow_uinteger_cmd\n   (const char *name, command_class theclass, const char *set_doc,\n    const char *show_doc, const char *help_doc,\n-   setting_setter_ftype<unsigned int> set_func,\n-   setting_getter_ftype<unsigned int> get_func, show_value_ftype *show_func,\n+   setting_func_types<unsigned int>::set set_func,\n+   setting_func_types<unsigned int>::get get_func, show_value_ftype *show_func,\n    cmd_list_element **set_list, cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_zinteger_cmd\n@@ -763,8 +779,8 @@ extern set_show_commands add_setshow_zinteger_cmd\n extern set_show_commands add_setshow_zinteger_cmd\n   (const char *name, command_class theclass, const char *set_doc,\n    const char *show_doc, const char *help_doc,\n-   setting_setter_ftype<int> set_func,\n-   setting_getter_ftype<int> get_func, show_value_ftype *show_func,\n+   setting_func_types<int>::set set_func,\n+   setting_func_types<int>::get get_func, show_value_ftype *show_func,\n    cmd_list_element **set_list, cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_zuinteger_cmd\n@@ -776,8 +792,8 @@ extern set_show_commands add_setshow_zuinteger_cmd\n extern set_show_commands add_setshow_zuinteger_cmd\n   (const char *name, command_class theclass, const char *set_doc,\n    const char *show_doc, const char *help_doc,\n-   setting_setter_ftype<unsigned int> set_func,\n-   setting_getter_ftype<unsigned int> get_func, show_value_ftype *show_func,\n+   setting_func_types<unsigned int>::set set_func,\n+   setting_func_types<unsigned int>::get get_func, show_value_ftype *show_func,\n    cmd_list_element **set_list, cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_zuinteger_unlimited_cmd\n@@ -789,7 +805,7 @@ extern set_show_commands add_setshow_zuinteger_unlimited_cmd\n extern set_show_commands add_setshow_zuinteger_unlimited_cmd\n   (const char *name, command_class theclass, const char *set_doc,\n    const char *show_doc, const char *help_doc,\n-   setting_setter_ftype<int> set_func, setting_getter_ftype<int> get_func,\n+   setting_func_types<int>::set set_func, setting_func_types<int>::get get_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n "
    },
    {
      "sha": "abf63de622a38bb8f160886734ccbc30af4397a2",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fcef6471ed3c07d6eac2d9e0010552994f0891aa/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fcef6471ed3c07d6eac2d9e0010552994f0891aa/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=fcef6471ed3c07d6eac2d9e0010552994f0891aa",
      "patch": "@@ -1873,6 +1873,9 @@ struct packet_config\n        have an associated command always have this set to auto.  */\n     enum auto_boolean detect;\n \n+    /* The \"show remote foo-packet\" command created for this packet.  */\n+    cmd_list_element *show_cmd;\n+\n     /* Does the target support this packet?  */\n     enum packet_support support;\n   };\n@@ -1936,6 +1939,7 @@ add_packet_config_cmd (struct packet_config *config, const char *name,\n \t\t\t\t    NULL,\n \t\t\t\t    show_remote_protocol_packet_cmd,\n \t\t\t\t    &remote_set_cmdlist, &remote_show_cmdlist);\n+  config->show_cmd = cmds.show;\n \n   /* The command code copies the documentation strings.  */\n   xfree (set_doc);\n@@ -2245,7 +2249,7 @@ show_remote_protocol_packet_cmd (struct ui_file *file, int from_tty,\n        packet < &remote_protocol_packets[PACKET_MAX];\n        packet++)\n     {\n-      if (&packet->detect == &c->var->get<enum auto_boolean> ())\n+      if (c == packet->show_cmd)\n \t{\n \t  show_packet_config_cmd (packet);\n \t  return;"
    }
  ]
}