{
  "sha": "cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2IxZTRlMzJjMmQ5NTg4ZTFkNzdlYTQ5YmFmYjVkY2RjMWNmZjc2NA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-07-09T18:26:16Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-07-09T18:34:18Z"
    },
    "message": "\"catch catch/throw/rethrow\", breakpoint -> catchpoint\n\nCurrently, with:\n\n (gdb) catch catch\n Catchpoint 1 (catch)\n (gdb) catch throw\n Catchpoint 2 (throw)\n (gdb) catch rethrow\n Catchpoint 3 (rethrow)\n\nYou get:\n\n(gdb) info breakpoints\n Num     Type           Disp Enb Address            What\n 1       breakpoint     keep y   0x0000000000b122af exception catch\n 2       breakpoint     keep y   0x0000000000b1288d exception throw\n 3       breakpoint     keep y   0x0000000000b12931 exception rethrow\n\nI think it doesn't make much sense usability-wise, to show a\ncatchpoint as a breakpoint.  The fact that GDB sets a breakpoint at\nsome magic address in the C++ run time is an implementation detail,\nIMO.  And as seen in the previous patch, such a catchpoint can end up\nwith more than one location/address even, so showing a single address\nisn't entirely accurate.\n\nThis commit hides the addresses from view, and makes GDB show\n\"catchpoint\" for type as well:\n\n  (gdb) info breakpoints\n  Num     Type           Disp Enb Address            What\n  1       catchpoint     keep y                      exception catch\n  2       catchpoint     keep y                      exception throw\n  3       catchpoint     keep y                      exception rethrow\n\nThis comment in the code seems telling:\n\n  /* We need to reset 'type' in order for code in breakpoint.c to do\n     the right thing.  */\n  cp->type = bp_breakpoint;\n\nIt kind of suggests that the reason catchpoints end up shown as\nbreakpoints was that it was easier to implement them that way, rather\nthan a desired property.\n\nThis commit fixes things up to make it possible to have bp_catch\nbreakpoints have software/hardware breakpoint locations, thus\neliminating the need for that hack:\n\n - redo breakpoint_address_is_meaningful in terms of the location's\n   type rather than breakpoint type.\n - teach bpstat_what about stepping over the catchpoint locations.\n - install a allocate_location method for \"catch catch/throw/rethrow\",\n   one that forces the location type.\n\nNote that this also reverts the gdb hunk from:\n\n  commit 2a8be20359dba9cc684fd3ffa222d985399f3b18\n  Commit:     Tom Tromey <tom@tromey.com>\n  CommitDate: Sat Oct 6 22:17:45 2018 -0600\n\n      Fix Python gdb.Breakpoint.location crash\n\nbecause now \"catch throw\" catchpoints hit the\n\n   if (obj->bp->type != bp_breakpoint)\n     Py_RETURN_NONE;\n\ncheck above, and, adjusts the testcase to no longer expect to see the\ncatchpoint in the gdb.breakpoints() list.\n\n(Note: might make sense to do the same to Ada exception catchpoints.)\n\ngdb/ChangeLog:\n2019-07-09  Pedro Alves  <palves@redhat.com>\n\n\t* break-catch-throw.c (print_one_exception_catchpoint): Skip the\n\t\"addr\" field.\n\t(allocate_location_exception_catchpoint): New.\n\t(handle_gnu_v3_exceptions): Don't reset 'type' to bp_breakpoint.\n\t(initialize_throw_catchpoint_ops): Install\n\tallocate_location_exception_catchpoint as allocate_location\n\tmethod.\n\t* breakpoint.c (bpstat_what) <bp_catch>: Set action to\n\tBPSTAT_WHAT_SINGLE if not stopping and the location's type is not\n\tbp_loc_other.\n\t(breakpoint_address_is_meaningful): Delete.\n\t(bl_address_is_meaningful): New.\n\t(breakpoint_locations_match): Adjust comment.\n\t(bp_location_from_bp_type): New, factored out of...\n\t(bp_location::bp_location(breakpoint *)): ... this.\n\t(bp_location::bp_location(breakpoint *, bp_loc_type)): New,\n\tfactored out of...\n\t(bp_location::bp_location(breakpoint *)): ... this.  Reimplement.\n\t(bp_loc_is_permanent): Use bl_address_is_meaningful instead of\n\tbreakpoint_address_is_meaningful.\n\t(bp_locations_compare): Adjust comment.\n\t(update_global_location_list): Use bl_address_is_meaningful\n\tinstead of breakpoint_address_is_meaningful.\n\t* breakpoint.h (bp_location::bp_location(breakpoint *)): New\n\texplicit.\n\t(bp_location::bp_location(breakpoint *, bp_loc_type)): Declare.\n\t* python/py-breakpoint.c (bppy_get_location): No longer check\n\twhether location is null.\n\ngdb/doc/ChangeLog:\n2019-07-09  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.texinfo (C++ Exception GDB/MI Catchpoint Commands): Adjust\n\texamples to show type=catchpoint instead of type=breakpoint and an\n\taddress.\n\ngdb/testsuite/ChangeLog:\n2019-07-09  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.cp/catch-multi-stdlib.exp: Adjust expected \"info\n\tbreakpoints\" output.\n\t* gdb.cp/exception.exp: Adjust expected \"info breakpoints\" output.\n\t* gdb.python/py-breakpoint.exp: No longer expect that \"catch\n\tthrow\" creates breakpoint.\n\t* gdb.mi/mi-catch-cpp-exceptions.exp (setup_catchpoint): Expect\n\t'type=\"catchpoint\"'.",
    "tree": {
      "sha": "3c878afb8e0496bb08632c5fbcb50e9f167554e6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3c878afb8e0496bb08632c5fbcb50e9f167554e6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b58a68fe5709ed205c3ac54065f1783ce58d9a01",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b58a68fe5709ed205c3ac54065f1783ce58d9a01",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b58a68fe5709ed205c3ac54065f1783ce58d9a01"
    }
  ],
  "stats": {
    "total": 244,
    "additions": 141,
    "deletions": 103
  },
  "files": [
    {
      "sha": "9ceb425a6bfb78b5709fca5e8b552d75ac3e22ce",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -1,3 +1,34 @@\n+2019-07-09  Pedro Alves  <palves@redhat.com>\n+\n+\t* break-catch-throw.c (print_one_exception_catchpoint): Skip the\n+\t\"addr\" field.\n+\t(allocate_location_exception_catchpoint): New.\n+\t(handle_gnu_v3_exceptions): Don't reset 'type' to bp_breakpoint.\n+\t(initialize_throw_catchpoint_ops): Install\n+\tallocate_location_exception_catchpoint as allocate_location\n+\tmethod.\n+\t* breakpoint.c (bpstat_what) <bp_catch>: Set action to\n+\tBPSTAT_WHAT_SINGLE if not stopping and the location's type is not\n+\tbp_loc_other.\n+\t(breakpoint_address_is_meaningful): Delete.\n+\t(bl_address_is_meaningful): New.\n+\t(breakpoint_locations_match): Adjust comment.\n+\t(bp_location_from_bp_type): New, factored out of...\n+\t(bp_location::bp_location(breakpoint *)): ... this.\n+\t(bp_location::bp_location(breakpoint *, bp_loc_type)): New,\n+\tfactored out of...\n+\t(bp_location::bp_location(breakpoint *)): ... this.  Reimplement.\n+\t(bp_loc_is_permanent): Use bl_address_is_meaningful instead of\n+\tbreakpoint_address_is_meaningful.\n+\t(bp_locations_compare): Adjust comment.\n+\t(update_global_location_list): Use bl_address_is_meaningful\n+\tinstead of breakpoint_address_is_meaningful.\n+\t* breakpoint.h (bp_location::bp_location(breakpoint *)): New\n+\texplicit.\n+\t(bp_location::bp_location(breakpoint *, bp_loc_type)): Declare.\n+\t* python/py-breakpoint.c (bppy_get_location): No longer check\n+\twhether location is null.\n+\n 2019-07-09  Pedro Alves  <palves@redhat.com>\n \n \tPR c++/15468"
    },
    {
      "sha": "c0b3eec63d167c3c140e96d226d905db7aeb1ad0",
      "filename": "gdb/break-catch-throw.c",
      "status": "modified",
      "additions": 12,
      "deletions": 13,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/break-catch-throw.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/break-catch-throw.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-throw.c?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -249,18 +249,10 @@ print_one_exception_catchpoint (struct breakpoint *b,\n   enum exception_event_kind kind = classify_exception_breakpoint (b);\n \n   get_user_print_options (&opts);\n+\n   if (opts.addressprint)\n-    {\n-      annotate_field (4);\n-      if (b->loc == NULL || b->loc->shlib_disabled)\n-\tuiout->field_string (\"addr\", \"<PENDING>\");\n-      else\n-\tuiout->field_core_addr (\"addr\",\n-\t\t\t\tb->loc->gdbarch, b->loc->address);\n-    }\n+    uiout->field_skip (\"addr\");\n   annotate_field (5);\n-  if (b->loc)\n-    *last_loc = b->loc;\n \n   switch (kind)\n     {\n@@ -344,6 +336,15 @@ print_recreate_exception_catchpoint (struct breakpoint *b,\n   print_recreate_thread (b, fp);\n }\n \n+/* Implement the \"allocate_location\" breakpoint_ops method for throw\n+   and catch catchpoints.  */\n+\n+static bp_location *\n+allocate_location_exception_catchpoint (breakpoint *self)\n+{\n+  return new bp_location (self, bp_loc_software_breakpoint);\n+}\n+\n static void\n handle_gnu_v3_exceptions (int tempflag, std::string &&except_rx,\n \t\t\t  const char *cond_string,\n@@ -361,9 +362,6 @@ handle_gnu_v3_exceptions (int tempflag, std::string &&except_rx,\n \n   init_catchpoint (cp.get (), get_current_arch (), tempflag, cond_string,\n \t\t   &gnu_v3_exception_catchpoint_ops);\n-  /* We need to reset 'type' in order for code in breakpoint.c to do\n-     the right thing.  */\n-  cp->type = bp_breakpoint;\n   cp->kind = ex_event;\n   cp->exception_rx = std::move (except_rx);\n   cp->pattern = std::move (pattern);\n@@ -521,6 +519,7 @@ initialize_throw_catchpoint_ops (void)\n   ops->print_recreate = print_recreate_exception_catchpoint;\n   ops->print_one_detail = print_one_detail_exception_catchpoint;\n   ops->check_status = check_status_exception_catchpoint;\n+  ops->allocate_location = allocate_location_exception_catchpoint;\n }\n \n void"
    },
    {
      "sha": "1cdeade3af776b161c0f2b64f4d05ed82574a15b",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 56,
      "deletions": 52,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -5603,8 +5603,10 @@ bpstat_what (bpstat bs_head)\n \t    }\n \t  else\n \t    {\n-\t      /* There was a catchpoint, but we're not stopping.\n-\t\t This requires no further action.  */\n+\t      /* Some catchpoints are implemented with breakpoints.\n+\t\t For those, we need to step over the breakpoint.  */\n+\t      if (bs->bp_location_at->loc_type != bp_loc_other)\n+\t\tthis_action = BPSTAT_WHAT_SINGLE;\n \t    }\n \t  break;\n \tcase bp_jit_event:\n@@ -6686,27 +6688,21 @@ describe_other_breakpoints (struct gdbarch *gdbarch,\n }\n \f\n \n-/* Return true iff it is meaningful to use the address member of\n-   BPT locations.  For some breakpoint types, the locations' address members\n-   are irrelevant and it makes no sense to attempt to compare them to other\n-   addresses (or use them for any other purpose either).\n-\n-   More specifically, each of the following breakpoint types will\n-   always have a zero valued location address and we don't want to mark\n-   breakpoints of any of these types to be a duplicate of an actual\n-   breakpoint location at address zero:\n-\n-      bp_watchpoint\n-      bp_catchpoint\n+/* Return true iff it is meaningful to use the address member of LOC.\n+   For some breakpoint types, the locations' address members are\n+   irrelevant and it makes no sense to attempt to compare them to\n+   other addresses (or use them for any other purpose either).\n \n-*/\n+   More specifically, software watchpoints and catchpoints that are\n+   not backed by breakpoints always have a zero valued location\n+   address and we don't want to mark breakpoints of any of these types\n+   to be a duplicate of an actual breakpoint location at address\n+   zero.  */\n \n-static int\n-breakpoint_address_is_meaningful (struct breakpoint *bpt)\n+static bool\n+bl_address_is_meaningful (bp_location *loc)\n {\n-  enum bptype type = bpt->type;\n-\n-  return (type != bp_watchpoint && type != bp_catchpoint);\n+  return loc->loc_type != bp_loc_other;\n }\n \n /* Assuming LOC1 and LOC2's owners are hardware watchpoints, returns\n@@ -6838,8 +6834,8 @@ tracepoint_locations_match (struct bp_location *loc1,\n }\n \n /* Assuming LOC1 and LOC2's types' have meaningful target addresses\n-   (breakpoint_address_is_meaningful), returns true if LOC1 and LOC2\n-   represent the same location.  */\n+   (bl_address_is_meaningful), returns true if LOC1 and LOC2 represent\n+   the same location.  */\n \n static int\n breakpoint_locations_match (struct bp_location *loc1, \n@@ -6937,16 +6933,10 @@ adjust_breakpoint_address (struct gdbarch *gdbarch,\n     }\n }\n \n-bp_location::bp_location (breakpoint *owner)\n+static bp_loc_type\n+bp_location_from_bp_type (bptype type)\n {\n-  bp_location *loc = this;\n-\n-  loc->owner = owner;\n-  loc->cond_bytecode = NULL;\n-  loc->shlib_disabled = 0;\n-  loc->enabled = 1;\n-\n-  switch (owner->type)\n+  switch (type)\n     {\n     case bp_breakpoint:\n     case bp_single_step:\n@@ -6972,30 +6962,44 @@ bp_location::bp_location (breakpoint *owner)\n     case bp_gnu_ifunc_resolver:\n     case bp_gnu_ifunc_resolver_return:\n     case bp_dprintf:\n-      loc->loc_type = bp_loc_software_breakpoint;\n-      mark_breakpoint_location_modified (loc);\n-      break;\n+      return bp_loc_software_breakpoint;\n     case bp_hardware_breakpoint:\n-      loc->loc_type = bp_loc_hardware_breakpoint;\n-      mark_breakpoint_location_modified (loc);\n-      break;\n+      return bp_loc_hardware_breakpoint;\n     case bp_hardware_watchpoint:\n     case bp_read_watchpoint:\n     case bp_access_watchpoint:\n-      loc->loc_type = bp_loc_hardware_watchpoint;\n-      break;\n+      return bp_loc_hardware_watchpoint;\n     case bp_watchpoint:\n     case bp_catchpoint:\n     case bp_tracepoint:\n     case bp_fast_tracepoint:\n     case bp_static_tracepoint:\n-      loc->loc_type = bp_loc_other;\n-      break;\n+      return bp_loc_other;\n     default:\n       internal_error (__FILE__, __LINE__, _(\"unknown breakpoint type\"));\n     }\n+}\n+\n+bp_location::bp_location (breakpoint *owner, bp_loc_type type)\n+{\n+  this->owner = owner;\n+  this->cond_bytecode = NULL;\n+  this->shlib_disabled = 0;\n+  this->enabled = 1;\n+\n+  this->loc_type = type;\n \n-  loc->refc = 1;\n+  if (this->loc_type == bp_loc_software_breakpoint\n+      || this->loc_type == bp_loc_hardware_breakpoint)\n+    mark_breakpoint_location_modified (this);\n+\n+  this->refc = 1;\n+}\n+\n+bp_location::bp_location (breakpoint *owner)\n+  : bp_location::bp_location (owner,\n+\t\t\t      bp_location_from_bp_type (owner->type))\n+{\n }\n \n /* Allocate a struct bp_location.  */\n@@ -8639,11 +8643,12 @@ bp_loc_is_permanent (struct bp_location *loc)\n {\n   gdb_assert (loc != NULL);\n \n-  /* If we have a catchpoint or a watchpoint, just return 0.  We should not\n-     attempt to read from the addresses the locations of these breakpoint types\n-     point to.  program_breakpoint_here_p, below, will attempt to read\n+  /* If we have a non-breakpoint-backed catchpoint or a software\n+     watchpoint, just return 0.  We should not attempt to read from\n+     the addresses the locations of these breakpoint types point to.\n+     program_breakpoint_here_p, below, will attempt to read\n      memory.  */\n-  if (!breakpoint_address_is_meaningful (loc->owner))\n+  if (!bl_address_is_meaningful (loc))\n     return 0;\n \n   scoped_restore_current_pspace_and_thread restore_pspace_thread;\n@@ -11451,10 +11456,9 @@ breakpoint_auto_delete (bpstat bs)\n \n /* A comparison function for bp_location AP and BP being interfaced to\n    qsort.  Sort elements primarily by their ADDRESS (no matter what\n-   does breakpoint_address_is_meaningful say for its OWNER),\n-   secondarily by ordering first permanent elements and\n-   terciarily just ensuring the array is sorted stable way despite\n-   qsort being an unstable algorithm.  */\n+   bl_address_is_meaningful says), secondarily by ordering first\n+   permanent elements and terciarily just ensuring the array is sorted\n+   stable way despite qsort being an unstable algorithm.  */\n \n static int\n bp_locations_compare (const void *ap, const void *bp)\n@@ -11794,7 +11798,7 @@ update_global_location_list (enum ugll_insert_mode insert_mode)\n \t\t this one from the target.  */\n \n \t      /* OLD_LOC comes from existing struct breakpoint.  */\n-\t      if (breakpoint_address_is_meaningful (old_loc->owner))\n+\t      if (bl_address_is_meaningful (old_loc))\n \t\t{\n \t\t  for (loc2p = locp;\n \t\t       (loc2p < bp_locations + bp_locations_count\n@@ -11934,7 +11938,7 @@ update_global_location_list (enum ugll_insert_mode insert_mode)\n       b = loc->owner;\n \n       if (!unduplicated_should_be_inserted (loc)\n-\t  || !breakpoint_address_is_meaningful (b)\n+\t  || !bl_address_is_meaningful (loc)\n \t  /* Don't detect duplicate for tracepoint locations because they are\n \t   never duplicated.  See the comments in field `duplicate' of\n \t   `struct bp_location'.  */"
    },
    {
      "sha": "bcfa45b56e67749452ccfbb76b32466399668e14",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -316,7 +316,12 @@ class bp_location\n public:\n   bp_location () = default;\n \n-  bp_location (breakpoint *owner);\n+  /* Construct a bp_location with the type inferred from OWNER's\n+     type.  */\n+  explicit bp_location (breakpoint *owner);\n+\n+  /* Construct a bp_location with type TYPE.  */\n+  bp_location (breakpoint *owner, bp_loc_type type);\n \n   virtual ~bp_location ();\n "
    },
    {
      "sha": "fe3df3d4d1903c72b406cf2c44f1f154aee5fd65",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -1,3 +1,9 @@\n+2019-07-09  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.texinfo (C++ Exception GDB/MI Catchpoint Commands): Adjust\n+\texamples to show type=catchpoint instead of type=breakpoint and an\n+\taddress.\n+\n 2019-07-03  Pedro Alves  <palves@redhat.com>\n \t    Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n "
    },
    {
      "sha": "eddd939869a7e310296428aee9a7715ae9f651bc",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -30120,9 +30120,9 @@ and @samp{tcatch throw} (@pxref{Set Catchpoints}).\n \n @smallexample\n -catch-throw -r exception_type\n-^done,bkpt=@{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",\n-  addr=\"0x00000000004006c0\",what=\"exception throw\",\n-  catch-type=\"throw\",thread-groups=[\"i1\"],\n+^done,bkpt=@{number=\"1\",type=\"catchpoint\",disp=\"keep\",enabled=\"y\",\n+  what=\"exception throw\",catch-type=\"throw\",\n+  thread-groups=[\"i1\"],\n   regexp=\"exception_type\",times=\"0\"@}\n (gdb)\n -exec-run\n@@ -30164,9 +30164,9 @@ and @samp{tcatch rethrow} (@pxref{Set Catchpoints}).\n \n @smallexample\n -catch-rethrow -r exception_type\n-^done,bkpt=@{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",\n-  addr=\"0x00000000004006c0\",what=\"exception rethrow\",\n-  catch-type=\"rethrow\",thread-groups=[\"i1\"],\n+^done,bkpt=@{number=\"1\",type=\"catchpoint\",disp=\"keep\",enabled=\"y\",\n+  what=\"exception rethrow\",catch-type=\"rethrow\",\n+  thread-groups=[\"i1\"],\n   regexp=\"exception_type\",times=\"0\"@}\n (gdb)\n -exec-run\n@@ -30208,9 +30208,9 @@ and @samp{tcatch catch} (@pxref{Set Catchpoints}).\n \n @smallexample\n -catch-catch -r exception_type\n-^done,bkpt=@{number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",\n-  addr=\"0x00000000004006c0\",what=\"exception catch\",\n-  catch-type=\"catch\",thread-groups=[\"i1\"],\n+^done,bkpt=@{number=\"1\",type=\"catchpoint\",disp=\"keep\",enabled=\"y\",\n+  what=\"exception catch\",catch-type=\"catch\",\n+  thread-groups=[\"i1\"],\n   regexp=\"exception_type\",times=\"0\"@}\n (gdb)\n -exec-run"
    },
    {
      "sha": "698d91e9d32599817f2f8fab00a069769ab1bfb0",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -379,20 +379,14 @@ bppy_set_hit_count (PyObject *self, PyObject *newvalue, void *closure)\n static PyObject *\n bppy_get_location (PyObject *self, void *closure)\n {\n-  const char *str;\n   gdbpy_breakpoint_object *obj = (gdbpy_breakpoint_object *) self;\n \n   BPPY_REQUIRE_VALID (obj);\n \n   if (obj->bp->type != bp_breakpoint)\n     Py_RETURN_NONE;\n \n-  struct event_location *location = obj->bp->location.get ();\n-  /* \"catch throw\" makes a breakpoint of type bp_breakpoint that does\n-     not have a location.  */\n-  if (location == nullptr)\n-    Py_RETURN_NONE;\n-  str = event_location_to_string (location);\n+  const char *str = event_location_to_string (obj->bp->location.get ());\n   if (! str)\n     str = \"\";\n   return host_string_to_python_string (str).release ();"
    },
    {
      "sha": "fcf86bd2c01161e6245abc8fb04cdff5305d702e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -1,3 +1,13 @@\n+2019-07-09  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.cp/catch-multi-stdlib.exp: Adjust expected \"info\n+\tbreakpoints\" output.\n+\t* gdb.cp/exception.exp: Adjust expected \"info breakpoints\" output.\n+\t* gdb.python/py-breakpoint.exp: No longer expect that \"catch\n+\tthrow\" creates breakpoint.\n+\t* gdb.mi/mi-catch-cpp-exceptions.exp (setup_catchpoint): Expect\n+\t'type=\"catchpoint\"'.\n+\n 2019-07-09  Pedro Alves  <palves@redhat.com>\n \n \tPR c++/15468"
    },
    {
      "sha": "1258d893afbb97ca7d6cb7668ab83d3737688c28",
      "filename": "gdb/testsuite/gdb.cp/except-multi-location.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/testsuite/gdb.cp/except-multi-location.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/testsuite/gdb.cp/except-multi-location.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/except-multi-location.exp?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -74,9 +74,9 @@ proc test_multi_libstdcpp {static_bin static_lib} {\n     set ws \"\\[ \\t\\]*\"\n     gdb_test \"info breakpoints\" \\\n \t[multi_line \\\n-\t     \"${decimal}${ws}breakpoint${ws}keep${ws}y${ws}${hex}${ws}exception catch\" \\\n-\t     \"${decimal}${ws}breakpoint${ws}keep${ws}y${ws}${hex}${ws}exception throw\" \\\n-\t     \"${decimal}${ws}breakpoint${ws}keep${ws}y${ws}${hex}${ws}exception rethrow\"]\n+\t     \"${decimal}${ws}catchpoint${ws}keep${ws}y${ws}exception catch\" \\\n+\t     \"${decimal}${ws}catchpoint${ws}keep${ws}y${ws}exception throw\" \\\n+\t     \"${decimal}${ws}catchpoint${ws}keep${ws}y${ws}exception rethrow\"]\n }\n \n # Try different static/not-static combinations."
    },
    {
      "sha": "0be382ba98c24a3a8d65c1025c2d10aa43bccc0d",
      "filename": "gdb/testsuite/gdb.cp/exception.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 15,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/testsuite/gdb.cp/exception.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/testsuite/gdb.cp/exception.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/exception.exp?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -62,16 +62,10 @@ gdb_test \"catch rethrow\" \"Catchpoint \\[0-9\\]+ \\\\(rethrow\\\\)\" \\\n     \"catch rethrow (before inferior run)\"\n \n \n-# The catchpoints should be listed in the list of breakpoints.\n-# In case of a statically linked test, we won't have a pending breakpoint.\n-# Hence we allow for both an address or \"<PENDING>\". If we ever become able\n-# to tell whether the target is linked statically or not, we can be more\n-# precise and require exact output.\n-set addr \"\\(<PENDING>|$hex\\)\"\n set re_head\t\"Num${ws}Type${ws}Disp${ws}Enb${ws}Address${ws}What\"\n-set re_2_bp\t\"1${ws}breakpoint${ws}keep${ws}y${ws}$addr${ws}exception catch\"\n-set re_3_bp\t\"2${ws}breakpoint${ws}keep${ws}y${ws}$addr${ws}exception throw\"\n-set re_4_bp   \"3${ws}breakpoint${ws}keep${ws}y${ws}$addr${ws}exception rethrow\"\n+set re_2_bp\t\"1${ws}catchpoint${ws}keep${ws}y${ws}exception catch\"\n+set re_3_bp\t\"2${ws}catchpoint${ws}keep${ws}y${ws}exception throw\"\n+set re_4_bp\t\"3${ws}catchpoint${ws}keep${ws}y${ws}exception rethrow\"\n \n set name \"info breakpoints (before inferior run)\"\n gdb_test_multiple \"info breakpoints\" $name {\n@@ -100,12 +94,6 @@ if { !$ok } {\n     continue\n }\n \n-set addr \"$hex\"\n-set re_head\t\"Num${ws}Type${ws}Disp${ws}Enb${ws}Address${ws}What\"\n-set re_2_bp\t\"1${ws}breakpoint${ws}keep${ws}y${ws}$addr${ws}exception catch\"\n-set re_3_bp\t\"2${ws}breakpoint${ws}keep${ws}y${ws}$addr${ws}exception throw\"\n-set re_4_bp   \"3${ws}breakpoint${ws}keep${ws}y${ws}$addr${ws}exception rethrow\"\n-\n set name \"info breakpoints (after inferior run)\"\n gdb_test_multiple \"info breakpoints\" $name {\n     -re \"$re_head${ws}$re_2_bp${ws}$re_3_bp${ws}$re_4_bp\\r\\n$gdb_prompt $\" {"
    },
    {
      "sha": "80ecabbe5553073139e5d315a2d0b2161bd80176",
      "filename": "gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-catch-cpp-exceptions.exp?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -85,7 +85,7 @@ proc continue_to_breakpoint_in_main {} {\n proc setup_catchpoint {type {extra \"\"}} {\n     global decimal\n     mi_gdb_test \"-catch-${type} ${extra}\" \\\n-\t\"\\\\^done,bkpt=\\{number=\\\"$decimal\\\".*what=\\\"exception ${type}\\\",catch-type=\\\"${type}\\\".*\\}\" \\\n+\t\"\\\\^done,bkpt=\\{number=\\\"$decimal\\\",type=\\\"catchpoint\\\".*what=\\\"exception ${type}\\\",catch-type=\\\"${type}\\\".*\\}\" \\\n \t\"Setup -catch-${type}\"\n }\n "
    },
    {
      "sha": "625977c0ad48810735cf581c2cd0cc8073a26ef7",
      "filename": "gdb/testsuite/gdb.python/py-breakpoint.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/testsuite/gdb.python/py-breakpoint.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764/gdb/testsuite/gdb.python/py-breakpoint.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-breakpoint.exp?ref=cb1e4e32c2d9588e1d77ea49bafb5dcdc1cff764",
      "patch": "@@ -619,8 +619,9 @@ proc_with_prefix test_bkpt_explicit_loc {} {\n \n     delete_breakpoints\n     gdb_test \"catch throw\" \"Catchpoint .* \\\\(throw\\\\)\"\n-    gdb_test \"python print (gdb.breakpoints()\\[0\\].location)\" None \\\n-\t\"Examine location of catchpoint\"\n+    gdb_test \"python print (gdb.breakpoints())\" \\\n+\t\"\\(\\)\" \\\n+\t\"catch throw is not a breakpoint\"\n }\n \n proc_with_prefix test_bkpt_qualified {} {"
    }
  ]
}