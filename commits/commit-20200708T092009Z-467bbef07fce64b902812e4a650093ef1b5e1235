{
  "sha": "467bbef07fce64b902812e4a650093ef1b5e1235",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDY3YmJlZjA3ZmNlNjRiOTAyODEyZTRhNjUwMDkzZWYxYjVlMTIzNQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-08T09:20:09Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-08T09:20:09Z"
    },
    "message": "x86: various XOP insns lack L and/or W bit decoding\n\nWhile some insns support both XOP.W based operand swapping and 256-bit\noperation (XOP.L=1), many others don't support one or both.\n\nFor {L,S}LWPCB also fix the so far not decoded ModRM.mod == 3\nrestriction.\n\nTake the opportunity and replace the custom OP_LWP_E() and OP_LWPCB_E()\nroutines by suitable other, non-custom operanbd specifiers.",
    "tree": {
      "sha": "11e4223cf203c6732f76b35c2a0bb02283831b9a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/11e4223cf203c6732f76b35c2a0bb02283831b9a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/467bbef07fce64b902812e4a650093ef1b5e1235",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/467bbef07fce64b902812e4a650093ef1b5e1235",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/467bbef07fce64b902812e4a650093ef1b5e1235",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/467bbef07fce64b902812e4a650093ef1b5e1235/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6384fd9e1d3f8e692c8686a104caec23cf2fc05f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6384fd9e1d3f8e692c8686a104caec23cf2fc05f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6384fd9e1d3f8e692c8686a104caec23cf2fc05f"
    }
  ],
  "stats": {
    "total": 753,
    "additions": 630,
    "deletions": 123
  },
  "files": [
    {
      "sha": "e81b876858b428be69144496a659a3fb386821d0",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/467bbef07fce64b902812e4a650093ef1b5e1235/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/467bbef07fce64b902812e4a650093ef1b5e1235/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=467bbef07fce64b902812e4a650093ef1b5e1235",
      "patch": "@@ -1,3 +1,60 @@\n+2020-07-08  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (OP_LWPCB_E, OP_LWP_E): Delete.\n+\t(REG_XOP_LWPCB, REG_XOP_LWP, REG_XOP_TBM_01, REG_XOP_TBM_02):\n+\tRename to ...\n+\t(REG_0FXOP_09_12_M_1_L_0, REG_0FXOP_0A_12_L_0,\n+\tREG_0FXOP_09_01_L_0, REG_0FXOP_09_02_L_0): ... these\n+\trespectively.\n+\t(MOD_VEX_0FXOP_09_12, VEX_LEN_0FXOP_08_85, VEX_LEN_0FXOP_08_86,\n+\tVEX_LEN_0FXOP_08_87, VEX_LEN_0FXOP_08_8E, VEX_LEN_0FXOP_08_8F,\n+\tVEX_LEN_0FXOP_08_95, VEX_LEN_0FXOP_08_96, VEX_LEN_0FXOP_08_97,\n+\tVEX_LEN_0FXOP_08_9E, VEX_LEN_0FXOP_08_9F, VEX_LEN_0FXOP_08_A3,\n+\tVEX_LEN_0FXOP_08_A6, VEX_LEN_0FXOP_08_B6, VEX_LEN_0FXOP_08_C0,\n+\tVEX_LEN_0FXOP_08_C1, VEX_LEN_0FXOP_08_C2, VEX_LEN_0FXOP_08_C3,\n+\tVEX_LEN_0FXOP_09_01, VEX_LEN_0FXOP_09_02, VEX_LEN_0FXOP_09_12_M_1,\n+\tVEX_LEN_0FXOP_09_90, VEX_LEN_0FXOP_09_91, VEX_LEN_0FXOP_09_92,\n+\tVEX_LEN_0FXOP_09_93, VEX_LEN_0FXOP_09_94, VEX_LEN_0FXOP_09_95,\n+\tVEX_LEN_0FXOP_09_96, VEX_LEN_0FXOP_09_97, VEX_LEN_0FXOP_09_98,\n+\tVEX_LEN_0FXOP_09_99, VEX_LEN_0FXOP_09_9A, VEX_LEN_0FXOP_09_9B,\n+\tVEX_LEN_0FXOP_09_C1, VEX_LEN_0FXOP_09_C2, VEX_LEN_0FXOP_09_C3,\n+\tVEX_LEN_0FXOP_09_C6, VEX_LEN_0FXOP_09_C7, VEX_LEN_0FXOP_09_CB,\n+\tVEX_LEN_0FXOP_09_D1, VEX_LEN_0FXOP_09_D2, VEX_LEN_0FXOP_09_D3,\n+\tVEX_LEN_0FXOP_09_D6, VEX_LEN_0FXOP_09_D7, VEX_LEN_0FXOP_09_DB,\n+\tVEX_LEN_0FXOP_09_E1, VEX_LEN_0FXOP_09_E2, VEX_LEN_0FXOP_09_E3,\n+\tVEX_LEN_0FXOP_0A_12, VEX_W_0FXOP_08_85_L_0,\n+\tVEX_W_0FXOP_08_86_L_0, VEX_W_0FXOP_08_87_L_0,\n+\tVEX_W_0FXOP_08_8E_L_0, VEX_W_0FXOP_08_8F_L_0,\n+\tVEX_W_0FXOP_08_95_L_0, VEX_W_0FXOP_08_96_L_0,\n+\tVEX_W_0FXOP_08_97_L_0, VEX_W_0FXOP_08_9E_L_0,\n+\tVEX_W_0FXOP_08_9F_L_0, VEX_W_0FXOP_08_A6_L_0,\n+\tVEX_W_0FXOP_08_B6_L_0, VEX_W_0FXOP_08_C0_L_0,\n+\tVEX_W_0FXOP_08_C1_L_0, VEX_W_0FXOP_08_C2_L_0,\n+\tVEX_W_0FXOP_08_C3_L_0, VEX_W_0FXOP_08_CC_L_0,\n+\tVEX_W_0FXOP_08_CD_L_0, VEX_W_0FXOP_08_CE_L_0,\n+\tVEX_W_0FXOP_08_CF_L_0, VEX_W_0FXOP_08_EC_L_0,\n+\tVEX_W_0FXOP_08_ED_L_0, VEX_W_0FXOP_08_EE_L_0,\n+\tVEX_W_0FXOP_08_EF_L_0, VEX_W_0FXOP_09_C1_L_0,\n+\tVEX_W_0FXOP_09_C2_L_0, VEX_W_0FXOP_09_C3_L_0,\n+\tVEX_W_0FXOP_09_C6_L_0, VEX_W_0FXOP_09_C7_L_0,\n+\tVEX_W_0FXOP_09_CB_L_0, VEX_W_0FXOP_09_D1_L_0,\n+\tVEX_W_0FXOP_09_D2_L_0, VEX_W_0FXOP_09_D3_L_0,\n+\tVEX_W_0FXOP_09_D6_L_0, VEX_W_0FXOP_09_D7_L_0,\n+\tVEX_W_0FXOP_09_DB_L_0, VEX_W_0FXOP_09_E1_L_0,\n+\tVEX_W_0FXOP_09_E2_L_0, VEX_W_0FXOP_09_E3_L_0): New enumerators.\n+\t(reg_table): Re-order XOP entries. Adjust their operands.\n+\t(xop_table): Replace 08_85, 08_86, 08_87, 08_8E, 08_8F, 08_95,\n+\t08_96, 08_97, 08_9E, 08_9F, 08_A3, 08_A6, 08_B6, 08_C0, 08_C1,\n+\t08_C2, 08_C3, 09_01, 09_02, 09_12, 09_90, 09_91, 09_92, 09_93,\n+\t09_94, 09_95, 09_96, 09_97, 09_98, 09_99, 09_9A, 09_9B, 09_C1,\n+\t09_C2, 09_C3, 09_C6, 09_C7, 09_CB, 09_D1, 09_D2, 09_D3, 09_D6,\n+\t09_D7, 09_DB, 09_E1, 09_E2, 09_E3, and VEX_LEN_0FXOP_0A_12\n+\tentries by references ...\n+\t(vex_len_table): ... to resepctive new entries here. For several\n+\tnew and existing entries reference ...\n+\t(vex_w_table): ... new entries here.\n+\t(mod_table): New MOD_VEX_0FXOP_09_12 entry.\n+\n 2020-07-08  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (XMVexScalarI4): Define."
    },
    {
      "sha": "156d45d9b9b280f9d3f9bb63ce5a1d64219112af",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 573,
      "deletions": 123,
      "changes": 696,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/467bbef07fce64b902812e4a650093ef1b5e1235/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/467bbef07fce64b902812e4a650093ef1b5e1235/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=467bbef07fce64b902812e4a650093ef1b5e1235",
      "patch": "@@ -118,8 +118,6 @@ static void XMM_Fixup (int, int);\n static void CRC32_Fixup (int, int);\n static void FXSAVE_Fixup (int, int);\n static void PCMPESTR_Fixup (int, int);\n-static void OP_LWPCB_E (int, int);\n-static void OP_LWP_E (int, int);\n \n static void MOVBE_Fixup (int, int);\n static void MOVSXD_Fixup (int, int);\n@@ -737,10 +735,11 @@ enum\n   REG_VEX_0F73,\n   REG_VEX_0FAE,\n   REG_VEX_0F38F3,\n-  REG_XOP_LWPCB,\n-  REG_XOP_LWP,\n-  REG_XOP_TBM_01,\n-  REG_XOP_TBM_02,\n+\n+  REG_0FXOP_09_01_L_0,\n+  REG_0FXOP_09_02_L_0,\n+  REG_0FXOP_09_12_M_1_L_0,\n+  REG_0FXOP_0A_12_L_0,\n \n   REG_EVEX_0F71,\n   REG_EVEX_0F72,\n@@ -918,6 +917,8 @@ enum\n   MOD_VEX_W_0_0F3A33_P_2_LEN_0,\n   MOD_VEX_W_1_0F3A33_P_2_LEN_0,\n \n+  MOD_VEX_0FXOP_09_12,\n+\n   MOD_EVEX_0F12_PREFIX_0,\n   MOD_EVEX_0F12_PREFIX_2,\n   MOD_EVEX_0F13,\n@@ -1791,6 +1792,23 @@ enum\n   VEX_LEN_0F3A63_P_2,\n   VEX_LEN_0F3ADF_P_2,\n   VEX_LEN_0F3AF0_P_3,\n+  VEX_LEN_0FXOP_08_85,\n+  VEX_LEN_0FXOP_08_86,\n+  VEX_LEN_0FXOP_08_87,\n+  VEX_LEN_0FXOP_08_8E,\n+  VEX_LEN_0FXOP_08_8F,\n+  VEX_LEN_0FXOP_08_95,\n+  VEX_LEN_0FXOP_08_96,\n+  VEX_LEN_0FXOP_08_97,\n+  VEX_LEN_0FXOP_08_9E,\n+  VEX_LEN_0FXOP_08_9F,\n+  VEX_LEN_0FXOP_08_A3,\n+  VEX_LEN_0FXOP_08_A6,\n+  VEX_LEN_0FXOP_08_B6,\n+  VEX_LEN_0FXOP_08_C0,\n+  VEX_LEN_0FXOP_08_C1,\n+  VEX_LEN_0FXOP_08_C2,\n+  VEX_LEN_0FXOP_08_C3,\n   VEX_LEN_0FXOP_08_CC,\n   VEX_LEN_0FXOP_08_CD,\n   VEX_LEN_0FXOP_08_CE,\n@@ -1799,8 +1817,39 @@ enum\n   VEX_LEN_0FXOP_08_ED,\n   VEX_LEN_0FXOP_08_EE,\n   VEX_LEN_0FXOP_08_EF,\n+  VEX_LEN_0FXOP_09_01,\n+  VEX_LEN_0FXOP_09_02,\n+  VEX_LEN_0FXOP_09_12_M_1,\n   VEX_LEN_0FXOP_09_82_W_0,\n   VEX_LEN_0FXOP_09_83_W_0,\n+  VEX_LEN_0FXOP_09_90,\n+  VEX_LEN_0FXOP_09_91,\n+  VEX_LEN_0FXOP_09_92,\n+  VEX_LEN_0FXOP_09_93,\n+  VEX_LEN_0FXOP_09_94,\n+  VEX_LEN_0FXOP_09_95,\n+  VEX_LEN_0FXOP_09_96,\n+  VEX_LEN_0FXOP_09_97,\n+  VEX_LEN_0FXOP_09_98,\n+  VEX_LEN_0FXOP_09_99,\n+  VEX_LEN_0FXOP_09_9A,\n+  VEX_LEN_0FXOP_09_9B,\n+  VEX_LEN_0FXOP_09_C1,\n+  VEX_LEN_0FXOP_09_C2,\n+  VEX_LEN_0FXOP_09_C3,\n+  VEX_LEN_0FXOP_09_C6,\n+  VEX_LEN_0FXOP_09_C7,\n+  VEX_LEN_0FXOP_09_CB,\n+  VEX_LEN_0FXOP_09_D1,\n+  VEX_LEN_0FXOP_09_D2,\n+  VEX_LEN_0FXOP_09_D3,\n+  VEX_LEN_0FXOP_09_D6,\n+  VEX_LEN_0FXOP_09_D7,\n+  VEX_LEN_0FXOP_09_DB,\n+  VEX_LEN_0FXOP_09_E1,\n+  VEX_LEN_0FXOP_09_E2,\n+  VEX_LEN_0FXOP_09_E3,\n+  VEX_LEN_0FXOP_0A_12,\n };\n \n enum\n@@ -1939,10 +1988,50 @@ enum\n   VEX_W_0F3ACE_P_2,\n   VEX_W_0F3ACF_P_2,\n \n+  VEX_W_0FXOP_08_85_L_0,\n+  VEX_W_0FXOP_08_86_L_0,\n+  VEX_W_0FXOP_08_87_L_0,\n+  VEX_W_0FXOP_08_8E_L_0,\n+  VEX_W_0FXOP_08_8F_L_0,\n+  VEX_W_0FXOP_08_95_L_0,\n+  VEX_W_0FXOP_08_96_L_0,\n+  VEX_W_0FXOP_08_97_L_0,\n+  VEX_W_0FXOP_08_9E_L_0,\n+  VEX_W_0FXOP_08_9F_L_0,\n+  VEX_W_0FXOP_08_A6_L_0,\n+  VEX_W_0FXOP_08_B6_L_0,\n+  VEX_W_0FXOP_08_C0_L_0,\n+  VEX_W_0FXOP_08_C1_L_0,\n+  VEX_W_0FXOP_08_C2_L_0,\n+  VEX_W_0FXOP_08_C3_L_0,\n+  VEX_W_0FXOP_08_CC_L_0,\n+  VEX_W_0FXOP_08_CD_L_0,\n+  VEX_W_0FXOP_08_CE_L_0,\n+  VEX_W_0FXOP_08_CF_L_0,\n+  VEX_W_0FXOP_08_EC_L_0,\n+  VEX_W_0FXOP_08_ED_L_0,\n+  VEX_W_0FXOP_08_EE_L_0,\n+  VEX_W_0FXOP_08_EF_L_0,\n+\n   VEX_W_0FXOP_09_80,\n   VEX_W_0FXOP_09_81,\n   VEX_W_0FXOP_09_82,\n   VEX_W_0FXOP_09_83,\n+  VEX_W_0FXOP_09_C1_L_0,\n+  VEX_W_0FXOP_09_C2_L_0,\n+  VEX_W_0FXOP_09_C3_L_0,\n+  VEX_W_0FXOP_09_C6_L_0,\n+  VEX_W_0FXOP_09_C7_L_0,\n+  VEX_W_0FXOP_09_CB_L_0,\n+  VEX_W_0FXOP_09_D1_L_0,\n+  VEX_W_0FXOP_09_D2_L_0,\n+  VEX_W_0FXOP_09_D3_L_0,\n+  VEX_W_0FXOP_09_D6_L_0,\n+  VEX_W_0FXOP_09_D7_L_0,\n+  VEX_W_0FXOP_09_DB_L_0,\n+  VEX_W_0FXOP_09_E1_L_0,\n+  VEX_W_0FXOP_09_E2_L_0,\n+  VEX_W_0FXOP_09_E3_L_0,\n \n   EVEX_W_0F10_P_1,\n   EVEX_W_0F10_P_3,\n@@ -3402,36 +3491,36 @@ static const struct dis386 reg_table[][8] = {\n     { PREFIX_TABLE (PREFIX_VEX_0F38F3_REG_2) },\n     { PREFIX_TABLE (PREFIX_VEX_0F38F3_REG_3) },\n   },\n-  /* REG_XOP_LWPCB */\n-  {\n-    { \"llwpcb\", { { OP_LWPCB_E, 0 } }, 0 },\n-    { \"slwpcb\",\t{ { OP_LWPCB_E, 0 } }, 0 },\n-  },\n-  /* REG_XOP_LWP */\n-  {\n-    { \"lwpins\", { { OP_LWP_E, 0 }, Ed, Id }, 0 },\n-    { \"lwpval\",\t{ { OP_LWP_E, 0 }, Ed, Id }, 0 },\n-  },\n-  /* REG_XOP_TBM_01 */\n+  /* REG_0FXOP_09_01_L_0 */\n   {\n     { Bad_Opcode },\n-    { \"blcfill\",\t{ { OP_LWP_E, 0 }, Edq }, 0 },\n-    { \"blsfill\",\t{ { OP_LWP_E, 0 }, Edq }, 0 },\n-    { \"blcs\",\t{ { OP_LWP_E, 0 }, Edq }, 0 },\n-    { \"tzmsk\",\t{ { OP_LWP_E, 0 }, Edq }, 0 },\n-    { \"blcic\",\t{ { OP_LWP_E, 0 }, Edq }, 0 },\n-    { \"blsic\",\t{ { OP_LWP_E, 0 }, Edq }, 0 },\n-    { \"t1mskc\",\t{ { OP_LWP_E, 0 }, Edq }, 0 },\n+    { \"blcfill\",\t{ VexGdq, Edq }, 0 },\n+    { \"blsfill\",\t{ VexGdq, Edq }, 0 },\n+    { \"blcs\",\t{ VexGdq, Edq }, 0 },\n+    { \"tzmsk\",\t{ VexGdq, Edq }, 0 },\n+    { \"blcic\",\t{ VexGdq, Edq }, 0 },\n+    { \"blsic\",\t{ VexGdq, Edq }, 0 },\n+    { \"t1mskc\",\t{ VexGdq, Edq }, 0 },\n   },\n-  /* REG_XOP_TBM_02 */\n+  /* REG_0FXOP_09_02_L_0 */\n   {\n     { Bad_Opcode },\n-    { \"blcmsk\",\t{ { OP_LWP_E, 0 }, Edq }, 0 },\n+    { \"blcmsk\",\t{ VexGdq, Edq }, 0 },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"blci\",\t{ { OP_LWP_E, 0 }, Edq }, 0 },\n+    { \"blci\",\t{ VexGdq, Edq }, 0 },\n+  },\n+  /* REG_0FXOP_09_12_M_1_L_0 */\n+  {\n+    { \"llwpcb\",\t{ Edq }, 0 },\n+    { \"slwpcb\",\t{ Edq }, 0 },\n+  },\n+  /* REG_0FXOP_0A_12_L_0 */\n+  {\n+    { \"lwpins\",\t{ VexGdq, Ed, Id }, 0 },\n+    { \"lwpval\",\t{ VexGdq, Ed, Id }, 0 },\n   },\n \n #include \"i386-dis-evex-reg.h\"\n@@ -7553,44 +7642,44 @@ static const struct dis386 xop_table[][256] = {\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vpmacssww\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n-    { \"vpmacsswd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n-    { \"vpmacssdql\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_85) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_86) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_87) },\n     /* 88 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vpmacssdd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n-    { \"vpmacssdqh\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_8E) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_8F) },\n     /* 90 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vpmacsww\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n-    { \"vpmacswd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n-    { \"vpmacsdql\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_95) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_96) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_97) },\n     /* 98 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vpmacsdd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n-    { \"vpmacsdqh\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_9E) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_9F) },\n     /* a0 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { \"vpcmov\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n-    { \"vpperm\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_A3) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vpmadcsswd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_A6) },\n     { Bad_Opcode },\n     /* a8 */\n     { Bad_Opcode },\n@@ -7608,7 +7697,7 @@ static const struct dis386 xop_table[][256] = {\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vpmadcswd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_B6) },\n     { Bad_Opcode },\n     /* b8 */\n     { Bad_Opcode },\n@@ -7620,10 +7709,10 @@ static const struct dis386 xop_table[][256] = {\n     { Bad_Opcode },\n     { Bad_Opcode },\n     /* c0 */\n-    { \"vprotb\", \t{ XM, EXx, Ib }, 0 },\n-    { \"vprotw\", \t{ XM, EXx, Ib }, 0 },\n-    { \"vprotd\", \t{ XM, EXx, Ib }, 0 },\n-    { \"vprotq\", \t{ XM, EXx, Ib }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_C0) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_C1) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_C2) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_08_C3) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -7696,8 +7785,8 @@ static const struct dis386 xop_table[][256] = {\n   {\n     /* 00 */\n     { Bad_Opcode },\n-    { REG_TABLE (REG_XOP_TBM_01) },\n-    { REG_TABLE (REG_XOP_TBM_02) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_01) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_02) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -7715,7 +7804,7 @@ static const struct dis386 xop_table[][256] = {\n     /* 10 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { REG_TABLE (REG_XOP_LWPCB) },\n+    { MOD_TABLE (MOD_VEX_0FXOP_09_12) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -7857,19 +7946,19 @@ static const struct dis386 xop_table[][256] = {\n     { Bad_Opcode },\n     { Bad_Opcode },\n     /* 90 */\n-    { \"vprotb\",\t\t{ XM, EXx, VexW }, 0 },\n-    { \"vprotw\",\t\t{ XM, EXx, VexW }, 0 },\n-    { \"vprotd\",\t\t{ XM, EXx, VexW }, 0 },\n-    { \"vprotq\",\t\t{ XM, EXx, VexW }, 0 },\n-    { \"vpshlb\",\t\t{ XM, EXx, VexW }, 0 },\n-    { \"vpshlw\",\t\t{ XM, EXx, VexW }, 0 },\n-    { \"vpshld\",\t\t{ XM, EXx, VexW }, 0 },\n-    { \"vpshlq\",\t\t{ XM, EXx, VexW }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_90) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_91) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_92) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_93) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_94) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_95) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_96) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_97) },\n     /* 98 */\n-    { \"vpshab\",\t\t{ XM, EXx, VexW }, 0 },\n-    { \"vpshaw\",\t\t{ XM, EXx, VexW }, 0 },\n-    { \"vpshad\",\t\t{ XM, EXx, VexW }, 0 },\n-    { \"vpshaq\",\t\t{ XM, EXx, VexW }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_98) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_99) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_9A) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_9B) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -7912,45 +8001,45 @@ static const struct dis386 xop_table[][256] = {\n     { Bad_Opcode },\n     /* c0 */\n     { Bad_Opcode },\n-    { \"vphaddbw\",\t{ XM, EXxmm }, 0 },\n-    { \"vphaddbd\",\t{ XM, EXxmm }, 0 },\n-    { \"vphaddbq\",\t{ XM, EXxmm }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_C1) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_C2) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_C3) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vphaddwd\",\t{ XM, EXxmm }, 0 },\n-    { \"vphaddwq\",\t{ XM, EXxmm }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_C6) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_C7) },\n     /* c8 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vphadddq\",\t{ XM, EXxmm }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_CB) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     /* d0 */\n     { Bad_Opcode },\n-    { \"vphaddubw\",\t{ XM, EXxmm }, 0 },\n-    { \"vphaddubd\",\t{ XM, EXxmm }, 0 },\n-    { \"vphaddubq\",\t{ XM, EXxmm }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_D1) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_D2) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_D3) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vphadduwd\",\t{ XM, EXxmm }, 0 },\n-    { \"vphadduwq\",\t{ XM, EXxmm }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_D6) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_D7) },\n     /* d8 */\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"vphaddudq\",\t{ XM, EXxmm }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_DB) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     /* e0 */\n     { Bad_Opcode },\n-    { \"vphsubbw\",\t{ XM, EXxmm }, 0 },\n-    { \"vphsubwd\",\t{ XM, EXxmm }, 0 },\n-    { \"vphsubdq\",\t{ XM, EXxmm }, 0 },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_E1) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_E2) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_E3) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -8006,7 +8095,7 @@ static const struct dis386 xop_table[][256] = {\n     /* 10 */\n     { \"bextrS\",\t{ Gdq, Edq, Id }, 0 },\n     { Bad_Opcode },\n-    { REG_TABLE (REG_XOP_LWP) },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_0A_12) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -9623,44 +9712,144 @@ static const struct dis386 vex_len_table[][2] = {\n     { \"rorxS\",\t\t{ Gdq, Edq, Ib }, 0 },\n   },\n \n+  /* VEX_LEN_0FXOP_08_85 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_85_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_86 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_86_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_87 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_87_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_8E */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_8E_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_8F */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_8F_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_95 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_95_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_96 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_96_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_97 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_97_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_9E */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_9E_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_9F */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_9F_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_A3 */\n+  {\n+    { \"vpperm\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_A6 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_A6_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_B6 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_B6_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_C0 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_C0_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_C1 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_C1_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_C2 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_C2_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_08_C3 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_C3_L_0) },\n+  },\n+\n   /* VEX_LEN_0FXOP_08_CC */\n   {\n-     { \"vpcomb\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_CC_L_0) },\n   },\n \n   /* VEX_LEN_0FXOP_08_CD */\n   {\n-     { \"vpcomw\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_CD_L_0) },\n   },\n \n   /* VEX_LEN_0FXOP_08_CE */\n   {\n-     { \"vpcomd\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_CE_L_0) },\n   },\n \n   /* VEX_LEN_0FXOP_08_CF */\n   {\n-     { \"vpcomq\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_CF_L_0) },\n   },\n \n   /* VEX_LEN_0FXOP_08_EC */\n   {\n-     { \"vpcomub\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_EC_L_0) },\n   },\n \n   /* VEX_LEN_0FXOP_08_ED */\n   {\n-     { \"vpcomuw\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_ED_L_0) },\n   },\n \n   /* VEX_LEN_0FXOP_08_EE */\n   {\n-     { \"vpcomud\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_EE_L_0) },\n   },\n \n   /* VEX_LEN_0FXOP_08_EF */\n   {\n-     { \"vpcomuq\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+    { VEX_W_TABLE (VEX_W_0FXOP_08_EF_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_01 */\n+  {\n+    { REG_TABLE (REG_0FXOP_09_01_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_02 */\n+  {\n+    { REG_TABLE (REG_0FXOP_09_02_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_12_M_1 */\n+  {\n+    { REG_TABLE (REG_0FXOP_09_12_M_1_L_0) },\n   },\n \n   /* VEX_LEN_0FXOP_09_82_W_0 */\n@@ -9672,6 +9861,146 @@ static const struct dis386 vex_len_table[][2] = {\n   {\n     { \"vfrczsd\", \t{ XM, EXq }, 0 },\n   },\n+\n+  /* VEX_LEN_0FXOP_09_90 */\n+  {\n+    { \"vprotb\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_91 */\n+  {\n+    { \"vprotw\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_92 */\n+  {\n+    { \"vprotd\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_93 */\n+  {\n+    { \"vprotq\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_94 */\n+  {\n+    { \"vpshlb\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_95 */\n+  {\n+    { \"vpshlw\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_96 */\n+  {\n+    { \"vpshld\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_97 */\n+  {\n+    { \"vpshlq\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_98 */\n+  {\n+    { \"vpshab\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_99 */\n+  {\n+    { \"vpshaw\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_9A */\n+  {\n+    { \"vpshad\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_9B */\n+  {\n+    { \"vpshaq\",\t\t{ XM, EXx, VexW }, 0 },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_C1 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_C1_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_C2 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_C2_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_C3 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_C3_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_C6 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_C6_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_C7 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_C7_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_CB */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_CB_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_D1 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_D1_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_D2 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_D2_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_D3 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_D3_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_D6 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_D6_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_D7 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_D7_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_DB */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_DB_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_E1 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_E1_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_E2 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_E2_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_09_E3 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_E3_L_0) },\n+  },\n+\n+  /* VEX_LEN_0FXOP_0A_12 */\n+  {\n+    { REG_TABLE (REG_0FXOP_0A_12_L_0) },\n+  },\n };\n \n #include \"i386-dis-evex-len.h\"\n@@ -9988,6 +10317,102 @@ static const struct dis386 vex_w_table[][2] = {\n     { Bad_Opcode },\n     { \"vgf2p8affineinvqb\",  { XM, Vex, EXx, Ib }, 0 },\n   },\n+  /* VEX_W_0FXOP_08_85_L_0 */\n+  {\n+    { \"vpmacssww\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_86_L_0 */\n+  {\n+    { \"vpmacsswd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_87_L_0 */\n+  {\n+    { \"vpmacssdql\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_8E_L_0 */\n+  {\n+    { \"vpmacssdd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_8F_L_0 */\n+  {\n+    { \"vpmacssdqh\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_95_L_0 */\n+  {\n+    { \"vpmacsww\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_96_L_0 */\n+  {\n+    { \"vpmacswd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_97_L_0 */\n+  {\n+    { \"vpmacsdql\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_9E_L_0 */\n+  {\n+    { \"vpmacsdd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_9F_L_0 */\n+  {\n+    { \"vpmacsdqh\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_A6_L_0 */\n+  {\n+    { \"vpmadcsswd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_B6_L_0 */\n+  {\n+    { \"vpmadcswd\", \t{ XM, Vex, EXx, XMVexI4 }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_C0_L_0 */\n+  {\n+    { \"vprotb\", \t{ XM, EXx, Ib }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_C1_L_0 */\n+  {\n+    { \"vprotw\", \t{ XM, EXx, Ib }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_C2_L_0 */\n+  {\n+    { \"vprotd\", \t{ XM, EXx, Ib }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_C3_L_0 */\n+  {\n+    { \"vprotq\", \t{ XM, EXx, Ib }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_CC_L_0 */\n+  {\n+     { \"vpcomb\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_CD_L_0 */\n+  {\n+     { \"vpcomw\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_CE_L_0 */\n+  {\n+     { \"vpcomd\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_CF_L_0 */\n+  {\n+     { \"vpcomq\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_EC_L_0 */\n+  {\n+     { \"vpcomub\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_ED_L_0 */\n+  {\n+     { \"vpcomuw\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_EE_L_0 */\n+  {\n+     { \"vpcomud\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+  },\n+  /* VEX_W_0FXOP_08_EF_L_0 */\n+  {\n+     { \"vpcomuq\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n+  },\n   /* VEX_W_0FXOP_09_80 */\n   {\n     { \"vfrczps\",\t{ XM, EXx }, 0 },\n@@ -10004,6 +10429,66 @@ static const struct dis386 vex_w_table[][2] = {\n   {\n     { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_83_W_0) },\n   },\n+  /* VEX_W_0FXOP_09_C1_L_0 */\n+  {\n+    { \"vphaddbw\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_C2_L_0 */\n+  {\n+    { \"vphaddbd\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_C3_L_0 */\n+  {\n+    { \"vphaddbq\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_C6_L_0 */\n+  {\n+    { \"vphaddwd\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_C7_L_0 */\n+  {\n+    { \"vphaddwq\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_CB_L_0 */\n+  {\n+    { \"vphadddq\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_D1_L_0 */\n+  {\n+    { \"vphaddubw\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_D2_L_0 */\n+  {\n+    { \"vphaddubd\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_D3_L_0 */\n+  {\n+    { \"vphaddubq\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_D6_L_0 */\n+  {\n+    { \"vphadduwd\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_D7_L_0 */\n+  {\n+    { \"vphadduwq\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_DB_L_0 */\n+  {\n+    { \"vphaddudq\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_E1_L_0 */\n+  {\n+    { \"vphsubbw\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_E2_L_0 */\n+  {\n+    { \"vphsubwd\",\t{ XM, EXxmm }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_E3_L_0 */\n+  {\n+    { \"vphsubdq\",\t{ XM, EXxmm }, 0 },\n+  },\n \n #include \"i386-dis-evex-w.h\"\n };\n@@ -10786,6 +11271,11 @@ static const struct dis386 mod_table[][2] = {\n     { Bad_Opcode },\n     { \"kshiftlq\",       { MaskG, MaskR, Ib }, 0 },\n   },\n+  {\n+    /* MOD_VEX_0FXOP_09_12 */\n+    { Bad_Opcode },\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_12_M_1) },\n+  },\n \n #include \"i386-dis-evex-mod.h\"\n };\n@@ -16156,46 +16646,6 @@ MOVSXD_Fixup (int bytemode, int sizeflag)\n   OP_E (bytemode, sizeflag);\n }\n \n-static void\n-OP_LWPCB_E (int bytemode ATTRIBUTE_UNUSED, int sizeflag ATTRIBUTE_UNUSED)\n-{\n-  int reg;\n-  const char **names;\n-\n-  /* Skip mod/rm byte.  */\n-  MODRM_CHECK;\n-  codep++;\n-\n-  if (rex & REX_W)\n-    names = names64;\n-  else\n-    names = names32;\n-\n-  reg = modrm.rm;\n-  USED_REX (REX_B);\n-  if (rex & REX_B)\n-    reg += 8;\n-\n-  oappend (names[reg]);\n-}\n-\n-static void\n-OP_LWP_E (int bytemode ATTRIBUTE_UNUSED, int sizeflag ATTRIBUTE_UNUSED)\n-{\n-  const char **names;\n-  unsigned int reg = vex.register_specifier;\n-  vex.register_specifier = 0;\n-\n-  if (rex & REX_W)\n-    names = names64;\n-  else\n-    names = names32;\n-\n-  if (address_mode != mode_64bit)\n-    reg &= 7;\n-  oappend (names[reg]);\n-}\n-\n static void\n OP_Mask (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n {"
    }
  ]
}