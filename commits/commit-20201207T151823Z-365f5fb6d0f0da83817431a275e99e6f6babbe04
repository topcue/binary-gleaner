{
  "sha": "365f5fb6d0f0da83817431a275e99e6f6babbe04",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzY1ZjVmYjZkMGYwZGE4MzgxNzQzMWEyNzVlOTllNmY2YmFiYmUwNA==",
  "commit": {
    "author": {
      "name": "Siddhesh Poyarekar",
      "email": "siddhesh@gotplt.org",
      "date": "2020-12-07T15:18:23Z"
    },
    "committer": {
      "name": "Siddhesh Poyarekar",
      "email": "siddhesh@gotplt.org",
      "date": "2020-12-07T15:18:23Z"
    },
    "message": "binutils: Use file descriptors from make_tempname\n\nThe purpose of creating a temporary file securely using mkstemp is\ndefeated if it is closed in make_tempname and reopened later for use;\nit is as good as using mktemp.  Get the file descriptor instead and\nthen use it to create the BFD object.\n\nbfd/\n\n\t* opncls.c (bfd_fdopenw): New function.\n\t* bfd-in2.h: Regenerate.\n\nbinutils/\n\n\t* bucomm.c (make_tempname): Add argument to return file\n\tdescriptor.\n\t* bucomm.h (make_tempname): Likewise.\n\t* ar.c: Include libbfd.h.\n\t(write_archive): Adjust for change in make_tempname.  Call\n\tbfd_fdopenw instead of bfd_openw.\n\t* objcopy.c: Include libbfd.h.\n\t(copy_file): New argument OFD.  Use bfd_fdopenw instead of\n\tbfd_openw.\n\t(strip_main): Adjust for change in make_tempname and\n\tcopy_file.\n\t(copy_main): Likewise.",
    "tree": {
      "sha": "2fc2d6dfad654e6dba514065239d22be824b4d4a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2fc2d6dfad654e6dba514065239d22be824b4d4a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/365f5fb6d0f0da83817431a275e99e6f6babbe04",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/365f5fb6d0f0da83817431a275e99e6f6babbe04",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/365f5fb6d0f0da83817431a275e99e6f6babbe04",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/365f5fb6d0f0da83817431a275e99e6f6babbe04/comments",
  "author": {
    "login": "siddhesh",
    "id": 158582,
    "node_id": "MDQ6VXNlcjE1ODU4Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/siddhesh",
    "html_url": "https://github.com/siddhesh",
    "followers_url": "https://api.github.com/users/siddhesh/followers",
    "following_url": "https://api.github.com/users/siddhesh/following{/other_user}",
    "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions",
    "organizations_url": "https://api.github.com/users/siddhesh/orgs",
    "repos_url": "https://api.github.com/users/siddhesh/repos",
    "events_url": "https://api.github.com/users/siddhesh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/siddhesh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "siddhesh",
    "id": 158582,
    "node_id": "MDQ6VXNlcjE1ODU4Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/siddhesh",
    "html_url": "https://github.com/siddhesh",
    "followers_url": "https://api.github.com/users/siddhesh/followers",
    "following_url": "https://api.github.com/users/siddhesh/following{/other_user}",
    "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions",
    "organizations_url": "https://api.github.com/users/siddhesh/orgs",
    "repos_url": "https://api.github.com/users/siddhesh/repos",
    "events_url": "https://api.github.com/users/siddhesh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/siddhesh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a4915e8d6ceac18826d2c832cb1303690dc9f256",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a4915e8d6ceac18826d2c832cb1303690dc9f256",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a4915e8d6ceac18826d2c832cb1303690dc9f256"
    }
  ],
  "stats": {
    "total": 105,
    "additions": 91,
    "deletions": 14
  },
  "files": [
    {
      "sha": "99c275ce4f1b5c127ac97c81f8818715930b79ac",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/365f5fb6d0f0da83817431a275e99e6f6babbe04/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/365f5fb6d0f0da83817431a275e99e6f6babbe04/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=365f5fb6d0f0da83817431a275e99e6f6babbe04",
      "patch": "@@ -1,3 +1,9 @@\n+2020-12-07  Siddhesh Poyarekar  <siddhesh@sourceware.org>\n+\n+\tPR 26945\n+\t* opncls.c (bfd_fdopenw): New function.\n+\t* bfd-in2.h: Regenerate.\n+\n 2020-12-07  Alan Modra  <amodra@gmail.com>\n \n \t* elf32-csky.c (csky_relocate_contents): Correct negate test."
    },
    {
      "sha": "48e3d9b6647c0e9d8854e3018db2ddc75b028d66",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/365f5fb6d0f0da83817431a275e99e6f6babbe04/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/365f5fb6d0f0da83817431a275e99e6f6babbe04/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=365f5fb6d0f0da83817431a275e99e6f6babbe04",
      "patch": "@@ -588,6 +588,8 @@ bfd *bfd_openr (const char *filename, const char *target);\n \n bfd *bfd_fdopenr (const char *filename, const char *target, int fd);\n \n+bfd *bfd_fdopenw (const char *filename, const char *target, int fd);\n+\n bfd *bfd_openstreamr (const char * filename, const char * target,\n     void * stream);\n "
    },
    {
      "sha": "f7696b658ca33f3b025c0722c14a2f6a1b9ae02c",
      "filename": "bfd/opncls.c",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/365f5fb6d0f0da83817431a275e99e6f6babbe04/bfd/opncls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/365f5fb6d0f0da83817431a275e99e6f6babbe04/bfd/opncls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/opncls.c?ref=365f5fb6d0f0da83817431a275e99e6f6babbe04",
      "patch": "@@ -393,6 +393,39 @@ bfd_fdopenr (const char *filename, const char *target, int fd)\n   return bfd_fopen (filename, target, mode, fd);\n }\n \n+/*\n+FUNCTION\n+\tbfd_fdopenw\n+\n+SYNOPSIS\n+\tbfd *bfd_fdopenw (const char *filename, const char *target, int fd);\n+\n+DESCRIPTION\n+\t<<bfd_fdopenw>> is exactly like <<bfd_fdopenr>> with the exception that\n+\tthe resulting BFD is suitable for output.\n+*/\n+\n+bfd *\n+bfd_fdopenw (const char *filename, const char *target, int fd)\n+{\n+  bfd *out = bfd_fdopenr (filename, target, fd);\n+\n+  if (out != NULL)\n+    {\n+      if (!bfd_write_p (out))\n+\t{\n+\t  close (fd);\n+\t  _bfd_delete_bfd (out);\n+\t  out = NULL;\n+\t  bfd_set_error (bfd_error_invalid_operation);\n+\t}\n+      else\n+\tout->direction = write_direction;\n+    }\n+\n+  return out;\n+}\n+\n /*\n FUNCTION\n \tbfd_openstreamr"
    },
    {
      "sha": "e0794e4302cb7624db7b90ddac8a16f31ed4f3f2",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/365f5fb6d0f0da83817431a275e99e6f6babbe04/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/365f5fb6d0f0da83817431a275e99e6f6babbe04/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=365f5fb6d0f0da83817431a275e99e6f6babbe04",
      "patch": "@@ -1,3 +1,20 @@\n+2020-12-07  Siddhesh Poyarekar  <siddhesh@sourceware.org>\n+\n+\tPR 26945\n+\t* bucomm.c (make_tempname): Add argument to return file\n+\tdescriptor.\n+\t* bucomm.h (make_tempname): Likewise.\n+\t* ar.c: Include libbfd.h.\n+\t(write_archive): Adjust for change in make_tempname.  Call\n+\tbfd_fdopenw instead of bfd_openw.\n+\t* objcopy.c: Include libbfd.h.\n+\t(copy_file): New argument OFD.  Use bfd_fdopenw instead of\n+\tbfd_openw.\n+\t(strip_main): Adjust for change in make_tempname and\n+\tcopy_file.\n+\t(copy_main): Likewise.\n+\n+\n 2020-12-07  Nick Clifton  <nickc@redhat.com>\n \n \t* README-how-to-make-a-release (point releases): Add a note to"
    },
    {
      "sha": "225324208bd6e59e2de0f1e4d3a65ef89d44811d",
      "filename": "binutils/ar.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/365f5fb6d0f0da83817431a275e99e6f6babbe04/binutils/ar.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/365f5fb6d0f0da83817431a275e99e6f6babbe04/binutils/ar.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ar.c?ref=365f5fb6d0f0da83817431a275e99e6f6babbe04",
      "patch": "@@ -25,6 +25,7 @@\n \n #include \"sysdep.h\"\n #include \"bfd.h\"\n+#include \"libbfd.h\"\n #include \"libiberty.h\"\n #include \"progress.h\"\n #include \"getopt.h\"\n@@ -1252,20 +1253,24 @@ write_archive (bfd *iarch)\n   bfd *obfd;\n   char *old_name, *new_name;\n   bfd *contents_head = iarch->archive_next;\n+  int ofd = -1;\n \n   old_name = (char *) xmalloc (strlen (bfd_get_filename (iarch)) + 1);\n   strcpy (old_name, bfd_get_filename (iarch));\n-  new_name = make_tempname (old_name);\n+  new_name = make_tempname (old_name, &ofd);\n \n   if (new_name == NULL)\n     bfd_fatal (_(\"could not create temporary file whilst writing archive\"));\n \n   output_filename = new_name;\n \n-  obfd = bfd_openw (new_name, bfd_get_target (iarch));\n+  obfd = bfd_fdopenw (new_name, bfd_get_target (iarch), ofd);\n \n   if (obfd == NULL)\n-    bfd_fatal (old_name);\n+    {\n+      close (ofd);\n+      bfd_fatal (old_name);\n+    }\n \n   output_bfd = obfd;\n "
    },
    {
      "sha": "53244201f89b2c649a8848a36fafbe0764db74bd",
      "filename": "binutils/bucomm.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/365f5fb6d0f0da83817431a275e99e6f6babbe04/binutils/bucomm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/365f5fb6d0f0da83817431a275e99e6f6babbe04/binutils/bucomm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/bucomm.c?ref=365f5fb6d0f0da83817431a275e99e6f6babbe04",
      "patch": "@@ -532,7 +532,7 @@ template_in_dir (const char *path)\n    as FILENAME.  */\n \n char *\n-make_tempname (const char *filename)\n+make_tempname (const char *filename, int *ofd)\n {\n   char *tmpname = template_in_dir (filename);\n   int fd;\n@@ -550,7 +550,7 @@ make_tempname (const char *filename)\n       free (tmpname);\n       return NULL;\n     }\n-  close (fd);\n+  *ofd = fd;\n   return tmpname;\n }\n "
    },
    {
      "sha": "afb8e09c2fd9aed02d1c240952fa30313a660019",
      "filename": "binutils/bucomm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/365f5fb6d0f0da83817431a275e99e6f6babbe04/binutils/bucomm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/365f5fb6d0f0da83817431a275e99e6f6babbe04/binutils/bucomm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/bucomm.h?ref=365f5fb6d0f0da83817431a275e99e6f6babbe04",
      "patch": "@@ -51,7 +51,7 @@ int display_info (void);\n \n void print_arelt_descr (FILE *, bfd *, bfd_boolean, bfd_boolean);\n \n-char *make_tempname (const char *);\n+char *make_tempname (const char *, int *);\n char *make_tempdir (const char *);\n \n bfd_vma parse_vma (const char *, const char *);"
    },
    {
      "sha": "2eb083c37696243f8e8c5db368664f91ddbf216d",
      "filename": "binutils/objcopy.c",
      "status": "modified",
      "additions": 22,
      "deletions": 8,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/365f5fb6d0f0da83817431a275e99e6f6babbe04/binutils/objcopy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/365f5fb6d0f0da83817431a275e99e6f6babbe04/binutils/objcopy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objcopy.c?ref=365f5fb6d0f0da83817431a275e99e6f6babbe04",
      "patch": "@@ -20,6 +20,7 @@\n \f\n #include \"sysdep.h\"\n #include \"bfd.h\"\n+#include \"libbfd.h\"\n #include \"progress.h\"\n #include \"getopt.h\"\n #include \"libiberty.h\"\n@@ -3727,7 +3728,7 @@ set_long_section_mode (bfd *output_bfd, bfd *input_bfd, enum long_section_name_h\n /* The top-level control.  */\n \n static void\n-copy_file (const char *input_filename, const char *output_filename,\n+copy_file (const char *input_filename, const char *output_filename, int ofd,\n \t   const char *input_target,   const char *output_target,\n \t   const bfd_arch_info_type *input_arch)\n {\n@@ -3802,9 +3803,14 @@ copy_file (const char *input_filename, const char *output_filename,\n       else\n \tforce_output_target = TRUE;\n \n-      obfd = bfd_openw (output_filename, output_target);\n+      if (ofd >= 0)\n+\tobfd = bfd_fdopenw (output_filename, output_target, ofd);\n+      else\n+\tobfd = bfd_openw (output_filename, output_target);\n+\n       if (obfd == NULL)\n \t{\n+\t  close (ofd);\n \t  bfd_nonfatal_message (output_filename, NULL, NULL, NULL);\n \t  status = 1;\n \t  return;\n@@ -3832,13 +3838,19 @@ copy_file (const char *input_filename, const char *output_filename,\n       if (output_target == NULL)\n \toutput_target = bfd_get_target (ibfd);\n \n-      obfd = bfd_openw (output_filename, output_target);\n+      if (ofd >= 0)\n+\tobfd = bfd_fdopenw (output_filename, output_target, ofd);\n+      else\n+\tobfd = bfd_openw (output_filename, output_target);\n+\n       if (obfd == NULL)\n  \t{\n+\t  close (ofd);\n  \t  bfd_nonfatal_message (output_filename, NULL, NULL, NULL);\n  \t  status = 1;\n  \t  return;\n  \t}\n+\n       /* This is a no-op on non-Coff targets.  */\n       set_long_section_mode (obfd, ibfd, long_section_names);\n \n@@ -4802,6 +4814,7 @@ strip_main (int argc, char *argv[])\n       int hold_status = status;\n       struct stat statbuf;\n       char *tmpname;\n+      int tmpfd = -1;\n \n       if (get_file_size (argv[i]) < 1)\n \t{\n@@ -4816,7 +4829,7 @@ strip_main (int argc, char *argv[])\n \n       if (output_file == NULL\n \t  || filename_cmp (argv[i], output_file) == 0)\n-\ttmpname = make_tempname (argv[i]);\n+\ttmpname = make_tempname (argv[i], &tmpfd);\n       else\n \ttmpname = output_file;\n \n@@ -4829,7 +4842,7 @@ strip_main (int argc, char *argv[])\n \t}\n \n       status = 0;\n-      copy_file (argv[i], tmpname, input_target, output_target, NULL);\n+      copy_file (argv[i], tmpname, tmpfd, input_target, output_target, NULL);\n       if (status == 0)\n \t{\n \t  if (preserve_dates)\n@@ -5049,7 +5062,7 @@ copy_main (int argc, char *argv[])\n   bfd_boolean formats_info = FALSE;\n   bfd_boolean use_globalize = FALSE;\n   bfd_boolean use_keep_global = FALSE;\n-  int c;\n+  int c, tmpfd = -1;\n   struct stat statbuf;\n   const bfd_arch_info_type *input_arch = NULL;\n \n@@ -5895,15 +5908,16 @@ copy_main (int argc, char *argv[])\n      are the same, then create a temp and rename the result into the input.  */\n   if (output_filename == NULL\n       || filename_cmp (input_filename, output_filename) == 0)\n-    tmpname = make_tempname (input_filename);\n+    tmpname = make_tempname (input_filename, &tmpfd);\n   else\n     tmpname = output_filename;\n \n   if (tmpname == NULL)\n     fatal (_(\"warning: could not create temporary file whilst copying '%s', (error: %s)\"),\n \t   input_filename, strerror (errno));\n \n-  copy_file (input_filename, tmpname, input_target, output_target, input_arch);\n+  copy_file (input_filename, tmpname, tmpfd, input_target, output_target,\n+\t     input_arch);\n   if (status == 0)\n     {\n       if (preserve_dates)"
    }
  ]
}