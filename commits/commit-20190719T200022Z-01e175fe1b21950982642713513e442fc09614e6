{
  "sha": "01e175fe1b21950982642713513e442fc09614e6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDFlMTc1ZmUxYjIxOTUwOTgyNjQyNzEzNTEzZTQ0MmZjMDk2MTRlNg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-07-19T09:34:47Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-07-19T20:00:22Z"
    },
    "message": "gdb/riscv: Write 4-byte nop to dummy code region before inferior calls\n\nWhen making inferior function calls GDB sets up a dummy code region on\nthe stack, and places a breakpoint within that region.  If the random\nstack contents appear to be a compressed instruction then GDB  will\nplace a compressed breakpoint, which can cause problems if the target\ndoesn't support compressed instructions.\n\nThis commit prevents this issue by writing a 4-byte nop instruction to\nthe dummy region at the time the region is allocated.  With this nop\ninstruction in place, when we come to insert the breakpoint then an\nuncompressed breakpoint will be used.\n\nThis is similar to other targets, for example mips.\n\ngdb/ChangeLog:\n\n\t* riscv-tdep.c (riscv_push_dummy_code): Write a 4-byte nop\n\tinstruction to the dummy code region.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.arch/riscv-bp-infcall.c: New file.\n\t* gdb.arch/riscv-bp-infcall.exp: New file.",
    "tree": {
      "sha": "54950bd2fdf5fd046b12759f160160702cb22048",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/54950bd2fdf5fd046b12759f160160702cb22048"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/01e175fe1b21950982642713513e442fc09614e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01e175fe1b21950982642713513e442fc09614e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/01e175fe1b21950982642713513e442fc09614e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01e175fe1b21950982642713513e442fc09614e6/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ec38ac465d632cbc7fbecffcaadb7c6ffc4b5f39",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec38ac465d632cbc7fbecffcaadb7c6ffc4b5f39",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ec38ac465d632cbc7fbecffcaadb7c6ffc4b5f39"
    }
  ],
  "stats": {
    "total": 130,
    "additions": 129,
    "deletions": 1
  },
  "files": [
    {
      "sha": "fb08d71f395ce74ba23696e883fd9c2816f26750",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01e175fe1b21950982642713513e442fc09614e6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01e175fe1b21950982642713513e442fc09614e6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=01e175fe1b21950982642713513e442fc09614e6",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* riscv-tdep.c (riscv_push_dummy_code): Write a 4-byte nop\n+\tinstruction to the dummy code region.\n+\n 2019-07-19  Tom Tromey  <tromey@adacore.com>\n \n \t* contrib/ari/gdb_ari.sh: Mention C++11, not ISO C 90."
    },
    {
      "sha": "e4a66f142937e3e3c7f32e14ae8c60f81902da0b",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 34,
      "deletions": 1,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01e175fe1b21950982642713513e442fc09614e6/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01e175fe1b21950982642713513e442fc09614e6/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=01e175fe1b21950982642713513e442fc09614e6",
      "patch": "@@ -1621,11 +1621,44 @@ riscv_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp,\n \t\t       struct type *value_type, CORE_ADDR *real_pc,\n \t\t       CORE_ADDR *bp_addr, struct regcache *regcache)\n {\n+  /* A nop instruction is 'add x0, x0, 0'.  */\n+  static const gdb_byte nop_insn[] = { 0x13, 0x00, 0x00, 0x00 };\n+\n   /* Allocate space for a breakpoint, and keep the stack correctly\n-     aligned.  */\n+     aligned.  The space allocated here must be at least big enough to\n+     accommodate the NOP_INSN defined above.  */\n   sp -= 16;\n   *bp_addr = sp;\n   *real_pc = funaddr;\n+\n+  /* When we insert a breakpoint we select whether to use a compressed\n+     breakpoint or not based on the existing contents of the memory.\n+\n+     If the breakpoint is being placed onto the stack as part of setting up\n+     for an inferior call from GDB, then the existing stack contents may\n+     randomly appear to be a compressed instruction, causing GDB to insert\n+     a compressed breakpoint.  If this happens on a target that does not\n+     support compressed instructions then this could cause problems.\n+\n+     To prevent this issue we write an uncompressed nop onto the stack at\n+     the location where the breakpoint will be inserted.  In this way we\n+     ensure that we always use an uncompressed breakpoint, which should\n+     work on all targets.\n+\n+     We call TARGET_WRITE_MEMORY here so that if the write fails we don't\n+     throw an exception.  Instead we ignore the error and move on.  The\n+     assumption is that either GDB will error later when actually trying to\n+     insert a software breakpoint, or GDB will use hardware breakpoints and\n+     there will be no need to write to memory later.  */\n+  int status = target_write_memory (*bp_addr, nop_insn, sizeof (nop_insn));\n+\n+  if (riscv_debug_breakpoints || riscv_debug_infcall)\n+    fprintf_unfiltered (gdb_stdlog,\n+\t\t\t\"Writing %lld-byte nop instruction to %s: %s\\n\",\n+\t\t\t((unsigned long long) sizeof (nop_insn)),\n+\t\t\tpaddress (gdbarch, *bp_addr),\n+\t\t\t(status == 0 ? \"success\" : \"failed\"));\n+\n   return sp;\n }\n "
    },
    {
      "sha": "53134701507f71e43c72bef9172414555af3a423",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01e175fe1b21950982642713513e442fc09614e6/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01e175fe1b21950982642713513e442fc09614e6/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=01e175fe1b21950982642713513e442fc09614e6",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.arch/riscv-bp-infcall.c: New file.\n+\t* gdb.arch/riscv-bp-infcall.exp: New file.\n+\n 2019-07-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \tPR breakpoints/24541"
    },
    {
      "sha": "9bd40af7eedff7092d4fb9a0c5b0794131edea31",
      "filename": "gdb/testsuite/gdb.arch/riscv-bp-infcall.c",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01e175fe1b21950982642713513e442fc09614e6/gdb/testsuite/gdb.arch/riscv-bp-infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01e175fe1b21950982642713513e442fc09614e6/gdb/testsuite/gdb.arch/riscv-bp-infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/riscv-bp-infcall.c?ref=01e175fe1b21950982642713513e442fc09614e6",
      "patch": "@@ -0,0 +1,29 @@\n+/* This file is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+void\n+dummy_call ()\n+{\n+  asm (\"\" ::: \"memory\");\n+}\n+\n+int\n+main ()\n+{\n+  dummy_call ();\n+  return 0;\n+}"
    },
    {
      "sha": "478032aebdaa1e22d3e891d0fac6f9be9b0d1559",
      "filename": "gdb/testsuite/gdb.arch/riscv-bp-infcall.exp",
      "status": "added",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01e175fe1b21950982642713513e442fc09614e6/gdb/testsuite/gdb.arch/riscv-bp-infcall.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01e175fe1b21950982642713513e442fc09614e6/gdb/testsuite/gdb.arch/riscv-bp-infcall.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/riscv-bp-infcall.exp?ref=01e175fe1b21950982642713513e442fc09614e6",
      "patch": "@@ -0,0 +1,56 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test GDB for RISC-V always uses an uncompressed breakpoint when\n+# setting up for an inferior call.\n+\n+if {![istarget \"riscv*-*-*\"]} {\n+    verbose \"Skipping ${gdb_test_file_name}.\"\n+    return\n+}\n+\n+standard_testfile\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n+    return -1\n+}\n+\n+if ![runto_main] then {\n+   fail \"can't run to main\"\n+   return 0\n+}\n+\n+# Figure out where the breakpoint will be placed taking account for\n+# stack alignment, and allocation of the dummy code area.\n+set bp_addr [get_valueof \"/x\" \"\\$sp\" 0]\n+set bp_addr [format 0x%x [expr ($bp_addr & ~0xf) - 0x20]]\n+\n+# Fill the region we know will be used as the scratch area with the\n+# compressed nop instruction.  If GDB fails to overwrite this with an\n+# uncompressed nop then a compressed breakpoint will be used in the\n+# following inferior call.\n+for {set i 0} {$i < 16} {incr i 2} {\n+    gdb_test_no_output \"set *((unsigned short *) (${bp_addr} + $i))=0x1\" \\\n+\t\"place compressed nop in scratch area at offset $i\"\n+}\n+\n+# Make an inferior call.  GDB should write an uncompressed nop into\n+# the scratch area and so force the use of an uncompressed breakpoint,\n+# however, if this mechanism fails and GDB uses a compressed\n+# breakpoint, and the target doesn't support compressed instructions,\n+# then we would expect weird things to happen here.\n+gdb_test_no_output \"set debug riscv breakpoints 1\"\n+gdb_test \"call dummy_call ()\" \\\n+    \".*Using EBREAK for breakpoint at $bp_addr \\\\(instruction length 4\\\\).*\""
    }
  ]
}