{
  "sha": "702cf3f5df18818eb62da7ffbd70544fa98da3c7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzAyY2YzZjVkZjE4ODE4ZWI2MmRhN2ZmYmQ3MDU0NGZhOThkYTNjNw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-17T16:48:25Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-22T14:34:53Z"
    },
    "message": "gdb: handle invalid DWARF  when compilation unit is missing\n\nReplace an abort call in process_psymtab_comp_unit with a real error,\nand add a test to cover this case.  The case is question is when badly\nformed DWARF is missing a DW_TAG_compile_unit, DW_TAG_partial_unit, or\nDW_TAG_type_unit as its top level tag.\n\nI then tested with --target_board=readnow and added additional code to\nalso validate the top-level tag in this case.\n\nI added an assert that would trigger for the readnow case before I\nadded the fix.  I suspect there's lots of places where badly formed\nDWARF could result in the builder being nullptr when it shouldn't be,\nbut I only added this one assert, as this is the one that would have\nhelped me in this case.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (process_psymtab_comp_unit): Replace abort with an\n\terror.\n\t(process_full_comp_unit): Validate the top-level tag before\n\tprocessing the first DIE.\n\t(read_func_scope): Ensure we have a valid builder.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/dw2-missing-cu-tag.c: New file.\n\t* gdb.dwarf2/dw2-missing-cu-tag.exp: New file.",
    "tree": {
      "sha": "6bfe50fd3c8410defe99271d207617e94f727cff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6bfe50fd3c8410defe99271d207617e94f727cff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/702cf3f5df18818eb62da7ffbd70544fa98da3c7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/702cf3f5df18818eb62da7ffbd70544fa98da3c7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/702cf3f5df18818eb62da7ffbd70544fa98da3c7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/702cf3f5df18818eb62da7ffbd70544fa98da3c7/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "46fec6428ef7504be486ebd57e2509bde4382918",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46fec6428ef7504be486ebd57e2509bde4382918",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/46fec6428ef7504be486ebd57e2509bde4382918"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 134,
    "deletions": 1
  },
  "files": [
    {
      "sha": "1e076546c14b32c9df79f29578638a491e81da86",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/702cf3f5df18818eb62da7ffbd70544fa98da3c7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/702cf3f5df18818eb62da7ffbd70544fa98da3c7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=702cf3f5df18818eb62da7ffbd70544fa98da3c7",
      "patch": "@@ -1,3 +1,11 @@\n+2021-03-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* dwarf2/read.c (process_psymtab_comp_unit): Replace abort with an\n+\terror.\n+\t(process_full_comp_unit): Validate the top-level tag before\n+\tprocessing the first DIE.\n+\t(read_func_scope): Ensure we have a valid builder.\n+\n 2021-03-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* objc-lang.c (objc_demangle): Renamed to"
    },
    {
      "sha": "2bfb13d6d0ea14e81703d57e8af73d69e59c7e59",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/702cf3f5df18818eb62da7ffbd70544fa98da3c7/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/702cf3f5df18818eb62da7ffbd70544fa98da3c7/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=702cf3f5df18818eb62da7ffbd70544fa98da3c7",
      "patch": "@@ -7737,7 +7737,10 @@ process_psymtab_comp_unit (dwarf2_per_cu_data *this_cu,\n       this_cu->unit_type = DW_UT_type;\n       break;\n     default:\n-      abort ();\n+      error (_(\"Dwarf Error: unexpected tag '%s' at offset %s [in module %s]\"),\n+\t     dwarf_tag_name (reader.comp_unit_die->tag),\n+\t     sect_offset_str (reader.cu->per_cu->sect_off),\n+\t     objfile_name (per_objfile->objfile));\n     }\n \n   if (reader.dummy_p)\n@@ -9994,6 +9997,21 @@ process_full_comp_unit (dwarf2_cu *cu, enum language pretend_language)\n \n   dwarf2_find_base_address (cu->dies, cu);\n \n+  /* Before we start reading the top-level DIE, ensure it has a valid tag\n+     type.  */\n+  switch (cu->dies->tag)\n+    {\n+    case DW_TAG_compile_unit:\n+    case DW_TAG_partial_unit:\n+    case DW_TAG_type_unit:\n+      break;\n+    default:\n+      error (_(\"Dwarf Error: unexpected tag '%s' at offset %s [in module %s]\"),\n+\t     dwarf_tag_name (cu->dies->tag),\n+\t     sect_offset_str (cu->per_cu->sect_off),\n+\t     objfile_name (per_objfile->objfile));\n+    }\n+\n   /* Do line number decoding in read_file_scope () */\n   process_die (cu->dies, cu);\n \n@@ -13628,6 +13646,7 @@ read_func_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t}\n     }\n \n+  gdb_assert (cu->get_builder () != nullptr);\n   newobj = cu->get_builder ()->push_context (0, lowpc);\n   newobj->name = new_symbol (die, read_type_die (die, cu), cu,\n \t\t\t     (struct symbol *) templ_func);"
    },
    {
      "sha": "848e089db4fff0b620dba22725cff8bce4306db5",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/702cf3f5df18818eb62da7ffbd70544fa98da3c7/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/702cf3f5df18818eb62da7ffbd70544fa98da3c7/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=702cf3f5df18818eb62da7ffbd70544fa98da3c7",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.dwarf2/dw2-missing-cu-tag.c: New file.\n+\t* gdb.dwarf2/dw2-missing-cu-tag.exp: New file.\n+\n 2021-03-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.dwarf2/dw2-using-debug-str.c: New file."
    },
    {
      "sha": "a361f59e4ce9edd32fe921845495da49a6c0df90",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-missing-cu-tag.c",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/702cf3f5df18818eb62da7ffbd70544fa98da3c7/gdb/testsuite/gdb.dwarf2/dw2-missing-cu-tag.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/702cf3f5df18818eb62da7ffbd70544fa98da3c7/gdb/testsuite/gdb.dwarf2/dw2-missing-cu-tag.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-missing-cu-tag.c?ref=702cf3f5df18818eb62da7ffbd70544fa98da3c7",
      "patch": "@@ -0,0 +1,25 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+int\n+main (int argc, char **argv)\n+{\n+  asm (\"main_label: .globl main_label\");\n+\n+  return 0;\n+}"
    },
    {
      "sha": "8a11d1d557520818c3e05add4df76eade4745376",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-missing-cu-tag.exp",
      "status": "added",
      "additions": 76,
      "deletions": 0,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/702cf3f5df18818eb62da7ffbd70544fa98da3c7/gdb/testsuite/gdb.dwarf2/dw2-missing-cu-tag.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/702cf3f5df18818eb62da7ffbd70544fa98da3c7/gdb/testsuite/gdb.dwarf2/dw2-missing-cu-tag.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-missing-cu-tag.exp?ref=702cf3f5df18818eb62da7ffbd70544fa98da3c7",
      "patch": "@@ -0,0 +1,76 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test creates some invalid DWARF, compiles this into an\n+# executable, then tries to load the executable using the 'file'\n+# command.  We expect to see an error from the DWARF parser.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use\n+# gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile .c -dw.S\n+\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    cu {} {\n+\t# We should have either one of DW_TAG_compile_unit,\n+\t# DW_TAG_partial_unit, or DW_TAG_type_unit here.\n+\tsubprogram {\n+\t    {external 1 flag}\n+\t    {MACRO_AT_func {main}}\n+\t}\n+    }\n+}\n+\n+# Don't use prepare_for_testing here as we want to manually run the\n+# file command (so we can check its output).\n+if {[build_executable \"failed to build executable\" $testfile \\\n+\t [list $srcfile $asm_file] {nodebug quiet}]} {\n+    return -1\n+}\n+\n+# Restart with no executable.\n+clean_restart\n+\n+# This pattern is hit when GDB does not use -readnow (i.e. the default\n+# behaviour).\n+set pattern1 \\\n+    [multi_line \\\n+\t \"Reading symbols from \\[^\\r\\n\\]+\" \\\n+\t \"Dwarf Error: unexpected tag 'DW_TAG_subprogram' at offset $hex \\\\\\[\\[^\\r\\n\\]+\\\\\\]\" \\\n+\t \"\\\\(No debugging symbols \\[^\\r\\n\\]+\\\\)\"]\n+\n+# This pattern is hit when GDB does use -readnow (e.g. running with\n+# --target_board=readnow).\n+set pattern2 \\\n+    [multi_line \\\n+\t \"Reading symbols from \\[^\\r\\n\\]+\" \\\n+\t \"Expanding full symbols from \\[^\\r\\n\\]+\" \\\n+\t \"Dwarf Error: unexpected tag 'DW_TAG_subprogram' at offset $hex \\\\\\[\\[^\\r\\n\\]+\\\\\\]\"]\n+\n+# Load the executable, we expect an error from the DWARF parser.\n+gdb_test_multiple \"file $binfile\" \"file $testfile\" {\n+    -wrap -re $pattern1 {\n+\tpass $gdb_test_name\n+    }\n+    -re -wrap \"$pattern2\" {\n+\tpass $gdb_test_name\n+    }\n+}"
    }
  ]
}