{
  "sha": "ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWIxZGRiY2YxMTBhM2YxYWQ0NWUzYTM0NmQyZGE5OGZmYjgzM2RlYw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:05:49Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:05:49Z"
    },
    "message": "Some get_last_target_status tweaks\n\n- Make get_last_target_status arguments optional.  A following patch\n  will add another argument to get_last_target_status (the event's\n  target), and passing nullptr when we don't care for some piece of\n  info is handier than creating dummy local variables.\n\n- Declare nullify_last_target_wait_ptid in a header, and remove the\n  local extern declaration from linux-fork.c.\n\ngdb/ChangeLog:\n2020-01-10  Pedro Alves  <palves@redhat.com>\n\n\t* break-catch-sig.c (signal_catchpoint_print_it): Don't pass a\n\tptid to get_last_target_status.\n\t* break-catch-syscall.c (print_it_catch_syscall): Don't pass a\n\tptid to get_last_target_status.\n\t* infcmd.c (continue_command): Don't pass a target_waitstatus to\n\tget_last_target_status.\n\t(info_program_command): Don't pass a target_waitstatus to\n\tget_last_target_status.\n\t* infrun.c (init_wait_for_inferior): Use\n\tnullify_last_target_wait_ptid.\n\t(get_last_target_status): Handle nullptr arguments.\n\t(nullify_last_target_wait_ptid): Clear target_last_waitstatus.\n\t(print_stop_event): Don't pass a ptid to get_last_target_status.\n\t(normal_stop): Don't pass a ptid to get_last_target_status.\n\t* infrun.h (get_last_target_status, set_last_target_status): Move\n\tcomments here and update.\n\t(nullify_last_target_wait_ptid): Declare.\n\t* linux-fork.c (fork_load_infrun_state): Remove local extern\n\tdeclaration of nullify_last_target_wait_ptid.\n\t* linux-nat.c (get_detach_signal): Don't pass a target_waitstatus\n\tto get_last_target_status.",
    "tree": {
      "sha": "3d34e21db4b21c580811c699fc0a8800367e64aa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3d34e21db4b21c580811c699fc0a8800367e64aa"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f3f8ece4b1c77c925d1f1566df0bf632790a4d24",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f3f8ece4b1c77c925d1f1566df0bf632790a4d24",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f3f8ece4b1c77c925d1f1566df0bf632790a4d24"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 51,
    "deletions": 29
  },
  "files": [
    {
      "sha": "2d18e3e4399aa6b49a80a3eae82664b420a2f804",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
      "patch": "@@ -1,3 +1,27 @@\n+2020-01-10  Pedro Alves  <palves@redhat.com>\n+\n+\t* break-catch-sig.c (signal_catchpoint_print_it): Don't pass a\n+\tptid to get_last_target_status.\n+\t* break-catch-syscall.c (print_it_catch_syscall): Don't pass a\n+\tptid to get_last_target_status.\n+\t* infcmd.c (continue_command): Don't pass a target_waitstatus to\n+\tget_last_target_status.\n+\t(info_program_command): Don't pass a target_waitstatus to\n+\tget_last_target_status.\n+\t* infrun.c (init_wait_for_inferior): Use\n+\tnullify_last_target_wait_ptid.\n+\t(get_last_target_status): Handle nullptr arguments.\n+\t(nullify_last_target_wait_ptid): Clear target_last_waitstatus.\n+\t(print_stop_event): Don't pass a ptid to get_last_target_status.\n+\t(normal_stop): Don't pass a ptid to get_last_target_status.\n+\t* infrun.h (get_last_target_status, set_last_target_status): Move\n+\tcomments here and update.\n+\t(nullify_last_target_wait_ptid): Declare.\n+\t* linux-fork.c (fork_load_infrun_state): Remove local extern\n+\tdeclaration of nullify_last_target_wait_ptid.\n+\t* linux-nat.c (get_detach_signal): Don't pass a target_waitstatus\n+\tto get_last_target_status.\n+\n 2020-01-10  Pedro Alves  <palves@redhat.com>\n \n \t* gdbthread.h (scoped_restore_current_thread)"
    },
    {
      "sha": "9970efa68022115868717c937f6f1ff5a43bdfb8",
      "filename": "gdb/break-catch-sig.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/break-catch-sig.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/break-catch-sig.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-sig.c?ref=ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
      "patch": "@@ -181,12 +181,11 @@ static enum print_stop_action\n signal_catchpoint_print_it (bpstat bs)\n {\n   struct breakpoint *b = bs->breakpoint_at;\n-  ptid_t ptid;\n   struct target_waitstatus last;\n   const char *signal_name;\n   struct ui_out *uiout = current_uiout;\n \n-  get_last_target_status (&ptid, &last);\n+  get_last_target_status (nullptr, &last);\n \n   signal_name = signal_to_name_or_int (last.value.sig);\n "
    },
    {
      "sha": "e51777c0350531505c217ffedea6db7ec8c25007",
      "filename": "gdb/break-catch-syscall.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/break-catch-syscall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/break-catch-syscall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-syscall.c?ref=ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
      "patch": "@@ -182,12 +182,11 @@ print_it_catch_syscall (bpstat bs)\n      syscall is.  It can be in the TARGET_WAITKIND_SYSCALL_ENTRY\n      or TARGET_WAITKIND_SYSCALL_RETURN, and depending on it we\n      must print \"called syscall\" or \"returned from syscall\".  */\n-  ptid_t ptid;\n   struct target_waitstatus last;\n   struct syscall s;\n   struct gdbarch *gdbarch = bs->bp_location_at->gdbarch;\n \n-  get_last_target_status (&ptid, &last);\n+  get_last_target_status (nullptr, &last);\n \n   get_syscall_by_number (gdbarch, last.value.syscall_number, &s);\n "
    },
    {
      "sha": "99823a8f2589169bc72760123ad01b9e39389bd8",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
      "patch": "@@ -851,9 +851,8 @@ continue_command (const char *args, int from_tty)\n       else\n \t{\n \t  ptid_t last_ptid;\n-\t  struct target_waitstatus ws;\n \n-\t  get_last_target_status (&last_ptid, &ws);\n+\t  get_last_target_status (&last_ptid, nullptr);\n \t  tp = find_thread_ptid (last_ptid);\n \t}\n       if (tp != NULL)\n@@ -1993,11 +1992,7 @@ info_program_command (const char *args, int from_tty)\n   if (non_stop)\n     ptid = inferior_ptid;\n   else\n-    {\n-      struct target_waitstatus ws;\n-\n-      get_last_target_status (&ptid, &ws);\n-    }\n+    get_last_target_status (&ptid, nullptr);\n \n   if (ptid == null_ptid || ptid == minus_one_ptid)\n     error (_(\"No selected thread.\"));"
    },
    {
      "sha": "bcfb178ef9c52108c0bdfdb6d31145ea42dca49d",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 13,
      "deletions": 15,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
      "patch": "@@ -78,8 +78,6 @@ static void follow_inferior_reset_breakpoints (void);\n \n static int currently_stepping (struct thread_info *tp);\n \n-void nullify_last_target_wait_ptid (void);\n-\n static void insert_hp_step_resume_breakpoint_at_frame (struct frame_info *);\n \n static void insert_step_resume_breakpoint_at_caller (struct frame_info *);\n@@ -3103,7 +3101,7 @@ init_wait_for_inferior (void)\n \n   clear_proceed_status (0);\n \n-  target_last_wait_ptid = minus_one_ptid;\n+  nullify_last_target_wait_ptid ();\n \n   previous_inferior_ptid = inferior_ptid;\n }\n@@ -3847,7 +3845,7 @@ init_thread_stepping_state (struct thread_info *tss)\n   tss->step_after_step_resume_breakpoint = 0;\n }\n \n-/* Set the cached copy of the last ptid/waitstatus.  */\n+/* See infrun.h.  */\n \n void\n set_last_target_status (ptid_t ptid, struct target_waitstatus status)\n@@ -3856,22 +3854,24 @@ set_last_target_status (ptid_t ptid, struct target_waitstatus status)\n   target_last_waitstatus = status;\n }\n \n-/* Return the cached copy of the last pid/waitstatus returned by\n-   target_wait()/deprecated_target_wait_hook().  The data is actually\n-   cached by handle_inferior_event(), which gets called immediately\n-   after target_wait()/deprecated_target_wait_hook().  */\n+/* See infrun.h.  */\n \n void\n-get_last_target_status (ptid_t *ptidp, struct target_waitstatus *status)\n+get_last_target_status (ptid_t *ptid, struct target_waitstatus *status)\n {\n-  *ptidp = target_last_wait_ptid;\n-  *status = target_last_waitstatus;\n+  if (ptid != nullptr)\n+    *ptid = target_last_wait_ptid;\n+  if (status != nullptr)\n+    *status = target_last_waitstatus;\n }\n \n+/* See infrun.h.  */\n+\n void\n nullify_last_target_wait_ptid (void)\n {\n   target_last_wait_ptid = minus_one_ptid;\n+  target_last_waitstatus = {};\n }\n \n /* Switch thread contexts.  */\n@@ -7876,10 +7876,9 @@ void\n print_stop_event (struct ui_out *uiout, bool displays)\n {\n   struct target_waitstatus last;\n-  ptid_t last_ptid;\n   struct thread_info *tp;\n \n-  get_last_target_status (&last_ptid, &last);\n+  get_last_target_status (nullptr, &last);\n \n   {\n     scoped_restore save_uiout = make_scoped_restore (&current_uiout, uiout);\n@@ -7998,9 +7997,8 @@ int\n normal_stop (void)\n {\n   struct target_waitstatus last;\n-  ptid_t last_ptid;\n \n-  get_last_target_status (&last_ptid, &last);\n+  get_last_target_status (nullptr, &last);\n \n   new_stop_id ();\n "
    },
    {
      "sha": "4dd995db7a6c035864536d88885cfce444d2848c",
      "filename": "gdb/infrun.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/infrun.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/infrun.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.h?ref=ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
      "patch": "@@ -101,12 +101,21 @@ extern void wait_for_inferior (void);\n    target, false otherwise.  */\n extern int normal_stop (void);\n \n+/* Return the cached copy of the last ptid/waitstatus returned\n+   by target_wait()/deprecated_target_wait_hook().  The data is\n+   actually cached by handle_inferior_event(), which gets called\n+   immediately after target_wait()/deprecated_target_wait_hook().  */\n extern void get_last_target_status (ptid_t *ptid,\n \t\t\t\t    struct target_waitstatus *status);\n \n+/* Set the cached copy of the last ptid/waitstatus.  */\n extern void set_last_target_status (ptid_t ptid,\n \t\t\t\t    struct target_waitstatus status);\n \n+/* Clear the cached copy of the last ptid/waitstatus returned by\n+   target_wait().  */\n+extern void nullify_last_target_wait_ptid ();\n+\n /* Stop all threads.  Only returns after everything is halted.  */\n extern void stop_all_threads (void);\n "
    },
    {
      "sha": "b15bd3badda5c35d28ea1f297015fd24489a70a7",
      "filename": "gdb/linux-fork.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/linux-fork.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/linux-fork.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-fork.c?ref=ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
      "patch": "@@ -215,7 +215,6 @@ call_lseek (int fd, off_t offset, int whence)\n static void\n fork_load_infrun_state (struct fork_info *fp)\n {\n-  extern void nullify_last_target_wait_ptid ();\n   int i;\n \n   linux_nat_switch_fork (fp->ptid);"
    },
    {
      "sha": "a01839c70ade13652cb4df2d582fc5091720bbcb",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=ab1ddbcf110a3f1ad45e3a346d2da98ffb833dec",
      "patch": "@@ -1315,10 +1315,9 @@ get_detach_signal (struct lwp_info *lp)\n \t}\n       else if (!target_is_non_stop_p ())\n \t{\n-\t  struct target_waitstatus last;\n \t  ptid_t last_ptid;\n \n-\t  get_last_target_status (&last_ptid, &last);\n+\t  get_last_target_status (&last_ptid, nullptr);\n \n \t  if (lp->ptid.lwp () == last_ptid.lwp ())\n \t    signo = tp->suspend.stop_signal;"
    }
  ]
}