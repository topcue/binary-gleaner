{
  "sha": "6f365fda85a2e2682b197540d14adf66c4261b19",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmYzNjVmZGE4NWEyZTI2ODJiMTk3NTQwZDE0YWRmNjZjNDI2MWIxOQ==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-06-17T21:11:28Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-07-09T01:14:31Z"
    },
    "message": "elf: Add GNU_PROPERTY_1_NEEDED check\n\nIf GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS is set on any input\nrelocatable files:\n\n1. Don't generate copy relocations.\n2. Turn off extern_protected_data since it implies\nGNU_PROPERTY_NO_COPY_ON_PROTECTED.\n3. Treate reference to protected symbols with indirect external access\nas local.\n4. Set GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS on output.\n5. When generating executable, clear this bit when there are non-GOT or\nnon-PLT relocations in input relocatable files without the bit set.\n6. Add -z [no]indirect-extern-access to control indirect external access.\n\nbfd/\n\n\t* elf-bfd (elf_obj_tdata): Add has_indirect_extern_access.\n\t(elf_has_indirect_extern_access): New.\n\t* elf-properties.c (_bfd_elf_parse_gnu_properties): Set\n\telf_has_indirect_extern_access and elf_has_no_copy_on_protected\n\twhen seeing GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS.\n\t(elf_write_gnu_propertie): Add an argument to pass link_info.\n\tSet needed_1_p for GNU_PROPERTY_1_NEEDED in memory.\n\t(_bfd_elf_link_setup_gnu_properties): Handle\n\tGNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS for\n\t-z indirect-extern-access.  Set nocopyreloc to true and\n\textern_protected_data to false for indirect external access.\n\t(_bfd_elf_convert_gnu_properties): Updated.\n\t* elf32-i386.c (elf_i386_check_relocs): Set\n\tnon_got_ref_without_indirect_extern_access on legacy non-GOT or\n\tnon-PLT references.\n\t* elf64-x86-64.c (elf_x86_64_check_relocs): Likewise.\n\t* elflink.c (_bfd_elf_symbol_refs_local_p): Return true for\n\tSTV_PROTECTED symbols with indirect external access.\n\t* elfxx-x86.c (_bfd_x86_elf_adjust_dynamic_symbol): Clear\n\tindirect_extern_access for legacy non-GOT/non-PLT references.\n\t* elfxx-x86.h (elf_x86_link_hash_entry): Add\n\tnon_got_ref_without_indirect_extern_access.\n\ninclude/\n\n\t* bfdlink.h (bfd_link_info): Add indirect_extern_access and\n\tneeded_1_p.  Change nocopyreloc to int.\n\nld/\n\n\t* NEWS: Mention -z [no]indirect-extern-access\n\t* ld.texi: Document -z [no]indirect-extern-access\n\t* ldmain.c (main): Initialize link_info.indirect_extern_access\n\tto -1.\n\t* emulparams/extern_protected_data.sh: Support\n\t-z [no]indirect-extern-access.\n\t* testsuite/ld-elf/indirect-extern-access-1.rd: New file\n\t* testsuite/ld-elf/indirect-extern-access-1a.c: Likewise.\n\t* testsuite/ld-elf/indirect-extern-access-1b.c: Likewise.\n\t* testsuite/ld-elf/indirect-extern-access-2.rd: Likewise.\n\t* testsuite/ld-elf/indirect-extern-access-2a.c: Likewise.\n\t* testsuite/ld-elf/indirect-extern-access-2b.c: Likewise.\n\t* testsuite/ld-elf/indirect-extern-access-3.rd: Likewise.\n\t* testsuite/ld-elf/indirect-extern-access.S: Likewise.\n\t* testsuite/ld-elf/property-1_needed-1b.d: Likewise.\n\t* testsuite/ld-elf/property-1_needed-1c.d: Likewise.\n\t* testsuite/ld-x86-64/indirect-extern-access.rd: Likewise.\n\t* testsuite/ld-x86-64/protected-data-1.h: Likewise.\n\t* testsuite/ld-x86-64/protected-data-1a.c: Likewise.\n\t* testsuite/ld-x86-64/protected-data-1b.c: Likewise.\n\t* testsuite/ld-x86-64/protected-data-2a.S: Likewise.\n\t* testsuite/ld-x86-64/protected-data-2b.S: Likewise.\n\t* testsuite/ld-x86-64/protected-func-2a.S: Likewise.\n\t* testsuite/ld-x86-64/protected-func-2b.S: Likewise.\n\t* testsuite/ld-x86-64/protected-func-2c.c: Likewise.\n\t* testsuite/ld-elf/linux-x86.exp: Run test with\n\tGNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS.\n\t* testsuite/ld-x86-64/x86-64.exp: Run tests for protected\n\tfunction and data with indirect external access.",
    "tree": {
      "sha": "f746621b46e022fabe3662b04da4d5c2a36f2e1b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f746621b46e022fabe3662b04da4d5c2a36f2e1b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6f365fda85a2e2682b197540d14adf66c4261b19",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f365fda85a2e2682b197540d14adf66c4261b19",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6f365fda85a2e2682b197540d14adf66c4261b19",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f365fda85a2e2682b197540d14adf66c4261b19/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6320fd00dc374f74658c7e4b7dffbe1d71723284",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6320fd00dc374f74658c7e4b7dffbe1d71723284",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6320fd00dc374f74658c7e4b7dffbe1d71723284"
    }
  ],
  "stats": {
    "total": 1101,
    "additions": 1078,
    "deletions": 23
  },
  "files": [
    {
      "sha": "b3f56b8c2ce055fa666517270a8e4973f0663d7c",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -2073,6 +2073,10 @@ struct elf_obj_tdata\n      property.  */\n   unsigned int has_no_copy_on_protected : 1;\n \n+  /* Whether if the bfd contains the\n+     GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS property.  */\n+  unsigned int has_indirect_extern_access : 1;\n+\n   /* Irix 5 often screws up the symbol table, sorting local symbols\n      after global symbols.  This flag is set if the symbol table in\n      this BFD appears to be screwed up.  If it is, we ignore the\n@@ -2138,6 +2142,8 @@ struct elf_obj_tdata\n #define elf_properties(bfd) (elf_tdata (bfd) -> properties)\n #define elf_has_no_copy_on_protected(bfd) \\\n   (elf_tdata(bfd) -> has_no_copy_on_protected)\n+#define elf_has_indirect_extern_access(bfd) \\\n+  (elf_tdata(bfd) -> has_indirect_extern_access)\n \f\n extern void _bfd_elf_swap_verdef_in\n   (bfd *, const Elf_External_Verdef *, Elf_Internal_Verdef *);"
    },
    {
      "sha": "aae02885c15bb7be21516749dd914ac2a5c7ec70",
      "filename": "bfd/elf-properties.c",
      "status": "modified",
      "additions": 111,
      "deletions": 18,
      "changes": 129,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elf-properties.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elf-properties.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-properties.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -195,6 +195,18 @@ _bfd_elf_parse_gnu_properties (bfd *abfd, Elf_Internal_Note *note)\n \t\t  prop = _bfd_elf_get_property (abfd, type, datasz);\n \t\t  prop->u.number |= bfd_h_get_32 (abfd, ptr);\n \t\t  prop->pr_kind = property_number;\n+\t\t  if ((abfd->flags & DYNAMIC) == 0\n+\t\t      && type == GNU_PROPERTY_1_NEEDED\n+\t\t      && ((prop->u.number\n+\t\t\t   & GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS)\n+\t\t\t  != 0))\n+\t\t    {\n+\t\t      /* NB: Skip the shared library since it may not be\n+\t\t\t the same at run-time.  */\n+\t\t      elf_has_indirect_extern_access (abfd) = true;\n+\t\t      /* GNU_PROPERTY_NO_COPY_ON_PROTECTED is implied.  */\n+\t\t      elf_has_no_copy_on_protected (abfd) = true;\n+\t\t    }\n \t\t  goto next;\n \t\t}\n \t      break;\n@@ -525,7 +537,8 @@ elf_get_gnu_property_section_size (elf_property_list *list,\n /* Write GNU properties.  */\n \n static void\n-elf_write_gnu_properties (bfd *abfd, bfd_byte *contents,\n+elf_write_gnu_properties (struct bfd_link_info *info,\n+\t\t\t  bfd *abfd, bfd_byte *contents,\n \t\t\t  elf_property_list *list, unsigned int size,\n \t\t\t  unsigned int align_size)\n {\n@@ -570,6 +583,11 @@ elf_write_gnu_properties (bfd *abfd, bfd_byte *contents,\n \t      break;\n \n \t    case 4:\n+\t      /* Save the pointer to GNU_PROPERTY_1_NEEDED so that it\n+\t\t can be updated later if needed.  */\n+\t      if (info != NULL\n+\t\t  && list->property.pr_type == GNU_PROPERTY_1_NEEDED)\n+\t\tinfo->needed_1_p = contents + size;\n \t      bfd_h_put_32 (abfd, list->property.u.number,\n \t\t\t    contents + size);\n \t      break;\n@@ -598,40 +616,83 @@ elf_write_gnu_properties (bfd *abfd, bfd_byte *contents,\n bfd *\n _bfd_elf_link_setup_gnu_properties (struct bfd_link_info *info)\n {\n-  bfd *abfd, *first_pbfd = NULL;\n+  bfd *abfd, *first_pbfd = NULL, *elf_bfd = NULL;\n   elf_property_list *list;\n   asection *sec;\n   bool has_properties = false;\n   const struct elf_backend_data *bed\n     = get_elf_backend_data (info->output_bfd);\n   unsigned int elfclass = bed->s->elfclass;\n   int elf_machine_code = bed->elf_machine_code;\n+  elf_property *p;\n \n   /* Find the first relocatable ELF input with GNU properties.  */\n   for (abfd = info->input_bfds; abfd != NULL; abfd = abfd->link.next)\n     if (bfd_get_flavour (abfd) == bfd_target_elf_flavour\n \t&& (abfd->flags & DYNAMIC) == 0\n-\t&& elf_properties (abfd) != NULL)\n+\t&& (elf_machine_code\n+\t    == get_elf_backend_data (abfd)->elf_machine_code)\n+\t&& (elfclass == get_elf_backend_data (abfd)->s->elfclass))\n       {\n-\thas_properties = true;\n-\n \t/* Ignore GNU properties from ELF objects with different machine\n \t   code or class.  Also skip objects without a GNU_PROPERTY note\n \t   section.  */\n-\tif ((elf_machine_code\n-\t     == get_elf_backend_data (abfd)->elf_machine_code)\n-\t    && (elfclass\n-\t\t== get_elf_backend_data (abfd)->s->elfclass)\n-\t    && bfd_get_section_by_name (abfd,\n-\t\t\t\t\tNOTE_GNU_PROPERTY_SECTION_NAME) != NULL\n-\t    )\n+\telf_bfd = abfd;\n+\n+\tif (elf_properties (abfd) != NULL)\n \t  {\n-\t    /* Keep .note.gnu.property section in FIRST_PBFD.  */\n-\t    first_pbfd = abfd;\n-\t    break;\n+\t    has_properties = true;\n+\n+\t    if (bfd_get_section_by_name (abfd,\n+\t\t\t\t\t NOTE_GNU_PROPERTY_SECTION_NAME)\n+\t\t!= NULL)\n+\t      {\n+\t\t/* Keep .note.gnu.property section in FIRST_PBFD.  */\n+\t\tfirst_pbfd = abfd;\n+\t\tbreak;\n+\t      }\n \t  }\n       }\n \n+  if (info->indirect_extern_access > 0 && elf_bfd != NULL)\n+    {\n+      /* Support -z indirect-extern-access.  */\n+      if (first_pbfd == NULL)\n+\t{\n+\t  sec = bfd_make_section_with_flags (elf_bfd,\n+\t\t\t\t\t     NOTE_GNU_PROPERTY_SECTION_NAME,\n+\t\t\t\t\t     (SEC_ALLOC\n+\t\t\t\t\t      | SEC_LOAD\n+\t\t\t\t\t      | SEC_IN_MEMORY\n+\t\t\t\t\t      | SEC_READONLY\n+\t\t\t\t\t      | SEC_HAS_CONTENTS\n+\t\t\t\t\t      | SEC_DATA));\n+\t  if (sec == NULL)\n+\t    info->callbacks->einfo (_(\"%F%P: failed to create GNU property section\\n\"));\n+\n+\t  if (!bfd_set_section_alignment (sec,\n+\t\t\t\t\t  elfclass == ELFCLASS64 ? 3 : 2))\n+\t    info->callbacks->einfo (_(\"%F%pA: failed to align section\\n\"),\n+\t\t\t\t    sec);\n+\n+\t  elf_section_type (sec) = SHT_NOTE;\n+\t  first_pbfd = elf_bfd;\n+\t  has_properties = true;\n+\t}\n+\n+      p = _bfd_elf_get_property (first_pbfd, GNU_PROPERTY_1_NEEDED, 4);\n+      if (p->pr_kind == property_unknown)\n+\t{\n+\t  /* Create GNU_PROPERTY_1_NEEDED.  */\n+\t  p->u.number\n+\t    = GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS;\n+\t  p->pr_kind = property_number;\n+\t}\n+      else\n+\tp->u.number\n+\t  |= GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS;\n+    }\n+\n   /* Do nothing if there is no .note.gnu.property section.  */\n   if (!has_properties)\n     return NULL;\n@@ -695,7 +756,6 @@ _bfd_elf_link_setup_gnu_properties (struct bfd_link_info *info)\n \t if N > 0.  */\n       if (info->stacksize > 0)\n \t{\n-\t  elf_property *p;\n \t  bfd_vma stacksize = info->stacksize;\n \n \t  p = _bfd_elf_get_property (first_pbfd, GNU_PROPERTY_STACK_SIZE,\n@@ -737,7 +797,30 @@ _bfd_elf_link_setup_gnu_properties (struct bfd_link_info *info)\n       sec->size = size;\n       contents = (bfd_byte *) bfd_zalloc (first_pbfd, size);\n \n-      elf_write_gnu_properties (first_pbfd, contents, list, size,\n+      if (info->indirect_extern_access <= 0)\n+\t{\n+\t  /* Get GNU_PROPERTY_1_NEEDED properties.  */\n+\t  p = elf_find_and_remove_property (&elf_properties (first_pbfd),\n+\t\t\t\t\t    GNU_PROPERTY_1_NEEDED, false);\n+\t  if (p != NULL)\n+\t    {\n+\t      if (info->indirect_extern_access < 0)\n+\t\t{\n+\t\t  /* Set indirect_extern_access to 1 to indicate that\n+\t\t     it is turned on by input properties.  */\n+\t\t  if ((p->u.number\n+\t\t       & GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS)\n+\t\t      != 0)\n+\t\t    info->indirect_extern_access = 1;\n+\t\t}\n+\t      else\n+\t\t/* Turn off indirect external access.  */\n+\t\tp->u.number\n+\t\t  &= ~GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS;\n+\t    }\n+\t}\n+\n+      elf_write_gnu_properties (info, first_pbfd, contents, list, size,\n \t\t\t\talign_size);\n \n       /* Cache the section contents for elf_link_input_bfd.  */\n@@ -747,6 +830,15 @@ _bfd_elf_link_setup_gnu_properties (struct bfd_link_info *info)\n \t symbol is defined in the shared object.  */\n       if (elf_has_no_copy_on_protected (first_pbfd))\n \tinfo->extern_protected_data = false;\n+\n+      if (info->indirect_extern_access > 0)\n+\t{\n+\t  /* For indirect external access, don't generate copy\n+\t     relocations.  NB: Set to nocopyreloc to 2 to indicate\n+\t     that it is implied by indirect_extern_access.  */\n+\t  info->nocopyreloc = 2;\n+\t  info->extern_protected_data = false;\n+\t}\n     }\n \n   return first_pbfd;\n@@ -804,7 +896,8 @@ _bfd_elf_convert_gnu_properties (bfd *ibfd, asection *isec,\n   *ptr_size = size;\n \n   /* Generate the output .note.gnu.property section.  */\n-  elf_write_gnu_properties (ibfd, contents, list, size, 1 << align_shift);\n+  elf_write_gnu_properties (NULL, ibfd, contents, list, size,\n+\t\t\t    1 << align_shift);\n \n   return true;\n }"
    },
    {
      "sha": "9a9e48becdbdaa2a6d282a1031da32adf4bf8844",
      "filename": "bfd/elf32-i386.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elf32-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elf32-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-i386.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -1815,6 +1815,9 @@ elf_i386_check_relocs (bfd *abfd,\n \t\t     adjust_dynamic_symbol.  */\n \t\t  h->non_got_ref = 1;\n \n+\t\t  if (!elf_has_indirect_extern_access (sec->owner))\n+\t\t    eh->non_got_ref_without_indirect_extern_access = 1;\n+\n \t\t  /* We may need a .plt entry if the symbol is a function\n \t\t     defined in a shared lib or is a function referenced\n \t\t     from the code or read-only section.  */"
    },
    {
      "sha": "dc416a7f7120070f384de0e92a7dd4cff0455ad2",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -1972,6 +1972,8 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    break;\n \t  }\n \n+      eh = (struct elf_x86_link_hash_entry *) h;\n+\n       if (h != NULL)\n \t{\n \t  /* It is referenced by a non-shared object. */\n@@ -2008,7 +2010,6 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n       if (h == htab->elf.hgot)\n \thtab->got_referenced = true;\n \n-      eh = (struct elf_x86_link_hash_entry *) h;\n       switch (r_type)\n \t{\n \tcase R_X86_64_TLSLD:\n@@ -2263,6 +2264,9 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t     adjust_dynamic_symbol.  */\n \t\t  h->non_got_ref = 1;\n \n+\t\t  if (!elf_has_indirect_extern_access (sec->owner))\n+\t\t    eh->non_got_ref_without_indirect_extern_access = 1;\n+\n \t\t  /* We may need a .plt entry if the symbol is a function\n \t\t     defined in a shared lib or is a function referenced\n \t\t     from the code or read-only section.  */"
    },
    {
      "sha": "c9d5da2dab4aef2edb35b14870d9a37fe87a44de",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -3353,6 +3353,10 @@ _bfd_elf_symbol_refs_local_p (struct elf_link_hash_entry *h,\n   if (!is_elf_hash_table (&hash_table->root))\n     return true;\n \n+  /* STV_PROTECTED symbols with indirect external access are local. */\n+  if (info->indirect_extern_access > 0)\n+    return true;\n+\n   bed = get_elf_backend_data (hash_table->dynobj);\n \n   /* If extern_protected_data is false, STV_PROTECTED non-function"
    },
    {
      "sha": "fe4a822041bcaeb970ce2a84af4233608b204708",
      "filename": "bfd/elfxx-x86.c",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elfxx-x86.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elfxx-x86.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -1824,6 +1824,25 @@ _bfd_x86_elf_adjust_dynamic_symbol (struct bfd_link_info *info,\n \n   eh = (struct elf_x86_link_hash_entry *) h;\n \n+  /* Clear GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS if it is turned\n+     on by an input relocatable file and there is a non-GOT/non-PLT\n+     reference from another relocatable file without it.\n+     NB: There can be non-GOT reference in data sections in input with\n+     GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS.  */\n+  if (eh->non_got_ref_without_indirect_extern_access\n+      && info->indirect_extern_access == 1\n+      && bfd_link_executable (info))\n+    {\n+      unsigned int needed_1;\n+      info->indirect_extern_access = 0;\n+      /* Turn off nocopyreloc if implied by indirect_extern_access.  */\n+      if (info->nocopyreloc == 2)\n+\tinfo->nocopyreloc = 0;\n+      needed_1 = bfd_h_get_32 (info->output_bfd, info->needed_1_p);\n+      needed_1 &= ~GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS;\n+      bfd_h_put_32 (info->output_bfd, needed_1, info->needed_1_p);\n+    }\n+\n   /* STT_GNU_IFUNC symbol must go through PLT. */\n   if (h->type == STT_GNU_IFUNC)\n     {"
    },
    {
      "sha": "8251f641a77b6f1dada208882df4a09b33732df6",
      "filename": "bfd/elfxx-x86.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elfxx-x86.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/bfd/elfxx-x86.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.h?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -279,6 +279,10 @@ struct elf_x86_link_hash_entry\n   /* TRUE if symbol is defined by linker.  */\n   unsigned int linker_def : 1;\n \n+  /* TRUE if symbol is referenced by a non-GOT/non-PLT relocation in a\n+     relocatable object file without indirect external access marker.  */\n+  unsigned int non_got_ref_without_indirect_extern_access : 1;\n+\n   /* TRUE if symbol is referenced by R_386_GOTOFF relocation.  This is\n      only used by i386.  */\n   unsigned int gotoff_ref : 1;"
    },
    {
      "sha": "566529ee64459166f0599f387a9eb339be4d33f0",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 19,
      "deletions": 4,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -335,10 +335,6 @@ struct bfd_link_info\n   /* TRUE if BFD should pre-bind symbols in a shared object.  */\n   unsigned int symbolic: 1;\n \n-  /* TRUE if executable should not contain copy relocs.\n-     Setting this true may result in a non-sharable text segment.  */\n-  unsigned int nocopyreloc: 1;\n-\n   /* TRUE if BFD should export all symbols in the dynamic symbol table\n      of an executable, rather than only those used.  */\n   unsigned int export_dynamic: 1;\n@@ -652,6 +648,25 @@ struct bfd_link_info\n   /* How many spare .dynamic DT_NULL entries should be added?  */\n   unsigned int spare_dynamic_tags;\n \n+  /* GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS control:\n+       > 1: Turn on by -z indirect-extern-access or by backend.\n+      == 1: Turn on by an input.\n+         0: Turn off.\n+       < 0: Turn on if it is set on any inputs or let backend to\n+\t    decide.  */\n+  int indirect_extern_access;\n+\n+  /* Non-zero if executable should not contain copy relocs.\n+       > 1: Implied by indirect_extern_access.\n+      == 1: Turn on by -z nocopyreloc.\n+         0: Turn off.\n+    Setting this to non-zero may result in a non-sharable text\n+    segment.  */\n+  int nocopyreloc;\n+\n+  /* Pointer to the GNU_PROPERTY_1_NEEDED property in memory.  */\n+  bfd_byte *needed_1_p;\n+\n   /* May be used to set DT_FLAGS for ELF. */\n   bfd_vma flags;\n "
    },
    {
      "sha": "59d1d3c979d28ac30675354da1a5cd40e69fb620",
      "filename": "ld/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/NEWS?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -1,5 +1,8 @@\n -*- text -*-\n \n+* Add -z indirect-extern-access/-z noindirect-extern-access to control\n+  canonical function pointers and copy relocation.\n+\n * Add --max-cache-size=SIZE to set the the maximum cache size to SIZE\n   bytes.\n "
    },
    {
      "sha": "cb855a65689a79a6ed8f4de653edcf6f2aeaccf5",
      "filename": "ld/emulparams/extern_protected_data.sh",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/emulparams/extern_protected_data.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/emulparams/extern_protected_data.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/extern_protected_data.sh?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -1,11 +1,21 @@\n PARSE_AND_LIST_OPTIONS_NOEXTEN_PROTECTED_DATA='\n   fprintf (file, _(\"\\\n   -z noextern-protected-data  Do not treat protected data symbol as external\\n\"));\n+  fprintf (file, _(\"\\\n+  -z indirect-extern-access   Enable indirect external access\\n\"));\n+  fprintf (file, _(\"\\\n+  -z noindirect-extern-access Disable indirect external access (default)\\n\"));\n '\n \n+# Set link_info.indirect_extern_access to 2 to indicate that it is set\n+# by \"-z indirect-extern-access\".\n PARSE_AND_LIST_ARGS_CASE_Z_NOEXTEN_PROTECTED_DATA='\n       else if (strcmp (optarg, \"noextern-protected-data\") == 0)\n \tlink_info.extern_protected_data = false;\n+      else if (strcmp (optarg, \"indirect-extern-access\") == 0)\n+\tlink_info.indirect_extern_access = 2;\n+      else if (strcmp (optarg, \"noindirect-extern-access\") == 0)\n+\tlink_info.indirect_extern_access = 0;\n '\n \n "
    },
    {
      "sha": "b6d8dccea0bc18f8ff44d83fdb7a3ef4bd18821b",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -1293,6 +1293,18 @@ Generate GNU_PROPERTY_X86_FEATURE_1_IBT in .note.gnu.property section\n to indicate compatibility with IBT.  This also implies @option{ibtplt}.\n Supported for Linux/i386 and Linux/x86_64.\n \n+@item indirect-extern-access\n+@itemx noindirect-extern-access\n+Generate GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS in\n+.note.gnu.property section to indicate that object file requires\n+canonical function pointers and cannot be used with copy relocation.\n+This option also implies @option{noextern-protected-data} and\n+@option{nocopyreloc}.  Supported for i386 and x86-64.\n+\n+@option{noindirect-extern-access} removes\n+GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS from .note.gnu.property\n+section.\n+\n @item initfirst\n This option is only meaningful when building a shared object.\n It marks the object so that its runtime initialization will occur"
    },
    {
      "sha": "02029237e1ab0afc5b308f19beef3665a5f03ebf",
      "filename": "ld/ldmain.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/ldmain.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/ldmain.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmain.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -347,6 +347,7 @@ main (int argc, char **argv)\n   link_info.relax_pass = 1;\n   link_info.extern_protected_data = -1;\n   link_info.dynamic_undefined_weak = -1;\n+  link_info.indirect_extern_access = -1;\n   link_info.pei386_auto_import = -1;\n   link_info.spare_dynamic_tags = 5;\n   link_info.path_separator = ':';"
    },
    {
      "sha": "39dc89a41a903cb9d37137488dd85dc288b55348",
      "filename": "ld/testsuite/ld-elf/indirect-extern-access-1.rd",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-1.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-1.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/indirect-extern-access-1.rd?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,8 @@\n+#...\n+[a-f0-9]+ +[0-9a-f]+ +R_.*_COPY +[a-f0-9]+ +indirect_extern_access( \\+ 0|)\n+#...\n+Displaying notes found in: .note.gnu.property\n+[ \t]+Owner[ \t]+Data size[ \t]+Description\n+  GNU                  0x[0-9a-f]+\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: 1_needed: \n+#pass"
    },
    {
      "sha": "478981012d5ad70bde8f028d6aa56026e9b1d5cd",
      "filename": "ld/testsuite/ld-elf/indirect-extern-access-1a.c",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-1a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-1a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/indirect-extern-access-1a.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1 @@\n+int indirect_extern_access = 1;"
    },
    {
      "sha": "68adae5666a5fee7bdfa227e5656b5a1d4cf1660",
      "filename": "ld/testsuite/ld-elf/indirect-extern-access-1b.c",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-1b.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-1b.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/indirect-extern-access-1b.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,12 @@\n+#include <stdio.h>\n+\n+extern int indirect_extern_access;\n+\n+int\n+main (void)\n+{\n+  if (indirect_extern_access == 1)\n+    puts (\"PASS\");\n+\n+  return 0;\n+}"
    },
    {
      "sha": "9c7d72fae25d3d08dcaae5c77bd8bf2178c74002",
      "filename": "ld/testsuite/ld-elf/indirect-extern-access-2.rd",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-2.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-2.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/indirect-extern-access-2.rd?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,8 @@\n+#...\n+[a-f0-9]+ +[0-9a-f]+ +R_.*_JUMP_SLO(T|) +[a-f0-9]+ +indirect_extern_access( \\+ 0|)\n+#...\n+Displaying notes found in: .note.gnu.property\n+[ \t]+Owner[ \t]+Data size[ \t]+Description\n+  GNU                  0x[0-9a-f]+\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: 1_needed: \n+#pass"
    },
    {
      "sha": "cb570689ae7d40a850b00cb6319f9d9176fccac0",
      "filename": "ld/testsuite/ld-elf/indirect-extern-access-2a.c",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-2a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-2a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/indirect-extern-access-2a.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,10 @@\n+void\n+indirect_extern_access (void)\n+{\n+}\n+\n+void *\n+indirect_extern_access_p (void)\n+{\n+  return indirect_extern_access;\n+}"
    },
    {
      "sha": "dedfd9bce812d2b685c7fe072456d3fa912c53c2",
      "filename": "ld/testsuite/ld-elf/indirect-extern-access-2b.c",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-2b.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-2b.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/indirect-extern-access-2b.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,13 @@\n+#include <stdio.h>\n+\n+extern void indirect_extern_access (void);\n+extern void *indirect_extern_access_p (void);\n+\n+int\n+main (void)\n+{\n+  if (&indirect_extern_access == indirect_extern_access_p ())\n+    puts (\"PASS\");\n+\n+  return 0;\n+}"
    },
    {
      "sha": "ce777a56a2c836a2f7b7b6193a4c653d7e05740b",
      "filename": "ld/testsuite/ld-elf/indirect-extern-access-3.rd",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-3.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access-3.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/indirect-extern-access-3.rd?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,8 @@\n+#...\n+[a-f0-9]+ +[0-9a-f]+ +R_.*_GLOB_DAT +[a-f0-9]+ +indirect_extern_access( \\+ 0|)\n+#...\n+Displaying notes found in: .note.gnu.property\n+[ \t]+Owner[ \t]+Data size[ \t]+Description\n+  GNU                  0x[0-9a-f]+\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: 1_needed: indirect external access\n+#pass"
    },
    {
      "sha": "25b88ba82cae8e2783ce712ba9283bd1e023c049",
      "filename": "ld/testsuite/ld-elf/indirect-extern-access.S",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/indirect-extern-access.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/indirect-extern-access.S?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,20 @@\n+# ifdef __LP64__\n+#  define ALIGN 3\n+# else\n+#  define ALIGN 2\n+# endif\n+\t.section \".note.gnu.property\", \"a\"\n+\t.p2align ALIGN\n+\t.long 1f - 0f\t\t/* name length */\n+\t.long 5f - 2f\t\t/* data length */\n+\t.long 5\t\t\t/* note type */\n+0:\t.asciz \"GNU\"\t\t/* vendor name */\n+1:\n+\t.p2align ALIGN\n+2:\t.long 0xb0008000\t/* pr_type.  */\n+\t.long 4f - 3f\t\t/* pr_datasz.  */\n+3:\n+\t.long 0x1\n+4:\n+\t.p2align ALIGN\n+5:"
    },
    {
      "sha": "819237415e6404c8ee8034ab5b88b008342118af",
      "filename": "ld/testsuite/ld-elf/linux-x86.exp",
      "status": "modified",
      "additions": 97,
      "deletions": 0,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/linux-x86.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/linux-x86.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/linux-x86.exp?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -73,6 +73,103 @@ run_ld_link_tests [list \\\n     ] \\\n ]\n \n+run_cc_link_tests [list \\\n+    [list \\\n+\t\"Build indirect-extern-access-1.so\" \\\n+\t\"-shared\" \\\n+\t\"-fPIC\" \\\n+\t{ indirect-extern-access-1a.c } \\\n+\t{} \\\n+\t\"indirect-extern-access-1.so\" \\\n+    ] \\\n+    [list \\\n+\t\"Build indirect-extern-access-1a without PIE\" \\\n+\t\"$NOPIE_LDFLAGS -Wl,--no-as-needed  \\\n+\t tmpdir/indirect-extern-access-1.so\" \\\n+\t\"$NOPIE_CFLAGS\" \\\n+\t{ indirect-extern-access.S indirect-extern-access-1b.c } \\\n+\t{{readelf -rn indirect-extern-access-1.rd}} \\\n+\t\"indirect-extern-access-1a\" \\\n+    ] \\\n+    [list \\\n+\t\"Build indirect-extern-access-2.so\" \\\n+\t\"-shared\" \\\n+\t\"-fPIC\" \\\n+\t{ indirect-extern-access-2a.c } \\\n+\t{} \\\n+\t\"indirect-extern-access-2.so\" \\\n+    ] \\\n+    [list \\\n+\t\"Build indirect-extern-access-2a without PIE\" \\\n+\t\"$NOPIE_LDFLAGS -Wl,--no-as-needed  \\\n+\t tmpdir/indirect-extern-access-2.so\" \\\n+\t\"$NOPIE_CFLAGS\" \\\n+\t{ indirect-extern-access.S indirect-extern-access-1b.c } \\\n+\t{{readelf -rn indirect-extern-access-2.rd}} \\\n+\t\"indirect-extern-access-2a\" \\\n+    ] \\\n+    [list \\\n+\t\"Build indirect-extern-access-2b with PIE\" \\\n+\t\"-pie -Wl,--no-as-needed  \\\n+\t tmpdir/indirect-extern-access-2.so\" \\\n+\t\"-fpie\" \\\n+\t{ indirect-extern-access.S indirect-extern-access-2b.c } \\\n+\t{{readelf -rn indirect-extern-access-3.rd}} \\\n+\t\"indirect-extern-access-2b\" \\\n+    ] \\\n+]\n+\n+run_ld_link_exec_tests [list \\\n+    [list \\\n+\t\"Run indirect-extern-access-1a without PIE\" \\\n+\t\"$NOPIE_LDFLAGS\" \\\n+\t\"\" \\\n+\t{ indirect-extern-access.S indirect-extern-access-1b.c } \\\n+\t\"indirect-extern-access-1a\" \\\n+\t\"pass.out\" \\\n+\t\"$NOPIE_CFLAGS\" \\\n+\t\"\" \\\n+\t\"\" \\\n+\t\"tmpdir/indirect-extern-access-1.so\" \\\n+    ] \\\n+    [list \\\n+\t\"Run indirect-extern-access-1b with PIE\" \\\n+\t\"-pie\" \\\n+\t\"\" \\\n+\t{ indirect-extern-access.S indirect-extern-access-1b.c } \\\n+\t\"indirect-extern-access-1b\" \\\n+\t\"pass.out\" \\\n+\t\"-fpie\" \\\n+\t\"\" \\\n+\t\"\" \\\n+\t\"tmpdir/indirect-extern-access-1.so\" \\\n+    ] \\\n+    [list \\\n+\t\"Run indirect-extern-access-2a without PIE\" \\\n+\t\"$NOPIE_LDFLAGS\" \\\n+\t\"\" \\\n+\t{ indirect-extern-access.S indirect-extern-access-2b.c } \\\n+\t\"indirect-extern-access-2a\" \\\n+\t\"pass.out\" \\\n+\t\"$NOPIE_CFLAGS\" \\\n+\t\"\" \\\n+\t\"\" \\\n+\t\"tmpdir/indirect-extern-access-2.so\" \\\n+    ] \\\n+    [list \\\n+\t\"Run indirect-extern-access-2b with PIE\" \\\n+\t\"-pie\" \\\n+\t\"\" \\\n+\t{ indirect-extern-access.S indirect-extern-access-2b.c } \\\n+\t\"indirect-extern-access-2b\" \\\n+\t\"pass.out\" \\\n+\t\"-fpie\" \\\n+\t\"\" \\\n+\t\"\" \\\n+\t\"tmpdir/indirect-extern-access-2.so\" \\\n+    ] \\\n+]\n+\n proc elfedit_test { options test output } {\n     global ELFEDIT\n     global READELF"
    },
    {
      "sha": "b7a9eea344d9ebae7a5c10cef649c565a551a267",
      "filename": "ld/testsuite/ld-elf/property-1_needed-1b.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/property-1_needed-1b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/property-1_needed-1b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/property-1_needed-1b.d?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,16 @@\n+#source: empty.s\n+#as:\n+#ld: -shared -z indirect-extern-access\n+#readelf: -n\n+#xfail: ![check_shared_lib_support]\n+#notarget: am33_2.0-*-* hppa*-*-hpux* mn10300-*-*\n+# Assembly source file for the HPPA assembler is renamed and modifed by\n+# sed.  mn10300 has relocations in .note.gnu.property section which\n+# elf_parse_notes doesn't support.\n+\n+#...\n+Displaying notes found in: .note.gnu.property\n+[ \t]+Owner[ \t]+Data size[ \t]+Description\n+  GNU                  0x[0-9a-f]+\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: 1_needed: indirect external access\n+#pass"
    },
    {
      "sha": "21e1d26f4a4d490af833f429ad6461522bf8fb8b",
      "filename": "ld/testsuite/ld-elf/property-1_needed-1c.d",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/property-1_needed-1c.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-elf/property-1_needed-1c.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/property-1_needed-1c.d?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,17 @@\n+#source: empty.s\n+#source: property-1_needed-1.s\n+#as:\n+#ld: -shared -z noindirect-extern-access\n+#readelf: -n\n+#xfail: ![check_shared_lib_support]\n+#notarget: am33_2.0-*-* hppa*-*-hpux* mn10300-*-*\n+# Assembly source file for the HPPA assembler is renamed and modifed by\n+# sed.  mn10300 has relocations in .note.gnu.property section which\n+# elf_parse_notes doesn't support.\n+\n+#...\n+Displaying notes found in: .note.gnu.property\n+[ \t]+Owner[ \t]+Data size[ \t]+Description\n+  GNU                  0x[0-9a-f]+\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: 1_needed: <unknown: 2>\n+#pass"
    },
    {
      "sha": "696b06f20463c705fe81257a8995a3f5d0a42747",
      "filename": "ld/testsuite/ld-x86-64/indirect-extern-access.rd",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/indirect-extern-access.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/indirect-extern-access.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/indirect-extern-access.rd?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,6 @@\n+#...\n+Displaying notes found in: .note.gnu.property\n+[ \t]+Owner[ \t]+Data size[ \t]+Description\n+  GNU                  0x[0-9a-f]+\tNT_GNU_PROPERTY_TYPE_0\n+      Properties: 1_needed: indirect external access\n+#pass"
    },
    {
      "sha": "a80c9769d370ff671f4cb3ad42bc419602aee3e0",
      "filename": "ld/testsuite/ld-x86-64/protected-data-1.h",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-data-1.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-data-1.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/protected-data-1.h?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,11 @@\n+extern int protected_data_1a;\n+extern int protected_data_1b;\n+\n+extern int *protected_data_1a_p ();\n+extern int *protected_data_1b_p ();\n+\n+extern void set_protected_data_1a (int);\n+extern void set_protected_data_1b (int);\n+\n+extern int check_protected_data_1a (int);\n+extern int check_protected_data_1b (int);"
    },
    {
      "sha": "6942426ecb3b421e7a5445bff70a32141ab0f621",
      "filename": "ld/testsuite/ld-x86-64/protected-data-1a.c",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-data-1a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-data-1a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/protected-data-1a.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,40 @@\n+#include \"protected-data-1.h\"\n+\n+int protected_data_1a __attribute__ ((visibility(\"protected\"))) = 1;\n+int protected_data_1b __attribute__ ((visibility(\"protected\"))) = 2;\n+\n+int *\n+protected_data_1a_p (void)\n+{\n+  return &protected_data_1a;\n+}\n+\n+int *\n+protected_data_1b_p (void)\n+{\n+  return &protected_data_1b;\n+}\n+\n+void\n+set_protected_data_1a (int i)\n+{\n+  protected_data_1a = i;\n+}\n+\n+void\n+set_protected_data_1b (int i)\n+{\n+  protected_data_1b = i;\n+}\n+\n+int\n+check_protected_data_1a (int i)\n+{\n+  return protected_data_1a == i ? 0 : 1;\n+}\n+\n+int\n+check_protected_data_1b (int i)\n+{\n+  return protected_data_1b == i ? 0 : 1;\n+}"
    },
    {
      "sha": "a4756ee08da5aaf741663b80d8aa2ab52bd50c60",
      "filename": "ld/testsuite/ld-x86-64/protected-data-1b.c",
      "status": "added",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-data-1b.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-data-1b.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/protected-data-1b.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,59 @@\n+#include <stdio.h>\n+\n+#include \"protected-data-1.h\"\n+\n+int protected_data_1b = 3;\n+\n+int\n+main (void)\n+{\n+  int res = 0;\n+\n+  /* Check if we get the same address for the protected data symbol.  */\n+  if (&protected_data_1a != protected_data_1a_p ())\n+    {\n+      puts (\"'protected_data_1a' in main and shared library doesn't have same address\");\n+      res = 1;\n+    }\n+\n+  protected_data_1a = -1;\n+  if (check_protected_data_1a (-1))\n+    {\n+      puts (\"'protected_data_1a' in main and shared library doesn't have same value\");\n+      res = 1;\n+    }\n+\n+  set_protected_data_1a (-3);\n+  if (protected_data_1a != -3)\n+    {\n+      puts (\"'protected_data_1a' in main and shared library doesn't have same value\");\n+      res = 1;\n+    }\n+\n+  /* Check if we get the different addresses for the protected data\n+     symbol.  */\n+  if (&protected_data_1b == protected_data_1b_p ())\n+    {\n+      puts (\"'protected_data_1b' in main and shared library has same address\");\n+      res = 1;\n+    }\n+\n+  protected_data_1b = -10;\n+  if (check_protected_data_1b (2))\n+    {\n+      puts (\"'protected_data_1b' in main and shared library has same address\");\n+      res = 1;\n+    }\n+\n+  set_protected_data_1b (-30);\n+  if (protected_data_1b != -10)\n+    {\n+      puts (\"'protected_data_1b' in main and shared library has same address\");\n+      res = 1;\n+    }\n+\n+  if (!res)\n+    puts (\"PASS\");\n+\n+  return res;\n+}"
    },
    {
      "sha": "865c1af9daa2a29faf2d7eb15ca112ed8ca86bdb",
      "filename": "ld/testsuite/ld-x86-64/protected-data-2a.S",
      "status": "added",
      "additions": 109,
      "deletions": 0,
      "changes": 109,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-data-2a.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-data-2a.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/protected-data-2a.S?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,109 @@\n+\t.text\n+\t.p2align 4\n+\t.protected\tprotected_data_1a\n+\t.globl\tprotected_data_1a_p\n+\t.type\tprotected_data_1a_p, @function\n+protected_data_1a_p:\n+.LFB0:\n+\t.cfi_startproc\n+\tleaq\tprotected_data_1a(%rip), %rax\n+\tret\n+\t.cfi_endproc\n+.LFE0:\n+\t.size\tprotected_data_1a_p, .-protected_data_1a_p\n+\t.p2align 4\n+\t.protected\tprotected_data_1b\n+\t.globl\tprotected_data_1b_p\n+\t.type\tprotected_data_1b_p, @function\n+protected_data_1b_p:\n+.LFB1:\n+\t.cfi_startproc\n+\tleaq\tprotected_data_1b(%rip), %rax\n+\tret\n+\t.cfi_endproc\n+.LFE1:\n+\t.size\tprotected_data_1b_p, .-protected_data_1b_p\n+\t.p2align 4\n+\t.globl\tset_protected_data_1a\n+\t.type\tset_protected_data_1a, @function\n+set_protected_data_1a:\n+.LFB2:\n+\t.cfi_startproc\n+\tmovl\t%edi, protected_data_1a(%rip)\n+\tret\n+\t.cfi_endproc\n+.LFE2:\n+\t.size\tset_protected_data_1a, .-set_protected_data_1a\n+\t.p2align 4\n+\t.globl\tset_protected_data_1b\n+\t.type\tset_protected_data_1b, @function\n+set_protected_data_1b:\n+.LFB3:\n+\t.cfi_startproc\n+\tmovl\t%edi, protected_data_1b(%rip)\n+\tret\n+\t.cfi_endproc\n+.LFE3:\n+\t.size\tset_protected_data_1b, .-set_protected_data_1b\n+\t.p2align 4\n+\t.globl\tcheck_protected_data_1a\n+\t.type\tcheck_protected_data_1a, @function\n+check_protected_data_1a:\n+.LFB4:\n+\t.cfi_startproc\n+\txorl\t%eax, %eax\n+\tcmpl\t%edi, protected_data_1a(%rip)\n+\tsetne\t%al\n+\tret\n+\t.cfi_endproc\n+.LFE4:\n+\t.size\tcheck_protected_data_1a, .-check_protected_data_1a\n+\t.p2align 4\n+\t.globl\tcheck_protected_data_1b\n+\t.type\tcheck_protected_data_1b, @function\n+check_protected_data_1b:\n+.LFB5:\n+\t.cfi_startproc\n+\txorl\t%eax, %eax\n+\tcmpl\t%edi, protected_data_1b(%rip)\n+\tsetne\t%al\n+\tret\n+\t.cfi_endproc\n+.LFE5:\n+\t.size\tcheck_protected_data_1b, .-check_protected_data_1b\n+\t.globl\tprotected_data_1b\n+\t.data\n+\t.align 4\n+\t.type\tprotected_data_1b, @object\n+\t.size\tprotected_data_1b, 4\n+protected_data_1b:\n+\t.long\t2\n+\t.globl\tprotected_data_1a\n+\t.align 4\n+\t.type\tprotected_data_1a, @object\n+\t.size\tprotected_data_1a, 4\n+protected_data_1a:\n+\t.long\t1\n+\t.section\t.note.GNU-stack,\"\",@progbits\n+#ifdef USE_GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS\n+# ifdef __LP64__\n+#  define ALIGN 3\n+# else\n+#  define ALIGN 2\n+# endif\n+\t.section \".note.gnu.property\", \"a\"\n+\t.p2align ALIGN\n+\t.long 1f - 0f\t\t/* name length */\n+\t.long 5f - 2f\t\t/* data length */\n+\t.long 5\t\t\t/* note type */\n+0:\t.asciz \"GNU\"\t\t/* vendor name */\n+1:\n+\t.p2align ALIGN\n+2:\t.long 0xb0008000\t/* pr_type.  */\n+\t.long 4f - 3f\t\t/* pr_datasz.  */\n+3:\n+\t.long 0x1\n+4:\n+\t.p2align ALIGN\n+5:\n+#endif"
    },
    {
      "sha": "da8956139fe70bfd9917f34950068460383b1e61",
      "filename": "ld/testsuite/ld-x86-64/protected-data-2b.S",
      "status": "added",
      "additions": 119,
      "deletions": 0,
      "changes": 119,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-data-2b.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-data-2b.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/protected-data-2b.S?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,119 @@\n+\t.section\t.rodata.str1.8,\"aMS\",@progbits,1\n+\t.align 8\n+.LC0:\n+\t.string\t\"'protected_data_1a' in main and shared library doesn't have same address\"\n+\t.align 8\n+.LC1:\n+\t.string\t\"'protected_data_1a' in main and shared library doesn't have same value\"\n+\t.align 8\n+.LC2:\n+\t.string\t\"'protected_data_1b' in main and shared library has same address\"\n+\t.section\t.rodata.str1.1,\"aMS\",@progbits,1\n+.LC3:\n+\t.string\t\"PASS\"\n+\t.section\t.text.startup,\"ax\",@progbits\n+\t.p2align 4,,15\n+\t.globl\tmain\n+\t.type\tmain, @function\n+main:\n+.LFB11:\n+\t.cfi_startproc\n+\tpushq\t%rbp\n+\t.cfi_def_cfa_offset 16\n+\t.cfi_offset 6, -16\n+\txorl\t%eax, %eax\n+\tpushq\t%rbx\n+\t.cfi_def_cfa_offset 24\n+\t.cfi_offset 3, -24\n+\txorl\t%ebx, %ebx\n+\tsubq\t$8, %rsp\n+\t.cfi_def_cfa_offset 32\n+\tcall\tprotected_data_1a_p\n+\tmovq\tprotected_data_1a@GOTPCREL(%rip), %rbp\n+\tcmpq\t%rbp, %rax\n+\tje\t.L2\n+\tleaq\t.LC0(%rip), %rdi\n+\tmovb\t$1, %bl\n+\tcall\tputs\n+.L2:\n+\tmovl\t$-1, %edi\n+\tmovl\t$-1, 0(%rbp)\n+\tcall\tcheck_protected_data_1a\n+\ttestl\t%eax, %eax\n+\tjne\t.L17\n+.L3:\n+\tmovl\t$-3, %edi\n+\tcall\tset_protected_data_1a\n+\tcmpl\t$-3, 0(%rbp)\n+\tje\t.L4\n+\tleaq\t.LC1(%rip), %rdi\n+\tmovl\t$1, %ebx\n+\tcall\tputs\n+.L4:\n+\txorl\t%eax, %eax\n+\tcall\tprotected_data_1b_p\n+\tleaq\tprotected_data_1b(%rip), %rdx\n+\tcmpq\t%rdx, %rax\n+\tje\t.L18\n+.L5:\n+\tmovl\t$2, %edi\n+\tmovl\t$-10, protected_data_1b(%rip)\n+\tcall\tcheck_protected_data_1b\n+\ttestl\t%eax, %eax\n+\tjne\t.L19\n+\tmovl\t$-30, %edi\n+\tcall\tset_protected_data_1b\n+\tcmpl\t$-10, protected_data_1b(%rip)\n+\tje\t.L9\n+.L7:\n+\tleaq\t.LC2(%rip), %rdi\n+\tmovl\t$1, %ebx\n+\tcall\tputs\n+.L8:\n+\taddq\t$8, %rsp\n+\t.cfi_remember_state\n+\t.cfi_def_cfa_offset 24\n+\tmovl\t%ebx, %eax\n+\tpopq\t%rbx\n+\t.cfi_def_cfa_offset 16\n+\tpopq\t%rbp\n+\t.cfi_def_cfa_offset 8\n+\tret\n+.L9:\n+\t.cfi_restore_state\n+\ttestl\t%ebx, %ebx\n+\tjne\t.L11\n+\tleaq\t.LC3(%rip), %rdi\n+\tcall\tputs\n+\tjmp\t.L8\n+.L19:\n+\tleaq\t.LC2(%rip), %rdi\n+\tcall\tputs\n+\tmovl\t$-30, %edi\n+\tcall\tset_protected_data_1b\n+\tcmpl\t$-10, protected_data_1b(%rip)\n+\tjne\t.L7\n+.L11:\n+\tmovl\t$1, %ebx\n+\tjmp\t.L8\n+.L17:\n+\tleaq\t.LC1(%rip), %rdi\n+\tmovl\t$1, %ebx\n+\tcall\tputs\n+\tjmp\t.L3\n+.L18:\n+\tleaq\t.LC2(%rip), %rdi\n+\tmovl\t$1, %ebx\n+\tcall\tputs\n+\tjmp\t.L5\n+\t.cfi_endproc\n+.LFE11:\n+\t.size\tmain, .-main\n+\t.globl\tprotected_data_1b\n+\t.data\n+\t.align 4\n+\t.type\tprotected_data_1b, @object\n+\t.size\tprotected_data_1b, 4\n+protected_data_1b:\n+\t.long\t3\n+\t.section\t.note.GNU-stack,\"\",@progbits"
    },
    {
      "sha": "35c9cd121bd0fd8f22cbd3578c322eb4ec19f0e0",
      "filename": "ld/testsuite/ld-x86-64/protected-func-2a.S",
      "status": "added",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-func-2a.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-func-2a.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/protected-func-2a.S?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,68 @@\n+\t.text\n+\t.p2align 4\n+\t.protected\tprotected_func_1a\n+\t.globl\tprotected_func_1a\n+\t.type\tprotected_func_1a, @function\n+protected_func_1a:\n+.LFB0:\n+\t.cfi_startproc\n+\tmovl\t$1, %eax\n+\tret\n+\t.cfi_endproc\n+.LFE0:\n+\t.size\tprotected_func_1a, .-protected_func_1a\n+\t.p2align 4\n+\t.protected\tprotected_func_1b\n+\t.globl\tprotected_func_1b\n+\t.type\tprotected_func_1b, @function\n+protected_func_1b:\n+.LFB1:\n+\t.cfi_startproc\n+\tmovl\t$2, %eax\n+\tret\n+\t.cfi_endproc\n+.LFE1:\n+\t.size\tprotected_func_1b, .-protected_func_1b\n+\t.p2align 4\n+\t.globl\tprotected_func_1a_p\n+\t.type\tprotected_func_1a_p, @function\n+protected_func_1a_p:\n+.LFB2:\n+\t.cfi_startproc\n+\tleaq\tprotected_func_1a(%rip), %rax\n+\tret\n+\t.cfi_endproc\n+.LFE2:\n+\t.size\tprotected_func_1a_p, .-protected_func_1a_p\n+\t.p2align 4\n+\t.globl\tprotected_func_1b_p\n+\t.type\tprotected_func_1b_p, @function\n+protected_func_1b_p:\n+.LFB3:\n+\t.cfi_startproc\n+\tleaq\tprotected_func_1b(%rip), %rax\n+\tret\n+\t.cfi_endproc\n+.LFE3:\n+\t.size\tprotected_func_1b_p, .-protected_func_1b_p\n+\t.section\t.note.GNU-stack,\"\",@progbits\n+#ifdef __LP64__\n+# define ALIGN 3\n+#else\n+# define ALIGN 2\n+#endif\n+\t.section \".note.gnu.property\", \"a\"\n+\t.p2align ALIGN\n+\t.long 1f - 0f\t\t/* name length */\n+\t.long 5f - 2f\t\t/* data length */\n+\t.long 5\t\t\t/* note type */\n+0:\t.asciz \"GNU\"\t\t/* vendor name */\n+1:\n+\t.p2align ALIGN\n+2:\t.long 0xb0008000\t/* pr_type.  */\n+\t.long 4f - 3f\t\t/* pr_datasz.  */\n+3:\n+\t.long 0x1\n+4:\n+\t.p2align ALIGN\n+5:"
    },
    {
      "sha": "8fa4cbf09d6e8499c3956bf79c7e7b0507a2646f",
      "filename": "ld/testsuite/ld-x86-64/protected-func-2b.S",
      "status": "added",
      "additions": 83,
      "deletions": 0,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-func-2b.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-func-2b.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/protected-func-2b.S?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,83 @@\n+\t.text\n+\t.p2align 4\n+\t.globl\tprotected_func_1b\n+\t.type\tprotected_func_1b, @function\n+protected_func_1b:\n+.LFB11:\n+\t.cfi_startproc\n+\tmovl\t$3, %eax\n+\tret\n+\t.cfi_endproc\n+.LFE11:\n+\t.size\tprotected_func_1b, .-protected_func_1b\n+\t.section\t.rodata.str1.8,\"aMS\",@progbits,1\n+\t.align 8\n+.LC0:\n+\t.string\t\"'protected_func_1a' in main and shared library doesn't have same address\"\n+\t.align 8\n+.LC1:\n+\t.string\t\"'protected_func_1a' doesn't return the correct value\"\n+\t.align 8\n+.LC2:\n+\t.string\t\"'protected_func_1b' in main and shared library has same address\"\n+\t.section\t.rodata.str1.1,\"aMS\",@progbits,1\n+.LC3:\n+\t.string\t\"PASS\"\n+\t.section\t.text.startup,\"ax\",@progbits\n+\t.p2align 4\n+\t.globl\tmain\n+\t.type\tmain, @function\n+main:\n+.LFB12:\n+\t.cfi_startproc\n+\tpushq\t%r12\n+\t.cfi_def_cfa_offset 16\n+\t.cfi_offset 12, -16\n+\txorl\t%r12d, %r12d\n+\tcall\tprotected_func_1a_p\n+\tcmpq\tprotected_func_1a@GOTPCREL(%rip), %rax\n+\tje\t.L4\n+\tleaq\t.LC0(%rip), %rdi\n+\tmovl\t$1, %r12d\n+\tcall\tputs\n+.L4:\n+\tcall\tprotected_func_1a\n+\tcmpl\t$1, %eax\n+\tjne\t.L13\n+\tcall\tprotected_func_1b_p\n+\tleaq\tprotected_func_1b(%rip), %rdx\n+\tcmpq\t%rax, %rdx\n+\tje\t.L6\n+\ttestl\t%r12d, %r12d\n+\tjne\t.L12\n+\tleaq\t.LC3(%rip), %rdi\n+\tcall\tputs\n+\tmovl\t%r12d, %eax\n+\tpopq\t%r12\n+\t.cfi_remember_state\n+\t.cfi_def_cfa_offset 8\n+\tret\n+.L13:\n+\t.cfi_restore_state\n+\tleaq\t.LC1(%rip), %rdi\n+\tcall\tputs\n+\tcall\tprotected_func_1b_p\n+\tleaq\tprotected_func_1b(%rip), %rdx\n+\tcmpq\t%rax, %rdx\n+\tje\t.L6\n+.L12:\n+\tmovl\t$1, %r12d\n+\tmovl\t%r12d, %eax\n+\tpopq\t%r12\n+\t.cfi_remember_state\n+\t.cfi_def_cfa_offset 8\n+\tret\n+.L6:\n+\t.cfi_restore_state\n+\tleaq\t.LC2(%rip), %rdi\n+\tcall\tputs\n+\tjmp\t.L12\n+\t.cfi_endproc\n+.LFE12:\n+\t.size\tmain, .-main\n+\t.section\t.note.GNU-stack,\"\",@progbits"
    },
    {
      "sha": "c5ec1eca17e8ae9177a895be97d63cc681f114c5",
      "filename": "ld/testsuite/ld-x86-64/protected-func-2c.c",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-func-2c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/protected-func-2c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/protected-func-2c.c?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -0,0 +1,29 @@\n+#include \"protected-func-1.h\"\n+\n+protected_func_type protected_func_1a_ptr = protected_func_1a;\n+\n+__attribute__ ((visibility(\"protected\")))\n+int\n+protected_func_1a (void)\n+{\n+  return 1;\n+}\n+\n+__attribute__ ((visibility(\"protected\")))\n+int\n+protected_func_1b (void)\n+{\n+  return 2;\n+}\n+\n+protected_func_type\n+protected_func_1a_p (void)\n+{\n+  return protected_func_1a;\n+}\n+\n+protected_func_type\n+protected_func_1b_p (void)\n+{\n+  return protected_func_1b;\n+}"
    },
    {
      "sha": "a80f22c2453e955f5f9ee6b106c39411a2c71249",
      "filename": "ld/testsuite/ld-x86-64/x86-64.exp",
      "status": "modified",
      "additions": 147,
      "deletions": 0,
      "changes": 147,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/x86-64.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f365fda85a2e2682b197540d14adf66c4261b19/ld/testsuite/ld-x86-64/x86-64.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/x86-64.exp?ref=6f365fda85a2e2682b197540d14adf66c4261b19",
      "patch": "@@ -1334,6 +1334,63 @@ if { [isnative] && [check_compiler_available] } {\n \t    {} \\\n \t    \"libprotected-func-1.so\" \\\n \t] \\\n+\t[list \\\n+\t    \"Build libprotected-func-2a.so\" \\\n+\t    \"-shared\" \\\n+\t    \"-fPIC -Wa,-mx86-used-note=yes\" \\\n+\t    { protected-func-2a.S } \\\n+\t    {{readelf -n indirect-extern-access.rd}}  \\\n+\t    \"libprotected-func-2a.so\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Build libprotected-func-2b.so\" \\\n+\t    \"-shared -z indirect-extern-access\" \\\n+\t    \"-fPIC -Wa,-mx86-used-note=yes\" \\\n+\t    { protected-func-2c.c } \\\n+\t    {{readelf -n indirect-extern-access.rd}}  \\\n+\t    \"libprotected-func-2b.so\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Build libprotected-data-1a.so\" \\\n+\t    \"-shared -z noindirect-extern-access\" \\\n+\t    \"-fPIC -Wa,-mx86-used-note=yes\" \\\n+\t    { protected-data-1a.c } \\\n+\t    {} \\\n+\t    \"libprotected-data-1a.so\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Build libprotected-data-1b.so\" \\\n+\t    \"-shared -z indirect-extern-access\" \\\n+\t    \"-fPIC -Wa,-mx86-used-note=yes\" \\\n+\t    { protected-data-1a.c } \\\n+\t    {} \\\n+\t    \"libprotected-data-1b.so\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Build protected-data-1 without PIE\" \\\n+\t    \"$NOPIE_LDFLAGS -Wl,--no-as-needed tmpdir/libprotected-data-1b.so\" \\\n+\t    \"$NOPIE_CFLAGS -Wa,-mx86-used-note=yes\" \\\n+\t    { protected-data-1b.c } \\\n+\t    {} \\\n+\t    \"protected-data-1\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Build libprotected-data-2a.so\" \\\n+\t    \"-shared\" \\\n+\t    \"-fPIC -Wa,-mx86-used-note=yes \\\n+\t     -DUSE_GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS\" \\\n+\t    { protected-data-2a.S } \\\n+\t    {{readelf -n indirect-extern-access.rd}}  \\\n+\t    \"libprotected-data-2a.so\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Build libprotected-data-2b.so\" \\\n+\t    \"-shared -z indirect-extern-access\" \\\n+\t    \"-fPIC -Wa,-mx86-used-note=yes\" \\\n+\t    { protected-data-2a.S } \\\n+\t    {{readelf -n indirect-extern-access.rd}}  \\\n+\t    \"libprotected-data-2b.so\" \\\n+\t] \\\n     ]\n \n     if  {[istarget \"x86_64-*-linux*-gnux32\"]} {\n@@ -1761,6 +1818,96 @@ if { [isnative] && [check_compiler_available] } {\n \t    \"pass.out\" \\\n \t    \"-fPIE\" \\\n \t] \\\n+\t[list \\\n+\t    \"Run protected-func-2a without PIE\" \\\n+\t    \"$NOPIE_LDFLAGS -Wl,--no-as-needed tmpdir/libprotected-func-2a.so\" \\\n+\t    \"-Wa,-mx86-used-note=yes\" \\\n+\t    { protected-func-2b.S } \\\n+\t    \"protected-func-2a\" \\\n+\t    \"pass.out\" \\\n+\t    \"$NOPIE_CFLAGS\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Run protected-func-2b with PIE\" \\\n+\t    \"-Wl,--no-as-needed -pie tmpdir/libprotected-func-2a.so\" \\\n+\t    \"-Wa,-mx86-used-note=yes\" \\\n+\t    { protected-func-2b.S } \\\n+\t    \"protected-func-2b\" \\\n+\t    \"pass.out\" \\\n+\t    \"-fPIE\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Run protected-func-2c without PIE\" \\\n+\t    \"$NOPIE_LDFLAGS -Wl,--no-as-needed tmpdir/libprotected-func-2b.so\" \\\n+\t    \"-Wa,-mx86-used-note=yes\" \\\n+\t    { protected-func-2b.S } \\\n+\t    \"protected-func-2c\" \\\n+\t    \"pass.out\" \\\n+\t    \"$NOPIE_CFLAGS\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Run protected-func-2d with PIE\" \\\n+\t    \"-Wl,--no-as-needed -pie tmpdir/libprotected-func-2b.so\" \\\n+\t    \"-Wa,-mx86-used-note=yes\" \\\n+\t    { protected-func-2b.S } \\\n+\t    \"protected-func-2d\" \\\n+\t    \"pass.out\" \\\n+\t    \"-fPIE\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Run protected-data-1a without PIE\" \\\n+\t    \"$NOPIE_LDFLAGS -Wl,--no-as-needed tmpdir/libprotected-data-1a.so\" \\\n+\t    \"-Wa,-mx86-used-note=yes\" \\\n+\t    { protected-data-1b.c } \\\n+\t    \"protected-data-1a\" \\\n+\t    \"pass.out\" \\\n+\t    \"$NOPIE_CFLAGS\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Run protected-data-1b with PIE\" \\\n+\t    \"-Wl,--no-as-needed -pie tmpdir/libprotected-data-1a.so\" \\\n+\t    \"-Wa,-mx86-used-note=yes\" \\\n+\t    { protected-data-1b.c } \\\n+\t    \"protected-data-1b\" \\\n+\t    \"pass.out\" \\\n+\t    \"-fPIE\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Run protected-data-2a without PIE\" \\\n+\t    \"$NOPIE_LDFLAGS -Wl,--no-as-needed tmpdir/libprotected-data-2a.so\" \\\n+\t    \"-Wa,-mx86-used-note=yes\" \\\n+\t    { protected-data-2b.S } \\\n+\t    \"protected-data-2a\" \\\n+\t    \"pass.out\" \\\n+\t    \"$NOPIE_CFLAGS\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Run protected-data-2b with PIE\" \\\n+\t    \"-Wl,--no-as-needed -pie tmpdir/libprotected-data-2a.so\" \\\n+\t    \"-Wa,-mx86-used-note=yes\" \\\n+\t    { protected-data-2b.S } \\\n+\t    \"protected-data-2b\" \\\n+\t    \"pass.out\" \\\n+\t    \"-fPIE\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Run protected-data-2c without PIE\" \\\n+\t    \"$NOPIE_LDFLAGS -Wl,--no-as-needed tmpdir/libprotected-data-2b.so\" \\\n+\t    \"-Wa,-mx86-used-note=yes\" \\\n+\t    { protected-data-2b.S } \\\n+\t    \"protected-data-2c\" \\\n+\t    \"pass.out\" \\\n+\t    \"$NOPIE_CFLAGS\" \\\n+\t] \\\n+\t[list \\\n+\t    \"Run protected-data-2d with PIE\" \\\n+\t    \"-Wl,--no-as-needed -pie tmpdir/libprotected-data-2b.so\" \\\n+\t    \"-Wa,-mx86-used-note=yes\" \\\n+\t    { protected-data-2b.S } \\\n+\t    \"protected-data-2d\" \\\n+\t    \"pass.out\" \\\n+\t    \"-fPIE\" \\\n+\t] \\\n     ]\n \n     # Run-time tests which require working ifunc attribute support."
    }
  ]
}