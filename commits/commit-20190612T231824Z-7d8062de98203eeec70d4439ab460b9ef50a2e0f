{
  "sha": "7d8062de98203eeec70d4439ab460b9ef50a2e0f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2Q4MDYyZGU5ODIwM2VlZWM3MGQ0NDM5YWI0NjBiOWVmNTBhMmUwZg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:06:53Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:18:24Z"
    },
    "message": "Make \"print\" and \"compile print\" support -OPT options\n\nThis patch adds support for \"print -option optval --\", etc.\nLikewise for \"compile print\".\n\nWe'll get:\n\n~~~~~~\n(gdb) help print\nPrint value of expression EXP.\nUsage: print [[OPTION]... --] [/FMT] [EXP]\n\nOptions:\n  -address [on|off]\n    Set printing of addresses.\n\n  -array [on|off]\n    Set pretty formatting of arrays.\n\n  -array-indexes [on|off]\n    Set printing of array indexes.\n\n  -elements NUMBER|unlimited\n    Set limit on string chars or array elements to print.\n    \"unlimited\" causes there to be no limit.\n\n  -max-depth NUMBER|unlimited\n    Set maximum print depth for nested structures, unions and arrays.\n    When structures, unions, or arrays are nested beyond this depth then they\n    will be replaced with either '{...}' or '(...)' depending on the language.\n    Use \"unlimited\" to print the complete structure.\n\n  -null-stop [on|off]\n    Set printing of char arrays to stop at first null char.\n\n  -object [on|off]\n    Set printing of C++ virtual function tables.\n\n  -pretty [on|off]\n    Set pretty formatting of structures.\n\n  -repeats NUMBER|unlimited\n    Set threshold for repeated print elements.\n    \"unlimited\" causes all elements to be individually printed.\n\n  -static-members [on|off]\n    Set printing of C++ static members.\n\n  -symbol [on|off]\n    Set printing of symbol names when printing pointers.\n\n  -union [on|off]\n    Set printing of unions interior to structures.\n\n  -vtbl [on|off]\n    Set printing of C++ virtual function tables.\n\nNote: because this command accepts arbitrary expressions, if you\nspecify any command option, you must use a double dash (\"--\")\nto mark the end of option processing.  E.g.: \"print -o -- myobj\".\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nI want to highlight the comment above about \"--\".\n\nAt first, I thought we could make the print command parse the options,\nand if the option wasn't recognized, fallback to parsing as an\nexpression.  Then, if the user wanted to disambiguate, he'd use the\n\"--\" option delimiter.  For example, if you had a variable called\n\"object\" and you wanted to print its negative, you'd have to do:\n\n  (gdb) print -- -object\n\nAfter getting that working, I saw that gdb.pascal/floats.exp\nregressed, in these tests:\n\n gdb_test \"print -r\" \" = -1\\\\.2(499.*|5|500.*)\"\n gdb_test \"print -(r)\" \" = -1.2(499.*|5|500.*)\"\n gdb_test \"print -(r + s)\" \" = -3\\\\.4(499.*|5|500.*)\"\n\nIt's the first one that I found most concerning.  It regressed because\n\"-r\" is the abbreviation of \"-raw\".  I realized then that the behavior\nchange was a bit risker than I'd like, considering scripts, wrappers\naround gdb, etc., and even user expectation.  So instead, I made the\nprint command _require_ the \"--\" options delimiter if you want to\nspecify any option.  So:\n\n  (gdb) print -r\n\nis parsed as an expression, and\n\n  (gdb) print -r --\n\nis parsed as an option.\n\nI noticed that that's also what lldb's expr (the equivalent of print)\ndoes to handle the same problem.\n\nGoing back the options themselves, note that:\n\n - you can shorten option names, as long as unambiguous.\n - For boolean options, 0/1 stand for off/on.\n - For boolean options, \"true\" is implied.\n\nSo these are all equivalent:\n\n (gdb) print -object on -static-members off -pretty on -- foo\n (gdb) print -object -static-members off -pretty -- foo\n (gdb) print -object -static-members 0 -pretty -- foo\n (gdb) print -o -st 0 -p -- foo\n\nTAB completion is fully supported:\n\n  (gdb) p -[TAB]\n  -address         -elements        -pretty          -symbol\n  -array           -null-stop       -repeats         -union\n  -array-indexes   -object          -static-members  -vtbl\n\nNote that the code is organized such that some of the options and the\n\"set/show\" commands code is shared.  In particular, the \"print\"\noptions and the corresponding \"set print\" commands are defined with\nthe same structures.  The commands are installed with the\ngdb::option::add_setshow_cmds_for_options function.\n\ngdb/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* compile/compile.c: Include \"cli/cli-option.h\".\n\t(compile_print_value): Scope data pointer is now a\n\tvalue_print_options pointer; adjust.\n\t(compile_print_command): Process options.  Scope data pointer is\n\tnow a value_print_options pointer; adjust.\n\t(_initialize_compile): Update \"compile print\"'s help to include\n\tsupported options.  Install a completer for \"compile print\".\n\t* cp-valprint.c (show_vtblprint, show_objectprint)\n\t(show_static_field_print): Delete.\n\t(_initialize_cp_valprint): Don't install \"set print\n\tstatic-members\", \"set print vtbl\", \"set print object\" here.\n\t* printcmd.c: Include \"cli/cli-option.h\" and\n\t\"common/gdb_optional.h\".\n\t(print_command_parse_format): Rework to fill in a\n\tvalue_print_options instead of a format_data.\n\t(print_value): Change parameter type from format_data pointer to\n\tvalue_print_options reference.  Adjust.\n\t(print_command_1): Process options.  Adjust to pass down a\n\tvalue_print_options.\n\t(print_command_completer): New.\n\t(_initialize_printcmd): Install print_command_completer as\n\thandle_brkchars completer for the \"print\" command.  Update\n\t\"print\"'s help to include supported options.\n\t* valprint.c: Include \"cli/cli-option.h\".\n\t(show_vtblprint, show_objectprint, show_static_field_print): Moved\n\there from cp-valprint.c.\n\t(boolean_option_def, uinteger_option_def)\n\t(value_print_option_defs, make_value_print_options_def_group):\n\tNew.  Use gdb::option::add_setshow_cmds_for_options to install\n\t\"set print elements\", \"set print null-stop\", \"set print repeats\",\n\t\"set print pretty\", \"set print union\", \"set print array\", \"set\n\tprint address\", \"set print symbol\", \"set print array-indexes\".\n\t* valprint.h: Include <string> and \"cli/cli-option.h\".\n\t(make_value_print_options_def_group): Declare.\n\t(print_value): Change parameter type from format_data pointer to\n\tvalue_print_options reference.\n\t(print_command_completer): Declare.\n\ngdb/testsuite/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.base/options.exp: Build executable.\n\t(test-print): New procedure.\n\t(top level): Call it, once for \"print\" and another for \"compile\n\tprint\".",
    "tree": {
      "sha": "3ac498d1e7a836b503e4a178ca35062255986f09",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3ac498d1e7a836b503e4a178ca35062255986f09"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7d8062de98203eeec70d4439ab460b9ef50a2e0f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7d8062de98203eeec70d4439ab460b9ef50a2e0f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7d8062de98203eeec70d4439ab460b9ef50a2e0f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7d8062de98203eeec70d4439ab460b9ef50a2e0f/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9d0faba9f52b898f0be539bc4d6fbd084772259d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d0faba9f52b898f0be539bc4d6fbd084772259d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9d0faba9f52b898f0be539bc4d6fbd084772259d"
    }
  ],
  "stats": {
    "total": 645,
    "additions": 463,
    "deletions": 182
  },
  "files": [
    {
      "sha": "8ac2eaa6277dda1d70e422c0dd67eb1816c52bdc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7d8062de98203eeec70d4439ab460b9ef50a2e0f",
      "patch": "@@ -1,3 +1,43 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* compile/compile.c: Include \"cli/cli-option.h\".\n+\t(compile_print_value): Scope data pointer is now a\n+\tvalue_print_options pointer; adjust.\n+\t(compile_print_command): Process options.  Scope data pointer is\n+\tnow a value_print_options pointer; adjust.\n+\t(_initialize_compile): Update \"compile print\"'s help to include\n+\tsupported options.  Install a completer for \"compile print\".\n+\t* cp-valprint.c (show_vtblprint, show_objectprint)\n+\t(show_static_field_print): Delete.\n+\t(_initialize_cp_valprint): Don't install \"set print\n+\tstatic-members\", \"set print vtbl\", \"set print object\" here.\n+\t* printcmd.c: Include \"cli/cli-option.h\" and\n+\t\"common/gdb_optional.h\".\n+\t(print_command_parse_format): Rework to fill in a\n+\tvalue_print_options instead of a format_data.\n+\t(print_value): Change parameter type from format_data pointer to\n+\tvalue_print_options reference.  Adjust.\n+\t(print_command_1): Process options.  Adjust to pass down a\n+\tvalue_print_options.\n+\t(print_command_completer): New.\n+\t(_initialize_printcmd): Install print_command_completer as\n+\thandle_brkchars completer for the \"print\" command.  Update\n+\t\"print\"'s help to include supported options.\n+\t* valprint.c: Include \"cli/cli-option.h\".\n+\t(show_vtblprint, show_objectprint, show_static_field_print): Moved\n+\there from cp-valprint.c.\n+\t(boolean_option_def, uinteger_option_def)\n+\t(value_print_option_defs, make_value_print_options_def_group):\n+\tNew.  Use gdb::option::add_setshow_cmds_for_options to install\n+\t\"set print elements\", \"set print null-stop\", \"set print repeats\",\n+\t\"set print pretty\", \"set print union\", \"set print array\", \"set\n+\tprint address\", \"set print symbol\", \"set print array-indexes\".\n+\t* valprint.h: Include <string> and \"cli/cli-option.h\".\n+\t(make_value_print_options_def_group): Declare.\n+\t(print_value): Change parameter type from format_data pointer to\n+\tvalue_print_options reference.\n+\t(print_command_completer): Declare.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* Makefile.in (SUBDIR_CLI_SRCS): Add cli/cli-option.c."
    },
    {
      "sha": "6693809cf4f9f3bd27a6b606239d988c22be1c29",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 34,
      "deletions": 12,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=7d8062de98203eeec70d4439ab460b9ef50a2e0f",
      "patch": "@@ -23,6 +23,7 @@\n #include \"command.h\"\n #include \"cli/cli-script.h\"\n #include \"cli/cli-utils.h\"\n+#include \"cli/cli-option.h\"\n #include \"completer.h\"\n #include \"gdbcmd.h\"\n #include \"compile.h\"\n@@ -328,9 +329,9 @@ compile_code_command (const char *arg, int from_tty)\n void\n compile_print_value (struct value *val, void *data_voidp)\n {\n-  const struct format_data *fmtp = (const struct format_data *) data_voidp;\n+  const value_print_options *print_opts = (value_print_options *) data_voidp;\n \n-  print_value (val, fmtp);\n+  print_value (val, *print_opts);\n }\n \n /* Handle the input from the 'compile print' command.  The \"compile\n@@ -342,22 +343,30 @@ static void\n compile_print_command (const char *arg, int from_tty)\n {\n   enum compile_i_scope_types scope = COMPILE_I_PRINT_ADDRESS_SCOPE;\n-  struct format_data fmt;\n+  value_print_options print_opts;\n \n   scoped_restore save_async = make_scoped_restore (&current_ui->async, 0);\n \n-  /* Passing &FMT as SCOPE_DATA is safe as do_module_cleanup will not\n-     touch the stale pointer if compile_object_run has already quit.  */\n-  print_command_parse_format (&arg, \"compile print\", &fmt);\n+  get_user_print_options (&print_opts);\n+  /* Override global settings with explicit options, if any.  */\n+  auto group = make_value_print_options_def_group (&print_opts);\n+  gdb::option::process_options\n+    (&arg, gdb::option::PROCESS_OPTIONS_REQUIRE_DELIMITER, group);\n+\n+  print_command_parse_format (&arg, \"compile print\", &print_opts);\n+\n+  /* Passing &PRINT_OPTS as SCOPE_DATA is safe as do_module_cleanup\n+     will not touch the stale pointer if compile_object_run has\n+     already quit.  */\n \n   if (arg && *arg)\n-    eval_compile_command (NULL, arg, scope, &fmt);\n+    eval_compile_command (NULL, arg, scope, &print_opts);\n   else\n     {\n       counted_command_line l = get_command_line (compile_control, \"\");\n \n       l->control_u.compile.scope = scope;\n-      l->control_u.compile.scope_data = &fmt;\n+      l->control_u.compile.scope_data = &print_opts;\n       execute_control_command_untraced (l.get ());\n     }\n }\n@@ -946,11 +955,19 @@ Usage: compile file [-r|-raw] [FILENAME]\\n\\\n \t       &compile_command_list);\n   set_cmd_completer (c, filename_completer);\n \n-  add_cmd (\"print\", class_obscure, compile_print_command,\n-\t   _(\"\\\n+  const auto compile_print_opts = make_value_print_options_def_group (nullptr);\n+\n+  static const std::string compile_print_help\n+    = gdb::option::build_help (N_(\"\\\n Evaluate EXPR by using the compiler and print result.\\n\\\n \\n\\\n-Usage: compile print[/FMT] [EXPR]\\n\\\n+Usage: compile print [[OPTION]... --] [/FMT] [EXPR]\\n\\\n+\\n\\\n+Options:\\n\\\n+%OPTIONS%\\\n+Note: because this command accepts arbitrary expressions, if you\\n\\\n+specify any command option, you must use a double dash (\\\"--\\\")\\n\\\n+to mark the end of option processing.  E.g.: \\\"compile print -o -- myobj\\\".\\n\\\n \\n\\\n The expression may be specified on the same line as the command, e.g.:\\n\\\n \\n\\\n@@ -963,7 +980,12 @@ indicate the end of the expression.\\n\\\n \\n\\\n EXPR may be preceded with /FMT, where FMT is a format letter\\n\\\n but no count or size letter (see \\\"x\\\" command).\"),\n-\t   &compile_command_list);\n+\t\t\t       compile_print_opts);\n+\n+  c = add_cmd (\"print\", class_obscure, compile_print_command,\n+\t       compile_print_help.c_str (),\n+\t       &compile_command_list);\n+  set_cmd_completer_handle_brkchars (c, print_command_completer);\n \n   add_setshow_boolean_cmd (\"compile\", class_maintenance, &compile_debug, _(\"\\\n Set compile command debugging.\"), _(\"\\"
    },
    {
      "sha": "5781d7ab56141aab72e4e0c477a544ef42c089ed",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 0,
      "deletions": 57,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=7d8062de98203eeec70d4439ab460b9ef50a2e0f",
      "patch": "@@ -37,39 +37,6 @@\n #include \"typeprint.h\"\n #include \"common/byte-vector.h\"\n \n-/* Controls printing of vtbl's.  */\n-static void\n-show_vtblprint (struct ui_file *file, int from_tty,\n-\t\tstruct cmd_list_element *c, const char *value)\n-{\n-  fprintf_filtered (file, _(\"\\\n-Printing of C++ virtual function tables is %s.\\n\"),\n-\t\t    value);\n-}\n-\n-/* Controls looking up an object's derived type using what we find in\n-   its vtables.  */\n-static void\n-show_objectprint (struct ui_file *file, int from_tty,\n-\t\t  struct cmd_list_element *c,\n-\t\t  const char *value)\n-{\n-  fprintf_filtered (file, _(\"\\\n-Printing of object's derived type based on vtable info is %s.\\n\"),\n-\t\t    value);\n-}\n-\n-static void\n-show_static_field_print (struct ui_file *file, int from_tty,\n-\t\t\t struct cmd_list_element *c,\n-\t\t\t const char *value)\n-{\n-  fprintf_filtered (file,\n-\t\t    _(\"Printing of C++ static members is %s.\\n\"),\n-\t\t    value);\n-}\n-\n-\n static struct obstack dont_print_vb_obstack;\n static struct obstack dont_print_statmem_obstack;\n static struct obstack dont_print_stat_array_obstack;\n@@ -821,30 +788,6 @@ cp_print_class_member (const gdb_byte *valaddr, struct type *type,\n void\n _initialize_cp_valprint (void)\n {\n-  add_setshow_boolean_cmd (\"static-members\", class_support,\n-\t\t\t   &user_print_options.static_field_print, _(\"\\\n-Set printing of C++ static members.\"), _(\"\\\n-Show printing of C++ static members.\"), NULL,\n-\t\t\t   NULL,\n-\t\t\t   show_static_field_print,\n-\t\t\t   &setprintlist, &showprintlist);\n-\n-  add_setshow_boolean_cmd (\"vtbl\", class_support,\n-\t\t\t   &user_print_options.vtblprint, _(\"\\\n-Set printing of C++ virtual function tables.\"), _(\"\\\n-Show printing of C++ virtual function tables.\"), NULL,\n-\t\t\t   NULL,\n-\t\t\t   show_vtblprint,\n-\t\t\t   &setprintlist, &showprintlist);\n-\n-  add_setshow_boolean_cmd (\"object\", class_support,\n-\t\t\t   &user_print_options.objectprint, _(\"\\\n-Set printing of object's derived type based on vtable info.\"), _(\"\\\n-Show printing of object's derived type based on vtable info.\"), NULL,\n-\t\t\t   NULL,\n-\t\t\t   show_objectprint,\n-\t\t\t   &setprintlist, &showprintlist);\n-\n   obstack_begin (&dont_print_stat_array_obstack,\n \t\t 32 * sizeof (struct type *));\n   obstack_begin (&dont_print_statmem_obstack,"
    },
    {
      "sha": "0509360581eaf54418e3fbd82015eb1f2421ee97",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 64,
      "deletions": 30,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=7d8062de98203eeec70d4439ab460b9ef50a2e0f",
      "patch": "@@ -45,11 +45,13 @@\n #include \"charset.h\"\n #include \"arch-utils.h\"\n #include \"cli/cli-utils.h\"\n+#include \"cli/cli-option.h\"\n #include \"cli/cli-script.h\"\n #include \"cli/cli-style.h\"\n #include \"common/format.h\"\n #include \"source.h\"\n #include \"common/byte-vector.h\"\n+#include \"common/gdb_optional.h\"\n \n /* Last specified output format.  */\n \n@@ -1117,40 +1119,41 @@ validate_format (struct format_data fmt, const char *cmdname)\n \t   fmt.format, cmdname);\n }\n \n-/* Parse print command format string into *FMTP and update *EXPP.\n+/* Parse print command format string into *OPTS and update *EXPP.\n    CMDNAME should name the current command.  */\n \n void\n print_command_parse_format (const char **expp, const char *cmdname,\n-\t\t\t    struct format_data *fmtp)\n+\t\t\t    value_print_options *opts)\n {\n   const char *exp = *expp;\n \n   if (exp && *exp == '/')\n     {\n+      format_data fmt;\n+\n       exp++;\n-      *fmtp = decode_format (&exp, last_format, 0);\n-      validate_format (*fmtp, cmdname);\n-      last_format = fmtp->format;\n+      fmt = decode_format (&exp, last_format, 0);\n+      validate_format (fmt, cmdname);\n+      last_format = fmt.format;\n+\n+      opts->format = fmt.format;\n+      opts->raw = fmt.raw;\n     }\n   else\n     {\n-      fmtp->count = 1;\n-      fmtp->format = 0;\n-      fmtp->size = 0;\n-      fmtp->raw = 0;\n+      opts->format = 0;\n+      opts->raw = 0;\n     }\n \n   *expp = exp;\n }\n \n-/* Print VAL to console according to *FMTP, including recording it to\n-   the history.  */\n+/* See valprint.h.  */\n \n void\n-print_value (struct value *val, const struct format_data *fmtp)\n+print_value (value *val, const value_print_options &opts)\n {\n-  struct value_print_options opts;\n   int histindex = record_latest_value (val);\n \n   annotate_value_history_begin (histindex, value_type (val));\n@@ -1159,28 +1162,31 @@ print_value (struct value *val, const struct format_data *fmtp)\n \n   annotate_value_history_value ();\n \n-  get_formatted_print_options (&opts, fmtp->format);\n-  opts.raw = fmtp->raw;\n-\n-  print_formatted (val, fmtp->size, &opts, gdb_stdout);\n+  print_formatted (val, 0, &opts, gdb_stdout);\n   printf_filtered (\"\\n\");\n \n   annotate_value_history_end ();\n }\n \n-/* Evaluate string EXP as an expression in the current language and\n-   print the resulting value.  EXP may contain a format specifier as the\n-   first argument (\"/x myvar\" for example, to print myvar in hex).  */\n+/* Implementation of the \"print\" and \"call\" commands.  */\n \n static void\n-print_command_1 (const char *exp, int voidprint)\n+print_command_1 (const char *args, int voidprint)\n {\n   struct value *val;\n-  struct format_data fmt;\n+  value_print_options print_opts;\n+\n+  get_user_print_options (&print_opts);\n+  /* Override global settings with explicit options, if any.  */\n+  auto group = make_value_print_options_def_group (&print_opts);\n+  gdb::option::process_options\n+    (&args, gdb::option::PROCESS_OPTIONS_REQUIRE_DELIMITER, group);\n+\n+  print_command_parse_format (&args, \"print\", &print_opts);\n \n-  print_command_parse_format (&exp, \"print\", &fmt);\n+  const char *exp = args;\n \n-  if (exp && *exp)\n+  if (exp != nullptr && *exp)\n     {\n       expression_up expr = parse_expression (exp);\n       val = evaluate_expression (expr.get ());\n@@ -1190,7 +1196,23 @@ print_command_1 (const char *exp, int voidprint)\n \n   if (voidprint || (val && value_type (val) &&\n \t\t    TYPE_CODE (value_type (val)) != TYPE_CODE_VOID))\n-    print_value (val, &fmt);\n+    print_value (val, print_opts);\n+}\n+\n+/* See valprint.h.  */\n+\n+void\n+print_command_completer (struct cmd_list_element *ignore,\n+\t\t\t completion_tracker &tracker,\n+\t\t\t const char *text, const char * /*word*/)\n+{\n+  const auto group = make_value_print_options_def_group (nullptr);\n+  if (gdb::option::complete_options\n+      (tracker, &text, gdb::option::PROCESS_OPTIONS_REQUIRE_DELIMITER, group))\n+    return;\n+\n+  const char *word = advance_to_expression_complete_word_point (tracker, text);\n+  expression_completer (ignore, tracker, text, word);\n }\n \n static void\n@@ -2761,7 +2783,7 @@ Usage: call EXP\\n\\\n The argument is the function name and arguments, in the notation of the\\n\\\n current working language.  The result is printed and saved in the value\\n\\\n history, if it is not void.\"));\n-  set_cmd_completer (c, expression_completer);\n+  set_cmd_completer_handle_brkchars (c, print_command_completer);\n \n   add_cmd (\"variable\", class_vars, set_command, _(\"\\\n Evaluate expression EXP and assign result to variable VAR\\n\\\n@@ -2775,9 +2797,18 @@ This may usually be abbreviated to simply \\\"set\\\".\"),\n \t   &setlist);\n   add_alias_cmd (\"var\", \"variable\", class_vars, 0, &setlist);\n \n-  c = add_com (\"print\", class_vars, print_command, _(\"\\\n+  const auto print_opts = make_value_print_options_def_group (nullptr);\n+\n+  static const std::string print_help = gdb::option::build_help (N_(\"\\\n Print value of expression EXP.\\n\\\n-Usage: print[/FMT] EXP\\n\\\n+Usage: print [[OPTION]... --] [/FMT] [EXP]\\n\\\n+\\n\\\n+Options:\\n\\\n+%OPTIONS%\\\n+Note: because this command accepts arbitrary expressions, if you\\n\\\n+specify any command option, you must use a double dash (\\\"--\\\")\\n\\\n+to mark the end of option processing.  E.g.: \\\"print -o -- myobj\\\".\\n\\\n+\\n\\\n Variables accessible are those of the lexical environment of the selected\\n\\\n stack frame, plus all those whose scope is global or an entire file.\\n\\\n \\n\\\n@@ -2797,8 +2828,11 @@ where FOO is stored, etc.  FOO must be an expression whose value\\n\\\n resides in memory.\\n\\\n \\n\\\n EXP may be preceded with /FMT, where FMT is a format letter\\n\\\n-but no count or size letter (see \\\"x\\\" command).\"));\n-  set_cmd_completer (c, expression_completer);\n+but no count or size letter (see \\\"x\\\" command).\"),\n+\t\t\t\t\t      print_opts);\n+\n+  c = add_com (\"print\", class_vars, print_command, print_help.c_str ());\n+  set_cmd_completer_handle_brkchars (c, print_command_completer);\n   add_com_alias (\"p\", \"print\", class_vars, 1);\n   add_com_alias (\"inspect\", \"print\", class_vars, 1);\n "
    },
    {
      "sha": "d4bf5452293766cb1aecd9a45f2ea77b51fcd42e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7d8062de98203eeec70d4439ab460b9ef50a2e0f",
      "patch": "@@ -1,3 +1,10 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.base/options.exp: Build executable.\n+\t(test-print): New procedure.\n+\t(top level): Call it, once for \"print\" and another for \"compile\n+\tprint\".\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.base/options.c: New file."
    },
    {
      "sha": "3b4e7ee189f4c0e5e2535aadefa22d3140d6967e",
      "filename": "gdb/testsuite/gdb.base/options.exp",
      "status": "modified",
      "additions": 122,
      "deletions": 0,
      "changes": 122,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/testsuite/gdb.base/options.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/testsuite/gdb.base/options.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/options.exp?ref=7d8062de98203eeec70d4439ab460b9ef50a2e0f",
      "patch": "@@ -19,9 +19,18 @@\n \n # The test uses the \"maintenance test-options\" subcommands to exercise\n # TAB-completion and option processing.\n+#\n+# It also tests option integration in various commands, including\n+# \"print\" and \"compile print\".\n \n load_lib completion-support.exp\n \n+standard_testfile .c\n+\n+if {[build_executable \"failed to prepare\" $testfile $srcfile debug]} {\n+    return -1\n+}\n+\n clean_restart\n \n if { ![readline_is_used] } {\n@@ -117,6 +126,111 @@ set all_options {\n     \"-zuinteger-unlimited\"\n }\n \n+# Basic option-machinery + \"print\" command integration tests.\n+proc_with_prefix test-print {{prefix \"\"}} {\n+    clean_restart\n+\n+    # Completing \"print\" with no argument completes on symbols only,\n+    # no options are offered.  Since we haven't loaded any symbols,\n+    # the match list should be empty.\n+    test_gdb_complete_none \"${prefix}print \"\n+\n+    # OTOH, completing at \"-\" should list all options.\n+    test_gdb_complete_multiple \"${prefix}print \" \"-\" \"\" {\n+\t\"-address\"\n+\t\"-array\"\n+\t\"-array-indexes\"\n+\t\"-elements\"\n+\t\"-max-depth\"\n+\t\"-null-stop\"\n+\t\"-object\"\n+\t\"-pretty\"\n+\t\"-repeats\"\n+\t\"-static-members\"\n+\t\"-symbol\"\n+\t\"-union\"\n+\t\"-vtbl\"\n+    }\n+\n+    global binfile\n+    clean_restart $binfile\n+\n+    if ![runto_main] {\n+\tfail \"cannot run to main\"\n+\treturn\n+    }\n+\n+    # Mix options and format.\n+    gdb_test \"${prefix}print -pretty -- /x 1\" \" = 0x1\"\n+\n+    # Smoke test that options actually work.\n+    gdb_test \"${prefix}print -pretty -- g_s\" \\\n+\t[multi_line  \\\n+\t     \" = {\" \\\n+\t     \"  a = 1,\" \\\n+\t     \"  b = 2,\" \\\n+\t     \"  c = 3\" \\\n+\t     \"}\"]\n+\n+    test_gdb_complete_unique \\\n+\t\"${prefix}print xxx\" \\\n+\t\"${prefix}print xxx1\"\n+    test_gdb_complete_unique \\\n+\t\"${prefix}print -- xxx\" \\\n+\t\"${prefix}print -- xxx1\"\n+\n+    # Error messages when testing with \"compile\" are different from\n+    # the error messages gdb's internal parser throws.  This procedure\n+    # hides the difference.  EXPECTED_RE is only considered when not\n+    # testing with \"compile\".\n+    proc test_invalid_expression {cmd expected_re} {\n+\tupvar prefix prefix\n+\n+\tif {$prefix != \"compile \"} {\n+\t    gdb_test $cmd $expected_re\n+\t} else {\n+\t    # Error messages depend on compiler version, so we just\n+\t    # look for the last line indicating a failure.\n+\t    gdb_test $cmd \"Compilation failed\\\\.\"\n+\t}\n+    }\n+\n+    # Check that '-XXX' without a \"--\" is handled as an\n+    # expression.\n+    gdb_test \"${prefix}print -1\" \" = -1\"\n+    test_invalid_expression \\\n+\t\"${prefix}print --1\" \\\n+\t\"Left operand of assignment is not an lvalue\\\\.\"\n+    test_invalid_expression \\\n+\t\"${prefix}print -object\" \\\n+\t\"No symbol \\\"object\\\".*\"\n+\n+    # Test printing with options and no expression.\n+    set test \"${prefix}print -object --\"\n+    if {$prefix != \"compile \"} {\n+\t# Regular \"print\" repeats the last history value.\n+\tgdb_test $test \" = -1\"\n+    } else {\n+\t# \"compile print\" starts a multiline expression.\n+\tgdb_test_multiple $test $test {\n+\t    -re \">$\" {\n+\t\tgdb_test \"-1\\nend\" \" = -1\" \\\n+\t\t    $test\n+\t    }\n+\t}\n+    }\n+\n+    # Check that everything after \"-- \" is treated as an\n+    # expression, not confused with an option.\n+    test_invalid_expression \\\n+\t\"${prefix}print -- -address\" \\\n+\t\"No symbol.*\"\n+    gdb_test \"${prefix}print -- -1\" \" = -1\"\n+    test_invalid_expression \\\n+\t\"${prefix}print -- --1\" \\\n+\t\"Left operand of assignment is not an lvalue\\\\.\"\n+}\n+\n # Miscellaneous tests.\n proc_with_prefix test-misc {variant} {\n     global all_options\n@@ -552,3 +666,11 @@ foreach_with_prefix cmd {\n     }\n     test-enum $cmd\n }\n+\n+# Run the print integration tests.\n+test-print \"\"\n+\n+# Same for \"compile print\".\n+if ![skip_compile_feature_tests] {\n+    test-print \"compile \"\n+}"
    },
    {
      "sha": "e3197e69192a0becbcc5a8d2d6624ea4cc866594",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 178,
      "deletions": 81,
      "changes": 259,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=7d8062de98203eeec70d4439ab460b9ef50a2e0f",
      "patch": "@@ -36,6 +36,7 @@\n #include <ctype.h>\n #include <algorithm>\n #include \"common/byte-vector.h\"\n+#include \"cli/cli-option.h\"\n \n /* Maximum number of wchars returned from wchar_iterate.  */\n #define MAX_WCHARS 4\n@@ -3069,7 +3070,181 @@ show_print_raw (const char *args, int from_tty)\n   cmd_show_list (showprintrawlist, from_tty, \"\");\n }\n \n+/* Controls printing of vtbl's.  */\n+static void\n+show_vtblprint (struct ui_file *file, int from_tty,\n+\t\tstruct cmd_list_element *c, const char *value)\n+{\n+  fprintf_filtered (file, _(\"\\\n+Printing of C++ virtual function tables is %s.\\n\"),\n+\t\t    value);\n+}\n+\n+/* Controls looking up an object's derived type using what we find in\n+   its vtables.  */\n+static void\n+show_objectprint (struct ui_file *file, int from_tty,\n+\t\t  struct cmd_list_element *c,\n+\t\t  const char *value)\n+{\n+  fprintf_filtered (file, _(\"\\\n+Printing of object's derived type based on vtable info is %s.\\n\"),\n+\t\t    value);\n+}\n+\n+static void\n+show_static_field_print (struct ui_file *file, int from_tty,\n+\t\t\t struct cmd_list_element *c,\n+\t\t\t const char *value)\n+{\n+  fprintf_filtered (file,\n+\t\t    _(\"Printing of C++ static members is %s.\\n\"),\n+\t\t    value);\n+}\n+\n \f\n+\n+/* A couple typedefs to make writing the options a bit more\n+   convenient.  */\n+using boolean_option_def\n+  = gdb::option::boolean_option_def<value_print_options>;\n+using uinteger_option_def\n+  = gdb::option::uinteger_option_def<value_print_options>;\n+using zuinteger_unlimited_option_def\n+  = gdb::option::zuinteger_unlimited_option_def<value_print_options>;\n+\n+/* Definions of options for the \"print\" and \"compile print\"\n+   commands.  */\n+static const gdb::option::option_def value_print_option_defs[] = {\n+\n+  boolean_option_def {\n+    \"address\",\n+    [] (value_print_options *opt) { return &opt->addressprint; },\n+    show_addressprint, /* show_cmd_cb */\n+    N_(\"Set printing of addresses.\"),\n+    N_(\"Show printing of addresses.\"),\n+    NULL, /* help_doc */\n+  },\n+\n+  boolean_option_def {\n+    \"array\",\n+    [] (value_print_options *opt) { return &opt->prettyformat_arrays; },\n+    show_prettyformat_arrays, /* show_cmd_cb */\n+    N_(\"Set pretty formatting of arrays.\"),\n+    N_(\"Show pretty formatting of arrays.\"),\n+    NULL, /* help_doc */\n+  },\n+\n+  boolean_option_def {\n+    \"array-indexes\",\n+    [] (value_print_options *opt) { return &opt->print_array_indexes; },\n+    show_print_array_indexes, /* show_cmd_cb */\n+    N_(\"Set printing of array indexes.\"),\n+    N_(\"Show printing of array indexes\"),\n+    NULL, /* help_doc */\n+  },\n+\n+  uinteger_option_def {\n+    \"elements\",\n+    [] (value_print_options *opt) { return &opt->print_max; },\n+    show_print_max, /* show_cmd_cb */\n+    N_(\"Set limit on string chars or array elements to print.\"),\n+    N_(\"Show limit on string chars or array elements to print.\"),\n+    N_(\"\\\"unlimited\\\" causes there to be no limit.\"),\n+  },\n+\n+  zuinteger_unlimited_option_def {\n+    \"max-depth\",\n+    [] (value_print_options *opt) { return &opt->max_depth; },\n+    show_print_max_depth, /* show_cmd_cb */\n+    N_(\"Set maximum print depth for nested structures, unions and arrays.\"),\n+    N_(\"Show maximum print depth for nested structures, unions, and arrays.\"),\n+    N_(\"When structures, unions, or arrays are nested beyond this depth then they\\n\\\n+will be replaced with either '{...}' or '(...)' depending on the language.\\n\\\n+Use \\\"unlimited\\\" to print the complete structure.\")\n+  },\n+\n+  boolean_option_def {\n+    \"null-stop\",\n+    [] (value_print_options *opt) { return &opt->stop_print_at_null; },\n+    show_stop_print_at_null, /* show_cmd_cb */\n+    N_(\"Set printing of char arrays to stop at first null char.\"),\n+    N_(\"Show printing of char arrays to stop at first null char.\"),\n+    NULL, /* help_doc */\n+  },\n+\n+  boolean_option_def {\n+    \"object\",\n+    [] (value_print_options *opt) { return &opt->objectprint; },\n+    show_objectprint, /* show_cmd_cb */\n+    _(\"Set printing of C++ virtual function tables.\"),\n+    _(\"Show printing of C++ virtual function tables.\"),\n+    NULL, /* help_doc */\n+  },\n+\n+  boolean_option_def {\n+    \"pretty\",\n+    [] (value_print_options *opt) { return &opt->prettyformat_structs; },\n+    show_prettyformat_structs, /* show_cmd_cb */\n+    N_(\"Set pretty formatting of structures.\"),\n+    N_(\"Show pretty formatting of structures.\"),\n+    NULL, /* help_doc */\n+  },\n+\n+  uinteger_option_def {\n+    \"repeats\",\n+    [] (value_print_options *opt) { return &opt->repeat_count_threshold; },\n+    show_repeat_count_threshold, /* show_cmd_cb */\n+    N_(\"Set threshold for repeated print elements.\"),\n+    N_(\"Show threshold for repeated print elements.\"),\n+    N_(\"\\\"unlimited\\\" causes all elements to be individually printed.\"),\n+  },\n+\n+  boolean_option_def {\n+    \"static-members\",\n+    [] (value_print_options *opt) { return &opt->static_field_print; },\n+    show_static_field_print, /* show_cmd_cb */\n+    N_(\"Set printing of C++ static members.\"),\n+    N_(\"Show printing of C++ static members.\"),\n+    NULL, /* help_doc */\n+  },\n+\n+  boolean_option_def {\n+    \"symbol\",\n+    [] (value_print_options *opt) { return &opt->symbol_print; },\n+    show_symbol_print, /* show_cmd_cb */\n+    N_(\"Set printing of symbol names when printing pointers.\"),\n+    N_(\"Show printing of symbol names when printing pointers.\"),\n+    NULL, /* help_doc */\n+  },\n+\n+  boolean_option_def {\n+    \"union\",\n+    [] (value_print_options *opt) { return &opt->unionprint; },\n+    show_unionprint, /* show_cmd_cb */\n+    N_(\"Set printing of unions interior to structures.\"),\n+    N_(\"Show printing of unions interior to structures.\"),\n+    NULL, /* help_doc */\n+  },\n+\n+  boolean_option_def {\n+    \"vtbl\",\n+    [] (value_print_options *opt) { return &opt->vtblprint; },\n+    show_vtblprint, /* show_cmd_cb */\n+    N_(\"Set printing of C++ virtual function tables.\"),\n+    N_(\"Show printing of C++ virtual function tables.\"),\n+    NULL, /* help_doc */\n+  },\n+};\n+\n+/* See valprint.h.  */\n+\n+gdb::option::option_def_group\n+make_value_print_options_def_group (value_print_options *opts)\n+{\n+  return {{value_print_option_defs}, opts};\n+}\n+\n void\n _initialize_valprint (void)\n {\n@@ -3094,71 +3269,9 @@ Generic command for setting what things to print in \\\"raw\\\" mode.\"),\n \t\t  _(\"Generic command for showing \\\"print raw\\\" settings.\"),\n \t\t  &showprintrawlist, \"show print raw \", 0, &showprintlist);\n \n-  add_setshow_uinteger_cmd (\"elements\", no_class,\n-\t\t\t    &user_print_options.print_max, _(\"\\\n-Set limit on string chars or array elements to print.\"), _(\"\\\n-Show limit on string chars or array elements to print.\"), _(\"\\\n-\\\"set print elements unlimited\\\" causes there to be no limit.\"),\n-\t\t\t    NULL,\n-\t\t\t    show_print_max,\n-\t\t\t    &setprintlist, &showprintlist);\n-\n-  add_setshow_boolean_cmd (\"null-stop\", no_class,\n-\t\t\t   &user_print_options.stop_print_at_null, _(\"\\\n-Set printing of char arrays to stop at first null char.\"), _(\"\\\n-Show printing of char arrays to stop at first null char.\"), NULL,\n-\t\t\t   NULL,\n-\t\t\t   show_stop_print_at_null,\n-\t\t\t   &setprintlist, &showprintlist);\n-\n-  add_setshow_uinteger_cmd (\"repeats\", no_class,\n-\t\t\t    &user_print_options.repeat_count_threshold, _(\"\\\n-Set threshold for repeated print elements.\"), _(\"\\\n-Show threshold for repeated print elements.\"), _(\"\\\n-\\\"set print repeats unlimited\\\" causes all elements to be individually printed.\"),\n-\t\t\t    NULL,\n-\t\t\t    show_repeat_count_threshold,\n-\t\t\t    &setprintlist, &showprintlist);\n-\n-  add_setshow_boolean_cmd (\"pretty\", class_support,\n-\t\t\t   &user_print_options.prettyformat_structs, _(\"\\\n-Set pretty formatting of structures.\"), _(\"\\\n-Show pretty formatting of structures.\"), NULL,\n-\t\t\t   NULL,\n-\t\t\t   show_prettyformat_structs,\n-\t\t\t   &setprintlist, &showprintlist);\n-\n-  add_setshow_boolean_cmd (\"union\", class_support,\n-\t\t\t   &user_print_options.unionprint, _(\"\\\n-Set printing of unions interior to structures.\"), _(\"\\\n-Show printing of unions interior to structures.\"), NULL,\n-\t\t\t   NULL,\n-\t\t\t   show_unionprint,\n-\t\t\t   &setprintlist, &showprintlist);\n-\n-  add_setshow_boolean_cmd (\"array\", class_support,\n-\t\t\t   &user_print_options.prettyformat_arrays, _(\"\\\n-Set pretty formatting of arrays.\"), _(\"\\\n-Show pretty formatting of arrays.\"), NULL,\n-\t\t\t   NULL,\n-\t\t\t   show_prettyformat_arrays,\n-\t\t\t   &setprintlist, &showprintlist);\n-\n-  add_setshow_boolean_cmd (\"address\", class_support,\n-\t\t\t   &user_print_options.addressprint, _(\"\\\n-Set printing of addresses.\"), _(\"\\\n-Show printing of addresses.\"), NULL,\n-\t\t\t   NULL,\n-\t\t\t   show_addressprint,\n-\t\t\t   &setprintlist, &showprintlist);\n-\n-  add_setshow_boolean_cmd (\"symbol\", class_support,\n-\t\t\t   &user_print_options.symbol_print, _(\"\\\n-Set printing of symbol names when printing pointers.\"), _(\"\\\n-Show printing of symbol names when printing pointers.\"),\n-\t\t\t   NULL, NULL,\n-\t\t\t   show_symbol_print,\n-\t\t\t   &setprintlist, &showprintlist);\n+  gdb::option::add_setshow_cmds_for_options\n+    (class_support, &user_print_options, value_print_option_defs,\n+     &setprintlist, &showprintlist);\n \n   add_setshow_zuinteger_cmd (\"input-radix\", class_support, &input_radix_1,\n \t\t\t     _(\"\\\n@@ -3192,20 +3305,4 @@ Without an argument, sets both radices back to the default value of 10.\"),\n Show the default input and output number radices.\\n\\\n Use 'show input-radix' or 'show output-radix' to independently show each.\"),\n \t   &showlist);\n-\n-  add_setshow_boolean_cmd (\"array-indexes\", class_support,\n-                           &user_print_options.print_array_indexes, _(\"\\\n-Set printing of array indexes.\"), _(\"\\\n-Show printing of array indexes\"), NULL, NULL, show_print_array_indexes,\n-                           &setprintlist, &showprintlist);\n-\n-  add_setshow_zuinteger_unlimited_cmd (\"max-depth\", class_support,\n-                            &user_print_options.max_depth, _(\"\\\n-Set maximum print depth for nested structures, unions and arrays.\"), _(\"\\\n-Show maximum print depth for nested structures, unions, and arrays.\"), _(\"\\\n-When structures, unions, or arrays are nested beyond this depth then they\\n\\\n-will be replaced with either '{...}' or '(...)' depending on the language.\\n\\\n-Use 'set print max-depth unlimited' to print the complete structure.\"),\n-\t\t\t\t       NULL, show_print_max_depth,\n-\t\t\t\t       &setprintlist, &showprintlist);\n }"
    },
    {
      "sha": "987c534eaf4acac53951df3457c29e07dc2d2ebf",
      "filename": "gdb/valprint.h",
      "status": "modified",
      "additions": 18,
      "deletions": 2,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/valprint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7d8062de98203eeec70d4439ab460b9ef50a2e0f/gdb/valprint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.h?ref=7d8062de98203eeec70d4439ab460b9ef50a2e0f",
      "patch": "@@ -20,6 +20,8 @@\n #ifndef VALPRINT_H\n #define VALPRINT_H\n \n+#include \"cli/cli-option.h\"\n+\n /* This is used to pass formatting options to various value-printing\n    functions.  */\n struct value_print_options\n@@ -100,6 +102,11 @@ struct value_print_options\n   int finish_print;\n };\n \n+/* Create an option_def_group for the value_print options, with OPTS\n+   as context.  */\n+extern gdb::option::option_def_group make_value_print_options_def_group\n+  (value_print_options *opts);\n+\n /* The global print options set by the user.  In general this should\n    not be directly accessed, except by set/show commands.  Ordinary\n    code should call get_user_print_options instead.  */\n@@ -233,8 +240,17 @@ struct format_data\n   };\n \n extern void print_command_parse_format (const char **expp, const char *cmdname,\n-\t\t\t\t\tstruct format_data *fmtp);\n-extern void print_value (struct value *val, const struct format_data *fmtp);\n+\t\t\t\t\tvalue_print_options *opts);\n+\n+/* Print VAL to console according to OPTS, including recording it to\n+   the history.  */\n+extern void print_value (value *val, const value_print_options &opts);\n+\n+/* Completer for the \"print\", \"call\", and \"compile print\"\n+   commands.  */\n+extern void print_command_completer (struct cmd_list_element *ignore,\n+\t\t\t\t     completion_tracker &tracker,\n+\t\t\t\t     const char *text, const char *word);\n \n /* Given an address ADDR return all the elements needed to print the\n    address in a symbolic form.  NAME can be mangled or not depending"
    }
  ]
}