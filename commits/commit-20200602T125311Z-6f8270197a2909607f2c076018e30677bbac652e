{
  "sha": "6f8270197a2909607f2c076018e30677bbac652e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmY4MjcwMTk3YTI5MDk2MDdmMmMwNzYwMThlMzA2NzdiYmFjNjUyZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-05-13T17:04:30Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-02T12:53:11Z"
    },
    "message": "gdb: Convert language la_sniff_from_mangled_name field to a method\n\nThis commit changes the language_data::la_sniff_from_mangled_name\nfunction pointer member variable into a member function of\nlanguage_defn.\n\nPreviously the la_sniff_from_mangled_name pointer was NULL for some\nlanguages, however, all uses of this function pointer were through the\nfunction language_sniff_from_mangled_name which provided a default\nimplementation.\n\nThis default implementation now becomes the implementation in the base\nclass language_defn, which is then overridden as required in various\nlanguage sub-classes.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_sniff_from_mangled_name): Delete function,\n\timplementation moves to...\n\t(ada_language::sniff_from_mangled_name): ...here.  Update return\n\ttype.\n\t(ada_language_data): Delete la_sniff_from_mangled_name\n\tinitializer.\n\t* c-lang.c (c_language_data): Likewise.\n\t(cplus_language_data): Likewise.\n\t(cplus_language::sniff_from_mangled_name): New member function,\n\timplementation taken from gdb_sniff_from_mangled_name.\n\t(asm_language_data): Delete la_sniff_from_mangled_name\n\tinitializer.\n\t(minimal_language_data): Likewise.\n\t* cp-support.c (gdb_sniff_from_mangled_name): Delete,\n\timplementation moves to cplus_language::sniff_from_mangled_name.\n\t* cp-support.h (gdb_sniff_from_mangled_name): Delete declaration.\n\t* d-lang.c (d_sniff_from_mangled_name): Delete, implementation\n\tmoves to...\n\t(d_language::sniff_from_mangled_name): ...here.\n\t(d_language_data): Delete la_sniff_from_mangled_name initializer.\n\t* f-lang.c (f_language_data): Likewise.\n\t* go-lang.c (go_sniff_from_mangled_name): Delete, implementation\n\tmoves to...\n\t(go_language::sniff_from_mangled_name): ...here.\n\t(go_language_data): Delete la_sniff_from_mangled_name initializer.\n\t* language.c (language_sniff_from_mangled_name): Delete.\n\t(unknown_language_data): Delete la_sniff_from_mangled_name\n\tinitializer.\n\t(auto_language_data): Likewise.\n\t* language.h (language_data): Delete la_sniff_from_mangled_name\n\tfield.\n\t(language_defn::sniff_from_mangled_name): New function.\n\t(language_sniff_from_mangled_name): Delete declaration.\n\t* m2-lang.c (m2_language_data): Delete la_sniff_from_mangled_name\n\tfield.\n\t* objc-lang.c (objc_sniff_from_mangled_name): Delete,\n\timplementation moves to...\n\t(objc_language::sniff_from_mangled_name): ...here.\n\t(objc_language_data): Delete la_sniff_from_mangled_name initializer.\n\t* opencl-lang.c (opencl_language_data): Likewise.\n\t* p-lang.c (pascal_language_data): Likewise.\n\t* rust-lang.c (rust_sniff_from_mangled_name): Delete,\n\timplementation moves to...\n\t(rust_language::sniff_from_mangled_name): ...here.\n\t(rust_language_data): Delete la_sniff_from_mangled_name\n\tinitializer.\n\t* symtab.c (symbol_find_demangled_name): Call\n\tsniff_from_mangled_name member function.",
    "tree": {
      "sha": "890b5a01405272f8935e6daa508c7697f37c51c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/890b5a01405272f8935e6daa508c7697f37c51c6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6f8270197a2909607f2c076018e30677bbac652e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f8270197a2909607f2c076018e30677bbac652e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6f8270197a2909607f2c076018e30677bbac652e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f8270197a2909607f2c076018e30677bbac652e/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fb8006fd350ad9eba04c19904f9a0fcd47628b41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb8006fd350ad9eba04c19904f9a0fcd47628b41",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fb8006fd350ad9eba04c19904f9a0fcd47628b41"
    }
  ],
  "stats": {
    "total": 299,
    "additions": 152,
    "deletions": 147
  },
  "files": [
    {
      "sha": "46ca01139261eb5112de2ffe6f5d449c440d9ad5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -1,3 +1,54 @@\n+2020-06-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_sniff_from_mangled_name): Delete function,\n+\timplementation moves to...\n+\t(ada_language::sniff_from_mangled_name): ...here.  Update return\n+\ttype.\n+\t(ada_language_data): Delete la_sniff_from_mangled_name\n+\tinitializer.\n+\t* c-lang.c (c_language_data): Likewise.\n+\t(cplus_language_data): Likewise.\n+\t(cplus_language::sniff_from_mangled_name): New member function,\n+\timplementation taken from gdb_sniff_from_mangled_name.\n+\t(asm_language_data): Delete la_sniff_from_mangled_name\n+\tinitializer.\n+\t(minimal_language_data): Likewise.\n+\t* cp-support.c (gdb_sniff_from_mangled_name): Delete,\n+\timplementation moves to cplus_language::sniff_from_mangled_name.\n+\t* cp-support.h (gdb_sniff_from_mangled_name): Delete declaration.\n+\t* d-lang.c (d_sniff_from_mangled_name): Delete, implementation\n+\tmoves to...\n+\t(d_language::sniff_from_mangled_name): ...here.\n+\t(d_language_data): Delete la_sniff_from_mangled_name initializer.\n+\t* f-lang.c (f_language_data): Likewise.\n+\t* go-lang.c (go_sniff_from_mangled_name): Delete, implementation\n+\tmoves to...\n+\t(go_language::sniff_from_mangled_name): ...here.\n+\t(go_language_data): Delete la_sniff_from_mangled_name initializer.\n+\t* language.c (language_sniff_from_mangled_name): Delete.\n+\t(unknown_language_data): Delete la_sniff_from_mangled_name\n+\tinitializer.\n+\t(auto_language_data): Likewise.\n+\t* language.h (language_data): Delete la_sniff_from_mangled_name\n+\tfield.\n+\t(language_defn::sniff_from_mangled_name): New function.\n+\t(language_sniff_from_mangled_name): Delete declaration.\n+\t* m2-lang.c (m2_language_data): Delete la_sniff_from_mangled_name\n+\tfield.\n+\t* objc-lang.c (objc_sniff_from_mangled_name): Delete,\n+\timplementation moves to...\n+\t(objc_language::sniff_from_mangled_name): ...here.\n+\t(objc_language_data): Delete la_sniff_from_mangled_name initializer.\n+\t* opencl-lang.c (opencl_language_data): Likewise.\n+\t* p-lang.c (pascal_language_data): Likewise.\n+\t* rust-lang.c (rust_sniff_from_mangled_name): Delete,\n+\timplementation moves to...\n+\t(rust_language::sniff_from_mangled_name): ...here.\n+\t(rust_language_data): Delete la_sniff_from_mangled_name\n+\tinitializer.\n+\t* symtab.c (symbol_find_demangled_name): Call\n+\tsniff_from_mangled_name member function.\n+\n 2020-06-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_language_data): Delete la_search_name_hash"
    },
    {
      "sha": "6bfc0256b66700d514ccbb9d4f7f0df1ea8c7d00",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 38,
      "deletions": 40,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -1377,45 +1377,6 @@ ada_la_decode (const char *encoded, int options)\n   return xstrdup (ada_decode (encoded).c_str ());\n }\n \n-/* Implement la_sniff_from_mangled_name for Ada.  */\n-\n-static int\n-ada_sniff_from_mangled_name (const char *mangled, char **out)\n-{\n-  std::string demangled = ada_decode (mangled);\n-\n-  *out = NULL;\n-\n-  if (demangled != mangled && demangled[0] != '<')\n-    {\n-      /* Set the gsymbol language to Ada, but still return 0.\n-\t Two reasons for that:\n-\n-\t 1. For Ada, we prefer computing the symbol's decoded name\n-\t on the fly rather than pre-compute it, in order to save\n-\t memory (Ada projects are typically very large).\n-\n-\t 2. There are some areas in the definition of the GNAT\n-\t encoding where, with a bit of bad luck, we might be able\n-\t to decode a non-Ada symbol, generating an incorrect\n-\t demangled name (Eg: names ending with \"TB\" for instance\n-\t are identified as task bodies and so stripped from\n-\t the decoded name returned).\n-\n-\t Returning 1, here, but not setting *DEMANGLED, helps us get a\n-\t little bit of the best of both worlds.  Because we're last,\n-\t we should not affect any of the other languages that were\n-\t able to demangle the symbol before us; we get to correctly\n-\t tag Ada symbols as such; and even if we incorrectly tagged a\n-\t non-Ada symbol, which should be rare, any routing through the\n-\t Ada language should be transparent (Ada tries to behave much\n-\t like C/C++ with non-Ada symbols).  */\n-      return 1;\n-    }\n-\n-  return 0;\n-}\n-\n \f\n \n                                 /* Arrays */\n@@ -13967,7 +13928,6 @@ extern const struct language_data ada_language_data =\n   true,                         /* la_store_sym_names_in_linkage_form_p */\n   ada_lookup_symbol_nonlocal,   /* Looking up non-local symbols.  */\n   ada_la_decode,                /* Language specific symbol demangler */\n-  ada_sniff_from_mangled_name,\n   NULL,                         /* Language specific\n \t\t\t\t   class_name_from_physname */\n   ada_op_print_tab,             /* expression operators for printing */\n@@ -14108,6 +14068,44 @@ class ada_language : public language_defn\n \n     return true;\n   }\n+\n+  /* See language.h.  */\n+  bool sniff_from_mangled_name (const char *mangled,\n+\t\t\t\tchar **out) const override\n+  {\n+    std::string demangled = ada_decode (mangled);\n+\n+    *out = NULL;\n+\n+    if (demangled != mangled && demangled[0] != '<')\n+      {\n+\t/* Set the gsymbol language to Ada, but still return 0.\n+\t   Two reasons for that:\n+\n+\t   1. For Ada, we prefer computing the symbol's decoded name\n+\t   on the fly rather than pre-compute it, in order to save\n+\t   memory (Ada projects are typically very large).\n+\n+\t   2. There are some areas in the definition of the GNAT\n+\t   encoding where, with a bit of bad luck, we might be able\n+\t   to decode a non-Ada symbol, generating an incorrect\n+\t   demangled name (Eg: names ending with \"TB\" for instance\n+\t   are identified as task bodies and so stripped from\n+\t   the decoded name returned).\n+\n+\t   Returning true, here, but not setting *DEMANGLED, helps us get\n+\t   a little bit of the best of both worlds.  Because we're last,\n+\t   we should not affect any of the other languages that were\n+\t   able to demangle the symbol before us; we get to correctly\n+\t   tag Ada symbols as such; and even if we incorrectly tagged a\n+\t   non-Ada symbol, which should be rare, any routing through the\n+\t   Ada language should be transparent (Ada tries to behave much\n+\t   like C/C++ with non-Ada symbols).  */\n+\treturn true;\n+      }\n+\n+    return false;\n+  }\n };\n \n /* Single instance of the Ada language class.  */"
    },
    {
      "sha": "a5f7d822866cc9ef4e89ae01923450845adbc81c",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -914,7 +914,6 @@ extern const struct language_data c_language_data =\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   NULL,\t\t\t\t/* Language specific symbol demangler */\n-  NULL,\n   NULL,\t\t\t\t/* Language specific\n \t\t\t\t   class_name_from_physname */\n   c_op_print_tab,\t\t/* expression operators for printing */\n@@ -1017,7 +1016,6 @@ extern const struct language_data cplus_language_data =\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   cp_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   gdb_demangle,\t\t\t/* Language specific symbol demangler */\n-  gdb_sniff_from_mangled_name,\n   cp_class_name_from_physname,  /* Language specific\n \t\t\t\t   class_name_from_physname */\n   c_op_print_tab,\t\t/* expression operators for printing */\n@@ -1130,6 +1128,14 @@ class cplus_language : public language_defn\n   {\n     return cp_search_name_hash (name);\n   }\n+\n+  /* See language.h.  */\n+  bool sniff_from_mangled_name (const char *mangled,\n+\t\t\t\tchar **demangled) const override\n+  {\n+    *demangled = gdb_demangle (mangled, DMGL_PARAMS | DMGL_ANSI);\n+    return *demangled != NULL;\n+  }\n };\n \n /* The single instance of the C++ language class.  */\n@@ -1168,7 +1174,6 @@ extern const struct language_data asm_language_data =\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   NULL,\t\t\t\t/* Language specific symbol demangler */\n-  NULL,\n   NULL,\t\t\t\t/* Language specific\n \t\t\t\t   class_name_from_physname */\n   c_op_print_tab,\t\t/* expression operators for printing */\n@@ -1236,7 +1241,6 @@ extern const struct language_data minimal_language_data =\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   NULL,\t\t\t\t/* Language specific symbol demangler */\n-  NULL,\n   NULL,\t\t\t\t/* Language specific\n \t\t\t\t   class_name_from_physname */\n   c_op_print_tab,\t\t/* expression operators for printing */"
    },
    {
      "sha": "3c3ede26a6067a2495742efa39a9900e0b68b0b3",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -1676,15 +1676,6 @@ gdb_demangle (const char *name, int options)\n \n /* See cp-support.h.  */\n \n-int\n-gdb_sniff_from_mangled_name (const char *mangled, char **demangled)\n-{\n-  *demangled = gdb_demangle (mangled, DMGL_PARAMS | DMGL_ANSI);\n-  return *demangled != NULL;\n-}\n-\n-/* See cp-support.h.  */\n-\n unsigned int\n cp_search_name_hash (const char *search_name)\n {"
    },
    {
      "sha": "7c948b212cbaeeb5453f2b64a5ee7b3cb6ca41c5",
      "filename": "gdb/cp-support.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/cp-support.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/cp-support.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.h?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -191,8 +191,4 @@ extern struct cmd_list_element *maint_cplus_cmd_list;\n \n char *gdb_demangle (const char *name, int options);\n \n-/* Like gdb_demangle, but suitable for use as la_sniff_from_mangled_name.  */\n-\n-int gdb_sniff_from_mangled_name (const char *mangled, char **demangled);\n-\n #endif /* CP_SUPPORT_H */"
    },
    {
      "sha": "23b9464cb58998bb96d6d1b629cb8ab49af6a526",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -56,15 +56,6 @@ d_demangle (const char *symbol, int options)\n   return gdb_demangle (symbol, options | DMGL_DLANG);\n }\n \n-/* la_sniff_from_mangled_name implementation for D.  */\n-\n-static int\n-d_sniff_from_mangled_name (const char *mangled, char **demangled)\n-{\n-  *demangled = d_demangle (mangled, 0);\n-  return *demangled != NULL;\n-}\n-\n /* Table mapping opcodes into strings for printing operators\n    and precedences of the operators.  */\n static const struct op_print d_op_print_tab[] =\n@@ -166,7 +157,6 @@ extern const struct language_data d_language_data =\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   d_lookup_symbol_nonlocal,\n   d_demangle,\t\t\t/* Language specific symbol demangler.  */\n-  d_sniff_from_mangled_name,\n   NULL,\t\t\t\t/* Language specific\n \t\t\t\t   class_name_from_physname.  */\n   d_op_print_tab,\t\t/* Expression operators for printing.  */\n@@ -254,6 +244,14 @@ class d_language : public language_defn\n     lai->bool_type_symbol = \"bool\";\n     lai->bool_type_default = builtin->builtin_bool;\n   }\n+\n+  /* See language.h.  */\n+  bool sniff_from_mangled_name (const char *mangled,\n+\t\t\t\tchar **demangled) const override\n+  {\n+    *demangled = d_demangle (mangled, 0);\n+    return *demangled != NULL;\n+  }\n };\n \n /* Single instance of the D language class.  */"
    },
    {
      "sha": "804b2823f31e907cd163461bb0e61ebdcd75dbd9",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -623,7 +623,6 @@ extern const struct language_data f_language_data =\n      and there is no DW_AT_producer available for inferiors with only\n      the ELF symbols to check the mangling kind.  */\n   NULL,\t\t\t\t/* Language specific symbol demangler */\n-  NULL,\n   NULL,\t\t\t\t/* Language specific\n \t\t\t\t   class_name_from_physname */\n   f_op_print_tab,\t\t/* expression operators for printing */"
    },
    {
      "sha": "dce7e6ab76968f6b13cf2447470868ee85790f85",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -396,15 +396,6 @@ go_demangle (const char *mangled_name, int options)\n   return result;\n }\n \n-/* la_sniff_from_mangled_name for Go.  */\n-\n-static int\n-go_sniff_from_mangled_name (const char *mangled, char **demangled)\n-{\n-  *demangled = go_demangle (mangled, 0);\n-  return *demangled != NULL;\n-}\n-\n /* Given a Go symbol, return its package or NULL if unknown.\n    Space for the result is malloc'd, caller must free.  */\n \n@@ -551,7 +542,6 @@ extern const struct language_data go_language_data =\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal, \n   go_demangle,\t\t\t/* Language specific symbol demangler.  */\n-  go_sniff_from_mangled_name,\n   NULL,\t\t\t\t/* Language specific\n \t\t\t\t   class_name_from_physname.  */\n   go_op_print_tab,\t\t/* Expression operators for printing.  */\n@@ -628,6 +618,14 @@ class go_language : public language_defn\n     lai->bool_type_symbol = \"bool\";\n     lai->bool_type_default = builtin->builtin_bool;\n   }\n+\n+  /* See language.h.  */\n+  bool sniff_from_mangled_name (const char *mangled,\n+\t\t\t\tchar **demangled) const override\n+  {\n+    *demangled = go_demangle (mangled, 0);\n+    return *demangled != NULL;\n+  }\n };\n \n /* Single instance of the Go language class.  */"
    },
    {
      "sha": "2a66f1fd6eaf8ff9c1aa4cde9a1616e2f6f46061",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 0,
      "deletions": 19,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -594,23 +594,6 @@ language_demangle (const struct language_defn *current_language,\n   return NULL;\n }\n \n-/* See language.h.  */\n-\n-int\n-language_sniff_from_mangled_name (const struct language_defn *lang,\n-\t\t\t\t  const char *mangled, char **demangled)\n-{\n-  gdb_assert (lang != NULL);\n-\n-  if (lang->la_sniff_from_mangled_name == NULL)\n-    {\n-      *demangled = NULL;\n-      return 0;\n-    }\n-\n-  return lang->la_sniff_from_mangled_name (mangled, demangled);\n-}\n-\n /* Return class name from physname or NULL.  */\n char *\n language_class_name_from_physname (const struct language_defn *lang,\n@@ -828,7 +811,6 @@ extern const struct language_data unknown_language_data =\n   true,\t\t\t\t/* store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal, /* lookup_symbol_nonlocal */\n   unk_lang_demangle,\t\t/* Language specific symbol demangler */\n-  NULL,\n   unk_lang_class_name,\t\t/* Language specific\n \t\t\t\t   class_name_from_physname */\n   unk_op_print_tab,\t\t/* expression operators for printing */\n@@ -892,7 +874,6 @@ extern const struct language_data auto_language_data =\n   false,\t\t\t/* store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   unk_lang_demangle,\t\t/* Language specific symbol demangler */\n-  NULL,\n   unk_lang_class_name,\t\t/* Language specific\n \t\t\t\t   class_name_from_physname */\n   unk_op_print_tab,\t\t/* expression operators for printing */"
    },
    {
      "sha": "d5013bf83244bc8d443384b680092fb4aca74f6c",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 21,
      "deletions": 23,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -318,22 +318,6 @@ struct language_data\n     /* Return demangled language symbol, or NULL.  */\n     char *(*la_demangle) (const char *mangled, int options);\n \n-    /* Demangle a symbol according to this language's rules.  Unlike\n-       la_demangle, this does not take any options.\n-\n-       *DEMANGLED will be set by this function.\n-       \n-       If this function returns 0, then *DEMANGLED must always be set\n-       to NULL.\n-\n-       If this function returns 1, the implementation may set this to\n-       a xmalloc'd string holding the demangled form.  However, it is\n-       not required to.  The string, if any, is owned by the caller.\n-\n-       The resulting string should be of the form that will be\n-       installed into a symbol.  */\n-    int (*la_sniff_from_mangled_name) (const char *mangled, char **demangled);\n-\n     /* Return class name of a mangled method name or NULL.  */\n     char *(*la_class_name_from_physname) (const char *physname);\n \n@@ -512,6 +496,27 @@ struct language_defn : language_data\n   /* Hash the given symbol search name.  */\n   virtual unsigned int search_name_hash (const char *name) const;\n \n+  /* Demangle a symbol according to this language's rules.  Unlike\n+     la_demangle, this does not take any options.\n+\n+     *DEMANGLED will be set by this function.\n+\n+     If this function returns false, then *DEMANGLED must always be set\n+     to NULL.\n+\n+     If this function returns true, the implementation may set this to\n+     a xmalloc'd string holding the demangled form.  However, it is\n+     not required to.  The string, if any, is owned by the caller.\n+\n+     The resulting string should be of the form that will be\n+     installed into a symbol.  */\n+  virtual bool sniff_from_mangled_name (const char *mangled,\n+\t\t\t\t\tchar **demangled) const\n+  {\n+    *demangled = nullptr;\n+    return false;\n+  }\n+\n   /* List of all known languages.  */\n   static const struct language_defn *languages[nr_languages];\n };\n@@ -666,13 +671,6 @@ extern CORE_ADDR skip_language_trampoline (struct frame_info *, CORE_ADDR pc);\n extern char *language_demangle (const struct language_defn *current_language, \n \t\t\t\tconst char *mangled, int options);\n \n-/* A wrapper for la_sniff_from_mangled_name.  The arguments and result\n-   are as for the method.  */\n-\n-extern int language_sniff_from_mangled_name (const struct language_defn *lang,\n-\t\t\t\t\t     const char *mangled,\n-\t\t\t\t\t     char **demangled);\n-\n /* Return class name from physname, or NULL.  */\n extern char *language_class_name_from_physname (const struct language_defn *,\n \t\t\t\t\t        const char *physname);"
    },
    {
      "sha": "fbfdcff71f38bb80706bd0793a6d6f63b5d10d10",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -376,7 +376,6 @@ extern const struct language_data m2_language_data =\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   NULL,\t\t\t\t/* Language specific symbol demangler */\n-  NULL,\n   NULL,\t\t\t\t/* Language specific\n \t\t\t\t   class_name_from_physname */\n   m2_op_print_tab,\t\t/* expression operators for printing */"
    },
    {
      "sha": "3082a5d058a0c6b3f1e2f313fd0de49ff55e93e5",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -281,15 +281,6 @@ objc_demangle (const char *mangled, int options)\n     return NULL;\t/* Not an objc mangled name.  */\n }\n \n-/* la_sniff_from_mangled_name for ObjC.  */\n-\n-static int\n-objc_sniff_from_mangled_name (const char *mangled, char **demangled)\n-{\n-  *demangled = objc_demangle (mangled, 0);\n-  return *demangled != NULL;\n-}\n-\n /* Determine if we are currently in the Objective-C dispatch function.\n    If so, get the address of the method function that the dispatcher\n    would call and use that as the function to step into instead.  Also\n@@ -391,7 +382,6 @@ extern const struct language_data objc_language_data =\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   objc_demangle,\t\t/* Language specific symbol demangler */\n-  objc_sniff_from_mangled_name,\n   NULL,\t\t\t\t/* Language specific\n \t\t\t\t   class_name_from_physname */\n   objc_op_print_tab,\t\t/* Expression operators for printing */\n@@ -422,6 +412,14 @@ class objc_language : public language_defn\n   {\n     c_language_arch_info (gdbarch, lai);\n   }\n+\n+  /* See language.h.  */\n+  bool sniff_from_mangled_name (const char *mangled,\n+\t\t\t\tchar **demangled) const override\n+  {\n+    *demangled = objc_demangle (mangled, 0);\n+    return *demangled != NULL;\n+  }\n };\n \n /* Single instance of the class representing the Objective-C language.  */"
    },
    {
      "sha": "4080c51854f722f957a3885afbd98a655c983dfd",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -1051,7 +1051,6 @@ extern const struct language_data opencl_language_data =\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   NULL,\t\t\t\t/* Language specific symbol demangler */\n-  NULL,\n   NULL,\t\t\t\t/* Language specific\n \t\t\t\t   class_name_from_physname */\n   c_op_print_tab,\t\t/* expression operators for printing */"
    },
    {
      "sha": "8d96dd15832608433febd68afba4b1e96e6db04d",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -407,7 +407,6 @@ extern const struct language_data pascal_language_data =\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   NULL,\t\t\t\t/* Language specific symbol demangler */\n-  NULL,\n   NULL,\t\t\t\t/* Language specific class_name_from_physname */\n   pascal_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */"
    },
    {
      "sha": "d75f34d0d9a4c39019540086046be4bbe7507703",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 12,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -2016,17 +2016,6 @@ rust_lookup_symbol_nonlocal (const struct language_defn *langdef,\n \n \f\n \n-/* la_sniff_from_mangled_name for Rust.  */\n-\n-static int\n-rust_sniff_from_mangled_name (const char *mangled, char **demangled)\n-{\n-  *demangled = gdb_demangle (mangled, DMGL_PARAMS | DMGL_ANSI);\n-  return *demangled != NULL;\n-}\n-\n-\f\n-\n /* la_watch_location_expression for Rust.  */\n \n static gdb::unique_xmalloc_ptr<char>\n@@ -2083,7 +2072,6 @@ extern const struct language_data rust_language_data =\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   rust_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   gdb_demangle,\t\t\t/* Language specific symbol demangler */\n-  rust_sniff_from_mangled_name,\n   NULL,\t\t\t\t/* Language specific\n \t\t\t\t   class_name_from_physname */\n   c_op_print_tab,\t\t/* expression operators for printing */\n@@ -2148,6 +2136,14 @@ class rust_language : public language_defn\n     lai->bool_type_default = types[rust_primitive_bool];\n     lai->string_char_type = types[rust_primitive_u8];\n   }\n+\n+  /* See language.h.  */\n+  bool sniff_from_mangled_name (const char *mangled,\n+\t\t\t\tchar **demangled) const override\n+  {\n+    *demangled = gdb_demangle (mangled, DMGL_PARAMS | DMGL_ANSI);\n+    return *demangled != NULL;\n+  }\n };\n \n /* Single instance of the Rust language class.  */"
    },
    {
      "sha": "791ce11a7372c11583eec384b5d44bf13d4366ea",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f8270197a2909607f2c076018e30677bbac652e/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f8270197a2909607f2c076018e30677bbac652e/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=6f8270197a2909607f2c076018e30677bbac652e",
      "patch": "@@ -807,7 +807,7 @@ symbol_find_demangled_name (struct general_symbol_info *gsymbol,\n     {\n       const struct language_defn *lang = language_def (gsymbol->language ());\n \n-      language_sniff_from_mangled_name (lang, mangled, &demangled);\n+      lang->sniff_from_mangled_name (mangled, &demangled);\n       return demangled;\n     }\n \n@@ -816,7 +816,7 @@ symbol_find_demangled_name (struct general_symbol_info *gsymbol,\n       enum language l = (enum language) i;\n       const struct language_defn *lang = language_def (l);\n \n-      if (language_sniff_from_mangled_name (lang, mangled, &demangled))\n+      if (lang->sniff_from_mangled_name (mangled, &demangled))\n \t{\n \t  gsymbol->m_language = l;\n \t  return demangled;"
    }
  ]
}