{
  "sha": "1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWJlOTliMTFmOGQxYThmZDQwNDlmZWUxYzBlZWFlZjczYjNlNmQxZA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-17T18:01:20Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-17T18:01:20Z"
    },
    "message": "gdb: add cmd_list_element::is_alias\n\nAdd the cmd_list_element::is_alias helper to check whether a command is\nan alias.  I find it easier to understand the intention in:\n\n  if (c->is_alias ())\n\nthan\n\n  if (c->alias_target != nullptr)\n\nChange all the spots that are reading alias_target just to compare it to\nNULL/nullptr to use is_alias instead.\n\ngdb/ChangeLog:\n\n\t* cli/cli-decode.h (cmd_list_element) <is_alias>: New, use it.\n\nChange-Id: I26ed56f99ee47fe884fdfedf87016501631693ce",
    "tree": {
      "sha": "01897c887dc34c9be242b85d95adce5a5787a96e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/01897c887dc34c9be242b85d95adce5a5787a96e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9985872497e2b8c86424fcb97cd9a065f406a5c5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9985872497e2b8c86424fcb97cd9a065f406a5c5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9985872497e2b8c86424fcb97cd9a065f406a5c5"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 20,
    "deletions": 12
  },
  "files": [
    {
      "sha": "b39879fcd5b81f5ce47502dcc792261b1c649b79",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d",
      "patch": "@@ -1,3 +1,7 @@\n+2021-05-17  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* cli/cli-decode.h (cmd_list_element) <is_alias>: New, use it.\n+\n 2021-05-17  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* cli/cli-decode.h (cmd_list_element) <cmd_pointer>: Rename"
    },
    {
      "sha": "29b4ed2f6bd7f266222b1d61ccb43fcbe92531bb",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d",
      "patch": "@@ -75,7 +75,7 @@ lookup_cmd_with_subcommands (cmd_list_element **subcommands,\n \t{\n \t  /* If we found an alias, we must return the aliased\n \t     command.  */\n-\t  return p->alias_target ? p->alias_target : p;\n+\t  return p->is_alias () ? p->alias_target : p;\n \t}\n \n       q = lookup_cmd_with_subcommands (subcommands, *(p->subcommands));\n@@ -405,7 +405,7 @@ static void\n do_prefix_cmd (const char *args, int from_tty, struct cmd_list_element *c)\n {\n   /* Look past all aliases.  */\n-  while (c->alias_target != nullptr)\n+  while (c->is_alias ())\n     c = c->alias_target;\n \n   help_list (*c->subcommands, c->prefixname ().c_str (),\n@@ -948,7 +948,7 @@ delete_cmd (const char *name, struct cmd_list_element **list,\n \n \t  /* If this command was an alias, remove it from the list of\n \t     aliases.  */\n-\t  if (iter->alias_target)\n+\t  if (iter->is_alias ())\n \t    {\n \t      struct cmd_list_element **prevp = &iter->alias_target->aliases;\n \t      struct cmd_list_element *a = *prevp;\n@@ -1043,7 +1043,7 @@ static void\n fput_alias_definition_styled (struct cmd_list_element *c,\n \t\t\t      struct ui_file *stream)\n {\n-  gdb_assert (c->alias_target != nullptr);\n+  gdb_assert (c->is_alias ());\n   fputs_filtered (\"  alias \", stream);\n   fput_command_name_styled (c, stream);\n   fprintf_filtered (stream, \" = \");\n@@ -1146,7 +1146,7 @@ apropos_cmd (struct ui_file *stream,\n   /* Walk through the commands.  */\n   for (c=commandlist;c;c=c->next)\n     {\n-      if (c->alias_target != nullptr)\n+      if (c->is_alias ())\n \t{\n \t  /* Command aliases/abbreviations are skipped to ensure we print the\n \t     doc of a command only once, when encountering the aliased\n@@ -1487,7 +1487,7 @@ help_cmd_list (struct cmd_list_element *list, enum command_class theclass,\n \t  continue;\n \t}\n \n-      if (c->alias_target != nullptr && theclass != class_alias)\n+      if (c->is_alias () && theclass != class_alias)\n \t{\n \t  /* Do not show an alias, unless specifically showing the\n \t     list of aliases:  for all other classes, an alias is\n@@ -1509,7 +1509,7 @@ help_cmd_list (struct cmd_list_element *list, enum command_class theclass,\n \t     list of sub-commands of the aliased command.  */\n \t  print_help_for_command\n \t    (c,\n-\t     recurse && (theclass != class_alias || c->alias_target == nullptr),\n+\t     recurse && (theclass != class_alias || !c->is_alias ()),\n \t     stream);\n \t  continue;\n \t}\n@@ -1672,7 +1672,7 @@ lookup_cmd_1 (const char **text, struct cmd_list_element *clist,\n \n   *text += len;\n \n-  if (found->alias_target)\n+  if (found->is_alias ())\n     {\n       /* We drop the alias (abbreviation) in favor of the command it\n        is pointing to.  If the alias is deprecated, though, we need to\n@@ -2044,7 +2044,7 @@ lookup_cmd_composition_1 (const char *text,\n \treturn 0;\n       else\n \t{\n-\t  if ((*cmd)->alias_target)\n+\t  if ((*cmd)->is_alias ())\n \t    {\n \t      /* If the command was actually an alias, we note that an\n \t\t alias was used (by assigning *ALIAS) and we set *CMD.  */"
    },
    {
      "sha": "8caf6023454892319c2c97efe31134228e6f2a30",
      "filename": "gdb/cli/cli-decode.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d/gdb/cli/cli-decode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d/gdb/cli/cli-decode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.h?ref=1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d",
      "patch": "@@ -79,6 +79,10 @@ struct cmd_list_element\n      For non-prefix commands, return an empty string.  */\n   std::string prefixname () const;\n \n+  /* Return true if this command is an alias of another command.  */\n+  bool is_alias () const\n+  { return this->alias_target != nullptr; }\n+\n   /* Points to next command in this list.  */\n   struct cmd_list_element *next = nullptr;\n "
    },
    {
      "sha": "7e93a70349421d78f04601fa2e951e001442ab88",
      "filename": "gdb/cli/cli-setshow.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d/gdb/cli/cli-setshow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d/gdb/cli/cli-setshow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-setshow.c?ref=1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d",
      "patch": "@@ -740,7 +740,7 @@ cmd_show_list (struct cmd_list_element *list, int from_tty)\n \n       /* If we find a prefix, run its list, prefixing our output by its\n \t prefix (with \"show \" skipped).  */\n-      if (list->subcommands && list->alias_target == nullptr)\n+      if (list->subcommands && !list->is_alias ())\n \t{\n \t  ui_out_emit_tuple optionlist_emitter (uiout, \"optionlist\");\n \t  std::string prefixname = list->prefixname ();\n@@ -750,7 +750,7 @@ cmd_show_list (struct cmd_list_element *list, int from_tty)\n \t    uiout->field_string (\"prefix\", new_prefix);\n \t  cmd_show_list (*list->subcommands, from_tty);\n \t}\n-      else if (list->theclass != no_set_class && list->alias_target == nullptr)\n+      else if (list->theclass != no_set_class && !list->is_alias ())\n \t{\n \t  ui_out_emit_tuple option_emitter (uiout, \"option\");\n "
    },
    {
      "sha": "4a6b6789b370cf6c562b344187a595e21e132152",
      "filename": "gdb/unittests/command-def-selftests.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d/gdb/unittests/command-def-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d/gdb/unittests/command-def-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/command-def-selftests.c?ref=1be99b11f8d1a8fd4049fee1c0eeaef73b3e6d1d",
      "patch": "@@ -155,7 +155,7 @@ traverse_command_structure (struct cmd_list_element **list,\n     {\n       /* If this command has subcommands and is not an alias,\n \t traverse the subcommands.  */\n-      if (c->subcommands != NULL && c->alias_target == nullptr)\n+      if (c->subcommands != NULL && !c->is_alias ())\n \t{\n \t  /* Recursively call ourselves on the subcommand list,\n \t     passing the right prefix in.  */"
    }
  ]
}