{
  "sha": "6bbf9da8927e848d3d6fdd188ca84385f1dddcce",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmJiZjlkYTg5MjdlODQ4ZDNkNmZkZDE4OGNhODQzODVmMWRkZGNjZQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-10-21T10:33:19Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-26T14:56:39Z"
    },
    "message": "libctf: create: don't add forwards if the type added already exists\n\nThis is what ctf_add_forward is documented to do, but it's not what it\nactually does: the code is quite happy to add forwards that duplicate\nexisting structs, etc.\n\nThis is obviously wrong and breaks both the nondeduplicating linker\nand the upcoming deduplicator, as well as allowing ordinary callers of\nctf_add_type to corrupt the dictionary by just adding the same root-\nvisible forward more than once.\n\nlibctf/\n\t* ctf-create.c (ctf_add_forward): Don't add forwards to\n\ttypes that already exist.",
    "tree": {
      "sha": "e1a74d22ddf3d9960179d6183af26bd8c7aec16a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e1a74d22ddf3d9960179d6183af26bd8c7aec16a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6bbf9da8927e848d3d6fdd188ca84385f1dddcce",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6bbf9da8927e848d3d6fdd188ca84385f1dddcce",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6bbf9da8927e848d3d6fdd188ca84385f1dddcce",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6bbf9da8927e848d3d6fdd188ca84385f1dddcce/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fe4c2d55634c700ba527ac4183e05c66e9f93c62",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe4c2d55634c700ba527ac4183e05c66e9f93c62",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fe4c2d55634c700ba527ac4183e05c66e9f93c62"
    }
  ],
  "stats": {
    "total": 10,
    "additions": 9,
    "deletions": 1
  },
  "files": [
    {
      "sha": "7868d0b5a9e0cc5c228958513092b2823be57367",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6bbf9da8927e848d3d6fdd188ca84385f1dddcce/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6bbf9da8927e848d3d6fdd188ca84385f1dddcce/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=6bbf9da8927e848d3d6fdd188ca84385f1dddcce",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-26  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-create.c (ctf_add_forward): Don't add forwards to\n+\ttypes that already exist.\n+\n 2020-06-26  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-open.c (init_types): Only intern root-visible types."
    },
    {
      "sha": "c24a246c16410aff66ce9375004aa293062de5f4",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6bbf9da8927e848d3d6fdd188ca84385f1dddcce/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6bbf9da8927e848d3d6fdd188ca84385f1dddcce/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=6bbf9da8927e848d3d6fdd188ca84385f1dddcce",
      "patch": "@@ -1229,7 +1229,10 @@ ctf_add_forward (ctf_file_t *fp, uint32_t flag, const char *name,\n   if (name != NULL)\n     type = ctf_lookup_by_rawname (fp, kind, name);\n \n-  if ((type = ctf_add_generic (fp, flag, name, CTF_K_FORWARD,&dtd)) == CTF_ERR)\n+  if (type)\n+    return type;\n+\n+  if ((type = ctf_add_generic (fp, flag, name, CTF_K_FORWARD, &dtd)) == CTF_ERR)\n     return CTF_ERR;\t\t/* errno is set for us.  */\n \n   dtd->dtd_data.ctt_info = CTF_TYPE_INFO (CTF_K_FORWARD, flag, 0);"
    }
  ]
}