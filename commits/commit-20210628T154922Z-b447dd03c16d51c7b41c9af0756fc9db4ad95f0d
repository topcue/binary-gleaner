{
  "sha": "b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjQ0N2RkMDNjMTZkNTFjN2I0MWM5YWYwNzU2ZmM5ZGI0YWQ5NWYwZA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-28T15:49:22Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-28T15:49:22Z"
    },
    "message": "gdb: remove gdbarch_info_init\n\nWhile reviewing another patch, I realized that gdbarch_info_init could\neasily be removed in favor of initializing gdbarch_info fields directly\nin the struct declaration.  The only odd part is the union.  I don't\nknow if it's actually important for it to be zero-initialized, but I\npresume it is.  I added a constructor to gdbarch_info to take care of\nthat.  A proper solution would be to use std::variant.  Or, these could\nalso be separate fields, the little extra space required wouldn't\nmatter.\n\ngdb/ChangeLog:\n\n\t* gdbarch.sh (struct gdbarch_info): Initialize fields, add\n\tconstructor.\n\t* gdbarch.h: Re-generate.\n\t* arch-utils.h (gdbarch_info_init): Remove, delete all usages.\n\t* arch-utils.c (gdbarch_info_init): Remove.\n\nChange-Id: I7502e08fe0f278d84eef1667a072e8a97bda5ab5",
    "tree": {
      "sha": "4cff1537b99c800351a42d293650b7c51459e710",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4cff1537b99c800351a42d293650b7c51459e710"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c87c999c511f0484de53fa616b0bf6b00c753434",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c87c999c511f0484de53fa616b0bf6b00c753434",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c87c999c511f0484de53fa616b0bf6b00c753434"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 43,
    "deletions": 92
  },
  "files": [
    {
      "sha": "2c4719781aa0b5e6abcbc4cf12641e855e6d523f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -1,3 +1,11 @@\n+2021-06-28  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdbarch.sh (struct gdbarch_info): Initialize fields, add\n+\tconstructor.\n+\t* gdbarch.h: Re-generate.\n+\t* arch-utils.h (gdbarch_info_init): Remove, delete all usages.\n+\t* arch-utils.c (gdbarch_info_init): Remove.\n+\n 2021-06-28  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdbarch.sh (struct gdbarch_info) <tdep_info>: Remove."
    },
    {
      "sha": "c7cbebbc3517e4325e46913ede496d140b4d4098",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -1060,7 +1060,6 @@ aarch64_linux_nat_target::thread_architecture (ptid_t ptid)\n      new one), stashing the vector length inside id.  Use -1 for when SVE\n      unavailable, to distinguish from an unset value of 0.  */\n   struct gdbarch_info info;\n-  gdbarch_info_init (&info);\n   info.bfd_arch_info = bfd_lookup_arch (bfd_arch_aarch64, bfd_mach_aarch64);\n   info.id = (int *) (vq == 0 ? -1 : vq);\n   return gdbarch_find_by_info (info);"
    },
    {
      "sha": "dea16e729c0324dd66c70266b0b3575b85e4b775",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -627,7 +627,6 @@ aarch64_analyze_prologue_test (void)\n {\n   struct gdbarch_info info;\n \n-  gdbarch_info_init (&info);\n   info.bfd_arch_info = bfd_scan_arch (\"aarch64\");\n \n   struct gdbarch *gdbarch = gdbarch_find_by_info (info);\n@@ -4559,7 +4558,6 @@ aarch64_process_record_test (void)\n   struct gdbarch_info info;\n   uint32_t ret;\n \n-  gdbarch_info_init (&info);\n   info.bfd_arch_info = bfd_scan_arch (\"aarch64\");\n \n   struct gdbarch *gdbarch = gdbarch_find_by_info (info);"
    },
    {
      "sha": "4290d637ce16dfa803e41002632868645bfc0a36",
      "filename": "gdb/arch-utils.c",
      "status": "modified",
      "additions": 1,
      "deletions": 25,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/arch-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/arch-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -389,8 +389,6 @@ set_endian (const char *ignore_args, int from_tty, struct cmd_list_element *c)\n {\n   struct gdbarch_info info;\n \n-  gdbarch_info_init (&info);\n-\n   if (set_endian_string == endian_auto)\n     {\n       target_byte_order_user = BFD_ENDIAN_UNKNOWN;\n@@ -548,8 +546,6 @@ set_architecture (const char *ignore_args,\n {\n   struct gdbarch_info info;\n \n-  gdbarch_info_init (&info);\n-\n   if (strcmp (set_architecture_string, \"auto\") == 0)\n     {\n       target_architecture_user = NULL;\n@@ -630,7 +626,6 @@ struct gdbarch *\n gdbarch_from_bfd (bfd *abfd)\n {\n   struct gdbarch_info info;\n-  gdbarch_info_init (&info);\n \n   info.abfd = abfd;\n   return gdbarch_find_by_info (info);\n@@ -645,7 +640,6 @@ set_gdbarch_from_file (bfd *abfd)\n   struct gdbarch_info info;\n   struct gdbarch *gdbarch;\n \n-  gdbarch_info_init (&info);\n   info.abfd = abfd;\n   info.target_desc = target_current_description ();\n   gdbarch = gdbarch_find_by_info (info);\n@@ -679,10 +673,6 @@ void\n initialize_current_architecture (void)\n {\n   const char **arches = gdbarch_printable_names ();\n-  struct gdbarch_info info;\n-\n-  /* determine a default architecture and byte order.  */\n-  gdbarch_info_init (&info);\n   \n   /* Find a default architecture.  */\n   if (default_bfd_arch == NULL)\n@@ -705,6 +695,7 @@ initialize_current_architecture (void)\n \t\t\t_(\"initialize_current_architecture: Arch not found\"));\n     }\n \n+  gdbarch_info info;\n   info.bfd_arch_info = default_bfd_arch;\n \n   /* Take several guesses at a byte order.  */\n@@ -769,21 +760,6 @@ initialize_current_architecture (void)\n   }\n }\n \n-\n-/* Initialize a gdbarch info to values that will be automatically\n-   overridden.  Note: Originally, this ``struct info'' was initialized\n-   using memset(0).  Unfortunately, that ran into problems, namely\n-   BFD_ENDIAN_BIG is zero.  An explicit initialization function that\n-   can explicitly set each field to a well defined value is used.  */\n-\n-void\n-gdbarch_info_init (struct gdbarch_info *info)\n-{\n-  memset (info, 0, sizeof (struct gdbarch_info));\n-  info->byte_order = BFD_ENDIAN_UNKNOWN;\n-  info->byte_order_for_code = info->byte_order;\n-}\n-\n /* Similar to init, but this time fill in the blanks.  Information is\n    obtained from the global \"set ...\" options and explicitly\n    initialized INFO fields.  */"
    },
    {
      "sha": "03e9082f6d771ccb1868ece935b8109b1e3447f8",
      "filename": "gdb/arch-utils.h",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/arch-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/arch-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.h?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -196,12 +196,6 @@ extern enum bfd_endian selected_byte_order (void);\n    was explicitly selected.  */\n extern const char *selected_architecture_name (void);\n \n-/* Initialize a ``struct info''.  Can't use memset(0) since some\n-   default values are not zero.  \"fill\" takes all available\n-   information and fills in any unspecified fields.  */\n-\n-extern void gdbarch_info_init (struct gdbarch_info *info);\n-\n /* Similar to init, but this time fill in the blanks.  Information is\n    obtained from the global \"set ...\" options and explicitly\n    initialized INFO fields.  */"
    },
    {
      "sha": "339e03271e7ea321a16d76d522f7f2716ecd3c8f",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -8403,15 +8403,12 @@ arm_skip_stub (struct frame_info *frame, CORE_ADDR pc)\n static void\n arm_update_current_architecture (void)\n {\n-  struct gdbarch_info info;\n-\n   /* If the current architecture is not ARM, we have nothing to do.  */\n   if (gdbarch_bfd_arch_info (target_gdbarch ())->arch != bfd_arch_arm)\n     return;\n \n   /* Update the architecture.  */\n-  gdbarch_info_init (&info);\n-\n+  gdbarch_info info;\n   if (!gdbarch_update_p (info))\n     internal_error (__FILE__, __LINE__, _(\"could not update architecture\"));\n }\n@@ -13237,7 +13234,6 @@ static void\n arm_record_test (void)\n {\n   struct gdbarch_info info;\n-  gdbarch_info_init (&info);\n   info.bfd_arch_info = bfd_scan_arch (\"arm\");\n \n   struct gdbarch *gdbarch = gdbarch_find_by_info (info);\n@@ -13329,7 +13325,6 @@ arm_analyze_prologue_test ()\n   for (bfd_endian endianness : {BFD_ENDIAN_LITTLE, BFD_ENDIAN_BIG})\n     {\n       struct gdbarch_info info;\n-      gdbarch_info_init (&info);\n       info.byte_order = endianness;\n       info.byte_order_for_code = endianness;\n       info.bfd_arch_info = bfd_scan_arch (\"arm\");"
    },
    {
      "sha": "eb785a08633ac1659711a8c30e38aa90067ea333",
      "filename": "gdb/corelow.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/corelow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/corelow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corelow.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -165,7 +165,6 @@ core_target::core_target ()\n   if (tdesc != nullptr)\n     {\n       struct gdbarch_info info;\n-      gdbarch_info_init (&info);\n       info.abfd = core_bfd;\n       info.target_desc = tdesc;\n       m_core_gdbarch = gdbarch_find_by_info (info);"
    },
    {
      "sha": "01ef1604bffa70d7319f812d4b56266c0b60f935",
      "filename": "gdb/cris-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/cris-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/cris-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cris-tdep.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -3879,7 +3879,6 @@ set_cris_version (const char *ignore_args, int from_tty,\n   usr_cmd_cris_version_valid = 1;\n   \n   /* Update the current architecture, if needed.  */\n-  gdbarch_info_init (&info);\n   if (!gdbarch_update_p (info))\n     internal_error (__FILE__, __LINE__, \n \t\t    _(\"cris_gdbarch_update: failed to update architecture.\"));\n@@ -3892,7 +3891,6 @@ set_cris_mode (const char *ignore_args, int from_tty,\n   struct gdbarch_info info;\n \n   /* Update the current architecture, if needed.  */\n-  gdbarch_info_init (&info);\n   if (!gdbarch_update_p (info))\n     internal_error (__FILE__, __LINE__, \n \t\t    \"cris_gdbarch_update: failed to update architecture.\");\n@@ -3905,7 +3903,6 @@ set_cris_dwarf2_cfi (const char *ignore_args, int from_tty,\n   struct gdbarch_info info;\n \n   /* Update the current architecture, if needed.  */\n-  gdbarch_info_init (&info);\n   if (!gdbarch_update_p (info))\n     internal_error (__FILE__, __LINE__, \n \t\t    _(\"cris_gdbarch_update: failed to update architecture.\"));"
    },
    {
      "sha": "ece765b826fadbc0d39c915dada1b605c75ae6a0",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -1781,18 +1781,20 @@ struct gdbarch_list\n \n struct gdbarch_info\n {\n-  /* Use default: NULL (ZERO).  */\n-  const struct bfd_arch_info *bfd_arch_info;\n+  gdbarch_info ()\n+    /* Ensure the union is zero-initialized.  Relies on the fact that there's\n+       no member larger than TDESC_DATA.  */\n+    : tdesc_data ()\n+  {}\n \n-  /* Use default: BFD_ENDIAN_UNKNOWN (NB: is not ZERO).  */\n-  enum bfd_endian byte_order;\n+  const struct bfd_arch_info *bfd_arch_info = nullptr;\n \n-  enum bfd_endian byte_order_for_code;\n+  enum bfd_endian byte_order = BFD_ENDIAN_UNKNOWN;\n \n-  /* Use default: NULL (ZERO).  */\n-  bfd *abfd;\n+  enum bfd_endian byte_order_for_code = BFD_ENDIAN_UNKNOWN;\n+\n+  bfd *abfd = nullptr;\n \n-  /* Use default: NULL (ZERO).  */\n   union\n     {\n       /* Architecture-specific target description data.  Numerous targets\n@@ -1805,11 +1807,9 @@ struct gdbarch_info\n       int *id;\n     };\n \n-  /* Use default: GDB_OSABI_UNINITIALIZED (-1).  */\n-  enum gdb_osabi osabi;\n+  enum gdb_osabi osabi = GDB_OSABI_UNKNOWN;\n \n-  /* Use default: NULL (ZERO).  */\n-  const struct target_desc *target_desc;\n+  const struct target_desc *target_desc = nullptr;\n };\n \n typedef struct gdbarch *(gdbarch_init_ftype) (struct gdbarch_info info, struct gdbarch_list *arches);\n@@ -1883,8 +1883,8 @@ extern int gdbarch_update_p (struct gdbarch_info info);\n \n /* Helper function.  Find an architecture matching info.\n \n-   INFO should be initialized using gdbarch_info_init, relevant fields\n-   set, and then finished using gdbarch_info_fill.\n+   INFO should have relevant fields set, and then finished using\n+   gdbarch_info_fill.\n \n    Returns the corresponding architecture, or NULL if no matching\n    architecture was found.  */"
    },
    {
      "sha": "d9332c2103e29fc6fec60de398b5f802b3457982",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -1533,18 +1533,20 @@ struct gdbarch_list\n \n struct gdbarch_info\n {\n-  /* Use default: NULL (ZERO).  */\n-  const struct bfd_arch_info *bfd_arch_info;\n+  gdbarch_info ()\n+    /* Ensure the union is zero-initialized.  Relies on the fact that there's\n+       no member larger than TDESC_DATA.  */\n+    : tdesc_data ()\n+  {}\n+\n+  const struct bfd_arch_info *bfd_arch_info = nullptr;\n \n-  /* Use default: BFD_ENDIAN_UNKNOWN (NB: is not ZERO).  */\n-  enum bfd_endian byte_order;\n+  enum bfd_endian byte_order = BFD_ENDIAN_UNKNOWN;\n \n-  enum bfd_endian byte_order_for_code;\n+  enum bfd_endian byte_order_for_code = BFD_ENDIAN_UNKNOWN;\n \n-  /* Use default: NULL (ZERO).  */\n-  bfd *abfd;\n+  bfd *abfd = nullptr;\n \n-  /* Use default: NULL (ZERO).  */\n   union\n     {\n       /* Architecture-specific target description data.  Numerous targets\n@@ -1557,11 +1559,9 @@ struct gdbarch_info\n       int *id;\n     };\n \n-  /* Use default: GDB_OSABI_UNINITIALIZED (-1).  */\n-  enum gdb_osabi osabi;\n+  enum gdb_osabi osabi = GDB_OSABI_UNKNOWN;\n \n-  /* Use default: NULL (ZERO).  */\n-  const struct target_desc *target_desc;\n+  const struct target_desc *target_desc = nullptr;\n };\n \n typedef struct gdbarch *(gdbarch_init_ftype) (struct gdbarch_info info, struct gdbarch_list *arches);\n@@ -1637,8 +1637,8 @@ extern int gdbarch_update_p (struct gdbarch_info info);\n \n /* Helper function.  Find an architecture matching info.\n \n-   INFO should be initialized using gdbarch_info_init, relevant fields\n-   set, and then finished using gdbarch_info_fill.\n+   INFO should have relevant fields set, and then finished using\n+   gdbarch_info_fill.\n \n    Returns the corresponding architecture, or NULL if no matching\n    architecture was found.  */"
    },
    {
      "sha": "c1d6139490d8c1b9946d0e7d68729406bf5ee738",
      "filename": "gdb/i386-darwin-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/i386-darwin-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/i386-darwin-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-darwin-nat.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -479,7 +479,6 @@ darwin_check_osabi (darwin_inferior *inf, thread_t thread)\n     {\n       /* Attaching to a process.  Let's figure out what kind it is.  */\n       x86_thread_state_t gp_regs;\n-      struct gdbarch_info info;\n       unsigned int gp_count = x86_THREAD_STATE_COUNT;\n       kern_return_t ret;\n \n@@ -491,7 +490,7 @@ darwin_check_osabi (darwin_inferior *inf, thread_t thread)\n \t  return;\n \t}\n \n-      gdbarch_info_init (&info);\n+      gdbarch_info info;\n       gdbarch_info_fill (&info);\n       info.byte_order = gdbarch_byte_order (target_gdbarch ());\n       info.osabi = GDB_OSABI_DARWIN;"
    },
    {
      "sha": "e1c70d553fde27c9fe12c398c108d24e8ad9f5ca",
      "filename": "gdb/inferior.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -747,7 +747,6 @@ add_inferior_with_spaces (void)\n   struct address_space *aspace;\n   struct program_space *pspace;\n   struct inferior *inf;\n-  struct gdbarch_info info;\n \n   /* If all inferiors share an address space on this system, this\n      doesn't really return a new address space; otherwise, it\n@@ -760,7 +759,7 @@ add_inferior_with_spaces (void)\n \n   /* Setup the inferior's initial arch, based on information obtained\n      from the global \"set ...\" options.  */\n-  gdbarch_info_init (&info);\n+  gdbarch_info info;\n   inf->gdbarch = gdbarch_find_by_info (info);\n   /* The \"set ...\" options reject invalid settings, so we should\n      always have a valid arch by now.  */"
    },
    {
      "sha": "2aee4f10b316d45bc2b5dc554f805dfb2e4bd111",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -865,7 +865,6 @@ set_mips64_transfers_32bit_regs (const char *args, int from_tty,\n \t\t\t\t struct cmd_list_element *c)\n {\n   struct gdbarch_info info;\n-  gdbarch_info_init (&info);\n   /* FIXME: cagney/2003-11-15: Should be setting a field in \"info\"\n      instead of relying on globals.  Doing that would let generic code\n      handle the search for this specific architecture.  */\n@@ -6918,7 +6917,6 @@ static void\n set_mipsfpu_single_command (const char *args, int from_tty)\n {\n   struct gdbarch_info info;\n-  gdbarch_info_init (&info);\n   mips_fpu_type = MIPS_FPU_SINGLE;\n   mips_fpu_type_auto = 0;\n   /* FIXME: cagney/2003-11-15: Should be setting a field in \"info\"\n@@ -6932,7 +6930,6 @@ static void\n set_mipsfpu_double_command (const char *args, int from_tty)\n {\n   struct gdbarch_info info;\n-  gdbarch_info_init (&info);\n   mips_fpu_type = MIPS_FPU_DOUBLE;\n   mips_fpu_type_auto = 0;\n   /* FIXME: cagney/2003-11-15: Should be setting a field in \"info\"\n@@ -6946,7 +6943,6 @@ static void\n set_mipsfpu_none_command (const char *args, int from_tty)\n {\n   struct gdbarch_info info;\n-  gdbarch_info_init (&info);\n   mips_fpu_type = MIPS_FPU_NONE;\n   mips_fpu_type_auto = 0;\n   /* FIXME: cagney/2003-11-15: Should be setting a field in \"info\"\n@@ -8790,7 +8786,6 @@ mips_abi_update (const char *ignore_args,\n \n   /* Force the architecture to update, and (if it's a MIPS architecture)\n      mips_gdbarch_init will take care of the rest.  */\n-  gdbarch_info_init (&info);\n   gdbarch_update_p (info);\n }\n "
    },
    {
      "sha": "aabf895c04514cbe935d266368eedac7f14084c5",
      "filename": "gdb/osabi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/osabi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/osabi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/osabi.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -598,8 +598,6 @@ generic_elf_osabi_sniffer (bfd *abfd)\n static void\n set_osabi (const char *args, int from_tty, struct cmd_list_element *c)\n {\n-  struct gdbarch_info info;\n-\n   if (strcmp (set_osabi_string, \"auto\") == 0)\n     user_osabi_state = osabi_auto;\n   else if (strcmp (set_osabi_string, \"default\") == 0)\n@@ -630,7 +628,7 @@ set_osabi (const char *args, int from_tty, struct cmd_list_element *c)\n \n   /* NOTE: At some point (true multiple architectures) we'll need to be more\n      graceful here.  */\n-  gdbarch_info_init (&info);\n+  gdbarch_info info;\n   if (! gdbarch_update_p (info))\n     internal_error (__FILE__, __LINE__, _(\"Updating OS ABI failed.\"));\n }"
    },
    {
      "sha": "ee00a600343a41b3e973d5d7189e433c7c5d947c",
      "filename": "gdb/rs6000-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/rs6000-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/rs6000-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-nat.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -558,7 +558,6 @@ rs6000_nat_target::create_inferior (const char *exec_file,\n   enum bfd_architecture arch;\n   unsigned long mach;\n   bfd abfd;\n-  struct gdbarch_info info;\n \n   inf_ptrace_target::create_inferior (exec_file, allargs, env, from_tty);\n \n@@ -593,7 +592,7 @@ rs6000_nat_target::create_inferior (const char *exec_file,\n \n   bfd_default_set_arch_mach (&abfd, arch, mach);\n \n-  gdbarch_info_init (&info);\n+  gdbarch_info info;\n   info.bfd_arch_info = bfd_get_arch_info (&abfd);\n   info.abfd = current_program_space->exec_bfd ();\n "
    },
    {
      "sha": "a629450d746fa8729a0f82ae4acf73ecaf1dab25",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -7260,7 +7260,6 @@ powerpc_set_soft_float (const char *args, int from_tty,\n   struct gdbarch_info info;\n \n   /* Update the architecture.  */\n-  gdbarch_info_init (&info);\n   if (!gdbarch_update_p (info))\n     internal_error (__FILE__, __LINE__, _(\"could not update architecture\"));\n }\n@@ -7269,7 +7268,6 @@ static void\n powerpc_set_vector_abi (const char *args, int from_tty,\n \t\t\tstruct cmd_list_element *c)\n {\n-  struct gdbarch_info info;\n   int vector_abi;\n \n   for (vector_abi = POWERPC_VEC_AUTO;\n@@ -7287,7 +7285,7 @@ powerpc_set_vector_abi (const char *args, int from_tty,\n \t\t    powerpc_vector_abi_string);\n \n   /* Update the architecture.  */\n-  gdbarch_info_init (&info);\n+  gdbarch_info info;\n   if (!gdbarch_update_p (info))\n     internal_error (__FILE__, __LINE__, _(\"could not update architecture\"));\n }"
    },
    {
      "sha": "0eef134d4841bcf57fbd6a800743d058d55c2388",
      "filename": "gdb/selftest-arch.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/selftest-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/selftest-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/selftest-arch.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -64,7 +64,6 @@ struct gdbarch_selftest : public selftest\n \t  {\n \t    struct gdbarch_info info;\n \n-\t    gdbarch_info_init (&info);\n \t    info.bfd_arch_info = bfd_scan_arch (arches[i]);\n \n \t    struct gdbarch *gdbarch = gdbarch_find_by_info (info);"
    },
    {
      "sha": "f94ace756d4df234fe2faec56bcd44be9e17529a",
      "filename": "gdb/target-descriptions.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/target-descriptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b447dd03c16d51c7b41c9af0756fc9db4ad95f0d/gdb/target-descriptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-descriptions.c?ref=b447dd03c16d51c7b41c9af0756fc9db4ad95f0d",
      "patch": "@@ -555,7 +555,6 @@ target_find_description (void)\n     {\n       struct gdbarch_info info;\n \n-      gdbarch_info_init (&info);\n       info.target_desc = tdesc_info->tdesc;\n       if (!gdbarch_update_p (info))\n \twarning (_(\"Architecture rejected target-supplied description\"));\n@@ -592,7 +591,6 @@ target_clear_description (void)\n   tdesc_info->tdesc = nullptr;\n \n   gdbarch_info info;\n-  gdbarch_info_init (&info);\n   if (!gdbarch_update_p (info))\n     internal_error (__FILE__, __LINE__,\n \t\t    _(\"Could not remove target-supplied description\"));"
    }
  ]
}