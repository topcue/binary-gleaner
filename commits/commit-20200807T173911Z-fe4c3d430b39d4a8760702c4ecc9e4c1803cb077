{
  "sha": "fe4c3d430b39d4a8760702c4ecc9e4c1803cb077",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmU0YzNkNDMwYjM5ZDRhODc2MDcwMmM0ZWNjOWU0YzE4MDNjYjA3Nw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-07T15:29:45Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-07T17:39:11Z"
    },
    "message": "gdb: fix whitespace issues in ChangeLog\n\nChange-Id: Iea4bd2096bb994ec4ea9145cbe316aa345e8c6db",
    "tree": {
      "sha": "63cb5b62ebd655c83b3e2b8c50d532640dc86f2e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/63cb5b62ebd655c83b3e2b8c50d532640dc86f2e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fe4c3d430b39d4a8760702c4ecc9e4c1803cb077",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe4c3d430b39d4a8760702c4ecc9e4c1803cb077",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fe4c3d430b39d4a8760702c4ecc9e4c1803cb077",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe4c3d430b39d4a8760702c4ecc9e4c1803cb077/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a52b3ae2b101b0fefcfa8c4534472525bcbfdf3d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a52b3ae2b101b0fefcfa8c4534472525bcbfdf3d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a52b3ae2b101b0fefcfa8c4534472525bcbfdf3d"
    }
  ],
  "stats": {
    "total": 62,
    "additions": 31,
    "deletions": 31
  },
  "files": [
    {
      "sha": "0b096fc926fce8eb1c4e2482d267fdaacba0c833",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 30,
      "deletions": 30,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe4c3d430b39d4a8760702c4ecc9e4c1803cb077/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe4c3d430b39d4a8760702c4ecc9e4c1803cb077/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fe4c3d430b39d4a8760702c4ecc9e4c1803cb077",
      "patch": "@@ -124,35 +124,35 @@\n \n 2020-08-06  Caroline Tice <cmtice@google.com>\n \n-        * dwarf2/read.c (struct dwo_file): Update comment on 'sections' field.\n-        (struct dwp_sections): Update field comments.  Add loclists and\n-        rnglists fields.\n-        (struct virtual_v2_dwo_sections): Rename struct to\n-        'virtual_v2_or_v5_dwo_sections'; update comments at top of struct; add\n-        size & offset fields for loclists and rnglists.\n-        (struct dwp_hash_table): Add a 'v5' struct field to the union section.\n-        (create_debug_type_hash_table): Add 'DW_UT_split_type' to the check for\n-        skipping dummy type units.\n-        (create_dwp_hash_table): Update the large comment above the function to\n-        discuss Version 5 DWP files as well, with references.  Update all the\n-        version checks in the function to check for version 5 as well.  Add new\n-        section at the end to create dwp hash table for version 5.\n-        (create_dwp_v2_section): Rename function to\n-        'create_dwp_v2_or_v5_section'.  Update function comment appropriately.\n-        Add V5 to error message text.\n-        (create_dwo_unit_in_dwp_v2): Change calls to create_dwp_v2_section\n-        into calls to create_dwp_v2_or_v5_section.\n-        (create_dwo_unit_in_dwp_v5): New function.\n-        (lookup_dwo_unit_in_dwp): Update conditional statement to explicitly\n-        check for version2; add else clause to handle version 5.\n-        (open_and_init_dwo_file): Add code to check dwarf version & only call\n-        create_debug_types_hash_table (with sections.types) if version is not 5;\n-        else call create_debug_type_hash_table, with sections.info.\n-        (dwarf2_locate_v2_dwp_sections): Update function comment to mention\n-        version 5.\n-        (dwarf2_locate_v5_dwp_sections): New function.\n-        (open_and_init_dwp_file): Add else-if clause for version 5 to call\n-        bfd_map_over_sections with dwarf2_locate_v5_dwp_sections.\n+\t* dwarf2/read.c (struct dwo_file): Update comment on 'sections' field.\n+\t(struct dwp_sections): Update field comments.  Add loclists and\n+\trnglists fields.\n+\t(struct virtual_v2_dwo_sections): Rename struct to\n+\t'virtual_v2_or_v5_dwo_sections'; update comments at top of struct; add\n+\tsize & offset fields for loclists and rnglists.\n+\t(struct dwp_hash_table): Add a 'v5' struct field to the union section.\n+\t(create_debug_type_hash_table): Add 'DW_UT_split_type' to the check for\n+\tskipping dummy type units.\n+\t(create_dwp_hash_table): Update the large comment above the function to\n+\tdiscuss Version 5 DWP files as well, with references.  Update all the\n+\tversion checks in the function to check for version 5 as well.  Add new\n+\tsection at the end to create dwp hash table for version 5.\n+\t(create_dwp_v2_section): Rename function to\n+\t'create_dwp_v2_or_v5_section'.  Update function comment appropriately.\n+\tAdd V5 to error message text.\n+\t(create_dwo_unit_in_dwp_v2): Change calls to create_dwp_v2_section\n+\tinto calls to create_dwp_v2_or_v5_section.\n+\t(create_dwo_unit_in_dwp_v5): New function.\n+\t(lookup_dwo_unit_in_dwp): Update conditional statement to explicitly\n+\tcheck for version2; add else clause to handle version 5.\n+\t(open_and_init_dwo_file): Add code to check dwarf version & only call\n+\tcreate_debug_types_hash_table (with sections.types) if version is not 5;\n+\telse call create_debug_type_hash_table, with sections.info.\n+\t(dwarf2_locate_v2_dwp_sections): Update function comment to mention\n+\tversion 5.\n+\t(dwarf2_locate_v5_dwp_sections): New function.\n+\t(open_and_init_dwp_file): Add else-if clause for version 5 to call\n+\tbfd_map_over_sections with dwarf2_locate_v5_dwp_sections.\n \n 2020-08-06  Simon Marchi  <simon.marchi@efficios.com>\n \n@@ -516,7 +516,7 @@\n \t\"maint print\" commands.\n \n 2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n-    \n+\n \t* linux-tdep.c (dump_note_entry_p): New function.\n \t(linux_dump_mapping_p_ftype): New typedef.\n \t(linux_find_memory_regions_full): Add new parameter,"
    },
    {
      "sha": "c3765b582208f386bc8a10ef6b2f55dbee0b5182",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe4c3d430b39d4a8760702c4ecc9e4c1803cb077/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe4c3d430b39d4a8760702c4ecc9e4c1803cb077/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=fe4c3d430b39d4a8760702c4ecc9e4c1803cb077",
      "patch": "@@ -512,7 +512,7 @@\n \n \t* lib/gdb.exp (gdb_test_multiline): New, moved from gdb-guile.exp,\n \thave a input seq nr in each pass message.\n-        * lib/gdb-guile.exp (gdb_test_multiline): Move to gdb.exp.\n+\t* lib/gdb-guile.exp (gdb_test_multiline): Move to gdb.exp.\n \t* lib/gdb-python.exp (gdb_py_test_multiple): Remove.\n \t* gdb.python/python.exp: Make test names unique,\n \tuse gdb_test_multiline instead of gdb_py_test_multiple,"
    }
  ]
}