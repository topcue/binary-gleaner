{
  "sha": "6a1939f577eb3dce3b7037ee71895b7d489838aa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmExOTM5ZjU3N2ViM2RjZTNiNzAzN2VlNzE4OTViN2Q0ODk4MzhhYQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-01-13T15:18:57Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-01-13T15:18:57Z"
    },
    "message": "Add test driver for the debuginfod support in the binutils sub-directory.\n\n\t* testsuite/binutils-all/debuginfod.exp: New tests.",
    "tree": {
      "sha": "c04ace515cd03f09fc5ae690af4d056f3baada88",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c04ace515cd03f09fc5ae690af4d056f3baada88"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6a1939f577eb3dce3b7037ee71895b7d489838aa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a1939f577eb3dce3b7037ee71895b7d489838aa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6a1939f577eb3dce3b7037ee71895b7d489838aa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a1939f577eb3dce3b7037ee71895b7d489838aa/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1d67fe3b6e696fccb902d9919b9e58b7299a3205",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d67fe3b6e696fccb902d9919b9e58b7299a3205",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1d67fe3b6e696fccb902d9919b9e58b7299a3205"
    }
  ],
  "stats": {
    "total": 193,
    "additions": 193,
    "deletions": 0
  },
  "files": [
    {
      "sha": "863443556d99fd8b3a348315d65068ac540e4b0e",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a1939f577eb3dce3b7037ee71895b7d489838aa/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a1939f577eb3dce3b7037ee71895b7d489838aa/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=6a1939f577eb3dce3b7037ee71895b7d489838aa",
      "patch": "@@ -1,3 +1,7 @@\n+2020-01-13  Nick Clifton  <nickc@redhat.com>\n+\n+\t* testsuite/binutils-all/debuginfod.exp: New tests.\n+\n 2020-01-13  Thomas Troeger  <tstroege@gmx.de>\n \n \t* objdump.c (visualize_jumps, color_output, extended_color_output)"
    },
    {
      "sha": "596fcf58df802952845e1c1a3412c539907ebbcb",
      "filename": "binutils/testsuite/binutils-all/debuginfod.exp",
      "status": "added",
      "additions": 189,
      "deletions": 0,
      "changes": 189,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a1939f577eb3dce3b7037ee71895b7d489838aa/binutils/testsuite/binutils-all/debuginfod.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a1939f577eb3dce3b7037ee71895b7d489838aa/binutils/testsuite/binutils-all/debuginfod.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/debuginfod.exp?ref=6a1939f577eb3dce3b7037ee71895b7d489838aa",
      "patch": "@@ -0,0 +1,189 @@\n+# Copyright (C) 2002-2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.\n+\n+# test debuginfod with readelf and objdump\n+\n+set test \"debuginfod\"\n+\n+if {[which debuginfod] == 0} {\n+    unsupported \"$test (not found)\"\n+    return\n+}\n+\n+if {[which curl] == 0} {\n+    unsupported \"$test (curl not found)\"\n+    return\n+}\n+\n+if { ![is_elf_format] } {\n+    unsupported \"$test (unsupported target)\"\n+}\n+\n+if { [which $OBJDUMP] == 0} {\n+    perror \"$test $OBJDUMP (does not exist)\"\n+    return\n+}\n+\n+ if { [which $READELF] == 0} {\n+    perror \"$test $READELF (does not exist)\"\n+    return\n+}\n+\n+# Compile testprog.c, move the debuginfo to a separate file and add .gnu_debuglink.\n+if { [target_compile $srcdir/$subdir/testprog.c tmpdir/testprog executable debug] != \"\"} {\n+    fail \"$test (compilation failed)\"\n+    return\n+}\n+\n+if { [binutils_run $OBJCOPY \"--only-keep-debug tmpdir/testprog tmpdir/testprog.debug\"] != \"\" } {\n+    fail \"$test (create separate debug info file)\"\n+    return\n+}\n+\n+if { [binutils_run $OBJCOPY \"--strip-debug tmpdir/testprog\"] != \"\" } {\n+    fail \"$test (strip debug info)\"\n+    return\n+}\n+\n+if { [binutils_run $OBJCOPY \"--add-gnu-debuglink=tmpdir/testprog.debug tmpdir/testprog\"] != \"\" } {\n+    fail \"$test (add debuglink)\"\n+    return\n+}\n+\n+# Assemble an elf file with a debugaltlink\n+if { ![binutils_assemble $srcdir/$subdir/debuglink.s tmpdir/debuglink.o] } {\n+    fail \"$test (assemble debuglink)\"\n+}\n+\n+if { ![binutils_assemble $srcdir/$subdir/linkdebug.s tmpdir/linkdebug.debug] } {\n+    fail \"$test (assemble linkdebug)\"\n+}\n+\n+# Find an unused port\n+set port [exec sh -c \"while true; do PORT=`expr '(' \\$RANDOM % 1000 ')' + 9000`; ss -atn | fgrep \\\":\\$PORT\\\" || break; done; echo \\$PORT\"]\n+\n+# Specify the directory that files retrieved from the server are written to.\n+set cache [file join [pwd] \"tmpdir/.debuginfod_cache\"]\n+\n+set ::env(DEBUGINFOD_URLS) http://127.0.0.1:$port\n+set ::env(DEBUGINFOD_TIMEOUT) 30\n+set ::env(DEBUGINFOD_CACHE_PATH) $cache\n+\n+# Move debug files into another directory so that readelf and objdump cannot\n+# find them without debuginfod.\n+file mkdir tmpdir/dbg\n+file rename -force tmpdir/testprog.debug tmpdir/dbg\n+file rename -force tmpdir/linkdebug.debug tmpdir/dbg\n+\n+# Remove an old cache if it exists\n+file delete -force $cache\n+\n+# Check whether objdump and readelf are configured with debuginfod.\n+# To check this we attempt to follow a broken debuglink. If configured\n+# with debuginfod the output will contain the debuginfod URLs that were\n+# queried (these queries fail since the server is not yet running).\n+set conf_objdump [binutils_run $OBJDUMP \"-WK tmpdir/testprog\"]\n+set conf_readelf [binutils_run $READELF \"-wK tmpdir/testprog\"]\n+\n+set debuginfod_pid 0\n+\n+# Kill the server if we abort early\n+proc sigint_handler {} {\n+    global debuginfod_pid\n+\n+    if { $debuginfod_pid != 0 } {\n+        catch {exec kill -INT $debuginfod_pid}\n+    }\n+\n+    exit\n+}\n+\n+trap sigint_handler INT\n+\n+# Start a debuginfod server.\n+set debuginfod_pid [exec debuginfod -p $port -F tmpdir/dbg 2>/dev/null &]\n+\n+if { !$debuginfod_pid } {\n+    fail \"$test (server init)\"\n+    return\n+}\n+\n+# Wait for debuginfod indicate it's ready.\n+set ready 0\n+for {set timelim 30} {$timelim != 0} {incr timelim -1} {\n+    sleep 1\n+    set want \".*ready 1.*\"\n+    catch {exec curl -s http://127.0.0.1:$port/metrics} got\n+\n+    if { [regexp $want $got] } {\n+      set ready 1\n+      break\n+    }\n+}\n+\n+if { !$ready } {\n+    fail \"$test (server ready)\"\n+    catch {exec kill -INT $debuginfod_pid}\n+    return\n+}\n+\n+# Test whether prog can fetch separate debuginfo using debuginfod\n+# if it's configured to do so.\n+proc test_fetch_debuglink { prog progargs } {\n+    global test\n+    global cache\n+\n+    set got [binutils_run $prog \"$progargs tmpdir/testprog\"]\n+\n+    if { [regexp \".*Found separate debug info file.*Contents\\[^\\n\\]*loaded from\\[^\\n\\]*$cache.*\" $got] } {\n+       pass \"$test ($prog debuglink)\"\n+    } else {\n+       fail \"$test ($prog debuglink)\"\n+    }\n+}\n+\n+# Test whether prog can fetch debugaltlink files using debuginfod\n+# if it's configured to do so.\n+proc test_fetch_debugaltlink { prog progargs } {\n+    global test\n+    global cache\n+\n+    set got [binutils_run $prog \"$progargs tmpdir/debuglink.o\"]\n+    set buildid \"00112233445566778899aabbccddeeff0123456789abcdef\"\n+\n+    if { [regexp \".*Found separate debug info file\\[^\\n\\]*$cache/$buildid\" $got] } {\n+        pass \"$test ($prog debugaltlink)\"\n+    } else {\n+        fail \"$test ($prog debugaltlink)\"\n+    }\n+}\n+\n+if { [regexp \".*DEBUGINFOD.*\" $conf_objdump] } {\n+    test_fetch_debuglink $OBJDUMP \"-W\"\n+    test_fetch_debugaltlink $OBJDUMP \"-WK\"\n+} else {\n+    untested \"$test (objdump not configured with debuginfod)\"\n+}\n+\n+if { [regexp \".*DEBUGINFOD.*\" $conf_readelf] } {\n+    test_fetch_debuglink $READELF \"-w\"\n+    test_fetch_debugaltlink $READELF \"-wK\"\n+} else {\n+    untested \"$test (readelf not configured with debuginfod)\"\n+}\n+\n+file delete -force $cache\n+catch {exec kill -INT $debuginfod_pid}"
    }
  ]
}