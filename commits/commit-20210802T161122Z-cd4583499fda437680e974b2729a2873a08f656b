{
  "sha": "cd4583499fda437680e974b2729a2873a08f656b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2Q0NTgzNDk5ZmRhNDM3NjgwZTk3NGIyNzI5YTI4NzNhMDhmNjU2Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-07-01T14:20:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-08-02T16:11:22Z"
    },
    "message": "Remove add_symbols_from_enclosing_procs\n\nI noticed that add_symbols_from_enclosing_procs is empty, and can be\nremoved.  The one caller, ada_add_local_symbols, can also be\nsimplified, removing some code that, I think, was an incorrect attempt\nto handle nested functions.",
    "tree": {
      "sha": "62d4c266aedffc9457b5289a1d2897e50a0751d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/62d4c266aedffc9457b5289a1d2897e50a0751d6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cd4583499fda437680e974b2729a2873a08f656b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd4583499fda437680e974b2729a2873a08f656b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cd4583499fda437680e974b2729a2873a08f656b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd4583499fda437680e974b2729a2873a08f656b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4d0754c5f572b01cf2fe6c8ab292adba83331cbc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d0754c5f572b01cf2fe6c8ab292adba83331cbc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4d0754c5f572b01cf2fe6c8ab292adba83331cbc"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 2,
    "deletions": 28
  },
  "files": [
    {
      "sha": "f45384a68cb40a09da991e2649f030b0e18d63db",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 28,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd4583499fda437680e974b2729a2873a08f656b/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd4583499fda437680e974b2729a2873a08f656b/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=cd4583499fda437680e974b2729a2873a08f656b",
      "patch": "@@ -4522,19 +4522,6 @@ ada_lookup_simple_minsym (const char *name)\n   return result;\n }\n \n-/* For all subprograms that statically enclose the subprogram of the\n-   selected frame, add symbols matching identifier NAME in DOMAIN\n-   and their blocks to the list of data in RESULT, as for\n-   ada_add_block_symbols (q.v.).   If WILD_MATCH_P, treat as NAME\n-   with a wildcard prefix.  */\n-\n-static void\n-add_symbols_from_enclosing_procs (std::vector<struct block_symbol> &result,\n-\t\t\t\t  const lookup_name_info &lookup_name,\n-\t\t\t\t  domain_enum domain)\n-{\n-}\n-\n /* True if TYPE is definitely an artificial type supplied to a symbol\n    for which no debugging information was given in the symbol file.  */\n \n@@ -4937,25 +4924,17 @@ remove_irrelevant_renamings (std::vector<struct block_symbol> *syms,\n }\n \n /* Add to RESULT all symbols from BLOCK (and its super-blocks)\n-   whose name and domain match NAME and DOMAIN respectively.\n-   If no match was found, then extend the search to \"enclosing\"\n-   routines (in other words, if we're inside a nested function,\n-   search the symbols defined inside the enclosing functions).\n-   If WILD_MATCH_P is nonzero, perform the naming matching in\n-   \"wild\" mode (see function \"wild_match\" for more info).\n+   whose name and domain match LOOKUP_NAME and DOMAIN respectively.\n \n-   Note: This function assumes that RESULT has 0 (zero) element in it.  */\n+   Note: This function assumes that RESULT is empty.  */\n \n static void\n ada_add_local_symbols (std::vector<struct block_symbol> &result,\n \t\t       const lookup_name_info &lookup_name,\n \t\t       const struct block *block, domain_enum domain)\n {\n-  int block_depth = 0;\n-\n   while (block != NULL)\n     {\n-      block_depth += 1;\n       ada_add_block_symbols (result, block, lookup_name, domain, NULL);\n \n       /* If we found a non-function match, assume that's the one.  */\n@@ -4964,11 +4943,6 @@ ada_add_local_symbols (std::vector<struct block_symbol> &result,\n \n       block = BLOCK_SUPERBLOCK (block);\n     }\n-\n-  /* If no luck so far, try to find NAME as a local symbol in some lexically\n-     enclosing subprogram.  */\n-  if (result.empty () && block_depth > 2)\n-    add_symbols_from_enclosing_procs (result, lookup_name, domain);\n }\n \n /* An object of this type is used as the callback argument when"
    }
  ]
}