{
  "sha": "b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjRhN2Q0ZmNmZWY0ZTBjYTNjNWRlNTJlZmJhZjMzYzFjOTgyOTVlYg==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-06-15T18:11:07Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-24T17:55:41Z"
    },
    "message": "AArch64: Add unit testing for logical tag set/get operations\n\nAdd some unit testing to exercise setting/getting logical tags in the\nAArch64 implementation.\n\ngdb/ChangeLog:\n\n2021-03-24  Luis Machado  <luis.machado@linaro.org>\n\n\t* aarch64-linux-tdep.c: Include gdbsupport/selftest.h.\n\t(aarch64_linux_ltag_tests): New function.\n\t(_initialize_aarch64_linux_tdep): Register aarch64_linux_ltag_tests.",
    "tree": {
      "sha": "5387506bf4d04979aa0230016b4190b8de066e77",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5387506bf4d04979aa0230016b4190b8de066e77"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c7782e50b13b4ca522dd6da2c7c22760c9603e6a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c7782e50b13b4ca522dd6da2c7c22760c9603e6a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c7782e50b13b4ca522dd6da2c7c22760c9603e6a"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 37,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ce3373ba9d0d5476a34d97e9c596d8733f8a8112",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-24  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* aarch64-linux-tdep.c: Include gdbsupport/selftest.h.\n+\t(aarch64_linux_ltag_tests): New function.\n+\t(_initialize_aarch64_linux_tdep): Register aarch64_linux_ltag_tests.\n+\n 2021-03-24  Luis Machado  <luis.machado@linaro.org>\n \n \t* aarch64-linux-tdep.c: Include target.h, arch-utils.h, value.h."
    },
    {
      "sha": "e71f062e25d58ee810945c46448e0619d75f91e9",
      "filename": "gdb/aarch64-linux-tdep.c",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb/gdb/aarch64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb/gdb/aarch64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-tdep.c?ref=b4a7d4fcfef4e0ca3c5de52efbaf33c1c98295eb",
      "patch": "@@ -51,6 +51,8 @@\n #include \"arch-utils.h\"\n #include \"value.h\"\n \n+#include \"gdbsupport/selftest.h\"\n+\n /* Signal frame handling.\n \n       +------------+  ^\n@@ -1940,10 +1942,39 @@ aarch64_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   set_gdbarch_gcc_target_options (gdbarch, aarch64_linux_gcc_target_options);\n }\n \n+#if GDB_SELF_TEST\n+\n+namespace selftests {\n+\n+/* Verify functions to read and write logical tags.  */\n+\n+static void\n+aarch64_linux_ltag_tests (void)\n+{\n+  /* We have 4 bits of tags, but we test writing all the bits of the top\n+     byte of address.  */\n+  for (int i = 0; i < 1 << 8; i++)\n+    {\n+      CORE_ADDR addr = ((CORE_ADDR) i << 56) | 0xdeadbeef;\n+      SELF_CHECK (aarch64_mte_get_ltag (addr) == (i & 0xf));\n+\n+      addr = aarch64_mte_set_ltag (0xdeadbeef, i);\n+      SELF_CHECK (addr = ((CORE_ADDR) (i & 0xf) << 56) | 0xdeadbeef);\n+    }\n+}\n+\n+} // namespace selftests\n+#endif /* GDB_SELF_TEST */\n+\n void _initialize_aarch64_linux_tdep ();\n void\n _initialize_aarch64_linux_tdep ()\n {\n   gdbarch_register_osabi (bfd_arch_aarch64, 0, GDB_OSABI_LINUX,\n \t\t\t  aarch64_linux_init_abi);\n+\n+#if GDB_SELF_TEST\n+  selftests::register_test (\"aarch64-linux-tagged-address\",\n+\t\t\t    selftests::aarch64_linux_ltag_tests);\n+#endif\n }"
    }
  ]
}