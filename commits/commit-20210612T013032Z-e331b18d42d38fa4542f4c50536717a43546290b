{
  "sha": "e331b18d42d38fa4542f4c50536717a43546290b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTMzMWIxOGQ0MmQzOGZhNDU0MmY0YzUwNTM2NzE3YTQzNTQ2MjkwYg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-06-12T01:24:21Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-06-12T01:30:32Z"
    },
    "message": "Re: readelf section reading\n\nFix commit 4de91c10cdd9, which cached the single section header read\nto pick up file header extension fields.  Also, testing e_shoff in\nget_section_headers opened a hole for fuzzers where we'd end up with\nsegfaults due to non-zero e_shnum but NULL section_headers.\n\n\t* readelf.c (get_section_headers): Don't test e_shoff here, leave\n\tthat to get_32bit_section_headers or get_64bit_section_headers.\n\t(process_object): Throw away section header read to print file\n\theader extension.",
    "tree": {
      "sha": "1da359f3de751d289b763bd1473318af59effe19",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1da359f3de751d289b763bd1473318af59effe19"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e331b18d42d38fa4542f4c50536717a43546290b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e331b18d42d38fa4542f4c50536717a43546290b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e331b18d42d38fa4542f4c50536717a43546290b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e331b18d42d38fa4542f4c50536717a43546290b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6fe7f5c4161053d663d1be34308be2e5f1531fbc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6fe7f5c4161053d663d1be34308be2e5f1531fbc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6fe7f5c4161053d663d1be34308be2e5f1531fbc"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 12,
    "deletions": 3
  },
  "files": [
    {
      "sha": "fcf6056861802ae1234a40688ce08f14c00c9a08",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e331b18d42d38fa4542f4c50536717a43546290b/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e331b18d42d38fa4542f4c50536717a43546290b/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=e331b18d42d38fa4542f4c50536717a43546290b",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-12  Alan Modra  <amodra@gmail.com>\n+\n+\t* readelf.c (get_section_headers): Don't test e_shoff here, leave\n+\tthat to get_32bit_section_headers or get_64bit_section_headers.\n+\t(process_object): Throw away section header read to print file\n+\theader extension.\n+\n 2021-06-11  Alan Modra  <amodra@gmail.com>\n \n \t* readelf.c (struct filedata): Move archive_file_offset and"
    },
    {
      "sha": "4217ea3b5b03a1f23deef3b844ae14d4c69e6194",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e331b18d42d38fa4542f4c50536717a43546290b/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e331b18d42d38fa4542f4c50536717a43546290b/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=e331b18d42d38fa4542f4c50536717a43546290b",
      "patch": "@@ -5859,9 +5859,6 @@ get_section_headers (Filedata *filedata, bool probe)\n   if (filedata->section_headers != NULL)\n     return true;\n \n-  if (filedata->file_header.e_shoff == 0)\n-    return true;\n-\n   if (is_32bit_elf)\n     return get_32bit_section_headers (filedata, probe);\n   else\n@@ -21361,6 +21358,11 @@ process_object (Filedata * filedata)\n       goto out;\n     }\n \n+  /* Throw away the single section header read above, so that we\n+     re-read the entire set.  */\n+  free (filedata->section_headers);\n+  filedata->section_headers = NULL;\n+\n   if (! process_section_headers (filedata))\n     {\n       /* Without loaded section headers we cannot process lots of things.  */"
    }
  ]
}