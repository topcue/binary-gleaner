{
  "sha": "5fcee43a960f0735c53a7c24823b2e4bc1460b9f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWZjZWU0M2E5NjBmMDczNWM1M2E3YzI0ODIzYjJlNGJjMTQ2MGI5Zg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-18T03:11:56Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:43Z"
    },
    "message": "Introduce tui_win_info::make_visible_with_new_height\n\nThis changes make_visible_with_new_height to be a method on\ntui_win_info, letting us remove a spot that checks the window type.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-win.c (tui_source_window_base::update_tab_width): Call\n\tmake_visible_with_new_height method.\n\t(tui_win_info::make_visible_with_new_height): New method.\n\t(tui_source_window_base::do_make_visible_with_new_height)\n\t(tui_data_window::do_make_visible_with_new_height)\n\t(tui_cmd_window::do_make_visible_with_new_height): New methods.\n\t(make_visible_with_new_height): Remove.\n\t(tui_resize_all, tui_adjust_win_heights): Use\n\tmake_visible_with_new_height method.\n\t* tui/tui-data.h (struct tui_win_info)\n\t<do_make_visible_with_new_height, make_visible_with_new_height>:\n\tNew methods.\n\t(struct tui_source_window_base, struct tui_data_window)\n\t(struct tui_cmd_window) <do_make_visible_with_new_height>: New\n\tmethods.",
    "tree": {
      "sha": "0d7da0fd71177323352c4eac6630a06556653f19",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0d7da0fd71177323352c4eac6630a06556653f19"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5fcee43a960f0735c53a7c24823b2e4bc1460b9f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5fcee43a960f0735c53a7c24823b2e4bc1460b9f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5fcee43a960f0735c53a7c24823b2e4bc1460b9f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5fcee43a960f0735c53a7c24823b2e4bc1460b9f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d83f1fe65da075aa08ac7d6b6ef3508587c94600",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d83f1fe65da075aa08ac7d6b6ef3508587c94600",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d83f1fe65da075aa08ac7d6b6ef3508587c94600"
    }
  ],
  "stats": {
    "total": 183,
    "additions": 105,
    "deletions": 78
  },
  "files": [
    {
      "sha": "bd8af641dc71005cd8e41c26d7c331991f91da16",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5fcee43a960f0735c53a7c24823b2e4bc1460b9f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5fcee43a960f0735c53a7c24823b2e4bc1460b9f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5fcee43a960f0735c53a7c24823b2e4bc1460b9f",
      "patch": "@@ -1,3 +1,21 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-win.c (tui_source_window_base::update_tab_width): Call\n+\tmake_visible_with_new_height method.\n+\t(tui_win_info::make_visible_with_new_height): New method.\n+\t(tui_source_window_base::do_make_visible_with_new_height)\n+\t(tui_data_window::do_make_visible_with_new_height)\n+\t(tui_cmd_window::do_make_visible_with_new_height): New methods.\n+\t(make_visible_with_new_height): Remove.\n+\t(tui_resize_all, tui_adjust_win_heights): Use\n+\tmake_visible_with_new_height method.\n+\t* tui/tui-data.h (struct tui_win_info)\n+\t<do_make_visible_with_new_height, make_visible_with_new_height>:\n+\tNew methods.\n+\t(struct tui_source_window_base, struct tui_data_window)\n+\t(struct tui_cmd_window) <do_make_visible_with_new_height>: New\n+\tmethods.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-win.c (tui_source_window_base::update_tab_width): New"
    },
    {
      "sha": "02bda6af45c34e7e416fd2efb37135b567c29400",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5fcee43a960f0735c53a7c24823b2e4bc1460b9f/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5fcee43a960f0735c53a7c24823b2e4bc1460b9f/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=5fcee43a960f0735c53a7c24823b2e4bc1460b9f",
      "patch": "@@ -273,6 +273,10 @@ struct tui_win_info : public tui_gen_win_info\n      left_scroll and right_scroll.  */\n   virtual void do_scroll_horizontal (int num_to_scroll) = 0;\n \n+  /* Called after make_visible_with_new_height sets the new height.\n+     Should update the window.  */\n+  virtual void do_make_visible_with_new_height () = 0;\n+\n public:\n \n   ~tui_win_info () override\n@@ -311,6 +315,9 @@ struct tui_win_info : public tui_gen_win_info\n   {\n   }\n \n+  /* Make the window visible after the height has been changed.  */\n+  void make_visible_with_new_height ();\n+\n   /* Set whether this window is highglighted.  */\n   void set_highlight (bool highlight)\n   {\n@@ -343,6 +350,7 @@ struct tui_source_window_base : public tui_win_info\n   DISABLE_COPY_AND_ASSIGN (tui_source_window_base);\n \n   void do_scroll_horizontal (int num_to_scroll) override;\n+  void do_make_visible_with_new_height () override;\n \n public:\n \n@@ -465,6 +473,7 @@ struct tui_data_window : public tui_win_info\n   void do_scroll_horizontal (int num_to_scroll) override\n   {\n   }\n+  void do_make_visible_with_new_height () override;\n };\n \n struct tui_cmd_window : public tui_win_info\n@@ -505,6 +514,8 @@ struct tui_cmd_window : public tui_win_info\n   void do_scroll_horizontal (int num_to_scroll) override\n   {\n   }\n+\n+  void do_make_visible_with_new_height () override;\n };\n \n extern int tui_win_is_auxillary (enum tui_win_type win_type);"
    },
    {
      "sha": "5ba683620f9434a5235c7763e43fc166ccf20996",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 76,
      "deletions": 78,
      "changes": 154,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5fcee43a960f0735c53a7c24823b2e4bc1460b9f/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5fcee43a960f0735c53a7c24823b2e4bc1460b9f/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=5fcee43a960f0735c53a7c24823b2e4bc1460b9f",
      "patch": "@@ -55,7 +55,6 @@\n /*******************************\n ** Static Local Decls\n ********************************/\n-static void make_visible_with_new_height (struct tui_win_info *);\n static void make_invisible_and_set_new_height (struct tui_win_info *, \n \t\t\t\t\t       int);\n static enum tui_status tui_adjust_win_heights (struct tui_win_info *, \n@@ -616,8 +615,8 @@ tui_resize_all (void)\n \t  TUI_CMD_WIN->width += width_diff;\n \t  new_height = screenheight - TUI_CMD_WIN->origin.y;\n \t  make_invisible_and_set_new_height (TUI_CMD_WIN, new_height);\n-\t  make_visible_with_new_height (first_win);\n-\t  make_visible_with_new_height (TUI_CMD_WIN);\n+\t  first_win->make_visible_with_new_height ();\n+\t  TUI_CMD_WIN->make_visible_with_new_height ();\n \t  if (first_win->content_size <= 0)\n \t    tui_erase_source_content (first_win, EMPTY_SOURCE_PROMPT);\n \t  break;\n@@ -678,9 +677,9 @@ tui_resize_all (void)\n \t  make_invisible_and_set_new_height (TUI_CMD_WIN,\n \t\t\t\t\t     TUI_CMD_WIN->height\n \t\t\t\t\t     + cmd_split_diff);\n-\t  make_visible_with_new_height (first_win);\n-\t  make_visible_with_new_height (second_win);\n-\t  make_visible_with_new_height (TUI_CMD_WIN);\n+\t  first_win->make_visible_with_new_height ();\n+\t  second_win->make_visible_with_new_height ();\n+\t  TUI_CMD_WIN->make_visible_with_new_height ();\n \t  if (first_win->content_size <= 0)\n \t    tui_erase_source_content (first_win, EMPTY_SOURCE_PROMPT);\n \t  if (second_win->content_size <= 0)\n@@ -933,7 +932,7 @@ tui_source_window_base::update_tab_width ()\n      and redisplay of the window's contents, which will take\n      the new tab width into account.  */\n   make_invisible_and_set_new_height (this, height);\n-  make_visible_with_new_height (this);\n+  make_visible_with_new_height ();\n }\n \n /* After the tab width is set, call this to update the relevant\n@@ -1126,8 +1125,8 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t      make_invisible_and_set_new_height (win_info,\n \t\t\t\t\t     win_info->height + diff);\n \t      TUI_CMD_WIN->origin.y = locator->origin.y + 1;\n-\t      make_visible_with_new_height (win_info);\n-\t      make_visible_with_new_height (primary_win_info);\n+\t      win_info->make_visible_with_new_height ();\n+\t      primary_win_info->make_visible_with_new_height ();\n \t      if (src_win_info->content_size <= 0)\n \t\ttui_erase_source_content (src_win_info, EMPTY_SOURCE_PROMPT);\n \t    }\n@@ -1228,9 +1227,9 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t\t    make_invisible_and_set_new_height (TUI_CMD_WIN,\n \t\t\t\t\t\t       TUI_CMD_WIN->height + diff);\n \t\t}\n-\t      make_visible_with_new_height (TUI_CMD_WIN);\n-\t      make_visible_with_new_height (second_win);\n-\t      make_visible_with_new_height (first_win);\n+\t      TUI_CMD_WIN->make_visible_with_new_height ();\n+\t      second_win->make_visible_with_new_height ();\n+\t      first_win->make_visible_with_new_height ();\n \t      if (first_win->content_size <= 0)\n \t\ttui_erase_source_content (first_win, EMPTY_SOURCE_PROMPT);\n \t      if (second_win->content_size <= 0)\n@@ -1301,82 +1300,81 @@ make_invisible_and_set_new_height (struct tui_win_info *win_info,\n }\n \n \n-/* Function to make the windows with new heights visible.  This means\n-   re-creating the windows' content since the window had to be\n-   destroyed to be made invisible.  */\n-static void\n-make_visible_with_new_height (struct tui_win_info *win_info)\n+/* See tui-data.h.  */\n+\n+void\n+tui_win_info::make_visible_with_new_height ()\n {\n-  struct symtab *s;\n+  make_visible (true);\n+  tui_check_and_display_highlight_if_needed (this);\n+  do_make_visible_with_new_height ();\n+}\n+\n+/* See tui-data.h.  */\n \n-  tui_make_visible (win_info);\n-  tui_check_and_display_highlight_if_needed (win_info);\n-  tui_source_window_base *base;\n-  switch (win_info->type)\n+void\n+tui_source_window_base::do_make_visible_with_new_height ()\n+{\n+  tui_free_win_content (execution_info);\n+  tui_make_visible (execution_info);\n+  if (content != NULL)\n     {\n-    case SRC_WIN:\n-    case DISASSEM_WIN:\n-      base = (tui_source_window_base *) win_info;\n-      tui_free_win_content (base->execution_info);\n-      tui_make_visible (base->execution_info);\n-      if (win_info->content != NULL)\n-\t{\n-\t  struct gdbarch *gdbarch = base->gdbarch;\n-\t  struct tui_line_or_address line_or_addr;\n-\t  struct symtab_and_line cursal\n-\t    = get_current_source_symtab_and_line ();\n-\n-\t  line_or_addr = base->start_line_or_addr;\n-\t  tui_free_win_content (win_info);\n-\t  tui_update_source_window (base, gdbarch,\n-\t\t\t\t    cursal.symtab, line_or_addr, TRUE);\n-\t}\n-      else if (deprecated_safe_get_selected_frame () != NULL)\n+      struct tui_line_or_address line_or_addr;\n+      struct symtab_and_line cursal\n+\t= get_current_source_symtab_and_line ();\n+\n+      line_or_addr = start_line_or_addr;\n+      tui_free_win_content (this);\n+      tui_update_source_window (this, gdbarch,\n+\t\t\t\tcursal.symtab, line_or_addr, TRUE);\n+    }\n+  else if (deprecated_safe_get_selected_frame () != NULL)\n+    {\n+      struct tui_line_or_address line;\n+      struct symtab_and_line cursal\n+\t= get_current_source_symtab_and_line ();\n+      struct frame_info *frame = deprecated_safe_get_selected_frame ();\n+      struct gdbarch *gdbarch = get_frame_arch (frame);\n+\n+      struct symtab *s = find_pc_line_symtab (get_frame_pc (frame));\n+      if (type == SRC_WIN)\n \t{\n-\t  struct tui_line_or_address line;\n-\t  struct symtab_and_line cursal\n-\t    = get_current_source_symtab_and_line ();\n-\t  struct frame_info *frame = deprecated_safe_get_selected_frame ();\n-\t  struct gdbarch *gdbarch = get_frame_arch (frame);\n-\n-\t  s = find_pc_line_symtab (get_frame_pc (frame));\n-\t  if (win_info->type == SRC_WIN)\n-\t    {\n-\t      line.loa = LOA_LINE;\n-\t      line.u.line_no = cursal.line;\n-\t    }\n-\t  else\n-\t    {\n-\t      line.loa = LOA_ADDRESS;\n-\t      find_line_pc (s, cursal.line, &line.u.addr);\n-\t    }\n-\t  tui_update_source_window (base, gdbarch, s, line, TRUE);\n+\t  line.loa = LOA_LINE;\n+\t  line.u.line_no = cursal.line;\n \t}\n-      if (win_info->has_locator ())\n+      else\n \t{\n-\t  tui_make_visible (tui_locator_win_info_ptr ());\n-\t  tui_show_locator_content ();\n+\t  line.loa = LOA_ADDRESS;\n+\t  find_line_pc (s, cursal.line, &line.u.addr);\n \t}\n-      break;\n-    case DATA_WIN:\n-      tui_display_all_data ();\n-      break;\n-    case CMD_WIN:\n-#ifdef HAVE_WRESIZE\n-      wresize (TUI_CMD_WIN->handle,\n-\t       TUI_CMD_WIN->height,\n-\t       TUI_CMD_WIN->width);\n-#endif\n-      mvwin (TUI_CMD_WIN->handle,\n-\t     TUI_CMD_WIN->origin.y,\n-\t     TUI_CMD_WIN->origin.x);\n-      wmove (win_info->handle, 0, 0);\n-      break;\n-    default:\n-      break;\n+      tui_update_source_window (this, gdbarch, s, line, TRUE);\n+    }\n+  if (has_locator ())\n+    {\n+      tui_make_visible (tui_locator_win_info_ptr ());\n+      tui_show_locator_content ();\n     }\n }\n \n+/* See tui-data.h.  */\n+\n+void\n+tui_data_window::do_make_visible_with_new_height ()\n+{\n+  tui_display_all_data ();\n+}\n+\n+/* See tui-data.h.  */\n+\n+void\n+tui_cmd_window::do_make_visible_with_new_height ()\n+{\n+#ifdef HAVE_WRESIZE\n+  wresize (handle, height, width);\n+#endif\n+  mvwin (handle, origin.y, origin.x);\n+  wmove (handle, 0, 0);\n+}\n \n /* See tui-data.h.  */\n "
    }
  ]
}