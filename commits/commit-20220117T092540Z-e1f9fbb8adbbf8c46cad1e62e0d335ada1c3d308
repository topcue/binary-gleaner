{
  "sha": "e1f9fbb8adbbf8c46cad1e62e0d335ada1c3d308",
  "node_id": "C_kwDOANOeidoAKGUxZjlmYmI4YWRiYmY4YzQ2Y2FkMWU2MmUwZDMzNWFkYTFjM2QzMDg",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2022-01-17T09:25:40Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2022-01-17T09:25:40Z"
    },
    "message": "x86: fold variables in memory operand index handling\n\nThere's no real need for the pseudo-boolean \"haveindex\" or for separate\n32-bit / 64-bit index pointers. Fold them into a single \"indexes\" and\nset that uniformly to AT&T names, compensating by emitting the register\nname via oappend_maybe_intel().",
    "tree": {
      "sha": "57fd91bafccc5798ae6f2e18f65767484adfafab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/57fd91bafccc5798ae6f2e18f65767484adfafab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e1f9fbb8adbbf8c46cad1e62e0d335ada1c3d308",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e1f9fbb8adbbf8c46cad1e62e0d335ada1c3d308",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e1f9fbb8adbbf8c46cad1e62e0d335ada1c3d308",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e1f9fbb8adbbf8c46cad1e62e0d335ada1c3d308/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2a78304e29bf783142001958730d4adf8f6a1f09",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a78304e29bf783142001958730d4adf8f6a1f09",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2a78304e29bf783142001958730d4adf8f6a1f09"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 15,
    "deletions": 19
  },
  "files": [
    {
      "sha": "b982673f51013e94142d7dc7175ff9265bd7df03",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 15,
      "deletions": 19,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e1f9fbb8adbbf8c46cad1e62e0d335ada1c3d308/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e1f9fbb8adbbf8c46cad1e62e0d335ada1c3d308/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=e1f9fbb8adbbf8c46cad1e62e0d335ada1c3d308",
      "patch": "@@ -11512,7 +11512,6 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n       int havedisp;\n       int havesib;\n       int havebase;\n-      int haveindex;\n       int needindex;\n       int needaddr32;\n       int base, rbase;\n@@ -11524,12 +11523,10 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n \t\t\t || bytemode == bnd_mode\n \t\t\t || bytemode == bnd_swap_mode);\n       bool check_gather = false;\n-      const char *const *indexes64 = ins->names64;\n-      const char *const *indexes32 = ins->names32;\n+      const char *const *indexes = NULL;\n \n       havesib = 0;\n       havebase = 1;\n-      haveindex = 0;\n       base = ins->modrm.rm;\n \n       if (base == 4)\n@@ -11552,32 +11549,33 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n \t\t  check_gather = ins->obufp == ins->op_out[1];\n \t\t}\n \n-\t      haveindex = 1;\n \t      switch (ins->vex.length)\n \t\t{\n \t\tcase 128:\n-\t\t  indexes64 = indexes32 = ins->names_xmm;\n+\t\t  indexes = att_names_xmm;\n \t\t  break;\n \t\tcase 256:\n \t\t  if (!ins->vex.w\n \t\t      || bytemode == vex_vsib_q_w_dq_mode)\n-\t\t    indexes64 = indexes32 = ins->names_ymm;\n+\t\t    indexes = att_names_ymm;\n \t\t  else\n-\t\t    indexes64 = indexes32 = ins->names_xmm;\n+\t\t    indexes = att_names_xmm;\n \t\t  break;\n \t\tcase 512:\n \t\t  if (!ins->vex.w\n \t\t      || bytemode == vex_vsib_q_w_dq_mode)\n-\t\t    indexes64 = indexes32 = ins->names_zmm;\n+\t\t    indexes = att_names_zmm;\n \t\t  else\n-\t\t    indexes64 = indexes32 = ins->names_ymm;\n+\t\t    indexes = att_names_ymm;\n \t\t  break;\n \t\tdefault:\n \t\t  abort ();\n \t\t}\n \t      break;\n \t    default:\n-\t      haveindex = vindex != 4;\n+\t      if (vindex != 4)\n+\t\tindexes = ins->address_mode == mode_64bit && !addr32flag\n+\t\t\t  ? att_names64 : att_names32;\n \t      break;\n \t    }\n \t  scale = ins->sib.scale;\n@@ -11630,7 +11628,7 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n       needaddr32 = 0;\n       if (havesib\n \t  && !havebase\n-\t  && !haveindex\n+\t  && !indexes\n \t  && ins->address_mode != mode_16bit)\n \t{\n \t  if (ins->address_mode == mode_64bit)\n@@ -11654,7 +11652,7 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n \n       havedisp = (havebase\n \t\t  || needindex\n-\t\t  || (havesib && (haveindex || scale != 0)));\n+\t\t  || (havesib && (indexes || scale != 0)));\n \n       if (!ins->intel_syntax)\n \tif (ins->modrm.mod != 0 || base == 5)\n@@ -11671,7 +11669,7 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n \t      }\n \t  }\n \n-      if ((havebase || haveindex || needindex || needaddr32 || riprel)\n+      if ((havebase || indexes || needindex || needaddr32 || riprel)\n \t  && (ins->address_mode != mode_64bit\n \t      || ((bytemode != v_bnd_mode)\n \t\t  && (bytemode != v_bndmk_mode)\n@@ -11697,20 +11695,18 @@ OP_E_memory (instr_info *ins, int bytemode, int sizeflag)\n \t\t print index to tell base + index from base.  */\n \t      if (scale != 0\n \t\t  || needindex\n-\t\t  || haveindex\n+\t\t  || indexes\n \t\t  || (havebase && base != ESP_REG_NUM))\n \t\t{\n \t\t  if (!ins->intel_syntax || havebase)\n \t\t    {\n \t\t      *ins->obufp++ = ins->separator_char;\n \t\t      *ins->obufp = '\\0';\n \t\t    }\n-\t\t  if (haveindex)\n+\t\t  if (indexes)\n \t\t    {\n \t\t      if (ins->address_mode == mode_64bit || vindex < 16)\n-\t\t\toappend (ins, ins->address_mode == mode_64bit\n-\t\t\t\t && !addr32flag\n-\t\t\t\t ? indexes64[vindex] : indexes32[vindex]);\n+\t\t\toappend_maybe_intel (ins, indexes[vindex]);\n \t\t      else\n \t\t\toappend (ins, \"(bad)\");\n \t\t    }"
    }
  ]
}