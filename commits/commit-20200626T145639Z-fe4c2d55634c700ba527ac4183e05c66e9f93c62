{
  "sha": "fe4c2d55634c700ba527ac4183e05c66e9f93c62",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmU0YzJkNTU2MzRjNzAwYmE1MjdhYzQxODNlMDVjNjZlOWY5M2M2Mg==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-10-21T10:27:43Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-26T14:56:39Z"
    },
    "message": "libctf: create: non-root-visible types should not appear in name tables\n\nWe were accidentally interning newly-added and newly-opened\nnon-root-visible types into name tables, and removing names from name\ntables when such types were removed.  This is very wrong: the whole\npoint of non-root-visible types is they do not go in name tables and\ncannot be looked up by name.  This bug made non-root-visible types\nbasically identical to root-visible types, right back to the earliest\ndays of libctf in the Solaris era.\n\nlibctf/\n\t* ctf-open.c (init_types): Only intern root-visible types.\n\t* ctf-create.c (ctf_dtd_insert): Likewise.\n\t(ctf_dtd_delete): Only remove root-visible types.\n\t(ctf_rollback): Likewise.\n\t(ctf_add_generic): Adjust.\n\t(ctf_add_struct_sized): Adjust comment.\n\t(ctf_add_union_sized): Likewise.\n\t(ctf_add_enum): Likewise.\n\t* ctf-impl.h (ctf_dtd_insert): Adjust prototype.",
    "tree": {
      "sha": "67eeb7d1fa76d860f2d2473eddc9c7f4533cc6c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/67eeb7d1fa76d860f2d2473eddc9c7f4533cc6c9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fe4c2d55634c700ba527ac4183e05c66e9f93c62",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe4c2d55634c700ba527ac4183e05c66e9f93c62",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fe4c2d55634c700ba527ac4183e05c66e9f93c62",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe4c2d55634c700ba527ac4183e05c66e9f93c62/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "094e34f22146ad53eb93da22e480cab428bd23b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/094e34f22146ad53eb93da22e480cab428bd23b5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/094e34f22146ad53eb93da22e480cab428bd23b5"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 53,
    "deletions": 17
  },
  "files": [
    {
      "sha": "056cb7b929d374533dd9ee9d1b1f0b38b2cc1364",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe4c2d55634c700ba527ac4183e05c66e9f93c62/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe4c2d55634c700ba527ac4183e05c66e9f93c62/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=fe4c2d55634c700ba527ac4183e05c66e9f93c62",
      "patch": "@@ -1,3 +1,15 @@\n+2020-06-26  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-open.c (init_types): Only intern root-visible types.\n+\t* ctf-create.c (ctf_dtd_insert): Likewise.\n+\t(ctf_dtd_delete): Only remove root-visible types.\n+\t(ctf_rollback): Likewise.\n+\t(ctf_add_generic): Adjust.\n+\t(ctf_add_struct_sized): Adjust comment.\n+\t(ctf_add_union_sized): Likewise.\n+\t(ctf_add_enum): Likewise.\n+\t* ctf-impl.h (ctf_dtd_insert): Adjust prototype.\n+\n 2020-03-11  John Baldwin  <jhb@FreeBSD.org>\n \n \t* swap.h (bswap_identity_64): Make static."
    },
    {
      "sha": "e8e80287cb3cc7dd8bd345017522245c818797d3",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe4c2d55634c700ba527ac4183e05c66e9f93c62/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe4c2d55634c700ba527ac4183e05c66e9f93c62/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=fe4c2d55634c700ba527ac4183e05c66e9f93c62",
      "patch": "@@ -597,13 +597,13 @@ ctf_name_table (ctf_file_t *fp, int kind)\n }\n \n int\n-ctf_dtd_insert (ctf_file_t *fp, ctf_dtdef_t *dtd, int kind)\n+ctf_dtd_insert (ctf_file_t *fp, ctf_dtdef_t *dtd, int flag, int kind)\n {\n   const char *name;\n   if (ctf_dynhash_insert (fp->ctf_dthash, (void *) dtd->dtd_type, dtd) < 0)\n     return -1;\n \n-  if (dtd->dtd_data.ctt_name\n+  if (flag == CTF_ADD_ROOT && dtd->dtd_data.ctt_name\n       && (name = ctf_strraw (fp, dtd->dtd_data.ctt_name)) != NULL)\n     {\n       if (ctf_dynhash_insert (ctf_name_table (fp, kind)->ctn_writable,\n@@ -646,7 +646,8 @@ ctf_dtd_delete (ctf_file_t *fp, ctf_dtdef_t *dtd)\n     }\n \n   if (dtd->dtd_data.ctt_name\n-      && (name = ctf_strraw (fp, dtd->dtd_data.ctt_name)) != NULL)\n+      && (name = ctf_strraw (fp, dtd->dtd_data.ctt_name)) != NULL\n+      && LCTF_INFO_ISROOT (fp, dtd->dtd_data.ctt_info))\n     {\n       ctf_dynhash_remove (ctf_name_table (fp, kind)->ctn_writable,\n \t\t\t  name);\n@@ -762,7 +763,8 @@ ctf_rollback (ctf_file_t *fp, ctf_snapshot_id_t id)\n       kind = LCTF_INFO_KIND (fp, dtd->dtd_data.ctt_info);\n \n       if (dtd->dtd_data.ctt_name\n-\t  && (name = ctf_strraw (fp, dtd->dtd_data.ctt_name)) != NULL)\n+\t  && (name = ctf_strraw (fp, dtd->dtd_data.ctt_name)) != NULL\n+\t  && LCTF_INFO_ISROOT (fp, dtd->dtd_data.ctt_info))\n \t{\n \t  ctf_dynhash_remove (ctf_name_table (fp, kind)->ctn_writable,\n \t\t\t      name);\n@@ -831,7 +833,7 @@ ctf_add_generic (ctf_file_t *fp, uint32_t flag, const char *name, int kind,\n       return (ctf_set_errno (fp, EAGAIN));\n     }\n \n-  if (ctf_dtd_insert (fp, dtd, kind) < 0)\n+  if (ctf_dtd_insert (fp, dtd, flag, kind) < 0)\n     {\n       free (dtd);\n       return CTF_ERR;\t\t\t/* errno is set for us.  */\n@@ -1094,8 +1096,7 @@ ctf_add_struct_sized (ctf_file_t *fp, uint32_t flag, const char *name,\n   ctf_dtdef_t *dtd;\n   ctf_id_t type = 0;\n \n-  /* Promote forwards to structs.  */\n-\n+  /* Promote root-visible forwards to structs.  */\n   if (name != NULL)\n     type = ctf_lookup_by_rawname (fp, CTF_K_STRUCT, name);\n \n@@ -1132,7 +1133,7 @@ ctf_add_union_sized (ctf_file_t *fp, uint32_t flag, const char *name,\n   ctf_dtdef_t *dtd;\n   ctf_id_t type = 0;\n \n-  /* Promote forwards to unions.  */\n+  /* Promote root-visible forwards to unions.  */\n   if (name != NULL)\n     type = ctf_lookup_by_rawname (fp, CTF_K_UNION, name);\n \n@@ -1168,7 +1169,7 @@ ctf_add_enum (ctf_file_t *fp, uint32_t flag, const char *name)\n   ctf_dtdef_t *dtd;\n   ctf_id_t type = 0;\n \n-  /* Promote forwards to enums.  */\n+  /* Promote root-visible forwards to enums.  */\n   if (name != NULL)\n     type = ctf_lookup_by_rawname (fp, CTF_K_ENUM, name);\n "
    },
    {
      "sha": "56ef9a33ba21edcf0d2ae4debcfdb8f6a7b778b6",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe4c2d55634c700ba527ac4183e05c66e9f93c62/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe4c2d55634c700ba527ac4183e05c66e9f93c62/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=fe4c2d55634c700ba527ac4183e05c66e9f93c62",
      "patch": "@@ -399,7 +399,7 @@ extern void ctf_list_prepend (ctf_list_t *, void *);\n extern void ctf_list_delete (ctf_list_t *, void *);\n extern int ctf_list_empty_p (ctf_list_t *lp);\n \n-extern int ctf_dtd_insert (ctf_file_t *, ctf_dtdef_t *, int);\n+extern int ctf_dtd_insert (ctf_file_t *, ctf_dtdef_t *, int flag, int kind);\n extern void ctf_dtd_delete (ctf_file_t *, ctf_dtdef_t *);\n extern ctf_dtdef_t *ctf_dtd_lookup (const ctf_file_t *, ctf_id_t);\n extern ctf_dtdef_t *ctf_dynamic_type (const ctf_file_t *, ctf_id_t);"
    },
    {
      "sha": "4daa1e4535151baa5c132df85e77e8c17f5b09fc",
      "filename": "libctf/ctf-open.c",
      "status": "modified",
      "additions": 30,
      "deletions": 7,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe4c2d55634c700ba527ac4183e05c66e9f93c62/libctf/ctf-open.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe4c2d55634c700ba527ac4183e05c66e9f93c62/libctf/ctf-open.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open.c?ref=fe4c2d55634c700ba527ac4183e05c66e9f93c62",
      "patch": "@@ -765,7 +765,7 @@ init_types (ctf_file_t *fp, ctf_header_t *cth)\n   for (id = 1, tp = tbuf; tp < tend; xp++, id++)\n     {\n       unsigned short kind = LCTF_INFO_KIND (fp, tp->ctt_info);\n-      unsigned short flag = LCTF_INFO_ISROOT (fp, tp->ctt_info);\n+      unsigned short isroot = LCTF_INFO_ISROOT (fp, tp->ctt_info);\n       unsigned long vlen = LCTF_INFO_VLEN (fp, tp->ctt_info);\n       ssize_t size, increment, vbytes;\n \n@@ -787,7 +787,7 @@ init_types (ctf_file_t *fp, ctf_header_t *cth)\n \n \t  if (((ctf_hash_lookup_type (fp->ctf_names.ctn_readonly,\n \t\t\t\t      fp, name)) == 0)\n-\t      || (flag & CTF_ADD_ROOT))\n+\t      || isroot)\n \t    {\n \t      err = ctf_hash_define_type (fp->ctf_names.ctn_readonly, fp,\n \t\t\t\t\t  LCTF_INDEX_TO_TYPE (fp, id, child),\n@@ -804,6 +804,9 @@ init_types (ctf_file_t *fp, ctf_header_t *cth)\n \t  break;\n \n \tcase CTF_K_FUNCTION:\n+\t  if (!isroot)\n+\t    break;\n+\n \t  err = ctf_hash_insert_type (fp->ctf_names.ctn_readonly, fp,\n \t\t\t\t      LCTF_INDEX_TO_TYPE (fp, id, child),\n \t\t\t\t      tp->ctt_name);\n@@ -812,30 +815,40 @@ init_types (ctf_file_t *fp, ctf_header_t *cth)\n \t  break;\n \n \tcase CTF_K_STRUCT:\n+\t  if (size >= CTF_LSTRUCT_THRESH)\n+\t    nlstructs++;\n+\n+\t  if (!isroot)\n+\t    break;\n+\n \t  err = ctf_hash_define_type (fp->ctf_structs.ctn_readonly, fp,\n \t\t\t\t      LCTF_INDEX_TO_TYPE (fp, id, child),\n \t\t\t\t      tp->ctt_name);\n \n \t  if (err != 0)\n \t    return err;\n \n-\t  if (size >= CTF_LSTRUCT_THRESH)\n-\t    nlstructs++;\n \t  break;\n \n \tcase CTF_K_UNION:\n+\t  if (size >= CTF_LSTRUCT_THRESH)\n+\t    nlunions++;\n+\n+\t  if (!isroot)\n+\t    break;\n+\n \t  err = ctf_hash_define_type (fp->ctf_unions.ctn_readonly, fp,\n \t\t\t\t      LCTF_INDEX_TO_TYPE (fp, id, child),\n \t\t\t\t      tp->ctt_name);\n \n \t  if (err != 0)\n \t    return err;\n-\n-\t  if (size >= CTF_LSTRUCT_THRESH)\n-\t    nlunions++;\n \t  break;\n \n \tcase CTF_K_ENUM:\n+\t  if (!isroot)\n+\t    break;\n+\n \t  err = ctf_hash_define_type (fp->ctf_enums.ctn_readonly, fp,\n \t\t\t\t      LCTF_INDEX_TO_TYPE (fp, id, child),\n \t\t\t\t      tp->ctt_name);\n@@ -845,6 +858,9 @@ init_types (ctf_file_t *fp, ctf_header_t *cth)\n \t  break;\n \n \tcase CTF_K_TYPEDEF:\n+\t  if (!isroot)\n+\t    break;\n+\n \t  err = ctf_hash_insert_type (fp->ctf_names.ctn_readonly, fp,\n \t\t\t\t      LCTF_INDEX_TO_TYPE (fp, id, child),\n \t\t\t\t      tp->ctt_name);\n@@ -855,6 +871,10 @@ init_types (ctf_file_t *fp, ctf_header_t *cth)\n \tcase CTF_K_FORWARD:\n \t  {\n \t    ctf_names_t *np = ctf_name_table (fp, tp->ctt_type);\n+\n+\t    if (!isroot)\n+\t      break;\n+\n \t    /* Only insert forward tags into the given hash if the type or tag\n \t       name is not already present.  */\n \t    if (ctf_hash_lookup_type (np->ctn_readonly, fp, name) == 0)\n@@ -881,6 +901,9 @@ init_types (ctf_file_t *fp, ctf_header_t *cth)\n \tcase CTF_K_VOLATILE:\n \tcase CTF_K_CONST:\n \tcase CTF_K_RESTRICT:\n+\t  if (!isroot)\n+\t    break;\n+\n \t  err = ctf_hash_insert_type (fp->ctf_names.ctn_readonly, fp,\n \t\t\t\t      LCTF_INDEX_TO_TYPE (fp, id, child),\n \t\t\t\t      tp->ctt_name);"
    }
  ]
}