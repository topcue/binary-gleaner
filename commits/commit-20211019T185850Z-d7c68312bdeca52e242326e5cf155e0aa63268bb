{
  "sha": "d7c68312bdeca52e242326e5cf155e0aa63268bb",
  "node_id": "C_kwDOANOeidoAKGQ3YzY4MzEyYmRlY2E1MmUyNDIzMjZlNWNmMTU1ZTBhYTYzMjY4YmI",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-09-23T19:09:48Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-10-19T18:58:50Z"
    },
    "message": "Always use std::function for self-tests\n\nNow that there is a register_test variant that accepts std::function,\nit seems to me that the 'selftest' struct and accompanying code is\nobsolete -- simply always using std::function is simpler.  This patch\nimplements this idea.",
    "tree": {
      "sha": "8daa0e71c0de29b9bee9f0a8376dc431b65af861",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8daa0e71c0de29b9bee9f0a8376dc431b65af861"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d7c68312bdeca52e242326e5cf155e0aa63268bb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d7c68312bdeca52e242326e5cf155e0aa63268bb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d7c68312bdeca52e242326e5cf155e0aa63268bb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d7c68312bdeca52e242326e5cf155e0aa63268bb/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a2f674a688df474639066922f4ce70ce97b30d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a2f674a688df474639066922f4ce70ce97b30d2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a2f674a688df474639066922f4ce70ce97b30d2"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 6,
    "deletions": 45
  },
  "files": [
    {
      "sha": "d65063820ac69100687560513eedc068dc6ec93e",
      "filename": "gdbsupport/selftest.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 31,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7c68312bdeca52e242326e5cf155e0aa63268bb/gdbsupport/selftest.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7c68312bdeca52e242326e5cf155e0aa63268bb/gdbsupport/selftest.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/selftest.cc?ref=d7c68312bdeca52e242326e5cf155e0aa63268bb",
      "patch": "@@ -29,43 +29,18 @@ namespace selftests\n    the order of tests stable and easily looking up whether a test name\n    exists.  */\n \n-static std::map<std::string, std::unique_ptr<selftest>> tests;\n+static std::map<std::string, std::function<void(void)>> tests;\n \n /* See selftest.h.  */\n \n void\n-register_test (const std::string &name, selftest *test)\n+register_test (const std::string &name,\n+\t       std::function<void(void)> function)\n {\n   /* Check that no test with this name already exist.  */\n   gdb_assert (tests.find (name) == tests.end ());\n \n-  tests[name] = std::unique_ptr<selftest> (test);\n-}\n-\n-/* A selftest that calls the test function without arguments.  */\n-\n-struct lambda_selftest : public selftest\n-{\n-  lambda_selftest (std::function<void(void)> function_)\n-  {\n-    function  = function_;\n-  }\n-\n-  void operator() () const override\n-  {\n-    function ();\n-  }\n-\n-  std::function<void(void)> function;\n-};\n-\n-/* See selftest.h.  */\n-\n-void\n-register_test (const std::string &name,\n-\t       std::function<void(void)> function)\n-{\n-  register_test (name, new lambda_selftest (function));\n+  tests[name] = function;\n }\n \n /* See selftest.h.  */\n@@ -91,7 +66,7 @@ run_tests (gdb::array_view<const char *const> filters, bool verbose)\n   for (const auto &pair : tests)\n     {\n       const std::string &name = pair.first;\n-      const std::unique_ptr<selftest> &test = pair.second;\n+      const auto &test = pair.second;\n       bool run = false;\n \n       if (filters.empty ())\n@@ -112,7 +87,7 @@ run_tests (gdb::array_view<const char *const> filters, bool verbose)\n \t{\n \t  debug_printf (_(\"Running selftest %s.\\n\"), name.c_str ());\n \t  ++ran;\n-\t  (*test) ();\n+\t  test ();\n \t}\n       catch (const gdb_exception_error &ex)\n \t{"
    },
    {
      "sha": "2326ebad495eb932161fc580e1056d666fb06b9e",
      "filename": "gdbsupport/selftest.h",
      "status": "modified",
      "additions": 0,
      "deletions": 14,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d7c68312bdeca52e242326e5cf155e0aa63268bb/gdbsupport/selftest.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d7c68312bdeca52e242326e5cf155e0aa63268bb/gdbsupport/selftest.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/selftest.h?ref=d7c68312bdeca52e242326e5cf155e0aa63268bb",
      "patch": "@@ -24,29 +24,15 @@\n /* A test is just a function that does some checks and throws an\n    exception if something has gone wrong.  */\n \n-typedef void self_test_function (void);\n-\n namespace selftests\n {\n \n-/* Interface for the various kinds of selftests.  */\n-\n-struct selftest\n-{\n-  virtual ~selftest () = default;\n-  virtual void operator() () const = 0;\n-};\n-\n /* True if selftest should run verbosely.  */\n \n extern bool run_verbose ();\n \n /* Register a new self-test.  */\n \n-extern void register_test (const std::string &name, selftest *test);\n-\n-/* Register a new self-test.  */\n-\n extern void register_test (const std::string &name,\n \t\t\t   std::function<void(void)> function);\n "
    }
  ]
}