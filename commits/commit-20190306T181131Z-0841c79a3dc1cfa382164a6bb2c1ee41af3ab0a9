{
  "sha": "0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDg0MWM3OWEzZGMxY2ZhMzgyMTY0YTZiYjJjMWVlNDFhZjNhYjBhOQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-18T14:44:48Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-03-06T18:11:31Z"
    },
    "message": "gdb/fortran: Add support for the ABS intrinsic function\n\nAdds support for the abs intrinsic function, this requires adding a\nnew pattern to the Fortran parser.  Currently only float and integer\nargument types are supported to ABS, complex is still not supported,\nthis can be added later if needed.\n\ngdb/ChangeLog:\n\n\t* f-exp.y: New token, UNOP_INTRINSIC.\n\t(exp): New pattern using UNOP_INTRINSIC token.\n\t(f77_keywords): Add 'abs' keyword.\n\t* f-lang.c: Add 'target-float.h' and 'math.h' includes.\n\t(value_from_host_double): New function.\n\t(evaluate_subexp_f): Support UNOP_ABS.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/intrinsics.exp: Extend to cover ABS.",
    "tree": {
      "sha": "91f447c2bbfe0f87c46e7a42205ca8d63ca86ec8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/91f447c2bbfe0f87c46e7a42205ca8d63ca86ec8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a270568d93263e4970099456b4efb58466134a6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a270568d93263e4970099456b4efb58466134a6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a270568d93263e4970099456b4efb58466134a6"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 70,
    "deletions": 1
  },
  "files": [
    {
      "sha": "1dbec5aeffab65d3eec17f25bd7451d74f794bfe",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9",
      "patch": "@@ -1,3 +1,14 @@\n+2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Chris January  <chris.january@arm.com>\n+\t    David Lecomber  <david.lecomber@arm.com>\n+\n+\t* f-exp.y: New token, UNOP_INTRINSIC.\n+\t(exp): New pattern using UNOP_INTRINSIC token.\n+\t(f77_keywords): Add 'abs' keyword.\n+\t* f-lang.c: Add 'target-float.h' and 'math.h' includes.\n+\t(value_from_host_double): New function.\n+\t(evaluate_subexp_f): Support UNOP_ABS.\n+\n 2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* f-lang.c (build_fortran_types): Use TYPE_CODE_CHAR for character"
    },
    {
      "sha": "88c685a0af35bd27e5664e8a5d1d175c8d16b426",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9",
      "patch": "@@ -168,6 +168,7 @@ static int parse_number (struct parser_state *, const char *, int,\n %token <voidval> DOLLAR_VARIABLE\n \n %token <opcode> ASSIGN_MODIFY\n+%token <opcode> UNOP_INTRINSIC\n \n %left ','\n %left ABOVE_COMMA\n@@ -252,6 +253,10 @@ exp\t:\texp '('\n \t\t\t\t\t      OP_F77_UNDETERMINED_ARGLIST); }\n \t;\n \n+exp\t:\tUNOP_INTRINSIC '(' exp ')'\n+\t\t\t{ write_exp_elt_opcode (pstate, $1); }\n+\t;\n+\n arglist\t:\n \t;\n \n@@ -945,7 +950,8 @@ static const struct token f77_keywords[] =\n   { \"real\", REAL_KEYWORD, BINOP_END, true },\n   /* The following correspond to actual functions in Fortran and are case\n      insensitive.  */\n-  { \"kind\", KIND, BINOP_END, false }\n+  { \"kind\", KIND, BINOP_END, false },\n+  { \"abs\", UNOP_INTRINSIC, UNOP_ABS, false }\n };\n \n /* Implementation of a dynamically expandable buffer for processing input"
    },
    {
      "sha": "24f0e61a46bcf11ae54ffcf05d696f659e16ae85",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9",
      "patch": "@@ -34,7 +34,9 @@\n #include \"cp-support.h\"\n #include \"charset.h\"\n #include \"c-lang.h\"\n+#include \"target-float.h\"\n \n+#include <math.h>\n \n /* Local functions */\n \n@@ -239,6 +241,20 @@ f_collect_symbol_completion_matches (completion_tracker &tracker,\n \t\t\t\t\t\t      text, word, \":\", code);\n }\n \n+/* Create and return a value object of TYPE containing the value D.  The\n+   TYPE must be of TYPE_CODE_FLT, and must be large enough to hold D once\n+   it is converted to target format.  */\n+\n+static struct value *\n+value_from_host_double (struct type *type, double d)\n+{\n+  struct value *value = allocate_value (type);\n+  gdb_assert (TYPE_CODE (type) == TYPE_CODE_FLT);\n+  target_float_from_host_double (value_contents_raw (value),\n+                                 value_type (value), d);\n+  return value;\n+}\n+\n /* Special expression evaluation cases for Fortran.  */\n struct value *\n evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n@@ -259,6 +275,29 @@ evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n       *pos -= 1;\n       return evaluate_subexp_standard (expect_type, exp, pos, noside);\n \n+    case UNOP_ABS:\n+      arg1 = evaluate_subexp (NULL_TYPE, exp, pos, noside);\n+      if (noside == EVAL_SKIP)\n+\treturn eval_skip_value (exp);\n+      type = value_type (arg1);\n+      switch (TYPE_CODE (type))\n+\t{\n+\tcase TYPE_CODE_FLT:\n+\t  {\n+\t    double d\n+\t      = fabs (target_float_to_host_double (value_contents (arg1),\n+\t\t\t\t\t\t   value_type (arg1)));\n+\t    return value_from_host_double (type, d);\n+\t  }\n+\tcase TYPE_CODE_INT:\n+\t  {\n+\t    LONGEST l = value_as_long (arg1);\n+\t    l = llabs (l);\n+\t    return value_from_longest (type, l);\n+\t  }\n+\t}\n+      error (_(\"ABS of type %s not supported\"), TYPE_SAFE_NAME (type));\n+\n     case UNOP_KIND:\n       arg1 = evaluate_subexp (NULL, exp, pos, EVAL_AVOID_SIDE_EFFECTS);\n       type = value_type (arg1);"
    },
    {
      "sha": "7f70b489390fab81325aa03bd8a0d753c5036dbd",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9",
      "patch": "@@ -1,3 +1,7 @@\n+2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/intrinsics.exp: Extend to cover ABS.\n+\n 2019-03-06  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.fortran/type-kinds.exp: Update expected results."
    },
    {
      "sha": "00396c74c2fa546afd5920384d5004087c5f0f8d",
      "filename": "gdb/testsuite/gdb.fortran/intrinsics.exp",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9/gdb/testsuite/gdb.fortran/intrinsics.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9/gdb/testsuite/gdb.fortran/intrinsics.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/intrinsics.exp?ref=0841c79a3dc1cfa382164a6bb2c1ee41af3ab0a9",
      "patch": "@@ -40,3 +40,12 @@ gdb_test \"p kind (l2)\" \" = 2\"\n gdb_test \"p kind (l4)\" \" = 4\"\n gdb_test \"p kind (l8)\" \" = 8\"\n gdb_test \"p kind (s1)\" \"argument to kind must be an intrinsic type\"\n+\n+# Test ABS\n+\n+gdb_test \"p abs (-11)\" \" = 11\"\n+gdb_test \"p abs (11)\" \" = 11\"\n+# Use `$decimal` to match here as we depend on host floating point\n+# rounding, which can vary.\n+gdb_test \"p abs (-9.1)\" \" = 9.$decimal\"\n+gdb_test \"p abs (9.1)\" \" = 9.$decimal\""
    }
  ]
}