{
  "sha": "3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mzg5MWI2NWVmZTYxNGZlMmUyZjdlNzVlN2Y1ZWM4OTY0ZjdmZDk2Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-07-07T03:19:45Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-08-15T18:29:28Z"
    },
    "message": "Change TUI source window iteration\n\nCurrently the TUI does separate bookkeeping to track which source\nwindows exist.  It seems better to me to just refer to the list of\nwindows for this, so this patch removes the special handling and\ninstead adds a new iterator.\n\ngdb/ChangeLog\n2019-08-15  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-winsource.h (struct tui_source_window_iterator): New.\n\t(struct tui_source_windows): New.\n\t* tui/tui-winsource.c (tui_display_main): Update.\n\t* tui/tui-win.c (tui_resize_all, tui_adjust_win_heights)\n\t(new_height_ok, parse_scrolling_args): Update.\n\t* tui/tui-layout.c (show_layout, show_data): Update.\n\t* tui/tui-data.h (tui_source_windows, tui_clear_source_windows)\n\t(tui_add_to_source_windows): Don't declare.\n\t* tui/tui-data.c (source_windows, tui_source_windows)\n\t(tui_clear_source_windows, tui_add_to_source_windows): Remove.",
    "tree": {
      "sha": "963216261c95876c9e617f0c5f6f91f558cb5e13",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/963216261c95876c9e617f0c5f6f91f558cb5e13"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ee556432c44dd5dbcf22c4086774bd29ded5b208",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee556432c44dd5dbcf22c4086774bd29ded5b208",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ee556432c44dd5dbcf22c4086774bd29ded5b208"
    }
  ],
  "stats": {
    "total": 143,
    "additions": 92,
    "deletions": 51
  },
  "files": [
    {
      "sha": "5a42eee4f7ac2a8f467ec035754fab6d8ea2d4c5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b",
      "patch": "@@ -1,3 +1,16 @@\n+2019-08-15  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-winsource.h (struct tui_source_window_iterator): New.\n+\t(struct tui_source_windows): New.\n+\t* tui/tui-winsource.c (tui_display_main): Update.\n+\t* tui/tui-win.c (tui_resize_all, tui_adjust_win_heights)\n+\t(new_height_ok, parse_scrolling_args): Update.\n+\t* tui/tui-layout.c (show_layout, show_data): Update.\n+\t* tui/tui-data.h (tui_source_windows, tui_clear_source_windows)\n+\t(tui_add_to_source_windows): Don't declare.\n+\t* tui/tui-data.c (source_windows, tui_source_windows)\n+\t(tui_clear_source_windows, tui_add_to_source_windows): Remove.\n+\n 2019-08-15  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-winsource.h (struct tui_source_window_base) <resize>:"
    },
    {
      "sha": "fe1f73f02e84a87ca8db9733d7145aad8ffbd795",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b",
      "patch": "@@ -36,7 +36,6 @@ struct tui_win_info *tui_win_list[MAX_MAJOR_WINDOWS];\n ** Private data\n ****************************/\n static int term_height, term_width;\n-static std::vector<tui_source_window_base *> source_windows;\n static struct tui_win_info *win_with_focus = NULL;\n \n static int win_resized = FALSE;\n@@ -88,26 +87,6 @@ tui_set_win_with_focus (struct tui_win_info *win_info)\n }\n \n \n-/* Accessor for the current source window.  Usually there is only one\n-   source window (either source or disassembly), but both can be\n-   displayed at the same time.  */\n-std::vector<tui_source_window_base *> &\n-tui_source_windows ()\n-{\n-  return source_windows;\n-}\n-\n-\n-/* Clear the list of source windows.  Usually there is only one source\n-   window (either source or disassembly), but both can be displayed at\n-   the same time.  */\n-void\n-tui_clear_source_windows ()\n-{\n-  source_windows.clear ();\n-}\n-\n-\n /* Clear the pertinent detail in the source windows.  */\n void\n tui_clear_source_windows_detail ()\n@@ -117,16 +96,6 @@ tui_clear_source_windows_detail ()\n }\n \n \n-/* Add a window to the list of source windows.  Usually there is only\n-   one source window (either source or disassembly), but both can be\n-   displayed at the same time.  */\n-void\n-tui_add_to_source_windows (struct tui_source_window_base *win_info)\n-{\n-  if (source_windows.size () < 2)\n-    source_windows.push_back (win_info);\n-}\n-\n /* Accessor for the term_height.  */\n int\n tui_term_height (void)"
    },
    {
      "sha": "338867917efaf716f17e329550e4253555c2a783",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b",
      "patch": "@@ -324,10 +324,7 @@ extern void tui_set_term_height_to (int);\n extern int tui_term_width (void);\n extern void tui_set_term_width_to (int);\n extern struct tui_locator_window *tui_locator_win_info_ptr (void);\n-extern std::vector<tui_source_window_base *> &tui_source_windows ();\n-extern void tui_clear_source_windows (void);\n extern void tui_clear_source_windows_detail (void);\n-extern void tui_add_to_source_windows (struct tui_source_window_base *);\n extern struct tui_win_info *tui_win_with_focus (void);\n extern void tui_set_win_with_focus (struct tui_win_info *);\n extern int tui_win_resized (void);"
    },
    {
      "sha": "4ea604a1017f4426a9920cf2cc4a727c58f27513",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b",
      "patch": "@@ -76,10 +76,6 @@ show_layout (enum tui_layout_type layout)\n \n   if (layout != cur_layout)\n     {\n-      /* Since the new layout may cause changes in window size, we\n-         should free the content and reallocate on next display of\n-         source/asm.  */\n-      tui_clear_source_windows ();\n       /* First make the current layout be invisible.  */\n       tui_make_all_invisible ();\n       tui_locator_win_info_ptr ()->make_visible (false);\n@@ -93,16 +89,12 @@ show_layout (enum tui_layout_type layout)\n \t  /* Now show the new layout.  */\n \tcase SRC_COMMAND:\n \t  show_source_command ();\n-\t  tui_add_to_source_windows (TUI_SRC_WIN);\n \t  break;\n \tcase DISASSEM_COMMAND:\n \t  show_disasm_command ();\n-\t  tui_add_to_source_windows (TUI_DISASM_WIN);\n \t  break;\n \tcase SRC_DISASSEM_COMMAND:\n \t  show_source_disasm_command ();\n-\t  tui_add_to_source_windows (TUI_SRC_WIN);\n-\t  tui_add_to_source_windows (TUI_DISASM_WIN);\n \t  break;\n \tdefault:\n \t  break;\n@@ -595,7 +587,6 @@ show_data (enum tui_layout_type new_layout)\n   base->m_has_locator = true;\n   locator->make_visible (true);\n   tui_show_locator_content ();\n-  tui_add_to_source_windows (base);\n   TUI_CMD_WIN->make_visible (true);\n   current_layout = new_layout;\n }"
    },
    {
      "sha": "aa07dfc82255f8eb79545a274a2891453757edd9",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b",
      "patch": "@@ -571,7 +571,7 @@ tui_resize_all (void)\n        {\n \tcase SRC_COMMAND:\n \tcase DISASSEM_COMMAND:\n-\t  src_win = tui_source_windows ()[0];\n+\t  src_win = *(tui_source_windows ().begin ());\n \t  first_win = src_win;\n \t  first_win->width += width_diff;\n \t  locator->width += width_diff;\n@@ -610,7 +610,7 @@ tui_resize_all (void)\n \t    {\n \t      first_win = TUI_DATA_WIN;\n \t      first_win->width += width_diff;\n-\t      src_win = tui_source_windows ()[0];\n+\t      src_win = *(tui_source_windows ().begin ());\n \t      second_win = src_win;\n \t      second_win->width += width_diff;\n \t    }\n@@ -1046,7 +1046,7 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t      primary_win_info->make_invisible_and_set_new_height (new_height);\n \t      if (primary_win_info->type == CMD_WIN)\n \t\t{\n-\t\t  win_info = tui_source_windows ()[0];\n+\t\t  win_info = *(tui_source_windows ().begin ());\n \t\t  src_win_info = win_info;\n \t\t}\n \t      else\n@@ -1084,7 +1084,7 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t\t{\n \t\t  src1 = nullptr;\n \t\t  first_win = TUI_DATA_WIN;\n-\t\t  second_win = tui_source_windows ()[0];\n+\t\t  second_win = *(tui_source_windows ().begin ());\n \t\t}\n \t      if (primary_win_info == TUI_CMD_WIN)\n \t\t{ /* Split the change in height accross the 1st & 2nd\n@@ -1238,7 +1238,7 @@ new_height_ok (struct tui_win_info *primary_win_info,\n \t      struct tui_win_info *win_info;\n \n \t      if (primary_win_info == TUI_CMD_WIN)\n-\t\twin_info = tui_source_windows ()[0];\n+\t\twin_info = *(tui_source_windows ().begin ());\n \t      else\n \t\twin_info = TUI_CMD_WIN;\n \t      ok = ((new_height +\n@@ -1259,7 +1259,7 @@ new_height_ok (struct tui_win_info *primary_win_info,\n \t  else\n \t    {\n \t      first_win = TUI_DATA_WIN;\n-\t      second_win = tui_source_windows ()[0];\n+\t      second_win = *(tui_source_windows ().begin ());\n \t    }\n \t  /* We could simply add all the heights to obtain the same\n \t     result but below is more explicit since we subtract 1 for\n@@ -1385,7 +1385,7 @@ parse_scrolling_args (const char *arg,\n \t  if (!(*win_to_scroll)->is_visible)\n \t    error (_(\"Window is not visible\"));\n \t  else if (*win_to_scroll == TUI_CMD_WIN)\n-\t    *win_to_scroll = tui_source_windows ()[0];\n+\t    *win_to_scroll = *(tui_source_windows ().begin ());\n \t}\n     }\n }"
    },
    {
      "sha": "613213fab5f5b3a603ce3bd5146cc5882021b9d7",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b",
      "patch": "@@ -44,7 +44,8 @@\n void\n tui_display_main ()\n {\n-  if (!tui_source_windows ().empty ())\n+  auto adapter = tui_source_windows ();\n+  if (adapter.begin () != adapter.end ())\n     {\n       struct gdbarch *gdbarch;\n       CORE_ADDR addr;"
    },
    {
      "sha": "9945e9f9b0e55530b0cf75c47498d8fef91085b3",
      "filename": "gdb/tui/tui-winsource.h",
      "status": "modified",
      "additions": 70,
      "deletions": 0,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-winsource.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b/gdb/tui/tui-winsource.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.h?ref=3891b65efe614fe2e2f7e75e7f5ec8964f7fd96b",
      "patch": "@@ -156,6 +156,76 @@ struct tui_source_window_base : public tui_win_info\n   std::vector<tui_source_element> content;\n };\n \n+\n+/* A wrapper for a TUI window iterator that only iterates over source\n+   windows.  */\n+\n+struct tui_source_window_iterator\n+{\n+public:\n+\n+  typedef tui_source_window_iterator self_type;\n+  typedef struct tui_source_window_base *value_type;\n+  typedef struct tui_source_window_base *&reference;\n+  typedef struct tui_source_window_base **pointer;\n+  typedef std::forward_iterator_tag iterator_category;\n+  typedef int difference_type;\n+\n+  explicit tui_source_window_iterator (bool dummy)\n+    : m_iter (SRC_WIN)\n+  {\n+    advance ();\n+  }\n+\n+  tui_source_window_iterator ()\n+    : m_iter (tui_win_type (DISASSEM_WIN + 1))\n+  {\n+  }\n+\n+  bool operator!= (const self_type &other) const\n+  {\n+    return m_iter != other.m_iter;\n+  }\n+\n+  value_type operator* () const\n+  {\n+    return (value_type) *m_iter;\n+  }\n+\n+  self_type &operator++ ()\n+  {\n+    ++m_iter;\n+    advance ();\n+    return *this;\n+  }\n+\n+private:\n+\n+  void advance ()\n+  {\n+    tui_window_iterator end;\n+    while (m_iter != end && *m_iter == nullptr)\n+      ++m_iter;\n+  }\n+\n+  tui_window_iterator m_iter;\n+};\n+\n+/* A range adapter for source windows.  */\n+\n+struct tui_source_windows\n+{\n+  tui_source_window_iterator begin () const\n+  {\n+    return tui_source_window_iterator (true);\n+  }\n+\n+  tui_source_window_iterator end () const\n+  {\n+    return tui_source_window_iterator ();\n+  }\n+};\n+\n /* Update the execution windows to show the active breakpoints.  This\n    is called whenever a breakpoint is inserted, removed or has its\n    state changed.  Normally BEING_DELETED is nullptr; if not nullptr,"
    }
  ]
}