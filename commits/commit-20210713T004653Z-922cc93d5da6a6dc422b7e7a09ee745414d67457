{
  "sha": "922cc93d5da6a6dc422b7e7a09ee745414d67457",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTIyY2M5M2Q1ZGE2YTZkYzQyMmI3ZTdhMDllZTc0NTQxNGQ2NzQ1Nw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-11T22:29:33Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-13T00:46:53Z"
    },
    "message": "gdb: maintain ptid -> thread map, optimize find_thread_ptid\n\nWhen debugging a large number of threads (thousands), looking up a\nthread by ptid_t using the inferior::thread_list linked list can add up.\n\nAdd inferior::thread_map, an std::unordered_map indexed by ptid_t, and\nchange the find_thread_ptid function to look up a thread using\nstd::unordered_map::find, instead of iterating on all of the\ninferior's threads.  This should make it faster to look up a thread\nfrom its ptid.\n\nChange-Id: I3a8da0a839e18dee5bb98b8b7dbeb7f3dfa8ae1c\nCo-Authored-By: Pedro Alves <pedro@palves.net>",
    "tree": {
      "sha": "4963b5066e4c34a8b7b2331195c977254e55973e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4963b5066e4c34a8b7b2331195c977254e55973e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/922cc93d5da6a6dc422b7e7a09ee745414d67457",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/922cc93d5da6a6dc422b7e7a09ee745414d67457",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/922cc93d5da6a6dc422b7e7a09ee745414d67457",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/922cc93d5da6a6dc422b7e7a09ee745414d67457/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "71a2349005e74e0d64554f5c88e3632f3ace167a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/71a2349005e74e0d64554f5c88e3632f3ace167a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/71a2349005e74e0d64554f5c88e3632f3ace167a"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 47,
    "deletions": 5
  },
  "files": [
    {
      "sha": "74b1c65fa3dab9401b67bf2a576f168f0647c1db",
      "filename": "gdb/inferior.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.c?ref=922cc93d5da6a6dc422b7e7a09ee745414d67457",
      "patch": "@@ -186,6 +186,7 @@ inferior::clear_thread_list (bool silent)\n       if (thr->deletable ())\n \tdelete thr;\n     });\n+  ptid_thread_map.clear ();\n }\n \n void"
    },
    {
      "sha": "6662a3bde4635190e19360c1d83beecdeee04948",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=922cc93d5da6a6dc422b7e7a09ee745414d67457",
      "patch": "@@ -63,6 +63,8 @@ struct thread_info;\n #include \"process-stratum-target.h\"\n #include \"displaced-stepping.h\"\n \n+#include <unordered_map>\n+\n struct infcall_suspend_state;\n struct infcall_control_state;\n \n@@ -391,6 +393,10 @@ class inferior : public refcounted_object,\n   /* This inferior's thread list, sorted by creation order.  */\n   intrusive_list<thread_info> thread_list;\n \n+  /* A map of ptid_t to thread_info*, for average O(1) ptid_t lookup.\n+     Exited threads do not appear in the map.  */\n+  std::unordered_map<ptid_t, thread_info *, hash_ptid> ptid_thread_map;\n+\n   /* Returns a range adapter covering the inferior's threads,\n      including exited threads.  Used like this:\n "
    },
    {
      "sha": "8eb8413f883cb78e589e366227bc00392c898088",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=922cc93d5da6a6dc422b7e7a09ee745414d67457",
      "patch": "@@ -9418,8 +9418,13 @@ infrun_thread_ptid_changed ()\n \n     target1.mock_inferior.pid = old_ptid.pid ();\n     target1.mock_thread.ptid = old_ptid;\n+    target1.mock_inferior.ptid_thread_map.clear ();\n+    target1.mock_inferior.ptid_thread_map[old_ptid] = &target1.mock_thread;\n+\n     target2.mock_inferior.pid = old_ptid.pid ();\n     target2.mock_thread.ptid = old_ptid;\n+    target2.mock_inferior.ptid_thread_map.clear ();\n+    target2.mock_inferior.ptid_thread_map[old_ptid] = &target2.mock_thread;\n \n     auto restore_inferior_ptid = make_scoped_restore (&inferior_ptid, old_ptid);\n     set_current_inferior (&target1.mock_inferior);\n@@ -9442,8 +9447,13 @@ infrun_thread_ptid_changed ()\n \n     target1.mock_inferior.pid = old_ptid.pid ();\n     target1.mock_thread.ptid = old_ptid;\n+    target1.mock_inferior.ptid_thread_map.clear ();\n+    target1.mock_inferior.ptid_thread_map[old_ptid] = &target1.mock_thread;\n+\n     target2.mock_inferior.pid = old_ptid.pid ();\n     target2.mock_thread.ptid = old_ptid;\n+    target2.mock_inferior.ptid_thread_map.clear ();\n+    target2.mock_inferior.ptid_thread_map[old_ptid] = &target2.mock_thread;\n \n     auto restore_inferior_ptid = make_scoped_restore (&inferior_ptid, old_ptid);\n     set_current_inferior (&target2.mock_inferior);"
    },
    {
      "sha": "ac44d714ddc163fc9b02832ec8aed2a7c79569af",
      "filename": "gdb/regcache.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/regcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/regcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.c?ref=922cc93d5da6a6dc422b7e7a09ee745414d67457",
      "patch": "@@ -2044,8 +2044,13 @@ regcache_thread_ptid_changed ()\n \n   target1.mock_inferior.pid = old_ptid.pid ();\n   target1.mock_thread.ptid = old_ptid;\n+  target1.mock_inferior.ptid_thread_map.clear ();\n+  target1.mock_inferior.ptid_thread_map[old_ptid] = &target1.mock_thread;\n+\n   target2.mock_inferior.pid = old_ptid.pid ();\n   target2.mock_thread.ptid = old_ptid;\n+  target2.mock_inferior.ptid_thread_map.clear ();\n+  target2.mock_inferior.ptid_thread_map[old_ptid] = &target2.mock_thread;\n \n   gdb_assert (regcaches.empty ());\n "
    },
    {
      "sha": "48fdbacbb14f5b18ea538825eac250f28f18a620",
      "filename": "gdb/scoped-mock-context.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/scoped-mock-context.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/scoped-mock-context.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/scoped-mock-context.h?ref=922cc93d5da6a6dc422b7e7a09ee745414d67457",
      "patch": "@@ -51,6 +51,7 @@ struct scoped_mock_context\n     inferior_list.push_back (mock_inferior);\n \n     mock_inferior.thread_list.push_back (mock_thread);\n+    mock_inferior.ptid_thread_map[mock_ptid] = &mock_thread;\n     mock_inferior.gdbarch = gdbarch;\n     mock_inferior.aspace = mock_pspace.aspace;\n     mock_inferior.pspace = &mock_pspace;"
    },
    {
      "sha": "8f0584e5238e0e720dcfca5ec7c894fab2cbc71d",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 24,
      "deletions": 5,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/922cc93d5da6a6dc422b7e7a09ee745414d67457/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=922cc93d5da6a6dc422b7e7a09ee745414d67457",
      "patch": "@@ -206,6 +206,14 @@ set_thread_exited (thread_info *tp, bool silent)\n \n       /* Clear breakpoints, etc. associated with this thread.  */\n       clear_thread_inferior_resources (tp);\n+\n+      /* Remove from the ptid_t map.  We don't want for\n+\t find_thread_ptid to find exited threads.  Also, the target\n+\t may reuse the ptid for a new thread, and there can only be\n+\t one value per key; adding a new thread with the same ptid_t\n+\t would overwrite the exited thread's ptid entry.  */\n+      size_t nr_deleted = tp->inf->ptid_thread_map.erase (tp->ptid);\n+      gdb_assert (nr_deleted == 1);\n     }\n }\n \n@@ -228,6 +236,11 @@ new_thread (struct inferior *inf, ptid_t ptid)\n \n   inf->thread_list.push_back (*tp);\n \n+  /* A thread with this ptid should not exist in the map yet.  */\n+  gdb_assert (inf->ptid_thread_map.find (ptid) == inf->ptid_thread_map.end ());\n+\n+  inf->ptid_thread_map[ptid] = tp;\n+\n   return tp;\n }\n \n@@ -484,11 +497,11 @@ find_thread_ptid (inferior *inf, ptid_t ptid)\n {\n   gdb_assert (inf != nullptr);\n \n-  for (thread_info *tp : inf->non_exited_threads ())\n-    if (tp->ptid == ptid)\n-      return tp;\n-\n-  return NULL;\n+  auto it = inf->ptid_thread_map.find (ptid);\n+  if (it != inf->ptid_thread_map.end ())\n+    return it->second;\n+  else\n+    return nullptr;\n }\n \n /* See gdbthread.h.  */\n@@ -758,7 +771,13 @@ thread_change_ptid (process_stratum_target *targ,\n   inf->pid = new_ptid.pid ();\n \n   tp = find_thread_ptid (inf, old_ptid);\n+  gdb_assert (tp != nullptr);\n+\n+  int num_erased = inf->ptid_thread_map.erase (old_ptid);\n+  gdb_assert (num_erased == 1);\n+\n   tp->ptid = new_ptid;\n+  inf->ptid_thread_map[new_ptid] = tp;\n \n   gdb::observers::thread_ptid_changed.notify (targ, old_ptid, new_ptid);\n }"
    }
  ]
}