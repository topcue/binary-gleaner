{
  "sha": "901b98215e767bbffb1bfa869e02d7dc5ea786ec",
  "node_id": "C_kwDOANOeidoAKDkwMWI5ODIxNWU3NjdiYmZmYjFiZmE4NjllMDJkN2RjNWVhNzg2ZWM",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-08-28T14:58:45Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-28T02:30:11Z"
    },
    "message": "gdb: use intrusive_list for linux-nat lwp_list\n\nReplace the manually maintained linked list of lwp_info objects with\nintrusive_list.  Replace the ALL_LWPS macro with all_lwps, which returns\na range.  Add all_lwps_safe as well, for use in iterate_over_lwps, which\ncurrently iterates in a safe manner.\n\nChange-Id: I355313502510acc0103f5eaf2fbde80897d6376c",
    "tree": {
      "sha": "31da2785d795cdf08419b11c6cfd701f1fa7b248",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/31da2785d795cdf08419b11c6cfd701f1fa7b248"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/901b98215e767bbffb1bfa869e02d7dc5ea786ec",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/901b98215e767bbffb1bfa869e02d7dc5ea786ec",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/901b98215e767bbffb1bfa869e02d7dc5ea786ec",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/901b98215e767bbffb1bfa869e02d7dc5ea786ec/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "676362df181a39a5c58bba15f4f7524bfd58b88d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/676362df181a39a5c58bba15f4f7524bfd58b88d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/676362df181a39a5c58bba15f4f7524bfd58b88d"
    }
  ],
  "stats": {
    "total": 99,
    "additions": 46,
    "deletions": 53
  },
  "files": [
    {
      "sha": "371d51f00bbade8894afb59bb70b06830dec84bd",
      "filename": "gdb/ia64-linux-nat.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/901b98215e767bbffb1bfa869e02d7dc5ea786ec/gdb/ia64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/901b98215e767bbffb1bfa869e02d7dc5ea786ec/gdb/ia64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-linux-nat.c?ref=901b98215e767bbffb1bfa869e02d7dc5ea786ec",
      "patch": "@@ -589,7 +589,6 @@ ia64_linux_nat_target::insert_watchpoint (CORE_ADDR addr, int len,\n \t\t\t\t\t  enum target_hw_bp_type type,\n \t\t\t\t\t  struct expression *cond)\n {\n-  struct lwp_info *lp;\n   int idx;\n   long dbr_addr, dbr_mask;\n   int max_watchpoints = 4;\n@@ -630,7 +629,8 @@ ia64_linux_nat_target::insert_watchpoint (CORE_ADDR addr, int len,\n \n   debug_registers[2 * idx] = dbr_addr;\n   debug_registers[2 * idx + 1] = dbr_mask;\n-  ALL_LWPS (lp)\n+\n+  for (const lwp_info *lp : all_lwps ())\n     {\n       store_debug_register_pair (lp->ptid, idx, &dbr_addr, &dbr_mask);\n       enable_watchpoints_in_psr (lp->ptid);\n@@ -657,14 +657,12 @@ ia64_linux_nat_target::remove_watchpoint (CORE_ADDR addr, int len,\n       dbr_mask = debug_registers[2 * idx + 1];\n       if ((dbr_mask & (0x3UL << 62)) && addr == (CORE_ADDR) dbr_addr)\n \t{\n-\t  struct lwp_info *lp;\n-\n \t  debug_registers[2 * idx] = 0;\n \t  debug_registers[2 * idx + 1] = 0;\n \t  dbr_addr = 0;\n \t  dbr_mask = 0;\n \n-\t  ALL_LWPS (lp)\n+\t  for (const lwp_info *lp : all_lwps ())\n \t    store_debug_register_pair (lp->ptid, idx, &dbr_addr, &dbr_mask);\n \n \t  return 0;"
    },
    {
      "sha": "bac383dd5e89d05dd3c7bbbf1e18700848dde274",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 24,
      "deletions": 22,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/901b98215e767bbffb1bfa869e02d7dc5ea786ec/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/901b98215e767bbffb1bfa869e02d7dc5ea786ec/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=901b98215e767bbffb1bfa869e02d7dc5ea786ec",
      "patch": "@@ -421,9 +421,8 @@ static int\n num_lwps (int pid)\n {\n   int count = 0;\n-  struct lwp_info *lp;\n \n-  for (lp = lwp_list; lp; lp = lp->next)\n+  for (const lwp_info *lp ATTRIBUTE_UNUSED : all_lwps ())\n     if (lp->ptid.pid () == pid)\n       count++;\n \n@@ -700,17 +699,31 @@ lwp_lwpid_htab_add_lwp (struct lwp_info *lp)\n    creation order.  This order is assumed in some cases.  E.g.,\n    reaping status after killing alls lwps of a process: the leader LWP\n    must be reaped last.  */\n-struct lwp_info *lwp_list;\n+\n+static intrusive_list<lwp_info> lwp_list;\n+\n+/* See linux-nat.h.  */\n+\n+lwp_info_range\n+all_lwps ()\n+{\n+  return lwp_info_range (lwp_list.begin ());\n+}\n+\n+/* See linux-nat.h.  */\n+\n+lwp_info_safe_range\n+all_lwps_safe ()\n+{\n+  return lwp_info_safe_range (lwp_list.begin ());\n+}\n \n /* Add LP to sorted-by-reverse-creation-order doubly-linked list.  */\n \n static void\n lwp_list_add (struct lwp_info *lp)\n {\n-  lp->next = lwp_list;\n-  if (lwp_list != NULL)\n-    lwp_list->prev = lp;\n-  lwp_list = lp;\n+  lwp_list.push_front (*lp);\n }\n \n /* Remove LP from sorted-by-reverse-creation-order doubly-linked\n@@ -720,12 +733,7 @@ static void\n lwp_list_remove (struct lwp_info *lp)\n {\n   /* Remove from sorted-by-creation-order list.  */\n-  if (lp->next != NULL)\n-    lp->next->prev = lp->prev;\n-  if (lp->prev != NULL)\n-    lp->prev->next = lp->next;\n-  if (lp == lwp_list)\n-    lwp_list = lp->next;\n+  lwp_list.erase (lwp_list.iterator_to (*lp));\n }\n \n \f\n@@ -922,12 +930,8 @@ struct lwp_info *\n iterate_over_lwps (ptid_t filter,\n \t\t   gdb::function_view<iterate_over_lwps_ftype> callback)\n {\n-  struct lwp_info *lp, *lpnext;\n-\n-  for (lp = lwp_list; lp; lp = lpnext)\n+  for (lwp_info *lp : all_lwps_safe ())\n     {\n-      lpnext = lp->next;\n-\n       if (lp->ptid.matches (filter))\n \t{\n \t  if (callback (lp) != 0)\n@@ -3715,16 +3719,14 @@ linux_nat_target::thread_alive (ptid_t ptid)\n void\n linux_nat_target::update_thread_list ()\n {\n-  struct lwp_info *lwp;\n-\n   /* We add/delete threads from the list as clone/exit events are\n      processed, so just try deleting exited threads still in the\n      thread list.  */\n   delete_exited_threads ();\n \n   /* Update the processor core that each lwp/thread was last seen\n      running on.  */\n-  ALL_LWPS (lwp)\n+  for (lwp_info *lwp : all_lwps ())\n     {\n       /* Avoid accessing /proc if the thread hasn't run since we last\n \t time we fetched the thread's core.  Accessing /proc becomes\n@@ -3948,7 +3950,7 @@ linux_proc_xfer_memory_partial (gdb_byte *readbuf, const gdb_byte *writebuf,\n \n   /* Iterate over LWPs of the current inferior, trying to access\n      memory through one of them.  */\n-  for (lwp_info *lp = lwp_list; lp != nullptr; lp = lp->next)\n+  for (lwp_info *lp : all_lwps ())\n     {\n       if (lp->ptid.pid () != cur_pid)\n \tcontinue;"
    },
    {
      "sha": "74b5eddc136526b0b3f7a24bad5e3d2a2bb34b5d",
      "filename": "gdb/linux-nat.h",
      "status": "modified",
      "additions": 16,
      "deletions": 19,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/901b98215e767bbffb1bfa869e02d7dc5ea786ec/gdb/linux-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/901b98215e767bbffb1bfa869e02d7dc5ea786ec/gdb/linux-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.h?ref=901b98215e767bbffb1bfa869e02d7dc5ea786ec",
      "patch": "@@ -196,11 +196,9 @@ extern linux_nat_target *linux_target;\n \n struct arch_lwp_info;\n \n-/* Structure describing an LWP.  This is public only for the purposes\n-   of ALL_LWPS; target-specific code should generally not access it\n-   directly.  */\n+/* Structure describing an LWP.  */\n \n-struct lwp_info\n+struct lwp_info : intrusive_list_node<lwp_info>\n {\n   lwp_info (ptid_t ptid)\n     : ptid (ptid)\n@@ -283,27 +281,26 @@ struct lwp_info\n \n   /* Arch-specific additions.  */\n   struct arch_lwp_info *arch_private = nullptr;\n-\n-  /* Previous and next pointers in doubly-linked list of known LWPs,\n-     sorted by reverse creation order.  */\n-  struct lwp_info *prev = nullptr;\n-  struct lwp_info *next = nullptr;\n };\n \n-/* The global list of LWPs, for ALL_LWPS.  Unlike the threads list,\n-   there is always at least one LWP on the list while the GNU/Linux\n-   native target is active.  */\n-extern struct lwp_info *lwp_list;\n+/* lwp_info iterator and range types.  */\n+\n+using lwp_info_iterator\n+  = reference_to_pointer_iterator<intrusive_list<lwp_info>::iterator>;\n+using lwp_info_range = iterator_range<lwp_info_iterator>;\n+using lwp_info_safe_range = basic_safe_range<lwp_info_range>;\n+\n+/* Get an iterable range over all lwps.  */\n+\n+lwp_info_range all_lwps ();\n+\n+/* Same as the above, but safe against deletion while iterating.  */\n+\n+lwp_info_safe_range all_lwps_safe ();\n \n /* Does the current host support PTRACE_GETREGSET?  */\n extern enum tribool have_ptrace_getregset;\n \n-/* Iterate over each active thread (light-weight process).  */\n-#define ALL_LWPS(LP)\t\t\t\t\t\t\t\\\n-  for ((LP) = lwp_list;\t\t\t\t\t\t\t\\\n-       (LP) != NULL;\t\t\t\t\t\t\t\\\n-       (LP) = (LP)->next)\n-\n /* Called from the LWP layer to inform the thread_db layer that PARENT\n    spawned CHILD.  Both LWPs are currently stopped.  This function\n    does whatever is required to have the child LWP under the"
    },
    {
      "sha": "ac85ea39bba0a9c7398eb65a32018abe0b22660a",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/901b98215e767bbffb1bfa869e02d7dc5ea786ec/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/901b98215e767bbffb1bfa869e02d7dc5ea786ec/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=901b98215e767bbffb1bfa869e02d7dc5ea786ec",
      "patch": "@@ -920,13 +920,12 @@ try_thread_db_load_1 (struct thread_db_info *info)\n \n   if (info->td_ta_thr_iter_p == NULL)\n     {\n-      struct lwp_info *lp;\n       int pid = inferior_ptid.pid ();\n       thread_info *curr_thread = inferior_thread ();\n \n       linux_stop_and_wait_all_lwps ();\n \n-      ALL_LWPS (lp)\n+      for (const lwp_info *lp : all_lwps ())\n \tif (lp->ptid.pid () == pid)\n \t  thread_from_lwp (curr_thread, lp->ptid);\n "
    },
    {
      "sha": "1088a7dc1b037e0c9332ab4d95ddaff83878e008",
      "filename": "gdb/mips-linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/901b98215e767bbffb1bfa869e02d7dc5ea786ec/gdb/mips-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/901b98215e767bbffb1bfa869e02d7dc5ea786ec/gdb/mips-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-linux-nat.c?ref=901b98215e767bbffb1bfa869e02d7dc5ea786ec",
      "patch": "@@ -632,12 +632,9 @@ mips_linux_nat_target::region_ok_for_hw_watchpoint (CORE_ADDR addr, int len)\n static int\n write_watchpoint_regs (void)\n {\n-  struct lwp_info *lp;\n-  int tid;\n-\n-  ALL_LWPS (lp)\n+  for (const lwp_info *lp : all_lwps ())\n     {\n-      tid = lp->ptid.lwp ();\n+      int tid = lp->ptid.lwp ();\n       if (ptrace (PTRACE_SET_WATCH_REGS, tid, &watch_mirror, NULL) == -1)\n \tperror_with_name (_(\"Couldn't write debug register\"));\n     }"
    }
  ]
}