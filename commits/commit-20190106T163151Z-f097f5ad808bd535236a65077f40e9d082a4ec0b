{
  "sha": "f097f5ad808bd535236a65077f40e9d082a4ec0b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjA5N2Y1YWQ4MDhiZDUzNTIzNmE2NTA3N2Y0MGU5ZDA4MmE0ZWMwYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-12-29T17:46:07Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-06T16:31:51Z"
    },
    "message": "Fix crash in \"finish\"\n\nPR gdb/28155 notes a crash in \"finish\" that occurs with a particular\nsource file compiled by clang.\n\nThe bug is the typical gdb problem of a missing call to check_typedef.\nclang emits a function whose return type is a typedef to void.\nget_return_value asserts that the return type is not void, but the\ncallers were not using check_typedef first.\n\ngdb/ChangeLog\n2019-01-06  Tom Tromey  <tom@tromey.com>\n\n\tPR gdb/28155:\n\t* python/py-finishbreakpoint.c (bpfinishpy_init): Use\n\tcheck_typedef.\n\t* infcmd.c (finish_command_fsm_should_stop): Use check_typedef.\n\t(print_return_value): Likewise.\n\ngdb/testsuite/ChangeLog\n2019-01-06  Tom Tromey  <tom@tromey.com>\n\n\tPR gdb/28155:\n\t* gdb.dwarf2/typedef-void-finish.exp: New file.",
    "tree": {
      "sha": "fa4dc08ce6be4fd7368b1af3538c0b038e8722f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fa4dc08ce6be4fd7368b1af3538c0b038e8722f9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f097f5ad808bd535236a65077f40e9d082a4ec0b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f097f5ad808bd535236a65077f40e9d082a4ec0b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f097f5ad808bd535236a65077f40e9d082a4ec0b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f097f5ad808bd535236a65077f40e9d082a4ec0b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bb86dd08b25624206c3943b56b79784928e58464",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb86dd08b25624206c3943b56b79784928e58464",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bb86dd08b25624206c3943b56b79784928e58464"
    }
  ],
  "stats": {
    "total": 122,
    "additions": 119,
    "deletions": 3
  },
  "files": [
    {
      "sha": "45490e9f1deda1559889302efaeff6dcdb776504",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f097f5ad808bd535236a65077f40e9d082a4ec0b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f097f5ad808bd535236a65077f40e9d082a4ec0b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f097f5ad808bd535236a65077f40e9d082a4ec0b",
      "patch": "@@ -1,3 +1,11 @@\n+2019-01-06  Tom Tromey  <tom@tromey.com>\n+\n+\tPR gdb/28155:\n+\t* python/py-finishbreakpoint.c (bpfinishpy_init): Use\n+\tcheck_typedef.\n+\t* infcmd.c (finish_command_fsm_should_stop): Use check_typedef.\n+\t(print_return_value): Likewise.\n+\n 2019-01-05  Tom Tromey  <tom@tromey.com>\n \n \t* contrib/cleanup_check.py: Remove."
    },
    {
      "sha": "3c3add89ab819cba614526c16b7008446071519b",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f097f5ad808bd535236a65077f40e9d082a4ec0b/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f097f5ad808bd535236a65077f40e9d082a4ec0b/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=f097f5ad808bd535236a65077f40e9d082a4ec0b",
      "patch": "@@ -1706,7 +1706,8 @@ print_return_value_1 (struct ui_out *uiout, struct return_value_info *rv)\n void\n print_return_value (struct ui_out *uiout, struct return_value_info *rv)\n {\n-  if (rv->type == NULL || TYPE_CODE (rv->type) == TYPE_CODE_VOID)\n+  if (rv->type == NULL\n+      || TYPE_CODE (check_typedef (rv->type)) == TYPE_CODE_VOID)\n     return;\n \n   TRY\n@@ -1800,7 +1801,7 @@ finish_command_fsm_should_stop (struct thread_fsm *self,\n \tinternal_error (__FILE__, __LINE__,\n \t\t\t_(\"finish_command: function has no target type\"));\n \n-      if (TYPE_CODE (rv->type) != TYPE_CODE_VOID)\n+      if (TYPE_CODE (check_typedef (rv->type)) != TYPE_CODE_VOID)\n \t{\n \t  struct value *func;\n "
    },
    {
      "sha": "6ad79cddb65d2fec1a1f7dc9401a7618b738378e",
      "filename": "gdb/python/py-finishbreakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f097f5ad808bd535236a65077f40e9d082a4ec0b/gdb/python/py-finishbreakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f097f5ad808bd535236a65077f40e9d082a4ec0b/gdb/python/py-finishbreakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-finishbreakpoint.c?ref=f097f5ad808bd535236a65077f40e9d082a4ec0b",
      "patch": "@@ -253,7 +253,7 @@ bpfinishpy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n           if (function != NULL)\n             {\n               struct type *ret_type =\n-                  TYPE_TARGET_TYPE (SYMBOL_TYPE (function));\n+\t\tcheck_typedef (TYPE_TARGET_TYPE (SYMBOL_TYPE (function)));\n \n               /* Remember only non-void return types.  */\n               if (TYPE_CODE (ret_type) != TYPE_CODE_VOID)"
    },
    {
      "sha": "3f7d72cd242120bb8def7587340cfd000cb1a77c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f097f5ad808bd535236a65077f40e9d082a4ec0b/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f097f5ad808bd535236a65077f40e9d082a4ec0b/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f097f5ad808bd535236a65077f40e9d082a4ec0b",
      "patch": "@@ -1,3 +1,8 @@\n+2019-01-06  Tom Tromey  <tom@tromey.com>\n+\n+\tPR gdb/28155:\n+\t* gdb.dwarf2/typedef-void-finish.exp: New file.\n+\n 2018-12-28  Tom Tromey  <tom@tromey.com>\n \t    Simon Marchi <simark@simark.ca>\n "
    },
    {
      "sha": "633409db51ca2bf105408708d5f30799b9abfb01",
      "filename": "gdb/testsuite/gdb.dwarf2/typedef-void-finish.exp",
      "status": "added",
      "additions": 102,
      "deletions": 0,
      "changes": 102,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f097f5ad808bd535236a65077f40e9d082a4ec0b/gdb/testsuite/gdb.dwarf2/typedef-void-finish.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f097f5ad808bd535236a65077f40e9d082a4ec0b/gdb/testsuite/gdb.dwarf2/typedef-void-finish.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/typedef-void-finish.exp?ref=f097f5ad808bd535236a65077f40e9d082a4ec0b",
      "patch": "@@ -0,0 +1,102 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# PR gdb/21855 concerns a crash in \"finish\" where the function's\n+# return type is a typedef of void.\n+\n+load_lib dwarf.exp\n+load_lib gdb-python.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile void-type.c typedef-void-finish.S\n+\n+# Make some DWARF for the test.\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    global srcdir subdir srcfile\n+\n+    set func_result [function_range func ${srcdir}/${subdir}/${srcfile}]\n+    set func_start [lindex $func_result 0]\n+    set func_length [lindex $func_result 1]\n+\n+    set main_result [function_range main ${srcdir}/${subdir}/${srcfile}]\n+    set main_start [lindex $main_result 0]\n+    set main_length [lindex $main_result 1]\n+\n+    cu {} {\n+\tDW_TAG_compile_unit {\n+\t        {DW_AT_producer \"GNU C 8.1\"}\n+                {DW_AT_language @DW_LANG_C}\n+                {DW_AT_name     void-type.c}\n+                {DW_AT_comp_dir /tmp}\n+        } {\n+\t    declare_labels main_type void_typedef\n+\n+\t    main_type: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size 4 DW_FORM_sdata}\n+\t\t{DW_AT_encoding  @DW_ATE_signed}\n+\t    }\n+\n+\t    void_typedef: DW_TAG_typedef {\n+\t\t{name foo}\n+\t    }\n+\n+            DW_TAG_subprogram {\n+                {name func}\n+                {low_pc $func_start addr}\n+                {high_pc \"$func_start + $func_length\" addr}\n+                {type :$void_typedef}\n+\t    }\n+            DW_TAG_subprogram {\n+                {name main}\n+                {low_pc $main_start addr}\n+                {high_pc \"$main_start + $main_length\" addr}\n+                {type :$main_type}\n+\t    }\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if {![runto_main]} {\n+    return -1\n+}\n+\n+gdb_test \"break func\" \"Breakpoint .*\" \\\n+    \"set breakpoint in func\"\n+gdb_continue_to_breakpoint \"continue to func\"\n+\n+set skip_python [skip_python_tests]\n+if {!$skip_python} {\n+    gdb_test \"python finishbp = gdb.FinishBreakpoint()\" \\\n+\t\"Temporary breakpoint.*\" \"set FinishBreakpoint\"\n+}\n+\n+gdb_test \"finish\" [multi_line \\\n+\t\t       \"Run till exit from #0  $hex in func \\\\\\(\\\\\\)\" \\\n+\t\t       \".*$hex in main \\\\\\(\\\\\\)\"]\n+\n+if {!$skip_python} {\n+    gdb_test \"python print (finishbp.return_value)\" \"None\" \\\n+\t\"check that return_value is None\"\n+}"
    }
  ]
}