{
  "sha": "31ba933ec6a14b1f7fdbd9ba51f759e2c0537b9d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzFiYTkzM2VjNmExNGIxZjdmZGJkOWJhNTFmNzU5ZTJjMDUzN2I5ZA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:05:52Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:05:52Z"
    },
    "message": "Tweak handling of remote errors in response to resumption packet\n\nWith current master, on a Fedora 27 machine with a kernel with buggy\nwatchpoint support, I see:\n\n  (gdb) PASS: gdb.threads/watchpoint-fork.exp: parent: singlethreaded: hardware breakpoints work\n  continue\n  Continuing.\n  warning: Remote failure reply: E01\n  Remote communication error.  Target disconnected.: Connection reset by peer.\n  (gdb) FAIL: gdb.threads/watchpoint-fork.exp: parent: singlethreaded: watchpoints work\n  continue\n  The program is not being run.\n  (gdb) FAIL: gdb.threads/watchpoint-fork.exp: parent: singlethreaded: breakpoint after the first fork (the program is no longer running)\n\nThe FAILs themselves aren't what's interesting here.  What is\ninteresting is that with the main multi-target patch applied, I was getting this:\n\n  (gdb) PASS: gdb.threads/watchpoint-fork.exp: parent: singlethreaded: hardware breakpoints work\n  continue\n  Continuing.\n  warning: Remote failure reply: E01\n  /home/pedro/brno/pedro/gdb/binutils-gdb-2/build/../src/gdb/inferior.c:285: internal-error: inferior* find_inferior_pid(process_stratum_target*, int): Assertion `pid != 0' failed.\n  A problem internal to GDB has been detected,\n  further debugging may prove unreliable.\n  Quit this debugging session? (y or n) FAIL: gdb.threads/watchpoint-fork.exp: parent: singlethreaded: watchpoints work (GDB internal error)\n\nThe problem is that in remote_target::wait_as, we're hitting this:\n\n  switch (buf[0])\n    {\n    case 'E':\t\t/* Error of some sort.\t*/\n      /* We're out of sync with the target now.  Did it continue or\n\t not?  Not is more likely, so report a stop.  */\n      rs->waiting_for_stop_reply = 0;\n\n      warning (_(\"Remote failure reply: %s\"), buf);\n      status->kind = TARGET_WAITKIND_STOPPED;\n      status->value.sig = GDB_SIGNAL_0;\n      break;\n\nwhich leaves event_ptid as null_ptid.  At the end of the function, we then reach:\n\n  else if (status->kind != TARGET_WAITKIND_EXITED\n\t   && status->kind != TARGET_WAITKIND_SIGNALLED)\n    {\n      if (event_ptid != null_ptid)\n\trecord_currthread (rs, event_ptid);\n      else\n\tevent_ptid = inferior_ptid;                 <<<<< here\n    }\n\nand the trouble is that with the multi-target patch, we'll get here\nwith inferior_ptid as null_ptid too.  That is done exactly to find\nthese implicit assumptions that inferior_ptid is a good choice for\ndefault thread, which isn't generaly true.\n\nI first thought of fixing this in the \"case 'E'\" path, but, given that\nthis \"event_ptid = inferior_ptid\" path is also taken when the remote\ntarget does not support threads at all, no thread-related packets or\nextensions, it's better to fix it in latter path, to handle all\nscenarios that miss reporting a thread.\n\nThat's what this patch does.\n\ngdb/ChangeLog:\n2020-01-10  Pedro Alves  <palves@redhat.com>\n\n\t* remote.c (first_remote_resumed_thread): New.\n\t(remote_target::wait_as): Use it as default event_ptid instead of\n\tinferior_ptid.",
    "tree": {
      "sha": "f808b25a9a7627df1acc414e32e9ceaf37fc9f67",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f808b25a9a7627df1acc414e32e9ceaf37fc9f67"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/31ba933ec6a14b1f7fdbd9ba51f759e2c0537b9d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/31ba933ec6a14b1f7fdbd9ba51f759e2c0537b9d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/31ba933ec6a14b1f7fdbd9ba51f759e2c0537b9d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/31ba933ec6a14b1f7fdbd9ba51f759e2c0537b9d/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "735fc2ca685b55bf1debbfcea6d2ab544e58a530",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/735fc2ca685b55bf1debbfcea6d2ab544e58a530",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/735fc2ca685b55bf1debbfcea6d2ab544e58a530"
    }
  ],
  "stats": {
    "total": 19,
    "additions": 18,
    "deletions": 1
  },
  "files": [
    {
      "sha": "9d63febea0fe8ce78eb7db662c5ae70793bc8cdb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31ba933ec6a14b1f7fdbd9ba51f759e2c0537b9d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31ba933ec6a14b1f7fdbd9ba51f759e2c0537b9d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=31ba933ec6a14b1f7fdbd9ba51f759e2c0537b9d",
      "patch": "@@ -1,3 +1,9 @@\n+2020-01-10  Pedro Alves  <palves@redhat.com>\n+\n+\t* remote.c (first_remote_resumed_thread): New.\n+\t(remote_target::wait_as): Use it as default event_ptid instead of\n+\tinferior_ptid.\n+\n 2020-01-10  Pedro Alves  <palves@redhat.com>\n \n \t* infrun.c (handle_no_resumed): Use all_non_exited_inferiors."
    },
    {
      "sha": "fa940dff7201e2aeac7deb0241e335f310fa05b3",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31ba933ec6a14b1f7fdbd9ba51f759e2c0537b9d/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31ba933ec6a14b1f7fdbd9ba51f759e2c0537b9d/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=31ba933ec6a14b1f7fdbd9ba51f759e2c0537b9d",
      "patch": "@@ -7692,6 +7692,17 @@ remote_target::wait_ns (ptid_t ptid, struct target_waitstatus *status, int optio\n     }\n }\n \n+/* Return the first resumed thread.  */\n+\n+static ptid_t\n+first_remote_resumed_thread ()\n+{\n+  for (thread_info *tp : all_non_exited_threads (minus_one_ptid))\n+    if (tp->resumed)\n+      return tp->ptid;\n+  return null_ptid;\n+}\n+\n /* Wait until the remote machine stops, then return, storing status in\n    STATUS just as `wait' would.  */\n \n@@ -7828,7 +7839,7 @@ remote_target::wait_as (ptid_t ptid, target_waitstatus *status, int options)\n       if (event_ptid != null_ptid)\n \trecord_currthread (rs, event_ptid);\n       else\n-\tevent_ptid = inferior_ptid;\n+\tevent_ptid = first_remote_resumed_thread ();\n     }\n   else\n     /* A process exit.  Invalidate our notion of current thread.  */"
    }
  ]
}