{
  "sha": "944fd3b8126f27569a6a3552b3457ba8a8cc3f87",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTQ0ZmQzYjgxMjZmMjc1NjlhNmEzNTUyYjM0NTdiYThhOGNjM2Y4Nw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:31Z"
    },
    "message": "Implement OpenCL logical binary operations\n\nThis implements \"&&\" and \"||\" for OpenCL.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* opencl-lang.c (opencl_logical_binop_operation::evaluate): New\n\tmethod.\n\t* c-exp.h (class opencl_logical_binop_operation): New.",
    "tree": {
      "sha": "b222df7620e4a10d3f3577239297c75595d58d41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b222df7620e4a10d3f3577239297c75595d58d41"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/944fd3b8126f27569a6a3552b3457ba8a8cc3f87",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/944fd3b8126f27569a6a3552b3457ba8a8cc3f87",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/944fd3b8126f27569a6a3552b3457ba8a8cc3f87",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/944fd3b8126f27569a6a3552b3457ba8a8cc3f87/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "33b79214629c2b1b219e82bb34aed5fb03913634",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33b79214629c2b1b219e82bb34aed5fb03913634",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/33b79214629c2b1b219e82bb34aed5fb03913634"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 71,
    "deletions": 0
  },
  "files": [
    {
      "sha": "a729c7384274f28b08d0302c9536d180652e397e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/944fd3b8126f27569a6a3552b3457ba8a8cc3f87/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/944fd3b8126f27569a6a3552b3457ba8a8cc3f87/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=944fd3b8126f27569a6a3552b3457ba8a8cc3f87",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* opencl-lang.c (opencl_logical_binop_operation::evaluate): New\n+\tmethod.\n+\t* c-exp.h (class opencl_logical_binop_operation): New.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* opencl-lang.c (opencl_structop_operation::evaluate): New"
    },
    {
      "sha": "f75b4aed9524c4a67786e4393b0574976803a986",
      "filename": "gdb/c-exp.h",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/944fd3b8126f27569a6a3552b3457ba8a8cc3f87/gdb/c-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/944fd3b8126f27569a6a3552b3457ba8a8cc3f87/gdb/c-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.h?ref=944fd3b8126f27569a6a3552b3457ba8a8cc3f87",
      "patch": "@@ -186,6 +186,23 @@ class opencl_structop_operation\n   { return STRUCTOP_STRUCT; }\n };\n \n+/* This handles the \"&&\" and \"||\" operations for OpenCL.  */\n+class opencl_logical_binop_operation\n+  : public tuple_holding_operation<enum exp_opcode,\n+\t\t\t\t   operation_up, operation_up>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return std::get<0> (m_storage); }\n+};\n+\n }/* namespace expr */\n \n #endif /* C_EXP_H */"
    },
    {
      "sha": "cca8505cfac2bf93aa7c9797766ae27847fceac6",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/944fd3b8126f27569a6a3552b3457ba8a8cc3f87/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/944fd3b8126f27569a6a3552b3457ba8a8cc3f87/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=944fd3b8126f27569a6a3552b3457ba8a8cc3f87",
      "patch": "@@ -984,6 +984,54 @@ opencl_structop_operation::evaluate (struct type *expect_type,\n     }\n }\n \n+value *\n+opencl_logical_binop_operation::evaluate (struct type *expect_type,\n+\t\t\t\t\t  struct expression *exp,\n+\t\t\t\t\t  enum noside noside)\n+{\n+  enum exp_opcode op = std::get<0> (m_storage);\n+  value *arg1 = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+\n+  /* For scalar operations we need to avoid evaluating operands\n+     unnecessarily.  However, for vector operations we always need to\n+     evaluate both operands.  Unfortunately we only know which of the\n+     two cases apply after we know the type of the second operand.\n+     Therefore we evaluate it once using EVAL_AVOID_SIDE_EFFECTS.  */\n+  value *arg2 = std::get<2> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t\t   EVAL_AVOID_SIDE_EFFECTS);\n+  struct type *type1 = check_typedef (value_type (arg1));\n+  struct type *type2 = check_typedef (value_type (arg2));\n+\n+  if ((type1->code () == TYPE_CODE_ARRAY && type1->is_vector ())\n+      || (type2->code () == TYPE_CODE_ARRAY && type2->is_vector ()))\n+    {\n+      arg2 = std::get<2> (m_storage)->evaluate (nullptr, exp, noside);\n+\n+      return opencl_relop (nullptr, exp, noside, op, arg1, arg2);\n+    }\n+  else\n+    {\n+      /* For scalar built-in types, only evaluate the right\n+\t hand operand if the left hand operand compares\n+\t unequal(&&)/equal(||) to 0.  */\n+      int tmp = value_logical_not (arg1);\n+\n+      if (op == BINOP_LOGICAL_OR)\n+\ttmp = !tmp;\n+\n+      if (!tmp)\n+\t{\n+\t  arg2 = std::get<2> (m_storage)->evaluate (nullptr, exp, noside);\n+\t  tmp = value_logical_not (arg2);\n+\t  if (op == BINOP_LOGICAL_OR)\n+\t    tmp = !tmp;\n+\t}\n+\n+      type1 = language_bool_type (exp->language_defn, exp->gdbarch);\n+      return value_from_longest (type1, tmp);\n+    }\n+}\n+\n } /* namespace expr */\n \n const struct exp_descriptor exp_descriptor_opencl ="
    }
  ]
}