{
  "sha": "625f7b1cdc771befb362370c42e32a3476abdb85",
  "node_id": "C_kwDOANOeidoAKDYyNWY3YjFjZGM3NzFiZWZiMzYyMzcwYzQyZTMyYTM0NzZhYmRiODU",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-09-16T17:30:35Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-10-22T12:43:42Z"
    },
    "message": "gdb/python: move gdb.Membuf support into a new file\n\nIn a future commit I'm going to be creating gdb.Membuf objects from a\nnew file within gdb/python/py*.c.  Currently all gdb.Membuf objects\nare created directly within infpy_read_memory (as a result of calling\ngdb.Inferior.read_memory()).\n\nInitially I split out the Membuf creation code into a new function,\nand left the new function in gdb/python/py-inferior.c, however, it\nfelt a little random that the Membuf creation code should live with\nthe inferior handling code.\n\nSo, then I moved all of the Membuf related code out into a new file,\ngdb/python/py-membuf.c, the interface is gdbpy_buffer_to_membuf, which\nwraps an array of bytes into a gdb.Membuf object.\n\nMost of the code is moved directly from py-inferior.c with only minor\ntweaks to layout and replacing NULL with nullptr, hence, I've left the\ncopyright date on py-membuf.c as 2009-2021 to match py-inferior.c.\n\nCurrently, the only user of this code is still py-inferior.c, but in\nlater commits this will change.\n\nThere should be no user visible changes after this commit.",
    "tree": {
      "sha": "a39ec69f519d1bcd69d3bc591c41b00c46ca4436",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a39ec69f519d1bcd69d3bc591c41b00c46ca4436"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/625f7b1cdc771befb362370c42e32a3476abdb85",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/625f7b1cdc771befb362370c42e32a3476abdb85",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/625f7b1cdc771befb362370c42e32a3476abdb85",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/625f7b1cdc771befb362370c42e32a3476abdb85/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8b87fbe6bb5f682fef889630664884ea8e7d6444",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b87fbe6bb5f682fef889630664884ea8e7d6444",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8b87fbe6bb5f682fef889630664884ea8e7d6444"
    }
  ],
  "stats": {
    "total": 415,
    "additions": 236,
    "deletions": 179
  },
  "files": [
    {
      "sha": "ec5d332c145b75439187a31f0d638e9ba174c193",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/625f7b1cdc771befb362370c42e32a3476abdb85/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/625f7b1cdc771befb362370c42e32a3476abdb85/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=625f7b1cdc771befb362370c42e32a3476abdb85",
      "patch": "@@ -407,6 +407,7 @@ SUBDIR_PYTHON_SRCS = \\\n \tpython/py-instruction.c \\\n \tpython/py-lazy-string.c \\\n \tpython/py-linetable.c \\\n+\tpython/py-membuf.c \\\n \tpython/py-newobjfileevent.c \\\n \tpython/py-objfile.c \\\n \tpython/py-param.c \\"
    },
    {
      "sha": "aec8c0f73cb5b150b328a9a44b79fad3b4ad984d",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 3,
      "deletions": 179,
      "changes": 182,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/625f7b1cdc771befb362370c42e32a3476abdb85/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/625f7b1cdc771befb362370c42e32a3476abdb85/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=625f7b1cdc771befb362370c42e32a3476abdb85",
      "patch": "@@ -62,18 +62,6 @@ extern PyTypeObject inferior_object_type\n \n static const struct inferior_data *infpy_inf_data_key;\n \n-struct membuf_object {\n-  PyObject_HEAD\n-  void *buffer;\n-\n-  /* These are kept just for mbpy_str.  */\n-  CORE_ADDR addr;\n-  CORE_ADDR length;\n-};\n-\n-extern PyTypeObject membuf_object_type\n-    CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"membuf_object\");\n-\n /* Require that INFERIOR be a valid inferior ID.  */\n #define INFPY_REQUIRE_VALID(Inferior)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n@@ -514,7 +502,7 @@ infpy_read_memory (PyObject *self, PyObject *args, PyObject *kw)\n {\n   CORE_ADDR addr, length;\n   gdb::unique_xmalloc_ptr<gdb_byte> buffer;\n-  PyObject *addr_obj, *length_obj, *result;\n+  PyObject *addr_obj, *length_obj;\n   static const char *keywords[] = { \"address\", \"length\", NULL };\n \n   if (!gdb_PyArg_ParseTupleAndKeywords (args, kw, \"OO\", keywords,\n@@ -536,23 +524,8 @@ infpy_read_memory (PyObject *self, PyObject *args, PyObject *kw)\n       GDB_PY_HANDLE_EXCEPTION (except);\n     }\n \n-  gdbpy_ref<membuf_object> membuf_obj (PyObject_New (membuf_object,\n-\t\t\t\t\t\t     &membuf_object_type));\n-  if (membuf_obj == NULL)\n-    return NULL;\n-\n-  membuf_obj->buffer = buffer.release ();\n-  membuf_obj->addr = addr;\n-  membuf_obj->length = length;\n \n-#ifdef IS_PY3K\n-  result = PyMemoryView_FromObject ((PyObject *) membuf_obj.get ());\n-#else\n-  result = PyBuffer_FromReadWriteObject ((PyObject *) membuf_obj.get (), 0,\n-\t\t\t\t\t Py_END_OF_BUFFER);\n-#endif\n-\n-  return result;\n+  return gdbpy_buffer_to_membuf (std::move (buffer), addr, length);\n }\n \n /* Implementation of Inferior.write_memory (address, buffer [, length]).\n@@ -602,93 +575,6 @@ infpy_write_memory (PyObject *self, PyObject *args, PyObject *kw)\n   Py_RETURN_NONE;\n }\n \n-/* Destructor of Membuf objects.  */\n-static void\n-mbpy_dealloc (PyObject *self)\n-{\n-  xfree (((membuf_object *) self)->buffer);\n-  Py_TYPE (self)->tp_free (self);\n-}\n-\n-/* Return a description of the Membuf object.  */\n-static PyObject *\n-mbpy_str (PyObject *self)\n-{\n-  membuf_object *membuf_obj = (membuf_object *) self;\n-\n-  return PyString_FromFormat (_(\"Memory buffer for address %s, \\\n-which is %s bytes long.\"),\n-\t\t\t      paddress (python_gdbarch, membuf_obj->addr),\n-\t\t\t      pulongest (membuf_obj->length));\n-}\n-\n-#ifdef IS_PY3K\n-\n-static int\n-get_buffer (PyObject *self, Py_buffer *buf, int flags)\n-{\n-  membuf_object *membuf_obj = (membuf_object *) self;\n-  int ret;\n-\n-  ret = PyBuffer_FillInfo (buf, self, membuf_obj->buffer,\n-\t\t\t   membuf_obj->length, 0,\n-\t\t\t   PyBUF_CONTIG);\n-\n-  /* Despite the documentation saying this field is a \"const char *\",\n-     in Python 3.4 at least, it's really a \"char *\".  */\n-  buf->format = (char *) \"c\";\n-\n-  return ret;\n-}\n-\n-#else\n-\n-static Py_ssize_t\n-get_read_buffer (PyObject *self, Py_ssize_t segment, void **ptrptr)\n-{\n-  membuf_object *membuf_obj = (membuf_object *) self;\n-\n-  if (segment)\n-    {\n-      PyErr_SetString (PyExc_SystemError,\n-\t\t       _(\"The memory buffer supports only one segment.\"));\n-      return -1;\n-    }\n-\n-  *ptrptr = membuf_obj->buffer;\n-\n-  return membuf_obj->length;\n-}\n-\n-static Py_ssize_t\n-get_write_buffer (PyObject *self, Py_ssize_t segment, void **ptrptr)\n-{\n-  return get_read_buffer (self, segment, ptrptr);\n-}\n-\n-static Py_ssize_t\n-get_seg_count (PyObject *self, Py_ssize_t *lenp)\n-{\n-  if (lenp)\n-    *lenp = ((membuf_object *) self)->length;\n-\n-  return 1;\n-}\n-\n-static Py_ssize_t\n-get_char_buffer (PyObject *self, Py_ssize_t segment, char **ptrptr)\n-{\n-  void *ptr = NULL;\n-  Py_ssize_t ret;\n-\n-  ret = get_read_buffer (self, segment, &ptr);\n-  *ptrptr = (char *) ptr;\n-\n-  return ret;\n-}\n-\n-#endif\t/* IS_PY3K */\n-\n /* Implementation of\n    gdb.search_memory (address, length, pattern).  ADDRESS is the\n    address to start the search.  LENGTH specifies the scope of the\n@@ -957,12 +843,7 @@ gdbpy_initialize_inferior (void)\n   gdb::observers::inferior_removed.attach (python_inferior_deleted,\n \t\t\t\t\t   \"py-inferior\");\n \n-  membuf_object_type.tp_new = PyType_GenericNew;\n-  if (PyType_Ready (&membuf_object_type) < 0)\n-    return -1;\n-\n-  return gdb_pymodule_addobject (gdb_module, \"Membuf\",\n-\t\t\t\t (PyObject *) &membuf_object_type);\n+  return 0;\n }\n \n static gdb_PyGetSetDef inferior_object_getset[] =\n@@ -1053,60 +934,3 @@ PyTypeObject inferior_object_type =\n   0,\t\t\t\t  /* tp_init */\n   0\t\t\t\t  /* tp_alloc */\n };\n-\n-#ifdef IS_PY3K\n-\n-static PyBufferProcs buffer_procs =\n-{\n-  get_buffer\n-};\n-\n-#else\n-\n-static PyBufferProcs buffer_procs = {\n-  get_read_buffer,\n-  get_write_buffer,\n-  get_seg_count,\n-  get_char_buffer\n-};\n-#endif\t/* IS_PY3K */\n-\n-PyTypeObject membuf_object_type = {\n-  PyVarObject_HEAD_INIT (NULL, 0)\n-  \"gdb.Membuf\",\t\t\t  /*tp_name*/\n-  sizeof (membuf_object),\t  /*tp_basicsize*/\n-  0,\t\t\t\t  /*tp_itemsize*/\n-  mbpy_dealloc,\t\t\t  /*tp_dealloc*/\n-  0,\t\t\t\t  /*tp_print*/\n-  0,\t\t\t\t  /*tp_getattr*/\n-  0,\t\t\t\t  /*tp_setattr*/\n-  0,\t\t\t\t  /*tp_compare*/\n-  0,\t\t\t\t  /*tp_repr*/\n-  0,\t\t\t\t  /*tp_as_number*/\n-  0,\t\t\t\t  /*tp_as_sequence*/\n-  0,\t\t\t\t  /*tp_as_mapping*/\n-  0,\t\t\t\t  /*tp_hash */\n-  0,\t\t\t\t  /*tp_call*/\n-  mbpy_str,\t\t\t  /*tp_str*/\n-  0,\t\t\t\t  /*tp_getattro*/\n-  0,\t\t\t\t  /*tp_setattro*/\n-  &buffer_procs,\t\t  /*tp_as_buffer*/\n-  Py_TPFLAGS_DEFAULT,\t\t  /*tp_flags*/\n-  \"GDB memory buffer object\", \t  /*tp_doc*/\n-  0,\t\t\t\t  /* tp_traverse */\n-  0,\t\t\t\t  /* tp_clear */\n-  0,\t\t\t\t  /* tp_richcompare */\n-  0,\t\t\t\t  /* tp_weaklistoffset */\n-  0,\t\t\t\t  /* tp_iter */\n-  0,\t\t\t\t  /* tp_iternext */\n-  0,\t\t\t\t  /* tp_methods */\n-  0,\t\t\t\t  /* tp_members */\n-  0,\t\t\t\t  /* tp_getset */\n-  0,\t\t\t\t  /* tp_base */\n-  0,\t\t\t\t  /* tp_dict */\n-  0,\t\t\t\t  /* tp_descr_get */\n-  0,\t\t\t\t  /* tp_descr_set */\n-  0,\t\t\t\t  /* tp_dictoffset */\n-  0,\t\t\t\t  /* tp_init */\n-  0,\t\t\t\t  /* tp_alloc */\n-};"
    },
    {
      "sha": "3978acec9074de5fadfa955b54945f513da092dd",
      "filename": "gdb/python/py-membuf.c",
      "status": "added",
      "additions": 226,
      "deletions": 0,
      "changes": 226,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/625f7b1cdc771befb362370c42e32a3476abdb85/gdb/python/py-membuf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/625f7b1cdc771befb362370c42e32a3476abdb85/gdb/python/py-membuf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-membuf.c?ref=625f7b1cdc771befb362370c42e32a3476abdb85",
      "patch": "@@ -0,0 +1,226 @@\n+/* Python memory buffer interface for reading inferior memory.\n+\n+   Copyright (C) 2009-2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"python-internal.h\"\n+\n+struct membuf_object {\n+  PyObject_HEAD\n+\n+  /* Pointer to the raw data, and array of gdb_bytes.  */\n+  void *buffer;\n+\n+  /* The address from where the data was read, held for mbpy_str.  */\n+  CORE_ADDR addr;\n+\n+  /* The number of octets in BUFFER.  */\n+  CORE_ADDR length;\n+};\n+\n+extern PyTypeObject membuf_object_type\n+    CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"membuf_object\");\n+\n+/* Wrap BUFFER, ADDRESS, and LENGTH into a gdb.Membuf object.  ADDRESS is\n+   the address within the inferior that the contents of BUFFER were read,\n+   and LENGTH is the number of octets in BUFFER.  */\n+\n+PyObject *\n+gdbpy_buffer_to_membuf (gdb::unique_xmalloc_ptr<gdb_byte> buffer,\n+\t\t\tCORE_ADDR address,\n+\t\t\tULONGEST length)\n+{\n+  gdbpy_ref<membuf_object> membuf_obj (PyObject_New (membuf_object,\n+\t\t\t\t\t\t     &membuf_object_type));\n+  if (membuf_obj == nullptr)\n+    return nullptr;\n+\n+  membuf_obj->buffer = buffer.release ();\n+  membuf_obj->addr = address;\n+  membuf_obj->length = length;\n+\n+  PyObject *result;\n+#ifdef IS_PY3K\n+  result = PyMemoryView_FromObject ((PyObject *) membuf_obj.get ());\n+#else\n+  result = PyBuffer_FromReadWriteObject ((PyObject *) membuf_obj.get (), 0,\n+\t\t\t\t\t Py_END_OF_BUFFER);\n+#endif\n+\n+  return result;\n+}\n+\n+/* Destructor for gdb.Membuf objects.  */\n+\n+static void\n+mbpy_dealloc (PyObject *self)\n+{\n+  xfree (((membuf_object *) self)->buffer);\n+  Py_TYPE (self)->tp_free (self);\n+}\n+\n+/* Return a description of the gdb.Membuf object.  */\n+\n+static PyObject *\n+mbpy_str (PyObject *self)\n+{\n+  membuf_object *membuf_obj = (membuf_object *) self;\n+\n+  return PyString_FromFormat (_(\"Memory buffer for address %s, \\\n+which is %s bytes long.\"),\n+\t\t\t      paddress (python_gdbarch, membuf_obj->addr),\n+\t\t\t      pulongest (membuf_obj->length));\n+}\n+\n+#ifdef IS_PY3K\n+\n+static int\n+get_buffer (PyObject *self, Py_buffer *buf, int flags)\n+{\n+  membuf_object *membuf_obj = (membuf_object *) self;\n+  int ret;\n+\n+  ret = PyBuffer_FillInfo (buf, self, membuf_obj->buffer,\n+\t\t\t   membuf_obj->length, 0,\n+\t\t\t   PyBUF_CONTIG);\n+\n+  /* Despite the documentation saying this field is a \"const char *\",\n+     in Python 3.4 at least, it's really a \"char *\".  */\n+  buf->format = (char *) \"c\";\n+\n+  return ret;\n+}\n+\n+#else\n+\n+static Py_ssize_t\n+get_read_buffer (PyObject *self, Py_ssize_t segment, void **ptrptr)\n+{\n+  membuf_object *membuf_obj = (membuf_object *) self;\n+\n+  if (segment)\n+    {\n+      PyErr_SetString (PyExc_SystemError,\n+\t\t       _(\"The memory buffer supports only one segment.\"));\n+      return -1;\n+    }\n+\n+  *ptrptr = membuf_obj->buffer;\n+\n+  return membuf_obj->length;\n+}\n+\n+static Py_ssize_t\n+get_write_buffer (PyObject *self, Py_ssize_t segment, void **ptrptr)\n+{\n+  return get_read_buffer (self, segment, ptrptr);\n+}\n+\n+static Py_ssize_t\n+get_seg_count (PyObject *self, Py_ssize_t *lenp)\n+{\n+  if (lenp)\n+    *lenp = ((membuf_object *) self)->length;\n+\n+  return 1;\n+}\n+\n+static Py_ssize_t\n+get_char_buffer (PyObject *self, Py_ssize_t segment, char **ptrptr)\n+{\n+  void *ptr = nullptr;\n+  Py_ssize_t ret;\n+\n+  ret = get_read_buffer (self, segment, &ptr);\n+  *ptrptr = (char *) ptr;\n+\n+  return ret;\n+}\n+\n+#endif\t/* IS_PY3K */\n+\n+/* General Python initialization callback.  */\n+\n+int\n+gdbpy_initialize_membuf (void)\n+{\n+  membuf_object_type.tp_new = PyType_GenericNew;\n+  if (PyType_Ready (&membuf_object_type) < 0)\n+    return -1;\n+\n+  return gdb_pymodule_addobject (gdb_module, \"Membuf\",\n+\t\t\t\t (PyObject *) &membuf_object_type);\n+}\n+\n+#ifdef IS_PY3K\n+\n+static PyBufferProcs buffer_procs =\n+{\n+  get_buffer\n+};\n+\n+#else\n+\n+static PyBufferProcs buffer_procs = {\n+  get_read_buffer,\n+  get_write_buffer,\n+  get_seg_count,\n+  get_char_buffer\n+};\n+\n+#endif\t/* IS_PY3K */\n+\n+PyTypeObject membuf_object_type = {\n+  PyVarObject_HEAD_INIT (nullptr, 0)\n+  \"gdb.Membuf\",\t\t\t  /*tp_name*/\n+  sizeof (membuf_object),\t  /*tp_basicsize*/\n+  0,\t\t\t\t  /*tp_itemsize*/\n+  mbpy_dealloc,\t\t\t  /*tp_dealloc*/\n+  0,\t\t\t\t  /*tp_print*/\n+  0,\t\t\t\t  /*tp_getattr*/\n+  0,\t\t\t\t  /*tp_setattr*/\n+  0,\t\t\t\t  /*tp_compare*/\n+  0,\t\t\t\t  /*tp_repr*/\n+  0,\t\t\t\t  /*tp_as_number*/\n+  0,\t\t\t\t  /*tp_as_sequence*/\n+  0,\t\t\t\t  /*tp_as_mapping*/\n+  0,\t\t\t\t  /*tp_hash */\n+  0,\t\t\t\t  /*tp_call*/\n+  mbpy_str,\t\t\t  /*tp_str*/\n+  0,\t\t\t\t  /*tp_getattro*/\n+  0,\t\t\t\t  /*tp_setattro*/\n+  &buffer_procs,\t\t  /*tp_as_buffer*/\n+  Py_TPFLAGS_DEFAULT,\t\t  /*tp_flags*/\n+  \"GDB memory buffer object\", \t  /*tp_doc*/\n+  0,\t\t\t\t  /* tp_traverse */\n+  0,\t\t\t\t  /* tp_clear */\n+  0,\t\t\t\t  /* tp_richcompare */\n+  0,\t\t\t\t  /* tp_weaklistoffset */\n+  0,\t\t\t\t  /* tp_iter */\n+  0,\t\t\t\t  /* tp_iternext */\n+  0,\t\t\t\t  /* tp_methods */\n+  0,\t\t\t\t  /* tp_members */\n+  0,\t\t\t\t  /* tp_getset */\n+  0,\t\t\t\t  /* tp_base */\n+  0,\t\t\t\t  /* tp_dict */\n+  0,\t\t\t\t  /* tp_descr_get */\n+  0,\t\t\t\t  /* tp_descr_set */\n+  0,\t\t\t\t  /* tp_dictoffset */\n+  0,\t\t\t\t  /* tp_init */\n+  0,\t\t\t\t  /* tp_alloc */\n+};"
    },
    {
      "sha": "24e28bc4767938501c5579708ed3e29528a29adb",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/625f7b1cdc771befb362370c42e32a3476abdb85/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/625f7b1cdc771befb362370c42e32a3476abdb85/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=625f7b1cdc771befb362370c42e32a3476abdb85",
      "patch": "@@ -479,6 +479,9 @@ gdbpy_ref<thread_object> create_thread_object (struct thread_info *tp);\n gdbpy_ref<> thread_to_thread_object (thread_info *thr);;\n gdbpy_ref<inferior_object> inferior_to_inferior_object (inferior *inf);\n \n+PyObject *gdbpy_buffer_to_membuf (gdb::unique_xmalloc_ptr<gdb_byte> buffer,\n+\t\t\t\t  CORE_ADDR address, ULONGEST length);\n+\n const struct block *block_object_to_block (PyObject *obj);\n struct symbol *symbol_object_to_symbol (PyObject *obj);\n struct value *value_object_to_value (PyObject *self);\n@@ -550,6 +553,8 @@ int gdbpy_initialize_unwind (void)\n   CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n int gdbpy_initialize_tui ()\n   CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n+int gdbpy_initialize_membuf ()\n+  CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n \n /* A wrapper for PyErr_Fetch that handles reference counting for the\n    caller.  */"
    },
    {
      "sha": "c81814c557be84990a1ce101294a9b19e211957b",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/625f7b1cdc771befb362370c42e32a3476abdb85/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/625f7b1cdc771befb362370c42e32a3476abdb85/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=625f7b1cdc771befb362370c42e32a3476abdb85",
      "patch": "@@ -1876,6 +1876,7 @@ do_start_initialization ()\n       || gdbpy_initialize_registers () < 0\n       || gdbpy_initialize_xmethods () < 0\n       || gdbpy_initialize_unwind () < 0\n+      || gdbpy_initialize_membuf () < 0\n       || gdbpy_initialize_tui () < 0)\n     return false;\n "
    }
  ]
}