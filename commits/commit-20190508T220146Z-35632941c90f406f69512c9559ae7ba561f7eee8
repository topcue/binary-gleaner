{
  "sha": "35632941c90f406f69512c9559ae7ba561f7eee8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzU2MzI5NDFjOTBmNDA2ZjY5NTEyYzk1NTlhZTdiYTU2MWY3ZWVlOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-21T15:12:47Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-08T22:01:46Z"
    },
    "message": "Convert target dcache to type-safe registry API\n\nThis changes the target dcache to use the type-safe registry API.\n\ngdb/ChangeLog\n2019-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* target-dcache.c (target_dcache_cleanup): Remove.\n\t(target_dcache_aspace_key): Change type.\n\t(target_dcache_init_p, target_dcache_invalidate)\n\t(target_dcache_get, target_dcache_get_or_init)\n\t(_initialize_target_dcache): Update.\n\t* dcache.h (struct dcache_deleter): New.",
    "tree": {
      "sha": "cfb2a58c71f2024392f2b1139fd367341f8ae18e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cfb2a58c71f2024392f2b1139fd367341f8ae18e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/35632941c90f406f69512c9559ae7ba561f7eee8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35632941c90f406f69512c9559ae7ba561f7eee8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/35632941c90f406f69512c9559ae7ba561f7eee8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35632941c90f406f69512c9559ae7ba561f7eee8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3017b94d60f1e8929886be6992547973ad354f4c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3017b94d60f1e8929886be6992547973ad354f4c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3017b94d60f1e8929886be6992547973ad354f4c"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 25,
    "deletions": 27
  },
  "files": [
    {
      "sha": "5c8680b377b5ec075ed7bca5cb8ea8e63066235f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35632941c90f406f69512c9559ae7ba561f7eee8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35632941c90f406f69512c9559ae7ba561f7eee8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=35632941c90f406f69512c9559ae7ba561f7eee8",
      "patch": "@@ -1,3 +1,12 @@\n+2019-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* target-dcache.c (target_dcache_cleanup): Remove.\n+\t(target_dcache_aspace_key): Change type.\n+\t(target_dcache_init_p, target_dcache_invalidate)\n+\t(target_dcache_get, target_dcache_get_or_init)\n+\t(_initialize_target_dcache): Update.\n+\t* dcache.h (struct dcache_deleter): New.\n+\n 2019-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* symtab.c (struct symbol_cache): Add destructor and"
    },
    {
      "sha": "a58ac840d120f3f679fd92e1d6dc45949a6c69bb",
      "filename": "gdb/dcache.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35632941c90f406f69512c9559ae7ba561f7eee8/gdb/dcache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35632941c90f406f69512c9559ae7ba561f7eee8/gdb/dcache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dcache.h?ref=35632941c90f406f69512c9559ae7ba561f7eee8",
      "patch": "@@ -34,6 +34,15 @@ DCACHE *dcache_init (void);\n /* Free a DCACHE.  */\n void dcache_free (DCACHE *);\n \n+/* A deletion adapter that calls dcache_free.  */\n+struct dcache_deleter\n+{\n+  void operator() (DCACHE *d) const\n+  {\n+    dcache_free (d);\n+  }\n+};\n+\n enum target_xfer_status\n   dcache_read_memory_partial (struct target_ops *ops, DCACHE *dcache,\n \t\t\t      CORE_ADDR memaddr, gdb_byte *myaddr,"
    },
    {
      "sha": "98d5c1f83b6e3931f86759fdfcc05fbaffe934f1",
      "filename": "gdb/target-dcache.c",
      "status": "modified",
      "additions": 7,
      "deletions": 27,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/35632941c90f406f69512c9559ae7ba561f7eee8/gdb/target-dcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/35632941c90f406f69512c9559ae7ba561f7eee8/gdb/target-dcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-dcache.c?ref=35632941c90f406f69512c9559ae7ba561f7eee8",
      "patch": "@@ -23,25 +23,16 @@\n /* The target dcache is kept per-address-space.  This key lets us\n    associate the cache with the address space.  */\n \n-static const struct address_space_data *target_dcache_aspace_key;\n-\n-/* Clean up dcache, represented by ARG, which is associated with\n-   ASPACE.  */\n-\n-static void\n-target_dcache_cleanup (struct address_space *aspace, void *arg)\n-{\n-  dcache_free ((DCACHE *) arg);\n-}\n+static const struct address_space_key<DCACHE, dcache_deleter>\n+  target_dcache_aspace_key;\n \n /* Target dcache is initialized or not.  */\n \n int\n target_dcache_init_p (void)\n {\n   DCACHE *dcache\n-    = (DCACHE *) address_space_data (current_program_space->aspace,\n-\t\t\t\t     target_dcache_aspace_key);\n+    = target_dcache_aspace_key.get (current_program_space->aspace);\n \n   return (dcache != NULL);\n }\n@@ -52,8 +43,7 @@ void\n target_dcache_invalidate (void)\n {\n   DCACHE *dcache\n-    = (DCACHE *) address_space_data (current_program_space->aspace,\n-\t\t\t\t     target_dcache_aspace_key);\n+    = target_dcache_aspace_key.get (current_program_space->aspace);\n \n   if (dcache != NULL)\n     dcache_invalidate (dcache);\n@@ -65,11 +55,7 @@ target_dcache_invalidate (void)\n DCACHE *\n target_dcache_get (void)\n {\n-  DCACHE *dcache\n-    = (DCACHE *) address_space_data (current_program_space->aspace,\n-\t\t\t\t     target_dcache_aspace_key);\n-\n-  return dcache;\n+  return target_dcache_aspace_key.get (current_program_space->aspace);\n }\n \n /* Return the target dcache.  If it is not initialized yet, initialize\n@@ -79,14 +65,12 @@ DCACHE *\n target_dcache_get_or_init (void)\n {\n   DCACHE *dcache\n-    = (DCACHE *) address_space_data (current_program_space->aspace,\n-\t\t\t\t     target_dcache_aspace_key);\n+    = target_dcache_aspace_key.get (current_program_space->aspace);\n \n   if (dcache == NULL)\n     {\n       dcache = dcache_init ();\n-      set_address_space_data (current_program_space->aspace,\n-\t\t\t      target_dcache_aspace_key, dcache);\n+      target_dcache_aspace_key.set (current_program_space->aspace, dcache);\n     }\n \n   return dcache;\n@@ -193,8 +177,4 @@ access is on.\"),\n \t\t\t   set_code_cache,\n \t\t\t   show_code_cache,\n \t\t\t   &setlist, &showlist);\n-\n-  target_dcache_aspace_key\n-    = register_address_space_data_with_cleanup (NULL,\n-\t\t\t\t\t\ttarget_dcache_cleanup);\n }"
    }
  ]
}