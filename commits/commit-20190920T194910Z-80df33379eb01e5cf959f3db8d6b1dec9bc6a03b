{
  "sha": "80df33379eb01e5cf959f3db8d6b1dec9bc6a03b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODBkZjMzMzc5ZWIwMWU1Y2Y5NTlmM2RiOGQ2YjFkZWM5YmM2YTAzYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-09-02T14:09:37Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-09-20T19:49:10Z"
    },
    "message": "Rename private data members of tui_data_window\n\nAs Pedro suggested, this patch renames the private data members of\ntui_data_window to use the \"m_\" prefix.\n\ngdb/ChangeLog\n2019-09-20  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-regs.h (struct tui_data_window) <get_current_group>:\n\tUpdate.\n\t<m_regs_content, m_regs_column_count, m_current_group>: Add \"m_\"\n\tprefix.\n\t* tui/tui-regs.c (tui_data_window::last_regs_line_no)\n\t(tui_data_window::line_from_reg_element_no)\n\t(tui_data_window::first_reg_element_no_inline)\n\t(tui_data_window::show_registers)\n\t(tui_data_window::show_register_group)\n\t(tui_data_window::display_registers_from)\n\t(tui_data_window::display_registers_from_line)\n\t(tui_data_window::first_data_item_displayed)\n\t(tui_data_window::delete_data_content_windows)\n\t(tui_data_window::erase_data_content)\n\t(tui_data_window::do_scroll_vertical)\n\t(tui_data_window::refresh_window)\n\t(tui_data_window::check_register_values): Update.",
    "tree": {
      "sha": "2f19765d71538d75a63574d20bfb0d9f72ff15b8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2f19765d71538d75a63574d20bfb0d9f72ff15b8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/80df33379eb01e5cf959f3db8d6b1dec9bc6a03b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80df33379eb01e5cf959f3db8d6b1dec9bc6a03b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/80df33379eb01e5cf959f3db8d6b1dec9bc6a03b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80df33379eb01e5cf959f3db8d6b1dec9bc6a03b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9923f347c4e4b9ed710de3404444cf46b04135a0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9923f347c4e4b9ed710de3404444cf46b04135a0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9923f347c4e4b9ed710de3404444cf46b04135a0"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 56,
    "deletions": 36
  },
  "files": [
    {
      "sha": "96bf00595d613c6a781463a7589716e161c3e61b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80df33379eb01e5cf959f3db8d6b1dec9bc6a03b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80df33379eb01e5cf959f3db8d6b1dec9bc6a03b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=80df33379eb01e5cf959f3db8d6b1dec9bc6a03b",
      "patch": "@@ -1,3 +1,23 @@\n+2019-09-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-regs.h (struct tui_data_window) <get_current_group>:\n+\tUpdate.\n+\t<m_regs_content, m_regs_column_count, m_current_group>: Add \"m_\"\n+\tprefix.\n+\t* tui/tui-regs.c (tui_data_window::last_regs_line_no)\n+\t(tui_data_window::line_from_reg_element_no)\n+\t(tui_data_window::first_reg_element_no_inline)\n+\t(tui_data_window::show_registers)\n+\t(tui_data_window::show_register_group)\n+\t(tui_data_window::display_registers_from)\n+\t(tui_data_window::display_registers_from_line)\n+\t(tui_data_window::first_data_item_displayed)\n+\t(tui_data_window::delete_data_content_windows)\n+\t(tui_data_window::erase_data_content)\n+\t(tui_data_window::do_scroll_vertical)\n+\t(tui_data_window::refresh_window)\n+\t(tui_data_window::check_register_values): Update.\n+\n 2019-09-20  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-stack.h (MAX_LOCATOR_ELEMENT_LEN): Remove define."
    },
    {
      "sha": "c4769cbcb437fb00bf79fc34d7b770d8a14f483c",
      "filename": "gdb/tui/tui-regs.c",
      "status": "modified",
      "additions": 32,
      "deletions": 32,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80df33379eb01e5cf959f3db8d6b1dec9bc6a03b/gdb/tui/tui-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80df33379eb01e5cf959f3db8d6b1dec9bc6a03b/gdb/tui/tui-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.c?ref=80df33379eb01e5cf959f3db8d6b1dec9bc6a03b",
      "patch": "@@ -96,8 +96,8 @@ tui_get_register (struct frame_info *frame,\n int\n tui_data_window::last_regs_line_no () const\n {\n-  int num_lines = regs_content.size () / regs_column_count;\n-  if (regs_content.size () % regs_column_count)\n+  int num_lines = m_regs_content.size () / m_regs_column_count;\n+  if (m_regs_content.size () % m_regs_column_count)\n     num_lines++;\n   return num_lines;\n }\n@@ -107,14 +107,14 @@ tui_data_window::last_regs_line_no () const\n int\n tui_data_window::line_from_reg_element_no (int element_no) const\n {\n-  if (element_no < regs_content.size ())\n+  if (element_no < m_regs_content.size ())\n     {\n       int i, line = (-1);\n \n       i = 1;\n       while (line == (-1))\n \t{\n-\t  if (element_no < regs_column_count * i)\n+\t  if (element_no < m_regs_column_count * i)\n \t    line = i - 1;\n \t  else\n \t    i++;\n@@ -131,8 +131,8 @@ tui_data_window::line_from_reg_element_no (int element_no) const\n int\n tui_data_window::first_reg_element_no_inline (int line_no) const\n {\n-  if (line_no * regs_column_count <= regs_content.size ())\n-    return ((line_no + 1) * regs_column_count) - regs_column_count;\n+  if (line_no * m_regs_column_count <= m_regs_content.size ())\n+    return ((line_no + 1) * m_regs_column_count) - m_regs_column_count;\n   else\n     return (-1);\n }\n@@ -148,17 +148,17 @@ tui_data_window::show_registers (struct reggroup *group)\n   if (target_has_registers && target_has_stack && target_has_memory)\n     {\n       show_register_group (group, get_selected_frame (NULL),\n-\t\t\t   group == current_group);\n+\t\t\t   group == m_current_group);\n \n       /* Clear all notation of changed values.  */\n-      for (auto &&data_item_win : regs_content)\n+      for (auto &&data_item_win : m_regs_content)\n \tdata_item_win.highlight = false;\n-      current_group = group;\n+      m_current_group = group;\n       rerender ();\n     }\n   else\n     {\n-      current_group = 0;\n+      m_current_group = 0;\n       erase_data_content (_(\"[ Register Values Unavailable ]\"));\n     }\n }\n@@ -199,7 +199,7 @@ tui_data_window::show_register_group (struct reggroup *group,\n       nr_regs++;\n     }\n \n-  regs_content.resize (nr_regs);\n+  m_regs_content.resize (nr_regs);\n \n   /* Now set the register names and values.  */\n   pos = 0;\n@@ -218,7 +218,7 @@ tui_data_window::show_register_group (struct reggroup *group,\n       if (name == 0 || *name == '\\0')\n \tcontinue;\n \n-      data_item_win = &regs_content[pos];\n+      data_item_win = &m_regs_content[pos];\n       if (data_item_win)\n \t{\n \t  if (!refresh_values_only)\n@@ -241,7 +241,7 @@ tui_data_window::display_registers_from (int start_element_no)\n   int j, item_win_width, cur_y;\n \n   int max_len = 0;\n-  for (auto &&data_item_win : regs_content)\n+  for (auto &&data_item_win : m_regs_content)\n     {\n       const char *p;\n       int len;\n@@ -257,24 +257,24 @@ tui_data_window::display_registers_from (int start_element_no)\n   item_win_width = max_len + 1;\n   int i = start_element_no;\n \n-  regs_column_count = (width - 2) / item_win_width;\n-  if (regs_column_count == 0)\n-    regs_column_count = 1;\n-  item_win_width = (width - 2) / regs_column_count;\n+  m_regs_column_count = (width - 2) / item_win_width;\n+  if (m_regs_column_count == 0)\n+    m_regs_column_count = 1;\n+  item_win_width = (width - 2) / m_regs_column_count;\n \n   /* Now create each data \"sub\" window, and write the display into\n      it.  */\n   cur_y = 1;\n-  while (i < regs_content.size ()\n+  while (i < m_regs_content.size ()\n \t && cur_y <= viewport_height)\n     {\n       for (j = 0;\n-\t   j < regs_column_count && i < regs_content.size ();\n+\t   j < m_regs_column_count && i < m_regs_content.size ();\n \t   j++)\n \t{\n \t  /* Create the window if necessary.  */\n-\t  regs_content[i].resize (1, item_win_width,\n-\t\t\t\t  (item_win_width * j) + 1, cur_y);\n+\t  m_regs_content[i].resize (1, item_win_width,\n+\t\t\t\t    (item_win_width * j) + 1, cur_y);\n \t  i++;\t\t/* Next register.  */\n \t}\n       cur_y++;\t\t/* Next row.  */\n@@ -322,14 +322,14 @@ tui_data_window::display_registers_from_line (int line_no)\n \t registers.  */\n       if (line_no >= last_regs_line_no ())\n \t{\n-\t  line_no = line_from_reg_element_no (regs_content.size () - 1);\n+\t  line_no = line_from_reg_element_no (m_regs_content.size () - 1);\n \t  if (line_no < 0)\n \t    line_no = 0;\n \t}\n     }\n \n   element_no = first_reg_element_no_inline (line_no);\n-  if (element_no < regs_content.size ())\n+  if (element_no < m_regs_content.size ())\n     display_reg_element_at_line (element_no, line_no);\n   else\n     line_no = (-1);\n@@ -343,11 +343,11 @@ tui_data_window::display_registers_from_line (int line_no)\n int\n tui_data_window::first_data_item_displayed ()\n {\n-  for (int i = 0; i < regs_content.size (); i++)\n+  for (int i = 0; i < m_regs_content.size (); i++)\n     {\n       struct tui_gen_win_info *data_item_win;\n \n-      data_item_win = &regs_content[i];\n+      data_item_win = &m_regs_content[i];\n       if (data_item_win->is_visible ())\n \treturn i;\n     }\n@@ -360,7 +360,7 @@ tui_data_window::first_data_item_displayed ()\n void\n tui_data_window::delete_data_content_windows ()\n {\n-  for (auto &&win : regs_content)\n+  for (auto &&win : m_regs_content)\n     {\n       tui_delete_win (win.handle);\n       win.handle = NULL;\n@@ -392,7 +392,7 @@ tui_data_window::erase_data_content (const char *prompt)\n void\n tui_data_window::rerender ()\n {\n-  if (regs_content.empty ())\n+  if (m_regs_content.empty ())\n     erase_data_content (_(\"[ Register Values Unavailable ]\"));\n   else\n     {\n@@ -411,7 +411,7 @@ tui_data_window::do_scroll_vertical (int num_to_scroll)\n   int first_line = (-1);\n \n   first_element_no = first_data_item_displayed ();\n-  if (first_element_no < regs_content.size ())\n+  if (first_element_no < m_regs_content.size ())\n     first_line = line_from_reg_element_no (first_element_no);\n   else\n     { /* Calculate the first line from the element number which is in\n@@ -433,7 +433,7 @@ void\n tui_data_window::refresh_window ()\n {\n   tui_gen_win_info::refresh_window ();\n-  for (auto &&win : regs_content)\n+  for (auto &&win : m_regs_content)\n     win.refresh_window ();\n }\n \n@@ -443,11 +443,11 @@ tui_data_window::refresh_window ()\n void\n tui_data_window::check_register_values (struct frame_info *frame)\n {\n-  if (regs_content.empty ())\n-    show_registers (current_group);\n+  if (m_regs_content.empty ())\n+    show_registers (m_current_group);\n   else\n     {\n-      for (auto &&data_item_win : regs_content)\n+      for (auto &&data_item_win : m_regs_content)\n \t{\n \t  int was_hilighted;\n "
    },
    {
      "sha": "e45a68f8f49fb57d1c14b5a0fb42abfb92fa1d79",
      "filename": "gdb/tui/tui-regs.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80df33379eb01e5cf959f3db8d6b1dec9bc6a03b/gdb/tui/tui-regs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80df33379eb01e5cf959f3db8d6b1dec9bc6a03b/gdb/tui/tui-regs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.h?ref=80df33379eb01e5cf959f3db8d6b1dec9bc6a03b",
      "patch": "@@ -71,7 +71,7 @@ struct tui_data_window : public tui_win_info\n \n   struct reggroup *get_current_group () const\n   {\n-    return current_group;\n+    return m_current_group;\n   }\n \n protected:\n@@ -130,9 +130,9 @@ struct tui_data_window : public tui_win_info\n   void erase_data_content (const char *prompt);\n \n   /* Windows that are used to display registers.  */\n-  std::vector<tui_data_item_window> regs_content;\n-  int regs_column_count = 0;\n-  struct reggroup *current_group = nullptr;\n+  std::vector<tui_data_item_window> m_regs_content;\n+  int m_regs_column_count = 0;\n+  struct reggroup *m_current_group = nullptr;\n };\n \n #endif /* TUI_TUI_REGS_H */"
    }
  ]
}