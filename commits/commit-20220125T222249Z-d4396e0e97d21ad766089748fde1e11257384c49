{
  "sha": "d4396e0e97d21ad766089748fde1e11257384c49",
  "node_id": "C_kwDOANOeidoAKGQ0Mzk2ZTBlOTdkMjFhZDc2NjA4OTc0OGZkZTFlMTEyNTczODRjNDk",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-31T00:31:41Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-25T22:22:49Z"
    },
    "message": "Reduce explicit use of gdb_stdout\n\nIn an earlier version of the pager rewrite series, it was important to\naudit unfiltered output calls to see which were truly necessary.\n\nThis is no longer necessary, but it still seems like a decent cleanup\nto change calls to avoid explicitly passing gdb_stdout.  That is,\nrather than using something like fprintf_unfiltered with gdb_stdout,\nthe code ought to use plain printf_unfiltered instead.\n\nThis patch makes this change.  I went ahead and converted all the\n_filtered calls I could find, as well, for the same clarity.",
    "tree": {
      "sha": "d688f73ec95568444a01a01f2c85474e3db3c9db",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d688f73ec95568444a01a01f2c85474e3db3c9db"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d4396e0e97d21ad766089748fde1e11257384c49",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4396e0e97d21ad766089748fde1e11257384c49",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d4396e0e97d21ad766089748fde1e11257384c49",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4396e0e97d21ad766089748fde1e11257384c49/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "244ac24b51ba1375794eed93b58d5813e7c044ca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/244ac24b51ba1375794eed93b58d5813e7c044ca",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/244ac24b51ba1375794eed93b58d5813e7c044ca"
    }
  ],
  "stats": {
    "total": 236,
    "additions": 109,
    "deletions": 127
  },
  "files": [
    {
      "sha": "914f945714e7f8d1b7bc19afc2e82f8bba6629d7",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -8255,10 +8255,9 @@ handle_automatic_hardware_breakpoints (bp_location *bl)\n \t      bl->loc_type = new_type;\n \t      if (!said)\n \t\t{\n-\t\t  fprintf_filtered (gdb_stdout,\n-\t\t\t\t    _(\"Note: automatically using \"\n-\t\t\t\t      \"hardware breakpoints for \"\n-\t\t\t\t      \"read-only addresses.\\n\"));\n+\t\t  printf_filtered (_(\"Note: automatically using \"\n+\t\t\t\t     \"hardware breakpoints for \"\n+\t\t\t\t     \"read-only addresses.\\n\"));\n \t\t  said = true;\n \t\t}\n \t    }"
    },
    {
      "sha": "c596fb0d23513e42c886e2b15865d78bcf5a0ac4",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -427,7 +427,7 @@ display_gdb_prompt (const char *new_prompt)\n       /* Don't use a _filtered function here.  It causes the assumed\n \t character position to be off, since the newline we read from\n \t the user is not accounted for.  */\n-      fprintf_unfiltered (gdb_stdout, \"%s\", actual_gdb_prompt.c_str ());\n+      printf_unfiltered (\"%s\", actual_gdb_prompt.c_str ());\n       gdb_flush (gdb_stdout);\n     }\n }"
    },
    {
      "sha": "9a945576a94c677a2c41b0c7d66750f31725ee94",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -105,13 +105,12 @@ fbsd_nat_target::find_memory_regions (find_memory_region_ftype func,\n       size = kve->kve_end - kve->kve_start;\n       if (info_verbose)\n \t{\n-\t  fprintf_filtered (gdb_stdout, \n-\t\t\t    \"Save segment, %ld bytes at %s (%c%c%c)\\n\",\n-\t\t\t    (long) size,\n-\t\t\t    paddress (target_gdbarch (), kve->kve_start),\n-\t\t\t    kve->kve_protection & KVME_PROT_READ ? 'r' : '-',\n-\t\t\t    kve->kve_protection & KVME_PROT_WRITE ? 'w' : '-',\n-\t\t\t    kve->kve_protection & KVME_PROT_EXEC ? 'x' : '-');\n+\t  printf_filtered (\"Save segment, %ld bytes at %s (%c%c%c)\\n\",\n+\t\t\t   (long) size,\n+\t\t\t   paddress (target_gdbarch (), kve->kve_start),\n+\t\t\t   kve->kve_protection & KVME_PROT_READ ? 'r' : '-',\n+\t\t\t   kve->kve_protection & KVME_PROT_WRITE ? 'w' : '-',\n+\t\t\t   kve->kve_protection & KVME_PROT_EXEC ? 'x' : '-');\n \t}\n \n       /* Invoke the callback function to create the corefile segment."
    },
    {
      "sha": "5e3aa68307bc812a9543d80992e7459f71730c6a",
      "filename": "gdb/gcore.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/gcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/gcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gcore.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -140,9 +140,8 @@ gcore_command (const char *args, int from_tty)\n     }\n \n   if (info_verbose)\n-    fprintf_filtered (gdb_stdout,\n-\t\t      \"Opening corefile '%s' for output.\\n\",\n-\t\t      corefilename.get ());\n+    printf_filtered (\"Opening corefile '%s' for output.\\n\",\n+\t\t     corefilename.get ());\n \n   if (target_supports_dumpcore ())\n     target_dumpcore (corefilename.get ());\n@@ -161,7 +160,7 @@ gcore_command (const char *args, int from_tty)\n       unlink_file.keep ();\n     }\n \n-  fprintf_filtered (gdb_stdout, \"Saved corefile %s\\n\", corefilename.get ());\n+  printf_filtered (\"Saved corefile %s\\n\", corefilename.get ());\n }\n \n static enum bfd_architecture\n@@ -385,8 +384,8 @@ gcore_create_callback (CORE_ADDR vaddr, unsigned long size, int read,\n     {\n       if (info_verbose)\n \t{\n-\t  fprintf_filtered (gdb_stdout, \"Ignore segment, %s bytes at %s\\n\",\n-\t\t\t    plongest (size), paddress (target_gdbarch (), vaddr));\n+\t  printf_filtered (\"Ignore segment, %s bytes at %s\\n\",\n+\t\t\t   plongest (size), paddress (target_gdbarch (), vaddr));\n \t}\n \n       return 0;\n@@ -445,8 +444,8 @@ gcore_create_callback (CORE_ADDR vaddr, unsigned long size, int read,\n \n   if (info_verbose)\n     {\n-      fprintf_filtered (gdb_stdout, \"Save segment, %s bytes at %s\\n\",\n-\t\t\tplongest (size), paddress (target_gdbarch (), vaddr));\n+      printf_filtered (\"Save segment, %s bytes at %s\\n\",\n+\t\t       plongest (size), paddress (target_gdbarch (), vaddr));\n     }\n \n   bfd_set_section_size (osec, size);"
    },
    {
      "sha": "2bbd46396fc739de5ae258447e79ae05f11bbb09",
      "filename": "gdb/guile/scm-param.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/guile/scm-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/guile/scm-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-param.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -320,7 +320,7 @@ pascm_set_func (const char *args, int from_tty, struct cmd_list_element *c)\n \n   /* GDB is usually silent when a parameter is set.  */\n   if (*msg.get () != '\\0')\n-    fprintf_filtered (gdb_stdout, \"%s\\n\", msg.get ());\n+    printf_filtered (\"%s\\n\", msg.get ());\n }\n \n /* A callback function that is registered against the respective"
    },
    {
      "sha": "994dd5b32a3ed561f9cc94244db4db07e89a5753",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -1103,7 +1103,7 @@ jump_command (const char *arg, int from_tty)\n   if (from_tty)\n     {\n       printf_filtered (_(\"Continuing at \"));\n-      fputs_filtered (paddress (gdbarch, addr), gdb_stdout);\n+      puts_filtered (paddress (gdbarch, addr));\n       printf_filtered (\".\\n\");\n     }\n "
    },
    {
      "sha": "4baab3c80c72a914a5db02d319605ecda44bed4c",
      "filename": "gdb/linux-fork.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/linux-fork.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/linux-fork.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-fork.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -580,7 +580,7 @@ info_checkpoints_command (const char *arg, int from_tty)\n       if (fi.num == 0)\n \tprintf_filtered (_(\" (main process)\"));\n       printf_filtered (_(\" at \"));\n-      fputs_filtered (paddress (gdbarch, pc), gdb_stdout);\n+      puts_filtered (paddress (gdbarch, pc));\n \n       symtab_and_line sal = find_pc_line (pc, 0);\n       if (sal.symtab)"
    },
    {
      "sha": "7673426b7a894f9e5b2fb5c51833d177b51f14b5",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -165,7 +165,7 @@ m2_language::printstr (struct ui_file *stream, struct type *elttype,\n \n   if (length == 0)\n     {\n-      fputs_filtered (\"\\\"\\\"\", gdb_stdout);\n+      puts_filtered (\"\\\"\\\"\");\n       return;\n     }\n "
    },
    {
      "sha": "07714644fca1b2f5365b810fd4fedb38dca8ed19",
      "filename": "gdb/macrocmd.c",
      "status": "modified",
      "additions": 24,
      "deletions": 25,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/macrocmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/macrocmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macrocmd.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -63,9 +63,9 @@ macro_expand_command (const char *exp, int from_tty)\n     {\n       gdb::unique_xmalloc_ptr<char> expanded = macro_expand (exp, *ms);\n \n-      fputs_filtered (\"expands to: \", gdb_stdout);\n-      fputs_filtered (expanded.get (), gdb_stdout);\n-      fputs_filtered (\"\\n\", gdb_stdout);\n+      puts_filtered (\"expands to: \");\n+      puts_filtered (expanded.get ());\n+      puts_filtered (\"\\n\");\n     }\n   else\n     macro_inform_no_debuginfo ();\n@@ -91,9 +91,9 @@ macro_expand_once_command (const char *exp, int from_tty)\n     {\n       gdb::unique_xmalloc_ptr<char> expanded = macro_expand_once (exp, *ms);\n \n-      fputs_filtered (\"expands to: \", gdb_stdout);\n-      fputs_filtered (expanded.get (), gdb_stdout);\n-      fputs_filtered (\"\\n\", gdb_stdout);\n+      puts_filtered (\"expands to: \");\n+      puts_filtered (expanded.get ());\n+      puts_filtered (\"\\n\");\n     }\n   else\n     macro_inform_no_debuginfo ();\n@@ -137,32 +137,32 @@ print_macro_definition (const char *name,\n \t\t\tstruct macro_source_file *file,\n \t\t\tint line)\n {\n-  fprintf_filtered (gdb_stdout, \"Defined at \");\n+  printf_filtered (\"Defined at \");\n   show_pp_source_pos (gdb_stdout, file, line);\n \n   if (line != 0)\n-    fprintf_filtered (gdb_stdout, \"#define %s\", name);\n+    printf_filtered (\"#define %s\", name);\n   else\n-    fprintf_filtered (gdb_stdout, \"-D%s\", name);\n+    printf_filtered (\"-D%s\", name);\n \n   if (d->kind == macro_function_like)\n     {\n       int i;\n \n-      fputs_filtered (\"(\", gdb_stdout);\n+      puts_filtered (\"(\");\n       for (i = 0; i < d->argc; i++)\n \t{\n-\t  fputs_filtered (d->argv[i], gdb_stdout);\n+\t  puts_filtered (d->argv[i]);\n \t  if (i + 1 < d->argc)\n-\t    fputs_filtered (\", \", gdb_stdout);\n+\t    puts_filtered (\", \");\n \t}\n-      fputs_filtered (\")\", gdb_stdout);\n+      puts_filtered (\")\");\n     }\n \n   if (line != 0)\n-    fprintf_filtered (gdb_stdout, \" %s\\n\", d->replacement);\n+    printf_filtered (\" %s\\n\", d->replacement);\n   else\n-    fprintf_filtered (gdb_stdout, \"=%s\\n\", d->replacement);\n+    printf_filtered (\"=%s\\n\", d->replacement);\n }\n \n /* The implementation of the `info macro' command.  */\n@@ -229,10 +229,9 @@ info_macro_command (const char *args, int from_tty)\n \t}\n       else\n \t{\n-\t  fprintf_filtered (gdb_stdout,\n-\t\t\t    \"The symbol `%s' has no definition as a C/C++\"\n-\t\t\t    \" preprocessor macro\\n\"\n-\t\t\t    \"at \", name);\n+\t  printf_filtered (\"The symbol `%s' has no definition as a C/C++\"\n+\t\t\t   \" preprocessor macro\\n\"\n+\t\t\t   \"at \", name);\n \t  show_pp_source_pos (gdb_stdout, ms->file, ms->line);\n \t}\n     }\n@@ -424,18 +423,18 @@ static void\n print_one_macro (const char *name, const struct macro_definition *macro,\n \t\t struct macro_source_file *source, int line)\n {\n-  fprintf_filtered (gdb_stdout, \"macro define %s\", name);\n+  printf_filtered (\"macro define %s\", name);\n   if (macro->kind == macro_function_like)\n     {\n       int i;\n \n-      fprintf_filtered (gdb_stdout, \"(\");\n+      printf_filtered (\"(\");\n       for (i = 0; i < macro->argc; ++i)\n-\tfprintf_filtered (gdb_stdout, \"%s%s\", (i > 0) ? \", \" : \"\",\n-\t\t\t  macro->argv[i]);\n-      fprintf_filtered (gdb_stdout, \")\");\n+\tprintf_filtered (\"%s%s\", (i > 0) ? \", \" : \"\",\n+\t\t\t macro->argv[i]);\n+      printf_filtered (\")\");\n     }\n-  fprintf_filtered (gdb_stdout, \" %s\\n\", macro->replacement);\n+  printf_filtered (\" %s\\n\", macro->replacement);\n }\n \n "
    },
    {
      "sha": "9e9014283cde0dc0a4c96f7d784737421d81120c",
      "filename": "gdb/netbsd-nat.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/netbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/netbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/netbsd-nat.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -247,13 +247,12 @@ nbsd_nat_target::find_memory_regions (find_memory_region_ftype func,\n       size_t size = kve->kve_end - kve->kve_start;\n       if (info_verbose)\n \t{\n-\t  fprintf_filtered (gdb_stdout,\n-\t\t\t    \"Save segment, %ld bytes at %s (%c%c%c)\\n\",\n-\t\t\t    (long) size,\n-\t\t\t    paddress (target_gdbarch (), kve->kve_start),\n-\t\t\t    kve->kve_protection & KVME_PROT_READ ? 'r' : '-',\n-\t\t\t    kve->kve_protection & KVME_PROT_WRITE ? 'w' : '-',\n-\t\t\t    kve->kve_protection & KVME_PROT_EXEC ? 'x' : '-');\n+\t  printf_filtered (\"Save segment, %ld bytes at %s (%c%c%c)\\n\",\n+\t\t\t   (long) size,\n+\t\t\t   paddress (target_gdbarch (), kve->kve_start),\n+\t\t\t   kve->kve_protection & KVME_PROT_READ ? 'r' : '-',\n+\t\t\t   kve->kve_protection & KVME_PROT_WRITE ? 'w' : '-',\n+\t\t\t   kve->kve_protection & KVME_PROT_EXEC ? 'x' : '-');\n \t}\n \n       /* Invoke the callback function to create the corefile segment."
    },
    {
      "sha": "fdbe72be83cf24ac1c357309496f4810716a1bc8",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -1155,7 +1155,7 @@ do_examine (struct format_data fmt, struct gdbarch *gdbarch, CORE_ADDR addr)\n \t}\n \n       if (format == 'i')\n-\tfputs_filtered (pc_prefix (next_address), gdb_stdout);\n+\tputs_filtered (pc_prefix (next_address));\n       print_address (next_gdbarch, next_address, gdb_stdout);\n       printf_filtered (\":\");\n       for (i = maxelts;\n@@ -1683,7 +1683,7 @@ info_address_command (const char *exp, int from_tty)\n     }\n \n   printf_filtered (\"Symbol \\\"\");\n-  fputs_filtered (sym->print_name (), gdb_stdout);\n+  puts_filtered (sym->print_name ());\n   printf_filtered (\"\\\" is \");\n   val = SYMBOL_VALUE (sym);\n   if (SYMBOL_OBJFILE_OWNED (sym))\n@@ -2184,9 +2184,9 @@ do_one_display (struct display *d)\n \t}\n       catch (const gdb_exception_error &ex)\n \t{\n-\t  fprintf_filtered (gdb_stdout, _(\"%p[<error: %s>%p]\\n\"),\n-\t\t\t    metadata_style.style ().ptr (), ex.what (),\n-\t\t\t    nullptr);\n+\t  printf_filtered (_(\"%p[<error: %s>%p]\\n\"),\n+\t\t\t   metadata_style.style ().ptr (), ex.what (),\n+\t\t\t   nullptr);\n \t}\n     }\n   else"
    },
    {
      "sha": "0e9e822996cfb78f726af3c6be639de5973a5a38",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 12,
      "deletions": 18,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -1421,9 +1421,9 @@ partial_symtab::expand_dependencies (struct objfile *objfile)\n \t  /* Inform about additional files to be read in.  */\n \t  if (info_verbose)\n \t    {\n-\t      fputs_filtered (\" \", gdb_stdout);\n+\t      puts_filtered (\" \");\n \t      wrap_here (\"\");\n-\t      fputs_filtered (\"and \", gdb_stdout);\n+\t      puts_filtered (\"and \");\n \t      wrap_here (\"\");\n \t      printf_filtered (\"%s...\", dependencies[i]->filename);\n \t      wrap_here (\"\");\t/* Flush output */\n@@ -1696,13 +1696,11 @@ maintenance_info_psymtabs (const char *regexp, int from_tty)\n \t\t\t\t     psymtab->fullname\n \t\t\t\t     ? psymtab->fullname : \"(null)\");\n \t\t    printf_filtered (\"    text addresses \");\n-\t\t    fputs_filtered (paddress (gdbarch,\n-\t\t\t\t\t      psymtab->text_low (objfile)),\n-\t\t\t\t    gdb_stdout);\n+\t\t    puts_filtered (paddress (gdbarch,\n+\t\t\t\t\t     psymtab->text_low (objfile)));\n \t\t    printf_filtered (\" -- \");\n-\t\t    fputs_filtered (paddress (gdbarch,\n-\t\t\t\t\t      psymtab->text_high (objfile)),\n-\t\t\t\t    gdb_stdout);\n+\t\t    puts_filtered (paddress (gdbarch,\n+\t\t\t\t\t     psymtab->text_high (objfile)));\n \t\t    printf_filtered (\"\\n\");\n \t\t    printf_filtered (\"    psymtabs_addrmap_supported %s\\n\",\n \t\t\t\t     (psymtab->psymtabs_addrmap_supported\n@@ -1793,11 +1791,9 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n \t\t  printf_filtered (\"Psymtab \");\n \t\t  puts_filtered (ps->filename);\n \t\t  printf_filtered (\" covers bad range \");\n-\t\t  fputs_filtered (paddress (gdbarch, ps->text_low (objfile)),\n-\t\t\t\t  gdb_stdout);\n+\t\t  puts_filtered (paddress (gdbarch, ps->text_low (objfile)));\n \t\t  printf_filtered (\" - \");\n-\t\t  fputs_filtered (paddress (gdbarch, ps->text_high (objfile)),\n-\t\t\t\t  gdb_stdout);\n+\t\t  puts_filtered (paddress (gdbarch, ps->text_high (objfile)));\n \t\t  printf_filtered (\"\\n\");\n \t\t  continue;\n \t\t}\n@@ -1849,15 +1845,13 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n \t\t  printf_filtered (\"Psymtab \");\n \t\t  puts_filtered (ps->filename);\n \t\t  printf_filtered (\" covers \");\n-\t\t  fputs_filtered (paddress (gdbarch, ps->text_low (objfile)),\n-\t\t\t\t  gdb_stdout);\n+\t\t  puts_filtered (paddress (gdbarch, ps->text_low (objfile)));\n \t\t  printf_filtered (\" - \");\n-\t\t  fputs_filtered (paddress (gdbarch, ps->text_high (objfile)),\n-\t\t\t\t  gdb_stdout);\n+\t\t  puts_filtered (paddress (gdbarch, ps->text_high (objfile)));\n \t\t  printf_filtered (\" but symtab covers only \");\n-\t\t  fputs_filtered (paddress (gdbarch, BLOCK_START (b)), gdb_stdout);\n+\t\t  puts_filtered (paddress (gdbarch, BLOCK_START (b)));\n \t\t  printf_filtered (\" - \");\n-\t\t  fputs_filtered (paddress (gdbarch, BLOCK_END (b)), gdb_stdout);\n+\t\t  puts_filtered (paddress (gdbarch, BLOCK_END (b)));\n \t\t  printf_filtered (\"\\n\");\n \t\t}\n \t    }"
    },
    {
      "sha": "a25dad315c9bf20602cf9f7222b4ac343125296d",
      "filename": "gdb/python/py-param.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/python/py-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/python/py-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-param.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -414,7 +414,7 @@ get_set_value (const char *args, int from_tty,\n \n   const char *str = set_doc_string.get ();\n   if (str != nullptr && str[0] != '\\0')\n-    fprintf_filtered (gdb_stdout, \"%s\\n\", str);\n+    printf_filtered (\"%s\\n\", str);\n }\n \n /* A callback function that is registered against the respective"
    },
    {
      "sha": "7a2d7da2c89cc2ace3cf00dd38aa2bdb019c353a",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 11,
      "deletions": 14,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -1549,19 +1549,19 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n     {\n       printf_filtered (_(\"Stack frame at \"));\n     }\n-  fputs_filtered (paddress (gdbarch, get_frame_base (fi)), gdb_stdout);\n+  puts_filtered (paddress (gdbarch, get_frame_base (fi)));\n   printf_filtered (\":\\n\");\n   printf_filtered (\" %s = \", pc_regname);\n   if (frame_pc_p)\n-    fputs_filtered (paddress (gdbarch, get_frame_pc (fi)), gdb_stdout);\n+    puts_filtered (paddress (gdbarch, get_frame_pc (fi)));\n   else\n     fputs_styled (\"<unavailable>\", metadata_style.style (), gdb_stdout);\n \n   wrap_here (\"   \");\n   if (funname)\n     {\n       printf_filtered (\" in \");\n-      fputs_filtered (funname, gdb_stdout);\n+      puts_filtered (funname);\n     }\n   wrap_here (\"   \");\n   if (sal.symtab)\n@@ -1603,7 +1603,7 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n     }\n \n   if (caller_pc_p)\n-    fputs_filtered (paddress (gdbarch, caller_pc), gdb_stdout);\n+    puts_filtered (paddress (gdbarch, caller_pc));\n   printf_filtered (\"\\n\");\n \n   if (calling_frame_info == NULL)\n@@ -1623,17 +1623,15 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n   else\n     {\n       printf_filtered (\" called by frame at \");\n-      fputs_filtered (paddress (gdbarch, get_frame_base (calling_frame_info)),\n-\t\t      gdb_stdout);\n+      puts_filtered (paddress (gdbarch, get_frame_base (calling_frame_info)));\n     }\n   if (get_next_frame (fi) && calling_frame_info)\n     puts_filtered (\",\");\n   wrap_here (\"   \");\n   if (get_next_frame (fi))\n     {\n       printf_filtered (\" caller of frame at \");\n-      fputs_filtered (paddress (gdbarch, get_frame_base (get_next_frame (fi))),\n-\t\t      gdb_stdout);\n+      puts_filtered (paddress (gdbarch, get_frame_base (get_next_frame (fi))));\n     }\n   if (get_next_frame (fi) || calling_frame_info)\n     puts_filtered (\"\\n\");\n@@ -1653,7 +1651,7 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n     else\n       {\n \tprintf_filtered (\" Arglist at \");\n-\tfputs_filtered (paddress (gdbarch, arg_list), gdb_stdout);\n+\tputs_filtered (paddress (gdbarch, arg_list));\n \tprintf_filtered (\",\");\n \n \tif (!gdbarch_frame_num_args_p (gdbarch))\n@@ -1686,7 +1684,7 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n     else\n       {\n \tprintf_filtered (\" Locals at \");\n-\tfputs_filtered (paddress (gdbarch, arg_list), gdb_stdout);\n+\tputs_filtered (paddress (gdbarch, arg_list));\n \tprintf_filtered (\",\");\n       }\n   }\n@@ -1721,14 +1719,13 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n \t\t  (value_contents_all (value).data (), sp_size, byte_order);\n \n \t\tprintf_filtered (\" Previous frame's sp is \");\n-\t\tfputs_filtered (paddress (gdbarch, sp), gdb_stdout);\n+\t\tputs_filtered (paddress (gdbarch, sp));\n \t\tprintf_filtered (\"\\n\");\n \t      }\n \t    else if (VALUE_LVAL (value) == lval_memory)\n \t      {\n \t\tprintf_filtered (\" Previous frame's sp at \");\n-\t\tfputs_filtered (paddress (gdbarch, value_address (value)),\n-\t\t\t\tgdb_stdout);\n+\t\tputs_filtered (paddress (gdbarch, value_address (value)));\n \t\tprintf_filtered (\"\\n\");\n \t      }\n \t    else if (VALUE_LVAL (value) == lval_register)\n@@ -1771,7 +1768,7 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n \t      wrap_here (\" \");\n \t      printf_filtered (\" %s at \",\n \t\t\t       gdbarch_register_name (gdbarch, i));\n-\t      fputs_filtered (paddress (gdbarch, addr), gdb_stdout);\n+\t      puts_filtered (paddress (gdbarch, addr));\n \t      count++;\n \t    }\n \t}"
    },
    {
      "sha": "315ee8ecec770c8b01ceb0a5ed2eb7541eeb98a4",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -3211,13 +3211,13 @@ list_overlays_command (const char *args, int from_tty)\n \t      name = bfd_section_name (osect->the_bfd_section);\n \n \t      printf_filtered (\"Section %s, loaded at \", name);\n-\t      fputs_filtered (paddress (gdbarch, lma), gdb_stdout);\n+\t      puts_filtered (paddress (gdbarch, lma));\n \t      puts_filtered (\" - \");\n-\t      fputs_filtered (paddress (gdbarch, lma + size), gdb_stdout);\n+\t      puts_filtered (paddress (gdbarch, lma + size));\n \t      printf_filtered (\", mapped at \");\n-\t      fputs_filtered (paddress (gdbarch, vma), gdb_stdout);\n+\t      puts_filtered (paddress (gdbarch, vma));\n \t      puts_filtered (\" - \");\n-\t      fputs_filtered (paddress (gdbarch, vma + size), gdb_stdout);\n+\t      puts_filtered (paddress (gdbarch, vma + size));\n \t      puts_filtered (\"\\n\");\n \n \t      nmapped++;"
    },
    {
      "sha": "9164cad0a6a2e154c4ba25439870cc98deb5f089",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -873,7 +873,7 @@ gdb_readline_no_editing (const char *prompt)\n       /* Don't use a _filtered function here.  It causes the assumed\n \t character position to be off, since the newline we read from\n \t the user is not accounted for.  */\n-      fputs_unfiltered (prompt, gdb_stdout);\n+      puts_unfiltered (prompt);\n       gdb_flush (gdb_stdout);\n     }\n "
    },
    {
      "sha": "c015a8c58bec3c867f9b508aedc868d9174d9c55",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -2567,8 +2567,8 @@ info_scope_command (const char *args_in, int from_tty)\n \t\t  printf_filtered (\"constant bytes: \");\n \t\t  if (SYMBOL_TYPE (sym))\n \t\t    for (j = 0; j < TYPE_LENGTH (SYMBOL_TYPE (sym)); j++)\n-\t\t      fprintf_filtered (gdb_stdout, \" %02x\",\n-\t\t\t\t\t(unsigned) SYMBOL_VALUE_BYTES (sym)[j]);\n+\t\t      printf_filtered (\" %02x\",\n+\t\t\t\t       (unsigned) SYMBOL_VALUE_BYTES (sym)[j]);\n \t\t  break;\n \t\tcase LOC_STATIC:\n \t\t  printf_filtered (\"in static storage at address \");"
    },
    {
      "sha": "158e6d91b3fb8f544a842c852c6375fc27a5acfc",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -554,7 +554,7 @@ whatis_exp (const char *exp, int show)\n   if (flags.print_offsets\n       && (type->code () == TYPE_CODE_STRUCT\n \t  || type->code () == TYPE_CODE_UNION))\n-    fprintf_filtered (gdb_stdout, \"/* offset      |    size */  \");\n+    printf_filtered (\"/* offset      |    size */  \");\n \n   printf_filtered (\"type = \");\n "
    },
    {
      "sha": "1eaa5714db19a0ce47afa1de6375fa5319a561c6",
      "filename": "gdb/unittests/command-def-selftests.c",
      "status": "modified",
      "additions": 16,
      "deletions": 20,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/unittests/command-def-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/unittests/command-def-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/command-def-selftests.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -37,9 +37,8 @@ static unsigned int nr_failed_invariants;\n static void\n broken_doc_invariant (const char *prefix, const char *name, const char *msg)\n {\n-  fprintf_filtered (gdb_stdout,\n-\t\t    \"help doc broken invariant: command '%s%s' help doc %s\\n\",\n-\t\t    prefix, name, msg);\n+  printf_filtered (\"help doc broken invariant: command '%s%s' help doc %s\\n\",\n+\t\t   prefix, name, msg);\n   nr_failed_invariants++;\n }\n \n@@ -130,13 +129,12 @@ traverse_command_structure (struct cmd_list_element **list,\n   auto dupl = lists.find (list);\n   if (dupl != lists.end ())\n     {\n-      fprintf_filtered (gdb_stdout,\n-\t\t\t\"list %p duplicated,\"\n-\t\t\t\" reachable via prefix '%s' and '%s'.\"\n-\t\t\t\"  Duplicated list first command is '%s'\\n\",\n-\t\t\tlist,\n-\t\t\tprefix, dupl->second,\n-\t\t\t(*list)->name);\n+      printf_filtered (\"list %p duplicated,\"\n+\t\t       \" reachable via prefix '%s' and '%s'.\"\n+\t\t       \"  Duplicated list first command is '%s'\\n\",\n+\t\t       list,\n+\t\t       prefix, dupl->second,\n+\t\t       (*list)->name);\n       nr_duplicates++;\n       return;\n     }\n@@ -165,17 +163,15 @@ traverse_command_structure (struct cmd_list_element **list,\n \t  || (prefixcmd == nullptr && *list != cmdlist))\n \t{\n \t  if (c->prefix == nullptr)\n-\t    fprintf_filtered (gdb_stdout,\n-\t\t\t      \"list %p reachable via prefix '%s'.\"\n-\t\t\t      \"  command '%s' has null prefixcmd\\n\",\n-\t\t\t      list,\n-\t\t\t      prefix, c->name);\n+\t    printf_filtered (\"list %p reachable via prefix '%s'.\"\n+\t\t\t     \"  command '%s' has null prefixcmd\\n\",\n+\t\t\t     list,\n+\t\t\t     prefix, c->name);\n \t  else\n-\t    fprintf_filtered (gdb_stdout,\n-\t\t\t      \"list %p reachable via prefix '%s'.\"\n-\t\t\t      \"  command '%s' has a different prefixcmd\\n\",\n-\t\t\t      list,\n-\t\t\t      prefix, c->name);\n+\t    printf_filtered (\"list %p reachable via prefix '%s'.\"\n+\t\t\t     \"  command '%s' has a different prefixcmd\\n\",\n+\t\t\t     list,\n+\t\t\t     prefix, c->name);\n \t  nr_invalid_prefixcmd++;\n \t}\n     }"
    },
    {
      "sha": "ce7885f79af257cbf34df6ec60ef6c8432252336",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4396e0e97d21ad766089748fde1e11257384c49/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4396e0e97d21ad766089748fde1e11257384c49/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=d4396e0e97d21ad766089748fde1e11257384c49",
      "patch": "@@ -1587,13 +1587,13 @@ puts_filtered_tabular (char *string, int width, int right)\n   gdb_assert (chars_per_line > 0);\n   if (chars_per_line == UINT_MAX)\n     {\n-      fputs_filtered (string, gdb_stdout);\n-      fputs_filtered (\"\\n\", gdb_stdout);\n+      puts_filtered (string);\n+      puts_filtered (\"\\n\");\n       return;\n     }\n \n   if (((chars_printed - 1) / width + 2) * width >= chars_per_line)\n-    fputs_filtered (\"\\n\", gdb_stdout);\n+    puts_filtered (\"\\n\");\n \n   if (width >= chars_per_line)\n     width = chars_per_line - 1;\n@@ -1610,8 +1610,8 @@ puts_filtered_tabular (char *string, int width, int right)\n   while (spaces--)\n     spacebuf[spaces] = ' ';\n \n-  fputs_filtered (spacebuf, gdb_stdout);\n-  fputs_filtered (string, gdb_stdout);\n+  puts_filtered (spacebuf);\n+  puts_filtered (string);\n }\n \n "
    }
  ]
}