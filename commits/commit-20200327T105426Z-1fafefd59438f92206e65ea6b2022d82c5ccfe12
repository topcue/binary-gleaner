{
  "sha": "1fafefd59438f92206e65ea6b2022d82c5ccfe12",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWZhZmVmZDU5NDM4ZjkyMjA2ZTY1ZWE2YjIwMjJkODJjNWNjZmUxMg==",
  "commit": {
    "author": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-03-27T10:54:26Z"
    },
    "committer": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-03-27T10:54:26Z"
    },
    "message": "Add testcase for PR 25662 invalid sh_offset for section\n\nbinutils/ChangeLog:\n\n2020-03-27  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\tPR binutils/25662\n\t* testsuite/binutils-all/objcopy.exp (objcopy_test): Add argument to\n\tspecify whether an object file or executable should be built and tested.\n\tChange test names to report whether an object file or executable is\n\tbeing tested.\n\t* testsuite/binutils-all/pr25662.ld: New test.\n\t* testsuite/binutils-all/pr25662.s: New test.",
    "tree": {
      "sha": "49b5c65c823a62e0309d4e9d1883f62f637019a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/49b5c65c823a62e0309d4e9d1883f62f637019a7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1fafefd59438f92206e65ea6b2022d82c5ccfe12",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fafefd59438f92206e65ea6b2022d82c5ccfe12",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1fafefd59438f92206e65ea6b2022d82c5ccfe12",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fafefd59438f92206e65ea6b2022d82c5ccfe12/comments",
  "author": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "80e2a3b66ed9055fc26a1e5e26c6158b1c87111d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80e2a3b66ed9055fc26a1e5e26c6158b1c87111d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/80e2a3b66ed9055fc26a1e5e26c6158b1c87111d"
    }
  ],
  "stats": {
    "total": 123,
    "additions": 104,
    "deletions": 19
  },
  "files": [
    {
      "sha": "df1655c2632401c2069e476eed3c4f9d935d59cf",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fafefd59438f92206e65ea6b2022d82c5ccfe12/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fafefd59438f92206e65ea6b2022d82c5ccfe12/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=1fafefd59438f92206e65ea6b2022d82c5ccfe12",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-27  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\tPR binutils/25662\n+\t* testsuite/binutils-all/objcopy.exp (objcopy_test): Add argument to\n+\tspecify whether an object file or executable should be built and tested.\n+\tChange test names to report whether an object file or executable is\n+\tbeing tested.\n+\t* testsuite/binutils-all/pr25662.ld: New test.\n+\t* testsuite/binutils-all/pr25662.s: New test.\n+\n 2020-03-27  Alan Modra  <amodra@gmail.com>\n \n \t* readelf.c (process_archive): Don't double free qualified_name."
    },
    {
      "sha": "b5c1895f41041038cd4ccf37ac87fe1a2c8ec918",
      "filename": "binutils/testsuite/binutils-all/objcopy.exp",
      "status": "modified",
      "additions": 45,
      "deletions": 19,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fafefd59438f92206e65ea6b2022d82c5ccfe12/binutils/testsuite/binutils-all/objcopy.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fafefd59438f92206e65ea6b2022d82c5ccfe12/binutils/testsuite/binutils-all/objcopy.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objcopy.exp?ref=1fafefd59438f92206e65ea6b2022d82c5ccfe12",
      "patch": "@@ -37,36 +37,60 @@ if ![is_remote host] {\n }\n \n # Test that objcopy does not modify a file when copying it.\n+# \"object\" or \"executable\" values for type are supported.\n \n-proc objcopy_test {testname srcfile} {\n+proc objcopy_test {testname srcfile type asflags ldflags} {\n     global OBJCOPY\n     global OBJCOPYFLAGS\n     global srcdir\n     global subdir\n     global tempfile\n     global copyfile\n+    set t_tempfile $tempfile\n+    set t_copyfile ${copyfile}.o\n \n-    if {![binutils_assemble $srcdir/$subdir/${srcfile} $tempfile]} then {\n-\tunresolved \"objcopy ($testname)\"\n-\tremote_file host delete $tempfile\n+    if { $type != \"object\" && $type != \"executable\" } {\n+\terror \"objcopy_test accepts only \\\"object\\\" or \\\"executable\\\" values for type\"\n+    }\n+\n+    if {![binutils_assemble_flags $srcdir/$subdir/${srcfile} $t_tempfile \"$asflags\"]} then {\n+\tunresolved \"objcopy $type ($testname)\"\n+\tremote_file host delete $t_tempfile\n \treturn\n     }\n \n-    set got [binutils_run $OBJCOPY \"$OBJCOPYFLAGS $tempfile ${copyfile}.o\"]\n+    if { $type == \"executable\" } {\n+\tglobal LD\n+\t# Check that LD exists\n+\tif {[which $LD] == 0} then {\n+\t    untested \"objcopy $type ($testname)\"\n+\t    return\n+\t}\n+\t# Use tempfile and copyfile without the .o extension for executable files\n+\tset t_tempfile [string range $tempfile 0 end-2]\n+\tset t_copyfile $copyfile\n+\tset got [binutils_run $LD \"$tempfile -o $t_tempfile $ldflags\"]\n+\tif { ![string equal \"\" $got] } then {\n+\t    unresolved \"objcopy $type ($testname)\"\n+\t    return\n+\t}\n+    }\n+\n+    set got [binutils_run $OBJCOPY \"$OBJCOPYFLAGS $t_tempfile $t_copyfile\"]\n \n     if ![string equal \"\" $got] then {\n-\tfail \"objcopy ($testname)\"\n+\tfail \"objcopy $type ($testname)\"\n     } else {\n-\tsend_log \"cmp $tempfile ${copyfile}.o\\n\"\n-\tverbose \"cmp $tempfile ${copyfile}.o\"\n+\tsend_log \"cmp $t_tempfile $t_copyfile\\n\"\n+\tverbose \"cmp $t_tempfile $t_copyfile\"\n \tif [is_remote host] {\n-\t    set src1 tmpdir/bintest.o\n-\t    set src2 tmpdir/copy.o\n-\t    remote_upload host $tempfile $src1\n-\t    remote_upload host ${copyfile}.o $src2\n+\t    set src1 tmpdir/bintest\n+\t    set src2 tmpdir/copy\n+\t    remote_upload host $t_tempfile $src1\n+\t    remote_upload host $t_copyfile $src2\n \t} else {\n-\t    set src1 ${tempfile}\n-\t    set src2 ${copyfile}.o\n+\t    set src1 $t_tempfile\n+\t    set src2 $t_copyfile\n \t}\n \tset status [remote_exec build cmp \"${src1} ${src2}\"]\n \tset exec_output [lindex $status 1]\n@@ -86,20 +110,20 @@ proc objcopy_test {testname srcfile} {\n \tclear_xfail \"hppa*-*-*n*bsd*\" \"hppa*-*-rtems*\" \"*-*-*elf*\"\n \n \tif [string equal \"\" $exec_output] then {\n-\t    pass \"objcopy ($testname)\"\n+\t    pass \"objcopy $type ($testname)\"\n \t} else {\n \t    send_log \"$exec_output\\n\"\n \t    verbose \"$exec_output\" 1\n \n \t    # On OSF/1, this succeeds with gas and fails with /bin/as.\n \t    setup_xfail \"alpha*-*-osf*\"\n \n-\t    fail \"objcopy ($testname)\"\n+\t    fail \"objcopy $type ($testname)\"\n \t}\n     }\n }\n \n-objcopy_test \"simple copy\" bintest.s\n+objcopy_test \"simple copy\" bintest.s object \"\" \"\"\n \n # Test verilog data width\n proc objcopy_test_verilog {testname} {\n@@ -1080,15 +1104,15 @@ proc objcopy_test_elf_common_symbols {} {\n # ia64 specific tests\n if { ([istarget \"ia64-*-elf*\"]\n        || [istarget \"ia64-*-linux*\"]) } {\n-    objcopy_test \"ia64 link order\" link-order.s\n+    objcopy_test \"ia64 link order\" link-order.s object \"\" \"\"\n }\n \n # ELF specific tests\n set elf64 \"\"\n if [is_elf_format] {\n     objcopy_test_symbol_manipulation\n     objcopy_test_elf_common_symbols\n-    objcopy_test \"ELF unknown section type\" unknown.s\n+    objcopy_test \"ELF unknown section type\" unknown.s object \"\" \"\"\n     objcopy_test_readelf \"ELF group 1\" group.s\n     objcopy_test_readelf \"ELF group 2\" group-2.s\n     objcopy_test_readelf \"ELF group 3\" group-3.s\n@@ -1316,3 +1340,5 @@ objcopy_remove_relocations_from_executable\n run_dump_test \"pr23633\"\n \n run_dump_test \"set-section-alignment\"\n+\n+objcopy_test \"pr25662\" pr25662.s executable \"\" \"-T$srcdir/$subdir/pr25662.ld\""
    },
    {
      "sha": "19ef1391f8d998ce1a8ce38d5498a6f5895f223d",
      "filename": "binutils/testsuite/binutils-all/pr25662.ld",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fafefd59438f92206e65ea6b2022d82c5ccfe12/binutils/testsuite/binutils-all/pr25662.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fafefd59438f92206e65ea6b2022d82c5ccfe12/binutils/testsuite/binutils-all/pr25662.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/pr25662.ld?ref=1fafefd59438f92206e65ea6b2022d82c5ccfe12",
      "patch": "@@ -0,0 +1,15 @@\n+ENTRY(_start)\n+MEMORY\n+{\n+  RAM\t: ORIGIN = 0x0000, LENGTH = 0x0FFF\n+  ROM\t: ORIGIN = 0x1000, LENGTH = 0x0FFF\n+}\n+\n+SECTIONS\n+{\n+  .data : { *(.data) } > RAM AT>ROM\n+\n+  .text : { *(.text) } > ROM\n+\n+  .bss : { *(.bss) } > RAM\n+}"
    },
    {
      "sha": "0b4db05026fc474d7a2956878213a8c6b099609b",
      "filename": "binutils/testsuite/binutils-all/pr25662.s",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fafefd59438f92206e65ea6b2022d82c5ccfe12/binutils/testsuite/binutils-all/pr25662.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fafefd59438f92206e65ea6b2022d82c5ccfe12/binutils/testsuite/binutils-all/pr25662.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/pr25662.s?ref=1fafefd59438f92206e65ea6b2022d82c5ccfe12",
      "patch": "@@ -0,0 +1,34 @@\n+/* PR 25662: objcopy sets invalid sh_offset for the first section in a\n+   no_contents segment containing program headers.\n+\n+   Several conditions are required for the bug to manifest:\n+   - The first loadable segment (which contains the program headers) must only\n+     contain SHT_NOBITS sections. .bss is the SHT_NOBITS section in this test.\n+   - The next loadable segment must have a !SHT_NOBITS loadable section. .data\n+     is the !SHT_NOBITS section in this test.\n+   - .bss must be positioned after .data in the executable file itself.\n+   - The size of .data must be such that the calculated VMA of the .bss\n+     section that follows it is not congruent with the file offset of .bss,\n+     modulo the p_align of its segment, i.e.:\n+       (VMA(.data) + sizeof(.data)) % (.bss_segment.p_align) != 0\n+     This will force the sh_offset of .bss to be aligned so it appears within\n+     .data.\n+   - The size of .data must be larger than the program headers in the first\n+     loadable segment, so that the file offset of .bss is immediately\n+     after .data, and not padded to a valid alignment by the program headers.\n+\n+   The bug originally only manifested for ELF targets, but there's no reason not\n+   to run this testcase for other file formats.  */\n+\n+\t.section .bss\n+a:\n+\t.zero\t0x2\n+\n+\t.section .data\n+c:\n+\t.zero\t0x201\n+\n+\t.section .text\n+\t.global\t_start\n+_start:\n+\t.long 0"
    }
  ]
}