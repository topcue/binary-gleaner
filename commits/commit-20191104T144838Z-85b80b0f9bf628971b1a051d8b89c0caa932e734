{
  "sha": "85b80b0f9bf628971b1a051d8b89c0caa932e734",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODViODBiMGY5YmY2Mjg5NzFiMWEwNTFkOGI4OWMwY2FhOTMyZTczNA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-04T14:48:38Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-04T14:48:38Z"
    },
    "message": "x86: re-arrange process_operands()\n\nAlter the sequence of conditions evaluated, without affecting the\noverall result. This is going to help subsequent changes (and as a nice\nside effect also slightly reduces overall indentation depth).\n\nWhile doing this take the liberty of simplifying the calculation of the\noperand index of the register operand in ShortForm handling.",
    "tree": {
      "sha": "98fa89b233a03971ed1a24294cb08add784c8714",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/98fa89b233a03971ed1a24294cb08add784c8714"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/85b80b0f9bf628971b1a051d8b89c0caa932e734",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85b80b0f9bf628971b1a051d8b89c0caa932e734",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/85b80b0f9bf628971b1a051d8b89c0caa932e734",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85b80b0f9bf628971b1a051d8b89c0caa932e734/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5103274ffc537711574f9611cb64c51fa9a65546",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5103274ffc537711574f9611cb64c51fa9a65546",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5103274ffc537711574f9611cb64c51fa9a65546"
    }
  ],
  "stats": {
    "total": 111,
    "additions": 54,
    "deletions": 57
  },
  "files": [
    {
      "sha": "185469fbfaa686996e79ac466f8e8629c448f7bc",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85b80b0f9bf628971b1a051d8b89c0caa932e734/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85b80b0f9bf628971b1a051d8b89c0caa932e734/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=85b80b0f9bf628971b1a051d8b89c0caa932e734",
      "patch": "@@ -1,3 +1,8 @@\n+2019-11-04  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (process_operands): Handle ShortForm insns\n+\tlater, splitting out their segment register sub-form.\n+\n 2019-10-31  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* testsuite/gas/i386/general.s: Add .code16gcc fldenv tests."
    },
    {
      "sha": "5866bd618e81caa7a9895cee3f699f8f744e8f0a",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 49,
      "deletions": 57,
      "changes": 106,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/85b80b0f9bf628971b1a051d8b89c0caa932e734/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/85b80b0f9bf628971b1a051d8b89c0caa932e734/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=85b80b0f9bf628971b1a051d8b89c0caa932e734",
      "patch": "@@ -7004,70 +7004,33 @@ process_operands (void)\n       i.reg_operands++;\n     }\n \n-  if (i.tm.opcode_modifier.shortform)\n-    {\n-      if (i.types[0].bitfield.sreg)\n-\t{\n-\t  if (flag_code != CODE_64BIT\n-\t      ? i.tm.base_opcode == POP_SEG_SHORT\n-\t\t&& i.op[0].regs->reg_num == 1\n-\t      : (i.tm.base_opcode | 1) == POP_SEG386_SHORT\n-\t\t&& i.op[0].regs->reg_num < 4)\n-\t    {\n-\t      as_bad (_(\"you can't `%s %s%s'\"),\n-\t\t      i.tm.name, register_prefix, i.op[0].regs->reg_name);\n-\t      return 0;\n-\t    }\n-\t  if ( i.op[0].regs->reg_num > 3 && i.tm.opcode_length == 1 )\n-\t    {\n-\t      i.tm.base_opcode ^= POP_SEG_SHORT ^ POP_SEG386_SHORT;\n-\t      i.tm.opcode_length = 2;\n-\t    }\n-\t  i.tm.base_opcode |= (i.op[0].regs->reg_num << 3);\n-\t}\n-      else\n-\t{\n-\t  /* The register or float register operand is in operand\n-\t     0 or 1.  */\n-\t  unsigned int op;\n-\n-\t  if ((i.types[0].bitfield.reg && i.types[0].bitfield.tbyte)\n-\t      || operand_type_check (i.types[0], reg))\n-\t    op = 0;\n-\t  else\n-\t    op = 1;\n-\t  /* Register goes in low 3 bits of opcode.  */\n-\t  i.tm.base_opcode |= i.op[op].regs->reg_num;\n-\t  if ((i.op[op].regs->reg_flags & RegRex) != 0)\n-\t    i.rex |= REX_B;\n-\t  if (!quiet_warnings && i.tm.opcode_modifier.ugh)\n-\t    {\n-\t      /* Warn about some common errors, but press on regardless.\n-\t\t The first case can be generated by gcc (<= 2.8.1).  */\n-\t      if (i.operands == 2)\n-\t\t{\n-\t\t  /* Reversed arguments on faddp, fsubp, etc.  */\n-\t\t  as_warn (_(\"translating to `%s %s%s,%s%s'\"), i.tm.name,\n-\t\t\t   register_prefix, i.op[!intel_syntax].regs->reg_name,\n-\t\t\t   register_prefix, i.op[intel_syntax].regs->reg_name);\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  /* Extraneous `l' suffix on fp insn.  */\n-\t\t  as_warn (_(\"translating to `%s %s%s'\"), i.tm.name,\n-\t\t\t   register_prefix, i.op[0].regs->reg_name);\n-\t\t}\n-\t    }\n-\t}\n-    }\n-  else if (i.tm.opcode_modifier.modrm)\n+  if (i.tm.opcode_modifier.modrm)\n     {\n       /* The opcode is completed (modulo i.tm.extension_opcode which\n \t must be put into the modrm byte).  Now, we make the modrm and\n \t index base bytes based on all the info we've collected.  */\n \n       default_seg = build_modrm_byte ();\n     }\n+  else if (i.types[0].bitfield.sreg)\n+    {\n+      if (flag_code != CODE_64BIT\n+\t  ? i.tm.base_opcode == POP_SEG_SHORT\n+\t    && i.op[0].regs->reg_num == 1\n+\t  : (i.tm.base_opcode | 1) == POP_SEG386_SHORT\n+\t    && i.op[0].regs->reg_num < 4)\n+\t{\n+\t  as_bad (_(\"you can't `%s %s%s'\"),\n+\t\t  i.tm.name, register_prefix, i.op[0].regs->reg_name);\n+\t  return 0;\n+\t}\n+      if ( i.op[0].regs->reg_num > 3 && i.tm.opcode_length == 1 )\n+\t{\n+\t  i.tm.base_opcode ^= POP_SEG_SHORT ^ POP_SEG386_SHORT;\n+\t  i.tm.opcode_length = 2;\n+\t}\n+      i.tm.base_opcode |= (i.op[0].regs->reg_num << 3);\n+    }\n   else if ((i.tm.base_opcode & ~0x3) == MOV_AX_DISP32)\n     {\n       default_seg = &ds;\n@@ -7078,6 +7041,35 @@ process_operands (void)\n \t on one of their operands, the default segment is ds.  */\n       default_seg = &ds;\n     }\n+  else if (i.tm.opcode_modifier.shortform)\n+    {\n+      /* The register or float register operand is in operand\n+\t 0 or 1.  */\n+      unsigned int op = !i.tm.operand_types[0].bitfield.reg;\n+\n+      /* Register goes in low 3 bits of opcode.  */\n+      i.tm.base_opcode |= i.op[op].regs->reg_num;\n+      if ((i.op[op].regs->reg_flags & RegRex) != 0)\n+\ti.rex |= REX_B;\n+      if (!quiet_warnings && i.tm.opcode_modifier.ugh)\n+\t{\n+\t  /* Warn about some common errors, but press on regardless.\n+\t     The first case can be generated by gcc (<= 2.8.1).  */\n+\t  if (i.operands == 2)\n+\t    {\n+\t      /* Reversed arguments on faddp, fsubp, etc.  */\n+\t      as_warn (_(\"translating to `%s %s%s,%s%s'\"), i.tm.name,\n+\t\t       register_prefix, i.op[!intel_syntax].regs->reg_name,\n+\t\t       register_prefix, i.op[intel_syntax].regs->reg_name);\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Extraneous `l' suffix on fp insn.  */\n+\t      as_warn (_(\"translating to `%s %s%s'\"), i.tm.name,\n+\t\t       register_prefix, i.op[0].regs->reg_name);\n+\t    }\n+\t}\n+    }\n \n   if (i.tm.base_opcode == 0x8d /* lea */\n       && i.seg[0]"
    }
  ]
}