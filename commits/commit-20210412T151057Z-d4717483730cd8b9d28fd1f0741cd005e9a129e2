{
  "sha": "d4717483730cd8b9d28fd1f0741cd005e9a129e2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDQ3MTc0ODM3MzBjZDhiOWQyOGZkMWYwNzQxY2QwMDVlOWExMjllMg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-12T15:10:57Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-12T15:10:57Z"
    },
    "message": "gdb, gdbserver: remove WinCE support code\n\nThe support for WinCE was removed with commit 84b300de3666 (\"gdbserver:\nremove support for ARM/WinCE\").  There is some leftover code for WinCE\nsupport, guarded by the _WIN32_WCE macro, which I didn't know of at the\ntime.\n\nI didn't remove the _WIN32_WCE references in the tests, because in\ntheory we still support the WinCE architecture in GDB (when debugging\nremotely).  So someone could run a test with that (although I'd be\nreally surprised).\n\ngdb/ChangeLog:\n\n\t* nat/windows-nat.c: Remove all code guarded by _WIN32_WCE.\n\t* nat/windows-nat.h: Likewise.\n\ngdbserver/ChangeLog:\n\n\t* win32-low.cc: Remove all code guarded by _WIN32_WCE.\n\t* win32-low.h: Likewise.\n\nChange-Id: I7a871b897e2135dc195b10690bff2a01d9fac05a",
    "tree": {
      "sha": "625aacb22d4cf2396670c14c35856ea28827eeb4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/625aacb22d4cf2396670c14c35856ea28827eeb4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d4717483730cd8b9d28fd1f0741cd005e9a129e2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4717483730cd8b9d28fd1f0741cd005e9a129e2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d4717483730cd8b9d28fd1f0741cd005e9a129e2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4717483730cd8b9d28fd1f0741cd005e9a129e2/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "43e05cd4f48b550023819d823fec02abf54e26d3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43e05cd4f48b550023819d823fec02abf54e26d3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/43e05cd4f48b550023819d823fec02abf54e26d3"
    }
  ],
  "stats": {
    "total": 206,
    "additions": 15,
    "deletions": 191
  },
  "files": [
    {
      "sha": "c363dc9091c12e490c9f457e04a466708db6f83e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d4717483730cd8b9d28fd1f0741cd005e9a129e2",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-12  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* nat/windows-nat.c: Remove all code guarded by _WIN32_WCE.\n+\t* nat/windows-nat.h: Likewise.\n+\n 2021-04-10  Eli Zaretskii  <eliz@gnu.org>\n \n \t* windows-nat.c (windows_nat::handle_load_dll): Call"
    },
    {
      "sha": "794e2df85baf7ffb883938f57ac6939485ec4add",
      "filename": "gdb/nat/windows-nat.c",
      "status": "modified",
      "additions": 0,
      "deletions": 11,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdb/nat/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdb/nat/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.c?ref=d4717483730cd8b9d28fd1f0741cd005e9a129e2",
      "patch": "@@ -117,19 +117,13 @@ get_image_name (HANDLE h, void *address, int unicode)\n   if (address == NULL)\n     return NULL;\n \n-#ifdef _WIN32_WCE\n-  /* Windows CE reports the address of the image name,\n-     instead of an address of a pointer into the image name.  */\n-  address_ptr = address;\n-#else\n   /* See if we could read the address of a string, and that the\n      address isn't null.  */\n   if (!ReadProcessMemory (h, address,  &address_ptr,\n \t\t\t  sizeof (address_ptr), &done)\n       || done != sizeof (address_ptr)\n       || !address_ptr)\n     return NULL;\n-#endif\n \n   /* Find the length of the string.  */\n   while (ReadProcessMemory (h, address_ptr + len++ * size, &b, size, &done)\n@@ -262,11 +256,6 @@ handle_exception (struct target_waitstatus *ourstatus, bool debug_exceptions)\n     case STATUS_WX86_BREAKPOINT:\n       DEBUG_EXCEPTION_SIMPLE (\"EXCEPTION_BREAKPOINT\");\n       ourstatus->value.sig = GDB_SIGNAL_TRAP;\n-#ifdef _WIN32_WCE\n-      /* Remove the initial breakpoint.  */\n-      check_breakpoints ((CORE_ADDR) (long) current_event\n-\t\t\t .u.Exception.ExceptionRecord.ExceptionAddress);\n-#endif\n       break;\n     case DBG_CONTROL_C:\n       DEBUG_EXCEPTION_SIMPLE (\"DBG_CONTROL_C\");"
    },
    {
      "sha": "d8aeaa4b9845d3ff565f98112f8f183654bb708b",
      "filename": "gdb/nat/windows-nat.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdb/nat/windows-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdb/nat/windows-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.h?ref=d4717483730cd8b9d28fd1f0741cd005e9a129e2",
      "patch": "@@ -67,11 +67,6 @@ struct windows_thread_info\n      was not.  */\n   int suspended = 0;\n \n-#ifdef _WIN32_WCE\n-  /* The context as retrieved right after suspending the thread. */\n-  CONTEXT base_context {};\n-#endif\n-\n   /* The context of the thread, including any manipulations.  */\n   union\n   {"
    },
    {
      "sha": "e558364b9eb9ef45f534ed8d3b567b393272546a",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=d4717483730cd8b9d28fd1f0741cd005e9a129e2",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-12  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* win32-low.cc: Remove all code guarded by _WIN32_WCE.\n+\t* win32-low.h: Likewise.\n+\n 2021-04-12  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* target.h (class process_stratum_target) <pid_to_exec_file>:"
    },
    {
      "sha": "1f4967320bcdf847ac1ad760408447fd044d2d8d",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 171,
      "changes": 176,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=d4717483730cd8b9d28fd1f0741cd005e9a129e2",
      "patch": "@@ -62,13 +62,8 @@ using namespace windows_nat;\n #define COUNTOF(STR) (sizeof (STR) / sizeof ((STR)[0]))\n #endif\n \n-#ifdef _WIN32_WCE\n-# define GETPROCADDRESS(DLL, PROC) \\\n-  ((winapi_ ## PROC) GetProcAddress (DLL, TEXT (#PROC)))\n-#else\n-# define GETPROCADDRESS(DLL, PROC) \\\n+#define GETPROCADDRESS(DLL, PROC) \\\n   ((winapi_ ## PROC) GetProcAddress (DLL, #PROC))\n-#endif\n \n int using_threads = 1;\n \n@@ -111,9 +106,7 @@ winapi_Wow64GetThreadContext win32_Wow64GetThreadContext;\n static winapi_Wow64SetThreadContext win32_Wow64SetThreadContext;\n #endif\n \n-#ifndef _WIN32_WCE\n static void win32_add_all_dlls (void);\n-#endif\n \n /* Get the thread ID from the current selected inferior (the current\n    thread).  */\n@@ -142,37 +135,19 @@ win32_get_thread_context (windows_thread_info *th)\n #endif\n     memset (&th->context, 0, sizeof (CONTEXT));\n   (*the_low_target.get_thread_context) (th);\n-#ifdef _WIN32_WCE\n-  memcpy (&th->base_context, &th->context, sizeof (CONTEXT));\n-#endif\n }\n \n /* Set the thread context of the thread associated with TH.  */\n \n static void\n win32_set_thread_context (windows_thread_info *th)\n {\n-#ifdef _WIN32_WCE\n-  /* Calling SuspendThread on a thread that is running kernel code\n-     will report that the suspending was successful, but in fact, that\n-     will often not be true.  In those cases, the context returned by\n-     GetThreadContext will not be correct by the time the thread\n-     stops, hence we can't set that context back into the thread when\n-     resuming - it will most likely crash the inferior.\n-     Unfortunately, there is no way to know when the thread will\n-     really stop.  To work around it, we'll only write the context\n-     back to the thread when either the user or GDB explicitly change\n-     it between stopping and resuming.  */\n-  if (memcmp (&th->context, &th->base_context, sizeof (CONTEXT)) != 0)\n-#endif\n-    {\n #ifdef __x86_64__\n-      if (wow64_process)\n-\twin32_Wow64SetThreadContext (th->h, &th->wow64_context);\n-      else\n+  if (wow64_process)\n+    win32_Wow64SetThreadContext (th->h, &th->wow64_context);\n+  else\n #endif\n-\tSetThreadContext (th->h, &th->context);\n-    }\n+    SetThreadContext (th->h, &th->context);\n }\n \n /* Set the thread context of the thread associated with TH.  */\n@@ -445,7 +420,6 @@ do_initial_child_stuff (HANDLE proch, DWORD pid, int attached)\n       }\n     }\n \n-#ifndef _WIN32_WCE\n   /* Now that the inferior has been started and all DLLs have been mapped,\n      we can iterate over all DLLs and load them in.\n \n@@ -462,7 +436,6 @@ do_initial_child_stuff (HANDLE proch, DWORD pid, int attached)\n      simpler to just ignore DLL load/unload events during the startup\n      phase, and then process them all in one batch now.  */\n   win32_add_all_dlls ();\n-#endif\n \n   child_initialization_done = 1;\n }\n@@ -611,46 +584,6 @@ create_process (const char *program, char *args,\n   proglen = strlen (program) + 1;\n   argslen = strlen (args) + proglen;\n \n-#ifdef _WIN32_WCE\n-  wchar_t *p, *wprogram, *wargs, *wcwd = NULL;\n-\n-  wprogram = (wchar_t *) alloca (proglen * sizeof (wchar_t));\n-  mbstowcs (wprogram, program, proglen);\n-\n-  for (p = wprogram; *p; ++p)\n-    if (L'/' == *p)\n-      *p = L'\\\\';\n-\n-  wargs = alloca ((argslen + 1) * sizeof (wchar_t));\n-  wcscpy (wargs, wprogram);\n-  wcscat (wargs, L\" \");\n-  mbstowcs (wargs + proglen, args, argslen + 1 - proglen);\n-\n-  if (inferior_cwd != NULL)\n-    {\n-      std::string expanded_infcwd = gdb_tilde_expand (inferior_cwd);\n-      std::replace (expanded_infcwd.begin (), expanded_infcwd.end (),\n-\t\t    '/', '\\\\');\n-      wcwd = alloca ((expanded_infcwd.size () + 1) * sizeof (wchar_t));\n-      if (mbstowcs (wcwd, expanded_infcwd.c_str (),\n-\t\t    expanded_infcwd.size () + 1) == NULL)\n-\t{\n-\t  error (_(\"\\\n-Could not convert the expanded inferior cwd to wide-char.\"));\n-\t}\n-    }\n-\n-  ret = CreateProcessW (wprogram, /* image name */\n-\t\t\twargs,    /* command line */\n-\t\t\tNULL,     /* security, not supported */\n-\t\t\tNULL,     /* thread, not supported */\n-\t\t\tFALSE,    /* inherit handles, not supported */\n-\t\t\tflags,    /* start flags */\n-\t\t\tNULL,     /* environment, not supported */\n-\t\t\twcwd,     /* current directory */\n-\t\t\tNULL,     /* start info, not supported */\n-\t\t\tpi);      /* proc info */\n-#else\n   STARTUPINFOA si = { sizeof (STARTUPINFOA) };\n   char *program_and_args = (char *) alloca (argslen + 1);\n \n@@ -670,7 +603,6 @@ Could not convert the expanded inferior cwd to wide-char.\"));\n \t\t\t : gdb_tilde_expand (inferior_cwd).c_str()),\n \t\t\t&si,               /* start info */\n \t\t\tpi);               /* proc info */\n-#endif\n \n   return ret;\n }\n@@ -751,12 +683,7 @@ win32_process_target::create_inferior (const char *program,\n       OUTMSG2 ((\"Process created: %s %s\\n\", program, (char *) args));\n     }\n \n-#ifndef _WIN32_WCE\n-  /* On Windows CE this handle can't be closed.  The OS reuses\n-     it in the debug events, while the 9x/NT versions of Windows\n-     probably use a DuplicateHandle'd one.  */\n   CloseHandle (pi.hThread);\n-#endif\n \n   do_initial_child_stuff (pi.hProcess, pi.dwProcessId, 0);\n \n@@ -779,11 +706,7 @@ win32_process_target::attach (unsigned long pid)\n   HANDLE h;\n   winapi_DebugSetProcessKillOnExit DebugSetProcessKillOnExit = NULL;\n   DWORD err;\n-#ifdef _WIN32_WCE\n-  HMODULE dll = GetModuleHandle (_T(\"COREDLL.DLL\"));\n-#else\n   HMODULE dll = GetModuleHandle (_T(\"KERNEL32.DLL\"));\n-#endif\n   DebugSetProcessKillOnExit = GETPROCADDRESS (dll, DebugSetProcessKillOnExit);\n \n   h = OpenProcess (PROCESS_ALL_ACCESS, FALSE, pid);\n@@ -901,11 +824,7 @@ win32_process_target::detach (process_info *process)\n {\n   winapi_DebugActiveProcessStop DebugActiveProcessStop = NULL;\n   winapi_DebugSetProcessKillOnExit DebugSetProcessKillOnExit = NULL;\n-#ifdef _WIN32_WCE\n-  HMODULE dll = GetModuleHandle (_T(\"COREDLL.DLL\"));\n-#else\n   HMODULE dll = GetModuleHandle (_T(\"KERNEL32.DLL\"));\n-#endif\n   DebugActiveProcessStop = GETPROCADDRESS (dll, DebugActiveProcessStop);\n   DebugSetProcessKillOnExit = GETPROCADDRESS (dll, DebugSetProcessKillOnExit);\n \n@@ -1056,15 +975,8 @@ win32_add_one_solib (const char *name, CORE_ADDR load_addr)\n   char buf[MAX_PATH + 1];\n   char buf2[MAX_PATH + 1];\n \n-#ifdef _WIN32_WCE\n-  WIN32_FIND_DATA w32_fd;\n-  WCHAR wname[MAX_PATH + 1];\n-  mbstowcs (wname, name, MAX_PATH);\n-  HANDLE h = FindFirstFile (wname, &w32_fd);\n-#else\n   WIN32_FIND_DATAA w32_fd;\n   HANDLE h = FindFirstFileA (name, &w32_fd);\n-#endif\n \n   /* The symbols in a dll are offset by 0x1000, which is the\n      offset from 0 of the first byte in an image - because\n@@ -1077,7 +989,6 @@ win32_add_one_solib (const char *name, CORE_ADDR load_addr)\n     {\n       FindClose (h);\n       strcpy (buf, name);\n-#ifndef _WIN32_WCE\n       {\n \tchar cwd[MAX_PATH + 1];\n \tchar *p;\n@@ -1091,16 +1002,13 @@ win32_add_one_solib (const char *name, CORE_ADDR load_addr)\n \t    SetCurrentDirectoryA (cwd);\n \t  }\n       }\n-#endif\n     }\n \n-#ifndef _WIN32_WCE\n   if (strcasecmp (buf, \"ntdll.dll\") == 0)\n     {\n       GetSystemDirectoryA (buf, sizeof (buf));\n       strcat (buf, \"\\\\ntdll.dll\");\n     }\n-#endif\n \n #ifdef __CYGWIN__\n   cygwin_conv_path (CCP_WIN_A_TO_POSIX, buf, buf2, sizeof (buf2));\n@@ -1163,8 +1071,6 @@ load_psapi (void)\n \t  && win32_GetModuleFileNameExA != NULL);\n }\n \n-#ifndef _WIN32_WCE\n-\n /* Iterate over all DLLs currently mapped by our inferior, looking for\n    a DLL loaded at LOAD_ADDR; if found, return its file name,\n    otherwise return NULL.  If LOAD_ADDR is NULL, add all mapped DLLs\n@@ -1304,7 +1210,6 @@ win32_add_all_dlls (void)\n {\n   win32_add_dll (NULL);\n }\n-#endif\t/* !_WIN32_WCE */\n \n typedef HANDLE (WINAPI *winapi_CreateToolhelp32Snapshot) (DWORD, DWORD);\n typedef BOOL (WINAPI *winapi_Module32First) (HANDLE, LPMODULEENTRY32);\n@@ -1370,14 +1275,6 @@ fake_breakpoint_event (void)\n   for_each_thread (suspend_one_thread);\n }\n \n-#ifdef _WIN32_WCE\n-static int\n-auto_delete_breakpoint (CORE_ADDR stop_pc)\n-{\n-  return 1;\n-}\n-#endif\n-\n /* See nat/windows-nat.h.  */\n \n bool\n@@ -1723,11 +1620,7 @@ win32_process_target::request_interrupt ()\n   winapi_DebugBreakProcess DebugBreakProcess;\n   winapi_GenerateConsoleCtrlEvent GenerateConsoleCtrlEvent;\n \n-#ifdef _WIN32_WCE\n-  HMODULE dll = GetModuleHandle (_T(\"COREDLL.DLL\"));\n-#else\n   HMODULE dll = GetModuleHandle (_T(\"KERNEL32.DLL\"));\n-#endif\n \n   GenerateConsoleCtrlEvent = GETPROCADDRESS (dll, GenerateConsoleCtrlEvent);\n \n@@ -1756,65 +1649,6 @@ win32_process_target::supports_hardware_single_step ()\n   return true;\n }\n \n-#ifdef _WIN32_WCE\n-int\n-win32_error_to_fileio_error (DWORD err)\n-{\n-  switch (err)\n-    {\n-    case ERROR_BAD_PATHNAME:\n-    case ERROR_FILE_NOT_FOUND:\n-    case ERROR_INVALID_NAME:\n-    case ERROR_PATH_NOT_FOUND:\n-      return FILEIO_ENOENT;\n-    case ERROR_CRC:\n-    case ERROR_IO_DEVICE:\n-    case ERROR_OPEN_FAILED:\n-      return FILEIO_EIO;\n-    case ERROR_INVALID_HANDLE:\n-      return FILEIO_EBADF;\n-    case ERROR_ACCESS_DENIED:\n-    case ERROR_SHARING_VIOLATION:\n-      return FILEIO_EACCES;\n-    case ERROR_NOACCESS:\n-      return FILEIO_EFAULT;\n-    case ERROR_BUSY:\n-      return FILEIO_EBUSY;\n-    case ERROR_ALREADY_EXISTS:\n-    case ERROR_FILE_EXISTS:\n-      return FILEIO_EEXIST;\n-    case ERROR_BAD_DEVICE:\n-      return FILEIO_ENODEV;\n-    case ERROR_DIRECTORY:\n-      return FILEIO_ENOTDIR;\n-    case ERROR_FILENAME_EXCED_RANGE:\n-    case ERROR_INVALID_DATA:\n-    case ERROR_INVALID_PARAMETER:\n-    case ERROR_NEGATIVE_SEEK:\n-      return FILEIO_EINVAL;\n-    case ERROR_TOO_MANY_OPEN_FILES:\n-      return FILEIO_EMFILE;\n-    case ERROR_HANDLE_DISK_FULL:\n-    case ERROR_DISK_FULL:\n-      return FILEIO_ENOSPC;\n-    case ERROR_WRITE_PROTECT:\n-      return FILEIO_EROFS;\n-    case ERROR_NOT_SUPPORTED:\n-      return FILEIO_ENOSYS;\n-    }\n-\n-  return FILEIO_EUNKNOWN;\n-}\n-\n-void\n-win32_process_target::hostio_last_error (char *buf)\n-{\n-  DWORD winerr = GetLastError ();\n-  int fileio_err = win32_error_to_fileio_error (winerr);\n-  sprintf (buf, \"F-1,%x\", fileio_err);\n-}\n-#endif\n-\n bool\n win32_process_target::supports_qxfer_siginfo ()\n {"
    },
    {
      "sha": "fce19e49dec9c9de7a6210b5eceac96ffaebf529",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4717483730cd8b9d28fd1f0741cd005e9a129e2/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=d4717483730cd8b9d28fd1f0741cd005e9a129e2",
      "patch": "@@ -142,10 +142,6 @@ class win32_process_target : public process_stratum_target\n \n   CORE_ADDR stopped_data_address () override;\n \n-#ifdef _WIN32_WCE\n-  void hostio_last_error (char *buf) override;\n-#endif\n-\n   bool supports_qxfer_siginfo () override;\n \n   int qxfer_siginfo (const char *annex, unsigned char *readbuf,"
    }
  ]
}