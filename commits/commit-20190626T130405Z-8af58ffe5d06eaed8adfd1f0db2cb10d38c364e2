{
  "sha": "8af58ffe5d06eaed8adfd1f0db2cb10d38c364e2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGFmNThmZmU1ZDA2ZWFlZDhhZGZkMWYwZGIyY2IxMGQzOGMzNjRlMg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-06-26T13:04:05Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-06-26T13:04:05Z"
    },
    "message": "[gdb/testsuite] Compile varval twice, once without bad DWARF\n\nWhen we run gdb.dwarf2/varval.exp with board cc-with-dwz, we run into:\n...\ngdb compile failed, dwz: varval: Couldn't find DIE referenced by \\\n  DW_OP_GNU_variable_value\ncc-with-tweaks.sh: dwz did not modify varval.\nUNTESTED: gdb.dwarf2/varval.exp: failed to prepare\n...\n\nThe problem is that varval contains some bad DWARF, which has been added\nintentionally to test GDB, but that bad DWARF causes dwz to error out, which\nhas the consequence that the test-case remains untested with cc-with-dwz,\nwhile the test-case contains also correct DWARF that does not occur in any\nother test, and which we would really like to test with board cc-with-dwz.\n\nFix this by compiling varval twice, once without and once with the bad DWARF,\nsuch that we have at least:\n...\nPASS: gdb.dwarf2/varval.exp: print varval\nPASS: gdb.dwarf2/varval.exp: print varval2\nPASS: gdb.dwarf2/varval.exp: print constval\nPASS: gdb.dwarf2/varval.exp: print mixedval\nPASS: gdb.dwarf2/varval.exp: print pointerval\nPASS: gdb.dwarf2/varval.exp: print *pointerval\nPASS: gdb.dwarf2/varval.exp: print structval\nPASS: gdb.dwarf2/varval.exp: print untypedval\ngdb compile failed, dwz: varval: Couldn't find DIE referenced by \\\n  DW_OP_GNU_variable_value\ncc-with-tweaks.sh: dwz did not modify varval.\nUNTESTED: gdb.dwarf2/varval.exp: failed to prepare\n...\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2019-06-26  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.dwarf2/varval.exp: Compile twice, once without bad DWARF.",
    "tree": {
      "sha": "00db43961b2404ccc4e246113c8ab9dca5ff83ff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/00db43961b2404ccc4e246113c8ab9dca5ff83ff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8af58ffe5d06eaed8adfd1f0db2cb10d38c364e2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8af58ffe5d06eaed8adfd1f0db2cb10d38c364e2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8af58ffe5d06eaed8adfd1f0db2cb10d38c364e2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8af58ffe5d06eaed8adfd1f0db2cb10d38c364e2/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "22e217527d1ba9ff3d933a14c9d81b066fac606d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22e217527d1ba9ff3d933a14c9d81b066fac606d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/22e217527d1ba9ff3d933a14c9d81b066fac606d"
    }
  ],
  "stats": {
    "total": 427,
    "additions": 225,
    "deletions": 202
  },
  "files": [
    {
      "sha": "10a38a2666f185e1fb4e3aabd5dbe331520a9cef",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8af58ffe5d06eaed8adfd1f0db2cb10d38c364e2/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8af58ffe5d06eaed8adfd1f0db2cb10d38c364e2/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=8af58ffe5d06eaed8adfd1f0db2cb10d38c364e2",
      "patch": "@@ -1,3 +1,7 @@\n+2019-06-26  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.dwarf2/varval.exp: Compile twice, once without bad DWARF.\n+\n 2019-06-26  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/index-cache.exp: Add back missing debug option."
    },
    {
      "sha": "594591025f552d5c37e8db4b089bbd16b0768df0",
      "filename": "gdb/testsuite/gdb.dwarf2/varval.exp",
      "status": "modified",
      "additions": 221,
      "deletions": 202,
      "changes": 423,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8af58ffe5d06eaed8adfd1f0db2cb10d38c364e2/gdb/testsuite/gdb.dwarf2/varval.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8af58ffe5d06eaed8adfd1f0db2cb10d38c364e2/gdb/testsuite/gdb.dwarf2/varval.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/varval.exp?ref=8af58ffe5d06eaed8adfd1f0db2cb10d38c364e2",
      "patch": "@@ -39,237 +39,252 @@ if [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] {\n     return -1\n }\n \n-# Create the DWARF.  \n-Dwarf::assemble ${asm_file} {\n-    global srcdir subdir srcfile\n-\n-    cu {} {\n-\tDW_TAG_compile_unit {\n-\t    {DW_AT_language @DW_LANG_C_plus_plus}\n-\t} {\n-\t    declare_labels int_label ptr_label struct_label var_a_label \\\n-\t                   var_b_label var_c_label var_p_label var_bad_label \\\n-\t\t\t   varval_label var_s_label var_untyped_label \\\n-\t\t\t   var_a_abstract_label var_a_concrete_label \\\n-\t\t\t   varval2_label\n-\n-\t    set int_size [get_sizeof \"int\" -1]\n-\n-\t    # gdb always assumes references are implemented as pointers.\n-\t    set addr_size [get_sizeof \"void *\" -1]\n-\n-\t    int_label: DW_TAG_base_type {\n-\t\t{DW_AT_byte_size ${int_size} DW_FORM_udata}\n-\t\t{DW_AT_encoding @DW_ATE_signed}\n-\t\t{DW_AT_name \"int\"}\n-\t    }\n-\n-\t    ptr_label: DW_TAG_pointer_type {\n-\t\t{DW_AT_type :$int_label}\n-\t    }\n-\n-\t    var_a_label: DW_TAG_variable {\n-\t\t{DW_AT_name \"var_a\"}\n-\t\t{DW_AT_type :${int_label}}\n-\t\t{DW_AT_external 1 DW_FORM_flag}\n-\t\t{DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_a\"]} SPECIAL_expr}\n-\t    }\n-\n-\t    var_a_abstract_label: DW_TAG_variable {\n-\t\t{DW_AT_type :${int_label}}\n-\t\t{DW_AT_external 1 DW_FORM_flag}\n-\t    }\n+proc setup_exec { arg_bad } {\n+    global asm_file executable srcfile bad\n+    set bad ${arg_bad}\n \n-\t    var_b_label: DW_TAG_variable {\n-\t\t{DW_AT_name \"var_b\"}\n-\t\t{DW_AT_type :${int_label}}\n-\t\t{DW_AT_external 1 DW_FORM_flag}\n-\t\t{DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_b\"]} SPECIAL_expr}\n-\t    }\n+    # Create the DWARF.  \n+    Dwarf::assemble ${asm_file} {\n+\tglobal srcdir subdir srcfile bad\n \n-\t    var_c_label: DW_TAG_variable {\n-\t\t{DW_AT_name \"var_c\"}\n-\t\t{DW_AT_type :${int_label}}\n-\t\t{DW_AT_external 1 DW_FORM_flag}\n-\t\t{DW_AT_const_value 53 DW_FORM_sdata}\n-\t    }\n+\tcu {} {\n+\t    DW_TAG_compile_unit {\n+\t\t{DW_AT_language @DW_LANG_C_plus_plus}\n+\t    } {\n+\t\tdeclare_labels int_label ptr_label struct_label var_a_label \\\n+\t\t    var_b_label var_c_label var_p_label var_bad_label \\\n+\t\t    varval_label var_s_label var_untyped_label \\\n+\t\t    var_a_abstract_label var_a_concrete_label \\\n+\t\t    varval2_label\n \n-\t    var_p_label: DW_TAG_variable {\n-\t\t{DW_AT_name \"var_p\"}\n-\t\t{DW_AT_type :${ptr_label}}\n-\t\t{DW_AT_external 1 DW_FORM_flag}\n-\t\t{DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_p\"]} SPECIAL_expr}\n-\t    }\n+\t\tset int_size [get_sizeof \"int\" -1]\n \n-\t    var_bad_label: DW_TAG_variable {\n-\t\t{DW_AT_name \"var_bad\"}\n-\t\t{DW_AT_type :${int_label}}\n-\t\t{DW_AT_external 1 DW_FORM_flag}\n-\t    }\n+\t\t# gdb always assumes references are implemented as pointers.\n+\t\tset addr_size [get_sizeof \"void *\" -1]\n \n-\t    struct_label: DW_TAG_structure_type {\n-\t\t{DW_AT_byte_size 8*$int_size DW_FORM_sdata}\n-\t    } {\n-\t\tDW_TAG_member {\n-\t\t    {DW_AT_name \"a\"}\n-\t\t    {DW_AT_type :$int_label}\n-\t\t    {DW_AT_data_member_location 0*$int_size DW_FORM_udata}\n-\t\t}\n-\t\tDW_TAG_member {\n-\t\t    {DW_AT_name \"b\"}\n-\t\t    {DW_AT_type :$int_label}\n-\t\t    {DW_AT_data_member_location 1*$int_size DW_FORM_udata}\n-\t\t}\n-\t\tDW_TAG_member {\n-\t\t    {DW_AT_name \"c\"}\n-\t\t    {DW_AT_type :$int_label}\n-\t\t    {DW_AT_data_member_location 2*$int_size DW_FORM_udata}\n-\t\t}\n-\t\tDW_TAG_member {\n-\t\t    {DW_AT_name \"d\"}\n-\t\t    {DW_AT_type :$int_label}\n-\t\t    {DW_AT_data_member_location 3*$int_size DW_FORM_udata}\n-\t\t}\n-\t\tDW_TAG_member {\n-\t\t    {DW_AT_name \"e\"}\n-\t\t    {DW_AT_type :$int_label}\n-\t\t    {DW_AT_data_member_location 4*$int_size DW_FORM_udata}\n+\t\tint_label: DW_TAG_base_type {\n+\t\t    {DW_AT_byte_size ${int_size} DW_FORM_udata}\n+\t\t    {DW_AT_encoding @DW_ATE_signed}\n+\t\t    {DW_AT_name \"int\"}\n \t\t}\n-\t\tDW_TAG_member {\n-\t\t    {DW_AT_name \"f\"}\n-\t\t    {DW_AT_type :$int_label}\n-\t\t    {DW_AT_data_member_location 5*$int_size DW_FORM_udata}\n-\t\t}\n-\t\tDW_TAG_member {\n-\t\t    {DW_AT_name \"g\"}\n-\t\t    {DW_AT_type :$int_label}\n-\t\t    {DW_AT_data_member_location 6*$int_size DW_FORM_udata}\n-\t\t}\n-\t\tDW_TAG_member {\n-\t\t    {DW_AT_name \"h\"}\n+\n+\t\tptr_label: DW_TAG_pointer_type {\n \t\t    {DW_AT_type :$int_label}\n-\t\t    {DW_AT_data_member_location 7*$int_size DW_FORM_udata}\n \t\t}\n-\t    }\n-\n-\t    var_s_label: DW_TAG_variable {\n-\t\t{DW_AT_name \"var_s\"}\n-\t\t{DW_AT_type :${struct_label}}\n-\t\t{DW_AT_external 1 DW_FORM_flag}\n-\t\t{DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_s\"]} SPECIAL_expr}\n-\t    }\n \n-\t    var_untyped_label: DW_TAG_variable {\n-\t\t{DW_AT_name \"var_untyped\"}\n-\t\t{DW_AT_external 1 DW_FORM_flag}\n-\t\t{DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_b\"]} SPECIAL_expr}\n-\t    }\n-\n-\t    DW_TAG_subprogram {\n-\t\t{MACRO_AT_func { \"main\" \"${srcdir}/${subdir}/${srcfile}\" }}\n-\t\t{DW_AT_type :${int_label}}\n-\t\t{DW_AT_external 1 DW_FORM_flag}\n-\t    } {\n-\t\tvarval_label: DW_TAG_variable {\n-\t\t    {DW_AT_name \"varval\"}\n+\t\tvar_a_label: DW_TAG_variable {\n+\t\t    {DW_AT_name \"var_a\"}\n \t\t    {DW_AT_type :${int_label}}\n-\t\t    {DW_AT_location {\n-\t\t\tDW_OP_GNU_variable_value ${var_a_label}\n-\t\t\tDW_OP_stack_value\n-\t\t    } SPECIAL_expr}\n+\t\t    {DW_AT_external 1 DW_FORM_flag}\n+\t\t    {DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_a\"]} SPECIAL_expr}\n \t\t}\n-\t\tvarval2_label: DW_TAG_variable {\n-\t\t    {DW_AT_name \"varval2\"}\n+\n+\t\tvar_a_abstract_label: DW_TAG_variable {\n \t\t    {DW_AT_type :${int_label}}\n-\t\t    {DW_AT_location {\n-\t\t\tDW_OP_GNU_variable_value ${var_a_abstract_label}\n-\t\t\tDW_OP_stack_value\n-\t\t    } SPECIAL_expr}\n-\t\t}\n-\t\tvar_a_concrete_label: DW_TAG_variable {\n-\t\t    {DW_AT_abstract_origin :${var_a_abstract_label}}\n-\t\t    {DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_a\"]} SPECIAL_expr}\n+\t\t    {DW_AT_external 1 DW_FORM_flag}\n \t\t}\n-\t\tDW_TAG_variable {\n-\t\t    {DW_AT_name \"constval\"}\n+\n+\t\tvar_b_label: DW_TAG_variable {\n+\t\t    {DW_AT_name \"var_b\"}\n \t\t    {DW_AT_type :${int_label}}\n-\t\t    {DW_AT_location {\n-\t\t\tDW_OP_GNU_variable_value ${var_c_label}\n-\t\t\tDW_OP_stack_value\n-\t\t    } SPECIAL_expr}\n+\t\t    {DW_AT_external 1 DW_FORM_flag}\n+\t\t    {DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_b\"]} SPECIAL_expr}\n \t\t}\n-\t\tDW_TAG_variable {\n-\t\t    {DW_AT_name \"mixedval\"}\n+\n+\t\tvar_c_label: DW_TAG_variable {\n+\t\t    {DW_AT_name \"var_c\"}\n \t\t    {DW_AT_type :${int_label}}\n-\t\t    {DW_AT_location {\n-\t\t\tDW_OP_GNU_variable_value ${var_c_label}\n-\t\t\tDW_OP_GNU_variable_value ${var_b_label}\n-\t\t\tDW_OP_div\n-\t\t\tDW_OP_GNU_variable_value ${varval_label}\n-\t\t\tDW_OP_plus\n-\t\t\tDW_OP_dup\n-\t\t\tDW_OP_plus\n-\t\t\tDW_OP_GNU_variable_value ${varval_label}\n-\t\t\tDW_OP_minus\n-\t\t\tDW_OP_stack_value\n-\t\t    } SPECIAL_expr}\n+\t\t    {DW_AT_external 1 DW_FORM_flag}\n+\t\t    {DW_AT_const_value 53 DW_FORM_sdata}\n \t\t}\n-\t\tDW_TAG_variable {\n-\t\t    {DW_AT_name \"pointerval\"}\n+\n+\t\tvar_p_label: DW_TAG_variable {\n+\t\t    {DW_AT_name \"var_p\"}\n \t\t    {DW_AT_type :${ptr_label}}\n-\t\t    {DW_AT_location {\n-\t\t\tDW_OP_GNU_variable_value ${var_p_label}\n-\t\t\tDW_OP_stack_value\n-\t\t    } SPECIAL_expr}\n+\t\t    {DW_AT_external 1 DW_FORM_flag}\n+\t\t    {DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_p\"]} SPECIAL_expr}\n \t\t}\n-\t\tDW_TAG_variable {\n-\t\t    {DW_AT_name \"badval\"}\n-\t\t    {DW_AT_type :${int_label}}\n-\t\t    {DW_AT_location {\n-\t\t\tDW_OP_GNU_variable_value ${var_bad_label}\n-\t\t\tDW_OP_stack_value\n-\t\t    } SPECIAL_expr}\n+\n+\t\tif { $bad } {\n+\t\t    var_bad_label: DW_TAG_variable {\n+\t\t\t{DW_AT_name \"var_bad\"}\n+\t\t\t{DW_AT_type :${int_label}}\n+\t\t\t{DW_AT_external 1 DW_FORM_flag}\n+\t\t    }\n \t\t}\n-\t\tDW_TAG_variable {\n-\t\t    {DW_AT_name \"structval\"}\n-\t\t    {DW_AT_type :${struct_label}}\n-\t\t    {DW_AT_location {\n-\t\t\tDW_OP_GNU_variable_value ${var_s_label}\n-\t\t\tDW_OP_stack_value\n-\t\t    } SPECIAL_expr}\n+\n+\t\tstruct_label: DW_TAG_structure_type {\n+\t\t    {DW_AT_byte_size 8*$int_size DW_FORM_sdata}\n+\t\t} {\n+\t\t    DW_TAG_member {\n+\t\t\t{DW_AT_name \"a\"}\n+\t\t\t{DW_AT_type :$int_label}\n+\t\t\t{DW_AT_data_member_location 0*$int_size DW_FORM_udata}\n+\t\t    }\n+\t\t    DW_TAG_member {\n+\t\t\t{DW_AT_name \"b\"}\n+\t\t\t{DW_AT_type :$int_label}\n+\t\t\t{DW_AT_data_member_location 1*$int_size DW_FORM_udata}\n+\t\t    }\n+\t\t    DW_TAG_member {\n+\t\t\t{DW_AT_name \"c\"}\n+\t\t\t{DW_AT_type :$int_label}\n+\t\t\t{DW_AT_data_member_location 2*$int_size DW_FORM_udata}\n+\t\t    }\n+\t\t    DW_TAG_member {\n+\t\t\t{DW_AT_name \"d\"}\n+\t\t\t{DW_AT_type :$int_label}\n+\t\t\t{DW_AT_data_member_location 3*$int_size DW_FORM_udata}\n+\t\t    }\n+\t\t    DW_TAG_member {\n+\t\t\t{DW_AT_name \"e\"}\n+\t\t\t{DW_AT_type :$int_label}\n+\t\t\t{DW_AT_data_member_location 4*$int_size DW_FORM_udata}\n+\t\t    }\n+\t\t    DW_TAG_member {\n+\t\t\t{DW_AT_name \"f\"}\n+\t\t\t{DW_AT_type :$int_label}\n+\t\t\t{DW_AT_data_member_location 5*$int_size DW_FORM_udata}\n+\t\t    }\n+\t\t    DW_TAG_member {\n+\t\t\t{DW_AT_name \"g\"}\n+\t\t\t{DW_AT_type :$int_label}\n+\t\t\t{DW_AT_data_member_location 6*$int_size DW_FORM_udata}\n+\t\t    }\n+\t\t    DW_TAG_member {\n+\t\t\t{DW_AT_name \"h\"}\n+\t\t\t{DW_AT_type :$int_label}\n+\t\t\t{DW_AT_data_member_location 7*$int_size DW_FORM_udata}\n+\t\t    }\n \t\t}\n-\t\tDW_TAG_variable {\n-\t\t    {DW_AT_name \"untypedval\"}\n-\t\t    {DW_AT_location {\n-\t\t\tDW_OP_GNU_variable_value ${var_untyped_label}\n-\t\t\tDW_OP_stack_value\n-\t\t    } SPECIAL_expr}\n+\n+\t\tvar_s_label: DW_TAG_variable {\n+\t\t    {DW_AT_name \"var_s\"}\n+\t\t    {DW_AT_type :${struct_label}}\n+\t\t    {DW_AT_external 1 DW_FORM_flag}\n+\t\t    {DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_s\"]} SPECIAL_expr}\n \t\t}\n-\t\tDW_TAG_variable {\n-\t\t    {DW_AT_name \"bad_die_val1\"}\n-\t\t    {DW_AT_location {\n-\t\t\tDW_OP_GNU_variable_value 0xabcdef11\n-\t\t\tDW_OP_stack_value\n-\t\t    } SPECIAL_expr}\n+\n+\t\tvar_untyped_label: DW_TAG_variable {\n+\t\t    {DW_AT_name \"var_untyped\"}\n+\t\t    {DW_AT_external 1 DW_FORM_flag}\n+\t\t    {DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_b\"]} SPECIAL_expr}\n \t\t}\n-\t\tDW_TAG_variable {\n-\t\t    {DW_AT_name \"bad_die_val2\"}\n-\t\t    {DW_AT_location {\n-\t\t\tDW_OP_GNU_variable_value ${ptr_label}+1\n-\t\t\tDW_OP_stack_value\n-\t\t    } SPECIAL_expr}\n+\n+\t\tDW_TAG_subprogram {\n+\t\t    {MACRO_AT_func { \"main\" \"${srcdir}/${subdir}/${srcfile}\" }}\n+\t\t    {DW_AT_type :${int_label}}\n+\t\t    {DW_AT_external 1 DW_FORM_flag}\n+\t\t} {\n+\t\t    varval_label: DW_TAG_variable {\n+\t\t\t{DW_AT_name \"varval\"}\n+\t\t\t{DW_AT_type :${int_label}}\n+\t\t\t{DW_AT_location {\n+\t\t\t    DW_OP_GNU_variable_value ${var_a_label}\n+\t\t\t    DW_OP_stack_value\n+\t\t\t} SPECIAL_expr}\n+\t\t    }\n+\t\t    varval2_label: DW_TAG_variable {\n+\t\t\t{DW_AT_name \"varval2\"}\n+\t\t\t{DW_AT_type :${int_label}}\n+\t\t\t{DW_AT_location {\n+\t\t\t    DW_OP_GNU_variable_value ${var_a_abstract_label}\n+\t\t\t    DW_OP_stack_value\n+\t\t\t} SPECIAL_expr}\n+\t\t    }\n+\t\t    var_a_concrete_label: DW_TAG_variable {\n+\t\t\t{DW_AT_abstract_origin :${var_a_abstract_label}}\n+\t\t\t{DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_a\"]} SPECIAL_expr}\n+\t\t    }\n+\t\t    DW_TAG_variable {\n+\t\t\t{DW_AT_name \"constval\"}\n+\t\t\t{DW_AT_type :${int_label}}\n+\t\t\t{DW_AT_location {\n+\t\t\t    DW_OP_GNU_variable_value ${var_c_label}\n+\t\t\t    DW_OP_stack_value\n+\t\t\t} SPECIAL_expr}\n+\t\t    }\n+\t\t    DW_TAG_variable {\n+\t\t\t{DW_AT_name \"mixedval\"}\n+\t\t\t{DW_AT_type :${int_label}}\n+\t\t\t{DW_AT_location {\n+\t\t\t    DW_OP_GNU_variable_value ${var_c_label}\n+\t\t\t    DW_OP_GNU_variable_value ${var_b_label}\n+\t\t\t    DW_OP_div\n+\t\t\t    DW_OP_GNU_variable_value ${varval_label}\n+\t\t\t    DW_OP_plus\n+\t\t\t    DW_OP_dup\n+\t\t\t    DW_OP_plus\n+\t\t\t    DW_OP_GNU_variable_value ${varval_label}\n+\t\t\t    DW_OP_minus\n+\t\t\t    DW_OP_stack_value\n+\t\t\t} SPECIAL_expr}\n+\t\t    }\n+\t\t    DW_TAG_variable {\n+\t\t\t{DW_AT_name \"pointerval\"}\n+\t\t\t{DW_AT_type :${ptr_label}}\n+\t\t\t{DW_AT_location {\n+\t\t\t    DW_OP_GNU_variable_value ${var_p_label}\n+\t\t\t    DW_OP_stack_value\n+\t\t\t} SPECIAL_expr}\n+\t\t    }\n+\t\t    if { $bad } {\n+\t\t\tDW_TAG_variable {\n+\t\t\t    {DW_AT_name \"badval\"}\n+\t\t\t    {DW_AT_type :${int_label}}\n+\t\t\t    {DW_AT_location {\n+\t\t\t\tDW_OP_GNU_variable_value ${var_bad_label}\n+\t\t\t\tDW_OP_stack_value\n+\t\t\t    } SPECIAL_expr}\n+\t\t\t}\n+\t\t    }\n+\t\t    DW_TAG_variable {\n+\t\t\t{DW_AT_name \"structval\"}\n+\t\t\t{DW_AT_type :${struct_label}}\n+\t\t\t{DW_AT_location {\n+\t\t\t    DW_OP_GNU_variable_value ${var_s_label}\n+\t\t\t    DW_OP_stack_value\n+\t\t\t} SPECIAL_expr}\n+\t\t    }\n+\t\t    DW_TAG_variable {\n+\t\t\t{DW_AT_name \"untypedval\"}\n+\t\t\t{DW_AT_location {\n+\t\t\t    DW_OP_GNU_variable_value ${var_untyped_label}\n+\t\t\t    DW_OP_stack_value\n+\t\t\t} SPECIAL_expr}\n+\t\t    }\n+\t\t    if { $bad } {\n+\t\t\tDW_TAG_variable {\n+\t\t\t    {DW_AT_name \"bad_die_val1\"}\n+\t\t\t    {DW_AT_location {\n+\t\t\t\tDW_OP_GNU_variable_value 0xabcdef11\n+\t\t\t\tDW_OP_stack_value\n+\t\t\t    } SPECIAL_expr}\n+\t\t\t}\n+\t\t\tDW_TAG_variable {\n+\t\t\t    {DW_AT_name \"bad_die_val2\"}\n+\t\t\t    {DW_AT_location {\n+\t\t\t\tDW_OP_GNU_variable_value ${ptr_label}+1\n+\t\t\t\tDW_OP_stack_value\n+\t\t\t    } SPECIAL_expr}\n+\t\t\t}\n+\t\t    }\n \t\t}\n \t    }\n \t}\n     }\n-}\n \n-if [prepare_for_testing \"failed to prepare\" ${executable} [list ${asm_file} ${srcfile}] {}] {\n-    return -1\n+    if [prepare_for_testing \"failed to prepare\" ${executable} [list ${asm_file} ${srcfile}] {}] {\n+\treturn -1\n+    }\n+\n+    # DW_OP_GNU_variable_value implementation requires a valid frame.\n+    if ![runto_main] {\n+\treturn -1\n+    }\n }\n \n-# DW_OP_GNU_variable_value implementation requires a valid frame.\n-if ![runto_main] {\n+if { [setup_exec 0] == -1 } {\n     return -1\n }\n \n@@ -279,7 +294,6 @@ gdb_test \"print constval\" \"= 53\"\n gdb_test \"print mixedval\" \"= 42\"\n gdb_test \"print pointerval\" \"= \\\\(int \\\\*\\\\) $hex <var_b>\"\n gdb_test \"print *pointerval\" \"= 3\"\n-gdb_test \"print badval\" \"value has been optimized out\"\n \n # Jakub says:  \"The intended behavior is that the debug info consumer\n # computes the value of that referenced variable at the current PC,\n@@ -293,6 +307,11 @@ gdb_test \"print structval\" \\\n gdb_test \"print untypedval\" \\\n          \"Type of DW_OP_GNU_variable_value DIE must be an integer or pointer\\\\.\"\n \n+if { [setup_exec 1] == -1 } {\n+    return -1\n+}\n+\n+gdb_test \"print badval\" \"value has been optimized out\"\n gdb_test \"print bad_die_val1\" \\\n          \"invalid dwarf2 offset 0xabcdef11\"\n gdb_test \"print bad_die_val2\" \\"
    }
  ]
}