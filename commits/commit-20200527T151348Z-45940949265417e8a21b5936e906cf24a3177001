{
  "sha": "45940949265417e8a21b5936e906cf24a3177001",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDU5NDA5NDkyNjU0MTdlOGEyMWI1OTM2ZTkwNmNmMjRhMzE3NzAwMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-27T15:13:48Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:13:48Z"
    },
    "message": "Introduce dwarf2_per_objfile::obstack\n\nCurrently much of the DWARF-related data is stored on the objfile\nobstack.  This prevents sharing this data across objfiles, so this patch\nadds a new obstack to dwarf2_per_objfile.  Note that the\ndwarf2_per_objfile type is going to become \"dwarf2_per_bfd\" in a\nsubsequent patch, which is indeed going to be shared between objfiles.\n\nOne way to check whether this is correct is to look at the remaining\nuses of objfile_obstack in the DWARF code and note that they all\nappear in the \"full CU\" code paths.\n\nThe converse -- storing per-objfile data on the shared obstack -- is\nnot good, but it is just a memory leak, not a potential\nuse-after-free.  Double-checking this would also be useful, though.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.h (struct dwarf2_per_objfile) <obstack>: New\n\tmember.\n\t* dwarf2/read.c (delete_file_name_entry): Fix comment.\n\t(create_cu_from_index_list)\n\t(create_signatured_type_table_from_index)\n\t(create_signatured_type_table_from_debug_names)\n\t(dw2_get_file_names_reader, dwarf2_initialize_objfile)\n\t(dwarf2_create_include_psymtab)\n\t(create_debug_type_hash_table, add_type_unit)\n\t(create_type_unit_group, read_comp_units_from_section)\n\t(dwarf2_compute_name, create_cus_hash_table)\n\t(create_dwp_hash_table, create_dwo_unit_in_dwp_v1)\n\t(create_dwo_unit_in_dwp_v2, open_and_init_dwp_file): Use new\n\tobstack.\n\t(dw2_get_real_path): Likewise.  Change argument to\n\tdwarf2_per_objfile.\n\nChange-Id: Icdec7be7c4d9f33d1dce4f807284f3077f7d3f03",
    "tree": {
      "sha": "4115741e2941a046a063eb4dafe27cf2c2f60d4b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4115741e2941a046a063eb4dafe27cf2c2f60d4b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/45940949265417e8a21b5936e906cf24a3177001",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/45940949265417e8a21b5936e906cf24a3177001",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/45940949265417e8a21b5936e906cf24a3177001",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/45940949265417e8a21b5936e906cf24a3177001/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f8c6d1528c19b11fdaa3ec949147280e500446e2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8c6d1528c19b11fdaa3ec949147280e500446e2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f8c6d1528c19b11fdaa3ec949147280e500446e2"
    }
  ],
  "stats": {
    "total": 118,
    "additions": 66,
    "deletions": 52
  },
  "files": [
    {
      "sha": "625fa3e7ee599580e235e93427d88481267613c9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/45940949265417e8a21b5936e906cf24a3177001/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/45940949265417e8a21b5936e906cf24a3177001/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=45940949265417e8a21b5936e906cf24a3177001",
      "patch": "@@ -1,3 +1,22 @@\n+2020-05-27  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.h (struct dwarf2_per_objfile) <obstack>: New\n+\tmember.\n+\t* dwarf2/read.c (delete_file_name_entry): Fix comment.\n+\t(create_cu_from_index_list)\n+\t(create_signatured_type_table_from_index)\n+\t(create_signatured_type_table_from_debug_names)\n+\t(dw2_get_file_names_reader, dwarf2_initialize_objfile)\n+\t(dwarf2_create_include_psymtab)\n+\t(create_debug_type_hash_table, add_type_unit)\n+\t(create_type_unit_group, read_comp_units_from_section)\n+\t(dwarf2_compute_name, create_cus_hash_table)\n+\t(create_dwp_hash_table, create_dwo_unit_in_dwp_v1)\n+\t(create_dwo_unit_in_dwp_v2, open_and_init_dwp_file): Use new\n+\tobstack.\n+\t(dw2_get_real_path): Likewise.  Change argument to\n+\tdwarf2_per_objfile.\n+\n 2020-05-27  Luis Machado  <luis.machado@linaro.org>\n \n \tPR tdep/26000"
    },
    {
      "sha": "3996a8a35fdc111da6446233dead9ca609cf98b5",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 42,
      "deletions": 52,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/45940949265417e8a21b5936e906cf24a3177001/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/45940949265417e8a21b5936e906cf24a3177001/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=45940949265417e8a21b5936e906cf24a3177001",
      "patch": "@@ -2276,8 +2276,8 @@ delete_file_name_entry (void *e)\n \txfree ((void*) file_data->real_names[i]);\n     }\n \n-  /* The space for the struct itself lives on objfile_obstack,\n-     so we don't free it here.  */\n+  /* The space for the struct itself lives on the obstack, so we don't\n+     free it here.  */\n }\n \n /* Create a quick_file_names hash table.  */\n@@ -2408,26 +2408,24 @@ dwarf2_per_objfile::get_tu (int index)\n   return this->all_type_units[index];\n }\n \n-/* Return a new dwarf2_per_cu_data allocated on OBJFILE's\n-   objfile_obstack, and constructed with the specified field\n-   values.  */\n+/* Return a new dwarf2_per_cu_data allocated on the dwarf2_per_objfile\n+   obstack, and constructed with the specified field values.  */\n \n static dwarf2_per_cu_data *\n create_cu_from_index_list (struct dwarf2_per_objfile *dwarf2_per_objfile,\n                           struct dwarf2_section_info *section,\n                           int is_dwz,\n                           sect_offset sect_off, ULONGEST length)\n {\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n   dwarf2_per_cu_data *the_cu\n-    = OBSTACK_ZALLOC (&objfile->objfile_obstack,\n+    = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n                      struct dwarf2_per_cu_data);\n   the_cu->sect_off = sect_off;\n   the_cu->length = length;\n   the_cu->dwarf2_per_objfile = dwarf2_per_objfile;\n   the_cu->section = section;\n-  the_cu->v.quick = OBSTACK_ZALLOC (&objfile->objfile_obstack,\n-                                   struct dwarf2_per_cu_quick_data);\n+  the_cu->v.quick = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n+\t\t\t\t    struct dwarf2_per_cu_quick_data);\n   the_cu->is_dwz = is_dwz;\n   return the_cu;\n }\n@@ -2489,8 +2487,6 @@ create_signatured_type_table_from_index\n    const gdb_byte *bytes,\n    offset_type elements)\n {\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n-\n   gdb_assert (dwarf2_per_objfile->all_type_units.empty ());\n   dwarf2_per_objfile->all_type_units.reserve (elements / 3);\n \n@@ -2512,7 +2508,7 @@ create_signatured_type_table_from_index\n       signature = extract_unsigned_integer (bytes + 16, 8, BFD_ENDIAN_LITTLE);\n       bytes += 3 * 8;\n \n-      sig_type = OBSTACK_ZALLOC (&objfile->objfile_obstack,\n+      sig_type = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n \t\t\t\t struct signatured_type);\n       sig_type->signature = signature;\n       sig_type->type_offset_in_tu = type_offset_in_tu;\n@@ -2521,7 +2517,7 @@ create_signatured_type_table_from_index\n       sig_type->per_cu.sect_off = sect_off;\n       sig_type->per_cu.dwarf2_per_objfile = dwarf2_per_objfile;\n       sig_type->per_cu.v.quick\n-\t= OBSTACK_ZALLOC (&objfile->objfile_obstack,\n+\t= OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n \t\t\t  struct dwarf2_per_cu_quick_data);\n \n       slot = htab_find_slot (sig_types_hash.get (), sig_type, INSERT);\n@@ -2569,7 +2565,7 @@ create_signatured_type_table_from_debug_names\n \t\t\t\t     section->buffer + to_underlying (sect_off),\n \t\t\t\t     rcuh_kind::TYPE);\n \n-      sig_type = OBSTACK_ZALLOC (&objfile->objfile_obstack,\n+      sig_type = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n \t\t\t\t struct signatured_type);\n       sig_type->signature = cu_header.signature;\n       sig_type->type_offset_in_tu = cu_header.type_cu_offset_in_tu;\n@@ -2578,7 +2574,7 @@ create_signatured_type_table_from_debug_names\n       sig_type->per_cu.sect_off = sect_off;\n       sig_type->per_cu.dwarf2_per_objfile = dwarf2_per_objfile;\n       sig_type->per_cu.v.quick\n-\t= OBSTACK_ZALLOC (&objfile->objfile_obstack,\n+\t= OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n \t\t\t  struct dwarf2_per_cu_quick_data);\n \n       slot = htab_find_slot (sig_types_hash.get (), sig_type, INSERT);\n@@ -3088,7 +3084,6 @@ dw2_get_file_names_reader (const struct die_reader_specs *reader,\n   struct dwarf2_per_cu_data *this_cu = cu->per_cu;\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = cu->per_cu->dwarf2_per_objfile;\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct dwarf2_per_cu_data *lh_cu;\n   struct attribute *attr;\n   void **slot;\n@@ -3137,7 +3132,7 @@ dw2_get_file_names_reader (const struct die_reader_specs *reader,\n       return;\n     }\n \n-  qfn = XOBNEW (&objfile->objfile_obstack, struct quick_file_names);\n+  qfn = XOBNEW (&dwarf2_per_objfile->obstack, struct quick_file_names);\n   qfn->hash.dwo_unit = cu->dwo_unit;\n   qfn->hash.line_sect_off = line_offset;\n   gdb_assert (slot != NULL);\n@@ -3151,7 +3146,8 @@ dw2_get_file_names_reader (const struct die_reader_specs *reader,\n \n   qfn->num_file_names = offset + lh->file_names_size ();\n   qfn->file_names =\n-    XOBNEWVEC (&objfile->objfile_obstack, const char *, qfn->num_file_names);\n+    XOBNEWVEC (&dwarf2_per_objfile->obstack, const char *,\n+\t       qfn->num_file_names);\n   if (offset != 0)\n     qfn->file_names[0] = xstrdup (fnd.name);\n   for (int i = 0; i < lh->file_names_size (); ++i)\n@@ -3192,11 +3188,11 @@ dw2_get_file_names (struct dwarf2_per_cu_data *this_cu)\n    real path for a given file name from the line table.  */\n \n static const char *\n-dw2_get_real_path (struct objfile *objfile,\n+dw2_get_real_path (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t   struct quick_file_names *qfn, int index)\n {\n   if (qfn->real_names == NULL)\n-    qfn->real_names = OBSTACK_CALLOC (&objfile->objfile_obstack,\n+    qfn->real_names = OBSTACK_CALLOC (&dwarf2_per_objfile->obstack,\n \t\t\t\t      qfn->num_file_names, const char *);\n \n   if (qfn->real_names[index] == NULL)\n@@ -3316,7 +3312,8 @@ dw2_map_symtabs_matching_filename\n \t      && FILENAME_CMP (lbasename (this_name), name_basename) != 0)\n \t    continue;\n \n-\t  this_real_name = dw2_get_real_path (objfile, file_data, j);\n+\t  this_real_name = dw2_get_real_path (dwarf2_per_objfile,\n+\t\t\t\t\t      file_data, j);\n \t  if (compare_filenames_for_search (this_real_name, name))\n \t    {\n \t      if (dw2_map_expand_apply (objfile, per_cu, name, real_path,\n@@ -4599,8 +4596,6 @@ dw_expand_symtabs_matching_file_matcher\n   if (file_matcher == NULL)\n     return;\n \n-  objfile *const objfile = dwarf2_per_objfile->objfile;\n-\n   htab_up visited_found (htab_create_alloc (10, htab_hash_pointer,\n \t\t\t\t\t    htab_eq_pointer,\n \t\t\t\t\t    NULL, xcalloc, xfree));\n@@ -4650,7 +4645,8 @@ dw_expand_symtabs_matching_file_matcher\n \t\t\t\ttrue))\n \t    continue;\n \n-\t  this_real_name = dw2_get_real_path (objfile, file_data, j);\n+\t  this_real_name = dw2_get_real_path (dwarf2_per_objfile,\n+\t\t\t\t\t      file_data, j);\n \t  if (file_matcher (this_real_name, false))\n \t    {\n \t      per_cu->v.quick->mark = 1;\n@@ -5873,7 +5869,7 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n \t{\n \t  dwarf2_per_cu_data *per_cu = dwarf2_per_objfile->get_cutu (i);\n \n-\t  per_cu->v.quick = OBSTACK_ZALLOC (&objfile->objfile_obstack,\n+\t  per_cu->v.quick = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n \t\t\t\t\t    struct dwarf2_per_cu_quick_data);\n \t}\n \n@@ -6074,10 +6070,7 @@ dwarf2_create_include_psymtab (const char *name, dwarf2_psymtab *pst,\n   dwarf2_include_psymtab *subpst = new dwarf2_include_psymtab (name, objfile);\n \n   if (!IS_ABSOLUTE_PATH (subpst->filename))\n-    {\n-      /* It shares objfile->objfile_obstack.  */\n-      subpst->dirname = pst->dirname;\n-    }\n+    subpst->dirname = pst->dirname;\n \n   subpst->dependencies = objfile->partial_symtabs->allocate_dependencies (1);\n   subpst->dependencies[0] = pst;\n@@ -6235,7 +6228,7 @@ create_debug_type_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       if (dwo_file)\n \t{\n \t  sig_type = NULL;\n-\t  dwo_tu = OBSTACK_ZALLOC (&objfile->objfile_obstack,\n+\t  dwo_tu = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n \t\t\t\t   struct dwo_unit);\n \t  dwo_tu->dwo_file = dwo_file;\n \t  dwo_tu->signature = header.signature;\n@@ -6249,7 +6242,7 @@ create_debug_type_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t  /* N.B.: type_offset is not usable if this type uses a DWO file.\n \t     The real type_offset is in the DWO file.  */\n \t  dwo_tu = NULL;\n-\t  sig_type = OBSTACK_ZALLOC (&objfile->objfile_obstack,\n+\t  sig_type = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n \t\t\t\t     struct signatured_type);\n \t  sig_type->signature = header.signature;\n \t  sig_type->type_offset_in_tu = header.type_cu_offset_in_tu;\n@@ -6361,13 +6354,11 @@ static struct signatured_type *\n add_type_unit (struct dwarf2_per_objfile *dwarf2_per_objfile, ULONGEST sig,\n \t       void **slot)\n {\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n-\n   if (dwarf2_per_objfile->all_type_units.size ()\n       == dwarf2_per_objfile->all_type_units.capacity ())\n     ++dwarf2_per_objfile->tu_stats.nr_all_type_units_reallocs;\n \n-  signatured_type *sig_type = OBSTACK_ZALLOC (&objfile->objfile_obstack,\n+  signatured_type *sig_type = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n \t\t\t\t\t      struct signatured_type);\n \n   dwarf2_per_objfile->all_type_units.push_back (sig_type);\n@@ -6376,7 +6367,7 @@ add_type_unit (struct dwarf2_per_objfile *dwarf2_per_objfile, ULONGEST sig,\n   if (dwarf2_per_objfile->using_index)\n     {\n       sig_type->per_cu.v.quick =\n-\tOBSTACK_ZALLOC (&objfile->objfile_obstack,\n+\tOBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n \t\t\tstruct dwarf2_per_cu_quick_data);\n     }\n \n@@ -7234,18 +7225,17 @@ create_type_unit_group (struct dwarf2_cu *cu, sect_offset line_offset_struct)\n {\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = cu->per_cu->dwarf2_per_objfile;\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct dwarf2_per_cu_data *per_cu;\n   struct type_unit_group *tu_group;\n \n-  tu_group = OBSTACK_ZALLOC (&objfile->objfile_obstack,\n+  tu_group = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n \t\t\t     struct type_unit_group);\n   per_cu = &tu_group->per_cu;\n   per_cu->dwarf2_per_objfile = dwarf2_per_objfile;\n \n   if (dwarf2_per_objfile->using_index)\n     {\n-      per_cu->v.quick = OBSTACK_ZALLOC (&objfile->objfile_obstack,\n+      per_cu->v.quick = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n \t\t\t\t\tstruct dwarf2_per_cu_quick_data);\n     }\n   else\n@@ -7975,13 +7965,13 @@ read_comp_units_from_section (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       /* Save the compilation unit for later lookup.  */\n       if (cu_header.unit_type != DW_UT_type)\n \t{\n-\t  this_cu = XOBNEW (&objfile->objfile_obstack,\n+\t  this_cu = XOBNEW (&dwarf2_per_objfile->obstack,\n \t\t\t    struct dwarf2_per_cu_data);\n \t  memset (this_cu, 0, sizeof (*this_cu));\n \t}\n       else\n \t{\n-\t  auto sig_type = XOBNEW (&objfile->objfile_obstack,\n+\t  auto sig_type = XOBNEW (&dwarf2_per_objfile->obstack,\n \t\t\t\t  struct signatured_type);\n \t  memset (sig_type, 0, sizeof (*sig_type));\n \t  sig_type->signature = cu_header.signature;\n@@ -10136,7 +10126,8 @@ dw2_linkage_name (struct die_info *die, struct dwarf2_cu *cu)\n    For Ada, return the DIE's linkage name rather than the fully qualified\n    name.  PHYSNAME is ignored..\n \n-   The result is allocated on the objfile_obstack and canonicalized.  */\n+   The result is allocated on the dwarf2_per_objfile obstack and\n+   canonicalized.  */\n \n static const char *\n dwarf2_compute_name (const char *name,\n@@ -11291,7 +11282,8 @@ create_cus_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       if (cus_htab == NULL)\n \tcus_htab = allocate_dwo_unit_table ();\n \n-      dwo_unit = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct dwo_unit);\n+      dwo_unit = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack,\n+\t\t\t\t struct dwo_unit);\n       *dwo_unit = read_unit;\n       slot = htab_find_slot (cus_htab.get (), dwo_unit, INSERT);\n       gdb_assert (slot != NULL);\n@@ -11494,7 +11486,7 @@ create_dwp_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t     pulongest (nr_slots), dwp_file->name);\n     }\n \n-  htab = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct dwp_hash_table);\n+  htab = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack, struct dwp_hash_table);\n   htab->version = version;\n   htab->nr_columns = nr_columns;\n   htab->nr_units = nr_units;\n@@ -11691,7 +11683,6 @@ create_dwo_unit_in_dwp_v1 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t   const char *comp_dir,\n \t\t\t   ULONGEST signature, int is_debug_types)\n {\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n   const struct dwp_hash_table *dwp_htab =\n     is_debug_types ? dwp_file->tus : dwp_file->cus;\n   bfd *dbfd = dwp_file->dbfd.get ();\n@@ -11796,7 +11787,7 @@ create_dwo_unit_in_dwp_v1 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t      virtual_dwo_name.c_str ());\n \t}\n       dwo_file = new struct dwo_file;\n-      dwo_file->dwo_name = objfile->intern (virtual_dwo_name);\n+      dwo_file->dwo_name = dwarf2_per_objfile->objfile->intern (virtual_dwo_name);\n       dwo_file->comp_dir = comp_dir;\n       dwo_file->sections.abbrev = sections.abbrev;\n       dwo_file->sections.line = sections.line;\n@@ -11825,11 +11816,11 @@ create_dwo_unit_in_dwp_v1 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       dwo_file = (struct dwo_file *) *dwo_file_slot;\n     }\n \n-  dwo_unit = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct dwo_unit);\n+  dwo_unit = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack, struct dwo_unit);\n   dwo_unit->dwo_file = dwo_file;\n   dwo_unit->signature = signature;\n   dwo_unit->section =\n-    XOBNEW (&objfile->objfile_obstack, struct dwarf2_section_info);\n+    XOBNEW (&dwarf2_per_objfile->obstack, struct dwarf2_section_info);\n   *dwo_unit->section = sections.info_or_types;\n   /* dwo_unit->{offset,length,type_offset_in_tu} are set later.  */\n \n@@ -11890,7 +11881,6 @@ create_dwo_unit_in_dwp_v2 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t   const char *comp_dir,\n \t\t\t   ULONGEST signature, int is_debug_types)\n {\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n   const struct dwp_hash_table *dwp_htab =\n     is_debug_types ? dwp_file->tus : dwp_file->cus;\n   bfd *dbfd = dwp_file->dbfd.get ();\n@@ -11991,7 +11981,7 @@ create_dwo_unit_in_dwp_v2 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t      virtual_dwo_name.c_str ());\n \t}\n       dwo_file = new struct dwo_file;\n-      dwo_file->dwo_name = objfile->intern (virtual_dwo_name);\n+      dwo_file->dwo_name = dwarf2_per_objfile->objfile->intern (virtual_dwo_name);\n       dwo_file->comp_dir = comp_dir;\n       dwo_file->sections.abbrev =\n \tcreate_dwp_v2_section (dwarf2_per_objfile, &dwp_file->sections.abbrev,\n@@ -12034,11 +12024,11 @@ create_dwo_unit_in_dwp_v2 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       dwo_file = (struct dwo_file *) *dwo_file_slot;\n     }\n \n-  dwo_unit = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct dwo_unit);\n+  dwo_unit = OBSTACK_ZALLOC (&dwarf2_per_objfile->obstack, struct dwo_unit);\n   dwo_unit->dwo_file = dwo_file;\n   dwo_unit->signature = signature;\n   dwo_unit->section =\n-    XOBNEW (&objfile->objfile_obstack, struct dwarf2_section_info);\n+    XOBNEW (&dwarf2_per_objfile->obstack, struct dwarf2_section_info);\n   *dwo_unit->section = create_dwp_v2_section (dwarf2_per_objfile,\n \t\t\t\t\t      is_debug_types\n \t\t\t\t\t      ? &dwp_file->sections.types\n@@ -12544,7 +12534,7 @@ open_and_init_dwp_file (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \n   dwp_file->num_sections = elf_numsections (dwp_file->dbfd);\n   dwp_file->elf_sections =\n-    OBSTACK_CALLOC (&objfile->objfile_obstack,\n+    OBSTACK_CALLOC (&dwarf2_per_objfile->obstack,\n \t\t    dwp_file->num_sections, asection *);\n \n   bfd_map_over_sections (dwp_file->dbfd.get (),"
    },
    {
      "sha": "8dbda90aa592fc878294940341f8bd07d15d4a10",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/45940949265417e8a21b5936e906cf24a3177001/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/45940949265417e8a21b5936e906cf24a3177001/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=45940949265417e8a21b5936e906cf24a3177001",
      "patch": "@@ -126,6 +126,11 @@ struct dwarf2_per_objfile\n \t\t\tconst dwarf2_debug_sections &names);\n \n public:\n+  /* Objects that can be shared across objfiles are stored in this\n+     obstack or on the psymtab obstack, while objects that are\n+     objfile-specific are stored on the objfile obstack.  */\n+  auto_obstack obstack;\n+\n   dwarf2_section_info info {};\n   dwarf2_section_info abbrev {};\n   dwarf2_section_info line {};"
    }
  ]
}