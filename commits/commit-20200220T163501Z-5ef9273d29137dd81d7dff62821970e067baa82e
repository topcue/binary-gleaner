{
  "sha": "5ef9273d29137dd81d7dff62821970e067baa82e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWVmOTI3M2QyOTEzN2RkODFkN2RmZjYyODIxOTcwZTA2N2JhYTgyZQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:11:50Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:01Z"
    },
    "message": "gdbserver: start turning the target ops vector into a class\n\nThis is the beginning of a series of patches where the goal is to turn\nthe target ops vector into a class and all the target op function\npointers into methods of this class.\n\nCurrently, the target ops is a struct of function pointers.  At the\nend of the series, it becomes a class with methods, and the existing\nlow target definitions become subclasses.  That is, we end up with the\nfollowing class hierarchy:\n\n  process_stratum_target\n  ^\n  |-- linux-low\n  |-- lynx-low\n  |-- nto-low\n  |-- win32-low\n\nprocess_stratum_target either defines the default behavior for the\ntarget ops or leaves them as pure virtual for the subclasses to\noverride.\n\nThe transformation is done by first introducing a helper class, called\n'process_target', that is initially empty.  An instance of this class\nis added to the end of the current target ops vector.  This new field\nis called 'pt'.  We will gradually carry target ops to the new class,\none by one, whereas the invocation of the target op will be converted\nto a method call on 'pt'.\n\nFor instance, target op 'attach' is currently invoked as\n\n  (*the_target->attach) (args)\n\nAfter moving 'attach' as a method to 'process_target', it will be\ninvoked as\n\n  the_target->pt->attach (args)\n\nIn this process, the concrete target vector definitions\n(e.g. linux-low, win32-low, nto-low, etc.) are turned into derived\nclasses of 'process_target', so that they can either inherit the\ndefault behavior of the target ops or can override the method.\n\nWe prefer to make this transition gradually rather than in a single\ngiant patch, to yield bite-size patches.  The goal is that after each\npatch gdbserver will still be buildable and testable.\n\nThe general rule of thumb when converting a target op to a method is\nthis:\n\n(1) If the function call is protected with a NULL-check with an\nobvious default behavior, simply implement that default behavior in\nthe base class (e.g.: supports_non_stop).\n\n(2) If there is no NULL-check guard, the method becomes pure\nvirtual, and the derived targets are required to implement the method\n(e.g.: attach).\n\n(3) If there is a NULL-check but no apparent default behavior, or if\nthe NULL-check is utilized to populate a feature support packet,\nintroduce a 'supports_XYZ' method (e.g.: pid_to_exec_file).\n\nThe overall strategy is to preserve the existing behavior as much as\npossible.\n\nWhen we're done moving all the target ops into 'process_target', the\ntarget op vector will contain nothing but the field 'pt'.  At that\npoint, the auxiliary class 'process_target' will simply meld into\n'process_stratum_target' and the method calls of the form\n'the_target->pt->xyz' will be turned into 'the_target->xyz'.\n\nThe \"linux-low\" target has been built and reg-tested on X86_64 Linux\n(Ubuntu).  The \"win32-low\" target has been built (but not tested) via\ncross-compilation to a x86_64-w64-mingw32 target.  The \"lynx-low\" and\n\"nto-low\" targets were neither built nor tested.\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* target.h (class process_target): New class definition.\n\t(struct process_stratum_target) <pt>: New field with type\n\t'process_target*'.\n\t* linux-low.h (class linux_process_target): Define as a derived\n\tclass of 'process_target'.\n\t* linux-low.cc (linux_target_ops): Add a linux_process_target*\n\tas the 'pt' field.\n\t* lynx-low.h (class lynx_process_target): Define as a derived\n\tclass of 'process_target'.\n\t* lynx-low.cc (lynx_target_ops): Add a lynx_process_target*\n\tas the 'pt' field.\n\t* nto-low.h (class nto_process_target): Define as a derived\n\tclass of 'process_target'.\n\t* nto-low.cc (nto_target_ops): Add an nto_process_target*\n\tas the 'pt' field.\n\t* win32-low.h (class win32_process_target): Define as a derived\n\tclass of 'process_target'.\n\t* win32-low.cc (win32_target_ops): Add a win32_process_target*\n\tas the 'pt' field.",
    "tree": {
      "sha": "517cdf2fc9ab264b3ea4741f74c99868e53dc542",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/517cdf2fc9ab264b3ea4741f74c99868e53dc542"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5ef9273d29137dd81d7dff62821970e067baa82e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ef9273d29137dd81d7dff62821970e067baa82e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5ef9273d29137dd81d7dff62821970e067baa82e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ef9273d29137dd81d7dff62821970e067baa82e/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "00e49dff20421e0f8f28ee74cec12a0bae8f1b82",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/00e49dff20421e0f8f28ee74cec12a0bae8f1b82",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/00e49dff20421e0f8f28ee74cec12a0bae8f1b82"
    }
  ],
  "stats": {
    "total": 131,
    "additions": 131,
    "deletions": 0
  },
  "files": [
    {
      "sha": "c8f64541f19731d5a71858324ba0ee999fc7aabe",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=5ef9273d29137dd81d7dff62821970e067baa82e",
      "patch": "@@ -1,3 +1,25 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* target.h (class process_target): New class definition.\n+\t(struct process_stratum_target) <pt>: New field with type\n+\t'process_target*'.\n+\t* linux-low.h (class linux_process_target): Define as a derived\n+\tclass of 'process_target'.\n+\t* linux-low.cc (linux_target_ops): Add a linux_process_target*\n+\tas the 'pt' field.\n+\t* lynx-low.h (class lynx_process_target): Define as a derived\n+\tclass of 'process_target'.\n+\t* lynx-low.cc (lynx_target_ops): Add a lynx_process_target*\n+\tas the 'pt' field.\n+\t* nto-low.h (class nto_process_target): Define as a derived\n+\tclass of 'process_target'.\n+\t* nto-low.cc (nto_target_ops): Add an nto_process_target*\n+\tas the 'pt' field.\n+\t* win32-low.h (class win32_process_target): Define as a derived\n+\tclass of 'process_target'.\n+\t* win32-low.cc (win32_target_ops): Add a win32_process_target*\n+\tas the 'pt' field.\n+\n 2020-02-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* configure: Regenerate."
    },
    {
      "sha": "17f360639a4d5d4b8bcd000c3295766f93d072f8",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=5ef9273d29137dd81d7dff62821970e067baa82e",
      "patch": "@@ -7354,6 +7354,10 @@ linux_get_hwcap2 (int wordsize)\n   return hwcap2;\n }\n \n+/* The linux target ops object.  */\n+\n+static linux_process_target the_linux_target;\n+\n static process_stratum_target linux_target_ops = {\n   linux_create_inferior,\n   linux_post_create_inferior,\n@@ -7457,6 +7461,7 @@ static process_stratum_target linux_target_ops = {\n #else\n   NULL,\n #endif\n+  &the_linux_target,\n };\n \n #ifdef HAVE_LINUX_REGSETS"
    },
    {
      "sha": "e6042735f388dc006113d28712ced87cb3a0200b",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=5ef9273d29137dd81d7dff62821970e067baa82e",
      "patch": "@@ -264,6 +264,14 @@ struct linux_target_ops\n \n extern struct linux_target_ops the_low_target;\n \n+/* Target ops definitions for a Linux target.  */\n+\n+class linux_process_target : public process_target\n+{\n+public:\n+\n+};\n+\n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))\n #define get_lwp_thread(lwp) ((lwp)->thread)\n "
    },
    {
      "sha": "f1177920921f033abd9702be36081099d4ebe6b6",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=5ef9273d29137dd81d7dff62821970e067baa82e",
      "patch": "@@ -719,6 +719,10 @@ lynx_request_interrupt (void)\n   kill (lynx_ptid_get_pid (inferior_ptid), SIGINT);\n }\n \n+/* The LynxOS target ops object.  */\n+\n+static lynx_process_target the_lynx_target;\n+\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n@@ -765,6 +769,41 @@ static process_stratum_target lynx_target_ops = {\n   NULL,  /* supports_exec_events */\n   NULL,  /* handle_new_gdb_connection */\n   NULL,  /* handle_monitor_command */\n+  NULL,  /* core_of_thread */\n+  NULL,  /* read_loadmap */\n+  NULL,  /* process_qsupported */\n+  NULL,  /* supports_tracepoints */\n+  NULL,  /* read_pc */\n+  NULL,  /* write_pc */\n+  NULL,  /* thread_stopped */\n+  NULL,  /* get_tib_address */\n+  NULL,  /* pause_all */\n+  NULL,  /* unpause_all */\n+  NULL,  /* stabilize_threads */\n+  NULL,  /* install_fast_tracepoint_jump_pad */\n+  NULL,  /* emit_ops */\n+  NULL,  /* supports_disable_randomization */\n+  NULL,  /* get_min_fast_tracepoint_insn_len */\n+  NULL,  /* qxfer_libraries_svr4 */\n+  NULL,  /* support_agent */\n+  NULL,  /* enable_btrace */\n+  NULL,  /* disable_btrace */\n+  NULL,  /* read_btrace */\n+  NULL,  /* read_btrace_conf */\n+  NULL,  /* supports_range_stepping */\n+  NULL,  /* pid_to_exec_file */\n+  NULL,  /* multifs_open */\n+  NULL,  /* multifs_unlink */\n+  NULL,  /* multifs_readlink */\n+  NULL,  /* breakpoint_kind_from_pc */\n+  NULL,  /* sw_breakpoint_from_kind */\n+  NULL,  /* thread_name */\n+  NULL,  /* breakpoint_kind_from_current_state */\n+  NULL,  /* supports_software_single_step */\n+  NULL,  /* supports_catch_syscall */\n+  NULL,  /* get_ipa_tdesc_idx */\n+  NULL,  /* thread_handle */\n+  &the_lynx_target,\n };\n \n void"
    },
    {
      "sha": "923725dd003bfca8fed6ef9feed6e648b97e5b2a",
      "filename": "gdbserver/lynx-low.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/lynx-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/lynx-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.h?ref=5ef9273d29137dd81d7dff62821970e067baa82e",
      "patch": "@@ -52,6 +52,14 @@ struct lynx_target_ops\n \n extern struct lynx_target_ops the_low_target;\n \n+/* Target ops definitions for a LynxOS target.  */\n+\n+class lynx_process_target : public process_target\n+{\n+public:\n+\n+};\n+\n /* The inferior's target description.  This is a global because the\n    LynxOS ports support neither bi-arch nor multi-process.  */\n extern const struct target_desc *lynx_tdesc;"
    },
    {
      "sha": "6f12a735c1206bc787d91e62d31adff315db095c",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=5ef9273d29137dd81d7dff62821970e067baa82e",
      "patch": "@@ -930,6 +930,9 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n   return the_low_target.breakpoint;\n }\n \n+/* The QNX Neutrino target ops object.  */\n+\n+static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n   nto_create_inferior,\n@@ -1003,6 +1006,13 @@ static process_stratum_target nto_target_ops = {\n   NULL, /* multifs_readlink */\n   NULL, /* breakpoint_kind_from_pc */\n   nto_sw_breakpoint_from_kind,\n+  NULL, /* thread_name */\n+  NULL, /* breakpoint_kind_from_current_state */\n+  NULL, /* supports_software_single_step */\n+  NULL, /* supports_catch_syscall */\n+  NULL, /* get_ipa_tdesc_idx */\n+  NULL, /* thread_handle */\n+  &the_nto_target,\n };\n \n "
    },
    {
      "sha": "2695db98737083a2d5e8f3f5a7ebf16816e307e1",
      "filename": "gdbserver/nto-low.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/nto-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/nto-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.h?ref=5ef9273d29137dd81d7dff62821970e067baa82e",
      "patch": "@@ -42,6 +42,14 @@ struct nto_target_ops\n \n extern struct nto_target_ops the_low_target;\n \n+/* Target ops definitions for a QNX Neutrino target.  */\n+\n+class nto_process_target : public process_target\n+{\n+public:\n+\n+};\n+\n /* The inferior's target description.  This is a global because the\n    LynxOS ports support neither bi-arch nor multi-process.  */\n extern const struct target_desc *nto_tdesc;"
    },
    {
      "sha": "af78d8caa902acb745cc65095256f3c2efe2b8a1",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=5ef9273d29137dd81d7dff62821970e067baa82e",
      "patch": "@@ -63,6 +63,8 @@ struct thread_resume\n   CORE_ADDR step_range_end;\t/* Exclusive */\n };\n \n+class process_target;\n+\n /* GDBserver doesn't have a concept of strata like GDB, but we call\n    its target vector \"process_stratum\" anyway for the benefit of\n    shared code.  */\n@@ -477,6 +479,16 @@ struct process_stratum_target\n      false for failure.  Return pointer to thread handle via HANDLE\n      and the handle's length via HANDLE_LEN.  */\n   bool (*thread_handle) (ptid_t ptid, gdb_byte **handle, int *handle_len);\n+\n+  /* The object that will gradually replace this struct.  */\n+  process_target *pt;\n+};\n+\n+class process_target\n+{\n+public:\n+\n+  virtual ~process_target () = default;\n };\n \n extern process_stratum_target *the_target;"
    },
    {
      "sha": "2a7b2964d926c8e0ecd9f7e7266b4c311d100ec3",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=5ef9273d29137dd81d7dff62821970e067baa82e",
      "patch": "@@ -1834,6 +1834,10 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n   return the_low_target.breakpoint;\n }\n \n+/* The win32 target ops object.  */\n+\n+static win32_process_target the_win32_target;\n+\n static process_stratum_target win32_target_ops = {\n   win32_create_inferior,\n   NULL,  /* post_create_inferior */\n@@ -1910,6 +1914,13 @@ static process_stratum_target win32_target_ops = {\n   NULL, /* multifs_readlink */\n   NULL, /* breakpoint_kind_from_pc */\n   win32_sw_breakpoint_from_kind,\n+  NULL, /* thread_name */\n+  NULL, /* breakpoint_kind_from_current_state */\n+  NULL, /* supports_software_single_step */\n+  NULL, /* supports_catch_syscall */\n+  NULL, /* get_ipa_tdesc_idx */\n+  NULL, /* thread_handle */\n+  &the_win32_target,\n };\n \n /* Initialize the Win32 backend.  */"
    },
    {
      "sha": "ff96f804fbdd997a34df3181498a75c6a4882880",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ef9273d29137dd81d7dff62821970e067baa82e/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=5ef9273d29137dd81d7dff62821970e067baa82e",
      "patch": "@@ -101,6 +101,14 @@ struct win32_target_ops\n \n extern struct win32_target_ops the_low_target;\n \n+/* Target ops definitions for a Win32 target.  */\n+\n+class win32_process_target : public process_target\n+{\n+public:\n+\n+};\n+\n /* Retrieve the context for this thread, if not already retrieved.  */\n extern void win32_require_context (win32_thread_info *th);\n "
    }
  ]
}