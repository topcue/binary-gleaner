{
  "sha": "e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTZmN2Y2ZDE0ZjdlMWFjYmEwY2Y0MTcyNjYxNmEyNzBlN2QzYzEyMQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-18T06:55:19Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-18T13:37:31Z"
    },
    "message": "bfd_asymbol_* macros\n\nThe main point of this patch is to give bfd_get_section a better name,\nbfd_asymbol_section.\n\nbfd/\n\t* bfd-in.h (bfd_asymbol_section): Rename from bfd_get_section.\n\t(bfd_get_output_section): Delete.\n\t(bfd_asymbol_base): Delete.\n\t(bfd_asymbol_section, bfd_asymbol_value, bfd_asymbol_name),\n\t(bfd_asymbol_bfd, bfd_asymbol_flavour): Tidy.\n\t(bfd_set_asymbol_name): New macro.\n\t* bfd-in2.h: Regenerate.\n\t* aout-cris.c: Update throughout to use bfd_asymbol_section.\n\t* aoutx.h: Likewise.\n\t* cofflink.c: Likewise.\n\t* dwarf2.c: Likewise.\n\t* ecoff.c: Likewise.\n\t* elf.c: Likewise.\n\t* elf32-arm.c: Likewise.\n\t* elf32-mips.c: Likewise.\n\t* elf32-score.c: Likewise.\n\t* elf32-score7.c: Likewise.\n\t* elfn32-mips.c: Likewise.\n\t* elfnn-aarch64.c: Likewise.\n\t* elfxx-mips.c: Likewise.\n\t* linker.c: Likewise.\n\t* pdp11.c: Likewise.\n\t* elf64-mmix.c (mmix_elf_reloc): Expand bfd_get_output_section.\nbinutils/\n\t* nm.c: Update bfd_get_section to bfd_asymbol_section throughout.\n\t* objcopy.c: Likewise.\n\t* objdump.c: Likewise.\n\t* rdcoff.c: Likewise.\n\t* objcopy.c (create_new_symbol): Use bfd_set_asymbol_name.\n\t(filter_symbols): Likewise.\ngas/\n\t* symbols.c (S_IS_LOCAL): Update bfd_get_section to\n\tbfd_asymbol_section.\ngdb/\n\t* arm-tdep.c (arm_record_special_symbol): Update bfd_get_section\n\tto bfd_asymbol_section.\nld/\n\t* ldcref.c (check_reloc_refs): Update bfd_get_section to\n\tbfd_asymbol_section.",
    "tree": {
      "sha": "746d1bc8b1493f816181195a8d9ffaf3f4e1fa8e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/746d1bc8b1493f816181195a8d9ffaf3f4e1fa8e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2b44a6a237320a390284b1a8237a6bed67d5401f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b44a6a237320a390284b1a8237a6bed67d5401f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2b44a6a237320a390284b1a8237a6bed67d5401f"
    }
  ],
  "stats": {
    "total": 242,
    "additions": 143,
    "deletions": 99
  },
  "files": [
    {
      "sha": "63f6c4c33ff98be15fe1ced8aea49fdfb3a7e187",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -1,3 +1,29 @@\n+2019-09-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* bfd-in.h (bfd_asymbol_section): Rename from bfd_get_section.\n+\t(bfd_get_output_section): Delete.\n+\t(bfd_asymbol_base): Delete.\n+\t(bfd_asymbol_section, bfd_asymbol_value, bfd_asymbol_name),\n+\t(bfd_asymbol_bfd, bfd_asymbol_flavour): Tidy.\n+\t(bfd_set_asymbol_name): New macro.\n+\t* bfd-in2.h: Regenerate.\n+\t* aout-cris.c: Update throughout to use bfd_asymbol_section.\n+\t* aoutx.h: Likewise.\n+\t* cofflink.c: Likewise.\n+\t* dwarf2.c: Likewise.\n+\t* ecoff.c: Likewise.\n+\t* elf.c: Likewise.\n+\t* elf32-arm.c: Likewise.\n+\t* elf32-mips.c: Likewise.\n+\t* elf32-score.c: Likewise.\n+\t* elf32-score7.c: Likewise.\n+\t* elfn32-mips.c: Likewise.\n+\t* elfnn-aarch64.c: Likewise.\n+\t* elfxx-mips.c: Likewise.\n+\t* linker.c: Likewise.\n+\t* pdp11.c: Likewise.\n+\t* elf64-mmix.c (mmix_elf_reloc): Part expand bfd_get_output_section.\n+\n 2019-09-18  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* Makefile.in: Re-generate."
    },
    {
      "sha": "31b003520dc9d6e31105eea2da8206c4f1f6c396",
      "filename": "bfd/aout-cris.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/aout-cris.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/aout-cris.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aout-cris.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -169,14 +169,14 @@ MY (swap_ext_reloc_out) (bfd *abfd,\n      from the abs section, or as a symbol which has an abs value.\n      check for that here.  */\n \n-  if (bfd_is_abs_section (bfd_get_section (sym)))\n+  if (bfd_is_abs_section (bfd_asymbol_section (sym)))\n     {\n       r_extern = 0;\n       r_index = N_ABS;\n     }\n   else if ((sym->flags & BSF_SECTION_SYM) == 0)\n     {\n-      if (bfd_is_und_section (bfd_get_section (sym))\n+      if (bfd_is_und_section (bfd_asymbol_section (sym))\n \t  /* Remember to check for weak symbols; they count as global.  */\n \t  || (sym->flags & (BSF_GLOBAL | BSF_WEAK)) != 0)\n \tr_extern = 1;"
    },
    {
      "sha": "859153be1000fdbae96d595f2b7eb5013e020214",
      "filename": "bfd/aoutx.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/aoutx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/aoutx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aoutx.h?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -1570,7 +1570,7 @@ translate_to_native_sym_flags (bfd *abfd,\n      to another.  */\n   sym_pointer->e_type[0] &= ~N_TYPE;\n \n-  sec = bfd_get_section (cache_ptr);\n+  sec = bfd_asymbol_section (cache_ptr);\n   off = 0;\n \n   if (sec == NULL)\n@@ -2064,14 +2064,14 @@ NAME (aout, swap_ext_reloc_out) (bfd *abfd,\n      Absolute symbols can come in in two ways, either as an offset\n      from the abs section, or as a symbol which has an abs value.\n      check for that here.  */\n-  if (bfd_is_abs_section (bfd_get_section (sym)))\n+  if (bfd_is_abs_section (bfd_asymbol_section (sym)))\n     {\n       r_extern = 0;\n       r_index = N_ABS;\n     }\n   else if ((sym->flags & BSF_SECTION_SYM) == 0)\n     {\n-      if (bfd_is_und_section (bfd_get_section (sym))\n+      if (bfd_is_und_section (bfd_asymbol_section (sym))\n \t  || (sym->flags & BSF_GLOBAL) != 0)\n \tr_extern = 1;\n       else"
    },
    {
      "sha": "5a303443501902af4c0e016d351e8234fb9795a6",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -240,18 +240,15 @@ typedef unsigned long symindex;\n /* General purpose part of a symbol X;\n    target specific parts are in libcoff.h, libaout.h, etc.  */\n \n-#define bfd_get_section(x) ((x)->section)\n-#define bfd_get_output_section(x) ((x)->section->output_section)\n-#define bfd_set_section(x,y) ((x)->section) = (y)\n-#define bfd_asymbol_base(x) ((x)->section->vma)\n-#define bfd_asymbol_value(x) (bfd_asymbol_base(x) + (x)->value)\n-#define bfd_asymbol_name(x) ((x)->name)\n-/*Perhaps future: #define bfd_asymbol_bfd(x) ((x)->section->owner)*/\n-#define bfd_asymbol_bfd(x) ((x)->the_bfd)\n-#define bfd_asymbol_flavour(x)\t\t\t\\\n-  (((x)->flags & BSF_SYNTHETIC) != 0\t\t\\\n+#define bfd_asymbol_section(sy) ((sy)->section)\n+#define bfd_asymbol_value(sy) ((sy)->section->vma + (sy)->value)\n+#define bfd_asymbol_name(sy) ((sy)->name)\n+#define bfd_asymbol_bfd(sy) ((sy)->the_bfd)\n+#define bfd_asymbol_flavour(sy)\t\t\t\\\n+  (((sy)->flags & BSF_SYNTHETIC) != 0\t\t\\\n    ? bfd_target_unknown_flavour\t\t\t\\\n-   : bfd_asymbol_bfd (x)->xvec->flavour)\n+   : (sy)->the_bfd->xvec->flavour)\n+#define bfd_set_asymbol_name(sy, n) do { (sy)->name = (n); } while (0)\n \n /* A canonical archive symbol.  */\n /* This is a type pun with struct ranlib on purpose!  */"
    },
    {
      "sha": "6542d403e06ddd79659b08e3b177ba393cfdf95a",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -247,18 +247,15 @@ typedef unsigned long symindex;\n /* General purpose part of a symbol X;\n    target specific parts are in libcoff.h, libaout.h, etc.  */\n \n-#define bfd_get_section(x) ((x)->section)\n-#define bfd_get_output_section(x) ((x)->section->output_section)\n-#define bfd_set_section(x,y) ((x)->section) = (y)\n-#define bfd_asymbol_base(x) ((x)->section->vma)\n-#define bfd_asymbol_value(x) (bfd_asymbol_base(x) + (x)->value)\n-#define bfd_asymbol_name(x) ((x)->name)\n-/*Perhaps future: #define bfd_asymbol_bfd(x) ((x)->section->owner)*/\n-#define bfd_asymbol_bfd(x) ((x)->the_bfd)\n-#define bfd_asymbol_flavour(x)\t\t\t\\\n-  (((x)->flags & BSF_SYNTHETIC) != 0\t\t\\\n+#define bfd_asymbol_section(sy) ((sy)->section)\n+#define bfd_asymbol_value(sy) ((sy)->section->vma + (sy)->value)\n+#define bfd_asymbol_name(sy) ((sy)->name)\n+#define bfd_asymbol_bfd(sy) ((sy)->the_bfd)\n+#define bfd_asymbol_flavour(sy)\t\t\t\\\n+  (((sy)->flags & BSF_SYNTHETIC) != 0\t\t\\\n    ? bfd_target_unknown_flavour\t\t\t\\\n-   : bfd_asymbol_bfd (x)->xvec->flavour)\n+   : (sy)->the_bfd->xvec->flavour)\n+#define bfd_set_asymbol_name(sy, n) do { (sy)->name = (n); } while (0)\n \n /* A canonical archive symbol.  */\n /* This is a type pun with struct ranlib on purpose!  */"
    },
    {
      "sha": "7bcc1ca77da436f38ce46a3606605e8f0374bac9",
      "filename": "bfd/cofflink.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/cofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/cofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cofflink.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -902,7 +902,7 @@ _bfd_coff_final_link (bfd *abfd,\n \t\t\t\t\tbfd_asymbol_name(sym), FALSE, FALSE)\n \t\t       == NULL))\n \t\t  || (((flaginfo.info->discard == discard_sec_merge\n-\t\t\t&& (bfd_get_section (sym)->flags & SEC_MERGE)\n+\t\t\t&& (bfd_asymbol_section (sym)->flags & SEC_MERGE)\n \t\t\t&& ! bfd_link_relocatable (flaginfo.info))\n \t\t       || flaginfo.info->discard == discard_l)\n \t\t      && bfd_is_local_label_name (sub, bfd_asymbol_name(sym))))"
    },
    {
      "sha": "575b082e1dcbff689f04d1bfca84f63b2e45f7b6",
      "filename": "bfd/dwarf2.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/dwarf2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/dwarf2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/dwarf2.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -2736,7 +2736,7 @@ lookup_symbol_in_function_table (struct comp_unit *unit,\n   bfd_vma best_fit_len = 0;\n   struct arange *arange;\n   const char *name = bfd_asymbol_name (sym);\n-  asection *sec = bfd_get_section (sym);\n+  asection *sec = bfd_asymbol_section (sym);\n \n   for (each_func = unit->function_table;\n        each_func;\n@@ -2784,7 +2784,7 @@ lookup_symbol_in_variable_table (struct comp_unit *unit,\n \t\t\t\t unsigned int *linenumber_ptr)\n {\n   const char *name = bfd_asymbol_name (sym);\n-  asection *sec = bfd_get_section (sym);\n+  asection *sec = bfd_asymbol_section (sym);\n   struct varinfo* each;\n \n   for (each = unit->variable_table; each; each = each->prev_var)\n@@ -4048,7 +4048,7 @@ info_hash_lookup_funcinfo (struct info_hash_table *hash_table,\n   struct info_list_node *node;\n   struct arange *arange;\n   const char *name = bfd_asymbol_name (sym);\n-  asection *sec = bfd_get_section (sym);\n+  asection *sec = bfd_asymbol_section (sym);\n \n   for (node = lookup_info_hash_table (hash_table, name);\n        node;\n@@ -4096,7 +4096,7 @@ info_hash_lookup_varinfo (struct info_hash_table *hash_table,\n \t\t\t  unsigned int *linenumber_ptr)\n {\n   const char *name = bfd_asymbol_name (sym);\n-  asection *sec = bfd_get_section (sym);\n+  asection *sec = bfd_asymbol_section (sym);\n   struct varinfo* each;\n   struct info_list_node *node;\n \n@@ -4695,7 +4695,7 @@ _bfd_dwarf2_find_nearest_line (bfd *abfd,\n   if (do_line)\n     {\n       BFD_ASSERT (section == NULL && offset == 0 && functionname_ptr == NULL);\n-      section = bfd_get_section (symbol);\n+      section = bfd_asymbol_section (symbol);\n       addr = symbol->value;\n     }\n   else"
    },
    {
      "sha": "c06fa5ec7f99eddf53c84a05f39b5e5a0624d915",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -2312,7 +2312,7 @@ ecoff_get_extr (asymbol *sym, EXTR *esym)\n      symbol.  */\n   if ((esym->asym.sc == scUndefined\n        || esym->asym.sc == scSUndefined)\n-      && ! bfd_is_und_section (bfd_get_section (sym)))\n+      && ! bfd_is_und_section (bfd_asymbol_section (sym)))\n     esym->asym.sc = scAbs;\n \n   /* Adjust the FDR index for the symbol by that used for the input\n@@ -2719,7 +2719,7 @@ _bfd_ecoff_write_object_contents (bfd *abfd)\n \t\t    { _RCONST, RELOC_SECTION_RCONST }\n \t\t  };\n \n-\t\t  name = bfd_get_section_name (abfd, bfd_get_section (sym));\n+\t\t  name = bfd_get_section_name (abfd, bfd_asymbol_section (sym));\n \n \t\t  for (j = 0; j < ARRAY_SIZE (section_symndx); j++)\n \t\t    if (streq (name, section_symndx[j].name))"
    },
    {
      "sha": "1a1eed908573d1b616cd20083289fd9a8c16a217",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -4057,8 +4057,8 @@ sym_is_global (bfd *abfd, asymbol *sym)\n     return (*bed->elf_backend_sym_is_global) (abfd, sym);\n \n   return ((sym->flags & (BSF_GLOBAL | BSF_WEAK | BSF_GNU_UNIQUE)) != 0\n-\t  || bfd_is_und_section (bfd_get_section (sym))\n-\t  || bfd_is_com_section (bfd_get_section (sym)));\n+\t  || bfd_is_und_section (bfd_asymbol_section (sym))\n+\t  || bfd_is_com_section (bfd_asymbol_section (sym)));\n }\n \n /* Filter global symbols of ABFD to include in the import library.  All"
    },
    {
      "sha": "e29a60abf19557f12834a4a3d98d4e44074f6e56",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -16076,7 +16076,7 @@ arm_elf_find_function (bfd *\t     abfd,\n \t\t    BFD_ARM_SPECIAL_SYM_TYPE_ANY))\n \t    continue;\n \t  /* Fall through.  */\n-\t  if (bfd_get_section (&q->symbol) == section\n+\t  if (bfd_asymbol_section (&q->symbol) == section\n \t      && q->symbol.value >= low_func\n \t      && q->symbol.value <= offset)\n \t    {"
    },
    {
      "sha": "74300a11e95698a2ec7fe6200c0721b9c2339e23",
      "filename": "bfd/elf32-mips.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf32-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf32-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-mips.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -2281,8 +2281,8 @@ mips_elf_sym_is_global (bfd *abfd ATTRIBUTE_UNUSED, asymbol *sym)\n     return (sym->flags & BSF_SECTION_SYM) == 0;\n   else\n     return ((sym->flags & (BSF_GLOBAL | BSF_WEAK | BSF_GNU_UNIQUE)) != 0\n-\t    || bfd_is_und_section (bfd_get_section (sym))\n-\t    || bfd_is_com_section (bfd_get_section (sym)));\n+\t    || bfd_is_und_section (bfd_asymbol_section (sym))\n+\t    || bfd_is_com_section (bfd_asymbol_section (sym)));\n }\n \f\n /* Set the right machine number for a MIPS ELF file.  */"
    },
    {
      "sha": "1bbf64fe6dc6b537a479df4555d2c6a63dd547d5",
      "filename": "bfd/elf32-score.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf32-score.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf32-score.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-score.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -596,8 +596,8 @@ score_elf_got15_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n \t\t       bfd *output_bfd, char **error_message)\n {\n   if ((symbol->flags & (BSF_GLOBAL | BSF_WEAK)) != 0\n-      || bfd_is_und_section (bfd_get_section (symbol))\n-      || bfd_is_com_section (bfd_get_section (symbol)))\n+      || bfd_is_und_section (bfd_asymbol_section (symbol))\n+      || bfd_is_com_section (bfd_asymbol_section (symbol)))\n     /* The relocation is against a global symbol.  */\n     return bfd_elf_generic_reloc (abfd, reloc_entry, symbol, data,\n \t\t\t\t  input_section, output_bfd,"
    },
    {
      "sha": "51a5fb106d7559c46660dfa9e8b72cf052c07391",
      "filename": "bfd/elf32-score7.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf32-score7.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf32-score7.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-score7.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -497,8 +497,8 @@ score_elf_got15_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n \t\t       bfd *output_bfd, char **error_message)\n {\n   if ((symbol->flags & (BSF_GLOBAL | BSF_WEAK)) != 0\n-      || bfd_is_und_section (bfd_get_section (symbol))\n-      || bfd_is_com_section (bfd_get_section (symbol)))\n+      || bfd_is_und_section (bfd_asymbol_section (symbol))\n+      || bfd_is_com_section (bfd_asymbol_section (symbol)))\n     /* The relocation is against a global symbol.  */\n     return bfd_elf_generic_reloc (abfd, reloc_entry, symbol, data,\n \t\t\t\t  input_section, output_bfd,"
    },
    {
      "sha": "18ed456c2bf27d48e9458f8aaf4499054a3f672d",
      "filename": "bfd/elf64-mmix.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf64-mmix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elf64-mmix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-mmix.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -1315,7 +1315,7 @@ mmix_elf_reloc (bfd *abfd,\n   else\n     relocation = symbol->value;\n \n-  reloc_target_output_section = bfd_get_output_section (symbol);\n+  reloc_target_output_section = bfd_asymbol_section (symbol)->output_section;\n \n   /* Here the variable relocation holds the final address of the symbol we\n      are relocating against, plus any addend.  */"
    },
    {
      "sha": "8927e9825bde7483c07532c0062f087877d5a47c",
      "filename": "bfd/elfn32-mips.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elfn32-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elfn32-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfn32-mips.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -3841,8 +3841,8 @@ mips_elf_sym_is_global (bfd *abfd ATTRIBUTE_UNUSED, asymbol *sym)\n     return (sym->flags & BSF_SECTION_SYM) == 0;\n   else\n     return ((sym->flags & (BSF_GLOBAL | BSF_WEAK | BSF_GNU_UNIQUE)) != 0\n-\t    || bfd_is_und_section (bfd_get_section (sym))\n-\t    || bfd_is_com_section (bfd_get_section (sym)));\n+\t    || bfd_is_und_section (bfd_asymbol_section (sym))\n+\t    || bfd_is_com_section (bfd_asymbol_section (sym)));\n }\n \f\n /* Set the right machine number for a MIPS ELF file.  */"
    },
    {
      "sha": "7132b6bc7330c0d5d0cdeac1bd11c0817cdac245",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -8042,7 +8042,7 @@ aarch64_elf_find_function (bfd *          abfd,\n \t\t  (q->symbol.name, BFD_AARCH64_SPECIAL_SYM_TYPE_ANY)))\n \t    continue;\n \t  /* Fall through.  */\n-\t  if (bfd_get_section (&q->symbol) == section\n+\t  if (bfd_asymbol_section (&q->symbol) == section\n \t      && q->symbol.value >= low_func && q->symbol.value <= offset)\n \t    {\n \t      func = (asymbol *) q;"
    },
    {
      "sha": "8ad5268520b9b1cb3ea5fcce1049602e3dffa19b",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -2531,8 +2531,8 @@ _bfd_mips_elf_got16_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n \t\t\t   bfd *output_bfd, char **error_message)\n {\n   if ((symbol->flags & (BSF_GLOBAL | BSF_WEAK)) != 0\n-      || bfd_is_und_section (bfd_get_section (symbol))\n-      || bfd_is_com_section (bfd_get_section (symbol)))\n+      || bfd_is_und_section (bfd_asymbol_section (symbol))\n+      || bfd_is_com_section (bfd_asymbol_section (symbol)))\n     /* The relocation is against a global symbol.  */\n     return _bfd_mips_elf_generic_reloc (abfd, reloc_entry, symbol, data,\n \t\t\t\t\tinput_section, output_bfd,"
    },
    {
      "sha": "2518371f247e2f81c3cd09a29414d8d7bc704c03",
      "filename": "bfd/linker.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/linker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/linker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/linker.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -1163,9 +1163,9 @@ generic_link_add_symbol_list (bfd *abfd,\n \t\t       | BSF_GLOBAL\n \t\t       | BSF_CONSTRUCTOR\n \t\t       | BSF_WEAK)) != 0\n-\t  || bfd_is_und_section (bfd_get_section (p))\n-\t  || bfd_is_com_section (bfd_get_section (p))\n-\t  || bfd_is_ind_section (bfd_get_section (p)))\n+\t  || bfd_is_und_section (bfd_asymbol_section (p))\n+\t  || bfd_is_com_section (bfd_asymbol_section (p))\n+\t  || bfd_is_ind_section (bfd_asymbol_section (p)))\n \t{\n \t  const char *name;\n \t  const char *string;\n@@ -1191,7 +1191,7 @@ generic_link_add_symbol_list (bfd *abfd,\n \n \t  bh = NULL;\n \t  if (! (_bfd_generic_link_add_one_symbol\n-\t\t (info, abfd, name, p->flags, bfd_get_section (p),\n+\t\t (info, abfd, name, p->flags, bfd_asymbol_section (p),\n \t\t  p->value, string, FALSE, FALSE, &bh)))\n \t    return FALSE;\n \t  h = (struct generic_link_hash_entry *) bh;\n@@ -1218,15 +1218,15 @@ generic_link_add_symbol_list (bfd *abfd,\n \t  if (info->output_bfd->xvec == abfd->xvec)\n \t    {\n \t      if (h->sym == NULL\n-\t\t  || (! bfd_is_und_section (bfd_get_section (p))\n-\t\t      && (! bfd_is_com_section (bfd_get_section (p))\n-\t\t\t  || bfd_is_und_section (bfd_get_section (h->sym)))))\n+\t\t  || (! bfd_is_und_section (bfd_asymbol_section (p))\n+\t\t      && (! bfd_is_com_section (bfd_asymbol_section (p))\n+\t\t\t  || bfd_is_und_section (bfd_asymbol_section (h->sym)))))\n \t\t{\n \t\t  h->sym = p;\n \t\t  /* BSF_OLD_COMMON is a hack to support COFF reloc\n \t\t     reading, and it should go away when the COFF\n \t\t     linker is switched to the new version.  */\n-\t\t  if (bfd_is_com_section (bfd_get_section (p)))\n+\t\t  if (bfd_is_com_section (bfd_asymbol_section (p)))\n \t\t    p->flags |= BSF_OLD_COMMON;\n \t\t}\n \t    }\n@@ -2026,9 +2026,9 @@ _bfd_generic_link_output_symbols (bfd *output_bfd,\n \t\t\t | BSF_GLOBAL\n \t\t\t | BSF_CONSTRUCTOR\n \t\t\t | BSF_WEAK)) != 0\n-\t  || bfd_is_und_section (bfd_get_section (sym))\n-\t  || bfd_is_com_section (bfd_get_section (sym))\n-\t  || bfd_is_ind_section (bfd_get_section (sym)))\n+\t  || bfd_is_und_section (bfd_asymbol_section (sym))\n+\t  || bfd_is_com_section (bfd_asymbol_section (sym))\n+\t  || bfd_is_ind_section (bfd_asymbol_section (sym)))\n \t{\n \t  if (sym->udata.p != NULL)\n \t    h = (struct generic_link_hash_entry *) sym->udata.p;\n@@ -2044,7 +2044,7 @@ _bfd_generic_link_output_symbols (bfd *output_bfd,\n \t\t the relocs in the output format being used.  */\n \t      h = NULL;\n \t    }\n-\t  else if (bfd_is_und_section (bfd_get_section (sym)))\n+\t  else if (bfd_is_und_section (bfd_asymbol_section (sym)))\n \t    h = ((struct generic_link_hash_entry *)\n \t\t bfd_wrapped_link_hash_lookup (output_bfd, info,\n \t\t\t\t\t       bfd_asymbol_name (sym),\n@@ -2601,15 +2601,15 @@ default_indirect_link_order (bfd *output_bfd,\n \t\t\t     | BSF_GLOBAL\n \t\t\t     | BSF_CONSTRUCTOR\n \t\t\t     | BSF_WEAK)) != 0\n-\t      || bfd_is_und_section (bfd_get_section (sym))\n-\t      || bfd_is_com_section (bfd_get_section (sym))\n-\t      || bfd_is_ind_section (bfd_get_section (sym)))\n+\t      || bfd_is_und_section (bfd_asymbol_section (sym))\n+\t      || bfd_is_com_section (bfd_asymbol_section (sym))\n+\t      || bfd_is_ind_section (bfd_asymbol_section (sym)))\n \t    {\n \t      /* sym->udata may have been set by\n \t\t generic_link_add_symbol_list.  */\n \t      if (sym->udata.p != NULL)\n \t\th = (struct bfd_link_hash_entry *) sym->udata.p;\n-\t      else if (bfd_is_und_section (bfd_get_section (sym)))\n+\t      else if (bfd_is_und_section (bfd_asymbol_section (sym)))\n \t\th = bfd_wrapped_link_hash_lookup (output_bfd, info,\n \t\t\t\t\t\t  bfd_asymbol_name (sym),\n \t\t\t\t\t\t  FALSE, FALSE, TRUE);"
    },
    {
      "sha": "238f5144d4cb3c089535cd78c0fb32aa9594fea2",
      "filename": "bfd/pdp11.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/pdp11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/bfd/pdp11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pdp11.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -1352,7 +1352,7 @@ translate_to_native_sym_flags (bfd *abfd,\n      to another.  */\n   sym_pointer->e_type[0] &= ~N_TYPE;\n \n-  sec = bfd_get_section (cache_ptr);\n+  sec = bfd_asymbol_section (cache_ptr);\n   off = 0;\n \n   if (sec == NULL)"
    },
    {
      "sha": "9c791f6d6565ca7321e40c45f54d6f43eff4ec59",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -1,3 +1,12 @@\n+2019-09-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* nm.c: Update bfd_get_section to bfd_asymbol_section throughout.\n+\t* objcopy.c: Likewise.\n+\t* objdump.c: Likewise.\n+\t* rdcoff.c: Likewise.\n+\t* objcopy.c (create_new_symbol): Use bfd_set_asymbol_name.\n+\t(filter_symbols): Likewise.\n+\n 2019-09-18  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* doc/Makefile.am (MOSTLYCLEANFILES): Clean all man pages,"
    },
    {
      "sha": "0bded073912680c0965409b43316c320b717061d",
      "filename": "binutils/nm.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/binutils/nm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/binutils/nm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/nm.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -592,8 +592,8 @@ numeric_forward (const void *P_x, const void *P_y)\n   if (x == NULL || y == NULL)\n     bfd_fatal (bfd_get_filename (sort_bfd));\n \n-  xs = bfd_get_section (x);\n-  ys = bfd_get_section (y);\n+  xs = bfd_asymbol_section (x);\n+  ys = bfd_asymbol_section (y);\n \n   if (bfd_is_und_section (xs))\n     {\n@@ -645,8 +645,8 @@ size_forward1 (const void *P_x, const void *P_y)\n   if (x == NULL || y == NULL)\n     bfd_fatal (bfd_get_filename (sort_bfd));\n \n-  xs = bfd_get_section (x);\n-  ys = bfd_get_section (y);\n+  xs = bfd_asymbol_section (x);\n+  ys = bfd_asymbol_section (y);\n \n   if (bfd_is_und_section (xs))\n     abort ();\n@@ -774,7 +774,7 @@ sort_symbols_by_size (bfd *abfd, bfd_boolean is_dynamic, void *minisyms,\n       else\n \tnext = NULL;\n \n-      sec = bfd_get_section (sym);\n+      sec = bfd_asymbol_section (sym);\n \n       /* Synthetic symbols don't have a full type set of data available, thus\n \t we can't rely on that information for the symbol size.  Ditto for\n@@ -788,7 +788,7 @@ sort_symbols_by_size (bfd *abfd, bfd_boolean is_dynamic, void *minisyms,\n       else\n \t{\n \t  if (from + size < fromend\n-\t      && sec == bfd_get_section (next))\n+\t      && sec == bfd_asymbol_section (next))\n \t    sz = valueof (next) - valueof (sym);\n \t  else\n \t    sz = (bfd_get_section_vma (abfd, sec)\n@@ -895,7 +895,7 @@ print_symbol (bfd *        abfd,\n       if ((sym->flags & (BSF_SECTION_SYM | BSF_SYNTHETIC)) == 0)\n \tversion_string = bfd_get_symbol_version_string (abfd, sym, &hidden);\n \n-      if (bfd_is_und_section (bfd_get_section (sym)))\n+      if (bfd_is_und_section (bfd_asymbol_section (sym)))\n \thidden = TRUE;\n \n       if (version_string && *version_string != '\\0')\n@@ -931,7 +931,7 @@ print_symbol (bfd *        abfd,\n \t  lineno_cache_bfd = abfd;\n \t}\n \n-      if (bfd_is_und_section (bfd_get_section (sym)))\n+      if (bfd_is_und_section (bfd_asymbol_section (sym)))\n \t{\n \t  static asection **secs;\n \t  static arelent ***relocs;\n@@ -1001,10 +1001,10 @@ print_symbol (bfd *        abfd,\n \t\t}\n \t    }\n \t}\n-      else if (bfd_get_section (sym)->owner == abfd)\n+      else if (bfd_asymbol_section (sym)->owner == abfd)\n \t{\n \t  if ((bfd_find_line (abfd, syms, sym, &filename, &lineno)\n-\t       || bfd_find_nearest_line (abfd, bfd_get_section (sym),\n+\t       || bfd_find_nearest_line (abfd, bfd_asymbol_section (sym),\n \t\t\t\t\t syms, sym->value, &filename,\n \t\t\t\t\t &functionname, &lineno))\n \t      && filename != NULL"
    },
    {
      "sha": "ce4a4afa55c6fb49d9530319c00b4821fa5affc9",
      "filename": "binutils/objcopy.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/binutils/objcopy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/binutils/objcopy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objcopy.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -1465,7 +1465,7 @@ create_new_symbol (struct addsym_node *ptr, bfd *obfd)\n {\n   asymbol *sym = bfd_make_empty_symbol (obfd);\n \n-  bfd_asymbol_name (sym) = ptr->symdef;\n+  bfd_set_asymbol_name (sym, ptr->symdef);\n   sym->value = ptr->symval;\n   sym->flags = ptr->flags;\n   if (ptr->section)\n@@ -1503,7 +1503,7 @@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,\n       bfd_boolean rem_leading_char;\n       bfd_boolean add_leading_char;\n \n-      undefined = bfd_is_und_section (bfd_get_section (sym));\n+      undefined = bfd_is_und_section (bfd_asymbol_section (sym));\n \n       if (add_sym_list)\n \t{\n@@ -1521,7 +1521,7 @@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,\n \t  if (new_name == name\n \t      && (flags & BSF_SECTION_SYM) != 0)\n \t    new_name = (char *) find_section_rename (name, NULL);\n-\t  bfd_asymbol_name (sym) = new_name;\n+\t  bfd_set_asymbol_name (sym, new_name);\n \t  name = new_name;\n \t}\n \n@@ -1532,7 +1532,7 @@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,\n \t    || (remove_leading_char\n \t\t&& ((flags & (BSF_GLOBAL | BSF_WEAK)) != 0\n \t\t    || undefined\n-\t\t    || bfd_is_com_section (bfd_get_section (sym)))));\n+\t\t    || bfd_is_com_section (bfd_asymbol_section (sym)))));\n \n       /* Check if we will add a new leading character.  */\n       add_leading_char =\n@@ -1545,14 +1545,14 @@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,\n       if (rem_leading_char && add_leading_char && !prefix_symbols_string)\n \t{\n \t  name[0] = bfd_get_symbol_leading_char (obfd);\n-\t  bfd_asymbol_name (sym) = name;\n+\t  bfd_set_asymbol_name (sym, name);\n \t  rem_leading_char = FALSE;\n \t  add_leading_char = FALSE;\n \t}\n \n       /* Remove leading char.  */\n       if (rem_leading_char)\n-\tbfd_asymbol_name (sym) = ++name;\n+\tbfd_set_asymbol_name (sym, ++name);\n \n       /* Add new leading char and/or prefix.  */\n       if (add_leading_char || prefix_symbols_string)\n@@ -1571,23 +1571,23 @@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,\n \t    }\n \n \t  strcpy (ptr, name);\n-\t  bfd_asymbol_name (sym) = n;\n+\t  bfd_set_asymbol_name (sym, n);\n \t  name = n;\n \t}\n \n       if (strip_symbols == STRIP_ALL)\n \tkeep = FALSE;\n       else if ((flags & BSF_KEEP) != 0\t\t/* Used in relocation.  */\n \t       || ((flags & BSF_SECTION_SYM) != 0\n-\t\t   && ((*bfd_get_section (sym)->symbol_ptr_ptr)->flags\n+\t\t   && ((*bfd_asymbol_section (sym)->symbol_ptr_ptr)->flags\n \t\t       & BSF_KEEP) != 0))\n \t{\n \t  keep = TRUE;\n \t  used_in_reloc = TRUE;\n \t}\n       else if (relocatable\t\t\t/* Relocatable file.  */\n \t       && ((flags & (BSF_GLOBAL | BSF_WEAK)) != 0\n-\t\t   || bfd_is_com_section (bfd_get_section (sym))))\n+\t\t   || bfd_is_com_section (bfd_asymbol_section (sym))))\n \tkeep = TRUE;\n       else if (bfd_decode_symclass (sym) == 'I')\n \t/* Global symbols in $idata sections need to be retained\n@@ -1598,13 +1598,13 @@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,\n       else if ((flags & BSF_GLOBAL) != 0\t/* Global symbol.  */\n \t       || (flags & BSF_WEAK) != 0\n \t       || undefined\n-\t       || bfd_is_com_section (bfd_get_section (sym)))\n+\t       || bfd_is_com_section (bfd_asymbol_section (sym)))\n \tkeep = strip_symbols != STRIP_UNNEEDED;\n       else if ((flags & BSF_DEBUGGING) != 0)\t/* Debugging symbol.  */\n \tkeep = (strip_symbols != STRIP_DEBUG\n \t\t&& strip_symbols != STRIP_UNNEEDED\n \t\t&& ! convert_debugging);\n-      else if (bfd_coff_get_comdat_section (abfd, bfd_get_section (sym)))\n+      else if (bfd_coff_get_comdat_section (abfd, bfd_asymbol_section (sym)))\n \t/* COMDAT sections store special information in local\n \t   symbols, so we cannot risk stripping any of them.  */\n \tkeep = TRUE;\n@@ -1637,7 +1637,7 @@ filter_symbols (bfd *abfd, bfd *obfd, asymbol **osyms,\n \t      || is_specified_symbol (name, keep_specific_htab)))\n \tkeep = TRUE;\n \n-      if (keep && is_strip_section (abfd, bfd_get_section (sym)))\n+      if (keep && is_strip_section (abfd, bfd_asymbol_section (sym)))\n \tkeep = FALSE;\n \n       if (keep)"
    },
    {
      "sha": "4a7c8f9a74bf0518bfcb5e5c72a2c53e8bb4eeb5",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -995,7 +995,7 @@ objdump_print_symname (bfd *abfd, struct disassemble_info *inf,\n   if ((sym->flags & (BSF_SECTION_SYM | BSF_SYNTHETIC)) == 0)\n     version_string = bfd_get_symbol_version_string (abfd, sym, &hidden);\n \n-  if (bfd_is_und_section (bfd_get_section (sym)))\n+  if (bfd_is_und_section (bfd_asymbol_section (sym)))\n     hidden = TRUE;\n \n   name = sanitize_string (name);\n@@ -1351,7 +1351,7 @@ objdump_print_addr (bfd_vma vma,\n       /* Adjust the vma to the reloc.  */\n       vma += bfd_asymbol_value (sym);\n \n-      if (bfd_is_und_section (bfd_get_section (sym)))\n+      if (bfd_is_und_section (bfd_asymbol_section (sym)))\n \tskip_find = TRUE;\n     }\n \n@@ -2234,7 +2234,7 @@ disassemble_bytes (struct disassemble_info * inf,\n \t\t    {\n \t\t      asection *sym_sec;\n \n-\t\t      sym_sec = bfd_get_section (*q->sym_ptr_ptr);\n+\t\t      sym_sec = bfd_asymbol_section (*q->sym_ptr_ptr);\n \t\t      sym_name = bfd_get_section_name (aux->abfd, sym_sec);\n \t\t      if (sym_name == NULL || *sym_name == '\\0')\n \t\t\tsym_name = \"*unknown*\";"
    },
    {
      "sha": "cbb5db1b94bf6f83883856a78aeba0bfa56d08b8",
      "filename": "binutils/rdcoff.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/binutils/rdcoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/binutils/rdcoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/rdcoff.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -816,7 +816,7 @@ parse_coff (bfd *abfd, asymbol **syms, long symcount, void *dhandle)\n \t\t  else\n \t\t    base = auxent.x_sym.x_misc.x_lnsz.x_lnno - 1;\n \n-\t\t  addr = bfd_get_section_vma (abfd, bfd_get_section (sym));\n+\t\t  addr = bfd_get_section_vma (abfd, bfd_asymbol_section (sym));\n \n \t\t  ++linenos;\n "
    },
    {
      "sha": "3d61530a9b372297dad4d3007cf72a38b2a44865",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -1,3 +1,8 @@\n+2019-09-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* symbols.c (S_IS_LOCAL): Update bfd_get_section to\n+\tbfd_asymbol_section.\n+\n 2019-09-18  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* Makefile.in: Re-generate."
    },
    {
      "sha": "34ec145ad0426c0deacf9b06079516a07778bd31",
      "filename": "gas/symbols.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/gas/symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/gas/symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/symbols.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -2310,14 +2310,14 @@ S_IS_LOCAL (symbolS *s)\n   if ((flags & BSF_LOCAL) && (flags & BSF_GLOBAL))\n     abort ();\n \n-  if (bfd_get_section (s->bsym) == reg_section)\n+  if (bfd_asymbol_section (s->bsym) == reg_section)\n     return 1;\n \n   if (flag_strip_local_absolute\n       /* Keep BSF_FILE symbols in order to allow debuggers to identify\n \t the source file even when the object file is stripped.  */\n       && (flags & (BSF_GLOBAL | BSF_FILE)) == 0\n-      && bfd_get_section (s->bsym) == absolute_section)\n+      && bfd_asymbol_section (s->bsym) == absolute_section)\n     return 1;\n \n   name = S_GET_NAME (s);"
    },
    {
      "sha": "421b26a004f5316c5989459af26b781ffb521ae1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -1,3 +1,8 @@\n+2019-09-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* arm-tdep.c (arm_record_special_symbol): Update bfd_get_section\n+\tto bfd_asymbol_section.\n+\n 2019-09-18  Alan Modra  <amodra@gmail.com>\n \n \t* amd64-dicos-tdep.c (amd64_dicos_osabi_sniffer): Constify target."
    },
    {
      "sha": "5c494c8ed2850bd615b44b165351724dd6155d81",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -8575,7 +8575,7 @@ arm_record_special_symbol (struct gdbarch *gdbarch, struct objfile *objfile,\n     data = arm_objfile_data_key.emplace (objfile,\n \t\t\t\t\t objfile->obfd->section_count);\n   arm_mapping_symbol_vec &map\n-    = data->section_maps[bfd_get_section (sym)->index];\n+    = data->section_maps[bfd_asymbol_section (sym)->index];\n \n   new_map_sym.value = sym->value;\n   new_map_sym.type = name[1];"
    },
    {
      "sha": "e8f9ed736590ab51ffb0584d036e33af1efaf89d",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -1,3 +1,8 @@\n+2019-09-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* ldcref.c (check_reloc_refs): Update bfd_get_section to\n+\tbfd_asymbol_section.\n+\n 2019-09-18  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* Makefile.in: Re-generate."
    },
    {
      "sha": "fff852a89ab9fd3f09f693b114bbacf495cb044d",
      "filename": "ld/ldcref.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/ld/ldcref.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e6f7f6d14f7e1acba0cf41726616a270e7d3c121/ld/ldcref.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldcref.c?ref=e6f7f6d14f7e1acba0cf41726616a270e7d3c121",
      "patch": "@@ -705,14 +705,14 @@ check_reloc_refs (bfd *abfd, asection *sec, void *iarg)\n       if (q->sym_ptr_ptr != NULL\n \t  && *q->sym_ptr_ptr != NULL\n \t  && ((global\n-\t       && (bfd_is_und_section (bfd_get_section (*q->sym_ptr_ptr))\n-\t\t   || bfd_is_com_section (bfd_get_section (*q->sym_ptr_ptr))\n+\t       && (bfd_is_und_section (bfd_asymbol_section (*q->sym_ptr_ptr))\n+\t\t   || bfd_is_com_section (bfd_asymbol_section (*q->sym_ptr_ptr))\n \t\t   || ((*q->sym_ptr_ptr)->flags & (BSF_GLOBAL\n \t\t\t\t\t\t   | BSF_WEAK)) != 0))\n \t      || (!global\n \t\t  && ((*q->sym_ptr_ptr)->flags & (BSF_LOCAL\n \t\t\t\t\t\t  | BSF_SECTION_SYM)) != 0\n-\t\t  && bfd_get_section (*q->sym_ptr_ptr) == info->defsec))\n+\t\t  && bfd_asymbol_section (*q->sym_ptr_ptr) == info->defsec))\n \t  && (symname != NULL\n \t      ? strcmp (bfd_asymbol_name (*q->sym_ptr_ptr), symname) == 0\n \t      : ((*q->sym_ptr_ptr)->flags & BSF_SECTION_SYM) != 0))"
    }
  ]
}