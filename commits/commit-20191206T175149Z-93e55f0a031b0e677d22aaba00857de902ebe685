{
  "sha": "93e55f0a031b0e677d22aaba00857de902ebe685",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTNlNTVmMGEwMzFiMGU2NzdkMjJhYWJhMDA4NTdkZTkwMmViZTY4NQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-12-06T17:51:49Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-12-06T17:51:49Z"
    },
    "message": "[gdb/symtab] Prefer var def over decl\n\nConsider the DWARF as generated by gcc with the tentative patch to fix gcc\nPR91507 - \"wrong debug for completed array with previous incomplete\ndeclaration\":\n...\n <1><f4>: Abbrev Number: 2 (DW_TAG_array_type)\n    <f5>   DW_AT_type        : <0xff>\n    <f9>   DW_AT_sibling     : <0xff>\n <2><fd>: Abbrev Number: 3 (DW_TAG_subrange_type)\n <2><fe>: Abbrev Number: 0\n <1><ff>: Abbrev Number: 4 (DW_TAG_pointer_type)\n    <100>   DW_AT_byte_size   : 8\n    <101>   DW_AT_type        : <0x105>\n <1><105>: Abbrev Number: 5 (DW_TAG_base_type)\n    <106>   DW_AT_byte_size   : 1\n    <107>   DW_AT_encoding    : 6       (signed char)\n    <108>   DW_AT_name        : (indirect string, offset: 0x19f): char\n <1><10c>: Abbrev Number: 6 (DW_TAG_variable)\n    <10d>   DW_AT_name        : zzz\n    <111>   DW_AT_decl_file   : 1\n    <112>   DW_AT_decl_line   : 1\n    <113>   DW_AT_decl_column : 14\n    <114>   DW_AT_type        : <0xf4>\n    <118>   DW_AT_external    : 1\n    <118>   DW_AT_declaration : 1\n <1><118>: Abbrev Number: 2 (DW_TAG_array_type)\n    <119>   DW_AT_type        : <0xff>\n    <11d>   DW_AT_sibling     : <0x128>\n <1><12f>: Abbrev Number: 8 (DW_TAG_variable)\n    <130>   DW_AT_specification: <0x10c>\n    <134>   DW_AT_decl_line   : 2\n    <135>   DW_AT_decl_column : 7\n    <136>   DW_AT_type        : <0x118>\n    <13a>   DW_AT_location    : 9 byte block: 3 30 10 60 0 0 0 0 0      (DW_OP_addr: 601030)\n...\n\nThe DWARF will result in two entries in the symbol table, a decl with type\nchar *[] and a def with type char*[2].\n\nWhen trying to print the value of zzz:\n...\n$ gdb a.spec.out -batch -ex \"p zzz\"\n...\nthe decl (rather than the def) will be found in the symbol table, which is\nmissing the location information, and consequently we get:\n...\n$1 = 0x601030 <zzz>\n...\n\n[ There is a fallback mechanism that finds the address of the variable in the\nminimal symbol table, but that's not used here, because the type of the decl\ndoes not specify a size.  We could use the symbol size here to get the size\nof the type, but that's currently not done: PR exp/24989.  Still, fixing that\nPR would not fix the generic case, where minimal symbol info is not\navailable. ]\n\nFix this by preferring defs over decls when searching in the symbol table.\n\nBuild and reg-tested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2019-12-06  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/24971\n\t* block.c (best_symbol, better_symbol): New function.\n\t(block_lookup_symbol_primary, block_lookup_symbol): Prefer def over\n\tdecl.\n\ngdb/testsuite/ChangeLog:\n\n2019-12-06  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.dwarf2/varval.exp: Add decl before def test.\n\nChange-Id: Id92326cb8ef9903b121ef9e320658eb565d0f5a9",
    "tree": {
      "sha": "fca7f2c0c69822cf7a8007e2f1931a0be9fb1eb9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fca7f2c0c69822cf7a8007e2f1931a0be9fb1eb9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/93e55f0a031b0e677d22aaba00857de902ebe685",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93e55f0a031b0e677d22aaba00857de902ebe685",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/93e55f0a031b0e677d22aaba00857de902ebe685",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93e55f0a031b0e677d22aaba00857de902ebe685/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e8dc9b5bfd234f61c6127d23cb80fbd4b0382115",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8dc9b5bfd234f61c6127d23cb80fbd4b0382115",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e8dc9b5bfd234f61c6127d23cb80fbd4b0382115"
    }
  ],
  "stats": {
    "total": 133,
    "additions": 123,
    "deletions": 10
  },
  "files": [
    {
      "sha": "55ba8443cdfec1cad0515690b50851b5f78e72f9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93e55f0a031b0e677d22aaba00857de902ebe685/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93e55f0a031b0e677d22aaba00857de902ebe685/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=93e55f0a031b0e677d22aaba00857de902ebe685",
      "patch": "@@ -1,3 +1,10 @@\n+2019-12-06  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR symtab/24971\n+\t* block.c (best_symbol, better_symbol): New function.\n+\t(block_lookup_symbol_primary, block_lookup_symbol): Prefer def over\n+\tdecl.\n+\n 2019-12-06  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* gdbtypes.h: Define the REFERENCE_SEE_THROUGH_BADNESS value."
    },
    {
      "sha": "b49c548adc87e0a41aac6c1d1158d807dfeba700",
      "filename": "gdb/block.c",
      "status": "modified",
      "additions": 70,
      "deletions": 4,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93e55f0a031b0e677d22aaba00857de902ebe685/gdb/block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93e55f0a031b0e677d22aaba00857de902ebe685/gdb/block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.c?ref=93e55f0a031b0e677d22aaba00857de902ebe685",
      "patch": "@@ -657,6 +657,43 @@ block_iter_match_next (const lookup_name_info &name,\n   return block_iter_match_step (iterator, name, 0);\n }\n \n+/* Return true if symbol A is the best match possible for DOMAIN.  */\n+\n+static bool\n+best_symbol (struct symbol *a, const domain_enum domain)\n+{\n+  return (SYMBOL_DOMAIN (a) == domain\n+\t  && SYMBOL_CLASS (a) != LOC_UNRESOLVED);\n+}\n+\n+/* Return symbol B if it is a better match than symbol A for DOMAIN.\n+   Otherwise return A.  */\n+\n+static struct symbol *\n+better_symbol (struct symbol *a, struct symbol *b, const domain_enum domain)\n+{\n+  if (a == NULL)\n+    return b;\n+  if (b == NULL)\n+    return a;\n+\n+  if (SYMBOL_DOMAIN (a) == domain\n+      && SYMBOL_DOMAIN (b) != domain)\n+    return a;\n+  if (SYMBOL_DOMAIN (b) == domain\n+      && SYMBOL_DOMAIN (a) != domain)\n+    return b;\n+\n+  if (SYMBOL_CLASS (a) != LOC_UNRESOLVED\n+      && SYMBOL_CLASS (b) == LOC_UNRESOLVED)\n+    return a;\n+  if (SYMBOL_CLASS (b) != LOC_UNRESOLVED\n+      && SYMBOL_CLASS (a) == LOC_UNRESOLVED)\n+    return b;\n+\n+  return a;\n+}\n+\n /* See block.h.\n \n    Note that if NAME is the demangled form of a C++ symbol, we will fail\n@@ -684,15 +721,17 @@ block_lookup_symbol (const struct block *block, const char *name,\n \n       ALL_BLOCK_SYMBOLS_WITH_NAME (block, lookup_name, iter, sym)\n \t{\n-\t  if (SYMBOL_DOMAIN (sym) == domain)\n+\t  /* See comment related to PR gcc/debug/91507 in\n+\t     block_lookup_symbol_primary.  */\n+\t  if (best_symbol (sym, domain))\n \t    return sym;\n \t  /* This is a bit of a hack, but symbol_matches_domain might ignore\n \t     STRUCT vs VAR domain symbols.  So if a matching symbol is found,\n \t     make sure there is no \"better\" matching symbol, i.e., one with\n \t     exactly the same domain.  PR 16253.  */\n \t  if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n \t\t\t\t     SYMBOL_DOMAIN (sym), domain))\n-\t    other = sym;\n+\t    other = better_symbol (other, sym, domain);\n \t}\n       return other;\n     }\n@@ -746,7 +785,34 @@ block_lookup_symbol_primary (const struct block *block, const char *name,\n        sym != NULL;\n        sym = mdict_iter_match_next (lookup_name, &mdict_iter))\n     {\n-      if (SYMBOL_DOMAIN (sym) == domain)\n+      /* With the fix for PR gcc/debug/91507, we get for:\n+\t ...\n+\t extern char *zzz[];\n+\t char *zzz[ ] = {\n+\t   \"abc\",\n+\t   \"cde\"\n+\t };\n+\t ...\n+\t DWARF which will result in two entries in the symbol table, a decl\n+\t with type char *[] and a def with type char *[2].\n+\n+\t If we return the decl here, we don't get the value of zzz:\n+\t ...\n+\t $ gdb a.spec.out -batch -ex \"p zzz\"\n+\t $1 = 0x601030 <zzz>\n+\t ...\n+\t because we're returning the symbol without location information, and\n+\t because the fallback that uses the address from the minimal symbols\n+\t doesn't work either because the type of the decl does not specify a\n+\t size.\n+\n+\t To fix this, we prefer def over decl in best_symbol and\n+\t better_symbol.\n+\n+\t In absence of the gcc fix, both def and decl have type char *[], so\n+\t the only option to make this work is improve the fallback to use the\n+\t size of the minimal symbol.  Filed as PR exp/24989.  */\n+      if (best_symbol (sym, domain))\n \treturn sym;\n \n       /* This is a bit of a hack, but symbol_matches_domain might ignore\n@@ -755,7 +821,7 @@ block_lookup_symbol_primary (const struct block *block, const char *name,\n \t exactly the same domain.  PR 16253.  */\n       if (symbol_matches_domain (SYMBOL_LANGUAGE (sym),\n \t\t\t\t SYMBOL_DOMAIN (sym), domain))\n-\tother = sym;\n+\tother = better_symbol (other, sym, domain);\n     }\n \n   return other;"
    },
    {
      "sha": "c9f66ad40aad9ad09e7d6e30aa4c021cd52d68ce",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93e55f0a031b0e677d22aaba00857de902ebe685/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93e55f0a031b0e677d22aaba00857de902ebe685/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=93e55f0a031b0e677d22aaba00857de902ebe685",
      "patch": "@@ -1,3 +1,7 @@\n+2019-12-06  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.dwarf2/varval.exp: Add decl before def test.\n+\n 2019-12-06  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* gdb.cp/rvalue-ref-overload.exp: Minor cleanup."
    },
    {
      "sha": "8f5e16fd361914b4df8ce3a810723488a54d390b",
      "filename": "gdb/testsuite/gdb.dwarf2/varval.exp",
      "status": "modified",
      "additions": 42,
      "deletions": 6,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93e55f0a031b0e677d22aaba00857de902ebe685/gdb/testsuite/gdb.dwarf2/varval.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93e55f0a031b0e677d22aaba00857de902ebe685/gdb/testsuite/gdb.dwarf2/varval.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/varval.exp?ref=93e55f0a031b0e677d22aaba00857de902ebe685",
      "patch": "@@ -55,7 +55,8 @@ proc setup_exec { arg_bad } {\n \t\t    var_b_label var_c_label var_p_label var_bad_label \\\n \t\t    varval_label var_s_label var_untyped_label \\\n \t\t    var_a_abstract_label var_a_concrete_label \\\n-\t\t    varval2_label\n+\t\t    varval2_label varval3_def_label varval3_decl_label \\\n+\t\t    int_array_label int_array_of_1_label\n \n \t\tset int_size [get_sizeof \"int\" -1]\n \n@@ -171,6 +172,32 @@ proc setup_exec { arg_bad } {\n \t\t    {DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_b\"]} SPECIAL_expr}\n \t\t}\n \n+\t\tint_array_label: DW_TAG_array_type {\n+\t\t    {DW_AT_type :${int_label}}\n+\t\t} {\n+\t\t    DW_TAG_subrange_type {}\n+\t\t}\n+\t\tvarval3_decl_label: DW_TAG_variable {\n+\t\t    {DW_AT_name \"varval3\"}\n+\t\t    {DW_AT_type :${int_array_label}}\n+\t\t    {DW_AT_external 1 DW_FORM_flag}\n+\t\t    {DW_AT_declaration 1 DW_FORM_flag}\n+\t\t}\n+\t\tint_array_of_1_label: DW_TAG_array_type {\n+\t\t    {DW_AT_type :${int_label}}\n+\t\t} {\n+\t\t    DW_TAG_subrange_type {\n+\t\t\t{DW_AT_type        :$int_label}\n+\t\t\t{DW_AT_upper_bound 0 DW_FORM_data1}\n+\t\t    }\n+\t\t}\n+\t\tvarval3_def_label: DW_TAG_variable {\n+\t\t    {DW_AT_name \"varval3\"}\n+\t\t    {DW_AT_external 1 DW_FORM_flag}\n+\t\t    {DW_AT_type :${int_array_of_1_label}}\n+\t\t    {DW_AT_location {DW_OP_addr [gdb_target_symbol \"var_a\"]} SPECIAL_expr}\n+\t\t}\n+\n \t\tDW_TAG_subprogram {\n \t\t    {MACRO_AT_func { \"main\" \"${srcdir}/${subdir}/${srcfile}\" }}\n \t\t    {DW_AT_type :${int_label}}\n@@ -277,19 +304,24 @@ proc setup_exec { arg_bad } {\n     if [prepare_for_testing \"failed to prepare\" ${executable} [list ${asm_file} ${srcfile}] {}] {\n \treturn -1\n     }\n-\n-    # DW_OP_GNU_variable_value implementation requires a valid frame.\n-    if ![runto_main] {\n-\treturn -1\n-    }\n }\n \n if { [setup_exec 0] == -1 } {\n     return -1\n }\n \n+with_test_prefix \"pre-main\" {\n+    gdb_test \"print varval3\" \"= \\\\{8\\\\}\" \"\"\n+}\n+\n+# DW_OP_GNU_variable_value implementation requires a valid frame.\n+if ![runto_main] {\n+    return -1\n+}\n+\n gdb_test \"print varval\" \"= 8\"\n gdb_test \"print varval2\" \"= 8\"\n+gdb_test \"print varval3\" \"= \\\\{8\\\\}\"\n gdb_test \"print constval\" \"= 53\"\n gdb_test \"print mixedval\" \"= 42\"\n gdb_test \"print pointerval\" \"= \\\\(int \\\\*\\\\) $hex <var_b>\"\n@@ -311,6 +343,10 @@ if { [setup_exec 1] == -1 } {\n     return -1\n }\n \n+# DW_OP_GNU_variable_value implementation requires a valid frame.\n+if ![runto_main] {\n+    return -1\n+}\n gdb_test \"print badval\" \"value has been optimized out\"\n gdb_test \"print bad_die_val1\" \\\n          \"invalid dwarf2 offset 0xabcdef11\""
    }
  ]
}