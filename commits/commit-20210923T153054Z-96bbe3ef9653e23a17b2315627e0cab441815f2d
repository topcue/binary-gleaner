{
  "sha": "96bbe3ef9653e23a17b2315627e0cab441815f2d",
  "node_id": "C_kwDOANOeidoAKDk2YmJlM2VmOTY1M2UyM2ExN2IyMzE1NjI3ZTBjYWI0NDE4MTVmMmQ",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-09-16T19:55:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-09-23T15:30:54Z"
    },
    "message": "Change ptid_t::tid to ULONGEST\n\nThe ptid_t 'tid' member is normally used as an address in gdb -- both\nbsd-uthread and ravenscar-thread use it this way.  However, because\nthe type is 'long', this can cause problems with sign extension.\n\nThis patch changes the type to ULONGEST to ensure that sign extension\ndoes not occur.",
    "tree": {
      "sha": "cf9ac694a99f0ae9755d3229767a905476a69c00",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cf9ac694a99f0ae9755d3229767a905476a69c00"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/96bbe3ef9653e23a17b2315627e0cab441815f2d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96bbe3ef9653e23a17b2315627e0cab441815f2d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/96bbe3ef9653e23a17b2315627e0cab441815f2d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96bbe3ef9653e23a17b2315627e0cab441815f2d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/184ea2f7316c54dd5e0fa84f1fe07a222e8fb44c"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 26,
    "deletions": 21
  },
  "files": [
    {
      "sha": "bef26e8e43fccc22ad6ec0614f7c5a9d155cdbbd",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=96bbe3ef9653e23a17b2315627e0cab441815f2d",
      "patch": "@@ -1233,7 +1233,8 @@ info_task (struct ui_out *uiout, const char *taskno_str, struct inferior *inf)\n     fprintf_styled (gdb_stdout, metadata_style.style (), _(\"<no name>\\n\"));\n \n   /* Print the TID and LWP.  */\n-  printf_filtered (_(\"Thread: %#lx\\n\"), task_info->ptid.tid ());\n+  printf_filtered (_(\"Thread: 0x%s\\n\"), phex_nz (task_info->ptid.tid (),\n+\t\t\t\t\t\t sizeof (ULONGEST)));\n   printf_filtered (_(\"LWP: %#lx\\n\"), task_info->ptid.lwp ());\n \n   /* If set, print the base CPU.  */"
    },
    {
      "sha": "1e594983bcd2a33f0e9cf079775d0e6f1df66519",
      "filename": "gdb/bsd-uthread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/bsd-uthread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/bsd-uthread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/bsd-uthread.c?ref=96bbe3ef9653e23a17b2315627e0cab441815f2d",
      "patch": "@@ -538,8 +538,9 @@ std::string\n bsd_uthread_target::pid_to_str (ptid_t ptid)\n {\n   if (ptid.tid () != 0)\n-    return string_printf (\"process %d, thread 0x%lx\",\n-\t\t\t  ptid.pid (), ptid.tid ());\n+    return string_printf (\"process %d, thread 0x%s\",\n+\t\t\t  ptid.pid (),\n+\t\t\t  phex_nz (ptid.tid (), sizeof (ULONGEST)));\n \n   return normal_pid_to_str (ptid);\n }"
    },
    {
      "sha": "9567130f0d382498ad425dc6bc4e0aadbb1ca512",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=96bbe3ef9653e23a17b2315627e0cab441815f2d",
      "patch": "@@ -4646,11 +4646,9 @@ wait_one ()\n static void\n save_waitstatus (struct thread_info *tp, const target_waitstatus *ws)\n {\n-  infrun_debug_printf (\"saving status %s for %d.%ld.%ld\",\n+  infrun_debug_printf (\"saving status %s for %s\",\n \t\t       target_waitstatus_to_string (ws).c_str (),\n-\t\t       tp->ptid.pid (),\n-\t\t       tp->ptid.lwp (),\n-\t\t       tp->ptid.tid ());\n+\t\t       tp->ptid.to_string ().c_str ());\n \n   /* Record for later.  */\n   tp->set_pending_waitstatus (*ws);\n@@ -4845,9 +4843,9 @@ handle_one (const wait_one_event &event)\n \t  struct regcache *regcache;\n \n \t  infrun_debug_printf\n-\t    (\"target_wait %s, saving status for %d.%ld.%ld\",\n+\t    (\"target_wait %s, saving status for %s\",\n \t     target_waitstatus_to_string (&event.ws).c_str (),\n-\t     t->ptid.pid (), t->ptid.lwp (), t->ptid.tid ());\n+\t     t->ptid.to_string ().c_str ());\n \n \t  /* Record for later.  */\n \t  save_waitstatus (t, &event.ws);"
    },
    {
      "sha": "74bbe9935f0a6d41b74e3e842d8a151f9a46c46b",
      "filename": "gdb/python/py-infthread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/python/py-infthread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/python/py-infthread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-infthread.c?ref=96bbe3ef9653e23a17b2315627e0cab441815f2d",
      "patch": "@@ -296,7 +296,8 @@ PyObject *\n gdbpy_create_ptid_object (ptid_t ptid)\n {\n   int pid;\n-  long tid, lwp;\n+  long lwp;\n+  ULONGEST tid;\n   PyObject *ret;\n \n   ret = PyTuple_New (3);\n@@ -313,7 +314,7 @@ gdbpy_create_ptid_object (ptid_t ptid)\n   gdbpy_ref<> lwp_obj = gdb_py_object_from_longest (lwp);\n   if (lwp_obj == nullptr)\n     return nullptr;\n-  gdbpy_ref<> tid_obj = gdb_py_object_from_longest (tid);\n+  gdbpy_ref<> tid_obj = gdb_py_object_from_ulongest (tid);\n   if (tid_obj == nullptr)\n     return nullptr;\n "
    },
    {
      "sha": "6cc583ce3488f598dd5ffd92dc1050fded73a12d",
      "filename": "gdb/ravenscar-thread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ravenscar-thread.c?ref=96bbe3ef9653e23a17b2315627e0cab441815f2d",
      "patch": "@@ -164,7 +164,7 @@ struct ravenscar_thread_target final : public target_ops\n      needed because sometimes the runtime will report an active task\n      that hasn't yet been put on the list of tasks that is read by\n      ada-tasks.c.  */\n-  std::unordered_map<long, int> m_cpu_map;\n+  std::unordered_map<ULONGEST, int> m_cpu_map;\n };\n \n /* Return true iff PTID corresponds to a ravenscar task.  */\n@@ -469,7 +469,8 @@ ravenscar_thread_target::pid_to_str (ptid_t ptid)\n   if (!is_ravenscar_task (ptid))\n     return beneath ()->pid_to_str (ptid);\n \n-  return string_printf (\"Ravenscar Thread %#x\", (int) ptid.tid ());\n+  return string_printf (\"Ravenscar Thread 0x%s\",\n+\t\t\tphex_nz (ptid.tid (), sizeof (ULONGEST)));\n }\n \n /* Temporarily set the ptid of a regcache to some other value.  When"
    },
    {
      "sha": "3ece443ad1891c23a9d3a8a63ea4be501d15eaf8",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=96bbe3ef9653e23a17b2315627e0cab441815f2d",
      "patch": "@@ -6907,8 +6907,9 @@ remote_target::remote_stop_ns (ptid_t ptid)\n \t    == resume_state::RESUMED_PENDING_VCONT)\n \t  {\n \t    remote_debug_printf (\"Enqueueing phony stop reply for thread pending \"\n-\t\t\t\t \"vCont-resume (%d, %ld, %ld)\", tp->ptid.pid(),\n-\t\t\t\t tp->ptid.lwp (), tp->ptid.tid ());\n+\t\t\t\t \"vCont-resume (%d, %ld, %s)\", tp->ptid.pid(),\n+\t\t\t\t tp->ptid.lwp (),\n+\t\t\t\t pulongest (tp->ptid.tid ()));\n \n \t    /* Check that the thread wasn't resumed with a signal.\n \t       Generating a phony stop would result in losing the"
    },
    {
      "sha": "988c6d50c5c9f3f7d8c314417fb45757f390ca69",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=96bbe3ef9653e23a17b2315627e0cab441815f2d",
      "patch": "@@ -286,8 +286,8 @@ target_pid_to_str (ptid_t ptid)\n   else if (ptid == null_ptid)\n     xsnprintf (buf, sizeof (buf), \"<null thread>\");\n   else if (ptid.tid () != 0)\n-    xsnprintf (buf, sizeof (buf), \"Thread %d.0x%lx\",\n-\t       ptid.pid (), ptid.tid ());\n+    xsnprintf (buf, sizeof (buf), \"Thread %d.0x%s\",\n+\t       ptid.pid (), phex_nz (ptid.tid (), sizeof (ULONGEST)));\n   else if (ptid.lwp () != 0)\n     xsnprintf (buf, sizeof (buf), \"LWP %d.%ld\",\n \t       ptid.pid (), ptid.lwp ());"
    },
    {
      "sha": "e51806626127098929bf7dceda3e8eaeb36b7925",
      "filename": "gdbsupport/ptid.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdbsupport/ptid.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdbsupport/ptid.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ptid.cc?ref=96bbe3ef9653e23a17b2315627e0cab441815f2d",
      "patch": "@@ -19,6 +19,7 @@\n \n #include \"common-defs.h\"\n #include \"ptid.h\"\n+#include \"print-utils.h\"\n \n /* See ptid.h for these.  */\n \n@@ -30,5 +31,5 @@ ptid_t const minus_one_ptid = ptid_t::make_minus_one ();\n std::string\n ptid_t::to_string () const\n {\n-  return string_printf (\"%d.%ld.%ld\", m_pid, m_lwp, m_tid);\n+  return string_printf (\"%d.%ld.%s\", m_pid, m_lwp, pulongest (m_tid));\n }"
    },
    {
      "sha": "7cdf468589dbbb9cadb89dfdf9c40caf06507da3",
      "filename": "gdbsupport/ptid.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdbsupport/ptid.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96bbe3ef9653e23a17b2315627e0cab441815f2d/gdbsupport/ptid.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ptid.h?ref=96bbe3ef9653e23a17b2315627e0cab441815f2d",
      "patch": "@@ -34,6 +34,7 @@\n \n #include <functional>\n #include <string>\n+#include \"gdbsupport/common-types.h\"\n \n class ptid_t\n {\n@@ -47,7 +48,7 @@ class ptid_t\n      A ptid with only a PID (LWP and TID equal to zero) is usually used to\n      represent a whole process, including all its lwps/threads.  */\n \n-  explicit constexpr ptid_t (int pid, long lwp = 0, long tid = 0)\n+  explicit constexpr ptid_t (int pid, long lwp = 0, ULONGEST tid = 0)\n     : m_pid (pid), m_lwp (lwp), m_tid (tid)\n   {}\n \n@@ -73,7 +74,7 @@ class ptid_t\n \n   /* Fetch the tid (thread id) component from a ptid.  */\n \n-  constexpr long tid () const\n+  constexpr ULONGEST tid () const\n   { return m_tid; }\n \n   /* Return true if the ptid represents a whole process, including all its\n@@ -149,7 +150,7 @@ class ptid_t\n   long m_lwp;\n \n   /* Thread id.  */\n-  long m_tid;\n+  ULONGEST m_tid;\n };\n \n /* Functor to hash a ptid.  */"
    }
  ]
}