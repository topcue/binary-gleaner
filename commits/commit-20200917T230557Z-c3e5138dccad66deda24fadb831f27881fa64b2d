{
  "sha": "c3e5138dccad66deda24fadb831f27881fa64b2d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzNlNTEzOGRjY2FkNjZkZWRhMjRmYWRiODMxZjI3ODgxZmE2NGIyZA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-17T22:33:41Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-17T23:05:57Z"
    },
    "message": "gdb.base/charset.{c,exp} C++ify\n\nAdjust gdb.base/charset.{c,exp} so that the testcase works when\ncompiled as a C++ program.\n\nwchar_t is built-in in C++, so don't make a phony typedef.\n\nThe \"print /d\" is so that we also get \"1\" instead of \"true\" in C++\nmode.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/charset.c [__cplusplus] (wchar_t, char16_t, char32_t):\n\tDon't define.\n\t(utf_32_string): Compile for both C and C++.\n\t* gdb.base/charset.exp: Use \"print /d\".",
    "tree": {
      "sha": "2c9f58ddd552e5ef582c4ae55bd322f02aab87bc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2c9f58ddd552e5ef582c4ae55bd322f02aab87bc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c3e5138dccad66deda24fadb831f27881fa64b2d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3e5138dccad66deda24fadb831f27881fa64b2d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c3e5138dccad66deda24fadb831f27881fa64b2d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3e5138dccad66deda24fadb831f27881fa64b2d/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "151fdbad7a4df43fb7e5b1ef2f84622aaaa2ddb5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/151fdbad7a4df43fb7e5b1ef2f84622aaaa2ddb5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/151fdbad7a4df43fb7e5b1ef2f84622aaaa2ddb5"
    }
  ],
  "stats": {
    "total": 26,
    "additions": 19,
    "deletions": 7
  },
  "files": [
    {
      "sha": "a7caa79a4a209ba2f2ff59af209ac42b8e6fabf1",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3e5138dccad66deda24fadb831f27881fa64b2d/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3e5138dccad66deda24fadb831f27881fa64b2d/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=c3e5138dccad66deda24fadb831f27881fa64b2d",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-17  Pedro Alves  <pedro@palves.net>\n+\n+\t* gdb.base/charset.c [__cplusplus] (wchar_t, char16_t, char32_t):\n+\tDon't define.\n+\t(utf_32_string): Compile for both C and C++.\n+\t* gdb.base/charset.exp: Use \"print /d\".\n+\n 2020-09-17  Pedro Alves  <pedro@palves.net>\n \n \t* gdb.base/watchpoint.c (buf): Make it 31 bytes."
    },
    {
      "sha": "b1e6d3add08a169421262077281bc5bb49339273",
      "filename": "gdb/testsuite/gdb.base/charset.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3e5138dccad66deda24fadb831f27881fa64b2d/gdb/testsuite/gdb.base/charset.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3e5138dccad66deda24fadb831f27881fa64b2d/gdb/testsuite/gdb.base/charset.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/charset.c?ref=c3e5138dccad66deda24fadb831f27881fa64b2d",
      "patch": "@@ -49,18 +49,23 @@ char iso_8859_1_string[NUM_CHARS];\n char ebcdic_us_string[NUM_CHARS];\n char ibm1047_string[NUM_CHARS];\n \n+#ifndef __cplusplus\n+\n /* We make a phony wchar_t and then pretend that this platform uses\n    UTF-32 (or UTF-16, depending on the size -- same difference for the\n    purposes of this test).  */\n typedef unsigned int wchar_t;\n-wchar_t utf_32_string[NUM_CHARS];\n \n /* We also define a couple phony types for testing the u'' and U''\n    support.  It is ok if these have the wrong size on some platforms\n    -- the test case will skip the tests in that case.  */\n typedef unsigned short char16_t;\n typedef unsigned int char32_t;\n \n+#endif\n+\n+wchar_t utf_32_string[NUM_CHARS];\n+\n /* Make sure to use the typedefs.  */\n char16_t uvar;\n char32_t Uvar;"
    },
    {
      "sha": "1a04f1daacd2bcb914be3e6d1191e09de6ef045f",
      "filename": "gdb/testsuite/gdb.base/charset.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3e5138dccad66deda24fadb831f27881fa64b2d/gdb/testsuite/gdb.base/charset.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3e5138dccad66deda24fadb831f27881fa64b2d/gdb/testsuite/gdb.base/charset.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/charset.exp?ref=c3e5138dccad66deda24fadb831f27881fa64b2d",
      "patch": "@@ -409,7 +409,7 @@ foreach target_charset $charset_subset {\n              \"parse character literal in ${target_charset}\"\n \n     # Check that the character literal was encoded correctly.\n-    gdb_test \"print $L'A' == $var_name\\[7\\]\" \\\n+    gdb_test \"print /d $L'A' == $var_name\\[7\\]\" \\\n              \" = 1\" \\\n              \"check value of parsed character literal in ${target_charset}\"\n \n@@ -419,7 +419,7 @@ foreach target_charset $charset_subset {\n              \"parse string literal in ${target_charset}\"\n \n     # Check that the string literal was encoded correctly.\n-    gdb_test \"print $L\\\"q\\\"\\[0\\] == $var_name\\[49\\]\" \\\n+    gdb_test \"print /d $L\\\"q\\\"\\[0\\] == $var_name\\[49\\]\" \\\n              \" = 1\" \\\n              \"check value of parsed string literal in ${target_charset}\"\n \n@@ -470,12 +470,12 @@ foreach target_charset $charset_subset {\n         if {$have_escape} {\n \n             # Try parsing a backslash escape in a character literal.\n-            gdb_test \"print $L'\\\\${escape}' == $var_name\\[$i\\]\" \\\n+            gdb_test \"print /d $L'\\\\${escape}' == $var_name\\[$i\\]\" \\\n                      \" = 1\" \\\n                      \"check value of '\\\\${escape}' in ${target_charset}\"\n \n             # Try parsing a backslash escape in a string literal.\n-            gdb_test \"print $L\\\"\\\\${escape}\\\"\\[0\\] == $var_name\\[$i\\]\" \\\n+            gdb_test \"print /d $L\\\"\\\\${escape}\\\"\\[0\\] == $var_name\\[$i\\]\" \\\n                      \" = 1\" \\\n                      \"check value of \\\"\\\\${escape}\\\" in ${target_charset}\"\n         }\n@@ -485,7 +485,7 @@ foreach target_charset $charset_subset {\n     # get the unescaped character, in the target character set.\n     gdb_test \"print $L'\\\\q'\" \" = \\[0-9-\\]+ $L'q'\" \\\n              \"print escape that doesn't exist in $target_charset\"\n-    gdb_test \"print $L'\\\\q' == $var_name\\[49\\]\" \" = 1\" \\\n+    gdb_test \"print /d $L'\\\\q' == $var_name\\[49\\]\" \" = 1\" \\\n              \"check value of escape that doesn't exist in $target_charset\"\n }\n \n@@ -585,7 +585,7 @@ if {$ucs2_ok} {\n }\n \n # Regression test for a cleanup bug in the charset code.\n-gdb_test \"print 'a' == 'a' || 'b' == 'b'\" \\\n+gdb_test \"print /d 'a' == 'a' || 'b' == 'b'\" \\\n   \".* = 1\" \\\n   \"EVAL_SKIP cleanup handling regression test\"\n "
    }
  ]
}