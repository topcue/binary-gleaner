{
  "sha": "4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDYwMTgxOGU4YzA2YmI4YTViZjRiNjNmYTUyN2M2OWQzZjgxYzZmMA==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-06-19T20:33:13Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-24T17:53:56Z"
    },
    "message": "AArch64: Implement memory tagging target methods for AArch64\n\nThe patch implements the memory tagging target hooks for AArch64, so we\ncan handle MTE.\n\ngdb/ChangeLog:\n\n2021-03-24  Luis Machado  <luis.machado@linaro.org>\n\n\t* Makefile.in (ALL_64_TARGET_OBS): Add arch/aarch64-mte-linux.o.\n\t(HFILES_NO_SRCDIR): Add arch/aarch64-mte-linux.h and\n\tnat/aarch64-mte-linux-ptrace.h.\n\t* aarch64-linux-nat.c: Include nat/aarch64-mte-linux-ptrace.h.\n\t(aarch64_linux_nat_target) <supports_memory_tagging>: New method\n\toverride.\n\t<fetch_memtags>: New method override.\n\t<store_memtags>: New method override.\n\t(aarch64_linux_nat_target::supports_memory_tagging): New method.\n\t(aarch64_linux_nat_target::fetch_memtags): New method.\n\t(aarch64_linux_nat_target::store_memtags): New method.\n\t* arch/aarch64-mte-linux.c: New file.\n\t* arch/aarch64-mte-linux.h: Include gdbsupport/common-defs.h.\n\t(AARCH64_MTE_GRANULE_SIZE): Define.\n\t(aarch64_memtag_type): New enum.\n\t(aarch64_mte_get_tag_granules): New prototype.\n\t* configure.nat (NATDEPFILES): Add nat/aarch64-mte-linux-ptrace.o.\n\t* configure.tgt (aarch64*-*-linux*): Add arch/aarch64-mte-linux.o.\n\t* nat/aarch64-mte-linux-ptrace.c: New file.\n\t* nat/aarch64-mte-linux-ptrace.h: New file.",
    "tree": {
      "sha": "a8650e0d1beb52fdf709a0198be63a61d29f4b49",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a8650e0d1beb52fdf709a0198be63a61d29f4b49"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3f3bd8b8c14d844533b70b25c7f1a8cbdbac2639",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f3bd8b8c14d844533b70b25c7f1a8cbdbac2639",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3f3bd8b8c14d844533b70b25c7f1a8cbdbac2639"
    }
  ],
  "stats": {
    "total": 362,
    "additions": 361,
    "deletions": 1
  },
  "files": [
    {
      "sha": "2302c21136778d221ec5fae179f8a93dd834e552",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
      "patch": "@@ -1,3 +1,26 @@\n+2021-03-24  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* Makefile.in (ALL_64_TARGET_OBS): Add arch/aarch64-mte-linux.o.\n+\t(HFILES_NO_SRCDIR): Add arch/aarch64-mte-linux.h and\n+\tnat/aarch64-mte-linux-ptrace.h.\n+\t* aarch64-linux-nat.c: Include nat/aarch64-mte-linux-ptrace.h.\n+\t(aarch64_linux_nat_target) <supports_memory_tagging>: New method\n+\toverride.\n+\t<fetch_memtags>: New method override.\n+\t<store_memtags>: New method override.\n+\t(aarch64_linux_nat_target::supports_memory_tagging): New method.\n+\t(aarch64_linux_nat_target::fetch_memtags): New method.\n+\t(aarch64_linux_nat_target::store_memtags): New method.\n+\t* arch/aarch64-mte-linux.c: New file.\n+\t* arch/aarch64-mte-linux.h: Include gdbsupport/common-defs.h.\n+\t(AARCH64_MTE_GRANULE_SIZE): Define.\n+\t(aarch64_memtag_type): New enum.\n+\t(aarch64_mte_get_tag_granules): New prototype.\n+\t* configure.nat (NATDEPFILES): Add nat/aarch64-mte-linux-ptrace.o.\n+\t* configure.tgt (aarch64*-*-linux*): Add arch/aarch64-mte-linux.o.\n+\t* nat/aarch64-mte-linux-ptrace.c: New file.\n+\t* nat/aarch64-mte-linux-ptrace.h: New file.\n+\n 2021-03-24  Luis Machado  <luis.machado@linaro.org>\n \n \t* Makefile.in (HFILES_NO_SRCDIR): Add nat/aarch64-mte-linux-ptrace.h."
    },
    {
      "sha": "3318c1a52158ca5082b4d21ad80343544c7cb576",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
      "patch": "@@ -699,6 +699,7 @@ ALL_64_TARGET_OBS = \\\n \tamd64-windows-tdep.o \\\n \tarch/aarch64.o \\\n \tarch/aarch64-insn.o \\\n+\tarch/aarch64-mte-linux.o \\\n \tarch/amd64.o \\\n \tia64-linux-tdep.o \\\n \tia64-tdep.o \\"
    },
    {
      "sha": "ae8db2988c2b8b5eb9d59631448b4348facdbe0f",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
      "patch": "@@ -52,6 +52,8 @@\n \n #include \"arch/aarch64-mte-linux.h\"\n \n+#include \"nat/aarch64-mte-linux-ptrace.h\"\n+\n #ifndef TRAP_HWBKPT\n #define TRAP_HWBKPT 0x0004\n #endif\n@@ -102,6 +104,16 @@ class aarch64_linux_nat_target final : public linux_nat_target\n     override;\n \n   struct gdbarch *thread_architecture (ptid_t) override;\n+\n+  bool supports_memory_tagging () override;\n+\n+  /* Read memory allocation tags from memory via PTRACE.  */\n+  bool fetch_memtags (CORE_ADDR address, size_t len,\n+\t\t      gdb::byte_vector &tags, int type) override;\n+\n+  /* Write allocation tags to memory via PTRACE.  */\n+  bool store_memtags (CORE_ADDR address, size_t len,\n+\t\t      const gdb::byte_vector &tags, int type) override;\n };\n \n static aarch64_linux_nat_target the_aarch64_linux_nat_target;\n@@ -1054,6 +1066,44 @@ aarch64_linux_nat_target::thread_architecture (ptid_t ptid)\n   return gdbarch_find_by_info (info);\n }\n \n+/* Implement the \"supports_memory_tagging\" target_ops method.  */\n+\n+bool\n+aarch64_linux_nat_target::supports_memory_tagging ()\n+{\n+  return (linux_get_hwcap2 (this) & HWCAP2_MTE) != 0;\n+}\n+\n+/* Implement the \"fetch_memtags\" target_ops method.  */\n+\n+bool\n+aarch64_linux_nat_target::fetch_memtags (CORE_ADDR address, size_t len,\n+\t\t\t\t\t gdb::byte_vector &tags, int type)\n+{\n+  int tid = get_ptrace_pid (inferior_ptid);\n+\n+  /* Allocation tags?  */\n+  if (type == static_cast<int> (aarch64_memtag_type::mte_allocation))\n+    return aarch64_mte_fetch_memtags (tid, address, len, tags);\n+\n+  return false;\n+}\n+\n+/* Implement the \"store_memtags\" target_ops method.  */\n+\n+bool\n+aarch64_linux_nat_target::store_memtags (CORE_ADDR address, size_t len,\n+\t\t\t\t\t const gdb::byte_vector &tags, int type)\n+{\n+  int tid = get_ptrace_pid (inferior_ptid);\n+\n+  /* Allocation tags?  */\n+  if (type == static_cast<int> (aarch64_memtag_type::mte_allocation))\n+    return aarch64_mte_store_memtags (tid, address, len, tags);\n+\n+  return false;\n+}\n+\n /* Define AArch64 maintenance commands.  */\n \n static void"
    },
    {
      "sha": "3d72b8db308ac6547471d9200fcdd3823f19e42c",
      "filename": "gdb/arch/aarch64-mte-linux.c",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/arch/aarch64-mte-linux.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/arch/aarch64-mte-linux.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64-mte-linux.c?ref=4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
      "patch": "@@ -0,0 +1,38 @@\n+/* Common Linux target-dependent functionality for AArch64 MTE\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"arch/aarch64-mte-linux.h\"\n+\n+/* See arch/aarch64-mte-linux.h */\n+\n+size_t\n+aarch64_mte_get_tag_granules (CORE_ADDR addr, size_t len, size_t granule_size)\n+{\n+  /* An empty range has 0 tag granules.  */\n+  if (len == 0)\n+    return 0;\n+\n+  /* Start address */\n+  CORE_ADDR s_addr = align_down (addr, granule_size);\n+  /* End address */\n+  CORE_ADDR e_addr = align_down (addr + len, granule_size);\n+\n+  /* We always have at least 1 granule.  */\n+  return 1 + (e_addr - s_addr) / granule_size;\n+}"
    },
    {
      "sha": "88bd8d03cfbd0300aaca32fe714c3ef7dfc07869",
      "filename": "gdb/arch/aarch64-mte-linux.h",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/arch/aarch64-mte-linux.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/arch/aarch64-mte-linux.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64-mte-linux.h?ref=4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
      "patch": "@@ -20,6 +20,8 @@\n #ifndef ARCH_AARCH64_LINUX_H\n #define ARCH_AARCH64_LINUX_H\n \n+#include \"gdbsupport/common-defs.h\"\n+\n /* Feature check for Memory Tagging Extension.  */\n #ifndef HWCAP2_MTE\n #define HWCAP2_MTE  (1 << 18)\n@@ -28,4 +30,21 @@\n /* The MTE regset consists of a single 64-bit register.  */\n #define AARCH64_LINUX_SIZEOF_MTE 8\n \n+/* We have one tag per 16 bytes of memory.  */\n+#define AARCH64_MTE_GRANULE_SIZE 16\n+\n+/* Memory tag types for AArch64.  */\n+enum class aarch64_memtag_type\n+{\n+  /* MTE logical tag contained in pointers.  */\n+  mte_logical = 0,\n+  /* MTE allocation tag stored in memory tag granules.  */\n+  mte_allocation\n+};\n+\n+/* Return the number of tag granules in the memory range\n+   [ADDR, ADDR + LEN) given GRANULE_SIZE.  */\n+extern size_t aarch64_mte_get_tag_granules (CORE_ADDR addr, size_t len,\n+\t\t\t\t\t    size_t granule_size);\n+\n #endif /* ARCH_AARCH64_LINUX_H */"
    },
    {
      "sha": "e34cccffd98b14ee1ccafe97f7f788a9b2760572",
      "filename": "gdb/configure.nat",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/configure.nat",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/configure.nat",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.nat?ref=4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
      "patch": "@@ -236,7 +236,8 @@ case ${gdb_host} in\n \t\tNATDEPFILES=\"${NATDEPFILES} aarch64-linux-nat.o \\\n \t\taarch32-linux-nat.o nat/aarch64-linux-hw-point.o \\\n \t\tnat/aarch64-linux.o \\\n-\t\tnat/aarch64-sve-linux-ptrace.o\"\n+\t\tnat/aarch64-sve-linux-ptrace.o \\\n+\t\tnat/aarch64-mte-linux-ptrace.o\"\n \t\t;;\n \t    arc)\n \t\t# Host: ARC based machine running GNU/Linux"
    },
    {
      "sha": "3519e9c2f3bcf7bfa7f41b84ef1c88b86c5eb834",
      "filename": "gdb/configure.tgt",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.tgt?ref=4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
      "patch": "@@ -125,6 +125,7 @@ aarch64*-*-freebsd*)\n aarch64*-*-linux*)\n \t# Target: AArch64 linux\n \tgdb_target_obs=\"aarch64-linux-tdep.o arch/aarch64.o\\\n+\t\t\tarch/aarch64-mte-linux.o \\\n \t\t\tarch/arm.o arch/arm-linux.o arch/arm-get-next-pcs.o \\\n \t\t\tarm-tdep.o arm-linux-tdep.o \\\n \t\t\tglibc-tdep.o linux-tdep.o solib-svr4.o \\"
    },
    {
      "sha": "47f4ab68d1b69c3272b3d1e8ee16e729cbbe6d4b",
      "filename": "gdb/nat/aarch64-mte-linux-ptrace.c",
      "status": "added",
      "additions": 210,
      "deletions": 0,
      "changes": 210,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/nat/aarch64-mte-linux-ptrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/nat/aarch64-mte-linux-ptrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/aarch64-mte-linux-ptrace.c?ref=4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
      "patch": "@@ -0,0 +1,210 @@\n+/* Common Linux native ptrace code for AArch64 MTE.\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"gdbsupport/common-defs.h\"\n+#include \"gdbsupport/byte-vector.h\"\n+\n+#include \"arch/aarch64.h\"\n+#include \"arch/aarch64-mte-linux.h\"\n+#include \"nat/aarch64-linux.h\"\n+#include \"nat/aarch64-mte-linux-ptrace.h\"\n+\n+#include \"linux-ptrace.h\"\n+#include <sys/uio.h>\n+\n+/* Helper function to display various possible errors when reading\n+   MTE tags.  */\n+\n+static void ATTRIBUTE_NORETURN\n+aarch64_mte_linux_peek_error (int error)\n+{\n+  switch (error)\n+    {\n+    case EIO:\n+      perror_with_name (_(\"PEEKMTETAGS not supported\"));\n+      break;\n+    case EFAULT:\n+      perror_with_name (_(\"Couldn't fetch allocation tags\"));\n+      break;\n+    case EOPNOTSUPP:\n+      perror_with_name (_(\"PROT_ME not enabled for requested address\"));\n+    default:\n+      perror_with_name (_(\"Unknown MTE error\"));\n+      break;\n+    }\n+}\n+\n+/* Helper function to display various possible errors when writing\n+   MTE tags.  */\n+\n+static void ATTRIBUTE_NORETURN\n+aarch64_mte_linux_poke_error (int error)\n+{\n+  switch (error)\n+    {\n+    case EIO:\n+      perror_with_name (_(\"POKEMTETAGS not supported\"));\n+      break;\n+    case EFAULT:\n+      perror_with_name (_(\"Couldn't store allocation tags\"));\n+      break;\n+    case EOPNOTSUPP:\n+      perror_with_name (_(\"PROT_ME not enabled for requested address\"));\n+    default:\n+      perror_with_name (_(\"Unknown MTE error\"));\n+      break;\n+    }\n+}\n+\n+/* Helper to prepare a vector of tags to be passed on to the kernel.  The\n+   main purpose of this function is to optimize the number of calls to\n+   ptrace if we're writing too many tags at once, like a pattern fill\n+   request.\n+\n+   Return a vector of tags of up to MAX_SIZE size, containing the tags that\n+   must be passed on to the kernel, extracted from TAGS, starting at POS.\n+   GRANULES is the number of tag granules to be modified.  */\n+\n+static gdb::byte_vector\n+prepare_tag_vector (size_t granules, const gdb::byte_vector &tags, size_t pos,\n+\t\t    size_t max_size)\n+{\n+  gdb::byte_vector t;\n+\n+  if (granules == 0)\n+    return t;\n+\n+  gdb_assert (tags.size () > 0 && max_size > 0);\n+\n+  if (granules > AARCH64_MTE_TAGS_MAX_SIZE)\n+    t.resize (AARCH64_MTE_TAGS_MAX_SIZE);\n+  else\n+    t.resize (granules);\n+\n+  size_t tag_count = tags.size ();\n+\n+  for (size_t i = 0; i < t.size (); i++)\n+    t[i] = tags[(pos + i) % tag_count];\n+\n+  return t;\n+}\n+\n+/* See nat/aarch64-mte-linux-ptrace.h */\n+\n+bool\n+aarch64_mte_fetch_memtags (int tid, CORE_ADDR address, size_t len,\n+\t\t\t   gdb::byte_vector &tags)\n+{\n+  size_t ntags = aarch64_mte_get_tag_granules (address, len,\n+\t\t\t\t\t       AARCH64_MTE_GRANULE_SIZE);\n+\n+  /* If the memory range contains no tags, nothing left to do.  */\n+  if (ntags == 0)\n+    return true;\n+\n+  gdb_byte tagbuf[ntags];\n+\n+  struct iovec iovec;\n+  iovec.iov_base = tagbuf;\n+  iovec.iov_len = ntags;\n+\n+  tags.clear ();\n+  bool done_reading = false;\n+\n+  /* The kernel may return less tags than we requested.  Loop until we've read\n+     all the requested tags or until we get an error.  */\n+  while (!done_reading)\n+    {\n+      /* Attempt to read ntags allocation tags from the kernel.  */\n+      if (ptrace (PTRACE_PEEKMTETAGS, tid, address, &iovec) < 0)\n+\taarch64_mte_linux_peek_error (errno);\n+\n+      /* Make sure the kernel returned at least one tag.  */\n+      if (iovec.iov_len <= 0)\n+\t{\n+\t  tags.clear ();\n+\t  return false;\n+\t}\n+\n+      /* Copy the tags the kernel returned.  */\n+      for (size_t i = 0; i < iovec.iov_len; i++)\n+\ttags.push_back (tagbuf[i]);\n+\n+      /* Are we done reading tags?  */\n+      if (tags.size () == ntags)\n+\tdone_reading = true;\n+      else\n+\t{\n+\t  address += iovec.iov_len * AARCH64_MTE_GRANULE_SIZE;\n+\t  iovec.iov_len = ntags - iovec.iov_len;\n+\t}\n+    }\n+  return true;\n+}\n+\n+/* See nat/aarch64-mte-linux-ptrace.h */\n+\n+bool\n+aarch64_mte_store_memtags (int tid, CORE_ADDR address, size_t len,\n+\t\t\t   const gdb::byte_vector &tags)\n+{\n+  if (tags.size () == 0)\n+    return true;\n+\n+  /* Get the number of tags we need to write.  */\n+  size_t ntags = aarch64_mte_get_tag_granules (address, len,\n+\t\t\t\t\t       AARCH64_MTE_GRANULE_SIZE);\n+\n+  /* If the memory range contains no tags, nothing left to do.  */\n+  if (ntags == 0)\n+    return true;\n+\n+  bool done_writing = false;\n+  size_t tags_written = 0;\n+\n+  /* Write all the tags, AARCH64_MTE_TAGS_MAX_SIZE blocks at a time.  */\n+  while (!done_writing)\n+    {\n+      gdb::byte_vector t = prepare_tag_vector (ntags - tags_written, tags,\n+\t\t\t\t\t       tags_written,\n+\t\t\t\t\t       AARCH64_MTE_TAGS_MAX_SIZE);\n+\n+      struct iovec iovec;\n+      iovec.iov_base = t.data ();\n+      iovec.iov_len = t.size ();\n+\n+      /* Request the kernel to update the allocation tags.  */\n+      if (ptrace (PTRACE_POKEMTETAGS, tid, address, &iovec) < 0)\n+\taarch64_mte_linux_poke_error (errno);\n+\n+      /* Make sure the kernel wrote at least one tag.  */\n+      if (iovec.iov_len <= 0)\n+\treturn false;\n+\n+      tags_written += iovec.iov_len;\n+\n+      /* Are we done writing tags?  */\n+      if (tags_written == ntags)\n+\tdone_writing = true;\n+      else\n+\taddress += iovec.iov_len * AARCH64_MTE_GRANULE_SIZE;\n+    }\n+\n+  return true;\n+}"
    },
    {
      "sha": "f8c203bc05e5fef4d409dc27fd707838e7c7e4c4",
      "filename": "gdb/nat/aarch64-mte-linux-ptrace.h",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/nat/aarch64-mte-linux-ptrace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0/gdb/nat/aarch64-mte-linux-ptrace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/aarch64-mte-linux-ptrace.h?ref=4601818e8c06bb8a5bf4b63fa527c69d3f81c6f0",
      "patch": "@@ -30,4 +30,21 @@\n #define PTRACE_POKEMTETAGS\t  34\n #endif\n \n+/* Maximum number of tags to pass at once to the kernel.  */\n+#define AARCH64_MTE_TAGS_MAX_SIZE 4096\n+\n+/* Read the allocation tags from memory range [ADDRESS, ADDRESS + LEN)\n+   into TAGS.\n+\n+   Returns true if successful and false otherwise.  */\n+extern bool aarch64_mte_fetch_memtags (int tid, CORE_ADDR address, size_t len,\n+\t\t\t\t       gdb::byte_vector &tags);\n+\n+/* Write the allocation tags contained in TAGS into the memory range\n+   [ADDRESS, ADDRESS + LEN).\n+\n+   Returns true if successful and false otherwise.  */\n+extern bool aarch64_mte_store_memtags (int tid, CORE_ADDR address, size_t len,\n+\t\t\t\t       const gdb::byte_vector &tags);\n+\n #endif /* NAT_AARCH64_MTE_LINUX_PTRACE_H */"
    }
  ]
}