{
  "sha": "fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmJmYjBhNDYzZmM3ZGU4OGEyZGE4ODU4YWM1Y2Q2YzJmNDc5NjUxNA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-05-14T17:41:39Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-02T12:53:11Z"
    },
    "message": "gdb: Convert language la_print_type field to a method\n\nThis commit changes the language_data::la_print_type function pointer\nmember variable into a member function of language_defn.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_language_data): Delete la_print_type\n\tinitializer.\n\t(ada_language::print_type): New member function.\n\t* c-lang.c (c_language_data): Delete la_print_type initializer.\n\t(c_language::print_type): New member function.\n\t(cplus_language_data): Delete la_print_type initializer.\n\t(cplus_language::print_type): New member function.\n\t(asm_language_data): Delete la_print_type initializer.\n\t(asm_language::print_type): New member function.\n\t(minimal_language_data): Delete la_print_type initializer.\n\t(minimal_language::print_type): New member function.\n\t* d-lang.c (d_language_data): Delete la_print_type initializer.\n\t(d_language::print_type): New member function.\n\t* f-lang.c (f_language_data): Delete la_print_type initializer.\n\t(f_language::print_type): New member function.\n\t* go-lang.c (go_language_data): Delete la_print_type initializer.\n\t(go_language::print_type): New member function.\n\t* language.c (unk_lang_print_type): Delete.\n\t(unknown_language_data): Delete la_print_type initializer.\n\t(unknown_language::print_type): New member function.\n\t(auto_language_data): Delete la_print_type initializer.\n\t(auto_language::print_type): New member function.\n\t* language.h (language_data): Delete la_print_type field.\n\t(language_defn::print_type): New function.\n\t(LA_PRINT_TYPE): Update.\n\t* m2-lang.c (m2_language_data): Delete la_print_type initializer.\n\t(m2_language::print_type): New member function.\n\t* objc-lang.c (objc_language_data): Delete la_print_type\n\tinitializer.\n\t(objc_language::print_type): New member function.\n\t* opencl-lang.c (opencl_print_type): Delete, implementation moved\n\tto opencl_language::print_type.\n\t(opencl_language_data): Delete la_print_type initializer.\n\t(opencl_language::print_type): New member function, implementation\n\tfrom opencl_print_type.\n\t* p-lang.c (pascal_language_data): Delete la_print_type\n\tinitializer.\n\t(pascal_language::print_type): New member function.\n\t* rust-lang.c (rust_print_type): Delete, implementation moved to\n\trust_language::print_type.\n\t(rust_language_data): Delete la_print_type initializer.\n\t(rust_language::print_type): New member function, implementation\n\tfrom rust_print_type.",
    "tree": {
      "sha": "9a451ad9b5d2edfe0cb960839ba1cee9c015dcf2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9a451ad9b5d2edfe0cb960839ba1cee9c015dcf2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6f8270197a2909607f2c076018e30677bbac652e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f8270197a2909607f2c076018e30677bbac652e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6f8270197a2909607f2c076018e30677bbac652e"
    }
  ],
  "stats": {
    "total": 261,
    "additions": 200,
    "deletions": 61
  },
  "files": [
    {
      "sha": "bf690af9c4325fc8196acc98591bbac1b8c438fa",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -1,3 +1,49 @@\n+2020-06-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_language_data): Delete la_print_type\n+\tinitializer.\n+\t(ada_language::print_type): New member function.\n+\t* c-lang.c (c_language_data): Delete la_print_type initializer.\n+\t(c_language::print_type): New member function.\n+\t(cplus_language_data): Delete la_print_type initializer.\n+\t(cplus_language::print_type): New member function.\n+\t(asm_language_data): Delete la_print_type initializer.\n+\t(asm_language::print_type): New member function.\n+\t(minimal_language_data): Delete la_print_type initializer.\n+\t(minimal_language::print_type): New member function.\n+\t* d-lang.c (d_language_data): Delete la_print_type initializer.\n+\t(d_language::print_type): New member function.\n+\t* f-lang.c (f_language_data): Delete la_print_type initializer.\n+\t(f_language::print_type): New member function.\n+\t* go-lang.c (go_language_data): Delete la_print_type initializer.\n+\t(go_language::print_type): New member function.\n+\t* language.c (unk_lang_print_type): Delete.\n+\t(unknown_language_data): Delete la_print_type initializer.\n+\t(unknown_language::print_type): New member function.\n+\t(auto_language_data): Delete la_print_type initializer.\n+\t(auto_language::print_type): New member function.\n+\t* language.h (language_data): Delete la_print_type field.\n+\t(language_defn::print_type): New function.\n+\t(LA_PRINT_TYPE): Update.\n+\t* m2-lang.c (m2_language_data): Delete la_print_type initializer.\n+\t(m2_language::print_type): New member function.\n+\t* objc-lang.c (objc_language_data): Delete la_print_type\n+\tinitializer.\n+\t(objc_language::print_type): New member function.\n+\t* opencl-lang.c (opencl_print_type): Delete, implementation moved\n+\tto opencl_language::print_type.\n+\t(opencl_language_data): Delete la_print_type initializer.\n+\t(opencl_language::print_type): New member function, implementation\n+\tfrom opencl_print_type.\n+\t* p-lang.c (pascal_language_data): Delete la_print_type\n+\tinitializer.\n+\t(pascal_language::print_type): New member function.\n+\t* rust-lang.c (rust_print_type): Delete, implementation moved to\n+\trust_language::print_type.\n+\t(rust_language_data): Delete la_print_type initializer.\n+\t(rust_language::print_type): New member function, implementation\n+\tfrom rust_print_type.\n+\n 2020-06-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_sniff_from_mangled_name): Delete function,"
    },
    {
      "sha": "f84f02f897dc2817b49ff9d77f8b66fc0bf7b325",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -13919,7 +13919,6 @@ extern const struct language_data ada_language_data =\n   ada_printchar,                /* Print a character constant */\n   ada_printstr,                 /* Function to print string constant */\n   emit_char,                    /* Function to print single char (not used) */\n-  ada_print_type,               /* Print a type using appropriate syntax */\n   ada_print_typedef,            /* Print a typedef using appropriate syntax */\n   ada_value_print_inner,\t/* la_value_print_inner */\n   ada_value_print,              /* Print a top-level value */\n@@ -14106,6 +14105,15 @@ class ada_language : public language_defn\n \n     return false;\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    ada_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* Single instance of the Ada language class.  */"
    },
    {
      "sha": "abcdc52886705154a426996eaac171d95fcf26fd",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 36,
      "deletions": 4,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -905,7 +905,6 @@ extern const struct language_data c_language_data =\n   c_printchar,\t\t\t/* Print a character constant */\n   c_printstr,\t\t\t/* Function to print string constant */\n   c_emit_char,\t\t\t/* Print a single char */\n-  c_print_type,\t\t\t/* Print a type using appropriate syntax */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n@@ -950,6 +949,15 @@ class c_language : public language_defn\n   {\n     return c_get_compile_context ();\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    c_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* Single instance of the C language class.  */\n@@ -1007,7 +1015,6 @@ extern const struct language_data cplus_language_data =\n   c_printchar,\t\t\t/* Print a character constant */\n   c_printstr,\t\t\t/* Function to print string constant */\n   c_emit_char,\t\t\t/* Print a single char */\n-  c_print_type,\t\t\t/* Print a type using appropriate syntax */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n@@ -1136,6 +1143,15 @@ class cplus_language : public language_defn\n     *demangled = gdb_demangle (mangled, DMGL_PARAMS | DMGL_ANSI);\n     return *demangled != NULL;\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    c_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* The single instance of the C++ language class.  */\n@@ -1165,7 +1181,6 @@ extern const struct language_data asm_language_data =\n   c_printchar,\t\t\t/* Print a character constant */\n   c_printstr,\t\t\t/* Function to print string constant */\n   c_emit_char,\t\t\t/* Print a single char */\n-  c_print_type,\t\t\t/* Print a type using appropriate syntax */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n@@ -1206,6 +1221,15 @@ class asm_language : public language_defn\n   {\n     c_language_arch_info (gdbarch, lai);\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    c_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* The single instance of the ASM language class.  */\n@@ -1232,7 +1256,6 @@ extern const struct language_data minimal_language_data =\n   c_printchar,\t\t\t/* Print a character constant */\n   c_printstr,\t\t\t/* Function to print string constant */\n   c_emit_char,\t\t\t/* Print a single char */\n-  c_print_type,\t\t\t/* Print a type using appropriate syntax */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n@@ -1271,6 +1294,15 @@ class minimal_language : public language_defn\n   {\n     c_language_arch_info (gdbarch, lai);\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    c_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* The single instance of the minimal language class.  */"
    },
    {
      "sha": "815b59734e0dff62709e7b9379cb29df88edd754",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -147,7 +147,6 @@ extern const struct language_data d_language_data =\n   c_printchar,\t\t\t/* Print a character constant.  */\n   c_printstr,\t\t\t/* Function to print string constant.  */\n   c_emit_char,\t\t\t/* Print a single char.  */\n-  c_print_type,\t\t\t/* Print a type using appropriate syntax.  */\n   c_print_typedef,\t\t/* Print a typedef using appropriate\n \t\t\t\t   syntax.  */\n   d_value_print_inner,\t\t/* la_value_print_inner */\n@@ -252,6 +251,15 @@ class d_language : public language_defn\n     *demangled = d_demangle (mangled, 0);\n     return *demangled != NULL;\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    c_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* Single instance of the D language class.  */"
    },
    {
      "sha": "1b0fec68c0ef50c67624490aecacd3f3ec03bb67",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -608,7 +608,6 @@ extern const struct language_data f_language_data =\n   f_printchar,\t\t\t/* Print character constant */\n   f_printstr,\t\t\t/* function to print string constant */\n   f_emit_char,\t\t\t/* Function to print a single character */\n-  f_print_type,\t\t\t/* Print a type using appropriate syntax */\n   f_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   f_value_print_innner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* FIXME */\n@@ -690,6 +689,15 @@ class f_language : public language_defn\n   {\n     return cp_search_name_hash (name);\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    f_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* Single instance of the Fortran language class.  */"
    },
    {
      "sha": "1ec53474cf005f9181e91930aa15c5ad3ad93bed",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -532,7 +532,6 @@ extern const struct language_data go_language_data =\n   c_printchar,\t\t\t/* Print a character constant.  */\n   c_printstr,\t\t\t/* Function to print string constant.  */\n   c_emit_char,\t\t\t/* Print a single char.  */\n-  go_print_type,\t\t/* Print a type using appropriate syntax.  */\n   c_print_typedef,\t\t/* Print a typedef using appropriate\n \t\t\t\t   syntax.  */\n   go_value_print_inner,\t\t/* la_value_print_inner */\n@@ -626,6 +625,15 @@ class go_language : public language_defn\n     *demangled = go_demangle (mangled, 0);\n     return *demangled != NULL;\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    go_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* Single instance of the Go language class.  */"
    },
    {
      "sha": "c8f0349901bd897cc223e32c946a0813973f8bcb",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 18,
      "deletions": 11,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -727,15 +727,6 @@ unk_lang_printstr (struct ui_file *stream, struct type *type,\n \t   \"function unk_lang_printstr called.\"));\n }\n \n-static void\n-unk_lang_print_type (struct type *type, const char *varstring,\n-\t\t     struct ui_file *stream, int show, int level,\n-\t\t     const struct type_print_options *flags)\n-{\n-  error (_(\"internal error - unimplemented \"\n-\t   \"function unk_lang_print_type called.\"));\n-}\n-\n static void\n unk_lang_value_print_inner (struct value *val,\n \t\t\t    struct ui_file *stream, int recurse,\n@@ -802,7 +793,6 @@ extern const struct language_data unknown_language_data =\n   unk_lang_printchar,\t\t/* Print character constant */\n   unk_lang_printstr,\n   unk_lang_emit_char,\n-  unk_lang_print_type,\t\t/* Print a type using appropriate syntax */\n   default_print_typedef,\t/* Print a typedef using appropriate syntax */\n   unk_lang_value_print_inner,\t/* la_value_print_inner */\n   unk_lang_value_print,\t\t/* Print a top-level value */\n@@ -841,6 +831,15 @@ class unknown_language : public language_defn\n   {\n     unknown_language_arch_info (gdbarch, lai);\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    error (_(\"unimplemented unknown_language::print_type called\"));\n+  }\n };\n \n /* Single instance of the unknown language class.  */\n@@ -865,7 +864,6 @@ extern const struct language_data auto_language_data =\n   unk_lang_printchar,\t\t/* Print character constant */\n   unk_lang_printstr,\n   unk_lang_emit_char,\n-  unk_lang_print_type,\t\t/* Print a type using appropriate syntax */\n   default_print_typedef,\t/* Print a typedef using appropriate syntax */\n   unk_lang_value_print_inner,\t/* la_value_print_inner */\n   unk_lang_value_print,\t\t/* Print a top-level value */\n@@ -904,6 +902,15 @@ class auto_language : public language_defn\n   {\n     unknown_language_arch_info (gdbarch, lai);\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    error (_(\"unimplemented auto_language::print_type called\"));\n+  }\n };\n \n /* Single instance of the fake \"auto\" language.  */"
    },
    {
      "sha": "8defe9590159ab8794f36f108b5110412fb00abd",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -248,11 +248,6 @@ struct language_data\n     void (*la_emitchar) (int ch, struct type *chtype,\n \t\t\t struct ui_file * stream, int quoter);\n \n-    /* Print a type using syntax appropriate for this language.  */\n-\n-    void (*la_print_type) (struct type *, const char *, struct ui_file *, int,\n-\t\t\t   int, const struct type_print_options *);\n-\n     /* Print a typedef using syntax appropriate for this language.\n        TYPE is the underlying type.  NEW_SYMBOL is the symbol naming\n        the type.  STREAM is the output stream on which to print.  */\n@@ -517,6 +512,11 @@ struct language_defn : language_data\n     return false;\n   }\n \n+  /* Print a type using syntax appropriate for this language.  */\n+\n+  virtual void print_type (struct type *, const char *, struct ui_file *, int,\n+\t\t\t   int, const struct type_print_options *) const = 0;\n+\n   /* List of all known languages.  */\n   static const struct language_defn *languages[nr_languages];\n };\n@@ -605,7 +605,7 @@ extern enum language set_language (enum language);\n    with the \"set language\" command.  */\n \n #define LA_PRINT_TYPE(type,varstring,stream,show,level,flags)\t\t\\\n-  (current_language->la_print_type(type,varstring,stream,show,level,flags))\n+  (current_language->print_type(type,varstring,stream,show,level,flags))\n \n #define LA_PRINT_TYPEDEF(type,new_symbol,stream) \\\n   (current_language->la_print_typedef(type,new_symbol,stream))"
    },
    {
      "sha": "098a2aadd954bab90d3a48139a7f7647ee8fcbe3",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -367,7 +367,6 @@ extern const struct language_data m2_language_data =\n   m2_printchar,\t\t\t/* Print character constant */\n   m2_printstr,\t\t\t/* function to print string constant */\n   m2_emit_char,\t\t\t/* Function to print a single character */\n-  m2_print_type,\t\t/* Print a type using appropriate syntax */\n   m2_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   m2_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n@@ -425,6 +424,15 @@ class m2_language : public language_defn\n     lai->bool_type_symbol = \"BOOLEAN\";\n     lai->bool_type_default = builtin->builtin_bool;\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    m2_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* Single instance of the M2 language.  */"
    },
    {
      "sha": "0566ce8f1886e50df4cc6f3de8f011cfc45dd3c1",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -373,7 +373,6 @@ extern const struct language_data objc_language_data =\n   c_printchar,\t\t       /* Print a character constant */\n   c_printstr,\t\t       /* Function to print string constant */\n   c_emit_char,\n-  c_print_type,\t\t\t/* Print a type using appropriate syntax */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n@@ -420,6 +419,15 @@ class objc_language : public language_defn\n     *demangled = objc_demangle (mangled, 0);\n     return *demangled != NULL;\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    c_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* Single instance of the class representing the Objective-C language.  */"
    },
    {
      "sha": "d1ca29d32f700c9304561f13ad9c20a6ae80e481",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 20,
      "deletions": 22,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -994,27 +994,6 @@ Cannot perform conditional operation on vectors with different sizes\"));\n   return evaluate_subexp_c (expect_type, exp, pos, noside);\n }\n \n-/* Print OpenCL types.  */\n-\n-static void\n-opencl_print_type (struct type *type, const char *varstring,\n-\t\t   struct ui_file *stream, int show, int level,\n-\t\t   const struct type_print_options *flags)\n-{\n-  /* We nearly always defer to C type printing, except that vector\n-     types are considered primitive in OpenCL, and should always\n-     be printed using their TYPE_NAME.  */\n-  if (show > 0)\n-    {\n-      type = check_typedef (type);\n-      if (type->code () == TYPE_CODE_ARRAY && TYPE_VECTOR (type)\n-\t  && type->name () != NULL)\n-\tshow = 0;\n-    }\n-\n-  c_print_type (type, varstring, stream, show, level, flags); \n-}\n-\n const struct exp_descriptor exp_descriptor_opencl =\n {\n   print_subexp_standard,\n@@ -1042,7 +1021,6 @@ extern const struct language_data opencl_language_data =\n   c_printchar,\t\t\t/* Print a character constant */\n   c_printstr,\t\t\t/* Function to print string constant */\n   c_emit_char,\t\t\t/* Print a single char */\n-  opencl_print_type,\t\t/* Print a type using appropriate syntax */\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n@@ -1091,6 +1069,26 @@ class opencl_language : public language_defn\n     lai->bool_type_symbol = \"int\";\n     lai->bool_type_default = types [opencl_primitive_type_int];\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    /* We nearly always defer to C type printing, except that vector types\n+       are considered primitive in OpenCL, and should always be printed\n+       using their TYPE_NAME.  */\n+    if (show > 0)\n+      {\n+\ttype = check_typedef (type);\n+\tif (type->code () == TYPE_CODE_ARRAY && TYPE_VECTOR (type)\n+\t    && type->name () != NULL)\n+\t  show = 0;\n+      }\n+\n+    c_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* Single instance of the OpenCL language class.  */"
    },
    {
      "sha": "9aa03de6a59f617d51f847bf32660ff68b689c98",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -398,7 +398,6 @@ extern const struct language_data pascal_language_data =\n   pascal_printchar,\t\t/* Print a character constant */\n   pascal_printstr,\t\t/* Function to print string constant */\n   pascal_emit_char,\t\t/* Print a single char */\n-  pascal_print_type,\t\t/* Print a type using appropriate syntax */\n   pascal_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   pascal_value_print_inner,\t/* la_value_print_inner */\n   pascal_value_print,\t\t/* Print a top-level value */\n@@ -478,6 +477,15 @@ class pascal_language : public language_defn\n     lai->bool_type_symbol = \"boolean\";\n     lai->bool_type_default = builtin->builtin_bool;\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    pascal_print_type (type, varstring, stream, show, level, flags);\n+  }\n };\n \n /* Single instance of the Pascal language class.  */"
    },
    {
      "sha": "f78686ae1c8d0b70d5b2139492ad01a09a46aa63",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbfb0a463fc7de88a2da8858ac5cd6c2f4796514/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=fbfb0a463fc7de88a2da8858ac5cd6c2f4796514",
      "patch": "@@ -951,16 +951,6 @@ rust_internal_print_type (struct type *type, const char *varstring,\n     }\n }\n \n-static void\n-rust_print_type (struct type *type, const char *varstring,\n-\t\t struct ui_file *stream, int show, int level,\n-\t\t const struct type_print_options *flags)\n-{\n-  print_offset_data podata;\n-  rust_internal_print_type (type, varstring, stream, show, level,\n-\t\t\t    flags, false, &podata);\n-}\n-\n \f\n \n /* Like arch_composite_type, but uses TYPE to decide how to allocate\n@@ -2063,7 +2053,6 @@ extern const struct language_data rust_language_data =\n   rust_printchar,\t\t/* Print a character constant */\n   rust_printstr,\t\t/* Function to print string constant */\n   rust_emitchar,\t\t/* Print a single char */\n-  rust_print_type,\t\t/* Print a type using appropriate syntax */\n   rust_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   rust_value_print_inner,\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n@@ -2144,6 +2133,17 @@ class rust_language : public language_defn\n     *demangled = gdb_demangle (mangled, DMGL_PARAMS | DMGL_ANSI);\n     return *demangled != NULL;\n   }\n+\n+  /* See language.h.  */\n+\n+  void print_type (struct type *type, const char *varstring,\n+\t\t   struct ui_file *stream, int show, int level,\n+\t\t   const struct type_print_options *flags) const override\n+  {\n+    print_offset_data podata;\n+    rust_internal_print_type (type, varstring, stream, show, level,\n+\t\t\t      flags, false, &podata);\n+  }\n };\n \n /* Single instance of the Rust language class.  */"
    }
  ]
}