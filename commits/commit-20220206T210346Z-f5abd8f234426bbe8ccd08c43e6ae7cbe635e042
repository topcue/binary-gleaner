{
  "sha": "f5abd8f234426bbe8ccd08c43e6ae7cbe635e042",
  "node_id": "C_kwDOANOeidoAKGY1YWJkOGYyMzQ0MjZiYmU4Y2NkMDhjNDNlNmFlN2NiZTYzNWUwNDI",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2022-01-28T03:13:40Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2022-02-06T21:03:46Z"
    },
    "message": "gdb: remote SYMBOL_IS_CPLUS_TEMPLATE_FUNCTION macro\n\nAdd a getter for a whether a symbol is a C++ template function.  Remove\nthe corresponding macro and adjust all callers.\n\nChange-Id: I89abc2802a952b77b0e0eb73a25c2306cb8e8bcc",
    "tree": {
      "sha": "e8a679b506617ed029ca5cb5bca710b9c33b11b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e8a679b506617ed029ca5cb5bca710b9c33b11b5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f5abd8f234426bbe8ccd08c43e6ae7cbe635e042",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5abd8f234426bbe8ccd08c43e6ae7cbe635e042",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f5abd8f234426bbe8ccd08c43e6ae7cbe635e042",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5abd8f234426bbe8ccd08c43e6ae7cbe635e042/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "32177d6e39a2ed82fdafd7c41456c311b64d09fc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32177d6e39a2ed82fdafd7c41456c311b64d09fc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/32177d6e39a2ed82fdafd7c41456c311b64d09fc"
    }
  ],
  "stats": {
    "total": 11,
    "additions": 7,
    "deletions": 4
  },
  "files": [
    {
      "sha": "8fb2f71b46cc1dbd1887095ce174f645c9f65459",
      "filename": "gdb/cp-namespace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f5abd8f234426bbe8ccd08c43e6ae7cbe635e042/gdb/cp-namespace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f5abd8f234426bbe8ccd08c43e6ae7cbe635e042/gdb/cp-namespace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-namespace.c?ref=f5abd8f234426bbe8ccd08c43e6ae7cbe635e042",
      "patch": "@@ -519,7 +519,7 @@ cp_lookup_symbol_imports_or_template (const char *scope,\n   if (function != NULL && function->language () == language_cplus)\n     {\n       /* Search the function's template parameters.  */\n-      if (SYMBOL_IS_CPLUS_TEMPLATE_FUNCTION (function))\n+      if (function->is_cplus_template_function ())\n \t{\n \t  struct template_symbol *templ\n \t    = (struct template_symbol *) function;"
    },
    {
      "sha": "a86145198fdca0b4e94fca62cb787031f8c20de5",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f5abd8f234426bbe8ccd08c43e6ae7cbe635e042/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f5abd8f234426bbe8ccd08c43e6ae7cbe635e042/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=f5abd8f234426bbe8ccd08c43e6ae7cbe635e042",
      "patch": "@@ -1198,6 +1198,11 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n     m_is_inlined = is_inlined;\n   }\n \n+  bool is_cplus_template_function () const\n+  {\n+    return this->subclass == SYMBOL_TEMPLATE;\n+  }\n+\n   /* Data type of value */\n \n   struct type *type = nullptr;\n@@ -1300,8 +1305,6 @@ struct block_symbol\n /* Note: There is no accessor macro for symbol.owner because it is\n    \"private\".  */\n \n-#define SYMBOL_IS_CPLUS_TEMPLATE_FUNCTION(symbol) \\\n-  (((symbol)->subclass) == SYMBOL_TEMPLATE)\n #define SYMBOL_TYPE(symbol)\t\t(symbol)->type\n #define SYMBOL_LINE(symbol)\t\t(symbol)->line\n #define SYMBOL_COMPUTED_OPS(symbol)\t((symbol)->impl ().ops_computed)\n@@ -1342,7 +1345,7 @@ extern void symbol_set_symtab (struct symbol *symbol, struct symtab *symtab);\n \n /* An instance of this type is used to represent a C++ template\n    function.  A symbol is really of this type iff\n-   SYMBOL_IS_CPLUS_TEMPLATE_FUNCTION is true.  */\n+   symbol::is_cplus_template_function is true.  */\n \n struct template_symbol : public symbol\n {"
    }
  ]
}