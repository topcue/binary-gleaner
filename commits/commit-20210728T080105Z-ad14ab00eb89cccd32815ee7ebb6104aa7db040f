{
  "sha": "ad14ab00eb89cccd32815ee7ebb6104aa7db040f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWQxNGFiMDBlYjg5Y2NjZDMyODE1ZWU3ZWJiNjEwNGFhN2RiMDQwZg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-07-28T08:01:05Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-07-28T08:01:05Z"
    },
    "message": "[gdb/symtab] Fix unhandled dwarf expression opcode with gcc-11 -gdwarf-5\n\n[ I've confused things by forgetting to add -gdwarf-4 in $subject of\ncommit 0057a7ee0d9 \"[gdb/testsuite] Add KFAILs for gdb.ada FAILs with\ngcc-11\".  So I'm adding here -gdwarf-5 in $subject, even though -gdwarf-5 is\nthe default for gcc-11.  I keep getting confused because of working with a\nsystem gcc-11 compiler that was patched to switch the default back to\n-gdwarf-4. ]\n\nWhen running test-case gdb.ada/arrayptr.exp with gcc-11 (and default\n-gdwarf-5), I run into:\n...\n(gdb) print pa_ptr.all^M\nUnhandled dwarf expression opcode 0xff^M\n(gdb) FAIL: gdb.ada/arrayptr.exp: scenario=all: print pa_ptr.all\n...\n\nWhat happens is that pa_ptr:\n...\n <2><1523>: Abbrev Number: 3 (DW_TAG_variable)\n    <1524>   DW_AT_name        : pa_ptr\n    <1529>   DW_AT_type        : <0x14fa>\n...\nhas type:\n...\n <2><14fa>: Abbrev Number: 2 (DW_TAG_typedef)\n    <14fb>   DW_AT_name        : foo__packed_array_ptr\n    <1500>   DW_AT_type        : <0x1504>\n <2><1504>: Abbrev Number: 4 (DW_TAG_pointer_type)\n    <1505>   DW_AT_byte_size   : 8\n    <1505>   DW_AT_type        : <0x1509>\n...\nwhich is a pointer to a subrange:\n...\n <2><1509>: Abbrev Number: 12 (DW_TAG_subrange_type)\n    <150a>   DW_AT_lower_bound : 0\n    <150b>   DW_AT_upper_bound : 0x3fffffffffffffffff\n    <151b>   DW_AT_name        : foo__packed_array\n    <151f>   DW_AT_type        : <0x15cc>\n    <1523>   DW_AT_artificial  : 1\n <1><15cc>: Abbrev Number: 5 (DW_TAG_base_type)\n    <15cd>   DW_AT_byte_size   : 16\n    <15ce>   DW_AT_encoding    : 7      (unsigned)\n    <15cf>   DW_AT_name        : long_long_long_unsigned\n    <15d3>   DW_AT_artificial  : 1\n...\nwith upper bound of form DW_FORM_data16.\n\nIn gdb/dwarf/attribute.h we have:\n...\n  /* Return non-zero if ATTR's value falls in the 'constant' class, or\n     zero otherwise.  When this function returns true, you can apply\n     the constant_value method to it.\n     ...\n     DW_FORM_data16 is not considered as constant_value cannot handle\n     that.  */\n  bool form_is_constant () const;\n...\nso instead we have attribute::form_is_block (DW_FORM_data16) == true.\n\nThen in attr_to_dynamic_prop for the upper bound, we get a PROC_LOCEXPR\ninstead of a PROP_CONST and end up trying to evaluate the constant\n0x3fffffffffffffffff as if it were a locexpr, which causes the\n\"Unhandled dwarf expression opcode 0xff\".\n\nIn contrast, with -gdwarf-4 we have:\n...\n    <164c>   DW_AT_upper_bound : 18 byte block: \\\n      9e 10 ff ff ff ff ff ff ff ff 3f 0 0 0 0 0 0 0 \\\n      (DW_OP_implicit_value 16 byte block: \\\n        ff ff ff ff ff ff ff ff 3f 0 0 0 0 0 0 0 )\n...\n\nFix the dwarf error by translating the DW_FORM_data16 constant into a\nPROC_LOCEXPR, effectively by prepending 0x9e 0x10, such that we have same\nresult as with -gdwarf-4:\n...\n(gdb) print pa_ptr.all^M\nThat operation is not available on integers of more than 8 bytes.^M\n(gdb) KFAIL: gdb.ada/arrayptr.exp: scenario=all: print pa_ptr.all \\\n  (PRMS: gdb/20991)\n...\n\nTested on x86_64-linux, with gcc-11 and target board\nunix/gdb:debug_flags=-gdwarf-5.\n\ngdb/ChangeLog:\n\n2021-07-25  Tom de Vries  <tdevries@suse.de>\n\n\t* dwarf2/read.c (attr_to_dynamic_prop): Handle DW_FORM_data16.",
    "tree": {
      "sha": "2d28c7addffb0ef040c69ee9fcb05be99deaf2c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2d28c7addffb0ef040c69ee9fcb05be99deaf2c0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ad14ab00eb89cccd32815ee7ebb6104aa7db040f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad14ab00eb89cccd32815ee7ebb6104aa7db040f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ad14ab00eb89cccd32815ee7ebb6104aa7db040f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad14ab00eb89cccd32815ee7ebb6104aa7db040f/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "254db2f3369039ba20d9a418dc07542c1617eeb1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/254db2f3369039ba20d9a418dc07542c1617eeb1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/254db2f3369039ba20d9a418dc07542c1617eeb1"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 16,
    "deletions": 1
  },
  "files": [
    {
      "sha": "6f1b453ef455f325e6fc92ece98d3fb6022c617d",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad14ab00eb89cccd32815ee7ebb6104aa7db040f/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad14ab00eb89cccd32815ee7ebb6104aa7db040f/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=ad14ab00eb89cccd32815ee7ebb6104aa7db040f",
      "patch": "@@ -18254,7 +18254,22 @@ attr_to_dynamic_prop (const struct attribute *attr, struct die_info *die,\n       baton->locexpr.per_cu = cu->per_cu;\n       baton->locexpr.per_objfile = per_objfile;\n \n-      struct dwarf_block *block = attr->as_block ();\n+      struct dwarf_block *block;\n+      if (attr->form == DW_FORM_data16)\n+\t{\n+\t  size_t data_size = 16;\n+\t  block = XOBNEW (obstack, struct dwarf_block);\n+\t  block->size = (data_size\n+\t\t\t + 2 /* Extra bytes for DW_OP and arg.  */);\n+\t  gdb_byte *data = XOBNEWVEC (obstack, gdb_byte, block->size);\n+\t  data[0] = DW_OP_implicit_value;\n+\t  data[1] = data_size;\n+\t  memcpy (&data[2], attr->as_block ()->data, data_size);\n+\t  block->data = data;\n+\t}\n+      else\n+\tblock = attr->as_block ();\n+\n       baton->locexpr.size = block->size;\n       baton->locexpr.data = block->data;\n       switch (attr->name)"
    }
  ]
}