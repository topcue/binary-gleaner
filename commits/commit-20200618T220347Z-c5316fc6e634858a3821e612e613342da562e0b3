{
  "sha": "c5316fc6e634858a3821e612e613342da562e0b3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzUzMTZmYzZlNjM0ODU4YTM4MjFlNjEyZTYxMzM0MmRhNTYyZTBiMw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-18T20:28:19Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-18T22:03:47Z"
    },
    "message": "Don't write to inferior_ptid in gdbarch-selftests.c, mock address_space too\n\nUse switch_to_thread instead of writing to inferior_ptid.  This\nrequires a couple of improvements to the mocking environment.  One is\nto mock a pspace too, and assigning it to the inferior.  In turn, this\nrequires heap-allocating the address space, so that the regular\nprogram_space dtor destroys the address space correctly.\n\n(Note that new the mock program_space is allocated on the stack, and\nthus depends on the previous patch that eliminated\ndelete_program_space.)\n\ngdb/ChangeLog:\n2020-06-18  Pedro Alves  <palves@redhat.com>\n\n\t* gdbarch-selftests.c: Include \"progspace-and-thread.h\".\n\t(register_to_value_test): Mock a program_space too.  Heap-allocate\n\tthe address space.  Don't write to inferior_ptid.  Use\n\tswitch_to_thread instead.",
    "tree": {
      "sha": "a77bdcb78df2ebdc878007f1d0d2cbc116af263a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a77bdcb78df2ebdc878007f1d0d2cbc116af263a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c5316fc6e634858a3821e612e613342da562e0b3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5316fc6e634858a3821e612e613342da562e0b3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c5316fc6e634858a3821e612e613342da562e0b3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5316fc6e634858a3821e612e613342da562e0b3/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8df017996f662ce6ab23aea4abeb8f7ac1f62651",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8df017996f662ce6ab23aea4abeb8f7ac1f62651",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8df017996f662ce6ab23aea4abeb8f7ac1f62651"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 16,
    "deletions": 8
  },
  "files": [
    {
      "sha": "6854b8f9a20e417d54864698212e1b9fadf53a0b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5316fc6e634858a3821e612e613342da562e0b3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5316fc6e634858a3821e612e613342da562e0b3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c5316fc6e634858a3821e612e613342da562e0b3",
      "patch": "@@ -1,3 +1,10 @@\n+2020-06-18  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdbarch-selftests.c: Include \"progspace-and-thread.h\".\n+\t(register_to_value_test): Mock a program_space too.  Heap-allocate\n+\tthe address space.  Don't write to inferior_ptid.  Use\n+\tswitch_to_thread instead.\n+\n 2020-06-18  Pedro Alves  <palves@redhat.com>\n \n \t* linux-tdep.c (find_signalled_thread(thread_info *,void *)):"
    },
    {
      "sha": "91aa9d8734425846bd8dc8de8c1759dbbcd7f33c",
      "filename": "gdb/gdbarch-selftests.c",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5316fc6e634858a3821e612e613342da562e0b3/gdb/gdbarch-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5316fc6e634858a3821e612e613342da562e0b3/gdb/gdbarch-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch-selftests.c?ref=c5316fc6e634858a3821e612e613342da562e0b3",
      "patch": "@@ -27,6 +27,7 @@\n #include \"target-float.h\"\n #include \"gdbsupport/def-vector.h\"\n #include \"gdbarch.h\"\n+#include \"progspace-and-thread.h\"\n \n namespace selftests {\n \n@@ -75,24 +76,25 @@ register_to_value_test (struct gdbarch *gdbarch)\n \n   test_target_ops mock_target;\n   ptid_t mock_ptid (1, 1);\n+  program_space mock_pspace (new_address_space ());\n   inferior mock_inferior (mock_ptid.pid ());\n-  address_space mock_aspace {};\n   mock_inferior.gdbarch = gdbarch;\n-  mock_inferior.aspace = &mock_aspace;\n+  mock_inferior.aspace = mock_pspace.aspace;\n+  mock_inferior.pspace = &mock_pspace;\n   thread_info mock_thread (&mock_inferior, mock_ptid);\n \n+  scoped_restore_current_pspace_and_thread restore_pspace_thread;\n+\n   scoped_restore restore_thread_list\n     = make_scoped_restore (&mock_inferior.thread_list, &mock_thread);\n \n   /* Add the mock inferior to the inferior list so that look ups by\n      target+ptid can find it.  */\n   scoped_restore restore_inferior_list\n-    = make_scoped_restore (&inferior_list);\n-  inferior_list = &mock_inferior;\n+    = make_scoped_restore (&inferior_list, &mock_inferior);\n \n   /* Switch to the mock inferior.  */\n-  scoped_restore_current_inferior restore_current_inferior;\n-  set_current_inferior (&mock_inferior);\n+  switch_to_inferior_no_thread (&mock_inferior);\n \n   /* Push the process_stratum target so we can mock accessing\n      registers.  */\n@@ -102,8 +104,7 @@ register_to_value_test (struct gdbarch *gdbarch)\n   SCOPE_EXIT { pop_all_targets_at_and_above (process_stratum); };\n \n   /* Switch to the mock thread.  */\n-  scoped_restore restore_inferior_ptid\n-    = make_scoped_restore (&inferior_ptid, mock_ptid);\n+  switch_to_thread (&mock_thread);\n \n   struct frame_info *frame = get_current_frame ();\n   const int num_regs = gdbarch_num_cooked_regs (gdbarch);"
    }
  ]
}