{
  "sha": "76b43c9b5c2b275cbf4f927bfc25984410cb5dd5",
  "node_id": "C_kwDOANOeidoAKDc2YjQzYzliNWMyYjI3NWNiZjRmOTI3YmZjMjU5ODQ0MTBjYjVkZDU",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-10-05T14:10:12Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-10-13T10:43:28Z"
    },
    "message": "gdb: improve error reporting from the disassembler\n\nIf the libopcodes disassembler returns a negative value then this\nindicates that the disassembly failed for some reason.  In disas.c, in\nthe function gdb_disassembler::print_insn we can see how this is\nhandled; when we get a negative value back, we call the memory_error\nfunction, which throws an exception.\n\nThe problem here is that the address used in the memory_error call is\ngdb_disassembler::m_err_memaddr, which is set in\ngdb_disassembler::dis_asm_memory_error, which is called from within\nthe libopcodes disassembler through the\ndisassembler_info::memory_error_func callback.\n\nHowever, for this to work correctly, every time the libopcodes\ndisassembler returns a negative value, the libopcodes disassembler\nmust have first called the memory_error_func callback.\n\nMy first plan was to make m_err_memaddr a gdb::optional, and assert\nthat it always had a value prior to calling memory_error, however, a\nquick look in opcodes/*-dis.c shows that there _are_ cases where a\nnegative value is returned without first calling the memory_error_func\ncallback, for example in arc-dis.c and cris-dis.c.\n\nNow, I think that a good argument can be made that these disassemblers\nmust therefore be broken, except for the case where we can't read\nmemory, we should always be able to disassemble the memory contents to\n_something_, even if it's just '.word 0x....'.  However, I certainly\ndon't plan to go and fix all of the disassemblers.\n\nWhat I do propose to do then, is make m_err_memaddr a gdb::optional,\nbut now, instead of always calling memory_error, I add a new path\nwhich just calls error complaining about an unknown error.  This new\npath is only used if m_err_memaddr doesn't have a value (indicating\nthat the memory_error_func callback was not called).\n\nTo test this I just augmented one of the disassemblers to always\nreturn -1, before this patch I see this:\n\n  Dump of assembler code for function main:\n     0x000101aa <+0>:\tCannot access memory at address 0x0\n\nAnd after this commit I now see:\n\n  Dump of assembler code for function main:\n     0x000101aa <+0>:\tunknown disassembler error (error = -1)\n\nThis doesn't really help much, but that's because there's no way to\nreport non memory errors out of the disasembler, because, it was not\nexpected that the disassembler would ever report non memory errors.",
    "tree": {
      "sha": "7cbf8a1b1201aaa1d4bab7c001a9d12b409d756c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7cbf8a1b1201aaa1d4bab7c001a9d12b409d756c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/76b43c9b5c2b275cbf4f927bfc25984410cb5dd5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76b43c9b5c2b275cbf4f927bfc25984410cb5dd5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/76b43c9b5c2b275cbf4f927bfc25984410cb5dd5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76b43c9b5c2b275cbf4f927bfc25984410cb5dd5/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "38b03d23c7c7e6a9f8f27a9899fd0a84587c379e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/38b03d23c7c7e6a9f8f27a9899fd0a84587c379e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/38b03d23c7c7e6a9f8f27a9899fd0a84587c379e"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 15,
    "deletions": 6
  },
  "files": [
    {
      "sha": "dc6426718bb6778d2d53d8b5bb37aaadb4d22f2d",
      "filename": "gdb/disasm.c",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76b43c9b5c2b275cbf4f927bfc25984410cb5dd5/gdb/disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76b43c9b5c2b275cbf4f927bfc25984410cb5dd5/gdb/disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.c?ref=76b43c9b5c2b275cbf4f927bfc25984410cb5dd5",
      "patch": "@@ -148,7 +148,7 @@ gdb_disassembler::dis_asm_memory_error (int err, bfd_vma memaddr,\n   gdb_disassembler *self\n     = static_cast<gdb_disassembler *>(info->application_data);\n \n-  self->m_err_memaddr = memaddr;\n+  self->m_err_memaddr.emplace (memaddr);\n }\n \n /* Wrapper of print_address.  */\n@@ -754,8 +754,7 @@ get_all_disassembler_options (struct gdbarch *gdbarch)\n gdb_disassembler::gdb_disassembler (struct gdbarch *gdbarch,\n \t\t\t\t    struct ui_file *file,\n \t\t\t\t    di_read_memory_ftype read_memory_func)\n-  : m_gdbarch (gdbarch),\n-    m_err_memaddr (0)\n+  : m_gdbarch (gdbarch)\n {\n   init_disassemble_info (&m_di, file, fprintf_disasm);\n   m_di.flavour = bfd_target_unknown_flavour;\n@@ -790,12 +789,17 @@ int\n gdb_disassembler::print_insn (CORE_ADDR memaddr,\n \t\t\t      int *branch_delay_insns)\n {\n-  m_err_memaddr = 0;\n+  m_err_memaddr.reset ();\n \n   int length = gdbarch_print_insn (arch (), memaddr, &m_di);\n \n   if (length < 0)\n-    memory_error (TARGET_XFER_E_IO, m_err_memaddr);\n+    {\n+      if (m_err_memaddr.has_value ())\n+\tmemory_error (TARGET_XFER_E_IO, *m_err_memaddr);\n+      else\n+\terror (_(\"unknown disassembler error (error = %d)\"), length);\n+    }\n \n   if (branch_delay_insns != NULL)\n     {"
    },
    {
      "sha": "d3642d8ca0106eb3c0012bb88efdc2e80433a858",
      "filename": "gdb/disasm.h",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76b43c9b5c2b275cbf4f927bfc25984410cb5dd5/gdb/disasm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76b43c9b5c2b275cbf4f927bfc25984410cb5dd5/gdb/disasm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.h?ref=76b43c9b5c2b275cbf4f927bfc25984410cb5dd5",
      "patch": "@@ -75,7 +75,12 @@ class gdb_disassembler\n      using this field.  */\n   std::string m_disassembler_options_holder;\n \n-  CORE_ADDR m_err_memaddr;\n+  /* This member variable is given a value by calling dis_asm_memory_error.\n+     If after calling into the libopcodes disassembler we get back a\n+     negative value (which indicates an error), then, if this variable has\n+     a value, we report a memory error to the user, otherwise, we report a\n+     non-memory error.  */\n+  gdb::optional<CORE_ADDR> m_err_memaddr;\n \n   static int dis_asm_read_memory (bfd_vma memaddr, gdb_byte *myaddr,\n \t\t\t\t  unsigned int len,"
    }
  ]
}