{
  "sha": "0316fb52d6eaca5f2398843f57ba08f8d3746056",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDMxNmZiNTJkNmVhY2E1ZjIzOTg4NDNmNTdiYTA4ZjhkMzc0NjA1Ng==",
  "commit": {
    "author": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2020-09-03T14:24:51Z"
    },
    "committer": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2020-09-03T16:22:08Z"
    },
    "message": "bpf: several small fixes in the simulator\n\nThis patch fixes the following problems:\n- Missing includes in several files leading to implicit function\n  declarations.\n- Missing prototype for bpf_trace_printk in bpf-helpers.h\n- The simulator bitsize was set to 32 bits, causing truncation of\n  the program counter.\n\nTested in bpf-unknown-none.\n\nsim/ChangeLog:\n\n2020-09-03  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* bpf/bpf.c: Include bpf-helpers.h.\n\t* bpf/bpf-helpers.h: Provide a prototype for bpf_trace_printk.\n\t* bpf/configure.ac: Set simulator bitsize to 64.\n\t* bpf/configure (includedir): Regenerate.\n\t* bpf/sim-if.c: Include stdlib.h.\n\t* bpf/traps.c: Likewise.",
    "tree": {
      "sha": "df544c67ceacb4fcf00168b98bd20b6694076a02",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/df544c67ceacb4fcf00168b98bd20b6694076a02"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0316fb52d6eaca5f2398843f57ba08f8d3746056",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0316fb52d6eaca5f2398843f57ba08f8d3746056",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0316fb52d6eaca5f2398843f57ba08f8d3746056",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0316fb52d6eaca5f2398843f57ba08f8d3746056/comments",
  "author": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1d01693f555be09f78cea4e2454c24457777f057",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d01693f555be09f78cea4e2454c24457777f057",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1d01693f555be09f78cea4e2454c24457777f057"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 79,
    "deletions": 3
  },
  "files": [
    {
      "sha": "28d78a34d281548a63287ae6c599162dc1cd76c3",
      "filename": "sim/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ChangeLog?ref=0316fb52d6eaca5f2398843f57ba08f8d3746056",
      "patch": "@@ -1,3 +1,12 @@\n+2020-09-03  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* bpf/bpf.c: Include bpf-helpers.h.\n+\t* bpf/bpf-helpers.h: Provide a prototype for bpf_trace_printk.\n+\t* bpf/configure.ac: Set simulator bitsize to 64.\n+\t* bpf/configure (includedir): Regenerate.\n+\t* bpf/sim-if.c: Include stdlib.h.\n+\t* bpf/traps.c: Likewise.\n+\n 2020-09-03  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* configure.ac: Do not configure sim/testsuite nor sim/igen if the"
    },
    {
      "sha": "021649cb02fb28ade2ab5c1dcb794d5e59699157",
      "filename": "sim/bpf/bpf-helpers.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/bpf-helpers.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/bpf-helpers.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/bpf-helpers.h?ref=0316fb52d6eaca5f2398843f57ba08f8d3746056",
      "patch": "@@ -26,6 +26,6 @@ enum bpf_kernel_helper\n #undef DEF_HELPER\n   };\n \n-/* void bpf_trace_printk (const char *fmt); */\n+void bpf_trace_printk (SIM_CPU *current_cpu);\n \n #endif /* ! BPF_HELPERS_H */"
    },
    {
      "sha": "f413b36ab43f27cc63859d5e6fca0e18f71ef534",
      "filename": "sim/bpf/bpf.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/bpf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/bpf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/bpf.c?ref=0316fb52d6eaca5f2398843f57ba08f8d3746056",
      "patch": "@@ -27,6 +27,7 @@\n #include \"decode.h\"\n \n #include \"defs-le.h\"  /* For SCACHE */\n+#include \"bpf-helpers.h\"\n \n /* It is not possible to include both defs-le.h and defs-be.h due to\n    duplicated definitions, so we need a bunch of forward declarations"
    },
    {
      "sha": "34e70693a488e28efeeed5c02ad3b3d5fa8839c1",
      "filename": "sim/bpf/configure",
      "status": "modified",
      "additions": 63,
      "deletions": 2,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/configure?ref=0316fb52d6eaca5f2398843f57ba08f8d3746056",
      "patch": "@@ -782,6 +782,7 @@ enable_sim_environment\n enable_sim_inline\n with_pkgversion\n with_bugurl\n+enable_sim_bitsize\n enable_sim_endian\n enable_sim_alignment\n enable_sim_scache\n@@ -1436,6 +1437,7 @@ Optional Features:\n                           environment\n   --enable-sim-inline=inlines\n                           Specify which functions should be inlined\n+  --enable-sim-bitsize=N  Specify target bitsize (32 or 64)\n   --enable-sim-endian=endian\n                           Specify target byte endian orientation\n   --enable-sim-alignment=align\n@@ -12882,7 +12884,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12885 \"configure\"\n+#line 12899 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12988,7 +12990,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12991 \"configure\"\n+#line 13005 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -13539,6 +13541,65 @@ _ACEOF\n \n \n \n+wire_word_bitsize=\"64\"\n+wire_word_msb=\"\"\n+wire_address_bitsize=\"\"\n+wire_cell_bitsize=\"\"\n+# Check whether --enable-sim-bitsize was given.\n+if test \"${enable_sim_bitsize+set}\" = set; then :\n+  enableval=$enable_sim_bitsize; sim_bitsize=\n+case \"${enableval}\" in\n+  64,63 | 64,63,* ) sim_bitsize=\"-DWITH_TARGET_WORD_BITSIZE=64 -DWITH_TARGET_WORD_MSB=63\";;\n+  32,31 | 32,31,* ) sim_bitsize=\"-DWITH_TARGET_WORD_BITSIZE=32 -DWITH_TARGET_WORD_MSB=31\";;\n+  64,0 | 64,0,* ) sim_bitsize=\"-DWITH_TARGET_WORD_BITSIZE=32 -DWITH_TARGET_WORD_MSB=0\";;\n+  32,0 | 64,0,* ) sim_bitsize=\"-DWITH_TARGET_WORD_BITSIZE=32 -DWITH_TARGET_WORD_MSB=0\";;\n+  32) if test x\"$wire_word_msb\" != x -a x\"$wire_word_msb\" != x0; then\n+        sim_bitsize=\"-DWITH_TARGET_WORD_BITSIZE=32 -DWITH_TARGET_WORD_MSB=31\"\n+      else\n+        sim_bitsize=\"-DWITH_TARGET_WORD_BITSIZE=32 -DWITH_TARGET_WORD_MSB=0\"\n+      fi ;;\n+  64) if test x\"$wire_word_msb\" != x -a x\"$wire_word_msb\" != x0; then\n+        sim_bitsize=\"-DWITH_TARGET_WORD_BITSIZE=64 -DWITH_TARGET_WORD_MSB=63\"\n+      else\n+        sim_bitsize=\"-DWITH_TARGET_WORD_BITSIZE=64 -DWITH_TARGET_WORD_MSB=0\"\n+      fi ;;\n+  *)  as_fn_error $? \"\\\"--enable-sim-bitsize was given $enableval.  Expected 32 or 64\\\"\" \"$LINENO\" 5 ;;\n+esac\n+# address bitsize\n+tmp=`echo \"${enableval}\" | sed -e \"s/^[0-9]*,*[0-9]*,*//\"`\n+case x\"${tmp}\" in\n+  x ) ;;\n+  x32 | x32,* ) sim_bitsize=\"${sim_bitsize} -DWITH_TARGET_ADDRESS_BITSIZE=32\" ;;\n+  x64 | x64,* ) sim_bitsize=\"${sim_bitsize} -DWITH_TARGET_ADDRESS_BITSIZE=64\" ;;\n+  * ) as_fn_error $? \"\\\"--enable-sim-bitsize was given address size $enableval.  Expected 32 or 64\\\"\" \"$LINENO\" 5 ;;\n+esac\n+# cell bitsize\n+tmp=`echo \"${enableval}\" | sed -e \"s/^[0-9]*,*[0-9*]*,*[0-9]*,*//\"`\n+case x\"${tmp}\" in\n+  x ) ;;\n+  x32 | x32,* ) sim_bitsize=\"${sim_bitsize} -DWITH_TARGET_CELL_BITSIZE=32\" ;;\n+  x64 | x64,* ) sim_bitsize=\"${sim_bitsize} -DWITH_TARGET_CELL_BITSIZE=64\" ;;\n+  * ) as_fn_error $? \"\\\"--enable-sim-bitsize was given cell size $enableval.  Expected 32 or 64\\\"\" \"$LINENO\" 5 ;;\n+esac\n+if test x\"$silent\" != x\"yes\" && test x\"$sim_bitsize\" != x\"\"; then\n+  echo \"Setting bitsize flags = $sim_bitsize\" 6>&1\n+fi\n+else\n+  sim_bitsize=\"\"\n+if test x\"$wire_word_bitsize\" != x; then\n+  sim_bitsize=\"$sim_bitsize -DWITH_TARGET_WORD_BITSIZE=$wire_word_bitsize\"\n+fi\n+if test x\"$wire_word_msb\" != x; then\n+  sim_bitsize=\"$sim_bitsize -DWITH_TARGET_WORD_MSB=$wire_word_msb\"\n+fi\n+if test x\"$wire_address_bitsize\" != x; then\n+  sim_bitsize=\"$sim_bitsize -DWITH_TARGET_ADDRESS_BITSIZE=$wire_address_bitsize\"\n+fi\n+if test x\"$wire_cell_bitsize\" != x; then\n+  sim_bitsize=\"$sim_bitsize -DWITH_TARGET_CELL_BITSIZE=$wire_cell_bitsize\"\n+fi\n+fi\n+\n \n wire_endian=\"\"\n default_endian=\"LITTLE\""
    },
    {
      "sha": "e7cd72a1c670d7b3a02570f3b93614fa6d08fca3",
      "filename": "sim/bpf/configure.ac",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/configure.ac?ref=0316fb52d6eaca5f2398843f57ba08f8d3746056",
      "patch": "@@ -4,6 +4,7 @@ sinclude(../common/acinclude.m4)\n \n SIM_AC_COMMON\n \n+SIM_AC_OPTION_BITSIZE([64])\n SIM_AC_OPTION_ENDIAN([], [LITTLE])\n SIM_AC_OPTION_ALIGNMENT(NONSTRICT_ALIGNMENT)\n SIM_AC_OPTION_SCACHE(16384)"
    },
    {
      "sha": "e7e5de61dfc1da8e9c2c539ed3c7d4d80729ee3e",
      "filename": "sim/bpf/sim-if.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/sim-if.c?ref=0316fb52d6eaca5f2398843f57ba08f8d3746056",
      "patch": "@@ -16,6 +16,8 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n+#include <stdlib.h>\n+\n #include \"sim-main.h\"\n #include \"sim-options.h\"\n #include \"libiberty.h\""
    },
    {
      "sha": "646db4a9578d9d7207dc41bf94f9ed2f5421b913",
      "filename": "sim/bpf/traps.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/traps.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0316fb52d6eaca5f2398843f57ba08f8d3746056/sim/bpf/traps.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/traps.c?ref=0316fb52d6eaca5f2398843f57ba08f8d3746056",
      "patch": "@@ -19,6 +19,8 @@\n #define WANT_CPU bpfbf\n #define WANT_CPU_BPFBF\n \n+#include <stdlib.h>\n+\n #include \"sim-main.h\"\n \n SEM_PC"
    }
  ]
}