{
  "sha": "ef1576a1b5f14276b44ee4c0fc259832ca0dfd99",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWYxNTc2YTFiNWYxNDI3NmI0NGVlNGMwZmMyNTk4MzJjYTBkZmQ5OQ==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T13:06:46Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:37:31Z"
    },
    "message": "[PATCH 43/57][Arm][OBJDUMP] Add support for MVE instructions: scatter stores and gather loads\n\nopcodes/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* arm-dis.c (enum mve_instructions): Add new instructions.\n\t(enum mve_unpredictable): Add new reasons.\n\t(enum mve_undefined): Likewise.\n\t(is_mve_undefined): Handle new instructions.\n\t(is_mve_unpredictable): Likewise.\n\t(print_mve_undefined): Likewise.\n\t(print_mve_unpredictable): Likewise.\n\t(print_mve_size): Likewise.\n\t(print_insn_mve): Likewise.",
    "tree": {
      "sha": "a197906ad72905df3a65e2d1df778f0b42d8b8ef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a197906ad72905df3a65e2d1df778f0b42d8b8ef"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ef1576a1b5f14276b44ee4c0fc259832ca0dfd99",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef1576a1b5f14276b44ee4c0fc259832ca0dfd99",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ef1576a1b5f14276b44ee4c0fc259832ca0dfd99",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef1576a1b5f14276b44ee4c0fc259832ca0dfd99/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aef6d006581cab8a858e7abd36c57e73ea6e97a2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aef6d006581cab8a858e7abd36c57e73ea6e97a2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aef6d006581cab8a858e7abd36c57e73ea6e97a2"
    }
  ],
  "stats": {
    "total": 369,
    "additions": 368,
    "deletions": 1
  },
  "files": [
    {
      "sha": "2a1f7072482867f9f8b59f3d0df726e3a0150e75",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef1576a1b5f14276b44ee4c0fc259832ca0dfd99/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef1576a1b5f14276b44ee4c0fc259832ca0dfd99/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=ef1576a1b5f14276b44ee4c0fc259832ca0dfd99",
      "patch": "@@ -1,3 +1,16 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* arm-dis.c (enum mve_instructions): Add new instructions.\n+\t(enum mve_unpredictable): Add new reasons.\n+\t(enum mve_undefined): Likewise.\n+\t(is_mve_undefined): Handle new instructions.\n+\t(is_mve_unpredictable): Likewise.\n+\t(print_mve_undefined): Likewise.\n+\t(print_mve_unpredictable): Likewise.\n+\t(print_mve_size): Likewise.\n+\t(print_insn_mve): Likewise.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "
    },
    {
      "sha": "2a89937b38eba5ceb70cc1a0c3a2ca8045431aae",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 355,
      "deletions": 1,
      "changes": 356,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ef1576a1b5f14276b44ee4c0fc259832ca0dfd99/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ef1576a1b5f14276b44ee4c0fc259832ca0dfd99/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=ef1576a1b5f14276b44ee4c0fc259832ca0dfd99",
      "patch": "@@ -112,6 +112,18 @@ enum mve_instructions\n   MVE_VSTRB_T5,\n   MVE_VSTRH_T6,\n   MVE_VSTRW_T7,\n+  MVE_VLDRB_GATHER_T1,\n+  MVE_VLDRH_GATHER_T2,\n+  MVE_VLDRW_GATHER_T3,\n+  MVE_VLDRD_GATHER_T4,\n+  MVE_VLDRW_GATHER_T5,\n+  MVE_VLDRD_GATHER_T6,\n+  MVE_VSTRB_SCATTER_T1,\n+  MVE_VSTRH_SCATTER_T2,\n+  MVE_VSTRW_SCATTER_T3,\n+  MVE_VSTRD_SCATTER_T4,\n+  MVE_VSTRW_SCATTER_T5,\n+  MVE_VSTRD_SCATTER_T6,\n   MVE_NONE\n };\n \n@@ -130,6 +142,9 @@ enum mve_unpredictable\n \t\t\t\t   vec reg start > 6 (vld2/st2).  */\n   UNPRED_R13_AND_WB,\t\t/* Unpredictable becase gp reg = r13\n \t\t\t\t   and WB bit = 1.  */\n+  UNPRED_Q_REGS_EQUAL,\t\t/* Unpredictable because vector registers are\n+\t\t\t\t   equal.  */\n+  UNPRED_OS,\t\t\t/* Unpredictable because offset scaled == 1.  */\n   UNPRED_NONE\t\t\t/* No unpredictable behavior.  */\n };\n \n@@ -138,6 +153,13 @@ enum mve_undefined\n   UNDEF_SIZE_3,\t\t\t/* undefined because size == 3.  */\n   UNDEF_SIZE_3,\t\t\t/* undefined because size == 3.  */\n   UNDEF_SIZE_LE_1,\t\t/* undefined because size <= 1.  */\n+  UNDEF_SIZE_NOT_2,\t\t/* undefined because size != 2.  */\n+  UNDEF_SIZE_NOT_3,\t\t/* undefined because size != 3.  */\n+  UNDEF_NOT_UNS_SIZE_0,\t\t/* undefined because U == 0 and\n+\t\t\t\t   size == 0.  */\n+  UNDEF_NOT_UNS_SIZE_1,\t\t/* undefined because U == 0 and\n+\t\t\t\t   size == 1.  */\n+  UNDEF_NOT_UNSIGNED,\t\t/* undefined because U == 0.  */\n   UNDEF_NONE\t\t\t/* no undefined behavior.  */\n };\n \n@@ -1840,13 +1862,16 @@ static const struct opcode32 neon_opcodes[] =\n \n    %%\t\t\t%\n \n+   %a\t\t\tprint '+' or '-' or imm offset in vldr[bhwd] and\n+\t\t\tvstr[bhwd]\n    %c\t\t\tprint condition code\n    %d\t\t\tprint addr mode of MVE vldr[bhw] and vstr[bhw]\n    %u\t\t\tprint 'U' (unsigned) or 'S' for various mve instructions\n    %i\t\t\tprint MVE predicate(s) for vpt and vpst\n    %n\t\t\tprint vector comparison code for predicated instruction\n    %v\t\t\tprint vector predicate for instruction in predicated\n \t\t\tblock\n+   %o\t\t\tprint offset scaled for vldr[hwd] and vstr[hwd]\n    %w\t\t\tprint writeback mode for MVE v{st,ld}[24]\n    %B\t\t\tprint v{st,ld}[24] any one operands\n \n@@ -1856,7 +1881,8 @@ static const struct opcode32 neon_opcodes[] =\n    %<bitfield>Z\t\tas %<>r but r15 is ZR instead of PC and r13 is\n \t\t\tUNPREDICTABLE\n    %<bitfield>s\t\tprint size for vector predicate & non VMOV instructions\n-*/\n+   %<bitfield>i\t\tprint immediate for vstr/vldr reg +/- imm\n+   */\n \n static const struct mopcode32 mve_opcodes[] =\n {\n@@ -2037,6 +2063,42 @@ static const struct mopcode32 mve_opcodes[] =\n    0xfc901e01, 0xff901e1f,\n    \"vld4%5-6d.%7-8s\\t%B, [%16-19r]%w\"},\n \n+  /* Vector VLDRB gather load.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VLDRB_GATHER_T1,\n+   0xec900e00, 0xefb01e50,\n+   \"vldrb%v.%u%7-8s\\t%13-15,22Q, [%16-19r, %1-3,5Q]\"},\n+\n+  /* Vector VLDRH gather load.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VLDRH_GATHER_T2,\n+   0xec900e10, 0xefb01e50,\n+   \"vldrh%v.%u%7-8s\\t%13-15,22Q, [%16-19r, %1-3,5Q%o]\"},\n+\n+  /* Vector VLDRW gather load.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VLDRW_GATHER_T3,\n+   0xfc900f40, 0xffb01fd0,\n+   \"vldrw%v.u32\\t%13-15,22Q, [%16-19r, %1-3,5Q%o]\"},\n+\n+  /* Vector VLDRD gather load.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VLDRD_GATHER_T4,\n+   0xec900fd0, 0xefb01fd0,\n+   \"vldrd%v.u64\\t%13-15,22Q, [%16-19r, %1-3,5Q%o]\"},\n+\n+  /* Vector VLDRW gather load.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VLDRW_GATHER_T5,\n+   0xfd101e00, 0xff111f00,\n+   \"vldrw%v.u32\\t%13-15,22Q, [%17-19,7Q, #%a%0-6i]%w\"},\n+\n+  /* Vector VLDRD gather load, variant T6.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VLDRD_GATHER_T6,\n+   0xfd101f00, 0xff111f00,\n+   \"vldrd%v.u64\\t%13-15,22Q, [%17-19,7Q, #%a%0-6i]%w\"},\n+\n   /* Vector VLDRB.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VLDRB_T1,\n@@ -2091,6 +2153,42 @@ static const struct mopcode32 mve_opcodes[] =\n    0xfca01e01, 0xffb01e1f,\n    \"vst4%5-6d.%7-8s\\t%B, [%16-19r]!\"},\n \n+  /* Vector VSTRB scatter store, T1 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSTRB_SCATTER_T1,\n+   0xec800e00, 0xffb01e50,\n+   \"vstrb%v.%7-8s\\t%13-15,22Q, [%16-19r, %1-3,5Q]\"},\n+\n+  /* Vector VSTRH scatter store, T2 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSTRH_SCATTER_T2,\n+   0xec800e10, 0xffb01e50,\n+   \"vstrh%v.%7-8s\\t%13-15,22Q, [%16-19r, %1-3,5Q%o]\"},\n+\n+  /* Vector VSTRW scatter store, T3 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSTRW_SCATTER_T3,\n+   0xec800e40, 0xffb01e50,\n+   \"vstrw%v.%7-8s\\t%13-15,22Q, [%16-19r, %1-3,5Q%o]\"},\n+\n+  /* Vector VSTRD scatter store, T4 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSTRD_SCATTER_T4,\n+   0xec800fd0, 0xffb01fd0,\n+   \"vstrd%v.64\\t%13-15,22Q, [%16-19r, %1-3,5Q%o]\"},\n+\n+  /* Vector VSTRW scatter store, T5 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSTRW_SCATTER_T5,\n+   0xfd001e00, 0xff111f00,\n+   \"vstrw%v.32\\t%13-15,22Q, [%17-19,7Q, #%a%0-6i]%w\"},\n+\n+  /* Vector VSTRD scatter store, T6 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSTRD_SCATTER_T6,\n+   0xfd001f00, 0xff111f00,\n+   \"vstrd%v.64\\t%13-15,22Q, [%17-19,7Q, #%a%0-6i]%w\"},\n+\n   /* Vector VSTRB.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VSTRB_T1,\n@@ -4319,6 +4417,113 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VLDRB_GATHER_T1:\n+      if (arm_decode_field (given, 7, 8) == 3)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_3;\n+\t  return TRUE;\n+\t}\n+      else if ((arm_decode_field (given, 28, 28) == 0)\n+\t       && (arm_decode_field (given, 7, 8) == 0))\n+\t{\n+\t  *undefined_code = UNDEF_NOT_UNS_SIZE_0;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n+    case MVE_VLDRH_GATHER_T2:\n+      if (arm_decode_field (given, 7, 8) == 3)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_3;\n+\t  return TRUE;\n+\t}\n+      else if ((arm_decode_field (given, 28, 28) == 0)\n+\t       && (arm_decode_field (given, 7, 8) == 1))\n+\t{\n+\t  *undefined_code = UNDEF_NOT_UNS_SIZE_1;\n+\t  return TRUE;\n+\t}\n+      else if (arm_decode_field (given, 7, 8) == 0)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_0;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n+    case MVE_VLDRW_GATHER_T3:\n+      if (arm_decode_field (given, 7, 8) != 2)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_NOT_2;\n+\t  return TRUE;\n+\t}\n+      else if (arm_decode_field (given, 28, 28) == 0)\n+\t{\n+\t  *undefined_code = UNDEF_NOT_UNSIGNED;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n+    case MVE_VLDRD_GATHER_T4:\n+      if (arm_decode_field (given, 7, 8) != 3)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_NOT_3;\n+\t  return TRUE;\n+\t}\n+      else if (arm_decode_field (given, 28, 28) == 0)\n+\t{\n+\t  *undefined_code = UNDEF_NOT_UNSIGNED;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n+    case MVE_VSTRB_SCATTER_T1:\n+      if (arm_decode_field (given, 7, 8) == 3)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_3;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n+    case MVE_VSTRH_SCATTER_T2:\n+      {\n+\tunsigned long size = arm_decode_field (given, 7, 8);\n+\tif (size == 3)\n+\t  {\n+\t    *undefined_code = UNDEF_SIZE_3;\n+\t    return TRUE;\n+\t  }\n+\telse if (size == 0)\n+\t  {\n+\t    *undefined_code = UNDEF_SIZE_0;\n+\t    return TRUE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+      }\n+\n+    case MVE_VSTRW_SCATTER_T3:\n+      if (arm_decode_field (given, 7, 8) != 2)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_NOT_2;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n+    case MVE_VSTRD_SCATTER_T4:\n+      if (arm_decode_field (given, 7, 8) != 3)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_NOT_3;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n     }\n@@ -4473,6 +4678,77 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \t  return FALSE;\n       }\n \n+    case MVE_VLDRB_GATHER_T1:\n+      if (arm_decode_field (given, 0, 0) == 1)\n+\t{\n+\t  *unpredictable_code = UNPRED_OS;\n+\t  return TRUE;\n+\t}\n+\n+      /*  fall through.  */\n+      /* To handle common code with T2-T4 variants.  */\n+    case MVE_VLDRH_GATHER_T2:\n+    case MVE_VLDRW_GATHER_T3:\n+    case MVE_VLDRD_GATHER_T4:\n+      {\n+\tunsigned long qd = arm_decode_field_multiple (given, 13, 15, 22, 22);\n+\tunsigned long qm = arm_decode_field_multiple (given, 1, 3, 5, 5);\n+\n+\tif (qd == qm)\n+\t  {\n+\t    *unpredictable_code = UNPRED_Q_REGS_EQUAL;\n+\t    return TRUE;\n+\t  }\n+\n+\tif (arm_decode_field (given, 16, 19) == 0xf)\n+\t  {\n+\t    *unpredictable_code = UNPRED_R15;\n+\t    return TRUE;\n+\t  }\n+\n+\treturn FALSE;\n+      }\n+\n+    case MVE_VLDRW_GATHER_T5:\n+    case MVE_VLDRD_GATHER_T6:\n+      {\n+\tunsigned long qd = arm_decode_field_multiple (given, 13, 15, 22, 22);\n+\tunsigned long qm = arm_decode_field_multiple (given, 17, 19, 7, 7);\n+\n+\tif (qd == qm)\n+\t  {\n+\t    *unpredictable_code = UNPRED_Q_REGS_EQUAL;\n+\t    return TRUE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+      }\n+\n+    case MVE_VSTRB_SCATTER_T1:\n+      if (arm_decode_field (given, 16, 19) == 0xf)\n+\t{\n+\t  *unpredictable_code = UNPRED_R15;\n+\t  return TRUE;\n+\t}\n+      else if (arm_decode_field (given, 0, 0) == 1)\n+\t{\n+\t  *unpredictable_code = UNPRED_OS;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n+    case MVE_VSTRH_SCATTER_T2:\n+    case MVE_VSTRW_SCATTER_T3:\n+    case MVE_VSTRD_SCATTER_T4:\n+      if (arm_decode_field (given, 16, 19) == 0xf)\n+\t{\n+\t  *unpredictable_code = UNPRED_R15;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n     }\n@@ -4501,6 +4777,26 @@ print_mve_undefined (struct disassemble_info *info,\n       func (stream, \"size <= 1\");\n       break;\n \n+    case UNDEF_SIZE_NOT_2:\n+      func (stream, \"size not equal to 2\");\n+      break;\n+\n+    case UNDEF_SIZE_NOT_3:\n+      func (stream, \"size not equal to 3\");\n+      break;\n+\n+    case UNDEF_NOT_UNS_SIZE_0:\n+      func (stream, \"not unsigned and size = zero\");\n+      break;\n+\n+    case UNDEF_NOT_UNS_SIZE_1:\n+      func (stream, \"not unsigned and size = one\");\n+      break;\n+\n+    case UNDEF_NOT_UNSIGNED:\n+      func (stream, \"not unsigned\");\n+      break;\n+\n     case UNDEF_NONE:\n       break;\n     }\n@@ -4546,6 +4842,15 @@ print_mve_unpredictable (struct disassemble_info *info,\n       func (stream, \"use of r13 and write back\");\n       break;\n \n+    case UNPRED_Q_REGS_EQUAL:\n+      func (stream,\n+\t    \"same vector register used for destination and other operand\");\n+      break;\n+\n+    case UNPRED_OS:\n+      func (stream, \"use of offset scaled\");\n+      break;\n+\n     case UNPRED_NONE:\n       break;\n     }\n@@ -4623,6 +4928,10 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VHSUB_T2:\n     case MVE_VLD2:\n     case MVE_VLD4:\n+    case MVE_VLDRB_GATHER_T1:\n+    case MVE_VLDRH_GATHER_T2:\n+    case MVE_VLDRW_GATHER_T3:\n+    case MVE_VLDRD_GATHER_T4:\n     case MVE_VLDRB_T1:\n     case MVE_VLDRH_T2:\n     case MVE_VPT_VEC_T1:\n@@ -4634,6 +4943,9 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VRHADD:\n     case MVE_VST2:\n     case MVE_VST4:\n+    case MVE_VSTRB_SCATTER_T1:\n+    case MVE_VSTRH_SCATTER_T2:\n+    case MVE_VSTRW_SCATTER_T3:\n     case MVE_VSTRB_T1:\n     case MVE_VSTRH_T2:\n       if (size <= 3)\n@@ -6117,6 +6429,12 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t      func (stream, \"%%\");\n \t\t      break;\n \n+\t\t    case 'a':\n+\t\t      /* Don't print anything for '+' as it is implied.  */\n+\t\t      if (arm_decode_field (given, 23, 23) == 0)\n+\t\t\tfunc (stream, \"-\");\n+\t\t      break;\n+\n \t\t    case 'c':\n \t\t      if (ifthen_state)\n \t\t\tfunc (stream, \"%s\", arm_conditional[IFTHEN_COND]);\n@@ -6137,13 +6455,25 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t      print_vec_condition (info, given, insn->mve_op);\n \t\t      break;\n \n+\t\t    case 'o':\n+\t\t      if (arm_decode_field (given, 0, 0) == 1)\n+\t\t\t{\n+\t\t\t  unsigned long size\n+\t\t\t    = arm_decode_field (given, 4, 4)\n+\t\t\t      | (arm_decode_field (given, 6, 6) << 1);\n+\n+\t\t\t  func (stream, \", uxtw #%lu\", size);\n+\t\t\t}\n+\t\t      break;\n+\n \t\t    case 'u':\n \t\t      {\n \t\t\tif (arm_decode_field (given, 28, 28) == 0)\n \t\t\t  func (stream, \"s\");\n \t\t\telse\n \t\t\t  func (stream, \"u\");\n \t\t      }\n+\t\t      break;\n \n \t\t    case 'v':\n \t\t      print_instruction_predicate (info);\n@@ -6181,6 +6511,30 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\t\t\t    value,\n \t\t\t\t\t    insn->mve_op);\n \t\t\t    break;\n+\t\t\t  case 'i':\n+\t\t\t    {\n+\t\t\t      unsigned long imm\n+\t\t\t\t= arm_decode_field (given, 0, 6);\n+\t\t\t      unsigned long mod_imm = imm;\n+\n+\t\t\t      switch (insn->mve_op)\n+\t\t\t\t{\n+\t\t\t\tcase MVE_VLDRW_GATHER_T5:\n+\t\t\t\tcase MVE_VSTRW_SCATTER_T5:\n+\t\t\t\t  mod_imm = mod_imm << 2;\n+\t\t\t\t  break;\n+\t\t\t\tcase MVE_VSTRD_SCATTER_T6:\n+\t\t\t\tcase MVE_VLDRD_GATHER_T6:\n+\t\t\t\t  mod_imm = mod_imm << 3;\n+\t\t\t\t  break;\n+\n+\t\t\t\tdefault:\n+\t\t\t\t  break;\n+\t\t\t\t}\n+\n+\t\t\t      func (stream, \"%lu\", mod_imm);\n+\t\t\t    }\n+\t\t\t    break;\n \t\t\t  case 'r':\n \t\t\t    func (stream, \"%s\", arm_regnames[value]);\n \t\t\t    break;"
    }
  ]
}