{
  "sha": "a8465a06e0986374f501d0e286a5f351af2aa878",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTg0NjVhMDZlMDk4NjM3NGY1MDFkMGUyODZhNWYzNTFhZjJhYTg3OA==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T10:46:48Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:36:16Z"
    },
    "message": "[PATCH 23/57][Arm][GAS] Add support for MVE instructions: vmla, vmul, vqadd and vqsub\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (enum operand_parse_code): New operand.\n\t(parse_operands): Handle new operand.\n\t(mve_encode_qqr): Handle new instructions.\n\t(do_neon_dyadic_i64_su): Accept MVE variants.\n\t(neon_dyadic_misc): Likewise.\n\t(do_neon_mac_maybe_scalar): Likewise.\n\t(do_neon_mul): Likewise.\n\t(insns): Change to accept MVE variants.\n\t* testsuite/gas/arm/mve-vmla-bad.d: New test.\n\t* testsuite/gas/arm/mve-vmla-bad.l: New test.\n\t* testsuite/gas/arm/mve-vmla-bad.s: New test.\n\t* testsuite/gas/arm/mve-vmul-bad-1.d: New test.\n\t* testsuite/gas/arm/mve-vmul-bad-1.l: New test.\n\t* testsuite/gas/arm/mve-vmul-bad-1.s: New test.\n\t* testsuite/gas/arm/mve-vmul-bad-2.d: New test.\n\t* testsuite/gas/arm/mve-vmul-bad-2.l: New test.\n\t* testsuite/gas/arm/mve-vmul-bad-2.s: New test.\n\t* testsuite/gas/arm/mve-vqaddsub-bad.d: New test.\n\t* testsuite/gas/arm/mve-vqaddsub-bad.l: New test.\n\t* testsuite/gas/arm/mve-vqaddsub-bad.s: New test.",
    "tree": {
      "sha": "e97ddab0acc53fcd0922a62e94aaf9b0ecf25327",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e97ddab0acc53fcd0922a62e94aaf9b0ecf25327"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a8465a06e0986374f501d0e286a5f351af2aa878",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8465a06e0986374f501d0e286a5f351af2aa878",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a8465a06e0986374f501d0e286a5f351af2aa878",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8465a06e0986374f501d0e286a5f351af2aa878/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "93925576e90a2d5ce84176bf2638f685d1a13ec6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93925576e90a2d5ce84176bf2638f685d1a13ec6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/93925576e90a2d5ce84176bf2638f685d1a13ec6"
    }
  ],
  "stats": {
    "total": 444,
    "additions": 431,
    "deletions": 13
  },
  "files": [
    {
      "sha": "931126eb3184ec9812c048d56f3b28c7e6ad809f",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -1,3 +1,26 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (enum operand_parse_code): New operand.\n+\t(parse_operands): Handle new operand.\n+\t(mve_encode_qqr): Handle new instructions.\n+\t(do_neon_dyadic_i64_su): Accept MVE variants.\n+\t(neon_dyadic_misc): Likewise.\n+\t(do_neon_mac_maybe_scalar): Likewise.\n+\t(do_neon_mul): Likewise.\n+\t(insns): Change to accept MVE variants.\n+\t* testsuite/gas/arm/mve-vmla-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vmla-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vmla-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vmul-bad-1.d: New test.\n+\t* testsuite/gas/arm/mve-vmul-bad-1.l: New test.\n+\t* testsuite/gas/arm/mve-vmul-bad-1.s: New test.\n+\t* testsuite/gas/arm/mve-vmul-bad-2.d: New test.\n+\t* testsuite/gas/arm/mve-vmul-bad-2.l: New test.\n+\t* testsuite/gas/arm/mve-vmul-bad-2.s: New test.\n+\t* testsuite/gas/arm/mve-vqaddsub-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vqaddsub-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vqaddsub-bad.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (M_MNEM_vmlaldav, M_MNEM_vmlaldava,"
    },
    {
      "sha": "63d5af175c565b4a6bdd3a07dfedfd65128fc935",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 80,
      "deletions": 13,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -6951,6 +6951,8 @@ enum operand_parse_code\n   OP_RNSDQ_RNSC, /* Vector S, D or Q reg, or Neon scalar.  */\n   OP_RNSDQ_RNSC_MQ, /* Vector S, D or Q reg, Neon scalar or MVE vector register.\n \t\t     */\n+  OP_RNSDQ_RNSC_MQ_RR, /* Vector S, D or Q reg, or MVE vector reg , or Neon\n+\t\t\t  scalar, or ARM register.  */\n   OP_RNDQ_RNSC, /* Neon D or Q reg, or Neon scalar.  */\n   OP_RNDQMQ_RNSC, /* Neon D, Q or MVE vector reg, or Neon scalar.  */\n   OP_RND_RNSC,  /* Neon D reg, or Neon scalar.  */\n@@ -7325,6 +7327,10 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  }\n \t  break;\n \n+\tcase OP_RNSDQ_RNSC_MQ_RR:\n+\t  po_reg_or_goto (REG_TYPE_RN, try_rnsdq_rnsc_mq);\n+\t  break;\n+\ttry_rnsdq_rnsc_mq:\n \tcase OP_RNSDQ_RNSC_MQ:\n \t  po_reg_or_goto (REG_TYPE_MQ, try_rnsdq_rnsc);\n \t  break;\n@@ -15899,6 +15905,9 @@ mve_encode_qqr (int size, int U, int fp)\n       /* vsub.  */\n       else if (((unsigned)inst.instruction) == 0x200d00)\n \tinst.instruction = 0xee301f40;\n+      /* vmul.  */\n+      else if (((unsigned)inst.instruction) == 0x1000d10)\n+\tinst.instruction = 0xee310e60;\n \n       /* Setting size which is 1 for F16 and 0 for F32.  */\n       inst.instruction |= (size == 16) << 28;\n@@ -15917,6 +15926,18 @@ mve_encode_qqr (int size, int U, int fp)\n       /* vhsub.  */\n       else if (((unsigned)inst.instruction) == 0x200)\n \tinst.instruction = 0xee001f40;\n+      /* vmla.  */\n+      else if (((unsigned)inst.instruction) == 0x900)\n+\tinst.instruction = 0xee010e40;\n+      /* vmul.  */\n+      else if (((unsigned)inst.instruction) == 0x910)\n+\tinst.instruction = 0xee011e60;\n+      /* vqadd.  */\n+      else if (((unsigned)inst.instruction) == 0x10)\n+\tinst.instruction = 0xee000f60;\n+      /* vqsub.  */\n+      else if (((unsigned)inst.instruction) == 0x210)\n+\tinst.instruction = 0xee001f60;\n \n       /* Set U-bit.  */\n       inst.instruction |= U << 28;\n@@ -16145,10 +16166,24 @@ do_neon_dyadic_i_su (void)\n static void\n do_neon_dyadic_i64_su (void)\n {\n-  enum neon_shape rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n-  struct neon_type_el et = neon_check_type (3, rs,\n-    N_EQK, N_EQK, N_SU_ALL | N_KEY);\n-  neon_three_same (neon_quad (rs), et.type == NT_unsigned, et.size);\n+  if (check_simd_pred_availability (0, NEON_CHECK_CC | NEON_CHECK_ARCH))\n+    return;\n+  enum neon_shape rs;\n+  struct neon_type_el et;\n+  if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+    {\n+      rs = neon_select_shape (NS_QQR, NS_QQQ, NS_NULL);\n+      et = neon_check_type (3, rs, N_EQK, N_EQK, N_SU_MVE | N_KEY);\n+    }\n+  else\n+    {\n+      rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n+      et = neon_check_type (3, rs, N_EQK, N_EQK, N_SU_ALL | N_KEY);\n+    }\n+  if (rs == NS_QQR)\n+    mve_encode_qqr (et.size, et.type == NT_unsigned, 0);\n+  else\n+    neon_three_same (neon_quad (rs), et.type == NT_unsigned, et.size);\n }\n \n static void\n@@ -16442,7 +16477,7 @@ neon_dyadic_misc (enum neon_el_type ubit_meaning, unsigned types,\n     {\n       NEON_ENCODE (INTEGER, inst);\n       if (rs == NS_QQR)\n-\tmve_encode_qqr (et.size, 0, 0);\n+\tmve_encode_qqr (et.size, et.type == ubit_meaning, 0);\n       else\n \tneon_three_same (neon_quad (rs), et.type == ubit_meaning, et.size);\n     }\n@@ -16967,19 +17002,30 @@ do_neon_mac_maybe_scalar (void)\n   if (try_vfp_nsyn (3, do_vfp_nsyn_mla_mls) == SUCCESS)\n     return;\n \n-  if (vfp_or_neon_is_neon (NEON_CHECK_CC | NEON_CHECK_ARCH) == FAIL)\n+  if (check_simd_pred_availability (0, NEON_CHECK_CC | NEON_CHECK_ARCH))\n     return;\n \n   if (inst.operands[2].isscalar)\n     {\n+      constraint (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext), BAD_FPU);\n       enum neon_shape rs = neon_select_shape (NS_DDS, NS_QQS, NS_NULL);\n       struct neon_type_el et = neon_check_type (3, rs,\n \tN_EQK, N_EQK, N_I16 | N_I32 | N_F_16_32 | N_KEY);\n       NEON_ENCODE (SCALAR, inst);\n       neon_mul_mac (et, neon_quad (rs));\n     }\n+  else if (!inst.operands[2].isvec)\n+    {\n+      constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext), BAD_FPU);\n+\n+      enum neon_shape rs = neon_select_shape (NS_QQR, NS_NULL);\n+      neon_check_type (3, rs, N_EQK, N_EQK, N_SU_MVE | N_KEY);\n+\n+      neon_dyadic_misc (NT_unsigned, N_SU_MVE, 0);\n+    }\n   else\n     {\n+      constraint (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext), BAD_FPU);\n       /* The \"untyped\" case can't happen.  Do this to stop the \"U\" bit being\n \t affected if we specify unsigned args.  */\n       neon_dyadic_misc (NT_untyped, N_IF_32, 0);\n@@ -17047,13 +17093,34 @@ do_neon_mul (void)\n   if (try_vfp_nsyn (3, do_vfp_nsyn_mul) == SUCCESS)\n     return;\n \n-  if (vfp_or_neon_is_neon (NEON_CHECK_CC | NEON_CHECK_ARCH) == FAIL)\n+  if (check_simd_pred_availability (0, NEON_CHECK_CC | NEON_CHECK_ARCH))\n     return;\n \n   if (inst.operands[2].isscalar)\n-    do_neon_mac_maybe_scalar ();\n+    {\n+      constraint (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext), BAD_FPU);\n+      do_neon_mac_maybe_scalar ();\n+    }\n   else\n-    neon_dyadic_misc (NT_poly, N_I8 | N_I16 | N_I32 | N_F16 | N_F32 | N_P8, 0);\n+    {\n+      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+\t{\n+\t  enum neon_shape rs = neon_select_shape (NS_QQR, NS_QQQ, NS_NULL);\n+\t  struct neon_type_el et\n+\t    = neon_check_type (3, rs, N_EQK, N_EQK, N_I_MVE | N_F_MVE | N_KEY);\n+\t  if (et.type == NT_float)\n+\t    constraint (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_fp_ext),\n+\t\t\tBAD_FPU);\n+\n+\t  neon_dyadic_misc (NT_float, N_I_MVE | N_F_MVE, 0);\n+\t}\n+      else\n+\t{\n+\t  constraint (!inst.operands[2].isvec, BAD_FPU);\n+\t  neon_dyadic_misc (NT_poly,\n+\t\t\t    N_I8 | N_I16 | N_I32 | N_F16 | N_F32 | N_P8, 0);\n+\t}\n+    }\n }\n \n static void\n@@ -23776,8 +23843,6 @@ static const struct asm_opcode insns[] =\n  NCE(vcvtz,     0,       2, (RVSD, RVSD),       vfp_nsyn_cvtz),\n \n   /* Mnemonics shared by Neon and VFP.  */\n- nCEF(vmul,     _vmul,    3, (RNSDQ, oRNSDQ, RNSDQ_RNSC), neon_mul),\n- nCEF(vmla,     _vmla,    3, (RNSDQ, oRNSDQ, RNSDQ_RNSC), neon_mac_maybe_scalar),\n  nCEF(vmls,     _vmls,    3, (RNSDQ, oRNSDQ, RNSDQ_RNSC), neon_mac_maybe_scalar),\n \n  NCE(vldm,      c900b00, 2, (RRnpctw, VRSDLST), neon_ldm_stm),\n@@ -23831,9 +23896,7 @@ static const struct asm_opcode insns[] =\n  NUF(vrhaddq,   0000100, 3, (RNQ,  oRNQ,  RNQ),  neon_dyadic_i_su),\n  NUF(vhsubq,    0000200, 3, (RNQ,  oRNQ,  RNQ),  neon_dyadic_i_su),\n   /* integer ops, valid types S8 S16 S32 S64 U8 U16 U32 U64.  */\n- NUF(vqadd,     0000010, 3, (RNDQ, oRNDQ, RNDQ), neon_dyadic_i64_su),\n  NUF(vqaddq,    0000010, 3, (RNQ,  oRNQ,  RNQ),  neon_dyadic_i64_su),\n- NUF(vqsub,     0000210, 3, (RNDQ, oRNDQ, RNDQ), neon_dyadic_i64_su),\n  NUF(vqsubq,    0000210, 3, (RNQ,  oRNQ,  RNQ),  neon_dyadic_i64_su),\n  NUF(vrshl,     0000500, 3, (RNDQ, oRNDQ, RNDQ), neon_rshl),\n  NUF(vrshlq,    0000500, 3, (RNQ,  oRNQ,  RNQ),  neon_rshl),\n@@ -24601,6 +24664,8 @@ static const struct asm_opcode insns[] =\n #define ARM_VARIANT  & fpu_vfp_ext_v1\n #undef  THUMB_VARIANT\n #define THUMB_VARIANT  & arm_ext_v6t2\n+ mnCEF(vmla,     _vmla,    3, (RNSDQMQ, oRNSDQMQ, RNSDQ_RNSC_MQ_RR), neon_mac_maybe_scalar),\n+ mnCEF(vmul,     _vmul,    3, (RNSDQMQ, oRNSDQMQ, RNSDQ_RNSC_MQ_RR), neon_mul),\n \n  mcCE(fcpyd,\teb00b40, 2, (RVD, RVD),\t      vfp_dp_rd_rm),\n \n@@ -24661,6 +24726,8 @@ static const struct asm_opcode insns[] =\n  MNUF(vhsub,     00000200,\t  3, (RNDQMQ, oRNDQMQ, RNDQMQR),  neon_dyadic_i_su),\n  mnUF(vmin,      _vmin,    3, (RNDQMQ, oRNDQMQ, RNDQMQ), neon_dyadic_if_su),\n  mnUF(vmax,      _vmax,    3, (RNDQMQ, oRNDQMQ, RNDQMQ), neon_dyadic_if_su),\n+ MNUF(vqadd,     0000010,  3, (RNDQMQ, oRNDQMQ, RNDQMQR), neon_dyadic_i64_su),\n+ MNUF(vqsub,     0000210,  3, (RNDQMQ, oRNDQMQ, RNDQMQR), neon_dyadic_i64_su),\n \n #undef\tARM_VARIANT\n #define ARM_VARIANT & arm_ext_v8_3"
    },
    {
      "sha": "a5bc0634cffe01d2275318afb9d54ccb19592ff1",
      "filename": "gas/testsuite/gas/arm/mve-vmla-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmla-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmla-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmla-bad.d?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,5 @@\n+#name: Bad MVE VMLA instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vmla-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "12ed8f17abe0b7a1fc5b0072dd6ff6de08737c66",
      "filename": "gas/testsuite/gas/arm/mve-vmla-bad.l",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmla-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmla-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmla-bad.l?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,17 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vmla.f16 q0,q1,r2'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vmla.s64 q0,q1,r2'\n+[^:]*:12: Error: selected FPU does not support instruction -- `vmla.s32 q0,q1,q2'\n+[^:]*:13: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:14: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Error: syntax error -- `vmlaeq.u16 q0,q1,r2'\n+[^:]*:18: Error: syntax error -- `vmlaeq.u16 q0,q1,r2'\n+[^:]*:20: Error: syntax error -- `vmlaeq.u16 q0,q1,r2'\n+[^:]*:21: Error: vector predicated instruction should be in VPT/VPST block -- `vmlat.u16 q0,q1,r2'\n+[^:]*:23: Error: instruction missing MVE vector predication code -- `vmla.u16 q0,q1,r2'"
    },
    {
      "sha": "65de902fea4877a31d95b2803c5c7dbad1fe83f3",
      "filename": "gas/testsuite/gas/arm/mve-vmla-bad.s",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmla-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmla-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmla-bad.s?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,23 @@\n+.macro cond\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vmla.s16 q0, q1, r2\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vmla.f16 q0, q1, r2\n+vmla.s64 q0, q1, r2\n+vmla.s32 q0, q1, q2\n+vmla.s32 q0, q1, sp\n+vmla.s32 q0, q1, pc\n+cond\n+it eq\n+vmlaeq.u16 q0, q1, r2\n+vmlaeq.u16 q0, q1, r2\n+vpst\n+vmlaeq.u16 q0, q1, r2\n+vmlat.u16 q0, q1, r2\n+vpst\n+vmla.u16 q0, q1, r2"
    },
    {
      "sha": "1e3dc46b8650036990c3dafb53045f0a2c7e9130",
      "filename": "gas/testsuite/gas/arm/mve-vmul-bad-1.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmul-bad-1.d?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VMUL instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vmul-bad-1.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "88a86caf45feb6f74a09b8be9293c72476acd68f",
      "filename": "gas/testsuite/gas/arm/mve-vmul-bad-1.l",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-1.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-1.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmul-bad-1.l?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,31 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: selected FPU does not support instruction -- `vmul.f16 q0,q1,q2'\n+[^:]*:11: Error: selected FPU does not support instruction -- `vmul.f16 q0,q1,r2'\n+[^:]*:12: Error: selected FPU does not support instruction -- `vmul.f32 q0,q1,q2'\n+[^:]*:13: Error: selected FPU does not support instruction -- `vmul.f32 q0,q1,r2'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vmul.i64 q0,q1,q2'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vmul.i64 q0,q1,r2'\n+[^:]*:16: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:17: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Error: syntax error -- `vmuleq.i32 q0,q1,q2'\n+[^:]*:22: Error: syntax error -- `vmuleq.i32 q0,q1,q2'\n+[^:]*:24: Error: syntax error -- `vmuleq.i32 q0,q1,q2'\n+[^:]*:25: Error: vector predicated instruction should be in VPT/VPST block -- `vmult.i32 q0,q1,q2'\n+[^:]*:27: Error: instruction missing MVE vector predication code -- `vmul.i32 q0,q1,q2'\n+[^:]*:29: Error: syntax error -- `vmuleq.i32 q0,q1,r2'\n+[^:]*:30: Error: syntax error -- `vmuleq.i32 q0,q1,r2'\n+[^:]*:32: Error: syntax error -- `vmuleq.i32 q0,q1,r2'\n+[^:]*:33: Error: vector predicated instruction should be in VPT/VPST block -- `vmult.i32 q0,q1,r2'\n+[^:]*:35: Error: instruction missing MVE vector predication code -- `vmul.i32 q0,q1,r2'"
    },
    {
      "sha": "7897a1ab1037b28907de6c92f1c451f1eed2dd9f",
      "filename": "gas/testsuite/gas/arm/mve-vmul-bad-1.s",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmul-bad-1.s?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,35 @@\n+.macro cond lastreg\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vmul.i16 q0, q1, \\lastreg\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vmul.f16 q0, q1, q2\n+vmul.f16 q0, q1, r2\n+vmul.f32 q0, q1, q2\n+vmul.f32 q0, q1, r2\n+vmul.i64 q0, q1, q2\n+vmul.i64 q0, q1, r2\n+vmul.i8 q0, q1, pc\n+vmul.i8 q0, q1, sp\n+cond q2\n+cond r2\n+it eq\n+vmuleq.i32 q0, q1, q2\n+vmuleq.i32 q0, q1, q2\n+vpst\n+vmuleq.i32 q0, q1, q2\n+vmult.i32 q0, q1, q2\n+vpst\n+vmul.i32 q0, q1, q2\n+it eq\n+vmuleq.i32 q0, q1, r2\n+vmuleq.i32 q0, q1, r2\n+vpst\n+vmuleq.i32 q0, q1, r2\n+vmult.i32 q0, q1, r2\n+vpst\n+vmul.i32 q0, q1, r2"
    },
    {
      "sha": "27e639956e2d969a41691beba523a5f287325d5b",
      "filename": "gas/testsuite/gas/arm/mve-vmul-bad-2.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmul-bad-2.d?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE FP VMUL instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vmul-bad-2.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "a804da8be25f5ca508fb1a4b127d3bb0b9950bdc",
      "filename": "gas/testsuite/gas/arm/mve-vmul-bad-2.l",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-2.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-2.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmul-bad-2.l?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,47 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vmul.f64 q0,q1,q2'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vmul.f64 q0,q1,r2'\n+[^:]*:12: Error: bad type in SIMD instruction -- `vmul.i64 q0,q1,q2'\n+[^:]*:13: Error: bad type in SIMD instruction -- `vmul.i64 q0,q1,r2'\n+[^:]*:14: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:15: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:16: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:17: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:18: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:19: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:20: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:21: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Error: syntax error -- `vmuleq.f16 q0,q1,q2'\n+[^:]*:28: Error: syntax error -- `vmuleq.f16 q0,q1,q2'\n+[^:]*:30: Error: syntax error -- `vmuleq.f16 q0,q1,q2'\n+[^:]*:31: Error: vector predicated instruction should be in VPT/VPST block -- `vmult.f16 q0,q1,q2'\n+[^:]*:33: Error: instruction missing MVE vector predication code -- `vmul.f16 q0,q1,q2'\n+[^:]*:35: Error: syntax error -- `vmuleq.f32 q0,q1,r2'\n+[^:]*:36: Error: syntax error -- `vmuleq.f32 q0,q1,r2'\n+[^:]*:38: Error: syntax error -- `vmuleq.f32 q0,q1,r2'\n+[^:]*:39: Error: vector predicated instruction should be in VPT/VPST block -- `vmult.f32 q0,q1,r2'\n+[^:]*:41: Error: instruction missing MVE vector predication code -- `vmul.f32 q0,q1,r2'"
    },
    {
      "sha": "b5ed4ebff02853ace6030242a413dfe5fd9b0053",
      "filename": "gas/testsuite/gas/arm/mve-vmul-bad-2.s",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vmul-bad-2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmul-bad-2.s?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,41 @@\n+.macro cond size, lastreg\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vmul.\\size q0, q1, \\lastreg\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vmul.f64 q0, q1, q2\n+vmul.f64 q0, q1, r2\n+vmul.i64 q0, q1, q2\n+vmul.i64 q0, q1, r2\n+vmul.f16 q0, q1, pc\n+vmul.f16 q0, q1, pc\n+vmul.f16 q0, q1, sp\n+vmul.f16 q0, q1, sp\n+vmul.i32 q0, q1, pc\n+vmul.i32 q0, q1, pc\n+vmul.i32 q0, q1, sp\n+vmul.i32 q0, q1, sp\n+cond i8 q2\n+cond i16 r2\n+cond f16 q2\n+cond f32 r2\n+it eq\n+vmuleq.f16 q0, q1, q2\n+vmuleq.f16 q0, q1, q2\n+vpst\n+vmuleq.f16 q0, q1, q2\n+vmult.f16 q0, q1, q2\n+vpst\n+vmul.f16 q0, q1, q2\n+it eq\n+vmuleq.f32 q0, q1, r2\n+vmuleq.f32 q0, q1, r2\n+vpst\n+vmuleq.f32 q0, q1, r2\n+vmult.f32 q0, q1, r2\n+vpst\n+vmul.f32 q0, q1, r2"
    },
    {
      "sha": "f37595e49055486c10a5b0f71e8f45e90373b775",
      "filename": "gas/testsuite/gas/arm/mve-vqaddsub-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vqaddsub-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vqaddsub-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqaddsub-bad.d?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VQADD and VQSUB instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vqaddsub-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "1869371c0c9bf215496aab815e35e7e66ecf2ac8",
      "filename": "gas/testsuite/gas/arm/mve-vqaddsub-bad.l",
      "status": "added",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vqaddsub-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vqaddsub-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqaddsub-bad.l?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,57 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vqadd.s64 q0,q1,q2'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vqsub.u64 q0,q1,q2'\n+[^:]*:12: Error: bad type in SIMD instruction -- `vqadd.s64 q0,q1,r2'\n+[^:]*:13: Error: bad type in SIMD instruction -- `vqsub.s64 q0,q1,r2'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vqadd.f32 q0,q1,q2'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vqsub.f32 q0,q1,q2'\n+[^:]*:16: Error: bad type in SIMD instruction -- `vqadd.f32 q0,q1,r2'\n+[^:]*:17: Error: bad type in SIMD instruction -- `vqsub.f32 q0,q1,r2'\n+[^:]*:18: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:19: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:20: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:21: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Error: syntax error -- `vqaddeq.s32 q0,q1,q2'\n+[^:]*:28: Error: syntax error -- `vqaddeq.s32 q0,q1,q2'\n+[^:]*:30: Error: syntax error -- `vqaddeq.s32 q0,q1,q2'\n+[^:]*:31: Error: vector predicated instruction should be in VPT/VPST block -- `vqaddt.s32 q0,q1,q2'\n+[^:]*:33: Error: instruction missing MVE vector predication code -- `vqadd.s32 q0,q1,q2'\n+[^:]*:35: Error: syntax error -- `vqsubeq.s32 q0,q1,q2'\n+[^:]*:36: Error: syntax error -- `vqsubeq.s32 q0,q1,q2'\n+[^:]*:38: Error: syntax error -- `vqsubeq.s32 q0,q1,q2'\n+[^:]*:39: Error: vector predicated instruction should be in VPT/VPST block -- `vqsubt.s32 q0,q1,q2'\n+[^:]*:41: Error: instruction missing MVE vector predication code -- `vqsub.s32 q0,q1,q2'\n+[^:]*:43: Error: syntax error -- `vqaddeq.s32 q0,q1,r2'\n+[^:]*:44: Error: syntax error -- `vqaddeq.s32 q0,q1,r2'\n+[^:]*:46: Error: syntax error -- `vqaddeq.s32 q0,q1,r2'\n+[^:]*:47: Error: vector predicated instruction should be in VPT/VPST block -- `vqaddt.s32 q0,q1,r2'\n+[^:]*:49: Error: instruction missing MVE vector predication code -- `vqadd.s32 q0,q1,r2'\n+[^:]*:51: Error: syntax error -- `vqsubeq.s32 q0,q1,r2'\n+[^:]*:52: Error: syntax error -- `vqsubeq.s32 q0,q1,r2'\n+[^:]*:54: Error: syntax error -- `vqsubeq.s32 q0,q1,r2'\n+[^:]*:55: Error: vector predicated instruction should be in VPT/VPST block -- `vqsubt.s32 q0,q1,r2'\n+[^:]*:57: Error: instruction missing MVE vector predication code -- `vqsub.s32 q0,q1,r2'"
    },
    {
      "sha": "d5303173c6c940834940206739257c8a08e83965",
      "filename": "gas/testsuite/gas/arm/mve-vqaddsub-bad.s",
      "status": "added",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vqaddsub-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8465a06e0986374f501d0e286a5f351af2aa878/gas/testsuite/gas/arm/mve-vqaddsub-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqaddsub-bad.s?ref=a8465a06e0986374f501d0e286a5f351af2aa878",
      "patch": "@@ -0,0 +1,57 @@\n+.macro cond op, lastop\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().s16 q0, q1, \\lastop\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vqadd.s64 q0, q1, q2\n+vqsub.u64 q0, q1, q2\n+vqadd.s64 q0, q1, r2\n+vqsub.s64 q0, q1, r2\n+vqadd.f32 q0, q1, q2\n+vqsub.f32 q0, q1, q2\n+vqadd.f32 q0, q1, r2\n+vqsub.f32 q0, q1, r2\n+vqadd.s16 q0, q1, sp\n+vqadd.s16 q0, q1, pc\n+vqsub.s16 q0, q1, sp\n+vqsub.s16 q0, q1, pc\n+cond vqadd q2\n+cond vqadd r2\n+cond vqsub q2\n+cond vqsub r2\n+it eq\n+vqaddeq.s32 q0, q1, q2\n+vqaddeq.s32 q0, q1, q2\n+vpst\n+vqaddeq.s32 q0, q1, q2\n+vqaddt.s32 q0, q1, q2\n+vpst\n+vqadd.s32 q0, q1, q2\n+it eq\n+vqsubeq.s32 q0, q1, q2\n+vqsubeq.s32 q0, q1, q2\n+vpst\n+vqsubeq.s32 q0, q1, q2\n+vqsubt.s32 q0, q1, q2\n+vpst\n+vqsub.s32 q0, q1, q2\n+it eq\n+vqaddeq.s32 q0, q1, r2\n+vqaddeq.s32 q0, q1, r2\n+vpst\n+vqaddeq.s32 q0, q1, r2\n+vqaddt.s32 q0, q1, r2\n+vpst\n+vqadd.s32 q0, q1, r2\n+it eq\n+vqsubeq.s32 q0, q1, r2\n+vqsubeq.s32 q0, q1, r2\n+vpst\n+vqsubeq.s32 q0, q1, r2\n+vqsubt.s32 q0, q1, r2\n+vpst\n+vqsub.s32 q0, q1, r2"
    }
  ]
}