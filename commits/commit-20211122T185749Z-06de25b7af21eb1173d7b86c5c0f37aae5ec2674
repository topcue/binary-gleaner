{
  "sha": "06de25b7af21eb1173d7b86c5c0f37aae5ec2674",
  "node_id": "C_kwDOANOeidoAKDA2ZGUyNWI3YWYyMWViMTE3M2Q3Yjg2YzVjMGYzN2FhZTVlYzI2NzQ",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-11-22T16:27:30Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-22T18:57:49Z"
    },
    "message": "gdb: introduce target_waitkind_str, use it in target_waitstatus::to_string\n\nI would like to print target_waitkind values in debug messages, so I\nthink that a target_waitkind-to-string function would be useful.  While\nat it, use it in target_waitstatus::to_string.  This changes the output\nof target_waitstatus::to_string a bit, but I think it is for the better.\nThe debug messages will show a string matching exactly the\ntarget_waitkind enumerator (minus the TARGET_WAITKIND prefix).\n\nAs a convenience, make string_appendf return the same reference to\nstring it got as a parameter.  This allows doing this:\n\n  return string_appendf (str, \"foo\");\n\n... keeping the code concise.\n\nChange-Id: I383dffc9c78614e7d0668b1516073905e798eef7",
    "tree": {
      "sha": "257ca777e7e7c96de2844956bb61256f1ed5e111",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/257ca777e7e7c96de2844956bb61256f1ed5e111"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/06de25b7af21eb1173d7b86c5c0f37aae5ec2674",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06de25b7af21eb1173d7b86c5c0f37aae5ec2674",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/06de25b7af21eb1173d7b86c5c0f37aae5ec2674",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06de25b7af21eb1173d7b86c5c0f37aae5ec2674/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7dca2ea7ff4c2c786119e13e81a5e6b0c1bf1d2d"
    }
  ],
  "stats": {
    "total": 134,
    "additions": 84,
    "deletions": 50
  },
  "files": [
    {
      "sha": "a7209e3f2b703b03acdfcc29fe434aa325889ba5",
      "filename": "gdb/target/waitstatus.c",
      "status": "modified",
      "additions": 22,
      "deletions": 44,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06de25b7af21eb1173d7b86c5c0f37aae5ec2674/gdb/target/waitstatus.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06de25b7af21eb1173d7b86c5c0f37aae5ec2674/gdb/target/waitstatus.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target/waitstatus.c?ref=06de25b7af21eb1173d7b86c5c0f37aae5ec2674",
      "patch": "@@ -20,73 +20,51 @@\n #include \"gdbsupport/common-defs.h\"\n #include \"waitstatus.h\"\n \n-/* Return a pretty printed form of target_waitstatus.  */\n+/* See waitstatus.h.  */\n \n std::string\n target_waitstatus::to_string () const\n {\n-  const char *kind_str = \"status->kind = \";\n+  std::string str = string_printf\n+    (\"status->kind = %s\", target_waitkind_str (this->kind ()));\n \n+/* Make sure the compiler warns if a new TARGET_WAITKIND enumerator is added\n+   but not handled here.  */\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic error \"-Wswitch\"\n   switch (this->kind ())\n     {\n     case TARGET_WAITKIND_EXITED:\n-      return string_printf (\"%sexited, status = %d\",\n-\t\t\t    kind_str, this->exit_status ());\n+    case TARGET_WAITKIND_THREAD_EXITED:\n+      return string_appendf (str, \", exit_status = %d\", this->exit_status ());\n \n     case TARGET_WAITKIND_STOPPED:\n-      return string_printf (\"%sstopped, signal = %s\",\n-\t\t\t    kind_str,\n-\t\t\t    gdb_signal_to_symbol_string (this->sig ()));\n-\n     case TARGET_WAITKIND_SIGNALLED:\n-      return string_printf (\"%ssignalled, signal = %s\",\n-\t\t\t    kind_str,\n-\t\t\t    gdb_signal_to_symbol_string (this->sig ()));\n-\n-    case TARGET_WAITKIND_LOADED:\n-      return string_printf (\"%sloaded\", kind_str);\n+      return string_appendf (str, \", sig = %s\",\n+\t\t\t     gdb_signal_to_symbol_string (this->sig ()));\n \n     case TARGET_WAITKIND_FORKED:\n-      return string_printf (\"%sforked, child_ptid = %s\", kind_str,\n-\t\t\t    this->child_ptid ().to_string ().c_str ());\n-\n     case TARGET_WAITKIND_VFORKED:\n-      return string_printf (\"%svforked, child_ptid = %s\", kind_str,\n-\t\t\t    this->child_ptid ().to_string ().c_str ());\n+      return string_appendf (str, \", child_ptid = %s\",\n+\t\t\t     this->child_ptid ().to_string ().c_str ());\n \n     case TARGET_WAITKIND_EXECD:\n-      return string_printf (\"%sexecd, execd_pathname = %s\", kind_str,\n-\t\t\t    this->execd_pathname ());\n+      return string_appendf (str, \", execd_pathname = %s\",\n+\t\t\t     this->execd_pathname ());\n \n+    case TARGET_WAITKIND_LOADED:\n     case TARGET_WAITKIND_VFORK_DONE:\n-      return string_printf (\"%svfork-done\", kind_str);\n-\n+    case TARGET_WAITKIND_SPURIOUS:\n     case TARGET_WAITKIND_SYSCALL_ENTRY:\n-      return string_printf (\"%sentered syscall\", kind_str);\n-\n     case TARGET_WAITKIND_SYSCALL_RETURN:\n-      return string_printf (\"%sexited syscall\", kind_str);\n-\n-    case TARGET_WAITKIND_SPURIOUS:\n-      return string_printf (\"%sspurious\", kind_str);\n-\n     case TARGET_WAITKIND_IGNORE:\n-      return string_printf (\"%signore\", kind_str);\n-\n     case TARGET_WAITKIND_NO_HISTORY:\n-      return string_printf (\"%sno-history\", kind_str);\n-\n     case TARGET_WAITKIND_NO_RESUMED:\n-      return string_printf (\"%sno-resumed\", kind_str);\n-\n     case TARGET_WAITKIND_THREAD_CREATED:\n-      return string_printf (\"%sthread created\", kind_str);\n-\n-    case TARGET_WAITKIND_THREAD_EXITED:\n-      return string_printf (\"%sthread exited, status = %d\",\n-\t\t\t    kind_str, this->exit_status ());\n-\n-    default:\n-      return string_printf (\"%sunknown???\", kind_str);\n+      return str;\n     }\n+#pragma GCC diagnostic pop\n+\n+  gdb_assert_not_reached (\"invalid target_waitkind value: %d\",\n+\t\t\t  (int) this->kind ());\n }"
    },
    {
      "sha": "48405d222f4efcb74533ecb57bb40a80ca0457a8",
      "filename": "gdb/target/waitstatus.h",
      "status": "modified",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06de25b7af21eb1173d7b86c5c0f37aae5ec2674/gdb/target/waitstatus.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06de25b7af21eb1173d7b86c5c0f37aae5ec2674/gdb/target/waitstatus.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target/waitstatus.h?ref=06de25b7af21eb1173d7b86c5c0f37aae5ec2674",
      "patch": "@@ -101,6 +101,55 @@ enum target_waitkind\n   TARGET_WAITKIND_THREAD_EXITED,\n };\n \n+/* Return KIND as a string.  */\n+\n+static inline const char *\n+target_waitkind_str (target_waitkind kind)\n+{\n+/* Make sure the compiler warns if a new TARGET_WAITKIND enumerator is added\n+   but not handled here.  */\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic error \"-Wswitch\"\n+  switch (kind)\n+  {\n+    case TARGET_WAITKIND_EXITED:\n+      return \"EXITED\";\n+    case TARGET_WAITKIND_STOPPED:\n+      return \"STOPPED\";\n+    case TARGET_WAITKIND_SIGNALLED:\n+      return \"SIGNALLED\";\n+    case TARGET_WAITKIND_LOADED:\n+      return \"LOADED\";\n+    case TARGET_WAITKIND_FORKED:\n+      return \"FORKED\";\n+    case TARGET_WAITKIND_VFORKED:\n+      return \"VFORKED\";\n+    case TARGET_WAITKIND_EXECD:\n+      return \"EXECD\";\n+    case TARGET_WAITKIND_VFORK_DONE:\n+      return \"VFORK_DONE\";\n+    case TARGET_WAITKIND_SYSCALL_ENTRY:\n+      return \"SYSCALL_ENTRY\";\n+    case TARGET_WAITKIND_SYSCALL_RETURN:\n+      return \"SYSCALL_RETURN\";\n+    case TARGET_WAITKIND_SPURIOUS:\n+      return \"SPURIOUS\";\n+    case TARGET_WAITKIND_IGNORE:\n+      return \"IGNORE\";\n+    case TARGET_WAITKIND_NO_HISTORY:\n+      return \"NO_HISTORY\";\n+    case TARGET_WAITKIND_NO_RESUMED:\n+      return \"NO_RESUMED\";\n+    case TARGET_WAITKIND_THREAD_CREATED:\n+      return \"THREAD_CREATED\";\n+    case TARGET_WAITKIND_THREAD_EXITED:\n+      return \"THREAD_EXITED\";\n+  };\n+#pragma GCC diagnostic pop\n+\n+  gdb_assert_not_reached (\"invalid target_waitkind value: %d\\n\", (int) kind);\n+}\n+\n struct target_waitstatus\n {\n   /* Default constructor.  */"
    },
    {
      "sha": "aa0f45241b958f566b8f4ef3ba41d07c55d9fea0",
      "filename": "gdb/unittests/common-utils-selftests.c",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06de25b7af21eb1173d7b86c5c0f37aae5ec2674/gdb/unittests/common-utils-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06de25b7af21eb1173d7b86c5c0f37aae5ec2674/gdb/unittests/common-utils-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/common-utils-selftests.c?ref=06de25b7af21eb1173d7b86c5c0f37aae5ec2674",
      "patch": "@@ -80,7 +80,8 @@ string_vprintf_tests ()\n /* Type of both 'string_appendf' and the 'string_vappendf_wrapper'\n    function below.  Used to run the same tests against both\n    string_appendf and string_vappendf.  */\n-typedef void (string_appendf_func) (std::string &str, const char *fmt, ...)\n+typedef std::string &(string_appendf_func) (std::string &str, const char *fmt,\n+\t\t\t\t\t    ...)\n   ATTRIBUTE_PRINTF (2, 3);\n \n static void\n@@ -101,14 +102,16 @@ test_appendf_func (string_appendf_func *func)\n   SELF_CHECK (str == \"test23foo 45 bar\");\n }\n \n-static void ATTRIBUTE_PRINTF (2, 3)\n+static std::string & ATTRIBUTE_PRINTF (2, 3)\n string_vappendf_wrapper (std::string &str, const char *fmt, ...)\n {\n   va_list vp;\n \n   va_start (vp, fmt);\n   string_vappendf (str, fmt, vp);\n   va_end (vp);\n+\n+  return str;\n }\n \n static void"
    },
    {
      "sha": "b591537e62ea04c2e2bf7ec08c9537e8c4f0ee96",
      "filename": "gdbsupport/common-utils.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06de25b7af21eb1173d7b86c5c0f37aae5ec2674/gdbsupport/common-utils.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06de25b7af21eb1173d7b86c5c0f37aae5ec2674/gdbsupport/common-utils.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-utils.cc?ref=06de25b7af21eb1173d7b86c5c0f37aae5ec2674",
      "patch": "@@ -119,20 +119,22 @@ string_vprintf (const char* fmt, va_list args)\n \n /* See documentation in common-utils.h.  */\n \n-void\n+std::string &\n string_appendf (std::string &str, const char *fmt, ...)\n {\n   va_list vp;\n \n   va_start (vp, fmt);\n   string_vappendf (str, fmt, vp);\n   va_end (vp);\n+\n+  return str;\n }\n \n \n /* See documentation in common-utils.h.  */\n \n-void\n+std::string &\n string_vappendf (std::string &str, const char *fmt, va_list args)\n {\n   va_list vp;\n@@ -148,6 +150,8 @@ string_vappendf (std::string &str, const char *fmt, va_list args)\n   /* C++11 and later guarantee std::string uses contiguous memory and\n      always includes the terminating '\\0'.  */\n   vsprintf (&str[curr_size], fmt, args); /* ARI: vsprintf */\n+\n+  return str;\n }\n \n char *"
    },
    {
      "sha": "98a9dc72f368d5926e5d55854f8f55777cd13cca",
      "filename": "gdbsupport/common-utils.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/06de25b7af21eb1173d7b86c5c0f37aae5ec2674/gdbsupport/common-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/06de25b7af21eb1173d7b86c5c0f37aae5ec2674/gdbsupport/common-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-utils.h?ref=06de25b7af21eb1173d7b86c5c0f37aae5ec2674",
      "patch": "@@ -54,11 +54,11 @@ std::string string_vprintf (const char* fmt, va_list args)\n \n /* Like string_printf, but appends to DEST instead of returning a new\n    std::string.  */\n-void string_appendf (std::string &dest, const char* fmt, ...)\n+std::string &string_appendf (std::string &dest, const char* fmt, ...)\n   ATTRIBUTE_PRINTF (2, 3);\n \n /* Like string_appendf, but takes a va_list.  */\n-void string_vappendf (std::string &dest, const char* fmt, va_list args)\n+std::string &string_vappendf (std::string &dest, const char* fmt, va_list args)\n   ATTRIBUTE_PRINTF (2, 0);\n \n /* Make a copy of the string at PTR with LEN characters"
    }
  ]
}