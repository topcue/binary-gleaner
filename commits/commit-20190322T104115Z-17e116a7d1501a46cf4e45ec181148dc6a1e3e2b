{
  "sha": "17e116a7d1501a46cf4e45ec181148dc6a1e3e2b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTdlMTE2YTdkMTUwMWE0NmNmNGU0NWVjMTgxMTQ4ZGM2YTFlM2UyYg==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-22T10:41:15Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-22T10:41:15Z"
    },
    "message": "AArch64: Prologue scan unwinder support for signed return addresses\n\nPauth address signing is enabled at binary compile time.  When enabled the\nreturn addresses for functions may be mangled.  This patch adds functionality\nto restore the original address for use in the prologue scan unwinder.\n\nIn the prologue analyzer, check for PACIASP/PACIBSP (enable address mangling)\nand AUTIASP/AUTIBSP (disable address mangling).\n\nWhen unwinding the PC from the prologue, unmask the register if required.\n\nAdd a test case to the prologue tests.\n\ngdb/ChangeLog:\n\n\t* aarch64-tdep.c (aarch64_analyze_prologue): Check for pauth\n\tinstructions.\n\t(aarch64_analyze_prologue_test): Add PACIASP test.\n\t(aarch64_prologue_prev_register): Unmask PC value.",
    "tree": {
      "sha": "40deddfbbe26fc77b1acb428e170a8a3d600a8b2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/40deddfbbe26fc77b1acb428e170a8a3d600a8b2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/17e116a7d1501a46cf4e45ec181148dc6a1e3e2b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17e116a7d1501a46cf4e45ec181148dc6a1e3e2b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/17e116a7d1501a46cf4e45ec181148dc6a1e3e2b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17e116a7d1501a46cf4e45ec181148dc6a1e3e2b/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "11e1b75f0696f6e406fe8ccc759bac2fbc8fc151",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/11e1b75f0696f6e406fe8ccc759bac2fbc8fc151",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/11e1b75f0696f6e406fe8ccc759bac2fbc8fc151"
    }
  ],
  "stats": {
    "total": 97,
    "additions": 91,
    "deletions": 6
  },
  "files": [
    {
      "sha": "c23881976c07f6bde57e2ceaf952059a463771b4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17e116a7d1501a46cf4e45ec181148dc6a1e3e2b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17e116a7d1501a46cf4e45ec181148dc6a1e3e2b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=17e116a7d1501a46cf4e45ec181148dc6a1e3e2b",
      "patch": "@@ -1,3 +1,11 @@\n+2019-03-22  Alan Hayward  <alan.hayward@arm.com>\n+\t    Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* aarch64-tdep.c (aarch64_analyze_prologue): Check for pauth\n+\tinstructions.\n+\t(aarch64_analyze_prologue_test): Add PACIASP test.\n+\t(aarch64_prologue_prev_register): Unmask PC value.\n+\n 2019-03-22  Alan Hayward  <alan.hayward@arm.com>\n \t    Jiong Wang  <jiong.wang@arm.com>\n "
    },
    {
      "sha": "247d0ed4c63c1de4dd6f581ce09b0fb2ab17fed1",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 83,
      "deletions": 6,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17e116a7d1501a46cf4e45ec181148dc6a1e3e2b/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17e116a7d1501a46cf4e45ec181148dc6a1e3e2b/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=17e116a7d1501a46cf4e45ec181148dc6a1e3e2b",
      "patch": "@@ -476,6 +476,37 @@ aarch64_analyze_prologue (struct gdbarch *gdbarch,\n \t  /* Stop analysis on branch.  */\n \t  break;\n \t}\n+      else if (inst.opcode->iclass == ic_system)\n+\t{\n+\t  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+\t  int ra_state_val = 0;\n+\n+\t  if (insn == 0xd503233f /* paciasp.  */\n+\t      || insn == 0xd503237f  /* pacibsp.  */)\n+\t    {\n+\t      /* Return addresses are mangled.  */\n+\t      ra_state_val = 1;\n+\t    }\n+\t  else if (insn == 0xd50323bf /* autiasp.  */\n+\t\t   || insn == 0xd50323ff /* autibsp.  */)\n+\t    {\n+\t      /* Return addresses are not mangled.  */\n+\t      ra_state_val = 0;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (aarch64_debug)\n+\t\tdebug_printf (\"aarch64: prologue analysis gave up addr=%s\"\n+\t\t\t      \" opcode=0x%x (iclass)\\n\",\n+\t\t\t      core_addr_to_string_nz (start), insn);\n+\t      break;\n+\t    }\n+\n+\t  if (tdep->has_pauth () && cache != nullptr)\n+\t    trad_frame_set_value (cache->saved_regs,\n+\t\t\t\t  tdep->pauth_ra_state_regnum,\n+\t\t\t\t  ra_state_val);\n+\t}\n       else\n \t{\n \t  if (aarch64_debug)\n@@ -582,11 +613,13 @@ aarch64_analyze_prologue_test (void)\n   struct gdbarch *gdbarch = gdbarch_find_by_info (info);\n   SELF_CHECK (gdbarch != NULL);\n \n+  struct aarch64_prologue_cache cache;\n+  cache.saved_regs = trad_frame_alloc_saved_regs (gdbarch);\n+\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+\n   /* Test the simple prologue in which frame pointer is used.  */\n   {\n-    struct aarch64_prologue_cache cache;\n-    cache.saved_regs = trad_frame_alloc_saved_regs (gdbarch);\n-\n     static const uint32_t insns[] = {\n       0xa9af7bfd, /* stp     x29, x30, [sp,#-272]! */\n       0x910003fd, /* mov     x29, sp */\n@@ -622,9 +655,6 @@ aarch64_analyze_prologue_test (void)\n   /* Test a prologue in which STR is used and frame pointer is not\n      used.  */\n   {\n-    struct aarch64_prologue_cache cache;\n-    cache.saved_regs = trad_frame_alloc_saved_regs (gdbarch);\n-\n     static const uint32_t insns[] = {\n       0xf81d0ff3, /* str\tx19, [sp, #-48]! */\n       0xb9002fe0, /* str\tw0, [sp, #44] */\n@@ -664,6 +694,45 @@ aarch64_analyze_prologue_test (void)\n \t\t      == -1);\n       }\n   }\n+\n+  /* Test a prologue in which there is a return address signing instruction.  */\n+  if (tdep->has_pauth ())\n+    {\n+      static const uint32_t insns[] = {\n+\t0xd503233f, /* paciasp */\n+\t0xa9bd7bfd, /* stp\tx29, x30, [sp, #-48]! */\n+\t0x910003fd, /* mov\tx29, sp */\n+\t0xf801c3f3, /* str\tx19, [sp, #28] */\n+\t0xb9401fa0, /* ldr\tx19, [x29, #28] */\n+      };\n+      instruction_reader_test reader (insns);\n+\n+      CORE_ADDR end = aarch64_analyze_prologue (gdbarch, 0, 128, &cache,\n+\t\t\t\t\t\treader);\n+\n+      SELF_CHECK (end == 4 * 4);\n+      SELF_CHECK (cache.framereg == AARCH64_FP_REGNUM);\n+      SELF_CHECK (cache.framesize == 48);\n+\n+      for (int i = 0; i < AARCH64_X_REGISTER_COUNT; i++)\n+\t{\n+\t  if (i == 19)\n+\t    SELF_CHECK (cache.saved_regs[i].addr == -20);\n+\t  else if (i == AARCH64_FP_REGNUM)\n+\t    SELF_CHECK (cache.saved_regs[i].addr == -48);\n+\t  else if (i == AARCH64_LR_REGNUM)\n+\t    SELF_CHECK (cache.saved_regs[i].addr == -40);\n+\t  else\n+\t    SELF_CHECK (cache.saved_regs[i].addr == -1);\n+\t}\n+\n+      if (tdep->has_pauth ())\n+\t{\n+\t  SELF_CHECK (trad_frame_value_p (cache.saved_regs,\n+\t\t\t\t\t  tdep->pauth_ra_state_regnum));\n+\t  SELF_CHECK (cache.saved_regs[tdep->pauth_ra_state_regnum].addr == 1);\n+\t}\n+    }\n }\n } // namespace selftests\n #endif /* GDB_SELF_TEST */\n@@ -873,8 +942,16 @@ aarch64_prologue_prev_register (struct frame_info *this_frame,\n   if (prev_regnum == AARCH64_PC_REGNUM)\n     {\n       CORE_ADDR lr;\n+      struct gdbarch *gdbarch = get_frame_arch (this_frame);\n+      struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n \n       lr = frame_unwind_register_unsigned (this_frame, AARCH64_LR_REGNUM);\n+\n+      if (tdep->has_pauth ()\n+\t  && trad_frame_value_p (cache->saved_regs,\n+\t\t\t\t tdep->pauth_ra_state_regnum))\n+\tlr = aarch64_frame_unmask_address (tdep, this_frame, lr);\n+\n       return frame_unwind_got_constant (this_frame, prev_regnum, lr);\n     }\n "
    }
  ]
}