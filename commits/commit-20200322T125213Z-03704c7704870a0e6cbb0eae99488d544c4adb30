{
  "sha": "03704c7704870a0e6cbb0eae99488d544c4adb30",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDM3MDRjNzcwNDg3MGEwZTZjYmIwZWFlOTk0ODhkNTQ0YzRhZGIzMA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-22T07:45:41Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-22T12:52:13Z"
    },
    "message": "NS32K arg_bufs uninitialised\n\ngit commit d1e304bc27 was aimed at stopping uninitialised memory\naccess to the index_offset array.  Unfortunately that patch resulted\nin a different array being uninitialised for all instructions with\nmore than two arguments.\n\n\t* ns32k-dis.c (print_insn_arg): Update comment.\n\t(print_insn_ns32k): Reduce size of index_offset array, and\n\tinitialize, passing -1 to print_insn_arg for args that are not\n\tan index.  Don't exit arg loop early.  Abort on bad arg number.",
    "tree": {
      "sha": "6f74ee9792cb6f11a7e1a8386845c0499610cb2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6f74ee9792cb6f11a7e1a8386845c0499610cb2d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/03704c7704870a0e6cbb0eae99488d544c4adb30",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03704c7704870a0e6cbb0eae99488d544c4adb30",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/03704c7704870a0e6cbb0eae99488d544c4adb30",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03704c7704870a0e6cbb0eae99488d544c4adb30/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d1023b5d1e4483e5fa3bdab97bc041e1b1c05c5d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d1023b5d1e4483e5fa3bdab97bc041e1b1c05c5d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d1023b5d1e4483e5fa3bdab97bc041e1b1c05c5d"
    }
  ],
  "stats": {
    "total": 26,
    "additions": 17,
    "deletions": 9
  },
  "files": [
    {
      "sha": "06b81d7b54795edc579b561d779be808322092bc",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03704c7704870a0e6cbb0eae99488d544c4adb30/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03704c7704870a0e6cbb0eae99488d544c4adb30/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=03704c7704870a0e6cbb0eae99488d544c4adb30",
      "patch": "@@ -1,3 +1,10 @@\n+2020-03-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* ns32k-dis.c (print_insn_arg): Update comment.\n+\t(print_insn_ns32k): Reduce size of index_offset array, and\n+\tinitialize, passing -1 to print_insn_arg for args that are not\n+\tan index.  Don't exit arg loop early.  Abort on bad arg number.\n+\n 2020-03-22  Alan Modra  <amodra@gmail.com>\n \n \t* s12z-dis.c (abstract_read_memory): Don't print error on EOI."
    },
    {
      "sha": "12df182d0a442bec0f222741126739130f7dd4c1",
      "filename": "opcodes/ns32k-dis.c",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03704c7704870a0e6cbb0eae99488d544c4adb30/opcodes/ns32k-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03704c7704870a0e6cbb0eae99488d544c4adb30/opcodes/ns32k-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ns32k-dis.c?ref=03704c7704870a0e6cbb0eae99488d544c4adb30",
      "patch": "@@ -446,7 +446,7 @@ invalid_float (float_type_u *p, int len)\n    bit position of the addressing extension.  BUFFER contains the\n    instruction.  ADDR is where BUFFER was read from.  Put the disassembled\n    version of the operand in RESULT.  INDEX_OFFSET is the bit position\n-   of the index byte (it contains garbage if this operand is not a\n+   of the index byte (it contains -1 if this operand is not a\n    general operand using scaled indexed addressing mode).  */\n \n static int\n@@ -790,10 +790,8 @@ print_insn_ns32k (bfd_vma memaddr, disassemble_info *info)\n   if (*d)\n     {\n       /* Offset in bits of the first thing beyond each index byte.\n-\t Element 0 is for operand A and element 1 is for operand B.\n-\t The rest are irrelevant, but we put them here so we don't\n-\t index outside the array.  */\n-      int index_offset[MAX_ARGS];\n+\t Element 0 is for operand A and element 1 is for operand B.  */\n+      int index_offset[2];\n \n       /* 0 for operand A, 1 for operand B, greater for other args.  */\n       int whicharg = 0;\n@@ -806,6 +804,8 @@ print_insn_ns32k (bfd_vma memaddr, disassemble_info *info)\n \t if we are using scaled indexed addressing mode, since the index\n \t bytes occur right after the basic instruction, not as part\n \t of the addressing extension.  */\n+      index_offset[0] = -1;\n+      index_offset[1] = -1;\n       if (Is_gen (d[1]))\n \t{\n \t  int bitoff = d[1] == 'f' ? 10 : 5;\n@@ -832,15 +832,16 @@ print_insn_ns32k (bfd_vma memaddr, disassemble_info *info)\n       while (*d)\n \t{\n \t  argnum = *d - '1';\n+\t  if (argnum >= MAX_ARGS)\n+\t    abort ();\n \t  d++;\n-\t  if (argnum > maxarg && argnum < MAX_ARGS)\n+\t  if (argnum > maxarg)\n \t    maxarg = argnum;\n \t  ioffset = print_insn_arg (*d, ioffset, &aoffset, buffer,\n \t\t\t\t    memaddr, arg_bufs[argnum],\n-\t\t\t\t    index_offset[whicharg]);\n+\t\t\t\t    whicharg > 1 ? -1 : index_offset[whicharg]);\n \t  d++;\n-\t  if (whicharg++ >= 1)\n-\t    break;\n+\t  whicharg++;\n \t}\n \n       for (argnum = 0; argnum <= maxarg; argnum++)"
    }
  ]
}