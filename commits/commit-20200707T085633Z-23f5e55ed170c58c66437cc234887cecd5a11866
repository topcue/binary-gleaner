{
  "sha": "23f5e55ed170c58c66437cc234887cecd5a11866",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjNmNWU1NWVkMTcwYzU4YzY2NDM3Y2MyMzQ4ODdjZWNkNWExMTg2Ng==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-07-07T00:28:10Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-07-07T08:56:33Z"
    },
    "message": "XCOFF ld segfaults when running ld testsuite\n\nThe binutils XCOFF support doesn't handle random linker scripts very\nwell at all.  These tweaks to final_link fix segfaults when some\nlinker created sections are discarded due to \"/DISCARD/ : { *(.*) }\"\nin scripts.  The xcoff_mark change is necessary to not segfault on\nsymbols defined in scripts, which may be bfd_link_hash_defined yet\nhave u.def.section set to bfd_und_section_ptr.  (Which might seem odd,\nbut occurs during early stages of linking before input sections are\nmapped.)\n\n\t* xcofflink.c (xcoff_mark): Don't mark const sections.\n\t(bfd_xcoff_record_link_assignment): Add FIXME.\n\t(_bfd_xcoff_bfd_final_link): Don't segfault on assorted magic\n\tsections being discarded by linker script.",
    "tree": {
      "sha": "18b44f85ca2f28968ede60e9db3f426d70daf8e8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/18b44f85ca2f28968ede60e9db3f426d70daf8e8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/23f5e55ed170c58c66437cc234887cecd5a11866",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/23f5e55ed170c58c66437cc234887cecd5a11866",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/23f5e55ed170c58c66437cc234887cecd5a11866",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/23f5e55ed170c58c66437cc234887cecd5a11866/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c800188601ee6f537d268fcadfbac7be0389ced7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c800188601ee6f537d268fcadfbac7be0389ced7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c800188601ee6f537d268fcadfbac7be0389ced7"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 30,
    "deletions": 7
  },
  "files": [
    {
      "sha": "7511be9fdcb98ddddfe1839efe6a3be87a5fbc66",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23f5e55ed170c58c66437cc234887cecd5a11866/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23f5e55ed170c58c66437cc234887cecd5a11866/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=23f5e55ed170c58c66437cc234887cecd5a11866",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-07  Alan Modra  <amodra@gmail.com>\n+\n+\t* xcofflink.c (xcoff_mark): Don't mark const sections.\n+\t(bfd_xcoff_record_link_assignment): Add FIXME.\n+\t(_bfd_xcoff_bfd_final_link): Don't segfault on assorted magic\n+\tsections being discarded by linker script.\n+\n 2020-07-07  Alan Modra  <amodra@gmail.com>\n \n \t* coff-rs6000.c (xcoff_write_archive_contents_old): Set default"
    },
    {
      "sha": "985e2217429242d6ab57a041fb84569db014a632",
      "filename": "bfd/xcofflink.c",
      "status": "modified",
      "additions": 23,
      "deletions": 7,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23f5e55ed170c58c66437cc234887cecd5a11866/bfd/xcofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23f5e55ed170c58c66437cc234887cecd5a11866/bfd/xcofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/xcofflink.c?ref=23f5e55ed170c58c66437cc234887cecd5a11866",
      "patch": "@@ -2898,7 +2898,7 @@ xcoff_mark_symbol_by_name (struct bfd_link_info *info,\n static bfd_boolean\n xcoff_mark (struct bfd_link_info *info, asection *sec)\n {\n-  if (bfd_is_abs_section (sec)\n+  if (bfd_is_const_section (sec)\n       || (sec->flags & SEC_MARK) != 0)\n     return TRUE;\n \n@@ -3210,7 +3210,13 @@ bfd_xcoff_link_count_reloc (bfd *output_bfd,\n }\n \n /* This function is called for each symbol to which the linker script\n-   assigns a value.  */\n+   assigns a value.\n+   FIXME: In cases like the linker test ld-scripts/defined5 where a\n+   symbol is defined both by an input object file and the script,\n+   the script definition doesn't override the object file definition\n+   as is usual for other targets.  At least not when the symbol is\n+   output.  Other uses of the symbol value by the linker do use the\n+   script value.  */\n \n bfd_boolean\n bfd_xcoff_record_link_assignment (bfd *output_bfd,\n@@ -6327,7 +6333,9 @@ _bfd_xcoff_bfd_final_link (bfd *abfd, struct bfd_link_info *info)\n \n   /* Write out the loader section contents.  */\n   o = xcoff_hash_table (info)->loader_section;\n-  if (o)\n+  if (o != NULL\n+      && o->size != 0\n+      && o->output_section != bfd_abs_section_ptr)\n     {\n       BFD_ASSERT ((bfd_byte *) flinfo.ldrel\n \t\t  == (xcoff_hash_table (info)->loader_section->contents\n@@ -6339,19 +6347,25 @@ _bfd_xcoff_bfd_final_link (bfd *abfd, struct bfd_link_info *info)\n \n   /* Write out the magic sections.  */\n   o = xcoff_hash_table (info)->linkage_section;\n-  if (o->size > 0\n+  if (o != NULL\n+      && o->size != 0\n+      && o->output_section != bfd_abs_section_ptr\n       && ! bfd_set_section_contents (abfd, o->output_section, o->contents,\n \t\t\t\t     (file_ptr) o->output_offset,\n \t\t\t\t     o->size))\n     goto error_return;\n   o = xcoff_hash_table (info)->toc_section;\n-  if (o->size > 0\n+  if (o != NULL\n+      && o->size != 0\n+      && o->output_section != bfd_abs_section_ptr\n       && ! bfd_set_section_contents (abfd, o->output_section, o->contents,\n \t\t\t\t     (file_ptr) o->output_offset,\n \t\t\t\t     o->size))\n     goto error_return;\n   o = xcoff_hash_table (info)->descriptor_section;\n-  if (o->size > 0\n+  if (o != NULL\n+      && o->size != 0\n+      && o->output_section != bfd_abs_section_ptr\n       && ! bfd_set_section_contents (abfd, o->output_section, o->contents,\n \t\t\t\t     (file_ptr) o->output_offset,\n \t\t\t\t     o->size))\n@@ -6374,7 +6388,9 @@ _bfd_xcoff_bfd_final_link (bfd *abfd, struct bfd_link_info *info)\n \n   /* Write out the debugging string table.  */\n   o = xcoff_hash_table (info)->debug_section;\n-  if (o != NULL)\n+  if (o != NULL\n+      && o->size != 0\n+      && o->output_section != bfd_abs_section_ptr)\n     {\n       struct bfd_strtab_hash *debug_strtab;\n "
    }
  ]
}