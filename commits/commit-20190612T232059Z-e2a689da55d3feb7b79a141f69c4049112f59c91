{
  "sha": "e2a689da55d3feb7b79a141f69c4049112f59c91",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTJhNjg5ZGE1NWQzZmViN2I3OWExNDFmNjljNDA0OTExMmY1OWM5MQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:06:53Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:20:59Z"
    },
    "message": "lib/completion-support.exp: Add test_gdb_completion_offers_commands\n\nThis adds a procedure to the collection of completion-testing\nroutines, that allows checking whether completion offers all commands\nas completion candidates.  This will be used for testing completing\n\"frame apply all [TAB]\", \"thread apply all [TAB]\", etc.\n\ngdb/testsuite/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n        * lib/completion-support.exp (test_gdb_complete_tab_multiple)\n\t(test_gdb_complete_cmd_multiple, test_gdb_complete_multiple): Add\n\t'max_completions' parameter and handle it.\n\t(test_gdb_completion_offers_commands): New.",
    "tree": {
      "sha": "7823c8128fcf35c847c9a6d6bc430e84cd4703aa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7823c8128fcf35c847c9a6d6bc430e84cd4703aa"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e2a689da55d3feb7b79a141f69c4049112f59c91",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2a689da55d3feb7b79a141f69c4049112f59c91",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e2a689da55d3feb7b79a141f69c4049112f59c91",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2a689da55d3feb7b79a141f69c4049112f59c91/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "90a1ef8762a57f3f57007db2186099c026152034",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90a1ef8762a57f3f57007db2186099c026152034",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/90a1ef8762a57f3f57007db2186099c026152034"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 64,
    "deletions": 9
  },
  "files": [
    {
      "sha": "d550142ff05d50d494bf66217d52d6dd750a4a14",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2a689da55d3feb7b79a141f69c4049112f59c91/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2a689da55d3feb7b79a141f69c4049112f59c91/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e2a689da55d3feb7b79a141f69c4049112f59c91",
      "patch": "@@ -1,3 +1,10 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+        * lib/completion-support.exp (test_gdb_complete_tab_multiple)\n+\t(test_gdb_complete_cmd_multiple, test_gdb_complete_multiple): Add\n+\t'max_completions' parameter and handle it.\n+\t(test_gdb_completion_offers_commands): New.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.base/options.exp (test-backtrace): Test completing qualifiers."
    },
    {
      "sha": "97fed18b055c5d9a2617de7f0c4f407f0716e965",
      "filename": "gdb/testsuite/lib/completion-support.exp",
      "status": "modified",
      "additions": 57,
      "deletions": 9,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2a689da55d3feb7b79a141f69c4049112f59c91/gdb/testsuite/lib/completion-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2a689da55d3feb7b79a141f69c4049112f59c91/gdb/testsuite/lib/completion-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/completion-support.exp?ref=e2a689da55d3feb7b79a141f69c4049112f59c91",
      "patch": "@@ -119,17 +119,24 @@ proc test_gdb_complete_tab_unique { input_line complete_line_re append_char_re }\n \n # Test that completing INPUT_LINE with TAB completes to \"INPUT_LINE +\n # ADD_COMPLETED_LINE\" and that it displays the completion matches in\n-# COMPLETION_LIST.\n+# COMPLETION_LIST.  If MAX_COMPLETIONS then we expect the completion\n+# to hit the max-completions limit.\n \n proc test_gdb_complete_tab_multiple { input_line add_completed_line \\\n-\t\t\t\t\t  completion_list } {\n+\t\t\t\t\t  completion_list {max_completions 0}} {\n     global gdb_prompt\n \n     set input_line_re [string_to_regexp $input_line]\n     set add_completed_line_re [string_to_regexp $add_completed_line]\n \n     set expected_re [make_tab_completion_list_re $completion_list]\n \n+    if {$max_completions} {\n+\tappend expected_re \"\\r\\n\"\n+\tappend expected_re \\\n+\t    \"\\\\*\\\\*\\\\* List may be truncated, max-completions reached\\\\. \\\\*\\\\*\\\\*\"\n+    }\n+\n     set test \"tab complete \\\"$input_line\\\"\"\n     send_gdb \"$input_line\\t\"\n     gdb_test_multiple \"\" \"$test (first tab)\" {\n@@ -179,12 +186,20 @@ proc test_gdb_complete_cmd_unique { input_line complete_line_re } {\n \n # Test that completing \"CMD_PREFIX + COMPLETION_WORD\" with the\n # complete command displays the COMPLETION_LIST completion list.  Each\n-# entry in the list should be prefixed by CMD_PREFIX.\n+# entry in the list should be prefixed by CMD_PREFIX.  If\n+# MAX_COMPLETIONS then we expect the completion to hit the\n+# max-completions limit.\n \n-proc test_gdb_complete_cmd_multiple { cmd_prefix completion_word completion_list {start_quote_char \"\"} {end_quote_char \"\"} } {\n+proc test_gdb_complete_cmd_multiple { cmd_prefix completion_word completion_list {start_quote_char \"\"} {end_quote_char \"\"} {max_completions 0}} {\n     global gdb_prompt\n \n     set expected_re [make_cmd_completion_list_re $cmd_prefix $completion_list $start_quote_char $end_quote_char]\n+\n+    if {$max_completions} {\n+\tappend expected_re \\\n+\t    \"$cmd_prefix \\\\*\\\\*\\\\* List may be truncated, max-completions reached\\\\. \\\\*\\\\*\\\\*.*\\r\\n\"\n+    }\n+\n     set cmd_re [string_to_regexp \"complete $cmd_prefix$completion_word\"]\n     set test \"cmd complete \\\"$cmd_prefix$completion_word\\\"\"\n     gdb_test_multiple \"complete $cmd_prefix$completion_word\" $test {\n@@ -255,11 +270,15 @@ proc test_gdb_complete_unique { input_line complete_line {append_char \" \"} {max_\n # Test that completing \"CMD_PREFIX + COMPLETION_WORD\" adds\n # ADD_COMPLETED_LINE to the input line, and that it displays\n # COMPLETION_LIST as completion match list.  COMPLETION_WORD is the\n-# completion word.\n-\n-proc test_gdb_complete_multiple { cmd_prefix completion_word add_completed_line completion_list {start_quote_char \"\"} {end_quote_char \"\"}} {\n-    test_gdb_complete_tab_multiple \"$cmd_prefix$completion_word\" $add_completed_line $completion_list\n-    test_gdb_complete_cmd_multiple $cmd_prefix $completion_word $completion_list $start_quote_char $end_quote_char\n+# completion word.  If MAX_COMPLETIONS then we expect the completion\n+# to hit the max-completions limit.\n+\n+proc test_gdb_complete_multiple {\n+  cmd_prefix completion_word add_completed_line completion_list\n+  {start_quote_char \"\"} {end_quote_char \"\"} {max_completions 0}\n+} {\n+    test_gdb_complete_tab_multiple \"$cmd_prefix$completion_word\" $add_completed_line $completion_list $max_completions\n+    test_gdb_complete_cmd_multiple $cmd_prefix $completion_word $completion_list $start_quote_char $end_quote_char $max_completions\n }\n \n # Test that all the substring prefixes of INPUT from [0..START) to\n@@ -481,3 +500,32 @@ proc foreach_location_labels { sources functions labels body_linespec body_expli\n \t    }\n \t}\n }\n+\n+# Check that completion of INPUT_LINE results in GDB completing on all\n+# command names.\n+proc test_gdb_completion_offers_commands {input_line} {\n+    global gdb_prompt\n+\n+    # There are two many commands to usefully check here.  So we force\n+    # max-completions to 2, and check if those 2 come out.\n+\n+    # Save current max-completions.\n+    set max_completions 0\n+    set test \"show max-completions\"\n+    gdb_test_multiple $test $test {\n+\t-re \"Maximum number of completion candidates is (.*)\\\\.\\r\\n$gdb_prompt $\" {\n+\t    set max_completions $expect_out(1,string)\n+\t}\n+    }\n+\n+    # Force showing two commands.\n+    gdb_test_no_output \"set max-completions 2\" \"\"\n+\n+    test_gdb_complete_multiple $input_line \"\" \"\" {\n+\t\"!\"\n+\t\"+\"\n+    } \"\" \"\" 1\n+\n+    # Restore.\n+    gdb_test_no_output \"set max-completions $max_completions\" \"\"\n+}"
    }
  ]
}