{
  "sha": "ce25aa57a3cdd028be5868423e6e55506ccd1053",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2UyNWFhNTdhM2NkZDAyOGJlNTg2ODQyM2U2ZTU1NTA2Y2NkMTA1Mw==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-03-12T20:39:02Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-03-12T20:45:48Z"
    },
    "message": "Support TLS variables on FreeBSD/i386.\n\nDerive the pointer to the DTV array from the gs_base register.  As\nwith FreeBSD/amd64, gs_base is currently only available via the native\ntarget.\n\ngdb/ChangeLog:\n\n\t* i386-fbsd-tdep.c (i386fbsd_get_thread_local_address): New.\n\t(i386fbsd_init_abi): Install gdbarch\n\t\"fetch_tls_load_module_address\" and \"get_thread_local_address\"\n\tmethods.",
    "tree": {
      "sha": "d72c8af64c8d5538ad2a82dcaebacfcab3ec3dbb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d72c8af64c8d5538ad2a82dcaebacfcab3ec3dbb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ce25aa57a3cdd028be5868423e6e55506ccd1053",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce25aa57a3cdd028be5868423e6e55506ccd1053",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ce25aa57a3cdd028be5868423e6e55506ccd1053",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce25aa57a3cdd028be5868423e6e55506ccd1053/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f5424cfa7e9337a6cb02a1f83c9feea0995c5350",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5424cfa7e9337a6cb02a1f83c9feea0995c5350",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f5424cfa7e9337a6cb02a1f83c9feea0995c5350"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 36,
    "deletions": 0
  },
  "files": [
    {
      "sha": "b26f554e47d0ea3e5c0333c22656e77946c6108e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ce25aa57a3cdd028be5868423e6e55506ccd1053/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ce25aa57a3cdd028be5868423e6e55506ccd1053/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ce25aa57a3cdd028be5868423e6e55506ccd1053",
      "patch": "@@ -1,3 +1,10 @@\n+2019-03-12  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* i386-fbsd-tdep.c (i386fbsd_get_thread_local_address): New.\n+\t(i386fbsd_init_abi): Install gdbarch\n+\t\"fetch_tls_load_module_address\" and \"get_thread_local_address\"\n+\tmethods.\n+\n 2019-03-12  John Baldwin  <jhb@FreeBSD.org>\n \n \t* amd64-fbsd-tdep.c (amd64fbsd_get_thread_local_address): New."
    },
    {
      "sha": "f274847174cf37ed07589550e28e3af50d09ddc3",
      "filename": "gdb/i386-fbsd-tdep.c",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ce25aa57a3cdd028be5868423e6e55506ccd1053/gdb/i386-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ce25aa57a3cdd028be5868423e6e55506ccd1053/gdb/i386-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-fbsd-tdep.c?ref=ce25aa57a3cdd028be5868423e6e55506ccd1053",
      "patch": "@@ -320,6 +320,30 @@ i386fbsd_iterate_over_regset_sections (struct gdbarch *gdbarch,\n \t\"XSAVE extended state\", cb_data);\n }\n \n+/* Implement the get_thread_local_address gdbarch method.  */\n+\n+static CORE_ADDR\n+i386fbsd_get_thread_local_address (struct gdbarch *gdbarch, ptid_t ptid,\n+\t\t\t\t   CORE_ADDR lm_addr, CORE_ADDR offset)\n+{\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  struct regcache *regcache;\n+\n+  if (tdep->fsbase_regnum == -1)\n+    error (_(\"Unable to fetch %%gsbase\"));\n+\n+  regcache = get_thread_arch_regcache (ptid, gdbarch);\n+\n+  target_fetch_registers (regcache, tdep->fsbase_regnum + 1);\n+\n+  ULONGEST gsbase;\n+  if (regcache->cooked_read (tdep->fsbase_regnum + 1, &gsbase) != REG_VALID)\n+    error (_(\"Unable to fetch %%gsbase\"));\n+\n+  CORE_ADDR dtv_addr = gsbase + gdbarch_ptr_bit (gdbarch) / 8;\n+  return fbsd_get_thread_local_address (gdbarch, dtv_addr, lm_addr, offset);\n+}\n+\n static void\n i386fbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n@@ -418,6 +442,11 @@ i386fbsd4_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n \n   set_gdbarch_core_read_description (gdbarch,\n \t\t\t\t     i386fbsd_core_read_description);\n+\n+  set_gdbarch_fetch_tls_load_module_address (gdbarch,\n+\t\t\t\t\t     svr4_fetch_objfile_link_map);\n+  set_gdbarch_get_thread_local_address (gdbarch,\n+\t\t\t\t\ti386fbsd_get_thread_local_address);\n }\n \n void"
    }
  ]
}