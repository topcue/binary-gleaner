{
  "sha": "217083254a26b9e1dc42c43f573054740988c2cf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjE3MDgzMjU0YTI2YjllMWRjNDJjNDNmNTczMDU0NzQwOTg4YzJjZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-06-15T05:12:16Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-10T01:28:14Z"
    },
    "message": "Introduce all_objfiles and next_iterator\n\nThis introduces an iterable object which can be used to iterate over\nobjfiles.  It also introduces a generic \"next_iterator\", which can be\nused to iterate over types that have a \"next\" field.\n\ngdb/ChangeLog\n2019-01-09  Tom Tromey  <tom@tromey.com>\n\n\t* common/next-iterator.h: New file.\n\t* objfiles.h (class all_objfiles): New.\n\t(struct objfile_iterator): New.",
    "tree": {
      "sha": "f1f71ece7cdd6a3e533ddc276bf9ec79c0096283",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f1f71ece7cdd6a3e533ddc276bf9ec79c0096283"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/217083254a26b9e1dc42c43f573054740988c2cf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/217083254a26b9e1dc42c43f573054740988c2cf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/217083254a26b9e1dc42c43f573054740988c2cf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/217083254a26b9e1dc42c43f573054740988c2cf/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d30e1903399c32605d38b8d75a612c0d5d3d18b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d30e1903399c32605d38b8d75a612c0d5d3d18b5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d30e1903399c32605d38b8d75a612c0d5d3d18b5"
    }
  ],
  "stats": {
    "total": 125,
    "additions": 125,
    "deletions": 0
  },
  "files": [
    {
      "sha": "62338d76ca35414ab8df8a3ae83c5079829e9715",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/217083254a26b9e1dc42c43f573054740988c2cf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/217083254a26b9e1dc42c43f573054740988c2cf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=217083254a26b9e1dc42c43f573054740988c2cf",
      "patch": "@@ -1,3 +1,9 @@\n+2019-01-09  Tom Tromey  <tom@tromey.com>\n+\n+\t* common/next-iterator.h: New file.\n+\t* objfiles.h (class all_objfiles): New.\n+\t(struct objfile_iterator): New.\n+\n 2019-01-09  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* NEWS: Move the description of the changed \"frame\", \"select-frame\","
    },
    {
      "sha": "588ebfd9d1f1433e10524877bccda2524dce1a92",
      "filename": "gdb/common/next-iterator.h",
      "status": "added",
      "additions": 102,
      "deletions": 0,
      "changes": 102,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/217083254a26b9e1dc42c43f573054740988c2cf/gdb/common/next-iterator.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/217083254a26b9e1dc42c43f573054740988c2cf/gdb/common/next-iterator.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/next-iterator.h?ref=217083254a26b9e1dc42c43f573054740988c2cf",
      "patch": "@@ -0,0 +1,102 @@\n+/* A \"next\" iterator for GDB, the GNU debugger.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef COMMON_NEXT_ITERATOR_H\n+#define COMMON_NEXT_ITERATOR_H\n+\n+/* An iterator that uses the 'next' field of a type to iterate.  This\n+   can be used with various GDB types that are stored as linked\n+   lists.  */\n+\n+template<typename T>\n+struct next_iterator\n+{\n+  typedef next_iterator self_type;\n+  typedef T *value_type;\n+  typedef T *&reference;\n+  typedef T **pointer;\n+  typedef std::forward_iterator_tag iterator_category;\n+  typedef int difference_type;\n+\n+  explicit next_iterator (T *item)\n+    : m_item (item)\n+  {\n+  }\n+\n+  /* Create a one-past-the-end iterator.  */\n+  next_iterator ()\n+    : m_item (nullptr)\n+  {\n+  }\n+\n+  value_type operator* () const\n+  {\n+    return m_item;\n+  }\n+\n+  bool operator== (const self_type &other) const\n+  {\n+    return m_item == other.m_item;\n+  }\n+\n+  bool operator!= (const self_type &other) const\n+  {\n+    return m_item != other.m_item;\n+  }\n+\n+  self_type &operator++ ()\n+  {\n+    m_item = m_item->next;\n+    return *this;\n+  }\n+\n+private:\n+\n+  T *m_item;\n+};\n+\n+/* A range adapter that allows iterating over a linked list.  */\n+\n+template<typename T>\n+class next_adapter\n+{\n+public:\n+\n+  explicit next_adapter (T *item)\n+    : m_item (item)\n+  {\n+  }\n+\n+  using iterator = next_iterator<T>;\n+\n+  iterator begin () const\n+  {\n+    return iterator (m_item);\n+  }\n+\n+  iterator end () const\n+  {\n+    return iterator ();\n+  }\n+\n+private:\n+\n+  T *m_item;\n+};\n+\n+#endif /* COMMON_NEXT_ITERATOR_H */"
    },
    {
      "sha": "8d7a3c35e11ae6e19006c1e7a7e7fabf535cbde7",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/217083254a26b9e1dc42c43f573054740988c2cf/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/217083254a26b9e1dc42c43f573054740988c2cf/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=217083254a26b9e1dc42c43f573054740988c2cf",
      "patch": "@@ -28,6 +28,7 @@\n #include \"registry.h\"\n #include \"gdb_bfd.h\"\n #include <vector>\n+#include \"common/next-iterator.h\"\n \n struct bcache;\n struct htab;\n@@ -565,6 +566,22 @@ extern void default_iterate_over_objfiles_in_search_order\n    void *cb_data, struct objfile *current_objfile);\n \f\n \n+/* An iterarable object that can be used to iterate over all\n+   objfiles.  The basic use is in a foreach, like:\n+\n+   for (objfile *objf : all_objfiles (pspace)) { ... }  */\n+\n+class all_objfiles : public next_adapter<struct objfile>\n+{\n+public:\n+\n+  explicit all_objfiles (struct program_space *pspace)\n+    : next_adapter<struct objfile> (pspace->objfiles)\n+  {\n+  }\n+};\n+\n+\n /* Traverse all object files in the current program space.\n    ALL_OBJFILES_SAFE works even if you delete the objfile during the\n    traversal.  */"
    }
  ]
}