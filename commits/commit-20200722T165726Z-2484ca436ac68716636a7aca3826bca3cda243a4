{
  "sha": "2484ca436ac68716636a7aca3826bca3cda243a4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjQ4NGNhNDM2YWM2ODcxNjYzNmE3YWNhMzgyNmJjYTNjZGEyNDNhNA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-02T19:26:29Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T16:57:26Z"
    },
    "message": "libctf, open: drop unnecessary historical wart around forwards\n\nWhen opening, we consider a forward with a kind above the maximum\nallowable set of kinds and a forward of kind CTF_K_UNKNOWN to be a\nforward to a struct.  Whatever CTF version it was that produced\nforwards with no associated kind, it predates anything we can read:\nremove this wart.\n\nlibctf/\n\t* ctf-open.c (init_types): Remove typeless CTF_K_FORWARD\n\tspecial-casing.",
    "tree": {
      "sha": "f43e2b3693ef4597519bc11bf25f2d9e4510016f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f43e2b3693ef4597519bc11bf25f2d9e4510016f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2484ca436ac68716636a7aca3826bca3cda243a4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2484ca436ac68716636a7aca3826bca3cda243a4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2484ca436ac68716636a7aca3826bca3cda243a4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2484ca436ac68716636a7aca3826bca3cda243a4/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "437061996d8d25ba902903e15952cfc14257b839",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/437061996d8d25ba902903e15952cfc14257b839",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/437061996d8d25ba902903e15952cfc14257b839"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 8,
    "deletions": 9
  },
  "files": [
    {
      "sha": "61aebd1422efbc06e2f648ad22e1afcdf2b578ca",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2484ca436ac68716636a7aca3826bca3cda243a4/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2484ca436ac68716636a7aca3826bca3cda243a4/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=2484ca436ac68716636a7aca3826bca3cda243a4",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-open.c (init_types): Remove typeless CTF_K_FORWARD\n+\tspecial-casing.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-types.c (ctf_type_reference): Add support for dynamic slices."
    },
    {
      "sha": "05672f36498b64e9f27cf31e3706380ecb7e54b1",
      "filename": "libctf/ctf-open.c",
      "status": "modified",
      "additions": 3,
      "deletions": 9,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2484ca436ac68716636a7aca3826bca3cda243a4/libctf/ctf-open.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2484ca436ac68716636a7aca3826bca3cda243a4/libctf/ctf-open.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open.c?ref=2484ca436ac68716636a7aca3826bca3cda243a4",
      "patch": "@@ -692,17 +692,11 @@ init_types (ctf_file_t *fp, ctf_header_t *cth)\n       if (vbytes < 0)\n \treturn ECTF_CORRUPT;\n \n+      /* For forward declarations, ctt_type is the CTF_K_* kind for the tag,\n+\t so bump that population count too.  */\n       if (kind == CTF_K_FORWARD)\n-\t{\n-\t  /* For forward declarations, ctt_type is the CTF_K_* kind for the tag,\n-\t     so bump that population count too.  If ctt_type is unknown, treat\n-\t     the tag as a struct.  */\n+\tpop[tp->ctt_type]++;\n \n-\t  if (tp->ctt_type == CTF_K_UNKNOWN || tp->ctt_type >= CTF_K_MAX)\n-\t    pop[CTF_K_STRUCT]++;\n-\t  else\n-\t    pop[tp->ctt_type]++;\n-\t}\n       tp = (ctf_type_t *) ((uintptr_t) tp + increment + vbytes);\n       pop[kind]++;\n     }"
    }
  ]
}