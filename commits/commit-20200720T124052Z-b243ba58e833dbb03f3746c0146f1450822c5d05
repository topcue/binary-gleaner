{
  "sha": "b243ba58e833dbb03f3746c0146f1450822c5d05",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjI0M2JhNThlODMzZGJiMDNmMzc0NmMwMTQ2ZjE0NTA4MjJjNWQwNQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-07-20T12:40:52Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-07-20T12:40:52Z"
    },
    "message": "[gdb/testsuite] Stabilize execution order in omp-par-scope.c\n\nIn openmp test-case gdb.threads/omp-par-scope.exp we xfail and kfail dependent\non omp_get_thread_num ().  Since execution order of the threads can vary from\nexecution to execution, this can cause changes in test results.\n\nF.i., we can see this difference between two test runs:\n...\n-KFAIL: single_scope: first thread: print i3 (PRMS: gdb/22214)\n+PASS: single_scope: first thread: print i3\n-PASS: single_scope: second thread: print i3\n+KFAIL: single_scope: second thread: print i3 (PRMS: gdb/22214)\n...\nIn both cases, the KFAIL is for omp_get_thread_num () == 1, but in one case\nthat corresponds to the first thread executing that bit of code, and in the\nother case to the second thread.\n\nGet rid of this difference by stabilizing execution order.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2020-07-20  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.threads/omp-par-scope.c (lock, lock2): New variable.\n\t(omp_set_lock_in_order): New function.\n\t(single_scope, multi_scope, nested_func, nested_parallel): Use\n\tomp_set_lock_in_order and omp_unset_lock.\n\t(main): Init and destroy lock and lock2.",
    "tree": {
      "sha": "404f612c9bac73fb5430b45acec7cb34a93b7812",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/404f612c9bac73fb5430b45acec7cb34a93b7812"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b243ba58e833dbb03f3746c0146f1450822c5d05",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b243ba58e833dbb03f3746c0146f1450822c5d05",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b243ba58e833dbb03f3746c0146f1450822c5d05",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b243ba58e833dbb03f3746c0146f1450822c5d05/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "98b3697bcdedb92739d8feb9b881efdd70fd40d3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/98b3697bcdedb92739d8feb9b881efdd70fd40d3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/98b3697bcdedb92739d8feb9b881efdd70fd40d3"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 55,
    "deletions": 0
  },
  "files": [
    {
      "sha": "9e2e7e2754899f8461642a59fd0abde215fabe49",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b243ba58e833dbb03f3746c0146f1450822c5d05/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b243ba58e833dbb03f3746c0146f1450822c5d05/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=b243ba58e833dbb03f3746c0146f1450822c5d05",
      "patch": "@@ -1,3 +1,11 @@\n+2020-07-20  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.threads/omp-par-scope.c (lock, lock2): New variable.\n+\t(omp_set_lock_in_order): New function.\n+\t(single_scope, multi_scope, nested_func, nested_parallel): Use\n+\tomp_set_lock_in_order and omp_unset_lock.\n+\t(main): Init and destroy lock and lock2.\n+\n 2020-07-20  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/valgrind-infcall-2.exp: Handle printf unknown return type."
    },
    {
      "sha": "57b0beb7b6df1ebdb92ef16472f1df85d6a39c67",
      "filename": "gdb/testsuite/gdb.threads/omp-par-scope.c",
      "status": "modified",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b243ba58e833dbb03f3746c0146f1450822c5d05/gdb/testsuite/gdb.threads/omp-par-scope.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b243ba58e833dbb03f3746c0146f1450822c5d05/gdb/testsuite/gdb.threads/omp-par-scope.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/omp-par-scope.c?ref=b243ba58e833dbb03f3746c0146f1450822c5d05",
      "patch": "@@ -18,6 +18,28 @@\n #include <stdio.h>\n #include <omp.h>\n \n+omp_lock_t lock;\n+omp_lock_t lock2;\n+\n+/* Enforce execution order between two threads using a lock.  */\n+\n+static void\n+omp_set_lock_in_order (int num, omp_lock_t *lock)\n+{\n+  /* Ensure that thread num 0 first sets the lock.  */\n+  if (num == 0)\n+    omp_set_lock (lock);\n+  #pragma omp barrier\n+\n+  /* Block thread num 1 until it can set the lock.  */\n+  if (num == 1)\n+    omp_set_lock (lock);\n+\n+  /* This bit here is guaranteed to be executed first by thread num 0, and\n+     once thread num 0 unsets the lock, to be executed by thread num 1.  */\n+  ;\n+}\n+\n /* Testcase for checking access to variables in a single / outer scope.\n    Make sure that variables not referred to in the parallel section are\n    accessible from the debugger.  */\n@@ -31,13 +53,16 @@ single_scope (void)\n #pragma omp parallel num_threads (2) shared (s1, i1) private (s2, i2)\n   {\n     int thread_num = omp_get_thread_num ();\n+    omp_set_lock_in_order (thread_num, &lock);\n \n     s2 = 100 * (thread_num + 1) + 2;\n     i2 = s2 + 10;\n \n     #pragma omp critical\n     printf (\"single_scope: thread_num=%d, s1=%d, i1=%d, s2=%d, i2=%d\\n\",\n \t    thread_num, s1, i1, s2, i2);\n+\n+    omp_unset_lock (&lock);\n   }\n \n   printf (\"single_scope: s1=%d, s2=%d, s3=%d, i1=%d, i2=%d, i3=%d\\n\",\n@@ -67,11 +92,15 @@ multi_scope (void)\n \t\t     private (i21)\n \t{\n \t  int thread_num = omp_get_thread_num ();\n+\t  omp_set_lock_in_order (thread_num, &lock);\n+\n \t  i21 = 100 * (thread_num + 1) + 21;\n \n \t  #pragma omp critical\n \t  printf (\"multi_scope: thread_num=%d, i01=%d, i11=%d, i21=%d\\n\",\n \t\t  thread_num, i01, i11, i21);\n+\n+\t  omp_unset_lock (&lock);\n \t}\n \n \tprintf (\"multi_scope: i01=%d, i02=%d, i11=%d, \"\n@@ -105,13 +134,16 @@ nested_func (void)\n #pragma omp parallel num_threads (2) shared (i, p, x) private (j, q, y)\n       {\n \tint tn = omp_get_thread_num ();\n+\tomp_set_lock_in_order (tn, &lock);\n \n \tj = 1000 * (tn + 1);\n \tq = j + 1;\n \ty = q + 1;\n \t#pragma omp critical\n \tprintf (\"nested_func: tn=%d: i=%d, p=%d, x=%d, j=%d, q=%d, y=%d\\n\",\n \t\t tn, i, p, x, j, q, y);\n+\n+\tomp_unset_lock (&lock);\n       }\n     }\n   }\n@@ -137,30 +169,45 @@ nested_parallel (void)\n #pragma omp parallel num_threads (2) private (l)\n   {\n     int num = omp_get_thread_num ();\n+    omp_set_lock_in_order (num, &lock);\n+\n     int nthr = omp_get_num_threads ();\n     int off = num * nthr;\n     int k = off + 101;\n     l = off + 102;\n #pragma omp parallel num_threads (2) shared (num)\n     {\n       int inner_num = omp_get_thread_num ();\n+      omp_set_lock_in_order (inner_num, &lock2);\n+\n       #pragma omp critical\n       printf (\"nested_parallel (inner threads): outer thread num = %d, thread num = %d\\n\", num, inner_num);\n+\n+      omp_unset_lock (&lock2);\n     }\n     #pragma omp critical\n     printf (\"nested_parallel (outer threads) %d: k = %d, l = %d\\n\", num, k, l);\n+\n+    omp_unset_lock (&lock);\n   }\n }\n \n int\n main (int argc, char **argv)\n {\n+  omp_init_lock (&lock);\n+  omp_init_lock (&lock2);\n+\n   single_scope ();\n   multi_scope ();\n #if HAVE_NESTED_FUNCTION_SUPPORT\n   nested_func ();\n #endif\n   nested_parallel ();\n+\n+  omp_destroy_lock (&lock);\n+  omp_destroy_lock (&lock2);\n+\n   return 0;\n }\n "
    }
  ]
}