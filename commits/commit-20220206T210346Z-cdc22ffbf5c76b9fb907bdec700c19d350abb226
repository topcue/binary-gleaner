{
  "sha": "cdc22ffbf5c76b9fb907bdec700c19d350abb226",
  "node_id": "C_kwDOANOeidoAKGNkYzIyZmZiZjVjNzZiOWZiOTA3YmRlYzcwMGMxOWQzNTBhYmIyMjY",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-11-21T03:23:01Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2022-02-06T21:03:46Z"
    },
    "message": "gdb: remove SYMTAB_PSPACE macro\n\nRemove the macro, replace with an equivalent method.\n\nChange-Id: Icccc20e7e8ae03ac4dac1c7514c25a12a9a0ac69",
    "tree": {
      "sha": "aa9d730ff474371ca3038ce509d7ee89ee24ab6a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/aa9d730ff474371ca3038ce509d7ee89ee24ab6a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cdc22ffbf5c76b9fb907bdec700c19d350abb226",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cdc22ffbf5c76b9fb907bdec700c19d350abb226",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cdc22ffbf5c76b9fb907bdec700c19d350abb226",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cdc22ffbf5c76b9fb907bdec700c19d350abb226/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "652099717dbb767c9d3eaed4c533486dd99d5e5b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/652099717dbb767c9d3eaed4c533486dd99d5e5b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/652099717dbb767c9d3eaed4c533486dd99d5e5b"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 32,
    "deletions": 23
  },
  "files": [
    {
      "sha": "7201d9a06dcbb8eb6e471634c10652854f742ffa",
      "filename": "gdb/annotate.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cdc22ffbf5c76b9fb907bdec700c19d350abb226/gdb/annotate.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cdc22ffbf5c76b9fb907bdec700c19d350abb226/gdb/annotate.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/annotate.c?ref=cdc22ffbf5c76b9fb907bdec700c19d350abb226",
      "patch": "@@ -453,7 +453,7 @@ annotate_source_line (struct symtab *s, int line, int mid_statement,\n \n       /* Update the current symtab and line.  */\n       symtab_and_line sal;\n-      sal.pspace = SYMTAB_PSPACE (s);\n+      sal.pspace = s->pspace ();\n       sal.symtab = s;\n       sal.line = line;\n       set_current_source_symtab_and_line (sal);"
    },
    {
      "sha": "bacf34309a586de5d1d1d77db27ce789dfd8f45f",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 20,
      "deletions": 20,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cdc22ffbf5c76b9fb907bdec700c19d350abb226/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cdc22ffbf5c76b9fb907bdec700c19d350abb226/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=cdc22ffbf5c76b9fb907bdec700c19d350abb226",
      "patch": "@@ -2265,7 +2265,7 @@ convert_linespec_to_sals (struct linespec_state *state, linespec *ls)\n       for (const auto &sym : ls->labels.label_symbols)\n \t{\n \t  struct program_space *pspace\n-\t    = SYMTAB_PSPACE (symbol_symtab (sym.symbol));\n+\t    = symbol_symtab (sym.symbol)->pspace ();\n \n \t  if (symbol_to_sal (&sal, state->funfirstline, sym.symbol)\n \t      && maybe_add_address (state->addr_set, pspace, sal.pc))\n@@ -2287,7 +2287,7 @@ convert_linespec_to_sals (struct linespec_state *state, linespec *ls)\n \t  for (const auto &sym : ls->function_symbols)\n \t    {\n \t      program_space *pspace\n-\t\t= SYMTAB_PSPACE (symbol_symtab (sym.symbol));\n+\t\t= symbol_symtab (sym.symbol)->pspace ();\n \t      set_current_program_space (pspace);\n \n \t      /* Don't skip to the first line of the function if we\n@@ -3539,8 +3539,8 @@ lookup_prefix_sym (struct linespec_state *state,\n \t{\n \t  /* Program spaces that are executing startup should have\n \t     been filtered out earlier.  */\n-\t  gdb_assert (!SYMTAB_PSPACE (elt)->executing_startup);\n-\t  set_current_program_space (SYMTAB_PSPACE (elt));\n+\t  gdb_assert (!elt->pspace ()->executing_startup);\n+\t  set_current_program_space (elt->pspace ());\n \t  iterate_over_file_blocks (elt, lookup_name, STRUCT_DOMAIN, collector);\n \t  iterate_over_file_blocks (elt, lookup_name, VAR_DOMAIN, collector);\n \t}\n@@ -3558,8 +3558,8 @@ compare_symbols (const block_symbol &a, const block_symbol &b)\n {\n   uintptr_t uia, uib;\n \n-  uia = (uintptr_t) SYMTAB_PSPACE (symbol_symtab (a.symbol));\n-  uib = (uintptr_t) SYMTAB_PSPACE (symbol_symtab (b.symbol));\n+  uia = (uintptr_t) symbol_symtab (a.symbol)->pspace ();\n+  uib = (uintptr_t) symbol_symtab (b.symbol)->pspace ();\n \n   if (uia < uib)\n     return true;\n@@ -3683,7 +3683,7 @@ find_method (struct linespec_state *self,\n \n       /* Program spaces that are executing startup should have\n \t been filtered out earlier.  */\n-      pspace = SYMTAB_PSPACE (symbol_symtab (sym));\n+      pspace = symbol_symtab (sym)->pspace ();\n       gdb_assert (!pspace->executing_startup);\n       set_current_program_space (pspace);\n       t = check_typedef (SYMBOL_TYPE (sym));\n@@ -3694,7 +3694,7 @@ find_method (struct linespec_state *self,\n \t sure not to miss the last batch.  */\n       if (ix == sym_classes->size () - 1\n \t  || (pspace\n-\t      != SYMTAB_PSPACE (symbol_symtab (sym_classes->at (ix + 1).symbol))))\n+\t      != symbol_symtab (sym_classes->at (ix + 1).symbol)->pspace ()))\n \t{\n \t  /* If we did not find a direct implementation anywhere in\n \t     this program space, consider superclasses.  */\n@@ -4058,7 +4058,7 @@ find_label_symbols (struct linespec_state *self,\n       for (const auto &elt : function_symbols)\n \t{\n \t  fn_sym = elt.symbol;\n-\t  set_current_program_space (SYMTAB_PSPACE (symbol_symtab (fn_sym)));\n+\t  set_current_program_space (symbol_symtab (fn_sym)->pspace ());\n \t  block = SYMBOL_BLOCK_VALUE (fn_sym);\n \n \t  find_label_symbols_in_block (block, name, fn_sym, completion_mode,\n@@ -4087,13 +4087,13 @@ decode_digits_list_mode (struct linespec_state *self,\n       /* The logic above should ensure this.  */\n       gdb_assert (elt != NULL);\n \n-      set_current_program_space (SYMTAB_PSPACE (elt));\n+      set_current_program_space (elt->pspace ());\n \n       /* Simplistic search just for the list command.  */\n       val.symtab = find_line_symtab (elt, val.line, NULL, NULL);\n       if (val.symtab == NULL)\n \tval.symtab = elt;\n-      val.pspace = SYMTAB_PSPACE (elt);\n+      val.pspace = elt->pspace ();\n       val.pc = 0;\n       val.explicit_line = true;\n \n@@ -4121,13 +4121,13 @@ decode_digits_ordinary (struct linespec_state *self,\n       /* The logic above should ensure this.  */\n       gdb_assert (elt != NULL);\n \n-      set_current_program_space (SYMTAB_PSPACE (elt));\n+      set_current_program_space (elt->pspace ());\n \n       pcs = find_pcs_for_symtab_line (elt, line, best_entry);\n       for (CORE_ADDR pc : pcs)\n \t{\n \t  symtab_and_line sal;\n-\t  sal.pspace = SYMTAB_PSPACE (elt);\n+\t  sal.pspace = elt->pspace ();\n \t  sal.symtab = elt;\n \t  sal.line = line;\n \t  sal.explicit_line = true;\n@@ -4319,9 +4319,9 @@ search_minsyms_for_name (struct collect_info *info,\n     }\n   else\n     {\n-      if (search_pspace == NULL || SYMTAB_PSPACE (symtab) == search_pspace)\n+      if (search_pspace == NULL || symtab->pspace () == search_pspace)\n \t{\n-\t  set_current_program_space (SYMTAB_PSPACE (symtab));\n+\t  set_current_program_space (symtab->pspace ());\n \t  iterate_over_minimal_symbols\n \t    (symtab->objfile (), name,\n \t     [&] (struct minimal_symbol *msym)\n@@ -4407,14 +4407,14 @@ add_matching_symbols_to_info (const char *name,\n \t    { return info->add_symbol (bsym); });\n \t  search_minsyms_for_name (info, lookup_name, pspace, NULL);\n \t}\n-      else if (pspace == NULL || pspace == SYMTAB_PSPACE (elt))\n+      else if (pspace == NULL || pspace == elt->pspace ())\n \t{\n \t  int prev_len = info->result.symbols->size ();\n \n \t  /* Program spaces that are executing startup should have\n \t     been filtered out earlier.  */\n-\t  gdb_assert (!SYMTAB_PSPACE (elt)->executing_startup);\n-\t  set_current_program_space (SYMTAB_PSPACE (elt));\n+\t  gdb_assert (!elt->pspace ()->executing_startup);\n+\t  set_current_program_space (elt->pspace ());\n \t  iterate_over_file_blocks (elt, lookup_name, VAR_DOMAIN,\n \t\t\t\t    [&] (block_symbol *bsym)\n \t    { return info->add_symbol (bsym); });\n@@ -4453,7 +4453,7 @@ symbol_to_sal (struct symtab_and_line *result,\n \t  result->symbol = sym;\n \t  result->line = SYMBOL_LINE (sym);\n \t  result->pc = SYMBOL_VALUE_ADDRESS (sym);\n-\t  result->pspace = SYMTAB_PSPACE (result->symtab);\n+\t  result->pspace = result->symtab->pspace ();\n \t  result->explicit_pc = 1;\n \t  return 1;\n \t}\n@@ -4469,7 +4469,7 @@ symbol_to_sal (struct symtab_and_line *result,\n \t  result->symbol = sym;\n \t  result->line = SYMBOL_LINE (sym);\n \t  result->pc = SYMBOL_VALUE_ADDRESS (sym);\n-\t  result->pspace = SYMTAB_PSPACE (result->symtab);\n+\t  result->pspace = result->symtab->pspace ();\n \t  return 1;\n \t}\n     }"
    },
    {
      "sha": "1339c4a727f31a43b9a5e96d6b1a52d7b10e6156",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cdc22ffbf5c76b9fb907bdec700c19d350abb226/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cdc22ffbf5c76b9fb907bdec700c19d350abb226/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=cdc22ffbf5c76b9fb907bdec700c19d350abb226",
      "patch": "@@ -311,7 +311,7 @@ select_source_symtab (struct symtab *s)\n   if (s)\n     {\n       current_source_location *loc\n-\t= get_source_location (SYMTAB_PSPACE (s));\n+\t= get_source_location (s->pspace ());\n       loc->set (s, 1);\n       return;\n     }"
    },
    {
      "sha": "b12c3af7f2ba6ee5f52897d5f091d8e1de68e680",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cdc22ffbf5c76b9fb907bdec700c19d350abb226/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cdc22ffbf5c76b9fb907bdec700c19d350abb226/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=cdc22ffbf5c76b9fb907bdec700c19d350abb226",
      "patch": "@@ -331,6 +331,14 @@ search_domain_name (enum search_domain e)\n \n /* See symtab.h.  */\n \n+program_space *\n+symtab::pspace () const\n+{\n+  return this->objfile ()->pspace;\n+}\n+\n+/* See symtab.h.  */\n+\n call_site *\n compunit_symtab::find_call_site (CORE_ADDR pc) const\n {"
    },
    {
      "sha": "5ef4bdaa110924d753436fda78ca8063bc6c1531",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cdc22ffbf5c76b9fb907bdec700c19d350abb226/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cdc22ffbf5c76b9fb907bdec700c19d350abb226/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=cdc22ffbf5c76b9fb907bdec700c19d350abb226",
      "patch": "@@ -1407,6 +1407,8 @@ struct symtab\n \n   struct objfile *objfile () const;\n \n+  program_space *pspace () const;\n+\n   /* Unordered chain of all filetabs in the compunit,  with the exception\n      that the \"main\" source file is the first entry in the list.  */\n \n@@ -1439,7 +1441,6 @@ struct symtab\n \n using symtab_range = next_range<symtab>;\n \n-#define SYMTAB_PSPACE(symtab) ((symtab)->objfile ()->pspace)\n #define SYMTAB_DIRNAME(symtab) ((symtab)->compunit ()->dirname ())\n \n /* Compunit symtabs contain the actual \"symbol table\", aka blockvector, as well"
    }
  ]
}