{
  "sha": "c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzhhN2E2NmZiN2MwYmJjOWM2ZjljZDg5NmUyMGQ5NTIzYTBkMDkwMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:43:24Z"
    },
    "message": "Convert read_address to a method on comp_unit_head\n\nThis changes read_address to be a method on comp_unit_head.\n\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_address): Move to comp-unit.c.\n\t(dwarf2_rnglists_process, dwarf2_ranges_process)\n\t(read_attribute_value, dwarf_decode_lines_1)\n\t(var_decode_location, decode_locdesc): Update.\n\t* dwarf2/comp-unit.c (comp_unit_head::read_address): Move from\n\tread.c.  Remove \"cu\" parameter.\n\t* dwarf2/comp-unit.h (struct comp_unit_head) <read_address>: New\n\tmethod.\n\nChange-Id: Ibd6c7235f2e4d5fd88c272cfd2c3d3328618cc56",
    "tree": {
      "sha": "e516ed0491bec503989bf23fecb131a2564ed241",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e516ed0491bec503989bf23fecb131a2564ed241"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8266302dc32a88c9e05b4e451e3c2c1516603132",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8266302dc32a88c9e05b4e451e3c2c1516603132",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8266302dc32a88c9e05b4e451e3c2c1516603132"
    }
  ],
  "stats": {
    "total": 152,
    "additions": 83,
    "deletions": 69
  },
  "files": [
    {
      "sha": "77555485476896debdb4a3320db1e1ad86d9df22",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900",
      "patch": "@@ -1,3 +1,14 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_address): Move to comp-unit.c.\n+\t(dwarf2_rnglists_process, dwarf2_ranges_process)\n+\t(read_attribute_value, dwarf_decode_lines_1)\n+\t(var_decode_location, decode_locdesc): Update.\n+\t* dwarf2/comp-unit.c (comp_unit_head::read_address): Move from\n+\tread.c.  Remove \"cu\" parameter.\n+\t* dwarf2/comp-unit.h (struct comp_unit_head) <read_address>: New\n+\tmethod.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (read_attribute_value, read_indirect_string)"
    },
    {
      "sha": "0b6629f14cea41fc117b60e1e276d18006b4b014",
      "filename": "gdb/dwarf2/comp-unit.c",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900/gdb/dwarf2/comp-unit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900/gdb/dwarf2/comp-unit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/comp-unit.c?ref=c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900",
      "patch": "@@ -221,3 +221,53 @@ read_and_check_comp_unit_head (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \n   return info_ptr;\n }\n+\n+CORE_ADDR\n+comp_unit_head::read_address (bfd *abfd, const gdb_byte *buf,\n+\t\t\t      unsigned int *bytes_read) const\n+{\n+  CORE_ADDR retval = 0;\n+\n+  if (signed_addr_p)\n+    {\n+      switch (addr_size)\n+\t{\n+\tcase 2:\n+\t  retval = bfd_get_signed_16 (abfd, buf);\n+\t  break;\n+\tcase 4:\n+\t  retval = bfd_get_signed_32 (abfd, buf);\n+\t  break;\n+\tcase 8:\n+\t  retval = bfd_get_signed_64 (abfd, buf);\n+\t  break;\n+\tdefault:\n+\t  internal_error (__FILE__, __LINE__,\n+\t\t\t  _(\"read_address: bad switch, signed [in module %s]\"),\n+\t\t\t  bfd_get_filename (abfd));\n+\t}\n+    }\n+  else\n+    {\n+      switch (addr_size)\n+\t{\n+\tcase 2:\n+\t  retval = bfd_get_16 (abfd, buf);\n+\t  break;\n+\tcase 4:\n+\t  retval = bfd_get_32 (abfd, buf);\n+\t  break;\n+\tcase 8:\n+\t  retval = bfd_get_64 (abfd, buf);\n+\t  break;\n+\tdefault:\n+\t  internal_error (__FILE__, __LINE__,\n+\t\t\t  _(\"read_address: bad switch, \"\n+\t\t\t    \"unsigned [in module %s]\"),\n+\t\t\t  bfd_get_filename (abfd));\n+\t}\n+    }\n+\n+  *bytes_read = addr_size;\n+  return retval;\n+}"
    },
    {
      "sha": "2dd80901b8f852245a3885ed024411db056dda37",
      "filename": "gdb/dwarf2/comp-unit.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900/gdb/dwarf2/comp-unit.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900/gdb/dwarf2/comp-unit.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/comp-unit.h?ref=c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900",
      "patch": "@@ -89,6 +89,10 @@ struct comp_unit_head\n     *bytes_read = offset_size;\n     return offset;\n   }\n+\n+  /* Read an address from BUF.  BYTES_READ is updated.  */\n+  CORE_ADDR read_address (bfd *abfd, const gdb_byte *buf,\n+\t\t\t  unsigned int *bytes_read) const;\n };\n \n /* Expected enum dwarf_unit_type for read_comp_unit_head.  */"
    },
    {
      "sha": "d340906c75b09d619850e217bd2b696c68018391",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 18,
      "deletions": 69,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=c8a7a66fb7c0bbc9c6f9cd896e20d9523a0d0900",
      "patch": "@@ -1238,9 +1238,6 @@ static void read_attribute_reprocess (const struct die_reader_specs *reader,\n \n static CORE_ADDR read_addr_index (struct dwarf2_cu *cu, unsigned int addr_index);\n \n-static CORE_ADDR read_address (bfd *, const gdb_byte *ptr, struct dwarf2_cu *,\n-\t\t\t       unsigned int *);\n-\n static LONGEST read_checked_initial_length_and_offset\n   (bfd *, const gdb_byte *, const struct comp_unit_head *,\n    unsigned int *, unsigned int *);\n@@ -13514,7 +13511,7 @@ dwarf2_rnglists_process (unsigned offset, struct dwarf2_cu *cu,\n \t      overflow = true;\n \t      break;\n \t    }\n-\t  base = read_address (obfd, buffer, cu, &bytes_read);\n+\t  base = cu->header.read_address (obfd, buffer, &bytes_read);\n \t  found_base = 1;\n \t  buffer += bytes_read;\n \t  break;\n@@ -13524,7 +13521,8 @@ dwarf2_rnglists_process (unsigned offset, struct dwarf2_cu *cu,\n \t      overflow = true;\n \t      break;\n \t    }\n-\t  range_beginning = read_address (obfd, buffer, cu, &bytes_read);\n+\t  range_beginning = cu->header.read_address (obfd, buffer,\n+\t\t\t\t\t\t     &bytes_read);\n \t  buffer += bytes_read;\n \t  range_end = (range_beginning\n \t\t       + read_unsigned_leb128 (obfd, buffer, &bytes_read));\n@@ -13557,9 +13555,10 @@ dwarf2_rnglists_process (unsigned offset, struct dwarf2_cu *cu,\n \t      overflow = true;\n \t      break;\n \t    }\n-\t  range_beginning = read_address (obfd, buffer, cu, &bytes_read);\n+\t  range_beginning = cu->header.read_address (obfd, buffer,\n+\t\t\t\t\t\t     &bytes_read);\n \t  buffer += bytes_read;\n-\t  range_end = read_address (obfd, buffer, cu, &bytes_read);\n+\t  range_end = cu->header.read_address (obfd, buffer, &bytes_read);\n \t  buffer += bytes_read;\n \t  break;\n \tdefault:\n@@ -13662,9 +13661,9 @@ dwarf2_ranges_process (unsigned offset, struct dwarf2_cu *cu,\n     {\n       CORE_ADDR range_beginning, range_end;\n \n-      range_beginning = read_address (obfd, buffer, cu, &dummy);\n+      range_beginning = cu->header.read_address (obfd, buffer, &dummy);\n       buffer += addr_size;\n-      range_end = read_address (obfd, buffer, cu, &dummy);\n+      range_end = cu->header.read_address (obfd, buffer, &dummy);\n       buffer += addr_size;\n       offset += 2 * addr_size;\n \n@@ -18446,7 +18445,8 @@ read_attribute_value (const struct die_reader_specs *reader,\n     {\n     case DW_FORM_ref_addr:\n       if (cu->header.version == 2)\n-\tDW_UNSND (attr) = read_address (abfd, info_ptr, cu, &bytes_read);\n+\tDW_UNSND (attr) = cu->header.read_address (abfd, info_ptr,\n+\t\t\t\t\t\t   &bytes_read);\n       else\n \tDW_UNSND (attr) = cu->header.read_offset (abfd, info_ptr,\n \t\t\t\t\t\t  &bytes_read);\n@@ -18457,7 +18457,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n       info_ptr += bytes_read;\n       break;\n     case DW_FORM_addr:\n-      DW_ADDR (attr) = read_address (abfd, info_ptr, cu, &bytes_read);\n+      DW_ADDR (attr) = cu->header.read_address (abfd, info_ptr, &bytes_read);\n       DW_ADDR (attr) = gdbarch_adjust_dwarf2_addr (gdbarch, DW_ADDR (attr));\n       info_ptr += bytes_read;\n       break;\n@@ -18704,57 +18704,6 @@ read_attribute (const struct die_reader_specs *reader,\n \t\t\t       need_reprocess);\n }\n \n-static CORE_ADDR\n-read_address (bfd *abfd, const gdb_byte *buf, struct dwarf2_cu *cu,\n-\t      unsigned int *bytes_read)\n-{\n-  struct comp_unit_head *cu_header = &cu->header;\n-  CORE_ADDR retval = 0;\n-\n-  if (cu_header->signed_addr_p)\n-    {\n-      switch (cu_header->addr_size)\n-\t{\n-\tcase 2:\n-\t  retval = bfd_get_signed_16 (abfd, buf);\n-\t  break;\n-\tcase 4:\n-\t  retval = bfd_get_signed_32 (abfd, buf);\n-\t  break;\n-\tcase 8:\n-\t  retval = bfd_get_signed_64 (abfd, buf);\n-\t  break;\n-\tdefault:\n-\t  internal_error (__FILE__, __LINE__,\n-\t\t\t  _(\"read_address: bad switch, signed [in module %s]\"),\n-\t\t\t  bfd_get_filename (abfd));\n-\t}\n-    }\n-  else\n-    {\n-      switch (cu_header->addr_size)\n-\t{\n-\tcase 2:\n-\t  retval = bfd_get_16 (abfd, buf);\n-\t  break;\n-\tcase 4:\n-\t  retval = bfd_get_32 (abfd, buf);\n-\t  break;\n-\tcase 8:\n-\t  retval = bfd_get_64 (abfd, buf);\n-\t  break;\n-\tdefault:\n-\t  internal_error (__FILE__, __LINE__,\n-\t\t\t  _(\"read_address: bad switch, \"\n-\t\t\t    \"unsigned [in module %s]\"),\n-\t\t\t  bfd_get_filename (abfd));\n-\t}\n-    }\n-\n-  *bytes_read = cu_header->addr_size;\n-  return retval;\n-}\n-\n /* Cover function for read_initial_length.\n    Returns the length of the object at BUF, and stores the size of the\n    initial length in *BYTES_READ and stores the size that offsets will be in\n@@ -20204,7 +20153,7 @@ dwarf_decode_lines_1 (struct line_header *lh, struct dwarf2_cu *cu,\n \t\tcase DW_LNE_set_address:\n \t\t  {\n \t\t    CORE_ADDR address\n-\t\t      = read_address (abfd, line_ptr, cu, &bytes_read);\n+\t\t      = cu->header.read_address (abfd, line_ptr, &bytes_read);\n \t\t    line_ptr += bytes_read;\n \n \t\t    state_machine.check_line_address (cu, line_ptr,\n@@ -20525,10 +20474,10 @@ var_decode_location (struct attribute *attr, struct symbol *sym,\n       unsigned int dummy;\n \n       if (DW_BLOCK (attr)->data[0] == DW_OP_addr)\n-\tSET_SYMBOL_VALUE_ADDRESS (sym,\n-\t\t\t\t  read_address (objfile->obfd,\n-\t\t\t\t\t\tDW_BLOCK (attr)->data + 1,\n-\t\t\t\t\t\tcu, &dummy));\n+\tSET_SYMBOL_VALUE_ADDRESS\n+\t  (sym, cu->header.read_address (objfile->obfd,\n+\t\t\t\t\t DW_BLOCK (attr)->data + 1,\n+\t\t\t\t\t &dummy));\n       else\n \tSET_SYMBOL_VALUE_ADDRESS\n \t  (sym, read_addr_index_from_leb128 (cu, DW_BLOCK (attr)->data + 1,\n@@ -22994,8 +22943,8 @@ decode_locdesc (struct dwarf_block *blk, struct dwarf2_cu *cu)\n \t  break;\n \n \tcase DW_OP_addr:\n-\t  stack[++stacki] = read_address (objfile->obfd, &data[i],\n-\t\t\t\t\t  cu, &bytes_read);\n+\t  stack[++stacki] = cu->header.read_address (objfile->obfd, &data[i],\n+\t\t\t\t\t\t     &bytes_read);\n \t  i += bytes_read;\n \t  break;\n "
    }
  ]
}