{
  "sha": "abd20cb637008da9d32018b4b03973e119388a0a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWJkMjBjYjYzNzAwOGRhOWQzMjAxOGI0YjAzOTczZTExOTM4OGEwYQ==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2020-11-18T03:39:52Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2020-11-21T01:41:58Z"
    },
    "message": "RISC-V: Relax PCREL to GPREL while doing other relaxations is dangerous.\n\nI get the feedback recently that enable linker relaxations may fail to\nbuild some program.  Consider the following case,\n\n\t.text\nfoo:\n\taddi\ta0, a0, %pcrel_lo(.L2)\n\tcall\tfoo\n.L1:\tauipc\ta1, %pcrel_hi(data_g)\n\taddi\ta1, a1, %pcrel_lo(.L1)\n\tlui\ta2, %hi(data_g)\n\taddi\ta2, a2, %lo(data_g)\n\tlui\ta3, %tprel_hi(data_t)\n\tadd\ta3, a3, tp, %tprel_add(data_t)\n\taddi\ta3, a3, %tprel_lo(data_t)\n.L2:\tauipc\ta0, %pcrel_hi(data_g)\n\n\t.data\n\t.word 0x0\n\t.global data_g\ndata_g:\t.word 0x1\n\n\t.section .tbss\ndata_t:\t.word 0x0\n\nThe current ld reports `dangerous relocation error` when doing the\npcgp relaxation,\ntest.o: in function `foo':\n(.text+0x0): dangerous relocation: %pcrel_lo missing matching %pcrel_hi\n\nThe .L2 auipc should not be removed since it is behind the corresponding\naddi, so we record the information in the pcgp_relocs table to avoid\nremoving the auipc later.  But current ld still remove it since we do not\nupdate the pcgp_relocs table while doing other relaxations.  I have two\nsolutions to fix the problem,\n\n1. Update the pcgp_relocs table once we actually delete the code.\n2. Add new relax pass to do the pcgp relaxations\n\nAt first I tried to do the first solution, and we need to update at\nleast three information - hi_sec_off of riscv_pcgp_lo_reloc, hi_sec_off\nand hi_addr (symbol value) of riscv_pcgp_hi_reloc.  Update the hi_sec_off\nis simple, but it is more complicate to update the symbol value, since we\nalmost have to do parts the same works of _bfd_riscv_relax_call again in\nthe riscv_relax_delete_bytes to get the correct symbol value.\n\nCompared with the first solution, the second one is more intuitive and\nsimple.  We add a new relax pass to do the pcgp relaxations later, so\nwe will get all the information correctly in the _bfd_riscv_relax_call,\nincluding the symbol value, without changing so much code.  I do not see\nany penalty by adding a new relax pass for now, so it should be fine\nto delay the pcgp relaxations.\n\nBesides, I have pass all riscv-gnu-toolchain regressions for this patch.\n\n\tbfd/\n\t* elfnn-riscv.c (_bfd_riscv_relax_section):  Add a new relax pass\n\tto do the pcgp relaxation later, after the lui and call relaxations,\n\tbut before the delete and alignment relaxations.\n\n\tld/\n\t* emultempl/riscvelf.em (riscv_elf_before_allocation): Change\n\tlink_info.relax_pass from 3 to 4.\n\t* testsuite/ld-riscv-elf/pcgp-relax.d: New testcase.\n\t* testsuite/ld-riscv-elf/pcgp-relax.s: Likewise.\n\t* testsuite/ld-riscv-elf/ld-riscv-elf.exp: Updated.",
    "tree": {
      "sha": "ad7714c9a527ae258996c30a1f4dc0ee61039073",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ad7714c9a527ae258996c30a1f4dc0ee61039073"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/abd20cb637008da9d32018b4b03973e119388a0a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/abd20cb637008da9d32018b4b03973e119388a0a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/abd20cb637008da9d32018b4b03973e119388a0a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/abd20cb637008da9d32018b4b03973e119388a0a/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "d4087e81506bb8c7dc50cfdf318f4343f89002f9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4087e81506bb8c7dc50cfdf318f4343f89002f9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d4087e81506bb8c7dc50cfdf318f4343f89002f9"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 79,
    "deletions": 14
  },
  "files": [
    {
      "sha": "36a048a872a307118f32ea098442935580599bb1",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abd20cb637008da9d32018b4b03973e119388a0a/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abd20cb637008da9d32018b4b03973e119388a0a/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=abd20cb637008da9d32018b4b03973e119388a0a",
      "patch": "@@ -1,3 +1,9 @@\n+2020-11-21  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* elfnn-riscv.c (_bfd_riscv_relax_section):  Add a new relax pass\n+\tto do the pcgp relaxation later, after the lui and call relaxations,\n+\tbut before the delete and alignment relaxations.\n+\n 2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* elflink.c (elf_finalize_dynstr): Call examine_strtab after"
    },
    {
      "sha": "4e8714045a4901736fee8ea7b93bd03b9259a6ee",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 18,
      "deletions": 13,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abd20cb637008da9d32018b4b03973e119388a0a/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abd20cb637008da9d32018b4b03973e119388a0a/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=abd20cb637008da9d32018b4b03973e119388a0a",
      "patch": "@@ -4607,7 +4607,7 @@ _bfd_riscv_relax_section (bfd *abfd, asection *sec,\n       || (sec->flags & SEC_RELOC) == 0\n       || sec->reloc_count == 0\n       || (info->disable_target_specific_optimizations\n-\t  && info->relax_pass == 0))\n+\t  && info->relax_pass < 2))\n     return TRUE;\n \n   riscv_init_pcgp_relocs (&pcgp_relocs);\n@@ -4645,25 +4645,36 @@ _bfd_riscv_relax_section (bfd *abfd, asection *sec,\n       relax_func = NULL;\n       if (info->relax_pass == 0)\n \t{\n-\t  if (type == R_RISCV_CALL || type == R_RISCV_CALL_PLT)\n+\t  if (type == R_RISCV_CALL\n+\t      || type == R_RISCV_CALL_PLT)\n \t    relax_func = _bfd_riscv_relax_call;\n \t  else if (type == R_RISCV_HI20\n \t\t   || type == R_RISCV_LO12_I\n \t\t   || type == R_RISCV_LO12_S)\n \t    relax_func = _bfd_riscv_relax_lui;\n-\t  else if (!bfd_link_pic(info)\n-\t\t   && (type == R_RISCV_PCREL_HI20\n-\t\t   || type == R_RISCV_PCREL_LO12_I\n-\t\t   || type == R_RISCV_PCREL_LO12_S))\n-\t    relax_func = _bfd_riscv_relax_pc;\n \t  else if (type == R_RISCV_TPREL_HI20\n \t\t   || type == R_RISCV_TPREL_ADD\n \t\t   || type == R_RISCV_TPREL_LO12_I\n \t\t   || type == R_RISCV_TPREL_LO12_S)\n \t    relax_func = _bfd_riscv_relax_tls_le;\n \t  else\n \t    continue;\n+\t}\n+      else if (info->relax_pass == 1\n+\t       && !bfd_link_pic(info)\n+\t       && (type == R_RISCV_PCREL_HI20\n+\t\t   || type == R_RISCV_PCREL_LO12_I\n+\t\t   || type == R_RISCV_PCREL_LO12_S))\n+\trelax_func = _bfd_riscv_relax_pc;\n+      else if (info->relax_pass == 2 && type == R_RISCV_DELETE)\n+\trelax_func = _bfd_riscv_relax_delete;\n+      else if (info->relax_pass == 3 && type == R_RISCV_ALIGN)\n+\trelax_func = _bfd_riscv_relax_align;\n+      else\n+\tcontinue;\n \n+      if (info->relax_pass < 2)\n+\t{\n \t  /* Only relax this reloc if it is paired with R_RISCV_RELAX.  */\n \t  if (i == sec->reloc_count - 1\n \t      || ELFNN_R_TYPE ((rel + 1)->r_info) != R_RISCV_RELAX\n@@ -4673,12 +4684,6 @@ _bfd_riscv_relax_section (bfd *abfd, asection *sec,\n \t  /* Skip over the R_RISCV_RELAX.  */\n \t  i++;\n \t}\n-      else if (info->relax_pass == 1 && type == R_RISCV_DELETE)\n-\trelax_func = _bfd_riscv_relax_delete;\n-      else if (info->relax_pass == 2 && type == R_RISCV_ALIGN)\n-\trelax_func = _bfd_riscv_relax_align;\n-      else\n-\tcontinue;\n \n       data->relocs = relocs;\n "
    },
    {
      "sha": "4686c592e4c08ed3512877fca0ab4eb4d0af7a97",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abd20cb637008da9d32018b4b03973e119388a0a/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abd20cb637008da9d32018b4b03973e119388a0a/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=abd20cb637008da9d32018b4b03973e119388a0a",
      "patch": "@@ -1,3 +1,11 @@\n+2020-11-21  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* emultempl/riscvelf.em (riscv_elf_before_allocation): Change\n+\tlink_info.relax_pass from 3 to 4.\n+\t* testsuite/ld-riscv-elf/pcgp-relax.d: New testcase.\n+\t* testsuite/ld-riscv-elf/pcgp-relax.s: Likewise.\n+\t* testsuite/ld-riscv-elf/ld-riscv-elf.exp: Updated.\n+\n 2020-11-20  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* testsuite/ld-ctf/data-func-conflicted.d: Shrink the expected"
    },
    {
      "sha": "077f976492c0944e502b20a4487c608c4e4dd492",
      "filename": "ld/emultempl/riscvelf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abd20cb637008da9d32018b4b03973e119388a0a/ld/emultempl/riscvelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abd20cb637008da9d32018b4b03973e119388a0a/ld/emultempl/riscvelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/riscvelf.em?ref=abd20cb637008da9d32018b4b03973e119388a0a",
      "patch": "@@ -42,7 +42,7 @@ riscv_elf_before_allocation (void)\n \tENABLE_RELAXATION;\n     }\n \n-  link_info.relax_pass = 3;\n+  link_info.relax_pass = 4;\n }\n \n static void"
    },
    {
      "sha": "86910e60ec3f33b8703e8f3527b89372b8edab33",
      "filename": "ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abd20cb637008da9d32018b4b03973e119388a0a/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abd20cb637008da9d32018b4b03973e119388a0a/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/ld-riscv-elf.exp?ref=abd20cb637008da9d32018b4b03973e119388a0a",
      "patch": "@@ -62,6 +62,7 @@ proc run_dump_test_ifunc { name target output} {\n \n if [istarget \"riscv*-*-*\"] {\n     run_dump_test \"call-relax\"\n+    run_dump_test \"pcgp-relax\"\n     run_dump_test \"c-lui\"\n     run_dump_test \"c-lui-2\"\n     run_dump_test \"disas-jalr\""
    },
    {
      "sha": "dae2b62b9a73abe8d29712d14c75840b0efaf55a",
      "filename": "ld/testsuite/ld-riscv-elf/pcgp-relax.d",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abd20cb637008da9d32018b4b03973e119388a0a/ld/testsuite/ld-riscv-elf/pcgp-relax.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abd20cb637008da9d32018b4b03973e119388a0a/ld/testsuite/ld-riscv-elf/pcgp-relax.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/pcgp-relax.d?ref=abd20cb637008da9d32018b4b03973e119388a0a",
      "patch": "@@ -0,0 +1,16 @@\n+#source: pcgp-relax.s\n+#ld: --relax\n+#objdump: -d -Mno-aliases\n+\n+.*:[ \t]+file format .*\n+\n+\n+Disassembly of section \\.text:\n+\n+0+[0-9a-f]+ <_start>:\n+.*:[ \t]+[0-9a-f]+[ \t]+addi[ \t]+a0,a0,[0-9]+\n+.*:[ \t]+[0-9a-f]+[ \t]+jal[ \t]+ra,[0-9a-f]+ <_start>\n+.*:[ \t]+[0-9a-f]+[ \t]+addi[ \t]+a1,gp,\\-[0-9]+ # [0-9a-f]+ <data_g>\n+.*:[ \t]+[0-9a-f]+[ \t]+addi[ \t]+a2,gp,\\-[0-9]+ # [0-9a-f]+ <data_g>\n+.*:[ \t]+[0-9a-f]+[ \t]+addi[ \t]+a3,tp,0 # 0 <data_t>\n+.*:[ \t]+[0-9a-f]+[ \t]+auipc[ \t]+a0,0x[0-9a-f]+"
    },
    {
      "sha": "fab6a5bf140b01726d07f8169fa75761b21082eb",
      "filename": "ld/testsuite/ld-riscv-elf/pcgp-relax.s",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abd20cb637008da9d32018b4b03973e119388a0a/ld/testsuite/ld-riscv-elf/pcgp-relax.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abd20cb637008da9d32018b4b03973e119388a0a/ld/testsuite/ld-riscv-elf/pcgp-relax.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-riscv-elf/pcgp-relax.s?ref=abd20cb637008da9d32018b4b03973e119388a0a",
      "patch": "@@ -0,0 +1,29 @@\n+\t.text\n+\t.globl _start\n+_start:\n+\taddi\ta0, a0, %pcrel_lo(.L2)\n+\n+\tcall\t_start\n+.L1:\n+\tauipc\ta1, %pcrel_hi(data_g)\n+\taddi\ta1, a1, %pcrel_lo(.L1)\n+\n+\tlui\ta2, %hi(data_g)\n+\taddi\ta2, a2, %lo(data_g)\n+\n+\tlui\ta3, %tprel_hi(data_t)\n+\tadd\ta3, a3, tp, %tprel_add(data_t)\n+\taddi\ta3, a3, %tprel_lo(data_t)\n+\n+.L2:\n+\tauipc   a0, %pcrel_hi(data_g)\n+\n+\t.data\n+\t.word 0x0\n+\t.globl data_g\n+data_g:\n+\t.word 0x1\n+\n+\t.section .tbss\n+data_t:\n+\t.word 0x0"
    }
  ]
}