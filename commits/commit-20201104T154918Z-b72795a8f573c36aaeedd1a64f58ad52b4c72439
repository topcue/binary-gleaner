{
  "sha": "b72795a8f573c36aaeedd1a64f58ad52b4c72439",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjcyNzk1YThmNTczYzM2YWFlZWRkMWE2NGY1OGFkNTJiNGM3MjQzOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-11-04T15:49:16Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-11-04T15:49:18Z"
    },
    "message": "Fix bit strides for -fgnat-encodings=minimal\n\nWith -fgnat-encodings=minimal, the enum_idx_packed.exp test will fail.\nIn this test case, we have an array (with dynamic length) of arrays,\nand the inner array has a bit stride.  In this situation, the outer\narray's bit stride must be updated to account for the entire bit\nlength of the inner array.\n\nHere, again, some tests must be kfail'd when an older version of GNAT\nis in use.\n\ngdb/ChangeLog\n2020-11-04  Tom Tromey  <tromey@adacore.com>\n\n\t* gdbtypes.c (update_static_array_size): Handle bit stride.\n\ngdb/testsuite/ChangeLog\n2020-11-04  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/enum_idx_packed.exp: Test two forms of -fgnat-encodings.",
    "tree": {
      "sha": "54804ce534e446f4d09d9afb74ea26e2a7043214",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/54804ce534e446f4d09d9afb74ea26e2a7043214"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b72795a8f573c36aaeedd1a64f58ad52b4c72439",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b72795a8f573c36aaeedd1a64f58ad52b4c72439",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b72795a8f573c36aaeedd1a64f58ad52b4c72439",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b72795a8f573c36aaeedd1a64f58ad52b4c72439/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "24aa1b028236fff1b1cf04e8cadcc2e7b4c72aab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24aa1b028236fff1b1cf04e8cadcc2e7b4c72aab",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/24aa1b028236fff1b1cf04e8cadcc2e7b4c72aab"
    }
  ],
  "stats": {
    "total": 143,
    "additions": 102,
    "deletions": 41
  },
  "files": [
    {
      "sha": "0c6d399989345a9cea30c611480351189ed995c1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b72795a8f573c36aaeedd1a64f58ad52b4c72439/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b72795a8f573c36aaeedd1a64f58ad52b4c72439/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b72795a8f573c36aaeedd1a64f58ad52b4c72439",
      "patch": "@@ -1,3 +1,7 @@\n+2020-11-04  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdbtypes.c (update_static_array_size): Handle bit stride.\n+\n 2020-11-04  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (ada_value_struct_elt): Resolve dynamic type."
    },
    {
      "sha": "686edafcf6462cad22dfa89ac30a16f50925cf16",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b72795a8f573c36aaeedd1a64f58ad52b4c72439/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b72795a8f573c36aaeedd1a64f58ad52b4c72439/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=b72795a8f573c36aaeedd1a64f58ad52b4c72439",
      "patch": "@@ -1241,6 +1241,20 @@ update_static_array_size (struct type *type)\n \tTYPE_LENGTH (type) =\n \t  TYPE_LENGTH (element_type) * (high_bound - low_bound + 1);\n \n+      /* If this array's element is itself an array with a bit stride,\n+\t then we want to update this array's bit stride to reflect the\n+\t size of the sub-array.  Otherwise, we'll end up using the\n+\t wrong size when trying to find elements of the outer\n+\t array.  */\n+      if (element_type->code () == TYPE_CODE_ARRAY\n+\t  && TYPE_LENGTH (element_type) != 0\n+\t  && TYPE_FIELD_BITSIZE (element_type, 0) != 0\n+\t  && get_array_bounds (element_type, &low_bound, &high_bound) >= 0\n+\t  && high_bound >= low_bound)\n+\tTYPE_FIELD_BITSIZE (type, 0)\n+\t  = ((high_bound - low_bound + 1)\n+\t     * TYPE_FIELD_BITSIZE (element_type, 0));\n+\n       return true;\n     }\n "
    },
    {
      "sha": "0bdc3140e1029eb5d18e553a73bfa936730541f9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b72795a8f573c36aaeedd1a64f58ad52b4c72439/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b72795a8f573c36aaeedd1a64f58ad52b4c72439/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=b72795a8f573c36aaeedd1a64f58ad52b4c72439",
      "patch": "@@ -1,3 +1,7 @@\n+2020-11-04  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/enum_idx_packed.exp: Test two forms of -fgnat-encodings.\n+\n 2020-11-04  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/set_pckd_arr_elt.exp: Also test"
    },
    {
      "sha": "91859689c4a0f5bcedfcedfe179f1a9111572371",
      "filename": "gdb/testsuite/gdb.ada/enum_idx_packed.exp",
      "status": "modified",
      "additions": 80,
      "deletions": 41,
      "changes": 121,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b72795a8f573c36aaeedd1a64f58ad52b4c72439/gdb/testsuite/gdb.ada/enum_idx_packed.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b72795a8f573c36aaeedd1a64f58ad52b4c72439/gdb/testsuite/gdb.ada/enum_idx_packed.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/enum_idx_packed.exp?ref=b72795a8f573c36aaeedd1a64f58ad52b4c72439",
      "patch": "@@ -19,64 +19,103 @@ if { [skip_ada_tests] } { return -1 }\n \n standard_ada_testfile foo\n \n-if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable {debug}] != \"\"} {\n-    return -1\n-}\n+foreach_with_prefix scenario {all minimal} {\n+    set flags [list debug additional_flags=-fgnat-encodings=$scenario]\n \n-clean_restart ${testfile}\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\"} {\n+\treturn -1\n+    }\n \n-set bp_location [gdb_get_line_number \"STOP\" ${testdir}/foo.adb]\n-runto \"foo.adb:$bp_location\"\n+    clean_restart ${testfile}\n \n-gdb_test \"ptype full\" \\\n-    \"type = array \\\\(black \\\\.\\\\. white\\\\) of boolean <packed: 1-bit elements>\"\n+    # GNAT >= 11.0 has the needed fix here.\n+    if {$scenario == \"minimal\" && ![test_compiler_info {gcc-1[1-9]-*}]} {\n+\tset old_compiler 1\n+    } else {\n+\tset old_compiler 0\n+    }\n \n-gdb_test \"print full\" \" = \\\\(false, true, false, true, false\\\\)\"\n+    set bp_location [gdb_get_line_number \"STOP\" ${testdir}/foo.adb]\n+    runto \"foo.adb:$bp_location\"\n \n-gdb_test \"print full'first\" \" = black\"\n+    gdb_test \"ptype full\" \\\n+\t\"type = array \\\\(black \\\\.\\\\. white\\\\) of boolean <packed: 1-bit elements>\"\n \n-gdb_test \"ptype primary\" \\\n-    \"type = array \\\\(red \\\\.\\\\. blue\\\\) of boolean <packed: 1-bit elements>\"\n+    gdb_test \"print full\" \" = \\\\(false, true, false, true, false\\\\)\"\n \n-gdb_test \"print primary\" \" = \\\\(red => false, true, false\\\\)\"\n+    gdb_test \"print full'first\" \" = black\"\n \n-gdb_test \"print primary'first\" \" = red\"\n+    gdb_test \"ptype primary\" \\\n+\t\"type = array \\\\(red \\\\.\\\\. blue\\\\) of boolean <packed: 1-bit elements>\"\n \n-gdb_test \"ptype cold\" \\\n-    \"type = array \\\\(green \\\\.\\\\. blue\\\\) of boolean <packed: 1-bit elements>\"\n+    gdb_test \"print primary\" \" = \\\\(red => false, true, false\\\\)\"\n \n-gdb_test \"print cold\" \" = \\\\(green => false, true\\\\)\"\n+    gdb_test \"print primary'first\" \" = red\"\n \n-gdb_test \"print cold'first\" \" = green\"\n+    gdb_test \"ptype cold\" \\\n+\t\"type = array \\\\(green \\\\.\\\\. blue\\\\) of boolean <packed: 1-bit elements>\"\n \n-# Note the bounds values are still not correctly displayed.  So we get\n-# the enum equivalent of \"1 .. 0\" (empty range) as the array ranges.\n-# Accept that for now.\n-gdb_test \"ptype small\" \\\n-    \"array \\\\(red \\\\.\\\\. green\\\\) of boolean <packed: 1-bit elements>\"\n+    gdb_test \"print cold\" \" = \\\\(green => false, true\\\\)\"\n \n-gdb_test \"print small\" \" = \\\\(red => false, true\\\\)\"\n+    gdb_test \"print cold'first\" \" = green\"\n \n-gdb_test \"print small'first\" \" = red\"\n+    # Note the bounds values are still not correctly displayed.  So we get\n+    # the enum equivalent of \"1 .. 0\" (empty range) as the array ranges.\n+    # Accept that for now.\n+    # GNAT >= 11.0 has the needed fix here.\n+    if {$old_compiler} {\n+\tsetup_kfail \"minimal encodings\" *-*-*\n+    }\n+    gdb_test \"ptype small\" \\\n+\t\"array \\\\(red \\\\.\\\\. green\\\\) of boolean <packed: 1-bit elements>\"\n \n-gdb_test \"ptype multi\" \\\n-    \"array \\\\(red \\\\.\\\\. green, low .. medium\\\\) of boolean <packed: 1-bit elements>\"\n+    if {$old_compiler} {\n+\tsetup_kfail \"minimal encodings\" *-*-*\n+    }\n+    gdb_test \"print small\" \" = \\\\(red => false, true\\\\)\"\n \n-gdb_test \"print multi\" \\\n-    \" = \\\\(red => \\\\(low => true, false\\\\), \\\\(low => true, false\\\\)\\\\)\"\n+    if {$old_compiler} {\n+\tsetup_kfail \"minimal encodings\" *-*-*\n+    }\n+    gdb_test \"print small'first\" \" = red\"\n \n-gdb_test \"print multi'first\" \" = red\"\n+    if {$old_compiler} {\n+\tsetup_kfail \"minimal encodings\" *-*-*\n+    }\n+    gdb_test \"ptype multi\" \\\n+\t\"array \\\\(red \\\\.\\\\. green, low .. medium\\\\) of boolean <packed: 1-bit elements>\"\n \n-set base \"\\\\(true, false, true, false, true, false, true, false, true, false\\\\)\"\n-set matrix \"\\\\(\"\n-foreach x {1 2 3 4 5 6 7} {\n-    if {$x > 1} {\n-\tappend matrix \", \"\n+    if {$old_compiler} {\n+\tsetup_kfail \"minimal encodings\" *-*-*\n     }\n-    append matrix $base\n-}\n-append matrix \"\\\\)\"\n+    gdb_test \"print multi\" \\\n+\t\" = \\\\(red => \\\\(low => true, false\\\\), \\\\(low => true, false\\\\)\\\\)\"\n \n-gdb_test \"print multi_multi\" \" = \\\\($matrix, $matrix\\\\)\"\n-gdb_test \"print multi_multi(1,3)\" \" = $base\"\n-gdb_test \"print multi_multi(2)\" \" = $matrix\"\n+    if {$old_compiler} {\n+\tsetup_kfail \"minimal encodings\" *-*-*\n+    }\n+    gdb_test \"print multi'first\" \" = red\"\n+\n+    set base \"\\\\(true, false, true, false, true, false, true, false, true, false\\\\)\"\n+    set matrix \"\\\\(\"\n+    foreach x {1 2 3 4 5 6 7} {\n+\tif {$x > 1} {\n+\t    append matrix \", \"\n+\t}\n+\tappend matrix $base\n+    }\n+    append matrix \"\\\\)\"\n+\n+    if {$old_compiler} {\n+\tsetup_kfail \"minimal encodings\" *-*-*\n+    }\n+    gdb_test \"print multi_multi\" \" = \\\\($matrix, $matrix\\\\)\"\n+    if {$old_compiler} {\n+\tsetup_kfail \"minimal encodings\" *-*-*\n+    }\n+    gdb_test \"print multi_multi(1,3)\" \" = $base\"\n+    if {$old_compiler} {\n+\tsetup_kfail \"minimal encodings\" *-*-*\n+    }\n+    gdb_test \"print multi_multi(2)\" \" = $matrix\"\n+}"
    }
  ]
}