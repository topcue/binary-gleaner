{
  "sha": "d58e54bd277b90d847be09ae4b18bfdbc0dc2066",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDU4ZTU0YmQyNzdiOTBkODQ3YmUwOWFlNGIxOGJmZGJjMGRjMjA2Ng==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-08-04T18:44:10Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-08-24T13:51:46Z"
    },
    "message": "Fix two regressions caused by CU / TU merging\n\nPR symtab/28160 and PR symtab/27893 concern GDB crashes in the test\nsuite when using the \"fission\" target board.  They are both caused by\nthe patches that merge the list of CUs with the list of TUs (and to a\nlesser degree by the patches to share DWARF data across objfiles), and\nthe underlying issue is the same: it turns out that reading a DWO can\ncause new type units to be created.  This means that the list of\ndwarf2_per_cu_data objects depends on precisely which CUs have been\nexpanded.  However, because the type units can be created while\nexpanding a CU means that the vector of CUs can expand while it is\nbeing iterated over -- a classic mistake.  Also, because a TU can be\nadded later, it means the resize_symtabs approach is incorrect.\n\nThis patch fixes resize_symtabs by removing it, and having set_symtab\nresize the vector on demand.  It fixes the iteration problem by\nintroducing a safe (index-based) iterator and changing the relevant\nspots to use it.\n\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=28160\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=27893",
    "tree": {
      "sha": "795411324aaa18a5f9f7df1d6fc33bd98aa3461d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/795411324aaa18a5f9f7df1d6fc33bd98aa3461d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d58e54bd277b90d847be09ae4b18bfdbc0dc2066",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d58e54bd277b90d847be09ae4b18bfdbc0dc2066",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d58e54bd277b90d847be09ae4b18bfdbc0dc2066",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d58e54bd277b90d847be09ae4b18bfdbc0dc2066/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5c133c109550321c84d25bf084828bb02219d019",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c133c109550321c84d25bf084828bb02219d019",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5c133c109550321c84d25bf084828bb02219d019"
    }
  ],
  "stats": {
    "total": 124,
    "additions": 85,
    "deletions": 39
  },
  "files": [
    {
      "sha": "5385a3aff53e9976fca1c59acb2949794083516a",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 85,
      "deletions": 29,
      "changes": 114,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d58e54bd277b90d847be09ae4b18bfdbc0dc2066/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d58e54bd277b90d847be09ae4b18bfdbc0dc2066/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=d58e54bd277b90d847be09ae4b18bfdbc0dc2066",
      "patch": "@@ -1643,6 +1643,73 @@ line_header_eq_voidp (const void *item_lhs, const void *item_rhs)\n \n \f\n \n+/* An iterator for all_comp_units that is based on index.  This\n+   approach makes it possible to iterate over all_comp_units safely,\n+   when some caller in the loop may add new units.  */\n+\n+class all_comp_units_iterator\n+{\n+public:\n+\n+  all_comp_units_iterator (dwarf2_per_bfd *per_bfd, bool start)\n+    : m_per_bfd (per_bfd),\n+      m_index (start ? 0 : per_bfd->all_comp_units.size ())\n+  {\n+  }\n+\n+  all_comp_units_iterator &operator++ ()\n+  {\n+    ++m_index;\n+    return *this;\n+  }\n+\n+  dwarf2_per_cu_data *operator* () const\n+  {\n+    return m_per_bfd->get_cu (m_index);\n+  }\n+\n+  bool operator== (const all_comp_units_iterator &other) const\n+  {\n+    return m_index == other.m_index;\n+  }\n+\n+\n+  bool operator!= (const all_comp_units_iterator &other) const\n+  {\n+    return m_index != other.m_index;\n+  }\n+\n+private:\n+\n+  dwarf2_per_bfd *m_per_bfd;\n+  size_t m_index;\n+};\n+\n+/* A range adapter for the all_comp_units_iterator.  */\n+class all_comp_units_range\n+{\n+public:\n+\n+  all_comp_units_range (dwarf2_per_bfd *per_bfd)\n+    : m_per_bfd (per_bfd)\n+  {\n+  }\n+\n+  all_comp_units_iterator begin ()\n+  {\n+    return all_comp_units_iterator (m_per_bfd, true);\n+  }\n+\n+  all_comp_units_iterator end ()\n+  {\n+    return all_comp_units_iterator (m_per_bfd, false);\n+  }\n+\n+private:\n+\n+  dwarf2_per_bfd *m_per_bfd;\n+};\n+\n /* See declaration.  */\n \n dwarf2_per_bfd::dwarf2_per_bfd (bfd *obfd, const dwarf2_debug_sections *names,\n@@ -1710,19 +1777,19 @@ class free_cached_comp_units\n bool\n dwarf2_per_objfile::symtab_set_p (const dwarf2_per_cu_data *per_cu) const\n {\n-  gdb_assert (per_cu->index < this->m_symtabs.size ());\n-\n-  return this->m_symtabs[per_cu->index] != nullptr;\n+  if (per_cu->index < this->m_symtabs.size ())\n+    return this->m_symtabs[per_cu->index] != nullptr;\n+  return false;\n }\n \n /* See read.h.  */\n \n compunit_symtab *\n dwarf2_per_objfile::get_symtab (const dwarf2_per_cu_data *per_cu) const\n {\n-  gdb_assert (per_cu->index < this->m_symtabs.size ());\n-\n-  return this->m_symtabs[per_cu->index];\n+  if (per_cu->index < this->m_symtabs.size ())\n+    return this->m_symtabs[per_cu->index];\n+  return nullptr;\n }\n \n /* See read.h.  */\n@@ -1731,9 +1798,9 @@ void\n dwarf2_per_objfile::set_symtab (const dwarf2_per_cu_data *per_cu,\n \t\t\t\tcompunit_symtab *symtab)\n {\n-  gdb_assert (per_cu->index < this->m_symtabs.size ());\n+  if (per_cu->index >= this->m_symtabs.size ())\n+    this->m_symtabs.resize (per_cu->index + 1);\n   gdb_assert (this->m_symtabs[per_cu->index] == nullptr);\n-\n   this->m_symtabs[per_cu->index] = symtab;\n }\n \n@@ -4348,11 +4415,12 @@ dwarf2_gdb_index::expand_symtabs_matching\n   gdb_assert (lookup_name != nullptr || symbol_matcher == nullptr);\n   if (lookup_name == nullptr)\n     {\n-      for (const auto &per_cu : per_objfile->per_bfd->all_comp_units)\n+      for (dwarf2_per_cu_data *per_cu\n+\t     : all_comp_units_range (per_objfile->per_bfd))\n \t{\n \t  QUIT;\n \n-\t  if (!dw2_expand_symtabs_matching_one (per_cu.get (), per_objfile,\n+\t  if (!dw2_expand_symtabs_matching_one (per_cu, per_objfile,\n \t\t\t\t\t\tfile_matcher,\n \t\t\t\t\t\texpansion_notify))\n \t    return false;\n@@ -4465,15 +4533,14 @@ dwarf2_base_index_functions::map_symbol_filenames\n \t}\n     }\n \n-  for (const auto &per_cu : per_objfile->per_bfd->all_comp_units)\n+  for (dwarf2_per_cu_data *per_cu\n+\t : all_comp_units_range (per_objfile->per_bfd))\n     {\n       /* We only need to look at symtabs not already expanded.  */\n-      if (per_cu->is_debug_types\n-\t  || per_objfile->symtab_set_p (per_cu.get ()))\n+      if (per_cu->is_debug_types || per_objfile->symtab_set_p (per_cu))\n \tcontinue;\n \n-      quick_file_names *file_data = dw2_get_file_names (per_cu.get (),\n-\t\t\t\t\t\t\tper_objfile);\n+      quick_file_names *file_data = dw2_get_file_names (per_cu, per_objfile);\n       if (file_data == nullptr\n \t  || qfn_cache.find (file_data) != qfn_cache.end ())\n \tcontinue;\n@@ -5341,11 +5408,12 @@ dwarf2_debug_names_index::expand_symtabs_matching\n   gdb_assert (lookup_name != nullptr || symbol_matcher == nullptr);\n   if (lookup_name == nullptr)\n     {\n-      for (const auto &per_cu : per_objfile->per_bfd->all_comp_units)\n+      for (dwarf2_per_cu_data *per_cu\n+\t     : all_comp_units_range (per_objfile->per_bfd))\n \t{\n \t  QUIT;\n \n-\t  if (!dw2_expand_symtabs_matching_one (per_cu.get (), per_objfile,\n+\t  if (!dw2_expand_symtabs_matching_one (per_cu, per_objfile,\n \t\t\t\t\t\tfile_matcher,\n \t\t\t\t\t\texpansion_notify))\n \t    return false;\n@@ -5453,7 +5521,6 @@ dwarf2_initialize_objfile (struct objfile *objfile)\n       if (per_bfd->using_index)\n \t{\n \t  dwarf_read_debug_printf (\"using_index already set\");\n-\t  per_objfile->resize_symtabs ();\n \t  objfile->qf.push_front (make_dwarf_gdb_index ());\n \t  return;\n \t}\n@@ -5462,7 +5529,6 @@ dwarf2_initialize_objfile (struct objfile *objfile)\n       create_all_comp_units (per_objfile);\n       per_bfd->quick_file_names_table\n \t= create_quick_file_names_table (per_bfd->all_comp_units.size ());\n-      per_objfile->resize_symtabs ();\n \n       for (int i = 0; i < per_bfd->all_comp_units.size (); ++i)\n \t{\n@@ -5484,7 +5550,6 @@ dwarf2_initialize_objfile (struct objfile *objfile)\n   if (per_bfd->debug_names_table != nullptr)\n     {\n       dwarf_read_debug_printf (\"re-using shared debug names table\");\n-      per_objfile->resize_symtabs ();\n       objfile->qf.push_front (make_dwarf_debug_names ());\n       return;\n     }\n@@ -5494,7 +5559,6 @@ dwarf2_initialize_objfile (struct objfile *objfile)\n   if (per_bfd->index_table != nullptr)\n     {\n       dwarf_read_debug_printf (\"re-using shared index table\");\n-      per_objfile->resize_symtabs ();\n       objfile->qf.push_front (make_dwarf_gdb_index ());\n       return;\n     }\n@@ -5514,7 +5578,6 @@ dwarf2_initialize_objfile (struct objfile *objfile)\n   if (dwarf2_read_debug_names (per_objfile))\n     {\n       dwarf_read_debug_printf (\"found debug names\");\n-      per_objfile->resize_symtabs ();\n       objfile->qf.push_front (make_dwarf_debug_names ());\n       return;\n     }\n@@ -5524,7 +5587,6 @@ dwarf2_initialize_objfile (struct objfile *objfile)\n \t\t\t     get_gdb_index_contents_from_section<dwz_file>))\n     {\n       dwarf_read_debug_printf (\"found gdb index from file\");\n-      per_objfile->resize_symtabs ();\n       objfile->qf.push_front (make_dwarf_gdb_index ());\n       return;\n     }\n@@ -5536,7 +5598,6 @@ dwarf2_initialize_objfile (struct objfile *objfile)\n     {\n       dwarf_read_debug_printf (\"found gdb index from cache\");\n       global_index_cache.hit ();\n-      per_objfile->resize_symtabs ();\n       objfile->qf.push_front (make_dwarf_gdb_index ());\n       return;\n     }\n@@ -5566,7 +5627,6 @@ dwarf2_build_psymtabs (struct objfile *objfile, psymbol_functions *psf)\n \t}\n       else\n \tpsf->set_partial_symtabs (per_bfd->partial_symtabs);\n-      per_objfile->resize_symtabs ();\n       return;\n     }\n \n@@ -5593,8 +5653,6 @@ dwarf2_build_psymtabs (struct objfile *objfile, psymbol_functions *psf)\n       dwarf2_build_psymtabs_hard (per_objfile);\n       psymtabs.keep ();\n \n-      per_objfile->resize_symtabs ();\n-\n       /* (maybe) store an index in the cache.  */\n       global_index_cache.store (per_objfile);\n     }\n@@ -5937,8 +5995,6 @@ add_type_unit (dwarf2_per_objfile *per_objfile, ULONGEST sig, void **slot)\n     = per_objfile->per_bfd->allocate_signatured_type (sig);\n   signatured_type *sig_type = sig_type_holder.get ();\n \n-  per_objfile->resize_symtabs ();\n-\n   per_objfile->per_bfd->all_comp_units.emplace_back\n     (sig_type_holder.release ());\n   if (per_objfile->per_bfd->using_index)"
    },
    {
      "sha": "b57e1f95c4500e6d55f57071d3a168267a42a1d7",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d58e54bd277b90d847be09ae4b18bfdbc0dc2066/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d58e54bd277b90d847be09ae4b18bfdbc0dc2066/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=d58e54bd277b90d847be09ae4b18bfdbc0dc2066",
      "patch": "@@ -517,16 +517,6 @@ struct dwarf2_per_objfile\n \t\t\t\tconst struct comp_unit_head *cu_header,\n \t\t\t\tunsigned int *bytes_read_ptr);\n \n-  /* Resize the M_SYMTABS vector to the needed size (the number of partial\n-     symtabs allocated by the per-bfd).  */\n-  void resize_symtabs ()\n-  {\n-    /* The symtabs vector should only grow, not shrink.  */\n-    gdb_assert (per_bfd->all_comp_units.size () >= m_symtabs.size ());\n-\n-    m_symtabs.resize (per_bfd->all_comp_units.size ());\n-  }\n-\n   /* Return true if the symtab corresponding to PER_CU has been set,\n      false otherwise.  */\n   bool symtab_set_p (const dwarf2_per_cu_data *per_cu) const;"
    }
  ]
}