{
  "sha": "f0bae2552db1dd4f1995608fbf6648fcee4e9e0c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjBiYWUyNTUyZGIxZGQ0ZjE5OTU2MDhmYmY2NjQ4ZmNlZTRlOWUwYw==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-04-12T08:58:47Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-04-12T09:51:07Z"
    },
    "message": "RISC-V: Add i-ext as the implicit extension when e-ext is set.\n\nThe linker does not care the default versions of the extensions, since\nit does not have the default ISA spec setting.  Therefore, linker won't\ninsert the implicit extensions for the input objects.  But we used to\ninsert the i-ext as the explicit extension, even if the e-ext is set.\nThis causes linker to report \"cannot find default versions of the ISA\nextension `i'\" errors when linking the input objects with e-ext.\n\nThis patch fixes the above linker problem, and also remove the confused\nriscv_ext_dont_care_version function.  Unless these \"dont care\" extensions\nare set in the input architecture explicitly, otherwise we always insert\nthem as the implicit ones.  Afterwards, let riscv_arch_str1 surpress them\nnot to output to the architecture string if their versions are\nRISCV_UNKNOWN_VERSION.\n\nbfd/\n    * elfxx-riscv.c (riscv_ext_dont_care_version): Removed.\n    (riscv_parse_add_subset): Always add the implicit extensions, even if\n    their versions are RISCV_UNKNOWN_VERSION.\n    (riscv_parse_std_ext): Delay to add i-ext as the implicit extension\n    in the riscv_parse_add_implicit_subsets.  Besides, add g-ext as the\n    implicit extension after it has been expanded.\n    (riscv_parse_add_implicit_subsets): Updated.",
    "tree": {
      "sha": "a0a6692a3a876f275e796099ea5291349716e1ed",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a0a6692a3a876f275e796099ea5291349716e1ed"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f0bae2552db1dd4f1995608fbf6648fcee4e9e0c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f0bae2552db1dd4f1995608fbf6648fcee4e9e0c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f0bae2552db1dd4f1995608fbf6648fcee4e9e0c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f0bae2552db1dd4f1995608fbf6648fcee4e9e0c/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "d5a71b1131778cf2a023855966831eb2457d50d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d5a71b1131778cf2a023855966831eb2457d50d6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d5a71b1131778cf2a023855966831eb2457d50d6"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 27,
    "deletions": 37
  },
  "files": [
    {
      "sha": "58a862c0ea57afc0f8fff246209e87d6e40923bd",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f0bae2552db1dd4f1995608fbf6648fcee4e9e0c/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f0bae2552db1dd4f1995608fbf6648fcee4e9e0c/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=f0bae2552db1dd4f1995608fbf6648fcee4e9e0c",
      "patch": "@@ -1,3 +1,13 @@\n+2021-04-12  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* elfxx-riscv.c (riscv_ext_dont_care_version): Removed.\n+\t(riscv_parse_add_subset): Always add the implicit extensions, even if\n+\ttheir versions are RISCV_UNKNOWN_VERSION.\n+\t(riscv_parse_std_ext): Delay to add i-ext as the implicit extension\n+\tin the riscv_parse_add_implicit_subsets.  Besides, add g-ext as the\n+\timplicit extension after it has been expanded.\n+\t(riscv_parse_add_implicit_subsets): Updated.\n+\n 2021-04-12  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* elfxx-riscv.c (riscv_std_z_ext_strtab): Moved forward."
    },
    {
      "sha": "ef55d8384eb01dac797bcd6ea1cb6d7716fcb619",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 17,
      "deletions": 37,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f0bae2552db1dd4f1995608fbf6648fcee4e9e0c/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f0bae2552db1dd4f1995608fbf6648fcee4e9e0c/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=f0bae2552db1dd4f1995608fbf6648fcee4e9e0c",
      "patch": "@@ -1310,21 +1310,6 @@ riscv_add_implicit_subset (riscv_subset_list_t *subset_list,\n     }\n }\n \n-/* These extensions are added to the subset list for special purposes,\n-   with the explicit versions or the RISCV_UNKNOWN_VERSION versions.\n-   Therefore, we won't output them to the output ISA string in the\n-   riscv_arch_str1, if the versions are unknown.  */\n-\n-static bool\n-riscv_ext_dont_care_version (const char *subset)\n-{\n-  if (strcmp (subset, \"g\") == 0\n-      || strcmp (subset, \"zicsr\") == 0\n-      || strcmp (subset, \"zifencei\") == 0)\n-    return true;\n-  return false;\n-}\n-\n /* We have to add all extensions from ISA string first, and then start to\n    add their implicit extensions.  The extensions from ISA string must be\n    set in order, so we can add them to the last of the subset list\n@@ -1349,15 +1334,11 @@ riscv_parse_add_subset (riscv_parse_subset_t *rps,\n       && rps->get_default_version != NULL)\n     rps->get_default_version (subset, &major_version, &minor_version);\n \n-  if (!riscv_ext_dont_care_version (subset)\n+  /* We don't care the versions of the implicit extensions.  */\n+  if (!implicit\n       && (major_version == RISCV_UNKNOWN_VERSION\n \t  || minor_version == RISCV_UNKNOWN_VERSION))\n     {\n-      /* We only add the implicit extension if it is supported in the\n-\t chosen ISA spec.  */\n-      if (implicit)\n-\treturn;\n-\n       if (subset[0] == 'x')\n \trps->error_handler\n \t  (_(\"x ISA extension `%s' must be set with the versions\"),\n@@ -1518,11 +1499,6 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \triscv_parse_add_subset (rps, \"e\",\n \t\t\t\tmajor_version,\n \t\t\t\tminor_version, false);\n-\t/* i-ext must be enabled.  */\n-\triscv_parse_add_subset (rps, \"i\",\n-\t\t\t\tRISCV_UNKNOWN_VERSION,\n-\t\t\t\tRISCV_UNKNOWN_VERSION, false);\n-\n \tif (*rps->xlen > 32)\n \t  {\n \t    rps->error_handler\n@@ -1536,13 +1512,8 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \tp = riscv_parsing_subset_version (rps, march, ++p,\n \t\t\t\t\t  &major_version,\n \t\t\t\t\t  &minor_version, true);\n-\t/* i-ext must be enabled.  */\n+\t/* Expand g to imafd.  */\n \triscv_parse_add_subset (rps, \"i\",\n-\t\t\t\tRISCV_UNKNOWN_VERSION,\n-\t\t\t\tRISCV_UNKNOWN_VERSION, false);\n-\t/* g-ext is used to add the implicit extensions, but will\n-\t   not be output to the ISA string.  */\n-\triscv_parse_add_subset (rps, \"g\",\n \t\t\t\tmajor_version,\n \t\t\t\tminor_version, false);\n \tfor ( ; *std_exts != 'q'; std_exts++)\n@@ -1552,6 +1523,10 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \t\t\t\t    RISCV_UNKNOWN_VERSION,\n \t\t\t\t    RISCV_UNKNOWN_VERSION, false);\n \t  }\n+\t/* Add g as an implicit extension.  */\n+\triscv_parse_add_subset (rps, \"g\",\n+\t\t\t\tRISCV_UNKNOWN_VERSION,\n+\t\t\t\tRISCV_UNKNOWN_VERSION, true);\n \tbreak;\n \n       default:\n@@ -1726,8 +1701,13 @@ riscv_parse_add_implicit_subsets (riscv_parse_subset_t *rps)\n {\n   riscv_subset_t *subset = NULL;\n \n+  if (riscv_lookup_subset (rps->subset_list, \"e\", &subset))\n+    riscv_parse_add_subset (rps, \"i\",\n+\t\t\t    RISCV_UNKNOWN_VERSION,\n+\t\t\t    RISCV_UNKNOWN_VERSION, true);\n+\n   /* Add the zicsr and zifencei only when the i's version less than 2.1.  */\n-  if ((riscv_lookup_subset (rps->subset_list, \"i\", &subset))\n+  if (riscv_lookup_subset (rps->subset_list, \"i\", &subset)\n       && (subset->major_version < 2\n \t  || (subset->major_version == 2\n \t      && subset->minor_version < 1)))\n@@ -1740,7 +1720,7 @@ riscv_parse_add_implicit_subsets (riscv_parse_subset_t *rps)\n \t\t\t      RISCV_UNKNOWN_VERSION, true);\n     }\n \n-  if ((riscv_lookup_subset (rps->subset_list, \"q\", &subset)))\n+  if (riscv_lookup_subset (rps->subset_list, \"q\", &subset))\n     {\n       riscv_parse_add_subset (rps, \"d\",\n \t\t\t      RISCV_UNKNOWN_VERSION,\n@@ -1752,7 +1732,7 @@ riscv_parse_add_implicit_subsets (riscv_parse_subset_t *rps)\n \t\t\t      RISCV_UNKNOWN_VERSION,\n \t\t\t      RISCV_UNKNOWN_VERSION, true);\n     }\n-  else if ((riscv_lookup_subset (rps->subset_list, \"d\", &subset)))\n+  else if (riscv_lookup_subset (rps->subset_list, \"d\", &subset))\n     {\n       riscv_parse_add_subset (rps, \"f\",\n \t\t\t      RISCV_UNKNOWN_VERSION,\n@@ -1761,12 +1741,12 @@ riscv_parse_add_implicit_subsets (riscv_parse_subset_t *rps)\n \t\t\t      RISCV_UNKNOWN_VERSION,\n \t\t\t      RISCV_UNKNOWN_VERSION, true);\n     }\n-  else if ((riscv_lookup_subset (rps->subset_list, \"f\", &subset)))\n+  else if (riscv_lookup_subset (rps->subset_list, \"f\", &subset))\n     riscv_parse_add_subset (rps, \"zicsr\",\n \t\t\t    RISCV_UNKNOWN_VERSION,\n \t\t\t    RISCV_UNKNOWN_VERSION, true);\n \n-  if ((riscv_lookup_subset (rps->subset_list, \"g\", &subset)))\n+  if (riscv_lookup_subset (rps->subset_list, \"g\", &subset))\n     {\n       riscv_parse_add_subset (rps, \"zicsr\",\n \t\t\t      RISCV_UNKNOWN_VERSION,"
    }
  ]
}