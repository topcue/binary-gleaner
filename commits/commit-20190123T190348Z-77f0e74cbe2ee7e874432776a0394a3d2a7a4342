{
  "sha": "77f0e74cbe2ee7e874432776a0394a3d2a7a4342",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzdmMGU3NGNiZTJlZTdlODc0NDMyNzc2YTAzOTRhM2QyYTdhNDM0Mg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-01-23T18:58:30Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-01-23T19:03:48Z"
    },
    "message": "Use forward_scope_exit for scoped_finish_thread_state\n\nThis reimplements the manually-written scoped_finish_thread_state\nclass as a forward_scope_exit instantiation.  forward_scope_exit has\nthe same interface as scoped_finish_thread_state, so nothing else has\nto change.\n\nA forward_scope_exit is preferred over make_scope_exit here because\ninfrun.c:normal_stop needs to wrap scoped_finish_thread_state in a\ngdb::optional.  Since we need the type there, might as well use it\neverywhere.\n\ngdb/ChangeLog:\n2019-01-23  Pedro Alves  <palves@redhat.com>\n\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n\n\t* gdbthread.h: Include \"common/forward-scope-exit.h\".\n\t(scoped_finish_thread_state): Redefine custom class in terms of\n\tforward_scope_exit.",
    "tree": {
      "sha": "9925e62f515f7c3ab9800a257ce0e2bc77187993",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9925e62f515f7c3ab9800a257ce0e2bc77187993"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/77f0e74cbe2ee7e874432776a0394a3d2a7a4342",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/77f0e74cbe2ee7e874432776a0394a3d2a7a4342",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/77f0e74cbe2ee7e874432776a0394a3d2a7a4342",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/77f0e74cbe2ee7e874432776a0394a3d2a7a4342/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5b9b3e53a68f4568dc0b6907e34e763a6c3dd145",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b9b3e53a68f4568dc0b6907e34e763a6c3dd145",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5b9b3e53a68f4568dc0b6907e34e763a6c3dd145"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 10,
    "deletions": 25
  },
  "files": [
    {
      "sha": "008208e6ec31a16e3e6cd34e43c788afc0f9519b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/77f0e74cbe2ee7e874432776a0394a3d2a7a4342/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/77f0e74cbe2ee7e874432776a0394a3d2a7a4342/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=77f0e74cbe2ee7e874432776a0394a3d2a7a4342",
      "patch": "@@ -1,3 +1,10 @@\n+2019-01-23  Pedro Alves  <palves@redhat.com>\n+\t    Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdbthread.h: Include \"common/forward-scope-exit.h\".\n+\t(scoped_finish_thread_state): Redefine custom class in terms of\n+\tforward_scope_exit.\n+\n 2019-01-23  Pedro Alves  <palves@redhat.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n "
    },
    {
      "sha": "c35a54e75d35439337249a31510cc700fab986b0",
      "filename": "gdb/gdbthread.h",
      "status": "modified",
      "additions": 3,
      "deletions": 25,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/77f0e74cbe2ee7e874432776a0394a3d2a7a4342/gdb/gdbthread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/77f0e74cbe2ee7e874432776a0394a3d2a7a4342/gdb/gdbthread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbthread.h?ref=77f0e74cbe2ee7e874432776a0394a3d2a7a4342",
      "patch": "@@ -32,6 +32,7 @@ struct symtab;\n #include \"cli/cli-utils.h\"\n #include \"common/refcounted-object.h\"\n #include \"common-gdbthread.h\"\n+#include \"common/forward-scope-exit.h\"\n \n struct inferior;\n \n@@ -612,31 +613,8 @@ extern void finish_thread_state (ptid_t ptid);\n \n /* Calls finish_thread_state on scope exit, unless release() is called\n    to disengage.  */\n-class scoped_finish_thread_state\n-{\n-public:\n-  explicit scoped_finish_thread_state (ptid_t ptid)\n-    : m_ptid (ptid)\n-  {}\n-\n-  ~scoped_finish_thread_state ()\n-  {\n-    if (!m_released)\n-      finish_thread_state (m_ptid);\n-  }\n-\n-  /* Disengage.  */\n-  void release ()\n-  {\n-    m_released = true;\n-  }\n-\n-  DISABLE_COPY_AND_ASSIGN (scoped_finish_thread_state);\n-\n-private:\n-  bool m_released = false;\n-  ptid_t m_ptid;\n-};\n+using scoped_finish_thread_state\n+  = FORWARD_SCOPE_EXIT (finish_thread_state);\n \n /* Commands with a prefix of `thread'.  */\n extern struct cmd_list_element *thread_cmd_list;"
    }
  ]
}