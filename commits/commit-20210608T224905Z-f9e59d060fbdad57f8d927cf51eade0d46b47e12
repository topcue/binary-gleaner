{
  "sha": "f9e59d060fbdad57f8d927cf51eade0d46b47e12",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjllNTlkMDYwZmJkYWQ1N2Y4ZDkyN2NmNTFlYWRlMGQ0NmI0N2UxMg==",
  "commit": {
    "author": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-06-07T22:14:55Z"
    },
    "committer": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-06-08T22:49:05Z"
    },
    "message": "Use is/is not to check for None in python code.\n\nWhile reviewing a patch sent to the mailing list, I noticed there are few\nplaces where python code checks if a variable is 'None' or not by using the\ncomparison operators '==' and '!='.  PEP8[1], which is used as coding standard\nin GDB\u00a0coding standards, recommends using 'is' / 'is not' when comparing to a\nsingleton such as 'None'.\n\nThis patch proposes to change the instances of '== None' by 'is None' and\n'!= None' by 'is not None'.\n\n[1] https://www.python.org/dev/peps/pep-0008/\n\ngdb/doc/ChangeLog:\n\n\t* python.texi (Writing a Pretty-Printer): Use 'is None' instead of\n\t'== None'.\n\ngdb/ChangeLog:\n\n\t* python/lib/gdb/FrameDecorator.py (FrameDecorator): Use 'is None' instead of\n\t'== None'.\n\t(FrameVars): Use 'is not None' instead of '!= None'.\n\t* python/lib/gdb/command/frame_filters.py (SetFrameFilterPriority): Use 'is None'\n\tinstead of '== None' and 'is not None' instead of '!= None'.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/premature-dummy-frame-removal.py (TestUnwinder): Use\n\t'is None' instead of '== None' and 'is not None' instead of\n\t'!= None'.\n\t* gdb.python/py-frame-args.py (lookup_function): Same.\n\t* gdb.python/py-framefilter-invalidarg.py (Reverse_Function): Same.\n\t* gdb.python/py-framefilter.py (Reverse_Function): Same.\n\t* gdb.python/py-nested-maps.py (lookup_function): Same.\n\t* gdb.python/py-objfile-script-gdb.py (lookup_function): Same.\n\t* gdb.python/py-prettyprint.py (lookup_function): Same.\n\t* gdb.python/py-section-script.py (lookup_function): Same.\n\t* gdb.python/py-unwind-inline.py (dummy_unwinder): Same.\n\t* gdb.python/python.exp: Same.\n\t* gdb.rust/pp.py (lookup_function): Same.",
    "tree": {
      "sha": "1648300094500bb1e5c11d84c92e54fe770902af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1648300094500bb1e5c11d84c92e54fe770902af"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f9e59d060fbdad57f8d927cf51eade0d46b47e12",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f9e59d060fbdad57f8d927cf51eade0d46b47e12",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f9e59d060fbdad57f8d927cf51eade0d46b47e12",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f9e59d060fbdad57f8d927cf51eade0d46b47e12/comments",
  "author": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "122373f7f25946cfc51de9e19ba1d173195f9910",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/122373f7f25946cfc51de9e19ba1d173195f9910",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/122373f7f25946cfc51de9e19ba1d173195f9910"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 52,
    "deletions": 22
  },
  "files": [
    {
      "sha": "36cb4c9e7e9ed6e7ad05c22fab64c59a8c96db81",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -1,3 +1,12 @@\n+2021-06-08  Lancelot Six  <lsix@lancelotsix.com>\n+\n+\t* python/lib/gdb/FrameDecorator.py (FrameDecorator): Use 'is None'\n+\tinstead of '== None'.\n+\t(FrameVars): Use 'is not None' instead of '!= None'.\n+\t* python/lib/gdb/command/frame_filters.py (SetFrameFilterPriority):\n+\tUse 'is None' instead of '== None' and 'is not None' instead of '!=\n+\tNone'.\n+\n 2021-06-08  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* inferior.h (class inferior) <in_initial_library_scan>: New."
    },
    {
      "sha": "80b9f44ad3c6f357d665a274ea9aebe071f0b813",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-08  Lancelot Six  <lsix@lancelotsix.com>\n+\n+\t* python.texi (Writing a Pretty-Printer): Use 'is None' instead of\n+\t'== None'.\n+\n 2021-06-05  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* gdb.texinfo (Source and Machine Code): Document 'set"
    },
    {
      "sha": "ab934a8c0127c38ad1aca387d589c35eccd2a550",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -1661,7 +1661,7 @@ example above might be written.\n @smallexample\n def str_lookup_function(val):\n     lookup_tag = val.type.tag\n-    if lookup_tag == None:\n+    if lookup_tag is None:\n         return None\n     regex = re.compile(\"^std::basic_string<char,.*>$\")\n     if regex.match(lookup_tag):"
    },
    {
      "sha": "69a0a9a4d7fa2d51e9048f38aa8abd11ebc3797f",
      "filename": "gdb/python/lib/gdb/FrameDecorator.py",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/python/lib/gdb/FrameDecorator.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/python/lib/gdb/FrameDecorator.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/lib/gdb/FrameDecorator.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -117,7 +117,7 @@ def function(self):\n         # address.  If GDB detects an integer value from this function\n         # it will attempt to find the function name from minimal\n         # symbols via its own internal functions.\n-        if func == None:\n+        if func is None:\n             pc = frame.pc()\n             return pc\n \n@@ -270,7 +270,7 @@ def fetch_frame_locals(self):\n         except RuntimeError:\n             block = None\n \n-        while block != None:\n+        while block is not None:\n             if block.is_global or block.is_static:\n                 break\n             for sym in block:\n@@ -295,12 +295,12 @@ def fetch_frame_args(self):\n         except RuntimeError:\n             block = None\n \n-        while block != None:\n-            if block.function != None:\n+        while block is not None:\n+            if block.function is not None:\n                 break\n             block = block.superblock\n \n-        if block != None:\n+        if block is not None:\n             for sym in block:\n                 if not sym.is_argument:\n                     continue"
    },
    {
      "sha": "97488ca2c3dd2b29de20b4b2dc731b035191a25e",
      "filename": "gdb/python/lib/gdb/command/frame_filters.py",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/python/lib/gdb/command/frame_filters.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/python/lib/gdb/command/frame_filters.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/lib/gdb/command/frame_filters.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -372,7 +372,7 @@ def complete(self, text, word):\n \n     def invoke(self, arg, from_tty):\n         command_tuple = self._parse_pri_arg(arg)\n-        if command_tuple != None:\n+        if command_tuple is not None:\n             self._set_filter_priority(command_tuple)\n \n \n@@ -453,7 +453,7 @@ def complete(self, text, word):\n \n     def invoke(self, arg, from_tty):\n         command_tuple = self._parse_pri_arg(arg)\n-        if command_tuple == None:\n+        if command_tuple is None:\n             return\n         filter_name = command_tuple[1]\n         list_name = command_tuple[0]"
    },
    {
      "sha": "92894d6efab418abfd0fe8c7c45e75ce5cb32a5f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -1,3 +1,19 @@\n+2021-06-08  Lancelot Six  <lsix@lancelotsix.com>\n+\n+\t* gdb.base/premature-dummy-frame-removal.py (TestUnwinder): Use\n+\t'is None' instead of '== None' and 'is not None' instead of\n+\t'!= None'.\n+\t* gdb.python/py-frame-args.py (lookup_function): Same.\n+\t* gdb.python/py-framefilter-invalidarg.py (Reverse_Function): Same.\n+\t* gdb.python/py-framefilter.py (Reverse_Function): Same.\n+\t* gdb.python/py-nested-maps.py (lookup_function): Same.\n+\t* gdb.python/py-objfile-script-gdb.py (lookup_function): Same.\n+\t* gdb.python/py-prettyprint.py (lookup_function): Same.\n+\t* gdb.python/py-section-script.py (lookup_function): Same.\n+\t* gdb.python/py-unwind-inline.py (dummy_unwinder): Same.\n+\t* gdb.python/python.exp: Same.\n+\t* gdb.rust/pp.py (lookup_function): Same.\n+\n 2021-06-08  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/gdb.exp (multi_line): Require more than one argument."
    },
    {
      "sha": "fbad6d447d3733aab2684474f2a02a5c45aa00a4",
      "filename": "gdb/testsuite/gdb.base/premature-dummy-frame-removal.py",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.base/premature-dummy-frame-removal.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.base/premature-dummy-frame-removal.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/premature-dummy-frame-removal.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -46,10 +46,10 @@ def __call__(self, pending_frame):\n         sp = pending_frame.read_register(sp_desc)\n \n         block = gdb.block_for_pc(int(pc))\n-        if block == None:\n+        if block is None:\n             return None\n         func = block.function\n-        if func == None:\n+        if func is None:\n             return None\n         if str(func) != \"break_bt_here\":\n             return None"
    },
    {
      "sha": "59dd14d0b56540e3361ae64032512518097a3591",
      "filename": "gdb/testsuite/gdb.python/py-frame-args.py",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-frame-args.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-frame-args.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-frame-args.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -53,7 +53,7 @@ def lookup_function(val):\n \n     # Get the type name.\n     typename = type.tag\n-    if typename == None:\n+    if typename is None:\n         return None\n \n     # Iterate over local dictionary of types to determine"
    },
    {
      "sha": "20af5169525e4eed2a6590efbfdd6c6592813a78",
      "filename": "gdb/testsuite/gdb.python/py-framefilter-invalidarg.py",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-framefilter-invalidarg.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-framefilter-invalidarg.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-framefilter-invalidarg.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -28,7 +28,7 @@ def __init__(self, fobj):\n \n     def function(self):\n         fname = str(self.fobj.function())\n-        if fname == None or fname == \"\":\n+        if not fname:\n             return None\n         if fname == \"end_func\":\n             extra = self.fobj.inferior_frame().read_var(\"str\").string()"
    },
    {
      "sha": "8058f6186c54f914c2f608b4cd5bbfec9e550da4",
      "filename": "gdb/testsuite/gdb.python/py-framefilter.py",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-framefilter.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-framefilter.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-framefilter.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -28,7 +28,7 @@ def __init__(self, fobj):\n \n     def function(self):\n         fname = str(self.fobj.function())\n-        if fname == None or fname == \"\":\n+        if not fname:\n             return None\n         if fname == \"end_func\":\n             extra = self.fobj.inferior_frame().read_var(\"str\").string()"
    },
    {
      "sha": "2848347c56aed3952091fb35bffa11ed58ebff23",
      "filename": "gdb/testsuite/gdb.python/py-nested-maps.py",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-nested-maps.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-nested-maps.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-nested-maps.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -88,7 +88,7 @@ def lookup_function(val):\n     # Get the type name.\n     typename = type.tag\n \n-    if typename == None:\n+    if typename is None:\n         return None\n \n     # Iterate over local dictionary of types to determine\n@@ -109,7 +109,7 @@ def lookup_typedefs_function(val):\n     # Get the type.\n     type = val.type\n \n-    if type == None or type.name == None or type.code != gdb.TYPE_CODE_TYPEDEF:\n+    if type is None or type.name is None or type.code != gdb.TYPE_CODE_TYPEDEF:\n         return None\n \n     # Iterate over local dictionary of typedef types to determine if a"
    },
    {
      "sha": "45d036ccf0b74bf4e964772ae4ab43e55a5a3b21",
      "filename": "gdb/testsuite/gdb.python/py-objfile-script-gdb.py",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-objfile-script-gdb.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-objfile-script-gdb.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-objfile-script-gdb.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -42,7 +42,7 @@ def lookup_function(val):\n     # Get the type name.\n     typename = type.tag\n \n-    if typename == None:\n+    if typename is None:\n         return None\n \n     # Iterate over local dictionary of types to determine"
    },
    {
      "sha": "89ffc0f8d1878feef19f0c48eec5db18f75156d7",
      "filename": "gdb/testsuite/gdb.python/py-prettyprint.py",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-prettyprint.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-prettyprint.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-prettyprint.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -314,7 +314,7 @@ def lookup_function(val):\n     # Get the type name.\n     typename = type.tag\n \n-    if typename == None:\n+    if typename is None:\n         return None\n \n     # Iterate over local dictionary of types to determine\n@@ -344,7 +344,7 @@ def lookup_typedefs_function(val):\n     # Get the type.\n     type = val.type\n \n-    if type == None or type.name == None or type.code != gdb.TYPE_CODE_TYPEDEF:\n+    if type is None or type.name is None or type.code != gdb.TYPE_CODE_TYPEDEF:\n         return None\n \n     # Iterate over local dictionary of typedef types to determine if a"
    },
    {
      "sha": "8562e52a5c39c9d4d64784de4c1a796c69994bf3",
      "filename": "gdb/testsuite/gdb.python/py-section-script.py",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-section-script.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-section-script.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-section-script.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -42,7 +42,7 @@ def lookup_function(val):\n     # Get the type name.\n     typename = type.tag\n \n-    if typename == None:\n+    if typename is None:\n         return None\n \n     # Iterate over local dictionary of types to determine"
    },
    {
      "sha": "2892f41f27e15f26dac35a744e257bdd56820d16",
      "filename": "gdb/testsuite/gdb.python/py-unwind-inline.py",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-unwind-inline.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/py-unwind-inline.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-unwind-inline.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -45,7 +45,7 @@ def __init__(self):\n     def get_regs(self, pending_frame):\n         \"\"\"Return a list of register names that should be read.  Only\n         gathers the list once, then caches the result.\"\"\"\n-        if self.regs != None:\n+        if self.regs is not None:\n             return self.regs\n \n         # Collect the names of all registers to read."
    },
    {
      "sha": "d9fd60f3dd4f7aa85fdd38a95ecf404c8be8f7b9",
      "filename": "gdb/testsuite/gdb.python/python.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/python.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.python/python.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/python.exp?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -192,7 +192,7 @@ gdb_test \"python print (a)\" \".*aliases -- User-defined aliases of other commands\n # Test PR 12212, using InfThread.selected_thread() when no inferior is\n # loaded.\n gdb_py_test_silent_cmd \"python nothread = gdb.selected_thread()\" \"Attempt to aquire thread with no inferior\" 1\n-gdb_test \"python print (nothread == None)\" \"True\" \"ensure that no threads are returned\"\n+gdb_test \"python print (nothread is None)\" \"True\" \"ensure that no threads are returned\"\n \n gdb_test_multiline \"register atexit function\" \\\n     \"python\" \"\" \\"
    },
    {
      "sha": "a78e30065ba6cf3101de1b6db684fbf9a842ad9c",
      "filename": "gdb/testsuite/gdb.rust/pp.py",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.rust/pp.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f9e59d060fbdad57f8d927cf51eade0d46b47e12/gdb/testsuite/gdb.rust/pp.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/pp.py?ref=f9e59d060fbdad57f8d927cf51eade0d46b47e12",
      "patch": "@@ -38,7 +38,7 @@ def lookup_function(val):\n     # Get the type name.\n     typename = type.tag\n \n-    if typename == None:\n+    if typename is None:\n         return None\n \n     if typename == \"pp::Inner\":"
    }
  ]
}