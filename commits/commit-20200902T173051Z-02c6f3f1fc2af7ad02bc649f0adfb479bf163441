{
  "sha": "02c6f3f1fc2af7ad02bc649f0adfb479bf163441",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDJjNmYzZjFmYzJhZjdhZDAyYmM2NDlmMGFkZmI0NzliZjE2MzQ0MQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-08-10T11:21:06Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-09-02T17:30:51Z"
    },
    "message": "Do not auto-dereference null pointers in Ada MI varobj\n\nThe Ada varobj code automatically dereferences access types.  This is\noften handy, but it also does so for null pointers -- showing children\nwith empty values.\n\nThese children are weird, but even weirder when a variant type is\ninvolved, because only the non-varying parts of the type are\ndisplayed.  This behavior conflicts a bit with my ongoing quest to\nmove the Ada code to use DWARF rather than gnat encodings, in that\nreproducing this behavior with the DWARF code seems rather hacky.\n\nSo, this patch instead changes the Ada varobj code so that it does not\nautomatically dereference null pointers.\n\nAs this patch only affects Ada, and it was already reviewed internally\nby Joel, I am checking it in.\n\n2020-09-02  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-varobj.c (ada_varobj_get_ptr_number_of_children): Return 0\n\tfor null pointers.\n\t(ada_varobj_adjust_for_child_access): Special-case null pointers.\n\ngdb/testsuite/ChangeLog\n2020-09-02  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/mi_var_access.exp: Test children of access variable.\n\t* gdb.ada/mi_var_access/mi_access.adb: Add new stop markers.\n\t* gdb.ada/mi_var_array.exp: Update.",
    "tree": {
      "sha": "bd8d8af76bc483e61c5c330f3cf106a752c8281f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bd8d8af76bc483e61c5c330f3cf106a752c8281f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/02c6f3f1fc2af7ad02bc649f0adfb479bf163441",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02c6f3f1fc2af7ad02bc649f0adfb479bf163441",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/02c6f3f1fc2af7ad02bc649f0adfb479bf163441",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7c80dd4c2cc080036b95176bcf35bb6f46355598",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7c80dd4c2cc080036b95176bcf35bb6f46355598",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7c80dd4c2cc080036b95176bcf35bb6f46355598"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 43,
    "deletions": 11
  },
  "files": [
    {
      "sha": "8ace83b3271987bd35b6e54d4bb9ac109cd36ebc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=02c6f3f1fc2af7ad02bc649f0adfb479bf163441",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-02  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-varobj.c (ada_varobj_get_ptr_number_of_children): Return 0\n+\tfor null pointers.\n+\t(ada_varobj_adjust_for_child_access): Special-case null pointers.\n+\n 2020-09-01  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* bcache.h (struct bcache) <insert>: Change type of `added` to"
    },
    {
      "sha": "f2a291ad5e5c88d10350c5b464096467986c14ed",
      "filename": "gdb/ada-varobj.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/ada-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/ada-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-varobj.c?ref=02c6f3f1fc2af7ad02bc649f0adfb479bf163441",
      "patch": "@@ -209,6 +209,8 @@ ada_varobj_adjust_for_child_access (struct value **value,\n   if ((*type)->code () == TYPE_CODE_PTR\n       && (TYPE_TARGET_TYPE (*type)->code () == TYPE_CODE_STRUCT\n           || TYPE_TARGET_TYPE (*type)->code () == TYPE_CODE_UNION)\n+      && *value != nullptr\n+      && value_as_address (*value) != 0\n       && !ada_is_array_descriptor_type (TYPE_TARGET_TYPE (*type))\n       && !ada_is_constrained_packed_array_type (TYPE_TARGET_TYPE (*type)))\n     ada_varobj_ind (*value, *type, value, type);\n@@ -333,6 +335,10 @@ ada_varobj_get_ptr_number_of_children (struct value *parent_value,\n       || child_type->code () == TYPE_CODE_VOID)\n     return 0;\n \n+  /* Only show children for non-null pointers.  */\n+  if (parent_value == nullptr || value_as_address (parent_value) == 0)\n+    return 0;\n+\n   /* All other types have 1 child.  */\n   return 1;\n }"
    },
    {
      "sha": "63dcad7d99e305ffd2bee027a913f3e665a1f3b4",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=02c6f3f1fc2af7ad02bc649f0adfb479bf163441",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-02  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/mi_var_access.exp: Test children of access variable.\n+\t* gdb.ada/mi_var_access/mi_access.adb: Add new stop markers.\n+\t* gdb.ada/mi_var_array.exp: Update.\n+\n 2020-08-31  Kevin Buettner  <kevinb@redhat.com>\n \n \t* gdb.base/corefile.exp (warning-free): XFAIL test when running"
    },
    {
      "sha": "14e899221e35bc030ec840db73a998a49c6b38a4",
      "filename": "gdb/testsuite/gdb.ada/mi_var_access.exp",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/testsuite/gdb.ada/mi_var_access.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/testsuite/gdb.ada/mi_var_access.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_var_access.exp?ref=02c6f3f1fc2af7ad02bc649f0adfb479bf163441",
      "patch": "@@ -50,3 +50,25 @@ mi_continue_to_line \\\n mi_gdb_test \"-var-create A_String_Access * A_String_Access\" \\\n     \"\\\\^done,name=\\\"A_String_Access\\\",numchild=\\\"1\\\",.*\" \\\n     \"Create varobj\"\n+\n+set bp_location [gdb_get_line_number \"STOP2\" ${testdir}/mi_access.adb]\n+mi_continue_to_line \\\n+    \"mi_access.adb:$bp_location\" \\\n+    \"stop at stop 2\"\n+\n+mi_gdb_test \"-var-update A_String_Access\" \\\n+    [string_to_regexp {^done,changelist=[{name=\"A_String_Access\",in_scope=\"true\",type_changed=\"false\",has_more=\"0\"}]}] \\\n+    \"update at stop 2\"\n+\n+mi_gdb_test \"-var-list-children A_String_Access\" \\\n+    [string_to_regexp {^done,numchild=\"1\",children=[child={name=\"A_String_Access.A_String_Access.all\",exp=\"A_String_Access.all\",numchild=\"3\",type=\"array (3 .. 5) of character\",thread-id=\"1\"}],has_more=\"0\"}] \\\n+    \"list children at stop 2\"\n+\n+set bp_location [gdb_get_line_number \"STOP3\" ${testdir}/mi_access.adb]\n+mi_continue_to_line \\\n+    \"mi_access.adb:$bp_location\" \\\n+    \"stop at stop 3\"\n+\n+mi_gdb_test \"-var-update A_String_Access\" \\\n+    [string_to_regexp {^done,changelist=[{name=\"A_String_Access\",in_scope=\"true\",type_changed=\"true\",new_type=\"pck.string_access\",new_num_children=\"0\",has_more=\"0\"}]}] \\\n+    \"update at stop 3\""
    },
    {
      "sha": "b1dc7be1c3a4523b95711994ec87d268370e4d09",
      "filename": "gdb/testsuite/gdb.ada/mi_var_access/mi_access.adb",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/testsuite/gdb.ada/mi_var_access/mi_access.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/testsuite/gdb.ada/mi_var_access/mi_access.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_var_access/mi_access.adb?ref=02c6f3f1fc2af7ad02bc649f0adfb479bf163441",
      "patch": "@@ -24,14 +24,14 @@ begin\n    A_String (4) := '6';\n    A_String_Access := Copy (A_String);\n    A_Pointer.P := A_String_Access;\n-   Do_Nothing (A_String_Access'Address);\n+   Do_Nothing (A_String_Access'Address); -- STOP2\n    A_String_Access (4) := 'a';\n    Do_Nothing (A_Pointer'Address);\n    A_String_Access := Copy(\"Hi\");\n    A_Pointer.P := A_String_Access;\n    Do_Nothing (A_String_Access'Address);\n    A_String_Access := null;\n    A_Pointer.P := null;\n-   Do_Nothing (A_Pointer'Address);\n+   Do_Nothing (A_Pointer'Address); -- STOP3\n    Do_Nothing (A_String'Address);\n end Mi_Access;"
    },
    {
      "sha": "4ef213b7a6ef9f7d0eea3e1c2fe7a25b32d441cf",
      "filename": "gdb/testsuite/gdb.ada/mi_var_array.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 9,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/testsuite/gdb.ada/mi_var_array.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02c6f3f1fc2af7ad02bc649f0adfb479bf163441/gdb/testsuite/gdb.ada/mi_var_array.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_var_array.exp?ref=02c6f3f1fc2af7ad02bc649f0adfb479bf163441",
      "patch": "@@ -52,14 +52,6 @@ foreach_with_prefix scenario {none all minimal} {\n \t\"stop at start of main Ada procedure\"\n \n     mi_gdb_test \"-var-create vta * vta\" \\\n-\t\"\\\\^done,name=\\\"vta\\\",numchild=\\\"2\\\",.*\" \\\n+\t\"\\\\^done,name=\\\"vta\\\",numchild=\\\"0\\\",.*\" \\\n \t\"create bt varobj\"\n-\n-    # In the \"minimal\" mode, we don't currently have the ability to\n-    # print the subrange type properly.  So, we just allow anything\n-    # for the array range here.  The correct result would be to fix\n-    # this to read \"(1 .. n)\".\n-    mi_gdb_test \"-var-list-children vta\" \\\n-\t\"\\\\^done,numchild=\\\"2\\\",children=\\\\\\[child={name=\\\"vta.n\\\",exp=\\\"n\\\",numchild=\\\"0\\\",type=\\\"bar\\\\.int\\\",thread-id=\\\"$decimal\\\"},child={name=\\\"vta.f\\\",exp=\\\"f\\\",numchild=\\\"0\\\",type=\\\"array .* of character\\\",thread-id=\\\"$decimal\\\"}\\\\\\],.*\" \\\n-\t\"list vta's children\"\n }"
    }
  ]
}