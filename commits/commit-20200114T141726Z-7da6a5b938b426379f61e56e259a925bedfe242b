{
  "sha": "7da6a5b938b426379f61e56e259a925bedfe242b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2RhNmE1YjkzOGI0MjYzNzlmNjFlNTZlMjU5YTkyNWJlZGZlMjQyYg==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2019-12-06T21:12:37Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-01-14T14:17:26Z"
    },
    "message": "Fix/Update misc comments\n\nWhile doing some investigation of mine, i noticed a few typos,\ninaccuracies and missing information.\n\nI went ahead and updated/improved those.\n\ngdb/ChangeLog:\n\n2020-01-14  Luis Machado  <luis.machado@linaro.org>\n\n\t* inf-ptrace.c (inf_ptrace_target::resume): Update comments.\n\t* infrun.c (resume_1): Likewise.\n\t(handle_inferior_event): Remove stale comment.\n\t* linux-nat.c (linux_nat_target::resume): Update comments.\n\t(save_stop_reason): Likewise.\n\t(linux_nat_filter_event): Likewise.\n\t* linux-nat.h (struct lwp_info) <stop_pc>, <stop_reason>: Likewise.",
    "tree": {
      "sha": "c4bce214765c16583017f6be5b7faf44f7979380",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c4bce214765c16583017f6be5b7faf44f7979380"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7da6a5b938b426379f61e56e259a925bedfe242b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7da6a5b938b426379f61e56e259a925bedfe242b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7da6a5b938b426379f61e56e259a925bedfe242b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7da6a5b938b426379f61e56e259a925bedfe242b/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7a6bf3becbe3e0ce47d2681edcfe7adcb67fe4e2"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 24,
    "deletions": 15
  },
  "files": [
    {
      "sha": "545cfb36ce18a3502ee4fd4c478c05ef45c2180d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7da6a5b938b426379f61e56e259a925bedfe242b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7da6a5b938b426379f61e56e259a925bedfe242b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7da6a5b938b426379f61e56e259a925bedfe242b",
      "patch": "@@ -1,3 +1,13 @@\n+2020-01-14  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* inf-ptrace.c (inf_ptrace_target::resume): Update comments.\n+\t* infrun.c (resume_1): Likewise.\n+\t(handle_inferior_event): Remove stale comment.\n+\t* linux-nat.c (linux_nat_target::resume): Update comments.\n+\t(save_stop_reason): Likewise.\n+\t(linux_nat_filter_event): Likewise.\n+\t* linux-nat.h (struct lwp_info) <stop_pc>, <stop_reason>: Likewise.\n+\n 2020-01-13  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* elfread.c (record_minimal_symbol): Set section index to 0 for"
    },
    {
      "sha": "db17a76d946d52ffcefd65ba792e7e9e6d502b0b",
      "filename": "gdb/inf-ptrace.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7da6a5b938b426379f61e56e259a925bedfe242b/gdb/inf-ptrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7da6a5b938b426379f61e56e259a925bedfe242b/gdb/inf-ptrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-ptrace.c?ref=7da6a5b938b426379f61e56e259a925bedfe242b",
      "patch": "@@ -354,10 +354,10 @@ inf_ptrace_target::resume (ptid_t ptid, int step, enum gdb_signal signal)\n   if (step)\n     {\n       /* If this system does not support PT_STEP, a higher level\n-         function will have called single_step() to transmute the step\n-         request into a continue request (by setting breakpoints on\n-         all possible successor instructions), so we don't have to\n-         worry about that here.  */\n+\t function will have called the appropriate functions to transmute the\n+\t step request into a continue request (by setting breakpoints on\n+\t all possible successor instructions), so we don't have to\n+\t worry about that here.  */\n       request = PT_STEP;\n     }\n "
    },
    {
      "sha": "1312328b8ffc38a774d40258b171f198363b4fe0",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7da6a5b938b426379f61e56e259a925bedfe242b/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7da6a5b938b426379f61e56e259a925bedfe242b/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=7da6a5b938b426379f61e56e259a925bedfe242b",
      "patch": "@@ -2429,8 +2429,8 @@ resume_1 (enum gdb_signal sig)\n   if (tp->control.trap_expected || bpstat_should_step ())\n     tp->control.may_range_step = 0;\n \n-  /* If enabled, step over breakpoints by executing a copy of the\n-     instruction at a different address.\n+  /* If displaced stepping is enabled, step over breakpoints by executing a\n+     copy of the instruction at a different address.\n \n      We can't use displaced stepping when we have a signal to deliver;\n      the comments for displaced_step_prepare explain why.  The\n@@ -2518,7 +2518,7 @@ resume_1 (enum gdb_signal sig)\n       && step_over_info_valid_p ())\n     {\n       /* If we have nested signals or a pending signal is delivered\n-\t immediately after a handler returns, might might already have\n+\t immediately after a handler returns, might already have\n \t a step-resume breakpoint set on the earlier handler.  We cannot\n \t set another step-resume breakpoint; just continue on until the\n \t original breakpoint is hit.  */\n@@ -5297,8 +5297,6 @@ Cannot fill $_exitsignal with the correct signal number.\\n\"));\n       stop_waiting (ecs);\n       return;\n \n-      /* The following are the only cases in which we keep going;\n-         the above cases end in a continue or goto.  */\n     case TARGET_WAITKIND_FORKED:\n     case TARGET_WAITKIND_VFORKED:\n       /* Check whether the inferior is displaced stepping.  */"
    },
    {
      "sha": "e7533a993093a616da3e8250084f37cb5410a35c",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7da6a5b938b426379f61e56e259a925bedfe242b/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7da6a5b938b426379f61e56e259a925bedfe242b/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=7da6a5b938b426379f61e56e259a925bedfe242b",
      "patch": "@@ -1700,7 +1700,8 @@ linux_nat_target::resume (ptid_t ptid, int step, enum gdb_signal signo)\n   resume_many = (minus_one_ptid == ptid\n \t\t || ptid.is_pid ());\n \n-  /* Mark the lwps we're resuming as resumed.  */\n+  /* Mark the lwps we're resuming as resumed and update their\n+     last_resume_kind to resume_continue.  */\n   iterate_over_lwps (ptid, resume_set_callback);\n \n   /* See if it's the current inferior that should be handled\n@@ -2725,7 +2726,7 @@ save_stop_reason (struct lwp_info *lp)\n \t    {\n \t      /* If we determine the LWP stopped for a SW breakpoint,\n \t\t trust it.  Particularly don't check watchpoint\n-\t\t registers, because at least on s390, we'd find\n+\t\t registers, because, at least on s390, we'd find\n \t\t stopped-by-watchpoint as long as there's a watchpoint\n \t\t set.  */\n \t      lp->stop_reason = TARGET_STOPPED_BY_SW_BREAKPOINT;\n@@ -2929,7 +2930,7 @@ resumed_callback (struct lwp_info *lp)\n }\n \n /* Check if we should go on and pass this event to common code.\n-   Return the affected lwp if we are, or NULL otherwise.  */\n+   Return the affected lwp if we should, or NULL otherwise.  */\n \n static struct lwp_info *\n linux_nat_filter_event (int lwpid, int status)\n@@ -3122,7 +3123,7 @@ linux_nat_filter_event (int lwpid, int status)\n \n   /* Don't report signals that GDB isn't interested in, such as\n      signals that are neither printed nor stopped upon.  Stopping all\n-     threads can be a bit time-consuming so if we want decent\n+     threads can be a bit time-consuming, so if we want decent\n      performance with heavily multi-threaded programs, especially when\n      they're using a high frequency timer, we'd better avoid it if we\n      can.  */"
    },
    {
      "sha": "f800e4399790a952f3d599d303904d40552e90ff",
      "filename": "gdb/linux-nat.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7da6a5b938b426379f61e56e259a925bedfe242b/gdb/linux-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7da6a5b938b426379f61e56e259a925bedfe242b/gdb/linux-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.h?ref=7da6a5b938b426379f61e56e259a925bedfe242b",
      "patch": "@@ -229,7 +229,7 @@ struct lwp_info\n \n   /* When 'stopped' is set, this is where the lwp last stopped, with\n      decr_pc_after_break already accounted for.  If the LWP is\n-     running, and stepping, this is the address at which the lwp was\n+     running and stepping, this is the address at which the lwp was\n      resumed (that is, it's the previous stop PC).  If the LWP is\n      running and not stepping, this is 0.  */\n   CORE_ADDR stop_pc;\n@@ -238,7 +238,7 @@ struct lwp_info\n   int step;\n \n   /* The reason the LWP last stopped, if we need to track it\n-     (breakpoint, watchpoint, etc.)  */\n+     (breakpoint, watchpoint, etc.).  */\n   enum target_stop_reason stop_reason;\n \n   /* On architectures where it is possible to know the data address of"
    }
  ]
}