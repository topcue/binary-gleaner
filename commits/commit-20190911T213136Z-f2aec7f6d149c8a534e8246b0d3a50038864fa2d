{
  "sha": "f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjJhZWM3ZjZkMTQ5YzhhNTM0ZTgyNDZiMGQzYTUwMDM4ODY0ZmEyZA==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-09-09T17:55:39Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-09-11T21:31:36Z"
    },
    "message": "Make relocate_{path,gdb_directory} return std::string\n\nThis simplifies memory management. I've also changed some global variables\nto std::string accordingly (which store the result of these functions),\nbut not all because some are used with add_setshow_optional_filename_cmd\nwhich requires a char*.\n\ngdb/ChangeLog:\n\n2019-09-11  Christian Biesinger  <cbiesinger@google.com>\n\n\t* auto-load.c (auto_load_expand_dir_vars): Update.\n\t* defs.h (gdb_datadir): Change to std::string.\n\t(python_libdir): Likewise.\n\t(relocate_gdb_directory): Change return type to std::string.\n\t* guile/guile.c (gdbscm_data_directory): Update.\n\t(initialize_scheme_side): Update.\n\t* jit.c (jit_reader_dir): Change to std::string.\n\t(jit_reader_load_command): Update.\n\t* main.c (gdb_datadir): Change to std::string.\n\t(python_libdir): Likewise.\n\t(set_gdb_data_directory): Update.\n\t(relocate_path): Change to return std::string.\n\t(relocate_gdb_directory): Change to return std::string.\n\t(relocate_gdbinit_path_maybe_in_datadir): Update.\n\t(captured_main_1): Update.\n\t* python/python.c (do_start_initialization): Update.\n\t* top.c (show_gdb_datadir): Update.\n\t* xml-syscall.c (xml_init_syscalls_info): Update.\n\t(init_syscalls_info): Update.",
    "tree": {
      "sha": "66de5d6e1111cd053eade24c57ecc45283406f7c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/66de5d6e1111cd053eade24c57ecc45283406f7c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9224a01377868604ce4a7eb9c0d97736f7349dcd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9224a01377868604ce4a7eb9c0d97736f7349dcd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9224a01377868604ce4a7eb9c0d97736f7349dcd"
    }
  ],
  "stats": {
    "total": 141,
    "additions": 81,
    "deletions": 60
  },
  "files": [
    {
      "sha": "4c354700c4525c49becf1863522ca9c100495a33",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
      "patch": "@@ -1,3 +1,25 @@\n+2019-09-11  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* auto-load.c (auto_load_expand_dir_vars): Update.\n+\t* defs.h (gdb_datadir): Change to std::string.\n+\t(python_libdir): Likewise.\n+\t(relocate_gdb_directory): Change return type to std::string.\n+\t* guile/guile.c (gdbscm_data_directory): Update.\n+\t(initialize_scheme_side): Update.\n+\t* jit.c (jit_reader_dir): Change to std::string.\n+\t(jit_reader_load_command): Update.\n+\t* main.c (gdb_datadir): Change to std::string.\n+\t(python_libdir): Likewise.\n+\t(set_gdb_data_directory): Update.\n+\t(relocate_path): Change to return std::string.\n+\t(relocate_gdb_directory): Change to return std::string.\n+\t(relocate_gdbinit_path_maybe_in_datadir): Update.\n+\t(captured_main_1): Update.\n+\t* python/python.c (do_start_initialization): Update.\n+\t* top.c (show_gdb_datadir): Update.\n+\t* xml-syscall.c (xml_init_syscalls_info): Update.\n+\t(init_syscalls_info): Update.\n+\n 2019-09-11  Christian Biesinger  <cbiesinger@google.com>\n \n \t* main.c (relocate_gdbinit_path_maybe_in_datadir): Factor this code"
    },
    {
      "sha": "115d5c10e821eb6b33521b7b365c9eb4cf03a2af",
      "filename": "gdb/auto-load.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.c?ref=f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
      "patch": "@@ -178,7 +178,7 @@ static std::vector<gdb::unique_xmalloc_ptr<char>>\n auto_load_expand_dir_vars (const char *string)\n {\n   char *s = xstrdup (string);\n-  substitute_path_component (&s, \"$datadir\", gdb_datadir);\n+  substitute_path_component (&s, \"$datadir\", gdb_datadir.c_str ());\n   substitute_path_component (&s, \"$debugdir\", debug_file_directory);\n \n   if (debug_auto_load && strcmp (s, string) != 0)"
    },
    {
      "sha": "c9a38b60a6d0525de2c41e415e1631052dbfee58",
      "filename": "gdb/defs.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/defs.h?ref=f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
      "patch": "@@ -115,11 +115,11 @@ extern int dbx_commands;\n extern char *gdb_sysroot;\n \n /* * GDB datadir, used to store data files.  */\n-extern char *gdb_datadir;\n+extern std::string gdb_datadir;\n \n-/* * If non-NULL, the possibly relocated path to python's \"lib\" directory\n+/* * If not empty, the possibly relocated path to python's \"lib\" directory\n    specified with --with-python.  */\n-extern char *python_libdir;\n+extern std::string python_libdir;\n \n /* * Search path for separate debug files.  */\n extern char *debug_file_directory;\n@@ -282,7 +282,7 @@ struct value;\n \n /* This really belong in utils.c (path-utils.c?), but it references some\n    globals that are currently only available to main.c.  */\n-extern char *relocate_gdb_directory (const char *initial, bool relocatable);\n+extern std::string relocate_gdb_directory (const char *initial, bool relocatable);\n \n \f\n /* Annotation stuff.  */"
    },
    {
      "sha": "defe554f7675a98dd3e8f1f780ea3d191f7e7f08",
      "filename": "gdb/guile/guile.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/guile/guile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/guile/guile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/guile.c?ref=f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
      "patch": "@@ -325,7 +325,7 @@ gdbscm_execute_gdb_command (SCM command_scm, SCM rest)\n static SCM\n gdbscm_data_directory (void)\n {\n-  return gdbscm_scm_from_c_string (gdb_datadir);\n+  return gdbscm_scm_from_c_string (gdb_datadir.c_str ());\n }\n \n /* (guile-data-directory) -> string */\n@@ -582,7 +582,8 @@ initialize_scheme_side (void)\n {\n   char *boot_scm_path;\n \n-  guile_datadir = concat (gdb_datadir, SLASH_STRING, \"guile\", (char *) NULL);\n+  guile_datadir = concat (gdb_datadir.c_str (), SLASH_STRING, \"guile\",\n+\t\t\t  (char *) NULL);\n   boot_scm_path = concat (guile_datadir, SLASH_STRING, \"gdb\",\n \t\t\t  SLASH_STRING, boot_scm_filename, (char *) NULL);\n "
    },
    {
      "sha": "4722d6c6ce4a9903061be07191064ed3ea96657d",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
      "patch": "@@ -42,7 +42,7 @@\n #include \"readline/tilde.h\"\n #include \"completer.h\"\n \n-static const char *jit_reader_dir = NULL;\n+static std::string jit_reader_dir;\n \n static const struct objfile_data *jit_objfile_data;\n \n@@ -216,7 +216,7 @@ jit_reader_load_command (const char *args, int from_tty)\n     error (_(\"JIT reader already loaded.  Run jit-reader-unload first.\"));\n \n   if (!IS_ABSOLUTE_PATH (file.get ()))\n-    file.reset (xstrprintf (\"%s%s%s\", jit_reader_dir, SLASH_STRING,\n+    file.reset (xstrprintf (\"%s%s%s\", jit_reader_dir.c_str (), SLASH_STRING,\n \t\t\t    file.get ()));\n \n   loaded_jit_reader = jit_reader_load (file.get ());"
    },
    {
      "sha": "6b75fced23626e3c2b0c0361d78b183d88f086be",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 43,
      "deletions": 46,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
      "patch": "@@ -61,7 +61,7 @@ int dbx_commands = 0;\n char *gdb_sysroot = 0;\n \n /* GDB datadir, used to store data files.  */\n-char *gdb_datadir = 0;\n+std::string gdb_datadir;\n \n /* Non-zero if GDB_DATADIR was provided on the command line.\n    This doesn't track whether data-directory is set later from the\n@@ -70,7 +70,7 @@ static int gdb_datadir_provided = 0;\n \n /* If gdb was configured with --with-python=/path,\n    the possibly relocated path to python's lib directory.  */\n-char *python_libdir = 0;\n+std::string python_libdir;\n \n /* Target IO streams.  */\n struct ui_file *gdb_stdtargin;\n@@ -121,71 +121,70 @@ set_gdb_data_directory (const char *new_datadir)\n   else if (!S_ISDIR (st.st_mode))\n     warning (_(\"%s is not a directory.\"), new_datadir);\n \n-  xfree (gdb_datadir);\n-  gdb_datadir = gdb_realpath (new_datadir).release ();\n+  gdb_datadir = gdb_realpath (new_datadir).get ();\n \n   /* gdb_realpath won't return an absolute path if the path doesn't exist,\n      but we still want to record an absolute path here.  If the user entered\n      \"../foo\" and \"../foo\" doesn't exist then we'll record $(pwd)/../foo which\n      isn't canonical, but that's ok.  */\n-  if (!IS_ABSOLUTE_PATH (gdb_datadir))\n+  if (!IS_ABSOLUTE_PATH (gdb_datadir.c_str ()))\n     {\n-      gdb::unique_xmalloc_ptr<char> abs_datadir = gdb_abspath (gdb_datadir);\n+      gdb::unique_xmalloc_ptr<char> abs_datadir\n+        = gdb_abspath (gdb_datadir.c_str ());\n \n-      xfree (gdb_datadir);\n-      gdb_datadir = abs_datadir.release ();\n+      gdb_datadir = abs_datadir.get ();\n     }\n }\n \n /* Relocate a file or directory.  PROGNAME is the name by which gdb\n    was invoked (i.e., argv[0]).  INITIAL is the default value for the\n    file or directory.  RELOCATABLE is true if the value is relocatable,\n-   false otherwise.  Returns a newly allocated string; this may return\n-   NULL under the same conditions as make_relative_prefix.  */\n+   false otherwise.  This may return an empty string under the same\n+   conditions as make_relative_prefix returning NULL.  */\n \n-static char *\n+static std::string\n relocate_path (const char *progname, const char *initial, bool relocatable)\n {\n   if (relocatable)\n-    return make_relative_prefix (progname, BINDIR, initial);\n-  return xstrdup (initial);\n+    {\n+      gdb::unique_xmalloc_ptr<char> str (make_relative_prefix (progname,\n+\t\t\t\t\t\t\t       BINDIR,\n+\t\t\t\t\t\t\t       initial));\n+      if (str != nullptr)\n+\treturn str.get ();\n+      return std::string ();\n+    }\n+  return initial;\n }\n \n /* Like relocate_path, but specifically checks for a directory.\n    INITIAL is relocated according to the rules of relocate_path.  If\n    the result is a directory, it is used; otherwise, INITIAL is used.\n-   The chosen directory is then canonicalized using lrealpath.  This\n-   function always returns a newly-allocated string.  */\n+   The chosen directory is then canonicalized using lrealpath.  */\n \n-char *\n+std::string\n relocate_gdb_directory (const char *initial, bool relocatable)\n {\n-  char *dir;\n-\n-  dir = relocate_path (gdb_program_name, initial, relocatable);\n-  if (dir)\n+  std::string dir = relocate_path (gdb_program_name, initial, relocatable);\n+  if (!dir.empty ())\n     {\n       struct stat s;\n \n-      if (*dir == '\\0' || stat (dir, &s) != 0 || !S_ISDIR (s.st_mode))\n+      if (stat (dir.c_str (), &s) != 0 || !S_ISDIR (s.st_mode))\n \t{\n-\t  xfree (dir);\n-\t  dir = NULL;\n+\t  dir.clear ();\n \t}\n     }\n-  if (!dir)\n-    dir = xstrdup (initial);\n+  if (dir.empty ())\n+    dir = initial;\n \n   /* Canonicalize the directory.  */\n-  if (*dir)\n+  if (!dir.empty ())\n     {\n-      char *canon_sysroot = lrealpath (dir);\n+      gdb::unique_xmalloc_ptr<char> canon_sysroot (lrealpath (dir.c_str ()));\n \n       if (canon_sysroot)\n-\t{\n-\t  xfree (dir);\n-\t  dir = canon_sysroot;\n-\t}\n+\tdir = canon_sysroot.get ();\n     }\n \n   return dir;\n@@ -220,14 +219,9 @@ relocate_gdbinit_path_maybe_in_datadir (const std::string& file)\n     }\n   else\n     {\n-      char *relocated = relocate_path (gdb_program_name,\n-\t\t\t\t       file.c_str (),\n-\t\t\t\t       SYSTEM_GDBINIT_RELOCATABLE);\n-      if (relocated != nullptr)\n-\t{\n-\t  relocated_path = relocated;\n-\t  xfree (relocated);\n-\t}\n+      relocated_path = relocate_path (gdb_program_name,\n+\t\t\t\t      file.c_str (),\n+\t\t\t\t      SYSTEM_GDBINIT_RELOCATABLE);\n     }\n     return relocated_path;\n }\n@@ -541,20 +535,23 @@ captured_main_1 (struct captured_main_args *context)\n     perror_warning_with_name (_(\"error finding working directory\"));\n \n   /* Set the sysroot path.  */\n-  gdb_sysroot = relocate_gdb_directory (TARGET_SYSTEM_ROOT,\n-\t\t\t\t\tTARGET_SYSTEM_ROOT_RELOCATABLE);\n+  gdb_sysroot\n+    = xstrdup (relocate_gdb_directory (TARGET_SYSTEM_ROOT,\n+\t\t\t\t     TARGET_SYSTEM_ROOT_RELOCATABLE).c_str ());\n \n-  if (gdb_sysroot == NULL || *gdb_sysroot == '\\0')\n+  if (*gdb_sysroot == '\\0')\n     {\n       xfree (gdb_sysroot);\n       gdb_sysroot = xstrdup (TARGET_SYSROOT_PREFIX);\n     }\n \n-  debug_file_directory = relocate_gdb_directory (DEBUGDIR,\n-\t\t\t\t\t\t DEBUGDIR_RELOCATABLE);\n+  debug_file_directory\n+    = xstrdup (relocate_gdb_directory (DEBUGDIR,\n+\t\t\t\t     DEBUGDIR_RELOCATABLE).c_str ());\n \n-  gdb_datadir = relocate_gdb_directory (GDB_DATADIR,\n-\t\t\t\t\tGDB_DATADIR_RELOCATABLE);\n+  gdb_datadir\n+    = xstrdup (relocate_gdb_directory (GDB_DATADIR,\n+\t\t\t\t     GDB_DATADIR_RELOCATABLE).c_str ());\n \n #ifdef WITH_PYTHON_PATH\n   {"
    },
    {
      "sha": "9c8c635f72b60a6c632d9d18a482aba7926cfd72",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
      "patch": "@@ -1608,7 +1608,7 @@ do_start_initialization ()\n      /foo/lib/pythonX.Y/...\n      This must be done before calling Py_Initialize.  */\n   gdb::unique_xmalloc_ptr<char> progname\n-    (concat (ldirname (python_libdir).c_str (), SLASH_STRING, \"bin\",\n+    (concat (ldirname (python_libdir.c_str ()).c_str (), SLASH_STRING, \"bin\",\n \t      SLASH_STRING, \"python\", (char *) NULL));\n #ifdef IS_PY3K\n   std::string oldloc = setlocale (LC_ALL, NULL);"
    },
    {
      "sha": "2b53640af061e7f0bb1085433627150fbb4af7db",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
      "patch": "@@ -2038,7 +2038,7 @@ show_gdb_datadir (struct ui_file *file, int from_tty,\n \t\t  struct cmd_list_element *c, const char *value)\n {\n   fprintf_filtered (file, _(\"GDB's data directory is \\\"%s\\\".\\n\"),\n-\t\t    gdb_datadir);\n+\t\t    gdb_datadir.c_str ());\n }\n \n static void"
    },
    {
      "sha": "dc988dfae8c131e2cf85c1d27c48ad4aa5bff388",
      "filename": "gdb/xml-syscall.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/xml-syscall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2aec7f6d149c8a534e8246b0d3a50038864fa2d/gdb/xml-syscall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xml-syscall.c?ref=f2aec7f6d149c8a534e8246b0d3a50038864fa2d",
      "patch": "@@ -316,7 +316,8 @@ static struct syscalls_info *\n xml_init_syscalls_info (const char *filename)\n {\n   gdb::optional<gdb::char_vector> full_file\n-    = xml_fetch_content_from_file (filename, gdb_datadir);\n+    = xml_fetch_content_from_file (filename,\n+\t\t\t\t   const_cast<char *>(gdb_datadir.c_str ()));\n   if (!full_file)\n     return NULL;\n \n@@ -336,7 +337,7 @@ init_syscalls_info (struct gdbarch *gdbarch)\n   /* Should we re-read the XML info for this target?  */\n   if (syscalls_info != NULL && !syscalls_info->my_gdb_datadir.empty ()\n       && filename_cmp (syscalls_info->my_gdb_datadir.c_str (),\n-\t\t       gdb_datadir) != 0)\n+\t\t       gdb_datadir.c_str ()) != 0)\n     {\n       /* The data-directory changed from the last time we used it.\n \t It means that we have to re-read the XML info.  */\n@@ -361,7 +362,7 @@ init_syscalls_info (struct gdbarch *gdbarch)\n     {\n       if (xml_syscall_file != NULL)\n \twarning (_(\"Could not load the syscall XML file `%s/%s'.\"),\n-\t\t gdb_datadir, xml_syscall_file);\n+\t\t gdb_datadir.c_str (), xml_syscall_file);\n       else\n \twarning (_(\"There is no XML file to open.\"));\n "
    }
  ]
}