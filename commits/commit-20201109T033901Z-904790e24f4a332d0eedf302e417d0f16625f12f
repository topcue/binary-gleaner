{
  "sha": "904790e24f4a332d0eedf302e417d0f16625f12f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTA0NzkwZTI0ZjRhMzMyZDBlZWRmMzAyZTQxN2QwZjE2NjI1ZjEyZg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-11-09T02:34:04Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-11-09T03:39:01Z"
    },
    "message": "xcoff dependency list for static libraries\n\nThis patch fixes fails adding library dependencies for xcoff, and\nimproves the error message should stat fail for an archive member.\n\"tmpdir/artest.a: File not found\" is plainly wrong.\n\nFixes these fails:\npowerpc-aix5.1  +FAIL: ar adding library dependencies\npowerpc-aix5.2  +FAIL: ar adding library dependencies\nrs6000-aix4.3.3  +FAIL: ar adding library dependencies\nrs6000-aix5.1  +FAIL: ar adding library dependencies\nrs6000-aix5.2  +FAIL: ar adding library dependencies\n\n\t* archive.c (bfd_ar_hdr_from_filesystem): Use bfd_set_input_error\n\twhen stat of archive member fails.\n\t* coff-rs6000.c (xcoff_write_archive_contents_old),\n\t(xcoff_write_archive_contents_big): Likewise, and handle in-memory\n\tbfd.",
    "tree": {
      "sha": "eb23159a218f730e931a3ab3bdf281f1449f9c2b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/eb23159a218f730e931a3ab3bdf281f1449f9c2b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/904790e24f4a332d0eedf302e417d0f16625f12f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/904790e24f4a332d0eedf302e417d0f16625f12f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/904790e24f4a332d0eedf302e417d0f16625f12f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/904790e24f4a332d0eedf302e417d0f16625f12f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c9af384513858f3e30bdb71c12662dd1e5f9f673",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9af384513858f3e30bdb71c12662dd1e5f9f673",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c9af384513858f3e30bdb71c12662dd1e5f9f673"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 37,
    "deletions": 8
  },
  "files": [
    {
      "sha": "0d1d63d5fed65aca8ff556d939aad21608c38064",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/904790e24f4a332d0eedf302e417d0f16625f12f/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/904790e24f4a332d0eedf302e417d0f16625f12f/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=904790e24f4a332d0eedf302e417d0f16625f12f",
      "patch": "@@ -1,3 +1,11 @@\n+2020-11-09  Alan Modra  <amodra@gmail.com>\n+\n+\t* archive.c (bfd_ar_hdr_from_filesystem): Use bfd_set_input_error\n+\twhen stat of archive member fails.\n+\t* coff-rs6000.c (xcoff_write_archive_contents_old),\n+\t(xcoff_write_archive_contents_big): Likewise, and handle in-memory\n+\tbfd.\n+\n 2020-11-03  Alan Modra  <amodra@gmail.com>\n \n \t* elf.c (bfd_section_from_shdr): Free sections_being_created."
    },
    {
      "sha": "1836b9b47e26d9ccbe455a0042a7a24494f4e878",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/904790e24f4a332d0eedf302e417d0f16625f12f/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/904790e24f4a332d0eedf302e417d0f16625f12f/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=904790e24f4a332d0eedf302e417d0f16625f12f",
      "patch": "@@ -1875,7 +1875,7 @@ bfd_ar_hdr_from_filesystem (bfd *abfd, const char *filename, bfd *member)\n     }\n   else if (stat (filename, &status) != 0)\n     {\n-      bfd_set_error (bfd_error_system_call);\n+      bfd_set_input_error (member, bfd_error_system_call);\n       return NULL;\n     }\n "
    },
    {
      "sha": "5e5b182da9c0b5ae0bc65254f335429ccd35e992",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 28,
      "deletions": 7,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/904790e24f4a332d0eedf302e417d0f16625f12f/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/904790e24f4a332d0eedf302e417d0f16625f12f/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=904790e24f4a332d0eedf302e417d0f16625f12f",
      "patch": "@@ -2096,11 +2096,23 @@ xcoff_write_archive_contents_old (bfd *abfd)\n \t  struct xcoff_ar_hdr *ahdrp;\n \t  struct stat s;\n \n-\t  if (stat (bfd_get_filename (sub), &s) != 0)\n+\t  if ((sub->flags & BFD_IN_MEMORY) != 0)\n \t    {\n-\t      bfd_set_error (bfd_error_system_call);\n+\t      /* Assume we just \"made\" the member, and fake it.  */\n+\t      struct bfd_in_memory *bim\n+\t\t= (struct bfd_in_memory *) sub->iostream;\n+\t      time (&s.st_mtime);\n+\t      s.st_uid = getuid ();\n+\t      s.st_gid = getgid ();\n+\t      s.st_mode = 0644;\n+\t      s.st_size = bim->size;\n+\t    }\n+\t  else if (stat (bfd_get_filename (sub), &s) != 0)\n+\t    {\n+\t      bfd_set_input_error (sub, bfd_error_system_call);\n \t      return FALSE;\n \t    }\n+\n \t  if ((abfd->flags & BFD_DETERMINISTIC_OUTPUT) != 0)\n \t    {\n \t      s.st_mtime = 0;\n@@ -2320,14 +2332,23 @@ xcoff_write_archive_contents_big (bfd *abfd)\n \t  struct xcoff_ar_hdr_big *ahdrp;\n \t  struct stat s;\n \n-\t  /* XXX This should actually be a call to stat64 (at least on\n-\t     32-bit machines).\n-\t     XXX This call will fail if the original object is not found.  */\n-\t  if (stat (bfd_get_filename (current_bfd), &s) != 0)\n+\t  if ((current_bfd->flags & BFD_IN_MEMORY) != 0)\n \t    {\n-\t      bfd_set_error (bfd_error_system_call);\n+\t      /* Assume we just \"made\" the member, and fake it.  */\n+\t      struct bfd_in_memory *bim\n+\t\t= (struct bfd_in_memory *) current_bfd->iostream;\n+\t      time (&s.st_mtime);\n+\t      s.st_uid = getuid ();\n+\t      s.st_gid = getgid ();\n+\t      s.st_mode = 0644;\n+\t      s.st_size = bim->size;\n+\t    }\n+\t  else if (stat (bfd_get_filename (current_bfd), &s) != 0)\n+\t    {\n+\t      bfd_set_input_error (current_bfd, bfd_error_system_call);\n \t      return FALSE;\n \t    }\n+\n \t  if ((abfd->flags & BFD_DETERMINISTIC_OUTPUT) != 0)\n \t    {\n \t      s.st_mtime = 0;"
    }
  ]
}