{
  "sha": "6a72dbb692efa28ac732e7a5584229dad3aeb317",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmE3MmRiYjY5MmVmYTI4YWM3MzJlN2E1NTg0MjI5ZGFkM2FlYjMxNw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-26T01:38:20Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-26T01:39:29Z"
    },
    "message": "gdb/guile: use return values of add_setshow functions in add_setshow_generic\n\nUse the set_show_commands objects returned by the add_setshow functions\nin add_setshow_generic.  This lets us avoid looking up the commands\nafter creating them, instead using the return objects directly.\n\nMake add_setshow_generic return a set_show_commands object, which is a\nbit nicer than returning both commands by parameter.\n\nFinally, store using that object in param_smob.\n\nEquivalent of 7bd22f56a3cf (\"gdb/python: use return values of\nadd_setshow functions in add_setshow_generic\"), but for guile.\n\ngdb/ChangeLog:\n\n\t* guile/scm-param.c (struct param_smob) <set_command,\n\tshow_command>: Remove.\n\t<commands>: New.\n\t(pascm_is_valid): Adjust.\n\t(add_setshow_generic): Use return values of add_setshow\n\tfunctions, return a set_show_commands.\n\t(gdbscm_register_parameter_x): Adjust.\n\nChange-Id: I18ed9e7dd5646529491c86749a5cb20763acd1f0",
    "tree": {
      "sha": "934c53fb48cb32fc59c9c61a3c851e3a47848bd3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/934c53fb48cb32fc59c9c61a3c851e3a47848bd3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6a72dbb692efa28ac732e7a5584229dad3aeb317",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a72dbb692efa28ac732e7a5584229dad3aeb317",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6a72dbb692efa28ac732e7a5584229dad3aeb317",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a72dbb692efa28ac732e7a5584229dad3aeb317/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4c0ba02a749d84a7e569e010fca9f640c30d17df",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c0ba02a749d84a7e569e010fca9f640c30d17df",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4c0ba02a749d84a7e569e010fca9f640c30d17df"
    }
  ],
  "stats": {
    "total": 164,
    "additions": 76,
    "deletions": 88
  },
  "files": [
    {
      "sha": "14d4a9ec226f9d7e96cb962eaed7fabf78a3af08",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a72dbb692efa28ac732e7a5584229dad3aeb317/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a72dbb692efa28ac732e7a5584229dad3aeb317/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6a72dbb692efa28ac732e7a5584229dad3aeb317",
      "patch": "@@ -1,3 +1,13 @@\n+2021-06-25  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* guile/scm-param.c (struct param_smob) <set_command,\n+\tshow_command>: Remove.\n+\t<commands>: New.\n+\t(pascm_is_valid): Adjust.\n+\t(add_setshow_generic): Use return values of add_setshow\n+\tfunctions, return a set_show_commands.\n+\t(gdbscm_register_parameter_x): Adjust.\n+\n 2021-06-25  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* command.h (add_setshow_enum_cmd): Remove context parameter."
    },
    {
      "sha": "c052d04974ae2be57f105731f80c2276afc511a8",
      "filename": "gdb/guile/scm-param.c",
      "status": "modified",
      "additions": 66,
      "deletions": 88,
      "changes": 154,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a72dbb692efa28ac732e7a5584229dad3aeb317/gdb/guile/scm-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a72dbb692efa28ac732e7a5584229dad3aeb317/gdb/guile/scm-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-param.c?ref=6a72dbb692efa28ac732e7a5584229dad3aeb317",
      "patch": "@@ -89,8 +89,7 @@ struct param_smob\n   /* The corresponding gdb command objects.\n      These are NULL if the parameter has not been registered yet, or\n      is no longer registered.  */\n-  struct cmd_list_element *set_command;\n-  struct cmd_list_element *show_command;\n+  set_show_commands commands;\n \n   /* The value of the parameter.  */\n   union pascm_variable value;\n@@ -232,7 +231,7 @@ pascm_get_param_smob_arg_unsafe (SCM self, int arg_pos, const char *func_name)\n static int\n pascm_is_valid (param_smob *p_smob)\n {\n-  return p_smob->set_command != NULL;\n+  return p_smob->commands.set != nullptr;\n }\n \f\n /* A helper function which return the default documentation string for\n@@ -350,111 +349,100 @@ pascm_show_func (struct ui_file *file, int from_tty,\n /* A helper function that dispatches to the appropriate add_setshow\n    function.  */\n \n-static void\n+static set_show_commands\n add_setshow_generic (enum var_types param_type, enum command_class cmd_class,\n \t\t     char *cmd_name, param_smob *self,\n \t\t     char *set_doc, char *show_doc, char *help_doc,\n \t\t     cmd_const_sfunc_ftype *set_func,\n \t\t     show_value_ftype *show_func,\n \t\t     struct cmd_list_element **set_list,\n-\t\t     struct cmd_list_element **show_list,\n-\t\t     struct cmd_list_element **set_cmd,\n-\t\t     struct cmd_list_element **show_cmd)\n+\t\t     struct cmd_list_element **show_list)\n {\n-  struct cmd_list_element *param = NULL;\n-  const char *tmp_name = NULL;\n+  set_show_commands commands;\n \n   switch (param_type)\n     {\n     case var_boolean:\n-      add_setshow_boolean_cmd (cmd_name, cmd_class,\n-\t\t\t       &self->value.boolval,\n-\t\t\t       set_doc, show_doc, help_doc,\n-\t\t\t       set_func, show_func,\n-\t\t\t       set_list, show_list);\n-\n+      commands = add_setshow_boolean_cmd (cmd_name, cmd_class,\n+\t\t\t\t\t  &self->value.boolval, set_doc,\n+\t\t\t\t\t  show_doc, help_doc, set_func,\n+\t\t\t\t\t  show_func, set_list, show_list);\n       break;\n \n     case var_auto_boolean:\n-      add_setshow_auto_boolean_cmd (cmd_name, cmd_class,\n-\t\t\t\t    &self->value.autoboolval,\n-\t\t\t\t    set_doc, show_doc, help_doc,\n-\t\t\t\t    set_func, show_func,\n-\t\t\t\t    set_list, show_list);\n+      commands = add_setshow_auto_boolean_cmd (cmd_name, cmd_class,\n+\t\t\t\t\t       &self->value.autoboolval,\n+\t\t\t\t\t       set_doc, show_doc, help_doc,\n+\t\t\t\t\t       set_func, show_func, set_list,\n+\t\t\t\t\t       show_list);\n       break;\n \n     case var_uinteger:\n-      add_setshow_uinteger_cmd (cmd_name, cmd_class,\n-\t\t\t\t&self->value.uintval,\n-\t\t\t\tset_doc, show_doc, help_doc,\n-\t\t\t\tset_func, show_func,\n-\t\t\t\tset_list, show_list);\n+      commands = add_setshow_uinteger_cmd (cmd_name, cmd_class,\n+\t\t\t\t\t   &self->value.uintval, set_doc,\n+\t\t\t\t\t   show_doc, help_doc, set_func,\n+\t\t\t\t\t   show_func, set_list, show_list);\n       break;\n \n     case var_zinteger:\n-      add_setshow_zinteger_cmd (cmd_name, cmd_class,\n-\t\t\t\t&self->value.intval,\n-\t\t\t\tset_doc, show_doc, help_doc,\n-\t\t\t\tset_func, show_func,\n-\t\t\t\tset_list, show_list);\n+      commands = add_setshow_zinteger_cmd (cmd_name, cmd_class,\n+\t\t\t\t\t   &self->value.intval, set_doc,\n+\t\t\t\t\t   show_doc, help_doc, set_func,\n+\t\t\t\t\t   show_func, set_list, show_list);\n       break;\n \n     case var_zuinteger:\n-      add_setshow_zuinteger_cmd (cmd_name, cmd_class,\n-\t\t\t\t &self->value.uintval,\n-\t\t\t\t set_doc, show_doc, help_doc,\n-\t\t\t\t set_func, show_func,\n-\t\t\t\t set_list, show_list);\n+      commands = add_setshow_zuinteger_cmd (cmd_name, cmd_class,\n+\t\t\t\t\t    &self->value.uintval, set_doc,\n+\t\t\t\t\t    show_doc, help_doc, set_func,\n+\t\t\t\t\t    show_func, set_list, show_list);\n       break;\n \n     case var_zuinteger_unlimited:\n-      add_setshow_zuinteger_unlimited_cmd (cmd_name, cmd_class,\n-\t\t\t\t\t   &self->value.intval,\n-\t\t\t\t\t   set_doc, show_doc, help_doc,\n-\t\t\t\t\t   set_func, show_func,\n-\t\t\t\t\t   set_list, show_list);\n+      commands = add_setshow_zuinteger_unlimited_cmd (cmd_name, cmd_class,\n+\t\t\t\t\t\t      &self->value.intval,\n+\t\t\t\t\t\t      set_doc, show_doc,\n+\t\t\t\t\t\t      help_doc, set_func,\n+\t\t\t\t\t\t      show_func, set_list,\n+\t\t\t\t\t\t      show_list);\n       break;\n \n     case var_string:\n-      add_setshow_string_cmd (cmd_name, cmd_class,\n-\t\t\t      &self->value.stringval,\n-\t\t\t      set_doc, show_doc, help_doc,\n-\t\t\t      set_func, show_func,\n-\t\t\t      set_list, show_list);\n+      commands = add_setshow_string_cmd (cmd_name, cmd_class,\n+\t\t\t\t\t &self->value.stringval, set_doc,\n+\t\t\t\t\t show_doc, help_doc, set_func,\n+\t\t\t\t\t show_func, set_list, show_list);\n       break;\n \n     case var_string_noescape:\n-      add_setshow_string_noescape_cmd (cmd_name, cmd_class,\n-\t\t\t\t       &self->value.stringval,\n-\t\t\t\t       set_doc, show_doc, help_doc,\n-\t\t\t\t       set_func, show_func,\n-\t\t\t\t       set_list, show_list);\n+      commands = add_setshow_string_noescape_cmd (cmd_name, cmd_class,\n+\t\t\t\t\t\t  &self->value.stringval,\n+\t\t\t\t\t\t  set_doc, show_doc, help_doc,\n+\t\t\t\t\t\t  set_func, show_func, set_list,\n+\t\t\t\t\t\t  show_list);\n \n       break;\n \n     case var_optional_filename:\n-      add_setshow_optional_filename_cmd (cmd_name, cmd_class,\n-\t\t\t\t\t &self->value.stringval,\n-\t\t\t\t\t set_doc, show_doc, help_doc,\n-\t\t\t\t\t set_func, show_func,\n-\t\t\t\t\t set_list, show_list);\n+      commands = add_setshow_optional_filename_cmd (cmd_name, cmd_class,\n+\t\t\t\t\t\t    &self->value.stringval,\n+\t\t\t\t\t\t    set_doc, show_doc, help_doc,\n+\t\t\t\t\t\t    set_func, show_func,\n+\t\t\t\t\t\t    set_list, show_list);\n       break;\n \n     case var_filename:\n-      add_setshow_filename_cmd (cmd_name, cmd_class,\n-\t\t\t\t&self->value.stringval,\n-\t\t\t\tset_doc, show_doc, help_doc,\n-\t\t\t\tset_func, show_func,\n-\t\t\t\tset_list, show_list);\n+      commands = add_setshow_filename_cmd (cmd_name, cmd_class,\n+\t\t\t\t\t   &self->value.stringval, set_doc,\n+\t\t\t\t\t   show_doc, help_doc, set_func,\n+\t\t\t\t\t   show_func, set_list, show_list);\n       break;\n \n     case var_enum:\n-      add_setshow_enum_cmd (cmd_name, cmd_class,\n-\t\t\t    self->enumeration,\n-\t\t\t    &self->value.cstringval,\n-\t\t\t    set_doc, show_doc, help_doc,\n-\t\t\t    set_func, show_func,\n-\t\t\t    set_list, show_list);\n+      commands = add_setshow_enum_cmd (cmd_name, cmd_class, self->enumeration,\n+\t\t\t\t       &self->value.cstringval, set_doc,\n+\t\t\t\t       show_doc, help_doc, set_func, show_func,\n+\t\t\t\t       set_list, show_list);\n       /* Initialize the value, just in case.  */\n       self->value.cstringval = self->enumeration[0];\n       break;\n@@ -463,19 +451,12 @@ add_setshow_generic (enum var_types param_type, enum command_class cmd_class,\n       gdb_assert_not_reached (\"bad param_type value\");\n     }\n \n-  /* Lookup created parameter, and register Scheme object against the\n-     parameter context.  Perform this task against both lists.  */\n-  tmp_name = cmd_name;\n-  param = lookup_cmd (&tmp_name, *show_list, \"\", NULL, 0, 1);\n-  gdb_assert (param != NULL);\n-  param->set_context (self);\n-  *set_cmd = param;\n-\n-  tmp_name = cmd_name;\n-  param = lookup_cmd (&tmp_name, *set_list, \"\", NULL, 0, 1);\n-  gdb_assert (param != NULL);\n-  param->set_context (self);\n-  *show_cmd = param;\n+  /* Register Scheme object against the commandsparameter context.  Perform this\n+     task against both lists.  */\n+  commands.set->set_context (self);\n+  commands.show->set_context (self);\n+\n+  return commands;\n }\n \n /* Return an array of strings corresponding to the enum values for\n@@ -1012,15 +993,12 @@ gdbscm_register_parameter_x (SCM self)\n   gdbscm_gdb_exception exc {};\n   try\n     {\n-      add_setshow_generic (p_smob->type, p_smob->cmd_class,\n-\t\t\t   p_smob->cmd_name, p_smob,\n-\t\t\t   p_smob->set_doc, p_smob->show_doc, p_smob->doc,\n-\t\t\t   (gdbscm_is_procedure (p_smob->set_func)\n-\t\t\t    ? pascm_set_func : NULL),\n-\t\t\t   (gdbscm_is_procedure (p_smob->show_func)\n-\t\t\t    ? pascm_show_func : NULL),\n-\t\t\t   set_list, show_list,\n-\t\t\t   &p_smob->set_command, &p_smob->show_command);\n+      p_smob->commands = add_setshow_generic\n+\t(p_smob->type, p_smob->cmd_class, p_smob->cmd_name, p_smob,\n+\t p_smob->set_doc, p_smob->show_doc, p_smob->doc,\n+\t (gdbscm_is_procedure (p_smob->set_func) ? pascm_set_func : NULL),\n+\t (gdbscm_is_procedure (p_smob->show_func) ? pascm_show_func : NULL),\n+\t set_list, show_list);\n     }\n   catch (const gdb_exception &except)\n     {"
    }
  ]
}